// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 15431 0 0
// PrepareRussian ;
  12: CALL 1581 0 0
// PrepareArabian ;
  16: CALL 291 0 0
// Action ;
  20: CALL 2743 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := true ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 170: LD_ADDR_EXP 16
 174: PUSH
 175: EMPTY
 176: ST_TO_ADDR
// isAlarm := false ;
 177: LD_ADDR_EXP 17
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 185: LD_ADDR_EXP 18
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// hasRevolver := false ;
 193: LD_ADDR_EXP 8
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// heikeHasRevolver := false ;
 201: LD_ADDR_EXP 20
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 209: LD_ADDR_EXP 21
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// adminAreaDiscovered := false ;
 217: LD_ADDR_EXP 22
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// hasExplosionCollected := false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// contactWithAmerican := false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// laundryAllowed := false ;
 249: LD_ADDR_EXP 26
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// heikeAsRussian := false ;
 257: LD_ADDR_EXP 27
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// giviAsRussian := false ;
 265: LD_ADDR_EXP 28
 269: PUSH
 270: LD_INT 0
 272: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 273: LD_ADDR_EXP 29
 277: PUSH
 278: EMPTY
 279: ST_TO_ADDR
// enable ( entranceEvent ) ;
 280: LD_INT 1
 282: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 283: LD_INT 2
 285: DISABLE_MARKED
// end ; end_of_file
 286: LD_VAR 0 1
 290: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
// uc_side := 4 ;
 295: LD_ADDR_OWVAR 20
 299: PUSH
 300: LD_INT 4
 302: ST_TO_ADDR
// uc_nation := 1 ;
 303: LD_ADDR_OWVAR 21
 307: PUSH
 308: LD_INT 1
 310: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 311: LD_ADDR_EXP 42
 315: PUSH
 316: LD_STRING 07_Americans
 318: PPUSH
 319: CALL_OW 31
 323: ST_TO_ADDR
// if americanSquad < 5 then
 324: LD_EXP 42
 328: PUSH
 329: LD_INT 5
 331: LESS
 332: IFFALSE 424
// begin if not americanSquad then
 334: LD_EXP 42
 338: NOT
 339: IFFALSE 348
// americanSquad := [ ] ;
 341: LD_ADDR_EXP 42
 345: PUSH
 346: EMPTY
 347: ST_TO_ADDR
// for i := americanSquad to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
 348: LD_ADDR_VAR 0 2
 352: PUSH
 353: DOUBLE
 354: LD_EXP 42
 358: DEC
 359: ST_TO_ADDR
 360: LD_INT 3
 362: PUSH
 363: LD_INT 4
 365: PUSH
 366: LD_INT 5
 368: PUSH
 369: LD_INT 5
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: LIST
 376: LIST
 377: PUSH
 378: LD_OWVAR 67
 382: ARRAY
 383: PUSH
 384: FOR_TO
 385: IFFALSE 422
// begin PrepareHuman ( false , 2 , 6 ) ;
 387: LD_INT 0
 389: PPUSH
 390: LD_INT 2
 392: PPUSH
 393: LD_INT 6
 395: PPUSH
 396: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 400: LD_ADDR_EXP 42
 404: PUSH
 405: LD_EXP 42
 409: PPUSH
 410: CALL_OW 44
 414: PPUSH
 415: CALL 53894 0 2
 419: ST_TO_ADDR
// end ;
 420: GO 384
 422: POP
 423: POP
// end ; Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 424: LD_ADDR_EXP 44
 428: PUSH
 429: LD_STRING UsCommander
 431: PPUSH
 432: LD_EXP 1
 436: NOT
 437: PPUSH
 438: LD_STRING 07_
 440: PPUSH
 441: CALL 16445 0 3
 445: ST_TO_ADDR
// if not Doug then
 446: LD_EXP 44
 450: NOT
 451: IFFALSE 485
// begin PrepareSoldier ( sex_male , 6 ) ;
 453: LD_INT 1
 455: PPUSH
 456: LD_INT 6
 458: PPUSH
 459: CALL_OW 381
// Doug := CreateHuman ;
 463: LD_ADDR_EXP 44
 467: PUSH
 468: CALL_OW 44
 472: ST_TO_ADDR
// SetClass ( Doug , class_prison ) ;
 473: LD_EXP 44
 477: PPUSH
 478: LD_INT 33
 480: PPUSH
 481: CALL_OW 336
// end ; if johnnySaved or debug then
 485: LD_EXP 3
 489: PUSH
 490: LD_EXP 1
 494: OR
 495: IFFALSE 522
// begin Harris := NewCharacter ( Harris ) ;
 497: LD_ADDR_EXP 43
 501: PUSH
 502: LD_STRING Harris
 504: PPUSH
 505: CALL_OW 25
 509: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 510: LD_EXP 43
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: CALL_OW 336
// end ; uc_side := 2 ;
 522: LD_ADDR_OWVAR 20
 526: PUSH
 527: LD_INT 2
 529: ST_TO_ADDR
// uc_nation := 2 ;
 530: LD_ADDR_OWVAR 21
 534: PUSH
 535: LD_INT 2
 537: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 538: LD_ADDR_EXP 30
 542: PUSH
 543: LD_STRING Heike
 545: PPUSH
 546: LD_EXP 1
 550: NOT
 551: PPUSH
 552: LD_EXP 2
 556: PPUSH
 557: CALL 16445 0 3
 561: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 562: LD_ADDR_EXP 33
 566: PUSH
 567: LD_STRING Ibrahim
 569: PPUSH
 570: LD_EXP 1
 574: NOT
 575: PPUSH
 576: LD_EXP 2
 580: PPUSH
 581: CALL 16445 0 3
 585: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 586: LD_ADDR_EXP 31
 590: PUSH
 591: LD_STRING Givi
 593: PPUSH
 594: LD_EXP 1
 598: NOT
 599: PPUSH
 600: LD_EXP 2
 604: PPUSH
 605: CALL 16445 0 3
 609: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 610: LD_ADDR_EXP 34
 614: PUSH
 615: LD_STRING Kamil
 617: PPUSH
 618: LD_EXP 1
 622: NOT
 623: PPUSH
 624: LD_EXP 2
 628: PPUSH
 629: CALL 16445 0 3
 633: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 634: LD_ADDR_EXP 35
 638: PUSH
 639: LD_STRING Kaia
 641: PPUSH
 642: LD_EXP 1
 646: NOT
 647: PPUSH
 648: LD_EXP 2
 652: PPUSH
 653: CALL 16445 0 3
 657: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 658: LD_ADDR_EXP 36
 662: PUSH
 663: LD_STRING Sophia
 665: PPUSH
 666: LD_EXP 1
 670: NOT
 671: PPUSH
 672: LD_EXP 2
 676: PPUSH
 677: CALL 16445 0 3
 681: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 682: LD_ADDR_EXP 37
 686: PUSH
 687: LD_STRING Markov
 689: PPUSH
 690: LD_EXP 1
 694: NOT
 695: PPUSH
 696: LD_EXP 2
 700: PPUSH
 701: CALL 16445 0 3
 705: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 706: LD_ADDR_EXP 40
 710: PUSH
 711: LD_STRING Aviradze
 713: PPUSH
 714: LD_EXP 1
 718: NOT
 719: PPUSH
 720: LD_EXP 2
 724: PPUSH
 725: CALL 16445 0 3
 729: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 730: LD_ADDR_EXP 39
 734: PUSH
 735: LD_STRING Kurt
 737: PPUSH
 738: LD_EXP 1
 742: NOT
 743: PPUSH
 744: LD_EXP 2
 748: PPUSH
 749: CALL 16445 0 3
 753: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 754: LD_ADDR_EXP 32
 758: PUSH
 759: LD_STRING Mike
 761: PPUSH
 762: LD_EXP 1
 766: NOT
 767: PPUSH
 768: LD_EXP 2
 772: PPUSH
 773: CALL 16445 0 3
 777: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 778: LD_ADDR_EXP 38
 782: PUSH
 783: LD_STRING Olaf
 785: PPUSH
 786: LD_INT 0
 788: PPUSH
 789: LD_STRING 
 791: PPUSH
 792: CALL 16445 0 3
 796: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 797: LD_ADDR_EXP 41
 801: PUSH
 802: LD_STRING 07_others
 804: PPUSH
 805: CALL_OW 31
 809: ST_TO_ADDR
// end ;
 810: LD_VAR 0 1
 814: RET
// export function PrepareGame ; var i ; begin
 815: LD_INT 0
 817: PPUSH
 818: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 819: LD_EXP 30
 823: PPUSH
 824: LD_INT 23
 826: PPUSH
 827: CALL_OW 52
// if Givi then
 831: LD_EXP 31
 835: IFFALSE 873
// begin SetSide ( Givi , 5 ) ;
 837: LD_EXP 31
 841: PPUSH
 842: LD_INT 5
 844: PPUSH
 845: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
 849: LD_EXP 31
 853: PPUSH
 854: LD_INT 9
 856: PPUSH
 857: LD_INT 0
 859: PPUSH
 860: CALL_OW 49
// ComHold ( Givi ) ;
 864: LD_EXP 31
 868: PPUSH
 869: CALL_OW 140
// end ; if Markov then
 873: LD_EXP 37
 877: IFFALSE 903
// begin SetSide ( Markov , 5 ) ;
 879: LD_EXP 37
 883: PPUSH
 884: LD_INT 5
 886: PPUSH
 887: CALL_OW 235
// PlaceHumanInUnit ( Markov , ruFac ) ;
 891: LD_EXP 37
 895: PPUSH
 896: LD_INT 61
 898: PPUSH
 899: CALL_OW 52
// end ; if Olaf then
 903: LD_EXP 38
 907: IFFALSE 948
// begin SetSide ( Olaf , 5 ) ;
 909: LD_EXP 38
 913: PPUSH
 914: LD_INT 5
 916: PPUSH
 917: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
 921: LD_EXP 38
 925: PPUSH
 926: LD_INT 16
 928: PPUSH
 929: LD_INT 0
 931: PPUSH
 932: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
 936: LD_EXP 38
 940: PPUSH
 941: LD_INT 3
 943: PPUSH
 944: CALL 57046 0 2
// end ; if Kamil then
 948: LD_EXP 34
 952: IFFALSE 978
// begin SetSide ( Kamil , 5 ) ;
 954: LD_EXP 34
 958: PPUSH
 959: LD_INT 5
 961: PPUSH
 962: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
 966: LD_EXP 34
 970: PPUSH
 971: LD_INT 109
 973: PPUSH
 974: CALL_OW 52
// end ; if Kurt then
 978: LD_EXP 39
 982: IFFALSE 1008
// begin SetSide ( Kurt , 5 ) ;
 984: LD_EXP 39
 988: PPUSH
 989: LD_INT 5
 991: PPUSH
 992: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
 996: LD_EXP 39
1000: PPUSH
1001: LD_INT 169
1003: PPUSH
1004: CALL_OW 52
// end ; if Kaia then
1008: LD_EXP 35
1012: IFFALSE 1038
// begin SetSide ( Kaia , 5 ) ;
1014: LD_EXP 35
1018: PPUSH
1019: LD_INT 5
1021: PPUSH
1022: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1026: LD_EXP 35
1030: PPUSH
1031: LD_INT 147
1033: PPUSH
1034: CALL_OW 52
// end ; if Harris then
1038: LD_EXP 43
1042: IFFALSE 1080
// begin SetSide ( Harris , 4 ) ;
1044: LD_EXP 43
1048: PPUSH
1049: LD_INT 4
1051: PPUSH
1052: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1056: LD_EXP 43
1060: PPUSH
1061: LD_INT 20
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: CALL_OW 49
// ComHold ( i ) ;
1071: LD_VAR 0 2
1075: PPUSH
1076: CALL_OW 140
// end ; if Doug then
1080: LD_EXP 44
1084: IFFALSE 1110
// begin SetSide ( Doug , 4 ) ;
1086: LD_EXP 44
1090: PPUSH
1091: LD_INT 4
1093: PPUSH
1094: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1098: LD_EXP 44
1102: PPUSH
1103: LD_INT 106
1105: PPUSH
1106: CALL_OW 52
// end ; if Aviradze then
1110: LD_EXP 40
1114: IFFALSE 1140
// begin SetSide ( Aviradze , 5 ) ;
1116: LD_EXP 40
1120: PPUSH
1121: LD_INT 5
1123: PPUSH
1124: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1128: LD_EXP 40
1132: PPUSH
1133: LD_INT 119
1135: PPUSH
1136: CALL_OW 52
// end ; if Ibrahim then
1140: LD_EXP 33
1144: IFFALSE 1170
// begin SetSide ( Ibrahim , 5 ) ;
1146: LD_EXP 33
1150: PPUSH
1151: LD_INT 5
1153: PPUSH
1154: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1158: LD_EXP 33
1162: PPUSH
1163: LD_INT 119
1165: PPUSH
1166: CALL_OW 52
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1170: LD_EXP 48
1174: PPUSH
1175: LD_INT 119
1177: PPUSH
1178: CALL_OW 52
// for i in americanSquad do
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_EXP 42
1191: PUSH
1192: FOR_IN
1193: IFFALSE 1221
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1195: LD_VAR 0 2
1199: PPUSH
1200: LD_INT 21
1202: PPUSH
1203: LD_INT 0
1205: PPUSH
1206: CALL_OW 49
// ComHold ( i ) ;
1210: LD_VAR 0 2
1214: PPUSH
1215: CALL_OW 140
// end ;
1219: GO 1192
1221: POP
1222: POP
// for i in heikeSecondSquad do
1223: LD_ADDR_VAR 0 2
1227: PUSH
1228: LD_EXP 41
1232: PUSH
1233: FOR_IN
1234: IFFALSE 1262
// begin PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1236: LD_VAR 0 2
1240: PPUSH
1241: LD_INT 22
1243: PPUSH
1244: LD_INT 0
1246: PPUSH
1247: CALL_OW 49
// ComHold ( i ) ;
1251: LD_VAR 0 2
1255: PPUSH
1256: CALL_OW 140
// end ;
1260: GO 1233
1262: POP
1263: POP
// if not hasVodka then
1264: LD_EXP 4
1268: NOT
1269: IFFALSE 1328
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1271: LD_ADDR_VAR 0 2
1275: PUSH
1276: LD_INT 2
1278: PUSH
1279: LD_INT 22
1281: PUSH
1282: LD_INT 2
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 22
1291: PUSH
1292: LD_INT 5
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: PPUSH
1304: CALL_OW 69
1308: PUSH
1309: FOR_IN
1310: IFFALSE 1326
// SetLives ( i , 500 ) ;
1312: LD_VAR 0 2
1316: PPUSH
1317: LD_INT 500
1319: PPUSH
1320: CALL_OW 234
1324: GO 1309
1326: POP
1327: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1328: LD_ADDR_VAR 0 2
1332: PUSH
1333: LD_INT 22
1335: PUSH
1336: LD_INT 4
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PPUSH
1343: CALL_OW 69
1347: PUSH
1348: FOR_IN
1349: IFFALSE 1365
// SetLives ( i , 500 ) ;
1351: LD_VAR 0 2
1355: PPUSH
1356: LD_INT 500
1358: PPUSH
1359: CALL_OW 234
1363: GO 1348
1365: POP
1366: POP
// end ;
1367: LD_VAR 0 1
1371: RET
// export function SetClassKaiaRevolver ; begin
1372: LD_INT 0
1374: PPUSH
// if IsOk ( Kaia ) then
1375: LD_EXP 35
1379: PPUSH
1380: CALL_OW 302
1384: IFFALSE 1398
// SetClass ( Kaia , class_revolver ) ;
1386: LD_EXP 35
1390: PPUSH
1391: LD_INT 34
1393: PPUSH
1394: CALL_OW 336
// end ;
1398: LD_VAR 0 1
1402: RET
// export function SpawnHeikeAsRussian ; begin
1403: LD_INT 0
1405: PPUSH
// RemoveUnit ( Heike ) ;
1406: LD_EXP 30
1410: PPUSH
1411: CALL_OW 64
// heikeTmp := Heike ;
1415: LD_ADDR_EXP 45
1419: PUSH
1420: LD_EXP 30
1424: ST_TO_ADDR
// uc_side := 2 ;
1425: LD_ADDR_OWVAR 20
1429: PUSH
1430: LD_INT 2
1432: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1433: LD_ADDR_EXP 30
1437: PUSH
1438: LD_STRING HeikeRu
1440: PPUSH
1441: CALL_OW 25
1445: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1446: LD_EXP 45
1450: PPUSH
1451: LD_EXP 30
1455: PPUSH
1456: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1460: LD_EXP 30
1464: PPUSH
1465: LD_INT 165
1467: PPUSH
1468: CALL_OW 52
// heikeAsRussian := true ;
1472: LD_ADDR_EXP 27
1476: PUSH
1477: LD_INT 1
1479: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1480: LD_STRING M1-laundry-out
1482: PPUSH
1483: CALL_OW 604
// end ;
1487: LD_VAR 0 1
1491: RET
// export function SpawnGiviAsRussian ; begin
1492: LD_INT 0
1494: PPUSH
// RemoveUnit ( Givi ) ;
1495: LD_EXP 31
1499: PPUSH
1500: CALL_OW 64
// giviTmp := Givi ;
1504: LD_ADDR_EXP 46
1508: PUSH
1509: LD_EXP 31
1513: ST_TO_ADDR
// uc_side := 2 ;
1514: LD_ADDR_OWVAR 20
1518: PUSH
1519: LD_INT 2
1521: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1522: LD_ADDR_EXP 31
1526: PUSH
1527: LD_STRING GiviRu
1529: PPUSH
1530: CALL_OW 25
1534: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1535: LD_EXP 46
1539: PPUSH
1540: LD_EXP 31
1544: PPUSH
1545: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1549: LD_EXP 31
1553: PPUSH
1554: LD_INT 165
1556: PPUSH
1557: CALL_OW 52
// giviAsRussian := true ;
1561: LD_ADDR_EXP 28
1565: PUSH
1566: LD_INT 1
1568: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1569: LD_STRING M1-laundry-out
1571: PPUSH
1572: CALL_OW 604
// end ; end_of_file
1576: LD_VAR 0 1
1580: RET
// export russianKillers , ruCommisar , ruDisturb ; export function PrepareRussian ; var i , j , tmp ; begin
1581: LD_INT 0
1583: PPUSH
1584: PPUSH
1585: PPUSH
1586: PPUSH
// uc_side := 3 ;
1587: LD_ADDR_OWVAR 20
1591: PUSH
1592: LD_INT 3
1594: ST_TO_ADDR
// uc_nation := 3 ;
1595: LD_ADDR_OWVAR 21
1599: PUSH
1600: LD_INT 3
1602: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1603: LD_ADDR_VAR 0 2
1607: PUSH
1608: LD_INT 21
1610: PUSH
1611: LD_INT 3
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PPUSH
1618: CALL_OW 69
1622: PUSH
1623: FOR_IN
1624: IFFALSE 1640
// SetBLevel ( i , 7 ) ;
1626: LD_VAR 0 2
1630: PPUSH
1631: LD_INT 7
1633: PPUSH
1634: CALL_OW 241
1638: GO 1623
1640: POP
1641: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1642: LD_ADDR_VAR 0 2
1646: PUSH
1647: LD_INT 22
1649: PUSH
1650: LD_INT 3
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: LD_INT 30
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 30
1672: PUSH
1673: LD_INT 1
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PPUSH
1689: CALL_OW 69
1693: PUSH
1694: FOR_IN
1695: IFFALSE 1739
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
1697: LD_VAR 0 2
1701: PPUSH
1702: CALL_OW 274
1706: PPUSH
1707: LD_INT 1
1709: PPUSH
1710: LD_INT 1000
1712: PPUSH
1713: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
1717: LD_VAR 0 2
1721: PPUSH
1722: CALL_OW 274
1726: PPUSH
1727: LD_INT 2
1729: PPUSH
1730: LD_INT 1000
1732: PPUSH
1733: CALL_OW 277
// end ;
1737: GO 1694
1739: POP
1740: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1741: LD_ADDR_VAR 0 2
1745: PUSH
1746: LD_INT 22
1748: PUSH
1749: LD_INT 3
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 30
1758: PUSH
1759: LD_INT 32
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PPUSH
1770: CALL_OW 69
1774: PUSH
1775: FOR_IN
1776: IFFALSE 1810
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
1778: LD_INT 0
1780: PPUSH
1781: LD_INT 5
1783: PUSH
1784: LD_OWVAR 67
1788: PLUS
1789: PPUSH
1790: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
1794: CALL_OW 44
1798: PPUSH
1799: LD_VAR 0 2
1803: PPUSH
1804: CALL_OW 52
// end ;
1808: GO 1775
1810: POP
1811: POP
// PrepareSoldier ( sex_male , 8 ) ;
1812: LD_INT 1
1814: PPUSH
1815: LD_INT 8
1817: PPUSH
1818: CALL_OW 381
// hc_name := Pavel Muchin ;
1822: LD_ADDR_OWVAR 26
1826: PUSH
1827: LD_STRING Pavel Muchin
1829: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
1830: LD_ADDR_OWVAR 29
1834: PUSH
1835: LD_INT 12
1837: PUSH
1838: LD_INT 12
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: ST_TO_ADDR
// ruDisturb := CreateHuman ;
1845: LD_ADDR_EXP 49
1849: PUSH
1850: CALL_OW 44
1854: ST_TO_ADDR
// InitHC_All ( ) ;
1855: CALL_OW 584
// uc_side := 6 ;
1859: LD_ADDR_OWVAR 20
1863: PUSH
1864: LD_INT 6
1866: ST_TO_ADDR
// uc_nation := 3 ;
1867: LD_ADDR_OWVAR 21
1871: PUSH
1872: LD_INT 3
1874: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
1875: LD_ADDR_VAR 0 4
1879: PUSH
1880: LD_INT 14
1882: PUSH
1883: LD_INT 15
1885: PUSH
1886: LD_INT 48
1888: PUSH
1889: LD_INT 24
1891: PUSH
1892: LD_INT 149
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: ST_TO_ADDR
// for i in tmp do
1902: LD_ADDR_VAR 0 2
1906: PUSH
1907: LD_VAR 0 4
1911: PUSH
1912: FOR_IN
1913: IFFALSE 1961
// begin for j := 1 to 2 do
1915: LD_ADDR_VAR 0 3
1919: PUSH
1920: DOUBLE
1921: LD_INT 1
1923: DEC
1924: ST_TO_ADDR
1925: LD_INT 2
1927: PUSH
1928: FOR_TO
1929: IFFALSE 1957
// begin PrepareSoldier ( false , 7 ) ;
1931: LD_INT 0
1933: PPUSH
1934: LD_INT 7
1936: PPUSH
1937: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
1941: CALL_OW 44
1945: PPUSH
1946: LD_VAR 0 2
1950: PPUSH
1951: CALL_OW 52
// end ;
1955: GO 1928
1957: POP
1958: POP
// end ;
1959: GO 1912
1961: POP
1962: POP
// end ;
1963: LD_VAR 0 1
1967: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
1968: LD_INT 0
1970: PPUSH
1971: PPUSH
1972: PPUSH
1973: PPUSH
// uc_side := 3 ;
1974: LD_ADDR_OWVAR 20
1978: PUSH
1979: LD_INT 3
1981: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
1982: LD_ADDR_OWVAR 21
1986: PUSH
1987: LD_INT 1
1989: PPUSH
1990: LD_INT 3
1992: PPUSH
1993: CALL_OW 12
1997: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
1998: LD_ADDR_VAR 0 4
2002: PUSH
2003: LD_INT 5
2005: PPUSH
2006: LD_INT 0
2008: PPUSH
2009: CALL_OW 517
2013: ST_TO_ADDR
// for i := 1 to 3 do
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: DOUBLE
2020: LD_INT 1
2022: DEC
2023: ST_TO_ADDR
2024: LD_INT 3
2026: PUSH
2027: FOR_TO
2028: IFFALSE 2097
// begin PrepareHuman ( false , 33 , 0 ) ;
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 33
2035: PPUSH
2036: LD_INT 0
2038: PPUSH
2039: CALL_OW 380
// un := CreateHuman ;
2043: LD_ADDR_VAR 0 3
2047: PUSH
2048: CALL_OW 44
2052: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2053: LD_VAR 0 3
2057: PPUSH
2058: LD_VAR 0 4
2062: PUSH
2063: LD_INT 1
2065: ARRAY
2066: PUSH
2067: LD_VAR 0 2
2071: ARRAY
2072: PPUSH
2073: LD_VAR 0 4
2077: PUSH
2078: LD_INT 2
2080: ARRAY
2081: PUSH
2082: LD_VAR 0 2
2086: ARRAY
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: CALL_OW 601
// end ;
2095: GO 2027
2097: POP
2098: POP
// end ;
2099: LD_VAR 0 1
2103: RET
// export function PrepareFirstScene ; var i , un ; begin
2104: LD_INT 0
2106: PPUSH
2107: PPUSH
2108: PPUSH
// uc_side := 4 ;
2109: LD_ADDR_OWVAR 20
2113: PUSH
2114: LD_INT 4
2116: ST_TO_ADDR
// uc_nation := 1 ;
2117: LD_ADDR_OWVAR 21
2121: PUSH
2122: LD_INT 1
2124: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2125: LD_INT 0
2127: PPUSH
2128: LD_INT 33
2130: PPUSH
2131: LD_INT 0
2133: PPUSH
2134: CALL_OW 380
// for i := 1 to 2 do
2138: LD_ADDR_VAR 0 2
2142: PUSH
2143: DOUBLE
2144: LD_INT 1
2146: DEC
2147: ST_TO_ADDR
2148: LD_INT 2
2150: PUSH
2151: FOR_TO
2152: IFFALSE 2217
// begin un := CreateHuman ;
2154: LD_ADDR_VAR 0 3
2158: PUSH
2159: CALL_OW 44
2163: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2164: LD_VAR 0 3
2168: PPUSH
2169: LD_INT 1
2171: PPUSH
2172: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
2176: LD_VAR 0 3
2180: PPUSH
2181: LD_INT 6
2183: PPUSH
2184: LD_INT 0
2186: PPUSH
2187: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 1
2198: PPUSH
2199: CALL 57046 0 2
// SetLives ( un , 300 ) ;
2203: LD_VAR 0 3
2207: PPUSH
2208: LD_INT 300
2210: PPUSH
2211: CALL_OW 234
// end ;
2215: GO 2151
2217: POP
2218: POP
// uc_side := 3 ;
2219: LD_ADDR_OWVAR 20
2223: PUSH
2224: LD_INT 3
2226: ST_TO_ADDR
// uc_nation := 3 ;
2227: LD_ADDR_OWVAR 21
2231: PUSH
2232: LD_INT 3
2234: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
2235: LD_INT 1
2237: PPUSH
2238: LD_INT 5
2240: PPUSH
2241: CALL_OW 381
// for i := 1 to 3 do
2245: LD_ADDR_VAR 0 2
2249: PUSH
2250: DOUBLE
2251: LD_INT 1
2253: DEC
2254: ST_TO_ADDR
2255: LD_INT 3
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2332
// begin un := CreateHuman ;
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: CALL_OW 44
2270: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
2271: LD_ADDR_EXP 47
2275: PUSH
2276: LD_EXP 47
2280: PPUSH
2281: LD_VAR 0 3
2285: PPUSH
2286: CALL 53894 0 2
2290: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 4
2298: PPUSH
2299: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
2303: LD_VAR 0 3
2307: PPUSH
2308: LD_INT 7
2310: PPUSH
2311: LD_INT 0
2313: PPUSH
2314: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
2318: LD_VAR 0 3
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: CALL 57046 0 2
// end ;
2330: GO 2258
2332: POP
2333: POP
// ruCommisar := CreateHuman ;
2334: LD_ADDR_EXP 48
2338: PUSH
2339: CALL_OW 44
2343: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
2344: LD_EXP 48
2348: PPUSH
2349: LD_INT 124
2351: PPUSH
2352: LD_INT 37
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
2362: LD_EXP 48
2366: PPUSH
2367: LD_INT 3
2369: PPUSH
2370: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
2374: LD_EXP 48
2378: PPUSH
2379: LD_INT 3
2381: PPUSH
2382: CALL 57046 0 2
// end ;
2386: LD_VAR 0 1
2390: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
2391: LD_INT 0
2393: PPUSH
2394: PPUSH
2395: PPUSH
2396: PPUSH
// uc_side := 6 ;
2397: LD_ADDR_OWVAR 20
2401: PUSH
2402: LD_INT 6
2404: ST_TO_ADDR
// uc_nation := 3 ;
2405: LD_ADDR_OWVAR 21
2409: PUSH
2410: LD_INT 3
2412: ST_TO_ADDR
// ruPatrol := [ ] ;
2413: LD_ADDR_EXP 50
2417: PUSH
2418: EMPTY
2419: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
2420: LD_ADDR_VAR 0 4
2424: PUSH
2425: LD_INT 26
2427: PUSH
2428: LD_INT 30
2430: PUSH
2431: LD_INT 39
2433: PUSH
2434: LD_INT 43
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: ST_TO_ADDR
// for i := 1 to spawn do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: DOUBLE
2449: LD_INT 1
2451: DEC
2452: ST_TO_ADDR
2453: LD_VAR 0 4
2457: PUSH
2458: FOR_TO
2459: IFFALSE 2570
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
2461: LD_INT 0
2463: PPUSH
2464: LD_INT 4
2466: PUSH
2467: LD_INT 5
2469: PUSH
2470: LD_INT 6
2472: PUSH
2473: LD_INT 7
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: PUSH
2482: LD_OWVAR 67
2486: ARRAY
2487: PPUSH
2488: CALL_OW 381
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// SetTag ( un , i ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_VAR 0 2
2511: PPUSH
2512: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
2516: LD_ADDR_EXP 50
2520: PUSH
2521: LD_EXP 50
2525: PPUSH
2526: LD_VAR 0 3
2530: PPUSH
2531: CALL 53894 0 2
2535: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
2536: LD_VAR 0 3
2540: PPUSH
2541: LD_VAR 0 4
2545: PUSH
2546: LD_VAR 0 2
2550: ARRAY
2551: PPUSH
2552: LD_INT 0
2554: PPUSH
2555: CALL_OW 49
// ComHold ( un ) ;
2559: LD_VAR 0 3
2563: PPUSH
2564: CALL_OW 140
// end ;
2568: GO 2458
2570: POP
2571: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
2572: LD_ADDR_VAR 0 4
2576: PUSH
2577: LD_INT 48
2579: PUSH
2580: LD_INT 49
2582: PUSH
2583: LD_INT 50
2585: PUSH
2586: LD_INT 51
2588: PUSH
2589: LD_INT 52
2591: PUSH
2592: LD_INT 53
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: ST_TO_ADDR
// for i := 1 to spawn do
2603: LD_ADDR_VAR 0 2
2607: PUSH
2608: DOUBLE
2609: LD_INT 1
2611: DEC
2612: ST_TO_ADDR
2613: LD_VAR 0 4
2617: PUSH
2618: FOR_TO
2619: IFFALSE 2728
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
2621: LD_INT 0
2623: PPUSH
2624: LD_INT 4
2626: PUSH
2627: LD_INT 5
2629: PUSH
2630: LD_INT 6
2632: PUSH
2633: LD_INT 7
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: LD_OWVAR 67
2646: ARRAY
2647: PPUSH
2648: CALL_OW 381
// un := CreateHuman ;
2652: LD_ADDR_VAR 0 3
2656: PUSH
2657: CALL_OW 44
2661: ST_TO_ADDR
// SetTag ( un , 0 ) ;
2662: LD_VAR 0 3
2666: PPUSH
2667: LD_INT 0
2669: PPUSH
2670: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
2674: LD_ADDR_EXP 50
2678: PUSH
2679: LD_EXP 50
2683: PPUSH
2684: LD_VAR 0 3
2688: PPUSH
2689: CALL 53894 0 2
2693: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
2694: LD_VAR 0 3
2698: PPUSH
2699: LD_VAR 0 4
2703: PUSH
2704: LD_VAR 0 2
2708: ARRAY
2709: PPUSH
2710: LD_INT 0
2712: PPUSH
2713: CALL_OW 49
// ComHold ( un ) ;
2717: LD_VAR 0 3
2721: PPUSH
2722: CALL_OW 140
// end ;
2726: GO 2618
2728: POP
2729: POP
// end ;
2730: LD_VAR 0 1
2734: RET
// export function SpawnAdditionalRuGuards ; begin
2735: LD_INT 0
2737: PPUSH
// end ; end_of_file
2738: LD_VAR 0 1
2742: RET
// export function Action ; var speaker , i , tmp ; begin
2743: LD_INT 0
2745: PPUSH
2746: PPUSH
2747: PPUSH
2748: PPUSH
// Video ( true ) ;
2749: LD_INT 1
2751: PPUSH
2752: CALL 53866 0 1
// hasNormalScene := Kaia or Givi ;
2756: LD_ADDR_EXP 5
2760: PUSH
2761: LD_EXP 35
2765: PUSH
2766: LD_EXP 31
2770: OR
2771: ST_TO_ADDR
// if hasNormalScene then
2772: LD_EXP 5
2776: IFFALSE 3011
// begin for i in americanSquad do
2778: LD_ADDR_VAR 0 3
2782: PUSH
2783: LD_EXP 42
2787: PUSH
2788: FOR_IN
2789: IFFALSE 2835
// begin SetClass ( i , 33 ) ;
2791: LD_VAR 0 3
2795: PPUSH
2796: LD_INT 33
2798: PPUSH
2799: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
2803: LD_VAR 0 3
2807: PPUSH
2808: LD_INT 78
2810: PPUSH
2811: LD_INT 16
2813: PPUSH
2814: LD_INT 5
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 50
// ComHold ( i ) ;
2824: LD_VAR 0 3
2828: PPUSH
2829: CALL_OW 140
// end ;
2833: GO 2788
2835: POP
2836: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi ] union heikeSecondSquad ;
2837: LD_ADDR_VAR 0 4
2841: PUSH
2842: LD_EXP 32
2846: PUSH
2847: LD_EXP 33
2851: PUSH
2852: LD_EXP 34
2856: PUSH
2857: LD_EXP 35
2861: PUSH
2862: LD_EXP 36
2866: PUSH
2867: LD_EXP 37
2871: PUSH
2872: LD_EXP 38
2876: PUSH
2877: LD_EXP 39
2881: PUSH
2882: LD_EXP 31
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: PUSH
2898: LD_EXP 41
2902: UNION
2903: ST_TO_ADDR
// SetClass ( Heike , 33 ) ;
2904: LD_EXP 30
2908: PPUSH
2909: LD_INT 33
2911: PPUSH
2912: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
2916: LD_EXP 30
2920: PPUSH
2921: LD_INT 117
2923: PPUSH
2924: LD_INT 24
2926: PPUSH
2927: LD_INT 3
2929: PPUSH
2930: LD_INT 0
2932: PPUSH
2933: CALL 56034 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
2937: LD_EXP 30
2941: PPUSH
2942: LD_INT 123
2944: PPUSH
2945: LD_INT 39
2947: PPUSH
2948: CALL_OW 118
// for i in tmp do
2952: LD_ADDR_VAR 0 3
2956: PUSH
2957: LD_VAR 0 4
2961: PUSH
2962: FOR_IN
2963: IFFALSE 3009
// begin SetClass ( i , 33 ) ;
2965: LD_VAR 0 3
2969: PPUSH
2970: LD_INT 33
2972: PPUSH
2973: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
2977: LD_VAR 0 3
2981: PPUSH
2982: LD_INT 3
2984: PPUSH
2985: LD_INT 0
2987: PPUSH
2988: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
2992: LD_VAR 0 3
2996: PPUSH
2997: LD_INT 113
2999: PPUSH
3000: LD_INT 16
3002: PPUSH
3003: CALL_OW 118
// end ;
3007: GO 2962
3009: POP
3010: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
3011: LD_INT 124
3013: PPUSH
3014: LD_INT 39
3016: PPUSH
3017: CALL_OW 86
// PrepareDeadBodies ;
3021: CALL 1968 0 0
// PrepareFirstScene ;
3025: CALL 2104 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3029: LD_INT 152
3031: PPUSH
3032: LD_INT 65
3034: PPUSH
3035: LD_INT 2
3037: PPUSH
3038: LD_INT 70
3040: NEG
3041: PPUSH
3042: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3046: LD_INT 152
3048: PPUSH
3049: LD_INT 65
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
3059: LD_INT 122
3061: PPUSH
3062: LD_INT 40
3064: PPUSH
3065: LD_INT 2
3067: PPUSH
3068: LD_INT 8
3070: NEG
3071: PPUSH
3072: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
3076: LD_INT 124
3078: PPUSH
3079: LD_INT 37
3081: PPUSH
3082: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
3086: LD_EXP 48
3090: PPUSH
3091: LD_STRING DRum-Execution-1
3093: PPUSH
3094: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
3098: LD_EXP 48
3102: PPUSH
3103: LD_STRING DRum-Execution-2
3105: PPUSH
3106: CALL_OW 88
// wait ( 0 0$01 ) ;
3110: LD_INT 35
3112: PPUSH
3113: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
3117: LD_EXP 48
3121: PPUSH
3122: LD_STRING DRum-Execution-3
3124: PPUSH
3125: CALL_OW 88
// wait ( 0 0$1 ) ;
3129: LD_INT 35
3131: PPUSH
3132: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
3136: LD_EXP 48
3140: PPUSH
3141: LD_STRING DRum-Execution-4
3143: PPUSH
3144: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
3148: LD_EXP 47
3152: PUSH
3153: LD_INT 1
3155: ARRAY
3156: PPUSH
3157: LD_INT 122
3159: PPUSH
3160: LD_INT 39
3162: PPUSH
3163: CALL_OW 428
3167: PPUSH
3168: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
3172: LD_EXP 47
3176: PUSH
3177: LD_INT 2
3179: ARRAY
3180: PPUSH
3181: LD_INT 123
3183: PPUSH
3184: LD_INT 41
3186: PPUSH
3187: CALL_OW 428
3191: PPUSH
3192: CALL_OW 115
// AddComHold ( russianKillers ) ;
3196: LD_EXP 47
3200: PPUSH
3201: CALL_OW 200
// wait ( 0 0$1 ) ;
3205: LD_INT 35
3207: PPUSH
3208: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
3212: LD_INT 122
3214: PPUSH
3215: LD_INT 40
3217: PPUSH
3218: LD_INT 2
3220: PPUSH
3221: CALL_OW 331
// for i in russianKillers union ruCommisar do
3225: LD_ADDR_VAR 0 3
3229: PUSH
3230: LD_EXP 47
3234: PUSH
3235: LD_EXP 48
3239: UNION
3240: PUSH
3241: FOR_IN
3242: IFFALSE 3255
// RemoveUnit ( i ) ;
3244: LD_VAR 0 3
3248: PPUSH
3249: CALL_OW 64
3253: GO 3241
3255: POP
3256: POP
// if hasNormalScene then
3257: LD_EXP 5
3261: IFFALSE 3269
// ActionNormal else
3263: CALL 3278 0 0
3267: GO 3273
// ActionAdditional ;
3269: CALL 5045 0 0
// end ;
3273: LD_VAR 0 1
3277: RET
// function ActionNormal ; var i , tmp ; begin
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// CenterNowOnUnits ( Heike ) ;
3283: LD_EXP 30
3287: PPUSH
3288: CALL_OW 87
// wait ( 0 0$1 ) ;
3292: LD_INT 35
3294: PPUSH
3295: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
3299: LD_EXP 30
3303: PPUSH
3304: LD_INT 115
3306: PPUSH
3307: LD_INT 19
3309: PPUSH
3310: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
3314: LD_EXP 30
3318: PPUSH
3319: LD_INT 113
3321: PPUSH
3322: LD_INT 16
3324: PPUSH
3325: CALL_OW 178
// wait ( 0 0$2 ) ;
3329: LD_INT 70
3331: PPUSH
3332: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
3336: LD_EXP 30
3340: PPUSH
3341: LD_STRING DH-Conspiracy-1
3343: PPUSH
3344: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
3348: LD_EXP 35
3352: PPUSH
3353: LD_STRING DK-Conspiracy-2
3355: PPUSH
3356: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
3360: LD_EXP 31
3364: PPUSH
3365: LD_STRING DG-Conspiracy-3
3367: PPUSH
3368: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
3372: LD_EXP 31
3376: PPUSH
3377: LD_STRING DG-Conspiracy-4
3379: PPUSH
3380: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
3384: LD_EXP 30
3388: PPUSH
3389: LD_STRING DH-Conspiracy-5
3391: PPUSH
3392: CALL_OW 88
// if IsOk ( Kamil ) then
3396: LD_EXP 34
3400: PPUSH
3401: CALL_OW 302
3405: IFFALSE 3463
// begin hasVodka := true ;
3407: LD_ADDR_EXP 4
3411: PUSH
3412: LD_INT 1
3414: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
3415: LD_EXP 34
3419: PPUSH
3420: LD_STRING DKam-Conspiracy-6
3422: PPUSH
3423: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
3427: LD_EXP 34
3431: PPUSH
3432: LD_STRING DKam-Conspiracy-7
3434: PPUSH
3435: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
3439: LD_EXP 34
3443: PPUSH
3444: LD_STRING DKam-Conspiracy-8
3446: PPUSH
3447: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
3451: LD_EXP 34
3455: PPUSH
3456: LD_STRING DKam-Conspiracy-9
3458: PPUSH
3459: CALL_OW 88
// end ; if IsOk ( Sophia ) then
3463: LD_EXP 36
3467: PPUSH
3468: CALL_OW 302
3472: IFFALSE 3653
// begin americanContact := true ;
3474: LD_ADDR_EXP 10
3478: PUSH
3479: LD_INT 1
3481: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
3482: LD_STRING M1-american
3484: PPUSH
3485: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
3489: LD_EXP 36
3493: PPUSH
3494: LD_STRING DS-Conspiracy-10
3496: PPUSH
3497: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
3501: LD_EXP 37
3505: PPUSH
3506: LD_STRING DM-Conspiracy-11
3508: PPUSH
3509: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
3513: LD_EXP 36
3517: PPUSH
3518: LD_STRING DS-Conspiracy-12
3520: PPUSH
3521: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
3525: LD_INT 84
3527: PPUSH
3528: LD_INT 19
3530: PPUSH
3531: LD_INT 105
3533: PPUSH
3534: CALL 15072 0 3
// if johnnySaved then
3538: LD_EXP 3
3542: IFFALSE 3582
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
3544: LD_EXP 36
3548: PPUSH
3549: LD_STRING DS-Conspiracy-13
3551: PPUSH
3552: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
3556: LD_EXP 30
3560: PPUSH
3561: LD_STRING DH-Conspiracy-14
3563: PPUSH
3564: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
3568: LD_EXP 36
3572: PPUSH
3573: LD_STRING DH-Conspiracy-15
3575: PPUSH
3576: CALL_OW 88
// end else
3580: GO 3618
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
3582: LD_EXP 36
3586: PPUSH
3587: LD_STRING DS-Conspiracy-a-13
3589: PPUSH
3590: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
3594: LD_EXP 30
3598: PPUSH
3599: LD_STRING DH-Conspiracy-a-14
3601: PPUSH
3602: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
3606: LD_EXP 36
3610: PPUSH
3611: LD_STRING DH-Conspiracy-a-15
3613: PPUSH
3614: CALL_OW 88
// end ; if IsOk ( Givi ) then
3618: LD_EXP 31
3622: PPUSH
3623: CALL_OW 302
3627: IFFALSE 3653
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
3629: LD_EXP 31
3633: PPUSH
3634: LD_STRING DG-Conspiracy-a-16
3636: PPUSH
3637: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
3641: LD_EXP 30
3645: PPUSH
3646: LD_STRING DH-Conspiracy-a-17
3648: PPUSH
3649: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
3653: LD_EXP 30
3657: PPUSH
3658: LD_STRING DH-Conspiracy-16
3660: PPUSH
3661: CALL_OW 88
// if IsOk ( Givi ) then
3665: LD_EXP 31
3669: PPUSH
3670: CALL_OW 302
3674: IFFALSE 3946
// begin hasStimDrugs := true ;
3676: LD_ADDR_EXP 9
3680: PUSH
3681: LD_INT 1
3683: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
3684: LD_STRING M1-drugs
3686: PPUSH
3687: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
3691: LD_EXP 31
3695: PPUSH
3696: LD_STRING DG-Conspiracy-17
3698: PPUSH
3699: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
3703: LD_INT 162
3705: PPUSH
3706: LD_INT 2
3708: PPUSH
3709: CALL_OW 235
// ShowPlace ( 184 , 95 , 0 0$3 ) ;
3713: LD_INT 184
3715: PPUSH
3716: LD_INT 95
3718: PPUSH
3719: LD_INT 105
3721: PPUSH
3722: CALL 15072 0 3
// SetSide ( drugsLab , 3 ) ;
3726: LD_INT 162
3728: PPUSH
3729: LD_INT 3
3731: PPUSH
3732: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
3736: LD_EXP 31
3740: PPUSH
3741: LD_STRING DG-Conspiracy-18
3743: PPUSH
3744: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
3748: LD_EXP 31
3752: PPUSH
3753: LD_STRING DG-Conspiracy-19
3755: PPUSH
3756: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
3760: LD_EXP 31
3764: PPUSH
3765: LD_STRING DG-Conspiracy-20
3767: PPUSH
3768: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
3772: LD_EXP 30
3776: PPUSH
3777: LD_STRING DH-Conspiracy-21
3779: PPUSH
3780: CALL_OW 88
// if IsOk ( Kaia ) then
3784: LD_EXP 35
3788: PPUSH
3789: CALL_OW 302
3793: IFFALSE 3867
// begin hasExplosions := true ;
3795: LD_ADDR_EXP 6
3799: PUSH
3800: LD_INT 1
3802: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
3803: LD_STRING M1-explosive
3805: PPUSH
3806: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
3810: LD_EXP 35
3814: PPUSH
3815: LD_STRING DK-Conspiracy-22
3817: PPUSH
3818: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
3822: LD_INT 73
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
3832: LD_INT 170
3834: PPUSH
3835: LD_INT 104
3837: PPUSH
3838: LD_INT 105
3840: PPUSH
3841: CALL 15072 0 3
// SetSide ( barExplosion , 3 ) ;
3845: LD_INT 73
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
3855: LD_EXP 35
3859: PPUSH
3860: LD_STRING DK-Conspiracy-23
3862: PPUSH
3863: CALL_OW 88
// end ; if IsOk ( Olaf ) then
3867: LD_EXP 38
3871: PPUSH
3872: CALL_OW 302
3876: IFFALSE 3946
// begin hasExplosionsInFactory := true ;
3878: LD_ADDR_EXP 7
3882: PUSH
3883: LD_INT 1
3885: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
3886: LD_EXP 38
3890: PPUSH
3891: LD_STRING DO-Conspiracy-24
3893: PPUSH
3894: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
3898: LD_INT 175
3900: PPUSH
3901: LD_INT 54
3903: PPUSH
3904: LD_INT 70
3906: PPUSH
3907: CALL 15072 0 3
// if IsOk ( Markov ) then
3911: LD_EXP 37
3915: PPUSH
3916: CALL_OW 302
3920: IFFALSE 3946
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
3922: LD_EXP 37
3926: PPUSH
3927: LD_STRING DMar-Conspiracy-25
3929: PPUSH
3930: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
3934: LD_EXP 37
3938: PPUSH
3939: LD_STRING DMar-Conspiracy-26
3941: PPUSH
3942: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
3946: LD_EXP 39
3950: PPUSH
3951: CALL_OW 302
3955: PUSH
3956: LD_EXP 35
3960: PPUSH
3961: CALL_OW 302
3965: AND
3966: IFFALSE 4418
// begin hasWeapons := true ;
3968: LD_ADDR_EXP 19
3972: PUSH
3973: LD_INT 1
3975: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
3976: LD_STRING M1-weapons
3978: PPUSH
3979: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
3983: LD_EXP 39
3987: PPUSH
3988: LD_STRING DKs-Conspiracy-27
3990: PPUSH
3991: CALL_OW 88
// if IsOk ( Givi ) then
3995: LD_EXP 31
3999: PPUSH
4000: CALL_OW 302
4004: IFFALSE 4020
// Say ( Givi , DG-Conspiracy-28 ) else
4006: LD_EXP 31
4010: PPUSH
4011: LD_STRING DG-Conspiracy-28
4013: PPUSH
4014: CALL_OW 88
4018: GO 4085
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
4020: LD_EXP 41
4024: PPUSH
4025: LD_INT 26
4027: PUSH
4028: LD_INT 1
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PPUSH
4035: CALL_OW 72
4039: PUSH
4040: LD_INT 1
4042: ARRAY
4043: PPUSH
4044: LD_STRING DArm-Conspiracy-a-28
4046: PPUSH
4047: CALL_OW 88
4051: NOT
4052: IFFALSE 4085
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
4054: LD_EXP 41
4058: PPUSH
4059: LD_INT 26
4061: PUSH
4062: LD_INT 2
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PPUSH
4069: CALL_OW 72
4073: PUSH
4074: LD_INT 1
4076: ARRAY
4077: PPUSH
4078: LD_STRING DArf-Conspiracy-a-28
4080: PPUSH
4081: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
4085: LD_EXP 39
4089: PPUSH
4090: LD_STRING DKs-Conspiracy-29
4092: PPUSH
4093: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
4097: LD_INT 192
4099: PPUSH
4100: LD_INT 122
4102: PPUSH
4103: LD_INT 105
4105: PPUSH
4106: CALL 15072 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
4110: LD_EXP 39
4114: PPUSH
4115: LD_STRING DKs-Conspiracy-30
4117: PPUSH
4118: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
4122: LD_EXP 35
4126: PPUSH
4127: LD_STRING DK-Conspiracy-31
4129: PPUSH
4130: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
4134: LD_EXP 37
4138: PPUSH
4139: LD_STRING DMar-Conspiracy-33
4141: PPUSH
4142: CALL_OW 88
4146: NOT
4147: PUSH
4148: LD_EXP 41
4152: AND
4153: IFFALSE 4220
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
4155: LD_EXP 41
4159: PPUSH
4160: LD_INT 26
4162: PUSH
4163: LD_INT 1
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PPUSH
4170: CALL_OW 72
4174: PUSH
4175: LD_INT 1
4177: ARRAY
4178: PPUSH
4179: LD_STRING DArm-Conspiracy-a-34
4181: PPUSH
4182: CALL_OW 88
4186: NOT
4187: IFFALSE 4220
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
4189: LD_EXP 41
4193: PPUSH
4194: LD_INT 26
4196: PUSH
4197: LD_INT 2
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 72
4208: PUSH
4209: LD_INT 1
4211: ARRAY
4212: PPUSH
4213: LD_STRING DArf-Conspiracy-a-34
4215: PPUSH
4216: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
4220: LD_EXP 35
4224: PPUSH
4225: LD_STRING DK-Conspiracy-34
4227: PPUSH
4228: CALL_OW 88
// if IsOk ( Markov ) then
4232: LD_EXP 37
4236: PPUSH
4237: CALL_OW 302
4241: IFFALSE 4326
// begin hasSniperRifle := true ;
4243: LD_ADDR_EXP 11
4247: PUSH
4248: LD_INT 1
4250: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
4251: LD_EXP 37
4255: PPUSH
4256: LD_STRING DMar-Conspiracy-35
4258: PPUSH
4259: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
4263: LD_EXP 35
4267: PPUSH
4268: LD_STRING DK-Conspiracy-36
4270: PPUSH
4271: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
4275: LD_EXP 37
4279: PPUSH
4280: LD_STRING DMar-Conspiracy-37
4282: PPUSH
4283: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
4287: LD_EXP 37
4291: PPUSH
4292: LD_STRING DMar-Conspiracy-38
4294: PPUSH
4295: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
4299: LD_INT 137
4301: PPUSH
4302: LD_INT 98
4304: PPUSH
4305: LD_INT 105
4307: PPUSH
4308: CALL 15072 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
4312: LD_EXP 37
4316: PPUSH
4317: LD_STRING DMar-Conspiracy-39
4319: PPUSH
4320: CALL_OW 88
// end else
4324: GO 4418
// if heikeSecondSquad then
4326: LD_EXP 41
4330: IFFALSE 4418
// begin hasSniperRifle := true ;
4332: LD_ADDR_EXP 11
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
4340: LD_INT 137
4342: PPUSH
4343: LD_INT 98
4345: PPUSH
4346: LD_INT 105
4348: PPUSH
4349: CALL 15072 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
4353: LD_EXP 41
4357: PPUSH
4358: LD_INT 26
4360: PUSH
4361: LD_INT 1
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PPUSH
4368: CALL_OW 72
4372: PUSH
4373: LD_INT 1
4375: ARRAY
4376: PPUSH
4377: LD_STRING DArm-Conspiracy-a-35
4379: PPUSH
4380: CALL_OW 88
4384: NOT
4385: IFFALSE 4418
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
4387: LD_EXP 41
4391: PPUSH
4392: LD_INT 26
4394: PUSH
4395: LD_INT 2
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PPUSH
4402: CALL_OW 72
4406: PUSH
4407: LD_INT 1
4409: ARRAY
4410: PPUSH
4411: LD_STRING DArf-Conspiracy-a-35
4413: PPUSH
4414: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
4418: LD_EXP 30
4422: PPUSH
4423: LD_STRING DH-Conspiracy-40
4425: PPUSH
4426: CALL_OW 88
// if IsOk ( Mike ) then
4430: LD_EXP 32
4434: PPUSH
4435: CALL_OW 302
4439: IFFALSE 4498
// begin hasScout := true ;
4441: LD_ADDR_EXP 12
4445: PUSH
4446: LD_INT 1
4448: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
4449: LD_EXP 32
4453: PPUSH
4454: LD_STRING DM-Conspiracy-41
4456: PPUSH
4457: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
4461: LD_EXP 32
4465: PPUSH
4466: LD_STRING DM-Conspiracy-42
4468: PPUSH
4469: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
4473: LD_INT 73
4475: PPUSH
4476: LD_INT 102
4478: PPUSH
4479: LD_INT 105
4481: PPUSH
4482: CALL 15072 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
4486: LD_EXP 32
4490: PPUSH
4491: LD_STRING DM-Conspiracy-43
4493: PPUSH
4494: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
4498: LD_EXP 4
4502: PUSH
4503: LD_EXP 35
4507: PPUSH
4508: CALL_OW 302
4512: AND
4513: PUSH
4514: LD_EXP 39
4518: PPUSH
4519: CALL_OW 302
4523: AND
4524: IFFALSE 4570
// begin hasMethanol := true ;
4526: LD_ADDR_EXP 13
4530: PUSH
4531: LD_INT 1
4533: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
4534: LD_EXP 35
4538: PPUSH
4539: LD_STRING DK-Conspiracy-44
4541: PPUSH
4542: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
4546: LD_EXP 35
4550: PPUSH
4551: LD_STRING DK-Conspiracy-45
4553: PPUSH
4554: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
4558: LD_EXP 34
4562: PPUSH
4563: LD_STRING DKam-Conspiracy-46
4565: PPUSH
4566: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
4570: LD_EXP 30
4574: PPUSH
4575: LD_STRING DH-Conspiracy-47
4577: PPUSH
4578: CALL_OW 88
// wait ( 0 0$1 ) ;
4582: LD_INT 35
4584: PPUSH
4585: CALL_OW 67
// your_side := 8 ;
4589: LD_ADDR_OWVAR 2
4593: PUSH
4594: LD_INT 8
4596: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
4597: LD_INT 1
4599: PPUSH
4600: LD_INT 1
4602: PPUSH
4603: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
4607: LD_ADDR_VAR 0 2
4611: PUSH
4612: LD_INT 2
4614: PUSH
4615: LD_INT 22
4617: PUSH
4618: LD_INT 2
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PUSH
4625: LD_INT 22
4627: PUSH
4628: LD_INT 4
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_INT 21
4642: PUSH
4643: LD_INT 1
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PPUSH
4654: CALL_OW 69
4658: PUSH
4659: FOR_IN
4660: IFFALSE 4673
// RemoveUnit ( i ) ;
4662: LD_VAR 0 2
4666: PPUSH
4667: CALL_OW 64
4671: GO 4659
4673: POP
4674: POP
// wait ( 0 0$0.3 ) ;
4675: LD_INT 10
4677: PPUSH
4678: CALL_OW 67
// Query ( StartInfo1 ) ;
4682: LD_STRING StartInfo1
4684: PPUSH
4685: CALL_OW 97
// wait ( 0 0$1 ) ;
4689: LD_INT 35
4691: PPUSH
4692: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
4696: LD_STRING colors_night.txt
4698: PPUSH
4699: CALL_OW 544
// Query ( StartInfo2 ) ;
4703: LD_STRING StartInfo2
4705: PPUSH
4706: CALL_OW 97
// PrepareGame ;
4710: CALL 815 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4714: LD_INT 152
4716: PPUSH
4717: LD_INT 65
4719: PPUSH
4720: LD_INT 2
4722: PPUSH
4723: LD_INT 70
4725: NEG
4726: PPUSH
4727: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4731: LD_INT 152
4733: PPUSH
4734: LD_INT 65
4736: PPUSH
4737: LD_INT 2
4739: PPUSH
4740: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
4744: LD_INT 133
4746: PPUSH
4747: LD_INT 76
4749: PPUSH
4750: LD_INT 2
4752: PPUSH
4753: LD_INT 6
4755: NEG
4756: PPUSH
4757: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
4761: LD_INT 152
4763: PPUSH
4764: LD_INT 65
4766: PPUSH
4767: LD_INT 8
4769: PPUSH
4770: LD_INT 70
4772: NEG
4773: PPUSH
4774: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
4778: LD_INT 152
4780: PPUSH
4781: LD_INT 65
4783: PPUSH
4784: LD_INT 8
4786: PPUSH
4787: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
4791: LD_INT 133
4793: PPUSH
4794: LD_INT 76
4796: PPUSH
4797: LD_INT 8
4799: PPUSH
4800: LD_INT 6
4802: NEG
4803: PPUSH
4804: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
4808: LD_INT 23
4810: PPUSH
4811: CALL_OW 87
// dialogue_skipped := false ;
4815: LD_ADDR_OWVAR 59
4819: PUSH
4820: LD_INT 0
4822: ST_TO_ADDR
// InitRuPatrols ;
4823: CALL 2391 0 0
// Say ( Heike , DH-Escape-1 ) ;
4827: LD_EXP 30
4831: PPUSH
4832: LD_STRING DH-Escape-1
4834: PPUSH
4835: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
4839: LD_EXP 30
4843: PPUSH
4844: LD_STRING DH-Escape-2
4846: PPUSH
4847: CALL_OW 88
// StartLockerMinigame ;
4851: CALL 15479 0 0
// wait ( 0 0$1 ) ;
4855: LD_INT 35
4857: PPUSH
4858: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
4862: LD_EXP 30
4866: PPUSH
4867: LD_STRING DH-Escape-4
4869: PPUSH
4870: CALL_OW 88
// wait ( 0 0$3 ) ;
4874: LD_INT 105
4876: PPUSH
4877: CALL_OW 67
// your_side := 2 ;
4881: LD_ADDR_OWVAR 2
4885: PUSH
4886: LD_INT 2
4888: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
4889: LD_EXP 30
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( Heike , 128 , 64 ) ;
4898: LD_EXP 30
4902: PPUSH
4903: LD_INT 128
4905: PPUSH
4906: LD_INT 64
4908: PPUSH
4909: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4913: LD_INT 35
4915: PPUSH
4916: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
4920: LD_EXP 30
4924: PPUSH
4925: LD_INT 128
4927: PPUSH
4928: LD_INT 64
4930: PPUSH
4931: CALL_OW 307
4935: IFFALSE 4913
// ComHold ( Heike ) ;
4937: LD_EXP 30
4941: PPUSH
4942: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
4946: LD_EXP 30
4950: PPUSH
4951: LD_STRING DH-Start-1
4953: PPUSH
4954: CALL_OW 88
// if not americanContact then
4958: LD_EXP 10
4962: NOT
4963: IFFALSE 4979
// Say ( Heike , DH-Start-c-2 ) else
4965: LD_EXP 30
4969: PPUSH
4970: LD_STRING DH-Start-c-2
4972: PPUSH
4973: CALL_OW 88
4977: GO 5011
// if johnnySaved then
4979: LD_EXP 3
4983: IFFALSE 4999
// Say ( Heike , DH-Start-a-2 ) else
4985: LD_EXP 30
4989: PPUSH
4990: LD_STRING DH-Start-a-2
4992: PPUSH
4993: CALL_OW 88
4997: GO 5011
// Say ( Heike , DH-Start-b-2 ) ;
4999: LD_EXP 30
5003: PPUSH
5004: LD_STRING DH-Start-b-2
5006: PPUSH
5007: CALL_OW 88
// Video ( false ) ;
5011: LD_INT 0
5013: PPUSH
5014: CALL 53866 0 1
// tick := 0 ;
5018: LD_ADDR_OWVAR 1
5022: PUSH
5023: LD_INT 0
5025: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
5026: LD_STRING M1
5028: PPUSH
5029: CALL_OW 337
// enable ( gameStartEvent ) ;
5033: LD_INT 2
5035: ENABLE_MARKED
// SaveForQuickRestart ;
5036: CALL_OW 22
// end ;
5040: LD_VAR 0 1
5044: RET
// function ActionAdditional ; var i , un , tmp ; begin
5045: LD_INT 0
5047: PPUSH
5048: PPUSH
5049: PPUSH
5050: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
5051: LD_INT 115
5053: PPUSH
5054: LD_INT 27
5056: PPUSH
5057: LD_INT 2
5059: PPUSH
5060: LD_INT 6
5062: NEG
5063: PPUSH
5064: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
5068: LD_EXP 30
5072: PPUSH
5073: LD_INT 115
5075: PPUSH
5076: LD_INT 27
5078: PPUSH
5079: CALL_OW 428
5083: PPUSH
5084: CALL_OW 52
// SetClass ( Heike , 33 ) ;
5088: LD_EXP 30
5092: PPUSH
5093: LD_INT 33
5095: PPUSH
5096: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
5100: LD_INT 124
5102: PPUSH
5103: LD_INT 39
5105: PPUSH
5106: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
5110: LD_EXP 30
5114: PPUSH
5115: LD_STRING DH-Fail-1
5117: PPUSH
5118: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
5122: LD_INT 3
5124: PPUSH
5125: CALL_OW 427
// ComExit ( Heike ) ;
5129: LD_EXP 30
5133: PPUSH
5134: CALL 54292 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
5138: LD_EXP 30
5142: PPUSH
5143: LD_INT 109
5145: PPUSH
5146: LD_INT 33
5148: PPUSH
5149: CALL_OW 171
// AddComHold ( Heike ) ;
5153: LD_EXP 30
5157: PPUSH
5158: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
5162: LD_INT 115
5164: PPUSH
5165: LD_INT 27
5167: PPUSH
5168: LD_INT 2
5170: PPUSH
5171: CALL_OW 331
// wait ( 0 0$2 ) ;
5175: LD_INT 70
5177: PPUSH
5178: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5182: LD_INT 35
5184: PPUSH
5185: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
5189: LD_EXP 30
5193: PPUSH
5194: LD_INT 109
5196: PPUSH
5197: LD_INT 33
5199: PPUSH
5200: CALL_OW 307
5204: IFFALSE 5182
// Say ( Heike , DH-Fail-2 ) ;
5206: LD_EXP 30
5210: PPUSH
5211: LD_STRING DH-Fail-2
5213: PPUSH
5214: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
5218: LD_EXP 30
5222: PPUSH
5223: LD_INT 111
5225: PPUSH
5226: LD_INT 48
5228: PPUSH
5229: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5233: LD_INT 35
5235: PPUSH
5236: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
5240: LD_EXP 30
5244: PPUSH
5245: LD_INT 111
5247: PPUSH
5248: LD_INT 48
5250: PPUSH
5251: CALL_OW 297
5255: PUSH
5256: LD_INT 4
5258: LESS
5259: IFFALSE 5233
// AddComMoveXY ( Heike , 106 , 72 ) ;
5261: LD_EXP 30
5265: PPUSH
5266: LD_INT 106
5268: PPUSH
5269: LD_INT 72
5271: PPUSH
5272: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
5276: LD_EXP 30
5280: PPUSH
5281: LD_INT 103
5283: PPUSH
5284: LD_INT 80
5286: PPUSH
5287: CALL_OW 171
// uc_side := 3 ;
5291: LD_ADDR_OWVAR 20
5295: PUSH
5296: LD_INT 3
5298: ST_TO_ADDR
// uc_nation := 3 ;
5299: LD_ADDR_OWVAR 21
5303: PUSH
5304: LD_INT 3
5306: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
5307: LD_INT 1
5309: PPUSH
5310: LD_INT 1
5312: PPUSH
5313: LD_INT 6
5315: PPUSH
5316: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
5320: LD_ADDR_OWVAR 29
5324: PUSH
5325: LD_INT 12
5327: PUSH
5328: LD_INT 12
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: ST_TO_ADDR
// un := CreateHuman ;
5335: LD_ADDR_VAR 0 3
5339: PUSH
5340: CALL_OW 44
5344: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
5345: LD_VAR 0 3
5349: PPUSH
5350: LD_INT 134
5352: PPUSH
5353: LD_INT 52
5355: PPUSH
5356: LD_INT 4
5358: PPUSH
5359: LD_INT 0
5361: PPUSH
5362: CALL 56034 0 5
// ComTurnUnit ( un , Heike ) ;
5366: LD_VAR 0 3
5370: PPUSH
5371: LD_EXP 30
5375: PPUSH
5376: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
5380: LD_VAR 0 3
5384: PPUSH
5385: LD_EXP 30
5389: PPUSH
5390: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
5394: LD_VAR 0 3
5398: PPUSH
5399: LD_STRING DRum-Fail-3
5401: PPUSH
5402: CALL_OW 88
// for i := 1 to 3 do
5406: LD_ADDR_VAR 0 2
5410: PUSH
5411: DOUBLE
5412: LD_INT 1
5414: DEC
5415: ST_TO_ADDR
5416: LD_INT 3
5418: PUSH
5419: FOR_TO
5420: IFFALSE 5493
// begin PrepareSoldier ( false , 10 ) ;
5422: LD_INT 0
5424: PPUSH
5425: LD_INT 10
5427: PPUSH
5428: CALL_OW 381
// un := CreateHuman ;
5432: LD_ADDR_VAR 0 3
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
5442: LD_ADDR_VAR 0 4
5446: PUSH
5447: LD_VAR 0 4
5451: PPUSH
5452: LD_VAR 0 3
5456: PPUSH
5457: CALL 53894 0 2
5461: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
5462: LD_VAR 0 3
5466: PPUSH
5467: LD_INT 8
5469: PPUSH
5470: LD_INT 0
5472: PPUSH
5473: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
5477: LD_VAR 0 3
5481: PPUSH
5482: LD_EXP 30
5486: PPUSH
5487: CALL_OW 119
// end ;
5491: GO 5419
5493: POP
5494: POP
// repeat wait ( 0 0$1 ) ;
5495: LD_INT 35
5497: PPUSH
5498: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
5502: LD_VAR 0 4
5506: PPUSH
5507: LD_INT 101
5509: PUSH
5510: LD_INT 2
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PPUSH
5517: CALL_OW 72
5521: PUSH
5522: LD_INT 1
5524: GREATER
5525: IFFALSE 5495
// wait ( 0 0$1 ) ;
5527: LD_INT 35
5529: PPUSH
5530: CALL_OW 67
// DialogueOn ;
5534: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
5538: LD_EXP 30
5542: PPUSH
5543: LD_STRING DH-Fail-4
5545: PPUSH
5546: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
5550: LD_EXP 30
5554: PPUSH
5555: LD_STRING DH-Fail-5
5557: PPUSH
5558: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
5562: LD_EXP 30
5566: PPUSH
5567: LD_STRING DH-Fail-6
5569: PPUSH
5570: CALL_OW 88
// DialogueOff ;
5574: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
5578: LD_VAR 0 4
5582: PPUSH
5583: LD_EXP 30
5587: PPUSH
5588: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
5592: LD_INT 35
5594: PPUSH
5595: CALL_OW 67
// until IsDying ( Heike ) ;
5599: LD_EXP 30
5603: PPUSH
5604: CALL_OW 303
5608: IFFALSE 5592
// KillUnit ( Heike ) ;
5610: LD_EXP 30
5614: PPUSH
5615: CALL_OW 66
// wait ( 0 0$4 ) ;
5619: LD_INT 140
5621: PPUSH
5622: CALL_OW 67
// ResetFog ;
5626: CALL_OW 335
// DialogueOn ;
5630: CALL_OW 6
// dwait ( 0 0$1 ) ;
5634: LD_INT 35
5636: PPUSH
5637: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
5641: LD_ADDR_EXP 30
5645: PUSH
5646: LD_STRING Heike
5648: PPUSH
5649: LD_EXP 1
5653: NOT
5654: PPUSH
5655: LD_EXP 2
5659: PPUSH
5660: CALL 16445 0 3
5664: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
5665: LD_EXP 30
5669: PPUSH
5670: LD_STRING DH-Fail-7
5672: PPUSH
5673: CALL_OW 89
// DialogueOff ;
5677: CALL_OW 7
// YouLost ( Fail ) ;
5681: LD_STRING Fail
5683: PPUSH
5684: CALL_OW 104
// end ;
5688: LD_VAR 0 1
5692: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
5693: LD_INT 2
5695: PPUSH
5696: LD_INT 173
5698: PPUSH
5699: LD_INT 29
5701: PPUSH
5702: CALL_OW 293
5706: PUSH
5707: LD_EXP 30
5711: PPUSH
5712: LD_INT 173
5714: PPUSH
5715: LD_INT 29
5717: PPUSH
5718: CALL_OW 297
5722: PUSH
5723: LD_INT 6
5725: LESS
5726: AND
5727: IFFALSE 5744
5729: GO 5731
5731: DISABLE
// Say ( Heike , DH-EastRoad ) ;
5732: LD_EXP 30
5736: PPUSH
5737: LD_STRING DH-EastRoad
5739: PPUSH
5740: CALL_OW 88
5744: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 149
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: CALL_OW 293
5758: PUSH
5759: LD_EXP 30
5763: PPUSH
5764: LD_INT 149
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: IFFALSE 5796
5781: GO 5783
5783: DISABLE
// Say ( Heike , DH-EastRoad ) ;
5784: LD_EXP 30
5788: PPUSH
5789: LD_STRING DH-EastRoad
5791: PPUSH
5792: CALL_OW 88
5796: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
5797: LD_INT 2
5799: PPUSH
5800: LD_INT 217
5802: PPUSH
5803: LD_INT 120
5805: PPUSH
5806: CALL_OW 293
5810: PUSH
5811: LD_EXP 30
5815: PPUSH
5816: LD_INT 217
5818: PPUSH
5819: LD_INT 120
5821: PPUSH
5822: CALL_OW 297
5826: PUSH
5827: LD_INT 6
5829: LESS
5830: AND
5831: IFFALSE 5848
5833: GO 5835
5835: DISABLE
// Say ( Heike , DH-EastEnd ) ;
5836: LD_EXP 30
5840: PPUSH
5841: LD_STRING DH-EastEnd
5843: PPUSH
5844: CALL_OW 88
5848: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
5849: LD_EXP 30
5853: PPUSH
5854: LD_INT 11
5856: PPUSH
5857: CALL_OW 308
5861: IFFALSE 5899
5863: GO 5865
5865: DISABLE
// begin if not heikeSquad then
5866: LD_EXP 14
5870: NOT
5871: IFFALSE 5887
// Say ( Heike , DH-Hill ) else
5873: LD_EXP 30
5877: PPUSH
5878: LD_STRING DH-Hill
5880: PPUSH
5881: CALL_OW 88
5885: GO 5899
// Say ( Heike , DH-Hill-a ) ;
5887: LD_EXP 30
5891: PPUSH
5892: LD_STRING DH-Hill-a
5894: PPUSH
5895: CALL_OW 88
// end ;
5899: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
5900: LD_EXP 30
5904: PPUSH
5905: LD_INT 12
5907: PPUSH
5908: CALL_OW 308
5912: IFFALSE 6094
5914: GO 5916
5916: DISABLE
5917: LD_INT 0
5919: PPUSH
5920: PPUSH
5921: PPUSH
// begin DialogueOn ;
5922: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
5926: LD_EXP 30
5930: PPUSH
5931: CALL_OW 87
// x := GetX ( Heike ) ;
5935: LD_ADDR_VAR 0 1
5939: PUSH
5940: LD_EXP 30
5944: PPUSH
5945: CALL_OW 250
5949: ST_TO_ADDR
// y := GetY ( Heike ) ;
5950: LD_ADDR_VAR 0 2
5954: PUSH
5955: LD_EXP 30
5959: PPUSH
5960: CALL_OW 251
5964: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
5965: LD_VAR 0 1
5969: PPUSH
5970: LD_VAR 0 2
5974: PPUSH
5975: LD_INT 2
5977: PPUSH
5978: LD_INT 12
5980: NEG
5981: PPUSH
5982: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
5986: LD_VAR 0 1
5990: PPUSH
5991: LD_VAR 0 2
5995: PPUSH
5996: LD_INT 2
5998: PPUSH
5999: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6003: LD_INT 2
6005: PUSH
6006: LD_INT 30
6008: PUSH
6009: LD_INT 32
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 30
6018: PUSH
6019: LD_INT 33
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: IFFALSE 6047
// v := 3 else
6037: LD_ADDR_VAR 0 3
6041: PUSH
6042: LD_INT 3
6044: ST_TO_ADDR
6045: GO 6055
// v := 2 ;
6047: LD_ADDR_VAR 0 3
6051: PUSH
6052: LD_INT 2
6054: ST_TO_ADDR
// disable ;
6055: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
6056: LD_EXP 30
6060: PPUSH
6061: LD_STRING DH-Outpost-
6063: PUSH
6064: LD_INT 1
6066: PPUSH
6067: LD_VAR 0 3
6071: PPUSH
6072: CALL_OW 12
6076: STR
6077: PPUSH
6078: CALL_OW 88
// DialogueOff ;
6082: CALL_OW 7
// wait ( 0 0$10 ) ;
6086: LD_INT 350
6088: PPUSH
6089: CALL_OW 67
// enable ;
6093: ENABLE
// end ;
6094: PPOPN 3
6096: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered marked gameStartEvent do
6097: LD_EXP 30
6101: PPUSH
6102: LD_INT 19
6104: PPUSH
6105: CALL_OW 308
6109: PUSH
6110: LD_EXP 22
6114: NOT
6115: AND
6116: IFFALSE 6189
6118: GO 6120
6120: DISABLE
// begin DialogueOn ;
6121: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
6125: LD_INT 152
6127: PPUSH
6128: LD_INT 115
6130: PPUSH
6131: LD_INT 2
6133: PPUSH
6134: LD_INT 16
6136: NEG
6137: PPUSH
6138: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
6142: LD_INT 152
6144: PPUSH
6145: LD_INT 115
6147: PPUSH
6148: LD_INT 2
6150: PPUSH
6151: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
6155: LD_INT 152
6157: PPUSH
6158: LD_INT 115
6160: PPUSH
6161: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
6165: LD_EXP 30
6169: PPUSH
6170: LD_STRING DH-Stealth-1
6172: PPUSH
6173: CALL_OW 88
// DialogueOff ;
6177: CALL_OW 7
// adminAreaDiscovered := true ;
6181: LD_ADDR_EXP 22
6185: PUSH
6186: LD_INT 1
6188: ST_TO_ADDR
// end ;
6189: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm marked gameStartEvent do
6190: LD_INT 2
6192: PPUSH
6193: LD_EXP 31
6197: PPUSH
6198: CALL_OW 292
6202: PUSH
6203: LD_EXP 30
6207: PPUSH
6208: LD_EXP 31
6212: PPUSH
6213: CALL_OW 296
6217: PUSH
6218: LD_INT 6
6220: LESS
6221: AND
6222: PUSH
6223: LD_EXP 17
6227: NOT
6228: AND
6229: IFFALSE 6335
6231: GO 6233
6233: DISABLE
// begin DialogueOn ;
6234: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
6238: LD_EXP 31
6242: PPUSH
6243: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
6247: LD_EXP 31
6251: PPUSH
6252: LD_EXP 30
6256: PPUSH
6257: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
6261: LD_EXP 30
6265: PPUSH
6266: LD_EXP 31
6270: PPUSH
6271: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
6275: LD_EXP 30
6279: PPUSH
6280: LD_STRING DH-Givi-1
6282: PPUSH
6283: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
6287: LD_EXP 31
6291: PPUSH
6292: LD_STRING DG-Givi-2
6294: PPUSH
6295: CALL_OW 88
// DialogueOff ;
6299: CALL_OW 7
// SetSide ( Givi , 2 ) ;
6303: LD_EXP 31
6307: PPUSH
6308: LD_INT 2
6310: PPUSH
6311: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
6315: LD_ADDR_EXP 14
6319: PUSH
6320: LD_EXP 14
6324: PPUSH
6325: LD_EXP 31
6329: PPUSH
6330: CALL 53894 0 2
6334: ST_TO_ADDR
// end ;
6335: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm marked gameStartEvent do
6336: LD_INT 2
6338: PPUSH
6339: LD_EXP 38
6343: PPUSH
6344: CALL_OW 292
6348: PUSH
6349: LD_EXP 30
6353: PPUSH
6354: LD_EXP 38
6358: PPUSH
6359: CALL_OW 296
6363: PUSH
6364: LD_INT 6
6366: LESS
6367: AND
6368: PUSH
6369: LD_EXP 17
6373: NOT
6374: AND
6375: IFFALSE 6471
6377: GO 6379
6379: DISABLE
// begin DialogueOn ;
6380: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
6384: LD_EXP 38
6388: PPUSH
6389: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
6393: LD_EXP 30
6397: PPUSH
6398: LD_STRING DH-Olaf-1
6400: PPUSH
6401: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
6405: LD_EXP 38
6409: PPUSH
6410: LD_STRING DO-Olaf-2
6412: PPUSH
6413: CALL_OW 88
// if explosionsTakenByRussians then
6417: LD_EXP 21
6421: IFFALSE 6435
// Say ( Olaf , DO-Olaf-a-3 ) ;
6423: LD_EXP 38
6427: PPUSH
6428: LD_STRING DO-Olaf-a-3
6430: PPUSH
6431: CALL_OW 88
// DialogueOff ;
6435: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
6439: LD_EXP 38
6443: PPUSH
6444: LD_INT 2
6446: PPUSH
6447: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
6451: LD_ADDR_EXP 14
6455: PUSH
6456: LD_EXP 14
6460: PPUSH
6461: LD_EXP 38
6465: PPUSH
6466: CALL 53894 0 2
6470: ST_TO_ADDR
// end ;
6471: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm marked gameStartEvent do var i , xy ;
6472: LD_INT 2
6474: PPUSH
6475: LD_EXP 32
6479: PPUSH
6480: CALL_OW 292
6484: PUSH
6485: LD_EXP 30
6489: PPUSH
6490: LD_EXP 32
6494: PPUSH
6495: CALL_OW 296
6499: PUSH
6500: LD_INT 6
6502: LESS
6503: AND
6504: PUSH
6505: LD_EXP 17
6509: NOT
6510: AND
6511: IFFALSE 6739
6513: GO 6515
6515: DISABLE
6516: LD_INT 0
6518: PPUSH
6519: PPUSH
// begin DialogueOn ;
6520: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
6524: LD_EXP 32
6528: PPUSH
6529: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
6533: LD_ADDR_VAR 0 2
6537: PUSH
6538: LD_INT 18
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 517
6548: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
6549: LD_ADDR_VAR 0 1
6553: PUSH
6554: DOUBLE
6555: LD_INT 1
6557: DEC
6558: ST_TO_ADDR
6559: LD_VAR 0 2
6563: PUSH
6564: LD_INT 1
6566: ARRAY
6567: PUSH
6568: FOR_TO
6569: IFFALSE 6651
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
6571: LD_VAR 0 2
6575: PUSH
6576: LD_INT 1
6578: ARRAY
6579: PUSH
6580: LD_VAR 0 1
6584: ARRAY
6585: PPUSH
6586: LD_VAR 0 2
6590: PUSH
6591: LD_INT 2
6593: ARRAY
6594: PUSH
6595: LD_VAR 0 1
6599: ARRAY
6600: PPUSH
6601: LD_INT 2
6603: PPUSH
6604: LD_INT 3
6606: NEG
6607: PPUSH
6608: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
6612: LD_VAR 0 2
6616: PUSH
6617: LD_INT 1
6619: ARRAY
6620: PUSH
6621: LD_VAR 0 1
6625: ARRAY
6626: PPUSH
6627: LD_VAR 0 2
6631: PUSH
6632: LD_INT 2
6634: ARRAY
6635: PUSH
6636: LD_VAR 0 1
6640: ARRAY
6641: PPUSH
6642: LD_INT 2
6644: PPUSH
6645: CALL_OW 331
// end ;
6649: GO 6568
6651: POP
6652: POP
// Say ( Mike , DM-Mike-1 ) ;
6653: LD_EXP 32
6657: PPUSH
6658: LD_STRING DM-Mike-1
6660: PPUSH
6661: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
6665: LD_EXP 30
6669: PPUSH
6670: LD_STRING DH-Mike-2
6672: PPUSH
6673: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
6677: LD_INT 78
6679: PPUSH
6680: LD_INT 104
6682: PPUSH
6683: CALL_OW 84
// dwait ( 0 0$1 ) ;
6687: LD_INT 35
6689: PPUSH
6690: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
6694: LD_EXP 30
6698: PPUSH
6699: CALL_OW 87
// DialogueOff ;
6703: CALL_OW 7
// SetSide ( Mike , 2 ) ;
6707: LD_EXP 32
6711: PPUSH
6712: LD_INT 2
6714: PPUSH
6715: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
6719: LD_ADDR_EXP 14
6723: PUSH
6724: LD_EXP 14
6728: PPUSH
6729: LD_EXP 32
6733: PPUSH
6734: CALL 53894 0 2
6738: ST_TO_ADDR
// end ;
6739: PPOPN 2
6741: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad marked gameStartEvent do
6742: LD_EXP 30
6746: PPUSH
6747: LD_EXP 35
6751: PPUSH
6752: CALL_OW 296
6756: PUSH
6757: LD_INT 6
6759: LESS
6760: PUSH
6761: LD_EXP 35
6765: PPUSH
6766: CALL_OW 257
6770: PUSH
6771: LD_INT 33
6773: EQUAL
6774: AND
6775: PUSH
6776: LD_EXP 17
6780: NOT
6781: AND
6782: PUSH
6783: LD_EXP 35
6787: PPUSH
6788: CALL_OW 302
6792: AND
6793: PUSH
6794: LD_EXP 20
6798: AND
6799: PUSH
6800: LD_EXP 35
6804: PUSH
6805: LD_EXP 14
6809: IN
6810: AND
6811: IFFALSE 6840
6813: GO 6815
6815: DISABLE
// begin DialogueOn ;
6816: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
6820: LD_EXP 30
6824: PPUSH
6825: LD_STRING DH-Kaia-Revolver-2
6827: PPUSH
6828: CALL_OW 88
// SetClassKaiaRevolver ;
6832: CALL 1372 0 0
// DialogueOff ;
6836: CALL_OW 7
// end ;
6840: END
// every 0 0$3 trigger Ibrahim and Aviradze and not [ Ibrahim , Aviradze ] in heikeSquad and heikeSquad > 5 and not isAlarm marked gameStartEvent do var hasKaia , hasGivi ;
6841: LD_EXP 33
6845: PUSH
6846: LD_EXP 40
6850: AND
6851: PUSH
6852: LD_EXP 33
6856: PUSH
6857: LD_EXP 40
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_EXP 14
6870: IN
6871: NOT
6872: AND
6873: PUSH
6874: LD_EXP 14
6878: PUSH
6879: LD_INT 5
6881: GREATER
6882: AND
6883: PUSH
6884: LD_EXP 17
6888: NOT
6889: AND
6890: IFFALSE 7474
6892: GO 6894
6894: DISABLE
6895: LD_INT 0
6897: PPUSH
6898: PPUSH
// begin DialogueOn ;
6899: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad ;
6903: LD_ADDR_VAR 0 2
6907: PUSH
6908: LD_EXP 31
6912: PPUSH
6913: CALL_OW 302
6917: PUSH
6918: LD_EXP 31
6922: PUSH
6923: LD_EXP 14
6927: IN
6928: AND
6929: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
6930: LD_EXP 30
6934: PPUSH
6935: LD_STRING DH-Med-1
6937: PPUSH
6938: CALL_OW 88
// if hasGivi then
6942: LD_VAR 0 2
6946: IFFALSE 6962
// Say ( Givi , DG-Med-2 ) else
6948: LD_EXP 31
6952: PPUSH
6953: LD_STRING DG-Med-2
6955: PPUSH
6956: CALL_OW 88
6960: GO 7038
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-e-2 ) then
6962: LD_EXP 14
6966: PUSH
6967: LD_EXP 41
6971: ISECT
6972: PPUSH
6973: LD_INT 26
6975: PUSH
6976: LD_INT 1
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PPUSH
6983: CALL_OW 72
6987: PUSH
6988: LD_INT 1
6990: ARRAY
6991: PPUSH
6992: LD_STRING DArm-Med-e-2
6994: PPUSH
6995: CALL_OW 88
6999: IFFALSE 7038
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-e-2 ) ;
7001: LD_EXP 14
7005: PUSH
7006: LD_EXP 41
7010: ISECT
7011: PPUSH
7012: LD_INT 26
7014: PUSH
7015: LD_INT 2
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL_OW 72
7026: PUSH
7027: LD_INT 1
7029: ARRAY
7030: PPUSH
7031: LD_STRING DArf-Med-e-2
7033: PPUSH
7034: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
7038: LD_INT 154
7040: PPUSH
7041: LD_INT 119
7043: PPUSH
7044: LD_INT 70
7046: PPUSH
7047: CALL 15072 0 3
// Say ( Heike , DH-Med-3 ) ;
7051: LD_EXP 30
7055: PPUSH
7056: LD_STRING DH-Med-3
7058: PPUSH
7059: CALL_OW 88
// if hasGivi then
7063: LD_VAR 0 2
7067: IFFALSE 7083
// Say ( Givi , DG-Med-4 ) else
7069: LD_EXP 31
7073: PPUSH
7074: LD_STRING DG-Med-4
7076: PPUSH
7077: CALL_OW 88
7081: GO 7159
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-e-4 ) then
7083: LD_EXP 14
7087: PUSH
7088: LD_EXP 41
7092: ISECT
7093: PPUSH
7094: LD_INT 26
7096: PUSH
7097: LD_INT 1
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 72
7108: PUSH
7109: LD_INT 1
7111: ARRAY
7112: PPUSH
7113: LD_STRING DArm-Med-e-4
7115: PPUSH
7116: CALL_OW 88
7120: IFFALSE 7159
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-e-4 ) ;
7122: LD_EXP 14
7126: PUSH
7127: LD_EXP 41
7131: ISECT
7132: PPUSH
7133: LD_INT 26
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PPUSH
7143: CALL_OW 72
7147: PUSH
7148: LD_INT 1
7150: ARRAY
7151: PPUSH
7152: LD_STRING DArf-Med-e-4
7154: PPUSH
7155: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad ;
7159: LD_ADDR_VAR 0 1
7163: PUSH
7164: LD_EXP 35
7168: PPUSH
7169: CALL_OW 302
7173: PUSH
7174: LD_EXP 35
7178: PUSH
7179: LD_EXP 14
7183: IN
7184: AND
7185: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad then
7186: LD_EXP 32
7190: PPUSH
7191: CALL_OW 302
7195: PUSH
7196: LD_EXP 32
7200: PUSH
7201: LD_EXP 14
7205: IN
7206: AND
7207: IFFALSE 7239
// begin Say ( Mike , DM-Med-5 ) ;
7209: LD_EXP 32
7213: PPUSH
7214: LD_STRING DM-Med-5
7216: PPUSH
7217: CALL_OW 88
// if hasKaia then
7221: LD_VAR 0 1
7225: IFFALSE 7239
// Say ( Kaia , DK-Med-6 ) ;
7227: LD_EXP 35
7231: PPUSH
7232: LD_STRING DK-Med-6
7234: PPUSH
7235: CALL_OW 88
// end ; if hasKaia then
7239: LD_VAR 0 1
7243: IFFALSE 7462
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
7245: LD_INT 175
7247: PPUSH
7248: LD_INT 123
7250: PPUSH
7251: LD_INT 2
7253: PPUSH
7254: LD_INT 8
7256: NEG
7257: PPUSH
7258: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
7262: LD_INT 175
7264: PPUSH
7265: LD_INT 123
7267: PPUSH
7268: LD_INT 2
7270: PPUSH
7271: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
7275: LD_INT 175
7277: PPUSH
7278: LD_INT 123
7280: PPUSH
7281: CALL_OW 86
// laundryAllowed := true ;
7285: LD_ADDR_EXP 26
7289: PUSH
7290: LD_INT 1
7292: ST_TO_ADDR
// Say ( Kaia , DK-Med-7 ) ;
7293: LD_EXP 35
7297: PPUSH
7298: LD_STRING DK-Med-7
7300: PPUSH
7301: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
7305: LD_EXP 35
7309: PPUSH
7310: LD_STRING DK-Med-8
7312: PPUSH
7313: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad then
7317: LD_EXP 37
7321: PPUSH
7322: CALL_OW 302
7326: PUSH
7327: LD_EXP 37
7331: PUSH
7332: LD_EXP 14
7336: IN
7337: AND
7338: IFFALSE 7396
// begin Say ( Markov , DMar-Med-9 ) ;
7340: LD_EXP 37
7344: PPUSH
7345: LD_STRING DMar-Med-9
7347: PPUSH
7348: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
7352: LD_EXP 35
7356: PPUSH
7357: LD_STRING DK-Med-10
7359: PPUSH
7360: CALL_OW 88
// if hasGivi then
7364: LD_VAR 0 2
7368: IFFALSE 7384
// Say ( Kaia , DK-Med-11 ) else
7370: LD_EXP 35
7374: PPUSH
7375: LD_STRING DK-Med-11
7377: PPUSH
7378: CALL_OW 88
7382: GO 7396
// Say ( Kaia , DK-Med-a-11 ) ;
7384: LD_EXP 35
7388: PPUSH
7389: LD_STRING DK-Med-a-11
7391: PPUSH
7392: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad then
7396: LD_EXP 34
7400: PPUSH
7401: CALL_OW 302
7405: PUSH
7406: LD_EXP 34
7410: PUSH
7411: LD_EXP 14
7415: IN
7416: AND
7417: IFFALSE 7462
// begin Say ( Kamil , DKam-Med-12 ) ;
7419: LD_EXP 34
7423: PPUSH
7424: LD_STRING DKam-Med-12
7426: PPUSH
7427: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
7431: LD_EXP 34
7435: PPUSH
7436: LD_STRING DKam-Med-13
7438: PPUSH
7439: CALL_OW 88
// if not hasExplosionCollected then
7443: LD_EXP 23
7447: NOT
7448: IFFALSE 7462
// Say ( Heike , DH-Med-d-14 ) ;
7450: LD_EXP 30
7454: PPUSH
7455: LD_STRING DH-Med-d-14
7457: PPUSH
7458: CALL_OW 88
// end ; end ; DialogueOff ;
7462: CALL_OW 7
// adminAreaDiscovered := true ;
7466: LD_ADDR_EXP 22
7470: PUSH
7471: LD_INT 1
7473: ST_TO_ADDR
// end ;
7474: PPOPN 2
7476: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and heikeSquad > 4 and not isAlarm marked gameStartEvent do var hasGivi , hasKaia ;
7477: LD_EXP 33
7481: NOT
7482: PUSH
7483: LD_EXP 40
7487: AND
7488: PUSH
7489: LD_EXP 40
7493: PUSH
7494: LD_EXP 14
7498: IN
7499: NOT
7500: AND
7501: PUSH
7502: LD_EXP 14
7506: PUSH
7507: LD_INT 4
7509: GREATER
7510: AND
7511: PUSH
7512: LD_EXP 17
7516: NOT
7517: AND
7518: IFFALSE 8102
7520: GO 7522
7522: DISABLE
7523: LD_INT 0
7525: PPUSH
7526: PPUSH
// begin DialogueOn ;
7527: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad ;
7531: LD_ADDR_VAR 0 1
7535: PUSH
7536: LD_EXP 31
7540: PPUSH
7541: CALL_OW 302
7545: PUSH
7546: LD_EXP 31
7550: PUSH
7551: LD_EXP 14
7555: IN
7556: AND
7557: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
7558: LD_EXP 30
7562: PPUSH
7563: LD_STRING DH-Med-a-1
7565: PPUSH
7566: CALL_OW 88
// if hasGivi then
7570: LD_VAR 0 1
7574: IFFALSE 7590
// Say ( Givi , DG-Med-a-2 ) else
7576: LD_EXP 31
7580: PPUSH
7581: LD_STRING DG-Med-a-2
7583: PPUSH
7584: CALL_OW 88
7588: GO 7666
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-f-2 ) then
7590: LD_EXP 14
7594: PUSH
7595: LD_EXP 41
7599: ISECT
7600: PPUSH
7601: LD_INT 26
7603: PUSH
7604: LD_INT 1
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PPUSH
7611: CALL_OW 72
7615: PUSH
7616: LD_INT 1
7618: ARRAY
7619: PPUSH
7620: LD_STRING DArm-Med-f-2
7622: PPUSH
7623: CALL_OW 88
7627: IFFALSE 7666
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-f-2 ) ;
7629: LD_EXP 14
7633: PUSH
7634: LD_EXP 41
7638: ISECT
7639: PPUSH
7640: LD_INT 26
7642: PUSH
7643: LD_INT 2
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PPUSH
7650: CALL_OW 72
7654: PUSH
7655: LD_INT 1
7657: ARRAY
7658: PPUSH
7659: LD_STRING DArf-Med-f-2
7661: PPUSH
7662: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
7666: LD_INT 154
7668: PPUSH
7669: LD_INT 119
7671: PPUSH
7672: LD_INT 70
7674: PPUSH
7675: CALL 15072 0 3
// Say ( Heike , DH-Med-a-3 ) ;
7679: LD_EXP 30
7683: PPUSH
7684: LD_STRING DH-Med-a-3
7686: PPUSH
7687: CALL_OW 88
// if hasGivi then
7691: LD_VAR 0 1
7695: IFFALSE 7711
// Say ( Givi , DG-Med-a-4 ) else
7697: LD_EXP 31
7701: PPUSH
7702: LD_STRING DG-Med-a-4
7704: PPUSH
7705: CALL_OW 88
7709: GO 7787
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-f-4 ) then
7711: LD_EXP 14
7715: PUSH
7716: LD_EXP 41
7720: ISECT
7721: PPUSH
7722: LD_INT 26
7724: PUSH
7725: LD_INT 1
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PPUSH
7732: CALL_OW 72
7736: PUSH
7737: LD_INT 1
7739: ARRAY
7740: PPUSH
7741: LD_STRING DArm-Med-f-4
7743: PPUSH
7744: CALL_OW 88
7748: IFFALSE 7787
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-f-4 ) ;
7750: LD_EXP 14
7754: PUSH
7755: LD_EXP 41
7759: ISECT
7760: PPUSH
7761: LD_INT 26
7763: PUSH
7764: LD_INT 2
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PPUSH
7771: CALL_OW 72
7775: PUSH
7776: LD_INT 1
7778: ARRAY
7779: PPUSH
7780: LD_STRING DArf-Med-f-4
7782: PPUSH
7783: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad ;
7787: LD_ADDR_VAR 0 2
7791: PUSH
7792: LD_EXP 35
7796: PPUSH
7797: CALL_OW 302
7801: PUSH
7802: LD_EXP 35
7806: PUSH
7807: LD_EXP 14
7811: IN
7812: AND
7813: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad then
7814: LD_EXP 32
7818: PPUSH
7819: CALL_OW 302
7823: PUSH
7824: LD_EXP 32
7828: PUSH
7829: LD_EXP 14
7833: IN
7834: AND
7835: IFFALSE 7867
// begin Say ( Mike , DM-Med-5 ) ;
7837: LD_EXP 32
7841: PPUSH
7842: LD_STRING DM-Med-5
7844: PPUSH
7845: CALL_OW 88
// if hasKaia then
7849: LD_VAR 0 2
7853: IFFALSE 7867
// Say ( Kaia , DK-Med-6 ) ;
7855: LD_EXP 35
7859: PPUSH
7860: LD_STRING DK-Med-6
7862: PPUSH
7863: CALL_OW 88
// end ; if hasKaia then
7867: LD_VAR 0 2
7871: IFFALSE 8090
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
7873: LD_INT 175
7875: PPUSH
7876: LD_INT 123
7878: PPUSH
7879: LD_INT 2
7881: PPUSH
7882: LD_INT 8
7884: NEG
7885: PPUSH
7886: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
7890: LD_INT 175
7892: PPUSH
7893: LD_INT 123
7895: PPUSH
7896: LD_INT 2
7898: PPUSH
7899: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
7903: LD_INT 175
7905: PPUSH
7906: LD_INT 123
7908: PPUSH
7909: CALL_OW 86
// laundryAllowed := true ;
7913: LD_ADDR_EXP 26
7917: PUSH
7918: LD_INT 1
7920: ST_TO_ADDR
// Say ( Kaia , DK-Med-7 ) ;
7921: LD_EXP 35
7925: PPUSH
7926: LD_STRING DK-Med-7
7928: PPUSH
7929: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
7933: LD_EXP 35
7937: PPUSH
7938: LD_STRING DK-Med-8
7940: PPUSH
7941: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad then
7945: LD_EXP 37
7949: PPUSH
7950: CALL_OW 302
7954: PUSH
7955: LD_EXP 37
7959: PUSH
7960: LD_EXP 14
7964: IN
7965: AND
7966: IFFALSE 8024
// begin Say ( Markov , DMar-Med-9 ) ;
7968: LD_EXP 37
7972: PPUSH
7973: LD_STRING DMar-Med-9
7975: PPUSH
7976: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
7980: LD_EXP 35
7984: PPUSH
7985: LD_STRING DK-Med-10
7987: PPUSH
7988: CALL_OW 88
// if hasGivi then
7992: LD_VAR 0 1
7996: IFFALSE 8012
// Say ( Kaia , DK-Med-11 ) else
7998: LD_EXP 35
8002: PPUSH
8003: LD_STRING DK-Med-11
8005: PPUSH
8006: CALL_OW 88
8010: GO 8024
// Say ( Kaia , DK-Med-a-11 ) ;
8012: LD_EXP 35
8016: PPUSH
8017: LD_STRING DK-Med-a-11
8019: PPUSH
8020: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad then
8024: LD_EXP 34
8028: PPUSH
8029: CALL_OW 302
8033: PUSH
8034: LD_EXP 34
8038: PUSH
8039: LD_EXP 14
8043: IN
8044: AND
8045: IFFALSE 8090
// begin Say ( Kamil , DKam-Med-12 ) ;
8047: LD_EXP 34
8051: PPUSH
8052: LD_STRING DKam-Med-12
8054: PPUSH
8055: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
8059: LD_EXP 34
8063: PPUSH
8064: LD_STRING DKam-Med-13
8066: PPUSH
8067: CALL_OW 88
// if not hasExplosionCollected then
8071: LD_EXP 23
8075: NOT
8076: IFFALSE 8090
// Say ( Heike , DH-Med-d-14 ) ;
8078: LD_EXP 30
8082: PPUSH
8083: LD_STRING DH-Med-d-14
8085: PPUSH
8086: CALL_OW 88
// end ; end ; DialogueOff ;
8090: CALL_OW 7
// adminAreaDiscovered := true ;
8094: LD_ADDR_EXP 22
8098: PUSH
8099: LD_INT 1
8101: ST_TO_ADDR
// end ;
8102: PPOPN 2
8104: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and heikeSquad > 4 and not isAlarm marked gameStartEvent do var hasGivi , hasKaia ;
8105: LD_EXP 33
8109: PUSH
8110: LD_EXP 40
8114: NOT
8115: AND
8116: PUSH
8117: LD_EXP 33
8121: PUSH
8122: LD_EXP 14
8126: IN
8127: NOT
8128: AND
8129: PUSH
8130: LD_EXP 14
8134: PUSH
8135: LD_INT 4
8137: GREATER
8138: AND
8139: PUSH
8140: LD_EXP 17
8144: NOT
8145: AND
8146: IFFALSE 8730
8148: GO 8150
8150: DISABLE
8151: LD_INT 0
8153: PPUSH
8154: PPUSH
// begin DialogueOn ;
8155: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad ;
8159: LD_ADDR_VAR 0 1
8163: PUSH
8164: LD_EXP 31
8168: PPUSH
8169: CALL_OW 302
8173: PUSH
8174: LD_EXP 31
8178: PUSH
8179: LD_EXP 14
8183: IN
8184: AND
8185: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
8186: LD_EXP 30
8190: PPUSH
8191: LD_STRING DH-Med-b-1
8193: PPUSH
8194: CALL_OW 88
// if hasGivi then
8198: LD_VAR 0 1
8202: IFFALSE 8218
// Say ( Givi , DG-Med-a-2 ) else
8204: LD_EXP 31
8208: PPUSH
8209: LD_STRING DG-Med-a-2
8211: PPUSH
8212: CALL_OW 88
8216: GO 8294
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-f-2 ) then
8218: LD_EXP 14
8222: PUSH
8223: LD_EXP 41
8227: ISECT
8228: PPUSH
8229: LD_INT 26
8231: PUSH
8232: LD_INT 1
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PPUSH
8239: CALL_OW 72
8243: PUSH
8244: LD_INT 1
8246: ARRAY
8247: PPUSH
8248: LD_STRING DArm-Med-f-2
8250: PPUSH
8251: CALL_OW 88
8255: IFFALSE 8294
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-f-2 ) ;
8257: LD_EXP 14
8261: PUSH
8262: LD_EXP 41
8266: ISECT
8267: PPUSH
8268: LD_INT 26
8270: PUSH
8271: LD_INT 2
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PPUSH
8278: CALL_OW 72
8282: PUSH
8283: LD_INT 1
8285: ARRAY
8286: PPUSH
8287: LD_STRING DArf-Med-f-2
8289: PPUSH
8290: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8294: LD_INT 154
8296: PPUSH
8297: LD_INT 119
8299: PPUSH
8300: LD_INT 70
8302: PPUSH
8303: CALL 15072 0 3
// Say ( Heike , DH-Med-a-3 ) ;
8307: LD_EXP 30
8311: PPUSH
8312: LD_STRING DH-Med-a-3
8314: PPUSH
8315: CALL_OW 88
// if hasGivi then
8319: LD_VAR 0 1
8323: IFFALSE 8339
// Say ( Givi , DG-Med-a-4 ) else
8325: LD_EXP 31
8329: PPUSH
8330: LD_STRING DG-Med-a-4
8332: PPUSH
8333: CALL_OW 88
8337: GO 8415
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-f-4 ) then
8339: LD_EXP 14
8343: PUSH
8344: LD_EXP 41
8348: ISECT
8349: PPUSH
8350: LD_INT 26
8352: PUSH
8353: LD_INT 1
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PPUSH
8360: CALL_OW 72
8364: PUSH
8365: LD_INT 1
8367: ARRAY
8368: PPUSH
8369: LD_STRING DArm-Med-f-4
8371: PPUSH
8372: CALL_OW 88
8376: IFFALSE 8415
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-f-4 ) ;
8378: LD_EXP 14
8382: PUSH
8383: LD_EXP 41
8387: ISECT
8388: PPUSH
8389: LD_INT 26
8391: PUSH
8392: LD_INT 2
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PPUSH
8399: CALL_OW 72
8403: PUSH
8404: LD_INT 1
8406: ARRAY
8407: PPUSH
8408: LD_STRING DArf-Med-f-4
8410: PPUSH
8411: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad ;
8415: LD_ADDR_VAR 0 2
8419: PUSH
8420: LD_EXP 35
8424: PPUSH
8425: CALL_OW 302
8429: PUSH
8430: LD_EXP 35
8434: PUSH
8435: LD_EXP 14
8439: IN
8440: AND
8441: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad then
8442: LD_EXP 32
8446: PPUSH
8447: CALL_OW 302
8451: PUSH
8452: LD_EXP 32
8456: PUSH
8457: LD_EXP 14
8461: IN
8462: AND
8463: IFFALSE 8495
// begin Say ( Mike , DM-Med-5 ) ;
8465: LD_EXP 32
8469: PPUSH
8470: LD_STRING DM-Med-5
8472: PPUSH
8473: CALL_OW 88
// if hasKaia then
8477: LD_VAR 0 2
8481: IFFALSE 8495
// Say ( Kaia , DK-Med-6 ) ;
8483: LD_EXP 35
8487: PPUSH
8488: LD_STRING DK-Med-6
8490: PPUSH
8491: CALL_OW 88
// end ; if hasKaia then
8495: LD_VAR 0 2
8499: IFFALSE 8718
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8501: LD_INT 175
8503: PPUSH
8504: LD_INT 123
8506: PPUSH
8507: LD_INT 2
8509: PPUSH
8510: LD_INT 8
8512: NEG
8513: PPUSH
8514: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8518: LD_INT 175
8520: PPUSH
8521: LD_INT 123
8523: PPUSH
8524: LD_INT 2
8526: PPUSH
8527: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8531: LD_INT 175
8533: PPUSH
8534: LD_INT 123
8536: PPUSH
8537: CALL_OW 86
// laundryAllowed := true ;
8541: LD_ADDR_EXP 26
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// Say ( Kaia , DK-Med-7 ) ;
8549: LD_EXP 35
8553: PPUSH
8554: LD_STRING DK-Med-7
8556: PPUSH
8557: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8561: LD_EXP 35
8565: PPUSH
8566: LD_STRING DK-Med-8
8568: PPUSH
8569: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad then
8573: LD_EXP 37
8577: PPUSH
8578: CALL_OW 302
8582: PUSH
8583: LD_EXP 37
8587: PUSH
8588: LD_EXP 14
8592: IN
8593: AND
8594: IFFALSE 8652
// begin Say ( Markov , DMar-Med-9 ) ;
8596: LD_EXP 37
8600: PPUSH
8601: LD_STRING DMar-Med-9
8603: PPUSH
8604: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8608: LD_EXP 35
8612: PPUSH
8613: LD_STRING DK-Med-10
8615: PPUSH
8616: CALL_OW 88
// if hasGivi then
8620: LD_VAR 0 1
8624: IFFALSE 8640
// Say ( Kaia , DK-Med-11 ) else
8626: LD_EXP 35
8630: PPUSH
8631: LD_STRING DK-Med-11
8633: PPUSH
8634: CALL_OW 88
8638: GO 8652
// Say ( Kaia , DK-Med-a-11 ) ;
8640: LD_EXP 35
8644: PPUSH
8645: LD_STRING DK-Med-a-11
8647: PPUSH
8648: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad then
8652: LD_EXP 34
8656: PPUSH
8657: CALL_OW 302
8661: PUSH
8662: LD_EXP 34
8666: PUSH
8667: LD_EXP 14
8671: IN
8672: AND
8673: IFFALSE 8718
// begin Say ( Kamil , DKam-Med-12 ) ;
8675: LD_EXP 34
8679: PPUSH
8680: LD_STRING DKam-Med-12
8682: PPUSH
8683: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
8687: LD_EXP 34
8691: PPUSH
8692: LD_STRING DKam-Med-13
8694: PPUSH
8695: CALL_OW 88
// if not hasExplosionCollected then
8699: LD_EXP 23
8703: NOT
8704: IFFALSE 8718
// Say ( Heike , DH-Med-d-14 ) ;
8706: LD_EXP 30
8710: PPUSH
8711: LD_STRING DH-Med-d-14
8713: PPUSH
8714: CALL_OW 88
// end ; end ; DialogueOff ;
8718: CALL_OW 7
// adminAreaDiscovered := true ;
8722: LD_ADDR_EXP 22
8726: PUSH
8727: LD_INT 1
8729: ST_TO_ADDR
// end ;
8730: PPOPN 2
8732: END
// every 0 0$1 trigger laundryAllowed do
8733: LD_EXP 26
8737: IFFALSE 8749
8739: GO 8741
8741: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
8742: LD_STRING M1-laundry
8744: PPUSH
8745: CALL_OW 337
8749: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and not isAlarm marked gameStartEvent do
8750: LD_EXP 33
8754: NOT
8755: PUSH
8756: LD_EXP 40
8760: NOT
8761: AND
8762: PUSH
8763: LD_EXP 38
8767: PPUSH
8768: CALL_OW 302
8772: AND
8773: PUSH
8774: LD_EXP 38
8778: PUSH
8779: LD_EXP 14
8783: IN
8784: AND
8785: PUSH
8786: LD_EXP 17
8790: NOT
8791: AND
8792: IFFALSE 8933
8794: GO 8796
8796: DISABLE
// begin DialogueOn ;
8797: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
8801: LD_INT 152
8803: PPUSH
8804: LD_INT 115
8806: PPUSH
8807: LD_INT 2
8809: PPUSH
8810: LD_INT 16
8812: NEG
8813: PPUSH
8814: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
8818: LD_INT 152
8820: PPUSH
8821: LD_INT 115
8823: PPUSH
8824: LD_INT 2
8826: PPUSH
8827: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
8831: LD_INT 152
8833: PPUSH
8834: LD_INT 115
8836: PPUSH
8837: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
8841: LD_EXP 38
8845: PPUSH
8846: LD_STRING DO-Med-c-1
8848: PPUSH
8849: CALL_OW 88
// if not hasExplosionCollected then
8853: LD_EXP 23
8857: NOT
8858: IFFALSE 8874
// Say ( Heike , DH-Med-d-14 ) else
8860: LD_EXP 30
8864: PPUSH
8865: LD_STRING DH-Med-d-14
8867: PPUSH
8868: CALL_OW 88
8872: GO 8921
// begin Say ( Heike , DH-Med-c-2 ) ;
8874: LD_EXP 30
8878: PPUSH
8879: LD_STRING DH-Med-c-2
8881: PPUSH
8882: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad then
8886: LD_EXP 35
8890: PPUSH
8891: CALL_OW 302
8895: PUSH
8896: LD_EXP 35
8900: PUSH
8901: LD_EXP 14
8905: IN
8906: AND
8907: IFFALSE 8921
// Say ( Kaia , DK-Med-c-3 ) ;
8909: LD_EXP 35
8913: PPUSH
8914: LD_STRING DK-Med-c-3
8916: PPUSH
8917: CALL_OW 88
// end ; DialogueOff ;
8921: CALL_OW 7
// adminAreaDiscovered := true ;
8925: LD_ADDR_EXP 22
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// end ;
8933: END
// every 0 0$1 trigger IsDying ( Kaia ) and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
8934: LD_EXP 35
8938: PPUSH
8939: CALL_OW 303
8943: PUSH
8944: LD_EXP 35
8948: PUSH
8949: LD_EXP 14
8953: IN
8954: AND
8955: PUSH
8956: LD_EXP 17
8960: AND
8961: PUSH
8962: LD_EXP 24
8966: AND
8967: IFFALSE 9096
8969: GO 8971
8971: DISABLE
// begin DialogueOn ;
8972: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
8976: LD_EXP 35
8980: PPUSH
8981: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
8985: LD_EXP 35
8989: PPUSH
8990: LD_STRING DK-death-1
8992: PPUSH
8993: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
8997: LD_EXP 30
9001: PPUSH
9002: LD_STRING DH-death-2
9004: PPUSH
9005: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
9009: LD_EXP 35
9013: PPUSH
9014: LD_STRING DK-death-3
9016: PPUSH
9017: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
9021: LD_EXP 35
9025: PPUSH
9026: LD_STRING DK-death-4
9028: PPUSH
9029: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
9033: LD_EXP 35
9037: PPUSH
9038: LD_INT 8
9040: PPUSH
9041: CALL_OW 235
// ComStop ( Kaia ) ;
9045: LD_EXP 35
9049: PPUSH
9050: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
9054: LD_INT 8
9056: PPUSH
9057: LD_INT 2
9059: PPUSH
9060: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
9064: LD_ADDR_EXP 14
9068: PUSH
9069: LD_EXP 14
9073: PUSH
9074: LD_EXP 35
9078: DIFF
9079: ST_TO_ADDR
// DialogueOff ;
9080: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
9084: LD_EXP 32
9088: PPUSH
9089: LD_STRING DM-death-5
9091: PPUSH
9092: CALL_OW 88
// end ;
9096: END
// every 0 0$2 trigger not contactWithAmerican and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
9097: LD_EXP 25
9101: NOT
9102: PUSH
9103: LD_EXP 43
9107: PUSH
9108: LD_EXP 14
9112: IN
9113: NOT
9114: AND
9115: PUSH
9116: LD_INT 2
9118: PPUSH
9119: LD_EXP 43
9123: PPUSH
9124: CALL_OW 292
9128: AND
9129: PUSH
9130: LD_EXP 30
9134: PPUSH
9135: LD_EXP 43
9139: PPUSH
9140: CALL_OW 296
9144: PUSH
9145: LD_INT 6
9147: LESS
9148: AND
9149: PUSH
9150: LD_EXP 17
9154: NOT
9155: AND
9156: IFFALSE 9380
9158: GO 9160
9160: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
9161: LD_EXP 43
9165: PPUSH
9166: LD_EXP 30
9170: PPUSH
9171: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
9175: LD_EXP 30
9179: PPUSH
9180: LD_EXP 43
9184: PPUSH
9185: CALL_OW 119
// wait ( 0 0$0.3 ) ;
9189: LD_INT 10
9191: PPUSH
9192: CALL_OW 67
// DialogueOn ;
9196: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
9200: LD_EXP 43
9204: PPUSH
9205: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
9209: LD_EXP 30
9213: PPUSH
9214: LD_STRING DH-Deal-1
9216: PPUSH
9217: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
9221: LD_EXP 43
9225: PPUSH
9226: LD_STRING DJ-Deal-2
9228: PPUSH
9229: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
9233: LD_EXP 30
9237: PPUSH
9238: LD_STRING DH-Deal-3
9240: PPUSH
9241: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
9245: LD_EXP 43
9249: PPUSH
9250: LD_STRING DJ-Deal-4
9252: PPUSH
9253: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
9257: LD_EXP 43
9261: PPUSH
9262: LD_STRING DJ-Deal-5
9264: PPUSH
9265: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
9269: LD_EXP 43
9273: PPUSH
9274: LD_STRING DJ-Deal-6
9276: PPUSH
9277: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
9281: LD_EXP 43
9285: PPUSH
9286: LD_STRING DJ-Deal-7
9288: PPUSH
9289: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
9293: LD_EXP 30
9297: PPUSH
9298: LD_STRING DH-Deal-8
9300: PPUSH
9301: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
9305: LD_EXP 30
9309: PPUSH
9310: LD_STRING DH-Deal-9
9312: PPUSH
9313: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
9317: LD_EXP 43
9321: PPUSH
9322: LD_STRING DJ-Deal-10
9324: PPUSH
9325: CALL_OW 88
// DialogueOff ;
9329: CALL_OW 7
// contactWithAmerican := true ;
9333: LD_ADDR_EXP 25
9337: PUSH
9338: LD_INT 1
9340: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
9341: LD_STRING M1-american-out
9343: PPUSH
9344: CALL_OW 604
// SetSide ( Harris , 2 ) ;
9348: LD_EXP 43
9352: PPUSH
9353: LD_INT 2
9355: PPUSH
9356: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
9360: LD_ADDR_EXP 14
9364: PUSH
9365: LD_EXP 14
9369: PPUSH
9370: LD_EXP 43
9374: PPUSH
9375: CALL 53894 0 2
9379: ST_TO_ADDR
// end ;
9380: END
// every 0 0$2 trigger contactWithAmerican and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
9381: LD_EXP 25
9385: PUSH
9386: LD_EXP 43
9390: PUSH
9391: LD_EXP 14
9395: IN
9396: NOT
9397: AND
9398: PUSH
9399: LD_INT 2
9401: PPUSH
9402: LD_EXP 43
9406: PPUSH
9407: CALL_OW 292
9411: AND
9412: PUSH
9413: LD_EXP 30
9417: PPUSH
9418: LD_EXP 43
9422: PPUSH
9423: CALL_OW 296
9427: PUSH
9428: LD_INT 6
9430: LESS
9431: AND
9432: PUSH
9433: LD_EXP 17
9437: NOT
9438: AND
9439: IFFALSE 9564
9441: GO 9443
9443: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
9444: LD_EXP 43
9448: PPUSH
9449: LD_EXP 30
9453: PPUSH
9454: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
9458: LD_EXP 30
9462: PPUSH
9463: LD_EXP 43
9467: PPUSH
9468: CALL_OW 119
// wait ( 0 0$0.3 ) ;
9472: LD_INT 10
9474: PPUSH
9475: CALL_OW 67
// DialogueOn ;
9479: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
9483: LD_EXP 43
9487: PPUSH
9488: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
9492: LD_EXP 43
9496: PPUSH
9497: LD_STRING DJ-Escort-1
9499: PPUSH
9500: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
9504: LD_EXP 30
9508: PPUSH
9509: LD_STRING DH-Escort-2
9511: PPUSH
9512: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
9516: LD_EXP 43
9520: PPUSH
9521: LD_STRING DJ-Escort-3
9523: PPUSH
9524: CALL_OW 88
// DialogueOff ;
9528: CALL_OW 7
// SetSide ( Harris , 2 ) ;
9532: LD_EXP 43
9536: PPUSH
9537: LD_INT 2
9539: PPUSH
9540: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
9544: LD_ADDR_EXP 14
9548: PUSH
9549: LD_EXP 14
9553: PPUSH
9554: LD_EXP 43
9558: PPUSH
9559: CALL 53894 0 2
9563: ST_TO_ADDR
// end ;
9564: END
// every 0 0$2 trigger contactWithAmerican and UnitFilter ( americanSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
9565: LD_EXP 25
9569: PUSH
9570: LD_EXP 42
9574: PUSH
9575: LD_EXP 14
9579: DIFF
9580: PPUSH
9581: LD_INT 3
9583: PUSH
9584: LD_INT 120
9586: PUSH
9587: LD_INT 1
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 101
9600: PUSH
9601: LD_INT 2
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PPUSH
9612: CALL_OW 72
9616: AND
9617: PUSH
9618: LD_EXP 17
9622: NOT
9623: AND
9624: IFFALSE 9808
9626: GO 9628
9628: DISABLE
9629: LD_INT 0
9631: PPUSH
// begin enable ;
9632: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ f_see , 2 ] ) , Heike ) ;
9633: LD_ADDR_VAR 0 1
9637: PUSH
9638: LD_EXP 42
9642: PUSH
9643: LD_EXP 14
9647: DIFF
9648: PPUSH
9649: LD_INT 101
9651: PUSH
9652: LD_INT 2
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PPUSH
9659: CALL_OW 72
9663: PPUSH
9664: LD_EXP 30
9668: PPUSH
9669: CALL_OW 74
9673: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
9674: LD_VAR 0 1
9678: PPUSH
9679: LD_EXP 30
9683: PPUSH
9684: CALL_OW 296
9688: PUSH
9689: LD_INT 6
9691: LESS
9692: IFFALSE 9808
// begin DialogueOn ;
9694: CALL_OW 6
// CenterNowOnUnits ( un ) ;
9698: LD_VAR 0 1
9702: PPUSH
9703: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
9707: LD_EXP 30
9711: PPUSH
9712: LD_STRING DH-USsol-1
9714: PPUSH
9715: CALL_OW 88
// if GetSex ( un ) = sex_male then
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 258
9728: PUSH
9729: LD_INT 1
9731: EQUAL
9732: IFFALSE 9748
// Say ( un , DUSM-USsol-2 ) else
9734: LD_VAR 0 1
9738: PPUSH
9739: LD_STRING DUSM-USsol-2
9741: PPUSH
9742: CALL_OW 88
9746: GO 9760
// Say ( un , DUSF-USsol-2 ) ;
9748: LD_VAR 0 1
9752: PPUSH
9753: LD_STRING DUSF-USsol-2
9755: PPUSH
9756: CALL_OW 88
// DialogueOff ;
9760: CALL_OW 7
// un := Join ( heikeSquad , un ) ;
9764: LD_ADDR_VAR 0 1
9768: PUSH
9769: LD_EXP 14
9773: PPUSH
9774: LD_VAR 0 1
9778: PPUSH
9779: CALL 53894 0 2
9783: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
9784: LD_VAR 0 1
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: CALL_OW 109
// SetSide ( un , 2 ) ;
9796: LD_VAR 0 1
9800: PPUSH
9801: LD_INT 2
9803: PPUSH
9804: CALL_OW 235
// end ; end ;
9808: PPOPN 1
9810: END
// every 0 0$2 trigger heikeSecondSquad and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
9811: LD_EXP 41
9815: PUSH
9816: LD_EXP 41
9820: PUSH
9821: LD_EXP 14
9825: DIFF
9826: PPUSH
9827: LD_INT 3
9829: PUSH
9830: LD_INT 120
9832: PUSH
9833: LD_INT 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: LD_INT 101
9846: PUSH
9847: LD_INT 2
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PPUSH
9858: CALL_OW 72
9862: AND
9863: PUSH
9864: LD_EXP 17
9868: NOT
9869: AND
9870: IFFALSE 10054
9872: GO 9874
9874: DISABLE
9875: LD_INT 0
9877: PPUSH
// begin enable ;
9878: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ f_see , 2 ] ) , Heike ) ;
9879: LD_ADDR_VAR 0 1
9883: PUSH
9884: LD_EXP 41
9888: PUSH
9889: LD_EXP 14
9893: DIFF
9894: PPUSH
9895: LD_INT 101
9897: PUSH
9898: LD_INT 2
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PPUSH
9905: CALL_OW 72
9909: PPUSH
9910: LD_EXP 30
9914: PPUSH
9915: CALL_OW 74
9919: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
9920: LD_VAR 0 1
9924: PPUSH
9925: LD_EXP 30
9929: PPUSH
9930: CALL_OW 296
9934: PUSH
9935: LD_INT 6
9937: LESS
9938: IFFALSE 10054
// begin DialogueOn ;
9940: CALL_OW 6
// CenterNowOnUnits ( un ) ;
9944: LD_VAR 0 1
9948: PPUSH
9949: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
9953: LD_EXP 30
9957: PPUSH
9958: LD_STRING DH-USsol-1
9960: PPUSH
9961: CALL_OW 88
// if GetSex ( un ) = sex_male then
9965: LD_VAR 0 1
9969: PPUSH
9970: CALL_OW 258
9974: PUSH
9975: LD_INT 1
9977: EQUAL
9978: IFFALSE 9994
// Say ( un , DArm-USsol-2 ) else
9980: LD_VAR 0 1
9984: PPUSH
9985: LD_STRING DArm-USsol-2
9987: PPUSH
9988: CALL_OW 88
9992: GO 10006
// Say ( un , DArf-USsol-3 ) ;
9994: LD_VAR 0 1
9998: PPUSH
9999: LD_STRING DArf-USsol-3
10001: PPUSH
10002: CALL_OW 88
// DialogueOff ;
10006: CALL_OW 7
// un := Join ( heikeSquad , un ) ;
10010: LD_ADDR_VAR 0 1
10014: PUSH
10015: LD_EXP 14
10019: PPUSH
10020: LD_VAR 0 1
10024: PPUSH
10025: CALL 53894 0 2
10029: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
10030: LD_VAR 0 1
10034: PPUSH
10035: LD_INT 1
10037: PPUSH
10038: CALL_OW 109
// SetSide ( un , 2 ) ;
10042: LD_VAR 0 1
10046: PPUSH
10047: LD_INT 2
10049: PPUSH
10050: CALL_OW 235
// end ; end ;
10054: PPOPN 1
10056: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and heikeSquad > 5 and not americanContact and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
10057: LD_EXP 42
10061: PPUSH
10062: LD_INT 101
10064: PUSH
10065: LD_INT 2
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PPUSH
10072: CALL_OW 72
10076: PUSH
10077: LD_EXP 14
10081: PUSH
10082: LD_INT 5
10084: GREATER
10085: AND
10086: PUSH
10087: LD_EXP 10
10091: NOT
10092: AND
10093: PUSH
10094: LD_EXP 25
10098: NOT
10099: AND
10100: PUSH
10101: LD_EXP 17
10105: NOT
10106: AND
10107: IFFALSE 10208
10109: GO 10111
10111: DISABLE
10112: LD_INT 0
10114: PPUSH
// begin un := UnitFilter ( americanSquad , [ f_see , 2 ] ) [ 1 ] ;
10115: LD_ADDR_VAR 0 1
10119: PUSH
10120: LD_EXP 42
10124: PPUSH
10125: LD_INT 101
10127: PUSH
10128: LD_INT 2
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PPUSH
10135: CALL_OW 72
10139: PUSH
10140: LD_INT 1
10142: ARRAY
10143: ST_TO_ADDR
// DialogueOn ;
10144: CALL_OW 6
// if GetSex ( un ) = sex_male then
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 258
10157: PUSH
10158: LD_INT 1
10160: EQUAL
10161: IFFALSE 10177
// Say ( un , DUSm-USsol-a-2 ) else
10163: LD_VAR 0 1
10167: PPUSH
10168: LD_STRING DUSm-USsol-a-2
10170: PPUSH
10171: CALL_OW 88
10175: GO 10189
// Say ( un , DUSf-USsol-a-2 ) ;
10177: LD_VAR 0 1
10181: PPUSH
10182: LD_STRING DUSf-USsol-a-2
10184: PPUSH
10185: CALL_OW 88
// DialogueOff ;
10189: CALL_OW 7
// wait ( 0 0$2 ) ;
10193: LD_INT 70
10195: PPUSH
10196: CALL_OW 67
// isAlarm := true ;
10200: LD_ADDR_EXP 17
10204: PUSH
10205: LD_INT 1
10207: ST_TO_ADDR
// end ;
10208: PPOPN 1
10210: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and laundryAllowed and not giviAsRussian and not heikeAsRussian and InEntrance ( Givi , laundry ) marked gameStartEvent do
10211: LD_EXP 17
10215: NOT
10216: PUSH
10217: LD_EXP 31
10221: PPUSH
10222: CALL_OW 302
10226: AND
10227: PUSH
10228: LD_EXP 26
10232: AND
10233: PUSH
10234: LD_EXP 28
10238: NOT
10239: AND
10240: PUSH
10241: LD_EXP 27
10245: NOT
10246: AND
10247: PUSH
10248: LD_EXP 31
10252: PPUSH
10253: LD_INT 165
10255: PPUSH
10256: CALL 15111 0 2
10260: AND
10261: IFFALSE 10393
10263: GO 10265
10265: DISABLE
// begin enable ;
10266: ENABLE
// InGameOn ;
10267: CALL_OW 8
// SetSide ( Givi , 5 ) ;
10271: LD_EXP 31
10275: PPUSH
10276: LD_INT 5
10278: PPUSH
10279: CALL_OW 235
// SetSide ( laundry , 5 ) ;
10283: LD_INT 165
10285: PPUSH
10286: LD_INT 5
10288: PPUSH
10289: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
10293: LD_EXP 31
10297: PPUSH
10298: LD_INT 165
10300: PPUSH
10301: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
10305: LD_INT 35
10307: PPUSH
10308: CALL_OW 67
// until IsInUnit ( Givi ) ;
10312: LD_EXP 31
10316: PPUSH
10317: CALL_OW 310
10321: IFFALSE 10305
// case Query ( HeikeInLaundry ) of 1 :
10323: LD_STRING HeikeInLaundry
10325: PPUSH
10326: CALL_OW 97
10330: PUSH
10331: LD_INT 1
10333: DOUBLE
10334: EQUAL
10335: IFTRUE 10339
10337: GO 10346
10339: POP
// SpawnGiviAsRussian ; 2 :
10340: CALL 1492 0 0
10344: GO 10358
10346: LD_INT 2
10348: DOUBLE
10349: EQUAL
10350: IFTRUE 10354
10352: GO 10357
10354: POP
// ; end ;
10355: GO 10358
10357: POP
// ComExitBuilding ( Givi ) ;
10358: LD_EXP 31
10362: PPUSH
10363: CALL_OW 122
// SetSide ( Givi , 2 ) ;
10367: LD_EXP 31
10371: PPUSH
10372: LD_INT 2
10374: PPUSH
10375: CALL_OW 235
// SetSide ( laundry , 3 ) ;
10379: LD_INT 165
10381: PPUSH
10382: LD_INT 3
10384: PPUSH
10385: CALL_OW 235
// InGameOff ;
10389: CALL_OW 9
// end ;
10393: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) do
10394: LD_EXP 17
10398: NOT
10399: PUSH
10400: LD_EXP 28
10404: AND
10405: PUSH
10406: LD_EXP 31
10410: PPUSH
10411: CALL_OW 248
10415: PUSH
10416: LD_INT 3
10418: EQUAL
10419: AND
10420: PUSH
10421: LD_EXP 31
10425: PPUSH
10426: LD_INT 119
10428: PPUSH
10429: CALL 15111 0 2
10433: AND
10434: IFFALSE 10622
10436: GO 10438
10438: DISABLE
// begin InGameOn ;
10439: CALL_OW 8
// wait ( 0 0$1 ) ;
10443: LD_INT 35
10445: PPUSH
10446: CALL_OW 67
// DialogueOn ;
10450: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
10454: LD_EXP 31
10458: PPUSH
10459: LD_STRING DG-Captive-1
10461: PPUSH
10462: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
10466: LD_EXP 48
10470: PPUSH
10471: LD_STRING DCom-Captive-2
10473: PPUSH
10474: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
10478: LD_EXP 31
10482: PPUSH
10483: LD_STRING DG-Captive-3
10485: PPUSH
10486: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
10490: LD_EXP 48
10494: PPUSH
10495: LD_STRING DCom-Captive-4
10497: PPUSH
10498: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
10502: LD_EXP 48
10506: PPUSH
10507: CALL_OW 64
// DialogueOff ;
10511: CALL_OW 7
// InGameOff ;
10515: CALL_OW 9
// ComExitBuilding ( Givi ) ;
10519: LD_EXP 31
10523: PPUSH
10524: CALL_OW 122
// if Aviradze then
10528: LD_EXP 40
10532: IFFALSE 10575
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
10534: LD_ADDR_EXP 14
10538: PUSH
10539: LD_EXP 14
10543: PPUSH
10544: LD_EXP 40
10548: PPUSH
10549: CALL 53894 0 2
10553: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
10554: LD_EXP 40
10558: PPUSH
10559: LD_INT 2
10561: PPUSH
10562: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
10566: LD_EXP 40
10570: PPUSH
10571: CALL_OW 122
// end ; if Ibrahim then
10575: LD_EXP 33
10579: IFFALSE 10622
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
10581: LD_ADDR_EXP 14
10585: PUSH
10586: LD_EXP 14
10590: PPUSH
10591: LD_EXP 33
10595: PPUSH
10596: CALL 53894 0 2
10600: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
10601: LD_EXP 33
10605: PPUSH
10606: LD_INT 2
10608: PPUSH
10609: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
10613: LD_EXP 33
10617: PPUSH
10618: CALL_OW 122
// end ; end ;
10622: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) do
10623: LD_EXP 17
10627: NOT
10628: PUSH
10629: LD_EXP 27
10633: AND
10634: PUSH
10635: LD_EXP 30
10639: PPUSH
10640: CALL_OW 248
10644: PUSH
10645: LD_INT 3
10647: EQUAL
10648: AND
10649: PUSH
10650: LD_EXP 30
10654: PPUSH
10655: LD_INT 119
10657: PPUSH
10658: CALL 15111 0 2
10662: AND
10663: IFFALSE 10901
10665: GO 10667
10667: DISABLE
// begin InGameOn ;
10668: CALL_OW 8
// wait ( 0 0$1 ) ;
10672: LD_INT 35
10674: PPUSH
10675: CALL_OW 67
// DialogueOn ;
10679: CALL_OW 6
// if Aviradze and Ibrahim then
10683: LD_EXP 40
10687: PUSH
10688: LD_EXP 33
10692: AND
10693: IFFALSE 10709
// Say ( Heike , DH-Captive-a-1 ) else
10695: LD_EXP 30
10699: PPUSH
10700: LD_STRING DH-Captive-a-1
10702: PPUSH
10703: CALL_OW 88
10707: GO 10721
// Say ( Heike , DH-Captive-a-b-1 ) ;
10709: LD_EXP 30
10713: PPUSH
10714: LD_STRING DH-Captive-a-b-1
10716: PPUSH
10717: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
10721: LD_EXP 48
10725: PPUSH
10726: LD_STRING DCom-Captive-a-2
10728: PPUSH
10729: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
10733: LD_EXP 30
10737: PPUSH
10738: LD_STRING DH-Captive-a-3
10740: PPUSH
10741: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
10745: LD_EXP 48
10749: PPUSH
10750: LD_STRING DCom-Captive-a-4
10752: PPUSH
10753: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
10757: LD_EXP 30
10761: PPUSH
10762: LD_STRING DH-Captive-a-5
10764: PPUSH
10765: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-6 ) ;
10769: LD_EXP 48
10773: PPUSH
10774: LD_STRING DCom-Captive-a-6
10776: PPUSH
10777: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
10781: LD_EXP 48
10785: PPUSH
10786: CALL_OW 64
// DialogueOff ;
10790: CALL_OW 7
// InGameOff ;
10794: CALL_OW 9
// ComExitBuilding ( Heike ) ;
10798: LD_EXP 30
10802: PPUSH
10803: CALL_OW 122
// if Aviradze then
10807: LD_EXP 40
10811: IFFALSE 10854
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
10813: LD_ADDR_EXP 14
10817: PUSH
10818: LD_EXP 14
10822: PPUSH
10823: LD_EXP 40
10827: PPUSH
10828: CALL 53894 0 2
10832: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
10833: LD_EXP 40
10837: PPUSH
10838: LD_INT 2
10840: PPUSH
10841: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
10845: LD_EXP 40
10849: PPUSH
10850: CALL_OW 122
// end ; if Ibrahim then
10854: LD_EXP 33
10858: IFFALSE 10901
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
10860: LD_ADDR_EXP 14
10864: PUSH
10865: LD_EXP 14
10869: PPUSH
10870: LD_EXP 33
10874: PPUSH
10875: CALL 53894 0 2
10879: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
10880: LD_EXP 33
10884: PPUSH
10885: LD_INT 2
10887: PPUSH
10888: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
10892: LD_EXP 33
10896: PPUSH
10897: CALL_OW 122
// end ; end ;
10901: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
10902: LD_INT 2
10904: PUSH
10905: LD_INT 25
10907: PUSH
10908: LD_INT 32
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 25
10917: PUSH
10918: LD_INT 34
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: PPUSH
10930: CALL_OW 69
10934: IFFALSE 10946
10936: GO 10938
10938: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
10939: LD_STRING M1-weapons-out
10941: PPUSH
10942: CALL_OW 604
10946: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ f_inarea , baseOutsideBorderArea ] ) and IsOk ( Heike ) marked gameStartEvent do var i , j , x , y ;
10947: LD_EXP 14
10951: PPUSH
10952: LD_INT 95
10954: PUSH
10955: LD_INT 23
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 72
10966: PUSH
10967: LD_EXP 30
10971: PPUSH
10972: CALL_OW 302
10976: AND
10977: IFFALSE 11156
10979: GO 10981
10981: DISABLE
10982: LD_INT 0
10984: PPUSH
10985: PPUSH
10986: PPUSH
10987: PPUSH
// begin Say ( Heike , DH-End-1 ) ;
10988: LD_EXP 30
10992: PPUSH
10993: LD_STRING DH-End-1
10995: PPUSH
10996: CALL_OW 88
// if explosivePlantedList then
11000: LD_EXP 29
11004: IFFALSE 11141
// begin for i in explosivePlantedList do
11006: LD_ADDR_VAR 0 1
11010: PUSH
11011: LD_EXP 29
11015: PUSH
11016: FOR_IN
11017: IFFALSE 11120
// begin x := GetX ( i ) ;
11019: LD_ADDR_VAR 0 3
11023: PUSH
11024: LD_VAR 0 1
11028: PPUSH
11029: CALL_OW 250
11033: ST_TO_ADDR
// y := GetY ( i ) ;
11034: LD_ADDR_VAR 0 4
11038: PUSH
11039: LD_VAR 0 1
11043: PPUSH
11044: CALL_OW 251
11048: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
11049: LD_ADDR_VAR 0 2
11053: PUSH
11054: LD_INT 1
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: LD_INT 5
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: PUSH
11068: FOR_IN
11069: IFFALSE 11116
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
11071: LD_VAR 0 3
11075: PPUSH
11076: LD_VAR 0 2
11080: PPUSH
11081: LD_INT 2
11083: PPUSH
11084: CALL_OW 272
11088: PPUSH
11089: LD_VAR 0 4
11093: PPUSH
11094: LD_VAR 0 2
11098: PPUSH
11099: LD_INT 2
11101: PPUSH
11102: CALL_OW 273
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: CALL_OW 453
11114: GO 11068
11116: POP
11117: POP
// end ;
11118: GO 11016
11120: POP
11121: POP
// Say ( Heike , DH-End-2 ) ;
11122: LD_EXP 30
11126: PPUSH
11127: LD_STRING DH-End-2
11129: PPUSH
11130: CALL_OW 88
// wait ( 0 0$5 ) ;
11134: LD_INT 175
11136: PPUSH
11137: CALL_OW 67
// end ; if not isAlarm then
11141: LD_EXP 17
11145: NOT
11146: IFFALSE 11156
// isAlarm := true ;
11148: LD_ADDR_EXP 17
11152: PUSH
11153: LD_INT 1
11155: ST_TO_ADDR
// end ;
11156: PPOPN 4
11158: END
// function SayHEmpty ( ) ; begin
11159: LD_INT 0
11161: PPUSH
// case rand ( 1 , 3 ) of 1 :
11162: LD_INT 1
11164: PPUSH
11165: LD_INT 3
11167: PPUSH
11168: CALL_OW 12
11172: PUSH
11173: LD_INT 1
11175: DOUBLE
11176: EQUAL
11177: IFTRUE 11181
11179: GO 11196
11181: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
11182: LD_EXP 30
11186: PPUSH
11187: LD_STRING DH-Empty-1
11189: PPUSH
11190: CALL_OW 88
11194: GO 11243
11196: LD_INT 2
11198: DOUBLE
11199: EQUAL
11200: IFTRUE 11204
11202: GO 11219
11204: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
11205: LD_EXP 30
11209: PPUSH
11210: LD_STRING DH-Empty-2
11212: PPUSH
11213: CALL_OW 88
11217: GO 11243
11219: LD_INT 3
11221: DOUBLE
11222: EQUAL
11223: IFTRUE 11227
11225: GO 11242
11227: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
11228: LD_EXP 30
11232: PPUSH
11233: LD_STRING DH-Empty-3
11235: PPUSH
11236: CALL_OW 88
11240: GO 11243
11242: POP
// end ;
11243: LD_VAR 0 1
11247: RET
// function SayHVisited ( ) ; begin
11248: LD_INT 0
11250: PPUSH
// case rand ( 1 , 3 ) of 1 :
11251: LD_INT 1
11253: PPUSH
11254: LD_INT 3
11256: PPUSH
11257: CALL_OW 12
11261: PUSH
11262: LD_INT 1
11264: DOUBLE
11265: EQUAL
11266: IFTRUE 11270
11268: GO 11285
11270: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
11271: LD_EXP 30
11275: PPUSH
11276: LD_STRING DH-Visited-1
11278: PPUSH
11279: CALL_OW 88
11283: GO 11332
11285: LD_INT 2
11287: DOUBLE
11288: EQUAL
11289: IFTRUE 11293
11291: GO 11308
11293: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
11294: LD_EXP 30
11298: PPUSH
11299: LD_STRING DH-Visited-2
11301: PPUSH
11302: CALL_OW 88
11306: GO 11332
11308: LD_INT 3
11310: DOUBLE
11311: EQUAL
11312: IFTRUE 11316
11314: GO 11331
11316: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
11317: LD_EXP 30
11321: PPUSH
11322: LD_STRING DH-Visited-3
11324: PPUSH
11325: CALL_OW 88
11329: GO 11332
11331: POP
// end ;
11332: LD_VAR 0 1
11336: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and IsOk ( Heike ) and IsIdle ( Heike ) marked entranceEvent do var i ;
11337: LD_EXP 17
11341: NOT
11342: PUSH
11343: LD_EXP 15
11347: AND
11348: PUSH
11349: LD_EXP 30
11353: PPUSH
11354: CALL_OW 302
11358: AND
11359: PUSH
11360: LD_EXP 30
11364: PPUSH
11365: CALL_OW 316
11369: AND
11370: IFFALSE 11436
11372: GO 11374
11374: DISABLE
11375: LD_INT 0
11377: PPUSH
// begin enable ;
11378: ENABLE
// for i in entranceAllowedList do
11379: LD_ADDR_VAR 0 1
11383: PUSH
11384: LD_EXP 15
11388: PUSH
11389: FOR_IN
11390: IFFALSE 11434
// if InEntrance ( Heike , i ) then
11392: LD_EXP 30
11396: PPUSH
11397: LD_VAR 0 1
11401: PPUSH
11402: CALL 15111 0 2
11406: IFFALSE 11432
// begin disable ( entranceEvent ) ;
11408: LD_INT 1
11410: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
11411: LD_VAR 0 1
11415: PPUSH
11416: CALL 11439 0 1
// wait ( 0 0$3 ) ;
11420: LD_INT 105
11422: PPUSH
11423: CALL_OW 67
// enable ( entranceEvent ) ;
11427: LD_INT 1
11429: ENABLE_MARKED
// break ;
11430: GO 11434
// end ;
11432: GO 11389
11434: POP
11435: POP
// end ;
11436: PPOPN 1
11438: END
// function HeikeEnterBuilding ( building ) ; var tmp ; begin
11439: LD_INT 0
11441: PPUSH
11442: PPUSH
// if not building then
11443: LD_VAR 0 1
11447: NOT
11448: IFFALSE 11452
// exit ;
11450: GO 14002
// if building in entranceVisitedList then
11452: LD_VAR 0 1
11456: PUSH
11457: LD_EXP 16
11461: IN
11462: IFFALSE 11470
// begin SayHVisited ( ) ;
11464: CALL 11248 0 0
// exit ;
11468: GO 14002
// end ; case Query ( EnterBuilding ) of 1 :
11470: LD_STRING EnterBuilding
11472: PPUSH
11473: CALL_OW 97
11477: PUSH
11478: LD_INT 1
11480: DOUBLE
11481: EQUAL
11482: IFTRUE 11486
11484: GO 11489
11486: POP
// ; 2 :
11487: GO 11503
11489: LD_INT 2
11491: DOUBLE
11492: EQUAL
11493: IFTRUE 11497
11495: GO 11502
11497: POP
// exit ; end ;
11498: GO 14002
11500: GO 11503
11502: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
11503: LD_ADDR_EXP 16
11507: PUSH
11508: LD_EXP 16
11512: PPUSH
11513: LD_VAR 0 1
11517: PPUSH
11518: CALL 53894 0 2
11522: ST_TO_ADDR
// InGameOn ;
11523: CALL_OW 8
// SetSide ( Heike , 5 ) ;
11527: LD_EXP 30
11531: PPUSH
11532: LD_INT 5
11534: PPUSH
11535: CALL_OW 235
// SetSide ( building , 5 ) ;
11539: LD_VAR 0 1
11543: PPUSH
11544: LD_INT 5
11546: PPUSH
11547: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
11551: LD_EXP 30
11555: PPUSH
11556: LD_VAR 0 1
11560: PPUSH
11561: CALL_OW 120
// wait ( 0 0$3 ) ;
11565: LD_INT 105
11567: PPUSH
11568: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar , barExplosion ] ;
11572: LD_ADDR_VAR 0 3
11576: PUSH
11577: LD_INT 165
11579: PUSH
11580: LD_INT 106
11582: PUSH
11583: LD_INT 135
11585: PUSH
11586: LD_INT 162
11588: PUSH
11589: LD_INT 61
11591: PUSH
11592: LD_INT 109
11594: PUSH
11595: LD_INT 169
11597: PUSH
11598: LD_INT 13
11600: PUSH
11601: LD_INT 147
11603: PUSH
11604: LD_INT 137
11606: PUSH
11607: LD_INT 73
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: ST_TO_ADDR
// if not building in tmp then
11623: LD_VAR 0 1
11627: PUSH
11628: LD_VAR 0 3
11632: IN
11633: NOT
11634: IFFALSE 11642
// SayHEmpty ( ) else
11636: CALL 11159 0 0
11640: GO 13965
// case building of laundry :
11642: LD_VAR 0 1
11646: PUSH
11647: LD_INT 165
11649: DOUBLE
11650: EQUAL
11651: IFTRUE 11655
11653: GO 11743
11655: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
11656: LD_EXP 26
11660: PUSH
11661: LD_EXP 27
11665: NOT
11666: AND
11667: PUSH
11668: LD_EXP 28
11672: NOT
11673: AND
11674: IFFALSE 11729
// begin case Query ( HeikeInLaundry ) of 1 :
11676: LD_STRING HeikeInLaundry
11678: PPUSH
11679: CALL_OW 97
11683: PUSH
11684: LD_INT 1
11686: DOUBLE
11687: EQUAL
11688: IFTRUE 11692
11690: GO 11699
11692: POP
// SpawnHeikeAsRussian ; 2 :
11693: CALL 1403 0 0
11697: GO 11727
11699: LD_INT 2
11701: DOUBLE
11702: EQUAL
11703: IFTRUE 11707
11705: GO 11726
11707: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
11708: LD_ADDR_EXP 16
11712: PUSH
11713: LD_EXP 16
11717: PUSH
11718: LD_VAR 0 1
11722: DIFF
11723: ST_TO_ADDR
11724: GO 11727
11726: POP
// end else
11727: GO 11741
// Say ( Heike , DH-Locked ) ;
11729: LD_EXP 30
11733: PPUSH
11734: LD_STRING DH-Locked
11736: PPUSH
11737: CALL_OW 88
// end ; dougBar :
11741: GO 13965
11743: LD_INT 106
11745: DOUBLE
11746: EQUAL
11747: IFTRUE 11751
11749: GO 12103
11751: POP
// begin if contactWithAmerican and americanContact then
11752: LD_EXP 25
11756: PUSH
11757: LD_EXP 10
11761: AND
11762: IFFALSE 11826
// begin Say ( Heike , DH-Escort-a-1 ) ;
11764: LD_EXP 30
11768: PPUSH
11769: LD_STRING DH-Escort-a-1
11771: PPUSH
11772: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
11776: LD_EXP 44
11780: PPUSH
11781: LD_STRING DCa-Escort-a-2
11783: PPUSH
11784: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
11788: LD_EXP 44
11792: PPUSH
11793: LD_STRING DCa-Escort-a-3
11795: PPUSH
11796: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
11800: LD_EXP 30
11804: PPUSH
11805: LD_STRING DH-Escort-a-4
11807: PPUSH
11808: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
11812: LD_EXP 30
11816: PPUSH
11817: LD_STRING DH-Escort-a-5
11819: PPUSH
11820: CALL_OW 88
// end else
11824: GO 12060
// if contactWithAmerican then
11826: LD_EXP 25
11830: IFFALSE 11870
// begin Say ( Heike , DH-Escort-b-1 ) ;
11832: LD_EXP 30
11836: PPUSH
11837: LD_STRING DH-Escort-b-1
11839: PPUSH
11840: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
11844: LD_EXP 44
11848: PPUSH
11849: LD_STRING DCa-Escort-b-2
11851: PPUSH
11852: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
11856: LD_EXP 44
11860: PPUSH
11861: LD_STRING DCa-Escort-b-3
11863: PPUSH
11864: CALL_OW 88
// end else
11868: GO 12060
// begin Say ( Doug , DCa-Deal-a-1 ) ;
11870: LD_EXP 44
11874: PPUSH
11875: LD_STRING DCa-Deal-a-1
11877: PPUSH
11878: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
11882: LD_EXP 44
11886: PPUSH
11887: LD_STRING DCa-Deal-a-2
11889: PPUSH
11890: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
11894: LD_EXP 30
11898: PPUSH
11899: LD_STRING DH-Deal-a-3
11901: PPUSH
11902: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
11906: LD_EXP 44
11910: PPUSH
11911: LD_STRING DCa-Deal-a-4
11913: PPUSH
11914: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
11918: LD_EXP 30
11922: PPUSH
11923: LD_STRING DH-Deal-a-5
11925: PPUSH
11926: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
11930: LD_EXP 44
11934: PPUSH
11935: LD_STRING DCa-Deal-a-6
11937: PPUSH
11938: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
11942: LD_EXP 44
11946: PPUSH
11947: LD_STRING DCa-Deal-a-7
11949: PPUSH
11950: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
11954: LD_EXP 44
11958: PPUSH
11959: LD_STRING DCa-Deal-a-8
11961: PPUSH
11962: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
11966: LD_EXP 44
11970: PPUSH
11971: LD_STRING DCa-Deal-a-9
11973: PPUSH
11974: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
11978: LD_EXP 44
11982: PPUSH
11983: LD_STRING DCa-Deal-a-10
11985: PPUSH
11986: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
11990: LD_EXP 44
11994: PPUSH
11995: LD_STRING DCa-Deal-a-11
11997: PPUSH
11998: CALL_OW 88
// wait ( 0 0$0.3 ) ;
12002: LD_INT 10
12004: PPUSH
12005: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
12009: LD_EXP 44
12013: PPUSH
12014: LD_STRING DCa-Deal-a-12
12016: PPUSH
12017: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
12021: LD_EXP 30
12025: PPUSH
12026: LD_STRING DH-Deal-a-13
12028: PPUSH
12029: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
12033: LD_EXP 30
12037: PPUSH
12038: LD_STRING DH-Deal-a-14
12040: PPUSH
12041: CALL_OW 88
// contactWithAmerican := true ;
12045: LD_ADDR_EXP 25
12049: PUSH
12050: LD_INT 1
12052: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
12053: LD_STRING M1-american-out
12055: PPUSH
12056: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
12060: LD_EXP 44
12064: PPUSH
12065: LD_INT 2
12067: PPUSH
12068: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
12072: LD_ADDR_EXP 14
12076: PUSH
12077: LD_EXP 14
12081: PPUSH
12082: LD_EXP 44
12086: PPUSH
12087: CALL 53894 0 2
12091: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
12092: LD_EXP 44
12096: PPUSH
12097: CALL_OW 122
// end ; usLab :
12101: GO 13965
12103: LD_INT 135
12105: DOUBLE
12106: EQUAL
12107: IFTRUE 12111
12109: GO 12412
12111: POP
// begin if hasSniperRifle then
12112: LD_EXP 11
12116: IFFALSE 12410
// begin if IsOK ( Kaia ) and Kaia in heikeSquad then
12118: LD_EXP 35
12122: PPUSH
12123: CALL_OW 302
12127: PUSH
12128: LD_EXP 35
12132: PUSH
12133: LD_EXP 14
12137: IN
12138: AND
12139: IFFALSE 12384
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
12141: LD_EXP 30
12145: PPUSH
12146: LD_EXP 35
12150: PPUSH
12151: CALL_OW 296
12155: PUSH
12156: LD_INT 10
12158: GREATER
12159: IFFALSE 12184
// begin Query ( KaiaDistance ) ;
12161: LD_STRING KaiaDistance
12163: PPUSH
12164: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
12168: LD_ADDR_EXP 16
12172: PUSH
12173: LD_EXP 16
12177: PUSH
12178: LD_INT 135
12180: DIFF
12181: ST_TO_ADDR
// end else
12182: GO 12382
// begin SetSide ( Kaia , 5 ) ;
12184: LD_EXP 35
12188: PPUSH
12189: LD_INT 5
12191: PPUSH
12192: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
12196: LD_EXP 35
12200: PPUSH
12201: LD_INT 135
12203: PPUSH
12204: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12208: LD_INT 35
12210: PPUSH
12211: CALL_OW 67
// until IsInUnit ( Kaia ) ;
12215: LD_EXP 35
12219: PPUSH
12220: CALL_OW 310
12224: IFFALSE 12208
// Say ( Kaia , DK-Sniper-1 ) ;
12226: LD_EXP 35
12230: PPUSH
12231: LD_STRING DK-Sniper-1
12233: PPUSH
12234: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
12238: LD_EXP 35
12242: PPUSH
12243: CALL_OW 257
12247: PUSH
12248: LD_INT 34
12250: EQUAL
12251: PUSH
12252: LD_EXP 32
12256: PUSH
12257: LD_EXP 14
12261: IN
12262: AND
12263: PUSH
12264: LD_EXP 32
12268: PPUSH
12269: CALL_OW 302
12273: AND
12274: IFFALSE 12302
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
12276: LD_EXP 35
12280: PPUSH
12281: LD_STRING DK-Sniper-a-2
12283: PPUSH
12284: CALL_OW 88
// SetClass ( Mike , class_hunter ) ;
12288: LD_EXP 32
12292: PPUSH
12293: LD_INT 32
12295: PPUSH
12296: CALL_OW 336
// end else
12300: GO 12361
// begin Say ( Kaia , DK-Sniper-2 ) ;
12302: LD_EXP 35
12306: PPUSH
12307: LD_STRING DK-Sniper-2
12309: PPUSH
12310: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
12314: LD_EXP 35
12318: PPUSH
12319: LD_INT 32
12321: PPUSH
12322: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
12326: LD_EXP 37
12330: PPUSH
12331: CALL_OW 302
12335: PUSH
12336: LD_EXP 37
12340: PUSH
12341: LD_EXP 14
12345: IN
12346: AND
12347: IFFALSE 12361
// Say ( Markov , DMar-Sniper-3 ) ;
12349: LD_EXP 37
12353: PPUSH
12354: LD_STRING DMar-Sniper-3
12356: PPUSH
12357: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
12361: LD_EXP 35
12365: PPUSH
12366: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
12370: LD_EXP 35
12374: PPUSH
12375: LD_INT 2
12377: PPUSH
12378: CALL_OW 235
// end ; end else
12382: GO 12410
// begin Say ( Heike , DH-Locked ) ;
12384: LD_EXP 30
12388: PPUSH
12389: LD_STRING DH-Locked
12391: PPUSH
12392: CALL_OW 88
// entranceVisitedList := entranceVisitedList diff usLab ;
12396: LD_ADDR_EXP 16
12400: PUSH
12401: LD_EXP 16
12405: PUSH
12406: LD_INT 135
12408: DIFF
12409: ST_TO_ADDR
// end ; end ; end ; drugsLab :
12410: GO 13965
12412: LD_INT 162
12414: DOUBLE
12415: EQUAL
12416: IFTRUE 12420
12418: GO 12553
12420: POP
// begin if hasStimDrugs then
12421: LD_EXP 9
12425: IFFALSE 12539
// begin wait ( 0 0$1 ) ;
12427: LD_INT 35
12429: PPUSH
12430: CALL_OW 67
// if not hasStimDrugsCollected then
12434: LD_EXP 24
12438: NOT
12439: IFFALSE 12481
// begin Say ( Heike , DH-Lab-1 ) ;
12441: LD_EXP 30
12445: PPUSH
12446: LD_STRING DH-Lab-1
12448: PPUSH
12449: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
12453: LD_INT 5
12455: PPUSH
12456: LD_INT 2
12458: PPUSH
12459: LD_INT 2
12461: PPUSH
12462: CALL_OW 322
// hasStimDrugsCollected := true ;
12466: LD_ADDR_EXP 24
12470: PUSH
12471: LD_INT 1
12473: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
12474: LD_STRING M1-drugs-out
12476: PPUSH
12477: CALL_OW 604
// end ; if not hasExplosionCollected then
12481: LD_EXP 23
12485: NOT
12486: IFFALSE 12504
// entranceVisitedList := entranceVisitedList diff drugsLab else
12488: LD_ADDR_EXP 16
12492: PUSH
12493: LD_EXP 16
12497: PUSH
12498: LD_INT 162
12500: DIFF
12501: ST_TO_ADDR
12502: GO 12537
// begin wait ( 0 0$3 ) ;
12504: LD_INT 105
12506: PPUSH
12507: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
12511: LD_EXP 30
12515: PPUSH
12516: LD_STRING DH-Lab-2
12518: PPUSH
12519: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
12523: LD_STRING M1-drugsLab-out
12525: PPUSH
12526: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
12530: LD_INT 162
12532: PPUSH
12533: CALL 15378 0 1
// end ; end else
12537: GO 12551
// Say ( Heike , DH-Locked ) ;
12539: LD_EXP 30
12543: PPUSH
12544: LD_STRING DH-Locked
12546: PPUSH
12547: CALL_OW 88
// end ; ruFac :
12551: GO 13965
12553: LD_INT 61
12555: DOUBLE
12556: EQUAL
12557: IFTRUE 12561
12559: GO 12671
12561: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
12562: LD_EXP 37
12566: PPUSH
12567: CALL_OW 302
12571: PUSH
12572: LD_EXP 37
12576: PUSH
12577: LD_EXP 14
12581: IN
12582: NOT
12583: AND
12584: IFFALSE 12665
// begin Say ( Heike , DH-Krastyo-1 ) ;
12586: LD_EXP 30
12590: PPUSH
12591: LD_STRING DH-Krastyo-1
12593: PPUSH
12594: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
12598: LD_EXP 37
12602: PPUSH
12603: LD_STRING DMar-Krastyo-2
12605: PPUSH
12606: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
12610: LD_EXP 37
12614: PPUSH
12615: LD_STRING DMar-Krastyo-3
12617: PPUSH
12618: CALL_OW 88
// SetSide ( Markov , 2 ) ;
12622: LD_EXP 37
12626: PPUSH
12627: LD_INT 2
12629: PPUSH
12630: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
12634: LD_ADDR_EXP 14
12638: PUSH
12639: LD_EXP 14
12643: PPUSH
12644: LD_EXP 37
12648: PPUSH
12649: CALL 53894 0 2
12653: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
12654: LD_EXP 37
12658: PPUSH
12659: CALL_OW 122
// end else
12663: GO 12669
// SayHEmpty ( ) ;
12665: CALL 11159 0 0
// end ; ruBarKam :
12669: GO 13965
12671: LD_INT 109
12673: DOUBLE
12674: EQUAL
12675: IFTRUE 12679
12677: GO 12826
12679: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
12680: LD_EXP 34
12684: PPUSH
12685: CALL_OW 302
12689: PUSH
12690: LD_EXP 34
12694: PUSH
12695: LD_EXP 14
12699: IN
12700: NOT
12701: AND
12702: IFFALSE 12820
// begin Say ( Heike , DH-Kamil-1 ) ;
12704: LD_EXP 30
12708: PPUSH
12709: LD_STRING DH-Kamil-1
12711: PPUSH
12712: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
12716: LD_EXP 34
12720: PPUSH
12721: LD_STRING DKam-Kamil-2
12723: PPUSH
12724: CALL_OW 88
// if IsOk ( Sophia ) then
12728: LD_EXP 36
12732: PPUSH
12733: CALL_OW 302
12737: IFFALSE 12777
// if Sophia in heikeSquad then
12739: LD_EXP 36
12743: PUSH
12744: LD_EXP 14
12748: IN
12749: IFFALSE 12765
// Say ( Kamil , DKam-Kamil-a-3 ) else
12751: LD_EXP 34
12755: PPUSH
12756: LD_STRING DKam-Kamil-a-3
12758: PPUSH
12759: CALL_OW 88
12763: GO 12777
// Say ( Kamil , DKam-Kamil-3 ) ;
12765: LD_EXP 34
12769: PPUSH
12770: LD_STRING DKam-Kamil-3
12772: PPUSH
12773: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
12777: LD_EXP 34
12781: PPUSH
12782: LD_INT 2
12784: PPUSH
12785: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
12789: LD_ADDR_EXP 14
12793: PUSH
12794: LD_EXP 14
12798: PPUSH
12799: LD_EXP 34
12803: PPUSH
12804: CALL 53894 0 2
12808: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
12809: LD_EXP 34
12813: PPUSH
12814: CALL_OW 122
// end else
12818: GO 12824
// SayHEmpty ( ) ;
12820: CALL 11159 0 0
// end ; ruOutpost1 :
12824: GO 13965
12826: LD_INT 169
12828: DOUBLE
12829: EQUAL
12830: IFTRUE 12834
12832: GO 13176
12834: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
12835: LD_EXP 39
12839: PPUSH
12840: CALL_OW 302
12844: PUSH
12845: LD_EXP 39
12849: PUSH
12850: LD_EXP 14
12854: IN
12855: NOT
12856: AND
12857: IFFALSE 13170
// begin if hasMethanol then
12859: LD_EXP 13
12863: IFFALSE 13099
// begin Say ( Heike , DH-Kurt-1 ) ;
12865: LD_EXP 30
12869: PPUSH
12870: LD_STRING DH-Kurt-1
12872: PPUSH
12873: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
12877: LD_EXP 39
12881: PPUSH
12882: LD_STRING DKs-Kurt-2
12884: PPUSH
12885: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
12889: LD_EXP 31
12893: PPUSH
12894: LD_INT 169
12896: PPUSH
12897: CALL_OW 296
12901: PUSH
12902: LD_INT 10
12904: LESS
12905: PUSH
12906: LD_EXP 31
12910: PUSH
12911: LD_EXP 14
12915: IN
12916: AND
12917: IFFALSE 12994
// begin ComMoveXY ( Givi , 100 , 37 ) ;
12919: LD_EXP 31
12923: PPUSH
12924: LD_INT 100
12926: PPUSH
12927: LD_INT 37
12929: PPUSH
12930: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
12934: LD_EXP 31
12938: PPUSH
12939: LD_INT 169
12941: PPUSH
12942: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12946: LD_INT 35
12948: PPUSH
12949: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
12953: LD_EXP 31
12957: PPUSH
12958: LD_INT 169
12960: PPUSH
12961: CALL_OW 296
12965: PUSH
12966: LD_INT 7
12968: LESS
12969: IFFALSE 12946
// Say ( Givi , DG-Kurt-3 ) ;
12971: LD_EXP 31
12975: PPUSH
12976: LD_STRING DG-Kurt-3
12978: PPUSH
12979: CALL_OW 88
// ComStop ( Givi ) ;
12983: LD_EXP 31
12987: PPUSH
12988: CALL_OW 141
// end else
12992: GO 13097
// if GetDistUnits ( Olaf , ruOutpost1 ) < 10 and Olaf in heikeSquad then
12994: LD_EXP 38
12998: PPUSH
12999: LD_INT 169
13001: PPUSH
13002: CALL_OW 296
13006: PUSH
13007: LD_INT 10
13009: LESS
13010: PUSH
13011: LD_EXP 38
13015: PUSH
13016: LD_EXP 14
13020: IN
13021: AND
13022: IFFALSE 13097
// begin ComMoveXY ( Olaf , 100 , 37 ) ;
13024: LD_EXP 38
13028: PPUSH
13029: LD_INT 100
13031: PPUSH
13032: LD_INT 37
13034: PPUSH
13035: CALL_OW 111
// AddComTurnUnit ( Olaf , ruOutpost1 ) ;
13039: LD_EXP 38
13043: PPUSH
13044: LD_INT 169
13046: PPUSH
13047: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
13051: LD_INT 35
13053: PPUSH
13054: CALL_OW 67
// until GetDistUnits ( Olaf , ruOutpost1 ) < 7 ;
13058: LD_EXP 38
13062: PPUSH
13063: LD_INT 169
13065: PPUSH
13066: CALL_OW 296
13070: PUSH
13071: LD_INT 7
13073: LESS
13074: IFFALSE 13051
// Say ( Olaf , DO-Kurt-a-3 ) ;
13076: LD_EXP 38
13080: PPUSH
13081: LD_STRING DO-Kurt-a-3
13083: PPUSH
13084: CALL_OW 88
// ComStop ( Olaf ) ;
13088: LD_EXP 38
13092: PPUSH
13093: CALL_OW 141
// end ; end else
13097: GO 13127
// begin Say ( Heike , DH-Kurt-1 ) ;
13099: LD_EXP 30
13103: PPUSH
13104: LD_STRING DH-Kurt-1
13106: PPUSH
13107: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
13111: LD_EXP 39
13115: PPUSH
13116: LD_STRING DKs-Kurt-2
13118: PPUSH
13119: CALL_OW 88
// SpawnAdditionalRuGuards ;
13123: CALL 2735 0 0
// end ; SetSide ( Kurt , 2 ) ;
13127: LD_EXP 39
13131: PPUSH
13132: LD_INT 2
13134: PPUSH
13135: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
13139: LD_ADDR_EXP 14
13143: PUSH
13144: LD_EXP 14
13148: PPUSH
13149: LD_EXP 39
13153: PPUSH
13154: CALL 53894 0 2
13158: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
13159: LD_EXP 39
13163: PPUSH
13164: CALL_OW 122
// end else
13168: GO 13174
// SayHEmpty ( ) ;
13170: CALL 11159 0 0
// end ; ruOutpostBar :
13174: GO 13965
13176: LD_INT 13
13178: DOUBLE
13179: EQUAL
13180: IFTRUE 13184
13182: GO 13230
13184: POP
// begin if not hasGuardPatrolPlan then
13185: LD_EXP 18
13189: NOT
13190: IFFALSE 13224
// begin Say ( Heike , DH-PatrolPlan ) ;
13192: LD_EXP 30
13196: PPUSH
13197: LD_STRING DH-PatrolPlan
13199: PPUSH
13200: CALL_OW 88
// hasGuardPatrolPlan := true ;
13204: LD_ADDR_EXP 18
13208: PUSH
13209: LD_INT 1
13211: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
13212: LD_INT 6
13214: PPUSH
13215: LD_INT 2
13217: PPUSH
13218: CALL_OW 343
// end else
13222: GO 13228
// SayHEmpty ( ) ;
13224: CALL 11159 0 0
// end ; ruKaiaBar :
13228: GO 13965
13230: LD_INT 147
13232: DOUBLE
13233: EQUAL
13234: IFTRUE 13238
13236: GO 13385
13238: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
13239: LD_EXP 35
13243: PPUSH
13244: CALL_OW 302
13248: PUSH
13249: LD_EXP 35
13253: PUSH
13254: LD_EXP 14
13258: IN
13259: NOT
13260: AND
13261: IFFALSE 13383
// begin Say ( Heike , DH-Kaia-1 ) ;
13263: LD_EXP 30
13267: PPUSH
13268: LD_STRING DH-Kaia-1
13270: PPUSH
13271: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
13275: LD_EXP 35
13279: PPUSH
13280: LD_STRING DK-Kaia-2
13282: PPUSH
13283: CALL_OW 88
// if hasSniperRifle then
13287: LD_EXP 11
13291: IFFALSE 13342
// begin if IsOk ( Markov ) then
13293: LD_EXP 37
13297: PPUSH
13298: CALL_OW 302
13302: IFFALSE 13318
// Say ( Kaia , DK-Kaia-3 ) else
13304: LD_EXP 35
13308: PPUSH
13309: LD_STRING DK-Kaia-3
13311: PPUSH
13312: CALL_OW 88
13316: GO 13330
// Say ( Kaia , DK-Kaia-a-3 ) ;
13318: LD_EXP 35
13322: PPUSH
13323: LD_STRING DK-Kaia-a-3
13325: PPUSH
13326: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
13330: LD_EXP 30
13334: PPUSH
13335: LD_STRING DH-Kaia-4
13337: PPUSH
13338: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
13342: LD_EXP 35
13346: PPUSH
13347: LD_INT 2
13349: PPUSH
13350: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
13354: LD_ADDR_EXP 14
13358: PUSH
13359: LD_EXP 14
13363: PPUSH
13364: LD_EXP 35
13368: PPUSH
13369: CALL 53894 0 2
13373: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
13374: LD_EXP 35
13378: PPUSH
13379: CALL_OW 122
// end ; end ; ruWeaponsBar :
13383: GO 13965
13385: LD_INT 137
13387: DOUBLE
13388: EQUAL
13389: IFTRUE 13393
13391: GO 13964
13393: POP
// begin if hasWeapons then
13394: LD_EXP 19
13398: IFFALSE 13950
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
13400: LD_ADDR_EXP 16
13404: PUSH
13405: LD_EXP 16
13409: PUSH
13410: LD_INT 137
13412: DIFF
13413: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
13414: LD_ADDR_VAR 0 3
13418: PUSH
13419: LD_EXP 14
13423: PPUSH
13424: LD_INT 91
13426: PUSH
13427: LD_EXP 30
13431: PUSH
13432: LD_INT 8
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PPUSH
13440: CALL_OW 72
13444: ST_TO_ADDR
// if not heikeSquad or not tmp then
13445: LD_EXP 14
13449: NOT
13450: PUSH
13451: LD_VAR 0 3
13455: NOT
13456: OR
13457: IFFALSE 13473
// Say ( Heike , DH-Weapons-Alone ) else
13459: LD_EXP 30
13463: PPUSH
13464: LD_STRING DH-Weapons-Alone
13466: PPUSH
13467: CALL_OW 88
13471: GO 13948
// begin entranceVisitedList := Join ( entranceVisitedList , ruWeaponsBar ) ;
13473: LD_ADDR_EXP 16
13477: PUSH
13478: LD_EXP 16
13482: PPUSH
13483: LD_INT 137
13485: PPUSH
13486: CALL 53894 0 2
13490: ST_TO_ADDR
// Say ( Heike , DH-Weapons-1 ) ;
13491: LD_EXP 30
13495: PPUSH
13496: LD_STRING DH-Weapons-1
13498: PPUSH
13499: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
13503: LD_EXP 30
13507: PPUSH
13508: LD_STRING DH-Weapons-2
13510: PPUSH
13511: CALL_OW 88
// if hasRevolver and Kaia in tmp then
13515: LD_EXP 8
13519: PUSH
13520: LD_EXP 35
13524: PUSH
13525: LD_VAR 0 3
13529: IN
13530: AND
13531: IFFALSE 13620
// begin SetSide ( Kaia , 5 ) ;
13533: LD_EXP 35
13537: PPUSH
13538: LD_INT 5
13540: PPUSH
13541: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
13545: LD_EXP 35
13549: PPUSH
13550: LD_INT 137
13552: PPUSH
13553: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13557: LD_INT 35
13559: PPUSH
13560: CALL_OW 67
// until IsInUnit ( Kaia ) ;
13564: LD_EXP 35
13568: PPUSH
13569: CALL_OW 310
13573: IFFALSE 13557
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
13575: LD_EXP 30
13579: PPUSH
13580: LD_STRING DH-Kaia-Revolver-2
13582: PPUSH
13583: CALL_OW 88
// SetClassKaiaRevolver ;
13587: CALL 1372 0 0
// hasRevolver := false ;
13591: LD_ADDR_EXP 8
13595: PUSH
13596: LD_INT 0
13598: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
13599: LD_EXP 35
13603: PPUSH
13604: LD_INT 2
13606: PPUSH
13607: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
13611: LD_EXP 35
13615: PPUSH
13616: CALL_OW 122
// end ; if Givi in tmp then
13620: LD_EXP 31
13624: PUSH
13625: LD_VAR 0 3
13629: IN
13630: IFFALSE 13771
// begin SetSide ( Givi , 5 ) ;
13632: LD_EXP 31
13636: PPUSH
13637: LD_INT 5
13639: PPUSH
13640: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
13644: LD_EXP 31
13648: PPUSH
13649: LD_INT 137
13651: PPUSH
13652: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13656: LD_INT 35
13658: PPUSH
13659: CALL_OW 67
// until IsInUnit ( Givi ) ;
13663: LD_EXP 31
13667: PPUSH
13668: CALL_OW 310
13672: IFFALSE 13656
// Say ( Givi , DG-Weapons-3 ) ;
13674: LD_EXP 31
13678: PPUSH
13679: LD_STRING DG-Weapons-3
13681: PPUSH
13682: CALL_OW 88
// Say ( Givi , DH-Weapons-4 ) ;
13686: LD_EXP 31
13690: PPUSH
13691: LD_STRING DH-Weapons-4
13693: PPUSH
13694: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
13698: LD_EXP 31
13702: PPUSH
13703: LD_STRING DG-Weapons-5
13705: PPUSH
13706: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
13710: LD_EXP 31
13714: PPUSH
13715: LD_INT 11
13717: PPUSH
13718: CALL_OW 336
// ComExitBuilding ( Givi ) ;
13722: LD_EXP 31
13726: PPUSH
13727: CALL_OW 122
// SetSide ( Givi , 2 ) ;
13731: LD_EXP 31
13735: PPUSH
13736: LD_INT 2
13738: PPUSH
13739: CALL_OW 235
// if hasRevolver then
13743: LD_EXP 8
13747: IFFALSE 13769
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
13749: LD_EXP 30
13753: PPUSH
13754: LD_STRING DH-Kaia-Revolver-1
13756: PPUSH
13757: CALL_OW 88
// heikeHasRevolver := true ;
13761: LD_ADDR_EXP 20
13765: PUSH
13766: LD_INT 1
13768: ST_TO_ADDR
// end ; end else
13769: GO 13948
// if Kamil in tmp then
13771: LD_EXP 34
13775: PUSH
13776: LD_VAR 0 3
13780: IN
13781: IFFALSE 13910
// begin SetSide ( Kamil , 5 ) ;
13783: LD_EXP 34
13787: PPUSH
13788: LD_INT 5
13790: PPUSH
13791: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
13795: LD_EXP 34
13799: PPUSH
13800: LD_INT 137
13802: PPUSH
13803: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13807: LD_INT 35
13809: PPUSH
13810: CALL_OW 67
// until IsInUnit ( Kamil ) ;
13814: LD_EXP 34
13818: PPUSH
13819: CALL_OW 310
13823: IFFALSE 13807
// Say ( Kamil , DKam-Weapons-a-3 ) ;
13825: LD_EXP 34
13829: PPUSH
13830: LD_STRING DKam-Weapons-a-3
13832: PPUSH
13833: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
13837: LD_EXP 30
13841: PPUSH
13842: LD_STRING DH-Weapons-a-4
13844: PPUSH
13845: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
13849: LD_EXP 34
13853: PPUSH
13854: LD_INT 11
13856: PPUSH
13857: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
13861: LD_EXP 34
13865: PPUSH
13866: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
13870: LD_EXP 34
13874: PPUSH
13875: LD_INT 2
13877: PPUSH
13878: CALL_OW 235
// if hasRevolver then
13882: LD_EXP 8
13886: IFFALSE 13908
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
13888: LD_EXP 30
13892: PPUSH
13893: LD_STRING DH-Kaia-Revolver-1
13895: PPUSH
13896: CALL_OW 88
// heikeHasRevolver := true ;
13900: LD_ADDR_EXP 20
13904: PUSH
13905: LD_INT 1
13907: ST_TO_ADDR
// end ; end else
13908: GO 13948
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
13910: LD_EXP 30
13914: PPUSH
13915: LD_STRING DH-Weapons-Alone-2
13917: PPUSH
13918: CALL_OW 88
// if hasRevolver then
13922: LD_EXP 8
13926: IFFALSE 13948
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
13928: LD_EXP 30
13932: PPUSH
13933: LD_STRING DH-Kaia-Revolver-1a
13935: PPUSH
13936: CALL_OW 88
// heikeHasRevolver := true ;
13940: LD_ADDR_EXP 20
13944: PUSH
13945: LD_INT 1
13947: ST_TO_ADDR
// end ; end ; end ; end else
13948: GO 13962
// Say ( Heike , DH-Locked ) ;
13950: LD_EXP 30
13954: PPUSH
13955: LD_STRING DH-Locked
13957: PPUSH
13958: CALL_OW 88
// end ; end ;
13962: GO 13965
13964: POP
// ComExitBuilding ( Heike ) ;
13965: LD_EXP 30
13969: PPUSH
13970: CALL_OW 122
// SetSide ( Heike , 2 ) ;
13974: LD_EXP 30
13978: PPUSH
13979: LD_INT 2
13981: PPUSH
13982: CALL_OW 235
// SetSide ( building , 3 ) ;
13986: LD_VAR 0 1
13990: PPUSH
13991: LD_INT 3
13993: PPUSH
13994: CALL_OW 235
// InGameOff ;
13998: CALL_OW 9
// end ;
14002: LD_VAR 0 2
14006: RET
// export function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
14007: LD_INT 0
14009: PPUSH
14010: PPUSH
14011: PPUSH
// if UnitFilter ( units , [ f_nation , nation_russian ] ) then
14012: LD_VAR 0 2
14016: PPUSH
14017: LD_INT 23
14019: PUSH
14020: LD_INT 3
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PPUSH
14027: CALL_OW 72
14031: IFFALSE 14035
// exit ;
14033: GO 14571
// DialogueOn ;
14035: CALL_OW 6
// CenterNowOnUnits ( guard ) ;
14039: LD_VAR 0 1
14043: PPUSH
14044: CALL_OW 87
// if not Heike in units then
14048: LD_EXP 30
14052: PUSH
14053: LD_VAR 0 2
14057: IN
14058: NOT
14059: IFFALSE 14190
// begin case GetSex ( guard ) of sex_male :
14061: LD_VAR 0 1
14065: PPUSH
14066: CALL_OW 258
14070: PUSH
14071: LD_INT 1
14073: DOUBLE
14074: EQUAL
14075: IFTRUE 14079
14077: GO 14094
14079: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
14080: LD_VAR 0 1
14084: PPUSH
14085: LD_STRING DRum-Guard-1
14087: PPUSH
14088: CALL_OW 88
14092: GO 14118
14094: LD_INT 2
14096: DOUBLE
14097: EQUAL
14098: IFTRUE 14102
14100: GO 14117
14102: POP
// Say ( guard , DRuf-guard-1 ) ; end ;
14103: LD_VAR 0 1
14107: PPUSH
14108: LD_STRING DRuf-guard-1
14110: PPUSH
14111: CALL_OW 88
14115: GO 14118
14117: POP
// Query ( CaughtSquadInfo ) ;
14118: LD_STRING CaughtSquadInfo
14120: PPUSH
14121: CALL_OW 97
// for i in units do
14125: LD_ADDR_VAR 0 4
14129: PUSH
14130: LD_VAR 0 2
14134: PUSH
14135: FOR_IN
14136: IFFALSE 14167
// begin SetSide ( i , 5 ) ;
14138: LD_VAR 0 4
14142: PPUSH
14143: LD_INT 5
14145: PPUSH
14146: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
14150: LD_VAR 0 4
14154: PPUSH
14155: LD_INT 113
14157: PPUSH
14158: LD_INT 17
14160: PPUSH
14161: CALL_OW 111
// end ;
14165: GO 14135
14167: POP
14168: POP
// ComMoveXY ( guard , 113 , 17 ) ;
14169: LD_VAR 0 1
14173: PPUSH
14174: LD_INT 113
14176: PPUSH
14177: LD_INT 17
14179: PPUSH
14180: CALL_OW 111
// DialogueOff ;
14184: CALL_OW 7
// exit ;
14188: GO 14571
// end ; case GetSex ( guard ) of sex_male :
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 258
14199: PUSH
14200: LD_INT 1
14202: DOUBLE
14203: EQUAL
14204: IFTRUE 14208
14206: GO 14223
14208: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
14209: LD_VAR 0 1
14213: PPUSH
14214: LD_STRING DRum-Seen-1
14216: PPUSH
14217: CALL_OW 88
14221: GO 14247
14223: LD_INT 2
14225: DOUBLE
14226: EQUAL
14227: IFTRUE 14231
14229: GO 14246
14231: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
14232: LD_VAR 0 1
14236: PPUSH
14237: LD_STRING DRuf-Seen-1
14239: PPUSH
14240: CALL_OW 88
14244: GO 14247
14246: POP
// alone := ( units = 1 ) ;
14247: LD_ADDR_VAR 0 5
14251: PUSH
14252: LD_VAR 0 2
14256: PUSH
14257: LD_INT 1
14259: EQUAL
14260: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
14261: LD_STRING SurrenderInfo
14263: PPUSH
14264: CALL_OW 97
14268: PUSH
14269: LD_INT 1
14271: DOUBLE
14272: EQUAL
14273: IFTRUE 14277
14275: GO 14419
14277: POP
// begin if alone then
14278: LD_VAR 0 5
14282: IFFALSE 14293
// Query ( CaughtInfoAlone ) else
14284: LD_STRING CaughtInfoAlone
14286: PPUSH
14287: CALL_OW 97
14291: GO 14300
// Query ( CaughtInfo ) ;
14293: LD_STRING CaughtInfo
14295: PPUSH
14296: CALL_OW 97
// CenterNowOnUnits ( ruOutpost2 ) ;
14300: LD_INT 23
14302: PPUSH
14303: CALL_OW 87
// RemoveUnit ( Heike ) ;
14307: LD_EXP 30
14311: PPUSH
14312: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
14316: LD_EXP 30
14320: PPUSH
14321: LD_INT 23
14323: PPUSH
14324: CALL_OW 52
// if not alone then
14328: LD_VAR 0 5
14332: NOT
14333: IFFALSE 14388
// for i in units diff Heike do
14335: LD_ADDR_VAR 0 4
14339: PUSH
14340: LD_VAR 0 2
14344: PUSH
14345: LD_EXP 30
14349: DIFF
14350: PUSH
14351: FOR_IN
14352: IFFALSE 14386
// begin RemoveUnit ( i ) ;
14354: LD_VAR 0 4
14358: PPUSH
14359: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
14363: LD_VAR 0 4
14367: PPUSH
14368: LD_INT 114
14370: PPUSH
14371: LD_INT 17
14373: PPUSH
14374: LD_INT 10
14376: PPUSH
14377: LD_INT 0
14379: PPUSH
14380: CALL_OW 50
// end ;
14384: GO 14351
14386: POP
14387: POP
// StartLockerMinigame ;
14388: CALL 15479 0 0
// Say ( Heike , DH-Reset ) ;
14392: LD_EXP 30
14396: PPUSH
14397: LD_STRING DH-Reset
14399: PPUSH
14400: CALL_OW 88
// DialogueOff ;
14404: CALL_OW 7
// ComExitBuilding ( Heike ) ;
14408: LD_EXP 30
14412: PPUSH
14413: CALL_OW 122
// end ; 2 :
14417: GO 14571
14419: LD_INT 2
14421: DOUBLE
14422: EQUAL
14423: IFTRUE 14427
14425: GO 14570
14427: POP
// begin Say ( Heike , DH-Guard-2 ) ;
14428: LD_EXP 30
14432: PPUSH
14433: LD_STRING DH-Guard-2
14435: PPUSH
14436: CALL_OW 88
// DialogueOff ;
14440: CALL_OW 7
// wait ( 0 0$2 ) ;
14444: LD_INT 70
14446: PPUSH
14447: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
14451: LD_INT 6
14453: PPUSH
14454: LD_INT 2
14456: PPUSH
14457: LD_INT 2
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 80
// case GetSex ( guard ) of sex_male :
14467: LD_VAR 0 1
14471: PPUSH
14472: CALL_OW 258
14476: PUSH
14477: LD_INT 1
14479: DOUBLE
14480: EQUAL
14481: IFTRUE 14485
14483: GO 14500
14485: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
14486: LD_VAR 0 1
14490: PPUSH
14491: LD_STRING DRum-Fail-3
14493: PPUSH
14494: CALL_OW 88
14498: GO 14524
14500: LD_INT 2
14502: DOUBLE
14503: EQUAL
14504: IFTRUE 14508
14506: GO 14523
14508: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
14509: LD_VAR 0 1
14513: PPUSH
14514: LD_STRING DRum-Fail-3
14516: PPUSH
14517: CALL_OW 88
14521: GO 14524
14523: POP
// wait ( 0 0$5 ) ;
14524: LD_INT 175
14526: PPUSH
14527: CALL_OW 67
// if IsOk ( guard ) then
14531: LD_VAR 0 1
14535: PPUSH
14536: CALL_OW 302
14540: IFFALSE 14552
// isAlarm := true else
14542: LD_ADDR_EXP 17
14546: PUSH
14547: LD_INT 1
14549: ST_TO_ADDR
14550: GO 14568
// SetAttitude ( 6 , 2 , att_neutral , true ) ;
14552: LD_INT 6
14554: PPUSH
14555: LD_INT 2
14557: PPUSH
14558: LD_INT 0
14560: PPUSH
14561: LD_INT 1
14563: PPUSH
14564: CALL_OW 80
// end ; end ;
14568: GO 14571
14570: POP
// end ;
14571: LD_VAR 0 3
14575: RET
// every 0 0$3 trigger UnitFilter ( heikeSecondSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] ] ) and not UnitFilter ( ruPatrol , [ f_see , 5 ] ) marked gameStartEvent do var i ;
14576: LD_EXP 41
14580: PPUSH
14581: LD_INT 22
14583: PUSH
14584: LD_INT 5
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: LD_INT 91
14593: PUSH
14594: LD_EXP 30
14598: PUSH
14599: LD_INT 6
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PPUSH
14611: CALL_OW 72
14615: PUSH
14616: LD_EXP 50
14620: PPUSH
14621: LD_INT 101
14623: PUSH
14624: LD_INT 5
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PPUSH
14631: CALL_OW 72
14635: NOT
14636: AND
14637: IFFALSE 14742
14639: GO 14641
14641: DISABLE
14642: LD_INT 0
14644: PPUSH
// begin enable ;
14645: ENABLE
// DialogueOn ;
14646: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
14650: LD_EXP 30
14654: PPUSH
14655: LD_STRING DH-Join-
14657: PUSH
14658: LD_INT 1
14660: PPUSH
14661: LD_INT 3
14663: PPUSH
14664: CALL_OW 12
14668: STR
14669: PPUSH
14670: CALL_OW 88
// for i in UnitFilter ( heikeSecondSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
14674: LD_ADDR_VAR 0 1
14678: PUSH
14679: LD_EXP 41
14683: PPUSH
14684: LD_INT 22
14686: PUSH
14687: LD_INT 5
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 91
14696: PUSH
14697: LD_EXP 30
14701: PUSH
14702: LD_INT 10
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PPUSH
14714: CALL_OW 72
14718: PUSH
14719: FOR_IN
14720: IFFALSE 14736
// SetSide ( i , 2 ) ;
14722: LD_VAR 0 1
14726: PPUSH
14727: LD_INT 2
14729: PPUSH
14730: CALL_OW 235
14734: GO 14719
14736: POP
14737: POP
// DialogueOff ;
14738: CALL_OW 7
// end ;
14742: PPOPN 1
14744: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do
14745: LD_EXP 14
14749: PPUSH
14750: LD_INT 22
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PPUSH
14760: CALL_OW 72
14764: PUSH
14765: LD_INT 3
14767: GREATER
14768: PUSH
14769: LD_EXP 17
14773: NOT
14774: AND
14775: IFFALSE 14798
14777: GO 14779
14779: DISABLE
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
14780: LD_EXP 49
14784: PPUSH
14785: LD_INT 155
14787: PPUSH
14788: LD_INT 68
14790: PPUSH
14791: LD_INT 0
14793: PPUSH
14794: CALL_OW 48
// end ; end_of_file
14798: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
14799: LD_VAR 0 1
14803: PUSH
14804: LD_INT 3
14806: DOUBLE
14807: EQUAL
14808: IFTRUE 14812
14810: GO 14842
14812: POP
// begin repeat wait ( 0 0$1 ) ;
14813: LD_INT 35
14815: PPUSH
14816: CALL_OW 67
// CenterOnUnits ( Heike ) ;
14820: LD_EXP 30
14824: PPUSH
14825: CALL_OW 85
// until IsDying ( Heike ) ;
14829: LD_EXP 30
14833: PPUSH
14834: CALL_OW 303
14838: IFFALSE 14813
// end ; end ;
14840: GO 14843
14842: POP
// end ;
14843: PPOPN 1
14845: END
// on SaiLEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
14846: LD_OWVAR 59
14850: IFFALSE 14854
// exit ;
14852: GO 14928
// if showPlaceEvent then
14854: LD_INT 4
14856: IFFALSE 14928
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
14858: LD_VAR 0 2
14862: PPUSH
14863: LD_VAR 0 3
14867: PPUSH
14868: LD_INT 2
14870: PPUSH
14871: LD_INT 6
14873: NEG
14874: PPUSH
14875: CALL_OW 330
// CenterOnXY ( x , y ) ;
14879: LD_VAR 0 2
14883: PPUSH
14884: LD_VAR 0 3
14888: PPUSH
14889: CALL_OW 84
// wait ( time ) ;
14893: LD_VAR 0 4
14897: PPUSH
14898: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
14902: LD_EXP 30
14906: PPUSH
14907: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
14911: LD_VAR 0 2
14915: PPUSH
14916: LD_VAR 0 3
14920: PPUSH
14921: LD_INT 2
14923: PPUSH
14924: CALL_OW 331
// end ; end ;
14928: PPOPN 7
14930: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
14931: LD_VAR 0 1
14935: PUSH
14936: LD_EXP 30
14940: EQUAL
14941: PUSH
14942: LD_EXP 5
14946: AND
14947: IFFALSE 14956
// YouLost ( Heike ) ;
14949: LD_STRING Heike
14951: PPUSH
14952: CALL_OW 104
// end ;
14956: PPOPN 1
14958: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
14959: LD_VAR 0 1
14963: PUSH
14964: LD_INT 2
14966: EQUAL
14967: PUSH
14968: LD_VAR 0 2
14972: PUSH
14973: LD_INT 3
14975: EQUAL
14976: AND
14977: PUSH
14978: LD_VAR 0 1
14982: PUSH
14983: LD_INT 3
14985: EQUAL
14986: PUSH
14987: LD_VAR 0 2
14991: PUSH
14992: LD_INT 2
14994: EQUAL
14995: AND
14996: OR
14997: IFFALSE 15007
// isAlarm := true ;
14999: LD_ADDR_EXP 17
15003: PUSH
15004: LD_INT 1
15006: ST_TO_ADDR
// end ; end_of_file
15007: PPOPN 2
15009: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
15010: LD_INT 0
15012: PPUSH
15013: PPUSH
15014: PPUSH
// u1 := IsInUnit ( unit1 ) ;
15015: LD_ADDR_VAR 0 4
15019: PUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: CALL_OW 310
15029: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
15030: LD_ADDR_VAR 0 5
15034: PUSH
15035: LD_VAR 0 2
15039: PPUSH
15040: CALL_OW 310
15044: ST_TO_ADDR
// result := u1 and u1 = u2 ;
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: LD_VAR 0 4
15054: PUSH
15055: LD_VAR 0 4
15059: PUSH
15060: LD_VAR 0 5
15064: EQUAL
15065: AND
15066: ST_TO_ADDR
// end ;
15067: LD_VAR 0 3
15071: RET
// export function ShowPlace ( x , y , time ) ; begin
15072: LD_INT 0
15074: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
15075: LD_INT 4
15077: PPUSH
15078: LD_VAR 0 1
15082: PPUSH
15083: LD_VAR 0 2
15087: PPUSH
15088: LD_VAR 0 3
15092: PPUSH
15093: LD_INT 0
15095: PPUSH
15096: LD_INT 0
15098: PPUSH
15099: LD_INT 0
15101: PPUSH
15102: CALL_OW 595
// end ;
15106: LD_VAR 0 4
15110: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
15111: LD_INT 0
15113: PPUSH
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
15118: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
15119: LD_VAR 0 1
15123: PPUSH
15124: CALL_OW 302
15128: NOT
15129: PUSH
15130: LD_VAR 0 2
15134: PPUSH
15135: CALL_OW 302
15139: NOT
15140: OR
15141: PUSH
15142: LD_VAR 0 2
15146: PPUSH
15147: CALL_OW 313
15151: PUSH
15152: LD_INT 6
15154: EQUAL
15155: OR
15156: IFFALSE 15160
// exit ;
15158: GO 15373
// btype := GetBType ( building ) ;
15160: LD_ADDR_VAR 0 8
15164: PUSH
15165: LD_VAR 0 2
15169: PPUSH
15170: CALL_OW 266
15174: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
15175: LD_VAR 0 8
15179: PUSH
15180: LD_INT 0
15182: PUSH
15183: LD_INT 1
15185: PUSH
15186: LD_INT 4
15188: PUSH
15189: LD_INT 5
15191: PUSH
15192: LD_INT 3
15194: PUSH
15195: LD_INT 6
15197: PUSH
15198: LD_INT 7
15200: PUSH
15201: LD_INT 8
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: IN
15214: NOT
15215: IFFALSE 15219
// exit ;
15217: GO 15373
// x := GetX ( building ) ;
15219: LD_ADDR_VAR 0 4
15223: PUSH
15224: LD_VAR 0 2
15228: PPUSH
15229: CALL_OW 250
15233: ST_TO_ADDR
// y := GetY ( building ) ;
15234: LD_ADDR_VAR 0 5
15238: PUSH
15239: LD_VAR 0 2
15243: PPUSH
15244: CALL_OW 251
15248: ST_TO_ADDR
// d := GetDir ( building ) ;
15249: LD_ADDR_VAR 0 6
15253: PUSH
15254: LD_VAR 0 2
15258: PPUSH
15259: CALL_OW 254
15263: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
15264: LD_ADDR_VAR 0 7
15268: PUSH
15269: LD_VAR 0 4
15273: PPUSH
15274: LD_VAR 0 6
15278: PPUSH
15279: LD_INT 3
15281: PPUSH
15282: CALL_OW 272
15286: PUSH
15287: LD_VAR 0 5
15291: PPUSH
15292: LD_VAR 0 6
15296: PPUSH
15297: LD_INT 3
15299: PPUSH
15300: CALL_OW 273
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
15309: LD_VAR 0 7
15313: PUSH
15314: LD_INT 1
15316: ARRAY
15317: PPUSH
15318: LD_VAR 0 7
15322: PUSH
15323: LD_INT 2
15325: ARRAY
15326: PPUSH
15327: CALL_OW 488
15331: NOT
15332: IFFALSE 15336
// exit ;
15334: GO 15373
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 5 ;
15336: LD_ADDR_VAR 0 3
15340: PUSH
15341: LD_VAR 0 1
15345: PPUSH
15346: LD_VAR 0 7
15350: PUSH
15351: LD_INT 1
15353: ARRAY
15354: PPUSH
15355: LD_VAR 0 7
15359: PUSH
15360: LD_INT 2
15362: ARRAY
15363: PPUSH
15364: CALL_OW 297
15368: PUSH
15369: LD_INT 5
15371: LESS
15372: ST_TO_ADDR
// end ;
15373: LD_VAR 0 3
15377: RET
// export function PlaceExplosives ( building ) ; begin
15378: LD_INT 0
15380: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , drugsLab ) ;
15381: LD_ADDR_EXP 29
15385: PUSH
15386: LD_EXP 29
15390: PPUSH
15391: LD_INT 162
15393: PPUSH
15394: CALL 53894 0 2
15398: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
15399: LD_VAR 0 1
15403: PPUSH
15404: CALL_OW 250
15408: PPUSH
15409: LD_VAR 0 1
15413: PPUSH
15414: CALL_OW 251
15418: PPUSH
15419: LD_STRING PlantBomb
15421: PPUSH
15422: CALL_OW 366
// end ;
15426: LD_VAR 0 2
15430: RET
// export function CreateNature ; var i ; begin
15431: LD_INT 0
15433: PPUSH
15434: PPUSH
// PrepareFrog ;
15435: CALL 50376 0 0
// for i := 1 to 3 do
15439: LD_ADDR_VAR 0 2
15443: PUSH
15444: DOUBLE
15445: LD_INT 1
15447: DEC
15448: ST_TO_ADDR
15449: LD_INT 3
15451: PUSH
15452: FOR_TO
15453: IFFALSE 15472
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
15455: CALL_OW 44
15459: PPUSH
15460: LD_INT 24
15462: PPUSH
15463: LD_INT 0
15465: PPUSH
15466: CALL_OW 49
15470: GO 15452
15472: POP
15473: POP
// end ; end_of_file
15474: LD_VAR 0 1
15478: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
15479: LD_INT 0
15481: PPUSH
// if not step then
15482: LD_LOC 1
15486: NOT
15487: IFFALSE 15497
// step := 1 ;
15489: LD_ADDR_LOC 1
15493: PUSH
15494: LD_INT 1
15496: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
15497: LD_STRING HEscape
15499: PUSH
15500: LD_LOC 1
15504: STR
15505: PPUSH
15506: CALL_OW 97
15510: PUSH
15511: LD_INT 1
15513: DOUBLE
15514: EQUAL
15515: IFTRUE 15519
15517: GO 15526
15519: POP
// LockerMinigameSearch ; 2 :
15520: CALL 15559 0 0
15524: GO 15542
15526: LD_INT 2
15528: DOUBLE
15529: EQUAL
15530: IFTRUE 15534
15532: GO 15541
15534: POP
// LockerMinigameSetCode ; end ;
15535: CALL 15633 0 0
15539: GO 15542
15541: POP
// if lockerCodeValid then
15542: LD_EXP 51
15546: IFFALSE 15550
// exit ;
15548: GO 15554
// StartLockerMinigame ;
15550: CALL 15479 0 0
// end ;
15554: LD_VAR 0 1
15558: RET
// function LockerMinigameSearch ; begin
15559: LD_INT 0
15561: PPUSH
// if code then
15562: LD_LOC 2
15566: IFFALSE 15582
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
15568: LD_EXP 30
15572: PPUSH
15573: LD_STRING DH-Escape-3-Hint-0
15575: PPUSH
15576: CALL_OW 88
// exit ;
15580: GO 15628
// end ; Randomize ;
15582: CALL_OW 10
// code := rand ( 1 , 5 ) ;
15586: LD_ADDR_LOC 2
15590: PUSH
15591: LD_INT 1
15593: PPUSH
15594: LD_INT 5
15596: PPUSH
15597: CALL_OW 12
15601: ST_TO_ADDR
// step := 2 ;
15602: LD_ADDR_LOC 1
15606: PUSH
15607: LD_INT 2
15609: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
15610: LD_EXP 30
15614: PPUSH
15615: LD_STRING DH-Escape-3-Hint-
15617: PUSH
15618: LD_LOC 2
15622: STR
15623: PPUSH
15624: CALL_OW 88
// end ;
15628: LD_VAR 0 1
15632: RET
// function LockerMinigameSetCode ; begin
15633: LD_INT 0
15635: PPUSH
// if not code then
15636: LD_LOC 2
15640: NOT
15641: IFFALSE 15651
// code := 0 ;
15643: LD_ADDR_LOC 2
15647: PUSH
15648: LD_INT 0
15650: ST_TO_ADDR
// lockerBusy := true ;
15651: LD_ADDR_EXP 52
15655: PUSH
15656: LD_INT 1
15658: ST_TO_ADDR
// InGameOff ;
15659: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
15663: LD_STRING initLockerMinigame("
15665: PUSH
15666: LD_LOC 2
15670: STR
15671: PUSH
15672: LD_STRING ")
15674: STR
15675: PPUSH
15676: CALL_OW 559
// step := 3 ;
15680: LD_ADDR_LOC 1
15684: PUSH
15685: LD_INT 3
15687: ST_TO_ADDR
// repeat wait ( 1 ) ;
15688: LD_INT 1
15690: PPUSH
15691: CALL_OW 67
// until not lockerBusy ;
15695: LD_EXP 52
15699: NOT
15700: IFFALSE 15688
// InGameOn ;
15702: CALL_OW 8
// if not lockerCodeValid then
15706: LD_EXP 51
15710: NOT
15711: IFFALSE 15737
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
15713: LD_EXP 30
15717: PPUSH
15718: LD_STRING DH-Escape-3-Fail-
15720: PUSH
15721: LD_INT 1
15723: PPUSH
15724: LD_INT 2
15726: PPUSH
15727: CALL_OW 12
15731: STR
15732: PPUSH
15733: CALL_OW 88
// end ; end_of_file
15737: LD_VAR 0 1
15741: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
15742: LD_VAR 0 2
15746: PUSH
15747: LD_INT 102
15749: EQUAL
15750: IFFALSE 15772
// begin lockerBusy := false ;
15752: LD_ADDR_EXP 52
15756: PUSH
15757: LD_INT 0
15759: ST_TO_ADDR
// lockerCodeValid := p3 ;
15760: LD_ADDR_EXP 51
15764: PUSH
15765: LD_VAR 0 3
15769: ST_TO_ADDR
// end else
15770: GO 15806
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
15772: LD_VAR 0 1
15776: PPUSH
15777: LD_VAR 0 2
15781: PPUSH
15782: LD_VAR 0 3
15786: PPUSH
15787: LD_VAR 0 4
15791: PPUSH
15792: LD_VAR 0 5
15796: PPUSH
15797: LD_VAR 0 6
15801: PPUSH
15802: CALL 57754 0 6
// end ;
15806: PPOPN 6
15808: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
15809: CALL 57725 0 0
// end ; end_of_file
15813: PPOPN 1
15815: END
// every 0 0$1 trigger not isAlarm marked gameStartEvent do var i , j , points , tag , tmp ;
15816: LD_EXP 17
15820: NOT
15821: IFFALSE 16173
15823: GO 15825
15825: DISABLE
15826: LD_INT 0
15828: PPUSH
15829: PPUSH
15830: PPUSH
15831: PPUSH
15832: PPUSH
// begin enable ;
15833: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 ] ] ;
15834: LD_ADDR_VAR 0 3
15838: PUSH
15839: LD_INT 26
15841: PUSH
15842: LD_INT 27
15844: PUSH
15845: LD_INT 28
15847: PUSH
15848: LD_INT 29
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 30
15859: PUSH
15860: LD_INT 31
15862: PUSH
15863: LD_INT 32
15865: PUSH
15866: LD_INT 33
15868: PUSH
15869: LD_INT 34
15871: PUSH
15872: LD_INT 35
15874: PUSH
15875: LD_INT 36
15877: PUSH
15878: LD_INT 37
15880: PUSH
15881: LD_INT 38
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 39
15897: PUSH
15898: LD_INT 40
15900: PUSH
15901: LD_INT 41
15903: PUSH
15904: LD_INT 42
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 43
15915: PUSH
15916: LD_INT 44
15918: PUSH
15919: LD_INT 45
15921: PUSH
15922: LD_INT 46
15924: PUSH
15925: LD_INT 47
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: ST_TO_ADDR
// for i in ruPatrol do
15941: LD_ADDR_VAR 0 1
15945: PUSH
15946: LD_EXP 50
15950: PUSH
15951: FOR_IN
15952: IFFALSE 16171
// begin tmp := UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , i , 7 ] ] ) ;
15954: LD_ADDR_VAR 0 5
15958: PUSH
15959: LD_EXP 14
15963: PPUSH
15964: LD_INT 22
15966: PUSH
15967: LD_INT 2
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 91
15976: PUSH
15977: LD_VAR 0 1
15981: PUSH
15982: LD_INT 7
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PPUSH
15994: CALL_OW 72
15998: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
15999: LD_INT 2
16001: PPUSH
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 292
16011: PUSH
16012: LD_VAR 0 5
16016: AND
16017: IFFALSE 16066
// begin ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
16019: LD_VAR 0 1
16023: PPUSH
16024: LD_VAR 0 5
16028: PPUSH
16029: LD_VAR 0 1
16033: PPUSH
16034: CALL_OW 74
16038: PPUSH
16039: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
16043: LD_VAR 0 1
16047: PPUSH
16048: LD_VAR 0 5
16052: PPUSH
16053: CALL 14007 0 2
// ComFree ( i ) ;
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 139
// end ; if HasTask ( i ) then
16066: LD_VAR 0 1
16070: PPUSH
16071: CALL_OW 314
16075: IFFALSE 16079
// continue ;
16077: GO 15951
// tag := GetTag ( i ) ;
16079: LD_ADDR_VAR 0 4
16083: PUSH
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 110
16093: ST_TO_ADDR
// if not tag then
16094: LD_VAR 0 4
16098: NOT
16099: IFFALSE 16103
// continue ;
16101: GO 15951
// for j := 1 to points [ tag ] do
16103: LD_ADDR_VAR 0 2
16107: PUSH
16108: DOUBLE
16109: LD_INT 1
16111: DEC
16112: ST_TO_ADDR
16113: LD_VAR 0 3
16117: PUSH
16118: LD_VAR 0 4
16122: ARRAY
16123: PUSH
16124: FOR_TO
16125: IFFALSE 16167
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
16127: LD_VAR 0 1
16131: PPUSH
16132: LD_VAR 0 3
16136: PUSH
16137: LD_VAR 0 4
16141: ARRAY
16142: PUSH
16143: LD_VAR 0 2
16147: ARRAY
16148: PPUSH
16149: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
16153: LD_VAR 0 1
16157: PPUSH
16158: LD_INT 70
16160: PPUSH
16161: CALL_OW 202
// end ;
16165: GO 16124
16167: POP
16168: POP
// end ;
16169: GO 15951
16171: POP
16172: POP
// end ; end_of_file
16173: PPOPN 5
16175: END
// every 0 0$2 trigger isAlarm do var i , points , tmp ;
16176: LD_EXP 17
16180: IFFALSE 16442
16182: GO 16184
16184: DISABLE
16185: LD_INT 0
16187: PPUSH
16188: PPUSH
16189: PPUSH
// begin SetAttitude ( 3 , 2 , att_enemy , true ) ;
16190: LD_INT 3
16192: PPUSH
16193: LD_INT 2
16195: PPUSH
16196: LD_INT 2
16198: PPUSH
16199: LD_INT 1
16201: PPUSH
16202: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
16206: LD_INT 6
16208: PPUSH
16209: LD_INT 2
16211: PPUSH
16212: LD_INT 2
16214: PPUSH
16215: LD_INT 1
16217: PPUSH
16218: CALL_OW 80
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
16222: LD_ADDR_VAR 0 2
16226: PUSH
16227: LD_INT 107
16229: PUSH
16230: LD_INT 39
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 143
16239: PUSH
16240: LD_INT 33
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: LD_INT 180
16249: PUSH
16250: LD_INT 115
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 96
16259: PUSH
16260: LD_INT 90
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 59
16269: PUSH
16270: LD_INT 52
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 16
16279: PUSH
16280: LD_INT 15
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 90
16289: PUSH
16290: LD_INT 120
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
16306: LD_ADDR_VAR 0 3
16310: PUSH
16311: LD_INT 22
16313: PUSH
16314: LD_INT 6
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 25
16323: PUSH
16324: LD_INT 1
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PPUSH
16335: CALL_OW 69
16339: ST_TO_ADDR
// for i in tmp do
16340: LD_ADDR_VAR 0 1
16344: PUSH
16345: LD_VAR 0 3
16349: PUSH
16350: FOR_IN
16351: IFFALSE 16419
// begin ComExit ( i ) ;
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL 54292 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
16362: LD_VAR 0 1
16366: PPUSH
16367: LD_VAR 0 2
16371: PUSH
16372: LD_VAR 0 1
16376: PUSH
16377: LD_INT 7
16379: MOD
16380: PUSH
16381: LD_INT 1
16383: PLUS
16384: ARRAY
16385: PUSH
16386: LD_INT 1
16388: ARRAY
16389: PPUSH
16390: LD_VAR 0 2
16394: PUSH
16395: LD_VAR 0 1
16399: PUSH
16400: LD_INT 7
16402: MOD
16403: PUSH
16404: LD_INT 1
16406: PLUS
16407: ARRAY
16408: PUSH
16409: LD_INT 2
16411: ARRAY
16412: PPUSH
16413: CALL_OW 174
// end ;
16417: GO 16350
16419: POP
16420: POP
// wait ( 0 0$25 ) ;
16421: LD_INT 875
16423: PPUSH
16424: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
16428: LD_VAR 0 3
16432: PPUSH
16433: LD_EXP 30
16437: PPUSH
16438: CALL_OW 175
// end ; end_of_file
16442: PPOPN 3
16444: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16445: LD_INT 0
16447: PPUSH
16448: PPUSH
// if exist_mode then
16449: LD_VAR 0 2
16453: IFFALSE 16478
// unit := CreateCharacter ( prefix & ident ) else
16455: LD_ADDR_VAR 0 5
16459: PUSH
16460: LD_VAR 0 3
16464: PUSH
16465: LD_VAR 0 1
16469: STR
16470: PPUSH
16471: CALL_OW 34
16475: ST_TO_ADDR
16476: GO 16493
// unit := NewCharacter ( ident ) ;
16478: LD_ADDR_VAR 0 5
16482: PUSH
16483: LD_VAR 0 1
16487: PPUSH
16488: CALL_OW 25
16492: ST_TO_ADDR
// result := unit ;
16493: LD_ADDR_VAR 0 4
16497: PUSH
16498: LD_VAR 0 5
16502: ST_TO_ADDR
// end ;
16503: LD_VAR 0 4
16507: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16508: LD_INT 0
16510: PPUSH
16511: PPUSH
// if not side or not nation then
16512: LD_VAR 0 1
16516: NOT
16517: PUSH
16518: LD_VAR 0 2
16522: NOT
16523: OR
16524: IFFALSE 16528
// exit ;
16526: GO 17296
// case nation of nation_american :
16528: LD_VAR 0 2
16532: PUSH
16533: LD_INT 1
16535: DOUBLE
16536: EQUAL
16537: IFTRUE 16541
16539: GO 16755
16541: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16542: LD_ADDR_VAR 0 4
16546: PUSH
16547: LD_INT 35
16549: PUSH
16550: LD_INT 45
16552: PUSH
16553: LD_INT 46
16555: PUSH
16556: LD_INT 47
16558: PUSH
16559: LD_INT 82
16561: PUSH
16562: LD_INT 83
16564: PUSH
16565: LD_INT 84
16567: PUSH
16568: LD_INT 85
16570: PUSH
16571: LD_INT 86
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: LD_INT 2
16579: PUSH
16580: LD_INT 6
16582: PUSH
16583: LD_INT 15
16585: PUSH
16586: LD_INT 16
16588: PUSH
16589: LD_INT 7
16591: PUSH
16592: LD_INT 12
16594: PUSH
16595: LD_INT 13
16597: PUSH
16598: LD_INT 10
16600: PUSH
16601: LD_INT 14
16603: PUSH
16604: LD_INT 20
16606: PUSH
16607: LD_INT 21
16609: PUSH
16610: LD_INT 22
16612: PUSH
16613: LD_INT 25
16615: PUSH
16616: LD_INT 32
16618: PUSH
16619: LD_INT 27
16621: PUSH
16622: LD_INT 36
16624: PUSH
16625: LD_INT 69
16627: PUSH
16628: LD_INT 39
16630: PUSH
16631: LD_INT 34
16633: PUSH
16634: LD_INT 40
16636: PUSH
16637: LD_INT 48
16639: PUSH
16640: LD_INT 49
16642: PUSH
16643: LD_INT 50
16645: PUSH
16646: LD_INT 51
16648: PUSH
16649: LD_INT 52
16651: PUSH
16652: LD_INT 53
16654: PUSH
16655: LD_INT 54
16657: PUSH
16658: LD_INT 55
16660: PUSH
16661: LD_INT 56
16663: PUSH
16664: LD_INT 57
16666: PUSH
16667: LD_INT 58
16669: PUSH
16670: LD_INT 59
16672: PUSH
16673: LD_INT 60
16675: PUSH
16676: LD_INT 61
16678: PUSH
16679: LD_INT 62
16681: PUSH
16682: LD_INT 80
16684: PUSH
16685: LD_INT 82
16687: PUSH
16688: LD_INT 83
16690: PUSH
16691: LD_INT 84
16693: PUSH
16694: LD_INT 85
16696: PUSH
16697: LD_INT 86
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: ST_TO_ADDR
16753: GO 17220
16755: LD_INT 2
16757: DOUBLE
16758: EQUAL
16759: IFTRUE 16763
16761: GO 16989
16763: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16764: LD_ADDR_VAR 0 4
16768: PUSH
16769: LD_INT 35
16771: PUSH
16772: LD_INT 45
16774: PUSH
16775: LD_INT 46
16777: PUSH
16778: LD_INT 47
16780: PUSH
16781: LD_INT 82
16783: PUSH
16784: LD_INT 83
16786: PUSH
16787: LD_INT 84
16789: PUSH
16790: LD_INT 85
16792: PUSH
16793: LD_INT 87
16795: PUSH
16796: LD_INT 70
16798: PUSH
16799: LD_INT 1
16801: PUSH
16802: LD_INT 11
16804: PUSH
16805: LD_INT 3
16807: PUSH
16808: LD_INT 4
16810: PUSH
16811: LD_INT 5
16813: PUSH
16814: LD_INT 6
16816: PUSH
16817: LD_INT 15
16819: PUSH
16820: LD_INT 18
16822: PUSH
16823: LD_INT 7
16825: PUSH
16826: LD_INT 17
16828: PUSH
16829: LD_INT 8
16831: PUSH
16832: LD_INT 20
16834: PUSH
16835: LD_INT 21
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_INT 72
16843: PUSH
16844: LD_INT 26
16846: PUSH
16847: LD_INT 69
16849: PUSH
16850: LD_INT 39
16852: PUSH
16853: LD_INT 40
16855: PUSH
16856: LD_INT 41
16858: PUSH
16859: LD_INT 42
16861: PUSH
16862: LD_INT 43
16864: PUSH
16865: LD_INT 48
16867: PUSH
16868: LD_INT 49
16870: PUSH
16871: LD_INT 50
16873: PUSH
16874: LD_INT 51
16876: PUSH
16877: LD_INT 52
16879: PUSH
16880: LD_INT 53
16882: PUSH
16883: LD_INT 54
16885: PUSH
16886: LD_INT 55
16888: PUSH
16889: LD_INT 56
16891: PUSH
16892: LD_INT 60
16894: PUSH
16895: LD_INT 61
16897: PUSH
16898: LD_INT 62
16900: PUSH
16901: LD_INT 66
16903: PUSH
16904: LD_INT 67
16906: PUSH
16907: LD_INT 68
16909: PUSH
16910: LD_INT 81
16912: PUSH
16913: LD_INT 82
16915: PUSH
16916: LD_INT 83
16918: PUSH
16919: LD_INT 84
16921: PUSH
16922: LD_INT 85
16924: PUSH
16925: LD_INT 87
16927: PUSH
16928: LD_INT 88
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: ST_TO_ADDR
16987: GO 17220
16989: LD_INT 3
16991: DOUBLE
16992: EQUAL
16993: IFTRUE 16997
16995: GO 17219
16997: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16998: LD_ADDR_VAR 0 4
17002: PUSH
17003: LD_INT 46
17005: PUSH
17006: LD_INT 47
17008: PUSH
17009: LD_INT 1
17011: PUSH
17012: LD_INT 2
17014: PUSH
17015: LD_INT 82
17017: PUSH
17018: LD_INT 83
17020: PUSH
17021: LD_INT 84
17023: PUSH
17024: LD_INT 85
17026: PUSH
17027: LD_INT 86
17029: PUSH
17030: LD_INT 11
17032: PUSH
17033: LD_INT 9
17035: PUSH
17036: LD_INT 20
17038: PUSH
17039: LD_INT 19
17041: PUSH
17042: LD_INT 21
17044: PUSH
17045: LD_INT 24
17047: PUSH
17048: LD_INT 22
17050: PUSH
17051: LD_INT 25
17053: PUSH
17054: LD_INT 28
17056: PUSH
17057: LD_INT 29
17059: PUSH
17060: LD_INT 30
17062: PUSH
17063: LD_INT 31
17065: PUSH
17066: LD_INT 37
17068: PUSH
17069: LD_INT 38
17071: PUSH
17072: LD_INT 32
17074: PUSH
17075: LD_INT 27
17077: PUSH
17078: LD_INT 33
17080: PUSH
17081: LD_INT 69
17083: PUSH
17084: LD_INT 39
17086: PUSH
17087: LD_INT 34
17089: PUSH
17090: LD_INT 40
17092: PUSH
17093: LD_INT 71
17095: PUSH
17096: LD_INT 23
17098: PUSH
17099: LD_INT 44
17101: PUSH
17102: LD_INT 48
17104: PUSH
17105: LD_INT 49
17107: PUSH
17108: LD_INT 50
17110: PUSH
17111: LD_INT 51
17113: PUSH
17114: LD_INT 52
17116: PUSH
17117: LD_INT 53
17119: PUSH
17120: LD_INT 54
17122: PUSH
17123: LD_INT 55
17125: PUSH
17126: LD_INT 56
17128: PUSH
17129: LD_INT 57
17131: PUSH
17132: LD_INT 58
17134: PUSH
17135: LD_INT 59
17137: PUSH
17138: LD_INT 63
17140: PUSH
17141: LD_INT 64
17143: PUSH
17144: LD_INT 65
17146: PUSH
17147: LD_INT 82
17149: PUSH
17150: LD_INT 83
17152: PUSH
17153: LD_INT 84
17155: PUSH
17156: LD_INT 85
17158: PUSH
17159: LD_INT 86
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: ST_TO_ADDR
17217: GO 17220
17219: POP
// if state > - 1 and state < 3 then
17220: LD_VAR 0 3
17224: PUSH
17225: LD_INT 1
17227: NEG
17228: GREATER
17229: PUSH
17230: LD_VAR 0 3
17234: PUSH
17235: LD_INT 3
17237: LESS
17238: AND
17239: IFFALSE 17296
// for i in result do
17241: LD_ADDR_VAR 0 5
17245: PUSH
17246: LD_VAR 0 4
17250: PUSH
17251: FOR_IN
17252: IFFALSE 17294
// if GetTech ( i , side ) <> state then
17254: LD_VAR 0 5
17258: PPUSH
17259: LD_VAR 0 1
17263: PPUSH
17264: CALL_OW 321
17268: PUSH
17269: LD_VAR 0 3
17273: NONEQUAL
17274: IFFALSE 17292
// result := result diff i ;
17276: LD_ADDR_VAR 0 4
17280: PUSH
17281: LD_VAR 0 4
17285: PUSH
17286: LD_VAR 0 5
17290: DIFF
17291: ST_TO_ADDR
17292: GO 17251
17294: POP
17295: POP
// end ;
17296: LD_VAR 0 4
17300: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17301: LD_INT 0
17303: PPUSH
17304: PPUSH
17305: PPUSH
// result := true ;
17306: LD_ADDR_VAR 0 3
17310: PUSH
17311: LD_INT 1
17313: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17314: LD_ADDR_VAR 0 5
17318: PUSH
17319: LD_VAR 0 2
17323: PPUSH
17324: CALL_OW 480
17328: ST_TO_ADDR
// if not tmp then
17329: LD_VAR 0 5
17333: NOT
17334: IFFALSE 17338
// exit ;
17336: GO 17387
// for i in tmp do
17338: LD_ADDR_VAR 0 4
17342: PUSH
17343: LD_VAR 0 5
17347: PUSH
17348: FOR_IN
17349: IFFALSE 17385
// if GetTech ( i , side ) <> state_researched then
17351: LD_VAR 0 4
17355: PPUSH
17356: LD_VAR 0 1
17360: PPUSH
17361: CALL_OW 321
17365: PUSH
17366: LD_INT 2
17368: NONEQUAL
17369: IFFALSE 17383
// begin result := false ;
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: LD_INT 0
17378: ST_TO_ADDR
// exit ;
17379: POP
17380: POP
17381: GO 17387
// end ;
17383: GO 17348
17385: POP
17386: POP
// end ;
17387: LD_VAR 0 3
17391: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17392: LD_INT 0
17394: PPUSH
17395: PPUSH
17396: PPUSH
17397: PPUSH
17398: PPUSH
17399: PPUSH
17400: PPUSH
17401: PPUSH
17402: PPUSH
17403: PPUSH
17404: PPUSH
17405: PPUSH
17406: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17407: LD_VAR 0 1
17411: NOT
17412: PUSH
17413: LD_VAR 0 1
17417: PPUSH
17418: CALL_OW 257
17422: PUSH
17423: LD_INT 9
17425: NONEQUAL
17426: OR
17427: IFFALSE 17431
// exit ;
17429: GO 18004
// side := GetSide ( unit ) ;
17431: LD_ADDR_VAR 0 9
17435: PUSH
17436: LD_VAR 0 1
17440: PPUSH
17441: CALL_OW 255
17445: ST_TO_ADDR
// tech_space := tech_spacanom ;
17446: LD_ADDR_VAR 0 12
17450: PUSH
17451: LD_INT 29
17453: ST_TO_ADDR
// tech_time := tech_taurad ;
17454: LD_ADDR_VAR 0 13
17458: PUSH
17459: LD_INT 28
17461: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17462: LD_ADDR_VAR 0 11
17466: PUSH
17467: LD_VAR 0 1
17471: PPUSH
17472: CALL_OW 310
17476: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17477: LD_VAR 0 11
17481: PPUSH
17482: CALL_OW 247
17486: PUSH
17487: LD_INT 2
17489: EQUAL
17490: IFFALSE 17494
// exit ;
17492: GO 18004
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17494: LD_ADDR_VAR 0 8
17498: PUSH
17499: LD_INT 81
17501: PUSH
17502: LD_VAR 0 9
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 3
17513: PUSH
17514: LD_INT 21
17516: PUSH
17517: LD_INT 3
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PPUSH
17532: CALL_OW 69
17536: ST_TO_ADDR
// if not tmp then
17537: LD_VAR 0 8
17541: NOT
17542: IFFALSE 17546
// exit ;
17544: GO 18004
// if in_unit then
17546: LD_VAR 0 11
17550: IFFALSE 17574
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17552: LD_ADDR_VAR 0 10
17556: PUSH
17557: LD_VAR 0 8
17561: PPUSH
17562: LD_VAR 0 11
17566: PPUSH
17567: CALL_OW 74
17571: ST_TO_ADDR
17572: GO 17594
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17574: LD_ADDR_VAR 0 10
17578: PUSH
17579: LD_VAR 0 8
17583: PPUSH
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 74
17593: ST_TO_ADDR
// if not enemy then
17594: LD_VAR 0 10
17598: NOT
17599: IFFALSE 17603
// exit ;
17601: GO 18004
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17603: LD_VAR 0 11
17607: PUSH
17608: LD_VAR 0 11
17612: PPUSH
17613: LD_VAR 0 10
17617: PPUSH
17618: CALL_OW 296
17622: PUSH
17623: LD_INT 13
17625: GREATER
17626: AND
17627: PUSH
17628: LD_VAR 0 1
17632: PPUSH
17633: LD_VAR 0 10
17637: PPUSH
17638: CALL_OW 296
17642: PUSH
17643: LD_INT 12
17645: GREATER
17646: OR
17647: IFFALSE 17651
// exit ;
17649: GO 18004
// missile := [ 1 ] ;
17651: LD_ADDR_VAR 0 14
17655: PUSH
17656: LD_INT 1
17658: PUSH
17659: EMPTY
17660: LIST
17661: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17662: LD_VAR 0 9
17666: PPUSH
17667: LD_VAR 0 12
17671: PPUSH
17672: CALL_OW 325
17676: IFFALSE 17705
// missile := Replace ( missile , missile + 1 , 2 ) ;
17678: LD_ADDR_VAR 0 14
17682: PUSH
17683: LD_VAR 0 14
17687: PPUSH
17688: LD_VAR 0 14
17692: PUSH
17693: LD_INT 1
17695: PLUS
17696: PPUSH
17697: LD_INT 2
17699: PPUSH
17700: CALL_OW 1
17704: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17705: LD_VAR 0 9
17709: PPUSH
17710: LD_VAR 0 13
17714: PPUSH
17715: CALL_OW 325
17719: PUSH
17720: LD_VAR 0 10
17724: PPUSH
17725: CALL_OW 255
17729: PPUSH
17730: LD_VAR 0 13
17734: PPUSH
17735: CALL_OW 325
17739: NOT
17740: AND
17741: IFFALSE 17770
// missile := Replace ( missile , missile + 1 , 3 ) ;
17743: LD_ADDR_VAR 0 14
17747: PUSH
17748: LD_VAR 0 14
17752: PPUSH
17753: LD_VAR 0 14
17757: PUSH
17758: LD_INT 1
17760: PLUS
17761: PPUSH
17762: LD_INT 3
17764: PPUSH
17765: CALL_OW 1
17769: ST_TO_ADDR
// if missile < 2 then
17770: LD_VAR 0 14
17774: PUSH
17775: LD_INT 2
17777: LESS
17778: IFFALSE 17782
// exit ;
17780: GO 18004
// x := GetX ( enemy ) ;
17782: LD_ADDR_VAR 0 4
17786: PUSH
17787: LD_VAR 0 10
17791: PPUSH
17792: CALL_OW 250
17796: ST_TO_ADDR
// y := GetY ( enemy ) ;
17797: LD_ADDR_VAR 0 5
17801: PUSH
17802: LD_VAR 0 10
17806: PPUSH
17807: CALL_OW 251
17811: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17812: LD_ADDR_VAR 0 6
17816: PUSH
17817: LD_VAR 0 4
17821: PUSH
17822: LD_INT 1
17824: NEG
17825: PPUSH
17826: LD_INT 1
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17835: LD_ADDR_VAR 0 7
17839: PUSH
17840: LD_VAR 0 5
17844: PUSH
17845: LD_INT 1
17847: NEG
17848: PPUSH
17849: LD_INT 1
17851: PPUSH
17852: CALL_OW 12
17856: PLUS
17857: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17858: LD_VAR 0 6
17862: PPUSH
17863: LD_VAR 0 7
17867: PPUSH
17868: CALL_OW 488
17872: NOT
17873: IFFALSE 17895
// begin _x := x ;
17875: LD_ADDR_VAR 0 6
17879: PUSH
17880: LD_VAR 0 4
17884: ST_TO_ADDR
// _y := y ;
17885: LD_ADDR_VAR 0 7
17889: PUSH
17890: LD_VAR 0 5
17894: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17895: LD_ADDR_VAR 0 3
17899: PUSH
17900: LD_INT 1
17902: PPUSH
17903: LD_VAR 0 14
17907: PPUSH
17908: CALL_OW 12
17912: ST_TO_ADDR
// case i of 1 :
17913: LD_VAR 0 3
17917: PUSH
17918: LD_INT 1
17920: DOUBLE
17921: EQUAL
17922: IFTRUE 17926
17924: GO 17943
17926: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17927: LD_VAR 0 1
17931: PPUSH
17932: LD_VAR 0 10
17936: PPUSH
17937: CALL_OW 115
17941: GO 18004
17943: LD_INT 2
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17951
17949: GO 17973
17951: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17952: LD_VAR 0 1
17956: PPUSH
17957: LD_VAR 0 6
17961: PPUSH
17962: LD_VAR 0 7
17966: PPUSH
17967: CALL_OW 153
17971: GO 18004
17973: LD_INT 3
17975: DOUBLE
17976: EQUAL
17977: IFTRUE 17981
17979: GO 18003
17981: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17982: LD_VAR 0 1
17986: PPUSH
17987: LD_VAR 0 6
17991: PPUSH
17992: LD_VAR 0 7
17996: PPUSH
17997: CALL_OW 154
18001: GO 18004
18003: POP
// end ;
18004: LD_VAR 0 2
18008: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18009: LD_INT 0
18011: PPUSH
18012: PPUSH
18013: PPUSH
18014: PPUSH
18015: PPUSH
18016: PPUSH
// if not unit or not building then
18017: LD_VAR 0 1
18021: NOT
18022: PUSH
18023: LD_VAR 0 2
18027: NOT
18028: OR
18029: IFFALSE 18033
// exit ;
18031: GO 18191
// x := GetX ( building ) ;
18033: LD_ADDR_VAR 0 5
18037: PUSH
18038: LD_VAR 0 2
18042: PPUSH
18043: CALL_OW 250
18047: ST_TO_ADDR
// y := GetY ( building ) ;
18048: LD_ADDR_VAR 0 6
18052: PUSH
18053: LD_VAR 0 2
18057: PPUSH
18058: CALL_OW 251
18062: ST_TO_ADDR
// for i = 0 to 5 do
18063: LD_ADDR_VAR 0 4
18067: PUSH
18068: DOUBLE
18069: LD_INT 0
18071: DEC
18072: ST_TO_ADDR
18073: LD_INT 5
18075: PUSH
18076: FOR_TO
18077: IFFALSE 18189
// begin _x := ShiftX ( x , i , 3 ) ;
18079: LD_ADDR_VAR 0 7
18083: PUSH
18084: LD_VAR 0 5
18088: PPUSH
18089: LD_VAR 0 4
18093: PPUSH
18094: LD_INT 3
18096: PPUSH
18097: CALL_OW 272
18101: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18102: LD_ADDR_VAR 0 8
18106: PUSH
18107: LD_VAR 0 6
18111: PPUSH
18112: LD_VAR 0 4
18116: PPUSH
18117: LD_INT 3
18119: PPUSH
18120: CALL_OW 273
18124: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18125: LD_VAR 0 7
18129: PPUSH
18130: LD_VAR 0 8
18134: PPUSH
18135: CALL_OW 488
18139: NOT
18140: IFFALSE 18144
// continue ;
18142: GO 18076
// if HexInfo ( _x , _y ) = 0 then
18144: LD_VAR 0 7
18148: PPUSH
18149: LD_VAR 0 8
18153: PPUSH
18154: CALL_OW 428
18158: PUSH
18159: LD_INT 0
18161: EQUAL
18162: IFFALSE 18187
// begin ComMoveXY ( unit , _x , _y ) ;
18164: LD_VAR 0 1
18168: PPUSH
18169: LD_VAR 0 7
18173: PPUSH
18174: LD_VAR 0 8
18178: PPUSH
18179: CALL_OW 111
// exit ;
18183: POP
18184: POP
18185: GO 18191
// end ; end ;
18187: GO 18076
18189: POP
18190: POP
// end ;
18191: LD_VAR 0 3
18195: RET
// export function ScanBase ( side , base_area ) ; begin
18196: LD_INT 0
18198: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18199: LD_ADDR_VAR 0 3
18203: PUSH
18204: LD_VAR 0 2
18208: PPUSH
18209: LD_INT 81
18211: PUSH
18212: LD_VAR 0 1
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PPUSH
18221: CALL_OW 70
18225: ST_TO_ADDR
// end ;
18226: LD_VAR 0 3
18230: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18231: LD_INT 0
18233: PPUSH
18234: PPUSH
18235: PPUSH
18236: PPUSH
// result := false ;
18237: LD_ADDR_VAR 0 2
18241: PUSH
18242: LD_INT 0
18244: ST_TO_ADDR
// side := GetSide ( unit ) ;
18245: LD_ADDR_VAR 0 3
18249: PUSH
18250: LD_VAR 0 1
18254: PPUSH
18255: CALL_OW 255
18259: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18260: LD_ADDR_VAR 0 4
18264: PUSH
18265: LD_VAR 0 1
18269: PPUSH
18270: CALL_OW 248
18274: ST_TO_ADDR
// case nat of 1 :
18275: LD_VAR 0 4
18279: PUSH
18280: LD_INT 1
18282: DOUBLE
18283: EQUAL
18284: IFTRUE 18288
18286: GO 18299
18288: POP
// tech := tech_lassight ; 2 :
18289: LD_ADDR_VAR 0 5
18293: PUSH
18294: LD_INT 12
18296: ST_TO_ADDR
18297: GO 18338
18299: LD_INT 2
18301: DOUBLE
18302: EQUAL
18303: IFTRUE 18307
18305: GO 18318
18307: POP
// tech := tech_mortar ; 3 :
18308: LD_ADDR_VAR 0 5
18312: PUSH
18313: LD_INT 41
18315: ST_TO_ADDR
18316: GO 18338
18318: LD_INT 3
18320: DOUBLE
18321: EQUAL
18322: IFTRUE 18326
18324: GO 18337
18326: POP
// tech := tech_bazooka ; end ;
18327: LD_ADDR_VAR 0 5
18331: PUSH
18332: LD_INT 44
18334: ST_TO_ADDR
18335: GO 18338
18337: POP
// if Researched ( side , tech ) then
18338: LD_VAR 0 3
18342: PPUSH
18343: LD_VAR 0 5
18347: PPUSH
18348: CALL_OW 325
18352: IFFALSE 18379
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18354: LD_ADDR_VAR 0 2
18358: PUSH
18359: LD_INT 5
18361: PUSH
18362: LD_INT 8
18364: PUSH
18365: LD_INT 9
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: LIST
18372: PUSH
18373: LD_VAR 0 4
18377: ARRAY
18378: ST_TO_ADDR
// end ;
18379: LD_VAR 0 2
18383: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18384: LD_INT 0
18386: PPUSH
18387: PPUSH
18388: PPUSH
// if not mines then
18389: LD_VAR 0 2
18393: NOT
18394: IFFALSE 18398
// exit ;
18396: GO 18542
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18398: LD_ADDR_VAR 0 5
18402: PUSH
18403: LD_INT 81
18405: PUSH
18406: LD_VAR 0 1
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 3
18417: PUSH
18418: LD_INT 21
18420: PUSH
18421: LD_INT 3
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PPUSH
18436: CALL_OW 69
18440: ST_TO_ADDR
// for i in mines do
18441: LD_ADDR_VAR 0 4
18445: PUSH
18446: LD_VAR 0 2
18450: PUSH
18451: FOR_IN
18452: IFFALSE 18540
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18454: LD_VAR 0 4
18458: PUSH
18459: LD_INT 1
18461: ARRAY
18462: PPUSH
18463: LD_VAR 0 4
18467: PUSH
18468: LD_INT 2
18470: ARRAY
18471: PPUSH
18472: CALL_OW 458
18476: NOT
18477: IFFALSE 18481
// continue ;
18479: GO 18451
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18481: LD_VAR 0 4
18485: PUSH
18486: LD_INT 1
18488: ARRAY
18489: PPUSH
18490: LD_VAR 0 4
18494: PUSH
18495: LD_INT 2
18497: ARRAY
18498: PPUSH
18499: CALL_OW 428
18503: PUSH
18504: LD_VAR 0 5
18508: IN
18509: IFFALSE 18538
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18511: LD_VAR 0 4
18515: PUSH
18516: LD_INT 1
18518: ARRAY
18519: PPUSH
18520: LD_VAR 0 4
18524: PUSH
18525: LD_INT 2
18527: ARRAY
18528: PPUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 456
// end ;
18538: GO 18451
18540: POP
18541: POP
// end ;
18542: LD_VAR 0 3
18546: RET
// export function Count ( array ) ; var i ; begin
18547: LD_INT 0
18549: PPUSH
18550: PPUSH
// result := 0 ;
18551: LD_ADDR_VAR 0 2
18555: PUSH
18556: LD_INT 0
18558: ST_TO_ADDR
// for i in array do
18559: LD_ADDR_VAR 0 3
18563: PUSH
18564: LD_VAR 0 1
18568: PUSH
18569: FOR_IN
18570: IFFALSE 18594
// if i then
18572: LD_VAR 0 3
18576: IFFALSE 18592
// result := result + 1 ;
18578: LD_ADDR_VAR 0 2
18582: PUSH
18583: LD_VAR 0 2
18587: PUSH
18588: LD_INT 1
18590: PLUS
18591: ST_TO_ADDR
18592: GO 18569
18594: POP
18595: POP
// end ;
18596: LD_VAR 0 2
18600: RET
// export function IsEmpty ( building ) ; begin
18601: LD_INT 0
18603: PPUSH
// if not building then
18604: LD_VAR 0 1
18608: NOT
18609: IFFALSE 18613
// exit ;
18611: GO 18656
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18613: LD_ADDR_VAR 0 2
18617: PUSH
18618: LD_VAR 0 1
18622: PUSH
18623: LD_INT 22
18625: PUSH
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL_OW 255
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 58
18642: PUSH
18643: EMPTY
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PPUSH
18650: CALL_OW 69
18654: IN
18655: ST_TO_ADDR
// end ;
18656: LD_VAR 0 2
18660: RET
// export function IsNotFull ( building ) ; var places ; begin
18661: LD_INT 0
18663: PPUSH
18664: PPUSH
// if not building then
18665: LD_VAR 0 1
18669: NOT
18670: IFFALSE 18674
// exit ;
18672: GO 18845
// result := false ;
18674: LD_ADDR_VAR 0 2
18678: PUSH
18679: LD_INT 0
18681: ST_TO_ADDR
// places := 0 ;
18682: LD_ADDR_VAR 0 3
18686: PUSH
18687: LD_INT 0
18689: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
18690: LD_VAR 0 1
18694: PPUSH
18695: CALL_OW 266
18699: PUSH
18700: LD_INT 0
18702: DOUBLE
18703: EQUAL
18704: IFTRUE 18762
18706: LD_INT 1
18708: DOUBLE
18709: EQUAL
18710: IFTRUE 18762
18712: LD_INT 6
18714: DOUBLE
18715: EQUAL
18716: IFTRUE 18762
18718: LD_INT 7
18720: DOUBLE
18721: EQUAL
18722: IFTRUE 18762
18724: LD_INT 8
18726: DOUBLE
18727: EQUAL
18728: IFTRUE 18762
18730: LD_INT 4
18732: DOUBLE
18733: EQUAL
18734: IFTRUE 18762
18736: LD_INT 5
18738: DOUBLE
18739: EQUAL
18740: IFTRUE 18762
18742: LD_INT 2
18744: DOUBLE
18745: EQUAL
18746: IFTRUE 18762
18748: LD_INT 3
18750: DOUBLE
18751: EQUAL
18752: IFTRUE 18762
18754: LD_INT 35
18756: DOUBLE
18757: EQUAL
18758: IFTRUE 18762
18760: GO 18773
18762: POP
// places := 6 ; b_bunker , b_breastwork :
18763: LD_ADDR_VAR 0 3
18767: PUSH
18768: LD_INT 6
18770: ST_TO_ADDR
18771: GO 18818
18773: LD_INT 32
18775: DOUBLE
18776: EQUAL
18777: IFTRUE 18787
18779: LD_INT 31
18781: DOUBLE
18782: EQUAL
18783: IFTRUE 18787
18785: GO 18798
18787: POP
// places := 1 ; b_control_tower :
18788: LD_ADDR_VAR 0 3
18792: PUSH
18793: LD_INT 1
18795: ST_TO_ADDR
18796: GO 18818
18798: LD_INT 36
18800: DOUBLE
18801: EQUAL
18802: IFTRUE 18806
18804: GO 18817
18806: POP
// places := 3 ; end ;
18807: LD_ADDR_VAR 0 3
18811: PUSH
18812: LD_INT 3
18814: ST_TO_ADDR
18815: GO 18818
18817: POP
// if places then
18818: LD_VAR 0 3
18822: IFFALSE 18845
// result := UnitsInside ( building ) < places ;
18824: LD_ADDR_VAR 0 2
18828: PUSH
18829: LD_VAR 0 1
18833: PPUSH
18834: CALL_OW 313
18838: PUSH
18839: LD_VAR 0 3
18843: LESS
18844: ST_TO_ADDR
// end ;
18845: LD_VAR 0 2
18849: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18850: LD_INT 0
18852: PPUSH
18853: PPUSH
18854: PPUSH
18855: PPUSH
// tmp := [ ] ;
18856: LD_ADDR_VAR 0 3
18860: PUSH
18861: EMPTY
18862: ST_TO_ADDR
// list := [ ] ;
18863: LD_ADDR_VAR 0 5
18867: PUSH
18868: EMPTY
18869: ST_TO_ADDR
// for i = 16 to 25 do
18870: LD_ADDR_VAR 0 4
18874: PUSH
18875: DOUBLE
18876: LD_INT 16
18878: DEC
18879: ST_TO_ADDR
18880: LD_INT 25
18882: PUSH
18883: FOR_TO
18884: IFFALSE 18957
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18886: LD_ADDR_VAR 0 3
18890: PUSH
18891: LD_VAR 0 3
18895: PUSH
18896: LD_INT 22
18898: PUSH
18899: LD_VAR 0 1
18903: PPUSH
18904: CALL_OW 255
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 91
18915: PUSH
18916: LD_VAR 0 1
18920: PUSH
18921: LD_INT 6
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 30
18931: PUSH
18932: LD_VAR 0 4
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: PPUSH
18949: CALL_OW 69
18953: ADD
18954: ST_TO_ADDR
18955: GO 18883
18957: POP
18958: POP
// for i = 1 to tmp do
18959: LD_ADDR_VAR 0 4
18963: PUSH
18964: DOUBLE
18965: LD_INT 1
18967: DEC
18968: ST_TO_ADDR
18969: LD_VAR 0 3
18973: PUSH
18974: FOR_TO
18975: IFFALSE 19063
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18977: LD_ADDR_VAR 0 5
18981: PUSH
18982: LD_VAR 0 5
18986: PUSH
18987: LD_VAR 0 3
18991: PUSH
18992: LD_VAR 0 4
18996: ARRAY
18997: PPUSH
18998: CALL_OW 266
19002: PUSH
19003: LD_VAR 0 3
19007: PUSH
19008: LD_VAR 0 4
19012: ARRAY
19013: PPUSH
19014: CALL_OW 250
19018: PUSH
19019: LD_VAR 0 3
19023: PUSH
19024: LD_VAR 0 4
19028: ARRAY
19029: PPUSH
19030: CALL_OW 251
19034: PUSH
19035: LD_VAR 0 3
19039: PUSH
19040: LD_VAR 0 4
19044: ARRAY
19045: PPUSH
19046: CALL_OW 254
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: PUSH
19057: EMPTY
19058: LIST
19059: ADD
19060: ST_TO_ADDR
19061: GO 18974
19063: POP
19064: POP
// result := list ;
19065: LD_ADDR_VAR 0 2
19069: PUSH
19070: LD_VAR 0 5
19074: ST_TO_ADDR
// end ;
19075: LD_VAR 0 2
19079: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19080: LD_INT 0
19082: PPUSH
19083: PPUSH
19084: PPUSH
19085: PPUSH
19086: PPUSH
19087: PPUSH
19088: PPUSH
// if not factory then
19089: LD_VAR 0 1
19093: NOT
19094: IFFALSE 19098
// exit ;
19096: GO 19691
// if control = control_apeman then
19098: LD_VAR 0 4
19102: PUSH
19103: LD_INT 5
19105: EQUAL
19106: IFFALSE 19215
// begin tmp := UnitsInside ( factory ) ;
19108: LD_ADDR_VAR 0 8
19112: PUSH
19113: LD_VAR 0 1
19117: PPUSH
19118: CALL_OW 313
19122: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19123: LD_VAR 0 8
19127: PPUSH
19128: LD_INT 25
19130: PUSH
19131: LD_INT 12
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PPUSH
19138: CALL_OW 72
19142: NOT
19143: IFFALSE 19153
// control := control_manual ;
19145: LD_ADDR_VAR 0 4
19149: PUSH
19150: LD_INT 1
19152: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19153: LD_ADDR_VAR 0 8
19157: PUSH
19158: LD_VAR 0 1
19162: PPUSH
19163: CALL 18850 0 1
19167: ST_TO_ADDR
// if tmp then
19168: LD_VAR 0 8
19172: IFFALSE 19215
// begin for i in tmp do
19174: LD_ADDR_VAR 0 7
19178: PUSH
19179: LD_VAR 0 8
19183: PUSH
19184: FOR_IN
19185: IFFALSE 19213
// if i [ 1 ] = b_ext_radio then
19187: LD_VAR 0 7
19191: PUSH
19192: LD_INT 1
19194: ARRAY
19195: PUSH
19196: LD_INT 22
19198: EQUAL
19199: IFFALSE 19211
// begin control := control_remote ;
19201: LD_ADDR_VAR 0 4
19205: PUSH
19206: LD_INT 2
19208: ST_TO_ADDR
// break ;
19209: GO 19213
// end ;
19211: GO 19184
19213: POP
19214: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19215: LD_VAR 0 1
19219: PPUSH
19220: LD_VAR 0 2
19224: PPUSH
19225: LD_VAR 0 3
19229: PPUSH
19230: LD_VAR 0 4
19234: PPUSH
19235: LD_VAR 0 5
19239: PPUSH
19240: CALL_OW 448
19244: IFFALSE 19279
// begin result := [ chassis , engine , control , weapon ] ;
19246: LD_ADDR_VAR 0 6
19250: PUSH
19251: LD_VAR 0 2
19255: PUSH
19256: LD_VAR 0 3
19260: PUSH
19261: LD_VAR 0 4
19265: PUSH
19266: LD_VAR 0 5
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: ST_TO_ADDR
// exit ;
19277: GO 19691
// end ; _chassis := AvailableChassisList ( factory ) ;
19279: LD_ADDR_VAR 0 9
19283: PUSH
19284: LD_VAR 0 1
19288: PPUSH
19289: CALL_OW 475
19293: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19294: LD_ADDR_VAR 0 11
19298: PUSH
19299: LD_VAR 0 1
19303: PPUSH
19304: CALL_OW 476
19308: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19309: LD_ADDR_VAR 0 12
19313: PUSH
19314: LD_VAR 0 1
19318: PPUSH
19319: CALL_OW 477
19323: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19324: LD_ADDR_VAR 0 10
19328: PUSH
19329: LD_VAR 0 1
19333: PPUSH
19334: CALL_OW 478
19338: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19339: LD_VAR 0 9
19343: NOT
19344: PUSH
19345: LD_VAR 0 11
19349: NOT
19350: OR
19351: PUSH
19352: LD_VAR 0 12
19356: NOT
19357: OR
19358: PUSH
19359: LD_VAR 0 10
19363: NOT
19364: OR
19365: IFFALSE 19400
// begin result := [ chassis , engine , control , weapon ] ;
19367: LD_ADDR_VAR 0 6
19371: PUSH
19372: LD_VAR 0 2
19376: PUSH
19377: LD_VAR 0 3
19381: PUSH
19382: LD_VAR 0 4
19386: PUSH
19387: LD_VAR 0 5
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: ST_TO_ADDR
// exit ;
19398: GO 19691
// end ; if not chassis in _chassis then
19400: LD_VAR 0 2
19404: PUSH
19405: LD_VAR 0 9
19409: IN
19410: NOT
19411: IFFALSE 19437
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19413: LD_ADDR_VAR 0 2
19417: PUSH
19418: LD_VAR 0 9
19422: PUSH
19423: LD_INT 1
19425: PPUSH
19426: LD_VAR 0 9
19430: PPUSH
19431: CALL_OW 12
19435: ARRAY
19436: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19437: LD_VAR 0 2
19441: PPUSH
19442: LD_VAR 0 3
19446: PPUSH
19447: CALL 19696 0 2
19451: NOT
19452: IFFALSE 19511
// repeat engine := _engine [ 1 ] ;
19454: LD_ADDR_VAR 0 3
19458: PUSH
19459: LD_VAR 0 11
19463: PUSH
19464: LD_INT 1
19466: ARRAY
19467: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19468: LD_ADDR_VAR 0 11
19472: PUSH
19473: LD_VAR 0 11
19477: PPUSH
19478: LD_INT 1
19480: PPUSH
19481: CALL_OW 3
19485: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19486: LD_VAR 0 2
19490: PPUSH
19491: LD_VAR 0 3
19495: PPUSH
19496: CALL 19696 0 2
19500: PUSH
19501: LD_VAR 0 11
19505: PUSH
19506: EMPTY
19507: EQUAL
19508: OR
19509: IFFALSE 19454
// if not control in _control then
19511: LD_VAR 0 4
19515: PUSH
19516: LD_VAR 0 12
19520: IN
19521: NOT
19522: IFFALSE 19548
// control := _control [ rand ( 1 , _control ) ] ;
19524: LD_ADDR_VAR 0 4
19528: PUSH
19529: LD_VAR 0 12
19533: PUSH
19534: LD_INT 1
19536: PPUSH
19537: LD_VAR 0 12
19541: PPUSH
19542: CALL_OW 12
19546: ARRAY
19547: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19548: LD_VAR 0 2
19552: PPUSH
19553: LD_VAR 0 5
19557: PPUSH
19558: CALL 19916 0 2
19562: NOT
19563: IFFALSE 19622
// repeat weapon := _weapon [ 1 ] ;
19565: LD_ADDR_VAR 0 5
19569: PUSH
19570: LD_VAR 0 10
19574: PUSH
19575: LD_INT 1
19577: ARRAY
19578: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19579: LD_ADDR_VAR 0 10
19583: PUSH
19584: LD_VAR 0 10
19588: PPUSH
19589: LD_INT 1
19591: PPUSH
19592: CALL_OW 3
19596: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19597: LD_VAR 0 2
19601: PPUSH
19602: LD_VAR 0 5
19606: PPUSH
19607: CALL 19916 0 2
19611: PUSH
19612: LD_VAR 0 10
19616: PUSH
19617: EMPTY
19618: EQUAL
19619: OR
19620: IFFALSE 19565
// result := [ ] ;
19622: LD_ADDR_VAR 0 6
19626: PUSH
19627: EMPTY
19628: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19629: LD_VAR 0 1
19633: PPUSH
19634: LD_VAR 0 2
19638: PPUSH
19639: LD_VAR 0 3
19643: PPUSH
19644: LD_VAR 0 4
19648: PPUSH
19649: LD_VAR 0 5
19653: PPUSH
19654: CALL_OW 448
19658: IFFALSE 19691
// result := [ chassis , engine , control , weapon ] ;
19660: LD_ADDR_VAR 0 6
19664: PUSH
19665: LD_VAR 0 2
19669: PUSH
19670: LD_VAR 0 3
19674: PUSH
19675: LD_VAR 0 4
19679: PUSH
19680: LD_VAR 0 5
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: ST_TO_ADDR
// end ;
19691: LD_VAR 0 6
19695: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19696: LD_INT 0
19698: PPUSH
// if not chassis or not engine then
19699: LD_VAR 0 1
19703: NOT
19704: PUSH
19705: LD_VAR 0 2
19709: NOT
19710: OR
19711: IFFALSE 19715
// exit ;
19713: GO 19911
// case engine of engine_solar :
19715: LD_VAR 0 2
19719: PUSH
19720: LD_INT 2
19722: DOUBLE
19723: EQUAL
19724: IFTRUE 19728
19726: GO 19766
19728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19729: LD_ADDR_VAR 0 3
19733: PUSH
19734: LD_INT 11
19736: PUSH
19737: LD_INT 12
19739: PUSH
19740: LD_INT 13
19742: PUSH
19743: LD_INT 14
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: LD_INT 2
19751: PUSH
19752: LD_INT 3
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: ST_TO_ADDR
19764: GO 19895
19766: LD_INT 1
19768: DOUBLE
19769: EQUAL
19770: IFTRUE 19774
19772: GO 19836
19774: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19775: LD_ADDR_VAR 0 3
19779: PUSH
19780: LD_INT 11
19782: PUSH
19783: LD_INT 12
19785: PUSH
19786: LD_INT 13
19788: PUSH
19789: LD_INT 14
19791: PUSH
19792: LD_INT 1
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: LD_INT 3
19800: PUSH
19801: LD_INT 4
19803: PUSH
19804: LD_INT 5
19806: PUSH
19807: LD_INT 21
19809: PUSH
19810: LD_INT 23
19812: PUSH
19813: LD_INT 22
19815: PUSH
19816: LD_INT 24
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: ST_TO_ADDR
19834: GO 19895
19836: LD_INT 3
19838: DOUBLE
19839: EQUAL
19840: IFTRUE 19844
19842: GO 19894
19844: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19845: LD_ADDR_VAR 0 3
19849: PUSH
19850: LD_INT 13
19852: PUSH
19853: LD_INT 14
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: LD_INT 3
19861: PUSH
19862: LD_INT 4
19864: PUSH
19865: LD_INT 5
19867: PUSH
19868: LD_INT 21
19870: PUSH
19871: LD_INT 22
19873: PUSH
19874: LD_INT 23
19876: PUSH
19877: LD_INT 24
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: ST_TO_ADDR
19892: GO 19895
19894: POP
// result := ( chassis in result ) ;
19895: LD_ADDR_VAR 0 3
19899: PUSH
19900: LD_VAR 0 1
19904: PUSH
19905: LD_VAR 0 3
19909: IN
19910: ST_TO_ADDR
// end ;
19911: LD_VAR 0 3
19915: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19916: LD_INT 0
19918: PPUSH
// if not chassis or not weapon then
19919: LD_VAR 0 1
19923: NOT
19924: PUSH
19925: LD_VAR 0 2
19929: NOT
19930: OR
19931: IFFALSE 19935
// exit ;
19933: GO 20995
// case weapon of us_machine_gun :
19935: LD_VAR 0 2
19939: PUSH
19940: LD_INT 2
19942: DOUBLE
19943: EQUAL
19944: IFTRUE 19948
19946: GO 19978
19948: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19949: LD_ADDR_VAR 0 3
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: LD_INT 2
19959: PUSH
19960: LD_INT 3
19962: PUSH
19963: LD_INT 4
19965: PUSH
19966: LD_INT 5
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: ST_TO_ADDR
19976: GO 20979
19978: LD_INT 3
19980: DOUBLE
19981: EQUAL
19982: IFTRUE 19986
19984: GO 20016
19986: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19987: LD_ADDR_VAR 0 3
19991: PUSH
19992: LD_INT 1
19994: PUSH
19995: LD_INT 2
19997: PUSH
19998: LD_INT 3
20000: PUSH
20001: LD_INT 4
20003: PUSH
20004: LD_INT 5
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: ST_TO_ADDR
20014: GO 20979
20016: LD_INT 11
20018: DOUBLE
20019: EQUAL
20020: IFTRUE 20024
20022: GO 20054
20024: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20025: LD_ADDR_VAR 0 3
20029: PUSH
20030: LD_INT 1
20032: PUSH
20033: LD_INT 2
20035: PUSH
20036: LD_INT 3
20038: PUSH
20039: LD_INT 4
20041: PUSH
20042: LD_INT 5
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: ST_TO_ADDR
20052: GO 20979
20054: LD_INT 4
20056: DOUBLE
20057: EQUAL
20058: IFTRUE 20062
20060: GO 20088
20062: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20063: LD_ADDR_VAR 0 3
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: LD_INT 3
20073: PUSH
20074: LD_INT 4
20076: PUSH
20077: LD_INT 5
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: ST_TO_ADDR
20086: GO 20979
20088: LD_INT 5
20090: DOUBLE
20091: EQUAL
20092: IFTRUE 20096
20094: GO 20122
20096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20097: LD_ADDR_VAR 0 3
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: LD_INT 3
20107: PUSH
20108: LD_INT 4
20110: PUSH
20111: LD_INT 5
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: ST_TO_ADDR
20120: GO 20979
20122: LD_INT 9
20124: DOUBLE
20125: EQUAL
20126: IFTRUE 20130
20128: GO 20156
20130: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20131: LD_ADDR_VAR 0 3
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: LD_INT 3
20141: PUSH
20142: LD_INT 4
20144: PUSH
20145: LD_INT 5
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: ST_TO_ADDR
20154: GO 20979
20156: LD_INT 7
20158: DOUBLE
20159: EQUAL
20160: IFTRUE 20164
20162: GO 20190
20164: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20165: LD_ADDR_VAR 0 3
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: LD_INT 3
20175: PUSH
20176: LD_INT 4
20178: PUSH
20179: LD_INT 5
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: ST_TO_ADDR
20188: GO 20979
20190: LD_INT 12
20192: DOUBLE
20193: EQUAL
20194: IFTRUE 20198
20196: GO 20224
20198: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20199: LD_ADDR_VAR 0 3
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: LD_INT 3
20209: PUSH
20210: LD_INT 4
20212: PUSH
20213: LD_INT 5
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: ST_TO_ADDR
20222: GO 20979
20224: LD_INT 13
20226: DOUBLE
20227: EQUAL
20228: IFTRUE 20232
20230: GO 20258
20232: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20233: LD_ADDR_VAR 0 3
20237: PUSH
20238: LD_INT 2
20240: PUSH
20241: LD_INT 3
20243: PUSH
20244: LD_INT 4
20246: PUSH
20247: LD_INT 5
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: ST_TO_ADDR
20256: GO 20979
20258: LD_INT 14
20260: DOUBLE
20261: EQUAL
20262: IFTRUE 20266
20264: GO 20284
20266: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20267: LD_ADDR_VAR 0 3
20271: PUSH
20272: LD_INT 4
20274: PUSH
20275: LD_INT 5
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: ST_TO_ADDR
20282: GO 20979
20284: LD_INT 6
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20310
20292: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20293: LD_ADDR_VAR 0 3
20297: PUSH
20298: LD_INT 4
20300: PUSH
20301: LD_INT 5
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: ST_TO_ADDR
20308: GO 20979
20310: LD_INT 10
20312: DOUBLE
20313: EQUAL
20314: IFTRUE 20318
20316: GO 20336
20318: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20319: LD_ADDR_VAR 0 3
20323: PUSH
20324: LD_INT 4
20326: PUSH
20327: LD_INT 5
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: ST_TO_ADDR
20334: GO 20979
20336: LD_INT 22
20338: DOUBLE
20339: EQUAL
20340: IFTRUE 20344
20342: GO 20370
20344: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20345: LD_ADDR_VAR 0 3
20349: PUSH
20350: LD_INT 11
20352: PUSH
20353: LD_INT 12
20355: PUSH
20356: LD_INT 13
20358: PUSH
20359: LD_INT 14
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: ST_TO_ADDR
20368: GO 20979
20370: LD_INT 23
20372: DOUBLE
20373: EQUAL
20374: IFTRUE 20378
20376: GO 20404
20378: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20379: LD_ADDR_VAR 0 3
20383: PUSH
20384: LD_INT 11
20386: PUSH
20387: LD_INT 12
20389: PUSH
20390: LD_INT 13
20392: PUSH
20393: LD_INT 14
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: ST_TO_ADDR
20402: GO 20979
20404: LD_INT 24
20406: DOUBLE
20407: EQUAL
20408: IFTRUE 20412
20410: GO 20438
20412: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20413: LD_ADDR_VAR 0 3
20417: PUSH
20418: LD_INT 11
20420: PUSH
20421: LD_INT 12
20423: PUSH
20424: LD_INT 13
20426: PUSH
20427: LD_INT 14
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: ST_TO_ADDR
20436: GO 20979
20438: LD_INT 30
20440: DOUBLE
20441: EQUAL
20442: IFTRUE 20446
20444: GO 20472
20446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20447: LD_ADDR_VAR 0 3
20451: PUSH
20452: LD_INT 11
20454: PUSH
20455: LD_INT 12
20457: PUSH
20458: LD_INT 13
20460: PUSH
20461: LD_INT 14
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: ST_TO_ADDR
20470: GO 20979
20472: LD_INT 25
20474: DOUBLE
20475: EQUAL
20476: IFTRUE 20480
20478: GO 20498
20480: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20481: LD_ADDR_VAR 0 3
20485: PUSH
20486: LD_INT 13
20488: PUSH
20489: LD_INT 14
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: ST_TO_ADDR
20496: GO 20979
20498: LD_INT 27
20500: DOUBLE
20501: EQUAL
20502: IFTRUE 20506
20504: GO 20524
20506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20507: LD_ADDR_VAR 0 3
20511: PUSH
20512: LD_INT 13
20514: PUSH
20515: LD_INT 14
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: ST_TO_ADDR
20522: GO 20979
20524: LD_INT 92
20526: DOUBLE
20527: EQUAL
20528: IFTRUE 20532
20530: GO 20558
20532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20533: LD_ADDR_VAR 0 3
20537: PUSH
20538: LD_INT 11
20540: PUSH
20541: LD_INT 12
20543: PUSH
20544: LD_INT 13
20546: PUSH
20547: LD_INT 14
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: ST_TO_ADDR
20556: GO 20979
20558: LD_INT 28
20560: DOUBLE
20561: EQUAL
20562: IFTRUE 20566
20564: GO 20584
20566: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20567: LD_ADDR_VAR 0 3
20571: PUSH
20572: LD_INT 13
20574: PUSH
20575: LD_INT 14
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: ST_TO_ADDR
20582: GO 20979
20584: LD_INT 29
20586: DOUBLE
20587: EQUAL
20588: IFTRUE 20592
20590: GO 20610
20592: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20593: LD_ADDR_VAR 0 3
20597: PUSH
20598: LD_INT 13
20600: PUSH
20601: LD_INT 14
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: ST_TO_ADDR
20608: GO 20979
20610: LD_INT 31
20612: DOUBLE
20613: EQUAL
20614: IFTRUE 20618
20616: GO 20636
20618: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20619: LD_ADDR_VAR 0 3
20623: PUSH
20624: LD_INT 13
20626: PUSH
20627: LD_INT 14
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: ST_TO_ADDR
20634: GO 20979
20636: LD_INT 26
20638: DOUBLE
20639: EQUAL
20640: IFTRUE 20644
20642: GO 20662
20644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20645: LD_ADDR_VAR 0 3
20649: PUSH
20650: LD_INT 13
20652: PUSH
20653: LD_INT 14
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: ST_TO_ADDR
20660: GO 20979
20662: LD_INT 42
20664: DOUBLE
20665: EQUAL
20666: IFTRUE 20670
20668: GO 20696
20670: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20671: LD_ADDR_VAR 0 3
20675: PUSH
20676: LD_INT 21
20678: PUSH
20679: LD_INT 22
20681: PUSH
20682: LD_INT 23
20684: PUSH
20685: LD_INT 24
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: ST_TO_ADDR
20694: GO 20979
20696: LD_INT 43
20698: DOUBLE
20699: EQUAL
20700: IFTRUE 20704
20702: GO 20730
20704: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20705: LD_ADDR_VAR 0 3
20709: PUSH
20710: LD_INT 21
20712: PUSH
20713: LD_INT 22
20715: PUSH
20716: LD_INT 23
20718: PUSH
20719: LD_INT 24
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: ST_TO_ADDR
20728: GO 20979
20730: LD_INT 44
20732: DOUBLE
20733: EQUAL
20734: IFTRUE 20738
20736: GO 20764
20738: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20739: LD_ADDR_VAR 0 3
20743: PUSH
20744: LD_INT 21
20746: PUSH
20747: LD_INT 22
20749: PUSH
20750: LD_INT 23
20752: PUSH
20753: LD_INT 24
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: ST_TO_ADDR
20762: GO 20979
20764: LD_INT 45
20766: DOUBLE
20767: EQUAL
20768: IFTRUE 20772
20770: GO 20798
20772: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20773: LD_ADDR_VAR 0 3
20777: PUSH
20778: LD_INT 21
20780: PUSH
20781: LD_INT 22
20783: PUSH
20784: LD_INT 23
20786: PUSH
20787: LD_INT 24
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: ST_TO_ADDR
20796: GO 20979
20798: LD_INT 49
20800: DOUBLE
20801: EQUAL
20802: IFTRUE 20806
20804: GO 20832
20806: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20807: LD_ADDR_VAR 0 3
20811: PUSH
20812: LD_INT 21
20814: PUSH
20815: LD_INT 22
20817: PUSH
20818: LD_INT 23
20820: PUSH
20821: LD_INT 24
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: ST_TO_ADDR
20830: GO 20979
20832: LD_INT 51
20834: DOUBLE
20835: EQUAL
20836: IFTRUE 20840
20838: GO 20866
20840: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20841: LD_ADDR_VAR 0 3
20845: PUSH
20846: LD_INT 21
20848: PUSH
20849: LD_INT 22
20851: PUSH
20852: LD_INT 23
20854: PUSH
20855: LD_INT 24
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: ST_TO_ADDR
20864: GO 20979
20866: LD_INT 52
20868: DOUBLE
20869: EQUAL
20870: IFTRUE 20874
20872: GO 20900
20874: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20875: LD_ADDR_VAR 0 3
20879: PUSH
20880: LD_INT 21
20882: PUSH
20883: LD_INT 22
20885: PUSH
20886: LD_INT 23
20888: PUSH
20889: LD_INT 24
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: ST_TO_ADDR
20898: GO 20979
20900: LD_INT 53
20902: DOUBLE
20903: EQUAL
20904: IFTRUE 20908
20906: GO 20926
20908: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20909: LD_ADDR_VAR 0 3
20913: PUSH
20914: LD_INT 23
20916: PUSH
20917: LD_INT 24
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: ST_TO_ADDR
20924: GO 20979
20926: LD_INT 46
20928: DOUBLE
20929: EQUAL
20930: IFTRUE 20934
20932: GO 20952
20934: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20935: LD_ADDR_VAR 0 3
20939: PUSH
20940: LD_INT 23
20942: PUSH
20943: LD_INT 24
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: ST_TO_ADDR
20950: GO 20979
20952: LD_INT 47
20954: DOUBLE
20955: EQUAL
20956: IFTRUE 20960
20958: GO 20978
20960: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20961: LD_ADDR_VAR 0 3
20965: PUSH
20966: LD_INT 23
20968: PUSH
20969: LD_INT 24
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: ST_TO_ADDR
20976: GO 20979
20978: POP
// result := ( chassis in result ) ;
20979: LD_ADDR_VAR 0 3
20983: PUSH
20984: LD_VAR 0 1
20988: PUSH
20989: LD_VAR 0 3
20993: IN
20994: ST_TO_ADDR
// end ;
20995: LD_VAR 0 3
20999: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21000: LD_INT 0
21002: PPUSH
21003: PPUSH
21004: PPUSH
21005: PPUSH
21006: PPUSH
21007: PPUSH
21008: PPUSH
// result := array ;
21009: LD_ADDR_VAR 0 5
21013: PUSH
21014: LD_VAR 0 1
21018: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21019: LD_VAR 0 1
21023: NOT
21024: PUSH
21025: LD_VAR 0 2
21029: NOT
21030: OR
21031: PUSH
21032: LD_VAR 0 3
21036: NOT
21037: OR
21038: PUSH
21039: LD_VAR 0 2
21043: PUSH
21044: LD_VAR 0 1
21048: GREATER
21049: OR
21050: PUSH
21051: LD_VAR 0 3
21055: PUSH
21056: LD_VAR 0 1
21060: GREATER
21061: OR
21062: IFFALSE 21066
// exit ;
21064: GO 21362
// if direction then
21066: LD_VAR 0 4
21070: IFFALSE 21134
// begin d := 1 ;
21072: LD_ADDR_VAR 0 9
21076: PUSH
21077: LD_INT 1
21079: ST_TO_ADDR
// if i_from > i_to then
21080: LD_VAR 0 2
21084: PUSH
21085: LD_VAR 0 3
21089: GREATER
21090: IFFALSE 21116
// length := ( array - i_from ) + i_to else
21092: LD_ADDR_VAR 0 11
21096: PUSH
21097: LD_VAR 0 1
21101: PUSH
21102: LD_VAR 0 2
21106: MINUS
21107: PUSH
21108: LD_VAR 0 3
21112: PLUS
21113: ST_TO_ADDR
21114: GO 21132
// length := i_to - i_from ;
21116: LD_ADDR_VAR 0 11
21120: PUSH
21121: LD_VAR 0 3
21125: PUSH
21126: LD_VAR 0 2
21130: MINUS
21131: ST_TO_ADDR
// end else
21132: GO 21195
// begin d := - 1 ;
21134: LD_ADDR_VAR 0 9
21138: PUSH
21139: LD_INT 1
21141: NEG
21142: ST_TO_ADDR
// if i_from > i_to then
21143: LD_VAR 0 2
21147: PUSH
21148: LD_VAR 0 3
21152: GREATER
21153: IFFALSE 21173
// length := i_from - i_to else
21155: LD_ADDR_VAR 0 11
21159: PUSH
21160: LD_VAR 0 2
21164: PUSH
21165: LD_VAR 0 3
21169: MINUS
21170: ST_TO_ADDR
21171: GO 21195
// length := ( array - i_to ) + i_from ;
21173: LD_ADDR_VAR 0 11
21177: PUSH
21178: LD_VAR 0 1
21182: PUSH
21183: LD_VAR 0 3
21187: MINUS
21188: PUSH
21189: LD_VAR 0 2
21193: PLUS
21194: ST_TO_ADDR
// end ; if not length then
21195: LD_VAR 0 11
21199: NOT
21200: IFFALSE 21204
// exit ;
21202: GO 21362
// tmp := array ;
21204: LD_ADDR_VAR 0 10
21208: PUSH
21209: LD_VAR 0 1
21213: ST_TO_ADDR
// for i = 1 to length do
21214: LD_ADDR_VAR 0 6
21218: PUSH
21219: DOUBLE
21220: LD_INT 1
21222: DEC
21223: ST_TO_ADDR
21224: LD_VAR 0 11
21228: PUSH
21229: FOR_TO
21230: IFFALSE 21350
// begin for j = 1 to array do
21232: LD_ADDR_VAR 0 7
21236: PUSH
21237: DOUBLE
21238: LD_INT 1
21240: DEC
21241: ST_TO_ADDR
21242: LD_VAR 0 1
21246: PUSH
21247: FOR_TO
21248: IFFALSE 21336
// begin k := j + d ;
21250: LD_ADDR_VAR 0 8
21254: PUSH
21255: LD_VAR 0 7
21259: PUSH
21260: LD_VAR 0 9
21264: PLUS
21265: ST_TO_ADDR
// if k > array then
21266: LD_VAR 0 8
21270: PUSH
21271: LD_VAR 0 1
21275: GREATER
21276: IFFALSE 21286
// k := 1 ;
21278: LD_ADDR_VAR 0 8
21282: PUSH
21283: LD_INT 1
21285: ST_TO_ADDR
// if not k then
21286: LD_VAR 0 8
21290: NOT
21291: IFFALSE 21303
// k := array ;
21293: LD_ADDR_VAR 0 8
21297: PUSH
21298: LD_VAR 0 1
21302: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21303: LD_ADDR_VAR 0 10
21307: PUSH
21308: LD_VAR 0 10
21312: PPUSH
21313: LD_VAR 0 8
21317: PPUSH
21318: LD_VAR 0 1
21322: PUSH
21323: LD_VAR 0 7
21327: ARRAY
21328: PPUSH
21329: CALL_OW 1
21333: ST_TO_ADDR
// end ;
21334: GO 21247
21336: POP
21337: POP
// array := tmp ;
21338: LD_ADDR_VAR 0 1
21342: PUSH
21343: LD_VAR 0 10
21347: ST_TO_ADDR
// end ;
21348: GO 21229
21350: POP
21351: POP
// result := array ;
21352: LD_ADDR_VAR 0 5
21356: PUSH
21357: LD_VAR 0 1
21361: ST_TO_ADDR
// end ;
21362: LD_VAR 0 5
21366: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21367: LD_INT 0
21369: PPUSH
21370: PPUSH
// result := 0 ;
21371: LD_ADDR_VAR 0 3
21375: PUSH
21376: LD_INT 0
21378: ST_TO_ADDR
// if not array or not value in array then
21379: LD_VAR 0 1
21383: NOT
21384: PUSH
21385: LD_VAR 0 2
21389: PUSH
21390: LD_VAR 0 1
21394: IN
21395: NOT
21396: OR
21397: IFFALSE 21401
// exit ;
21399: GO 21455
// for i = 1 to array do
21401: LD_ADDR_VAR 0 4
21405: PUSH
21406: DOUBLE
21407: LD_INT 1
21409: DEC
21410: ST_TO_ADDR
21411: LD_VAR 0 1
21415: PUSH
21416: FOR_TO
21417: IFFALSE 21453
// if value = array [ i ] then
21419: LD_VAR 0 2
21423: PUSH
21424: LD_VAR 0 1
21428: PUSH
21429: LD_VAR 0 4
21433: ARRAY
21434: EQUAL
21435: IFFALSE 21451
// begin result := i ;
21437: LD_ADDR_VAR 0 3
21441: PUSH
21442: LD_VAR 0 4
21446: ST_TO_ADDR
// exit ;
21447: POP
21448: POP
21449: GO 21455
// end ;
21451: GO 21416
21453: POP
21454: POP
// end ;
21455: LD_VAR 0 3
21459: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21460: LD_INT 0
21462: PPUSH
// vc_chassis := chassis ;
21463: LD_ADDR_OWVAR 37
21467: PUSH
21468: LD_VAR 0 1
21472: ST_TO_ADDR
// vc_engine := engine ;
21473: LD_ADDR_OWVAR 39
21477: PUSH
21478: LD_VAR 0 2
21482: ST_TO_ADDR
// vc_control := control ;
21483: LD_ADDR_OWVAR 38
21487: PUSH
21488: LD_VAR 0 3
21492: ST_TO_ADDR
// vc_weapon := weapon ;
21493: LD_ADDR_OWVAR 40
21497: PUSH
21498: LD_VAR 0 4
21502: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21503: LD_ADDR_OWVAR 41
21507: PUSH
21508: LD_VAR 0 5
21512: ST_TO_ADDR
// end ;
21513: LD_VAR 0 6
21517: RET
// export function WantPlant ( unit ) ; var task ; begin
21518: LD_INT 0
21520: PPUSH
21521: PPUSH
// result := false ;
21522: LD_ADDR_VAR 0 2
21526: PUSH
21527: LD_INT 0
21529: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21530: LD_ADDR_VAR 0 3
21534: PUSH
21535: LD_VAR 0 1
21539: PPUSH
21540: CALL_OW 437
21544: ST_TO_ADDR
// if task then
21545: LD_VAR 0 3
21549: IFFALSE 21577
// if task [ 1 ] [ 1 ] = p then
21551: LD_VAR 0 3
21555: PUSH
21556: LD_INT 1
21558: ARRAY
21559: PUSH
21560: LD_INT 1
21562: ARRAY
21563: PUSH
21564: LD_STRING p
21566: EQUAL
21567: IFFALSE 21577
// result := true ;
21569: LD_ADDR_VAR 0 2
21573: PUSH
21574: LD_INT 1
21576: ST_TO_ADDR
// end ;
21577: LD_VAR 0 2
21581: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21582: LD_INT 0
21584: PPUSH
21585: PPUSH
21586: PPUSH
21587: PPUSH
// if pos < 1 then
21588: LD_VAR 0 2
21592: PUSH
21593: LD_INT 1
21595: LESS
21596: IFFALSE 21600
// exit ;
21598: GO 21903
// if pos = 1 then
21600: LD_VAR 0 2
21604: PUSH
21605: LD_INT 1
21607: EQUAL
21608: IFFALSE 21641
// result := Replace ( arr , pos [ 1 ] , value ) else
21610: LD_ADDR_VAR 0 4
21614: PUSH
21615: LD_VAR 0 1
21619: PPUSH
21620: LD_VAR 0 2
21624: PUSH
21625: LD_INT 1
21627: ARRAY
21628: PPUSH
21629: LD_VAR 0 3
21633: PPUSH
21634: CALL_OW 1
21638: ST_TO_ADDR
21639: GO 21903
// begin tmp := arr ;
21641: LD_ADDR_VAR 0 6
21645: PUSH
21646: LD_VAR 0 1
21650: ST_TO_ADDR
// s_arr := [ tmp ] ;
21651: LD_ADDR_VAR 0 7
21655: PUSH
21656: LD_VAR 0 6
21660: PUSH
21661: EMPTY
21662: LIST
21663: ST_TO_ADDR
// for i = 1 to pos - 1 do
21664: LD_ADDR_VAR 0 5
21668: PUSH
21669: DOUBLE
21670: LD_INT 1
21672: DEC
21673: ST_TO_ADDR
21674: LD_VAR 0 2
21678: PUSH
21679: LD_INT 1
21681: MINUS
21682: PUSH
21683: FOR_TO
21684: IFFALSE 21729
// begin tmp := tmp [ pos [ i ] ] ;
21686: LD_ADDR_VAR 0 6
21690: PUSH
21691: LD_VAR 0 6
21695: PUSH
21696: LD_VAR 0 2
21700: PUSH
21701: LD_VAR 0 5
21705: ARRAY
21706: ARRAY
21707: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21708: LD_ADDR_VAR 0 7
21712: PUSH
21713: LD_VAR 0 7
21717: PUSH
21718: LD_VAR 0 6
21722: PUSH
21723: EMPTY
21724: LIST
21725: ADD
21726: ST_TO_ADDR
// end ;
21727: GO 21683
21729: POP
21730: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21731: LD_ADDR_VAR 0 6
21735: PUSH
21736: LD_VAR 0 6
21740: PPUSH
21741: LD_VAR 0 2
21745: PUSH
21746: LD_VAR 0 2
21750: ARRAY
21751: PPUSH
21752: LD_VAR 0 3
21756: PPUSH
21757: CALL_OW 1
21761: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21762: LD_ADDR_VAR 0 7
21766: PUSH
21767: LD_VAR 0 7
21771: PPUSH
21772: LD_VAR 0 7
21776: PPUSH
21777: LD_VAR 0 6
21781: PPUSH
21782: CALL_OW 1
21786: ST_TO_ADDR
// for i = s_arr downto 2 do
21787: LD_ADDR_VAR 0 5
21791: PUSH
21792: DOUBLE
21793: LD_VAR 0 7
21797: INC
21798: ST_TO_ADDR
21799: LD_INT 2
21801: PUSH
21802: FOR_DOWNTO
21803: IFFALSE 21887
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21805: LD_ADDR_VAR 0 6
21809: PUSH
21810: LD_VAR 0 7
21814: PUSH
21815: LD_VAR 0 5
21819: PUSH
21820: LD_INT 1
21822: MINUS
21823: ARRAY
21824: PPUSH
21825: LD_VAR 0 2
21829: PUSH
21830: LD_VAR 0 5
21834: PUSH
21835: LD_INT 1
21837: MINUS
21838: ARRAY
21839: PPUSH
21840: LD_VAR 0 7
21844: PUSH
21845: LD_VAR 0 5
21849: ARRAY
21850: PPUSH
21851: CALL_OW 1
21855: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21856: LD_ADDR_VAR 0 7
21860: PUSH
21861: LD_VAR 0 7
21865: PPUSH
21866: LD_VAR 0 5
21870: PUSH
21871: LD_INT 1
21873: MINUS
21874: PPUSH
21875: LD_VAR 0 6
21879: PPUSH
21880: CALL_OW 1
21884: ST_TO_ADDR
// end ;
21885: GO 21802
21887: POP
21888: POP
// result := s_arr [ 1 ] ;
21889: LD_ADDR_VAR 0 4
21893: PUSH
21894: LD_VAR 0 7
21898: PUSH
21899: LD_INT 1
21901: ARRAY
21902: ST_TO_ADDR
// end ; end ;
21903: LD_VAR 0 4
21907: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21908: LD_INT 0
21910: PPUSH
21911: PPUSH
// if not list then
21912: LD_VAR 0 1
21916: NOT
21917: IFFALSE 21921
// exit ;
21919: GO 22012
// i := list [ pos1 ] ;
21921: LD_ADDR_VAR 0 5
21925: PUSH
21926: LD_VAR 0 1
21930: PUSH
21931: LD_VAR 0 2
21935: ARRAY
21936: ST_TO_ADDR
// if not i then
21937: LD_VAR 0 5
21941: NOT
21942: IFFALSE 21946
// exit ;
21944: GO 22012
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21946: LD_ADDR_VAR 0 1
21950: PUSH
21951: LD_VAR 0 1
21955: PPUSH
21956: LD_VAR 0 2
21960: PPUSH
21961: LD_VAR 0 1
21965: PUSH
21966: LD_VAR 0 3
21970: ARRAY
21971: PPUSH
21972: CALL_OW 1
21976: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21977: LD_ADDR_VAR 0 1
21981: PUSH
21982: LD_VAR 0 1
21986: PPUSH
21987: LD_VAR 0 3
21991: PPUSH
21992: LD_VAR 0 5
21996: PPUSH
21997: CALL_OW 1
22001: ST_TO_ADDR
// result := list ;
22002: LD_ADDR_VAR 0 4
22006: PUSH
22007: LD_VAR 0 1
22011: ST_TO_ADDR
// end ;
22012: LD_VAR 0 4
22016: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22017: LD_INT 0
22019: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22020: LD_ADDR_VAR 0 5
22024: PUSH
22025: LD_VAR 0 1
22029: PPUSH
22030: CALL_OW 250
22034: PPUSH
22035: LD_VAR 0 1
22039: PPUSH
22040: CALL_OW 251
22044: PPUSH
22045: LD_VAR 0 2
22049: PPUSH
22050: LD_VAR 0 3
22054: PPUSH
22055: LD_VAR 0 4
22059: PPUSH
22060: CALL 22070 0 5
22064: ST_TO_ADDR
// end ;
22065: LD_VAR 0 5
22069: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22070: LD_INT 0
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
// if not list then
22076: LD_VAR 0 3
22080: NOT
22081: IFFALSE 22085
// exit ;
22083: GO 22473
// result := [ ] ;
22085: LD_ADDR_VAR 0 6
22089: PUSH
22090: EMPTY
22091: ST_TO_ADDR
// for i in list do
22092: LD_ADDR_VAR 0 7
22096: PUSH
22097: LD_VAR 0 3
22101: PUSH
22102: FOR_IN
22103: IFFALSE 22305
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22105: LD_ADDR_VAR 0 9
22109: PUSH
22110: LD_VAR 0 7
22114: PPUSH
22115: LD_VAR 0 1
22119: PPUSH
22120: LD_VAR 0 2
22124: PPUSH
22125: CALL_OW 297
22129: ST_TO_ADDR
// if not result then
22130: LD_VAR 0 6
22134: NOT
22135: IFFALSE 22161
// result := [ [ i , tmp ] ] else
22137: LD_ADDR_VAR 0 6
22141: PUSH
22142: LD_VAR 0 7
22146: PUSH
22147: LD_VAR 0 9
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: EMPTY
22157: LIST
22158: ST_TO_ADDR
22159: GO 22303
// begin if result [ result ] [ 2 ] < tmp then
22161: LD_VAR 0 6
22165: PUSH
22166: LD_VAR 0 6
22170: ARRAY
22171: PUSH
22172: LD_INT 2
22174: ARRAY
22175: PUSH
22176: LD_VAR 0 9
22180: LESS
22181: IFFALSE 22223
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22183: LD_ADDR_VAR 0 6
22187: PUSH
22188: LD_VAR 0 6
22192: PPUSH
22193: LD_VAR 0 6
22197: PUSH
22198: LD_INT 1
22200: PLUS
22201: PPUSH
22202: LD_VAR 0 7
22206: PUSH
22207: LD_VAR 0 9
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PPUSH
22216: CALL_OW 2
22220: ST_TO_ADDR
22221: GO 22303
// for j = 1 to result do
22223: LD_ADDR_VAR 0 8
22227: PUSH
22228: DOUBLE
22229: LD_INT 1
22231: DEC
22232: ST_TO_ADDR
22233: LD_VAR 0 6
22237: PUSH
22238: FOR_TO
22239: IFFALSE 22301
// begin if tmp < result [ j ] [ 2 ] then
22241: LD_VAR 0 9
22245: PUSH
22246: LD_VAR 0 6
22250: PUSH
22251: LD_VAR 0 8
22255: ARRAY
22256: PUSH
22257: LD_INT 2
22259: ARRAY
22260: LESS
22261: IFFALSE 22299
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22263: LD_ADDR_VAR 0 6
22267: PUSH
22268: LD_VAR 0 6
22272: PPUSH
22273: LD_VAR 0 8
22277: PPUSH
22278: LD_VAR 0 7
22282: PUSH
22283: LD_VAR 0 9
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PPUSH
22292: CALL_OW 2
22296: ST_TO_ADDR
// break ;
22297: GO 22301
// end ; end ;
22299: GO 22238
22301: POP
22302: POP
// end ; end ;
22303: GO 22102
22305: POP
22306: POP
// if result and not asc then
22307: LD_VAR 0 6
22311: PUSH
22312: LD_VAR 0 4
22316: NOT
22317: AND
22318: IFFALSE 22393
// begin tmp := result ;
22320: LD_ADDR_VAR 0 9
22324: PUSH
22325: LD_VAR 0 6
22329: ST_TO_ADDR
// for i = tmp downto 1 do
22330: LD_ADDR_VAR 0 7
22334: PUSH
22335: DOUBLE
22336: LD_VAR 0 9
22340: INC
22341: ST_TO_ADDR
22342: LD_INT 1
22344: PUSH
22345: FOR_DOWNTO
22346: IFFALSE 22391
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22348: LD_ADDR_VAR 0 6
22352: PUSH
22353: LD_VAR 0 6
22357: PPUSH
22358: LD_VAR 0 9
22362: PUSH
22363: LD_VAR 0 7
22367: MINUS
22368: PUSH
22369: LD_INT 1
22371: PLUS
22372: PPUSH
22373: LD_VAR 0 9
22377: PUSH
22378: LD_VAR 0 7
22382: ARRAY
22383: PPUSH
22384: CALL_OW 1
22388: ST_TO_ADDR
22389: GO 22345
22391: POP
22392: POP
// end ; tmp := [ ] ;
22393: LD_ADDR_VAR 0 9
22397: PUSH
22398: EMPTY
22399: ST_TO_ADDR
// if mode then
22400: LD_VAR 0 5
22404: IFFALSE 22473
// begin for i = 1 to result do
22406: LD_ADDR_VAR 0 7
22410: PUSH
22411: DOUBLE
22412: LD_INT 1
22414: DEC
22415: ST_TO_ADDR
22416: LD_VAR 0 6
22420: PUSH
22421: FOR_TO
22422: IFFALSE 22461
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22424: LD_ADDR_VAR 0 9
22428: PUSH
22429: LD_VAR 0 9
22433: PPUSH
22434: LD_VAR 0 7
22438: PPUSH
22439: LD_VAR 0 6
22443: PUSH
22444: LD_VAR 0 7
22448: ARRAY
22449: PUSH
22450: LD_INT 1
22452: ARRAY
22453: PPUSH
22454: CALL_OW 1
22458: ST_TO_ADDR
22459: GO 22421
22461: POP
22462: POP
// result := tmp ;
22463: LD_ADDR_VAR 0 6
22467: PUSH
22468: LD_VAR 0 9
22472: ST_TO_ADDR
// end ; end ;
22473: LD_VAR 0 6
22477: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22478: LD_INT 0
22480: PPUSH
22481: PPUSH
22482: PPUSH
22483: PPUSH
22484: PPUSH
22485: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22486: LD_ADDR_VAR 0 5
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: LD_INT 0
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: EMPTY
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: ST_TO_ADDR
// if not x or not y then
22508: LD_VAR 0 2
22512: NOT
22513: PUSH
22514: LD_VAR 0 3
22518: NOT
22519: OR
22520: IFFALSE 22524
// exit ;
22522: GO 24174
// if not range then
22524: LD_VAR 0 4
22528: NOT
22529: IFFALSE 22539
// range := 10 ;
22531: LD_ADDR_VAR 0 4
22535: PUSH
22536: LD_INT 10
22538: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22539: LD_ADDR_VAR 0 8
22543: PUSH
22544: LD_INT 81
22546: PUSH
22547: LD_VAR 0 1
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 92
22558: PUSH
22559: LD_VAR 0 2
22563: PUSH
22564: LD_VAR 0 3
22568: PUSH
22569: LD_VAR 0 4
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 3
22582: PUSH
22583: LD_INT 21
22585: PUSH
22586: LD_INT 3
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: PPUSH
22602: CALL_OW 69
22606: ST_TO_ADDR
// if not tmp then
22607: LD_VAR 0 8
22611: NOT
22612: IFFALSE 22616
// exit ;
22614: GO 24174
// for i in tmp do
22616: LD_ADDR_VAR 0 6
22620: PUSH
22621: LD_VAR 0 8
22625: PUSH
22626: FOR_IN
22627: IFFALSE 24149
// begin points := [ 0 , 0 , 0 ] ;
22629: LD_ADDR_VAR 0 9
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: LIST
22647: ST_TO_ADDR
// bpoints := 1 ;
22648: LD_ADDR_VAR 0 10
22652: PUSH
22653: LD_INT 1
22655: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22656: LD_VAR 0 6
22660: PPUSH
22661: CALL_OW 247
22665: PUSH
22666: LD_INT 1
22668: DOUBLE
22669: EQUAL
22670: IFTRUE 22674
22672: GO 23252
22674: POP
// begin if GetClass ( i ) = 1 then
22675: LD_VAR 0 6
22679: PPUSH
22680: CALL_OW 257
22684: PUSH
22685: LD_INT 1
22687: EQUAL
22688: IFFALSE 22709
// points := [ 10 , 5 , 3 ] ;
22690: LD_ADDR_VAR 0 9
22694: PUSH
22695: LD_INT 10
22697: PUSH
22698: LD_INT 5
22700: PUSH
22701: LD_INT 3
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: LIST
22708: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22709: LD_VAR 0 6
22713: PPUSH
22714: CALL_OW 257
22718: PUSH
22719: LD_INT 2
22721: PUSH
22722: LD_INT 3
22724: PUSH
22725: LD_INT 4
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: LIST
22732: IN
22733: IFFALSE 22754
// points := [ 3 , 2 , 1 ] ;
22735: LD_ADDR_VAR 0 9
22739: PUSH
22740: LD_INT 3
22742: PUSH
22743: LD_INT 2
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: LIST
22753: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22754: LD_VAR 0 6
22758: PPUSH
22759: CALL_OW 257
22763: PUSH
22764: LD_INT 5
22766: EQUAL
22767: IFFALSE 22788
// points := [ 130 , 5 , 2 ] ;
22769: LD_ADDR_VAR 0 9
22773: PUSH
22774: LD_INT 130
22776: PUSH
22777: LD_INT 5
22779: PUSH
22780: LD_INT 2
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22788: LD_VAR 0 6
22792: PPUSH
22793: CALL_OW 257
22797: PUSH
22798: LD_INT 8
22800: EQUAL
22801: IFFALSE 22822
// points := [ 35 , 35 , 30 ] ;
22803: LD_ADDR_VAR 0 9
22807: PUSH
22808: LD_INT 35
22810: PUSH
22811: LD_INT 35
22813: PUSH
22814: LD_INT 30
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: LIST
22821: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22822: LD_VAR 0 6
22826: PPUSH
22827: CALL_OW 257
22831: PUSH
22832: LD_INT 9
22834: EQUAL
22835: IFFALSE 22856
// points := [ 20 , 55 , 40 ] ;
22837: LD_ADDR_VAR 0 9
22841: PUSH
22842: LD_INT 20
22844: PUSH
22845: LD_INT 55
22847: PUSH
22848: LD_INT 40
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: LIST
22855: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22856: LD_VAR 0 6
22860: PPUSH
22861: CALL_OW 257
22865: PUSH
22866: LD_INT 12
22868: PUSH
22869: LD_INT 16
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: IN
22876: IFFALSE 22897
// points := [ 5 , 3 , 2 ] ;
22878: LD_ADDR_VAR 0 9
22882: PUSH
22883: LD_INT 5
22885: PUSH
22886: LD_INT 3
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22897: LD_VAR 0 6
22901: PPUSH
22902: CALL_OW 257
22906: PUSH
22907: LD_INT 17
22909: EQUAL
22910: IFFALSE 22931
// points := [ 100 , 50 , 75 ] ;
22912: LD_ADDR_VAR 0 9
22916: PUSH
22917: LD_INT 100
22919: PUSH
22920: LD_INT 50
22922: PUSH
22923: LD_INT 75
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22931: LD_VAR 0 6
22935: PPUSH
22936: CALL_OW 257
22940: PUSH
22941: LD_INT 15
22943: EQUAL
22944: IFFALSE 22965
// points := [ 10 , 5 , 3 ] ;
22946: LD_ADDR_VAR 0 9
22950: PUSH
22951: LD_INT 10
22953: PUSH
22954: LD_INT 5
22956: PUSH
22957: LD_INT 3
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22965: LD_VAR 0 6
22969: PPUSH
22970: CALL_OW 257
22974: PUSH
22975: LD_INT 14
22977: EQUAL
22978: IFFALSE 22999
// points := [ 10 , 0 , 0 ] ;
22980: LD_ADDR_VAR 0 9
22984: PUSH
22985: LD_INT 10
22987: PUSH
22988: LD_INT 0
22990: PUSH
22991: LD_INT 0
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: LIST
22998: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22999: LD_VAR 0 6
23003: PPUSH
23004: CALL_OW 257
23008: PUSH
23009: LD_INT 11
23011: EQUAL
23012: IFFALSE 23033
// points := [ 30 , 10 , 5 ] ;
23014: LD_ADDR_VAR 0 9
23018: PUSH
23019: LD_INT 30
23021: PUSH
23022: LD_INT 10
23024: PUSH
23025: LD_INT 5
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: LIST
23032: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23033: LD_VAR 0 1
23037: PPUSH
23038: LD_INT 5
23040: PPUSH
23041: CALL_OW 321
23045: PUSH
23046: LD_INT 2
23048: EQUAL
23049: IFFALSE 23066
// bpoints := bpoints * 1.8 ;
23051: LD_ADDR_VAR 0 10
23055: PUSH
23056: LD_VAR 0 10
23060: PUSH
23061: LD_REAL  1.80000000000000E+0000
23064: MUL
23065: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23066: LD_VAR 0 6
23070: PPUSH
23071: CALL_OW 257
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: LD_INT 2
23081: PUSH
23082: LD_INT 3
23084: PUSH
23085: LD_INT 4
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: IN
23094: PUSH
23095: LD_VAR 0 1
23099: PPUSH
23100: LD_INT 51
23102: PPUSH
23103: CALL_OW 321
23107: PUSH
23108: LD_INT 2
23110: EQUAL
23111: AND
23112: IFFALSE 23129
// bpoints := bpoints * 1.2 ;
23114: LD_ADDR_VAR 0 10
23118: PUSH
23119: LD_VAR 0 10
23123: PUSH
23124: LD_REAL  1.20000000000000E+0000
23127: MUL
23128: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23129: LD_VAR 0 6
23133: PPUSH
23134: CALL_OW 257
23138: PUSH
23139: LD_INT 5
23141: PUSH
23142: LD_INT 7
23144: PUSH
23145: LD_INT 9
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: LIST
23152: IN
23153: PUSH
23154: LD_VAR 0 1
23158: PPUSH
23159: LD_INT 52
23161: PPUSH
23162: CALL_OW 321
23166: PUSH
23167: LD_INT 2
23169: EQUAL
23170: AND
23171: IFFALSE 23188
// bpoints := bpoints * 1.5 ;
23173: LD_ADDR_VAR 0 10
23177: PUSH
23178: LD_VAR 0 10
23182: PUSH
23183: LD_REAL  1.50000000000000E+0000
23186: MUL
23187: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23188: LD_VAR 0 1
23192: PPUSH
23193: LD_INT 66
23195: PPUSH
23196: CALL_OW 321
23200: PUSH
23201: LD_INT 2
23203: EQUAL
23204: IFFALSE 23221
// bpoints := bpoints * 1.1 ;
23206: LD_ADDR_VAR 0 10
23210: PUSH
23211: LD_VAR 0 10
23215: PUSH
23216: LD_REAL  1.10000000000000E+0000
23219: MUL
23220: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23221: LD_ADDR_VAR 0 10
23225: PUSH
23226: LD_VAR 0 10
23230: PUSH
23231: LD_VAR 0 6
23235: PPUSH
23236: LD_INT 1
23238: PPUSH
23239: CALL_OW 259
23243: PUSH
23244: LD_REAL  1.15000000000000E+0000
23247: MUL
23248: MUL
23249: ST_TO_ADDR
// end ; unit_vehicle :
23250: GO 24078
23252: LD_INT 2
23254: DOUBLE
23255: EQUAL
23256: IFTRUE 23260
23258: GO 24066
23260: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23261: LD_VAR 0 6
23265: PPUSH
23266: CALL_OW 264
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: LD_INT 42
23276: PUSH
23277: LD_INT 24
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: IN
23285: IFFALSE 23306
// points := [ 25 , 5 , 3 ] ;
23287: LD_ADDR_VAR 0 9
23291: PUSH
23292: LD_INT 25
23294: PUSH
23295: LD_INT 5
23297: PUSH
23298: LD_INT 3
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23306: LD_VAR 0 6
23310: PPUSH
23311: CALL_OW 264
23315: PUSH
23316: LD_INT 4
23318: PUSH
23319: LD_INT 43
23321: PUSH
23322: LD_INT 25
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: LIST
23329: IN
23330: IFFALSE 23351
// points := [ 40 , 15 , 5 ] ;
23332: LD_ADDR_VAR 0 9
23336: PUSH
23337: LD_INT 40
23339: PUSH
23340: LD_INT 15
23342: PUSH
23343: LD_INT 5
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23351: LD_VAR 0 6
23355: PPUSH
23356: CALL_OW 264
23360: PUSH
23361: LD_INT 3
23363: PUSH
23364: LD_INT 23
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: IN
23371: IFFALSE 23392
// points := [ 7 , 25 , 8 ] ;
23373: LD_ADDR_VAR 0 9
23377: PUSH
23378: LD_INT 7
23380: PUSH
23381: LD_INT 25
23383: PUSH
23384: LD_INT 8
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23392: LD_VAR 0 6
23396: PPUSH
23397: CALL_OW 264
23401: PUSH
23402: LD_INT 5
23404: PUSH
23405: LD_INT 27
23407: PUSH
23408: LD_INT 44
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: LIST
23415: IN
23416: IFFALSE 23437
// points := [ 14 , 50 , 16 ] ;
23418: LD_ADDR_VAR 0 9
23422: PUSH
23423: LD_INT 14
23425: PUSH
23426: LD_INT 50
23428: PUSH
23429: LD_INT 16
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: LIST
23436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23437: LD_VAR 0 6
23441: PPUSH
23442: CALL_OW 264
23446: PUSH
23447: LD_INT 6
23449: PUSH
23450: LD_INT 46
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: IN
23457: IFFALSE 23478
// points := [ 32 , 120 , 70 ] ;
23459: LD_ADDR_VAR 0 9
23463: PUSH
23464: LD_INT 32
23466: PUSH
23467: LD_INT 120
23469: PUSH
23470: LD_INT 70
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: LIST
23477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23478: LD_VAR 0 6
23482: PPUSH
23483: CALL_OW 264
23487: PUSH
23488: LD_INT 7
23490: PUSH
23491: LD_INT 28
23493: PUSH
23494: LD_INT 45
23496: PUSH
23497: LD_INT 92
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: IN
23506: IFFALSE 23527
// points := [ 35 , 20 , 45 ] ;
23508: LD_ADDR_VAR 0 9
23512: PUSH
23513: LD_INT 35
23515: PUSH
23516: LD_INT 20
23518: PUSH
23519: LD_INT 45
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: LIST
23526: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23527: LD_VAR 0 6
23531: PPUSH
23532: CALL_OW 264
23536: PUSH
23537: LD_INT 47
23539: PUSH
23540: EMPTY
23541: LIST
23542: IN
23543: IFFALSE 23564
// points := [ 67 , 45 , 75 ] ;
23545: LD_ADDR_VAR 0 9
23549: PUSH
23550: LD_INT 67
23552: PUSH
23553: LD_INT 45
23555: PUSH
23556: LD_INT 75
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: LIST
23563: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23564: LD_VAR 0 6
23568: PPUSH
23569: CALL_OW 264
23573: PUSH
23574: LD_INT 26
23576: PUSH
23577: EMPTY
23578: LIST
23579: IN
23580: IFFALSE 23601
// points := [ 120 , 30 , 80 ] ;
23582: LD_ADDR_VAR 0 9
23586: PUSH
23587: LD_INT 120
23589: PUSH
23590: LD_INT 30
23592: PUSH
23593: LD_INT 80
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23601: LD_VAR 0 6
23605: PPUSH
23606: CALL_OW 264
23610: PUSH
23611: LD_INT 22
23613: PUSH
23614: EMPTY
23615: LIST
23616: IN
23617: IFFALSE 23638
// points := [ 40 , 1 , 1 ] ;
23619: LD_ADDR_VAR 0 9
23623: PUSH
23624: LD_INT 40
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23638: LD_VAR 0 6
23642: PPUSH
23643: CALL_OW 264
23647: PUSH
23648: LD_INT 29
23650: PUSH
23651: EMPTY
23652: LIST
23653: IN
23654: IFFALSE 23675
// points := [ 70 , 200 , 400 ] ;
23656: LD_ADDR_VAR 0 9
23660: PUSH
23661: LD_INT 70
23663: PUSH
23664: LD_INT 200
23666: PUSH
23667: LD_INT 400
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23675: LD_VAR 0 6
23679: PPUSH
23680: CALL_OW 264
23684: PUSH
23685: LD_INT 14
23687: PUSH
23688: LD_INT 53
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: IN
23695: IFFALSE 23716
// points := [ 40 , 10 , 20 ] ;
23697: LD_ADDR_VAR 0 9
23701: PUSH
23702: LD_INT 40
23704: PUSH
23705: LD_INT 10
23707: PUSH
23708: LD_INT 20
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: LIST
23715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23716: LD_VAR 0 6
23720: PPUSH
23721: CALL_OW 264
23725: PUSH
23726: LD_INT 9
23728: PUSH
23729: EMPTY
23730: LIST
23731: IN
23732: IFFALSE 23753
// points := [ 5 , 70 , 20 ] ;
23734: LD_ADDR_VAR 0 9
23738: PUSH
23739: LD_INT 5
23741: PUSH
23742: LD_INT 70
23744: PUSH
23745: LD_INT 20
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: LIST
23752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23753: LD_VAR 0 6
23757: PPUSH
23758: CALL_OW 264
23762: PUSH
23763: LD_INT 10
23765: PUSH
23766: EMPTY
23767: LIST
23768: IN
23769: IFFALSE 23790
// points := [ 35 , 110 , 70 ] ;
23771: LD_ADDR_VAR 0 9
23775: PUSH
23776: LD_INT 35
23778: PUSH
23779: LD_INT 110
23781: PUSH
23782: LD_INT 70
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23790: LD_VAR 0 6
23794: PPUSH
23795: CALL_OW 265
23799: PUSH
23800: LD_INT 25
23802: EQUAL
23803: IFFALSE 23824
// points := [ 80 , 65 , 100 ] ;
23805: LD_ADDR_VAR 0 9
23809: PUSH
23810: LD_INT 80
23812: PUSH
23813: LD_INT 65
23815: PUSH
23816: LD_INT 100
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: LIST
23823: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23824: LD_VAR 0 6
23828: PPUSH
23829: CALL_OW 263
23833: PUSH
23834: LD_INT 1
23836: EQUAL
23837: IFFALSE 23872
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23839: LD_ADDR_VAR 0 10
23843: PUSH
23844: LD_VAR 0 10
23848: PUSH
23849: LD_VAR 0 6
23853: PPUSH
23854: CALL_OW 311
23858: PPUSH
23859: LD_INT 3
23861: PPUSH
23862: CALL_OW 259
23866: PUSH
23867: LD_INT 4
23869: MUL
23870: MUL
23871: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23872: LD_VAR 0 6
23876: PPUSH
23877: CALL_OW 263
23881: PUSH
23882: LD_INT 2
23884: EQUAL
23885: IFFALSE 23936
// begin j := IsControledBy ( i ) ;
23887: LD_ADDR_VAR 0 7
23891: PUSH
23892: LD_VAR 0 6
23896: PPUSH
23897: CALL_OW 312
23901: ST_TO_ADDR
// if j then
23902: LD_VAR 0 7
23906: IFFALSE 23936
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23908: LD_ADDR_VAR 0 10
23912: PUSH
23913: LD_VAR 0 10
23917: PUSH
23918: LD_VAR 0 7
23922: PPUSH
23923: LD_INT 3
23925: PPUSH
23926: CALL_OW 259
23930: PUSH
23931: LD_INT 3
23933: MUL
23934: MUL
23935: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23936: LD_VAR 0 6
23940: PPUSH
23941: CALL_OW 264
23945: PUSH
23946: LD_INT 5
23948: PUSH
23949: LD_INT 6
23951: PUSH
23952: LD_INT 46
23954: PUSH
23955: LD_INT 44
23957: PUSH
23958: LD_INT 47
23960: PUSH
23961: LD_INT 45
23963: PUSH
23964: LD_INT 28
23966: PUSH
23967: LD_INT 7
23969: PUSH
23970: LD_INT 27
23972: PUSH
23973: LD_INT 29
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: IN
23988: PUSH
23989: LD_VAR 0 1
23993: PPUSH
23994: LD_INT 52
23996: PPUSH
23997: CALL_OW 321
24001: PUSH
24002: LD_INT 2
24004: EQUAL
24005: AND
24006: IFFALSE 24023
// bpoints := bpoints * 1.2 ;
24008: LD_ADDR_VAR 0 10
24012: PUSH
24013: LD_VAR 0 10
24017: PUSH
24018: LD_REAL  1.20000000000000E+0000
24021: MUL
24022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24023: LD_VAR 0 6
24027: PPUSH
24028: CALL_OW 264
24032: PUSH
24033: LD_INT 6
24035: PUSH
24036: LD_INT 46
24038: PUSH
24039: LD_INT 47
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: LIST
24046: IN
24047: IFFALSE 24064
// bpoints := bpoints * 1.2 ;
24049: LD_ADDR_VAR 0 10
24053: PUSH
24054: LD_VAR 0 10
24058: PUSH
24059: LD_REAL  1.20000000000000E+0000
24062: MUL
24063: ST_TO_ADDR
// end ; unit_building :
24064: GO 24078
24066: LD_INT 3
24068: DOUBLE
24069: EQUAL
24070: IFTRUE 24074
24072: GO 24077
24074: POP
// ; end ;
24075: GO 24078
24077: POP
// for j = 1 to 3 do
24078: LD_ADDR_VAR 0 7
24082: PUSH
24083: DOUBLE
24084: LD_INT 1
24086: DEC
24087: ST_TO_ADDR
24088: LD_INT 3
24090: PUSH
24091: FOR_TO
24092: IFFALSE 24145
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24094: LD_ADDR_VAR 0 5
24098: PUSH
24099: LD_VAR 0 5
24103: PPUSH
24104: LD_VAR 0 7
24108: PPUSH
24109: LD_VAR 0 5
24113: PUSH
24114: LD_VAR 0 7
24118: ARRAY
24119: PUSH
24120: LD_VAR 0 9
24124: PUSH
24125: LD_VAR 0 7
24129: ARRAY
24130: PUSH
24131: LD_VAR 0 10
24135: MUL
24136: PLUS
24137: PPUSH
24138: CALL_OW 1
24142: ST_TO_ADDR
24143: GO 24091
24145: POP
24146: POP
// end ;
24147: GO 22626
24149: POP
24150: POP
// result := Replace ( result , 4 , tmp ) ;
24151: LD_ADDR_VAR 0 5
24155: PUSH
24156: LD_VAR 0 5
24160: PPUSH
24161: LD_INT 4
24163: PPUSH
24164: LD_VAR 0 8
24168: PPUSH
24169: CALL_OW 1
24173: ST_TO_ADDR
// end ;
24174: LD_VAR 0 5
24178: RET
// export function DangerAtRange ( unit , range ) ; begin
24179: LD_INT 0
24181: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24182: LD_ADDR_VAR 0 3
24186: PUSH
24187: LD_VAR 0 1
24191: PPUSH
24192: CALL_OW 255
24196: PPUSH
24197: LD_VAR 0 1
24201: PPUSH
24202: CALL_OW 250
24206: PPUSH
24207: LD_VAR 0 1
24211: PPUSH
24212: CALL_OW 251
24216: PPUSH
24217: LD_VAR 0 2
24221: PPUSH
24222: CALL 22478 0 4
24226: ST_TO_ADDR
// end ;
24227: LD_VAR 0 3
24231: RET
// export function DangerInArea ( side , area ) ; begin
24232: LD_INT 0
24234: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24235: LD_ADDR_VAR 0 3
24239: PUSH
24240: LD_VAR 0 2
24244: PPUSH
24245: LD_INT 81
24247: PUSH
24248: LD_VAR 0 1
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PPUSH
24257: CALL_OW 70
24261: ST_TO_ADDR
// end ;
24262: LD_VAR 0 3
24266: RET
// export function IsExtension ( b ) ; begin
24267: LD_INT 0
24269: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24270: LD_ADDR_VAR 0 2
24274: PUSH
24275: LD_VAR 0 1
24279: PUSH
24280: LD_INT 23
24282: PUSH
24283: LD_INT 20
24285: PUSH
24286: LD_INT 22
24288: PUSH
24289: LD_INT 17
24291: PUSH
24292: LD_INT 24
24294: PUSH
24295: LD_INT 21
24297: PUSH
24298: LD_INT 19
24300: PUSH
24301: LD_INT 16
24303: PUSH
24304: LD_INT 25
24306: PUSH
24307: LD_INT 18
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: IN
24322: ST_TO_ADDR
// end ;
24323: LD_VAR 0 2
24327: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24328: LD_INT 0
24330: PPUSH
24331: PPUSH
24332: PPUSH
// result := [ ] ;
24333: LD_ADDR_VAR 0 4
24337: PUSH
24338: EMPTY
24339: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24340: LD_ADDR_VAR 0 5
24344: PUSH
24345: LD_VAR 0 2
24349: PPUSH
24350: LD_INT 21
24352: PUSH
24353: LD_INT 3
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PPUSH
24360: CALL_OW 70
24364: ST_TO_ADDR
// if not tmp then
24365: LD_VAR 0 5
24369: NOT
24370: IFFALSE 24374
// exit ;
24372: GO 24438
// if checkLink then
24374: LD_VAR 0 3
24378: IFFALSE 24428
// begin for i in tmp do
24380: LD_ADDR_VAR 0 6
24384: PUSH
24385: LD_VAR 0 5
24389: PUSH
24390: FOR_IN
24391: IFFALSE 24426
// if GetBase ( i ) <> base then
24393: LD_VAR 0 6
24397: PPUSH
24398: CALL_OW 274
24402: PUSH
24403: LD_VAR 0 1
24407: NONEQUAL
24408: IFFALSE 24424
// ComLinkToBase ( base , i ) ;
24410: LD_VAR 0 1
24414: PPUSH
24415: LD_VAR 0 6
24419: PPUSH
24420: CALL_OW 169
24424: GO 24390
24426: POP
24427: POP
// end ; result := tmp ;
24428: LD_ADDR_VAR 0 4
24432: PUSH
24433: LD_VAR 0 5
24437: ST_TO_ADDR
// end ;
24438: LD_VAR 0 4
24442: RET
// export function ComComplete ( units , b ) ; var i ; begin
24443: LD_INT 0
24445: PPUSH
24446: PPUSH
// if not units then
24447: LD_VAR 0 1
24451: NOT
24452: IFFALSE 24456
// exit ;
24454: GO 24546
// for i in units do
24456: LD_ADDR_VAR 0 4
24460: PUSH
24461: LD_VAR 0 1
24465: PUSH
24466: FOR_IN
24467: IFFALSE 24544
// if BuildingStatus ( b ) = bs_build then
24469: LD_VAR 0 2
24473: PPUSH
24474: CALL_OW 461
24478: PUSH
24479: LD_INT 1
24481: EQUAL
24482: IFFALSE 24542
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24484: LD_VAR 0 4
24488: PPUSH
24489: LD_STRING h
24491: PUSH
24492: LD_VAR 0 2
24496: PPUSH
24497: CALL_OW 250
24501: PUSH
24502: LD_VAR 0 2
24506: PPUSH
24507: CALL_OW 251
24511: PUSH
24512: LD_VAR 0 2
24516: PUSH
24517: LD_INT 0
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: PUSH
24535: EMPTY
24536: LIST
24537: PPUSH
24538: CALL_OW 446
24542: GO 24466
24544: POP
24545: POP
// end ;
24546: LD_VAR 0 3
24550: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24551: LD_INT 0
24553: PPUSH
24554: PPUSH
24555: PPUSH
24556: PPUSH
24557: PPUSH
24558: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24559: LD_VAR 0 1
24563: NOT
24564: PUSH
24565: LD_VAR 0 1
24569: PPUSH
24570: CALL_OW 263
24574: PUSH
24575: LD_INT 2
24577: NONEQUAL
24578: OR
24579: IFFALSE 24583
// exit ;
24581: GO 24899
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24583: LD_ADDR_VAR 0 6
24587: PUSH
24588: LD_INT 22
24590: PUSH
24591: LD_VAR 0 1
24595: PPUSH
24596: CALL_OW 255
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: LD_INT 30
24610: PUSH
24611: LD_INT 36
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 34
24620: PUSH
24621: LD_INT 31
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: LIST
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PPUSH
24637: CALL_OW 69
24641: ST_TO_ADDR
// if not tmp then
24642: LD_VAR 0 6
24646: NOT
24647: IFFALSE 24651
// exit ;
24649: GO 24899
// result := [ ] ;
24651: LD_ADDR_VAR 0 2
24655: PUSH
24656: EMPTY
24657: ST_TO_ADDR
// for i in tmp do
24658: LD_ADDR_VAR 0 3
24662: PUSH
24663: LD_VAR 0 6
24667: PUSH
24668: FOR_IN
24669: IFFALSE 24740
// begin t := UnitsInside ( i ) ;
24671: LD_ADDR_VAR 0 4
24675: PUSH
24676: LD_VAR 0 3
24680: PPUSH
24681: CALL_OW 313
24685: ST_TO_ADDR
// if t then
24686: LD_VAR 0 4
24690: IFFALSE 24738
// for j in t do
24692: LD_ADDR_VAR 0 7
24696: PUSH
24697: LD_VAR 0 4
24701: PUSH
24702: FOR_IN
24703: IFFALSE 24736
// result := Replace ( result , result + 1 , j ) ;
24705: LD_ADDR_VAR 0 2
24709: PUSH
24710: LD_VAR 0 2
24714: PPUSH
24715: LD_VAR 0 2
24719: PUSH
24720: LD_INT 1
24722: PLUS
24723: PPUSH
24724: LD_VAR 0 7
24728: PPUSH
24729: CALL_OW 1
24733: ST_TO_ADDR
24734: GO 24702
24736: POP
24737: POP
// end ;
24738: GO 24668
24740: POP
24741: POP
// if not result then
24742: LD_VAR 0 2
24746: NOT
24747: IFFALSE 24751
// exit ;
24749: GO 24899
// mech := result [ 1 ] ;
24751: LD_ADDR_VAR 0 5
24755: PUSH
24756: LD_VAR 0 2
24760: PUSH
24761: LD_INT 1
24763: ARRAY
24764: ST_TO_ADDR
// if result > 1 then
24765: LD_VAR 0 2
24769: PUSH
24770: LD_INT 1
24772: GREATER
24773: IFFALSE 24885
// begin for i = 2 to result do
24775: LD_ADDR_VAR 0 3
24779: PUSH
24780: DOUBLE
24781: LD_INT 2
24783: DEC
24784: ST_TO_ADDR
24785: LD_VAR 0 2
24789: PUSH
24790: FOR_TO
24791: IFFALSE 24883
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24793: LD_ADDR_VAR 0 4
24797: PUSH
24798: LD_VAR 0 2
24802: PUSH
24803: LD_VAR 0 3
24807: ARRAY
24808: PPUSH
24809: LD_INT 3
24811: PPUSH
24812: CALL_OW 259
24816: PUSH
24817: LD_VAR 0 2
24821: PUSH
24822: LD_VAR 0 3
24826: ARRAY
24827: PPUSH
24828: CALL_OW 432
24832: MINUS
24833: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24834: LD_VAR 0 4
24838: PUSH
24839: LD_VAR 0 5
24843: PPUSH
24844: LD_INT 3
24846: PPUSH
24847: CALL_OW 259
24851: PUSH
24852: LD_VAR 0 5
24856: PPUSH
24857: CALL_OW 432
24861: MINUS
24862: GREATEREQUAL
24863: IFFALSE 24881
// mech := result [ i ] ;
24865: LD_ADDR_VAR 0 5
24869: PUSH
24870: LD_VAR 0 2
24874: PUSH
24875: LD_VAR 0 3
24879: ARRAY
24880: ST_TO_ADDR
// end ;
24881: GO 24790
24883: POP
24884: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24885: LD_VAR 0 1
24889: PPUSH
24890: LD_VAR 0 5
24894: PPUSH
24895: CALL_OW 135
// end ;
24899: LD_VAR 0 2
24903: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24904: LD_INT 0
24906: PPUSH
24907: PPUSH
24908: PPUSH
24909: PPUSH
24910: PPUSH
24911: PPUSH
24912: PPUSH
24913: PPUSH
24914: PPUSH
24915: PPUSH
24916: PPUSH
24917: PPUSH
24918: PPUSH
// result := [ ] ;
24919: LD_ADDR_VAR 0 7
24923: PUSH
24924: EMPTY
24925: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24926: LD_VAR 0 1
24930: PPUSH
24931: CALL_OW 266
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: IN
24946: NOT
24947: IFFALSE 24951
// exit ;
24949: GO 26585
// if name then
24951: LD_VAR 0 3
24955: IFFALSE 24971
// SetBName ( base_dep , name ) ;
24957: LD_VAR 0 1
24961: PPUSH
24962: LD_VAR 0 3
24966: PPUSH
24967: CALL_OW 500
// base := GetBase ( base_dep ) ;
24971: LD_ADDR_VAR 0 15
24975: PUSH
24976: LD_VAR 0 1
24980: PPUSH
24981: CALL_OW 274
24985: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24986: LD_ADDR_VAR 0 16
24990: PUSH
24991: LD_VAR 0 1
24995: PPUSH
24996: CALL_OW 255
25000: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25001: LD_ADDR_VAR 0 17
25005: PUSH
25006: LD_VAR 0 1
25010: PPUSH
25011: CALL_OW 248
25015: ST_TO_ADDR
// if sources then
25016: LD_VAR 0 5
25020: IFFALSE 25067
// for i = 1 to 3 do
25022: LD_ADDR_VAR 0 8
25026: PUSH
25027: DOUBLE
25028: LD_INT 1
25030: DEC
25031: ST_TO_ADDR
25032: LD_INT 3
25034: PUSH
25035: FOR_TO
25036: IFFALSE 25065
// AddResourceType ( base , i , sources [ i ] ) ;
25038: LD_VAR 0 15
25042: PPUSH
25043: LD_VAR 0 8
25047: PPUSH
25048: LD_VAR 0 5
25052: PUSH
25053: LD_VAR 0 8
25057: ARRAY
25058: PPUSH
25059: CALL_OW 276
25063: GO 25035
25065: POP
25066: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25067: LD_ADDR_VAR 0 18
25071: PUSH
25072: LD_VAR 0 15
25076: PPUSH
25077: LD_VAR 0 2
25081: PPUSH
25082: LD_INT 1
25084: PPUSH
25085: CALL 24328 0 3
25089: ST_TO_ADDR
// InitHc ;
25090: CALL_OW 19
// InitUc ;
25094: CALL_OW 18
// uc_side := side ;
25098: LD_ADDR_OWVAR 20
25102: PUSH
25103: LD_VAR 0 16
25107: ST_TO_ADDR
// uc_nation := nation ;
25108: LD_ADDR_OWVAR 21
25112: PUSH
25113: LD_VAR 0 17
25117: ST_TO_ADDR
// if buildings then
25118: LD_VAR 0 18
25122: IFFALSE 26444
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25124: LD_ADDR_VAR 0 19
25128: PUSH
25129: LD_VAR 0 18
25133: PPUSH
25134: LD_INT 2
25136: PUSH
25137: LD_INT 30
25139: PUSH
25140: LD_INT 29
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 30
25149: PUSH
25150: LD_INT 30
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: LIST
25161: PPUSH
25162: CALL_OW 72
25166: ST_TO_ADDR
// if tmp then
25167: LD_VAR 0 19
25171: IFFALSE 25219
// for i in tmp do
25173: LD_ADDR_VAR 0 8
25177: PUSH
25178: LD_VAR 0 19
25182: PUSH
25183: FOR_IN
25184: IFFALSE 25217
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25186: LD_VAR 0 8
25190: PPUSH
25191: CALL_OW 250
25195: PPUSH
25196: LD_VAR 0 8
25200: PPUSH
25201: CALL_OW 251
25205: PPUSH
25206: LD_VAR 0 16
25210: PPUSH
25211: CALL_OW 441
25215: GO 25183
25217: POP
25218: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25219: LD_VAR 0 18
25223: PPUSH
25224: LD_INT 2
25226: PUSH
25227: LD_INT 30
25229: PUSH
25230: LD_INT 32
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 30
25239: PUSH
25240: LD_INT 33
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: LIST
25251: PPUSH
25252: CALL_OW 72
25256: IFFALSE 25344
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25258: LD_ADDR_VAR 0 8
25262: PUSH
25263: LD_VAR 0 18
25267: PPUSH
25268: LD_INT 2
25270: PUSH
25271: LD_INT 30
25273: PUSH
25274: LD_INT 32
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 30
25283: PUSH
25284: LD_INT 33
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: LIST
25295: PPUSH
25296: CALL_OW 72
25300: PUSH
25301: FOR_IN
25302: IFFALSE 25342
// begin if not GetBWeapon ( i ) then
25304: LD_VAR 0 8
25308: PPUSH
25309: CALL_OW 269
25313: NOT
25314: IFFALSE 25340
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25316: LD_VAR 0 8
25320: PPUSH
25321: LD_VAR 0 8
25325: PPUSH
25326: LD_VAR 0 2
25330: PPUSH
25331: CALL 26590 0 2
25335: PPUSH
25336: CALL_OW 431
// end ;
25340: GO 25301
25342: POP
25343: POP
// end ; for i = 1 to personel do
25344: LD_ADDR_VAR 0 8
25348: PUSH
25349: DOUBLE
25350: LD_INT 1
25352: DEC
25353: ST_TO_ADDR
25354: LD_VAR 0 6
25358: PUSH
25359: FOR_TO
25360: IFFALSE 26424
// begin if i > 4 then
25362: LD_VAR 0 8
25366: PUSH
25367: LD_INT 4
25369: GREATER
25370: IFFALSE 25374
// break ;
25372: GO 26424
// case i of 1 :
25374: LD_VAR 0 8
25378: PUSH
25379: LD_INT 1
25381: DOUBLE
25382: EQUAL
25383: IFTRUE 25387
25385: GO 25467
25387: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25388: LD_ADDR_VAR 0 12
25392: PUSH
25393: LD_VAR 0 18
25397: PPUSH
25398: LD_INT 22
25400: PUSH
25401: LD_VAR 0 16
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 58
25412: PUSH
25413: EMPTY
25414: LIST
25415: PUSH
25416: LD_INT 2
25418: PUSH
25419: LD_INT 30
25421: PUSH
25422: LD_INT 32
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 30
25431: PUSH
25432: LD_INT 4
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 30
25441: PUSH
25442: LD_INT 5
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: LIST
25459: PPUSH
25460: CALL_OW 72
25464: ST_TO_ADDR
25465: GO 25689
25467: LD_INT 2
25469: DOUBLE
25470: EQUAL
25471: IFTRUE 25475
25473: GO 25537
25475: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25476: LD_ADDR_VAR 0 12
25480: PUSH
25481: LD_VAR 0 18
25485: PPUSH
25486: LD_INT 22
25488: PUSH
25489: LD_VAR 0 16
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 2
25500: PUSH
25501: LD_INT 30
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 30
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: LIST
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PPUSH
25530: CALL_OW 72
25534: ST_TO_ADDR
25535: GO 25689
25537: LD_INT 3
25539: DOUBLE
25540: EQUAL
25541: IFTRUE 25545
25543: GO 25607
25545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25546: LD_ADDR_VAR 0 12
25550: PUSH
25551: LD_VAR 0 18
25555: PPUSH
25556: LD_INT 22
25558: PUSH
25559: LD_VAR 0 16
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 2
25570: PUSH
25571: LD_INT 30
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 30
25583: PUSH
25584: LD_INT 3
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: LIST
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PPUSH
25600: CALL_OW 72
25604: ST_TO_ADDR
25605: GO 25689
25607: LD_INT 4
25609: DOUBLE
25610: EQUAL
25611: IFTRUE 25615
25613: GO 25688
25615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25616: LD_ADDR_VAR 0 12
25620: PUSH
25621: LD_VAR 0 18
25625: PPUSH
25626: LD_INT 22
25628: PUSH
25629: LD_VAR 0 16
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 2
25640: PUSH
25641: LD_INT 30
25643: PUSH
25644: LD_INT 6
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 30
25653: PUSH
25654: LD_INT 7
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 30
25663: PUSH
25664: LD_INT 8
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PPUSH
25681: CALL_OW 72
25685: ST_TO_ADDR
25686: GO 25689
25688: POP
// if i = 1 then
25689: LD_VAR 0 8
25693: PUSH
25694: LD_INT 1
25696: EQUAL
25697: IFFALSE 25808
// begin tmp := [ ] ;
25699: LD_ADDR_VAR 0 19
25703: PUSH
25704: EMPTY
25705: ST_TO_ADDR
// for j in f do
25706: LD_ADDR_VAR 0 9
25710: PUSH
25711: LD_VAR 0 12
25715: PUSH
25716: FOR_IN
25717: IFFALSE 25790
// if GetBType ( j ) = b_bunker then
25719: LD_VAR 0 9
25723: PPUSH
25724: CALL_OW 266
25728: PUSH
25729: LD_INT 32
25731: EQUAL
25732: IFFALSE 25759
// tmp := Insert ( tmp , 1 , j ) else
25734: LD_ADDR_VAR 0 19
25738: PUSH
25739: LD_VAR 0 19
25743: PPUSH
25744: LD_INT 1
25746: PPUSH
25747: LD_VAR 0 9
25751: PPUSH
25752: CALL_OW 2
25756: ST_TO_ADDR
25757: GO 25788
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25759: LD_ADDR_VAR 0 19
25763: PUSH
25764: LD_VAR 0 19
25768: PPUSH
25769: LD_VAR 0 19
25773: PUSH
25774: LD_INT 1
25776: PLUS
25777: PPUSH
25778: LD_VAR 0 9
25782: PPUSH
25783: CALL_OW 2
25787: ST_TO_ADDR
25788: GO 25716
25790: POP
25791: POP
// if tmp then
25792: LD_VAR 0 19
25796: IFFALSE 25808
// f := tmp ;
25798: LD_ADDR_VAR 0 12
25802: PUSH
25803: LD_VAR 0 19
25807: ST_TO_ADDR
// end ; x := personel [ i ] ;
25808: LD_ADDR_VAR 0 13
25812: PUSH
25813: LD_VAR 0 6
25817: PUSH
25818: LD_VAR 0 8
25822: ARRAY
25823: ST_TO_ADDR
// if x = - 1 then
25824: LD_VAR 0 13
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: EQUAL
25833: IFFALSE 26042
// begin for j in f do
25835: LD_ADDR_VAR 0 9
25839: PUSH
25840: LD_VAR 0 12
25844: PUSH
25845: FOR_IN
25846: IFFALSE 26038
// repeat InitHc ;
25848: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25852: LD_VAR 0 9
25856: PPUSH
25857: CALL_OW 266
25861: PUSH
25862: LD_INT 5
25864: EQUAL
25865: IFFALSE 25935
// begin if UnitsInside ( j ) < 3 then
25867: LD_VAR 0 9
25871: PPUSH
25872: CALL_OW 313
25876: PUSH
25877: LD_INT 3
25879: LESS
25880: IFFALSE 25916
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25882: LD_INT 0
25884: PPUSH
25885: LD_INT 5
25887: PUSH
25888: LD_INT 8
25890: PUSH
25891: LD_INT 9
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: LIST
25898: PUSH
25899: LD_VAR 0 17
25903: ARRAY
25904: PPUSH
25905: LD_VAR 0 4
25909: PPUSH
25910: CALL_OW 380
25914: GO 25933
// PrepareHuman ( false , i , skill ) ;
25916: LD_INT 0
25918: PPUSH
25919: LD_VAR 0 8
25923: PPUSH
25924: LD_VAR 0 4
25928: PPUSH
25929: CALL_OW 380
// end else
25933: GO 25952
// PrepareHuman ( false , i , skill ) ;
25935: LD_INT 0
25937: PPUSH
25938: LD_VAR 0 8
25942: PPUSH
25943: LD_VAR 0 4
25947: PPUSH
25948: CALL_OW 380
// un := CreateHuman ;
25952: LD_ADDR_VAR 0 14
25956: PUSH
25957: CALL_OW 44
25961: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25962: LD_ADDR_VAR 0 7
25966: PUSH
25967: LD_VAR 0 7
25971: PPUSH
25972: LD_INT 1
25974: PPUSH
25975: LD_VAR 0 14
25979: PPUSH
25980: CALL_OW 2
25984: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25985: LD_VAR 0 14
25989: PPUSH
25990: LD_VAR 0 9
25994: PPUSH
25995: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25999: LD_VAR 0 9
26003: PPUSH
26004: CALL_OW 313
26008: PUSH
26009: LD_INT 6
26011: EQUAL
26012: PUSH
26013: LD_VAR 0 9
26017: PPUSH
26018: CALL_OW 266
26022: PUSH
26023: LD_INT 32
26025: PUSH
26026: LD_INT 31
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: IN
26033: OR
26034: IFFALSE 25848
26036: GO 25845
26038: POP
26039: POP
// end else
26040: GO 26422
// for j = 1 to x do
26042: LD_ADDR_VAR 0 9
26046: PUSH
26047: DOUBLE
26048: LD_INT 1
26050: DEC
26051: ST_TO_ADDR
26052: LD_VAR 0 13
26056: PUSH
26057: FOR_TO
26058: IFFALSE 26420
// begin InitHc ;
26060: CALL_OW 19
// if not f then
26064: LD_VAR 0 12
26068: NOT
26069: IFFALSE 26158
// begin PrepareHuman ( false , i , skill ) ;
26071: LD_INT 0
26073: PPUSH
26074: LD_VAR 0 8
26078: PPUSH
26079: LD_VAR 0 4
26083: PPUSH
26084: CALL_OW 380
// un := CreateHuman ;
26088: LD_ADDR_VAR 0 14
26092: PUSH
26093: CALL_OW 44
26097: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26098: LD_ADDR_VAR 0 7
26102: PUSH
26103: LD_VAR 0 7
26107: PPUSH
26108: LD_INT 1
26110: PPUSH
26111: LD_VAR 0 14
26115: PPUSH
26116: CALL_OW 2
26120: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26121: LD_VAR 0 14
26125: PPUSH
26126: LD_VAR 0 1
26130: PPUSH
26131: CALL_OW 250
26135: PPUSH
26136: LD_VAR 0 1
26140: PPUSH
26141: CALL_OW 251
26145: PPUSH
26146: LD_INT 10
26148: PPUSH
26149: LD_INT 0
26151: PPUSH
26152: CALL_OW 50
// continue ;
26156: GO 26057
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26158: LD_VAR 0 12
26162: PUSH
26163: LD_INT 1
26165: ARRAY
26166: PPUSH
26167: CALL_OW 313
26171: PUSH
26172: LD_VAR 0 12
26176: PUSH
26177: LD_INT 1
26179: ARRAY
26180: PPUSH
26181: CALL_OW 266
26185: PUSH
26186: LD_INT 32
26188: PUSH
26189: LD_INT 31
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: IN
26196: AND
26197: PUSH
26198: LD_VAR 0 12
26202: PUSH
26203: LD_INT 1
26205: ARRAY
26206: PPUSH
26207: CALL_OW 313
26211: PUSH
26212: LD_INT 6
26214: EQUAL
26215: OR
26216: IFFALSE 26236
// f := Delete ( f , 1 ) ;
26218: LD_ADDR_VAR 0 12
26222: PUSH
26223: LD_VAR 0 12
26227: PPUSH
26228: LD_INT 1
26230: PPUSH
26231: CALL_OW 3
26235: ST_TO_ADDR
// if not f then
26236: LD_VAR 0 12
26240: NOT
26241: IFFALSE 26259
// begin x := x + 2 ;
26243: LD_ADDR_VAR 0 13
26247: PUSH
26248: LD_VAR 0 13
26252: PUSH
26253: LD_INT 2
26255: PLUS
26256: ST_TO_ADDR
// continue ;
26257: GO 26057
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26259: LD_VAR 0 12
26263: PUSH
26264: LD_INT 1
26266: ARRAY
26267: PPUSH
26268: CALL_OW 266
26272: PUSH
26273: LD_INT 5
26275: EQUAL
26276: IFFALSE 26350
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26278: LD_VAR 0 12
26282: PUSH
26283: LD_INT 1
26285: ARRAY
26286: PPUSH
26287: CALL_OW 313
26291: PUSH
26292: LD_INT 3
26294: LESS
26295: IFFALSE 26331
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26297: LD_INT 0
26299: PPUSH
26300: LD_INT 5
26302: PUSH
26303: LD_INT 8
26305: PUSH
26306: LD_INT 9
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: LIST
26313: PUSH
26314: LD_VAR 0 17
26318: ARRAY
26319: PPUSH
26320: LD_VAR 0 4
26324: PPUSH
26325: CALL_OW 380
26329: GO 26348
// PrepareHuman ( false , i , skill ) ;
26331: LD_INT 0
26333: PPUSH
26334: LD_VAR 0 8
26338: PPUSH
26339: LD_VAR 0 4
26343: PPUSH
26344: CALL_OW 380
// end else
26348: GO 26367
// PrepareHuman ( false , i , skill ) ;
26350: LD_INT 0
26352: PPUSH
26353: LD_VAR 0 8
26357: PPUSH
26358: LD_VAR 0 4
26362: PPUSH
26363: CALL_OW 380
// un := CreateHuman ;
26367: LD_ADDR_VAR 0 14
26371: PUSH
26372: CALL_OW 44
26376: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26377: LD_ADDR_VAR 0 7
26381: PUSH
26382: LD_VAR 0 7
26386: PPUSH
26387: LD_INT 1
26389: PPUSH
26390: LD_VAR 0 14
26394: PPUSH
26395: CALL_OW 2
26399: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26400: LD_VAR 0 14
26404: PPUSH
26405: LD_VAR 0 12
26409: PUSH
26410: LD_INT 1
26412: ARRAY
26413: PPUSH
26414: CALL_OW 52
// end ;
26418: GO 26057
26420: POP
26421: POP
// end ;
26422: GO 25359
26424: POP
26425: POP
// result := result ^ buildings ;
26426: LD_ADDR_VAR 0 7
26430: PUSH
26431: LD_VAR 0 7
26435: PUSH
26436: LD_VAR 0 18
26440: ADD
26441: ST_TO_ADDR
// end else
26442: GO 26585
// begin for i = 1 to personel do
26444: LD_ADDR_VAR 0 8
26448: PUSH
26449: DOUBLE
26450: LD_INT 1
26452: DEC
26453: ST_TO_ADDR
26454: LD_VAR 0 6
26458: PUSH
26459: FOR_TO
26460: IFFALSE 26583
// begin if i > 4 then
26462: LD_VAR 0 8
26466: PUSH
26467: LD_INT 4
26469: GREATER
26470: IFFALSE 26474
// break ;
26472: GO 26583
// x := personel [ i ] ;
26474: LD_ADDR_VAR 0 13
26478: PUSH
26479: LD_VAR 0 6
26483: PUSH
26484: LD_VAR 0 8
26488: ARRAY
26489: ST_TO_ADDR
// if x = - 1 then
26490: LD_VAR 0 13
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: EQUAL
26499: IFFALSE 26503
// continue ;
26501: GO 26459
// PrepareHuman ( false , i , skill ) ;
26503: LD_INT 0
26505: PPUSH
26506: LD_VAR 0 8
26510: PPUSH
26511: LD_VAR 0 4
26515: PPUSH
26516: CALL_OW 380
// un := CreateHuman ;
26520: LD_ADDR_VAR 0 14
26524: PUSH
26525: CALL_OW 44
26529: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26530: LD_VAR 0 14
26534: PPUSH
26535: LD_VAR 0 1
26539: PPUSH
26540: CALL_OW 250
26544: PPUSH
26545: LD_VAR 0 1
26549: PPUSH
26550: CALL_OW 251
26554: PPUSH
26555: LD_INT 10
26557: PPUSH
26558: LD_INT 0
26560: PPUSH
26561: CALL_OW 50
// result := result ^ un ;
26565: LD_ADDR_VAR 0 7
26569: PUSH
26570: LD_VAR 0 7
26574: PUSH
26575: LD_VAR 0 14
26579: ADD
26580: ST_TO_ADDR
// end ;
26581: GO 26459
26583: POP
26584: POP
// end ; end ;
26585: LD_VAR 0 7
26589: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26590: LD_INT 0
26592: PPUSH
26593: PPUSH
26594: PPUSH
26595: PPUSH
26596: PPUSH
26597: PPUSH
26598: PPUSH
26599: PPUSH
26600: PPUSH
26601: PPUSH
26602: PPUSH
26603: PPUSH
26604: PPUSH
26605: PPUSH
26606: PPUSH
26607: PPUSH
// result := false ;
26608: LD_ADDR_VAR 0 3
26612: PUSH
26613: LD_INT 0
26615: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26616: LD_VAR 0 1
26620: NOT
26621: PUSH
26622: LD_VAR 0 1
26626: PPUSH
26627: CALL_OW 266
26631: PUSH
26632: LD_INT 32
26634: PUSH
26635: LD_INT 33
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: IN
26642: NOT
26643: OR
26644: IFFALSE 26648
// exit ;
26646: GO 27757
// nat := GetNation ( tower ) ;
26648: LD_ADDR_VAR 0 12
26652: PUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 248
26662: ST_TO_ADDR
// side := GetSide ( tower ) ;
26663: LD_ADDR_VAR 0 16
26667: PUSH
26668: LD_VAR 0 1
26672: PPUSH
26673: CALL_OW 255
26677: ST_TO_ADDR
// x := GetX ( tower ) ;
26678: LD_ADDR_VAR 0 10
26682: PUSH
26683: LD_VAR 0 1
26687: PPUSH
26688: CALL_OW 250
26692: ST_TO_ADDR
// y := GetY ( tower ) ;
26693: LD_ADDR_VAR 0 11
26697: PUSH
26698: LD_VAR 0 1
26702: PPUSH
26703: CALL_OW 251
26707: ST_TO_ADDR
// if not x or not y then
26708: LD_VAR 0 10
26712: NOT
26713: PUSH
26714: LD_VAR 0 11
26718: NOT
26719: OR
26720: IFFALSE 26724
// exit ;
26722: GO 27757
// weapon := 0 ;
26724: LD_ADDR_VAR 0 18
26728: PUSH
26729: LD_INT 0
26731: ST_TO_ADDR
// fac_list := [ ] ;
26732: LD_ADDR_VAR 0 17
26736: PUSH
26737: EMPTY
26738: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26739: LD_ADDR_VAR 0 6
26743: PUSH
26744: LD_VAR 0 1
26748: PPUSH
26749: CALL_OW 274
26753: PPUSH
26754: LD_VAR 0 2
26758: PPUSH
26759: LD_INT 0
26761: PPUSH
26762: CALL 24328 0 3
26766: PPUSH
26767: LD_INT 30
26769: PUSH
26770: LD_INT 3
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PPUSH
26777: CALL_OW 72
26781: ST_TO_ADDR
// if not factories then
26782: LD_VAR 0 6
26786: NOT
26787: IFFALSE 26791
// exit ;
26789: GO 27757
// for i in factories do
26791: LD_ADDR_VAR 0 8
26795: PUSH
26796: LD_VAR 0 6
26800: PUSH
26801: FOR_IN
26802: IFFALSE 26827
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26804: LD_ADDR_VAR 0 17
26808: PUSH
26809: LD_VAR 0 17
26813: PUSH
26814: LD_VAR 0 8
26818: PPUSH
26819: CALL_OW 478
26823: UNION
26824: ST_TO_ADDR
26825: GO 26801
26827: POP
26828: POP
// if not fac_list then
26829: LD_VAR 0 17
26833: NOT
26834: IFFALSE 26838
// exit ;
26836: GO 27757
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26838: LD_ADDR_VAR 0 5
26842: PUSH
26843: LD_INT 4
26845: PUSH
26846: LD_INT 5
26848: PUSH
26849: LD_INT 9
26851: PUSH
26852: LD_INT 10
26854: PUSH
26855: LD_INT 6
26857: PUSH
26858: LD_INT 7
26860: PUSH
26861: LD_INT 11
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 27
26875: PUSH
26876: LD_INT 28
26878: PUSH
26879: LD_INT 26
26881: PUSH
26882: LD_INT 30
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 43
26893: PUSH
26894: LD_INT 44
26896: PUSH
26897: LD_INT 46
26899: PUSH
26900: LD_INT 45
26902: PUSH
26903: LD_INT 47
26905: PUSH
26906: LD_INT 49
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: PUSH
26922: LD_VAR 0 12
26926: ARRAY
26927: ST_TO_ADDR
// list := list isect fac_list ;
26928: LD_ADDR_VAR 0 5
26932: PUSH
26933: LD_VAR 0 5
26937: PUSH
26938: LD_VAR 0 17
26942: ISECT
26943: ST_TO_ADDR
// if not list then
26944: LD_VAR 0 5
26948: NOT
26949: IFFALSE 26953
// exit ;
26951: GO 27757
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26953: LD_VAR 0 12
26957: PUSH
26958: LD_INT 3
26960: EQUAL
26961: PUSH
26962: LD_INT 49
26964: PUSH
26965: LD_VAR 0 5
26969: IN
26970: AND
26971: PUSH
26972: LD_INT 31
26974: PPUSH
26975: LD_VAR 0 16
26979: PPUSH
26980: CALL_OW 321
26984: PUSH
26985: LD_INT 2
26987: EQUAL
26988: AND
26989: IFFALSE 27049
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26991: LD_INT 22
26993: PUSH
26994: LD_VAR 0 16
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 35
27005: PUSH
27006: LD_INT 49
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 91
27015: PUSH
27016: LD_VAR 0 1
27020: PUSH
27021: LD_INT 10
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: PPUSH
27034: CALL_OW 69
27038: NOT
27039: IFFALSE 27049
// weapon := ru_time_lapser ;
27041: LD_ADDR_VAR 0 18
27045: PUSH
27046: LD_INT 49
27048: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27049: LD_VAR 0 12
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: IN
27064: PUSH
27065: LD_INT 11
27067: PUSH
27068: LD_VAR 0 5
27072: IN
27073: PUSH
27074: LD_INT 30
27076: PUSH
27077: LD_VAR 0 5
27081: IN
27082: OR
27083: AND
27084: PUSH
27085: LD_INT 6
27087: PPUSH
27088: LD_VAR 0 16
27092: PPUSH
27093: CALL_OW 321
27097: PUSH
27098: LD_INT 2
27100: EQUAL
27101: AND
27102: IFFALSE 27267
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27104: LD_INT 22
27106: PUSH
27107: LD_VAR 0 16
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 2
27118: PUSH
27119: LD_INT 35
27121: PUSH
27122: LD_INT 11
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 35
27131: PUSH
27132: LD_INT 30
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 91
27146: PUSH
27147: LD_VAR 0 1
27151: PUSH
27152: LD_INT 18
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: LIST
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: PPUSH
27165: CALL_OW 69
27169: NOT
27170: PUSH
27171: LD_INT 22
27173: PUSH
27174: LD_VAR 0 16
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: LD_INT 30
27188: PUSH
27189: LD_INT 32
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 30
27198: PUSH
27199: LD_INT 33
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 91
27213: PUSH
27214: LD_VAR 0 1
27218: PUSH
27219: LD_INT 12
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: LIST
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: PUSH
27232: EMPTY
27233: LIST
27234: PPUSH
27235: CALL_OW 69
27239: PUSH
27240: LD_INT 2
27242: GREATER
27243: AND
27244: IFFALSE 27267
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27246: LD_ADDR_VAR 0 18
27250: PUSH
27251: LD_INT 11
27253: PUSH
27254: LD_INT 30
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_VAR 0 12
27265: ARRAY
27266: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27267: LD_VAR 0 18
27271: NOT
27272: PUSH
27273: LD_INT 40
27275: PPUSH
27276: LD_VAR 0 16
27280: PPUSH
27281: CALL_OW 321
27285: PUSH
27286: LD_INT 2
27288: EQUAL
27289: AND
27290: PUSH
27291: LD_INT 7
27293: PUSH
27294: LD_VAR 0 5
27298: IN
27299: PUSH
27300: LD_INT 28
27302: PUSH
27303: LD_VAR 0 5
27307: IN
27308: OR
27309: PUSH
27310: LD_INT 45
27312: PUSH
27313: LD_VAR 0 5
27317: IN
27318: OR
27319: AND
27320: IFFALSE 27574
// begin hex := GetHexInfo ( x , y ) ;
27322: LD_ADDR_VAR 0 4
27326: PUSH
27327: LD_VAR 0 10
27331: PPUSH
27332: LD_VAR 0 11
27336: PPUSH
27337: CALL_OW 546
27341: ST_TO_ADDR
// if hex [ 1 ] then
27342: LD_VAR 0 4
27346: PUSH
27347: LD_INT 1
27349: ARRAY
27350: IFFALSE 27354
// exit ;
27352: GO 27757
// height := hex [ 2 ] ;
27354: LD_ADDR_VAR 0 15
27358: PUSH
27359: LD_VAR 0 4
27363: PUSH
27364: LD_INT 2
27366: ARRAY
27367: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27368: LD_ADDR_VAR 0 14
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: LD_INT 3
27381: PUSH
27382: LD_INT 5
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: ST_TO_ADDR
// for i in tmp do
27391: LD_ADDR_VAR 0 8
27395: PUSH
27396: LD_VAR 0 14
27400: PUSH
27401: FOR_IN
27402: IFFALSE 27572
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27404: LD_ADDR_VAR 0 9
27408: PUSH
27409: LD_VAR 0 10
27413: PPUSH
27414: LD_VAR 0 8
27418: PPUSH
27419: LD_INT 5
27421: PPUSH
27422: CALL_OW 272
27426: PUSH
27427: LD_VAR 0 11
27431: PPUSH
27432: LD_VAR 0 8
27436: PPUSH
27437: LD_INT 5
27439: PPUSH
27440: CALL_OW 273
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27449: LD_VAR 0 9
27453: PUSH
27454: LD_INT 1
27456: ARRAY
27457: PPUSH
27458: LD_VAR 0 9
27462: PUSH
27463: LD_INT 2
27465: ARRAY
27466: PPUSH
27467: CALL_OW 488
27471: IFFALSE 27570
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27473: LD_ADDR_VAR 0 4
27477: PUSH
27478: LD_VAR 0 9
27482: PUSH
27483: LD_INT 1
27485: ARRAY
27486: PPUSH
27487: LD_VAR 0 9
27491: PUSH
27492: LD_INT 2
27494: ARRAY
27495: PPUSH
27496: CALL_OW 546
27500: ST_TO_ADDR
// if hex [ 1 ] then
27501: LD_VAR 0 4
27505: PUSH
27506: LD_INT 1
27508: ARRAY
27509: IFFALSE 27513
// continue ;
27511: GO 27401
// h := hex [ 2 ] ;
27513: LD_ADDR_VAR 0 13
27517: PUSH
27518: LD_VAR 0 4
27522: PUSH
27523: LD_INT 2
27525: ARRAY
27526: ST_TO_ADDR
// if h + 7 < height then
27527: LD_VAR 0 13
27531: PUSH
27532: LD_INT 7
27534: PLUS
27535: PUSH
27536: LD_VAR 0 15
27540: LESS
27541: IFFALSE 27570
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27543: LD_ADDR_VAR 0 18
27547: PUSH
27548: LD_INT 7
27550: PUSH
27551: LD_INT 28
27553: PUSH
27554: LD_INT 45
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: LIST
27561: PUSH
27562: LD_VAR 0 12
27566: ARRAY
27567: ST_TO_ADDR
// break ;
27568: GO 27572
// end ; end ; end ;
27570: GO 27401
27572: POP
27573: POP
// end ; if not weapon then
27574: LD_VAR 0 18
27578: NOT
27579: IFFALSE 27639
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27581: LD_ADDR_VAR 0 5
27585: PUSH
27586: LD_VAR 0 5
27590: PUSH
27591: LD_INT 11
27593: PUSH
27594: LD_INT 30
27596: PUSH
27597: LD_INT 49
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: LIST
27604: DIFF
27605: ST_TO_ADDR
// if not list then
27606: LD_VAR 0 5
27610: NOT
27611: IFFALSE 27615
// exit ;
27613: GO 27757
// weapon := list [ rand ( 1 , list ) ] ;
27615: LD_ADDR_VAR 0 18
27619: PUSH
27620: LD_VAR 0 5
27624: PUSH
27625: LD_INT 1
27627: PPUSH
27628: LD_VAR 0 5
27632: PPUSH
27633: CALL_OW 12
27637: ARRAY
27638: ST_TO_ADDR
// end ; if weapon then
27639: LD_VAR 0 18
27643: IFFALSE 27757
// begin tmp := CostOfWeapon ( weapon ) ;
27645: LD_ADDR_VAR 0 14
27649: PUSH
27650: LD_VAR 0 18
27654: PPUSH
27655: CALL_OW 451
27659: ST_TO_ADDR
// j := GetBase ( tower ) ;
27660: LD_ADDR_VAR 0 9
27664: PUSH
27665: LD_VAR 0 1
27669: PPUSH
27670: CALL_OW 274
27674: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27675: LD_VAR 0 9
27679: PPUSH
27680: LD_INT 1
27682: PPUSH
27683: CALL_OW 275
27687: PUSH
27688: LD_VAR 0 14
27692: PUSH
27693: LD_INT 1
27695: ARRAY
27696: GREATEREQUAL
27697: PUSH
27698: LD_VAR 0 9
27702: PPUSH
27703: LD_INT 2
27705: PPUSH
27706: CALL_OW 275
27710: PUSH
27711: LD_VAR 0 14
27715: PUSH
27716: LD_INT 2
27718: ARRAY
27719: GREATEREQUAL
27720: AND
27721: PUSH
27722: LD_VAR 0 9
27726: PPUSH
27727: LD_INT 3
27729: PPUSH
27730: CALL_OW 275
27734: PUSH
27735: LD_VAR 0 14
27739: PUSH
27740: LD_INT 3
27742: ARRAY
27743: GREATEREQUAL
27744: AND
27745: IFFALSE 27757
// result := weapon ;
27747: LD_ADDR_VAR 0 3
27751: PUSH
27752: LD_VAR 0 18
27756: ST_TO_ADDR
// end ; end ;
27757: LD_VAR 0 3
27761: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27762: LD_INT 0
27764: PPUSH
27765: PPUSH
// result := true ;
27766: LD_ADDR_VAR 0 3
27770: PUSH
27771: LD_INT 1
27773: ST_TO_ADDR
// if array1 = array2 then
27774: LD_VAR 0 1
27778: PUSH
27779: LD_VAR 0 2
27783: EQUAL
27784: IFFALSE 27844
// begin for i = 1 to array1 do
27786: LD_ADDR_VAR 0 4
27790: PUSH
27791: DOUBLE
27792: LD_INT 1
27794: DEC
27795: ST_TO_ADDR
27796: LD_VAR 0 1
27800: PUSH
27801: FOR_TO
27802: IFFALSE 27840
// if array1 [ i ] <> array2 [ i ] then
27804: LD_VAR 0 1
27808: PUSH
27809: LD_VAR 0 4
27813: ARRAY
27814: PUSH
27815: LD_VAR 0 2
27819: PUSH
27820: LD_VAR 0 4
27824: ARRAY
27825: NONEQUAL
27826: IFFALSE 27838
// begin result := false ;
27828: LD_ADDR_VAR 0 3
27832: PUSH
27833: LD_INT 0
27835: ST_TO_ADDR
// break ;
27836: GO 27840
// end ;
27838: GO 27801
27840: POP
27841: POP
// end else
27842: GO 27852
// result := false ;
27844: LD_ADDR_VAR 0 3
27848: PUSH
27849: LD_INT 0
27851: ST_TO_ADDR
// end ;
27852: LD_VAR 0 3
27856: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27857: LD_INT 0
27859: PPUSH
27860: PPUSH
// if not array1 or not array2 then
27861: LD_VAR 0 1
27865: NOT
27866: PUSH
27867: LD_VAR 0 2
27871: NOT
27872: OR
27873: IFFALSE 27877
// exit ;
27875: GO 27941
// result := true ;
27877: LD_ADDR_VAR 0 3
27881: PUSH
27882: LD_INT 1
27884: ST_TO_ADDR
// for i = 1 to array1 do
27885: LD_ADDR_VAR 0 4
27889: PUSH
27890: DOUBLE
27891: LD_INT 1
27893: DEC
27894: ST_TO_ADDR
27895: LD_VAR 0 1
27899: PUSH
27900: FOR_TO
27901: IFFALSE 27939
// if array1 [ i ] <> array2 [ i ] then
27903: LD_VAR 0 1
27907: PUSH
27908: LD_VAR 0 4
27912: ARRAY
27913: PUSH
27914: LD_VAR 0 2
27918: PUSH
27919: LD_VAR 0 4
27923: ARRAY
27924: NONEQUAL
27925: IFFALSE 27937
// begin result := false ;
27927: LD_ADDR_VAR 0 3
27931: PUSH
27932: LD_INT 0
27934: ST_TO_ADDR
// break ;
27935: GO 27939
// end ;
27937: GO 27900
27939: POP
27940: POP
// end ;
27941: LD_VAR 0 3
27945: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27946: LD_INT 0
27948: PPUSH
27949: PPUSH
27950: PPUSH
// pom := GetBase ( fac ) ;
27951: LD_ADDR_VAR 0 5
27955: PUSH
27956: LD_VAR 0 1
27960: PPUSH
27961: CALL_OW 274
27965: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27966: LD_ADDR_VAR 0 4
27970: PUSH
27971: LD_VAR 0 2
27975: PUSH
27976: LD_INT 1
27978: ARRAY
27979: PPUSH
27980: LD_VAR 0 2
27984: PUSH
27985: LD_INT 2
27987: ARRAY
27988: PPUSH
27989: LD_VAR 0 2
27993: PUSH
27994: LD_INT 3
27996: ARRAY
27997: PPUSH
27998: LD_VAR 0 2
28002: PUSH
28003: LD_INT 4
28005: ARRAY
28006: PPUSH
28007: CALL_OW 449
28011: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28012: LD_ADDR_VAR 0 3
28016: PUSH
28017: LD_VAR 0 5
28021: PPUSH
28022: LD_INT 1
28024: PPUSH
28025: CALL_OW 275
28029: PUSH
28030: LD_VAR 0 4
28034: PUSH
28035: LD_INT 1
28037: ARRAY
28038: GREATEREQUAL
28039: PUSH
28040: LD_VAR 0 5
28044: PPUSH
28045: LD_INT 2
28047: PPUSH
28048: CALL_OW 275
28052: PUSH
28053: LD_VAR 0 4
28057: PUSH
28058: LD_INT 2
28060: ARRAY
28061: GREATEREQUAL
28062: AND
28063: PUSH
28064: LD_VAR 0 5
28068: PPUSH
28069: LD_INT 3
28071: PPUSH
28072: CALL_OW 275
28076: PUSH
28077: LD_VAR 0 4
28081: PUSH
28082: LD_INT 3
28084: ARRAY
28085: GREATEREQUAL
28086: AND
28087: ST_TO_ADDR
// end ;
28088: LD_VAR 0 3
28092: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28093: LD_INT 0
28095: PPUSH
28096: PPUSH
28097: PPUSH
28098: PPUSH
// pom := GetBase ( building ) ;
28099: LD_ADDR_VAR 0 3
28103: PUSH
28104: LD_VAR 0 1
28108: PPUSH
28109: CALL_OW 274
28113: ST_TO_ADDR
// if not pom then
28114: LD_VAR 0 3
28118: NOT
28119: IFFALSE 28123
// exit ;
28121: GO 28293
// btype := GetBType ( building ) ;
28123: LD_ADDR_VAR 0 5
28127: PUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 266
28137: ST_TO_ADDR
// if btype = b_armoury then
28138: LD_VAR 0 5
28142: PUSH
28143: LD_INT 4
28145: EQUAL
28146: IFFALSE 28156
// btype := b_barracks ;
28148: LD_ADDR_VAR 0 5
28152: PUSH
28153: LD_INT 5
28155: ST_TO_ADDR
// if btype = b_depot then
28156: LD_VAR 0 5
28160: PUSH
28161: LD_INT 0
28163: EQUAL
28164: IFFALSE 28174
// btype := b_warehouse ;
28166: LD_ADDR_VAR 0 5
28170: PUSH
28171: LD_INT 1
28173: ST_TO_ADDR
// if btype = b_workshop then
28174: LD_VAR 0 5
28178: PUSH
28179: LD_INT 2
28181: EQUAL
28182: IFFALSE 28192
// btype := b_factory ;
28184: LD_ADDR_VAR 0 5
28188: PUSH
28189: LD_INT 3
28191: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28192: LD_ADDR_VAR 0 4
28196: PUSH
28197: LD_VAR 0 5
28201: PPUSH
28202: LD_VAR 0 1
28206: PPUSH
28207: CALL_OW 248
28211: PPUSH
28212: CALL_OW 450
28216: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28217: LD_ADDR_VAR 0 2
28221: PUSH
28222: LD_VAR 0 3
28226: PPUSH
28227: LD_INT 1
28229: PPUSH
28230: CALL_OW 275
28234: PUSH
28235: LD_VAR 0 4
28239: PUSH
28240: LD_INT 1
28242: ARRAY
28243: GREATEREQUAL
28244: PUSH
28245: LD_VAR 0 3
28249: PPUSH
28250: LD_INT 2
28252: PPUSH
28253: CALL_OW 275
28257: PUSH
28258: LD_VAR 0 4
28262: PUSH
28263: LD_INT 2
28265: ARRAY
28266: GREATEREQUAL
28267: AND
28268: PUSH
28269: LD_VAR 0 3
28273: PPUSH
28274: LD_INT 3
28276: PPUSH
28277: CALL_OW 275
28281: PUSH
28282: LD_VAR 0 4
28286: PUSH
28287: LD_INT 3
28289: ARRAY
28290: GREATEREQUAL
28291: AND
28292: ST_TO_ADDR
// end ;
28293: LD_VAR 0 2
28297: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28298: LD_INT 0
28300: PPUSH
28301: PPUSH
28302: PPUSH
// pom := GetBase ( building ) ;
28303: LD_ADDR_VAR 0 4
28307: PUSH
28308: LD_VAR 0 1
28312: PPUSH
28313: CALL_OW 274
28317: ST_TO_ADDR
// if not pom then
28318: LD_VAR 0 4
28322: NOT
28323: IFFALSE 28327
// exit ;
28325: GO 28428
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28327: LD_ADDR_VAR 0 5
28331: PUSH
28332: LD_VAR 0 2
28336: PPUSH
28337: LD_VAR 0 1
28341: PPUSH
28342: CALL_OW 248
28346: PPUSH
28347: CALL_OW 450
28351: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28352: LD_ADDR_VAR 0 3
28356: PUSH
28357: LD_VAR 0 4
28361: PPUSH
28362: LD_INT 1
28364: PPUSH
28365: CALL_OW 275
28369: PUSH
28370: LD_VAR 0 5
28374: PUSH
28375: LD_INT 1
28377: ARRAY
28378: GREATEREQUAL
28379: PUSH
28380: LD_VAR 0 4
28384: PPUSH
28385: LD_INT 2
28387: PPUSH
28388: CALL_OW 275
28392: PUSH
28393: LD_VAR 0 5
28397: PUSH
28398: LD_INT 2
28400: ARRAY
28401: GREATEREQUAL
28402: AND
28403: PUSH
28404: LD_VAR 0 4
28408: PPUSH
28409: LD_INT 3
28411: PPUSH
28412: CALL_OW 275
28416: PUSH
28417: LD_VAR 0 5
28421: PUSH
28422: LD_INT 3
28424: ARRAY
28425: GREATEREQUAL
28426: AND
28427: ST_TO_ADDR
// end ;
28428: LD_VAR 0 3
28432: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28433: LD_INT 0
28435: PPUSH
28436: PPUSH
28437: PPUSH
28438: PPUSH
28439: PPUSH
28440: PPUSH
28441: PPUSH
28442: PPUSH
28443: PPUSH
28444: PPUSH
28445: PPUSH
// result := false ;
28446: LD_ADDR_VAR 0 8
28450: PUSH
28451: LD_INT 0
28453: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28454: LD_VAR 0 5
28458: NOT
28459: PUSH
28460: LD_VAR 0 1
28464: NOT
28465: OR
28466: PUSH
28467: LD_VAR 0 2
28471: NOT
28472: OR
28473: PUSH
28474: LD_VAR 0 3
28478: NOT
28479: OR
28480: IFFALSE 28484
// exit ;
28482: GO 29298
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28484: LD_ADDR_VAR 0 14
28488: PUSH
28489: LD_VAR 0 1
28493: PPUSH
28494: LD_VAR 0 2
28498: PPUSH
28499: LD_VAR 0 3
28503: PPUSH
28504: LD_VAR 0 4
28508: PPUSH
28509: LD_VAR 0 5
28513: PUSH
28514: LD_INT 1
28516: ARRAY
28517: PPUSH
28518: CALL_OW 248
28522: PPUSH
28523: LD_INT 0
28525: PPUSH
28526: CALL 30531 0 6
28530: ST_TO_ADDR
// if not hexes then
28531: LD_VAR 0 14
28535: NOT
28536: IFFALSE 28540
// exit ;
28538: GO 29298
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28540: LD_ADDR_VAR 0 17
28544: PUSH
28545: LD_VAR 0 5
28549: PPUSH
28550: LD_INT 22
28552: PUSH
28553: LD_VAR 0 13
28557: PPUSH
28558: CALL_OW 255
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 2
28569: PUSH
28570: LD_INT 30
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 30
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PPUSH
28599: CALL_OW 72
28603: ST_TO_ADDR
// for i = 1 to hexes do
28604: LD_ADDR_VAR 0 9
28608: PUSH
28609: DOUBLE
28610: LD_INT 1
28612: DEC
28613: ST_TO_ADDR
28614: LD_VAR 0 14
28618: PUSH
28619: FOR_TO
28620: IFFALSE 29296
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28622: LD_ADDR_VAR 0 13
28626: PUSH
28627: LD_VAR 0 14
28631: PUSH
28632: LD_VAR 0 9
28636: ARRAY
28637: PUSH
28638: LD_INT 1
28640: ARRAY
28641: PPUSH
28642: LD_VAR 0 14
28646: PUSH
28647: LD_VAR 0 9
28651: ARRAY
28652: PUSH
28653: LD_INT 2
28655: ARRAY
28656: PPUSH
28657: CALL_OW 428
28661: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28662: LD_VAR 0 14
28666: PUSH
28667: LD_VAR 0 9
28671: ARRAY
28672: PUSH
28673: LD_INT 1
28675: ARRAY
28676: PPUSH
28677: LD_VAR 0 14
28681: PUSH
28682: LD_VAR 0 9
28686: ARRAY
28687: PUSH
28688: LD_INT 2
28690: ARRAY
28691: PPUSH
28692: CALL_OW 351
28696: PUSH
28697: LD_VAR 0 14
28701: PUSH
28702: LD_VAR 0 9
28706: ARRAY
28707: PUSH
28708: LD_INT 1
28710: ARRAY
28711: PPUSH
28712: LD_VAR 0 14
28716: PUSH
28717: LD_VAR 0 9
28721: ARRAY
28722: PUSH
28723: LD_INT 2
28725: ARRAY
28726: PPUSH
28727: CALL_OW 488
28731: NOT
28732: OR
28733: PUSH
28734: LD_VAR 0 13
28738: PPUSH
28739: CALL_OW 247
28743: PUSH
28744: LD_INT 3
28746: EQUAL
28747: OR
28748: IFFALSE 28754
// exit ;
28750: POP
28751: POP
28752: GO 29298
// if not tmp then
28754: LD_VAR 0 13
28758: NOT
28759: IFFALSE 28763
// continue ;
28761: GO 28619
// result := true ;
28763: LD_ADDR_VAR 0 8
28767: PUSH
28768: LD_INT 1
28770: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28771: LD_VAR 0 6
28775: PUSH
28776: LD_VAR 0 13
28780: PPUSH
28781: CALL_OW 247
28785: PUSH
28786: LD_INT 2
28788: EQUAL
28789: AND
28790: PUSH
28791: LD_VAR 0 13
28795: PPUSH
28796: CALL_OW 263
28800: PUSH
28801: LD_INT 1
28803: EQUAL
28804: AND
28805: IFFALSE 28969
// begin if IsDrivenBy ( tmp ) then
28807: LD_VAR 0 13
28811: PPUSH
28812: CALL_OW 311
28816: IFFALSE 28820
// continue ;
28818: GO 28619
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28820: LD_VAR 0 6
28824: PPUSH
28825: LD_INT 3
28827: PUSH
28828: LD_INT 60
28830: PUSH
28831: EMPTY
28832: LIST
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 3
28840: PUSH
28841: LD_INT 55
28843: PUSH
28844: EMPTY
28845: LIST
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PPUSH
28855: CALL_OW 72
28859: IFFALSE 28967
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28861: LD_ADDR_VAR 0 18
28865: PUSH
28866: LD_VAR 0 6
28870: PPUSH
28871: LD_INT 3
28873: PUSH
28874: LD_INT 60
28876: PUSH
28877: EMPTY
28878: LIST
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 3
28886: PUSH
28887: LD_INT 55
28889: PUSH
28890: EMPTY
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PPUSH
28901: CALL_OW 72
28905: PUSH
28906: LD_INT 1
28908: ARRAY
28909: ST_TO_ADDR
// if IsInUnit ( driver ) then
28910: LD_VAR 0 18
28914: PPUSH
28915: CALL_OW 310
28919: IFFALSE 28930
// ComExit ( driver ) ;
28921: LD_VAR 0 18
28925: PPUSH
28926: CALL 54292 0 1
// AddComEnterUnit ( driver , tmp ) ;
28930: LD_VAR 0 18
28934: PPUSH
28935: LD_VAR 0 13
28939: PPUSH
28940: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28944: LD_VAR 0 18
28948: PPUSH
28949: LD_VAR 0 7
28953: PPUSH
28954: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28958: LD_VAR 0 18
28962: PPUSH
28963: CALL_OW 181
// end ; continue ;
28967: GO 28619
// end ; if not cleaners or not tmp in cleaners then
28969: LD_VAR 0 6
28973: NOT
28974: PUSH
28975: LD_VAR 0 13
28979: PUSH
28980: LD_VAR 0 6
28984: IN
28985: NOT
28986: OR
28987: IFFALSE 29294
// begin if dep then
28989: LD_VAR 0 17
28993: IFFALSE 29129
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28995: LD_ADDR_VAR 0 16
28999: PUSH
29000: LD_VAR 0 17
29004: PUSH
29005: LD_INT 1
29007: ARRAY
29008: PPUSH
29009: CALL_OW 250
29013: PPUSH
29014: LD_VAR 0 17
29018: PUSH
29019: LD_INT 1
29021: ARRAY
29022: PPUSH
29023: CALL_OW 254
29027: PPUSH
29028: LD_INT 5
29030: PPUSH
29031: CALL_OW 272
29035: PUSH
29036: LD_VAR 0 17
29040: PUSH
29041: LD_INT 1
29043: ARRAY
29044: PPUSH
29045: CALL_OW 251
29049: PPUSH
29050: LD_VAR 0 17
29054: PUSH
29055: LD_INT 1
29057: ARRAY
29058: PPUSH
29059: CALL_OW 254
29063: PPUSH
29064: LD_INT 5
29066: PPUSH
29067: CALL_OW 273
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29076: LD_VAR 0 16
29080: PUSH
29081: LD_INT 1
29083: ARRAY
29084: PPUSH
29085: LD_VAR 0 16
29089: PUSH
29090: LD_INT 2
29092: ARRAY
29093: PPUSH
29094: CALL_OW 488
29098: IFFALSE 29129
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29100: LD_VAR 0 13
29104: PPUSH
29105: LD_VAR 0 16
29109: PUSH
29110: LD_INT 1
29112: ARRAY
29113: PPUSH
29114: LD_VAR 0 16
29118: PUSH
29119: LD_INT 2
29121: ARRAY
29122: PPUSH
29123: CALL_OW 111
// continue ;
29127: GO 28619
// end ; end ; r := GetDir ( tmp ) ;
29129: LD_ADDR_VAR 0 15
29133: PUSH
29134: LD_VAR 0 13
29138: PPUSH
29139: CALL_OW 254
29143: ST_TO_ADDR
// if r = 5 then
29144: LD_VAR 0 15
29148: PUSH
29149: LD_INT 5
29151: EQUAL
29152: IFFALSE 29162
// r := 0 ;
29154: LD_ADDR_VAR 0 15
29158: PUSH
29159: LD_INT 0
29161: ST_TO_ADDR
// for j = r to 5 do
29162: LD_ADDR_VAR 0 10
29166: PUSH
29167: DOUBLE
29168: LD_VAR 0 15
29172: DEC
29173: ST_TO_ADDR
29174: LD_INT 5
29176: PUSH
29177: FOR_TO
29178: IFFALSE 29292
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29180: LD_ADDR_VAR 0 11
29184: PUSH
29185: LD_VAR 0 13
29189: PPUSH
29190: CALL_OW 250
29194: PPUSH
29195: LD_VAR 0 10
29199: PPUSH
29200: LD_INT 2
29202: PPUSH
29203: CALL_OW 272
29207: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29208: LD_ADDR_VAR 0 12
29212: PUSH
29213: LD_VAR 0 13
29217: PPUSH
29218: CALL_OW 251
29222: PPUSH
29223: LD_VAR 0 10
29227: PPUSH
29228: LD_INT 2
29230: PPUSH
29231: CALL_OW 273
29235: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29236: LD_VAR 0 11
29240: PPUSH
29241: LD_VAR 0 12
29245: PPUSH
29246: CALL_OW 488
29250: PUSH
29251: LD_VAR 0 11
29255: PPUSH
29256: LD_VAR 0 12
29260: PPUSH
29261: CALL_OW 428
29265: NOT
29266: AND
29267: IFFALSE 29290
// begin ComMoveXY ( tmp , _x , _y ) ;
29269: LD_VAR 0 13
29273: PPUSH
29274: LD_VAR 0 11
29278: PPUSH
29279: LD_VAR 0 12
29283: PPUSH
29284: CALL_OW 111
// break ;
29288: GO 29292
// end ; end ;
29290: GO 29177
29292: POP
29293: POP
// end ; end ;
29294: GO 28619
29296: POP
29297: POP
// end ;
29298: LD_VAR 0 8
29302: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29303: LD_INT 0
29305: PPUSH
// result := true ;
29306: LD_ADDR_VAR 0 3
29310: PUSH
29311: LD_INT 1
29313: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29314: LD_VAR 0 2
29318: PUSH
29319: LD_INT 24
29321: DOUBLE
29322: EQUAL
29323: IFTRUE 29333
29325: LD_INT 33
29327: DOUBLE
29328: EQUAL
29329: IFTRUE 29333
29331: GO 29358
29333: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29334: LD_ADDR_VAR 0 3
29338: PUSH
29339: LD_INT 32
29341: PPUSH
29342: LD_VAR 0 1
29346: PPUSH
29347: CALL_OW 321
29351: PUSH
29352: LD_INT 2
29354: EQUAL
29355: ST_TO_ADDR
29356: GO 29674
29358: LD_INT 20
29360: DOUBLE
29361: EQUAL
29362: IFTRUE 29366
29364: GO 29391
29366: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29367: LD_ADDR_VAR 0 3
29371: PUSH
29372: LD_INT 6
29374: PPUSH
29375: LD_VAR 0 1
29379: PPUSH
29380: CALL_OW 321
29384: PUSH
29385: LD_INT 2
29387: EQUAL
29388: ST_TO_ADDR
29389: GO 29674
29391: LD_INT 22
29393: DOUBLE
29394: EQUAL
29395: IFTRUE 29405
29397: LD_INT 36
29399: DOUBLE
29400: EQUAL
29401: IFTRUE 29405
29403: GO 29430
29405: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29406: LD_ADDR_VAR 0 3
29410: PUSH
29411: LD_INT 15
29413: PPUSH
29414: LD_VAR 0 1
29418: PPUSH
29419: CALL_OW 321
29423: PUSH
29424: LD_INT 2
29426: EQUAL
29427: ST_TO_ADDR
29428: GO 29674
29430: LD_INT 30
29432: DOUBLE
29433: EQUAL
29434: IFTRUE 29438
29436: GO 29463
29438: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29439: LD_ADDR_VAR 0 3
29443: PUSH
29444: LD_INT 20
29446: PPUSH
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL_OW 321
29456: PUSH
29457: LD_INT 2
29459: EQUAL
29460: ST_TO_ADDR
29461: GO 29674
29463: LD_INT 28
29465: DOUBLE
29466: EQUAL
29467: IFTRUE 29477
29469: LD_INT 21
29471: DOUBLE
29472: EQUAL
29473: IFTRUE 29477
29475: GO 29502
29477: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29478: LD_ADDR_VAR 0 3
29482: PUSH
29483: LD_INT 21
29485: PPUSH
29486: LD_VAR 0 1
29490: PPUSH
29491: CALL_OW 321
29495: PUSH
29496: LD_INT 2
29498: EQUAL
29499: ST_TO_ADDR
29500: GO 29674
29502: LD_INT 16
29504: DOUBLE
29505: EQUAL
29506: IFTRUE 29510
29508: GO 29535
29510: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29511: LD_ADDR_VAR 0 3
29515: PUSH
29516: LD_INT 84
29518: PPUSH
29519: LD_VAR 0 1
29523: PPUSH
29524: CALL_OW 321
29528: PUSH
29529: LD_INT 2
29531: EQUAL
29532: ST_TO_ADDR
29533: GO 29674
29535: LD_INT 19
29537: DOUBLE
29538: EQUAL
29539: IFTRUE 29549
29541: LD_INT 23
29543: DOUBLE
29544: EQUAL
29545: IFTRUE 29549
29547: GO 29574
29549: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29550: LD_ADDR_VAR 0 3
29554: PUSH
29555: LD_INT 83
29557: PPUSH
29558: LD_VAR 0 1
29562: PPUSH
29563: CALL_OW 321
29567: PUSH
29568: LD_INT 2
29570: EQUAL
29571: ST_TO_ADDR
29572: GO 29674
29574: LD_INT 17
29576: DOUBLE
29577: EQUAL
29578: IFTRUE 29582
29580: GO 29607
29582: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29583: LD_ADDR_VAR 0 3
29587: PUSH
29588: LD_INT 39
29590: PPUSH
29591: LD_VAR 0 1
29595: PPUSH
29596: CALL_OW 321
29600: PUSH
29601: LD_INT 2
29603: EQUAL
29604: ST_TO_ADDR
29605: GO 29674
29607: LD_INT 18
29609: DOUBLE
29610: EQUAL
29611: IFTRUE 29615
29613: GO 29640
29615: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29616: LD_ADDR_VAR 0 3
29620: PUSH
29621: LD_INT 40
29623: PPUSH
29624: LD_VAR 0 1
29628: PPUSH
29629: CALL_OW 321
29633: PUSH
29634: LD_INT 2
29636: EQUAL
29637: ST_TO_ADDR
29638: GO 29674
29640: LD_INT 27
29642: DOUBLE
29643: EQUAL
29644: IFTRUE 29648
29646: GO 29673
29648: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29649: LD_ADDR_VAR 0 3
29653: PUSH
29654: LD_INT 35
29656: PPUSH
29657: LD_VAR 0 1
29661: PPUSH
29662: CALL_OW 321
29666: PUSH
29667: LD_INT 2
29669: EQUAL
29670: ST_TO_ADDR
29671: GO 29674
29673: POP
// end ;
29674: LD_VAR 0 3
29678: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29679: LD_INT 0
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
29685: PPUSH
29686: PPUSH
29687: PPUSH
29688: PPUSH
29689: PPUSH
29690: PPUSH
29691: PPUSH
// result := false ;
29692: LD_ADDR_VAR 0 6
29696: PUSH
29697: LD_INT 0
29699: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29700: LD_VAR 0 1
29704: NOT
29705: PUSH
29706: LD_VAR 0 1
29710: PPUSH
29711: CALL_OW 266
29715: PUSH
29716: LD_INT 0
29718: PUSH
29719: LD_INT 1
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: IN
29726: NOT
29727: OR
29728: PUSH
29729: LD_VAR 0 2
29733: NOT
29734: OR
29735: PUSH
29736: LD_VAR 0 5
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: LD_INT 3
29752: PUSH
29753: LD_INT 4
29755: PUSH
29756: LD_INT 5
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: IN
29767: NOT
29768: OR
29769: PUSH
29770: LD_VAR 0 3
29774: PPUSH
29775: LD_VAR 0 4
29779: PPUSH
29780: CALL_OW 488
29784: NOT
29785: OR
29786: IFFALSE 29790
// exit ;
29788: GO 30526
// side := GetSide ( depot ) ;
29790: LD_ADDR_VAR 0 9
29794: PUSH
29795: LD_VAR 0 1
29799: PPUSH
29800: CALL_OW 255
29804: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29805: LD_VAR 0 9
29809: PPUSH
29810: LD_VAR 0 2
29814: PPUSH
29815: CALL 29303 0 2
29819: NOT
29820: IFFALSE 29824
// exit ;
29822: GO 30526
// pom := GetBase ( depot ) ;
29824: LD_ADDR_VAR 0 10
29828: PUSH
29829: LD_VAR 0 1
29833: PPUSH
29834: CALL_OW 274
29838: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29839: LD_ADDR_VAR 0 11
29843: PUSH
29844: LD_VAR 0 2
29848: PPUSH
29849: LD_VAR 0 1
29853: PPUSH
29854: CALL_OW 248
29858: PPUSH
29859: CALL_OW 450
29863: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29864: LD_VAR 0 10
29868: PPUSH
29869: LD_INT 1
29871: PPUSH
29872: CALL_OW 275
29876: PUSH
29877: LD_VAR 0 11
29881: PUSH
29882: LD_INT 1
29884: ARRAY
29885: GREATEREQUAL
29886: PUSH
29887: LD_VAR 0 10
29891: PPUSH
29892: LD_INT 2
29894: PPUSH
29895: CALL_OW 275
29899: PUSH
29900: LD_VAR 0 11
29904: PUSH
29905: LD_INT 2
29907: ARRAY
29908: GREATEREQUAL
29909: AND
29910: PUSH
29911: LD_VAR 0 10
29915: PPUSH
29916: LD_INT 3
29918: PPUSH
29919: CALL_OW 275
29923: PUSH
29924: LD_VAR 0 11
29928: PUSH
29929: LD_INT 3
29931: ARRAY
29932: GREATEREQUAL
29933: AND
29934: NOT
29935: IFFALSE 29939
// exit ;
29937: GO 30526
// if GetBType ( depot ) = b_depot then
29939: LD_VAR 0 1
29943: PPUSH
29944: CALL_OW 266
29948: PUSH
29949: LD_INT 0
29951: EQUAL
29952: IFFALSE 29964
// dist := 28 else
29954: LD_ADDR_VAR 0 14
29958: PUSH
29959: LD_INT 28
29961: ST_TO_ADDR
29962: GO 29972
// dist := 36 ;
29964: LD_ADDR_VAR 0 14
29968: PUSH
29969: LD_INT 36
29971: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29972: LD_VAR 0 1
29976: PPUSH
29977: LD_VAR 0 3
29981: PPUSH
29982: LD_VAR 0 4
29986: PPUSH
29987: CALL_OW 297
29991: PUSH
29992: LD_VAR 0 14
29996: GREATER
29997: IFFALSE 30001
// exit ;
29999: GO 30526
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30001: LD_ADDR_VAR 0 12
30005: PUSH
30006: LD_VAR 0 2
30010: PPUSH
30011: LD_VAR 0 3
30015: PPUSH
30016: LD_VAR 0 4
30020: PPUSH
30021: LD_VAR 0 5
30025: PPUSH
30026: LD_VAR 0 1
30030: PPUSH
30031: CALL_OW 248
30035: PPUSH
30036: LD_INT 0
30038: PPUSH
30039: CALL 30531 0 6
30043: ST_TO_ADDR
// if not hexes then
30044: LD_VAR 0 12
30048: NOT
30049: IFFALSE 30053
// exit ;
30051: GO 30526
// hex := GetHexInfo ( x , y ) ;
30053: LD_ADDR_VAR 0 15
30057: PUSH
30058: LD_VAR 0 3
30062: PPUSH
30063: LD_VAR 0 4
30067: PPUSH
30068: CALL_OW 546
30072: ST_TO_ADDR
// if hex [ 1 ] then
30073: LD_VAR 0 15
30077: PUSH
30078: LD_INT 1
30080: ARRAY
30081: IFFALSE 30085
// exit ;
30083: GO 30526
// height := hex [ 2 ] ;
30085: LD_ADDR_VAR 0 13
30089: PUSH
30090: LD_VAR 0 15
30094: PUSH
30095: LD_INT 2
30097: ARRAY
30098: ST_TO_ADDR
// for i = 1 to hexes do
30099: LD_ADDR_VAR 0 7
30103: PUSH
30104: DOUBLE
30105: LD_INT 1
30107: DEC
30108: ST_TO_ADDR
30109: LD_VAR 0 12
30113: PUSH
30114: FOR_TO
30115: IFFALSE 30445
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30117: LD_VAR 0 12
30121: PUSH
30122: LD_VAR 0 7
30126: ARRAY
30127: PUSH
30128: LD_INT 1
30130: ARRAY
30131: PPUSH
30132: LD_VAR 0 12
30136: PUSH
30137: LD_VAR 0 7
30141: ARRAY
30142: PUSH
30143: LD_INT 2
30145: ARRAY
30146: PPUSH
30147: CALL_OW 488
30151: NOT
30152: PUSH
30153: LD_VAR 0 12
30157: PUSH
30158: LD_VAR 0 7
30162: ARRAY
30163: PUSH
30164: LD_INT 1
30166: ARRAY
30167: PPUSH
30168: LD_VAR 0 12
30172: PUSH
30173: LD_VAR 0 7
30177: ARRAY
30178: PUSH
30179: LD_INT 2
30181: ARRAY
30182: PPUSH
30183: CALL_OW 428
30187: PUSH
30188: LD_INT 0
30190: GREATER
30191: OR
30192: PUSH
30193: LD_VAR 0 12
30197: PUSH
30198: LD_VAR 0 7
30202: ARRAY
30203: PUSH
30204: LD_INT 1
30206: ARRAY
30207: PPUSH
30208: LD_VAR 0 12
30212: PUSH
30213: LD_VAR 0 7
30217: ARRAY
30218: PUSH
30219: LD_INT 2
30221: ARRAY
30222: PPUSH
30223: CALL_OW 351
30227: OR
30228: IFFALSE 30234
// exit ;
30230: POP
30231: POP
30232: GO 30526
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30234: LD_ADDR_VAR 0 8
30238: PUSH
30239: LD_VAR 0 12
30243: PUSH
30244: LD_VAR 0 7
30248: ARRAY
30249: PUSH
30250: LD_INT 1
30252: ARRAY
30253: PPUSH
30254: LD_VAR 0 12
30258: PUSH
30259: LD_VAR 0 7
30263: ARRAY
30264: PUSH
30265: LD_INT 2
30267: ARRAY
30268: PPUSH
30269: CALL_OW 546
30273: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30274: LD_VAR 0 8
30278: PUSH
30279: LD_INT 1
30281: ARRAY
30282: PUSH
30283: LD_VAR 0 8
30287: PUSH
30288: LD_INT 2
30290: ARRAY
30291: PUSH
30292: LD_VAR 0 13
30296: PUSH
30297: LD_INT 2
30299: PLUS
30300: GREATER
30301: OR
30302: PUSH
30303: LD_VAR 0 8
30307: PUSH
30308: LD_INT 2
30310: ARRAY
30311: PUSH
30312: LD_VAR 0 13
30316: PUSH
30317: LD_INT 2
30319: MINUS
30320: LESS
30321: OR
30322: PUSH
30323: LD_VAR 0 8
30327: PUSH
30328: LD_INT 3
30330: ARRAY
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: LD_INT 8
30337: PUSH
30338: LD_INT 9
30340: PUSH
30341: LD_INT 10
30343: PUSH
30344: LD_INT 11
30346: PUSH
30347: LD_INT 12
30349: PUSH
30350: LD_INT 13
30352: PUSH
30353: LD_INT 16
30355: PUSH
30356: LD_INT 17
30358: PUSH
30359: LD_INT 18
30361: PUSH
30362: LD_INT 19
30364: PUSH
30365: LD_INT 20
30367: PUSH
30368: LD_INT 21
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: IN
30386: NOT
30387: OR
30388: PUSH
30389: LD_VAR 0 8
30393: PUSH
30394: LD_INT 5
30396: ARRAY
30397: NOT
30398: OR
30399: PUSH
30400: LD_VAR 0 8
30404: PUSH
30405: LD_INT 6
30407: ARRAY
30408: PUSH
30409: LD_INT 1
30411: PUSH
30412: LD_INT 2
30414: PUSH
30415: LD_INT 7
30417: PUSH
30418: LD_INT 9
30420: PUSH
30421: LD_INT 10
30423: PUSH
30424: LD_INT 11
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: IN
30435: NOT
30436: OR
30437: IFFALSE 30443
// exit ;
30439: POP
30440: POP
30441: GO 30526
// end ;
30443: GO 30114
30445: POP
30446: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30447: LD_VAR 0 9
30451: PPUSH
30452: LD_VAR 0 3
30456: PPUSH
30457: LD_VAR 0 4
30461: PPUSH
30462: LD_INT 20
30464: PPUSH
30465: CALL 22478 0 4
30469: PUSH
30470: LD_INT 4
30472: ARRAY
30473: IFFALSE 30477
// exit ;
30475: GO 30526
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30477: LD_VAR 0 2
30481: PUSH
30482: LD_INT 29
30484: PUSH
30485: LD_INT 30
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: IN
30492: PUSH
30493: LD_VAR 0 3
30497: PPUSH
30498: LD_VAR 0 4
30502: PPUSH
30503: LD_VAR 0 9
30507: PPUSH
30508: CALL_OW 440
30512: NOT
30513: AND
30514: IFFALSE 30518
// exit ;
30516: GO 30526
// result := true ;
30518: LD_ADDR_VAR 0 6
30522: PUSH
30523: LD_INT 1
30525: ST_TO_ADDR
// end ;
30526: LD_VAR 0 6
30530: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30531: LD_INT 0
30533: PPUSH
30534: PPUSH
30535: PPUSH
30536: PPUSH
30537: PPUSH
30538: PPUSH
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
30543: PPUSH
30544: PPUSH
30545: PPUSH
30546: PPUSH
30547: PPUSH
30548: PPUSH
30549: PPUSH
30550: PPUSH
30551: PPUSH
30552: PPUSH
30553: PPUSH
30554: PPUSH
30555: PPUSH
30556: PPUSH
30557: PPUSH
30558: PPUSH
30559: PPUSH
30560: PPUSH
30561: PPUSH
30562: PPUSH
30563: PPUSH
30564: PPUSH
30565: PPUSH
30566: PPUSH
30567: PPUSH
30568: PPUSH
30569: PPUSH
30570: PPUSH
30571: PPUSH
30572: PPUSH
30573: PPUSH
30574: PPUSH
30575: PPUSH
30576: PPUSH
30577: PPUSH
30578: PPUSH
30579: PPUSH
30580: PPUSH
30581: PPUSH
30582: PPUSH
30583: PPUSH
30584: PPUSH
30585: PPUSH
30586: PPUSH
30587: PPUSH
30588: PPUSH
30589: PPUSH
30590: PPUSH
// result = [ ] ;
30591: LD_ADDR_VAR 0 7
30595: PUSH
30596: EMPTY
30597: ST_TO_ADDR
// temp_list = [ ] ;
30598: LD_ADDR_VAR 0 9
30602: PUSH
30603: EMPTY
30604: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30605: LD_VAR 0 4
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: LD_INT 2
30618: PUSH
30619: LD_INT 3
30621: PUSH
30622: LD_INT 4
30624: PUSH
30625: LD_INT 5
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: IN
30636: NOT
30637: PUSH
30638: LD_VAR 0 1
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: LD_INT 1
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: IN
30653: PUSH
30654: LD_VAR 0 5
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: LD_INT 2
30664: PUSH
30665: LD_INT 3
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: IN
30673: NOT
30674: AND
30675: OR
30676: IFFALSE 30680
// exit ;
30678: GO 49071
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30680: LD_VAR 0 1
30684: PUSH
30685: LD_INT 6
30687: PUSH
30688: LD_INT 7
30690: PUSH
30691: LD_INT 8
30693: PUSH
30694: LD_INT 13
30696: PUSH
30697: LD_INT 12
30699: PUSH
30700: LD_INT 15
30702: PUSH
30703: LD_INT 11
30705: PUSH
30706: LD_INT 14
30708: PUSH
30709: LD_INT 10
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: IN
30723: IFFALSE 30733
// btype = b_lab ;
30725: LD_ADDR_VAR 0 1
30729: PUSH
30730: LD_INT 6
30732: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30733: LD_VAR 0 6
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: LD_INT 2
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: LIST
30751: IN
30752: NOT
30753: PUSH
30754: LD_VAR 0 1
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: LD_INT 1
30764: PUSH
30765: LD_INT 2
30767: PUSH
30768: LD_INT 3
30770: PUSH
30771: LD_INT 6
30773: PUSH
30774: LD_INT 36
30776: PUSH
30777: LD_INT 4
30779: PUSH
30780: LD_INT 5
30782: PUSH
30783: LD_INT 31
30785: PUSH
30786: LD_INT 32
30788: PUSH
30789: LD_INT 33
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: IN
30805: NOT
30806: PUSH
30807: LD_VAR 0 6
30811: PUSH
30812: LD_INT 1
30814: EQUAL
30815: AND
30816: OR
30817: PUSH
30818: LD_VAR 0 1
30822: PUSH
30823: LD_INT 2
30825: PUSH
30826: LD_INT 3
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: IN
30833: NOT
30834: PUSH
30835: LD_VAR 0 6
30839: PUSH
30840: LD_INT 2
30842: EQUAL
30843: AND
30844: OR
30845: IFFALSE 30855
// mode = 0 ;
30847: LD_ADDR_VAR 0 6
30851: PUSH
30852: LD_INT 0
30854: ST_TO_ADDR
// case mode of 0 :
30855: LD_VAR 0 6
30859: PUSH
30860: LD_INT 0
30862: DOUBLE
30863: EQUAL
30864: IFTRUE 30868
30866: GO 42321
30868: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30869: LD_ADDR_VAR 0 11
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: LD_INT 1
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 0
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: LD_INT 2
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: LD_INT 2
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: LD_INT 2
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 0
30994: PUSH
30995: LD_INT 2
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 1
31004: NEG
31005: PUSH
31006: LD_INT 1
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 1
31015: PUSH
31016: LD_INT 3
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: LD_INT 3
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: LD_INT 2
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31062: LD_ADDR_VAR 0 12
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 0
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 2
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 2
31185: NEG
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 2
31196: NEG
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 2
31208: NEG
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 3
31219: NEG
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 3
31230: NEG
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31258: LD_ADDR_VAR 0 13
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: LD_INT 1
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 1
31339: NEG
31340: PUSH
31341: LD_INT 2
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 2
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: LD_INT 2
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 1
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: LD_INT 2
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: NEG
31406: PUSH
31407: LD_INT 3
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 3
31417: NEG
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 3
31429: NEG
31430: PUSH
31431: LD_INT 3
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31457: LD_ADDR_VAR 0 14
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: LD_INT 0
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 2
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: LD_INT 2
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: LD_INT 2
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: LD_INT 1
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PUSH
31605: LD_INT 3
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: LD_INT 3
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: LD_INT 2
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31653: LD_ADDR_VAR 0 15
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: LD_INT 0
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 0
31670: PUSH
31671: LD_INT 1
31673: NEG
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: LD_INT 1
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 0
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: LD_INT 1
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 2
31776: NEG
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 2
31787: NEG
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 2
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 3
31810: PUSH
31811: LD_INT 0
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 3
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31846: LD_ADDR_VAR 0 16
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: LD_INT 2
31931: NEG
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 2
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: LD_INT 1
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: NEG
31982: PUSH
31983: LD_INT 2
31985: NEG
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 3
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: LD_INT 3
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 2
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32039: LD_ADDR_VAR 0 17
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 1
32067: PUSH
32068: LD_INT 0
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 1
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 0
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 1
32097: NEG
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: LD_INT 2
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: LD_INT 1
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: LD_INT 0
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 2
32174: PUSH
32175: LD_INT 2
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: LD_INT 2
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 2
32215: NEG
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 2
32226: NEG
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 2
32238: NEG
32239: PUSH
32240: LD_INT 2
32242: NEG
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32269: LD_ADDR_VAR 0 18
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: LD_INT 2
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 2
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 2
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 2
32404: PUSH
32405: LD_INT 2
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: LD_INT 2
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 0
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 1
32434: NEG
32435: PUSH
32436: LD_INT 1
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 2
32445: NEG
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 2
32456: NEG
32457: PUSH
32458: LD_INT 1
32460: NEG
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 2
32468: NEG
32469: PUSH
32470: LD_INT 2
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32499: LD_ADDR_VAR 0 19
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 1
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: NEG
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 1
32568: NEG
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: LD_INT 2
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 2
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 2
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 2
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32729: LD_ADDR_VAR 0 20
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 1
32757: PUSH
32758: LD_INT 0
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 1
32810: NEG
32811: PUSH
32812: LD_INT 2
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: LD_INT 2
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 2
32864: PUSH
32865: LD_INT 2
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: LD_INT 2
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: LD_INT 2
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 2
32905: NEG
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 2
32916: NEG
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 2
32928: NEG
32929: PUSH
32930: LD_INT 2
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32959: LD_ADDR_VAR 0 21
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 1
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: NEG
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 1
33028: NEG
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: LD_INT 2
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 0
33052: PUSH
33053: LD_INT 2
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 1
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: LD_INT 0
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 2
33094: PUSH
33095: LD_INT 2
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: LD_INT 2
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 1
33124: NEG
33125: PUSH
33126: LD_INT 1
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 2
33135: NEG
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 2
33146: NEG
33147: PUSH
33148: LD_INT 1
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 2
33158: NEG
33159: PUSH
33160: LD_INT 2
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33189: LD_ADDR_VAR 0 22
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 1
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: NEG
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 2
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 2
33324: PUSH
33325: LD_INT 2
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: LD_INT 1
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 2
33365: NEG
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: NEG
33377: PUSH
33378: LD_INT 1
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33419: LD_ADDR_VAR 0 23
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: LD_INT 1
33439: NEG
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 1
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 0
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 1
33477: NEG
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 1
33488: NEG
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: LD_INT 2
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: LD_INT 2
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 2
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: LD_INT 1
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 2
33554: PUSH
33555: LD_INT 2
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: LD_INT 2
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: LD_INT 2
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: NEG
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 2
33606: NEG
33607: PUSH
33608: LD_INT 1
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 2
33618: NEG
33619: PUSH
33620: LD_INT 2
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 2
33630: NEG
33631: PUSH
33632: LD_INT 3
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 1
33642: NEG
33643: PUSH
33644: LD_INT 3
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 2
33657: NEG
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 2
33665: PUSH
33666: LD_INT 1
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33699: LD_ADDR_VAR 0 24
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: NEG
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: LD_INT 1
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: LD_INT 2
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: LD_INT 2
33795: NEG
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: LD_INT 1
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 2
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: NEG
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: LD_INT 1
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 2
33898: NEG
33899: PUSH
33900: LD_INT 2
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 2
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 3
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 3
33942: PUSH
33943: LD_INT 2
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33975: LD_ADDR_VAR 0 25
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: LD_INT 2
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: LD_INT 1
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: LD_INT 0
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: LD_INT 1
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 2
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 2
34174: NEG
34175: PUSH
34176: LD_INT 2
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 3
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: LD_INT 3
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: PUSH
34217: LD_INT 3
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34249: LD_ADDR_VAR 0 26
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 0
34266: PUSH
34267: LD_INT 1
34269: NEG
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 1
34277: PUSH
34278: LD_INT 0
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: LD_INT 1
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 1
34330: NEG
34331: PUSH
34332: LD_INT 2
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: LD_INT 2
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 1
34353: PUSH
34354: LD_INT 1
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 2
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: LD_INT 2
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: LD_INT 2
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: LD_INT 2
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: NEG
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 1
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 2
34448: NEG
34449: PUSH
34450: LD_INT 2
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: LD_INT 3
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: LD_INT 3
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 1
34480: NEG
34481: PUSH
34482: LD_INT 2
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 2
34491: NEG
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34525: LD_ADDR_VAR 0 27
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: LD_INT 2
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: NEG
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: LD_INT 2
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: NEG
34737: PUSH
34738: LD_INT 2
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 2
34747: NEG
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 3
34758: NEG
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 3
34770: NEG
34771: PUSH
34772: LD_INT 2
34774: NEG
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34805: LD_ADDR_VAR 0 28
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 1
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 1
34886: NEG
34887: PUSH
34888: LD_INT 2
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 2
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: LD_INT 1
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: NEG
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 2
34992: NEG
34993: PUSH
34994: LD_INT 1
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 2
35004: NEG
35005: PUSH
35006: LD_INT 2
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 2
35016: NEG
35017: PUSH
35018: LD_INT 3
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: LD_INT 3
35032: NEG
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 3
35040: NEG
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 3
35052: NEG
35053: PUSH
35054: LD_INT 2
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35087: LD_ADDR_VAR 0 29
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: LD_INT 2
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: LD_INT 2
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 1
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 2
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 1
35222: PUSH
35223: LD_INT 2
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: LD_INT 2
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: NEG
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 2
35253: NEG
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 2
35265: NEG
35266: PUSH
35267: LD_INT 2
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: LD_INT 3
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: LD_INT 1
35292: NEG
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 3
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: LD_INT 3
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 3
35331: NEG
35332: PUSH
35333: LD_INT 2
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35366: LD_ADDR_VAR 0 30
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: LD_INT 2
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: LD_INT 2
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 2
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: LD_INT 2
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: NEG
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 2
35532: NEG
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: LD_INT 3
35559: NEG
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: LD_INT 2
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 3
35578: PUSH
35579: LD_INT 2
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 2
35588: PUSH
35589: LD_INT 3
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 3
35609: NEG
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35644: LD_ADDR_VAR 0 31
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: LD_INT 2
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 2
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 2
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 2
35768: PUSH
35769: LD_INT 2
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 0
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 1
35798: NEG
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 2
35809: NEG
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 2
35821: NEG
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: NEG
35834: PUSH
35835: LD_INT 3
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 3
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 3
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 3
35887: NEG
35888: PUSH
35889: LD_INT 2
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35922: LD_ADDR_VAR 0 32
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 1
36003: NEG
36004: PUSH
36005: LD_INT 2
36007: NEG
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: LD_INT 2
36018: NEG
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: LD_INT 2
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: NEG
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: LD_INT 3
36115: NEG
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: LD_INT 2
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 3
36134: PUSH
36135: LD_INT 2
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: LD_INT 3
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: NEG
36155: PUSH
36156: LD_INT 1
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 3
36165: NEG
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36200: LD_ADDR_VAR 0 33
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: LD_INT 2
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: LD_INT 1
36296: NEG
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 2
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 2
36355: NEG
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 2
36366: NEG
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: NEG
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 2
36390: NEG
36391: PUSH
36392: LD_INT 3
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 3
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: LD_INT 3
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: NEG
36434: PUSH
36435: LD_INT 2
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 3
36444: NEG
36445: PUSH
36446: LD_INT 2
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36479: LD_ADDR_VAR 0 34
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 1
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: LD_INT 2
36564: NEG
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 2
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 2
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 2
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 2
36646: NEG
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 2
36658: NEG
36659: PUSH
36660: LD_INT 2
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: LD_INT 3
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: LD_INT 2
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 3
36693: PUSH
36694: LD_INT 2
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: LD_INT 3
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: LD_INT 1
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 3
36724: NEG
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36759: LD_ADDR_VAR 0 35
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 1
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: NEG
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 2
36850: NEG
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36871: LD_ADDR_VAR 0 36
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 1
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 1
36952: NEG
36953: PUSH
36954: LD_INT 2
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 1
36964: PUSH
36965: LD_INT 2
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36983: LD_ADDR_VAR 0 37
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: NEG
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37095: LD_ADDR_VAR 0 38
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: LD_INT 0
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 0
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 1
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37207: LD_ADDR_VAR 0 39
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: NEG
37277: PUSH
37278: LD_INT 1
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: LD_INT 2
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: LD_INT 2
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37319: LD_ADDR_VAR 0 40
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 0
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: NEG
37389: PUSH
37390: LD_INT 1
37392: NEG
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: LD_INT 1
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37431: LD_ADDR_VAR 0 41
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 1
37469: PUSH
37470: LD_INT 1
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: NEG
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: NEG
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: NEG
37513: PUSH
37514: LD_INT 2
37516: NEG
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: LD_INT 2
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: LD_INT 2
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: NEG
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 2
37597: NEG
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: LD_INT 2
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 2
37621: NEG
37622: PUSH
37623: LD_INT 3
37625: NEG
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 2
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 3
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 3
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 3
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: LD_INT 3
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 2
37684: PUSH
37685: LD_INT 3
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: NEG
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 3
37705: NEG
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 3
37716: NEG
37717: PUSH
37718: LD_INT 1
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 3
37728: NEG
37729: PUSH
37730: LD_INT 2
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 3
37740: NEG
37741: PUSH
37742: LD_INT 3
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37781: LD_ADDR_VAR 0 42
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: LD_INT 1
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 0
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: NEG
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 2
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 2
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 2
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 1
37916: PUSH
37917: LD_INT 2
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: LD_INT 2
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 1
37936: NEG
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: LD_INT 1
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 2
37971: NEG
37972: PUSH
37973: LD_INT 3
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 3
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: LD_INT 3
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: LD_INT 2
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 3
38017: PUSH
38018: LD_INT 2
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 3
38027: PUSH
38028: LD_INT 3
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: PUSH
38038: LD_INT 3
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: LD_INT 3
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: LD_INT 3
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 3
38078: NEG
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 3
38090: NEG
38091: PUSH
38092: LD_INT 3
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38131: LD_ADDR_VAR 0 43
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 2
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 1
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 0
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: LD_INT 1
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: NEG
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: NEG
38321: PUSH
38322: LD_INT 3
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 3
38335: NEG
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: LD_INT 2
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 3
38365: PUSH
38366: LD_INT 0
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 3
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: LD_INT 3
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: LD_INT 3
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 2
38416: NEG
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 3
38427: NEG
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 3
38438: NEG
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38479: LD_ADDR_VAR 0 44
38483: PUSH
38484: LD_INT 0
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 1
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: LD_INT 2
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 2
38634: NEG
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 2
38645: NEG
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 2
38657: NEG
38658: PUSH
38659: LD_INT 2
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: NEG
38670: PUSH
38671: LD_INT 3
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 2
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 3
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 3
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 3
38712: PUSH
38713: LD_INT 2
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 3
38722: PUSH
38723: LD_INT 3
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: LD_INT 3
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 3
38753: NEG
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 3
38764: NEG
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 3
38776: NEG
38777: PUSH
38778: LD_INT 2
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 3
38788: NEG
38789: PUSH
38790: LD_INT 3
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38829: LD_ADDR_VAR 0 45
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: LD_INT 1
38902: NEG
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: LD_INT 2
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 2
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 2
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 2
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 2
39007: NEG
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 2
39019: NEG
39020: PUSH
39021: LD_INT 3
39023: NEG
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: LD_INT 3
39035: NEG
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: LD_INT 3
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: LD_INT 2
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 3
39065: PUSH
39066: LD_INT 2
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: LD_INT 3
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 3
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 3
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: LD_INT 3
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: LD_INT 2
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 3
39126: NEG
39127: PUSH
39128: LD_INT 2
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 3
39138: NEG
39139: PUSH
39140: LD_INT 3
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39179: LD_ADDR_VAR 0 46
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: LD_INT 2
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: LD_INT 2
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 2
39345: NEG
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 2
39356: NEG
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 3
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: LD_INT 3
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: LD_INT 2
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 3
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: LD_INT 3
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: LD_INT 3
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: NEG
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 3
39475: NEG
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 3
39486: NEG
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39527: LD_ADDR_VAR 0 47
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: NEG
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39678: LD_ADDR_VAR 0 48
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 1
39698: NEG
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: LD_INT 2
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 2
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39825: LD_ADDR_VAR 0 49
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 2
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: LD_INT 2
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39969: LD_ADDR_VAR 0 50
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 2
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 2
40060: PUSH
40061: LD_INT 2
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: LD_INT 2
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: LD_INT 2
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40113: LD_ADDR_VAR 0 51
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 2
40225: NEG
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40260: LD_ADDR_VAR 0 52
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: NEG
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: LD_INT 2
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40411: LD_ADDR_VAR 0 53
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: NEG
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: NEG
40611: PUSH
40612: LD_INT 2
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40641: LD_ADDR_VAR 0 54
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: LD_INT 2
40726: NEG
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 2
40828: NEG
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 2
40840: NEG
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40871: LD_ADDR_VAR 0 55
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: LD_INT 2
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 2
41070: NEG
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41101: LD_ADDR_VAR 0 56
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 2
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: NEG
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: NEG
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41331: LD_ADDR_VAR 0 57
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 2
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: LD_INT 1
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 2
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: LD_INT 2
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 2
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: NEG
41531: PUSH
41532: LD_INT 2
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41561: LD_ADDR_VAR 0 58
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 2
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 2
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41791: LD_ADDR_VAR 0 59
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41879: LD_ADDR_VAR 0 60
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41967: LD_ADDR_VAR 0 61
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42055: LD_ADDR_VAR 0 62
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42143: LD_ADDR_VAR 0 63
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42231: LD_ADDR_VAR 0 64
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 1
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: ST_TO_ADDR
// end ; 1 :
42319: GO 48216
42321: LD_INT 1
42323: DOUBLE
42324: EQUAL
42325: IFTRUE 42329
42327: GO 44952
42329: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42330: LD_ADDR_VAR 0 11
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 3
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: LD_INT 3
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: LD_INT 2
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: LIST
42373: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42374: LD_ADDR_VAR 0 12
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 3
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 3
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42415: LD_ADDR_VAR 0 13
42419: PUSH
42420: LD_INT 3
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 3
42432: PUSH
42433: LD_INT 3
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: LD_INT 3
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42455: LD_ADDR_VAR 0 14
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: LD_INT 3
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 3
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: LIST
42495: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42496: LD_ADDR_VAR 0 15
42500: PUSH
42501: LD_INT 2
42503: NEG
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 3
42514: NEG
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 3
42525: NEG
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42540: LD_ADDR_VAR 0 16
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: LD_INT 3
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 3
42559: NEG
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 3
42571: NEG
42572: PUSH
42573: LD_INT 3
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: LIST
42585: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42586: LD_ADDR_VAR 0 17
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 3
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 3
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: LD_INT 2
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42630: LD_ADDR_VAR 0 18
42634: PUSH
42635: LD_INT 2
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 3
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 3
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: LIST
42670: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42671: LD_ADDR_VAR 0 19
42675: PUSH
42676: LD_INT 3
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 3
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: LD_INT 3
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: LIST
42710: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42711: LD_ADDR_VAR 0 20
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 3
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: LIST
42751: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42752: LD_ADDR_VAR 0 21
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 3
42770: NEG
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 3
42781: NEG
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: LIST
42795: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42796: LD_ADDR_VAR 0 22
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: LD_INT 3
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 3
42815: NEG
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 3
42827: NEG
42828: PUSH
42829: LD_INT 3
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42842: LD_ADDR_VAR 0 23
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 3
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: LD_INT 4
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: LD_INT 3
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42886: LD_ADDR_VAR 0 24
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 3
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 4
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: LIST
42926: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42927: LD_ADDR_VAR 0 25
42931: PUSH
42932: LD_INT 3
42934: PUSH
42935: LD_INT 3
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 4
42944: PUSH
42945: LD_INT 3
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 3
42954: PUSH
42955: LD_INT 4
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42967: LD_ADDR_VAR 0 26
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 3
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 4
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: LD_INT 3
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43008: LD_ADDR_VAR 0 27
43012: PUSH
43013: LD_INT 3
43015: NEG
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 3
43026: NEG
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 4
43037: NEG
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43052: LD_ADDR_VAR 0 28
43056: PUSH
43057: LD_INT 3
43059: NEG
43060: PUSH
43061: LD_INT 3
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 3
43071: NEG
43072: PUSH
43073: LD_INT 4
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 4
43083: NEG
43084: PUSH
43085: LD_INT 3
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: LIST
43097: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43098: LD_ADDR_VAR 0 29
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 3
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 3
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 2
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: LD_INT 4
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 4
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: LD_INT 3
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 5
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 5
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 4
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 6
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 6
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 5
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43253: LD_ADDR_VAR 0 30
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 3
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 3
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 3
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 4
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 4
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 4
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 5
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 5
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 5
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 6
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 6
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43396: LD_ADDR_VAR 0 31
43400: PUSH
43401: LD_INT 3
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 3
43413: PUSH
43414: LD_INT 3
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 3
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 4
43433: PUSH
43434: LD_INT 3
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 4
43443: PUSH
43444: LD_INT 4
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 3
43453: PUSH
43454: LD_INT 4
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 5
43463: PUSH
43464: LD_INT 4
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 5
43473: PUSH
43474: LD_INT 5
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 4
43483: PUSH
43484: LD_INT 5
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 6
43493: PUSH
43494: LD_INT 5
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 6
43503: PUSH
43504: LD_INT 6
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 5
43513: PUSH
43514: LD_INT 6
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43535: LD_ADDR_VAR 0 32
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 3
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 3
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: LD_INT 4
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 4
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: LD_INT 3
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: LD_INT 5
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 5
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 4
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: LD_INT 6
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 6
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: LD_INT 5
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43678: LD_ADDR_VAR 0 33
43682: PUSH
43683: LD_INT 2
43685: NEG
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 3
43696: NEG
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 3
43707: NEG
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 3
43719: NEG
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 4
43730: NEG
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 4
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 4
43753: NEG
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 5
43764: NEG
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 5
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 5
43787: NEG
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 6
43798: NEG
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 6
43809: NEG
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43833: LD_ADDR_VAR 0 34
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: LD_INT 3
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 3
43852: NEG
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 3
43864: NEG
43865: PUSH
43866: LD_INT 3
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 3
43876: NEG
43877: PUSH
43878: LD_INT 4
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 4
43888: NEG
43889: PUSH
43890: LD_INT 3
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 4
43900: NEG
43901: PUSH
43902: LD_INT 4
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 4
43912: NEG
43913: PUSH
43914: LD_INT 5
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 5
43924: NEG
43925: PUSH
43926: LD_INT 4
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 5
43936: NEG
43937: PUSH
43938: LD_INT 5
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 5
43948: NEG
43949: PUSH
43950: LD_INT 6
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 6
43960: NEG
43961: PUSH
43962: LD_INT 5
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 6
43972: NEG
43973: PUSH
43974: LD_INT 6
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43996: LD_ADDR_VAR 0 41
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 3
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: LD_INT 2
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: LIST
44039: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44040: LD_ADDR_VAR 0 42
44044: PUSH
44045: LD_INT 2
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 3
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44081: LD_ADDR_VAR 0 43
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 3
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: LD_INT 3
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44121: LD_ADDR_VAR 0 44
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 2
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 3
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: LIST
44161: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44162: LD_ADDR_VAR 0 45
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 3
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44206: LD_ADDR_VAR 0 46
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: LD_INT 3
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 3
44237: NEG
44238: PUSH
44239: LD_INT 2
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: LIST
44251: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44252: LD_ADDR_VAR 0 47
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: LD_INT 3
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44285: LD_ADDR_VAR 0 48
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: LD_INT 2
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44316: LD_ADDR_VAR 0 49
44320: PUSH
44321: LD_INT 3
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 3
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44345: LD_ADDR_VAR 0 50
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: LD_INT 3
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 3
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44374: LD_ADDR_VAR 0 51
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 2
44392: NEG
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44405: LD_ADDR_VAR 0 52
44409: PUSH
44410: LD_INT 3
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 3
44424: NEG
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44438: LD_ADDR_VAR 0 53
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 3
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 3
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44482: LD_ADDR_VAR 0 54
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 3
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 3
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: LIST
44522: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44523: LD_ADDR_VAR 0 55
44527: PUSH
44528: LD_INT 3
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 3
44540: PUSH
44541: LD_INT 3
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: LD_INT 3
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: LIST
44562: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44563: LD_ADDR_VAR 0 56
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 3
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 3
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: LIST
44603: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44604: LD_ADDR_VAR 0 57
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 3
44622: NEG
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 3
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: LIST
44647: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44648: LD_ADDR_VAR 0 58
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: LD_INT 3
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 3
44679: NEG
44680: PUSH
44681: LD_INT 3
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44694: LD_ADDR_VAR 0 59
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: LIST
44737: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44738: LD_ADDR_VAR 0 60
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44779: LD_ADDR_VAR 0 61
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44819: LD_ADDR_VAR 0 62
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44860: LD_ADDR_VAR 0 63
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44904: LD_ADDR_VAR 0 64
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: NEG
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: ST_TO_ADDR
// end ; 2 :
44950: GO 48216
44952: LD_INT 2
44954: DOUBLE
44955: EQUAL
44956: IFTRUE 44960
44958: GO 48215
44960: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44961: LD_ADDR_VAR 0 29
44965: PUSH
44966: LD_INT 4
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 4
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 5
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 5
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 4
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 3
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 3
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 3
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 5
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 3
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 3
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 4
45081: PUSH
45082: LD_INT 3
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 4
45091: PUSH
45092: LD_INT 4
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 3
45101: PUSH
45102: LD_INT 4
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: LD_INT 3
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 4
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 4
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 4
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 3
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 4
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 5
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 5
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 4
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 3
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 5
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: LD_INT 3
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 3
45244: NEG
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 3
45255: NEG
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 3
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 4
45300: NEG
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 4
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 4
45323: NEG
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 4
45346: NEG
45347: PUSH
45348: LD_INT 4
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 4
45358: NEG
45359: PUSH
45360: LD_INT 5
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 3
45370: NEG
45371: PUSH
45372: LD_INT 4
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 3
45382: NEG
45383: PUSH
45384: LD_INT 3
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 4
45394: NEG
45395: PUSH
45396: LD_INT 3
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 5
45406: NEG
45407: PUSH
45408: LD_INT 4
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 5
45418: NEG
45419: PUSH
45420: LD_INT 5
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 3
45430: NEG
45431: PUSH
45432: LD_INT 5
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 5
45442: NEG
45443: PUSH
45444: LD_INT 3
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45499: LD_ADDR_VAR 0 30
45503: PUSH
45504: LD_INT 4
45506: PUSH
45507: LD_INT 4
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 4
45516: PUSH
45517: LD_INT 3
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 5
45526: PUSH
45527: LD_INT 4
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 5
45536: PUSH
45537: LD_INT 5
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 4
45546: PUSH
45547: LD_INT 5
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 3
45556: PUSH
45557: LD_INT 4
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 3
45566: PUSH
45567: LD_INT 3
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 5
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: LD_INT 5
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 3
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 3
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: LD_INT 4
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 4
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: LD_INT 3
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: LD_INT 4
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 4
45689: NEG
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 4
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 3
45712: NEG
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 3
45723: NEG
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 4
45734: NEG
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 5
45745: NEG
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 5
45756: NEG
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 5
45768: NEG
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 3
45780: NEG
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 3
45791: NEG
45792: PUSH
45793: LD_INT 3
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 3
45803: NEG
45804: PUSH
45805: LD_INT 4
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: LD_INT 3
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 3
45839: NEG
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 4
45851: NEG
45852: PUSH
45853: LD_INT 3
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 4
45863: NEG
45864: PUSH
45865: LD_INT 4
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: LD_INT 4
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 4
45887: NEG
45888: PUSH
45889: LD_INT 2
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_INT 4
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 5
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 4
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 3
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 3
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 4
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 5
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: LD_INT 3
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: LD_INT 5
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46046: LD_ADDR_VAR 0 31
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 4
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: LD_INT 3
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 4
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 5
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: LD_INT 5
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 4
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 3
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 5
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: LD_INT 3
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 3
46146: NEG
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 3
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 3
46191: NEG
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 4
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 4
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 4
46225: NEG
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 4
46248: NEG
46249: PUSH
46250: LD_INT 4
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 4
46260: NEG
46261: PUSH
46262: LD_INT 5
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 3
46272: NEG
46273: PUSH
46274: LD_INT 4
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 3
46284: NEG
46285: PUSH
46286: LD_INT 3
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 4
46296: NEG
46297: PUSH
46298: LD_INT 3
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 5
46308: NEG
46309: PUSH
46310: LD_INT 4
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 5
46320: NEG
46321: PUSH
46322: LD_INT 5
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 3
46332: NEG
46333: PUSH
46334: LD_INT 5
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 5
46344: NEG
46345: PUSH
46346: LD_INT 3
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 4
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: LD_INT 3
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 3
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 4
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: LD_INT 4
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 4
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 4
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 5
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 5
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 4
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 3
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 3
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 3
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 5
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46596: LD_ADDR_VAR 0 32
46600: PUSH
46601: LD_INT 4
46603: NEG
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 4
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 3
46626: NEG
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 3
46637: NEG
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 4
46648: NEG
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 5
46659: NEG
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 5
46670: NEG
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 5
46682: NEG
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 3
46694: NEG
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 3
46705: NEG
46706: PUSH
46707: LD_INT 3
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 3
46717: NEG
46718: PUSH
46719: LD_INT 4
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: LD_INT 3
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: NEG
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 3
46753: NEG
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 4
46765: NEG
46766: PUSH
46767: LD_INT 3
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 4
46777: NEG
46778: PUSH
46779: LD_INT 4
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 2
46789: NEG
46790: PUSH
46791: LD_INT 4
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 4
46801: NEG
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 4
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 5
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: LD_INT 4
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: LD_INT 3
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 3
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 4
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 5
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: LD_INT 3
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: LD_INT 5
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 3
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 3
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 4
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 4
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 2
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 4
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 4
47008: PUSH
47009: LD_INT 4
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 4
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 5
47028: PUSH
47029: LD_INT 4
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 5
47038: PUSH
47039: LD_INT 5
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 4
47048: PUSH
47049: LD_INT 5
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: LD_INT 4
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 3
47068: PUSH
47069: LD_INT 3
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 5
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 3
47088: PUSH
47089: LD_INT 5
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47143: LD_ADDR_VAR 0 33
47147: PUSH
47148: LD_INT 4
47150: NEG
47151: PUSH
47152: LD_INT 4
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 4
47162: NEG
47163: PUSH
47164: LD_INT 5
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 3
47174: NEG
47175: PUSH
47176: LD_INT 4
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 3
47186: NEG
47187: PUSH
47188: LD_INT 3
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 4
47198: NEG
47199: PUSH
47200: LD_INT 3
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 5
47210: NEG
47211: PUSH
47212: LD_INT 4
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 5
47222: NEG
47223: PUSH
47224: LD_INT 5
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 3
47234: NEG
47235: PUSH
47236: LD_INT 5
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 5
47246: NEG
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 3
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 4
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 3
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 3
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 4
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: LD_INT 4
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 4
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 4
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 5
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 5
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 4
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 3
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 3
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 5
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 3
47453: PUSH
47454: LD_INT 3
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 4
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 4
47483: PUSH
47484: LD_INT 4
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 3
47493: PUSH
47494: LD_INT 4
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 3
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 4
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 4
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 4
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 3
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 4
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 5
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 5
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: LD_INT 4
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: LD_INT 3
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: LD_INT 5
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47681: LD_ADDR_VAR 0 34
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 4
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: LD_INT 5
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 4
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 3
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 3
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: LD_INT 4
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: LD_INT 5
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 3
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 2
47778: NEG
47779: PUSH
47780: LD_INT 5
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 3
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 3
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 4
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 4
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 4
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 4
47883: PUSH
47884: LD_INT 4
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 4
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 5
47903: PUSH
47904: LD_INT 4
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 5
47913: PUSH
47914: LD_INT 5
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 4
47923: PUSH
47924: LD_INT 5
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: LD_INT 4
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 5
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: LD_INT 5
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: LD_INT 3
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 3
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 4
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 4
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 3
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: LD_INT 4
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 4
48066: NEG
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 4
48077: NEG
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 4
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 5
48122: NEG
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 5
48133: NEG
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 5
48145: NEG
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 3
48157: NEG
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: ST_TO_ADDR
// end ; end ;
48213: GO 48216
48215: POP
// case btype of b_depot , b_warehouse :
48216: LD_VAR 0 1
48220: PUSH
48221: LD_INT 0
48223: DOUBLE
48224: EQUAL
48225: IFTRUE 48235
48227: LD_INT 1
48229: DOUBLE
48230: EQUAL
48231: IFTRUE 48235
48233: GO 48436
48235: POP
// case nation of nation_american :
48236: LD_VAR 0 5
48240: PUSH
48241: LD_INT 1
48243: DOUBLE
48244: EQUAL
48245: IFTRUE 48249
48247: GO 48305
48249: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48250: LD_ADDR_VAR 0 9
48254: PUSH
48255: LD_VAR 0 11
48259: PUSH
48260: LD_VAR 0 12
48264: PUSH
48265: LD_VAR 0 13
48269: PUSH
48270: LD_VAR 0 14
48274: PUSH
48275: LD_VAR 0 15
48279: PUSH
48280: LD_VAR 0 16
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: PUSH
48293: LD_VAR 0 4
48297: PUSH
48298: LD_INT 1
48300: PLUS
48301: ARRAY
48302: ST_TO_ADDR
48303: GO 48434
48305: LD_INT 2
48307: DOUBLE
48308: EQUAL
48309: IFTRUE 48313
48311: GO 48369
48313: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48314: LD_ADDR_VAR 0 9
48318: PUSH
48319: LD_VAR 0 17
48323: PUSH
48324: LD_VAR 0 18
48328: PUSH
48329: LD_VAR 0 19
48333: PUSH
48334: LD_VAR 0 20
48338: PUSH
48339: LD_VAR 0 21
48343: PUSH
48344: LD_VAR 0 22
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: PUSH
48357: LD_VAR 0 4
48361: PUSH
48362: LD_INT 1
48364: PLUS
48365: ARRAY
48366: ST_TO_ADDR
48367: GO 48434
48369: LD_INT 3
48371: DOUBLE
48372: EQUAL
48373: IFTRUE 48377
48375: GO 48433
48377: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48378: LD_ADDR_VAR 0 9
48382: PUSH
48383: LD_VAR 0 23
48387: PUSH
48388: LD_VAR 0 24
48392: PUSH
48393: LD_VAR 0 25
48397: PUSH
48398: LD_VAR 0 26
48402: PUSH
48403: LD_VAR 0 27
48407: PUSH
48408: LD_VAR 0 28
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: PUSH
48421: LD_VAR 0 4
48425: PUSH
48426: LD_INT 1
48428: PLUS
48429: ARRAY
48430: ST_TO_ADDR
48431: GO 48434
48433: POP
48434: GO 48989
48436: LD_INT 2
48438: DOUBLE
48439: EQUAL
48440: IFTRUE 48450
48442: LD_INT 3
48444: DOUBLE
48445: EQUAL
48446: IFTRUE 48450
48448: GO 48506
48450: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48451: LD_ADDR_VAR 0 9
48455: PUSH
48456: LD_VAR 0 29
48460: PUSH
48461: LD_VAR 0 30
48465: PUSH
48466: LD_VAR 0 31
48470: PUSH
48471: LD_VAR 0 32
48475: PUSH
48476: LD_VAR 0 33
48480: PUSH
48481: LD_VAR 0 34
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: PUSH
48494: LD_VAR 0 4
48498: PUSH
48499: LD_INT 1
48501: PLUS
48502: ARRAY
48503: ST_TO_ADDR
48504: GO 48989
48506: LD_INT 16
48508: DOUBLE
48509: EQUAL
48510: IFTRUE 48568
48512: LD_INT 17
48514: DOUBLE
48515: EQUAL
48516: IFTRUE 48568
48518: LD_INT 18
48520: DOUBLE
48521: EQUAL
48522: IFTRUE 48568
48524: LD_INT 19
48526: DOUBLE
48527: EQUAL
48528: IFTRUE 48568
48530: LD_INT 22
48532: DOUBLE
48533: EQUAL
48534: IFTRUE 48568
48536: LD_INT 20
48538: DOUBLE
48539: EQUAL
48540: IFTRUE 48568
48542: LD_INT 21
48544: DOUBLE
48545: EQUAL
48546: IFTRUE 48568
48548: LD_INT 23
48550: DOUBLE
48551: EQUAL
48552: IFTRUE 48568
48554: LD_INT 24
48556: DOUBLE
48557: EQUAL
48558: IFTRUE 48568
48560: LD_INT 25
48562: DOUBLE
48563: EQUAL
48564: IFTRUE 48568
48566: GO 48624
48568: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48569: LD_ADDR_VAR 0 9
48573: PUSH
48574: LD_VAR 0 35
48578: PUSH
48579: LD_VAR 0 36
48583: PUSH
48584: LD_VAR 0 37
48588: PUSH
48589: LD_VAR 0 38
48593: PUSH
48594: LD_VAR 0 39
48598: PUSH
48599: LD_VAR 0 40
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: PUSH
48612: LD_VAR 0 4
48616: PUSH
48617: LD_INT 1
48619: PLUS
48620: ARRAY
48621: ST_TO_ADDR
48622: GO 48989
48624: LD_INT 6
48626: DOUBLE
48627: EQUAL
48628: IFTRUE 48680
48630: LD_INT 7
48632: DOUBLE
48633: EQUAL
48634: IFTRUE 48680
48636: LD_INT 8
48638: DOUBLE
48639: EQUAL
48640: IFTRUE 48680
48642: LD_INT 13
48644: DOUBLE
48645: EQUAL
48646: IFTRUE 48680
48648: LD_INT 12
48650: DOUBLE
48651: EQUAL
48652: IFTRUE 48680
48654: LD_INT 15
48656: DOUBLE
48657: EQUAL
48658: IFTRUE 48680
48660: LD_INT 11
48662: DOUBLE
48663: EQUAL
48664: IFTRUE 48680
48666: LD_INT 14
48668: DOUBLE
48669: EQUAL
48670: IFTRUE 48680
48672: LD_INT 10
48674: DOUBLE
48675: EQUAL
48676: IFTRUE 48680
48678: GO 48736
48680: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48681: LD_ADDR_VAR 0 9
48685: PUSH
48686: LD_VAR 0 41
48690: PUSH
48691: LD_VAR 0 42
48695: PUSH
48696: LD_VAR 0 43
48700: PUSH
48701: LD_VAR 0 44
48705: PUSH
48706: LD_VAR 0 45
48710: PUSH
48711: LD_VAR 0 46
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: PUSH
48724: LD_VAR 0 4
48728: PUSH
48729: LD_INT 1
48731: PLUS
48732: ARRAY
48733: ST_TO_ADDR
48734: GO 48989
48736: LD_INT 36
48738: DOUBLE
48739: EQUAL
48740: IFTRUE 48744
48742: GO 48800
48744: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48745: LD_ADDR_VAR 0 9
48749: PUSH
48750: LD_VAR 0 47
48754: PUSH
48755: LD_VAR 0 48
48759: PUSH
48760: LD_VAR 0 49
48764: PUSH
48765: LD_VAR 0 50
48769: PUSH
48770: LD_VAR 0 51
48774: PUSH
48775: LD_VAR 0 52
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: PUSH
48788: LD_VAR 0 4
48792: PUSH
48793: LD_INT 1
48795: PLUS
48796: ARRAY
48797: ST_TO_ADDR
48798: GO 48989
48800: LD_INT 4
48802: DOUBLE
48803: EQUAL
48804: IFTRUE 48826
48806: LD_INT 5
48808: DOUBLE
48809: EQUAL
48810: IFTRUE 48826
48812: LD_INT 34
48814: DOUBLE
48815: EQUAL
48816: IFTRUE 48826
48818: LD_INT 37
48820: DOUBLE
48821: EQUAL
48822: IFTRUE 48826
48824: GO 48882
48826: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48827: LD_ADDR_VAR 0 9
48831: PUSH
48832: LD_VAR 0 53
48836: PUSH
48837: LD_VAR 0 54
48841: PUSH
48842: LD_VAR 0 55
48846: PUSH
48847: LD_VAR 0 56
48851: PUSH
48852: LD_VAR 0 57
48856: PUSH
48857: LD_VAR 0 58
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: PUSH
48870: LD_VAR 0 4
48874: PUSH
48875: LD_INT 1
48877: PLUS
48878: ARRAY
48879: ST_TO_ADDR
48880: GO 48989
48882: LD_INT 31
48884: DOUBLE
48885: EQUAL
48886: IFTRUE 48932
48888: LD_INT 32
48890: DOUBLE
48891: EQUAL
48892: IFTRUE 48932
48894: LD_INT 33
48896: DOUBLE
48897: EQUAL
48898: IFTRUE 48932
48900: LD_INT 27
48902: DOUBLE
48903: EQUAL
48904: IFTRUE 48932
48906: LD_INT 26
48908: DOUBLE
48909: EQUAL
48910: IFTRUE 48932
48912: LD_INT 28
48914: DOUBLE
48915: EQUAL
48916: IFTRUE 48932
48918: LD_INT 29
48920: DOUBLE
48921: EQUAL
48922: IFTRUE 48932
48924: LD_INT 30
48926: DOUBLE
48927: EQUAL
48928: IFTRUE 48932
48930: GO 48988
48932: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48933: LD_ADDR_VAR 0 9
48937: PUSH
48938: LD_VAR 0 59
48942: PUSH
48943: LD_VAR 0 60
48947: PUSH
48948: LD_VAR 0 61
48952: PUSH
48953: LD_VAR 0 62
48957: PUSH
48958: LD_VAR 0 63
48962: PUSH
48963: LD_VAR 0 64
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: PUSH
48976: LD_VAR 0 4
48980: PUSH
48981: LD_INT 1
48983: PLUS
48984: ARRAY
48985: ST_TO_ADDR
48986: GO 48989
48988: POP
// temp_list2 = [ ] ;
48989: LD_ADDR_VAR 0 10
48993: PUSH
48994: EMPTY
48995: ST_TO_ADDR
// for i in temp_list do
48996: LD_ADDR_VAR 0 8
49000: PUSH
49001: LD_VAR 0 9
49005: PUSH
49006: FOR_IN
49007: IFFALSE 49059
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49009: LD_ADDR_VAR 0 10
49013: PUSH
49014: LD_VAR 0 10
49018: PUSH
49019: LD_VAR 0 8
49023: PUSH
49024: LD_INT 1
49026: ARRAY
49027: PUSH
49028: LD_VAR 0 2
49032: PLUS
49033: PUSH
49034: LD_VAR 0 8
49038: PUSH
49039: LD_INT 2
49041: ARRAY
49042: PUSH
49043: LD_VAR 0 3
49047: PLUS
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: EMPTY
49054: LIST
49055: ADD
49056: ST_TO_ADDR
49057: GO 49006
49059: POP
49060: POP
// result = temp_list2 ;
49061: LD_ADDR_VAR 0 7
49065: PUSH
49066: LD_VAR 0 10
49070: ST_TO_ADDR
// end ;
49071: LD_VAR 0 7
49075: RET
// export function EnemyInRange ( unit , dist ) ; begin
49076: LD_INT 0
49078: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49079: LD_ADDR_VAR 0 3
49083: PUSH
49084: LD_VAR 0 1
49088: PPUSH
49089: CALL_OW 255
49093: PPUSH
49094: LD_VAR 0 1
49098: PPUSH
49099: CALL_OW 250
49103: PPUSH
49104: LD_VAR 0 1
49108: PPUSH
49109: CALL_OW 251
49113: PPUSH
49114: LD_VAR 0 2
49118: PPUSH
49119: CALL 22478 0 4
49123: PUSH
49124: LD_INT 4
49126: ARRAY
49127: ST_TO_ADDR
// end ;
49128: LD_VAR 0 3
49132: RET
// export function PlayerSeeMe ( unit ) ; begin
49133: LD_INT 0
49135: PPUSH
// result := See ( your_side , unit ) ;
49136: LD_ADDR_VAR 0 2
49140: PUSH
49141: LD_OWVAR 2
49145: PPUSH
49146: LD_VAR 0 1
49150: PPUSH
49151: CALL_OW 292
49155: ST_TO_ADDR
// end ;
49156: LD_VAR 0 2
49160: RET
// export function ReverseDir ( unit ) ; begin
49161: LD_INT 0
49163: PPUSH
// if not unit then
49164: LD_VAR 0 1
49168: NOT
49169: IFFALSE 49173
// exit ;
49171: GO 49196
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49173: LD_ADDR_VAR 0 2
49177: PUSH
49178: LD_VAR 0 1
49182: PPUSH
49183: CALL_OW 254
49187: PUSH
49188: LD_INT 3
49190: PLUS
49191: PUSH
49192: LD_INT 6
49194: MOD
49195: ST_TO_ADDR
// end ;
49196: LD_VAR 0 2
49200: RET
// export function ReverseArray ( array ) ; var i ; begin
49201: LD_INT 0
49203: PPUSH
49204: PPUSH
// if not array then
49205: LD_VAR 0 1
49209: NOT
49210: IFFALSE 49214
// exit ;
49212: GO 49269
// result := [ ] ;
49214: LD_ADDR_VAR 0 2
49218: PUSH
49219: EMPTY
49220: ST_TO_ADDR
// for i := array downto 1 do
49221: LD_ADDR_VAR 0 3
49225: PUSH
49226: DOUBLE
49227: LD_VAR 0 1
49231: INC
49232: ST_TO_ADDR
49233: LD_INT 1
49235: PUSH
49236: FOR_DOWNTO
49237: IFFALSE 49267
// result := Join ( result , array [ i ] ) ;
49239: LD_ADDR_VAR 0 2
49243: PUSH
49244: LD_VAR 0 2
49248: PPUSH
49249: LD_VAR 0 1
49253: PUSH
49254: LD_VAR 0 3
49258: ARRAY
49259: PPUSH
49260: CALL 53894 0 2
49264: ST_TO_ADDR
49265: GO 49236
49267: POP
49268: POP
// end ;
49269: LD_VAR 0 2
49273: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49274: LD_INT 0
49276: PPUSH
49277: PPUSH
49278: PPUSH
49279: PPUSH
49280: PPUSH
49281: PPUSH
// if not unit or not hexes then
49282: LD_VAR 0 1
49286: NOT
49287: PUSH
49288: LD_VAR 0 2
49292: NOT
49293: OR
49294: IFFALSE 49298
// exit ;
49296: GO 49421
// dist := 9999 ;
49298: LD_ADDR_VAR 0 5
49302: PUSH
49303: LD_INT 9999
49305: ST_TO_ADDR
// for i = 1 to hexes do
49306: LD_ADDR_VAR 0 4
49310: PUSH
49311: DOUBLE
49312: LD_INT 1
49314: DEC
49315: ST_TO_ADDR
49316: LD_VAR 0 2
49320: PUSH
49321: FOR_TO
49322: IFFALSE 49409
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49324: LD_ADDR_VAR 0 6
49328: PUSH
49329: LD_VAR 0 1
49333: PPUSH
49334: LD_VAR 0 2
49338: PUSH
49339: LD_VAR 0 4
49343: ARRAY
49344: PUSH
49345: LD_INT 1
49347: ARRAY
49348: PPUSH
49349: LD_VAR 0 2
49353: PUSH
49354: LD_VAR 0 4
49358: ARRAY
49359: PUSH
49360: LD_INT 2
49362: ARRAY
49363: PPUSH
49364: CALL_OW 297
49368: ST_TO_ADDR
// if tdist < dist then
49369: LD_VAR 0 6
49373: PUSH
49374: LD_VAR 0 5
49378: LESS
49379: IFFALSE 49407
// begin hex := hexes [ i ] ;
49381: LD_ADDR_VAR 0 8
49385: PUSH
49386: LD_VAR 0 2
49390: PUSH
49391: LD_VAR 0 4
49395: ARRAY
49396: ST_TO_ADDR
// dist := tdist ;
49397: LD_ADDR_VAR 0 5
49401: PUSH
49402: LD_VAR 0 6
49406: ST_TO_ADDR
// end ; end ;
49407: GO 49321
49409: POP
49410: POP
// result := hex ;
49411: LD_ADDR_VAR 0 3
49415: PUSH
49416: LD_VAR 0 8
49420: ST_TO_ADDR
// end ;
49421: LD_VAR 0 3
49425: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49426: LD_INT 0
49428: PPUSH
49429: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49430: LD_VAR 0 1
49434: NOT
49435: PUSH
49436: LD_VAR 0 1
49440: PUSH
49441: LD_INT 21
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 23
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PPUSH
49465: CALL_OW 69
49469: IN
49470: NOT
49471: OR
49472: IFFALSE 49476
// exit ;
49474: GO 49523
// for i = 1 to 3 do
49476: LD_ADDR_VAR 0 3
49480: PUSH
49481: DOUBLE
49482: LD_INT 1
49484: DEC
49485: ST_TO_ADDR
49486: LD_INT 3
49488: PUSH
49489: FOR_TO
49490: IFFALSE 49521
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49492: LD_VAR 0 1
49496: PPUSH
49497: CALL_OW 250
49501: PPUSH
49502: LD_VAR 0 1
49506: PPUSH
49507: CALL_OW 251
49511: PPUSH
49512: LD_INT 1
49514: PPUSH
49515: CALL_OW 453
49519: GO 49489
49521: POP
49522: POP
// end ;
49523: LD_VAR 0 2
49527: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49528: LD_INT 0
49530: PPUSH
49531: PPUSH
49532: PPUSH
49533: PPUSH
49534: PPUSH
49535: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49536: LD_VAR 0 1
49540: NOT
49541: PUSH
49542: LD_VAR 0 2
49546: NOT
49547: OR
49548: PUSH
49549: LD_VAR 0 1
49553: PPUSH
49554: CALL_OW 314
49558: OR
49559: IFFALSE 49563
// exit ;
49561: GO 50004
// x := GetX ( enemy_unit ) ;
49563: LD_ADDR_VAR 0 7
49567: PUSH
49568: LD_VAR 0 2
49572: PPUSH
49573: CALL_OW 250
49577: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49578: LD_ADDR_VAR 0 8
49582: PUSH
49583: LD_VAR 0 2
49587: PPUSH
49588: CALL_OW 251
49592: ST_TO_ADDR
// if not x or not y then
49593: LD_VAR 0 7
49597: NOT
49598: PUSH
49599: LD_VAR 0 8
49603: NOT
49604: OR
49605: IFFALSE 49609
// exit ;
49607: GO 50004
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49609: LD_ADDR_VAR 0 6
49613: PUSH
49614: LD_VAR 0 7
49618: PPUSH
49619: LD_INT 0
49621: PPUSH
49622: LD_INT 4
49624: PPUSH
49625: CALL_OW 272
49629: PUSH
49630: LD_VAR 0 8
49634: PPUSH
49635: LD_INT 0
49637: PPUSH
49638: LD_INT 4
49640: PPUSH
49641: CALL_OW 273
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_VAR 0 7
49654: PPUSH
49655: LD_INT 1
49657: PPUSH
49658: LD_INT 4
49660: PPUSH
49661: CALL_OW 272
49665: PUSH
49666: LD_VAR 0 8
49670: PPUSH
49671: LD_INT 1
49673: PPUSH
49674: LD_INT 4
49676: PPUSH
49677: CALL_OW 273
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_VAR 0 7
49690: PPUSH
49691: LD_INT 2
49693: PPUSH
49694: LD_INT 4
49696: PPUSH
49697: CALL_OW 272
49701: PUSH
49702: LD_VAR 0 8
49706: PPUSH
49707: LD_INT 2
49709: PPUSH
49710: LD_INT 4
49712: PPUSH
49713: CALL_OW 273
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_VAR 0 7
49726: PPUSH
49727: LD_INT 3
49729: PPUSH
49730: LD_INT 4
49732: PPUSH
49733: CALL_OW 272
49737: PUSH
49738: LD_VAR 0 8
49742: PPUSH
49743: LD_INT 3
49745: PPUSH
49746: LD_INT 4
49748: PPUSH
49749: CALL_OW 273
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_VAR 0 7
49762: PPUSH
49763: LD_INT 4
49765: PPUSH
49766: LD_INT 4
49768: PPUSH
49769: CALL_OW 272
49773: PUSH
49774: LD_VAR 0 8
49778: PPUSH
49779: LD_INT 4
49781: PPUSH
49782: LD_INT 4
49784: PPUSH
49785: CALL_OW 273
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_VAR 0 7
49798: PPUSH
49799: LD_INT 5
49801: PPUSH
49802: LD_INT 4
49804: PPUSH
49805: CALL_OW 272
49809: PUSH
49810: LD_VAR 0 8
49814: PPUSH
49815: LD_INT 5
49817: PPUSH
49818: LD_INT 4
49820: PPUSH
49821: CALL_OW 273
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: ST_TO_ADDR
// for i = tmp downto 1 do
49838: LD_ADDR_VAR 0 4
49842: PUSH
49843: DOUBLE
49844: LD_VAR 0 6
49848: INC
49849: ST_TO_ADDR
49850: LD_INT 1
49852: PUSH
49853: FOR_DOWNTO
49854: IFFALSE 49955
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49856: LD_VAR 0 6
49860: PUSH
49861: LD_VAR 0 4
49865: ARRAY
49866: PUSH
49867: LD_INT 1
49869: ARRAY
49870: PPUSH
49871: LD_VAR 0 6
49875: PUSH
49876: LD_VAR 0 4
49880: ARRAY
49881: PUSH
49882: LD_INT 2
49884: ARRAY
49885: PPUSH
49886: CALL_OW 488
49890: NOT
49891: PUSH
49892: LD_VAR 0 6
49896: PUSH
49897: LD_VAR 0 4
49901: ARRAY
49902: PUSH
49903: LD_INT 1
49905: ARRAY
49906: PPUSH
49907: LD_VAR 0 6
49911: PUSH
49912: LD_VAR 0 4
49916: ARRAY
49917: PUSH
49918: LD_INT 2
49920: ARRAY
49921: PPUSH
49922: CALL_OW 428
49926: PUSH
49927: LD_INT 0
49929: NONEQUAL
49930: OR
49931: IFFALSE 49953
// tmp := Delete ( tmp , i ) ;
49933: LD_ADDR_VAR 0 6
49937: PUSH
49938: LD_VAR 0 6
49942: PPUSH
49943: LD_VAR 0 4
49947: PPUSH
49948: CALL_OW 3
49952: ST_TO_ADDR
49953: GO 49853
49955: POP
49956: POP
// j := GetClosestHex ( unit , tmp ) ;
49957: LD_ADDR_VAR 0 5
49961: PUSH
49962: LD_VAR 0 1
49966: PPUSH
49967: LD_VAR 0 6
49971: PPUSH
49972: CALL 49274 0 2
49976: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49977: LD_VAR 0 1
49981: PPUSH
49982: LD_VAR 0 5
49986: PUSH
49987: LD_INT 1
49989: ARRAY
49990: PPUSH
49991: LD_VAR 0 5
49995: PUSH
49996: LD_INT 2
49998: ARRAY
49999: PPUSH
50000: CALL_OW 111
// end ;
50004: LD_VAR 0 3
50008: RET
// export function PrepareApemanSoldier ( ) ; begin
50009: LD_INT 0
50011: PPUSH
// uc_nation := 0 ;
50012: LD_ADDR_OWVAR 21
50016: PUSH
50017: LD_INT 0
50019: ST_TO_ADDR
// hc_sex := sex_male ;
50020: LD_ADDR_OWVAR 27
50024: PUSH
50025: LD_INT 1
50027: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50028: LD_ADDR_OWVAR 28
50032: PUSH
50033: LD_INT 15
50035: ST_TO_ADDR
// hc_gallery :=  ;
50036: LD_ADDR_OWVAR 33
50040: PUSH
50041: LD_STRING 
50043: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50044: LD_ADDR_OWVAR 31
50048: PUSH
50049: LD_INT 0
50051: PPUSH
50052: LD_INT 3
50054: PPUSH
50055: CALL_OW 12
50059: PUSH
50060: LD_INT 0
50062: PPUSH
50063: LD_INT 3
50065: PPUSH
50066: CALL_OW 12
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: ST_TO_ADDR
// end ;
50083: LD_VAR 0 1
50087: RET
// export function PrepareApemanEngineer ( ) ; begin
50088: LD_INT 0
50090: PPUSH
// uc_nation := 0 ;
50091: LD_ADDR_OWVAR 21
50095: PUSH
50096: LD_INT 0
50098: ST_TO_ADDR
// hc_sex := sex_male ;
50099: LD_ADDR_OWVAR 27
50103: PUSH
50104: LD_INT 1
50106: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50107: LD_ADDR_OWVAR 28
50111: PUSH
50112: LD_INT 16
50114: ST_TO_ADDR
// hc_gallery :=  ;
50115: LD_ADDR_OWVAR 33
50119: PUSH
50120: LD_STRING 
50122: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50123: LD_ADDR_OWVAR 31
50127: PUSH
50128: LD_INT 0
50130: PPUSH
50131: LD_INT 3
50133: PPUSH
50134: CALL_OW 12
50138: PUSH
50139: LD_INT 0
50141: PPUSH
50142: LD_INT 3
50144: PPUSH
50145: CALL_OW 12
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: ST_TO_ADDR
// end ;
50162: LD_VAR 0 1
50166: RET
// export function PrepareApeman ( agressivity ) ; begin
50167: LD_INT 0
50169: PPUSH
// uc_side := 0 ;
50170: LD_ADDR_OWVAR 20
50174: PUSH
50175: LD_INT 0
50177: ST_TO_ADDR
// uc_nation := 0 ;
50178: LD_ADDR_OWVAR 21
50182: PUSH
50183: LD_INT 0
50185: ST_TO_ADDR
// hc_sex := sex_male ;
50186: LD_ADDR_OWVAR 27
50190: PUSH
50191: LD_INT 1
50193: ST_TO_ADDR
// hc_class := class_apeman ;
50194: LD_ADDR_OWVAR 28
50198: PUSH
50199: LD_INT 12
50201: ST_TO_ADDR
// hc_gallery :=  ;
50202: LD_ADDR_OWVAR 33
50206: PUSH
50207: LD_STRING 
50209: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50210: LD_ADDR_OWVAR 35
50214: PUSH
50215: LD_VAR 0 1
50219: NEG
50220: PPUSH
50221: LD_VAR 0 1
50225: PPUSH
50226: CALL_OW 12
50230: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50231: LD_ADDR_OWVAR 31
50235: PUSH
50236: LD_INT 0
50238: PPUSH
50239: LD_INT 3
50241: PPUSH
50242: CALL_OW 12
50246: PUSH
50247: LD_INT 0
50249: PPUSH
50250: LD_INT 3
50252: PPUSH
50253: CALL_OW 12
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: ST_TO_ADDR
// end ;
50270: LD_VAR 0 2
50274: RET
// export function PrepareTiger ( agressivity ) ; begin
50275: LD_INT 0
50277: PPUSH
// uc_side := 0 ;
50278: LD_ADDR_OWVAR 20
50282: PUSH
50283: LD_INT 0
50285: ST_TO_ADDR
// uc_nation := 0 ;
50286: LD_ADDR_OWVAR 21
50290: PUSH
50291: LD_INT 0
50293: ST_TO_ADDR
// hc_class := class_tiger ;
50294: LD_ADDR_OWVAR 28
50298: PUSH
50299: LD_INT 14
50301: ST_TO_ADDR
// hc_gallery :=  ;
50302: LD_ADDR_OWVAR 33
50306: PUSH
50307: LD_STRING 
50309: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50310: LD_ADDR_OWVAR 35
50314: PUSH
50315: LD_VAR 0 1
50319: NEG
50320: PPUSH
50321: LD_VAR 0 1
50325: PPUSH
50326: CALL_OW 12
50330: ST_TO_ADDR
// end ;
50331: LD_VAR 0 2
50335: RET
// export function PrepareEnchidna ( ) ; begin
50336: LD_INT 0
50338: PPUSH
// uc_side := 0 ;
50339: LD_ADDR_OWVAR 20
50343: PUSH
50344: LD_INT 0
50346: ST_TO_ADDR
// uc_nation := 0 ;
50347: LD_ADDR_OWVAR 21
50351: PUSH
50352: LD_INT 0
50354: ST_TO_ADDR
// hc_class := class_baggie ;
50355: LD_ADDR_OWVAR 28
50359: PUSH
50360: LD_INT 13
50362: ST_TO_ADDR
// hc_gallery :=  ;
50363: LD_ADDR_OWVAR 33
50367: PUSH
50368: LD_STRING 
50370: ST_TO_ADDR
// end ;
50371: LD_VAR 0 1
50375: RET
// export function PrepareFrog ( ) ; begin
50376: LD_INT 0
50378: PPUSH
// uc_side := 0 ;
50379: LD_ADDR_OWVAR 20
50383: PUSH
50384: LD_INT 0
50386: ST_TO_ADDR
// uc_nation := 0 ;
50387: LD_ADDR_OWVAR 21
50391: PUSH
50392: LD_INT 0
50394: ST_TO_ADDR
// hc_class := class_frog ;
50395: LD_ADDR_OWVAR 28
50399: PUSH
50400: LD_INT 19
50402: ST_TO_ADDR
// hc_gallery :=  ;
50403: LD_ADDR_OWVAR 33
50407: PUSH
50408: LD_STRING 
50410: ST_TO_ADDR
// end ;
50411: LD_VAR 0 1
50415: RET
// export function PrepareFish ( ) ; begin
50416: LD_INT 0
50418: PPUSH
// uc_side := 0 ;
50419: LD_ADDR_OWVAR 20
50423: PUSH
50424: LD_INT 0
50426: ST_TO_ADDR
// uc_nation := 0 ;
50427: LD_ADDR_OWVAR 21
50431: PUSH
50432: LD_INT 0
50434: ST_TO_ADDR
// hc_class := class_fish ;
50435: LD_ADDR_OWVAR 28
50439: PUSH
50440: LD_INT 20
50442: ST_TO_ADDR
// hc_gallery :=  ;
50443: LD_ADDR_OWVAR 33
50447: PUSH
50448: LD_STRING 
50450: ST_TO_ADDR
// end ;
50451: LD_VAR 0 1
50455: RET
// export function PrepareBird ( ) ; begin
50456: LD_INT 0
50458: PPUSH
// uc_side := 0 ;
50459: LD_ADDR_OWVAR 20
50463: PUSH
50464: LD_INT 0
50466: ST_TO_ADDR
// uc_nation := 0 ;
50467: LD_ADDR_OWVAR 21
50471: PUSH
50472: LD_INT 0
50474: ST_TO_ADDR
// hc_class := class_phororhacos ;
50475: LD_ADDR_OWVAR 28
50479: PUSH
50480: LD_INT 18
50482: ST_TO_ADDR
// hc_gallery :=  ;
50483: LD_ADDR_OWVAR 33
50487: PUSH
50488: LD_STRING 
50490: ST_TO_ADDR
// end ;
50491: LD_VAR 0 1
50495: RET
// export function PrepareHorse ( ) ; begin
50496: LD_INT 0
50498: PPUSH
// uc_side := 0 ;
50499: LD_ADDR_OWVAR 20
50503: PUSH
50504: LD_INT 0
50506: ST_TO_ADDR
// uc_nation := 0 ;
50507: LD_ADDR_OWVAR 21
50511: PUSH
50512: LD_INT 0
50514: ST_TO_ADDR
// hc_class := class_horse ;
50515: LD_ADDR_OWVAR 28
50519: PUSH
50520: LD_INT 21
50522: ST_TO_ADDR
// hc_gallery :=  ;
50523: LD_ADDR_OWVAR 33
50527: PUSH
50528: LD_STRING 
50530: ST_TO_ADDR
// end ;
50531: LD_VAR 0 1
50535: RET
// export function PrepareMastodont ( ) ; begin
50536: LD_INT 0
50538: PPUSH
// uc_side := 0 ;
50539: LD_ADDR_OWVAR 20
50543: PUSH
50544: LD_INT 0
50546: ST_TO_ADDR
// uc_nation := 0 ;
50547: LD_ADDR_OWVAR 21
50551: PUSH
50552: LD_INT 0
50554: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50555: LD_ADDR_OWVAR 37
50559: PUSH
50560: LD_INT 31
50562: ST_TO_ADDR
// vc_control := control_rider ;
50563: LD_ADDR_OWVAR 38
50567: PUSH
50568: LD_INT 4
50570: ST_TO_ADDR
// end ;
50571: LD_VAR 0 1
50575: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50576: LD_INT 0
50578: PPUSH
50579: PPUSH
50580: PPUSH
// uc_side = 0 ;
50581: LD_ADDR_OWVAR 20
50585: PUSH
50586: LD_INT 0
50588: ST_TO_ADDR
// uc_nation = 0 ;
50589: LD_ADDR_OWVAR 21
50593: PUSH
50594: LD_INT 0
50596: ST_TO_ADDR
// InitHc_All ( ) ;
50597: CALL_OW 584
// InitVc ;
50601: CALL_OW 20
// if mastodonts then
50605: LD_VAR 0 6
50609: IFFALSE 50676
// for i = 1 to mastodonts do
50611: LD_ADDR_VAR 0 11
50615: PUSH
50616: DOUBLE
50617: LD_INT 1
50619: DEC
50620: ST_TO_ADDR
50621: LD_VAR 0 6
50625: PUSH
50626: FOR_TO
50627: IFFALSE 50674
// begin vc_chassis := 31 ;
50629: LD_ADDR_OWVAR 37
50633: PUSH
50634: LD_INT 31
50636: ST_TO_ADDR
// vc_control := control_rider ;
50637: LD_ADDR_OWVAR 38
50641: PUSH
50642: LD_INT 4
50644: ST_TO_ADDR
// animal := CreateVehicle ;
50645: LD_ADDR_VAR 0 12
50649: PUSH
50650: CALL_OW 45
50654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50655: LD_VAR 0 12
50659: PPUSH
50660: LD_VAR 0 8
50664: PPUSH
50665: LD_INT 0
50667: PPUSH
50668: CALL 52811 0 3
// end ;
50672: GO 50626
50674: POP
50675: POP
// if horses then
50676: LD_VAR 0 5
50680: IFFALSE 50747
// for i = 1 to horses do
50682: LD_ADDR_VAR 0 11
50686: PUSH
50687: DOUBLE
50688: LD_INT 1
50690: DEC
50691: ST_TO_ADDR
50692: LD_VAR 0 5
50696: PUSH
50697: FOR_TO
50698: IFFALSE 50745
// begin hc_class := 21 ;
50700: LD_ADDR_OWVAR 28
50704: PUSH
50705: LD_INT 21
50707: ST_TO_ADDR
// hc_gallery :=  ;
50708: LD_ADDR_OWVAR 33
50712: PUSH
50713: LD_STRING 
50715: ST_TO_ADDR
// animal := CreateHuman ;
50716: LD_ADDR_VAR 0 12
50720: PUSH
50721: CALL_OW 44
50725: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50726: LD_VAR 0 12
50730: PPUSH
50731: LD_VAR 0 8
50735: PPUSH
50736: LD_INT 0
50738: PPUSH
50739: CALL 52811 0 3
// end ;
50743: GO 50697
50745: POP
50746: POP
// if birds then
50747: LD_VAR 0 1
50751: IFFALSE 50818
// for i = 1 to birds do
50753: LD_ADDR_VAR 0 11
50757: PUSH
50758: DOUBLE
50759: LD_INT 1
50761: DEC
50762: ST_TO_ADDR
50763: LD_VAR 0 1
50767: PUSH
50768: FOR_TO
50769: IFFALSE 50816
// begin hc_class = 18 ;
50771: LD_ADDR_OWVAR 28
50775: PUSH
50776: LD_INT 18
50778: ST_TO_ADDR
// hc_gallery =  ;
50779: LD_ADDR_OWVAR 33
50783: PUSH
50784: LD_STRING 
50786: ST_TO_ADDR
// animal := CreateHuman ;
50787: LD_ADDR_VAR 0 12
50791: PUSH
50792: CALL_OW 44
50796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50797: LD_VAR 0 12
50801: PPUSH
50802: LD_VAR 0 8
50806: PPUSH
50807: LD_INT 0
50809: PPUSH
50810: CALL 52811 0 3
// end ;
50814: GO 50768
50816: POP
50817: POP
// if tigers then
50818: LD_VAR 0 2
50822: IFFALSE 50906
// for i = 1 to tigers do
50824: LD_ADDR_VAR 0 11
50828: PUSH
50829: DOUBLE
50830: LD_INT 1
50832: DEC
50833: ST_TO_ADDR
50834: LD_VAR 0 2
50838: PUSH
50839: FOR_TO
50840: IFFALSE 50904
// begin hc_class = class_tiger ;
50842: LD_ADDR_OWVAR 28
50846: PUSH
50847: LD_INT 14
50849: ST_TO_ADDR
// hc_gallery =  ;
50850: LD_ADDR_OWVAR 33
50854: PUSH
50855: LD_STRING 
50857: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50858: LD_ADDR_OWVAR 35
50862: PUSH
50863: LD_INT 7
50865: NEG
50866: PPUSH
50867: LD_INT 7
50869: PPUSH
50870: CALL_OW 12
50874: ST_TO_ADDR
// animal := CreateHuman ;
50875: LD_ADDR_VAR 0 12
50879: PUSH
50880: CALL_OW 44
50884: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50885: LD_VAR 0 12
50889: PPUSH
50890: LD_VAR 0 8
50894: PPUSH
50895: LD_INT 0
50897: PPUSH
50898: CALL 52811 0 3
// end ;
50902: GO 50839
50904: POP
50905: POP
// if apemans then
50906: LD_VAR 0 3
50910: IFFALSE 51033
// for i = 1 to apemans do
50912: LD_ADDR_VAR 0 11
50916: PUSH
50917: DOUBLE
50918: LD_INT 1
50920: DEC
50921: ST_TO_ADDR
50922: LD_VAR 0 3
50926: PUSH
50927: FOR_TO
50928: IFFALSE 51031
// begin hc_class = class_apeman ;
50930: LD_ADDR_OWVAR 28
50934: PUSH
50935: LD_INT 12
50937: ST_TO_ADDR
// hc_gallery =  ;
50938: LD_ADDR_OWVAR 33
50942: PUSH
50943: LD_STRING 
50945: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50946: LD_ADDR_OWVAR 35
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PPUSH
50955: LD_INT 2
50957: PPUSH
50958: CALL_OW 12
50962: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50963: LD_ADDR_OWVAR 31
50967: PUSH
50968: LD_INT 1
50970: PPUSH
50971: LD_INT 3
50973: PPUSH
50974: CALL_OW 12
50978: PUSH
50979: LD_INT 1
50981: PPUSH
50982: LD_INT 3
50984: PPUSH
50985: CALL_OW 12
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: ST_TO_ADDR
// animal := CreateHuman ;
51002: LD_ADDR_VAR 0 12
51006: PUSH
51007: CALL_OW 44
51011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51012: LD_VAR 0 12
51016: PPUSH
51017: LD_VAR 0 8
51021: PPUSH
51022: LD_INT 0
51024: PPUSH
51025: CALL 52811 0 3
// end ;
51029: GO 50927
51031: POP
51032: POP
// if enchidnas then
51033: LD_VAR 0 4
51037: IFFALSE 51104
// for i = 1 to enchidnas do
51039: LD_ADDR_VAR 0 11
51043: PUSH
51044: DOUBLE
51045: LD_INT 1
51047: DEC
51048: ST_TO_ADDR
51049: LD_VAR 0 4
51053: PUSH
51054: FOR_TO
51055: IFFALSE 51102
// begin hc_class = 13 ;
51057: LD_ADDR_OWVAR 28
51061: PUSH
51062: LD_INT 13
51064: ST_TO_ADDR
// hc_gallery =  ;
51065: LD_ADDR_OWVAR 33
51069: PUSH
51070: LD_STRING 
51072: ST_TO_ADDR
// animal := CreateHuman ;
51073: LD_ADDR_VAR 0 12
51077: PUSH
51078: CALL_OW 44
51082: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51083: LD_VAR 0 12
51087: PPUSH
51088: LD_VAR 0 8
51092: PPUSH
51093: LD_INT 0
51095: PPUSH
51096: CALL 52811 0 3
// end ;
51100: GO 51054
51102: POP
51103: POP
// if fishes then
51104: LD_VAR 0 7
51108: IFFALSE 51175
// for i = 1 to fishes do
51110: LD_ADDR_VAR 0 11
51114: PUSH
51115: DOUBLE
51116: LD_INT 1
51118: DEC
51119: ST_TO_ADDR
51120: LD_VAR 0 7
51124: PUSH
51125: FOR_TO
51126: IFFALSE 51173
// begin hc_class = 20 ;
51128: LD_ADDR_OWVAR 28
51132: PUSH
51133: LD_INT 20
51135: ST_TO_ADDR
// hc_gallery =  ;
51136: LD_ADDR_OWVAR 33
51140: PUSH
51141: LD_STRING 
51143: ST_TO_ADDR
// animal := CreateHuman ;
51144: LD_ADDR_VAR 0 12
51148: PUSH
51149: CALL_OW 44
51153: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51154: LD_VAR 0 12
51158: PPUSH
51159: LD_VAR 0 9
51163: PPUSH
51164: LD_INT 0
51166: PPUSH
51167: CALL 52811 0 3
// end ;
51171: GO 51125
51173: POP
51174: POP
// end ;
51175: LD_VAR 0 10
51179: RET
// export function WantHeal ( sci , unit ) ; begin
51180: LD_INT 0
51182: PPUSH
// if GetTaskList ( sci ) > 0 then
51183: LD_VAR 0 1
51187: PPUSH
51188: CALL_OW 437
51192: PUSH
51193: LD_INT 0
51195: GREATER
51196: IFFALSE 51266
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51198: LD_VAR 0 1
51202: PPUSH
51203: CALL_OW 437
51207: PUSH
51208: LD_INT 1
51210: ARRAY
51211: PUSH
51212: LD_INT 1
51214: ARRAY
51215: PUSH
51216: LD_STRING l
51218: EQUAL
51219: PUSH
51220: LD_VAR 0 1
51224: PPUSH
51225: CALL_OW 437
51229: PUSH
51230: LD_INT 1
51232: ARRAY
51233: PUSH
51234: LD_INT 4
51236: ARRAY
51237: PUSH
51238: LD_VAR 0 2
51242: EQUAL
51243: AND
51244: IFFALSE 51256
// result := true else
51246: LD_ADDR_VAR 0 3
51250: PUSH
51251: LD_INT 1
51253: ST_TO_ADDR
51254: GO 51264
// result := false ;
51256: LD_ADDR_VAR 0 3
51260: PUSH
51261: LD_INT 0
51263: ST_TO_ADDR
// end else
51264: GO 51274
// result := false ;
51266: LD_ADDR_VAR 0 3
51270: PUSH
51271: LD_INT 0
51273: ST_TO_ADDR
// end ;
51274: LD_VAR 0 3
51278: RET
// export function HealTarget ( sci ) ; begin
51279: LD_INT 0
51281: PPUSH
// if not sci then
51282: LD_VAR 0 1
51286: NOT
51287: IFFALSE 51291
// exit ;
51289: GO 51356
// result := 0 ;
51291: LD_ADDR_VAR 0 2
51295: PUSH
51296: LD_INT 0
51298: ST_TO_ADDR
// if GetTaskList ( sci ) then
51299: LD_VAR 0 1
51303: PPUSH
51304: CALL_OW 437
51308: IFFALSE 51356
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51310: LD_VAR 0 1
51314: PPUSH
51315: CALL_OW 437
51319: PUSH
51320: LD_INT 1
51322: ARRAY
51323: PUSH
51324: LD_INT 1
51326: ARRAY
51327: PUSH
51328: LD_STRING l
51330: EQUAL
51331: IFFALSE 51356
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51333: LD_ADDR_VAR 0 2
51337: PUSH
51338: LD_VAR 0 1
51342: PPUSH
51343: CALL_OW 437
51347: PUSH
51348: LD_INT 1
51350: ARRAY
51351: PUSH
51352: LD_INT 4
51354: ARRAY
51355: ST_TO_ADDR
// end ;
51356: LD_VAR 0 2
51360: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51361: LD_INT 0
51363: PPUSH
51364: PPUSH
51365: PPUSH
51366: PPUSH
// if not base_units then
51367: LD_VAR 0 1
51371: NOT
51372: IFFALSE 51376
// exit ;
51374: GO 51463
// result := false ;
51376: LD_ADDR_VAR 0 2
51380: PUSH
51381: LD_INT 0
51383: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51384: LD_ADDR_VAR 0 5
51388: PUSH
51389: LD_VAR 0 1
51393: PPUSH
51394: LD_INT 21
51396: PUSH
51397: LD_INT 3
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PPUSH
51404: CALL_OW 72
51408: ST_TO_ADDR
// if not tmp then
51409: LD_VAR 0 5
51413: NOT
51414: IFFALSE 51418
// exit ;
51416: GO 51463
// for i in tmp do
51418: LD_ADDR_VAR 0 3
51422: PUSH
51423: LD_VAR 0 5
51427: PUSH
51428: FOR_IN
51429: IFFALSE 51461
// begin result := EnemyInRange ( i , 22 ) ;
51431: LD_ADDR_VAR 0 2
51435: PUSH
51436: LD_VAR 0 3
51440: PPUSH
51441: LD_INT 22
51443: PPUSH
51444: CALL 49076 0 2
51448: ST_TO_ADDR
// if result then
51449: LD_VAR 0 2
51453: IFFALSE 51459
// exit ;
51455: POP
51456: POP
51457: GO 51463
// end ;
51459: GO 51428
51461: POP
51462: POP
// end ;
51463: LD_VAR 0 2
51467: RET
// export function FilterByTag ( units , tag ) ; begin
51468: LD_INT 0
51470: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51471: LD_ADDR_VAR 0 3
51475: PUSH
51476: LD_VAR 0 1
51480: PPUSH
51481: LD_INT 120
51483: PUSH
51484: LD_VAR 0 2
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PPUSH
51493: CALL_OW 72
51497: ST_TO_ADDR
// end ;
51498: LD_VAR 0 3
51502: RET
// export function IsDriver ( un ) ; begin
51503: LD_INT 0
51505: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51506: LD_ADDR_VAR 0 2
51510: PUSH
51511: LD_VAR 0 1
51515: PUSH
51516: LD_INT 55
51518: PUSH
51519: EMPTY
51520: LIST
51521: PPUSH
51522: CALL_OW 69
51526: IN
51527: ST_TO_ADDR
// end ;
51528: LD_VAR 0 2
51532: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51533: LD_INT 0
51535: PPUSH
51536: PPUSH
// list := [ ] ;
51537: LD_ADDR_VAR 0 5
51541: PUSH
51542: EMPTY
51543: ST_TO_ADDR
// case d of 0 :
51544: LD_VAR 0 3
51548: PUSH
51549: LD_INT 0
51551: DOUBLE
51552: EQUAL
51553: IFTRUE 51557
51555: GO 51690
51557: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51558: LD_ADDR_VAR 0 5
51562: PUSH
51563: LD_VAR 0 1
51567: PUSH
51568: LD_INT 4
51570: MINUS
51571: PUSH
51572: LD_VAR 0 2
51576: PUSH
51577: LD_INT 4
51579: MINUS
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: PUSH
51589: LD_VAR 0 1
51593: PUSH
51594: LD_INT 3
51596: MINUS
51597: PUSH
51598: LD_VAR 0 2
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: PUSH
51611: LD_VAR 0 1
51615: PUSH
51616: LD_INT 4
51618: PLUS
51619: PUSH
51620: LD_VAR 0 2
51624: PUSH
51625: LD_INT 4
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: LIST
51632: PUSH
51633: LD_VAR 0 1
51637: PUSH
51638: LD_INT 3
51640: PLUS
51641: PUSH
51642: LD_VAR 0 2
51646: PUSH
51647: LD_INT 3
51649: PLUS
51650: PUSH
51651: LD_INT 5
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: PUSH
51659: LD_VAR 0 1
51663: PUSH
51664: LD_VAR 0 2
51668: PUSH
51669: LD_INT 4
51671: PLUS
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: ST_TO_ADDR
// end ; 1 :
51688: GO 52388
51690: LD_INT 1
51692: DOUBLE
51693: EQUAL
51694: IFTRUE 51698
51696: GO 51831
51698: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51699: LD_ADDR_VAR 0 5
51703: PUSH
51704: LD_VAR 0 1
51708: PUSH
51709: LD_VAR 0 2
51713: PUSH
51714: LD_INT 4
51716: MINUS
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: PUSH
51726: LD_VAR 0 1
51730: PUSH
51731: LD_INT 3
51733: MINUS
51734: PUSH
51735: LD_VAR 0 2
51739: PUSH
51740: LD_INT 3
51742: MINUS
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: PUSH
51752: LD_VAR 0 1
51756: PUSH
51757: LD_INT 4
51759: MINUS
51760: PUSH
51761: LD_VAR 0 2
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: LIST
51773: PUSH
51774: LD_VAR 0 1
51778: PUSH
51779: LD_VAR 0 2
51783: PUSH
51784: LD_INT 3
51786: PLUS
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: PUSH
51796: LD_VAR 0 1
51800: PUSH
51801: LD_INT 4
51803: PLUS
51804: PUSH
51805: LD_VAR 0 2
51809: PUSH
51810: LD_INT 4
51812: PLUS
51813: PUSH
51814: LD_INT 5
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: LIST
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: ST_TO_ADDR
// end ; 2 :
51829: GO 52388
51831: LD_INT 2
51833: DOUBLE
51834: EQUAL
51835: IFTRUE 51839
51837: GO 51968
51839: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51840: LD_ADDR_VAR 0 5
51844: PUSH
51845: LD_VAR 0 1
51849: PUSH
51850: LD_VAR 0 2
51854: PUSH
51855: LD_INT 3
51857: MINUS
51858: PUSH
51859: LD_INT 3
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: PUSH
51867: LD_VAR 0 1
51871: PUSH
51872: LD_INT 4
51874: PLUS
51875: PUSH
51876: LD_VAR 0 2
51880: PUSH
51881: LD_INT 4
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: PUSH
51889: LD_VAR 0 1
51893: PUSH
51894: LD_VAR 0 2
51898: PUSH
51899: LD_INT 4
51901: PLUS
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: PUSH
51911: LD_VAR 0 1
51915: PUSH
51916: LD_INT 3
51918: MINUS
51919: PUSH
51920: LD_VAR 0 2
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: LIST
51932: PUSH
51933: LD_VAR 0 1
51937: PUSH
51938: LD_INT 4
51940: MINUS
51941: PUSH
51942: LD_VAR 0 2
51946: PUSH
51947: LD_INT 4
51949: MINUS
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: LIST
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: ST_TO_ADDR
// end ; 3 :
51966: GO 52388
51968: LD_INT 3
51970: DOUBLE
51971: EQUAL
51972: IFTRUE 51976
51974: GO 52109
51976: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51977: LD_ADDR_VAR 0 5
51981: PUSH
51982: LD_VAR 0 1
51986: PUSH
51987: LD_INT 3
51989: PLUS
51990: PUSH
51991: LD_VAR 0 2
51995: PUSH
51996: LD_INT 4
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: LIST
52003: PUSH
52004: LD_VAR 0 1
52008: PUSH
52009: LD_INT 4
52011: PLUS
52012: PUSH
52013: LD_VAR 0 2
52017: PUSH
52018: LD_INT 4
52020: PLUS
52021: PUSH
52022: LD_INT 5
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: LIST
52029: PUSH
52030: LD_VAR 0 1
52034: PUSH
52035: LD_INT 4
52037: MINUS
52038: PUSH
52039: LD_VAR 0 2
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: LIST
52051: PUSH
52052: LD_VAR 0 1
52056: PUSH
52057: LD_VAR 0 2
52061: PUSH
52062: LD_INT 4
52064: MINUS
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: PUSH
52074: LD_VAR 0 1
52078: PUSH
52079: LD_INT 3
52081: MINUS
52082: PUSH
52083: LD_VAR 0 2
52087: PUSH
52088: LD_INT 3
52090: MINUS
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: ST_TO_ADDR
// end ; 4 :
52107: GO 52388
52109: LD_INT 4
52111: DOUBLE
52112: EQUAL
52113: IFTRUE 52117
52115: GO 52250
52117: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52118: LD_ADDR_VAR 0 5
52122: PUSH
52123: LD_VAR 0 1
52127: PUSH
52128: LD_VAR 0 2
52132: PUSH
52133: LD_INT 4
52135: PLUS
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: PUSH
52145: LD_VAR 0 1
52149: PUSH
52150: LD_INT 3
52152: PLUS
52153: PUSH
52154: LD_VAR 0 2
52158: PUSH
52159: LD_INT 3
52161: PLUS
52162: PUSH
52163: LD_INT 5
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: PUSH
52171: LD_VAR 0 1
52175: PUSH
52176: LD_INT 4
52178: PLUS
52179: PUSH
52180: LD_VAR 0 2
52184: PUSH
52185: LD_INT 4
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: PUSH
52193: LD_VAR 0 1
52197: PUSH
52198: LD_VAR 0 2
52202: PUSH
52203: LD_INT 3
52205: MINUS
52206: PUSH
52207: LD_INT 3
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: PUSH
52215: LD_VAR 0 1
52219: PUSH
52220: LD_INT 4
52222: MINUS
52223: PUSH
52224: LD_VAR 0 2
52228: PUSH
52229: LD_INT 4
52231: MINUS
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: ST_TO_ADDR
// end ; 5 :
52248: GO 52388
52250: LD_INT 5
52252: DOUBLE
52253: EQUAL
52254: IFTRUE 52258
52256: GO 52387
52258: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52259: LD_ADDR_VAR 0 5
52263: PUSH
52264: LD_VAR 0 1
52268: PUSH
52269: LD_INT 4
52271: MINUS
52272: PUSH
52273: LD_VAR 0 2
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: PUSH
52286: LD_VAR 0 1
52290: PUSH
52291: LD_VAR 0 2
52295: PUSH
52296: LD_INT 4
52298: MINUS
52299: PUSH
52300: LD_INT 3
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: LIST
52307: PUSH
52308: LD_VAR 0 1
52312: PUSH
52313: LD_INT 4
52315: PLUS
52316: PUSH
52317: LD_VAR 0 2
52321: PUSH
52322: LD_INT 4
52324: PLUS
52325: PUSH
52326: LD_INT 5
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: PUSH
52334: LD_VAR 0 1
52338: PUSH
52339: LD_INT 3
52341: PLUS
52342: PUSH
52343: LD_VAR 0 2
52347: PUSH
52348: LD_INT 4
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: LIST
52355: PUSH
52356: LD_VAR 0 1
52360: PUSH
52361: LD_VAR 0 2
52365: PUSH
52366: LD_INT 3
52368: PLUS
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: LIST
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: ST_TO_ADDR
// end ; end ;
52385: GO 52388
52387: POP
// result := list ;
52388: LD_ADDR_VAR 0 4
52392: PUSH
52393: LD_VAR 0 5
52397: ST_TO_ADDR
// end ;
52398: LD_VAR 0 4
52402: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52403: LD_INT 0
52405: PPUSH
52406: PPUSH
52407: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52408: LD_VAR 0 1
52412: NOT
52413: PUSH
52414: LD_VAR 0 2
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 3
52427: PUSH
52428: LD_INT 4
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: IN
52437: NOT
52438: OR
52439: IFFALSE 52443
// exit ;
52441: GO 52535
// tmp := [ ] ;
52443: LD_ADDR_VAR 0 5
52447: PUSH
52448: EMPTY
52449: ST_TO_ADDR
// for i in units do
52450: LD_ADDR_VAR 0 4
52454: PUSH
52455: LD_VAR 0 1
52459: PUSH
52460: FOR_IN
52461: IFFALSE 52504
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52463: LD_ADDR_VAR 0 5
52467: PUSH
52468: LD_VAR 0 5
52472: PPUSH
52473: LD_VAR 0 5
52477: PUSH
52478: LD_INT 1
52480: PLUS
52481: PPUSH
52482: LD_VAR 0 4
52486: PPUSH
52487: LD_VAR 0 2
52491: PPUSH
52492: CALL_OW 259
52496: PPUSH
52497: CALL_OW 2
52501: ST_TO_ADDR
52502: GO 52460
52504: POP
52505: POP
// if not tmp then
52506: LD_VAR 0 5
52510: NOT
52511: IFFALSE 52515
// exit ;
52513: GO 52535
// result := SortListByListDesc ( units , tmp ) ;
52515: LD_ADDR_VAR 0 3
52519: PUSH
52520: LD_VAR 0 1
52524: PPUSH
52525: LD_VAR 0 5
52529: PPUSH
52530: CALL_OW 77
52534: ST_TO_ADDR
// end ;
52535: LD_VAR 0 3
52539: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52540: LD_INT 0
52542: PPUSH
52543: PPUSH
52544: PPUSH
// result := false ;
52545: LD_ADDR_VAR 0 3
52549: PUSH
52550: LD_INT 0
52552: ST_TO_ADDR
// x := GetX ( building ) ;
52553: LD_ADDR_VAR 0 4
52557: PUSH
52558: LD_VAR 0 2
52562: PPUSH
52563: CALL_OW 250
52567: ST_TO_ADDR
// y := GetY ( building ) ;
52568: LD_ADDR_VAR 0 5
52572: PUSH
52573: LD_VAR 0 2
52577: PPUSH
52578: CALL_OW 251
52582: ST_TO_ADDR
// if not building or not x or not y then
52583: LD_VAR 0 2
52587: NOT
52588: PUSH
52589: LD_VAR 0 4
52593: NOT
52594: OR
52595: PUSH
52596: LD_VAR 0 5
52600: NOT
52601: OR
52602: IFFALSE 52606
// exit ;
52604: GO 52698
// if GetTaskList ( unit ) then
52606: LD_VAR 0 1
52610: PPUSH
52611: CALL_OW 437
52615: IFFALSE 52698
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52617: LD_STRING e
52619: PUSH
52620: LD_VAR 0 1
52624: PPUSH
52625: CALL_OW 437
52629: PUSH
52630: LD_INT 1
52632: ARRAY
52633: PUSH
52634: LD_INT 1
52636: ARRAY
52637: EQUAL
52638: PUSH
52639: LD_VAR 0 4
52643: PUSH
52644: LD_VAR 0 1
52648: PPUSH
52649: CALL_OW 437
52653: PUSH
52654: LD_INT 1
52656: ARRAY
52657: PUSH
52658: LD_INT 2
52660: ARRAY
52661: EQUAL
52662: AND
52663: PUSH
52664: LD_VAR 0 5
52668: PUSH
52669: LD_VAR 0 1
52673: PPUSH
52674: CALL_OW 437
52678: PUSH
52679: LD_INT 1
52681: ARRAY
52682: PUSH
52683: LD_INT 3
52685: ARRAY
52686: EQUAL
52687: AND
52688: IFFALSE 52698
// result := true end ;
52690: LD_ADDR_VAR 0 3
52694: PUSH
52695: LD_INT 1
52697: ST_TO_ADDR
// end ;
52698: LD_VAR 0 3
52702: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52703: LD_INT 0
52705: PPUSH
// result := false ;
52706: LD_ADDR_VAR 0 4
52710: PUSH
52711: LD_INT 0
52713: ST_TO_ADDR
// if GetTaskList ( unit ) then
52714: LD_VAR 0 1
52718: PPUSH
52719: CALL_OW 437
52723: IFFALSE 52806
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52725: LD_STRING M
52727: PUSH
52728: LD_VAR 0 1
52732: PPUSH
52733: CALL_OW 437
52737: PUSH
52738: LD_INT 1
52740: ARRAY
52741: PUSH
52742: LD_INT 1
52744: ARRAY
52745: EQUAL
52746: PUSH
52747: LD_VAR 0 2
52751: PUSH
52752: LD_VAR 0 1
52756: PPUSH
52757: CALL_OW 437
52761: PUSH
52762: LD_INT 1
52764: ARRAY
52765: PUSH
52766: LD_INT 2
52768: ARRAY
52769: EQUAL
52770: AND
52771: PUSH
52772: LD_VAR 0 3
52776: PUSH
52777: LD_VAR 0 1
52781: PPUSH
52782: CALL_OW 437
52786: PUSH
52787: LD_INT 1
52789: ARRAY
52790: PUSH
52791: LD_INT 3
52793: ARRAY
52794: EQUAL
52795: AND
52796: IFFALSE 52806
// result := true ;
52798: LD_ADDR_VAR 0 4
52802: PUSH
52803: LD_INT 1
52805: ST_TO_ADDR
// end ; end ;
52806: LD_VAR 0 4
52810: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52811: LD_INT 0
52813: PPUSH
52814: PPUSH
52815: PPUSH
52816: PPUSH
// if not unit or not area then
52817: LD_VAR 0 1
52821: NOT
52822: PUSH
52823: LD_VAR 0 2
52827: NOT
52828: OR
52829: IFFALSE 52833
// exit ;
52831: GO 52997
// tmp := AreaToList ( area , i ) ;
52833: LD_ADDR_VAR 0 6
52837: PUSH
52838: LD_VAR 0 2
52842: PPUSH
52843: LD_VAR 0 5
52847: PPUSH
52848: CALL_OW 517
52852: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52853: LD_ADDR_VAR 0 5
52857: PUSH
52858: DOUBLE
52859: LD_INT 1
52861: DEC
52862: ST_TO_ADDR
52863: LD_VAR 0 6
52867: PUSH
52868: LD_INT 1
52870: ARRAY
52871: PUSH
52872: FOR_TO
52873: IFFALSE 52995
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52875: LD_ADDR_VAR 0 7
52879: PUSH
52880: LD_VAR 0 6
52884: PUSH
52885: LD_INT 1
52887: ARRAY
52888: PUSH
52889: LD_VAR 0 5
52893: ARRAY
52894: PUSH
52895: LD_VAR 0 6
52899: PUSH
52900: LD_INT 2
52902: ARRAY
52903: PUSH
52904: LD_VAR 0 5
52908: ARRAY
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52914: LD_VAR 0 7
52918: PUSH
52919: LD_INT 1
52921: ARRAY
52922: PPUSH
52923: LD_VAR 0 7
52927: PUSH
52928: LD_INT 2
52930: ARRAY
52931: PPUSH
52932: CALL_OW 428
52936: PUSH
52937: LD_INT 0
52939: EQUAL
52940: IFFALSE 52993
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52942: LD_VAR 0 1
52946: PPUSH
52947: LD_VAR 0 7
52951: PUSH
52952: LD_INT 1
52954: ARRAY
52955: PPUSH
52956: LD_VAR 0 7
52960: PUSH
52961: LD_INT 2
52963: ARRAY
52964: PPUSH
52965: LD_VAR 0 3
52969: PPUSH
52970: CALL_OW 48
// result := IsPlaced ( unit ) ;
52974: LD_ADDR_VAR 0 4
52978: PUSH
52979: LD_VAR 0 1
52983: PPUSH
52984: CALL_OW 305
52988: ST_TO_ADDR
// exit ;
52989: POP
52990: POP
52991: GO 52997
// end ; end ;
52993: GO 52872
52995: POP
52996: POP
// end ;
52997: LD_VAR 0 4
53001: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53002: LD_INT 0
53004: PPUSH
53005: PPUSH
53006: PPUSH
// if not side or side > 8 then
53007: LD_VAR 0 1
53011: NOT
53012: PUSH
53013: LD_VAR 0 1
53017: PUSH
53018: LD_INT 8
53020: GREATER
53021: OR
53022: IFFALSE 53026
// exit ;
53024: GO 53213
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53026: LD_ADDR_VAR 0 4
53030: PUSH
53031: LD_INT 22
53033: PUSH
53034: LD_VAR 0 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 21
53045: PUSH
53046: LD_INT 3
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PPUSH
53057: CALL_OW 69
53061: ST_TO_ADDR
// if not tmp then
53062: LD_VAR 0 4
53066: NOT
53067: IFFALSE 53071
// exit ;
53069: GO 53213
// enable_addtolog := true ;
53071: LD_ADDR_OWVAR 81
53075: PUSH
53076: LD_INT 1
53078: ST_TO_ADDR
// AddToLog ( [ ) ;
53079: LD_STRING [
53081: PPUSH
53082: CALL_OW 561
// for i in tmp do
53086: LD_ADDR_VAR 0 3
53090: PUSH
53091: LD_VAR 0 4
53095: PUSH
53096: FOR_IN
53097: IFFALSE 53204
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53099: LD_STRING [
53101: PUSH
53102: LD_VAR 0 3
53106: PPUSH
53107: CALL_OW 266
53111: STR
53112: PUSH
53113: LD_STRING , 
53115: STR
53116: PUSH
53117: LD_VAR 0 3
53121: PPUSH
53122: CALL_OW 250
53126: STR
53127: PUSH
53128: LD_STRING , 
53130: STR
53131: PUSH
53132: LD_VAR 0 3
53136: PPUSH
53137: CALL_OW 251
53141: STR
53142: PUSH
53143: LD_STRING , 
53145: STR
53146: PUSH
53147: LD_VAR 0 3
53151: PPUSH
53152: CALL_OW 254
53156: STR
53157: PUSH
53158: LD_STRING , 
53160: STR
53161: PUSH
53162: LD_VAR 0 3
53166: PPUSH
53167: LD_INT 1
53169: PPUSH
53170: CALL_OW 268
53174: STR
53175: PUSH
53176: LD_STRING , 
53178: STR
53179: PUSH
53180: LD_VAR 0 3
53184: PPUSH
53185: LD_INT 2
53187: PPUSH
53188: CALL_OW 268
53192: STR
53193: PUSH
53194: LD_STRING ],
53196: STR
53197: PPUSH
53198: CALL_OW 561
// end ;
53202: GO 53096
53204: POP
53205: POP
// AddToLog ( ]; ) ;
53206: LD_STRING ];
53208: PPUSH
53209: CALL_OW 561
// end ;
53213: LD_VAR 0 2
53217: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53218: LD_INT 0
53220: PPUSH
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
// if not area or not rate or not max then
53225: LD_VAR 0 1
53229: NOT
53230: PUSH
53231: LD_VAR 0 2
53235: NOT
53236: OR
53237: PUSH
53238: LD_VAR 0 4
53242: NOT
53243: OR
53244: IFFALSE 53248
// exit ;
53246: GO 53437
// while 1 do
53248: LD_INT 1
53250: IFFALSE 53437
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53252: LD_ADDR_VAR 0 9
53256: PUSH
53257: LD_VAR 0 1
53261: PPUSH
53262: LD_INT 1
53264: PPUSH
53265: CALL_OW 287
53269: PUSH
53270: LD_INT 10
53272: MUL
53273: ST_TO_ADDR
// r := rate / 10 ;
53274: LD_ADDR_VAR 0 7
53278: PUSH
53279: LD_VAR 0 2
53283: PUSH
53284: LD_INT 10
53286: DIVREAL
53287: ST_TO_ADDR
// time := 1 1$00 ;
53288: LD_ADDR_VAR 0 8
53292: PUSH
53293: LD_INT 2100
53295: ST_TO_ADDR
// if amount < min then
53296: LD_VAR 0 9
53300: PUSH
53301: LD_VAR 0 3
53305: LESS
53306: IFFALSE 53324
// r := r * 2 else
53308: LD_ADDR_VAR 0 7
53312: PUSH
53313: LD_VAR 0 7
53317: PUSH
53318: LD_INT 2
53320: MUL
53321: ST_TO_ADDR
53322: GO 53350
// if amount > max then
53324: LD_VAR 0 9
53328: PUSH
53329: LD_VAR 0 4
53333: GREATER
53334: IFFALSE 53350
// r := r / 2 ;
53336: LD_ADDR_VAR 0 7
53340: PUSH
53341: LD_VAR 0 7
53345: PUSH
53346: LD_INT 2
53348: DIVREAL
53349: ST_TO_ADDR
// time := time / r ;
53350: LD_ADDR_VAR 0 8
53354: PUSH
53355: LD_VAR 0 8
53359: PUSH
53360: LD_VAR 0 7
53364: DIVREAL
53365: ST_TO_ADDR
// if time < 0 then
53366: LD_VAR 0 8
53370: PUSH
53371: LD_INT 0
53373: LESS
53374: IFFALSE 53391
// time := time * - 1 ;
53376: LD_ADDR_VAR 0 8
53380: PUSH
53381: LD_VAR 0 8
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: MUL
53390: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53391: LD_VAR 0 8
53395: PUSH
53396: LD_INT 35
53398: PPUSH
53399: LD_INT 875
53401: PPUSH
53402: CALL_OW 12
53406: PLUS
53407: PPUSH
53408: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53412: LD_INT 1
53414: PPUSH
53415: LD_INT 5
53417: PPUSH
53418: CALL_OW 12
53422: PPUSH
53423: LD_VAR 0 1
53427: PPUSH
53428: LD_INT 1
53430: PPUSH
53431: CALL_OW 55
// end ;
53435: GO 53248
// end ;
53437: LD_VAR 0 5
53441: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53442: LD_INT 0
53444: PPUSH
53445: PPUSH
53446: PPUSH
53447: PPUSH
53448: PPUSH
53449: PPUSH
53450: PPUSH
53451: PPUSH
// if not turrets or not factories then
53452: LD_VAR 0 1
53456: NOT
53457: PUSH
53458: LD_VAR 0 2
53462: NOT
53463: OR
53464: IFFALSE 53468
// exit ;
53466: GO 53775
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53468: LD_ADDR_VAR 0 10
53472: PUSH
53473: LD_INT 5
53475: PUSH
53476: LD_INT 6
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: LD_INT 4
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 3
53495: PUSH
53496: LD_INT 5
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 24
53510: PUSH
53511: LD_INT 25
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 23
53520: PUSH
53521: LD_INT 27
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 42
53534: PUSH
53535: LD_INT 43
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 44
53544: PUSH
53545: LD_INT 46
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 45
53554: PUSH
53555: LD_INT 47
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: LIST
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: LIST
53571: ST_TO_ADDR
// result := [ ] ;
53572: LD_ADDR_VAR 0 3
53576: PUSH
53577: EMPTY
53578: ST_TO_ADDR
// for i in turrets do
53579: LD_ADDR_VAR 0 4
53583: PUSH
53584: LD_VAR 0 1
53588: PUSH
53589: FOR_IN
53590: IFFALSE 53773
// begin nat := GetNation ( i ) ;
53592: LD_ADDR_VAR 0 7
53596: PUSH
53597: LD_VAR 0 4
53601: PPUSH
53602: CALL_OW 248
53606: ST_TO_ADDR
// weapon := 0 ;
53607: LD_ADDR_VAR 0 8
53611: PUSH
53612: LD_INT 0
53614: ST_TO_ADDR
// if not nat then
53615: LD_VAR 0 7
53619: NOT
53620: IFFALSE 53624
// continue ;
53622: GO 53589
// for j in list [ nat ] do
53624: LD_ADDR_VAR 0 5
53628: PUSH
53629: LD_VAR 0 10
53633: PUSH
53634: LD_VAR 0 7
53638: ARRAY
53639: PUSH
53640: FOR_IN
53641: IFFALSE 53682
// if GetBWeapon ( i ) = j [ 1 ] then
53643: LD_VAR 0 4
53647: PPUSH
53648: CALL_OW 269
53652: PUSH
53653: LD_VAR 0 5
53657: PUSH
53658: LD_INT 1
53660: ARRAY
53661: EQUAL
53662: IFFALSE 53680
// begin weapon := j [ 2 ] ;
53664: LD_ADDR_VAR 0 8
53668: PUSH
53669: LD_VAR 0 5
53673: PUSH
53674: LD_INT 2
53676: ARRAY
53677: ST_TO_ADDR
// break ;
53678: GO 53682
// end ;
53680: GO 53640
53682: POP
53683: POP
// if not weapon then
53684: LD_VAR 0 8
53688: NOT
53689: IFFALSE 53693
// continue ;
53691: GO 53589
// for k in factories do
53693: LD_ADDR_VAR 0 6
53697: PUSH
53698: LD_VAR 0 2
53702: PUSH
53703: FOR_IN
53704: IFFALSE 53769
// begin weapons := AvailableWeaponList ( k ) ;
53706: LD_ADDR_VAR 0 9
53710: PUSH
53711: LD_VAR 0 6
53715: PPUSH
53716: CALL_OW 478
53720: ST_TO_ADDR
// if not weapons then
53721: LD_VAR 0 9
53725: NOT
53726: IFFALSE 53730
// continue ;
53728: GO 53703
// if weapon in weapons then
53730: LD_VAR 0 8
53734: PUSH
53735: LD_VAR 0 9
53739: IN
53740: IFFALSE 53767
// begin result := [ i , weapon ] ;
53742: LD_ADDR_VAR 0 3
53746: PUSH
53747: LD_VAR 0 4
53751: PUSH
53752: LD_VAR 0 8
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: ST_TO_ADDR
// exit ;
53761: POP
53762: POP
53763: POP
53764: POP
53765: GO 53775
// end ; end ;
53767: GO 53703
53769: POP
53770: POP
// end ;
53771: GO 53589
53773: POP
53774: POP
// end ;
53775: LD_VAR 0 3
53779: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53780: LD_INT 0
53782: PPUSH
// if not side or side > 8 then
53783: LD_VAR 0 3
53787: NOT
53788: PUSH
53789: LD_VAR 0 3
53793: PUSH
53794: LD_INT 8
53796: GREATER
53797: OR
53798: IFFALSE 53802
// exit ;
53800: GO 53861
// if not range then
53802: LD_VAR 0 4
53806: NOT
53807: IFFALSE 53818
// range := - 12 ;
53809: LD_ADDR_VAR 0 4
53813: PUSH
53814: LD_INT 12
53816: NEG
53817: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53818: LD_VAR 0 1
53822: PPUSH
53823: LD_VAR 0 2
53827: PPUSH
53828: LD_VAR 0 3
53832: PPUSH
53833: LD_VAR 0 4
53837: PPUSH
53838: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53842: LD_VAR 0 1
53846: PPUSH
53847: LD_VAR 0 2
53851: PPUSH
53852: LD_VAR 0 3
53856: PPUSH
53857: CALL_OW 331
// end ;
53861: LD_VAR 0 5
53865: RET
// export function Video ( mode ) ; begin
53866: LD_INT 0
53868: PPUSH
// ingame_video = mode ;
53869: LD_ADDR_OWVAR 52
53873: PUSH
53874: LD_VAR 0 1
53878: ST_TO_ADDR
// interface_hidden = mode ;
53879: LD_ADDR_OWVAR 54
53883: PUSH
53884: LD_VAR 0 1
53888: ST_TO_ADDR
// end ;
53889: LD_VAR 0 2
53893: RET
// export function Join ( array , element ) ; begin
53894: LD_INT 0
53896: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53897: LD_ADDR_VAR 0 3
53901: PUSH
53902: LD_VAR 0 1
53906: PPUSH
53907: LD_VAR 0 1
53911: PUSH
53912: LD_INT 1
53914: PLUS
53915: PPUSH
53916: LD_VAR 0 2
53920: PPUSH
53921: CALL_OW 1
53925: ST_TO_ADDR
// end ;
53926: LD_VAR 0 3
53930: RET
// export function JoinUnion ( array , element ) ; begin
53931: LD_INT 0
53933: PPUSH
// result := array union element ;
53934: LD_ADDR_VAR 0 3
53938: PUSH
53939: LD_VAR 0 1
53943: PUSH
53944: LD_VAR 0 2
53948: UNION
53949: ST_TO_ADDR
// end ;
53950: LD_VAR 0 3
53954: RET
// export function GetBehemoths ( side ) ; begin
53955: LD_INT 0
53957: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53958: LD_ADDR_VAR 0 2
53962: PUSH
53963: LD_INT 22
53965: PUSH
53966: LD_VAR 0 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 31
53977: PUSH
53978: LD_INT 25
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PPUSH
53989: CALL_OW 69
53993: ST_TO_ADDR
// end ;
53994: LD_VAR 0 2
53998: RET
// export function Shuffle ( array ) ; var i , index ; begin
53999: LD_INT 0
54001: PPUSH
54002: PPUSH
54003: PPUSH
// result := [ ] ;
54004: LD_ADDR_VAR 0 2
54008: PUSH
54009: EMPTY
54010: ST_TO_ADDR
// if not array then
54011: LD_VAR 0 1
54015: NOT
54016: IFFALSE 54020
// exit ;
54018: GO 54119
// Randomize ;
54020: CALL_OW 10
// for i = array downto 1 do
54024: LD_ADDR_VAR 0 3
54028: PUSH
54029: DOUBLE
54030: LD_VAR 0 1
54034: INC
54035: ST_TO_ADDR
54036: LD_INT 1
54038: PUSH
54039: FOR_DOWNTO
54040: IFFALSE 54117
// begin index := rand ( 1 , array ) ;
54042: LD_ADDR_VAR 0 4
54046: PUSH
54047: LD_INT 1
54049: PPUSH
54050: LD_VAR 0 1
54054: PPUSH
54055: CALL_OW 12
54059: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54060: LD_ADDR_VAR 0 2
54064: PUSH
54065: LD_VAR 0 2
54069: PPUSH
54070: LD_VAR 0 2
54074: PUSH
54075: LD_INT 1
54077: PLUS
54078: PPUSH
54079: LD_VAR 0 1
54083: PUSH
54084: LD_VAR 0 4
54088: ARRAY
54089: PPUSH
54090: CALL_OW 2
54094: ST_TO_ADDR
// array := Delete ( array , index ) ;
54095: LD_ADDR_VAR 0 1
54099: PUSH
54100: LD_VAR 0 1
54104: PPUSH
54105: LD_VAR 0 4
54109: PPUSH
54110: CALL_OW 3
54114: ST_TO_ADDR
// end ;
54115: GO 54039
54117: POP
54118: POP
// end ;
54119: LD_VAR 0 2
54123: RET
// export function GetBaseMaterials ( base ) ; begin
54124: LD_INT 0
54126: PPUSH
// result := [ 0 , 0 , 0 ] ;
54127: LD_ADDR_VAR 0 2
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: LIST
54145: ST_TO_ADDR
// if not base then
54146: LD_VAR 0 1
54150: NOT
54151: IFFALSE 54155
// exit ;
54153: GO 54204
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54155: LD_ADDR_VAR 0 2
54159: PUSH
54160: LD_VAR 0 1
54164: PPUSH
54165: LD_INT 1
54167: PPUSH
54168: CALL_OW 275
54172: PUSH
54173: LD_VAR 0 1
54177: PPUSH
54178: LD_INT 2
54180: PPUSH
54181: CALL_OW 275
54185: PUSH
54186: LD_VAR 0 1
54190: PPUSH
54191: LD_INT 3
54193: PPUSH
54194: CALL_OW 275
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: LIST
54203: ST_TO_ADDR
// end ;
54204: LD_VAR 0 2
54208: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54209: LD_INT 0
54211: PPUSH
54212: PPUSH
// result := array ;
54213: LD_ADDR_VAR 0 3
54217: PUSH
54218: LD_VAR 0 1
54222: ST_TO_ADDR
// if size >= result then
54223: LD_VAR 0 2
54227: PUSH
54228: LD_VAR 0 3
54232: GREATEREQUAL
54233: IFFALSE 54237
// exit ;
54235: GO 54287
// if size then
54237: LD_VAR 0 2
54241: IFFALSE 54287
// for i := array downto size do
54243: LD_ADDR_VAR 0 4
54247: PUSH
54248: DOUBLE
54249: LD_VAR 0 1
54253: INC
54254: ST_TO_ADDR
54255: LD_VAR 0 2
54259: PUSH
54260: FOR_DOWNTO
54261: IFFALSE 54285
// result := Delete ( result , result ) ;
54263: LD_ADDR_VAR 0 3
54267: PUSH
54268: LD_VAR 0 3
54272: PPUSH
54273: LD_VAR 0 3
54277: PPUSH
54278: CALL_OW 3
54282: ST_TO_ADDR
54283: GO 54260
54285: POP
54286: POP
// end ;
54287: LD_VAR 0 3
54291: RET
// export function ComExit ( unit ) ; var tmp ; begin
54292: LD_INT 0
54294: PPUSH
54295: PPUSH
// if not IsInUnit ( unit ) then
54296: LD_VAR 0 1
54300: PPUSH
54301: CALL_OW 310
54305: NOT
54306: IFFALSE 54310
// exit ;
54308: GO 54370
// tmp := IsInUnit ( unit ) ;
54310: LD_ADDR_VAR 0 3
54314: PUSH
54315: LD_VAR 0 1
54319: PPUSH
54320: CALL_OW 310
54324: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54325: LD_VAR 0 3
54329: PPUSH
54330: CALL_OW 247
54334: PUSH
54335: LD_INT 2
54337: EQUAL
54338: IFFALSE 54351
// ComExitVehicle ( unit ) else
54340: LD_VAR 0 1
54344: PPUSH
54345: CALL_OW 121
54349: GO 54360
// ComExitBuilding ( unit ) ;
54351: LD_VAR 0 1
54355: PPUSH
54356: CALL_OW 122
// result := tmp ;
54360: LD_ADDR_VAR 0 2
54364: PUSH
54365: LD_VAR 0 3
54369: ST_TO_ADDR
// end ;
54370: LD_VAR 0 2
54374: RET
// export function ComExitAll ( units ) ; var i ; begin
54375: LD_INT 0
54377: PPUSH
54378: PPUSH
// if not units then
54379: LD_VAR 0 1
54383: NOT
54384: IFFALSE 54388
// exit ;
54386: GO 54414
// for i in units do
54388: LD_ADDR_VAR 0 3
54392: PUSH
54393: LD_VAR 0 1
54397: PUSH
54398: FOR_IN
54399: IFFALSE 54412
// ComExit ( i ) ;
54401: LD_VAR 0 3
54405: PPUSH
54406: CALL 54292 0 1
54410: GO 54398
54412: POP
54413: POP
// end ;
54414: LD_VAR 0 2
54418: RET
// export function ResetHc ; begin
54419: LD_INT 0
54421: PPUSH
// InitHc ;
54422: CALL_OW 19
// hc_importance := 0 ;
54426: LD_ADDR_OWVAR 32
54430: PUSH
54431: LD_INT 0
54433: ST_TO_ADDR
// end ;
54434: LD_VAR 0 1
54438: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54439: LD_INT 0
54441: PPUSH
54442: PPUSH
54443: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54444: LD_ADDR_VAR 0 6
54448: PUSH
54449: LD_VAR 0 1
54453: PUSH
54454: LD_VAR 0 3
54458: PLUS
54459: PUSH
54460: LD_INT 2
54462: DIV
54463: ST_TO_ADDR
// if _x < 0 then
54464: LD_VAR 0 6
54468: PUSH
54469: LD_INT 0
54471: LESS
54472: IFFALSE 54489
// _x := _x * - 1 ;
54474: LD_ADDR_VAR 0 6
54478: PUSH
54479: LD_VAR 0 6
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: MUL
54488: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54489: LD_ADDR_VAR 0 7
54493: PUSH
54494: LD_VAR 0 2
54498: PUSH
54499: LD_VAR 0 4
54503: PLUS
54504: PUSH
54505: LD_INT 2
54507: DIV
54508: ST_TO_ADDR
// if _y < 0 then
54509: LD_VAR 0 7
54513: PUSH
54514: LD_INT 0
54516: LESS
54517: IFFALSE 54534
// _y := _y * - 1 ;
54519: LD_ADDR_VAR 0 7
54523: PUSH
54524: LD_VAR 0 7
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: MUL
54533: ST_TO_ADDR
// result := [ _x , _y ] ;
54534: LD_ADDR_VAR 0 5
54538: PUSH
54539: LD_VAR 0 6
54543: PUSH
54544: LD_VAR 0 7
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: ST_TO_ADDR
// end ;
54553: LD_VAR 0 5
54557: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54558: LD_INT 0
54560: PPUSH
54561: PPUSH
54562: PPUSH
54563: PPUSH
// task := GetTaskList ( unit ) ;
54564: LD_ADDR_VAR 0 7
54568: PUSH
54569: LD_VAR 0 1
54573: PPUSH
54574: CALL_OW 437
54578: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54579: LD_VAR 0 7
54583: NOT
54584: PUSH
54585: LD_VAR 0 1
54589: PPUSH
54590: LD_VAR 0 2
54594: PPUSH
54595: CALL_OW 308
54599: NOT
54600: AND
54601: IFFALSE 54605
// exit ;
54603: GO 54723
// if IsInArea ( unit , area ) then
54605: LD_VAR 0 1
54609: PPUSH
54610: LD_VAR 0 2
54614: PPUSH
54615: CALL_OW 308
54619: IFFALSE 54637
// begin ComMoveToArea ( unit , goAway ) ;
54621: LD_VAR 0 1
54625: PPUSH
54626: LD_VAR 0 3
54630: PPUSH
54631: CALL_OW 113
// exit ;
54635: GO 54723
// end ; if task [ 1 ] [ 1 ] <> M then
54637: LD_VAR 0 7
54641: PUSH
54642: LD_INT 1
54644: ARRAY
54645: PUSH
54646: LD_INT 1
54648: ARRAY
54649: PUSH
54650: LD_STRING M
54652: NONEQUAL
54653: IFFALSE 54657
// exit ;
54655: GO 54723
// x := task [ 1 ] [ 2 ] ;
54657: LD_ADDR_VAR 0 5
54661: PUSH
54662: LD_VAR 0 7
54666: PUSH
54667: LD_INT 1
54669: ARRAY
54670: PUSH
54671: LD_INT 2
54673: ARRAY
54674: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54675: LD_ADDR_VAR 0 6
54679: PUSH
54680: LD_VAR 0 7
54684: PUSH
54685: LD_INT 1
54687: ARRAY
54688: PUSH
54689: LD_INT 3
54691: ARRAY
54692: ST_TO_ADDR
// if InArea ( x , y , area ) then
54693: LD_VAR 0 5
54697: PPUSH
54698: LD_VAR 0 6
54702: PPUSH
54703: LD_VAR 0 2
54707: PPUSH
54708: CALL_OW 309
54712: IFFALSE 54723
// ComStop ( unit ) ;
54714: LD_VAR 0 1
54718: PPUSH
54719: CALL_OW 141
// end ;
54723: LD_VAR 0 4
54727: RET
// export function Abs ( value ) ; begin
54728: LD_INT 0
54730: PPUSH
// result := value ;
54731: LD_ADDR_VAR 0 2
54735: PUSH
54736: LD_VAR 0 1
54740: ST_TO_ADDR
// if value < 0 then
54741: LD_VAR 0 1
54745: PUSH
54746: LD_INT 0
54748: LESS
54749: IFFALSE 54766
// result := value * - 1 ;
54751: LD_ADDR_VAR 0 2
54755: PUSH
54756: LD_VAR 0 1
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: MUL
54765: ST_TO_ADDR
// end ;
54766: LD_VAR 0 2
54770: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54771: LD_INT 0
54773: PPUSH
54774: PPUSH
54775: PPUSH
54776: PPUSH
54777: PPUSH
54778: PPUSH
54779: PPUSH
54780: PPUSH
// if not unit or not building then
54781: LD_VAR 0 1
54785: NOT
54786: PUSH
54787: LD_VAR 0 2
54791: NOT
54792: OR
54793: IFFALSE 54797
// exit ;
54795: GO 55023
// x := GetX ( building ) ;
54797: LD_ADDR_VAR 0 4
54801: PUSH
54802: LD_VAR 0 2
54806: PPUSH
54807: CALL_OW 250
54811: ST_TO_ADDR
// y := GetY ( building ) ;
54812: LD_ADDR_VAR 0 6
54816: PUSH
54817: LD_VAR 0 2
54821: PPUSH
54822: CALL_OW 251
54826: ST_TO_ADDR
// d := GetDir ( building ) ;
54827: LD_ADDR_VAR 0 8
54831: PUSH
54832: LD_VAR 0 2
54836: PPUSH
54837: CALL_OW 254
54841: ST_TO_ADDR
// r := 4 ;
54842: LD_ADDR_VAR 0 9
54846: PUSH
54847: LD_INT 4
54849: ST_TO_ADDR
// for i := 1 to 5 do
54850: LD_ADDR_VAR 0 10
54854: PUSH
54855: DOUBLE
54856: LD_INT 1
54858: DEC
54859: ST_TO_ADDR
54860: LD_INT 5
54862: PUSH
54863: FOR_TO
54864: IFFALSE 55021
// begin _x := ShiftX ( x , d , r + i ) ;
54866: LD_ADDR_VAR 0 5
54870: PUSH
54871: LD_VAR 0 4
54875: PPUSH
54876: LD_VAR 0 8
54880: PPUSH
54881: LD_VAR 0 9
54885: PUSH
54886: LD_VAR 0 10
54890: PLUS
54891: PPUSH
54892: CALL_OW 272
54896: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54897: LD_ADDR_VAR 0 7
54901: PUSH
54902: LD_VAR 0 6
54906: PPUSH
54907: LD_VAR 0 8
54911: PPUSH
54912: LD_VAR 0 9
54916: PUSH
54917: LD_VAR 0 10
54921: PLUS
54922: PPUSH
54923: CALL_OW 273
54927: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54928: LD_VAR 0 5
54932: PPUSH
54933: LD_VAR 0 7
54937: PPUSH
54938: CALL_OW 488
54942: PUSH
54943: LD_VAR 0 5
54947: PPUSH
54948: LD_VAR 0 7
54952: PPUSH
54953: CALL_OW 428
54957: PPUSH
54958: CALL_OW 247
54962: PUSH
54963: LD_INT 3
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: IN
54973: NOT
54974: AND
54975: IFFALSE 55019
// begin ComMoveXY ( unit , _x , _y ) ;
54977: LD_VAR 0 1
54981: PPUSH
54982: LD_VAR 0 5
54986: PPUSH
54987: LD_VAR 0 7
54991: PPUSH
54992: CALL_OW 111
// result := [ _x , _y ] ;
54996: LD_ADDR_VAR 0 3
55000: PUSH
55001: LD_VAR 0 5
55005: PUSH
55006: LD_VAR 0 7
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// exit ;
55015: POP
55016: POP
55017: GO 55023
// end ; end ;
55019: GO 54863
55021: POP
55022: POP
// end ;
55023: LD_VAR 0 3
55027: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55028: LD_INT 0
55030: PPUSH
55031: PPUSH
55032: PPUSH
// result := 0 ;
55033: LD_ADDR_VAR 0 3
55037: PUSH
55038: LD_INT 0
55040: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55041: LD_VAR 0 1
55045: PUSH
55046: LD_INT 0
55048: LESS
55049: PUSH
55050: LD_VAR 0 1
55054: PUSH
55055: LD_INT 8
55057: GREATER
55058: OR
55059: PUSH
55060: LD_VAR 0 2
55064: PUSH
55065: LD_INT 0
55067: LESS
55068: OR
55069: PUSH
55070: LD_VAR 0 2
55074: PUSH
55075: LD_INT 8
55077: GREATER
55078: OR
55079: IFFALSE 55083
// exit ;
55081: GO 55158
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55083: LD_ADDR_VAR 0 4
55087: PUSH
55088: LD_INT 22
55090: PUSH
55091: LD_VAR 0 2
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PPUSH
55100: CALL_OW 69
55104: PUSH
55105: FOR_IN
55106: IFFALSE 55156
// begin un := UnitShoot ( i ) ;
55108: LD_ADDR_VAR 0 5
55112: PUSH
55113: LD_VAR 0 4
55117: PPUSH
55118: CALL_OW 504
55122: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55123: LD_VAR 0 5
55127: PPUSH
55128: CALL_OW 255
55132: PUSH
55133: LD_VAR 0 1
55137: EQUAL
55138: IFFALSE 55154
// begin result := un ;
55140: LD_ADDR_VAR 0 3
55144: PUSH
55145: LD_VAR 0 5
55149: ST_TO_ADDR
// exit ;
55150: POP
55151: POP
55152: GO 55158
// end ; end ;
55154: GO 55105
55156: POP
55157: POP
// end ;
55158: LD_VAR 0 3
55162: RET
// export function GetCargoBay ( units ) ; begin
55163: LD_INT 0
55165: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55166: LD_ADDR_VAR 0 2
55170: PUSH
55171: LD_VAR 0 1
55175: PPUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 34
55181: PUSH
55182: LD_INT 12
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 34
55191: PUSH
55192: LD_INT 51
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 34
55201: PUSH
55202: LD_INT 32
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 34
55211: PUSH
55212: LD_INT 89
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: PPUSH
55226: CALL_OW 72
55230: ST_TO_ADDR
// end ;
55231: LD_VAR 0 2
55235: RET
// export function Negate ( value ) ; begin
55236: LD_INT 0
55238: PPUSH
// result := not value ;
55239: LD_ADDR_VAR 0 2
55243: PUSH
55244: LD_VAR 0 1
55248: NOT
55249: ST_TO_ADDR
// end ;
55250: LD_VAR 0 2
55254: RET
// export function Inc ( value ) ; begin
55255: LD_INT 0
55257: PPUSH
// result := value + 1 ;
55258: LD_ADDR_VAR 0 2
55262: PUSH
55263: LD_VAR 0 1
55267: PUSH
55268: LD_INT 1
55270: PLUS
55271: ST_TO_ADDR
// end ;
55272: LD_VAR 0 2
55276: RET
// export function Dec ( value ) ; begin
55277: LD_INT 0
55279: PPUSH
// result := value - 1 ;
55280: LD_ADDR_VAR 0 2
55284: PUSH
55285: LD_VAR 0 1
55289: PUSH
55290: LD_INT 1
55292: MINUS
55293: ST_TO_ADDR
// end ;
55294: LD_VAR 0 2
55298: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55299: LD_INT 0
55301: PPUSH
55302: PPUSH
55303: PPUSH
55304: PPUSH
55305: PPUSH
55306: PPUSH
55307: PPUSH
55308: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55309: LD_VAR 0 1
55313: PPUSH
55314: LD_VAR 0 2
55318: PPUSH
55319: CALL_OW 488
55323: NOT
55324: PUSH
55325: LD_VAR 0 3
55329: PPUSH
55330: LD_VAR 0 4
55334: PPUSH
55335: CALL_OW 488
55339: NOT
55340: OR
55341: IFFALSE 55354
// begin result := - 1 ;
55343: LD_ADDR_VAR 0 5
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: ST_TO_ADDR
// exit ;
55352: GO 55589
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55354: LD_ADDR_VAR 0 12
55358: PUSH
55359: LD_VAR 0 1
55363: PPUSH
55364: LD_VAR 0 2
55368: PPUSH
55369: LD_VAR 0 3
55373: PPUSH
55374: LD_VAR 0 4
55378: PPUSH
55379: CALL 54439 0 4
55383: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55384: LD_ADDR_VAR 0 11
55388: PUSH
55389: LD_VAR 0 1
55393: PPUSH
55394: LD_VAR 0 2
55398: PPUSH
55399: LD_VAR 0 12
55403: PUSH
55404: LD_INT 1
55406: ARRAY
55407: PPUSH
55408: LD_VAR 0 12
55412: PUSH
55413: LD_INT 2
55415: ARRAY
55416: PPUSH
55417: CALL_OW 298
55421: ST_TO_ADDR
// distance := 9999 ;
55422: LD_ADDR_VAR 0 10
55426: PUSH
55427: LD_INT 9999
55429: ST_TO_ADDR
// for i := 0 to 5 do
55430: LD_ADDR_VAR 0 6
55434: PUSH
55435: DOUBLE
55436: LD_INT 0
55438: DEC
55439: ST_TO_ADDR
55440: LD_INT 5
55442: PUSH
55443: FOR_TO
55444: IFFALSE 55587
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55446: LD_ADDR_VAR 0 7
55450: PUSH
55451: LD_VAR 0 1
55455: PPUSH
55456: LD_VAR 0 6
55460: PPUSH
55461: LD_VAR 0 11
55465: PPUSH
55466: CALL_OW 272
55470: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55471: LD_ADDR_VAR 0 8
55475: PUSH
55476: LD_VAR 0 2
55480: PPUSH
55481: LD_VAR 0 6
55485: PPUSH
55486: LD_VAR 0 11
55490: PPUSH
55491: CALL_OW 273
55495: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55496: LD_VAR 0 7
55500: PPUSH
55501: LD_VAR 0 8
55505: PPUSH
55506: CALL_OW 488
55510: NOT
55511: IFFALSE 55515
// continue ;
55513: GO 55443
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55515: LD_ADDR_VAR 0 9
55519: PUSH
55520: LD_VAR 0 12
55524: PUSH
55525: LD_INT 1
55527: ARRAY
55528: PPUSH
55529: LD_VAR 0 12
55533: PUSH
55534: LD_INT 2
55536: ARRAY
55537: PPUSH
55538: LD_VAR 0 7
55542: PPUSH
55543: LD_VAR 0 8
55547: PPUSH
55548: CALL_OW 298
55552: ST_TO_ADDR
// if tmp < distance then
55553: LD_VAR 0 9
55557: PUSH
55558: LD_VAR 0 10
55562: LESS
55563: IFFALSE 55585
// begin result := i ;
55565: LD_ADDR_VAR 0 5
55569: PUSH
55570: LD_VAR 0 6
55574: ST_TO_ADDR
// distance := tmp ;
55575: LD_ADDR_VAR 0 10
55579: PUSH
55580: LD_VAR 0 9
55584: ST_TO_ADDR
// end ; end ;
55585: GO 55443
55587: POP
55588: POP
// end ;
55589: LD_VAR 0 5
55593: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55594: LD_INT 0
55596: PPUSH
55597: PPUSH
// if not driver or not IsInUnit ( driver ) then
55598: LD_VAR 0 1
55602: NOT
55603: PUSH
55604: LD_VAR 0 1
55608: PPUSH
55609: CALL_OW 310
55613: NOT
55614: OR
55615: IFFALSE 55619
// exit ;
55617: GO 55709
// vehicle := IsInUnit ( driver ) ;
55619: LD_ADDR_VAR 0 3
55623: PUSH
55624: LD_VAR 0 1
55628: PPUSH
55629: CALL_OW 310
55633: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55634: LD_VAR 0 1
55638: PPUSH
55639: LD_STRING \
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: PUSH
55669: LD_STRING E
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: LD_VAR 0 3
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PPUSH
55705: CALL_OW 446
// end ;
55709: LD_VAR 0 2
55713: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55714: LD_INT 0
55716: PPUSH
55717: PPUSH
// if not driver or not IsInUnit ( driver ) then
55718: LD_VAR 0 1
55722: NOT
55723: PUSH
55724: LD_VAR 0 1
55728: PPUSH
55729: CALL_OW 310
55733: NOT
55734: OR
55735: IFFALSE 55739
// exit ;
55737: GO 55829
// vehicle := IsInUnit ( driver ) ;
55739: LD_ADDR_VAR 0 3
55743: PUSH
55744: LD_VAR 0 1
55748: PPUSH
55749: CALL_OW 310
55753: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55754: LD_VAR 0 1
55758: PPUSH
55759: LD_STRING \
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: PUSH
55789: LD_STRING E
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_VAR 0 3
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PPUSH
55825: CALL_OW 447
// end ;
55829: LD_VAR 0 2
55833: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55834: LD_INT 0
55836: PPUSH
55837: PPUSH
55838: PPUSH
// tmp := [ ] ;
55839: LD_ADDR_VAR 0 5
55843: PUSH
55844: EMPTY
55845: ST_TO_ADDR
// for i in units do
55846: LD_ADDR_VAR 0 4
55850: PUSH
55851: LD_VAR 0 1
55855: PUSH
55856: FOR_IN
55857: IFFALSE 55895
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55859: LD_ADDR_VAR 0 5
55863: PUSH
55864: LD_VAR 0 5
55868: PPUSH
55869: LD_VAR 0 5
55873: PUSH
55874: LD_INT 1
55876: PLUS
55877: PPUSH
55878: LD_VAR 0 4
55882: PPUSH
55883: CALL_OW 256
55887: PPUSH
55888: CALL_OW 2
55892: ST_TO_ADDR
55893: GO 55856
55895: POP
55896: POP
// if not tmp then
55897: LD_VAR 0 5
55901: NOT
55902: IFFALSE 55906
// exit ;
55904: GO 55954
// if asc then
55906: LD_VAR 0 2
55910: IFFALSE 55934
// result := SortListByListAsc ( units , tmp ) else
55912: LD_ADDR_VAR 0 3
55916: PUSH
55917: LD_VAR 0 1
55921: PPUSH
55922: LD_VAR 0 5
55926: PPUSH
55927: CALL_OW 76
55931: ST_TO_ADDR
55932: GO 55954
// result := SortListByListDesc ( units , tmp ) ;
55934: LD_ADDR_VAR 0 3
55938: PUSH
55939: LD_VAR 0 1
55943: PPUSH
55944: LD_VAR 0 5
55948: PPUSH
55949: CALL_OW 77
55953: ST_TO_ADDR
// end ;
55954: LD_VAR 0 3
55958: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55959: LD_INT 0
55961: PPUSH
55962: PPUSH
// task := GetTaskList ( mech ) ;
55963: LD_ADDR_VAR 0 4
55967: PUSH
55968: LD_VAR 0 1
55972: PPUSH
55973: CALL_OW 437
55977: ST_TO_ADDR
// if not task then
55978: LD_VAR 0 4
55982: NOT
55983: IFFALSE 55987
// exit ;
55985: GO 56029
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55987: LD_ADDR_VAR 0 3
55991: PUSH
55992: LD_VAR 0 4
55996: PUSH
55997: LD_INT 1
55999: ARRAY
56000: PUSH
56001: LD_INT 1
56003: ARRAY
56004: PUSH
56005: LD_STRING r
56007: EQUAL
56008: PUSH
56009: LD_VAR 0 4
56013: PUSH
56014: LD_INT 1
56016: ARRAY
56017: PUSH
56018: LD_INT 4
56020: ARRAY
56021: PUSH
56022: LD_VAR 0 2
56026: EQUAL
56027: AND
56028: ST_TO_ADDR
// end ;
56029: LD_VAR 0 3
56033: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56034: LD_INT 0
56036: PPUSH
// SetDir ( unit , d ) ;
56037: LD_VAR 0 1
56041: PPUSH
56042: LD_VAR 0 4
56046: PPUSH
56047: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56051: LD_VAR 0 1
56055: PPUSH
56056: LD_VAR 0 2
56060: PPUSH
56061: LD_VAR 0 3
56065: PPUSH
56066: LD_VAR 0 5
56070: PPUSH
56071: CALL_OW 48
// end ;
56075: LD_VAR 0 6
56079: RET
// export function ToNaturalNumber ( number ) ; begin
56080: LD_INT 0
56082: PPUSH
// result := number div 1 ;
56083: LD_ADDR_VAR 0 2
56087: PUSH
56088: LD_VAR 0 1
56092: PUSH
56093: LD_INT 1
56095: DIV
56096: ST_TO_ADDR
// if number < 0 then
56097: LD_VAR 0 1
56101: PUSH
56102: LD_INT 0
56104: LESS
56105: IFFALSE 56115
// result := 0 ;
56107: LD_ADDR_VAR 0 2
56111: PUSH
56112: LD_INT 0
56114: ST_TO_ADDR
// end ;
56115: LD_VAR 0 2
56119: RET
// export function SortByClass ( units , class ) ; var un ; begin
56120: LD_INT 0
56122: PPUSH
56123: PPUSH
// if not units or not class then
56124: LD_VAR 0 1
56128: NOT
56129: PUSH
56130: LD_VAR 0 2
56134: NOT
56135: OR
56136: IFFALSE 56140
// exit ;
56138: GO 56235
// result := [ ] ;
56140: LD_ADDR_VAR 0 3
56144: PUSH
56145: EMPTY
56146: ST_TO_ADDR
// for un in units do
56147: LD_ADDR_VAR 0 4
56151: PUSH
56152: LD_VAR 0 1
56156: PUSH
56157: FOR_IN
56158: IFFALSE 56233
// if GetClass ( un ) = class then
56160: LD_VAR 0 4
56164: PPUSH
56165: CALL_OW 257
56169: PUSH
56170: LD_VAR 0 2
56174: EQUAL
56175: IFFALSE 56202
// result := Insert ( result , 1 , un ) else
56177: LD_ADDR_VAR 0 3
56181: PUSH
56182: LD_VAR 0 3
56186: PPUSH
56187: LD_INT 1
56189: PPUSH
56190: LD_VAR 0 4
56194: PPUSH
56195: CALL_OW 2
56199: ST_TO_ADDR
56200: GO 56231
// result := Replace ( result , result + 1 , un ) ;
56202: LD_ADDR_VAR 0 3
56206: PUSH
56207: LD_VAR 0 3
56211: PPUSH
56212: LD_VAR 0 3
56216: PUSH
56217: LD_INT 1
56219: PLUS
56220: PPUSH
56221: LD_VAR 0 4
56225: PPUSH
56226: CALL_OW 1
56230: ST_TO_ADDR
56231: GO 56157
56233: POP
56234: POP
// end ;
56235: LD_VAR 0 3
56239: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56240: LD_INT 0
56242: PPUSH
56243: PPUSH
56244: PPUSH
56245: PPUSH
56246: PPUSH
56247: PPUSH
56248: PPUSH
// result := [ ] ;
56249: LD_ADDR_VAR 0 4
56253: PUSH
56254: EMPTY
56255: ST_TO_ADDR
// if x - r < 0 then
56256: LD_VAR 0 1
56260: PUSH
56261: LD_VAR 0 3
56265: MINUS
56266: PUSH
56267: LD_INT 0
56269: LESS
56270: IFFALSE 56282
// min_x := 0 else
56272: LD_ADDR_VAR 0 8
56276: PUSH
56277: LD_INT 0
56279: ST_TO_ADDR
56280: GO 56298
// min_x := x - r ;
56282: LD_ADDR_VAR 0 8
56286: PUSH
56287: LD_VAR 0 1
56291: PUSH
56292: LD_VAR 0 3
56296: MINUS
56297: ST_TO_ADDR
// if y - r < 0 then
56298: LD_VAR 0 2
56302: PUSH
56303: LD_VAR 0 3
56307: MINUS
56308: PUSH
56309: LD_INT 0
56311: LESS
56312: IFFALSE 56324
// min_y := 0 else
56314: LD_ADDR_VAR 0 7
56318: PUSH
56319: LD_INT 0
56321: ST_TO_ADDR
56322: GO 56340
// min_y := y - r ;
56324: LD_ADDR_VAR 0 7
56328: PUSH
56329: LD_VAR 0 2
56333: PUSH
56334: LD_VAR 0 3
56338: MINUS
56339: ST_TO_ADDR
// max_x := x + r ;
56340: LD_ADDR_VAR 0 9
56344: PUSH
56345: LD_VAR 0 1
56349: PUSH
56350: LD_VAR 0 3
56354: PLUS
56355: ST_TO_ADDR
// max_y := y + r ;
56356: LD_ADDR_VAR 0 10
56360: PUSH
56361: LD_VAR 0 2
56365: PUSH
56366: LD_VAR 0 3
56370: PLUS
56371: ST_TO_ADDR
// for _x = min_x to max_x do
56372: LD_ADDR_VAR 0 5
56376: PUSH
56377: DOUBLE
56378: LD_VAR 0 8
56382: DEC
56383: ST_TO_ADDR
56384: LD_VAR 0 9
56388: PUSH
56389: FOR_TO
56390: IFFALSE 56491
// for _y = min_y to max_y do
56392: LD_ADDR_VAR 0 6
56396: PUSH
56397: DOUBLE
56398: LD_VAR 0 7
56402: DEC
56403: ST_TO_ADDR
56404: LD_VAR 0 10
56408: PUSH
56409: FOR_TO
56410: IFFALSE 56487
// begin if not ValidHex ( _x , _y ) then
56412: LD_VAR 0 5
56416: PPUSH
56417: LD_VAR 0 6
56421: PPUSH
56422: CALL_OW 488
56426: NOT
56427: IFFALSE 56431
// continue ;
56429: GO 56409
// if GetResourceTypeXY ( _x , _y ) then
56431: LD_VAR 0 5
56435: PPUSH
56436: LD_VAR 0 6
56440: PPUSH
56441: CALL_OW 283
56445: IFFALSE 56485
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56447: LD_ADDR_VAR 0 4
56451: PUSH
56452: LD_VAR 0 4
56456: PPUSH
56457: LD_VAR 0 4
56461: PUSH
56462: LD_INT 1
56464: PLUS
56465: PPUSH
56466: LD_VAR 0 5
56470: PUSH
56471: LD_VAR 0 6
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PPUSH
56480: CALL_OW 1
56484: ST_TO_ADDR
// end ;
56485: GO 56409
56487: POP
56488: POP
56489: GO 56389
56491: POP
56492: POP
// end ;
56493: LD_VAR 0 4
56497: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56498: LD_INT 0
56500: PPUSH
56501: PPUSH
56502: PPUSH
56503: PPUSH
56504: PPUSH
56505: PPUSH
56506: PPUSH
56507: PPUSH
// if not units then
56508: LD_VAR 0 1
56512: NOT
56513: IFFALSE 56517
// exit ;
56515: GO 57041
// result := UnitFilter ( units , [ f_ok ] ) ;
56517: LD_ADDR_VAR 0 3
56521: PUSH
56522: LD_VAR 0 1
56526: PPUSH
56527: LD_INT 50
56529: PUSH
56530: EMPTY
56531: LIST
56532: PPUSH
56533: CALL_OW 72
56537: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56538: LD_ADDR_VAR 0 8
56542: PUSH
56543: LD_VAR 0 1
56547: PUSH
56548: LD_INT 1
56550: ARRAY
56551: PPUSH
56552: CALL_OW 255
56556: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56557: LD_ADDR_VAR 0 10
56561: PUSH
56562: LD_INT 29
56564: PUSH
56565: LD_INT 91
56567: PUSH
56568: LD_INT 49
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: LIST
56575: ST_TO_ADDR
// if not result then
56576: LD_VAR 0 3
56580: NOT
56581: IFFALSE 56585
// exit ;
56583: GO 57041
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56585: LD_ADDR_VAR 0 5
56589: PUSH
56590: LD_INT 81
56592: PUSH
56593: LD_VAR 0 8
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PPUSH
56602: CALL_OW 69
56606: ST_TO_ADDR
// for i in result do
56607: LD_ADDR_VAR 0 4
56611: PUSH
56612: LD_VAR 0 3
56616: PUSH
56617: FOR_IN
56618: IFFALSE 57039
// begin tag := GetTag ( i ) + 1 ;
56620: LD_ADDR_VAR 0 9
56624: PUSH
56625: LD_VAR 0 4
56629: PPUSH
56630: CALL_OW 110
56634: PUSH
56635: LD_INT 1
56637: PLUS
56638: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56639: LD_ADDR_VAR 0 7
56643: PUSH
56644: LD_VAR 0 4
56648: PPUSH
56649: CALL_OW 250
56653: PPUSH
56654: LD_VAR 0 4
56658: PPUSH
56659: CALL_OW 251
56663: PPUSH
56664: LD_INT 6
56666: PPUSH
56667: CALL 56240 0 3
56671: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
56672: LD_VAR 0 4
56676: PPUSH
56677: CALL_OW 247
56681: PUSH
56682: LD_INT 2
56684: EQUAL
56685: PUSH
56686: LD_VAR 0 7
56690: AND
56691: PUSH
56692: LD_VAR 0 4
56696: PPUSH
56697: CALL_OW 264
56701: PUSH
56702: LD_VAR 0 10
56706: IN
56707: NOT
56708: AND
56709: IFFALSE 56748
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56711: LD_VAR 0 4
56715: PPUSH
56716: LD_VAR 0 7
56720: PUSH
56721: LD_INT 1
56723: ARRAY
56724: PUSH
56725: LD_INT 1
56727: ARRAY
56728: PPUSH
56729: LD_VAR 0 7
56733: PUSH
56734: LD_INT 1
56736: ARRAY
56737: PUSH
56738: LD_INT 2
56740: ARRAY
56741: PPUSH
56742: CALL_OW 116
56746: GO 57037
// if path > tag then
56748: LD_VAR 0 2
56752: PUSH
56753: LD_VAR 0 9
56757: GREATER
56758: IFFALSE 56966
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56760: LD_ADDR_VAR 0 6
56764: PUSH
56765: LD_VAR 0 5
56769: PPUSH
56770: LD_INT 91
56772: PUSH
56773: LD_VAR 0 4
56777: PUSH
56778: LD_INT 8
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: LIST
56785: PPUSH
56786: CALL_OW 72
56790: ST_TO_ADDR
// if nearEnemy then
56791: LD_VAR 0 6
56795: IFFALSE 56864
// begin if GetWeapon ( i ) = ru_time_lapser then
56797: LD_VAR 0 4
56801: PPUSH
56802: CALL_OW 264
56806: PUSH
56807: LD_INT 49
56809: EQUAL
56810: IFFALSE 56838
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56812: LD_VAR 0 4
56816: PPUSH
56817: LD_VAR 0 6
56821: PPUSH
56822: LD_VAR 0 4
56826: PPUSH
56827: CALL_OW 74
56831: PPUSH
56832: CALL_OW 112
56836: GO 56862
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56838: LD_VAR 0 4
56842: PPUSH
56843: LD_VAR 0 6
56847: PPUSH
56848: LD_VAR 0 4
56852: PPUSH
56853: CALL_OW 74
56857: PPUSH
56858: CALL_OW 115
// end else
56862: GO 56964
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56864: LD_VAR 0 4
56868: PPUSH
56869: LD_VAR 0 2
56873: PUSH
56874: LD_VAR 0 9
56878: ARRAY
56879: PUSH
56880: LD_INT 1
56882: ARRAY
56883: PPUSH
56884: LD_VAR 0 2
56888: PUSH
56889: LD_VAR 0 9
56893: ARRAY
56894: PUSH
56895: LD_INT 2
56897: ARRAY
56898: PPUSH
56899: CALL_OW 297
56903: PUSH
56904: LD_INT 6
56906: GREATER
56907: IFFALSE 56950
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56909: LD_VAR 0 4
56913: PPUSH
56914: LD_VAR 0 2
56918: PUSH
56919: LD_VAR 0 9
56923: ARRAY
56924: PUSH
56925: LD_INT 1
56927: ARRAY
56928: PPUSH
56929: LD_VAR 0 2
56933: PUSH
56934: LD_VAR 0 9
56938: ARRAY
56939: PUSH
56940: LD_INT 2
56942: ARRAY
56943: PPUSH
56944: CALL_OW 114
56948: GO 56964
// SetTag ( i , tag ) ;
56950: LD_VAR 0 4
56954: PPUSH
56955: LD_VAR 0 9
56959: PPUSH
56960: CALL_OW 109
// end else
56964: GO 57037
// if enemy then
56966: LD_VAR 0 5
56970: IFFALSE 57037
// begin if GetWeapon ( i ) = ru_time_lapser then
56972: LD_VAR 0 4
56976: PPUSH
56977: CALL_OW 264
56981: PUSH
56982: LD_INT 49
56984: EQUAL
56985: IFFALSE 57013
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56987: LD_VAR 0 4
56991: PPUSH
56992: LD_VAR 0 5
56996: PPUSH
56997: LD_VAR 0 4
57001: PPUSH
57002: CALL_OW 74
57006: PPUSH
57007: CALL_OW 112
57011: GO 57037
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57013: LD_VAR 0 4
57017: PPUSH
57018: LD_VAR 0 5
57022: PPUSH
57023: LD_VAR 0 4
57027: PPUSH
57028: CALL_OW 74
57032: PPUSH
57033: CALL_OW 115
// end ; end ;
57037: GO 56617
57039: POP
57040: POP
// end ;
57041: LD_VAR 0 3
57045: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57046: LD_INT 0
57048: PPUSH
57049: PPUSH
57050: PPUSH
// if not unit or IsInUnit ( unit ) then
57051: LD_VAR 0 1
57055: NOT
57056: PUSH
57057: LD_VAR 0 1
57061: PPUSH
57062: CALL_OW 310
57066: OR
57067: IFFALSE 57071
// exit ;
57069: GO 57162
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57071: LD_ADDR_VAR 0 4
57075: PUSH
57076: LD_VAR 0 1
57080: PPUSH
57081: CALL_OW 250
57085: PPUSH
57086: LD_VAR 0 2
57090: PPUSH
57091: LD_INT 1
57093: PPUSH
57094: CALL_OW 272
57098: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57099: LD_ADDR_VAR 0 5
57103: PUSH
57104: LD_VAR 0 1
57108: PPUSH
57109: CALL_OW 251
57113: PPUSH
57114: LD_VAR 0 2
57118: PPUSH
57119: LD_INT 1
57121: PPUSH
57122: CALL_OW 273
57126: ST_TO_ADDR
// if ValidHex ( x , y ) then
57127: LD_VAR 0 4
57131: PPUSH
57132: LD_VAR 0 5
57136: PPUSH
57137: CALL_OW 488
57141: IFFALSE 57162
// ComTurnXY ( unit , x , y ) ;
57143: LD_VAR 0 1
57147: PPUSH
57148: LD_VAR 0 4
57152: PPUSH
57153: LD_VAR 0 5
57157: PPUSH
57158: CALL_OW 118
// end ;
57162: LD_VAR 0 3
57166: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57167: LD_INT 0
57169: PPUSH
57170: PPUSH
// result := false ;
57171: LD_ADDR_VAR 0 3
57175: PUSH
57176: LD_INT 0
57178: ST_TO_ADDR
// if not units then
57179: LD_VAR 0 2
57183: NOT
57184: IFFALSE 57188
// exit ;
57186: GO 57233
// for i in units do
57188: LD_ADDR_VAR 0 4
57192: PUSH
57193: LD_VAR 0 2
57197: PUSH
57198: FOR_IN
57199: IFFALSE 57231
// if See ( side , i ) then
57201: LD_VAR 0 1
57205: PPUSH
57206: LD_VAR 0 4
57210: PPUSH
57211: CALL_OW 292
57215: IFFALSE 57229
// begin result := true ;
57217: LD_ADDR_VAR 0 3
57221: PUSH
57222: LD_INT 1
57224: ST_TO_ADDR
// exit ;
57225: POP
57226: POP
57227: GO 57233
// end ;
57229: GO 57198
57231: POP
57232: POP
// end ;
57233: LD_VAR 0 3
57237: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57238: LD_INT 0
57240: PPUSH
57241: PPUSH
57242: PPUSH
57243: PPUSH
// if not unit or not points then
57244: LD_VAR 0 1
57248: NOT
57249: PUSH
57250: LD_VAR 0 2
57254: NOT
57255: OR
57256: IFFALSE 57260
// exit ;
57258: GO 57350
// dist := 99999 ;
57260: LD_ADDR_VAR 0 5
57264: PUSH
57265: LD_INT 99999
57267: ST_TO_ADDR
// for i in points do
57268: LD_ADDR_VAR 0 4
57272: PUSH
57273: LD_VAR 0 2
57277: PUSH
57278: FOR_IN
57279: IFFALSE 57348
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57281: LD_ADDR_VAR 0 6
57285: PUSH
57286: LD_VAR 0 1
57290: PPUSH
57291: LD_VAR 0 4
57295: PUSH
57296: LD_INT 1
57298: ARRAY
57299: PPUSH
57300: LD_VAR 0 4
57304: PUSH
57305: LD_INT 2
57307: ARRAY
57308: PPUSH
57309: CALL_OW 297
57313: ST_TO_ADDR
// if tmpDist < dist then
57314: LD_VAR 0 6
57318: PUSH
57319: LD_VAR 0 5
57323: LESS
57324: IFFALSE 57346
// begin result := i ;
57326: LD_ADDR_VAR 0 3
57330: PUSH
57331: LD_VAR 0 4
57335: ST_TO_ADDR
// dist := tmpDist ;
57336: LD_ADDR_VAR 0 5
57340: PUSH
57341: LD_VAR 0 6
57345: ST_TO_ADDR
// end ; end ;
57346: GO 57278
57348: POP
57349: POP
// end ;
57350: LD_VAR 0 3
57354: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57355: LD_INT 0
57357: PPUSH
// uc_side := side ;
57358: LD_ADDR_OWVAR 20
57362: PUSH
57363: LD_VAR 0 1
57367: ST_TO_ADDR
// uc_nation := 3 ;
57368: LD_ADDR_OWVAR 21
57372: PUSH
57373: LD_INT 3
57375: ST_TO_ADDR
// vc_chassis := 25 ;
57376: LD_ADDR_OWVAR 37
57380: PUSH
57381: LD_INT 25
57383: ST_TO_ADDR
// vc_engine := engine_siberite ;
57384: LD_ADDR_OWVAR 39
57388: PUSH
57389: LD_INT 3
57391: ST_TO_ADDR
// vc_control := control_computer ;
57392: LD_ADDR_OWVAR 38
57396: PUSH
57397: LD_INT 3
57399: ST_TO_ADDR
// vc_weapon := 59 ;
57400: LD_ADDR_OWVAR 40
57404: PUSH
57405: LD_INT 59
57407: ST_TO_ADDR
// result := CreateVehicle ;
57408: LD_ADDR_VAR 0 5
57412: PUSH
57413: CALL_OW 45
57417: ST_TO_ADDR
// SetDir ( result , d ) ;
57418: LD_VAR 0 5
57422: PPUSH
57423: LD_VAR 0 4
57427: PPUSH
57428: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57432: LD_VAR 0 5
57436: PPUSH
57437: LD_VAR 0 2
57441: PPUSH
57442: LD_VAR 0 3
57446: PPUSH
57447: LD_INT 0
57449: PPUSH
57450: CALL_OW 48
// end ;
57454: LD_VAR 0 5
57458: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57459: LD_INT 0
57461: PPUSH
57462: PPUSH
57463: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57464: LD_ADDR_VAR 0 2
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57487: LD_VAR 0 1
57491: NOT
57492: PUSH
57493: LD_VAR 0 1
57497: PPUSH
57498: CALL_OW 264
57502: PUSH
57503: LD_INT 12
57505: PUSH
57506: LD_INT 51
57508: PUSH
57509: LD_INT 32
57511: PUSH
57512: LD_INT 89
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: IN
57521: NOT
57522: OR
57523: IFFALSE 57527
// exit ;
57525: GO 57625
// for i := 1 to 3 do
57527: LD_ADDR_VAR 0 3
57531: PUSH
57532: DOUBLE
57533: LD_INT 1
57535: DEC
57536: ST_TO_ADDR
57537: LD_INT 3
57539: PUSH
57540: FOR_TO
57541: IFFALSE 57623
// begin tmp := GetCargo ( cargo , i ) ;
57543: LD_ADDR_VAR 0 4
57547: PUSH
57548: LD_VAR 0 1
57552: PPUSH
57553: LD_VAR 0 3
57557: PPUSH
57558: CALL_OW 289
57562: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57563: LD_ADDR_VAR 0 2
57567: PUSH
57568: LD_VAR 0 2
57572: PPUSH
57573: LD_VAR 0 3
57577: PPUSH
57578: LD_VAR 0 4
57582: PPUSH
57583: CALL_OW 1
57587: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57588: LD_ADDR_VAR 0 2
57592: PUSH
57593: LD_VAR 0 2
57597: PPUSH
57598: LD_INT 4
57600: PPUSH
57601: LD_VAR 0 2
57605: PUSH
57606: LD_INT 4
57608: ARRAY
57609: PUSH
57610: LD_VAR 0 4
57614: PLUS
57615: PPUSH
57616: CALL_OW 1
57620: ST_TO_ADDR
// end ;
57621: GO 57540
57623: POP
57624: POP
// end ;
57625: LD_VAR 0 2
57629: RET
// export function Length ( array ) ; begin
57630: LD_INT 0
57632: PPUSH
// result := array + 0 ;
57633: LD_ADDR_VAR 0 2
57637: PUSH
57638: LD_VAR 0 1
57642: PUSH
57643: LD_INT 0
57645: PLUS
57646: ST_TO_ADDR
// end ;
57647: LD_VAR 0 2
57651: RET
// export function PrepareArray ( array ) ; begin
57652: LD_INT 0
57654: PPUSH
// result := array diff 0 ;
57655: LD_ADDR_VAR 0 2
57659: PUSH
57660: LD_VAR 0 1
57664: PUSH
57665: LD_INT 0
57667: DIFF
57668: ST_TO_ADDR
// if not result [ 1 ] then
57669: LD_VAR 0 2
57673: PUSH
57674: LD_INT 1
57676: ARRAY
57677: NOT
57678: IFFALSE 57698
// result := Delete ( result , 1 ) ;
57680: LD_ADDR_VAR 0 2
57684: PUSH
57685: LD_VAR 0 2
57689: PPUSH
57690: LD_INT 1
57692: PPUSH
57693: CALL_OW 3
57697: ST_TO_ADDR
// end ; end_of_file
57698: LD_VAR 0 2
57702: RET
// every 0 0$1 do
57703: GO 57705
57705: DISABLE
// begin enable ;
57706: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57707: LD_STRING updateTimer(
57709: PUSH
57710: LD_OWVAR 1
57714: STR
57715: PUSH
57716: LD_STRING );
57718: STR
57719: PPUSH
57720: CALL_OW 559
// end ;
57724: END
// export function SOS_MapStart ( ) ; begin
57725: LD_INT 0
57727: PPUSH
// if streamModeActive then
57728: LD_EXP 53
57732: IFFALSE 57741
// DefineStreamItems ( true ) ;
57734: LD_INT 1
57736: PPUSH
57737: CALL 59395 0 1
// UpdateFactoryWaypoints ( ) ;
57741: CALL 72256 0 0
// UpdateWarehouseGatheringPoints ( ) ;
57745: CALL 72513 0 0
// end ;
57749: LD_VAR 0 1
57753: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57754: LD_INT 0
57756: PPUSH
// if p2 = 100 then
57757: LD_VAR 0 2
57761: PUSH
57762: LD_INT 100
57764: EQUAL
57765: IFFALSE 58768
// begin if not StreamModeActive then
57767: LD_EXP 53
57771: NOT
57772: IFFALSE 57782
// StreamModeActive := true ;
57774: LD_ADDR_EXP 53
57778: PUSH
57779: LD_INT 1
57781: ST_TO_ADDR
// if p3 = 0 then
57782: LD_VAR 0 3
57786: PUSH
57787: LD_INT 0
57789: EQUAL
57790: IFFALSE 57796
// InitStreamMode ;
57792: CALL 58931 0 0
// if p3 = 1 then
57796: LD_VAR 0 3
57800: PUSH
57801: LD_INT 1
57803: EQUAL
57804: IFFALSE 57814
// sRocket := true ;
57806: LD_ADDR_EXP 58
57810: PUSH
57811: LD_INT 1
57813: ST_TO_ADDR
// if p3 = 2 then
57814: LD_VAR 0 3
57818: PUSH
57819: LD_INT 2
57821: EQUAL
57822: IFFALSE 57832
// sSpeed := true ;
57824: LD_ADDR_EXP 57
57828: PUSH
57829: LD_INT 1
57831: ST_TO_ADDR
// if p3 = 3 then
57832: LD_VAR 0 3
57836: PUSH
57837: LD_INT 3
57839: EQUAL
57840: IFFALSE 57850
// sEngine := true ;
57842: LD_ADDR_EXP 59
57846: PUSH
57847: LD_INT 1
57849: ST_TO_ADDR
// if p3 = 4 then
57850: LD_VAR 0 3
57854: PUSH
57855: LD_INT 4
57857: EQUAL
57858: IFFALSE 57868
// sSpec := true ;
57860: LD_ADDR_EXP 56
57864: PUSH
57865: LD_INT 1
57867: ST_TO_ADDR
// if p3 = 5 then
57868: LD_VAR 0 3
57872: PUSH
57873: LD_INT 5
57875: EQUAL
57876: IFFALSE 57886
// sLevel := true ;
57878: LD_ADDR_EXP 60
57882: PUSH
57883: LD_INT 1
57885: ST_TO_ADDR
// if p3 = 6 then
57886: LD_VAR 0 3
57890: PUSH
57891: LD_INT 6
57893: EQUAL
57894: IFFALSE 57904
// sArmoury := true ;
57896: LD_ADDR_EXP 61
57900: PUSH
57901: LD_INT 1
57903: ST_TO_ADDR
// if p3 = 7 then
57904: LD_VAR 0 3
57908: PUSH
57909: LD_INT 7
57911: EQUAL
57912: IFFALSE 57922
// sRadar := true ;
57914: LD_ADDR_EXP 62
57918: PUSH
57919: LD_INT 1
57921: ST_TO_ADDR
// if p3 = 8 then
57922: LD_VAR 0 3
57926: PUSH
57927: LD_INT 8
57929: EQUAL
57930: IFFALSE 57940
// sBunker := true ;
57932: LD_ADDR_EXP 63
57936: PUSH
57937: LD_INT 1
57939: ST_TO_ADDR
// if p3 = 9 then
57940: LD_VAR 0 3
57944: PUSH
57945: LD_INT 9
57947: EQUAL
57948: IFFALSE 57958
// sHack := true ;
57950: LD_ADDR_EXP 64
57954: PUSH
57955: LD_INT 1
57957: ST_TO_ADDR
// if p3 = 10 then
57958: LD_VAR 0 3
57962: PUSH
57963: LD_INT 10
57965: EQUAL
57966: IFFALSE 57976
// sFire := true ;
57968: LD_ADDR_EXP 65
57972: PUSH
57973: LD_INT 1
57975: ST_TO_ADDR
// if p3 = 11 then
57976: LD_VAR 0 3
57980: PUSH
57981: LD_INT 11
57983: EQUAL
57984: IFFALSE 57994
// sRefresh := true ;
57986: LD_ADDR_EXP 66
57990: PUSH
57991: LD_INT 1
57993: ST_TO_ADDR
// if p3 = 12 then
57994: LD_VAR 0 3
57998: PUSH
57999: LD_INT 12
58001: EQUAL
58002: IFFALSE 58012
// sExp := true ;
58004: LD_ADDR_EXP 67
58008: PUSH
58009: LD_INT 1
58011: ST_TO_ADDR
// if p3 = 13 then
58012: LD_VAR 0 3
58016: PUSH
58017: LD_INT 13
58019: EQUAL
58020: IFFALSE 58030
// sDepot := true ;
58022: LD_ADDR_EXP 68
58026: PUSH
58027: LD_INT 1
58029: ST_TO_ADDR
// if p3 = 14 then
58030: LD_VAR 0 3
58034: PUSH
58035: LD_INT 14
58037: EQUAL
58038: IFFALSE 58048
// sFlag := true ;
58040: LD_ADDR_EXP 69
58044: PUSH
58045: LD_INT 1
58047: ST_TO_ADDR
// if p3 = 15 then
58048: LD_VAR 0 3
58052: PUSH
58053: LD_INT 15
58055: EQUAL
58056: IFFALSE 58066
// sKamikadze := true ;
58058: LD_ADDR_EXP 77
58062: PUSH
58063: LD_INT 1
58065: ST_TO_ADDR
// if p3 = 16 then
58066: LD_VAR 0 3
58070: PUSH
58071: LD_INT 16
58073: EQUAL
58074: IFFALSE 58084
// sTroll := true ;
58076: LD_ADDR_EXP 78
58080: PUSH
58081: LD_INT 1
58083: ST_TO_ADDR
// if p3 = 17 then
58084: LD_VAR 0 3
58088: PUSH
58089: LD_INT 17
58091: EQUAL
58092: IFFALSE 58102
// sSlow := true ;
58094: LD_ADDR_EXP 79
58098: PUSH
58099: LD_INT 1
58101: ST_TO_ADDR
// if p3 = 18 then
58102: LD_VAR 0 3
58106: PUSH
58107: LD_INT 18
58109: EQUAL
58110: IFFALSE 58120
// sLack := true ;
58112: LD_ADDR_EXP 80
58116: PUSH
58117: LD_INT 1
58119: ST_TO_ADDR
// if p3 = 19 then
58120: LD_VAR 0 3
58124: PUSH
58125: LD_INT 19
58127: EQUAL
58128: IFFALSE 58138
// sTank := true ;
58130: LD_ADDR_EXP 82
58134: PUSH
58135: LD_INT 1
58137: ST_TO_ADDR
// if p3 = 20 then
58138: LD_VAR 0 3
58142: PUSH
58143: LD_INT 20
58145: EQUAL
58146: IFFALSE 58156
// sRemote := true ;
58148: LD_ADDR_EXP 83
58152: PUSH
58153: LD_INT 1
58155: ST_TO_ADDR
// if p3 = 21 then
58156: LD_VAR 0 3
58160: PUSH
58161: LD_INT 21
58163: EQUAL
58164: IFFALSE 58174
// sPowell := true ;
58166: LD_ADDR_EXP 84
58170: PUSH
58171: LD_INT 1
58173: ST_TO_ADDR
// if p3 = 22 then
58174: LD_VAR 0 3
58178: PUSH
58179: LD_INT 22
58181: EQUAL
58182: IFFALSE 58192
// sTeleport := true ;
58184: LD_ADDR_EXP 87
58188: PUSH
58189: LD_INT 1
58191: ST_TO_ADDR
// if p3 = 23 then
58192: LD_VAR 0 3
58196: PUSH
58197: LD_INT 23
58199: EQUAL
58200: IFFALSE 58210
// sOilTower := true ;
58202: LD_ADDR_EXP 89
58206: PUSH
58207: LD_INT 1
58209: ST_TO_ADDR
// if p3 = 24 then
58210: LD_VAR 0 3
58214: PUSH
58215: LD_INT 24
58217: EQUAL
58218: IFFALSE 58228
// sShovel := true ;
58220: LD_ADDR_EXP 90
58224: PUSH
58225: LD_INT 1
58227: ST_TO_ADDR
// if p3 = 25 then
58228: LD_VAR 0 3
58232: PUSH
58233: LD_INT 25
58235: EQUAL
58236: IFFALSE 58246
// sSheik := true ;
58238: LD_ADDR_EXP 91
58242: PUSH
58243: LD_INT 1
58245: ST_TO_ADDR
// if p3 = 26 then
58246: LD_VAR 0 3
58250: PUSH
58251: LD_INT 26
58253: EQUAL
58254: IFFALSE 58264
// sEarthquake := true ;
58256: LD_ADDR_EXP 93
58260: PUSH
58261: LD_INT 1
58263: ST_TO_ADDR
// if p3 = 27 then
58264: LD_VAR 0 3
58268: PUSH
58269: LD_INT 27
58271: EQUAL
58272: IFFALSE 58282
// sAI := true ;
58274: LD_ADDR_EXP 94
58278: PUSH
58279: LD_INT 1
58281: ST_TO_ADDR
// if p3 = 28 then
58282: LD_VAR 0 3
58286: PUSH
58287: LD_INT 28
58289: EQUAL
58290: IFFALSE 58300
// sCargo := true ;
58292: LD_ADDR_EXP 97
58296: PUSH
58297: LD_INT 1
58299: ST_TO_ADDR
// if p3 = 29 then
58300: LD_VAR 0 3
58304: PUSH
58305: LD_INT 29
58307: EQUAL
58308: IFFALSE 58318
// sDLaser := true ;
58310: LD_ADDR_EXP 98
58314: PUSH
58315: LD_INT 1
58317: ST_TO_ADDR
// if p3 = 30 then
58318: LD_VAR 0 3
58322: PUSH
58323: LD_INT 30
58325: EQUAL
58326: IFFALSE 58336
// sExchange := true ;
58328: LD_ADDR_EXP 99
58332: PUSH
58333: LD_INT 1
58335: ST_TO_ADDR
// if p3 = 31 then
58336: LD_VAR 0 3
58340: PUSH
58341: LD_INT 31
58343: EQUAL
58344: IFFALSE 58354
// sFac := true ;
58346: LD_ADDR_EXP 100
58350: PUSH
58351: LD_INT 1
58353: ST_TO_ADDR
// if p3 = 32 then
58354: LD_VAR 0 3
58358: PUSH
58359: LD_INT 32
58361: EQUAL
58362: IFFALSE 58372
// sPower := true ;
58364: LD_ADDR_EXP 101
58368: PUSH
58369: LD_INT 1
58371: ST_TO_ADDR
// if p3 = 33 then
58372: LD_VAR 0 3
58376: PUSH
58377: LD_INT 33
58379: EQUAL
58380: IFFALSE 58390
// sRandom := true ;
58382: LD_ADDR_EXP 102
58386: PUSH
58387: LD_INT 1
58389: ST_TO_ADDR
// if p3 = 34 then
58390: LD_VAR 0 3
58394: PUSH
58395: LD_INT 34
58397: EQUAL
58398: IFFALSE 58408
// sShield := true ;
58400: LD_ADDR_EXP 103
58404: PUSH
58405: LD_INT 1
58407: ST_TO_ADDR
// if p3 = 35 then
58408: LD_VAR 0 3
58412: PUSH
58413: LD_INT 35
58415: EQUAL
58416: IFFALSE 58426
// sTime := true ;
58418: LD_ADDR_EXP 104
58422: PUSH
58423: LD_INT 1
58425: ST_TO_ADDR
// if p3 = 36 then
58426: LD_VAR 0 3
58430: PUSH
58431: LD_INT 36
58433: EQUAL
58434: IFFALSE 58444
// sTools := true ;
58436: LD_ADDR_EXP 105
58440: PUSH
58441: LD_INT 1
58443: ST_TO_ADDR
// if p3 = 101 then
58444: LD_VAR 0 3
58448: PUSH
58449: LD_INT 101
58451: EQUAL
58452: IFFALSE 58462
// sSold := true ;
58454: LD_ADDR_EXP 70
58458: PUSH
58459: LD_INT 1
58461: ST_TO_ADDR
// if p3 = 102 then
58462: LD_VAR 0 3
58466: PUSH
58467: LD_INT 102
58469: EQUAL
58470: IFFALSE 58480
// sDiff := true ;
58472: LD_ADDR_EXP 71
58476: PUSH
58477: LD_INT 1
58479: ST_TO_ADDR
// if p3 = 103 then
58480: LD_VAR 0 3
58484: PUSH
58485: LD_INT 103
58487: EQUAL
58488: IFFALSE 58498
// sFog := true ;
58490: LD_ADDR_EXP 74
58494: PUSH
58495: LD_INT 1
58497: ST_TO_ADDR
// if p3 = 104 then
58498: LD_VAR 0 3
58502: PUSH
58503: LD_INT 104
58505: EQUAL
58506: IFFALSE 58516
// sReset := true ;
58508: LD_ADDR_EXP 75
58512: PUSH
58513: LD_INT 1
58515: ST_TO_ADDR
// if p3 = 105 then
58516: LD_VAR 0 3
58520: PUSH
58521: LD_INT 105
58523: EQUAL
58524: IFFALSE 58534
// sSun := true ;
58526: LD_ADDR_EXP 76
58530: PUSH
58531: LD_INT 1
58533: ST_TO_ADDR
// if p3 = 106 then
58534: LD_VAR 0 3
58538: PUSH
58539: LD_INT 106
58541: EQUAL
58542: IFFALSE 58552
// sTiger := true ;
58544: LD_ADDR_EXP 72
58548: PUSH
58549: LD_INT 1
58551: ST_TO_ADDR
// if p3 = 107 then
58552: LD_VAR 0 3
58556: PUSH
58557: LD_INT 107
58559: EQUAL
58560: IFFALSE 58570
// sBomb := true ;
58562: LD_ADDR_EXP 73
58566: PUSH
58567: LD_INT 1
58569: ST_TO_ADDR
// if p3 = 108 then
58570: LD_VAR 0 3
58574: PUSH
58575: LD_INT 108
58577: EQUAL
58578: IFFALSE 58588
// sWound := true ;
58580: LD_ADDR_EXP 81
58584: PUSH
58585: LD_INT 1
58587: ST_TO_ADDR
// if p3 = 109 then
58588: LD_VAR 0 3
58592: PUSH
58593: LD_INT 109
58595: EQUAL
58596: IFFALSE 58606
// sBetray := true ;
58598: LD_ADDR_EXP 85
58602: PUSH
58603: LD_INT 1
58605: ST_TO_ADDR
// if p3 = 110 then
58606: LD_VAR 0 3
58610: PUSH
58611: LD_INT 110
58613: EQUAL
58614: IFFALSE 58624
// sContamin := true ;
58616: LD_ADDR_EXP 86
58620: PUSH
58621: LD_INT 1
58623: ST_TO_ADDR
// if p3 = 111 then
58624: LD_VAR 0 3
58628: PUSH
58629: LD_INT 111
58631: EQUAL
58632: IFFALSE 58642
// sOil := true ;
58634: LD_ADDR_EXP 88
58638: PUSH
58639: LD_INT 1
58641: ST_TO_ADDR
// if p3 = 112 then
58642: LD_VAR 0 3
58646: PUSH
58647: LD_INT 112
58649: EQUAL
58650: IFFALSE 58660
// sStu := true ;
58652: LD_ADDR_EXP 92
58656: PUSH
58657: LD_INT 1
58659: ST_TO_ADDR
// if p3 = 113 then
58660: LD_VAR 0 3
58664: PUSH
58665: LD_INT 113
58667: EQUAL
58668: IFFALSE 58678
// sBazooka := true ;
58670: LD_ADDR_EXP 95
58674: PUSH
58675: LD_INT 1
58677: ST_TO_ADDR
// if p3 = 114 then
58678: LD_VAR 0 3
58682: PUSH
58683: LD_INT 114
58685: EQUAL
58686: IFFALSE 58696
// sMortar := true ;
58688: LD_ADDR_EXP 96
58692: PUSH
58693: LD_INT 1
58695: ST_TO_ADDR
// if p3 = 115 then
58696: LD_VAR 0 3
58700: PUSH
58701: LD_INT 115
58703: EQUAL
58704: IFFALSE 58714
// sRanger := true ;
58706: LD_ADDR_EXP 106
58710: PUSH
58711: LD_INT 1
58713: ST_TO_ADDR
// if p3 = 116 then
58714: LD_VAR 0 3
58718: PUSH
58719: LD_INT 116
58721: EQUAL
58722: IFFALSE 58732
// sComputer := true ;
58724: LD_ADDR_EXP 107
58728: PUSH
58729: LD_INT 1
58731: ST_TO_ADDR
// if p3 = 117 then
58732: LD_VAR 0 3
58736: PUSH
58737: LD_INT 117
58739: EQUAL
58740: IFFALSE 58750
// s30 := true ;
58742: LD_ADDR_EXP 108
58746: PUSH
58747: LD_INT 1
58749: ST_TO_ADDR
// if p3 = 118 then
58750: LD_VAR 0 3
58754: PUSH
58755: LD_INT 118
58757: EQUAL
58758: IFFALSE 58768
// s60 := true ;
58760: LD_ADDR_EXP 109
58764: PUSH
58765: LD_INT 1
58767: ST_TO_ADDR
// end ; if p2 = 101 then
58768: LD_VAR 0 2
58772: PUSH
58773: LD_INT 101
58775: EQUAL
58776: IFFALSE 58904
// begin case p3 of 1 :
58778: LD_VAR 0 3
58782: PUSH
58783: LD_INT 1
58785: DOUBLE
58786: EQUAL
58787: IFTRUE 58791
58789: GO 58798
58791: POP
// hHackUnlimitedResources ; 2 :
58792: CALL 71002 0 0
58796: GO 58904
58798: LD_INT 2
58800: DOUBLE
58801: EQUAL
58802: IFTRUE 58806
58804: GO 58813
58806: POP
// hHackSetLevel10 ; 3 :
58807: CALL 71135 0 0
58811: GO 58904
58813: LD_INT 3
58815: DOUBLE
58816: EQUAL
58817: IFTRUE 58821
58819: GO 58828
58821: POP
// hHackSetLevel10YourUnits ; 4 :
58822: CALL 71220 0 0
58826: GO 58904
58828: LD_INT 4
58830: DOUBLE
58831: EQUAL
58832: IFTRUE 58836
58834: GO 58843
58836: POP
// hHackInvincible ; 5 :
58837: CALL 71668 0 0
58841: GO 58904
58843: LD_INT 5
58845: DOUBLE
58846: EQUAL
58847: IFTRUE 58851
58849: GO 58858
58851: POP
// hHackInvisible ; 6 :
58852: CALL 71779 0 0
58856: GO 58904
58858: LD_INT 6
58860: DOUBLE
58861: EQUAL
58862: IFTRUE 58866
58864: GO 58873
58866: POP
// hHackChangeYourSide ; 7 :
58867: CALL 71836 0 0
58871: GO 58904
58873: LD_INT 7
58875: DOUBLE
58876: EQUAL
58877: IFTRUE 58881
58879: GO 58888
58881: POP
// hHackChangeUnitSide ; 8 :
58882: CALL 71878 0 0
58886: GO 58904
58888: LD_INT 8
58890: DOUBLE
58891: EQUAL
58892: IFTRUE 58896
58894: GO 58903
58896: POP
// hHackFog ; end ;
58897: CALL 71979 0 0
58901: GO 58904
58903: POP
// end ; end ;
58904: LD_VAR 0 7
58908: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
58909: GO 58911
58911: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
58912: LD_STRING initStreamRollete();
58914: PPUSH
58915: CALL_OW 559
// InitStreamMode ;
58919: CALL 58931 0 0
// DefineStreamItems ( false ) ;
58923: LD_INT 0
58925: PPUSH
58926: CALL 59395 0 1
// end ;
58930: END
// function InitStreamMode ; begin
58931: LD_INT 0
58933: PPUSH
// streamModeActive := false ;
58934: LD_ADDR_EXP 53
58938: PUSH
58939: LD_INT 0
58941: ST_TO_ADDR
// normalCounter := 36 ;
58942: LD_ADDR_EXP 54
58946: PUSH
58947: LD_INT 36
58949: ST_TO_ADDR
// hardcoreCounter := 18 ;
58950: LD_ADDR_EXP 55
58954: PUSH
58955: LD_INT 18
58957: ST_TO_ADDR
// sRocket := false ;
58958: LD_ADDR_EXP 58
58962: PUSH
58963: LD_INT 0
58965: ST_TO_ADDR
// sSpeed := false ;
58966: LD_ADDR_EXP 57
58970: PUSH
58971: LD_INT 0
58973: ST_TO_ADDR
// sEngine := false ;
58974: LD_ADDR_EXP 59
58978: PUSH
58979: LD_INT 0
58981: ST_TO_ADDR
// sSpec := false ;
58982: LD_ADDR_EXP 56
58986: PUSH
58987: LD_INT 0
58989: ST_TO_ADDR
// sLevel := false ;
58990: LD_ADDR_EXP 60
58994: PUSH
58995: LD_INT 0
58997: ST_TO_ADDR
// sArmoury := false ;
58998: LD_ADDR_EXP 61
59002: PUSH
59003: LD_INT 0
59005: ST_TO_ADDR
// sRadar := false ;
59006: LD_ADDR_EXP 62
59010: PUSH
59011: LD_INT 0
59013: ST_TO_ADDR
// sBunker := false ;
59014: LD_ADDR_EXP 63
59018: PUSH
59019: LD_INT 0
59021: ST_TO_ADDR
// sHack := false ;
59022: LD_ADDR_EXP 64
59026: PUSH
59027: LD_INT 0
59029: ST_TO_ADDR
// sFire := false ;
59030: LD_ADDR_EXP 65
59034: PUSH
59035: LD_INT 0
59037: ST_TO_ADDR
// sRefresh := false ;
59038: LD_ADDR_EXP 66
59042: PUSH
59043: LD_INT 0
59045: ST_TO_ADDR
// sExp := false ;
59046: LD_ADDR_EXP 67
59050: PUSH
59051: LD_INT 0
59053: ST_TO_ADDR
// sDepot := false ;
59054: LD_ADDR_EXP 68
59058: PUSH
59059: LD_INT 0
59061: ST_TO_ADDR
// sFlag := false ;
59062: LD_ADDR_EXP 69
59066: PUSH
59067: LD_INT 0
59069: ST_TO_ADDR
// sKamikadze := false ;
59070: LD_ADDR_EXP 77
59074: PUSH
59075: LD_INT 0
59077: ST_TO_ADDR
// sTroll := false ;
59078: LD_ADDR_EXP 78
59082: PUSH
59083: LD_INT 0
59085: ST_TO_ADDR
// sSlow := false ;
59086: LD_ADDR_EXP 79
59090: PUSH
59091: LD_INT 0
59093: ST_TO_ADDR
// sLack := false ;
59094: LD_ADDR_EXP 80
59098: PUSH
59099: LD_INT 0
59101: ST_TO_ADDR
// sTank := false ;
59102: LD_ADDR_EXP 82
59106: PUSH
59107: LD_INT 0
59109: ST_TO_ADDR
// sRemote := false ;
59110: LD_ADDR_EXP 83
59114: PUSH
59115: LD_INT 0
59117: ST_TO_ADDR
// sPowell := false ;
59118: LD_ADDR_EXP 84
59122: PUSH
59123: LD_INT 0
59125: ST_TO_ADDR
// sTeleport := false ;
59126: LD_ADDR_EXP 87
59130: PUSH
59131: LD_INT 0
59133: ST_TO_ADDR
// sOilTower := false ;
59134: LD_ADDR_EXP 89
59138: PUSH
59139: LD_INT 0
59141: ST_TO_ADDR
// sShovel := false ;
59142: LD_ADDR_EXP 90
59146: PUSH
59147: LD_INT 0
59149: ST_TO_ADDR
// sSheik := false ;
59150: LD_ADDR_EXP 91
59154: PUSH
59155: LD_INT 0
59157: ST_TO_ADDR
// sEarthquake := false ;
59158: LD_ADDR_EXP 93
59162: PUSH
59163: LD_INT 0
59165: ST_TO_ADDR
// sAI := false ;
59166: LD_ADDR_EXP 94
59170: PUSH
59171: LD_INT 0
59173: ST_TO_ADDR
// sCargo := false ;
59174: LD_ADDR_EXP 97
59178: PUSH
59179: LD_INT 0
59181: ST_TO_ADDR
// sDLaser := false ;
59182: LD_ADDR_EXP 98
59186: PUSH
59187: LD_INT 0
59189: ST_TO_ADDR
// sExchange := false ;
59190: LD_ADDR_EXP 99
59194: PUSH
59195: LD_INT 0
59197: ST_TO_ADDR
// sFac := false ;
59198: LD_ADDR_EXP 100
59202: PUSH
59203: LD_INT 0
59205: ST_TO_ADDR
// sPower := false ;
59206: LD_ADDR_EXP 101
59210: PUSH
59211: LD_INT 0
59213: ST_TO_ADDR
// sRandom := false ;
59214: LD_ADDR_EXP 102
59218: PUSH
59219: LD_INT 0
59221: ST_TO_ADDR
// sShield := false ;
59222: LD_ADDR_EXP 103
59226: PUSH
59227: LD_INT 0
59229: ST_TO_ADDR
// sTime := false ;
59230: LD_ADDR_EXP 104
59234: PUSH
59235: LD_INT 0
59237: ST_TO_ADDR
// sTools := false ;
59238: LD_ADDR_EXP 105
59242: PUSH
59243: LD_INT 0
59245: ST_TO_ADDR
// sSold := false ;
59246: LD_ADDR_EXP 70
59250: PUSH
59251: LD_INT 0
59253: ST_TO_ADDR
// sDiff := false ;
59254: LD_ADDR_EXP 71
59258: PUSH
59259: LD_INT 0
59261: ST_TO_ADDR
// sFog := false ;
59262: LD_ADDR_EXP 74
59266: PUSH
59267: LD_INT 0
59269: ST_TO_ADDR
// sReset := false ;
59270: LD_ADDR_EXP 75
59274: PUSH
59275: LD_INT 0
59277: ST_TO_ADDR
// sSun := false ;
59278: LD_ADDR_EXP 76
59282: PUSH
59283: LD_INT 0
59285: ST_TO_ADDR
// sTiger := false ;
59286: LD_ADDR_EXP 72
59290: PUSH
59291: LD_INT 0
59293: ST_TO_ADDR
// sBomb := false ;
59294: LD_ADDR_EXP 73
59298: PUSH
59299: LD_INT 0
59301: ST_TO_ADDR
// sWound := false ;
59302: LD_ADDR_EXP 81
59306: PUSH
59307: LD_INT 0
59309: ST_TO_ADDR
// sBetray := false ;
59310: LD_ADDR_EXP 85
59314: PUSH
59315: LD_INT 0
59317: ST_TO_ADDR
// sContamin := false ;
59318: LD_ADDR_EXP 86
59322: PUSH
59323: LD_INT 0
59325: ST_TO_ADDR
// sOil := false ;
59326: LD_ADDR_EXP 88
59330: PUSH
59331: LD_INT 0
59333: ST_TO_ADDR
// sStu := false ;
59334: LD_ADDR_EXP 92
59338: PUSH
59339: LD_INT 0
59341: ST_TO_ADDR
// sBazooka := false ;
59342: LD_ADDR_EXP 95
59346: PUSH
59347: LD_INT 0
59349: ST_TO_ADDR
// sMortar := false ;
59350: LD_ADDR_EXP 96
59354: PUSH
59355: LD_INT 0
59357: ST_TO_ADDR
// sRanger := false ;
59358: LD_ADDR_EXP 106
59362: PUSH
59363: LD_INT 0
59365: ST_TO_ADDR
// sComputer := false ;
59366: LD_ADDR_EXP 107
59370: PUSH
59371: LD_INT 0
59373: ST_TO_ADDR
// s30 := false ;
59374: LD_ADDR_EXP 108
59378: PUSH
59379: LD_INT 0
59381: ST_TO_ADDR
// s60 := false ;
59382: LD_ADDR_EXP 109
59386: PUSH
59387: LD_INT 0
59389: ST_TO_ADDR
// end ;
59390: LD_VAR 0 1
59394: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59395: LD_INT 0
59397: PPUSH
59398: PPUSH
59399: PPUSH
59400: PPUSH
59401: PPUSH
59402: PPUSH
59403: PPUSH
// result := [ ] ;
59404: LD_ADDR_VAR 0 2
59408: PUSH
59409: EMPTY
59410: ST_TO_ADDR
// if campaign_id = 1 then
59411: LD_OWVAR 69
59415: PUSH
59416: LD_INT 1
59418: EQUAL
59419: IFFALSE 62585
// begin case mission_number of 1 :
59421: LD_OWVAR 70
59425: PUSH
59426: LD_INT 1
59428: DOUBLE
59429: EQUAL
59430: IFTRUE 59434
59432: GO 59510
59434: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59435: LD_ADDR_VAR 0 2
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 4
59445: PUSH
59446: LD_INT 11
59448: PUSH
59449: LD_INT 12
59451: PUSH
59452: LD_INT 15
59454: PUSH
59455: LD_INT 16
59457: PUSH
59458: LD_INT 22
59460: PUSH
59461: LD_INT 23
59463: PUSH
59464: LD_INT 26
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 101
59480: PUSH
59481: LD_INT 102
59483: PUSH
59484: LD_INT 106
59486: PUSH
59487: LD_INT 116
59489: PUSH
59490: LD_INT 117
59492: PUSH
59493: LD_INT 118
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: ST_TO_ADDR
59508: GO 62583
59510: LD_INT 2
59512: DOUBLE
59513: EQUAL
59514: IFTRUE 59518
59516: GO 59602
59518: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59519: LD_ADDR_VAR 0 2
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: LD_INT 4
59529: PUSH
59530: LD_INT 11
59532: PUSH
59533: LD_INT 12
59535: PUSH
59536: LD_INT 15
59538: PUSH
59539: LD_INT 16
59541: PUSH
59542: LD_INT 22
59544: PUSH
59545: LD_INT 23
59547: PUSH
59548: LD_INT 26
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 101
59564: PUSH
59565: LD_INT 102
59567: PUSH
59568: LD_INT 105
59570: PUSH
59571: LD_INT 106
59573: PUSH
59574: LD_INT 108
59576: PUSH
59577: LD_INT 116
59579: PUSH
59580: LD_INT 117
59582: PUSH
59583: LD_INT 118
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: ST_TO_ADDR
59600: GO 62583
59602: LD_INT 3
59604: DOUBLE
59605: EQUAL
59606: IFTRUE 59610
59608: GO 59698
59610: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
59611: LD_ADDR_VAR 0 2
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: LD_INT 4
59621: PUSH
59622: LD_INT 5
59624: PUSH
59625: LD_INT 11
59627: PUSH
59628: LD_INT 12
59630: PUSH
59631: LD_INT 15
59633: PUSH
59634: LD_INT 16
59636: PUSH
59637: LD_INT 22
59639: PUSH
59640: LD_INT 26
59642: PUSH
59643: LD_INT 36
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 101
59660: PUSH
59661: LD_INT 102
59663: PUSH
59664: LD_INT 105
59666: PUSH
59667: LD_INT 106
59669: PUSH
59670: LD_INT 108
59672: PUSH
59673: LD_INT 116
59675: PUSH
59676: LD_INT 117
59678: PUSH
59679: LD_INT 118
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: ST_TO_ADDR
59696: GO 62583
59698: LD_INT 4
59700: DOUBLE
59701: EQUAL
59702: IFTRUE 59706
59704: GO 59802
59706: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
59707: LD_ADDR_VAR 0 2
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: LD_INT 4
59717: PUSH
59718: LD_INT 5
59720: PUSH
59721: LD_INT 8
59723: PUSH
59724: LD_INT 11
59726: PUSH
59727: LD_INT 12
59729: PUSH
59730: LD_INT 15
59732: PUSH
59733: LD_INT 16
59735: PUSH
59736: LD_INT 22
59738: PUSH
59739: LD_INT 23
59741: PUSH
59742: LD_INT 26
59744: PUSH
59745: LD_INT 36
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 101
59764: PUSH
59765: LD_INT 102
59767: PUSH
59768: LD_INT 105
59770: PUSH
59771: LD_INT 106
59773: PUSH
59774: LD_INT 108
59776: PUSH
59777: LD_INT 116
59779: PUSH
59780: LD_INT 117
59782: PUSH
59783: LD_INT 118
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: ST_TO_ADDR
59800: GO 62583
59802: LD_INT 5
59804: DOUBLE
59805: EQUAL
59806: IFTRUE 59810
59808: GO 59922
59810: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
59811: LD_ADDR_VAR 0 2
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: LD_INT 4
59821: PUSH
59822: LD_INT 5
59824: PUSH
59825: LD_INT 6
59827: PUSH
59828: LD_INT 8
59830: PUSH
59831: LD_INT 11
59833: PUSH
59834: LD_INT 12
59836: PUSH
59837: LD_INT 15
59839: PUSH
59840: LD_INT 16
59842: PUSH
59843: LD_INT 22
59845: PUSH
59846: LD_INT 23
59848: PUSH
59849: LD_INT 25
59851: PUSH
59852: LD_INT 26
59854: PUSH
59855: LD_INT 36
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 101
59876: PUSH
59877: LD_INT 102
59879: PUSH
59880: LD_INT 105
59882: PUSH
59883: LD_INT 106
59885: PUSH
59886: LD_INT 108
59888: PUSH
59889: LD_INT 109
59891: PUSH
59892: LD_INT 112
59894: PUSH
59895: LD_INT 116
59897: PUSH
59898: LD_INT 117
59900: PUSH
59901: LD_INT 118
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: ST_TO_ADDR
59920: GO 62583
59922: LD_INT 6
59924: DOUBLE
59925: EQUAL
59926: IFTRUE 59930
59928: GO 60062
59930: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
59931: LD_ADDR_VAR 0 2
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: LD_INT 4
59941: PUSH
59942: LD_INT 5
59944: PUSH
59945: LD_INT 6
59947: PUSH
59948: LD_INT 8
59950: PUSH
59951: LD_INT 11
59953: PUSH
59954: LD_INT 12
59956: PUSH
59957: LD_INT 15
59959: PUSH
59960: LD_INT 16
59962: PUSH
59963: LD_INT 20
59965: PUSH
59966: LD_INT 21
59968: PUSH
59969: LD_INT 22
59971: PUSH
59972: LD_INT 23
59974: PUSH
59975: LD_INT 25
59977: PUSH
59978: LD_INT 26
59980: PUSH
59981: LD_INT 30
59983: PUSH
59984: LD_INT 31
59986: PUSH
59987: LD_INT 32
59989: PUSH
59990: LD_INT 36
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 101
60016: PUSH
60017: LD_INT 102
60019: PUSH
60020: LD_INT 105
60022: PUSH
60023: LD_INT 106
60025: PUSH
60026: LD_INT 108
60028: PUSH
60029: LD_INT 109
60031: PUSH
60032: LD_INT 112
60034: PUSH
60035: LD_INT 116
60037: PUSH
60038: LD_INT 117
60040: PUSH
60041: LD_INT 118
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: ST_TO_ADDR
60060: GO 62583
60062: LD_INT 7
60064: DOUBLE
60065: EQUAL
60066: IFTRUE 60070
60068: GO 60182
60070: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60071: LD_ADDR_VAR 0 2
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 4
60081: PUSH
60082: LD_INT 5
60084: PUSH
60085: LD_INT 7
60087: PUSH
60088: LD_INT 11
60090: PUSH
60091: LD_INT 12
60093: PUSH
60094: LD_INT 15
60096: PUSH
60097: LD_INT 16
60099: PUSH
60100: LD_INT 20
60102: PUSH
60103: LD_INT 21
60105: PUSH
60106: LD_INT 22
60108: PUSH
60109: LD_INT 23
60111: PUSH
60112: LD_INT 25
60114: PUSH
60115: LD_INT 26
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 101
60136: PUSH
60137: LD_INT 102
60139: PUSH
60140: LD_INT 103
60142: PUSH
60143: LD_INT 105
60145: PUSH
60146: LD_INT 106
60148: PUSH
60149: LD_INT 108
60151: PUSH
60152: LD_INT 112
60154: PUSH
60155: LD_INT 116
60157: PUSH
60158: LD_INT 117
60160: PUSH
60161: LD_INT 118
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: ST_TO_ADDR
60180: GO 62583
60182: LD_INT 8
60184: DOUBLE
60185: EQUAL
60186: IFTRUE 60190
60188: GO 60330
60190: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60191: LD_ADDR_VAR 0 2
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: LD_INT 4
60201: PUSH
60202: LD_INT 5
60204: PUSH
60205: LD_INT 6
60207: PUSH
60208: LD_INT 7
60210: PUSH
60211: LD_INT 8
60213: PUSH
60214: LD_INT 11
60216: PUSH
60217: LD_INT 12
60219: PUSH
60220: LD_INT 15
60222: PUSH
60223: LD_INT 16
60225: PUSH
60226: LD_INT 20
60228: PUSH
60229: LD_INT 21
60231: PUSH
60232: LD_INT 22
60234: PUSH
60235: LD_INT 23
60237: PUSH
60238: LD_INT 25
60240: PUSH
60241: LD_INT 26
60243: PUSH
60244: LD_INT 30
60246: PUSH
60247: LD_INT 31
60249: PUSH
60250: LD_INT 32
60252: PUSH
60253: LD_INT 36
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 101
60280: PUSH
60281: LD_INT 102
60283: PUSH
60284: LD_INT 103
60286: PUSH
60287: LD_INT 105
60289: PUSH
60290: LD_INT 106
60292: PUSH
60293: LD_INT 108
60295: PUSH
60296: LD_INT 109
60298: PUSH
60299: LD_INT 112
60301: PUSH
60302: LD_INT 116
60304: PUSH
60305: LD_INT 117
60307: PUSH
60308: LD_INT 118
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: ST_TO_ADDR
60328: GO 62583
60330: LD_INT 9
60332: DOUBLE
60333: EQUAL
60334: IFTRUE 60338
60336: GO 60486
60338: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60339: LD_ADDR_VAR 0 2
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: LD_INT 4
60349: PUSH
60350: LD_INT 5
60352: PUSH
60353: LD_INT 6
60355: PUSH
60356: LD_INT 7
60358: PUSH
60359: LD_INT 8
60361: PUSH
60362: LD_INT 11
60364: PUSH
60365: LD_INT 12
60367: PUSH
60368: LD_INT 15
60370: PUSH
60371: LD_INT 16
60373: PUSH
60374: LD_INT 20
60376: PUSH
60377: LD_INT 21
60379: PUSH
60380: LD_INT 22
60382: PUSH
60383: LD_INT 23
60385: PUSH
60386: LD_INT 25
60388: PUSH
60389: LD_INT 26
60391: PUSH
60392: LD_INT 28
60394: PUSH
60395: LD_INT 30
60397: PUSH
60398: LD_INT 31
60400: PUSH
60401: LD_INT 32
60403: PUSH
60404: LD_INT 36
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 101
60432: PUSH
60433: LD_INT 102
60435: PUSH
60436: LD_INT 103
60438: PUSH
60439: LD_INT 105
60441: PUSH
60442: LD_INT 106
60444: PUSH
60445: LD_INT 108
60447: PUSH
60448: LD_INT 109
60450: PUSH
60451: LD_INT 112
60453: PUSH
60454: LD_INT 114
60456: PUSH
60457: LD_INT 116
60459: PUSH
60460: LD_INT 117
60462: PUSH
60463: LD_INT 118
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: ST_TO_ADDR
60484: GO 62583
60486: LD_INT 10
60488: DOUBLE
60489: EQUAL
60490: IFTRUE 60494
60492: GO 60690
60494: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60495: LD_ADDR_VAR 0 2
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: LD_INT 4
60505: PUSH
60506: LD_INT 5
60508: PUSH
60509: LD_INT 6
60511: PUSH
60512: LD_INT 7
60514: PUSH
60515: LD_INT 8
60517: PUSH
60518: LD_INT 9
60520: PUSH
60521: LD_INT 10
60523: PUSH
60524: LD_INT 11
60526: PUSH
60527: LD_INT 12
60529: PUSH
60530: LD_INT 13
60532: PUSH
60533: LD_INT 14
60535: PUSH
60536: LD_INT 15
60538: PUSH
60539: LD_INT 16
60541: PUSH
60542: LD_INT 17
60544: PUSH
60545: LD_INT 18
60547: PUSH
60548: LD_INT 19
60550: PUSH
60551: LD_INT 20
60553: PUSH
60554: LD_INT 21
60556: PUSH
60557: LD_INT 22
60559: PUSH
60560: LD_INT 23
60562: PUSH
60563: LD_INT 24
60565: PUSH
60566: LD_INT 25
60568: PUSH
60569: LD_INT 26
60571: PUSH
60572: LD_INT 28
60574: PUSH
60575: LD_INT 30
60577: PUSH
60578: LD_INT 31
60580: PUSH
60581: LD_INT 32
60583: PUSH
60584: LD_INT 36
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 101
60620: PUSH
60621: LD_INT 102
60623: PUSH
60624: LD_INT 103
60626: PUSH
60627: LD_INT 104
60629: PUSH
60630: LD_INT 105
60632: PUSH
60633: LD_INT 106
60635: PUSH
60636: LD_INT 107
60638: PUSH
60639: LD_INT 108
60641: PUSH
60642: LD_INT 109
60644: PUSH
60645: LD_INT 110
60647: PUSH
60648: LD_INT 111
60650: PUSH
60651: LD_INT 112
60653: PUSH
60654: LD_INT 114
60656: PUSH
60657: LD_INT 116
60659: PUSH
60660: LD_INT 117
60662: PUSH
60663: LD_INT 118
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: ST_TO_ADDR
60688: GO 62583
60690: LD_INT 11
60692: DOUBLE
60693: EQUAL
60694: IFTRUE 60698
60696: GO 60902
60698: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
60699: LD_ADDR_VAR 0 2
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: LD_INT 3
60709: PUSH
60710: LD_INT 4
60712: PUSH
60713: LD_INT 5
60715: PUSH
60716: LD_INT 6
60718: PUSH
60719: LD_INT 7
60721: PUSH
60722: LD_INT 8
60724: PUSH
60725: LD_INT 9
60727: PUSH
60728: LD_INT 10
60730: PUSH
60731: LD_INT 11
60733: PUSH
60734: LD_INT 12
60736: PUSH
60737: LD_INT 13
60739: PUSH
60740: LD_INT 14
60742: PUSH
60743: LD_INT 15
60745: PUSH
60746: LD_INT 16
60748: PUSH
60749: LD_INT 17
60751: PUSH
60752: LD_INT 18
60754: PUSH
60755: LD_INT 19
60757: PUSH
60758: LD_INT 20
60760: PUSH
60761: LD_INT 21
60763: PUSH
60764: LD_INT 22
60766: PUSH
60767: LD_INT 23
60769: PUSH
60770: LD_INT 24
60772: PUSH
60773: LD_INT 25
60775: PUSH
60776: LD_INT 26
60778: PUSH
60779: LD_INT 28
60781: PUSH
60782: LD_INT 30
60784: PUSH
60785: LD_INT 31
60787: PUSH
60788: LD_INT 32
60790: PUSH
60791: LD_INT 34
60793: PUSH
60794: LD_INT 36
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 101
60832: PUSH
60833: LD_INT 102
60835: PUSH
60836: LD_INT 103
60838: PUSH
60839: LD_INT 104
60841: PUSH
60842: LD_INT 105
60844: PUSH
60845: LD_INT 106
60847: PUSH
60848: LD_INT 107
60850: PUSH
60851: LD_INT 108
60853: PUSH
60854: LD_INT 109
60856: PUSH
60857: LD_INT 110
60859: PUSH
60860: LD_INT 111
60862: PUSH
60863: LD_INT 112
60865: PUSH
60866: LD_INT 114
60868: PUSH
60869: LD_INT 116
60871: PUSH
60872: LD_INT 117
60874: PUSH
60875: LD_INT 118
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: ST_TO_ADDR
60900: GO 62583
60902: LD_INT 12
60904: DOUBLE
60905: EQUAL
60906: IFTRUE 60910
60908: GO 61130
60910: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
60911: LD_ADDR_VAR 0 2
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: LD_INT 3
60924: PUSH
60925: LD_INT 4
60927: PUSH
60928: LD_INT 5
60930: PUSH
60931: LD_INT 6
60933: PUSH
60934: LD_INT 7
60936: PUSH
60937: LD_INT 8
60939: PUSH
60940: LD_INT 9
60942: PUSH
60943: LD_INT 10
60945: PUSH
60946: LD_INT 11
60948: PUSH
60949: LD_INT 12
60951: PUSH
60952: LD_INT 13
60954: PUSH
60955: LD_INT 14
60957: PUSH
60958: LD_INT 15
60960: PUSH
60961: LD_INT 16
60963: PUSH
60964: LD_INT 17
60966: PUSH
60967: LD_INT 18
60969: PUSH
60970: LD_INT 19
60972: PUSH
60973: LD_INT 20
60975: PUSH
60976: LD_INT 21
60978: PUSH
60979: LD_INT 22
60981: PUSH
60982: LD_INT 23
60984: PUSH
60985: LD_INT 24
60987: PUSH
60988: LD_INT 25
60990: PUSH
60991: LD_INT 26
60993: PUSH
60994: LD_INT 27
60996: PUSH
60997: LD_INT 28
60999: PUSH
61000: LD_INT 30
61002: PUSH
61003: LD_INT 31
61005: PUSH
61006: LD_INT 32
61008: PUSH
61009: LD_INT 33
61011: PUSH
61012: LD_INT 34
61014: PUSH
61015: LD_INT 36
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 101
61056: PUSH
61057: LD_INT 102
61059: PUSH
61060: LD_INT 103
61062: PUSH
61063: LD_INT 104
61065: PUSH
61066: LD_INT 105
61068: PUSH
61069: LD_INT 106
61071: PUSH
61072: LD_INT 107
61074: PUSH
61075: LD_INT 108
61077: PUSH
61078: LD_INT 109
61080: PUSH
61081: LD_INT 110
61083: PUSH
61084: LD_INT 111
61086: PUSH
61087: LD_INT 112
61089: PUSH
61090: LD_INT 113
61092: PUSH
61093: LD_INT 114
61095: PUSH
61096: LD_INT 116
61098: PUSH
61099: LD_INT 117
61101: PUSH
61102: LD_INT 118
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: ST_TO_ADDR
61128: GO 62583
61130: LD_INT 13
61132: DOUBLE
61133: EQUAL
61134: IFTRUE 61138
61136: GO 61346
61138: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61139: LD_ADDR_VAR 0 2
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: LD_INT 2
61149: PUSH
61150: LD_INT 3
61152: PUSH
61153: LD_INT 4
61155: PUSH
61156: LD_INT 5
61158: PUSH
61159: LD_INT 8
61161: PUSH
61162: LD_INT 9
61164: PUSH
61165: LD_INT 10
61167: PUSH
61168: LD_INT 11
61170: PUSH
61171: LD_INT 12
61173: PUSH
61174: LD_INT 14
61176: PUSH
61177: LD_INT 15
61179: PUSH
61180: LD_INT 16
61182: PUSH
61183: LD_INT 17
61185: PUSH
61186: LD_INT 18
61188: PUSH
61189: LD_INT 19
61191: PUSH
61192: LD_INT 20
61194: PUSH
61195: LD_INT 21
61197: PUSH
61198: LD_INT 22
61200: PUSH
61201: LD_INT 23
61203: PUSH
61204: LD_INT 24
61206: PUSH
61207: LD_INT 25
61209: PUSH
61210: LD_INT 26
61212: PUSH
61213: LD_INT 27
61215: PUSH
61216: LD_INT 28
61218: PUSH
61219: LD_INT 30
61221: PUSH
61222: LD_INT 31
61224: PUSH
61225: LD_INT 32
61227: PUSH
61228: LD_INT 33
61230: PUSH
61231: LD_INT 34
61233: PUSH
61234: LD_INT 36
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 101
61272: PUSH
61273: LD_INT 102
61275: PUSH
61276: LD_INT 103
61278: PUSH
61279: LD_INT 104
61281: PUSH
61282: LD_INT 105
61284: PUSH
61285: LD_INT 106
61287: PUSH
61288: LD_INT 107
61290: PUSH
61291: LD_INT 108
61293: PUSH
61294: LD_INT 109
61296: PUSH
61297: LD_INT 110
61299: PUSH
61300: LD_INT 111
61302: PUSH
61303: LD_INT 112
61305: PUSH
61306: LD_INT 113
61308: PUSH
61309: LD_INT 114
61311: PUSH
61312: LD_INT 116
61314: PUSH
61315: LD_INT 117
61317: PUSH
61318: LD_INT 118
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: ST_TO_ADDR
61344: GO 62583
61346: LD_INT 14
61348: DOUBLE
61349: EQUAL
61350: IFTRUE 61354
61352: GO 61578
61354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61355: LD_ADDR_VAR 0 2
61359: PUSH
61360: LD_INT 1
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: LD_INT 3
61368: PUSH
61369: LD_INT 4
61371: PUSH
61372: LD_INT 5
61374: PUSH
61375: LD_INT 6
61377: PUSH
61378: LD_INT 7
61380: PUSH
61381: LD_INT 8
61383: PUSH
61384: LD_INT 9
61386: PUSH
61387: LD_INT 10
61389: PUSH
61390: LD_INT 11
61392: PUSH
61393: LD_INT 12
61395: PUSH
61396: LD_INT 13
61398: PUSH
61399: LD_INT 14
61401: PUSH
61402: LD_INT 15
61404: PUSH
61405: LD_INT 16
61407: PUSH
61408: LD_INT 17
61410: PUSH
61411: LD_INT 18
61413: PUSH
61414: LD_INT 19
61416: PUSH
61417: LD_INT 20
61419: PUSH
61420: LD_INT 21
61422: PUSH
61423: LD_INT 22
61425: PUSH
61426: LD_INT 23
61428: PUSH
61429: LD_INT 24
61431: PUSH
61432: LD_INT 25
61434: PUSH
61435: LD_INT 26
61437: PUSH
61438: LD_INT 27
61440: PUSH
61441: LD_INT 28
61443: PUSH
61444: LD_INT 29
61446: PUSH
61447: LD_INT 30
61449: PUSH
61450: LD_INT 31
61452: PUSH
61453: LD_INT 32
61455: PUSH
61456: LD_INT 33
61458: PUSH
61459: LD_INT 34
61461: PUSH
61462: LD_INT 36
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 101
61504: PUSH
61505: LD_INT 102
61507: PUSH
61508: LD_INT 103
61510: PUSH
61511: LD_INT 104
61513: PUSH
61514: LD_INT 105
61516: PUSH
61517: LD_INT 106
61519: PUSH
61520: LD_INT 107
61522: PUSH
61523: LD_INT 108
61525: PUSH
61526: LD_INT 109
61528: PUSH
61529: LD_INT 110
61531: PUSH
61532: LD_INT 111
61534: PUSH
61535: LD_INT 112
61537: PUSH
61538: LD_INT 113
61540: PUSH
61541: LD_INT 114
61543: PUSH
61544: LD_INT 116
61546: PUSH
61547: LD_INT 117
61549: PUSH
61550: LD_INT 118
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: ST_TO_ADDR
61576: GO 62583
61578: LD_INT 15
61580: DOUBLE
61581: EQUAL
61582: IFTRUE 61586
61584: GO 61810
61586: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
61587: LD_ADDR_VAR 0 2
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: LD_INT 3
61600: PUSH
61601: LD_INT 4
61603: PUSH
61604: LD_INT 5
61606: PUSH
61607: LD_INT 6
61609: PUSH
61610: LD_INT 7
61612: PUSH
61613: LD_INT 8
61615: PUSH
61616: LD_INT 9
61618: PUSH
61619: LD_INT 10
61621: PUSH
61622: LD_INT 11
61624: PUSH
61625: LD_INT 12
61627: PUSH
61628: LD_INT 13
61630: PUSH
61631: LD_INT 14
61633: PUSH
61634: LD_INT 15
61636: PUSH
61637: LD_INT 16
61639: PUSH
61640: LD_INT 17
61642: PUSH
61643: LD_INT 18
61645: PUSH
61646: LD_INT 19
61648: PUSH
61649: LD_INT 20
61651: PUSH
61652: LD_INT 21
61654: PUSH
61655: LD_INT 22
61657: PUSH
61658: LD_INT 23
61660: PUSH
61661: LD_INT 24
61663: PUSH
61664: LD_INT 25
61666: PUSH
61667: LD_INT 26
61669: PUSH
61670: LD_INT 27
61672: PUSH
61673: LD_INT 28
61675: PUSH
61676: LD_INT 29
61678: PUSH
61679: LD_INT 30
61681: PUSH
61682: LD_INT 31
61684: PUSH
61685: LD_INT 32
61687: PUSH
61688: LD_INT 33
61690: PUSH
61691: LD_INT 34
61693: PUSH
61694: LD_INT 36
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 101
61736: PUSH
61737: LD_INT 102
61739: PUSH
61740: LD_INT 103
61742: PUSH
61743: LD_INT 104
61745: PUSH
61746: LD_INT 105
61748: PUSH
61749: LD_INT 106
61751: PUSH
61752: LD_INT 107
61754: PUSH
61755: LD_INT 108
61757: PUSH
61758: LD_INT 109
61760: PUSH
61761: LD_INT 110
61763: PUSH
61764: LD_INT 111
61766: PUSH
61767: LD_INT 112
61769: PUSH
61770: LD_INT 113
61772: PUSH
61773: LD_INT 114
61775: PUSH
61776: LD_INT 116
61778: PUSH
61779: LD_INT 117
61781: PUSH
61782: LD_INT 118
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: ST_TO_ADDR
61808: GO 62583
61810: LD_INT 16
61812: DOUBLE
61813: EQUAL
61814: IFTRUE 61818
61816: GO 61954
61818: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
61819: LD_ADDR_VAR 0 2
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: LD_INT 4
61829: PUSH
61830: LD_INT 5
61832: PUSH
61833: LD_INT 7
61835: PUSH
61836: LD_INT 11
61838: PUSH
61839: LD_INT 12
61841: PUSH
61842: LD_INT 15
61844: PUSH
61845: LD_INT 16
61847: PUSH
61848: LD_INT 20
61850: PUSH
61851: LD_INT 21
61853: PUSH
61854: LD_INT 22
61856: PUSH
61857: LD_INT 23
61859: PUSH
61860: LD_INT 25
61862: PUSH
61863: LD_INT 26
61865: PUSH
61866: LD_INT 30
61868: PUSH
61869: LD_INT 31
61871: PUSH
61872: LD_INT 32
61874: PUSH
61875: LD_INT 33
61877: PUSH
61878: LD_INT 34
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 101
61904: PUSH
61905: LD_INT 102
61907: PUSH
61908: LD_INT 103
61910: PUSH
61911: LD_INT 106
61913: PUSH
61914: LD_INT 108
61916: PUSH
61917: LD_INT 112
61919: PUSH
61920: LD_INT 113
61922: PUSH
61923: LD_INT 114
61925: PUSH
61926: LD_INT 116
61928: PUSH
61929: LD_INT 117
61931: PUSH
61932: LD_INT 118
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: ST_TO_ADDR
61952: GO 62583
61954: LD_INT 17
61956: DOUBLE
61957: EQUAL
61958: IFTRUE 61962
61960: GO 62186
61962: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
61963: LD_ADDR_VAR 0 2
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: LD_INT 2
61973: PUSH
61974: LD_INT 3
61976: PUSH
61977: LD_INT 4
61979: PUSH
61980: LD_INT 5
61982: PUSH
61983: LD_INT 6
61985: PUSH
61986: LD_INT 7
61988: PUSH
61989: LD_INT 8
61991: PUSH
61992: LD_INT 9
61994: PUSH
61995: LD_INT 10
61997: PUSH
61998: LD_INT 11
62000: PUSH
62001: LD_INT 12
62003: PUSH
62004: LD_INT 13
62006: PUSH
62007: LD_INT 14
62009: PUSH
62010: LD_INT 15
62012: PUSH
62013: LD_INT 16
62015: PUSH
62016: LD_INT 17
62018: PUSH
62019: LD_INT 18
62021: PUSH
62022: LD_INT 19
62024: PUSH
62025: LD_INT 20
62027: PUSH
62028: LD_INT 21
62030: PUSH
62031: LD_INT 22
62033: PUSH
62034: LD_INT 23
62036: PUSH
62037: LD_INT 24
62039: PUSH
62040: LD_INT 25
62042: PUSH
62043: LD_INT 26
62045: PUSH
62046: LD_INT 27
62048: PUSH
62049: LD_INT 28
62051: PUSH
62052: LD_INT 29
62054: PUSH
62055: LD_INT 30
62057: PUSH
62058: LD_INT 31
62060: PUSH
62061: LD_INT 32
62063: PUSH
62064: LD_INT 33
62066: PUSH
62067: LD_INT 34
62069: PUSH
62070: LD_INT 36
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 101
62112: PUSH
62113: LD_INT 102
62115: PUSH
62116: LD_INT 103
62118: PUSH
62119: LD_INT 104
62121: PUSH
62122: LD_INT 105
62124: PUSH
62125: LD_INT 106
62127: PUSH
62128: LD_INT 107
62130: PUSH
62131: LD_INT 108
62133: PUSH
62134: LD_INT 109
62136: PUSH
62137: LD_INT 110
62139: PUSH
62140: LD_INT 111
62142: PUSH
62143: LD_INT 112
62145: PUSH
62146: LD_INT 113
62148: PUSH
62149: LD_INT 114
62151: PUSH
62152: LD_INT 116
62154: PUSH
62155: LD_INT 117
62157: PUSH
62158: LD_INT 118
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: ST_TO_ADDR
62184: GO 62583
62186: LD_INT 18
62188: DOUBLE
62189: EQUAL
62190: IFTRUE 62194
62192: GO 62342
62194: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62195: LD_ADDR_VAR 0 2
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: LD_INT 4
62205: PUSH
62206: LD_INT 5
62208: PUSH
62209: LD_INT 7
62211: PUSH
62212: LD_INT 11
62214: PUSH
62215: LD_INT 12
62217: PUSH
62218: LD_INT 15
62220: PUSH
62221: LD_INT 16
62223: PUSH
62224: LD_INT 20
62226: PUSH
62227: LD_INT 21
62229: PUSH
62230: LD_INT 22
62232: PUSH
62233: LD_INT 23
62235: PUSH
62236: LD_INT 25
62238: PUSH
62239: LD_INT 26
62241: PUSH
62242: LD_INT 30
62244: PUSH
62245: LD_INT 31
62247: PUSH
62248: LD_INT 32
62250: PUSH
62251: LD_INT 33
62253: PUSH
62254: LD_INT 34
62256: PUSH
62257: LD_INT 35
62259: PUSH
62260: LD_INT 36
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 101
62288: PUSH
62289: LD_INT 102
62291: PUSH
62292: LD_INT 103
62294: PUSH
62295: LD_INT 106
62297: PUSH
62298: LD_INT 108
62300: PUSH
62301: LD_INT 112
62303: PUSH
62304: LD_INT 113
62306: PUSH
62307: LD_INT 114
62309: PUSH
62310: LD_INT 115
62312: PUSH
62313: LD_INT 116
62315: PUSH
62316: LD_INT 117
62318: PUSH
62319: LD_INT 118
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: ST_TO_ADDR
62340: GO 62583
62342: LD_INT 19
62344: DOUBLE
62345: EQUAL
62346: IFTRUE 62350
62348: GO 62582
62350: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62351: LD_ADDR_VAR 0 2
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: LD_INT 3
62364: PUSH
62365: LD_INT 4
62367: PUSH
62368: LD_INT 5
62370: PUSH
62371: LD_INT 6
62373: PUSH
62374: LD_INT 7
62376: PUSH
62377: LD_INT 8
62379: PUSH
62380: LD_INT 9
62382: PUSH
62383: LD_INT 10
62385: PUSH
62386: LD_INT 11
62388: PUSH
62389: LD_INT 12
62391: PUSH
62392: LD_INT 13
62394: PUSH
62395: LD_INT 14
62397: PUSH
62398: LD_INT 15
62400: PUSH
62401: LD_INT 16
62403: PUSH
62404: LD_INT 17
62406: PUSH
62407: LD_INT 18
62409: PUSH
62410: LD_INT 19
62412: PUSH
62413: LD_INT 20
62415: PUSH
62416: LD_INT 21
62418: PUSH
62419: LD_INT 22
62421: PUSH
62422: LD_INT 23
62424: PUSH
62425: LD_INT 24
62427: PUSH
62428: LD_INT 25
62430: PUSH
62431: LD_INT 26
62433: PUSH
62434: LD_INT 27
62436: PUSH
62437: LD_INT 28
62439: PUSH
62440: LD_INT 29
62442: PUSH
62443: LD_INT 30
62445: PUSH
62446: LD_INT 31
62448: PUSH
62449: LD_INT 32
62451: PUSH
62452: LD_INT 33
62454: PUSH
62455: LD_INT 34
62457: PUSH
62458: LD_INT 35
62460: PUSH
62461: LD_INT 36
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 101
62504: PUSH
62505: LD_INT 102
62507: PUSH
62508: LD_INT 103
62510: PUSH
62511: LD_INT 104
62513: PUSH
62514: LD_INT 105
62516: PUSH
62517: LD_INT 106
62519: PUSH
62520: LD_INT 107
62522: PUSH
62523: LD_INT 108
62525: PUSH
62526: LD_INT 109
62528: PUSH
62529: LD_INT 110
62531: PUSH
62532: LD_INT 111
62534: PUSH
62535: LD_INT 112
62537: PUSH
62538: LD_INT 113
62540: PUSH
62541: LD_INT 114
62543: PUSH
62544: LD_INT 115
62546: PUSH
62547: LD_INT 116
62549: PUSH
62550: LD_INT 117
62552: PUSH
62553: LD_INT 118
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: ST_TO_ADDR
62580: GO 62583
62582: POP
// end else
62583: GO 62814
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
62585: LD_ADDR_VAR 0 2
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: LD_INT 3
62598: PUSH
62599: LD_INT 4
62601: PUSH
62602: LD_INT 5
62604: PUSH
62605: LD_INT 6
62607: PUSH
62608: LD_INT 7
62610: PUSH
62611: LD_INT 8
62613: PUSH
62614: LD_INT 9
62616: PUSH
62617: LD_INT 10
62619: PUSH
62620: LD_INT 11
62622: PUSH
62623: LD_INT 12
62625: PUSH
62626: LD_INT 13
62628: PUSH
62629: LD_INT 14
62631: PUSH
62632: LD_INT 15
62634: PUSH
62635: LD_INT 16
62637: PUSH
62638: LD_INT 17
62640: PUSH
62641: LD_INT 18
62643: PUSH
62644: LD_INT 19
62646: PUSH
62647: LD_INT 20
62649: PUSH
62650: LD_INT 21
62652: PUSH
62653: LD_INT 22
62655: PUSH
62656: LD_INT 23
62658: PUSH
62659: LD_INT 24
62661: PUSH
62662: LD_INT 25
62664: PUSH
62665: LD_INT 26
62667: PUSH
62668: LD_INT 27
62670: PUSH
62671: LD_INT 28
62673: PUSH
62674: LD_INT 29
62676: PUSH
62677: LD_INT 30
62679: PUSH
62680: LD_INT 31
62682: PUSH
62683: LD_INT 32
62685: PUSH
62686: LD_INT 33
62688: PUSH
62689: LD_INT 34
62691: PUSH
62692: LD_INT 35
62694: PUSH
62695: LD_INT 36
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 101
62738: PUSH
62739: LD_INT 102
62741: PUSH
62742: LD_INT 103
62744: PUSH
62745: LD_INT 104
62747: PUSH
62748: LD_INT 105
62750: PUSH
62751: LD_INT 106
62753: PUSH
62754: LD_INT 107
62756: PUSH
62757: LD_INT 108
62759: PUSH
62760: LD_INT 109
62762: PUSH
62763: LD_INT 110
62765: PUSH
62766: LD_INT 111
62768: PUSH
62769: LD_INT 112
62771: PUSH
62772: LD_INT 113
62774: PUSH
62775: LD_INT 114
62777: PUSH
62778: LD_INT 115
62780: PUSH
62781: LD_INT 116
62783: PUSH
62784: LD_INT 117
62786: PUSH
62787: LD_INT 118
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: ST_TO_ADDR
// if result then
62814: LD_VAR 0 2
62818: IFFALSE 63604
// begin normal :=  ;
62820: LD_ADDR_VAR 0 5
62824: PUSH
62825: LD_STRING 
62827: ST_TO_ADDR
// hardcore :=  ;
62828: LD_ADDR_VAR 0 6
62832: PUSH
62833: LD_STRING 
62835: ST_TO_ADDR
// active :=  ;
62836: LD_ADDR_VAR 0 7
62840: PUSH
62841: LD_STRING 
62843: ST_TO_ADDR
// for i = 1 to normalCounter do
62844: LD_ADDR_VAR 0 8
62848: PUSH
62849: DOUBLE
62850: LD_INT 1
62852: DEC
62853: ST_TO_ADDR
62854: LD_EXP 54
62858: PUSH
62859: FOR_TO
62860: IFFALSE 62961
// begin tmp := 0 ;
62862: LD_ADDR_VAR 0 3
62866: PUSH
62867: LD_STRING 0
62869: ST_TO_ADDR
// if result [ 1 ] then
62870: LD_VAR 0 2
62874: PUSH
62875: LD_INT 1
62877: ARRAY
62878: IFFALSE 62943
// if result [ 1 ] [ 1 ] = i then
62880: LD_VAR 0 2
62884: PUSH
62885: LD_INT 1
62887: ARRAY
62888: PUSH
62889: LD_INT 1
62891: ARRAY
62892: PUSH
62893: LD_VAR 0 8
62897: EQUAL
62898: IFFALSE 62943
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
62900: LD_ADDR_VAR 0 2
62904: PUSH
62905: LD_VAR 0 2
62909: PPUSH
62910: LD_INT 1
62912: PPUSH
62913: LD_VAR 0 2
62917: PUSH
62918: LD_INT 1
62920: ARRAY
62921: PPUSH
62922: LD_INT 1
62924: PPUSH
62925: CALL_OW 3
62929: PPUSH
62930: CALL_OW 1
62934: ST_TO_ADDR
// tmp := 1 ;
62935: LD_ADDR_VAR 0 3
62939: PUSH
62940: LD_STRING 1
62942: ST_TO_ADDR
// end ; normal := normal & tmp ;
62943: LD_ADDR_VAR 0 5
62947: PUSH
62948: LD_VAR 0 5
62952: PUSH
62953: LD_VAR 0 3
62957: STR
62958: ST_TO_ADDR
// end ;
62959: GO 62859
62961: POP
62962: POP
// for i = 1 to hardcoreCounter do
62963: LD_ADDR_VAR 0 8
62967: PUSH
62968: DOUBLE
62969: LD_INT 1
62971: DEC
62972: ST_TO_ADDR
62973: LD_EXP 55
62977: PUSH
62978: FOR_TO
62979: IFFALSE 63084
// begin tmp := 0 ;
62981: LD_ADDR_VAR 0 3
62985: PUSH
62986: LD_STRING 0
62988: ST_TO_ADDR
// if result [ 2 ] then
62989: LD_VAR 0 2
62993: PUSH
62994: LD_INT 2
62996: ARRAY
62997: IFFALSE 63066
// if result [ 2 ] [ 1 ] = 100 + i then
62999: LD_VAR 0 2
63003: PUSH
63004: LD_INT 2
63006: ARRAY
63007: PUSH
63008: LD_INT 1
63010: ARRAY
63011: PUSH
63012: LD_INT 100
63014: PUSH
63015: LD_VAR 0 8
63019: PLUS
63020: EQUAL
63021: IFFALSE 63066
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63023: LD_ADDR_VAR 0 2
63027: PUSH
63028: LD_VAR 0 2
63032: PPUSH
63033: LD_INT 2
63035: PPUSH
63036: LD_VAR 0 2
63040: PUSH
63041: LD_INT 2
63043: ARRAY
63044: PPUSH
63045: LD_INT 1
63047: PPUSH
63048: CALL_OW 3
63052: PPUSH
63053: CALL_OW 1
63057: ST_TO_ADDR
// tmp := 1 ;
63058: LD_ADDR_VAR 0 3
63062: PUSH
63063: LD_STRING 1
63065: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63066: LD_ADDR_VAR 0 6
63070: PUSH
63071: LD_VAR 0 6
63075: PUSH
63076: LD_VAR 0 3
63080: STR
63081: ST_TO_ADDR
// end ;
63082: GO 62978
63084: POP
63085: POP
// if isGameLoad then
63086: LD_VAR 0 1
63090: IFFALSE 63565
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63092: LD_ADDR_VAR 0 4
63096: PUSH
63097: LD_EXP 58
63101: PUSH
63102: LD_EXP 57
63106: PUSH
63107: LD_EXP 59
63111: PUSH
63112: LD_EXP 56
63116: PUSH
63117: LD_EXP 60
63121: PUSH
63122: LD_EXP 61
63126: PUSH
63127: LD_EXP 62
63131: PUSH
63132: LD_EXP 63
63136: PUSH
63137: LD_EXP 64
63141: PUSH
63142: LD_EXP 65
63146: PUSH
63147: LD_EXP 66
63151: PUSH
63152: LD_EXP 67
63156: PUSH
63157: LD_EXP 68
63161: PUSH
63162: LD_EXP 69
63166: PUSH
63167: LD_EXP 77
63171: PUSH
63172: LD_EXP 78
63176: PUSH
63177: LD_EXP 79
63181: PUSH
63182: LD_EXP 80
63186: PUSH
63187: LD_EXP 82
63191: PUSH
63192: LD_EXP 83
63196: PUSH
63197: LD_EXP 84
63201: PUSH
63202: LD_EXP 87
63206: PUSH
63207: LD_EXP 89
63211: PUSH
63212: LD_EXP 90
63216: PUSH
63217: LD_EXP 91
63221: PUSH
63222: LD_EXP 93
63226: PUSH
63227: LD_EXP 94
63231: PUSH
63232: LD_EXP 97
63236: PUSH
63237: LD_EXP 98
63241: PUSH
63242: LD_EXP 99
63246: PUSH
63247: LD_EXP 100
63251: PUSH
63252: LD_EXP 101
63256: PUSH
63257: LD_EXP 102
63261: PUSH
63262: LD_EXP 103
63266: PUSH
63267: LD_EXP 104
63271: PUSH
63272: LD_EXP 105
63276: PUSH
63277: LD_EXP 70
63281: PUSH
63282: LD_EXP 71
63286: PUSH
63287: LD_EXP 74
63291: PUSH
63292: LD_EXP 75
63296: PUSH
63297: LD_EXP 76
63301: PUSH
63302: LD_EXP 72
63306: PUSH
63307: LD_EXP 73
63311: PUSH
63312: LD_EXP 81
63316: PUSH
63317: LD_EXP 85
63321: PUSH
63322: LD_EXP 86
63326: PUSH
63327: LD_EXP 88
63331: PUSH
63332: LD_EXP 92
63336: PUSH
63337: LD_EXP 95
63341: PUSH
63342: LD_EXP 96
63346: PUSH
63347: LD_EXP 106
63351: PUSH
63352: LD_EXP 107
63356: PUSH
63357: LD_EXP 108
63361: PUSH
63362: LD_EXP 109
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: ST_TO_ADDR
// tmp :=  ;
63423: LD_ADDR_VAR 0 3
63427: PUSH
63428: LD_STRING 
63430: ST_TO_ADDR
// for i = 1 to normalCounter do
63431: LD_ADDR_VAR 0 8
63435: PUSH
63436: DOUBLE
63437: LD_INT 1
63439: DEC
63440: ST_TO_ADDR
63441: LD_EXP 54
63445: PUSH
63446: FOR_TO
63447: IFFALSE 63483
// begin if flags [ i ] then
63449: LD_VAR 0 4
63453: PUSH
63454: LD_VAR 0 8
63458: ARRAY
63459: IFFALSE 63481
// tmp := tmp & i & ; ;
63461: LD_ADDR_VAR 0 3
63465: PUSH
63466: LD_VAR 0 3
63470: PUSH
63471: LD_VAR 0 8
63475: STR
63476: PUSH
63477: LD_STRING ;
63479: STR
63480: ST_TO_ADDR
// end ;
63481: GO 63446
63483: POP
63484: POP
// for i = 1 to hardcoreCounter do
63485: LD_ADDR_VAR 0 8
63489: PUSH
63490: DOUBLE
63491: LD_INT 1
63493: DEC
63494: ST_TO_ADDR
63495: LD_EXP 55
63499: PUSH
63500: FOR_TO
63501: IFFALSE 63547
// begin if flags [ normalCounter + i ] then
63503: LD_VAR 0 4
63507: PUSH
63508: LD_EXP 54
63512: PUSH
63513: LD_VAR 0 8
63517: PLUS
63518: ARRAY
63519: IFFALSE 63545
// tmp := tmp & ( 100 + i ) & ; ;
63521: LD_ADDR_VAR 0 3
63525: PUSH
63526: LD_VAR 0 3
63530: PUSH
63531: LD_INT 100
63533: PUSH
63534: LD_VAR 0 8
63538: PLUS
63539: STR
63540: PUSH
63541: LD_STRING ;
63543: STR
63544: ST_TO_ADDR
// end ;
63545: GO 63500
63547: POP
63548: POP
// if tmp then
63549: LD_VAR 0 3
63553: IFFALSE 63565
// active := tmp ;
63555: LD_ADDR_VAR 0 7
63559: PUSH
63560: LD_VAR 0 3
63564: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
63565: LD_STRING getStreamItemsFromMission("
63567: PUSH
63568: LD_VAR 0 5
63572: STR
63573: PUSH
63574: LD_STRING ","
63576: STR
63577: PUSH
63578: LD_VAR 0 6
63582: STR
63583: PUSH
63584: LD_STRING ","
63586: STR
63587: PUSH
63588: LD_VAR 0 7
63592: STR
63593: PUSH
63594: LD_STRING ")
63596: STR
63597: PPUSH
63598: CALL_OW 559
// end else
63602: GO 63611
// ToLua ( getStreamItemsFromMission("","","") ) ;
63604: LD_STRING getStreamItemsFromMission("","","")
63606: PPUSH
63607: CALL_OW 559
// end ;
63611: LD_VAR 0 2
63615: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63616: LD_EXP 53
63620: PUSH
63621: LD_EXP 58
63625: AND
63626: IFFALSE 63750
63628: GO 63630
63630: DISABLE
63631: LD_INT 0
63633: PPUSH
63634: PPUSH
// begin enable ;
63635: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63636: LD_ADDR_VAR 0 2
63640: PUSH
63641: LD_INT 22
63643: PUSH
63644: LD_OWVAR 2
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: LD_INT 34
63658: PUSH
63659: LD_INT 7
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 34
63668: PUSH
63669: LD_INT 45
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 34
63678: PUSH
63679: LD_INT 28
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 34
63688: PUSH
63689: LD_INT 47
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PPUSH
63707: CALL_OW 69
63711: ST_TO_ADDR
// if not tmp then
63712: LD_VAR 0 2
63716: NOT
63717: IFFALSE 63721
// exit ;
63719: GO 63750
// for i in tmp do
63721: LD_ADDR_VAR 0 1
63725: PUSH
63726: LD_VAR 0 2
63730: PUSH
63731: FOR_IN
63732: IFFALSE 63748
// begin SetLives ( i , 0 ) ;
63734: LD_VAR 0 1
63738: PPUSH
63739: LD_INT 0
63741: PPUSH
63742: CALL_OW 234
// end ;
63746: GO 63731
63748: POP
63749: POP
// end ;
63750: PPOPN 2
63752: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63753: LD_EXP 53
63757: PUSH
63758: LD_EXP 59
63762: AND
63763: IFFALSE 63847
63765: GO 63767
63767: DISABLE
63768: LD_INT 0
63770: PPUSH
63771: PPUSH
// begin enable ;
63772: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63773: LD_ADDR_VAR 0 2
63777: PUSH
63778: LD_INT 22
63780: PUSH
63781: LD_OWVAR 2
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 32
63792: PUSH
63793: LD_INT 3
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PPUSH
63804: CALL_OW 69
63808: ST_TO_ADDR
// if not tmp then
63809: LD_VAR 0 2
63813: NOT
63814: IFFALSE 63818
// exit ;
63816: GO 63847
// for i in tmp do
63818: LD_ADDR_VAR 0 1
63822: PUSH
63823: LD_VAR 0 2
63827: PUSH
63828: FOR_IN
63829: IFFALSE 63845
// begin SetLives ( i , 0 ) ;
63831: LD_VAR 0 1
63835: PPUSH
63836: LD_INT 0
63838: PPUSH
63839: CALL_OW 234
// end ;
63843: GO 63828
63845: POP
63846: POP
// end ;
63847: PPOPN 2
63849: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
63850: LD_EXP 53
63854: PUSH
63855: LD_EXP 56
63859: AND
63860: IFFALSE 63953
63862: GO 63864
63864: DISABLE
63865: LD_INT 0
63867: PPUSH
// begin enable ;
63868: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
63869: LD_ADDR_VAR 0 1
63873: PUSH
63874: LD_INT 22
63876: PUSH
63877: LD_OWVAR 2
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 2
63888: PUSH
63889: LD_INT 25
63891: PUSH
63892: LD_INT 5
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 25
63901: PUSH
63902: LD_INT 9
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 25
63911: PUSH
63912: LD_INT 8
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PPUSH
63929: CALL_OW 69
63933: PUSH
63934: FOR_IN
63935: IFFALSE 63951
// begin SetClass ( i , 1 ) ;
63937: LD_VAR 0 1
63941: PPUSH
63942: LD_INT 1
63944: PPUSH
63945: CALL_OW 336
// end ;
63949: GO 63934
63951: POP
63952: POP
// end ;
63953: PPOPN 1
63955: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
63956: LD_EXP 53
63960: PUSH
63961: LD_EXP 57
63965: AND
63966: PUSH
63967: LD_OWVAR 65
63971: PUSH
63972: LD_INT 7
63974: LESS
63975: AND
63976: IFFALSE 63990
63978: GO 63980
63980: DISABLE
// begin enable ;
63981: ENABLE
// game_speed := 7 ;
63982: LD_ADDR_OWVAR 65
63986: PUSH
63987: LD_INT 7
63989: ST_TO_ADDR
// end ;
63990: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
63991: LD_EXP 53
63995: PUSH
63996: LD_EXP 60
64000: AND
64001: IFFALSE 64203
64003: GO 64005
64005: DISABLE
64006: LD_INT 0
64008: PPUSH
64009: PPUSH
64010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64011: LD_ADDR_VAR 0 3
64015: PUSH
64016: LD_INT 81
64018: PUSH
64019: LD_OWVAR 2
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 21
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PPUSH
64042: CALL_OW 69
64046: ST_TO_ADDR
// if not tmp then
64047: LD_VAR 0 3
64051: NOT
64052: IFFALSE 64056
// exit ;
64054: GO 64203
// if tmp > 5 then
64056: LD_VAR 0 3
64060: PUSH
64061: LD_INT 5
64063: GREATER
64064: IFFALSE 64076
// k := 5 else
64066: LD_ADDR_VAR 0 2
64070: PUSH
64071: LD_INT 5
64073: ST_TO_ADDR
64074: GO 64086
// k := tmp ;
64076: LD_ADDR_VAR 0 2
64080: PUSH
64081: LD_VAR 0 3
64085: ST_TO_ADDR
// for i := 1 to k do
64086: LD_ADDR_VAR 0 1
64090: PUSH
64091: DOUBLE
64092: LD_INT 1
64094: DEC
64095: ST_TO_ADDR
64096: LD_VAR 0 2
64100: PUSH
64101: FOR_TO
64102: IFFALSE 64201
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64104: LD_VAR 0 3
64108: PUSH
64109: LD_VAR 0 1
64113: ARRAY
64114: PPUSH
64115: LD_VAR 0 1
64119: PUSH
64120: LD_INT 4
64122: MOD
64123: PUSH
64124: LD_INT 1
64126: PLUS
64127: PPUSH
64128: CALL_OW 259
64132: PUSH
64133: LD_INT 10
64135: LESS
64136: IFFALSE 64199
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64138: LD_VAR 0 3
64142: PUSH
64143: LD_VAR 0 1
64147: ARRAY
64148: PPUSH
64149: LD_VAR 0 1
64153: PUSH
64154: LD_INT 4
64156: MOD
64157: PUSH
64158: LD_INT 1
64160: PLUS
64161: PPUSH
64162: LD_VAR 0 3
64166: PUSH
64167: LD_VAR 0 1
64171: ARRAY
64172: PPUSH
64173: LD_VAR 0 1
64177: PUSH
64178: LD_INT 4
64180: MOD
64181: PUSH
64182: LD_INT 1
64184: PLUS
64185: PPUSH
64186: CALL_OW 259
64190: PUSH
64191: LD_INT 1
64193: PLUS
64194: PPUSH
64195: CALL_OW 237
64199: GO 64101
64201: POP
64202: POP
// end ;
64203: PPOPN 3
64205: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64206: LD_EXP 53
64210: PUSH
64211: LD_EXP 61
64215: AND
64216: IFFALSE 64236
64218: GO 64220
64220: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64221: LD_INT 4
64223: PPUSH
64224: LD_OWVAR 2
64228: PPUSH
64229: LD_INT 0
64231: PPUSH
64232: CALL_OW 324
64236: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64237: LD_EXP 53
64241: PUSH
64242: LD_EXP 90
64246: AND
64247: IFFALSE 64267
64249: GO 64251
64251: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64252: LD_INT 19
64254: PPUSH
64255: LD_OWVAR 2
64259: PPUSH
64260: LD_INT 0
64262: PPUSH
64263: CALL_OW 324
64267: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64268: LD_EXP 53
64272: PUSH
64273: LD_EXP 62
64277: AND
64278: IFFALSE 64380
64280: GO 64282
64282: DISABLE
64283: LD_INT 0
64285: PPUSH
64286: PPUSH
// begin enable ;
64287: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64288: LD_ADDR_VAR 0 2
64292: PUSH
64293: LD_INT 22
64295: PUSH
64296: LD_OWVAR 2
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 2
64307: PUSH
64308: LD_INT 34
64310: PUSH
64311: LD_INT 11
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 34
64320: PUSH
64321: LD_INT 30
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: LIST
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PPUSH
64337: CALL_OW 69
64341: ST_TO_ADDR
// if not tmp then
64342: LD_VAR 0 2
64346: NOT
64347: IFFALSE 64351
// exit ;
64349: GO 64380
// for i in tmp do
64351: LD_ADDR_VAR 0 1
64355: PUSH
64356: LD_VAR 0 2
64360: PUSH
64361: FOR_IN
64362: IFFALSE 64378
// begin SetLives ( i , 0 ) ;
64364: LD_VAR 0 1
64368: PPUSH
64369: LD_INT 0
64371: PPUSH
64372: CALL_OW 234
// end ;
64376: GO 64361
64378: POP
64379: POP
// end ;
64380: PPOPN 2
64382: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64383: LD_EXP 53
64387: PUSH
64388: LD_EXP 63
64392: AND
64393: IFFALSE 64413
64395: GO 64397
64397: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64398: LD_INT 32
64400: PPUSH
64401: LD_OWVAR 2
64405: PPUSH
64406: LD_INT 0
64408: PPUSH
64409: CALL_OW 324
64413: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64414: LD_EXP 53
64418: PUSH
64419: LD_EXP 64
64423: AND
64424: IFFALSE 64605
64426: GO 64428
64428: DISABLE
64429: LD_INT 0
64431: PPUSH
64432: PPUSH
64433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64434: LD_ADDR_VAR 0 2
64438: PUSH
64439: LD_INT 22
64441: PUSH
64442: LD_OWVAR 2
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 33
64453: PUSH
64454: LD_INT 3
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PPUSH
64465: CALL_OW 69
64469: ST_TO_ADDR
// if not tmp then
64470: LD_VAR 0 2
64474: NOT
64475: IFFALSE 64479
// exit ;
64477: GO 64605
// side := 0 ;
64479: LD_ADDR_VAR 0 3
64483: PUSH
64484: LD_INT 0
64486: ST_TO_ADDR
// for i := 1 to 8 do
64487: LD_ADDR_VAR 0 1
64491: PUSH
64492: DOUBLE
64493: LD_INT 1
64495: DEC
64496: ST_TO_ADDR
64497: LD_INT 8
64499: PUSH
64500: FOR_TO
64501: IFFALSE 64549
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64503: LD_OWVAR 2
64507: PUSH
64508: LD_VAR 0 1
64512: NONEQUAL
64513: PUSH
64514: LD_OWVAR 2
64518: PPUSH
64519: LD_VAR 0 1
64523: PPUSH
64524: CALL_OW 81
64528: PUSH
64529: LD_INT 2
64531: EQUAL
64532: AND
64533: IFFALSE 64547
// begin side := i ;
64535: LD_ADDR_VAR 0 3
64539: PUSH
64540: LD_VAR 0 1
64544: ST_TO_ADDR
// break ;
64545: GO 64549
// end ;
64547: GO 64500
64549: POP
64550: POP
// if not side then
64551: LD_VAR 0 3
64555: NOT
64556: IFFALSE 64560
// exit ;
64558: GO 64605
// for i := 1 to tmp do
64560: LD_ADDR_VAR 0 1
64564: PUSH
64565: DOUBLE
64566: LD_INT 1
64568: DEC
64569: ST_TO_ADDR
64570: LD_VAR 0 2
64574: PUSH
64575: FOR_TO
64576: IFFALSE 64603
// if Prob ( 60 ) then
64578: LD_INT 60
64580: PPUSH
64581: CALL_OW 13
64585: IFFALSE 64601
// SetSide ( i , side ) ;
64587: LD_VAR 0 1
64591: PPUSH
64592: LD_VAR 0 3
64596: PPUSH
64597: CALL_OW 235
64601: GO 64575
64603: POP
64604: POP
// end ;
64605: PPOPN 3
64607: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64608: LD_EXP 53
64612: PUSH
64613: LD_EXP 66
64617: AND
64618: IFFALSE 64737
64620: GO 64622
64622: DISABLE
64623: LD_INT 0
64625: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64626: LD_ADDR_VAR 0 1
64630: PUSH
64631: LD_INT 22
64633: PUSH
64634: LD_OWVAR 2
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 21
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 3
64655: PUSH
64656: LD_INT 23
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: LIST
64674: PPUSH
64675: CALL_OW 69
64679: PUSH
64680: FOR_IN
64681: IFFALSE 64735
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64683: LD_VAR 0 1
64687: PPUSH
64688: CALL_OW 257
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: LD_INT 2
64698: PUSH
64699: LD_INT 3
64701: PUSH
64702: LD_INT 4
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: IN
64711: IFFALSE 64733
// SetClass ( un , rand ( 1 , 4 ) ) ;
64713: LD_VAR 0 1
64717: PPUSH
64718: LD_INT 1
64720: PPUSH
64721: LD_INT 4
64723: PPUSH
64724: CALL_OW 12
64728: PPUSH
64729: CALL_OW 336
64733: GO 64680
64735: POP
64736: POP
// end ;
64737: PPOPN 1
64739: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64740: LD_EXP 53
64744: PUSH
64745: LD_EXP 65
64749: AND
64750: IFFALSE 64829
64752: GO 64754
64754: DISABLE
64755: LD_INT 0
64757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64758: LD_ADDR_VAR 0 1
64762: PUSH
64763: LD_INT 22
64765: PUSH
64766: LD_OWVAR 2
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 21
64777: PUSH
64778: LD_INT 3
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PPUSH
64789: CALL_OW 69
64793: ST_TO_ADDR
// if not tmp then
64794: LD_VAR 0 1
64798: NOT
64799: IFFALSE 64803
// exit ;
64801: GO 64829
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
64803: LD_VAR 0 1
64807: PUSH
64808: LD_INT 1
64810: PPUSH
64811: LD_VAR 0 1
64815: PPUSH
64816: CALL_OW 12
64820: ARRAY
64821: PPUSH
64822: LD_INT 100
64824: PPUSH
64825: CALL_OW 234
// end ;
64829: PPOPN 1
64831: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
64832: LD_EXP 53
64836: PUSH
64837: LD_EXP 67
64841: AND
64842: IFFALSE 64940
64844: GO 64846
64846: DISABLE
64847: LD_INT 0
64849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64850: LD_ADDR_VAR 0 1
64854: PUSH
64855: LD_INT 22
64857: PUSH
64858: LD_OWVAR 2
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 21
64869: PUSH
64870: LD_INT 1
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PPUSH
64881: CALL_OW 69
64885: ST_TO_ADDR
// if not tmp then
64886: LD_VAR 0 1
64890: NOT
64891: IFFALSE 64895
// exit ;
64893: GO 64940
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
64895: LD_VAR 0 1
64899: PUSH
64900: LD_INT 1
64902: PPUSH
64903: LD_VAR 0 1
64907: PPUSH
64908: CALL_OW 12
64912: ARRAY
64913: PPUSH
64914: LD_INT 1
64916: PPUSH
64917: LD_INT 4
64919: PPUSH
64920: CALL_OW 12
64924: PPUSH
64925: LD_INT 3000
64927: PPUSH
64928: LD_INT 9000
64930: PPUSH
64931: CALL_OW 12
64935: PPUSH
64936: CALL_OW 492
// end ;
64940: PPOPN 1
64942: END
// every 0 0$1 trigger StreamModeActive and sDepot do
64943: LD_EXP 53
64947: PUSH
64948: LD_EXP 68
64952: AND
64953: IFFALSE 64973
64955: GO 64957
64957: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
64958: LD_INT 1
64960: PPUSH
64961: LD_OWVAR 2
64965: PPUSH
64966: LD_INT 0
64968: PPUSH
64969: CALL_OW 324
64973: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
64974: LD_EXP 53
64978: PUSH
64979: LD_EXP 69
64983: AND
64984: IFFALSE 65067
64986: GO 64988
64988: DISABLE
64989: LD_INT 0
64991: PPUSH
64992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64993: LD_ADDR_VAR 0 2
64997: PUSH
64998: LD_INT 22
65000: PUSH
65001: LD_OWVAR 2
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 21
65012: PUSH
65013: LD_INT 3
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PPUSH
65024: CALL_OW 69
65028: ST_TO_ADDR
// if not tmp then
65029: LD_VAR 0 2
65033: NOT
65034: IFFALSE 65038
// exit ;
65036: GO 65067
// for i in tmp do
65038: LD_ADDR_VAR 0 1
65042: PUSH
65043: LD_VAR 0 2
65047: PUSH
65048: FOR_IN
65049: IFFALSE 65065
// SetBLevel ( i , 10 ) ;
65051: LD_VAR 0 1
65055: PPUSH
65056: LD_INT 10
65058: PPUSH
65059: CALL_OW 241
65063: GO 65048
65065: POP
65066: POP
// end ;
65067: PPOPN 2
65069: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65070: LD_EXP 53
65074: PUSH
65075: LD_EXP 70
65079: AND
65080: IFFALSE 65191
65082: GO 65084
65084: DISABLE
65085: LD_INT 0
65087: PPUSH
65088: PPUSH
65089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65090: LD_ADDR_VAR 0 3
65094: PUSH
65095: LD_INT 22
65097: PUSH
65098: LD_OWVAR 2
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 25
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PPUSH
65121: CALL_OW 69
65125: ST_TO_ADDR
// if not tmp then
65126: LD_VAR 0 3
65130: NOT
65131: IFFALSE 65135
// exit ;
65133: GO 65191
// un := tmp [ rand ( 1 , tmp ) ] ;
65135: LD_ADDR_VAR 0 2
65139: PUSH
65140: LD_VAR 0 3
65144: PUSH
65145: LD_INT 1
65147: PPUSH
65148: LD_VAR 0 3
65152: PPUSH
65153: CALL_OW 12
65157: ARRAY
65158: ST_TO_ADDR
// if Crawls ( un ) then
65159: LD_VAR 0 2
65163: PPUSH
65164: CALL_OW 318
65168: IFFALSE 65179
// ComWalk ( un ) ;
65170: LD_VAR 0 2
65174: PPUSH
65175: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65179: LD_VAR 0 2
65183: PPUSH
65184: LD_INT 5
65186: PPUSH
65187: CALL_OW 336
// end ;
65191: PPOPN 3
65193: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65194: LD_EXP 53
65198: PUSH
65199: LD_EXP 71
65203: AND
65204: PUSH
65205: LD_OWVAR 67
65209: PUSH
65210: LD_INT 4
65212: LESS
65213: AND
65214: IFFALSE 65233
65216: GO 65218
65218: DISABLE
// begin Difficulty := Difficulty + 1 ;
65219: LD_ADDR_OWVAR 67
65223: PUSH
65224: LD_OWVAR 67
65228: PUSH
65229: LD_INT 1
65231: PLUS
65232: ST_TO_ADDR
// end ;
65233: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65234: LD_EXP 53
65238: PUSH
65239: LD_EXP 72
65243: AND
65244: IFFALSE 65347
65246: GO 65248
65248: DISABLE
65249: LD_INT 0
65251: PPUSH
// begin for i := 1 to 5 do
65252: LD_ADDR_VAR 0 1
65256: PUSH
65257: DOUBLE
65258: LD_INT 1
65260: DEC
65261: ST_TO_ADDR
65262: LD_INT 5
65264: PUSH
65265: FOR_TO
65266: IFFALSE 65345
// begin uc_nation := nation_nature ;
65268: LD_ADDR_OWVAR 21
65272: PUSH
65273: LD_INT 0
65275: ST_TO_ADDR
// uc_side := 0 ;
65276: LD_ADDR_OWVAR 20
65280: PUSH
65281: LD_INT 0
65283: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65284: LD_ADDR_OWVAR 29
65288: PUSH
65289: LD_INT 12
65291: PUSH
65292: LD_INT 12
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: ST_TO_ADDR
// hc_agressivity := 20 ;
65299: LD_ADDR_OWVAR 35
65303: PUSH
65304: LD_INT 20
65306: ST_TO_ADDR
// hc_class := class_tiger ;
65307: LD_ADDR_OWVAR 28
65311: PUSH
65312: LD_INT 14
65314: ST_TO_ADDR
// hc_gallery :=  ;
65315: LD_ADDR_OWVAR 33
65319: PUSH
65320: LD_STRING 
65322: ST_TO_ADDR
// hc_name :=  ;
65323: LD_ADDR_OWVAR 26
65327: PUSH
65328: LD_STRING 
65330: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65331: CALL_OW 44
65335: PPUSH
65336: LD_INT 0
65338: PPUSH
65339: CALL_OW 51
// end ;
65343: GO 65265
65345: POP
65346: POP
// end ;
65347: PPOPN 1
65349: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65350: LD_EXP 53
65354: PUSH
65355: LD_EXP 73
65359: AND
65360: IFFALSE 65369
65362: GO 65364
65364: DISABLE
// StreamSibBomb ;
65365: CALL 65370 0 0
65369: END
// export function StreamSibBomb ; var i , x , y ; begin
65370: LD_INT 0
65372: PPUSH
65373: PPUSH
65374: PPUSH
65375: PPUSH
// result := false ;
65376: LD_ADDR_VAR 0 1
65380: PUSH
65381: LD_INT 0
65383: ST_TO_ADDR
// for i := 1 to 16 do
65384: LD_ADDR_VAR 0 2
65388: PUSH
65389: DOUBLE
65390: LD_INT 1
65392: DEC
65393: ST_TO_ADDR
65394: LD_INT 16
65396: PUSH
65397: FOR_TO
65398: IFFALSE 65597
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65400: LD_ADDR_VAR 0 3
65404: PUSH
65405: LD_INT 10
65407: PUSH
65408: LD_INT 20
65410: PUSH
65411: LD_INT 30
65413: PUSH
65414: LD_INT 40
65416: PUSH
65417: LD_INT 50
65419: PUSH
65420: LD_INT 60
65422: PUSH
65423: LD_INT 70
65425: PUSH
65426: LD_INT 80
65428: PUSH
65429: LD_INT 90
65431: PUSH
65432: LD_INT 100
65434: PUSH
65435: LD_INT 110
65437: PUSH
65438: LD_INT 120
65440: PUSH
65441: LD_INT 130
65443: PUSH
65444: LD_INT 140
65446: PUSH
65447: LD_INT 150
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: PPUSH
65470: LD_INT 15
65472: PPUSH
65473: CALL_OW 12
65477: ARRAY
65478: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65479: LD_ADDR_VAR 0 4
65483: PUSH
65484: LD_INT 10
65486: PUSH
65487: LD_INT 20
65489: PUSH
65490: LD_INT 30
65492: PUSH
65493: LD_INT 40
65495: PUSH
65496: LD_INT 50
65498: PUSH
65499: LD_INT 60
65501: PUSH
65502: LD_INT 70
65504: PUSH
65505: LD_INT 80
65507: PUSH
65508: LD_INT 90
65510: PUSH
65511: LD_INT 100
65513: PUSH
65514: LD_INT 110
65516: PUSH
65517: LD_INT 120
65519: PUSH
65520: LD_INT 130
65522: PUSH
65523: LD_INT 140
65525: PUSH
65526: LD_INT 150
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 1
65548: PPUSH
65549: LD_INT 15
65551: PPUSH
65552: CALL_OW 12
65556: ARRAY
65557: ST_TO_ADDR
// if ValidHex ( x , y ) then
65558: LD_VAR 0 3
65562: PPUSH
65563: LD_VAR 0 4
65567: PPUSH
65568: CALL_OW 488
65572: IFFALSE 65595
// begin result := [ x , y ] ;
65574: LD_ADDR_VAR 0 1
65578: PUSH
65579: LD_VAR 0 3
65583: PUSH
65584: LD_VAR 0 4
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: ST_TO_ADDR
// break ;
65593: GO 65597
// end ; end ;
65595: GO 65397
65597: POP
65598: POP
// if result then
65599: LD_VAR 0 1
65603: IFFALSE 65663
// begin ToLua ( playSibBomb() ) ;
65605: LD_STRING playSibBomb()
65607: PPUSH
65608: CALL_OW 559
// wait ( 0 0$14 ) ;
65612: LD_INT 490
65614: PPUSH
65615: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65619: LD_VAR 0 1
65623: PUSH
65624: LD_INT 1
65626: ARRAY
65627: PPUSH
65628: LD_VAR 0 1
65632: PUSH
65633: LD_INT 2
65635: ARRAY
65636: PPUSH
65637: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65641: LD_VAR 0 1
65645: PUSH
65646: LD_INT 1
65648: ARRAY
65649: PPUSH
65650: LD_VAR 0 1
65654: PUSH
65655: LD_INT 2
65657: ARRAY
65658: PPUSH
65659: CALL_OW 429
// end ; end ;
65663: LD_VAR 0 1
65667: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65668: LD_EXP 53
65672: PUSH
65673: LD_EXP 75
65677: AND
65678: IFFALSE 65690
65680: GO 65682
65682: DISABLE
// YouLost (  ) ;
65683: LD_STRING 
65685: PPUSH
65686: CALL_OW 104
65690: END
// every 0 0$1 trigger StreamModeActive and sFog do
65691: LD_EXP 53
65695: PUSH
65696: LD_EXP 74
65700: AND
65701: IFFALSE 65715
65703: GO 65705
65705: DISABLE
// FogOff ( your_side ) ;
65706: LD_OWVAR 2
65710: PPUSH
65711: CALL_OW 344
65715: END
// every 0 0$1 trigger StreamModeActive and sSun do
65716: LD_EXP 53
65720: PUSH
65721: LD_EXP 76
65725: AND
65726: IFFALSE 65754
65728: GO 65730
65730: DISABLE
// begin solar_recharge_percent := 0 ;
65731: LD_ADDR_OWVAR 79
65735: PUSH
65736: LD_INT 0
65738: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65739: LD_INT 10500
65741: PPUSH
65742: CALL_OW 67
// solar_recharge_percent := 100 ;
65746: LD_ADDR_OWVAR 79
65750: PUSH
65751: LD_INT 100
65753: ST_TO_ADDR
// end ;
65754: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65755: LD_EXP 53
65759: PUSH
65760: LD_EXP 77
65764: AND
65765: IFFALSE 66004
65767: GO 65769
65769: DISABLE
65770: LD_INT 0
65772: PPUSH
65773: PPUSH
65774: PPUSH
// begin tmp := [ ] ;
65775: LD_ADDR_VAR 0 3
65779: PUSH
65780: EMPTY
65781: ST_TO_ADDR
// for i := 1 to 6 do
65782: LD_ADDR_VAR 0 1
65786: PUSH
65787: DOUBLE
65788: LD_INT 1
65790: DEC
65791: ST_TO_ADDR
65792: LD_INT 6
65794: PUSH
65795: FOR_TO
65796: IFFALSE 65901
// begin uc_nation := nation_nature ;
65798: LD_ADDR_OWVAR 21
65802: PUSH
65803: LD_INT 0
65805: ST_TO_ADDR
// uc_side := 0 ;
65806: LD_ADDR_OWVAR 20
65810: PUSH
65811: LD_INT 0
65813: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65814: LD_ADDR_OWVAR 29
65818: PUSH
65819: LD_INT 12
65821: PUSH
65822: LD_INT 12
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: ST_TO_ADDR
// hc_agressivity := 20 ;
65829: LD_ADDR_OWVAR 35
65833: PUSH
65834: LD_INT 20
65836: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
65837: LD_ADDR_OWVAR 28
65841: PUSH
65842: LD_INT 17
65844: ST_TO_ADDR
// hc_gallery :=  ;
65845: LD_ADDR_OWVAR 33
65849: PUSH
65850: LD_STRING 
65852: ST_TO_ADDR
// hc_name :=  ;
65853: LD_ADDR_OWVAR 26
65857: PUSH
65858: LD_STRING 
65860: ST_TO_ADDR
// un := CreateHuman ;
65861: LD_ADDR_VAR 0 2
65865: PUSH
65866: CALL_OW 44
65870: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
65871: LD_VAR 0 2
65875: PPUSH
65876: LD_INT 1
65878: PPUSH
65879: CALL_OW 51
// tmp := tmp ^ un ;
65883: LD_ADDR_VAR 0 3
65887: PUSH
65888: LD_VAR 0 3
65892: PUSH
65893: LD_VAR 0 2
65897: ADD
65898: ST_TO_ADDR
// end ;
65899: GO 65795
65901: POP
65902: POP
// repeat wait ( 0 0$1 ) ;
65903: LD_INT 35
65905: PPUSH
65906: CALL_OW 67
// for un in tmp do
65910: LD_ADDR_VAR 0 2
65914: PUSH
65915: LD_VAR 0 3
65919: PUSH
65920: FOR_IN
65921: IFFALSE 65995
// begin if IsDead ( un ) then
65923: LD_VAR 0 2
65927: PPUSH
65928: CALL_OW 301
65932: IFFALSE 65952
// begin tmp := tmp diff un ;
65934: LD_ADDR_VAR 0 3
65938: PUSH
65939: LD_VAR 0 3
65943: PUSH
65944: LD_VAR 0 2
65948: DIFF
65949: ST_TO_ADDR
// continue ;
65950: GO 65920
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
65952: LD_VAR 0 2
65956: PPUSH
65957: LD_INT 3
65959: PUSH
65960: LD_INT 22
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PPUSH
65974: CALL_OW 69
65978: PPUSH
65979: LD_VAR 0 2
65983: PPUSH
65984: CALL_OW 74
65988: PPUSH
65989: CALL_OW 115
// end ;
65993: GO 65920
65995: POP
65996: POP
// until not tmp ;
65997: LD_VAR 0 3
66001: NOT
66002: IFFALSE 65903
// end ;
66004: PPOPN 3
66006: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66007: LD_EXP 53
66011: PUSH
66012: LD_EXP 78
66016: AND
66017: IFFALSE 66071
66019: GO 66021
66021: DISABLE
// begin ToLua ( displayTroll(); ) ;
66022: LD_STRING displayTroll();
66024: PPUSH
66025: CALL_OW 559
// wait ( 3 3$00 ) ;
66029: LD_INT 6300
66031: PPUSH
66032: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66036: LD_STRING hideTroll();
66038: PPUSH
66039: CALL_OW 559
// wait ( 1 1$00 ) ;
66043: LD_INT 2100
66045: PPUSH
66046: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66050: LD_STRING displayTroll();
66052: PPUSH
66053: CALL_OW 559
// wait ( 1 1$00 ) ;
66057: LD_INT 2100
66059: PPUSH
66060: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66064: LD_STRING hideTroll();
66066: PPUSH
66067: CALL_OW 559
// end ;
66071: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66072: LD_EXP 53
66076: PUSH
66077: LD_EXP 79
66081: AND
66082: IFFALSE 66145
66084: GO 66086
66086: DISABLE
66087: LD_INT 0
66089: PPUSH
// begin p := 0 ;
66090: LD_ADDR_VAR 0 1
66094: PUSH
66095: LD_INT 0
66097: ST_TO_ADDR
// repeat game_speed := 1 ;
66098: LD_ADDR_OWVAR 65
66102: PUSH
66103: LD_INT 1
66105: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66106: LD_INT 35
66108: PPUSH
66109: CALL_OW 67
// p := p + 1 ;
66113: LD_ADDR_VAR 0 1
66117: PUSH
66118: LD_VAR 0 1
66122: PUSH
66123: LD_INT 1
66125: PLUS
66126: ST_TO_ADDR
// until p >= 60 ;
66127: LD_VAR 0 1
66131: PUSH
66132: LD_INT 60
66134: GREATEREQUAL
66135: IFFALSE 66098
// game_speed := 4 ;
66137: LD_ADDR_OWVAR 65
66141: PUSH
66142: LD_INT 4
66144: ST_TO_ADDR
// end ;
66145: PPOPN 1
66147: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66148: LD_EXP 53
66152: PUSH
66153: LD_EXP 80
66157: AND
66158: IFFALSE 66304
66160: GO 66162
66162: DISABLE
66163: LD_INT 0
66165: PPUSH
66166: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66167: LD_ADDR_VAR 0 1
66171: PUSH
66172: LD_INT 22
66174: PUSH
66175: LD_OWVAR 2
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 2
66186: PUSH
66187: LD_INT 30
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 30
66199: PUSH
66200: LD_INT 1
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: LIST
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PPUSH
66216: CALL_OW 69
66220: ST_TO_ADDR
// if not depot then
66221: LD_VAR 0 1
66225: NOT
66226: IFFALSE 66230
// exit ;
66228: GO 66304
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66230: LD_ADDR_VAR 0 2
66234: PUSH
66235: LD_VAR 0 1
66239: PUSH
66240: LD_INT 1
66242: PPUSH
66243: LD_VAR 0 1
66247: PPUSH
66248: CALL_OW 12
66252: ARRAY
66253: PPUSH
66254: CALL_OW 274
66258: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66259: LD_VAR 0 2
66263: PPUSH
66264: LD_INT 1
66266: PPUSH
66267: LD_INT 0
66269: PPUSH
66270: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66274: LD_VAR 0 2
66278: PPUSH
66279: LD_INT 2
66281: PPUSH
66282: LD_INT 0
66284: PPUSH
66285: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66289: LD_VAR 0 2
66293: PPUSH
66294: LD_INT 3
66296: PPUSH
66297: LD_INT 0
66299: PPUSH
66300: CALL_OW 277
// end ;
66304: PPOPN 2
66306: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66307: LD_EXP 53
66311: PUSH
66312: LD_EXP 81
66316: AND
66317: IFFALSE 66414
66319: GO 66321
66321: DISABLE
66322: LD_INT 0
66324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66325: LD_ADDR_VAR 0 1
66329: PUSH
66330: LD_INT 22
66332: PUSH
66333: LD_OWVAR 2
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 21
66344: PUSH
66345: LD_INT 1
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 3
66354: PUSH
66355: LD_INT 23
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: LIST
66373: PPUSH
66374: CALL_OW 69
66378: ST_TO_ADDR
// if not tmp then
66379: LD_VAR 0 1
66383: NOT
66384: IFFALSE 66388
// exit ;
66386: GO 66414
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66388: LD_VAR 0 1
66392: PUSH
66393: LD_INT 1
66395: PPUSH
66396: LD_VAR 0 1
66400: PPUSH
66401: CALL_OW 12
66405: ARRAY
66406: PPUSH
66407: LD_INT 200
66409: PPUSH
66410: CALL_OW 234
// end ;
66414: PPOPN 1
66416: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66417: LD_EXP 53
66421: PUSH
66422: LD_EXP 82
66426: AND
66427: IFFALSE 66506
66429: GO 66431
66431: DISABLE
66432: LD_INT 0
66434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66435: LD_ADDR_VAR 0 1
66439: PUSH
66440: LD_INT 22
66442: PUSH
66443: LD_OWVAR 2
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 21
66454: PUSH
66455: LD_INT 2
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PPUSH
66466: CALL_OW 69
66470: ST_TO_ADDR
// if not tmp then
66471: LD_VAR 0 1
66475: NOT
66476: IFFALSE 66480
// exit ;
66478: GO 66506
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66480: LD_VAR 0 1
66484: PUSH
66485: LD_INT 1
66487: PPUSH
66488: LD_VAR 0 1
66492: PPUSH
66493: CALL_OW 12
66497: ARRAY
66498: PPUSH
66499: LD_INT 60
66501: PPUSH
66502: CALL_OW 234
// end ;
66506: PPOPN 1
66508: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66509: LD_EXP 53
66513: PUSH
66514: LD_EXP 83
66518: AND
66519: IFFALSE 66618
66521: GO 66523
66523: DISABLE
66524: LD_INT 0
66526: PPUSH
66527: PPUSH
// begin enable ;
66528: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66529: LD_ADDR_VAR 0 1
66533: PUSH
66534: LD_INT 22
66536: PUSH
66537: LD_OWVAR 2
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 61
66548: PUSH
66549: EMPTY
66550: LIST
66551: PUSH
66552: LD_INT 33
66554: PUSH
66555: LD_INT 2
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: LIST
66566: PPUSH
66567: CALL_OW 69
66571: ST_TO_ADDR
// if not tmp then
66572: LD_VAR 0 1
66576: NOT
66577: IFFALSE 66581
// exit ;
66579: GO 66618
// for i in tmp do
66581: LD_ADDR_VAR 0 2
66585: PUSH
66586: LD_VAR 0 1
66590: PUSH
66591: FOR_IN
66592: IFFALSE 66616
// if IsControledBy ( i ) then
66594: LD_VAR 0 2
66598: PPUSH
66599: CALL_OW 312
66603: IFFALSE 66614
// ComUnlink ( i ) ;
66605: LD_VAR 0 2
66609: PPUSH
66610: CALL_OW 136
66614: GO 66591
66616: POP
66617: POP
// end ;
66618: PPOPN 2
66620: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66621: LD_EXP 53
66625: PUSH
66626: LD_EXP 84
66630: AND
66631: IFFALSE 66771
66633: GO 66635
66635: DISABLE
66636: LD_INT 0
66638: PPUSH
66639: PPUSH
// begin ToLua ( displayPowell(); ) ;
66640: LD_STRING displayPowell();
66642: PPUSH
66643: CALL_OW 559
// uc_side := 0 ;
66647: LD_ADDR_OWVAR 20
66651: PUSH
66652: LD_INT 0
66654: ST_TO_ADDR
// uc_nation := 2 ;
66655: LD_ADDR_OWVAR 21
66659: PUSH
66660: LD_INT 2
66662: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66663: LD_ADDR_OWVAR 37
66667: PUSH
66668: LD_INT 14
66670: ST_TO_ADDR
// vc_engine := engine_siberite ;
66671: LD_ADDR_OWVAR 39
66675: PUSH
66676: LD_INT 3
66678: ST_TO_ADDR
// vc_control := control_apeman ;
66679: LD_ADDR_OWVAR 38
66683: PUSH
66684: LD_INT 5
66686: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66687: LD_ADDR_OWVAR 40
66691: PUSH
66692: LD_INT 29
66694: ST_TO_ADDR
// un := CreateVehicle ;
66695: LD_ADDR_VAR 0 2
66699: PUSH
66700: CALL_OW 45
66704: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66705: LD_VAR 0 2
66709: PPUSH
66710: LD_INT 1
66712: PPUSH
66713: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66717: LD_INT 35
66719: PPUSH
66720: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66724: LD_VAR 0 2
66728: PPUSH
66729: LD_INT 22
66731: PUSH
66732: LD_OWVAR 2
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PPUSH
66741: CALL_OW 69
66745: PPUSH
66746: LD_VAR 0 2
66750: PPUSH
66751: CALL_OW 74
66755: PPUSH
66756: CALL_OW 115
// until IsDead ( un ) ;
66760: LD_VAR 0 2
66764: PPUSH
66765: CALL_OW 301
66769: IFFALSE 66717
// end ;
66771: PPOPN 2
66773: END
// every 0 0$1 trigger StreamModeActive and sStu do
66774: LD_EXP 53
66778: PUSH
66779: LD_EXP 92
66783: AND
66784: IFFALSE 66800
66786: GO 66788
66788: DISABLE
// begin ToLua ( displayStucuk(); ) ;
66789: LD_STRING displayStucuk();
66791: PPUSH
66792: CALL_OW 559
// ResetFog ;
66796: CALL_OW 335
// end ;
66800: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
66801: LD_EXP 53
66805: PUSH
66806: LD_EXP 85
66810: AND
66811: IFFALSE 66952
66813: GO 66815
66815: DISABLE
66816: LD_INT 0
66818: PPUSH
66819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66820: LD_ADDR_VAR 0 2
66824: PUSH
66825: LD_INT 22
66827: PUSH
66828: LD_OWVAR 2
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 21
66839: PUSH
66840: LD_INT 1
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PPUSH
66851: CALL_OW 69
66855: ST_TO_ADDR
// if not tmp then
66856: LD_VAR 0 2
66860: NOT
66861: IFFALSE 66865
// exit ;
66863: GO 66952
// un := tmp [ rand ( 1 , tmp ) ] ;
66865: LD_ADDR_VAR 0 1
66869: PUSH
66870: LD_VAR 0 2
66874: PUSH
66875: LD_INT 1
66877: PPUSH
66878: LD_VAR 0 2
66882: PPUSH
66883: CALL_OW 12
66887: ARRAY
66888: ST_TO_ADDR
// SetSide ( un , 0 ) ;
66889: LD_VAR 0 1
66893: PPUSH
66894: LD_INT 0
66896: PPUSH
66897: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
66901: LD_VAR 0 1
66905: PPUSH
66906: LD_OWVAR 3
66910: PUSH
66911: LD_VAR 0 1
66915: DIFF
66916: PPUSH
66917: LD_VAR 0 1
66921: PPUSH
66922: CALL_OW 74
66926: PPUSH
66927: CALL_OW 115
// wait ( 0 0$20 ) ;
66931: LD_INT 700
66933: PPUSH
66934: CALL_OW 67
// SetSide ( un , your_side ) ;
66938: LD_VAR 0 1
66942: PPUSH
66943: LD_OWVAR 2
66947: PPUSH
66948: CALL_OW 235
// end ;
66952: PPOPN 2
66954: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
66955: LD_EXP 53
66959: PUSH
66960: LD_EXP 86
66964: AND
66965: IFFALSE 67071
66967: GO 66969
66969: DISABLE
66970: LD_INT 0
66972: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66973: LD_ADDR_VAR 0 1
66977: PUSH
66978: LD_INT 22
66980: PUSH
66981: LD_OWVAR 2
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 2
66992: PUSH
66993: LD_INT 30
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 30
67005: PUSH
67006: LD_INT 1
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: LIST
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PPUSH
67022: CALL_OW 69
67026: ST_TO_ADDR
// if not depot then
67027: LD_VAR 0 1
67031: NOT
67032: IFFALSE 67036
// exit ;
67034: GO 67071
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67036: LD_VAR 0 1
67040: PUSH
67041: LD_INT 1
67043: ARRAY
67044: PPUSH
67045: CALL_OW 250
67049: PPUSH
67050: LD_VAR 0 1
67054: PUSH
67055: LD_INT 1
67057: ARRAY
67058: PPUSH
67059: CALL_OW 251
67063: PPUSH
67064: LD_INT 70
67066: PPUSH
67067: CALL_OW 495
// end ;
67071: PPOPN 1
67073: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67074: LD_EXP 53
67078: PUSH
67079: LD_EXP 87
67083: AND
67084: IFFALSE 67295
67086: GO 67088
67088: DISABLE
67089: LD_INT 0
67091: PPUSH
67092: PPUSH
67093: PPUSH
67094: PPUSH
67095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67096: LD_ADDR_VAR 0 5
67100: PUSH
67101: LD_INT 22
67103: PUSH
67104: LD_OWVAR 2
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 21
67115: PUSH
67116: LD_INT 1
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PPUSH
67127: CALL_OW 69
67131: ST_TO_ADDR
// if not tmp then
67132: LD_VAR 0 5
67136: NOT
67137: IFFALSE 67141
// exit ;
67139: GO 67295
// for i in tmp do
67141: LD_ADDR_VAR 0 1
67145: PUSH
67146: LD_VAR 0 5
67150: PUSH
67151: FOR_IN
67152: IFFALSE 67293
// begin d := rand ( 0 , 5 ) ;
67154: LD_ADDR_VAR 0 4
67158: PUSH
67159: LD_INT 0
67161: PPUSH
67162: LD_INT 5
67164: PPUSH
67165: CALL_OW 12
67169: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67170: LD_ADDR_VAR 0 2
67174: PUSH
67175: LD_VAR 0 1
67179: PPUSH
67180: CALL_OW 250
67184: PPUSH
67185: LD_VAR 0 4
67189: PPUSH
67190: LD_INT 3
67192: PPUSH
67193: LD_INT 12
67195: PPUSH
67196: CALL_OW 12
67200: PPUSH
67201: CALL_OW 272
67205: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67206: LD_ADDR_VAR 0 3
67210: PUSH
67211: LD_VAR 0 1
67215: PPUSH
67216: CALL_OW 251
67220: PPUSH
67221: LD_VAR 0 4
67225: PPUSH
67226: LD_INT 3
67228: PPUSH
67229: LD_INT 12
67231: PPUSH
67232: CALL_OW 12
67236: PPUSH
67237: CALL_OW 273
67241: ST_TO_ADDR
// if ValidHex ( x , y ) then
67242: LD_VAR 0 2
67246: PPUSH
67247: LD_VAR 0 3
67251: PPUSH
67252: CALL_OW 488
67256: IFFALSE 67291
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67258: LD_VAR 0 1
67262: PPUSH
67263: LD_VAR 0 2
67267: PPUSH
67268: LD_VAR 0 3
67272: PPUSH
67273: LD_INT 3
67275: PPUSH
67276: LD_INT 6
67278: PPUSH
67279: CALL_OW 12
67283: PPUSH
67284: LD_INT 1
67286: PPUSH
67287: CALL_OW 483
// end ;
67291: GO 67151
67293: POP
67294: POP
// end ;
67295: PPOPN 5
67297: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67298: LD_EXP 53
67302: PUSH
67303: LD_EXP 88
67307: AND
67308: IFFALSE 67402
67310: GO 67312
67312: DISABLE
67313: LD_INT 0
67315: PPUSH
67316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67317: LD_ADDR_VAR 0 2
67321: PUSH
67322: LD_INT 22
67324: PUSH
67325: LD_OWVAR 2
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 32
67336: PUSH
67337: LD_INT 1
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 21
67346: PUSH
67347: LD_INT 2
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: LIST
67358: PPUSH
67359: CALL_OW 69
67363: ST_TO_ADDR
// if not tmp then
67364: LD_VAR 0 2
67368: NOT
67369: IFFALSE 67373
// exit ;
67371: GO 67402
// for i in tmp do
67373: LD_ADDR_VAR 0 1
67377: PUSH
67378: LD_VAR 0 2
67382: PUSH
67383: FOR_IN
67384: IFFALSE 67400
// SetFuel ( i , 0 ) ;
67386: LD_VAR 0 1
67390: PPUSH
67391: LD_INT 0
67393: PPUSH
67394: CALL_OW 240
67398: GO 67383
67400: POP
67401: POP
// end ;
67402: PPOPN 2
67404: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67405: LD_EXP 53
67409: PUSH
67410: LD_EXP 89
67414: AND
67415: IFFALSE 67481
67417: GO 67419
67419: DISABLE
67420: LD_INT 0
67422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67423: LD_ADDR_VAR 0 1
67427: PUSH
67428: LD_INT 22
67430: PUSH
67431: LD_OWVAR 2
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 30
67442: PUSH
67443: LD_INT 29
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PPUSH
67454: CALL_OW 69
67458: ST_TO_ADDR
// if not tmp then
67459: LD_VAR 0 1
67463: NOT
67464: IFFALSE 67468
// exit ;
67466: GO 67481
// DestroyUnit ( tmp [ 1 ] ) ;
67468: LD_VAR 0 1
67472: PUSH
67473: LD_INT 1
67475: ARRAY
67476: PPUSH
67477: CALL_OW 65
// end ;
67481: PPOPN 1
67483: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67484: LD_EXP 53
67488: PUSH
67489: LD_EXP 91
67493: AND
67494: IFFALSE 67623
67496: GO 67498
67498: DISABLE
67499: LD_INT 0
67501: PPUSH
// begin uc_side := 0 ;
67502: LD_ADDR_OWVAR 20
67506: PUSH
67507: LD_INT 0
67509: ST_TO_ADDR
// uc_nation := nation_arabian ;
67510: LD_ADDR_OWVAR 21
67514: PUSH
67515: LD_INT 2
67517: ST_TO_ADDR
// hc_gallery :=  ;
67518: LD_ADDR_OWVAR 33
67522: PUSH
67523: LD_STRING 
67525: ST_TO_ADDR
// hc_name :=  ;
67526: LD_ADDR_OWVAR 26
67530: PUSH
67531: LD_STRING 
67533: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67534: LD_INT 1
67536: PPUSH
67537: LD_INT 11
67539: PPUSH
67540: LD_INT 10
67542: PPUSH
67543: CALL_OW 380
// un := CreateHuman ;
67547: LD_ADDR_VAR 0 1
67551: PUSH
67552: CALL_OW 44
67556: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67557: LD_VAR 0 1
67561: PPUSH
67562: LD_INT 1
67564: PPUSH
67565: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67569: LD_INT 35
67571: PPUSH
67572: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67576: LD_VAR 0 1
67580: PPUSH
67581: LD_INT 22
67583: PUSH
67584: LD_OWVAR 2
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PPUSH
67593: CALL_OW 69
67597: PPUSH
67598: LD_VAR 0 1
67602: PPUSH
67603: CALL_OW 74
67607: PPUSH
67608: CALL_OW 115
// until IsDead ( un ) ;
67612: LD_VAR 0 1
67616: PPUSH
67617: CALL_OW 301
67621: IFFALSE 67569
// end ;
67623: PPOPN 1
67625: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67626: LD_EXP 53
67630: PUSH
67631: LD_EXP 93
67635: AND
67636: IFFALSE 67648
67638: GO 67640
67640: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67641: LD_STRING earthquake(getX(game), 0, 32)
67643: PPUSH
67644: CALL_OW 559
67648: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67649: LD_EXP 53
67653: PUSH
67654: LD_EXP 94
67658: AND
67659: IFFALSE 67750
67661: GO 67663
67663: DISABLE
67664: LD_INT 0
67666: PPUSH
// begin enable ;
67667: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67668: LD_ADDR_VAR 0 1
67672: PUSH
67673: LD_INT 22
67675: PUSH
67676: LD_OWVAR 2
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 21
67687: PUSH
67688: LD_INT 2
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 33
67697: PUSH
67698: LD_INT 3
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: LIST
67709: PPUSH
67710: CALL_OW 69
67714: ST_TO_ADDR
// if not tmp then
67715: LD_VAR 0 1
67719: NOT
67720: IFFALSE 67724
// exit ;
67722: GO 67750
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67724: LD_VAR 0 1
67728: PUSH
67729: LD_INT 1
67731: PPUSH
67732: LD_VAR 0 1
67736: PPUSH
67737: CALL_OW 12
67741: ARRAY
67742: PPUSH
67743: LD_INT 1
67745: PPUSH
67746: CALL_OW 234
// end ;
67750: PPOPN 1
67752: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67753: LD_EXP 53
67757: PUSH
67758: LD_EXP 95
67762: AND
67763: IFFALSE 67904
67765: GO 67767
67767: DISABLE
67768: LD_INT 0
67770: PPUSH
67771: PPUSH
67772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67773: LD_ADDR_VAR 0 3
67777: PUSH
67778: LD_INT 22
67780: PUSH
67781: LD_OWVAR 2
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 25
67792: PUSH
67793: LD_INT 1
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PPUSH
67804: CALL_OW 69
67808: ST_TO_ADDR
// if not tmp then
67809: LD_VAR 0 3
67813: NOT
67814: IFFALSE 67818
// exit ;
67816: GO 67904
// un := tmp [ rand ( 1 , tmp ) ] ;
67818: LD_ADDR_VAR 0 2
67822: PUSH
67823: LD_VAR 0 3
67827: PUSH
67828: LD_INT 1
67830: PPUSH
67831: LD_VAR 0 3
67835: PPUSH
67836: CALL_OW 12
67840: ARRAY
67841: ST_TO_ADDR
// if Crawls ( un ) then
67842: LD_VAR 0 2
67846: PPUSH
67847: CALL_OW 318
67851: IFFALSE 67862
// ComWalk ( un ) ;
67853: LD_VAR 0 2
67857: PPUSH
67858: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
67862: LD_VAR 0 2
67866: PPUSH
67867: LD_INT 9
67869: PPUSH
67870: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
67874: LD_INT 28
67876: PPUSH
67877: LD_OWVAR 2
67881: PPUSH
67882: LD_INT 2
67884: PPUSH
67885: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
67889: LD_INT 29
67891: PPUSH
67892: LD_OWVAR 2
67896: PPUSH
67897: LD_INT 2
67899: PPUSH
67900: CALL_OW 322
// end ;
67904: PPOPN 3
67906: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
67907: LD_EXP 53
67911: PUSH
67912: LD_EXP 96
67916: AND
67917: IFFALSE 68028
67919: GO 67921
67921: DISABLE
67922: LD_INT 0
67924: PPUSH
67925: PPUSH
67926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67927: LD_ADDR_VAR 0 3
67931: PUSH
67932: LD_INT 22
67934: PUSH
67935: LD_OWVAR 2
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 25
67946: PUSH
67947: LD_INT 1
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PPUSH
67958: CALL_OW 69
67962: ST_TO_ADDR
// if not tmp then
67963: LD_VAR 0 3
67967: NOT
67968: IFFALSE 67972
// exit ;
67970: GO 68028
// un := tmp [ rand ( 1 , tmp ) ] ;
67972: LD_ADDR_VAR 0 2
67976: PUSH
67977: LD_VAR 0 3
67981: PUSH
67982: LD_INT 1
67984: PPUSH
67985: LD_VAR 0 3
67989: PPUSH
67990: CALL_OW 12
67994: ARRAY
67995: ST_TO_ADDR
// if Crawls ( un ) then
67996: LD_VAR 0 2
68000: PPUSH
68001: CALL_OW 318
68005: IFFALSE 68016
// ComWalk ( un ) ;
68007: LD_VAR 0 2
68011: PPUSH
68012: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68016: LD_VAR 0 2
68020: PPUSH
68021: LD_INT 8
68023: PPUSH
68024: CALL_OW 336
// end ;
68028: PPOPN 3
68030: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68031: LD_EXP 53
68035: PUSH
68036: LD_EXP 97
68040: AND
68041: IFFALSE 68185
68043: GO 68045
68045: DISABLE
68046: LD_INT 0
68048: PPUSH
68049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68050: LD_ADDR_VAR 0 2
68054: PUSH
68055: LD_INT 22
68057: PUSH
68058: LD_OWVAR 2
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 21
68069: PUSH
68070: LD_INT 2
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 2
68079: PUSH
68080: LD_INT 34
68082: PUSH
68083: LD_INT 12
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 34
68092: PUSH
68093: LD_INT 51
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 34
68102: PUSH
68103: LD_INT 32
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: LIST
68120: PPUSH
68121: CALL_OW 69
68125: ST_TO_ADDR
// if not tmp then
68126: LD_VAR 0 2
68130: NOT
68131: IFFALSE 68135
// exit ;
68133: GO 68185
// for i in tmp do
68135: LD_ADDR_VAR 0 1
68139: PUSH
68140: LD_VAR 0 2
68144: PUSH
68145: FOR_IN
68146: IFFALSE 68183
// if GetCargo ( i , mat_artifact ) = 0 then
68148: LD_VAR 0 1
68152: PPUSH
68153: LD_INT 4
68155: PPUSH
68156: CALL_OW 289
68160: PUSH
68161: LD_INT 0
68163: EQUAL
68164: IFFALSE 68181
// SetCargo ( i , mat_siberit , 100 ) ;
68166: LD_VAR 0 1
68170: PPUSH
68171: LD_INT 3
68173: PPUSH
68174: LD_INT 100
68176: PPUSH
68177: CALL_OW 290
68181: GO 68145
68183: POP
68184: POP
// end ;
68185: PPOPN 2
68187: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68188: LD_EXP 53
68192: PUSH
68193: LD_EXP 98
68197: AND
68198: IFFALSE 68381
68200: GO 68202
68202: DISABLE
68203: LD_INT 0
68205: PPUSH
68206: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68207: LD_ADDR_VAR 0 2
68211: PUSH
68212: LD_INT 22
68214: PUSH
68215: LD_OWVAR 2
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PPUSH
68224: CALL_OW 69
68228: ST_TO_ADDR
// if not tmp then
68229: LD_VAR 0 2
68233: NOT
68234: IFFALSE 68238
// exit ;
68236: GO 68381
// for i := 1 to 2 do
68238: LD_ADDR_VAR 0 1
68242: PUSH
68243: DOUBLE
68244: LD_INT 1
68246: DEC
68247: ST_TO_ADDR
68248: LD_INT 2
68250: PUSH
68251: FOR_TO
68252: IFFALSE 68379
// begin uc_side := your_side ;
68254: LD_ADDR_OWVAR 20
68258: PUSH
68259: LD_OWVAR 2
68263: ST_TO_ADDR
// uc_nation := nation_american ;
68264: LD_ADDR_OWVAR 21
68268: PUSH
68269: LD_INT 1
68271: ST_TO_ADDR
// vc_chassis := us_morphling ;
68272: LD_ADDR_OWVAR 37
68276: PUSH
68277: LD_INT 5
68279: ST_TO_ADDR
// vc_engine := engine_siberite ;
68280: LD_ADDR_OWVAR 39
68284: PUSH
68285: LD_INT 3
68287: ST_TO_ADDR
// vc_control := control_computer ;
68288: LD_ADDR_OWVAR 38
68292: PUSH
68293: LD_INT 3
68295: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68296: LD_ADDR_OWVAR 40
68300: PUSH
68301: LD_INT 10
68303: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68304: LD_VAR 0 2
68308: PUSH
68309: LD_INT 1
68311: ARRAY
68312: PPUSH
68313: CALL_OW 310
68317: NOT
68318: IFFALSE 68365
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68320: CALL_OW 45
68324: PPUSH
68325: LD_VAR 0 2
68329: PUSH
68330: LD_INT 1
68332: ARRAY
68333: PPUSH
68334: CALL_OW 250
68338: PPUSH
68339: LD_VAR 0 2
68343: PUSH
68344: LD_INT 1
68346: ARRAY
68347: PPUSH
68348: CALL_OW 251
68352: PPUSH
68353: LD_INT 12
68355: PPUSH
68356: LD_INT 1
68358: PPUSH
68359: CALL_OW 50
68363: GO 68377
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68365: CALL_OW 45
68369: PPUSH
68370: LD_INT 1
68372: PPUSH
68373: CALL_OW 51
// end ;
68377: GO 68251
68379: POP
68380: POP
// end ;
68381: PPOPN 2
68383: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68384: LD_EXP 53
68388: PUSH
68389: LD_EXP 99
68393: AND
68394: IFFALSE 68616
68396: GO 68398
68398: DISABLE
68399: LD_INT 0
68401: PPUSH
68402: PPUSH
68403: PPUSH
68404: PPUSH
68405: PPUSH
68406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68407: LD_ADDR_VAR 0 6
68411: PUSH
68412: LD_INT 22
68414: PUSH
68415: LD_OWVAR 2
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 21
68426: PUSH
68427: LD_INT 1
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 3
68436: PUSH
68437: LD_INT 23
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: LIST
68455: PPUSH
68456: CALL_OW 69
68460: ST_TO_ADDR
// if not tmp then
68461: LD_VAR 0 6
68465: NOT
68466: IFFALSE 68470
// exit ;
68468: GO 68616
// s1 := rand ( 1 , 4 ) ;
68470: LD_ADDR_VAR 0 2
68474: PUSH
68475: LD_INT 1
68477: PPUSH
68478: LD_INT 4
68480: PPUSH
68481: CALL_OW 12
68485: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68486: LD_ADDR_VAR 0 4
68490: PUSH
68491: LD_VAR 0 6
68495: PUSH
68496: LD_INT 1
68498: ARRAY
68499: PPUSH
68500: LD_VAR 0 2
68504: PPUSH
68505: CALL_OW 259
68509: ST_TO_ADDR
// if s1 = 1 then
68510: LD_VAR 0 2
68514: PUSH
68515: LD_INT 1
68517: EQUAL
68518: IFFALSE 68538
// s2 := rand ( 2 , 4 ) else
68520: LD_ADDR_VAR 0 3
68524: PUSH
68525: LD_INT 2
68527: PPUSH
68528: LD_INT 4
68530: PPUSH
68531: CALL_OW 12
68535: ST_TO_ADDR
68536: GO 68546
// s2 := 1 ;
68538: LD_ADDR_VAR 0 3
68542: PUSH
68543: LD_INT 1
68545: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68546: LD_ADDR_VAR 0 5
68550: PUSH
68551: LD_VAR 0 6
68555: PUSH
68556: LD_INT 1
68558: ARRAY
68559: PPUSH
68560: LD_VAR 0 3
68564: PPUSH
68565: CALL_OW 259
68569: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68570: LD_VAR 0 6
68574: PUSH
68575: LD_INT 1
68577: ARRAY
68578: PPUSH
68579: LD_VAR 0 2
68583: PPUSH
68584: LD_VAR 0 5
68588: PPUSH
68589: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68593: LD_VAR 0 6
68597: PUSH
68598: LD_INT 1
68600: ARRAY
68601: PPUSH
68602: LD_VAR 0 3
68606: PPUSH
68607: LD_VAR 0 4
68611: PPUSH
68612: CALL_OW 237
// end ;
68616: PPOPN 6
68618: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68619: LD_EXP 53
68623: PUSH
68624: LD_EXP 100
68628: AND
68629: IFFALSE 68708
68631: GO 68633
68633: DISABLE
68634: LD_INT 0
68636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68637: LD_ADDR_VAR 0 1
68641: PUSH
68642: LD_INT 22
68644: PUSH
68645: LD_OWVAR 2
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 30
68656: PUSH
68657: LD_INT 3
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PPUSH
68668: CALL_OW 69
68672: ST_TO_ADDR
// if not tmp then
68673: LD_VAR 0 1
68677: NOT
68678: IFFALSE 68682
// exit ;
68680: GO 68708
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68682: LD_VAR 0 1
68686: PUSH
68687: LD_INT 1
68689: PPUSH
68690: LD_VAR 0 1
68694: PPUSH
68695: CALL_OW 12
68699: ARRAY
68700: PPUSH
68701: LD_INT 1
68703: PPUSH
68704: CALL_OW 234
// end ;
68708: PPOPN 1
68710: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68711: LD_EXP 53
68715: PUSH
68716: LD_EXP 101
68720: AND
68721: IFFALSE 68833
68723: GO 68725
68725: DISABLE
68726: LD_INT 0
68728: PPUSH
68729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68730: LD_ADDR_VAR 0 2
68734: PUSH
68735: LD_INT 22
68737: PUSH
68738: LD_OWVAR 2
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 2
68749: PUSH
68750: LD_INT 30
68752: PUSH
68753: LD_INT 27
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 30
68762: PUSH
68763: LD_INT 26
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 30
68772: PUSH
68773: LD_INT 28
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PPUSH
68790: CALL_OW 69
68794: ST_TO_ADDR
// if not tmp then
68795: LD_VAR 0 2
68799: NOT
68800: IFFALSE 68804
// exit ;
68802: GO 68833
// for i in tmp do
68804: LD_ADDR_VAR 0 1
68808: PUSH
68809: LD_VAR 0 2
68813: PUSH
68814: FOR_IN
68815: IFFALSE 68831
// SetLives ( i , 1 ) ;
68817: LD_VAR 0 1
68821: PPUSH
68822: LD_INT 1
68824: PPUSH
68825: CALL_OW 234
68829: GO 68814
68831: POP
68832: POP
// end ;
68833: PPOPN 2
68835: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
68836: LD_EXP 53
68840: PUSH
68841: LD_EXP 102
68845: AND
68846: IFFALSE 69133
68848: GO 68850
68850: DISABLE
68851: LD_INT 0
68853: PPUSH
68854: PPUSH
68855: PPUSH
// begin i := rand ( 1 , 7 ) ;
68856: LD_ADDR_VAR 0 1
68860: PUSH
68861: LD_INT 1
68863: PPUSH
68864: LD_INT 7
68866: PPUSH
68867: CALL_OW 12
68871: ST_TO_ADDR
// case i of 1 :
68872: LD_VAR 0 1
68876: PUSH
68877: LD_INT 1
68879: DOUBLE
68880: EQUAL
68881: IFTRUE 68885
68883: GO 68895
68885: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
68886: LD_STRING earthquake(getX(game), 0, 32)
68888: PPUSH
68889: CALL_OW 559
68893: GO 69133
68895: LD_INT 2
68897: DOUBLE
68898: EQUAL
68899: IFTRUE 68903
68901: GO 68917
68903: POP
// begin ToLua ( displayStucuk(); ) ;
68904: LD_STRING displayStucuk();
68906: PPUSH
68907: CALL_OW 559
// ResetFog ;
68911: CALL_OW 335
// end ; 3 :
68915: GO 69133
68917: LD_INT 3
68919: DOUBLE
68920: EQUAL
68921: IFTRUE 68925
68923: GO 69029
68925: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68926: LD_ADDR_VAR 0 2
68930: PUSH
68931: LD_INT 22
68933: PUSH
68934: LD_OWVAR 2
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 25
68945: PUSH
68946: LD_INT 1
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PPUSH
68957: CALL_OW 69
68961: ST_TO_ADDR
// if not tmp then
68962: LD_VAR 0 2
68966: NOT
68967: IFFALSE 68971
// exit ;
68969: GO 69133
// un := tmp [ rand ( 1 , tmp ) ] ;
68971: LD_ADDR_VAR 0 3
68975: PUSH
68976: LD_VAR 0 2
68980: PUSH
68981: LD_INT 1
68983: PPUSH
68984: LD_VAR 0 2
68988: PPUSH
68989: CALL_OW 12
68993: ARRAY
68994: ST_TO_ADDR
// if Crawls ( un ) then
68995: LD_VAR 0 3
68999: PPUSH
69000: CALL_OW 318
69004: IFFALSE 69015
// ComWalk ( un ) ;
69006: LD_VAR 0 3
69010: PPUSH
69011: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69015: LD_VAR 0 3
69019: PPUSH
69020: LD_INT 8
69022: PPUSH
69023: CALL_OW 336
// end ; 4 :
69027: GO 69133
69029: LD_INT 4
69031: DOUBLE
69032: EQUAL
69033: IFTRUE 69037
69035: GO 69111
69037: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69038: LD_ADDR_VAR 0 2
69042: PUSH
69043: LD_INT 22
69045: PUSH
69046: LD_OWVAR 2
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 30
69057: PUSH
69058: LD_INT 29
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PPUSH
69069: CALL_OW 69
69073: ST_TO_ADDR
// if not tmp then
69074: LD_VAR 0 2
69078: NOT
69079: IFFALSE 69083
// exit ;
69081: GO 69133
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69083: LD_VAR 0 2
69087: PUSH
69088: LD_INT 1
69090: ARRAY
69091: PPUSH
69092: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69096: LD_VAR 0 2
69100: PUSH
69101: LD_INT 1
69103: ARRAY
69104: PPUSH
69105: CALL_OW 65
// end ; 5 .. 7 :
69109: GO 69133
69111: LD_INT 5
69113: DOUBLE
69114: GREATEREQUAL
69115: IFFALSE 69123
69117: LD_INT 7
69119: DOUBLE
69120: LESSEQUAL
69121: IFTRUE 69125
69123: GO 69132
69125: POP
// StreamSibBomb ; end ;
69126: CALL 65370 0 0
69130: GO 69133
69132: POP
// end ;
69133: PPOPN 3
69135: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69136: LD_EXP 53
69140: PUSH
69141: LD_EXP 103
69145: AND
69146: IFFALSE 69302
69148: GO 69150
69150: DISABLE
69151: LD_INT 0
69153: PPUSH
69154: PPUSH
69155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69156: LD_ADDR_VAR 0 2
69160: PUSH
69161: LD_INT 81
69163: PUSH
69164: LD_OWVAR 2
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 2
69175: PUSH
69176: LD_INT 21
69178: PUSH
69179: LD_INT 1
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 21
69188: PUSH
69189: LD_INT 2
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: LIST
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PPUSH
69205: CALL_OW 69
69209: ST_TO_ADDR
// if not tmp then
69210: LD_VAR 0 2
69214: NOT
69215: IFFALSE 69219
// exit ;
69217: GO 69302
// p := 0 ;
69219: LD_ADDR_VAR 0 3
69223: PUSH
69224: LD_INT 0
69226: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69227: LD_INT 35
69229: PPUSH
69230: CALL_OW 67
// p := p + 1 ;
69234: LD_ADDR_VAR 0 3
69238: PUSH
69239: LD_VAR 0 3
69243: PUSH
69244: LD_INT 1
69246: PLUS
69247: ST_TO_ADDR
// for i in tmp do
69248: LD_ADDR_VAR 0 1
69252: PUSH
69253: LD_VAR 0 2
69257: PUSH
69258: FOR_IN
69259: IFFALSE 69290
// if GetLives ( i ) < 1000 then
69261: LD_VAR 0 1
69265: PPUSH
69266: CALL_OW 256
69270: PUSH
69271: LD_INT 1000
69273: LESS
69274: IFFALSE 69288
// SetLives ( i , 1000 ) ;
69276: LD_VAR 0 1
69280: PPUSH
69281: LD_INT 1000
69283: PPUSH
69284: CALL_OW 234
69288: GO 69258
69290: POP
69291: POP
// until p > 20 ;
69292: LD_VAR 0 3
69296: PUSH
69297: LD_INT 20
69299: GREATER
69300: IFFALSE 69227
// end ;
69302: PPOPN 3
69304: END
// every 0 0$1 trigger StreamModeActive and sTime do
69305: LD_EXP 53
69309: PUSH
69310: LD_EXP 104
69314: AND
69315: IFFALSE 69350
69317: GO 69319
69319: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69320: LD_INT 28
69322: PPUSH
69323: LD_OWVAR 2
69327: PPUSH
69328: LD_INT 2
69330: PPUSH
69331: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69335: LD_INT 30
69337: PPUSH
69338: LD_OWVAR 2
69342: PPUSH
69343: LD_INT 2
69345: PPUSH
69346: CALL_OW 322
// end ;
69350: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69351: LD_EXP 53
69355: PUSH
69356: LD_EXP 105
69360: AND
69361: IFFALSE 69482
69363: GO 69365
69365: DISABLE
69366: LD_INT 0
69368: PPUSH
69369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69370: LD_ADDR_VAR 0 2
69374: PUSH
69375: LD_INT 22
69377: PUSH
69378: LD_OWVAR 2
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 21
69389: PUSH
69390: LD_INT 1
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 3
69399: PUSH
69400: LD_INT 23
69402: PUSH
69403: LD_INT 0
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: LIST
69418: PPUSH
69419: CALL_OW 69
69423: ST_TO_ADDR
// if not tmp then
69424: LD_VAR 0 2
69428: NOT
69429: IFFALSE 69433
// exit ;
69431: GO 69482
// for i in tmp do
69433: LD_ADDR_VAR 0 1
69437: PUSH
69438: LD_VAR 0 2
69442: PUSH
69443: FOR_IN
69444: IFFALSE 69480
// begin if Crawls ( i ) then
69446: LD_VAR 0 1
69450: PPUSH
69451: CALL_OW 318
69455: IFFALSE 69466
// ComWalk ( i ) ;
69457: LD_VAR 0 1
69461: PPUSH
69462: CALL_OW 138
// SetClass ( i , 2 ) ;
69466: LD_VAR 0 1
69470: PPUSH
69471: LD_INT 2
69473: PPUSH
69474: CALL_OW 336
// end ;
69478: GO 69443
69480: POP
69481: POP
// end ;
69482: PPOPN 2
69484: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69485: LD_EXP 53
69489: PUSH
69490: LD_EXP 106
69494: AND
69495: IFFALSE 69783
69497: GO 69499
69499: DISABLE
69500: LD_INT 0
69502: PPUSH
69503: PPUSH
69504: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69505: LD_OWVAR 2
69509: PPUSH
69510: LD_INT 9
69512: PPUSH
69513: LD_INT 1
69515: PPUSH
69516: LD_INT 1
69518: PPUSH
69519: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69523: LD_INT 9
69525: PPUSH
69526: LD_OWVAR 2
69530: PPUSH
69531: CALL_OW 343
// uc_side := 9 ;
69535: LD_ADDR_OWVAR 20
69539: PUSH
69540: LD_INT 9
69542: ST_TO_ADDR
// uc_nation := 2 ;
69543: LD_ADDR_OWVAR 21
69547: PUSH
69548: LD_INT 2
69550: ST_TO_ADDR
// hc_name := Dark Warrior ;
69551: LD_ADDR_OWVAR 26
69555: PUSH
69556: LD_STRING Dark Warrior
69558: ST_TO_ADDR
// hc_gallery :=  ;
69559: LD_ADDR_OWVAR 33
69563: PUSH
69564: LD_STRING 
69566: ST_TO_ADDR
// hc_noskilllimit := true ;
69567: LD_ADDR_OWVAR 76
69571: PUSH
69572: LD_INT 1
69574: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69575: LD_ADDR_OWVAR 31
69579: PUSH
69580: LD_INT 30
69582: PUSH
69583: LD_INT 30
69585: PUSH
69586: LD_INT 30
69588: PUSH
69589: LD_INT 30
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: ST_TO_ADDR
// un := CreateHuman ;
69598: LD_ADDR_VAR 0 3
69602: PUSH
69603: CALL_OW 44
69607: ST_TO_ADDR
// hc_noskilllimit := false ;
69608: LD_ADDR_OWVAR 76
69612: PUSH
69613: LD_INT 0
69615: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69616: LD_VAR 0 3
69620: PPUSH
69621: LD_INT 1
69623: PPUSH
69624: CALL_OW 51
// ToLua ( playRanger() ) ;
69628: LD_STRING playRanger()
69630: PPUSH
69631: CALL_OW 559
// p := 0 ;
69635: LD_ADDR_VAR 0 2
69639: PUSH
69640: LD_INT 0
69642: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69643: LD_INT 35
69645: PPUSH
69646: CALL_OW 67
// p := p + 1 ;
69650: LD_ADDR_VAR 0 2
69654: PUSH
69655: LD_VAR 0 2
69659: PUSH
69660: LD_INT 1
69662: PLUS
69663: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69664: LD_VAR 0 3
69668: PPUSH
69669: CALL_OW 256
69673: PUSH
69674: LD_INT 1000
69676: LESS
69677: IFFALSE 69691
// SetLives ( un , 1000 ) ;
69679: LD_VAR 0 3
69683: PPUSH
69684: LD_INT 1000
69686: PPUSH
69687: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69691: LD_VAR 0 3
69695: PPUSH
69696: LD_INT 81
69698: PUSH
69699: LD_OWVAR 2
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 91
69710: PUSH
69711: LD_VAR 0 3
69715: PUSH
69716: LD_INT 30
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: LIST
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PPUSH
69728: CALL_OW 69
69732: PPUSH
69733: LD_VAR 0 3
69737: PPUSH
69738: CALL_OW 74
69742: PPUSH
69743: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
69747: LD_VAR 0 2
69751: PUSH
69752: LD_INT 80
69754: GREATER
69755: PUSH
69756: LD_VAR 0 3
69760: PPUSH
69761: CALL_OW 301
69765: OR
69766: IFFALSE 69643
// if un then
69768: LD_VAR 0 3
69772: IFFALSE 69783
// RemoveUnit ( un ) ;
69774: LD_VAR 0 3
69778: PPUSH
69779: CALL_OW 64
// end ;
69783: PPOPN 3
69785: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
69786: LD_EXP 107
69790: IFFALSE 69906
69792: GO 69794
69794: DISABLE
69795: LD_INT 0
69797: PPUSH
69798: PPUSH
69799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69800: LD_ADDR_VAR 0 2
69804: PUSH
69805: LD_INT 81
69807: PUSH
69808: LD_OWVAR 2
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 21
69819: PUSH
69820: LD_INT 1
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PPUSH
69831: CALL_OW 69
69835: ST_TO_ADDR
// ToLua ( playComputer() ) ;
69836: LD_STRING playComputer()
69838: PPUSH
69839: CALL_OW 559
// if not tmp then
69843: LD_VAR 0 2
69847: NOT
69848: IFFALSE 69852
// exit ;
69850: GO 69906
// for i in tmp do
69852: LD_ADDR_VAR 0 1
69856: PUSH
69857: LD_VAR 0 2
69861: PUSH
69862: FOR_IN
69863: IFFALSE 69904
// for j := 1 to 4 do
69865: LD_ADDR_VAR 0 3
69869: PUSH
69870: DOUBLE
69871: LD_INT 1
69873: DEC
69874: ST_TO_ADDR
69875: LD_INT 4
69877: PUSH
69878: FOR_TO
69879: IFFALSE 69900
// SetSkill ( i , j , 10 ) ;
69881: LD_VAR 0 1
69885: PPUSH
69886: LD_VAR 0 3
69890: PPUSH
69891: LD_INT 10
69893: PPUSH
69894: CALL_OW 237
69898: GO 69878
69900: POP
69901: POP
69902: GO 69862
69904: POP
69905: POP
// end ;
69906: PPOPN 3
69908: END
// every 0 0$1 trigger s30 do var i , tmp ;
69909: LD_EXP 108
69913: IFFALSE 69982
69915: GO 69917
69917: DISABLE
69918: LD_INT 0
69920: PPUSH
69921: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69922: LD_ADDR_VAR 0 2
69926: PUSH
69927: LD_INT 22
69929: PUSH
69930: LD_OWVAR 2
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PPUSH
69939: CALL_OW 69
69943: ST_TO_ADDR
// if not tmp then
69944: LD_VAR 0 2
69948: NOT
69949: IFFALSE 69953
// exit ;
69951: GO 69982
// for i in tmp do
69953: LD_ADDR_VAR 0 1
69957: PUSH
69958: LD_VAR 0 2
69962: PUSH
69963: FOR_IN
69964: IFFALSE 69980
// SetLives ( i , 300 ) ;
69966: LD_VAR 0 1
69970: PPUSH
69971: LD_INT 300
69973: PPUSH
69974: CALL_OW 234
69978: GO 69963
69980: POP
69981: POP
// end ;
69982: PPOPN 2
69984: END
// every 0 0$1 trigger s60 do var i , tmp ;
69985: LD_EXP 109
69989: IFFALSE 70058
69991: GO 69993
69993: DISABLE
69994: LD_INT 0
69996: PPUSH
69997: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69998: LD_ADDR_VAR 0 2
70002: PUSH
70003: LD_INT 22
70005: PUSH
70006: LD_OWVAR 2
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PPUSH
70015: CALL_OW 69
70019: ST_TO_ADDR
// if not tmp then
70020: LD_VAR 0 2
70024: NOT
70025: IFFALSE 70029
// exit ;
70027: GO 70058
// for i in tmp do
70029: LD_ADDR_VAR 0 1
70033: PUSH
70034: LD_VAR 0 2
70038: PUSH
70039: FOR_IN
70040: IFFALSE 70056
// SetLives ( i , 600 ) ;
70042: LD_VAR 0 1
70046: PPUSH
70047: LD_INT 600
70049: PPUSH
70050: CALL_OW 234
70054: GO 70039
70056: POP
70057: POP
// end ;
70058: PPOPN 2
70060: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70061: LD_INT 0
70063: PPUSH
// case cmd of 301 :
70064: LD_VAR 0 1
70068: PUSH
70069: LD_INT 301
70071: DOUBLE
70072: EQUAL
70073: IFTRUE 70077
70075: GO 70109
70077: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70078: LD_VAR 0 6
70082: PPUSH
70083: LD_VAR 0 7
70087: PPUSH
70088: LD_VAR 0 8
70092: PPUSH
70093: LD_VAR 0 4
70097: PPUSH
70098: LD_VAR 0 5
70102: PPUSH
70103: CALL 71310 0 5
70107: GO 70230
70109: LD_INT 302
70111: DOUBLE
70112: EQUAL
70113: IFTRUE 70117
70115: GO 70154
70117: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70118: LD_VAR 0 6
70122: PPUSH
70123: LD_VAR 0 7
70127: PPUSH
70128: LD_VAR 0 8
70132: PPUSH
70133: LD_VAR 0 9
70137: PPUSH
70138: LD_VAR 0 4
70142: PPUSH
70143: LD_VAR 0 5
70147: PPUSH
70148: CALL 71401 0 6
70152: GO 70230
70154: LD_INT 303
70156: DOUBLE
70157: EQUAL
70158: IFTRUE 70162
70160: GO 70199
70162: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70163: LD_VAR 0 6
70167: PPUSH
70168: LD_VAR 0 7
70172: PPUSH
70173: LD_VAR 0 8
70177: PPUSH
70178: LD_VAR 0 9
70182: PPUSH
70183: LD_VAR 0 4
70187: PPUSH
70188: LD_VAR 0 5
70192: PPUSH
70193: CALL 70235 0 6
70197: GO 70230
70199: LD_INT 304
70201: DOUBLE
70202: EQUAL
70203: IFTRUE 70207
70205: GO 70229
70207: POP
// hHackTeleport ( unit , x , y ) ; end ;
70208: LD_VAR 0 2
70212: PPUSH
70213: LD_VAR 0 4
70217: PPUSH
70218: LD_VAR 0 5
70222: PPUSH
70223: CALL 71994 0 3
70227: GO 70230
70229: POP
// end ;
70230: LD_VAR 0 12
70234: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70235: LD_INT 0
70237: PPUSH
70238: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70239: LD_VAR 0 1
70243: PUSH
70244: LD_INT 1
70246: LESS
70247: PUSH
70248: LD_VAR 0 1
70252: PUSH
70253: LD_INT 3
70255: GREATER
70256: OR
70257: PUSH
70258: LD_VAR 0 5
70262: PPUSH
70263: LD_VAR 0 6
70267: PPUSH
70268: CALL_OW 428
70272: OR
70273: IFFALSE 70277
// exit ;
70275: GO 70997
// uc_side := your_side ;
70277: LD_ADDR_OWVAR 20
70281: PUSH
70282: LD_OWVAR 2
70286: ST_TO_ADDR
// uc_nation := nation ;
70287: LD_ADDR_OWVAR 21
70291: PUSH
70292: LD_VAR 0 1
70296: ST_TO_ADDR
// bc_level = 1 ;
70297: LD_ADDR_OWVAR 43
70301: PUSH
70302: LD_INT 1
70304: ST_TO_ADDR
// case btype of 1 :
70305: LD_VAR 0 2
70309: PUSH
70310: LD_INT 1
70312: DOUBLE
70313: EQUAL
70314: IFTRUE 70318
70316: GO 70329
70318: POP
// bc_type := b_depot ; 2 :
70319: LD_ADDR_OWVAR 42
70323: PUSH
70324: LD_INT 0
70326: ST_TO_ADDR
70327: GO 70941
70329: LD_INT 2
70331: DOUBLE
70332: EQUAL
70333: IFTRUE 70337
70335: GO 70348
70337: POP
// bc_type := b_warehouse ; 3 :
70338: LD_ADDR_OWVAR 42
70342: PUSH
70343: LD_INT 1
70345: ST_TO_ADDR
70346: GO 70941
70348: LD_INT 3
70350: DOUBLE
70351: EQUAL
70352: IFTRUE 70356
70354: GO 70367
70356: POP
// bc_type := b_lab ; 4 .. 9 :
70357: LD_ADDR_OWVAR 42
70361: PUSH
70362: LD_INT 6
70364: ST_TO_ADDR
70365: GO 70941
70367: LD_INT 4
70369: DOUBLE
70370: GREATEREQUAL
70371: IFFALSE 70379
70373: LD_INT 9
70375: DOUBLE
70376: LESSEQUAL
70377: IFTRUE 70381
70379: GO 70433
70381: POP
// begin bc_type := b_lab_half ;
70382: LD_ADDR_OWVAR 42
70386: PUSH
70387: LD_INT 7
70389: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70390: LD_ADDR_OWVAR 44
70394: PUSH
70395: LD_INT 10
70397: PUSH
70398: LD_INT 11
70400: PUSH
70401: LD_INT 12
70403: PUSH
70404: LD_INT 15
70406: PUSH
70407: LD_INT 14
70409: PUSH
70410: LD_INT 13
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: PUSH
70421: LD_VAR 0 2
70425: PUSH
70426: LD_INT 3
70428: MINUS
70429: ARRAY
70430: ST_TO_ADDR
// end ; 10 .. 13 :
70431: GO 70941
70433: LD_INT 10
70435: DOUBLE
70436: GREATEREQUAL
70437: IFFALSE 70445
70439: LD_INT 13
70441: DOUBLE
70442: LESSEQUAL
70443: IFTRUE 70447
70445: GO 70524
70447: POP
// begin bc_type := b_lab_full ;
70448: LD_ADDR_OWVAR 42
70452: PUSH
70453: LD_INT 8
70455: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70456: LD_ADDR_OWVAR 44
70460: PUSH
70461: LD_INT 10
70463: PUSH
70464: LD_INT 12
70466: PUSH
70467: LD_INT 14
70469: PUSH
70470: LD_INT 13
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: PUSH
70479: LD_VAR 0 2
70483: PUSH
70484: LD_INT 9
70486: MINUS
70487: ARRAY
70488: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70489: LD_ADDR_OWVAR 45
70493: PUSH
70494: LD_INT 11
70496: PUSH
70497: LD_INT 15
70499: PUSH
70500: LD_INT 12
70502: PUSH
70503: LD_INT 15
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: PUSH
70512: LD_VAR 0 2
70516: PUSH
70517: LD_INT 9
70519: MINUS
70520: ARRAY
70521: ST_TO_ADDR
// end ; 14 :
70522: GO 70941
70524: LD_INT 14
70526: DOUBLE
70527: EQUAL
70528: IFTRUE 70532
70530: GO 70543
70532: POP
// bc_type := b_workshop ; 15 :
70533: LD_ADDR_OWVAR 42
70537: PUSH
70538: LD_INT 2
70540: ST_TO_ADDR
70541: GO 70941
70543: LD_INT 15
70545: DOUBLE
70546: EQUAL
70547: IFTRUE 70551
70549: GO 70562
70551: POP
// bc_type := b_factory ; 16 :
70552: LD_ADDR_OWVAR 42
70556: PUSH
70557: LD_INT 3
70559: ST_TO_ADDR
70560: GO 70941
70562: LD_INT 16
70564: DOUBLE
70565: EQUAL
70566: IFTRUE 70570
70568: GO 70581
70570: POP
// bc_type := b_ext_gun ; 17 :
70571: LD_ADDR_OWVAR 42
70575: PUSH
70576: LD_INT 17
70578: ST_TO_ADDR
70579: GO 70941
70581: LD_INT 17
70583: DOUBLE
70584: EQUAL
70585: IFTRUE 70589
70587: GO 70617
70589: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70590: LD_ADDR_OWVAR 42
70594: PUSH
70595: LD_INT 19
70597: PUSH
70598: LD_INT 23
70600: PUSH
70601: LD_INT 19
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: LIST
70608: PUSH
70609: LD_VAR 0 1
70613: ARRAY
70614: ST_TO_ADDR
70615: GO 70941
70617: LD_INT 18
70619: DOUBLE
70620: EQUAL
70621: IFTRUE 70625
70623: GO 70636
70625: POP
// bc_type := b_ext_radar ; 19 :
70626: LD_ADDR_OWVAR 42
70630: PUSH
70631: LD_INT 20
70633: ST_TO_ADDR
70634: GO 70941
70636: LD_INT 19
70638: DOUBLE
70639: EQUAL
70640: IFTRUE 70644
70642: GO 70655
70644: POP
// bc_type := b_ext_radio ; 20 :
70645: LD_ADDR_OWVAR 42
70649: PUSH
70650: LD_INT 22
70652: ST_TO_ADDR
70653: GO 70941
70655: LD_INT 20
70657: DOUBLE
70658: EQUAL
70659: IFTRUE 70663
70661: GO 70674
70663: POP
// bc_type := b_ext_siberium ; 21 :
70664: LD_ADDR_OWVAR 42
70668: PUSH
70669: LD_INT 21
70671: ST_TO_ADDR
70672: GO 70941
70674: LD_INT 21
70676: DOUBLE
70677: EQUAL
70678: IFTRUE 70682
70680: GO 70693
70682: POP
// bc_type := b_ext_computer ; 22 :
70683: LD_ADDR_OWVAR 42
70687: PUSH
70688: LD_INT 24
70690: ST_TO_ADDR
70691: GO 70941
70693: LD_INT 22
70695: DOUBLE
70696: EQUAL
70697: IFTRUE 70701
70699: GO 70712
70701: POP
// bc_type := b_ext_track ; 23 :
70702: LD_ADDR_OWVAR 42
70706: PUSH
70707: LD_INT 16
70709: ST_TO_ADDR
70710: GO 70941
70712: LD_INT 23
70714: DOUBLE
70715: EQUAL
70716: IFTRUE 70720
70718: GO 70731
70720: POP
// bc_type := b_ext_laser ; 24 :
70721: LD_ADDR_OWVAR 42
70725: PUSH
70726: LD_INT 25
70728: ST_TO_ADDR
70729: GO 70941
70731: LD_INT 24
70733: DOUBLE
70734: EQUAL
70735: IFTRUE 70739
70737: GO 70750
70739: POP
// bc_type := b_control_tower ; 25 :
70740: LD_ADDR_OWVAR 42
70744: PUSH
70745: LD_INT 36
70747: ST_TO_ADDR
70748: GO 70941
70750: LD_INT 25
70752: DOUBLE
70753: EQUAL
70754: IFTRUE 70758
70756: GO 70769
70758: POP
// bc_type := b_breastwork ; 26 :
70759: LD_ADDR_OWVAR 42
70763: PUSH
70764: LD_INT 31
70766: ST_TO_ADDR
70767: GO 70941
70769: LD_INT 26
70771: DOUBLE
70772: EQUAL
70773: IFTRUE 70777
70775: GO 70788
70777: POP
// bc_type := b_bunker ; 27 :
70778: LD_ADDR_OWVAR 42
70782: PUSH
70783: LD_INT 32
70785: ST_TO_ADDR
70786: GO 70941
70788: LD_INT 27
70790: DOUBLE
70791: EQUAL
70792: IFTRUE 70796
70794: GO 70807
70796: POP
// bc_type := b_turret ; 28 :
70797: LD_ADDR_OWVAR 42
70801: PUSH
70802: LD_INT 33
70804: ST_TO_ADDR
70805: GO 70941
70807: LD_INT 28
70809: DOUBLE
70810: EQUAL
70811: IFTRUE 70815
70813: GO 70826
70815: POP
// bc_type := b_armoury ; 29 :
70816: LD_ADDR_OWVAR 42
70820: PUSH
70821: LD_INT 4
70823: ST_TO_ADDR
70824: GO 70941
70826: LD_INT 29
70828: DOUBLE
70829: EQUAL
70830: IFTRUE 70834
70832: GO 70845
70834: POP
// bc_type := b_barracks ; 30 :
70835: LD_ADDR_OWVAR 42
70839: PUSH
70840: LD_INT 5
70842: ST_TO_ADDR
70843: GO 70941
70845: LD_INT 30
70847: DOUBLE
70848: EQUAL
70849: IFTRUE 70853
70851: GO 70864
70853: POP
// bc_type := b_solar_power ; 31 :
70854: LD_ADDR_OWVAR 42
70858: PUSH
70859: LD_INT 27
70861: ST_TO_ADDR
70862: GO 70941
70864: LD_INT 31
70866: DOUBLE
70867: EQUAL
70868: IFTRUE 70872
70870: GO 70883
70872: POP
// bc_type := b_oil_power ; 32 :
70873: LD_ADDR_OWVAR 42
70877: PUSH
70878: LD_INT 26
70880: ST_TO_ADDR
70881: GO 70941
70883: LD_INT 32
70885: DOUBLE
70886: EQUAL
70887: IFTRUE 70891
70889: GO 70902
70891: POP
// bc_type := b_siberite_power ; 33 :
70892: LD_ADDR_OWVAR 42
70896: PUSH
70897: LD_INT 28
70899: ST_TO_ADDR
70900: GO 70941
70902: LD_INT 33
70904: DOUBLE
70905: EQUAL
70906: IFTRUE 70910
70908: GO 70921
70910: POP
// bc_type := b_oil_mine ; 34 :
70911: LD_ADDR_OWVAR 42
70915: PUSH
70916: LD_INT 29
70918: ST_TO_ADDR
70919: GO 70941
70921: LD_INT 34
70923: DOUBLE
70924: EQUAL
70925: IFTRUE 70929
70927: GO 70940
70929: POP
// bc_type := b_siberite_mine ; end ;
70930: LD_ADDR_OWVAR 42
70934: PUSH
70935: LD_INT 30
70937: ST_TO_ADDR
70938: GO 70941
70940: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70941: LD_ADDR_VAR 0 8
70945: PUSH
70946: LD_VAR 0 5
70950: PPUSH
70951: LD_VAR 0 6
70955: PPUSH
70956: LD_VAR 0 3
70960: PPUSH
70961: CALL_OW 47
70965: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70966: LD_OWVAR 42
70970: PUSH
70971: LD_INT 32
70973: PUSH
70974: LD_INT 33
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: IN
70981: IFFALSE 70997
// PlaceWeaponTurret ( b , weapon ) ;
70983: LD_VAR 0 8
70987: PPUSH
70988: LD_VAR 0 4
70992: PPUSH
70993: CALL_OW 431
// end ;
70997: LD_VAR 0 7
71001: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71002: LD_INT 0
71004: PPUSH
71005: PPUSH
71006: PPUSH
71007: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71008: LD_ADDR_VAR 0 4
71012: PUSH
71013: LD_INT 22
71015: PUSH
71016: LD_OWVAR 2
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 2
71027: PUSH
71028: LD_INT 30
71030: PUSH
71031: LD_INT 0
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 30
71040: PUSH
71041: LD_INT 1
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: LIST
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PPUSH
71057: CALL_OW 69
71061: ST_TO_ADDR
// if not tmp then
71062: LD_VAR 0 4
71066: NOT
71067: IFFALSE 71071
// exit ;
71069: GO 71130
// for i in tmp do
71071: LD_ADDR_VAR 0 2
71075: PUSH
71076: LD_VAR 0 4
71080: PUSH
71081: FOR_IN
71082: IFFALSE 71128
// for j = 1 to 3 do
71084: LD_ADDR_VAR 0 3
71088: PUSH
71089: DOUBLE
71090: LD_INT 1
71092: DEC
71093: ST_TO_ADDR
71094: LD_INT 3
71096: PUSH
71097: FOR_TO
71098: IFFALSE 71124
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71100: LD_VAR 0 2
71104: PPUSH
71105: CALL_OW 274
71109: PPUSH
71110: LD_VAR 0 3
71114: PPUSH
71115: LD_INT 99999
71117: PPUSH
71118: CALL_OW 277
71122: GO 71097
71124: POP
71125: POP
71126: GO 71081
71128: POP
71129: POP
// end ;
71130: LD_VAR 0 1
71134: RET
// export function hHackSetLevel10 ; var i , j ; begin
71135: LD_INT 0
71137: PPUSH
71138: PPUSH
71139: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71140: LD_ADDR_VAR 0 2
71144: PUSH
71145: LD_INT 21
71147: PUSH
71148: LD_INT 1
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PPUSH
71155: CALL_OW 69
71159: PUSH
71160: FOR_IN
71161: IFFALSE 71213
// if IsSelected ( i ) then
71163: LD_VAR 0 2
71167: PPUSH
71168: CALL_OW 306
71172: IFFALSE 71211
// begin for j := 1 to 4 do
71174: LD_ADDR_VAR 0 3
71178: PUSH
71179: DOUBLE
71180: LD_INT 1
71182: DEC
71183: ST_TO_ADDR
71184: LD_INT 4
71186: PUSH
71187: FOR_TO
71188: IFFALSE 71209
// SetSkill ( i , j , 10 ) ;
71190: LD_VAR 0 2
71194: PPUSH
71195: LD_VAR 0 3
71199: PPUSH
71200: LD_INT 10
71202: PPUSH
71203: CALL_OW 237
71207: GO 71187
71209: POP
71210: POP
// end ;
71211: GO 71160
71213: POP
71214: POP
// end ;
71215: LD_VAR 0 1
71219: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71220: LD_INT 0
71222: PPUSH
71223: PPUSH
71224: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71225: LD_ADDR_VAR 0 2
71229: PUSH
71230: LD_INT 22
71232: PUSH
71233: LD_OWVAR 2
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 21
71244: PUSH
71245: LD_INT 1
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PPUSH
71256: CALL_OW 69
71260: PUSH
71261: FOR_IN
71262: IFFALSE 71303
// begin for j := 1 to 4 do
71264: LD_ADDR_VAR 0 3
71268: PUSH
71269: DOUBLE
71270: LD_INT 1
71272: DEC
71273: ST_TO_ADDR
71274: LD_INT 4
71276: PUSH
71277: FOR_TO
71278: IFFALSE 71299
// SetSkill ( i , j , 10 ) ;
71280: LD_VAR 0 2
71284: PPUSH
71285: LD_VAR 0 3
71289: PPUSH
71290: LD_INT 10
71292: PPUSH
71293: CALL_OW 237
71297: GO 71277
71299: POP
71300: POP
// end ;
71301: GO 71261
71303: POP
71304: POP
// end ;
71305: LD_VAR 0 1
71309: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71310: LD_INT 0
71312: PPUSH
// uc_side := your_side ;
71313: LD_ADDR_OWVAR 20
71317: PUSH
71318: LD_OWVAR 2
71322: ST_TO_ADDR
// uc_nation := nation ;
71323: LD_ADDR_OWVAR 21
71327: PUSH
71328: LD_VAR 0 1
71332: ST_TO_ADDR
// InitHc ;
71333: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71337: LD_INT 0
71339: PPUSH
71340: LD_VAR 0 2
71344: PPUSH
71345: LD_VAR 0 3
71349: PPUSH
71350: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71354: LD_VAR 0 4
71358: PPUSH
71359: LD_VAR 0 5
71363: PPUSH
71364: CALL_OW 428
71368: PUSH
71369: LD_INT 0
71371: EQUAL
71372: IFFALSE 71396
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71374: CALL_OW 44
71378: PPUSH
71379: LD_VAR 0 4
71383: PPUSH
71384: LD_VAR 0 5
71388: PPUSH
71389: LD_INT 1
71391: PPUSH
71392: CALL_OW 48
// end ;
71396: LD_VAR 0 6
71400: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71401: LD_INT 0
71403: PPUSH
71404: PPUSH
// uc_side := your_side ;
71405: LD_ADDR_OWVAR 20
71409: PUSH
71410: LD_OWVAR 2
71414: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71415: LD_VAR 0 1
71419: PUSH
71420: LD_INT 1
71422: PUSH
71423: LD_INT 2
71425: PUSH
71426: LD_INT 3
71428: PUSH
71429: LD_INT 4
71431: PUSH
71432: LD_INT 5
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: IN
71442: IFFALSE 71454
// uc_nation := nation_american else
71444: LD_ADDR_OWVAR 21
71448: PUSH
71449: LD_INT 1
71451: ST_TO_ADDR
71452: GO 71497
// if chassis in [ 11 , 12 , 13 , 14 ] then
71454: LD_VAR 0 1
71458: PUSH
71459: LD_INT 11
71461: PUSH
71462: LD_INT 12
71464: PUSH
71465: LD_INT 13
71467: PUSH
71468: LD_INT 14
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: IN
71477: IFFALSE 71489
// uc_nation := nation_arabian else
71479: LD_ADDR_OWVAR 21
71483: PUSH
71484: LD_INT 2
71486: ST_TO_ADDR
71487: GO 71497
// uc_nation := nation_russian ;
71489: LD_ADDR_OWVAR 21
71493: PUSH
71494: LD_INT 3
71496: ST_TO_ADDR
// vc_chassis := chassis ;
71497: LD_ADDR_OWVAR 37
71501: PUSH
71502: LD_VAR 0 1
71506: ST_TO_ADDR
// vc_engine := engine ;
71507: LD_ADDR_OWVAR 39
71511: PUSH
71512: LD_VAR 0 2
71516: ST_TO_ADDR
// vc_control := control ;
71517: LD_ADDR_OWVAR 38
71521: PUSH
71522: LD_VAR 0 3
71526: ST_TO_ADDR
// vc_weapon := weapon ;
71527: LD_ADDR_OWVAR 40
71531: PUSH
71532: LD_VAR 0 4
71536: ST_TO_ADDR
// un := CreateVehicle ;
71537: LD_ADDR_VAR 0 8
71541: PUSH
71542: CALL_OW 45
71546: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71547: LD_VAR 0 8
71551: PPUSH
71552: LD_INT 0
71554: PPUSH
71555: LD_INT 5
71557: PPUSH
71558: CALL_OW 12
71562: PPUSH
71563: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71567: LD_VAR 0 8
71571: PPUSH
71572: LD_VAR 0 5
71576: PPUSH
71577: LD_VAR 0 6
71581: PPUSH
71582: LD_INT 1
71584: PPUSH
71585: CALL_OW 48
// end ;
71589: LD_VAR 0 7
71593: RET
// export hInvincible ; every 1 do
71594: GO 71596
71596: DISABLE
// hInvincible := [ ] ;
71597: LD_ADDR_EXP 110
71601: PUSH
71602: EMPTY
71603: ST_TO_ADDR
71604: END
// every 10 do var i ;
71605: GO 71607
71607: DISABLE
71608: LD_INT 0
71610: PPUSH
// begin enable ;
71611: ENABLE
// if not hInvincible then
71612: LD_EXP 110
71616: NOT
71617: IFFALSE 71621
// exit ;
71619: GO 71665
// for i in hInvincible do
71621: LD_ADDR_VAR 0 1
71625: PUSH
71626: LD_EXP 110
71630: PUSH
71631: FOR_IN
71632: IFFALSE 71663
// if GetLives ( i ) < 1000 then
71634: LD_VAR 0 1
71638: PPUSH
71639: CALL_OW 256
71643: PUSH
71644: LD_INT 1000
71646: LESS
71647: IFFALSE 71661
// SetLives ( i , 1000 ) ;
71649: LD_VAR 0 1
71653: PPUSH
71654: LD_INT 1000
71656: PPUSH
71657: CALL_OW 234
71661: GO 71631
71663: POP
71664: POP
// end ;
71665: PPOPN 1
71667: END
// export function hHackInvincible ; var i ; begin
71668: LD_INT 0
71670: PPUSH
71671: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71672: LD_ADDR_VAR 0 2
71676: PUSH
71677: LD_INT 2
71679: PUSH
71680: LD_INT 21
71682: PUSH
71683: LD_INT 1
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 21
71692: PUSH
71693: LD_INT 2
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: LIST
71704: PPUSH
71705: CALL_OW 69
71709: PUSH
71710: FOR_IN
71711: IFFALSE 71772
// if IsSelected ( i ) then
71713: LD_VAR 0 2
71717: PPUSH
71718: CALL_OW 306
71722: IFFALSE 71770
// begin if i in hInvincible then
71724: LD_VAR 0 2
71728: PUSH
71729: LD_EXP 110
71733: IN
71734: IFFALSE 71754
// hInvincible := hInvincible diff i else
71736: LD_ADDR_EXP 110
71740: PUSH
71741: LD_EXP 110
71745: PUSH
71746: LD_VAR 0 2
71750: DIFF
71751: ST_TO_ADDR
71752: GO 71770
// hInvincible := hInvincible union i ;
71754: LD_ADDR_EXP 110
71758: PUSH
71759: LD_EXP 110
71763: PUSH
71764: LD_VAR 0 2
71768: UNION
71769: ST_TO_ADDR
// end ;
71770: GO 71710
71772: POP
71773: POP
// end ;
71774: LD_VAR 0 1
71778: RET
// export function hHackInvisible ; var i , j ; begin
71779: LD_INT 0
71781: PPUSH
71782: PPUSH
71783: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71784: LD_ADDR_VAR 0 2
71788: PUSH
71789: LD_INT 21
71791: PUSH
71792: LD_INT 1
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PPUSH
71799: CALL_OW 69
71803: PUSH
71804: FOR_IN
71805: IFFALSE 71829
// if IsSelected ( i ) then
71807: LD_VAR 0 2
71811: PPUSH
71812: CALL_OW 306
71816: IFFALSE 71827
// ComForceInvisible ( i ) ;
71818: LD_VAR 0 2
71822: PPUSH
71823: CALL_OW 496
71827: GO 71804
71829: POP
71830: POP
// end ;
71831: LD_VAR 0 1
71835: RET
// export function hHackChangeYourSide ; begin
71836: LD_INT 0
71838: PPUSH
// if your_side = 8 then
71839: LD_OWVAR 2
71843: PUSH
71844: LD_INT 8
71846: EQUAL
71847: IFFALSE 71859
// your_side := 0 else
71849: LD_ADDR_OWVAR 2
71853: PUSH
71854: LD_INT 0
71856: ST_TO_ADDR
71857: GO 71873
// your_side := your_side + 1 ;
71859: LD_ADDR_OWVAR 2
71863: PUSH
71864: LD_OWVAR 2
71868: PUSH
71869: LD_INT 1
71871: PLUS
71872: ST_TO_ADDR
// end ;
71873: LD_VAR 0 1
71877: RET
// export function hHackChangeUnitSide ; var i , j ; begin
71878: LD_INT 0
71880: PPUSH
71881: PPUSH
71882: PPUSH
// for i in all_units do
71883: LD_ADDR_VAR 0 2
71887: PUSH
71888: LD_OWVAR 3
71892: PUSH
71893: FOR_IN
71894: IFFALSE 71972
// if IsSelected ( i ) then
71896: LD_VAR 0 2
71900: PPUSH
71901: CALL_OW 306
71905: IFFALSE 71970
// begin j := GetSide ( i ) ;
71907: LD_ADDR_VAR 0 3
71911: PUSH
71912: LD_VAR 0 2
71916: PPUSH
71917: CALL_OW 255
71921: ST_TO_ADDR
// if j = 8 then
71922: LD_VAR 0 3
71926: PUSH
71927: LD_INT 8
71929: EQUAL
71930: IFFALSE 71942
// j := 0 else
71932: LD_ADDR_VAR 0 3
71936: PUSH
71937: LD_INT 0
71939: ST_TO_ADDR
71940: GO 71956
// j := j + 1 ;
71942: LD_ADDR_VAR 0 3
71946: PUSH
71947: LD_VAR 0 3
71951: PUSH
71952: LD_INT 1
71954: PLUS
71955: ST_TO_ADDR
// SetSide ( i , j ) ;
71956: LD_VAR 0 2
71960: PPUSH
71961: LD_VAR 0 3
71965: PPUSH
71966: CALL_OW 235
// end ;
71970: GO 71893
71972: POP
71973: POP
// end ;
71974: LD_VAR 0 1
71978: RET
// export function hHackFog ; begin
71979: LD_INT 0
71981: PPUSH
// FogOff ( true ) ;
71982: LD_INT 1
71984: PPUSH
71985: CALL_OW 344
// end ;
71989: LD_VAR 0 1
71993: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71994: LD_INT 0
71996: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71997: LD_VAR 0 1
72001: PPUSH
72002: LD_VAR 0 2
72006: PPUSH
72007: LD_VAR 0 3
72011: PPUSH
72012: LD_INT 1
72014: PPUSH
72015: LD_INT 1
72017: PPUSH
72018: CALL_OW 483
// CenterOnXY ( x , y ) ;
72022: LD_VAR 0 2
72026: PPUSH
72027: LD_VAR 0 3
72031: PPUSH
72032: CALL_OW 84
// end ;
72036: LD_VAR 0 4
72040: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72041: LD_INT 0
72043: PPUSH
72044: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72045: LD_VAR 0 1
72049: NOT
72050: PUSH
72051: LD_VAR 0 2
72055: PPUSH
72056: LD_VAR 0 3
72060: PPUSH
72061: CALL_OW 488
72065: NOT
72066: OR
72067: PUSH
72068: LD_VAR 0 1
72072: PPUSH
72073: CALL_OW 266
72077: PUSH
72078: LD_INT 3
72080: NONEQUAL
72081: PUSH
72082: LD_VAR 0 1
72086: PPUSH
72087: CALL_OW 247
72091: PUSH
72092: LD_INT 1
72094: EQUAL
72095: NOT
72096: AND
72097: OR
72098: IFFALSE 72102
// exit ;
72100: GO 72251
// if GetType ( factory ) = unit_human then
72102: LD_VAR 0 1
72106: PPUSH
72107: CALL_OW 247
72111: PUSH
72112: LD_INT 1
72114: EQUAL
72115: IFFALSE 72132
// factory := IsInUnit ( factory ) ;
72117: LD_ADDR_VAR 0 1
72121: PUSH
72122: LD_VAR 0 1
72126: PPUSH
72127: CALL_OW 310
72131: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72132: LD_VAR 0 1
72136: PPUSH
72137: CALL_OW 266
72141: PUSH
72142: LD_INT 3
72144: NONEQUAL
72145: IFFALSE 72149
// exit ;
72147: GO 72251
// if HexInfo ( x , y ) = factory then
72149: LD_VAR 0 2
72153: PPUSH
72154: LD_VAR 0 3
72158: PPUSH
72159: CALL_OW 428
72163: PUSH
72164: LD_VAR 0 1
72168: EQUAL
72169: IFFALSE 72196
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72171: LD_ADDR_EXP 111
72175: PUSH
72176: LD_EXP 111
72180: PPUSH
72181: LD_VAR 0 1
72185: PPUSH
72186: LD_INT 0
72188: PPUSH
72189: CALL_OW 1
72193: ST_TO_ADDR
72194: GO 72247
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72196: LD_ADDR_EXP 111
72200: PUSH
72201: LD_EXP 111
72205: PPUSH
72206: LD_VAR 0 1
72210: PPUSH
72211: LD_VAR 0 1
72215: PPUSH
72216: CALL_OW 255
72220: PUSH
72221: LD_VAR 0 1
72225: PUSH
72226: LD_VAR 0 2
72230: PUSH
72231: LD_VAR 0 3
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: PPUSH
72242: CALL_OW 1
72246: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72247: CALL 72256 0 0
// end ;
72251: LD_VAR 0 4
72255: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72256: LD_INT 0
72258: PPUSH
72259: PPUSH
72260: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72261: LD_STRING resetFactoryWaypoint();
72263: PPUSH
72264: CALL_OW 559
// if factoryWaypoints then
72268: LD_EXP 111
72272: IFFALSE 72398
// begin list := PrepareArray ( factoryWaypoints ) ;
72274: LD_ADDR_VAR 0 3
72278: PUSH
72279: LD_EXP 111
72283: PPUSH
72284: CALL 57652 0 1
72288: ST_TO_ADDR
// for i := 1 to list do
72289: LD_ADDR_VAR 0 2
72293: PUSH
72294: DOUBLE
72295: LD_INT 1
72297: DEC
72298: ST_TO_ADDR
72299: LD_VAR 0 3
72303: PUSH
72304: FOR_TO
72305: IFFALSE 72396
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72307: LD_STRING setFactoryWaypointXY(
72309: PUSH
72310: LD_VAR 0 3
72314: PUSH
72315: LD_VAR 0 2
72319: ARRAY
72320: PUSH
72321: LD_INT 1
72323: ARRAY
72324: STR
72325: PUSH
72326: LD_STRING ,
72328: STR
72329: PUSH
72330: LD_VAR 0 3
72334: PUSH
72335: LD_VAR 0 2
72339: ARRAY
72340: PUSH
72341: LD_INT 2
72343: ARRAY
72344: STR
72345: PUSH
72346: LD_STRING ,
72348: STR
72349: PUSH
72350: LD_VAR 0 3
72354: PUSH
72355: LD_VAR 0 2
72359: ARRAY
72360: PUSH
72361: LD_INT 3
72363: ARRAY
72364: STR
72365: PUSH
72366: LD_STRING ,
72368: STR
72369: PUSH
72370: LD_VAR 0 3
72374: PUSH
72375: LD_VAR 0 2
72379: ARRAY
72380: PUSH
72381: LD_INT 4
72383: ARRAY
72384: STR
72385: PUSH
72386: LD_STRING )
72388: STR
72389: PPUSH
72390: CALL_OW 559
72394: GO 72304
72396: POP
72397: POP
// end ; end ;
72398: LD_VAR 0 1
72402: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72403: LD_INT 0
72405: PPUSH
// if HexInfo ( x , y ) = warehouse then
72406: LD_VAR 0 2
72410: PPUSH
72411: LD_VAR 0 3
72415: PPUSH
72416: CALL_OW 428
72420: PUSH
72421: LD_VAR 0 1
72425: EQUAL
72426: IFFALSE 72453
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72428: LD_ADDR_EXP 112
72432: PUSH
72433: LD_EXP 112
72437: PPUSH
72438: LD_VAR 0 1
72442: PPUSH
72443: LD_INT 0
72445: PPUSH
72446: CALL_OW 1
72450: ST_TO_ADDR
72451: GO 72504
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72453: LD_ADDR_EXP 112
72457: PUSH
72458: LD_EXP 112
72462: PPUSH
72463: LD_VAR 0 1
72467: PPUSH
72468: LD_VAR 0 1
72472: PPUSH
72473: CALL_OW 255
72477: PUSH
72478: LD_VAR 0 1
72482: PUSH
72483: LD_VAR 0 2
72487: PUSH
72488: LD_VAR 0 3
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: PPUSH
72499: CALL_OW 1
72503: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72504: CALL 72513 0 0
// end ;
72508: LD_VAR 0 4
72512: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72513: LD_INT 0
72515: PPUSH
72516: PPUSH
72517: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72518: LD_STRING resetWarehouseGatheringPoints();
72520: PPUSH
72521: CALL_OW 559
// if warehouseGatheringPoints then
72525: LD_EXP 112
72529: IFFALSE 72655
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72531: LD_ADDR_VAR 0 3
72535: PUSH
72536: LD_EXP 112
72540: PPUSH
72541: CALL 57652 0 1
72545: ST_TO_ADDR
// for i := 1 to list do
72546: LD_ADDR_VAR 0 2
72550: PUSH
72551: DOUBLE
72552: LD_INT 1
72554: DEC
72555: ST_TO_ADDR
72556: LD_VAR 0 3
72560: PUSH
72561: FOR_TO
72562: IFFALSE 72653
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72564: LD_STRING setWarehouseGatheringPointXY(
72566: PUSH
72567: LD_VAR 0 3
72571: PUSH
72572: LD_VAR 0 2
72576: ARRAY
72577: PUSH
72578: LD_INT 1
72580: ARRAY
72581: STR
72582: PUSH
72583: LD_STRING ,
72585: STR
72586: PUSH
72587: LD_VAR 0 3
72591: PUSH
72592: LD_VAR 0 2
72596: ARRAY
72597: PUSH
72598: LD_INT 2
72600: ARRAY
72601: STR
72602: PUSH
72603: LD_STRING ,
72605: STR
72606: PUSH
72607: LD_VAR 0 3
72611: PUSH
72612: LD_VAR 0 2
72616: ARRAY
72617: PUSH
72618: LD_INT 3
72620: ARRAY
72621: STR
72622: PUSH
72623: LD_STRING ,
72625: STR
72626: PUSH
72627: LD_VAR 0 3
72631: PUSH
72632: LD_VAR 0 2
72636: ARRAY
72637: PUSH
72638: LD_INT 4
72640: ARRAY
72641: STR
72642: PUSH
72643: LD_STRING )
72645: STR
72646: PPUSH
72647: CALL_OW 559
72651: GO 72561
72653: POP
72654: POP
// end ; end ;
72655: LD_VAR 0 1
72659: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
72660: LD_EXP 112
72664: IFFALSE 73349
72666: GO 72668
72668: DISABLE
72669: LD_INT 0
72671: PPUSH
72672: PPUSH
72673: PPUSH
72674: PPUSH
72675: PPUSH
72676: PPUSH
72677: PPUSH
72678: PPUSH
72679: PPUSH
// begin enable ;
72680: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
72681: LD_ADDR_VAR 0 3
72685: PUSH
72686: LD_EXP 112
72690: PPUSH
72691: CALL 57652 0 1
72695: ST_TO_ADDR
// if not list then
72696: LD_VAR 0 3
72700: NOT
72701: IFFALSE 72705
// exit ;
72703: GO 73349
// for i := 1 to list do
72705: LD_ADDR_VAR 0 1
72709: PUSH
72710: DOUBLE
72711: LD_INT 1
72713: DEC
72714: ST_TO_ADDR
72715: LD_VAR 0 3
72719: PUSH
72720: FOR_TO
72721: IFFALSE 73347
// begin depot := list [ i ] [ 2 ] ;
72723: LD_ADDR_VAR 0 8
72727: PUSH
72728: LD_VAR 0 3
72732: PUSH
72733: LD_VAR 0 1
72737: ARRAY
72738: PUSH
72739: LD_INT 2
72741: ARRAY
72742: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
72743: LD_ADDR_VAR 0 5
72747: PUSH
72748: LD_VAR 0 3
72752: PUSH
72753: LD_VAR 0 1
72757: ARRAY
72758: PUSH
72759: LD_INT 1
72761: ARRAY
72762: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
72763: LD_VAR 0 8
72767: PPUSH
72768: CALL_OW 301
72772: PUSH
72773: LD_VAR 0 5
72777: PUSH
72778: LD_VAR 0 8
72782: PPUSH
72783: CALL_OW 255
72787: NONEQUAL
72788: OR
72789: IFFALSE 72818
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
72791: LD_ADDR_EXP 112
72795: PUSH
72796: LD_EXP 112
72800: PPUSH
72801: LD_VAR 0 8
72805: PPUSH
72806: LD_INT 0
72808: PPUSH
72809: CALL_OW 1
72813: ST_TO_ADDR
// exit ;
72814: POP
72815: POP
72816: GO 73349
// end ; x := list [ i ] [ 3 ] ;
72818: LD_ADDR_VAR 0 6
72822: PUSH
72823: LD_VAR 0 3
72827: PUSH
72828: LD_VAR 0 1
72832: ARRAY
72833: PUSH
72834: LD_INT 3
72836: ARRAY
72837: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
72838: LD_ADDR_VAR 0 7
72842: PUSH
72843: LD_VAR 0 3
72847: PUSH
72848: LD_VAR 0 1
72852: ARRAY
72853: PUSH
72854: LD_INT 4
72856: ARRAY
72857: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
72858: LD_ADDR_VAR 0 9
72862: PUSH
72863: LD_VAR 0 6
72867: PPUSH
72868: LD_VAR 0 7
72872: PPUSH
72873: LD_INT 16
72875: PPUSH
72876: CALL 56240 0 3
72880: ST_TO_ADDR
// if not cratesNearbyPoint then
72881: LD_VAR 0 9
72885: NOT
72886: IFFALSE 72892
// exit ;
72888: POP
72889: POP
72890: GO 73349
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
72892: LD_ADDR_VAR 0 4
72896: PUSH
72897: LD_INT 22
72899: PUSH
72900: LD_VAR 0 5
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: LD_INT 3
72911: PUSH
72912: LD_INT 60
72914: PUSH
72915: EMPTY
72916: LIST
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: PUSH
72922: LD_INT 91
72924: PUSH
72925: LD_VAR 0 8
72929: PUSH
72930: LD_INT 6
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 2
72940: PUSH
72941: LD_INT 25
72943: PUSH
72944: LD_INT 2
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 25
72953: PUSH
72954: LD_INT 16
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: LIST
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: PPUSH
72972: CALL_OW 69
72976: PUSH
72977: LD_VAR 0 8
72981: PPUSH
72982: CALL_OW 313
72986: PPUSH
72987: LD_INT 3
72989: PUSH
72990: LD_INT 60
72992: PUSH
72993: EMPTY
72994: LIST
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PUSH
73000: LD_INT 2
73002: PUSH
73003: LD_INT 25
73005: PUSH
73006: LD_INT 2
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 25
73015: PUSH
73016: LD_INT 16
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: LIST
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PPUSH
73032: CALL_OW 72
73036: UNION
73037: ST_TO_ADDR
// if tmp then
73038: LD_VAR 0 4
73042: IFFALSE 73122
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73044: LD_ADDR_VAR 0 4
73048: PUSH
73049: LD_VAR 0 4
73053: PPUSH
73054: LD_INT 3
73056: PPUSH
73057: CALL 54209 0 2
73061: ST_TO_ADDR
// for j in tmp do
73062: LD_ADDR_VAR 0 2
73066: PUSH
73067: LD_VAR 0 4
73071: PUSH
73072: FOR_IN
73073: IFFALSE 73116
// begin if IsInUnit ( j ) then
73075: LD_VAR 0 2
73079: PPUSH
73080: CALL_OW 310
73084: IFFALSE 73095
// ComExit ( j ) ;
73086: LD_VAR 0 2
73090: PPUSH
73091: CALL 54292 0 1
// AddComCollect ( j , x , y ) ;
73095: LD_VAR 0 2
73099: PPUSH
73100: LD_VAR 0 6
73104: PPUSH
73105: LD_VAR 0 7
73109: PPUSH
73110: CALL_OW 177
// end ;
73114: GO 73072
73116: POP
73117: POP
// exit ;
73118: POP
73119: POP
73120: GO 73349
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73122: LD_ADDR_VAR 0 4
73126: PUSH
73127: LD_INT 22
73129: PUSH
73130: LD_VAR 0 5
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: PUSH
73139: LD_INT 91
73141: PUSH
73142: LD_VAR 0 8
73146: PUSH
73147: LD_INT 8
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 2
73157: PUSH
73158: LD_INT 34
73160: PUSH
73161: LD_INT 12
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 34
73170: PUSH
73171: LD_INT 51
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 34
73180: PUSH
73181: LD_INT 32
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: PUSH
73188: LD_INT 34
73190: PUSH
73191: LD_INT 89
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: PUSH
73205: EMPTY
73206: LIST
73207: LIST
73208: LIST
73209: PPUSH
73210: CALL_OW 69
73214: ST_TO_ADDR
// if tmp then
73215: LD_VAR 0 4
73219: IFFALSE 73345
// begin for j in tmp do
73221: LD_ADDR_VAR 0 2
73225: PUSH
73226: LD_VAR 0 4
73230: PUSH
73231: FOR_IN
73232: IFFALSE 73343
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73234: LD_VAR 0 2
73238: PPUSH
73239: CALL_OW 262
73243: PUSH
73244: LD_INT 3
73246: EQUAL
73247: PUSH
73248: LD_VAR 0 2
73252: PPUSH
73253: CALL_OW 261
73257: PUSH
73258: LD_INT 20
73260: GREATER
73261: OR
73262: PUSH
73263: LD_VAR 0 2
73267: PPUSH
73268: CALL_OW 314
73272: NOT
73273: AND
73274: PUSH
73275: LD_VAR 0 2
73279: PPUSH
73280: CALL_OW 263
73284: PUSH
73285: LD_INT 1
73287: NONEQUAL
73288: PUSH
73289: LD_VAR 0 2
73293: PPUSH
73294: CALL_OW 311
73298: OR
73299: AND
73300: IFFALSE 73341
// begin ComCollect ( j , x , y ) ;
73302: LD_VAR 0 2
73306: PPUSH
73307: LD_VAR 0 6
73311: PPUSH
73312: LD_VAR 0 7
73316: PPUSH
73317: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73321: LD_VAR 0 2
73325: PPUSH
73326: LD_VAR 0 8
73330: PPUSH
73331: CALL_OW 172
// exit ;
73335: POP
73336: POP
73337: POP
73338: POP
73339: GO 73349
// end ;
73341: GO 73231
73343: POP
73344: POP
// end ; end ;
73345: GO 72720
73347: POP
73348: POP
// end ; end_of_file
73349: PPOPN 9
73351: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73352: LD_VAR 0 1
73356: PUSH
73357: LD_INT 200
73359: DOUBLE
73360: GREATEREQUAL
73361: IFFALSE 73369
73363: LD_INT 299
73365: DOUBLE
73366: LESSEQUAL
73367: IFTRUE 73371
73369: GO 73403
73371: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73372: LD_VAR 0 1
73376: PPUSH
73377: LD_VAR 0 2
73381: PPUSH
73382: LD_VAR 0 3
73386: PPUSH
73387: LD_VAR 0 4
73391: PPUSH
73392: LD_VAR 0 5
73396: PPUSH
73397: CALL 73891 0 5
73401: GO 73480
73403: LD_INT 300
73405: DOUBLE
73406: GREATEREQUAL
73407: IFFALSE 73415
73409: LD_INT 399
73411: DOUBLE
73412: LESSEQUAL
73413: IFTRUE 73417
73415: GO 73479
73417: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73418: LD_VAR 0 1
73422: PPUSH
73423: LD_VAR 0 2
73427: PPUSH
73428: LD_VAR 0 3
73432: PPUSH
73433: LD_VAR 0 4
73437: PPUSH
73438: LD_VAR 0 5
73442: PPUSH
73443: LD_VAR 0 6
73447: PPUSH
73448: LD_VAR 0 7
73452: PPUSH
73453: LD_VAR 0 8
73457: PPUSH
73458: LD_VAR 0 9
73462: PPUSH
73463: LD_VAR 0 10
73467: PPUSH
73468: LD_VAR 0 11
73472: PPUSH
73473: CALL 70061 0 11
73477: GO 73480
73479: POP
// end ;
73480: PPOPN 11
73482: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73483: LD_VAR 0 1
73487: PPUSH
73488: LD_VAR 0 2
73492: PPUSH
73493: LD_VAR 0 3
73497: PPUSH
73498: LD_VAR 0 4
73502: PPUSH
73503: LD_VAR 0 5
73507: PPUSH
73508: CALL 73627 0 5
// end ; end_of_file
73512: PPOPN 5
73514: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
73515: LD_INT 0
73517: PPUSH
73518: PPUSH
73519: PPUSH
73520: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
73521: LD_VAR 0 1
73525: PPUSH
73526: CALL_OW 264
73530: PUSH
73531: LD_INT 91
73533: EQUAL
73534: IFFALSE 73606
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
73536: LD_INT 68
73538: PPUSH
73539: LD_VAR 0 1
73543: PPUSH
73544: CALL_OW 255
73548: PPUSH
73549: CALL_OW 321
73553: PUSH
73554: LD_INT 2
73556: EQUAL
73557: IFFALSE 73569
// eff := 70 else
73559: LD_ADDR_VAR 0 4
73563: PUSH
73564: LD_INT 70
73566: ST_TO_ADDR
73567: GO 73577
// eff := 30 ;
73569: LD_ADDR_VAR 0 4
73573: PUSH
73574: LD_INT 30
73576: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
73577: LD_VAR 0 1
73581: PPUSH
73582: CALL_OW 250
73586: PPUSH
73587: LD_VAR 0 1
73591: PPUSH
73592: CALL_OW 251
73596: PPUSH
73597: LD_VAR 0 4
73601: PPUSH
73602: CALL_OW 495
// end ; end ;
73606: LD_VAR 0 2
73610: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
73611: LD_INT 0
73613: PPUSH
// end ;
73614: LD_VAR 0 4
73618: RET
// export function SOS_Command ( cmd ) ; begin
73619: LD_INT 0
73621: PPUSH
// end ;
73622: LD_VAR 0 2
73626: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73627: LD_INT 0
73629: PPUSH
// end ;
73630: LD_VAR 0 6
73634: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
73635: LD_INT 0
73637: PPUSH
73638: PPUSH
// if not vehicle or not factory then
73639: LD_VAR 0 1
73643: NOT
73644: PUSH
73645: LD_VAR 0 2
73649: NOT
73650: OR
73651: IFFALSE 73655
// exit ;
73653: GO 73886
// if factoryWaypoints >= factory then
73655: LD_EXP 111
73659: PUSH
73660: LD_VAR 0 2
73664: GREATEREQUAL
73665: IFFALSE 73886
// if factoryWaypoints [ factory ] then
73667: LD_EXP 111
73671: PUSH
73672: LD_VAR 0 2
73676: ARRAY
73677: IFFALSE 73886
// begin if GetControl ( vehicle ) = control_manual then
73679: LD_VAR 0 1
73683: PPUSH
73684: CALL_OW 263
73688: PUSH
73689: LD_INT 1
73691: EQUAL
73692: IFFALSE 73773
// begin driver := IsDrivenBy ( vehicle ) ;
73694: LD_ADDR_VAR 0 4
73698: PUSH
73699: LD_VAR 0 1
73703: PPUSH
73704: CALL_OW 311
73708: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73709: LD_VAR 0 4
73713: PPUSH
73714: LD_EXP 111
73718: PUSH
73719: LD_VAR 0 2
73723: ARRAY
73724: PUSH
73725: LD_INT 3
73727: ARRAY
73728: PPUSH
73729: LD_EXP 111
73733: PUSH
73734: LD_VAR 0 2
73738: ARRAY
73739: PUSH
73740: LD_INT 4
73742: ARRAY
73743: PPUSH
73744: CALL_OW 171
// AddComExitVehicle ( driver ) ;
73748: LD_VAR 0 4
73752: PPUSH
73753: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
73757: LD_VAR 0 4
73761: PPUSH
73762: LD_VAR 0 2
73766: PPUSH
73767: CALL_OW 180
// end else
73771: GO 73886
// if GetControl ( vehicle ) = control_remote then
73773: LD_VAR 0 1
73777: PPUSH
73778: CALL_OW 263
73782: PUSH
73783: LD_INT 2
73785: EQUAL
73786: IFFALSE 73847
// begin wait ( 0 0$2 ) ;
73788: LD_INT 70
73790: PPUSH
73791: CALL_OW 67
// if Connect ( vehicle ) then
73795: LD_VAR 0 1
73799: PPUSH
73800: CALL 24551 0 1
73804: IFFALSE 73845
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73806: LD_VAR 0 1
73810: PPUSH
73811: LD_EXP 111
73815: PUSH
73816: LD_VAR 0 2
73820: ARRAY
73821: PUSH
73822: LD_INT 3
73824: ARRAY
73825: PPUSH
73826: LD_EXP 111
73830: PUSH
73831: LD_VAR 0 2
73835: ARRAY
73836: PUSH
73837: LD_INT 4
73839: ARRAY
73840: PPUSH
73841: CALL_OW 171
// end else
73845: GO 73886
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73847: LD_VAR 0 1
73851: PPUSH
73852: LD_EXP 111
73856: PUSH
73857: LD_VAR 0 2
73861: ARRAY
73862: PUSH
73863: LD_INT 3
73865: ARRAY
73866: PPUSH
73867: LD_EXP 111
73871: PUSH
73872: LD_VAR 0 2
73876: ARRAY
73877: PUSH
73878: LD_INT 4
73880: ARRAY
73881: PPUSH
73882: CALL_OW 171
// end ; end ;
73886: LD_VAR 0 3
73890: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
73891: LD_INT 0
73893: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
73894: LD_VAR 0 1
73898: PUSH
73899: LD_INT 250
73901: EQUAL
73902: PUSH
73903: LD_VAR 0 2
73907: PPUSH
73908: CALL_OW 264
73912: PUSH
73913: LD_INT 81
73915: EQUAL
73916: AND
73917: IFFALSE 73938
// MinerPlaceMine ( unit , x , y ) ;
73919: LD_VAR 0 2
73923: PPUSH
73924: LD_VAR 0 4
73928: PPUSH
73929: LD_VAR 0 5
73933: PPUSH
73934: CALL 76323 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
73938: LD_VAR 0 1
73942: PUSH
73943: LD_INT 251
73945: EQUAL
73946: PUSH
73947: LD_VAR 0 2
73951: PPUSH
73952: CALL_OW 264
73956: PUSH
73957: LD_INT 81
73959: EQUAL
73960: AND
73961: IFFALSE 73982
// MinerDetonateMine ( unit , x , y ) ;
73963: LD_VAR 0 2
73967: PPUSH
73968: LD_VAR 0 4
73972: PPUSH
73973: LD_VAR 0 5
73977: PPUSH
73978: CALL 76598 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
73982: LD_VAR 0 1
73986: PUSH
73987: LD_INT 252
73989: EQUAL
73990: PUSH
73991: LD_VAR 0 2
73995: PPUSH
73996: CALL_OW 264
74000: PUSH
74001: LD_INT 81
74003: EQUAL
74004: AND
74005: IFFALSE 74026
// MinerCreateMinefield ( unit , x , y ) ;
74007: LD_VAR 0 2
74011: PPUSH
74012: LD_VAR 0 4
74016: PPUSH
74017: LD_VAR 0 5
74021: PPUSH
74022: CALL 77015 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74026: LD_VAR 0 1
74030: PUSH
74031: LD_INT 253
74033: EQUAL
74034: PUSH
74035: LD_VAR 0 2
74039: PPUSH
74040: CALL_OW 257
74044: PUSH
74045: LD_INT 5
74047: EQUAL
74048: AND
74049: IFFALSE 74070
// ComBinocular ( unit , x , y ) ;
74051: LD_VAR 0 2
74055: PPUSH
74056: LD_VAR 0 4
74060: PPUSH
74061: LD_VAR 0 5
74065: PPUSH
74066: CALL 77384 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74070: LD_VAR 0 1
74074: PUSH
74075: LD_INT 254
74077: EQUAL
74078: PUSH
74079: LD_VAR 0 2
74083: PPUSH
74084: CALL_OW 264
74088: PUSH
74089: LD_INT 99
74091: EQUAL
74092: AND
74093: PUSH
74094: LD_VAR 0 3
74098: PPUSH
74099: CALL_OW 263
74103: PUSH
74104: LD_INT 3
74106: EQUAL
74107: AND
74108: IFFALSE 74124
// HackDestroyVehicle ( unit , selectedUnit ) ;
74110: LD_VAR 0 2
74114: PPUSH
74115: LD_VAR 0 3
74119: PPUSH
74120: CALL 75687 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74124: LD_VAR 0 1
74128: PUSH
74129: LD_INT 255
74131: EQUAL
74132: PUSH
74133: LD_VAR 0 2
74137: PPUSH
74138: CALL_OW 264
74142: PUSH
74143: LD_INT 14
74145: PUSH
74146: LD_INT 53
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: IN
74153: AND
74154: PUSH
74155: LD_VAR 0 4
74159: PPUSH
74160: LD_VAR 0 5
74164: PPUSH
74165: CALL_OW 488
74169: AND
74170: IFFALSE 74194
// CutTreeXYR ( unit , x , y , 12 ) ;
74172: LD_VAR 0 2
74176: PPUSH
74177: LD_VAR 0 4
74181: PPUSH
74182: LD_VAR 0 5
74186: PPUSH
74187: LD_INT 12
74189: PPUSH
74190: CALL 74257 0 4
// if cmd = 256 then
74194: LD_VAR 0 1
74198: PUSH
74199: LD_INT 256
74201: EQUAL
74202: IFFALSE 74223
// SetFactoryWaypoint ( unit , x , y ) ;
74204: LD_VAR 0 2
74208: PPUSH
74209: LD_VAR 0 4
74213: PPUSH
74214: LD_VAR 0 5
74218: PPUSH
74219: CALL 72041 0 3
// if cmd = 257 then
74223: LD_VAR 0 1
74227: PUSH
74228: LD_INT 257
74230: EQUAL
74231: IFFALSE 74252
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74233: LD_VAR 0 2
74237: PPUSH
74238: LD_VAR 0 4
74242: PPUSH
74243: LD_VAR 0 5
74247: PPUSH
74248: CALL 72403 0 3
// end ;
74252: LD_VAR 0 6
74256: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74257: LD_INT 0
74259: PPUSH
74260: PPUSH
74261: PPUSH
74262: PPUSH
74263: PPUSH
74264: PPUSH
74265: PPUSH
74266: PPUSH
74267: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
74268: LD_VAR 0 1
74272: NOT
74273: PUSH
74274: LD_VAR 0 2
74278: PPUSH
74279: LD_VAR 0 3
74283: PPUSH
74284: CALL_OW 488
74288: NOT
74289: OR
74290: PUSH
74291: LD_VAR 0 4
74295: NOT
74296: OR
74297: IFFALSE 74301
// exit ;
74299: GO 74641
// list := [ ] ;
74301: LD_ADDR_VAR 0 13
74305: PUSH
74306: EMPTY
74307: ST_TO_ADDR
// if x - r < 0 then
74308: LD_VAR 0 2
74312: PUSH
74313: LD_VAR 0 4
74317: MINUS
74318: PUSH
74319: LD_INT 0
74321: LESS
74322: IFFALSE 74334
// min_x := 0 else
74324: LD_ADDR_VAR 0 7
74328: PUSH
74329: LD_INT 0
74331: ST_TO_ADDR
74332: GO 74350
// min_x := x - r ;
74334: LD_ADDR_VAR 0 7
74338: PUSH
74339: LD_VAR 0 2
74343: PUSH
74344: LD_VAR 0 4
74348: MINUS
74349: ST_TO_ADDR
// if y - r < 0 then
74350: LD_VAR 0 3
74354: PUSH
74355: LD_VAR 0 4
74359: MINUS
74360: PUSH
74361: LD_INT 0
74363: LESS
74364: IFFALSE 74376
// min_y := 0 else
74366: LD_ADDR_VAR 0 8
74370: PUSH
74371: LD_INT 0
74373: ST_TO_ADDR
74374: GO 74392
// min_y := y - r ;
74376: LD_ADDR_VAR 0 8
74380: PUSH
74381: LD_VAR 0 3
74385: PUSH
74386: LD_VAR 0 4
74390: MINUS
74391: ST_TO_ADDR
// max_x := x + r ;
74392: LD_ADDR_VAR 0 9
74396: PUSH
74397: LD_VAR 0 2
74401: PUSH
74402: LD_VAR 0 4
74406: PLUS
74407: ST_TO_ADDR
// max_y := y + r ;
74408: LD_ADDR_VAR 0 10
74412: PUSH
74413: LD_VAR 0 3
74417: PUSH
74418: LD_VAR 0 4
74422: PLUS
74423: ST_TO_ADDR
// for _x = min_x to max_x do
74424: LD_ADDR_VAR 0 11
74428: PUSH
74429: DOUBLE
74430: LD_VAR 0 7
74434: DEC
74435: ST_TO_ADDR
74436: LD_VAR 0 9
74440: PUSH
74441: FOR_TO
74442: IFFALSE 74559
// for _y = min_y to max_y do
74444: LD_ADDR_VAR 0 12
74448: PUSH
74449: DOUBLE
74450: LD_VAR 0 8
74454: DEC
74455: ST_TO_ADDR
74456: LD_VAR 0 10
74460: PUSH
74461: FOR_TO
74462: IFFALSE 74555
// begin if not ValidHex ( _x , _y ) then
74464: LD_VAR 0 11
74468: PPUSH
74469: LD_VAR 0 12
74473: PPUSH
74474: CALL_OW 488
74478: NOT
74479: IFFALSE 74483
// continue ;
74481: GO 74461
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74483: LD_VAR 0 11
74487: PPUSH
74488: LD_VAR 0 12
74492: PPUSH
74493: CALL_OW 351
74497: PUSH
74498: LD_VAR 0 11
74502: PPUSH
74503: LD_VAR 0 12
74507: PPUSH
74508: CALL_OW 554
74512: AND
74513: IFFALSE 74553
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74515: LD_ADDR_VAR 0 13
74519: PUSH
74520: LD_VAR 0 13
74524: PPUSH
74525: LD_VAR 0 13
74529: PUSH
74530: LD_INT 1
74532: PLUS
74533: PPUSH
74534: LD_VAR 0 11
74538: PUSH
74539: LD_VAR 0 12
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: PPUSH
74548: CALL_OW 2
74552: ST_TO_ADDR
// end ;
74553: GO 74461
74555: POP
74556: POP
74557: GO 74441
74559: POP
74560: POP
// if not list then
74561: LD_VAR 0 13
74565: NOT
74566: IFFALSE 74570
// exit ;
74568: GO 74641
// for i in list do
74570: LD_ADDR_VAR 0 6
74574: PUSH
74575: LD_VAR 0 13
74579: PUSH
74580: FOR_IN
74581: IFFALSE 74639
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
74583: LD_VAR 0 1
74587: PPUSH
74588: LD_STRING M
74590: PUSH
74591: LD_VAR 0 6
74595: PUSH
74596: LD_INT 1
74598: ARRAY
74599: PUSH
74600: LD_VAR 0 6
74604: PUSH
74605: LD_INT 2
74607: ARRAY
74608: PUSH
74609: LD_INT 0
74611: PUSH
74612: LD_INT 0
74614: PUSH
74615: LD_INT 0
74617: PUSH
74618: LD_INT 0
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: PUSH
74630: EMPTY
74631: LIST
74632: PPUSH
74633: CALL_OW 447
74637: GO 74580
74639: POP
74640: POP
// end ;
74641: LD_VAR 0 5
74645: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
74646: LD_EXP 114
74650: NOT
74651: IFFALSE 74701
74653: GO 74655
74655: DISABLE
// begin initHack := true ;
74656: LD_ADDR_EXP 114
74660: PUSH
74661: LD_INT 1
74663: ST_TO_ADDR
// hackTanks := [ ] ;
74664: LD_ADDR_EXP 115
74668: PUSH
74669: EMPTY
74670: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
74671: LD_ADDR_EXP 116
74675: PUSH
74676: EMPTY
74677: ST_TO_ADDR
// hackLimit := 3 ;
74678: LD_ADDR_EXP 117
74682: PUSH
74683: LD_INT 3
74685: ST_TO_ADDR
// hackDist := 12 ;
74686: LD_ADDR_EXP 118
74690: PUSH
74691: LD_INT 12
74693: ST_TO_ADDR
// hackCounter := [ ] ;
74694: LD_ADDR_EXP 119
74698: PUSH
74699: EMPTY
74700: ST_TO_ADDR
// end ;
74701: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
74702: LD_EXP 114
74706: PUSH
74707: LD_INT 34
74709: PUSH
74710: LD_INT 99
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PPUSH
74717: CALL_OW 69
74721: AND
74722: IFFALSE 74975
74724: GO 74726
74726: DISABLE
74727: LD_INT 0
74729: PPUSH
74730: PPUSH
// begin enable ;
74731: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
74732: LD_ADDR_VAR 0 1
74736: PUSH
74737: LD_INT 34
74739: PUSH
74740: LD_INT 99
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: PPUSH
74747: CALL_OW 69
74751: PUSH
74752: FOR_IN
74753: IFFALSE 74973
// begin if not i in hackTanks then
74755: LD_VAR 0 1
74759: PUSH
74760: LD_EXP 115
74764: IN
74765: NOT
74766: IFFALSE 74849
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
74768: LD_ADDR_EXP 115
74772: PUSH
74773: LD_EXP 115
74777: PPUSH
74778: LD_EXP 115
74782: PUSH
74783: LD_INT 1
74785: PLUS
74786: PPUSH
74787: LD_VAR 0 1
74791: PPUSH
74792: CALL_OW 1
74796: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
74797: LD_ADDR_EXP 116
74801: PUSH
74802: LD_EXP 116
74806: PPUSH
74807: LD_EXP 116
74811: PUSH
74812: LD_INT 1
74814: PLUS
74815: PPUSH
74816: EMPTY
74817: PPUSH
74818: CALL_OW 1
74822: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
74823: LD_ADDR_EXP 119
74827: PUSH
74828: LD_EXP 119
74832: PPUSH
74833: LD_EXP 119
74837: PUSH
74838: LD_INT 1
74840: PLUS
74841: PPUSH
74842: EMPTY
74843: PPUSH
74844: CALL_OW 1
74848: ST_TO_ADDR
// end ; if not IsOk ( i ) then
74849: LD_VAR 0 1
74853: PPUSH
74854: CALL_OW 302
74858: NOT
74859: IFFALSE 74872
// begin HackUnlinkAll ( i ) ;
74861: LD_VAR 0 1
74865: PPUSH
74866: CALL 74978 0 1
// continue ;
74870: GO 74752
// end ; HackCheckCapturedStatus ( i ) ;
74872: LD_VAR 0 1
74876: PPUSH
74877: CALL 75421 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
74881: LD_ADDR_VAR 0 2
74885: PUSH
74886: LD_INT 81
74888: PUSH
74889: LD_VAR 0 1
74893: PPUSH
74894: CALL_OW 255
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: LD_INT 33
74905: PUSH
74906: LD_INT 3
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: LD_INT 91
74915: PUSH
74916: LD_VAR 0 1
74920: PUSH
74921: LD_EXP 118
74925: PUSH
74926: EMPTY
74927: LIST
74928: LIST
74929: LIST
74930: PUSH
74931: LD_INT 50
74933: PUSH
74934: EMPTY
74935: LIST
74936: PUSH
74937: EMPTY
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: PPUSH
74943: CALL_OW 69
74947: ST_TO_ADDR
// if not tmp then
74948: LD_VAR 0 2
74952: NOT
74953: IFFALSE 74957
// continue ;
74955: GO 74752
// HackLink ( i , tmp ) ;
74957: LD_VAR 0 1
74961: PPUSH
74962: LD_VAR 0 2
74966: PPUSH
74967: CALL 75114 0 2
// end ;
74971: GO 74752
74973: POP
74974: POP
// end ;
74975: PPOPN 2
74977: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
74978: LD_INT 0
74980: PPUSH
74981: PPUSH
74982: PPUSH
// if not hack in hackTanks then
74983: LD_VAR 0 1
74987: PUSH
74988: LD_EXP 115
74992: IN
74993: NOT
74994: IFFALSE 74998
// exit ;
74996: GO 75109
// index := GetElementIndex ( hackTanks , hack ) ;
74998: LD_ADDR_VAR 0 4
75002: PUSH
75003: LD_EXP 115
75007: PPUSH
75008: LD_VAR 0 1
75012: PPUSH
75013: CALL 21367 0 2
75017: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75018: LD_EXP 116
75022: PUSH
75023: LD_VAR 0 4
75027: ARRAY
75028: IFFALSE 75109
// begin for i in hackTanksCaptured [ index ] do
75030: LD_ADDR_VAR 0 3
75034: PUSH
75035: LD_EXP 116
75039: PUSH
75040: LD_VAR 0 4
75044: ARRAY
75045: PUSH
75046: FOR_IN
75047: IFFALSE 75073
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75049: LD_VAR 0 3
75053: PUSH
75054: LD_INT 1
75056: ARRAY
75057: PPUSH
75058: LD_VAR 0 3
75062: PUSH
75063: LD_INT 2
75065: ARRAY
75066: PPUSH
75067: CALL_OW 235
75071: GO 75046
75073: POP
75074: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75075: LD_ADDR_EXP 116
75079: PUSH
75080: LD_EXP 116
75084: PPUSH
75085: LD_VAR 0 4
75089: PPUSH
75090: EMPTY
75091: PPUSH
75092: CALL_OW 1
75096: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75097: LD_VAR 0 1
75101: PPUSH
75102: LD_INT 0
75104: PPUSH
75105: CALL_OW 505
// end ; end ;
75109: LD_VAR 0 2
75113: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75114: LD_INT 0
75116: PPUSH
75117: PPUSH
75118: PPUSH
// if not hack in hackTanks or not vehicles then
75119: LD_VAR 0 1
75123: PUSH
75124: LD_EXP 115
75128: IN
75129: NOT
75130: PUSH
75131: LD_VAR 0 2
75135: NOT
75136: OR
75137: IFFALSE 75141
// exit ;
75139: GO 75416
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75141: LD_ADDR_VAR 0 2
75145: PUSH
75146: LD_VAR 0 1
75150: PPUSH
75151: LD_VAR 0 2
75155: PPUSH
75156: LD_INT 1
75158: PPUSH
75159: LD_INT 1
75161: PPUSH
75162: CALL 22017 0 4
75166: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
75167: LD_ADDR_VAR 0 5
75171: PUSH
75172: LD_EXP 115
75176: PPUSH
75177: LD_VAR 0 1
75181: PPUSH
75182: CALL 21367 0 2
75186: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
75187: LD_EXP 116
75191: PUSH
75192: LD_VAR 0 5
75196: ARRAY
75197: PUSH
75198: LD_EXP 117
75202: LESS
75203: IFFALSE 75392
// begin for i := 1 to vehicles do
75205: LD_ADDR_VAR 0 4
75209: PUSH
75210: DOUBLE
75211: LD_INT 1
75213: DEC
75214: ST_TO_ADDR
75215: LD_VAR 0 2
75219: PUSH
75220: FOR_TO
75221: IFFALSE 75390
// begin if hackTanksCaptured [ index ] = hackLimit then
75223: LD_EXP 116
75227: PUSH
75228: LD_VAR 0 5
75232: ARRAY
75233: PUSH
75234: LD_EXP 117
75238: EQUAL
75239: IFFALSE 75243
// break ;
75241: GO 75390
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
75243: LD_ADDR_EXP 119
75247: PUSH
75248: LD_EXP 119
75252: PPUSH
75253: LD_VAR 0 5
75257: PPUSH
75258: LD_EXP 119
75262: PUSH
75263: LD_VAR 0 5
75267: ARRAY
75268: PUSH
75269: LD_INT 1
75271: PLUS
75272: PPUSH
75273: CALL_OW 1
75277: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
75278: LD_ADDR_EXP 116
75282: PUSH
75283: LD_EXP 116
75287: PPUSH
75288: LD_VAR 0 5
75292: PUSH
75293: LD_EXP 116
75297: PUSH
75298: LD_VAR 0 5
75302: ARRAY
75303: PUSH
75304: LD_INT 1
75306: PLUS
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PPUSH
75312: LD_VAR 0 2
75316: PUSH
75317: LD_VAR 0 4
75321: ARRAY
75322: PUSH
75323: LD_VAR 0 2
75327: PUSH
75328: LD_VAR 0 4
75332: ARRAY
75333: PPUSH
75334: CALL_OW 255
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PPUSH
75343: CALL 21582 0 3
75347: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
75348: LD_VAR 0 2
75352: PUSH
75353: LD_VAR 0 4
75357: ARRAY
75358: PPUSH
75359: LD_VAR 0 1
75363: PPUSH
75364: CALL_OW 255
75368: PPUSH
75369: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
75373: LD_VAR 0 2
75377: PUSH
75378: LD_VAR 0 4
75382: ARRAY
75383: PPUSH
75384: CALL_OW 141
// end ;
75388: GO 75220
75390: POP
75391: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
75392: LD_VAR 0 1
75396: PPUSH
75397: LD_EXP 116
75401: PUSH
75402: LD_VAR 0 5
75406: ARRAY
75407: PUSH
75408: LD_INT 0
75410: PLUS
75411: PPUSH
75412: CALL_OW 505
// end ;
75416: LD_VAR 0 3
75420: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
75421: LD_INT 0
75423: PPUSH
75424: PPUSH
75425: PPUSH
75426: PPUSH
// if not hack in hackTanks then
75427: LD_VAR 0 1
75431: PUSH
75432: LD_EXP 115
75436: IN
75437: NOT
75438: IFFALSE 75442
// exit ;
75440: GO 75682
// index := GetElementIndex ( hackTanks , hack ) ;
75442: LD_ADDR_VAR 0 4
75446: PUSH
75447: LD_EXP 115
75451: PPUSH
75452: LD_VAR 0 1
75456: PPUSH
75457: CALL 21367 0 2
75461: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
75462: LD_ADDR_VAR 0 3
75466: PUSH
75467: DOUBLE
75468: LD_EXP 116
75472: PUSH
75473: LD_VAR 0 4
75477: ARRAY
75478: INC
75479: ST_TO_ADDR
75480: LD_INT 1
75482: PUSH
75483: FOR_DOWNTO
75484: IFFALSE 75656
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
75486: LD_ADDR_VAR 0 5
75490: PUSH
75491: LD_EXP 116
75495: PUSH
75496: LD_VAR 0 4
75500: ARRAY
75501: PUSH
75502: LD_VAR 0 3
75506: ARRAY
75507: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
75508: LD_VAR 0 5
75512: PUSH
75513: LD_INT 1
75515: ARRAY
75516: PPUSH
75517: CALL_OW 302
75521: NOT
75522: PUSH
75523: LD_VAR 0 5
75527: PUSH
75528: LD_INT 1
75530: ARRAY
75531: PPUSH
75532: CALL_OW 255
75536: PUSH
75537: LD_VAR 0 1
75541: PPUSH
75542: CALL_OW 255
75546: NONEQUAL
75547: OR
75548: IFFALSE 75654
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
75550: LD_VAR 0 5
75554: PUSH
75555: LD_INT 1
75557: ARRAY
75558: PPUSH
75559: CALL_OW 305
75563: PUSH
75564: LD_VAR 0 5
75568: PUSH
75569: LD_INT 1
75571: ARRAY
75572: PPUSH
75573: CALL_OW 255
75577: PUSH
75578: LD_VAR 0 1
75582: PPUSH
75583: CALL_OW 255
75587: EQUAL
75588: AND
75589: IFFALSE 75613
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
75591: LD_VAR 0 5
75595: PUSH
75596: LD_INT 1
75598: ARRAY
75599: PPUSH
75600: LD_VAR 0 5
75604: PUSH
75605: LD_INT 2
75607: ARRAY
75608: PPUSH
75609: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
75613: LD_ADDR_EXP 116
75617: PUSH
75618: LD_EXP 116
75622: PPUSH
75623: LD_VAR 0 4
75627: PPUSH
75628: LD_EXP 116
75632: PUSH
75633: LD_VAR 0 4
75637: ARRAY
75638: PPUSH
75639: LD_VAR 0 3
75643: PPUSH
75644: CALL_OW 3
75648: PPUSH
75649: CALL_OW 1
75653: ST_TO_ADDR
// end ; end ;
75654: GO 75483
75656: POP
75657: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
75658: LD_VAR 0 1
75662: PPUSH
75663: LD_EXP 116
75667: PUSH
75668: LD_VAR 0 4
75672: ARRAY
75673: PUSH
75674: LD_INT 0
75676: PLUS
75677: PPUSH
75678: CALL_OW 505
// end ;
75682: LD_VAR 0 2
75686: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
75687: LD_INT 0
75689: PPUSH
75690: PPUSH
75691: PPUSH
75692: PPUSH
// if not hack in hackTanks then
75693: LD_VAR 0 1
75697: PUSH
75698: LD_EXP 115
75702: IN
75703: NOT
75704: IFFALSE 75708
// exit ;
75706: GO 75793
// index := GetElementIndex ( hackTanks , hack ) ;
75708: LD_ADDR_VAR 0 5
75712: PUSH
75713: LD_EXP 115
75717: PPUSH
75718: LD_VAR 0 1
75722: PPUSH
75723: CALL 21367 0 2
75727: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
75728: LD_ADDR_VAR 0 4
75732: PUSH
75733: DOUBLE
75734: LD_INT 1
75736: DEC
75737: ST_TO_ADDR
75738: LD_EXP 116
75742: PUSH
75743: LD_VAR 0 5
75747: ARRAY
75748: PUSH
75749: FOR_TO
75750: IFFALSE 75791
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
75752: LD_EXP 116
75756: PUSH
75757: LD_VAR 0 5
75761: ARRAY
75762: PUSH
75763: LD_VAR 0 4
75767: ARRAY
75768: PUSH
75769: LD_INT 1
75771: ARRAY
75772: PUSH
75773: LD_VAR 0 2
75777: EQUAL
75778: IFFALSE 75789
// KillUnit ( vehicle ) ;
75780: LD_VAR 0 2
75784: PPUSH
75785: CALL_OW 66
75789: GO 75749
75791: POP
75792: POP
// end ;
75793: LD_VAR 0 3
75797: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
75798: LD_EXP 120
75802: NOT
75803: IFFALSE 75838
75805: GO 75807
75807: DISABLE
// begin initMiner := true ;
75808: LD_ADDR_EXP 120
75812: PUSH
75813: LD_INT 1
75815: ST_TO_ADDR
// minersList := [ ] ;
75816: LD_ADDR_EXP 121
75820: PUSH
75821: EMPTY
75822: ST_TO_ADDR
// minerMinesList := [ ] ;
75823: LD_ADDR_EXP 122
75827: PUSH
75828: EMPTY
75829: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
75830: LD_ADDR_EXP 123
75834: PUSH
75835: LD_INT 5
75837: ST_TO_ADDR
// end ;
75838: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
75839: LD_EXP 120
75843: PUSH
75844: LD_INT 34
75846: PUSH
75847: LD_INT 81
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: PPUSH
75854: CALL_OW 69
75858: AND
75859: IFFALSE 76320
75861: GO 75863
75863: DISABLE
75864: LD_INT 0
75866: PPUSH
75867: PPUSH
75868: PPUSH
75869: PPUSH
// begin enable ;
75870: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
75871: LD_ADDR_VAR 0 1
75875: PUSH
75876: LD_INT 34
75878: PUSH
75879: LD_INT 81
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: PPUSH
75886: CALL_OW 69
75890: PUSH
75891: FOR_IN
75892: IFFALSE 75964
// begin if not i in minersList then
75894: LD_VAR 0 1
75898: PUSH
75899: LD_EXP 121
75903: IN
75904: NOT
75905: IFFALSE 75962
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
75907: LD_ADDR_EXP 121
75911: PUSH
75912: LD_EXP 121
75916: PPUSH
75917: LD_EXP 121
75921: PUSH
75922: LD_INT 1
75924: PLUS
75925: PPUSH
75926: LD_VAR 0 1
75930: PPUSH
75931: CALL_OW 1
75935: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
75936: LD_ADDR_EXP 122
75940: PUSH
75941: LD_EXP 122
75945: PPUSH
75946: LD_EXP 122
75950: PUSH
75951: LD_INT 1
75953: PLUS
75954: PPUSH
75955: EMPTY
75956: PPUSH
75957: CALL_OW 1
75961: ST_TO_ADDR
// end end ;
75962: GO 75891
75964: POP
75965: POP
// for i := minerMinesList downto 1 do
75966: LD_ADDR_VAR 0 1
75970: PUSH
75971: DOUBLE
75972: LD_EXP 122
75976: INC
75977: ST_TO_ADDR
75978: LD_INT 1
75980: PUSH
75981: FOR_DOWNTO
75982: IFFALSE 76318
// begin if IsLive ( minersList [ i ] ) then
75984: LD_EXP 121
75988: PUSH
75989: LD_VAR 0 1
75993: ARRAY
75994: PPUSH
75995: CALL_OW 300
75999: IFFALSE 76027
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76001: LD_EXP 121
76005: PUSH
76006: LD_VAR 0 1
76010: ARRAY
76011: PPUSH
76012: LD_EXP 122
76016: PUSH
76017: LD_VAR 0 1
76021: ARRAY
76022: PPUSH
76023: CALL_OW 505
// if not minerMinesList [ i ] then
76027: LD_EXP 122
76031: PUSH
76032: LD_VAR 0 1
76036: ARRAY
76037: NOT
76038: IFFALSE 76042
// continue ;
76040: GO 75981
// for j := minerMinesList [ i ] downto 1 do
76042: LD_ADDR_VAR 0 2
76046: PUSH
76047: DOUBLE
76048: LD_EXP 122
76052: PUSH
76053: LD_VAR 0 1
76057: ARRAY
76058: INC
76059: ST_TO_ADDR
76060: LD_INT 1
76062: PUSH
76063: FOR_DOWNTO
76064: IFFALSE 76314
// begin side := GetSide ( minersList [ i ] ) ;
76066: LD_ADDR_VAR 0 3
76070: PUSH
76071: LD_EXP 121
76075: PUSH
76076: LD_VAR 0 1
76080: ARRAY
76081: PPUSH
76082: CALL_OW 255
76086: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76087: LD_ADDR_VAR 0 4
76091: PUSH
76092: LD_EXP 122
76096: PUSH
76097: LD_VAR 0 1
76101: ARRAY
76102: PUSH
76103: LD_VAR 0 2
76107: ARRAY
76108: PUSH
76109: LD_INT 1
76111: ARRAY
76112: PPUSH
76113: LD_EXP 122
76117: PUSH
76118: LD_VAR 0 1
76122: ARRAY
76123: PUSH
76124: LD_VAR 0 2
76128: ARRAY
76129: PUSH
76130: LD_INT 2
76132: ARRAY
76133: PPUSH
76134: CALL_OW 428
76138: ST_TO_ADDR
// if not tmp then
76139: LD_VAR 0 4
76143: NOT
76144: IFFALSE 76148
// continue ;
76146: GO 76063
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76148: LD_VAR 0 4
76152: PUSH
76153: LD_INT 81
76155: PUSH
76156: LD_VAR 0 3
76160: PUSH
76161: EMPTY
76162: LIST
76163: LIST
76164: PPUSH
76165: CALL_OW 69
76169: IN
76170: PUSH
76171: LD_EXP 122
76175: PUSH
76176: LD_VAR 0 1
76180: ARRAY
76181: PUSH
76182: LD_VAR 0 2
76186: ARRAY
76187: PUSH
76188: LD_INT 1
76190: ARRAY
76191: PPUSH
76192: LD_EXP 122
76196: PUSH
76197: LD_VAR 0 1
76201: ARRAY
76202: PUSH
76203: LD_VAR 0 2
76207: ARRAY
76208: PUSH
76209: LD_INT 2
76211: ARRAY
76212: PPUSH
76213: CALL_OW 458
76217: AND
76218: IFFALSE 76312
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
76220: LD_EXP 122
76224: PUSH
76225: LD_VAR 0 1
76229: ARRAY
76230: PUSH
76231: LD_VAR 0 2
76235: ARRAY
76236: PUSH
76237: LD_INT 1
76239: ARRAY
76240: PPUSH
76241: LD_EXP 122
76245: PUSH
76246: LD_VAR 0 1
76250: ARRAY
76251: PUSH
76252: LD_VAR 0 2
76256: ARRAY
76257: PUSH
76258: LD_INT 2
76260: ARRAY
76261: PPUSH
76262: LD_VAR 0 3
76266: PPUSH
76267: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
76271: LD_ADDR_EXP 122
76275: PUSH
76276: LD_EXP 122
76280: PPUSH
76281: LD_VAR 0 1
76285: PPUSH
76286: LD_EXP 122
76290: PUSH
76291: LD_VAR 0 1
76295: ARRAY
76296: PPUSH
76297: LD_VAR 0 2
76301: PPUSH
76302: CALL_OW 3
76306: PPUSH
76307: CALL_OW 1
76311: ST_TO_ADDR
// end ; end ;
76312: GO 76063
76314: POP
76315: POP
// end ;
76316: GO 75981
76318: POP
76319: POP
// end ;
76320: PPOPN 4
76322: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
76323: LD_INT 0
76325: PPUSH
76326: PPUSH
// result := false ;
76327: LD_ADDR_VAR 0 4
76331: PUSH
76332: LD_INT 0
76334: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
76335: LD_VAR 0 1
76339: PPUSH
76340: CALL_OW 264
76344: PUSH
76345: LD_INT 81
76347: EQUAL
76348: NOT
76349: IFFALSE 76353
// exit ;
76351: GO 76593
// index := GetElementIndex ( minersList , unit ) ;
76353: LD_ADDR_VAR 0 5
76357: PUSH
76358: LD_EXP 121
76362: PPUSH
76363: LD_VAR 0 1
76367: PPUSH
76368: CALL 21367 0 2
76372: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
76373: LD_EXP 122
76377: PUSH
76378: LD_VAR 0 5
76382: ARRAY
76383: PUSH
76384: LD_EXP 123
76388: GREATEREQUAL
76389: IFFALSE 76393
// exit ;
76391: GO 76593
// ComMoveXY ( unit , x , y ) ;
76393: LD_VAR 0 1
76397: PPUSH
76398: LD_VAR 0 2
76402: PPUSH
76403: LD_VAR 0 3
76407: PPUSH
76408: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
76412: LD_INT 35
76414: PPUSH
76415: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
76419: LD_VAR 0 1
76423: PPUSH
76424: LD_VAR 0 2
76428: PPUSH
76429: LD_VAR 0 3
76433: PPUSH
76434: CALL 52703 0 3
76438: NOT
76439: PUSH
76440: LD_VAR 0 1
76444: PPUSH
76445: CALL_OW 314
76449: AND
76450: IFFALSE 76454
// exit ;
76452: GO 76593
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
76454: LD_VAR 0 2
76458: PPUSH
76459: LD_VAR 0 3
76463: PPUSH
76464: CALL_OW 428
76468: PUSH
76469: LD_VAR 0 1
76473: EQUAL
76474: PUSH
76475: LD_VAR 0 1
76479: PPUSH
76480: CALL_OW 314
76484: NOT
76485: AND
76486: IFFALSE 76412
// PlaySoundXY ( x , y , PlantMine ) ;
76488: LD_VAR 0 2
76492: PPUSH
76493: LD_VAR 0 3
76497: PPUSH
76498: LD_STRING PlantMine
76500: PPUSH
76501: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
76505: LD_VAR 0 2
76509: PPUSH
76510: LD_VAR 0 3
76514: PPUSH
76515: LD_VAR 0 1
76519: PPUSH
76520: CALL_OW 255
76524: PPUSH
76525: LD_INT 0
76527: PPUSH
76528: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
76532: LD_ADDR_EXP 122
76536: PUSH
76537: LD_EXP 122
76541: PPUSH
76542: LD_VAR 0 5
76546: PUSH
76547: LD_EXP 122
76551: PUSH
76552: LD_VAR 0 5
76556: ARRAY
76557: PUSH
76558: LD_INT 1
76560: PLUS
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: PPUSH
76566: LD_VAR 0 2
76570: PUSH
76571: LD_VAR 0 3
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: PPUSH
76580: CALL 21582 0 3
76584: ST_TO_ADDR
// result := true ;
76585: LD_ADDR_VAR 0 4
76589: PUSH
76590: LD_INT 1
76592: ST_TO_ADDR
// end ;
76593: LD_VAR 0 4
76597: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
76598: LD_INT 0
76600: PPUSH
76601: PPUSH
76602: PPUSH
// if not unit in minersList then
76603: LD_VAR 0 1
76607: PUSH
76608: LD_EXP 121
76612: IN
76613: NOT
76614: IFFALSE 76618
// exit ;
76616: GO 77010
// index := GetElementIndex ( minersList , unit ) ;
76618: LD_ADDR_VAR 0 6
76622: PUSH
76623: LD_EXP 121
76627: PPUSH
76628: LD_VAR 0 1
76632: PPUSH
76633: CALL 21367 0 2
76637: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
76638: LD_ADDR_VAR 0 5
76642: PUSH
76643: DOUBLE
76644: LD_EXP 122
76648: PUSH
76649: LD_VAR 0 6
76653: ARRAY
76654: INC
76655: ST_TO_ADDR
76656: LD_INT 1
76658: PUSH
76659: FOR_DOWNTO
76660: IFFALSE 76821
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
76662: LD_EXP 122
76666: PUSH
76667: LD_VAR 0 6
76671: ARRAY
76672: PUSH
76673: LD_VAR 0 5
76677: ARRAY
76678: PUSH
76679: LD_INT 1
76681: ARRAY
76682: PUSH
76683: LD_VAR 0 2
76687: EQUAL
76688: PUSH
76689: LD_EXP 122
76693: PUSH
76694: LD_VAR 0 6
76698: ARRAY
76699: PUSH
76700: LD_VAR 0 5
76704: ARRAY
76705: PUSH
76706: LD_INT 2
76708: ARRAY
76709: PUSH
76710: LD_VAR 0 3
76714: EQUAL
76715: AND
76716: IFFALSE 76819
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
76718: LD_EXP 122
76722: PUSH
76723: LD_VAR 0 6
76727: ARRAY
76728: PUSH
76729: LD_VAR 0 5
76733: ARRAY
76734: PUSH
76735: LD_INT 1
76737: ARRAY
76738: PPUSH
76739: LD_EXP 122
76743: PUSH
76744: LD_VAR 0 6
76748: ARRAY
76749: PUSH
76750: LD_VAR 0 5
76754: ARRAY
76755: PUSH
76756: LD_INT 2
76758: ARRAY
76759: PPUSH
76760: LD_VAR 0 1
76764: PPUSH
76765: CALL_OW 255
76769: PPUSH
76770: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
76774: LD_ADDR_EXP 122
76778: PUSH
76779: LD_EXP 122
76783: PPUSH
76784: LD_VAR 0 6
76788: PPUSH
76789: LD_EXP 122
76793: PUSH
76794: LD_VAR 0 6
76798: ARRAY
76799: PPUSH
76800: LD_VAR 0 5
76804: PPUSH
76805: CALL_OW 3
76809: PPUSH
76810: CALL_OW 1
76814: ST_TO_ADDR
// exit ;
76815: POP
76816: POP
76817: GO 77010
// end ; end ;
76819: GO 76659
76821: POP
76822: POP
// for i := minerMinesList [ index ] downto 1 do
76823: LD_ADDR_VAR 0 5
76827: PUSH
76828: DOUBLE
76829: LD_EXP 122
76833: PUSH
76834: LD_VAR 0 6
76838: ARRAY
76839: INC
76840: ST_TO_ADDR
76841: LD_INT 1
76843: PUSH
76844: FOR_DOWNTO
76845: IFFALSE 77008
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
76847: LD_EXP 122
76851: PUSH
76852: LD_VAR 0 6
76856: ARRAY
76857: PUSH
76858: LD_VAR 0 5
76862: ARRAY
76863: PUSH
76864: LD_INT 1
76866: ARRAY
76867: PPUSH
76868: LD_EXP 122
76872: PUSH
76873: LD_VAR 0 6
76877: ARRAY
76878: PUSH
76879: LD_VAR 0 5
76883: ARRAY
76884: PUSH
76885: LD_INT 2
76887: ARRAY
76888: PPUSH
76889: LD_VAR 0 2
76893: PPUSH
76894: LD_VAR 0 3
76898: PPUSH
76899: CALL_OW 298
76903: PUSH
76904: LD_INT 6
76906: LESS
76907: IFFALSE 77006
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
76909: LD_EXP 122
76913: PUSH
76914: LD_VAR 0 6
76918: ARRAY
76919: PUSH
76920: LD_VAR 0 5
76924: ARRAY
76925: PUSH
76926: LD_INT 1
76928: ARRAY
76929: PPUSH
76930: LD_EXP 122
76934: PUSH
76935: LD_VAR 0 6
76939: ARRAY
76940: PUSH
76941: LD_VAR 0 5
76945: ARRAY
76946: PUSH
76947: LD_INT 2
76949: ARRAY
76950: PPUSH
76951: LD_VAR 0 1
76955: PPUSH
76956: CALL_OW 255
76960: PPUSH
76961: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
76965: LD_ADDR_EXP 122
76969: PUSH
76970: LD_EXP 122
76974: PPUSH
76975: LD_VAR 0 6
76979: PPUSH
76980: LD_EXP 122
76984: PUSH
76985: LD_VAR 0 6
76989: ARRAY
76990: PPUSH
76991: LD_VAR 0 5
76995: PPUSH
76996: CALL_OW 3
77000: PPUSH
77001: CALL_OW 1
77005: ST_TO_ADDR
// end ; end ;
77006: GO 76844
77008: POP
77009: POP
// end ;
77010: LD_VAR 0 4
77014: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77015: LD_INT 0
77017: PPUSH
77018: PPUSH
77019: PPUSH
77020: PPUSH
77021: PPUSH
77022: PPUSH
77023: PPUSH
77024: PPUSH
77025: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77026: LD_VAR 0 1
77030: PPUSH
77031: CALL_OW 264
77035: PUSH
77036: LD_INT 81
77038: EQUAL
77039: NOT
77040: PUSH
77041: LD_VAR 0 1
77045: PUSH
77046: LD_EXP 121
77050: IN
77051: NOT
77052: OR
77053: IFFALSE 77057
// exit ;
77055: GO 77379
// index := GetElementIndex ( minersList , unit ) ;
77057: LD_ADDR_VAR 0 6
77061: PUSH
77062: LD_EXP 121
77066: PPUSH
77067: LD_VAR 0 1
77071: PPUSH
77072: CALL 21367 0 2
77076: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77077: LD_ADDR_VAR 0 8
77081: PUSH
77082: LD_EXP 123
77086: PUSH
77087: LD_EXP 122
77091: PUSH
77092: LD_VAR 0 6
77096: ARRAY
77097: MINUS
77098: ST_TO_ADDR
// if not minesFreeAmount then
77099: LD_VAR 0 8
77103: NOT
77104: IFFALSE 77108
// exit ;
77106: GO 77379
// tmp := [ ] ;
77108: LD_ADDR_VAR 0 7
77112: PUSH
77113: EMPTY
77114: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77115: LD_ADDR_VAR 0 5
77119: PUSH
77120: DOUBLE
77121: LD_INT 1
77123: DEC
77124: ST_TO_ADDR
77125: LD_VAR 0 8
77129: PUSH
77130: FOR_TO
77131: IFFALSE 77326
// begin _d := rand ( 0 , 5 ) ;
77133: LD_ADDR_VAR 0 11
77137: PUSH
77138: LD_INT 0
77140: PPUSH
77141: LD_INT 5
77143: PPUSH
77144: CALL_OW 12
77148: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77149: LD_ADDR_VAR 0 12
77153: PUSH
77154: LD_INT 2
77156: PPUSH
77157: LD_INT 6
77159: PPUSH
77160: CALL_OW 12
77164: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
77165: LD_ADDR_VAR 0 9
77169: PUSH
77170: LD_VAR 0 2
77174: PPUSH
77175: LD_VAR 0 11
77179: PPUSH
77180: LD_VAR 0 12
77184: PPUSH
77185: CALL_OW 272
77189: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
77190: LD_ADDR_VAR 0 10
77194: PUSH
77195: LD_VAR 0 3
77199: PPUSH
77200: LD_VAR 0 11
77204: PPUSH
77205: LD_VAR 0 12
77209: PPUSH
77210: CALL_OW 273
77214: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
77215: LD_VAR 0 9
77219: PPUSH
77220: LD_VAR 0 10
77224: PPUSH
77225: CALL_OW 488
77229: PUSH
77230: LD_VAR 0 9
77234: PUSH
77235: LD_VAR 0 10
77239: PUSH
77240: EMPTY
77241: LIST
77242: LIST
77243: PUSH
77244: LD_VAR 0 7
77248: IN
77249: NOT
77250: AND
77251: PUSH
77252: LD_VAR 0 9
77256: PPUSH
77257: LD_VAR 0 10
77261: PPUSH
77262: CALL_OW 458
77266: NOT
77267: AND
77268: IFFALSE 77310
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
77270: LD_ADDR_VAR 0 7
77274: PUSH
77275: LD_VAR 0 7
77279: PPUSH
77280: LD_VAR 0 7
77284: PUSH
77285: LD_INT 1
77287: PLUS
77288: PPUSH
77289: LD_VAR 0 9
77293: PUSH
77294: LD_VAR 0 10
77298: PUSH
77299: EMPTY
77300: LIST
77301: LIST
77302: PPUSH
77303: CALL_OW 1
77307: ST_TO_ADDR
77308: GO 77324
// i := i - 1 ;
77310: LD_ADDR_VAR 0 5
77314: PUSH
77315: LD_VAR 0 5
77319: PUSH
77320: LD_INT 1
77322: MINUS
77323: ST_TO_ADDR
// end ;
77324: GO 77130
77326: POP
77327: POP
// for i in tmp do
77328: LD_ADDR_VAR 0 5
77332: PUSH
77333: LD_VAR 0 7
77337: PUSH
77338: FOR_IN
77339: IFFALSE 77377
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
77341: LD_VAR 0 1
77345: PPUSH
77346: LD_VAR 0 5
77350: PUSH
77351: LD_INT 1
77353: ARRAY
77354: PPUSH
77355: LD_VAR 0 5
77359: PUSH
77360: LD_INT 2
77362: ARRAY
77363: PPUSH
77364: CALL 76323 0 3
77368: NOT
77369: IFFALSE 77375
// exit ;
77371: POP
77372: POP
77373: GO 77379
77375: GO 77338
77377: POP
77378: POP
// end ;
77379: LD_VAR 0 4
77383: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
77384: LD_INT 0
77386: PPUSH
77387: PPUSH
77388: PPUSH
77389: PPUSH
77390: PPUSH
77391: PPUSH
77392: PPUSH
// if not GetClass ( unit ) = class_sniper then
77393: LD_VAR 0 1
77397: PPUSH
77398: CALL_OW 257
77402: PUSH
77403: LD_INT 5
77405: EQUAL
77406: NOT
77407: IFFALSE 77411
// exit ;
77409: GO 77799
// dist := 8 ;
77411: LD_ADDR_VAR 0 5
77415: PUSH
77416: LD_INT 8
77418: ST_TO_ADDR
// viewRange := 12 ;
77419: LD_ADDR_VAR 0 7
77423: PUSH
77424: LD_INT 12
77426: ST_TO_ADDR
// side := GetSide ( unit ) ;
77427: LD_ADDR_VAR 0 6
77431: PUSH
77432: LD_VAR 0 1
77436: PPUSH
77437: CALL_OW 255
77441: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
77442: LD_INT 61
77444: PPUSH
77445: LD_VAR 0 6
77449: PPUSH
77450: CALL_OW 321
77454: PUSH
77455: LD_INT 2
77457: EQUAL
77458: IFFALSE 77468
// viewRange := 16 ;
77460: LD_ADDR_VAR 0 7
77464: PUSH
77465: LD_INT 16
77467: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
77468: LD_VAR 0 1
77472: PPUSH
77473: LD_VAR 0 2
77477: PPUSH
77478: LD_VAR 0 3
77482: PPUSH
77483: CALL_OW 297
77487: PUSH
77488: LD_VAR 0 5
77492: GREATER
77493: IFFALSE 77572
// begin ComMoveXY ( unit , x , y ) ;
77495: LD_VAR 0 1
77499: PPUSH
77500: LD_VAR 0 2
77504: PPUSH
77505: LD_VAR 0 3
77509: PPUSH
77510: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77514: LD_INT 35
77516: PPUSH
77517: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
77521: LD_VAR 0 1
77525: PPUSH
77526: LD_VAR 0 2
77530: PPUSH
77531: LD_VAR 0 3
77535: PPUSH
77536: CALL 52703 0 3
77540: NOT
77541: IFFALSE 77545
// exit ;
77543: GO 77799
// until GetDistUnitXY ( unit , x , y ) < dist ;
77545: LD_VAR 0 1
77549: PPUSH
77550: LD_VAR 0 2
77554: PPUSH
77555: LD_VAR 0 3
77559: PPUSH
77560: CALL_OW 297
77564: PUSH
77565: LD_VAR 0 5
77569: LESS
77570: IFFALSE 77514
// end ; ComTurnXY ( unit , x , y ) ;
77572: LD_VAR 0 1
77576: PPUSH
77577: LD_VAR 0 2
77581: PPUSH
77582: LD_VAR 0 3
77586: PPUSH
77587: CALL_OW 118
// wait ( 5 ) ;
77591: LD_INT 5
77593: PPUSH
77594: CALL_OW 67
// _d := GetDir ( unit ) ;
77598: LD_ADDR_VAR 0 10
77602: PUSH
77603: LD_VAR 0 1
77607: PPUSH
77608: CALL_OW 254
77612: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
77613: LD_ADDR_VAR 0 8
77617: PUSH
77618: LD_VAR 0 1
77622: PPUSH
77623: CALL_OW 250
77627: PPUSH
77628: LD_VAR 0 10
77632: PPUSH
77633: LD_VAR 0 5
77637: PPUSH
77638: CALL_OW 272
77642: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
77643: LD_ADDR_VAR 0 9
77647: PUSH
77648: LD_VAR 0 1
77652: PPUSH
77653: CALL_OW 251
77657: PPUSH
77658: LD_VAR 0 10
77662: PPUSH
77663: LD_VAR 0 5
77667: PPUSH
77668: CALL_OW 273
77672: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77673: LD_VAR 0 8
77677: PPUSH
77678: LD_VAR 0 9
77682: PPUSH
77683: CALL_OW 488
77687: NOT
77688: IFFALSE 77692
// exit ;
77690: GO 77799
// ComAnimCustom ( unit , 1 ) ;
77692: LD_VAR 0 1
77696: PPUSH
77697: LD_INT 1
77699: PPUSH
77700: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
77704: LD_VAR 0 8
77708: PPUSH
77709: LD_VAR 0 9
77713: PPUSH
77714: LD_VAR 0 6
77718: PPUSH
77719: LD_VAR 0 7
77723: PPUSH
77724: CALL_OW 330
// repeat wait ( 1 ) ;
77728: LD_INT 1
77730: PPUSH
77731: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
77735: LD_VAR 0 1
77739: PPUSH
77740: CALL_OW 316
77744: PUSH
77745: LD_VAR 0 1
77749: PPUSH
77750: CALL_OW 314
77754: OR
77755: PUSH
77756: LD_VAR 0 1
77760: PPUSH
77761: CALL_OW 302
77765: NOT
77766: OR
77767: PUSH
77768: LD_VAR 0 1
77772: PPUSH
77773: CALL_OW 301
77777: OR
77778: IFFALSE 77728
// RemoveSeeing ( _x , _y , side ) ;
77780: LD_VAR 0 8
77784: PPUSH
77785: LD_VAR 0 9
77789: PPUSH
77790: LD_VAR 0 6
77794: PPUSH
77795: CALL_OW 331
// end ;
77799: LD_VAR 0 4
77803: RET
