// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 19962 0 0
// PrepareRussian ;
  12: CALL 2011 0 0
// PrepareArabian ;
  16: CALL 431 0 0
// Action ;
  20: CALL 3754 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// enable ( entranceEvent ) ;
 420: LD_INT 1
 422: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 423: LD_INT 2
 425: DISABLE_MARKED
// end ; end_of_file
 426: LD_VAR 0 1
 430: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 431: LD_INT 0
 433: PPUSH
 434: PPUSH
// uc_side := 4 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 4
 442: ST_TO_ADDR
// uc_nation := 1 ;
 443: LD_ADDR_OWVAR 21
 447: PUSH
 448: LD_INT 1
 450: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 451: LD_ADDR_EXP 55
 455: PUSH
 456: LD_STRING 07_Americans
 458: PPUSH
 459: CALL_OW 31
 463: ST_TO_ADDR
// if americanSquad < 5 then
 464: LD_EXP 55
 468: PUSH
 469: LD_INT 5
 471: LESS
 472: IFFALSE 566
// begin if not americanSquad then
 474: LD_EXP 55
 478: NOT
 479: IFFALSE 488
// americanSquad := [ ] ;
 481: LD_ADDR_EXP 55
 485: PUSH
 486: EMPTY
 487: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 488: LD_ADDR_VAR 0 2
 492: PUSH
 493: DOUBLE
 494: LD_EXP 55
 498: DEC
 499: ST_TO_ADDR
 500: LD_INT 2
 502: PUSH
 503: LD_INT 3
 505: PUSH
 506: LD_INT 4
 508: PUSH
 509: LD_INT 4
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_OWVAR 67
 522: ARRAY
 523: PUSH
 524: FOR_TO
 525: IFFALSE 562
// begin PrepareHuman ( false , 2 , 6 ) ;
 527: LD_INT 0
 529: PPUSH
 530: LD_INT 2
 532: PPUSH
 533: LD_INT 6
 535: PPUSH
 536: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 540: LD_ADDR_EXP 55
 544: PUSH
 545: LD_EXP 55
 549: PPUSH
 550: CALL_OW 44
 554: PPUSH
 555: CALL 65582 0 2
 559: ST_TO_ADDR
// end ;
 560: GO 524
 562: POP
 563: POP
// end else
 564: GO 613
// for i := Count ( americanSquad ) downto 5 do
 566: LD_ADDR_VAR 0 2
 570: PUSH
 571: DOUBLE
 572: LD_EXP 55
 576: PPUSH
 577: CALL 30216 0 1
 581: INC
 582: ST_TO_ADDR
 583: LD_INT 5
 585: PUSH
 586: FOR_DOWNTO
 587: IFFALSE 611
// americanSquad := Delete ( americanSquad , i ) ;
 589: LD_ADDR_EXP 55
 593: PUSH
 594: LD_EXP 55
 598: PPUSH
 599: LD_VAR 0 2
 603: PPUSH
 604: CALL_OW 3
 608: ST_TO_ADDR
 609: GO 586
 611: POP
 612: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 613: LD_ADDR_EXP 57
 617: PUSH
 618: LD_STRING UsCommander
 620: PPUSH
 621: LD_EXP 1
 625: NOT
 626: PPUSH
 627: LD_STRING 07_
 629: PPUSH
 630: CALL 28114 0 3
 634: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 6
 640: PPUSH
 641: CALL_OW 381
// Jerry := CreateHuman ;
 645: LD_ADDR_EXP 58
 649: PUSH
 650: CALL_OW 44
 654: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 655: LD_EXP 58
 659: PPUSH
 660: LD_INT 33
 662: PPUSH
 663: CALL_OW 336
// if not Doug then
 667: LD_EXP 57
 671: NOT
 672: IFFALSE 694
// begin PrepareSoldier ( sex_male , 6 ) ;
 674: LD_INT 1
 676: PPUSH
 677: LD_INT 6
 679: PPUSH
 680: CALL_OW 381
// Doug := CreateHuman ;
 684: LD_ADDR_EXP 57
 688: PUSH
 689: CALL_OW 44
 693: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 694: LD_EXP 57
 698: PPUSH
 699: LD_INT 33
 701: PPUSH
 702: CALL_OW 336
// if johnnySaved or debug then
 706: LD_EXP 3
 710: PUSH
 711: LD_EXP 1
 715: OR
 716: IFFALSE 743
// begin Harris := NewCharacter ( Harris ) ;
 718: LD_ADDR_EXP 56
 722: PUSH
 723: LD_STRING Harris
 725: PPUSH
 726: CALL_OW 25
 730: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 731: LD_EXP 56
 735: PPUSH
 736: LD_INT 33
 738: PPUSH
 739: CALL_OW 336
// end ; uc_side := 2 ;
 743: LD_ADDR_OWVAR 20
 747: PUSH
 748: LD_INT 2
 750: ST_TO_ADDR
// uc_nation := 2 ;
 751: LD_ADDR_OWVAR 21
 755: PUSH
 756: LD_INT 2
 758: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 759: LD_ADDR_EXP 43
 763: PUSH
 764: LD_STRING Heike
 766: PPUSH
 767: LD_EXP 1
 771: NOT
 772: PPUSH
 773: LD_EXP 2
 777: PPUSH
 778: CALL 28114 0 3
 782: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 783: LD_ADDR_EXP 46
 787: PUSH
 788: LD_STRING Ibrahim
 790: PPUSH
 791: LD_EXP 1
 795: NOT
 796: PPUSH
 797: LD_EXP 2
 801: PPUSH
 802: CALL 28114 0 3
 806: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 807: LD_ADDR_EXP 44
 811: PUSH
 812: LD_STRING Givi
 814: PPUSH
 815: LD_EXP 1
 819: NOT
 820: PPUSH
 821: LD_EXP 2
 825: PPUSH
 826: CALL 28114 0 3
 830: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 831: LD_ADDR_EXP 47
 835: PUSH
 836: LD_STRING Kamil
 838: PPUSH
 839: LD_EXP 1
 843: NOT
 844: PPUSH
 845: LD_EXP 2
 849: PPUSH
 850: CALL 28114 0 3
 854: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 855: LD_ADDR_EXP 48
 859: PUSH
 860: LD_STRING Kaia
 862: PPUSH
 863: LD_EXP 1
 867: NOT
 868: PPUSH
 869: LD_EXP 2
 873: PPUSH
 874: CALL 28114 0 3
 878: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 879: LD_ADDR_EXP 49
 883: PUSH
 884: LD_STRING Sophia
 886: PPUSH
 887: LD_EXP 1
 891: NOT
 892: PPUSH
 893: LD_EXP 2
 897: PPUSH
 898: CALL 28114 0 3
 902: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 903: LD_ADDR_EXP 50
 907: PUSH
 908: LD_STRING Markov
 910: PPUSH
 911: LD_EXP 1
 915: NOT
 916: PPUSH
 917: LD_EXP 2
 921: PPUSH
 922: CALL 28114 0 3
 926: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 927: LD_ADDR_EXP 53
 931: PUSH
 932: LD_STRING Aviradze
 934: PPUSH
 935: LD_EXP 1
 939: NOT
 940: PPUSH
 941: LD_EXP 2
 945: PPUSH
 946: CALL 28114 0 3
 950: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 951: LD_ADDR_EXP 52
 955: PUSH
 956: LD_STRING Kurt
 958: PPUSH
 959: LD_EXP 1
 963: NOT
 964: PPUSH
 965: LD_EXP 2
 969: PPUSH
 970: CALL 28114 0 3
 974: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 975: LD_ADDR_EXP 45
 979: PUSH
 980: LD_STRING Mike
 982: PPUSH
 983: LD_EXP 1
 987: NOT
 988: PPUSH
 989: LD_EXP 2
 993: PPUSH
 994: CALL 28114 0 3
 998: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 999: LD_ADDR_EXP 51
1003: PUSH
1004: LD_STRING Olaf
1006: PPUSH
1007: LD_EXP 1
1011: NOT
1012: PPUSH
1013: LD_EXP 2
1017: PPUSH
1018: CALL 28114 0 3
1022: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1023: LD_ADDR_EXP 54
1027: PUSH
1028: LD_STRING 07_others
1030: PPUSH
1031: CALL_OW 31
1035: ST_TO_ADDR
// end ;
1036: LD_VAR 0 1
1040: RET
// export function PrepareGame ; var i ; begin
1041: LD_INT 0
1043: PPUSH
1044: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1045: LD_EXP 43
1049: PPUSH
1050: LD_INT 23
1052: PPUSH
1053: CALL_OW 52
// if Givi then
1057: LD_EXP 44
1061: IFFALSE 1099
// begin SetSide ( Givi , 5 ) ;
1063: LD_EXP 44
1067: PPUSH
1068: LD_INT 5
1070: PPUSH
1071: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1075: LD_EXP 44
1079: PPUSH
1080: LD_INT 9
1082: PPUSH
1083: LD_INT 0
1085: PPUSH
1086: CALL_OW 49
// ComHold ( Givi ) ;
1090: LD_EXP 44
1094: PPUSH
1095: CALL_OW 140
// end ; if Markov then
1099: LD_EXP 50
1103: IFFALSE 1141
// begin SetSide ( Markov , 5 ) ;
1105: LD_EXP 50
1109: PPUSH
1110: LD_INT 5
1112: PPUSH
1113: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1117: LD_EXP 50
1121: PPUSH
1122: LD_INT 3
1124: PPUSH
1125: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1129: LD_EXP 50
1133: PPUSH
1134: LD_INT 61
1136: PPUSH
1137: CALL_OW 52
// end ; if Mike then
1141: LD_EXP 45
1145: IFFALSE 1183
// begin SetSide ( Mike , 5 ) ;
1147: LD_EXP 45
1151: PPUSH
1152: LD_INT 5
1154: PPUSH
1155: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1159: LD_EXP 45
1163: PPUSH
1164: LD_INT 17
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// ComHold ( Mike ) ;
1174: LD_EXP 45
1178: PPUSH
1179: CALL_OW 140
// end ; if Olaf then
1183: LD_EXP 51
1187: IFFALSE 1228
// begin SetSide ( Olaf , 5 ) ;
1189: LD_EXP 51
1193: PPUSH
1194: LD_INT 5
1196: PPUSH
1197: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1201: LD_EXP 51
1205: PPUSH
1206: LD_INT 16
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1216: LD_EXP 51
1220: PPUSH
1221: LD_INT 3
1223: PPUSH
1224: CALL 68734 0 2
// end ; if Kamil then
1228: LD_EXP 47
1232: IFFALSE 1258
// begin SetSide ( Kamil , 5 ) ;
1234: LD_EXP 47
1238: PPUSH
1239: LD_INT 5
1241: PPUSH
1242: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1246: LD_EXP 47
1250: PPUSH
1251: LD_INT 109
1253: PPUSH
1254: CALL_OW 52
// end ; if Kurt then
1258: LD_EXP 52
1262: IFFALSE 1288
// begin SetSide ( Kurt , 5 ) ;
1264: LD_EXP 52
1268: PPUSH
1269: LD_INT 5
1271: PPUSH
1272: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1276: LD_EXP 52
1280: PPUSH
1281: LD_INT 169
1283: PPUSH
1284: CALL_OW 52
// end ; if Kaia then
1288: LD_EXP 48
1292: IFFALSE 1318
// begin SetSide ( Kaia , 5 ) ;
1294: LD_EXP 48
1298: PPUSH
1299: LD_INT 5
1301: PPUSH
1302: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1306: LD_EXP 48
1310: PPUSH
1311: LD_INT 147
1313: PPUSH
1314: CALL_OW 52
// end ; if Sophia then
1318: LD_EXP 49
1322: IFFALSE 1363
// begin SetSide ( Sophia , 5 ) ;
1324: LD_EXP 49
1328: PPUSH
1329: LD_INT 5
1331: PPUSH
1332: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1336: LD_EXP 49
1340: PPUSH
1341: LD_INT 142
1343: PPUSH
1344: LD_INT 96
1346: PPUSH
1347: LD_INT 0
1349: PPUSH
1350: CALL_OW 48
// ComHold ( Sophia ) ;
1354: LD_EXP 49
1358: PPUSH
1359: CALL_OW 140
// end ; if Harris then
1363: LD_EXP 56
1367: IFFALSE 1405
// begin SetSide ( Harris , 4 ) ;
1369: LD_EXP 56
1373: PPUSH
1374: LD_INT 4
1376: PPUSH
1377: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1381: LD_EXP 56
1385: PPUSH
1386: LD_INT 20
1388: PPUSH
1389: LD_INT 0
1391: PPUSH
1392: CALL_OW 49
// ComHold ( i ) ;
1396: LD_VAR 0 2
1400: PPUSH
1401: CALL_OW 140
// end ; if Doug then
1405: LD_EXP 57
1409: IFFALSE 1435
// begin SetSide ( Doug , 4 ) ;
1411: LD_EXP 57
1415: PPUSH
1416: LD_INT 4
1418: PPUSH
1419: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1423: LD_EXP 57
1427: PPUSH
1428: LD_INT 106
1430: PPUSH
1431: CALL_OW 52
// end ; if Aviradze then
1435: LD_EXP 53
1439: IFFALSE 1465
// begin SetSide ( Aviradze , 5 ) ;
1441: LD_EXP 53
1445: PPUSH
1446: LD_INT 5
1448: PPUSH
1449: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1453: LD_EXP 53
1457: PPUSH
1458: LD_INT 119
1460: PPUSH
1461: CALL_OW 52
// end ; if Ibrahim then
1465: LD_EXP 46
1469: IFFALSE 1495
// begin SetSide ( Ibrahim , 5 ) ;
1471: LD_EXP 46
1475: PPUSH
1476: LD_INT 5
1478: PPUSH
1479: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1483: LD_EXP 46
1487: PPUSH
1488: LD_INT 119
1490: PPUSH
1491: CALL_OW 52
// end ; if Jerry then
1495: LD_EXP 58
1499: IFFALSE 1540
// begin SetSide ( Jerry , 4 ) ;
1501: LD_EXP 58
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1513: LD_EXP 58
1517: PPUSH
1518: LD_INT 119
1520: PPUSH
1521: LD_INT 59
1523: PPUSH
1524: LD_INT 0
1526: PPUSH
1527: CALL_OW 48
// ComHold ( Jerry ) ;
1531: LD_EXP 58
1535: PPUSH
1536: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1540: LD_EXP 62
1544: PPUSH
1545: LD_INT 119
1547: PPUSH
1548: CALL_OW 52
// for i in americanSquad do
1552: LD_ADDR_VAR 0 2
1556: PUSH
1557: LD_EXP 55
1561: PUSH
1562: FOR_IN
1563: IFFALSE 1591
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1565: LD_VAR 0 2
1569: PPUSH
1570: LD_INT 21
1572: PPUSH
1573: LD_INT 0
1575: PPUSH
1576: CALL_OW 49
// ComHold ( i ) ;
1580: LD_VAR 0 2
1584: PPUSH
1585: CALL_OW 140
// end ;
1589: GO 1562
1591: POP
1592: POP
// for i in heikeSecondSquad do
1593: LD_ADDR_VAR 0 2
1597: PUSH
1598: LD_EXP 54
1602: PUSH
1603: FOR_IN
1604: IFFALSE 1644
// begin SetSide ( i , 5 ) ;
1606: LD_VAR 0 2
1610: PPUSH
1611: LD_INT 5
1613: PPUSH
1614: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1618: LD_VAR 0 2
1622: PPUSH
1623: LD_INT 22
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 49
// ComHold ( i ) ;
1633: LD_VAR 0 2
1637: PPUSH
1638: CALL_OW 140
// end ;
1642: GO 1603
1644: POP
1645: POP
// if not hasVodka then
1646: LD_EXP 4
1650: NOT
1651: IFFALSE 1710
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1653: LD_ADDR_VAR 0 2
1657: PUSH
1658: LD_INT 2
1660: PUSH
1661: LD_INT 22
1663: PUSH
1664: LD_INT 2
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 22
1673: PUSH
1674: LD_INT 5
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 69
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1708
// SetLives ( i , 500 ) ;
1694: LD_VAR 0 2
1698: PPUSH
1699: LD_INT 500
1701: PPUSH
1702: CALL_OW 234
1706: GO 1691
1708: POP
1709: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1710: LD_ADDR_VAR 0 2
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 4
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PUSH
1730: FOR_IN
1731: IFFALSE 1747
// SetLives ( i , 500 ) ;
1733: LD_VAR 0 2
1737: PPUSH
1738: LD_INT 500
1740: PPUSH
1741: CALL_OW 234
1745: GO 1730
1747: POP
1748: POP
// end ;
1749: LD_VAR 0 1
1753: RET
// export function SetClassKaiaRevolver ; begin
1754: LD_INT 0
1756: PPUSH
// if not IsOk ( Kaia ) then
1757: LD_EXP 48
1761: PPUSH
1762: CALL_OW 302
1766: NOT
1767: IFFALSE 1771
// exit ;
1769: GO 1790
// SetClass ( Kaia , class_revolver ) ;
1771: LD_EXP 48
1775: PPUSH
1776: LD_INT 34
1778: PPUSH
1779: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1783: LD_STRING ACH_REVOLVER
1785: PPUSH
1786: CALL_OW 543
// end ;
1790: LD_VAR 0 1
1794: RET
// export function SpawnHeikeAsRussian ; begin
1795: LD_INT 0
1797: PPUSH
// RemoveUnit ( Heike ) ;
1798: LD_EXP 43
1802: PPUSH
1803: CALL_OW 64
// heikeTmp := Heike ;
1807: LD_ADDR_EXP 59
1811: PUSH
1812: LD_EXP 43
1816: ST_TO_ADDR
// uc_side := 2 ;
1817: LD_ADDR_OWVAR 20
1821: PUSH
1822: LD_INT 2
1824: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1825: LD_ADDR_EXP 43
1829: PUSH
1830: LD_STRING HeikeRu
1832: PPUSH
1833: CALL_OW 25
1837: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1838: LD_EXP 59
1842: PPUSH
1843: LD_EXP 43
1847: PPUSH
1848: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1852: LD_EXP 43
1856: PPUSH
1857: LD_INT 165
1859: PPUSH
1860: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1864: LD_EXP 43
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: CALL_OW 336
// heikeAsRussian := true ;
1876: LD_ADDR_EXP 27
1880: PUSH
1881: LD_INT 1
1883: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1884: LD_STRING M1-laundry-out
1886: PPUSH
1887: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1891: LD_STRING ACH_HEIKERU
1893: PPUSH
1894: CALL_OW 543
// end ;
1898: LD_VAR 0 1
1902: RET
// export function SpawnGiviAsRussian ; begin
1903: LD_INT 0
1905: PPUSH
// RemoveUnit ( Givi ) ;
1906: LD_EXP 44
1910: PPUSH
1911: CALL_OW 64
// giviTmp := Givi ;
1915: LD_ADDR_EXP 60
1919: PUSH
1920: LD_EXP 44
1924: ST_TO_ADDR
// uc_side := 2 ;
1925: LD_ADDR_OWVAR 20
1929: PUSH
1930: LD_INT 2
1932: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1933: LD_ADDR_EXP 44
1937: PUSH
1938: LD_STRING GiviRu
1940: PPUSH
1941: CALL_OW 25
1945: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1946: LD_EXP 60
1950: PPUSH
1951: LD_EXP 44
1955: PPUSH
1956: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1960: LD_EXP 44
1964: PPUSH
1965: LD_INT 165
1967: PPUSH
1968: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1972: LD_EXP 44
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: CALL_OW 336
// giviAsRussian := true ;
1984: LD_ADDR_EXP 28
1988: PUSH
1989: LD_INT 1
1991: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1992: LD_STRING M1-laundry-out
1994: PPUSH
1995: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
1999: LD_STRING ACH_GIVIRU
2001: PPUSH
2002: CALL_OW 543
// end ; end_of_file
2006: LD_VAR 0 1
2010: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2011: LD_INT 0
2013: PPUSH
2014: PPUSH
2015: PPUSH
2016: PPUSH
2017: PPUSH
// uc_side := 3 ;
2018: LD_ADDR_OWVAR 20
2022: PUSH
2023: LD_INT 3
2025: ST_TO_ADDR
// uc_nation := 3 ;
2026: LD_ADDR_OWVAR 21
2030: PUSH
2031: LD_INT 3
2033: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
2034: LD_INT 192
2036: PPUSH
2037: LD_STRING kitchen
2039: PPUSH
2040: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2044: LD_INT 165
2046: PPUSH
2047: LD_STRING laundry
2049: PPUSH
2050: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2054: LD_INT 54
2056: PPUSH
2057: LD_STRING adminSection
2059: PPUSH
2060: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 3
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PPUSH
2079: CALL_OW 69
2083: PUSH
2084: FOR_IN
2085: IFFALSE 2101
// SetBLevel ( i , 7 ) ;
2087: LD_VAR 0 2
2091: PPUSH
2092: LD_INT 7
2094: PPUSH
2095: CALL_OW 241
2099: GO 2084
2101: POP
2102: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2103: LD_ADDR_VAR 0 2
2107: PUSH
2108: LD_INT 22
2110: PUSH
2111: LD_INT 3
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 2
2120: PUSH
2121: LD_INT 30
2123: PUSH
2124: LD_INT 0
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 30
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: LIST
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PPUSH
2150: CALL_OW 69
2154: PUSH
2155: FOR_IN
2156: IFFALSE 2220
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2158: LD_VAR 0 2
2162: PPUSH
2163: CALL_OW 274
2167: PPUSH
2168: LD_INT 1
2170: PPUSH
2171: LD_INT 1000
2173: PPUSH
2174: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2178: LD_VAR 0 2
2182: PPUSH
2183: CALL_OW 274
2187: PPUSH
2188: LD_INT 2
2190: PPUSH
2191: LD_INT 1000
2193: PPUSH
2194: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2198: LD_VAR 0 2
2202: PPUSH
2203: CALL_OW 274
2207: PPUSH
2208: LD_INT 3
2210: PPUSH
2211: LD_INT 100
2213: PPUSH
2214: CALL_OW 277
// end ;
2218: GO 2155
2220: POP
2221: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2222: LD_ADDR_VAR 0 2
2226: PUSH
2227: LD_INT 22
2229: PUSH
2230: LD_INT 3
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: PUSH
2237: LD_INT 30
2239: PUSH
2240: LD_INT 32
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: PPUSH
2251: CALL_OW 69
2255: PUSH
2256: FOR_IN
2257: IFFALSE 2291
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2259: LD_INT 0
2261: PPUSH
2262: LD_INT 5
2264: PUSH
2265: LD_OWVAR 67
2269: PLUS
2270: PPUSH
2271: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2275: CALL_OW 44
2279: PPUSH
2280: LD_VAR 0 2
2284: PPUSH
2285: CALL_OW 52
// end ;
2289: GO 2256
2291: POP
2292: POP
// for i := 1 to 2 do
2293: LD_ADDR_VAR 0 2
2297: PUSH
2298: DOUBLE
2299: LD_INT 1
2301: DEC
2302: ST_TO_ADDR
2303: LD_INT 2
2305: PUSH
2306: FOR_TO
2307: IFFALSE 2359
// begin PrepareMechanic ( false , 8 ) ;
2309: LD_INT 0
2311: PPUSH
2312: LD_INT 8
2314: PPUSH
2315: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2319: LD_ADDR_EXP 64
2323: PUSH
2324: LD_EXP 64
2328: PPUSH
2329: CALL_OW 44
2333: PPUSH
2334: CALL 65582 0 2
2338: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2339: LD_EXP 64
2343: PUSH
2344: LD_EXP 64
2348: ARRAY
2349: PPUSH
2350: LD_INT 61
2352: PPUSH
2353: CALL_OW 52
// end ;
2357: GO 2306
2359: POP
2360: POP
// PrepareMechanic ( sex_male , 8 ) ;
2361: LD_INT 1
2363: PPUSH
2364: LD_INT 8
2366: PPUSH
2367: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2371: LD_ADDR_EXP 65
2375: PUSH
2376: LD_EXP 65
2380: PPUSH
2381: CALL_OW 44
2385: PPUSH
2386: CALL 65582 0 2
2390: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2391: LD_EXP 65
2395: PUSH
2396: LD_EXP 65
2400: ARRAY
2401: PPUSH
2402: LD_INT 196
2404: PPUSH
2405: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2409: LD_INT 1
2411: PPUSH
2412: LD_INT 8
2414: PPUSH
2415: CALL_OW 383
// hc_name := Stiepan Simonov ;
2419: LD_ADDR_OWVAR 26
2423: PUSH
2424: LD_STRING Stiepan Simonov
2426: ST_TO_ADDR
// Stiopa := CreateHuman ;
2427: LD_ADDR_EXP 66
2431: PUSH
2432: CALL_OW 44
2436: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2437: LD_INT 2
2439: PPUSH
2440: LD_INT 8
2442: PPUSH
2443: CALL_OW 383
// hc_name := Laura Dragunov ;
2447: LD_ADDR_OWVAR 26
2451: PUSH
2452: LD_STRING Laura Dragunov
2454: ST_TO_ADDR
// Laura := CreateHuman ;
2455: LD_ADDR_EXP 67
2459: PUSH
2460: CALL_OW 44
2464: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2465: LD_EXP 67
2469: PPUSH
2470: LD_INT 196
2472: PPUSH
2473: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2477: LD_INT 1
2479: PPUSH
2480: LD_INT 8
2482: PPUSH
2483: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2487: LD_ADDR_EXP 64
2491: PUSH
2492: LD_EXP 64
2496: PPUSH
2497: LD_INT 1
2499: PPUSH
2500: CALL_OW 44
2504: PPUSH
2505: CALL_OW 2
2509: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2510: LD_EXP 64
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: LD_INT 61
2521: PPUSH
2522: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2526: LD_INT 1
2528: PPUSH
2529: LD_INT 8
2531: PPUSH
2532: CALL_OW 381
// hc_name := Pavel Muchin ;
2536: LD_ADDR_OWVAR 26
2540: PUSH
2541: LD_STRING Pavel Muchin
2543: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2544: LD_ADDR_OWVAR 29
2548: PUSH
2549: LD_INT 13
2551: PUSH
2552: LD_INT 13
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2559: LD_ADDR_EXP 63
2563: PUSH
2564: CALL_OW 44
2568: ST_TO_ADDR
// InitHC_All ( ) ;
2569: CALL_OW 584
// if Difficulty > 1 then
2573: LD_OWVAR 67
2577: PUSH
2578: LD_INT 1
2580: GREATER
2581: IFFALSE 2701
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2583: LD_ADDR_VAR 0 2
2587: PUSH
2588: DOUBLE
2589: LD_INT 1
2591: DEC
2592: ST_TO_ADDR
2593: LD_INT 3
2595: PUSH
2596: LD_INT 4
2598: PUSH
2599: LD_INT 5
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: LIST
2606: PUSH
2607: LD_OWVAR 67
2611: PUSH
2612: LD_INT 1
2614: PLUS
2615: ARRAY
2616: PUSH
2617: FOR_TO
2618: IFFALSE 2699
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2620: LD_INT 0
2622: PPUSH
2623: LD_INT 5
2625: PUSH
2626: LD_INT 6
2628: PUSH
2629: LD_INT 7
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: PUSH
2637: LD_OWVAR 67
2641: PUSH
2642: LD_INT 1
2644: PLUS
2645: ARRAY
2646: PPUSH
2647: CALL_OW 381
// un := CreateHuman ;
2651: LD_ADDR_VAR 0 4
2655: PUSH
2656: CALL_OW 44
2660: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2661: LD_VAR 0 4
2665: PPUSH
2666: LD_INT 62
2668: PUSH
2669: LD_INT 63
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: LD_VAR 0 2
2680: PUSH
2681: LD_INT 2
2683: MOD
2684: PUSH
2685: LD_INT 1
2687: PLUS
2688: ARRAY
2689: PPUSH
2690: LD_INT 0
2692: PPUSH
2693: CALL_OW 49
// end ;
2697: GO 2617
2699: POP
2700: POP
// end ; uc_side := 6 ;
2701: LD_ADDR_OWVAR 20
2705: PUSH
2706: LD_INT 6
2708: ST_TO_ADDR
// uc_nation := 3 ;
2709: LD_ADDR_OWVAR 21
2713: PUSH
2714: LD_INT 3
2716: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2717: LD_ADDR_VAR 0 5
2721: PUSH
2722: LD_INT 14
2724: PUSH
2725: LD_INT 15
2727: PUSH
2728: LD_INT 48
2730: PUSH
2731: LD_INT 24
2733: PUSH
2734: LD_INT 149
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: ST_TO_ADDR
// for i in tmp do
2744: LD_ADDR_VAR 0 2
2748: PUSH
2749: LD_VAR 0 5
2753: PUSH
2754: FOR_IN
2755: IFFALSE 2803
// begin for j := 1 to 2 do
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: DOUBLE
2763: LD_INT 1
2765: DEC
2766: ST_TO_ADDR
2767: LD_INT 2
2769: PUSH
2770: FOR_TO
2771: IFFALSE 2799
// begin PrepareSoldier ( false , 7 ) ;
2773: LD_INT 0
2775: PPUSH
2776: LD_INT 7
2778: PPUSH
2779: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2783: CALL_OW 44
2787: PPUSH
2788: LD_VAR 0 2
2792: PPUSH
2793: CALL_OW 52
// end ;
2797: GO 2770
2799: POP
2800: POP
// end ;
2801: GO 2754
2803: POP
2804: POP
// end ;
2805: LD_VAR 0 1
2809: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2810: LD_INT 0
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
// uc_side := 3 ;
2816: LD_ADDR_OWVAR 20
2820: PUSH
2821: LD_INT 3
2823: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2824: LD_ADDR_OWVAR 21
2828: PUSH
2829: LD_INT 1
2831: PPUSH
2832: LD_INT 3
2834: PPUSH
2835: CALL_OW 12
2839: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2840: LD_ADDR_VAR 0 4
2844: PUSH
2845: LD_INT 5
2847: PPUSH
2848: LD_INT 0
2850: PPUSH
2851: CALL_OW 517
2855: ST_TO_ADDR
// for i := 1 to 3 do
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: DOUBLE
2862: LD_INT 1
2864: DEC
2865: ST_TO_ADDR
2866: LD_INT 3
2868: PUSH
2869: FOR_TO
2870: IFFALSE 2939
// begin PrepareHuman ( false , 33 , 0 ) ;
2872: LD_INT 0
2874: PPUSH
2875: LD_INT 33
2877: PPUSH
2878: LD_INT 0
2880: PPUSH
2881: CALL_OW 380
// un := CreateHuman ;
2885: LD_ADDR_VAR 0 3
2889: PUSH
2890: CALL_OW 44
2894: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_VAR 0 4
2904: PUSH
2905: LD_INT 1
2907: ARRAY
2908: PUSH
2909: LD_VAR 0 2
2913: ARRAY
2914: PPUSH
2915: LD_VAR 0 4
2919: PUSH
2920: LD_INT 2
2922: ARRAY
2923: PUSH
2924: LD_VAR 0 2
2928: ARRAY
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL_OW 601
// end ;
2937: GO 2869
2939: POP
2940: POP
// end ;
2941: LD_VAR 0 1
2945: RET
// export function PrepareFirstScene ; var i , un ; begin
2946: LD_INT 0
2948: PPUSH
2949: PPUSH
2950: PPUSH
// uc_side := 4 ;
2951: LD_ADDR_OWVAR 20
2955: PUSH
2956: LD_INT 4
2958: ST_TO_ADDR
// uc_nation := 1 ;
2959: LD_ADDR_OWVAR 21
2963: PUSH
2964: LD_INT 1
2966: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2967: LD_INT 0
2969: PPUSH
2970: LD_INT 33
2972: PPUSH
2973: LD_INT 0
2975: PPUSH
2976: CALL_OW 380
// for i := 1 to 2 do
2980: LD_ADDR_VAR 0 2
2984: PUSH
2985: DOUBLE
2986: LD_INT 1
2988: DEC
2989: ST_TO_ADDR
2990: LD_INT 2
2992: PUSH
2993: FOR_TO
2994: IFFALSE 3059
// begin un := CreateHuman ;
2996: LD_ADDR_VAR 0 3
3000: PUSH
3001: CALL_OW 44
3005: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3006: LD_VAR 0 3
3010: PPUSH
3011: LD_INT 1
3013: PPUSH
3014: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3018: LD_VAR 0 3
3022: PPUSH
3023: LD_INT 6
3025: PPUSH
3026: LD_INT 0
3028: PPUSH
3029: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3033: LD_VAR 0 3
3037: PPUSH
3038: LD_INT 1
3040: PPUSH
3041: CALL 68734 0 2
// SetLives ( un , 300 ) ;
3045: LD_VAR 0 3
3049: PPUSH
3050: LD_INT 300
3052: PPUSH
3053: CALL_OW 234
// end ;
3057: GO 2993
3059: POP
3060: POP
// uc_side := 3 ;
3061: LD_ADDR_OWVAR 20
3065: PUSH
3066: LD_INT 3
3068: ST_TO_ADDR
// uc_nation := 3 ;
3069: LD_ADDR_OWVAR 21
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 5
3082: PPUSH
3083: CALL_OW 381
// for i := 1 to 3 do
3087: LD_ADDR_VAR 0 2
3091: PUSH
3092: DOUBLE
3093: LD_INT 1
3095: DEC
3096: ST_TO_ADDR
3097: LD_INT 3
3099: PUSH
3100: FOR_TO
3101: IFFALSE 3174
// begin un := CreateHuman ;
3103: LD_ADDR_VAR 0 3
3107: PUSH
3108: CALL_OW 44
3112: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3113: LD_ADDR_EXP 61
3117: PUSH
3118: LD_EXP 61
3122: PPUSH
3123: LD_VAR 0 3
3127: PPUSH
3128: CALL 65582 0 2
3132: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3133: LD_VAR 0 3
3137: PPUSH
3138: LD_INT 4
3140: PPUSH
3141: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3145: LD_VAR 0 3
3149: PPUSH
3150: LD_INT 7
3152: PPUSH
3153: LD_INT 0
3155: PPUSH
3156: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3160: LD_VAR 0 3
3164: PPUSH
3165: LD_INT 4
3167: PPUSH
3168: CALL 68734 0 2
// end ;
3172: GO 3100
3174: POP
3175: POP
// ruCommisar := CreateHuman ;
3176: LD_ADDR_EXP 62
3180: PUSH
3181: CALL_OW 44
3185: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3186: LD_EXP 62
3190: PPUSH
3191: LD_INT 124
3193: PPUSH
3194: LD_INT 37
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3204: LD_EXP 62
3208: PPUSH
3209: LD_INT 3
3211: PPUSH
3212: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3216: LD_EXP 62
3220: PPUSH
3221: LD_INT 3
3223: PPUSH
3224: CALL 68734 0 2
// end ;
3228: LD_VAR 0 1
3232: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3233: LD_INT 0
3235: PPUSH
3236: PPUSH
3237: PPUSH
3238: PPUSH
// uc_side := 6 ;
3239: LD_ADDR_OWVAR 20
3243: PUSH
3244: LD_INT 6
3246: ST_TO_ADDR
// uc_nation := 3 ;
3247: LD_ADDR_OWVAR 21
3251: PUSH
3252: LD_INT 3
3254: ST_TO_ADDR
// ruPatrol := [ ] ;
3255: LD_ADDR_EXP 68
3259: PUSH
3260: EMPTY
3261: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3262: LD_ADDR_VAR 0 4
3266: PUSH
3267: LD_INT 26
3269: PUSH
3270: LD_INT 30
3272: PUSH
3273: LD_INT 39
3275: PUSH
3276: LD_INT 43
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: ST_TO_ADDR
// for i := 1 to spawn do
3285: LD_ADDR_VAR 0 2
3289: PUSH
3290: DOUBLE
3291: LD_INT 1
3293: DEC
3294: ST_TO_ADDR
3295: LD_VAR 0 4
3299: PUSH
3300: FOR_TO
3301: IFFALSE 3412
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3303: LD_INT 0
3305: PPUSH
3306: LD_INT 4
3308: PUSH
3309: LD_INT 5
3311: PUSH
3312: LD_INT 6
3314: PUSH
3315: LD_INT 7
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: PUSH
3324: LD_OWVAR 67
3328: ARRAY
3329: PPUSH
3330: CALL_OW 381
// un := CreateHuman ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: CALL_OW 44
3343: ST_TO_ADDR
// SetTag ( un , i ) ;
3344: LD_VAR 0 3
3348: PPUSH
3349: LD_VAR 0 2
3353: PPUSH
3354: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3358: LD_ADDR_EXP 68
3362: PUSH
3363: LD_EXP 68
3367: PPUSH
3368: LD_VAR 0 3
3372: PPUSH
3373: CALL 65582 0 2
3377: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3378: LD_VAR 0 3
3382: PPUSH
3383: LD_VAR 0 4
3387: PUSH
3388: LD_VAR 0 2
3392: ARRAY
3393: PPUSH
3394: LD_INT 0
3396: PPUSH
3397: CALL_OW 49
// ComHold ( un ) ;
3401: LD_VAR 0 3
3405: PPUSH
3406: CALL_OW 140
// end ;
3410: GO 3300
3412: POP
3413: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3414: LD_ADDR_VAR 0 4
3418: PUSH
3419: LD_INT 48
3421: PUSH
3422: LD_INT 49
3424: PUSH
3425: LD_INT 50
3427: PUSH
3428: LD_INT 51
3430: PUSH
3431: LD_INT 52
3433: PUSH
3434: LD_INT 53
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: ST_TO_ADDR
// for i := 1 to spawn do
3445: LD_ADDR_VAR 0 2
3449: PUSH
3450: DOUBLE
3451: LD_INT 1
3453: DEC
3454: ST_TO_ADDR
3455: LD_VAR 0 4
3459: PUSH
3460: FOR_TO
3461: IFFALSE 3570
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3463: LD_INT 0
3465: PPUSH
3466: LD_INT 4
3468: PUSH
3469: LD_INT 5
3471: PUSH
3472: LD_INT 6
3474: PUSH
3475: LD_INT 7
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_OWVAR 67
3488: ARRAY
3489: PPUSH
3490: CALL_OW 381
// un := CreateHuman ;
3494: LD_ADDR_VAR 0 3
3498: PUSH
3499: CALL_OW 44
3503: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3504: LD_VAR 0 3
3508: PPUSH
3509: LD_INT 0
3511: PPUSH
3512: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3516: LD_ADDR_EXP 68
3520: PUSH
3521: LD_EXP 68
3525: PPUSH
3526: LD_VAR 0 3
3530: PPUSH
3531: CALL 65582 0 2
3535: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3536: LD_VAR 0 3
3540: PPUSH
3541: LD_VAR 0 4
3545: PUSH
3546: LD_VAR 0 2
3550: ARRAY
3551: PPUSH
3552: LD_INT 0
3554: PPUSH
3555: CALL_OW 49
// ComHold ( un ) ;
3559: LD_VAR 0 3
3563: PPUSH
3564: CALL_OW 140
// end ;
3568: GO 3460
3570: POP
3571: POP
// end ;
3572: LD_VAR 0 1
3576: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3577: LD_INT 0
3579: PPUSH
3580: PPUSH
3581: PPUSH
3582: PPUSH
// uc_side := 6 ;
3583: LD_ADDR_OWVAR 20
3587: PUSH
3588: LD_INT 6
3590: ST_TO_ADDR
// uc_nation := nation_russian ;
3591: LD_ADDR_OWVAR 21
3595: PUSH
3596: LD_INT 3
3598: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3599: LD_ADDR_VAR 0 4
3603: PUSH
3604: LD_INT 54
3606: PUSH
3607: LD_INT 55
3609: PUSH
3610: LD_INT 56
3612: PUSH
3613: LD_INT 57
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: ST_TO_ADDR
// for i := 1 to spawn do
3622: LD_ADDR_VAR 0 2
3626: PUSH
3627: DOUBLE
3628: LD_INT 1
3630: DEC
3631: ST_TO_ADDR
3632: LD_VAR 0 4
3636: PUSH
3637: FOR_TO
3638: IFFALSE 3747
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3640: LD_INT 0
3642: PPUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 5
3648: PUSH
3649: LD_INT 6
3651: PUSH
3652: LD_INT 7
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_OWVAR 67
3665: ARRAY
3666: PPUSH
3667: CALL_OW 381
// un := CreateHuman ;
3671: LD_ADDR_VAR 0 3
3675: PUSH
3676: CALL_OW 44
3680: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3681: LD_VAR 0 3
3685: PPUSH
3686: LD_INT 0
3688: PPUSH
3689: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3693: LD_ADDR_EXP 68
3697: PUSH
3698: LD_EXP 68
3702: PPUSH
3703: LD_VAR 0 3
3707: PPUSH
3708: CALL 65582 0 2
3712: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3713: LD_VAR 0 3
3717: PPUSH
3718: LD_VAR 0 4
3722: PUSH
3723: LD_VAR 0 2
3727: ARRAY
3728: PPUSH
3729: LD_INT 0
3731: PPUSH
3732: CALL_OW 49
// ComHold ( un ) ;
3736: LD_VAR 0 3
3740: PPUSH
3741: CALL_OW 140
// end ;
3745: GO 3637
3747: POP
3748: POP
// end ; end_of_file
3749: LD_VAR 0 1
3753: RET
// export function Action ; var speaker , i , tmp ; begin
3754: LD_INT 0
3756: PPUSH
3757: PPUSH
3758: PPUSH
3759: PPUSH
// Video ( true ) ;
3760: LD_INT 1
3762: PPUSH
3763: CALL 65554 0 1
// hasNormalScene := Kaia or Givi ;
3767: LD_ADDR_EXP 5
3771: PUSH
3772: LD_EXP 48
3776: PUSH
3777: LD_EXP 44
3781: OR
3782: ST_TO_ADDR
// if hasNormalScene then
3783: LD_EXP 5
3787: IFFALSE 4028
// begin for i in americanSquad do
3789: LD_ADDR_VAR 0 3
3793: PUSH
3794: LD_EXP 55
3798: PUSH
3799: FOR_IN
3800: IFFALSE 3846
// begin SetClass ( i , class_prison ) ;
3802: LD_VAR 0 3
3806: PPUSH
3807: LD_INT 33
3809: PPUSH
3810: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3814: LD_VAR 0 3
3818: PPUSH
3819: LD_INT 78
3821: PPUSH
3822: LD_INT 16
3824: PPUSH
3825: LD_INT 5
3827: PPUSH
3828: LD_INT 0
3830: PPUSH
3831: CALL_OW 50
// ComHold ( i ) ;
3835: LD_VAR 0 3
3839: PPUSH
3840: CALL_OW 140
// end ;
3844: GO 3799
3846: POP
3847: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3848: LD_ADDR_VAR 0 4
3852: PUSH
3853: LD_EXP 45
3857: PUSH
3858: LD_EXP 46
3862: PUSH
3863: LD_EXP 47
3867: PUSH
3868: LD_EXP 48
3872: PUSH
3873: LD_EXP 49
3877: PUSH
3878: LD_EXP 50
3882: PUSH
3883: LD_EXP 51
3887: PUSH
3888: LD_EXP 52
3892: PUSH
3893: LD_EXP 44
3897: PUSH
3898: LD_EXP 53
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: PUSH
3915: LD_EXP 54
3919: UNION
3920: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3921: LD_EXP 43
3925: PPUSH
3926: LD_INT 33
3928: PPUSH
3929: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3933: LD_EXP 43
3937: PPUSH
3938: LD_INT 117
3940: PPUSH
3941: LD_INT 24
3943: PPUSH
3944: LD_INT 3
3946: PPUSH
3947: LD_INT 0
3949: PPUSH
3950: CALL 67722 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3954: LD_EXP 43
3958: PPUSH
3959: LD_INT 123
3961: PPUSH
3962: LD_INT 39
3964: PPUSH
3965: CALL_OW 118
// for i in tmp do
3969: LD_ADDR_VAR 0 3
3973: PUSH
3974: LD_VAR 0 4
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4026
// begin SetClass ( i , class_prison ) ;
3982: LD_VAR 0 3
3986: PPUSH
3987: LD_INT 33
3989: PPUSH
3990: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
3994: LD_VAR 0 3
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: LD_INT 0
4004: PPUSH
4005: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4009: LD_VAR 0 3
4013: PPUSH
4014: LD_INT 113
4016: PPUSH
4017: LD_INT 16
4019: PPUSH
4020: CALL_OW 118
// end ;
4024: GO 3979
4026: POP
4027: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4028: LD_INT 124
4030: PPUSH
4031: LD_INT 39
4033: PPUSH
4034: CALL_OW 86
// PrepareDeadBodies ;
4038: CALL 2810 0 0
// PrepareFirstScene ;
4042: CALL 2946 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4046: LD_INT 152
4048: PPUSH
4049: LD_INT 65
4051: PPUSH
4052: LD_INT 2
4054: PPUSH
4055: LD_INT 70
4057: NEG
4058: PPUSH
4059: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4063: LD_INT 152
4065: PPUSH
4066: LD_INT 65
4068: PPUSH
4069: LD_INT 2
4071: PPUSH
4072: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4076: LD_INT 122
4078: PPUSH
4079: LD_INT 40
4081: PPUSH
4082: LD_INT 2
4084: PPUSH
4085: LD_INT 8
4087: NEG
4088: PPUSH
4089: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4093: LD_INT 124
4095: PPUSH
4096: LD_INT 37
4098: PPUSH
4099: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4103: LD_EXP 62
4107: PPUSH
4108: LD_STRING DRum-Execution-1
4110: PPUSH
4111: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4115: LD_EXP 62
4119: PPUSH
4120: LD_STRING DRum-Execution-2
4122: PPUSH
4123: CALL_OW 88
// wait ( 0 0$01 ) ;
4127: LD_INT 35
4129: PPUSH
4130: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4134: LD_EXP 62
4138: PPUSH
4139: LD_STRING DRum-Execution-3
4141: PPUSH
4142: CALL_OW 88
// wait ( 0 0$1 ) ;
4146: LD_INT 35
4148: PPUSH
4149: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4153: LD_EXP 62
4157: PPUSH
4158: LD_STRING DRum-Execution-4
4160: PPUSH
4161: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4165: LD_EXP 61
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: LD_INT 122
4176: PPUSH
4177: LD_INT 39
4179: PPUSH
4180: CALL_OW 428
4184: PPUSH
4185: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4189: LD_EXP 61
4193: PUSH
4194: LD_INT 2
4196: ARRAY
4197: PPUSH
4198: LD_INT 123
4200: PPUSH
4201: LD_INT 41
4203: PPUSH
4204: CALL_OW 428
4208: PPUSH
4209: CALL_OW 115
// AddComHold ( russianKillers ) ;
4213: LD_EXP 61
4217: PPUSH
4218: CALL_OW 200
// wait ( 0 0$1 ) ;
4222: LD_INT 35
4224: PPUSH
4225: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4229: LD_INT 122
4231: PPUSH
4232: LD_INT 40
4234: PPUSH
4235: LD_INT 2
4237: PPUSH
4238: CALL_OW 331
// for i in russianKillers union ruCommisar do
4242: LD_ADDR_VAR 0 3
4246: PUSH
4247: LD_EXP 61
4251: PUSH
4252: LD_EXP 62
4256: UNION
4257: PUSH
4258: FOR_IN
4259: IFFALSE 4272
// RemoveUnit ( i ) ;
4261: LD_VAR 0 3
4265: PPUSH
4266: CALL_OW 64
4270: GO 4258
4272: POP
4273: POP
// if hasNormalScene then
4274: LD_EXP 5
4278: IFFALSE 4286
// ActionNormal else
4280: CALL 4295 0 0
4284: GO 4290
// ActionAdditional ;
4286: CALL 6113 0 0
// end ;
4290: LD_VAR 0 1
4294: RET
// function ActionNormal ; var i , tmp ; begin
4295: LD_INT 0
4297: PPUSH
4298: PPUSH
4299: PPUSH
// CenterNowOnUnits ( Heike ) ;
4300: LD_EXP 43
4304: PPUSH
4305: CALL_OW 87
// wait ( 0 0$1 ) ;
4309: LD_INT 35
4311: PPUSH
4312: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4316: LD_EXP 43
4320: PPUSH
4321: LD_INT 115
4323: PPUSH
4324: LD_INT 19
4326: PPUSH
4327: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4331: LD_EXP 43
4335: PPUSH
4336: LD_INT 113
4338: PPUSH
4339: LD_INT 16
4341: PPUSH
4342: CALL_OW 178
// wait ( 0 0$2 ) ;
4346: LD_INT 70
4348: PPUSH
4349: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4353: LD_EXP 43
4357: PPUSH
4358: LD_STRING DH-Conspiracy-1
4360: PPUSH
4361: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4365: LD_EXP 48
4369: PPUSH
4370: LD_STRING DK-Conspiracy-2
4372: PPUSH
4373: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4377: LD_EXP 44
4381: PPUSH
4382: LD_STRING DG-Conspiracy-3
4384: PPUSH
4385: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4389: LD_EXP 44
4393: PPUSH
4394: LD_STRING DG-Conspiracy-4
4396: PPUSH
4397: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4401: LD_EXP 43
4405: PPUSH
4406: LD_STRING DH-Conspiracy-5
4408: PPUSH
4409: CALL_OW 88
// if IsOk ( Kamil ) then
4413: LD_EXP 47
4417: PPUSH
4418: CALL_OW 302
4422: IFFALSE 4480
// begin hasVodka := true ;
4424: LD_ADDR_EXP 4
4428: PUSH
4429: LD_INT 1
4431: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4432: LD_EXP 47
4436: PPUSH
4437: LD_STRING DKam-Conspiracy-6
4439: PPUSH
4440: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4444: LD_EXP 47
4448: PPUSH
4449: LD_STRING DKam-Conspiracy-7
4451: PPUSH
4452: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4456: LD_EXP 47
4460: PPUSH
4461: LD_STRING DKam-Conspiracy-8
4463: PPUSH
4464: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4468: LD_EXP 47
4472: PPUSH
4473: LD_STRING DKam-Conspiracy-9
4475: PPUSH
4476: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4480: LD_EXP 49
4484: PPUSH
4485: CALL_OW 302
4489: IFFALSE 4670
// begin americanContact := true ;
4491: LD_ADDR_EXP 10
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4499: LD_STRING M1-american
4501: PPUSH
4502: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4506: LD_EXP 49
4510: PPUSH
4511: LD_STRING DS-Conspiracy-10
4513: PPUSH
4514: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4518: LD_EXP 50
4522: PPUSH
4523: LD_STRING DM-Conspiracy-11
4525: PPUSH
4526: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4530: LD_EXP 49
4534: PPUSH
4535: LD_STRING DS-Conspiracy-12
4537: PPUSH
4538: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4542: LD_INT 84
4544: PPUSH
4545: LD_INT 19
4547: PPUSH
4548: LD_INT 105
4550: PPUSH
4551: CALL 19323 0 3
// if johnnySaved then
4555: LD_EXP 3
4559: IFFALSE 4599
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4561: LD_EXP 49
4565: PPUSH
4566: LD_STRING DS-Conspiracy-13
4568: PPUSH
4569: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4573: LD_EXP 43
4577: PPUSH
4578: LD_STRING DH-Conspiracy-14
4580: PPUSH
4581: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4585: LD_EXP 49
4589: PPUSH
4590: LD_STRING DH-Conspiracy-15
4592: PPUSH
4593: CALL_OW 88
// end else
4597: GO 4635
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4599: LD_EXP 49
4603: PPUSH
4604: LD_STRING DS-Conspiracy-a-13
4606: PPUSH
4607: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4611: LD_EXP 43
4615: PPUSH
4616: LD_STRING DH-Conspiracy-a-14
4618: PPUSH
4619: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
4623: LD_EXP 49
4627: PPUSH
4628: LD_STRING DH-Conspiracy-a-15
4630: PPUSH
4631: CALL_OW 88
// end ; if IsOk ( Givi ) then
4635: LD_EXP 44
4639: PPUSH
4640: CALL_OW 302
4644: IFFALSE 4670
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4646: LD_EXP 44
4650: PPUSH
4651: LD_STRING DG-Conspiracy-a-16
4653: PPUSH
4654: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4658: LD_EXP 43
4662: PPUSH
4663: LD_STRING DH-Conspiracy-a-17
4665: PPUSH
4666: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4670: LD_EXP 43
4674: PPUSH
4675: LD_STRING DH-Conspiracy-16
4677: PPUSH
4678: CALL_OW 88
// if IsOk ( Givi ) then
4682: LD_EXP 44
4686: PPUSH
4687: CALL_OW 302
4691: IFFALSE 4963
// begin hasStimDrugs := true ;
4693: LD_ADDR_EXP 9
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4701: LD_STRING M1-drugs
4703: PPUSH
4704: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4708: LD_EXP 44
4712: PPUSH
4713: LD_STRING DG-Conspiracy-17
4715: PPUSH
4716: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4720: LD_INT 162
4722: PPUSH
4723: LD_INT 2
4725: PPUSH
4726: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4730: LD_INT 194
4732: PPUSH
4733: LD_INT 98
4735: PPUSH
4736: LD_INT 105
4738: PPUSH
4739: CALL 19323 0 3
// SetSide ( drugsLab , 3 ) ;
4743: LD_INT 162
4745: PPUSH
4746: LD_INT 3
4748: PPUSH
4749: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4753: LD_EXP 44
4757: PPUSH
4758: LD_STRING DG-Conspiracy-18
4760: PPUSH
4761: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4765: LD_EXP 44
4769: PPUSH
4770: LD_STRING DG-Conspiracy-19
4772: PPUSH
4773: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4777: LD_EXP 44
4781: PPUSH
4782: LD_STRING DG-Conspiracy-20
4784: PPUSH
4785: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4789: LD_EXP 43
4793: PPUSH
4794: LD_STRING DH-Conspiracy-21
4796: PPUSH
4797: CALL_OW 88
// if IsOk ( Kaia ) then
4801: LD_EXP 48
4805: PPUSH
4806: CALL_OW 302
4810: IFFALSE 4884
// begin hasExplosions := true ;
4812: LD_ADDR_EXP 6
4816: PUSH
4817: LD_INT 1
4819: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4820: LD_STRING M1-explosive
4822: PPUSH
4823: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4827: LD_EXP 48
4831: PPUSH
4832: LD_STRING DK-Conspiracy-22
4834: PPUSH
4835: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4839: LD_INT 73
4841: PPUSH
4842: LD_INT 2
4844: PPUSH
4845: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4849: LD_INT 170
4851: PPUSH
4852: LD_INT 104
4854: PPUSH
4855: LD_INT 105
4857: PPUSH
4858: CALL 19323 0 3
// SetSide ( barExplosion , 3 ) ;
4862: LD_INT 73
4864: PPUSH
4865: LD_INT 3
4867: PPUSH
4868: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4872: LD_EXP 48
4876: PPUSH
4877: LD_STRING DK-Conspiracy-23
4879: PPUSH
4880: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4884: LD_EXP 51
4888: PPUSH
4889: CALL_OW 302
4893: IFFALSE 4963
// begin hasExplosionsInFactory := true ;
4895: LD_ADDR_EXP 7
4899: PUSH
4900: LD_INT 1
4902: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4903: LD_EXP 51
4907: PPUSH
4908: LD_STRING DO-Conspiracy-24
4910: PPUSH
4911: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4915: LD_INT 175
4917: PPUSH
4918: LD_INT 54
4920: PPUSH
4921: LD_INT 70
4923: PPUSH
4924: CALL 19323 0 3
// if IsOk ( Markov ) then
4928: LD_EXP 50
4932: PPUSH
4933: CALL_OW 302
4937: IFFALSE 4963
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4939: LD_EXP 50
4943: PPUSH
4944: LD_STRING DMar-Conspiracy-25
4946: PPUSH
4947: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4951: LD_EXP 50
4955: PPUSH
4956: LD_STRING DMar-Conspiracy-26
4958: PPUSH
4959: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4963: LD_EXP 52
4967: PPUSH
4968: CALL_OW 302
4972: PUSH
4973: LD_EXP 48
4977: PPUSH
4978: CALL_OW 302
4982: AND
4983: IFFALSE 5443
// begin hasWeapons := true ;
4985: LD_ADDR_EXP 19
4989: PUSH
4990: LD_INT 1
4992: ST_TO_ADDR
// hasRevolver := true ;
4993: LD_ADDR_EXP 8
4997: PUSH
4998: LD_INT 1
5000: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5001: LD_STRING M1-weapons
5003: PPUSH
5004: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5008: LD_EXP 52
5012: PPUSH
5013: LD_STRING DKs-Conspiracy-27
5015: PPUSH
5016: CALL_OW 88
// if IsOk ( Givi ) then
5020: LD_EXP 44
5024: PPUSH
5025: CALL_OW 302
5029: IFFALSE 5045
// Say ( Givi , DG-Conspiracy-28 ) else
5031: LD_EXP 44
5035: PPUSH
5036: LD_STRING DG-Conspiracy-28
5038: PPUSH
5039: CALL_OW 88
5043: GO 5110
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5045: LD_EXP 54
5049: PPUSH
5050: LD_INT 26
5052: PUSH
5053: LD_INT 1
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PPUSH
5060: CALL_OW 72
5064: PUSH
5065: LD_INT 1
5067: ARRAY
5068: PPUSH
5069: LD_STRING DArm-Conspiracy-a-28
5071: PPUSH
5072: CALL_OW 88
5076: NOT
5077: IFFALSE 5110
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5079: LD_EXP 54
5083: PPUSH
5084: LD_INT 26
5086: PUSH
5087: LD_INT 2
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PPUSH
5094: CALL_OW 72
5098: PUSH
5099: LD_INT 1
5101: ARRAY
5102: PPUSH
5103: LD_STRING DArf-Conspiracy-a-28
5105: PPUSH
5106: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5110: LD_EXP 52
5114: PPUSH
5115: LD_STRING DKs-Conspiracy-29
5117: PPUSH
5118: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5122: LD_INT 192
5124: PPUSH
5125: LD_INT 122
5127: PPUSH
5128: LD_INT 105
5130: PPUSH
5131: CALL 19323 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5135: LD_EXP 52
5139: PPUSH
5140: LD_STRING DKs-Conspiracy-30
5142: PPUSH
5143: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5147: LD_EXP 48
5151: PPUSH
5152: LD_STRING DK-Conspiracy-31
5154: PPUSH
5155: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5159: LD_EXP 50
5163: PPUSH
5164: LD_STRING DMar-Conspiracy-33
5166: PPUSH
5167: CALL_OW 88
5171: NOT
5172: PUSH
5173: LD_EXP 54
5177: AND
5178: IFFALSE 5245
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5180: LD_EXP 54
5184: PPUSH
5185: LD_INT 26
5187: PUSH
5188: LD_INT 1
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PPUSH
5195: CALL_OW 72
5199: PUSH
5200: LD_INT 1
5202: ARRAY
5203: PPUSH
5204: LD_STRING DArm-Conspiracy-a-34
5206: PPUSH
5207: CALL_OW 88
5211: NOT
5212: IFFALSE 5245
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5214: LD_EXP 54
5218: PPUSH
5219: LD_INT 26
5221: PUSH
5222: LD_INT 2
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: PPUSH
5229: CALL_OW 72
5233: PUSH
5234: LD_INT 1
5236: ARRAY
5237: PPUSH
5238: LD_STRING DArf-Conspiracy-a-34
5240: PPUSH
5241: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5245: LD_EXP 48
5249: PPUSH
5250: LD_STRING DK-Conspiracy-34
5252: PPUSH
5253: CALL_OW 88
// if IsOk ( Markov ) then
5257: LD_EXP 50
5261: PPUSH
5262: CALL_OW 302
5266: IFFALSE 5351
// begin hasSniperRifle := true ;
5268: LD_ADDR_EXP 11
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5276: LD_EXP 50
5280: PPUSH
5281: LD_STRING DMar-Conspiracy-35
5283: PPUSH
5284: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5288: LD_EXP 48
5292: PPUSH
5293: LD_STRING DK-Conspiracy-36
5295: PPUSH
5296: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5300: LD_EXP 50
5304: PPUSH
5305: LD_STRING DMar-Conspiracy-37
5307: PPUSH
5308: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5312: LD_EXP 50
5316: PPUSH
5317: LD_STRING DMar-Conspiracy-38
5319: PPUSH
5320: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5324: LD_INT 137
5326: PPUSH
5327: LD_INT 98
5329: PPUSH
5330: LD_INT 105
5332: PPUSH
5333: CALL 19323 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5337: LD_EXP 50
5341: PPUSH
5342: LD_STRING DMar-Conspiracy-39
5344: PPUSH
5345: CALL_OW 88
// end else
5349: GO 5443
// if heikeSecondSquad then
5351: LD_EXP 54
5355: IFFALSE 5443
// begin hasSniperRifle := true ;
5357: LD_ADDR_EXP 11
5361: PUSH
5362: LD_INT 1
5364: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5365: LD_INT 137
5367: PPUSH
5368: LD_INT 98
5370: PPUSH
5371: LD_INT 105
5373: PPUSH
5374: CALL 19323 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5378: LD_EXP 54
5382: PPUSH
5383: LD_INT 26
5385: PUSH
5386: LD_INT 1
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PPUSH
5393: CALL_OW 72
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: LD_STRING DArm-Conspiracy-a-35
5404: PPUSH
5405: CALL_OW 88
5409: NOT
5410: IFFALSE 5443
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5412: LD_EXP 54
5416: PPUSH
5417: LD_INT 26
5419: PUSH
5420: LD_INT 2
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PPUSH
5427: CALL_OW 72
5431: PUSH
5432: LD_INT 1
5434: ARRAY
5435: PPUSH
5436: LD_STRING DArf-Conspiracy-a-35
5438: PPUSH
5439: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5443: LD_EXP 43
5447: PPUSH
5448: LD_STRING DH-Conspiracy-40
5450: PPUSH
5451: CALL_OW 88
// if IsOk ( Mike ) then
5455: LD_EXP 45
5459: PPUSH
5460: CALL_OW 302
5464: IFFALSE 5523
// begin hasScout := true ;
5466: LD_ADDR_EXP 12
5470: PUSH
5471: LD_INT 1
5473: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5474: LD_EXP 45
5478: PPUSH
5479: LD_STRING DM-Conspiracy-41
5481: PPUSH
5482: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5486: LD_EXP 45
5490: PPUSH
5491: LD_STRING DM-Conspiracy-42
5493: PPUSH
5494: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5498: LD_INT 73
5500: PPUSH
5501: LD_INT 102
5503: PPUSH
5504: LD_INT 105
5506: PPUSH
5507: CALL 19323 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5511: LD_EXP 45
5515: PPUSH
5516: LD_STRING DM-Conspiracy-43
5518: PPUSH
5519: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5523: LD_EXP 4
5527: PUSH
5528: LD_EXP 48
5532: PPUSH
5533: CALL_OW 302
5537: AND
5538: PUSH
5539: LD_EXP 52
5543: PPUSH
5544: CALL_OW 302
5548: AND
5549: IFFALSE 5595
// begin hasMethanol := true ;
5551: LD_ADDR_EXP 13
5555: PUSH
5556: LD_INT 1
5558: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5559: LD_EXP 48
5563: PPUSH
5564: LD_STRING DK-Conspiracy-44
5566: PPUSH
5567: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5571: LD_EXP 48
5575: PPUSH
5576: LD_STRING DK-Conspiracy-45
5578: PPUSH
5579: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5583: LD_EXP 47
5587: PPUSH
5588: LD_STRING DKam-Conspiracy-46
5590: PPUSH
5591: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5595: LD_EXP 43
5599: PPUSH
5600: LD_STRING DH-Conspiracy-47
5602: PPUSH
5603: CALL_OW 88
// wait ( 0 0$1 ) ;
5607: LD_INT 35
5609: PPUSH
5610: CALL_OW 67
// your_side := 8 ;
5614: LD_ADDR_OWVAR 2
5618: PUSH
5619: LD_INT 8
5621: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5622: LD_INT 1
5624: PPUSH
5625: LD_INT 1
5627: PPUSH
5628: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5632: LD_ADDR_VAR 0 2
5636: PUSH
5637: LD_INT 2
5639: PUSH
5640: LD_INT 22
5642: PUSH
5643: LD_INT 2
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: LD_INT 22
5652: PUSH
5653: LD_INT 4
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: LIST
5664: PUSH
5665: LD_INT 21
5667: PUSH
5668: LD_INT 1
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: CALL_OW 69
5683: PUSH
5684: FOR_IN
5685: IFFALSE 5698
// RemoveUnit ( i ) ;
5687: LD_VAR 0 2
5691: PPUSH
5692: CALL_OW 64
5696: GO 5684
5698: POP
5699: POP
// wait ( 0 0$0.3 ) ;
5700: LD_INT 10
5702: PPUSH
5703: CALL_OW 67
// Query ( StartInfo1 ) ;
5707: LD_STRING StartInfo1
5709: PPUSH
5710: CALL_OW 97
// wait ( 0 0$1 ) ;
5714: LD_INT 35
5716: PPUSH
5717: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5721: LD_STRING colors_night.txt
5723: PPUSH
5724: CALL_OW 544
// Query ( StartInfo2 ) ;
5728: LD_STRING StartInfo2
5730: PPUSH
5731: CALL_OW 97
// PrepareGame ;
5735: CALL 1041 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5739: LD_INT 152
5741: PPUSH
5742: LD_INT 65
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 70
5750: NEG
5751: PPUSH
5752: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5756: LD_INT 152
5758: PPUSH
5759: LD_INT 65
5761: PPUSH
5762: LD_INT 2
5764: PPUSH
5765: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5769: LD_INT 133
5771: PPUSH
5772: LD_INT 76
5774: PPUSH
5775: LD_INT 2
5777: PPUSH
5778: LD_INT 6
5780: NEG
5781: PPUSH
5782: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5786: LD_INT 152
5788: PPUSH
5789: LD_INT 65
5791: PPUSH
5792: LD_INT 8
5794: PPUSH
5795: LD_INT 70
5797: NEG
5798: PPUSH
5799: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5803: LD_INT 152
5805: PPUSH
5806: LD_INT 65
5808: PPUSH
5809: LD_INT 8
5811: PPUSH
5812: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5816: LD_INT 133
5818: PPUSH
5819: LD_INT 76
5821: PPUSH
5822: LD_INT 8
5824: PPUSH
5825: LD_INT 6
5827: NEG
5828: PPUSH
5829: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5833: LD_INT 23
5835: PPUSH
5836: CALL_OW 87
// dialogue_skipped := false ;
5840: LD_ADDR_OWVAR 59
5844: PUSH
5845: LD_INT 0
5847: ST_TO_ADDR
// InitRuPatrols ;
5848: CALL 3233 0 0
// Say ( Heike , DH-Escape-1 ) ;
5852: LD_EXP 43
5856: PPUSH
5857: LD_STRING DH-Escape-1
5859: PPUSH
5860: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5864: LD_EXP 43
5868: PPUSH
5869: LD_STRING DH-Escape-2
5871: PPUSH
5872: CALL_OW 88
// StartLockerMinigame ;
5876: CALL 20108 0 0
// wait ( 0 0$1 ) ;
5880: LD_INT 35
5882: PPUSH
5883: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5887: LD_EXP 43
5891: PPUSH
5892: LD_STRING DH-Escape-4
5894: PPUSH
5895: CALL_OW 88
// wait ( 0 0$3 ) ;
5899: LD_INT 105
5901: PPUSH
5902: CALL_OW 67
// your_side := 2 ;
5906: LD_ADDR_OWVAR 2
5910: PUSH
5911: LD_INT 2
5913: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5914: LD_EXP 43
5918: PPUSH
5919: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5923: LD_INT 152
5925: PPUSH
5926: LD_INT 65
5928: PPUSH
5929: LD_INT 2
5931: PPUSH
5932: LD_INT 70
5934: NEG
5935: PPUSH
5936: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5940: LD_INT 152
5942: PPUSH
5943: LD_INT 65
5945: PPUSH
5946: LD_INT 2
5948: PPUSH
5949: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5953: LD_INT 133
5955: PPUSH
5956: LD_INT 76
5958: PPUSH
5959: LD_INT 8
5961: PPUSH
5962: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5966: LD_EXP 43
5970: PPUSH
5971: LD_INT 128
5973: PPUSH
5974: LD_INT 64
5976: PPUSH
5977: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5981: LD_INT 35
5983: PPUSH
5984: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5988: LD_EXP 43
5992: PPUSH
5993: LD_INT 128
5995: PPUSH
5996: LD_INT 64
5998: PPUSH
5999: CALL_OW 307
6003: IFFALSE 5981
// ComHold ( Heike ) ;
6005: LD_EXP 43
6009: PPUSH
6010: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6014: LD_EXP 43
6018: PPUSH
6019: LD_STRING DH-Start-1
6021: PPUSH
6022: CALL_OW 88
// if not americanContact then
6026: LD_EXP 10
6030: NOT
6031: IFFALSE 6047
// Say ( Heike , DH-Start-c-2 ) else
6033: LD_EXP 43
6037: PPUSH
6038: LD_STRING DH-Start-c-2
6040: PPUSH
6041: CALL_OW 88
6045: GO 6079
// if johnnySaved then
6047: LD_EXP 3
6051: IFFALSE 6067
// Say ( Heike , DH-Start-a-2 ) else
6053: LD_EXP 43
6057: PPUSH
6058: LD_STRING DH-Start-a-2
6060: PPUSH
6061: CALL_OW 88
6065: GO 6079
// Say ( Heike , DH-Start-b-2 ) ;
6067: LD_EXP 43
6071: PPUSH
6072: LD_STRING DH-Start-b-2
6074: PPUSH
6075: CALL_OW 88
// Video ( false ) ;
6079: LD_INT 0
6081: PPUSH
6082: CALL 65554 0 1
// tick := 0 ;
6086: LD_ADDR_OWVAR 1
6090: PUSH
6091: LD_INT 0
6093: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6094: LD_STRING M1
6096: PPUSH
6097: CALL_OW 337
// enable ( gameStartEvent ) ;
6101: LD_INT 2
6103: ENABLE_MARKED
// SaveForQuickRestart ;
6104: CALL_OW 22
// end ;
6108: LD_VAR 0 1
6112: RET
// function ActionAdditional ; var i , un , tmp ; begin
6113: LD_INT 0
6115: PPUSH
6116: PPUSH
6117: PPUSH
6118: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6119: LD_INT 115
6121: PPUSH
6122: LD_INT 27
6124: PPUSH
6125: LD_INT 2
6127: PPUSH
6128: LD_INT 6
6130: NEG
6131: PPUSH
6132: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6136: LD_EXP 43
6140: PPUSH
6141: LD_INT 115
6143: PPUSH
6144: LD_INT 27
6146: PPUSH
6147: CALL_OW 428
6151: PPUSH
6152: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6156: LD_EXP 43
6160: PPUSH
6161: LD_INT 33
6163: PPUSH
6164: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6168: LD_INT 124
6170: PPUSH
6171: LD_INT 39
6173: PPUSH
6174: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6178: LD_EXP 43
6182: PPUSH
6183: LD_STRING DH-Fail-1
6185: PPUSH
6186: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6190: LD_INT 3
6192: PPUSH
6193: CALL_OW 427
// ComExit ( Heike ) ;
6197: LD_EXP 43
6201: PPUSH
6202: CALL 65980 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6206: LD_EXP 43
6210: PPUSH
6211: LD_INT 109
6213: PPUSH
6214: LD_INT 33
6216: PPUSH
6217: CALL_OW 171
// AddComHold ( Heike ) ;
6221: LD_EXP 43
6225: PPUSH
6226: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6230: LD_INT 115
6232: PPUSH
6233: LD_INT 27
6235: PPUSH
6236: LD_INT 2
6238: PPUSH
6239: CALL_OW 331
// wait ( 0 0$2 ) ;
6243: LD_INT 70
6245: PPUSH
6246: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6250: LD_INT 35
6252: PPUSH
6253: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6257: LD_EXP 43
6261: PPUSH
6262: LD_INT 109
6264: PPUSH
6265: LD_INT 33
6267: PPUSH
6268: CALL_OW 307
6272: IFFALSE 6250
// Say ( Heike , DH-Fail-2 ) ;
6274: LD_EXP 43
6278: PPUSH
6279: LD_STRING DH-Fail-2
6281: PPUSH
6282: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6286: LD_EXP 43
6290: PPUSH
6291: LD_INT 111
6293: PPUSH
6294: LD_INT 48
6296: PPUSH
6297: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6301: LD_INT 35
6303: PPUSH
6304: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6308: LD_EXP 43
6312: PPUSH
6313: LD_INT 111
6315: PPUSH
6316: LD_INT 48
6318: PPUSH
6319: CALL_OW 297
6323: PUSH
6324: LD_INT 4
6326: LESS
6327: IFFALSE 6301
// AddComMoveXY ( Heike , 106 , 72 ) ;
6329: LD_EXP 43
6333: PPUSH
6334: LD_INT 106
6336: PPUSH
6337: LD_INT 72
6339: PPUSH
6340: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6344: LD_EXP 43
6348: PPUSH
6349: LD_INT 103
6351: PPUSH
6352: LD_INT 80
6354: PPUSH
6355: CALL_OW 171
// uc_side := 3 ;
6359: LD_ADDR_OWVAR 20
6363: PUSH
6364: LD_INT 3
6366: ST_TO_ADDR
// uc_nation := 3 ;
6367: LD_ADDR_OWVAR 21
6371: PUSH
6372: LD_INT 3
6374: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6375: LD_INT 1
6377: PPUSH
6378: LD_INT 1
6380: PPUSH
6381: LD_INT 6
6383: PPUSH
6384: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6388: LD_ADDR_OWVAR 29
6392: PUSH
6393: LD_INT 12
6395: PUSH
6396: LD_INT 12
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: ST_TO_ADDR
// un := CreateHuman ;
6403: LD_ADDR_VAR 0 3
6407: PUSH
6408: CALL_OW 44
6412: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6413: LD_VAR 0 3
6417: PPUSH
6418: LD_INT 134
6420: PPUSH
6421: LD_INT 52
6423: PPUSH
6424: LD_INT 4
6426: PPUSH
6427: LD_INT 0
6429: PPUSH
6430: CALL 67722 0 5
// ComTurnUnit ( un , Heike ) ;
6434: LD_VAR 0 3
6438: PPUSH
6439: LD_EXP 43
6443: PPUSH
6444: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6448: LD_VAR 0 3
6452: PPUSH
6453: LD_EXP 43
6457: PPUSH
6458: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6462: LD_VAR 0 3
6466: PPUSH
6467: LD_STRING DRum-Fail-3
6469: PPUSH
6470: CALL_OW 88
// for i := 1 to 3 do
6474: LD_ADDR_VAR 0 2
6478: PUSH
6479: DOUBLE
6480: LD_INT 1
6482: DEC
6483: ST_TO_ADDR
6484: LD_INT 3
6486: PUSH
6487: FOR_TO
6488: IFFALSE 6561
// begin PrepareSoldier ( false , 10 ) ;
6490: LD_INT 0
6492: PPUSH
6493: LD_INT 10
6495: PPUSH
6496: CALL_OW 381
// un := CreateHuman ;
6500: LD_ADDR_VAR 0 3
6504: PUSH
6505: CALL_OW 44
6509: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6510: LD_ADDR_VAR 0 4
6514: PUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: LD_VAR 0 3
6524: PPUSH
6525: CALL 65582 0 2
6529: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6530: LD_VAR 0 3
6534: PPUSH
6535: LD_INT 8
6537: PPUSH
6538: LD_INT 0
6540: PPUSH
6541: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6545: LD_VAR 0 3
6549: PPUSH
6550: LD_EXP 43
6554: PPUSH
6555: CALL_OW 119
// end ;
6559: GO 6487
6561: POP
6562: POP
// repeat wait ( 0 0$1 ) ;
6563: LD_INT 35
6565: PPUSH
6566: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6570: LD_VAR 0 4
6574: PPUSH
6575: LD_INT 101
6577: PUSH
6578: LD_INT 2
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 72
6589: PUSH
6590: LD_INT 1
6592: GREATER
6593: IFFALSE 6563
// wait ( 0 0$1 ) ;
6595: LD_INT 35
6597: PPUSH
6598: CALL_OW 67
// DialogueOn ;
6602: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6606: LD_EXP 43
6610: PPUSH
6611: LD_STRING DH-Fail-4
6613: PPUSH
6614: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6618: LD_EXP 43
6622: PPUSH
6623: LD_STRING DH-Fail-5
6625: PPUSH
6626: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6630: LD_EXP 43
6634: PPUSH
6635: LD_STRING DH-Fail-6
6637: PPUSH
6638: CALL_OW 88
// DialogueOff ;
6642: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6646: LD_VAR 0 4
6650: PPUSH
6651: LD_EXP 43
6655: PPUSH
6656: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6660: LD_INT 35
6662: PPUSH
6663: CALL_OW 67
// until IsDying ( Heike ) ;
6667: LD_EXP 43
6671: PPUSH
6672: CALL_OW 303
6676: IFFALSE 6660
// KillUnit ( Heike ) ;
6678: LD_EXP 43
6682: PPUSH
6683: CALL_OW 66
// wait ( 0 0$4 ) ;
6687: LD_INT 140
6689: PPUSH
6690: CALL_OW 67
// ResetFog ;
6694: CALL_OW 335
// DialogueOn ;
6698: CALL_OW 6
// dwait ( 0 0$1 ) ;
6702: LD_INT 35
6704: PPUSH
6705: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6709: LD_ADDR_EXP 43
6713: PUSH
6714: LD_STRING Heike
6716: PPUSH
6717: LD_EXP 1
6721: NOT
6722: PPUSH
6723: LD_EXP 2
6727: PPUSH
6728: CALL 28114 0 3
6732: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6733: LD_EXP 43
6737: PPUSH
6738: LD_STRING DH-Fail-7
6740: PPUSH
6741: CALL_OW 89
// DialogueOff ;
6745: CALL_OW 7
// YouLost ( Fail ) ;
6749: LD_STRING Fail
6751: PPUSH
6752: CALL_OW 104
// end ;
6756: LD_VAR 0 1
6760: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6761: LD_INT 2
6763: PPUSH
6764: LD_INT 173
6766: PPUSH
6767: LD_INT 29
6769: PPUSH
6770: CALL_OW 293
6774: PUSH
6775: LD_EXP 43
6779: PPUSH
6780: LD_INT 173
6782: PPUSH
6783: LD_INT 29
6785: PPUSH
6786: CALL_OW 297
6790: PUSH
6791: LD_INT 6
6793: LESS
6794: AND
6795: IFFALSE 6812
6797: GO 6799
6799: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6800: LD_EXP 43
6804: PPUSH
6805: LD_STRING DH-EastRoad
6807: PPUSH
6808: CALL_OW 88
6812: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6813: LD_INT 2
6815: PPUSH
6816: LD_INT 149
6818: PPUSH
6819: LD_INT 3
6821: PPUSH
6822: CALL_OW 293
6826: PUSH
6827: LD_EXP 43
6831: PPUSH
6832: LD_INT 149
6834: PPUSH
6835: LD_INT 3
6837: PPUSH
6838: CALL_OW 297
6842: PUSH
6843: LD_INT 6
6845: LESS
6846: AND
6847: IFFALSE 6864
6849: GO 6851
6851: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6852: LD_EXP 43
6856: PPUSH
6857: LD_STRING DH-EastRoad
6859: PPUSH
6860: CALL_OW 88
6864: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6865: LD_INT 2
6867: PPUSH
6868: LD_INT 217
6870: PPUSH
6871: LD_INT 120
6873: PPUSH
6874: CALL_OW 293
6878: PUSH
6879: LD_EXP 43
6883: PPUSH
6884: LD_INT 217
6886: PPUSH
6887: LD_INT 120
6889: PPUSH
6890: CALL_OW 297
6894: PUSH
6895: LD_INT 6
6897: LESS
6898: AND
6899: IFFALSE 6916
6901: GO 6903
6903: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6904: LD_EXP 43
6908: PPUSH
6909: LD_STRING DH-EastEnd
6911: PPUSH
6912: CALL_OW 88
6916: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6917: LD_EXP 43
6921: PPUSH
6922: LD_INT 11
6924: PPUSH
6925: CALL_OW 308
6929: IFFALSE 6967
6931: GO 6933
6933: DISABLE
// begin if not heikeSquad then
6934: LD_EXP 14
6938: NOT
6939: IFFALSE 6955
// Say ( Heike , DH-Hill ) else
6941: LD_EXP 43
6945: PPUSH
6946: LD_STRING DH-Hill
6948: PPUSH
6949: CALL_OW 88
6953: GO 6967
// Say ( Heike , DH-Hill-a ) ;
6955: LD_EXP 43
6959: PPUSH
6960: LD_STRING DH-Hill-a
6962: PPUSH
6963: CALL_OW 88
// end ;
6967: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6968: LD_EXP 43
6972: PPUSH
6973: LD_INT 12
6975: PPUSH
6976: CALL_OW 308
6980: IFFALSE 7167
6982: GO 6984
6984: DISABLE
6985: LD_INT 0
6987: PPUSH
6988: PPUSH
6989: PPUSH
// begin DialogueOn ;
6990: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
6994: LD_EXP 43
6998: PPUSH
6999: CALL_OW 87
// x := GetX ( Heike ) ;
7003: LD_ADDR_VAR 0 1
7007: PUSH
7008: LD_EXP 43
7012: PPUSH
7013: CALL_OW 250
7017: ST_TO_ADDR
// y := GetY ( Heike ) ;
7018: LD_ADDR_VAR 0 2
7022: PUSH
7023: LD_EXP 43
7027: PPUSH
7028: CALL_OW 251
7032: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7033: LD_VAR 0 1
7037: PPUSH
7038: LD_VAR 0 2
7042: PPUSH
7043: LD_INT 2
7045: PPUSH
7046: LD_INT 12
7048: NEG
7049: PPUSH
7050: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7054: LD_VAR 0 1
7058: PPUSH
7059: LD_VAR 0 2
7063: PPUSH
7064: LD_INT 2
7066: PPUSH
7067: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7071: LD_INT 101
7073: PUSH
7074: LD_INT 2
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 2
7083: PUSH
7084: LD_INT 30
7086: PUSH
7087: LD_INT 32
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 30
7096: PUSH
7097: LD_INT 33
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PPUSH
7113: CALL_OW 69
7117: IFFALSE 7129
// v := 3 else
7119: LD_ADDR_VAR 0 3
7123: PUSH
7124: LD_INT 3
7126: ST_TO_ADDR
7127: GO 7137
// v := 2 ;
7129: LD_ADDR_VAR 0 3
7133: PUSH
7134: LD_INT 2
7136: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7137: LD_EXP 43
7141: PPUSH
7142: LD_STRING DH-Outpost-
7144: PUSH
7145: LD_INT 1
7147: PPUSH
7148: LD_VAR 0 3
7152: PPUSH
7153: CALL_OW 12
7157: STR
7158: PPUSH
7159: CALL_OW 88
// DialogueOff ;
7163: CALL_OW 7
// end ;
7167: PPOPN 3
7169: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7170: LD_EXP 43
7174: PPUSH
7175: LD_INT 64
7177: PPUSH
7178: CALL_OW 308
7182: IFFALSE 7369
7184: GO 7186
7186: DISABLE
7187: LD_INT 0
7189: PPUSH
7190: PPUSH
7191: PPUSH
// begin DialogueOn ;
7192: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7196: LD_EXP 43
7200: PPUSH
7201: CALL_OW 87
// x := GetX ( Heike ) ;
7205: LD_ADDR_VAR 0 1
7209: PUSH
7210: LD_EXP 43
7214: PPUSH
7215: CALL_OW 250
7219: ST_TO_ADDR
// y := GetY ( Heike ) ;
7220: LD_ADDR_VAR 0 2
7224: PUSH
7225: LD_EXP 43
7229: PPUSH
7230: CALL_OW 251
7234: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7235: LD_VAR 0 1
7239: PPUSH
7240: LD_VAR 0 2
7244: PPUSH
7245: LD_INT 2
7247: PPUSH
7248: LD_INT 12
7250: NEG
7251: PPUSH
7252: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7256: LD_VAR 0 1
7260: PPUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_INT 2
7268: PPUSH
7269: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7273: LD_INT 101
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: LD_INT 2
7285: PUSH
7286: LD_INT 30
7288: PUSH
7289: LD_INT 32
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 30
7298: PUSH
7299: LD_INT 33
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: LIST
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PPUSH
7315: CALL_OW 69
7319: IFFALSE 7331
// v := 3 else
7321: LD_ADDR_VAR 0 3
7325: PUSH
7326: LD_INT 3
7328: ST_TO_ADDR
7329: GO 7339
// v := 2 ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_INT 2
7338: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7339: LD_EXP 43
7343: PPUSH
7344: LD_STRING DH-Outpost-
7346: PUSH
7347: LD_INT 1
7349: PPUSH
7350: LD_VAR 0 3
7354: PPUSH
7355: CALL_OW 12
7359: STR
7360: PPUSH
7361: CALL_OW 88
// DialogueOff ;
7365: CALL_OW 7
// end ;
7369: PPOPN 3
7371: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7372: LD_EXP 43
7376: PPUSH
7377: LD_INT 19
7379: PPUSH
7380: CALL_OW 308
7384: PUSH
7385: LD_EXP 22
7389: NOT
7390: AND
7391: PUSH
7392: LD_EXP 30
7396: NOT
7397: AND
7398: IFFALSE 7471
7400: GO 7402
7402: DISABLE
// begin DialogueOn ;
7403: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7407: LD_INT 152
7409: PPUSH
7410: LD_INT 115
7412: PPUSH
7413: LD_INT 2
7415: PPUSH
7416: LD_INT 16
7418: NEG
7419: PPUSH
7420: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7424: LD_INT 152
7426: PPUSH
7427: LD_INT 115
7429: PPUSH
7430: LD_INT 2
7432: PPUSH
7433: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7437: LD_INT 152
7439: PPUSH
7440: LD_INT 115
7442: PPUSH
7443: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7447: LD_EXP 43
7451: PPUSH
7452: LD_STRING DH-Stealth-1
7454: PPUSH
7455: CALL_OW 88
// DialogueOff ;
7459: CALL_OW 7
// adminAreaDiscovered := true ;
7463: LD_ADDR_EXP 22
7467: PUSH
7468: LD_INT 1
7470: ST_TO_ADDR
// end ;
7471: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7472: LD_INT 2
7474: PPUSH
7475: LD_EXP 44
7479: PPUSH
7480: CALL_OW 292
7484: PUSH
7485: LD_EXP 43
7489: PPUSH
7490: LD_EXP 44
7494: PPUSH
7495: CALL_OW 296
7499: PUSH
7500: LD_INT 6
7502: LESS
7503: AND
7504: PUSH
7505: LD_EXP 17
7509: NOT
7510: AND
7511: PUSH
7512: LD_EXP 30
7516: NOT
7517: AND
7518: IFFALSE 7624
7520: GO 7522
7522: DISABLE
// begin DialogueOn ;
7523: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7527: LD_EXP 44
7531: PPUSH
7532: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7536: LD_EXP 44
7540: PPUSH
7541: LD_EXP 43
7545: PPUSH
7546: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7550: LD_EXP 43
7554: PPUSH
7555: LD_EXP 44
7559: PPUSH
7560: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7564: LD_EXP 43
7568: PPUSH
7569: LD_STRING DH-Givi-1
7571: PPUSH
7572: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7576: LD_EXP 44
7580: PPUSH
7581: LD_STRING DG-Givi-2
7583: PPUSH
7584: CALL_OW 88
// DialogueOff ;
7588: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7592: LD_EXP 44
7596: PPUSH
7597: LD_INT 2
7599: PPUSH
7600: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7604: LD_ADDR_EXP 14
7608: PUSH
7609: LD_EXP 14
7613: PPUSH
7614: LD_EXP 44
7618: PPUSH
7619: CALL 65582 0 2
7623: ST_TO_ADDR
// end ;
7624: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7625: LD_INT 2
7627: PPUSH
7628: LD_EXP 49
7632: PPUSH
7633: CALL_OW 292
7637: PUSH
7638: LD_EXP 43
7642: PPUSH
7643: LD_EXP 49
7647: PPUSH
7648: CALL_OW 296
7652: PUSH
7653: LD_INT 6
7655: LESS
7656: AND
7657: PUSH
7658: LD_EXP 17
7662: NOT
7663: AND
7664: PUSH
7665: LD_EXP 30
7669: NOT
7670: AND
7671: IFFALSE 7777
7673: GO 7675
7675: DISABLE
// begin DialogueOn ;
7676: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7680: LD_EXP 49
7684: PPUSH
7685: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7689: LD_EXP 49
7693: PPUSH
7694: LD_EXP 43
7698: PPUSH
7699: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7703: LD_EXP 43
7707: PPUSH
7708: LD_EXP 49
7712: PPUSH
7713: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7717: LD_EXP 43
7721: PPUSH
7722: LD_STRING DH-Sophia-1
7724: PPUSH
7725: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7729: LD_EXP 49
7733: PPUSH
7734: LD_STRING DS-Sophia-2
7736: PPUSH
7737: CALL_OW 88
// DialogueOff ;
7741: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7745: LD_EXP 49
7749: PPUSH
7750: LD_INT 2
7752: PPUSH
7753: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7757: LD_ADDR_EXP 14
7761: PUSH
7762: LD_EXP 14
7766: PPUSH
7767: LD_EXP 49
7771: PPUSH
7772: CALL 65582 0 2
7776: ST_TO_ADDR
// end ;
7777: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7778: LD_INT 2
7780: PPUSH
7781: LD_EXP 51
7785: PPUSH
7786: CALL_OW 292
7790: PUSH
7791: LD_EXP 43
7795: PPUSH
7796: LD_EXP 51
7800: PPUSH
7801: CALL_OW 296
7805: PUSH
7806: LD_INT 6
7808: LESS
7809: AND
7810: PUSH
7811: LD_EXP 17
7815: NOT
7816: AND
7817: PUSH
7818: LD_EXP 30
7822: NOT
7823: AND
7824: IFFALSE 7920
7826: GO 7828
7828: DISABLE
// begin DialogueOn ;
7829: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7833: LD_EXP 51
7837: PPUSH
7838: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7842: LD_EXP 43
7846: PPUSH
7847: LD_STRING DH-Olaf-1
7849: PPUSH
7850: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7854: LD_EXP 51
7858: PPUSH
7859: LD_STRING DO-Olaf-2
7861: PPUSH
7862: CALL_OW 88
// if explosionsTakenByRussians then
7866: LD_EXP 21
7870: IFFALSE 7884
// Say ( Olaf , DO-Olaf-a-3 ) ;
7872: LD_EXP 51
7876: PPUSH
7877: LD_STRING DO-Olaf-a-3
7879: PPUSH
7880: CALL_OW 88
// DialogueOff ;
7884: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7888: LD_EXP 51
7892: PPUSH
7893: LD_INT 2
7895: PPUSH
7896: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7900: LD_ADDR_EXP 14
7904: PUSH
7905: LD_EXP 14
7909: PPUSH
7910: LD_EXP 51
7914: PPUSH
7915: CALL 65582 0 2
7919: ST_TO_ADDR
// end ;
7920: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7921: LD_INT 2
7923: PPUSH
7924: LD_EXP 45
7928: PPUSH
7929: CALL_OW 292
7933: PUSH
7934: LD_EXP 43
7938: PPUSH
7939: LD_EXP 45
7943: PPUSH
7944: CALL_OW 296
7948: PUSH
7949: LD_INT 6
7951: LESS
7952: AND
7953: PUSH
7954: LD_EXP 17
7958: NOT
7959: AND
7960: PUSH
7961: LD_EXP 30
7965: NOT
7966: AND
7967: IFFALSE 8195
7969: GO 7971
7971: DISABLE
7972: LD_INT 0
7974: PPUSH
7975: PPUSH
// begin DialogueOn ;
7976: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7980: LD_EXP 45
7984: PPUSH
7985: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7989: LD_ADDR_VAR 0 2
7993: PUSH
7994: LD_INT 18
7996: PPUSH
7997: LD_INT 0
7999: PPUSH
8000: CALL_OW 517
8004: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8005: LD_ADDR_VAR 0 1
8009: PUSH
8010: DOUBLE
8011: LD_INT 1
8013: DEC
8014: ST_TO_ADDR
8015: LD_VAR 0 2
8019: PUSH
8020: LD_INT 1
8022: ARRAY
8023: PUSH
8024: FOR_TO
8025: IFFALSE 8107
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8027: LD_VAR 0 2
8031: PUSH
8032: LD_INT 1
8034: ARRAY
8035: PUSH
8036: LD_VAR 0 1
8040: ARRAY
8041: PPUSH
8042: LD_VAR 0 2
8046: PUSH
8047: LD_INT 2
8049: ARRAY
8050: PUSH
8051: LD_VAR 0 1
8055: ARRAY
8056: PPUSH
8057: LD_INT 2
8059: PPUSH
8060: LD_INT 3
8062: NEG
8063: PPUSH
8064: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8068: LD_VAR 0 2
8072: PUSH
8073: LD_INT 1
8075: ARRAY
8076: PUSH
8077: LD_VAR 0 1
8081: ARRAY
8082: PPUSH
8083: LD_VAR 0 2
8087: PUSH
8088: LD_INT 2
8090: ARRAY
8091: PUSH
8092: LD_VAR 0 1
8096: ARRAY
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: CALL_OW 331
// end ;
8105: GO 8024
8107: POP
8108: POP
// Say ( Mike , DM-Mike-1 ) ;
8109: LD_EXP 45
8113: PPUSH
8114: LD_STRING DM-Mike-1
8116: PPUSH
8117: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8121: LD_EXP 43
8125: PPUSH
8126: LD_STRING DH-Mike-2
8128: PPUSH
8129: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8133: LD_INT 78
8135: PPUSH
8136: LD_INT 104
8138: PPUSH
8139: CALL_OW 84
// dwait ( 0 0$1 ) ;
8143: LD_INT 35
8145: PPUSH
8146: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8150: LD_EXP 43
8154: PPUSH
8155: CALL_OW 87
// DialogueOff ;
8159: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8163: LD_EXP 45
8167: PPUSH
8168: LD_INT 2
8170: PPUSH
8171: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8175: LD_ADDR_EXP 14
8179: PUSH
8180: LD_EXP 14
8184: PPUSH
8185: LD_EXP 45
8189: PPUSH
8190: CALL 65582 0 2
8194: ST_TO_ADDR
// end ;
8195: PPOPN 2
8197: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8198: LD_EXP 43
8202: PPUSH
8203: LD_EXP 48
8207: PPUSH
8208: CALL_OW 296
8212: PUSH
8213: LD_INT 6
8215: LESS
8216: PUSH
8217: LD_EXP 48
8221: PPUSH
8222: CALL_OW 257
8226: PUSH
8227: LD_INT 33
8229: EQUAL
8230: AND
8231: PUSH
8232: LD_EXP 17
8236: NOT
8237: AND
8238: PUSH
8239: LD_EXP 30
8243: NOT
8244: AND
8245: PUSH
8246: LD_EXP 48
8250: PPUSH
8251: CALL_OW 302
8255: AND
8256: PUSH
8257: LD_EXP 20
8261: AND
8262: PUSH
8263: LD_EXP 48
8267: PUSH
8268: LD_EXP 14
8272: IN
8273: AND
8274: PUSH
8275: LD_EXP 48
8279: PPUSH
8280: CALL_OW 255
8284: PUSH
8285: LD_INT 2
8287: EQUAL
8288: AND
8289: IFFALSE 8318
8291: GO 8293
8293: DISABLE
// begin DialogueOn ;
8294: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8298: LD_EXP 43
8302: PPUSH
8303: LD_STRING DH-Kaia-Revolver-2
8305: PPUSH
8306: CALL_OW 88
// SetClassKaiaRevolver ;
8310: CALL 1754 0 0
// DialogueOff ;
8314: CALL_OW 7
// end ;
8318: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8319: LD_EXP 46
8323: PUSH
8324: LD_EXP 53
8328: AND
8329: PUSH
8330: LD_EXP 53
8334: PPUSH
8335: CALL_OW 255
8339: PUSH
8340: LD_INT 2
8342: NONEQUAL
8343: AND
8344: PUSH
8345: LD_EXP 46
8349: PPUSH
8350: CALL_OW 255
8354: PUSH
8355: LD_INT 2
8357: NONEQUAL
8358: AND
8359: PUSH
8360: LD_EXP 14
8364: PPUSH
8365: LD_INT 22
8367: PUSH
8368: LD_INT 2
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PPUSH
8375: CALL_OW 72
8379: PUSH
8380: LD_INT 5
8382: GREATER
8383: AND
8384: PUSH
8385: LD_EXP 17
8389: NOT
8390: AND
8391: PUSH
8392: LD_EXP 30
8396: NOT
8397: AND
8398: IFFALSE 9115
8400: GO 8402
8402: DISABLE
8403: LD_INT 0
8405: PPUSH
8406: PPUSH
// begin DialogueOn ;
8407: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8411: LD_ADDR_VAR 0 2
8415: PUSH
8416: LD_EXP 44
8420: PPUSH
8421: CALL_OW 302
8425: PUSH
8426: LD_EXP 44
8430: PUSH
8431: LD_EXP 14
8435: IN
8436: AND
8437: PUSH
8438: LD_EXP 44
8442: PPUSH
8443: CALL_OW 255
8447: PUSH
8448: LD_INT 2
8450: EQUAL
8451: AND
8452: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8453: LD_EXP 43
8457: PPUSH
8458: LD_STRING DH-Med-1
8460: PPUSH
8461: CALL_OW 88
// if hasGivi then
8465: LD_VAR 0 2
8469: IFFALSE 8485
// Say ( Givi , DG-Med-2 ) else
8471: LD_EXP 44
8475: PPUSH
8476: LD_STRING DG-Med-2
8478: PPUSH
8479: CALL_OW 88
8483: GO 8590
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8485: LD_EXP 14
8489: PUSH
8490: LD_EXP 54
8494: ISECT
8495: PPUSH
8496: LD_INT 22
8498: PUSH
8499: LD_INT 2
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 26
8508: PUSH
8509: LD_INT 1
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PPUSH
8520: CALL_OW 72
8524: PUSH
8525: LD_INT 1
8527: ARRAY
8528: PPUSH
8529: LD_STRING DArm-Med-e-2
8531: PPUSH
8532: CALL_OW 88
8536: NOT
8537: IFFALSE 8590
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8539: LD_EXP 14
8543: PUSH
8544: LD_EXP 54
8548: ISECT
8549: PPUSH
8550: LD_INT 22
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 26
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PPUSH
8574: CALL_OW 72
8578: PUSH
8579: LD_INT 1
8581: ARRAY
8582: PPUSH
8583: LD_STRING DArf-Med-e-2
8585: PPUSH
8586: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8590: LD_INT 154
8592: PPUSH
8593: LD_INT 119
8595: PPUSH
8596: LD_INT 70
8598: PPUSH
8599: CALL 19323 0 3
// Say ( Heike , DH-Med-3 ) ;
8603: LD_EXP 43
8607: PPUSH
8608: LD_STRING DH-Med-3
8610: PPUSH
8611: CALL_OW 88
// if hasGivi then
8615: LD_VAR 0 2
8619: IFFALSE 8635
// Say ( Givi , DG-Med-4 ) else
8621: LD_EXP 44
8625: PPUSH
8626: LD_STRING DG-Med-4
8628: PPUSH
8629: CALL_OW 88
8633: GO 8740
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8635: LD_EXP 14
8639: PUSH
8640: LD_EXP 54
8644: ISECT
8645: PPUSH
8646: LD_INT 22
8648: PUSH
8649: LD_INT 2
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: LD_INT 26
8658: PUSH
8659: LD_INT 1
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PPUSH
8670: CALL_OW 72
8674: PUSH
8675: LD_INT 1
8677: ARRAY
8678: PPUSH
8679: LD_STRING DArm-Med-e-4
8681: PPUSH
8682: CALL_OW 88
8686: NOT
8687: IFFALSE 8740
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8689: LD_EXP 14
8693: PUSH
8694: LD_EXP 54
8698: ISECT
8699: PPUSH
8700: LD_INT 22
8702: PUSH
8703: LD_INT 2
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: LD_INT 26
8712: PUSH
8713: LD_INT 2
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 72
8728: PUSH
8729: LD_INT 1
8731: ARRAY
8732: PPUSH
8733: LD_STRING DArf-Med-e-4
8735: PPUSH
8736: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8740: LD_ADDR_VAR 0 1
8744: PUSH
8745: LD_EXP 48
8749: PPUSH
8750: CALL_OW 302
8754: PUSH
8755: LD_EXP 48
8759: PUSH
8760: LD_EXP 14
8764: IN
8765: AND
8766: PUSH
8767: LD_EXP 48
8771: PPUSH
8772: CALL_OW 255
8776: PUSH
8777: LD_INT 2
8779: EQUAL
8780: AND
8781: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8782: LD_EXP 45
8786: PPUSH
8787: CALL_OW 302
8791: PUSH
8792: LD_EXP 45
8796: PUSH
8797: LD_EXP 14
8801: IN
8802: AND
8803: PUSH
8804: LD_EXP 48
8808: PPUSH
8809: CALL_OW 255
8813: PUSH
8814: LD_INT 2
8816: EQUAL
8817: AND
8818: IFFALSE 8850
// begin Say ( Mike , DM-Med-5 ) ;
8820: LD_EXP 45
8824: PPUSH
8825: LD_STRING DM-Med-5
8827: PPUSH
8828: CALL_OW 88
// if hasKaia then
8832: LD_VAR 0 1
8836: IFFALSE 8850
// Say ( Kaia , DK-Med-6 ) ;
8838: LD_EXP 48
8842: PPUSH
8843: LD_STRING DK-Med-6
8845: PPUSH
8846: CALL_OW 88
// end ; if hasKaia then
8850: LD_VAR 0 1
8854: IFFALSE 9095
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8856: LD_INT 175
8858: PPUSH
8859: LD_INT 123
8861: PPUSH
8862: LD_INT 2
8864: PPUSH
8865: LD_INT 8
8867: NEG
8868: PPUSH
8869: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8873: LD_INT 175
8875: PPUSH
8876: LD_INT 123
8878: PPUSH
8879: LD_INT 2
8881: PPUSH
8882: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8886: LD_INT 175
8888: PPUSH
8889: LD_INT 123
8891: PPUSH
8892: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8896: LD_EXP 48
8900: PPUSH
8901: LD_STRING DK-Med-7
8903: PPUSH
8904: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8908: LD_EXP 48
8912: PPUSH
8913: LD_STRING DK-Med-8
8915: PPUSH
8916: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8920: LD_EXP 50
8924: PPUSH
8925: CALL_OW 302
8929: PUSH
8930: LD_EXP 50
8934: PUSH
8935: LD_EXP 14
8939: IN
8940: AND
8941: PUSH
8942: LD_EXP 50
8946: PPUSH
8947: CALL_OW 255
8951: PUSH
8952: LD_INT 2
8954: EQUAL
8955: AND
8956: IFFALSE 9014
// begin Say ( Markov , DMar-Med-9 ) ;
8958: LD_EXP 50
8962: PPUSH
8963: LD_STRING DMar-Med-9
8965: PPUSH
8966: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8970: LD_EXP 48
8974: PPUSH
8975: LD_STRING DK-Med-10
8977: PPUSH
8978: CALL_OW 88
// if hasGivi then
8982: LD_VAR 0 2
8986: IFFALSE 9002
// Say ( Kaia , DK-Med-11 ) else
8988: LD_EXP 48
8992: PPUSH
8993: LD_STRING DK-Med-11
8995: PPUSH
8996: CALL_OW 88
9000: GO 9014
// Say ( Kaia , DK-Med-a-11 ) ;
9002: LD_EXP 48
9006: PPUSH
9007: LD_STRING DK-Med-a-11
9009: PPUSH
9010: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9014: LD_EXP 47
9018: PPUSH
9019: CALL_OW 302
9023: PUSH
9024: LD_EXP 47
9028: PUSH
9029: LD_EXP 14
9033: IN
9034: AND
9035: PUSH
9036: LD_EXP 47
9040: PPUSH
9041: CALL_OW 255
9045: PUSH
9046: LD_INT 2
9048: EQUAL
9049: AND
9050: IFFALSE 9095
// begin Say ( Kamil , DKam-Med-12 ) ;
9052: LD_EXP 47
9056: PPUSH
9057: LD_STRING DKam-Med-12
9059: PPUSH
9060: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9064: LD_EXP 47
9068: PPUSH
9069: LD_STRING DKam-Med-13
9071: PPUSH
9072: CALL_OW 88
// if not hasExplosionCollected then
9076: LD_EXP 23
9080: NOT
9081: IFFALSE 9095
// Say ( Heike , DH-Med-d-14 ) ;
9083: LD_EXP 43
9087: PPUSH
9088: LD_STRING DH-Med-d-14
9090: PPUSH
9091: CALL_OW 88
// end ; end ; DialogueOff ;
9095: CALL_OW 7
// adminAreaDiscovered := true ;
9099: LD_ADDR_EXP 22
9103: PUSH
9104: LD_INT 1
9106: ST_TO_ADDR
// laundryAllowed := true ;
9107: LD_ADDR_EXP 26
9111: PUSH
9112: LD_INT 1
9114: ST_TO_ADDR
// end ;
9115: PPOPN 2
9117: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9118: LD_EXP 46
9122: NOT
9123: PUSH
9124: LD_EXP 53
9128: AND
9129: PUSH
9130: LD_EXP 53
9134: PUSH
9135: LD_EXP 14
9139: IN
9140: NOT
9141: AND
9142: PUSH
9143: LD_EXP 14
9147: PPUSH
9148: LD_INT 22
9150: PUSH
9151: LD_INT 2
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PPUSH
9158: CALL_OW 72
9162: PUSH
9163: LD_INT 4
9165: GREATER
9166: AND
9167: PUSH
9168: LD_EXP 17
9172: NOT
9173: AND
9174: PUSH
9175: LD_EXP 30
9179: NOT
9180: AND
9181: IFFALSE 9898
9183: GO 9185
9185: DISABLE
9186: LD_INT 0
9188: PPUSH
9189: PPUSH
// begin DialogueOn ;
9190: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9194: LD_ADDR_VAR 0 1
9198: PUSH
9199: LD_EXP 44
9203: PPUSH
9204: CALL_OW 302
9208: PUSH
9209: LD_EXP 44
9213: PUSH
9214: LD_EXP 14
9218: IN
9219: AND
9220: PUSH
9221: LD_EXP 44
9225: PPUSH
9226: CALL_OW 255
9230: PUSH
9231: LD_INT 2
9233: EQUAL
9234: AND
9235: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9236: LD_EXP 43
9240: PPUSH
9241: LD_STRING DH-Med-a-1
9243: PPUSH
9244: CALL_OW 88
// if hasGivi then
9248: LD_VAR 0 1
9252: IFFALSE 9268
// Say ( Givi , DG-Med-a-2 ) else
9254: LD_EXP 44
9258: PPUSH
9259: LD_STRING DG-Med-a-2
9261: PPUSH
9262: CALL_OW 88
9266: GO 9373
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9268: LD_EXP 14
9272: PUSH
9273: LD_EXP 54
9277: ISECT
9278: PPUSH
9279: LD_INT 22
9281: PUSH
9282: LD_INT 2
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 26
9291: PUSH
9292: LD_INT 1
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PPUSH
9303: CALL_OW 72
9307: PUSH
9308: LD_INT 1
9310: ARRAY
9311: PPUSH
9312: LD_STRING DArm-Med-f-2
9314: PPUSH
9315: CALL_OW 88
9319: NOT
9320: IFFALSE 9373
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9322: LD_EXP 14
9326: PUSH
9327: LD_EXP 54
9331: ISECT
9332: PPUSH
9333: LD_INT 22
9335: PUSH
9336: LD_INT 2
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 26
9345: PUSH
9346: LD_INT 2
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PPUSH
9357: CALL_OW 72
9361: PUSH
9362: LD_INT 1
9364: ARRAY
9365: PPUSH
9366: LD_STRING DArf-Med-f-2
9368: PPUSH
9369: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9373: LD_INT 154
9375: PPUSH
9376: LD_INT 119
9378: PPUSH
9379: LD_INT 70
9381: PPUSH
9382: CALL 19323 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9386: LD_EXP 43
9390: PPUSH
9391: LD_STRING DH-Med-a-3
9393: PPUSH
9394: CALL_OW 88
// if hasGivi then
9398: LD_VAR 0 1
9402: IFFALSE 9418
// Say ( Givi , DG-Med-a-4 ) else
9404: LD_EXP 44
9408: PPUSH
9409: LD_STRING DG-Med-a-4
9411: PPUSH
9412: CALL_OW 88
9416: GO 9523
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9418: LD_EXP 14
9422: PUSH
9423: LD_EXP 54
9427: ISECT
9428: PPUSH
9429: LD_INT 22
9431: PUSH
9432: LD_INT 2
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: LD_INT 26
9441: PUSH
9442: LD_INT 1
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PPUSH
9453: CALL_OW 72
9457: PUSH
9458: LD_INT 1
9460: ARRAY
9461: PPUSH
9462: LD_STRING DArm-Med-f-4
9464: PPUSH
9465: CALL_OW 88
9469: NOT
9470: IFFALSE 9523
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9472: LD_EXP 14
9476: PUSH
9477: LD_EXP 54
9481: ISECT
9482: PPUSH
9483: LD_INT 22
9485: PUSH
9486: LD_INT 2
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: LD_INT 26
9495: PUSH
9496: LD_INT 2
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PPUSH
9507: CALL_OW 72
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: LD_STRING DArf-Med-f-4
9518: PPUSH
9519: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9523: LD_ADDR_VAR 0 2
9527: PUSH
9528: LD_EXP 48
9532: PPUSH
9533: CALL_OW 302
9537: PUSH
9538: LD_EXP 48
9542: PUSH
9543: LD_EXP 14
9547: IN
9548: AND
9549: PUSH
9550: LD_EXP 48
9554: PPUSH
9555: CALL_OW 255
9559: PUSH
9560: LD_INT 2
9562: EQUAL
9563: AND
9564: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9565: LD_EXP 45
9569: PPUSH
9570: CALL_OW 302
9574: PUSH
9575: LD_EXP 45
9579: PUSH
9580: LD_EXP 14
9584: IN
9585: AND
9586: PUSH
9587: LD_EXP 45
9591: PPUSH
9592: CALL_OW 255
9596: PUSH
9597: LD_INT 2
9599: EQUAL
9600: AND
9601: IFFALSE 9633
// begin Say ( Mike , DM-Med-5 ) ;
9603: LD_EXP 45
9607: PPUSH
9608: LD_STRING DM-Med-5
9610: PPUSH
9611: CALL_OW 88
// if hasKaia then
9615: LD_VAR 0 2
9619: IFFALSE 9633
// Say ( Kaia , DK-Med-6 ) ;
9621: LD_EXP 48
9625: PPUSH
9626: LD_STRING DK-Med-6
9628: PPUSH
9629: CALL_OW 88
// end ; if hasKaia then
9633: LD_VAR 0 2
9637: IFFALSE 9878
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9639: LD_INT 175
9641: PPUSH
9642: LD_INT 123
9644: PPUSH
9645: LD_INT 2
9647: PPUSH
9648: LD_INT 8
9650: NEG
9651: PPUSH
9652: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9656: LD_INT 175
9658: PPUSH
9659: LD_INT 123
9661: PPUSH
9662: LD_INT 2
9664: PPUSH
9665: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9669: LD_INT 175
9671: PPUSH
9672: LD_INT 123
9674: PPUSH
9675: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9679: LD_EXP 48
9683: PPUSH
9684: LD_STRING DK-Med-7
9686: PPUSH
9687: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9691: LD_EXP 48
9695: PPUSH
9696: LD_STRING DK-Med-8
9698: PPUSH
9699: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9703: LD_EXP 50
9707: PPUSH
9708: CALL_OW 302
9712: PUSH
9713: LD_EXP 50
9717: PUSH
9718: LD_EXP 14
9722: IN
9723: AND
9724: PUSH
9725: LD_EXP 50
9729: PPUSH
9730: CALL_OW 255
9734: PUSH
9735: LD_INT 2
9737: EQUAL
9738: AND
9739: IFFALSE 9797
// begin Say ( Markov , DMar-Med-9 ) ;
9741: LD_EXP 50
9745: PPUSH
9746: LD_STRING DMar-Med-9
9748: PPUSH
9749: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9753: LD_EXP 48
9757: PPUSH
9758: LD_STRING DK-Med-10
9760: PPUSH
9761: CALL_OW 88
// if hasGivi then
9765: LD_VAR 0 1
9769: IFFALSE 9785
// Say ( Kaia , DK-Med-11 ) else
9771: LD_EXP 48
9775: PPUSH
9776: LD_STRING DK-Med-11
9778: PPUSH
9779: CALL_OW 88
9783: GO 9797
// Say ( Kaia , DK-Med-a-11 ) ;
9785: LD_EXP 48
9789: PPUSH
9790: LD_STRING DK-Med-a-11
9792: PPUSH
9793: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9797: LD_EXP 47
9801: PPUSH
9802: CALL_OW 302
9806: PUSH
9807: LD_EXP 47
9811: PUSH
9812: LD_EXP 14
9816: IN
9817: AND
9818: PUSH
9819: LD_EXP 47
9823: PPUSH
9824: CALL_OW 255
9828: PUSH
9829: LD_INT 2
9831: EQUAL
9832: AND
9833: IFFALSE 9878
// begin Say ( Kamil , DKam-Med-12 ) ;
9835: LD_EXP 47
9839: PPUSH
9840: LD_STRING DKam-Med-12
9842: PPUSH
9843: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9847: LD_EXP 47
9851: PPUSH
9852: LD_STRING DKam-Med-13
9854: PPUSH
9855: CALL_OW 88
// if not hasExplosionCollected then
9859: LD_EXP 23
9863: NOT
9864: IFFALSE 9878
// Say ( Heike , DH-Med-d-14 ) ;
9866: LD_EXP 43
9870: PPUSH
9871: LD_STRING DH-Med-d-14
9873: PPUSH
9874: CALL_OW 88
// end ; end ; DialogueOff ;
9878: CALL_OW 7
// adminAreaDiscovered := true ;
9882: LD_ADDR_EXP 22
9886: PUSH
9887: LD_INT 1
9889: ST_TO_ADDR
// laundryAllowed := true ;
9890: LD_ADDR_EXP 26
9894: PUSH
9895: LD_INT 1
9897: ST_TO_ADDR
// end ;
9898: PPOPN 2
9900: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9901: LD_EXP 46
9905: PUSH
9906: LD_EXP 53
9910: NOT
9911: AND
9912: PUSH
9913: LD_EXP 46
9917: PUSH
9918: LD_EXP 14
9922: IN
9923: NOT
9924: AND
9925: PUSH
9926: LD_EXP 14
9930: PPUSH
9931: LD_INT 22
9933: PUSH
9934: LD_INT 2
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PPUSH
9941: CALL_OW 72
9945: PUSH
9946: LD_INT 4
9948: GREATER
9949: AND
9950: PUSH
9951: LD_EXP 17
9955: NOT
9956: AND
9957: PUSH
9958: LD_EXP 30
9962: NOT
9963: AND
9964: IFFALSE 10681
9966: GO 9968
9968: DISABLE
9969: LD_INT 0
9971: PPUSH
9972: PPUSH
// begin DialogueOn ;
9973: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9977: LD_ADDR_VAR 0 1
9981: PUSH
9982: LD_EXP 44
9986: PPUSH
9987: CALL_OW 302
9991: PUSH
9992: LD_EXP 44
9996: PUSH
9997: LD_EXP 14
10001: IN
10002: AND
10003: PUSH
10004: LD_EXP 44
10008: PPUSH
10009: CALL_OW 255
10013: PUSH
10014: LD_INT 2
10016: EQUAL
10017: AND
10018: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10019: LD_EXP 43
10023: PPUSH
10024: LD_STRING DH-Med-b-1
10026: PPUSH
10027: CALL_OW 88
// if hasGivi then
10031: LD_VAR 0 1
10035: IFFALSE 10051
// Say ( Givi , DG-Med-a-2 ) else
10037: LD_EXP 44
10041: PPUSH
10042: LD_STRING DG-Med-a-2
10044: PPUSH
10045: CALL_OW 88
10049: GO 10156
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10051: LD_EXP 14
10055: PUSH
10056: LD_EXP 54
10060: ISECT
10061: PPUSH
10062: LD_INT 22
10064: PUSH
10065: LD_INT 2
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PUSH
10072: LD_INT 26
10074: PUSH
10075: LD_INT 1
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PPUSH
10086: CALL_OW 72
10090: PUSH
10091: LD_INT 1
10093: ARRAY
10094: PPUSH
10095: LD_STRING DArm-Med-f-2
10097: PPUSH
10098: CALL_OW 88
10102: NOT
10103: IFFALSE 10156
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10105: LD_EXP 14
10109: PUSH
10110: LD_EXP 54
10114: ISECT
10115: PPUSH
10116: LD_INT 22
10118: PUSH
10119: LD_INT 2
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: LD_INT 26
10128: PUSH
10129: LD_INT 2
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PPUSH
10140: CALL_OW 72
10144: PUSH
10145: LD_INT 1
10147: ARRAY
10148: PPUSH
10149: LD_STRING DArf-Med-f-2
10151: PPUSH
10152: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10156: LD_INT 154
10158: PPUSH
10159: LD_INT 119
10161: PPUSH
10162: LD_INT 70
10164: PPUSH
10165: CALL 19323 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10169: LD_EXP 43
10173: PPUSH
10174: LD_STRING DH-Med-a-3
10176: PPUSH
10177: CALL_OW 88
// if hasGivi then
10181: LD_VAR 0 1
10185: IFFALSE 10201
// Say ( Givi , DG-Med-a-4 ) else
10187: LD_EXP 44
10191: PPUSH
10192: LD_STRING DG-Med-a-4
10194: PPUSH
10195: CALL_OW 88
10199: GO 10306
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10201: LD_EXP 14
10205: PUSH
10206: LD_EXP 54
10210: ISECT
10211: PPUSH
10212: LD_INT 22
10214: PUSH
10215: LD_INT 2
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PUSH
10222: LD_INT 26
10224: PUSH
10225: LD_INT 1
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PPUSH
10236: CALL_OW 72
10240: PUSH
10241: LD_INT 1
10243: ARRAY
10244: PPUSH
10245: LD_STRING DArm-Med-f-4
10247: PPUSH
10248: CALL_OW 88
10252: NOT
10253: IFFALSE 10306
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10255: LD_EXP 14
10259: PUSH
10260: LD_EXP 54
10264: ISECT
10265: PPUSH
10266: LD_INT 22
10268: PUSH
10269: LD_INT 2
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 26
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PPUSH
10290: CALL_OW 72
10294: PUSH
10295: LD_INT 1
10297: ARRAY
10298: PPUSH
10299: LD_STRING DArf-Med-f-4
10301: PPUSH
10302: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10306: LD_ADDR_VAR 0 2
10310: PUSH
10311: LD_EXP 48
10315: PPUSH
10316: CALL_OW 302
10320: PUSH
10321: LD_EXP 48
10325: PUSH
10326: LD_EXP 14
10330: IN
10331: AND
10332: PUSH
10333: LD_EXP 48
10337: PPUSH
10338: CALL_OW 255
10342: PUSH
10343: LD_INT 2
10345: EQUAL
10346: AND
10347: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10348: LD_EXP 45
10352: PPUSH
10353: CALL_OW 302
10357: PUSH
10358: LD_EXP 45
10362: PUSH
10363: LD_EXP 14
10367: IN
10368: AND
10369: PUSH
10370: LD_EXP 45
10374: PPUSH
10375: CALL_OW 255
10379: PUSH
10380: LD_INT 2
10382: EQUAL
10383: AND
10384: IFFALSE 10416
// begin Say ( Mike , DM-Med-5 ) ;
10386: LD_EXP 45
10390: PPUSH
10391: LD_STRING DM-Med-5
10393: PPUSH
10394: CALL_OW 88
// if hasKaia then
10398: LD_VAR 0 2
10402: IFFALSE 10416
// Say ( Kaia , DK-Med-6 ) ;
10404: LD_EXP 48
10408: PPUSH
10409: LD_STRING DK-Med-6
10411: PPUSH
10412: CALL_OW 88
// end ; if hasKaia then
10416: LD_VAR 0 2
10420: IFFALSE 10661
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10422: LD_INT 175
10424: PPUSH
10425: LD_INT 123
10427: PPUSH
10428: LD_INT 2
10430: PPUSH
10431: LD_INT 8
10433: NEG
10434: PPUSH
10435: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10439: LD_INT 175
10441: PPUSH
10442: LD_INT 123
10444: PPUSH
10445: LD_INT 2
10447: PPUSH
10448: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10452: LD_INT 175
10454: PPUSH
10455: LD_INT 123
10457: PPUSH
10458: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10462: LD_EXP 48
10466: PPUSH
10467: LD_STRING DK-Med-7
10469: PPUSH
10470: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10474: LD_EXP 48
10478: PPUSH
10479: LD_STRING DK-Med-8
10481: PPUSH
10482: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10486: LD_EXP 50
10490: PPUSH
10491: CALL_OW 302
10495: PUSH
10496: LD_EXP 50
10500: PUSH
10501: LD_EXP 14
10505: IN
10506: AND
10507: PUSH
10508: LD_EXP 50
10512: PPUSH
10513: CALL_OW 255
10517: PUSH
10518: LD_INT 2
10520: EQUAL
10521: AND
10522: IFFALSE 10580
// begin Say ( Markov , DMar-Med-9 ) ;
10524: LD_EXP 50
10528: PPUSH
10529: LD_STRING DMar-Med-9
10531: PPUSH
10532: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10536: LD_EXP 48
10540: PPUSH
10541: LD_STRING DK-Med-10
10543: PPUSH
10544: CALL_OW 88
// if hasGivi then
10548: LD_VAR 0 1
10552: IFFALSE 10568
// Say ( Kaia , DK-Med-11 ) else
10554: LD_EXP 48
10558: PPUSH
10559: LD_STRING DK-Med-11
10561: PPUSH
10562: CALL_OW 88
10566: GO 10580
// Say ( Kaia , DK-Med-a-11 ) ;
10568: LD_EXP 48
10572: PPUSH
10573: LD_STRING DK-Med-a-11
10575: PPUSH
10576: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10580: LD_EXP 47
10584: PPUSH
10585: CALL_OW 302
10589: PUSH
10590: LD_EXP 47
10594: PUSH
10595: LD_EXP 14
10599: IN
10600: AND
10601: PUSH
10602: LD_EXP 47
10606: PPUSH
10607: CALL_OW 255
10611: PUSH
10612: LD_INT 2
10614: EQUAL
10615: AND
10616: IFFALSE 10661
// begin Say ( Kamil , DKam-Med-12 ) ;
10618: LD_EXP 47
10622: PPUSH
10623: LD_STRING DKam-Med-12
10625: PPUSH
10626: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10630: LD_EXP 47
10634: PPUSH
10635: LD_STRING DKam-Med-13
10637: PPUSH
10638: CALL_OW 88
// if not hasExplosionCollected then
10642: LD_EXP 23
10646: NOT
10647: IFFALSE 10661
// Say ( Heike , DH-Med-d-14 ) ;
10649: LD_EXP 43
10653: PPUSH
10654: LD_STRING DH-Med-d-14
10656: PPUSH
10657: CALL_OW 88
// end ; end ; DialogueOff ;
10661: CALL_OW 7
// adminAreaDiscovered := true ;
10665: LD_ADDR_EXP 22
10669: PUSH
10670: LD_INT 1
10672: ST_TO_ADDR
// laundryAllowed := true ;
10673: LD_ADDR_EXP 26
10677: PUSH
10678: LD_INT 1
10680: ST_TO_ADDR
// end ;
10681: PPOPN 2
10683: END
// every 0 0$1 trigger laundryAllowed do
10684: LD_EXP 26
10688: IFFALSE 10700
10690: GO 10692
10692: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10693: LD_STRING M1-laundry
10695: PPUSH
10696: CALL_OW 337
10700: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10701: LD_EXP 46
10705: NOT
10706: PUSH
10707: LD_EXP 53
10711: NOT
10712: AND
10713: PUSH
10714: LD_EXP 51
10718: PPUSH
10719: CALL_OW 302
10723: AND
10724: PUSH
10725: LD_EXP 51
10729: PUSH
10730: LD_EXP 14
10734: IN
10735: AND
10736: PUSH
10737: LD_EXP 51
10741: PPUSH
10742: CALL_OW 255
10746: PUSH
10747: LD_INT 2
10749: EQUAL
10750: AND
10751: PUSH
10752: LD_EXP 17
10756: NOT
10757: AND
10758: PUSH
10759: LD_EXP 30
10763: NOT
10764: AND
10765: IFFALSE 10921
10767: GO 10769
10769: DISABLE
// begin DialogueOn ;
10770: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10774: LD_INT 152
10776: PPUSH
10777: LD_INT 115
10779: PPUSH
10780: LD_INT 2
10782: PPUSH
10783: LD_INT 16
10785: NEG
10786: PPUSH
10787: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10791: LD_INT 152
10793: PPUSH
10794: LD_INT 115
10796: PPUSH
10797: LD_INT 2
10799: PPUSH
10800: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10804: LD_INT 152
10806: PPUSH
10807: LD_INT 115
10809: PPUSH
10810: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10814: LD_EXP 51
10818: PPUSH
10819: LD_STRING DO-Med-c-1
10821: PPUSH
10822: CALL_OW 88
// if not hasExplosionCollected then
10826: LD_EXP 23
10830: NOT
10831: IFFALSE 10847
// Say ( Heike , DH-Med-d-14 ) else
10833: LD_EXP 43
10837: PPUSH
10838: LD_STRING DH-Med-d-14
10840: PPUSH
10841: CALL_OW 88
10845: GO 10909
// begin Say ( Heike , DH-Med-c-2 ) ;
10847: LD_EXP 43
10851: PPUSH
10852: LD_STRING DH-Med-c-2
10854: PPUSH
10855: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10859: LD_EXP 48
10863: PPUSH
10864: CALL_OW 302
10868: PUSH
10869: LD_EXP 48
10873: PUSH
10874: LD_EXP 14
10878: IN
10879: AND
10880: PUSH
10881: LD_EXP 48
10885: PPUSH
10886: CALL_OW 255
10890: PUSH
10891: LD_INT 2
10893: EQUAL
10894: AND
10895: IFFALSE 10909
// Say ( Kaia , DK-Med-c-3 ) ;
10897: LD_EXP 48
10901: PPUSH
10902: LD_STRING DK-Med-c-3
10904: PPUSH
10905: CALL_OW 88
// end ; DialogueOff ;
10909: CALL_OW 7
// adminAreaDiscovered := true ;
10913: LD_ADDR_EXP 22
10917: PUSH
10918: LD_INT 1
10920: ST_TO_ADDR
// end ;
10921: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10922: LD_EXP 48
10926: PPUSH
10927: CALL_OW 256
10931: PUSH
10932: LD_INT 250
10934: LESS
10935: PUSH
10936: LD_EXP 48
10940: PUSH
10941: LD_EXP 14
10945: IN
10946: AND
10947: PUSH
10948: LD_EXP 17
10952: AND
10953: PUSH
10954: LD_EXP 24
10958: AND
10959: IFFALSE 11088
10961: GO 10963
10963: DISABLE
// begin DialogueOn ;
10964: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10968: LD_EXP 48
10972: PPUSH
10973: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10977: LD_EXP 48
10981: PPUSH
10982: LD_STRING DK-death-1
10984: PPUSH
10985: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10989: LD_EXP 43
10993: PPUSH
10994: LD_STRING DH-death-2
10996: PPUSH
10997: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11001: LD_EXP 48
11005: PPUSH
11006: LD_STRING DK-death-3
11008: PPUSH
11009: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11013: LD_EXP 48
11017: PPUSH
11018: LD_STRING DK-death-4
11020: PPUSH
11021: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11025: LD_EXP 48
11029: PPUSH
11030: LD_INT 8
11032: PPUSH
11033: CALL_OW 235
// ComStop ( Kaia ) ;
11037: LD_EXP 48
11041: PPUSH
11042: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11046: LD_INT 8
11048: PPUSH
11049: LD_INT 2
11051: PPUSH
11052: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11056: LD_ADDR_EXP 14
11060: PUSH
11061: LD_EXP 14
11065: PUSH
11066: LD_EXP 48
11070: DIFF
11071: ST_TO_ADDR
// DialogueOff ;
11072: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11076: LD_EXP 45
11080: PPUSH
11081: LD_STRING DM-death-5
11083: PPUSH
11084: CALL_OW 88
// end ;
11088: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11089: LD_EXP 25
11093: NOT
11094: PUSH
11095: LD_EXP 30
11099: NOT
11100: AND
11101: PUSH
11102: LD_EXP 56
11106: PUSH
11107: LD_EXP 14
11111: IN
11112: NOT
11113: AND
11114: PUSH
11115: LD_INT 2
11117: PPUSH
11118: LD_EXP 56
11122: PPUSH
11123: CALL_OW 292
11127: AND
11128: PUSH
11129: LD_EXP 43
11133: PPUSH
11134: LD_EXP 56
11138: PPUSH
11139: CALL_OW 296
11143: PUSH
11144: LD_INT 6
11146: LESS
11147: AND
11148: PUSH
11149: LD_EXP 17
11153: NOT
11154: AND
11155: IFFALSE 11379
11157: GO 11159
11159: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11160: LD_EXP 56
11164: PPUSH
11165: LD_EXP 43
11169: PPUSH
11170: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11174: LD_EXP 43
11178: PPUSH
11179: LD_EXP 56
11183: PPUSH
11184: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11188: LD_INT 10
11190: PPUSH
11191: CALL_OW 67
// DialogueOn ;
11195: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11199: LD_EXP 56
11203: PPUSH
11204: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11208: LD_EXP 43
11212: PPUSH
11213: LD_STRING DH-Deal-1
11215: PPUSH
11216: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11220: LD_EXP 56
11224: PPUSH
11225: LD_STRING DJ-Deal-2
11227: PPUSH
11228: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11232: LD_EXP 43
11236: PPUSH
11237: LD_STRING DH-Deal-3
11239: PPUSH
11240: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11244: LD_EXP 56
11248: PPUSH
11249: LD_STRING DJ-Deal-4
11251: PPUSH
11252: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11256: LD_EXP 56
11260: PPUSH
11261: LD_STRING DJ-Deal-5
11263: PPUSH
11264: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11268: LD_EXP 56
11272: PPUSH
11273: LD_STRING DJ-Deal-6
11275: PPUSH
11276: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11280: LD_EXP 56
11284: PPUSH
11285: LD_STRING DJ-Deal-7
11287: PPUSH
11288: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11292: LD_EXP 43
11296: PPUSH
11297: LD_STRING DH-Deal-8
11299: PPUSH
11300: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11304: LD_EXP 43
11308: PPUSH
11309: LD_STRING DH-Deal-9
11311: PPUSH
11312: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11316: LD_EXP 56
11320: PPUSH
11321: LD_STRING DJ-Deal-10
11323: PPUSH
11324: CALL_OW 88
// DialogueOff ;
11328: CALL_OW 7
// contactWithAmerican := true ;
11332: LD_ADDR_EXP 25
11336: PUSH
11337: LD_INT 1
11339: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11340: LD_STRING M1-american-out
11342: PPUSH
11343: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11347: LD_EXP 56
11351: PPUSH
11352: LD_INT 2
11354: PPUSH
11355: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11359: LD_ADDR_EXP 14
11363: PUSH
11364: LD_EXP 14
11368: PPUSH
11369: LD_EXP 56
11373: PPUSH
11374: CALL 65582 0 2
11378: ST_TO_ADDR
// end ;
11379: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11380: LD_EXP 25
11384: PUSH
11385: LD_EXP 30
11389: NOT
11390: AND
11391: PUSH
11392: LD_EXP 56
11396: PUSH
11397: LD_EXP 14
11401: IN
11402: NOT
11403: AND
11404: PUSH
11405: LD_INT 2
11407: PPUSH
11408: LD_EXP 56
11412: PPUSH
11413: CALL_OW 292
11417: AND
11418: PUSH
11419: LD_EXP 43
11423: PPUSH
11424: LD_EXP 56
11428: PPUSH
11429: CALL_OW 296
11433: PUSH
11434: LD_INT 6
11436: LESS
11437: AND
11438: PUSH
11439: LD_EXP 17
11443: NOT
11444: AND
11445: IFFALSE 11570
11447: GO 11449
11449: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11450: LD_EXP 56
11454: PPUSH
11455: LD_EXP 43
11459: PPUSH
11460: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11464: LD_EXP 43
11468: PPUSH
11469: LD_EXP 56
11473: PPUSH
11474: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11478: LD_INT 10
11480: PPUSH
11481: CALL_OW 67
// DialogueOn ;
11485: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11489: LD_EXP 56
11493: PPUSH
11494: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11498: LD_EXP 56
11502: PPUSH
11503: LD_STRING DJ-Escort-1
11505: PPUSH
11506: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11510: LD_EXP 43
11514: PPUSH
11515: LD_STRING DH-Escort-2
11517: PPUSH
11518: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11522: LD_EXP 56
11526: PPUSH
11527: LD_STRING DJ-Escort-3
11529: PPUSH
11530: CALL_OW 88
// DialogueOff ;
11534: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11538: LD_EXP 56
11542: PPUSH
11543: LD_INT 2
11545: PPUSH
11546: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11550: LD_ADDR_EXP 14
11554: PUSH
11555: LD_EXP 14
11559: PPUSH
11560: LD_EXP 56
11564: PPUSH
11565: CALL 65582 0 2
11569: ST_TO_ADDR
// end ;
11570: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11571: LD_EXP 25
11575: PUSH
11576: LD_EXP 30
11580: NOT
11581: AND
11582: PUSH
11583: LD_EXP 55
11587: PUSH
11588: LD_EXP 14
11592: DIFF
11593: PPUSH
11594: LD_INT 22
11596: PUSH
11597: LD_INT 4
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 3
11606: PUSH
11607: LD_INT 120
11609: PUSH
11610: LD_INT 1
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 101
11623: PUSH
11624: LD_INT 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: PPUSH
11636: CALL_OW 72
11640: AND
11641: PUSH
11642: LD_EXP 17
11646: NOT
11647: AND
11648: IFFALSE 11863
11650: GO 11652
11652: DISABLE
11653: LD_INT 0
11655: PPUSH
// begin enable ;
11656: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11657: LD_ADDR_VAR 0 1
11661: PUSH
11662: LD_EXP 55
11666: PUSH
11667: LD_EXP 14
11671: DIFF
11672: PPUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 4
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 91
11685: PUSH
11686: LD_EXP 43
11690: PUSH
11691: LD_INT 6
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 101
11701: PUSH
11702: LD_INT 2
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: LIST
11713: PPUSH
11714: CALL_OW 72
11718: PPUSH
11719: LD_EXP 43
11723: PPUSH
11724: CALL_OW 74
11728: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11729: LD_VAR 0 1
11733: PPUSH
11734: LD_EXP 43
11738: PPUSH
11739: CALL_OW 296
11743: PUSH
11744: LD_INT 6
11746: LESS
11747: IFFALSE 11863
// begin DialogueOn ;
11749: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11753: LD_VAR 0 1
11757: PPUSH
11758: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11762: LD_EXP 43
11766: PPUSH
11767: LD_STRING DH-USsol-1
11769: PPUSH
11770: CALL_OW 88
// if GetSex ( un ) = sex_male then
11774: LD_VAR 0 1
11778: PPUSH
11779: CALL_OW 258
11783: PUSH
11784: LD_INT 1
11786: EQUAL
11787: IFFALSE 11803
// Say ( un , DUSM-USsol-2 ) else
11789: LD_VAR 0 1
11793: PPUSH
11794: LD_STRING DUSM-USsol-2
11796: PPUSH
11797: CALL_OW 88
11801: GO 11815
// Say ( un , DUSF-USsol-2 ) ;
11803: LD_VAR 0 1
11807: PPUSH
11808: LD_STRING DUSF-USsol-2
11810: PPUSH
11811: CALL_OW 88
// DialogueOff ;
11815: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11819: LD_ADDR_EXP 14
11823: PUSH
11824: LD_EXP 14
11828: PPUSH
11829: LD_VAR 0 1
11833: PPUSH
11834: CALL 65582 0 2
11838: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11839: LD_VAR 0 1
11843: PPUSH
11844: LD_INT 1
11846: PPUSH
11847: CALL_OW 109
// SetSide ( un , 2 ) ;
11851: LD_VAR 0 1
11855: PPUSH
11856: LD_INT 2
11858: PPUSH
11859: CALL_OW 235
// end ; end ;
11863: PPOPN 1
11865: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11866: LD_EXP 54
11870: PUSH
11871: LD_EXP 30
11875: NOT
11876: AND
11877: PUSH
11878: LD_EXP 54
11882: PUSH
11883: LD_EXP 14
11887: DIFF
11888: PPUSH
11889: LD_INT 3
11891: PUSH
11892: LD_INT 120
11894: PUSH
11895: LD_INT 1
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 91
11908: PUSH
11909: LD_EXP 43
11913: PUSH
11914: LD_INT 6
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 101
11924: PUSH
11925: LD_INT 2
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: LIST
11936: PPUSH
11937: CALL_OW 72
11941: AND
11942: PUSH
11943: LD_EXP 17
11947: NOT
11948: AND
11949: IFFALSE 12164
11951: GO 11953
11953: DISABLE
11954: LD_INT 0
11956: PPUSH
// begin enable ;
11957: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11958: LD_ADDR_VAR 0 1
11962: PUSH
11963: LD_EXP 54
11967: PUSH
11968: LD_EXP 14
11972: DIFF
11973: PPUSH
11974: LD_INT 22
11976: PUSH
11977: LD_INT 5
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 91
11986: PUSH
11987: LD_EXP 43
11991: PUSH
11992: LD_INT 6
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 101
12002: PUSH
12003: LD_INT 2
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: PPUSH
12015: CALL_OW 72
12019: PPUSH
12020: LD_EXP 43
12024: PPUSH
12025: CALL_OW 74
12029: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12030: LD_VAR 0 1
12034: PPUSH
12035: LD_EXP 43
12039: PPUSH
12040: CALL_OW 296
12044: PUSH
12045: LD_INT 6
12047: LESS
12048: IFFALSE 12164
// begin DialogueOn ;
12050: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12063: LD_EXP 43
12067: PPUSH
12068: LD_STRING DH-USsol-1
12070: PPUSH
12071: CALL_OW 88
// if GetSex ( un ) = sex_male then
12075: LD_VAR 0 1
12079: PPUSH
12080: CALL_OW 258
12084: PUSH
12085: LD_INT 1
12087: EQUAL
12088: IFFALSE 12104
// Say ( un , DArm-USsol-2 ) else
12090: LD_VAR 0 1
12094: PPUSH
12095: LD_STRING DArm-USsol-2
12097: PPUSH
12098: CALL_OW 88
12102: GO 12116
// Say ( un , DArf-USsol-3 ) ;
12104: LD_VAR 0 1
12108: PPUSH
12109: LD_STRING DArf-USsol-3
12111: PPUSH
12112: CALL_OW 88
// DialogueOff ;
12116: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12120: LD_ADDR_EXP 14
12124: PUSH
12125: LD_EXP 14
12129: PPUSH
12130: LD_VAR 0 1
12134: PPUSH
12135: CALL 65582 0 2
12139: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12140: LD_VAR 0 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: CALL_OW 109
// SetSide ( un , 2 ) ;
12152: LD_VAR 0 1
12156: PPUSH
12157: LD_INT 2
12159: PPUSH
12160: CALL_OW 235
// end ; end ;
12164: PPOPN 1
12166: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12167: LD_EXP 55
12171: PPUSH
12172: LD_INT 101
12174: PUSH
12175: LD_INT 2
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 72
12186: PUSH
12187: LD_EXP 14
12191: PPUSH
12192: LD_INT 22
12194: PUSH
12195: LD_INT 2
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PPUSH
12202: CALL_OW 72
12206: PUSH
12207: LD_INT 5
12209: GREATER
12210: AND
12211: PUSH
12212: LD_EXP 10
12216: NOT
12217: AND
12218: PUSH
12219: LD_EXP 30
12223: NOT
12224: AND
12225: PUSH
12226: LD_EXP 25
12230: NOT
12231: AND
12232: PUSH
12233: LD_EXP 17
12237: NOT
12238: AND
12239: IFFALSE 12354
12241: GO 12243
12243: DISABLE
12244: LD_INT 0
12246: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12247: LD_ADDR_VAR 0 1
12251: PUSH
12252: LD_EXP 55
12256: PPUSH
12257: LD_INT 22
12259: PUSH
12260: LD_INT 4
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 101
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PPUSH
12281: CALL_OW 72
12285: PUSH
12286: LD_INT 1
12288: ARRAY
12289: ST_TO_ADDR
// DialogueOn ;
12290: CALL_OW 6
// if GetSex ( un ) = sex_male then
12294: LD_VAR 0 1
12298: PPUSH
12299: CALL_OW 258
12303: PUSH
12304: LD_INT 1
12306: EQUAL
12307: IFFALSE 12323
// Say ( un , DUSm-USsol-a-2 ) else
12309: LD_VAR 0 1
12313: PPUSH
12314: LD_STRING DUSm-USsol-a-2
12316: PPUSH
12317: CALL_OW 88
12321: GO 12335
// Say ( un , DUSf-USsol-a-2 ) ;
12323: LD_VAR 0 1
12327: PPUSH
12328: LD_STRING DUSf-USsol-a-2
12330: PPUSH
12331: CALL_OW 88
// DialogueOff ;
12335: CALL_OW 7
// wait ( 0 0$2 ) ;
12339: LD_INT 70
12341: PPUSH
12342: CALL_OW 67
// isAlarm := true ;
12346: LD_ADDR_EXP 17
12350: PUSH
12351: LD_INT 1
12353: ST_TO_ADDR
// end ;
12354: PPOPN 1
12356: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12357: LD_EXP 17
12361: NOT
12362: PUSH
12363: LD_EXP 44
12367: PPUSH
12368: CALL_OW 302
12372: AND
12373: PUSH
12374: LD_EXP 44
12378: PPUSH
12379: CALL_OW 255
12383: PUSH
12384: LD_INT 2
12386: EQUAL
12387: AND
12388: PUSH
12389: LD_EXP 26
12393: AND
12394: PUSH
12395: LD_EXP 28
12399: NOT
12400: AND
12401: PUSH
12402: LD_EXP 27
12406: NOT
12407: AND
12408: PUSH
12409: LD_EXP 30
12413: NOT
12414: AND
12415: PUSH
12416: LD_EXP 44
12420: PPUSH
12421: LD_INT 165
12423: PPUSH
12424: CALL 19636 0 2
12428: AND
12429: IFFALSE 12561
12431: GO 12433
12433: DISABLE
// begin enable ;
12434: ENABLE
// InGameOn ;
12435: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12439: LD_EXP 44
12443: PPUSH
12444: LD_INT 5
12446: PPUSH
12447: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12451: LD_INT 165
12453: PPUSH
12454: LD_INT 5
12456: PPUSH
12457: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12461: LD_EXP 44
12465: PPUSH
12466: LD_INT 165
12468: PPUSH
12469: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12473: LD_INT 35
12475: PPUSH
12476: CALL_OW 67
// until IsInUnit ( Givi ) ;
12480: LD_EXP 44
12484: PPUSH
12485: CALL_OW 310
12489: IFFALSE 12473
// case Query ( GiviInLaundry ) of 1 :
12491: LD_STRING GiviInLaundry
12493: PPUSH
12494: CALL_OW 97
12498: PUSH
12499: LD_INT 1
12501: DOUBLE
12502: EQUAL
12503: IFTRUE 12507
12505: GO 12514
12507: POP
// SpawnGiviAsRussian ; 2 :
12508: CALL 1903 0 0
12512: GO 12526
12514: LD_INT 2
12516: DOUBLE
12517: EQUAL
12518: IFTRUE 12522
12520: GO 12525
12522: POP
// ; end ;
12523: GO 12526
12525: POP
// ComExitBuilding ( Givi ) ;
12526: LD_EXP 44
12530: PPUSH
12531: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12535: LD_EXP 44
12539: PPUSH
12540: LD_INT 2
12542: PPUSH
12543: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12547: LD_INT 165
12549: PPUSH
12550: LD_INT 3
12552: PPUSH
12553: CALL_OW 235
// InGameOff ;
12557: CALL_OW 9
// end ;
12561: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12562: LD_EXP 17
12566: NOT
12567: PUSH
12568: LD_EXP 28
12572: AND
12573: PUSH
12574: LD_EXP 44
12578: PPUSH
12579: CALL_OW 255
12583: PUSH
12584: LD_INT 2
12586: EQUAL
12587: AND
12588: PUSH
12589: LD_EXP 44
12593: PPUSH
12594: CALL_OW 248
12598: PUSH
12599: LD_INT 3
12601: EQUAL
12602: AND
12603: PUSH
12604: LD_EXP 44
12608: PPUSH
12609: LD_INT 119
12611: PPUSH
12612: CALL 19636 0 2
12616: AND
12617: PUSH
12618: LD_EXP 30
12622: NOT
12623: AND
12624: IFFALSE 12848
12626: GO 12628
12628: DISABLE
// begin InGameOn ;
12629: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12633: LD_EXP 44
12637: PPUSH
12638: LD_INT 3
12640: PPUSH
12641: CALL_OW 235
// ComEnterUnit ( Givi , ruLab ) ;
12645: LD_EXP 44
12649: PPUSH
12650: LD_INT 119
12652: PPUSH
12653: CALL_OW 120
// wait ( 0 0$1 ) ;
12657: LD_INT 35
12659: PPUSH
12660: CALL_OW 67
// DialogueOn ;
12664: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12668: LD_EXP 44
12672: PPUSH
12673: LD_STRING DG-Captive-1
12675: PPUSH
12676: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12680: LD_EXP 62
12684: PPUSH
12685: LD_STRING DCom-Captive-2
12687: PPUSH
12688: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12692: LD_EXP 44
12696: PPUSH
12697: LD_STRING DG-Captive-3
12699: PPUSH
12700: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12704: LD_EXP 62
12708: PPUSH
12709: LD_STRING DCom-Captive-4
12711: PPUSH
12712: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12716: LD_EXP 62
12720: PPUSH
12721: CALL_OW 64
// DialogueOff ;
12725: CALL_OW 7
// InGameOff ;
12729: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12733: LD_EXP 44
12737: PPUSH
12738: LD_INT 2
12740: PPUSH
12741: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12745: LD_EXP 44
12749: PPUSH
12750: CALL_OW 122
// if Aviradze then
12754: LD_EXP 53
12758: IFFALSE 12801
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12760: LD_ADDR_EXP 14
12764: PUSH
12765: LD_EXP 14
12769: PPUSH
12770: LD_EXP 53
12774: PPUSH
12775: CALL 65582 0 2
12779: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12780: LD_EXP 53
12784: PPUSH
12785: LD_INT 2
12787: PPUSH
12788: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12792: LD_EXP 53
12796: PPUSH
12797: CALL_OW 122
// end ; if Ibrahim then
12801: LD_EXP 46
12805: IFFALSE 12848
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12807: LD_ADDR_EXP 14
12811: PUSH
12812: LD_EXP 14
12816: PPUSH
12817: LD_EXP 46
12821: PPUSH
12822: CALL 65582 0 2
12826: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12827: LD_EXP 46
12831: PPUSH
12832: LD_INT 2
12834: PPUSH
12835: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12839: LD_EXP 46
12843: PPUSH
12844: CALL_OW 122
// end ; end ;
12848: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12849: LD_EXP 17
12853: NOT
12854: PUSH
12855: LD_EXP 27
12859: AND
12860: PUSH
12861: LD_EXP 43
12865: PPUSH
12866: CALL_OW 248
12870: PUSH
12871: LD_INT 3
12873: EQUAL
12874: AND
12875: PUSH
12876: LD_EXP 43
12880: PPUSH
12881: LD_INT 119
12883: PPUSH
12884: CALL 19636 0 2
12888: AND
12889: PUSH
12890: LD_EXP 30
12894: NOT
12895: AND
12896: IFFALSE 13158
12898: GO 12900
12900: DISABLE
// begin InGameOn ;
12901: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12905: LD_EXP 43
12909: PPUSH
12910: LD_INT 3
12912: PPUSH
12913: CALL_OW 235
// ComEnterUnit ( Heike , ruLab ) ;
12917: LD_EXP 43
12921: PPUSH
12922: LD_INT 119
12924: PPUSH
12925: CALL_OW 120
// wait ( 0 0$1 ) ;
12929: LD_INT 35
12931: PPUSH
12932: CALL_OW 67
// DialogueOn ;
12936: CALL_OW 6
// if Aviradze and Ibrahim then
12940: LD_EXP 53
12944: PUSH
12945: LD_EXP 46
12949: AND
12950: IFFALSE 12966
// Say ( Heike , DH-Captive-a-1 ) else
12952: LD_EXP 43
12956: PPUSH
12957: LD_STRING DH-Captive-a-1
12959: PPUSH
12960: CALL_OW 88
12964: GO 12978
// Say ( Heike , DH-Captive-a-b-1 ) ;
12966: LD_EXP 43
12970: PPUSH
12971: LD_STRING DH-Captive-a-b-1
12973: PPUSH
12974: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
12978: LD_EXP 62
12982: PPUSH
12983: LD_STRING DCom-Captive-a-2
12985: PPUSH
12986: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
12990: LD_EXP 43
12994: PPUSH
12995: LD_STRING DH-Captive-a-3
12997: PPUSH
12998: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13002: LD_EXP 62
13006: PPUSH
13007: LD_STRING DCom-Captive-a-4
13009: PPUSH
13010: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13014: LD_EXP 43
13018: PPUSH
13019: LD_STRING DH-Captive-a-5
13021: PPUSH
13022: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13026: LD_EXP 62
13030: PPUSH
13031: CALL_OW 64
// DialogueOff ;
13035: CALL_OW 7
// InGameOff ;
13039: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13043: LD_EXP 43
13047: PPUSH
13048: LD_INT 2
13050: PPUSH
13051: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13055: LD_EXP 43
13059: PPUSH
13060: CALL_OW 122
// if Aviradze then
13064: LD_EXP 53
13068: IFFALSE 13111
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13070: LD_ADDR_EXP 14
13074: PUSH
13075: LD_EXP 14
13079: PPUSH
13080: LD_EXP 53
13084: PPUSH
13085: CALL 65582 0 2
13089: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13090: LD_EXP 53
13094: PPUSH
13095: LD_INT 2
13097: PPUSH
13098: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13102: LD_EXP 53
13106: PPUSH
13107: CALL_OW 122
// end ; if Ibrahim then
13111: LD_EXP 46
13115: IFFALSE 13158
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13117: LD_ADDR_EXP 14
13121: PUSH
13122: LD_EXP 14
13126: PPUSH
13127: LD_EXP 46
13131: PPUSH
13132: CALL 65582 0 2
13136: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13137: LD_EXP 46
13141: PPUSH
13142: LD_INT 2
13144: PPUSH
13145: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13149: LD_EXP 46
13153: PPUSH
13154: CALL_OW 122
// end ; end ;
13158: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13159: LD_INT 2
13161: PUSH
13162: LD_INT 25
13164: PUSH
13165: LD_INT 32
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: LD_INT 25
13174: PUSH
13175: LD_INT 34
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: IFFALSE 13203
13193: GO 13195
13195: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13196: LD_STRING M1-weapons-out
13198: PPUSH
13199: CALL_OW 604
13203: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not contactWithAmerican and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13204: LD_INT 2
13206: PPUSH
13207: LD_EXP 58
13211: PPUSH
13212: CALL_OW 292
13216: PUSH
13217: LD_EXP 43
13221: PPUSH
13222: LD_EXP 58
13226: PPUSH
13227: CALL_OW 296
13231: AND
13232: PUSH
13233: LD_EXP 25
13237: NOT
13238: AND
13239: PUSH
13240: LD_EXP 17
13244: NOT
13245: AND
13246: PUSH
13247: LD_EXP 30
13251: NOT
13252: AND
13253: IFFALSE 14010
13255: GO 13257
13257: DISABLE
13258: LD_INT 0
13260: PPUSH
13261: PPUSH
// begin DialogueOn ;
13262: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13266: LD_EXP 58
13270: PPUSH
13271: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13275: LD_EXP 58
13279: PPUSH
13280: LD_STRING DJy-Food-1
13282: PPUSH
13283: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13287: LD_EXP 43
13291: PPUSH
13292: LD_STRING DH-Food-2
13294: PPUSH
13295: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13299: LD_EXP 58
13303: PPUSH
13304: LD_STRING DJy-Food-3
13306: PPUSH
13307: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13311: LD_EXP 58
13315: PPUSH
13316: LD_STRING DJy-Food-4
13318: PPUSH
13319: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13323: LD_EXP 43
13327: PPUSH
13328: LD_STRING DH-Food-5
13330: PPUSH
13331: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13335: LD_EXP 58
13339: PPUSH
13340: LD_STRING DJy-Food-6
13342: PPUSH
13343: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13347: LD_EXP 58
13351: PPUSH
13352: LD_STRING DJy-Food-7
13354: PPUSH
13355: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13359: LD_EXP 58
13363: PPUSH
13364: LD_STRING DJy-Food-8
13366: PPUSH
13367: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13371: LD_EXP 43
13375: PPUSH
13376: LD_STRING DH-Food-9
13378: PPUSH
13379: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13383: LD_EXP 58
13387: PPUSH
13388: LD_STRING DJy-Food-10
13390: PPUSH
13391: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13395: LD_EXP 43
13399: PPUSH
13400: LD_STRING DH-Food-11
13402: PPUSH
13403: CALL_OW 88
// DialogueOff ;
13407: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13411: LD_STRING M3
13413: PPUSH
13414: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13418: LD_INT 5
13420: PPUSH
13421: LD_INT 215
13423: PPUSH
13424: LD_INT 117
13426: PPUSH
13427: LD_INT 0
13429: PPUSH
13430: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13434: LD_INT 215
13436: PPUSH
13437: LD_INT 118
13439: PPUSH
13440: LD_INT 2
13442: PPUSH
13443: LD_INT 6
13445: NEG
13446: PPUSH
13447: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13451: LD_INT 215
13453: PPUSH
13454: LD_INT 118
13456: PPUSH
13457: LD_INT 2
13459: PPUSH
13460: CALL_OW 331
// foodDelivered := false ;
13464: LD_ADDR_VAR 0 2
13468: PUSH
13469: LD_INT 0
13471: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13472: LD_INT 35
13474: PPUSH
13475: CALL_OW 67
// if hasMuchin then
13479: LD_EXP 30
13483: IFFALSE 13487
// continue ;
13485: GO 13472
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13487: LD_ADDR_VAR 0 1
13491: PUSH
13492: LD_EXP 14
13496: PUSH
13497: LD_EXP 43
13501: UNION
13502: PPUSH
13503: LD_INT 91
13505: PUSH
13506: LD_EXP 58
13510: PUSH
13511: LD_INT 6
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 25
13521: PUSH
13522: LD_INT 33
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PPUSH
13533: CALL_OW 72
13537: PUSH
13538: FOR_IN
13539: IFFALSE 13739
// if Carry ( i ) then
13541: LD_VAR 0 1
13545: PPUSH
13546: CALL_OW 281
13550: IFFALSE 13737
// begin DialogueOn ;
13552: CALL_OW 6
// foodDelivered := true ;
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_INT 1
13563: ST_TO_ADDR
// case i of Heike :
13564: LD_VAR 0 1
13568: PUSH
13569: LD_EXP 43
13573: DOUBLE
13574: EQUAL
13575: IFTRUE 13579
13577: GO 13594
13579: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13580: LD_EXP 43
13584: PPUSH
13585: LD_STRING DH-Food-12
13587: PPUSH
13588: CALL_OW 88
13592: GO 13720
13594: LD_EXP 48
13598: DOUBLE
13599: EQUAL
13600: IFTRUE 13604
13602: GO 13619
13604: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13605: LD_EXP 48
13609: PPUSH
13610: LD_STRING DK-Food-a-12
13612: PPUSH
13613: CALL_OW 88
13617: GO 13720
13619: LD_EXP 50
13623: DOUBLE
13624: EQUAL
13625: IFTRUE 13629
13627: GO 13644
13629: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13630: LD_EXP 50
13634: PPUSH
13635: LD_STRING DMar-Food-a-12
13637: PPUSH
13638: CALL_OW 88
13642: GO 13720
13644: LD_EXP 44
13648: DOUBLE
13649: EQUAL
13650: IFTRUE 13654
13652: GO 13669
13654: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13655: LD_EXP 44
13659: PPUSH
13660: LD_STRING DG-Food-a-14
13662: PPUSH
13663: CALL_OW 88
13667: GO 13720
13669: LD_EXP 45
13673: DOUBLE
13674: EQUAL
13675: IFTRUE 13679
13677: GO 13694
13679: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13680: LD_EXP 45
13684: PPUSH
13685: LD_STRING DM-Food-a-15
13687: PPUSH
13688: CALL_OW 88
13692: GO 13720
13694: LD_EXP 47
13698: DOUBLE
13699: EQUAL
13700: IFTRUE 13704
13702: GO 13719
13704: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13705: LD_EXP 47
13709: PPUSH
13710: LD_STRING DKam-Food-a-16
13712: PPUSH
13713: CALL_OW 88
13717: GO 13720
13719: POP
// SetCargo ( i , mat_cans , 0 ) ;
13720: LD_VAR 0 1
13724: PPUSH
13725: LD_INT 1
13727: PPUSH
13728: LD_INT 0
13730: PPUSH
13731: CALL_OW 290
// break ;
13735: GO 13739
// end ;
13737: GO 13538
13739: POP
13740: POP
// until foodDelivered ;
13741: LD_VAR 0 2
13745: IFFALSE 13472
// givenFood := true ;
13747: LD_ADDR_EXP 33
13751: PUSH
13752: LD_INT 1
13754: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13755: LD_EXP 58
13759: PPUSH
13760: LD_STRING DJy-Food-13
13762: PPUSH
13763: CALL_OW 88
// hasVirus := true ;
13767: LD_ADDR_EXP 31
13771: PUSH
13772: LD_INT 1
13774: ST_TO_ADDR
// if not americanContact then
13775: LD_EXP 10
13779: NOT
13780: IFFALSE 13830
// begin Say ( Heike , DH-Food-14 ) ;
13782: LD_EXP 43
13786: PPUSH
13787: LD_STRING DH-Food-14
13789: PPUSH
13790: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13794: LD_EXP 58
13798: PPUSH
13799: LD_STRING DJy-Food-15
13801: PPUSH
13802: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13806: LD_EXP 58
13810: PPUSH
13811: LD_STRING DJy-Food-16
13813: PPUSH
13814: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13818: LD_EXP 58
13822: PPUSH
13823: LD_STRING DJy-Food-17
13825: PPUSH
13826: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
13830: LD_STRING M3-out
13832: PPUSH
13833: CALL_OW 337
// DialogueOff ;
13837: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
13841: LD_EXP 58
13845: PPUSH
13846: LD_INT 1
13848: PPUSH
13849: LD_INT 10
13851: PPUSH
13852: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
13856: LD_EXP 58
13860: PPUSH
13861: LD_INT 95
13863: PPUSH
13864: LD_INT 17
13866: PPUSH
13867: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13871: LD_INT 35
13873: PPUSH
13874: CALL_OW 67
// if not HasTask ( Jerry ) then
13878: LD_EXP 58
13882: PPUSH
13883: CALL_OW 314
13887: NOT
13888: IFFALSE 13905
// ComMoveXY ( Jerry , 95 , 17 ) ;
13890: LD_EXP 58
13894: PPUSH
13895: LD_INT 95
13897: PPUSH
13898: LD_INT 17
13900: PPUSH
13901: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
13905: LD_EXP 58
13909: PPUSH
13910: LD_INT 95
13912: PPUSH
13913: LD_INT 17
13915: PPUSH
13916: CALL_OW 307
13920: IFFALSE 13871
// SetCargo ( Jerry , mat_cans , 0 ) ;
13922: LD_EXP 58
13926: PPUSH
13927: LD_INT 1
13929: PPUSH
13930: LD_INT 0
13932: PPUSH
13933: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
13937: LD_ADDR_EXP 55
13941: PUSH
13942: LD_EXP 55
13946: PPUSH
13947: LD_EXP 58
13951: PPUSH
13952: CALL 65582 0 2
13956: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
13957: LD_ADDR_VAR 0 1
13961: PUSH
13962: LD_INT 22
13964: PUSH
13965: LD_INT 4
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 23
13974: PUSH
13975: LD_INT 1
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: PUSH
13991: FOR_IN
13992: IFFALSE 14008
// SetLives ( i , 1000 ) ;
13994: LD_VAR 0 1
13998: PPUSH
13999: LD_INT 1000
14001: PPUSH
14002: CALL_OW 234
14006: GO 13991
14008: POP
14009: POP
// end ;
14010: PPOPN 2
14012: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14013: LD_EXP 30
14017: NOT
14018: PUSH
14019: LD_EXP 6
14023: AND
14024: IFFALSE 14455
14026: GO 14028
14028: DISABLE
14029: LD_INT 0
14031: PPUSH
14032: PPUSH
// begin tmp := [ ] ;
14033: LD_ADDR_VAR 0 2
14037: PUSH
14038: EMPTY
14039: ST_TO_ADDR
// uc_side := 3 ;
14040: LD_ADDR_OWVAR 20
14044: PUSH
14045: LD_INT 3
14047: ST_TO_ADDR
// uc_nation := 3 ;
14048: LD_ADDR_OWVAR 21
14052: PUSH
14053: LD_INT 3
14055: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14056: LD_INT 1
14058: PPUSH
14059: LD_INT 8
14061: PPUSH
14062: CALL_OW 381
// un := CreateHuman ;
14066: LD_ADDR_VAR 0 1
14070: PUSH
14071: CALL_OW 44
14075: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14076: LD_VAR 0 1
14080: PPUSH
14081: LD_INT 173
14083: PPUSH
14084: LD_INT 104
14086: PPUSH
14087: LD_INT 0
14089: PPUSH
14090: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14094: LD_ADDR_VAR 0 2
14098: PUSH
14099: LD_VAR 0 2
14103: PPUSH
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL 65582 0 2
14113: ST_TO_ADDR
// un := CreateHuman ;
14114: LD_ADDR_VAR 0 1
14118: PUSH
14119: CALL_OW 44
14123: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14124: LD_VAR 0 1
14128: PPUSH
14129: LD_INT 73
14131: PPUSH
14132: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14136: LD_ADDR_VAR 0 2
14140: PUSH
14141: LD_VAR 0 2
14145: PPUSH
14146: LD_VAR 0 1
14150: PPUSH
14151: CALL 65582 0 2
14155: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14156: LD_INT 35
14158: PPUSH
14159: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
14163: LD_EXP 48
14167: PPUSH
14168: CALL_OW 255
14172: PUSH
14173: LD_INT 2
14175: EQUAL
14176: PUSH
14177: LD_EXP 48
14181: PPUSH
14182: LD_INT 73
14184: PPUSH
14185: CALL_OW 296
14189: PUSH
14190: LD_INT 8
14192: LESS
14193: AND
14194: PUSH
14195: LD_VAR 0 2
14199: PPUSH
14200: LD_INT 101
14202: PUSH
14203: LD_INT 2
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PPUSH
14210: CALL_OW 72
14214: AND
14215: IFFALSE 14156
// InGameOn ;
14217: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14221: LD_INT 73
14223: PPUSH
14224: CALL_OW 250
14228: PPUSH
14229: LD_INT 73
14231: PPUSH
14232: CALL_OW 251
14236: PPUSH
14237: LD_INT 2
14239: PPUSH
14240: LD_INT 9
14242: NEG
14243: PPUSH
14244: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14248: LD_INT 73
14250: PPUSH
14251: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14255: LD_EXP 48
14259: PPUSH
14260: LD_INT 73
14262: PPUSH
14263: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14267: LD_EXP 48
14271: PPUSH
14272: LD_STRING DK-Plastic-1
14274: PPUSH
14275: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14279: LD_EXP 48
14283: PPUSH
14284: LD_STRING DK-Plastic-2
14286: PPUSH
14287: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14291: LD_EXP 48
14295: PPUSH
14296: LD_INT 73
14298: PPUSH
14299: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14303: LD_INT 35
14305: PPUSH
14306: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
14310: LD_EXP 48
14314: PPUSH
14315: LD_INT 73
14317: PPUSH
14318: CALL_OW 296
14322: PUSH
14323: LD_INT 6
14325: LESS
14326: IFFALSE 14303
// ComHold ( Kaia ) ;
14328: LD_EXP 48
14332: PPUSH
14333: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14337: LD_VAR 0 2
14341: PUSH
14342: LD_INT 1
14344: ARRAY
14345: PPUSH
14346: LD_STRING DRum-Plastic-3
14348: PPUSH
14349: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14353: LD_VAR 0 2
14357: PUSH
14358: LD_INT 2
14360: ARRAY
14361: PPUSH
14362: LD_STRING DRum2-Plastic-4
14364: PPUSH
14365: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14369: LD_VAR 0 2
14373: PUSH
14374: LD_INT 1
14376: ARRAY
14377: PPUSH
14378: LD_STRING DRum-Plastic-5
14380: PPUSH
14381: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14385: LD_VAR 0 2
14389: PUSH
14390: LD_INT 2
14392: ARRAY
14393: PPUSH
14394: LD_STRING DRum2-Plastic-6
14396: PPUSH
14397: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14401: LD_EXP 48
14405: PPUSH
14406: LD_STRING DK-Plastic-7
14408: PPUSH
14409: CALL_OW 88
// InGameOff ;
14413: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14417: LD_INT 73
14419: PPUSH
14420: CALL_OW 250
14424: PPUSH
14425: LD_INT 73
14427: PPUSH
14428: CALL_OW 251
14432: PPUSH
14433: LD_INT 2
14435: PPUSH
14436: CALL_OW 331
// explosionsTakenByRussians := true ;
14440: LD_ADDR_EXP 21
14444: PUSH
14445: LD_INT 1
14447: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14448: LD_STRING ExplosivesInfo
14450: PPUSH
14451: CALL_OW 97
// end ;
14455: PPOPN 2
14457: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14458: LD_EXP 21
14462: PUSH
14463: LD_EXP 48
14467: PPUSH
14468: CALL_OW 255
14472: PUSH
14473: LD_INT 2
14475: EQUAL
14476: AND
14477: PUSH
14478: LD_EXP 48
14482: PPUSH
14483: LD_INT 61
14485: PPUSH
14486: CALL 19636 0 2
14490: AND
14491: PUSH
14492: LD_EXP 17
14496: NOT
14497: AND
14498: PUSH
14499: LD_EXP 30
14503: NOT
14504: AND
14505: IFFALSE 14661
14507: GO 14509
14509: DISABLE
// begin InGameOn ;
14510: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14514: LD_INT 61
14516: PPUSH
14517: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14521: LD_EXP 48
14525: PPUSH
14526: LD_INT 3
14528: PPUSH
14529: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14533: LD_EXP 48
14537: PPUSH
14538: LD_INT 61
14540: PPUSH
14541: CALL_OW 120
// wait ( 0 0$2 ) ;
14545: LD_INT 70
14547: PPUSH
14548: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14552: LD_EXP 48
14556: PPUSH
14557: LD_STRING DK-Plastic-8
14559: PPUSH
14560: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14564: LD_EXP 64
14568: PUSH
14569: LD_INT 1
14571: ARRAY
14572: PPUSH
14573: LD_STRING DRuMch-Plastic-9
14575: PPUSH
14576: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14580: LD_EXP 48
14584: PPUSH
14585: LD_STRING DK-Plastic-10
14587: PPUSH
14588: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14592: LD_EXP 64
14596: PUSH
14597: LD_INT 1
14599: ARRAY
14600: PPUSH
14601: LD_STRING DRuMch-Plastic-a-11
14603: PPUSH
14604: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14608: LD_EXP 48
14612: PPUSH
14613: LD_STRING DK-Plastic-a-12
14615: PPUSH
14616: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14620: LD_EXP 64
14624: PUSH
14625: LD_INT 1
14627: ARRAY
14628: PPUSH
14629: LD_STRING DRuMch-Plastic-a-13
14631: PPUSH
14632: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14636: LD_EXP 48
14640: PPUSH
14641: LD_INT 2
14643: PPUSH
14644: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14648: LD_EXP 48
14652: PPUSH
14653: CALL_OW 122
// InGameOff ;
14657: CALL_OW 9
// end ;
14661: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14662: LD_EXP 21
14666: PUSH
14667: LD_EXP 48
14671: PPUSH
14672: CALL_OW 255
14676: PUSH
14677: LD_INT 2
14679: EQUAL
14680: AND
14681: PUSH
14682: LD_EXP 48
14686: PPUSH
14687: LD_INT 196
14689: PPUSH
14690: CALL 19636 0 2
14694: AND
14695: PUSH
14696: LD_EXP 17
14700: NOT
14701: AND
14702: PUSH
14703: LD_EXP 30
14707: NOT
14708: AND
14709: IFFALSE 15048
14711: GO 14713
14713: DISABLE
// begin InGameOn ;
14714: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14718: LD_INT 196
14720: PPUSH
14721: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14725: LD_EXP 48
14729: PPUSH
14730: LD_INT 3
14732: PPUSH
14733: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14737: LD_EXP 48
14741: PPUSH
14742: LD_INT 196
14744: PPUSH
14745: CALL_OW 120
// wait ( 0 0$2 ) ;
14749: LD_INT 70
14751: PPUSH
14752: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14756: LD_EXP 48
14760: PPUSH
14761: LD_STRING DK-Plastic-8
14763: PPUSH
14764: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14768: LD_EXP 65
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: PPUSH
14777: LD_STRING DRuMch-Plastic-9
14779: PPUSH
14780: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14784: LD_EXP 48
14788: PPUSH
14789: LD_STRING DK-Plastic-10
14791: PPUSH
14792: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14796: LD_EXP 65
14800: PUSH
14801: LD_INT 1
14803: ARRAY
14804: PPUSH
14805: LD_STRING DRuMch-Plastic-11
14807: PPUSH
14808: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14812: LD_EXP 48
14816: PPUSH
14817: LD_STRING DK-Plastic-12
14819: PPUSH
14820: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
14824: LD_EXP 48
14828: PPUSH
14829: LD_STRING DK-Plastic-13
14831: PPUSH
14832: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
14836: LD_EXP 65
14840: PUSH
14841: LD_INT 1
14843: ARRAY
14844: PPUSH
14845: LD_STRING DRuMch-Plastic-14
14847: PPUSH
14848: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
14852: LD_EXP 66
14856: PPUSH
14857: LD_INT 167
14859: PPUSH
14860: LD_INT 34
14862: PPUSH
14863: LD_INT 3
14865: PPUSH
14866: LD_INT 0
14868: PPUSH
14869: CALL 67722 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14873: LD_EXP 66
14877: PPUSH
14878: LD_INT 196
14880: PPUSH
14881: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14885: LD_INT 35
14887: PPUSH
14888: CALL_OW 67
// if not HasTask ( Stiopa ) then
14892: LD_EXP 66
14896: PPUSH
14897: CALL_OW 314
14901: NOT
14902: IFFALSE 14916
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14904: LD_EXP 66
14908: PPUSH
14909: LD_INT 196
14911: PPUSH
14912: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
14916: LD_EXP 66
14920: PPUSH
14921: CALL_OW 310
14925: IFFALSE 14885
// Say ( Stiopa , DSpn-Plastic-15 ) ;
14927: LD_EXP 66
14931: PPUSH
14932: LD_STRING DSpn-Plastic-15
14934: PPUSH
14935: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
14939: LD_EXP 67
14943: PPUSH
14944: LD_STRING DLr-Plastic-16
14946: PPUSH
14947: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
14951: LD_EXP 48
14955: PPUSH
14956: LD_STRING DK-Plastic-17
14958: PPUSH
14959: CALL_OW 88
// wait ( 0 0$0.3 ) ;
14963: LD_INT 10
14965: PPUSH
14966: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
14970: LD_INT 196
14972: PPUSH
14973: CALL 19362 0 1
// SetSide ( Kaia , 2 ) ;
14977: LD_EXP 48
14981: PPUSH
14982: LD_INT 2
14984: PPUSH
14985: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14989: LD_EXP 48
14993: PPUSH
14994: CALL_OW 122
// InGameOff ;
14998: CALL_OW 9
// explosionsTakenByRussians := false ;
15002: LD_ADDR_EXP 21
15006: PUSH
15007: LD_INT 0
15009: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15010: LD_INT 170
15012: PPUSH
15013: LD_INT 28
15015: PPUSH
15016: LD_INT 2
15018: PPUSH
15019: LD_INT 6
15021: NEG
15022: PPUSH
15023: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15027: LD_INT 170
15029: PPUSH
15030: LD_INT 28
15032: PPUSH
15033: LD_INT 2
15035: PPUSH
15036: CALL_OW 331
// knowWhereExplosivesAre := true ;
15040: LD_ADDR_EXP 34
15044: PUSH
15045: LD_INT 1
15047: ST_TO_ADDR
// end ;
15048: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15049: LD_EXP 34
15053: PUSH
15054: LD_EXP 48
15058: PPUSH
15059: CALL_OW 255
15063: PUSH
15064: LD_INT 2
15066: EQUAL
15067: AND
15068: PUSH
15069: LD_EXP 48
15073: PPUSH
15074: LD_INT 195
15076: PPUSH
15077: CALL 19636 0 2
15081: AND
15082: PUSH
15083: LD_EXP 17
15087: NOT
15088: AND
15089: PUSH
15090: LD_EXP 30
15094: NOT
15095: AND
15096: IFFALSE 15202
15098: GO 15100
15100: DISABLE
// begin InGameOn ;
15101: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15105: LD_EXP 48
15109: PPUSH
15110: LD_INT 3
15112: PPUSH
15113: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15117: LD_EXP 48
15121: PPUSH
15122: LD_INT 195
15124: PPUSH
15125: CALL_OW 120
// wait ( 0 0$1 ) ;
15129: LD_INT 35
15131: PPUSH
15132: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15136: LD_EXP 48
15140: PPUSH
15141: LD_STRING DK-Plastic-18
15143: PPUSH
15144: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15148: LD_STRING ExplosivesInfoUsage
15150: PPUSH
15151: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
15155: LD_INT 195
15157: PPUSH
15158: CALL 19362 0 1
// SetSide ( Kaia , 2 ) ;
15162: LD_EXP 48
15166: PPUSH
15167: LD_INT 2
15169: PPUSH
15170: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15174: LD_EXP 48
15178: PPUSH
15179: CALL_OW 122
// InGameOff ;
15183: CALL_OW 9
// hasExplosionCollected := true ;
15187: LD_ADDR_EXP 23
15191: PUSH
15192: LD_INT 1
15194: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15195: LD_STRING M1-explosive-out
15197: PPUSH
15198: CALL_OW 337
// end ;
15202: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15203: LD_EXP 23
15207: PUSH
15208: LD_EXP 17
15212: NOT
15213: AND
15214: PUSH
15215: LD_EXP 30
15219: NOT
15220: AND
15221: IFFALSE 15396
15223: GO 15225
15225: DISABLE
15226: LD_INT 0
15228: PPUSH
15229: PPUSH
// begin for i in importantBuildingsList do
15230: LD_ADDR_VAR 0 1
15234: PUSH
15235: LD_EXP 35
15239: PUSH
15240: FOR_IN
15241: IFFALSE 15257
// MarkBuilding ( i , true ) ;
15243: LD_VAR 0 1
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: CALL 20010 0 2
15255: GO 15240
15257: POP
15258: POP
// repeat wait ( 0 0$1 ) ;
15259: LD_INT 35
15261: PPUSH
15262: CALL_OW 67
// for i in importantBuildingsList do
15266: LD_ADDR_VAR 0 1
15270: PUSH
15271: LD_EXP 35
15275: PUSH
15276: FOR_IN
15277: IFFALSE 15387
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15279: LD_EXP 43
15283: PUSH
15284: LD_EXP 14
15288: UNION
15289: PPUSH
15290: LD_INT 22
15292: PUSH
15293: LD_INT 2
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 21
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 91
15312: PUSH
15313: LD_VAR 0 1
15317: PUSH
15318: LD_INT 6
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: LIST
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: LIST
15330: PPUSH
15331: CALL_OW 72
15335: IFFALSE 15385
// begin CenterNowOnUnits ( i ) ;
15337: LD_VAR 0 1
15341: PPUSH
15342: CALL_OW 87
// PlaceExplosives ( i ) ;
15346: LD_VAR 0 1
15350: PPUSH
15351: CALL 19907 0 1
// MarkBuilding ( i , false ) ;
15355: LD_VAR 0 1
15359: PPUSH
15360: LD_INT 0
15362: PPUSH
15363: CALL 20010 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15367: LD_ADDR_EXP 35
15371: PUSH
15372: LD_EXP 35
15376: PUSH
15377: LD_VAR 0 1
15381: DIFF
15382: ST_TO_ADDR
// continue ;
15383: GO 15276
// end ; end ;
15385: GO 15276
15387: POP
15388: POP
// until not importantBuildingsList ;
15389: LD_EXP 35
15393: NOT
15394: IFFALSE 15259
// end ;
15396: PPOPN 2
15398: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15399: LD_EXP 14
15403: PPUSH
15404: LD_INT 22
15406: PUSH
15407: LD_INT 2
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: LD_INT 95
15416: PUSH
15417: LD_INT 23
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PPUSH
15428: CALL_OW 72
15432: PUSH
15433: LD_EXP 43
15437: PPUSH
15438: CALL_OW 302
15442: AND
15443: PUSH
15444: LD_EXP 30
15448: NOT
15449: AND
15450: IFFALSE 15478
15452: GO 15454
15454: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15455: LD_EXP 43
15459: PPUSH
15460: LD_STRING DH-End-1
15462: PPUSH
15463: CALL_OW 88
// if not activeExplosives then
15467: LD_EXP 36
15471: NOT
15472: IFFALSE 15478
// Explode ;
15474: CALL 22551 0 0
// end ;
15478: END
// function SayHEmpty ( ) ; begin
15479: LD_INT 0
15481: PPUSH
// case rand ( 1 , 3 ) of 1 :
15482: LD_INT 1
15484: PPUSH
15485: LD_INT 3
15487: PPUSH
15488: CALL_OW 12
15492: PUSH
15493: LD_INT 1
15495: DOUBLE
15496: EQUAL
15497: IFTRUE 15501
15499: GO 15516
15501: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15502: LD_EXP 43
15506: PPUSH
15507: LD_STRING DH-Empty-1
15509: PPUSH
15510: CALL_OW 88
15514: GO 15563
15516: LD_INT 2
15518: DOUBLE
15519: EQUAL
15520: IFTRUE 15524
15522: GO 15539
15524: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15525: LD_EXP 43
15529: PPUSH
15530: LD_STRING DH-Empty-2
15532: PPUSH
15533: CALL_OW 88
15537: GO 15563
15539: LD_INT 3
15541: DOUBLE
15542: EQUAL
15543: IFTRUE 15547
15545: GO 15562
15547: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15548: LD_EXP 43
15552: PPUSH
15553: LD_STRING DH-Empty-3
15555: PPUSH
15556: CALL_OW 88
15560: GO 15563
15562: POP
// end ;
15563: LD_VAR 0 1
15567: RET
// function SayHVisited ( ) ; begin
15568: LD_INT 0
15570: PPUSH
// case rand ( 1 , 3 ) of 1 :
15571: LD_INT 1
15573: PPUSH
15574: LD_INT 3
15576: PPUSH
15577: CALL_OW 12
15581: PUSH
15582: LD_INT 1
15584: DOUBLE
15585: EQUAL
15586: IFTRUE 15590
15588: GO 15605
15590: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15591: LD_EXP 43
15595: PPUSH
15596: LD_STRING DH-Visited-1
15598: PPUSH
15599: CALL_OW 88
15603: GO 15652
15605: LD_INT 2
15607: DOUBLE
15608: EQUAL
15609: IFTRUE 15613
15611: GO 15628
15613: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15614: LD_EXP 43
15618: PPUSH
15619: LD_STRING DH-Visited-2
15621: PPUSH
15622: CALL_OW 88
15626: GO 15652
15628: LD_INT 3
15630: DOUBLE
15631: EQUAL
15632: IFTRUE 15636
15634: GO 15651
15636: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15637: LD_EXP 43
15641: PPUSH
15642: LD_STRING DH-Visited-3
15644: PPUSH
15645: CALL_OW 88
15649: GO 15652
15651: POP
// end ;
15652: LD_VAR 0 1
15656: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15657: LD_EXP 17
15661: NOT
15662: PUSH
15663: LD_EXP 15
15667: AND
15668: PUSH
15669: LD_EXP 43
15673: PPUSH
15674: CALL_OW 255
15678: PUSH
15679: LD_INT 2
15681: EQUAL
15682: AND
15683: PUSH
15684: LD_EXP 43
15688: PPUSH
15689: CALL_OW 302
15693: AND
15694: PUSH
15695: LD_EXP 43
15699: PPUSH
15700: CALL_OW 316
15704: AND
15705: PUSH
15706: LD_EXP 30
15710: NOT
15711: AND
15712: IFFALSE 15778
15714: GO 15716
15716: DISABLE
15717: LD_INT 0
15719: PPUSH
// begin enable ;
15720: ENABLE
// for i in entranceAllowedList do
15721: LD_ADDR_VAR 0 1
15725: PUSH
15726: LD_EXP 15
15730: PUSH
15731: FOR_IN
15732: IFFALSE 15776
// if InEntrance ( Heike , i ) then
15734: LD_EXP 43
15738: PPUSH
15739: LD_VAR 0 1
15743: PPUSH
15744: CALL 19636 0 2
15748: IFFALSE 15774
// begin disable ( entranceEvent ) ;
15750: LD_INT 1
15752: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15753: LD_VAR 0 1
15757: PPUSH
15758: CALL 15781 0 1
// wait ( 0 0$3 ) ;
15762: LD_INT 105
15764: PPUSH
15765: CALL_OW 67
// enable ( entranceEvent ) ;
15769: LD_INT 1
15771: ENABLE_MARKED
// break ;
15772: GO 15776
// end ;
15774: GO 15731
15776: POP
15777: POP
// end ;
15778: PPOPN 1
15780: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
15781: LD_INT 0
15783: PPUSH
15784: PPUSH
15785: PPUSH
15786: PPUSH
// if not building then
15787: LD_VAR 0 1
15791: NOT
15792: IFFALSE 15796
// exit ;
15794: GO 18421
// if building in entranceVisitedList then
15796: LD_VAR 0 1
15800: PUSH
15801: LD_EXP 16
15805: IN
15806: IFFALSE 15814
// begin SayHVisited ( ) ;
15808: CALL 15568 0 0
// exit ;
15812: GO 18421
// end ; case Query ( EnterBuilding ) of 1 :
15814: LD_STRING EnterBuilding
15816: PPUSH
15817: CALL_OW 97
15821: PUSH
15822: LD_INT 1
15824: DOUBLE
15825: EQUAL
15826: IFTRUE 15830
15828: GO 15833
15830: POP
// ; 2 :
15831: GO 15847
15833: LD_INT 2
15835: DOUBLE
15836: EQUAL
15837: IFTRUE 15841
15839: GO 15846
15841: POP
// exit ; end ;
15842: GO 18421
15844: GO 15847
15846: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
15847: LD_ADDR_EXP 16
15851: PUSH
15852: LD_EXP 16
15856: PPUSH
15857: LD_VAR 0 1
15861: PPUSH
15862: CALL 65582 0 2
15866: ST_TO_ADDR
// InGameOn ;
15867: CALL_OW 8
// SetSide ( Heike , 5 ) ;
15871: LD_EXP 43
15875: PPUSH
15876: LD_INT 5
15878: PPUSH
15879: CALL_OW 235
// SetSide ( building , 5 ) ;
15883: LD_VAR 0 1
15887: PPUSH
15888: LD_INT 5
15890: PPUSH
15891: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
15895: LD_EXP 43
15899: PPUSH
15900: LD_VAR 0 1
15904: PPUSH
15905: CALL_OW 120
// wait ( 0 0$3 ) ;
15909: LD_INT 105
15911: PPUSH
15912: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
15916: LD_ADDR_VAR 0 4
15920: PUSH
15921: LD_INT 165
15923: PUSH
15924: LD_INT 106
15926: PUSH
15927: LD_INT 135
15929: PUSH
15930: LD_INT 162
15932: PUSH
15933: LD_INT 61
15935: PUSH
15936: LD_INT 109
15938: PUSH
15939: LD_INT 169
15941: PUSH
15942: LD_INT 13
15944: PUSH
15945: LD_INT 147
15947: PUSH
15948: LD_INT 137
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: ST_TO_ADDR
// if not building in tmp then
15963: LD_VAR 0 1
15967: PUSH
15968: LD_VAR 0 4
15972: IN
15973: NOT
15974: IFFALSE 15982
// SayHEmpty ( ) else
15976: CALL 15479 0 0
15980: GO 18368
// case building of laundry :
15982: LD_VAR 0 1
15986: PUSH
15987: LD_INT 165
15989: DOUBLE
15990: EQUAL
15991: IFTRUE 15995
15993: GO 16099
15995: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
15996: LD_EXP 26
16000: PUSH
16001: LD_EXP 27
16005: NOT
16006: AND
16007: PUSH
16008: LD_EXP 28
16012: NOT
16013: AND
16014: IFFALSE 16069
// begin case Query ( HeikeInLaundry ) of 1 :
16016: LD_STRING HeikeInLaundry
16018: PPUSH
16019: CALL_OW 97
16023: PUSH
16024: LD_INT 1
16026: DOUBLE
16027: EQUAL
16028: IFTRUE 16032
16030: GO 16039
16032: POP
// SpawnHeikeAsRussian ; 2 :
16033: CALL 1795 0 0
16037: GO 16067
16039: LD_INT 2
16041: DOUBLE
16042: EQUAL
16043: IFTRUE 16047
16045: GO 16066
16047: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16048: LD_ADDR_EXP 16
16052: PUSH
16053: LD_EXP 16
16057: PUSH
16058: LD_VAR 0 1
16062: DIFF
16063: ST_TO_ADDR
16064: GO 16067
16066: POP
// end else
16067: GO 16097
// begin entranceVisitedList := entranceVisitedList diff building ;
16069: LD_ADDR_EXP 16
16073: PUSH
16074: LD_EXP 16
16078: PUSH
16079: LD_VAR 0 1
16083: DIFF
16084: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16085: LD_EXP 43
16089: PPUSH
16090: LD_STRING DH-Locked
16092: PPUSH
16093: CALL_OW 88
// end ; end ; dougBar :
16097: GO 18368
16099: LD_INT 106
16101: DOUBLE
16102: EQUAL
16103: IFTRUE 16107
16105: GO 16469
16107: POP
// begin if contactWithAmerican and americanContact then
16108: LD_EXP 25
16112: PUSH
16113: LD_EXP 10
16117: AND
16118: IFFALSE 16182
// begin Say ( Heike , DH-Escort-a-1 ) ;
16120: LD_EXP 43
16124: PPUSH
16125: LD_STRING DH-Escort-a-1
16127: PPUSH
16128: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16132: LD_EXP 57
16136: PPUSH
16137: LD_STRING DCa-Escort-a-2
16139: PPUSH
16140: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16144: LD_EXP 57
16148: PPUSH
16149: LD_STRING DCa-Escort-a-3
16151: PPUSH
16152: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16156: LD_EXP 43
16160: PPUSH
16161: LD_STRING DH-Escort-a-4
16163: PPUSH
16164: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16168: LD_EXP 43
16172: PPUSH
16173: LD_STRING DH-Escort-a-5
16175: PPUSH
16176: CALL_OW 88
// end else
16180: GO 16426
// if contactWithAmerican then
16182: LD_EXP 25
16186: IFFALSE 16226
// begin Say ( Heike , DH-Escort-b-1 ) ;
16188: LD_EXP 43
16192: PPUSH
16193: LD_STRING DH-Escort-b-1
16195: PPUSH
16196: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16200: LD_EXP 57
16204: PPUSH
16205: LD_STRING DCa-Escort-b-2
16207: PPUSH
16208: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16212: LD_EXP 57
16216: PPUSH
16217: LD_STRING DCa-Escort-b-3
16219: PPUSH
16220: CALL_OW 88
// end else
16224: GO 16426
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16226: LD_EXP 57
16230: PPUSH
16231: LD_STRING DCa-Deal-a-1
16233: PPUSH
16234: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16238: LD_EXP 57
16242: PPUSH
16243: LD_STRING DCa-Deal-a-2
16245: PPUSH
16246: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16250: LD_EXP 43
16254: PPUSH
16255: LD_STRING DH-Deal-a-3
16257: PPUSH
16258: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16262: LD_EXP 57
16266: PPUSH
16267: LD_STRING DCa-Deal-a-4
16269: PPUSH
16270: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16274: LD_EXP 43
16278: PPUSH
16279: LD_STRING DH-Deal-a-5
16281: PPUSH
16282: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16286: LD_EXP 57
16290: PPUSH
16291: LD_STRING DCa-Deal-a-6
16293: PPUSH
16294: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16298: LD_EXP 57
16302: PPUSH
16303: LD_STRING DCa-Deal-a-7
16305: PPUSH
16306: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16310: LD_EXP 57
16314: PPUSH
16315: LD_STRING DCa-Deal-a-8
16317: PPUSH
16318: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16322: LD_EXP 57
16326: PPUSH
16327: LD_STRING DCa-Deal-a-9
16329: PPUSH
16330: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16334: LD_EXP 57
16338: PPUSH
16339: LD_STRING DCa-Deal-a-10
16341: PPUSH
16342: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16346: LD_EXP 57
16350: PPUSH
16351: LD_STRING DCa-Deal-a-11
16353: PPUSH
16354: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16358: LD_INT 10
16360: PPUSH
16361: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16365: LD_EXP 57
16369: PPUSH
16370: LD_STRING DCa-Deal-a-12
16372: PPUSH
16373: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16377: LD_EXP 43
16381: PPUSH
16382: LD_STRING DH-Deal-a-13
16384: PPUSH
16385: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16389: LD_EXP 43
16393: PPUSH
16394: LD_STRING DH-Deal-a-14
16396: PPUSH
16397: CALL_OW 88
// contactWithAmerican := true ;
16401: LD_ADDR_EXP 25
16405: PUSH
16406: LD_INT 1
16408: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
16409: LD_INT 1
16411: PPUSH
16412: LD_STRING 08_DealWithDoug
16414: PPUSH
16415: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16419: LD_STRING M1-american-out
16421: PPUSH
16422: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16426: LD_EXP 57
16430: PPUSH
16431: LD_INT 2
16433: PPUSH
16434: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16438: LD_ADDR_EXP 14
16442: PUSH
16443: LD_EXP 14
16447: PPUSH
16448: LD_EXP 57
16452: PPUSH
16453: CALL 65582 0 2
16457: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16458: LD_EXP 57
16462: PPUSH
16463: CALL_OW 122
// end ; usLab :
16467: GO 18368
16469: LD_INT 135
16471: DOUBLE
16472: EQUAL
16473: IFTRUE 16477
16475: GO 16796
16477: POP
// begin if hasSniperRifle then
16478: LD_EXP 11
16482: IFFALSE 16794
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16484: LD_EXP 48
16488: PPUSH
16489: CALL_OW 302
16493: PUSH
16494: LD_EXP 48
16498: PUSH
16499: LD_EXP 14
16503: IN
16504: AND
16505: PUSH
16506: LD_EXP 48
16510: PPUSH
16511: CALL_OW 255
16515: PUSH
16516: LD_INT 2
16518: EQUAL
16519: AND
16520: IFFALSE 16768
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16522: LD_EXP 43
16526: PPUSH
16527: LD_EXP 48
16531: PPUSH
16532: CALL_OW 296
16536: PUSH
16537: LD_INT 10
16539: GREATER
16540: IFFALSE 16565
// begin Query ( KaiaDistance ) ;
16542: LD_STRING KaiaDistance
16544: PPUSH
16545: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16549: LD_ADDR_EXP 16
16553: PUSH
16554: LD_EXP 16
16558: PUSH
16559: LD_INT 135
16561: DIFF
16562: ST_TO_ADDR
// end else
16563: GO 16766
// begin SetSide ( Kaia , 5 ) ;
16565: LD_EXP 48
16569: PPUSH
16570: LD_INT 5
16572: PPUSH
16573: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16577: LD_EXP 48
16581: PPUSH
16582: LD_INT 135
16584: PPUSH
16585: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16589: LD_INT 35
16591: PPUSH
16592: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16596: LD_EXP 48
16600: PPUSH
16601: CALL_OW 310
16605: IFFALSE 16589
// Say ( Kaia , DK-Sniper-1 ) ;
16607: LD_EXP 48
16611: PPUSH
16612: LD_STRING DK-Sniper-1
16614: PPUSH
16615: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16619: LD_EXP 48
16623: PPUSH
16624: CALL_OW 257
16628: PUSH
16629: LD_INT 34
16631: EQUAL
16632: PUSH
16633: LD_EXP 45
16637: PUSH
16638: LD_EXP 14
16642: IN
16643: AND
16644: PUSH
16645: LD_EXP 45
16649: PPUSH
16650: CALL_OW 302
16654: AND
16655: IFFALSE 16686
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16657: LD_EXP 48
16661: PPUSH
16662: LD_STRING DK-Sniper-a-2
16664: PPUSH
16665: CALL_OW 88
// giveSniperRifleToMike := true ;
16669: LD_ADDR_EXP 42
16673: PUSH
16674: LD_INT 1
16676: ST_TO_ADDR
// Query ( QSniperMike ) ;
16677: LD_STRING QSniperMike
16679: PPUSH
16680: CALL_OW 97
// end else
16684: GO 16745
// begin Say ( Kaia , DK-Sniper-2 ) ;
16686: LD_EXP 48
16690: PPUSH
16691: LD_STRING DK-Sniper-2
16693: PPUSH
16694: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16698: LD_EXP 48
16702: PPUSH
16703: LD_INT 32
16705: PPUSH
16706: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16710: LD_EXP 50
16714: PPUSH
16715: CALL_OW 302
16719: PUSH
16720: LD_EXP 50
16724: PUSH
16725: LD_EXP 14
16729: IN
16730: AND
16731: IFFALSE 16745
// Say ( Markov , DMar-Sniper-3 ) ;
16733: LD_EXP 50
16737: PPUSH
16738: LD_STRING DMar-Sniper-3
16740: PPUSH
16741: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16745: LD_EXP 48
16749: PPUSH
16750: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16754: LD_EXP 48
16758: PPUSH
16759: LD_INT 2
16761: PPUSH
16762: CALL_OW 235
// end ; end else
16766: GO 16794
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16768: LD_ADDR_EXP 16
16772: PUSH
16773: LD_EXP 16
16777: PUSH
16778: LD_INT 135
16780: DIFF
16781: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16782: LD_EXP 43
16786: PPUSH
16787: LD_STRING DH-Locked
16789: PPUSH
16790: CALL_OW 88
// end ; end ; end ; drugsLab :
16794: GO 18368
16796: LD_INT 162
16798: DOUBLE
16799: EQUAL
16800: IFTRUE 16804
16802: GO 16937
16804: POP
// begin if hasStimDrugs then
16805: LD_EXP 9
16809: IFFALSE 16923
// begin wait ( 0 0$1 ) ;
16811: LD_INT 35
16813: PPUSH
16814: CALL_OW 67
// if not hasStimDrugsCollected then
16818: LD_EXP 24
16822: NOT
16823: IFFALSE 16865
// begin Say ( Heike , DH-Lab-1 ) ;
16825: LD_EXP 43
16829: PPUSH
16830: LD_STRING DH-Lab-1
16832: PPUSH
16833: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
16837: LD_INT 5
16839: PPUSH
16840: LD_INT 2
16842: PPUSH
16843: LD_INT 2
16845: PPUSH
16846: CALL_OW 322
// hasStimDrugsCollected := true ;
16850: LD_ADDR_EXP 24
16854: PUSH
16855: LD_INT 1
16857: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
16858: LD_STRING M1-drugs-out
16860: PPUSH
16861: CALL_OW 604
// end ; if not hasExplosionCollected then
16865: LD_EXP 23
16869: NOT
16870: IFFALSE 16888
// entranceVisitedList := entranceVisitedList diff drugsLab else
16872: LD_ADDR_EXP 16
16876: PUSH
16877: LD_EXP 16
16881: PUSH
16882: LD_INT 162
16884: DIFF
16885: ST_TO_ADDR
16886: GO 16921
// begin wait ( 0 0$3 ) ;
16888: LD_INT 105
16890: PPUSH
16891: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
16895: LD_EXP 43
16899: PPUSH
16900: LD_STRING DH-Lab-2
16902: PPUSH
16903: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
16907: LD_STRING M1-drugsLab-out
16909: PPUSH
16910: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
16914: LD_INT 162
16916: PPUSH
16917: CALL 19907 0 1
// end ; end else
16921: GO 16935
// Say ( Heike , DH-Locked ) ;
16923: LD_EXP 43
16927: PPUSH
16928: LD_STRING DH-Locked
16930: PPUSH
16931: CALL_OW 88
// end ; ruFac :
16935: GO 18368
16937: LD_INT 61
16939: DOUBLE
16940: EQUAL
16941: IFTRUE 16945
16943: GO 17055
16945: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
16946: LD_EXP 50
16950: PPUSH
16951: CALL_OW 302
16955: PUSH
16956: LD_EXP 50
16960: PUSH
16961: LD_EXP 14
16965: IN
16966: NOT
16967: AND
16968: IFFALSE 17049
// begin Say ( Heike , DH-Krastyo-1 ) ;
16970: LD_EXP 43
16974: PPUSH
16975: LD_STRING DH-Krastyo-1
16977: PPUSH
16978: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
16982: LD_EXP 50
16986: PPUSH
16987: LD_STRING DMar-Krastyo-2
16989: PPUSH
16990: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
16994: LD_EXP 50
16998: PPUSH
16999: LD_STRING DMar-Krastyo-3
17001: PPUSH
17002: CALL_OW 88
// SetSide ( Markov , 2 ) ;
17006: LD_EXP 50
17010: PPUSH
17011: LD_INT 2
17013: PPUSH
17014: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
17018: LD_ADDR_EXP 14
17022: PUSH
17023: LD_EXP 14
17027: PPUSH
17028: LD_EXP 50
17032: PPUSH
17033: CALL 65582 0 2
17037: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
17038: LD_EXP 50
17042: PPUSH
17043: CALL_OW 122
// end else
17047: GO 17053
// SayHEmpty ( ) ;
17049: CALL 15479 0 0
// end ; ruBarKam :
17053: GO 18368
17055: LD_INT 109
17057: DOUBLE
17058: EQUAL
17059: IFTRUE 17063
17061: GO 17210
17063: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17064: LD_EXP 47
17068: PPUSH
17069: CALL_OW 302
17073: PUSH
17074: LD_EXP 47
17078: PUSH
17079: LD_EXP 14
17083: IN
17084: NOT
17085: AND
17086: IFFALSE 17204
// begin Say ( Heike , DH-Kamil-1 ) ;
17088: LD_EXP 43
17092: PPUSH
17093: LD_STRING DH-Kamil-1
17095: PPUSH
17096: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17100: LD_EXP 47
17104: PPUSH
17105: LD_STRING DKam-Kamil-2
17107: PPUSH
17108: CALL_OW 88
// if IsOk ( Sophia ) then
17112: LD_EXP 49
17116: PPUSH
17117: CALL_OW 302
17121: IFFALSE 17161
// if Sophia in heikeSquad then
17123: LD_EXP 49
17127: PUSH
17128: LD_EXP 14
17132: IN
17133: IFFALSE 17149
// Say ( Kamil , DKam-Kamil-a-3 ) else
17135: LD_EXP 47
17139: PPUSH
17140: LD_STRING DKam-Kamil-a-3
17142: PPUSH
17143: CALL_OW 88
17147: GO 17161
// Say ( Kamil , DKam-Kamil-3 ) ;
17149: LD_EXP 47
17153: PPUSH
17154: LD_STRING DKam-Kamil-3
17156: PPUSH
17157: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17161: LD_EXP 47
17165: PPUSH
17166: LD_INT 2
17168: PPUSH
17169: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17173: LD_ADDR_EXP 14
17177: PUSH
17178: LD_EXP 14
17182: PPUSH
17183: LD_EXP 47
17187: PPUSH
17188: CALL 65582 0 2
17192: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17193: LD_EXP 47
17197: PPUSH
17198: CALL_OW 122
// end else
17202: GO 17208
// SayHEmpty ( ) ;
17204: CALL 15479 0 0
// end ; ruOutpost1 :
17208: GO 18368
17210: LD_INT 169
17212: DOUBLE
17213: EQUAL
17214: IFTRUE 17218
17216: GO 17455
17218: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17219: LD_EXP 52
17223: PPUSH
17224: CALL_OW 302
17228: PUSH
17229: LD_EXP 52
17233: PUSH
17234: LD_EXP 14
17238: IN
17239: NOT
17240: AND
17241: IFFALSE 17449
// begin if hasMethanol then
17243: LD_EXP 13
17247: IFFALSE 17378
// begin Say ( Heike , DH-Kurt-1 ) ;
17249: LD_EXP 43
17253: PPUSH
17254: LD_STRING DH-Kurt-1
17256: PPUSH
17257: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17261: LD_EXP 52
17265: PPUSH
17266: LD_STRING DKs-Kurt-2
17268: PPUSH
17269: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17273: LD_EXP 44
17277: PPUSH
17278: LD_INT 169
17280: PPUSH
17281: CALL_OW 296
17285: PUSH
17286: LD_INT 10
17288: LESS
17289: PUSH
17290: LD_EXP 44
17294: PUSH
17295: LD_EXP 14
17299: IN
17300: AND
17301: IFFALSE 17376
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17303: LD_EXP 44
17307: PPUSH
17308: LD_INT 100
17310: PPUSH
17311: LD_INT 37
17313: PPUSH
17314: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17318: LD_EXP 44
17322: PPUSH
17323: LD_INT 169
17325: PPUSH
17326: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17330: LD_INT 35
17332: PPUSH
17333: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17337: LD_EXP 44
17341: PPUSH
17342: LD_INT 169
17344: PPUSH
17345: CALL_OW 296
17349: PUSH
17350: LD_INT 7
17352: LESS
17353: IFFALSE 17330
// Say ( Givi , DG-Kurt-3 ) ;
17355: LD_EXP 44
17359: PPUSH
17360: LD_STRING DG-Kurt-3
17362: PPUSH
17363: CALL_OW 88
// ComStop ( Givi ) ;
17367: LD_EXP 44
17371: PPUSH
17372: CALL_OW 141
// end ; end else
17376: GO 17406
// begin Say ( Heike , DH-Kurt-1 ) ;
17378: LD_EXP 43
17382: PPUSH
17383: LD_STRING DH-Kurt-1
17385: PPUSH
17386: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17390: LD_EXP 52
17394: PPUSH
17395: LD_STRING DKs-Kurt-2
17397: PPUSH
17398: CALL_OW 88
// SpawnAdditionalRuGuards ;
17402: CALL 3577 0 0
// end ; SetSide ( Kurt , 2 ) ;
17406: LD_EXP 52
17410: PPUSH
17411: LD_INT 2
17413: PPUSH
17414: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17418: LD_ADDR_EXP 14
17422: PUSH
17423: LD_EXP 14
17427: PPUSH
17428: LD_EXP 52
17432: PPUSH
17433: CALL 65582 0 2
17437: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17438: LD_EXP 52
17442: PPUSH
17443: CALL_OW 122
// end else
17447: GO 17453
// SayHEmpty ( ) ;
17449: CALL 15479 0 0
// end ; ruOutpostBar :
17453: GO 18368
17455: LD_INT 13
17457: DOUBLE
17458: EQUAL
17459: IFTRUE 17463
17461: GO 17509
17463: POP
// begin if not hasGuardPatrolPlan then
17464: LD_EXP 18
17468: NOT
17469: IFFALSE 17503
// begin Say ( Heike , DH-PatrolPlan ) ;
17471: LD_EXP 43
17475: PPUSH
17476: LD_STRING DH-PatrolPlan
17478: PPUSH
17479: CALL_OW 88
// hasGuardPatrolPlan := true ;
17483: LD_ADDR_EXP 18
17487: PUSH
17488: LD_INT 1
17490: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17491: LD_INT 6
17493: PPUSH
17494: LD_INT 2
17496: PPUSH
17497: CALL_OW 343
// end else
17501: GO 17507
// SayHEmpty ( ) ;
17503: CALL 15479 0 0
// end ; ruKaiaBar :
17507: GO 18368
17509: LD_INT 147
17511: DOUBLE
17512: EQUAL
17513: IFTRUE 17517
17515: GO 17664
17517: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17518: LD_EXP 48
17522: PPUSH
17523: CALL_OW 302
17527: PUSH
17528: LD_EXP 48
17532: PUSH
17533: LD_EXP 14
17537: IN
17538: NOT
17539: AND
17540: IFFALSE 17662
// begin Say ( Heike , DH-Kaia-1 ) ;
17542: LD_EXP 43
17546: PPUSH
17547: LD_STRING DH-Kaia-1
17549: PPUSH
17550: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17554: LD_EXP 48
17558: PPUSH
17559: LD_STRING DK-Kaia-2
17561: PPUSH
17562: CALL_OW 88
// if hasSniperRifle then
17566: LD_EXP 11
17570: IFFALSE 17621
// begin if IsOk ( Markov ) then
17572: LD_EXP 50
17576: PPUSH
17577: CALL_OW 302
17581: IFFALSE 17597
// Say ( Kaia , DK-Kaia-3 ) else
17583: LD_EXP 48
17587: PPUSH
17588: LD_STRING DK-Kaia-3
17590: PPUSH
17591: CALL_OW 88
17595: GO 17609
// Say ( Kaia , DK-Kaia-a-3 ) ;
17597: LD_EXP 48
17601: PPUSH
17602: LD_STRING DK-Kaia-a-3
17604: PPUSH
17605: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17609: LD_EXP 43
17613: PPUSH
17614: LD_STRING DH-Kaia-4
17616: PPUSH
17617: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17621: LD_EXP 48
17625: PPUSH
17626: LD_INT 2
17628: PPUSH
17629: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17633: LD_ADDR_EXP 14
17637: PUSH
17638: LD_EXP 14
17642: PPUSH
17643: LD_EXP 48
17647: PPUSH
17648: CALL 65582 0 2
17652: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17653: LD_EXP 48
17657: PPUSH
17658: CALL_OW 122
// end ; end ; ruWeaponsBar :
17662: GO 18368
17664: LD_INT 137
17666: DOUBLE
17667: EQUAL
17668: IFTRUE 17672
17670: GO 18367
17672: POP
// begin if hasWeapons then
17673: LD_EXP 19
17677: IFFALSE 18353
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17679: LD_ADDR_EXP 16
17683: PUSH
17684: LD_EXP 16
17688: PUSH
17689: LD_INT 137
17691: DIFF
17692: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17693: LD_ADDR_VAR 0 4
17697: PUSH
17698: LD_EXP 14
17702: PPUSH
17703: LD_INT 91
17705: PUSH
17706: LD_EXP 43
17710: PUSH
17711: LD_INT 8
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: LIST
17718: PPUSH
17719: CALL_OW 72
17723: ST_TO_ADDR
// if not heikeSquad or not tmp then
17724: LD_EXP 14
17728: NOT
17729: PUSH
17730: LD_VAR 0 4
17734: NOT
17735: OR
17736: IFFALSE 17752
// Say ( Heike , DH-Weapons-Alone ) else
17738: LD_EXP 43
17742: PPUSH
17743: LD_STRING DH-Weapons-Alone
17745: PPUSH
17746: CALL_OW 88
17750: GO 18351
// begin if not firstArmouryDialog then
17752: LD_EXP 39
17756: NOT
17757: IFFALSE 17816
// begin Say ( Heike , DH-Weapons-1 ) ;
17759: LD_EXP 43
17763: PPUSH
17764: LD_STRING DH-Weapons-1
17766: PPUSH
17767: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17771: LD_EXP 43
17775: PPUSH
17776: LD_STRING DH-Weapons-2
17778: PPUSH
17779: CALL_OW 88
// Query ( Weapons ) ;
17783: LD_STRING Weapons
17785: PPUSH
17786: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
17790: LD_INT 65
17792: PPUSH
17793: LD_INT 1
17795: PPUSH
17796: CALL_OW 424
// canEquipWeapons := true ;
17800: LD_ADDR_EXP 41
17804: PUSH
17805: LD_INT 1
17807: ST_TO_ADDR
// firstArmouryDialog := true ;
17808: LD_ADDR_EXP 39
17812: PUSH
17813: LD_INT 1
17815: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
17816: LD_EXP 8
17820: PUSH
17821: LD_EXP 48
17825: PUSH
17826: LD_VAR 0 4
17830: IN
17831: AND
17832: PUSH
17833: LD_EXP 48
17837: PPUSH
17838: CALL_OW 257
17842: PUSH
17843: LD_INT 34
17845: NONEQUAL
17846: AND
17847: IFFALSE 17993
// begin SetSide ( Kaia , 5 ) ;
17849: LD_EXP 48
17853: PPUSH
17854: LD_INT 5
17856: PPUSH
17857: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
17861: LD_EXP 48
17865: PPUSH
17866: LD_INT 137
17868: PPUSH
17869: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17873: LD_INT 35
17875: PPUSH
17876: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17880: LD_EXP 48
17884: PPUSH
17885: CALL_OW 310
17889: IFFALSE 17873
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
17891: LD_EXP 43
17895: PPUSH
17896: LD_STRING DH-Kaia-Revolver-2
17898: PPUSH
17899: CALL_OW 88
// SetClassKaiaRevolver ;
17903: CALL 1754 0 0
// hasRevolver := false ;
17907: LD_ADDR_EXP 8
17911: PUSH
17912: LD_INT 0
17914: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
17915: LD_EXP 48
17919: PPUSH
17920: LD_INT 2
17922: PPUSH
17923: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
17927: LD_EXP 48
17931: PPUSH
17932: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
17936: LD_EXP 48
17940: PPUSH
17941: CALL_OW 257
17945: PUSH
17946: LD_INT 32
17948: EQUAL
17949: PUSH
17950: LD_EXP 45
17954: PUSH
17955: LD_EXP 14
17959: IN
17960: AND
17961: PUSH
17962: LD_EXP 45
17966: PPUSH
17967: CALL_OW 255
17971: PUSH
17972: LD_INT 2
17974: EQUAL
17975: AND
17976: IFFALSE 17993
// begin giveSniperRifleToMike := true ;
17978: LD_ADDR_EXP 42
17982: PUSH
17983: LD_INT 1
17985: ST_TO_ADDR
// Query ( QSniperMike ) ;
17986: LD_STRING QSniperMike
17988: PPUSH
17989: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
17993: LD_EXP 44
17997: PUSH
17998: LD_VAR 0 4
18002: IN
18003: PUSH
18004: LD_EXP 44
18008: PPUSH
18009: CALL_OW 257
18013: PUSH
18014: LD_INT 33
18016: EQUAL
18017: AND
18018: IFFALSE 18159
// begin SetSide ( Givi , 5 ) ;
18020: LD_EXP 44
18024: PPUSH
18025: LD_INT 5
18027: PPUSH
18028: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18032: LD_EXP 44
18036: PPUSH
18037: LD_INT 137
18039: PPUSH
18040: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18044: LD_INT 35
18046: PPUSH
18047: CALL_OW 67
// until IsInUnit ( Givi ) ;
18051: LD_EXP 44
18055: PPUSH
18056: CALL_OW 310
18060: IFFALSE 18044
// Say ( Givi , DG-Weapons-3 ) ;
18062: LD_EXP 44
18066: PPUSH
18067: LD_STRING DG-Weapons-3
18069: PPUSH
18070: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18074: LD_EXP 43
18078: PPUSH
18079: LD_STRING DH-Weapons-4
18081: PPUSH
18082: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18086: LD_EXP 44
18090: PPUSH
18091: LD_STRING DG-Weapons-5
18093: PPUSH
18094: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18098: LD_EXP 44
18102: PPUSH
18103: LD_INT 11
18105: PPUSH
18106: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18110: LD_EXP 44
18114: PPUSH
18115: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18119: LD_EXP 44
18123: PPUSH
18124: LD_INT 2
18126: PPUSH
18127: CALL_OW 235
// if hasRevolver then
18131: LD_EXP 8
18135: IFFALSE 18157
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18137: LD_EXP 43
18141: PPUSH
18142: LD_STRING DH-Kaia-Revolver-1
18144: PPUSH
18145: CALL_OW 88
// heikeHasRevolver := true ;
18149: LD_ADDR_EXP 20
18153: PUSH
18154: LD_INT 1
18156: ST_TO_ADDR
// end ; end else
18157: GO 18351
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18159: LD_EXP 47
18163: PUSH
18164: LD_VAR 0 4
18168: IN
18169: PUSH
18170: LD_EXP 47
18174: PPUSH
18175: CALL_OW 257
18179: PUSH
18180: LD_INT 33
18182: EQUAL
18183: AND
18184: IFFALSE 18313
// begin SetSide ( Kamil , 5 ) ;
18186: LD_EXP 47
18190: PPUSH
18191: LD_INT 5
18193: PPUSH
18194: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18198: LD_EXP 47
18202: PPUSH
18203: LD_INT 137
18205: PPUSH
18206: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18210: LD_INT 35
18212: PPUSH
18213: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18217: LD_EXP 47
18221: PPUSH
18222: CALL_OW 310
18226: IFFALSE 18210
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18228: LD_EXP 47
18232: PPUSH
18233: LD_STRING DKam-Weapons-a-3
18235: PPUSH
18236: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18240: LD_EXP 43
18244: PPUSH
18245: LD_STRING DH-Weapons-a-4
18247: PPUSH
18248: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18252: LD_EXP 47
18256: PPUSH
18257: LD_INT 11
18259: PPUSH
18260: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18264: LD_EXP 47
18268: PPUSH
18269: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18273: LD_EXP 47
18277: PPUSH
18278: LD_INT 2
18280: PPUSH
18281: CALL_OW 235
// if hasRevolver then
18285: LD_EXP 8
18289: IFFALSE 18311
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18291: LD_EXP 43
18295: PPUSH
18296: LD_STRING DH-Kaia-Revolver-1
18298: PPUSH
18299: CALL_OW 88
// heikeHasRevolver := true ;
18303: LD_ADDR_EXP 20
18307: PUSH
18308: LD_INT 1
18310: ST_TO_ADDR
// end ; end else
18311: GO 18351
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18313: LD_EXP 43
18317: PPUSH
18318: LD_STRING DH-Weapons-Alone-2
18320: PPUSH
18321: CALL_OW 88
// if hasRevolver then
18325: LD_EXP 8
18329: IFFALSE 18351
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18331: LD_EXP 43
18335: PPUSH
18336: LD_STRING DH-Kaia-Revolver-1a
18338: PPUSH
18339: CALL_OW 88
// heikeHasRevolver := true ;
18343: LD_ADDR_EXP 20
18347: PUSH
18348: LD_INT 1
18350: ST_TO_ADDR
// end ; end ; end ; end else
18351: GO 18365
// Say ( Heike , DH-Locked ) ;
18353: LD_EXP 43
18357: PPUSH
18358: LD_STRING DH-Locked
18360: PPUSH
18361: CALL_OW 88
// end ; end ;
18365: GO 18368
18367: POP
// SetSide ( building , 3 ) ;
18368: LD_VAR 0 1
18372: PPUSH
18373: LD_INT 3
18375: PPUSH
18376: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
18380: LD_VAR 0 1
18384: PPUSH
18385: CALL 19362 0 1
// wait ( 0 0$0.3 ) ;
18389: LD_INT 10
18391: PPUSH
18392: CALL_OW 67
// ComExitBuilding ( Heike ) ;
18396: LD_EXP 43
18400: PPUSH
18401: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18405: LD_EXP 43
18409: PPUSH
18410: LD_INT 2
18412: PPUSH
18413: CALL_OW 235
// InGameOff ;
18417: CALL_OW 9
// end ;
18421: LD_VAR 0 2
18425: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18426: LD_EXP 30
18430: NOT
18431: PUSH
18432: LD_EXP 17
18436: NOT
18437: AND
18438: PUSH
18439: LD_INT 22
18441: PUSH
18442: LD_INT 5
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 21
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PPUSH
18463: CALL_OW 69
18467: PUSH
18468: LD_INT 0
18470: EQUAL
18471: AND
18472: PUSH
18473: LD_INT 22
18475: PUSH
18476: LD_INT 4
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 21
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PPUSH
18497: CALL_OW 69
18501: PUSH
18502: LD_INT 0
18504: EQUAL
18505: PUSH
18506: LD_EXP 25
18510: AND
18511: PUSH
18512: LD_EXP 25
18516: NOT
18517: OR
18518: AND
18519: IFFALSE 18551
18521: GO 18523
18523: DISABLE
// begin DialogueOn ;
18524: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18528: LD_EXP 43
18532: PPUSH
18533: LD_STRING DH-Alarm-2
18535: PPUSH
18536: CALL_OW 88
// DialogueOff ;
18540: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18544: LD_STRING M1-people-out
18546: PPUSH
18547: CALL_OW 337
// end ;
18551: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
18552: LD_EXP 45
18556: PPUSH
18557: CALL_OW 255
18561: PUSH
18562: LD_INT 2
18564: EQUAL
18565: PUSH
18566: LD_EXP 45
18570: PUSH
18571: LD_EXP 14
18575: IN
18576: AND
18577: PUSH
18578: LD_EXP 43
18582: PPUSH
18583: LD_EXP 45
18587: PPUSH
18588: CALL_OW 296
18592: PUSH
18593: LD_INT 6
18595: LESS
18596: AND
18597: PUSH
18598: LD_EXP 30
18602: NOT
18603: AND
18604: PUSH
18605: LD_EXP 42
18609: AND
18610: IFFALSE 18627
18612: GO 18614
18614: DISABLE
// SetClass ( Mike , class_hunter ) ;
18615: LD_EXP 45
18619: PPUSH
18620: LD_INT 32
18622: PPUSH
18623: CALL_OW 336
18627: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
18628: LD_EXP 41
18632: PUSH
18633: LD_EXP 40
18637: AND
18638: PUSH
18639: LD_INT 137
18641: PPUSH
18642: CALL_OW 255
18646: PUSH
18647: LD_INT 3
18649: EQUAL
18650: AND
18651: PUSH
18652: LD_EXP 14
18656: PPUSH
18657: LD_INT 95
18659: PUSH
18660: LD_INT 65
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 22
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 25
18679: PUSH
18680: LD_INT 33
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: PPUSH
18692: CALL_OW 72
18696: AND
18697: PUSH
18698: LD_INT 2
18700: PPUSH
18701: LD_INT 3
18703: PPUSH
18704: CALL_OW 81
18708: PUSH
18709: LD_INT 2
18711: EQUAL
18712: NOT
18713: AND
18714: PUSH
18715: LD_EXP 63
18719: PPUSH
18720: LD_INT 137
18722: PPUSH
18723: CALL_OW 296
18727: PUSH
18728: LD_INT 12
18730: LESS
18731: NOT
18732: AND
18733: IFFALSE 18987
18735: GO 18737
18737: DISABLE
18738: LD_INT 0
18740: PPUSH
18741: PPUSH
// begin enable ;
18742: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
18743: LD_ADDR_VAR 0 2
18747: PUSH
18748: LD_EXP 14
18752: PPUSH
18753: LD_INT 95
18755: PUSH
18756: LD_INT 65
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 22
18765: PUSH
18766: LD_INT 2
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 25
18775: PUSH
18776: LD_INT 33
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: LIST
18787: PPUSH
18788: CALL_OW 72
18792: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
18793: LD_STRING QWeapons
18795: PPUSH
18796: CALL_OW 97
18800: PUSH
18801: LD_INT 1
18803: EQUAL
18804: IFFALSE 18987
// begin for i in tmp do
18806: LD_ADDR_VAR 0 1
18810: PUSH
18811: LD_VAR 0 2
18815: PUSH
18816: FOR_IN
18817: IFFALSE 18985
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
18819: LD_INT 137
18821: PPUSH
18822: CALL_OW 313
18826: PUSH
18827: LD_INT 6
18829: EQUAL
18830: IFFALSE 18834
// continue ;
18832: GO 18816
// SetSide ( i , 3 ) ;
18834: LD_VAR 0 1
18838: PPUSH
18839: LD_INT 3
18841: PPUSH
18842: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
18846: LD_VAR 0 1
18850: PPUSH
18851: LD_INT 137
18853: PPUSH
18854: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
18858: LD_ADDR_EXP 40
18862: PUSH
18863: LD_EXP 40
18867: PPUSH
18868: CALL 66965 0 1
18872: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
18873: LD_INT 10
18875: PPUSH
18876: CALL_OW 67
// until IsInUnit ( i ) ;
18880: LD_VAR 0 1
18884: PPUSH
18885: CALL_OW 310
18889: IFFALSE 18873
// SetClass ( i , class_soldier ) ;
18891: LD_VAR 0 1
18895: PPUSH
18896: LD_INT 1
18898: PPUSH
18899: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
18903: LD_VAR 0 1
18907: PPUSH
18908: CALL_OW 122
// wait ( 0 0$1 ) ;
18912: LD_INT 35
18914: PPUSH
18915: CALL_OW 67
// until not IsInUnit ( i ) ;
18919: LD_VAR 0 1
18923: PPUSH
18924: CALL_OW 310
18928: NOT
18929: IFFALSE 18903
// SetSide ( i , 2 ) ;
18931: LD_VAR 0 1
18935: PPUSH
18936: LD_INT 2
18938: PPUSH
18939: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
18943: LD_VAR 0 1
18947: PPUSH
18948: LD_INT 191
18950: PPUSH
18951: LD_INT 126
18953: PPUSH
18954: CALL_OW 171
// if weaponsAmount = 0 then
18958: LD_EXP 40
18962: PUSH
18963: LD_INT 0
18965: EQUAL
18966: IFFALSE 18983
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
18968: LD_INT 65
18970: PPUSH
18971: LD_INT 0
18973: PPUSH
18974: CALL_OW 424
// disable ;
18978: DISABLE
// exit ;
18979: POP
18980: POP
18981: GO 18987
// end ; end ;
18983: GO 18816
18985: POP
18986: POP
// end ; end ; end_of_file
18987: PPOPN 2
18989: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
18990: LD_VAR 0 1
18994: PUSH
18995: LD_INT 3
18997: DOUBLE
18998: EQUAL
18999: IFTRUE 19003
19001: GO 19033
19003: POP
// begin repeat wait ( 0 0$1 ) ;
19004: LD_INT 35
19006: PPUSH
19007: CALL_OW 67
// CenterOnUnits ( Heike ) ;
19011: LD_EXP 43
19015: PPUSH
19016: CALL_OW 85
// until IsDying ( Heike ) ;
19020: LD_EXP 43
19024: PPUSH
19025: CALL_OW 303
19029: IFFALSE 19004
// end ; end ;
19031: GO 19034
19033: POP
// end ;
19034: PPOPN 1
19036: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
19037: LD_OWVAR 59
19041: IFFALSE 19045
// exit ;
19043: GO 19119
// if showPlaceEvent then
19045: LD_INT 4
19047: IFFALSE 19119
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
19049: LD_VAR 0 2
19053: PPUSH
19054: LD_VAR 0 3
19058: PPUSH
19059: LD_INT 2
19061: PPUSH
19062: LD_INT 6
19064: NEG
19065: PPUSH
19066: CALL_OW 330
// CenterOnXY ( x , y ) ;
19070: LD_VAR 0 2
19074: PPUSH
19075: LD_VAR 0 3
19079: PPUSH
19080: CALL_OW 84
// wait ( time ) ;
19084: LD_VAR 0 4
19088: PPUSH
19089: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
19093: LD_EXP 43
19097: PPUSH
19098: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
19102: LD_VAR 0 2
19106: PPUSH
19107: LD_VAR 0 3
19111: PPUSH
19112: LD_INT 2
19114: PPUSH
19115: CALL_OW 331
// end ; end ;
19119: PPOPN 7
19121: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
19122: LD_VAR 0 1
19126: PUSH
19127: LD_EXP 43
19131: EQUAL
19132: PUSH
19133: LD_EXP 5
19137: AND
19138: IFFALSE 19162
// if loseCounter then
19140: LD_EXP 32
19144: IFFALSE 19155
// YouLost ( HeikeNoSurrender ) else
19146: LD_STRING HeikeNoSurrender
19148: PPUSH
19149: CALL_OW 104
19153: GO 19162
// YouLost ( Heike ) ;
19155: LD_STRING Heike
19157: PPUSH
19158: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
19162: LD_VAR 0 1
19166: PPUSH
19167: CALL_OW 255
19171: PUSH
19172: LD_INT 2
19174: EQUAL
19175: PUSH
19176: LD_VAR 0 1
19180: PPUSH
19181: CALL_OW 247
19185: PUSH
19186: LD_INT 1
19188: EQUAL
19189: AND
19190: IFFALSE 19207
// loseCounter := Inc ( loseCounter ) ;
19192: LD_ADDR_EXP 32
19196: PUSH
19197: LD_EXP 32
19201: PPUSH
19202: CALL 66943 0 1
19206: ST_TO_ADDR
// end ;
19207: PPOPN 1
19209: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
19210: LD_VAR 0 1
19214: PUSH
19215: LD_INT 2
19217: EQUAL
19218: PUSH
19219: LD_VAR 0 2
19223: PUSH
19224: LD_INT 3
19226: EQUAL
19227: AND
19228: PUSH
19229: LD_VAR 0 1
19233: PUSH
19234: LD_INT 3
19236: EQUAL
19237: PUSH
19238: LD_VAR 0 2
19242: PUSH
19243: LD_INT 2
19245: EQUAL
19246: AND
19247: OR
19248: IFFALSE 19258
// isAlarm := true ;
19250: LD_ADDR_EXP 17
19254: PUSH
19255: LD_INT 1
19257: ST_TO_ADDR
// end ; end_of_file
19258: PPOPN 2
19260: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
19261: LD_INT 0
19263: PPUSH
19264: PPUSH
19265: PPUSH
// u1 := IsInUnit ( unit1 ) ;
19266: LD_ADDR_VAR 0 4
19270: PUSH
19271: LD_VAR 0 1
19275: PPUSH
19276: CALL_OW 310
19280: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
19281: LD_ADDR_VAR 0 5
19285: PUSH
19286: LD_VAR 0 2
19290: PPUSH
19291: CALL_OW 310
19295: ST_TO_ADDR
// result := u1 and u1 = u2 ;
19296: LD_ADDR_VAR 0 3
19300: PUSH
19301: LD_VAR 0 4
19305: PUSH
19306: LD_VAR 0 4
19310: PUSH
19311: LD_VAR 0 5
19315: EQUAL
19316: AND
19317: ST_TO_ADDR
// end ;
19318: LD_VAR 0 3
19322: RET
// export function ShowPlace ( x , y , time ) ; begin
19323: LD_INT 0
19325: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
19326: LD_INT 4
19328: PPUSH
19329: LD_VAR 0 1
19333: PPUSH
19334: LD_VAR 0 2
19338: PPUSH
19339: LD_VAR 0 3
19343: PPUSH
19344: LD_INT 0
19346: PPUSH
19347: LD_INT 0
19349: PPUSH
19350: LD_INT 0
19352: PPUSH
19353: CALL_OW 595
// end ;
19357: LD_VAR 0 4
19361: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
19362: LD_INT 0
19364: PPUSH
19365: PPUSH
19366: PPUSH
19367: PPUSH
19368: PPUSH
19369: PPUSH
// if not IsOk ( building ) then
19370: LD_VAR 0 1
19374: PPUSH
19375: CALL_OW 302
19379: NOT
19380: IFFALSE 19384
// exit ;
19382: GO 19631
// x := GetX ( building ) ;
19384: LD_ADDR_VAR 0 4
19388: PUSH
19389: LD_VAR 0 1
19393: PPUSH
19394: CALL_OW 250
19398: ST_TO_ADDR
// y := GetY ( building ) ;
19399: LD_ADDR_VAR 0 5
19403: PUSH
19404: LD_VAR 0 1
19408: PPUSH
19409: CALL_OW 251
19413: ST_TO_ADDR
// d := GetDir ( building ) ;
19414: LD_ADDR_VAR 0 6
19418: PUSH
19419: LD_VAR 0 1
19423: PPUSH
19424: CALL_OW 254
19428: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
19429: LD_ADDR_VAR 0 7
19433: PUSH
19434: LD_VAR 0 4
19438: PPUSH
19439: LD_VAR 0 6
19443: PPUSH
19444: LD_INT 3
19446: PPUSH
19447: CALL_OW 272
19451: PUSH
19452: LD_VAR 0 5
19456: PPUSH
19457: LD_VAR 0 6
19461: PPUSH
19462: LD_INT 3
19464: PPUSH
19465: CALL_OW 273
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
19474: LD_VAR 0 7
19478: PUSH
19479: LD_INT 1
19481: ARRAY
19482: PPUSH
19483: LD_VAR 0 7
19487: PUSH
19488: LD_INT 2
19490: ARRAY
19491: PPUSH
19492: CALL_OW 488
19496: NOT
19497: IFFALSE 19501
// exit ;
19499: GO 19631
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
19501: LD_ADDR_VAR 0 2
19505: PUSH
19506: LD_INT 92
19508: PUSH
19509: LD_VAR 0 4
19513: PUSH
19514: LD_VAR 0 5
19518: PUSH
19519: LD_INT 4
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 3
19530: PUSH
19531: LD_INT 54
19533: PUSH
19534: EMPTY
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PPUSH
19545: CALL_OW 69
19549: ST_TO_ADDR
// if not result then
19550: LD_VAR 0 2
19554: NOT
19555: IFFALSE 19559
// exit ;
19557: GO 19631
// for i in result do
19559: LD_ADDR_VAR 0 3
19563: PUSH
19564: LD_VAR 0 2
19568: PUSH
19569: FOR_IN
19570: IFFALSE 19629
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
19572: LD_VAR 0 3
19576: PPUSH
19577: LD_VAR 0 3
19581: PPUSH
19582: CALL_OW 250
19586: PPUSH
19587: LD_VAR 0 6
19591: PPUSH
19592: LD_INT 3
19594: PPUSH
19595: CALL_OW 272
19599: PPUSH
19600: LD_VAR 0 3
19604: PPUSH
19605: CALL_OW 251
19609: PPUSH
19610: LD_VAR 0 6
19614: PPUSH
19615: LD_INT 3
19617: PPUSH
19618: CALL_OW 273
19622: PPUSH
19623: CALL_OW 111
19627: GO 19569
19629: POP
19630: POP
// end ;
19631: LD_VAR 0 2
19635: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
19636: LD_INT 0
19638: PPUSH
19639: PPUSH
19640: PPUSH
19641: PPUSH
19642: PPUSH
19643: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
19644: LD_VAR 0 1
19648: PPUSH
19649: CALL_OW 302
19653: NOT
19654: PUSH
19655: LD_VAR 0 2
19659: PPUSH
19660: CALL_OW 302
19664: NOT
19665: OR
19666: PUSH
19667: LD_VAR 0 2
19671: PPUSH
19672: CALL_OW 313
19676: PUSH
19677: LD_INT 6
19679: EQUAL
19680: OR
19681: IFFALSE 19685
// exit ;
19683: GO 19902
// btype := GetBType ( building ) ;
19685: LD_ADDR_VAR 0 8
19689: PUSH
19690: LD_VAR 0 2
19694: PPUSH
19695: CALL_OW 266
19699: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
19700: LD_VAR 0 8
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: LD_INT 2
19713: PUSH
19714: LD_INT 4
19716: PUSH
19717: LD_INT 5
19719: PUSH
19720: LD_INT 3
19722: PUSH
19723: LD_INT 6
19725: PUSH
19726: LD_INT 7
19728: PUSH
19729: LD_INT 8
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: IN
19743: NOT
19744: IFFALSE 19748
// exit ;
19746: GO 19902
// x := GetX ( building ) ;
19748: LD_ADDR_VAR 0 4
19752: PUSH
19753: LD_VAR 0 2
19757: PPUSH
19758: CALL_OW 250
19762: ST_TO_ADDR
// y := GetY ( building ) ;
19763: LD_ADDR_VAR 0 5
19767: PUSH
19768: LD_VAR 0 2
19772: PPUSH
19773: CALL_OW 251
19777: ST_TO_ADDR
// d := GetDir ( building ) ;
19778: LD_ADDR_VAR 0 6
19782: PUSH
19783: LD_VAR 0 2
19787: PPUSH
19788: CALL_OW 254
19792: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
19793: LD_ADDR_VAR 0 7
19797: PUSH
19798: LD_VAR 0 4
19802: PPUSH
19803: LD_VAR 0 6
19807: PPUSH
19808: LD_INT 3
19810: PPUSH
19811: CALL_OW 272
19815: PUSH
19816: LD_VAR 0 5
19820: PPUSH
19821: LD_VAR 0 6
19825: PPUSH
19826: LD_INT 3
19828: PPUSH
19829: CALL_OW 273
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
19838: LD_VAR 0 7
19842: PUSH
19843: LD_INT 1
19845: ARRAY
19846: PPUSH
19847: LD_VAR 0 7
19851: PUSH
19852: LD_INT 2
19854: ARRAY
19855: PPUSH
19856: CALL_OW 488
19860: NOT
19861: IFFALSE 19865
// exit ;
19863: GO 19902
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
19865: LD_ADDR_VAR 0 3
19869: PUSH
19870: LD_VAR 0 1
19874: PPUSH
19875: LD_VAR 0 7
19879: PUSH
19880: LD_INT 1
19882: ARRAY
19883: PPUSH
19884: LD_VAR 0 7
19888: PUSH
19889: LD_INT 2
19891: ARRAY
19892: PPUSH
19893: CALL_OW 297
19897: PUSH
19898: LD_INT 4
19900: LESS
19901: ST_TO_ADDR
// end ;
19902: LD_VAR 0 3
19906: RET
// export function PlaceExplosives ( building ) ; begin
19907: LD_INT 0
19909: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
19910: LD_ADDR_EXP 29
19914: PUSH
19915: LD_EXP 29
19919: PPUSH
19920: LD_VAR 0 1
19924: PPUSH
19925: CALL 65582 0 2
19929: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
19930: LD_VAR 0 1
19934: PPUSH
19935: CALL_OW 250
19939: PPUSH
19940: LD_VAR 0 1
19944: PPUSH
19945: CALL_OW 251
19949: PPUSH
19950: LD_STRING PlantBomb
19952: PPUSH
19953: CALL_OW 366
// end ;
19957: LD_VAR 0 2
19961: RET
// export function CreateNature ; var i ; begin
19962: LD_INT 0
19964: PPUSH
19965: PPUSH
// PrepareFrog ;
19966: CALL 62071 0 0
// for i := 1 to 3 do
19970: LD_ADDR_VAR 0 2
19974: PUSH
19975: DOUBLE
19976: LD_INT 1
19978: DEC
19979: ST_TO_ADDR
19980: LD_INT 3
19982: PUSH
19983: FOR_TO
19984: IFFALSE 20003
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
19986: CALL_OW 44
19990: PPUSH
19991: LD_INT 24
19993: PPUSH
19994: LD_INT 0
19996: PPUSH
19997: CALL_OW 49
20001: GO 19983
20003: POP
20004: POP
// end ;
20005: LD_VAR 0 1
20009: RET
// export function MarkBuilding ( building , marker ) ; begin
20010: LD_INT 0
20012: PPUSH
// if marker then
20013: LD_VAR 0 2
20017: IFFALSE 20064
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
20019: LD_VAR 0 1
20023: PPUSH
20024: CALL_OW 250
20028: PPUSH
20029: LD_VAR 0 1
20033: PPUSH
20034: CALL_OW 251
20038: PPUSH
20039: LD_INT 2
20041: PPUSH
20042: LD_INT 3
20044: NEG
20045: PPUSH
20046: CALL_OW 330
// SetBName ( building , target ) ;
20050: LD_VAR 0 1
20054: PPUSH
20055: LD_STRING target
20057: PPUSH
20058: CALL_OW 500
// end else
20062: GO 20103
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
20064: LD_VAR 0 1
20068: PPUSH
20069: CALL_OW 250
20073: PPUSH
20074: LD_VAR 0 1
20078: PPUSH
20079: CALL_OW 251
20083: PPUSH
20084: LD_INT 2
20086: PPUSH
20087: CALL_OW 331
// SetBName ( building ,  ) ;
20091: LD_VAR 0 1
20095: PPUSH
20096: LD_STRING 
20098: PPUSH
20099: CALL_OW 500
// end ; end ; end_of_file
20103: LD_VAR 0 3
20107: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
20108: LD_INT 0
20110: PPUSH
// lockerCodeValid := false ;
20111: LD_ADDR_EXP 69
20115: PUSH
20116: LD_INT 0
20118: ST_TO_ADDR
// if not step then
20119: LD_LOC 1
20123: NOT
20124: IFFALSE 20134
// step := 1 ;
20126: LD_ADDR_LOC 1
20130: PUSH
20131: LD_INT 1
20133: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
20134: LD_STRING HEscape
20136: PUSH
20137: LD_LOC 1
20141: STR
20142: PPUSH
20143: CALL_OW 97
20147: PUSH
20148: LD_INT 1
20150: DOUBLE
20151: EQUAL
20152: IFTRUE 20156
20154: GO 20163
20156: POP
// LockerMinigameSearch ; 2 :
20157: CALL 20196 0 0
20161: GO 20179
20163: LD_INT 2
20165: DOUBLE
20166: EQUAL
20167: IFTRUE 20171
20169: GO 20178
20171: POP
// LockerMinigameSetCode ; end ;
20172: CALL 20270 0 0
20176: GO 20179
20178: POP
// if lockerCodeValid then
20179: LD_EXP 69
20183: IFFALSE 20187
// exit ;
20185: GO 20191
// StartLockerMinigame ;
20187: CALL 20108 0 0
// end ;
20191: LD_VAR 0 1
20195: RET
// function LockerMinigameSearch ; begin
20196: LD_INT 0
20198: PPUSH
// if code then
20199: LD_LOC 2
20203: IFFALSE 20219
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
20205: LD_EXP 43
20209: PPUSH
20210: LD_STRING DH-Escape-3-Hint-0
20212: PPUSH
20213: CALL_OW 88
// exit ;
20217: GO 20265
// end ; Randomize ;
20219: CALL_OW 10
// code := rand ( 1 , 5 ) ;
20223: LD_ADDR_LOC 2
20227: PUSH
20228: LD_INT 1
20230: PPUSH
20231: LD_INT 5
20233: PPUSH
20234: CALL_OW 12
20238: ST_TO_ADDR
// step := 2 ;
20239: LD_ADDR_LOC 1
20243: PUSH
20244: LD_INT 2
20246: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
20247: LD_EXP 43
20251: PPUSH
20252: LD_STRING DH-Escape-3-Hint-
20254: PUSH
20255: LD_LOC 2
20259: STR
20260: PPUSH
20261: CALL_OW 88
// end ;
20265: LD_VAR 0 1
20269: RET
// function LockerMinigameSetCode ; begin
20270: LD_INT 0
20272: PPUSH
// if not code then
20273: LD_LOC 2
20277: NOT
20278: IFFALSE 20288
// code := 0 ;
20280: LD_ADDR_LOC 2
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// lockerBusy := true ;
20288: LD_ADDR_EXP 70
20292: PUSH
20293: LD_INT 1
20295: ST_TO_ADDR
// InGameOff ;
20296: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
20300: LD_STRING initLockerMinigame("
20302: PUSH
20303: LD_LOC 2
20307: STR
20308: PUSH
20309: LD_STRING ")
20311: STR
20312: PPUSH
20313: CALL_OW 559
// step := 3 ;
20317: LD_ADDR_LOC 1
20321: PUSH
20322: LD_INT 3
20324: ST_TO_ADDR
// repeat wait ( 1 ) ;
20325: LD_INT 1
20327: PPUSH
20328: CALL_OW 67
// until not lockerBusy ;
20332: LD_EXP 70
20336: NOT
20337: IFFALSE 20325
// InGameOn ;
20339: CALL_OW 8
// if not lockerCodeValid then
20343: LD_EXP 69
20347: NOT
20348: IFFALSE 20374
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
20350: LD_EXP 43
20354: PPUSH
20355: LD_STRING DH-Escape-3-Fail-
20357: PUSH
20358: LD_INT 1
20360: PPUSH
20361: LD_INT 2
20363: PPUSH
20364: CALL_OW 12
20368: STR
20369: PPUSH
20370: CALL_OW 88
// end ; end_of_file
20374: LD_VAR 0 1
20378: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
20379: LD_VAR 0 2
20383: PUSH
20384: LD_INT 102
20386: EQUAL
20387: IFFALSE 20409
// begin lockerBusy := false ;
20389: LD_ADDR_EXP 70
20393: PUSH
20394: LD_INT 0
20396: ST_TO_ADDR
// lockerCodeValid := p3 ;
20397: LD_ADDR_EXP 69
20401: PUSH
20402: LD_VAR 0 3
20406: ST_TO_ADDR
// end else
20407: GO 20463
// if p2 = 103 then
20409: LD_VAR 0 2
20413: PUSH
20414: LD_INT 103
20416: EQUAL
20417: IFFALSE 20429
// begin weatherBusy := false ;
20419: LD_ADDR_EXP 37
20423: PUSH
20424: LD_INT 0
20426: ST_TO_ADDR
// end else
20427: GO 20463
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
20429: LD_VAR 0 1
20433: PPUSH
20434: LD_VAR 0 2
20438: PPUSH
20439: LD_VAR 0 3
20443: PPUSH
20444: LD_VAR 0 4
20448: PPUSH
20449: LD_VAR 0 5
20453: PPUSH
20454: LD_VAR 0 6
20458: PPUSH
20459: CALL 69690 0 6
// end ;
20463: PPOPN 6
20465: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
20466: LD_STRING killGameMusic();
20468: PPUSH
20469: CALL_OW 559
// SOS_MapStart ( ) ;
20473: CALL 69594 0 0
// end ; end_of_file
20477: PPOPN 1
20479: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
20480: LD_EXP 17
20484: NOT
20485: PUSH
20486: LD_EXP 68
20490: AND
20491: IFFALSE 20901
20493: GO 20495
20495: DISABLE
20496: LD_INT 0
20498: PPUSH
20499: PPUSH
20500: PPUSH
20501: PPUSH
20502: PPUSH
// begin enable ;
20503: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
20504: LD_ADDR_VAR 0 3
20508: PUSH
20509: LD_INT 26
20511: PUSH
20512: LD_INT 27
20514: PUSH
20515: LD_INT 28
20517: PUSH
20518: LD_INT 29
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 30
20529: PUSH
20530: LD_INT 31
20532: PUSH
20533: LD_INT 32
20535: PUSH
20536: LD_INT 33
20538: PUSH
20539: LD_INT 34
20541: PUSH
20542: LD_INT 35
20544: PUSH
20545: LD_INT 36
20547: PUSH
20548: LD_INT 37
20550: PUSH
20551: LD_INT 38
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 39
20567: PUSH
20568: LD_INT 40
20570: PUSH
20571: LD_INT 41
20573: PUSH
20574: LD_INT 42
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 43
20585: PUSH
20586: LD_INT 44
20588: PUSH
20589: LD_INT 45
20591: PUSH
20592: LD_INT 46
20594: PUSH
20595: LD_INT 47
20597: PUSH
20598: LD_INT 46
20600: PUSH
20601: LD_INT 45
20603: PUSH
20604: LD_INT 44
20606: PUSH
20607: LD_INT 43
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: ST_TO_ADDR
// for i in ruPatrol do
20627: LD_ADDR_VAR 0 1
20631: PUSH
20632: LD_EXP 68
20636: PUSH
20637: FOR_IN
20638: IFFALSE 20899
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
20640: LD_ADDR_VAR 0 5
20644: PUSH
20645: LD_INT 22
20647: PUSH
20648: LD_INT 2
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 21
20657: PUSH
20658: LD_INT 1
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 91
20667: PUSH
20668: LD_VAR 0 1
20672: PUSH
20673: LD_INT 7
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: LIST
20685: PPUSH
20686: CALL_OW 69
20690: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
20691: LD_INT 2
20693: PPUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 292
20703: PUSH
20704: LD_VAR 0 5
20708: AND
20709: IFFALSE 20785
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
20711: LD_EXP 30
20715: PUSH
20716: LD_VAR 0 1
20720: PPUSH
20721: LD_EXP 63
20725: PPUSH
20726: CALL_OW 296
20730: PUSH
20731: LD_INT 16
20733: LESS
20734: AND
20735: PUSH
20736: LD_EXP 38
20740: OR
20741: IFFALSE 20745
// continue ;
20743: GO 20637
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
20745: LD_VAR 0 1
20749: PPUSH
20750: LD_VAR 0 5
20754: PPUSH
20755: LD_VAR 0 1
20759: PPUSH
20760: CALL_OW 74
20764: PPUSH
20765: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
20769: LD_VAR 0 1
20773: PPUSH
20774: LD_VAR 0 5
20778: PPUSH
20779: CALL 20904 0 2
// continue ;
20783: GO 20637
// end ; if HasTask ( i ) then
20785: LD_VAR 0 1
20789: PPUSH
20790: CALL_OW 314
20794: IFFALSE 20798
// continue ;
20796: GO 20637
// tag := GetTag ( i ) ;
20798: LD_ADDR_VAR 0 4
20802: PUSH
20803: LD_VAR 0 1
20807: PPUSH
20808: CALL_OW 110
20812: ST_TO_ADDR
// if not tag then
20813: LD_VAR 0 4
20817: NOT
20818: IFFALSE 20831
// begin ComHold ( i ) ;
20820: LD_VAR 0 1
20824: PPUSH
20825: CALL_OW 140
// continue ;
20829: GO 20637
// end ; for j := 1 to points [ tag ] do
20831: LD_ADDR_VAR 0 2
20835: PUSH
20836: DOUBLE
20837: LD_INT 1
20839: DEC
20840: ST_TO_ADDR
20841: LD_VAR 0 3
20845: PUSH
20846: LD_VAR 0 4
20850: ARRAY
20851: PUSH
20852: FOR_TO
20853: IFFALSE 20895
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
20855: LD_VAR 0 1
20859: PPUSH
20860: LD_VAR 0 3
20864: PUSH
20865: LD_VAR 0 4
20869: ARRAY
20870: PUSH
20871: LD_VAR 0 2
20875: ARRAY
20876: PPUSH
20877: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
20881: LD_VAR 0 1
20885: PPUSH
20886: LD_INT 70
20888: PPUSH
20889: CALL_OW 202
// end ;
20893: GO 20852
20895: POP
20896: POP
// end ;
20897: GO 20637
20899: POP
20900: POP
// end ;
20901: PPOPN 5
20903: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
20904: LD_INT 0
20906: PPUSH
20907: PPUSH
20908: PPUSH
// if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
20909: LD_VAR 0 2
20913: PPUSH
20914: LD_INT 23
20916: PUSH
20917: LD_INT 3
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PPUSH
20924: CALL_OW 72
20928: PUSH
20929: LD_VAR 0 2
20933: PPUSH
20934: LD_INT 95
20936: PUSH
20937: LD_INT 61
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PPUSH
20944: CALL_OW 72
20948: OR
20949: IFFALSE 20953
// exit ;
20951: GO 22041
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
20953: LD_VAR 0 2
20957: PPUSH
20958: LD_INT 2
20960: PUSH
20961: LD_INT 25
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 25
20973: PUSH
20974: LD_INT 11
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 25
20983: PUSH
20984: LD_INT 34
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 25
20993: PUSH
20994: LD_INT 32
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: PUSH
21008: EMPTY
21009: LIST
21010: PPUSH
21011: CALL_OW 72
21015: IFFALSE 21128
// begin blockPatrolThread := true ;
21017: LD_ADDR_EXP 38
21021: PUSH
21022: LD_INT 1
21024: ST_TO_ADDR
// DialogueOn ;
21025: CALL_OW 6
// case GetSex ( guard ) of sex_male :
21029: LD_VAR 0 1
21033: PPUSH
21034: CALL_OW 258
21038: PUSH
21039: LD_INT 1
21041: DOUBLE
21042: EQUAL
21043: IFTRUE 21047
21045: GO 21062
21047: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21048: LD_VAR 0 1
21052: PPUSH
21053: LD_STRING DRum-Fail-3
21055: PPUSH
21056: CALL_OW 88
21060: GO 21086
21062: LD_INT 2
21064: DOUBLE
21065: EQUAL
21066: IFTRUE 21070
21068: GO 21085
21070: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
21071: LD_VAR 0 1
21075: PPUSH
21076: LD_STRING DRuf-Fail-3
21078: PPUSH
21079: CALL_OW 88
21083: GO 21086
21085: POP
// DialogueOff ;
21086: CALL_OW 7
// wait ( 0 0$5 ) ;
21090: LD_INT 175
21092: PPUSH
21093: CALL_OW 67
// if IsOk ( guard ) then
21097: LD_VAR 0 1
21101: PPUSH
21102: CALL_OW 302
21106: IFFALSE 21118
// isAlarm := true else
21108: LD_ADDR_EXP 17
21112: PUSH
21113: LD_INT 1
21115: ST_TO_ADDR
21116: GO 21126
// blockPatrolThread := false ;
21118: LD_ADDR_EXP 38
21122: PUSH
21123: LD_INT 0
21125: ST_TO_ADDR
// exit ;
21126: GO 22041
// end ; DialogueOn ;
21128: CALL_OW 6
// blockPatrolThread := true ;
21132: LD_ADDR_EXP 38
21136: PUSH
21137: LD_INT 1
21139: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
21140: LD_VAR 0 1
21144: PPUSH
21145: CALL_OW 87
// if not Heike in units then
21149: LD_EXP 43
21153: PUSH
21154: LD_VAR 0 2
21158: IN
21159: NOT
21160: IFFALSE 21510
// begin case GetSex ( guard ) of sex_male :
21162: LD_VAR 0 1
21166: PPUSH
21167: CALL_OW 258
21171: PUSH
21172: LD_INT 1
21174: DOUBLE
21175: EQUAL
21176: IFTRUE 21180
21178: GO 21195
21180: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
21181: LD_VAR 0 1
21185: PPUSH
21186: LD_STRING DRum-Guard-1
21188: PPUSH
21189: CALL_OW 88
21193: GO 21219
21195: LD_INT 2
21197: DOUBLE
21198: EQUAL
21199: IFTRUE 21203
21201: GO 21218
21203: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
21204: LD_VAR 0 1
21208: PPUSH
21209: LD_STRING DRuf-Guard-1
21211: PPUSH
21212: CALL_OW 88
21216: GO 21219
21218: POP
// case Query ( SurrenderInfoPeople ) of 1 :
21219: LD_STRING SurrenderInfoPeople
21221: PPUSH
21222: CALL_OW 97
21226: PUSH
21227: LD_INT 1
21229: DOUBLE
21230: EQUAL
21231: IFTRUE 21235
21233: GO 21336
21235: POP
// begin Query ( CaughtSquadInfo ) ;
21236: LD_STRING CaughtSquadInfo
21238: PPUSH
21239: CALL_OW 97
// for i in units do
21243: LD_ADDR_VAR 0 4
21247: PUSH
21248: LD_VAR 0 2
21252: PUSH
21253: FOR_IN
21254: IFFALSE 21311
// begin if Carry ( i ) then
21256: LD_VAR 0 4
21260: PPUSH
21261: CALL_OW 281
21265: IFFALSE 21282
// SetCargo ( i , mat_cans , 0 ) ;
21267: LD_VAR 0 4
21271: PPUSH
21272: LD_INT 1
21274: PPUSH
21275: LD_INT 0
21277: PPUSH
21278: CALL_OW 290
// SetSide ( i , 5 ) ;
21282: LD_VAR 0 4
21286: PPUSH
21287: LD_INT 5
21289: PPUSH
21290: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
21294: LD_VAR 0 4
21298: PPUSH
21299: LD_INT 113
21301: PPUSH
21302: LD_INT 17
21304: PPUSH
21305: CALL_OW 111
// end ;
21309: GO 21253
21311: POP
21312: POP
// ComMoveXY ( guard , 113 , 17 ) ;
21313: LD_VAR 0 1
21317: PPUSH
21318: LD_INT 113
21320: PPUSH
21321: LD_INT 17
21323: PPUSH
21324: CALL_OW 111
// DialogueOff ;
21328: CALL_OW 7
// exit ;
21332: GO 22041
// end ; 2 :
21334: GO 21510
21336: LD_INT 2
21338: DOUBLE
21339: EQUAL
21340: IFTRUE 21344
21342: GO 21509
21344: POP
// begin DialogueOff ;
21345: CALL_OW 7
// wait ( 0 0$2 ) ;
21349: LD_INT 70
21351: PPUSH
21352: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21356: LD_INT 6
21358: PPUSH
21359: LD_INT 2
21361: PPUSH
21362: LD_INT 2
21364: PPUSH
21365: LD_INT 1
21367: PPUSH
21368: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
21372: LD_VAR 0 1
21376: PPUSH
21377: LD_VAR 0 2
21381: PUSH
21382: LD_INT 1
21384: ARRAY
21385: PPUSH
21386: CALL_OW 115
// case GetSex ( guard ) of sex_male :
21390: LD_VAR 0 1
21394: PPUSH
21395: CALL_OW 258
21399: PUSH
21400: LD_INT 1
21402: DOUBLE
21403: EQUAL
21404: IFTRUE 21408
21406: GO 21423
21408: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21409: LD_VAR 0 1
21413: PPUSH
21414: LD_STRING DRum-Fail-3
21416: PPUSH
21417: CALL_OW 88
21421: GO 21447
21423: LD_INT 2
21425: DOUBLE
21426: EQUAL
21427: IFTRUE 21431
21429: GO 21446
21431: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
21432: LD_VAR 0 1
21436: PPUSH
21437: LD_STRING DRum-Fail-3
21439: PPUSH
21440: CALL_OW 88
21444: GO 21447
21446: POP
// wait ( 0 0$5 ) ;
21447: LD_INT 175
21449: PPUSH
21450: CALL_OW 67
// if IsOk ( guard ) then
21454: LD_VAR 0 1
21458: PPUSH
21459: CALL_OW 302
21463: IFFALSE 21475
// isAlarm := true else
21465: LD_ADDR_EXP 17
21469: PUSH
21470: LD_INT 1
21472: ST_TO_ADDR
21473: GO 21507
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
21475: LD_INT 6
21477: PPUSH
21478: LD_INT 2
21480: PPUSH
21481: LD_INT 0
21483: PPUSH
21484: LD_INT 1
21486: PPUSH
21487: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
21491: LD_INT 3
21493: PPUSH
21494: LD_INT 2
21496: PPUSH
21497: LD_INT 0
21499: PPUSH
21500: LD_INT 1
21502: PPUSH
21503: CALL_OW 80
// end ; end ; end ;
21507: GO 21510
21509: POP
// end ; if Carry ( Heike ) then
21510: LD_EXP 43
21514: PPUSH
21515: CALL_OW 281
21519: IFFALSE 21595
// begin case GetSex ( guard ) of sex_male :
21521: LD_VAR 0 1
21525: PPUSH
21526: CALL_OW 258
21530: PUSH
21531: LD_INT 1
21533: DOUBLE
21534: EQUAL
21535: IFTRUE 21539
21537: GO 21554
21539: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
21540: LD_VAR 0 1
21544: PPUSH
21545: LD_STRING DRum-FoodFail-1
21547: PPUSH
21548: CALL_OW 88
21552: GO 21578
21554: LD_INT 2
21556: DOUBLE
21557: EQUAL
21558: IFTRUE 21562
21560: GO 21577
21562: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
21563: LD_VAR 0 1
21567: PPUSH
21568: LD_STRING DRuf-FoodFail-2
21570: PPUSH
21571: CALL_OW 88
21575: GO 21578
21577: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
21578: LD_EXP 43
21582: PPUSH
21583: LD_INT 1
21585: PPUSH
21586: LD_INT 0
21588: PPUSH
21589: CALL_OW 290
// end else
21593: GO 21652
// begin case GetSex ( guard ) of sex_male :
21595: LD_VAR 0 1
21599: PPUSH
21600: CALL_OW 258
21604: PUSH
21605: LD_INT 1
21607: DOUBLE
21608: EQUAL
21609: IFTRUE 21613
21611: GO 21628
21613: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
21614: LD_VAR 0 1
21618: PPUSH
21619: LD_STRING DRum-Seen-1
21621: PPUSH
21622: CALL_OW 88
21626: GO 21652
21628: LD_INT 2
21630: DOUBLE
21631: EQUAL
21632: IFTRUE 21636
21634: GO 21651
21636: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
21637: LD_VAR 0 1
21641: PPUSH
21642: LD_STRING DRuf-Seen-1
21644: PPUSH
21645: CALL_OW 88
21649: GO 21652
21651: POP
// end ; alone := ( units = 1 ) ;
21652: LD_ADDR_VAR 0 5
21656: PUSH
21657: LD_VAR 0 2
21661: PUSH
21662: LD_INT 1
21664: EQUAL
21665: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
21666: LD_STRING SurrenderInfo
21668: PPUSH
21669: CALL_OW 97
21673: PUSH
21674: LD_INT 1
21676: DOUBLE
21677: EQUAL
21678: IFTRUE 21682
21680: GO 21851
21682: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
21683: LD_INT 23
21685: PPUSH
21686: CALL_OW 87
// RemoveUnit ( Heike ) ;
21690: LD_EXP 43
21694: PPUSH
21695: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
21699: LD_EXP 43
21703: PPUSH
21704: LD_INT 23
21706: PPUSH
21707: CALL_OW 52
// if not alone then
21711: LD_VAR 0 5
21715: NOT
21716: IFFALSE 21771
// for i in units diff Heike do
21718: LD_ADDR_VAR 0 4
21722: PUSH
21723: LD_VAR 0 2
21727: PUSH
21728: LD_EXP 43
21732: DIFF
21733: PUSH
21734: FOR_IN
21735: IFFALSE 21769
// begin RemoveUnit ( i ) ;
21737: LD_VAR 0 4
21741: PPUSH
21742: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
21746: LD_VAR 0 4
21750: PPUSH
21751: LD_INT 114
21753: PPUSH
21754: LD_INT 17
21756: PPUSH
21757: LD_INT 10
21759: PPUSH
21760: LD_INT 0
21762: PPUSH
21763: CALL_OW 50
// end ;
21767: GO 21734
21769: POP
21770: POP
// wait ( 0 0$0.3 ) ;
21771: LD_INT 10
21773: PPUSH
21774: CALL_OW 67
// if alone then
21778: LD_VAR 0 5
21782: IFFALSE 21793
// Query ( CaughtInfoAlone ) else
21784: LD_STRING CaughtInfoAlone
21786: PPUSH
21787: CALL_OW 97
21791: GO 21800
// Query ( CaughtInfo ) ;
21793: LD_STRING CaughtInfo
21795: PPUSH
21796: CALL_OW 97
// wait ( 0 0$1 ) ;
21800: LD_INT 35
21802: PPUSH
21803: CALL_OW 67
// StartLockerMinigame ;
21807: CALL 20108 0 0
// Say ( Heike , DH-Reset ) ;
21811: LD_EXP 43
21815: PPUSH
21816: LD_STRING DH-Reset
21818: PPUSH
21819: CALL_OW 88
// DialogueOff ;
21823: CALL_OW 7
// InGameOff ;
21827: CALL_OW 9
// ComExitBuilding ( Heike ) ;
21831: LD_EXP 43
21835: PPUSH
21836: CALL_OW 122
// ComFree ( guard ) ;
21840: LD_VAR 0 1
21844: PPUSH
21845: CALL_OW 139
// end ; 2 :
21849: GO 22033
21851: LD_INT 2
21853: DOUBLE
21854: EQUAL
21855: IFTRUE 21859
21857: GO 22032
21859: POP
// begin Say ( Heike , DH-Guard-2 ) ;
21860: LD_EXP 43
21864: PPUSH
21865: LD_STRING DH-Guard-2
21867: PPUSH
21868: CALL_OW 88
// DialogueOff ;
21872: CALL_OW 7
// wait ( 0 0$2 ) ;
21876: LD_INT 70
21878: PPUSH
21879: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21883: LD_INT 6
21885: PPUSH
21886: LD_INT 2
21888: PPUSH
21889: LD_INT 2
21891: PPUSH
21892: LD_INT 1
21894: PPUSH
21895: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
21899: LD_VAR 0 1
21903: PPUSH
21904: LD_EXP 43
21908: PPUSH
21909: CALL_OW 115
// case GetSex ( guard ) of sex_male :
21913: LD_VAR 0 1
21917: PPUSH
21918: CALL_OW 258
21922: PUSH
21923: LD_INT 1
21925: DOUBLE
21926: EQUAL
21927: IFTRUE 21931
21929: GO 21946
21931: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21932: LD_VAR 0 1
21936: PPUSH
21937: LD_STRING DRum-Fail-3
21939: PPUSH
21940: CALL_OW 88
21944: GO 21970
21946: LD_INT 2
21948: DOUBLE
21949: EQUAL
21950: IFTRUE 21954
21952: GO 21969
21954: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
21955: LD_VAR 0 1
21959: PPUSH
21960: LD_STRING DRum-Fail-3
21962: PPUSH
21963: CALL_OW 88
21967: GO 21970
21969: POP
// wait ( 0 0$5 ) ;
21970: LD_INT 175
21972: PPUSH
21973: CALL_OW 67
// if IsOk ( guard ) then
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 302
21986: IFFALSE 21998
// isAlarm := true else
21988: LD_ADDR_EXP 17
21992: PUSH
21993: LD_INT 1
21995: ST_TO_ADDR
21996: GO 22030
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
21998: LD_INT 6
22000: PPUSH
22001: LD_INT 2
22003: PPUSH
22004: LD_INT 0
22006: PPUSH
22007: LD_INT 1
22009: PPUSH
22010: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22014: LD_INT 3
22016: PPUSH
22017: LD_INT 2
22019: PPUSH
22020: LD_INT 0
22022: PPUSH
22023: LD_INT 1
22025: PPUSH
22026: CALL_OW 80
// end ; end ; end ;
22030: GO 22033
22032: POP
// blockPatrolThread := false ;
22033: LD_ADDR_EXP 38
22037: PUSH
22038: LD_INT 0
22040: ST_TO_ADDR
// end ;
22041: LD_VAR 0 3
22045: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
22046: LD_EXP 14
22050: PPUSH
22051: LD_INT 22
22053: PUSH
22054: LD_INT 5
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 3
22063: PUSH
22064: LD_INT 101
22066: PUSH
22067: LD_INT 6
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 92
22080: PUSH
22081: LD_INT 113
22083: PUSH
22084: LD_INT 16
22086: PUSH
22087: LD_INT 12
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 91
22098: PUSH
22099: LD_EXP 43
22103: PUSH
22104: LD_INT 6
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: PPUSH
22118: CALL_OW 72
22122: PUSH
22123: LD_EXP 30
22127: NOT
22128: AND
22129: IFFALSE 22234
22131: GO 22133
22133: DISABLE
22134: LD_INT 0
22136: PPUSH
// begin enable ;
22137: ENABLE
// DialogueOn ;
22138: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
22142: LD_EXP 43
22146: PPUSH
22147: LD_STRING DH-Join-
22149: PUSH
22150: LD_INT 1
22152: PPUSH
22153: LD_INT 3
22155: PPUSH
22156: CALL_OW 12
22160: STR
22161: PPUSH
22162: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
22166: LD_ADDR_VAR 0 1
22170: PUSH
22171: LD_EXP 14
22175: PPUSH
22176: LD_INT 22
22178: PUSH
22179: LD_INT 5
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 91
22188: PUSH
22189: LD_EXP 43
22193: PUSH
22194: LD_INT 10
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PPUSH
22206: CALL_OW 72
22210: PUSH
22211: FOR_IN
22212: IFFALSE 22228
// SetSide ( i , 2 ) ;
22214: LD_VAR 0 1
22218: PPUSH
22219: LD_INT 2
22221: PPUSH
22222: CALL_OW 235
22226: GO 22211
22228: POP
22229: POP
// DialogueOff ;
22230: CALL_OW 7
// end ; end_of_file
22234: PPOPN 1
22236: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
22237: LD_EXP 17
22241: PUSH
22242: LD_EXP 5
22246: AND
22247: IFFALSE 22548
22249: GO 22251
22251: DISABLE
22252: LD_INT 0
22254: PPUSH
22255: PPUSH
22256: PPUSH
// begin DialogueOn ;
22257: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
22261: LD_EXP 43
22265: PPUSH
22266: LD_STRING DH-Alarm-1
22268: PPUSH
22269: CALL_OW 88
// DialogueOff ;
22273: CALL_OW 7
// PlaySoundXY ( - 1 , - 1 , alarm ) ;
22277: LD_INT 1
22279: NEG
22280: PPUSH
22281: LD_INT 1
22283: NEG
22284: PPUSH
22285: LD_STRING alarm
22287: PPUSH
22288: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
22292: LD_INT 3
22294: PPUSH
22295: LD_INT 2
22297: PPUSH
22298: LD_INT 2
22300: PPUSH
22301: LD_INT 1
22303: PPUSH
22304: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22308: LD_INT 6
22310: PPUSH
22311: LD_INT 2
22313: PPUSH
22314: LD_INT 2
22316: PPUSH
22317: LD_INT 1
22319: PPUSH
22320: CALL_OW 80
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
22324: LD_ADDR_VAR 0 2
22328: PUSH
22329: LD_INT 107
22331: PUSH
22332: LD_INT 39
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 143
22341: PUSH
22342: LD_INT 33
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 180
22351: PUSH
22352: LD_INT 115
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 96
22361: PUSH
22362: LD_INT 90
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 59
22371: PUSH
22372: LD_INT 52
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 16
22381: PUSH
22382: LD_INT 15
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 90
22391: PUSH
22392: LD_INT 120
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
22408: LD_ADDR_VAR 0 3
22412: PUSH
22413: LD_INT 22
22415: PUSH
22416: LD_INT 6
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 25
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PPUSH
22437: CALL_OW 69
22441: ST_TO_ADDR
// for i in tmp do
22442: LD_ADDR_VAR 0 1
22446: PUSH
22447: LD_VAR 0 3
22451: PUSH
22452: FOR_IN
22453: IFFALSE 22521
// begin ComExit ( i ) ;
22455: LD_VAR 0 1
22459: PPUSH
22460: CALL 65980 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
22464: LD_VAR 0 1
22468: PPUSH
22469: LD_VAR 0 2
22473: PUSH
22474: LD_VAR 0 1
22478: PUSH
22479: LD_INT 7
22481: MOD
22482: PUSH
22483: LD_INT 1
22485: PLUS
22486: ARRAY
22487: PUSH
22488: LD_INT 1
22490: ARRAY
22491: PPUSH
22492: LD_VAR 0 2
22496: PUSH
22497: LD_VAR 0 1
22501: PUSH
22502: LD_INT 7
22504: MOD
22505: PUSH
22506: LD_INT 1
22508: PLUS
22509: ARRAY
22510: PUSH
22511: LD_INT 2
22513: ARRAY
22514: PPUSH
22515: CALL_OW 174
// end ;
22519: GO 22452
22521: POP
22522: POP
// Explode ;
22523: CALL 22551 0 0
// wait ( 0 0$45 ) ;
22527: LD_INT 1575
22529: PPUSH
22530: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
22534: LD_VAR 0 3
22538: PPUSH
22539: LD_EXP 43
22543: PPUSH
22544: CALL_OW 175
// end ;
22548: PPOPN 3
22550: END
// export function Explode ; var i , x , y , j ; begin
22551: LD_INT 0
22553: PPUSH
22554: PPUSH
22555: PPUSH
22556: PPUSH
22557: PPUSH
// if hasExplosionsInFactory then
22558: LD_EXP 7
22562: IFFALSE 22582
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
22564: LD_ADDR_EXP 29
22568: PUSH
22569: LD_EXP 29
22573: PPUSH
22574: LD_INT 61
22576: PPUSH
22577: CALL 65582 0 2
22581: ST_TO_ADDR
// if explosivePlantedList then
22582: LD_EXP 29
22586: IFFALSE 22734
// begin for i in explosivePlantedList do
22588: LD_ADDR_VAR 0 2
22592: PUSH
22593: LD_EXP 29
22597: PUSH
22598: FOR_IN
22599: IFFALSE 22702
// begin x := GetX ( i ) ;
22601: LD_ADDR_VAR 0 3
22605: PUSH
22606: LD_VAR 0 2
22610: PPUSH
22611: CALL_OW 250
22615: ST_TO_ADDR
// y := GetY ( i ) ;
22616: LD_ADDR_VAR 0 4
22620: PUSH
22621: LD_VAR 0 2
22625: PPUSH
22626: CALL_OW 251
22630: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
22631: LD_ADDR_VAR 0 5
22635: PUSH
22636: LD_INT 1
22638: PUSH
22639: LD_INT 3
22641: PUSH
22642: LD_INT 5
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: LIST
22649: PUSH
22650: FOR_IN
22651: IFFALSE 22698
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
22653: LD_VAR 0 3
22657: PPUSH
22658: LD_VAR 0 5
22662: PPUSH
22663: LD_INT 2
22665: PPUSH
22666: CALL_OW 272
22670: PPUSH
22671: LD_VAR 0 4
22675: PPUSH
22676: LD_VAR 0 5
22680: PPUSH
22681: LD_INT 2
22683: PPUSH
22684: CALL_OW 273
22688: PPUSH
22689: LD_INT 1
22691: PPUSH
22692: CALL_OW 453
22696: GO 22650
22698: POP
22699: POP
// end ;
22700: GO 22598
22702: POP
22703: POP
// Say ( Heike , DH-End-2 ) ;
22704: LD_EXP 43
22708: PPUSH
22709: LD_STRING DH-End-2
22711: PPUSH
22712: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
22716: LD_INT 175
22718: PUSH
22719: LD_EXP 29
22723: PPUSH
22724: CALL 30216 0 1
22728: MUL
22729: PPUSH
22730: CALL_OW 67
// end ; if not isAlarm then
22734: LD_EXP 17
22738: NOT
22739: IFFALSE 22749
// isAlarm := true ;
22741: LD_ADDR_EXP 17
22745: PUSH
22746: LD_INT 1
22748: ST_TO_ADDR
// end ;
22749: LD_VAR 0 1
22753: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
22754: LD_INT 22
22756: PUSH
22757: LD_INT 2
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 21
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 2
22776: PUSH
22777: LD_INT 101
22779: PUSH
22780: LD_INT 3
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 101
22789: PUSH
22790: LD_INT 6
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: LIST
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: LIST
22806: PPUSH
22807: CALL_OW 69
22811: IFFALSE 22824
22813: GO 22815
22815: DISABLE
// isAlarm := true ; end_of_file
22816: LD_ADDR_EXP 17
22820: PUSH
22821: LD_INT 1
22823: ST_TO_ADDR
22824: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
22825: LD_EXP 14
22829: PPUSH
22830: LD_INT 22
22832: PUSH
22833: LD_INT 2
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PPUSH
22840: CALL_OW 72
22844: PUSH
22845: LD_INT 3
22847: GREATER
22848: PUSH
22849: LD_EXP 17
22853: NOT
22854: AND
22855: IFFALSE 26743
22857: GO 22859
22859: DISABLE
22860: LD_INT 0
22862: PPUSH
22863: PPUSH
22864: PPUSH
22865: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
22866: LD_EXP 63
22870: PPUSH
22871: LD_INT 155
22873: PPUSH
22874: LD_INT 68
22876: PPUSH
22877: LD_INT 0
22879: PPUSH
22880: CALL_OW 48
// wait ( 0 0$1 ) ;
22884: LD_INT 35
22886: PPUSH
22887: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22891: LD_INT 35
22893: PPUSH
22894: CALL_OW 67
// if not HasTask ( ruDisturb ) then
22898: LD_EXP 63
22902: PPUSH
22903: CALL_OW 314
22907: NOT
22908: IFFALSE 22924
// ComMoveUnit ( ruDisturb , Heike ) ;
22910: LD_EXP 63
22914: PPUSH
22915: LD_EXP 43
22919: PPUSH
22920: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
22924: LD_EXP 43
22928: PPUSH
22929: LD_EXP 63
22933: PPUSH
22934: CALL_OW 296
22938: PUSH
22939: LD_INT 6
22941: LESS
22942: PUSH
22943: LD_EXP 63
22947: PPUSH
22948: CALL_OW 302
22952: AND
22953: IFFALSE 22891
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22955: LD_EXP 14
22959: PPUSH
22960: LD_INT 22
22962: PUSH
22963: LD_INT 2
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 91
22972: PUSH
22973: LD_EXP 63
22977: PUSH
22978: LD_INT 8
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: LD_INT 25
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 25
23001: PUSH
23002: LD_INT 11
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 25
23011: PUSH
23012: LD_INT 32
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 25
23021: PUSH
23022: LD_INT 34
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: LIST
23040: PPUSH
23041: CALL_OW 72
23045: IFFALSE 23055
// isAlarm := true ;
23047: LD_ADDR_EXP 17
23051: PUSH
23052: LD_INT 1
23054: ST_TO_ADDR
// if isAlarm then
23055: LD_EXP 17
23059: IFFALSE 23063
// exit ;
23061: GO 26743
// DialogueOn ;
23063: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23067: LD_EXP 63
23071: PPUSH
23072: LD_STRING DMcn-Interrupt-1
23074: PPUSH
23075: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23079: LD_EXP 63
23083: PPUSH
23084: LD_STRING DMcn-Interrupt-2
23086: PPUSH
23087: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
23091: LD_EXP 63
23095: PPUSH
23096: LD_STRING DMcn-Interrupt-3
23098: PPUSH
23099: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
23103: LD_EXP 43
23107: PPUSH
23108: LD_STRING DH-Interrupt-a-4
23110: PPUSH
23111: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
23115: LD_EXP 63
23119: PPUSH
23120: LD_STRING DMcn-Interrupt-a-5
23122: PPUSH
23123: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
23127: LD_EXP 43
23131: PPUSH
23132: LD_STRING DH-Interrupt-a-6
23134: PPUSH
23135: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
23139: LD_EXP 63
23143: PPUSH
23144: LD_STRING DMcn-Interrupt-a-7
23146: PPUSH
23147: CALL_OW 88
// DialogueOff ;
23151: CALL_OW 7
// hasMuchin := true ;
23155: LD_ADDR_EXP 30
23159: PUSH
23160: LD_INT 1
23162: ST_TO_ADDR
// Query ( MuchinInfo ) ;
23163: LD_STRING MuchinInfo
23165: PPUSH
23166: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
23170: LD_STRING M2a
23172: PPUSH
23173: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
23177: LD_INT 105
23179: PPUSH
23180: LD_INT 55
23182: PPUSH
23183: CALL_OW 428
23187: PPUSH
23188: LD_INT 2
23190: PPUSH
23191: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
23195: LD_INT 115
23197: PPUSH
23198: LD_INT 65
23200: PPUSH
23201: CALL_OW 428
23205: PPUSH
23206: LD_INT 2
23208: PPUSH
23209: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
23213: LD_INT 109
23215: PPUSH
23216: LD_INT 59
23218: PPUSH
23219: LD_INT 2
23221: PPUSH
23222: LD_INT 10
23224: NEG
23225: PPUSH
23226: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
23230: LD_INT 109
23232: PPUSH
23233: LD_INT 59
23235: PPUSH
23236: CALL_OW 84
// wait ( 0 0$2 ) ;
23240: LD_INT 70
23242: PPUSH
23243: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
23247: LD_INT 109
23249: PPUSH
23250: LD_INT 59
23252: PPUSH
23253: LD_INT 2
23255: PPUSH
23256: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
23260: LD_INT 35
23262: PPUSH
23263: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
23267: LD_EXP 63
23271: PPUSH
23272: LD_EXP 43
23276: PPUSH
23277: CALL_OW 296
23281: PUSH
23282: LD_INT 6
23284: GREATER
23285: IFFALSE 23301
// ComMoveUnit ( ruDisturb , Heike ) ;
23287: LD_EXP 63
23291: PPUSH
23292: LD_EXP 43
23296: PPUSH
23297: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23301: LD_EXP 14
23305: PPUSH
23306: LD_INT 22
23308: PUSH
23309: LD_INT 2
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 91
23318: PUSH
23319: LD_EXP 63
23323: PUSH
23324: LD_INT 8
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: LD_INT 25
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 25
23347: PUSH
23348: LD_INT 11
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 25
23357: PUSH
23358: LD_INT 32
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 25
23367: PUSH
23368: LD_INT 34
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: LIST
23386: PPUSH
23387: CALL_OW 72
23391: IFFALSE 23403
// begin isAlarm := true ;
23393: LD_ADDR_EXP 17
23397: PUSH
23398: LD_INT 1
23400: ST_TO_ADDR
// exit ;
23401: GO 26743
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
23403: LD_INT 105
23405: PPUSH
23406: LD_INT 55
23408: PPUSH
23409: CALL_OW 428
23413: NOT
23414: PUSH
23415: LD_INT 115
23417: PPUSH
23418: LD_INT 65
23420: PPUSH
23421: CALL_OW 428
23425: NOT
23426: OR
23427: IFFALSE 23439
// begin isAlarm := true ;
23429: LD_ADDR_EXP 17
23433: PUSH
23434: LD_INT 1
23436: ST_TO_ADDR
// exit ;
23437: GO 26743
// end ; until not BuildingsInProgress ( 2 ) ;
23439: LD_INT 2
23441: PPUSH
23442: CALL_OW 345
23446: NOT
23447: IFFALSE 23260
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
23449: LD_INT 105
23451: PPUSH
23452: LD_INT 55
23454: PPUSH
23455: CALL_OW 428
23459: PPUSH
23460: LD_INT 3
23462: PPUSH
23463: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
23467: LD_INT 115
23469: PPUSH
23470: LD_INT 65
23472: PPUSH
23473: CALL_OW 428
23477: PPUSH
23478: LD_INT 3
23480: PPUSH
23481: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
23485: LD_STRING M2a-out
23487: PPUSH
23488: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
23492: LD_EXP 63
23496: PPUSH
23497: LD_INT 2
23499: PPUSH
23500: CALL_OW 120
// wait ( 0 0$3 ) ;
23504: LD_INT 105
23506: PPUSH
23507: CALL_OW 67
// hasMuchin := false ;
23511: LD_ADDR_EXP 30
23515: PUSH
23516: LD_INT 0
23518: ST_TO_ADDR
// wait ( 2 2$00 ) ;
23519: LD_INT 4200
23521: PPUSH
23522: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23526: LD_INT 35
23528: PPUSH
23529: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23533: LD_EXP 63
23537: PPUSH
23538: CALL_OW 314
23542: NOT
23543: IFFALSE 23559
// ComMoveUnit ( ruDisturb , Heike ) ;
23545: LD_EXP 63
23549: PPUSH
23550: LD_EXP 43
23554: PPUSH
23555: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
23559: LD_EXP 43
23563: PPUSH
23564: LD_EXP 63
23568: PPUSH
23569: CALL_OW 296
23573: PUSH
23574: LD_INT 6
23576: LESS
23577: PUSH
23578: LD_EXP 63
23582: PPUSH
23583: CALL_OW 302
23587: AND
23588: IFFALSE 23526
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23590: LD_EXP 14
23594: PPUSH
23595: LD_INT 22
23597: PUSH
23598: LD_INT 2
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 91
23607: PUSH
23608: LD_EXP 63
23612: PUSH
23613: LD_INT 8
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 2
23623: PUSH
23624: LD_INT 25
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 25
23636: PUSH
23637: LD_INT 11
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 25
23646: PUSH
23647: LD_INT 32
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 25
23656: PUSH
23657: LD_INT 34
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: PPUSH
23676: CALL_OW 72
23680: IFFALSE 23690
// isAlarm := true ;
23682: LD_ADDR_EXP 17
23686: PUSH
23687: LD_INT 1
23689: ST_TO_ADDR
// if isAlarm then
23690: LD_EXP 17
23694: IFFALSE 23698
// exit ;
23696: GO 26743
// DialogueOn ;
23698: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23702: LD_EXP 63
23706: PPUSH
23707: LD_STRING DMcn-Interrupt-1
23709: PPUSH
23710: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23714: LD_EXP 63
23718: PPUSH
23719: LD_STRING DMcn-Interrupt-2
23721: PPUSH
23722: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
23726: LD_INT 176
23728: PPUSH
23729: LD_INT 54
23731: PPUSH
23732: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
23736: LD_INT 176
23738: PPUSH
23739: LD_INT 54
23741: PPUSH
23742: LD_INT 2
23744: PPUSH
23745: LD_INT 6
23747: NEG
23748: PPUSH
23749: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
23753: LD_INT 10
23755: PPUSH
23756: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
23760: LD_EXP 63
23764: PPUSH
23765: LD_STRING DMcn-Interrupt-b-3
23767: PPUSH
23768: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
23772: LD_EXP 43
23776: PPUSH
23777: LD_STRING DH-Interrupt-b-4
23779: PPUSH
23780: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
23784: LD_EXP 63
23788: PPUSH
23789: LD_STRING DMcn-Interrupt-b-5
23791: PPUSH
23792: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
23796: LD_EXP 43
23800: PPUSH
23801: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
23805: LD_INT 176
23807: PPUSH
23808: LD_INT 54
23810: PPUSH
23811: LD_INT 2
23813: PPUSH
23814: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
23818: LD_EXP 63
23822: PPUSH
23823: LD_STRING DMcn-Interrupt-b-6
23825: PPUSH
23826: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
23830: LD_EXP 43
23834: PPUSH
23835: LD_STRING DH-Interrupt-b-7
23837: PPUSH
23838: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
23842: LD_EXP 63
23846: PPUSH
23847: LD_STRING DMcn-Interrupt-b-8
23849: PPUSH
23850: CALL_OW 88
// DialogueOff ;
23854: CALL_OW 7
// Query ( MuchinInfo ) ;
23858: LD_STRING MuchinInfo
23860: PPUSH
23861: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
23865: LD_STRING M2b
23867: PPUSH
23868: CALL_OW 337
// hasMuchin := true ;
23872: LD_ADDR_EXP 30
23876: PUSH
23877: LD_INT 1
23879: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23880: LD_INT 35
23882: PPUSH
23883: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
23887: LD_EXP 63
23891: PPUSH
23892: LD_EXP 43
23896: PPUSH
23897: CALL_OW 296
23901: PUSH
23902: LD_INT 6
23904: GREATER
23905: IFFALSE 23921
// ComMoveUnit ( ruDisturb , Heike ) ;
23907: LD_EXP 63
23911: PPUSH
23912: LD_EXP 43
23916: PPUSH
23917: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23921: LD_EXP 14
23925: PPUSH
23926: LD_INT 22
23928: PUSH
23929: LD_INT 2
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 91
23938: PUSH
23939: LD_EXP 63
23943: PUSH
23944: LD_INT 8
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 2
23954: PUSH
23955: LD_INT 25
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 25
23967: PUSH
23968: LD_INT 11
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 25
23977: PUSH
23978: LD_INT 32
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 25
23987: PUSH
23988: LD_INT 34
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: LIST
24006: PPUSH
24007: CALL_OW 72
24011: IFFALSE 24023
// begin isAlarm := true ;
24013: LD_ADDR_EXP 17
24017: PUSH
24018: LD_INT 1
24020: ST_TO_ADDR
// exit ;
24021: GO 26743
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
24023: LD_EXP 43
24027: PPUSH
24028: LD_INT 61
24030: PPUSH
24031: CALL_OW 296
24035: PUSH
24036: LD_INT 4
24038: LESS
24039: IFFALSE 23880
// InGameOn ;
24041: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
24045: LD_INT 173
24047: PPUSH
24048: LD_INT 54
24050: PPUSH
24051: LD_INT 2
24053: PPUSH
24054: LD_INT 8
24056: NEG
24057: PPUSH
24058: CALL_OW 330
// SetSide ( Heike , 3 ) ;
24062: LD_EXP 43
24066: PPUSH
24067: LD_INT 3
24069: PPUSH
24070: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
24074: LD_EXP 43
24078: PPUSH
24079: LD_INT 61
24081: PPUSH
24082: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
24086: LD_EXP 63
24090: PPUSH
24091: LD_INT 61
24093: PPUSH
24094: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
24098: LD_EXP 50
24102: PUSH
24103: LD_EXP 14
24107: IN
24108: PUSH
24109: LD_EXP 50
24113: PPUSH
24114: LD_INT 61
24116: PPUSH
24117: CALL_OW 296
24121: PUSH
24122: LD_INT 12
24124: LESS
24125: AND
24126: IFFALSE 24170
// begin SetSide ( Markov , 3 ) ;
24128: LD_EXP 50
24132: PPUSH
24133: LD_INT 3
24135: PPUSH
24136: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
24140: LD_EXP 50
24144: PPUSH
24145: LD_INT 61
24147: PPUSH
24148: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
24152: LD_INT 35
24154: PPUSH
24155: CALL_OW 67
// until IsInUnit ( Markov ) ;
24159: LD_EXP 50
24163: PPUSH
24164: CALL_OW 310
24168: IFFALSE 24152
// end ; repeat wait ( 0 0$1 ) ;
24170: LD_INT 35
24172: PPUSH
24173: CALL_OW 67
// until IsInUnit ( Heike ) ;
24177: LD_EXP 43
24181: PPUSH
24182: CALL_OW 310
24186: IFFALSE 24170
// SetClass ( Heike , class_mechanic ) ;
24188: LD_EXP 43
24192: PPUSH
24193: LD_INT 3
24195: PPUSH
24196: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
24200: LD_INT 61
24202: PPUSH
24203: LD_INT 21
24205: PPUSH
24206: LD_INT 3
24208: PPUSH
24209: LD_INT 3
24211: PPUSH
24212: LD_INT 43
24214: PPUSH
24215: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
24219: LD_EXP 31
24223: PUSH
24224: LD_EXP 50
24228: PUSH
24229: LD_EXP 14
24233: IN
24234: PUSH
24235: LD_EXP 50
24239: PPUSH
24240: CALL_OW 310
24244: PUSH
24245: LD_INT 61
24247: EQUAL
24248: OR
24249: AND
24250: IFFALSE 24725
// begin wait ( 0 0$5 ) ;
24252: LD_INT 175
24254: PPUSH
24255: CALL_OW 67
// SetSide ( Heike , 2 ) ;
24259: LD_EXP 43
24263: PPUSH
24264: LD_INT 2
24266: PPUSH
24267: CALL_OW 235
// SetSide ( Markov , 2 ) ;
24271: LD_EXP 50
24275: PPUSH
24276: LD_INT 2
24278: PPUSH
24279: CALL_OW 235
// if not Markov in heikeSquad then
24283: LD_EXP 50
24287: PUSH
24288: LD_EXP 14
24292: IN
24293: NOT
24294: IFFALSE 24316
// heikeSquad := Join ( heikeSquad , Markov ) ;
24296: LD_ADDR_EXP 14
24300: PUSH
24301: LD_EXP 14
24305: PPUSH
24306: LD_EXP 50
24310: PPUSH
24311: CALL 65582 0 2
24315: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
24316: LD_EXP 50
24320: PPUSH
24321: LD_STRING DMar-Factory-1
24323: PPUSH
24324: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
24328: LD_INT 61
24330: PPUSH
24331: LD_INT 99
24333: PPUSH
24334: CALL_OW 329
// game_speed := 4 ;
24338: LD_ADDR_OWVAR 65
24342: PUSH
24343: LD_INT 4
24345: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
24346: LD_EXP 63
24350: PPUSH
24351: CALL_OW 122
// ComExitBuilding ( Markov ) ;
24355: LD_EXP 50
24359: PPUSH
24360: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
24364: LD_EXP 63
24368: PPUSH
24369: LD_INT 171
24371: PPUSH
24372: LD_INT 51
24374: PPUSH
24375: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
24379: LD_EXP 50
24383: PPUSH
24384: LD_INT 167
24386: PPUSH
24387: LD_INT 50
24389: PPUSH
24390: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
24394: LD_EXP 50
24398: PPUSH
24399: LD_EXP 63
24403: PPUSH
24404: CALL_OW 179
// wait ( 0 0$5 ) ;
24408: LD_INT 175
24410: PPUSH
24411: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
24415: LD_EXP 50
24419: PPUSH
24420: LD_STRING DMar-Factory-2
24422: PPUSH
24423: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
24427: LD_ADDR_VAR 0 2
24431: PUSH
24432: LD_INT 22
24434: PUSH
24435: LD_INT 3
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 33
24444: PUSH
24445: LD_INT 3
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PPUSH
24456: CALL_OW 69
24460: PUSH
24461: LD_INT 1
24463: ARRAY
24464: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
24465: LD_EXP 63
24469: PPUSH
24470: LD_VAR 0 2
24474: PPUSH
24475: CALL_OW 119
// async ;
24479: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
24480: LD_EXP 63
24484: PPUSH
24485: LD_STRING DMcn-Factory-3
24487: PPUSH
24488: CALL_OW 88
// ComAttackUnit ( veh , ruDisturb ) ;
24492: LD_VAR 0 2
24496: PPUSH
24497: LD_EXP 63
24501: PPUSH
24502: CALL_OW 115
// sync ;
24506: SYNC
// wait ( 0 0$1 ) ;
24507: LD_INT 35
24509: PPUSH
24510: CALL_OW 67
// KillUnit ( ruDisturb ) ;
24514: LD_EXP 63
24518: PPUSH
24519: CALL_OW 66
// SetSide ( veh , 7 ) ;
24523: LD_VAR 0 2
24527: PPUSH
24528: LD_INT 7
24530: PPUSH
24531: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
24535: LD_VAR 0 2
24539: PPUSH
24540: LD_INT 84
24542: PPUSH
24543: LD_INT 38
24545: PPUSH
24546: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
24550: LD_EXP 64
24554: PUSH
24555: LD_INT 1
24557: ARRAY
24558: PPUSH
24559: CALL_OW 258
24563: PUSH
24564: LD_INT 1
24566: EQUAL
24567: IFFALSE 24587
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
24569: LD_EXP 64
24573: PUSH
24574: LD_INT 1
24576: ARRAY
24577: PPUSH
24578: LD_STRING DRum-Factory-4
24580: PPUSH
24581: CALL_OW 88
24585: GO 24603
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
24587: LD_EXP 64
24591: PUSH
24592: LD_INT 1
24594: ARRAY
24595: PPUSH
24596: LD_STRING DRuf-Factory-4
24598: PPUSH
24599: CALL_OW 88
// wait ( 0 0$1 ) ;
24603: LD_INT 35
24605: PPUSH
24606: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
24610: LD_EXP 64
24614: PPUSH
24615: LD_INT 26
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PPUSH
24625: CALL_OW 72
24629: PUSH
24630: LD_INT 1
24632: ARRAY
24633: PPUSH
24634: LD_STRING DRum-Factory-6
24636: PPUSH
24637: CALL_OW 88
// wait ( 0 0$2 ) ;
24641: LD_INT 70
24643: PPUSH
24644: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
24648: LD_EXP 43
24652: PPUSH
24653: LD_INT 33
24655: PPUSH
24656: CALL_OW 336
// ComExitBuilding ( Heike ) ;
24660: LD_EXP 43
24664: PPUSH
24665: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
24669: LD_EXP 43
24673: PPUSH
24674: LD_INT 168
24676: PPUSH
24677: LD_INT 54
24679: PPUSH
24680: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
24684: LD_INT 173
24686: PPUSH
24687: LD_INT 54
24689: PPUSH
24690: LD_INT 2
24692: PPUSH
24693: CALL_OW 331
// InGameOff ;
24697: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
24701: LD_STRING M2b-out
24703: PPUSH
24704: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
24708: LD_STRING ACH_TOY
24710: PPUSH
24711: CALL_OW 543
// hasMuchin := false ;
24715: LD_ADDR_EXP 30
24719: PUSH
24720: LD_INT 0
24722: ST_TO_ADDR
// exit ;
24723: GO 26743
// end ; wait ( 0 0$5 ) ;
24725: LD_INT 175
24727: PPUSH
24728: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
24732: LD_INT 61
24734: PPUSH
24735: LD_INT 99
24737: PPUSH
24738: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
24742: LD_EXP 50
24746: PUSH
24747: LD_EXP 14
24751: IN
24752: PUSH
24753: LD_EXP 50
24757: PPUSH
24758: CALL_OW 255
24762: PUSH
24763: LD_INT 3
24765: EQUAL
24766: AND
24767: IFFALSE 24790
// begin SetSide ( Markov , 2 ) ;
24769: LD_EXP 50
24773: PPUSH
24774: LD_INT 2
24776: PPUSH
24777: CALL_OW 235
// ComExitBuilding ( Markov ) ;
24781: LD_EXP 50
24785: PPUSH
24786: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
24790: LD_EXP 43
24794: PPUSH
24795: LD_INT 2
24797: PPUSH
24798: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
24802: LD_EXP 43
24806: PPUSH
24807: LD_INT 33
24809: PPUSH
24810: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
24814: LD_EXP 63
24818: PPUSH
24819: CALL_OW 122
// ComExitBuilding ( Heike ) ;
24823: LD_EXP 43
24827: PPUSH
24828: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
24832: LD_EXP 43
24836: PPUSH
24837: LD_INT 168
24839: PPUSH
24840: LD_INT 54
24842: PPUSH
24843: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
24847: LD_INT 173
24849: PPUSH
24850: LD_INT 54
24852: PPUSH
24853: LD_INT 2
24855: PPUSH
24856: CALL_OW 331
// InGameOff ;
24860: CALL_OW 9
// wait ( 3 ) ;
24864: LD_INT 3
24866: PPUSH
24867: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
24871: LD_EXP 63
24875: PPUSH
24876: LD_INT 2
24878: PPUSH
24879: CALL_OW 120
// wait ( 0 0$3 ) ;
24883: LD_INT 105
24885: PPUSH
24886: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
24890: LD_STRING M2b-out
24892: PPUSH
24893: CALL_OW 337
// hasMuchin := false ;
24897: LD_ADDR_EXP 30
24901: PUSH
24902: LD_INT 0
24904: ST_TO_ADDR
// wait ( 2 2$00 ) ;
24905: LD_INT 4200
24907: PPUSH
24908: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24912: LD_INT 35
24914: PPUSH
24915: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24919: LD_EXP 63
24923: PPUSH
24924: CALL_OW 314
24928: NOT
24929: IFFALSE 24945
// ComMoveUnit ( ruDisturb , Heike ) ;
24931: LD_EXP 63
24935: PPUSH
24936: LD_EXP 43
24940: PPUSH
24941: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
24945: LD_EXP 43
24949: PPUSH
24950: LD_EXP 63
24954: PPUSH
24955: CALL_OW 296
24959: PUSH
24960: LD_INT 2
24962: LESS
24963: PUSH
24964: LD_EXP 63
24968: PPUSH
24969: CALL_OW 302
24973: AND
24974: IFFALSE 24912
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24976: LD_EXP 14
24980: PPUSH
24981: LD_INT 22
24983: PUSH
24984: LD_INT 2
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 91
24993: PUSH
24994: LD_EXP 63
24998: PUSH
24999: LD_INT 8
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 2
25009: PUSH
25010: LD_INT 25
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 25
25022: PUSH
25023: LD_INT 11
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 25
25032: PUSH
25033: LD_INT 32
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 25
25042: PUSH
25043: LD_INT 34
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: LIST
25061: PPUSH
25062: CALL_OW 72
25066: IFFALSE 25076
// isAlarm := true ;
25068: LD_ADDR_EXP 17
25072: PUSH
25073: LD_INT 1
25075: ST_TO_ADDR
// if isAlarm then
25076: LD_EXP 17
25080: IFFALSE 25084
// exit ;
25082: GO 26743
// ComTurnUnit ( Heike , ruDisturb ) ;
25084: LD_EXP 43
25088: PPUSH
25089: LD_EXP 63
25093: PPUSH
25094: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
25098: LD_EXP 63
25102: PPUSH
25103: LD_EXP 43
25107: PPUSH
25108: CALL_OW 119
// wait ( 3 ) ;
25112: LD_INT 3
25114: PPUSH
25115: CALL_OW 67
// for i := 1 to 3 do
25119: LD_ADDR_VAR 0 1
25123: PUSH
25124: DOUBLE
25125: LD_INT 1
25127: DEC
25128: ST_TO_ADDR
25129: LD_INT 3
25131: PUSH
25132: FOR_TO
25133: IFFALSE 25150
// CreateCratesArea ( 5 , cratesArea , false ) ;
25135: LD_INT 5
25137: PPUSH
25138: LD_INT 58
25140: PPUSH
25141: LD_INT 0
25143: PPUSH
25144: CALL_OW 55
25148: GO 25132
25150: POP
25151: POP
// uc_side := 3 ;
25152: LD_ADDR_OWVAR 20
25156: PUSH
25157: LD_INT 3
25159: ST_TO_ADDR
// uc_nation := nation_russian ;
25160: LD_ADDR_OWVAR 21
25164: PUSH
25165: LD_INT 3
25167: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
25168: LD_INT 21
25170: PPUSH
25171: LD_INT 3
25173: PPUSH
25174: LD_INT 1
25176: PPUSH
25177: LD_INT 51
25179: PPUSH
25180: LD_INT 100
25182: PPUSH
25183: CALL 33129 0 5
// veh := CreateVehicle ;
25187: LD_ADDR_VAR 0 2
25191: PUSH
25192: CALL_OW 45
25196: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
25197: LD_VAR 0 2
25201: PPUSH
25202: LD_INT 104
25204: PPUSH
25205: LD_INT 41
25207: PPUSH
25208: LD_INT 3
25210: PPUSH
25211: LD_INT 0
25213: PPUSH
25214: CALL 67722 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
25218: LD_VAR 0 2
25222: PPUSH
25223: LD_INT 1
25225: PPUSH
25226: LD_INT 100
25228: PPUSH
25229: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
25233: CALL_OW 44
25237: PPUSH
25238: LD_VAR 0 2
25242: PPUSH
25243: CALL_OW 52
// DialogueOn ;
25247: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
25251: LD_EXP 63
25255: PPUSH
25256: LD_STRING DMcn-Interrupt-1
25258: PPUSH
25259: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
25263: LD_EXP 63
25267: PPUSH
25268: LD_STRING DMcn-Interrupt-2
25270: PPUSH
25271: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
25275: LD_EXP 63
25279: PPUSH
25280: LD_STRING DMcn-Interrupt-c-3
25282: PPUSH
25283: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
25287: LD_INT 101
25289: PPUSH
25290: LD_INT 38
25292: PPUSH
25293: LD_INT 2
25295: PPUSH
25296: LD_INT 10
25298: NEG
25299: PPUSH
25300: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
25304: LD_INT 101
25306: PPUSH
25307: LD_INT 38
25309: PPUSH
25310: CALL_OW 84
// wait ( 0 0$2 ) ;
25314: LD_INT 70
25316: PPUSH
25317: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
25321: LD_INT 101
25323: PPUSH
25324: LD_INT 38
25326: PPUSH
25327: LD_INT 2
25329: PPUSH
25330: CALL_OW 331
// RemoveUnit ( veh ) ;
25334: LD_VAR 0 2
25338: PPUSH
25339: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
25343: LD_EXP 63
25347: PPUSH
25348: LD_STRING DMcn-Interrupt-c-4
25350: PPUSH
25351: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
25355: LD_EXP 43
25359: PPUSH
25360: LD_STRING DH-Interrupt-c-5
25362: PPUSH
25363: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
25367: LD_EXP 63
25371: PPUSH
25372: LD_STRING DMcn-Interrupt-c-6
25374: PPUSH
25375: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
25379: LD_EXP 43
25383: PPUSH
25384: LD_STRING DH-Interrupt-c-7
25386: PPUSH
25387: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
25391: LD_EXP 63
25395: PPUSH
25396: LD_STRING DMcn-Interrupt-c-8
25398: PPUSH
25399: CALL_OW 88
// DialogueOff ;
25403: CALL_OW 7
// hasMuchin := true ;
25407: LD_ADDR_EXP 30
25411: PUSH
25412: LD_INT 1
25414: ST_TO_ADDR
// Query ( MuchinInfo ) ;
25415: LD_STRING MuchinInfo
25417: PPUSH
25418: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
25422: LD_STRING M2c
25424: PPUSH
25425: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
25429: LD_INT 35
25431: PPUSH
25432: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
25436: LD_EXP 63
25440: PPUSH
25441: LD_EXP 43
25445: PPUSH
25446: CALL_OW 296
25450: PUSH
25451: LD_INT 6
25453: GREATER
25454: IFFALSE 25470
// ComMoveUnit ( ruDisturb , Heike ) ;
25456: LD_EXP 63
25460: PPUSH
25461: LD_EXP 43
25465: PPUSH
25466: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25470: LD_EXP 14
25474: PPUSH
25475: LD_INT 22
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 91
25487: PUSH
25488: LD_EXP 63
25492: PUSH
25493: LD_INT 8
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 2
25503: PUSH
25504: LD_INT 25
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 25
25516: PUSH
25517: LD_INT 11
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 25
25526: PUSH
25527: LD_INT 32
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 25
25536: PUSH
25537: LD_INT 34
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: LIST
25555: PPUSH
25556: CALL_OW 72
25560: IFFALSE 25572
// begin isAlarm := true ;
25562: LD_ADDR_EXP 17
25566: PUSH
25567: LD_INT 1
25569: ST_TO_ADDR
// exit ;
25570: GO 26743
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
25572: LD_EXP 14
25576: PUSH
25577: LD_EXP 43
25581: UNION
25582: PPUSH
25583: LD_INT 92
25585: PUSH
25586: LD_INT 100
25588: PUSH
25589: LD_INT 37
25591: PUSH
25592: LD_INT 6
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: PPUSH
25601: CALL_OW 72
25605: IFFALSE 25429
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
25607: LD_INT 100
25609: PPUSH
25610: LD_INT 37
25612: PPUSH
25613: LD_INT 3
25615: PPUSH
25616: LD_INT 10
25618: NEG
25619: PPUSH
25620: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
25624: LD_ADDR_VAR 0 3
25628: PUSH
25629: LD_EXP 14
25633: PUSH
25634: LD_EXP 43
25638: UNION
25639: PPUSH
25640: LD_INT 25
25642: PUSH
25643: LD_INT 33
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 91
25652: PUSH
25653: LD_INT 6
25655: PUSH
25656: LD_INT 12
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: LIST
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PPUSH
25668: CALL_OW 72
25672: ST_TO_ADDR
// for i in tmp do
25673: LD_ADDR_VAR 0 1
25677: PUSH
25678: LD_VAR 0 3
25682: PUSH
25683: FOR_IN
25684: IFFALSE 25715
// begin SetSide ( i , 3 ) ;
25686: LD_VAR 0 1
25690: PPUSH
25691: LD_INT 3
25693: PPUSH
25694: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
25698: LD_VAR 0 1
25702: PPUSH
25703: LD_INT 101
25705: PPUSH
25706: LD_INT 38
25708: PPUSH
25709: CALL_OW 111
// end ;
25713: GO 25683
25715: POP
25716: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
25717: LD_EXP 63
25721: PPUSH
25722: LD_INT 104
25724: PPUSH
25725: LD_INT 37
25727: PPUSH
25728: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
25732: LD_EXP 63
25736: PPUSH
25737: LD_EXP 43
25741: PPUSH
25742: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
25746: LD_INT 35
25748: PPUSH
25749: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
25753: LD_ADDR_VAR 0 4
25757: PUSH
25758: LD_INT 58
25760: PPUSH
25761: CALL_OW 435
25765: ST_TO_ADDR
// for i in tmp do
25766: LD_ADDR_VAR 0 1
25770: PUSH
25771: LD_VAR 0 3
25775: PUSH
25776: FOR_IN
25777: IFFALSE 25820
// if not HasTask ( i ) then
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL_OW 314
25788: NOT
25789: IFFALSE 25818
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
25791: LD_VAR 0 1
25795: PPUSH
25796: LD_VAR 0 4
25800: PUSH
25801: LD_INT 1
25803: ARRAY
25804: PPUSH
25805: LD_VAR 0 4
25809: PUSH
25810: LD_INT 2
25812: ARRAY
25813: PPUSH
25814: CALL_OW 117
25818: GO 25776
25820: POP
25821: POP
// until not cr ;
25822: LD_VAR 0 4
25826: NOT
25827: IFFALSE 25746
// wait ( 0 0$2 ) ;
25829: LD_INT 70
25831: PPUSH
25832: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
25836: LD_INT 100
25838: PPUSH
25839: LD_INT 37
25841: PPUSH
25842: LD_INT 3
25844: PPUSH
25845: CALL_OW 331
// for i in tmp do
25849: LD_ADDR_VAR 0 1
25853: PUSH
25854: LD_VAR 0 3
25858: PUSH
25859: FOR_IN
25860: IFFALSE 25876
// SetSide ( i , 2 ) ;
25862: LD_VAR 0 1
25866: PPUSH
25867: LD_INT 2
25869: PPUSH
25870: CALL_OW 235
25874: GO 25859
25876: POP
25877: POP
// if Kaia in tmp then
25878: LD_EXP 48
25882: PUSH
25883: LD_VAR 0 3
25887: IN
25888: IFFALSE 26165
// begin InGameOn ;
25890: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
25894: LD_EXP 48
25898: PPUSH
25899: LD_EXP 63
25903: PPUSH
25904: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
25908: LD_EXP 63
25912: PPUSH
25913: LD_EXP 48
25917: PPUSH
25918: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
25922: LD_EXP 48
25926: PPUSH
25927: LD_EXP 63
25931: PPUSH
25932: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
25936: LD_EXP 48
25940: PPUSH
25941: LD_STRING DK-Assassin-1
25943: PPUSH
25944: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
25948: LD_EXP 63
25952: PPUSH
25953: LD_STRING DMcn-Assassin-2
25955: PPUSH
25956: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
25960: LD_EXP 48
25964: PPUSH
25965: LD_STRING DK-Assassin-3
25967: PPUSH
25968: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
25972: LD_EXP 63
25976: PPUSH
25977: LD_STRING DMcn-Assassin-4
25979: PPUSH
25980: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
25984: LD_EXP 48
25988: PPUSH
25989: LD_STRING DK-Assassin-5
25991: PPUSH
25992: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
25996: LD_EXP 63
26000: PPUSH
26001: LD_STRING DMcn-Assassin-6
26003: PPUSH
26004: CALL_OW 88
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
26008: LD_EXP 48
26012: PUSH
26013: LD_EXP 63
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PPUSH
26022: LD_INT 6
26024: PPUSH
26025: CALL_OW 120
// wait ( 0 0$5 ) ;
26029: LD_INT 175
26031: PPUSH
26032: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
26036: LD_EXP 48
26040: PPUSH
26041: LD_STRING DK-Assassin-7
26043: PPUSH
26044: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
26048: LD_EXP 63
26052: PPUSH
26053: LD_STRING DMcn-Assassin-8
26055: PPUSH
26056: CALL_OW 88
// wait ( 0 0$0.3 ) ;
26060: LD_INT 10
26062: PPUSH
26063: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
26067: LD_EXP 48
26071: PPUSH
26072: LD_STRING DK-Assassin-9
26074: PPUSH
26075: CALL_OW 88
// wait ( 0 0$2 ) ;
26079: LD_INT 70
26081: PPUSH
26082: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
26086: LD_EXP 48
26090: PPUSH
26091: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
26095: LD_EXP 63
26099: PPUSH
26100: CALL_OW 64
// AddComMoveUnit ( Kaia , Heike ) ;
26104: LD_EXP 48
26108: PPUSH
26109: LD_EXP 43
26113: PPUSH
26114: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
26118: LD_EXP 48
26122: PPUSH
26123: LD_STRING DK-Assasin-10
26125: PPUSH
26126: CALL_OW 88
// InGameOff ;
26130: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
26134: LD_STRING ACH_POKER
26136: PPUSH
26137: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
26141: LD_STRING M2c-out
26143: PPUSH
26144: CALL_OW 337
// wait ( 0 0$3 ) ;
26148: LD_INT 105
26150: PPUSH
26151: CALL_OW 67
// hasMuchin := false ;
26155: LD_ADDR_EXP 30
26159: PUSH
26160: LD_INT 0
26162: ST_TO_ADDR
// exit ;
26163: GO 26743
// end ; ChangeMissionObjectives ( M2c-out ) ;
26165: LD_STRING M2c-out
26167: PPUSH
26168: CALL_OW 337
// InGameOn ;
26172: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
26176: LD_EXP 63
26180: PPUSH
26181: LD_STRING DMcn-Fail-1
26183: PPUSH
26184: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
26188: LD_VAR 0 3
26192: PPUSH
26193: LD_INT 114
26195: PPUSH
26196: LD_INT 17
26198: PPUSH
26199: CALL_OW 111
// wait ( 0 0$1 ) ;
26203: LD_INT 35
26205: PPUSH
26206: CALL_OW 67
// async ;
26210: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
26211: LD_EXP 63
26215: PPUSH
26216: LD_EXP 43
26220: PPUSH
26221: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
26225: LD_EXP 63
26229: PPUSH
26230: LD_STRING DMcn-Fail-2
26232: PPUSH
26233: CALL_OW 88
// ComStop ( Heike ) ;
26237: LD_EXP 43
26241: PPUSH
26242: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
26246: LD_EXP 43
26250: PPUSH
26251: LD_EXP 63
26255: PPUSH
26256: CALL_OW 179
// sync ;
26260: SYNC
// Say ( Heike , DH-Fail-3 ) ;
26261: LD_EXP 43
26265: PPUSH
26266: LD_STRING DH-Fail-3
26268: PPUSH
26269: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
26273: LD_EXP 63
26277: PPUSH
26278: LD_STRING DMcn-Fail-4
26280: PPUSH
26281: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
26285: LD_EXP 43
26289: PUSH
26290: LD_EXP 63
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PPUSH
26299: LD_INT 41
26301: PPUSH
26302: LD_INT 19
26304: PPUSH
26305: CALL_OW 111
// wait ( 0 0$2 ) ;
26309: LD_INT 70
26311: PPUSH
26312: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
26316: LD_EXP 63
26320: PPUSH
26321: LD_INT 40
26323: PPUSH
26324: LD_INT 19
26326: PPUSH
26327: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
26331: LD_EXP 43
26335: PPUSH
26336: LD_INT 43
26338: PPUSH
26339: LD_INT 21
26341: PPUSH
26342: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26346: LD_EXP 63
26350: PPUSH
26351: LD_EXP 43
26355: PPUSH
26356: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
26360: LD_EXP 43
26364: PPUSH
26365: LD_EXP 63
26369: PPUSH
26370: CALL_OW 179
// RaiseSailEvent ( centerCamEvent ) ;
26374: LD_INT 3
26376: PPUSH
26377: CALL_OW 427
// wait ( 0 0$2 ) ;
26381: LD_INT 70
26383: PPUSH
26384: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
26388: LD_EXP 63
26392: PPUSH
26393: LD_STRING DMcn-Fail-5
26395: PPUSH
26396: CALL_OW 88
// wait ( 0 0$2 ) ;
26400: LD_INT 70
26402: PPUSH
26403: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
26407: LD_EXP 63
26411: PPUSH
26412: LD_STRING DMcn-Fail-6
26414: PPUSH
26415: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26419: LD_INT 35
26421: PPUSH
26422: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
26426: LD_EXP 43
26430: PPUSH
26431: LD_INT 43
26433: PPUSH
26434: LD_INT 21
26436: PPUSH
26437: CALL_OW 307
26441: IFFALSE 26419
// case Query ( MuchinQuestion ) of 1 :
26443: LD_STRING MuchinQuestion
26445: PPUSH
26446: CALL_OW 97
26450: PUSH
26451: LD_INT 1
26453: DOUBLE
26454: EQUAL
26455: IFTRUE 26459
26457: GO 26559
26459: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
26460: LD_EXP 63
26464: PPUSH
26465: LD_STRING DMcn-Fail-7
26467: PPUSH
26468: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
26472: LD_EXP 43
26476: PPUSH
26477: LD_STRING DH-Fail-8
26479: PPUSH
26480: CALL_OW 88
// wait ( 0 0$0.3 ) ;
26484: LD_INT 10
26486: PPUSH
26487: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
26491: LD_EXP 43
26495: PPUSH
26496: LD_STRING DH-Fail-9
26498: PPUSH
26499: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
26503: LD_EXP 43
26507: PPUSH
26508: LD_STRING DH-Fail-10
26510: PPUSH
26511: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
26515: LD_EXP 63
26519: PPUSH
26520: LD_STRING DMcn-Fail-11
26522: PPUSH
26523: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
26527: LD_EXP 63
26531: PPUSH
26532: LD_EXP 43
26536: PPUSH
26537: CALL_OW 115
// wait ( 0 0$2 ) ;
26541: LD_INT 70
26543: PPUSH
26544: CALL_OW 67
// KillUnit ( Heike ) ;
26548: LD_EXP 43
26552: PPUSH
26553: CALL_OW 66
// end ; 2 :
26557: GO 26739
26559: LD_INT 2
26561: DOUBLE
26562: EQUAL
26563: IFTRUE 26567
26565: GO 26738
26567: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
26568: LD_EXP 43
26572: PPUSH
26573: LD_STRING DH-Fail-a-8
26575: PPUSH
26576: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
26580: LD_EXP 43
26584: PPUSH
26585: LD_STRING DH-Fail-a-9
26587: PPUSH
26588: CALL_OW 88
// Say ( ruDisturb , DH-Fail-10 ) ;
26592: LD_EXP 63
26596: PPUSH
26597: LD_STRING DH-Fail-10
26599: PPUSH
26600: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
26604: LD_EXP 43
26608: PPUSH
26609: LD_STRING DH-Fail-a-11
26611: PPUSH
26612: CALL_OW 88
// async ;
26616: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
26617: LD_EXP 63
26621: PPUSH
26622: LD_EXP 43
26626: PPUSH
26627: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
26631: LD_EXP 63
26635: PPUSH
26636: LD_EXP 43
26640: PPUSH
26641: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
26645: LD_EXP 63
26649: PPUSH
26650: LD_STRING DH-Fail-12
26652: PPUSH
26653: CALL_OW 88
// sync ;
26657: SYNC
// wait ( 0 0$1 ) ;
26658: LD_INT 35
26660: PPUSH
26661: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
26665: LD_EXP 43
26669: PPUSH
26670: LD_STRING DH-Fail-a-13
26672: PPUSH
26673: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
26677: LD_EXP 63
26681: PPUSH
26682: LD_INT 100
26684: PPUSH
26685: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
26689: LD_EXP 63
26693: PPUSH
26694: LD_STRING DMcn-Fail-a-14
26696: PPUSH
26697: CALL_OW 91
// KillUnit ( ruDisturb ) ;
26701: LD_EXP 63
26705: PPUSH
26706: CALL_OW 66
// wait ( 0 0$1 ) ;
26710: LD_INT 35
26712: PPUSH
26713: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
26717: LD_EXP 43
26721: PPUSH
26722: LD_STRING DH-Fail-a-15
26724: PPUSH
26725: CALL_OW 88
// YouLost ( FailMuchin ) ;
26729: LD_STRING FailMuchin
26731: PPUSH
26732: CALL_OW 104
// end ; end ;
26736: GO 26739
26738: POP
// InGameOff ;
26739: CALL_OW 9
// end ; end_of_file
26743: PPOPN 4
26745: END
// every 0 0$1 marked gameStartEvent do
26746: GO 26748
26748: DISABLE
// begin enable ;
26749: ENABLE
// if not contactWithAmerican then
26750: LD_EXP 25
26754: NOT
26755: IFFALSE 26800
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
26757: LD_ADDR_OWVAR 47
26761: PUSH
26762: LD_STRING #X108-1
26764: PUSH
26765: LD_INT 22
26767: PUSH
26768: LD_INT 5
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 21
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PPUSH
26789: CALL_OW 69
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: ST_TO_ADDR
26798: GO 26889
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
26800: LD_ADDR_OWVAR 47
26804: PUSH
26805: LD_STRING #X108-1
26807: PUSH
26808: LD_INT 22
26810: PUSH
26811: LD_INT 5
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 21
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 50
26830: PUSH
26831: EMPTY
26832: LIST
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: LIST
26838: PPUSH
26839: CALL_OW 69
26843: PUSH
26844: LD_STRING #X108-2
26846: PUSH
26847: LD_INT 22
26849: PUSH
26850: LD_INT 4
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 21
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 50
26869: PUSH
26870: EMPTY
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: LIST
26877: PPUSH
26878: CALL_OW 69
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: ST_TO_ADDR
// end ; end_of_file
26889: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
26890: LD_EXP 43
26894: PPUSH
26895: LD_INT 59
26897: PPUSH
26898: CALL_OW 308
26902: IFFALSE 27024
26904: GO 26906
26906: DISABLE
// begin Query ( FinalInfo ) ;
26907: LD_STRING FinalInfo
26909: PPUSH
26910: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
26914: LD_INT 59
26916: PPUSH
26917: LD_INT 1
26919: PPUSH
26920: CALL_OW 424
// end_the_mission_allowed := true ;
26924: LD_ADDR_OWVAR 57
26928: PUSH
26929: LD_INT 1
26931: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26932: LD_INT 35
26934: PPUSH
26935: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
26939: LD_INT 22
26941: PUSH
26942: LD_INT 2
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 21
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 95
26961: PUSH
26962: LD_INT 59
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: LIST
26973: PPUSH
26974: CALL_OW 69
26978: PPUSH
26979: CALL 30216 0 1
26983: PUSH
26984: LD_INT 22
26986: PUSH
26987: LD_INT 2
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 21
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PPUSH
27008: CALL_OW 69
27012: PPUSH
27013: CALL 30216 0 1
27017: EQUAL
27018: IFFALSE 26932
// EndMission ;
27020: CALL 27032 0 0
// end ;
27024: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
27025: CALL 27032 0 0
// end ;
27029: PPOPN 1
27031: END
// function EndMission ; begin
27032: LD_INT 0
27034: PPUSH
// if not IsInArea ( Heike , finalArea ) then
27035: LD_EXP 43
27039: PPUSH
27040: LD_INT 59
27042: PPUSH
27043: CALL_OW 308
27047: NOT
27048: IFFALSE 27059
// begin Query ( HeikeOutOfArea ) ;
27050: LD_STRING HeikeOutOfArea
27052: PPUSH
27053: CALL_OW 97
// exit ;
27057: GO 27923
// end ; if not IsOk ( Heike ) then
27059: LD_EXP 43
27063: PPUSH
27064: CALL_OW 302
27068: NOT
27069: IFFALSE 27080
// begin Query ( HeikeIsHurt ) ;
27071: LD_STRING HeikeIsHurt
27073: PPUSH
27074: CALL_OW 97
// exit ;
27078: GO 27923
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
27080: LD_INT 22
27082: PUSH
27083: LD_INT 2
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 21
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 50
27102: PUSH
27103: EMPTY
27104: LIST
27105: PUSH
27106: LD_INT 95
27108: PUSH
27109: LD_INT 59
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: PPUSH
27122: CALL_OW 69
27126: PPUSH
27127: CALL 30216 0 1
27131: PUSH
27132: LD_INT 6
27134: LESS
27135: IFFALSE 27144
// YouLost ( NeedMorePep ) ;
27137: LD_STRING NeedMorePep
27139: PPUSH
27140: CALL_OW 104
// if tick < 20 20$00 then
27144: LD_OWVAR 1
27148: PUSH
27149: LD_INT 42000
27151: LESS
27152: IFFALSE 27161
// SetAchievement ( ACH_HSPEED_8 ) ;
27154: LD_STRING ACH_HSPEED_8
27156: PPUSH
27157: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
27161: LD_INT 22
27163: PUSH
27164: LD_INT 5
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 21
27173: PUSH
27174: LD_INT 1
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PPUSH
27185: CALL_OW 69
27189: PUSH
27190: LD_INT 0
27192: EQUAL
27193: PUSH
27194: LD_EXP 32
27198: PUSH
27199: LD_INT 0
27201: EQUAL
27202: AND
27203: IFFALSE 27217
// AddMedal ( med1 , 1 ) else
27205: LD_STRING med1
27207: PPUSH
27208: LD_INT 1
27210: PPUSH
27211: CALL_OW 101
27215: GO 27228
// AddMedal ( med1 , - 1 ) ;
27217: LD_STRING med1
27219: PPUSH
27220: LD_INT 1
27222: NEG
27223: PPUSH
27224: CALL_OW 101
// if explosivePlantedList >= 3 then
27228: LD_EXP 29
27232: PUSH
27233: LD_INT 3
27235: GREATEREQUAL
27236: IFFALSE 27250
// AddMedal ( med2 , 1 ) else
27238: LD_STRING med2
27240: PPUSH
27241: LD_INT 1
27243: PPUSH
27244: CALL_OW 101
27248: GO 27284
// if explosivePlantedList < 3 then
27250: LD_EXP 29
27254: PUSH
27255: LD_INT 3
27257: LESS
27258: IFFALSE 27273
// AddMedal ( med2 , - 2 ) else
27260: LD_STRING med2
27262: PPUSH
27263: LD_INT 2
27265: NEG
27266: PPUSH
27267: CALL_OW 101
27271: GO 27284
// AddMedal ( med2 , - 1 ) ;
27273: LD_STRING med2
27275: PPUSH
27276: LD_INT 1
27278: NEG
27279: PPUSH
27280: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
27284: LD_INT 5
27286: PPUSH
27287: LD_INT 2
27289: PPUSH
27290: CALL_OW 321
27294: PUSH
27295: LD_INT 2
27297: EQUAL
27298: IFFALSE 27312
// AddMedal ( med3 , 1 ) else
27300: LD_STRING med3
27302: PPUSH
27303: LD_INT 1
27305: PPUSH
27306: CALL_OW 101
27310: GO 27323
// AddMedal ( med3 , - 1 ) ;
27312: LD_STRING med3
27314: PPUSH
27315: LD_INT 1
27317: NEG
27318: PPUSH
27319: CALL_OW 101
// GiveMedals ( MAIN ) ;
27323: LD_STRING MAIN
27325: PPUSH
27326: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
27330: LD_INT 22
27332: PUSH
27333: LD_INT 2
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 23
27342: PUSH
27343: LD_INT 2
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 21
27352: PUSH
27353: LD_INT 1
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: LIST
27364: PPUSH
27365: CALL_OW 69
27369: PPUSH
27370: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
27374: LD_EXP 57
27378: PUSH
27379: LD_EXP 57
27383: PPUSH
27384: CALL_OW 255
27388: PUSH
27389: LD_INT 2
27391: EQUAL
27392: AND
27393: IFFALSE 27407
// SaveCharacters ( Doug , 08_UsCommander ) ;
27395: LD_EXP 57
27399: PPUSH
27400: LD_STRING 08_UsCommander
27402: PPUSH
27403: CALL_OW 38
// if Harris and GetSide ( Harris ) = 2 then
27407: LD_EXP 56
27411: PUSH
27412: LD_EXP 56
27416: PPUSH
27417: CALL_OW 255
27421: PUSH
27422: LD_INT 2
27424: EQUAL
27425: AND
27426: IFFALSE 27440
// SaveCharacters ( Harris , 08_Harris ) ;
27428: LD_EXP 56
27432: PPUSH
27433: LD_STRING 08_Harris
27435: PPUSH
27436: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff [ Doug , Harris ] , 08_Americans ) ;
27440: LD_INT 22
27442: PUSH
27443: LD_INT 2
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 23
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 21
27462: PUSH
27463: LD_INT 1
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: LIST
27474: PPUSH
27475: CALL_OW 69
27479: PUSH
27480: LD_EXP 57
27484: PUSH
27485: LD_EXP 56
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: DIFF
27494: PPUSH
27495: LD_STRING 08_Americans
27497: PPUSH
27498: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
27502: LD_EXP 43
27506: PPUSH
27507: CALL_OW 248
27511: PUSH
27512: LD_INT 3
27514: EQUAL
27515: IFFALSE 27545
// begin CopySkills ( Heike , HeikeTmp ) ;
27517: LD_EXP 43
27521: PPUSH
27522: LD_EXP 59
27526: PPUSH
27527: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
27531: LD_EXP 59
27535: PPUSH
27536: LD_STRING 08_Heike
27538: PPUSH
27539: CALL_OW 38
// end else
27543: GO 27557
// SaveCharacters ( Heike , 08_Heike ) ;
27545: LD_EXP 43
27549: PPUSH
27550: LD_STRING 08_Heike
27552: PPUSH
27553: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
27557: LD_EXP 53
27561: PUSH
27562: LD_EXP 53
27566: PPUSH
27567: CALL_OW 255
27571: PUSH
27572: LD_INT 2
27574: EQUAL
27575: AND
27576: IFFALSE 27590
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
27578: LD_EXP 53
27582: PPUSH
27583: LD_STRING 08_Aviradze
27585: PPUSH
27586: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
27590: LD_EXP 46
27594: PUSH
27595: LD_EXP 46
27599: PPUSH
27600: CALL_OW 255
27604: PUSH
27605: LD_INT 2
27607: EQUAL
27608: AND
27609: IFFALSE 27623
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
27611: LD_EXP 46
27615: PPUSH
27616: LD_STRING 08_Ibrahim
27618: PPUSH
27619: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
27623: LD_EXP 47
27627: PUSH
27628: LD_EXP 47
27632: PPUSH
27633: CALL_OW 255
27637: PUSH
27638: LD_INT 2
27640: EQUAL
27641: AND
27642: IFFALSE 27656
// SaveCharacters ( Kamil , 08_Kamil ) ;
27644: LD_EXP 47
27648: PPUSH
27649: LD_STRING 08_Kamil
27651: PPUSH
27652: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
27656: LD_EXP 49
27660: PUSH
27661: LD_EXP 49
27665: PPUSH
27666: CALL_OW 255
27670: PUSH
27671: LD_INT 2
27673: EQUAL
27674: AND
27675: IFFALSE 27689
// SaveCharacters ( Sophia , 08_Sophia ) ;
27677: LD_EXP 49
27681: PPUSH
27682: LD_STRING 08_Sophia
27684: PPUSH
27685: CALL_OW 38
// if Kaia and GetSide ( Kaia ) = 2 then
27689: LD_EXP 48
27693: PUSH
27694: LD_EXP 48
27698: PPUSH
27699: CALL_OW 255
27703: PUSH
27704: LD_INT 2
27706: EQUAL
27707: AND
27708: IFFALSE 27722
// SaveCharacters ( Kaia , 08_Kaia ) ;
27710: LD_EXP 48
27714: PPUSH
27715: LD_STRING 08_Kaia
27717: PPUSH
27718: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
27722: LD_EXP 44
27726: PUSH
27727: LD_EXP 44
27731: PPUSH
27732: CALL_OW 255
27736: PUSH
27737: LD_INT 2
27739: EQUAL
27740: AND
27741: IFFALSE 27798
// if GetNation ( Givi ) = nation_russian then
27743: LD_EXP 44
27747: PPUSH
27748: CALL_OW 248
27752: PUSH
27753: LD_INT 3
27755: EQUAL
27756: IFFALSE 27786
// begin CopySkills ( Givi , GiviTmp ) ;
27758: LD_EXP 44
27762: PPUSH
27763: LD_EXP 60
27767: PPUSH
27768: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
27772: LD_EXP 60
27776: PPUSH
27777: LD_STRING 08_Givi
27779: PPUSH
27780: CALL_OW 38
// end else
27784: GO 27798
// SaveCharacters ( Givi , 08_Givi ) ;
27786: LD_EXP 44
27790: PPUSH
27791: LD_STRING 08_Givi
27793: PPUSH
27794: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
27798: LD_EXP 45
27802: PUSH
27803: LD_EXP 45
27807: PPUSH
27808: CALL_OW 255
27812: PUSH
27813: LD_INT 2
27815: EQUAL
27816: AND
27817: IFFALSE 27831
// SaveCharacters ( Mike , 08_Mike ) ;
27819: LD_EXP 45
27823: PPUSH
27824: LD_STRING 08_Mike
27826: PPUSH
27827: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
27831: LD_EXP 50
27835: PUSH
27836: LD_EXP 50
27840: PPUSH
27841: CALL_OW 255
27845: PUSH
27846: LD_INT 2
27848: EQUAL
27849: AND
27850: IFFALSE 27864
// SaveCharacters ( Markov , 08_Markov ) ;
27852: LD_EXP 50
27856: PPUSH
27857: LD_STRING 08_Markov
27859: PPUSH
27860: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
27864: LD_EXP 52
27868: PUSH
27869: LD_EXP 52
27873: PPUSH
27874: CALL_OW 255
27878: PUSH
27879: LD_INT 2
27881: EQUAL
27882: AND
27883: IFFALSE 27897
// SaveCharacters ( Kurt , 08_Kurt ) ;
27885: LD_EXP 52
27889: PPUSH
27890: LD_STRING 08_Kurt
27892: PPUSH
27893: CALL_OW 38
// if heikeSecondSquad then
27897: LD_EXP 54
27901: IFFALSE 27915
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
27903: LD_EXP 54
27907: PPUSH
27908: LD_STRING 08_others
27910: PPUSH
27911: CALL_OW 38
// YouWin ;
27915: CALL_OW 103
// DialogueOff ;
27919: CALL_OW 7
// end ; end_of_file
27923: LD_VAR 0 1
27927: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
27928: LD_EXP 5
27932: IFFALSE 28111
27934: GO 27936
27936: DISABLE
27937: LD_INT 0
27939: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
27940: LD_INT 35
27942: PPUSH
27943: LD_INT 2100
27945: PPUSH
27946: CALL_OW 12
27950: PPUSH
27951: CALL_OW 67
// StopOriginalMusic ;
27955: CALL 89781 0 0
// weatherBusy := true ;
27959: LD_ADDR_EXP 37
27963: PUSH
27964: LD_INT 1
27966: ST_TO_ADDR
// for i := 1 to 3 do
27967: LD_ADDR_VAR 0 1
27971: PUSH
27972: DOUBLE
27973: LD_INT 1
27975: DEC
27976: ST_TO_ADDR
27977: LD_INT 3
27979: PUSH
27980: FOR_TO
27981: IFFALSE 28015
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
27983: LD_INT 1
27985: PPUSH
27986: LD_INT 100
27988: PUSH
27989: LD_INT 100
27991: PUSH
27992: LD_VAR 0 1
27996: MUL
27997: PLUS
27998: PPUSH
27999: LD_INT 60
28001: PPUSH
28002: CALL_OW 550
// wait ( 0 0$2 ) ;
28006: LD_INT 70
28008: PPUSH
28009: CALL_OW 67
// end ;
28013: GO 27980
28015: POP
28016: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
28017: LD_STRING ArStormRain.wav
28019: PPUSH
28020: LD_STRING OW_CUSTOM_COMMAND(103);
28022: PPUSH
28023: CALL 89811 0 2
// wait ( 0 0$3 ) ;
28027: LD_INT 105
28029: PPUSH
28030: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
28034: LD_INT 1
28036: PPUSH
28037: LD_INT 900
28039: PPUSH
28040: LD_INT 120
28042: PPUSH
28043: CALL_OW 550
// wait ( 0 0$10 ) ;
28047: LD_INT 350
28049: PPUSH
28050: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
28054: LD_INT 1
28056: PPUSH
28057: LD_INT 1500
28059: PPUSH
28060: LD_INT 300
28062: PPUSH
28063: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
28067: LD_INT 35
28069: PPUSH
28070: CALL_OW 67
// until not weatherBusy ;
28074: LD_EXP 37
28078: NOT
28079: IFFALSE 28067
// SetWeather ( 0 , 0 , 0 ) ;
28081: LD_INT 0
28083: PPUSH
28084: LD_INT 0
28086: PPUSH
28087: LD_INT 0
28089: PPUSH
28090: CALL_OW 550
// wait ( 5 5$00 ) ;
28094: LD_INT 10500
28096: PPUSH
28097: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
28101: LD_STRING ArStormNormal.wav
28103: PPUSH
28104: LD_STRING OW_CUSTOM_COMMAND(103);
28106: PPUSH
28107: CALL 89811 0 2
// end ; end_of_file
28111: PPOPN 1
28113: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28114: LD_INT 0
28116: PPUSH
28117: PPUSH
// if exist_mode then
28118: LD_VAR 0 2
28122: IFFALSE 28147
// unit := CreateCharacter ( prefix & ident ) else
28124: LD_ADDR_VAR 0 5
28128: PUSH
28129: LD_VAR 0 3
28133: PUSH
28134: LD_VAR 0 1
28138: STR
28139: PPUSH
28140: CALL_OW 34
28144: ST_TO_ADDR
28145: GO 28162
// unit := NewCharacter ( ident ) ;
28147: LD_ADDR_VAR 0 5
28151: PUSH
28152: LD_VAR 0 1
28156: PPUSH
28157: CALL_OW 25
28161: ST_TO_ADDR
// result := unit ;
28162: LD_ADDR_VAR 0 4
28166: PUSH
28167: LD_VAR 0 5
28171: ST_TO_ADDR
// end ;
28172: LD_VAR 0 4
28176: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28177: LD_INT 0
28179: PPUSH
28180: PPUSH
// if not side or not nation then
28181: LD_VAR 0 1
28185: NOT
28186: PUSH
28187: LD_VAR 0 2
28191: NOT
28192: OR
28193: IFFALSE 28197
// exit ;
28195: GO 28965
// case nation of nation_american :
28197: LD_VAR 0 2
28201: PUSH
28202: LD_INT 1
28204: DOUBLE
28205: EQUAL
28206: IFTRUE 28210
28208: GO 28424
28210: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28211: LD_ADDR_VAR 0 4
28215: PUSH
28216: LD_INT 35
28218: PUSH
28219: LD_INT 45
28221: PUSH
28222: LD_INT 46
28224: PUSH
28225: LD_INT 47
28227: PUSH
28228: LD_INT 82
28230: PUSH
28231: LD_INT 83
28233: PUSH
28234: LD_INT 84
28236: PUSH
28237: LD_INT 85
28239: PUSH
28240: LD_INT 86
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: LD_INT 2
28248: PUSH
28249: LD_INT 6
28251: PUSH
28252: LD_INT 15
28254: PUSH
28255: LD_INT 16
28257: PUSH
28258: LD_INT 7
28260: PUSH
28261: LD_INT 12
28263: PUSH
28264: LD_INT 13
28266: PUSH
28267: LD_INT 10
28269: PUSH
28270: LD_INT 14
28272: PUSH
28273: LD_INT 20
28275: PUSH
28276: LD_INT 21
28278: PUSH
28279: LD_INT 22
28281: PUSH
28282: LD_INT 25
28284: PUSH
28285: LD_INT 32
28287: PUSH
28288: LD_INT 27
28290: PUSH
28291: LD_INT 36
28293: PUSH
28294: LD_INT 69
28296: PUSH
28297: LD_INT 39
28299: PUSH
28300: LD_INT 34
28302: PUSH
28303: LD_INT 40
28305: PUSH
28306: LD_INT 48
28308: PUSH
28309: LD_INT 49
28311: PUSH
28312: LD_INT 50
28314: PUSH
28315: LD_INT 51
28317: PUSH
28318: LD_INT 52
28320: PUSH
28321: LD_INT 53
28323: PUSH
28324: LD_INT 54
28326: PUSH
28327: LD_INT 55
28329: PUSH
28330: LD_INT 56
28332: PUSH
28333: LD_INT 57
28335: PUSH
28336: LD_INT 58
28338: PUSH
28339: LD_INT 59
28341: PUSH
28342: LD_INT 60
28344: PUSH
28345: LD_INT 61
28347: PUSH
28348: LD_INT 62
28350: PUSH
28351: LD_INT 80
28353: PUSH
28354: LD_INT 82
28356: PUSH
28357: LD_INT 83
28359: PUSH
28360: LD_INT 84
28362: PUSH
28363: LD_INT 85
28365: PUSH
28366: LD_INT 86
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: ST_TO_ADDR
28422: GO 28889
28424: LD_INT 2
28426: DOUBLE
28427: EQUAL
28428: IFTRUE 28432
28430: GO 28658
28432: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28433: LD_ADDR_VAR 0 4
28437: PUSH
28438: LD_INT 35
28440: PUSH
28441: LD_INT 45
28443: PUSH
28444: LD_INT 46
28446: PUSH
28447: LD_INT 47
28449: PUSH
28450: LD_INT 82
28452: PUSH
28453: LD_INT 83
28455: PUSH
28456: LD_INT 84
28458: PUSH
28459: LD_INT 85
28461: PUSH
28462: LD_INT 87
28464: PUSH
28465: LD_INT 70
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: LD_INT 11
28473: PUSH
28474: LD_INT 3
28476: PUSH
28477: LD_INT 4
28479: PUSH
28480: LD_INT 5
28482: PUSH
28483: LD_INT 6
28485: PUSH
28486: LD_INT 15
28488: PUSH
28489: LD_INT 18
28491: PUSH
28492: LD_INT 7
28494: PUSH
28495: LD_INT 17
28497: PUSH
28498: LD_INT 8
28500: PUSH
28501: LD_INT 20
28503: PUSH
28504: LD_INT 21
28506: PUSH
28507: LD_INT 22
28509: PUSH
28510: LD_INT 72
28512: PUSH
28513: LD_INT 26
28515: PUSH
28516: LD_INT 69
28518: PUSH
28519: LD_INT 39
28521: PUSH
28522: LD_INT 40
28524: PUSH
28525: LD_INT 41
28527: PUSH
28528: LD_INT 42
28530: PUSH
28531: LD_INT 43
28533: PUSH
28534: LD_INT 48
28536: PUSH
28537: LD_INT 49
28539: PUSH
28540: LD_INT 50
28542: PUSH
28543: LD_INT 51
28545: PUSH
28546: LD_INT 52
28548: PUSH
28549: LD_INT 53
28551: PUSH
28552: LD_INT 54
28554: PUSH
28555: LD_INT 55
28557: PUSH
28558: LD_INT 56
28560: PUSH
28561: LD_INT 60
28563: PUSH
28564: LD_INT 61
28566: PUSH
28567: LD_INT 62
28569: PUSH
28570: LD_INT 66
28572: PUSH
28573: LD_INT 67
28575: PUSH
28576: LD_INT 68
28578: PUSH
28579: LD_INT 81
28581: PUSH
28582: LD_INT 82
28584: PUSH
28585: LD_INT 83
28587: PUSH
28588: LD_INT 84
28590: PUSH
28591: LD_INT 85
28593: PUSH
28594: LD_INT 87
28596: PUSH
28597: LD_INT 88
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: ST_TO_ADDR
28656: GO 28889
28658: LD_INT 3
28660: DOUBLE
28661: EQUAL
28662: IFTRUE 28666
28664: GO 28888
28666: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28667: LD_ADDR_VAR 0 4
28671: PUSH
28672: LD_INT 46
28674: PUSH
28675: LD_INT 47
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: LD_INT 82
28686: PUSH
28687: LD_INT 83
28689: PUSH
28690: LD_INT 84
28692: PUSH
28693: LD_INT 85
28695: PUSH
28696: LD_INT 86
28698: PUSH
28699: LD_INT 11
28701: PUSH
28702: LD_INT 9
28704: PUSH
28705: LD_INT 20
28707: PUSH
28708: LD_INT 19
28710: PUSH
28711: LD_INT 21
28713: PUSH
28714: LD_INT 24
28716: PUSH
28717: LD_INT 22
28719: PUSH
28720: LD_INT 25
28722: PUSH
28723: LD_INT 28
28725: PUSH
28726: LD_INT 29
28728: PUSH
28729: LD_INT 30
28731: PUSH
28732: LD_INT 31
28734: PUSH
28735: LD_INT 37
28737: PUSH
28738: LD_INT 38
28740: PUSH
28741: LD_INT 32
28743: PUSH
28744: LD_INT 27
28746: PUSH
28747: LD_INT 33
28749: PUSH
28750: LD_INT 69
28752: PUSH
28753: LD_INT 39
28755: PUSH
28756: LD_INT 34
28758: PUSH
28759: LD_INT 40
28761: PUSH
28762: LD_INT 71
28764: PUSH
28765: LD_INT 23
28767: PUSH
28768: LD_INT 44
28770: PUSH
28771: LD_INT 48
28773: PUSH
28774: LD_INT 49
28776: PUSH
28777: LD_INT 50
28779: PUSH
28780: LD_INT 51
28782: PUSH
28783: LD_INT 52
28785: PUSH
28786: LD_INT 53
28788: PUSH
28789: LD_INT 54
28791: PUSH
28792: LD_INT 55
28794: PUSH
28795: LD_INT 56
28797: PUSH
28798: LD_INT 57
28800: PUSH
28801: LD_INT 58
28803: PUSH
28804: LD_INT 59
28806: PUSH
28807: LD_INT 63
28809: PUSH
28810: LD_INT 64
28812: PUSH
28813: LD_INT 65
28815: PUSH
28816: LD_INT 82
28818: PUSH
28819: LD_INT 83
28821: PUSH
28822: LD_INT 84
28824: PUSH
28825: LD_INT 85
28827: PUSH
28828: LD_INT 86
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: ST_TO_ADDR
28886: GO 28889
28888: POP
// if state > - 1 and state < 3 then
28889: LD_VAR 0 3
28893: PUSH
28894: LD_INT 1
28896: NEG
28897: GREATER
28898: PUSH
28899: LD_VAR 0 3
28903: PUSH
28904: LD_INT 3
28906: LESS
28907: AND
28908: IFFALSE 28965
// for i in result do
28910: LD_ADDR_VAR 0 5
28914: PUSH
28915: LD_VAR 0 4
28919: PUSH
28920: FOR_IN
28921: IFFALSE 28963
// if GetTech ( i , side ) <> state then
28923: LD_VAR 0 5
28927: PPUSH
28928: LD_VAR 0 1
28932: PPUSH
28933: CALL_OW 321
28937: PUSH
28938: LD_VAR 0 3
28942: NONEQUAL
28943: IFFALSE 28961
// result := result diff i ;
28945: LD_ADDR_VAR 0 4
28949: PUSH
28950: LD_VAR 0 4
28954: PUSH
28955: LD_VAR 0 5
28959: DIFF
28960: ST_TO_ADDR
28961: GO 28920
28963: POP
28964: POP
// end ;
28965: LD_VAR 0 4
28969: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28970: LD_INT 0
28972: PPUSH
28973: PPUSH
28974: PPUSH
// result := true ;
28975: LD_ADDR_VAR 0 3
28979: PUSH
28980: LD_INT 1
28982: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28983: LD_ADDR_VAR 0 5
28987: PUSH
28988: LD_VAR 0 2
28992: PPUSH
28993: CALL_OW 480
28997: ST_TO_ADDR
// if not tmp then
28998: LD_VAR 0 5
29002: NOT
29003: IFFALSE 29007
// exit ;
29005: GO 29056
// for i in tmp do
29007: LD_ADDR_VAR 0 4
29011: PUSH
29012: LD_VAR 0 5
29016: PUSH
29017: FOR_IN
29018: IFFALSE 29054
// if GetTech ( i , side ) <> state_researched then
29020: LD_VAR 0 4
29024: PPUSH
29025: LD_VAR 0 1
29029: PPUSH
29030: CALL_OW 321
29034: PUSH
29035: LD_INT 2
29037: NONEQUAL
29038: IFFALSE 29052
// begin result := false ;
29040: LD_ADDR_VAR 0 3
29044: PUSH
29045: LD_INT 0
29047: ST_TO_ADDR
// exit ;
29048: POP
29049: POP
29050: GO 29056
// end ;
29052: GO 29017
29054: POP
29055: POP
// end ;
29056: LD_VAR 0 3
29060: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29061: LD_INT 0
29063: PPUSH
29064: PPUSH
29065: PPUSH
29066: PPUSH
29067: PPUSH
29068: PPUSH
29069: PPUSH
29070: PPUSH
29071: PPUSH
29072: PPUSH
29073: PPUSH
29074: PPUSH
29075: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29076: LD_VAR 0 1
29080: NOT
29081: PUSH
29082: LD_VAR 0 1
29086: PPUSH
29087: CALL_OW 257
29091: PUSH
29092: LD_INT 9
29094: NONEQUAL
29095: OR
29096: IFFALSE 29100
// exit ;
29098: GO 29673
// side := GetSide ( unit ) ;
29100: LD_ADDR_VAR 0 9
29104: PUSH
29105: LD_VAR 0 1
29109: PPUSH
29110: CALL_OW 255
29114: ST_TO_ADDR
// tech_space := tech_spacanom ;
29115: LD_ADDR_VAR 0 12
29119: PUSH
29120: LD_INT 29
29122: ST_TO_ADDR
// tech_time := tech_taurad ;
29123: LD_ADDR_VAR 0 13
29127: PUSH
29128: LD_INT 28
29130: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29131: LD_ADDR_VAR 0 11
29135: PUSH
29136: LD_VAR 0 1
29140: PPUSH
29141: CALL_OW 310
29145: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29146: LD_VAR 0 11
29150: PPUSH
29151: CALL_OW 247
29155: PUSH
29156: LD_INT 2
29158: EQUAL
29159: IFFALSE 29163
// exit ;
29161: GO 29673
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29163: LD_ADDR_VAR 0 8
29167: PUSH
29168: LD_INT 81
29170: PUSH
29171: LD_VAR 0 9
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 3
29182: PUSH
29183: LD_INT 21
29185: PUSH
29186: LD_INT 3
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PPUSH
29201: CALL_OW 69
29205: ST_TO_ADDR
// if not tmp then
29206: LD_VAR 0 8
29210: NOT
29211: IFFALSE 29215
// exit ;
29213: GO 29673
// if in_unit then
29215: LD_VAR 0 11
29219: IFFALSE 29243
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29221: LD_ADDR_VAR 0 10
29225: PUSH
29226: LD_VAR 0 8
29230: PPUSH
29231: LD_VAR 0 11
29235: PPUSH
29236: CALL_OW 74
29240: ST_TO_ADDR
29241: GO 29263
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29243: LD_ADDR_VAR 0 10
29247: PUSH
29248: LD_VAR 0 8
29252: PPUSH
29253: LD_VAR 0 1
29257: PPUSH
29258: CALL_OW 74
29262: ST_TO_ADDR
// if not enemy then
29263: LD_VAR 0 10
29267: NOT
29268: IFFALSE 29272
// exit ;
29270: GO 29673
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29272: LD_VAR 0 11
29276: PUSH
29277: LD_VAR 0 11
29281: PPUSH
29282: LD_VAR 0 10
29286: PPUSH
29287: CALL_OW 296
29291: PUSH
29292: LD_INT 13
29294: GREATER
29295: AND
29296: PUSH
29297: LD_VAR 0 1
29301: PPUSH
29302: LD_VAR 0 10
29306: PPUSH
29307: CALL_OW 296
29311: PUSH
29312: LD_INT 12
29314: GREATER
29315: OR
29316: IFFALSE 29320
// exit ;
29318: GO 29673
// missile := [ 1 ] ;
29320: LD_ADDR_VAR 0 14
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: EMPTY
29329: LIST
29330: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29331: LD_VAR 0 9
29335: PPUSH
29336: LD_VAR 0 12
29340: PPUSH
29341: CALL_OW 325
29345: IFFALSE 29374
// missile := Replace ( missile , missile + 1 , 2 ) ;
29347: LD_ADDR_VAR 0 14
29351: PUSH
29352: LD_VAR 0 14
29356: PPUSH
29357: LD_VAR 0 14
29361: PUSH
29362: LD_INT 1
29364: PLUS
29365: PPUSH
29366: LD_INT 2
29368: PPUSH
29369: CALL_OW 1
29373: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29374: LD_VAR 0 9
29378: PPUSH
29379: LD_VAR 0 13
29383: PPUSH
29384: CALL_OW 325
29388: PUSH
29389: LD_VAR 0 10
29393: PPUSH
29394: CALL_OW 255
29398: PPUSH
29399: LD_VAR 0 13
29403: PPUSH
29404: CALL_OW 325
29408: NOT
29409: AND
29410: IFFALSE 29439
// missile := Replace ( missile , missile + 1 , 3 ) ;
29412: LD_ADDR_VAR 0 14
29416: PUSH
29417: LD_VAR 0 14
29421: PPUSH
29422: LD_VAR 0 14
29426: PUSH
29427: LD_INT 1
29429: PLUS
29430: PPUSH
29431: LD_INT 3
29433: PPUSH
29434: CALL_OW 1
29438: ST_TO_ADDR
// if missile < 2 then
29439: LD_VAR 0 14
29443: PUSH
29444: LD_INT 2
29446: LESS
29447: IFFALSE 29451
// exit ;
29449: GO 29673
// x := GetX ( enemy ) ;
29451: LD_ADDR_VAR 0 4
29455: PUSH
29456: LD_VAR 0 10
29460: PPUSH
29461: CALL_OW 250
29465: ST_TO_ADDR
// y := GetY ( enemy ) ;
29466: LD_ADDR_VAR 0 5
29470: PUSH
29471: LD_VAR 0 10
29475: PPUSH
29476: CALL_OW 251
29480: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29481: LD_ADDR_VAR 0 6
29485: PUSH
29486: LD_VAR 0 4
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PPUSH
29495: LD_INT 1
29497: PPUSH
29498: CALL_OW 12
29502: PLUS
29503: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29504: LD_ADDR_VAR 0 7
29508: PUSH
29509: LD_VAR 0 5
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: PPUSH
29518: LD_INT 1
29520: PPUSH
29521: CALL_OW 12
29525: PLUS
29526: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29527: LD_VAR 0 6
29531: PPUSH
29532: LD_VAR 0 7
29536: PPUSH
29537: CALL_OW 488
29541: NOT
29542: IFFALSE 29564
// begin _x := x ;
29544: LD_ADDR_VAR 0 6
29548: PUSH
29549: LD_VAR 0 4
29553: ST_TO_ADDR
// _y := y ;
29554: LD_ADDR_VAR 0 7
29558: PUSH
29559: LD_VAR 0 5
29563: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29564: LD_ADDR_VAR 0 3
29568: PUSH
29569: LD_INT 1
29571: PPUSH
29572: LD_VAR 0 14
29576: PPUSH
29577: CALL_OW 12
29581: ST_TO_ADDR
// case i of 1 :
29582: LD_VAR 0 3
29586: PUSH
29587: LD_INT 1
29589: DOUBLE
29590: EQUAL
29591: IFTRUE 29595
29593: GO 29612
29595: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29596: LD_VAR 0 1
29600: PPUSH
29601: LD_VAR 0 10
29605: PPUSH
29606: CALL_OW 115
29610: GO 29673
29612: LD_INT 2
29614: DOUBLE
29615: EQUAL
29616: IFTRUE 29620
29618: GO 29642
29620: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29621: LD_VAR 0 1
29625: PPUSH
29626: LD_VAR 0 6
29630: PPUSH
29631: LD_VAR 0 7
29635: PPUSH
29636: CALL_OW 153
29640: GO 29673
29642: LD_INT 3
29644: DOUBLE
29645: EQUAL
29646: IFTRUE 29650
29648: GO 29672
29650: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29651: LD_VAR 0 1
29655: PPUSH
29656: LD_VAR 0 6
29660: PPUSH
29661: LD_VAR 0 7
29665: PPUSH
29666: CALL_OW 154
29670: GO 29673
29672: POP
// end ;
29673: LD_VAR 0 2
29677: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29678: LD_INT 0
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
29685: PPUSH
// if not unit or not building then
29686: LD_VAR 0 1
29690: NOT
29691: PUSH
29692: LD_VAR 0 2
29696: NOT
29697: OR
29698: IFFALSE 29702
// exit ;
29700: GO 29860
// x := GetX ( building ) ;
29702: LD_ADDR_VAR 0 5
29706: PUSH
29707: LD_VAR 0 2
29711: PPUSH
29712: CALL_OW 250
29716: ST_TO_ADDR
// y := GetY ( building ) ;
29717: LD_ADDR_VAR 0 6
29721: PUSH
29722: LD_VAR 0 2
29726: PPUSH
29727: CALL_OW 251
29731: ST_TO_ADDR
// for i = 0 to 5 do
29732: LD_ADDR_VAR 0 4
29736: PUSH
29737: DOUBLE
29738: LD_INT 0
29740: DEC
29741: ST_TO_ADDR
29742: LD_INT 5
29744: PUSH
29745: FOR_TO
29746: IFFALSE 29858
// begin _x := ShiftX ( x , i , 3 ) ;
29748: LD_ADDR_VAR 0 7
29752: PUSH
29753: LD_VAR 0 5
29757: PPUSH
29758: LD_VAR 0 4
29762: PPUSH
29763: LD_INT 3
29765: PPUSH
29766: CALL_OW 272
29770: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29771: LD_ADDR_VAR 0 8
29775: PUSH
29776: LD_VAR 0 6
29780: PPUSH
29781: LD_VAR 0 4
29785: PPUSH
29786: LD_INT 3
29788: PPUSH
29789: CALL_OW 273
29793: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29794: LD_VAR 0 7
29798: PPUSH
29799: LD_VAR 0 8
29803: PPUSH
29804: CALL_OW 488
29808: NOT
29809: IFFALSE 29813
// continue ;
29811: GO 29745
// if HexInfo ( _x , _y ) = 0 then
29813: LD_VAR 0 7
29817: PPUSH
29818: LD_VAR 0 8
29822: PPUSH
29823: CALL_OW 428
29827: PUSH
29828: LD_INT 0
29830: EQUAL
29831: IFFALSE 29856
// begin ComMoveXY ( unit , _x , _y ) ;
29833: LD_VAR 0 1
29837: PPUSH
29838: LD_VAR 0 7
29842: PPUSH
29843: LD_VAR 0 8
29847: PPUSH
29848: CALL_OW 111
// exit ;
29852: POP
29853: POP
29854: GO 29860
// end ; end ;
29856: GO 29745
29858: POP
29859: POP
// end ;
29860: LD_VAR 0 3
29864: RET
// export function ScanBase ( side , base_area ) ; begin
29865: LD_INT 0
29867: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29868: LD_ADDR_VAR 0 3
29872: PUSH
29873: LD_VAR 0 2
29877: PPUSH
29878: LD_INT 81
29880: PUSH
29881: LD_VAR 0 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PPUSH
29890: CALL_OW 70
29894: ST_TO_ADDR
// end ;
29895: LD_VAR 0 3
29899: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29900: LD_INT 0
29902: PPUSH
29903: PPUSH
29904: PPUSH
29905: PPUSH
// result := false ;
29906: LD_ADDR_VAR 0 2
29910: PUSH
29911: LD_INT 0
29913: ST_TO_ADDR
// side := GetSide ( unit ) ;
29914: LD_ADDR_VAR 0 3
29918: PUSH
29919: LD_VAR 0 1
29923: PPUSH
29924: CALL_OW 255
29928: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29929: LD_ADDR_VAR 0 4
29933: PUSH
29934: LD_VAR 0 1
29938: PPUSH
29939: CALL_OW 248
29943: ST_TO_ADDR
// case nat of 1 :
29944: LD_VAR 0 4
29948: PUSH
29949: LD_INT 1
29951: DOUBLE
29952: EQUAL
29953: IFTRUE 29957
29955: GO 29968
29957: POP
// tech := tech_lassight ; 2 :
29958: LD_ADDR_VAR 0 5
29962: PUSH
29963: LD_INT 12
29965: ST_TO_ADDR
29966: GO 30007
29968: LD_INT 2
29970: DOUBLE
29971: EQUAL
29972: IFTRUE 29976
29974: GO 29987
29976: POP
// tech := tech_mortar ; 3 :
29977: LD_ADDR_VAR 0 5
29981: PUSH
29982: LD_INT 41
29984: ST_TO_ADDR
29985: GO 30007
29987: LD_INT 3
29989: DOUBLE
29990: EQUAL
29991: IFTRUE 29995
29993: GO 30006
29995: POP
// tech := tech_bazooka ; end ;
29996: LD_ADDR_VAR 0 5
30000: PUSH
30001: LD_INT 44
30003: ST_TO_ADDR
30004: GO 30007
30006: POP
// if Researched ( side , tech ) then
30007: LD_VAR 0 3
30011: PPUSH
30012: LD_VAR 0 5
30016: PPUSH
30017: CALL_OW 325
30021: IFFALSE 30048
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30023: LD_ADDR_VAR 0 2
30027: PUSH
30028: LD_INT 5
30030: PUSH
30031: LD_INT 8
30033: PUSH
30034: LD_INT 9
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: LIST
30041: PUSH
30042: LD_VAR 0 4
30046: ARRAY
30047: ST_TO_ADDR
// end ;
30048: LD_VAR 0 2
30052: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30053: LD_INT 0
30055: PPUSH
30056: PPUSH
30057: PPUSH
// if not mines then
30058: LD_VAR 0 2
30062: NOT
30063: IFFALSE 30067
// exit ;
30065: GO 30211
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30067: LD_ADDR_VAR 0 5
30071: PUSH
30072: LD_INT 81
30074: PUSH
30075: LD_VAR 0 1
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 3
30086: PUSH
30087: LD_INT 21
30089: PUSH
30090: LD_INT 3
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PPUSH
30105: CALL_OW 69
30109: ST_TO_ADDR
// for i in mines do
30110: LD_ADDR_VAR 0 4
30114: PUSH
30115: LD_VAR 0 2
30119: PUSH
30120: FOR_IN
30121: IFFALSE 30209
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30123: LD_VAR 0 4
30127: PUSH
30128: LD_INT 1
30130: ARRAY
30131: PPUSH
30132: LD_VAR 0 4
30136: PUSH
30137: LD_INT 2
30139: ARRAY
30140: PPUSH
30141: CALL_OW 458
30145: NOT
30146: IFFALSE 30150
// continue ;
30148: GO 30120
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30150: LD_VAR 0 4
30154: PUSH
30155: LD_INT 1
30157: ARRAY
30158: PPUSH
30159: LD_VAR 0 4
30163: PUSH
30164: LD_INT 2
30166: ARRAY
30167: PPUSH
30168: CALL_OW 428
30172: PUSH
30173: LD_VAR 0 5
30177: IN
30178: IFFALSE 30207
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30180: LD_VAR 0 4
30184: PUSH
30185: LD_INT 1
30187: ARRAY
30188: PPUSH
30189: LD_VAR 0 4
30193: PUSH
30194: LD_INT 2
30196: ARRAY
30197: PPUSH
30198: LD_VAR 0 1
30202: PPUSH
30203: CALL_OW 456
// end ;
30207: GO 30120
30209: POP
30210: POP
// end ;
30211: LD_VAR 0 3
30215: RET
// export function Count ( array ) ; var i ; begin
30216: LD_INT 0
30218: PPUSH
30219: PPUSH
// result := 0 ;
30220: LD_ADDR_VAR 0 2
30224: PUSH
30225: LD_INT 0
30227: ST_TO_ADDR
// for i in array do
30228: LD_ADDR_VAR 0 3
30232: PUSH
30233: LD_VAR 0 1
30237: PUSH
30238: FOR_IN
30239: IFFALSE 30263
// if i then
30241: LD_VAR 0 3
30245: IFFALSE 30261
// result := result + 1 ;
30247: LD_ADDR_VAR 0 2
30251: PUSH
30252: LD_VAR 0 2
30256: PUSH
30257: LD_INT 1
30259: PLUS
30260: ST_TO_ADDR
30261: GO 30238
30263: POP
30264: POP
// end ;
30265: LD_VAR 0 2
30269: RET
// export function IsEmpty ( building ) ; begin
30270: LD_INT 0
30272: PPUSH
// if not building then
30273: LD_VAR 0 1
30277: NOT
30278: IFFALSE 30282
// exit ;
30280: GO 30325
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30282: LD_ADDR_VAR 0 2
30286: PUSH
30287: LD_VAR 0 1
30291: PUSH
30292: LD_INT 22
30294: PUSH
30295: LD_VAR 0 1
30299: PPUSH
30300: CALL_OW 255
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 58
30311: PUSH
30312: EMPTY
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PPUSH
30319: CALL_OW 69
30323: IN
30324: ST_TO_ADDR
// end ;
30325: LD_VAR 0 2
30329: RET
// export function IsNotFull ( building ) ; var places ; begin
30330: LD_INT 0
30332: PPUSH
30333: PPUSH
// if not building then
30334: LD_VAR 0 1
30338: NOT
30339: IFFALSE 30343
// exit ;
30341: GO 30514
// result := false ;
30343: LD_ADDR_VAR 0 2
30347: PUSH
30348: LD_INT 0
30350: ST_TO_ADDR
// places := 0 ;
30351: LD_ADDR_VAR 0 3
30355: PUSH
30356: LD_INT 0
30358: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30359: LD_VAR 0 1
30363: PPUSH
30364: CALL_OW 266
30368: PUSH
30369: LD_INT 0
30371: DOUBLE
30372: EQUAL
30373: IFTRUE 30431
30375: LD_INT 1
30377: DOUBLE
30378: EQUAL
30379: IFTRUE 30431
30381: LD_INT 6
30383: DOUBLE
30384: EQUAL
30385: IFTRUE 30431
30387: LD_INT 7
30389: DOUBLE
30390: EQUAL
30391: IFTRUE 30431
30393: LD_INT 8
30395: DOUBLE
30396: EQUAL
30397: IFTRUE 30431
30399: LD_INT 4
30401: DOUBLE
30402: EQUAL
30403: IFTRUE 30431
30405: LD_INT 5
30407: DOUBLE
30408: EQUAL
30409: IFTRUE 30431
30411: LD_INT 2
30413: DOUBLE
30414: EQUAL
30415: IFTRUE 30431
30417: LD_INT 3
30419: DOUBLE
30420: EQUAL
30421: IFTRUE 30431
30423: LD_INT 35
30425: DOUBLE
30426: EQUAL
30427: IFTRUE 30431
30429: GO 30442
30431: POP
// places := 6 ; b_bunker , b_breastwork :
30432: LD_ADDR_VAR 0 3
30436: PUSH
30437: LD_INT 6
30439: ST_TO_ADDR
30440: GO 30487
30442: LD_INT 32
30444: DOUBLE
30445: EQUAL
30446: IFTRUE 30456
30448: LD_INT 31
30450: DOUBLE
30451: EQUAL
30452: IFTRUE 30456
30454: GO 30467
30456: POP
// places := 1 ; b_control_tower :
30457: LD_ADDR_VAR 0 3
30461: PUSH
30462: LD_INT 1
30464: ST_TO_ADDR
30465: GO 30487
30467: LD_INT 36
30469: DOUBLE
30470: EQUAL
30471: IFTRUE 30475
30473: GO 30486
30475: POP
// places := 3 ; end ;
30476: LD_ADDR_VAR 0 3
30480: PUSH
30481: LD_INT 3
30483: ST_TO_ADDR
30484: GO 30487
30486: POP
// if places then
30487: LD_VAR 0 3
30491: IFFALSE 30514
// result := UnitsInside ( building ) < places ;
30493: LD_ADDR_VAR 0 2
30497: PUSH
30498: LD_VAR 0 1
30502: PPUSH
30503: CALL_OW 313
30507: PUSH
30508: LD_VAR 0 3
30512: LESS
30513: ST_TO_ADDR
// end ;
30514: LD_VAR 0 2
30518: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30519: LD_INT 0
30521: PPUSH
30522: PPUSH
30523: PPUSH
30524: PPUSH
// tmp := [ ] ;
30525: LD_ADDR_VAR 0 3
30529: PUSH
30530: EMPTY
30531: ST_TO_ADDR
// list := [ ] ;
30532: LD_ADDR_VAR 0 5
30536: PUSH
30537: EMPTY
30538: ST_TO_ADDR
// for i = 16 to 25 do
30539: LD_ADDR_VAR 0 4
30543: PUSH
30544: DOUBLE
30545: LD_INT 16
30547: DEC
30548: ST_TO_ADDR
30549: LD_INT 25
30551: PUSH
30552: FOR_TO
30553: IFFALSE 30626
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30555: LD_ADDR_VAR 0 3
30559: PUSH
30560: LD_VAR 0 3
30564: PUSH
30565: LD_INT 22
30567: PUSH
30568: LD_VAR 0 1
30572: PPUSH
30573: CALL_OW 255
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 91
30584: PUSH
30585: LD_VAR 0 1
30589: PUSH
30590: LD_INT 6
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 30
30600: PUSH
30601: LD_VAR 0 4
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: PPUSH
30618: CALL_OW 69
30622: ADD
30623: ST_TO_ADDR
30624: GO 30552
30626: POP
30627: POP
// for i = 1 to tmp do
30628: LD_ADDR_VAR 0 4
30632: PUSH
30633: DOUBLE
30634: LD_INT 1
30636: DEC
30637: ST_TO_ADDR
30638: LD_VAR 0 3
30642: PUSH
30643: FOR_TO
30644: IFFALSE 30732
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30646: LD_ADDR_VAR 0 5
30650: PUSH
30651: LD_VAR 0 5
30655: PUSH
30656: LD_VAR 0 3
30660: PUSH
30661: LD_VAR 0 4
30665: ARRAY
30666: PPUSH
30667: CALL_OW 266
30671: PUSH
30672: LD_VAR 0 3
30676: PUSH
30677: LD_VAR 0 4
30681: ARRAY
30682: PPUSH
30683: CALL_OW 250
30687: PUSH
30688: LD_VAR 0 3
30692: PUSH
30693: LD_VAR 0 4
30697: ARRAY
30698: PPUSH
30699: CALL_OW 251
30703: PUSH
30704: LD_VAR 0 3
30708: PUSH
30709: LD_VAR 0 4
30713: ARRAY
30714: PPUSH
30715: CALL_OW 254
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: PUSH
30726: EMPTY
30727: LIST
30728: ADD
30729: ST_TO_ADDR
30730: GO 30643
30732: POP
30733: POP
// result := list ;
30734: LD_ADDR_VAR 0 2
30738: PUSH
30739: LD_VAR 0 5
30743: ST_TO_ADDR
// end ;
30744: LD_VAR 0 2
30748: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30749: LD_INT 0
30751: PPUSH
30752: PPUSH
30753: PPUSH
30754: PPUSH
30755: PPUSH
30756: PPUSH
30757: PPUSH
// if not factory then
30758: LD_VAR 0 1
30762: NOT
30763: IFFALSE 30767
// exit ;
30765: GO 31360
// if control = control_apeman then
30767: LD_VAR 0 4
30771: PUSH
30772: LD_INT 5
30774: EQUAL
30775: IFFALSE 30884
// begin tmp := UnitsInside ( factory ) ;
30777: LD_ADDR_VAR 0 8
30781: PUSH
30782: LD_VAR 0 1
30786: PPUSH
30787: CALL_OW 313
30791: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30792: LD_VAR 0 8
30796: PPUSH
30797: LD_INT 25
30799: PUSH
30800: LD_INT 12
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PPUSH
30807: CALL_OW 72
30811: NOT
30812: IFFALSE 30822
// control := control_manual ;
30814: LD_ADDR_VAR 0 4
30818: PUSH
30819: LD_INT 1
30821: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30822: LD_ADDR_VAR 0 8
30826: PUSH
30827: LD_VAR 0 1
30831: PPUSH
30832: CALL 30519 0 1
30836: ST_TO_ADDR
// if tmp then
30837: LD_VAR 0 8
30841: IFFALSE 30884
// begin for i in tmp do
30843: LD_ADDR_VAR 0 7
30847: PUSH
30848: LD_VAR 0 8
30852: PUSH
30853: FOR_IN
30854: IFFALSE 30882
// if i [ 1 ] = b_ext_radio then
30856: LD_VAR 0 7
30860: PUSH
30861: LD_INT 1
30863: ARRAY
30864: PUSH
30865: LD_INT 22
30867: EQUAL
30868: IFFALSE 30880
// begin control := control_remote ;
30870: LD_ADDR_VAR 0 4
30874: PUSH
30875: LD_INT 2
30877: ST_TO_ADDR
// break ;
30878: GO 30882
// end ;
30880: GO 30853
30882: POP
30883: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30884: LD_VAR 0 1
30888: PPUSH
30889: LD_VAR 0 2
30893: PPUSH
30894: LD_VAR 0 3
30898: PPUSH
30899: LD_VAR 0 4
30903: PPUSH
30904: LD_VAR 0 5
30908: PPUSH
30909: CALL_OW 448
30913: IFFALSE 30948
// begin result := [ chassis , engine , control , weapon ] ;
30915: LD_ADDR_VAR 0 6
30919: PUSH
30920: LD_VAR 0 2
30924: PUSH
30925: LD_VAR 0 3
30929: PUSH
30930: LD_VAR 0 4
30934: PUSH
30935: LD_VAR 0 5
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: ST_TO_ADDR
// exit ;
30946: GO 31360
// end ; _chassis := AvailableChassisList ( factory ) ;
30948: LD_ADDR_VAR 0 9
30952: PUSH
30953: LD_VAR 0 1
30957: PPUSH
30958: CALL_OW 475
30962: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30963: LD_ADDR_VAR 0 11
30967: PUSH
30968: LD_VAR 0 1
30972: PPUSH
30973: CALL_OW 476
30977: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30978: LD_ADDR_VAR 0 12
30982: PUSH
30983: LD_VAR 0 1
30987: PPUSH
30988: CALL_OW 477
30992: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30993: LD_ADDR_VAR 0 10
30997: PUSH
30998: LD_VAR 0 1
31002: PPUSH
31003: CALL_OW 478
31007: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31008: LD_VAR 0 9
31012: NOT
31013: PUSH
31014: LD_VAR 0 11
31018: NOT
31019: OR
31020: PUSH
31021: LD_VAR 0 12
31025: NOT
31026: OR
31027: PUSH
31028: LD_VAR 0 10
31032: NOT
31033: OR
31034: IFFALSE 31069
// begin result := [ chassis , engine , control , weapon ] ;
31036: LD_ADDR_VAR 0 6
31040: PUSH
31041: LD_VAR 0 2
31045: PUSH
31046: LD_VAR 0 3
31050: PUSH
31051: LD_VAR 0 4
31055: PUSH
31056: LD_VAR 0 5
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
// exit ;
31067: GO 31360
// end ; if not chassis in _chassis then
31069: LD_VAR 0 2
31073: PUSH
31074: LD_VAR 0 9
31078: IN
31079: NOT
31080: IFFALSE 31106
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31082: LD_ADDR_VAR 0 2
31086: PUSH
31087: LD_VAR 0 9
31091: PUSH
31092: LD_INT 1
31094: PPUSH
31095: LD_VAR 0 9
31099: PPUSH
31100: CALL_OW 12
31104: ARRAY
31105: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31106: LD_VAR 0 2
31110: PPUSH
31111: LD_VAR 0 3
31115: PPUSH
31116: CALL 31365 0 2
31120: NOT
31121: IFFALSE 31180
// repeat engine := _engine [ 1 ] ;
31123: LD_ADDR_VAR 0 3
31127: PUSH
31128: LD_VAR 0 11
31132: PUSH
31133: LD_INT 1
31135: ARRAY
31136: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31137: LD_ADDR_VAR 0 11
31141: PUSH
31142: LD_VAR 0 11
31146: PPUSH
31147: LD_INT 1
31149: PPUSH
31150: CALL_OW 3
31154: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31155: LD_VAR 0 2
31159: PPUSH
31160: LD_VAR 0 3
31164: PPUSH
31165: CALL 31365 0 2
31169: PUSH
31170: LD_VAR 0 11
31174: PUSH
31175: EMPTY
31176: EQUAL
31177: OR
31178: IFFALSE 31123
// if not control in _control then
31180: LD_VAR 0 4
31184: PUSH
31185: LD_VAR 0 12
31189: IN
31190: NOT
31191: IFFALSE 31217
// control := _control [ rand ( 1 , _control ) ] ;
31193: LD_ADDR_VAR 0 4
31197: PUSH
31198: LD_VAR 0 12
31202: PUSH
31203: LD_INT 1
31205: PPUSH
31206: LD_VAR 0 12
31210: PPUSH
31211: CALL_OW 12
31215: ARRAY
31216: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31217: LD_VAR 0 2
31221: PPUSH
31222: LD_VAR 0 5
31226: PPUSH
31227: CALL 31585 0 2
31231: NOT
31232: IFFALSE 31291
// repeat weapon := _weapon [ 1 ] ;
31234: LD_ADDR_VAR 0 5
31238: PUSH
31239: LD_VAR 0 10
31243: PUSH
31244: LD_INT 1
31246: ARRAY
31247: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31248: LD_ADDR_VAR 0 10
31252: PUSH
31253: LD_VAR 0 10
31257: PPUSH
31258: LD_INT 1
31260: PPUSH
31261: CALL_OW 3
31265: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31266: LD_VAR 0 2
31270: PPUSH
31271: LD_VAR 0 5
31275: PPUSH
31276: CALL 31585 0 2
31280: PUSH
31281: LD_VAR 0 10
31285: PUSH
31286: EMPTY
31287: EQUAL
31288: OR
31289: IFFALSE 31234
// result := [ ] ;
31291: LD_ADDR_VAR 0 6
31295: PUSH
31296: EMPTY
31297: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31298: LD_VAR 0 1
31302: PPUSH
31303: LD_VAR 0 2
31307: PPUSH
31308: LD_VAR 0 3
31312: PPUSH
31313: LD_VAR 0 4
31317: PPUSH
31318: LD_VAR 0 5
31322: PPUSH
31323: CALL_OW 448
31327: IFFALSE 31360
// result := [ chassis , engine , control , weapon ] ;
31329: LD_ADDR_VAR 0 6
31333: PUSH
31334: LD_VAR 0 2
31338: PUSH
31339: LD_VAR 0 3
31343: PUSH
31344: LD_VAR 0 4
31348: PUSH
31349: LD_VAR 0 5
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: ST_TO_ADDR
// end ;
31360: LD_VAR 0 6
31364: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31365: LD_INT 0
31367: PPUSH
// if not chassis or not engine then
31368: LD_VAR 0 1
31372: NOT
31373: PUSH
31374: LD_VAR 0 2
31378: NOT
31379: OR
31380: IFFALSE 31384
// exit ;
31382: GO 31580
// case engine of engine_solar :
31384: LD_VAR 0 2
31388: PUSH
31389: LD_INT 2
31391: DOUBLE
31392: EQUAL
31393: IFTRUE 31397
31395: GO 31435
31397: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31398: LD_ADDR_VAR 0 3
31402: PUSH
31403: LD_INT 11
31405: PUSH
31406: LD_INT 12
31408: PUSH
31409: LD_INT 13
31411: PUSH
31412: LD_INT 14
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: LD_INT 3
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: ST_TO_ADDR
31433: GO 31564
31435: LD_INT 1
31437: DOUBLE
31438: EQUAL
31439: IFTRUE 31443
31441: GO 31505
31443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31444: LD_ADDR_VAR 0 3
31448: PUSH
31449: LD_INT 11
31451: PUSH
31452: LD_INT 12
31454: PUSH
31455: LD_INT 13
31457: PUSH
31458: LD_INT 14
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: LD_INT 3
31469: PUSH
31470: LD_INT 4
31472: PUSH
31473: LD_INT 5
31475: PUSH
31476: LD_INT 21
31478: PUSH
31479: LD_INT 23
31481: PUSH
31482: LD_INT 22
31484: PUSH
31485: LD_INT 24
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: ST_TO_ADDR
31503: GO 31564
31505: LD_INT 3
31507: DOUBLE
31508: EQUAL
31509: IFTRUE 31513
31511: GO 31563
31513: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31514: LD_ADDR_VAR 0 3
31518: PUSH
31519: LD_INT 13
31521: PUSH
31522: LD_INT 14
31524: PUSH
31525: LD_INT 2
31527: PUSH
31528: LD_INT 3
31530: PUSH
31531: LD_INT 4
31533: PUSH
31534: LD_INT 5
31536: PUSH
31537: LD_INT 21
31539: PUSH
31540: LD_INT 22
31542: PUSH
31543: LD_INT 23
31545: PUSH
31546: LD_INT 24
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: ST_TO_ADDR
31561: GO 31564
31563: POP
// result := ( chassis in result ) ;
31564: LD_ADDR_VAR 0 3
31568: PUSH
31569: LD_VAR 0 1
31573: PUSH
31574: LD_VAR 0 3
31578: IN
31579: ST_TO_ADDR
// end ;
31580: LD_VAR 0 3
31584: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31585: LD_INT 0
31587: PPUSH
// if not chassis or not weapon then
31588: LD_VAR 0 1
31592: NOT
31593: PUSH
31594: LD_VAR 0 2
31598: NOT
31599: OR
31600: IFFALSE 31604
// exit ;
31602: GO 32664
// case weapon of us_machine_gun :
31604: LD_VAR 0 2
31608: PUSH
31609: LD_INT 2
31611: DOUBLE
31612: EQUAL
31613: IFTRUE 31617
31615: GO 31647
31617: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31618: LD_ADDR_VAR 0 3
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: LD_INT 2
31628: PUSH
31629: LD_INT 3
31631: PUSH
31632: LD_INT 4
31634: PUSH
31635: LD_INT 5
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: ST_TO_ADDR
31645: GO 32648
31647: LD_INT 3
31649: DOUBLE
31650: EQUAL
31651: IFTRUE 31655
31653: GO 31685
31655: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31656: LD_ADDR_VAR 0 3
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: LD_INT 3
31669: PUSH
31670: LD_INT 4
31672: PUSH
31673: LD_INT 5
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: ST_TO_ADDR
31683: GO 32648
31685: LD_INT 11
31687: DOUBLE
31688: EQUAL
31689: IFTRUE 31693
31691: GO 31723
31693: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31694: LD_ADDR_VAR 0 3
31698: PUSH
31699: LD_INT 1
31701: PUSH
31702: LD_INT 2
31704: PUSH
31705: LD_INT 3
31707: PUSH
31708: LD_INT 4
31710: PUSH
31711: LD_INT 5
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: ST_TO_ADDR
31721: GO 32648
31723: LD_INT 4
31725: DOUBLE
31726: EQUAL
31727: IFTRUE 31731
31729: GO 31757
31731: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31732: LD_ADDR_VAR 0 3
31736: PUSH
31737: LD_INT 2
31739: PUSH
31740: LD_INT 3
31742: PUSH
31743: LD_INT 4
31745: PUSH
31746: LD_INT 5
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: ST_TO_ADDR
31755: GO 32648
31757: LD_INT 5
31759: DOUBLE
31760: EQUAL
31761: IFTRUE 31765
31763: GO 31791
31765: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31766: LD_ADDR_VAR 0 3
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: LD_INT 3
31776: PUSH
31777: LD_INT 4
31779: PUSH
31780: LD_INT 5
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: ST_TO_ADDR
31789: GO 32648
31791: LD_INT 9
31793: DOUBLE
31794: EQUAL
31795: IFTRUE 31799
31797: GO 31825
31799: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31800: LD_ADDR_VAR 0 3
31804: PUSH
31805: LD_INT 2
31807: PUSH
31808: LD_INT 3
31810: PUSH
31811: LD_INT 4
31813: PUSH
31814: LD_INT 5
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: ST_TO_ADDR
31823: GO 32648
31825: LD_INT 7
31827: DOUBLE
31828: EQUAL
31829: IFTRUE 31833
31831: GO 31859
31833: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31834: LD_ADDR_VAR 0 3
31838: PUSH
31839: LD_INT 2
31841: PUSH
31842: LD_INT 3
31844: PUSH
31845: LD_INT 4
31847: PUSH
31848: LD_INT 5
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: ST_TO_ADDR
31857: GO 32648
31859: LD_INT 12
31861: DOUBLE
31862: EQUAL
31863: IFTRUE 31867
31865: GO 31893
31867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31868: LD_ADDR_VAR 0 3
31872: PUSH
31873: LD_INT 2
31875: PUSH
31876: LD_INT 3
31878: PUSH
31879: LD_INT 4
31881: PUSH
31882: LD_INT 5
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: ST_TO_ADDR
31891: GO 32648
31893: LD_INT 13
31895: DOUBLE
31896: EQUAL
31897: IFTRUE 31901
31899: GO 31927
31901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31902: LD_ADDR_VAR 0 3
31906: PUSH
31907: LD_INT 2
31909: PUSH
31910: LD_INT 3
31912: PUSH
31913: LD_INT 4
31915: PUSH
31916: LD_INT 5
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: ST_TO_ADDR
31925: GO 32648
31927: LD_INT 14
31929: DOUBLE
31930: EQUAL
31931: IFTRUE 31935
31933: GO 31953
31935: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31936: LD_ADDR_VAR 0 3
31940: PUSH
31941: LD_INT 4
31943: PUSH
31944: LD_INT 5
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: ST_TO_ADDR
31951: GO 32648
31953: LD_INT 6
31955: DOUBLE
31956: EQUAL
31957: IFTRUE 31961
31959: GO 31979
31961: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31962: LD_ADDR_VAR 0 3
31966: PUSH
31967: LD_INT 4
31969: PUSH
31970: LD_INT 5
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: ST_TO_ADDR
31977: GO 32648
31979: LD_INT 10
31981: DOUBLE
31982: EQUAL
31983: IFTRUE 31987
31985: GO 32005
31987: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31988: LD_ADDR_VAR 0 3
31992: PUSH
31993: LD_INT 4
31995: PUSH
31996: LD_INT 5
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: ST_TO_ADDR
32003: GO 32648
32005: LD_INT 22
32007: DOUBLE
32008: EQUAL
32009: IFTRUE 32013
32011: GO 32039
32013: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32014: LD_ADDR_VAR 0 3
32018: PUSH
32019: LD_INT 11
32021: PUSH
32022: LD_INT 12
32024: PUSH
32025: LD_INT 13
32027: PUSH
32028: LD_INT 14
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: ST_TO_ADDR
32037: GO 32648
32039: LD_INT 23
32041: DOUBLE
32042: EQUAL
32043: IFTRUE 32047
32045: GO 32073
32047: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32048: LD_ADDR_VAR 0 3
32052: PUSH
32053: LD_INT 11
32055: PUSH
32056: LD_INT 12
32058: PUSH
32059: LD_INT 13
32061: PUSH
32062: LD_INT 14
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: ST_TO_ADDR
32071: GO 32648
32073: LD_INT 24
32075: DOUBLE
32076: EQUAL
32077: IFTRUE 32081
32079: GO 32107
32081: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32082: LD_ADDR_VAR 0 3
32086: PUSH
32087: LD_INT 11
32089: PUSH
32090: LD_INT 12
32092: PUSH
32093: LD_INT 13
32095: PUSH
32096: LD_INT 14
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: ST_TO_ADDR
32105: GO 32648
32107: LD_INT 30
32109: DOUBLE
32110: EQUAL
32111: IFTRUE 32115
32113: GO 32141
32115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32116: LD_ADDR_VAR 0 3
32120: PUSH
32121: LD_INT 11
32123: PUSH
32124: LD_INT 12
32126: PUSH
32127: LD_INT 13
32129: PUSH
32130: LD_INT 14
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: ST_TO_ADDR
32139: GO 32648
32141: LD_INT 25
32143: DOUBLE
32144: EQUAL
32145: IFTRUE 32149
32147: GO 32167
32149: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32150: LD_ADDR_VAR 0 3
32154: PUSH
32155: LD_INT 13
32157: PUSH
32158: LD_INT 14
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: ST_TO_ADDR
32165: GO 32648
32167: LD_INT 27
32169: DOUBLE
32170: EQUAL
32171: IFTRUE 32175
32173: GO 32193
32175: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32176: LD_ADDR_VAR 0 3
32180: PUSH
32181: LD_INT 13
32183: PUSH
32184: LD_INT 14
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: ST_TO_ADDR
32191: GO 32648
32193: LD_INT 92
32195: DOUBLE
32196: EQUAL
32197: IFTRUE 32201
32199: GO 32227
32201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32202: LD_ADDR_VAR 0 3
32206: PUSH
32207: LD_INT 11
32209: PUSH
32210: LD_INT 12
32212: PUSH
32213: LD_INT 13
32215: PUSH
32216: LD_INT 14
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: ST_TO_ADDR
32225: GO 32648
32227: LD_INT 28
32229: DOUBLE
32230: EQUAL
32231: IFTRUE 32235
32233: GO 32253
32235: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32236: LD_ADDR_VAR 0 3
32240: PUSH
32241: LD_INT 13
32243: PUSH
32244: LD_INT 14
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: ST_TO_ADDR
32251: GO 32648
32253: LD_INT 29
32255: DOUBLE
32256: EQUAL
32257: IFTRUE 32261
32259: GO 32279
32261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32262: LD_ADDR_VAR 0 3
32266: PUSH
32267: LD_INT 13
32269: PUSH
32270: LD_INT 14
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: ST_TO_ADDR
32277: GO 32648
32279: LD_INT 31
32281: DOUBLE
32282: EQUAL
32283: IFTRUE 32287
32285: GO 32305
32287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32288: LD_ADDR_VAR 0 3
32292: PUSH
32293: LD_INT 13
32295: PUSH
32296: LD_INT 14
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: ST_TO_ADDR
32303: GO 32648
32305: LD_INT 26
32307: DOUBLE
32308: EQUAL
32309: IFTRUE 32313
32311: GO 32331
32313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32314: LD_ADDR_VAR 0 3
32318: PUSH
32319: LD_INT 13
32321: PUSH
32322: LD_INT 14
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: ST_TO_ADDR
32329: GO 32648
32331: LD_INT 42
32333: DOUBLE
32334: EQUAL
32335: IFTRUE 32339
32337: GO 32365
32339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32340: LD_ADDR_VAR 0 3
32344: PUSH
32345: LD_INT 21
32347: PUSH
32348: LD_INT 22
32350: PUSH
32351: LD_INT 23
32353: PUSH
32354: LD_INT 24
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: ST_TO_ADDR
32363: GO 32648
32365: LD_INT 43
32367: DOUBLE
32368: EQUAL
32369: IFTRUE 32373
32371: GO 32399
32373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32374: LD_ADDR_VAR 0 3
32378: PUSH
32379: LD_INT 21
32381: PUSH
32382: LD_INT 22
32384: PUSH
32385: LD_INT 23
32387: PUSH
32388: LD_INT 24
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: ST_TO_ADDR
32397: GO 32648
32399: LD_INT 44
32401: DOUBLE
32402: EQUAL
32403: IFTRUE 32407
32405: GO 32433
32407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32408: LD_ADDR_VAR 0 3
32412: PUSH
32413: LD_INT 21
32415: PUSH
32416: LD_INT 22
32418: PUSH
32419: LD_INT 23
32421: PUSH
32422: LD_INT 24
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: ST_TO_ADDR
32431: GO 32648
32433: LD_INT 45
32435: DOUBLE
32436: EQUAL
32437: IFTRUE 32441
32439: GO 32467
32441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32442: LD_ADDR_VAR 0 3
32446: PUSH
32447: LD_INT 21
32449: PUSH
32450: LD_INT 22
32452: PUSH
32453: LD_INT 23
32455: PUSH
32456: LD_INT 24
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: ST_TO_ADDR
32465: GO 32648
32467: LD_INT 49
32469: DOUBLE
32470: EQUAL
32471: IFTRUE 32475
32473: GO 32501
32475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32476: LD_ADDR_VAR 0 3
32480: PUSH
32481: LD_INT 21
32483: PUSH
32484: LD_INT 22
32486: PUSH
32487: LD_INT 23
32489: PUSH
32490: LD_INT 24
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: ST_TO_ADDR
32499: GO 32648
32501: LD_INT 51
32503: DOUBLE
32504: EQUAL
32505: IFTRUE 32509
32507: GO 32535
32509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32510: LD_ADDR_VAR 0 3
32514: PUSH
32515: LD_INT 21
32517: PUSH
32518: LD_INT 22
32520: PUSH
32521: LD_INT 23
32523: PUSH
32524: LD_INT 24
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: ST_TO_ADDR
32533: GO 32648
32535: LD_INT 52
32537: DOUBLE
32538: EQUAL
32539: IFTRUE 32543
32541: GO 32569
32543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32544: LD_ADDR_VAR 0 3
32548: PUSH
32549: LD_INT 21
32551: PUSH
32552: LD_INT 22
32554: PUSH
32555: LD_INT 23
32557: PUSH
32558: LD_INT 24
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: ST_TO_ADDR
32567: GO 32648
32569: LD_INT 53
32571: DOUBLE
32572: EQUAL
32573: IFTRUE 32577
32575: GO 32595
32577: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32578: LD_ADDR_VAR 0 3
32582: PUSH
32583: LD_INT 23
32585: PUSH
32586: LD_INT 24
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: ST_TO_ADDR
32593: GO 32648
32595: LD_INT 46
32597: DOUBLE
32598: EQUAL
32599: IFTRUE 32603
32601: GO 32621
32603: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32604: LD_ADDR_VAR 0 3
32608: PUSH
32609: LD_INT 23
32611: PUSH
32612: LD_INT 24
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: ST_TO_ADDR
32619: GO 32648
32621: LD_INT 47
32623: DOUBLE
32624: EQUAL
32625: IFTRUE 32629
32627: GO 32647
32629: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32630: LD_ADDR_VAR 0 3
32634: PUSH
32635: LD_INT 23
32637: PUSH
32638: LD_INT 24
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: ST_TO_ADDR
32645: GO 32648
32647: POP
// result := ( chassis in result ) ;
32648: LD_ADDR_VAR 0 3
32652: PUSH
32653: LD_VAR 0 1
32657: PUSH
32658: LD_VAR 0 3
32662: IN
32663: ST_TO_ADDR
// end ;
32664: LD_VAR 0 3
32668: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32669: LD_INT 0
32671: PPUSH
32672: PPUSH
32673: PPUSH
32674: PPUSH
32675: PPUSH
32676: PPUSH
32677: PPUSH
// result := array ;
32678: LD_ADDR_VAR 0 5
32682: PUSH
32683: LD_VAR 0 1
32687: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32688: LD_VAR 0 1
32692: NOT
32693: PUSH
32694: LD_VAR 0 2
32698: NOT
32699: OR
32700: PUSH
32701: LD_VAR 0 3
32705: NOT
32706: OR
32707: PUSH
32708: LD_VAR 0 2
32712: PUSH
32713: LD_VAR 0 1
32717: GREATER
32718: OR
32719: PUSH
32720: LD_VAR 0 3
32724: PUSH
32725: LD_VAR 0 1
32729: GREATER
32730: OR
32731: IFFALSE 32735
// exit ;
32733: GO 33031
// if direction then
32735: LD_VAR 0 4
32739: IFFALSE 32803
// begin d := 1 ;
32741: LD_ADDR_VAR 0 9
32745: PUSH
32746: LD_INT 1
32748: ST_TO_ADDR
// if i_from > i_to then
32749: LD_VAR 0 2
32753: PUSH
32754: LD_VAR 0 3
32758: GREATER
32759: IFFALSE 32785
// length := ( array - i_from ) + i_to else
32761: LD_ADDR_VAR 0 11
32765: PUSH
32766: LD_VAR 0 1
32770: PUSH
32771: LD_VAR 0 2
32775: MINUS
32776: PUSH
32777: LD_VAR 0 3
32781: PLUS
32782: ST_TO_ADDR
32783: GO 32801
// length := i_to - i_from ;
32785: LD_ADDR_VAR 0 11
32789: PUSH
32790: LD_VAR 0 3
32794: PUSH
32795: LD_VAR 0 2
32799: MINUS
32800: ST_TO_ADDR
// end else
32801: GO 32864
// begin d := - 1 ;
32803: LD_ADDR_VAR 0 9
32807: PUSH
32808: LD_INT 1
32810: NEG
32811: ST_TO_ADDR
// if i_from > i_to then
32812: LD_VAR 0 2
32816: PUSH
32817: LD_VAR 0 3
32821: GREATER
32822: IFFALSE 32842
// length := i_from - i_to else
32824: LD_ADDR_VAR 0 11
32828: PUSH
32829: LD_VAR 0 2
32833: PUSH
32834: LD_VAR 0 3
32838: MINUS
32839: ST_TO_ADDR
32840: GO 32864
// length := ( array - i_to ) + i_from ;
32842: LD_ADDR_VAR 0 11
32846: PUSH
32847: LD_VAR 0 1
32851: PUSH
32852: LD_VAR 0 3
32856: MINUS
32857: PUSH
32858: LD_VAR 0 2
32862: PLUS
32863: ST_TO_ADDR
// end ; if not length then
32864: LD_VAR 0 11
32868: NOT
32869: IFFALSE 32873
// exit ;
32871: GO 33031
// tmp := array ;
32873: LD_ADDR_VAR 0 10
32877: PUSH
32878: LD_VAR 0 1
32882: ST_TO_ADDR
// for i = 1 to length do
32883: LD_ADDR_VAR 0 6
32887: PUSH
32888: DOUBLE
32889: LD_INT 1
32891: DEC
32892: ST_TO_ADDR
32893: LD_VAR 0 11
32897: PUSH
32898: FOR_TO
32899: IFFALSE 33019
// begin for j = 1 to array do
32901: LD_ADDR_VAR 0 7
32905: PUSH
32906: DOUBLE
32907: LD_INT 1
32909: DEC
32910: ST_TO_ADDR
32911: LD_VAR 0 1
32915: PUSH
32916: FOR_TO
32917: IFFALSE 33005
// begin k := j + d ;
32919: LD_ADDR_VAR 0 8
32923: PUSH
32924: LD_VAR 0 7
32928: PUSH
32929: LD_VAR 0 9
32933: PLUS
32934: ST_TO_ADDR
// if k > array then
32935: LD_VAR 0 8
32939: PUSH
32940: LD_VAR 0 1
32944: GREATER
32945: IFFALSE 32955
// k := 1 ;
32947: LD_ADDR_VAR 0 8
32951: PUSH
32952: LD_INT 1
32954: ST_TO_ADDR
// if not k then
32955: LD_VAR 0 8
32959: NOT
32960: IFFALSE 32972
// k := array ;
32962: LD_ADDR_VAR 0 8
32966: PUSH
32967: LD_VAR 0 1
32971: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32972: LD_ADDR_VAR 0 10
32976: PUSH
32977: LD_VAR 0 10
32981: PPUSH
32982: LD_VAR 0 8
32986: PPUSH
32987: LD_VAR 0 1
32991: PUSH
32992: LD_VAR 0 7
32996: ARRAY
32997: PPUSH
32998: CALL_OW 1
33002: ST_TO_ADDR
// end ;
33003: GO 32916
33005: POP
33006: POP
// array := tmp ;
33007: LD_ADDR_VAR 0 1
33011: PUSH
33012: LD_VAR 0 10
33016: ST_TO_ADDR
// end ;
33017: GO 32898
33019: POP
33020: POP
// result := array ;
33021: LD_ADDR_VAR 0 5
33025: PUSH
33026: LD_VAR 0 1
33030: ST_TO_ADDR
// end ;
33031: LD_VAR 0 5
33035: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33036: LD_INT 0
33038: PPUSH
33039: PPUSH
// result := 0 ;
33040: LD_ADDR_VAR 0 3
33044: PUSH
33045: LD_INT 0
33047: ST_TO_ADDR
// if not array or not value in array then
33048: LD_VAR 0 1
33052: NOT
33053: PUSH
33054: LD_VAR 0 2
33058: PUSH
33059: LD_VAR 0 1
33063: IN
33064: NOT
33065: OR
33066: IFFALSE 33070
// exit ;
33068: GO 33124
// for i = 1 to array do
33070: LD_ADDR_VAR 0 4
33074: PUSH
33075: DOUBLE
33076: LD_INT 1
33078: DEC
33079: ST_TO_ADDR
33080: LD_VAR 0 1
33084: PUSH
33085: FOR_TO
33086: IFFALSE 33122
// if value = array [ i ] then
33088: LD_VAR 0 2
33092: PUSH
33093: LD_VAR 0 1
33097: PUSH
33098: LD_VAR 0 4
33102: ARRAY
33103: EQUAL
33104: IFFALSE 33120
// begin result := i ;
33106: LD_ADDR_VAR 0 3
33110: PUSH
33111: LD_VAR 0 4
33115: ST_TO_ADDR
// exit ;
33116: POP
33117: POP
33118: GO 33124
// end ;
33120: GO 33085
33122: POP
33123: POP
// end ;
33124: LD_VAR 0 3
33128: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33129: LD_INT 0
33131: PPUSH
// vc_chassis := chassis ;
33132: LD_ADDR_OWVAR 37
33136: PUSH
33137: LD_VAR 0 1
33141: ST_TO_ADDR
// vc_engine := engine ;
33142: LD_ADDR_OWVAR 39
33146: PUSH
33147: LD_VAR 0 2
33151: ST_TO_ADDR
// vc_control := control ;
33152: LD_ADDR_OWVAR 38
33156: PUSH
33157: LD_VAR 0 3
33161: ST_TO_ADDR
// vc_weapon := weapon ;
33162: LD_ADDR_OWVAR 40
33166: PUSH
33167: LD_VAR 0 4
33171: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33172: LD_ADDR_OWVAR 41
33176: PUSH
33177: LD_VAR 0 5
33181: ST_TO_ADDR
// end ;
33182: LD_VAR 0 6
33186: RET
// export function WantPlant ( unit ) ; var task ; begin
33187: LD_INT 0
33189: PPUSH
33190: PPUSH
// result := false ;
33191: LD_ADDR_VAR 0 2
33195: PUSH
33196: LD_INT 0
33198: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33199: LD_ADDR_VAR 0 3
33203: PUSH
33204: LD_VAR 0 1
33208: PPUSH
33209: CALL_OW 437
33213: ST_TO_ADDR
// if task then
33214: LD_VAR 0 3
33218: IFFALSE 33246
// if task [ 1 ] [ 1 ] = p then
33220: LD_VAR 0 3
33224: PUSH
33225: LD_INT 1
33227: ARRAY
33228: PUSH
33229: LD_INT 1
33231: ARRAY
33232: PUSH
33233: LD_STRING p
33235: EQUAL
33236: IFFALSE 33246
// result := true ;
33238: LD_ADDR_VAR 0 2
33242: PUSH
33243: LD_INT 1
33245: ST_TO_ADDR
// end ;
33246: LD_VAR 0 2
33250: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33251: LD_INT 0
33253: PPUSH
33254: PPUSH
33255: PPUSH
33256: PPUSH
// if pos < 1 then
33257: LD_VAR 0 2
33261: PUSH
33262: LD_INT 1
33264: LESS
33265: IFFALSE 33269
// exit ;
33267: GO 33572
// if pos = 1 then
33269: LD_VAR 0 2
33273: PUSH
33274: LD_INT 1
33276: EQUAL
33277: IFFALSE 33310
// result := Replace ( arr , pos [ 1 ] , value ) else
33279: LD_ADDR_VAR 0 4
33283: PUSH
33284: LD_VAR 0 1
33288: PPUSH
33289: LD_VAR 0 2
33293: PUSH
33294: LD_INT 1
33296: ARRAY
33297: PPUSH
33298: LD_VAR 0 3
33302: PPUSH
33303: CALL_OW 1
33307: ST_TO_ADDR
33308: GO 33572
// begin tmp := arr ;
33310: LD_ADDR_VAR 0 6
33314: PUSH
33315: LD_VAR 0 1
33319: ST_TO_ADDR
// s_arr := [ tmp ] ;
33320: LD_ADDR_VAR 0 7
33324: PUSH
33325: LD_VAR 0 6
33329: PUSH
33330: EMPTY
33331: LIST
33332: ST_TO_ADDR
// for i = 1 to pos - 1 do
33333: LD_ADDR_VAR 0 5
33337: PUSH
33338: DOUBLE
33339: LD_INT 1
33341: DEC
33342: ST_TO_ADDR
33343: LD_VAR 0 2
33347: PUSH
33348: LD_INT 1
33350: MINUS
33351: PUSH
33352: FOR_TO
33353: IFFALSE 33398
// begin tmp := tmp [ pos [ i ] ] ;
33355: LD_ADDR_VAR 0 6
33359: PUSH
33360: LD_VAR 0 6
33364: PUSH
33365: LD_VAR 0 2
33369: PUSH
33370: LD_VAR 0 5
33374: ARRAY
33375: ARRAY
33376: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33377: LD_ADDR_VAR 0 7
33381: PUSH
33382: LD_VAR 0 7
33386: PUSH
33387: LD_VAR 0 6
33391: PUSH
33392: EMPTY
33393: LIST
33394: ADD
33395: ST_TO_ADDR
// end ;
33396: GO 33352
33398: POP
33399: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33400: LD_ADDR_VAR 0 6
33404: PUSH
33405: LD_VAR 0 6
33409: PPUSH
33410: LD_VAR 0 2
33414: PUSH
33415: LD_VAR 0 2
33419: ARRAY
33420: PPUSH
33421: LD_VAR 0 3
33425: PPUSH
33426: CALL_OW 1
33430: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33431: LD_ADDR_VAR 0 7
33435: PUSH
33436: LD_VAR 0 7
33440: PPUSH
33441: LD_VAR 0 7
33445: PPUSH
33446: LD_VAR 0 6
33450: PPUSH
33451: CALL_OW 1
33455: ST_TO_ADDR
// for i = s_arr downto 2 do
33456: LD_ADDR_VAR 0 5
33460: PUSH
33461: DOUBLE
33462: LD_VAR 0 7
33466: INC
33467: ST_TO_ADDR
33468: LD_INT 2
33470: PUSH
33471: FOR_DOWNTO
33472: IFFALSE 33556
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33474: LD_ADDR_VAR 0 6
33478: PUSH
33479: LD_VAR 0 7
33483: PUSH
33484: LD_VAR 0 5
33488: PUSH
33489: LD_INT 1
33491: MINUS
33492: ARRAY
33493: PPUSH
33494: LD_VAR 0 2
33498: PUSH
33499: LD_VAR 0 5
33503: PUSH
33504: LD_INT 1
33506: MINUS
33507: ARRAY
33508: PPUSH
33509: LD_VAR 0 7
33513: PUSH
33514: LD_VAR 0 5
33518: ARRAY
33519: PPUSH
33520: CALL_OW 1
33524: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33525: LD_ADDR_VAR 0 7
33529: PUSH
33530: LD_VAR 0 7
33534: PPUSH
33535: LD_VAR 0 5
33539: PUSH
33540: LD_INT 1
33542: MINUS
33543: PPUSH
33544: LD_VAR 0 6
33548: PPUSH
33549: CALL_OW 1
33553: ST_TO_ADDR
// end ;
33554: GO 33471
33556: POP
33557: POP
// result := s_arr [ 1 ] ;
33558: LD_ADDR_VAR 0 4
33562: PUSH
33563: LD_VAR 0 7
33567: PUSH
33568: LD_INT 1
33570: ARRAY
33571: ST_TO_ADDR
// end ; end ;
33572: LD_VAR 0 4
33576: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33577: LD_INT 0
33579: PPUSH
33580: PPUSH
// if not list then
33581: LD_VAR 0 1
33585: NOT
33586: IFFALSE 33590
// exit ;
33588: GO 33681
// i := list [ pos1 ] ;
33590: LD_ADDR_VAR 0 5
33594: PUSH
33595: LD_VAR 0 1
33599: PUSH
33600: LD_VAR 0 2
33604: ARRAY
33605: ST_TO_ADDR
// if not i then
33606: LD_VAR 0 5
33610: NOT
33611: IFFALSE 33615
// exit ;
33613: GO 33681
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33615: LD_ADDR_VAR 0 1
33619: PUSH
33620: LD_VAR 0 1
33624: PPUSH
33625: LD_VAR 0 2
33629: PPUSH
33630: LD_VAR 0 1
33634: PUSH
33635: LD_VAR 0 3
33639: ARRAY
33640: PPUSH
33641: CALL_OW 1
33645: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33646: LD_ADDR_VAR 0 1
33650: PUSH
33651: LD_VAR 0 1
33655: PPUSH
33656: LD_VAR 0 3
33660: PPUSH
33661: LD_VAR 0 5
33665: PPUSH
33666: CALL_OW 1
33670: ST_TO_ADDR
// result := list ;
33671: LD_ADDR_VAR 0 4
33675: PUSH
33676: LD_VAR 0 1
33680: ST_TO_ADDR
// end ;
33681: LD_VAR 0 4
33685: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33686: LD_INT 0
33688: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33689: LD_ADDR_VAR 0 5
33693: PUSH
33694: LD_VAR 0 1
33698: PPUSH
33699: CALL_OW 250
33703: PPUSH
33704: LD_VAR 0 1
33708: PPUSH
33709: CALL_OW 251
33713: PPUSH
33714: LD_VAR 0 2
33718: PPUSH
33719: LD_VAR 0 3
33723: PPUSH
33724: LD_VAR 0 4
33728: PPUSH
33729: CALL 33739 0 5
33733: ST_TO_ADDR
// end ;
33734: LD_VAR 0 5
33738: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33739: LD_INT 0
33741: PPUSH
33742: PPUSH
33743: PPUSH
33744: PPUSH
// if not list then
33745: LD_VAR 0 3
33749: NOT
33750: IFFALSE 33754
// exit ;
33752: GO 34142
// result := [ ] ;
33754: LD_ADDR_VAR 0 6
33758: PUSH
33759: EMPTY
33760: ST_TO_ADDR
// for i in list do
33761: LD_ADDR_VAR 0 7
33765: PUSH
33766: LD_VAR 0 3
33770: PUSH
33771: FOR_IN
33772: IFFALSE 33974
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33774: LD_ADDR_VAR 0 9
33778: PUSH
33779: LD_VAR 0 7
33783: PPUSH
33784: LD_VAR 0 1
33788: PPUSH
33789: LD_VAR 0 2
33793: PPUSH
33794: CALL_OW 297
33798: ST_TO_ADDR
// if not result then
33799: LD_VAR 0 6
33803: NOT
33804: IFFALSE 33830
// result := [ [ i , tmp ] ] else
33806: LD_ADDR_VAR 0 6
33810: PUSH
33811: LD_VAR 0 7
33815: PUSH
33816: LD_VAR 0 9
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: EMPTY
33826: LIST
33827: ST_TO_ADDR
33828: GO 33972
// begin if result [ result ] [ 2 ] < tmp then
33830: LD_VAR 0 6
33834: PUSH
33835: LD_VAR 0 6
33839: ARRAY
33840: PUSH
33841: LD_INT 2
33843: ARRAY
33844: PUSH
33845: LD_VAR 0 9
33849: LESS
33850: IFFALSE 33892
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33852: LD_ADDR_VAR 0 6
33856: PUSH
33857: LD_VAR 0 6
33861: PPUSH
33862: LD_VAR 0 6
33866: PUSH
33867: LD_INT 1
33869: PLUS
33870: PPUSH
33871: LD_VAR 0 7
33875: PUSH
33876: LD_VAR 0 9
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PPUSH
33885: CALL_OW 2
33889: ST_TO_ADDR
33890: GO 33972
// for j = 1 to result do
33892: LD_ADDR_VAR 0 8
33896: PUSH
33897: DOUBLE
33898: LD_INT 1
33900: DEC
33901: ST_TO_ADDR
33902: LD_VAR 0 6
33906: PUSH
33907: FOR_TO
33908: IFFALSE 33970
// begin if tmp < result [ j ] [ 2 ] then
33910: LD_VAR 0 9
33914: PUSH
33915: LD_VAR 0 6
33919: PUSH
33920: LD_VAR 0 8
33924: ARRAY
33925: PUSH
33926: LD_INT 2
33928: ARRAY
33929: LESS
33930: IFFALSE 33968
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33932: LD_ADDR_VAR 0 6
33936: PUSH
33937: LD_VAR 0 6
33941: PPUSH
33942: LD_VAR 0 8
33946: PPUSH
33947: LD_VAR 0 7
33951: PUSH
33952: LD_VAR 0 9
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PPUSH
33961: CALL_OW 2
33965: ST_TO_ADDR
// break ;
33966: GO 33970
// end ; end ;
33968: GO 33907
33970: POP
33971: POP
// end ; end ;
33972: GO 33771
33974: POP
33975: POP
// if result and not asc then
33976: LD_VAR 0 6
33980: PUSH
33981: LD_VAR 0 4
33985: NOT
33986: AND
33987: IFFALSE 34062
// begin tmp := result ;
33989: LD_ADDR_VAR 0 9
33993: PUSH
33994: LD_VAR 0 6
33998: ST_TO_ADDR
// for i = tmp downto 1 do
33999: LD_ADDR_VAR 0 7
34003: PUSH
34004: DOUBLE
34005: LD_VAR 0 9
34009: INC
34010: ST_TO_ADDR
34011: LD_INT 1
34013: PUSH
34014: FOR_DOWNTO
34015: IFFALSE 34060
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34017: LD_ADDR_VAR 0 6
34021: PUSH
34022: LD_VAR 0 6
34026: PPUSH
34027: LD_VAR 0 9
34031: PUSH
34032: LD_VAR 0 7
34036: MINUS
34037: PUSH
34038: LD_INT 1
34040: PLUS
34041: PPUSH
34042: LD_VAR 0 9
34046: PUSH
34047: LD_VAR 0 7
34051: ARRAY
34052: PPUSH
34053: CALL_OW 1
34057: ST_TO_ADDR
34058: GO 34014
34060: POP
34061: POP
// end ; tmp := [ ] ;
34062: LD_ADDR_VAR 0 9
34066: PUSH
34067: EMPTY
34068: ST_TO_ADDR
// if mode then
34069: LD_VAR 0 5
34073: IFFALSE 34142
// begin for i = 1 to result do
34075: LD_ADDR_VAR 0 7
34079: PUSH
34080: DOUBLE
34081: LD_INT 1
34083: DEC
34084: ST_TO_ADDR
34085: LD_VAR 0 6
34089: PUSH
34090: FOR_TO
34091: IFFALSE 34130
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34093: LD_ADDR_VAR 0 9
34097: PUSH
34098: LD_VAR 0 9
34102: PPUSH
34103: LD_VAR 0 7
34107: PPUSH
34108: LD_VAR 0 6
34112: PUSH
34113: LD_VAR 0 7
34117: ARRAY
34118: PUSH
34119: LD_INT 1
34121: ARRAY
34122: PPUSH
34123: CALL_OW 1
34127: ST_TO_ADDR
34128: GO 34090
34130: POP
34131: POP
// result := tmp ;
34132: LD_ADDR_VAR 0 6
34136: PUSH
34137: LD_VAR 0 9
34141: ST_TO_ADDR
// end ; end ;
34142: LD_VAR 0 6
34146: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34147: LD_INT 0
34149: PPUSH
34150: PPUSH
34151: PPUSH
34152: PPUSH
34153: PPUSH
34154: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34155: LD_ADDR_VAR 0 5
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: EMPTY
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: ST_TO_ADDR
// if not x or not y then
34177: LD_VAR 0 2
34181: NOT
34182: PUSH
34183: LD_VAR 0 3
34187: NOT
34188: OR
34189: IFFALSE 34193
// exit ;
34191: GO 35843
// if not range then
34193: LD_VAR 0 4
34197: NOT
34198: IFFALSE 34208
// range := 10 ;
34200: LD_ADDR_VAR 0 4
34204: PUSH
34205: LD_INT 10
34207: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34208: LD_ADDR_VAR 0 8
34212: PUSH
34213: LD_INT 81
34215: PUSH
34216: LD_VAR 0 1
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 92
34227: PUSH
34228: LD_VAR 0 2
34232: PUSH
34233: LD_VAR 0 3
34237: PUSH
34238: LD_VAR 0 4
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 3
34251: PUSH
34252: LD_INT 21
34254: PUSH
34255: LD_INT 3
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: LIST
34270: PPUSH
34271: CALL_OW 69
34275: ST_TO_ADDR
// if not tmp then
34276: LD_VAR 0 8
34280: NOT
34281: IFFALSE 34285
// exit ;
34283: GO 35843
// for i in tmp do
34285: LD_ADDR_VAR 0 6
34289: PUSH
34290: LD_VAR 0 8
34294: PUSH
34295: FOR_IN
34296: IFFALSE 35818
// begin points := [ 0 , 0 , 0 ] ;
34298: LD_ADDR_VAR 0 9
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: ST_TO_ADDR
// bpoints := 1 ;
34317: LD_ADDR_VAR 0 10
34321: PUSH
34322: LD_INT 1
34324: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34325: LD_VAR 0 6
34329: PPUSH
34330: CALL_OW 247
34334: PUSH
34335: LD_INT 1
34337: DOUBLE
34338: EQUAL
34339: IFTRUE 34343
34341: GO 34921
34343: POP
// begin if GetClass ( i ) = 1 then
34344: LD_VAR 0 6
34348: PPUSH
34349: CALL_OW 257
34353: PUSH
34354: LD_INT 1
34356: EQUAL
34357: IFFALSE 34378
// points := [ 10 , 5 , 3 ] ;
34359: LD_ADDR_VAR 0 9
34363: PUSH
34364: LD_INT 10
34366: PUSH
34367: LD_INT 5
34369: PUSH
34370: LD_INT 3
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34378: LD_VAR 0 6
34382: PPUSH
34383: CALL_OW 257
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: LD_INT 3
34393: PUSH
34394: LD_INT 4
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: LIST
34401: IN
34402: IFFALSE 34423
// points := [ 3 , 2 , 1 ] ;
34404: LD_ADDR_VAR 0 9
34408: PUSH
34409: LD_INT 3
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: LIST
34422: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34423: LD_VAR 0 6
34427: PPUSH
34428: CALL_OW 257
34432: PUSH
34433: LD_INT 5
34435: EQUAL
34436: IFFALSE 34457
// points := [ 130 , 5 , 2 ] ;
34438: LD_ADDR_VAR 0 9
34442: PUSH
34443: LD_INT 130
34445: PUSH
34446: LD_INT 5
34448: PUSH
34449: LD_INT 2
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34457: LD_VAR 0 6
34461: PPUSH
34462: CALL_OW 257
34466: PUSH
34467: LD_INT 8
34469: EQUAL
34470: IFFALSE 34491
// points := [ 35 , 35 , 30 ] ;
34472: LD_ADDR_VAR 0 9
34476: PUSH
34477: LD_INT 35
34479: PUSH
34480: LD_INT 35
34482: PUSH
34483: LD_INT 30
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34491: LD_VAR 0 6
34495: PPUSH
34496: CALL_OW 257
34500: PUSH
34501: LD_INT 9
34503: EQUAL
34504: IFFALSE 34525
// points := [ 20 , 55 , 40 ] ;
34506: LD_ADDR_VAR 0 9
34510: PUSH
34511: LD_INT 20
34513: PUSH
34514: LD_INT 55
34516: PUSH
34517: LD_INT 40
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: LIST
34524: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34525: LD_VAR 0 6
34529: PPUSH
34530: CALL_OW 257
34534: PUSH
34535: LD_INT 12
34537: PUSH
34538: LD_INT 16
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: IN
34545: IFFALSE 34566
// points := [ 5 , 3 , 2 ] ;
34547: LD_ADDR_VAR 0 9
34551: PUSH
34552: LD_INT 5
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34566: LD_VAR 0 6
34570: PPUSH
34571: CALL_OW 257
34575: PUSH
34576: LD_INT 17
34578: EQUAL
34579: IFFALSE 34600
// points := [ 100 , 50 , 75 ] ;
34581: LD_ADDR_VAR 0 9
34585: PUSH
34586: LD_INT 100
34588: PUSH
34589: LD_INT 50
34591: PUSH
34592: LD_INT 75
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: LIST
34599: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34600: LD_VAR 0 6
34604: PPUSH
34605: CALL_OW 257
34609: PUSH
34610: LD_INT 15
34612: EQUAL
34613: IFFALSE 34634
// points := [ 10 , 5 , 3 ] ;
34615: LD_ADDR_VAR 0 9
34619: PUSH
34620: LD_INT 10
34622: PUSH
34623: LD_INT 5
34625: PUSH
34626: LD_INT 3
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34634: LD_VAR 0 6
34638: PPUSH
34639: CALL_OW 257
34643: PUSH
34644: LD_INT 14
34646: EQUAL
34647: IFFALSE 34668
// points := [ 10 , 0 , 0 ] ;
34649: LD_ADDR_VAR 0 9
34653: PUSH
34654: LD_INT 10
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: LIST
34667: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34668: LD_VAR 0 6
34672: PPUSH
34673: CALL_OW 257
34677: PUSH
34678: LD_INT 11
34680: EQUAL
34681: IFFALSE 34702
// points := [ 30 , 10 , 5 ] ;
34683: LD_ADDR_VAR 0 9
34687: PUSH
34688: LD_INT 30
34690: PUSH
34691: LD_INT 10
34693: PUSH
34694: LD_INT 5
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: LIST
34701: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34702: LD_VAR 0 1
34706: PPUSH
34707: LD_INT 5
34709: PPUSH
34710: CALL_OW 321
34714: PUSH
34715: LD_INT 2
34717: EQUAL
34718: IFFALSE 34735
// bpoints := bpoints * 1.8 ;
34720: LD_ADDR_VAR 0 10
34724: PUSH
34725: LD_VAR 0 10
34729: PUSH
34730: LD_REAL  1.80000000000000E+0000
34733: MUL
34734: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34735: LD_VAR 0 6
34739: PPUSH
34740: CALL_OW 257
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: LD_INT 3
34753: PUSH
34754: LD_INT 4
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: IN
34763: PUSH
34764: LD_VAR 0 1
34768: PPUSH
34769: LD_INT 51
34771: PPUSH
34772: CALL_OW 321
34776: PUSH
34777: LD_INT 2
34779: EQUAL
34780: AND
34781: IFFALSE 34798
// bpoints := bpoints * 1.2 ;
34783: LD_ADDR_VAR 0 10
34787: PUSH
34788: LD_VAR 0 10
34792: PUSH
34793: LD_REAL  1.20000000000000E+0000
34796: MUL
34797: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34798: LD_VAR 0 6
34802: PPUSH
34803: CALL_OW 257
34807: PUSH
34808: LD_INT 5
34810: PUSH
34811: LD_INT 7
34813: PUSH
34814: LD_INT 9
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: IN
34822: PUSH
34823: LD_VAR 0 1
34827: PPUSH
34828: LD_INT 52
34830: PPUSH
34831: CALL_OW 321
34835: PUSH
34836: LD_INT 2
34838: EQUAL
34839: AND
34840: IFFALSE 34857
// bpoints := bpoints * 1.5 ;
34842: LD_ADDR_VAR 0 10
34846: PUSH
34847: LD_VAR 0 10
34851: PUSH
34852: LD_REAL  1.50000000000000E+0000
34855: MUL
34856: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34857: LD_VAR 0 1
34861: PPUSH
34862: LD_INT 66
34864: PPUSH
34865: CALL_OW 321
34869: PUSH
34870: LD_INT 2
34872: EQUAL
34873: IFFALSE 34890
// bpoints := bpoints * 1.1 ;
34875: LD_ADDR_VAR 0 10
34879: PUSH
34880: LD_VAR 0 10
34884: PUSH
34885: LD_REAL  1.10000000000000E+0000
34888: MUL
34889: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34890: LD_ADDR_VAR 0 10
34894: PUSH
34895: LD_VAR 0 10
34899: PUSH
34900: LD_VAR 0 6
34904: PPUSH
34905: LD_INT 1
34907: PPUSH
34908: CALL_OW 259
34912: PUSH
34913: LD_REAL  1.15000000000000E+0000
34916: MUL
34917: MUL
34918: ST_TO_ADDR
// end ; unit_vehicle :
34919: GO 35747
34921: LD_INT 2
34923: DOUBLE
34924: EQUAL
34925: IFTRUE 34929
34927: GO 35735
34929: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34930: LD_VAR 0 6
34934: PPUSH
34935: CALL_OW 264
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: LD_INT 42
34945: PUSH
34946: LD_INT 24
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: IN
34954: IFFALSE 34975
// points := [ 25 , 5 , 3 ] ;
34956: LD_ADDR_VAR 0 9
34960: PUSH
34961: LD_INT 25
34963: PUSH
34964: LD_INT 5
34966: PUSH
34967: LD_INT 3
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: LIST
34974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34975: LD_VAR 0 6
34979: PPUSH
34980: CALL_OW 264
34984: PUSH
34985: LD_INT 4
34987: PUSH
34988: LD_INT 43
34990: PUSH
34991: LD_INT 25
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: IN
34999: IFFALSE 35020
// points := [ 40 , 15 , 5 ] ;
35001: LD_ADDR_VAR 0 9
35005: PUSH
35006: LD_INT 40
35008: PUSH
35009: LD_INT 15
35011: PUSH
35012: LD_INT 5
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: LIST
35019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35020: LD_VAR 0 6
35024: PPUSH
35025: CALL_OW 264
35029: PUSH
35030: LD_INT 3
35032: PUSH
35033: LD_INT 23
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: IN
35040: IFFALSE 35061
// points := [ 7 , 25 , 8 ] ;
35042: LD_ADDR_VAR 0 9
35046: PUSH
35047: LD_INT 7
35049: PUSH
35050: LD_INT 25
35052: PUSH
35053: LD_INT 8
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35061: LD_VAR 0 6
35065: PPUSH
35066: CALL_OW 264
35070: PUSH
35071: LD_INT 5
35073: PUSH
35074: LD_INT 27
35076: PUSH
35077: LD_INT 44
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: LIST
35084: IN
35085: IFFALSE 35106
// points := [ 14 , 50 , 16 ] ;
35087: LD_ADDR_VAR 0 9
35091: PUSH
35092: LD_INT 14
35094: PUSH
35095: LD_INT 50
35097: PUSH
35098: LD_INT 16
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: LIST
35105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35106: LD_VAR 0 6
35110: PPUSH
35111: CALL_OW 264
35115: PUSH
35116: LD_INT 6
35118: PUSH
35119: LD_INT 46
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: IN
35126: IFFALSE 35147
// points := [ 32 , 120 , 70 ] ;
35128: LD_ADDR_VAR 0 9
35132: PUSH
35133: LD_INT 32
35135: PUSH
35136: LD_INT 120
35138: PUSH
35139: LD_INT 70
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: LIST
35146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35147: LD_VAR 0 6
35151: PPUSH
35152: CALL_OW 264
35156: PUSH
35157: LD_INT 7
35159: PUSH
35160: LD_INT 28
35162: PUSH
35163: LD_INT 45
35165: PUSH
35166: LD_INT 92
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: IN
35175: IFFALSE 35196
// points := [ 35 , 20 , 45 ] ;
35177: LD_ADDR_VAR 0 9
35181: PUSH
35182: LD_INT 35
35184: PUSH
35185: LD_INT 20
35187: PUSH
35188: LD_INT 45
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: LIST
35195: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35196: LD_VAR 0 6
35200: PPUSH
35201: CALL_OW 264
35205: PUSH
35206: LD_INT 47
35208: PUSH
35209: EMPTY
35210: LIST
35211: IN
35212: IFFALSE 35233
// points := [ 67 , 45 , 75 ] ;
35214: LD_ADDR_VAR 0 9
35218: PUSH
35219: LD_INT 67
35221: PUSH
35222: LD_INT 45
35224: PUSH
35225: LD_INT 75
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35233: LD_VAR 0 6
35237: PPUSH
35238: CALL_OW 264
35242: PUSH
35243: LD_INT 26
35245: PUSH
35246: EMPTY
35247: LIST
35248: IN
35249: IFFALSE 35270
// points := [ 120 , 30 , 80 ] ;
35251: LD_ADDR_VAR 0 9
35255: PUSH
35256: LD_INT 120
35258: PUSH
35259: LD_INT 30
35261: PUSH
35262: LD_INT 80
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35270: LD_VAR 0 6
35274: PPUSH
35275: CALL_OW 264
35279: PUSH
35280: LD_INT 22
35282: PUSH
35283: EMPTY
35284: LIST
35285: IN
35286: IFFALSE 35307
// points := [ 40 , 1 , 1 ] ;
35288: LD_ADDR_VAR 0 9
35292: PUSH
35293: LD_INT 40
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35307: LD_VAR 0 6
35311: PPUSH
35312: CALL_OW 264
35316: PUSH
35317: LD_INT 29
35319: PUSH
35320: EMPTY
35321: LIST
35322: IN
35323: IFFALSE 35344
// points := [ 70 , 200 , 400 ] ;
35325: LD_ADDR_VAR 0 9
35329: PUSH
35330: LD_INT 70
35332: PUSH
35333: LD_INT 200
35335: PUSH
35336: LD_INT 400
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35344: LD_VAR 0 6
35348: PPUSH
35349: CALL_OW 264
35353: PUSH
35354: LD_INT 14
35356: PUSH
35357: LD_INT 53
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: IN
35364: IFFALSE 35385
// points := [ 40 , 10 , 20 ] ;
35366: LD_ADDR_VAR 0 9
35370: PUSH
35371: LD_INT 40
35373: PUSH
35374: LD_INT 10
35376: PUSH
35377: LD_INT 20
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35385: LD_VAR 0 6
35389: PPUSH
35390: CALL_OW 264
35394: PUSH
35395: LD_INT 9
35397: PUSH
35398: EMPTY
35399: LIST
35400: IN
35401: IFFALSE 35422
// points := [ 5 , 70 , 20 ] ;
35403: LD_ADDR_VAR 0 9
35407: PUSH
35408: LD_INT 5
35410: PUSH
35411: LD_INT 70
35413: PUSH
35414: LD_INT 20
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35422: LD_VAR 0 6
35426: PPUSH
35427: CALL_OW 264
35431: PUSH
35432: LD_INT 10
35434: PUSH
35435: EMPTY
35436: LIST
35437: IN
35438: IFFALSE 35459
// points := [ 35 , 110 , 70 ] ;
35440: LD_ADDR_VAR 0 9
35444: PUSH
35445: LD_INT 35
35447: PUSH
35448: LD_INT 110
35450: PUSH
35451: LD_INT 70
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35459: LD_VAR 0 6
35463: PPUSH
35464: CALL_OW 265
35468: PUSH
35469: LD_INT 25
35471: EQUAL
35472: IFFALSE 35493
// points := [ 80 , 65 , 100 ] ;
35474: LD_ADDR_VAR 0 9
35478: PUSH
35479: LD_INT 80
35481: PUSH
35482: LD_INT 65
35484: PUSH
35485: LD_INT 100
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35493: LD_VAR 0 6
35497: PPUSH
35498: CALL_OW 263
35502: PUSH
35503: LD_INT 1
35505: EQUAL
35506: IFFALSE 35541
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35508: LD_ADDR_VAR 0 10
35512: PUSH
35513: LD_VAR 0 10
35517: PUSH
35518: LD_VAR 0 6
35522: PPUSH
35523: CALL_OW 311
35527: PPUSH
35528: LD_INT 3
35530: PPUSH
35531: CALL_OW 259
35535: PUSH
35536: LD_INT 4
35538: MUL
35539: MUL
35540: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35541: LD_VAR 0 6
35545: PPUSH
35546: CALL_OW 263
35550: PUSH
35551: LD_INT 2
35553: EQUAL
35554: IFFALSE 35605
// begin j := IsControledBy ( i ) ;
35556: LD_ADDR_VAR 0 7
35560: PUSH
35561: LD_VAR 0 6
35565: PPUSH
35566: CALL_OW 312
35570: ST_TO_ADDR
// if j then
35571: LD_VAR 0 7
35575: IFFALSE 35605
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35577: LD_ADDR_VAR 0 10
35581: PUSH
35582: LD_VAR 0 10
35586: PUSH
35587: LD_VAR 0 7
35591: PPUSH
35592: LD_INT 3
35594: PPUSH
35595: CALL_OW 259
35599: PUSH
35600: LD_INT 3
35602: MUL
35603: MUL
35604: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35605: LD_VAR 0 6
35609: PPUSH
35610: CALL_OW 264
35614: PUSH
35615: LD_INT 5
35617: PUSH
35618: LD_INT 6
35620: PUSH
35621: LD_INT 46
35623: PUSH
35624: LD_INT 44
35626: PUSH
35627: LD_INT 47
35629: PUSH
35630: LD_INT 45
35632: PUSH
35633: LD_INT 28
35635: PUSH
35636: LD_INT 7
35638: PUSH
35639: LD_INT 27
35641: PUSH
35642: LD_INT 29
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: IN
35657: PUSH
35658: LD_VAR 0 1
35662: PPUSH
35663: LD_INT 52
35665: PPUSH
35666: CALL_OW 321
35670: PUSH
35671: LD_INT 2
35673: EQUAL
35674: AND
35675: IFFALSE 35692
// bpoints := bpoints * 1.2 ;
35677: LD_ADDR_VAR 0 10
35681: PUSH
35682: LD_VAR 0 10
35686: PUSH
35687: LD_REAL  1.20000000000000E+0000
35690: MUL
35691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35692: LD_VAR 0 6
35696: PPUSH
35697: CALL_OW 264
35701: PUSH
35702: LD_INT 6
35704: PUSH
35705: LD_INT 46
35707: PUSH
35708: LD_INT 47
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: LIST
35715: IN
35716: IFFALSE 35733
// bpoints := bpoints * 1.2 ;
35718: LD_ADDR_VAR 0 10
35722: PUSH
35723: LD_VAR 0 10
35727: PUSH
35728: LD_REAL  1.20000000000000E+0000
35731: MUL
35732: ST_TO_ADDR
// end ; unit_building :
35733: GO 35747
35735: LD_INT 3
35737: DOUBLE
35738: EQUAL
35739: IFTRUE 35743
35741: GO 35746
35743: POP
// ; end ;
35744: GO 35747
35746: POP
// for j = 1 to 3 do
35747: LD_ADDR_VAR 0 7
35751: PUSH
35752: DOUBLE
35753: LD_INT 1
35755: DEC
35756: ST_TO_ADDR
35757: LD_INT 3
35759: PUSH
35760: FOR_TO
35761: IFFALSE 35814
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35763: LD_ADDR_VAR 0 5
35767: PUSH
35768: LD_VAR 0 5
35772: PPUSH
35773: LD_VAR 0 7
35777: PPUSH
35778: LD_VAR 0 5
35782: PUSH
35783: LD_VAR 0 7
35787: ARRAY
35788: PUSH
35789: LD_VAR 0 9
35793: PUSH
35794: LD_VAR 0 7
35798: ARRAY
35799: PUSH
35800: LD_VAR 0 10
35804: MUL
35805: PLUS
35806: PPUSH
35807: CALL_OW 1
35811: ST_TO_ADDR
35812: GO 35760
35814: POP
35815: POP
// end ;
35816: GO 34295
35818: POP
35819: POP
// result := Replace ( result , 4 , tmp ) ;
35820: LD_ADDR_VAR 0 5
35824: PUSH
35825: LD_VAR 0 5
35829: PPUSH
35830: LD_INT 4
35832: PPUSH
35833: LD_VAR 0 8
35837: PPUSH
35838: CALL_OW 1
35842: ST_TO_ADDR
// end ;
35843: LD_VAR 0 5
35847: RET
// export function DangerAtRange ( unit , range ) ; begin
35848: LD_INT 0
35850: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35851: LD_ADDR_VAR 0 3
35855: PUSH
35856: LD_VAR 0 1
35860: PPUSH
35861: CALL_OW 255
35865: PPUSH
35866: LD_VAR 0 1
35870: PPUSH
35871: CALL_OW 250
35875: PPUSH
35876: LD_VAR 0 1
35880: PPUSH
35881: CALL_OW 251
35885: PPUSH
35886: LD_VAR 0 2
35890: PPUSH
35891: CALL 34147 0 4
35895: ST_TO_ADDR
// end ;
35896: LD_VAR 0 3
35900: RET
// export function DangerInArea ( side , area ) ; begin
35901: LD_INT 0
35903: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35904: LD_ADDR_VAR 0 3
35908: PUSH
35909: LD_VAR 0 2
35913: PPUSH
35914: LD_INT 81
35916: PUSH
35917: LD_VAR 0 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PPUSH
35926: CALL_OW 70
35930: ST_TO_ADDR
// end ;
35931: LD_VAR 0 3
35935: RET
// export function IsExtension ( b ) ; begin
35936: LD_INT 0
35938: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35939: LD_ADDR_VAR 0 2
35943: PUSH
35944: LD_VAR 0 1
35948: PUSH
35949: LD_INT 23
35951: PUSH
35952: LD_INT 20
35954: PUSH
35955: LD_INT 22
35957: PUSH
35958: LD_INT 17
35960: PUSH
35961: LD_INT 24
35963: PUSH
35964: LD_INT 21
35966: PUSH
35967: LD_INT 19
35969: PUSH
35970: LD_INT 16
35972: PUSH
35973: LD_INT 25
35975: PUSH
35976: LD_INT 18
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: IN
35991: ST_TO_ADDR
// end ;
35992: LD_VAR 0 2
35996: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35997: LD_INT 0
35999: PPUSH
36000: PPUSH
36001: PPUSH
// result := [ ] ;
36002: LD_ADDR_VAR 0 4
36006: PUSH
36007: EMPTY
36008: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36009: LD_ADDR_VAR 0 5
36013: PUSH
36014: LD_VAR 0 2
36018: PPUSH
36019: LD_INT 21
36021: PUSH
36022: LD_INT 3
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PPUSH
36029: CALL_OW 70
36033: ST_TO_ADDR
// if not tmp then
36034: LD_VAR 0 5
36038: NOT
36039: IFFALSE 36043
// exit ;
36041: GO 36107
// if checkLink then
36043: LD_VAR 0 3
36047: IFFALSE 36097
// begin for i in tmp do
36049: LD_ADDR_VAR 0 6
36053: PUSH
36054: LD_VAR 0 5
36058: PUSH
36059: FOR_IN
36060: IFFALSE 36095
// if GetBase ( i ) <> base then
36062: LD_VAR 0 6
36066: PPUSH
36067: CALL_OW 274
36071: PUSH
36072: LD_VAR 0 1
36076: NONEQUAL
36077: IFFALSE 36093
// ComLinkToBase ( base , i ) ;
36079: LD_VAR 0 1
36083: PPUSH
36084: LD_VAR 0 6
36088: PPUSH
36089: CALL_OW 169
36093: GO 36059
36095: POP
36096: POP
// end ; result := tmp ;
36097: LD_ADDR_VAR 0 4
36101: PUSH
36102: LD_VAR 0 5
36106: ST_TO_ADDR
// end ;
36107: LD_VAR 0 4
36111: RET
// export function ComComplete ( units , b ) ; var i ; begin
36112: LD_INT 0
36114: PPUSH
36115: PPUSH
// if not units then
36116: LD_VAR 0 1
36120: NOT
36121: IFFALSE 36125
// exit ;
36123: GO 36215
// for i in units do
36125: LD_ADDR_VAR 0 4
36129: PUSH
36130: LD_VAR 0 1
36134: PUSH
36135: FOR_IN
36136: IFFALSE 36213
// if BuildingStatus ( b ) = bs_build then
36138: LD_VAR 0 2
36142: PPUSH
36143: CALL_OW 461
36147: PUSH
36148: LD_INT 1
36150: EQUAL
36151: IFFALSE 36211
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36153: LD_VAR 0 4
36157: PPUSH
36158: LD_STRING h
36160: PUSH
36161: LD_VAR 0 2
36165: PPUSH
36166: CALL_OW 250
36170: PUSH
36171: LD_VAR 0 2
36175: PPUSH
36176: CALL_OW 251
36180: PUSH
36181: LD_VAR 0 2
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: PUSH
36204: EMPTY
36205: LIST
36206: PPUSH
36207: CALL_OW 446
36211: GO 36135
36213: POP
36214: POP
// end ;
36215: LD_VAR 0 3
36219: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36220: LD_INT 0
36222: PPUSH
36223: PPUSH
36224: PPUSH
36225: PPUSH
36226: PPUSH
36227: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36228: LD_VAR 0 1
36232: NOT
36233: PUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: CALL_OW 263
36243: PUSH
36244: LD_INT 2
36246: NONEQUAL
36247: OR
36248: IFFALSE 36252
// exit ;
36250: GO 36568
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36252: LD_ADDR_VAR 0 6
36256: PUSH
36257: LD_INT 22
36259: PUSH
36260: LD_VAR 0 1
36264: PPUSH
36265: CALL_OW 255
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: PUSH
36277: LD_INT 30
36279: PUSH
36280: LD_INT 36
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 34
36289: PUSH
36290: LD_INT 31
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: LIST
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PPUSH
36306: CALL_OW 69
36310: ST_TO_ADDR
// if not tmp then
36311: LD_VAR 0 6
36315: NOT
36316: IFFALSE 36320
// exit ;
36318: GO 36568
// result := [ ] ;
36320: LD_ADDR_VAR 0 2
36324: PUSH
36325: EMPTY
36326: ST_TO_ADDR
// for i in tmp do
36327: LD_ADDR_VAR 0 3
36331: PUSH
36332: LD_VAR 0 6
36336: PUSH
36337: FOR_IN
36338: IFFALSE 36409
// begin t := UnitsInside ( i ) ;
36340: LD_ADDR_VAR 0 4
36344: PUSH
36345: LD_VAR 0 3
36349: PPUSH
36350: CALL_OW 313
36354: ST_TO_ADDR
// if t then
36355: LD_VAR 0 4
36359: IFFALSE 36407
// for j in t do
36361: LD_ADDR_VAR 0 7
36365: PUSH
36366: LD_VAR 0 4
36370: PUSH
36371: FOR_IN
36372: IFFALSE 36405
// result := Replace ( result , result + 1 , j ) ;
36374: LD_ADDR_VAR 0 2
36378: PUSH
36379: LD_VAR 0 2
36383: PPUSH
36384: LD_VAR 0 2
36388: PUSH
36389: LD_INT 1
36391: PLUS
36392: PPUSH
36393: LD_VAR 0 7
36397: PPUSH
36398: CALL_OW 1
36402: ST_TO_ADDR
36403: GO 36371
36405: POP
36406: POP
// end ;
36407: GO 36337
36409: POP
36410: POP
// if not result then
36411: LD_VAR 0 2
36415: NOT
36416: IFFALSE 36420
// exit ;
36418: GO 36568
// mech := result [ 1 ] ;
36420: LD_ADDR_VAR 0 5
36424: PUSH
36425: LD_VAR 0 2
36429: PUSH
36430: LD_INT 1
36432: ARRAY
36433: ST_TO_ADDR
// if result > 1 then
36434: LD_VAR 0 2
36438: PUSH
36439: LD_INT 1
36441: GREATER
36442: IFFALSE 36554
// begin for i = 2 to result do
36444: LD_ADDR_VAR 0 3
36448: PUSH
36449: DOUBLE
36450: LD_INT 2
36452: DEC
36453: ST_TO_ADDR
36454: LD_VAR 0 2
36458: PUSH
36459: FOR_TO
36460: IFFALSE 36552
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36462: LD_ADDR_VAR 0 4
36466: PUSH
36467: LD_VAR 0 2
36471: PUSH
36472: LD_VAR 0 3
36476: ARRAY
36477: PPUSH
36478: LD_INT 3
36480: PPUSH
36481: CALL_OW 259
36485: PUSH
36486: LD_VAR 0 2
36490: PUSH
36491: LD_VAR 0 3
36495: ARRAY
36496: PPUSH
36497: CALL_OW 432
36501: MINUS
36502: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36503: LD_VAR 0 4
36507: PUSH
36508: LD_VAR 0 5
36512: PPUSH
36513: LD_INT 3
36515: PPUSH
36516: CALL_OW 259
36520: PUSH
36521: LD_VAR 0 5
36525: PPUSH
36526: CALL_OW 432
36530: MINUS
36531: GREATEREQUAL
36532: IFFALSE 36550
// mech := result [ i ] ;
36534: LD_ADDR_VAR 0 5
36538: PUSH
36539: LD_VAR 0 2
36543: PUSH
36544: LD_VAR 0 3
36548: ARRAY
36549: ST_TO_ADDR
// end ;
36550: GO 36459
36552: POP
36553: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36554: LD_VAR 0 1
36558: PPUSH
36559: LD_VAR 0 5
36563: PPUSH
36564: CALL_OW 135
// end ;
36568: LD_VAR 0 2
36572: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36573: LD_INT 0
36575: PPUSH
36576: PPUSH
36577: PPUSH
36578: PPUSH
36579: PPUSH
36580: PPUSH
36581: PPUSH
36582: PPUSH
36583: PPUSH
36584: PPUSH
36585: PPUSH
36586: PPUSH
36587: PPUSH
// result := [ ] ;
36588: LD_ADDR_VAR 0 7
36592: PUSH
36593: EMPTY
36594: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36595: LD_VAR 0 1
36599: PPUSH
36600: CALL_OW 266
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: IN
36615: NOT
36616: IFFALSE 36620
// exit ;
36618: GO 38254
// if name then
36620: LD_VAR 0 3
36624: IFFALSE 36640
// SetBName ( base_dep , name ) ;
36626: LD_VAR 0 1
36630: PPUSH
36631: LD_VAR 0 3
36635: PPUSH
36636: CALL_OW 500
// base := GetBase ( base_dep ) ;
36640: LD_ADDR_VAR 0 15
36644: PUSH
36645: LD_VAR 0 1
36649: PPUSH
36650: CALL_OW 274
36654: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36655: LD_ADDR_VAR 0 16
36659: PUSH
36660: LD_VAR 0 1
36664: PPUSH
36665: CALL_OW 255
36669: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36670: LD_ADDR_VAR 0 17
36674: PUSH
36675: LD_VAR 0 1
36679: PPUSH
36680: CALL_OW 248
36684: ST_TO_ADDR
// if sources then
36685: LD_VAR 0 5
36689: IFFALSE 36736
// for i = 1 to 3 do
36691: LD_ADDR_VAR 0 8
36695: PUSH
36696: DOUBLE
36697: LD_INT 1
36699: DEC
36700: ST_TO_ADDR
36701: LD_INT 3
36703: PUSH
36704: FOR_TO
36705: IFFALSE 36734
// AddResourceType ( base , i , sources [ i ] ) ;
36707: LD_VAR 0 15
36711: PPUSH
36712: LD_VAR 0 8
36716: PPUSH
36717: LD_VAR 0 5
36721: PUSH
36722: LD_VAR 0 8
36726: ARRAY
36727: PPUSH
36728: CALL_OW 276
36732: GO 36704
36734: POP
36735: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36736: LD_ADDR_VAR 0 18
36740: PUSH
36741: LD_VAR 0 15
36745: PPUSH
36746: LD_VAR 0 2
36750: PPUSH
36751: LD_INT 1
36753: PPUSH
36754: CALL 35997 0 3
36758: ST_TO_ADDR
// InitHc ;
36759: CALL_OW 19
// InitUc ;
36763: CALL_OW 18
// uc_side := side ;
36767: LD_ADDR_OWVAR 20
36771: PUSH
36772: LD_VAR 0 16
36776: ST_TO_ADDR
// uc_nation := nation ;
36777: LD_ADDR_OWVAR 21
36781: PUSH
36782: LD_VAR 0 17
36786: ST_TO_ADDR
// if buildings then
36787: LD_VAR 0 18
36791: IFFALSE 38113
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36793: LD_ADDR_VAR 0 19
36797: PUSH
36798: LD_VAR 0 18
36802: PPUSH
36803: LD_INT 2
36805: PUSH
36806: LD_INT 30
36808: PUSH
36809: LD_INT 29
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 30
36818: PUSH
36819: LD_INT 30
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: PPUSH
36831: CALL_OW 72
36835: ST_TO_ADDR
// if tmp then
36836: LD_VAR 0 19
36840: IFFALSE 36888
// for i in tmp do
36842: LD_ADDR_VAR 0 8
36846: PUSH
36847: LD_VAR 0 19
36851: PUSH
36852: FOR_IN
36853: IFFALSE 36886
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36855: LD_VAR 0 8
36859: PPUSH
36860: CALL_OW 250
36864: PPUSH
36865: LD_VAR 0 8
36869: PPUSH
36870: CALL_OW 251
36874: PPUSH
36875: LD_VAR 0 16
36879: PPUSH
36880: CALL_OW 441
36884: GO 36852
36886: POP
36887: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36888: LD_VAR 0 18
36892: PPUSH
36893: LD_INT 2
36895: PUSH
36896: LD_INT 30
36898: PUSH
36899: LD_INT 32
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 30
36908: PUSH
36909: LD_INT 33
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: PPUSH
36921: CALL_OW 72
36925: IFFALSE 37013
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36927: LD_ADDR_VAR 0 8
36931: PUSH
36932: LD_VAR 0 18
36936: PPUSH
36937: LD_INT 2
36939: PUSH
36940: LD_INT 30
36942: PUSH
36943: LD_INT 32
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 30
36952: PUSH
36953: LD_INT 33
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: LIST
36964: PPUSH
36965: CALL_OW 72
36969: PUSH
36970: FOR_IN
36971: IFFALSE 37011
// begin if not GetBWeapon ( i ) then
36973: LD_VAR 0 8
36977: PPUSH
36978: CALL_OW 269
36982: NOT
36983: IFFALSE 37009
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36985: LD_VAR 0 8
36989: PPUSH
36990: LD_VAR 0 8
36994: PPUSH
36995: LD_VAR 0 2
36999: PPUSH
37000: CALL 38259 0 2
37004: PPUSH
37005: CALL_OW 431
// end ;
37009: GO 36970
37011: POP
37012: POP
// end ; for i = 1 to personel do
37013: LD_ADDR_VAR 0 8
37017: PUSH
37018: DOUBLE
37019: LD_INT 1
37021: DEC
37022: ST_TO_ADDR
37023: LD_VAR 0 6
37027: PUSH
37028: FOR_TO
37029: IFFALSE 38093
// begin if i > 4 then
37031: LD_VAR 0 8
37035: PUSH
37036: LD_INT 4
37038: GREATER
37039: IFFALSE 37043
// break ;
37041: GO 38093
// case i of 1 :
37043: LD_VAR 0 8
37047: PUSH
37048: LD_INT 1
37050: DOUBLE
37051: EQUAL
37052: IFTRUE 37056
37054: GO 37136
37056: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37057: LD_ADDR_VAR 0 12
37061: PUSH
37062: LD_VAR 0 18
37066: PPUSH
37067: LD_INT 22
37069: PUSH
37070: LD_VAR 0 16
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 58
37081: PUSH
37082: EMPTY
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: PUSH
37088: LD_INT 30
37090: PUSH
37091: LD_INT 32
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 30
37100: PUSH
37101: LD_INT 4
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 30
37110: PUSH
37111: LD_INT 5
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: LIST
37128: PPUSH
37129: CALL_OW 72
37133: ST_TO_ADDR
37134: GO 37358
37136: LD_INT 2
37138: DOUBLE
37139: EQUAL
37140: IFTRUE 37144
37142: GO 37206
37144: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37145: LD_ADDR_VAR 0 12
37149: PUSH
37150: LD_VAR 0 18
37154: PPUSH
37155: LD_INT 22
37157: PUSH
37158: LD_VAR 0 16
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 2
37169: PUSH
37170: LD_INT 30
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 30
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PPUSH
37199: CALL_OW 72
37203: ST_TO_ADDR
37204: GO 37358
37206: LD_INT 3
37208: DOUBLE
37209: EQUAL
37210: IFTRUE 37214
37212: GO 37276
37214: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37215: LD_ADDR_VAR 0 12
37219: PUSH
37220: LD_VAR 0 18
37224: PPUSH
37225: LD_INT 22
37227: PUSH
37228: LD_VAR 0 16
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: LD_INT 30
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 30
37252: PUSH
37253: LD_INT 3
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: LIST
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PPUSH
37269: CALL_OW 72
37273: ST_TO_ADDR
37274: GO 37358
37276: LD_INT 4
37278: DOUBLE
37279: EQUAL
37280: IFTRUE 37284
37282: GO 37357
37284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37285: LD_ADDR_VAR 0 12
37289: PUSH
37290: LD_VAR 0 18
37294: PPUSH
37295: LD_INT 22
37297: PUSH
37298: LD_VAR 0 16
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: PUSH
37310: LD_INT 30
37312: PUSH
37313: LD_INT 6
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 30
37322: PUSH
37323: LD_INT 7
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 30
37332: PUSH
37333: LD_INT 8
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PPUSH
37350: CALL_OW 72
37354: ST_TO_ADDR
37355: GO 37358
37357: POP
// if i = 1 then
37358: LD_VAR 0 8
37362: PUSH
37363: LD_INT 1
37365: EQUAL
37366: IFFALSE 37477
// begin tmp := [ ] ;
37368: LD_ADDR_VAR 0 19
37372: PUSH
37373: EMPTY
37374: ST_TO_ADDR
// for j in f do
37375: LD_ADDR_VAR 0 9
37379: PUSH
37380: LD_VAR 0 12
37384: PUSH
37385: FOR_IN
37386: IFFALSE 37459
// if GetBType ( j ) = b_bunker then
37388: LD_VAR 0 9
37392: PPUSH
37393: CALL_OW 266
37397: PUSH
37398: LD_INT 32
37400: EQUAL
37401: IFFALSE 37428
// tmp := Insert ( tmp , 1 , j ) else
37403: LD_ADDR_VAR 0 19
37407: PUSH
37408: LD_VAR 0 19
37412: PPUSH
37413: LD_INT 1
37415: PPUSH
37416: LD_VAR 0 9
37420: PPUSH
37421: CALL_OW 2
37425: ST_TO_ADDR
37426: GO 37457
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37428: LD_ADDR_VAR 0 19
37432: PUSH
37433: LD_VAR 0 19
37437: PPUSH
37438: LD_VAR 0 19
37442: PUSH
37443: LD_INT 1
37445: PLUS
37446: PPUSH
37447: LD_VAR 0 9
37451: PPUSH
37452: CALL_OW 2
37456: ST_TO_ADDR
37457: GO 37385
37459: POP
37460: POP
// if tmp then
37461: LD_VAR 0 19
37465: IFFALSE 37477
// f := tmp ;
37467: LD_ADDR_VAR 0 12
37471: PUSH
37472: LD_VAR 0 19
37476: ST_TO_ADDR
// end ; x := personel [ i ] ;
37477: LD_ADDR_VAR 0 13
37481: PUSH
37482: LD_VAR 0 6
37486: PUSH
37487: LD_VAR 0 8
37491: ARRAY
37492: ST_TO_ADDR
// if x = - 1 then
37493: LD_VAR 0 13
37497: PUSH
37498: LD_INT 1
37500: NEG
37501: EQUAL
37502: IFFALSE 37711
// begin for j in f do
37504: LD_ADDR_VAR 0 9
37508: PUSH
37509: LD_VAR 0 12
37513: PUSH
37514: FOR_IN
37515: IFFALSE 37707
// repeat InitHc ;
37517: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37521: LD_VAR 0 9
37525: PPUSH
37526: CALL_OW 266
37530: PUSH
37531: LD_INT 5
37533: EQUAL
37534: IFFALSE 37604
// begin if UnitsInside ( j ) < 3 then
37536: LD_VAR 0 9
37540: PPUSH
37541: CALL_OW 313
37545: PUSH
37546: LD_INT 3
37548: LESS
37549: IFFALSE 37585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37551: LD_INT 0
37553: PPUSH
37554: LD_INT 5
37556: PUSH
37557: LD_INT 8
37559: PUSH
37560: LD_INT 9
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: PUSH
37568: LD_VAR 0 17
37572: ARRAY
37573: PPUSH
37574: LD_VAR 0 4
37578: PPUSH
37579: CALL_OW 380
37583: GO 37602
// PrepareHuman ( false , i , skill ) ;
37585: LD_INT 0
37587: PPUSH
37588: LD_VAR 0 8
37592: PPUSH
37593: LD_VAR 0 4
37597: PPUSH
37598: CALL_OW 380
// end else
37602: GO 37621
// PrepareHuman ( false , i , skill ) ;
37604: LD_INT 0
37606: PPUSH
37607: LD_VAR 0 8
37611: PPUSH
37612: LD_VAR 0 4
37616: PPUSH
37617: CALL_OW 380
// un := CreateHuman ;
37621: LD_ADDR_VAR 0 14
37625: PUSH
37626: CALL_OW 44
37630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37631: LD_ADDR_VAR 0 7
37635: PUSH
37636: LD_VAR 0 7
37640: PPUSH
37641: LD_INT 1
37643: PPUSH
37644: LD_VAR 0 14
37648: PPUSH
37649: CALL_OW 2
37653: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37654: LD_VAR 0 14
37658: PPUSH
37659: LD_VAR 0 9
37663: PPUSH
37664: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37668: LD_VAR 0 9
37672: PPUSH
37673: CALL_OW 313
37677: PUSH
37678: LD_INT 6
37680: EQUAL
37681: PUSH
37682: LD_VAR 0 9
37686: PPUSH
37687: CALL_OW 266
37691: PUSH
37692: LD_INT 32
37694: PUSH
37695: LD_INT 31
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: IN
37702: OR
37703: IFFALSE 37517
37705: GO 37514
37707: POP
37708: POP
// end else
37709: GO 38091
// for j = 1 to x do
37711: LD_ADDR_VAR 0 9
37715: PUSH
37716: DOUBLE
37717: LD_INT 1
37719: DEC
37720: ST_TO_ADDR
37721: LD_VAR 0 13
37725: PUSH
37726: FOR_TO
37727: IFFALSE 38089
// begin InitHc ;
37729: CALL_OW 19
// if not f then
37733: LD_VAR 0 12
37737: NOT
37738: IFFALSE 37827
// begin PrepareHuman ( false , i , skill ) ;
37740: LD_INT 0
37742: PPUSH
37743: LD_VAR 0 8
37747: PPUSH
37748: LD_VAR 0 4
37752: PPUSH
37753: CALL_OW 380
// un := CreateHuman ;
37757: LD_ADDR_VAR 0 14
37761: PUSH
37762: CALL_OW 44
37766: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37767: LD_ADDR_VAR 0 7
37771: PUSH
37772: LD_VAR 0 7
37776: PPUSH
37777: LD_INT 1
37779: PPUSH
37780: LD_VAR 0 14
37784: PPUSH
37785: CALL_OW 2
37789: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37790: LD_VAR 0 14
37794: PPUSH
37795: LD_VAR 0 1
37799: PPUSH
37800: CALL_OW 250
37804: PPUSH
37805: LD_VAR 0 1
37809: PPUSH
37810: CALL_OW 251
37814: PPUSH
37815: LD_INT 10
37817: PPUSH
37818: LD_INT 0
37820: PPUSH
37821: CALL_OW 50
// continue ;
37825: GO 37726
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37827: LD_VAR 0 12
37831: PUSH
37832: LD_INT 1
37834: ARRAY
37835: PPUSH
37836: CALL_OW 313
37840: PUSH
37841: LD_VAR 0 12
37845: PUSH
37846: LD_INT 1
37848: ARRAY
37849: PPUSH
37850: CALL_OW 266
37854: PUSH
37855: LD_INT 32
37857: PUSH
37858: LD_INT 31
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: IN
37865: AND
37866: PUSH
37867: LD_VAR 0 12
37871: PUSH
37872: LD_INT 1
37874: ARRAY
37875: PPUSH
37876: CALL_OW 313
37880: PUSH
37881: LD_INT 6
37883: EQUAL
37884: OR
37885: IFFALSE 37905
// f := Delete ( f , 1 ) ;
37887: LD_ADDR_VAR 0 12
37891: PUSH
37892: LD_VAR 0 12
37896: PPUSH
37897: LD_INT 1
37899: PPUSH
37900: CALL_OW 3
37904: ST_TO_ADDR
// if not f then
37905: LD_VAR 0 12
37909: NOT
37910: IFFALSE 37928
// begin x := x + 2 ;
37912: LD_ADDR_VAR 0 13
37916: PUSH
37917: LD_VAR 0 13
37921: PUSH
37922: LD_INT 2
37924: PLUS
37925: ST_TO_ADDR
// continue ;
37926: GO 37726
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37928: LD_VAR 0 12
37932: PUSH
37933: LD_INT 1
37935: ARRAY
37936: PPUSH
37937: CALL_OW 266
37941: PUSH
37942: LD_INT 5
37944: EQUAL
37945: IFFALSE 38019
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37947: LD_VAR 0 12
37951: PUSH
37952: LD_INT 1
37954: ARRAY
37955: PPUSH
37956: CALL_OW 313
37960: PUSH
37961: LD_INT 3
37963: LESS
37964: IFFALSE 38000
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37966: LD_INT 0
37968: PPUSH
37969: LD_INT 5
37971: PUSH
37972: LD_INT 8
37974: PUSH
37975: LD_INT 9
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: PUSH
37983: LD_VAR 0 17
37987: ARRAY
37988: PPUSH
37989: LD_VAR 0 4
37993: PPUSH
37994: CALL_OW 380
37998: GO 38017
// PrepareHuman ( false , i , skill ) ;
38000: LD_INT 0
38002: PPUSH
38003: LD_VAR 0 8
38007: PPUSH
38008: LD_VAR 0 4
38012: PPUSH
38013: CALL_OW 380
// end else
38017: GO 38036
// PrepareHuman ( false , i , skill ) ;
38019: LD_INT 0
38021: PPUSH
38022: LD_VAR 0 8
38026: PPUSH
38027: LD_VAR 0 4
38031: PPUSH
38032: CALL_OW 380
// un := CreateHuman ;
38036: LD_ADDR_VAR 0 14
38040: PUSH
38041: CALL_OW 44
38045: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38046: LD_ADDR_VAR 0 7
38050: PUSH
38051: LD_VAR 0 7
38055: PPUSH
38056: LD_INT 1
38058: PPUSH
38059: LD_VAR 0 14
38063: PPUSH
38064: CALL_OW 2
38068: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38069: LD_VAR 0 14
38073: PPUSH
38074: LD_VAR 0 12
38078: PUSH
38079: LD_INT 1
38081: ARRAY
38082: PPUSH
38083: CALL_OW 52
// end ;
38087: GO 37726
38089: POP
38090: POP
// end ;
38091: GO 37028
38093: POP
38094: POP
// result := result ^ buildings ;
38095: LD_ADDR_VAR 0 7
38099: PUSH
38100: LD_VAR 0 7
38104: PUSH
38105: LD_VAR 0 18
38109: ADD
38110: ST_TO_ADDR
// end else
38111: GO 38254
// begin for i = 1 to personel do
38113: LD_ADDR_VAR 0 8
38117: PUSH
38118: DOUBLE
38119: LD_INT 1
38121: DEC
38122: ST_TO_ADDR
38123: LD_VAR 0 6
38127: PUSH
38128: FOR_TO
38129: IFFALSE 38252
// begin if i > 4 then
38131: LD_VAR 0 8
38135: PUSH
38136: LD_INT 4
38138: GREATER
38139: IFFALSE 38143
// break ;
38141: GO 38252
// x := personel [ i ] ;
38143: LD_ADDR_VAR 0 13
38147: PUSH
38148: LD_VAR 0 6
38152: PUSH
38153: LD_VAR 0 8
38157: ARRAY
38158: ST_TO_ADDR
// if x = - 1 then
38159: LD_VAR 0 13
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: EQUAL
38168: IFFALSE 38172
// continue ;
38170: GO 38128
// PrepareHuman ( false , i , skill ) ;
38172: LD_INT 0
38174: PPUSH
38175: LD_VAR 0 8
38179: PPUSH
38180: LD_VAR 0 4
38184: PPUSH
38185: CALL_OW 380
// un := CreateHuman ;
38189: LD_ADDR_VAR 0 14
38193: PUSH
38194: CALL_OW 44
38198: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38199: LD_VAR 0 14
38203: PPUSH
38204: LD_VAR 0 1
38208: PPUSH
38209: CALL_OW 250
38213: PPUSH
38214: LD_VAR 0 1
38218: PPUSH
38219: CALL_OW 251
38223: PPUSH
38224: LD_INT 10
38226: PPUSH
38227: LD_INT 0
38229: PPUSH
38230: CALL_OW 50
// result := result ^ un ;
38234: LD_ADDR_VAR 0 7
38238: PUSH
38239: LD_VAR 0 7
38243: PUSH
38244: LD_VAR 0 14
38248: ADD
38249: ST_TO_ADDR
// end ;
38250: GO 38128
38252: POP
38253: POP
// end ; end ;
38254: LD_VAR 0 7
38258: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38259: LD_INT 0
38261: PPUSH
38262: PPUSH
38263: PPUSH
38264: PPUSH
38265: PPUSH
38266: PPUSH
38267: PPUSH
38268: PPUSH
38269: PPUSH
38270: PPUSH
38271: PPUSH
38272: PPUSH
38273: PPUSH
38274: PPUSH
38275: PPUSH
38276: PPUSH
// result := false ;
38277: LD_ADDR_VAR 0 3
38281: PUSH
38282: LD_INT 0
38284: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38285: LD_VAR 0 1
38289: NOT
38290: PUSH
38291: LD_VAR 0 1
38295: PPUSH
38296: CALL_OW 266
38300: PUSH
38301: LD_INT 32
38303: PUSH
38304: LD_INT 33
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: IN
38311: NOT
38312: OR
38313: IFFALSE 38317
// exit ;
38315: GO 39426
// nat := GetNation ( tower ) ;
38317: LD_ADDR_VAR 0 12
38321: PUSH
38322: LD_VAR 0 1
38326: PPUSH
38327: CALL_OW 248
38331: ST_TO_ADDR
// side := GetSide ( tower ) ;
38332: LD_ADDR_VAR 0 16
38336: PUSH
38337: LD_VAR 0 1
38341: PPUSH
38342: CALL_OW 255
38346: ST_TO_ADDR
// x := GetX ( tower ) ;
38347: LD_ADDR_VAR 0 10
38351: PUSH
38352: LD_VAR 0 1
38356: PPUSH
38357: CALL_OW 250
38361: ST_TO_ADDR
// y := GetY ( tower ) ;
38362: LD_ADDR_VAR 0 11
38366: PUSH
38367: LD_VAR 0 1
38371: PPUSH
38372: CALL_OW 251
38376: ST_TO_ADDR
// if not x or not y then
38377: LD_VAR 0 10
38381: NOT
38382: PUSH
38383: LD_VAR 0 11
38387: NOT
38388: OR
38389: IFFALSE 38393
// exit ;
38391: GO 39426
// weapon := 0 ;
38393: LD_ADDR_VAR 0 18
38397: PUSH
38398: LD_INT 0
38400: ST_TO_ADDR
// fac_list := [ ] ;
38401: LD_ADDR_VAR 0 17
38405: PUSH
38406: EMPTY
38407: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38408: LD_ADDR_VAR 0 6
38412: PUSH
38413: LD_VAR 0 1
38417: PPUSH
38418: CALL_OW 274
38422: PPUSH
38423: LD_VAR 0 2
38427: PPUSH
38428: LD_INT 0
38430: PPUSH
38431: CALL 35997 0 3
38435: PPUSH
38436: LD_INT 30
38438: PUSH
38439: LD_INT 3
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PPUSH
38446: CALL_OW 72
38450: ST_TO_ADDR
// if not factories then
38451: LD_VAR 0 6
38455: NOT
38456: IFFALSE 38460
// exit ;
38458: GO 39426
// for i in factories do
38460: LD_ADDR_VAR 0 8
38464: PUSH
38465: LD_VAR 0 6
38469: PUSH
38470: FOR_IN
38471: IFFALSE 38496
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38473: LD_ADDR_VAR 0 17
38477: PUSH
38478: LD_VAR 0 17
38482: PUSH
38483: LD_VAR 0 8
38487: PPUSH
38488: CALL_OW 478
38492: UNION
38493: ST_TO_ADDR
38494: GO 38470
38496: POP
38497: POP
// if not fac_list then
38498: LD_VAR 0 17
38502: NOT
38503: IFFALSE 38507
// exit ;
38505: GO 39426
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38507: LD_ADDR_VAR 0 5
38511: PUSH
38512: LD_INT 4
38514: PUSH
38515: LD_INT 5
38517: PUSH
38518: LD_INT 9
38520: PUSH
38521: LD_INT 10
38523: PUSH
38524: LD_INT 6
38526: PUSH
38527: LD_INT 7
38529: PUSH
38530: LD_INT 11
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 27
38544: PUSH
38545: LD_INT 28
38547: PUSH
38548: LD_INT 26
38550: PUSH
38551: LD_INT 30
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 43
38562: PUSH
38563: LD_INT 44
38565: PUSH
38566: LD_INT 46
38568: PUSH
38569: LD_INT 45
38571: PUSH
38572: LD_INT 47
38574: PUSH
38575: LD_INT 49
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: PUSH
38591: LD_VAR 0 12
38595: ARRAY
38596: ST_TO_ADDR
// list := list isect fac_list ;
38597: LD_ADDR_VAR 0 5
38601: PUSH
38602: LD_VAR 0 5
38606: PUSH
38607: LD_VAR 0 17
38611: ISECT
38612: ST_TO_ADDR
// if not list then
38613: LD_VAR 0 5
38617: NOT
38618: IFFALSE 38622
// exit ;
38620: GO 39426
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38622: LD_VAR 0 12
38626: PUSH
38627: LD_INT 3
38629: EQUAL
38630: PUSH
38631: LD_INT 49
38633: PUSH
38634: LD_VAR 0 5
38638: IN
38639: AND
38640: PUSH
38641: LD_INT 31
38643: PPUSH
38644: LD_VAR 0 16
38648: PPUSH
38649: CALL_OW 321
38653: PUSH
38654: LD_INT 2
38656: EQUAL
38657: AND
38658: IFFALSE 38718
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38660: LD_INT 22
38662: PUSH
38663: LD_VAR 0 16
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 35
38674: PUSH
38675: LD_INT 49
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 91
38684: PUSH
38685: LD_VAR 0 1
38689: PUSH
38690: LD_INT 10
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: PPUSH
38703: CALL_OW 69
38707: NOT
38708: IFFALSE 38718
// weapon := ru_time_lapser ;
38710: LD_ADDR_VAR 0 18
38714: PUSH
38715: LD_INT 49
38717: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38718: LD_VAR 0 12
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: IN
38733: PUSH
38734: LD_INT 11
38736: PUSH
38737: LD_VAR 0 5
38741: IN
38742: PUSH
38743: LD_INT 30
38745: PUSH
38746: LD_VAR 0 5
38750: IN
38751: OR
38752: AND
38753: PUSH
38754: LD_INT 6
38756: PPUSH
38757: LD_VAR 0 16
38761: PPUSH
38762: CALL_OW 321
38766: PUSH
38767: LD_INT 2
38769: EQUAL
38770: AND
38771: IFFALSE 38936
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38773: LD_INT 22
38775: PUSH
38776: LD_VAR 0 16
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 2
38787: PUSH
38788: LD_INT 35
38790: PUSH
38791: LD_INT 11
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 35
38800: PUSH
38801: LD_INT 30
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 91
38815: PUSH
38816: LD_VAR 0 1
38820: PUSH
38821: LD_INT 18
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: PPUSH
38834: CALL_OW 69
38838: NOT
38839: PUSH
38840: LD_INT 22
38842: PUSH
38843: LD_VAR 0 16
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: LD_INT 30
38857: PUSH
38858: LD_INT 32
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 30
38867: PUSH
38868: LD_INT 33
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 91
38882: PUSH
38883: LD_VAR 0 1
38887: PUSH
38888: LD_INT 12
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: PPUSH
38904: CALL_OW 69
38908: PUSH
38909: LD_INT 2
38911: GREATER
38912: AND
38913: IFFALSE 38936
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38915: LD_ADDR_VAR 0 18
38919: PUSH
38920: LD_INT 11
38922: PUSH
38923: LD_INT 30
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_VAR 0 12
38934: ARRAY
38935: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38936: LD_VAR 0 18
38940: NOT
38941: PUSH
38942: LD_INT 40
38944: PPUSH
38945: LD_VAR 0 16
38949: PPUSH
38950: CALL_OW 321
38954: PUSH
38955: LD_INT 2
38957: EQUAL
38958: AND
38959: PUSH
38960: LD_INT 7
38962: PUSH
38963: LD_VAR 0 5
38967: IN
38968: PUSH
38969: LD_INT 28
38971: PUSH
38972: LD_VAR 0 5
38976: IN
38977: OR
38978: PUSH
38979: LD_INT 45
38981: PUSH
38982: LD_VAR 0 5
38986: IN
38987: OR
38988: AND
38989: IFFALSE 39243
// begin hex := GetHexInfo ( x , y ) ;
38991: LD_ADDR_VAR 0 4
38995: PUSH
38996: LD_VAR 0 10
39000: PPUSH
39001: LD_VAR 0 11
39005: PPUSH
39006: CALL_OW 546
39010: ST_TO_ADDR
// if hex [ 1 ] then
39011: LD_VAR 0 4
39015: PUSH
39016: LD_INT 1
39018: ARRAY
39019: IFFALSE 39023
// exit ;
39021: GO 39426
// height := hex [ 2 ] ;
39023: LD_ADDR_VAR 0 15
39027: PUSH
39028: LD_VAR 0 4
39032: PUSH
39033: LD_INT 2
39035: ARRAY
39036: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39037: LD_ADDR_VAR 0 14
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: LD_INT 2
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: LD_INT 5
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: ST_TO_ADDR
// for i in tmp do
39060: LD_ADDR_VAR 0 8
39064: PUSH
39065: LD_VAR 0 14
39069: PUSH
39070: FOR_IN
39071: IFFALSE 39241
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39073: LD_ADDR_VAR 0 9
39077: PUSH
39078: LD_VAR 0 10
39082: PPUSH
39083: LD_VAR 0 8
39087: PPUSH
39088: LD_INT 5
39090: PPUSH
39091: CALL_OW 272
39095: PUSH
39096: LD_VAR 0 11
39100: PPUSH
39101: LD_VAR 0 8
39105: PPUSH
39106: LD_INT 5
39108: PPUSH
39109: CALL_OW 273
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39118: LD_VAR 0 9
39122: PUSH
39123: LD_INT 1
39125: ARRAY
39126: PPUSH
39127: LD_VAR 0 9
39131: PUSH
39132: LD_INT 2
39134: ARRAY
39135: PPUSH
39136: CALL_OW 488
39140: IFFALSE 39239
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39142: LD_ADDR_VAR 0 4
39146: PUSH
39147: LD_VAR 0 9
39151: PUSH
39152: LD_INT 1
39154: ARRAY
39155: PPUSH
39156: LD_VAR 0 9
39160: PUSH
39161: LD_INT 2
39163: ARRAY
39164: PPUSH
39165: CALL_OW 546
39169: ST_TO_ADDR
// if hex [ 1 ] then
39170: LD_VAR 0 4
39174: PUSH
39175: LD_INT 1
39177: ARRAY
39178: IFFALSE 39182
// continue ;
39180: GO 39070
// h := hex [ 2 ] ;
39182: LD_ADDR_VAR 0 13
39186: PUSH
39187: LD_VAR 0 4
39191: PUSH
39192: LD_INT 2
39194: ARRAY
39195: ST_TO_ADDR
// if h + 7 < height then
39196: LD_VAR 0 13
39200: PUSH
39201: LD_INT 7
39203: PLUS
39204: PUSH
39205: LD_VAR 0 15
39209: LESS
39210: IFFALSE 39239
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39212: LD_ADDR_VAR 0 18
39216: PUSH
39217: LD_INT 7
39219: PUSH
39220: LD_INT 28
39222: PUSH
39223: LD_INT 45
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: LIST
39230: PUSH
39231: LD_VAR 0 12
39235: ARRAY
39236: ST_TO_ADDR
// break ;
39237: GO 39241
// end ; end ; end ;
39239: GO 39070
39241: POP
39242: POP
// end ; if not weapon then
39243: LD_VAR 0 18
39247: NOT
39248: IFFALSE 39308
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39250: LD_ADDR_VAR 0 5
39254: PUSH
39255: LD_VAR 0 5
39259: PUSH
39260: LD_INT 11
39262: PUSH
39263: LD_INT 30
39265: PUSH
39266: LD_INT 49
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: DIFF
39274: ST_TO_ADDR
// if not list then
39275: LD_VAR 0 5
39279: NOT
39280: IFFALSE 39284
// exit ;
39282: GO 39426
// weapon := list [ rand ( 1 , list ) ] ;
39284: LD_ADDR_VAR 0 18
39288: PUSH
39289: LD_VAR 0 5
39293: PUSH
39294: LD_INT 1
39296: PPUSH
39297: LD_VAR 0 5
39301: PPUSH
39302: CALL_OW 12
39306: ARRAY
39307: ST_TO_ADDR
// end ; if weapon then
39308: LD_VAR 0 18
39312: IFFALSE 39426
// begin tmp := CostOfWeapon ( weapon ) ;
39314: LD_ADDR_VAR 0 14
39318: PUSH
39319: LD_VAR 0 18
39323: PPUSH
39324: CALL_OW 451
39328: ST_TO_ADDR
// j := GetBase ( tower ) ;
39329: LD_ADDR_VAR 0 9
39333: PUSH
39334: LD_VAR 0 1
39338: PPUSH
39339: CALL_OW 274
39343: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39344: LD_VAR 0 9
39348: PPUSH
39349: LD_INT 1
39351: PPUSH
39352: CALL_OW 275
39356: PUSH
39357: LD_VAR 0 14
39361: PUSH
39362: LD_INT 1
39364: ARRAY
39365: GREATEREQUAL
39366: PUSH
39367: LD_VAR 0 9
39371: PPUSH
39372: LD_INT 2
39374: PPUSH
39375: CALL_OW 275
39379: PUSH
39380: LD_VAR 0 14
39384: PUSH
39385: LD_INT 2
39387: ARRAY
39388: GREATEREQUAL
39389: AND
39390: PUSH
39391: LD_VAR 0 9
39395: PPUSH
39396: LD_INT 3
39398: PPUSH
39399: CALL_OW 275
39403: PUSH
39404: LD_VAR 0 14
39408: PUSH
39409: LD_INT 3
39411: ARRAY
39412: GREATEREQUAL
39413: AND
39414: IFFALSE 39426
// result := weapon ;
39416: LD_ADDR_VAR 0 3
39420: PUSH
39421: LD_VAR 0 18
39425: ST_TO_ADDR
// end ; end ;
39426: LD_VAR 0 3
39430: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39431: LD_INT 0
39433: PPUSH
39434: PPUSH
// result := true ;
39435: LD_ADDR_VAR 0 3
39439: PUSH
39440: LD_INT 1
39442: ST_TO_ADDR
// if array1 = array2 then
39443: LD_VAR 0 1
39447: PUSH
39448: LD_VAR 0 2
39452: EQUAL
39453: IFFALSE 39513
// begin for i = 1 to array1 do
39455: LD_ADDR_VAR 0 4
39459: PUSH
39460: DOUBLE
39461: LD_INT 1
39463: DEC
39464: ST_TO_ADDR
39465: LD_VAR 0 1
39469: PUSH
39470: FOR_TO
39471: IFFALSE 39509
// if array1 [ i ] <> array2 [ i ] then
39473: LD_VAR 0 1
39477: PUSH
39478: LD_VAR 0 4
39482: ARRAY
39483: PUSH
39484: LD_VAR 0 2
39488: PUSH
39489: LD_VAR 0 4
39493: ARRAY
39494: NONEQUAL
39495: IFFALSE 39507
// begin result := false ;
39497: LD_ADDR_VAR 0 3
39501: PUSH
39502: LD_INT 0
39504: ST_TO_ADDR
// break ;
39505: GO 39509
// end ;
39507: GO 39470
39509: POP
39510: POP
// end else
39511: GO 39521
// result := false ;
39513: LD_ADDR_VAR 0 3
39517: PUSH
39518: LD_INT 0
39520: ST_TO_ADDR
// end ;
39521: LD_VAR 0 3
39525: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39526: LD_INT 0
39528: PPUSH
39529: PPUSH
// if not array1 or not array2 then
39530: LD_VAR 0 1
39534: NOT
39535: PUSH
39536: LD_VAR 0 2
39540: NOT
39541: OR
39542: IFFALSE 39546
// exit ;
39544: GO 39610
// result := true ;
39546: LD_ADDR_VAR 0 3
39550: PUSH
39551: LD_INT 1
39553: ST_TO_ADDR
// for i = 1 to array1 do
39554: LD_ADDR_VAR 0 4
39558: PUSH
39559: DOUBLE
39560: LD_INT 1
39562: DEC
39563: ST_TO_ADDR
39564: LD_VAR 0 1
39568: PUSH
39569: FOR_TO
39570: IFFALSE 39608
// if array1 [ i ] <> array2 [ i ] then
39572: LD_VAR 0 1
39576: PUSH
39577: LD_VAR 0 4
39581: ARRAY
39582: PUSH
39583: LD_VAR 0 2
39587: PUSH
39588: LD_VAR 0 4
39592: ARRAY
39593: NONEQUAL
39594: IFFALSE 39606
// begin result := false ;
39596: LD_ADDR_VAR 0 3
39600: PUSH
39601: LD_INT 0
39603: ST_TO_ADDR
// break ;
39604: GO 39608
// end ;
39606: GO 39569
39608: POP
39609: POP
// end ;
39610: LD_VAR 0 3
39614: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39615: LD_INT 0
39617: PPUSH
39618: PPUSH
39619: PPUSH
// pom := GetBase ( fac ) ;
39620: LD_ADDR_VAR 0 5
39624: PUSH
39625: LD_VAR 0 1
39629: PPUSH
39630: CALL_OW 274
39634: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39635: LD_ADDR_VAR 0 4
39639: PUSH
39640: LD_VAR 0 2
39644: PUSH
39645: LD_INT 1
39647: ARRAY
39648: PPUSH
39649: LD_VAR 0 2
39653: PUSH
39654: LD_INT 2
39656: ARRAY
39657: PPUSH
39658: LD_VAR 0 2
39662: PUSH
39663: LD_INT 3
39665: ARRAY
39666: PPUSH
39667: LD_VAR 0 2
39671: PUSH
39672: LD_INT 4
39674: ARRAY
39675: PPUSH
39676: CALL_OW 449
39680: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39681: LD_ADDR_VAR 0 3
39685: PUSH
39686: LD_VAR 0 5
39690: PPUSH
39691: LD_INT 1
39693: PPUSH
39694: CALL_OW 275
39698: PUSH
39699: LD_VAR 0 4
39703: PUSH
39704: LD_INT 1
39706: ARRAY
39707: GREATEREQUAL
39708: PUSH
39709: LD_VAR 0 5
39713: PPUSH
39714: LD_INT 2
39716: PPUSH
39717: CALL_OW 275
39721: PUSH
39722: LD_VAR 0 4
39726: PUSH
39727: LD_INT 2
39729: ARRAY
39730: GREATEREQUAL
39731: AND
39732: PUSH
39733: LD_VAR 0 5
39737: PPUSH
39738: LD_INT 3
39740: PPUSH
39741: CALL_OW 275
39745: PUSH
39746: LD_VAR 0 4
39750: PUSH
39751: LD_INT 3
39753: ARRAY
39754: GREATEREQUAL
39755: AND
39756: ST_TO_ADDR
// end ;
39757: LD_VAR 0 3
39761: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39762: LD_INT 0
39764: PPUSH
39765: PPUSH
39766: PPUSH
39767: PPUSH
// pom := GetBase ( building ) ;
39768: LD_ADDR_VAR 0 3
39772: PUSH
39773: LD_VAR 0 1
39777: PPUSH
39778: CALL_OW 274
39782: ST_TO_ADDR
// if not pom then
39783: LD_VAR 0 3
39787: NOT
39788: IFFALSE 39792
// exit ;
39790: GO 39962
// btype := GetBType ( building ) ;
39792: LD_ADDR_VAR 0 5
39796: PUSH
39797: LD_VAR 0 1
39801: PPUSH
39802: CALL_OW 266
39806: ST_TO_ADDR
// if btype = b_armoury then
39807: LD_VAR 0 5
39811: PUSH
39812: LD_INT 4
39814: EQUAL
39815: IFFALSE 39825
// btype := b_barracks ;
39817: LD_ADDR_VAR 0 5
39821: PUSH
39822: LD_INT 5
39824: ST_TO_ADDR
// if btype = b_depot then
39825: LD_VAR 0 5
39829: PUSH
39830: LD_INT 0
39832: EQUAL
39833: IFFALSE 39843
// btype := b_warehouse ;
39835: LD_ADDR_VAR 0 5
39839: PUSH
39840: LD_INT 1
39842: ST_TO_ADDR
// if btype = b_workshop then
39843: LD_VAR 0 5
39847: PUSH
39848: LD_INT 2
39850: EQUAL
39851: IFFALSE 39861
// btype := b_factory ;
39853: LD_ADDR_VAR 0 5
39857: PUSH
39858: LD_INT 3
39860: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39861: LD_ADDR_VAR 0 4
39865: PUSH
39866: LD_VAR 0 5
39870: PPUSH
39871: LD_VAR 0 1
39875: PPUSH
39876: CALL_OW 248
39880: PPUSH
39881: CALL_OW 450
39885: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39886: LD_ADDR_VAR 0 2
39890: PUSH
39891: LD_VAR 0 3
39895: PPUSH
39896: LD_INT 1
39898: PPUSH
39899: CALL_OW 275
39903: PUSH
39904: LD_VAR 0 4
39908: PUSH
39909: LD_INT 1
39911: ARRAY
39912: GREATEREQUAL
39913: PUSH
39914: LD_VAR 0 3
39918: PPUSH
39919: LD_INT 2
39921: PPUSH
39922: CALL_OW 275
39926: PUSH
39927: LD_VAR 0 4
39931: PUSH
39932: LD_INT 2
39934: ARRAY
39935: GREATEREQUAL
39936: AND
39937: PUSH
39938: LD_VAR 0 3
39942: PPUSH
39943: LD_INT 3
39945: PPUSH
39946: CALL_OW 275
39950: PUSH
39951: LD_VAR 0 4
39955: PUSH
39956: LD_INT 3
39958: ARRAY
39959: GREATEREQUAL
39960: AND
39961: ST_TO_ADDR
// end ;
39962: LD_VAR 0 2
39966: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39967: LD_INT 0
39969: PPUSH
39970: PPUSH
39971: PPUSH
// pom := GetBase ( building ) ;
39972: LD_ADDR_VAR 0 4
39976: PUSH
39977: LD_VAR 0 1
39981: PPUSH
39982: CALL_OW 274
39986: ST_TO_ADDR
// if not pom then
39987: LD_VAR 0 4
39991: NOT
39992: IFFALSE 39996
// exit ;
39994: GO 40097
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39996: LD_ADDR_VAR 0 5
40000: PUSH
40001: LD_VAR 0 2
40005: PPUSH
40006: LD_VAR 0 1
40010: PPUSH
40011: CALL_OW 248
40015: PPUSH
40016: CALL_OW 450
40020: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40021: LD_ADDR_VAR 0 3
40025: PUSH
40026: LD_VAR 0 4
40030: PPUSH
40031: LD_INT 1
40033: PPUSH
40034: CALL_OW 275
40038: PUSH
40039: LD_VAR 0 5
40043: PUSH
40044: LD_INT 1
40046: ARRAY
40047: GREATEREQUAL
40048: PUSH
40049: LD_VAR 0 4
40053: PPUSH
40054: LD_INT 2
40056: PPUSH
40057: CALL_OW 275
40061: PUSH
40062: LD_VAR 0 5
40066: PUSH
40067: LD_INT 2
40069: ARRAY
40070: GREATEREQUAL
40071: AND
40072: PUSH
40073: LD_VAR 0 4
40077: PPUSH
40078: LD_INT 3
40080: PPUSH
40081: CALL_OW 275
40085: PUSH
40086: LD_VAR 0 5
40090: PUSH
40091: LD_INT 3
40093: ARRAY
40094: GREATEREQUAL
40095: AND
40096: ST_TO_ADDR
// end ;
40097: LD_VAR 0 3
40101: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40102: LD_INT 0
40104: PPUSH
40105: PPUSH
40106: PPUSH
40107: PPUSH
40108: PPUSH
40109: PPUSH
40110: PPUSH
40111: PPUSH
40112: PPUSH
40113: PPUSH
40114: PPUSH
// result := false ;
40115: LD_ADDR_VAR 0 8
40119: PUSH
40120: LD_INT 0
40122: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40123: LD_VAR 0 5
40127: NOT
40128: PUSH
40129: LD_VAR 0 1
40133: NOT
40134: OR
40135: PUSH
40136: LD_VAR 0 2
40140: NOT
40141: OR
40142: PUSH
40143: LD_VAR 0 3
40147: NOT
40148: OR
40149: IFFALSE 40153
// exit ;
40151: GO 40967
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40153: LD_ADDR_VAR 0 14
40157: PUSH
40158: LD_VAR 0 1
40162: PPUSH
40163: LD_VAR 0 2
40167: PPUSH
40168: LD_VAR 0 3
40172: PPUSH
40173: LD_VAR 0 4
40177: PPUSH
40178: LD_VAR 0 5
40182: PUSH
40183: LD_INT 1
40185: ARRAY
40186: PPUSH
40187: CALL_OW 248
40191: PPUSH
40192: LD_INT 0
40194: PPUSH
40195: CALL 42200 0 6
40199: ST_TO_ADDR
// if not hexes then
40200: LD_VAR 0 14
40204: NOT
40205: IFFALSE 40209
// exit ;
40207: GO 40967
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40209: LD_ADDR_VAR 0 17
40213: PUSH
40214: LD_VAR 0 5
40218: PPUSH
40219: LD_INT 22
40221: PUSH
40222: LD_VAR 0 13
40226: PPUSH
40227: CALL_OW 255
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 2
40238: PUSH
40239: LD_INT 30
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 30
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: LIST
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PPUSH
40268: CALL_OW 72
40272: ST_TO_ADDR
// for i = 1 to hexes do
40273: LD_ADDR_VAR 0 9
40277: PUSH
40278: DOUBLE
40279: LD_INT 1
40281: DEC
40282: ST_TO_ADDR
40283: LD_VAR 0 14
40287: PUSH
40288: FOR_TO
40289: IFFALSE 40965
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40291: LD_ADDR_VAR 0 13
40295: PUSH
40296: LD_VAR 0 14
40300: PUSH
40301: LD_VAR 0 9
40305: ARRAY
40306: PUSH
40307: LD_INT 1
40309: ARRAY
40310: PPUSH
40311: LD_VAR 0 14
40315: PUSH
40316: LD_VAR 0 9
40320: ARRAY
40321: PUSH
40322: LD_INT 2
40324: ARRAY
40325: PPUSH
40326: CALL_OW 428
40330: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40331: LD_VAR 0 14
40335: PUSH
40336: LD_VAR 0 9
40340: ARRAY
40341: PUSH
40342: LD_INT 1
40344: ARRAY
40345: PPUSH
40346: LD_VAR 0 14
40350: PUSH
40351: LD_VAR 0 9
40355: ARRAY
40356: PUSH
40357: LD_INT 2
40359: ARRAY
40360: PPUSH
40361: CALL_OW 351
40365: PUSH
40366: LD_VAR 0 14
40370: PUSH
40371: LD_VAR 0 9
40375: ARRAY
40376: PUSH
40377: LD_INT 1
40379: ARRAY
40380: PPUSH
40381: LD_VAR 0 14
40385: PUSH
40386: LD_VAR 0 9
40390: ARRAY
40391: PUSH
40392: LD_INT 2
40394: ARRAY
40395: PPUSH
40396: CALL_OW 488
40400: NOT
40401: OR
40402: PUSH
40403: LD_VAR 0 13
40407: PPUSH
40408: CALL_OW 247
40412: PUSH
40413: LD_INT 3
40415: EQUAL
40416: OR
40417: IFFALSE 40423
// exit ;
40419: POP
40420: POP
40421: GO 40967
// if not tmp then
40423: LD_VAR 0 13
40427: NOT
40428: IFFALSE 40432
// continue ;
40430: GO 40288
// result := true ;
40432: LD_ADDR_VAR 0 8
40436: PUSH
40437: LD_INT 1
40439: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40440: LD_VAR 0 6
40444: PUSH
40445: LD_VAR 0 13
40449: PPUSH
40450: CALL_OW 247
40454: PUSH
40455: LD_INT 2
40457: EQUAL
40458: AND
40459: PUSH
40460: LD_VAR 0 13
40464: PPUSH
40465: CALL_OW 263
40469: PUSH
40470: LD_INT 1
40472: EQUAL
40473: AND
40474: IFFALSE 40638
// begin if IsDrivenBy ( tmp ) then
40476: LD_VAR 0 13
40480: PPUSH
40481: CALL_OW 311
40485: IFFALSE 40489
// continue ;
40487: GO 40288
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40489: LD_VAR 0 6
40493: PPUSH
40494: LD_INT 3
40496: PUSH
40497: LD_INT 60
40499: PUSH
40500: EMPTY
40501: LIST
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 3
40509: PUSH
40510: LD_INT 55
40512: PUSH
40513: EMPTY
40514: LIST
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PPUSH
40524: CALL_OW 72
40528: IFFALSE 40636
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40530: LD_ADDR_VAR 0 18
40534: PUSH
40535: LD_VAR 0 6
40539: PPUSH
40540: LD_INT 3
40542: PUSH
40543: LD_INT 60
40545: PUSH
40546: EMPTY
40547: LIST
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 3
40555: PUSH
40556: LD_INT 55
40558: PUSH
40559: EMPTY
40560: LIST
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PPUSH
40570: CALL_OW 72
40574: PUSH
40575: LD_INT 1
40577: ARRAY
40578: ST_TO_ADDR
// if IsInUnit ( driver ) then
40579: LD_VAR 0 18
40583: PPUSH
40584: CALL_OW 310
40588: IFFALSE 40599
// ComExit ( driver ) ;
40590: LD_VAR 0 18
40594: PPUSH
40595: CALL 65980 0 1
// AddComEnterUnit ( driver , tmp ) ;
40599: LD_VAR 0 18
40603: PPUSH
40604: LD_VAR 0 13
40608: PPUSH
40609: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40613: LD_VAR 0 18
40617: PPUSH
40618: LD_VAR 0 7
40622: PPUSH
40623: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40627: LD_VAR 0 18
40631: PPUSH
40632: CALL_OW 181
// end ; continue ;
40636: GO 40288
// end ; if not cleaners or not tmp in cleaners then
40638: LD_VAR 0 6
40642: NOT
40643: PUSH
40644: LD_VAR 0 13
40648: PUSH
40649: LD_VAR 0 6
40653: IN
40654: NOT
40655: OR
40656: IFFALSE 40963
// begin if dep then
40658: LD_VAR 0 17
40662: IFFALSE 40798
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40664: LD_ADDR_VAR 0 16
40668: PUSH
40669: LD_VAR 0 17
40673: PUSH
40674: LD_INT 1
40676: ARRAY
40677: PPUSH
40678: CALL_OW 250
40682: PPUSH
40683: LD_VAR 0 17
40687: PUSH
40688: LD_INT 1
40690: ARRAY
40691: PPUSH
40692: CALL_OW 254
40696: PPUSH
40697: LD_INT 5
40699: PPUSH
40700: CALL_OW 272
40704: PUSH
40705: LD_VAR 0 17
40709: PUSH
40710: LD_INT 1
40712: ARRAY
40713: PPUSH
40714: CALL_OW 251
40718: PPUSH
40719: LD_VAR 0 17
40723: PUSH
40724: LD_INT 1
40726: ARRAY
40727: PPUSH
40728: CALL_OW 254
40732: PPUSH
40733: LD_INT 5
40735: PPUSH
40736: CALL_OW 273
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40745: LD_VAR 0 16
40749: PUSH
40750: LD_INT 1
40752: ARRAY
40753: PPUSH
40754: LD_VAR 0 16
40758: PUSH
40759: LD_INT 2
40761: ARRAY
40762: PPUSH
40763: CALL_OW 488
40767: IFFALSE 40798
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40769: LD_VAR 0 13
40773: PPUSH
40774: LD_VAR 0 16
40778: PUSH
40779: LD_INT 1
40781: ARRAY
40782: PPUSH
40783: LD_VAR 0 16
40787: PUSH
40788: LD_INT 2
40790: ARRAY
40791: PPUSH
40792: CALL_OW 111
// continue ;
40796: GO 40288
// end ; end ; r := GetDir ( tmp ) ;
40798: LD_ADDR_VAR 0 15
40802: PUSH
40803: LD_VAR 0 13
40807: PPUSH
40808: CALL_OW 254
40812: ST_TO_ADDR
// if r = 5 then
40813: LD_VAR 0 15
40817: PUSH
40818: LD_INT 5
40820: EQUAL
40821: IFFALSE 40831
// r := 0 ;
40823: LD_ADDR_VAR 0 15
40827: PUSH
40828: LD_INT 0
40830: ST_TO_ADDR
// for j = r to 5 do
40831: LD_ADDR_VAR 0 10
40835: PUSH
40836: DOUBLE
40837: LD_VAR 0 15
40841: DEC
40842: ST_TO_ADDR
40843: LD_INT 5
40845: PUSH
40846: FOR_TO
40847: IFFALSE 40961
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40849: LD_ADDR_VAR 0 11
40853: PUSH
40854: LD_VAR 0 13
40858: PPUSH
40859: CALL_OW 250
40863: PPUSH
40864: LD_VAR 0 10
40868: PPUSH
40869: LD_INT 2
40871: PPUSH
40872: CALL_OW 272
40876: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40877: LD_ADDR_VAR 0 12
40881: PUSH
40882: LD_VAR 0 13
40886: PPUSH
40887: CALL_OW 251
40891: PPUSH
40892: LD_VAR 0 10
40896: PPUSH
40897: LD_INT 2
40899: PPUSH
40900: CALL_OW 273
40904: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40905: LD_VAR 0 11
40909: PPUSH
40910: LD_VAR 0 12
40914: PPUSH
40915: CALL_OW 488
40919: PUSH
40920: LD_VAR 0 11
40924: PPUSH
40925: LD_VAR 0 12
40929: PPUSH
40930: CALL_OW 428
40934: NOT
40935: AND
40936: IFFALSE 40959
// begin ComMoveXY ( tmp , _x , _y ) ;
40938: LD_VAR 0 13
40942: PPUSH
40943: LD_VAR 0 11
40947: PPUSH
40948: LD_VAR 0 12
40952: PPUSH
40953: CALL_OW 111
// break ;
40957: GO 40961
// end ; end ;
40959: GO 40846
40961: POP
40962: POP
// end ; end ;
40963: GO 40288
40965: POP
40966: POP
// end ;
40967: LD_VAR 0 8
40971: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40972: LD_INT 0
40974: PPUSH
// result := true ;
40975: LD_ADDR_VAR 0 3
40979: PUSH
40980: LD_INT 1
40982: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40983: LD_VAR 0 2
40987: PUSH
40988: LD_INT 24
40990: DOUBLE
40991: EQUAL
40992: IFTRUE 41002
40994: LD_INT 33
40996: DOUBLE
40997: EQUAL
40998: IFTRUE 41002
41000: GO 41027
41002: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41003: LD_ADDR_VAR 0 3
41007: PUSH
41008: LD_INT 32
41010: PPUSH
41011: LD_VAR 0 1
41015: PPUSH
41016: CALL_OW 321
41020: PUSH
41021: LD_INT 2
41023: EQUAL
41024: ST_TO_ADDR
41025: GO 41343
41027: LD_INT 20
41029: DOUBLE
41030: EQUAL
41031: IFTRUE 41035
41033: GO 41060
41035: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41036: LD_ADDR_VAR 0 3
41040: PUSH
41041: LD_INT 6
41043: PPUSH
41044: LD_VAR 0 1
41048: PPUSH
41049: CALL_OW 321
41053: PUSH
41054: LD_INT 2
41056: EQUAL
41057: ST_TO_ADDR
41058: GO 41343
41060: LD_INT 22
41062: DOUBLE
41063: EQUAL
41064: IFTRUE 41074
41066: LD_INT 36
41068: DOUBLE
41069: EQUAL
41070: IFTRUE 41074
41072: GO 41099
41074: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41075: LD_ADDR_VAR 0 3
41079: PUSH
41080: LD_INT 15
41082: PPUSH
41083: LD_VAR 0 1
41087: PPUSH
41088: CALL_OW 321
41092: PUSH
41093: LD_INT 2
41095: EQUAL
41096: ST_TO_ADDR
41097: GO 41343
41099: LD_INT 30
41101: DOUBLE
41102: EQUAL
41103: IFTRUE 41107
41105: GO 41132
41107: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41108: LD_ADDR_VAR 0 3
41112: PUSH
41113: LD_INT 20
41115: PPUSH
41116: LD_VAR 0 1
41120: PPUSH
41121: CALL_OW 321
41125: PUSH
41126: LD_INT 2
41128: EQUAL
41129: ST_TO_ADDR
41130: GO 41343
41132: LD_INT 28
41134: DOUBLE
41135: EQUAL
41136: IFTRUE 41146
41138: LD_INT 21
41140: DOUBLE
41141: EQUAL
41142: IFTRUE 41146
41144: GO 41171
41146: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41147: LD_ADDR_VAR 0 3
41151: PUSH
41152: LD_INT 21
41154: PPUSH
41155: LD_VAR 0 1
41159: PPUSH
41160: CALL_OW 321
41164: PUSH
41165: LD_INT 2
41167: EQUAL
41168: ST_TO_ADDR
41169: GO 41343
41171: LD_INT 16
41173: DOUBLE
41174: EQUAL
41175: IFTRUE 41179
41177: GO 41204
41179: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41180: LD_ADDR_VAR 0 3
41184: PUSH
41185: LD_INT 84
41187: PPUSH
41188: LD_VAR 0 1
41192: PPUSH
41193: CALL_OW 321
41197: PUSH
41198: LD_INT 2
41200: EQUAL
41201: ST_TO_ADDR
41202: GO 41343
41204: LD_INT 19
41206: DOUBLE
41207: EQUAL
41208: IFTRUE 41218
41210: LD_INT 23
41212: DOUBLE
41213: EQUAL
41214: IFTRUE 41218
41216: GO 41243
41218: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41219: LD_ADDR_VAR 0 3
41223: PUSH
41224: LD_INT 83
41226: PPUSH
41227: LD_VAR 0 1
41231: PPUSH
41232: CALL_OW 321
41236: PUSH
41237: LD_INT 2
41239: EQUAL
41240: ST_TO_ADDR
41241: GO 41343
41243: LD_INT 17
41245: DOUBLE
41246: EQUAL
41247: IFTRUE 41251
41249: GO 41276
41251: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41252: LD_ADDR_VAR 0 3
41256: PUSH
41257: LD_INT 39
41259: PPUSH
41260: LD_VAR 0 1
41264: PPUSH
41265: CALL_OW 321
41269: PUSH
41270: LD_INT 2
41272: EQUAL
41273: ST_TO_ADDR
41274: GO 41343
41276: LD_INT 18
41278: DOUBLE
41279: EQUAL
41280: IFTRUE 41284
41282: GO 41309
41284: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41285: LD_ADDR_VAR 0 3
41289: PUSH
41290: LD_INT 40
41292: PPUSH
41293: LD_VAR 0 1
41297: PPUSH
41298: CALL_OW 321
41302: PUSH
41303: LD_INT 2
41305: EQUAL
41306: ST_TO_ADDR
41307: GO 41343
41309: LD_INT 27
41311: DOUBLE
41312: EQUAL
41313: IFTRUE 41317
41315: GO 41342
41317: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41318: LD_ADDR_VAR 0 3
41322: PUSH
41323: LD_INT 35
41325: PPUSH
41326: LD_VAR 0 1
41330: PPUSH
41331: CALL_OW 321
41335: PUSH
41336: LD_INT 2
41338: EQUAL
41339: ST_TO_ADDR
41340: GO 41343
41342: POP
// end ;
41343: LD_VAR 0 3
41347: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41348: LD_INT 0
41350: PPUSH
41351: PPUSH
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
41360: PPUSH
// result := false ;
41361: LD_ADDR_VAR 0 6
41365: PUSH
41366: LD_INT 0
41368: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41369: LD_VAR 0 1
41373: NOT
41374: PUSH
41375: LD_VAR 0 1
41379: PPUSH
41380: CALL_OW 266
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: IN
41395: NOT
41396: OR
41397: PUSH
41398: LD_VAR 0 2
41402: NOT
41403: OR
41404: PUSH
41405: LD_VAR 0 5
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: LD_INT 3
41421: PUSH
41422: LD_INT 4
41424: PUSH
41425: LD_INT 5
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: IN
41436: NOT
41437: OR
41438: PUSH
41439: LD_VAR 0 3
41443: PPUSH
41444: LD_VAR 0 4
41448: PPUSH
41449: CALL_OW 488
41453: NOT
41454: OR
41455: IFFALSE 41459
// exit ;
41457: GO 42195
// side := GetSide ( depot ) ;
41459: LD_ADDR_VAR 0 9
41463: PUSH
41464: LD_VAR 0 1
41468: PPUSH
41469: CALL_OW 255
41473: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41474: LD_VAR 0 9
41478: PPUSH
41479: LD_VAR 0 2
41483: PPUSH
41484: CALL 40972 0 2
41488: NOT
41489: IFFALSE 41493
// exit ;
41491: GO 42195
// pom := GetBase ( depot ) ;
41493: LD_ADDR_VAR 0 10
41497: PUSH
41498: LD_VAR 0 1
41502: PPUSH
41503: CALL_OW 274
41507: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41508: LD_ADDR_VAR 0 11
41512: PUSH
41513: LD_VAR 0 2
41517: PPUSH
41518: LD_VAR 0 1
41522: PPUSH
41523: CALL_OW 248
41527: PPUSH
41528: CALL_OW 450
41532: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41533: LD_VAR 0 10
41537: PPUSH
41538: LD_INT 1
41540: PPUSH
41541: CALL_OW 275
41545: PUSH
41546: LD_VAR 0 11
41550: PUSH
41551: LD_INT 1
41553: ARRAY
41554: GREATEREQUAL
41555: PUSH
41556: LD_VAR 0 10
41560: PPUSH
41561: LD_INT 2
41563: PPUSH
41564: CALL_OW 275
41568: PUSH
41569: LD_VAR 0 11
41573: PUSH
41574: LD_INT 2
41576: ARRAY
41577: GREATEREQUAL
41578: AND
41579: PUSH
41580: LD_VAR 0 10
41584: PPUSH
41585: LD_INT 3
41587: PPUSH
41588: CALL_OW 275
41592: PUSH
41593: LD_VAR 0 11
41597: PUSH
41598: LD_INT 3
41600: ARRAY
41601: GREATEREQUAL
41602: AND
41603: NOT
41604: IFFALSE 41608
// exit ;
41606: GO 42195
// if GetBType ( depot ) = b_depot then
41608: LD_VAR 0 1
41612: PPUSH
41613: CALL_OW 266
41617: PUSH
41618: LD_INT 0
41620: EQUAL
41621: IFFALSE 41633
// dist := 28 else
41623: LD_ADDR_VAR 0 14
41627: PUSH
41628: LD_INT 28
41630: ST_TO_ADDR
41631: GO 41641
// dist := 36 ;
41633: LD_ADDR_VAR 0 14
41637: PUSH
41638: LD_INT 36
41640: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41641: LD_VAR 0 1
41645: PPUSH
41646: LD_VAR 0 3
41650: PPUSH
41651: LD_VAR 0 4
41655: PPUSH
41656: CALL_OW 297
41660: PUSH
41661: LD_VAR 0 14
41665: GREATER
41666: IFFALSE 41670
// exit ;
41668: GO 42195
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41670: LD_ADDR_VAR 0 12
41674: PUSH
41675: LD_VAR 0 2
41679: PPUSH
41680: LD_VAR 0 3
41684: PPUSH
41685: LD_VAR 0 4
41689: PPUSH
41690: LD_VAR 0 5
41694: PPUSH
41695: LD_VAR 0 1
41699: PPUSH
41700: CALL_OW 248
41704: PPUSH
41705: LD_INT 0
41707: PPUSH
41708: CALL 42200 0 6
41712: ST_TO_ADDR
// if not hexes then
41713: LD_VAR 0 12
41717: NOT
41718: IFFALSE 41722
// exit ;
41720: GO 42195
// hex := GetHexInfo ( x , y ) ;
41722: LD_ADDR_VAR 0 15
41726: PUSH
41727: LD_VAR 0 3
41731: PPUSH
41732: LD_VAR 0 4
41736: PPUSH
41737: CALL_OW 546
41741: ST_TO_ADDR
// if hex [ 1 ] then
41742: LD_VAR 0 15
41746: PUSH
41747: LD_INT 1
41749: ARRAY
41750: IFFALSE 41754
// exit ;
41752: GO 42195
// height := hex [ 2 ] ;
41754: LD_ADDR_VAR 0 13
41758: PUSH
41759: LD_VAR 0 15
41763: PUSH
41764: LD_INT 2
41766: ARRAY
41767: ST_TO_ADDR
// for i = 1 to hexes do
41768: LD_ADDR_VAR 0 7
41772: PUSH
41773: DOUBLE
41774: LD_INT 1
41776: DEC
41777: ST_TO_ADDR
41778: LD_VAR 0 12
41782: PUSH
41783: FOR_TO
41784: IFFALSE 42114
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41786: LD_VAR 0 12
41790: PUSH
41791: LD_VAR 0 7
41795: ARRAY
41796: PUSH
41797: LD_INT 1
41799: ARRAY
41800: PPUSH
41801: LD_VAR 0 12
41805: PUSH
41806: LD_VAR 0 7
41810: ARRAY
41811: PUSH
41812: LD_INT 2
41814: ARRAY
41815: PPUSH
41816: CALL_OW 488
41820: NOT
41821: PUSH
41822: LD_VAR 0 12
41826: PUSH
41827: LD_VAR 0 7
41831: ARRAY
41832: PUSH
41833: LD_INT 1
41835: ARRAY
41836: PPUSH
41837: LD_VAR 0 12
41841: PUSH
41842: LD_VAR 0 7
41846: ARRAY
41847: PUSH
41848: LD_INT 2
41850: ARRAY
41851: PPUSH
41852: CALL_OW 428
41856: PUSH
41857: LD_INT 0
41859: GREATER
41860: OR
41861: PUSH
41862: LD_VAR 0 12
41866: PUSH
41867: LD_VAR 0 7
41871: ARRAY
41872: PUSH
41873: LD_INT 1
41875: ARRAY
41876: PPUSH
41877: LD_VAR 0 12
41881: PUSH
41882: LD_VAR 0 7
41886: ARRAY
41887: PUSH
41888: LD_INT 2
41890: ARRAY
41891: PPUSH
41892: CALL_OW 351
41896: OR
41897: IFFALSE 41903
// exit ;
41899: POP
41900: POP
41901: GO 42195
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41903: LD_ADDR_VAR 0 8
41907: PUSH
41908: LD_VAR 0 12
41912: PUSH
41913: LD_VAR 0 7
41917: ARRAY
41918: PUSH
41919: LD_INT 1
41921: ARRAY
41922: PPUSH
41923: LD_VAR 0 12
41927: PUSH
41928: LD_VAR 0 7
41932: ARRAY
41933: PUSH
41934: LD_INT 2
41936: ARRAY
41937: PPUSH
41938: CALL_OW 546
41942: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41943: LD_VAR 0 8
41947: PUSH
41948: LD_INT 1
41950: ARRAY
41951: PUSH
41952: LD_VAR 0 8
41956: PUSH
41957: LD_INT 2
41959: ARRAY
41960: PUSH
41961: LD_VAR 0 13
41965: PUSH
41966: LD_INT 2
41968: PLUS
41969: GREATER
41970: OR
41971: PUSH
41972: LD_VAR 0 8
41976: PUSH
41977: LD_INT 2
41979: ARRAY
41980: PUSH
41981: LD_VAR 0 13
41985: PUSH
41986: LD_INT 2
41988: MINUS
41989: LESS
41990: OR
41991: PUSH
41992: LD_VAR 0 8
41996: PUSH
41997: LD_INT 3
41999: ARRAY
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 8
42006: PUSH
42007: LD_INT 9
42009: PUSH
42010: LD_INT 10
42012: PUSH
42013: LD_INT 11
42015: PUSH
42016: LD_INT 12
42018: PUSH
42019: LD_INT 13
42021: PUSH
42022: LD_INT 16
42024: PUSH
42025: LD_INT 17
42027: PUSH
42028: LD_INT 18
42030: PUSH
42031: LD_INT 19
42033: PUSH
42034: LD_INT 20
42036: PUSH
42037: LD_INT 21
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: IN
42055: NOT
42056: OR
42057: PUSH
42058: LD_VAR 0 8
42062: PUSH
42063: LD_INT 5
42065: ARRAY
42066: NOT
42067: OR
42068: PUSH
42069: LD_VAR 0 8
42073: PUSH
42074: LD_INT 6
42076: ARRAY
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: LD_INT 7
42086: PUSH
42087: LD_INT 9
42089: PUSH
42090: LD_INT 10
42092: PUSH
42093: LD_INT 11
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: IN
42104: NOT
42105: OR
42106: IFFALSE 42112
// exit ;
42108: POP
42109: POP
42110: GO 42195
// end ;
42112: GO 41783
42114: POP
42115: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42116: LD_VAR 0 9
42120: PPUSH
42121: LD_VAR 0 3
42125: PPUSH
42126: LD_VAR 0 4
42130: PPUSH
42131: LD_INT 20
42133: PPUSH
42134: CALL 34147 0 4
42138: PUSH
42139: LD_INT 4
42141: ARRAY
42142: IFFALSE 42146
// exit ;
42144: GO 42195
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42146: LD_VAR 0 2
42150: PUSH
42151: LD_INT 29
42153: PUSH
42154: LD_INT 30
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: IN
42161: PUSH
42162: LD_VAR 0 3
42166: PPUSH
42167: LD_VAR 0 4
42171: PPUSH
42172: LD_VAR 0 9
42176: PPUSH
42177: CALL_OW 440
42181: NOT
42182: AND
42183: IFFALSE 42187
// exit ;
42185: GO 42195
// result := true ;
42187: LD_ADDR_VAR 0 6
42191: PUSH
42192: LD_INT 1
42194: ST_TO_ADDR
// end ;
42195: LD_VAR 0 6
42199: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42200: LD_INT 0
42202: PPUSH
42203: PPUSH
42204: PPUSH
42205: PPUSH
42206: PPUSH
42207: PPUSH
42208: PPUSH
42209: PPUSH
42210: PPUSH
42211: PPUSH
42212: PPUSH
42213: PPUSH
42214: PPUSH
42215: PPUSH
42216: PPUSH
42217: PPUSH
42218: PPUSH
42219: PPUSH
42220: PPUSH
42221: PPUSH
42222: PPUSH
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
42227: PPUSH
42228: PPUSH
42229: PPUSH
42230: PPUSH
42231: PPUSH
42232: PPUSH
42233: PPUSH
42234: PPUSH
42235: PPUSH
42236: PPUSH
42237: PPUSH
42238: PPUSH
42239: PPUSH
42240: PPUSH
42241: PPUSH
42242: PPUSH
42243: PPUSH
42244: PPUSH
42245: PPUSH
42246: PPUSH
42247: PPUSH
42248: PPUSH
42249: PPUSH
42250: PPUSH
42251: PPUSH
42252: PPUSH
42253: PPUSH
42254: PPUSH
42255: PPUSH
42256: PPUSH
42257: PPUSH
42258: PPUSH
42259: PPUSH
// result = [ ] ;
42260: LD_ADDR_VAR 0 7
42264: PUSH
42265: EMPTY
42266: ST_TO_ADDR
// temp_list = [ ] ;
42267: LD_ADDR_VAR 0 9
42271: PUSH
42272: EMPTY
42273: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42274: LD_VAR 0 4
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: LD_INT 3
42290: PUSH
42291: LD_INT 4
42293: PUSH
42294: LD_INT 5
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: IN
42305: NOT
42306: PUSH
42307: LD_VAR 0 1
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: IN
42322: PUSH
42323: LD_VAR 0 5
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: LD_INT 2
42333: PUSH
42334: LD_INT 3
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: IN
42342: NOT
42343: AND
42344: OR
42345: IFFALSE 42349
// exit ;
42347: GO 60740
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42349: LD_VAR 0 1
42353: PUSH
42354: LD_INT 6
42356: PUSH
42357: LD_INT 7
42359: PUSH
42360: LD_INT 8
42362: PUSH
42363: LD_INT 13
42365: PUSH
42366: LD_INT 12
42368: PUSH
42369: LD_INT 15
42371: PUSH
42372: LD_INT 11
42374: PUSH
42375: LD_INT 14
42377: PUSH
42378: LD_INT 10
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: IN
42392: IFFALSE 42402
// btype = b_lab ;
42394: LD_ADDR_VAR 0 1
42398: PUSH
42399: LD_INT 6
42401: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42402: LD_VAR 0 6
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: IN
42421: NOT
42422: PUSH
42423: LD_VAR 0 1
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 6
42442: PUSH
42443: LD_INT 36
42445: PUSH
42446: LD_INT 4
42448: PUSH
42449: LD_INT 5
42451: PUSH
42452: LD_INT 31
42454: PUSH
42455: LD_INT 32
42457: PUSH
42458: LD_INT 33
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: IN
42474: NOT
42475: PUSH
42476: LD_VAR 0 6
42480: PUSH
42481: LD_INT 1
42483: EQUAL
42484: AND
42485: OR
42486: PUSH
42487: LD_VAR 0 1
42491: PUSH
42492: LD_INT 2
42494: PUSH
42495: LD_INT 3
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: IN
42502: NOT
42503: PUSH
42504: LD_VAR 0 6
42508: PUSH
42509: LD_INT 2
42511: EQUAL
42512: AND
42513: OR
42514: IFFALSE 42524
// mode = 0 ;
42516: LD_ADDR_VAR 0 6
42520: PUSH
42521: LD_INT 0
42523: ST_TO_ADDR
// case mode of 0 :
42524: LD_VAR 0 6
42528: PUSH
42529: LD_INT 0
42531: DOUBLE
42532: EQUAL
42533: IFTRUE 42537
42535: GO 53990
42537: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42538: LD_ADDR_VAR 0 11
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: LD_INT 2
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 2
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 3
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42731: LD_ADDR_VAR 0 12
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 3
42888: NEG
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 3
42899: NEG
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42927: LD_ADDR_VAR 0 13
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 2
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: LD_INT 2
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: LD_INT 3
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 3
43086: NEG
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 3
43098: NEG
43099: PUSH
43100: LD_INT 3
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43126: LD_ADDR_VAR 0 14
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: LD_INT 3
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 3
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43322: LD_ADDR_VAR 0 15
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43515: LD_ADDR_VAR 0 16
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 2
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: NEG
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 2
43650: NEG
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 3
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 3
43672: PUSH
43673: LD_INT 3
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: LD_INT 3
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43708: LD_ADDR_VAR 0 17
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: LD_INT 2
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 2
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: NEG
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43938: LD_ADDR_VAR 0 18
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: LD_INT 2
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44168: LD_ADDR_VAR 0 19
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 2
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: LD_INT 2
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44398: LD_ADDR_VAR 0 20
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44628: LD_ADDR_VAR 0 21
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44858: LD_ADDR_VAR 0 22
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45088: LD_ADDR_VAR 0 23
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: LD_INT 3
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 3
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45368: LD_ADDR_VAR 0 24
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: LD_INT 2
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 3
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 3
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45644: LD_ADDR_VAR 0 25
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: LD_INT 2
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 3
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: LD_INT 3
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45918: LD_ADDR_VAR 0 26
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: LD_INT 3
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 3
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46194: LD_ADDR_VAR 0 27
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 3
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46474: LD_ADDR_VAR 0 28
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 2
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 2
46650: NEG
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 2
46673: NEG
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: NEG
46686: PUSH
46687: LD_INT 3
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 3
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 3
46721: NEG
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46756: LD_ADDR_VAR 0 29
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: LD_INT 3
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 3
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 3
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 3
47000: NEG
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47035: LD_ADDR_VAR 0 30
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: LD_INT 3
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 3
47278: NEG
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47313: LD_ADDR_VAR 0 31
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: NEG
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 3
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 3
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 3
47556: NEG
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47591: LD_ADDR_VAR 0 32
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 3
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 3
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: LD_INT 3
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 3
47834: NEG
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47869: LD_ADDR_VAR 0 33
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: NEG
48048: PUSH
48049: LD_INT 2
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: LD_INT 3
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 3
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 3
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 3
48113: NEG
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48148: LD_ADDR_VAR 0 34
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: NEG
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 3
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: LD_INT 3
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 3
48393: NEG
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48428: LD_ADDR_VAR 0 35
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48540: LD_ADDR_VAR 0 36
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48652: LD_ADDR_VAR 0 37
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48764: LD_ADDR_VAR 0 38
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48876: LD_ADDR_VAR 0 39
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48988: LD_ADDR_VAR 0 40
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49100: LD_ADDR_VAR 0 41
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: LD_INT 2
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: LD_INT 3
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 3
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 3
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 3
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 3
49343: PUSH
49344: LD_INT 3
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: LD_INT 3
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 3
49374: NEG
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: NEG
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 3
49397: NEG
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 3
49409: NEG
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49450: LD_ADDR_VAR 0 42
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 2
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 3
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 3
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 3
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: LD_INT 3
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: LD_INT 3
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 3
49747: NEG
49748: PUSH
49749: LD_INT 2
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 3
49759: NEG
49760: PUSH
49761: LD_INT 3
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49800: LD_ADDR_VAR 0 43
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: LD_INT 3
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 3
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 2
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 3
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 3
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: LD_INT 3
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 3
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 3
50096: NEG
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 3
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50148: LD_ADDR_VAR 0 44
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: NEG
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 2
50338: NEG
50339: PUSH
50340: LD_INT 3
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 3
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 3
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 3
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 3
50391: PUSH
50392: LD_INT 3
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: PUSH
50402: LD_INT 3
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 3
50422: NEG
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 3
50433: NEG
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 3
50445: NEG
50446: PUSH
50447: LD_INT 2
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 3
50457: NEG
50458: PUSH
50459: LD_INT 3
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50498: LD_ADDR_VAR 0 45
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: LD_INT 3
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: LD_INT 3
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 3
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 3
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 3
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 3
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 3
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 3
50795: NEG
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 3
50807: NEG
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50848: LD_ADDR_VAR 0 46
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 3
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: LD_INT 2
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 3
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: LD_INT 3
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 3
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 3
51144: NEG
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 3
51155: NEG
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51196: LD_ADDR_VAR 0 47
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 2
51311: NEG
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51347: LD_ADDR_VAR 0 48
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51494: LD_ADDR_VAR 0 49
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51638: LD_ADDR_VAR 0 50
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51782: LD_ADDR_VAR 0 51
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51929: LD_ADDR_VAR 0 52
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: LD_INT 2
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52080: LD_ADDR_VAR 0 53
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52310: LD_ADDR_VAR 0 54
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: NEG
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52540: LD_ADDR_VAR 0 55
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: NEG
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52770: LD_ADDR_VAR 0 56
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53000: LD_ADDR_VAR 0 57
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53230: LD_ADDR_VAR 0 58
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53460: LD_ADDR_VAR 0 59
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53548: LD_ADDR_VAR 0 60
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53636: LD_ADDR_VAR 0 61
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53724: LD_ADDR_VAR 0 62
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53812: LD_ADDR_VAR 0 63
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53900: LD_ADDR_VAR 0 64
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: ST_TO_ADDR
// end ; 1 :
53988: GO 59885
53990: LD_INT 1
53992: DOUBLE
53993: EQUAL
53994: IFTRUE 53998
53996: GO 56621
53998: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53999: LD_ADDR_VAR 0 11
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 3
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: LIST
54042: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54043: LD_ADDR_VAR 0 12
54047: PUSH
54048: LD_INT 2
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 3
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54084: LD_ADDR_VAR 0 13
54088: PUSH
54089: LD_INT 3
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: PUSH
54102: LD_INT 3
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 2
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: LIST
54123: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54124: LD_ADDR_VAR 0 14
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: LD_INT 3
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 3
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54165: LD_ADDR_VAR 0 15
54169: PUSH
54170: LD_INT 2
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 3
54183: NEG
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 3
54194: NEG
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: LIST
54208: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54209: LD_ADDR_VAR 0 16
54213: PUSH
54214: LD_INT 2
54216: NEG
54217: PUSH
54218: LD_INT 3
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 3
54228: NEG
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 3
54240: NEG
54241: PUSH
54242: LD_INT 3
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: LIST
54254: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54255: LD_ADDR_VAR 0 17
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: LD_INT 3
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 3
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54299: LD_ADDR_VAR 0 18
54303: PUSH
54304: LD_INT 2
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54340: LD_ADDR_VAR 0 19
54344: PUSH
54345: LD_INT 3
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 2
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: LIST
54379: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54380: LD_ADDR_VAR 0 20
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 3
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: LIST
54420: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54421: LD_ADDR_VAR 0 21
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 3
54439: NEG
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54465: LD_ADDR_VAR 0 22
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 3
54484: NEG
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 3
54496: NEG
54497: PUSH
54498: LD_INT 3
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: LIST
54510: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54511: LD_ADDR_VAR 0 23
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 3
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: LD_INT 4
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 3
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: LIST
54554: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54555: LD_ADDR_VAR 0 24
54559: PUSH
54560: LD_INT 3
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 4
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54596: LD_ADDR_VAR 0 25
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 4
54613: PUSH
54614: LD_INT 3
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 3
54623: PUSH
54624: LD_INT 4
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: LIST
54635: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54636: LD_ADDR_VAR 0 26
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 3
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 4
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 3
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54677: LD_ADDR_VAR 0 27
54681: PUSH
54682: LD_INT 3
54684: NEG
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 3
54695: NEG
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 4
54706: NEG
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: LIST
54720: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54721: LD_ADDR_VAR 0 28
54725: PUSH
54726: LD_INT 3
54728: NEG
54729: PUSH
54730: LD_INT 3
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: LD_INT 4
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 4
54752: NEG
54753: PUSH
54754: LD_INT 3
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: LIST
54766: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54767: LD_ADDR_VAR 0 29
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 3
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: LD_INT 4
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: LD_INT 4
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 3
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: LD_INT 5
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 5
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 4
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 6
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 6
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 5
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54922: LD_ADDR_VAR 0 30
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 3
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 3
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 3
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 4
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 4
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 4
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 5
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 5
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 5
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 6
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 6
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55065: LD_ADDR_VAR 0 31
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 3
55082: PUSH
55083: LD_INT 3
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 3
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 4
55102: PUSH
55103: LD_INT 3
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 4
55112: PUSH
55113: LD_INT 4
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: LD_INT 4
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 5
55132: PUSH
55133: LD_INT 4
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 5
55142: PUSH
55143: LD_INT 5
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 4
55152: PUSH
55153: LD_INT 5
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 6
55162: PUSH
55163: LD_INT 5
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 6
55172: PUSH
55173: LD_INT 6
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 5
55182: PUSH
55183: LD_INT 6
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55204: LD_ADDR_VAR 0 32
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 3
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 4
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: LD_INT 4
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: LD_INT 5
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: LD_INT 5
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 4
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 6
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 6
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: LD_INT 5
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55347: LD_ADDR_VAR 0 33
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 3
55365: NEG
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 3
55376: NEG
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 3
55388: NEG
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 4
55399: NEG
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 4
55410: NEG
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 4
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 5
55433: NEG
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 5
55444: NEG
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 5
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 6
55467: NEG
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 6
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55502: LD_ADDR_VAR 0 34
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 3
55521: NEG
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 3
55533: NEG
55534: PUSH
55535: LD_INT 3
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 3
55545: NEG
55546: PUSH
55547: LD_INT 4
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 4
55557: NEG
55558: PUSH
55559: LD_INT 3
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 4
55569: NEG
55570: PUSH
55571: LD_INT 4
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 4
55581: NEG
55582: PUSH
55583: LD_INT 5
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 5
55593: NEG
55594: PUSH
55595: LD_INT 4
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 5
55605: NEG
55606: PUSH
55607: LD_INT 5
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 5
55617: NEG
55618: PUSH
55619: LD_INT 6
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 6
55629: NEG
55630: PUSH
55631: LD_INT 5
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 6
55641: NEG
55642: PUSH
55643: LD_INT 6
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55665: LD_ADDR_VAR 0 41
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 3
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: LIST
55708: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55709: LD_ADDR_VAR 0 42
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55750: LD_ADDR_VAR 0 43
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 3
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: LD_INT 3
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: LIST
55789: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55790: LD_ADDR_VAR 0 44
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55831: LD_ADDR_VAR 0 45
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 3
55860: NEG
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: LIST
55874: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55875: LD_ADDR_VAR 0 46
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: LD_INT 3
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 3
55906: NEG
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: LIST
55920: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55921: LD_ADDR_VAR 0 47
55925: PUSH
55926: LD_INT 2
55928: NEG
55929: PUSH
55930: LD_INT 3
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 3
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55954: LD_ADDR_VAR 0 48
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55985: LD_ADDR_VAR 0 49
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56014: LD_ADDR_VAR 0 50
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: LD_INT 3
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56043: LD_ADDR_VAR 0 51
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56074: LD_ADDR_VAR 0 52
56078: PUSH
56079: LD_INT 3
56081: NEG
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 3
56093: NEG
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56107: LD_ADDR_VAR 0 53
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 3
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: LIST
56150: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56151: LD_ADDR_VAR 0 54
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 3
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 3
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: LIST
56191: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56192: LD_ADDR_VAR 0 55
56196: PUSH
56197: LD_INT 3
56199: PUSH
56200: LD_INT 2
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 3
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: LIST
56231: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56232: LD_ADDR_VAR 0 56
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: LD_INT 3
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 3
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56273: LD_ADDR_VAR 0 57
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: LIST
56316: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56317: LD_ADDR_VAR 0 58
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 3
56348: NEG
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56363: LD_ADDR_VAR 0 59
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: LIST
56406: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56407: LD_ADDR_VAR 0 60
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: LIST
56447: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56448: LD_ADDR_VAR 0 61
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: LIST
56487: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56488: LD_ADDR_VAR 0 62
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56529: LD_ADDR_VAR 0 63
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: LIST
56572: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56573: LD_ADDR_VAR 0 64
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: LIST
56618: ST_TO_ADDR
// end ; 2 :
56619: GO 59885
56621: LD_INT 2
56623: DOUBLE
56624: EQUAL
56625: IFTRUE 56629
56627: GO 59884
56629: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56630: LD_ADDR_VAR 0 29
56634: PUSH
56635: LD_INT 4
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 4
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 5
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 5
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 4
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 5
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 3
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 4
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 4
56760: PUSH
56761: LD_INT 4
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 3
56770: PUSH
56771: LD_INT 4
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: LD_INT 3
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 4
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: LD_INT 4
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 4
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 3
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 4
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: LD_INT 5
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 5
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 4
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 2
56892: PUSH
56893: LD_INT 5
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: LD_INT 3
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 3
56958: NEG
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 4
56969: NEG
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 4
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 4
56992: NEG
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 4
57015: NEG
57016: PUSH
57017: LD_INT 4
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 4
57027: NEG
57028: PUSH
57029: LD_INT 5
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: NEG
57040: PUSH
57041: LD_INT 4
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 3
57051: NEG
57052: PUSH
57053: LD_INT 3
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 4
57063: NEG
57064: PUSH
57065: LD_INT 3
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 5
57075: NEG
57076: PUSH
57077: LD_INT 4
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 5
57087: NEG
57088: PUSH
57089: LD_INT 5
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 3
57099: NEG
57100: PUSH
57101: LD_INT 5
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 5
57111: NEG
57112: PUSH
57113: LD_INT 3
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57168: LD_ADDR_VAR 0 30
57172: PUSH
57173: LD_INT 4
57175: PUSH
57176: LD_INT 4
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 4
57185: PUSH
57186: LD_INT 3
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 5
57195: PUSH
57196: LD_INT 4
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 5
57205: PUSH
57206: LD_INT 5
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 4
57215: PUSH
57216: LD_INT 5
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: LD_INT 4
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 5
57245: PUSH
57246: LD_INT 3
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: LD_INT 5
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 3
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: LD_INT 4
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 4
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: LD_INT 3
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 4
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 4
57358: NEG
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 4
57369: NEG
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 3
57381: NEG
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 3
57392: NEG
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 4
57403: NEG
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 5
57414: NEG
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 5
57425: NEG
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 5
57437: NEG
57438: PUSH
57439: LD_INT 2
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 3
57449: NEG
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: LD_INT 4
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: LD_INT 3
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 4
57520: NEG
57521: PUSH
57522: LD_INT 3
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 4
57532: NEG
57533: PUSH
57534: LD_INT 4
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: LD_INT 4
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 4
57556: NEG
57557: PUSH
57558: LD_INT 2
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 4
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: LD_INT 5
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 4
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: LD_INT 3
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: LD_INT 4
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 5
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: LD_INT 5
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57715: LD_ADDR_VAR 0 31
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 4
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 4
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 5
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 5
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: LD_INT 4
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: LD_INT 5
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 3
57815: NEG
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: NEG
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 3
57860: NEG
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 4
57871: NEG
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 4
57882: NEG
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 4
57894: NEG
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 2
57906: NEG
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 4
57917: NEG
57918: PUSH
57919: LD_INT 4
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 4
57929: NEG
57930: PUSH
57931: LD_INT 5
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 3
57941: NEG
57942: PUSH
57943: LD_INT 4
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: LD_INT 3
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 4
57965: NEG
57966: PUSH
57967: LD_INT 3
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 5
57977: NEG
57978: PUSH
57979: LD_INT 4
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 5
57989: NEG
57990: PUSH
57991: LD_INT 5
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 3
58001: NEG
58002: PUSH
58003: LD_INT 5
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 5
58013: NEG
58014: PUSH
58015: LD_INT 3
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 3
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 4
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 4
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: LD_INT 4
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 4
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 4
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 5
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 5
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 4
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 5
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58265: LD_ADDR_VAR 0 32
58269: PUSH
58270: LD_INT 4
58272: NEG
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 4
58283: NEG
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 3
58295: NEG
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 3
58306: NEG
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 4
58317: NEG
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 5
58328: NEG
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 5
58339: NEG
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 5
58351: NEG
58352: PUSH
58353: LD_INT 2
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 3
58363: NEG
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: LD_INT 3
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: LD_INT 4
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: LD_INT 3
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: LD_INT 2
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 3
58422: NEG
58423: PUSH
58424: LD_INT 2
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 4
58434: NEG
58435: PUSH
58436: LD_INT 3
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 4
58446: NEG
58447: PUSH
58448: LD_INT 4
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 2
58458: NEG
58459: PUSH
58460: LD_INT 4
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 4
58470: NEG
58471: PUSH
58472: LD_INT 2
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 4
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: LD_INT 5
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 4
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: LD_INT 3
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 3
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: LD_INT 4
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 5
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: LD_INT 3
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: NEG
58573: PUSH
58574: LD_INT 5
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 3
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 4
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 4
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 3
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 2
58656: PUSH
58657: LD_INT 2
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 4
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: LD_INT 4
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 4
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 5
58697: PUSH
58698: LD_INT 4
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 5
58707: PUSH
58708: LD_INT 5
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 4
58717: PUSH
58718: LD_INT 5
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 3
58727: PUSH
58728: LD_INT 4
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: LD_INT 3
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 5
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 3
58757: PUSH
58758: LD_INT 5
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58812: LD_ADDR_VAR 0 33
58816: PUSH
58817: LD_INT 4
58819: NEG
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 4
58831: NEG
58832: PUSH
58833: LD_INT 5
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: NEG
58844: PUSH
58845: LD_INT 4
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: LD_INT 3
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 4
58867: NEG
58868: PUSH
58869: LD_INT 3
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 5
58879: NEG
58880: PUSH
58881: LD_INT 4
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 5
58891: NEG
58892: PUSH
58893: LD_INT 5
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: LD_INT 5
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 5
58915: NEG
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: LD_INT 3
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: LD_INT 4
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 3
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 2
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 3
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 4
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 4
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 4
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 5
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 5
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 4
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 3
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 5
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 3
59122: PUSH
59123: LD_INT 3
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 3
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 4
59142: PUSH
59143: LD_INT 3
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 4
59152: PUSH
59153: LD_INT 4
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: LD_INT 4
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: LD_INT 3
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 4
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: LD_INT 4
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 4
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: LD_INT 3
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 4
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 5
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: LD_INT 5
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: LD_INT 4
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 5
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PUSH
59296: LD_INT 3
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59350: LD_ADDR_VAR 0 34
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: LD_INT 4
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: LD_INT 5
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: LD_INT 4
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 3
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 3
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 5
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 2
59436: PUSH
59437: LD_INT 3
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 2
59447: NEG
59448: PUSH
59449: LD_INT 5
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 3
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 3
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 4
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 4
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 3
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 4
59542: PUSH
59543: LD_INT 2
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 4
59552: PUSH
59553: LD_INT 4
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 4
59562: PUSH
59563: LD_INT 3
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 5
59572: PUSH
59573: LD_INT 4
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 5
59582: PUSH
59583: LD_INT 5
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 4
59592: PUSH
59593: LD_INT 5
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 3
59602: PUSH
59603: LD_INT 4
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 3
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 5
59622: PUSH
59623: LD_INT 3
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: LD_INT 5
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 3
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: LD_INT 3
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: LD_INT 4
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: LD_INT 4
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 4
59735: NEG
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 4
59746: NEG
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 3
59758: NEG
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 3
59769: NEG
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 4
59780: NEG
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 5
59791: NEG
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 5
59802: NEG
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 5
59814: NEG
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 3
59826: NEG
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: ST_TO_ADDR
// end ; end ;
59882: GO 59885
59884: POP
// case btype of b_depot , b_warehouse :
59885: LD_VAR 0 1
59889: PUSH
59890: LD_INT 0
59892: DOUBLE
59893: EQUAL
59894: IFTRUE 59904
59896: LD_INT 1
59898: DOUBLE
59899: EQUAL
59900: IFTRUE 59904
59902: GO 60105
59904: POP
// case nation of nation_american :
59905: LD_VAR 0 5
59909: PUSH
59910: LD_INT 1
59912: DOUBLE
59913: EQUAL
59914: IFTRUE 59918
59916: GO 59974
59918: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59919: LD_ADDR_VAR 0 9
59923: PUSH
59924: LD_VAR 0 11
59928: PUSH
59929: LD_VAR 0 12
59933: PUSH
59934: LD_VAR 0 13
59938: PUSH
59939: LD_VAR 0 14
59943: PUSH
59944: LD_VAR 0 15
59948: PUSH
59949: LD_VAR 0 16
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: PUSH
59962: LD_VAR 0 4
59966: PUSH
59967: LD_INT 1
59969: PLUS
59970: ARRAY
59971: ST_TO_ADDR
59972: GO 60103
59974: LD_INT 2
59976: DOUBLE
59977: EQUAL
59978: IFTRUE 59982
59980: GO 60038
59982: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59983: LD_ADDR_VAR 0 9
59987: PUSH
59988: LD_VAR 0 17
59992: PUSH
59993: LD_VAR 0 18
59997: PUSH
59998: LD_VAR 0 19
60002: PUSH
60003: LD_VAR 0 20
60007: PUSH
60008: LD_VAR 0 21
60012: PUSH
60013: LD_VAR 0 22
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: PUSH
60026: LD_VAR 0 4
60030: PUSH
60031: LD_INT 1
60033: PLUS
60034: ARRAY
60035: ST_TO_ADDR
60036: GO 60103
60038: LD_INT 3
60040: DOUBLE
60041: EQUAL
60042: IFTRUE 60046
60044: GO 60102
60046: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60047: LD_ADDR_VAR 0 9
60051: PUSH
60052: LD_VAR 0 23
60056: PUSH
60057: LD_VAR 0 24
60061: PUSH
60062: LD_VAR 0 25
60066: PUSH
60067: LD_VAR 0 26
60071: PUSH
60072: LD_VAR 0 27
60076: PUSH
60077: LD_VAR 0 28
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: PUSH
60090: LD_VAR 0 4
60094: PUSH
60095: LD_INT 1
60097: PLUS
60098: ARRAY
60099: ST_TO_ADDR
60100: GO 60103
60102: POP
60103: GO 60658
60105: LD_INT 2
60107: DOUBLE
60108: EQUAL
60109: IFTRUE 60119
60111: LD_INT 3
60113: DOUBLE
60114: EQUAL
60115: IFTRUE 60119
60117: GO 60175
60119: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60120: LD_ADDR_VAR 0 9
60124: PUSH
60125: LD_VAR 0 29
60129: PUSH
60130: LD_VAR 0 30
60134: PUSH
60135: LD_VAR 0 31
60139: PUSH
60140: LD_VAR 0 32
60144: PUSH
60145: LD_VAR 0 33
60149: PUSH
60150: LD_VAR 0 34
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: PUSH
60163: LD_VAR 0 4
60167: PUSH
60168: LD_INT 1
60170: PLUS
60171: ARRAY
60172: ST_TO_ADDR
60173: GO 60658
60175: LD_INT 16
60177: DOUBLE
60178: EQUAL
60179: IFTRUE 60237
60181: LD_INT 17
60183: DOUBLE
60184: EQUAL
60185: IFTRUE 60237
60187: LD_INT 18
60189: DOUBLE
60190: EQUAL
60191: IFTRUE 60237
60193: LD_INT 19
60195: DOUBLE
60196: EQUAL
60197: IFTRUE 60237
60199: LD_INT 22
60201: DOUBLE
60202: EQUAL
60203: IFTRUE 60237
60205: LD_INT 20
60207: DOUBLE
60208: EQUAL
60209: IFTRUE 60237
60211: LD_INT 21
60213: DOUBLE
60214: EQUAL
60215: IFTRUE 60237
60217: LD_INT 23
60219: DOUBLE
60220: EQUAL
60221: IFTRUE 60237
60223: LD_INT 24
60225: DOUBLE
60226: EQUAL
60227: IFTRUE 60237
60229: LD_INT 25
60231: DOUBLE
60232: EQUAL
60233: IFTRUE 60237
60235: GO 60293
60237: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60238: LD_ADDR_VAR 0 9
60242: PUSH
60243: LD_VAR 0 35
60247: PUSH
60248: LD_VAR 0 36
60252: PUSH
60253: LD_VAR 0 37
60257: PUSH
60258: LD_VAR 0 38
60262: PUSH
60263: LD_VAR 0 39
60267: PUSH
60268: LD_VAR 0 40
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: PUSH
60281: LD_VAR 0 4
60285: PUSH
60286: LD_INT 1
60288: PLUS
60289: ARRAY
60290: ST_TO_ADDR
60291: GO 60658
60293: LD_INT 6
60295: DOUBLE
60296: EQUAL
60297: IFTRUE 60349
60299: LD_INT 7
60301: DOUBLE
60302: EQUAL
60303: IFTRUE 60349
60305: LD_INT 8
60307: DOUBLE
60308: EQUAL
60309: IFTRUE 60349
60311: LD_INT 13
60313: DOUBLE
60314: EQUAL
60315: IFTRUE 60349
60317: LD_INT 12
60319: DOUBLE
60320: EQUAL
60321: IFTRUE 60349
60323: LD_INT 15
60325: DOUBLE
60326: EQUAL
60327: IFTRUE 60349
60329: LD_INT 11
60331: DOUBLE
60332: EQUAL
60333: IFTRUE 60349
60335: LD_INT 14
60337: DOUBLE
60338: EQUAL
60339: IFTRUE 60349
60341: LD_INT 10
60343: DOUBLE
60344: EQUAL
60345: IFTRUE 60349
60347: GO 60405
60349: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60350: LD_ADDR_VAR 0 9
60354: PUSH
60355: LD_VAR 0 41
60359: PUSH
60360: LD_VAR 0 42
60364: PUSH
60365: LD_VAR 0 43
60369: PUSH
60370: LD_VAR 0 44
60374: PUSH
60375: LD_VAR 0 45
60379: PUSH
60380: LD_VAR 0 46
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: PUSH
60393: LD_VAR 0 4
60397: PUSH
60398: LD_INT 1
60400: PLUS
60401: ARRAY
60402: ST_TO_ADDR
60403: GO 60658
60405: LD_INT 36
60407: DOUBLE
60408: EQUAL
60409: IFTRUE 60413
60411: GO 60469
60413: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60414: LD_ADDR_VAR 0 9
60418: PUSH
60419: LD_VAR 0 47
60423: PUSH
60424: LD_VAR 0 48
60428: PUSH
60429: LD_VAR 0 49
60433: PUSH
60434: LD_VAR 0 50
60438: PUSH
60439: LD_VAR 0 51
60443: PUSH
60444: LD_VAR 0 52
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: PUSH
60457: LD_VAR 0 4
60461: PUSH
60462: LD_INT 1
60464: PLUS
60465: ARRAY
60466: ST_TO_ADDR
60467: GO 60658
60469: LD_INT 4
60471: DOUBLE
60472: EQUAL
60473: IFTRUE 60495
60475: LD_INT 5
60477: DOUBLE
60478: EQUAL
60479: IFTRUE 60495
60481: LD_INT 34
60483: DOUBLE
60484: EQUAL
60485: IFTRUE 60495
60487: LD_INT 37
60489: DOUBLE
60490: EQUAL
60491: IFTRUE 60495
60493: GO 60551
60495: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60496: LD_ADDR_VAR 0 9
60500: PUSH
60501: LD_VAR 0 53
60505: PUSH
60506: LD_VAR 0 54
60510: PUSH
60511: LD_VAR 0 55
60515: PUSH
60516: LD_VAR 0 56
60520: PUSH
60521: LD_VAR 0 57
60525: PUSH
60526: LD_VAR 0 58
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: PUSH
60539: LD_VAR 0 4
60543: PUSH
60544: LD_INT 1
60546: PLUS
60547: ARRAY
60548: ST_TO_ADDR
60549: GO 60658
60551: LD_INT 31
60553: DOUBLE
60554: EQUAL
60555: IFTRUE 60601
60557: LD_INT 32
60559: DOUBLE
60560: EQUAL
60561: IFTRUE 60601
60563: LD_INT 33
60565: DOUBLE
60566: EQUAL
60567: IFTRUE 60601
60569: LD_INT 27
60571: DOUBLE
60572: EQUAL
60573: IFTRUE 60601
60575: LD_INT 26
60577: DOUBLE
60578: EQUAL
60579: IFTRUE 60601
60581: LD_INT 28
60583: DOUBLE
60584: EQUAL
60585: IFTRUE 60601
60587: LD_INT 29
60589: DOUBLE
60590: EQUAL
60591: IFTRUE 60601
60593: LD_INT 30
60595: DOUBLE
60596: EQUAL
60597: IFTRUE 60601
60599: GO 60657
60601: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60602: LD_ADDR_VAR 0 9
60606: PUSH
60607: LD_VAR 0 59
60611: PUSH
60612: LD_VAR 0 60
60616: PUSH
60617: LD_VAR 0 61
60621: PUSH
60622: LD_VAR 0 62
60626: PUSH
60627: LD_VAR 0 63
60631: PUSH
60632: LD_VAR 0 64
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: PUSH
60645: LD_VAR 0 4
60649: PUSH
60650: LD_INT 1
60652: PLUS
60653: ARRAY
60654: ST_TO_ADDR
60655: GO 60658
60657: POP
// temp_list2 = [ ] ;
60658: LD_ADDR_VAR 0 10
60662: PUSH
60663: EMPTY
60664: ST_TO_ADDR
// for i in temp_list do
60665: LD_ADDR_VAR 0 8
60669: PUSH
60670: LD_VAR 0 9
60674: PUSH
60675: FOR_IN
60676: IFFALSE 60728
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60678: LD_ADDR_VAR 0 10
60682: PUSH
60683: LD_VAR 0 10
60687: PUSH
60688: LD_VAR 0 8
60692: PUSH
60693: LD_INT 1
60695: ARRAY
60696: PUSH
60697: LD_VAR 0 2
60701: PLUS
60702: PUSH
60703: LD_VAR 0 8
60707: PUSH
60708: LD_INT 2
60710: ARRAY
60711: PUSH
60712: LD_VAR 0 3
60716: PLUS
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: EMPTY
60723: LIST
60724: ADD
60725: ST_TO_ADDR
60726: GO 60675
60728: POP
60729: POP
// result = temp_list2 ;
60730: LD_ADDR_VAR 0 7
60734: PUSH
60735: LD_VAR 0 10
60739: ST_TO_ADDR
// end ;
60740: LD_VAR 0 7
60744: RET
// export function EnemyInRange ( unit , dist ) ; begin
60745: LD_INT 0
60747: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60748: LD_ADDR_VAR 0 3
60752: PUSH
60753: LD_VAR 0 1
60757: PPUSH
60758: CALL_OW 255
60762: PPUSH
60763: LD_VAR 0 1
60767: PPUSH
60768: CALL_OW 250
60772: PPUSH
60773: LD_VAR 0 1
60777: PPUSH
60778: CALL_OW 251
60782: PPUSH
60783: LD_VAR 0 2
60787: PPUSH
60788: CALL 34147 0 4
60792: PUSH
60793: LD_INT 4
60795: ARRAY
60796: ST_TO_ADDR
// end ;
60797: LD_VAR 0 3
60801: RET
// export function PlayerSeeMe ( unit ) ; begin
60802: LD_INT 0
60804: PPUSH
// result := See ( your_side , unit ) ;
60805: LD_ADDR_VAR 0 2
60809: PUSH
60810: LD_OWVAR 2
60814: PPUSH
60815: LD_VAR 0 1
60819: PPUSH
60820: CALL_OW 292
60824: ST_TO_ADDR
// end ;
60825: LD_VAR 0 2
60829: RET
// export function ReverseDir ( unit ) ; begin
60830: LD_INT 0
60832: PPUSH
// if not unit then
60833: LD_VAR 0 1
60837: NOT
60838: IFFALSE 60842
// exit ;
60840: GO 60865
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60842: LD_ADDR_VAR 0 2
60846: PUSH
60847: LD_VAR 0 1
60851: PPUSH
60852: CALL_OW 254
60856: PUSH
60857: LD_INT 3
60859: PLUS
60860: PUSH
60861: LD_INT 6
60863: MOD
60864: ST_TO_ADDR
// end ;
60865: LD_VAR 0 2
60869: RET
// export function ReverseArray ( array ) ; var i ; begin
60870: LD_INT 0
60872: PPUSH
60873: PPUSH
// if not array then
60874: LD_VAR 0 1
60878: NOT
60879: IFFALSE 60883
// exit ;
60881: GO 60938
// result := [ ] ;
60883: LD_ADDR_VAR 0 2
60887: PUSH
60888: EMPTY
60889: ST_TO_ADDR
// for i := array downto 1 do
60890: LD_ADDR_VAR 0 3
60894: PUSH
60895: DOUBLE
60896: LD_VAR 0 1
60900: INC
60901: ST_TO_ADDR
60902: LD_INT 1
60904: PUSH
60905: FOR_DOWNTO
60906: IFFALSE 60936
// result := Join ( result , array [ i ] ) ;
60908: LD_ADDR_VAR 0 2
60912: PUSH
60913: LD_VAR 0 2
60917: PPUSH
60918: LD_VAR 0 1
60922: PUSH
60923: LD_VAR 0 3
60927: ARRAY
60928: PPUSH
60929: CALL 65582 0 2
60933: ST_TO_ADDR
60934: GO 60905
60936: POP
60937: POP
// end ;
60938: LD_VAR 0 2
60942: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60943: LD_INT 0
60945: PPUSH
60946: PPUSH
60947: PPUSH
60948: PPUSH
60949: PPUSH
60950: PPUSH
// if not unit or not hexes then
60951: LD_VAR 0 1
60955: NOT
60956: PUSH
60957: LD_VAR 0 2
60961: NOT
60962: OR
60963: IFFALSE 60967
// exit ;
60965: GO 61090
// dist := 9999 ;
60967: LD_ADDR_VAR 0 5
60971: PUSH
60972: LD_INT 9999
60974: ST_TO_ADDR
// for i = 1 to hexes do
60975: LD_ADDR_VAR 0 4
60979: PUSH
60980: DOUBLE
60981: LD_INT 1
60983: DEC
60984: ST_TO_ADDR
60985: LD_VAR 0 2
60989: PUSH
60990: FOR_TO
60991: IFFALSE 61078
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60993: LD_ADDR_VAR 0 6
60997: PUSH
60998: LD_VAR 0 1
61002: PPUSH
61003: LD_VAR 0 2
61007: PUSH
61008: LD_VAR 0 4
61012: ARRAY
61013: PUSH
61014: LD_INT 1
61016: ARRAY
61017: PPUSH
61018: LD_VAR 0 2
61022: PUSH
61023: LD_VAR 0 4
61027: ARRAY
61028: PUSH
61029: LD_INT 2
61031: ARRAY
61032: PPUSH
61033: CALL_OW 297
61037: ST_TO_ADDR
// if tdist < dist then
61038: LD_VAR 0 6
61042: PUSH
61043: LD_VAR 0 5
61047: LESS
61048: IFFALSE 61076
// begin hex := hexes [ i ] ;
61050: LD_ADDR_VAR 0 8
61054: PUSH
61055: LD_VAR 0 2
61059: PUSH
61060: LD_VAR 0 4
61064: ARRAY
61065: ST_TO_ADDR
// dist := tdist ;
61066: LD_ADDR_VAR 0 5
61070: PUSH
61071: LD_VAR 0 6
61075: ST_TO_ADDR
// end ; end ;
61076: GO 60990
61078: POP
61079: POP
// result := hex ;
61080: LD_ADDR_VAR 0 3
61084: PUSH
61085: LD_VAR 0 8
61089: ST_TO_ADDR
// end ;
61090: LD_VAR 0 3
61094: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61095: LD_INT 0
61097: PPUSH
61098: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61099: LD_VAR 0 1
61103: NOT
61104: PUSH
61105: LD_VAR 0 1
61109: PUSH
61110: LD_INT 21
61112: PUSH
61113: LD_INT 2
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 23
61122: PUSH
61123: LD_INT 2
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PPUSH
61134: CALL_OW 69
61138: IN
61139: NOT
61140: OR
61141: IFFALSE 61145
// exit ;
61143: GO 61192
// for i = 1 to 3 do
61145: LD_ADDR_VAR 0 3
61149: PUSH
61150: DOUBLE
61151: LD_INT 1
61153: DEC
61154: ST_TO_ADDR
61155: LD_INT 3
61157: PUSH
61158: FOR_TO
61159: IFFALSE 61190
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61161: LD_VAR 0 1
61165: PPUSH
61166: CALL_OW 250
61170: PPUSH
61171: LD_VAR 0 1
61175: PPUSH
61176: CALL_OW 251
61180: PPUSH
61181: LD_INT 1
61183: PPUSH
61184: CALL_OW 453
61188: GO 61158
61190: POP
61191: POP
// end ;
61192: LD_VAR 0 2
61196: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61197: LD_INT 0
61199: PPUSH
61200: PPUSH
61201: PPUSH
61202: PPUSH
61203: PPUSH
61204: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61205: LD_VAR 0 1
61209: NOT
61210: PUSH
61211: LD_VAR 0 2
61215: NOT
61216: OR
61217: PUSH
61218: LD_VAR 0 1
61222: PPUSH
61223: CALL_OW 314
61227: OR
61228: IFFALSE 61232
// exit ;
61230: GO 61699
// if GetLives ( i ) < 250 then
61232: LD_VAR 0 4
61236: PPUSH
61237: CALL_OW 256
61241: PUSH
61242: LD_INT 250
61244: LESS
61245: IFFALSE 61258
// begin ComAutodestruct ( i ) ;
61247: LD_VAR 0 4
61251: PPUSH
61252: CALL 61095 0 1
// exit ;
61256: GO 61699
// end ; x := GetX ( enemy_unit ) ;
61258: LD_ADDR_VAR 0 7
61262: PUSH
61263: LD_VAR 0 2
61267: PPUSH
61268: CALL_OW 250
61272: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61273: LD_ADDR_VAR 0 8
61277: PUSH
61278: LD_VAR 0 2
61282: PPUSH
61283: CALL_OW 251
61287: ST_TO_ADDR
// if not x or not y then
61288: LD_VAR 0 7
61292: NOT
61293: PUSH
61294: LD_VAR 0 8
61298: NOT
61299: OR
61300: IFFALSE 61304
// exit ;
61302: GO 61699
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61304: LD_ADDR_VAR 0 6
61308: PUSH
61309: LD_VAR 0 7
61313: PPUSH
61314: LD_INT 0
61316: PPUSH
61317: LD_INT 4
61319: PPUSH
61320: CALL_OW 272
61324: PUSH
61325: LD_VAR 0 8
61329: PPUSH
61330: LD_INT 0
61332: PPUSH
61333: LD_INT 4
61335: PPUSH
61336: CALL_OW 273
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_VAR 0 7
61349: PPUSH
61350: LD_INT 1
61352: PPUSH
61353: LD_INT 4
61355: PPUSH
61356: CALL_OW 272
61360: PUSH
61361: LD_VAR 0 8
61365: PPUSH
61366: LD_INT 1
61368: PPUSH
61369: LD_INT 4
61371: PPUSH
61372: CALL_OW 273
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_VAR 0 7
61385: PPUSH
61386: LD_INT 2
61388: PPUSH
61389: LD_INT 4
61391: PPUSH
61392: CALL_OW 272
61396: PUSH
61397: LD_VAR 0 8
61401: PPUSH
61402: LD_INT 2
61404: PPUSH
61405: LD_INT 4
61407: PPUSH
61408: CALL_OW 273
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_VAR 0 7
61421: PPUSH
61422: LD_INT 3
61424: PPUSH
61425: LD_INT 4
61427: PPUSH
61428: CALL_OW 272
61432: PUSH
61433: LD_VAR 0 8
61437: PPUSH
61438: LD_INT 3
61440: PPUSH
61441: LD_INT 4
61443: PPUSH
61444: CALL_OW 273
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_VAR 0 7
61457: PPUSH
61458: LD_INT 4
61460: PPUSH
61461: LD_INT 4
61463: PPUSH
61464: CALL_OW 272
61468: PUSH
61469: LD_VAR 0 8
61473: PPUSH
61474: LD_INT 4
61476: PPUSH
61477: LD_INT 4
61479: PPUSH
61480: CALL_OW 273
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_VAR 0 7
61493: PPUSH
61494: LD_INT 5
61496: PPUSH
61497: LD_INT 4
61499: PPUSH
61500: CALL_OW 272
61504: PUSH
61505: LD_VAR 0 8
61509: PPUSH
61510: LD_INT 5
61512: PPUSH
61513: LD_INT 4
61515: PPUSH
61516: CALL_OW 273
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: ST_TO_ADDR
// for i = tmp downto 1 do
61533: LD_ADDR_VAR 0 4
61537: PUSH
61538: DOUBLE
61539: LD_VAR 0 6
61543: INC
61544: ST_TO_ADDR
61545: LD_INT 1
61547: PUSH
61548: FOR_DOWNTO
61549: IFFALSE 61650
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61551: LD_VAR 0 6
61555: PUSH
61556: LD_VAR 0 4
61560: ARRAY
61561: PUSH
61562: LD_INT 1
61564: ARRAY
61565: PPUSH
61566: LD_VAR 0 6
61570: PUSH
61571: LD_VAR 0 4
61575: ARRAY
61576: PUSH
61577: LD_INT 2
61579: ARRAY
61580: PPUSH
61581: CALL_OW 488
61585: NOT
61586: PUSH
61587: LD_VAR 0 6
61591: PUSH
61592: LD_VAR 0 4
61596: ARRAY
61597: PUSH
61598: LD_INT 1
61600: ARRAY
61601: PPUSH
61602: LD_VAR 0 6
61606: PUSH
61607: LD_VAR 0 4
61611: ARRAY
61612: PUSH
61613: LD_INT 2
61615: ARRAY
61616: PPUSH
61617: CALL_OW 428
61621: PUSH
61622: LD_INT 0
61624: NONEQUAL
61625: OR
61626: IFFALSE 61648
// tmp := Delete ( tmp , i ) ;
61628: LD_ADDR_VAR 0 6
61632: PUSH
61633: LD_VAR 0 6
61637: PPUSH
61638: LD_VAR 0 4
61642: PPUSH
61643: CALL_OW 3
61647: ST_TO_ADDR
61648: GO 61548
61650: POP
61651: POP
// j := GetClosestHex ( unit , tmp ) ;
61652: LD_ADDR_VAR 0 5
61656: PUSH
61657: LD_VAR 0 1
61661: PPUSH
61662: LD_VAR 0 6
61666: PPUSH
61667: CALL 60943 0 2
61671: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61672: LD_VAR 0 1
61676: PPUSH
61677: LD_VAR 0 5
61681: PUSH
61682: LD_INT 1
61684: ARRAY
61685: PPUSH
61686: LD_VAR 0 5
61690: PUSH
61691: LD_INT 2
61693: ARRAY
61694: PPUSH
61695: CALL_OW 111
// end ;
61699: LD_VAR 0 3
61703: RET
// export function PrepareApemanSoldier ( ) ; begin
61704: LD_INT 0
61706: PPUSH
// uc_nation := 0 ;
61707: LD_ADDR_OWVAR 21
61711: PUSH
61712: LD_INT 0
61714: ST_TO_ADDR
// hc_sex := sex_male ;
61715: LD_ADDR_OWVAR 27
61719: PUSH
61720: LD_INT 1
61722: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61723: LD_ADDR_OWVAR 28
61727: PUSH
61728: LD_INT 15
61730: ST_TO_ADDR
// hc_gallery :=  ;
61731: LD_ADDR_OWVAR 33
61735: PUSH
61736: LD_STRING 
61738: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61739: LD_ADDR_OWVAR 31
61743: PUSH
61744: LD_INT 0
61746: PPUSH
61747: LD_INT 3
61749: PPUSH
61750: CALL_OW 12
61754: PUSH
61755: LD_INT 0
61757: PPUSH
61758: LD_INT 3
61760: PPUSH
61761: CALL_OW 12
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: ST_TO_ADDR
// end ;
61778: LD_VAR 0 1
61782: RET
// export function PrepareApemanEngineer ( ) ; begin
61783: LD_INT 0
61785: PPUSH
// uc_nation := 0 ;
61786: LD_ADDR_OWVAR 21
61790: PUSH
61791: LD_INT 0
61793: ST_TO_ADDR
// hc_sex := sex_male ;
61794: LD_ADDR_OWVAR 27
61798: PUSH
61799: LD_INT 1
61801: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61802: LD_ADDR_OWVAR 28
61806: PUSH
61807: LD_INT 16
61809: ST_TO_ADDR
// hc_gallery :=  ;
61810: LD_ADDR_OWVAR 33
61814: PUSH
61815: LD_STRING 
61817: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61818: LD_ADDR_OWVAR 31
61822: PUSH
61823: LD_INT 0
61825: PPUSH
61826: LD_INT 3
61828: PPUSH
61829: CALL_OW 12
61833: PUSH
61834: LD_INT 0
61836: PPUSH
61837: LD_INT 3
61839: PPUSH
61840: CALL_OW 12
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: ST_TO_ADDR
// end ;
61857: LD_VAR 0 1
61861: RET
// export function PrepareApeman ( agressivity ) ; begin
61862: LD_INT 0
61864: PPUSH
// uc_side := 0 ;
61865: LD_ADDR_OWVAR 20
61869: PUSH
61870: LD_INT 0
61872: ST_TO_ADDR
// uc_nation := 0 ;
61873: LD_ADDR_OWVAR 21
61877: PUSH
61878: LD_INT 0
61880: ST_TO_ADDR
// hc_sex := sex_male ;
61881: LD_ADDR_OWVAR 27
61885: PUSH
61886: LD_INT 1
61888: ST_TO_ADDR
// hc_class := class_apeman ;
61889: LD_ADDR_OWVAR 28
61893: PUSH
61894: LD_INT 12
61896: ST_TO_ADDR
// hc_gallery :=  ;
61897: LD_ADDR_OWVAR 33
61901: PUSH
61902: LD_STRING 
61904: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61905: LD_ADDR_OWVAR 35
61909: PUSH
61910: LD_VAR 0 1
61914: NEG
61915: PPUSH
61916: LD_VAR 0 1
61920: PPUSH
61921: CALL_OW 12
61925: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61926: LD_ADDR_OWVAR 31
61930: PUSH
61931: LD_INT 0
61933: PPUSH
61934: LD_INT 3
61936: PPUSH
61937: CALL_OW 12
61941: PUSH
61942: LD_INT 0
61944: PPUSH
61945: LD_INT 3
61947: PPUSH
61948: CALL_OW 12
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: ST_TO_ADDR
// end ;
61965: LD_VAR 0 2
61969: RET
// export function PrepareTiger ( agressivity ) ; begin
61970: LD_INT 0
61972: PPUSH
// uc_side := 0 ;
61973: LD_ADDR_OWVAR 20
61977: PUSH
61978: LD_INT 0
61980: ST_TO_ADDR
// uc_nation := 0 ;
61981: LD_ADDR_OWVAR 21
61985: PUSH
61986: LD_INT 0
61988: ST_TO_ADDR
// hc_class := class_tiger ;
61989: LD_ADDR_OWVAR 28
61993: PUSH
61994: LD_INT 14
61996: ST_TO_ADDR
// hc_gallery :=  ;
61997: LD_ADDR_OWVAR 33
62001: PUSH
62002: LD_STRING 
62004: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62005: LD_ADDR_OWVAR 35
62009: PUSH
62010: LD_VAR 0 1
62014: NEG
62015: PPUSH
62016: LD_VAR 0 1
62020: PPUSH
62021: CALL_OW 12
62025: ST_TO_ADDR
// end ;
62026: LD_VAR 0 2
62030: RET
// export function PrepareEnchidna ( ) ; begin
62031: LD_INT 0
62033: PPUSH
// uc_side := 0 ;
62034: LD_ADDR_OWVAR 20
62038: PUSH
62039: LD_INT 0
62041: ST_TO_ADDR
// uc_nation := 0 ;
62042: LD_ADDR_OWVAR 21
62046: PUSH
62047: LD_INT 0
62049: ST_TO_ADDR
// hc_class := class_baggie ;
62050: LD_ADDR_OWVAR 28
62054: PUSH
62055: LD_INT 13
62057: ST_TO_ADDR
// hc_gallery :=  ;
62058: LD_ADDR_OWVAR 33
62062: PUSH
62063: LD_STRING 
62065: ST_TO_ADDR
// end ;
62066: LD_VAR 0 1
62070: RET
// export function PrepareFrog ( ) ; begin
62071: LD_INT 0
62073: PPUSH
// uc_side := 0 ;
62074: LD_ADDR_OWVAR 20
62078: PUSH
62079: LD_INT 0
62081: ST_TO_ADDR
// uc_nation := 0 ;
62082: LD_ADDR_OWVAR 21
62086: PUSH
62087: LD_INT 0
62089: ST_TO_ADDR
// hc_class := class_frog ;
62090: LD_ADDR_OWVAR 28
62094: PUSH
62095: LD_INT 19
62097: ST_TO_ADDR
// hc_gallery :=  ;
62098: LD_ADDR_OWVAR 33
62102: PUSH
62103: LD_STRING 
62105: ST_TO_ADDR
// end ;
62106: LD_VAR 0 1
62110: RET
// export function PrepareFish ( ) ; begin
62111: LD_INT 0
62113: PPUSH
// uc_side := 0 ;
62114: LD_ADDR_OWVAR 20
62118: PUSH
62119: LD_INT 0
62121: ST_TO_ADDR
// uc_nation := 0 ;
62122: LD_ADDR_OWVAR 21
62126: PUSH
62127: LD_INT 0
62129: ST_TO_ADDR
// hc_class := class_fish ;
62130: LD_ADDR_OWVAR 28
62134: PUSH
62135: LD_INT 20
62137: ST_TO_ADDR
// hc_gallery :=  ;
62138: LD_ADDR_OWVAR 33
62142: PUSH
62143: LD_STRING 
62145: ST_TO_ADDR
// end ;
62146: LD_VAR 0 1
62150: RET
// export function PrepareBird ( ) ; begin
62151: LD_INT 0
62153: PPUSH
// uc_side := 0 ;
62154: LD_ADDR_OWVAR 20
62158: PUSH
62159: LD_INT 0
62161: ST_TO_ADDR
// uc_nation := 0 ;
62162: LD_ADDR_OWVAR 21
62166: PUSH
62167: LD_INT 0
62169: ST_TO_ADDR
// hc_class := class_phororhacos ;
62170: LD_ADDR_OWVAR 28
62174: PUSH
62175: LD_INT 18
62177: ST_TO_ADDR
// hc_gallery :=  ;
62178: LD_ADDR_OWVAR 33
62182: PUSH
62183: LD_STRING 
62185: ST_TO_ADDR
// end ;
62186: LD_VAR 0 1
62190: RET
// export function PrepareHorse ( ) ; begin
62191: LD_INT 0
62193: PPUSH
// uc_side := 0 ;
62194: LD_ADDR_OWVAR 20
62198: PUSH
62199: LD_INT 0
62201: ST_TO_ADDR
// uc_nation := 0 ;
62202: LD_ADDR_OWVAR 21
62206: PUSH
62207: LD_INT 0
62209: ST_TO_ADDR
// hc_class := class_horse ;
62210: LD_ADDR_OWVAR 28
62214: PUSH
62215: LD_INT 21
62217: ST_TO_ADDR
// hc_gallery :=  ;
62218: LD_ADDR_OWVAR 33
62222: PUSH
62223: LD_STRING 
62225: ST_TO_ADDR
// end ;
62226: LD_VAR 0 1
62230: RET
// export function PrepareMastodont ( ) ; begin
62231: LD_INT 0
62233: PPUSH
// uc_side := 0 ;
62234: LD_ADDR_OWVAR 20
62238: PUSH
62239: LD_INT 0
62241: ST_TO_ADDR
// uc_nation := 0 ;
62242: LD_ADDR_OWVAR 21
62246: PUSH
62247: LD_INT 0
62249: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62250: LD_ADDR_OWVAR 37
62254: PUSH
62255: LD_INT 31
62257: ST_TO_ADDR
// vc_control := control_rider ;
62258: LD_ADDR_OWVAR 38
62262: PUSH
62263: LD_INT 4
62265: ST_TO_ADDR
// end ;
62266: LD_VAR 0 1
62270: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62271: LD_INT 0
62273: PPUSH
62274: PPUSH
62275: PPUSH
// uc_side = 0 ;
62276: LD_ADDR_OWVAR 20
62280: PUSH
62281: LD_INT 0
62283: ST_TO_ADDR
// uc_nation = 0 ;
62284: LD_ADDR_OWVAR 21
62288: PUSH
62289: LD_INT 0
62291: ST_TO_ADDR
// InitHc_All ( ) ;
62292: CALL_OW 584
// InitVc ;
62296: CALL_OW 20
// if mastodonts then
62300: LD_VAR 0 6
62304: IFFALSE 62371
// for i = 1 to mastodonts do
62306: LD_ADDR_VAR 0 11
62310: PUSH
62311: DOUBLE
62312: LD_INT 1
62314: DEC
62315: ST_TO_ADDR
62316: LD_VAR 0 6
62320: PUSH
62321: FOR_TO
62322: IFFALSE 62369
// begin vc_chassis := 31 ;
62324: LD_ADDR_OWVAR 37
62328: PUSH
62329: LD_INT 31
62331: ST_TO_ADDR
// vc_control := control_rider ;
62332: LD_ADDR_OWVAR 38
62336: PUSH
62337: LD_INT 4
62339: ST_TO_ADDR
// animal := CreateVehicle ;
62340: LD_ADDR_VAR 0 12
62344: PUSH
62345: CALL_OW 45
62349: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62350: LD_VAR 0 12
62354: PPUSH
62355: LD_VAR 0 8
62359: PPUSH
62360: LD_INT 0
62362: PPUSH
62363: CALL 64499 0 3
// end ;
62367: GO 62321
62369: POP
62370: POP
// if horses then
62371: LD_VAR 0 5
62375: IFFALSE 62442
// for i = 1 to horses do
62377: LD_ADDR_VAR 0 11
62381: PUSH
62382: DOUBLE
62383: LD_INT 1
62385: DEC
62386: ST_TO_ADDR
62387: LD_VAR 0 5
62391: PUSH
62392: FOR_TO
62393: IFFALSE 62440
// begin hc_class := 21 ;
62395: LD_ADDR_OWVAR 28
62399: PUSH
62400: LD_INT 21
62402: ST_TO_ADDR
// hc_gallery :=  ;
62403: LD_ADDR_OWVAR 33
62407: PUSH
62408: LD_STRING 
62410: ST_TO_ADDR
// animal := CreateHuman ;
62411: LD_ADDR_VAR 0 12
62415: PUSH
62416: CALL_OW 44
62420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62421: LD_VAR 0 12
62425: PPUSH
62426: LD_VAR 0 8
62430: PPUSH
62431: LD_INT 0
62433: PPUSH
62434: CALL 64499 0 3
// end ;
62438: GO 62392
62440: POP
62441: POP
// if birds then
62442: LD_VAR 0 1
62446: IFFALSE 62513
// for i = 1 to birds do
62448: LD_ADDR_VAR 0 11
62452: PUSH
62453: DOUBLE
62454: LD_INT 1
62456: DEC
62457: ST_TO_ADDR
62458: LD_VAR 0 1
62462: PUSH
62463: FOR_TO
62464: IFFALSE 62511
// begin hc_class = 18 ;
62466: LD_ADDR_OWVAR 28
62470: PUSH
62471: LD_INT 18
62473: ST_TO_ADDR
// hc_gallery =  ;
62474: LD_ADDR_OWVAR 33
62478: PUSH
62479: LD_STRING 
62481: ST_TO_ADDR
// animal := CreateHuman ;
62482: LD_ADDR_VAR 0 12
62486: PUSH
62487: CALL_OW 44
62491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62492: LD_VAR 0 12
62496: PPUSH
62497: LD_VAR 0 8
62501: PPUSH
62502: LD_INT 0
62504: PPUSH
62505: CALL 64499 0 3
// end ;
62509: GO 62463
62511: POP
62512: POP
// if tigers then
62513: LD_VAR 0 2
62517: IFFALSE 62601
// for i = 1 to tigers do
62519: LD_ADDR_VAR 0 11
62523: PUSH
62524: DOUBLE
62525: LD_INT 1
62527: DEC
62528: ST_TO_ADDR
62529: LD_VAR 0 2
62533: PUSH
62534: FOR_TO
62535: IFFALSE 62599
// begin hc_class = class_tiger ;
62537: LD_ADDR_OWVAR 28
62541: PUSH
62542: LD_INT 14
62544: ST_TO_ADDR
// hc_gallery =  ;
62545: LD_ADDR_OWVAR 33
62549: PUSH
62550: LD_STRING 
62552: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62553: LD_ADDR_OWVAR 35
62557: PUSH
62558: LD_INT 7
62560: NEG
62561: PPUSH
62562: LD_INT 7
62564: PPUSH
62565: CALL_OW 12
62569: ST_TO_ADDR
// animal := CreateHuman ;
62570: LD_ADDR_VAR 0 12
62574: PUSH
62575: CALL_OW 44
62579: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62580: LD_VAR 0 12
62584: PPUSH
62585: LD_VAR 0 8
62589: PPUSH
62590: LD_INT 0
62592: PPUSH
62593: CALL 64499 0 3
// end ;
62597: GO 62534
62599: POP
62600: POP
// if apemans then
62601: LD_VAR 0 3
62605: IFFALSE 62728
// for i = 1 to apemans do
62607: LD_ADDR_VAR 0 11
62611: PUSH
62612: DOUBLE
62613: LD_INT 1
62615: DEC
62616: ST_TO_ADDR
62617: LD_VAR 0 3
62621: PUSH
62622: FOR_TO
62623: IFFALSE 62726
// begin hc_class = class_apeman ;
62625: LD_ADDR_OWVAR 28
62629: PUSH
62630: LD_INT 12
62632: ST_TO_ADDR
// hc_gallery =  ;
62633: LD_ADDR_OWVAR 33
62637: PUSH
62638: LD_STRING 
62640: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62641: LD_ADDR_OWVAR 35
62645: PUSH
62646: LD_INT 2
62648: NEG
62649: PPUSH
62650: LD_INT 2
62652: PPUSH
62653: CALL_OW 12
62657: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62658: LD_ADDR_OWVAR 31
62662: PUSH
62663: LD_INT 1
62665: PPUSH
62666: LD_INT 3
62668: PPUSH
62669: CALL_OW 12
62673: PUSH
62674: LD_INT 1
62676: PPUSH
62677: LD_INT 3
62679: PPUSH
62680: CALL_OW 12
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: ST_TO_ADDR
// animal := CreateHuman ;
62697: LD_ADDR_VAR 0 12
62701: PUSH
62702: CALL_OW 44
62706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62707: LD_VAR 0 12
62711: PPUSH
62712: LD_VAR 0 8
62716: PPUSH
62717: LD_INT 0
62719: PPUSH
62720: CALL 64499 0 3
// end ;
62724: GO 62622
62726: POP
62727: POP
// if enchidnas then
62728: LD_VAR 0 4
62732: IFFALSE 62799
// for i = 1 to enchidnas do
62734: LD_ADDR_VAR 0 11
62738: PUSH
62739: DOUBLE
62740: LD_INT 1
62742: DEC
62743: ST_TO_ADDR
62744: LD_VAR 0 4
62748: PUSH
62749: FOR_TO
62750: IFFALSE 62797
// begin hc_class = 13 ;
62752: LD_ADDR_OWVAR 28
62756: PUSH
62757: LD_INT 13
62759: ST_TO_ADDR
// hc_gallery =  ;
62760: LD_ADDR_OWVAR 33
62764: PUSH
62765: LD_STRING 
62767: ST_TO_ADDR
// animal := CreateHuman ;
62768: LD_ADDR_VAR 0 12
62772: PUSH
62773: CALL_OW 44
62777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62778: LD_VAR 0 12
62782: PPUSH
62783: LD_VAR 0 8
62787: PPUSH
62788: LD_INT 0
62790: PPUSH
62791: CALL 64499 0 3
// end ;
62795: GO 62749
62797: POP
62798: POP
// if fishes then
62799: LD_VAR 0 7
62803: IFFALSE 62870
// for i = 1 to fishes do
62805: LD_ADDR_VAR 0 11
62809: PUSH
62810: DOUBLE
62811: LD_INT 1
62813: DEC
62814: ST_TO_ADDR
62815: LD_VAR 0 7
62819: PUSH
62820: FOR_TO
62821: IFFALSE 62868
// begin hc_class = 20 ;
62823: LD_ADDR_OWVAR 28
62827: PUSH
62828: LD_INT 20
62830: ST_TO_ADDR
// hc_gallery =  ;
62831: LD_ADDR_OWVAR 33
62835: PUSH
62836: LD_STRING 
62838: ST_TO_ADDR
// animal := CreateHuman ;
62839: LD_ADDR_VAR 0 12
62843: PUSH
62844: CALL_OW 44
62848: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62849: LD_VAR 0 12
62853: PPUSH
62854: LD_VAR 0 9
62858: PPUSH
62859: LD_INT 0
62861: PPUSH
62862: CALL 64499 0 3
// end ;
62866: GO 62820
62868: POP
62869: POP
// end ;
62870: LD_VAR 0 10
62874: RET
// export function WantHeal ( sci , unit ) ; begin
62875: LD_INT 0
62877: PPUSH
// if GetTaskList ( sci ) > 0 then
62878: LD_VAR 0 1
62882: PPUSH
62883: CALL_OW 437
62887: PUSH
62888: LD_INT 0
62890: GREATER
62891: IFFALSE 62961
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62893: LD_VAR 0 1
62897: PPUSH
62898: CALL_OW 437
62902: PUSH
62903: LD_INT 1
62905: ARRAY
62906: PUSH
62907: LD_INT 1
62909: ARRAY
62910: PUSH
62911: LD_STRING l
62913: EQUAL
62914: PUSH
62915: LD_VAR 0 1
62919: PPUSH
62920: CALL_OW 437
62924: PUSH
62925: LD_INT 1
62927: ARRAY
62928: PUSH
62929: LD_INT 4
62931: ARRAY
62932: PUSH
62933: LD_VAR 0 2
62937: EQUAL
62938: AND
62939: IFFALSE 62951
// result := true else
62941: LD_ADDR_VAR 0 3
62945: PUSH
62946: LD_INT 1
62948: ST_TO_ADDR
62949: GO 62959
// result := false ;
62951: LD_ADDR_VAR 0 3
62955: PUSH
62956: LD_INT 0
62958: ST_TO_ADDR
// end else
62959: GO 62969
// result := false ;
62961: LD_ADDR_VAR 0 3
62965: PUSH
62966: LD_INT 0
62968: ST_TO_ADDR
// end ;
62969: LD_VAR 0 3
62973: RET
// export function HealTarget ( sci ) ; begin
62974: LD_INT 0
62976: PPUSH
// if not sci then
62977: LD_VAR 0 1
62981: NOT
62982: IFFALSE 62986
// exit ;
62984: GO 63051
// result := 0 ;
62986: LD_ADDR_VAR 0 2
62990: PUSH
62991: LD_INT 0
62993: ST_TO_ADDR
// if GetTaskList ( sci ) then
62994: LD_VAR 0 1
62998: PPUSH
62999: CALL_OW 437
63003: IFFALSE 63051
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63005: LD_VAR 0 1
63009: PPUSH
63010: CALL_OW 437
63014: PUSH
63015: LD_INT 1
63017: ARRAY
63018: PUSH
63019: LD_INT 1
63021: ARRAY
63022: PUSH
63023: LD_STRING l
63025: EQUAL
63026: IFFALSE 63051
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63028: LD_ADDR_VAR 0 2
63032: PUSH
63033: LD_VAR 0 1
63037: PPUSH
63038: CALL_OW 437
63042: PUSH
63043: LD_INT 1
63045: ARRAY
63046: PUSH
63047: LD_INT 4
63049: ARRAY
63050: ST_TO_ADDR
// end ;
63051: LD_VAR 0 2
63055: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63056: LD_INT 0
63058: PPUSH
63059: PPUSH
63060: PPUSH
63061: PPUSH
// if not base_units then
63062: LD_VAR 0 1
63066: NOT
63067: IFFALSE 63071
// exit ;
63069: GO 63158
// result := false ;
63071: LD_ADDR_VAR 0 2
63075: PUSH
63076: LD_INT 0
63078: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63079: LD_ADDR_VAR 0 5
63083: PUSH
63084: LD_VAR 0 1
63088: PPUSH
63089: LD_INT 21
63091: PUSH
63092: LD_INT 3
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PPUSH
63099: CALL_OW 72
63103: ST_TO_ADDR
// if not tmp then
63104: LD_VAR 0 5
63108: NOT
63109: IFFALSE 63113
// exit ;
63111: GO 63158
// for i in tmp do
63113: LD_ADDR_VAR 0 3
63117: PUSH
63118: LD_VAR 0 5
63122: PUSH
63123: FOR_IN
63124: IFFALSE 63156
// begin result := EnemyInRange ( i , 22 ) ;
63126: LD_ADDR_VAR 0 2
63130: PUSH
63131: LD_VAR 0 3
63135: PPUSH
63136: LD_INT 22
63138: PPUSH
63139: CALL 60745 0 2
63143: ST_TO_ADDR
// if result then
63144: LD_VAR 0 2
63148: IFFALSE 63154
// exit ;
63150: POP
63151: POP
63152: GO 63158
// end ;
63154: GO 63123
63156: POP
63157: POP
// end ;
63158: LD_VAR 0 2
63162: RET
// export function FilterByTag ( units , tag ) ; begin
63163: LD_INT 0
63165: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63166: LD_ADDR_VAR 0 3
63170: PUSH
63171: LD_VAR 0 1
63175: PPUSH
63176: LD_INT 120
63178: PUSH
63179: LD_VAR 0 2
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PPUSH
63188: CALL_OW 72
63192: ST_TO_ADDR
// end ;
63193: LD_VAR 0 3
63197: RET
// export function IsDriver ( un ) ; begin
63198: LD_INT 0
63200: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63201: LD_ADDR_VAR 0 2
63205: PUSH
63206: LD_VAR 0 1
63210: PUSH
63211: LD_INT 55
63213: PUSH
63214: EMPTY
63215: LIST
63216: PPUSH
63217: CALL_OW 69
63221: IN
63222: ST_TO_ADDR
// end ;
63223: LD_VAR 0 2
63227: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63228: LD_INT 0
63230: PPUSH
63231: PPUSH
// list := [ ] ;
63232: LD_ADDR_VAR 0 5
63236: PUSH
63237: EMPTY
63238: ST_TO_ADDR
// case d of 0 :
63239: LD_VAR 0 3
63243: PUSH
63244: LD_INT 0
63246: DOUBLE
63247: EQUAL
63248: IFTRUE 63252
63250: GO 63385
63252: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63253: LD_ADDR_VAR 0 5
63257: PUSH
63258: LD_VAR 0 1
63262: PUSH
63263: LD_INT 4
63265: MINUS
63266: PUSH
63267: LD_VAR 0 2
63271: PUSH
63272: LD_INT 4
63274: MINUS
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: LIST
63283: PUSH
63284: LD_VAR 0 1
63288: PUSH
63289: LD_INT 3
63291: MINUS
63292: PUSH
63293: LD_VAR 0 2
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: LIST
63305: PUSH
63306: LD_VAR 0 1
63310: PUSH
63311: LD_INT 4
63313: PLUS
63314: PUSH
63315: LD_VAR 0 2
63319: PUSH
63320: LD_INT 4
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: LIST
63327: PUSH
63328: LD_VAR 0 1
63332: PUSH
63333: LD_INT 3
63335: PLUS
63336: PUSH
63337: LD_VAR 0 2
63341: PUSH
63342: LD_INT 3
63344: PLUS
63345: PUSH
63346: LD_INT 5
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: LIST
63353: PUSH
63354: LD_VAR 0 1
63358: PUSH
63359: LD_VAR 0 2
63363: PUSH
63364: LD_INT 4
63366: PLUS
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: LIST
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: ST_TO_ADDR
// end ; 1 :
63383: GO 64083
63385: LD_INT 1
63387: DOUBLE
63388: EQUAL
63389: IFTRUE 63393
63391: GO 63526
63393: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63394: LD_ADDR_VAR 0 5
63398: PUSH
63399: LD_VAR 0 1
63403: PUSH
63404: LD_VAR 0 2
63408: PUSH
63409: LD_INT 4
63411: MINUS
63412: PUSH
63413: LD_INT 3
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: PUSH
63421: LD_VAR 0 1
63425: PUSH
63426: LD_INT 3
63428: MINUS
63429: PUSH
63430: LD_VAR 0 2
63434: PUSH
63435: LD_INT 3
63437: MINUS
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: LIST
63446: PUSH
63447: LD_VAR 0 1
63451: PUSH
63452: LD_INT 4
63454: MINUS
63455: PUSH
63456: LD_VAR 0 2
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: LIST
63468: PUSH
63469: LD_VAR 0 1
63473: PUSH
63474: LD_VAR 0 2
63478: PUSH
63479: LD_INT 3
63481: PLUS
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: LIST
63490: PUSH
63491: LD_VAR 0 1
63495: PUSH
63496: LD_INT 4
63498: PLUS
63499: PUSH
63500: LD_VAR 0 2
63504: PUSH
63505: LD_INT 4
63507: PLUS
63508: PUSH
63509: LD_INT 5
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: ST_TO_ADDR
// end ; 2 :
63524: GO 64083
63526: LD_INT 2
63528: DOUBLE
63529: EQUAL
63530: IFTRUE 63534
63532: GO 63663
63534: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63535: LD_ADDR_VAR 0 5
63539: PUSH
63540: LD_VAR 0 1
63544: PUSH
63545: LD_VAR 0 2
63549: PUSH
63550: LD_INT 3
63552: MINUS
63553: PUSH
63554: LD_INT 3
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: LIST
63561: PUSH
63562: LD_VAR 0 1
63566: PUSH
63567: LD_INT 4
63569: PLUS
63570: PUSH
63571: LD_VAR 0 2
63575: PUSH
63576: LD_INT 4
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: LIST
63583: PUSH
63584: LD_VAR 0 1
63588: PUSH
63589: LD_VAR 0 2
63593: PUSH
63594: LD_INT 4
63596: PLUS
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: LIST
63605: PUSH
63606: LD_VAR 0 1
63610: PUSH
63611: LD_INT 3
63613: MINUS
63614: PUSH
63615: LD_VAR 0 2
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: PUSH
63628: LD_VAR 0 1
63632: PUSH
63633: LD_INT 4
63635: MINUS
63636: PUSH
63637: LD_VAR 0 2
63641: PUSH
63642: LD_INT 4
63644: MINUS
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: LIST
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: ST_TO_ADDR
// end ; 3 :
63661: GO 64083
63663: LD_INT 3
63665: DOUBLE
63666: EQUAL
63667: IFTRUE 63671
63669: GO 63804
63671: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63672: LD_ADDR_VAR 0 5
63676: PUSH
63677: LD_VAR 0 1
63681: PUSH
63682: LD_INT 3
63684: PLUS
63685: PUSH
63686: LD_VAR 0 2
63690: PUSH
63691: LD_INT 4
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: LIST
63698: PUSH
63699: LD_VAR 0 1
63703: PUSH
63704: LD_INT 4
63706: PLUS
63707: PUSH
63708: LD_VAR 0 2
63712: PUSH
63713: LD_INT 4
63715: PLUS
63716: PUSH
63717: LD_INT 5
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: LIST
63724: PUSH
63725: LD_VAR 0 1
63729: PUSH
63730: LD_INT 4
63732: MINUS
63733: PUSH
63734: LD_VAR 0 2
63738: PUSH
63739: LD_INT 1
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: LIST
63746: PUSH
63747: LD_VAR 0 1
63751: PUSH
63752: LD_VAR 0 2
63756: PUSH
63757: LD_INT 4
63759: MINUS
63760: PUSH
63761: LD_INT 3
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: LIST
63768: PUSH
63769: LD_VAR 0 1
63773: PUSH
63774: LD_INT 3
63776: MINUS
63777: PUSH
63778: LD_VAR 0 2
63782: PUSH
63783: LD_INT 3
63785: MINUS
63786: PUSH
63787: LD_INT 2
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: LIST
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: ST_TO_ADDR
// end ; 4 :
63802: GO 64083
63804: LD_INT 4
63806: DOUBLE
63807: EQUAL
63808: IFTRUE 63812
63810: GO 63945
63812: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63813: LD_ADDR_VAR 0 5
63817: PUSH
63818: LD_VAR 0 1
63822: PUSH
63823: LD_VAR 0 2
63827: PUSH
63828: LD_INT 4
63830: PLUS
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: LIST
63839: PUSH
63840: LD_VAR 0 1
63844: PUSH
63845: LD_INT 3
63847: PLUS
63848: PUSH
63849: LD_VAR 0 2
63853: PUSH
63854: LD_INT 3
63856: PLUS
63857: PUSH
63858: LD_INT 5
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: PUSH
63866: LD_VAR 0 1
63870: PUSH
63871: LD_INT 4
63873: PLUS
63874: PUSH
63875: LD_VAR 0 2
63879: PUSH
63880: LD_INT 4
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: LIST
63887: PUSH
63888: LD_VAR 0 1
63892: PUSH
63893: LD_VAR 0 2
63897: PUSH
63898: LD_INT 3
63900: MINUS
63901: PUSH
63902: LD_INT 3
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: LIST
63909: PUSH
63910: LD_VAR 0 1
63914: PUSH
63915: LD_INT 4
63917: MINUS
63918: PUSH
63919: LD_VAR 0 2
63923: PUSH
63924: LD_INT 4
63926: MINUS
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: ST_TO_ADDR
// end ; 5 :
63943: GO 64083
63945: LD_INT 5
63947: DOUBLE
63948: EQUAL
63949: IFTRUE 63953
63951: GO 64082
63953: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63954: LD_ADDR_VAR 0 5
63958: PUSH
63959: LD_VAR 0 1
63963: PUSH
63964: LD_INT 4
63966: MINUS
63967: PUSH
63968: LD_VAR 0 2
63972: PUSH
63973: LD_INT 1
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: PUSH
63981: LD_VAR 0 1
63985: PUSH
63986: LD_VAR 0 2
63990: PUSH
63991: LD_INT 4
63993: MINUS
63994: PUSH
63995: LD_INT 3
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: LIST
64002: PUSH
64003: LD_VAR 0 1
64007: PUSH
64008: LD_INT 4
64010: PLUS
64011: PUSH
64012: LD_VAR 0 2
64016: PUSH
64017: LD_INT 4
64019: PLUS
64020: PUSH
64021: LD_INT 5
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: LIST
64028: PUSH
64029: LD_VAR 0 1
64033: PUSH
64034: LD_INT 3
64036: PLUS
64037: PUSH
64038: LD_VAR 0 2
64042: PUSH
64043: LD_INT 4
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: LIST
64050: PUSH
64051: LD_VAR 0 1
64055: PUSH
64056: LD_VAR 0 2
64060: PUSH
64061: LD_INT 3
64063: PLUS
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: LIST
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: ST_TO_ADDR
// end ; end ;
64080: GO 64083
64082: POP
// result := list ;
64083: LD_ADDR_VAR 0 4
64087: PUSH
64088: LD_VAR 0 5
64092: ST_TO_ADDR
// end ;
64093: LD_VAR 0 4
64097: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64098: LD_INT 0
64100: PPUSH
64101: PPUSH
64102: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64103: LD_VAR 0 1
64107: NOT
64108: PUSH
64109: LD_VAR 0 2
64113: PUSH
64114: LD_INT 1
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: LD_INT 3
64122: PUSH
64123: LD_INT 4
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: IN
64132: NOT
64133: OR
64134: IFFALSE 64138
// exit ;
64136: GO 64221
// tmp := [ ] ;
64138: LD_ADDR_VAR 0 5
64142: PUSH
64143: EMPTY
64144: ST_TO_ADDR
// for i in units do
64145: LD_ADDR_VAR 0 4
64149: PUSH
64150: LD_VAR 0 1
64154: PUSH
64155: FOR_IN
64156: IFFALSE 64190
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64158: LD_ADDR_VAR 0 5
64162: PUSH
64163: LD_VAR 0 5
64167: PPUSH
64168: LD_VAR 0 4
64172: PPUSH
64173: LD_VAR 0 2
64177: PPUSH
64178: CALL_OW 259
64182: PPUSH
64183: CALL 65582 0 2
64187: ST_TO_ADDR
64188: GO 64155
64190: POP
64191: POP
// if not tmp then
64192: LD_VAR 0 5
64196: NOT
64197: IFFALSE 64201
// exit ;
64199: GO 64221
// result := SortListByListDesc ( units , tmp ) ;
64201: LD_ADDR_VAR 0 3
64205: PUSH
64206: LD_VAR 0 1
64210: PPUSH
64211: LD_VAR 0 5
64215: PPUSH
64216: CALL_OW 77
64220: ST_TO_ADDR
// end ;
64221: LD_VAR 0 3
64225: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64226: LD_INT 0
64228: PPUSH
64229: PPUSH
64230: PPUSH
// result := false ;
64231: LD_ADDR_VAR 0 3
64235: PUSH
64236: LD_INT 0
64238: ST_TO_ADDR
// if not building then
64239: LD_VAR 0 2
64243: NOT
64244: IFFALSE 64248
// exit ;
64246: GO 64386
// x := GetX ( building ) ;
64248: LD_ADDR_VAR 0 4
64252: PUSH
64253: LD_VAR 0 2
64257: PPUSH
64258: CALL_OW 250
64262: ST_TO_ADDR
// y := GetY ( building ) ;
64263: LD_ADDR_VAR 0 5
64267: PUSH
64268: LD_VAR 0 2
64272: PPUSH
64273: CALL_OW 251
64277: ST_TO_ADDR
// if not x or not y then
64278: LD_VAR 0 4
64282: NOT
64283: PUSH
64284: LD_VAR 0 5
64288: NOT
64289: OR
64290: IFFALSE 64294
// exit ;
64292: GO 64386
// if GetTaskList ( unit ) then
64294: LD_VAR 0 1
64298: PPUSH
64299: CALL_OW 437
64303: IFFALSE 64386
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64305: LD_STRING e
64307: PUSH
64308: LD_VAR 0 1
64312: PPUSH
64313: CALL_OW 437
64317: PUSH
64318: LD_INT 1
64320: ARRAY
64321: PUSH
64322: LD_INT 1
64324: ARRAY
64325: EQUAL
64326: PUSH
64327: LD_VAR 0 4
64331: PUSH
64332: LD_VAR 0 1
64336: PPUSH
64337: CALL_OW 437
64341: PUSH
64342: LD_INT 1
64344: ARRAY
64345: PUSH
64346: LD_INT 2
64348: ARRAY
64349: EQUAL
64350: AND
64351: PUSH
64352: LD_VAR 0 5
64356: PUSH
64357: LD_VAR 0 1
64361: PPUSH
64362: CALL_OW 437
64366: PUSH
64367: LD_INT 1
64369: ARRAY
64370: PUSH
64371: LD_INT 3
64373: ARRAY
64374: EQUAL
64375: AND
64376: IFFALSE 64386
// result := true end ;
64378: LD_ADDR_VAR 0 3
64382: PUSH
64383: LD_INT 1
64385: ST_TO_ADDR
// end ;
64386: LD_VAR 0 3
64390: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64391: LD_INT 0
64393: PPUSH
// result := false ;
64394: LD_ADDR_VAR 0 4
64398: PUSH
64399: LD_INT 0
64401: ST_TO_ADDR
// if GetTaskList ( unit ) then
64402: LD_VAR 0 1
64406: PPUSH
64407: CALL_OW 437
64411: IFFALSE 64494
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64413: LD_STRING M
64415: PUSH
64416: LD_VAR 0 1
64420: PPUSH
64421: CALL_OW 437
64425: PUSH
64426: LD_INT 1
64428: ARRAY
64429: PUSH
64430: LD_INT 1
64432: ARRAY
64433: EQUAL
64434: PUSH
64435: LD_VAR 0 2
64439: PUSH
64440: LD_VAR 0 1
64444: PPUSH
64445: CALL_OW 437
64449: PUSH
64450: LD_INT 1
64452: ARRAY
64453: PUSH
64454: LD_INT 2
64456: ARRAY
64457: EQUAL
64458: AND
64459: PUSH
64460: LD_VAR 0 3
64464: PUSH
64465: LD_VAR 0 1
64469: PPUSH
64470: CALL_OW 437
64474: PUSH
64475: LD_INT 1
64477: ARRAY
64478: PUSH
64479: LD_INT 3
64481: ARRAY
64482: EQUAL
64483: AND
64484: IFFALSE 64494
// result := true ;
64486: LD_ADDR_VAR 0 4
64490: PUSH
64491: LD_INT 1
64493: ST_TO_ADDR
// end ; end ;
64494: LD_VAR 0 4
64498: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64499: LD_INT 0
64501: PPUSH
64502: PPUSH
64503: PPUSH
64504: PPUSH
// if not unit or not area then
64505: LD_VAR 0 1
64509: NOT
64510: PUSH
64511: LD_VAR 0 2
64515: NOT
64516: OR
64517: IFFALSE 64521
// exit ;
64519: GO 64685
// tmp := AreaToList ( area , i ) ;
64521: LD_ADDR_VAR 0 6
64525: PUSH
64526: LD_VAR 0 2
64530: PPUSH
64531: LD_VAR 0 5
64535: PPUSH
64536: CALL_OW 517
64540: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64541: LD_ADDR_VAR 0 5
64545: PUSH
64546: DOUBLE
64547: LD_INT 1
64549: DEC
64550: ST_TO_ADDR
64551: LD_VAR 0 6
64555: PUSH
64556: LD_INT 1
64558: ARRAY
64559: PUSH
64560: FOR_TO
64561: IFFALSE 64683
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64563: LD_ADDR_VAR 0 7
64567: PUSH
64568: LD_VAR 0 6
64572: PUSH
64573: LD_INT 1
64575: ARRAY
64576: PUSH
64577: LD_VAR 0 5
64581: ARRAY
64582: PUSH
64583: LD_VAR 0 6
64587: PUSH
64588: LD_INT 2
64590: ARRAY
64591: PUSH
64592: LD_VAR 0 5
64596: ARRAY
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64602: LD_VAR 0 7
64606: PUSH
64607: LD_INT 1
64609: ARRAY
64610: PPUSH
64611: LD_VAR 0 7
64615: PUSH
64616: LD_INT 2
64618: ARRAY
64619: PPUSH
64620: CALL_OW 428
64624: PUSH
64625: LD_INT 0
64627: EQUAL
64628: IFFALSE 64681
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64630: LD_VAR 0 1
64634: PPUSH
64635: LD_VAR 0 7
64639: PUSH
64640: LD_INT 1
64642: ARRAY
64643: PPUSH
64644: LD_VAR 0 7
64648: PUSH
64649: LD_INT 2
64651: ARRAY
64652: PPUSH
64653: LD_VAR 0 3
64657: PPUSH
64658: CALL_OW 48
// result := IsPlaced ( unit ) ;
64662: LD_ADDR_VAR 0 4
64666: PUSH
64667: LD_VAR 0 1
64671: PPUSH
64672: CALL_OW 305
64676: ST_TO_ADDR
// exit ;
64677: POP
64678: POP
64679: GO 64685
// end ; end ;
64681: GO 64560
64683: POP
64684: POP
// end ;
64685: LD_VAR 0 4
64689: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64690: LD_INT 0
64692: PPUSH
64693: PPUSH
64694: PPUSH
// if not side or side > 8 then
64695: LD_VAR 0 1
64699: NOT
64700: PUSH
64701: LD_VAR 0 1
64705: PUSH
64706: LD_INT 8
64708: GREATER
64709: OR
64710: IFFALSE 64714
// exit ;
64712: GO 64901
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64714: LD_ADDR_VAR 0 4
64718: PUSH
64719: LD_INT 22
64721: PUSH
64722: LD_VAR 0 1
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 21
64733: PUSH
64734: LD_INT 3
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PPUSH
64745: CALL_OW 69
64749: ST_TO_ADDR
// if not tmp then
64750: LD_VAR 0 4
64754: NOT
64755: IFFALSE 64759
// exit ;
64757: GO 64901
// enable_addtolog := true ;
64759: LD_ADDR_OWVAR 81
64763: PUSH
64764: LD_INT 1
64766: ST_TO_ADDR
// AddToLog ( [ ) ;
64767: LD_STRING [
64769: PPUSH
64770: CALL_OW 561
// for i in tmp do
64774: LD_ADDR_VAR 0 3
64778: PUSH
64779: LD_VAR 0 4
64783: PUSH
64784: FOR_IN
64785: IFFALSE 64892
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64787: LD_STRING [
64789: PUSH
64790: LD_VAR 0 3
64794: PPUSH
64795: CALL_OW 266
64799: STR
64800: PUSH
64801: LD_STRING , 
64803: STR
64804: PUSH
64805: LD_VAR 0 3
64809: PPUSH
64810: CALL_OW 250
64814: STR
64815: PUSH
64816: LD_STRING , 
64818: STR
64819: PUSH
64820: LD_VAR 0 3
64824: PPUSH
64825: CALL_OW 251
64829: STR
64830: PUSH
64831: LD_STRING , 
64833: STR
64834: PUSH
64835: LD_VAR 0 3
64839: PPUSH
64840: CALL_OW 254
64844: STR
64845: PUSH
64846: LD_STRING , 
64848: STR
64849: PUSH
64850: LD_VAR 0 3
64854: PPUSH
64855: LD_INT 1
64857: PPUSH
64858: CALL_OW 268
64862: STR
64863: PUSH
64864: LD_STRING , 
64866: STR
64867: PUSH
64868: LD_VAR 0 3
64872: PPUSH
64873: LD_INT 2
64875: PPUSH
64876: CALL_OW 268
64880: STR
64881: PUSH
64882: LD_STRING ],
64884: STR
64885: PPUSH
64886: CALL_OW 561
// end ;
64890: GO 64784
64892: POP
64893: POP
// AddToLog ( ]; ) ;
64894: LD_STRING ];
64896: PPUSH
64897: CALL_OW 561
// end ;
64901: LD_VAR 0 2
64905: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64906: LD_INT 0
64908: PPUSH
64909: PPUSH
64910: PPUSH
64911: PPUSH
64912: PPUSH
// if not area or not rate or not max then
64913: LD_VAR 0 1
64917: NOT
64918: PUSH
64919: LD_VAR 0 2
64923: NOT
64924: OR
64925: PUSH
64926: LD_VAR 0 4
64930: NOT
64931: OR
64932: IFFALSE 64936
// exit ;
64934: GO 65125
// while 1 do
64936: LD_INT 1
64938: IFFALSE 65125
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64940: LD_ADDR_VAR 0 9
64944: PUSH
64945: LD_VAR 0 1
64949: PPUSH
64950: LD_INT 1
64952: PPUSH
64953: CALL_OW 287
64957: PUSH
64958: LD_INT 10
64960: MUL
64961: ST_TO_ADDR
// r := rate / 10 ;
64962: LD_ADDR_VAR 0 7
64966: PUSH
64967: LD_VAR 0 2
64971: PUSH
64972: LD_INT 10
64974: DIVREAL
64975: ST_TO_ADDR
// time := 1 1$00 ;
64976: LD_ADDR_VAR 0 8
64980: PUSH
64981: LD_INT 2100
64983: ST_TO_ADDR
// if amount < min then
64984: LD_VAR 0 9
64988: PUSH
64989: LD_VAR 0 3
64993: LESS
64994: IFFALSE 65012
// r := r * 2 else
64996: LD_ADDR_VAR 0 7
65000: PUSH
65001: LD_VAR 0 7
65005: PUSH
65006: LD_INT 2
65008: MUL
65009: ST_TO_ADDR
65010: GO 65038
// if amount > max then
65012: LD_VAR 0 9
65016: PUSH
65017: LD_VAR 0 4
65021: GREATER
65022: IFFALSE 65038
// r := r / 2 ;
65024: LD_ADDR_VAR 0 7
65028: PUSH
65029: LD_VAR 0 7
65033: PUSH
65034: LD_INT 2
65036: DIVREAL
65037: ST_TO_ADDR
// time := time / r ;
65038: LD_ADDR_VAR 0 8
65042: PUSH
65043: LD_VAR 0 8
65047: PUSH
65048: LD_VAR 0 7
65052: DIVREAL
65053: ST_TO_ADDR
// if time < 0 then
65054: LD_VAR 0 8
65058: PUSH
65059: LD_INT 0
65061: LESS
65062: IFFALSE 65079
// time := time * - 1 ;
65064: LD_ADDR_VAR 0 8
65068: PUSH
65069: LD_VAR 0 8
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: MUL
65078: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65079: LD_VAR 0 8
65083: PUSH
65084: LD_INT 35
65086: PPUSH
65087: LD_INT 875
65089: PPUSH
65090: CALL_OW 12
65094: PLUS
65095: PPUSH
65096: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65100: LD_INT 1
65102: PPUSH
65103: LD_INT 5
65105: PPUSH
65106: CALL_OW 12
65110: PPUSH
65111: LD_VAR 0 1
65115: PPUSH
65116: LD_INT 1
65118: PPUSH
65119: CALL_OW 55
// end ;
65123: GO 64936
// end ;
65125: LD_VAR 0 5
65129: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65130: LD_INT 0
65132: PPUSH
65133: PPUSH
65134: PPUSH
65135: PPUSH
65136: PPUSH
65137: PPUSH
65138: PPUSH
65139: PPUSH
// if not turrets or not factories then
65140: LD_VAR 0 1
65144: NOT
65145: PUSH
65146: LD_VAR 0 2
65150: NOT
65151: OR
65152: IFFALSE 65156
// exit ;
65154: GO 65463
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65156: LD_ADDR_VAR 0 10
65160: PUSH
65161: LD_INT 5
65163: PUSH
65164: LD_INT 6
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: LD_INT 4
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 3
65183: PUSH
65184: LD_INT 5
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 24
65198: PUSH
65199: LD_INT 25
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 23
65208: PUSH
65209: LD_INT 27
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 42
65222: PUSH
65223: LD_INT 43
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 44
65232: PUSH
65233: LD_INT 46
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 45
65242: PUSH
65243: LD_INT 47
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: LIST
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: LIST
65259: ST_TO_ADDR
// result := [ ] ;
65260: LD_ADDR_VAR 0 3
65264: PUSH
65265: EMPTY
65266: ST_TO_ADDR
// for i in turrets do
65267: LD_ADDR_VAR 0 4
65271: PUSH
65272: LD_VAR 0 1
65276: PUSH
65277: FOR_IN
65278: IFFALSE 65461
// begin nat := GetNation ( i ) ;
65280: LD_ADDR_VAR 0 7
65284: PUSH
65285: LD_VAR 0 4
65289: PPUSH
65290: CALL_OW 248
65294: ST_TO_ADDR
// weapon := 0 ;
65295: LD_ADDR_VAR 0 8
65299: PUSH
65300: LD_INT 0
65302: ST_TO_ADDR
// if not nat then
65303: LD_VAR 0 7
65307: NOT
65308: IFFALSE 65312
// continue ;
65310: GO 65277
// for j in list [ nat ] do
65312: LD_ADDR_VAR 0 5
65316: PUSH
65317: LD_VAR 0 10
65321: PUSH
65322: LD_VAR 0 7
65326: ARRAY
65327: PUSH
65328: FOR_IN
65329: IFFALSE 65370
// if GetBWeapon ( i ) = j [ 1 ] then
65331: LD_VAR 0 4
65335: PPUSH
65336: CALL_OW 269
65340: PUSH
65341: LD_VAR 0 5
65345: PUSH
65346: LD_INT 1
65348: ARRAY
65349: EQUAL
65350: IFFALSE 65368
// begin weapon := j [ 2 ] ;
65352: LD_ADDR_VAR 0 8
65356: PUSH
65357: LD_VAR 0 5
65361: PUSH
65362: LD_INT 2
65364: ARRAY
65365: ST_TO_ADDR
// break ;
65366: GO 65370
// end ;
65368: GO 65328
65370: POP
65371: POP
// if not weapon then
65372: LD_VAR 0 8
65376: NOT
65377: IFFALSE 65381
// continue ;
65379: GO 65277
// for k in factories do
65381: LD_ADDR_VAR 0 6
65385: PUSH
65386: LD_VAR 0 2
65390: PUSH
65391: FOR_IN
65392: IFFALSE 65457
// begin weapons := AvailableWeaponList ( k ) ;
65394: LD_ADDR_VAR 0 9
65398: PUSH
65399: LD_VAR 0 6
65403: PPUSH
65404: CALL_OW 478
65408: ST_TO_ADDR
// if not weapons then
65409: LD_VAR 0 9
65413: NOT
65414: IFFALSE 65418
// continue ;
65416: GO 65391
// if weapon in weapons then
65418: LD_VAR 0 8
65422: PUSH
65423: LD_VAR 0 9
65427: IN
65428: IFFALSE 65455
// begin result := [ i , weapon ] ;
65430: LD_ADDR_VAR 0 3
65434: PUSH
65435: LD_VAR 0 4
65439: PUSH
65440: LD_VAR 0 8
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: ST_TO_ADDR
// exit ;
65449: POP
65450: POP
65451: POP
65452: POP
65453: GO 65463
// end ; end ;
65455: GO 65391
65457: POP
65458: POP
// end ;
65459: GO 65277
65461: POP
65462: POP
// end ;
65463: LD_VAR 0 3
65467: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65468: LD_INT 0
65470: PPUSH
// if not side or side > 8 then
65471: LD_VAR 0 3
65475: NOT
65476: PUSH
65477: LD_VAR 0 3
65481: PUSH
65482: LD_INT 8
65484: GREATER
65485: OR
65486: IFFALSE 65490
// exit ;
65488: GO 65549
// if not range then
65490: LD_VAR 0 4
65494: NOT
65495: IFFALSE 65506
// range := - 12 ;
65497: LD_ADDR_VAR 0 4
65501: PUSH
65502: LD_INT 12
65504: NEG
65505: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65506: LD_VAR 0 1
65510: PPUSH
65511: LD_VAR 0 2
65515: PPUSH
65516: LD_VAR 0 3
65520: PPUSH
65521: LD_VAR 0 4
65525: PPUSH
65526: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65530: LD_VAR 0 1
65534: PPUSH
65535: LD_VAR 0 2
65539: PPUSH
65540: LD_VAR 0 3
65544: PPUSH
65545: CALL_OW 331
// end ;
65549: LD_VAR 0 5
65553: RET
// export function Video ( mode ) ; begin
65554: LD_INT 0
65556: PPUSH
// ingame_video = mode ;
65557: LD_ADDR_OWVAR 52
65561: PUSH
65562: LD_VAR 0 1
65566: ST_TO_ADDR
// interface_hidden = mode ;
65567: LD_ADDR_OWVAR 54
65571: PUSH
65572: LD_VAR 0 1
65576: ST_TO_ADDR
// end ;
65577: LD_VAR 0 2
65581: RET
// export function Join ( array , element ) ; begin
65582: LD_INT 0
65584: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65585: LD_ADDR_VAR 0 3
65589: PUSH
65590: LD_VAR 0 1
65594: PPUSH
65595: LD_VAR 0 1
65599: PUSH
65600: LD_INT 1
65602: PLUS
65603: PPUSH
65604: LD_VAR 0 2
65608: PPUSH
65609: CALL_OW 1
65613: ST_TO_ADDR
// end ;
65614: LD_VAR 0 3
65618: RET
// export function JoinUnion ( array , element ) ; begin
65619: LD_INT 0
65621: PPUSH
// result := array union element ;
65622: LD_ADDR_VAR 0 3
65626: PUSH
65627: LD_VAR 0 1
65631: PUSH
65632: LD_VAR 0 2
65636: UNION
65637: ST_TO_ADDR
// end ;
65638: LD_VAR 0 3
65642: RET
// export function GetBehemoths ( side ) ; begin
65643: LD_INT 0
65645: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65646: LD_ADDR_VAR 0 2
65650: PUSH
65651: LD_INT 22
65653: PUSH
65654: LD_VAR 0 1
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 31
65665: PUSH
65666: LD_INT 25
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PPUSH
65677: CALL_OW 69
65681: ST_TO_ADDR
// end ;
65682: LD_VAR 0 2
65686: RET
// export function Shuffle ( array ) ; var i , index ; begin
65687: LD_INT 0
65689: PPUSH
65690: PPUSH
65691: PPUSH
// result := [ ] ;
65692: LD_ADDR_VAR 0 2
65696: PUSH
65697: EMPTY
65698: ST_TO_ADDR
// if not array then
65699: LD_VAR 0 1
65703: NOT
65704: IFFALSE 65708
// exit ;
65706: GO 65807
// Randomize ;
65708: CALL_OW 10
// for i = array downto 1 do
65712: LD_ADDR_VAR 0 3
65716: PUSH
65717: DOUBLE
65718: LD_VAR 0 1
65722: INC
65723: ST_TO_ADDR
65724: LD_INT 1
65726: PUSH
65727: FOR_DOWNTO
65728: IFFALSE 65805
// begin index := rand ( 1 , array ) ;
65730: LD_ADDR_VAR 0 4
65734: PUSH
65735: LD_INT 1
65737: PPUSH
65738: LD_VAR 0 1
65742: PPUSH
65743: CALL_OW 12
65747: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65748: LD_ADDR_VAR 0 2
65752: PUSH
65753: LD_VAR 0 2
65757: PPUSH
65758: LD_VAR 0 2
65762: PUSH
65763: LD_INT 1
65765: PLUS
65766: PPUSH
65767: LD_VAR 0 1
65771: PUSH
65772: LD_VAR 0 4
65776: ARRAY
65777: PPUSH
65778: CALL_OW 2
65782: ST_TO_ADDR
// array := Delete ( array , index ) ;
65783: LD_ADDR_VAR 0 1
65787: PUSH
65788: LD_VAR 0 1
65792: PPUSH
65793: LD_VAR 0 4
65797: PPUSH
65798: CALL_OW 3
65802: ST_TO_ADDR
// end ;
65803: GO 65727
65805: POP
65806: POP
// end ;
65807: LD_VAR 0 2
65811: RET
// export function GetBaseMaterials ( base ) ; begin
65812: LD_INT 0
65814: PPUSH
// result := [ 0 , 0 , 0 ] ;
65815: LD_ADDR_VAR 0 2
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: LD_INT 0
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: LIST
65833: ST_TO_ADDR
// if not base then
65834: LD_VAR 0 1
65838: NOT
65839: IFFALSE 65843
// exit ;
65841: GO 65892
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65843: LD_ADDR_VAR 0 2
65847: PUSH
65848: LD_VAR 0 1
65852: PPUSH
65853: LD_INT 1
65855: PPUSH
65856: CALL_OW 275
65860: PUSH
65861: LD_VAR 0 1
65865: PPUSH
65866: LD_INT 2
65868: PPUSH
65869: CALL_OW 275
65873: PUSH
65874: LD_VAR 0 1
65878: PPUSH
65879: LD_INT 3
65881: PPUSH
65882: CALL_OW 275
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: LIST
65891: ST_TO_ADDR
// end ;
65892: LD_VAR 0 2
65896: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65897: LD_INT 0
65899: PPUSH
65900: PPUSH
// result := array ;
65901: LD_ADDR_VAR 0 3
65905: PUSH
65906: LD_VAR 0 1
65910: ST_TO_ADDR
// if size >= result then
65911: LD_VAR 0 2
65915: PUSH
65916: LD_VAR 0 3
65920: GREATEREQUAL
65921: IFFALSE 65925
// exit ;
65923: GO 65975
// if size then
65925: LD_VAR 0 2
65929: IFFALSE 65975
// for i := array downto size do
65931: LD_ADDR_VAR 0 4
65935: PUSH
65936: DOUBLE
65937: LD_VAR 0 1
65941: INC
65942: ST_TO_ADDR
65943: LD_VAR 0 2
65947: PUSH
65948: FOR_DOWNTO
65949: IFFALSE 65973
// result := Delete ( result , result ) ;
65951: LD_ADDR_VAR 0 3
65955: PUSH
65956: LD_VAR 0 3
65960: PPUSH
65961: LD_VAR 0 3
65965: PPUSH
65966: CALL_OW 3
65970: ST_TO_ADDR
65971: GO 65948
65973: POP
65974: POP
// end ;
65975: LD_VAR 0 3
65979: RET
// export function ComExit ( unit ) ; var tmp ; begin
65980: LD_INT 0
65982: PPUSH
65983: PPUSH
// if not IsInUnit ( unit ) then
65984: LD_VAR 0 1
65988: PPUSH
65989: CALL_OW 310
65993: NOT
65994: IFFALSE 65998
// exit ;
65996: GO 66058
// tmp := IsInUnit ( unit ) ;
65998: LD_ADDR_VAR 0 3
66002: PUSH
66003: LD_VAR 0 1
66007: PPUSH
66008: CALL_OW 310
66012: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66013: LD_VAR 0 3
66017: PPUSH
66018: CALL_OW 247
66022: PUSH
66023: LD_INT 2
66025: EQUAL
66026: IFFALSE 66039
// ComExitVehicle ( unit ) else
66028: LD_VAR 0 1
66032: PPUSH
66033: CALL_OW 121
66037: GO 66048
// ComExitBuilding ( unit ) ;
66039: LD_VAR 0 1
66043: PPUSH
66044: CALL_OW 122
// result := tmp ;
66048: LD_ADDR_VAR 0 2
66052: PUSH
66053: LD_VAR 0 3
66057: ST_TO_ADDR
// end ;
66058: LD_VAR 0 2
66062: RET
// export function ComExitAll ( units ) ; var i ; begin
66063: LD_INT 0
66065: PPUSH
66066: PPUSH
// if not units then
66067: LD_VAR 0 1
66071: NOT
66072: IFFALSE 66076
// exit ;
66074: GO 66102
// for i in units do
66076: LD_ADDR_VAR 0 3
66080: PUSH
66081: LD_VAR 0 1
66085: PUSH
66086: FOR_IN
66087: IFFALSE 66100
// ComExit ( i ) ;
66089: LD_VAR 0 3
66093: PPUSH
66094: CALL 65980 0 1
66098: GO 66086
66100: POP
66101: POP
// end ;
66102: LD_VAR 0 2
66106: RET
// export function ResetHc ; begin
66107: LD_INT 0
66109: PPUSH
// InitHc ;
66110: CALL_OW 19
// hc_importance := 0 ;
66114: LD_ADDR_OWVAR 32
66118: PUSH
66119: LD_INT 0
66121: ST_TO_ADDR
// end ;
66122: LD_VAR 0 1
66126: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66127: LD_INT 0
66129: PPUSH
66130: PPUSH
66131: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66132: LD_ADDR_VAR 0 6
66136: PUSH
66137: LD_VAR 0 1
66141: PUSH
66142: LD_VAR 0 3
66146: PLUS
66147: PUSH
66148: LD_INT 2
66150: DIV
66151: ST_TO_ADDR
// if _x < 0 then
66152: LD_VAR 0 6
66156: PUSH
66157: LD_INT 0
66159: LESS
66160: IFFALSE 66177
// _x := _x * - 1 ;
66162: LD_ADDR_VAR 0 6
66166: PUSH
66167: LD_VAR 0 6
66171: PUSH
66172: LD_INT 1
66174: NEG
66175: MUL
66176: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66177: LD_ADDR_VAR 0 7
66181: PUSH
66182: LD_VAR 0 2
66186: PUSH
66187: LD_VAR 0 4
66191: PLUS
66192: PUSH
66193: LD_INT 2
66195: DIV
66196: ST_TO_ADDR
// if _y < 0 then
66197: LD_VAR 0 7
66201: PUSH
66202: LD_INT 0
66204: LESS
66205: IFFALSE 66222
// _y := _y * - 1 ;
66207: LD_ADDR_VAR 0 7
66211: PUSH
66212: LD_VAR 0 7
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: MUL
66221: ST_TO_ADDR
// result := [ _x , _y ] ;
66222: LD_ADDR_VAR 0 5
66226: PUSH
66227: LD_VAR 0 6
66231: PUSH
66232: LD_VAR 0 7
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: ST_TO_ADDR
// end ;
66241: LD_VAR 0 5
66245: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66246: LD_INT 0
66248: PPUSH
66249: PPUSH
66250: PPUSH
66251: PPUSH
// task := GetTaskList ( unit ) ;
66252: LD_ADDR_VAR 0 7
66256: PUSH
66257: LD_VAR 0 1
66261: PPUSH
66262: CALL_OW 437
66266: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66267: LD_VAR 0 7
66271: NOT
66272: PUSH
66273: LD_VAR 0 1
66277: PPUSH
66278: LD_VAR 0 2
66282: PPUSH
66283: CALL_OW 308
66287: NOT
66288: AND
66289: IFFALSE 66293
// exit ;
66291: GO 66411
// if IsInArea ( unit , area ) then
66293: LD_VAR 0 1
66297: PPUSH
66298: LD_VAR 0 2
66302: PPUSH
66303: CALL_OW 308
66307: IFFALSE 66325
// begin ComMoveToArea ( unit , goAway ) ;
66309: LD_VAR 0 1
66313: PPUSH
66314: LD_VAR 0 3
66318: PPUSH
66319: CALL_OW 113
// exit ;
66323: GO 66411
// end ; if task [ 1 ] [ 1 ] <> M then
66325: LD_VAR 0 7
66329: PUSH
66330: LD_INT 1
66332: ARRAY
66333: PUSH
66334: LD_INT 1
66336: ARRAY
66337: PUSH
66338: LD_STRING M
66340: NONEQUAL
66341: IFFALSE 66345
// exit ;
66343: GO 66411
// x := task [ 1 ] [ 2 ] ;
66345: LD_ADDR_VAR 0 5
66349: PUSH
66350: LD_VAR 0 7
66354: PUSH
66355: LD_INT 1
66357: ARRAY
66358: PUSH
66359: LD_INT 2
66361: ARRAY
66362: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66363: LD_ADDR_VAR 0 6
66367: PUSH
66368: LD_VAR 0 7
66372: PUSH
66373: LD_INT 1
66375: ARRAY
66376: PUSH
66377: LD_INT 3
66379: ARRAY
66380: ST_TO_ADDR
// if InArea ( x , y , area ) then
66381: LD_VAR 0 5
66385: PPUSH
66386: LD_VAR 0 6
66390: PPUSH
66391: LD_VAR 0 2
66395: PPUSH
66396: CALL_OW 309
66400: IFFALSE 66411
// ComStop ( unit ) ;
66402: LD_VAR 0 1
66406: PPUSH
66407: CALL_OW 141
// end ;
66411: LD_VAR 0 4
66415: RET
// export function Abs ( value ) ; begin
66416: LD_INT 0
66418: PPUSH
// result := value ;
66419: LD_ADDR_VAR 0 2
66423: PUSH
66424: LD_VAR 0 1
66428: ST_TO_ADDR
// if value < 0 then
66429: LD_VAR 0 1
66433: PUSH
66434: LD_INT 0
66436: LESS
66437: IFFALSE 66454
// result := value * - 1 ;
66439: LD_ADDR_VAR 0 2
66443: PUSH
66444: LD_VAR 0 1
66448: PUSH
66449: LD_INT 1
66451: NEG
66452: MUL
66453: ST_TO_ADDR
// end ;
66454: LD_VAR 0 2
66458: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66459: LD_INT 0
66461: PPUSH
66462: PPUSH
66463: PPUSH
66464: PPUSH
66465: PPUSH
66466: PPUSH
66467: PPUSH
66468: PPUSH
// if not unit or not building then
66469: LD_VAR 0 1
66473: NOT
66474: PUSH
66475: LD_VAR 0 2
66479: NOT
66480: OR
66481: IFFALSE 66485
// exit ;
66483: GO 66711
// x := GetX ( building ) ;
66485: LD_ADDR_VAR 0 4
66489: PUSH
66490: LD_VAR 0 2
66494: PPUSH
66495: CALL_OW 250
66499: ST_TO_ADDR
// y := GetY ( building ) ;
66500: LD_ADDR_VAR 0 6
66504: PUSH
66505: LD_VAR 0 2
66509: PPUSH
66510: CALL_OW 251
66514: ST_TO_ADDR
// d := GetDir ( building ) ;
66515: LD_ADDR_VAR 0 8
66519: PUSH
66520: LD_VAR 0 2
66524: PPUSH
66525: CALL_OW 254
66529: ST_TO_ADDR
// r := 4 ;
66530: LD_ADDR_VAR 0 9
66534: PUSH
66535: LD_INT 4
66537: ST_TO_ADDR
// for i := 1 to 5 do
66538: LD_ADDR_VAR 0 10
66542: PUSH
66543: DOUBLE
66544: LD_INT 1
66546: DEC
66547: ST_TO_ADDR
66548: LD_INT 5
66550: PUSH
66551: FOR_TO
66552: IFFALSE 66709
// begin _x := ShiftX ( x , d , r + i ) ;
66554: LD_ADDR_VAR 0 5
66558: PUSH
66559: LD_VAR 0 4
66563: PPUSH
66564: LD_VAR 0 8
66568: PPUSH
66569: LD_VAR 0 9
66573: PUSH
66574: LD_VAR 0 10
66578: PLUS
66579: PPUSH
66580: CALL_OW 272
66584: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66585: LD_ADDR_VAR 0 7
66589: PUSH
66590: LD_VAR 0 6
66594: PPUSH
66595: LD_VAR 0 8
66599: PPUSH
66600: LD_VAR 0 9
66604: PUSH
66605: LD_VAR 0 10
66609: PLUS
66610: PPUSH
66611: CALL_OW 273
66615: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66616: LD_VAR 0 5
66620: PPUSH
66621: LD_VAR 0 7
66625: PPUSH
66626: CALL_OW 488
66630: PUSH
66631: LD_VAR 0 5
66635: PPUSH
66636: LD_VAR 0 7
66640: PPUSH
66641: CALL_OW 428
66645: PPUSH
66646: CALL_OW 247
66650: PUSH
66651: LD_INT 3
66653: PUSH
66654: LD_INT 2
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: IN
66661: NOT
66662: AND
66663: IFFALSE 66707
// begin ComMoveXY ( unit , _x , _y ) ;
66665: LD_VAR 0 1
66669: PPUSH
66670: LD_VAR 0 5
66674: PPUSH
66675: LD_VAR 0 7
66679: PPUSH
66680: CALL_OW 111
// result := [ _x , _y ] ;
66684: LD_ADDR_VAR 0 3
66688: PUSH
66689: LD_VAR 0 5
66693: PUSH
66694: LD_VAR 0 7
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: ST_TO_ADDR
// exit ;
66703: POP
66704: POP
66705: GO 66711
// end ; end ;
66707: GO 66551
66709: POP
66710: POP
// end ;
66711: LD_VAR 0 3
66715: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66716: LD_INT 0
66718: PPUSH
66719: PPUSH
66720: PPUSH
// result := 0 ;
66721: LD_ADDR_VAR 0 3
66725: PUSH
66726: LD_INT 0
66728: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66729: LD_VAR 0 1
66733: PUSH
66734: LD_INT 0
66736: LESS
66737: PUSH
66738: LD_VAR 0 1
66742: PUSH
66743: LD_INT 8
66745: GREATER
66746: OR
66747: PUSH
66748: LD_VAR 0 2
66752: PUSH
66753: LD_INT 0
66755: LESS
66756: OR
66757: PUSH
66758: LD_VAR 0 2
66762: PUSH
66763: LD_INT 8
66765: GREATER
66766: OR
66767: IFFALSE 66771
// exit ;
66769: GO 66846
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66771: LD_ADDR_VAR 0 4
66775: PUSH
66776: LD_INT 22
66778: PUSH
66779: LD_VAR 0 2
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PPUSH
66788: CALL_OW 69
66792: PUSH
66793: FOR_IN
66794: IFFALSE 66844
// begin un := UnitShoot ( i ) ;
66796: LD_ADDR_VAR 0 5
66800: PUSH
66801: LD_VAR 0 4
66805: PPUSH
66806: CALL_OW 504
66810: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66811: LD_VAR 0 5
66815: PPUSH
66816: CALL_OW 255
66820: PUSH
66821: LD_VAR 0 1
66825: EQUAL
66826: IFFALSE 66842
// begin result := un ;
66828: LD_ADDR_VAR 0 3
66832: PUSH
66833: LD_VAR 0 5
66837: ST_TO_ADDR
// exit ;
66838: POP
66839: POP
66840: GO 66846
// end ; end ;
66842: GO 66793
66844: POP
66845: POP
// end ;
66846: LD_VAR 0 3
66850: RET
// export function GetCargoBay ( units ) ; begin
66851: LD_INT 0
66853: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66854: LD_ADDR_VAR 0 2
66858: PUSH
66859: LD_VAR 0 1
66863: PPUSH
66864: LD_INT 2
66866: PUSH
66867: LD_INT 34
66869: PUSH
66870: LD_INT 12
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 34
66879: PUSH
66880: LD_INT 51
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 34
66889: PUSH
66890: LD_INT 32
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 34
66899: PUSH
66900: LD_INT 89
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: PPUSH
66914: CALL_OW 72
66918: ST_TO_ADDR
// end ;
66919: LD_VAR 0 2
66923: RET
// export function Negate ( value ) ; begin
66924: LD_INT 0
66926: PPUSH
// result := not value ;
66927: LD_ADDR_VAR 0 2
66931: PUSH
66932: LD_VAR 0 1
66936: NOT
66937: ST_TO_ADDR
// end ;
66938: LD_VAR 0 2
66942: RET
// export function Inc ( value ) ; begin
66943: LD_INT 0
66945: PPUSH
// result := value + 1 ;
66946: LD_ADDR_VAR 0 2
66950: PUSH
66951: LD_VAR 0 1
66955: PUSH
66956: LD_INT 1
66958: PLUS
66959: ST_TO_ADDR
// end ;
66960: LD_VAR 0 2
66964: RET
// export function Dec ( value ) ; begin
66965: LD_INT 0
66967: PPUSH
// result := value - 1 ;
66968: LD_ADDR_VAR 0 2
66972: PUSH
66973: LD_VAR 0 1
66977: PUSH
66978: LD_INT 1
66980: MINUS
66981: ST_TO_ADDR
// end ;
66982: LD_VAR 0 2
66986: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66987: LD_INT 0
66989: PPUSH
66990: PPUSH
66991: PPUSH
66992: PPUSH
66993: PPUSH
66994: PPUSH
66995: PPUSH
66996: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66997: LD_VAR 0 1
67001: PPUSH
67002: LD_VAR 0 2
67006: PPUSH
67007: CALL_OW 488
67011: NOT
67012: PUSH
67013: LD_VAR 0 3
67017: PPUSH
67018: LD_VAR 0 4
67022: PPUSH
67023: CALL_OW 488
67027: NOT
67028: OR
67029: IFFALSE 67042
// begin result := - 1 ;
67031: LD_ADDR_VAR 0 5
67035: PUSH
67036: LD_INT 1
67038: NEG
67039: ST_TO_ADDR
// exit ;
67040: GO 67277
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67042: LD_ADDR_VAR 0 12
67046: PUSH
67047: LD_VAR 0 1
67051: PPUSH
67052: LD_VAR 0 2
67056: PPUSH
67057: LD_VAR 0 3
67061: PPUSH
67062: LD_VAR 0 4
67066: PPUSH
67067: CALL 66127 0 4
67071: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67072: LD_ADDR_VAR 0 11
67076: PUSH
67077: LD_VAR 0 1
67081: PPUSH
67082: LD_VAR 0 2
67086: PPUSH
67087: LD_VAR 0 12
67091: PUSH
67092: LD_INT 1
67094: ARRAY
67095: PPUSH
67096: LD_VAR 0 12
67100: PUSH
67101: LD_INT 2
67103: ARRAY
67104: PPUSH
67105: CALL_OW 298
67109: ST_TO_ADDR
// distance := 9999 ;
67110: LD_ADDR_VAR 0 10
67114: PUSH
67115: LD_INT 9999
67117: ST_TO_ADDR
// for i := 0 to 5 do
67118: LD_ADDR_VAR 0 6
67122: PUSH
67123: DOUBLE
67124: LD_INT 0
67126: DEC
67127: ST_TO_ADDR
67128: LD_INT 5
67130: PUSH
67131: FOR_TO
67132: IFFALSE 67275
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67134: LD_ADDR_VAR 0 7
67138: PUSH
67139: LD_VAR 0 1
67143: PPUSH
67144: LD_VAR 0 6
67148: PPUSH
67149: LD_VAR 0 11
67153: PPUSH
67154: CALL_OW 272
67158: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67159: LD_ADDR_VAR 0 8
67163: PUSH
67164: LD_VAR 0 2
67168: PPUSH
67169: LD_VAR 0 6
67173: PPUSH
67174: LD_VAR 0 11
67178: PPUSH
67179: CALL_OW 273
67183: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67184: LD_VAR 0 7
67188: PPUSH
67189: LD_VAR 0 8
67193: PPUSH
67194: CALL_OW 488
67198: NOT
67199: IFFALSE 67203
// continue ;
67201: GO 67131
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67203: LD_ADDR_VAR 0 9
67207: PUSH
67208: LD_VAR 0 12
67212: PUSH
67213: LD_INT 1
67215: ARRAY
67216: PPUSH
67217: LD_VAR 0 12
67221: PUSH
67222: LD_INT 2
67224: ARRAY
67225: PPUSH
67226: LD_VAR 0 7
67230: PPUSH
67231: LD_VAR 0 8
67235: PPUSH
67236: CALL_OW 298
67240: ST_TO_ADDR
// if tmp < distance then
67241: LD_VAR 0 9
67245: PUSH
67246: LD_VAR 0 10
67250: LESS
67251: IFFALSE 67273
// begin result := i ;
67253: LD_ADDR_VAR 0 5
67257: PUSH
67258: LD_VAR 0 6
67262: ST_TO_ADDR
// distance := tmp ;
67263: LD_ADDR_VAR 0 10
67267: PUSH
67268: LD_VAR 0 9
67272: ST_TO_ADDR
// end ; end ;
67273: GO 67131
67275: POP
67276: POP
// end ;
67277: LD_VAR 0 5
67281: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67282: LD_INT 0
67284: PPUSH
67285: PPUSH
// if not driver or not IsInUnit ( driver ) then
67286: LD_VAR 0 1
67290: NOT
67291: PUSH
67292: LD_VAR 0 1
67296: PPUSH
67297: CALL_OW 310
67301: NOT
67302: OR
67303: IFFALSE 67307
// exit ;
67305: GO 67397
// vehicle := IsInUnit ( driver ) ;
67307: LD_ADDR_VAR 0 3
67311: PUSH
67312: LD_VAR 0 1
67316: PPUSH
67317: CALL_OW 310
67321: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67322: LD_VAR 0 1
67326: PPUSH
67327: LD_STRING \
67329: PUSH
67330: LD_INT 0
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: LD_INT 0
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: PUSH
67357: LD_STRING E
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: LD_VAR 0 3
67370: PUSH
67371: LD_INT 0
67373: PUSH
67374: LD_INT 0
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PPUSH
67393: CALL_OW 446
// end ;
67397: LD_VAR 0 2
67401: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67402: LD_INT 0
67404: PPUSH
67405: PPUSH
// if not driver or not IsInUnit ( driver ) then
67406: LD_VAR 0 1
67410: NOT
67411: PUSH
67412: LD_VAR 0 1
67416: PPUSH
67417: CALL_OW 310
67421: NOT
67422: OR
67423: IFFALSE 67427
// exit ;
67425: GO 67517
// vehicle := IsInUnit ( driver ) ;
67427: LD_ADDR_VAR 0 3
67431: PUSH
67432: LD_VAR 0 1
67436: PPUSH
67437: CALL_OW 310
67441: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67442: LD_VAR 0 1
67446: PPUSH
67447: LD_STRING \
67449: PUSH
67450: LD_INT 0
67452: PUSH
67453: LD_INT 0
67455: PUSH
67456: LD_INT 0
67458: PUSH
67459: LD_INT 0
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: LD_INT 0
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: PUSH
67477: LD_STRING E
67479: PUSH
67480: LD_INT 0
67482: PUSH
67483: LD_INT 0
67485: PUSH
67486: LD_VAR 0 3
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: LD_INT 0
67496: PUSH
67497: LD_INT 0
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PPUSH
67513: CALL_OW 447
// end ;
67517: LD_VAR 0 2
67521: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67522: LD_INT 0
67524: PPUSH
67525: PPUSH
67526: PPUSH
// tmp := [ ] ;
67527: LD_ADDR_VAR 0 5
67531: PUSH
67532: EMPTY
67533: ST_TO_ADDR
// for i in units do
67534: LD_ADDR_VAR 0 4
67538: PUSH
67539: LD_VAR 0 1
67543: PUSH
67544: FOR_IN
67545: IFFALSE 67583
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67547: LD_ADDR_VAR 0 5
67551: PUSH
67552: LD_VAR 0 5
67556: PPUSH
67557: LD_VAR 0 5
67561: PUSH
67562: LD_INT 1
67564: PLUS
67565: PPUSH
67566: LD_VAR 0 4
67570: PPUSH
67571: CALL_OW 256
67575: PPUSH
67576: CALL_OW 2
67580: ST_TO_ADDR
67581: GO 67544
67583: POP
67584: POP
// if not tmp then
67585: LD_VAR 0 5
67589: NOT
67590: IFFALSE 67594
// exit ;
67592: GO 67642
// if asc then
67594: LD_VAR 0 2
67598: IFFALSE 67622
// result := SortListByListAsc ( units , tmp ) else
67600: LD_ADDR_VAR 0 3
67604: PUSH
67605: LD_VAR 0 1
67609: PPUSH
67610: LD_VAR 0 5
67614: PPUSH
67615: CALL_OW 76
67619: ST_TO_ADDR
67620: GO 67642
// result := SortListByListDesc ( units , tmp ) ;
67622: LD_ADDR_VAR 0 3
67626: PUSH
67627: LD_VAR 0 1
67631: PPUSH
67632: LD_VAR 0 5
67636: PPUSH
67637: CALL_OW 77
67641: ST_TO_ADDR
// end ;
67642: LD_VAR 0 3
67646: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67647: LD_INT 0
67649: PPUSH
67650: PPUSH
// task := GetTaskList ( mech ) ;
67651: LD_ADDR_VAR 0 4
67655: PUSH
67656: LD_VAR 0 1
67660: PPUSH
67661: CALL_OW 437
67665: ST_TO_ADDR
// if not task then
67666: LD_VAR 0 4
67670: NOT
67671: IFFALSE 67675
// exit ;
67673: GO 67717
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67675: LD_ADDR_VAR 0 3
67679: PUSH
67680: LD_VAR 0 4
67684: PUSH
67685: LD_INT 1
67687: ARRAY
67688: PUSH
67689: LD_INT 1
67691: ARRAY
67692: PUSH
67693: LD_STRING r
67695: EQUAL
67696: PUSH
67697: LD_VAR 0 4
67701: PUSH
67702: LD_INT 1
67704: ARRAY
67705: PUSH
67706: LD_INT 4
67708: ARRAY
67709: PUSH
67710: LD_VAR 0 2
67714: EQUAL
67715: AND
67716: ST_TO_ADDR
// end ;
67717: LD_VAR 0 3
67721: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67722: LD_INT 0
67724: PPUSH
// SetDir ( unit , d ) ;
67725: LD_VAR 0 1
67729: PPUSH
67730: LD_VAR 0 4
67734: PPUSH
67735: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67739: LD_VAR 0 1
67743: PPUSH
67744: LD_VAR 0 2
67748: PPUSH
67749: LD_VAR 0 3
67753: PPUSH
67754: LD_VAR 0 5
67758: PPUSH
67759: CALL_OW 48
// end ;
67763: LD_VAR 0 6
67767: RET
// export function ToNaturalNumber ( number ) ; begin
67768: LD_INT 0
67770: PPUSH
// result := number div 1 ;
67771: LD_ADDR_VAR 0 2
67775: PUSH
67776: LD_VAR 0 1
67780: PUSH
67781: LD_INT 1
67783: DIV
67784: ST_TO_ADDR
// if number < 0 then
67785: LD_VAR 0 1
67789: PUSH
67790: LD_INT 0
67792: LESS
67793: IFFALSE 67803
// result := 0 ;
67795: LD_ADDR_VAR 0 2
67799: PUSH
67800: LD_INT 0
67802: ST_TO_ADDR
// end ;
67803: LD_VAR 0 2
67807: RET
// export function SortByClass ( units , class ) ; var un ; begin
67808: LD_INT 0
67810: PPUSH
67811: PPUSH
// if not units or not class then
67812: LD_VAR 0 1
67816: NOT
67817: PUSH
67818: LD_VAR 0 2
67822: NOT
67823: OR
67824: IFFALSE 67828
// exit ;
67826: GO 67923
// result := [ ] ;
67828: LD_ADDR_VAR 0 3
67832: PUSH
67833: EMPTY
67834: ST_TO_ADDR
// for un in units do
67835: LD_ADDR_VAR 0 4
67839: PUSH
67840: LD_VAR 0 1
67844: PUSH
67845: FOR_IN
67846: IFFALSE 67921
// if GetClass ( un ) = class then
67848: LD_VAR 0 4
67852: PPUSH
67853: CALL_OW 257
67857: PUSH
67858: LD_VAR 0 2
67862: EQUAL
67863: IFFALSE 67890
// result := Insert ( result , 1 , un ) else
67865: LD_ADDR_VAR 0 3
67869: PUSH
67870: LD_VAR 0 3
67874: PPUSH
67875: LD_INT 1
67877: PPUSH
67878: LD_VAR 0 4
67882: PPUSH
67883: CALL_OW 2
67887: ST_TO_ADDR
67888: GO 67919
// result := Replace ( result , result + 1 , un ) ;
67890: LD_ADDR_VAR 0 3
67894: PUSH
67895: LD_VAR 0 3
67899: PPUSH
67900: LD_VAR 0 3
67904: PUSH
67905: LD_INT 1
67907: PLUS
67908: PPUSH
67909: LD_VAR 0 4
67913: PPUSH
67914: CALL_OW 1
67918: ST_TO_ADDR
67919: GO 67845
67921: POP
67922: POP
// end ;
67923: LD_VAR 0 3
67927: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67928: LD_INT 0
67930: PPUSH
67931: PPUSH
67932: PPUSH
67933: PPUSH
67934: PPUSH
67935: PPUSH
67936: PPUSH
// result := [ ] ;
67937: LD_ADDR_VAR 0 4
67941: PUSH
67942: EMPTY
67943: ST_TO_ADDR
// if x - r < 0 then
67944: LD_VAR 0 1
67948: PUSH
67949: LD_VAR 0 3
67953: MINUS
67954: PUSH
67955: LD_INT 0
67957: LESS
67958: IFFALSE 67970
// min_x := 0 else
67960: LD_ADDR_VAR 0 8
67964: PUSH
67965: LD_INT 0
67967: ST_TO_ADDR
67968: GO 67986
// min_x := x - r ;
67970: LD_ADDR_VAR 0 8
67974: PUSH
67975: LD_VAR 0 1
67979: PUSH
67980: LD_VAR 0 3
67984: MINUS
67985: ST_TO_ADDR
// if y - r < 0 then
67986: LD_VAR 0 2
67990: PUSH
67991: LD_VAR 0 3
67995: MINUS
67996: PUSH
67997: LD_INT 0
67999: LESS
68000: IFFALSE 68012
// min_y := 0 else
68002: LD_ADDR_VAR 0 7
68006: PUSH
68007: LD_INT 0
68009: ST_TO_ADDR
68010: GO 68028
// min_y := y - r ;
68012: LD_ADDR_VAR 0 7
68016: PUSH
68017: LD_VAR 0 2
68021: PUSH
68022: LD_VAR 0 3
68026: MINUS
68027: ST_TO_ADDR
// max_x := x + r ;
68028: LD_ADDR_VAR 0 9
68032: PUSH
68033: LD_VAR 0 1
68037: PUSH
68038: LD_VAR 0 3
68042: PLUS
68043: ST_TO_ADDR
// max_y := y + r ;
68044: LD_ADDR_VAR 0 10
68048: PUSH
68049: LD_VAR 0 2
68053: PUSH
68054: LD_VAR 0 3
68058: PLUS
68059: ST_TO_ADDR
// for _x = min_x to max_x do
68060: LD_ADDR_VAR 0 5
68064: PUSH
68065: DOUBLE
68066: LD_VAR 0 8
68070: DEC
68071: ST_TO_ADDR
68072: LD_VAR 0 9
68076: PUSH
68077: FOR_TO
68078: IFFALSE 68179
// for _y = min_y to max_y do
68080: LD_ADDR_VAR 0 6
68084: PUSH
68085: DOUBLE
68086: LD_VAR 0 7
68090: DEC
68091: ST_TO_ADDR
68092: LD_VAR 0 10
68096: PUSH
68097: FOR_TO
68098: IFFALSE 68175
// begin if not ValidHex ( _x , _y ) then
68100: LD_VAR 0 5
68104: PPUSH
68105: LD_VAR 0 6
68109: PPUSH
68110: CALL_OW 488
68114: NOT
68115: IFFALSE 68119
// continue ;
68117: GO 68097
// if GetResourceTypeXY ( _x , _y ) then
68119: LD_VAR 0 5
68123: PPUSH
68124: LD_VAR 0 6
68128: PPUSH
68129: CALL_OW 283
68133: IFFALSE 68173
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68135: LD_ADDR_VAR 0 4
68139: PUSH
68140: LD_VAR 0 4
68144: PPUSH
68145: LD_VAR 0 4
68149: PUSH
68150: LD_INT 1
68152: PLUS
68153: PPUSH
68154: LD_VAR 0 5
68158: PUSH
68159: LD_VAR 0 6
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PPUSH
68168: CALL_OW 1
68172: ST_TO_ADDR
// end ;
68173: GO 68097
68175: POP
68176: POP
68177: GO 68077
68179: POP
68180: POP
// end ;
68181: LD_VAR 0 4
68185: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68186: LD_INT 0
68188: PPUSH
68189: PPUSH
68190: PPUSH
68191: PPUSH
68192: PPUSH
68193: PPUSH
68194: PPUSH
68195: PPUSH
// if not units then
68196: LD_VAR 0 1
68200: NOT
68201: IFFALSE 68205
// exit ;
68203: GO 68729
// result := UnitFilter ( units , [ f_ok ] ) ;
68205: LD_ADDR_VAR 0 3
68209: PUSH
68210: LD_VAR 0 1
68214: PPUSH
68215: LD_INT 50
68217: PUSH
68218: EMPTY
68219: LIST
68220: PPUSH
68221: CALL_OW 72
68225: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68226: LD_ADDR_VAR 0 8
68230: PUSH
68231: LD_VAR 0 1
68235: PUSH
68236: LD_INT 1
68238: ARRAY
68239: PPUSH
68240: CALL_OW 255
68244: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68245: LD_ADDR_VAR 0 10
68249: PUSH
68250: LD_INT 29
68252: PUSH
68253: LD_INT 91
68255: PUSH
68256: LD_INT 49
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: LIST
68263: ST_TO_ADDR
// if not result then
68264: LD_VAR 0 3
68268: NOT
68269: IFFALSE 68273
// exit ;
68271: GO 68729
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68273: LD_ADDR_VAR 0 5
68277: PUSH
68278: LD_INT 81
68280: PUSH
68281: LD_VAR 0 8
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PPUSH
68290: CALL_OW 69
68294: ST_TO_ADDR
// for i in result do
68295: LD_ADDR_VAR 0 4
68299: PUSH
68300: LD_VAR 0 3
68304: PUSH
68305: FOR_IN
68306: IFFALSE 68727
// begin tag := GetTag ( i ) + 1 ;
68308: LD_ADDR_VAR 0 9
68312: PUSH
68313: LD_VAR 0 4
68317: PPUSH
68318: CALL_OW 110
68322: PUSH
68323: LD_INT 1
68325: PLUS
68326: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68327: LD_ADDR_VAR 0 7
68331: PUSH
68332: LD_VAR 0 4
68336: PPUSH
68337: CALL_OW 250
68341: PPUSH
68342: LD_VAR 0 4
68346: PPUSH
68347: CALL_OW 251
68351: PPUSH
68352: LD_INT 6
68354: PPUSH
68355: CALL 67928 0 3
68359: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68360: LD_VAR 0 4
68364: PPUSH
68365: CALL_OW 247
68369: PUSH
68370: LD_INT 2
68372: EQUAL
68373: PUSH
68374: LD_VAR 0 7
68378: AND
68379: PUSH
68380: LD_VAR 0 4
68384: PPUSH
68385: CALL_OW 264
68389: PUSH
68390: LD_VAR 0 10
68394: IN
68395: NOT
68396: AND
68397: IFFALSE 68436
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68399: LD_VAR 0 4
68403: PPUSH
68404: LD_VAR 0 7
68408: PUSH
68409: LD_INT 1
68411: ARRAY
68412: PUSH
68413: LD_INT 1
68415: ARRAY
68416: PPUSH
68417: LD_VAR 0 7
68421: PUSH
68422: LD_INT 1
68424: ARRAY
68425: PUSH
68426: LD_INT 2
68428: ARRAY
68429: PPUSH
68430: CALL_OW 116
68434: GO 68725
// if path > tag then
68436: LD_VAR 0 2
68440: PUSH
68441: LD_VAR 0 9
68445: GREATER
68446: IFFALSE 68654
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68448: LD_ADDR_VAR 0 6
68452: PUSH
68453: LD_VAR 0 5
68457: PPUSH
68458: LD_INT 91
68460: PUSH
68461: LD_VAR 0 4
68465: PUSH
68466: LD_INT 8
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: LIST
68473: PPUSH
68474: CALL_OW 72
68478: ST_TO_ADDR
// if nearEnemy then
68479: LD_VAR 0 6
68483: IFFALSE 68552
// begin if GetWeapon ( i ) = ru_time_lapser then
68485: LD_VAR 0 4
68489: PPUSH
68490: CALL_OW 264
68494: PUSH
68495: LD_INT 49
68497: EQUAL
68498: IFFALSE 68526
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68500: LD_VAR 0 4
68504: PPUSH
68505: LD_VAR 0 6
68509: PPUSH
68510: LD_VAR 0 4
68514: PPUSH
68515: CALL_OW 74
68519: PPUSH
68520: CALL_OW 112
68524: GO 68550
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68526: LD_VAR 0 4
68530: PPUSH
68531: LD_VAR 0 6
68535: PPUSH
68536: LD_VAR 0 4
68540: PPUSH
68541: CALL_OW 74
68545: PPUSH
68546: CALL_OW 115
// end else
68550: GO 68652
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68552: LD_VAR 0 4
68556: PPUSH
68557: LD_VAR 0 2
68561: PUSH
68562: LD_VAR 0 9
68566: ARRAY
68567: PUSH
68568: LD_INT 1
68570: ARRAY
68571: PPUSH
68572: LD_VAR 0 2
68576: PUSH
68577: LD_VAR 0 9
68581: ARRAY
68582: PUSH
68583: LD_INT 2
68585: ARRAY
68586: PPUSH
68587: CALL_OW 297
68591: PUSH
68592: LD_INT 6
68594: GREATER
68595: IFFALSE 68638
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68597: LD_VAR 0 4
68601: PPUSH
68602: LD_VAR 0 2
68606: PUSH
68607: LD_VAR 0 9
68611: ARRAY
68612: PUSH
68613: LD_INT 1
68615: ARRAY
68616: PPUSH
68617: LD_VAR 0 2
68621: PUSH
68622: LD_VAR 0 9
68626: ARRAY
68627: PUSH
68628: LD_INT 2
68630: ARRAY
68631: PPUSH
68632: CALL_OW 114
68636: GO 68652
// SetTag ( i , tag ) ;
68638: LD_VAR 0 4
68642: PPUSH
68643: LD_VAR 0 9
68647: PPUSH
68648: CALL_OW 109
// end else
68652: GO 68725
// if enemy then
68654: LD_VAR 0 5
68658: IFFALSE 68725
// begin if GetWeapon ( i ) = ru_time_lapser then
68660: LD_VAR 0 4
68664: PPUSH
68665: CALL_OW 264
68669: PUSH
68670: LD_INT 49
68672: EQUAL
68673: IFFALSE 68701
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68675: LD_VAR 0 4
68679: PPUSH
68680: LD_VAR 0 5
68684: PPUSH
68685: LD_VAR 0 4
68689: PPUSH
68690: CALL_OW 74
68694: PPUSH
68695: CALL_OW 112
68699: GO 68725
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68701: LD_VAR 0 4
68705: PPUSH
68706: LD_VAR 0 5
68710: PPUSH
68711: LD_VAR 0 4
68715: PPUSH
68716: CALL_OW 74
68720: PPUSH
68721: CALL_OW 115
// end ; end ;
68725: GO 68305
68727: POP
68728: POP
// end ;
68729: LD_VAR 0 3
68733: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68734: LD_INT 0
68736: PPUSH
68737: PPUSH
68738: PPUSH
// if not unit or IsInUnit ( unit ) then
68739: LD_VAR 0 1
68743: NOT
68744: PUSH
68745: LD_VAR 0 1
68749: PPUSH
68750: CALL_OW 310
68754: OR
68755: IFFALSE 68759
// exit ;
68757: GO 68850
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68759: LD_ADDR_VAR 0 4
68763: PUSH
68764: LD_VAR 0 1
68768: PPUSH
68769: CALL_OW 250
68773: PPUSH
68774: LD_VAR 0 2
68778: PPUSH
68779: LD_INT 1
68781: PPUSH
68782: CALL_OW 272
68786: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68787: LD_ADDR_VAR 0 5
68791: PUSH
68792: LD_VAR 0 1
68796: PPUSH
68797: CALL_OW 251
68801: PPUSH
68802: LD_VAR 0 2
68806: PPUSH
68807: LD_INT 1
68809: PPUSH
68810: CALL_OW 273
68814: ST_TO_ADDR
// if ValidHex ( x , y ) then
68815: LD_VAR 0 4
68819: PPUSH
68820: LD_VAR 0 5
68824: PPUSH
68825: CALL_OW 488
68829: IFFALSE 68850
// ComTurnXY ( unit , x , y ) ;
68831: LD_VAR 0 1
68835: PPUSH
68836: LD_VAR 0 4
68840: PPUSH
68841: LD_VAR 0 5
68845: PPUSH
68846: CALL_OW 118
// end ;
68850: LD_VAR 0 3
68854: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68855: LD_INT 0
68857: PPUSH
68858: PPUSH
// result := false ;
68859: LD_ADDR_VAR 0 3
68863: PUSH
68864: LD_INT 0
68866: ST_TO_ADDR
// if not units then
68867: LD_VAR 0 2
68871: NOT
68872: IFFALSE 68876
// exit ;
68874: GO 68921
// for i in units do
68876: LD_ADDR_VAR 0 4
68880: PUSH
68881: LD_VAR 0 2
68885: PUSH
68886: FOR_IN
68887: IFFALSE 68919
// if See ( side , i ) then
68889: LD_VAR 0 1
68893: PPUSH
68894: LD_VAR 0 4
68898: PPUSH
68899: CALL_OW 292
68903: IFFALSE 68917
// begin result := true ;
68905: LD_ADDR_VAR 0 3
68909: PUSH
68910: LD_INT 1
68912: ST_TO_ADDR
// exit ;
68913: POP
68914: POP
68915: GO 68921
// end ;
68917: GO 68886
68919: POP
68920: POP
// end ;
68921: LD_VAR 0 3
68925: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68926: LD_INT 0
68928: PPUSH
68929: PPUSH
68930: PPUSH
68931: PPUSH
// if not unit or not points then
68932: LD_VAR 0 1
68936: NOT
68937: PUSH
68938: LD_VAR 0 2
68942: NOT
68943: OR
68944: IFFALSE 68948
// exit ;
68946: GO 69038
// dist := 99999 ;
68948: LD_ADDR_VAR 0 5
68952: PUSH
68953: LD_INT 99999
68955: ST_TO_ADDR
// for i in points do
68956: LD_ADDR_VAR 0 4
68960: PUSH
68961: LD_VAR 0 2
68965: PUSH
68966: FOR_IN
68967: IFFALSE 69036
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68969: LD_ADDR_VAR 0 6
68973: PUSH
68974: LD_VAR 0 1
68978: PPUSH
68979: LD_VAR 0 4
68983: PUSH
68984: LD_INT 1
68986: ARRAY
68987: PPUSH
68988: LD_VAR 0 4
68992: PUSH
68993: LD_INT 2
68995: ARRAY
68996: PPUSH
68997: CALL_OW 297
69001: ST_TO_ADDR
// if tmpDist < dist then
69002: LD_VAR 0 6
69006: PUSH
69007: LD_VAR 0 5
69011: LESS
69012: IFFALSE 69034
// begin result := i ;
69014: LD_ADDR_VAR 0 3
69018: PUSH
69019: LD_VAR 0 4
69023: ST_TO_ADDR
// dist := tmpDist ;
69024: LD_ADDR_VAR 0 5
69028: PUSH
69029: LD_VAR 0 6
69033: ST_TO_ADDR
// end ; end ;
69034: GO 68966
69036: POP
69037: POP
// end ;
69038: LD_VAR 0 3
69042: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69043: LD_INT 0
69045: PPUSH
// uc_side := side ;
69046: LD_ADDR_OWVAR 20
69050: PUSH
69051: LD_VAR 0 1
69055: ST_TO_ADDR
// uc_nation := 3 ;
69056: LD_ADDR_OWVAR 21
69060: PUSH
69061: LD_INT 3
69063: ST_TO_ADDR
// vc_chassis := 25 ;
69064: LD_ADDR_OWVAR 37
69068: PUSH
69069: LD_INT 25
69071: ST_TO_ADDR
// vc_engine := engine_siberite ;
69072: LD_ADDR_OWVAR 39
69076: PUSH
69077: LD_INT 3
69079: ST_TO_ADDR
// vc_control := control_computer ;
69080: LD_ADDR_OWVAR 38
69084: PUSH
69085: LD_INT 3
69087: ST_TO_ADDR
// vc_weapon := 59 ;
69088: LD_ADDR_OWVAR 40
69092: PUSH
69093: LD_INT 59
69095: ST_TO_ADDR
// result := CreateVehicle ;
69096: LD_ADDR_VAR 0 5
69100: PUSH
69101: CALL_OW 45
69105: ST_TO_ADDR
// SetDir ( result , d ) ;
69106: LD_VAR 0 5
69110: PPUSH
69111: LD_VAR 0 4
69115: PPUSH
69116: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69120: LD_VAR 0 5
69124: PPUSH
69125: LD_VAR 0 2
69129: PPUSH
69130: LD_VAR 0 3
69134: PPUSH
69135: LD_INT 0
69137: PPUSH
69138: CALL_OW 48
// end ;
69142: LD_VAR 0 5
69146: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69147: LD_INT 0
69149: PPUSH
69150: PPUSH
69151: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69152: LD_ADDR_VAR 0 2
69156: PUSH
69157: LD_INT 0
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: LD_INT 0
69165: PUSH
69166: LD_INT 0
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69175: LD_VAR 0 1
69179: NOT
69180: PUSH
69181: LD_VAR 0 1
69185: PPUSH
69186: CALL_OW 264
69190: PUSH
69191: LD_INT 12
69193: PUSH
69194: LD_INT 51
69196: PUSH
69197: LD_INT 32
69199: PUSH
69200: LD_INT 89
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: IN
69209: NOT
69210: OR
69211: IFFALSE 69215
// exit ;
69213: GO 69313
// for i := 1 to 3 do
69215: LD_ADDR_VAR 0 3
69219: PUSH
69220: DOUBLE
69221: LD_INT 1
69223: DEC
69224: ST_TO_ADDR
69225: LD_INT 3
69227: PUSH
69228: FOR_TO
69229: IFFALSE 69311
// begin tmp := GetCargo ( cargo , i ) ;
69231: LD_ADDR_VAR 0 4
69235: PUSH
69236: LD_VAR 0 1
69240: PPUSH
69241: LD_VAR 0 3
69245: PPUSH
69246: CALL_OW 289
69250: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69251: LD_ADDR_VAR 0 2
69255: PUSH
69256: LD_VAR 0 2
69260: PPUSH
69261: LD_VAR 0 3
69265: PPUSH
69266: LD_VAR 0 4
69270: PPUSH
69271: CALL_OW 1
69275: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69276: LD_ADDR_VAR 0 2
69280: PUSH
69281: LD_VAR 0 2
69285: PPUSH
69286: LD_INT 4
69288: PPUSH
69289: LD_VAR 0 2
69293: PUSH
69294: LD_INT 4
69296: ARRAY
69297: PUSH
69298: LD_VAR 0 4
69302: PLUS
69303: PPUSH
69304: CALL_OW 1
69308: ST_TO_ADDR
// end ;
69309: GO 69228
69311: POP
69312: POP
// end ;
69313: LD_VAR 0 2
69317: RET
// export function Length ( array ) ; begin
69318: LD_INT 0
69320: PPUSH
// result := array + 0 ;
69321: LD_ADDR_VAR 0 2
69325: PUSH
69326: LD_VAR 0 1
69330: PUSH
69331: LD_INT 0
69333: PLUS
69334: ST_TO_ADDR
// end ;
69335: LD_VAR 0 2
69339: RET
// export function PrepareArray ( array ) ; begin
69340: LD_INT 0
69342: PPUSH
// result := array diff 0 ;
69343: LD_ADDR_VAR 0 2
69347: PUSH
69348: LD_VAR 0 1
69352: PUSH
69353: LD_INT 0
69355: DIFF
69356: ST_TO_ADDR
// if not result [ 1 ] then
69357: LD_VAR 0 2
69361: PUSH
69362: LD_INT 1
69364: ARRAY
69365: NOT
69366: IFFALSE 69386
// result := Delete ( result , 1 ) ;
69368: LD_ADDR_VAR 0 2
69372: PUSH
69373: LD_VAR 0 2
69377: PPUSH
69378: LD_INT 1
69380: PPUSH
69381: CALL_OW 3
69385: ST_TO_ADDR
// end ;
69386: LD_VAR 0 2
69390: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69391: LD_INT 0
69393: PPUSH
69394: PPUSH
69395: PPUSH
69396: PPUSH
// sibRocketRange := 25 ;
69397: LD_ADDR_VAR 0 6
69401: PUSH
69402: LD_INT 25
69404: ST_TO_ADDR
// result := false ;
69405: LD_ADDR_VAR 0 4
69409: PUSH
69410: LD_INT 0
69412: ST_TO_ADDR
// for i := 0 to 5 do
69413: LD_ADDR_VAR 0 5
69417: PUSH
69418: DOUBLE
69419: LD_INT 0
69421: DEC
69422: ST_TO_ADDR
69423: LD_INT 5
69425: PUSH
69426: FOR_TO
69427: IFFALSE 69494
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69429: LD_VAR 0 1
69433: PPUSH
69434: LD_VAR 0 5
69438: PPUSH
69439: LD_VAR 0 6
69443: PPUSH
69444: CALL_OW 272
69448: PPUSH
69449: LD_VAR 0 2
69453: PPUSH
69454: LD_VAR 0 5
69458: PPUSH
69459: LD_VAR 0 6
69463: PPUSH
69464: CALL_OW 273
69468: PPUSH
69469: LD_VAR 0 3
69473: PPUSH
69474: CALL_OW 309
69478: IFFALSE 69492
// begin result := true ;
69480: LD_ADDR_VAR 0 4
69484: PUSH
69485: LD_INT 1
69487: ST_TO_ADDR
// exit ;
69488: POP
69489: POP
69490: GO 69496
// end ;
69492: GO 69426
69494: POP
69495: POP
// end ;
69496: LD_VAR 0 4
69500: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69501: LD_INT 0
69503: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69504: LD_VAR 0 1
69508: PPUSH
69509: LD_VAR 0 2
69513: PPUSH
69514: LD_INT 0
69516: PPUSH
69517: LD_INT 0
69519: PPUSH
69520: LD_INT 1
69522: PPUSH
69523: LD_INT 0
69525: PPUSH
69526: CALL_OW 587
// end ; end_of_file
69530: LD_VAR 0 3
69534: RET
// export globalGameSaveCounter ; every 0 0$1 do
69535: GO 69537
69537: DISABLE
// begin enable ;
69538: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
69539: LD_STRING updateTimer(
69541: PUSH
69542: LD_OWVAR 1
69546: STR
69547: PUSH
69548: LD_STRING );
69550: STR
69551: PPUSH
69552: CALL_OW 559
// end ;
69556: END
// every 0 0$1 do
69557: GO 69559
69559: DISABLE
// begin globalGameSaveCounter := 0 ;
69560: LD_ADDR_EXP 71
69564: PUSH
69565: LD_INT 0
69567: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
69568: LD_STRING setGameSaveCounter(0)
69570: PPUSH
69571: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
69575: LD_STRING initStreamRollete();
69577: PPUSH
69578: CALL_OW 559
// InitStreamMode ;
69582: CALL 70908 0 0
// DefineStreamItems ( false ) ;
69586: LD_INT 0
69588: PPUSH
69589: CALL 71372 0 1
// end ;
69593: END
// export function SOS_MapStart ( ) ; begin
69594: LD_INT 0
69596: PPUSH
// if streamModeActive then
69597: LD_EXP 72
69601: IFFALSE 69610
// DefineStreamItems ( true ) ;
69603: LD_INT 1
69605: PPUSH
69606: CALL 71372 0 1
// UpdateLuaVariables ( ) ;
69610: CALL 69627 0 0
// UpdateFactoryWaypoints ( ) ;
69614: CALL 84233 0 0
// UpdateWarehouseGatheringPoints ( ) ;
69618: CALL 84490 0 0
// end ;
69622: LD_VAR 0 1
69626: RET
// function UpdateLuaVariables ( ) ; begin
69627: LD_INT 0
69629: PPUSH
// if globalGameSaveCounter then
69630: LD_EXP 71
69634: IFFALSE 69668
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
69636: LD_ADDR_EXP 71
69640: PUSH
69641: LD_EXP 71
69645: PPUSH
69646: CALL 66943 0 1
69650: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
69651: LD_STRING setGameSaveCounter(
69653: PUSH
69654: LD_EXP 71
69658: STR
69659: PUSH
69660: LD_STRING )
69662: STR
69663: PPUSH
69664: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
69668: LD_STRING setGameDifficulty(
69670: PUSH
69671: LD_OWVAR 67
69675: STR
69676: PUSH
69677: LD_STRING )
69679: STR
69680: PPUSH
69681: CALL_OW 559
// end ;
69685: LD_VAR 0 1
69689: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69690: LD_INT 0
69692: PPUSH
// if p2 = stream_mode then
69693: LD_VAR 0 2
69697: PUSH
69698: LD_INT 100
69700: EQUAL
69701: IFFALSE 70704
// begin if not StreamModeActive then
69703: LD_EXP 72
69707: NOT
69708: IFFALSE 69718
// StreamModeActive := true ;
69710: LD_ADDR_EXP 72
69714: PUSH
69715: LD_INT 1
69717: ST_TO_ADDR
// if p3 = 0 then
69718: LD_VAR 0 3
69722: PUSH
69723: LD_INT 0
69725: EQUAL
69726: IFFALSE 69732
// InitStreamMode ;
69728: CALL 70908 0 0
// if p3 = 1 then
69732: LD_VAR 0 3
69736: PUSH
69737: LD_INT 1
69739: EQUAL
69740: IFFALSE 69750
// sRocket := true ;
69742: LD_ADDR_EXP 77
69746: PUSH
69747: LD_INT 1
69749: ST_TO_ADDR
// if p3 = 2 then
69750: LD_VAR 0 3
69754: PUSH
69755: LD_INT 2
69757: EQUAL
69758: IFFALSE 69768
// sSpeed := true ;
69760: LD_ADDR_EXP 76
69764: PUSH
69765: LD_INT 1
69767: ST_TO_ADDR
// if p3 = 3 then
69768: LD_VAR 0 3
69772: PUSH
69773: LD_INT 3
69775: EQUAL
69776: IFFALSE 69786
// sEngine := true ;
69778: LD_ADDR_EXP 78
69782: PUSH
69783: LD_INT 1
69785: ST_TO_ADDR
// if p3 = 4 then
69786: LD_VAR 0 3
69790: PUSH
69791: LD_INT 4
69793: EQUAL
69794: IFFALSE 69804
// sSpec := true ;
69796: LD_ADDR_EXP 75
69800: PUSH
69801: LD_INT 1
69803: ST_TO_ADDR
// if p3 = 5 then
69804: LD_VAR 0 3
69808: PUSH
69809: LD_INT 5
69811: EQUAL
69812: IFFALSE 69822
// sLevel := true ;
69814: LD_ADDR_EXP 79
69818: PUSH
69819: LD_INT 1
69821: ST_TO_ADDR
// if p3 = 6 then
69822: LD_VAR 0 3
69826: PUSH
69827: LD_INT 6
69829: EQUAL
69830: IFFALSE 69840
// sArmoury := true ;
69832: LD_ADDR_EXP 80
69836: PUSH
69837: LD_INT 1
69839: ST_TO_ADDR
// if p3 = 7 then
69840: LD_VAR 0 3
69844: PUSH
69845: LD_INT 7
69847: EQUAL
69848: IFFALSE 69858
// sRadar := true ;
69850: LD_ADDR_EXP 81
69854: PUSH
69855: LD_INT 1
69857: ST_TO_ADDR
// if p3 = 8 then
69858: LD_VAR 0 3
69862: PUSH
69863: LD_INT 8
69865: EQUAL
69866: IFFALSE 69876
// sBunker := true ;
69868: LD_ADDR_EXP 82
69872: PUSH
69873: LD_INT 1
69875: ST_TO_ADDR
// if p3 = 9 then
69876: LD_VAR 0 3
69880: PUSH
69881: LD_INT 9
69883: EQUAL
69884: IFFALSE 69894
// sHack := true ;
69886: LD_ADDR_EXP 83
69890: PUSH
69891: LD_INT 1
69893: ST_TO_ADDR
// if p3 = 10 then
69894: LD_VAR 0 3
69898: PUSH
69899: LD_INT 10
69901: EQUAL
69902: IFFALSE 69912
// sFire := true ;
69904: LD_ADDR_EXP 84
69908: PUSH
69909: LD_INT 1
69911: ST_TO_ADDR
// if p3 = 11 then
69912: LD_VAR 0 3
69916: PUSH
69917: LD_INT 11
69919: EQUAL
69920: IFFALSE 69930
// sRefresh := true ;
69922: LD_ADDR_EXP 85
69926: PUSH
69927: LD_INT 1
69929: ST_TO_ADDR
// if p3 = 12 then
69930: LD_VAR 0 3
69934: PUSH
69935: LD_INT 12
69937: EQUAL
69938: IFFALSE 69948
// sExp := true ;
69940: LD_ADDR_EXP 86
69944: PUSH
69945: LD_INT 1
69947: ST_TO_ADDR
// if p3 = 13 then
69948: LD_VAR 0 3
69952: PUSH
69953: LD_INT 13
69955: EQUAL
69956: IFFALSE 69966
// sDepot := true ;
69958: LD_ADDR_EXP 87
69962: PUSH
69963: LD_INT 1
69965: ST_TO_ADDR
// if p3 = 14 then
69966: LD_VAR 0 3
69970: PUSH
69971: LD_INT 14
69973: EQUAL
69974: IFFALSE 69984
// sFlag := true ;
69976: LD_ADDR_EXP 88
69980: PUSH
69981: LD_INT 1
69983: ST_TO_ADDR
// if p3 = 15 then
69984: LD_VAR 0 3
69988: PUSH
69989: LD_INT 15
69991: EQUAL
69992: IFFALSE 70002
// sKamikadze := true ;
69994: LD_ADDR_EXP 96
69998: PUSH
69999: LD_INT 1
70001: ST_TO_ADDR
// if p3 = 16 then
70002: LD_VAR 0 3
70006: PUSH
70007: LD_INT 16
70009: EQUAL
70010: IFFALSE 70020
// sTroll := true ;
70012: LD_ADDR_EXP 97
70016: PUSH
70017: LD_INT 1
70019: ST_TO_ADDR
// if p3 = 17 then
70020: LD_VAR 0 3
70024: PUSH
70025: LD_INT 17
70027: EQUAL
70028: IFFALSE 70038
// sSlow := true ;
70030: LD_ADDR_EXP 98
70034: PUSH
70035: LD_INT 1
70037: ST_TO_ADDR
// if p3 = 18 then
70038: LD_VAR 0 3
70042: PUSH
70043: LD_INT 18
70045: EQUAL
70046: IFFALSE 70056
// sLack := true ;
70048: LD_ADDR_EXP 99
70052: PUSH
70053: LD_INT 1
70055: ST_TO_ADDR
// if p3 = 19 then
70056: LD_VAR 0 3
70060: PUSH
70061: LD_INT 19
70063: EQUAL
70064: IFFALSE 70074
// sTank := true ;
70066: LD_ADDR_EXP 101
70070: PUSH
70071: LD_INT 1
70073: ST_TO_ADDR
// if p3 = 20 then
70074: LD_VAR 0 3
70078: PUSH
70079: LD_INT 20
70081: EQUAL
70082: IFFALSE 70092
// sRemote := true ;
70084: LD_ADDR_EXP 102
70088: PUSH
70089: LD_INT 1
70091: ST_TO_ADDR
// if p3 = 21 then
70092: LD_VAR 0 3
70096: PUSH
70097: LD_INT 21
70099: EQUAL
70100: IFFALSE 70110
// sPowell := true ;
70102: LD_ADDR_EXP 103
70106: PUSH
70107: LD_INT 1
70109: ST_TO_ADDR
// if p3 = 22 then
70110: LD_VAR 0 3
70114: PUSH
70115: LD_INT 22
70117: EQUAL
70118: IFFALSE 70128
// sTeleport := true ;
70120: LD_ADDR_EXP 106
70124: PUSH
70125: LD_INT 1
70127: ST_TO_ADDR
// if p3 = 23 then
70128: LD_VAR 0 3
70132: PUSH
70133: LD_INT 23
70135: EQUAL
70136: IFFALSE 70146
// sOilTower := true ;
70138: LD_ADDR_EXP 108
70142: PUSH
70143: LD_INT 1
70145: ST_TO_ADDR
// if p3 = 24 then
70146: LD_VAR 0 3
70150: PUSH
70151: LD_INT 24
70153: EQUAL
70154: IFFALSE 70164
// sShovel := true ;
70156: LD_ADDR_EXP 109
70160: PUSH
70161: LD_INT 1
70163: ST_TO_ADDR
// if p3 = 25 then
70164: LD_VAR 0 3
70168: PUSH
70169: LD_INT 25
70171: EQUAL
70172: IFFALSE 70182
// sSheik := true ;
70174: LD_ADDR_EXP 110
70178: PUSH
70179: LD_INT 1
70181: ST_TO_ADDR
// if p3 = 26 then
70182: LD_VAR 0 3
70186: PUSH
70187: LD_INT 26
70189: EQUAL
70190: IFFALSE 70200
// sEarthquake := true ;
70192: LD_ADDR_EXP 112
70196: PUSH
70197: LD_INT 1
70199: ST_TO_ADDR
// if p3 = 27 then
70200: LD_VAR 0 3
70204: PUSH
70205: LD_INT 27
70207: EQUAL
70208: IFFALSE 70218
// sAI := true ;
70210: LD_ADDR_EXP 113
70214: PUSH
70215: LD_INT 1
70217: ST_TO_ADDR
// if p3 = 28 then
70218: LD_VAR 0 3
70222: PUSH
70223: LD_INT 28
70225: EQUAL
70226: IFFALSE 70236
// sCargo := true ;
70228: LD_ADDR_EXP 116
70232: PUSH
70233: LD_INT 1
70235: ST_TO_ADDR
// if p3 = 29 then
70236: LD_VAR 0 3
70240: PUSH
70241: LD_INT 29
70243: EQUAL
70244: IFFALSE 70254
// sDLaser := true ;
70246: LD_ADDR_EXP 117
70250: PUSH
70251: LD_INT 1
70253: ST_TO_ADDR
// if p3 = 30 then
70254: LD_VAR 0 3
70258: PUSH
70259: LD_INT 30
70261: EQUAL
70262: IFFALSE 70272
// sExchange := true ;
70264: LD_ADDR_EXP 118
70268: PUSH
70269: LD_INT 1
70271: ST_TO_ADDR
// if p3 = 31 then
70272: LD_VAR 0 3
70276: PUSH
70277: LD_INT 31
70279: EQUAL
70280: IFFALSE 70290
// sFac := true ;
70282: LD_ADDR_EXP 119
70286: PUSH
70287: LD_INT 1
70289: ST_TO_ADDR
// if p3 = 32 then
70290: LD_VAR 0 3
70294: PUSH
70295: LD_INT 32
70297: EQUAL
70298: IFFALSE 70308
// sPower := true ;
70300: LD_ADDR_EXP 120
70304: PUSH
70305: LD_INT 1
70307: ST_TO_ADDR
// if p3 = 33 then
70308: LD_VAR 0 3
70312: PUSH
70313: LD_INT 33
70315: EQUAL
70316: IFFALSE 70326
// sRandom := true ;
70318: LD_ADDR_EXP 121
70322: PUSH
70323: LD_INT 1
70325: ST_TO_ADDR
// if p3 = 34 then
70326: LD_VAR 0 3
70330: PUSH
70331: LD_INT 34
70333: EQUAL
70334: IFFALSE 70344
// sShield := true ;
70336: LD_ADDR_EXP 122
70340: PUSH
70341: LD_INT 1
70343: ST_TO_ADDR
// if p3 = 35 then
70344: LD_VAR 0 3
70348: PUSH
70349: LD_INT 35
70351: EQUAL
70352: IFFALSE 70362
// sTime := true ;
70354: LD_ADDR_EXP 123
70358: PUSH
70359: LD_INT 1
70361: ST_TO_ADDR
// if p3 = 36 then
70362: LD_VAR 0 3
70366: PUSH
70367: LD_INT 36
70369: EQUAL
70370: IFFALSE 70380
// sTools := true ;
70372: LD_ADDR_EXP 124
70376: PUSH
70377: LD_INT 1
70379: ST_TO_ADDR
// if p3 = 101 then
70380: LD_VAR 0 3
70384: PUSH
70385: LD_INT 101
70387: EQUAL
70388: IFFALSE 70398
// sSold := true ;
70390: LD_ADDR_EXP 89
70394: PUSH
70395: LD_INT 1
70397: ST_TO_ADDR
// if p3 = 102 then
70398: LD_VAR 0 3
70402: PUSH
70403: LD_INT 102
70405: EQUAL
70406: IFFALSE 70416
// sDiff := true ;
70408: LD_ADDR_EXP 90
70412: PUSH
70413: LD_INT 1
70415: ST_TO_ADDR
// if p3 = 103 then
70416: LD_VAR 0 3
70420: PUSH
70421: LD_INT 103
70423: EQUAL
70424: IFFALSE 70434
// sFog := true ;
70426: LD_ADDR_EXP 93
70430: PUSH
70431: LD_INT 1
70433: ST_TO_ADDR
// if p3 = 104 then
70434: LD_VAR 0 3
70438: PUSH
70439: LD_INT 104
70441: EQUAL
70442: IFFALSE 70452
// sReset := true ;
70444: LD_ADDR_EXP 94
70448: PUSH
70449: LD_INT 1
70451: ST_TO_ADDR
// if p3 = 105 then
70452: LD_VAR 0 3
70456: PUSH
70457: LD_INT 105
70459: EQUAL
70460: IFFALSE 70470
// sSun := true ;
70462: LD_ADDR_EXP 95
70466: PUSH
70467: LD_INT 1
70469: ST_TO_ADDR
// if p3 = 106 then
70470: LD_VAR 0 3
70474: PUSH
70475: LD_INT 106
70477: EQUAL
70478: IFFALSE 70488
// sTiger := true ;
70480: LD_ADDR_EXP 91
70484: PUSH
70485: LD_INT 1
70487: ST_TO_ADDR
// if p3 = 107 then
70488: LD_VAR 0 3
70492: PUSH
70493: LD_INT 107
70495: EQUAL
70496: IFFALSE 70506
// sBomb := true ;
70498: LD_ADDR_EXP 92
70502: PUSH
70503: LD_INT 1
70505: ST_TO_ADDR
// if p3 = 108 then
70506: LD_VAR 0 3
70510: PUSH
70511: LD_INT 108
70513: EQUAL
70514: IFFALSE 70524
// sWound := true ;
70516: LD_ADDR_EXP 100
70520: PUSH
70521: LD_INT 1
70523: ST_TO_ADDR
// if p3 = 109 then
70524: LD_VAR 0 3
70528: PUSH
70529: LD_INT 109
70531: EQUAL
70532: IFFALSE 70542
// sBetray := true ;
70534: LD_ADDR_EXP 104
70538: PUSH
70539: LD_INT 1
70541: ST_TO_ADDR
// if p3 = 110 then
70542: LD_VAR 0 3
70546: PUSH
70547: LD_INT 110
70549: EQUAL
70550: IFFALSE 70560
// sContamin := true ;
70552: LD_ADDR_EXP 105
70556: PUSH
70557: LD_INT 1
70559: ST_TO_ADDR
// if p3 = 111 then
70560: LD_VAR 0 3
70564: PUSH
70565: LD_INT 111
70567: EQUAL
70568: IFFALSE 70578
// sOil := true ;
70570: LD_ADDR_EXP 107
70574: PUSH
70575: LD_INT 1
70577: ST_TO_ADDR
// if p3 = 112 then
70578: LD_VAR 0 3
70582: PUSH
70583: LD_INT 112
70585: EQUAL
70586: IFFALSE 70596
// sStu := true ;
70588: LD_ADDR_EXP 111
70592: PUSH
70593: LD_INT 1
70595: ST_TO_ADDR
// if p3 = 113 then
70596: LD_VAR 0 3
70600: PUSH
70601: LD_INT 113
70603: EQUAL
70604: IFFALSE 70614
// sBazooka := true ;
70606: LD_ADDR_EXP 114
70610: PUSH
70611: LD_INT 1
70613: ST_TO_ADDR
// if p3 = 114 then
70614: LD_VAR 0 3
70618: PUSH
70619: LD_INT 114
70621: EQUAL
70622: IFFALSE 70632
// sMortar := true ;
70624: LD_ADDR_EXP 115
70628: PUSH
70629: LD_INT 1
70631: ST_TO_ADDR
// if p3 = 115 then
70632: LD_VAR 0 3
70636: PUSH
70637: LD_INT 115
70639: EQUAL
70640: IFFALSE 70650
// sRanger := true ;
70642: LD_ADDR_EXP 125
70646: PUSH
70647: LD_INT 1
70649: ST_TO_ADDR
// if p3 = 116 then
70650: LD_VAR 0 3
70654: PUSH
70655: LD_INT 116
70657: EQUAL
70658: IFFALSE 70668
// sComputer := true ;
70660: LD_ADDR_EXP 126
70664: PUSH
70665: LD_INT 1
70667: ST_TO_ADDR
// if p3 = 117 then
70668: LD_VAR 0 3
70672: PUSH
70673: LD_INT 117
70675: EQUAL
70676: IFFALSE 70686
// s30 := true ;
70678: LD_ADDR_EXP 127
70682: PUSH
70683: LD_INT 1
70685: ST_TO_ADDR
// if p3 = 118 then
70686: LD_VAR 0 3
70690: PUSH
70691: LD_INT 118
70693: EQUAL
70694: IFFALSE 70704
// s60 := true ;
70696: LD_ADDR_EXP 128
70700: PUSH
70701: LD_INT 1
70703: ST_TO_ADDR
// end ; if p2 = hack_mode then
70704: LD_VAR 0 2
70708: PUSH
70709: LD_INT 101
70711: EQUAL
70712: IFFALSE 70840
// begin case p3 of 1 :
70714: LD_VAR 0 3
70718: PUSH
70719: LD_INT 1
70721: DOUBLE
70722: EQUAL
70723: IFTRUE 70727
70725: GO 70734
70727: POP
// hHackUnlimitedResources ; 2 :
70728: CALL 82979 0 0
70732: GO 70840
70734: LD_INT 2
70736: DOUBLE
70737: EQUAL
70738: IFTRUE 70742
70740: GO 70749
70742: POP
// hHackSetLevel10 ; 3 :
70743: CALL 83112 0 0
70747: GO 70840
70749: LD_INT 3
70751: DOUBLE
70752: EQUAL
70753: IFTRUE 70757
70755: GO 70764
70757: POP
// hHackSetLevel10YourUnits ; 4 :
70758: CALL 83197 0 0
70762: GO 70840
70764: LD_INT 4
70766: DOUBLE
70767: EQUAL
70768: IFTRUE 70772
70770: GO 70779
70772: POP
// hHackInvincible ; 5 :
70773: CALL 83645 0 0
70777: GO 70840
70779: LD_INT 5
70781: DOUBLE
70782: EQUAL
70783: IFTRUE 70787
70785: GO 70794
70787: POP
// hHackInvisible ; 6 :
70788: CALL 83756 0 0
70792: GO 70840
70794: LD_INT 6
70796: DOUBLE
70797: EQUAL
70798: IFTRUE 70802
70800: GO 70809
70802: POP
// hHackChangeYourSide ; 7 :
70803: CALL 83813 0 0
70807: GO 70840
70809: LD_INT 7
70811: DOUBLE
70812: EQUAL
70813: IFTRUE 70817
70815: GO 70824
70817: POP
// hHackChangeUnitSide ; 8 :
70818: CALL 83855 0 0
70822: GO 70840
70824: LD_INT 8
70826: DOUBLE
70827: EQUAL
70828: IFTRUE 70832
70830: GO 70839
70832: POP
// hHackFog ; end ;
70833: CALL 83956 0 0
70837: GO 70840
70839: POP
// end ; if p2 = game_save_mode then
70840: LD_VAR 0 2
70844: PUSH
70845: LD_INT 102
70847: EQUAL
70848: IFFALSE 70903
// begin if p3 = 1 then
70850: LD_VAR 0 3
70854: PUSH
70855: LD_INT 1
70857: EQUAL
70858: IFFALSE 70870
// globalGameSaveCounter := p4 ;
70860: LD_ADDR_EXP 71
70864: PUSH
70865: LD_VAR 0 4
70869: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
70870: LD_VAR 0 3
70874: PUSH
70875: LD_INT 2
70877: EQUAL
70878: PUSH
70879: LD_EXP 71
70883: AND
70884: IFFALSE 70903
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
70886: LD_STRING setGameSaveCounter(
70888: PUSH
70889: LD_EXP 71
70893: STR
70894: PUSH
70895: LD_STRING )
70897: STR
70898: PPUSH
70899: CALL_OW 559
// end ; end ;
70903: LD_VAR 0 7
70907: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
70908: LD_INT 0
70910: PPUSH
// streamModeActive := false ;
70911: LD_ADDR_EXP 72
70915: PUSH
70916: LD_INT 0
70918: ST_TO_ADDR
// normalCounter := 36 ;
70919: LD_ADDR_EXP 73
70923: PUSH
70924: LD_INT 36
70926: ST_TO_ADDR
// hardcoreCounter := 18 ;
70927: LD_ADDR_EXP 74
70931: PUSH
70932: LD_INT 18
70934: ST_TO_ADDR
// sRocket := false ;
70935: LD_ADDR_EXP 77
70939: PUSH
70940: LD_INT 0
70942: ST_TO_ADDR
// sSpeed := false ;
70943: LD_ADDR_EXP 76
70947: PUSH
70948: LD_INT 0
70950: ST_TO_ADDR
// sEngine := false ;
70951: LD_ADDR_EXP 78
70955: PUSH
70956: LD_INT 0
70958: ST_TO_ADDR
// sSpec := false ;
70959: LD_ADDR_EXP 75
70963: PUSH
70964: LD_INT 0
70966: ST_TO_ADDR
// sLevel := false ;
70967: LD_ADDR_EXP 79
70971: PUSH
70972: LD_INT 0
70974: ST_TO_ADDR
// sArmoury := false ;
70975: LD_ADDR_EXP 80
70979: PUSH
70980: LD_INT 0
70982: ST_TO_ADDR
// sRadar := false ;
70983: LD_ADDR_EXP 81
70987: PUSH
70988: LD_INT 0
70990: ST_TO_ADDR
// sBunker := false ;
70991: LD_ADDR_EXP 82
70995: PUSH
70996: LD_INT 0
70998: ST_TO_ADDR
// sHack := false ;
70999: LD_ADDR_EXP 83
71003: PUSH
71004: LD_INT 0
71006: ST_TO_ADDR
// sFire := false ;
71007: LD_ADDR_EXP 84
71011: PUSH
71012: LD_INT 0
71014: ST_TO_ADDR
// sRefresh := false ;
71015: LD_ADDR_EXP 85
71019: PUSH
71020: LD_INT 0
71022: ST_TO_ADDR
// sExp := false ;
71023: LD_ADDR_EXP 86
71027: PUSH
71028: LD_INT 0
71030: ST_TO_ADDR
// sDepot := false ;
71031: LD_ADDR_EXP 87
71035: PUSH
71036: LD_INT 0
71038: ST_TO_ADDR
// sFlag := false ;
71039: LD_ADDR_EXP 88
71043: PUSH
71044: LD_INT 0
71046: ST_TO_ADDR
// sKamikadze := false ;
71047: LD_ADDR_EXP 96
71051: PUSH
71052: LD_INT 0
71054: ST_TO_ADDR
// sTroll := false ;
71055: LD_ADDR_EXP 97
71059: PUSH
71060: LD_INT 0
71062: ST_TO_ADDR
// sSlow := false ;
71063: LD_ADDR_EXP 98
71067: PUSH
71068: LD_INT 0
71070: ST_TO_ADDR
// sLack := false ;
71071: LD_ADDR_EXP 99
71075: PUSH
71076: LD_INT 0
71078: ST_TO_ADDR
// sTank := false ;
71079: LD_ADDR_EXP 101
71083: PUSH
71084: LD_INT 0
71086: ST_TO_ADDR
// sRemote := false ;
71087: LD_ADDR_EXP 102
71091: PUSH
71092: LD_INT 0
71094: ST_TO_ADDR
// sPowell := false ;
71095: LD_ADDR_EXP 103
71099: PUSH
71100: LD_INT 0
71102: ST_TO_ADDR
// sTeleport := false ;
71103: LD_ADDR_EXP 106
71107: PUSH
71108: LD_INT 0
71110: ST_TO_ADDR
// sOilTower := false ;
71111: LD_ADDR_EXP 108
71115: PUSH
71116: LD_INT 0
71118: ST_TO_ADDR
// sShovel := false ;
71119: LD_ADDR_EXP 109
71123: PUSH
71124: LD_INT 0
71126: ST_TO_ADDR
// sSheik := false ;
71127: LD_ADDR_EXP 110
71131: PUSH
71132: LD_INT 0
71134: ST_TO_ADDR
// sEarthquake := false ;
71135: LD_ADDR_EXP 112
71139: PUSH
71140: LD_INT 0
71142: ST_TO_ADDR
// sAI := false ;
71143: LD_ADDR_EXP 113
71147: PUSH
71148: LD_INT 0
71150: ST_TO_ADDR
// sCargo := false ;
71151: LD_ADDR_EXP 116
71155: PUSH
71156: LD_INT 0
71158: ST_TO_ADDR
// sDLaser := false ;
71159: LD_ADDR_EXP 117
71163: PUSH
71164: LD_INT 0
71166: ST_TO_ADDR
// sExchange := false ;
71167: LD_ADDR_EXP 118
71171: PUSH
71172: LD_INT 0
71174: ST_TO_ADDR
// sFac := false ;
71175: LD_ADDR_EXP 119
71179: PUSH
71180: LD_INT 0
71182: ST_TO_ADDR
// sPower := false ;
71183: LD_ADDR_EXP 120
71187: PUSH
71188: LD_INT 0
71190: ST_TO_ADDR
// sRandom := false ;
71191: LD_ADDR_EXP 121
71195: PUSH
71196: LD_INT 0
71198: ST_TO_ADDR
// sShield := false ;
71199: LD_ADDR_EXP 122
71203: PUSH
71204: LD_INT 0
71206: ST_TO_ADDR
// sTime := false ;
71207: LD_ADDR_EXP 123
71211: PUSH
71212: LD_INT 0
71214: ST_TO_ADDR
// sTools := false ;
71215: LD_ADDR_EXP 124
71219: PUSH
71220: LD_INT 0
71222: ST_TO_ADDR
// sSold := false ;
71223: LD_ADDR_EXP 89
71227: PUSH
71228: LD_INT 0
71230: ST_TO_ADDR
// sDiff := false ;
71231: LD_ADDR_EXP 90
71235: PUSH
71236: LD_INT 0
71238: ST_TO_ADDR
// sFog := false ;
71239: LD_ADDR_EXP 93
71243: PUSH
71244: LD_INT 0
71246: ST_TO_ADDR
// sReset := false ;
71247: LD_ADDR_EXP 94
71251: PUSH
71252: LD_INT 0
71254: ST_TO_ADDR
// sSun := false ;
71255: LD_ADDR_EXP 95
71259: PUSH
71260: LD_INT 0
71262: ST_TO_ADDR
// sTiger := false ;
71263: LD_ADDR_EXP 91
71267: PUSH
71268: LD_INT 0
71270: ST_TO_ADDR
// sBomb := false ;
71271: LD_ADDR_EXP 92
71275: PUSH
71276: LD_INT 0
71278: ST_TO_ADDR
// sWound := false ;
71279: LD_ADDR_EXP 100
71283: PUSH
71284: LD_INT 0
71286: ST_TO_ADDR
// sBetray := false ;
71287: LD_ADDR_EXP 104
71291: PUSH
71292: LD_INT 0
71294: ST_TO_ADDR
// sContamin := false ;
71295: LD_ADDR_EXP 105
71299: PUSH
71300: LD_INT 0
71302: ST_TO_ADDR
// sOil := false ;
71303: LD_ADDR_EXP 107
71307: PUSH
71308: LD_INT 0
71310: ST_TO_ADDR
// sStu := false ;
71311: LD_ADDR_EXP 111
71315: PUSH
71316: LD_INT 0
71318: ST_TO_ADDR
// sBazooka := false ;
71319: LD_ADDR_EXP 114
71323: PUSH
71324: LD_INT 0
71326: ST_TO_ADDR
// sMortar := false ;
71327: LD_ADDR_EXP 115
71331: PUSH
71332: LD_INT 0
71334: ST_TO_ADDR
// sRanger := false ;
71335: LD_ADDR_EXP 125
71339: PUSH
71340: LD_INT 0
71342: ST_TO_ADDR
// sComputer := false ;
71343: LD_ADDR_EXP 126
71347: PUSH
71348: LD_INT 0
71350: ST_TO_ADDR
// s30 := false ;
71351: LD_ADDR_EXP 127
71355: PUSH
71356: LD_INT 0
71358: ST_TO_ADDR
// s60 := false ;
71359: LD_ADDR_EXP 128
71363: PUSH
71364: LD_INT 0
71366: ST_TO_ADDR
// end ;
71367: LD_VAR 0 1
71371: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
71372: LD_INT 0
71374: PPUSH
71375: PPUSH
71376: PPUSH
71377: PPUSH
71378: PPUSH
71379: PPUSH
71380: PPUSH
// result := [ ] ;
71381: LD_ADDR_VAR 0 2
71385: PUSH
71386: EMPTY
71387: ST_TO_ADDR
// if campaign_id = 1 then
71388: LD_OWVAR 69
71392: PUSH
71393: LD_INT 1
71395: EQUAL
71396: IFFALSE 74562
// begin case mission_number of 1 :
71398: LD_OWVAR 70
71402: PUSH
71403: LD_INT 1
71405: DOUBLE
71406: EQUAL
71407: IFTRUE 71411
71409: GO 71487
71411: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
71412: LD_ADDR_VAR 0 2
71416: PUSH
71417: LD_INT 2
71419: PUSH
71420: LD_INT 4
71422: PUSH
71423: LD_INT 11
71425: PUSH
71426: LD_INT 12
71428: PUSH
71429: LD_INT 15
71431: PUSH
71432: LD_INT 16
71434: PUSH
71435: LD_INT 22
71437: PUSH
71438: LD_INT 23
71440: PUSH
71441: LD_INT 26
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 101
71457: PUSH
71458: LD_INT 102
71460: PUSH
71461: LD_INT 106
71463: PUSH
71464: LD_INT 116
71466: PUSH
71467: LD_INT 117
71469: PUSH
71470: LD_INT 118
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: ST_TO_ADDR
71485: GO 74560
71487: LD_INT 2
71489: DOUBLE
71490: EQUAL
71491: IFTRUE 71495
71493: GO 71579
71495: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
71496: LD_ADDR_VAR 0 2
71500: PUSH
71501: LD_INT 2
71503: PUSH
71504: LD_INT 4
71506: PUSH
71507: LD_INT 11
71509: PUSH
71510: LD_INT 12
71512: PUSH
71513: LD_INT 15
71515: PUSH
71516: LD_INT 16
71518: PUSH
71519: LD_INT 22
71521: PUSH
71522: LD_INT 23
71524: PUSH
71525: LD_INT 26
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 101
71541: PUSH
71542: LD_INT 102
71544: PUSH
71545: LD_INT 105
71547: PUSH
71548: LD_INT 106
71550: PUSH
71551: LD_INT 108
71553: PUSH
71554: LD_INT 116
71556: PUSH
71557: LD_INT 117
71559: PUSH
71560: LD_INT 118
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: ST_TO_ADDR
71577: GO 74560
71579: LD_INT 3
71581: DOUBLE
71582: EQUAL
71583: IFTRUE 71587
71585: GO 71675
71587: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
71588: LD_ADDR_VAR 0 2
71592: PUSH
71593: LD_INT 2
71595: PUSH
71596: LD_INT 4
71598: PUSH
71599: LD_INT 5
71601: PUSH
71602: LD_INT 11
71604: PUSH
71605: LD_INT 12
71607: PUSH
71608: LD_INT 15
71610: PUSH
71611: LD_INT 16
71613: PUSH
71614: LD_INT 22
71616: PUSH
71617: LD_INT 26
71619: PUSH
71620: LD_INT 36
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: PUSH
71635: LD_INT 101
71637: PUSH
71638: LD_INT 102
71640: PUSH
71641: LD_INT 105
71643: PUSH
71644: LD_INT 106
71646: PUSH
71647: LD_INT 108
71649: PUSH
71650: LD_INT 116
71652: PUSH
71653: LD_INT 117
71655: PUSH
71656: LD_INT 118
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: ST_TO_ADDR
71673: GO 74560
71675: LD_INT 4
71677: DOUBLE
71678: EQUAL
71679: IFTRUE 71683
71681: GO 71779
71683: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
71684: LD_ADDR_VAR 0 2
71688: PUSH
71689: LD_INT 2
71691: PUSH
71692: LD_INT 4
71694: PUSH
71695: LD_INT 5
71697: PUSH
71698: LD_INT 8
71700: PUSH
71701: LD_INT 11
71703: PUSH
71704: LD_INT 12
71706: PUSH
71707: LD_INT 15
71709: PUSH
71710: LD_INT 16
71712: PUSH
71713: LD_INT 22
71715: PUSH
71716: LD_INT 23
71718: PUSH
71719: LD_INT 26
71721: PUSH
71722: LD_INT 36
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 101
71741: PUSH
71742: LD_INT 102
71744: PUSH
71745: LD_INT 105
71747: PUSH
71748: LD_INT 106
71750: PUSH
71751: LD_INT 108
71753: PUSH
71754: LD_INT 116
71756: PUSH
71757: LD_INT 117
71759: PUSH
71760: LD_INT 118
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: ST_TO_ADDR
71777: GO 74560
71779: LD_INT 5
71781: DOUBLE
71782: EQUAL
71783: IFTRUE 71787
71785: GO 71899
71787: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
71788: LD_ADDR_VAR 0 2
71792: PUSH
71793: LD_INT 2
71795: PUSH
71796: LD_INT 4
71798: PUSH
71799: LD_INT 5
71801: PUSH
71802: LD_INT 6
71804: PUSH
71805: LD_INT 8
71807: PUSH
71808: LD_INT 11
71810: PUSH
71811: LD_INT 12
71813: PUSH
71814: LD_INT 15
71816: PUSH
71817: LD_INT 16
71819: PUSH
71820: LD_INT 22
71822: PUSH
71823: LD_INT 23
71825: PUSH
71826: LD_INT 25
71828: PUSH
71829: LD_INT 26
71831: PUSH
71832: LD_INT 36
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 101
71853: PUSH
71854: LD_INT 102
71856: PUSH
71857: LD_INT 105
71859: PUSH
71860: LD_INT 106
71862: PUSH
71863: LD_INT 108
71865: PUSH
71866: LD_INT 109
71868: PUSH
71869: LD_INT 112
71871: PUSH
71872: LD_INT 116
71874: PUSH
71875: LD_INT 117
71877: PUSH
71878: LD_INT 118
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: ST_TO_ADDR
71897: GO 74560
71899: LD_INT 6
71901: DOUBLE
71902: EQUAL
71903: IFTRUE 71907
71905: GO 72039
71907: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
71908: LD_ADDR_VAR 0 2
71912: PUSH
71913: LD_INT 2
71915: PUSH
71916: LD_INT 4
71918: PUSH
71919: LD_INT 5
71921: PUSH
71922: LD_INT 6
71924: PUSH
71925: LD_INT 8
71927: PUSH
71928: LD_INT 11
71930: PUSH
71931: LD_INT 12
71933: PUSH
71934: LD_INT 15
71936: PUSH
71937: LD_INT 16
71939: PUSH
71940: LD_INT 20
71942: PUSH
71943: LD_INT 21
71945: PUSH
71946: LD_INT 22
71948: PUSH
71949: LD_INT 23
71951: PUSH
71952: LD_INT 25
71954: PUSH
71955: LD_INT 26
71957: PUSH
71958: LD_INT 30
71960: PUSH
71961: LD_INT 31
71963: PUSH
71964: LD_INT 32
71966: PUSH
71967: LD_INT 36
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 101
71993: PUSH
71994: LD_INT 102
71996: PUSH
71997: LD_INT 105
71999: PUSH
72000: LD_INT 106
72002: PUSH
72003: LD_INT 108
72005: PUSH
72006: LD_INT 109
72008: PUSH
72009: LD_INT 112
72011: PUSH
72012: LD_INT 116
72014: PUSH
72015: LD_INT 117
72017: PUSH
72018: LD_INT 118
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: ST_TO_ADDR
72037: GO 74560
72039: LD_INT 7
72041: DOUBLE
72042: EQUAL
72043: IFTRUE 72047
72045: GO 72159
72047: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
72048: LD_ADDR_VAR 0 2
72052: PUSH
72053: LD_INT 2
72055: PUSH
72056: LD_INT 4
72058: PUSH
72059: LD_INT 5
72061: PUSH
72062: LD_INT 7
72064: PUSH
72065: LD_INT 11
72067: PUSH
72068: LD_INT 12
72070: PUSH
72071: LD_INT 15
72073: PUSH
72074: LD_INT 16
72076: PUSH
72077: LD_INT 20
72079: PUSH
72080: LD_INT 21
72082: PUSH
72083: LD_INT 22
72085: PUSH
72086: LD_INT 23
72088: PUSH
72089: LD_INT 25
72091: PUSH
72092: LD_INT 26
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: PUSH
72111: LD_INT 101
72113: PUSH
72114: LD_INT 102
72116: PUSH
72117: LD_INT 103
72119: PUSH
72120: LD_INT 105
72122: PUSH
72123: LD_INT 106
72125: PUSH
72126: LD_INT 108
72128: PUSH
72129: LD_INT 112
72131: PUSH
72132: LD_INT 116
72134: PUSH
72135: LD_INT 117
72137: PUSH
72138: LD_INT 118
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: ST_TO_ADDR
72157: GO 74560
72159: LD_INT 8
72161: DOUBLE
72162: EQUAL
72163: IFTRUE 72167
72165: GO 72307
72167: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
72168: LD_ADDR_VAR 0 2
72172: PUSH
72173: LD_INT 2
72175: PUSH
72176: LD_INT 4
72178: PUSH
72179: LD_INT 5
72181: PUSH
72182: LD_INT 6
72184: PUSH
72185: LD_INT 7
72187: PUSH
72188: LD_INT 8
72190: PUSH
72191: LD_INT 11
72193: PUSH
72194: LD_INT 12
72196: PUSH
72197: LD_INT 15
72199: PUSH
72200: LD_INT 16
72202: PUSH
72203: LD_INT 20
72205: PUSH
72206: LD_INT 21
72208: PUSH
72209: LD_INT 22
72211: PUSH
72212: LD_INT 23
72214: PUSH
72215: LD_INT 25
72217: PUSH
72218: LD_INT 26
72220: PUSH
72221: LD_INT 30
72223: PUSH
72224: LD_INT 31
72226: PUSH
72227: LD_INT 32
72229: PUSH
72230: LD_INT 36
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 101
72257: PUSH
72258: LD_INT 102
72260: PUSH
72261: LD_INT 103
72263: PUSH
72264: LD_INT 105
72266: PUSH
72267: LD_INT 106
72269: PUSH
72270: LD_INT 108
72272: PUSH
72273: LD_INT 109
72275: PUSH
72276: LD_INT 112
72278: PUSH
72279: LD_INT 116
72281: PUSH
72282: LD_INT 117
72284: PUSH
72285: LD_INT 118
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: ST_TO_ADDR
72305: GO 74560
72307: LD_INT 9
72309: DOUBLE
72310: EQUAL
72311: IFTRUE 72315
72313: GO 72463
72315: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
72316: LD_ADDR_VAR 0 2
72320: PUSH
72321: LD_INT 2
72323: PUSH
72324: LD_INT 4
72326: PUSH
72327: LD_INT 5
72329: PUSH
72330: LD_INT 6
72332: PUSH
72333: LD_INT 7
72335: PUSH
72336: LD_INT 8
72338: PUSH
72339: LD_INT 11
72341: PUSH
72342: LD_INT 12
72344: PUSH
72345: LD_INT 15
72347: PUSH
72348: LD_INT 16
72350: PUSH
72351: LD_INT 20
72353: PUSH
72354: LD_INT 21
72356: PUSH
72357: LD_INT 22
72359: PUSH
72360: LD_INT 23
72362: PUSH
72363: LD_INT 25
72365: PUSH
72366: LD_INT 26
72368: PUSH
72369: LD_INT 28
72371: PUSH
72372: LD_INT 30
72374: PUSH
72375: LD_INT 31
72377: PUSH
72378: LD_INT 32
72380: PUSH
72381: LD_INT 36
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 101
72409: PUSH
72410: LD_INT 102
72412: PUSH
72413: LD_INT 103
72415: PUSH
72416: LD_INT 105
72418: PUSH
72419: LD_INT 106
72421: PUSH
72422: LD_INT 108
72424: PUSH
72425: LD_INT 109
72427: PUSH
72428: LD_INT 112
72430: PUSH
72431: LD_INT 114
72433: PUSH
72434: LD_INT 116
72436: PUSH
72437: LD_INT 117
72439: PUSH
72440: LD_INT 118
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: ST_TO_ADDR
72461: GO 74560
72463: LD_INT 10
72465: DOUBLE
72466: EQUAL
72467: IFTRUE 72471
72469: GO 72667
72471: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
72472: LD_ADDR_VAR 0 2
72476: PUSH
72477: LD_INT 2
72479: PUSH
72480: LD_INT 4
72482: PUSH
72483: LD_INT 5
72485: PUSH
72486: LD_INT 6
72488: PUSH
72489: LD_INT 7
72491: PUSH
72492: LD_INT 8
72494: PUSH
72495: LD_INT 9
72497: PUSH
72498: LD_INT 10
72500: PUSH
72501: LD_INT 11
72503: PUSH
72504: LD_INT 12
72506: PUSH
72507: LD_INT 13
72509: PUSH
72510: LD_INT 14
72512: PUSH
72513: LD_INT 15
72515: PUSH
72516: LD_INT 16
72518: PUSH
72519: LD_INT 17
72521: PUSH
72522: LD_INT 18
72524: PUSH
72525: LD_INT 19
72527: PUSH
72528: LD_INT 20
72530: PUSH
72531: LD_INT 21
72533: PUSH
72534: LD_INT 22
72536: PUSH
72537: LD_INT 23
72539: PUSH
72540: LD_INT 24
72542: PUSH
72543: LD_INT 25
72545: PUSH
72546: LD_INT 26
72548: PUSH
72549: LD_INT 28
72551: PUSH
72552: LD_INT 30
72554: PUSH
72555: LD_INT 31
72557: PUSH
72558: LD_INT 32
72560: PUSH
72561: LD_INT 36
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 101
72597: PUSH
72598: LD_INT 102
72600: PUSH
72601: LD_INT 103
72603: PUSH
72604: LD_INT 104
72606: PUSH
72607: LD_INT 105
72609: PUSH
72610: LD_INT 106
72612: PUSH
72613: LD_INT 107
72615: PUSH
72616: LD_INT 108
72618: PUSH
72619: LD_INT 109
72621: PUSH
72622: LD_INT 110
72624: PUSH
72625: LD_INT 111
72627: PUSH
72628: LD_INT 112
72630: PUSH
72631: LD_INT 114
72633: PUSH
72634: LD_INT 116
72636: PUSH
72637: LD_INT 117
72639: PUSH
72640: LD_INT 118
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: ST_TO_ADDR
72665: GO 74560
72667: LD_INT 11
72669: DOUBLE
72670: EQUAL
72671: IFTRUE 72675
72673: GO 72879
72675: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
72676: LD_ADDR_VAR 0 2
72680: PUSH
72681: LD_INT 2
72683: PUSH
72684: LD_INT 3
72686: PUSH
72687: LD_INT 4
72689: PUSH
72690: LD_INT 5
72692: PUSH
72693: LD_INT 6
72695: PUSH
72696: LD_INT 7
72698: PUSH
72699: LD_INT 8
72701: PUSH
72702: LD_INT 9
72704: PUSH
72705: LD_INT 10
72707: PUSH
72708: LD_INT 11
72710: PUSH
72711: LD_INT 12
72713: PUSH
72714: LD_INT 13
72716: PUSH
72717: LD_INT 14
72719: PUSH
72720: LD_INT 15
72722: PUSH
72723: LD_INT 16
72725: PUSH
72726: LD_INT 17
72728: PUSH
72729: LD_INT 18
72731: PUSH
72732: LD_INT 19
72734: PUSH
72735: LD_INT 20
72737: PUSH
72738: LD_INT 21
72740: PUSH
72741: LD_INT 22
72743: PUSH
72744: LD_INT 23
72746: PUSH
72747: LD_INT 24
72749: PUSH
72750: LD_INT 25
72752: PUSH
72753: LD_INT 26
72755: PUSH
72756: LD_INT 28
72758: PUSH
72759: LD_INT 30
72761: PUSH
72762: LD_INT 31
72764: PUSH
72765: LD_INT 32
72767: PUSH
72768: LD_INT 34
72770: PUSH
72771: LD_INT 36
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 101
72809: PUSH
72810: LD_INT 102
72812: PUSH
72813: LD_INT 103
72815: PUSH
72816: LD_INT 104
72818: PUSH
72819: LD_INT 105
72821: PUSH
72822: LD_INT 106
72824: PUSH
72825: LD_INT 107
72827: PUSH
72828: LD_INT 108
72830: PUSH
72831: LD_INT 109
72833: PUSH
72834: LD_INT 110
72836: PUSH
72837: LD_INT 111
72839: PUSH
72840: LD_INT 112
72842: PUSH
72843: LD_INT 114
72845: PUSH
72846: LD_INT 116
72848: PUSH
72849: LD_INT 117
72851: PUSH
72852: LD_INT 118
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: ST_TO_ADDR
72877: GO 74560
72879: LD_INT 12
72881: DOUBLE
72882: EQUAL
72883: IFTRUE 72887
72885: GO 73107
72887: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
72888: LD_ADDR_VAR 0 2
72892: PUSH
72893: LD_INT 1
72895: PUSH
72896: LD_INT 2
72898: PUSH
72899: LD_INT 3
72901: PUSH
72902: LD_INT 4
72904: PUSH
72905: LD_INT 5
72907: PUSH
72908: LD_INT 6
72910: PUSH
72911: LD_INT 7
72913: PUSH
72914: LD_INT 8
72916: PUSH
72917: LD_INT 9
72919: PUSH
72920: LD_INT 10
72922: PUSH
72923: LD_INT 11
72925: PUSH
72926: LD_INT 12
72928: PUSH
72929: LD_INT 13
72931: PUSH
72932: LD_INT 14
72934: PUSH
72935: LD_INT 15
72937: PUSH
72938: LD_INT 16
72940: PUSH
72941: LD_INT 17
72943: PUSH
72944: LD_INT 18
72946: PUSH
72947: LD_INT 19
72949: PUSH
72950: LD_INT 20
72952: PUSH
72953: LD_INT 21
72955: PUSH
72956: LD_INT 22
72958: PUSH
72959: LD_INT 23
72961: PUSH
72962: LD_INT 24
72964: PUSH
72965: LD_INT 25
72967: PUSH
72968: LD_INT 26
72970: PUSH
72971: LD_INT 27
72973: PUSH
72974: LD_INT 28
72976: PUSH
72977: LD_INT 30
72979: PUSH
72980: LD_INT 31
72982: PUSH
72983: LD_INT 32
72985: PUSH
72986: LD_INT 33
72988: PUSH
72989: LD_INT 34
72991: PUSH
72992: LD_INT 36
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 101
73033: PUSH
73034: LD_INT 102
73036: PUSH
73037: LD_INT 103
73039: PUSH
73040: LD_INT 104
73042: PUSH
73043: LD_INT 105
73045: PUSH
73046: LD_INT 106
73048: PUSH
73049: LD_INT 107
73051: PUSH
73052: LD_INT 108
73054: PUSH
73055: LD_INT 109
73057: PUSH
73058: LD_INT 110
73060: PUSH
73061: LD_INT 111
73063: PUSH
73064: LD_INT 112
73066: PUSH
73067: LD_INT 113
73069: PUSH
73070: LD_INT 114
73072: PUSH
73073: LD_INT 116
73075: PUSH
73076: LD_INT 117
73078: PUSH
73079: LD_INT 118
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: ST_TO_ADDR
73105: GO 74560
73107: LD_INT 13
73109: DOUBLE
73110: EQUAL
73111: IFTRUE 73115
73113: GO 73323
73115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
73116: LD_ADDR_VAR 0 2
73120: PUSH
73121: LD_INT 1
73123: PUSH
73124: LD_INT 2
73126: PUSH
73127: LD_INT 3
73129: PUSH
73130: LD_INT 4
73132: PUSH
73133: LD_INT 5
73135: PUSH
73136: LD_INT 8
73138: PUSH
73139: LD_INT 9
73141: PUSH
73142: LD_INT 10
73144: PUSH
73145: LD_INT 11
73147: PUSH
73148: LD_INT 12
73150: PUSH
73151: LD_INT 14
73153: PUSH
73154: LD_INT 15
73156: PUSH
73157: LD_INT 16
73159: PUSH
73160: LD_INT 17
73162: PUSH
73163: LD_INT 18
73165: PUSH
73166: LD_INT 19
73168: PUSH
73169: LD_INT 20
73171: PUSH
73172: LD_INT 21
73174: PUSH
73175: LD_INT 22
73177: PUSH
73178: LD_INT 23
73180: PUSH
73181: LD_INT 24
73183: PUSH
73184: LD_INT 25
73186: PUSH
73187: LD_INT 26
73189: PUSH
73190: LD_INT 27
73192: PUSH
73193: LD_INT 28
73195: PUSH
73196: LD_INT 30
73198: PUSH
73199: LD_INT 31
73201: PUSH
73202: LD_INT 32
73204: PUSH
73205: LD_INT 33
73207: PUSH
73208: LD_INT 34
73210: PUSH
73211: LD_INT 36
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 101
73249: PUSH
73250: LD_INT 102
73252: PUSH
73253: LD_INT 103
73255: PUSH
73256: LD_INT 104
73258: PUSH
73259: LD_INT 105
73261: PUSH
73262: LD_INT 106
73264: PUSH
73265: LD_INT 107
73267: PUSH
73268: LD_INT 108
73270: PUSH
73271: LD_INT 109
73273: PUSH
73274: LD_INT 110
73276: PUSH
73277: LD_INT 111
73279: PUSH
73280: LD_INT 112
73282: PUSH
73283: LD_INT 113
73285: PUSH
73286: LD_INT 114
73288: PUSH
73289: LD_INT 116
73291: PUSH
73292: LD_INT 117
73294: PUSH
73295: LD_INT 118
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: ST_TO_ADDR
73321: GO 74560
73323: LD_INT 14
73325: DOUBLE
73326: EQUAL
73327: IFTRUE 73331
73329: GO 73555
73331: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
73332: LD_ADDR_VAR 0 2
73336: PUSH
73337: LD_INT 1
73339: PUSH
73340: LD_INT 2
73342: PUSH
73343: LD_INT 3
73345: PUSH
73346: LD_INT 4
73348: PUSH
73349: LD_INT 5
73351: PUSH
73352: LD_INT 6
73354: PUSH
73355: LD_INT 7
73357: PUSH
73358: LD_INT 8
73360: PUSH
73361: LD_INT 9
73363: PUSH
73364: LD_INT 10
73366: PUSH
73367: LD_INT 11
73369: PUSH
73370: LD_INT 12
73372: PUSH
73373: LD_INT 13
73375: PUSH
73376: LD_INT 14
73378: PUSH
73379: LD_INT 15
73381: PUSH
73382: LD_INT 16
73384: PUSH
73385: LD_INT 17
73387: PUSH
73388: LD_INT 18
73390: PUSH
73391: LD_INT 19
73393: PUSH
73394: LD_INT 20
73396: PUSH
73397: LD_INT 21
73399: PUSH
73400: LD_INT 22
73402: PUSH
73403: LD_INT 23
73405: PUSH
73406: LD_INT 24
73408: PUSH
73409: LD_INT 25
73411: PUSH
73412: LD_INT 26
73414: PUSH
73415: LD_INT 27
73417: PUSH
73418: LD_INT 28
73420: PUSH
73421: LD_INT 29
73423: PUSH
73424: LD_INT 30
73426: PUSH
73427: LD_INT 31
73429: PUSH
73430: LD_INT 32
73432: PUSH
73433: LD_INT 33
73435: PUSH
73436: LD_INT 34
73438: PUSH
73439: LD_INT 36
73441: PUSH
73442: EMPTY
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: PUSH
73479: LD_INT 101
73481: PUSH
73482: LD_INT 102
73484: PUSH
73485: LD_INT 103
73487: PUSH
73488: LD_INT 104
73490: PUSH
73491: LD_INT 105
73493: PUSH
73494: LD_INT 106
73496: PUSH
73497: LD_INT 107
73499: PUSH
73500: LD_INT 108
73502: PUSH
73503: LD_INT 109
73505: PUSH
73506: LD_INT 110
73508: PUSH
73509: LD_INT 111
73511: PUSH
73512: LD_INT 112
73514: PUSH
73515: LD_INT 113
73517: PUSH
73518: LD_INT 114
73520: PUSH
73521: LD_INT 116
73523: PUSH
73524: LD_INT 117
73526: PUSH
73527: LD_INT 118
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: LIST
73539: LIST
73540: LIST
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: ST_TO_ADDR
73553: GO 74560
73555: LD_INT 15
73557: DOUBLE
73558: EQUAL
73559: IFTRUE 73563
73561: GO 73787
73563: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
73564: LD_ADDR_VAR 0 2
73568: PUSH
73569: LD_INT 1
73571: PUSH
73572: LD_INT 2
73574: PUSH
73575: LD_INT 3
73577: PUSH
73578: LD_INT 4
73580: PUSH
73581: LD_INT 5
73583: PUSH
73584: LD_INT 6
73586: PUSH
73587: LD_INT 7
73589: PUSH
73590: LD_INT 8
73592: PUSH
73593: LD_INT 9
73595: PUSH
73596: LD_INT 10
73598: PUSH
73599: LD_INT 11
73601: PUSH
73602: LD_INT 12
73604: PUSH
73605: LD_INT 13
73607: PUSH
73608: LD_INT 14
73610: PUSH
73611: LD_INT 15
73613: PUSH
73614: LD_INT 16
73616: PUSH
73617: LD_INT 17
73619: PUSH
73620: LD_INT 18
73622: PUSH
73623: LD_INT 19
73625: PUSH
73626: LD_INT 20
73628: PUSH
73629: LD_INT 21
73631: PUSH
73632: LD_INT 22
73634: PUSH
73635: LD_INT 23
73637: PUSH
73638: LD_INT 24
73640: PUSH
73641: LD_INT 25
73643: PUSH
73644: LD_INT 26
73646: PUSH
73647: LD_INT 27
73649: PUSH
73650: LD_INT 28
73652: PUSH
73653: LD_INT 29
73655: PUSH
73656: LD_INT 30
73658: PUSH
73659: LD_INT 31
73661: PUSH
73662: LD_INT 32
73664: PUSH
73665: LD_INT 33
73667: PUSH
73668: LD_INT 34
73670: PUSH
73671: LD_INT 36
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: PUSH
73711: LD_INT 101
73713: PUSH
73714: LD_INT 102
73716: PUSH
73717: LD_INT 103
73719: PUSH
73720: LD_INT 104
73722: PUSH
73723: LD_INT 105
73725: PUSH
73726: LD_INT 106
73728: PUSH
73729: LD_INT 107
73731: PUSH
73732: LD_INT 108
73734: PUSH
73735: LD_INT 109
73737: PUSH
73738: LD_INT 110
73740: PUSH
73741: LD_INT 111
73743: PUSH
73744: LD_INT 112
73746: PUSH
73747: LD_INT 113
73749: PUSH
73750: LD_INT 114
73752: PUSH
73753: LD_INT 116
73755: PUSH
73756: LD_INT 117
73758: PUSH
73759: LD_INT 118
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: ST_TO_ADDR
73785: GO 74560
73787: LD_INT 16
73789: DOUBLE
73790: EQUAL
73791: IFTRUE 73795
73793: GO 73931
73795: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
73796: LD_ADDR_VAR 0 2
73800: PUSH
73801: LD_INT 2
73803: PUSH
73804: LD_INT 4
73806: PUSH
73807: LD_INT 5
73809: PUSH
73810: LD_INT 7
73812: PUSH
73813: LD_INT 11
73815: PUSH
73816: LD_INT 12
73818: PUSH
73819: LD_INT 15
73821: PUSH
73822: LD_INT 16
73824: PUSH
73825: LD_INT 20
73827: PUSH
73828: LD_INT 21
73830: PUSH
73831: LD_INT 22
73833: PUSH
73834: LD_INT 23
73836: PUSH
73837: LD_INT 25
73839: PUSH
73840: LD_INT 26
73842: PUSH
73843: LD_INT 30
73845: PUSH
73846: LD_INT 31
73848: PUSH
73849: LD_INT 32
73851: PUSH
73852: LD_INT 33
73854: PUSH
73855: LD_INT 34
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 101
73881: PUSH
73882: LD_INT 102
73884: PUSH
73885: LD_INT 103
73887: PUSH
73888: LD_INT 106
73890: PUSH
73891: LD_INT 108
73893: PUSH
73894: LD_INT 112
73896: PUSH
73897: LD_INT 113
73899: PUSH
73900: LD_INT 114
73902: PUSH
73903: LD_INT 116
73905: PUSH
73906: LD_INT 117
73908: PUSH
73909: LD_INT 118
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: LIST
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: ST_TO_ADDR
73929: GO 74560
73931: LD_INT 17
73933: DOUBLE
73934: EQUAL
73935: IFTRUE 73939
73937: GO 74163
73939: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
73940: LD_ADDR_VAR 0 2
73944: PUSH
73945: LD_INT 1
73947: PUSH
73948: LD_INT 2
73950: PUSH
73951: LD_INT 3
73953: PUSH
73954: LD_INT 4
73956: PUSH
73957: LD_INT 5
73959: PUSH
73960: LD_INT 6
73962: PUSH
73963: LD_INT 7
73965: PUSH
73966: LD_INT 8
73968: PUSH
73969: LD_INT 9
73971: PUSH
73972: LD_INT 10
73974: PUSH
73975: LD_INT 11
73977: PUSH
73978: LD_INT 12
73980: PUSH
73981: LD_INT 13
73983: PUSH
73984: LD_INT 14
73986: PUSH
73987: LD_INT 15
73989: PUSH
73990: LD_INT 16
73992: PUSH
73993: LD_INT 17
73995: PUSH
73996: LD_INT 18
73998: PUSH
73999: LD_INT 19
74001: PUSH
74002: LD_INT 20
74004: PUSH
74005: LD_INT 21
74007: PUSH
74008: LD_INT 22
74010: PUSH
74011: LD_INT 23
74013: PUSH
74014: LD_INT 24
74016: PUSH
74017: LD_INT 25
74019: PUSH
74020: LD_INT 26
74022: PUSH
74023: LD_INT 27
74025: PUSH
74026: LD_INT 28
74028: PUSH
74029: LD_INT 29
74031: PUSH
74032: LD_INT 30
74034: PUSH
74035: LD_INT 31
74037: PUSH
74038: LD_INT 32
74040: PUSH
74041: LD_INT 33
74043: PUSH
74044: LD_INT 34
74046: PUSH
74047: LD_INT 36
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: LIST
74054: LIST
74055: LIST
74056: LIST
74057: LIST
74058: LIST
74059: LIST
74060: LIST
74061: LIST
74062: LIST
74063: LIST
74064: LIST
74065: LIST
74066: LIST
74067: LIST
74068: LIST
74069: LIST
74070: LIST
74071: LIST
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: LIST
74080: LIST
74081: LIST
74082: LIST
74083: LIST
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 101
74089: PUSH
74090: LD_INT 102
74092: PUSH
74093: LD_INT 103
74095: PUSH
74096: LD_INT 104
74098: PUSH
74099: LD_INT 105
74101: PUSH
74102: LD_INT 106
74104: PUSH
74105: LD_INT 107
74107: PUSH
74108: LD_INT 108
74110: PUSH
74111: LD_INT 109
74113: PUSH
74114: LD_INT 110
74116: PUSH
74117: LD_INT 111
74119: PUSH
74120: LD_INT 112
74122: PUSH
74123: LD_INT 113
74125: PUSH
74126: LD_INT 114
74128: PUSH
74129: LD_INT 116
74131: PUSH
74132: LD_INT 117
74134: PUSH
74135: LD_INT 118
74137: PUSH
74138: EMPTY
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: LIST
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: ST_TO_ADDR
74161: GO 74560
74163: LD_INT 18
74165: DOUBLE
74166: EQUAL
74167: IFTRUE 74171
74169: GO 74319
74171: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
74172: LD_ADDR_VAR 0 2
74176: PUSH
74177: LD_INT 2
74179: PUSH
74180: LD_INT 4
74182: PUSH
74183: LD_INT 5
74185: PUSH
74186: LD_INT 7
74188: PUSH
74189: LD_INT 11
74191: PUSH
74192: LD_INT 12
74194: PUSH
74195: LD_INT 15
74197: PUSH
74198: LD_INT 16
74200: PUSH
74201: LD_INT 20
74203: PUSH
74204: LD_INT 21
74206: PUSH
74207: LD_INT 22
74209: PUSH
74210: LD_INT 23
74212: PUSH
74213: LD_INT 25
74215: PUSH
74216: LD_INT 26
74218: PUSH
74219: LD_INT 30
74221: PUSH
74222: LD_INT 31
74224: PUSH
74225: LD_INT 32
74227: PUSH
74228: LD_INT 33
74230: PUSH
74231: LD_INT 34
74233: PUSH
74234: LD_INT 35
74236: PUSH
74237: LD_INT 36
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: PUSH
74263: LD_INT 101
74265: PUSH
74266: LD_INT 102
74268: PUSH
74269: LD_INT 103
74271: PUSH
74272: LD_INT 106
74274: PUSH
74275: LD_INT 108
74277: PUSH
74278: LD_INT 112
74280: PUSH
74281: LD_INT 113
74283: PUSH
74284: LD_INT 114
74286: PUSH
74287: LD_INT 115
74289: PUSH
74290: LD_INT 116
74292: PUSH
74293: LD_INT 117
74295: PUSH
74296: LD_INT 118
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: ST_TO_ADDR
74317: GO 74560
74319: LD_INT 19
74321: DOUBLE
74322: EQUAL
74323: IFTRUE 74327
74325: GO 74559
74327: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
74328: LD_ADDR_VAR 0 2
74332: PUSH
74333: LD_INT 1
74335: PUSH
74336: LD_INT 2
74338: PUSH
74339: LD_INT 3
74341: PUSH
74342: LD_INT 4
74344: PUSH
74345: LD_INT 5
74347: PUSH
74348: LD_INT 6
74350: PUSH
74351: LD_INT 7
74353: PUSH
74354: LD_INT 8
74356: PUSH
74357: LD_INT 9
74359: PUSH
74360: LD_INT 10
74362: PUSH
74363: LD_INT 11
74365: PUSH
74366: LD_INT 12
74368: PUSH
74369: LD_INT 13
74371: PUSH
74372: LD_INT 14
74374: PUSH
74375: LD_INT 15
74377: PUSH
74378: LD_INT 16
74380: PUSH
74381: LD_INT 17
74383: PUSH
74384: LD_INT 18
74386: PUSH
74387: LD_INT 19
74389: PUSH
74390: LD_INT 20
74392: PUSH
74393: LD_INT 21
74395: PUSH
74396: LD_INT 22
74398: PUSH
74399: LD_INT 23
74401: PUSH
74402: LD_INT 24
74404: PUSH
74405: LD_INT 25
74407: PUSH
74408: LD_INT 26
74410: PUSH
74411: LD_INT 27
74413: PUSH
74414: LD_INT 28
74416: PUSH
74417: LD_INT 29
74419: PUSH
74420: LD_INT 30
74422: PUSH
74423: LD_INT 31
74425: PUSH
74426: LD_INT 32
74428: PUSH
74429: LD_INT 33
74431: PUSH
74432: LD_INT 34
74434: PUSH
74435: LD_INT 35
74437: PUSH
74438: LD_INT 36
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: LIST
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 101
74481: PUSH
74482: LD_INT 102
74484: PUSH
74485: LD_INT 103
74487: PUSH
74488: LD_INT 104
74490: PUSH
74491: LD_INT 105
74493: PUSH
74494: LD_INT 106
74496: PUSH
74497: LD_INT 107
74499: PUSH
74500: LD_INT 108
74502: PUSH
74503: LD_INT 109
74505: PUSH
74506: LD_INT 110
74508: PUSH
74509: LD_INT 111
74511: PUSH
74512: LD_INT 112
74514: PUSH
74515: LD_INT 113
74517: PUSH
74518: LD_INT 114
74520: PUSH
74521: LD_INT 115
74523: PUSH
74524: LD_INT 116
74526: PUSH
74527: LD_INT 117
74529: PUSH
74530: LD_INT 118
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: LIST
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: ST_TO_ADDR
74557: GO 74560
74559: POP
// end else
74560: GO 74791
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
74562: LD_ADDR_VAR 0 2
74566: PUSH
74567: LD_INT 1
74569: PUSH
74570: LD_INT 2
74572: PUSH
74573: LD_INT 3
74575: PUSH
74576: LD_INT 4
74578: PUSH
74579: LD_INT 5
74581: PUSH
74582: LD_INT 6
74584: PUSH
74585: LD_INT 7
74587: PUSH
74588: LD_INT 8
74590: PUSH
74591: LD_INT 9
74593: PUSH
74594: LD_INT 10
74596: PUSH
74597: LD_INT 11
74599: PUSH
74600: LD_INT 12
74602: PUSH
74603: LD_INT 13
74605: PUSH
74606: LD_INT 14
74608: PUSH
74609: LD_INT 15
74611: PUSH
74612: LD_INT 16
74614: PUSH
74615: LD_INT 17
74617: PUSH
74618: LD_INT 18
74620: PUSH
74621: LD_INT 19
74623: PUSH
74624: LD_INT 20
74626: PUSH
74627: LD_INT 21
74629: PUSH
74630: LD_INT 22
74632: PUSH
74633: LD_INT 23
74635: PUSH
74636: LD_INT 24
74638: PUSH
74639: LD_INT 25
74641: PUSH
74642: LD_INT 26
74644: PUSH
74645: LD_INT 27
74647: PUSH
74648: LD_INT 28
74650: PUSH
74651: LD_INT 29
74653: PUSH
74654: LD_INT 30
74656: PUSH
74657: LD_INT 31
74659: PUSH
74660: LD_INT 32
74662: PUSH
74663: LD_INT 33
74665: PUSH
74666: LD_INT 34
74668: PUSH
74669: LD_INT 35
74671: PUSH
74672: LD_INT 36
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: LIST
74696: LIST
74697: LIST
74698: LIST
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: LIST
74704: LIST
74705: LIST
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: PUSH
74713: LD_INT 101
74715: PUSH
74716: LD_INT 102
74718: PUSH
74719: LD_INT 103
74721: PUSH
74722: LD_INT 104
74724: PUSH
74725: LD_INT 105
74727: PUSH
74728: LD_INT 106
74730: PUSH
74731: LD_INT 107
74733: PUSH
74734: LD_INT 108
74736: PUSH
74737: LD_INT 109
74739: PUSH
74740: LD_INT 110
74742: PUSH
74743: LD_INT 111
74745: PUSH
74746: LD_INT 112
74748: PUSH
74749: LD_INT 113
74751: PUSH
74752: LD_INT 114
74754: PUSH
74755: LD_INT 115
74757: PUSH
74758: LD_INT 116
74760: PUSH
74761: LD_INT 117
74763: PUSH
74764: LD_INT 118
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: LIST
74775: LIST
74776: LIST
74777: LIST
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: ST_TO_ADDR
// if result then
74791: LD_VAR 0 2
74795: IFFALSE 75581
// begin normal :=  ;
74797: LD_ADDR_VAR 0 5
74801: PUSH
74802: LD_STRING 
74804: ST_TO_ADDR
// hardcore :=  ;
74805: LD_ADDR_VAR 0 6
74809: PUSH
74810: LD_STRING 
74812: ST_TO_ADDR
// active :=  ;
74813: LD_ADDR_VAR 0 7
74817: PUSH
74818: LD_STRING 
74820: ST_TO_ADDR
// for i = 1 to normalCounter do
74821: LD_ADDR_VAR 0 8
74825: PUSH
74826: DOUBLE
74827: LD_INT 1
74829: DEC
74830: ST_TO_ADDR
74831: LD_EXP 73
74835: PUSH
74836: FOR_TO
74837: IFFALSE 74938
// begin tmp := 0 ;
74839: LD_ADDR_VAR 0 3
74843: PUSH
74844: LD_STRING 0
74846: ST_TO_ADDR
// if result [ 1 ] then
74847: LD_VAR 0 2
74851: PUSH
74852: LD_INT 1
74854: ARRAY
74855: IFFALSE 74920
// if result [ 1 ] [ 1 ] = i then
74857: LD_VAR 0 2
74861: PUSH
74862: LD_INT 1
74864: ARRAY
74865: PUSH
74866: LD_INT 1
74868: ARRAY
74869: PUSH
74870: LD_VAR 0 8
74874: EQUAL
74875: IFFALSE 74920
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
74877: LD_ADDR_VAR 0 2
74881: PUSH
74882: LD_VAR 0 2
74886: PPUSH
74887: LD_INT 1
74889: PPUSH
74890: LD_VAR 0 2
74894: PUSH
74895: LD_INT 1
74897: ARRAY
74898: PPUSH
74899: LD_INT 1
74901: PPUSH
74902: CALL_OW 3
74906: PPUSH
74907: CALL_OW 1
74911: ST_TO_ADDR
// tmp := 1 ;
74912: LD_ADDR_VAR 0 3
74916: PUSH
74917: LD_STRING 1
74919: ST_TO_ADDR
// end ; normal := normal & tmp ;
74920: LD_ADDR_VAR 0 5
74924: PUSH
74925: LD_VAR 0 5
74929: PUSH
74930: LD_VAR 0 3
74934: STR
74935: ST_TO_ADDR
// end ;
74936: GO 74836
74938: POP
74939: POP
// for i = 1 to hardcoreCounter do
74940: LD_ADDR_VAR 0 8
74944: PUSH
74945: DOUBLE
74946: LD_INT 1
74948: DEC
74949: ST_TO_ADDR
74950: LD_EXP 74
74954: PUSH
74955: FOR_TO
74956: IFFALSE 75061
// begin tmp := 0 ;
74958: LD_ADDR_VAR 0 3
74962: PUSH
74963: LD_STRING 0
74965: ST_TO_ADDR
// if result [ 2 ] then
74966: LD_VAR 0 2
74970: PUSH
74971: LD_INT 2
74973: ARRAY
74974: IFFALSE 75043
// if result [ 2 ] [ 1 ] = 100 + i then
74976: LD_VAR 0 2
74980: PUSH
74981: LD_INT 2
74983: ARRAY
74984: PUSH
74985: LD_INT 1
74987: ARRAY
74988: PUSH
74989: LD_INT 100
74991: PUSH
74992: LD_VAR 0 8
74996: PLUS
74997: EQUAL
74998: IFFALSE 75043
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
75000: LD_ADDR_VAR 0 2
75004: PUSH
75005: LD_VAR 0 2
75009: PPUSH
75010: LD_INT 2
75012: PPUSH
75013: LD_VAR 0 2
75017: PUSH
75018: LD_INT 2
75020: ARRAY
75021: PPUSH
75022: LD_INT 1
75024: PPUSH
75025: CALL_OW 3
75029: PPUSH
75030: CALL_OW 1
75034: ST_TO_ADDR
// tmp := 1 ;
75035: LD_ADDR_VAR 0 3
75039: PUSH
75040: LD_STRING 1
75042: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
75043: LD_ADDR_VAR 0 6
75047: PUSH
75048: LD_VAR 0 6
75052: PUSH
75053: LD_VAR 0 3
75057: STR
75058: ST_TO_ADDR
// end ;
75059: GO 74955
75061: POP
75062: POP
// if isGameLoad then
75063: LD_VAR 0 1
75067: IFFALSE 75542
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
75069: LD_ADDR_VAR 0 4
75073: PUSH
75074: LD_EXP 77
75078: PUSH
75079: LD_EXP 76
75083: PUSH
75084: LD_EXP 78
75088: PUSH
75089: LD_EXP 75
75093: PUSH
75094: LD_EXP 79
75098: PUSH
75099: LD_EXP 80
75103: PUSH
75104: LD_EXP 81
75108: PUSH
75109: LD_EXP 82
75113: PUSH
75114: LD_EXP 83
75118: PUSH
75119: LD_EXP 84
75123: PUSH
75124: LD_EXP 85
75128: PUSH
75129: LD_EXP 86
75133: PUSH
75134: LD_EXP 87
75138: PUSH
75139: LD_EXP 88
75143: PUSH
75144: LD_EXP 96
75148: PUSH
75149: LD_EXP 97
75153: PUSH
75154: LD_EXP 98
75158: PUSH
75159: LD_EXP 99
75163: PUSH
75164: LD_EXP 101
75168: PUSH
75169: LD_EXP 102
75173: PUSH
75174: LD_EXP 103
75178: PUSH
75179: LD_EXP 106
75183: PUSH
75184: LD_EXP 108
75188: PUSH
75189: LD_EXP 109
75193: PUSH
75194: LD_EXP 110
75198: PUSH
75199: LD_EXP 112
75203: PUSH
75204: LD_EXP 113
75208: PUSH
75209: LD_EXP 116
75213: PUSH
75214: LD_EXP 117
75218: PUSH
75219: LD_EXP 118
75223: PUSH
75224: LD_EXP 119
75228: PUSH
75229: LD_EXP 120
75233: PUSH
75234: LD_EXP 121
75238: PUSH
75239: LD_EXP 122
75243: PUSH
75244: LD_EXP 123
75248: PUSH
75249: LD_EXP 124
75253: PUSH
75254: LD_EXP 89
75258: PUSH
75259: LD_EXP 90
75263: PUSH
75264: LD_EXP 93
75268: PUSH
75269: LD_EXP 94
75273: PUSH
75274: LD_EXP 95
75278: PUSH
75279: LD_EXP 91
75283: PUSH
75284: LD_EXP 92
75288: PUSH
75289: LD_EXP 100
75293: PUSH
75294: LD_EXP 104
75298: PUSH
75299: LD_EXP 105
75303: PUSH
75304: LD_EXP 107
75308: PUSH
75309: LD_EXP 111
75313: PUSH
75314: LD_EXP 114
75318: PUSH
75319: LD_EXP 115
75323: PUSH
75324: LD_EXP 125
75328: PUSH
75329: LD_EXP 126
75333: PUSH
75334: LD_EXP 127
75338: PUSH
75339: LD_EXP 128
75343: PUSH
75344: EMPTY
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: LIST
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: LIST
75398: LIST
75399: ST_TO_ADDR
// tmp :=  ;
75400: LD_ADDR_VAR 0 3
75404: PUSH
75405: LD_STRING 
75407: ST_TO_ADDR
// for i = 1 to normalCounter do
75408: LD_ADDR_VAR 0 8
75412: PUSH
75413: DOUBLE
75414: LD_INT 1
75416: DEC
75417: ST_TO_ADDR
75418: LD_EXP 73
75422: PUSH
75423: FOR_TO
75424: IFFALSE 75460
// begin if flags [ i ] then
75426: LD_VAR 0 4
75430: PUSH
75431: LD_VAR 0 8
75435: ARRAY
75436: IFFALSE 75458
// tmp := tmp & i & ; ;
75438: LD_ADDR_VAR 0 3
75442: PUSH
75443: LD_VAR 0 3
75447: PUSH
75448: LD_VAR 0 8
75452: STR
75453: PUSH
75454: LD_STRING ;
75456: STR
75457: ST_TO_ADDR
// end ;
75458: GO 75423
75460: POP
75461: POP
// for i = 1 to hardcoreCounter do
75462: LD_ADDR_VAR 0 8
75466: PUSH
75467: DOUBLE
75468: LD_INT 1
75470: DEC
75471: ST_TO_ADDR
75472: LD_EXP 74
75476: PUSH
75477: FOR_TO
75478: IFFALSE 75524
// begin if flags [ normalCounter + i ] then
75480: LD_VAR 0 4
75484: PUSH
75485: LD_EXP 73
75489: PUSH
75490: LD_VAR 0 8
75494: PLUS
75495: ARRAY
75496: IFFALSE 75522
// tmp := tmp & ( 100 + i ) & ; ;
75498: LD_ADDR_VAR 0 3
75502: PUSH
75503: LD_VAR 0 3
75507: PUSH
75508: LD_INT 100
75510: PUSH
75511: LD_VAR 0 8
75515: PLUS
75516: STR
75517: PUSH
75518: LD_STRING ;
75520: STR
75521: ST_TO_ADDR
// end ;
75522: GO 75477
75524: POP
75525: POP
// if tmp then
75526: LD_VAR 0 3
75530: IFFALSE 75542
// active := tmp ;
75532: LD_ADDR_VAR 0 7
75536: PUSH
75537: LD_VAR 0 3
75541: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
75542: LD_STRING getStreamItemsFromMission("
75544: PUSH
75545: LD_VAR 0 5
75549: STR
75550: PUSH
75551: LD_STRING ","
75553: STR
75554: PUSH
75555: LD_VAR 0 6
75559: STR
75560: PUSH
75561: LD_STRING ","
75563: STR
75564: PUSH
75565: LD_VAR 0 7
75569: STR
75570: PUSH
75571: LD_STRING ")
75573: STR
75574: PPUSH
75575: CALL_OW 559
// end else
75579: GO 75588
// ToLua ( getStreamItemsFromMission("","","") ) ;
75581: LD_STRING getStreamItemsFromMission("","","")
75583: PPUSH
75584: CALL_OW 559
// end ;
75588: LD_VAR 0 2
75592: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
75593: LD_EXP 72
75597: PUSH
75598: LD_EXP 77
75602: AND
75603: IFFALSE 75727
75605: GO 75607
75607: DISABLE
75608: LD_INT 0
75610: PPUSH
75611: PPUSH
// begin enable ;
75612: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
75613: LD_ADDR_VAR 0 2
75617: PUSH
75618: LD_INT 22
75620: PUSH
75621: LD_OWVAR 2
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: PUSH
75630: LD_INT 2
75632: PUSH
75633: LD_INT 34
75635: PUSH
75636: LD_INT 7
75638: PUSH
75639: EMPTY
75640: LIST
75641: LIST
75642: PUSH
75643: LD_INT 34
75645: PUSH
75646: LD_INT 45
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: PUSH
75653: LD_INT 34
75655: PUSH
75656: LD_INT 28
75658: PUSH
75659: EMPTY
75660: LIST
75661: LIST
75662: PUSH
75663: LD_INT 34
75665: PUSH
75666: LD_INT 47
75668: PUSH
75669: EMPTY
75670: LIST
75671: LIST
75672: PUSH
75673: EMPTY
75674: LIST
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PPUSH
75684: CALL_OW 69
75688: ST_TO_ADDR
// if not tmp then
75689: LD_VAR 0 2
75693: NOT
75694: IFFALSE 75698
// exit ;
75696: GO 75727
// for i in tmp do
75698: LD_ADDR_VAR 0 1
75702: PUSH
75703: LD_VAR 0 2
75707: PUSH
75708: FOR_IN
75709: IFFALSE 75725
// begin SetLives ( i , 0 ) ;
75711: LD_VAR 0 1
75715: PPUSH
75716: LD_INT 0
75718: PPUSH
75719: CALL_OW 234
// end ;
75723: GO 75708
75725: POP
75726: POP
// end ;
75727: PPOPN 2
75729: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
75730: LD_EXP 72
75734: PUSH
75735: LD_EXP 78
75739: AND
75740: IFFALSE 75824
75742: GO 75744
75744: DISABLE
75745: LD_INT 0
75747: PPUSH
75748: PPUSH
// begin enable ;
75749: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
75750: LD_ADDR_VAR 0 2
75754: PUSH
75755: LD_INT 22
75757: PUSH
75758: LD_OWVAR 2
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PUSH
75767: LD_INT 32
75769: PUSH
75770: LD_INT 3
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: PPUSH
75781: CALL_OW 69
75785: ST_TO_ADDR
// if not tmp then
75786: LD_VAR 0 2
75790: NOT
75791: IFFALSE 75795
// exit ;
75793: GO 75824
// for i in tmp do
75795: LD_ADDR_VAR 0 1
75799: PUSH
75800: LD_VAR 0 2
75804: PUSH
75805: FOR_IN
75806: IFFALSE 75822
// begin SetLives ( i , 0 ) ;
75808: LD_VAR 0 1
75812: PPUSH
75813: LD_INT 0
75815: PPUSH
75816: CALL_OW 234
// end ;
75820: GO 75805
75822: POP
75823: POP
// end ;
75824: PPOPN 2
75826: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
75827: LD_EXP 72
75831: PUSH
75832: LD_EXP 75
75836: AND
75837: IFFALSE 75930
75839: GO 75841
75841: DISABLE
75842: LD_INT 0
75844: PPUSH
// begin enable ;
75845: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
75846: LD_ADDR_VAR 0 1
75850: PUSH
75851: LD_INT 22
75853: PUSH
75854: LD_OWVAR 2
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: PUSH
75863: LD_INT 2
75865: PUSH
75866: LD_INT 25
75868: PUSH
75869: LD_INT 5
75871: PUSH
75872: EMPTY
75873: LIST
75874: LIST
75875: PUSH
75876: LD_INT 25
75878: PUSH
75879: LD_INT 9
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: PUSH
75886: LD_INT 25
75888: PUSH
75889: LD_INT 8
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: PUSH
75902: EMPTY
75903: LIST
75904: LIST
75905: PPUSH
75906: CALL_OW 69
75910: PUSH
75911: FOR_IN
75912: IFFALSE 75928
// begin SetClass ( i , 1 ) ;
75914: LD_VAR 0 1
75918: PPUSH
75919: LD_INT 1
75921: PPUSH
75922: CALL_OW 336
// end ;
75926: GO 75911
75928: POP
75929: POP
// end ;
75930: PPOPN 1
75932: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
75933: LD_EXP 72
75937: PUSH
75938: LD_EXP 76
75942: AND
75943: PUSH
75944: LD_OWVAR 65
75948: PUSH
75949: LD_INT 7
75951: LESS
75952: AND
75953: IFFALSE 75967
75955: GO 75957
75957: DISABLE
// begin enable ;
75958: ENABLE
// game_speed := 7 ;
75959: LD_ADDR_OWVAR 65
75963: PUSH
75964: LD_INT 7
75966: ST_TO_ADDR
// end ;
75967: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
75968: LD_EXP 72
75972: PUSH
75973: LD_EXP 79
75977: AND
75978: IFFALSE 76180
75980: GO 75982
75982: DISABLE
75983: LD_INT 0
75985: PPUSH
75986: PPUSH
75987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
75988: LD_ADDR_VAR 0 3
75992: PUSH
75993: LD_INT 81
75995: PUSH
75996: LD_OWVAR 2
76000: PUSH
76001: EMPTY
76002: LIST
76003: LIST
76004: PUSH
76005: LD_INT 21
76007: PUSH
76008: LD_INT 1
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: PPUSH
76019: CALL_OW 69
76023: ST_TO_ADDR
// if not tmp then
76024: LD_VAR 0 3
76028: NOT
76029: IFFALSE 76033
// exit ;
76031: GO 76180
// if tmp > 5 then
76033: LD_VAR 0 3
76037: PUSH
76038: LD_INT 5
76040: GREATER
76041: IFFALSE 76053
// k := 5 else
76043: LD_ADDR_VAR 0 2
76047: PUSH
76048: LD_INT 5
76050: ST_TO_ADDR
76051: GO 76063
// k := tmp ;
76053: LD_ADDR_VAR 0 2
76057: PUSH
76058: LD_VAR 0 3
76062: ST_TO_ADDR
// for i := 1 to k do
76063: LD_ADDR_VAR 0 1
76067: PUSH
76068: DOUBLE
76069: LD_INT 1
76071: DEC
76072: ST_TO_ADDR
76073: LD_VAR 0 2
76077: PUSH
76078: FOR_TO
76079: IFFALSE 76178
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
76081: LD_VAR 0 3
76085: PUSH
76086: LD_VAR 0 1
76090: ARRAY
76091: PPUSH
76092: LD_VAR 0 1
76096: PUSH
76097: LD_INT 4
76099: MOD
76100: PUSH
76101: LD_INT 1
76103: PLUS
76104: PPUSH
76105: CALL_OW 259
76109: PUSH
76110: LD_INT 10
76112: LESS
76113: IFFALSE 76176
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
76115: LD_VAR 0 3
76119: PUSH
76120: LD_VAR 0 1
76124: ARRAY
76125: PPUSH
76126: LD_VAR 0 1
76130: PUSH
76131: LD_INT 4
76133: MOD
76134: PUSH
76135: LD_INT 1
76137: PLUS
76138: PPUSH
76139: LD_VAR 0 3
76143: PUSH
76144: LD_VAR 0 1
76148: ARRAY
76149: PPUSH
76150: LD_VAR 0 1
76154: PUSH
76155: LD_INT 4
76157: MOD
76158: PUSH
76159: LD_INT 1
76161: PLUS
76162: PPUSH
76163: CALL_OW 259
76167: PUSH
76168: LD_INT 1
76170: PLUS
76171: PPUSH
76172: CALL_OW 237
76176: GO 76078
76178: POP
76179: POP
// end ;
76180: PPOPN 3
76182: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
76183: LD_EXP 72
76187: PUSH
76188: LD_EXP 80
76192: AND
76193: IFFALSE 76213
76195: GO 76197
76197: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
76198: LD_INT 4
76200: PPUSH
76201: LD_OWVAR 2
76205: PPUSH
76206: LD_INT 0
76208: PPUSH
76209: CALL_OW 324
76213: END
// every 0 0$1 trigger StreamModeActive and sShovel do
76214: LD_EXP 72
76218: PUSH
76219: LD_EXP 109
76223: AND
76224: IFFALSE 76244
76226: GO 76228
76228: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
76229: LD_INT 19
76231: PPUSH
76232: LD_OWVAR 2
76236: PPUSH
76237: LD_INT 0
76239: PPUSH
76240: CALL_OW 324
76244: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
76245: LD_EXP 72
76249: PUSH
76250: LD_EXP 81
76254: AND
76255: IFFALSE 76357
76257: GO 76259
76259: DISABLE
76260: LD_INT 0
76262: PPUSH
76263: PPUSH
// begin enable ;
76264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
76265: LD_ADDR_VAR 0 2
76269: PUSH
76270: LD_INT 22
76272: PUSH
76273: LD_OWVAR 2
76277: PUSH
76278: EMPTY
76279: LIST
76280: LIST
76281: PUSH
76282: LD_INT 2
76284: PUSH
76285: LD_INT 34
76287: PUSH
76288: LD_INT 11
76290: PUSH
76291: EMPTY
76292: LIST
76293: LIST
76294: PUSH
76295: LD_INT 34
76297: PUSH
76298: LD_INT 30
76300: PUSH
76301: EMPTY
76302: LIST
76303: LIST
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: LIST
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: PPUSH
76314: CALL_OW 69
76318: ST_TO_ADDR
// if not tmp then
76319: LD_VAR 0 2
76323: NOT
76324: IFFALSE 76328
// exit ;
76326: GO 76357
// for i in tmp do
76328: LD_ADDR_VAR 0 1
76332: PUSH
76333: LD_VAR 0 2
76337: PUSH
76338: FOR_IN
76339: IFFALSE 76355
// begin SetLives ( i , 0 ) ;
76341: LD_VAR 0 1
76345: PPUSH
76346: LD_INT 0
76348: PPUSH
76349: CALL_OW 234
// end ;
76353: GO 76338
76355: POP
76356: POP
// end ;
76357: PPOPN 2
76359: END
// every 0 0$1 trigger StreamModeActive and sBunker do
76360: LD_EXP 72
76364: PUSH
76365: LD_EXP 82
76369: AND
76370: IFFALSE 76390
76372: GO 76374
76374: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
76375: LD_INT 32
76377: PPUSH
76378: LD_OWVAR 2
76382: PPUSH
76383: LD_INT 0
76385: PPUSH
76386: CALL_OW 324
76390: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
76391: LD_EXP 72
76395: PUSH
76396: LD_EXP 83
76400: AND
76401: IFFALSE 76582
76403: GO 76405
76405: DISABLE
76406: LD_INT 0
76408: PPUSH
76409: PPUSH
76410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
76411: LD_ADDR_VAR 0 2
76415: PUSH
76416: LD_INT 22
76418: PUSH
76419: LD_OWVAR 2
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: PUSH
76428: LD_INT 33
76430: PUSH
76431: LD_INT 3
76433: PUSH
76434: EMPTY
76435: LIST
76436: LIST
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: PPUSH
76442: CALL_OW 69
76446: ST_TO_ADDR
// if not tmp then
76447: LD_VAR 0 2
76451: NOT
76452: IFFALSE 76456
// exit ;
76454: GO 76582
// side := 0 ;
76456: LD_ADDR_VAR 0 3
76460: PUSH
76461: LD_INT 0
76463: ST_TO_ADDR
// for i := 1 to 8 do
76464: LD_ADDR_VAR 0 1
76468: PUSH
76469: DOUBLE
76470: LD_INT 1
76472: DEC
76473: ST_TO_ADDR
76474: LD_INT 8
76476: PUSH
76477: FOR_TO
76478: IFFALSE 76526
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
76480: LD_OWVAR 2
76484: PUSH
76485: LD_VAR 0 1
76489: NONEQUAL
76490: PUSH
76491: LD_OWVAR 2
76495: PPUSH
76496: LD_VAR 0 1
76500: PPUSH
76501: CALL_OW 81
76505: PUSH
76506: LD_INT 2
76508: EQUAL
76509: AND
76510: IFFALSE 76524
// begin side := i ;
76512: LD_ADDR_VAR 0 3
76516: PUSH
76517: LD_VAR 0 1
76521: ST_TO_ADDR
// break ;
76522: GO 76526
// end ;
76524: GO 76477
76526: POP
76527: POP
// if not side then
76528: LD_VAR 0 3
76532: NOT
76533: IFFALSE 76537
// exit ;
76535: GO 76582
// for i := 1 to tmp do
76537: LD_ADDR_VAR 0 1
76541: PUSH
76542: DOUBLE
76543: LD_INT 1
76545: DEC
76546: ST_TO_ADDR
76547: LD_VAR 0 2
76551: PUSH
76552: FOR_TO
76553: IFFALSE 76580
// if Prob ( 60 ) then
76555: LD_INT 60
76557: PPUSH
76558: CALL_OW 13
76562: IFFALSE 76578
// SetSide ( i , side ) ;
76564: LD_VAR 0 1
76568: PPUSH
76569: LD_VAR 0 3
76573: PPUSH
76574: CALL_OW 235
76578: GO 76552
76580: POP
76581: POP
// end ;
76582: PPOPN 3
76584: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
76585: LD_EXP 72
76589: PUSH
76590: LD_EXP 85
76594: AND
76595: IFFALSE 76714
76597: GO 76599
76599: DISABLE
76600: LD_INT 0
76602: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
76603: LD_ADDR_VAR 0 1
76607: PUSH
76608: LD_INT 22
76610: PUSH
76611: LD_OWVAR 2
76615: PUSH
76616: EMPTY
76617: LIST
76618: LIST
76619: PUSH
76620: LD_INT 21
76622: PUSH
76623: LD_INT 1
76625: PUSH
76626: EMPTY
76627: LIST
76628: LIST
76629: PUSH
76630: LD_INT 3
76632: PUSH
76633: LD_INT 23
76635: PUSH
76636: LD_INT 0
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: EMPTY
76644: LIST
76645: LIST
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: LIST
76651: PPUSH
76652: CALL_OW 69
76656: PUSH
76657: FOR_IN
76658: IFFALSE 76712
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
76660: LD_VAR 0 1
76664: PPUSH
76665: CALL_OW 257
76669: PUSH
76670: LD_INT 1
76672: PUSH
76673: LD_INT 2
76675: PUSH
76676: LD_INT 3
76678: PUSH
76679: LD_INT 4
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: IN
76688: IFFALSE 76710
// SetClass ( un , rand ( 1 , 4 ) ) ;
76690: LD_VAR 0 1
76694: PPUSH
76695: LD_INT 1
76697: PPUSH
76698: LD_INT 4
76700: PPUSH
76701: CALL_OW 12
76705: PPUSH
76706: CALL_OW 336
76710: GO 76657
76712: POP
76713: POP
// end ;
76714: PPOPN 1
76716: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
76717: LD_EXP 72
76721: PUSH
76722: LD_EXP 84
76726: AND
76727: IFFALSE 76806
76729: GO 76731
76731: DISABLE
76732: LD_INT 0
76734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
76735: LD_ADDR_VAR 0 1
76739: PUSH
76740: LD_INT 22
76742: PUSH
76743: LD_OWVAR 2
76747: PUSH
76748: EMPTY
76749: LIST
76750: LIST
76751: PUSH
76752: LD_INT 21
76754: PUSH
76755: LD_INT 3
76757: PUSH
76758: EMPTY
76759: LIST
76760: LIST
76761: PUSH
76762: EMPTY
76763: LIST
76764: LIST
76765: PPUSH
76766: CALL_OW 69
76770: ST_TO_ADDR
// if not tmp then
76771: LD_VAR 0 1
76775: NOT
76776: IFFALSE 76780
// exit ;
76778: GO 76806
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
76780: LD_VAR 0 1
76784: PUSH
76785: LD_INT 1
76787: PPUSH
76788: LD_VAR 0 1
76792: PPUSH
76793: CALL_OW 12
76797: ARRAY
76798: PPUSH
76799: LD_INT 100
76801: PPUSH
76802: CALL_OW 234
// end ;
76806: PPOPN 1
76808: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
76809: LD_EXP 72
76813: PUSH
76814: LD_EXP 86
76818: AND
76819: IFFALSE 76917
76821: GO 76823
76823: DISABLE
76824: LD_INT 0
76826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76827: LD_ADDR_VAR 0 1
76831: PUSH
76832: LD_INT 22
76834: PUSH
76835: LD_OWVAR 2
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: PUSH
76844: LD_INT 21
76846: PUSH
76847: LD_INT 1
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: PPUSH
76858: CALL_OW 69
76862: ST_TO_ADDR
// if not tmp then
76863: LD_VAR 0 1
76867: NOT
76868: IFFALSE 76872
// exit ;
76870: GO 76917
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
76872: LD_VAR 0 1
76876: PUSH
76877: LD_INT 1
76879: PPUSH
76880: LD_VAR 0 1
76884: PPUSH
76885: CALL_OW 12
76889: ARRAY
76890: PPUSH
76891: LD_INT 1
76893: PPUSH
76894: LD_INT 4
76896: PPUSH
76897: CALL_OW 12
76901: PPUSH
76902: LD_INT 3000
76904: PPUSH
76905: LD_INT 9000
76907: PPUSH
76908: CALL_OW 12
76912: PPUSH
76913: CALL_OW 492
// end ;
76917: PPOPN 1
76919: END
// every 0 0$1 trigger StreamModeActive and sDepot do
76920: LD_EXP 72
76924: PUSH
76925: LD_EXP 87
76929: AND
76930: IFFALSE 76950
76932: GO 76934
76934: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
76935: LD_INT 1
76937: PPUSH
76938: LD_OWVAR 2
76942: PPUSH
76943: LD_INT 0
76945: PPUSH
76946: CALL_OW 324
76950: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
76951: LD_EXP 72
76955: PUSH
76956: LD_EXP 88
76960: AND
76961: IFFALSE 77044
76963: GO 76965
76965: DISABLE
76966: LD_INT 0
76968: PPUSH
76969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
76970: LD_ADDR_VAR 0 2
76974: PUSH
76975: LD_INT 22
76977: PUSH
76978: LD_OWVAR 2
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: PUSH
76987: LD_INT 21
76989: PUSH
76990: LD_INT 3
76992: PUSH
76993: EMPTY
76994: LIST
76995: LIST
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: PPUSH
77001: CALL_OW 69
77005: ST_TO_ADDR
// if not tmp then
77006: LD_VAR 0 2
77010: NOT
77011: IFFALSE 77015
// exit ;
77013: GO 77044
// for i in tmp do
77015: LD_ADDR_VAR 0 1
77019: PUSH
77020: LD_VAR 0 2
77024: PUSH
77025: FOR_IN
77026: IFFALSE 77042
// SetBLevel ( i , 10 ) ;
77028: LD_VAR 0 1
77032: PPUSH
77033: LD_INT 10
77035: PPUSH
77036: CALL_OW 241
77040: GO 77025
77042: POP
77043: POP
// end ;
77044: PPOPN 2
77046: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
77047: LD_EXP 72
77051: PUSH
77052: LD_EXP 89
77056: AND
77057: IFFALSE 77168
77059: GO 77061
77061: DISABLE
77062: LD_INT 0
77064: PPUSH
77065: PPUSH
77066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77067: LD_ADDR_VAR 0 3
77071: PUSH
77072: LD_INT 22
77074: PUSH
77075: LD_OWVAR 2
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: PUSH
77084: LD_INT 25
77086: PUSH
77087: LD_INT 1
77089: PUSH
77090: EMPTY
77091: LIST
77092: LIST
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PPUSH
77098: CALL_OW 69
77102: ST_TO_ADDR
// if not tmp then
77103: LD_VAR 0 3
77107: NOT
77108: IFFALSE 77112
// exit ;
77110: GO 77168
// un := tmp [ rand ( 1 , tmp ) ] ;
77112: LD_ADDR_VAR 0 2
77116: PUSH
77117: LD_VAR 0 3
77121: PUSH
77122: LD_INT 1
77124: PPUSH
77125: LD_VAR 0 3
77129: PPUSH
77130: CALL_OW 12
77134: ARRAY
77135: ST_TO_ADDR
// if Crawls ( un ) then
77136: LD_VAR 0 2
77140: PPUSH
77141: CALL_OW 318
77145: IFFALSE 77156
// ComWalk ( un ) ;
77147: LD_VAR 0 2
77151: PPUSH
77152: CALL_OW 138
// SetClass ( un , class_sniper ) ;
77156: LD_VAR 0 2
77160: PPUSH
77161: LD_INT 5
77163: PPUSH
77164: CALL_OW 336
// end ;
77168: PPOPN 3
77170: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
77171: LD_EXP 72
77175: PUSH
77176: LD_EXP 90
77180: AND
77181: PUSH
77182: LD_OWVAR 67
77186: PUSH
77187: LD_INT 4
77189: LESS
77190: AND
77191: IFFALSE 77210
77193: GO 77195
77195: DISABLE
// begin Difficulty := Difficulty + 1 ;
77196: LD_ADDR_OWVAR 67
77200: PUSH
77201: LD_OWVAR 67
77205: PUSH
77206: LD_INT 1
77208: PLUS
77209: ST_TO_ADDR
// end ;
77210: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
77211: LD_EXP 72
77215: PUSH
77216: LD_EXP 91
77220: AND
77221: IFFALSE 77324
77223: GO 77225
77225: DISABLE
77226: LD_INT 0
77228: PPUSH
// begin for i := 1 to 5 do
77229: LD_ADDR_VAR 0 1
77233: PUSH
77234: DOUBLE
77235: LD_INT 1
77237: DEC
77238: ST_TO_ADDR
77239: LD_INT 5
77241: PUSH
77242: FOR_TO
77243: IFFALSE 77322
// begin uc_nation := nation_nature ;
77245: LD_ADDR_OWVAR 21
77249: PUSH
77250: LD_INT 0
77252: ST_TO_ADDR
// uc_side := 0 ;
77253: LD_ADDR_OWVAR 20
77257: PUSH
77258: LD_INT 0
77260: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
77261: LD_ADDR_OWVAR 29
77265: PUSH
77266: LD_INT 12
77268: PUSH
77269: LD_INT 12
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: ST_TO_ADDR
// hc_agressivity := 20 ;
77276: LD_ADDR_OWVAR 35
77280: PUSH
77281: LD_INT 20
77283: ST_TO_ADDR
// hc_class := class_tiger ;
77284: LD_ADDR_OWVAR 28
77288: PUSH
77289: LD_INT 14
77291: ST_TO_ADDR
// hc_gallery :=  ;
77292: LD_ADDR_OWVAR 33
77296: PUSH
77297: LD_STRING 
77299: ST_TO_ADDR
// hc_name :=  ;
77300: LD_ADDR_OWVAR 26
77304: PUSH
77305: LD_STRING 
77307: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
77308: CALL_OW 44
77312: PPUSH
77313: LD_INT 0
77315: PPUSH
77316: CALL_OW 51
// end ;
77320: GO 77242
77322: POP
77323: POP
// end ;
77324: PPOPN 1
77326: END
// every 0 0$1 trigger StreamModeActive and sBomb do
77327: LD_EXP 72
77331: PUSH
77332: LD_EXP 92
77336: AND
77337: IFFALSE 77346
77339: GO 77341
77341: DISABLE
// StreamSibBomb ;
77342: CALL 77347 0 0
77346: END
// export function StreamSibBomb ; var i , x , y ; begin
77347: LD_INT 0
77349: PPUSH
77350: PPUSH
77351: PPUSH
77352: PPUSH
// result := false ;
77353: LD_ADDR_VAR 0 1
77357: PUSH
77358: LD_INT 0
77360: ST_TO_ADDR
// for i := 1 to 16 do
77361: LD_ADDR_VAR 0 2
77365: PUSH
77366: DOUBLE
77367: LD_INT 1
77369: DEC
77370: ST_TO_ADDR
77371: LD_INT 16
77373: PUSH
77374: FOR_TO
77375: IFFALSE 77574
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
77377: LD_ADDR_VAR 0 3
77381: PUSH
77382: LD_INT 10
77384: PUSH
77385: LD_INT 20
77387: PUSH
77388: LD_INT 30
77390: PUSH
77391: LD_INT 40
77393: PUSH
77394: LD_INT 50
77396: PUSH
77397: LD_INT 60
77399: PUSH
77400: LD_INT 70
77402: PUSH
77403: LD_INT 80
77405: PUSH
77406: LD_INT 90
77408: PUSH
77409: LD_INT 100
77411: PUSH
77412: LD_INT 110
77414: PUSH
77415: LD_INT 120
77417: PUSH
77418: LD_INT 130
77420: PUSH
77421: LD_INT 140
77423: PUSH
77424: LD_INT 150
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: LIST
77431: LIST
77432: LIST
77433: LIST
77434: LIST
77435: LIST
77436: LIST
77437: LIST
77438: LIST
77439: LIST
77440: LIST
77441: LIST
77442: LIST
77443: PUSH
77444: LD_INT 1
77446: PPUSH
77447: LD_INT 15
77449: PPUSH
77450: CALL_OW 12
77454: ARRAY
77455: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
77456: LD_ADDR_VAR 0 4
77460: PUSH
77461: LD_INT 10
77463: PUSH
77464: LD_INT 20
77466: PUSH
77467: LD_INT 30
77469: PUSH
77470: LD_INT 40
77472: PUSH
77473: LD_INT 50
77475: PUSH
77476: LD_INT 60
77478: PUSH
77479: LD_INT 70
77481: PUSH
77482: LD_INT 80
77484: PUSH
77485: LD_INT 90
77487: PUSH
77488: LD_INT 100
77490: PUSH
77491: LD_INT 110
77493: PUSH
77494: LD_INT 120
77496: PUSH
77497: LD_INT 130
77499: PUSH
77500: LD_INT 140
77502: PUSH
77503: LD_INT 150
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: LIST
77510: LIST
77511: LIST
77512: LIST
77513: LIST
77514: LIST
77515: LIST
77516: LIST
77517: LIST
77518: LIST
77519: LIST
77520: LIST
77521: LIST
77522: PUSH
77523: LD_INT 1
77525: PPUSH
77526: LD_INT 15
77528: PPUSH
77529: CALL_OW 12
77533: ARRAY
77534: ST_TO_ADDR
// if ValidHex ( x , y ) then
77535: LD_VAR 0 3
77539: PPUSH
77540: LD_VAR 0 4
77544: PPUSH
77545: CALL_OW 488
77549: IFFALSE 77572
// begin result := [ x , y ] ;
77551: LD_ADDR_VAR 0 1
77555: PUSH
77556: LD_VAR 0 3
77560: PUSH
77561: LD_VAR 0 4
77565: PUSH
77566: EMPTY
77567: LIST
77568: LIST
77569: ST_TO_ADDR
// break ;
77570: GO 77574
// end ; end ;
77572: GO 77374
77574: POP
77575: POP
// if result then
77576: LD_VAR 0 1
77580: IFFALSE 77640
// begin ToLua ( playSibBomb() ) ;
77582: LD_STRING playSibBomb()
77584: PPUSH
77585: CALL_OW 559
// wait ( 0 0$14 ) ;
77589: LD_INT 490
77591: PPUSH
77592: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
77596: LD_VAR 0 1
77600: PUSH
77601: LD_INT 1
77603: ARRAY
77604: PPUSH
77605: LD_VAR 0 1
77609: PUSH
77610: LD_INT 2
77612: ARRAY
77613: PPUSH
77614: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
77618: LD_VAR 0 1
77622: PUSH
77623: LD_INT 1
77625: ARRAY
77626: PPUSH
77627: LD_VAR 0 1
77631: PUSH
77632: LD_INT 2
77634: ARRAY
77635: PPUSH
77636: CALL_OW 429
// end ; end ;
77640: LD_VAR 0 1
77644: RET
// every 0 0$1 trigger StreamModeActive and sReset do
77645: LD_EXP 72
77649: PUSH
77650: LD_EXP 94
77654: AND
77655: IFFALSE 77667
77657: GO 77659
77659: DISABLE
// YouLost (  ) ;
77660: LD_STRING 
77662: PPUSH
77663: CALL_OW 104
77667: END
// every 0 0$1 trigger StreamModeActive and sFog do
77668: LD_EXP 72
77672: PUSH
77673: LD_EXP 93
77677: AND
77678: IFFALSE 77692
77680: GO 77682
77682: DISABLE
// FogOff ( your_side ) ;
77683: LD_OWVAR 2
77687: PPUSH
77688: CALL_OW 344
77692: END
// every 0 0$1 trigger StreamModeActive and sSun do
77693: LD_EXP 72
77697: PUSH
77698: LD_EXP 95
77702: AND
77703: IFFALSE 77731
77705: GO 77707
77707: DISABLE
// begin solar_recharge_percent := 0 ;
77708: LD_ADDR_OWVAR 79
77712: PUSH
77713: LD_INT 0
77715: ST_TO_ADDR
// wait ( 5 5$00 ) ;
77716: LD_INT 10500
77718: PPUSH
77719: CALL_OW 67
// solar_recharge_percent := 100 ;
77723: LD_ADDR_OWVAR 79
77727: PUSH
77728: LD_INT 100
77730: ST_TO_ADDR
// end ;
77731: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
77732: LD_EXP 72
77736: PUSH
77737: LD_EXP 96
77741: AND
77742: IFFALSE 77981
77744: GO 77746
77746: DISABLE
77747: LD_INT 0
77749: PPUSH
77750: PPUSH
77751: PPUSH
// begin tmp := [ ] ;
77752: LD_ADDR_VAR 0 3
77756: PUSH
77757: EMPTY
77758: ST_TO_ADDR
// for i := 1 to 6 do
77759: LD_ADDR_VAR 0 1
77763: PUSH
77764: DOUBLE
77765: LD_INT 1
77767: DEC
77768: ST_TO_ADDR
77769: LD_INT 6
77771: PUSH
77772: FOR_TO
77773: IFFALSE 77878
// begin uc_nation := nation_nature ;
77775: LD_ADDR_OWVAR 21
77779: PUSH
77780: LD_INT 0
77782: ST_TO_ADDR
// uc_side := 0 ;
77783: LD_ADDR_OWVAR 20
77787: PUSH
77788: LD_INT 0
77790: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
77791: LD_ADDR_OWVAR 29
77795: PUSH
77796: LD_INT 12
77798: PUSH
77799: LD_INT 12
77801: PUSH
77802: EMPTY
77803: LIST
77804: LIST
77805: ST_TO_ADDR
// hc_agressivity := 20 ;
77806: LD_ADDR_OWVAR 35
77810: PUSH
77811: LD_INT 20
77813: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
77814: LD_ADDR_OWVAR 28
77818: PUSH
77819: LD_INT 17
77821: ST_TO_ADDR
// hc_gallery :=  ;
77822: LD_ADDR_OWVAR 33
77826: PUSH
77827: LD_STRING 
77829: ST_TO_ADDR
// hc_name :=  ;
77830: LD_ADDR_OWVAR 26
77834: PUSH
77835: LD_STRING 
77837: ST_TO_ADDR
// un := CreateHuman ;
77838: LD_ADDR_VAR 0 2
77842: PUSH
77843: CALL_OW 44
77847: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
77848: LD_VAR 0 2
77852: PPUSH
77853: LD_INT 1
77855: PPUSH
77856: CALL_OW 51
// tmp := tmp ^ un ;
77860: LD_ADDR_VAR 0 3
77864: PUSH
77865: LD_VAR 0 3
77869: PUSH
77870: LD_VAR 0 2
77874: ADD
77875: ST_TO_ADDR
// end ;
77876: GO 77772
77878: POP
77879: POP
// repeat wait ( 0 0$1 ) ;
77880: LD_INT 35
77882: PPUSH
77883: CALL_OW 67
// for un in tmp do
77887: LD_ADDR_VAR 0 2
77891: PUSH
77892: LD_VAR 0 3
77896: PUSH
77897: FOR_IN
77898: IFFALSE 77972
// begin if IsDead ( un ) then
77900: LD_VAR 0 2
77904: PPUSH
77905: CALL_OW 301
77909: IFFALSE 77929
// begin tmp := tmp diff un ;
77911: LD_ADDR_VAR 0 3
77915: PUSH
77916: LD_VAR 0 3
77920: PUSH
77921: LD_VAR 0 2
77925: DIFF
77926: ST_TO_ADDR
// continue ;
77927: GO 77897
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
77929: LD_VAR 0 2
77933: PPUSH
77934: LD_INT 3
77936: PUSH
77937: LD_INT 22
77939: PUSH
77940: LD_INT 0
77942: PUSH
77943: EMPTY
77944: LIST
77945: LIST
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: PPUSH
77951: CALL_OW 69
77955: PPUSH
77956: LD_VAR 0 2
77960: PPUSH
77961: CALL_OW 74
77965: PPUSH
77966: CALL_OW 115
// end ;
77970: GO 77897
77972: POP
77973: POP
// until not tmp ;
77974: LD_VAR 0 3
77978: NOT
77979: IFFALSE 77880
// end ;
77981: PPOPN 3
77983: END
// every 0 0$1 trigger StreamModeActive and sTroll do
77984: LD_EXP 72
77988: PUSH
77989: LD_EXP 97
77993: AND
77994: IFFALSE 78048
77996: GO 77998
77998: DISABLE
// begin ToLua ( displayTroll(); ) ;
77999: LD_STRING displayTroll();
78001: PPUSH
78002: CALL_OW 559
// wait ( 3 3$00 ) ;
78006: LD_INT 6300
78008: PPUSH
78009: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78013: LD_STRING hideTroll();
78015: PPUSH
78016: CALL_OW 559
// wait ( 1 1$00 ) ;
78020: LD_INT 2100
78022: PPUSH
78023: CALL_OW 67
// ToLua ( displayTroll(); ) ;
78027: LD_STRING displayTroll();
78029: PPUSH
78030: CALL_OW 559
// wait ( 1 1$00 ) ;
78034: LD_INT 2100
78036: PPUSH
78037: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78041: LD_STRING hideTroll();
78043: PPUSH
78044: CALL_OW 559
// end ;
78048: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
78049: LD_EXP 72
78053: PUSH
78054: LD_EXP 98
78058: AND
78059: IFFALSE 78122
78061: GO 78063
78063: DISABLE
78064: LD_INT 0
78066: PPUSH
// begin p := 0 ;
78067: LD_ADDR_VAR 0 1
78071: PUSH
78072: LD_INT 0
78074: ST_TO_ADDR
// repeat game_speed := 1 ;
78075: LD_ADDR_OWVAR 65
78079: PUSH
78080: LD_INT 1
78082: ST_TO_ADDR
// wait ( 0 0$1 ) ;
78083: LD_INT 35
78085: PPUSH
78086: CALL_OW 67
// p := p + 1 ;
78090: LD_ADDR_VAR 0 1
78094: PUSH
78095: LD_VAR 0 1
78099: PUSH
78100: LD_INT 1
78102: PLUS
78103: ST_TO_ADDR
// until p >= 60 ;
78104: LD_VAR 0 1
78108: PUSH
78109: LD_INT 60
78111: GREATEREQUAL
78112: IFFALSE 78075
// game_speed := 4 ;
78114: LD_ADDR_OWVAR 65
78118: PUSH
78119: LD_INT 4
78121: ST_TO_ADDR
// end ;
78122: PPOPN 1
78124: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
78125: LD_EXP 72
78129: PUSH
78130: LD_EXP 99
78134: AND
78135: IFFALSE 78281
78137: GO 78139
78139: DISABLE
78140: LD_INT 0
78142: PPUSH
78143: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78144: LD_ADDR_VAR 0 1
78148: PUSH
78149: LD_INT 22
78151: PUSH
78152: LD_OWVAR 2
78156: PUSH
78157: EMPTY
78158: LIST
78159: LIST
78160: PUSH
78161: LD_INT 2
78163: PUSH
78164: LD_INT 30
78166: PUSH
78167: LD_INT 0
78169: PUSH
78170: EMPTY
78171: LIST
78172: LIST
78173: PUSH
78174: LD_INT 30
78176: PUSH
78177: LD_INT 1
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: LIST
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: PPUSH
78193: CALL_OW 69
78197: ST_TO_ADDR
// if not depot then
78198: LD_VAR 0 1
78202: NOT
78203: IFFALSE 78207
// exit ;
78205: GO 78281
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
78207: LD_ADDR_VAR 0 2
78211: PUSH
78212: LD_VAR 0 1
78216: PUSH
78217: LD_INT 1
78219: PPUSH
78220: LD_VAR 0 1
78224: PPUSH
78225: CALL_OW 12
78229: ARRAY
78230: PPUSH
78231: CALL_OW 274
78235: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
78236: LD_VAR 0 2
78240: PPUSH
78241: LD_INT 1
78243: PPUSH
78244: LD_INT 0
78246: PPUSH
78247: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
78251: LD_VAR 0 2
78255: PPUSH
78256: LD_INT 2
78258: PPUSH
78259: LD_INT 0
78261: PPUSH
78262: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
78266: LD_VAR 0 2
78270: PPUSH
78271: LD_INT 3
78273: PPUSH
78274: LD_INT 0
78276: PPUSH
78277: CALL_OW 277
// end ;
78281: PPOPN 2
78283: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
78284: LD_EXP 72
78288: PUSH
78289: LD_EXP 100
78293: AND
78294: IFFALSE 78391
78296: GO 78298
78298: DISABLE
78299: LD_INT 0
78301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78302: LD_ADDR_VAR 0 1
78306: PUSH
78307: LD_INT 22
78309: PUSH
78310: LD_OWVAR 2
78314: PUSH
78315: EMPTY
78316: LIST
78317: LIST
78318: PUSH
78319: LD_INT 21
78321: PUSH
78322: LD_INT 1
78324: PUSH
78325: EMPTY
78326: LIST
78327: LIST
78328: PUSH
78329: LD_INT 3
78331: PUSH
78332: LD_INT 23
78334: PUSH
78335: LD_INT 0
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: PUSH
78346: EMPTY
78347: LIST
78348: LIST
78349: LIST
78350: PPUSH
78351: CALL_OW 69
78355: ST_TO_ADDR
// if not tmp then
78356: LD_VAR 0 1
78360: NOT
78361: IFFALSE 78365
// exit ;
78363: GO 78391
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
78365: LD_VAR 0 1
78369: PUSH
78370: LD_INT 1
78372: PPUSH
78373: LD_VAR 0 1
78377: PPUSH
78378: CALL_OW 12
78382: ARRAY
78383: PPUSH
78384: LD_INT 200
78386: PPUSH
78387: CALL_OW 234
// end ;
78391: PPOPN 1
78393: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
78394: LD_EXP 72
78398: PUSH
78399: LD_EXP 101
78403: AND
78404: IFFALSE 78483
78406: GO 78408
78408: DISABLE
78409: LD_INT 0
78411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
78412: LD_ADDR_VAR 0 1
78416: PUSH
78417: LD_INT 22
78419: PUSH
78420: LD_OWVAR 2
78424: PUSH
78425: EMPTY
78426: LIST
78427: LIST
78428: PUSH
78429: LD_INT 21
78431: PUSH
78432: LD_INT 2
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: PUSH
78439: EMPTY
78440: LIST
78441: LIST
78442: PPUSH
78443: CALL_OW 69
78447: ST_TO_ADDR
// if not tmp then
78448: LD_VAR 0 1
78452: NOT
78453: IFFALSE 78457
// exit ;
78455: GO 78483
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
78457: LD_VAR 0 1
78461: PUSH
78462: LD_INT 1
78464: PPUSH
78465: LD_VAR 0 1
78469: PPUSH
78470: CALL_OW 12
78474: ARRAY
78475: PPUSH
78476: LD_INT 60
78478: PPUSH
78479: CALL_OW 234
// end ;
78483: PPOPN 1
78485: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
78486: LD_EXP 72
78490: PUSH
78491: LD_EXP 102
78495: AND
78496: IFFALSE 78595
78498: GO 78500
78500: DISABLE
78501: LD_INT 0
78503: PPUSH
78504: PPUSH
// begin enable ;
78505: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
78506: LD_ADDR_VAR 0 1
78510: PUSH
78511: LD_INT 22
78513: PUSH
78514: LD_OWVAR 2
78518: PUSH
78519: EMPTY
78520: LIST
78521: LIST
78522: PUSH
78523: LD_INT 61
78525: PUSH
78526: EMPTY
78527: LIST
78528: PUSH
78529: LD_INT 33
78531: PUSH
78532: LD_INT 2
78534: PUSH
78535: EMPTY
78536: LIST
78537: LIST
78538: PUSH
78539: EMPTY
78540: LIST
78541: LIST
78542: LIST
78543: PPUSH
78544: CALL_OW 69
78548: ST_TO_ADDR
// if not tmp then
78549: LD_VAR 0 1
78553: NOT
78554: IFFALSE 78558
// exit ;
78556: GO 78595
// for i in tmp do
78558: LD_ADDR_VAR 0 2
78562: PUSH
78563: LD_VAR 0 1
78567: PUSH
78568: FOR_IN
78569: IFFALSE 78593
// if IsControledBy ( i ) then
78571: LD_VAR 0 2
78575: PPUSH
78576: CALL_OW 312
78580: IFFALSE 78591
// ComUnlink ( i ) ;
78582: LD_VAR 0 2
78586: PPUSH
78587: CALL_OW 136
78591: GO 78568
78593: POP
78594: POP
// end ;
78595: PPOPN 2
78597: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
78598: LD_EXP 72
78602: PUSH
78603: LD_EXP 103
78607: AND
78608: IFFALSE 78748
78610: GO 78612
78612: DISABLE
78613: LD_INT 0
78615: PPUSH
78616: PPUSH
// begin ToLua ( displayPowell(); ) ;
78617: LD_STRING displayPowell();
78619: PPUSH
78620: CALL_OW 559
// uc_side := 0 ;
78624: LD_ADDR_OWVAR 20
78628: PUSH
78629: LD_INT 0
78631: ST_TO_ADDR
// uc_nation := 2 ;
78632: LD_ADDR_OWVAR 21
78636: PUSH
78637: LD_INT 2
78639: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
78640: LD_ADDR_OWVAR 37
78644: PUSH
78645: LD_INT 14
78647: ST_TO_ADDR
// vc_engine := engine_siberite ;
78648: LD_ADDR_OWVAR 39
78652: PUSH
78653: LD_INT 3
78655: ST_TO_ADDR
// vc_control := control_apeman ;
78656: LD_ADDR_OWVAR 38
78660: PUSH
78661: LD_INT 5
78663: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
78664: LD_ADDR_OWVAR 40
78668: PUSH
78669: LD_INT 29
78671: ST_TO_ADDR
// un := CreateVehicle ;
78672: LD_ADDR_VAR 0 2
78676: PUSH
78677: CALL_OW 45
78681: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78682: LD_VAR 0 2
78686: PPUSH
78687: LD_INT 1
78689: PPUSH
78690: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
78694: LD_INT 35
78696: PPUSH
78697: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
78701: LD_VAR 0 2
78705: PPUSH
78706: LD_INT 22
78708: PUSH
78709: LD_OWVAR 2
78713: PUSH
78714: EMPTY
78715: LIST
78716: LIST
78717: PPUSH
78718: CALL_OW 69
78722: PPUSH
78723: LD_VAR 0 2
78727: PPUSH
78728: CALL_OW 74
78732: PPUSH
78733: CALL_OW 115
// until IsDead ( un ) ;
78737: LD_VAR 0 2
78741: PPUSH
78742: CALL_OW 301
78746: IFFALSE 78694
// end ;
78748: PPOPN 2
78750: END
// every 0 0$1 trigger StreamModeActive and sStu do
78751: LD_EXP 72
78755: PUSH
78756: LD_EXP 111
78760: AND
78761: IFFALSE 78777
78763: GO 78765
78765: DISABLE
// begin ToLua ( displayStucuk(); ) ;
78766: LD_STRING displayStucuk();
78768: PPUSH
78769: CALL_OW 559
// ResetFog ;
78773: CALL_OW 335
// end ;
78777: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
78778: LD_EXP 72
78782: PUSH
78783: LD_EXP 104
78787: AND
78788: IFFALSE 78929
78790: GO 78792
78792: DISABLE
78793: LD_INT 0
78795: PPUSH
78796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78797: LD_ADDR_VAR 0 2
78801: PUSH
78802: LD_INT 22
78804: PUSH
78805: LD_OWVAR 2
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: PUSH
78814: LD_INT 21
78816: PUSH
78817: LD_INT 1
78819: PUSH
78820: EMPTY
78821: LIST
78822: LIST
78823: PUSH
78824: EMPTY
78825: LIST
78826: LIST
78827: PPUSH
78828: CALL_OW 69
78832: ST_TO_ADDR
// if not tmp then
78833: LD_VAR 0 2
78837: NOT
78838: IFFALSE 78842
// exit ;
78840: GO 78929
// un := tmp [ rand ( 1 , tmp ) ] ;
78842: LD_ADDR_VAR 0 1
78846: PUSH
78847: LD_VAR 0 2
78851: PUSH
78852: LD_INT 1
78854: PPUSH
78855: LD_VAR 0 2
78859: PPUSH
78860: CALL_OW 12
78864: ARRAY
78865: ST_TO_ADDR
// SetSide ( un , 0 ) ;
78866: LD_VAR 0 1
78870: PPUSH
78871: LD_INT 0
78873: PPUSH
78874: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
78878: LD_VAR 0 1
78882: PPUSH
78883: LD_OWVAR 3
78887: PUSH
78888: LD_VAR 0 1
78892: DIFF
78893: PPUSH
78894: LD_VAR 0 1
78898: PPUSH
78899: CALL_OW 74
78903: PPUSH
78904: CALL_OW 115
// wait ( 0 0$20 ) ;
78908: LD_INT 700
78910: PPUSH
78911: CALL_OW 67
// SetSide ( un , your_side ) ;
78915: LD_VAR 0 1
78919: PPUSH
78920: LD_OWVAR 2
78924: PPUSH
78925: CALL_OW 235
// end ;
78929: PPOPN 2
78931: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
78932: LD_EXP 72
78936: PUSH
78937: LD_EXP 105
78941: AND
78942: IFFALSE 79048
78944: GO 78946
78946: DISABLE
78947: LD_INT 0
78949: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78950: LD_ADDR_VAR 0 1
78954: PUSH
78955: LD_INT 22
78957: PUSH
78958: LD_OWVAR 2
78962: PUSH
78963: EMPTY
78964: LIST
78965: LIST
78966: PUSH
78967: LD_INT 2
78969: PUSH
78970: LD_INT 30
78972: PUSH
78973: LD_INT 0
78975: PUSH
78976: EMPTY
78977: LIST
78978: LIST
78979: PUSH
78980: LD_INT 30
78982: PUSH
78983: LD_INT 1
78985: PUSH
78986: EMPTY
78987: LIST
78988: LIST
78989: PUSH
78990: EMPTY
78991: LIST
78992: LIST
78993: LIST
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: PPUSH
78999: CALL_OW 69
79003: ST_TO_ADDR
// if not depot then
79004: LD_VAR 0 1
79008: NOT
79009: IFFALSE 79013
// exit ;
79011: GO 79048
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
79013: LD_VAR 0 1
79017: PUSH
79018: LD_INT 1
79020: ARRAY
79021: PPUSH
79022: CALL_OW 250
79026: PPUSH
79027: LD_VAR 0 1
79031: PUSH
79032: LD_INT 1
79034: ARRAY
79035: PPUSH
79036: CALL_OW 251
79040: PPUSH
79041: LD_INT 70
79043: PPUSH
79044: CALL_OW 495
// end ;
79048: PPOPN 1
79050: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
79051: LD_EXP 72
79055: PUSH
79056: LD_EXP 106
79060: AND
79061: IFFALSE 79272
79063: GO 79065
79065: DISABLE
79066: LD_INT 0
79068: PPUSH
79069: PPUSH
79070: PPUSH
79071: PPUSH
79072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79073: LD_ADDR_VAR 0 5
79077: PUSH
79078: LD_INT 22
79080: PUSH
79081: LD_OWVAR 2
79085: PUSH
79086: EMPTY
79087: LIST
79088: LIST
79089: PUSH
79090: LD_INT 21
79092: PUSH
79093: LD_INT 1
79095: PUSH
79096: EMPTY
79097: LIST
79098: LIST
79099: PUSH
79100: EMPTY
79101: LIST
79102: LIST
79103: PPUSH
79104: CALL_OW 69
79108: ST_TO_ADDR
// if not tmp then
79109: LD_VAR 0 5
79113: NOT
79114: IFFALSE 79118
// exit ;
79116: GO 79272
// for i in tmp do
79118: LD_ADDR_VAR 0 1
79122: PUSH
79123: LD_VAR 0 5
79127: PUSH
79128: FOR_IN
79129: IFFALSE 79270
// begin d := rand ( 0 , 5 ) ;
79131: LD_ADDR_VAR 0 4
79135: PUSH
79136: LD_INT 0
79138: PPUSH
79139: LD_INT 5
79141: PPUSH
79142: CALL_OW 12
79146: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
79147: LD_ADDR_VAR 0 2
79151: PUSH
79152: LD_VAR 0 1
79156: PPUSH
79157: CALL_OW 250
79161: PPUSH
79162: LD_VAR 0 4
79166: PPUSH
79167: LD_INT 3
79169: PPUSH
79170: LD_INT 12
79172: PPUSH
79173: CALL_OW 12
79177: PPUSH
79178: CALL_OW 272
79182: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
79183: LD_ADDR_VAR 0 3
79187: PUSH
79188: LD_VAR 0 1
79192: PPUSH
79193: CALL_OW 251
79197: PPUSH
79198: LD_VAR 0 4
79202: PPUSH
79203: LD_INT 3
79205: PPUSH
79206: LD_INT 12
79208: PPUSH
79209: CALL_OW 12
79213: PPUSH
79214: CALL_OW 273
79218: ST_TO_ADDR
// if ValidHex ( x , y ) then
79219: LD_VAR 0 2
79223: PPUSH
79224: LD_VAR 0 3
79228: PPUSH
79229: CALL_OW 488
79233: IFFALSE 79268
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
79235: LD_VAR 0 1
79239: PPUSH
79240: LD_VAR 0 2
79244: PPUSH
79245: LD_VAR 0 3
79249: PPUSH
79250: LD_INT 3
79252: PPUSH
79253: LD_INT 6
79255: PPUSH
79256: CALL_OW 12
79260: PPUSH
79261: LD_INT 1
79263: PPUSH
79264: CALL_OW 483
// end ;
79268: GO 79128
79270: POP
79271: POP
// end ;
79272: PPOPN 5
79274: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
79275: LD_EXP 72
79279: PUSH
79280: LD_EXP 107
79284: AND
79285: IFFALSE 79379
79287: GO 79289
79289: DISABLE
79290: LD_INT 0
79292: PPUSH
79293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
79294: LD_ADDR_VAR 0 2
79298: PUSH
79299: LD_INT 22
79301: PUSH
79302: LD_OWVAR 2
79306: PUSH
79307: EMPTY
79308: LIST
79309: LIST
79310: PUSH
79311: LD_INT 32
79313: PUSH
79314: LD_INT 1
79316: PUSH
79317: EMPTY
79318: LIST
79319: LIST
79320: PUSH
79321: LD_INT 21
79323: PUSH
79324: LD_INT 2
79326: PUSH
79327: EMPTY
79328: LIST
79329: LIST
79330: PUSH
79331: EMPTY
79332: LIST
79333: LIST
79334: LIST
79335: PPUSH
79336: CALL_OW 69
79340: ST_TO_ADDR
// if not tmp then
79341: LD_VAR 0 2
79345: NOT
79346: IFFALSE 79350
// exit ;
79348: GO 79379
// for i in tmp do
79350: LD_ADDR_VAR 0 1
79354: PUSH
79355: LD_VAR 0 2
79359: PUSH
79360: FOR_IN
79361: IFFALSE 79377
// SetFuel ( i , 0 ) ;
79363: LD_VAR 0 1
79367: PPUSH
79368: LD_INT 0
79370: PPUSH
79371: CALL_OW 240
79375: GO 79360
79377: POP
79378: POP
// end ;
79379: PPOPN 2
79381: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
79382: LD_EXP 72
79386: PUSH
79387: LD_EXP 108
79391: AND
79392: IFFALSE 79458
79394: GO 79396
79396: DISABLE
79397: LD_INT 0
79399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79400: LD_ADDR_VAR 0 1
79404: PUSH
79405: LD_INT 22
79407: PUSH
79408: LD_OWVAR 2
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: PUSH
79417: LD_INT 30
79419: PUSH
79420: LD_INT 29
79422: PUSH
79423: EMPTY
79424: LIST
79425: LIST
79426: PUSH
79427: EMPTY
79428: LIST
79429: LIST
79430: PPUSH
79431: CALL_OW 69
79435: ST_TO_ADDR
// if not tmp then
79436: LD_VAR 0 1
79440: NOT
79441: IFFALSE 79445
// exit ;
79443: GO 79458
// DestroyUnit ( tmp [ 1 ] ) ;
79445: LD_VAR 0 1
79449: PUSH
79450: LD_INT 1
79452: ARRAY
79453: PPUSH
79454: CALL_OW 65
// end ;
79458: PPOPN 1
79460: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
79461: LD_EXP 72
79465: PUSH
79466: LD_EXP 110
79470: AND
79471: IFFALSE 79600
79473: GO 79475
79475: DISABLE
79476: LD_INT 0
79478: PPUSH
// begin uc_side := 0 ;
79479: LD_ADDR_OWVAR 20
79483: PUSH
79484: LD_INT 0
79486: ST_TO_ADDR
// uc_nation := nation_arabian ;
79487: LD_ADDR_OWVAR 21
79491: PUSH
79492: LD_INT 2
79494: ST_TO_ADDR
// hc_gallery :=  ;
79495: LD_ADDR_OWVAR 33
79499: PUSH
79500: LD_STRING 
79502: ST_TO_ADDR
// hc_name :=  ;
79503: LD_ADDR_OWVAR 26
79507: PUSH
79508: LD_STRING 
79510: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
79511: LD_INT 1
79513: PPUSH
79514: LD_INT 11
79516: PPUSH
79517: LD_INT 10
79519: PPUSH
79520: CALL_OW 380
// un := CreateHuman ;
79524: LD_ADDR_VAR 0 1
79528: PUSH
79529: CALL_OW 44
79533: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79534: LD_VAR 0 1
79538: PPUSH
79539: LD_INT 1
79541: PPUSH
79542: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
79546: LD_INT 35
79548: PPUSH
79549: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
79553: LD_VAR 0 1
79557: PPUSH
79558: LD_INT 22
79560: PUSH
79561: LD_OWVAR 2
79565: PUSH
79566: EMPTY
79567: LIST
79568: LIST
79569: PPUSH
79570: CALL_OW 69
79574: PPUSH
79575: LD_VAR 0 1
79579: PPUSH
79580: CALL_OW 74
79584: PPUSH
79585: CALL_OW 115
// until IsDead ( un ) ;
79589: LD_VAR 0 1
79593: PPUSH
79594: CALL_OW 301
79598: IFFALSE 79546
// end ;
79600: PPOPN 1
79602: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
79603: LD_EXP 72
79607: PUSH
79608: LD_EXP 112
79612: AND
79613: IFFALSE 79625
79615: GO 79617
79617: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
79618: LD_STRING earthquake(getX(game), 0, 32)
79620: PPUSH
79621: CALL_OW 559
79625: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
79626: LD_EXP 72
79630: PUSH
79631: LD_EXP 113
79635: AND
79636: IFFALSE 79727
79638: GO 79640
79640: DISABLE
79641: LD_INT 0
79643: PPUSH
// begin enable ;
79644: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
79645: LD_ADDR_VAR 0 1
79649: PUSH
79650: LD_INT 22
79652: PUSH
79653: LD_OWVAR 2
79657: PUSH
79658: EMPTY
79659: LIST
79660: LIST
79661: PUSH
79662: LD_INT 21
79664: PUSH
79665: LD_INT 2
79667: PUSH
79668: EMPTY
79669: LIST
79670: LIST
79671: PUSH
79672: LD_INT 33
79674: PUSH
79675: LD_INT 3
79677: PUSH
79678: EMPTY
79679: LIST
79680: LIST
79681: PUSH
79682: EMPTY
79683: LIST
79684: LIST
79685: LIST
79686: PPUSH
79687: CALL_OW 69
79691: ST_TO_ADDR
// if not tmp then
79692: LD_VAR 0 1
79696: NOT
79697: IFFALSE 79701
// exit ;
79699: GO 79727
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
79701: LD_VAR 0 1
79705: PUSH
79706: LD_INT 1
79708: PPUSH
79709: LD_VAR 0 1
79713: PPUSH
79714: CALL_OW 12
79718: ARRAY
79719: PPUSH
79720: LD_INT 1
79722: PPUSH
79723: CALL_OW 234
// end ;
79727: PPOPN 1
79729: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
79730: LD_EXP 72
79734: PUSH
79735: LD_EXP 114
79739: AND
79740: IFFALSE 79881
79742: GO 79744
79744: DISABLE
79745: LD_INT 0
79747: PPUSH
79748: PPUSH
79749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79750: LD_ADDR_VAR 0 3
79754: PUSH
79755: LD_INT 22
79757: PUSH
79758: LD_OWVAR 2
79762: PUSH
79763: EMPTY
79764: LIST
79765: LIST
79766: PUSH
79767: LD_INT 25
79769: PUSH
79770: LD_INT 1
79772: PUSH
79773: EMPTY
79774: LIST
79775: LIST
79776: PUSH
79777: EMPTY
79778: LIST
79779: LIST
79780: PPUSH
79781: CALL_OW 69
79785: ST_TO_ADDR
// if not tmp then
79786: LD_VAR 0 3
79790: NOT
79791: IFFALSE 79795
// exit ;
79793: GO 79881
// un := tmp [ rand ( 1 , tmp ) ] ;
79795: LD_ADDR_VAR 0 2
79799: PUSH
79800: LD_VAR 0 3
79804: PUSH
79805: LD_INT 1
79807: PPUSH
79808: LD_VAR 0 3
79812: PPUSH
79813: CALL_OW 12
79817: ARRAY
79818: ST_TO_ADDR
// if Crawls ( un ) then
79819: LD_VAR 0 2
79823: PPUSH
79824: CALL_OW 318
79828: IFFALSE 79839
// ComWalk ( un ) ;
79830: LD_VAR 0 2
79834: PPUSH
79835: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
79839: LD_VAR 0 2
79843: PPUSH
79844: LD_INT 9
79846: PPUSH
79847: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
79851: LD_INT 28
79853: PPUSH
79854: LD_OWVAR 2
79858: PPUSH
79859: LD_INT 2
79861: PPUSH
79862: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
79866: LD_INT 29
79868: PPUSH
79869: LD_OWVAR 2
79873: PPUSH
79874: LD_INT 2
79876: PPUSH
79877: CALL_OW 322
// end ;
79881: PPOPN 3
79883: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
79884: LD_EXP 72
79888: PUSH
79889: LD_EXP 115
79893: AND
79894: IFFALSE 80005
79896: GO 79898
79898: DISABLE
79899: LD_INT 0
79901: PPUSH
79902: PPUSH
79903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79904: LD_ADDR_VAR 0 3
79908: PUSH
79909: LD_INT 22
79911: PUSH
79912: LD_OWVAR 2
79916: PUSH
79917: EMPTY
79918: LIST
79919: LIST
79920: PUSH
79921: LD_INT 25
79923: PUSH
79924: LD_INT 1
79926: PUSH
79927: EMPTY
79928: LIST
79929: LIST
79930: PUSH
79931: EMPTY
79932: LIST
79933: LIST
79934: PPUSH
79935: CALL_OW 69
79939: ST_TO_ADDR
// if not tmp then
79940: LD_VAR 0 3
79944: NOT
79945: IFFALSE 79949
// exit ;
79947: GO 80005
// un := tmp [ rand ( 1 , tmp ) ] ;
79949: LD_ADDR_VAR 0 2
79953: PUSH
79954: LD_VAR 0 3
79958: PUSH
79959: LD_INT 1
79961: PPUSH
79962: LD_VAR 0 3
79966: PPUSH
79967: CALL_OW 12
79971: ARRAY
79972: ST_TO_ADDR
// if Crawls ( un ) then
79973: LD_VAR 0 2
79977: PPUSH
79978: CALL_OW 318
79982: IFFALSE 79993
// ComWalk ( un ) ;
79984: LD_VAR 0 2
79988: PPUSH
79989: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79993: LD_VAR 0 2
79997: PPUSH
79998: LD_INT 8
80000: PPUSH
80001: CALL_OW 336
// end ;
80005: PPOPN 3
80007: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
80008: LD_EXP 72
80012: PUSH
80013: LD_EXP 116
80017: AND
80018: IFFALSE 80162
80020: GO 80022
80022: DISABLE
80023: LD_INT 0
80025: PPUSH
80026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
80027: LD_ADDR_VAR 0 2
80031: PUSH
80032: LD_INT 22
80034: PUSH
80035: LD_OWVAR 2
80039: PUSH
80040: EMPTY
80041: LIST
80042: LIST
80043: PUSH
80044: LD_INT 21
80046: PUSH
80047: LD_INT 2
80049: PUSH
80050: EMPTY
80051: LIST
80052: LIST
80053: PUSH
80054: LD_INT 2
80056: PUSH
80057: LD_INT 34
80059: PUSH
80060: LD_INT 12
80062: PUSH
80063: EMPTY
80064: LIST
80065: LIST
80066: PUSH
80067: LD_INT 34
80069: PUSH
80070: LD_INT 51
80072: PUSH
80073: EMPTY
80074: LIST
80075: LIST
80076: PUSH
80077: LD_INT 34
80079: PUSH
80080: LD_INT 32
80082: PUSH
80083: EMPTY
80084: LIST
80085: LIST
80086: PUSH
80087: EMPTY
80088: LIST
80089: LIST
80090: LIST
80091: LIST
80092: PUSH
80093: EMPTY
80094: LIST
80095: LIST
80096: LIST
80097: PPUSH
80098: CALL_OW 69
80102: ST_TO_ADDR
// if not tmp then
80103: LD_VAR 0 2
80107: NOT
80108: IFFALSE 80112
// exit ;
80110: GO 80162
// for i in tmp do
80112: LD_ADDR_VAR 0 1
80116: PUSH
80117: LD_VAR 0 2
80121: PUSH
80122: FOR_IN
80123: IFFALSE 80160
// if GetCargo ( i , mat_artifact ) = 0 then
80125: LD_VAR 0 1
80129: PPUSH
80130: LD_INT 4
80132: PPUSH
80133: CALL_OW 289
80137: PUSH
80138: LD_INT 0
80140: EQUAL
80141: IFFALSE 80158
// SetCargo ( i , mat_siberit , 100 ) ;
80143: LD_VAR 0 1
80147: PPUSH
80148: LD_INT 3
80150: PPUSH
80151: LD_INT 100
80153: PPUSH
80154: CALL_OW 290
80158: GO 80122
80160: POP
80161: POP
// end ;
80162: PPOPN 2
80164: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
80165: LD_EXP 72
80169: PUSH
80170: LD_EXP 117
80174: AND
80175: IFFALSE 80358
80177: GO 80179
80179: DISABLE
80180: LD_INT 0
80182: PPUSH
80183: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80184: LD_ADDR_VAR 0 2
80188: PUSH
80189: LD_INT 22
80191: PUSH
80192: LD_OWVAR 2
80196: PUSH
80197: EMPTY
80198: LIST
80199: LIST
80200: PPUSH
80201: CALL_OW 69
80205: ST_TO_ADDR
// if not tmp then
80206: LD_VAR 0 2
80210: NOT
80211: IFFALSE 80215
// exit ;
80213: GO 80358
// for i := 1 to 2 do
80215: LD_ADDR_VAR 0 1
80219: PUSH
80220: DOUBLE
80221: LD_INT 1
80223: DEC
80224: ST_TO_ADDR
80225: LD_INT 2
80227: PUSH
80228: FOR_TO
80229: IFFALSE 80356
// begin uc_side := your_side ;
80231: LD_ADDR_OWVAR 20
80235: PUSH
80236: LD_OWVAR 2
80240: ST_TO_ADDR
// uc_nation := nation_american ;
80241: LD_ADDR_OWVAR 21
80245: PUSH
80246: LD_INT 1
80248: ST_TO_ADDR
// vc_chassis := us_morphling ;
80249: LD_ADDR_OWVAR 37
80253: PUSH
80254: LD_INT 5
80256: ST_TO_ADDR
// vc_engine := engine_siberite ;
80257: LD_ADDR_OWVAR 39
80261: PUSH
80262: LD_INT 3
80264: ST_TO_ADDR
// vc_control := control_computer ;
80265: LD_ADDR_OWVAR 38
80269: PUSH
80270: LD_INT 3
80272: ST_TO_ADDR
// vc_weapon := us_double_laser ;
80273: LD_ADDR_OWVAR 40
80277: PUSH
80278: LD_INT 10
80280: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
80281: LD_VAR 0 2
80285: PUSH
80286: LD_INT 1
80288: ARRAY
80289: PPUSH
80290: CALL_OW 310
80294: NOT
80295: IFFALSE 80342
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
80297: CALL_OW 45
80301: PPUSH
80302: LD_VAR 0 2
80306: PUSH
80307: LD_INT 1
80309: ARRAY
80310: PPUSH
80311: CALL_OW 250
80315: PPUSH
80316: LD_VAR 0 2
80320: PUSH
80321: LD_INT 1
80323: ARRAY
80324: PPUSH
80325: CALL_OW 251
80329: PPUSH
80330: LD_INT 12
80332: PPUSH
80333: LD_INT 1
80335: PPUSH
80336: CALL_OW 50
80340: GO 80354
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
80342: CALL_OW 45
80346: PPUSH
80347: LD_INT 1
80349: PPUSH
80350: CALL_OW 51
// end ;
80354: GO 80228
80356: POP
80357: POP
// end ;
80358: PPOPN 2
80360: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
80361: LD_EXP 72
80365: PUSH
80366: LD_EXP 118
80370: AND
80371: IFFALSE 80593
80373: GO 80375
80375: DISABLE
80376: LD_INT 0
80378: PPUSH
80379: PPUSH
80380: PPUSH
80381: PPUSH
80382: PPUSH
80383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80384: LD_ADDR_VAR 0 6
80388: PUSH
80389: LD_INT 22
80391: PUSH
80392: LD_OWVAR 2
80396: PUSH
80397: EMPTY
80398: LIST
80399: LIST
80400: PUSH
80401: LD_INT 21
80403: PUSH
80404: LD_INT 1
80406: PUSH
80407: EMPTY
80408: LIST
80409: LIST
80410: PUSH
80411: LD_INT 3
80413: PUSH
80414: LD_INT 23
80416: PUSH
80417: LD_INT 0
80419: PUSH
80420: EMPTY
80421: LIST
80422: LIST
80423: PUSH
80424: EMPTY
80425: LIST
80426: LIST
80427: PUSH
80428: EMPTY
80429: LIST
80430: LIST
80431: LIST
80432: PPUSH
80433: CALL_OW 69
80437: ST_TO_ADDR
// if not tmp then
80438: LD_VAR 0 6
80442: NOT
80443: IFFALSE 80447
// exit ;
80445: GO 80593
// s1 := rand ( 1 , 4 ) ;
80447: LD_ADDR_VAR 0 2
80451: PUSH
80452: LD_INT 1
80454: PPUSH
80455: LD_INT 4
80457: PPUSH
80458: CALL_OW 12
80462: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
80463: LD_ADDR_VAR 0 4
80467: PUSH
80468: LD_VAR 0 6
80472: PUSH
80473: LD_INT 1
80475: ARRAY
80476: PPUSH
80477: LD_VAR 0 2
80481: PPUSH
80482: CALL_OW 259
80486: ST_TO_ADDR
// if s1 = 1 then
80487: LD_VAR 0 2
80491: PUSH
80492: LD_INT 1
80494: EQUAL
80495: IFFALSE 80515
// s2 := rand ( 2 , 4 ) else
80497: LD_ADDR_VAR 0 3
80501: PUSH
80502: LD_INT 2
80504: PPUSH
80505: LD_INT 4
80507: PPUSH
80508: CALL_OW 12
80512: ST_TO_ADDR
80513: GO 80523
// s2 := 1 ;
80515: LD_ADDR_VAR 0 3
80519: PUSH
80520: LD_INT 1
80522: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
80523: LD_ADDR_VAR 0 5
80527: PUSH
80528: LD_VAR 0 6
80532: PUSH
80533: LD_INT 1
80535: ARRAY
80536: PPUSH
80537: LD_VAR 0 3
80541: PPUSH
80542: CALL_OW 259
80546: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
80547: LD_VAR 0 6
80551: PUSH
80552: LD_INT 1
80554: ARRAY
80555: PPUSH
80556: LD_VAR 0 2
80560: PPUSH
80561: LD_VAR 0 5
80565: PPUSH
80566: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
80570: LD_VAR 0 6
80574: PUSH
80575: LD_INT 1
80577: ARRAY
80578: PPUSH
80579: LD_VAR 0 3
80583: PPUSH
80584: LD_VAR 0 4
80588: PPUSH
80589: CALL_OW 237
// end ;
80593: PPOPN 6
80595: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
80596: LD_EXP 72
80600: PUSH
80601: LD_EXP 119
80605: AND
80606: IFFALSE 80685
80608: GO 80610
80610: DISABLE
80611: LD_INT 0
80613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
80614: LD_ADDR_VAR 0 1
80618: PUSH
80619: LD_INT 22
80621: PUSH
80622: LD_OWVAR 2
80626: PUSH
80627: EMPTY
80628: LIST
80629: LIST
80630: PUSH
80631: LD_INT 30
80633: PUSH
80634: LD_INT 3
80636: PUSH
80637: EMPTY
80638: LIST
80639: LIST
80640: PUSH
80641: EMPTY
80642: LIST
80643: LIST
80644: PPUSH
80645: CALL_OW 69
80649: ST_TO_ADDR
// if not tmp then
80650: LD_VAR 0 1
80654: NOT
80655: IFFALSE 80659
// exit ;
80657: GO 80685
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80659: LD_VAR 0 1
80663: PUSH
80664: LD_INT 1
80666: PPUSH
80667: LD_VAR 0 1
80671: PPUSH
80672: CALL_OW 12
80676: ARRAY
80677: PPUSH
80678: LD_INT 1
80680: PPUSH
80681: CALL_OW 234
// end ;
80685: PPOPN 1
80687: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
80688: LD_EXP 72
80692: PUSH
80693: LD_EXP 120
80697: AND
80698: IFFALSE 80810
80700: GO 80702
80702: DISABLE
80703: LD_INT 0
80705: PPUSH
80706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
80707: LD_ADDR_VAR 0 2
80711: PUSH
80712: LD_INT 22
80714: PUSH
80715: LD_OWVAR 2
80719: PUSH
80720: EMPTY
80721: LIST
80722: LIST
80723: PUSH
80724: LD_INT 2
80726: PUSH
80727: LD_INT 30
80729: PUSH
80730: LD_INT 27
80732: PUSH
80733: EMPTY
80734: LIST
80735: LIST
80736: PUSH
80737: LD_INT 30
80739: PUSH
80740: LD_INT 26
80742: PUSH
80743: EMPTY
80744: LIST
80745: LIST
80746: PUSH
80747: LD_INT 30
80749: PUSH
80750: LD_INT 28
80752: PUSH
80753: EMPTY
80754: LIST
80755: LIST
80756: PUSH
80757: EMPTY
80758: LIST
80759: LIST
80760: LIST
80761: LIST
80762: PUSH
80763: EMPTY
80764: LIST
80765: LIST
80766: PPUSH
80767: CALL_OW 69
80771: ST_TO_ADDR
// if not tmp then
80772: LD_VAR 0 2
80776: NOT
80777: IFFALSE 80781
// exit ;
80779: GO 80810
// for i in tmp do
80781: LD_ADDR_VAR 0 1
80785: PUSH
80786: LD_VAR 0 2
80790: PUSH
80791: FOR_IN
80792: IFFALSE 80808
// SetLives ( i , 1 ) ;
80794: LD_VAR 0 1
80798: PPUSH
80799: LD_INT 1
80801: PPUSH
80802: CALL_OW 234
80806: GO 80791
80808: POP
80809: POP
// end ;
80810: PPOPN 2
80812: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
80813: LD_EXP 72
80817: PUSH
80818: LD_EXP 121
80822: AND
80823: IFFALSE 81110
80825: GO 80827
80827: DISABLE
80828: LD_INT 0
80830: PPUSH
80831: PPUSH
80832: PPUSH
// begin i := rand ( 1 , 7 ) ;
80833: LD_ADDR_VAR 0 1
80837: PUSH
80838: LD_INT 1
80840: PPUSH
80841: LD_INT 7
80843: PPUSH
80844: CALL_OW 12
80848: ST_TO_ADDR
// case i of 1 :
80849: LD_VAR 0 1
80853: PUSH
80854: LD_INT 1
80856: DOUBLE
80857: EQUAL
80858: IFTRUE 80862
80860: GO 80872
80862: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
80863: LD_STRING earthquake(getX(game), 0, 32)
80865: PPUSH
80866: CALL_OW 559
80870: GO 81110
80872: LD_INT 2
80874: DOUBLE
80875: EQUAL
80876: IFTRUE 80880
80878: GO 80894
80880: POP
// begin ToLua ( displayStucuk(); ) ;
80881: LD_STRING displayStucuk();
80883: PPUSH
80884: CALL_OW 559
// ResetFog ;
80888: CALL_OW 335
// end ; 3 :
80892: GO 81110
80894: LD_INT 3
80896: DOUBLE
80897: EQUAL
80898: IFTRUE 80902
80900: GO 81006
80902: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80903: LD_ADDR_VAR 0 2
80907: PUSH
80908: LD_INT 22
80910: PUSH
80911: LD_OWVAR 2
80915: PUSH
80916: EMPTY
80917: LIST
80918: LIST
80919: PUSH
80920: LD_INT 25
80922: PUSH
80923: LD_INT 1
80925: PUSH
80926: EMPTY
80927: LIST
80928: LIST
80929: PUSH
80930: EMPTY
80931: LIST
80932: LIST
80933: PPUSH
80934: CALL_OW 69
80938: ST_TO_ADDR
// if not tmp then
80939: LD_VAR 0 2
80943: NOT
80944: IFFALSE 80948
// exit ;
80946: GO 81110
// un := tmp [ rand ( 1 , tmp ) ] ;
80948: LD_ADDR_VAR 0 3
80952: PUSH
80953: LD_VAR 0 2
80957: PUSH
80958: LD_INT 1
80960: PPUSH
80961: LD_VAR 0 2
80965: PPUSH
80966: CALL_OW 12
80970: ARRAY
80971: ST_TO_ADDR
// if Crawls ( un ) then
80972: LD_VAR 0 3
80976: PPUSH
80977: CALL_OW 318
80981: IFFALSE 80992
// ComWalk ( un ) ;
80983: LD_VAR 0 3
80987: PPUSH
80988: CALL_OW 138
// SetClass ( un , class_mortar ) ;
80992: LD_VAR 0 3
80996: PPUSH
80997: LD_INT 8
80999: PPUSH
81000: CALL_OW 336
// end ; 4 :
81004: GO 81110
81006: LD_INT 4
81008: DOUBLE
81009: EQUAL
81010: IFTRUE 81014
81012: GO 81088
81014: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81015: LD_ADDR_VAR 0 2
81019: PUSH
81020: LD_INT 22
81022: PUSH
81023: LD_OWVAR 2
81027: PUSH
81028: EMPTY
81029: LIST
81030: LIST
81031: PUSH
81032: LD_INT 30
81034: PUSH
81035: LD_INT 29
81037: PUSH
81038: EMPTY
81039: LIST
81040: LIST
81041: PUSH
81042: EMPTY
81043: LIST
81044: LIST
81045: PPUSH
81046: CALL_OW 69
81050: ST_TO_ADDR
// if not tmp then
81051: LD_VAR 0 2
81055: NOT
81056: IFFALSE 81060
// exit ;
81058: GO 81110
// CenterNowOnUnits ( tmp [ 1 ] ) ;
81060: LD_VAR 0 2
81064: PUSH
81065: LD_INT 1
81067: ARRAY
81068: PPUSH
81069: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
81073: LD_VAR 0 2
81077: PUSH
81078: LD_INT 1
81080: ARRAY
81081: PPUSH
81082: CALL_OW 65
// end ; 5 .. 7 :
81086: GO 81110
81088: LD_INT 5
81090: DOUBLE
81091: GREATEREQUAL
81092: IFFALSE 81100
81094: LD_INT 7
81096: DOUBLE
81097: LESSEQUAL
81098: IFTRUE 81102
81100: GO 81109
81102: POP
// StreamSibBomb ; end ;
81103: CALL 77347 0 0
81107: GO 81110
81109: POP
// end ;
81110: PPOPN 3
81112: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
81113: LD_EXP 72
81117: PUSH
81118: LD_EXP 122
81122: AND
81123: IFFALSE 81279
81125: GO 81127
81127: DISABLE
81128: LD_INT 0
81130: PPUSH
81131: PPUSH
81132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
81133: LD_ADDR_VAR 0 2
81137: PUSH
81138: LD_INT 81
81140: PUSH
81141: LD_OWVAR 2
81145: PUSH
81146: EMPTY
81147: LIST
81148: LIST
81149: PUSH
81150: LD_INT 2
81152: PUSH
81153: LD_INT 21
81155: PUSH
81156: LD_INT 1
81158: PUSH
81159: EMPTY
81160: LIST
81161: LIST
81162: PUSH
81163: LD_INT 21
81165: PUSH
81166: LD_INT 2
81168: PUSH
81169: EMPTY
81170: LIST
81171: LIST
81172: PUSH
81173: EMPTY
81174: LIST
81175: LIST
81176: LIST
81177: PUSH
81178: EMPTY
81179: LIST
81180: LIST
81181: PPUSH
81182: CALL_OW 69
81186: ST_TO_ADDR
// if not tmp then
81187: LD_VAR 0 2
81191: NOT
81192: IFFALSE 81196
// exit ;
81194: GO 81279
// p := 0 ;
81196: LD_ADDR_VAR 0 3
81200: PUSH
81201: LD_INT 0
81203: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81204: LD_INT 35
81206: PPUSH
81207: CALL_OW 67
// p := p + 1 ;
81211: LD_ADDR_VAR 0 3
81215: PUSH
81216: LD_VAR 0 3
81220: PUSH
81221: LD_INT 1
81223: PLUS
81224: ST_TO_ADDR
// for i in tmp do
81225: LD_ADDR_VAR 0 1
81229: PUSH
81230: LD_VAR 0 2
81234: PUSH
81235: FOR_IN
81236: IFFALSE 81267
// if GetLives ( i ) < 1000 then
81238: LD_VAR 0 1
81242: PPUSH
81243: CALL_OW 256
81247: PUSH
81248: LD_INT 1000
81250: LESS
81251: IFFALSE 81265
// SetLives ( i , 1000 ) ;
81253: LD_VAR 0 1
81257: PPUSH
81258: LD_INT 1000
81260: PPUSH
81261: CALL_OW 234
81265: GO 81235
81267: POP
81268: POP
// until p > 20 ;
81269: LD_VAR 0 3
81273: PUSH
81274: LD_INT 20
81276: GREATER
81277: IFFALSE 81204
// end ;
81279: PPOPN 3
81281: END
// every 0 0$1 trigger StreamModeActive and sTime do
81282: LD_EXP 72
81286: PUSH
81287: LD_EXP 123
81291: AND
81292: IFFALSE 81327
81294: GO 81296
81296: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
81297: LD_INT 28
81299: PPUSH
81300: LD_OWVAR 2
81304: PPUSH
81305: LD_INT 2
81307: PPUSH
81308: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
81312: LD_INT 30
81314: PPUSH
81315: LD_OWVAR 2
81319: PPUSH
81320: LD_INT 2
81322: PPUSH
81323: CALL_OW 322
// end ;
81327: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
81328: LD_EXP 72
81332: PUSH
81333: LD_EXP 124
81337: AND
81338: IFFALSE 81459
81340: GO 81342
81342: DISABLE
81343: LD_INT 0
81345: PPUSH
81346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81347: LD_ADDR_VAR 0 2
81351: PUSH
81352: LD_INT 22
81354: PUSH
81355: LD_OWVAR 2
81359: PUSH
81360: EMPTY
81361: LIST
81362: LIST
81363: PUSH
81364: LD_INT 21
81366: PUSH
81367: LD_INT 1
81369: PUSH
81370: EMPTY
81371: LIST
81372: LIST
81373: PUSH
81374: LD_INT 3
81376: PUSH
81377: LD_INT 23
81379: PUSH
81380: LD_INT 0
81382: PUSH
81383: EMPTY
81384: LIST
81385: LIST
81386: PUSH
81387: EMPTY
81388: LIST
81389: LIST
81390: PUSH
81391: EMPTY
81392: LIST
81393: LIST
81394: LIST
81395: PPUSH
81396: CALL_OW 69
81400: ST_TO_ADDR
// if not tmp then
81401: LD_VAR 0 2
81405: NOT
81406: IFFALSE 81410
// exit ;
81408: GO 81459
// for i in tmp do
81410: LD_ADDR_VAR 0 1
81414: PUSH
81415: LD_VAR 0 2
81419: PUSH
81420: FOR_IN
81421: IFFALSE 81457
// begin if Crawls ( i ) then
81423: LD_VAR 0 1
81427: PPUSH
81428: CALL_OW 318
81432: IFFALSE 81443
// ComWalk ( i ) ;
81434: LD_VAR 0 1
81438: PPUSH
81439: CALL_OW 138
// SetClass ( i , 2 ) ;
81443: LD_VAR 0 1
81447: PPUSH
81448: LD_INT 2
81450: PPUSH
81451: CALL_OW 336
// end ;
81455: GO 81420
81457: POP
81458: POP
// end ;
81459: PPOPN 2
81461: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
81462: LD_EXP 72
81466: PUSH
81467: LD_EXP 125
81471: AND
81472: IFFALSE 81760
81474: GO 81476
81476: DISABLE
81477: LD_INT 0
81479: PPUSH
81480: PPUSH
81481: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
81482: LD_OWVAR 2
81486: PPUSH
81487: LD_INT 9
81489: PPUSH
81490: LD_INT 1
81492: PPUSH
81493: LD_INT 1
81495: PPUSH
81496: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
81500: LD_INT 9
81502: PPUSH
81503: LD_OWVAR 2
81507: PPUSH
81508: CALL_OW 343
// uc_side := 9 ;
81512: LD_ADDR_OWVAR 20
81516: PUSH
81517: LD_INT 9
81519: ST_TO_ADDR
// uc_nation := 2 ;
81520: LD_ADDR_OWVAR 21
81524: PUSH
81525: LD_INT 2
81527: ST_TO_ADDR
// hc_name := Dark Warrior ;
81528: LD_ADDR_OWVAR 26
81532: PUSH
81533: LD_STRING Dark Warrior
81535: ST_TO_ADDR
// hc_gallery :=  ;
81536: LD_ADDR_OWVAR 33
81540: PUSH
81541: LD_STRING 
81543: ST_TO_ADDR
// hc_noskilllimit := true ;
81544: LD_ADDR_OWVAR 76
81548: PUSH
81549: LD_INT 1
81551: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
81552: LD_ADDR_OWVAR 31
81556: PUSH
81557: LD_INT 30
81559: PUSH
81560: LD_INT 30
81562: PUSH
81563: LD_INT 30
81565: PUSH
81566: LD_INT 30
81568: PUSH
81569: EMPTY
81570: LIST
81571: LIST
81572: LIST
81573: LIST
81574: ST_TO_ADDR
// un := CreateHuman ;
81575: LD_ADDR_VAR 0 3
81579: PUSH
81580: CALL_OW 44
81584: ST_TO_ADDR
// hc_noskilllimit := false ;
81585: LD_ADDR_OWVAR 76
81589: PUSH
81590: LD_INT 0
81592: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81593: LD_VAR 0 3
81597: PPUSH
81598: LD_INT 1
81600: PPUSH
81601: CALL_OW 51
// ToLua ( playRanger() ) ;
81605: LD_STRING playRanger()
81607: PPUSH
81608: CALL_OW 559
// p := 0 ;
81612: LD_ADDR_VAR 0 2
81616: PUSH
81617: LD_INT 0
81619: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81620: LD_INT 35
81622: PPUSH
81623: CALL_OW 67
// p := p + 1 ;
81627: LD_ADDR_VAR 0 2
81631: PUSH
81632: LD_VAR 0 2
81636: PUSH
81637: LD_INT 1
81639: PLUS
81640: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
81641: LD_VAR 0 3
81645: PPUSH
81646: CALL_OW 256
81650: PUSH
81651: LD_INT 1000
81653: LESS
81654: IFFALSE 81668
// SetLives ( un , 1000 ) ;
81656: LD_VAR 0 3
81660: PPUSH
81661: LD_INT 1000
81663: PPUSH
81664: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
81668: LD_VAR 0 3
81672: PPUSH
81673: LD_INT 81
81675: PUSH
81676: LD_OWVAR 2
81680: PUSH
81681: EMPTY
81682: LIST
81683: LIST
81684: PUSH
81685: LD_INT 91
81687: PUSH
81688: LD_VAR 0 3
81692: PUSH
81693: LD_INT 30
81695: PUSH
81696: EMPTY
81697: LIST
81698: LIST
81699: LIST
81700: PUSH
81701: EMPTY
81702: LIST
81703: LIST
81704: PPUSH
81705: CALL_OW 69
81709: PPUSH
81710: LD_VAR 0 3
81714: PPUSH
81715: CALL_OW 74
81719: PPUSH
81720: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
81724: LD_VAR 0 2
81728: PUSH
81729: LD_INT 80
81731: GREATER
81732: PUSH
81733: LD_VAR 0 3
81737: PPUSH
81738: CALL_OW 301
81742: OR
81743: IFFALSE 81620
// if un then
81745: LD_VAR 0 3
81749: IFFALSE 81760
// RemoveUnit ( un ) ;
81751: LD_VAR 0 3
81755: PPUSH
81756: CALL_OW 64
// end ;
81760: PPOPN 3
81762: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
81763: LD_EXP 126
81767: IFFALSE 81883
81769: GO 81771
81771: DISABLE
81772: LD_INT 0
81774: PPUSH
81775: PPUSH
81776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
81777: LD_ADDR_VAR 0 2
81781: PUSH
81782: LD_INT 81
81784: PUSH
81785: LD_OWVAR 2
81789: PUSH
81790: EMPTY
81791: LIST
81792: LIST
81793: PUSH
81794: LD_INT 21
81796: PUSH
81797: LD_INT 1
81799: PUSH
81800: EMPTY
81801: LIST
81802: LIST
81803: PUSH
81804: EMPTY
81805: LIST
81806: LIST
81807: PPUSH
81808: CALL_OW 69
81812: ST_TO_ADDR
// ToLua ( playComputer() ) ;
81813: LD_STRING playComputer()
81815: PPUSH
81816: CALL_OW 559
// if not tmp then
81820: LD_VAR 0 2
81824: NOT
81825: IFFALSE 81829
// exit ;
81827: GO 81883
// for i in tmp do
81829: LD_ADDR_VAR 0 1
81833: PUSH
81834: LD_VAR 0 2
81838: PUSH
81839: FOR_IN
81840: IFFALSE 81881
// for j := 1 to 4 do
81842: LD_ADDR_VAR 0 3
81846: PUSH
81847: DOUBLE
81848: LD_INT 1
81850: DEC
81851: ST_TO_ADDR
81852: LD_INT 4
81854: PUSH
81855: FOR_TO
81856: IFFALSE 81877
// SetSkill ( i , j , 10 ) ;
81858: LD_VAR 0 1
81862: PPUSH
81863: LD_VAR 0 3
81867: PPUSH
81868: LD_INT 10
81870: PPUSH
81871: CALL_OW 237
81875: GO 81855
81877: POP
81878: POP
81879: GO 81839
81881: POP
81882: POP
// end ;
81883: PPOPN 3
81885: END
// every 0 0$1 trigger s30 do var i , tmp ;
81886: LD_EXP 127
81890: IFFALSE 81959
81892: GO 81894
81894: DISABLE
81895: LD_INT 0
81897: PPUSH
81898: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81899: LD_ADDR_VAR 0 2
81903: PUSH
81904: LD_INT 22
81906: PUSH
81907: LD_OWVAR 2
81911: PUSH
81912: EMPTY
81913: LIST
81914: LIST
81915: PPUSH
81916: CALL_OW 69
81920: ST_TO_ADDR
// if not tmp then
81921: LD_VAR 0 2
81925: NOT
81926: IFFALSE 81930
// exit ;
81928: GO 81959
// for i in tmp do
81930: LD_ADDR_VAR 0 1
81934: PUSH
81935: LD_VAR 0 2
81939: PUSH
81940: FOR_IN
81941: IFFALSE 81957
// SetLives ( i , 300 ) ;
81943: LD_VAR 0 1
81947: PPUSH
81948: LD_INT 300
81950: PPUSH
81951: CALL_OW 234
81955: GO 81940
81957: POP
81958: POP
// end ;
81959: PPOPN 2
81961: END
// every 0 0$1 trigger s60 do var i , tmp ;
81962: LD_EXP 128
81966: IFFALSE 82035
81968: GO 81970
81970: DISABLE
81971: LD_INT 0
81973: PPUSH
81974: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81975: LD_ADDR_VAR 0 2
81979: PUSH
81980: LD_INT 22
81982: PUSH
81983: LD_OWVAR 2
81987: PUSH
81988: EMPTY
81989: LIST
81990: LIST
81991: PPUSH
81992: CALL_OW 69
81996: ST_TO_ADDR
// if not tmp then
81997: LD_VAR 0 2
82001: NOT
82002: IFFALSE 82006
// exit ;
82004: GO 82035
// for i in tmp do
82006: LD_ADDR_VAR 0 1
82010: PUSH
82011: LD_VAR 0 2
82015: PUSH
82016: FOR_IN
82017: IFFALSE 82033
// SetLives ( i , 600 ) ;
82019: LD_VAR 0 1
82023: PPUSH
82024: LD_INT 600
82026: PPUSH
82027: CALL_OW 234
82031: GO 82016
82033: POP
82034: POP
// end ;
82035: PPOPN 2
82037: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
82038: LD_INT 0
82040: PPUSH
// case cmd of 301 :
82041: LD_VAR 0 1
82045: PUSH
82046: LD_INT 301
82048: DOUBLE
82049: EQUAL
82050: IFTRUE 82054
82052: GO 82086
82054: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
82055: LD_VAR 0 6
82059: PPUSH
82060: LD_VAR 0 7
82064: PPUSH
82065: LD_VAR 0 8
82069: PPUSH
82070: LD_VAR 0 4
82074: PPUSH
82075: LD_VAR 0 5
82079: PPUSH
82080: CALL 83287 0 5
82084: GO 82207
82086: LD_INT 302
82088: DOUBLE
82089: EQUAL
82090: IFTRUE 82094
82092: GO 82131
82094: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
82095: LD_VAR 0 6
82099: PPUSH
82100: LD_VAR 0 7
82104: PPUSH
82105: LD_VAR 0 8
82109: PPUSH
82110: LD_VAR 0 9
82114: PPUSH
82115: LD_VAR 0 4
82119: PPUSH
82120: LD_VAR 0 5
82124: PPUSH
82125: CALL 83378 0 6
82129: GO 82207
82131: LD_INT 303
82133: DOUBLE
82134: EQUAL
82135: IFTRUE 82139
82137: GO 82176
82139: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
82140: LD_VAR 0 6
82144: PPUSH
82145: LD_VAR 0 7
82149: PPUSH
82150: LD_VAR 0 8
82154: PPUSH
82155: LD_VAR 0 9
82159: PPUSH
82160: LD_VAR 0 4
82164: PPUSH
82165: LD_VAR 0 5
82169: PPUSH
82170: CALL 82212 0 6
82174: GO 82207
82176: LD_INT 304
82178: DOUBLE
82179: EQUAL
82180: IFTRUE 82184
82182: GO 82206
82184: POP
// hHackTeleport ( unit , x , y ) ; end ;
82185: LD_VAR 0 2
82189: PPUSH
82190: LD_VAR 0 4
82194: PPUSH
82195: LD_VAR 0 5
82199: PPUSH
82200: CALL 83971 0 3
82204: GO 82207
82206: POP
// end ;
82207: LD_VAR 0 12
82211: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
82212: LD_INT 0
82214: PPUSH
82215: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
82216: LD_VAR 0 1
82220: PUSH
82221: LD_INT 1
82223: LESS
82224: PUSH
82225: LD_VAR 0 1
82229: PUSH
82230: LD_INT 3
82232: GREATER
82233: OR
82234: PUSH
82235: LD_VAR 0 5
82239: PPUSH
82240: LD_VAR 0 6
82244: PPUSH
82245: CALL_OW 428
82249: OR
82250: IFFALSE 82254
// exit ;
82252: GO 82974
// uc_side := your_side ;
82254: LD_ADDR_OWVAR 20
82258: PUSH
82259: LD_OWVAR 2
82263: ST_TO_ADDR
// uc_nation := nation ;
82264: LD_ADDR_OWVAR 21
82268: PUSH
82269: LD_VAR 0 1
82273: ST_TO_ADDR
// bc_level = 1 ;
82274: LD_ADDR_OWVAR 43
82278: PUSH
82279: LD_INT 1
82281: ST_TO_ADDR
// case btype of 1 :
82282: LD_VAR 0 2
82286: PUSH
82287: LD_INT 1
82289: DOUBLE
82290: EQUAL
82291: IFTRUE 82295
82293: GO 82306
82295: POP
// bc_type := b_depot ; 2 :
82296: LD_ADDR_OWVAR 42
82300: PUSH
82301: LD_INT 0
82303: ST_TO_ADDR
82304: GO 82918
82306: LD_INT 2
82308: DOUBLE
82309: EQUAL
82310: IFTRUE 82314
82312: GO 82325
82314: POP
// bc_type := b_warehouse ; 3 :
82315: LD_ADDR_OWVAR 42
82319: PUSH
82320: LD_INT 1
82322: ST_TO_ADDR
82323: GO 82918
82325: LD_INT 3
82327: DOUBLE
82328: EQUAL
82329: IFTRUE 82333
82331: GO 82344
82333: POP
// bc_type := b_lab ; 4 .. 9 :
82334: LD_ADDR_OWVAR 42
82338: PUSH
82339: LD_INT 6
82341: ST_TO_ADDR
82342: GO 82918
82344: LD_INT 4
82346: DOUBLE
82347: GREATEREQUAL
82348: IFFALSE 82356
82350: LD_INT 9
82352: DOUBLE
82353: LESSEQUAL
82354: IFTRUE 82358
82356: GO 82410
82358: POP
// begin bc_type := b_lab_half ;
82359: LD_ADDR_OWVAR 42
82363: PUSH
82364: LD_INT 7
82366: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
82367: LD_ADDR_OWVAR 44
82371: PUSH
82372: LD_INT 10
82374: PUSH
82375: LD_INT 11
82377: PUSH
82378: LD_INT 12
82380: PUSH
82381: LD_INT 15
82383: PUSH
82384: LD_INT 14
82386: PUSH
82387: LD_INT 13
82389: PUSH
82390: EMPTY
82391: LIST
82392: LIST
82393: LIST
82394: LIST
82395: LIST
82396: LIST
82397: PUSH
82398: LD_VAR 0 2
82402: PUSH
82403: LD_INT 3
82405: MINUS
82406: ARRAY
82407: ST_TO_ADDR
// end ; 10 .. 13 :
82408: GO 82918
82410: LD_INT 10
82412: DOUBLE
82413: GREATEREQUAL
82414: IFFALSE 82422
82416: LD_INT 13
82418: DOUBLE
82419: LESSEQUAL
82420: IFTRUE 82424
82422: GO 82501
82424: POP
// begin bc_type := b_lab_full ;
82425: LD_ADDR_OWVAR 42
82429: PUSH
82430: LD_INT 8
82432: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
82433: LD_ADDR_OWVAR 44
82437: PUSH
82438: LD_INT 10
82440: PUSH
82441: LD_INT 12
82443: PUSH
82444: LD_INT 14
82446: PUSH
82447: LD_INT 13
82449: PUSH
82450: EMPTY
82451: LIST
82452: LIST
82453: LIST
82454: LIST
82455: PUSH
82456: LD_VAR 0 2
82460: PUSH
82461: LD_INT 9
82463: MINUS
82464: ARRAY
82465: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
82466: LD_ADDR_OWVAR 45
82470: PUSH
82471: LD_INT 11
82473: PUSH
82474: LD_INT 15
82476: PUSH
82477: LD_INT 12
82479: PUSH
82480: LD_INT 15
82482: PUSH
82483: EMPTY
82484: LIST
82485: LIST
82486: LIST
82487: LIST
82488: PUSH
82489: LD_VAR 0 2
82493: PUSH
82494: LD_INT 9
82496: MINUS
82497: ARRAY
82498: ST_TO_ADDR
// end ; 14 :
82499: GO 82918
82501: LD_INT 14
82503: DOUBLE
82504: EQUAL
82505: IFTRUE 82509
82507: GO 82520
82509: POP
// bc_type := b_workshop ; 15 :
82510: LD_ADDR_OWVAR 42
82514: PUSH
82515: LD_INT 2
82517: ST_TO_ADDR
82518: GO 82918
82520: LD_INT 15
82522: DOUBLE
82523: EQUAL
82524: IFTRUE 82528
82526: GO 82539
82528: POP
// bc_type := b_factory ; 16 :
82529: LD_ADDR_OWVAR 42
82533: PUSH
82534: LD_INT 3
82536: ST_TO_ADDR
82537: GO 82918
82539: LD_INT 16
82541: DOUBLE
82542: EQUAL
82543: IFTRUE 82547
82545: GO 82558
82547: POP
// bc_type := b_ext_gun ; 17 :
82548: LD_ADDR_OWVAR 42
82552: PUSH
82553: LD_INT 17
82555: ST_TO_ADDR
82556: GO 82918
82558: LD_INT 17
82560: DOUBLE
82561: EQUAL
82562: IFTRUE 82566
82564: GO 82594
82566: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
82567: LD_ADDR_OWVAR 42
82571: PUSH
82572: LD_INT 19
82574: PUSH
82575: LD_INT 23
82577: PUSH
82578: LD_INT 19
82580: PUSH
82581: EMPTY
82582: LIST
82583: LIST
82584: LIST
82585: PUSH
82586: LD_VAR 0 1
82590: ARRAY
82591: ST_TO_ADDR
82592: GO 82918
82594: LD_INT 18
82596: DOUBLE
82597: EQUAL
82598: IFTRUE 82602
82600: GO 82613
82602: POP
// bc_type := b_ext_radar ; 19 :
82603: LD_ADDR_OWVAR 42
82607: PUSH
82608: LD_INT 20
82610: ST_TO_ADDR
82611: GO 82918
82613: LD_INT 19
82615: DOUBLE
82616: EQUAL
82617: IFTRUE 82621
82619: GO 82632
82621: POP
// bc_type := b_ext_radio ; 20 :
82622: LD_ADDR_OWVAR 42
82626: PUSH
82627: LD_INT 22
82629: ST_TO_ADDR
82630: GO 82918
82632: LD_INT 20
82634: DOUBLE
82635: EQUAL
82636: IFTRUE 82640
82638: GO 82651
82640: POP
// bc_type := b_ext_siberium ; 21 :
82641: LD_ADDR_OWVAR 42
82645: PUSH
82646: LD_INT 21
82648: ST_TO_ADDR
82649: GO 82918
82651: LD_INT 21
82653: DOUBLE
82654: EQUAL
82655: IFTRUE 82659
82657: GO 82670
82659: POP
// bc_type := b_ext_computer ; 22 :
82660: LD_ADDR_OWVAR 42
82664: PUSH
82665: LD_INT 24
82667: ST_TO_ADDR
82668: GO 82918
82670: LD_INT 22
82672: DOUBLE
82673: EQUAL
82674: IFTRUE 82678
82676: GO 82689
82678: POP
// bc_type := b_ext_track ; 23 :
82679: LD_ADDR_OWVAR 42
82683: PUSH
82684: LD_INT 16
82686: ST_TO_ADDR
82687: GO 82918
82689: LD_INT 23
82691: DOUBLE
82692: EQUAL
82693: IFTRUE 82697
82695: GO 82708
82697: POP
// bc_type := b_ext_laser ; 24 :
82698: LD_ADDR_OWVAR 42
82702: PUSH
82703: LD_INT 25
82705: ST_TO_ADDR
82706: GO 82918
82708: LD_INT 24
82710: DOUBLE
82711: EQUAL
82712: IFTRUE 82716
82714: GO 82727
82716: POP
// bc_type := b_control_tower ; 25 :
82717: LD_ADDR_OWVAR 42
82721: PUSH
82722: LD_INT 36
82724: ST_TO_ADDR
82725: GO 82918
82727: LD_INT 25
82729: DOUBLE
82730: EQUAL
82731: IFTRUE 82735
82733: GO 82746
82735: POP
// bc_type := b_breastwork ; 26 :
82736: LD_ADDR_OWVAR 42
82740: PUSH
82741: LD_INT 31
82743: ST_TO_ADDR
82744: GO 82918
82746: LD_INT 26
82748: DOUBLE
82749: EQUAL
82750: IFTRUE 82754
82752: GO 82765
82754: POP
// bc_type := b_bunker ; 27 :
82755: LD_ADDR_OWVAR 42
82759: PUSH
82760: LD_INT 32
82762: ST_TO_ADDR
82763: GO 82918
82765: LD_INT 27
82767: DOUBLE
82768: EQUAL
82769: IFTRUE 82773
82771: GO 82784
82773: POP
// bc_type := b_turret ; 28 :
82774: LD_ADDR_OWVAR 42
82778: PUSH
82779: LD_INT 33
82781: ST_TO_ADDR
82782: GO 82918
82784: LD_INT 28
82786: DOUBLE
82787: EQUAL
82788: IFTRUE 82792
82790: GO 82803
82792: POP
// bc_type := b_armoury ; 29 :
82793: LD_ADDR_OWVAR 42
82797: PUSH
82798: LD_INT 4
82800: ST_TO_ADDR
82801: GO 82918
82803: LD_INT 29
82805: DOUBLE
82806: EQUAL
82807: IFTRUE 82811
82809: GO 82822
82811: POP
// bc_type := b_barracks ; 30 :
82812: LD_ADDR_OWVAR 42
82816: PUSH
82817: LD_INT 5
82819: ST_TO_ADDR
82820: GO 82918
82822: LD_INT 30
82824: DOUBLE
82825: EQUAL
82826: IFTRUE 82830
82828: GO 82841
82830: POP
// bc_type := b_solar_power ; 31 :
82831: LD_ADDR_OWVAR 42
82835: PUSH
82836: LD_INT 27
82838: ST_TO_ADDR
82839: GO 82918
82841: LD_INT 31
82843: DOUBLE
82844: EQUAL
82845: IFTRUE 82849
82847: GO 82860
82849: POP
// bc_type := b_oil_power ; 32 :
82850: LD_ADDR_OWVAR 42
82854: PUSH
82855: LD_INT 26
82857: ST_TO_ADDR
82858: GO 82918
82860: LD_INT 32
82862: DOUBLE
82863: EQUAL
82864: IFTRUE 82868
82866: GO 82879
82868: POP
// bc_type := b_siberite_power ; 33 :
82869: LD_ADDR_OWVAR 42
82873: PUSH
82874: LD_INT 28
82876: ST_TO_ADDR
82877: GO 82918
82879: LD_INT 33
82881: DOUBLE
82882: EQUAL
82883: IFTRUE 82887
82885: GO 82898
82887: POP
// bc_type := b_oil_mine ; 34 :
82888: LD_ADDR_OWVAR 42
82892: PUSH
82893: LD_INT 29
82895: ST_TO_ADDR
82896: GO 82918
82898: LD_INT 34
82900: DOUBLE
82901: EQUAL
82902: IFTRUE 82906
82904: GO 82917
82906: POP
// bc_type := b_siberite_mine ; end ;
82907: LD_ADDR_OWVAR 42
82911: PUSH
82912: LD_INT 30
82914: ST_TO_ADDR
82915: GO 82918
82917: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
82918: LD_ADDR_VAR 0 8
82922: PUSH
82923: LD_VAR 0 5
82927: PPUSH
82928: LD_VAR 0 6
82932: PPUSH
82933: LD_VAR 0 3
82937: PPUSH
82938: CALL_OW 47
82942: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
82943: LD_OWVAR 42
82947: PUSH
82948: LD_INT 32
82950: PUSH
82951: LD_INT 33
82953: PUSH
82954: EMPTY
82955: LIST
82956: LIST
82957: IN
82958: IFFALSE 82974
// PlaceWeaponTurret ( b , weapon ) ;
82960: LD_VAR 0 8
82964: PPUSH
82965: LD_VAR 0 4
82969: PPUSH
82970: CALL_OW 431
// end ;
82974: LD_VAR 0 7
82978: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
82979: LD_INT 0
82981: PPUSH
82982: PPUSH
82983: PPUSH
82984: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
82985: LD_ADDR_VAR 0 4
82989: PUSH
82990: LD_INT 22
82992: PUSH
82993: LD_OWVAR 2
82997: PUSH
82998: EMPTY
82999: LIST
83000: LIST
83001: PUSH
83002: LD_INT 2
83004: PUSH
83005: LD_INT 30
83007: PUSH
83008: LD_INT 0
83010: PUSH
83011: EMPTY
83012: LIST
83013: LIST
83014: PUSH
83015: LD_INT 30
83017: PUSH
83018: LD_INT 1
83020: PUSH
83021: EMPTY
83022: LIST
83023: LIST
83024: PUSH
83025: EMPTY
83026: LIST
83027: LIST
83028: LIST
83029: PUSH
83030: EMPTY
83031: LIST
83032: LIST
83033: PPUSH
83034: CALL_OW 69
83038: ST_TO_ADDR
// if not tmp then
83039: LD_VAR 0 4
83043: NOT
83044: IFFALSE 83048
// exit ;
83046: GO 83107
// for i in tmp do
83048: LD_ADDR_VAR 0 2
83052: PUSH
83053: LD_VAR 0 4
83057: PUSH
83058: FOR_IN
83059: IFFALSE 83105
// for j = 1 to 3 do
83061: LD_ADDR_VAR 0 3
83065: PUSH
83066: DOUBLE
83067: LD_INT 1
83069: DEC
83070: ST_TO_ADDR
83071: LD_INT 3
83073: PUSH
83074: FOR_TO
83075: IFFALSE 83101
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
83077: LD_VAR 0 2
83081: PPUSH
83082: CALL_OW 274
83086: PPUSH
83087: LD_VAR 0 3
83091: PPUSH
83092: LD_INT 99999
83094: PPUSH
83095: CALL_OW 277
83099: GO 83074
83101: POP
83102: POP
83103: GO 83058
83105: POP
83106: POP
// end ;
83107: LD_VAR 0 1
83111: RET
// export function hHackSetLevel10 ; var i , j ; begin
83112: LD_INT 0
83114: PPUSH
83115: PPUSH
83116: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
83117: LD_ADDR_VAR 0 2
83121: PUSH
83122: LD_INT 21
83124: PUSH
83125: LD_INT 1
83127: PUSH
83128: EMPTY
83129: LIST
83130: LIST
83131: PPUSH
83132: CALL_OW 69
83136: PUSH
83137: FOR_IN
83138: IFFALSE 83190
// if IsSelected ( i ) then
83140: LD_VAR 0 2
83144: PPUSH
83145: CALL_OW 306
83149: IFFALSE 83188
// begin for j := 1 to 4 do
83151: LD_ADDR_VAR 0 3
83155: PUSH
83156: DOUBLE
83157: LD_INT 1
83159: DEC
83160: ST_TO_ADDR
83161: LD_INT 4
83163: PUSH
83164: FOR_TO
83165: IFFALSE 83186
// SetSkill ( i , j , 10 ) ;
83167: LD_VAR 0 2
83171: PPUSH
83172: LD_VAR 0 3
83176: PPUSH
83177: LD_INT 10
83179: PPUSH
83180: CALL_OW 237
83184: GO 83164
83186: POP
83187: POP
// end ;
83188: GO 83137
83190: POP
83191: POP
// end ;
83192: LD_VAR 0 1
83196: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
83197: LD_INT 0
83199: PPUSH
83200: PPUSH
83201: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
83202: LD_ADDR_VAR 0 2
83206: PUSH
83207: LD_INT 22
83209: PUSH
83210: LD_OWVAR 2
83214: PUSH
83215: EMPTY
83216: LIST
83217: LIST
83218: PUSH
83219: LD_INT 21
83221: PUSH
83222: LD_INT 1
83224: PUSH
83225: EMPTY
83226: LIST
83227: LIST
83228: PUSH
83229: EMPTY
83230: LIST
83231: LIST
83232: PPUSH
83233: CALL_OW 69
83237: PUSH
83238: FOR_IN
83239: IFFALSE 83280
// begin for j := 1 to 4 do
83241: LD_ADDR_VAR 0 3
83245: PUSH
83246: DOUBLE
83247: LD_INT 1
83249: DEC
83250: ST_TO_ADDR
83251: LD_INT 4
83253: PUSH
83254: FOR_TO
83255: IFFALSE 83276
// SetSkill ( i , j , 10 ) ;
83257: LD_VAR 0 2
83261: PPUSH
83262: LD_VAR 0 3
83266: PPUSH
83267: LD_INT 10
83269: PPUSH
83270: CALL_OW 237
83274: GO 83254
83276: POP
83277: POP
// end ;
83278: GO 83238
83280: POP
83281: POP
// end ;
83282: LD_VAR 0 1
83286: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
83287: LD_INT 0
83289: PPUSH
// uc_side := your_side ;
83290: LD_ADDR_OWVAR 20
83294: PUSH
83295: LD_OWVAR 2
83299: ST_TO_ADDR
// uc_nation := nation ;
83300: LD_ADDR_OWVAR 21
83304: PUSH
83305: LD_VAR 0 1
83309: ST_TO_ADDR
// InitHc ;
83310: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
83314: LD_INT 0
83316: PPUSH
83317: LD_VAR 0 2
83321: PPUSH
83322: LD_VAR 0 3
83326: PPUSH
83327: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
83331: LD_VAR 0 4
83335: PPUSH
83336: LD_VAR 0 5
83340: PPUSH
83341: CALL_OW 428
83345: PUSH
83346: LD_INT 0
83348: EQUAL
83349: IFFALSE 83373
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
83351: CALL_OW 44
83355: PPUSH
83356: LD_VAR 0 4
83360: PPUSH
83361: LD_VAR 0 5
83365: PPUSH
83366: LD_INT 1
83368: PPUSH
83369: CALL_OW 48
// end ;
83373: LD_VAR 0 6
83377: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
83378: LD_INT 0
83380: PPUSH
83381: PPUSH
// uc_side := your_side ;
83382: LD_ADDR_OWVAR 20
83386: PUSH
83387: LD_OWVAR 2
83391: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
83392: LD_VAR 0 1
83396: PUSH
83397: LD_INT 1
83399: PUSH
83400: LD_INT 2
83402: PUSH
83403: LD_INT 3
83405: PUSH
83406: LD_INT 4
83408: PUSH
83409: LD_INT 5
83411: PUSH
83412: EMPTY
83413: LIST
83414: LIST
83415: LIST
83416: LIST
83417: LIST
83418: IN
83419: IFFALSE 83431
// uc_nation := nation_american else
83421: LD_ADDR_OWVAR 21
83425: PUSH
83426: LD_INT 1
83428: ST_TO_ADDR
83429: GO 83474
// if chassis in [ 11 , 12 , 13 , 14 ] then
83431: LD_VAR 0 1
83435: PUSH
83436: LD_INT 11
83438: PUSH
83439: LD_INT 12
83441: PUSH
83442: LD_INT 13
83444: PUSH
83445: LD_INT 14
83447: PUSH
83448: EMPTY
83449: LIST
83450: LIST
83451: LIST
83452: LIST
83453: IN
83454: IFFALSE 83466
// uc_nation := nation_arabian else
83456: LD_ADDR_OWVAR 21
83460: PUSH
83461: LD_INT 2
83463: ST_TO_ADDR
83464: GO 83474
// uc_nation := nation_russian ;
83466: LD_ADDR_OWVAR 21
83470: PUSH
83471: LD_INT 3
83473: ST_TO_ADDR
// vc_chassis := chassis ;
83474: LD_ADDR_OWVAR 37
83478: PUSH
83479: LD_VAR 0 1
83483: ST_TO_ADDR
// vc_engine := engine ;
83484: LD_ADDR_OWVAR 39
83488: PUSH
83489: LD_VAR 0 2
83493: ST_TO_ADDR
// vc_control := control ;
83494: LD_ADDR_OWVAR 38
83498: PUSH
83499: LD_VAR 0 3
83503: ST_TO_ADDR
// vc_weapon := weapon ;
83504: LD_ADDR_OWVAR 40
83508: PUSH
83509: LD_VAR 0 4
83513: ST_TO_ADDR
// un := CreateVehicle ;
83514: LD_ADDR_VAR 0 8
83518: PUSH
83519: CALL_OW 45
83523: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
83524: LD_VAR 0 8
83528: PPUSH
83529: LD_INT 0
83531: PPUSH
83532: LD_INT 5
83534: PPUSH
83535: CALL_OW 12
83539: PPUSH
83540: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
83544: LD_VAR 0 8
83548: PPUSH
83549: LD_VAR 0 5
83553: PPUSH
83554: LD_VAR 0 6
83558: PPUSH
83559: LD_INT 1
83561: PPUSH
83562: CALL_OW 48
// end ;
83566: LD_VAR 0 7
83570: RET
// export hInvincible ; every 1 do
83571: GO 83573
83573: DISABLE
// hInvincible := [ ] ;
83574: LD_ADDR_EXP 129
83578: PUSH
83579: EMPTY
83580: ST_TO_ADDR
83581: END
// every 10 do var i ;
83582: GO 83584
83584: DISABLE
83585: LD_INT 0
83587: PPUSH
// begin enable ;
83588: ENABLE
// if not hInvincible then
83589: LD_EXP 129
83593: NOT
83594: IFFALSE 83598
// exit ;
83596: GO 83642
// for i in hInvincible do
83598: LD_ADDR_VAR 0 1
83602: PUSH
83603: LD_EXP 129
83607: PUSH
83608: FOR_IN
83609: IFFALSE 83640
// if GetLives ( i ) < 1000 then
83611: LD_VAR 0 1
83615: PPUSH
83616: CALL_OW 256
83620: PUSH
83621: LD_INT 1000
83623: LESS
83624: IFFALSE 83638
// SetLives ( i , 1000 ) ;
83626: LD_VAR 0 1
83630: PPUSH
83631: LD_INT 1000
83633: PPUSH
83634: CALL_OW 234
83638: GO 83608
83640: POP
83641: POP
// end ;
83642: PPOPN 1
83644: END
// export function hHackInvincible ; var i ; begin
83645: LD_INT 0
83647: PPUSH
83648: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
83649: LD_ADDR_VAR 0 2
83653: PUSH
83654: LD_INT 2
83656: PUSH
83657: LD_INT 21
83659: PUSH
83660: LD_INT 1
83662: PUSH
83663: EMPTY
83664: LIST
83665: LIST
83666: PUSH
83667: LD_INT 21
83669: PUSH
83670: LD_INT 2
83672: PUSH
83673: EMPTY
83674: LIST
83675: LIST
83676: PUSH
83677: EMPTY
83678: LIST
83679: LIST
83680: LIST
83681: PPUSH
83682: CALL_OW 69
83686: PUSH
83687: FOR_IN
83688: IFFALSE 83749
// if IsSelected ( i ) then
83690: LD_VAR 0 2
83694: PPUSH
83695: CALL_OW 306
83699: IFFALSE 83747
// begin if i in hInvincible then
83701: LD_VAR 0 2
83705: PUSH
83706: LD_EXP 129
83710: IN
83711: IFFALSE 83731
// hInvincible := hInvincible diff i else
83713: LD_ADDR_EXP 129
83717: PUSH
83718: LD_EXP 129
83722: PUSH
83723: LD_VAR 0 2
83727: DIFF
83728: ST_TO_ADDR
83729: GO 83747
// hInvincible := hInvincible union i ;
83731: LD_ADDR_EXP 129
83735: PUSH
83736: LD_EXP 129
83740: PUSH
83741: LD_VAR 0 2
83745: UNION
83746: ST_TO_ADDR
// end ;
83747: GO 83687
83749: POP
83750: POP
// end ;
83751: LD_VAR 0 1
83755: RET
// export function hHackInvisible ; var i , j ; begin
83756: LD_INT 0
83758: PPUSH
83759: PPUSH
83760: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
83761: LD_ADDR_VAR 0 2
83765: PUSH
83766: LD_INT 21
83768: PUSH
83769: LD_INT 1
83771: PUSH
83772: EMPTY
83773: LIST
83774: LIST
83775: PPUSH
83776: CALL_OW 69
83780: PUSH
83781: FOR_IN
83782: IFFALSE 83806
// if IsSelected ( i ) then
83784: LD_VAR 0 2
83788: PPUSH
83789: CALL_OW 306
83793: IFFALSE 83804
// ComForceInvisible ( i ) ;
83795: LD_VAR 0 2
83799: PPUSH
83800: CALL_OW 496
83804: GO 83781
83806: POP
83807: POP
// end ;
83808: LD_VAR 0 1
83812: RET
// export function hHackChangeYourSide ; begin
83813: LD_INT 0
83815: PPUSH
// if your_side = 8 then
83816: LD_OWVAR 2
83820: PUSH
83821: LD_INT 8
83823: EQUAL
83824: IFFALSE 83836
// your_side := 0 else
83826: LD_ADDR_OWVAR 2
83830: PUSH
83831: LD_INT 0
83833: ST_TO_ADDR
83834: GO 83850
// your_side := your_side + 1 ;
83836: LD_ADDR_OWVAR 2
83840: PUSH
83841: LD_OWVAR 2
83845: PUSH
83846: LD_INT 1
83848: PLUS
83849: ST_TO_ADDR
// end ;
83850: LD_VAR 0 1
83854: RET
// export function hHackChangeUnitSide ; var i , j ; begin
83855: LD_INT 0
83857: PPUSH
83858: PPUSH
83859: PPUSH
// for i in all_units do
83860: LD_ADDR_VAR 0 2
83864: PUSH
83865: LD_OWVAR 3
83869: PUSH
83870: FOR_IN
83871: IFFALSE 83949
// if IsSelected ( i ) then
83873: LD_VAR 0 2
83877: PPUSH
83878: CALL_OW 306
83882: IFFALSE 83947
// begin j := GetSide ( i ) ;
83884: LD_ADDR_VAR 0 3
83888: PUSH
83889: LD_VAR 0 2
83893: PPUSH
83894: CALL_OW 255
83898: ST_TO_ADDR
// if j = 8 then
83899: LD_VAR 0 3
83903: PUSH
83904: LD_INT 8
83906: EQUAL
83907: IFFALSE 83919
// j := 0 else
83909: LD_ADDR_VAR 0 3
83913: PUSH
83914: LD_INT 0
83916: ST_TO_ADDR
83917: GO 83933
// j := j + 1 ;
83919: LD_ADDR_VAR 0 3
83923: PUSH
83924: LD_VAR 0 3
83928: PUSH
83929: LD_INT 1
83931: PLUS
83932: ST_TO_ADDR
// SetSide ( i , j ) ;
83933: LD_VAR 0 2
83937: PPUSH
83938: LD_VAR 0 3
83942: PPUSH
83943: CALL_OW 235
// end ;
83947: GO 83870
83949: POP
83950: POP
// end ;
83951: LD_VAR 0 1
83955: RET
// export function hHackFog ; begin
83956: LD_INT 0
83958: PPUSH
// FogOff ( true ) ;
83959: LD_INT 1
83961: PPUSH
83962: CALL_OW 344
// end ;
83966: LD_VAR 0 1
83970: RET
// export function hHackTeleport ( unit , x , y ) ; begin
83971: LD_INT 0
83973: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
83974: LD_VAR 0 1
83978: PPUSH
83979: LD_VAR 0 2
83983: PPUSH
83984: LD_VAR 0 3
83988: PPUSH
83989: LD_INT 1
83991: PPUSH
83992: LD_INT 1
83994: PPUSH
83995: CALL_OW 483
// CenterOnXY ( x , y ) ;
83999: LD_VAR 0 2
84003: PPUSH
84004: LD_VAR 0 3
84008: PPUSH
84009: CALL_OW 84
// end ;
84013: LD_VAR 0 4
84017: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
84018: LD_INT 0
84020: PPUSH
84021: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
84022: LD_VAR 0 1
84026: NOT
84027: PUSH
84028: LD_VAR 0 2
84032: PPUSH
84033: LD_VAR 0 3
84037: PPUSH
84038: CALL_OW 488
84042: NOT
84043: OR
84044: PUSH
84045: LD_VAR 0 1
84049: PPUSH
84050: CALL_OW 266
84054: PUSH
84055: LD_INT 3
84057: NONEQUAL
84058: PUSH
84059: LD_VAR 0 1
84063: PPUSH
84064: CALL_OW 247
84068: PUSH
84069: LD_INT 1
84071: EQUAL
84072: NOT
84073: AND
84074: OR
84075: IFFALSE 84079
// exit ;
84077: GO 84228
// if GetType ( factory ) = unit_human then
84079: LD_VAR 0 1
84083: PPUSH
84084: CALL_OW 247
84088: PUSH
84089: LD_INT 1
84091: EQUAL
84092: IFFALSE 84109
// factory := IsInUnit ( factory ) ;
84094: LD_ADDR_VAR 0 1
84098: PUSH
84099: LD_VAR 0 1
84103: PPUSH
84104: CALL_OW 310
84108: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
84109: LD_VAR 0 1
84113: PPUSH
84114: CALL_OW 266
84118: PUSH
84119: LD_INT 3
84121: NONEQUAL
84122: IFFALSE 84126
// exit ;
84124: GO 84228
// if HexInfo ( x , y ) = factory then
84126: LD_VAR 0 2
84130: PPUSH
84131: LD_VAR 0 3
84135: PPUSH
84136: CALL_OW 428
84140: PUSH
84141: LD_VAR 0 1
84145: EQUAL
84146: IFFALSE 84173
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
84148: LD_ADDR_EXP 130
84152: PUSH
84153: LD_EXP 130
84157: PPUSH
84158: LD_VAR 0 1
84162: PPUSH
84163: LD_INT 0
84165: PPUSH
84166: CALL_OW 1
84170: ST_TO_ADDR
84171: GO 84224
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
84173: LD_ADDR_EXP 130
84177: PUSH
84178: LD_EXP 130
84182: PPUSH
84183: LD_VAR 0 1
84187: PPUSH
84188: LD_VAR 0 1
84192: PPUSH
84193: CALL_OW 255
84197: PUSH
84198: LD_VAR 0 1
84202: PUSH
84203: LD_VAR 0 2
84207: PUSH
84208: LD_VAR 0 3
84212: PUSH
84213: EMPTY
84214: LIST
84215: LIST
84216: LIST
84217: LIST
84218: PPUSH
84219: CALL_OW 1
84223: ST_TO_ADDR
// UpdateFactoryWaypoints ;
84224: CALL 84233 0 0
// end ;
84228: LD_VAR 0 4
84232: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
84233: LD_INT 0
84235: PPUSH
84236: PPUSH
84237: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
84238: LD_STRING resetFactoryWaypoint();
84240: PPUSH
84241: CALL_OW 559
// if factoryWaypoints then
84245: LD_EXP 130
84249: IFFALSE 84375
// begin list := PrepareArray ( factoryWaypoints ) ;
84251: LD_ADDR_VAR 0 3
84255: PUSH
84256: LD_EXP 130
84260: PPUSH
84261: CALL 69340 0 1
84265: ST_TO_ADDR
// for i := 1 to list do
84266: LD_ADDR_VAR 0 2
84270: PUSH
84271: DOUBLE
84272: LD_INT 1
84274: DEC
84275: ST_TO_ADDR
84276: LD_VAR 0 3
84280: PUSH
84281: FOR_TO
84282: IFFALSE 84373
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
84284: LD_STRING setFactoryWaypointXY(
84286: PUSH
84287: LD_VAR 0 3
84291: PUSH
84292: LD_VAR 0 2
84296: ARRAY
84297: PUSH
84298: LD_INT 1
84300: ARRAY
84301: STR
84302: PUSH
84303: LD_STRING ,
84305: STR
84306: PUSH
84307: LD_VAR 0 3
84311: PUSH
84312: LD_VAR 0 2
84316: ARRAY
84317: PUSH
84318: LD_INT 2
84320: ARRAY
84321: STR
84322: PUSH
84323: LD_STRING ,
84325: STR
84326: PUSH
84327: LD_VAR 0 3
84331: PUSH
84332: LD_VAR 0 2
84336: ARRAY
84337: PUSH
84338: LD_INT 3
84340: ARRAY
84341: STR
84342: PUSH
84343: LD_STRING ,
84345: STR
84346: PUSH
84347: LD_VAR 0 3
84351: PUSH
84352: LD_VAR 0 2
84356: ARRAY
84357: PUSH
84358: LD_INT 4
84360: ARRAY
84361: STR
84362: PUSH
84363: LD_STRING )
84365: STR
84366: PPUSH
84367: CALL_OW 559
84371: GO 84281
84373: POP
84374: POP
// end ; end ;
84375: LD_VAR 0 1
84379: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
84380: LD_INT 0
84382: PPUSH
// if HexInfo ( x , y ) = warehouse then
84383: LD_VAR 0 2
84387: PPUSH
84388: LD_VAR 0 3
84392: PPUSH
84393: CALL_OW 428
84397: PUSH
84398: LD_VAR 0 1
84402: EQUAL
84403: IFFALSE 84430
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
84405: LD_ADDR_EXP 131
84409: PUSH
84410: LD_EXP 131
84414: PPUSH
84415: LD_VAR 0 1
84419: PPUSH
84420: LD_INT 0
84422: PPUSH
84423: CALL_OW 1
84427: ST_TO_ADDR
84428: GO 84481
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
84430: LD_ADDR_EXP 131
84434: PUSH
84435: LD_EXP 131
84439: PPUSH
84440: LD_VAR 0 1
84444: PPUSH
84445: LD_VAR 0 1
84449: PPUSH
84450: CALL_OW 255
84454: PUSH
84455: LD_VAR 0 1
84459: PUSH
84460: LD_VAR 0 2
84464: PUSH
84465: LD_VAR 0 3
84469: PUSH
84470: EMPTY
84471: LIST
84472: LIST
84473: LIST
84474: LIST
84475: PPUSH
84476: CALL_OW 1
84480: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
84481: CALL 84490 0 0
// end ;
84485: LD_VAR 0 4
84489: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
84490: LD_INT 0
84492: PPUSH
84493: PPUSH
84494: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
84495: LD_STRING resetWarehouseGatheringPoints();
84497: PPUSH
84498: CALL_OW 559
// if warehouseGatheringPoints then
84502: LD_EXP 131
84506: IFFALSE 84632
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
84508: LD_ADDR_VAR 0 3
84512: PUSH
84513: LD_EXP 131
84517: PPUSH
84518: CALL 69340 0 1
84522: ST_TO_ADDR
// for i := 1 to list do
84523: LD_ADDR_VAR 0 2
84527: PUSH
84528: DOUBLE
84529: LD_INT 1
84531: DEC
84532: ST_TO_ADDR
84533: LD_VAR 0 3
84537: PUSH
84538: FOR_TO
84539: IFFALSE 84630
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
84541: LD_STRING setWarehouseGatheringPointXY(
84543: PUSH
84544: LD_VAR 0 3
84548: PUSH
84549: LD_VAR 0 2
84553: ARRAY
84554: PUSH
84555: LD_INT 1
84557: ARRAY
84558: STR
84559: PUSH
84560: LD_STRING ,
84562: STR
84563: PUSH
84564: LD_VAR 0 3
84568: PUSH
84569: LD_VAR 0 2
84573: ARRAY
84574: PUSH
84575: LD_INT 2
84577: ARRAY
84578: STR
84579: PUSH
84580: LD_STRING ,
84582: STR
84583: PUSH
84584: LD_VAR 0 3
84588: PUSH
84589: LD_VAR 0 2
84593: ARRAY
84594: PUSH
84595: LD_INT 3
84597: ARRAY
84598: STR
84599: PUSH
84600: LD_STRING ,
84602: STR
84603: PUSH
84604: LD_VAR 0 3
84608: PUSH
84609: LD_VAR 0 2
84613: ARRAY
84614: PUSH
84615: LD_INT 4
84617: ARRAY
84618: STR
84619: PUSH
84620: LD_STRING )
84622: STR
84623: PPUSH
84624: CALL_OW 559
84628: GO 84538
84630: POP
84631: POP
// end ; end ;
84632: LD_VAR 0 1
84636: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
84637: LD_EXP 131
84641: IFFALSE 85326
84643: GO 84645
84645: DISABLE
84646: LD_INT 0
84648: PPUSH
84649: PPUSH
84650: PPUSH
84651: PPUSH
84652: PPUSH
84653: PPUSH
84654: PPUSH
84655: PPUSH
84656: PPUSH
// begin enable ;
84657: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
84658: LD_ADDR_VAR 0 3
84662: PUSH
84663: LD_EXP 131
84667: PPUSH
84668: CALL 69340 0 1
84672: ST_TO_ADDR
// if not list then
84673: LD_VAR 0 3
84677: NOT
84678: IFFALSE 84682
// exit ;
84680: GO 85326
// for i := 1 to list do
84682: LD_ADDR_VAR 0 1
84686: PUSH
84687: DOUBLE
84688: LD_INT 1
84690: DEC
84691: ST_TO_ADDR
84692: LD_VAR 0 3
84696: PUSH
84697: FOR_TO
84698: IFFALSE 85324
// begin depot := list [ i ] [ 2 ] ;
84700: LD_ADDR_VAR 0 8
84704: PUSH
84705: LD_VAR 0 3
84709: PUSH
84710: LD_VAR 0 1
84714: ARRAY
84715: PUSH
84716: LD_INT 2
84718: ARRAY
84719: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
84720: LD_ADDR_VAR 0 5
84724: PUSH
84725: LD_VAR 0 3
84729: PUSH
84730: LD_VAR 0 1
84734: ARRAY
84735: PUSH
84736: LD_INT 1
84738: ARRAY
84739: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
84740: LD_VAR 0 8
84744: PPUSH
84745: CALL_OW 301
84749: PUSH
84750: LD_VAR 0 5
84754: PUSH
84755: LD_VAR 0 8
84759: PPUSH
84760: CALL_OW 255
84764: NONEQUAL
84765: OR
84766: IFFALSE 84795
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
84768: LD_ADDR_EXP 131
84772: PUSH
84773: LD_EXP 131
84777: PPUSH
84778: LD_VAR 0 8
84782: PPUSH
84783: LD_INT 0
84785: PPUSH
84786: CALL_OW 1
84790: ST_TO_ADDR
// exit ;
84791: POP
84792: POP
84793: GO 85326
// end ; x := list [ i ] [ 3 ] ;
84795: LD_ADDR_VAR 0 6
84799: PUSH
84800: LD_VAR 0 3
84804: PUSH
84805: LD_VAR 0 1
84809: ARRAY
84810: PUSH
84811: LD_INT 3
84813: ARRAY
84814: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
84815: LD_ADDR_VAR 0 7
84819: PUSH
84820: LD_VAR 0 3
84824: PUSH
84825: LD_VAR 0 1
84829: ARRAY
84830: PUSH
84831: LD_INT 4
84833: ARRAY
84834: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
84835: LD_ADDR_VAR 0 9
84839: PUSH
84840: LD_VAR 0 6
84844: PPUSH
84845: LD_VAR 0 7
84849: PPUSH
84850: LD_INT 16
84852: PPUSH
84853: CALL 67928 0 3
84857: ST_TO_ADDR
// if not cratesNearbyPoint then
84858: LD_VAR 0 9
84862: NOT
84863: IFFALSE 84869
// exit ;
84865: POP
84866: POP
84867: GO 85326
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
84869: LD_ADDR_VAR 0 4
84873: PUSH
84874: LD_INT 22
84876: PUSH
84877: LD_VAR 0 5
84881: PUSH
84882: EMPTY
84883: LIST
84884: LIST
84885: PUSH
84886: LD_INT 3
84888: PUSH
84889: LD_INT 60
84891: PUSH
84892: EMPTY
84893: LIST
84894: PUSH
84895: EMPTY
84896: LIST
84897: LIST
84898: PUSH
84899: LD_INT 91
84901: PUSH
84902: LD_VAR 0 8
84906: PUSH
84907: LD_INT 6
84909: PUSH
84910: EMPTY
84911: LIST
84912: LIST
84913: LIST
84914: PUSH
84915: LD_INT 2
84917: PUSH
84918: LD_INT 25
84920: PUSH
84921: LD_INT 2
84923: PUSH
84924: EMPTY
84925: LIST
84926: LIST
84927: PUSH
84928: LD_INT 25
84930: PUSH
84931: LD_INT 16
84933: PUSH
84934: EMPTY
84935: LIST
84936: LIST
84937: PUSH
84938: EMPTY
84939: LIST
84940: LIST
84941: LIST
84942: PUSH
84943: EMPTY
84944: LIST
84945: LIST
84946: LIST
84947: LIST
84948: PPUSH
84949: CALL_OW 69
84953: PUSH
84954: LD_VAR 0 8
84958: PPUSH
84959: CALL_OW 313
84963: PPUSH
84964: LD_INT 3
84966: PUSH
84967: LD_INT 60
84969: PUSH
84970: EMPTY
84971: LIST
84972: PUSH
84973: EMPTY
84974: LIST
84975: LIST
84976: PUSH
84977: LD_INT 2
84979: PUSH
84980: LD_INT 25
84982: PUSH
84983: LD_INT 2
84985: PUSH
84986: EMPTY
84987: LIST
84988: LIST
84989: PUSH
84990: LD_INT 25
84992: PUSH
84993: LD_INT 16
84995: PUSH
84996: EMPTY
84997: LIST
84998: LIST
84999: PUSH
85000: EMPTY
85001: LIST
85002: LIST
85003: LIST
85004: PUSH
85005: EMPTY
85006: LIST
85007: LIST
85008: PPUSH
85009: CALL_OW 72
85013: UNION
85014: ST_TO_ADDR
// if tmp then
85015: LD_VAR 0 4
85019: IFFALSE 85099
// begin tmp := ShrinkArray ( tmp , 3 ) ;
85021: LD_ADDR_VAR 0 4
85025: PUSH
85026: LD_VAR 0 4
85030: PPUSH
85031: LD_INT 3
85033: PPUSH
85034: CALL 65897 0 2
85038: ST_TO_ADDR
// for j in tmp do
85039: LD_ADDR_VAR 0 2
85043: PUSH
85044: LD_VAR 0 4
85048: PUSH
85049: FOR_IN
85050: IFFALSE 85093
// begin if IsInUnit ( j ) then
85052: LD_VAR 0 2
85056: PPUSH
85057: CALL_OW 310
85061: IFFALSE 85072
// ComExit ( j ) ;
85063: LD_VAR 0 2
85067: PPUSH
85068: CALL 65980 0 1
// AddComCollect ( j , x , y ) ;
85072: LD_VAR 0 2
85076: PPUSH
85077: LD_VAR 0 6
85081: PPUSH
85082: LD_VAR 0 7
85086: PPUSH
85087: CALL_OW 177
// end ;
85091: GO 85049
85093: POP
85094: POP
// exit ;
85095: POP
85096: POP
85097: GO 85326
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
85099: LD_ADDR_VAR 0 4
85103: PUSH
85104: LD_INT 22
85106: PUSH
85107: LD_VAR 0 5
85111: PUSH
85112: EMPTY
85113: LIST
85114: LIST
85115: PUSH
85116: LD_INT 91
85118: PUSH
85119: LD_VAR 0 8
85123: PUSH
85124: LD_INT 8
85126: PUSH
85127: EMPTY
85128: LIST
85129: LIST
85130: LIST
85131: PUSH
85132: LD_INT 2
85134: PUSH
85135: LD_INT 34
85137: PUSH
85138: LD_INT 12
85140: PUSH
85141: EMPTY
85142: LIST
85143: LIST
85144: PUSH
85145: LD_INT 34
85147: PUSH
85148: LD_INT 51
85150: PUSH
85151: EMPTY
85152: LIST
85153: LIST
85154: PUSH
85155: LD_INT 34
85157: PUSH
85158: LD_INT 32
85160: PUSH
85161: EMPTY
85162: LIST
85163: LIST
85164: PUSH
85165: LD_INT 34
85167: PUSH
85168: LD_INT 89
85170: PUSH
85171: EMPTY
85172: LIST
85173: LIST
85174: PUSH
85175: EMPTY
85176: LIST
85177: LIST
85178: LIST
85179: LIST
85180: LIST
85181: PUSH
85182: EMPTY
85183: LIST
85184: LIST
85185: LIST
85186: PPUSH
85187: CALL_OW 69
85191: ST_TO_ADDR
// if tmp then
85192: LD_VAR 0 4
85196: IFFALSE 85322
// begin for j in tmp do
85198: LD_ADDR_VAR 0 2
85202: PUSH
85203: LD_VAR 0 4
85207: PUSH
85208: FOR_IN
85209: IFFALSE 85320
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
85211: LD_VAR 0 2
85215: PPUSH
85216: CALL_OW 262
85220: PUSH
85221: LD_INT 3
85223: EQUAL
85224: PUSH
85225: LD_VAR 0 2
85229: PPUSH
85230: CALL_OW 261
85234: PUSH
85235: LD_INT 20
85237: GREATER
85238: OR
85239: PUSH
85240: LD_VAR 0 2
85244: PPUSH
85245: CALL_OW 314
85249: NOT
85250: AND
85251: PUSH
85252: LD_VAR 0 2
85256: PPUSH
85257: CALL_OW 263
85261: PUSH
85262: LD_INT 1
85264: NONEQUAL
85265: PUSH
85266: LD_VAR 0 2
85270: PPUSH
85271: CALL_OW 311
85275: OR
85276: AND
85277: IFFALSE 85318
// begin ComCollect ( j , x , y ) ;
85279: LD_VAR 0 2
85283: PPUSH
85284: LD_VAR 0 6
85288: PPUSH
85289: LD_VAR 0 7
85293: PPUSH
85294: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
85298: LD_VAR 0 2
85302: PPUSH
85303: LD_VAR 0 8
85307: PPUSH
85308: CALL_OW 172
// exit ;
85312: POP
85313: POP
85314: POP
85315: POP
85316: GO 85326
// end ;
85318: GO 85208
85320: POP
85321: POP
// end ; end ;
85322: GO 84697
85324: POP
85325: POP
// end ; end_of_file
85326: PPOPN 9
85328: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85329: LD_VAR 0 1
85333: PUSH
85334: LD_INT 200
85336: DOUBLE
85337: GREATEREQUAL
85338: IFFALSE 85346
85340: LD_INT 299
85342: DOUBLE
85343: LESSEQUAL
85344: IFTRUE 85348
85346: GO 85380
85348: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85349: LD_VAR 0 1
85353: PPUSH
85354: LD_VAR 0 2
85358: PPUSH
85359: LD_VAR 0 3
85363: PPUSH
85364: LD_VAR 0 4
85368: PPUSH
85369: LD_VAR 0 5
85373: PPUSH
85374: CALL 85868 0 5
85378: GO 85457
85380: LD_INT 300
85382: DOUBLE
85383: GREATEREQUAL
85384: IFFALSE 85392
85386: LD_INT 399
85388: DOUBLE
85389: LESSEQUAL
85390: IFTRUE 85394
85392: GO 85456
85394: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85395: LD_VAR 0 1
85399: PPUSH
85400: LD_VAR 0 2
85404: PPUSH
85405: LD_VAR 0 3
85409: PPUSH
85410: LD_VAR 0 4
85414: PPUSH
85415: LD_VAR 0 5
85419: PPUSH
85420: LD_VAR 0 6
85424: PPUSH
85425: LD_VAR 0 7
85429: PPUSH
85430: LD_VAR 0 8
85434: PPUSH
85435: LD_VAR 0 9
85439: PPUSH
85440: LD_VAR 0 10
85444: PPUSH
85445: LD_VAR 0 11
85449: PPUSH
85450: CALL 82038 0 11
85454: GO 85457
85456: POP
// end ;
85457: PPOPN 11
85459: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85460: LD_VAR 0 1
85464: PPUSH
85465: LD_VAR 0 2
85469: PPUSH
85470: LD_VAR 0 3
85474: PPUSH
85475: LD_VAR 0 4
85479: PPUSH
85480: LD_VAR 0 5
85484: PPUSH
85485: CALL 85604 0 5
// end ; end_of_file
85489: PPOPN 5
85491: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
85492: LD_INT 0
85494: PPUSH
85495: PPUSH
85496: PPUSH
85497: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
85498: LD_VAR 0 1
85502: PPUSH
85503: CALL_OW 264
85507: PUSH
85508: LD_INT 91
85510: EQUAL
85511: IFFALSE 85583
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
85513: LD_INT 68
85515: PPUSH
85516: LD_VAR 0 1
85520: PPUSH
85521: CALL_OW 255
85525: PPUSH
85526: CALL_OW 321
85530: PUSH
85531: LD_INT 2
85533: EQUAL
85534: IFFALSE 85546
// eff := 70 else
85536: LD_ADDR_VAR 0 4
85540: PUSH
85541: LD_INT 70
85543: ST_TO_ADDR
85544: GO 85554
// eff := 30 ;
85546: LD_ADDR_VAR 0 4
85550: PUSH
85551: LD_INT 30
85553: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
85554: LD_VAR 0 1
85558: PPUSH
85559: CALL_OW 250
85563: PPUSH
85564: LD_VAR 0 1
85568: PPUSH
85569: CALL_OW 251
85573: PPUSH
85574: LD_VAR 0 4
85578: PPUSH
85579: CALL_OW 495
// end ; end ;
85583: LD_VAR 0 2
85587: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
85588: LD_INT 0
85590: PPUSH
// end ;
85591: LD_VAR 0 4
85595: RET
// export function SOS_Command ( cmd ) ; begin
85596: LD_INT 0
85598: PPUSH
// end ;
85599: LD_VAR 0 2
85603: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
85604: LD_INT 0
85606: PPUSH
// end ;
85607: LD_VAR 0 6
85611: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
85612: LD_INT 0
85614: PPUSH
85615: PPUSH
// if not vehicle or not factory then
85616: LD_VAR 0 1
85620: NOT
85621: PUSH
85622: LD_VAR 0 2
85626: NOT
85627: OR
85628: IFFALSE 85632
// exit ;
85630: GO 85863
// if factoryWaypoints >= factory then
85632: LD_EXP 130
85636: PUSH
85637: LD_VAR 0 2
85641: GREATEREQUAL
85642: IFFALSE 85863
// if factoryWaypoints [ factory ] then
85644: LD_EXP 130
85648: PUSH
85649: LD_VAR 0 2
85653: ARRAY
85654: IFFALSE 85863
// begin if GetControl ( vehicle ) = control_manual then
85656: LD_VAR 0 1
85660: PPUSH
85661: CALL_OW 263
85665: PUSH
85666: LD_INT 1
85668: EQUAL
85669: IFFALSE 85750
// begin driver := IsDrivenBy ( vehicle ) ;
85671: LD_ADDR_VAR 0 4
85675: PUSH
85676: LD_VAR 0 1
85680: PPUSH
85681: CALL_OW 311
85685: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85686: LD_VAR 0 4
85690: PPUSH
85691: LD_EXP 130
85695: PUSH
85696: LD_VAR 0 2
85700: ARRAY
85701: PUSH
85702: LD_INT 3
85704: ARRAY
85705: PPUSH
85706: LD_EXP 130
85710: PUSH
85711: LD_VAR 0 2
85715: ARRAY
85716: PUSH
85717: LD_INT 4
85719: ARRAY
85720: PPUSH
85721: CALL_OW 171
// AddComExitVehicle ( driver ) ;
85725: LD_VAR 0 4
85729: PPUSH
85730: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
85734: LD_VAR 0 4
85738: PPUSH
85739: LD_VAR 0 2
85743: PPUSH
85744: CALL_OW 180
// end else
85748: GO 85863
// if GetControl ( vehicle ) = control_remote then
85750: LD_VAR 0 1
85754: PPUSH
85755: CALL_OW 263
85759: PUSH
85760: LD_INT 2
85762: EQUAL
85763: IFFALSE 85824
// begin wait ( 0 0$2 ) ;
85765: LD_INT 70
85767: PPUSH
85768: CALL_OW 67
// if Connect ( vehicle ) then
85772: LD_VAR 0 1
85776: PPUSH
85777: CALL 36220 0 1
85781: IFFALSE 85822
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85783: LD_VAR 0 1
85787: PPUSH
85788: LD_EXP 130
85792: PUSH
85793: LD_VAR 0 2
85797: ARRAY
85798: PUSH
85799: LD_INT 3
85801: ARRAY
85802: PPUSH
85803: LD_EXP 130
85807: PUSH
85808: LD_VAR 0 2
85812: ARRAY
85813: PUSH
85814: LD_INT 4
85816: ARRAY
85817: PPUSH
85818: CALL_OW 171
// end else
85822: GO 85863
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85824: LD_VAR 0 1
85828: PPUSH
85829: LD_EXP 130
85833: PUSH
85834: LD_VAR 0 2
85838: ARRAY
85839: PUSH
85840: LD_INT 3
85842: ARRAY
85843: PPUSH
85844: LD_EXP 130
85848: PUSH
85849: LD_VAR 0 2
85853: ARRAY
85854: PUSH
85855: LD_INT 4
85857: ARRAY
85858: PPUSH
85859: CALL_OW 171
// end ; end ;
85863: LD_VAR 0 3
85867: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
85868: LD_INT 0
85870: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
85871: LD_VAR 0 1
85875: PUSH
85876: LD_INT 250
85878: EQUAL
85879: PUSH
85880: LD_VAR 0 2
85884: PPUSH
85885: CALL_OW 264
85889: PUSH
85890: LD_INT 81
85892: EQUAL
85893: AND
85894: IFFALSE 85915
// MinerPlaceMine ( unit , x , y ) ;
85896: LD_VAR 0 2
85900: PPUSH
85901: LD_VAR 0 4
85905: PPUSH
85906: LD_VAR 0 5
85910: PPUSH
85911: CALL 88300 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
85915: LD_VAR 0 1
85919: PUSH
85920: LD_INT 251
85922: EQUAL
85923: PUSH
85924: LD_VAR 0 2
85928: PPUSH
85929: CALL_OW 264
85933: PUSH
85934: LD_INT 81
85936: EQUAL
85937: AND
85938: IFFALSE 85959
// MinerDetonateMine ( unit , x , y ) ;
85940: LD_VAR 0 2
85944: PPUSH
85945: LD_VAR 0 4
85949: PPUSH
85950: LD_VAR 0 5
85954: PPUSH
85955: CALL 88575 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
85959: LD_VAR 0 1
85963: PUSH
85964: LD_INT 252
85966: EQUAL
85967: PUSH
85968: LD_VAR 0 2
85972: PPUSH
85973: CALL_OW 264
85977: PUSH
85978: LD_INT 81
85980: EQUAL
85981: AND
85982: IFFALSE 86003
// MinerCreateMinefield ( unit , x , y ) ;
85984: LD_VAR 0 2
85988: PPUSH
85989: LD_VAR 0 4
85993: PPUSH
85994: LD_VAR 0 5
85998: PPUSH
85999: CALL 88992 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
86003: LD_VAR 0 1
86007: PUSH
86008: LD_INT 253
86010: EQUAL
86011: PUSH
86012: LD_VAR 0 2
86016: PPUSH
86017: CALL_OW 257
86021: PUSH
86022: LD_INT 5
86024: EQUAL
86025: AND
86026: IFFALSE 86047
// ComBinocular ( unit , x , y ) ;
86028: LD_VAR 0 2
86032: PPUSH
86033: LD_VAR 0 4
86037: PPUSH
86038: LD_VAR 0 5
86042: PPUSH
86043: CALL 89361 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
86047: LD_VAR 0 1
86051: PUSH
86052: LD_INT 254
86054: EQUAL
86055: PUSH
86056: LD_VAR 0 2
86060: PPUSH
86061: CALL_OW 264
86065: PUSH
86066: LD_INT 99
86068: EQUAL
86069: AND
86070: PUSH
86071: LD_VAR 0 3
86075: PPUSH
86076: CALL_OW 263
86080: PUSH
86081: LD_INT 3
86083: EQUAL
86084: AND
86085: IFFALSE 86101
// HackDestroyVehicle ( unit , selectedUnit ) ;
86087: LD_VAR 0 2
86091: PPUSH
86092: LD_VAR 0 3
86096: PPUSH
86097: CALL 87664 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
86101: LD_VAR 0 1
86105: PUSH
86106: LD_INT 255
86108: EQUAL
86109: PUSH
86110: LD_VAR 0 2
86114: PPUSH
86115: CALL_OW 264
86119: PUSH
86120: LD_INT 14
86122: PUSH
86123: LD_INT 53
86125: PUSH
86126: EMPTY
86127: LIST
86128: LIST
86129: IN
86130: AND
86131: PUSH
86132: LD_VAR 0 4
86136: PPUSH
86137: LD_VAR 0 5
86141: PPUSH
86142: CALL_OW 488
86146: AND
86147: IFFALSE 86171
// CutTreeXYR ( unit , x , y , 12 ) ;
86149: LD_VAR 0 2
86153: PPUSH
86154: LD_VAR 0 4
86158: PPUSH
86159: LD_VAR 0 5
86163: PPUSH
86164: LD_INT 12
86166: PPUSH
86167: CALL 86234 0 4
// if cmd = 256 then
86171: LD_VAR 0 1
86175: PUSH
86176: LD_INT 256
86178: EQUAL
86179: IFFALSE 86200
// SetFactoryWaypoint ( unit , x , y ) ;
86181: LD_VAR 0 2
86185: PPUSH
86186: LD_VAR 0 4
86190: PPUSH
86191: LD_VAR 0 5
86195: PPUSH
86196: CALL 84018 0 3
// if cmd = 257 then
86200: LD_VAR 0 1
86204: PUSH
86205: LD_INT 257
86207: EQUAL
86208: IFFALSE 86229
// SetWarehouseGatheringPoint ( unit , x , y ) ;
86210: LD_VAR 0 2
86214: PPUSH
86215: LD_VAR 0 4
86219: PPUSH
86220: LD_VAR 0 5
86224: PPUSH
86225: CALL 84380 0 3
// end ;
86229: LD_VAR 0 6
86233: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
86234: LD_INT 0
86236: PPUSH
86237: PPUSH
86238: PPUSH
86239: PPUSH
86240: PPUSH
86241: PPUSH
86242: PPUSH
86243: PPUSH
86244: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
86245: LD_VAR 0 1
86249: NOT
86250: PUSH
86251: LD_VAR 0 2
86255: PPUSH
86256: LD_VAR 0 3
86260: PPUSH
86261: CALL_OW 488
86265: NOT
86266: OR
86267: PUSH
86268: LD_VAR 0 4
86272: NOT
86273: OR
86274: IFFALSE 86278
// exit ;
86276: GO 86618
// list := [ ] ;
86278: LD_ADDR_VAR 0 13
86282: PUSH
86283: EMPTY
86284: ST_TO_ADDR
// if x - r < 0 then
86285: LD_VAR 0 2
86289: PUSH
86290: LD_VAR 0 4
86294: MINUS
86295: PUSH
86296: LD_INT 0
86298: LESS
86299: IFFALSE 86311
// min_x := 0 else
86301: LD_ADDR_VAR 0 7
86305: PUSH
86306: LD_INT 0
86308: ST_TO_ADDR
86309: GO 86327
// min_x := x - r ;
86311: LD_ADDR_VAR 0 7
86315: PUSH
86316: LD_VAR 0 2
86320: PUSH
86321: LD_VAR 0 4
86325: MINUS
86326: ST_TO_ADDR
// if y - r < 0 then
86327: LD_VAR 0 3
86331: PUSH
86332: LD_VAR 0 4
86336: MINUS
86337: PUSH
86338: LD_INT 0
86340: LESS
86341: IFFALSE 86353
// min_y := 0 else
86343: LD_ADDR_VAR 0 8
86347: PUSH
86348: LD_INT 0
86350: ST_TO_ADDR
86351: GO 86369
// min_y := y - r ;
86353: LD_ADDR_VAR 0 8
86357: PUSH
86358: LD_VAR 0 3
86362: PUSH
86363: LD_VAR 0 4
86367: MINUS
86368: ST_TO_ADDR
// max_x := x + r ;
86369: LD_ADDR_VAR 0 9
86373: PUSH
86374: LD_VAR 0 2
86378: PUSH
86379: LD_VAR 0 4
86383: PLUS
86384: ST_TO_ADDR
// max_y := y + r ;
86385: LD_ADDR_VAR 0 10
86389: PUSH
86390: LD_VAR 0 3
86394: PUSH
86395: LD_VAR 0 4
86399: PLUS
86400: ST_TO_ADDR
// for _x = min_x to max_x do
86401: LD_ADDR_VAR 0 11
86405: PUSH
86406: DOUBLE
86407: LD_VAR 0 7
86411: DEC
86412: ST_TO_ADDR
86413: LD_VAR 0 9
86417: PUSH
86418: FOR_TO
86419: IFFALSE 86536
// for _y = min_y to max_y do
86421: LD_ADDR_VAR 0 12
86425: PUSH
86426: DOUBLE
86427: LD_VAR 0 8
86431: DEC
86432: ST_TO_ADDR
86433: LD_VAR 0 10
86437: PUSH
86438: FOR_TO
86439: IFFALSE 86532
// begin if not ValidHex ( _x , _y ) then
86441: LD_VAR 0 11
86445: PPUSH
86446: LD_VAR 0 12
86450: PPUSH
86451: CALL_OW 488
86455: NOT
86456: IFFALSE 86460
// continue ;
86458: GO 86438
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
86460: LD_VAR 0 11
86464: PPUSH
86465: LD_VAR 0 12
86469: PPUSH
86470: CALL_OW 351
86474: PUSH
86475: LD_VAR 0 11
86479: PPUSH
86480: LD_VAR 0 12
86484: PPUSH
86485: CALL_OW 554
86489: AND
86490: IFFALSE 86530
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
86492: LD_ADDR_VAR 0 13
86496: PUSH
86497: LD_VAR 0 13
86501: PPUSH
86502: LD_VAR 0 13
86506: PUSH
86507: LD_INT 1
86509: PLUS
86510: PPUSH
86511: LD_VAR 0 11
86515: PUSH
86516: LD_VAR 0 12
86520: PUSH
86521: EMPTY
86522: LIST
86523: LIST
86524: PPUSH
86525: CALL_OW 2
86529: ST_TO_ADDR
// end ;
86530: GO 86438
86532: POP
86533: POP
86534: GO 86418
86536: POP
86537: POP
// if not list then
86538: LD_VAR 0 13
86542: NOT
86543: IFFALSE 86547
// exit ;
86545: GO 86618
// for i in list do
86547: LD_ADDR_VAR 0 6
86551: PUSH
86552: LD_VAR 0 13
86556: PUSH
86557: FOR_IN
86558: IFFALSE 86616
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
86560: LD_VAR 0 1
86564: PPUSH
86565: LD_STRING M
86567: PUSH
86568: LD_VAR 0 6
86572: PUSH
86573: LD_INT 1
86575: ARRAY
86576: PUSH
86577: LD_VAR 0 6
86581: PUSH
86582: LD_INT 2
86584: ARRAY
86585: PUSH
86586: LD_INT 0
86588: PUSH
86589: LD_INT 0
86591: PUSH
86592: LD_INT 0
86594: PUSH
86595: LD_INT 0
86597: PUSH
86598: EMPTY
86599: LIST
86600: LIST
86601: LIST
86602: LIST
86603: LIST
86604: LIST
86605: LIST
86606: PUSH
86607: EMPTY
86608: LIST
86609: PPUSH
86610: CALL_OW 447
86614: GO 86557
86616: POP
86617: POP
// end ;
86618: LD_VAR 0 5
86622: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
86623: LD_EXP 133
86627: NOT
86628: IFFALSE 86678
86630: GO 86632
86632: DISABLE
// begin initHack := true ;
86633: LD_ADDR_EXP 133
86637: PUSH
86638: LD_INT 1
86640: ST_TO_ADDR
// hackTanks := [ ] ;
86641: LD_ADDR_EXP 134
86645: PUSH
86646: EMPTY
86647: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
86648: LD_ADDR_EXP 135
86652: PUSH
86653: EMPTY
86654: ST_TO_ADDR
// hackLimit := 3 ;
86655: LD_ADDR_EXP 136
86659: PUSH
86660: LD_INT 3
86662: ST_TO_ADDR
// hackDist := 12 ;
86663: LD_ADDR_EXP 137
86667: PUSH
86668: LD_INT 12
86670: ST_TO_ADDR
// hackCounter := [ ] ;
86671: LD_ADDR_EXP 138
86675: PUSH
86676: EMPTY
86677: ST_TO_ADDR
// end ;
86678: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
86679: LD_EXP 133
86683: PUSH
86684: LD_INT 34
86686: PUSH
86687: LD_INT 99
86689: PUSH
86690: EMPTY
86691: LIST
86692: LIST
86693: PPUSH
86694: CALL_OW 69
86698: AND
86699: IFFALSE 86952
86701: GO 86703
86703: DISABLE
86704: LD_INT 0
86706: PPUSH
86707: PPUSH
// begin enable ;
86708: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
86709: LD_ADDR_VAR 0 1
86713: PUSH
86714: LD_INT 34
86716: PUSH
86717: LD_INT 99
86719: PUSH
86720: EMPTY
86721: LIST
86722: LIST
86723: PPUSH
86724: CALL_OW 69
86728: PUSH
86729: FOR_IN
86730: IFFALSE 86950
// begin if not i in hackTanks then
86732: LD_VAR 0 1
86736: PUSH
86737: LD_EXP 134
86741: IN
86742: NOT
86743: IFFALSE 86826
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
86745: LD_ADDR_EXP 134
86749: PUSH
86750: LD_EXP 134
86754: PPUSH
86755: LD_EXP 134
86759: PUSH
86760: LD_INT 1
86762: PLUS
86763: PPUSH
86764: LD_VAR 0 1
86768: PPUSH
86769: CALL_OW 1
86773: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
86774: LD_ADDR_EXP 135
86778: PUSH
86779: LD_EXP 135
86783: PPUSH
86784: LD_EXP 135
86788: PUSH
86789: LD_INT 1
86791: PLUS
86792: PPUSH
86793: EMPTY
86794: PPUSH
86795: CALL_OW 1
86799: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
86800: LD_ADDR_EXP 138
86804: PUSH
86805: LD_EXP 138
86809: PPUSH
86810: LD_EXP 138
86814: PUSH
86815: LD_INT 1
86817: PLUS
86818: PPUSH
86819: EMPTY
86820: PPUSH
86821: CALL_OW 1
86825: ST_TO_ADDR
// end ; if not IsOk ( i ) then
86826: LD_VAR 0 1
86830: PPUSH
86831: CALL_OW 302
86835: NOT
86836: IFFALSE 86849
// begin HackUnlinkAll ( i ) ;
86838: LD_VAR 0 1
86842: PPUSH
86843: CALL 86955 0 1
// continue ;
86847: GO 86729
// end ; HackCheckCapturedStatus ( i ) ;
86849: LD_VAR 0 1
86853: PPUSH
86854: CALL 87398 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
86858: LD_ADDR_VAR 0 2
86862: PUSH
86863: LD_INT 81
86865: PUSH
86866: LD_VAR 0 1
86870: PPUSH
86871: CALL_OW 255
86875: PUSH
86876: EMPTY
86877: LIST
86878: LIST
86879: PUSH
86880: LD_INT 33
86882: PUSH
86883: LD_INT 3
86885: PUSH
86886: EMPTY
86887: LIST
86888: LIST
86889: PUSH
86890: LD_INT 91
86892: PUSH
86893: LD_VAR 0 1
86897: PUSH
86898: LD_EXP 137
86902: PUSH
86903: EMPTY
86904: LIST
86905: LIST
86906: LIST
86907: PUSH
86908: LD_INT 50
86910: PUSH
86911: EMPTY
86912: LIST
86913: PUSH
86914: EMPTY
86915: LIST
86916: LIST
86917: LIST
86918: LIST
86919: PPUSH
86920: CALL_OW 69
86924: ST_TO_ADDR
// if not tmp then
86925: LD_VAR 0 2
86929: NOT
86930: IFFALSE 86934
// continue ;
86932: GO 86729
// HackLink ( i , tmp ) ;
86934: LD_VAR 0 1
86938: PPUSH
86939: LD_VAR 0 2
86943: PPUSH
86944: CALL 87091 0 2
// end ;
86948: GO 86729
86950: POP
86951: POP
// end ;
86952: PPOPN 2
86954: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
86955: LD_INT 0
86957: PPUSH
86958: PPUSH
86959: PPUSH
// if not hack in hackTanks then
86960: LD_VAR 0 1
86964: PUSH
86965: LD_EXP 134
86969: IN
86970: NOT
86971: IFFALSE 86975
// exit ;
86973: GO 87086
// index := GetElementIndex ( hackTanks , hack ) ;
86975: LD_ADDR_VAR 0 4
86979: PUSH
86980: LD_EXP 134
86984: PPUSH
86985: LD_VAR 0 1
86989: PPUSH
86990: CALL 33036 0 2
86994: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
86995: LD_EXP 135
86999: PUSH
87000: LD_VAR 0 4
87004: ARRAY
87005: IFFALSE 87086
// begin for i in hackTanksCaptured [ index ] do
87007: LD_ADDR_VAR 0 3
87011: PUSH
87012: LD_EXP 135
87016: PUSH
87017: LD_VAR 0 4
87021: ARRAY
87022: PUSH
87023: FOR_IN
87024: IFFALSE 87050
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
87026: LD_VAR 0 3
87030: PUSH
87031: LD_INT 1
87033: ARRAY
87034: PPUSH
87035: LD_VAR 0 3
87039: PUSH
87040: LD_INT 2
87042: ARRAY
87043: PPUSH
87044: CALL_OW 235
87048: GO 87023
87050: POP
87051: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
87052: LD_ADDR_EXP 135
87056: PUSH
87057: LD_EXP 135
87061: PPUSH
87062: LD_VAR 0 4
87066: PPUSH
87067: EMPTY
87068: PPUSH
87069: CALL_OW 1
87073: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
87074: LD_VAR 0 1
87078: PPUSH
87079: LD_INT 0
87081: PPUSH
87082: CALL_OW 505
// end ; end ;
87086: LD_VAR 0 2
87090: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
87091: LD_INT 0
87093: PPUSH
87094: PPUSH
87095: PPUSH
// if not hack in hackTanks or not vehicles then
87096: LD_VAR 0 1
87100: PUSH
87101: LD_EXP 134
87105: IN
87106: NOT
87107: PUSH
87108: LD_VAR 0 2
87112: NOT
87113: OR
87114: IFFALSE 87118
// exit ;
87116: GO 87393
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
87118: LD_ADDR_VAR 0 2
87122: PUSH
87123: LD_VAR 0 1
87127: PPUSH
87128: LD_VAR 0 2
87132: PPUSH
87133: LD_INT 1
87135: PPUSH
87136: LD_INT 1
87138: PPUSH
87139: CALL 33686 0 4
87143: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
87144: LD_ADDR_VAR 0 5
87148: PUSH
87149: LD_EXP 134
87153: PPUSH
87154: LD_VAR 0 1
87158: PPUSH
87159: CALL 33036 0 2
87163: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
87164: LD_EXP 135
87168: PUSH
87169: LD_VAR 0 5
87173: ARRAY
87174: PUSH
87175: LD_EXP 136
87179: LESS
87180: IFFALSE 87369
// begin for i := 1 to vehicles do
87182: LD_ADDR_VAR 0 4
87186: PUSH
87187: DOUBLE
87188: LD_INT 1
87190: DEC
87191: ST_TO_ADDR
87192: LD_VAR 0 2
87196: PUSH
87197: FOR_TO
87198: IFFALSE 87367
// begin if hackTanksCaptured [ index ] = hackLimit then
87200: LD_EXP 135
87204: PUSH
87205: LD_VAR 0 5
87209: ARRAY
87210: PUSH
87211: LD_EXP 136
87215: EQUAL
87216: IFFALSE 87220
// break ;
87218: GO 87367
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
87220: LD_ADDR_EXP 138
87224: PUSH
87225: LD_EXP 138
87229: PPUSH
87230: LD_VAR 0 5
87234: PPUSH
87235: LD_EXP 138
87239: PUSH
87240: LD_VAR 0 5
87244: ARRAY
87245: PUSH
87246: LD_INT 1
87248: PLUS
87249: PPUSH
87250: CALL_OW 1
87254: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
87255: LD_ADDR_EXP 135
87259: PUSH
87260: LD_EXP 135
87264: PPUSH
87265: LD_VAR 0 5
87269: PUSH
87270: LD_EXP 135
87274: PUSH
87275: LD_VAR 0 5
87279: ARRAY
87280: PUSH
87281: LD_INT 1
87283: PLUS
87284: PUSH
87285: EMPTY
87286: LIST
87287: LIST
87288: PPUSH
87289: LD_VAR 0 2
87293: PUSH
87294: LD_VAR 0 4
87298: ARRAY
87299: PUSH
87300: LD_VAR 0 2
87304: PUSH
87305: LD_VAR 0 4
87309: ARRAY
87310: PPUSH
87311: CALL_OW 255
87315: PUSH
87316: EMPTY
87317: LIST
87318: LIST
87319: PPUSH
87320: CALL 33251 0 3
87324: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
87325: LD_VAR 0 2
87329: PUSH
87330: LD_VAR 0 4
87334: ARRAY
87335: PPUSH
87336: LD_VAR 0 1
87340: PPUSH
87341: CALL_OW 255
87345: PPUSH
87346: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
87350: LD_VAR 0 2
87354: PUSH
87355: LD_VAR 0 4
87359: ARRAY
87360: PPUSH
87361: CALL_OW 141
// end ;
87365: GO 87197
87367: POP
87368: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
87369: LD_VAR 0 1
87373: PPUSH
87374: LD_EXP 135
87378: PUSH
87379: LD_VAR 0 5
87383: ARRAY
87384: PUSH
87385: LD_INT 0
87387: PLUS
87388: PPUSH
87389: CALL_OW 505
// end ;
87393: LD_VAR 0 3
87397: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
87398: LD_INT 0
87400: PPUSH
87401: PPUSH
87402: PPUSH
87403: PPUSH
// if not hack in hackTanks then
87404: LD_VAR 0 1
87408: PUSH
87409: LD_EXP 134
87413: IN
87414: NOT
87415: IFFALSE 87419
// exit ;
87417: GO 87659
// index := GetElementIndex ( hackTanks , hack ) ;
87419: LD_ADDR_VAR 0 4
87423: PUSH
87424: LD_EXP 134
87428: PPUSH
87429: LD_VAR 0 1
87433: PPUSH
87434: CALL 33036 0 2
87438: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
87439: LD_ADDR_VAR 0 3
87443: PUSH
87444: DOUBLE
87445: LD_EXP 135
87449: PUSH
87450: LD_VAR 0 4
87454: ARRAY
87455: INC
87456: ST_TO_ADDR
87457: LD_INT 1
87459: PUSH
87460: FOR_DOWNTO
87461: IFFALSE 87633
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
87463: LD_ADDR_VAR 0 5
87467: PUSH
87468: LD_EXP 135
87472: PUSH
87473: LD_VAR 0 4
87477: ARRAY
87478: PUSH
87479: LD_VAR 0 3
87483: ARRAY
87484: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
87485: LD_VAR 0 5
87489: PUSH
87490: LD_INT 1
87492: ARRAY
87493: PPUSH
87494: CALL_OW 302
87498: NOT
87499: PUSH
87500: LD_VAR 0 5
87504: PUSH
87505: LD_INT 1
87507: ARRAY
87508: PPUSH
87509: CALL_OW 255
87513: PUSH
87514: LD_VAR 0 1
87518: PPUSH
87519: CALL_OW 255
87523: NONEQUAL
87524: OR
87525: IFFALSE 87631
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
87527: LD_VAR 0 5
87531: PUSH
87532: LD_INT 1
87534: ARRAY
87535: PPUSH
87536: CALL_OW 305
87540: PUSH
87541: LD_VAR 0 5
87545: PUSH
87546: LD_INT 1
87548: ARRAY
87549: PPUSH
87550: CALL_OW 255
87554: PUSH
87555: LD_VAR 0 1
87559: PPUSH
87560: CALL_OW 255
87564: EQUAL
87565: AND
87566: IFFALSE 87590
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
87568: LD_VAR 0 5
87572: PUSH
87573: LD_INT 1
87575: ARRAY
87576: PPUSH
87577: LD_VAR 0 5
87581: PUSH
87582: LD_INT 2
87584: ARRAY
87585: PPUSH
87586: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
87590: LD_ADDR_EXP 135
87594: PUSH
87595: LD_EXP 135
87599: PPUSH
87600: LD_VAR 0 4
87604: PPUSH
87605: LD_EXP 135
87609: PUSH
87610: LD_VAR 0 4
87614: ARRAY
87615: PPUSH
87616: LD_VAR 0 3
87620: PPUSH
87621: CALL_OW 3
87625: PPUSH
87626: CALL_OW 1
87630: ST_TO_ADDR
// end ; end ;
87631: GO 87460
87633: POP
87634: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
87635: LD_VAR 0 1
87639: PPUSH
87640: LD_EXP 135
87644: PUSH
87645: LD_VAR 0 4
87649: ARRAY
87650: PUSH
87651: LD_INT 0
87653: PLUS
87654: PPUSH
87655: CALL_OW 505
// end ;
87659: LD_VAR 0 2
87663: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
87664: LD_INT 0
87666: PPUSH
87667: PPUSH
87668: PPUSH
87669: PPUSH
// if not hack in hackTanks then
87670: LD_VAR 0 1
87674: PUSH
87675: LD_EXP 134
87679: IN
87680: NOT
87681: IFFALSE 87685
// exit ;
87683: GO 87770
// index := GetElementIndex ( hackTanks , hack ) ;
87685: LD_ADDR_VAR 0 5
87689: PUSH
87690: LD_EXP 134
87694: PPUSH
87695: LD_VAR 0 1
87699: PPUSH
87700: CALL 33036 0 2
87704: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
87705: LD_ADDR_VAR 0 4
87709: PUSH
87710: DOUBLE
87711: LD_INT 1
87713: DEC
87714: ST_TO_ADDR
87715: LD_EXP 135
87719: PUSH
87720: LD_VAR 0 5
87724: ARRAY
87725: PUSH
87726: FOR_TO
87727: IFFALSE 87768
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
87729: LD_EXP 135
87733: PUSH
87734: LD_VAR 0 5
87738: ARRAY
87739: PUSH
87740: LD_VAR 0 4
87744: ARRAY
87745: PUSH
87746: LD_INT 1
87748: ARRAY
87749: PUSH
87750: LD_VAR 0 2
87754: EQUAL
87755: IFFALSE 87766
// KillUnit ( vehicle ) ;
87757: LD_VAR 0 2
87761: PPUSH
87762: CALL_OW 66
87766: GO 87726
87768: POP
87769: POP
// end ;
87770: LD_VAR 0 3
87774: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
87775: LD_EXP 139
87779: NOT
87780: IFFALSE 87815
87782: GO 87784
87784: DISABLE
// begin initMiner := true ;
87785: LD_ADDR_EXP 139
87789: PUSH
87790: LD_INT 1
87792: ST_TO_ADDR
// minersList := [ ] ;
87793: LD_ADDR_EXP 140
87797: PUSH
87798: EMPTY
87799: ST_TO_ADDR
// minerMinesList := [ ] ;
87800: LD_ADDR_EXP 141
87804: PUSH
87805: EMPTY
87806: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
87807: LD_ADDR_EXP 142
87811: PUSH
87812: LD_INT 5
87814: ST_TO_ADDR
// end ;
87815: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
87816: LD_EXP 139
87820: PUSH
87821: LD_INT 34
87823: PUSH
87824: LD_INT 81
87826: PUSH
87827: EMPTY
87828: LIST
87829: LIST
87830: PPUSH
87831: CALL_OW 69
87835: AND
87836: IFFALSE 88297
87838: GO 87840
87840: DISABLE
87841: LD_INT 0
87843: PPUSH
87844: PPUSH
87845: PPUSH
87846: PPUSH
// begin enable ;
87847: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
87848: LD_ADDR_VAR 0 1
87852: PUSH
87853: LD_INT 34
87855: PUSH
87856: LD_INT 81
87858: PUSH
87859: EMPTY
87860: LIST
87861: LIST
87862: PPUSH
87863: CALL_OW 69
87867: PUSH
87868: FOR_IN
87869: IFFALSE 87941
// begin if not i in minersList then
87871: LD_VAR 0 1
87875: PUSH
87876: LD_EXP 140
87880: IN
87881: NOT
87882: IFFALSE 87939
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
87884: LD_ADDR_EXP 140
87888: PUSH
87889: LD_EXP 140
87893: PPUSH
87894: LD_EXP 140
87898: PUSH
87899: LD_INT 1
87901: PLUS
87902: PPUSH
87903: LD_VAR 0 1
87907: PPUSH
87908: CALL_OW 1
87912: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
87913: LD_ADDR_EXP 141
87917: PUSH
87918: LD_EXP 141
87922: PPUSH
87923: LD_EXP 141
87927: PUSH
87928: LD_INT 1
87930: PLUS
87931: PPUSH
87932: EMPTY
87933: PPUSH
87934: CALL_OW 1
87938: ST_TO_ADDR
// end end ;
87939: GO 87868
87941: POP
87942: POP
// for i := minerMinesList downto 1 do
87943: LD_ADDR_VAR 0 1
87947: PUSH
87948: DOUBLE
87949: LD_EXP 141
87953: INC
87954: ST_TO_ADDR
87955: LD_INT 1
87957: PUSH
87958: FOR_DOWNTO
87959: IFFALSE 88295
// begin if IsLive ( minersList [ i ] ) then
87961: LD_EXP 140
87965: PUSH
87966: LD_VAR 0 1
87970: ARRAY
87971: PPUSH
87972: CALL_OW 300
87976: IFFALSE 88004
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
87978: LD_EXP 140
87982: PUSH
87983: LD_VAR 0 1
87987: ARRAY
87988: PPUSH
87989: LD_EXP 141
87993: PUSH
87994: LD_VAR 0 1
87998: ARRAY
87999: PPUSH
88000: CALL_OW 505
// if not minerMinesList [ i ] then
88004: LD_EXP 141
88008: PUSH
88009: LD_VAR 0 1
88013: ARRAY
88014: NOT
88015: IFFALSE 88019
// continue ;
88017: GO 87958
// for j := minerMinesList [ i ] downto 1 do
88019: LD_ADDR_VAR 0 2
88023: PUSH
88024: DOUBLE
88025: LD_EXP 141
88029: PUSH
88030: LD_VAR 0 1
88034: ARRAY
88035: INC
88036: ST_TO_ADDR
88037: LD_INT 1
88039: PUSH
88040: FOR_DOWNTO
88041: IFFALSE 88291
// begin side := GetSide ( minersList [ i ] ) ;
88043: LD_ADDR_VAR 0 3
88047: PUSH
88048: LD_EXP 140
88052: PUSH
88053: LD_VAR 0 1
88057: ARRAY
88058: PPUSH
88059: CALL_OW 255
88063: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
88064: LD_ADDR_VAR 0 4
88068: PUSH
88069: LD_EXP 141
88073: PUSH
88074: LD_VAR 0 1
88078: ARRAY
88079: PUSH
88080: LD_VAR 0 2
88084: ARRAY
88085: PUSH
88086: LD_INT 1
88088: ARRAY
88089: PPUSH
88090: LD_EXP 141
88094: PUSH
88095: LD_VAR 0 1
88099: ARRAY
88100: PUSH
88101: LD_VAR 0 2
88105: ARRAY
88106: PUSH
88107: LD_INT 2
88109: ARRAY
88110: PPUSH
88111: CALL_OW 428
88115: ST_TO_ADDR
// if not tmp then
88116: LD_VAR 0 4
88120: NOT
88121: IFFALSE 88125
// continue ;
88123: GO 88040
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
88125: LD_VAR 0 4
88129: PUSH
88130: LD_INT 81
88132: PUSH
88133: LD_VAR 0 3
88137: PUSH
88138: EMPTY
88139: LIST
88140: LIST
88141: PPUSH
88142: CALL_OW 69
88146: IN
88147: PUSH
88148: LD_EXP 141
88152: PUSH
88153: LD_VAR 0 1
88157: ARRAY
88158: PUSH
88159: LD_VAR 0 2
88163: ARRAY
88164: PUSH
88165: LD_INT 1
88167: ARRAY
88168: PPUSH
88169: LD_EXP 141
88173: PUSH
88174: LD_VAR 0 1
88178: ARRAY
88179: PUSH
88180: LD_VAR 0 2
88184: ARRAY
88185: PUSH
88186: LD_INT 2
88188: ARRAY
88189: PPUSH
88190: CALL_OW 458
88194: AND
88195: IFFALSE 88289
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
88197: LD_EXP 141
88201: PUSH
88202: LD_VAR 0 1
88206: ARRAY
88207: PUSH
88208: LD_VAR 0 2
88212: ARRAY
88213: PUSH
88214: LD_INT 1
88216: ARRAY
88217: PPUSH
88218: LD_EXP 141
88222: PUSH
88223: LD_VAR 0 1
88227: ARRAY
88228: PUSH
88229: LD_VAR 0 2
88233: ARRAY
88234: PUSH
88235: LD_INT 2
88237: ARRAY
88238: PPUSH
88239: LD_VAR 0 3
88243: PPUSH
88244: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
88248: LD_ADDR_EXP 141
88252: PUSH
88253: LD_EXP 141
88257: PPUSH
88258: LD_VAR 0 1
88262: PPUSH
88263: LD_EXP 141
88267: PUSH
88268: LD_VAR 0 1
88272: ARRAY
88273: PPUSH
88274: LD_VAR 0 2
88278: PPUSH
88279: CALL_OW 3
88283: PPUSH
88284: CALL_OW 1
88288: ST_TO_ADDR
// end ; end ;
88289: GO 88040
88291: POP
88292: POP
// end ;
88293: GO 87958
88295: POP
88296: POP
// end ;
88297: PPOPN 4
88299: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
88300: LD_INT 0
88302: PPUSH
88303: PPUSH
// result := false ;
88304: LD_ADDR_VAR 0 4
88308: PUSH
88309: LD_INT 0
88311: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
88312: LD_VAR 0 1
88316: PPUSH
88317: CALL_OW 264
88321: PUSH
88322: LD_INT 81
88324: EQUAL
88325: NOT
88326: IFFALSE 88330
// exit ;
88328: GO 88570
// index := GetElementIndex ( minersList , unit ) ;
88330: LD_ADDR_VAR 0 5
88334: PUSH
88335: LD_EXP 140
88339: PPUSH
88340: LD_VAR 0 1
88344: PPUSH
88345: CALL 33036 0 2
88349: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
88350: LD_EXP 141
88354: PUSH
88355: LD_VAR 0 5
88359: ARRAY
88360: PUSH
88361: LD_EXP 142
88365: GREATEREQUAL
88366: IFFALSE 88370
// exit ;
88368: GO 88570
// ComMoveXY ( unit , x , y ) ;
88370: LD_VAR 0 1
88374: PPUSH
88375: LD_VAR 0 2
88379: PPUSH
88380: LD_VAR 0 3
88384: PPUSH
88385: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
88389: LD_INT 35
88391: PPUSH
88392: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
88396: LD_VAR 0 1
88400: PPUSH
88401: LD_VAR 0 2
88405: PPUSH
88406: LD_VAR 0 3
88410: PPUSH
88411: CALL 64391 0 3
88415: NOT
88416: PUSH
88417: LD_VAR 0 1
88421: PPUSH
88422: CALL_OW 314
88426: AND
88427: IFFALSE 88431
// exit ;
88429: GO 88570
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
88431: LD_VAR 0 2
88435: PPUSH
88436: LD_VAR 0 3
88440: PPUSH
88441: CALL_OW 428
88445: PUSH
88446: LD_VAR 0 1
88450: EQUAL
88451: PUSH
88452: LD_VAR 0 1
88456: PPUSH
88457: CALL_OW 314
88461: NOT
88462: AND
88463: IFFALSE 88389
// PlaySoundXY ( x , y , PlantMine ) ;
88465: LD_VAR 0 2
88469: PPUSH
88470: LD_VAR 0 3
88474: PPUSH
88475: LD_STRING PlantMine
88477: PPUSH
88478: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
88482: LD_VAR 0 2
88486: PPUSH
88487: LD_VAR 0 3
88491: PPUSH
88492: LD_VAR 0 1
88496: PPUSH
88497: CALL_OW 255
88501: PPUSH
88502: LD_INT 0
88504: PPUSH
88505: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
88509: LD_ADDR_EXP 141
88513: PUSH
88514: LD_EXP 141
88518: PPUSH
88519: LD_VAR 0 5
88523: PUSH
88524: LD_EXP 141
88528: PUSH
88529: LD_VAR 0 5
88533: ARRAY
88534: PUSH
88535: LD_INT 1
88537: PLUS
88538: PUSH
88539: EMPTY
88540: LIST
88541: LIST
88542: PPUSH
88543: LD_VAR 0 2
88547: PUSH
88548: LD_VAR 0 3
88552: PUSH
88553: EMPTY
88554: LIST
88555: LIST
88556: PPUSH
88557: CALL 33251 0 3
88561: ST_TO_ADDR
// result := true ;
88562: LD_ADDR_VAR 0 4
88566: PUSH
88567: LD_INT 1
88569: ST_TO_ADDR
// end ;
88570: LD_VAR 0 4
88574: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
88575: LD_INT 0
88577: PPUSH
88578: PPUSH
88579: PPUSH
// if not unit in minersList then
88580: LD_VAR 0 1
88584: PUSH
88585: LD_EXP 140
88589: IN
88590: NOT
88591: IFFALSE 88595
// exit ;
88593: GO 88987
// index := GetElementIndex ( minersList , unit ) ;
88595: LD_ADDR_VAR 0 6
88599: PUSH
88600: LD_EXP 140
88604: PPUSH
88605: LD_VAR 0 1
88609: PPUSH
88610: CALL 33036 0 2
88614: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
88615: LD_ADDR_VAR 0 5
88619: PUSH
88620: DOUBLE
88621: LD_EXP 141
88625: PUSH
88626: LD_VAR 0 6
88630: ARRAY
88631: INC
88632: ST_TO_ADDR
88633: LD_INT 1
88635: PUSH
88636: FOR_DOWNTO
88637: IFFALSE 88798
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
88639: LD_EXP 141
88643: PUSH
88644: LD_VAR 0 6
88648: ARRAY
88649: PUSH
88650: LD_VAR 0 5
88654: ARRAY
88655: PUSH
88656: LD_INT 1
88658: ARRAY
88659: PUSH
88660: LD_VAR 0 2
88664: EQUAL
88665: PUSH
88666: LD_EXP 141
88670: PUSH
88671: LD_VAR 0 6
88675: ARRAY
88676: PUSH
88677: LD_VAR 0 5
88681: ARRAY
88682: PUSH
88683: LD_INT 2
88685: ARRAY
88686: PUSH
88687: LD_VAR 0 3
88691: EQUAL
88692: AND
88693: IFFALSE 88796
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
88695: LD_EXP 141
88699: PUSH
88700: LD_VAR 0 6
88704: ARRAY
88705: PUSH
88706: LD_VAR 0 5
88710: ARRAY
88711: PUSH
88712: LD_INT 1
88714: ARRAY
88715: PPUSH
88716: LD_EXP 141
88720: PUSH
88721: LD_VAR 0 6
88725: ARRAY
88726: PUSH
88727: LD_VAR 0 5
88731: ARRAY
88732: PUSH
88733: LD_INT 2
88735: ARRAY
88736: PPUSH
88737: LD_VAR 0 1
88741: PPUSH
88742: CALL_OW 255
88746: PPUSH
88747: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88751: LD_ADDR_EXP 141
88755: PUSH
88756: LD_EXP 141
88760: PPUSH
88761: LD_VAR 0 6
88765: PPUSH
88766: LD_EXP 141
88770: PUSH
88771: LD_VAR 0 6
88775: ARRAY
88776: PPUSH
88777: LD_VAR 0 5
88781: PPUSH
88782: CALL_OW 3
88786: PPUSH
88787: CALL_OW 1
88791: ST_TO_ADDR
// exit ;
88792: POP
88793: POP
88794: GO 88987
// end ; end ;
88796: GO 88636
88798: POP
88799: POP
// for i := minerMinesList [ index ] downto 1 do
88800: LD_ADDR_VAR 0 5
88804: PUSH
88805: DOUBLE
88806: LD_EXP 141
88810: PUSH
88811: LD_VAR 0 6
88815: ARRAY
88816: INC
88817: ST_TO_ADDR
88818: LD_INT 1
88820: PUSH
88821: FOR_DOWNTO
88822: IFFALSE 88985
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
88824: LD_EXP 141
88828: PUSH
88829: LD_VAR 0 6
88833: ARRAY
88834: PUSH
88835: LD_VAR 0 5
88839: ARRAY
88840: PUSH
88841: LD_INT 1
88843: ARRAY
88844: PPUSH
88845: LD_EXP 141
88849: PUSH
88850: LD_VAR 0 6
88854: ARRAY
88855: PUSH
88856: LD_VAR 0 5
88860: ARRAY
88861: PUSH
88862: LD_INT 2
88864: ARRAY
88865: PPUSH
88866: LD_VAR 0 2
88870: PPUSH
88871: LD_VAR 0 3
88875: PPUSH
88876: CALL_OW 298
88880: PUSH
88881: LD_INT 6
88883: LESS
88884: IFFALSE 88983
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
88886: LD_EXP 141
88890: PUSH
88891: LD_VAR 0 6
88895: ARRAY
88896: PUSH
88897: LD_VAR 0 5
88901: ARRAY
88902: PUSH
88903: LD_INT 1
88905: ARRAY
88906: PPUSH
88907: LD_EXP 141
88911: PUSH
88912: LD_VAR 0 6
88916: ARRAY
88917: PUSH
88918: LD_VAR 0 5
88922: ARRAY
88923: PUSH
88924: LD_INT 2
88926: ARRAY
88927: PPUSH
88928: LD_VAR 0 1
88932: PPUSH
88933: CALL_OW 255
88937: PPUSH
88938: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88942: LD_ADDR_EXP 141
88946: PUSH
88947: LD_EXP 141
88951: PPUSH
88952: LD_VAR 0 6
88956: PPUSH
88957: LD_EXP 141
88961: PUSH
88962: LD_VAR 0 6
88966: ARRAY
88967: PPUSH
88968: LD_VAR 0 5
88972: PPUSH
88973: CALL_OW 3
88977: PPUSH
88978: CALL_OW 1
88982: ST_TO_ADDR
// end ; end ;
88983: GO 88821
88985: POP
88986: POP
// end ;
88987: LD_VAR 0 4
88991: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
88992: LD_INT 0
88994: PPUSH
88995: PPUSH
88996: PPUSH
88997: PPUSH
88998: PPUSH
88999: PPUSH
89000: PPUSH
89001: PPUSH
89002: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
89003: LD_VAR 0 1
89007: PPUSH
89008: CALL_OW 264
89012: PUSH
89013: LD_INT 81
89015: EQUAL
89016: NOT
89017: PUSH
89018: LD_VAR 0 1
89022: PUSH
89023: LD_EXP 140
89027: IN
89028: NOT
89029: OR
89030: IFFALSE 89034
// exit ;
89032: GO 89356
// index := GetElementIndex ( minersList , unit ) ;
89034: LD_ADDR_VAR 0 6
89038: PUSH
89039: LD_EXP 140
89043: PPUSH
89044: LD_VAR 0 1
89048: PPUSH
89049: CALL 33036 0 2
89053: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
89054: LD_ADDR_VAR 0 8
89058: PUSH
89059: LD_EXP 142
89063: PUSH
89064: LD_EXP 141
89068: PUSH
89069: LD_VAR 0 6
89073: ARRAY
89074: MINUS
89075: ST_TO_ADDR
// if not minesFreeAmount then
89076: LD_VAR 0 8
89080: NOT
89081: IFFALSE 89085
// exit ;
89083: GO 89356
// tmp := [ ] ;
89085: LD_ADDR_VAR 0 7
89089: PUSH
89090: EMPTY
89091: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
89092: LD_ADDR_VAR 0 5
89096: PUSH
89097: DOUBLE
89098: LD_INT 1
89100: DEC
89101: ST_TO_ADDR
89102: LD_VAR 0 8
89106: PUSH
89107: FOR_TO
89108: IFFALSE 89303
// begin _d := rand ( 0 , 5 ) ;
89110: LD_ADDR_VAR 0 11
89114: PUSH
89115: LD_INT 0
89117: PPUSH
89118: LD_INT 5
89120: PPUSH
89121: CALL_OW 12
89125: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
89126: LD_ADDR_VAR 0 12
89130: PUSH
89131: LD_INT 2
89133: PPUSH
89134: LD_INT 6
89136: PPUSH
89137: CALL_OW 12
89141: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
89142: LD_ADDR_VAR 0 9
89146: PUSH
89147: LD_VAR 0 2
89151: PPUSH
89152: LD_VAR 0 11
89156: PPUSH
89157: LD_VAR 0 12
89161: PPUSH
89162: CALL_OW 272
89166: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
89167: LD_ADDR_VAR 0 10
89171: PUSH
89172: LD_VAR 0 3
89176: PPUSH
89177: LD_VAR 0 11
89181: PPUSH
89182: LD_VAR 0 12
89186: PPUSH
89187: CALL_OW 273
89191: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
89192: LD_VAR 0 9
89196: PPUSH
89197: LD_VAR 0 10
89201: PPUSH
89202: CALL_OW 488
89206: PUSH
89207: LD_VAR 0 9
89211: PUSH
89212: LD_VAR 0 10
89216: PUSH
89217: EMPTY
89218: LIST
89219: LIST
89220: PUSH
89221: LD_VAR 0 7
89225: IN
89226: NOT
89227: AND
89228: PUSH
89229: LD_VAR 0 9
89233: PPUSH
89234: LD_VAR 0 10
89238: PPUSH
89239: CALL_OW 458
89243: NOT
89244: AND
89245: IFFALSE 89287
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
89247: LD_ADDR_VAR 0 7
89251: PUSH
89252: LD_VAR 0 7
89256: PPUSH
89257: LD_VAR 0 7
89261: PUSH
89262: LD_INT 1
89264: PLUS
89265: PPUSH
89266: LD_VAR 0 9
89270: PUSH
89271: LD_VAR 0 10
89275: PUSH
89276: EMPTY
89277: LIST
89278: LIST
89279: PPUSH
89280: CALL_OW 1
89284: ST_TO_ADDR
89285: GO 89301
// i := i - 1 ;
89287: LD_ADDR_VAR 0 5
89291: PUSH
89292: LD_VAR 0 5
89296: PUSH
89297: LD_INT 1
89299: MINUS
89300: ST_TO_ADDR
// end ;
89301: GO 89107
89303: POP
89304: POP
// for i in tmp do
89305: LD_ADDR_VAR 0 5
89309: PUSH
89310: LD_VAR 0 7
89314: PUSH
89315: FOR_IN
89316: IFFALSE 89354
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
89318: LD_VAR 0 1
89322: PPUSH
89323: LD_VAR 0 5
89327: PUSH
89328: LD_INT 1
89330: ARRAY
89331: PPUSH
89332: LD_VAR 0 5
89336: PUSH
89337: LD_INT 2
89339: ARRAY
89340: PPUSH
89341: CALL 88300 0 3
89345: NOT
89346: IFFALSE 89352
// exit ;
89348: POP
89349: POP
89350: GO 89356
89352: GO 89315
89354: POP
89355: POP
// end ;
89356: LD_VAR 0 4
89360: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
89361: LD_INT 0
89363: PPUSH
89364: PPUSH
89365: PPUSH
89366: PPUSH
89367: PPUSH
89368: PPUSH
89369: PPUSH
// if not GetClass ( unit ) = class_sniper then
89370: LD_VAR 0 1
89374: PPUSH
89375: CALL_OW 257
89379: PUSH
89380: LD_INT 5
89382: EQUAL
89383: NOT
89384: IFFALSE 89388
// exit ;
89386: GO 89776
// dist := 8 ;
89388: LD_ADDR_VAR 0 5
89392: PUSH
89393: LD_INT 8
89395: ST_TO_ADDR
// viewRange := 12 ;
89396: LD_ADDR_VAR 0 7
89400: PUSH
89401: LD_INT 12
89403: ST_TO_ADDR
// side := GetSide ( unit ) ;
89404: LD_ADDR_VAR 0 6
89408: PUSH
89409: LD_VAR 0 1
89413: PPUSH
89414: CALL_OW 255
89418: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
89419: LD_INT 61
89421: PPUSH
89422: LD_VAR 0 6
89426: PPUSH
89427: CALL_OW 321
89431: PUSH
89432: LD_INT 2
89434: EQUAL
89435: IFFALSE 89445
// viewRange := 16 ;
89437: LD_ADDR_VAR 0 7
89441: PUSH
89442: LD_INT 16
89444: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
89445: LD_VAR 0 1
89449: PPUSH
89450: LD_VAR 0 2
89454: PPUSH
89455: LD_VAR 0 3
89459: PPUSH
89460: CALL_OW 297
89464: PUSH
89465: LD_VAR 0 5
89469: GREATER
89470: IFFALSE 89549
// begin ComMoveXY ( unit , x , y ) ;
89472: LD_VAR 0 1
89476: PPUSH
89477: LD_VAR 0 2
89481: PPUSH
89482: LD_VAR 0 3
89486: PPUSH
89487: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
89491: LD_INT 35
89493: PPUSH
89494: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
89498: LD_VAR 0 1
89502: PPUSH
89503: LD_VAR 0 2
89507: PPUSH
89508: LD_VAR 0 3
89512: PPUSH
89513: CALL 64391 0 3
89517: NOT
89518: IFFALSE 89522
// exit ;
89520: GO 89776
// until GetDistUnitXY ( unit , x , y ) < dist ;
89522: LD_VAR 0 1
89526: PPUSH
89527: LD_VAR 0 2
89531: PPUSH
89532: LD_VAR 0 3
89536: PPUSH
89537: CALL_OW 297
89541: PUSH
89542: LD_VAR 0 5
89546: LESS
89547: IFFALSE 89491
// end ; ComTurnXY ( unit , x , y ) ;
89549: LD_VAR 0 1
89553: PPUSH
89554: LD_VAR 0 2
89558: PPUSH
89559: LD_VAR 0 3
89563: PPUSH
89564: CALL_OW 118
// wait ( 5 ) ;
89568: LD_INT 5
89570: PPUSH
89571: CALL_OW 67
// _d := GetDir ( unit ) ;
89575: LD_ADDR_VAR 0 10
89579: PUSH
89580: LD_VAR 0 1
89584: PPUSH
89585: CALL_OW 254
89589: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
89590: LD_ADDR_VAR 0 8
89594: PUSH
89595: LD_VAR 0 1
89599: PPUSH
89600: CALL_OW 250
89604: PPUSH
89605: LD_VAR 0 10
89609: PPUSH
89610: LD_VAR 0 5
89614: PPUSH
89615: CALL_OW 272
89619: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
89620: LD_ADDR_VAR 0 9
89624: PUSH
89625: LD_VAR 0 1
89629: PPUSH
89630: CALL_OW 251
89634: PPUSH
89635: LD_VAR 0 10
89639: PPUSH
89640: LD_VAR 0 5
89644: PPUSH
89645: CALL_OW 273
89649: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
89650: LD_VAR 0 8
89654: PPUSH
89655: LD_VAR 0 9
89659: PPUSH
89660: CALL_OW 488
89664: NOT
89665: IFFALSE 89669
// exit ;
89667: GO 89776
// ComAnimCustom ( unit , 1 ) ;
89669: LD_VAR 0 1
89673: PPUSH
89674: LD_INT 1
89676: PPUSH
89677: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
89681: LD_VAR 0 8
89685: PPUSH
89686: LD_VAR 0 9
89690: PPUSH
89691: LD_VAR 0 6
89695: PPUSH
89696: LD_VAR 0 7
89700: PPUSH
89701: CALL_OW 330
// repeat wait ( 1 ) ;
89705: LD_INT 1
89707: PPUSH
89708: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
89712: LD_VAR 0 1
89716: PPUSH
89717: CALL_OW 316
89721: PUSH
89722: LD_VAR 0 1
89726: PPUSH
89727: CALL_OW 314
89731: OR
89732: PUSH
89733: LD_VAR 0 1
89737: PPUSH
89738: CALL_OW 302
89742: NOT
89743: OR
89744: PUSH
89745: LD_VAR 0 1
89749: PPUSH
89750: CALL_OW 301
89754: OR
89755: IFFALSE 89705
// RemoveSeeing ( _x , _y , side ) ;
89757: LD_VAR 0 8
89761: PPUSH
89762: LD_VAR 0 9
89766: PPUSH
89767: LD_VAR 0 6
89771: PPUSH
89772: CALL_OW 331
// end ; end_of_file
89776: LD_VAR 0 4
89780: RET
// export function StopOriginalMusic ; begin
89781: LD_INT 0
89783: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
89784: LD_STRING OW_FORCEMUSICDISABLE(true);
89786: PPUSH
89787: CALL_OW 559
// end ;
89791: LD_VAR 0 1
89795: RET
// export function PlayOriginalMusic ; begin
89796: LD_INT 0
89798: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
89799: LD_STRING OW_FORCEMUSICDISABLE(false);
89801: PPUSH
89802: CALL_OW 559
// end ;
89806: LD_VAR 0 1
89810: RET
// export function PlayCustomMusic ( track , callback ) ; begin
89811: LD_INT 0
89813: PPUSH
// StopOriginalMusic ;
89814: CALL 89781 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
89818: LD_STRING playMusic("
89820: PUSH
89821: LD_VAR 0 1
89825: STR
89826: PUSH
89827: LD_STRING ", "
89829: STR
89830: PUSH
89831: LD_VAR 0 2
89835: STR
89836: PUSH
89837: LD_STRING ")
89839: STR
89840: PPUSH
89841: CALL_OW 559
// end ;
89845: LD_VAR 0 3
89849: RET
