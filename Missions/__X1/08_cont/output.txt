// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 20365 0 0
// PrepareRussian ;
  12: CALL 2018 0 0
// PrepareArabian ;
  16: CALL 438 0 0
// Action ;
  20: CALL 3761 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// enable ( entranceEvent ) ;
 427: LD_INT 1
 429: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 430: LD_INT 2
 432: DISABLE_MARKED
// end ; end_of_file
 433: LD_VAR 0 1
 437: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 438: LD_INT 0
 440: PPUSH
 441: PPUSH
// uc_side := 4 ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_INT 4
 449: ST_TO_ADDR
// uc_nation := 1 ;
 450: LD_ADDR_OWVAR 21
 454: PUSH
 455: LD_INT 1
 457: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 458: LD_ADDR_EXP 57
 462: PUSH
 463: LD_STRING 07_Americans
 465: PPUSH
 466: CALL_OW 31
 470: ST_TO_ADDR
// if americanSquad < 5 then
 471: LD_EXP 57
 475: PUSH
 476: LD_INT 5
 478: LESS
 479: IFFALSE 573
// begin if not americanSquad then
 481: LD_EXP 57
 485: NOT
 486: IFFALSE 495
// americanSquad := [ ] ;
 488: LD_ADDR_EXP 57
 492: PUSH
 493: EMPTY
 494: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 495: LD_ADDR_VAR 0 2
 499: PUSH
 500: DOUBLE
 501: LD_EXP 57
 505: DEC
 506: ST_TO_ADDR
 507: LD_INT 2
 509: PUSH
 510: LD_INT 3
 512: PUSH
 513: LD_INT 4
 515: PUSH
 516: LD_INT 4
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PUSH
 531: FOR_TO
 532: IFFALSE 569
// begin PrepareHuman ( false , 2 , 6 ) ;
 534: LD_INT 0
 536: PPUSH
 537: LD_INT 2
 539: PPUSH
 540: LD_INT 6
 542: PPUSH
 543: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 547: LD_ADDR_EXP 57
 551: PUSH
 552: LD_EXP 57
 556: PPUSH
 557: CALL_OW 44
 561: PPUSH
 562: CALL 66653 0 2
 566: ST_TO_ADDR
// end ;
 567: GO 531
 569: POP
 570: POP
// end else
 571: GO 620
// for i := Count ( americanSquad ) downto 5 do
 573: LD_ADDR_VAR 0 2
 577: PUSH
 578: DOUBLE
 579: LD_EXP 57
 583: PPUSH
 584: CALL 31053 0 1
 588: INC
 589: ST_TO_ADDR
 590: LD_INT 5
 592: PUSH
 593: FOR_DOWNTO
 594: IFFALSE 618
// americanSquad := Delete ( americanSquad , i ) ;
 596: LD_ADDR_EXP 57
 600: PUSH
 601: LD_EXP 57
 605: PPUSH
 606: LD_VAR 0 2
 610: PPUSH
 611: CALL_OW 3
 615: ST_TO_ADDR
 616: GO 593
 618: POP
 619: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 620: LD_ADDR_EXP 59
 624: PUSH
 625: LD_STRING UsCommander
 627: PPUSH
 628: LD_EXP 1
 632: NOT
 633: PPUSH
 634: LD_STRING 07_
 636: PPUSH
 637: CALL 28951 0 3
 641: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 642: LD_INT 1
 644: PPUSH
 645: LD_INT 6
 647: PPUSH
 648: CALL_OW 381
// Jerry := CreateHuman ;
 652: LD_ADDR_EXP 60
 656: PUSH
 657: CALL_OW 44
 661: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 662: LD_EXP 60
 666: PPUSH
 667: LD_INT 33
 669: PPUSH
 670: CALL_OW 336
// if not Doug then
 674: LD_EXP 59
 678: NOT
 679: IFFALSE 701
// begin PrepareSoldier ( sex_male , 6 ) ;
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 6
 686: PPUSH
 687: CALL_OW 381
// Doug := CreateHuman ;
 691: LD_ADDR_EXP 59
 695: PUSH
 696: CALL_OW 44
 700: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 701: LD_EXP 59
 705: PPUSH
 706: LD_INT 33
 708: PPUSH
 709: CALL_OW 336
// if johnnySaved or debug then
 713: LD_EXP 3
 717: PUSH
 718: LD_EXP 1
 722: OR
 723: IFFALSE 750
// begin Harris := NewCharacter ( Harris ) ;
 725: LD_ADDR_EXP 58
 729: PUSH
 730: LD_STRING Harris
 732: PPUSH
 733: CALL_OW 25
 737: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 738: LD_EXP 58
 742: PPUSH
 743: LD_INT 33
 745: PPUSH
 746: CALL_OW 336
// end ; uc_side := 2 ;
 750: LD_ADDR_OWVAR 20
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// uc_nation := 2 ;
 758: LD_ADDR_OWVAR 21
 762: PUSH
 763: LD_INT 2
 765: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 766: LD_ADDR_EXP 45
 770: PUSH
 771: LD_STRING Heike
 773: PPUSH
 774: LD_EXP 1
 778: NOT
 779: PPUSH
 780: LD_EXP 2
 784: PPUSH
 785: CALL 28951 0 3
 789: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 790: LD_ADDR_EXP 48
 794: PUSH
 795: LD_STRING Ibrahim
 797: PPUSH
 798: LD_EXP 1
 802: NOT
 803: PPUSH
 804: LD_EXP 2
 808: PPUSH
 809: CALL 28951 0 3
 813: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 814: LD_ADDR_EXP 46
 818: PUSH
 819: LD_STRING Givi
 821: PPUSH
 822: LD_EXP 1
 826: NOT
 827: PPUSH
 828: LD_EXP 2
 832: PPUSH
 833: CALL 28951 0 3
 837: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING Kamil
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 2
 856: PPUSH
 857: CALL 28951 0 3
 861: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 862: LD_ADDR_EXP 50
 866: PUSH
 867: LD_STRING Kaia
 869: PPUSH
 870: LD_EXP 1
 874: NOT
 875: PPUSH
 876: LD_EXP 2
 880: PPUSH
 881: CALL 28951 0 3
 885: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 886: LD_ADDR_EXP 51
 890: PUSH
 891: LD_STRING Sophia
 893: PPUSH
 894: LD_EXP 1
 898: NOT
 899: PPUSH
 900: LD_EXP 2
 904: PPUSH
 905: CALL 28951 0 3
 909: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 910: LD_ADDR_EXP 52
 914: PUSH
 915: LD_STRING Markov
 917: PPUSH
 918: LD_EXP 1
 922: NOT
 923: PPUSH
 924: LD_EXP 2
 928: PPUSH
 929: CALL 28951 0 3
 933: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 934: LD_ADDR_EXP 55
 938: PUSH
 939: LD_STRING Aviradze
 941: PPUSH
 942: LD_EXP 1
 946: NOT
 947: PPUSH
 948: LD_EXP 2
 952: PPUSH
 953: CALL 28951 0 3
 957: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 958: LD_ADDR_EXP 54
 962: PUSH
 963: LD_STRING Kurt
 965: PPUSH
 966: LD_EXP 1
 970: NOT
 971: PPUSH
 972: LD_EXP 2
 976: PPUSH
 977: CALL 28951 0 3
 981: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 982: LD_ADDR_EXP 47
 986: PUSH
 987: LD_STRING Mike
 989: PPUSH
 990: LD_EXP 1
 994: NOT
 995: PPUSH
 996: LD_EXP 2
1000: PPUSH
1001: CALL 28951 0 3
1005: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1006: LD_ADDR_EXP 53
1010: PUSH
1011: LD_STRING Olaf
1013: PPUSH
1014: LD_EXP 1
1018: NOT
1019: PPUSH
1020: LD_EXP 2
1024: PPUSH
1025: CALL 28951 0 3
1029: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1030: LD_ADDR_EXP 56
1034: PUSH
1035: LD_STRING 07_others
1037: PPUSH
1038: CALL_OW 31
1042: ST_TO_ADDR
// end ;
1043: LD_VAR 0 1
1047: RET
// export function PrepareGame ; var i ; begin
1048: LD_INT 0
1050: PPUSH
1051: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1052: LD_EXP 45
1056: PPUSH
1057: LD_INT 23
1059: PPUSH
1060: CALL_OW 52
// if Givi then
1064: LD_EXP 46
1068: IFFALSE 1106
// begin SetSide ( Givi , 5 ) ;
1070: LD_EXP 46
1074: PPUSH
1075: LD_INT 5
1077: PPUSH
1078: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1082: LD_EXP 46
1086: PPUSH
1087: LD_INT 9
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
// ComHold ( Givi ) ;
1097: LD_EXP 46
1101: PPUSH
1102: CALL_OW 140
// end ; if Markov then
1106: LD_EXP 52
1110: IFFALSE 1148
// begin SetSide ( Markov , 5 ) ;
1112: LD_EXP 52
1116: PPUSH
1117: LD_INT 5
1119: PPUSH
1120: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1124: LD_EXP 52
1128: PPUSH
1129: LD_INT 3
1131: PPUSH
1132: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1136: LD_EXP 52
1140: PPUSH
1141: LD_INT 61
1143: PPUSH
1144: CALL_OW 52
// end ; if Mike then
1148: LD_EXP 47
1152: IFFALSE 1190
// begin SetSide ( Mike , 5 ) ;
1154: LD_EXP 47
1158: PPUSH
1159: LD_INT 5
1161: PPUSH
1162: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1166: LD_EXP 47
1170: PPUSH
1171: LD_INT 17
1173: PPUSH
1174: LD_INT 0
1176: PPUSH
1177: CALL_OW 49
// ComHold ( Mike ) ;
1181: LD_EXP 47
1185: PPUSH
1186: CALL_OW 140
// end ; if Olaf then
1190: LD_EXP 53
1194: IFFALSE 1235
// begin SetSide ( Olaf , 5 ) ;
1196: LD_EXP 53
1200: PPUSH
1201: LD_INT 5
1203: PPUSH
1204: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1208: LD_EXP 53
1212: PPUSH
1213: LD_INT 16
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1223: LD_EXP 53
1227: PPUSH
1228: LD_INT 3
1230: PPUSH
1231: CALL 69805 0 2
// end ; if Kamil then
1235: LD_EXP 49
1239: IFFALSE 1265
// begin SetSide ( Kamil , 5 ) ;
1241: LD_EXP 49
1245: PPUSH
1246: LD_INT 5
1248: PPUSH
1249: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1253: LD_EXP 49
1257: PPUSH
1258: LD_INT 109
1260: PPUSH
1261: CALL_OW 52
// end ; if Kurt then
1265: LD_EXP 54
1269: IFFALSE 1295
// begin SetSide ( Kurt , 5 ) ;
1271: LD_EXP 54
1275: PPUSH
1276: LD_INT 5
1278: PPUSH
1279: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1283: LD_EXP 54
1287: PPUSH
1288: LD_INT 169
1290: PPUSH
1291: CALL_OW 52
// end ; if Kaia then
1295: LD_EXP 50
1299: IFFALSE 1325
// begin SetSide ( Kaia , 5 ) ;
1301: LD_EXP 50
1305: PPUSH
1306: LD_INT 5
1308: PPUSH
1309: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1313: LD_EXP 50
1317: PPUSH
1318: LD_INT 147
1320: PPUSH
1321: CALL_OW 52
// end ; if Sophia then
1325: LD_EXP 51
1329: IFFALSE 1370
// begin SetSide ( Sophia , 5 ) ;
1331: LD_EXP 51
1335: PPUSH
1336: LD_INT 5
1338: PPUSH
1339: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1343: LD_EXP 51
1347: PPUSH
1348: LD_INT 142
1350: PPUSH
1351: LD_INT 96
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 48
// ComHold ( Sophia ) ;
1361: LD_EXP 51
1365: PPUSH
1366: CALL_OW 140
// end ; if Harris then
1370: LD_EXP 58
1374: IFFALSE 1412
// begin SetSide ( Harris , 4 ) ;
1376: LD_EXP 58
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1388: LD_EXP 58
1392: PPUSH
1393: LD_INT 20
1395: PPUSH
1396: LD_INT 0
1398: PPUSH
1399: CALL_OW 49
// ComHold ( i ) ;
1403: LD_VAR 0 2
1407: PPUSH
1408: CALL_OW 140
// end ; if Doug then
1412: LD_EXP 59
1416: IFFALSE 1442
// begin SetSide ( Doug , 4 ) ;
1418: LD_EXP 59
1422: PPUSH
1423: LD_INT 4
1425: PPUSH
1426: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1430: LD_EXP 59
1434: PPUSH
1435: LD_INT 106
1437: PPUSH
1438: CALL_OW 52
// end ; if Aviradze then
1442: LD_EXP 55
1446: IFFALSE 1472
// begin SetSide ( Aviradze , 5 ) ;
1448: LD_EXP 55
1452: PPUSH
1453: LD_INT 5
1455: PPUSH
1456: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1460: LD_EXP 55
1464: PPUSH
1465: LD_INT 119
1467: PPUSH
1468: CALL_OW 52
// end ; if Ibrahim then
1472: LD_EXP 48
1476: IFFALSE 1502
// begin SetSide ( Ibrahim , 5 ) ;
1478: LD_EXP 48
1482: PPUSH
1483: LD_INT 5
1485: PPUSH
1486: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1490: LD_EXP 48
1494: PPUSH
1495: LD_INT 119
1497: PPUSH
1498: CALL_OW 52
// end ; if Jerry then
1502: LD_EXP 60
1506: IFFALSE 1547
// begin SetSide ( Jerry , 4 ) ;
1508: LD_EXP 60
1512: PPUSH
1513: LD_INT 4
1515: PPUSH
1516: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1520: LD_EXP 60
1524: PPUSH
1525: LD_INT 119
1527: PPUSH
1528: LD_INT 59
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 48
// ComHold ( Jerry ) ;
1538: LD_EXP 60
1542: PPUSH
1543: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1547: LD_EXP 64
1551: PPUSH
1552: LD_INT 119
1554: PPUSH
1555: CALL_OW 52
// for i in americanSquad do
1559: LD_ADDR_VAR 0 2
1563: PUSH
1564: LD_EXP 57
1568: PUSH
1569: FOR_IN
1570: IFFALSE 1598
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 21
1579: PPUSH
1580: LD_INT 0
1582: PPUSH
1583: CALL_OW 49
// ComHold ( i ) ;
1587: LD_VAR 0 2
1591: PPUSH
1592: CALL_OW 140
// end ;
1596: GO 1569
1598: POP
1599: POP
// for i in heikeSecondSquad do
1600: LD_ADDR_VAR 0 2
1604: PUSH
1605: LD_EXP 56
1609: PUSH
1610: FOR_IN
1611: IFFALSE 1651
// begin SetSide ( i , 5 ) ;
1613: LD_VAR 0 2
1617: PPUSH
1618: LD_INT 5
1620: PPUSH
1621: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1625: LD_VAR 0 2
1629: PPUSH
1630: LD_INT 22
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// ComHold ( i ) ;
1640: LD_VAR 0 2
1644: PPUSH
1645: CALL_OW 140
// end ;
1649: GO 1610
1651: POP
1652: POP
// if not hasVodka then
1653: LD_EXP 4
1657: NOT
1658: IFFALSE 1717
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1660: LD_ADDR_VAR 0 2
1664: PUSH
1665: LD_INT 2
1667: PUSH
1668: LD_INT 22
1670: PUSH
1671: LD_INT 2
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 22
1680: PUSH
1681: LD_INT 5
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PPUSH
1693: CALL_OW 69
1697: PUSH
1698: FOR_IN
1699: IFFALSE 1715
// SetLives ( i , 500 ) ;
1701: LD_VAR 0 2
1705: PPUSH
1706: LD_INT 500
1708: PPUSH
1709: CALL_OW 234
1713: GO 1698
1715: POP
1716: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: LD_INT 22
1724: PUSH
1725: LD_INT 4
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: FOR_IN
1738: IFFALSE 1754
// SetLives ( i , 500 ) ;
1740: LD_VAR 0 2
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: CALL_OW 234
1752: GO 1737
1754: POP
1755: POP
// end ;
1756: LD_VAR 0 1
1760: RET
// export function SetClassKaiaRevolver ; begin
1761: LD_INT 0
1763: PPUSH
// if not IsOk ( Kaia ) then
1764: LD_EXP 50
1768: PPUSH
1769: CALL_OW 302
1773: NOT
1774: IFFALSE 1778
// exit ;
1776: GO 1797
// SetClass ( Kaia , class_revolver ) ;
1778: LD_EXP 50
1782: PPUSH
1783: LD_INT 34
1785: PPUSH
1786: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1790: LD_STRING ACH_REVOLVER
1792: PPUSH
1793: CALL_OW 543
// end ;
1797: LD_VAR 0 1
1801: RET
// export function SpawnHeikeAsRussian ; begin
1802: LD_INT 0
1804: PPUSH
// RemoveUnit ( Heike ) ;
1805: LD_EXP 45
1809: PPUSH
1810: CALL_OW 64
// heikeTmp := Heike ;
1814: LD_ADDR_EXP 61
1818: PUSH
1819: LD_EXP 45
1823: ST_TO_ADDR
// uc_side := 2 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 2
1831: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1832: LD_ADDR_EXP 45
1836: PUSH
1837: LD_STRING HeikeRu
1839: PPUSH
1840: CALL_OW 25
1844: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1845: LD_EXP 61
1849: PPUSH
1850: LD_EXP 45
1854: PPUSH
1855: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1859: LD_EXP 45
1863: PPUSH
1864: LD_INT 165
1866: PPUSH
1867: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1871: LD_EXP 45
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 336
// heikeAsRussian := true ;
1883: LD_ADDR_EXP 27
1887: PUSH
1888: LD_INT 1
1890: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1891: LD_STRING M1-laundry-out
1893: PPUSH
1894: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1898: LD_STRING ACH_HEIKERU
1900: PPUSH
1901: CALL_OW 543
// end ;
1905: LD_VAR 0 1
1909: RET
// export function SpawnGiviAsRussian ; begin
1910: LD_INT 0
1912: PPUSH
// RemoveUnit ( Givi ) ;
1913: LD_EXP 46
1917: PPUSH
1918: CALL_OW 64
// giviTmp := Givi ;
1922: LD_ADDR_EXP 62
1926: PUSH
1927: LD_EXP 46
1931: ST_TO_ADDR
// uc_side := 2 ;
1932: LD_ADDR_OWVAR 20
1936: PUSH
1937: LD_INT 2
1939: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1940: LD_ADDR_EXP 46
1944: PUSH
1945: LD_STRING GiviRu
1947: PPUSH
1948: CALL_OW 25
1952: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1953: LD_EXP 62
1957: PPUSH
1958: LD_EXP 46
1962: PPUSH
1963: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1967: LD_EXP 46
1971: PPUSH
1972: LD_INT 165
1974: PPUSH
1975: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1979: LD_EXP 46
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: CALL_OW 336
// giviAsRussian := true ;
1991: LD_ADDR_EXP 28
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1999: LD_STRING M1-laundry-out
2001: PPUSH
2002: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2006: LD_STRING ACH_GIVIRU
2008: PPUSH
2009: CALL_OW 543
// end ; end_of_file
2013: LD_VAR 0 1
2017: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2018: LD_INT 0
2020: PPUSH
2021: PPUSH
2022: PPUSH
2023: PPUSH
2024: PPUSH
// uc_side := 3 ;
2025: LD_ADDR_OWVAR 20
2029: PUSH
2030: LD_INT 3
2032: ST_TO_ADDR
// uc_nation := 3 ;
2033: LD_ADDR_OWVAR 21
2037: PUSH
2038: LD_INT 3
2040: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
2041: LD_INT 192
2043: PPUSH
2044: LD_STRING kitchen
2046: PPUSH
2047: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2051: LD_INT 165
2053: PPUSH
2054: LD_STRING laundry
2056: PPUSH
2057: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2061: LD_INT 54
2063: PPUSH
2064: LD_STRING adminSection
2066: PPUSH
2067: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 3
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 69
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2108
// SetBLevel ( i , 7 ) ;
2094: LD_VAR 0 2
2098: PPUSH
2099: LD_INT 7
2101: PPUSH
2102: CALL_OW 241
2106: GO 2091
2108: POP
2109: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2110: LD_ADDR_VAR 0 2
2114: PUSH
2115: LD_INT 22
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 2
2127: PUSH
2128: LD_INT 30
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 30
2140: PUSH
2141: LD_INT 1
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PPUSH
2157: CALL_OW 69
2161: PUSH
2162: FOR_IN
2163: IFFALSE 2227
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2165: LD_VAR 0 2
2169: PPUSH
2170: CALL_OW 274
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 1000
2180: PPUSH
2181: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2185: LD_VAR 0 2
2189: PPUSH
2190: CALL_OW 274
2194: PPUSH
2195: LD_INT 2
2197: PPUSH
2198: LD_INT 1000
2200: PPUSH
2201: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2205: LD_VAR 0 2
2209: PPUSH
2210: CALL_OW 274
2214: PPUSH
2215: LD_INT 3
2217: PPUSH
2218: LD_INT 100
2220: PPUSH
2221: CALL_OW 277
// end ;
2225: GO 2162
2227: POP
2228: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2229: LD_ADDR_VAR 0 2
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 3
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 30
2246: PUSH
2247: LD_INT 32
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PPUSH
2258: CALL_OW 69
2262: PUSH
2263: FOR_IN
2264: IFFALSE 2298
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2266: LD_INT 0
2268: PPUSH
2269: LD_INT 5
2271: PUSH
2272: LD_OWVAR 67
2276: PLUS
2277: PPUSH
2278: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2282: CALL_OW 44
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: CALL_OW 52
// end ;
2296: GO 2263
2298: POP
2299: POP
// for i := 1 to 2 do
2300: LD_ADDR_VAR 0 2
2304: PUSH
2305: DOUBLE
2306: LD_INT 1
2308: DEC
2309: ST_TO_ADDR
2310: LD_INT 2
2312: PUSH
2313: FOR_TO
2314: IFFALSE 2366
// begin PrepareMechanic ( false , 8 ) ;
2316: LD_INT 0
2318: PPUSH
2319: LD_INT 8
2321: PPUSH
2322: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2326: LD_ADDR_EXP 66
2330: PUSH
2331: LD_EXP 66
2335: PPUSH
2336: CALL_OW 44
2340: PPUSH
2341: CALL 66653 0 2
2345: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2346: LD_EXP 66
2350: PUSH
2351: LD_EXP 66
2355: ARRAY
2356: PPUSH
2357: LD_INT 61
2359: PPUSH
2360: CALL_OW 52
// end ;
2364: GO 2313
2366: POP
2367: POP
// PrepareMechanic ( sex_male , 8 ) ;
2368: LD_INT 1
2370: PPUSH
2371: LD_INT 8
2373: PPUSH
2374: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2378: LD_ADDR_EXP 67
2382: PUSH
2383: LD_EXP 67
2387: PPUSH
2388: CALL_OW 44
2392: PPUSH
2393: CALL 66653 0 2
2397: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2398: LD_EXP 67
2402: PUSH
2403: LD_EXP 67
2407: ARRAY
2408: PPUSH
2409: LD_INT 196
2411: PPUSH
2412: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2416: LD_INT 1
2418: PPUSH
2419: LD_INT 8
2421: PPUSH
2422: CALL_OW 383
// hc_name := Stiepan Simonov ;
2426: LD_ADDR_OWVAR 26
2430: PUSH
2431: LD_STRING Stiepan Simonov
2433: ST_TO_ADDR
// Stiopa := CreateHuman ;
2434: LD_ADDR_EXP 68
2438: PUSH
2439: CALL_OW 44
2443: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2444: LD_INT 2
2446: PPUSH
2447: LD_INT 8
2449: PPUSH
2450: CALL_OW 383
// hc_name := Laura Dragunov ;
2454: LD_ADDR_OWVAR 26
2458: PUSH
2459: LD_STRING Laura Dragunov
2461: ST_TO_ADDR
// Laura := CreateHuman ;
2462: LD_ADDR_EXP 69
2466: PUSH
2467: CALL_OW 44
2471: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2472: LD_EXP 69
2476: PPUSH
2477: LD_INT 196
2479: PPUSH
2480: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 8
2489: PPUSH
2490: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2494: LD_ADDR_EXP 66
2498: PUSH
2499: LD_EXP 66
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 44
2511: PPUSH
2512: CALL_OW 2
2516: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2517: LD_EXP 66
2521: PUSH
2522: LD_INT 1
2524: ARRAY
2525: PPUSH
2526: LD_INT 61
2528: PPUSH
2529: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 8
2538: PPUSH
2539: CALL_OW 381
// hc_name := Pavel Muchin ;
2543: LD_ADDR_OWVAR 26
2547: PUSH
2548: LD_STRING Pavel Muchin
2550: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2551: LD_ADDR_OWVAR 29
2555: PUSH
2556: LD_INT 13
2558: PUSH
2559: LD_INT 13
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2566: LD_ADDR_EXP 65
2570: PUSH
2571: CALL_OW 44
2575: ST_TO_ADDR
// InitHC_All ( ) ;
2576: CALL_OW 584
// if Difficulty > 1 then
2580: LD_OWVAR 67
2584: PUSH
2585: LD_INT 1
2587: GREATER
2588: IFFALSE 2708
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: DOUBLE
2596: LD_INT 1
2598: DEC
2599: ST_TO_ADDR
2600: LD_INT 3
2602: PUSH
2603: LD_INT 4
2605: PUSH
2606: LD_INT 5
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: PUSH
2614: LD_OWVAR 67
2618: PUSH
2619: LD_INT 1
2621: PLUS
2622: ARRAY
2623: PUSH
2624: FOR_TO
2625: IFFALSE 2706
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2627: LD_INT 0
2629: PPUSH
2630: LD_INT 5
2632: PUSH
2633: LD_INT 6
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: PUSH
2644: LD_OWVAR 67
2648: PUSH
2649: LD_INT 1
2651: PLUS
2652: ARRAY
2653: PPUSH
2654: CALL_OW 381
// un := CreateHuman ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2668: LD_VAR 0 4
2672: PPUSH
2673: LD_INT 62
2675: PUSH
2676: LD_INT 63
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 2
2690: MOD
2691: PUSH
2692: LD_INT 1
2694: PLUS
2695: ARRAY
2696: PPUSH
2697: LD_INT 0
2699: PPUSH
2700: CALL_OW 49
// end ;
2704: GO 2624
2706: POP
2707: POP
// end ; uc_side := 6 ;
2708: LD_ADDR_OWVAR 20
2712: PUSH
2713: LD_INT 6
2715: ST_TO_ADDR
// uc_nation := 3 ;
2716: LD_ADDR_OWVAR 21
2720: PUSH
2721: LD_INT 3
2723: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2724: LD_ADDR_VAR 0 5
2728: PUSH
2729: LD_INT 14
2731: PUSH
2732: LD_INT 15
2734: PUSH
2735: LD_INT 48
2737: PUSH
2738: LD_INT 24
2740: PUSH
2741: LD_INT 149
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// for i in tmp do
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: PUSH
2761: FOR_IN
2762: IFFALSE 2810
// begin for j := 1 to 2 do
2764: LD_ADDR_VAR 0 3
2768: PUSH
2769: DOUBLE
2770: LD_INT 1
2772: DEC
2773: ST_TO_ADDR
2774: LD_INT 2
2776: PUSH
2777: FOR_TO
2778: IFFALSE 2806
// begin PrepareSoldier ( false , 7 ) ;
2780: LD_INT 0
2782: PPUSH
2783: LD_INT 7
2785: PPUSH
2786: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2790: CALL_OW 44
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// end ;
2804: GO 2777
2806: POP
2807: POP
// end ;
2808: GO 2761
2810: POP
2811: POP
// end ;
2812: LD_VAR 0 1
2816: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2817: LD_INT 0
2819: PPUSH
2820: PPUSH
2821: PPUSH
2822: PPUSH
// uc_side := 3 ;
2823: LD_ADDR_OWVAR 20
2827: PUSH
2828: LD_INT 3
2830: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2831: LD_ADDR_OWVAR 21
2835: PUSH
2836: LD_INT 1
2838: PPUSH
2839: LD_INT 3
2841: PPUSH
2842: CALL_OW 12
2846: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2847: LD_ADDR_VAR 0 4
2851: PUSH
2852: LD_INT 5
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 517
2862: ST_TO_ADDR
// for i := 1 to 3 do
2863: LD_ADDR_VAR 0 2
2867: PUSH
2868: DOUBLE
2869: LD_INT 1
2871: DEC
2872: ST_TO_ADDR
2873: LD_INT 3
2875: PUSH
2876: FOR_TO
2877: IFFALSE 2946
// begin PrepareHuman ( false , 33 , 0 ) ;
2879: LD_INT 0
2881: PPUSH
2882: LD_INT 33
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 380
// un := CreateHuman ;
2892: LD_ADDR_VAR 0 3
2896: PUSH
2897: CALL_OW 44
2901: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2902: LD_VAR 0 3
2906: PPUSH
2907: LD_VAR 0 4
2911: PUSH
2912: LD_INT 1
2914: ARRAY
2915: PUSH
2916: LD_VAR 0 2
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 4
2926: PUSH
2927: LD_INT 2
2929: ARRAY
2930: PUSH
2931: LD_VAR 0 2
2935: ARRAY
2936: PPUSH
2937: LD_INT 1
2939: PPUSH
2940: CALL_OW 601
// end ;
2944: GO 2876
2946: POP
2947: POP
// end ;
2948: LD_VAR 0 1
2952: RET
// export function PrepareFirstScene ; var i , un ; begin
2953: LD_INT 0
2955: PPUSH
2956: PPUSH
2957: PPUSH
// uc_side := 4 ;
2958: LD_ADDR_OWVAR 20
2962: PUSH
2963: LD_INT 4
2965: ST_TO_ADDR
// uc_nation := 1 ;
2966: LD_ADDR_OWVAR 21
2970: PUSH
2971: LD_INT 1
2973: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2974: LD_INT 0
2976: PPUSH
2977: LD_INT 33
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: CALL_OW 380
// for i := 1 to 2 do
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: DOUBLE
2993: LD_INT 1
2995: DEC
2996: ST_TO_ADDR
2997: LD_INT 2
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3066
// begin un := CreateHuman ;
3003: LD_ADDR_VAR 0 3
3007: PUSH
3008: CALL_OW 44
3012: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3013: LD_VAR 0 3
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3025: LD_VAR 0 3
3029: PPUSH
3030: LD_INT 6
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3040: LD_VAR 0 3
3044: PPUSH
3045: LD_INT 1
3047: PPUSH
3048: CALL 69805 0 2
// SetLives ( un , 300 ) ;
3052: LD_VAR 0 3
3056: PPUSH
3057: LD_INT 300
3059: PPUSH
3060: CALL_OW 234
// end ;
3064: GO 3000
3066: POP
3067: POP
// uc_side := 3 ;
3068: LD_ADDR_OWVAR 20
3072: PUSH
3073: LD_INT 3
3075: ST_TO_ADDR
// uc_nation := 3 ;
3076: LD_ADDR_OWVAR 21
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3084: LD_INT 1
3086: PPUSH
3087: LD_INT 5
3089: PPUSH
3090: CALL_OW 381
// for i := 1 to 3 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 3
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3181
// begin un := CreateHuman ;
3110: LD_ADDR_VAR 0 3
3114: PUSH
3115: CALL_OW 44
3119: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3120: LD_ADDR_EXP 63
3124: PUSH
3125: LD_EXP 63
3129: PPUSH
3130: LD_VAR 0 3
3134: PPUSH
3135: CALL 66653 0 2
3139: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 4
3147: PPUSH
3148: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3152: LD_VAR 0 3
3156: PPUSH
3157: LD_INT 7
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 4
3174: PPUSH
3175: CALL 69805 0 2
// end ;
3179: GO 3107
3181: POP
3182: POP
// ruCommisar := CreateHuman ;
3183: LD_ADDR_EXP 64
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3193: LD_EXP 64
3197: PPUSH
3198: LD_INT 124
3200: PPUSH
3201: LD_INT 37
3203: PPUSH
3204: LD_INT 0
3206: PPUSH
3207: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3211: LD_EXP 64
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3223: LD_EXP 64
3227: PPUSH
3228: LD_INT 3
3230: PPUSH
3231: CALL 69805 0 2
// end ;
3235: LD_VAR 0 1
3239: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3240: LD_INT 0
3242: PPUSH
3243: PPUSH
3244: PPUSH
3245: PPUSH
// uc_side := 6 ;
3246: LD_ADDR_OWVAR 20
3250: PUSH
3251: LD_INT 6
3253: ST_TO_ADDR
// uc_nation := 3 ;
3254: LD_ADDR_OWVAR 21
3258: PUSH
3259: LD_INT 3
3261: ST_TO_ADDR
// ruPatrol := [ ] ;
3262: LD_ADDR_EXP 70
3266: PUSH
3267: EMPTY
3268: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3269: LD_ADDR_VAR 0 4
3273: PUSH
3274: LD_INT 26
3276: PUSH
3277: LD_INT 30
3279: PUSH
3280: LD_INT 39
3282: PUSH
3283: LD_INT 43
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: ST_TO_ADDR
// for i := 1 to spawn do
3292: LD_ADDR_VAR 0 2
3296: PUSH
3297: DOUBLE
3298: LD_INT 1
3300: DEC
3301: ST_TO_ADDR
3302: LD_VAR 0 4
3306: PUSH
3307: FOR_TO
3308: IFFALSE 3419
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3310: LD_INT 0
3312: PPUSH
3313: LD_INT 4
3315: PUSH
3316: LD_INT 5
3318: PUSH
3319: LD_INT 6
3321: PUSH
3322: LD_INT 7
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: PUSH
3331: LD_OWVAR 67
3335: ARRAY
3336: PPUSH
3337: CALL_OW 381
// un := CreateHuman ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: CALL_OW 44
3350: ST_TO_ADDR
// SetTag ( un , i ) ;
3351: LD_VAR 0 3
3355: PPUSH
3356: LD_VAR 0 2
3360: PPUSH
3361: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3365: LD_ADDR_EXP 70
3369: PUSH
3370: LD_EXP 70
3374: PPUSH
3375: LD_VAR 0 3
3379: PPUSH
3380: CALL 66653 0 2
3384: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3385: LD_VAR 0 3
3389: PPUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PPUSH
3401: LD_INT 0
3403: PPUSH
3404: CALL_OW 49
// ComHold ( un ) ;
3408: LD_VAR 0 3
3412: PPUSH
3413: CALL_OW 140
// end ;
3417: GO 3307
3419: POP
3420: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3421: LD_ADDR_VAR 0 4
3425: PUSH
3426: LD_INT 48
3428: PUSH
3429: LD_INT 49
3431: PUSH
3432: LD_INT 50
3434: PUSH
3435: LD_INT 51
3437: PUSH
3438: LD_INT 52
3440: PUSH
3441: LD_INT 53
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: ST_TO_ADDR
// for i := 1 to spawn do
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: DOUBLE
3458: LD_INT 1
3460: DEC
3461: ST_TO_ADDR
3462: LD_VAR 0 4
3466: PUSH
3467: FOR_TO
3468: IFFALSE 3577
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3470: LD_INT 0
3472: PPUSH
3473: LD_INT 4
3475: PUSH
3476: LD_INT 5
3478: PUSH
3479: LD_INT 6
3481: PUSH
3482: LD_INT 7
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_OWVAR 67
3495: ARRAY
3496: PPUSH
3497: CALL_OW 381
// un := CreateHuman ;
3501: LD_ADDR_VAR 0 3
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3511: LD_VAR 0 3
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3523: LD_ADDR_EXP 70
3527: PUSH
3528: LD_EXP 70
3532: PPUSH
3533: LD_VAR 0 3
3537: PPUSH
3538: CALL 66653 0 2
3542: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3543: LD_VAR 0 3
3547: PPUSH
3548: LD_VAR 0 4
3552: PUSH
3553: LD_VAR 0 2
3557: ARRAY
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// ComHold ( un ) ;
3566: LD_VAR 0 3
3570: PPUSH
3571: CALL_OW 140
// end ;
3575: GO 3467
3577: POP
3578: POP
// end ;
3579: LD_VAR 0 1
3583: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3584: LD_INT 0
3586: PPUSH
3587: PPUSH
3588: PPUSH
3589: PPUSH
// uc_side := 6 ;
3590: LD_ADDR_OWVAR 20
3594: PUSH
3595: LD_INT 6
3597: ST_TO_ADDR
// uc_nation := nation_russian ;
3598: LD_ADDR_OWVAR 21
3602: PUSH
3603: LD_INT 3
3605: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3606: LD_ADDR_VAR 0 4
3610: PUSH
3611: LD_INT 54
3613: PUSH
3614: LD_INT 55
3616: PUSH
3617: LD_INT 56
3619: PUSH
3620: LD_INT 57
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: ST_TO_ADDR
// for i := 1 to spawn do
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: DOUBLE
3635: LD_INT 1
3637: DEC
3638: ST_TO_ADDR
3639: LD_VAR 0 4
3643: PUSH
3644: FOR_TO
3645: IFFALSE 3754
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3647: LD_INT 0
3649: PPUSH
3650: LD_INT 4
3652: PUSH
3653: LD_INT 5
3655: PUSH
3656: LD_INT 6
3658: PUSH
3659: LD_INT 7
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_OWVAR 67
3672: ARRAY
3673: PPUSH
3674: CALL_OW 381
// un := CreateHuman ;
3678: LD_ADDR_VAR 0 3
3682: PUSH
3683: CALL_OW 44
3687: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3688: LD_VAR 0 3
3692: PPUSH
3693: LD_INT 0
3695: PPUSH
3696: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3700: LD_ADDR_EXP 70
3704: PUSH
3705: LD_EXP 70
3709: PPUSH
3710: LD_VAR 0 3
3714: PPUSH
3715: CALL 66653 0 2
3719: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3720: LD_VAR 0 3
3724: PPUSH
3725: LD_VAR 0 4
3729: PUSH
3730: LD_VAR 0 2
3734: ARRAY
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// ComHold ( un ) ;
3743: LD_VAR 0 3
3747: PPUSH
3748: CALL_OW 140
// end ;
3752: GO 3644
3754: POP
3755: POP
// end ; end_of_file
3756: LD_VAR 0 1
3760: RET
// export function Action ; var speaker , i , tmp ; begin
3761: LD_INT 0
3763: PPUSH
3764: PPUSH
3765: PPUSH
3766: PPUSH
// Video ( true ) ;
3767: LD_INT 1
3769: PPUSH
3770: CALL 66625 0 1
// hasNormalScene := Kaia or Givi ;
3774: LD_ADDR_EXP 5
3778: PUSH
3779: LD_EXP 50
3783: PUSH
3784: LD_EXP 46
3788: OR
3789: ST_TO_ADDR
// if hasNormalScene then
3790: LD_EXP 5
3794: IFFALSE 4035
// begin for i in americanSquad do
3796: LD_ADDR_VAR 0 3
3800: PUSH
3801: LD_EXP 57
3805: PUSH
3806: FOR_IN
3807: IFFALSE 3853
// begin SetClass ( i , class_prison ) ;
3809: LD_VAR 0 3
3813: PPUSH
3814: LD_INT 33
3816: PPUSH
3817: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3821: LD_VAR 0 3
3825: PPUSH
3826: LD_INT 78
3828: PPUSH
3829: LD_INT 16
3831: PPUSH
3832: LD_INT 5
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 50
// ComHold ( i ) ;
3842: LD_VAR 0 3
3846: PPUSH
3847: CALL_OW 140
// end ;
3851: GO 3806
3853: POP
3854: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3855: LD_ADDR_VAR 0 4
3859: PUSH
3860: LD_EXP 47
3864: PUSH
3865: LD_EXP 48
3869: PUSH
3870: LD_EXP 49
3874: PUSH
3875: LD_EXP 50
3879: PUSH
3880: LD_EXP 51
3884: PUSH
3885: LD_EXP 52
3889: PUSH
3890: LD_EXP 53
3894: PUSH
3895: LD_EXP 54
3899: PUSH
3900: LD_EXP 46
3904: PUSH
3905: LD_EXP 55
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: PUSH
3922: LD_EXP 56
3926: UNION
3927: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3928: LD_EXP 45
3932: PPUSH
3933: LD_INT 33
3935: PPUSH
3936: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3940: LD_EXP 45
3944: PPUSH
3945: LD_INT 117
3947: PPUSH
3948: LD_INT 24
3950: PPUSH
3951: LD_INT 3
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL 68793 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3961: LD_EXP 45
3965: PPUSH
3966: LD_INT 123
3968: PPUSH
3969: LD_INT 39
3971: PPUSH
3972: CALL_OW 118
// for i in tmp do
3976: LD_ADDR_VAR 0 3
3980: PUSH
3981: LD_VAR 0 4
3985: PUSH
3986: FOR_IN
3987: IFFALSE 4033
// begin SetClass ( i , class_prison ) ;
3989: LD_VAR 0 3
3993: PPUSH
3994: LD_INT 33
3996: PPUSH
3997: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4001: LD_VAR 0 3
4005: PPUSH
4006: LD_INT 3
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 113
4023: PPUSH
4024: LD_INT 16
4026: PPUSH
4027: CALL_OW 118
// end ;
4031: GO 3986
4033: POP
4034: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4035: LD_INT 124
4037: PPUSH
4038: LD_INT 39
4040: PPUSH
4041: CALL_OW 86
// PrepareDeadBodies ;
4045: CALL 2817 0 0
// PrepareFirstScene ;
4049: CALL 2953 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4053: LD_INT 152
4055: PPUSH
4056: LD_INT 65
4058: PPUSH
4059: LD_INT 2
4061: PPUSH
4062: LD_INT 70
4064: NEG
4065: PPUSH
4066: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4070: LD_INT 152
4072: PPUSH
4073: LD_INT 65
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4083: LD_INT 122
4085: PPUSH
4086: LD_INT 40
4088: PPUSH
4089: LD_INT 2
4091: PPUSH
4092: LD_INT 8
4094: NEG
4095: PPUSH
4096: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4100: LD_INT 124
4102: PPUSH
4103: LD_INT 37
4105: PPUSH
4106: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4110: LD_EXP 64
4114: PPUSH
4115: LD_STRING DRum-Execution-1
4117: PPUSH
4118: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4122: LD_EXP 64
4126: PPUSH
4127: LD_STRING DRum-Execution-2
4129: PPUSH
4130: CALL_OW 88
// wait ( 0 0$01 ) ;
4134: LD_INT 35
4136: PPUSH
4137: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4141: LD_EXP 64
4145: PPUSH
4146: LD_STRING DRum-Execution-3
4148: PPUSH
4149: CALL_OW 88
// wait ( 0 0$1 ) ;
4153: LD_INT 35
4155: PPUSH
4156: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4160: LD_EXP 64
4164: PPUSH
4165: LD_STRING DRum-Execution-4
4167: PPUSH
4168: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4172: LD_EXP 63
4176: PUSH
4177: LD_INT 1
4179: ARRAY
4180: PPUSH
4181: LD_INT 122
4183: PPUSH
4184: LD_INT 39
4186: PPUSH
4187: CALL_OW 428
4191: PPUSH
4192: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4196: LD_EXP 63
4200: PUSH
4201: LD_INT 2
4203: ARRAY
4204: PPUSH
4205: LD_INT 123
4207: PPUSH
4208: LD_INT 41
4210: PPUSH
4211: CALL_OW 428
4215: PPUSH
4216: CALL_OW 115
// AddComHold ( russianKillers ) ;
4220: LD_EXP 63
4224: PPUSH
4225: CALL_OW 200
// wait ( 0 0$1 ) ;
4229: LD_INT 35
4231: PPUSH
4232: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4236: LD_INT 122
4238: PPUSH
4239: LD_INT 40
4241: PPUSH
4242: LD_INT 2
4244: PPUSH
4245: CALL_OW 331
// for i in russianKillers union ruCommisar do
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: LD_EXP 63
4258: PUSH
4259: LD_EXP 64
4263: UNION
4264: PUSH
4265: FOR_IN
4266: IFFALSE 4279
// RemoveUnit ( i ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: CALL_OW 64
4277: GO 4265
4279: POP
4280: POP
// if hasNormalScene then
4281: LD_EXP 5
4285: IFFALSE 4293
// ActionNormal else
4287: CALL 4302 0 0
4291: GO 4297
// ActionAdditional ;
4293: CALL 6120 0 0
// end ;
4297: LD_VAR 0 1
4301: RET
// function ActionNormal ; var i , tmp ; begin
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
4306: PPUSH
// CenterNowOnUnits ( Heike ) ;
4307: LD_EXP 45
4311: PPUSH
4312: CALL_OW 87
// wait ( 0 0$1 ) ;
4316: LD_INT 35
4318: PPUSH
4319: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4323: LD_EXP 45
4327: PPUSH
4328: LD_INT 115
4330: PPUSH
4331: LD_INT 19
4333: PPUSH
4334: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4338: LD_EXP 45
4342: PPUSH
4343: LD_INT 113
4345: PPUSH
4346: LD_INT 16
4348: PPUSH
4349: CALL_OW 178
// wait ( 0 0$2 ) ;
4353: LD_INT 70
4355: PPUSH
4356: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4360: LD_EXP 45
4364: PPUSH
4365: LD_STRING DH-Conspiracy-1
4367: PPUSH
4368: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4372: LD_EXP 50
4376: PPUSH
4377: LD_STRING DK-Conspiracy-2
4379: PPUSH
4380: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4384: LD_EXP 46
4388: PPUSH
4389: LD_STRING DG-Conspiracy-3
4391: PPUSH
4392: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4396: LD_EXP 46
4400: PPUSH
4401: LD_STRING DG-Conspiracy-4
4403: PPUSH
4404: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4408: LD_EXP 45
4412: PPUSH
4413: LD_STRING DH-Conspiracy-5
4415: PPUSH
4416: CALL_OW 88
// if IsOk ( Kamil ) then
4420: LD_EXP 49
4424: PPUSH
4425: CALL_OW 302
4429: IFFALSE 4487
// begin hasVodka := true ;
4431: LD_ADDR_EXP 4
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4439: LD_EXP 49
4443: PPUSH
4444: LD_STRING DKam-Conspiracy-6
4446: PPUSH
4447: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4451: LD_EXP 49
4455: PPUSH
4456: LD_STRING DKam-Conspiracy-7
4458: PPUSH
4459: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4463: LD_EXP 49
4467: PPUSH
4468: LD_STRING DKam-Conspiracy-8
4470: PPUSH
4471: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4475: LD_EXP 49
4479: PPUSH
4480: LD_STRING DKam-Conspiracy-9
4482: PPUSH
4483: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4487: LD_EXP 51
4491: PPUSH
4492: CALL_OW 302
4496: IFFALSE 4677
// begin americanContact := true ;
4498: LD_ADDR_EXP 10
4502: PUSH
4503: LD_INT 1
4505: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4506: LD_STRING M1-american
4508: PPUSH
4509: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4513: LD_EXP 51
4517: PPUSH
4518: LD_STRING DS-Conspiracy-10
4520: PPUSH
4521: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4525: LD_EXP 52
4529: PPUSH
4530: LD_STRING DM-Conspiracy-11
4532: PPUSH
4533: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4537: LD_EXP 51
4541: PPUSH
4542: LD_STRING DS-Conspiracy-12
4544: PPUSH
4545: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4549: LD_INT 84
4551: PPUSH
4552: LD_INT 19
4554: PPUSH
4555: LD_INT 105
4557: PPUSH
4558: CALL 19726 0 3
// if johnnySaved then
4562: LD_EXP 3
4566: IFFALSE 4606
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4568: LD_EXP 51
4572: PPUSH
4573: LD_STRING DS-Conspiracy-13
4575: PPUSH
4576: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4580: LD_EXP 45
4584: PPUSH
4585: LD_STRING DH-Conspiracy-14
4587: PPUSH
4588: CALL_OW 88
// Say ( Heike , DH-Conspiracy-15 ) ;
4592: LD_EXP 45
4596: PPUSH
4597: LD_STRING DH-Conspiracy-15
4599: PPUSH
4600: CALL_OW 88
// end else
4604: GO 4642
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4606: LD_EXP 51
4610: PPUSH
4611: LD_STRING DS-Conspiracy-a-13
4613: PPUSH
4614: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4618: LD_EXP 45
4622: PPUSH
4623: LD_STRING DH-Conspiracy-a-14
4625: PPUSH
4626: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4630: LD_EXP 45
4634: PPUSH
4635: LD_STRING DH-Conspiracy-a-15
4637: PPUSH
4638: CALL_OW 88
// end ; if IsOk ( Givi ) then
4642: LD_EXP 46
4646: PPUSH
4647: CALL_OW 302
4651: IFFALSE 4677
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4653: LD_EXP 46
4657: PPUSH
4658: LD_STRING DG-Conspiracy-a-16
4660: PPUSH
4661: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4665: LD_EXP 45
4669: PPUSH
4670: LD_STRING DH-Conspiracy-a-17
4672: PPUSH
4673: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4677: LD_EXP 45
4681: PPUSH
4682: LD_STRING DH-Conspiracy-16
4684: PPUSH
4685: CALL_OW 88
// if IsOk ( Givi ) then
4689: LD_EXP 46
4693: PPUSH
4694: CALL_OW 302
4698: IFFALSE 4970
// begin hasStimDrugs := true ;
4700: LD_ADDR_EXP 9
4704: PUSH
4705: LD_INT 1
4707: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4708: LD_STRING M1-drugs
4710: PPUSH
4711: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4715: LD_EXP 46
4719: PPUSH
4720: LD_STRING DG-Conspiracy-17
4722: PPUSH
4723: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4727: LD_INT 162
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4737: LD_INT 194
4739: PPUSH
4740: LD_INT 98
4742: PPUSH
4743: LD_INT 105
4745: PPUSH
4746: CALL 19726 0 3
// SetSide ( drugsLab , 3 ) ;
4750: LD_INT 162
4752: PPUSH
4753: LD_INT 3
4755: PPUSH
4756: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4760: LD_EXP 46
4764: PPUSH
4765: LD_STRING DG-Conspiracy-18
4767: PPUSH
4768: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4772: LD_EXP 46
4776: PPUSH
4777: LD_STRING DG-Conspiracy-19
4779: PPUSH
4780: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4784: LD_EXP 46
4788: PPUSH
4789: LD_STRING DG-Conspiracy-20
4791: PPUSH
4792: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4796: LD_EXP 45
4800: PPUSH
4801: LD_STRING DH-Conspiracy-21
4803: PPUSH
4804: CALL_OW 88
// if IsOk ( Kaia ) then
4808: LD_EXP 50
4812: PPUSH
4813: CALL_OW 302
4817: IFFALSE 4891
// begin hasExplosions := true ;
4819: LD_ADDR_EXP 6
4823: PUSH
4824: LD_INT 1
4826: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4827: LD_STRING M1-explosive
4829: PPUSH
4830: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4834: LD_EXP 50
4838: PPUSH
4839: LD_STRING DK-Conspiracy-22
4841: PPUSH
4842: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4846: LD_INT 73
4848: PPUSH
4849: LD_INT 2
4851: PPUSH
4852: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4856: LD_INT 170
4858: PPUSH
4859: LD_INT 104
4861: PPUSH
4862: LD_INT 105
4864: PPUSH
4865: CALL 19726 0 3
// SetSide ( barExplosion , 3 ) ;
4869: LD_INT 73
4871: PPUSH
4872: LD_INT 3
4874: PPUSH
4875: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4879: LD_EXP 50
4883: PPUSH
4884: LD_STRING DK-Conspiracy-23
4886: PPUSH
4887: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4891: LD_EXP 53
4895: PPUSH
4896: CALL_OW 302
4900: IFFALSE 4970
// begin hasExplosionsInFactory := true ;
4902: LD_ADDR_EXP 7
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4910: LD_EXP 53
4914: PPUSH
4915: LD_STRING DO-Conspiracy-24
4917: PPUSH
4918: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4922: LD_INT 175
4924: PPUSH
4925: LD_INT 54
4927: PPUSH
4928: LD_INT 70
4930: PPUSH
4931: CALL 19726 0 3
// if IsOk ( Markov ) then
4935: LD_EXP 52
4939: PPUSH
4940: CALL_OW 302
4944: IFFALSE 4970
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4946: LD_EXP 52
4950: PPUSH
4951: LD_STRING DMar-Conspiracy-25
4953: PPUSH
4954: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4958: LD_EXP 52
4962: PPUSH
4963: LD_STRING DMar-Conspiracy-26
4965: PPUSH
4966: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4970: LD_EXP 54
4974: PPUSH
4975: CALL_OW 302
4979: PUSH
4980: LD_EXP 50
4984: PPUSH
4985: CALL_OW 302
4989: AND
4990: IFFALSE 5450
// begin hasWeapons := true ;
4992: LD_ADDR_EXP 19
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// hasRevolver := true ;
5000: LD_ADDR_EXP 8
5004: PUSH
5005: LD_INT 1
5007: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5008: LD_STRING M1-weapons
5010: PPUSH
5011: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5015: LD_EXP 54
5019: PPUSH
5020: LD_STRING DKs-Conspiracy-27
5022: PPUSH
5023: CALL_OW 88
// if IsOk ( Givi ) then
5027: LD_EXP 46
5031: PPUSH
5032: CALL_OW 302
5036: IFFALSE 5052
// Say ( Givi , DG-Conspiracy-28 ) else
5038: LD_EXP 46
5042: PPUSH
5043: LD_STRING DG-Conspiracy-28
5045: PPUSH
5046: CALL_OW 88
5050: GO 5117
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5052: LD_EXP 56
5056: PPUSH
5057: LD_INT 26
5059: PUSH
5060: LD_INT 1
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 72
5071: PUSH
5072: LD_INT 1
5074: ARRAY
5075: PPUSH
5076: LD_STRING DArm-Conspiracy-a-28
5078: PPUSH
5079: CALL_OW 88
5083: NOT
5084: IFFALSE 5117
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5086: LD_EXP 56
5090: PPUSH
5091: LD_INT 26
5093: PUSH
5094: LD_INT 2
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 72
5105: PUSH
5106: LD_INT 1
5108: ARRAY
5109: PPUSH
5110: LD_STRING DArf-Conspiracy-a-28
5112: PPUSH
5113: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5117: LD_EXP 54
5121: PPUSH
5122: LD_STRING DKs-Conspiracy-29
5124: PPUSH
5125: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5129: LD_INT 192
5131: PPUSH
5132: LD_INT 122
5134: PPUSH
5135: LD_INT 105
5137: PPUSH
5138: CALL 19726 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5142: LD_EXP 54
5146: PPUSH
5147: LD_STRING DKs-Conspiracy-30
5149: PPUSH
5150: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5154: LD_EXP 50
5158: PPUSH
5159: LD_STRING DK-Conspiracy-31
5161: PPUSH
5162: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5166: LD_EXP 52
5170: PPUSH
5171: LD_STRING DMar-Conspiracy-33
5173: PPUSH
5174: CALL_OW 88
5178: NOT
5179: PUSH
5180: LD_EXP 56
5184: AND
5185: IFFALSE 5252
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5187: LD_EXP 56
5191: PPUSH
5192: LD_INT 26
5194: PUSH
5195: LD_INT 1
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL_OW 72
5206: PUSH
5207: LD_INT 1
5209: ARRAY
5210: PPUSH
5211: LD_STRING DArm-Conspiracy-a-34
5213: PPUSH
5214: CALL_OW 88
5218: NOT
5219: IFFALSE 5252
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5221: LD_EXP 56
5225: PPUSH
5226: LD_INT 26
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 72
5240: PUSH
5241: LD_INT 1
5243: ARRAY
5244: PPUSH
5245: LD_STRING DArf-Conspiracy-a-34
5247: PPUSH
5248: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5252: LD_EXP 50
5256: PPUSH
5257: LD_STRING DK-Conspiracy-34
5259: PPUSH
5260: CALL_OW 88
// if IsOk ( Markov ) then
5264: LD_EXP 52
5268: PPUSH
5269: CALL_OW 302
5273: IFFALSE 5358
// begin hasSniperRifle := true ;
5275: LD_ADDR_EXP 11
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5283: LD_EXP 52
5287: PPUSH
5288: LD_STRING DMar-Conspiracy-35
5290: PPUSH
5291: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5295: LD_EXP 50
5299: PPUSH
5300: LD_STRING DK-Conspiracy-36
5302: PPUSH
5303: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5307: LD_EXP 52
5311: PPUSH
5312: LD_STRING DMar-Conspiracy-37
5314: PPUSH
5315: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5319: LD_EXP 52
5323: PPUSH
5324: LD_STRING DMar-Conspiracy-38
5326: PPUSH
5327: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5331: LD_INT 137
5333: PPUSH
5334: LD_INT 98
5336: PPUSH
5337: LD_INT 105
5339: PPUSH
5340: CALL 19726 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5344: LD_EXP 52
5348: PPUSH
5349: LD_STRING DMar-Conspiracy-39
5351: PPUSH
5352: CALL_OW 88
// end else
5356: GO 5450
// if heikeSecondSquad then
5358: LD_EXP 56
5362: IFFALSE 5450
// begin hasSniperRifle := true ;
5364: LD_ADDR_EXP 11
5368: PUSH
5369: LD_INT 1
5371: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5372: LD_INT 137
5374: PPUSH
5375: LD_INT 98
5377: PPUSH
5378: LD_INT 105
5380: PPUSH
5381: CALL 19726 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5385: LD_EXP 56
5389: PPUSH
5390: LD_INT 26
5392: PUSH
5393: LD_INT 1
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PPUSH
5400: CALL_OW 72
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: PPUSH
5409: LD_STRING DArm-Conspiracy-a-35
5411: PPUSH
5412: CALL_OW 88
5416: NOT
5417: IFFALSE 5450
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5419: LD_EXP 56
5423: PPUSH
5424: LD_INT 26
5426: PUSH
5427: LD_INT 2
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PPUSH
5434: CALL_OW 72
5438: PUSH
5439: LD_INT 1
5441: ARRAY
5442: PPUSH
5443: LD_STRING DArf-Conspiracy-a-35
5445: PPUSH
5446: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5450: LD_EXP 45
5454: PPUSH
5455: LD_STRING DH-Conspiracy-40
5457: PPUSH
5458: CALL_OW 88
// if IsOk ( Mike ) then
5462: LD_EXP 47
5466: PPUSH
5467: CALL_OW 302
5471: IFFALSE 5530
// begin hasScout := true ;
5473: LD_ADDR_EXP 12
5477: PUSH
5478: LD_INT 1
5480: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5481: LD_EXP 47
5485: PPUSH
5486: LD_STRING DM-Conspiracy-41
5488: PPUSH
5489: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5493: LD_EXP 47
5497: PPUSH
5498: LD_STRING DM-Conspiracy-42
5500: PPUSH
5501: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5505: LD_INT 73
5507: PPUSH
5508: LD_INT 102
5510: PPUSH
5511: LD_INT 105
5513: PPUSH
5514: CALL 19726 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5518: LD_EXP 47
5522: PPUSH
5523: LD_STRING DM-Conspiracy-43
5525: PPUSH
5526: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5530: LD_EXP 4
5534: PUSH
5535: LD_EXP 50
5539: PPUSH
5540: CALL_OW 302
5544: AND
5545: PUSH
5546: LD_EXP 54
5550: PPUSH
5551: CALL_OW 302
5555: AND
5556: IFFALSE 5602
// begin hasMethanol := true ;
5558: LD_ADDR_EXP 13
5562: PUSH
5563: LD_INT 1
5565: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5566: LD_EXP 50
5570: PPUSH
5571: LD_STRING DK-Conspiracy-44
5573: PPUSH
5574: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5578: LD_EXP 50
5582: PPUSH
5583: LD_STRING DK-Conspiracy-45
5585: PPUSH
5586: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5590: LD_EXP 49
5594: PPUSH
5595: LD_STRING DKam-Conspiracy-46
5597: PPUSH
5598: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5602: LD_EXP 45
5606: PPUSH
5607: LD_STRING DH-Conspiracy-47
5609: PPUSH
5610: CALL_OW 88
// wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// your_side := 8 ;
5621: LD_ADDR_OWVAR 2
5625: PUSH
5626: LD_INT 8
5628: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5629: LD_INT 1
5631: PPUSH
5632: LD_INT 1
5634: PPUSH
5635: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5639: LD_ADDR_VAR 0 2
5643: PUSH
5644: LD_INT 2
5646: PUSH
5647: LD_INT 22
5649: PUSH
5650: LD_INT 2
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_INT 4
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 21
5674: PUSH
5675: LD_INT 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PPUSH
5686: CALL_OW 69
5690: PUSH
5691: FOR_IN
5692: IFFALSE 5705
// RemoveUnit ( i ) ;
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 64
5703: GO 5691
5705: POP
5706: POP
// wait ( 0 0$0.3 ) ;
5707: LD_INT 10
5709: PPUSH
5710: CALL_OW 67
// Query ( StartInfo1 ) ;
5714: LD_STRING StartInfo1
5716: PPUSH
5717: CALL_OW 97
// wait ( 0 0$1 ) ;
5721: LD_INT 35
5723: PPUSH
5724: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5728: LD_STRING colors_night.txt
5730: PPUSH
5731: CALL_OW 544
// Query ( StartInfo2 ) ;
5735: LD_STRING StartInfo2
5737: PPUSH
5738: CALL_OW 97
// PrepareGame ;
5742: CALL 1048 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5746: LD_INT 152
5748: PPUSH
5749: LD_INT 65
5751: PPUSH
5752: LD_INT 2
5754: PPUSH
5755: LD_INT 70
5757: NEG
5758: PPUSH
5759: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5763: LD_INT 152
5765: PPUSH
5766: LD_INT 65
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5776: LD_INT 133
5778: PPUSH
5779: LD_INT 76
5781: PPUSH
5782: LD_INT 2
5784: PPUSH
5785: LD_INT 6
5787: NEG
5788: PPUSH
5789: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5793: LD_INT 152
5795: PPUSH
5796: LD_INT 65
5798: PPUSH
5799: LD_INT 8
5801: PPUSH
5802: LD_INT 70
5804: NEG
5805: PPUSH
5806: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5810: LD_INT 152
5812: PPUSH
5813: LD_INT 65
5815: PPUSH
5816: LD_INT 8
5818: PPUSH
5819: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5823: LD_INT 133
5825: PPUSH
5826: LD_INT 76
5828: PPUSH
5829: LD_INT 8
5831: PPUSH
5832: LD_INT 6
5834: NEG
5835: PPUSH
5836: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5840: LD_INT 23
5842: PPUSH
5843: CALL_OW 87
// dialogue_skipped := false ;
5847: LD_ADDR_OWVAR 59
5851: PUSH
5852: LD_INT 0
5854: ST_TO_ADDR
// InitRuPatrols ;
5855: CALL 3240 0 0
// Say ( Heike , DH-Escape-1 ) ;
5859: LD_EXP 45
5863: PPUSH
5864: LD_STRING DH-Escape-1
5866: PPUSH
5867: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5871: LD_EXP 45
5875: PPUSH
5876: LD_STRING DH-Escape-2
5878: PPUSH
5879: CALL_OW 88
// StartLockerMinigame ;
5883: CALL 20511 0 0
// wait ( 0 0$1 ) ;
5887: LD_INT 35
5889: PPUSH
5890: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5894: LD_EXP 45
5898: PPUSH
5899: LD_STRING DH-Escape-4
5901: PPUSH
5902: CALL_OW 88
// wait ( 0 0$3 ) ;
5906: LD_INT 105
5908: PPUSH
5909: CALL_OW 67
// your_side := 2 ;
5913: LD_ADDR_OWVAR 2
5917: PUSH
5918: LD_INT 2
5920: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5921: LD_EXP 45
5925: PPUSH
5926: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5930: LD_INT 152
5932: PPUSH
5933: LD_INT 65
5935: PPUSH
5936: LD_INT 2
5938: PPUSH
5939: LD_INT 70
5941: NEG
5942: PPUSH
5943: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5947: LD_INT 152
5949: PPUSH
5950: LD_INT 65
5952: PPUSH
5953: LD_INT 2
5955: PPUSH
5956: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5960: LD_INT 133
5962: PPUSH
5963: LD_INT 76
5965: PPUSH
5966: LD_INT 8
5968: PPUSH
5969: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5973: LD_EXP 45
5977: PPUSH
5978: LD_INT 128
5980: PPUSH
5981: LD_INT 64
5983: PPUSH
5984: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5988: LD_INT 35
5990: PPUSH
5991: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5995: LD_EXP 45
5999: PPUSH
6000: LD_INT 128
6002: PPUSH
6003: LD_INT 64
6005: PPUSH
6006: CALL_OW 307
6010: IFFALSE 5988
// ComHold ( Heike ) ;
6012: LD_EXP 45
6016: PPUSH
6017: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6021: LD_EXP 45
6025: PPUSH
6026: LD_STRING DH-Start-1
6028: PPUSH
6029: CALL_OW 88
// if not americanContact then
6033: LD_EXP 10
6037: NOT
6038: IFFALSE 6054
// Say ( Heike , DH-Start-c-2 ) else
6040: LD_EXP 45
6044: PPUSH
6045: LD_STRING DH-Start-c-2
6047: PPUSH
6048: CALL_OW 88
6052: GO 6086
// if johnnySaved then
6054: LD_EXP 3
6058: IFFALSE 6074
// Say ( Heike , DH-Start-a-2 ) else
6060: LD_EXP 45
6064: PPUSH
6065: LD_STRING DH-Start-a-2
6067: PPUSH
6068: CALL_OW 88
6072: GO 6086
// Say ( Heike , DH-Start-b-2 ) ;
6074: LD_EXP 45
6078: PPUSH
6079: LD_STRING DH-Start-b-2
6081: PPUSH
6082: CALL_OW 88
// Video ( false ) ;
6086: LD_INT 0
6088: PPUSH
6089: CALL 66625 0 1
// tick := 0 ;
6093: LD_ADDR_OWVAR 1
6097: PUSH
6098: LD_INT 0
6100: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6101: LD_STRING M1
6103: PPUSH
6104: CALL_OW 337
// enable ( gameStartEvent ) ;
6108: LD_INT 2
6110: ENABLE_MARKED
// SaveForQuickRestart ;
6111: CALL_OW 22
// end ;
6115: LD_VAR 0 1
6119: RET
// function ActionAdditional ; var i , un , tmp ; begin
6120: LD_INT 0
6122: PPUSH
6123: PPUSH
6124: PPUSH
6125: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6126: LD_INT 115
6128: PPUSH
6129: LD_INT 27
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: LD_INT 6
6137: NEG
6138: PPUSH
6139: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6143: LD_EXP 45
6147: PPUSH
6148: LD_INT 115
6150: PPUSH
6151: LD_INT 27
6153: PPUSH
6154: CALL_OW 428
6158: PPUSH
6159: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6163: LD_EXP 45
6167: PPUSH
6168: LD_INT 33
6170: PPUSH
6171: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6175: LD_INT 124
6177: PPUSH
6178: LD_INT 39
6180: PPUSH
6181: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6185: LD_EXP 45
6189: PPUSH
6190: LD_STRING DH-Fail-1
6192: PPUSH
6193: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6197: LD_INT 3
6199: PPUSH
6200: CALL_OW 427
// ComExit ( Heike ) ;
6204: LD_EXP 45
6208: PPUSH
6209: CALL 67051 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6213: LD_EXP 45
6217: PPUSH
6218: LD_INT 109
6220: PPUSH
6221: LD_INT 33
6223: PPUSH
6224: CALL_OW 171
// AddComHold ( Heike ) ;
6228: LD_EXP 45
6232: PPUSH
6233: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6237: LD_INT 115
6239: PPUSH
6240: LD_INT 27
6242: PPUSH
6243: LD_INT 2
6245: PPUSH
6246: CALL_OW 331
// wait ( 0 0$2 ) ;
6250: LD_INT 70
6252: PPUSH
6253: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6257: LD_INT 35
6259: PPUSH
6260: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6264: LD_EXP 45
6268: PPUSH
6269: LD_INT 109
6271: PPUSH
6272: LD_INT 33
6274: PPUSH
6275: CALL_OW 307
6279: IFFALSE 6257
// Say ( Heike , DH-Fail-2 ) ;
6281: LD_EXP 45
6285: PPUSH
6286: LD_STRING DH-Fail-2
6288: PPUSH
6289: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6293: LD_EXP 45
6297: PPUSH
6298: LD_INT 111
6300: PPUSH
6301: LD_INT 48
6303: PPUSH
6304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6308: LD_INT 35
6310: PPUSH
6311: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6315: LD_EXP 45
6319: PPUSH
6320: LD_INT 111
6322: PPUSH
6323: LD_INT 48
6325: PPUSH
6326: CALL_OW 297
6330: PUSH
6331: LD_INT 4
6333: LESS
6334: IFFALSE 6308
// AddComMoveXY ( Heike , 106 , 72 ) ;
6336: LD_EXP 45
6340: PPUSH
6341: LD_INT 106
6343: PPUSH
6344: LD_INT 72
6346: PPUSH
6347: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6351: LD_EXP 45
6355: PPUSH
6356: LD_INT 103
6358: PPUSH
6359: LD_INT 80
6361: PPUSH
6362: CALL_OW 171
// uc_side := 3 ;
6366: LD_ADDR_OWVAR 20
6370: PUSH
6371: LD_INT 3
6373: ST_TO_ADDR
// uc_nation := 3 ;
6374: LD_ADDR_OWVAR 21
6378: PUSH
6379: LD_INT 3
6381: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6382: LD_INT 1
6384: PPUSH
6385: LD_INT 1
6387: PPUSH
6388: LD_INT 6
6390: PPUSH
6391: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6395: LD_ADDR_OWVAR 29
6399: PUSH
6400: LD_INT 12
6402: PUSH
6403: LD_INT 12
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: ST_TO_ADDR
// un := CreateHuman ;
6410: LD_ADDR_VAR 0 3
6414: PUSH
6415: CALL_OW 44
6419: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6420: LD_VAR 0 3
6424: PPUSH
6425: LD_INT 134
6427: PPUSH
6428: LD_INT 52
6430: PPUSH
6431: LD_INT 4
6433: PPUSH
6434: LD_INT 0
6436: PPUSH
6437: CALL 68793 0 5
// ComTurnUnit ( un , Heike ) ;
6441: LD_VAR 0 3
6445: PPUSH
6446: LD_EXP 45
6450: PPUSH
6451: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6455: LD_VAR 0 3
6459: PPUSH
6460: LD_EXP 45
6464: PPUSH
6465: CALL_OW 112
// if GetSex ( un ) = sex_male then
6469: LD_VAR 0 3
6473: PPUSH
6474: CALL_OW 258
6478: PUSH
6479: LD_INT 1
6481: EQUAL
6482: IFFALSE 6498
// Say ( un , DRum-Fail-3 ) else
6484: LD_VAR 0 3
6488: PPUSH
6489: LD_STRING DRum-Fail-3
6491: PPUSH
6492: CALL_OW 88
6496: GO 6510
// Say ( un , DRuf-Fail-3 ) ;
6498: LD_VAR 0 3
6502: PPUSH
6503: LD_STRING DRuf-Fail-3
6505: PPUSH
6506: CALL_OW 88
// for i := 1 to 3 do
6510: LD_ADDR_VAR 0 2
6514: PUSH
6515: DOUBLE
6516: LD_INT 1
6518: DEC
6519: ST_TO_ADDR
6520: LD_INT 3
6522: PUSH
6523: FOR_TO
6524: IFFALSE 6597
// begin PrepareSoldier ( false , 10 ) ;
6526: LD_INT 0
6528: PPUSH
6529: LD_INT 10
6531: PPUSH
6532: CALL_OW 381
// un := CreateHuman ;
6536: LD_ADDR_VAR 0 3
6540: PUSH
6541: CALL_OW 44
6545: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6546: LD_ADDR_VAR 0 4
6550: PUSH
6551: LD_VAR 0 4
6555: PPUSH
6556: LD_VAR 0 3
6560: PPUSH
6561: CALL 66653 0 2
6565: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6566: LD_VAR 0 3
6570: PPUSH
6571: LD_INT 8
6573: PPUSH
6574: LD_INT 0
6576: PPUSH
6577: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6581: LD_VAR 0 3
6585: PPUSH
6586: LD_EXP 45
6590: PPUSH
6591: CALL_OW 119
// end ;
6595: GO 6523
6597: POP
6598: POP
// repeat wait ( 0 0$1 ) ;
6599: LD_INT 35
6601: PPUSH
6602: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6606: LD_VAR 0 4
6610: PPUSH
6611: LD_INT 101
6613: PUSH
6614: LD_INT 2
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 72
6625: PUSH
6626: LD_INT 1
6628: GREATER
6629: IFFALSE 6599
// wait ( 0 0$1 ) ;
6631: LD_INT 35
6633: PPUSH
6634: CALL_OW 67
// DialogueOn ;
6638: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6642: LD_EXP 45
6646: PPUSH
6647: LD_STRING DH-Fail-4
6649: PPUSH
6650: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6654: LD_EXP 45
6658: PPUSH
6659: LD_STRING DH-Fail-5
6661: PPUSH
6662: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6666: LD_EXP 45
6670: PPUSH
6671: LD_STRING DH-Fail-6
6673: PPUSH
6674: CALL_OW 88
// DialogueOff ;
6678: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6682: LD_VAR 0 4
6686: PPUSH
6687: LD_EXP 45
6691: PPUSH
6692: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6696: LD_INT 35
6698: PPUSH
6699: CALL_OW 67
// until IsDying ( Heike ) ;
6703: LD_EXP 45
6707: PPUSH
6708: CALL_OW 303
6712: IFFALSE 6696
// KillUnit ( Heike ) ;
6714: LD_EXP 45
6718: PPUSH
6719: CALL_OW 66
// wait ( 0 0$4 ) ;
6723: LD_INT 140
6725: PPUSH
6726: CALL_OW 67
// ResetFog ;
6730: CALL_OW 335
// DialogueOn ;
6734: CALL_OW 6
// dwait ( 0 0$1 ) ;
6738: LD_INT 35
6740: PPUSH
6741: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6745: LD_ADDR_EXP 45
6749: PUSH
6750: LD_STRING Heike
6752: PPUSH
6753: LD_EXP 1
6757: NOT
6758: PPUSH
6759: LD_EXP 2
6763: PPUSH
6764: CALL 28951 0 3
6768: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6769: LD_EXP 45
6773: PPUSH
6774: LD_STRING DH-Fail-7
6776: PPUSH
6777: CALL_OW 89
// DialogueOff ;
6781: CALL_OW 7
// YouLost ( Fail ) ;
6785: LD_STRING Fail
6787: PPUSH
6788: CALL_OW 104
// end ;
6792: LD_VAR 0 1
6796: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6797: LD_INT 2
6799: PPUSH
6800: LD_INT 173
6802: PPUSH
6803: LD_INT 29
6805: PPUSH
6806: CALL_OW 293
6810: PUSH
6811: LD_EXP 45
6815: PPUSH
6816: LD_INT 173
6818: PPUSH
6819: LD_INT 29
6821: PPUSH
6822: CALL_OW 297
6826: PUSH
6827: LD_INT 6
6829: LESS
6830: AND
6831: IFFALSE 6848
6833: GO 6835
6835: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6836: LD_EXP 45
6840: PPUSH
6841: LD_STRING DH-EastRoad
6843: PPUSH
6844: CALL_OW 88
6848: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6849: LD_INT 2
6851: PPUSH
6852: LD_INT 149
6854: PPUSH
6855: LD_INT 3
6857: PPUSH
6858: CALL_OW 293
6862: PUSH
6863: LD_EXP 45
6867: PPUSH
6868: LD_INT 149
6870: PPUSH
6871: LD_INT 3
6873: PPUSH
6874: CALL_OW 297
6878: PUSH
6879: LD_INT 6
6881: LESS
6882: AND
6883: IFFALSE 6900
6885: GO 6887
6887: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6888: LD_EXP 45
6892: PPUSH
6893: LD_STRING DH-EastRoad
6895: PPUSH
6896: CALL_OW 88
6900: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6901: LD_INT 2
6903: PPUSH
6904: LD_INT 217
6906: PPUSH
6907: LD_INT 120
6909: PPUSH
6910: CALL_OW 293
6914: PUSH
6915: LD_EXP 45
6919: PPUSH
6920: LD_INT 217
6922: PPUSH
6923: LD_INT 120
6925: PPUSH
6926: CALL_OW 297
6930: PUSH
6931: LD_INT 6
6933: LESS
6934: AND
6935: IFFALSE 6952
6937: GO 6939
6939: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6940: LD_EXP 45
6944: PPUSH
6945: LD_STRING DH-EastEnd
6947: PPUSH
6948: CALL_OW 88
6952: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6953: LD_EXP 45
6957: PPUSH
6958: LD_INT 11
6960: PPUSH
6961: CALL_OW 308
6965: IFFALSE 7003
6967: GO 6969
6969: DISABLE
// begin if not heikeSquad then
6970: LD_EXP 14
6974: NOT
6975: IFFALSE 6991
// Say ( Heike , DH-Hill ) else
6977: LD_EXP 45
6981: PPUSH
6982: LD_STRING DH-Hill
6984: PPUSH
6985: CALL_OW 88
6989: GO 7003
// Say ( Heike , DH-Hill-a ) ;
6991: LD_EXP 45
6995: PPUSH
6996: LD_STRING DH-Hill-a
6998: PPUSH
6999: CALL_OW 88
// end ;
7003: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
7004: LD_EXP 45
7008: PPUSH
7009: LD_INT 12
7011: PPUSH
7012: CALL_OW 308
7016: IFFALSE 7203
7018: GO 7020
7020: DISABLE
7021: LD_INT 0
7023: PPUSH
7024: PPUSH
7025: PPUSH
// begin DialogueOn ;
7026: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7030: LD_EXP 45
7034: PPUSH
7035: CALL_OW 87
// x := GetX ( Heike ) ;
7039: LD_ADDR_VAR 0 1
7043: PUSH
7044: LD_EXP 45
7048: PPUSH
7049: CALL_OW 250
7053: ST_TO_ADDR
// y := GetY ( Heike ) ;
7054: LD_ADDR_VAR 0 2
7058: PUSH
7059: LD_EXP 45
7063: PPUSH
7064: CALL_OW 251
7068: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7069: LD_VAR 0 1
7073: PPUSH
7074: LD_VAR 0 2
7078: PPUSH
7079: LD_INT 2
7081: PPUSH
7082: LD_INT 12
7084: NEG
7085: PPUSH
7086: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7090: LD_VAR 0 1
7094: PPUSH
7095: LD_VAR 0 2
7099: PPUSH
7100: LD_INT 2
7102: PPUSH
7103: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7107: LD_INT 101
7109: PUSH
7110: LD_INT 2
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 30
7122: PUSH
7123: LD_INT 32
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 30
7132: PUSH
7133: LD_INT 33
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PPUSH
7149: CALL_OW 69
7153: IFFALSE 7165
// v := 3 else
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: LD_INT 3
7162: ST_TO_ADDR
7163: GO 7173
// v := 2 ;
7165: LD_ADDR_VAR 0 3
7169: PUSH
7170: LD_INT 2
7172: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7173: LD_EXP 45
7177: PPUSH
7178: LD_STRING DH-Outpost-
7180: PUSH
7181: LD_INT 1
7183: PPUSH
7184: LD_VAR 0 3
7188: PPUSH
7189: CALL_OW 12
7193: STR
7194: PPUSH
7195: CALL_OW 88
// DialogueOff ;
7199: CALL_OW 7
// end ;
7203: PPOPN 3
7205: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7206: LD_EXP 45
7210: PPUSH
7211: LD_INT 64
7213: PPUSH
7214: CALL_OW 308
7218: IFFALSE 7405
7220: GO 7222
7222: DISABLE
7223: LD_INT 0
7225: PPUSH
7226: PPUSH
7227: PPUSH
// begin DialogueOn ;
7228: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7232: LD_EXP 45
7236: PPUSH
7237: CALL_OW 87
// x := GetX ( Heike ) ;
7241: LD_ADDR_VAR 0 1
7245: PUSH
7246: LD_EXP 45
7250: PPUSH
7251: CALL_OW 250
7255: ST_TO_ADDR
// y := GetY ( Heike ) ;
7256: LD_ADDR_VAR 0 2
7260: PUSH
7261: LD_EXP 45
7265: PPUSH
7266: CALL_OW 251
7270: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7271: LD_VAR 0 1
7275: PPUSH
7276: LD_VAR 0 2
7280: PPUSH
7281: LD_INT 2
7283: PPUSH
7284: LD_INT 12
7286: NEG
7287: PPUSH
7288: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7292: LD_VAR 0 1
7296: PPUSH
7297: LD_VAR 0 2
7301: PPUSH
7302: LD_INT 2
7304: PPUSH
7305: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7309: LD_INT 101
7311: PUSH
7312: LD_INT 2
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: LD_INT 2
7321: PUSH
7322: LD_INT 30
7324: PUSH
7325: LD_INT 32
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 30
7334: PUSH
7335: LD_INT 33
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PPUSH
7351: CALL_OW 69
7355: IFFALSE 7367
// v := 3 else
7357: LD_ADDR_VAR 0 3
7361: PUSH
7362: LD_INT 3
7364: ST_TO_ADDR
7365: GO 7375
// v := 2 ;
7367: LD_ADDR_VAR 0 3
7371: PUSH
7372: LD_INT 2
7374: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7375: LD_EXP 45
7379: PPUSH
7380: LD_STRING DH-Outpost-
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: LD_VAR 0 3
7390: PPUSH
7391: CALL_OW 12
7395: STR
7396: PPUSH
7397: CALL_OW 88
// DialogueOff ;
7401: CALL_OW 7
// end ;
7405: PPOPN 3
7407: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7408: LD_EXP 45
7412: PPUSH
7413: LD_INT 19
7415: PPUSH
7416: CALL_OW 308
7420: PUSH
7421: LD_EXP 22
7425: NOT
7426: AND
7427: PUSH
7428: LD_EXP 30
7432: NOT
7433: AND
7434: IFFALSE 7507
7436: GO 7438
7438: DISABLE
// begin DialogueOn ;
7439: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7443: LD_INT 152
7445: PPUSH
7446: LD_INT 115
7448: PPUSH
7449: LD_INT 2
7451: PPUSH
7452: LD_INT 16
7454: NEG
7455: PPUSH
7456: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7460: LD_INT 152
7462: PPUSH
7463: LD_INT 115
7465: PPUSH
7466: LD_INT 2
7468: PPUSH
7469: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7473: LD_INT 152
7475: PPUSH
7476: LD_INT 115
7478: PPUSH
7479: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7483: LD_EXP 45
7487: PPUSH
7488: LD_STRING DH-Stealth-1
7490: PPUSH
7491: CALL_OW 88
// DialogueOff ;
7495: CALL_OW 7
// adminAreaDiscovered := true ;
7499: LD_ADDR_EXP 22
7503: PUSH
7504: LD_INT 1
7506: ST_TO_ADDR
// end ;
7507: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7508: LD_INT 2
7510: PPUSH
7511: LD_EXP 46
7515: PPUSH
7516: CALL_OW 292
7520: PUSH
7521: LD_EXP 45
7525: PPUSH
7526: LD_EXP 46
7530: PPUSH
7531: CALL_OW 296
7535: PUSH
7536: LD_INT 6
7538: LESS
7539: AND
7540: PUSH
7541: LD_EXP 17
7545: NOT
7546: AND
7547: PUSH
7548: LD_EXP 30
7552: NOT
7553: AND
7554: IFFALSE 7660
7556: GO 7558
7558: DISABLE
// begin DialogueOn ;
7559: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7563: LD_EXP 46
7567: PPUSH
7568: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7572: LD_EXP 46
7576: PPUSH
7577: LD_EXP 45
7581: PPUSH
7582: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7586: LD_EXP 45
7590: PPUSH
7591: LD_EXP 46
7595: PPUSH
7596: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7600: LD_EXP 45
7604: PPUSH
7605: LD_STRING DH-Givi-1
7607: PPUSH
7608: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7612: LD_EXP 46
7616: PPUSH
7617: LD_STRING DG-Givi-2
7619: PPUSH
7620: CALL_OW 88
// DialogueOff ;
7624: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7628: LD_EXP 46
7632: PPUSH
7633: LD_INT 2
7635: PPUSH
7636: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7640: LD_ADDR_EXP 14
7644: PUSH
7645: LD_EXP 14
7649: PPUSH
7650: LD_EXP 46
7654: PPUSH
7655: CALL 66653 0 2
7659: ST_TO_ADDR
// end ;
7660: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7661: LD_INT 2
7663: PPUSH
7664: LD_EXP 51
7668: PPUSH
7669: CALL_OW 292
7673: PUSH
7674: LD_EXP 45
7678: PPUSH
7679: LD_EXP 51
7683: PPUSH
7684: CALL_OW 296
7688: PUSH
7689: LD_INT 6
7691: LESS
7692: AND
7693: PUSH
7694: LD_EXP 17
7698: NOT
7699: AND
7700: PUSH
7701: LD_EXP 30
7705: NOT
7706: AND
7707: IFFALSE 7813
7709: GO 7711
7711: DISABLE
// begin DialogueOn ;
7712: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7716: LD_EXP 51
7720: PPUSH
7721: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7725: LD_EXP 51
7729: PPUSH
7730: LD_EXP 45
7734: PPUSH
7735: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7739: LD_EXP 45
7743: PPUSH
7744: LD_EXP 51
7748: PPUSH
7749: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7753: LD_EXP 45
7757: PPUSH
7758: LD_STRING DH-Sophia-1
7760: PPUSH
7761: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7765: LD_EXP 51
7769: PPUSH
7770: LD_STRING DS-Sophia-2
7772: PPUSH
7773: CALL_OW 88
// DialogueOff ;
7777: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7781: LD_EXP 51
7785: PPUSH
7786: LD_INT 2
7788: PPUSH
7789: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7793: LD_ADDR_EXP 14
7797: PUSH
7798: LD_EXP 14
7802: PPUSH
7803: LD_EXP 51
7807: PPUSH
7808: CALL 66653 0 2
7812: ST_TO_ADDR
// end ;
7813: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7814: LD_INT 2
7816: PPUSH
7817: LD_EXP 53
7821: PPUSH
7822: CALL_OW 292
7826: PUSH
7827: LD_EXP 45
7831: PPUSH
7832: LD_EXP 53
7836: PPUSH
7837: CALL_OW 296
7841: PUSH
7842: LD_INT 6
7844: LESS
7845: AND
7846: PUSH
7847: LD_EXP 17
7851: NOT
7852: AND
7853: PUSH
7854: LD_EXP 30
7858: NOT
7859: AND
7860: IFFALSE 7956
7862: GO 7864
7864: DISABLE
// begin DialogueOn ;
7865: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7869: LD_EXP 53
7873: PPUSH
7874: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7878: LD_EXP 45
7882: PPUSH
7883: LD_STRING DH-Olaf-1
7885: PPUSH
7886: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7890: LD_EXP 53
7894: PPUSH
7895: LD_STRING DO-Olaf-2
7897: PPUSH
7898: CALL_OW 88
// if explosionsTakenByRussians then
7902: LD_EXP 21
7906: IFFALSE 7920
// Say ( Olaf , DO-Olaf-a-3 ) ;
7908: LD_EXP 53
7912: PPUSH
7913: LD_STRING DO-Olaf-a-3
7915: PPUSH
7916: CALL_OW 88
// DialogueOff ;
7920: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7924: LD_EXP 53
7928: PPUSH
7929: LD_INT 2
7931: PPUSH
7932: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7936: LD_ADDR_EXP 14
7940: PUSH
7941: LD_EXP 14
7945: PPUSH
7946: LD_EXP 53
7950: PPUSH
7951: CALL 66653 0 2
7955: ST_TO_ADDR
// end ;
7956: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7957: LD_INT 2
7959: PPUSH
7960: LD_EXP 47
7964: PPUSH
7965: CALL_OW 292
7969: PUSH
7970: LD_EXP 45
7974: PPUSH
7975: LD_EXP 47
7979: PPUSH
7980: CALL_OW 296
7984: PUSH
7985: LD_INT 6
7987: LESS
7988: AND
7989: PUSH
7990: LD_EXP 17
7994: NOT
7995: AND
7996: PUSH
7997: LD_EXP 30
8001: NOT
8002: AND
8003: IFFALSE 8231
8005: GO 8007
8007: DISABLE
8008: LD_INT 0
8010: PPUSH
8011: PPUSH
// begin DialogueOn ;
8012: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
8016: LD_EXP 47
8020: PPUSH
8021: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
8025: LD_ADDR_VAR 0 2
8029: PUSH
8030: LD_INT 18
8032: PPUSH
8033: LD_INT 0
8035: PPUSH
8036: CALL_OW 517
8040: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8041: LD_ADDR_VAR 0 1
8045: PUSH
8046: DOUBLE
8047: LD_INT 1
8049: DEC
8050: ST_TO_ADDR
8051: LD_VAR 0 2
8055: PUSH
8056: LD_INT 1
8058: ARRAY
8059: PUSH
8060: FOR_TO
8061: IFFALSE 8143
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8063: LD_VAR 0 2
8067: PUSH
8068: LD_INT 1
8070: ARRAY
8071: PUSH
8072: LD_VAR 0 1
8076: ARRAY
8077: PPUSH
8078: LD_VAR 0 2
8082: PUSH
8083: LD_INT 2
8085: ARRAY
8086: PUSH
8087: LD_VAR 0 1
8091: ARRAY
8092: PPUSH
8093: LD_INT 2
8095: PPUSH
8096: LD_INT 3
8098: NEG
8099: PPUSH
8100: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8104: LD_VAR 0 2
8108: PUSH
8109: LD_INT 1
8111: ARRAY
8112: PUSH
8113: LD_VAR 0 1
8117: ARRAY
8118: PPUSH
8119: LD_VAR 0 2
8123: PUSH
8124: LD_INT 2
8126: ARRAY
8127: PUSH
8128: LD_VAR 0 1
8132: ARRAY
8133: PPUSH
8134: LD_INT 2
8136: PPUSH
8137: CALL_OW 331
// end ;
8141: GO 8060
8143: POP
8144: POP
// Say ( Mike , DM-Mike-1 ) ;
8145: LD_EXP 47
8149: PPUSH
8150: LD_STRING DM-Mike-1
8152: PPUSH
8153: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8157: LD_EXP 45
8161: PPUSH
8162: LD_STRING DH-Mike-2
8164: PPUSH
8165: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8169: LD_INT 78
8171: PPUSH
8172: LD_INT 104
8174: PPUSH
8175: CALL_OW 84
// dwait ( 0 0$1 ) ;
8179: LD_INT 35
8181: PPUSH
8182: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8186: LD_EXP 45
8190: PPUSH
8191: CALL_OW 87
// DialogueOff ;
8195: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8199: LD_EXP 47
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8211: LD_ADDR_EXP 14
8215: PUSH
8216: LD_EXP 14
8220: PPUSH
8221: LD_EXP 47
8225: PPUSH
8226: CALL 66653 0 2
8230: ST_TO_ADDR
// end ;
8231: PPOPN 2
8233: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8234: LD_EXP 45
8238: PPUSH
8239: LD_EXP 50
8243: PPUSH
8244: CALL_OW 296
8248: PUSH
8249: LD_INT 6
8251: LESS
8252: PUSH
8253: LD_EXP 50
8257: PPUSH
8258: CALL_OW 257
8262: PUSH
8263: LD_INT 33
8265: EQUAL
8266: AND
8267: PUSH
8268: LD_EXP 17
8272: NOT
8273: AND
8274: PUSH
8275: LD_EXP 30
8279: NOT
8280: AND
8281: PUSH
8282: LD_EXP 50
8286: PPUSH
8287: CALL_OW 302
8291: AND
8292: PUSH
8293: LD_EXP 20
8297: AND
8298: PUSH
8299: LD_EXP 50
8303: PUSH
8304: LD_EXP 14
8308: IN
8309: AND
8310: PUSH
8311: LD_EXP 50
8315: PPUSH
8316: CALL_OW 255
8320: PUSH
8321: LD_INT 2
8323: EQUAL
8324: AND
8325: IFFALSE 8354
8327: GO 8329
8329: DISABLE
// begin DialogueOn ;
8330: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8334: LD_EXP 45
8338: PPUSH
8339: LD_STRING DH-Kaia-Revolver-2
8341: PPUSH
8342: CALL_OW 88
// SetClassKaiaRevolver ;
8346: CALL 1761 0 0
// DialogueOff ;
8350: CALL_OW 7
// end ;
8354: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8355: LD_EXP 48
8359: PUSH
8360: LD_EXP 55
8364: AND
8365: PUSH
8366: LD_EXP 55
8370: PPUSH
8371: CALL_OW 255
8375: PUSH
8376: LD_INT 2
8378: NONEQUAL
8379: AND
8380: PUSH
8381: LD_EXP 48
8385: PPUSH
8386: CALL_OW 255
8390: PUSH
8391: LD_INT 2
8393: NONEQUAL
8394: AND
8395: PUSH
8396: LD_EXP 14
8400: PPUSH
8401: LD_INT 22
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PPUSH
8411: CALL_OW 72
8415: PUSH
8416: LD_INT 5
8418: GREATER
8419: AND
8420: PUSH
8421: LD_EXP 17
8425: NOT
8426: AND
8427: PUSH
8428: LD_EXP 30
8432: NOT
8433: AND
8434: IFFALSE 9151
8436: GO 8438
8438: DISABLE
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
// begin DialogueOn ;
8443: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8447: LD_ADDR_VAR 0 2
8451: PUSH
8452: LD_EXP 46
8456: PPUSH
8457: CALL_OW 302
8461: PUSH
8462: LD_EXP 46
8466: PUSH
8467: LD_EXP 14
8471: IN
8472: AND
8473: PUSH
8474: LD_EXP 46
8478: PPUSH
8479: CALL_OW 255
8483: PUSH
8484: LD_INT 2
8486: EQUAL
8487: AND
8488: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8489: LD_EXP 45
8493: PPUSH
8494: LD_STRING DH-Med-1
8496: PPUSH
8497: CALL_OW 88
// if hasGivi then
8501: LD_VAR 0 2
8505: IFFALSE 8521
// Say ( Givi , DG-Med-2 ) else
8507: LD_EXP 46
8511: PPUSH
8512: LD_STRING DG-Med-2
8514: PPUSH
8515: CALL_OW 88
8519: GO 8626
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8521: LD_EXP 14
8525: PUSH
8526: LD_EXP 56
8530: ISECT
8531: PPUSH
8532: LD_INT 22
8534: PUSH
8535: LD_INT 2
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 26
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PPUSH
8556: CALL_OW 72
8560: PUSH
8561: LD_INT 1
8563: ARRAY
8564: PPUSH
8565: LD_STRING DArm-Med-e-2
8567: PPUSH
8568: CALL_OW 88
8572: NOT
8573: IFFALSE 8626
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8575: LD_EXP 14
8579: PUSH
8580: LD_EXP 56
8584: ISECT
8585: PPUSH
8586: LD_INT 22
8588: PUSH
8589: LD_INT 2
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 26
8598: PUSH
8599: LD_INT 2
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PPUSH
8610: CALL_OW 72
8614: PUSH
8615: LD_INT 1
8617: ARRAY
8618: PPUSH
8619: LD_STRING DArf-Med-e-2
8621: PPUSH
8622: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8626: LD_INT 154
8628: PPUSH
8629: LD_INT 119
8631: PPUSH
8632: LD_INT 70
8634: PPUSH
8635: CALL 19726 0 3
// Say ( Heike , DH-Med-3 ) ;
8639: LD_EXP 45
8643: PPUSH
8644: LD_STRING DH-Med-3
8646: PPUSH
8647: CALL_OW 88
// if hasGivi then
8651: LD_VAR 0 2
8655: IFFALSE 8671
// Say ( Givi , DG-Med-4 ) else
8657: LD_EXP 46
8661: PPUSH
8662: LD_STRING DG-Med-4
8664: PPUSH
8665: CALL_OW 88
8669: GO 8776
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8671: LD_EXP 14
8675: PUSH
8676: LD_EXP 56
8680: ISECT
8681: PPUSH
8682: LD_INT 22
8684: PUSH
8685: LD_INT 2
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 26
8694: PUSH
8695: LD_INT 1
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 72
8710: PUSH
8711: LD_INT 1
8713: ARRAY
8714: PPUSH
8715: LD_STRING DArm-Med-e-4
8717: PPUSH
8718: CALL_OW 88
8722: NOT
8723: IFFALSE 8776
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8725: LD_EXP 14
8729: PUSH
8730: LD_EXP 56
8734: ISECT
8735: PPUSH
8736: LD_INT 22
8738: PUSH
8739: LD_INT 2
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 26
8748: PUSH
8749: LD_INT 2
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PPUSH
8760: CALL_OW 72
8764: PUSH
8765: LD_INT 1
8767: ARRAY
8768: PPUSH
8769: LD_STRING DArf-Med-e-4
8771: PPUSH
8772: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8776: LD_ADDR_VAR 0 1
8780: PUSH
8781: LD_EXP 50
8785: PPUSH
8786: CALL_OW 302
8790: PUSH
8791: LD_EXP 50
8795: PUSH
8796: LD_EXP 14
8800: IN
8801: AND
8802: PUSH
8803: LD_EXP 50
8807: PPUSH
8808: CALL_OW 255
8812: PUSH
8813: LD_INT 2
8815: EQUAL
8816: AND
8817: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8818: LD_EXP 47
8822: PPUSH
8823: CALL_OW 302
8827: PUSH
8828: LD_EXP 47
8832: PUSH
8833: LD_EXP 14
8837: IN
8838: AND
8839: PUSH
8840: LD_EXP 50
8844: PPUSH
8845: CALL_OW 255
8849: PUSH
8850: LD_INT 2
8852: EQUAL
8853: AND
8854: IFFALSE 8886
// begin Say ( Mike , DM-Med-5 ) ;
8856: LD_EXP 47
8860: PPUSH
8861: LD_STRING DM-Med-5
8863: PPUSH
8864: CALL_OW 88
// if hasKaia then
8868: LD_VAR 0 1
8872: IFFALSE 8886
// Say ( Kaia , DK-Med-6 ) ;
8874: LD_EXP 50
8878: PPUSH
8879: LD_STRING DK-Med-6
8881: PPUSH
8882: CALL_OW 88
// end ; if hasKaia then
8886: LD_VAR 0 1
8890: IFFALSE 9131
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8892: LD_INT 175
8894: PPUSH
8895: LD_INT 123
8897: PPUSH
8898: LD_INT 2
8900: PPUSH
8901: LD_INT 8
8903: NEG
8904: PPUSH
8905: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8909: LD_INT 175
8911: PPUSH
8912: LD_INT 123
8914: PPUSH
8915: LD_INT 2
8917: PPUSH
8918: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8922: LD_INT 175
8924: PPUSH
8925: LD_INT 123
8927: PPUSH
8928: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8932: LD_EXP 50
8936: PPUSH
8937: LD_STRING DK-Med-7
8939: PPUSH
8940: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8944: LD_EXP 50
8948: PPUSH
8949: LD_STRING DK-Med-8
8951: PPUSH
8952: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8956: LD_EXP 52
8960: PPUSH
8961: CALL_OW 302
8965: PUSH
8966: LD_EXP 52
8970: PUSH
8971: LD_EXP 14
8975: IN
8976: AND
8977: PUSH
8978: LD_EXP 52
8982: PPUSH
8983: CALL_OW 255
8987: PUSH
8988: LD_INT 2
8990: EQUAL
8991: AND
8992: IFFALSE 9050
// begin Say ( Markov , DMar-Med-9 ) ;
8994: LD_EXP 52
8998: PPUSH
8999: LD_STRING DMar-Med-9
9001: PPUSH
9002: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9006: LD_EXP 50
9010: PPUSH
9011: LD_STRING DK-Med-10
9013: PPUSH
9014: CALL_OW 88
// if hasGivi then
9018: LD_VAR 0 2
9022: IFFALSE 9038
// Say ( Kaia , DK-Med-11 ) else
9024: LD_EXP 50
9028: PPUSH
9029: LD_STRING DK-Med-11
9031: PPUSH
9032: CALL_OW 88
9036: GO 9050
// Say ( Kaia , DK-Med-a-11 ) ;
9038: LD_EXP 50
9042: PPUSH
9043: LD_STRING DK-Med-a-11
9045: PPUSH
9046: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9050: LD_EXP 49
9054: PPUSH
9055: CALL_OW 302
9059: PUSH
9060: LD_EXP 49
9064: PUSH
9065: LD_EXP 14
9069: IN
9070: AND
9071: PUSH
9072: LD_EXP 49
9076: PPUSH
9077: CALL_OW 255
9081: PUSH
9082: LD_INT 2
9084: EQUAL
9085: AND
9086: IFFALSE 9131
// begin Say ( Kamil , DKam-Med-12 ) ;
9088: LD_EXP 49
9092: PPUSH
9093: LD_STRING DKam-Med-12
9095: PPUSH
9096: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9100: LD_EXP 49
9104: PPUSH
9105: LD_STRING DKam-Med-13
9107: PPUSH
9108: CALL_OW 88
// if not hasExplosionCollected then
9112: LD_EXP 23
9116: NOT
9117: IFFALSE 9131
// Say ( Heike , DH-Med-d-14 ) ;
9119: LD_EXP 45
9123: PPUSH
9124: LD_STRING DH-Med-d-14
9126: PPUSH
9127: CALL_OW 88
// end ; end ; DialogueOff ;
9131: CALL_OW 7
// adminAreaDiscovered := true ;
9135: LD_ADDR_EXP 22
9139: PUSH
9140: LD_INT 1
9142: ST_TO_ADDR
// laundryAllowed := true ;
9143: LD_ADDR_EXP 26
9147: PUSH
9148: LD_INT 1
9150: ST_TO_ADDR
// end ;
9151: PPOPN 2
9153: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9154: LD_EXP 48
9158: NOT
9159: PUSH
9160: LD_EXP 55
9164: AND
9165: PUSH
9166: LD_EXP 55
9170: PUSH
9171: LD_EXP 14
9175: IN
9176: NOT
9177: AND
9178: PUSH
9179: LD_EXP 14
9183: PPUSH
9184: LD_INT 22
9186: PUSH
9187: LD_INT 2
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PPUSH
9194: CALL_OW 72
9198: PUSH
9199: LD_INT 4
9201: GREATER
9202: AND
9203: PUSH
9204: LD_EXP 17
9208: NOT
9209: AND
9210: PUSH
9211: LD_EXP 30
9215: NOT
9216: AND
9217: IFFALSE 9934
9219: GO 9221
9221: DISABLE
9222: LD_INT 0
9224: PPUSH
9225: PPUSH
// begin DialogueOn ;
9226: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9230: LD_ADDR_VAR 0 1
9234: PUSH
9235: LD_EXP 46
9239: PPUSH
9240: CALL_OW 302
9244: PUSH
9245: LD_EXP 46
9249: PUSH
9250: LD_EXP 14
9254: IN
9255: AND
9256: PUSH
9257: LD_EXP 46
9261: PPUSH
9262: CALL_OW 255
9266: PUSH
9267: LD_INT 2
9269: EQUAL
9270: AND
9271: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9272: LD_EXP 45
9276: PPUSH
9277: LD_STRING DH-Med-a-1
9279: PPUSH
9280: CALL_OW 88
// if hasGivi then
9284: LD_VAR 0 1
9288: IFFALSE 9304
// Say ( Givi , DG-Med-a-2 ) else
9290: LD_EXP 46
9294: PPUSH
9295: LD_STRING DG-Med-a-2
9297: PPUSH
9298: CALL_OW 88
9302: GO 9409
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9304: LD_EXP 14
9308: PUSH
9309: LD_EXP 56
9313: ISECT
9314: PPUSH
9315: LD_INT 22
9317: PUSH
9318: LD_INT 2
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 26
9327: PUSH
9328: LD_INT 1
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PPUSH
9339: CALL_OW 72
9343: PUSH
9344: LD_INT 1
9346: ARRAY
9347: PPUSH
9348: LD_STRING DArm-Med-f-2
9350: PPUSH
9351: CALL_OW 88
9355: NOT
9356: IFFALSE 9409
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9358: LD_EXP 14
9362: PUSH
9363: LD_EXP 56
9367: ISECT
9368: PPUSH
9369: LD_INT 22
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 26
9381: PUSH
9382: LD_INT 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PPUSH
9393: CALL_OW 72
9397: PUSH
9398: LD_INT 1
9400: ARRAY
9401: PPUSH
9402: LD_STRING DArf-Med-f-2
9404: PPUSH
9405: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9409: LD_INT 154
9411: PPUSH
9412: LD_INT 119
9414: PPUSH
9415: LD_INT 70
9417: PPUSH
9418: CALL 19726 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9422: LD_EXP 45
9426: PPUSH
9427: LD_STRING DH-Med-a-3
9429: PPUSH
9430: CALL_OW 88
// if hasGivi then
9434: LD_VAR 0 1
9438: IFFALSE 9454
// Say ( Givi , DG-Med-a-4 ) else
9440: LD_EXP 46
9444: PPUSH
9445: LD_STRING DG-Med-a-4
9447: PPUSH
9448: CALL_OW 88
9452: GO 9559
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9454: LD_EXP 14
9458: PUSH
9459: LD_EXP 56
9463: ISECT
9464: PPUSH
9465: LD_INT 22
9467: PUSH
9468: LD_INT 2
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 26
9477: PUSH
9478: LD_INT 1
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PPUSH
9489: CALL_OW 72
9493: PUSH
9494: LD_INT 1
9496: ARRAY
9497: PPUSH
9498: LD_STRING DArm-Med-f-4
9500: PPUSH
9501: CALL_OW 88
9505: NOT
9506: IFFALSE 9559
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9508: LD_EXP 14
9512: PUSH
9513: LD_EXP 56
9517: ISECT
9518: PPUSH
9519: LD_INT 22
9521: PUSH
9522: LD_INT 2
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 26
9531: PUSH
9532: LD_INT 2
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PPUSH
9543: CALL_OW 72
9547: PUSH
9548: LD_INT 1
9550: ARRAY
9551: PPUSH
9552: LD_STRING DArf-Med-f-4
9554: PPUSH
9555: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9559: LD_ADDR_VAR 0 2
9563: PUSH
9564: LD_EXP 50
9568: PPUSH
9569: CALL_OW 302
9573: PUSH
9574: LD_EXP 50
9578: PUSH
9579: LD_EXP 14
9583: IN
9584: AND
9585: PUSH
9586: LD_EXP 50
9590: PPUSH
9591: CALL_OW 255
9595: PUSH
9596: LD_INT 2
9598: EQUAL
9599: AND
9600: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9601: LD_EXP 47
9605: PPUSH
9606: CALL_OW 302
9610: PUSH
9611: LD_EXP 47
9615: PUSH
9616: LD_EXP 14
9620: IN
9621: AND
9622: PUSH
9623: LD_EXP 47
9627: PPUSH
9628: CALL_OW 255
9632: PUSH
9633: LD_INT 2
9635: EQUAL
9636: AND
9637: IFFALSE 9669
// begin Say ( Mike , DM-Med-5 ) ;
9639: LD_EXP 47
9643: PPUSH
9644: LD_STRING DM-Med-5
9646: PPUSH
9647: CALL_OW 88
// if hasKaia then
9651: LD_VAR 0 2
9655: IFFALSE 9669
// Say ( Kaia , DK-Med-6 ) ;
9657: LD_EXP 50
9661: PPUSH
9662: LD_STRING DK-Med-6
9664: PPUSH
9665: CALL_OW 88
// end ; if hasKaia then
9669: LD_VAR 0 2
9673: IFFALSE 9914
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9675: LD_INT 175
9677: PPUSH
9678: LD_INT 123
9680: PPUSH
9681: LD_INT 2
9683: PPUSH
9684: LD_INT 8
9686: NEG
9687: PPUSH
9688: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9692: LD_INT 175
9694: PPUSH
9695: LD_INT 123
9697: PPUSH
9698: LD_INT 2
9700: PPUSH
9701: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9705: LD_INT 175
9707: PPUSH
9708: LD_INT 123
9710: PPUSH
9711: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9715: LD_EXP 50
9719: PPUSH
9720: LD_STRING DK-Med-7
9722: PPUSH
9723: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9727: LD_EXP 50
9731: PPUSH
9732: LD_STRING DK-Med-8
9734: PPUSH
9735: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9739: LD_EXP 52
9743: PPUSH
9744: CALL_OW 302
9748: PUSH
9749: LD_EXP 52
9753: PUSH
9754: LD_EXP 14
9758: IN
9759: AND
9760: PUSH
9761: LD_EXP 52
9765: PPUSH
9766: CALL_OW 255
9770: PUSH
9771: LD_INT 2
9773: EQUAL
9774: AND
9775: IFFALSE 9833
// begin Say ( Markov , DMar-Med-9 ) ;
9777: LD_EXP 52
9781: PPUSH
9782: LD_STRING DMar-Med-9
9784: PPUSH
9785: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9789: LD_EXP 50
9793: PPUSH
9794: LD_STRING DK-Med-10
9796: PPUSH
9797: CALL_OW 88
// if hasGivi then
9801: LD_VAR 0 1
9805: IFFALSE 9821
// Say ( Kaia , DK-Med-11 ) else
9807: LD_EXP 50
9811: PPUSH
9812: LD_STRING DK-Med-11
9814: PPUSH
9815: CALL_OW 88
9819: GO 9833
// Say ( Kaia , DK-Med-a-11 ) ;
9821: LD_EXP 50
9825: PPUSH
9826: LD_STRING DK-Med-a-11
9828: PPUSH
9829: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9833: LD_EXP 49
9837: PPUSH
9838: CALL_OW 302
9842: PUSH
9843: LD_EXP 49
9847: PUSH
9848: LD_EXP 14
9852: IN
9853: AND
9854: PUSH
9855: LD_EXP 49
9859: PPUSH
9860: CALL_OW 255
9864: PUSH
9865: LD_INT 2
9867: EQUAL
9868: AND
9869: IFFALSE 9914
// begin Say ( Kamil , DKam-Med-12 ) ;
9871: LD_EXP 49
9875: PPUSH
9876: LD_STRING DKam-Med-12
9878: PPUSH
9879: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9883: LD_EXP 49
9887: PPUSH
9888: LD_STRING DKam-Med-13
9890: PPUSH
9891: CALL_OW 88
// if not hasExplosionCollected then
9895: LD_EXP 23
9899: NOT
9900: IFFALSE 9914
// Say ( Heike , DH-Med-d-14 ) ;
9902: LD_EXP 45
9906: PPUSH
9907: LD_STRING DH-Med-d-14
9909: PPUSH
9910: CALL_OW 88
// end ; end ; DialogueOff ;
9914: CALL_OW 7
// adminAreaDiscovered := true ;
9918: LD_ADDR_EXP 22
9922: PUSH
9923: LD_INT 1
9925: ST_TO_ADDR
// laundryAllowed := true ;
9926: LD_ADDR_EXP 26
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// end ;
9934: PPOPN 2
9936: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9937: LD_EXP 48
9941: PUSH
9942: LD_EXP 55
9946: NOT
9947: AND
9948: PUSH
9949: LD_EXP 48
9953: PUSH
9954: LD_EXP 14
9958: IN
9959: NOT
9960: AND
9961: PUSH
9962: LD_EXP 14
9966: PPUSH
9967: LD_INT 22
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PPUSH
9977: CALL_OW 72
9981: PUSH
9982: LD_INT 4
9984: GREATER
9985: AND
9986: PUSH
9987: LD_EXP 17
9991: NOT
9992: AND
9993: PUSH
9994: LD_EXP 30
9998: NOT
9999: AND
10000: IFFALSE 10717
10002: GO 10004
10004: DISABLE
10005: LD_INT 0
10007: PPUSH
10008: PPUSH
// begin DialogueOn ;
10009: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
10013: LD_ADDR_VAR 0 1
10017: PUSH
10018: LD_EXP 46
10022: PPUSH
10023: CALL_OW 302
10027: PUSH
10028: LD_EXP 46
10032: PUSH
10033: LD_EXP 14
10037: IN
10038: AND
10039: PUSH
10040: LD_EXP 46
10044: PPUSH
10045: CALL_OW 255
10049: PUSH
10050: LD_INT 2
10052: EQUAL
10053: AND
10054: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10055: LD_EXP 45
10059: PPUSH
10060: LD_STRING DH-Med-b-1
10062: PPUSH
10063: CALL_OW 88
// if hasGivi then
10067: LD_VAR 0 1
10071: IFFALSE 10087
// Say ( Givi , DG-Med-a-2 ) else
10073: LD_EXP 46
10077: PPUSH
10078: LD_STRING DG-Med-a-2
10080: PPUSH
10081: CALL_OW 88
10085: GO 10192
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10087: LD_EXP 14
10091: PUSH
10092: LD_EXP 56
10096: ISECT
10097: PPUSH
10098: LD_INT 22
10100: PUSH
10101: LD_INT 2
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 26
10110: PUSH
10111: LD_INT 1
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PPUSH
10122: CALL_OW 72
10126: PUSH
10127: LD_INT 1
10129: ARRAY
10130: PPUSH
10131: LD_STRING DArm-Med-f-2
10133: PPUSH
10134: CALL_OW 88
10138: NOT
10139: IFFALSE 10192
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10141: LD_EXP 14
10145: PUSH
10146: LD_EXP 56
10150: ISECT
10151: PPUSH
10152: LD_INT 22
10154: PUSH
10155: LD_INT 2
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 26
10164: PUSH
10165: LD_INT 2
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PPUSH
10176: CALL_OW 72
10180: PUSH
10181: LD_INT 1
10183: ARRAY
10184: PPUSH
10185: LD_STRING DArf-Med-f-2
10187: PPUSH
10188: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10192: LD_INT 154
10194: PPUSH
10195: LD_INT 119
10197: PPUSH
10198: LD_INT 70
10200: PPUSH
10201: CALL 19726 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10205: LD_EXP 45
10209: PPUSH
10210: LD_STRING DH-Med-a-3
10212: PPUSH
10213: CALL_OW 88
// if hasGivi then
10217: LD_VAR 0 1
10221: IFFALSE 10237
// Say ( Givi , DG-Med-a-4 ) else
10223: LD_EXP 46
10227: PPUSH
10228: LD_STRING DG-Med-a-4
10230: PPUSH
10231: CALL_OW 88
10235: GO 10342
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10237: LD_EXP 14
10241: PUSH
10242: LD_EXP 56
10246: ISECT
10247: PPUSH
10248: LD_INT 22
10250: PUSH
10251: LD_INT 2
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 26
10260: PUSH
10261: LD_INT 1
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PPUSH
10272: CALL_OW 72
10276: PUSH
10277: LD_INT 1
10279: ARRAY
10280: PPUSH
10281: LD_STRING DArm-Med-f-4
10283: PPUSH
10284: CALL_OW 88
10288: NOT
10289: IFFALSE 10342
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10291: LD_EXP 14
10295: PUSH
10296: LD_EXP 56
10300: ISECT
10301: PPUSH
10302: LD_INT 22
10304: PUSH
10305: LD_INT 2
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 26
10314: PUSH
10315: LD_INT 2
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PPUSH
10326: CALL_OW 72
10330: PUSH
10331: LD_INT 1
10333: ARRAY
10334: PPUSH
10335: LD_STRING DArf-Med-f-4
10337: PPUSH
10338: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10342: LD_ADDR_VAR 0 2
10346: PUSH
10347: LD_EXP 50
10351: PPUSH
10352: CALL_OW 302
10356: PUSH
10357: LD_EXP 50
10361: PUSH
10362: LD_EXP 14
10366: IN
10367: AND
10368: PUSH
10369: LD_EXP 50
10373: PPUSH
10374: CALL_OW 255
10378: PUSH
10379: LD_INT 2
10381: EQUAL
10382: AND
10383: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10384: LD_EXP 47
10388: PPUSH
10389: CALL_OW 302
10393: PUSH
10394: LD_EXP 47
10398: PUSH
10399: LD_EXP 14
10403: IN
10404: AND
10405: PUSH
10406: LD_EXP 47
10410: PPUSH
10411: CALL_OW 255
10415: PUSH
10416: LD_INT 2
10418: EQUAL
10419: AND
10420: IFFALSE 10452
// begin Say ( Mike , DM-Med-5 ) ;
10422: LD_EXP 47
10426: PPUSH
10427: LD_STRING DM-Med-5
10429: PPUSH
10430: CALL_OW 88
// if hasKaia then
10434: LD_VAR 0 2
10438: IFFALSE 10452
// Say ( Kaia , DK-Med-6 ) ;
10440: LD_EXP 50
10444: PPUSH
10445: LD_STRING DK-Med-6
10447: PPUSH
10448: CALL_OW 88
// end ; if hasKaia then
10452: LD_VAR 0 2
10456: IFFALSE 10697
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10458: LD_INT 175
10460: PPUSH
10461: LD_INT 123
10463: PPUSH
10464: LD_INT 2
10466: PPUSH
10467: LD_INT 8
10469: NEG
10470: PPUSH
10471: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10475: LD_INT 175
10477: PPUSH
10478: LD_INT 123
10480: PPUSH
10481: LD_INT 2
10483: PPUSH
10484: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10488: LD_INT 175
10490: PPUSH
10491: LD_INT 123
10493: PPUSH
10494: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10498: LD_EXP 50
10502: PPUSH
10503: LD_STRING DK-Med-7
10505: PPUSH
10506: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10510: LD_EXP 50
10514: PPUSH
10515: LD_STRING DK-Med-8
10517: PPUSH
10518: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10522: LD_EXP 52
10526: PPUSH
10527: CALL_OW 302
10531: PUSH
10532: LD_EXP 52
10536: PUSH
10537: LD_EXP 14
10541: IN
10542: AND
10543: PUSH
10544: LD_EXP 52
10548: PPUSH
10549: CALL_OW 255
10553: PUSH
10554: LD_INT 2
10556: EQUAL
10557: AND
10558: IFFALSE 10616
// begin Say ( Markov , DMar-Med-9 ) ;
10560: LD_EXP 52
10564: PPUSH
10565: LD_STRING DMar-Med-9
10567: PPUSH
10568: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10572: LD_EXP 50
10576: PPUSH
10577: LD_STRING DK-Med-10
10579: PPUSH
10580: CALL_OW 88
// if hasGivi then
10584: LD_VAR 0 1
10588: IFFALSE 10604
// Say ( Kaia , DK-Med-11 ) else
10590: LD_EXP 50
10594: PPUSH
10595: LD_STRING DK-Med-11
10597: PPUSH
10598: CALL_OW 88
10602: GO 10616
// Say ( Kaia , DK-Med-a-11 ) ;
10604: LD_EXP 50
10608: PPUSH
10609: LD_STRING DK-Med-a-11
10611: PPUSH
10612: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10616: LD_EXP 49
10620: PPUSH
10621: CALL_OW 302
10625: PUSH
10626: LD_EXP 49
10630: PUSH
10631: LD_EXP 14
10635: IN
10636: AND
10637: PUSH
10638: LD_EXP 49
10642: PPUSH
10643: CALL_OW 255
10647: PUSH
10648: LD_INT 2
10650: EQUAL
10651: AND
10652: IFFALSE 10697
// begin Say ( Kamil , DKam-Med-12 ) ;
10654: LD_EXP 49
10658: PPUSH
10659: LD_STRING DKam-Med-12
10661: PPUSH
10662: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10666: LD_EXP 49
10670: PPUSH
10671: LD_STRING DKam-Med-13
10673: PPUSH
10674: CALL_OW 88
// if not hasExplosionCollected then
10678: LD_EXP 23
10682: NOT
10683: IFFALSE 10697
// Say ( Heike , DH-Med-d-14 ) ;
10685: LD_EXP 45
10689: PPUSH
10690: LD_STRING DH-Med-d-14
10692: PPUSH
10693: CALL_OW 88
// end ; end ; DialogueOff ;
10697: CALL_OW 7
// adminAreaDiscovered := true ;
10701: LD_ADDR_EXP 22
10705: PUSH
10706: LD_INT 1
10708: ST_TO_ADDR
// laundryAllowed := true ;
10709: LD_ADDR_EXP 26
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// end ;
10717: PPOPN 2
10719: END
// every 0 0$1 trigger laundryAllowed do
10720: LD_EXP 26
10724: IFFALSE 10736
10726: GO 10728
10728: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10729: LD_STRING M1-laundry
10731: PPUSH
10732: CALL_OW 337
10736: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10737: LD_EXP 48
10741: NOT
10742: PUSH
10743: LD_EXP 55
10747: NOT
10748: AND
10749: PUSH
10750: LD_EXP 53
10754: PPUSH
10755: CALL_OW 302
10759: AND
10760: PUSH
10761: LD_EXP 53
10765: PUSH
10766: LD_EXP 14
10770: IN
10771: AND
10772: PUSH
10773: LD_EXP 53
10777: PPUSH
10778: CALL_OW 255
10782: PUSH
10783: LD_INT 2
10785: EQUAL
10786: AND
10787: PUSH
10788: LD_EXP 17
10792: NOT
10793: AND
10794: PUSH
10795: LD_EXP 30
10799: NOT
10800: AND
10801: IFFALSE 10957
10803: GO 10805
10805: DISABLE
// begin DialogueOn ;
10806: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10810: LD_INT 152
10812: PPUSH
10813: LD_INT 115
10815: PPUSH
10816: LD_INT 2
10818: PPUSH
10819: LD_INT 16
10821: NEG
10822: PPUSH
10823: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10827: LD_INT 152
10829: PPUSH
10830: LD_INT 115
10832: PPUSH
10833: LD_INT 2
10835: PPUSH
10836: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10840: LD_INT 152
10842: PPUSH
10843: LD_INT 115
10845: PPUSH
10846: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10850: LD_EXP 53
10854: PPUSH
10855: LD_STRING DO-Med-c-1
10857: PPUSH
10858: CALL_OW 88
// if not hasExplosionCollected then
10862: LD_EXP 23
10866: NOT
10867: IFFALSE 10883
// Say ( Heike , DH-Med-d-14 ) else
10869: LD_EXP 45
10873: PPUSH
10874: LD_STRING DH-Med-d-14
10876: PPUSH
10877: CALL_OW 88
10881: GO 10945
// begin Say ( Heike , DH-Med-c-2 ) ;
10883: LD_EXP 45
10887: PPUSH
10888: LD_STRING DH-Med-c-2
10890: PPUSH
10891: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10895: LD_EXP 50
10899: PPUSH
10900: CALL_OW 302
10904: PUSH
10905: LD_EXP 50
10909: PUSH
10910: LD_EXP 14
10914: IN
10915: AND
10916: PUSH
10917: LD_EXP 50
10921: PPUSH
10922: CALL_OW 255
10926: PUSH
10927: LD_INT 2
10929: EQUAL
10930: AND
10931: IFFALSE 10945
// Say ( Kaia , DK-Med-c-3 ) ;
10933: LD_EXP 50
10937: PPUSH
10938: LD_STRING DK-Med-c-3
10940: PPUSH
10941: CALL_OW 88
// end ; DialogueOff ;
10945: CALL_OW 7
// adminAreaDiscovered := true ;
10949: LD_ADDR_EXP 22
10953: PUSH
10954: LD_INT 1
10956: ST_TO_ADDR
// end ;
10957: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10958: LD_EXP 50
10962: PPUSH
10963: CALL_OW 256
10967: PUSH
10968: LD_INT 250
10970: LESS
10971: PUSH
10972: LD_EXP 50
10976: PUSH
10977: LD_EXP 14
10981: IN
10982: AND
10983: PUSH
10984: LD_EXP 17
10988: AND
10989: PUSH
10990: LD_EXP 24
10994: AND
10995: IFFALSE 11124
10997: GO 10999
10999: DISABLE
// begin DialogueOn ;
11000: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
11004: LD_EXP 50
11008: PPUSH
11009: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
11013: LD_EXP 50
11017: PPUSH
11018: LD_STRING DK-death-1
11020: PPUSH
11021: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
11025: LD_EXP 45
11029: PPUSH
11030: LD_STRING DH-death-2
11032: PPUSH
11033: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11037: LD_EXP 50
11041: PPUSH
11042: LD_STRING DK-death-3
11044: PPUSH
11045: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11049: LD_EXP 50
11053: PPUSH
11054: LD_STRING DK-death-4
11056: PPUSH
11057: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11061: LD_EXP 50
11065: PPUSH
11066: LD_INT 8
11068: PPUSH
11069: CALL_OW 235
// ComStop ( Kaia ) ;
11073: LD_EXP 50
11077: PPUSH
11078: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11082: LD_INT 8
11084: PPUSH
11085: LD_INT 2
11087: PPUSH
11088: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11092: LD_ADDR_EXP 14
11096: PUSH
11097: LD_EXP 14
11101: PUSH
11102: LD_EXP 50
11106: DIFF
11107: ST_TO_ADDR
// DialogueOff ;
11108: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11112: LD_EXP 47
11116: PPUSH
11117: LD_STRING DM-death-5
11119: PPUSH
11120: CALL_OW 88
// end ;
11124: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11125: LD_EXP 25
11129: NOT
11130: PUSH
11131: LD_EXP 30
11135: NOT
11136: AND
11137: PUSH
11138: LD_EXP 58
11142: PUSH
11143: LD_EXP 14
11147: IN
11148: NOT
11149: AND
11150: PUSH
11151: LD_INT 2
11153: PPUSH
11154: LD_EXP 58
11158: PPUSH
11159: CALL_OW 292
11163: AND
11164: PUSH
11165: LD_EXP 45
11169: PPUSH
11170: LD_EXP 58
11174: PPUSH
11175: CALL_OW 296
11179: PUSH
11180: LD_INT 6
11182: LESS
11183: AND
11184: PUSH
11185: LD_EXP 17
11189: NOT
11190: AND
11191: IFFALSE 11415
11193: GO 11195
11195: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11196: LD_EXP 58
11200: PPUSH
11201: LD_EXP 45
11205: PPUSH
11206: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11210: LD_EXP 45
11214: PPUSH
11215: LD_EXP 58
11219: PPUSH
11220: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11224: LD_INT 10
11226: PPUSH
11227: CALL_OW 67
// DialogueOn ;
11231: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11235: LD_EXP 58
11239: PPUSH
11240: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11244: LD_EXP 45
11248: PPUSH
11249: LD_STRING DH-Deal-1
11251: PPUSH
11252: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11256: LD_EXP 58
11260: PPUSH
11261: LD_STRING DJ-Deal-2
11263: PPUSH
11264: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11268: LD_EXP 45
11272: PPUSH
11273: LD_STRING DH-Deal-3
11275: PPUSH
11276: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11280: LD_EXP 58
11284: PPUSH
11285: LD_STRING DJ-Deal-4
11287: PPUSH
11288: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11292: LD_EXP 58
11296: PPUSH
11297: LD_STRING DJ-Deal-5
11299: PPUSH
11300: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11304: LD_EXP 58
11308: PPUSH
11309: LD_STRING DJ-Deal-6
11311: PPUSH
11312: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11316: LD_EXP 58
11320: PPUSH
11321: LD_STRING DJ-Deal-7
11323: PPUSH
11324: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11328: LD_EXP 45
11332: PPUSH
11333: LD_STRING DH-Deal-8
11335: PPUSH
11336: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11340: LD_EXP 45
11344: PPUSH
11345: LD_STRING DH-Deal-9
11347: PPUSH
11348: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11352: LD_EXP 58
11356: PPUSH
11357: LD_STRING DJ-Deal-10
11359: PPUSH
11360: CALL_OW 88
// DialogueOff ;
11364: CALL_OW 7
// contactWithAmerican := true ;
11368: LD_ADDR_EXP 25
11372: PUSH
11373: LD_INT 1
11375: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11376: LD_STRING M1-american-out
11378: PPUSH
11379: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11383: LD_EXP 58
11387: PPUSH
11388: LD_INT 2
11390: PPUSH
11391: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11395: LD_ADDR_EXP 14
11399: PUSH
11400: LD_EXP 14
11404: PPUSH
11405: LD_EXP 58
11409: PPUSH
11410: CALL 66653 0 2
11414: ST_TO_ADDR
// end ;
11415: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11416: LD_EXP 25
11420: PUSH
11421: LD_EXP 30
11425: NOT
11426: AND
11427: PUSH
11428: LD_EXP 58
11432: PUSH
11433: LD_EXP 14
11437: IN
11438: NOT
11439: AND
11440: PUSH
11441: LD_INT 2
11443: PPUSH
11444: LD_EXP 58
11448: PPUSH
11449: CALL_OW 292
11453: AND
11454: PUSH
11455: LD_EXP 45
11459: PPUSH
11460: LD_EXP 58
11464: PPUSH
11465: CALL_OW 296
11469: PUSH
11470: LD_INT 6
11472: LESS
11473: AND
11474: PUSH
11475: LD_EXP 17
11479: NOT
11480: AND
11481: IFFALSE 11606
11483: GO 11485
11485: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11486: LD_EXP 58
11490: PPUSH
11491: LD_EXP 45
11495: PPUSH
11496: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11500: LD_EXP 45
11504: PPUSH
11505: LD_EXP 58
11509: PPUSH
11510: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11514: LD_INT 10
11516: PPUSH
11517: CALL_OW 67
// DialogueOn ;
11521: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11525: LD_EXP 58
11529: PPUSH
11530: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11534: LD_EXP 58
11538: PPUSH
11539: LD_STRING DJ-Escort-1
11541: PPUSH
11542: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11546: LD_EXP 45
11550: PPUSH
11551: LD_STRING DH-Escort-2
11553: PPUSH
11554: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11558: LD_EXP 58
11562: PPUSH
11563: LD_STRING DJ-Escort-3
11565: PPUSH
11566: CALL_OW 88
// DialogueOff ;
11570: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11574: LD_EXP 58
11578: PPUSH
11579: LD_INT 2
11581: PPUSH
11582: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11586: LD_ADDR_EXP 14
11590: PUSH
11591: LD_EXP 14
11595: PPUSH
11596: LD_EXP 58
11600: PPUSH
11601: CALL 66653 0 2
11605: ST_TO_ADDR
// end ;
11606: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11607: LD_EXP 25
11611: PUSH
11612: LD_EXP 30
11616: NOT
11617: AND
11618: PUSH
11619: LD_EXP 57
11623: PUSH
11624: LD_EXP 14
11628: DIFF
11629: PPUSH
11630: LD_INT 22
11632: PUSH
11633: LD_INT 4
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 3
11642: PUSH
11643: LD_INT 120
11645: PUSH
11646: LD_INT 1
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 101
11659: PUSH
11660: LD_INT 2
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: PPUSH
11672: CALL_OW 72
11676: AND
11677: PUSH
11678: LD_EXP 17
11682: NOT
11683: AND
11684: IFFALSE 11911
11686: GO 11688
11688: DISABLE
11689: LD_INT 0
11691: PPUSH
// begin enable ;
11692: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11693: LD_ADDR_VAR 0 1
11697: PUSH
11698: LD_EXP 57
11702: PUSH
11703: LD_EXP 14
11707: DIFF
11708: PPUSH
11709: LD_INT 22
11711: PUSH
11712: LD_INT 4
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 91
11721: PUSH
11722: LD_EXP 45
11726: PUSH
11727: LD_INT 6
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 101
11737: PUSH
11738: LD_INT 2
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: PPUSH
11750: CALL_OW 72
11754: PPUSH
11755: LD_EXP 45
11759: PPUSH
11760: CALL_OW 74
11764: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11765: LD_VAR 0 1
11769: PPUSH
11770: LD_EXP 45
11774: PPUSH
11775: CALL_OW 296
11779: PUSH
11780: LD_INT 6
11782: LESS
11783: IFFALSE 11911
// begin DialogueOn ;
11785: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11789: LD_VAR 0 1
11793: PPUSH
11794: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11798: LD_EXP 45
11802: PPUSH
11803: LD_STRING DH-USsol-1
11805: PPUSH
11806: CALL_OW 88
// if un <> Jerry then
11810: LD_VAR 0 1
11814: PUSH
11815: LD_EXP 60
11819: NONEQUAL
11820: IFFALSE 11863
// if GetSex ( un ) = sex_male then
11822: LD_VAR 0 1
11826: PPUSH
11827: CALL_OW 258
11831: PUSH
11832: LD_INT 1
11834: EQUAL
11835: IFFALSE 11851
// Say ( un , DUSM-USsol-2 ) else
11837: LD_VAR 0 1
11841: PPUSH
11842: LD_STRING DUSM-USsol-2
11844: PPUSH
11845: CALL_OW 88
11849: GO 11863
// Say ( un , DUSF-USsol-2 ) ;
11851: LD_VAR 0 1
11855: PPUSH
11856: LD_STRING DUSF-USsol-2
11858: PPUSH
11859: CALL_OW 88
// DialogueOff ;
11863: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11867: LD_ADDR_EXP 14
11871: PUSH
11872: LD_EXP 14
11876: PPUSH
11877: LD_VAR 0 1
11881: PPUSH
11882: CALL 66653 0 2
11886: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11887: LD_VAR 0 1
11891: PPUSH
11892: LD_INT 1
11894: PPUSH
11895: CALL_OW 109
// SetSide ( un , 2 ) ;
11899: LD_VAR 0 1
11903: PPUSH
11904: LD_INT 2
11906: PPUSH
11907: CALL_OW 235
// end ; end ;
11911: PPOPN 1
11913: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11914: LD_EXP 56
11918: PUSH
11919: LD_EXP 30
11923: NOT
11924: AND
11925: PUSH
11926: LD_EXP 56
11930: PUSH
11931: LD_EXP 14
11935: DIFF
11936: PPUSH
11937: LD_INT 3
11939: PUSH
11940: LD_INT 120
11942: PUSH
11943: LD_INT 1
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 91
11956: PUSH
11957: LD_EXP 45
11961: PUSH
11962: LD_INT 6
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 101
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: PPUSH
11985: CALL_OW 72
11989: AND
11990: PUSH
11991: LD_EXP 17
11995: NOT
11996: AND
11997: IFFALSE 12212
11999: GO 12001
12001: DISABLE
12002: LD_INT 0
12004: PPUSH
// begin enable ;
12005: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
12006: LD_ADDR_VAR 0 1
12010: PUSH
12011: LD_EXP 56
12015: PUSH
12016: LD_EXP 14
12020: DIFF
12021: PPUSH
12022: LD_INT 22
12024: PUSH
12025: LD_INT 5
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 91
12034: PUSH
12035: LD_EXP 45
12039: PUSH
12040: LD_INT 6
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 101
12050: PUSH
12051: LD_INT 2
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: PPUSH
12063: CALL_OW 72
12067: PPUSH
12068: LD_EXP 45
12072: PPUSH
12073: CALL_OW 74
12077: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12078: LD_VAR 0 1
12082: PPUSH
12083: LD_EXP 45
12087: PPUSH
12088: CALL_OW 296
12092: PUSH
12093: LD_INT 6
12095: LESS
12096: IFFALSE 12212
// begin DialogueOn ;
12098: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12102: LD_VAR 0 1
12106: PPUSH
12107: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12111: LD_EXP 45
12115: PPUSH
12116: LD_STRING DH-USsol-1
12118: PPUSH
12119: CALL_OW 88
// if GetSex ( un ) = sex_male then
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 258
12132: PUSH
12133: LD_INT 1
12135: EQUAL
12136: IFFALSE 12152
// Say ( un , DArm-USsol-2 ) else
12138: LD_VAR 0 1
12142: PPUSH
12143: LD_STRING DArm-USsol-2
12145: PPUSH
12146: CALL_OW 88
12150: GO 12164
// Say ( un , DArf-USsol-3 ) ;
12152: LD_VAR 0 1
12156: PPUSH
12157: LD_STRING DArf-USsol-3
12159: PPUSH
12160: CALL_OW 88
// DialogueOff ;
12164: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12168: LD_ADDR_EXP 14
12172: PUSH
12173: LD_EXP 14
12177: PPUSH
12178: LD_VAR 0 1
12182: PPUSH
12183: CALL 66653 0 2
12187: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12188: LD_VAR 0 1
12192: PPUSH
12193: LD_INT 1
12195: PPUSH
12196: CALL_OW 109
// SetSide ( un , 2 ) ;
12200: LD_VAR 0 1
12204: PPUSH
12205: LD_INT 2
12207: PPUSH
12208: CALL_OW 235
// end ; end ;
12212: PPOPN 1
12214: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12215: LD_EXP 57
12219: PPUSH
12220: LD_INT 101
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PPUSH
12230: CALL_OW 72
12234: PUSH
12235: LD_EXP 14
12239: PPUSH
12240: LD_INT 22
12242: PUSH
12243: LD_INT 2
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 72
12254: PUSH
12255: LD_INT 5
12257: GREATER
12258: AND
12259: PUSH
12260: LD_EXP 10
12264: NOT
12265: AND
12266: PUSH
12267: LD_EXP 30
12271: NOT
12272: AND
12273: PUSH
12274: LD_EXP 25
12278: NOT
12279: AND
12280: PUSH
12281: LD_EXP 17
12285: NOT
12286: AND
12287: IFFALSE 12402
12289: GO 12291
12291: DISABLE
12292: LD_INT 0
12294: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12295: LD_ADDR_VAR 0 1
12299: PUSH
12300: LD_EXP 57
12304: PPUSH
12305: LD_INT 22
12307: PUSH
12308: LD_INT 4
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: LD_INT 101
12317: PUSH
12318: LD_INT 2
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PPUSH
12329: CALL_OW 72
12333: PUSH
12334: LD_INT 1
12336: ARRAY
12337: ST_TO_ADDR
// DialogueOn ;
12338: CALL_OW 6
// if GetSex ( un ) = sex_male then
12342: LD_VAR 0 1
12346: PPUSH
12347: CALL_OW 258
12351: PUSH
12352: LD_INT 1
12354: EQUAL
12355: IFFALSE 12371
// Say ( un , DUSm-USsol-a-2 ) else
12357: LD_VAR 0 1
12361: PPUSH
12362: LD_STRING DUSm-USsol-a-2
12364: PPUSH
12365: CALL_OW 88
12369: GO 12383
// Say ( un , DUSf-USsol-a-2 ) ;
12371: LD_VAR 0 1
12375: PPUSH
12376: LD_STRING DUSf-USsol-a-2
12378: PPUSH
12379: CALL_OW 88
// DialogueOff ;
12383: CALL_OW 7
// wait ( 0 0$2 ) ;
12387: LD_INT 70
12389: PPUSH
12390: CALL_OW 67
// isAlarm := true ;
12394: LD_ADDR_EXP 17
12398: PUSH
12399: LD_INT 1
12401: ST_TO_ADDR
// end ;
12402: PPOPN 1
12404: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12405: LD_EXP 17
12409: NOT
12410: PUSH
12411: LD_EXP 46
12415: PPUSH
12416: CALL_OW 302
12420: AND
12421: PUSH
12422: LD_EXP 46
12426: PPUSH
12427: CALL_OW 255
12431: PUSH
12432: LD_INT 2
12434: EQUAL
12435: AND
12436: PUSH
12437: LD_EXP 26
12441: AND
12442: PUSH
12443: LD_EXP 28
12447: NOT
12448: AND
12449: PUSH
12450: LD_EXP 27
12454: NOT
12455: AND
12456: PUSH
12457: LD_EXP 30
12461: NOT
12462: AND
12463: PUSH
12464: LD_EXP 46
12468: PPUSH
12469: LD_INT 165
12471: PPUSH
12472: CALL 20039 0 2
12476: AND
12477: IFFALSE 12609
12479: GO 12481
12481: DISABLE
// begin enable ;
12482: ENABLE
// InGameOn ;
12483: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12487: LD_EXP 46
12491: PPUSH
12492: LD_INT 5
12494: PPUSH
12495: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12499: LD_INT 165
12501: PPUSH
12502: LD_INT 5
12504: PPUSH
12505: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12509: LD_EXP 46
12513: PPUSH
12514: LD_INT 165
12516: PPUSH
12517: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12521: LD_INT 35
12523: PPUSH
12524: CALL_OW 67
// until IsInUnit ( Givi ) ;
12528: LD_EXP 46
12532: PPUSH
12533: CALL_OW 310
12537: IFFALSE 12521
// case Query ( GiviInLaundry ) of 1 :
12539: LD_STRING GiviInLaundry
12541: PPUSH
12542: CALL_OW 97
12546: PUSH
12547: LD_INT 1
12549: DOUBLE
12550: EQUAL
12551: IFTRUE 12555
12553: GO 12562
12555: POP
// SpawnGiviAsRussian ; 2 :
12556: CALL 1910 0 0
12560: GO 12574
12562: LD_INT 2
12564: DOUBLE
12565: EQUAL
12566: IFTRUE 12570
12568: GO 12573
12570: POP
// ; end ;
12571: GO 12574
12573: POP
// ComExitBuilding ( Givi ) ;
12574: LD_EXP 46
12578: PPUSH
12579: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12583: LD_EXP 46
12587: PPUSH
12588: LD_INT 2
12590: PPUSH
12591: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12595: LD_INT 165
12597: PPUSH
12598: LD_INT 3
12600: PPUSH
12601: CALL_OW 235
// InGameOff ;
12605: CALL_OW 9
// end ;
12609: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12610: LD_EXP 17
12614: NOT
12615: PUSH
12616: LD_EXP 28
12620: AND
12621: PUSH
12622: LD_EXP 46
12626: PPUSH
12627: CALL_OW 255
12631: PUSH
12632: LD_INT 2
12634: EQUAL
12635: AND
12636: PUSH
12637: LD_EXP 46
12641: PPUSH
12642: CALL_OW 248
12646: PUSH
12647: LD_INT 3
12649: EQUAL
12650: AND
12651: PUSH
12652: LD_EXP 46
12656: PPUSH
12657: LD_INT 119
12659: PPUSH
12660: CALL 20039 0 2
12664: AND
12665: PUSH
12666: LD_EXP 30
12670: NOT
12671: AND
12672: IFFALSE 12926
12674: GO 12676
12676: DISABLE
// begin InGameOn ;
12677: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12681: LD_EXP 46
12685: PPUSH
12686: LD_INT 3
12688: PPUSH
12689: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12693: LD_INT 10
12695: PPUSH
12696: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12700: LD_EXP 46
12704: PPUSH
12705: LD_INT 119
12707: PPUSH
12708: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12712: LD_INT 35
12714: PPUSH
12715: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12719: LD_EXP 46
12723: PPUSH
12724: LD_INT 119
12726: PPUSH
12727: CALL_OW 120
// until IsInUnit ( Givi ) ;
12731: LD_EXP 46
12735: PPUSH
12736: CALL_OW 310
12740: IFFALSE 12712
// DialogueOn ;
12742: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12746: LD_EXP 46
12750: PPUSH
12751: LD_STRING DG-Captive-1
12753: PPUSH
12754: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12758: LD_EXP 64
12762: PPUSH
12763: LD_STRING DCom-Captive-2
12765: PPUSH
12766: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12770: LD_EXP 46
12774: PPUSH
12775: LD_STRING DG-Captive-3
12777: PPUSH
12778: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12782: LD_EXP 64
12786: PPUSH
12787: LD_STRING DCom-Captive-4
12789: PPUSH
12790: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12794: LD_EXP 64
12798: PPUSH
12799: CALL_OW 64
// DialogueOff ;
12803: CALL_OW 7
// InGameOff ;
12807: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12811: LD_EXP 46
12815: PPUSH
12816: LD_INT 2
12818: PPUSH
12819: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12823: LD_EXP 46
12827: PPUSH
12828: CALL_OW 122
// if Aviradze then
12832: LD_EXP 55
12836: IFFALSE 12879
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12838: LD_ADDR_EXP 14
12842: PUSH
12843: LD_EXP 14
12847: PPUSH
12848: LD_EXP 55
12852: PPUSH
12853: CALL 66653 0 2
12857: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12858: LD_EXP 55
12862: PPUSH
12863: LD_INT 2
12865: PPUSH
12866: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12870: LD_EXP 55
12874: PPUSH
12875: CALL_OW 122
// end ; if Ibrahim then
12879: LD_EXP 48
12883: IFFALSE 12926
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12885: LD_ADDR_EXP 14
12889: PUSH
12890: LD_EXP 14
12894: PPUSH
12895: LD_EXP 48
12899: PPUSH
12900: CALL 66653 0 2
12904: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12905: LD_EXP 48
12909: PPUSH
12910: LD_INT 2
12912: PPUSH
12913: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12917: LD_EXP 48
12921: PPUSH
12922: CALL_OW 122
// end ; end ;
12926: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12927: LD_EXP 17
12931: NOT
12932: PUSH
12933: LD_EXP 27
12937: AND
12938: PUSH
12939: LD_EXP 45
12943: PPUSH
12944: CALL_OW 248
12948: PUSH
12949: LD_INT 3
12951: EQUAL
12952: AND
12953: PUSH
12954: LD_EXP 45
12958: PPUSH
12959: LD_INT 119
12961: PPUSH
12962: CALL 20039 0 2
12966: AND
12967: PUSH
12968: LD_EXP 30
12972: NOT
12973: AND
12974: IFFALSE 13273
12976: GO 12978
12978: DISABLE
// begin InGameOn ;
12979: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12983: LD_EXP 45
12987: PPUSH
12988: LD_INT 3
12990: PPUSH
12991: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12995: LD_INT 10
12997: PPUSH
12998: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13002: LD_EXP 45
13006: PPUSH
13007: LD_INT 119
13009: PPUSH
13010: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13014: LD_INT 35
13016: PPUSH
13017: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13021: LD_EXP 45
13025: PPUSH
13026: LD_INT 119
13028: PPUSH
13029: CALL_OW 120
// until IsInUnit ( Heike ) ;
13033: LD_EXP 45
13037: PPUSH
13038: CALL_OW 310
13042: IFFALSE 13014
// wait ( 0 0$1 ) ;
13044: LD_INT 35
13046: PPUSH
13047: CALL_OW 67
// DialogueOn ;
13051: CALL_OW 6
// if Aviradze and Ibrahim then
13055: LD_EXP 55
13059: PUSH
13060: LD_EXP 48
13064: AND
13065: IFFALSE 13081
// Say ( Heike , DH-Captive-a-1 ) else
13067: LD_EXP 45
13071: PPUSH
13072: LD_STRING DH-Captive-a-1
13074: PPUSH
13075: CALL_OW 88
13079: GO 13093
// Say ( Heike , DH-Captive-a-b-1 ) ;
13081: LD_EXP 45
13085: PPUSH
13086: LD_STRING DH-Captive-a-b-1
13088: PPUSH
13089: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13093: LD_EXP 64
13097: PPUSH
13098: LD_STRING DCom-Captive-a-2
13100: PPUSH
13101: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13105: LD_EXP 45
13109: PPUSH
13110: LD_STRING DH-Captive-a-3
13112: PPUSH
13113: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13117: LD_EXP 64
13121: PPUSH
13122: LD_STRING DCom-Captive-a-4
13124: PPUSH
13125: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13129: LD_EXP 45
13133: PPUSH
13134: LD_STRING DH-Captive-a-5
13136: PPUSH
13137: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13141: LD_EXP 64
13145: PPUSH
13146: CALL_OW 64
// DialogueOff ;
13150: CALL_OW 7
// InGameOff ;
13154: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13158: LD_EXP 45
13162: PPUSH
13163: LD_INT 2
13165: PPUSH
13166: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13170: LD_EXP 45
13174: PPUSH
13175: CALL_OW 122
// if Aviradze then
13179: LD_EXP 55
13183: IFFALSE 13226
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13185: LD_ADDR_EXP 14
13189: PUSH
13190: LD_EXP 14
13194: PPUSH
13195: LD_EXP 55
13199: PPUSH
13200: CALL 66653 0 2
13204: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13205: LD_EXP 55
13209: PPUSH
13210: LD_INT 2
13212: PPUSH
13213: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13217: LD_EXP 55
13221: PPUSH
13222: CALL_OW 122
// end ; if Ibrahim then
13226: LD_EXP 48
13230: IFFALSE 13273
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13232: LD_ADDR_EXP 14
13236: PUSH
13237: LD_EXP 14
13241: PPUSH
13242: LD_EXP 48
13246: PPUSH
13247: CALL 66653 0 2
13251: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13252: LD_EXP 48
13256: PPUSH
13257: LD_INT 2
13259: PPUSH
13260: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13264: LD_EXP 48
13268: PPUSH
13269: CALL_OW 122
// end ; end ;
13273: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13274: LD_INT 2
13276: PUSH
13277: LD_INT 25
13279: PUSH
13280: LD_INT 32
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 25
13289: PUSH
13290: LD_INT 34
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: PPUSH
13302: CALL_OW 69
13306: IFFALSE 13318
13308: GO 13310
13310: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13311: LD_STRING M1-weapons-out
13313: PPUSH
13314: CALL_OW 604
13318: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13319: LD_INT 2
13321: PPUSH
13322: LD_EXP 60
13326: PPUSH
13327: CALL_OW 292
13331: PUSH
13332: LD_EXP 45
13336: PPUSH
13337: LD_EXP 60
13341: PPUSH
13342: CALL_OW 296
13346: AND
13347: PUSH
13348: LD_EXP 17
13352: NOT
13353: AND
13354: PUSH
13355: LD_EXP 30
13359: NOT
13360: AND
13361: IFFALSE 14219
13363: GO 13365
13365: DISABLE
13366: LD_INT 0
13368: PPUSH
13369: PPUSH
// begin if contactWithAmerican then
13370: LD_EXP 25
13374: IFFALSE 13471
// begin DialogueOn ;
13376: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13380: LD_EXP 60
13384: PPUSH
13385: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13389: LD_EXP 45
13393: PPUSH
13394: LD_STRING DH-USsol-1
13396: PPUSH
13397: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13401: LD_EXP 60
13405: PPUSH
13406: LD_INT 2
13408: PPUSH
13409: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13413: LD_ADDR_EXP 57
13417: PUSH
13418: LD_EXP 57
13422: PPUSH
13423: LD_EXP 60
13427: PPUSH
13428: CALL 66653 0 2
13432: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13433: LD_ADDR_EXP 14
13437: PUSH
13438: LD_EXP 14
13442: PPUSH
13443: LD_EXP 47
13447: PPUSH
13448: CALL 66653 0 2
13452: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13453: LD_EXP 60
13457: PPUSH
13458: LD_INT 1
13460: PPUSH
13461: CALL_OW 109
// DialogueOff ;
13465: CALL_OW 7
// exit ;
13469: GO 14219
// end ; DialogueOn ;
13471: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13475: LD_EXP 60
13479: PPUSH
13480: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13484: LD_EXP 60
13488: PPUSH
13489: LD_STRING DJy-Food-1
13491: PPUSH
13492: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13496: LD_EXP 45
13500: PPUSH
13501: LD_STRING DH-Food-2
13503: PPUSH
13504: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13508: LD_EXP 60
13512: PPUSH
13513: LD_STRING DJy-Food-3
13515: PPUSH
13516: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13520: LD_EXP 60
13524: PPUSH
13525: LD_STRING DJy-Food-4
13527: PPUSH
13528: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13532: LD_EXP 45
13536: PPUSH
13537: LD_STRING DH-Food-5
13539: PPUSH
13540: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13544: LD_EXP 60
13548: PPUSH
13549: LD_STRING DJy-Food-6
13551: PPUSH
13552: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13556: LD_EXP 60
13560: PPUSH
13561: LD_STRING DJy-Food-7
13563: PPUSH
13564: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13568: LD_EXP 60
13572: PPUSH
13573: LD_STRING DJy-Food-8
13575: PPUSH
13576: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13580: LD_EXP 45
13584: PPUSH
13585: LD_STRING DH-Food-9
13587: PPUSH
13588: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13592: LD_EXP 60
13596: PPUSH
13597: LD_STRING DJy-Food-10
13599: PPUSH
13600: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13604: LD_EXP 45
13608: PPUSH
13609: LD_STRING DH-Food-11
13611: PPUSH
13612: CALL_OW 88
// DialogueOff ;
13616: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13620: LD_STRING M3
13622: PPUSH
13623: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13627: LD_INT 5
13629: PPUSH
13630: LD_INT 215
13632: PPUSH
13633: LD_INT 117
13635: PPUSH
13636: LD_INT 0
13638: PPUSH
13639: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13643: LD_INT 215
13645: PPUSH
13646: LD_INT 118
13648: PPUSH
13649: LD_INT 2
13651: PPUSH
13652: LD_INT 6
13654: NEG
13655: PPUSH
13656: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13660: LD_INT 215
13662: PPUSH
13663: LD_INT 118
13665: PPUSH
13666: LD_INT 2
13668: PPUSH
13669: CALL_OW 331
// foodDelivered := false ;
13673: LD_ADDR_VAR 0 2
13677: PUSH
13678: LD_INT 0
13680: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13681: LD_INT 35
13683: PPUSH
13684: CALL_OW 67
// if hasMuchin then
13688: LD_EXP 30
13692: IFFALSE 13696
// continue ;
13694: GO 13681
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13696: LD_ADDR_VAR 0 1
13700: PUSH
13701: LD_EXP 14
13705: PUSH
13706: LD_EXP 45
13710: UNION
13711: PPUSH
13712: LD_INT 91
13714: PUSH
13715: LD_EXP 60
13719: PUSH
13720: LD_INT 6
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 25
13730: PUSH
13731: LD_INT 33
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PPUSH
13742: CALL_OW 72
13746: PUSH
13747: FOR_IN
13748: IFFALSE 13948
// if Carry ( i ) then
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 281
13759: IFFALSE 13946
// begin DialogueOn ;
13761: CALL_OW 6
// foodDelivered := true ;
13765: LD_ADDR_VAR 0 2
13769: PUSH
13770: LD_INT 1
13772: ST_TO_ADDR
// case i of Heike :
13773: LD_VAR 0 1
13777: PUSH
13778: LD_EXP 45
13782: DOUBLE
13783: EQUAL
13784: IFTRUE 13788
13786: GO 13803
13788: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13789: LD_EXP 45
13793: PPUSH
13794: LD_STRING DH-Food-12
13796: PPUSH
13797: CALL_OW 88
13801: GO 13929
13803: LD_EXP 50
13807: DOUBLE
13808: EQUAL
13809: IFTRUE 13813
13811: GO 13828
13813: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13814: LD_EXP 50
13818: PPUSH
13819: LD_STRING DK-Food-a-12
13821: PPUSH
13822: CALL_OW 88
13826: GO 13929
13828: LD_EXP 52
13832: DOUBLE
13833: EQUAL
13834: IFTRUE 13838
13836: GO 13853
13838: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13839: LD_EXP 52
13843: PPUSH
13844: LD_STRING DMar-Food-a-12
13846: PPUSH
13847: CALL_OW 88
13851: GO 13929
13853: LD_EXP 46
13857: DOUBLE
13858: EQUAL
13859: IFTRUE 13863
13861: GO 13878
13863: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13864: LD_EXP 46
13868: PPUSH
13869: LD_STRING DG-Food-a-14
13871: PPUSH
13872: CALL_OW 88
13876: GO 13929
13878: LD_EXP 47
13882: DOUBLE
13883: EQUAL
13884: IFTRUE 13888
13886: GO 13903
13888: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13889: LD_EXP 47
13893: PPUSH
13894: LD_STRING DM-Food-a-15
13896: PPUSH
13897: CALL_OW 88
13901: GO 13929
13903: LD_EXP 49
13907: DOUBLE
13908: EQUAL
13909: IFTRUE 13913
13911: GO 13928
13913: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13914: LD_EXP 49
13918: PPUSH
13919: LD_STRING DKam-Food-a-16
13921: PPUSH
13922: CALL_OW 88
13926: GO 13929
13928: POP
// SetCargo ( i , mat_cans , 0 ) ;
13929: LD_VAR 0 1
13933: PPUSH
13934: LD_INT 1
13936: PPUSH
13937: LD_INT 0
13939: PPUSH
13940: CALL_OW 290
// break ;
13944: GO 13948
// end ;
13946: GO 13747
13948: POP
13949: POP
// until foodDelivered ;
13950: LD_VAR 0 2
13954: IFFALSE 13681
// givenFood := true ;
13956: LD_ADDR_EXP 33
13960: PUSH
13961: LD_INT 1
13963: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13964: LD_EXP 60
13968: PPUSH
13969: LD_STRING DJy-Food-13
13971: PPUSH
13972: CALL_OW 88
// hasVirus := true ;
13976: LD_ADDR_EXP 31
13980: PUSH
13981: LD_INT 1
13983: ST_TO_ADDR
// if not americanContact then
13984: LD_EXP 10
13988: NOT
13989: IFFALSE 14039
// begin Say ( Heike , DH-Food-14 ) ;
13991: LD_EXP 45
13995: PPUSH
13996: LD_STRING DH-Food-14
13998: PPUSH
13999: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
14003: LD_EXP 60
14007: PPUSH
14008: LD_STRING DJy-Food-15
14010: PPUSH
14011: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
14015: LD_EXP 60
14019: PPUSH
14020: LD_STRING DJy-Food-16
14022: PPUSH
14023: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
14027: LD_EXP 60
14031: PPUSH
14032: LD_STRING DJy-Food-17
14034: PPUSH
14035: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14039: LD_STRING M3-out
14041: PPUSH
14042: CALL_OW 337
// DialogueOff ;
14046: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
14050: LD_EXP 60
14054: PPUSH
14055: LD_INT 1
14057: PPUSH
14058: LD_INT 10
14060: PPUSH
14061: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14065: LD_EXP 60
14069: PPUSH
14070: LD_INT 95
14072: PPUSH
14073: LD_INT 17
14075: PPUSH
14076: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14080: LD_INT 35
14082: PPUSH
14083: CALL_OW 67
// if not HasTask ( Jerry ) then
14087: LD_EXP 60
14091: PPUSH
14092: CALL_OW 314
14096: NOT
14097: IFFALSE 14114
// ComMoveXY ( Jerry , 95 , 17 ) ;
14099: LD_EXP 60
14103: PPUSH
14104: LD_INT 95
14106: PPUSH
14107: LD_INT 17
14109: PPUSH
14110: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14114: LD_EXP 60
14118: PPUSH
14119: LD_INT 95
14121: PPUSH
14122: LD_INT 17
14124: PPUSH
14125: CALL_OW 307
14129: IFFALSE 14080
// SetCargo ( Jerry , mat_cans , 0 ) ;
14131: LD_EXP 60
14135: PPUSH
14136: LD_INT 1
14138: PPUSH
14139: LD_INT 0
14141: PPUSH
14142: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14146: LD_ADDR_EXP 57
14150: PUSH
14151: LD_EXP 57
14155: PPUSH
14156: LD_EXP 60
14160: PPUSH
14161: CALL 66653 0 2
14165: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14166: LD_ADDR_VAR 0 1
14170: PUSH
14171: LD_INT 22
14173: PUSH
14174: LD_INT 4
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: LD_INT 23
14183: PUSH
14184: LD_INT 1
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PPUSH
14195: CALL_OW 69
14199: PUSH
14200: FOR_IN
14201: IFFALSE 14217
// SetLives ( i , 1000 ) ;
14203: LD_VAR 0 1
14207: PPUSH
14208: LD_INT 1000
14210: PPUSH
14211: CALL_OW 234
14215: GO 14200
14217: POP
14218: POP
// end ;
14219: PPOPN 2
14221: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14222: LD_EXP 30
14226: NOT
14227: PUSH
14228: LD_EXP 6
14232: AND
14233: IFFALSE 14680
14235: GO 14237
14237: DISABLE
14238: LD_INT 0
14240: PPUSH
14241: PPUSH
// begin tmp := [ ] ;
14242: LD_ADDR_VAR 0 2
14246: PUSH
14247: EMPTY
14248: ST_TO_ADDR
// uc_side := 3 ;
14249: LD_ADDR_OWVAR 20
14253: PUSH
14254: LD_INT 3
14256: ST_TO_ADDR
// uc_nation := 3 ;
14257: LD_ADDR_OWVAR 21
14261: PUSH
14262: LD_INT 3
14264: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14265: LD_INT 1
14267: PPUSH
14268: LD_INT 8
14270: PPUSH
14271: CALL_OW 381
// un := CreateHuman ;
14275: LD_ADDR_VAR 0 1
14279: PUSH
14280: CALL_OW 44
14284: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14285: LD_VAR 0 1
14289: PPUSH
14290: LD_INT 173
14292: PPUSH
14293: LD_INT 104
14295: PPUSH
14296: LD_INT 0
14298: PPUSH
14299: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14303: LD_ADDR_VAR 0 2
14307: PUSH
14308: LD_VAR 0 2
14312: PPUSH
14313: LD_VAR 0 1
14317: PPUSH
14318: CALL 66653 0 2
14322: ST_TO_ADDR
// un := CreateHuman ;
14323: LD_ADDR_VAR 0 1
14327: PUSH
14328: CALL_OW 44
14332: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14333: LD_VAR 0 1
14337: PPUSH
14338: LD_INT 73
14340: PPUSH
14341: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14345: LD_ADDR_VAR 0 2
14349: PUSH
14350: LD_VAR 0 2
14354: PPUSH
14355: LD_VAR 0 1
14359: PPUSH
14360: CALL 66653 0 2
14364: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14365: LD_INT 35
14367: PPUSH
14368: CALL_OW 67
// if isAlarm then
14372: LD_EXP 17
14376: IFFALSE 14380
// exit ;
14378: GO 14680
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
14380: LD_EXP 50
14384: PPUSH
14385: CALL_OW 255
14389: PUSH
14390: LD_INT 2
14392: EQUAL
14393: PUSH
14394: LD_EXP 50
14398: PPUSH
14399: LD_INT 73
14401: PPUSH
14402: CALL_OW 296
14406: PUSH
14407: LD_INT 8
14409: LESS
14410: AND
14411: PUSH
14412: LD_VAR 0 2
14416: PPUSH
14417: LD_INT 101
14419: PUSH
14420: LD_INT 2
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PPUSH
14427: CALL_OW 72
14431: AND
14432: IFFALSE 14365
// InGameOn ;
14434: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14438: LD_INT 73
14440: PPUSH
14441: CALL_OW 250
14445: PPUSH
14446: LD_INT 73
14448: PPUSH
14449: CALL_OW 251
14453: PPUSH
14454: LD_INT 2
14456: PPUSH
14457: LD_INT 9
14459: NEG
14460: PPUSH
14461: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14465: LD_INT 73
14467: PPUSH
14468: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14472: LD_EXP 50
14476: PPUSH
14477: LD_INT 73
14479: PPUSH
14480: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14484: LD_EXP 50
14488: PPUSH
14489: LD_STRING DK-Plastic-1
14491: PPUSH
14492: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14496: LD_EXP 50
14500: PPUSH
14501: LD_STRING DK-Plastic-2
14503: PPUSH
14504: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14508: LD_EXP 50
14512: PPUSH
14513: LD_INT 73
14515: PPUSH
14516: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14520: LD_INT 35
14522: PPUSH
14523: CALL_OW 67
// if isAlarm then
14527: LD_EXP 17
14531: IFFALSE 14535
// exit ;
14533: GO 14680
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
14535: LD_EXP 50
14539: PPUSH
14540: LD_INT 73
14542: PPUSH
14543: CALL_OW 296
14547: PUSH
14548: LD_INT 6
14550: LESS
14551: IFFALSE 14520
// ComHold ( Kaia ) ;
14553: LD_EXP 50
14557: PPUSH
14558: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14562: LD_VAR 0 2
14566: PUSH
14567: LD_INT 1
14569: ARRAY
14570: PPUSH
14571: LD_STRING DRum-Plastic-3
14573: PPUSH
14574: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14578: LD_VAR 0 2
14582: PUSH
14583: LD_INT 2
14585: ARRAY
14586: PPUSH
14587: LD_STRING DRum2-Plastic-4
14589: PPUSH
14590: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14594: LD_VAR 0 2
14598: PUSH
14599: LD_INT 1
14601: ARRAY
14602: PPUSH
14603: LD_STRING DRum-Plastic-5
14605: PPUSH
14606: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14610: LD_VAR 0 2
14614: PUSH
14615: LD_INT 2
14617: ARRAY
14618: PPUSH
14619: LD_STRING DRum2-Plastic-6
14621: PPUSH
14622: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14626: LD_EXP 50
14630: PPUSH
14631: LD_STRING DK-Plastic-7
14633: PPUSH
14634: CALL_OW 88
// InGameOff ;
14638: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14642: LD_INT 73
14644: PPUSH
14645: CALL_OW 250
14649: PPUSH
14650: LD_INT 73
14652: PPUSH
14653: CALL_OW 251
14657: PPUSH
14658: LD_INT 2
14660: PPUSH
14661: CALL_OW 331
// explosionsTakenByRussians := true ;
14665: LD_ADDR_EXP 21
14669: PUSH
14670: LD_INT 1
14672: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14673: LD_STRING ExplosivesInfo
14675: PPUSH
14676: CALL_OW 97
// end ;
14680: PPOPN 2
14682: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and GetClass ( Kaia ) = class_prison and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14683: LD_EXP 21
14687: PUSH
14688: LD_EXP 50
14692: PPUSH
14693: CALL_OW 255
14697: PUSH
14698: LD_INT 2
14700: EQUAL
14701: AND
14702: PUSH
14703: LD_EXP 50
14707: PPUSH
14708: CALL_OW 257
14712: PUSH
14713: LD_INT 33
14715: EQUAL
14716: AND
14717: PUSH
14718: LD_EXP 50
14722: PPUSH
14723: LD_INT 61
14725: PPUSH
14726: CALL 20039 0 2
14730: AND
14731: PUSH
14732: LD_EXP 17
14736: NOT
14737: AND
14738: PUSH
14739: LD_EXP 30
14743: NOT
14744: AND
14745: IFFALSE 14901
14747: GO 14749
14749: DISABLE
// begin InGameOn ;
14750: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14754: LD_INT 61
14756: PPUSH
14757: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14761: LD_EXP 50
14765: PPUSH
14766: LD_INT 3
14768: PPUSH
14769: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14773: LD_EXP 50
14777: PPUSH
14778: LD_INT 61
14780: PPUSH
14781: CALL_OW 120
// wait ( 0 0$2 ) ;
14785: LD_INT 70
14787: PPUSH
14788: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14792: LD_EXP 50
14796: PPUSH
14797: LD_STRING DK-Plastic-8
14799: PPUSH
14800: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14804: LD_EXP 66
14808: PUSH
14809: LD_INT 1
14811: ARRAY
14812: PPUSH
14813: LD_STRING DRuMch-Plastic-9
14815: PPUSH
14816: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14820: LD_EXP 50
14824: PPUSH
14825: LD_STRING DK-Plastic-10
14827: PPUSH
14828: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14832: LD_EXP 66
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: PPUSH
14841: LD_STRING DRuMch-Plastic-a-11
14843: PPUSH
14844: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14848: LD_EXP 50
14852: PPUSH
14853: LD_STRING DK-Plastic-a-12
14855: PPUSH
14856: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14860: LD_EXP 66
14864: PUSH
14865: LD_INT 1
14867: ARRAY
14868: PPUSH
14869: LD_STRING DRuMch-Plastic-a-13
14871: PPUSH
14872: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14876: LD_EXP 50
14880: PPUSH
14881: LD_INT 2
14883: PPUSH
14884: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14888: LD_EXP 50
14892: PPUSH
14893: CALL_OW 122
// InGameOff ;
14897: CALL_OW 9
// end ;
14901: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and GetClass ( Kaia ) = class_prison and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14902: LD_EXP 21
14906: PUSH
14907: LD_EXP 50
14911: PPUSH
14912: CALL_OW 255
14916: PUSH
14917: LD_INT 2
14919: EQUAL
14920: AND
14921: PUSH
14922: LD_EXP 50
14926: PPUSH
14927: CALL_OW 257
14931: PUSH
14932: LD_INT 33
14934: EQUAL
14935: AND
14936: PUSH
14937: LD_EXP 50
14941: PPUSH
14942: LD_INT 196
14944: PPUSH
14945: CALL 20039 0 2
14949: AND
14950: PUSH
14951: LD_EXP 17
14955: NOT
14956: AND
14957: PUSH
14958: LD_EXP 30
14962: NOT
14963: AND
14964: IFFALSE 15303
14966: GO 14968
14968: DISABLE
// begin InGameOn ;
14969: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14973: LD_INT 196
14975: PPUSH
14976: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14980: LD_EXP 50
14984: PPUSH
14985: LD_INT 3
14987: PPUSH
14988: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14992: LD_EXP 50
14996: PPUSH
14997: LD_INT 196
14999: PPUSH
15000: CALL_OW 120
// wait ( 0 0$2 ) ;
15004: LD_INT 70
15006: PPUSH
15007: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15011: LD_EXP 50
15015: PPUSH
15016: LD_STRING DK-Plastic-8
15018: PPUSH
15019: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
15023: LD_EXP 67
15027: PUSH
15028: LD_INT 1
15030: ARRAY
15031: PPUSH
15032: LD_STRING DRuMch-Plastic-9
15034: PPUSH
15035: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15039: LD_EXP 50
15043: PPUSH
15044: LD_STRING DK-Plastic-10
15046: PPUSH
15047: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
15051: LD_EXP 67
15055: PUSH
15056: LD_INT 1
15058: ARRAY
15059: PPUSH
15060: LD_STRING DRuMch-Plastic-11
15062: PPUSH
15063: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
15067: LD_EXP 50
15071: PPUSH
15072: LD_STRING DK-Plastic-12
15074: PPUSH
15075: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15079: LD_EXP 50
15083: PPUSH
15084: LD_STRING DK-Plastic-13
15086: PPUSH
15087: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15091: LD_EXP 67
15095: PUSH
15096: LD_INT 1
15098: ARRAY
15099: PPUSH
15100: LD_STRING DRuMch-Plastic-14
15102: PPUSH
15103: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15107: LD_EXP 68
15111: PPUSH
15112: LD_INT 167
15114: PPUSH
15115: LD_INT 34
15117: PPUSH
15118: LD_INT 3
15120: PPUSH
15121: LD_INT 0
15123: PPUSH
15124: CALL 68793 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15128: LD_EXP 68
15132: PPUSH
15133: LD_INT 196
15135: PPUSH
15136: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15140: LD_INT 35
15142: PPUSH
15143: CALL_OW 67
// if not HasTask ( Stiopa ) then
15147: LD_EXP 68
15151: PPUSH
15152: CALL_OW 314
15156: NOT
15157: IFFALSE 15171
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15159: LD_EXP 68
15163: PPUSH
15164: LD_INT 196
15166: PPUSH
15167: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15171: LD_EXP 68
15175: PPUSH
15176: CALL_OW 310
15180: IFFALSE 15140
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15182: LD_EXP 68
15186: PPUSH
15187: LD_STRING DSpn-Plastic-15
15189: PPUSH
15190: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15194: LD_EXP 69
15198: PPUSH
15199: LD_STRING DLr-Plastic-16
15201: PPUSH
15202: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15206: LD_EXP 50
15210: PPUSH
15211: LD_STRING DK-Plastic-17
15213: PPUSH
15214: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15218: LD_INT 10
15220: PPUSH
15221: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15225: LD_INT 196
15227: PPUSH
15228: CALL 19765 0 1
// SetSide ( Kaia , 2 ) ;
15232: LD_EXP 50
15236: PPUSH
15237: LD_INT 2
15239: PPUSH
15240: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15244: LD_EXP 50
15248: PPUSH
15249: CALL_OW 122
// InGameOff ;
15253: CALL_OW 9
// explosionsTakenByRussians := false ;
15257: LD_ADDR_EXP 21
15261: PUSH
15262: LD_INT 0
15264: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15265: LD_INT 170
15267: PPUSH
15268: LD_INT 28
15270: PPUSH
15271: LD_INT 2
15273: PPUSH
15274: LD_INT 6
15276: NEG
15277: PPUSH
15278: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15282: LD_INT 170
15284: PPUSH
15285: LD_INT 28
15287: PPUSH
15288: LD_INT 2
15290: PPUSH
15291: CALL_OW 331
// knowWhereExplosivesAre := true ;
15295: LD_ADDR_EXP 34
15299: PUSH
15300: LD_INT 1
15302: ST_TO_ADDR
// end ;
15303: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15304: LD_EXP 34
15308: PUSH
15309: LD_EXP 50
15313: PPUSH
15314: CALL_OW 255
15318: PUSH
15319: LD_INT 2
15321: EQUAL
15322: AND
15323: PUSH
15324: LD_EXP 50
15328: PPUSH
15329: LD_INT 195
15331: PPUSH
15332: CALL 20039 0 2
15336: AND
15337: PUSH
15338: LD_EXP 17
15342: NOT
15343: AND
15344: PUSH
15345: LD_EXP 30
15349: NOT
15350: AND
15351: IFFALSE 15457
15353: GO 15355
15355: DISABLE
// begin InGameOn ;
15356: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15360: LD_EXP 50
15364: PPUSH
15365: LD_INT 3
15367: PPUSH
15368: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15372: LD_EXP 50
15376: PPUSH
15377: LD_INT 195
15379: PPUSH
15380: CALL_OW 120
// wait ( 0 0$1 ) ;
15384: LD_INT 35
15386: PPUSH
15387: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15391: LD_EXP 50
15395: PPUSH
15396: LD_STRING DK-Plastic-18
15398: PPUSH
15399: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15403: LD_STRING ExplosivesInfoUsage
15405: PPUSH
15406: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
15410: LD_INT 195
15412: PPUSH
15413: CALL 19765 0 1
// SetSide ( Kaia , 2 ) ;
15417: LD_EXP 50
15421: PPUSH
15422: LD_INT 2
15424: PPUSH
15425: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15429: LD_EXP 50
15433: PPUSH
15434: CALL_OW 122
// InGameOff ;
15438: CALL_OW 9
// hasExplosionCollected := true ;
15442: LD_ADDR_EXP 23
15446: PUSH
15447: LD_INT 1
15449: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15450: LD_STRING M1-explosive-out
15452: PPUSH
15453: CALL_OW 337
// end ;
15457: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15458: LD_EXP 23
15462: PUSH
15463: LD_EXP 17
15467: NOT
15468: AND
15469: PUSH
15470: LD_EXP 30
15474: NOT
15475: AND
15476: IFFALSE 15651
15478: GO 15480
15480: DISABLE
15481: LD_INT 0
15483: PPUSH
15484: PPUSH
// begin for i in importantBuildingsList do
15485: LD_ADDR_VAR 0 1
15489: PUSH
15490: LD_EXP 35
15494: PUSH
15495: FOR_IN
15496: IFFALSE 15512
// MarkBuilding ( i , true ) ;
15498: LD_VAR 0 1
15502: PPUSH
15503: LD_INT 1
15505: PPUSH
15506: CALL 20413 0 2
15510: GO 15495
15512: POP
15513: POP
// repeat wait ( 0 0$1 ) ;
15514: LD_INT 35
15516: PPUSH
15517: CALL_OW 67
// for i in importantBuildingsList do
15521: LD_ADDR_VAR 0 1
15525: PUSH
15526: LD_EXP 35
15530: PUSH
15531: FOR_IN
15532: IFFALSE 15642
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15534: LD_EXP 45
15538: PUSH
15539: LD_EXP 14
15543: UNION
15544: PPUSH
15545: LD_INT 22
15547: PUSH
15548: LD_INT 2
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 21
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 91
15567: PUSH
15568: LD_VAR 0 1
15572: PUSH
15573: LD_INT 6
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: LIST
15585: PPUSH
15586: CALL_OW 72
15590: IFFALSE 15640
// begin CenterNowOnUnits ( i ) ;
15592: LD_VAR 0 1
15596: PPUSH
15597: CALL_OW 87
// PlaceExplosives ( i ) ;
15601: LD_VAR 0 1
15605: PPUSH
15606: CALL 20310 0 1
// MarkBuilding ( i , false ) ;
15610: LD_VAR 0 1
15614: PPUSH
15615: LD_INT 0
15617: PPUSH
15618: CALL 20413 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15622: LD_ADDR_EXP 35
15626: PUSH
15627: LD_EXP 35
15631: PUSH
15632: LD_VAR 0 1
15636: DIFF
15637: ST_TO_ADDR
// continue ;
15638: GO 15531
// end ; end ;
15640: GO 15531
15642: POP
15643: POP
// until not importantBuildingsList ;
15644: LD_EXP 35
15648: NOT
15649: IFFALSE 15514
// end ;
15651: PPOPN 2
15653: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15654: LD_EXP 14
15658: PPUSH
15659: LD_INT 22
15661: PUSH
15662: LD_INT 2
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 95
15671: PUSH
15672: LD_INT 23
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PPUSH
15683: CALL_OW 72
15687: PUSH
15688: LD_EXP 45
15692: PPUSH
15693: CALL_OW 302
15697: AND
15698: PUSH
15699: LD_EXP 30
15703: NOT
15704: AND
15705: IFFALSE 15733
15707: GO 15709
15709: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15710: LD_EXP 45
15714: PPUSH
15715: LD_STRING DH-End-1
15717: PPUSH
15718: CALL_OW 88
// if not activeExplosives then
15722: LD_EXP 36
15726: NOT
15727: IFFALSE 15733
// Explode ;
15729: CALL 23183 0 0
// end ;
15733: END
// function SayHEmpty ( ) ; begin
15734: LD_INT 0
15736: PPUSH
// case rand ( 1 , 3 ) of 1 :
15737: LD_INT 1
15739: PPUSH
15740: LD_INT 3
15742: PPUSH
15743: CALL_OW 12
15747: PUSH
15748: LD_INT 1
15750: DOUBLE
15751: EQUAL
15752: IFTRUE 15756
15754: GO 15771
15756: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15757: LD_EXP 45
15761: PPUSH
15762: LD_STRING DH-Empty-1
15764: PPUSH
15765: CALL_OW 88
15769: GO 15818
15771: LD_INT 2
15773: DOUBLE
15774: EQUAL
15775: IFTRUE 15779
15777: GO 15794
15779: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15780: LD_EXP 45
15784: PPUSH
15785: LD_STRING DH-Empty-2
15787: PPUSH
15788: CALL_OW 88
15792: GO 15818
15794: LD_INT 3
15796: DOUBLE
15797: EQUAL
15798: IFTRUE 15802
15800: GO 15817
15802: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15803: LD_EXP 45
15807: PPUSH
15808: LD_STRING DH-Empty-3
15810: PPUSH
15811: CALL_OW 88
15815: GO 15818
15817: POP
// end ;
15818: LD_VAR 0 1
15822: RET
// function SayHVisited ( ) ; begin
15823: LD_INT 0
15825: PPUSH
// case rand ( 1 , 3 ) of 1 :
15826: LD_INT 1
15828: PPUSH
15829: LD_INT 3
15831: PPUSH
15832: CALL_OW 12
15836: PUSH
15837: LD_INT 1
15839: DOUBLE
15840: EQUAL
15841: IFTRUE 15845
15843: GO 15860
15845: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15846: LD_EXP 45
15850: PPUSH
15851: LD_STRING DH-Visited-1
15853: PPUSH
15854: CALL_OW 88
15858: GO 15907
15860: LD_INT 2
15862: DOUBLE
15863: EQUAL
15864: IFTRUE 15868
15866: GO 15883
15868: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15869: LD_EXP 45
15873: PPUSH
15874: LD_STRING DH-Visited-2
15876: PPUSH
15877: CALL_OW 88
15881: GO 15907
15883: LD_INT 3
15885: DOUBLE
15886: EQUAL
15887: IFTRUE 15891
15889: GO 15906
15891: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15892: LD_EXP 45
15896: PPUSH
15897: LD_STRING DH-Visited-3
15899: PPUSH
15900: CALL_OW 88
15904: GO 15907
15906: POP
// end ;
15907: LD_VAR 0 1
15911: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15912: LD_EXP 17
15916: NOT
15917: PUSH
15918: LD_EXP 15
15922: AND
15923: PUSH
15924: LD_EXP 45
15928: PPUSH
15929: CALL_OW 255
15933: PUSH
15934: LD_INT 2
15936: EQUAL
15937: AND
15938: PUSH
15939: LD_EXP 45
15943: PPUSH
15944: CALL_OW 302
15948: AND
15949: PUSH
15950: LD_EXP 45
15954: PPUSH
15955: CALL_OW 316
15959: AND
15960: PUSH
15961: LD_EXP 30
15965: NOT
15966: AND
15967: IFFALSE 16033
15969: GO 15971
15971: DISABLE
15972: LD_INT 0
15974: PPUSH
// begin enable ;
15975: ENABLE
// for i in entranceAllowedList do
15976: LD_ADDR_VAR 0 1
15980: PUSH
15981: LD_EXP 15
15985: PUSH
15986: FOR_IN
15987: IFFALSE 16031
// if InEntrance ( Heike , i ) then
15989: LD_EXP 45
15993: PPUSH
15994: LD_VAR 0 1
15998: PPUSH
15999: CALL 20039 0 2
16003: IFFALSE 16029
// begin disable ( entranceEvent ) ;
16005: LD_INT 1
16007: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
16008: LD_VAR 0 1
16012: PPUSH
16013: CALL 16036 0 1
// wait ( 0 0$3 ) ;
16017: LD_INT 105
16019: PPUSH
16020: CALL_OW 67
// enable ( entranceEvent ) ;
16024: LD_INT 1
16026: ENABLE_MARKED
// break ;
16027: GO 16031
// end ;
16029: GO 15986
16031: POP
16032: POP
// end ;
16033: PPOPN 1
16035: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
16036: LD_INT 0
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
// if not building then
16042: LD_VAR 0 1
16046: NOT
16047: IFFALSE 16051
// exit ;
16049: GO 18676
// if building in entranceVisitedList then
16051: LD_VAR 0 1
16055: PUSH
16056: LD_EXP 16
16060: IN
16061: IFFALSE 16069
// begin SayHVisited ( ) ;
16063: CALL 15823 0 0
// exit ;
16067: GO 18676
// end ; case Query ( EnterBuilding ) of 1 :
16069: LD_STRING EnterBuilding
16071: PPUSH
16072: CALL_OW 97
16076: PUSH
16077: LD_INT 1
16079: DOUBLE
16080: EQUAL
16081: IFTRUE 16085
16083: GO 16088
16085: POP
// ; 2 :
16086: GO 16102
16088: LD_INT 2
16090: DOUBLE
16091: EQUAL
16092: IFTRUE 16096
16094: GO 16101
16096: POP
// exit ; end ;
16097: GO 18676
16099: GO 16102
16101: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16102: LD_ADDR_EXP 16
16106: PUSH
16107: LD_EXP 16
16111: PPUSH
16112: LD_VAR 0 1
16116: PPUSH
16117: CALL 66653 0 2
16121: ST_TO_ADDR
// InGameOn ;
16122: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16126: LD_EXP 45
16130: PPUSH
16131: LD_INT 5
16133: PPUSH
16134: CALL_OW 235
// SetSide ( building , 5 ) ;
16138: LD_VAR 0 1
16142: PPUSH
16143: LD_INT 5
16145: PPUSH
16146: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16150: LD_EXP 45
16154: PPUSH
16155: LD_VAR 0 1
16159: PPUSH
16160: CALL_OW 120
// wait ( 0 0$3 ) ;
16164: LD_INT 105
16166: PPUSH
16167: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16171: LD_ADDR_VAR 0 4
16175: PUSH
16176: LD_INT 165
16178: PUSH
16179: LD_INT 106
16181: PUSH
16182: LD_INT 135
16184: PUSH
16185: LD_INT 162
16187: PUSH
16188: LD_INT 61
16190: PUSH
16191: LD_INT 109
16193: PUSH
16194: LD_INT 169
16196: PUSH
16197: LD_INT 13
16199: PUSH
16200: LD_INT 147
16202: PUSH
16203: LD_INT 137
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: ST_TO_ADDR
// if not building in tmp then
16218: LD_VAR 0 1
16222: PUSH
16223: LD_VAR 0 4
16227: IN
16228: NOT
16229: IFFALSE 16237
// SayHEmpty ( ) else
16231: CALL 15734 0 0
16235: GO 18623
// case building of laundry :
16237: LD_VAR 0 1
16241: PUSH
16242: LD_INT 165
16244: DOUBLE
16245: EQUAL
16246: IFTRUE 16250
16248: GO 16354
16250: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16251: LD_EXP 26
16255: PUSH
16256: LD_EXP 27
16260: NOT
16261: AND
16262: PUSH
16263: LD_EXP 28
16267: NOT
16268: AND
16269: IFFALSE 16324
// begin case Query ( HeikeInLaundry ) of 1 :
16271: LD_STRING HeikeInLaundry
16273: PPUSH
16274: CALL_OW 97
16278: PUSH
16279: LD_INT 1
16281: DOUBLE
16282: EQUAL
16283: IFTRUE 16287
16285: GO 16294
16287: POP
// SpawnHeikeAsRussian ; 2 :
16288: CALL 1802 0 0
16292: GO 16322
16294: LD_INT 2
16296: DOUBLE
16297: EQUAL
16298: IFTRUE 16302
16300: GO 16321
16302: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16303: LD_ADDR_EXP 16
16307: PUSH
16308: LD_EXP 16
16312: PUSH
16313: LD_VAR 0 1
16317: DIFF
16318: ST_TO_ADDR
16319: GO 16322
16321: POP
// end else
16322: GO 16352
// begin entranceVisitedList := entranceVisitedList diff building ;
16324: LD_ADDR_EXP 16
16328: PUSH
16329: LD_EXP 16
16333: PUSH
16334: LD_VAR 0 1
16338: DIFF
16339: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16340: LD_EXP 45
16344: PPUSH
16345: LD_STRING DH-Locked
16347: PPUSH
16348: CALL_OW 88
// end ; end ; dougBar :
16352: GO 18623
16354: LD_INT 106
16356: DOUBLE
16357: EQUAL
16358: IFTRUE 16362
16360: GO 16724
16362: POP
// begin if contactWithAmerican and americanContact then
16363: LD_EXP 25
16367: PUSH
16368: LD_EXP 10
16372: AND
16373: IFFALSE 16437
// begin Say ( Heike , DH-Escort-a-1 ) ;
16375: LD_EXP 45
16379: PPUSH
16380: LD_STRING DH-Escort-a-1
16382: PPUSH
16383: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16387: LD_EXP 59
16391: PPUSH
16392: LD_STRING DCa-Escort-a-2
16394: PPUSH
16395: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16399: LD_EXP 59
16403: PPUSH
16404: LD_STRING DCa-Escort-a-3
16406: PPUSH
16407: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16411: LD_EXP 45
16415: PPUSH
16416: LD_STRING DH-Escort-a-4
16418: PPUSH
16419: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16423: LD_EXP 45
16427: PPUSH
16428: LD_STRING DH-Escort-a-5
16430: PPUSH
16431: CALL_OW 88
// end else
16435: GO 16681
// if contactWithAmerican then
16437: LD_EXP 25
16441: IFFALSE 16481
// begin Say ( Heike , DH-Escort-b-1 ) ;
16443: LD_EXP 45
16447: PPUSH
16448: LD_STRING DH-Escort-b-1
16450: PPUSH
16451: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16455: LD_EXP 59
16459: PPUSH
16460: LD_STRING DCa-Escort-b-2
16462: PPUSH
16463: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16467: LD_EXP 59
16471: PPUSH
16472: LD_STRING DCa-Escort-b-3
16474: PPUSH
16475: CALL_OW 88
// end else
16479: GO 16681
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16481: LD_EXP 59
16485: PPUSH
16486: LD_STRING DCa-Deal-a-1
16488: PPUSH
16489: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16493: LD_EXP 59
16497: PPUSH
16498: LD_STRING DCa-Deal-a-2
16500: PPUSH
16501: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16505: LD_EXP 45
16509: PPUSH
16510: LD_STRING DH-Deal-a-3
16512: PPUSH
16513: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16517: LD_EXP 59
16521: PPUSH
16522: LD_STRING DCa-Deal-a-4
16524: PPUSH
16525: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16529: LD_EXP 45
16533: PPUSH
16534: LD_STRING DH-Deal-a-5
16536: PPUSH
16537: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16541: LD_EXP 59
16545: PPUSH
16546: LD_STRING DCa-Deal-a-6
16548: PPUSH
16549: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16553: LD_EXP 59
16557: PPUSH
16558: LD_STRING DCa-Deal-a-7
16560: PPUSH
16561: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16565: LD_EXP 59
16569: PPUSH
16570: LD_STRING DCa-Deal-a-8
16572: PPUSH
16573: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16577: LD_EXP 59
16581: PPUSH
16582: LD_STRING DCa-Deal-a-9
16584: PPUSH
16585: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16589: LD_EXP 59
16593: PPUSH
16594: LD_STRING DCa-Deal-a-10
16596: PPUSH
16597: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16601: LD_EXP 59
16605: PPUSH
16606: LD_STRING DCa-Deal-a-11
16608: PPUSH
16609: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16613: LD_INT 10
16615: PPUSH
16616: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16620: LD_EXP 59
16624: PPUSH
16625: LD_STRING DCa-Deal-a-12
16627: PPUSH
16628: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16632: LD_EXP 45
16636: PPUSH
16637: LD_STRING DH-Deal-a-13
16639: PPUSH
16640: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16644: LD_EXP 45
16648: PPUSH
16649: LD_STRING DH-Deal-a-14
16651: PPUSH
16652: CALL_OW 88
// contactWithAmerican := true ;
16656: LD_ADDR_EXP 25
16660: PUSH
16661: LD_INT 1
16663: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
16664: LD_INT 1
16666: PPUSH
16667: LD_STRING 08_DealWithDoug
16669: PPUSH
16670: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16674: LD_STRING M1-american-out
16676: PPUSH
16677: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16681: LD_EXP 59
16685: PPUSH
16686: LD_INT 2
16688: PPUSH
16689: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16693: LD_ADDR_EXP 14
16697: PUSH
16698: LD_EXP 14
16702: PPUSH
16703: LD_EXP 59
16707: PPUSH
16708: CALL 66653 0 2
16712: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16713: LD_EXP 59
16717: PPUSH
16718: CALL_OW 122
// end ; usLab :
16722: GO 18623
16724: LD_INT 135
16726: DOUBLE
16727: EQUAL
16728: IFTRUE 16732
16730: GO 17051
16732: POP
// begin if hasSniperRifle then
16733: LD_EXP 11
16737: IFFALSE 17049
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16739: LD_EXP 50
16743: PPUSH
16744: CALL_OW 302
16748: PUSH
16749: LD_EXP 50
16753: PUSH
16754: LD_EXP 14
16758: IN
16759: AND
16760: PUSH
16761: LD_EXP 50
16765: PPUSH
16766: CALL_OW 255
16770: PUSH
16771: LD_INT 2
16773: EQUAL
16774: AND
16775: IFFALSE 17023
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16777: LD_EXP 45
16781: PPUSH
16782: LD_EXP 50
16786: PPUSH
16787: CALL_OW 296
16791: PUSH
16792: LD_INT 10
16794: GREATER
16795: IFFALSE 16820
// begin Query ( KaiaDistance ) ;
16797: LD_STRING KaiaDistance
16799: PPUSH
16800: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16804: LD_ADDR_EXP 16
16808: PUSH
16809: LD_EXP 16
16813: PUSH
16814: LD_INT 135
16816: DIFF
16817: ST_TO_ADDR
// end else
16818: GO 17021
// begin SetSide ( Kaia , 5 ) ;
16820: LD_EXP 50
16824: PPUSH
16825: LD_INT 5
16827: PPUSH
16828: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16832: LD_EXP 50
16836: PPUSH
16837: LD_INT 135
16839: PPUSH
16840: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16844: LD_INT 35
16846: PPUSH
16847: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16851: LD_EXP 50
16855: PPUSH
16856: CALL_OW 310
16860: IFFALSE 16844
// Say ( Kaia , DK-Sniper-1 ) ;
16862: LD_EXP 50
16866: PPUSH
16867: LD_STRING DK-Sniper-1
16869: PPUSH
16870: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16874: LD_EXP 50
16878: PPUSH
16879: CALL_OW 257
16883: PUSH
16884: LD_INT 34
16886: EQUAL
16887: PUSH
16888: LD_EXP 47
16892: PUSH
16893: LD_EXP 14
16897: IN
16898: AND
16899: PUSH
16900: LD_EXP 47
16904: PPUSH
16905: CALL_OW 302
16909: AND
16910: IFFALSE 16941
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16912: LD_EXP 50
16916: PPUSH
16917: LD_STRING DK-Sniper-a-2
16919: PPUSH
16920: CALL_OW 88
// giveSniperRifleToMike := true ;
16924: LD_ADDR_EXP 42
16928: PUSH
16929: LD_INT 1
16931: ST_TO_ADDR
// Query ( QSniperMike ) ;
16932: LD_STRING QSniperMike
16934: PPUSH
16935: CALL_OW 97
// end else
16939: GO 17000
// begin Say ( Kaia , DK-Sniper-2 ) ;
16941: LD_EXP 50
16945: PPUSH
16946: LD_STRING DK-Sniper-2
16948: PPUSH
16949: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16953: LD_EXP 50
16957: PPUSH
16958: LD_INT 32
16960: PPUSH
16961: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16965: LD_EXP 52
16969: PPUSH
16970: CALL_OW 302
16974: PUSH
16975: LD_EXP 52
16979: PUSH
16980: LD_EXP 14
16984: IN
16985: AND
16986: IFFALSE 17000
// Say ( Markov , DMar-Sniper-3 ) ;
16988: LD_EXP 52
16992: PPUSH
16993: LD_STRING DMar-Sniper-3
16995: PPUSH
16996: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
17000: LD_EXP 50
17004: PPUSH
17005: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
17009: LD_EXP 50
17013: PPUSH
17014: LD_INT 2
17016: PPUSH
17017: CALL_OW 235
// end ; end else
17021: GO 17049
// begin entranceVisitedList := entranceVisitedList diff usLab ;
17023: LD_ADDR_EXP 16
17027: PUSH
17028: LD_EXP 16
17032: PUSH
17033: LD_INT 135
17035: DIFF
17036: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17037: LD_EXP 45
17041: PPUSH
17042: LD_STRING DH-Locked
17044: PPUSH
17045: CALL_OW 88
// end ; end ; end ; drugsLab :
17049: GO 18623
17051: LD_INT 162
17053: DOUBLE
17054: EQUAL
17055: IFTRUE 17059
17057: GO 17192
17059: POP
// begin if hasStimDrugs then
17060: LD_EXP 9
17064: IFFALSE 17178
// begin wait ( 0 0$1 ) ;
17066: LD_INT 35
17068: PPUSH
17069: CALL_OW 67
// if not hasStimDrugsCollected then
17073: LD_EXP 24
17077: NOT
17078: IFFALSE 17120
// begin Say ( Heike , DH-Lab-1 ) ;
17080: LD_EXP 45
17084: PPUSH
17085: LD_STRING DH-Lab-1
17087: PPUSH
17088: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17092: LD_INT 5
17094: PPUSH
17095: LD_INT 2
17097: PPUSH
17098: LD_INT 2
17100: PPUSH
17101: CALL_OW 322
// hasStimDrugsCollected := true ;
17105: LD_ADDR_EXP 24
17109: PUSH
17110: LD_INT 1
17112: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17113: LD_STRING M1-drugs-out
17115: PPUSH
17116: CALL_OW 604
// end ; if not hasExplosionCollected then
17120: LD_EXP 23
17124: NOT
17125: IFFALSE 17143
// entranceVisitedList := entranceVisitedList diff drugsLab else
17127: LD_ADDR_EXP 16
17131: PUSH
17132: LD_EXP 16
17136: PUSH
17137: LD_INT 162
17139: DIFF
17140: ST_TO_ADDR
17141: GO 17176
// begin wait ( 0 0$3 ) ;
17143: LD_INT 105
17145: PPUSH
17146: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17150: LD_EXP 45
17154: PPUSH
17155: LD_STRING DH-Lab-2
17157: PPUSH
17158: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17162: LD_STRING M1-drugsLab-out
17164: PPUSH
17165: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17169: LD_INT 162
17171: PPUSH
17172: CALL 20310 0 1
// end ; end else
17176: GO 17190
// Say ( Heike , DH-Locked ) ;
17178: LD_EXP 45
17182: PPUSH
17183: LD_STRING DH-Locked
17185: PPUSH
17186: CALL_OW 88
// end ; ruFac :
17190: GO 18623
17192: LD_INT 61
17194: DOUBLE
17195: EQUAL
17196: IFTRUE 17200
17198: GO 17310
17200: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17201: LD_EXP 52
17205: PPUSH
17206: CALL_OW 302
17210: PUSH
17211: LD_EXP 52
17215: PUSH
17216: LD_EXP 14
17220: IN
17221: NOT
17222: AND
17223: IFFALSE 17304
// begin Say ( Heike , DH-Krastyo-1 ) ;
17225: LD_EXP 45
17229: PPUSH
17230: LD_STRING DH-Krastyo-1
17232: PPUSH
17233: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
17237: LD_EXP 52
17241: PPUSH
17242: LD_STRING DMar-Krastyo-2
17244: PPUSH
17245: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
17249: LD_EXP 52
17253: PPUSH
17254: LD_STRING DMar-Krastyo-3
17256: PPUSH
17257: CALL_OW 88
// SetSide ( Markov , 2 ) ;
17261: LD_EXP 52
17265: PPUSH
17266: LD_INT 2
17268: PPUSH
17269: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
17273: LD_ADDR_EXP 14
17277: PUSH
17278: LD_EXP 14
17282: PPUSH
17283: LD_EXP 52
17287: PPUSH
17288: CALL 66653 0 2
17292: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
17293: LD_EXP 52
17297: PPUSH
17298: CALL_OW 122
// end else
17302: GO 17308
// SayHEmpty ( ) ;
17304: CALL 15734 0 0
// end ; ruBarKam :
17308: GO 18623
17310: LD_INT 109
17312: DOUBLE
17313: EQUAL
17314: IFTRUE 17318
17316: GO 17465
17318: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17319: LD_EXP 49
17323: PPUSH
17324: CALL_OW 302
17328: PUSH
17329: LD_EXP 49
17333: PUSH
17334: LD_EXP 14
17338: IN
17339: NOT
17340: AND
17341: IFFALSE 17459
// begin Say ( Heike , DH-Kamil-1 ) ;
17343: LD_EXP 45
17347: PPUSH
17348: LD_STRING DH-Kamil-1
17350: PPUSH
17351: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17355: LD_EXP 49
17359: PPUSH
17360: LD_STRING DKam-Kamil-2
17362: PPUSH
17363: CALL_OW 88
// if IsOk ( Sophia ) then
17367: LD_EXP 51
17371: PPUSH
17372: CALL_OW 302
17376: IFFALSE 17416
// if Sophia in heikeSquad then
17378: LD_EXP 51
17382: PUSH
17383: LD_EXP 14
17387: IN
17388: IFFALSE 17404
// Say ( Kamil , DKam-Kamil-a-3 ) else
17390: LD_EXP 49
17394: PPUSH
17395: LD_STRING DKam-Kamil-a-3
17397: PPUSH
17398: CALL_OW 88
17402: GO 17416
// Say ( Kamil , DKam-Kamil-3 ) ;
17404: LD_EXP 49
17408: PPUSH
17409: LD_STRING DKam-Kamil-3
17411: PPUSH
17412: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17416: LD_EXP 49
17420: PPUSH
17421: LD_INT 2
17423: PPUSH
17424: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17428: LD_ADDR_EXP 14
17432: PUSH
17433: LD_EXP 14
17437: PPUSH
17438: LD_EXP 49
17442: PPUSH
17443: CALL 66653 0 2
17447: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17448: LD_EXP 49
17452: PPUSH
17453: CALL_OW 122
// end else
17457: GO 17463
// SayHEmpty ( ) ;
17459: CALL 15734 0 0
// end ; ruOutpost1 :
17463: GO 18623
17465: LD_INT 169
17467: DOUBLE
17468: EQUAL
17469: IFTRUE 17473
17471: GO 17710
17473: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17474: LD_EXP 54
17478: PPUSH
17479: CALL_OW 302
17483: PUSH
17484: LD_EXP 54
17488: PUSH
17489: LD_EXP 14
17493: IN
17494: NOT
17495: AND
17496: IFFALSE 17704
// begin if hasMethanol then
17498: LD_EXP 13
17502: IFFALSE 17633
// begin Say ( Heike , DH-Kurt-1 ) ;
17504: LD_EXP 45
17508: PPUSH
17509: LD_STRING DH-Kurt-1
17511: PPUSH
17512: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17516: LD_EXP 54
17520: PPUSH
17521: LD_STRING DKs-Kurt-2
17523: PPUSH
17524: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17528: LD_EXP 46
17532: PPUSH
17533: LD_INT 169
17535: PPUSH
17536: CALL_OW 296
17540: PUSH
17541: LD_INT 10
17543: LESS
17544: PUSH
17545: LD_EXP 46
17549: PUSH
17550: LD_EXP 14
17554: IN
17555: AND
17556: IFFALSE 17631
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17558: LD_EXP 46
17562: PPUSH
17563: LD_INT 100
17565: PPUSH
17566: LD_INT 37
17568: PPUSH
17569: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17573: LD_EXP 46
17577: PPUSH
17578: LD_INT 169
17580: PPUSH
17581: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17585: LD_INT 35
17587: PPUSH
17588: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17592: LD_EXP 46
17596: PPUSH
17597: LD_INT 169
17599: PPUSH
17600: CALL_OW 296
17604: PUSH
17605: LD_INT 7
17607: LESS
17608: IFFALSE 17585
// Say ( Givi , DG-Kurt-3 ) ;
17610: LD_EXP 46
17614: PPUSH
17615: LD_STRING DG-Kurt-3
17617: PPUSH
17618: CALL_OW 88
// ComStop ( Givi ) ;
17622: LD_EXP 46
17626: PPUSH
17627: CALL_OW 141
// end ; end else
17631: GO 17661
// begin Say ( Heike , DH-Kurt-1 ) ;
17633: LD_EXP 45
17637: PPUSH
17638: LD_STRING DH-Kurt-1
17640: PPUSH
17641: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17645: LD_EXP 54
17649: PPUSH
17650: LD_STRING DKs-Kurt-2
17652: PPUSH
17653: CALL_OW 88
// SpawnAdditionalRuGuards ;
17657: CALL 3584 0 0
// end ; SetSide ( Kurt , 2 ) ;
17661: LD_EXP 54
17665: PPUSH
17666: LD_INT 2
17668: PPUSH
17669: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17673: LD_ADDR_EXP 14
17677: PUSH
17678: LD_EXP 14
17682: PPUSH
17683: LD_EXP 54
17687: PPUSH
17688: CALL 66653 0 2
17692: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17693: LD_EXP 54
17697: PPUSH
17698: CALL_OW 122
// end else
17702: GO 17708
// SayHEmpty ( ) ;
17704: CALL 15734 0 0
// end ; ruOutpostBar :
17708: GO 18623
17710: LD_INT 13
17712: DOUBLE
17713: EQUAL
17714: IFTRUE 17718
17716: GO 17764
17718: POP
// begin if not hasGuardPatrolPlan then
17719: LD_EXP 18
17723: NOT
17724: IFFALSE 17758
// begin Say ( Heike , DH-PatrolPlan ) ;
17726: LD_EXP 45
17730: PPUSH
17731: LD_STRING DH-PatrolPlan
17733: PPUSH
17734: CALL_OW 88
// hasGuardPatrolPlan := true ;
17738: LD_ADDR_EXP 18
17742: PUSH
17743: LD_INT 1
17745: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17746: LD_INT 6
17748: PPUSH
17749: LD_INT 2
17751: PPUSH
17752: CALL_OW 343
// end else
17756: GO 17762
// SayHEmpty ( ) ;
17758: CALL 15734 0 0
// end ; ruKaiaBar :
17762: GO 18623
17764: LD_INT 147
17766: DOUBLE
17767: EQUAL
17768: IFTRUE 17772
17770: GO 17919
17772: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17773: LD_EXP 50
17777: PPUSH
17778: CALL_OW 302
17782: PUSH
17783: LD_EXP 50
17787: PUSH
17788: LD_EXP 14
17792: IN
17793: NOT
17794: AND
17795: IFFALSE 17917
// begin Say ( Heike , DH-Kaia-1 ) ;
17797: LD_EXP 45
17801: PPUSH
17802: LD_STRING DH-Kaia-1
17804: PPUSH
17805: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17809: LD_EXP 50
17813: PPUSH
17814: LD_STRING DK-Kaia-2
17816: PPUSH
17817: CALL_OW 88
// if hasSniperRifle then
17821: LD_EXP 11
17825: IFFALSE 17876
// begin if IsOk ( Markov ) then
17827: LD_EXP 52
17831: PPUSH
17832: CALL_OW 302
17836: IFFALSE 17852
// Say ( Kaia , DK-Kaia-3 ) else
17838: LD_EXP 50
17842: PPUSH
17843: LD_STRING DK-Kaia-3
17845: PPUSH
17846: CALL_OW 88
17850: GO 17864
// Say ( Kaia , DK-Kaia-a-3 ) ;
17852: LD_EXP 50
17856: PPUSH
17857: LD_STRING DK-Kaia-a-3
17859: PPUSH
17860: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17864: LD_EXP 45
17868: PPUSH
17869: LD_STRING DH-Kaia-4
17871: PPUSH
17872: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17876: LD_EXP 50
17880: PPUSH
17881: LD_INT 2
17883: PPUSH
17884: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17888: LD_ADDR_EXP 14
17892: PUSH
17893: LD_EXP 14
17897: PPUSH
17898: LD_EXP 50
17902: PPUSH
17903: CALL 66653 0 2
17907: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17908: LD_EXP 50
17912: PPUSH
17913: CALL_OW 122
// end ; end ; ruWeaponsBar :
17917: GO 18623
17919: LD_INT 137
17921: DOUBLE
17922: EQUAL
17923: IFTRUE 17927
17925: GO 18622
17927: POP
// begin if hasWeapons then
17928: LD_EXP 19
17932: IFFALSE 18608
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17934: LD_ADDR_EXP 16
17938: PUSH
17939: LD_EXP 16
17943: PUSH
17944: LD_INT 137
17946: DIFF
17947: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17948: LD_ADDR_VAR 0 4
17952: PUSH
17953: LD_EXP 14
17957: PPUSH
17958: LD_INT 91
17960: PUSH
17961: LD_EXP 45
17965: PUSH
17966: LD_INT 8
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: PPUSH
17974: CALL_OW 72
17978: ST_TO_ADDR
// if not heikeSquad or not tmp then
17979: LD_EXP 14
17983: NOT
17984: PUSH
17985: LD_VAR 0 4
17989: NOT
17990: OR
17991: IFFALSE 18007
// Say ( Heike , DH-Weapons-Alone ) else
17993: LD_EXP 45
17997: PPUSH
17998: LD_STRING DH-Weapons-Alone
18000: PPUSH
18001: CALL_OW 88
18005: GO 18606
// begin if not firstArmouryDialog then
18007: LD_EXP 39
18011: NOT
18012: IFFALSE 18071
// begin Say ( Heike , DH-Weapons-1 ) ;
18014: LD_EXP 45
18018: PPUSH
18019: LD_STRING DH-Weapons-1
18021: PPUSH
18022: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
18026: LD_EXP 45
18030: PPUSH
18031: LD_STRING DH-Weapons-2
18033: PPUSH
18034: CALL_OW 88
// Query ( Weapons ) ;
18038: LD_STRING Weapons
18040: PPUSH
18041: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
18045: LD_INT 65
18047: PPUSH
18048: LD_INT 1
18050: PPUSH
18051: CALL_OW 424
// canEquipWeapons := true ;
18055: LD_ADDR_EXP 41
18059: PUSH
18060: LD_INT 1
18062: ST_TO_ADDR
// firstArmouryDialog := true ;
18063: LD_ADDR_EXP 39
18067: PUSH
18068: LD_INT 1
18070: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
18071: LD_EXP 8
18075: PUSH
18076: LD_EXP 50
18080: PUSH
18081: LD_VAR 0 4
18085: IN
18086: AND
18087: PUSH
18088: LD_EXP 50
18092: PPUSH
18093: CALL_OW 257
18097: PUSH
18098: LD_INT 34
18100: NONEQUAL
18101: AND
18102: IFFALSE 18248
// begin SetSide ( Kaia , 5 ) ;
18104: LD_EXP 50
18108: PPUSH
18109: LD_INT 5
18111: PPUSH
18112: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
18116: LD_EXP 50
18120: PPUSH
18121: LD_INT 137
18123: PPUSH
18124: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18128: LD_INT 35
18130: PPUSH
18131: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18135: LD_EXP 50
18139: PPUSH
18140: CALL_OW 310
18144: IFFALSE 18128
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18146: LD_EXP 45
18150: PPUSH
18151: LD_STRING DH-Kaia-Revolver-2
18153: PPUSH
18154: CALL_OW 88
// SetClassKaiaRevolver ;
18158: CALL 1761 0 0
// hasRevolver := false ;
18162: LD_ADDR_EXP 8
18166: PUSH
18167: LD_INT 0
18169: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18170: LD_EXP 50
18174: PPUSH
18175: LD_INT 2
18177: PPUSH
18178: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18182: LD_EXP 50
18186: PPUSH
18187: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18191: LD_EXP 50
18195: PPUSH
18196: CALL_OW 257
18200: PUSH
18201: LD_INT 32
18203: EQUAL
18204: PUSH
18205: LD_EXP 47
18209: PUSH
18210: LD_EXP 14
18214: IN
18215: AND
18216: PUSH
18217: LD_EXP 47
18221: PPUSH
18222: CALL_OW 255
18226: PUSH
18227: LD_INT 2
18229: EQUAL
18230: AND
18231: IFFALSE 18248
// begin giveSniperRifleToMike := true ;
18233: LD_ADDR_EXP 42
18237: PUSH
18238: LD_INT 1
18240: ST_TO_ADDR
// Query ( QSniperMike ) ;
18241: LD_STRING QSniperMike
18243: PPUSH
18244: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
18248: LD_EXP 46
18252: PUSH
18253: LD_VAR 0 4
18257: IN
18258: PUSH
18259: LD_EXP 46
18263: PPUSH
18264: CALL_OW 257
18268: PUSH
18269: LD_INT 33
18271: EQUAL
18272: AND
18273: IFFALSE 18414
// begin SetSide ( Givi , 5 ) ;
18275: LD_EXP 46
18279: PPUSH
18280: LD_INT 5
18282: PPUSH
18283: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18287: LD_EXP 46
18291: PPUSH
18292: LD_INT 137
18294: PPUSH
18295: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18299: LD_INT 35
18301: PPUSH
18302: CALL_OW 67
// until IsInUnit ( Givi ) ;
18306: LD_EXP 46
18310: PPUSH
18311: CALL_OW 310
18315: IFFALSE 18299
// Say ( Givi , DG-Weapons-3 ) ;
18317: LD_EXP 46
18321: PPUSH
18322: LD_STRING DG-Weapons-3
18324: PPUSH
18325: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18329: LD_EXP 45
18333: PPUSH
18334: LD_STRING DH-Weapons-4
18336: PPUSH
18337: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18341: LD_EXP 46
18345: PPUSH
18346: LD_STRING DG-Weapons-5
18348: PPUSH
18349: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18353: LD_EXP 46
18357: PPUSH
18358: LD_INT 11
18360: PPUSH
18361: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18365: LD_EXP 46
18369: PPUSH
18370: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18374: LD_EXP 46
18378: PPUSH
18379: LD_INT 2
18381: PPUSH
18382: CALL_OW 235
// if hasRevolver then
18386: LD_EXP 8
18390: IFFALSE 18412
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18392: LD_EXP 45
18396: PPUSH
18397: LD_STRING DH-Kaia-Revolver-1
18399: PPUSH
18400: CALL_OW 88
// heikeHasRevolver := true ;
18404: LD_ADDR_EXP 20
18408: PUSH
18409: LD_INT 1
18411: ST_TO_ADDR
// end ; end else
18412: GO 18606
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18414: LD_EXP 49
18418: PUSH
18419: LD_VAR 0 4
18423: IN
18424: PUSH
18425: LD_EXP 49
18429: PPUSH
18430: CALL_OW 257
18434: PUSH
18435: LD_INT 33
18437: EQUAL
18438: AND
18439: IFFALSE 18568
// begin SetSide ( Kamil , 5 ) ;
18441: LD_EXP 49
18445: PPUSH
18446: LD_INT 5
18448: PPUSH
18449: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18453: LD_EXP 49
18457: PPUSH
18458: LD_INT 137
18460: PPUSH
18461: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18465: LD_INT 35
18467: PPUSH
18468: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18472: LD_EXP 49
18476: PPUSH
18477: CALL_OW 310
18481: IFFALSE 18465
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18483: LD_EXP 49
18487: PPUSH
18488: LD_STRING DKam-Weapons-a-3
18490: PPUSH
18491: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18495: LD_EXP 45
18499: PPUSH
18500: LD_STRING DH-Weapons-a-4
18502: PPUSH
18503: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18507: LD_EXP 49
18511: PPUSH
18512: LD_INT 11
18514: PPUSH
18515: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18519: LD_EXP 49
18523: PPUSH
18524: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18528: LD_EXP 49
18532: PPUSH
18533: LD_INT 2
18535: PPUSH
18536: CALL_OW 235
// if hasRevolver then
18540: LD_EXP 8
18544: IFFALSE 18566
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18546: LD_EXP 45
18550: PPUSH
18551: LD_STRING DH-Kaia-Revolver-1
18553: PPUSH
18554: CALL_OW 88
// heikeHasRevolver := true ;
18558: LD_ADDR_EXP 20
18562: PUSH
18563: LD_INT 1
18565: ST_TO_ADDR
// end ; end else
18566: GO 18606
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18568: LD_EXP 45
18572: PPUSH
18573: LD_STRING DH-Weapons-Alone-2
18575: PPUSH
18576: CALL_OW 88
// if hasRevolver then
18580: LD_EXP 8
18584: IFFALSE 18606
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18586: LD_EXP 45
18590: PPUSH
18591: LD_STRING DH-Kaia-Revolver-1a
18593: PPUSH
18594: CALL_OW 88
// heikeHasRevolver := true ;
18598: LD_ADDR_EXP 20
18602: PUSH
18603: LD_INT 1
18605: ST_TO_ADDR
// end ; end ; end ; end else
18606: GO 18620
// Say ( Heike , DH-Locked ) ;
18608: LD_EXP 45
18612: PPUSH
18613: LD_STRING DH-Locked
18615: PPUSH
18616: CALL_OW 88
// end ; end ;
18620: GO 18623
18622: POP
// SetSide ( building , 3 ) ;
18623: LD_VAR 0 1
18627: PPUSH
18628: LD_INT 3
18630: PPUSH
18631: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
18635: LD_VAR 0 1
18639: PPUSH
18640: CALL 19765 0 1
// wait ( 0 0$0.3 ) ;
18644: LD_INT 10
18646: PPUSH
18647: CALL_OW 67
// ComExitBuilding ( Heike ) ;
18651: LD_EXP 45
18655: PPUSH
18656: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18660: LD_EXP 45
18664: PPUSH
18665: LD_INT 2
18667: PPUSH
18668: CALL_OW 235
// InGameOff ;
18672: CALL_OW 9
// end ;
18676: LD_VAR 0 2
18680: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18681: LD_EXP 30
18685: NOT
18686: PUSH
18687: LD_EXP 17
18691: NOT
18692: AND
18693: PUSH
18694: LD_INT 22
18696: PUSH
18697: LD_INT 5
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 21
18706: PUSH
18707: LD_INT 1
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PPUSH
18718: CALL_OW 69
18722: PUSH
18723: LD_INT 0
18725: EQUAL
18726: AND
18727: PUSH
18728: LD_INT 22
18730: PUSH
18731: LD_INT 4
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 21
18740: PUSH
18741: LD_INT 1
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PPUSH
18752: CALL_OW 69
18756: PUSH
18757: LD_INT 0
18759: EQUAL
18760: PUSH
18761: LD_EXP 25
18765: AND
18766: PUSH
18767: LD_EXP 25
18771: NOT
18772: OR
18773: AND
18774: IFFALSE 18806
18776: GO 18778
18778: DISABLE
// begin DialogueOn ;
18779: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18783: LD_EXP 45
18787: PPUSH
18788: LD_STRING DH-Alarm-2
18790: PPUSH
18791: CALL_OW 88
// DialogueOff ;
18795: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18799: LD_STRING M1-people-out
18801: PPUSH
18802: CALL_OW 337
// end ;
18806: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
18807: LD_EXP 47
18811: PPUSH
18812: CALL_OW 255
18816: PUSH
18817: LD_INT 2
18819: EQUAL
18820: PUSH
18821: LD_EXP 47
18825: PUSH
18826: LD_EXP 14
18830: IN
18831: AND
18832: PUSH
18833: LD_EXP 45
18837: PPUSH
18838: LD_EXP 47
18842: PPUSH
18843: CALL_OW 296
18847: PUSH
18848: LD_INT 6
18850: LESS
18851: AND
18852: PUSH
18853: LD_EXP 30
18857: NOT
18858: AND
18859: PUSH
18860: LD_EXP 42
18864: AND
18865: IFFALSE 18882
18867: GO 18869
18869: DISABLE
// SetClass ( Mike , class_hunter ) ;
18870: LD_EXP 47
18874: PPUSH
18875: LD_INT 32
18877: PPUSH
18878: CALL_OW 336
18882: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
18883: LD_EXP 41
18887: PUSH
18888: LD_EXP 40
18892: AND
18893: PUSH
18894: LD_INT 137
18896: PPUSH
18897: CALL_OW 255
18901: PUSH
18902: LD_INT 3
18904: EQUAL
18905: AND
18906: PUSH
18907: LD_EXP 14
18911: PPUSH
18912: LD_INT 95
18914: PUSH
18915: LD_INT 65
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 22
18924: PUSH
18925: LD_INT 2
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 25
18934: PUSH
18935: LD_INT 33
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: PPUSH
18947: CALL_OW 72
18951: AND
18952: PUSH
18953: LD_INT 2
18955: PPUSH
18956: LD_INT 3
18958: PPUSH
18959: CALL_OW 81
18963: PUSH
18964: LD_INT 2
18966: EQUAL
18967: NOT
18968: AND
18969: PUSH
18970: LD_EXP 65
18974: PPUSH
18975: LD_INT 137
18977: PPUSH
18978: CALL_OW 296
18982: PUSH
18983: LD_INT 12
18985: LESS
18986: NOT
18987: AND
18988: IFFALSE 19242
18990: GO 18992
18992: DISABLE
18993: LD_INT 0
18995: PPUSH
18996: PPUSH
// begin enable ;
18997: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
18998: LD_ADDR_VAR 0 2
19002: PUSH
19003: LD_EXP 14
19007: PPUSH
19008: LD_INT 95
19010: PUSH
19011: LD_INT 65
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 22
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 25
19030: PUSH
19031: LD_INT 33
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 72
19047: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
19048: LD_STRING QWeapons
19050: PPUSH
19051: CALL_OW 97
19055: PUSH
19056: LD_INT 1
19058: EQUAL
19059: IFFALSE 19242
// begin for i in tmp do
19061: LD_ADDR_VAR 0 1
19065: PUSH
19066: LD_VAR 0 2
19070: PUSH
19071: FOR_IN
19072: IFFALSE 19240
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
19074: LD_INT 137
19076: PPUSH
19077: CALL_OW 313
19081: PUSH
19082: LD_INT 6
19084: EQUAL
19085: IFFALSE 19089
// continue ;
19087: GO 19071
// SetSide ( i , 3 ) ;
19089: LD_VAR 0 1
19093: PPUSH
19094: LD_INT 3
19096: PPUSH
19097: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
19101: LD_VAR 0 1
19105: PPUSH
19106: LD_INT 137
19108: PPUSH
19109: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
19113: LD_ADDR_EXP 40
19117: PUSH
19118: LD_EXP 40
19122: PPUSH
19123: CALL 68036 0 1
19127: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
19128: LD_INT 10
19130: PPUSH
19131: CALL_OW 67
// until IsInUnit ( i ) ;
19135: LD_VAR 0 1
19139: PPUSH
19140: CALL_OW 310
19144: IFFALSE 19128
// SetClass ( i , class_soldier ) ;
19146: LD_VAR 0 1
19150: PPUSH
19151: LD_INT 1
19153: PPUSH
19154: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
19158: LD_VAR 0 1
19162: PPUSH
19163: CALL_OW 122
// wait ( 0 0$1 ) ;
19167: LD_INT 35
19169: PPUSH
19170: CALL_OW 67
// until not IsInUnit ( i ) ;
19174: LD_VAR 0 1
19178: PPUSH
19179: CALL_OW 310
19183: NOT
19184: IFFALSE 19158
// SetSide ( i , 2 ) ;
19186: LD_VAR 0 1
19190: PPUSH
19191: LD_INT 2
19193: PPUSH
19194: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
19198: LD_VAR 0 1
19202: PPUSH
19203: LD_INT 191
19205: PPUSH
19206: LD_INT 126
19208: PPUSH
19209: CALL_OW 171
// if weaponsAmount = 0 then
19213: LD_EXP 40
19217: PUSH
19218: LD_INT 0
19220: EQUAL
19221: IFFALSE 19238
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
19223: LD_INT 65
19225: PPUSH
19226: LD_INT 0
19228: PPUSH
19229: CALL_OW 424
// disable ;
19233: DISABLE
// exit ;
19234: POP
19235: POP
19236: GO 19242
// end ; end ;
19238: GO 19071
19240: POP
19241: POP
// end ; end ; end_of_file
19242: PPOPN 2
19244: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
19245: LD_VAR 0 1
19249: PUSH
19250: LD_INT 3
19252: DOUBLE
19253: EQUAL
19254: IFTRUE 19258
19256: GO 19288
19258: POP
// begin repeat wait ( 0 0$1 ) ;
19259: LD_INT 35
19261: PPUSH
19262: CALL_OW 67
// CenterOnUnits ( Heike ) ;
19266: LD_EXP 45
19270: PPUSH
19271: CALL_OW 85
// until IsDying ( Heike ) ;
19275: LD_EXP 45
19279: PPUSH
19280: CALL_OW 303
19284: IFFALSE 19259
// end ; end ;
19286: GO 19289
19288: POP
// end ;
19289: PPOPN 1
19291: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
19292: LD_OWVAR 59
19296: IFFALSE 19300
// exit ;
19298: GO 19374
// if showPlaceEvent then
19300: LD_INT 4
19302: IFFALSE 19374
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
19304: LD_VAR 0 2
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: LD_INT 2
19316: PPUSH
19317: LD_INT 6
19319: NEG
19320: PPUSH
19321: CALL_OW 330
// CenterOnXY ( x , y ) ;
19325: LD_VAR 0 2
19329: PPUSH
19330: LD_VAR 0 3
19334: PPUSH
19335: CALL_OW 84
// wait ( time ) ;
19339: LD_VAR 0 4
19343: PPUSH
19344: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
19348: LD_EXP 45
19352: PPUSH
19353: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
19357: LD_VAR 0 2
19361: PPUSH
19362: LD_VAR 0 3
19366: PPUSH
19367: LD_INT 2
19369: PPUSH
19370: CALL_OW 331
// end ; end ;
19374: PPOPN 7
19376: END
// on UnitDestroyed ( un ) do var x , y ;
19377: LD_INT 0
19379: PPUSH
19380: PPUSH
// begin if un = Heike and hasNormalScene then
19381: LD_VAR 0 1
19385: PUSH
19386: LD_EXP 45
19390: EQUAL
19391: PUSH
19392: LD_EXP 5
19396: AND
19397: IFFALSE 19421
// if loseCounter then
19399: LD_EXP 32
19403: IFFALSE 19414
// YouLost ( HeikeNoSurrender ) else
19405: LD_STRING HeikeNoSurrender
19407: PPUSH
19408: CALL_OW 104
19412: GO 19421
// YouLost ( Heike ) ;
19414: LD_STRING Heike
19416: PPUSH
19417: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
19421: LD_VAR 0 1
19425: PPUSH
19426: CALL_OW 255
19430: PUSH
19431: LD_INT 2
19433: EQUAL
19434: PUSH
19435: LD_VAR 0 1
19439: PPUSH
19440: CALL_OW 247
19444: PUSH
19445: LD_INT 1
19447: EQUAL
19448: AND
19449: IFFALSE 19466
// loseCounter := Inc ( loseCounter ) ;
19451: LD_ADDR_EXP 32
19455: PUSH
19456: LD_EXP 32
19460: PPUSH
19461: CALL 68014 0 1
19465: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
19466: LD_VAR 0 1
19470: PPUSH
19471: CALL_OW 255
19475: PUSH
19476: LD_INT 6
19478: EQUAL
19479: PUSH
19480: LD_EXP 17
19484: NOT
19485: AND
19486: PUSH
19487: LD_VAR 0 1
19491: PUSH
19492: LD_EXP 70
19496: IN
19497: AND
19498: IFFALSE 19602
// begin x := GetX ( un ) ;
19500: LD_ADDR_VAR 0 2
19504: PUSH
19505: LD_VAR 0 1
19509: PPUSH
19510: CALL_OW 250
19514: ST_TO_ADDR
// y := GetY ( un ) ;
19515: LD_ADDR_VAR 0 3
19519: PUSH
19520: LD_VAR 0 1
19524: PPUSH
19525: CALL_OW 251
19529: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
19530: LD_ADDR_EXP 43
19534: PUSH
19535: LD_EXP 43
19539: PPUSH
19540: LD_VAR 0 2
19544: PUSH
19545: LD_VAR 0 3
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PPUSH
19554: CALL 66653 0 2
19558: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
19559: LD_ADDR_EXP 70
19563: PUSH
19564: LD_EXP 70
19568: PUSH
19569: LD_VAR 0 1
19573: DIFF
19574: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
19575: LD_INT 3
19577: PPUSH
19578: LD_VAR 0 2
19582: PPUSH
19583: LD_VAR 0 3
19587: PPUSH
19588: CALL_OW 293
19592: IFFALSE 19602
// isAlarm := true ;
19594: LD_ADDR_EXP 17
19598: PUSH
19599: LD_INT 1
19601: ST_TO_ADDR
// end ; end ;
19602: PPOPN 3
19604: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
19605: LD_EXP 44
19609: IFFALSE 19613
// exit ;
19611: GO 19661
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
19613: LD_VAR 0 1
19617: PUSH
19618: LD_INT 2
19620: EQUAL
19621: PUSH
19622: LD_VAR 0 2
19626: PUSH
19627: LD_INT 3
19629: EQUAL
19630: AND
19631: PUSH
19632: LD_VAR 0 1
19636: PUSH
19637: LD_INT 3
19639: EQUAL
19640: PUSH
19641: LD_VAR 0 2
19645: PUSH
19646: LD_INT 2
19648: EQUAL
19649: AND
19650: OR
19651: IFFALSE 19661
// isAlarm := true ;
19653: LD_ADDR_EXP 17
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// end ; end_of_file
19661: PPOPN 2
19663: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
19664: LD_INT 0
19666: PPUSH
19667: PPUSH
19668: PPUSH
// u1 := IsInUnit ( unit1 ) ;
19669: LD_ADDR_VAR 0 4
19673: PUSH
19674: LD_VAR 0 1
19678: PPUSH
19679: CALL_OW 310
19683: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
19684: LD_ADDR_VAR 0 5
19688: PUSH
19689: LD_VAR 0 2
19693: PPUSH
19694: CALL_OW 310
19698: ST_TO_ADDR
// result := u1 and u1 = u2 ;
19699: LD_ADDR_VAR 0 3
19703: PUSH
19704: LD_VAR 0 4
19708: PUSH
19709: LD_VAR 0 4
19713: PUSH
19714: LD_VAR 0 5
19718: EQUAL
19719: AND
19720: ST_TO_ADDR
// end ;
19721: LD_VAR 0 3
19725: RET
// export function ShowPlace ( x , y , time ) ; begin
19726: LD_INT 0
19728: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
19729: LD_INT 4
19731: PPUSH
19732: LD_VAR 0 1
19736: PPUSH
19737: LD_VAR 0 2
19741: PPUSH
19742: LD_VAR 0 3
19746: PPUSH
19747: LD_INT 0
19749: PPUSH
19750: LD_INT 0
19752: PPUSH
19753: LD_INT 0
19755: PPUSH
19756: CALL_OW 595
// end ;
19760: LD_VAR 0 4
19764: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
19765: LD_INT 0
19767: PPUSH
19768: PPUSH
19769: PPUSH
19770: PPUSH
19771: PPUSH
19772: PPUSH
// if not IsOk ( building ) then
19773: LD_VAR 0 1
19777: PPUSH
19778: CALL_OW 302
19782: NOT
19783: IFFALSE 19787
// exit ;
19785: GO 20034
// x := GetX ( building ) ;
19787: LD_ADDR_VAR 0 4
19791: PUSH
19792: LD_VAR 0 1
19796: PPUSH
19797: CALL_OW 250
19801: ST_TO_ADDR
// y := GetY ( building ) ;
19802: LD_ADDR_VAR 0 5
19806: PUSH
19807: LD_VAR 0 1
19811: PPUSH
19812: CALL_OW 251
19816: ST_TO_ADDR
// d := GetDir ( building ) ;
19817: LD_ADDR_VAR 0 6
19821: PUSH
19822: LD_VAR 0 1
19826: PPUSH
19827: CALL_OW 254
19831: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
19832: LD_ADDR_VAR 0 7
19836: PUSH
19837: LD_VAR 0 4
19841: PPUSH
19842: LD_VAR 0 6
19846: PPUSH
19847: LD_INT 3
19849: PPUSH
19850: CALL_OW 272
19854: PUSH
19855: LD_VAR 0 5
19859: PPUSH
19860: LD_VAR 0 6
19864: PPUSH
19865: LD_INT 3
19867: PPUSH
19868: CALL_OW 273
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
19877: LD_VAR 0 7
19881: PUSH
19882: LD_INT 1
19884: ARRAY
19885: PPUSH
19886: LD_VAR 0 7
19890: PUSH
19891: LD_INT 2
19893: ARRAY
19894: PPUSH
19895: CALL_OW 488
19899: NOT
19900: IFFALSE 19904
// exit ;
19902: GO 20034
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
19904: LD_ADDR_VAR 0 2
19908: PUSH
19909: LD_INT 92
19911: PUSH
19912: LD_VAR 0 4
19916: PUSH
19917: LD_VAR 0 5
19921: PUSH
19922: LD_INT 4
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 3
19933: PUSH
19934: LD_INT 54
19936: PUSH
19937: EMPTY
19938: LIST
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PPUSH
19948: CALL_OW 69
19952: ST_TO_ADDR
// if not result then
19953: LD_VAR 0 2
19957: NOT
19958: IFFALSE 19962
// exit ;
19960: GO 20034
// for i in result do
19962: LD_ADDR_VAR 0 3
19966: PUSH
19967: LD_VAR 0 2
19971: PUSH
19972: FOR_IN
19973: IFFALSE 20032
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
19975: LD_VAR 0 3
19979: PPUSH
19980: LD_VAR 0 3
19984: PPUSH
19985: CALL_OW 250
19989: PPUSH
19990: LD_VAR 0 6
19994: PPUSH
19995: LD_INT 3
19997: PPUSH
19998: CALL_OW 272
20002: PPUSH
20003: LD_VAR 0 3
20007: PPUSH
20008: CALL_OW 251
20012: PPUSH
20013: LD_VAR 0 6
20017: PPUSH
20018: LD_INT 3
20020: PPUSH
20021: CALL_OW 273
20025: PPUSH
20026: CALL_OW 111
20030: GO 19972
20032: POP
20033: POP
// end ;
20034: LD_VAR 0 2
20038: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
20039: LD_INT 0
20041: PPUSH
20042: PPUSH
20043: PPUSH
20044: PPUSH
20045: PPUSH
20046: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
20047: LD_VAR 0 1
20051: PPUSH
20052: CALL_OW 302
20056: NOT
20057: PUSH
20058: LD_VAR 0 2
20062: PPUSH
20063: CALL_OW 302
20067: NOT
20068: OR
20069: PUSH
20070: LD_VAR 0 2
20074: PPUSH
20075: CALL_OW 313
20079: PUSH
20080: LD_INT 6
20082: EQUAL
20083: OR
20084: IFFALSE 20088
// exit ;
20086: GO 20305
// btype := GetBType ( building ) ;
20088: LD_ADDR_VAR 0 8
20092: PUSH
20093: LD_VAR 0 2
20097: PPUSH
20098: CALL_OW 266
20102: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
20103: LD_VAR 0 8
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: LD_INT 2
20116: PUSH
20117: LD_INT 4
20119: PUSH
20120: LD_INT 5
20122: PUSH
20123: LD_INT 3
20125: PUSH
20126: LD_INT 6
20128: PUSH
20129: LD_INT 7
20131: PUSH
20132: LD_INT 8
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: IN
20146: NOT
20147: IFFALSE 20151
// exit ;
20149: GO 20305
// x := GetX ( building ) ;
20151: LD_ADDR_VAR 0 4
20155: PUSH
20156: LD_VAR 0 2
20160: PPUSH
20161: CALL_OW 250
20165: ST_TO_ADDR
// y := GetY ( building ) ;
20166: LD_ADDR_VAR 0 5
20170: PUSH
20171: LD_VAR 0 2
20175: PPUSH
20176: CALL_OW 251
20180: ST_TO_ADDR
// d := GetDir ( building ) ;
20181: LD_ADDR_VAR 0 6
20185: PUSH
20186: LD_VAR 0 2
20190: PPUSH
20191: CALL_OW 254
20195: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20196: LD_ADDR_VAR 0 7
20200: PUSH
20201: LD_VAR 0 4
20205: PPUSH
20206: LD_VAR 0 6
20210: PPUSH
20211: LD_INT 3
20213: PPUSH
20214: CALL_OW 272
20218: PUSH
20219: LD_VAR 0 5
20223: PPUSH
20224: LD_VAR 0 6
20228: PPUSH
20229: LD_INT 3
20231: PPUSH
20232: CALL_OW 273
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20241: LD_VAR 0 7
20245: PUSH
20246: LD_INT 1
20248: ARRAY
20249: PPUSH
20250: LD_VAR 0 7
20254: PUSH
20255: LD_INT 2
20257: ARRAY
20258: PPUSH
20259: CALL_OW 488
20263: NOT
20264: IFFALSE 20268
// exit ;
20266: GO 20305
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
20268: LD_ADDR_VAR 0 3
20272: PUSH
20273: LD_VAR 0 1
20277: PPUSH
20278: LD_VAR 0 7
20282: PUSH
20283: LD_INT 1
20285: ARRAY
20286: PPUSH
20287: LD_VAR 0 7
20291: PUSH
20292: LD_INT 2
20294: ARRAY
20295: PPUSH
20296: CALL_OW 297
20300: PUSH
20301: LD_INT 4
20303: LESS
20304: ST_TO_ADDR
// end ;
20305: LD_VAR 0 3
20309: RET
// export function PlaceExplosives ( building ) ; begin
20310: LD_INT 0
20312: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
20313: LD_ADDR_EXP 29
20317: PUSH
20318: LD_EXP 29
20322: PPUSH
20323: LD_VAR 0 1
20327: PPUSH
20328: CALL 66653 0 2
20332: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
20333: LD_VAR 0 1
20337: PPUSH
20338: CALL_OW 250
20342: PPUSH
20343: LD_VAR 0 1
20347: PPUSH
20348: CALL_OW 251
20352: PPUSH
20353: LD_STRING PlantBomb
20355: PPUSH
20356: CALL_OW 366
// end ;
20360: LD_VAR 0 2
20364: RET
// export function CreateNature ; var i ; begin
20365: LD_INT 0
20367: PPUSH
20368: PPUSH
// PrepareFrog ;
20369: CALL 63130 0 0
// for i := 1 to 3 do
20373: LD_ADDR_VAR 0 2
20377: PUSH
20378: DOUBLE
20379: LD_INT 1
20381: DEC
20382: ST_TO_ADDR
20383: LD_INT 3
20385: PUSH
20386: FOR_TO
20387: IFFALSE 20406
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
20389: CALL_OW 44
20393: PPUSH
20394: LD_INT 24
20396: PPUSH
20397: LD_INT 0
20399: PPUSH
20400: CALL_OW 49
20404: GO 20386
20406: POP
20407: POP
// end ;
20408: LD_VAR 0 1
20412: RET
// export function MarkBuilding ( building , marker ) ; begin
20413: LD_INT 0
20415: PPUSH
// if marker then
20416: LD_VAR 0 2
20420: IFFALSE 20467
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
20422: LD_VAR 0 1
20426: PPUSH
20427: CALL_OW 250
20431: PPUSH
20432: LD_VAR 0 1
20436: PPUSH
20437: CALL_OW 251
20441: PPUSH
20442: LD_INT 2
20444: PPUSH
20445: LD_INT 3
20447: NEG
20448: PPUSH
20449: CALL_OW 330
// SetBName ( building , target ) ;
20453: LD_VAR 0 1
20457: PPUSH
20458: LD_STRING target
20460: PPUSH
20461: CALL_OW 500
// end else
20465: GO 20506
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
20467: LD_VAR 0 1
20471: PPUSH
20472: CALL_OW 250
20476: PPUSH
20477: LD_VAR 0 1
20481: PPUSH
20482: CALL_OW 251
20486: PPUSH
20487: LD_INT 2
20489: PPUSH
20490: CALL_OW 331
// SetBName ( building ,  ) ;
20494: LD_VAR 0 1
20498: PPUSH
20499: LD_STRING 
20501: PPUSH
20502: CALL_OW 500
// end ; end ; end_of_file
20506: LD_VAR 0 3
20510: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
20511: LD_INT 0
20513: PPUSH
// lockerCodeValid := false ;
20514: LD_ADDR_EXP 71
20518: PUSH
20519: LD_INT 0
20521: ST_TO_ADDR
// if not step then
20522: LD_LOC 1
20526: NOT
20527: IFFALSE 20537
// step := 1 ;
20529: LD_ADDR_LOC 1
20533: PUSH
20534: LD_INT 1
20536: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
20537: LD_STRING HEscape
20539: PUSH
20540: LD_LOC 1
20544: STR
20545: PPUSH
20546: CALL_OW 97
20550: PUSH
20551: LD_INT 1
20553: DOUBLE
20554: EQUAL
20555: IFTRUE 20559
20557: GO 20566
20559: POP
// LockerMinigameSearch ; 2 :
20560: CALL 20599 0 0
20564: GO 20582
20566: LD_INT 2
20568: DOUBLE
20569: EQUAL
20570: IFTRUE 20574
20572: GO 20581
20574: POP
// LockerMinigameSetCode ; end ;
20575: CALL 20673 0 0
20579: GO 20582
20581: POP
// if lockerCodeValid then
20582: LD_EXP 71
20586: IFFALSE 20590
// exit ;
20588: GO 20594
// StartLockerMinigame ;
20590: CALL 20511 0 0
// end ;
20594: LD_VAR 0 1
20598: RET
// function LockerMinigameSearch ; begin
20599: LD_INT 0
20601: PPUSH
// if code then
20602: LD_LOC 2
20606: IFFALSE 20622
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
20608: LD_EXP 45
20612: PPUSH
20613: LD_STRING DH-Escape-3-Hint-0
20615: PPUSH
20616: CALL_OW 88
// exit ;
20620: GO 20668
// end ; Randomize ;
20622: CALL_OW 10
// code := rand ( 1 , 5 ) ;
20626: LD_ADDR_LOC 2
20630: PUSH
20631: LD_INT 1
20633: PPUSH
20634: LD_INT 5
20636: PPUSH
20637: CALL_OW 12
20641: ST_TO_ADDR
// step := 2 ;
20642: LD_ADDR_LOC 1
20646: PUSH
20647: LD_INT 2
20649: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
20650: LD_EXP 45
20654: PPUSH
20655: LD_STRING DH-Escape-3-Hint-
20657: PUSH
20658: LD_LOC 2
20662: STR
20663: PPUSH
20664: CALL_OW 88
// end ;
20668: LD_VAR 0 1
20672: RET
// function LockerMinigameSetCode ; begin
20673: LD_INT 0
20675: PPUSH
// if not code then
20676: LD_LOC 2
20680: NOT
20681: IFFALSE 20691
// code := 0 ;
20683: LD_ADDR_LOC 2
20687: PUSH
20688: LD_INT 0
20690: ST_TO_ADDR
// lockerBusy := true ;
20691: LD_ADDR_EXP 72
20695: PUSH
20696: LD_INT 1
20698: ST_TO_ADDR
// InGameOff ;
20699: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
20703: LD_STRING initLockerMinigame("
20705: PUSH
20706: LD_LOC 2
20710: STR
20711: PUSH
20712: LD_STRING ")
20714: STR
20715: PPUSH
20716: CALL_OW 559
// step := 3 ;
20720: LD_ADDR_LOC 1
20724: PUSH
20725: LD_INT 3
20727: ST_TO_ADDR
// repeat wait ( 1 ) ;
20728: LD_INT 1
20730: PPUSH
20731: CALL_OW 67
// until not lockerBusy ;
20735: LD_EXP 72
20739: NOT
20740: IFFALSE 20728
// InGameOn ;
20742: CALL_OW 8
// if not lockerCodeValid then
20746: LD_EXP 71
20750: NOT
20751: IFFALSE 20777
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
20753: LD_EXP 45
20757: PPUSH
20758: LD_STRING DH-Escape-3-Fail-
20760: PUSH
20761: LD_INT 1
20763: PPUSH
20764: LD_INT 2
20766: PPUSH
20767: CALL_OW 12
20771: STR
20772: PPUSH
20773: CALL_OW 88
// end ; end_of_file
20777: LD_VAR 0 1
20781: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
20782: LD_VAR 0 2
20786: PUSH
20787: LD_INT 102
20789: EQUAL
20790: IFFALSE 20812
// begin lockerBusy := false ;
20792: LD_ADDR_EXP 72
20796: PUSH
20797: LD_INT 0
20799: ST_TO_ADDR
// lockerCodeValid := p3 ;
20800: LD_ADDR_EXP 71
20804: PUSH
20805: LD_VAR 0 3
20809: ST_TO_ADDR
// end else
20810: GO 20866
// if p2 = 103 then
20812: LD_VAR 0 2
20816: PUSH
20817: LD_INT 103
20819: EQUAL
20820: IFFALSE 20832
// begin weatherBusy := false ;
20822: LD_ADDR_EXP 37
20826: PUSH
20827: LD_INT 0
20829: ST_TO_ADDR
// end else
20830: GO 20866
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
20832: LD_VAR 0 1
20836: PPUSH
20837: LD_VAR 0 2
20841: PPUSH
20842: LD_VAR 0 3
20846: PPUSH
20847: LD_VAR 0 4
20851: PPUSH
20852: LD_VAR 0 5
20856: PPUSH
20857: LD_VAR 0 6
20861: PPUSH
20862: CALL 71271 0 6
// end ;
20866: PPOPN 6
20868: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
20869: LD_STRING killGameMusic();
20871: PPUSH
20872: CALL_OW 559
// PlayOriginalMusic ;
20876: CALL 91824 0 0
// SOS_MapStart ( ) ;
20880: CALL 71175 0 0
// end ; end_of_file
20884: PPOPN 1
20886: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
20887: LD_EXP 17
20891: NOT
20892: PUSH
20893: LD_EXP 70
20897: AND
20898: IFFALSE 21478
20900: GO 20902
20902: DISABLE
20903: LD_INT 0
20905: PPUSH
20906: PPUSH
20907: PPUSH
20908: PPUSH
20909: PPUSH
// begin enable ;
20910: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
20911: LD_ADDR_VAR 0 3
20915: PUSH
20916: LD_INT 26
20918: PUSH
20919: LD_INT 27
20921: PUSH
20922: LD_INT 28
20924: PUSH
20925: LD_INT 29
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 30
20936: PUSH
20937: LD_INT 31
20939: PUSH
20940: LD_INT 32
20942: PUSH
20943: LD_INT 33
20945: PUSH
20946: LD_INT 34
20948: PUSH
20949: LD_INT 35
20951: PUSH
20952: LD_INT 36
20954: PUSH
20955: LD_INT 37
20957: PUSH
20958: LD_INT 38
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 39
20974: PUSH
20975: LD_INT 40
20977: PUSH
20978: LD_INT 41
20980: PUSH
20981: LD_INT 42
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 43
20992: PUSH
20993: LD_INT 44
20995: PUSH
20996: LD_INT 45
20998: PUSH
20999: LD_INT 46
21001: PUSH
21002: LD_INT 47
21004: PUSH
21005: LD_INT 46
21007: PUSH
21008: LD_INT 45
21010: PUSH
21011: LD_INT 44
21013: PUSH
21014: LD_INT 43
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: ST_TO_ADDR
// for i in ruPatrol do
21034: LD_ADDR_VAR 0 1
21038: PUSH
21039: LD_EXP 70
21043: PUSH
21044: FOR_IN
21045: IFFALSE 21476
// begin if not IsOk ( i ) then
21047: LD_VAR 0 1
21051: PPUSH
21052: CALL_OW 302
21056: NOT
21057: IFFALSE 21061
// continue ;
21059: GO 21044
// if Count ( ruKilledHex ) then
21061: LD_EXP 43
21065: PPUSH
21066: CALL 31053 0 1
21070: IFFALSE 21143
// for j in ruKilledHex do
21072: LD_ADDR_VAR 0 2
21076: PUSH
21077: LD_EXP 43
21081: PUSH
21082: FOR_IN
21083: IFFALSE 21141
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
21085: LD_VAR 0 1
21089: PPUSH
21090: LD_VAR 0 2
21094: PUSH
21095: LD_INT 1
21097: ARRAY
21098: PPUSH
21099: LD_VAR 0 2
21103: PUSH
21104: LD_INT 2
21106: ARRAY
21107: PPUSH
21108: CALL_OW 297
21112: PUSH
21113: LD_INT 6
21115: LESS
21116: IFFALSE 21139
// begin Query ( QBody ) ;
21118: LD_STRING QBody
21120: PPUSH
21121: CALL_OW 97
// isAlarm := true ;
21125: LD_ADDR_EXP 17
21129: PUSH
21130: LD_INT 1
21132: ST_TO_ADDR
// exit ;
21133: POP
21134: POP
21135: POP
21136: POP
21137: GO 21478
// end ;
21139: GO 21082
21141: POP
21142: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
21143: LD_ADDR_VAR 0 5
21147: PUSH
21148: LD_INT 22
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 1
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 91
21170: PUSH
21171: LD_VAR 0 1
21175: PUSH
21176: LD_INT 7
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: LIST
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: LIST
21188: PPUSH
21189: CALL_OW 69
21193: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
21194: LD_INT 2
21196: PPUSH
21197: LD_VAR 0 1
21201: PPUSH
21202: CALL_OW 292
21206: PUSH
21207: LD_VAR 0 5
21211: AND
21212: IFFALSE 21362
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
21214: LD_EXP 30
21218: PUSH
21219: LD_VAR 0 1
21223: PPUSH
21224: LD_EXP 65
21228: PPUSH
21229: CALL_OW 296
21233: PUSH
21234: LD_INT 16
21236: LESS
21237: AND
21238: PUSH
21239: LD_EXP 38
21243: OR
21244: IFFALSE 21248
// continue ;
21246: GO 21044
// for j in tmp do
21248: LD_ADDR_VAR 0 2
21252: PUSH
21253: LD_VAR 0 5
21257: PUSH
21258: FOR_IN
21259: IFFALSE 21320
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
21261: LD_ADDR_VAR 0 5
21265: PUSH
21266: LD_VAR 0 5
21270: PUSH
21271: LD_INT 22
21273: PUSH
21274: LD_INT 2
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 21
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 91
21293: PUSH
21294: LD_VAR 0 2
21298: PUSH
21299: LD_INT 4
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: LIST
21311: PPUSH
21312: CALL_OW 69
21316: UNION
21317: ST_TO_ADDR
21318: GO 21258
21320: POP
21321: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
21322: LD_VAR 0 1
21326: PPUSH
21327: LD_VAR 0 5
21331: PPUSH
21332: LD_VAR 0 1
21336: PPUSH
21337: CALL_OW 74
21341: PPUSH
21342: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
21346: LD_VAR 0 1
21350: PPUSH
21351: LD_VAR 0 5
21355: PPUSH
21356: CALL 21481 0 2
// continue ;
21360: GO 21044
// end ; if HasTask ( i ) then
21362: LD_VAR 0 1
21366: PPUSH
21367: CALL_OW 314
21371: IFFALSE 21375
// continue ;
21373: GO 21044
// tag := GetTag ( i ) ;
21375: LD_ADDR_VAR 0 4
21379: PUSH
21380: LD_VAR 0 1
21384: PPUSH
21385: CALL_OW 110
21389: ST_TO_ADDR
// if not tag then
21390: LD_VAR 0 4
21394: NOT
21395: IFFALSE 21408
// begin ComHold ( i ) ;
21397: LD_VAR 0 1
21401: PPUSH
21402: CALL_OW 140
// continue ;
21406: GO 21044
// end ; for j := 1 to points [ tag ] do
21408: LD_ADDR_VAR 0 2
21412: PUSH
21413: DOUBLE
21414: LD_INT 1
21416: DEC
21417: ST_TO_ADDR
21418: LD_VAR 0 3
21422: PUSH
21423: LD_VAR 0 4
21427: ARRAY
21428: PUSH
21429: FOR_TO
21430: IFFALSE 21472
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
21432: LD_VAR 0 1
21436: PPUSH
21437: LD_VAR 0 3
21441: PUSH
21442: LD_VAR 0 4
21446: ARRAY
21447: PUSH
21448: LD_VAR 0 2
21452: ARRAY
21453: PPUSH
21454: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
21458: LD_VAR 0 1
21462: PPUSH
21463: LD_INT 70
21465: PPUSH
21466: CALL_OW 202
// end ;
21470: GO 21429
21472: POP
21473: POP
// end ;
21474: GO 21044
21476: POP
21477: POP
// end ;
21478: PPOPN 5
21480: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
21481: LD_INT 0
21483: PPUSH
21484: PPUSH
21485: PPUSH
// if UnitFilter ( units , [ [ f_nation , nation_arabian ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
21486: LD_VAR 0 2
21490: PPUSH
21491: LD_INT 23
21493: PUSH
21494: LD_INT 2
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 2
21503: PUSH
21504: LD_INT 25
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 25
21516: PUSH
21517: LD_INT 11
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 25
21526: PUSH
21527: LD_INT 34
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 25
21536: PUSH
21537: LD_INT 32
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PPUSH
21555: CALL_OW 72
21559: IFFALSE 21672
// begin blockPatrolThread := true ;
21561: LD_ADDR_EXP 38
21565: PUSH
21566: LD_INT 1
21568: ST_TO_ADDR
// DialogueOn ;
21569: CALL_OW 6
// case GetSex ( guard ) of sex_male :
21573: LD_VAR 0 1
21577: PPUSH
21578: CALL_OW 258
21582: PUSH
21583: LD_INT 1
21585: DOUBLE
21586: EQUAL
21587: IFTRUE 21591
21589: GO 21606
21591: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21592: LD_VAR 0 1
21596: PPUSH
21597: LD_STRING DRum-Fail-3
21599: PPUSH
21600: CALL_OW 88
21604: GO 21630
21606: LD_INT 2
21608: DOUBLE
21609: EQUAL
21610: IFTRUE 21614
21612: GO 21629
21614: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
21615: LD_VAR 0 1
21619: PPUSH
21620: LD_STRING DRuf-Fail-3
21622: PPUSH
21623: CALL_OW 88
21627: GO 21630
21629: POP
// DialogueOff ;
21630: CALL_OW 7
// wait ( 0 0$5 ) ;
21634: LD_INT 175
21636: PPUSH
21637: CALL_OW 67
// if IsOk ( guard ) then
21641: LD_VAR 0 1
21645: PPUSH
21646: CALL_OW 302
21650: IFFALSE 21662
// isAlarm := true else
21652: LD_ADDR_EXP 17
21656: PUSH
21657: LD_INT 1
21659: ST_TO_ADDR
21660: GO 21670
// blockPatrolThread := false ;
21662: LD_ADDR_EXP 38
21666: PUSH
21667: LD_INT 0
21669: ST_TO_ADDR
// exit ;
21670: GO 22673
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
21672: LD_VAR 0 2
21676: PPUSH
21677: LD_INT 23
21679: PUSH
21680: LD_INT 3
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PPUSH
21687: CALL_OW 72
21691: PUSH
21692: LD_VAR 0 2
21696: PPUSH
21697: LD_INT 95
21699: PUSH
21700: LD_INT 61
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PPUSH
21707: CALL_OW 72
21711: OR
21712: IFFALSE 21716
// exit ;
21714: GO 22673
// DialogueOn ;
21716: CALL_OW 6
// blockPatrolThread := true ;
21720: LD_ADDR_EXP 38
21724: PUSH
21725: LD_INT 1
21727: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
21728: LD_VAR 0 1
21732: PPUSH
21733: CALL_OW 87
// if not Heike in units then
21737: LD_EXP 45
21741: PUSH
21742: LD_VAR 0 2
21746: IN
21747: NOT
21748: IFFALSE 22114
// begin case GetSex ( guard ) of sex_male :
21750: LD_VAR 0 1
21754: PPUSH
21755: CALL_OW 258
21759: PUSH
21760: LD_INT 1
21762: DOUBLE
21763: EQUAL
21764: IFTRUE 21768
21766: GO 21783
21768: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
21769: LD_VAR 0 1
21773: PPUSH
21774: LD_STRING DRum-Guard-1
21776: PPUSH
21777: CALL_OW 88
21781: GO 21807
21783: LD_INT 2
21785: DOUBLE
21786: EQUAL
21787: IFTRUE 21791
21789: GO 21806
21791: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
21792: LD_VAR 0 1
21796: PPUSH
21797: LD_STRING DRuf-Guard-1
21799: PPUSH
21800: CALL_OW 88
21804: GO 21807
21806: POP
// case Query ( SurrenderInfoPeople ) of 1 :
21807: LD_STRING SurrenderInfoPeople
21809: PPUSH
21810: CALL_OW 97
21814: PUSH
21815: LD_INT 1
21817: DOUBLE
21818: EQUAL
21819: IFTRUE 21823
21821: GO 21932
21823: POP
// begin Query ( CaughtSquadInfo ) ;
21824: LD_STRING CaughtSquadInfo
21826: PPUSH
21827: CALL_OW 97
// for i in units do
21831: LD_ADDR_VAR 0 4
21835: PUSH
21836: LD_VAR 0 2
21840: PUSH
21841: FOR_IN
21842: IFFALSE 21899
// begin if Carry ( i ) then
21844: LD_VAR 0 4
21848: PPUSH
21849: CALL_OW 281
21853: IFFALSE 21870
// SetCargo ( i , mat_cans , 0 ) ;
21855: LD_VAR 0 4
21859: PPUSH
21860: LD_INT 1
21862: PPUSH
21863: LD_INT 0
21865: PPUSH
21866: CALL_OW 290
// SetSide ( i , 5 ) ;
21870: LD_VAR 0 4
21874: PPUSH
21875: LD_INT 5
21877: PPUSH
21878: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
21882: LD_VAR 0 4
21886: PPUSH
21887: LD_INT 113
21889: PPUSH
21890: LD_INT 17
21892: PPUSH
21893: CALL_OW 111
// end ;
21897: GO 21841
21899: POP
21900: POP
// ComMoveXY ( guard , 117 , 25 ) ;
21901: LD_VAR 0 1
21905: PPUSH
21906: LD_INT 117
21908: PPUSH
21909: LD_INT 25
21911: PPUSH
21912: CALL_OW 111
// DialogueOff ;
21916: CALL_OW 7
// blockPatrolThread := false ;
21920: LD_ADDR_EXP 38
21924: PUSH
21925: LD_INT 0
21927: ST_TO_ADDR
// exit ;
21928: GO 22673
// end ; 2 :
21930: GO 22114
21932: LD_INT 2
21934: DOUBLE
21935: EQUAL
21936: IFTRUE 21940
21938: GO 22113
21940: POP
// begin DialogueOff ;
21941: CALL_OW 7
// wait ( 0 0$2 ) ;
21945: LD_INT 70
21947: PPUSH
21948: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21952: LD_INT 6
21954: PPUSH
21955: LD_INT 2
21957: PPUSH
21958: LD_INT 2
21960: PPUSH
21961: LD_INT 1
21963: PPUSH
21964: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
21968: LD_VAR 0 1
21972: PPUSH
21973: LD_VAR 0 2
21977: PUSH
21978: LD_INT 1
21980: ARRAY
21981: PPUSH
21982: CALL_OW 115
// case GetSex ( guard ) of sex_male :
21986: LD_VAR 0 1
21990: PPUSH
21991: CALL_OW 258
21995: PUSH
21996: LD_INT 1
21998: DOUBLE
21999: EQUAL
22000: IFTRUE 22004
22002: GO 22019
22004: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22005: LD_VAR 0 1
22009: PPUSH
22010: LD_STRING DRum-Fail-3
22012: PPUSH
22013: CALL_OW 88
22017: GO 22043
22019: LD_INT 2
22021: DOUBLE
22022: EQUAL
22023: IFTRUE 22027
22025: GO 22042
22027: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22028: LD_VAR 0 1
22032: PPUSH
22033: LD_STRING DRum-Fail-3
22035: PPUSH
22036: CALL_OW 88
22040: GO 22043
22042: POP
// wait ( 0 0$5 ) ;
22043: LD_INT 175
22045: PPUSH
22046: CALL_OW 67
// if IsOk ( guard ) then
22050: LD_VAR 0 1
22054: PPUSH
22055: CALL_OW 302
22059: IFFALSE 22071
// isAlarm := true else
22061: LD_ADDR_EXP 17
22065: PUSH
22066: LD_INT 1
22068: ST_TO_ADDR
22069: GO 22103
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22071: LD_INT 6
22073: PPUSH
22074: LD_INT 2
22076: PPUSH
22077: LD_INT 0
22079: PPUSH
22080: LD_INT 1
22082: PPUSH
22083: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22087: LD_INT 3
22089: PPUSH
22090: LD_INT 2
22092: PPUSH
22093: LD_INT 0
22095: PPUSH
22096: LD_INT 1
22098: PPUSH
22099: CALL_OW 80
// end ; blockPatrolThread := false ;
22103: LD_ADDR_EXP 38
22107: PUSH
22108: LD_INT 0
22110: ST_TO_ADDR
// end ; end ;
22111: GO 22114
22113: POP
// end ; if Carry ( Heike ) then
22114: LD_EXP 45
22118: PPUSH
22119: CALL_OW 281
22123: IFFALSE 22199
// begin case GetSex ( guard ) of sex_male :
22125: LD_VAR 0 1
22129: PPUSH
22130: CALL_OW 258
22134: PUSH
22135: LD_INT 1
22137: DOUBLE
22138: EQUAL
22139: IFTRUE 22143
22141: GO 22158
22143: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
22144: LD_VAR 0 1
22148: PPUSH
22149: LD_STRING DRum-FoodFail-1
22151: PPUSH
22152: CALL_OW 88
22156: GO 22182
22158: LD_INT 2
22160: DOUBLE
22161: EQUAL
22162: IFTRUE 22166
22164: GO 22181
22166: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
22167: LD_VAR 0 1
22171: PPUSH
22172: LD_STRING DRuf-FoodFail-2
22174: PPUSH
22175: CALL_OW 88
22179: GO 22182
22181: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
22182: LD_EXP 45
22186: PPUSH
22187: LD_INT 1
22189: PPUSH
22190: LD_INT 0
22192: PPUSH
22193: CALL_OW 290
// end else
22197: GO 22256
// begin case GetSex ( guard ) of sex_male :
22199: LD_VAR 0 1
22203: PPUSH
22204: CALL_OW 258
22208: PUSH
22209: LD_INT 1
22211: DOUBLE
22212: EQUAL
22213: IFTRUE 22217
22215: GO 22232
22217: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
22218: LD_VAR 0 1
22222: PPUSH
22223: LD_STRING DRum-Seen-1
22225: PPUSH
22226: CALL_OW 88
22230: GO 22256
22232: LD_INT 2
22234: DOUBLE
22235: EQUAL
22236: IFTRUE 22240
22238: GO 22255
22240: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
22241: LD_VAR 0 1
22245: PPUSH
22246: LD_STRING DRuf-Seen-1
22248: PPUSH
22249: CALL_OW 88
22253: GO 22256
22255: POP
// end ; alone := ( units = 1 ) ;
22256: LD_ADDR_VAR 0 5
22260: PUSH
22261: LD_VAR 0 2
22265: PUSH
22266: LD_INT 1
22268: EQUAL
22269: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
22270: LD_STRING SurrenderInfo
22272: PPUSH
22273: CALL_OW 97
22277: PUSH
22278: LD_INT 1
22280: DOUBLE
22281: EQUAL
22282: IFTRUE 22286
22284: GO 22475
22286: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
22287: LD_INT 23
22289: PPUSH
22290: CALL_OW 87
// RemoveUnit ( Heike ) ;
22294: LD_EXP 45
22298: PPUSH
22299: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
22303: LD_EXP 45
22307: PPUSH
22308: LD_INT 23
22310: PPUSH
22311: CALL_OW 52
// if not alone then
22315: LD_VAR 0 5
22319: NOT
22320: IFFALSE 22387
// for i in units diff Heike do
22322: LD_ADDR_VAR 0 4
22326: PUSH
22327: LD_VAR 0 2
22331: PUSH
22332: LD_EXP 45
22336: DIFF
22337: PUSH
22338: FOR_IN
22339: IFFALSE 22385
// begin RemoveUnit ( i ) ;
22341: LD_VAR 0 4
22345: PPUSH
22346: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
22350: LD_VAR 0 4
22354: PPUSH
22355: LD_INT 114
22357: PPUSH
22358: LD_INT 17
22360: PPUSH
22361: LD_INT 10
22363: PPUSH
22364: LD_INT 0
22366: PPUSH
22367: CALL_OW 50
// SetSide ( i , 5 ) ;
22371: LD_VAR 0 4
22375: PPUSH
22376: LD_INT 5
22378: PPUSH
22379: CALL_OW 235
// end ;
22383: GO 22338
22385: POP
22386: POP
// wait ( 0 0$0.3 ) ;
22387: LD_INT 10
22389: PPUSH
22390: CALL_OW 67
// if alone then
22394: LD_VAR 0 5
22398: IFFALSE 22409
// Query ( CaughtInfoAlone ) else
22400: LD_STRING CaughtInfoAlone
22402: PPUSH
22403: CALL_OW 97
22407: GO 22416
// Query ( CaughtInfo ) ;
22409: LD_STRING CaughtInfo
22411: PPUSH
22412: CALL_OW 97
// wait ( 0 0$2 ) ;
22416: LD_INT 70
22418: PPUSH
22419: CALL_OW 67
// StartLockerMinigame ;
22423: CALL 20511 0 0
// Say ( Heike , DH-Reset ) ;
22427: LD_EXP 45
22431: PPUSH
22432: LD_STRING DH-Reset
22434: PPUSH
22435: CALL_OW 88
// DialogueOff ;
22439: CALL_OW 7
// InGameOff ;
22443: CALL_OW 9
// blockPatrolThread := false ;
22447: LD_ADDR_EXP 38
22451: PUSH
22452: LD_INT 0
22454: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
22455: LD_EXP 45
22459: PPUSH
22460: CALL_OW 122
// ComFree ( guard ) ;
22464: LD_VAR 0 1
22468: PPUSH
22469: CALL_OW 139
// end ; 2 :
22473: GO 22665
22475: LD_INT 2
22477: DOUBLE
22478: EQUAL
22479: IFTRUE 22483
22481: GO 22664
22483: POP
// begin Say ( Heike , DH-Guard-2 ) ;
22484: LD_EXP 45
22488: PPUSH
22489: LD_STRING DH-Guard-2
22491: PPUSH
22492: CALL_OW 88
// DialogueOff ;
22496: CALL_OW 7
// wait ( 0 0$2 ) ;
22500: LD_INT 70
22502: PPUSH
22503: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22507: LD_INT 6
22509: PPUSH
22510: LD_INT 2
22512: PPUSH
22513: LD_INT 2
22515: PPUSH
22516: LD_INT 1
22518: PPUSH
22519: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
22523: LD_VAR 0 1
22527: PPUSH
22528: LD_EXP 45
22532: PPUSH
22533: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22537: LD_VAR 0 1
22541: PPUSH
22542: CALL_OW 258
22546: PUSH
22547: LD_INT 1
22549: DOUBLE
22550: EQUAL
22551: IFTRUE 22555
22553: GO 22570
22555: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22556: LD_VAR 0 1
22560: PPUSH
22561: LD_STRING DRum-Fail-3
22563: PPUSH
22564: CALL_OW 88
22568: GO 22594
22570: LD_INT 2
22572: DOUBLE
22573: EQUAL
22574: IFTRUE 22578
22576: GO 22593
22578: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22579: LD_VAR 0 1
22583: PPUSH
22584: LD_STRING DRum-Fail-3
22586: PPUSH
22587: CALL_OW 88
22591: GO 22594
22593: POP
// wait ( 0 0$5 ) ;
22594: LD_INT 175
22596: PPUSH
22597: CALL_OW 67
// if IsOk ( guard ) then
22601: LD_VAR 0 1
22605: PPUSH
22606: CALL_OW 302
22610: IFFALSE 22622
// isAlarm := true else
22612: LD_ADDR_EXP 17
22616: PUSH
22617: LD_INT 1
22619: ST_TO_ADDR
22620: GO 22654
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22622: LD_INT 6
22624: PPUSH
22625: LD_INT 2
22627: PPUSH
22628: LD_INT 0
22630: PPUSH
22631: LD_INT 1
22633: PPUSH
22634: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22638: LD_INT 3
22640: PPUSH
22641: LD_INT 2
22643: PPUSH
22644: LD_INT 0
22646: PPUSH
22647: LD_INT 1
22649: PPUSH
22650: CALL_OW 80
// end ; blockPatrolThread := false ;
22654: LD_ADDR_EXP 38
22658: PUSH
22659: LD_INT 0
22661: ST_TO_ADDR
// end ; end ;
22662: GO 22665
22664: POP
// blockPatrolThread := false ;
22665: LD_ADDR_EXP 38
22669: PUSH
22670: LD_INT 0
22672: ST_TO_ADDR
// end ;
22673: LD_VAR 0 3
22677: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
22678: LD_EXP 14
22682: PPUSH
22683: LD_INT 22
22685: PUSH
22686: LD_INT 5
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 3
22695: PUSH
22696: LD_INT 101
22698: PUSH
22699: LD_INT 6
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 92
22712: PUSH
22713: LD_INT 113
22715: PUSH
22716: LD_INT 16
22718: PUSH
22719: LD_INT 12
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 91
22730: PUSH
22731: LD_EXP 45
22735: PUSH
22736: LD_INT 6
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: PPUSH
22750: CALL_OW 72
22754: PUSH
22755: LD_EXP 30
22759: NOT
22760: AND
22761: IFFALSE 22866
22763: GO 22765
22765: DISABLE
22766: LD_INT 0
22768: PPUSH
// begin enable ;
22769: ENABLE
// DialogueOn ;
22770: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
22774: LD_EXP 45
22778: PPUSH
22779: LD_STRING DH-Join-
22781: PUSH
22782: LD_INT 1
22784: PPUSH
22785: LD_INT 3
22787: PPUSH
22788: CALL_OW 12
22792: STR
22793: PPUSH
22794: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
22798: LD_ADDR_VAR 0 1
22802: PUSH
22803: LD_EXP 14
22807: PPUSH
22808: LD_INT 22
22810: PUSH
22811: LD_INT 5
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 91
22820: PUSH
22821: LD_EXP 45
22825: PUSH
22826: LD_INT 10
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: LIST
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PPUSH
22838: CALL_OW 72
22842: PUSH
22843: FOR_IN
22844: IFFALSE 22860
// SetSide ( i , 2 ) ;
22846: LD_VAR 0 1
22850: PPUSH
22851: LD_INT 2
22853: PPUSH
22854: CALL_OW 235
22858: GO 22843
22860: POP
22861: POP
// DialogueOff ;
22862: CALL_OW 7
// end ; end_of_file
22866: PPOPN 1
22868: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
22869: LD_EXP 17
22873: PUSH
22874: LD_EXP 5
22878: AND
22879: IFFALSE 23180
22881: GO 22883
22883: DISABLE
22884: LD_INT 0
22886: PPUSH
22887: PPUSH
22888: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
22889: LD_INT 1
22891: NEG
22892: PPUSH
22893: LD_INT 1
22895: NEG
22896: PPUSH
22897: LD_STRING alarm
22899: PPUSH
22900: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
22904: LD_INT 3
22906: PPUSH
22907: LD_INT 2
22909: PPUSH
22910: LD_INT 2
22912: PPUSH
22913: LD_INT 1
22915: PPUSH
22916: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22920: LD_INT 6
22922: PPUSH
22923: LD_INT 2
22925: PPUSH
22926: LD_INT 2
22928: PPUSH
22929: LD_INT 1
22931: PPUSH
22932: CALL_OW 80
// DialogueOn ;
22936: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
22940: LD_EXP 45
22944: PPUSH
22945: LD_STRING DH-Alarm-1
22947: PPUSH
22948: CALL_OW 88
// DialogueOff ;
22952: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
22956: LD_ADDR_VAR 0 2
22960: PUSH
22961: LD_INT 107
22963: PUSH
22964: LD_INT 39
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 143
22973: PUSH
22974: LD_INT 33
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 180
22983: PUSH
22984: LD_INT 115
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 96
22993: PUSH
22994: LD_INT 90
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 59
23003: PUSH
23004: LD_INT 52
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 16
23013: PUSH
23014: LD_INT 15
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 90
23023: PUSH
23024: LD_INT 120
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
23040: LD_ADDR_VAR 0 3
23044: PUSH
23045: LD_INT 22
23047: PUSH
23048: LD_INT 6
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 25
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PPUSH
23069: CALL_OW 69
23073: ST_TO_ADDR
// for i in tmp do
23074: LD_ADDR_VAR 0 1
23078: PUSH
23079: LD_VAR 0 3
23083: PUSH
23084: FOR_IN
23085: IFFALSE 23153
// begin ComExit ( i ) ;
23087: LD_VAR 0 1
23091: PPUSH
23092: CALL 67051 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
23096: LD_VAR 0 1
23100: PPUSH
23101: LD_VAR 0 2
23105: PUSH
23106: LD_VAR 0 1
23110: PUSH
23111: LD_INT 7
23113: MOD
23114: PUSH
23115: LD_INT 1
23117: PLUS
23118: ARRAY
23119: PUSH
23120: LD_INT 1
23122: ARRAY
23123: PPUSH
23124: LD_VAR 0 2
23128: PUSH
23129: LD_VAR 0 1
23133: PUSH
23134: LD_INT 7
23136: MOD
23137: PUSH
23138: LD_INT 1
23140: PLUS
23141: ARRAY
23142: PUSH
23143: LD_INT 2
23145: ARRAY
23146: PPUSH
23147: CALL_OW 174
// end ;
23151: GO 23084
23153: POP
23154: POP
// Explode ;
23155: CALL 23183 0 0
// wait ( 0 0$45 ) ;
23159: LD_INT 1575
23161: PPUSH
23162: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
23166: LD_VAR 0 3
23170: PPUSH
23171: LD_EXP 45
23175: PPUSH
23176: CALL_OW 175
// end ;
23180: PPOPN 3
23182: END
// export function Explode ; var i , x , y , j ; begin
23183: LD_INT 0
23185: PPUSH
23186: PPUSH
23187: PPUSH
23188: PPUSH
23189: PPUSH
// if hasExplosionsInFactory then
23190: LD_EXP 7
23194: IFFALSE 23214
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
23196: LD_ADDR_EXP 29
23200: PUSH
23201: LD_EXP 29
23205: PPUSH
23206: LD_INT 61
23208: PPUSH
23209: CALL 66653 0 2
23213: ST_TO_ADDR
// if explosivePlantedList then
23214: LD_EXP 29
23218: IFFALSE 23366
// begin for i in explosivePlantedList do
23220: LD_ADDR_VAR 0 2
23224: PUSH
23225: LD_EXP 29
23229: PUSH
23230: FOR_IN
23231: IFFALSE 23334
// begin x := GetX ( i ) ;
23233: LD_ADDR_VAR 0 3
23237: PUSH
23238: LD_VAR 0 2
23242: PPUSH
23243: CALL_OW 250
23247: ST_TO_ADDR
// y := GetY ( i ) ;
23248: LD_ADDR_VAR 0 4
23252: PUSH
23253: LD_VAR 0 2
23257: PPUSH
23258: CALL_OW 251
23262: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
23263: LD_ADDR_VAR 0 5
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: LD_INT 3
23273: PUSH
23274: LD_INT 5
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: LIST
23281: PUSH
23282: FOR_IN
23283: IFFALSE 23330
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
23285: LD_VAR 0 3
23289: PPUSH
23290: LD_VAR 0 5
23294: PPUSH
23295: LD_INT 2
23297: PPUSH
23298: CALL_OW 272
23302: PPUSH
23303: LD_VAR 0 4
23307: PPUSH
23308: LD_VAR 0 5
23312: PPUSH
23313: LD_INT 2
23315: PPUSH
23316: CALL_OW 273
23320: PPUSH
23321: LD_INT 1
23323: PPUSH
23324: CALL_OW 453
23328: GO 23282
23330: POP
23331: POP
// end ;
23332: GO 23230
23334: POP
23335: POP
// Say ( Heike , DH-End-2 ) ;
23336: LD_EXP 45
23340: PPUSH
23341: LD_STRING DH-End-2
23343: PPUSH
23344: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
23348: LD_INT 175
23350: PUSH
23351: LD_EXP 29
23355: PPUSH
23356: CALL 31053 0 1
23360: MUL
23361: PPUSH
23362: CALL_OW 67
// end ; if not isAlarm then
23366: LD_EXP 17
23370: NOT
23371: IFFALSE 23381
// isAlarm := true ;
23373: LD_ADDR_EXP 17
23377: PUSH
23378: LD_INT 1
23380: ST_TO_ADDR
// end ;
23381: LD_VAR 0 1
23385: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
23386: LD_INT 22
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 21
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 2
23408: PUSH
23409: LD_INT 101
23411: PUSH
23412: LD_INT 3
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 101
23421: PUSH
23422: LD_INT 6
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: LIST
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: LIST
23438: PPUSH
23439: CALL_OW 69
23443: IFFALSE 23456
23445: GO 23447
23447: DISABLE
// isAlarm := true ; end_of_file
23448: LD_ADDR_EXP 17
23452: PUSH
23453: LD_INT 1
23455: ST_TO_ADDR
23456: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
23457: LD_EXP 14
23461: PPUSH
23462: LD_INT 22
23464: PUSH
23465: LD_INT 2
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PPUSH
23472: CALL_OW 72
23476: PUSH
23477: LD_INT 3
23479: GREATER
23480: PUSH
23481: LD_EXP 17
23485: NOT
23486: AND
23487: IFFALSE 27532
23489: GO 23491
23491: DISABLE
23492: LD_INT 0
23494: PPUSH
23495: PPUSH
23496: PPUSH
23497: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
23498: LD_EXP 65
23502: PPUSH
23503: LD_INT 155
23505: PPUSH
23506: LD_INT 68
23508: PPUSH
23509: LD_INT 0
23511: PPUSH
23512: CALL_OW 48
// wait ( 0 0$1 ) ;
23516: LD_INT 35
23518: PPUSH
23519: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23523: LD_INT 35
23525: PPUSH
23526: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23530: LD_EXP 65
23534: PPUSH
23535: CALL_OW 314
23539: NOT
23540: IFFALSE 23556
// ComMoveUnit ( ruDisturb , Heike ) ;
23542: LD_EXP 65
23546: PPUSH
23547: LD_EXP 45
23551: PPUSH
23552: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
23556: LD_EXP 45
23560: PPUSH
23561: LD_EXP 65
23565: PPUSH
23566: CALL_OW 296
23570: PUSH
23571: LD_INT 6
23573: LESS
23574: PUSH
23575: LD_EXP 65
23579: PPUSH
23580: CALL_OW 302
23584: AND
23585: IFFALSE 23523
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23587: LD_EXP 45
23591: PPUSH
23592: CALL_OW 257
23596: PUSH
23597: LD_INT 33
23599: NONEQUAL
23600: PUSH
23601: LD_EXP 14
23605: PPUSH
23606: LD_INT 22
23608: PUSH
23609: LD_INT 2
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 91
23618: PUSH
23619: LD_EXP 65
23623: PUSH
23624: LD_INT 8
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 2
23634: PUSH
23635: LD_INT 25
23637: PUSH
23638: LD_INT 1
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 25
23647: PUSH
23648: LD_INT 11
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 25
23657: PUSH
23658: LD_INT 32
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 25
23667: PUSH
23668: LD_INT 34
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: PPUSH
23687: CALL_OW 72
23691: OR
23692: IFFALSE 23702
// isAlarm := true ;
23694: LD_ADDR_EXP 17
23698: PUSH
23699: LD_INT 1
23701: ST_TO_ADDR
// if isAlarm then
23702: LD_EXP 17
23706: IFFALSE 23710
// exit ;
23708: GO 27532
// DialogueOn ;
23710: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23714: LD_EXP 65
23718: PPUSH
23719: LD_STRING DMcn-Interrupt-1
23721: PPUSH
23722: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23726: LD_EXP 65
23730: PPUSH
23731: LD_STRING DMcn-Interrupt-2
23733: PPUSH
23734: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
23738: LD_EXP 65
23742: PPUSH
23743: LD_STRING DMcn-Interrupt-3
23745: PPUSH
23746: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
23750: LD_EXP 45
23754: PPUSH
23755: LD_STRING DH-Interrupt-a-4
23757: PPUSH
23758: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
23762: LD_EXP 65
23766: PPUSH
23767: LD_STRING DMcn-Interrupt-a-5
23769: PPUSH
23770: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
23774: LD_EXP 45
23778: PPUSH
23779: LD_STRING DH-Interrupt-a-6
23781: PPUSH
23782: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
23786: LD_EXP 65
23790: PPUSH
23791: LD_STRING DMcn-Interrupt-a-7
23793: PPUSH
23794: CALL_OW 88
// DialogueOff ;
23798: CALL_OW 7
// hasMuchin := true ;
23802: LD_ADDR_EXP 30
23806: PUSH
23807: LD_INT 1
23809: ST_TO_ADDR
// Query ( MuchinInfo ) ;
23810: LD_STRING MuchinInfo
23812: PPUSH
23813: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
23817: LD_STRING M2a
23819: PPUSH
23820: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
23824: LD_INT 105
23826: PPUSH
23827: LD_INT 55
23829: PPUSH
23830: CALL_OW 428
23834: PPUSH
23835: LD_INT 2
23837: PPUSH
23838: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
23842: LD_INT 115
23844: PPUSH
23845: LD_INT 65
23847: PPUSH
23848: CALL_OW 428
23852: PPUSH
23853: LD_INT 2
23855: PPUSH
23856: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
23860: LD_INT 109
23862: PPUSH
23863: LD_INT 59
23865: PPUSH
23866: LD_INT 2
23868: PPUSH
23869: LD_INT 10
23871: NEG
23872: PPUSH
23873: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
23877: LD_INT 109
23879: PPUSH
23880: LD_INT 59
23882: PPUSH
23883: CALL_OW 84
// wait ( 0 0$2 ) ;
23887: LD_INT 70
23889: PPUSH
23890: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
23894: LD_INT 109
23896: PPUSH
23897: LD_INT 59
23899: PPUSH
23900: LD_INT 2
23902: PPUSH
23903: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
23907: LD_INT 35
23909: PPUSH
23910: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
23914: LD_EXP 65
23918: PPUSH
23919: LD_EXP 45
23923: PPUSH
23924: CALL_OW 296
23928: PUSH
23929: LD_INT 6
23931: GREATER
23932: IFFALSE 23948
// ComMoveUnit ( ruDisturb , Heike ) ;
23934: LD_EXP 65
23938: PPUSH
23939: LD_EXP 45
23943: PPUSH
23944: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23948: LD_EXP 45
23952: PPUSH
23953: CALL_OW 257
23957: PUSH
23958: LD_INT 33
23960: NONEQUAL
23961: PUSH
23962: LD_EXP 14
23966: PPUSH
23967: LD_INT 22
23969: PUSH
23970: LD_INT 2
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 91
23979: PUSH
23980: LD_EXP 65
23984: PUSH
23985: LD_INT 8
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 2
23995: PUSH
23996: LD_INT 25
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 25
24008: PUSH
24009: LD_INT 11
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 25
24018: PUSH
24019: LD_INT 32
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 25
24028: PUSH
24029: LD_INT 34
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 72
24052: OR
24053: IFFALSE 24065
// begin isAlarm := true ;
24055: LD_ADDR_EXP 17
24059: PUSH
24060: LD_INT 1
24062: ST_TO_ADDR
// exit ;
24063: GO 27532
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
24065: LD_INT 105
24067: PPUSH
24068: LD_INT 55
24070: PPUSH
24071: CALL_OW 428
24075: NOT
24076: PUSH
24077: LD_INT 115
24079: PPUSH
24080: LD_INT 65
24082: PPUSH
24083: CALL_OW 428
24087: NOT
24088: OR
24089: IFFALSE 24101
// begin isAlarm := true ;
24091: LD_ADDR_EXP 17
24095: PUSH
24096: LD_INT 1
24098: ST_TO_ADDR
// exit ;
24099: GO 27532
// end ; until not BuildingsInProgress ( 2 ) ;
24101: LD_INT 2
24103: PPUSH
24104: CALL_OW 345
24108: NOT
24109: IFFALSE 23907
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
24111: LD_INT 105
24113: PPUSH
24114: LD_INT 55
24116: PPUSH
24117: CALL_OW 428
24121: PPUSH
24122: LD_INT 3
24124: PPUSH
24125: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
24129: LD_INT 115
24131: PPUSH
24132: LD_INT 65
24134: PPUSH
24135: CALL_OW 428
24139: PPUSH
24140: LD_INT 3
24142: PPUSH
24143: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
24147: LD_STRING M2a-out
24149: PPUSH
24150: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
24154: LD_EXP 65
24158: PPUSH
24159: LD_INT 2
24161: PPUSH
24162: CALL_OW 120
// wait ( 0 0$3 ) ;
24166: LD_INT 105
24168: PPUSH
24169: CALL_OW 67
// hasMuchin := false ;
24173: LD_ADDR_EXP 30
24177: PUSH
24178: LD_INT 0
24180: ST_TO_ADDR
// wait ( 2 2$00 ) ;
24181: LD_INT 4200
24183: PPUSH
24184: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24188: LD_INT 35
24190: PPUSH
24191: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24195: LD_EXP 65
24199: PPUSH
24200: CALL_OW 314
24204: NOT
24205: IFFALSE 24221
// ComMoveUnit ( ruDisturb , Heike ) ;
24207: LD_EXP 65
24211: PPUSH
24212: LD_EXP 45
24216: PPUSH
24217: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24221: LD_EXP 45
24225: PPUSH
24226: LD_EXP 65
24230: PPUSH
24231: CALL_OW 296
24235: PUSH
24236: LD_INT 6
24238: LESS
24239: PUSH
24240: LD_EXP 65
24244: PPUSH
24245: CALL_OW 302
24249: AND
24250: IFFALSE 24188
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24252: LD_EXP 45
24256: PPUSH
24257: CALL_OW 257
24261: PUSH
24262: LD_INT 33
24264: NONEQUAL
24265: PUSH
24266: LD_EXP 14
24270: PPUSH
24271: LD_INT 22
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 91
24283: PUSH
24284: LD_EXP 65
24288: PUSH
24289: LD_INT 8
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 2
24299: PUSH
24300: LD_INT 25
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 25
24312: PUSH
24313: LD_INT 11
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 25
24322: PUSH
24323: LD_INT 32
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 25
24332: PUSH
24333: LD_INT 34
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: LIST
24351: PPUSH
24352: CALL_OW 72
24356: OR
24357: IFFALSE 24367
// isAlarm := true ;
24359: LD_ADDR_EXP 17
24363: PUSH
24364: LD_INT 1
24366: ST_TO_ADDR
// if isAlarm then
24367: LD_EXP 17
24371: IFFALSE 24375
// exit ;
24373: GO 27532
// DialogueOn ;
24375: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24379: LD_EXP 65
24383: PPUSH
24384: LD_STRING DMcn-Interrupt-1
24386: PPUSH
24387: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24391: LD_EXP 65
24395: PPUSH
24396: LD_STRING DMcn-Interrupt-2
24398: PPUSH
24399: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
24403: LD_INT 176
24405: PPUSH
24406: LD_INT 54
24408: PPUSH
24409: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
24413: LD_INT 176
24415: PPUSH
24416: LD_INT 54
24418: PPUSH
24419: LD_INT 2
24421: PPUSH
24422: LD_INT 6
24424: NEG
24425: PPUSH
24426: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
24430: LD_INT 10
24432: PPUSH
24433: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
24437: LD_EXP 65
24441: PPUSH
24442: LD_STRING DMcn-Interrupt-b-3
24444: PPUSH
24445: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
24449: LD_EXP 45
24453: PPUSH
24454: LD_STRING DH-Interrupt-b-4
24456: PPUSH
24457: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
24461: LD_EXP 65
24465: PPUSH
24466: LD_STRING DMcn-Interrupt-b-5
24468: PPUSH
24469: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
24473: LD_EXP 45
24477: PPUSH
24478: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
24482: LD_INT 176
24484: PPUSH
24485: LD_INT 54
24487: PPUSH
24488: LD_INT 2
24490: PPUSH
24491: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
24495: LD_EXP 65
24499: PPUSH
24500: LD_STRING DMcn-Interrupt-b-6
24502: PPUSH
24503: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
24507: LD_EXP 45
24511: PPUSH
24512: LD_STRING DH-Interrupt-b-7
24514: PPUSH
24515: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
24519: LD_EXP 65
24523: PPUSH
24524: LD_STRING DMcn-Interrupt-b-8
24526: PPUSH
24527: CALL_OW 88
// DialogueOff ;
24531: CALL_OW 7
// Query ( MuchinInfo ) ;
24535: LD_STRING MuchinInfo
24537: PPUSH
24538: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
24542: LD_STRING M2b
24544: PPUSH
24545: CALL_OW 337
// hasMuchin := true ;
24549: LD_ADDR_EXP 30
24553: PUSH
24554: LD_INT 1
24556: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24557: LD_INT 35
24559: PPUSH
24560: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24564: LD_EXP 65
24568: PPUSH
24569: LD_EXP 45
24573: PPUSH
24574: CALL_OW 296
24578: PUSH
24579: LD_INT 6
24581: GREATER
24582: IFFALSE 24598
// ComMoveUnit ( ruDisturb , Heike ) ;
24584: LD_EXP 65
24588: PPUSH
24589: LD_EXP 45
24593: PPUSH
24594: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24598: LD_EXP 45
24602: PPUSH
24603: CALL_OW 257
24607: PUSH
24608: LD_INT 33
24610: NONEQUAL
24611: PUSH
24612: LD_EXP 14
24616: PPUSH
24617: LD_INT 22
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 91
24629: PUSH
24630: LD_EXP 65
24634: PUSH
24635: LD_INT 8
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 2
24645: PUSH
24646: LD_INT 25
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 25
24658: PUSH
24659: LD_INT 11
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 25
24668: PUSH
24669: LD_INT 32
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 25
24678: PUSH
24679: LD_INT 34
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: PPUSH
24698: CALL_OW 72
24702: OR
24703: IFFALSE 24715
// begin isAlarm := true ;
24705: LD_ADDR_EXP 17
24709: PUSH
24710: LD_INT 1
24712: ST_TO_ADDR
// exit ;
24713: GO 27532
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
24715: LD_EXP 45
24719: PPUSH
24720: LD_INT 61
24722: PPUSH
24723: CALL_OW 296
24727: PUSH
24728: LD_INT 4
24730: LESS
24731: IFFALSE 24557
// InGameOn ;
24733: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
24737: LD_INT 173
24739: PPUSH
24740: LD_INT 54
24742: PPUSH
24743: LD_INT 2
24745: PPUSH
24746: LD_INT 8
24748: NEG
24749: PPUSH
24750: CALL_OW 330
// SetSide ( Heike , 3 ) ;
24754: LD_EXP 45
24758: PPUSH
24759: LD_INT 3
24761: PPUSH
24762: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
24766: LD_EXP 45
24770: PPUSH
24771: LD_INT 61
24773: PPUSH
24774: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
24778: LD_EXP 65
24782: PPUSH
24783: LD_INT 61
24785: PPUSH
24786: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
24790: LD_EXP 52
24794: PUSH
24795: LD_EXP 14
24799: IN
24800: PUSH
24801: LD_EXP 52
24805: PPUSH
24806: LD_INT 61
24808: PPUSH
24809: CALL_OW 296
24813: PUSH
24814: LD_INT 12
24816: LESS
24817: AND
24818: IFFALSE 24862
// begin SetSide ( Markov , 3 ) ;
24820: LD_EXP 52
24824: PPUSH
24825: LD_INT 3
24827: PPUSH
24828: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
24832: LD_EXP 52
24836: PPUSH
24837: LD_INT 61
24839: PPUSH
24840: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
24844: LD_INT 35
24846: PPUSH
24847: CALL_OW 67
// until IsInUnit ( Markov ) ;
24851: LD_EXP 52
24855: PPUSH
24856: CALL_OW 310
24860: IFFALSE 24844
// end ; repeat wait ( 0 0$1 ) ;
24862: LD_INT 35
24864: PPUSH
24865: CALL_OW 67
// until IsInUnit ( Heike ) ;
24869: LD_EXP 45
24873: PPUSH
24874: CALL_OW 310
24878: IFFALSE 24862
// SetClass ( Heike , class_mechanic ) ;
24880: LD_EXP 45
24884: PPUSH
24885: LD_INT 3
24887: PPUSH
24888: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
24892: LD_INT 61
24894: PPUSH
24895: LD_INT 21
24897: PPUSH
24898: LD_INT 3
24900: PPUSH
24901: LD_INT 3
24903: PPUSH
24904: LD_INT 43
24906: PPUSH
24907: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
24911: LD_EXP 31
24915: PUSH
24916: LD_EXP 52
24920: PUSH
24921: LD_EXP 14
24925: IN
24926: PUSH
24927: LD_EXP 52
24931: PPUSH
24932: CALL_OW 310
24936: PUSH
24937: LD_INT 61
24939: EQUAL
24940: OR
24941: AND
24942: IFFALSE 25432
// begin wait ( 0 0$5 ) ;
24944: LD_INT 175
24946: PPUSH
24947: CALL_OW 67
// SetSide ( Heike , 2 ) ;
24951: LD_EXP 45
24955: PPUSH
24956: LD_INT 2
24958: PPUSH
24959: CALL_OW 235
// SetSide ( Markov , 2 ) ;
24963: LD_EXP 52
24967: PPUSH
24968: LD_INT 2
24970: PPUSH
24971: CALL_OW 235
// if not Markov in heikeSquad then
24975: LD_EXP 52
24979: PUSH
24980: LD_EXP 14
24984: IN
24985: NOT
24986: IFFALSE 25008
// heikeSquad := Join ( heikeSquad , Markov ) ;
24988: LD_ADDR_EXP 14
24992: PUSH
24993: LD_EXP 14
24997: PPUSH
24998: LD_EXP 52
25002: PPUSH
25003: CALL 66653 0 2
25007: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
25008: LD_EXP 52
25012: PPUSH
25013: LD_STRING DMar-Factory-1
25015: PPUSH
25016: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
25020: LD_INT 61
25022: PPUSH
25023: LD_INT 99
25025: PPUSH
25026: CALL_OW 329
// game_speed := 4 ;
25030: LD_ADDR_OWVAR 65
25034: PUSH
25035: LD_INT 4
25037: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
25038: LD_EXP 65
25042: PPUSH
25043: CALL_OW 122
// ComExitBuilding ( Markov ) ;
25047: LD_EXP 52
25051: PPUSH
25052: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
25056: LD_EXP 65
25060: PPUSH
25061: LD_INT 171
25063: PPUSH
25064: LD_INT 51
25066: PPUSH
25067: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
25071: LD_EXP 52
25075: PPUSH
25076: LD_INT 167
25078: PPUSH
25079: LD_INT 50
25081: PPUSH
25082: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
25086: LD_EXP 52
25090: PPUSH
25091: LD_EXP 65
25095: PPUSH
25096: CALL_OW 179
// wait ( 0 0$5 ) ;
25100: LD_INT 175
25102: PPUSH
25103: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
25107: LD_EXP 52
25111: PPUSH
25112: LD_STRING DMar-Factory-2
25114: PPUSH
25115: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
25119: LD_ADDR_VAR 0 2
25123: PUSH
25124: LD_INT 22
25126: PUSH
25127: LD_INT 3
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 33
25136: PUSH
25137: LD_INT 3
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PPUSH
25148: CALL_OW 69
25152: PUSH
25153: LD_INT 1
25155: ARRAY
25156: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
25157: LD_EXP 65
25161: PPUSH
25162: LD_VAR 0 2
25166: PPUSH
25167: CALL_OW 119
// game_speed := 4 ;
25171: LD_ADDR_OWVAR 65
25175: PUSH
25176: LD_INT 4
25178: ST_TO_ADDR
// async ;
25179: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
25180: LD_EXP 65
25184: PPUSH
25185: LD_STRING DMcn-Factory-3
25187: PPUSH
25188: CALL_OW 88
// wait ( 0 0$0.6 ) ;
25192: LD_INT 21
25194: PPUSH
25195: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
25199: LD_VAR 0 2
25203: PPUSH
25204: LD_EXP 65
25208: PPUSH
25209: CALL_OW 115
// sync ;
25213: SYNC
// wait ( 0 0$1 ) ;
25214: LD_INT 35
25216: PPUSH
25217: CALL_OW 67
// KillUnit ( ruDisturb ) ;
25221: LD_EXP 65
25225: PPUSH
25226: CALL_OW 66
// SetSide ( veh , 7 ) ;
25230: LD_VAR 0 2
25234: PPUSH
25235: LD_INT 7
25237: PPUSH
25238: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
25242: LD_VAR 0 2
25246: PPUSH
25247: LD_INT 84
25249: PPUSH
25250: LD_INT 38
25252: PPUSH
25253: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
25257: LD_EXP 66
25261: PUSH
25262: LD_INT 1
25264: ARRAY
25265: PPUSH
25266: CALL_OW 258
25270: PUSH
25271: LD_INT 1
25273: EQUAL
25274: IFFALSE 25294
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
25276: LD_EXP 66
25280: PUSH
25281: LD_INT 1
25283: ARRAY
25284: PPUSH
25285: LD_STRING DRum-Factory-4
25287: PPUSH
25288: CALL_OW 88
25292: GO 25310
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
25294: LD_EXP 66
25298: PUSH
25299: LD_INT 1
25301: ARRAY
25302: PPUSH
25303: LD_STRING DRuf-Factory-4
25305: PPUSH
25306: CALL_OW 88
// wait ( 0 0$1 ) ;
25310: LD_INT 35
25312: PPUSH
25313: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
25317: LD_EXP 66
25321: PPUSH
25322: LD_INT 26
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PPUSH
25332: CALL_OW 72
25336: PUSH
25337: LD_INT 1
25339: ARRAY
25340: PPUSH
25341: LD_STRING DRum-Factory-6
25343: PPUSH
25344: CALL_OW 88
// wait ( 0 0$2 ) ;
25348: LD_INT 70
25350: PPUSH
25351: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
25355: LD_EXP 45
25359: PPUSH
25360: LD_INT 33
25362: PPUSH
25363: CALL_OW 336
// ComExitBuilding ( Heike ) ;
25367: LD_EXP 45
25371: PPUSH
25372: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25376: LD_EXP 45
25380: PPUSH
25381: LD_INT 168
25383: PPUSH
25384: LD_INT 54
25386: PPUSH
25387: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25391: LD_INT 173
25393: PPUSH
25394: LD_INT 54
25396: PPUSH
25397: LD_INT 2
25399: PPUSH
25400: CALL_OW 331
// InGameOff ;
25404: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
25408: LD_STRING M2b-out
25410: PPUSH
25411: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
25415: LD_STRING ACH_TOY
25417: PPUSH
25418: CALL_OW 543
// hasMuchin := false ;
25422: LD_ADDR_EXP 30
25426: PUSH
25427: LD_INT 0
25429: ST_TO_ADDR
// exit ;
25430: GO 27532
// end ; wait ( 0 0$5 ) ;
25432: LD_INT 175
25434: PPUSH
25435: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
25439: LD_INT 61
25441: PPUSH
25442: LD_INT 99
25444: PPUSH
25445: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
25449: LD_EXP 52
25453: PUSH
25454: LD_EXP 14
25458: IN
25459: PUSH
25460: LD_EXP 52
25464: PPUSH
25465: CALL_OW 255
25469: PUSH
25470: LD_INT 3
25472: EQUAL
25473: AND
25474: IFFALSE 25497
// begin SetSide ( Markov , 2 ) ;
25476: LD_EXP 52
25480: PPUSH
25481: LD_INT 2
25483: PPUSH
25484: CALL_OW 235
// ComExitBuilding ( Markov ) ;
25488: LD_EXP 52
25492: PPUSH
25493: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
25497: LD_EXP 45
25501: PPUSH
25502: LD_INT 2
25504: PPUSH
25505: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
25509: LD_EXP 45
25513: PPUSH
25514: LD_INT 33
25516: PPUSH
25517: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
25521: LD_EXP 65
25525: PPUSH
25526: CALL_OW 122
// ComExitBuilding ( Heike ) ;
25530: LD_EXP 45
25534: PPUSH
25535: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25539: LD_EXP 45
25543: PPUSH
25544: LD_INT 168
25546: PPUSH
25547: LD_INT 54
25549: PPUSH
25550: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25554: LD_INT 173
25556: PPUSH
25557: LD_INT 54
25559: PPUSH
25560: LD_INT 2
25562: PPUSH
25563: CALL_OW 331
// InGameOff ;
25567: CALL_OW 9
// wait ( 3 ) ;
25571: LD_INT 3
25573: PPUSH
25574: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
25578: LD_EXP 65
25582: PPUSH
25583: LD_INT 2
25585: PPUSH
25586: CALL_OW 120
// wait ( 0 0$3 ) ;
25590: LD_INT 105
25592: PPUSH
25593: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
25597: LD_STRING M2b-out
25599: PPUSH
25600: CALL_OW 337
// hasMuchin := false ;
25604: LD_ADDR_EXP 30
25608: PUSH
25609: LD_INT 0
25611: ST_TO_ADDR
// wait ( 2 2$00 ) ;
25612: LD_INT 4200
25614: PPUSH
25615: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25619: LD_INT 35
25621: PPUSH
25622: CALL_OW 67
// if not HasTask ( ruDisturb ) then
25626: LD_EXP 65
25630: PPUSH
25631: CALL_OW 314
25635: NOT
25636: IFFALSE 25652
// ComMoveUnit ( ruDisturb , Heike ) ;
25638: LD_EXP 65
25642: PPUSH
25643: LD_EXP 45
25647: PPUSH
25648: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
25652: LD_EXP 45
25656: PPUSH
25657: LD_EXP 65
25661: PPUSH
25662: CALL_OW 296
25666: PUSH
25667: LD_INT 2
25669: LESS
25670: PUSH
25671: LD_EXP 65
25675: PPUSH
25676: CALL_OW 302
25680: AND
25681: IFFALSE 25619
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25683: LD_EXP 45
25687: PPUSH
25688: CALL_OW 257
25692: PUSH
25693: LD_INT 33
25695: NONEQUAL
25696: PUSH
25697: LD_EXP 14
25701: PPUSH
25702: LD_INT 22
25704: PUSH
25705: LD_INT 2
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 91
25714: PUSH
25715: LD_EXP 65
25719: PUSH
25720: LD_INT 8
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 2
25730: PUSH
25731: LD_INT 25
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 25
25743: PUSH
25744: LD_INT 11
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 25
25753: PUSH
25754: LD_INT 32
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 25
25763: PUSH
25764: LD_INT 34
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: PPUSH
25783: CALL_OW 72
25787: OR
25788: IFFALSE 25798
// isAlarm := true ;
25790: LD_ADDR_EXP 17
25794: PUSH
25795: LD_INT 1
25797: ST_TO_ADDR
// if isAlarm then
25798: LD_EXP 17
25802: IFFALSE 25806
// exit ;
25804: GO 27532
// ComTurnUnit ( Heike , ruDisturb ) ;
25806: LD_EXP 45
25810: PPUSH
25811: LD_EXP 65
25815: PPUSH
25816: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
25820: LD_EXP 65
25824: PPUSH
25825: LD_EXP 45
25829: PPUSH
25830: CALL_OW 119
// wait ( 3 ) ;
25834: LD_INT 3
25836: PPUSH
25837: CALL_OW 67
// for i := 1 to 3 do
25841: LD_ADDR_VAR 0 1
25845: PUSH
25846: DOUBLE
25847: LD_INT 1
25849: DEC
25850: ST_TO_ADDR
25851: LD_INT 3
25853: PUSH
25854: FOR_TO
25855: IFFALSE 25872
// CreateCratesArea ( 5 , cratesArea , false ) ;
25857: LD_INT 5
25859: PPUSH
25860: LD_INT 58
25862: PPUSH
25863: LD_INT 0
25865: PPUSH
25866: CALL_OW 55
25870: GO 25854
25872: POP
25873: POP
// uc_side := 3 ;
25874: LD_ADDR_OWVAR 20
25878: PUSH
25879: LD_INT 3
25881: ST_TO_ADDR
// uc_nation := nation_russian ;
25882: LD_ADDR_OWVAR 21
25886: PUSH
25887: LD_INT 3
25889: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
25890: LD_INT 21
25892: PPUSH
25893: LD_INT 3
25895: PPUSH
25896: LD_INT 1
25898: PPUSH
25899: LD_INT 51
25901: PPUSH
25902: LD_INT 100
25904: PPUSH
25905: CALL 33791 0 5
// veh := CreateVehicle ;
25909: LD_ADDR_VAR 0 2
25913: PUSH
25914: CALL_OW 45
25918: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
25919: LD_VAR 0 2
25923: PPUSH
25924: LD_INT 104
25926: PPUSH
25927: LD_INT 41
25929: PPUSH
25930: LD_INT 3
25932: PPUSH
25933: LD_INT 0
25935: PPUSH
25936: CALL 68793 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
25940: LD_VAR 0 2
25944: PPUSH
25945: LD_INT 1
25947: PPUSH
25948: LD_INT 100
25950: PPUSH
25951: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
25955: CALL_OW 44
25959: PPUSH
25960: LD_VAR 0 2
25964: PPUSH
25965: CALL_OW 52
// DialogueOn ;
25969: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
25973: LD_EXP 65
25977: PPUSH
25978: LD_STRING DMcn-Interrupt-1
25980: PPUSH
25981: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
25985: LD_EXP 65
25989: PPUSH
25990: LD_STRING DMcn-Interrupt-2
25992: PPUSH
25993: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
25997: LD_EXP 65
26001: PPUSH
26002: LD_STRING DMcn-Interrupt-c-3
26004: PPUSH
26005: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
26009: LD_INT 101
26011: PPUSH
26012: LD_INT 38
26014: PPUSH
26015: LD_INT 2
26017: PPUSH
26018: LD_INT 10
26020: NEG
26021: PPUSH
26022: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
26026: LD_INT 101
26028: PPUSH
26029: LD_INT 38
26031: PPUSH
26032: CALL_OW 84
// wait ( 0 0$2 ) ;
26036: LD_INT 70
26038: PPUSH
26039: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
26043: LD_INT 101
26045: PPUSH
26046: LD_INT 38
26048: PPUSH
26049: LD_INT 2
26051: PPUSH
26052: CALL_OW 331
// RemoveUnit ( veh ) ;
26056: LD_VAR 0 2
26060: PPUSH
26061: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
26065: LD_EXP 65
26069: PPUSH
26070: LD_STRING DMcn-Interrupt-c-4
26072: PPUSH
26073: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
26077: LD_EXP 45
26081: PPUSH
26082: LD_STRING DH-Interrupt-c-5
26084: PPUSH
26085: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
26089: LD_EXP 65
26093: PPUSH
26094: LD_STRING DMcn-Interrupt-c-6
26096: PPUSH
26097: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
26101: LD_EXP 45
26105: PPUSH
26106: LD_STRING DH-Interrupt-c-7
26108: PPUSH
26109: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
26113: LD_EXP 65
26117: PPUSH
26118: LD_STRING DMcn-Interrupt-c-8
26120: PPUSH
26121: CALL_OW 88
// DialogueOff ;
26125: CALL_OW 7
// hasMuchin := true ;
26129: LD_ADDR_EXP 30
26133: PUSH
26134: LD_INT 1
26136: ST_TO_ADDR
// Query ( MuchinInfo ) ;
26137: LD_STRING MuchinInfo
26139: PPUSH
26140: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
26144: LD_STRING M2c
26146: PPUSH
26147: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
26151: LD_INT 35
26153: PPUSH
26154: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
26158: LD_EXP 65
26162: PPUSH
26163: LD_EXP 45
26167: PPUSH
26168: CALL_OW 296
26172: PUSH
26173: LD_INT 6
26175: GREATER
26176: IFFALSE 26192
// ComMoveUnit ( ruDisturb , Heike ) ;
26178: LD_EXP 65
26182: PPUSH
26183: LD_EXP 45
26187: PPUSH
26188: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26192: LD_EXP 45
26196: PPUSH
26197: CALL_OW 257
26201: PUSH
26202: LD_INT 33
26204: NONEQUAL
26205: PUSH
26206: LD_EXP 14
26210: PPUSH
26211: LD_INT 22
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 91
26223: PUSH
26224: LD_EXP 65
26228: PUSH
26229: LD_INT 8
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 25
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 25
26252: PUSH
26253: LD_INT 11
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 25
26262: PUSH
26263: LD_INT 32
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 25
26272: PUSH
26273: LD_INT 34
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: LIST
26291: PPUSH
26292: CALL_OW 72
26296: OR
26297: IFFALSE 26309
// begin isAlarm := true ;
26299: LD_ADDR_EXP 17
26303: PUSH
26304: LD_INT 1
26306: ST_TO_ADDR
// exit ;
26307: GO 27532
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
26309: LD_EXP 14
26313: PUSH
26314: LD_EXP 45
26318: UNION
26319: PPUSH
26320: LD_INT 92
26322: PUSH
26323: LD_INT 100
26325: PUSH
26326: LD_INT 37
26328: PUSH
26329: LD_INT 6
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: PPUSH
26338: CALL_OW 72
26342: IFFALSE 26151
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
26344: LD_INT 100
26346: PPUSH
26347: LD_INT 37
26349: PPUSH
26350: LD_INT 3
26352: PPUSH
26353: LD_INT 10
26355: NEG
26356: PPUSH
26357: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
26361: LD_ADDR_VAR 0 3
26365: PUSH
26366: LD_EXP 14
26370: PUSH
26371: LD_EXP 45
26375: UNION
26376: PPUSH
26377: LD_INT 25
26379: PUSH
26380: LD_INT 33
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 91
26389: PUSH
26390: LD_INT 6
26392: PUSH
26393: LD_INT 12
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PPUSH
26405: CALL_OW 72
26409: ST_TO_ADDR
// for i in tmp do
26410: LD_ADDR_VAR 0 1
26414: PUSH
26415: LD_VAR 0 3
26419: PUSH
26420: FOR_IN
26421: IFFALSE 26452
// begin SetSide ( i , 3 ) ;
26423: LD_VAR 0 1
26427: PPUSH
26428: LD_INT 3
26430: PPUSH
26431: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
26435: LD_VAR 0 1
26439: PPUSH
26440: LD_INT 101
26442: PPUSH
26443: LD_INT 38
26445: PPUSH
26446: CALL_OW 111
// end ;
26450: GO 26420
26452: POP
26453: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
26454: LD_EXP 65
26458: PPUSH
26459: LD_INT 104
26461: PPUSH
26462: LD_INT 37
26464: PPUSH
26465: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26469: LD_EXP 65
26473: PPUSH
26474: LD_EXP 45
26478: PPUSH
26479: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
26483: LD_INT 35
26485: PPUSH
26486: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
26490: LD_ADDR_VAR 0 4
26494: PUSH
26495: LD_INT 58
26497: PPUSH
26498: CALL_OW 435
26502: ST_TO_ADDR
// for i in tmp do
26503: LD_ADDR_VAR 0 1
26507: PUSH
26508: LD_VAR 0 3
26512: PUSH
26513: FOR_IN
26514: IFFALSE 26557
// if not HasTask ( i ) then
26516: LD_VAR 0 1
26520: PPUSH
26521: CALL_OW 314
26525: NOT
26526: IFFALSE 26555
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
26528: LD_VAR 0 1
26532: PPUSH
26533: LD_VAR 0 4
26537: PUSH
26538: LD_INT 1
26540: ARRAY
26541: PPUSH
26542: LD_VAR 0 4
26546: PUSH
26547: LD_INT 2
26549: ARRAY
26550: PPUSH
26551: CALL_OW 117
26555: GO 26513
26557: POP
26558: POP
// until not cr ;
26559: LD_VAR 0 4
26563: NOT
26564: IFFALSE 26483
// wait ( 0 0$2 ) ;
26566: LD_INT 70
26568: PPUSH
26569: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
26573: LD_INT 100
26575: PPUSH
26576: LD_INT 37
26578: PPUSH
26579: LD_INT 3
26581: PPUSH
26582: CALL_OW 331
// for i in tmp do
26586: LD_ADDR_VAR 0 1
26590: PUSH
26591: LD_VAR 0 3
26595: PUSH
26596: FOR_IN
26597: IFFALSE 26613
// SetSide ( i , 2 ) ;
26599: LD_VAR 0 1
26603: PPUSH
26604: LD_INT 2
26606: PPUSH
26607: CALL_OW 235
26611: GO 26596
26613: POP
26614: POP
// if Kaia in tmp then
26615: LD_EXP 50
26619: PUSH
26620: LD_VAR 0 3
26624: IN
26625: IFFALSE 26926
// begin InGameOn ;
26627: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
26631: LD_EXP 50
26635: PPUSH
26636: LD_EXP 65
26640: PPUSH
26641: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
26645: LD_EXP 65
26649: PPUSH
26650: LD_EXP 50
26654: PPUSH
26655: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
26659: LD_EXP 50
26663: PPUSH
26664: LD_EXP 65
26668: PPUSH
26669: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
26673: LD_EXP 50
26677: PPUSH
26678: LD_STRING DK-Assassin-1
26680: PPUSH
26681: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
26685: LD_EXP 65
26689: PPUSH
26690: LD_STRING DMcn-Assassin-2
26692: PPUSH
26693: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
26697: LD_EXP 50
26701: PPUSH
26702: LD_STRING DK-Assassin-3
26704: PPUSH
26705: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
26709: LD_EXP 65
26713: PPUSH
26714: LD_STRING DMcn-Assassin-4
26716: PPUSH
26717: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
26721: LD_EXP 50
26725: PPUSH
26726: LD_STRING DK-Assassin-5
26728: PPUSH
26729: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
26733: LD_EXP 65
26737: PPUSH
26738: LD_STRING DMcn-Assassin-6
26740: PPUSH
26741: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
26745: LD_EXP 50
26749: PPUSH
26750: LD_INT 3
26752: PPUSH
26753: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
26757: LD_EXP 50
26761: PUSH
26762: LD_EXP 65
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PPUSH
26771: LD_INT 6
26773: PPUSH
26774: CALL_OW 120
// wait ( 0 0$5 ) ;
26778: LD_INT 175
26780: PPUSH
26781: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
26785: LD_EXP 50
26789: PPUSH
26790: LD_STRING DK-Assassin-7
26792: PPUSH
26793: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
26797: LD_EXP 65
26801: PPUSH
26802: LD_STRING DMcn-Assassin-8
26804: PPUSH
26805: CALL_OW 88
// wait ( 0 0$0.3 ) ;
26809: LD_INT 10
26811: PPUSH
26812: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
26816: LD_EXP 50
26820: PPUSH
26821: LD_STRING DK-Assassin-9
26823: PPUSH
26824: CALL_OW 88
// wait ( 0 0$2 ) ;
26828: LD_INT 70
26830: PPUSH
26831: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
26835: LD_EXP 50
26839: PPUSH
26840: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
26844: LD_EXP 65
26848: PPUSH
26849: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
26853: LD_EXP 50
26857: PPUSH
26858: LD_INT 2
26860: PPUSH
26861: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
26865: LD_EXP 50
26869: PPUSH
26870: LD_EXP 45
26874: PPUSH
26875: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
26879: LD_EXP 50
26883: PPUSH
26884: LD_STRING DK-Assasin-10
26886: PPUSH
26887: CALL_OW 88
// InGameOff ;
26891: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
26895: LD_STRING ACH_POKER
26897: PPUSH
26898: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
26902: LD_STRING M2c-out
26904: PPUSH
26905: CALL_OW 337
// wait ( 0 0$3 ) ;
26909: LD_INT 105
26911: PPUSH
26912: CALL_OW 67
// hasMuchin := false ;
26916: LD_ADDR_EXP 30
26920: PUSH
26921: LD_INT 0
26923: ST_TO_ADDR
// exit ;
26924: GO 27532
// end ; ChangeMissionObjectives ( M2c-out ) ;
26926: LD_STRING M2c-out
26928: PPUSH
26929: CALL_OW 337
// InGameOn ;
26933: CALL_OW 8
// meetWithMuchin := true ;
26937: LD_ADDR_EXP 44
26941: PUSH
26942: LD_INT 1
26944: ST_TO_ADDR
// Say ( ruDisturb , DMcn-Fail-1 ) ;
26945: LD_EXP 65
26949: PPUSH
26950: LD_STRING DMcn-Fail-1
26952: PPUSH
26953: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
26957: LD_VAR 0 3
26961: PPUSH
26962: LD_INT 114
26964: PPUSH
26965: LD_INT 17
26967: PPUSH
26968: CALL_OW 111
// wait ( 0 0$1 ) ;
26972: LD_INT 35
26974: PPUSH
26975: CALL_OW 67
// async ;
26979: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
26980: LD_EXP 65
26984: PPUSH
26985: LD_EXP 45
26989: PPUSH
26990: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
26994: LD_EXP 65
26998: PPUSH
26999: LD_STRING DMcn-Fail-2
27001: PPUSH
27002: CALL_OW 88
// ComStop ( Heike ) ;
27006: LD_EXP 45
27010: PPUSH
27011: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
27015: LD_EXP 45
27019: PPUSH
27020: LD_EXP 65
27024: PPUSH
27025: CALL_OW 179
// sync ;
27029: SYNC
// Say ( Heike , DH-Fail-3 ) ;
27030: LD_EXP 45
27034: PPUSH
27035: LD_STRING DH-Fail-3
27037: PPUSH
27038: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
27042: LD_EXP 65
27046: PPUSH
27047: LD_STRING DMcn-Fail-4
27049: PPUSH
27050: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
27054: LD_EXP 45
27058: PUSH
27059: LD_EXP 65
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PPUSH
27068: LD_INT 41
27070: PPUSH
27071: LD_INT 19
27073: PPUSH
27074: CALL_OW 111
// wait ( 0 0$2 ) ;
27078: LD_INT 70
27080: PPUSH
27081: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
27085: LD_EXP 65
27089: PPUSH
27090: LD_INT 40
27092: PPUSH
27093: LD_INT 19
27095: PPUSH
27096: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
27100: LD_EXP 45
27104: PPUSH
27105: LD_INT 43
27107: PPUSH
27108: LD_INT 21
27110: PPUSH
27111: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27115: LD_EXP 65
27119: PPUSH
27120: LD_EXP 45
27124: PPUSH
27125: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
27129: LD_EXP 45
27133: PPUSH
27134: LD_EXP 65
27138: PPUSH
27139: CALL_OW 179
// wait ( 0 0$2 ) ;
27143: LD_INT 70
27145: PPUSH
27146: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
27150: LD_EXP 65
27154: PPUSH
27155: LD_STRING DMcn-Fail-5
27157: PPUSH
27158: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27162: LD_EXP 45
27166: PPUSH
27167: CALL_OW 87
// wait ( 0 0$2 ) ;
27171: LD_INT 70
27173: PPUSH
27174: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
27178: LD_EXP 65
27182: PPUSH
27183: LD_STRING DMcn-Fail-6
27185: PPUSH
27186: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27190: LD_EXP 45
27194: PPUSH
27195: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
27199: LD_INT 35
27201: PPUSH
27202: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
27206: LD_EXP 45
27210: PPUSH
27211: LD_INT 43
27213: PPUSH
27214: LD_INT 21
27216: PPUSH
27217: CALL_OW 307
27221: IFFALSE 27199
// CenterNowOnUnits ( Heike ) ;
27223: LD_EXP 45
27227: PPUSH
27228: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
27232: LD_STRING MuchinQuestion
27234: PPUSH
27235: CALL_OW 97
27239: PUSH
27240: LD_INT 1
27242: DOUBLE
27243: EQUAL
27244: IFTRUE 27248
27246: GO 27348
27248: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
27249: LD_EXP 65
27253: PPUSH
27254: LD_STRING DMcn-Fail-7
27256: PPUSH
27257: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
27261: LD_EXP 45
27265: PPUSH
27266: LD_STRING DH-Fail-8
27268: PPUSH
27269: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27273: LD_INT 10
27275: PPUSH
27276: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
27280: LD_EXP 45
27284: PPUSH
27285: LD_STRING DH-Fail-9
27287: PPUSH
27288: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27292: LD_EXP 45
27296: PPUSH
27297: LD_STRING DH-Fail-10
27299: PPUSH
27300: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
27304: LD_EXP 65
27308: PPUSH
27309: LD_STRING DMcn-Fail-11
27311: PPUSH
27312: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
27316: LD_EXP 65
27320: PPUSH
27321: LD_EXP 45
27325: PPUSH
27326: CALL_OW 115
// wait ( 0 0$2 ) ;
27330: LD_INT 70
27332: PPUSH
27333: CALL_OW 67
// KillUnit ( Heike ) ;
27337: LD_EXP 45
27341: PPUSH
27342: CALL_OW 66
// end ; 2 :
27346: GO 27528
27348: LD_INT 2
27350: DOUBLE
27351: EQUAL
27352: IFTRUE 27356
27354: GO 27527
27356: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
27357: LD_EXP 45
27361: PPUSH
27362: LD_STRING DH-Fail-a-8
27364: PPUSH
27365: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
27369: LD_EXP 45
27373: PPUSH
27374: LD_STRING DH-Fail-a-9
27376: PPUSH
27377: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27381: LD_EXP 45
27385: PPUSH
27386: LD_STRING DH-Fail-10
27388: PPUSH
27389: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
27393: LD_EXP 45
27397: PPUSH
27398: LD_STRING DH-Fail-a-11
27400: PPUSH
27401: CALL_OW 88
// async ;
27405: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27406: LD_EXP 65
27410: PPUSH
27411: LD_EXP 45
27415: PPUSH
27416: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
27420: LD_EXP 65
27424: PPUSH
27425: LD_EXP 45
27429: PPUSH
27430: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
27434: LD_EXP 65
27438: PPUSH
27439: LD_STRING DH-Fail-12
27441: PPUSH
27442: CALL_OW 88
// sync ;
27446: SYNC
// wait ( 0 0$1 ) ;
27447: LD_INT 35
27449: PPUSH
27450: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
27454: LD_EXP 45
27458: PPUSH
27459: LD_STRING DH-Fail-a-13
27461: PPUSH
27462: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
27466: LD_EXP 65
27470: PPUSH
27471: LD_INT 100
27473: PPUSH
27474: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
27478: LD_EXP 65
27482: PPUSH
27483: LD_STRING DMcn-Fail-a-14
27485: PPUSH
27486: CALL_OW 91
// KillUnit ( ruDisturb ) ;
27490: LD_EXP 65
27494: PPUSH
27495: CALL_OW 66
// wait ( 0 0$1 ) ;
27499: LD_INT 35
27501: PPUSH
27502: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
27506: LD_EXP 45
27510: PPUSH
27511: LD_STRING DH-Fail-a-15
27513: PPUSH
27514: CALL_OW 88
// YouLost ( FailMuchin ) ;
27518: LD_STRING FailMuchin
27520: PPUSH
27521: CALL_OW 104
// end ; end ;
27525: GO 27528
27527: POP
// InGameOff ;
27528: CALL_OW 9
// end ; end_of_file
27532: PPOPN 4
27534: END
// every 0 0$1 marked gameStartEvent do
27535: GO 27537
27537: DISABLE
// begin enable ;
27538: ENABLE
// if not contactWithAmerican then
27539: LD_EXP 25
27543: NOT
27544: IFFALSE 27589
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
27546: LD_ADDR_OWVAR 47
27550: PUSH
27551: LD_STRING #X108-1
27553: PUSH
27554: LD_INT 22
27556: PUSH
27557: LD_INT 5
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 21
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PPUSH
27578: CALL_OW 69
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: ST_TO_ADDR
27587: GO 27678
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
27589: LD_ADDR_OWVAR 47
27593: PUSH
27594: LD_STRING #X108-1
27596: PUSH
27597: LD_INT 22
27599: PUSH
27600: LD_INT 5
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 21
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 50
27619: PUSH
27620: EMPTY
27621: LIST
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: PPUSH
27628: CALL_OW 69
27632: PUSH
27633: LD_STRING #X108-2
27635: PUSH
27636: LD_INT 22
27638: PUSH
27639: LD_INT 4
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 21
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 50
27658: PUSH
27659: EMPTY
27660: LIST
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: PPUSH
27667: CALL_OW 69
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: ST_TO_ADDR
// end ; end_of_file
27678: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
27679: LD_EXP 45
27683: PPUSH
27684: LD_INT 59
27686: PPUSH
27687: CALL_OW 308
27691: IFFALSE 27813
27693: GO 27695
27695: DISABLE
// begin Query ( FinalInfo ) ;
27696: LD_STRING FinalInfo
27698: PPUSH
27699: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
27703: LD_INT 59
27705: PPUSH
27706: LD_INT 1
27708: PPUSH
27709: CALL_OW 424
// end_the_mission_allowed := true ;
27713: LD_ADDR_OWVAR 57
27717: PUSH
27718: LD_INT 1
27720: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27721: LD_INT 35
27723: PPUSH
27724: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
27728: LD_INT 22
27730: PUSH
27731: LD_INT 2
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 21
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 95
27750: PUSH
27751: LD_INT 59
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: LIST
27762: PPUSH
27763: CALL_OW 69
27767: PPUSH
27768: CALL 31053 0 1
27772: PUSH
27773: LD_INT 22
27775: PUSH
27776: LD_INT 2
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 21
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PPUSH
27797: CALL_OW 69
27801: PPUSH
27802: CALL 31053 0 1
27806: EQUAL
27807: IFFALSE 27721
// EndMission ;
27809: CALL 27821 0 0
// end ;
27813: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
27814: CALL 27821 0 0
// end ;
27818: PPOPN 1
27820: END
// function EndMission ; begin
27821: LD_INT 0
27823: PPUSH
// PlayOriginalMusic ;
27824: CALL 91824 0 0
// if not IsInArea ( Heike , finalArea ) then
27828: LD_EXP 45
27832: PPUSH
27833: LD_INT 59
27835: PPUSH
27836: CALL_OW 308
27840: NOT
27841: IFFALSE 27852
// begin Query ( HeikeOutOfArea ) ;
27843: LD_STRING HeikeOutOfArea
27845: PPUSH
27846: CALL_OW 97
// exit ;
27850: GO 28749
// end ; if not IsOk ( Heike ) then
27852: LD_EXP 45
27856: PPUSH
27857: CALL_OW 302
27861: NOT
27862: IFFALSE 27873
// begin Query ( HeikeIsHurt ) ;
27864: LD_STRING HeikeIsHurt
27866: PPUSH
27867: CALL_OW 97
// exit ;
27871: GO 28749
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
27873: LD_INT 22
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 21
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 50
27895: PUSH
27896: EMPTY
27897: LIST
27898: PUSH
27899: LD_INT 95
27901: PUSH
27902: LD_INT 59
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: PPUSH
27915: CALL_OW 69
27919: PPUSH
27920: CALL 31053 0 1
27924: PUSH
27925: LD_INT 6
27927: LESS
27928: IFFALSE 27937
// YouLost ( NeedMorePep ) ;
27930: LD_STRING NeedMorePep
27932: PPUSH
27933: CALL_OW 104
// if tick < 20 20$00 then
27937: LD_OWVAR 1
27941: PUSH
27942: LD_INT 42000
27944: LESS
27945: IFFALSE 27954
// SetAchievement ( ACH_HSPEED_8 ) ;
27947: LD_STRING ACH_HSPEED_8
27949: PPUSH
27950: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
27954: LD_INT 22
27956: PUSH
27957: LD_INT 5
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 21
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PPUSH
27978: CALL_OW 69
27982: PUSH
27983: LD_INT 0
27985: EQUAL
27986: PUSH
27987: LD_EXP 32
27991: PUSH
27992: LD_INT 0
27994: EQUAL
27995: AND
27996: IFFALSE 28010
// AddMedal ( med1 , 1 ) else
27998: LD_STRING med1
28000: PPUSH
28001: LD_INT 1
28003: PPUSH
28004: CALL_OW 101
28008: GO 28021
// AddMedal ( med1 , - 1 ) ;
28010: LD_STRING med1
28012: PPUSH
28013: LD_INT 1
28015: NEG
28016: PPUSH
28017: CALL_OW 101
// if explosivePlantedList >= 3 then
28021: LD_EXP 29
28025: PUSH
28026: LD_INT 3
28028: GREATEREQUAL
28029: IFFALSE 28043
// AddMedal ( med2 , 1 ) else
28031: LD_STRING med2
28033: PPUSH
28034: LD_INT 1
28036: PPUSH
28037: CALL_OW 101
28041: GO 28077
// if explosivePlantedList < 3 then
28043: LD_EXP 29
28047: PUSH
28048: LD_INT 3
28050: LESS
28051: IFFALSE 28066
// AddMedal ( med2 , - 2 ) else
28053: LD_STRING med2
28055: PPUSH
28056: LD_INT 2
28058: NEG
28059: PPUSH
28060: CALL_OW 101
28064: GO 28077
// AddMedal ( med2 , - 1 ) ;
28066: LD_STRING med2
28068: PPUSH
28069: LD_INT 1
28071: NEG
28072: PPUSH
28073: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
28077: LD_INT 5
28079: PPUSH
28080: LD_INT 2
28082: PPUSH
28083: CALL_OW 321
28087: PUSH
28088: LD_INT 2
28090: EQUAL
28091: IFFALSE 28105
// AddMedal ( med3 , 1 ) else
28093: LD_STRING med3
28095: PPUSH
28096: LD_INT 1
28098: PPUSH
28099: CALL_OW 101
28103: GO 28116
// AddMedal ( med3 , - 1 ) ;
28105: LD_STRING med3
28107: PPUSH
28108: LD_INT 1
28110: NEG
28111: PPUSH
28112: CALL_OW 101
// GiveMedals ( MAIN ) ;
28116: LD_STRING MAIN
28118: PPUSH
28119: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
28123: LD_INT 22
28125: PUSH
28126: LD_INT 2
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 23
28135: PUSH
28136: LD_INT 2
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 21
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: PPUSH
28158: CALL_OW 69
28162: PPUSH
28163: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
28167: LD_EXP 59
28171: PUSH
28172: LD_EXP 59
28176: PPUSH
28177: CALL_OW 255
28181: PUSH
28182: LD_INT 2
28184: EQUAL
28185: AND
28186: IFFALSE 28200
// SaveCharacters ( Doug , 08_UsCommander ) ;
28188: LD_EXP 59
28192: PPUSH
28193: LD_STRING 08_UsCommander
28195: PPUSH
28196: CALL_OW 38
// if Harris and GetSide ( Harris ) = 2 then
28200: LD_EXP 58
28204: PUSH
28205: LD_EXP 58
28209: PPUSH
28210: CALL_OW 255
28214: PUSH
28215: LD_INT 2
28217: EQUAL
28218: AND
28219: IFFALSE 28233
// SaveCharacters ( Harris , 08_Harris ) ;
28221: LD_EXP 58
28225: PPUSH
28226: LD_STRING 08_Harris
28228: PPUSH
28229: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff [ Doug , Harris ] , 08_Americans ) ;
28233: LD_INT 22
28235: PUSH
28236: LD_INT 2
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 23
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 21
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: LIST
28267: PPUSH
28268: CALL_OW 69
28272: PUSH
28273: LD_EXP 59
28277: PUSH
28278: LD_EXP 58
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: DIFF
28287: PPUSH
28288: LD_STRING 08_Americans
28290: PPUSH
28291: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
28295: LD_EXP 45
28299: PPUSH
28300: CALL_OW 248
28304: PUSH
28305: LD_INT 3
28307: EQUAL
28308: IFFALSE 28338
// begin CopySkills ( Heike , HeikeTmp ) ;
28310: LD_EXP 45
28314: PPUSH
28315: LD_EXP 61
28319: PPUSH
28320: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
28324: LD_EXP 61
28328: PPUSH
28329: LD_STRING 08_Heike
28331: PPUSH
28332: CALL_OW 38
// end else
28336: GO 28350
// SaveCharacters ( Heike , 08_Heike ) ;
28338: LD_EXP 45
28342: PPUSH
28343: LD_STRING 08_Heike
28345: PPUSH
28346: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
28350: LD_EXP 55
28354: PUSH
28355: LD_EXP 55
28359: PPUSH
28360: CALL_OW 255
28364: PUSH
28365: LD_INT 2
28367: EQUAL
28368: AND
28369: IFFALSE 28383
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
28371: LD_EXP 55
28375: PPUSH
28376: LD_STRING 08_Aviradze
28378: PPUSH
28379: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
28383: LD_EXP 48
28387: PUSH
28388: LD_EXP 48
28392: PPUSH
28393: CALL_OW 255
28397: PUSH
28398: LD_INT 2
28400: EQUAL
28401: AND
28402: IFFALSE 28416
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
28404: LD_EXP 48
28408: PPUSH
28409: LD_STRING 08_Ibrahim
28411: PPUSH
28412: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
28416: LD_EXP 49
28420: PUSH
28421: LD_EXP 49
28425: PPUSH
28426: CALL_OW 255
28430: PUSH
28431: LD_INT 2
28433: EQUAL
28434: AND
28435: IFFALSE 28449
// SaveCharacters ( Kamil , 08_Kamil ) ;
28437: LD_EXP 49
28441: PPUSH
28442: LD_STRING 08_Kamil
28444: PPUSH
28445: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
28449: LD_EXP 51
28453: PUSH
28454: LD_EXP 51
28458: PPUSH
28459: CALL_OW 255
28463: PUSH
28464: LD_INT 2
28466: EQUAL
28467: AND
28468: IFFALSE 28482
// SaveCharacters ( Sophia , 08_Sophia ) ;
28470: LD_EXP 51
28474: PPUSH
28475: LD_STRING 08_Sophia
28477: PPUSH
28478: CALL_OW 38
// if Kaia and GetSide ( Kaia ) = 2 then
28482: LD_EXP 50
28486: PUSH
28487: LD_EXP 50
28491: PPUSH
28492: CALL_OW 255
28496: PUSH
28497: LD_INT 2
28499: EQUAL
28500: AND
28501: IFFALSE 28515
// SaveCharacters ( Kaia , 08_Kaia ) ;
28503: LD_EXP 50
28507: PPUSH
28508: LD_STRING 08_Kaia
28510: PPUSH
28511: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
28515: LD_EXP 46
28519: PUSH
28520: LD_EXP 46
28524: PPUSH
28525: CALL_OW 255
28529: PUSH
28530: LD_INT 2
28532: EQUAL
28533: AND
28534: IFFALSE 28591
// if GetNation ( Givi ) = nation_russian then
28536: LD_EXP 46
28540: PPUSH
28541: CALL_OW 248
28545: PUSH
28546: LD_INT 3
28548: EQUAL
28549: IFFALSE 28579
// begin CopySkills ( Givi , GiviTmp ) ;
28551: LD_EXP 46
28555: PPUSH
28556: LD_EXP 62
28560: PPUSH
28561: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
28565: LD_EXP 62
28569: PPUSH
28570: LD_STRING 08_Givi
28572: PPUSH
28573: CALL_OW 38
// end else
28577: GO 28591
// SaveCharacters ( Givi , 08_Givi ) ;
28579: LD_EXP 46
28583: PPUSH
28584: LD_STRING 08_Givi
28586: PPUSH
28587: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
28591: LD_EXP 47
28595: PUSH
28596: LD_EXP 47
28600: PPUSH
28601: CALL_OW 255
28605: PUSH
28606: LD_INT 2
28608: EQUAL
28609: AND
28610: IFFALSE 28624
// SaveCharacters ( Mike , 08_Mike ) ;
28612: LD_EXP 47
28616: PPUSH
28617: LD_STRING 08_Mike
28619: PPUSH
28620: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
28624: LD_EXP 52
28628: PUSH
28629: LD_EXP 52
28633: PPUSH
28634: CALL_OW 255
28638: PUSH
28639: LD_INT 2
28641: EQUAL
28642: AND
28643: IFFALSE 28657
// SaveCharacters ( Markov , 08_Markov ) ;
28645: LD_EXP 52
28649: PPUSH
28650: LD_STRING 08_Markov
28652: PPUSH
28653: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
28657: LD_EXP 54
28661: PUSH
28662: LD_EXP 54
28666: PPUSH
28667: CALL_OW 255
28671: PUSH
28672: LD_INT 2
28674: EQUAL
28675: AND
28676: IFFALSE 28690
// SaveCharacters ( Kurt , 08_Kurt ) ;
28678: LD_EXP 54
28682: PPUSH
28683: LD_STRING 08_Kurt
28685: PPUSH
28686: CALL_OW 38
// if Olaf and GetSide ( Olaf ) = 2 then
28690: LD_EXP 53
28694: PUSH
28695: LD_EXP 53
28699: PPUSH
28700: CALL_OW 255
28704: PUSH
28705: LD_INT 2
28707: EQUAL
28708: AND
28709: IFFALSE 28723
// SaveCharacters ( Olaf , 08_Olaf ) ;
28711: LD_EXP 53
28715: PPUSH
28716: LD_STRING 08_Olaf
28718: PPUSH
28719: CALL_OW 38
// if heikeSecondSquad then
28723: LD_EXP 56
28727: IFFALSE 28741
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
28729: LD_EXP 56
28733: PPUSH
28734: LD_STRING 08_others
28736: PPUSH
28737: CALL_OW 38
// YouWin ;
28741: CALL_OW 103
// DialogueOff ;
28745: CALL_OW 7
// end ; end_of_file
28749: LD_VAR 0 1
28753: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
28754: LD_EXP 5
28758: IFFALSE 28948
28760: GO 28762
28762: DISABLE
28763: LD_INT 0
28765: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
28766: LD_INT 35
28768: PPUSH
28769: LD_INT 2100
28771: PPUSH
28772: CALL_OW 12
28776: PPUSH
28777: CALL_OW 67
// StopOriginalMusic ;
28781: CALL 91809 0 0
// weatherBusy := true ;
28785: LD_ADDR_EXP 37
28789: PUSH
28790: LD_INT 1
28792: ST_TO_ADDR
// for i := 1 to 3 do
28793: LD_ADDR_VAR 0 1
28797: PUSH
28798: DOUBLE
28799: LD_INT 1
28801: DEC
28802: ST_TO_ADDR
28803: LD_INT 3
28805: PUSH
28806: FOR_TO
28807: IFFALSE 28841
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
28809: LD_INT 1
28811: PPUSH
28812: LD_INT 100
28814: PUSH
28815: LD_INT 100
28817: PUSH
28818: LD_VAR 0 1
28822: MUL
28823: PLUS
28824: PPUSH
28825: LD_INT 60
28827: PPUSH
28828: CALL_OW 550
// wait ( 0 0$2 ) ;
28832: LD_INT 70
28834: PPUSH
28835: CALL_OW 67
// end ;
28839: GO 28806
28841: POP
28842: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
28843: LD_STRING ArStormRain.wav
28845: PPUSH
28846: LD_STRING OW_CUSTOM_COMMAND(103);
28848: PPUSH
28849: CALL 91839 0 2
// wait ( 0 0$3 ) ;
28853: LD_INT 105
28855: PPUSH
28856: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
28860: LD_INT 1
28862: PPUSH
28863: LD_INT 900
28865: PPUSH
28866: LD_INT 120
28868: PPUSH
28869: CALL_OW 550
// wait ( 0 0$10 ) ;
28873: LD_INT 350
28875: PPUSH
28876: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
28880: LD_INT 1
28882: PPUSH
28883: LD_INT 1500
28885: PPUSH
28886: LD_INT 300
28888: PPUSH
28889: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
28893: LD_INT 35
28895: PPUSH
28896: CALL_OW 67
// until not weatherBusy ;
28900: LD_EXP 37
28904: NOT
28905: IFFALSE 28893
// SetWeather ( 0 , 0 , 0 ) ;
28907: LD_INT 0
28909: PPUSH
28910: LD_INT 0
28912: PPUSH
28913: LD_INT 0
28915: PPUSH
28916: CALL_OW 550
// wait ( 5 5$00 ) ;
28920: LD_INT 10500
28922: PPUSH
28923: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
28927: LD_STRING ArStormNormal.wav
28929: PPUSH
28930: LD_STRING OW_CUSTOM_COMMAND(103);
28932: PPUSH
28933: CALL 91839 0 2
// wait ( 5 5$00 ) ;
28937: LD_INT 10500
28939: PPUSH
28940: CALL_OW 67
// PlayOriginalMusic ;
28944: CALL 91824 0 0
// end ; end_of_file
28948: PPOPN 1
28950: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28951: LD_INT 0
28953: PPUSH
28954: PPUSH
// if exist_mode then
28955: LD_VAR 0 2
28959: IFFALSE 28984
// unit := CreateCharacter ( prefix & ident ) else
28961: LD_ADDR_VAR 0 5
28965: PUSH
28966: LD_VAR 0 3
28970: PUSH
28971: LD_VAR 0 1
28975: STR
28976: PPUSH
28977: CALL_OW 34
28981: ST_TO_ADDR
28982: GO 28999
// unit := NewCharacter ( ident ) ;
28984: LD_ADDR_VAR 0 5
28988: PUSH
28989: LD_VAR 0 1
28993: PPUSH
28994: CALL_OW 25
28998: ST_TO_ADDR
// result := unit ;
28999: LD_ADDR_VAR 0 4
29003: PUSH
29004: LD_VAR 0 5
29008: ST_TO_ADDR
// end ;
29009: LD_VAR 0 4
29013: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29014: LD_INT 0
29016: PPUSH
29017: PPUSH
// if not side or not nation then
29018: LD_VAR 0 1
29022: NOT
29023: PUSH
29024: LD_VAR 0 2
29028: NOT
29029: OR
29030: IFFALSE 29034
// exit ;
29032: GO 29802
// case nation of nation_american :
29034: LD_VAR 0 2
29038: PUSH
29039: LD_INT 1
29041: DOUBLE
29042: EQUAL
29043: IFTRUE 29047
29045: GO 29261
29047: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29048: LD_ADDR_VAR 0 4
29052: PUSH
29053: LD_INT 35
29055: PUSH
29056: LD_INT 45
29058: PUSH
29059: LD_INT 46
29061: PUSH
29062: LD_INT 47
29064: PUSH
29065: LD_INT 82
29067: PUSH
29068: LD_INT 83
29070: PUSH
29071: LD_INT 84
29073: PUSH
29074: LD_INT 85
29076: PUSH
29077: LD_INT 86
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: LD_INT 2
29085: PUSH
29086: LD_INT 6
29088: PUSH
29089: LD_INT 15
29091: PUSH
29092: LD_INT 16
29094: PUSH
29095: LD_INT 7
29097: PUSH
29098: LD_INT 12
29100: PUSH
29101: LD_INT 13
29103: PUSH
29104: LD_INT 10
29106: PUSH
29107: LD_INT 14
29109: PUSH
29110: LD_INT 20
29112: PUSH
29113: LD_INT 21
29115: PUSH
29116: LD_INT 22
29118: PUSH
29119: LD_INT 25
29121: PUSH
29122: LD_INT 32
29124: PUSH
29125: LD_INT 27
29127: PUSH
29128: LD_INT 36
29130: PUSH
29131: LD_INT 69
29133: PUSH
29134: LD_INT 39
29136: PUSH
29137: LD_INT 34
29139: PUSH
29140: LD_INT 40
29142: PUSH
29143: LD_INT 48
29145: PUSH
29146: LD_INT 49
29148: PUSH
29149: LD_INT 50
29151: PUSH
29152: LD_INT 51
29154: PUSH
29155: LD_INT 52
29157: PUSH
29158: LD_INT 53
29160: PUSH
29161: LD_INT 54
29163: PUSH
29164: LD_INT 55
29166: PUSH
29167: LD_INT 56
29169: PUSH
29170: LD_INT 57
29172: PUSH
29173: LD_INT 58
29175: PUSH
29176: LD_INT 59
29178: PUSH
29179: LD_INT 60
29181: PUSH
29182: LD_INT 61
29184: PUSH
29185: LD_INT 62
29187: PUSH
29188: LD_INT 80
29190: PUSH
29191: LD_INT 82
29193: PUSH
29194: LD_INT 83
29196: PUSH
29197: LD_INT 84
29199: PUSH
29200: LD_INT 85
29202: PUSH
29203: LD_INT 86
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: ST_TO_ADDR
29259: GO 29726
29261: LD_INT 2
29263: DOUBLE
29264: EQUAL
29265: IFTRUE 29269
29267: GO 29495
29269: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29270: LD_ADDR_VAR 0 4
29274: PUSH
29275: LD_INT 35
29277: PUSH
29278: LD_INT 45
29280: PUSH
29281: LD_INT 46
29283: PUSH
29284: LD_INT 47
29286: PUSH
29287: LD_INT 82
29289: PUSH
29290: LD_INT 83
29292: PUSH
29293: LD_INT 84
29295: PUSH
29296: LD_INT 85
29298: PUSH
29299: LD_INT 87
29301: PUSH
29302: LD_INT 70
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: LD_INT 11
29310: PUSH
29311: LD_INT 3
29313: PUSH
29314: LD_INT 4
29316: PUSH
29317: LD_INT 5
29319: PUSH
29320: LD_INT 6
29322: PUSH
29323: LD_INT 15
29325: PUSH
29326: LD_INT 18
29328: PUSH
29329: LD_INT 7
29331: PUSH
29332: LD_INT 17
29334: PUSH
29335: LD_INT 8
29337: PUSH
29338: LD_INT 20
29340: PUSH
29341: LD_INT 21
29343: PUSH
29344: LD_INT 22
29346: PUSH
29347: LD_INT 72
29349: PUSH
29350: LD_INT 26
29352: PUSH
29353: LD_INT 69
29355: PUSH
29356: LD_INT 39
29358: PUSH
29359: LD_INT 40
29361: PUSH
29362: LD_INT 41
29364: PUSH
29365: LD_INT 42
29367: PUSH
29368: LD_INT 43
29370: PUSH
29371: LD_INT 48
29373: PUSH
29374: LD_INT 49
29376: PUSH
29377: LD_INT 50
29379: PUSH
29380: LD_INT 51
29382: PUSH
29383: LD_INT 52
29385: PUSH
29386: LD_INT 53
29388: PUSH
29389: LD_INT 54
29391: PUSH
29392: LD_INT 55
29394: PUSH
29395: LD_INT 56
29397: PUSH
29398: LD_INT 60
29400: PUSH
29401: LD_INT 61
29403: PUSH
29404: LD_INT 62
29406: PUSH
29407: LD_INT 66
29409: PUSH
29410: LD_INT 67
29412: PUSH
29413: LD_INT 68
29415: PUSH
29416: LD_INT 81
29418: PUSH
29419: LD_INT 82
29421: PUSH
29422: LD_INT 83
29424: PUSH
29425: LD_INT 84
29427: PUSH
29428: LD_INT 85
29430: PUSH
29431: LD_INT 87
29433: PUSH
29434: LD_INT 88
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: ST_TO_ADDR
29493: GO 29726
29495: LD_INT 3
29497: DOUBLE
29498: EQUAL
29499: IFTRUE 29503
29501: GO 29725
29503: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29504: LD_ADDR_VAR 0 4
29508: PUSH
29509: LD_INT 46
29511: PUSH
29512: LD_INT 47
29514: PUSH
29515: LD_INT 1
29517: PUSH
29518: LD_INT 2
29520: PUSH
29521: LD_INT 82
29523: PUSH
29524: LD_INT 83
29526: PUSH
29527: LD_INT 84
29529: PUSH
29530: LD_INT 85
29532: PUSH
29533: LD_INT 86
29535: PUSH
29536: LD_INT 11
29538: PUSH
29539: LD_INT 9
29541: PUSH
29542: LD_INT 20
29544: PUSH
29545: LD_INT 19
29547: PUSH
29548: LD_INT 21
29550: PUSH
29551: LD_INT 24
29553: PUSH
29554: LD_INT 22
29556: PUSH
29557: LD_INT 25
29559: PUSH
29560: LD_INT 28
29562: PUSH
29563: LD_INT 29
29565: PUSH
29566: LD_INT 30
29568: PUSH
29569: LD_INT 31
29571: PUSH
29572: LD_INT 37
29574: PUSH
29575: LD_INT 38
29577: PUSH
29578: LD_INT 32
29580: PUSH
29581: LD_INT 27
29583: PUSH
29584: LD_INT 33
29586: PUSH
29587: LD_INT 69
29589: PUSH
29590: LD_INT 39
29592: PUSH
29593: LD_INT 34
29595: PUSH
29596: LD_INT 40
29598: PUSH
29599: LD_INT 71
29601: PUSH
29602: LD_INT 23
29604: PUSH
29605: LD_INT 44
29607: PUSH
29608: LD_INT 48
29610: PUSH
29611: LD_INT 49
29613: PUSH
29614: LD_INT 50
29616: PUSH
29617: LD_INT 51
29619: PUSH
29620: LD_INT 52
29622: PUSH
29623: LD_INT 53
29625: PUSH
29626: LD_INT 54
29628: PUSH
29629: LD_INT 55
29631: PUSH
29632: LD_INT 56
29634: PUSH
29635: LD_INT 57
29637: PUSH
29638: LD_INT 58
29640: PUSH
29641: LD_INT 59
29643: PUSH
29644: LD_INT 63
29646: PUSH
29647: LD_INT 64
29649: PUSH
29650: LD_INT 65
29652: PUSH
29653: LD_INT 82
29655: PUSH
29656: LD_INT 83
29658: PUSH
29659: LD_INT 84
29661: PUSH
29662: LD_INT 85
29664: PUSH
29665: LD_INT 86
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: ST_TO_ADDR
29723: GO 29726
29725: POP
// if state > - 1 and state < 3 then
29726: LD_VAR 0 3
29730: PUSH
29731: LD_INT 1
29733: NEG
29734: GREATER
29735: PUSH
29736: LD_VAR 0 3
29740: PUSH
29741: LD_INT 3
29743: LESS
29744: AND
29745: IFFALSE 29802
// for i in result do
29747: LD_ADDR_VAR 0 5
29751: PUSH
29752: LD_VAR 0 4
29756: PUSH
29757: FOR_IN
29758: IFFALSE 29800
// if GetTech ( i , side ) <> state then
29760: LD_VAR 0 5
29764: PPUSH
29765: LD_VAR 0 1
29769: PPUSH
29770: CALL_OW 321
29774: PUSH
29775: LD_VAR 0 3
29779: NONEQUAL
29780: IFFALSE 29798
// result := result diff i ;
29782: LD_ADDR_VAR 0 4
29786: PUSH
29787: LD_VAR 0 4
29791: PUSH
29792: LD_VAR 0 5
29796: DIFF
29797: ST_TO_ADDR
29798: GO 29757
29800: POP
29801: POP
// end ;
29802: LD_VAR 0 4
29806: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29807: LD_INT 0
29809: PPUSH
29810: PPUSH
29811: PPUSH
// result := true ;
29812: LD_ADDR_VAR 0 3
29816: PUSH
29817: LD_INT 1
29819: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29820: LD_ADDR_VAR 0 5
29824: PUSH
29825: LD_VAR 0 2
29829: PPUSH
29830: CALL_OW 480
29834: ST_TO_ADDR
// if not tmp then
29835: LD_VAR 0 5
29839: NOT
29840: IFFALSE 29844
// exit ;
29842: GO 29893
// for i in tmp do
29844: LD_ADDR_VAR 0 4
29848: PUSH
29849: LD_VAR 0 5
29853: PUSH
29854: FOR_IN
29855: IFFALSE 29891
// if GetTech ( i , side ) <> state_researched then
29857: LD_VAR 0 4
29861: PPUSH
29862: LD_VAR 0 1
29866: PPUSH
29867: CALL_OW 321
29871: PUSH
29872: LD_INT 2
29874: NONEQUAL
29875: IFFALSE 29889
// begin result := false ;
29877: LD_ADDR_VAR 0 3
29881: PUSH
29882: LD_INT 0
29884: ST_TO_ADDR
// exit ;
29885: POP
29886: POP
29887: GO 29893
// end ;
29889: GO 29854
29891: POP
29892: POP
// end ;
29893: LD_VAR 0 3
29897: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29898: LD_INT 0
29900: PPUSH
29901: PPUSH
29902: PPUSH
29903: PPUSH
29904: PPUSH
29905: PPUSH
29906: PPUSH
29907: PPUSH
29908: PPUSH
29909: PPUSH
29910: PPUSH
29911: PPUSH
29912: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29913: LD_VAR 0 1
29917: NOT
29918: PUSH
29919: LD_VAR 0 1
29923: PPUSH
29924: CALL_OW 257
29928: PUSH
29929: LD_INT 9
29931: NONEQUAL
29932: OR
29933: IFFALSE 29937
// exit ;
29935: GO 30510
// side := GetSide ( unit ) ;
29937: LD_ADDR_VAR 0 9
29941: PUSH
29942: LD_VAR 0 1
29946: PPUSH
29947: CALL_OW 255
29951: ST_TO_ADDR
// tech_space := tech_spacanom ;
29952: LD_ADDR_VAR 0 12
29956: PUSH
29957: LD_INT 29
29959: ST_TO_ADDR
// tech_time := tech_taurad ;
29960: LD_ADDR_VAR 0 13
29964: PUSH
29965: LD_INT 28
29967: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29968: LD_ADDR_VAR 0 11
29972: PUSH
29973: LD_VAR 0 1
29977: PPUSH
29978: CALL_OW 310
29982: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29983: LD_VAR 0 11
29987: PPUSH
29988: CALL_OW 247
29992: PUSH
29993: LD_INT 2
29995: EQUAL
29996: IFFALSE 30000
// exit ;
29998: GO 30510
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30000: LD_ADDR_VAR 0 8
30004: PUSH
30005: LD_INT 81
30007: PUSH
30008: LD_VAR 0 9
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 3
30019: PUSH
30020: LD_INT 21
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PPUSH
30038: CALL_OW 69
30042: ST_TO_ADDR
// if not tmp then
30043: LD_VAR 0 8
30047: NOT
30048: IFFALSE 30052
// exit ;
30050: GO 30510
// if in_unit then
30052: LD_VAR 0 11
30056: IFFALSE 30080
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30058: LD_ADDR_VAR 0 10
30062: PUSH
30063: LD_VAR 0 8
30067: PPUSH
30068: LD_VAR 0 11
30072: PPUSH
30073: CALL_OW 74
30077: ST_TO_ADDR
30078: GO 30100
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30080: LD_ADDR_VAR 0 10
30084: PUSH
30085: LD_VAR 0 8
30089: PPUSH
30090: LD_VAR 0 1
30094: PPUSH
30095: CALL_OW 74
30099: ST_TO_ADDR
// if not enemy then
30100: LD_VAR 0 10
30104: NOT
30105: IFFALSE 30109
// exit ;
30107: GO 30510
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30109: LD_VAR 0 11
30113: PUSH
30114: LD_VAR 0 11
30118: PPUSH
30119: LD_VAR 0 10
30123: PPUSH
30124: CALL_OW 296
30128: PUSH
30129: LD_INT 13
30131: GREATER
30132: AND
30133: PUSH
30134: LD_VAR 0 1
30138: PPUSH
30139: LD_VAR 0 10
30143: PPUSH
30144: CALL_OW 296
30148: PUSH
30149: LD_INT 12
30151: GREATER
30152: OR
30153: IFFALSE 30157
// exit ;
30155: GO 30510
// missile := [ 1 ] ;
30157: LD_ADDR_VAR 0 14
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: EMPTY
30166: LIST
30167: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30168: LD_VAR 0 9
30172: PPUSH
30173: LD_VAR 0 12
30177: PPUSH
30178: CALL_OW 325
30182: IFFALSE 30211
// missile := Replace ( missile , missile + 1 , 2 ) ;
30184: LD_ADDR_VAR 0 14
30188: PUSH
30189: LD_VAR 0 14
30193: PPUSH
30194: LD_VAR 0 14
30198: PUSH
30199: LD_INT 1
30201: PLUS
30202: PPUSH
30203: LD_INT 2
30205: PPUSH
30206: CALL_OW 1
30210: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30211: LD_VAR 0 9
30215: PPUSH
30216: LD_VAR 0 13
30220: PPUSH
30221: CALL_OW 325
30225: PUSH
30226: LD_VAR 0 10
30230: PPUSH
30231: CALL_OW 255
30235: PPUSH
30236: LD_VAR 0 13
30240: PPUSH
30241: CALL_OW 325
30245: NOT
30246: AND
30247: IFFALSE 30276
// missile := Replace ( missile , missile + 1 , 3 ) ;
30249: LD_ADDR_VAR 0 14
30253: PUSH
30254: LD_VAR 0 14
30258: PPUSH
30259: LD_VAR 0 14
30263: PUSH
30264: LD_INT 1
30266: PLUS
30267: PPUSH
30268: LD_INT 3
30270: PPUSH
30271: CALL_OW 1
30275: ST_TO_ADDR
// if missile < 2 then
30276: LD_VAR 0 14
30280: PUSH
30281: LD_INT 2
30283: LESS
30284: IFFALSE 30288
// exit ;
30286: GO 30510
// x := GetX ( enemy ) ;
30288: LD_ADDR_VAR 0 4
30292: PUSH
30293: LD_VAR 0 10
30297: PPUSH
30298: CALL_OW 250
30302: ST_TO_ADDR
// y := GetY ( enemy ) ;
30303: LD_ADDR_VAR 0 5
30307: PUSH
30308: LD_VAR 0 10
30312: PPUSH
30313: CALL_OW 251
30317: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30318: LD_ADDR_VAR 0 6
30322: PUSH
30323: LD_VAR 0 4
30327: PUSH
30328: LD_INT 1
30330: NEG
30331: PPUSH
30332: LD_INT 1
30334: PPUSH
30335: CALL_OW 12
30339: PLUS
30340: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30341: LD_ADDR_VAR 0 7
30345: PUSH
30346: LD_VAR 0 5
30350: PUSH
30351: LD_INT 1
30353: NEG
30354: PPUSH
30355: LD_INT 1
30357: PPUSH
30358: CALL_OW 12
30362: PLUS
30363: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30364: LD_VAR 0 6
30368: PPUSH
30369: LD_VAR 0 7
30373: PPUSH
30374: CALL_OW 488
30378: NOT
30379: IFFALSE 30401
// begin _x := x ;
30381: LD_ADDR_VAR 0 6
30385: PUSH
30386: LD_VAR 0 4
30390: ST_TO_ADDR
// _y := y ;
30391: LD_ADDR_VAR 0 7
30395: PUSH
30396: LD_VAR 0 5
30400: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30401: LD_ADDR_VAR 0 3
30405: PUSH
30406: LD_INT 1
30408: PPUSH
30409: LD_VAR 0 14
30413: PPUSH
30414: CALL_OW 12
30418: ST_TO_ADDR
// case i of 1 :
30419: LD_VAR 0 3
30423: PUSH
30424: LD_INT 1
30426: DOUBLE
30427: EQUAL
30428: IFTRUE 30432
30430: GO 30449
30432: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30433: LD_VAR 0 1
30437: PPUSH
30438: LD_VAR 0 10
30442: PPUSH
30443: CALL_OW 115
30447: GO 30510
30449: LD_INT 2
30451: DOUBLE
30452: EQUAL
30453: IFTRUE 30457
30455: GO 30479
30457: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30458: LD_VAR 0 1
30462: PPUSH
30463: LD_VAR 0 6
30467: PPUSH
30468: LD_VAR 0 7
30472: PPUSH
30473: CALL_OW 153
30477: GO 30510
30479: LD_INT 3
30481: DOUBLE
30482: EQUAL
30483: IFTRUE 30487
30485: GO 30509
30487: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30488: LD_VAR 0 1
30492: PPUSH
30493: LD_VAR 0 6
30497: PPUSH
30498: LD_VAR 0 7
30502: PPUSH
30503: CALL_OW 154
30507: GO 30510
30509: POP
// end ;
30510: LD_VAR 0 2
30514: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30515: LD_INT 0
30517: PPUSH
30518: PPUSH
30519: PPUSH
30520: PPUSH
30521: PPUSH
30522: PPUSH
// if not unit or not building then
30523: LD_VAR 0 1
30527: NOT
30528: PUSH
30529: LD_VAR 0 2
30533: NOT
30534: OR
30535: IFFALSE 30539
// exit ;
30537: GO 30697
// x := GetX ( building ) ;
30539: LD_ADDR_VAR 0 5
30543: PUSH
30544: LD_VAR 0 2
30548: PPUSH
30549: CALL_OW 250
30553: ST_TO_ADDR
// y := GetY ( building ) ;
30554: LD_ADDR_VAR 0 6
30558: PUSH
30559: LD_VAR 0 2
30563: PPUSH
30564: CALL_OW 251
30568: ST_TO_ADDR
// for i = 0 to 5 do
30569: LD_ADDR_VAR 0 4
30573: PUSH
30574: DOUBLE
30575: LD_INT 0
30577: DEC
30578: ST_TO_ADDR
30579: LD_INT 5
30581: PUSH
30582: FOR_TO
30583: IFFALSE 30695
// begin _x := ShiftX ( x , i , 3 ) ;
30585: LD_ADDR_VAR 0 7
30589: PUSH
30590: LD_VAR 0 5
30594: PPUSH
30595: LD_VAR 0 4
30599: PPUSH
30600: LD_INT 3
30602: PPUSH
30603: CALL_OW 272
30607: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30608: LD_ADDR_VAR 0 8
30612: PUSH
30613: LD_VAR 0 6
30617: PPUSH
30618: LD_VAR 0 4
30622: PPUSH
30623: LD_INT 3
30625: PPUSH
30626: CALL_OW 273
30630: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30631: LD_VAR 0 7
30635: PPUSH
30636: LD_VAR 0 8
30640: PPUSH
30641: CALL_OW 488
30645: NOT
30646: IFFALSE 30650
// continue ;
30648: GO 30582
// if HexInfo ( _x , _y ) = 0 then
30650: LD_VAR 0 7
30654: PPUSH
30655: LD_VAR 0 8
30659: PPUSH
30660: CALL_OW 428
30664: PUSH
30665: LD_INT 0
30667: EQUAL
30668: IFFALSE 30693
// begin ComMoveXY ( unit , _x , _y ) ;
30670: LD_VAR 0 1
30674: PPUSH
30675: LD_VAR 0 7
30679: PPUSH
30680: LD_VAR 0 8
30684: PPUSH
30685: CALL_OW 111
// exit ;
30689: POP
30690: POP
30691: GO 30697
// end ; end ;
30693: GO 30582
30695: POP
30696: POP
// end ;
30697: LD_VAR 0 3
30701: RET
// export function ScanBase ( side , base_area ) ; begin
30702: LD_INT 0
30704: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30705: LD_ADDR_VAR 0 3
30709: PUSH
30710: LD_VAR 0 2
30714: PPUSH
30715: LD_INT 81
30717: PUSH
30718: LD_VAR 0 1
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PPUSH
30727: CALL_OW 70
30731: ST_TO_ADDR
// end ;
30732: LD_VAR 0 3
30736: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30737: LD_INT 0
30739: PPUSH
30740: PPUSH
30741: PPUSH
30742: PPUSH
// result := false ;
30743: LD_ADDR_VAR 0 2
30747: PUSH
30748: LD_INT 0
30750: ST_TO_ADDR
// side := GetSide ( unit ) ;
30751: LD_ADDR_VAR 0 3
30755: PUSH
30756: LD_VAR 0 1
30760: PPUSH
30761: CALL_OW 255
30765: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30766: LD_ADDR_VAR 0 4
30770: PUSH
30771: LD_VAR 0 1
30775: PPUSH
30776: CALL_OW 248
30780: ST_TO_ADDR
// case nat of 1 :
30781: LD_VAR 0 4
30785: PUSH
30786: LD_INT 1
30788: DOUBLE
30789: EQUAL
30790: IFTRUE 30794
30792: GO 30805
30794: POP
// tech := tech_lassight ; 2 :
30795: LD_ADDR_VAR 0 5
30799: PUSH
30800: LD_INT 12
30802: ST_TO_ADDR
30803: GO 30844
30805: LD_INT 2
30807: DOUBLE
30808: EQUAL
30809: IFTRUE 30813
30811: GO 30824
30813: POP
// tech := tech_mortar ; 3 :
30814: LD_ADDR_VAR 0 5
30818: PUSH
30819: LD_INT 41
30821: ST_TO_ADDR
30822: GO 30844
30824: LD_INT 3
30826: DOUBLE
30827: EQUAL
30828: IFTRUE 30832
30830: GO 30843
30832: POP
// tech := tech_bazooka ; end ;
30833: LD_ADDR_VAR 0 5
30837: PUSH
30838: LD_INT 44
30840: ST_TO_ADDR
30841: GO 30844
30843: POP
// if Researched ( side , tech ) then
30844: LD_VAR 0 3
30848: PPUSH
30849: LD_VAR 0 5
30853: PPUSH
30854: CALL_OW 325
30858: IFFALSE 30885
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30860: LD_ADDR_VAR 0 2
30864: PUSH
30865: LD_INT 5
30867: PUSH
30868: LD_INT 8
30870: PUSH
30871: LD_INT 9
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: PUSH
30879: LD_VAR 0 4
30883: ARRAY
30884: ST_TO_ADDR
// end ;
30885: LD_VAR 0 2
30889: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30890: LD_INT 0
30892: PPUSH
30893: PPUSH
30894: PPUSH
// if not mines then
30895: LD_VAR 0 2
30899: NOT
30900: IFFALSE 30904
// exit ;
30902: GO 31048
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30904: LD_ADDR_VAR 0 5
30908: PUSH
30909: LD_INT 81
30911: PUSH
30912: LD_VAR 0 1
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: LD_INT 21
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PPUSH
30942: CALL_OW 69
30946: ST_TO_ADDR
// for i in mines do
30947: LD_ADDR_VAR 0 4
30951: PUSH
30952: LD_VAR 0 2
30956: PUSH
30957: FOR_IN
30958: IFFALSE 31046
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30960: LD_VAR 0 4
30964: PUSH
30965: LD_INT 1
30967: ARRAY
30968: PPUSH
30969: LD_VAR 0 4
30973: PUSH
30974: LD_INT 2
30976: ARRAY
30977: PPUSH
30978: CALL_OW 458
30982: NOT
30983: IFFALSE 30987
// continue ;
30985: GO 30957
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30987: LD_VAR 0 4
30991: PUSH
30992: LD_INT 1
30994: ARRAY
30995: PPUSH
30996: LD_VAR 0 4
31000: PUSH
31001: LD_INT 2
31003: ARRAY
31004: PPUSH
31005: CALL_OW 428
31009: PUSH
31010: LD_VAR 0 5
31014: IN
31015: IFFALSE 31044
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31017: LD_VAR 0 4
31021: PUSH
31022: LD_INT 1
31024: ARRAY
31025: PPUSH
31026: LD_VAR 0 4
31030: PUSH
31031: LD_INT 2
31033: ARRAY
31034: PPUSH
31035: LD_VAR 0 1
31039: PPUSH
31040: CALL_OW 456
// end ;
31044: GO 30957
31046: POP
31047: POP
// end ;
31048: LD_VAR 0 3
31052: RET
// export function Count ( array ) ; begin
31053: LD_INT 0
31055: PPUSH
// result := array + 0 ;
31056: LD_ADDR_VAR 0 2
31060: PUSH
31061: LD_VAR 0 1
31065: PUSH
31066: LD_INT 0
31068: PLUS
31069: ST_TO_ADDR
// end ;
31070: LD_VAR 0 2
31074: RET
// export function IsEmpty ( building ) ; begin
31075: LD_INT 0
31077: PPUSH
// if not building then
31078: LD_VAR 0 1
31082: NOT
31083: IFFALSE 31087
// exit ;
31085: GO 31130
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31087: LD_ADDR_VAR 0 2
31091: PUSH
31092: LD_VAR 0 1
31096: PUSH
31097: LD_INT 22
31099: PUSH
31100: LD_VAR 0 1
31104: PPUSH
31105: CALL_OW 255
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 58
31116: PUSH
31117: EMPTY
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PPUSH
31124: CALL_OW 69
31128: IN
31129: ST_TO_ADDR
// end ;
31130: LD_VAR 0 2
31134: RET
// export function IsNotFull ( building ) ; var places ; begin
31135: LD_INT 0
31137: PPUSH
31138: PPUSH
// if not building then
31139: LD_VAR 0 1
31143: NOT
31144: IFFALSE 31148
// exit ;
31146: GO 31176
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31148: LD_ADDR_VAR 0 2
31152: PUSH
31153: LD_VAR 0 1
31157: PPUSH
31158: LD_INT 3
31160: PUSH
31161: LD_INT 62
31163: PUSH
31164: EMPTY
31165: LIST
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PPUSH
31171: CALL_OW 72
31175: ST_TO_ADDR
// end ;
31176: LD_VAR 0 2
31180: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31181: LD_INT 0
31183: PPUSH
31184: PPUSH
31185: PPUSH
31186: PPUSH
// tmp := [ ] ;
31187: LD_ADDR_VAR 0 3
31191: PUSH
31192: EMPTY
31193: ST_TO_ADDR
// list := [ ] ;
31194: LD_ADDR_VAR 0 5
31198: PUSH
31199: EMPTY
31200: ST_TO_ADDR
// for i = 16 to 25 do
31201: LD_ADDR_VAR 0 4
31205: PUSH
31206: DOUBLE
31207: LD_INT 16
31209: DEC
31210: ST_TO_ADDR
31211: LD_INT 25
31213: PUSH
31214: FOR_TO
31215: IFFALSE 31288
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31217: LD_ADDR_VAR 0 3
31221: PUSH
31222: LD_VAR 0 3
31226: PUSH
31227: LD_INT 22
31229: PUSH
31230: LD_VAR 0 1
31234: PPUSH
31235: CALL_OW 255
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 91
31246: PUSH
31247: LD_VAR 0 1
31251: PUSH
31252: LD_INT 6
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 30
31262: PUSH
31263: LD_VAR 0 4
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: PPUSH
31280: CALL_OW 69
31284: ADD
31285: ST_TO_ADDR
31286: GO 31214
31288: POP
31289: POP
// for i = 1 to tmp do
31290: LD_ADDR_VAR 0 4
31294: PUSH
31295: DOUBLE
31296: LD_INT 1
31298: DEC
31299: ST_TO_ADDR
31300: LD_VAR 0 3
31304: PUSH
31305: FOR_TO
31306: IFFALSE 31394
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31308: LD_ADDR_VAR 0 5
31312: PUSH
31313: LD_VAR 0 5
31317: PUSH
31318: LD_VAR 0 3
31322: PUSH
31323: LD_VAR 0 4
31327: ARRAY
31328: PPUSH
31329: CALL_OW 266
31333: PUSH
31334: LD_VAR 0 3
31338: PUSH
31339: LD_VAR 0 4
31343: ARRAY
31344: PPUSH
31345: CALL_OW 250
31349: PUSH
31350: LD_VAR 0 3
31354: PUSH
31355: LD_VAR 0 4
31359: ARRAY
31360: PPUSH
31361: CALL_OW 251
31365: PUSH
31366: LD_VAR 0 3
31370: PUSH
31371: LD_VAR 0 4
31375: ARRAY
31376: PPUSH
31377: CALL_OW 254
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: PUSH
31388: EMPTY
31389: LIST
31390: ADD
31391: ST_TO_ADDR
31392: GO 31305
31394: POP
31395: POP
// result := list ;
31396: LD_ADDR_VAR 0 2
31400: PUSH
31401: LD_VAR 0 5
31405: ST_TO_ADDR
// end ;
31406: LD_VAR 0 2
31410: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31411: LD_INT 0
31413: PPUSH
31414: PPUSH
31415: PPUSH
31416: PPUSH
31417: PPUSH
31418: PPUSH
31419: PPUSH
// if not factory then
31420: LD_VAR 0 1
31424: NOT
31425: IFFALSE 31429
// exit ;
31427: GO 32022
// if control = control_apeman then
31429: LD_VAR 0 4
31433: PUSH
31434: LD_INT 5
31436: EQUAL
31437: IFFALSE 31546
// begin tmp := UnitsInside ( factory ) ;
31439: LD_ADDR_VAR 0 8
31443: PUSH
31444: LD_VAR 0 1
31448: PPUSH
31449: CALL_OW 313
31453: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31454: LD_VAR 0 8
31458: PPUSH
31459: LD_INT 25
31461: PUSH
31462: LD_INT 12
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PPUSH
31469: CALL_OW 72
31473: NOT
31474: IFFALSE 31484
// control := control_manual ;
31476: LD_ADDR_VAR 0 4
31480: PUSH
31481: LD_INT 1
31483: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31484: LD_ADDR_VAR 0 8
31488: PUSH
31489: LD_VAR 0 1
31493: PPUSH
31494: CALL 31181 0 1
31498: ST_TO_ADDR
// if tmp then
31499: LD_VAR 0 8
31503: IFFALSE 31546
// begin for i in tmp do
31505: LD_ADDR_VAR 0 7
31509: PUSH
31510: LD_VAR 0 8
31514: PUSH
31515: FOR_IN
31516: IFFALSE 31544
// if i [ 1 ] = b_ext_radio then
31518: LD_VAR 0 7
31522: PUSH
31523: LD_INT 1
31525: ARRAY
31526: PUSH
31527: LD_INT 22
31529: EQUAL
31530: IFFALSE 31542
// begin control := control_remote ;
31532: LD_ADDR_VAR 0 4
31536: PUSH
31537: LD_INT 2
31539: ST_TO_ADDR
// break ;
31540: GO 31544
// end ;
31542: GO 31515
31544: POP
31545: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31546: LD_VAR 0 1
31550: PPUSH
31551: LD_VAR 0 2
31555: PPUSH
31556: LD_VAR 0 3
31560: PPUSH
31561: LD_VAR 0 4
31565: PPUSH
31566: LD_VAR 0 5
31570: PPUSH
31571: CALL_OW 448
31575: IFFALSE 31610
// begin result := [ chassis , engine , control , weapon ] ;
31577: LD_ADDR_VAR 0 6
31581: PUSH
31582: LD_VAR 0 2
31586: PUSH
31587: LD_VAR 0 3
31591: PUSH
31592: LD_VAR 0 4
31596: PUSH
31597: LD_VAR 0 5
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: ST_TO_ADDR
// exit ;
31608: GO 32022
// end ; _chassis := AvailableChassisList ( factory ) ;
31610: LD_ADDR_VAR 0 9
31614: PUSH
31615: LD_VAR 0 1
31619: PPUSH
31620: CALL_OW 475
31624: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31625: LD_ADDR_VAR 0 11
31629: PUSH
31630: LD_VAR 0 1
31634: PPUSH
31635: CALL_OW 476
31639: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31640: LD_ADDR_VAR 0 12
31644: PUSH
31645: LD_VAR 0 1
31649: PPUSH
31650: CALL_OW 477
31654: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31655: LD_ADDR_VAR 0 10
31659: PUSH
31660: LD_VAR 0 1
31664: PPUSH
31665: CALL_OW 478
31669: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31670: LD_VAR 0 9
31674: NOT
31675: PUSH
31676: LD_VAR 0 11
31680: NOT
31681: OR
31682: PUSH
31683: LD_VAR 0 12
31687: NOT
31688: OR
31689: PUSH
31690: LD_VAR 0 10
31694: NOT
31695: OR
31696: IFFALSE 31731
// begin result := [ chassis , engine , control , weapon ] ;
31698: LD_ADDR_VAR 0 6
31702: PUSH
31703: LD_VAR 0 2
31707: PUSH
31708: LD_VAR 0 3
31712: PUSH
31713: LD_VAR 0 4
31717: PUSH
31718: LD_VAR 0 5
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: ST_TO_ADDR
// exit ;
31729: GO 32022
// end ; if not chassis in _chassis then
31731: LD_VAR 0 2
31735: PUSH
31736: LD_VAR 0 9
31740: IN
31741: NOT
31742: IFFALSE 31768
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31744: LD_ADDR_VAR 0 2
31748: PUSH
31749: LD_VAR 0 9
31753: PUSH
31754: LD_INT 1
31756: PPUSH
31757: LD_VAR 0 9
31761: PPUSH
31762: CALL_OW 12
31766: ARRAY
31767: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31768: LD_VAR 0 2
31772: PPUSH
31773: LD_VAR 0 3
31777: PPUSH
31778: CALL 32027 0 2
31782: NOT
31783: IFFALSE 31842
// repeat engine := _engine [ 1 ] ;
31785: LD_ADDR_VAR 0 3
31789: PUSH
31790: LD_VAR 0 11
31794: PUSH
31795: LD_INT 1
31797: ARRAY
31798: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31799: LD_ADDR_VAR 0 11
31803: PUSH
31804: LD_VAR 0 11
31808: PPUSH
31809: LD_INT 1
31811: PPUSH
31812: CALL_OW 3
31816: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31817: LD_VAR 0 2
31821: PPUSH
31822: LD_VAR 0 3
31826: PPUSH
31827: CALL 32027 0 2
31831: PUSH
31832: LD_VAR 0 11
31836: PUSH
31837: EMPTY
31838: EQUAL
31839: OR
31840: IFFALSE 31785
// if not control in _control then
31842: LD_VAR 0 4
31846: PUSH
31847: LD_VAR 0 12
31851: IN
31852: NOT
31853: IFFALSE 31879
// control := _control [ rand ( 1 , _control ) ] ;
31855: LD_ADDR_VAR 0 4
31859: PUSH
31860: LD_VAR 0 12
31864: PUSH
31865: LD_INT 1
31867: PPUSH
31868: LD_VAR 0 12
31872: PPUSH
31873: CALL_OW 12
31877: ARRAY
31878: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31879: LD_VAR 0 2
31883: PPUSH
31884: LD_VAR 0 5
31888: PPUSH
31889: CALL 32247 0 2
31893: NOT
31894: IFFALSE 31953
// repeat weapon := _weapon [ 1 ] ;
31896: LD_ADDR_VAR 0 5
31900: PUSH
31901: LD_VAR 0 10
31905: PUSH
31906: LD_INT 1
31908: ARRAY
31909: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31910: LD_ADDR_VAR 0 10
31914: PUSH
31915: LD_VAR 0 10
31919: PPUSH
31920: LD_INT 1
31922: PPUSH
31923: CALL_OW 3
31927: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31928: LD_VAR 0 2
31932: PPUSH
31933: LD_VAR 0 5
31937: PPUSH
31938: CALL 32247 0 2
31942: PUSH
31943: LD_VAR 0 10
31947: PUSH
31948: EMPTY
31949: EQUAL
31950: OR
31951: IFFALSE 31896
// result := [ ] ;
31953: LD_ADDR_VAR 0 6
31957: PUSH
31958: EMPTY
31959: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31960: LD_VAR 0 1
31964: PPUSH
31965: LD_VAR 0 2
31969: PPUSH
31970: LD_VAR 0 3
31974: PPUSH
31975: LD_VAR 0 4
31979: PPUSH
31980: LD_VAR 0 5
31984: PPUSH
31985: CALL_OW 448
31989: IFFALSE 32022
// result := [ chassis , engine , control , weapon ] ;
31991: LD_ADDR_VAR 0 6
31995: PUSH
31996: LD_VAR 0 2
32000: PUSH
32001: LD_VAR 0 3
32005: PUSH
32006: LD_VAR 0 4
32010: PUSH
32011: LD_VAR 0 5
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: ST_TO_ADDR
// end ;
32022: LD_VAR 0 6
32026: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32027: LD_INT 0
32029: PPUSH
// if not chassis or not engine then
32030: LD_VAR 0 1
32034: NOT
32035: PUSH
32036: LD_VAR 0 2
32040: NOT
32041: OR
32042: IFFALSE 32046
// exit ;
32044: GO 32242
// case engine of engine_solar :
32046: LD_VAR 0 2
32050: PUSH
32051: LD_INT 2
32053: DOUBLE
32054: EQUAL
32055: IFTRUE 32059
32057: GO 32097
32059: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32060: LD_ADDR_VAR 0 3
32064: PUSH
32065: LD_INT 11
32067: PUSH
32068: LD_INT 12
32070: PUSH
32071: LD_INT 13
32073: PUSH
32074: LD_INT 14
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: ST_TO_ADDR
32095: GO 32226
32097: LD_INT 1
32099: DOUBLE
32100: EQUAL
32101: IFTRUE 32105
32103: GO 32167
32105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32106: LD_ADDR_VAR 0 3
32110: PUSH
32111: LD_INT 11
32113: PUSH
32114: LD_INT 12
32116: PUSH
32117: LD_INT 13
32119: PUSH
32120: LD_INT 14
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: LD_INT 4
32134: PUSH
32135: LD_INT 5
32137: PUSH
32138: LD_INT 21
32140: PUSH
32141: LD_INT 23
32143: PUSH
32144: LD_INT 22
32146: PUSH
32147: LD_INT 24
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: ST_TO_ADDR
32165: GO 32226
32167: LD_INT 3
32169: DOUBLE
32170: EQUAL
32171: IFTRUE 32175
32173: GO 32225
32175: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32176: LD_ADDR_VAR 0 3
32180: PUSH
32181: LD_INT 13
32183: PUSH
32184: LD_INT 14
32186: PUSH
32187: LD_INT 2
32189: PUSH
32190: LD_INT 3
32192: PUSH
32193: LD_INT 4
32195: PUSH
32196: LD_INT 5
32198: PUSH
32199: LD_INT 21
32201: PUSH
32202: LD_INT 22
32204: PUSH
32205: LD_INT 23
32207: PUSH
32208: LD_INT 24
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: ST_TO_ADDR
32223: GO 32226
32225: POP
// result := ( chassis in result ) ;
32226: LD_ADDR_VAR 0 3
32230: PUSH
32231: LD_VAR 0 1
32235: PUSH
32236: LD_VAR 0 3
32240: IN
32241: ST_TO_ADDR
// end ;
32242: LD_VAR 0 3
32246: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32247: LD_INT 0
32249: PPUSH
// if not chassis or not weapon then
32250: LD_VAR 0 1
32254: NOT
32255: PUSH
32256: LD_VAR 0 2
32260: NOT
32261: OR
32262: IFFALSE 32266
// exit ;
32264: GO 33326
// case weapon of us_machine_gun :
32266: LD_VAR 0 2
32270: PUSH
32271: LD_INT 2
32273: DOUBLE
32274: EQUAL
32275: IFTRUE 32279
32277: GO 32309
32279: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32280: LD_ADDR_VAR 0 3
32284: PUSH
32285: LD_INT 1
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: LD_INT 3
32293: PUSH
32294: LD_INT 4
32296: PUSH
32297: LD_INT 5
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: ST_TO_ADDR
32307: GO 33310
32309: LD_INT 3
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32317
32315: GO 32347
32317: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32318: LD_ADDR_VAR 0 3
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: LD_INT 2
32328: PUSH
32329: LD_INT 3
32331: PUSH
32332: LD_INT 4
32334: PUSH
32335: LD_INT 5
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: ST_TO_ADDR
32345: GO 33310
32347: LD_INT 11
32349: DOUBLE
32350: EQUAL
32351: IFTRUE 32355
32353: GO 32385
32355: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32356: LD_ADDR_VAR 0 3
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: LD_INT 2
32366: PUSH
32367: LD_INT 3
32369: PUSH
32370: LD_INT 4
32372: PUSH
32373: LD_INT 5
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: ST_TO_ADDR
32383: GO 33310
32385: LD_INT 4
32387: DOUBLE
32388: EQUAL
32389: IFTRUE 32393
32391: GO 32419
32393: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32394: LD_ADDR_VAR 0 3
32398: PUSH
32399: LD_INT 2
32401: PUSH
32402: LD_INT 3
32404: PUSH
32405: LD_INT 4
32407: PUSH
32408: LD_INT 5
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: ST_TO_ADDR
32417: GO 33310
32419: LD_INT 5
32421: DOUBLE
32422: EQUAL
32423: IFTRUE 32427
32425: GO 32453
32427: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32428: LD_ADDR_VAR 0 3
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: LD_INT 4
32441: PUSH
32442: LD_INT 5
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: ST_TO_ADDR
32451: GO 33310
32453: LD_INT 9
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32461
32459: GO 32487
32461: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32462: LD_ADDR_VAR 0 3
32466: PUSH
32467: LD_INT 2
32469: PUSH
32470: LD_INT 3
32472: PUSH
32473: LD_INT 4
32475: PUSH
32476: LD_INT 5
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: ST_TO_ADDR
32485: GO 33310
32487: LD_INT 7
32489: DOUBLE
32490: EQUAL
32491: IFTRUE 32495
32493: GO 32521
32495: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32496: LD_ADDR_VAR 0 3
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: LD_INT 3
32506: PUSH
32507: LD_INT 4
32509: PUSH
32510: LD_INT 5
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: ST_TO_ADDR
32519: GO 33310
32521: LD_INT 12
32523: DOUBLE
32524: EQUAL
32525: IFTRUE 32529
32527: GO 32555
32529: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32530: LD_ADDR_VAR 0 3
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: LD_INT 3
32540: PUSH
32541: LD_INT 4
32543: PUSH
32544: LD_INT 5
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: ST_TO_ADDR
32553: GO 33310
32555: LD_INT 13
32557: DOUBLE
32558: EQUAL
32559: IFTRUE 32563
32561: GO 32589
32563: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32564: LD_ADDR_VAR 0 3
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: LD_INT 3
32574: PUSH
32575: LD_INT 4
32577: PUSH
32578: LD_INT 5
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
32587: GO 33310
32589: LD_INT 14
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32615
32597: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32598: LD_ADDR_VAR 0 3
32602: PUSH
32603: LD_INT 4
32605: PUSH
32606: LD_INT 5
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: ST_TO_ADDR
32613: GO 33310
32615: LD_INT 6
32617: DOUBLE
32618: EQUAL
32619: IFTRUE 32623
32621: GO 32641
32623: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32624: LD_ADDR_VAR 0 3
32628: PUSH
32629: LD_INT 4
32631: PUSH
32632: LD_INT 5
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: ST_TO_ADDR
32639: GO 33310
32641: LD_INT 10
32643: DOUBLE
32644: EQUAL
32645: IFTRUE 32649
32647: GO 32667
32649: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32650: LD_ADDR_VAR 0 3
32654: PUSH
32655: LD_INT 4
32657: PUSH
32658: LD_INT 5
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: ST_TO_ADDR
32665: GO 33310
32667: LD_INT 22
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32701
32675: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32676: LD_ADDR_VAR 0 3
32680: PUSH
32681: LD_INT 11
32683: PUSH
32684: LD_INT 12
32686: PUSH
32687: LD_INT 13
32689: PUSH
32690: LD_INT 14
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: ST_TO_ADDR
32699: GO 33310
32701: LD_INT 23
32703: DOUBLE
32704: EQUAL
32705: IFTRUE 32709
32707: GO 32735
32709: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32710: LD_ADDR_VAR 0 3
32714: PUSH
32715: LD_INT 11
32717: PUSH
32718: LD_INT 12
32720: PUSH
32721: LD_INT 13
32723: PUSH
32724: LD_INT 14
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: ST_TO_ADDR
32733: GO 33310
32735: LD_INT 24
32737: DOUBLE
32738: EQUAL
32739: IFTRUE 32743
32741: GO 32769
32743: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32744: LD_ADDR_VAR 0 3
32748: PUSH
32749: LD_INT 11
32751: PUSH
32752: LD_INT 12
32754: PUSH
32755: LD_INT 13
32757: PUSH
32758: LD_INT 14
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: ST_TO_ADDR
32767: GO 33310
32769: LD_INT 30
32771: DOUBLE
32772: EQUAL
32773: IFTRUE 32777
32775: GO 32803
32777: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32778: LD_ADDR_VAR 0 3
32782: PUSH
32783: LD_INT 11
32785: PUSH
32786: LD_INT 12
32788: PUSH
32789: LD_INT 13
32791: PUSH
32792: LD_INT 14
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: ST_TO_ADDR
32801: GO 33310
32803: LD_INT 25
32805: DOUBLE
32806: EQUAL
32807: IFTRUE 32811
32809: GO 32829
32811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32812: LD_ADDR_VAR 0 3
32816: PUSH
32817: LD_INT 13
32819: PUSH
32820: LD_INT 14
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: ST_TO_ADDR
32827: GO 33310
32829: LD_INT 27
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32837
32835: GO 32855
32837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32838: LD_ADDR_VAR 0 3
32842: PUSH
32843: LD_INT 13
32845: PUSH
32846: LD_INT 14
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: ST_TO_ADDR
32853: GO 33310
32855: LD_INT 92
32857: DOUBLE
32858: EQUAL
32859: IFTRUE 32863
32861: GO 32889
32863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32864: LD_ADDR_VAR 0 3
32868: PUSH
32869: LD_INT 11
32871: PUSH
32872: LD_INT 12
32874: PUSH
32875: LD_INT 13
32877: PUSH
32878: LD_INT 14
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: ST_TO_ADDR
32887: GO 33310
32889: LD_INT 28
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32897
32895: GO 32915
32897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32898: LD_ADDR_VAR 0 3
32902: PUSH
32903: LD_INT 13
32905: PUSH
32906: LD_INT 14
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: ST_TO_ADDR
32913: GO 33310
32915: LD_INT 29
32917: DOUBLE
32918: EQUAL
32919: IFTRUE 32923
32921: GO 32941
32923: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32924: LD_ADDR_VAR 0 3
32928: PUSH
32929: LD_INT 13
32931: PUSH
32932: LD_INT 14
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: ST_TO_ADDR
32939: GO 33310
32941: LD_INT 31
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32949
32947: GO 32967
32949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32950: LD_ADDR_VAR 0 3
32954: PUSH
32955: LD_INT 13
32957: PUSH
32958: LD_INT 14
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: ST_TO_ADDR
32965: GO 33310
32967: LD_INT 26
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32975
32973: GO 32993
32975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: LD_INT 13
32983: PUSH
32984: LD_INT 14
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: ST_TO_ADDR
32991: GO 33310
32993: LD_INT 42
32995: DOUBLE
32996: EQUAL
32997: IFTRUE 33001
32999: GO 33027
33001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33002: LD_ADDR_VAR 0 3
33006: PUSH
33007: LD_INT 21
33009: PUSH
33010: LD_INT 22
33012: PUSH
33013: LD_INT 23
33015: PUSH
33016: LD_INT 24
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: ST_TO_ADDR
33025: GO 33310
33027: LD_INT 43
33029: DOUBLE
33030: EQUAL
33031: IFTRUE 33035
33033: GO 33061
33035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33036: LD_ADDR_VAR 0 3
33040: PUSH
33041: LD_INT 21
33043: PUSH
33044: LD_INT 22
33046: PUSH
33047: LD_INT 23
33049: PUSH
33050: LD_INT 24
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: ST_TO_ADDR
33059: GO 33310
33061: LD_INT 44
33063: DOUBLE
33064: EQUAL
33065: IFTRUE 33069
33067: GO 33095
33069: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33070: LD_ADDR_VAR 0 3
33074: PUSH
33075: LD_INT 21
33077: PUSH
33078: LD_INT 22
33080: PUSH
33081: LD_INT 23
33083: PUSH
33084: LD_INT 24
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: ST_TO_ADDR
33093: GO 33310
33095: LD_INT 45
33097: DOUBLE
33098: EQUAL
33099: IFTRUE 33103
33101: GO 33129
33103: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33104: LD_ADDR_VAR 0 3
33108: PUSH
33109: LD_INT 21
33111: PUSH
33112: LD_INT 22
33114: PUSH
33115: LD_INT 23
33117: PUSH
33118: LD_INT 24
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: ST_TO_ADDR
33127: GO 33310
33129: LD_INT 49
33131: DOUBLE
33132: EQUAL
33133: IFTRUE 33137
33135: GO 33163
33137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33138: LD_ADDR_VAR 0 3
33142: PUSH
33143: LD_INT 21
33145: PUSH
33146: LD_INT 22
33148: PUSH
33149: LD_INT 23
33151: PUSH
33152: LD_INT 24
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: ST_TO_ADDR
33161: GO 33310
33163: LD_INT 51
33165: DOUBLE
33166: EQUAL
33167: IFTRUE 33171
33169: GO 33197
33171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33172: LD_ADDR_VAR 0 3
33176: PUSH
33177: LD_INT 21
33179: PUSH
33180: LD_INT 22
33182: PUSH
33183: LD_INT 23
33185: PUSH
33186: LD_INT 24
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: ST_TO_ADDR
33195: GO 33310
33197: LD_INT 52
33199: DOUBLE
33200: EQUAL
33201: IFTRUE 33205
33203: GO 33231
33205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33206: LD_ADDR_VAR 0 3
33210: PUSH
33211: LD_INT 21
33213: PUSH
33214: LD_INT 22
33216: PUSH
33217: LD_INT 23
33219: PUSH
33220: LD_INT 24
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: ST_TO_ADDR
33229: GO 33310
33231: LD_INT 53
33233: DOUBLE
33234: EQUAL
33235: IFTRUE 33239
33237: GO 33257
33239: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33240: LD_ADDR_VAR 0 3
33244: PUSH
33245: LD_INT 23
33247: PUSH
33248: LD_INT 24
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: ST_TO_ADDR
33255: GO 33310
33257: LD_INT 46
33259: DOUBLE
33260: EQUAL
33261: IFTRUE 33265
33263: GO 33283
33265: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33266: LD_ADDR_VAR 0 3
33270: PUSH
33271: LD_INT 23
33273: PUSH
33274: LD_INT 24
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: ST_TO_ADDR
33281: GO 33310
33283: LD_INT 47
33285: DOUBLE
33286: EQUAL
33287: IFTRUE 33291
33289: GO 33309
33291: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33292: LD_ADDR_VAR 0 3
33296: PUSH
33297: LD_INT 23
33299: PUSH
33300: LD_INT 24
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: ST_TO_ADDR
33307: GO 33310
33309: POP
// result := ( chassis in result ) ;
33310: LD_ADDR_VAR 0 3
33314: PUSH
33315: LD_VAR 0 1
33319: PUSH
33320: LD_VAR 0 3
33324: IN
33325: ST_TO_ADDR
// end ;
33326: LD_VAR 0 3
33330: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33331: LD_INT 0
33333: PPUSH
33334: PPUSH
33335: PPUSH
33336: PPUSH
33337: PPUSH
33338: PPUSH
33339: PPUSH
// result := array ;
33340: LD_ADDR_VAR 0 5
33344: PUSH
33345: LD_VAR 0 1
33349: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33350: LD_VAR 0 1
33354: NOT
33355: PUSH
33356: LD_VAR 0 2
33360: NOT
33361: OR
33362: PUSH
33363: LD_VAR 0 3
33367: NOT
33368: OR
33369: PUSH
33370: LD_VAR 0 2
33374: PUSH
33375: LD_VAR 0 1
33379: GREATER
33380: OR
33381: PUSH
33382: LD_VAR 0 3
33386: PUSH
33387: LD_VAR 0 1
33391: GREATER
33392: OR
33393: IFFALSE 33397
// exit ;
33395: GO 33693
// if direction then
33397: LD_VAR 0 4
33401: IFFALSE 33465
// begin d := 1 ;
33403: LD_ADDR_VAR 0 9
33407: PUSH
33408: LD_INT 1
33410: ST_TO_ADDR
// if i_from > i_to then
33411: LD_VAR 0 2
33415: PUSH
33416: LD_VAR 0 3
33420: GREATER
33421: IFFALSE 33447
// length := ( array - i_from ) + i_to else
33423: LD_ADDR_VAR 0 11
33427: PUSH
33428: LD_VAR 0 1
33432: PUSH
33433: LD_VAR 0 2
33437: MINUS
33438: PUSH
33439: LD_VAR 0 3
33443: PLUS
33444: ST_TO_ADDR
33445: GO 33463
// length := i_to - i_from ;
33447: LD_ADDR_VAR 0 11
33451: PUSH
33452: LD_VAR 0 3
33456: PUSH
33457: LD_VAR 0 2
33461: MINUS
33462: ST_TO_ADDR
// end else
33463: GO 33526
// begin d := - 1 ;
33465: LD_ADDR_VAR 0 9
33469: PUSH
33470: LD_INT 1
33472: NEG
33473: ST_TO_ADDR
// if i_from > i_to then
33474: LD_VAR 0 2
33478: PUSH
33479: LD_VAR 0 3
33483: GREATER
33484: IFFALSE 33504
// length := i_from - i_to else
33486: LD_ADDR_VAR 0 11
33490: PUSH
33491: LD_VAR 0 2
33495: PUSH
33496: LD_VAR 0 3
33500: MINUS
33501: ST_TO_ADDR
33502: GO 33526
// length := ( array - i_to ) + i_from ;
33504: LD_ADDR_VAR 0 11
33508: PUSH
33509: LD_VAR 0 1
33513: PUSH
33514: LD_VAR 0 3
33518: MINUS
33519: PUSH
33520: LD_VAR 0 2
33524: PLUS
33525: ST_TO_ADDR
// end ; if not length then
33526: LD_VAR 0 11
33530: NOT
33531: IFFALSE 33535
// exit ;
33533: GO 33693
// tmp := array ;
33535: LD_ADDR_VAR 0 10
33539: PUSH
33540: LD_VAR 0 1
33544: ST_TO_ADDR
// for i = 1 to length do
33545: LD_ADDR_VAR 0 6
33549: PUSH
33550: DOUBLE
33551: LD_INT 1
33553: DEC
33554: ST_TO_ADDR
33555: LD_VAR 0 11
33559: PUSH
33560: FOR_TO
33561: IFFALSE 33681
// begin for j = 1 to array do
33563: LD_ADDR_VAR 0 7
33567: PUSH
33568: DOUBLE
33569: LD_INT 1
33571: DEC
33572: ST_TO_ADDR
33573: LD_VAR 0 1
33577: PUSH
33578: FOR_TO
33579: IFFALSE 33667
// begin k := j + d ;
33581: LD_ADDR_VAR 0 8
33585: PUSH
33586: LD_VAR 0 7
33590: PUSH
33591: LD_VAR 0 9
33595: PLUS
33596: ST_TO_ADDR
// if k > array then
33597: LD_VAR 0 8
33601: PUSH
33602: LD_VAR 0 1
33606: GREATER
33607: IFFALSE 33617
// k := 1 ;
33609: LD_ADDR_VAR 0 8
33613: PUSH
33614: LD_INT 1
33616: ST_TO_ADDR
// if not k then
33617: LD_VAR 0 8
33621: NOT
33622: IFFALSE 33634
// k := array ;
33624: LD_ADDR_VAR 0 8
33628: PUSH
33629: LD_VAR 0 1
33633: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33634: LD_ADDR_VAR 0 10
33638: PUSH
33639: LD_VAR 0 10
33643: PPUSH
33644: LD_VAR 0 8
33648: PPUSH
33649: LD_VAR 0 1
33653: PUSH
33654: LD_VAR 0 7
33658: ARRAY
33659: PPUSH
33660: CALL_OW 1
33664: ST_TO_ADDR
// end ;
33665: GO 33578
33667: POP
33668: POP
// array := tmp ;
33669: LD_ADDR_VAR 0 1
33673: PUSH
33674: LD_VAR 0 10
33678: ST_TO_ADDR
// end ;
33679: GO 33560
33681: POP
33682: POP
// result := array ;
33683: LD_ADDR_VAR 0 5
33687: PUSH
33688: LD_VAR 0 1
33692: ST_TO_ADDR
// end ;
33693: LD_VAR 0 5
33697: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33698: LD_INT 0
33700: PPUSH
33701: PPUSH
// result := 0 ;
33702: LD_ADDR_VAR 0 3
33706: PUSH
33707: LD_INT 0
33709: ST_TO_ADDR
// if not array or not value in array then
33710: LD_VAR 0 1
33714: NOT
33715: PUSH
33716: LD_VAR 0 2
33720: PUSH
33721: LD_VAR 0 1
33725: IN
33726: NOT
33727: OR
33728: IFFALSE 33732
// exit ;
33730: GO 33786
// for i = 1 to array do
33732: LD_ADDR_VAR 0 4
33736: PUSH
33737: DOUBLE
33738: LD_INT 1
33740: DEC
33741: ST_TO_ADDR
33742: LD_VAR 0 1
33746: PUSH
33747: FOR_TO
33748: IFFALSE 33784
// if value = array [ i ] then
33750: LD_VAR 0 2
33754: PUSH
33755: LD_VAR 0 1
33759: PUSH
33760: LD_VAR 0 4
33764: ARRAY
33765: EQUAL
33766: IFFALSE 33782
// begin result := i ;
33768: LD_ADDR_VAR 0 3
33772: PUSH
33773: LD_VAR 0 4
33777: ST_TO_ADDR
// exit ;
33778: POP
33779: POP
33780: GO 33786
// end ;
33782: GO 33747
33784: POP
33785: POP
// end ;
33786: LD_VAR 0 3
33790: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33791: LD_INT 0
33793: PPUSH
// vc_chassis := chassis ;
33794: LD_ADDR_OWVAR 37
33798: PUSH
33799: LD_VAR 0 1
33803: ST_TO_ADDR
// vc_engine := engine ;
33804: LD_ADDR_OWVAR 39
33808: PUSH
33809: LD_VAR 0 2
33813: ST_TO_ADDR
// vc_control := control ;
33814: LD_ADDR_OWVAR 38
33818: PUSH
33819: LD_VAR 0 3
33823: ST_TO_ADDR
// vc_weapon := weapon ;
33824: LD_ADDR_OWVAR 40
33828: PUSH
33829: LD_VAR 0 4
33833: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33834: LD_ADDR_OWVAR 41
33838: PUSH
33839: LD_VAR 0 5
33843: ST_TO_ADDR
// end ;
33844: LD_VAR 0 6
33848: RET
// export function WantPlant ( unit ) ; var task ; begin
33849: LD_INT 0
33851: PPUSH
33852: PPUSH
// result := false ;
33853: LD_ADDR_VAR 0 2
33857: PUSH
33858: LD_INT 0
33860: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33861: LD_ADDR_VAR 0 3
33865: PUSH
33866: LD_VAR 0 1
33870: PPUSH
33871: CALL_OW 437
33875: ST_TO_ADDR
// if task then
33876: LD_VAR 0 3
33880: IFFALSE 33908
// if task [ 1 ] [ 1 ] = p then
33882: LD_VAR 0 3
33886: PUSH
33887: LD_INT 1
33889: ARRAY
33890: PUSH
33891: LD_INT 1
33893: ARRAY
33894: PUSH
33895: LD_STRING p
33897: EQUAL
33898: IFFALSE 33908
// result := true ;
33900: LD_ADDR_VAR 0 2
33904: PUSH
33905: LD_INT 1
33907: ST_TO_ADDR
// end ;
33908: LD_VAR 0 2
33912: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33913: LD_INT 0
33915: PPUSH
33916: PPUSH
33917: PPUSH
33918: PPUSH
// if pos < 1 then
33919: LD_VAR 0 2
33923: PUSH
33924: LD_INT 1
33926: LESS
33927: IFFALSE 33931
// exit ;
33929: GO 34234
// if pos = 1 then
33931: LD_VAR 0 2
33935: PUSH
33936: LD_INT 1
33938: EQUAL
33939: IFFALSE 33972
// result := Replace ( arr , pos [ 1 ] , value ) else
33941: LD_ADDR_VAR 0 4
33945: PUSH
33946: LD_VAR 0 1
33950: PPUSH
33951: LD_VAR 0 2
33955: PUSH
33956: LD_INT 1
33958: ARRAY
33959: PPUSH
33960: LD_VAR 0 3
33964: PPUSH
33965: CALL_OW 1
33969: ST_TO_ADDR
33970: GO 34234
// begin tmp := arr ;
33972: LD_ADDR_VAR 0 6
33976: PUSH
33977: LD_VAR 0 1
33981: ST_TO_ADDR
// s_arr := [ tmp ] ;
33982: LD_ADDR_VAR 0 7
33986: PUSH
33987: LD_VAR 0 6
33991: PUSH
33992: EMPTY
33993: LIST
33994: ST_TO_ADDR
// for i = 1 to pos - 1 do
33995: LD_ADDR_VAR 0 5
33999: PUSH
34000: DOUBLE
34001: LD_INT 1
34003: DEC
34004: ST_TO_ADDR
34005: LD_VAR 0 2
34009: PUSH
34010: LD_INT 1
34012: MINUS
34013: PUSH
34014: FOR_TO
34015: IFFALSE 34060
// begin tmp := tmp [ pos [ i ] ] ;
34017: LD_ADDR_VAR 0 6
34021: PUSH
34022: LD_VAR 0 6
34026: PUSH
34027: LD_VAR 0 2
34031: PUSH
34032: LD_VAR 0 5
34036: ARRAY
34037: ARRAY
34038: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34039: LD_ADDR_VAR 0 7
34043: PUSH
34044: LD_VAR 0 7
34048: PUSH
34049: LD_VAR 0 6
34053: PUSH
34054: EMPTY
34055: LIST
34056: ADD
34057: ST_TO_ADDR
// end ;
34058: GO 34014
34060: POP
34061: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34062: LD_ADDR_VAR 0 6
34066: PUSH
34067: LD_VAR 0 6
34071: PPUSH
34072: LD_VAR 0 2
34076: PUSH
34077: LD_VAR 0 2
34081: ARRAY
34082: PPUSH
34083: LD_VAR 0 3
34087: PPUSH
34088: CALL_OW 1
34092: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34093: LD_ADDR_VAR 0 7
34097: PUSH
34098: LD_VAR 0 7
34102: PPUSH
34103: LD_VAR 0 7
34107: PPUSH
34108: LD_VAR 0 6
34112: PPUSH
34113: CALL_OW 1
34117: ST_TO_ADDR
// for i = s_arr downto 2 do
34118: LD_ADDR_VAR 0 5
34122: PUSH
34123: DOUBLE
34124: LD_VAR 0 7
34128: INC
34129: ST_TO_ADDR
34130: LD_INT 2
34132: PUSH
34133: FOR_DOWNTO
34134: IFFALSE 34218
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34136: LD_ADDR_VAR 0 6
34140: PUSH
34141: LD_VAR 0 7
34145: PUSH
34146: LD_VAR 0 5
34150: PUSH
34151: LD_INT 1
34153: MINUS
34154: ARRAY
34155: PPUSH
34156: LD_VAR 0 2
34160: PUSH
34161: LD_VAR 0 5
34165: PUSH
34166: LD_INT 1
34168: MINUS
34169: ARRAY
34170: PPUSH
34171: LD_VAR 0 7
34175: PUSH
34176: LD_VAR 0 5
34180: ARRAY
34181: PPUSH
34182: CALL_OW 1
34186: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34187: LD_ADDR_VAR 0 7
34191: PUSH
34192: LD_VAR 0 7
34196: PPUSH
34197: LD_VAR 0 5
34201: PUSH
34202: LD_INT 1
34204: MINUS
34205: PPUSH
34206: LD_VAR 0 6
34210: PPUSH
34211: CALL_OW 1
34215: ST_TO_ADDR
// end ;
34216: GO 34133
34218: POP
34219: POP
// result := s_arr [ 1 ] ;
34220: LD_ADDR_VAR 0 4
34224: PUSH
34225: LD_VAR 0 7
34229: PUSH
34230: LD_INT 1
34232: ARRAY
34233: ST_TO_ADDR
// end ; end ;
34234: LD_VAR 0 4
34238: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34239: LD_INT 0
34241: PPUSH
34242: PPUSH
// if not list then
34243: LD_VAR 0 1
34247: NOT
34248: IFFALSE 34252
// exit ;
34250: GO 34343
// i := list [ pos1 ] ;
34252: LD_ADDR_VAR 0 5
34256: PUSH
34257: LD_VAR 0 1
34261: PUSH
34262: LD_VAR 0 2
34266: ARRAY
34267: ST_TO_ADDR
// if not i then
34268: LD_VAR 0 5
34272: NOT
34273: IFFALSE 34277
// exit ;
34275: GO 34343
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34277: LD_ADDR_VAR 0 1
34281: PUSH
34282: LD_VAR 0 1
34286: PPUSH
34287: LD_VAR 0 2
34291: PPUSH
34292: LD_VAR 0 1
34296: PUSH
34297: LD_VAR 0 3
34301: ARRAY
34302: PPUSH
34303: CALL_OW 1
34307: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34308: LD_ADDR_VAR 0 1
34312: PUSH
34313: LD_VAR 0 1
34317: PPUSH
34318: LD_VAR 0 3
34322: PPUSH
34323: LD_VAR 0 5
34327: PPUSH
34328: CALL_OW 1
34332: ST_TO_ADDR
// result := list ;
34333: LD_ADDR_VAR 0 4
34337: PUSH
34338: LD_VAR 0 1
34342: ST_TO_ADDR
// end ;
34343: LD_VAR 0 4
34347: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34348: LD_INT 0
34350: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34351: LD_ADDR_VAR 0 5
34355: PUSH
34356: LD_VAR 0 1
34360: PPUSH
34361: CALL_OW 250
34365: PPUSH
34366: LD_VAR 0 1
34370: PPUSH
34371: CALL_OW 251
34375: PPUSH
34376: LD_VAR 0 2
34380: PPUSH
34381: LD_VAR 0 3
34385: PPUSH
34386: LD_VAR 0 4
34390: PPUSH
34391: CALL 34769 0 5
34395: ST_TO_ADDR
// end ;
34396: LD_VAR 0 5
34400: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34401: LD_INT 0
34403: PPUSH
34404: PPUSH
34405: PPUSH
34406: PPUSH
// if not list or not unit then
34407: LD_VAR 0 2
34411: NOT
34412: PUSH
34413: LD_VAR 0 1
34417: NOT
34418: OR
34419: IFFALSE 34423
// exit ;
34421: GO 34764
// result := [ ] ;
34423: LD_ADDR_VAR 0 5
34427: PUSH
34428: EMPTY
34429: ST_TO_ADDR
// for i in list do
34430: LD_ADDR_VAR 0 6
34434: PUSH
34435: LD_VAR 0 2
34439: PUSH
34440: FOR_IN
34441: IFFALSE 34659
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34443: LD_ADDR_VAR 0 8
34447: PUSH
34448: LD_VAR 0 1
34452: PPUSH
34453: LD_VAR 0 6
34457: PUSH
34458: LD_INT 1
34460: ARRAY
34461: PPUSH
34462: LD_VAR 0 6
34466: PUSH
34467: LD_INT 2
34469: ARRAY
34470: PPUSH
34471: CALL_OW 297
34475: ST_TO_ADDR
// if not Count ( result ) then
34476: LD_VAR 0 5
34480: PPUSH
34481: CALL 31053 0 1
34485: NOT
34486: IFFALSE 34519
// begin result := Join ( result , [ i , tmp ] ) ;
34488: LD_ADDR_VAR 0 5
34492: PUSH
34493: LD_VAR 0 5
34497: PPUSH
34498: LD_VAR 0 6
34502: PUSH
34503: LD_VAR 0 8
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PPUSH
34512: CALL 66653 0 2
34516: ST_TO_ADDR
// continue ;
34517: GO 34440
// end ; if result [ result ] [ 2 ] <= tmp then
34519: LD_VAR 0 5
34523: PUSH
34524: LD_VAR 0 5
34528: ARRAY
34529: PUSH
34530: LD_INT 2
34532: ARRAY
34533: PUSH
34534: LD_VAR 0 8
34538: LESSEQUAL
34539: IFFALSE 34572
// result := Join ( result , [ i , tmp ] ) else
34541: LD_ADDR_VAR 0 5
34545: PUSH
34546: LD_VAR 0 5
34550: PPUSH
34551: LD_VAR 0 6
34555: PUSH
34556: LD_VAR 0 8
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PPUSH
34565: CALL 66653 0 2
34569: ST_TO_ADDR
34570: GO 34657
// begin for j := 1 to Count ( result ) do
34572: LD_ADDR_VAR 0 7
34576: PUSH
34577: DOUBLE
34578: LD_INT 1
34580: DEC
34581: ST_TO_ADDR
34582: LD_VAR 0 5
34586: PPUSH
34587: CALL 31053 0 1
34591: PUSH
34592: FOR_TO
34593: IFFALSE 34655
// begin if tmp < result [ j ] [ 2 ] then
34595: LD_VAR 0 8
34599: PUSH
34600: LD_VAR 0 5
34604: PUSH
34605: LD_VAR 0 7
34609: ARRAY
34610: PUSH
34611: LD_INT 2
34613: ARRAY
34614: LESS
34615: IFFALSE 34653
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34617: LD_ADDR_VAR 0 5
34621: PUSH
34622: LD_VAR 0 5
34626: PPUSH
34627: LD_VAR 0 7
34631: PPUSH
34632: LD_VAR 0 6
34636: PUSH
34637: LD_VAR 0 8
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PPUSH
34646: CALL_OW 2
34650: ST_TO_ADDR
// break ;
34651: GO 34655
// end ; end ;
34653: GO 34592
34655: POP
34656: POP
// end ; end ;
34657: GO 34440
34659: POP
34660: POP
// if result and not asc then
34661: LD_VAR 0 5
34665: PUSH
34666: LD_VAR 0 3
34670: NOT
34671: AND
34672: IFFALSE 34689
// result := ReverseArray ( result ) ;
34674: LD_ADDR_VAR 0 5
34678: PUSH
34679: LD_VAR 0 5
34683: PPUSH
34684: CALL 61929 0 1
34688: ST_TO_ADDR
// tmp := [ ] ;
34689: LD_ADDR_VAR 0 8
34693: PUSH
34694: EMPTY
34695: ST_TO_ADDR
// if mode then
34696: LD_VAR 0 4
34700: IFFALSE 34764
// begin for i := 1 to result do
34702: LD_ADDR_VAR 0 6
34706: PUSH
34707: DOUBLE
34708: LD_INT 1
34710: DEC
34711: ST_TO_ADDR
34712: LD_VAR 0 5
34716: PUSH
34717: FOR_TO
34718: IFFALSE 34752
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
34720: LD_ADDR_VAR 0 8
34724: PUSH
34725: LD_VAR 0 8
34729: PPUSH
34730: LD_VAR 0 5
34734: PUSH
34735: LD_VAR 0 6
34739: ARRAY
34740: PUSH
34741: LD_INT 1
34743: ARRAY
34744: PPUSH
34745: CALL 66653 0 2
34749: ST_TO_ADDR
34750: GO 34717
34752: POP
34753: POP
// result := tmp ;
34754: LD_ADDR_VAR 0 5
34758: PUSH
34759: LD_VAR 0 8
34763: ST_TO_ADDR
// end ; end ;
34764: LD_VAR 0 5
34768: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34769: LD_INT 0
34771: PPUSH
34772: PPUSH
34773: PPUSH
34774: PPUSH
// if not list then
34775: LD_VAR 0 3
34779: NOT
34780: IFFALSE 34784
// exit ;
34782: GO 35172
// result := [ ] ;
34784: LD_ADDR_VAR 0 6
34788: PUSH
34789: EMPTY
34790: ST_TO_ADDR
// for i in list do
34791: LD_ADDR_VAR 0 7
34795: PUSH
34796: LD_VAR 0 3
34800: PUSH
34801: FOR_IN
34802: IFFALSE 35004
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34804: LD_ADDR_VAR 0 9
34808: PUSH
34809: LD_VAR 0 7
34813: PPUSH
34814: LD_VAR 0 1
34818: PPUSH
34819: LD_VAR 0 2
34823: PPUSH
34824: CALL_OW 297
34828: ST_TO_ADDR
// if not result then
34829: LD_VAR 0 6
34833: NOT
34834: IFFALSE 34860
// result := [ [ i , tmp ] ] else
34836: LD_ADDR_VAR 0 6
34840: PUSH
34841: LD_VAR 0 7
34845: PUSH
34846: LD_VAR 0 9
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: EMPTY
34856: LIST
34857: ST_TO_ADDR
34858: GO 35002
// begin if result [ result ] [ 2 ] < tmp then
34860: LD_VAR 0 6
34864: PUSH
34865: LD_VAR 0 6
34869: ARRAY
34870: PUSH
34871: LD_INT 2
34873: ARRAY
34874: PUSH
34875: LD_VAR 0 9
34879: LESS
34880: IFFALSE 34922
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34882: LD_ADDR_VAR 0 6
34886: PUSH
34887: LD_VAR 0 6
34891: PPUSH
34892: LD_VAR 0 6
34896: PUSH
34897: LD_INT 1
34899: PLUS
34900: PPUSH
34901: LD_VAR 0 7
34905: PUSH
34906: LD_VAR 0 9
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PPUSH
34915: CALL_OW 2
34919: ST_TO_ADDR
34920: GO 35002
// for j = 1 to result do
34922: LD_ADDR_VAR 0 8
34926: PUSH
34927: DOUBLE
34928: LD_INT 1
34930: DEC
34931: ST_TO_ADDR
34932: LD_VAR 0 6
34936: PUSH
34937: FOR_TO
34938: IFFALSE 35000
// begin if tmp < result [ j ] [ 2 ] then
34940: LD_VAR 0 9
34944: PUSH
34945: LD_VAR 0 6
34949: PUSH
34950: LD_VAR 0 8
34954: ARRAY
34955: PUSH
34956: LD_INT 2
34958: ARRAY
34959: LESS
34960: IFFALSE 34998
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34962: LD_ADDR_VAR 0 6
34966: PUSH
34967: LD_VAR 0 6
34971: PPUSH
34972: LD_VAR 0 8
34976: PPUSH
34977: LD_VAR 0 7
34981: PUSH
34982: LD_VAR 0 9
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PPUSH
34991: CALL_OW 2
34995: ST_TO_ADDR
// break ;
34996: GO 35000
// end ; end ;
34998: GO 34937
35000: POP
35001: POP
// end ; end ;
35002: GO 34801
35004: POP
35005: POP
// if result and not asc then
35006: LD_VAR 0 6
35010: PUSH
35011: LD_VAR 0 4
35015: NOT
35016: AND
35017: IFFALSE 35092
// begin tmp := result ;
35019: LD_ADDR_VAR 0 9
35023: PUSH
35024: LD_VAR 0 6
35028: ST_TO_ADDR
// for i = tmp downto 1 do
35029: LD_ADDR_VAR 0 7
35033: PUSH
35034: DOUBLE
35035: LD_VAR 0 9
35039: INC
35040: ST_TO_ADDR
35041: LD_INT 1
35043: PUSH
35044: FOR_DOWNTO
35045: IFFALSE 35090
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35047: LD_ADDR_VAR 0 6
35051: PUSH
35052: LD_VAR 0 6
35056: PPUSH
35057: LD_VAR 0 9
35061: PUSH
35062: LD_VAR 0 7
35066: MINUS
35067: PUSH
35068: LD_INT 1
35070: PLUS
35071: PPUSH
35072: LD_VAR 0 9
35076: PUSH
35077: LD_VAR 0 7
35081: ARRAY
35082: PPUSH
35083: CALL_OW 1
35087: ST_TO_ADDR
35088: GO 35044
35090: POP
35091: POP
// end ; tmp := [ ] ;
35092: LD_ADDR_VAR 0 9
35096: PUSH
35097: EMPTY
35098: ST_TO_ADDR
// if mode then
35099: LD_VAR 0 5
35103: IFFALSE 35172
// begin for i = 1 to result do
35105: LD_ADDR_VAR 0 7
35109: PUSH
35110: DOUBLE
35111: LD_INT 1
35113: DEC
35114: ST_TO_ADDR
35115: LD_VAR 0 6
35119: PUSH
35120: FOR_TO
35121: IFFALSE 35160
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35123: LD_ADDR_VAR 0 9
35127: PUSH
35128: LD_VAR 0 9
35132: PPUSH
35133: LD_VAR 0 7
35137: PPUSH
35138: LD_VAR 0 6
35142: PUSH
35143: LD_VAR 0 7
35147: ARRAY
35148: PUSH
35149: LD_INT 1
35151: ARRAY
35152: PPUSH
35153: CALL_OW 1
35157: ST_TO_ADDR
35158: GO 35120
35160: POP
35161: POP
// result := tmp ;
35162: LD_ADDR_VAR 0 6
35166: PUSH
35167: LD_VAR 0 9
35171: ST_TO_ADDR
// end ; end ;
35172: LD_VAR 0 6
35176: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35177: LD_INT 0
35179: PPUSH
35180: PPUSH
35181: PPUSH
35182: PPUSH
35183: PPUSH
35184: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35185: LD_ADDR_VAR 0 5
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: EMPTY
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: ST_TO_ADDR
// if not x or not y then
35207: LD_VAR 0 2
35211: NOT
35212: PUSH
35213: LD_VAR 0 3
35217: NOT
35218: OR
35219: IFFALSE 35223
// exit ;
35221: GO 36873
// if not range then
35223: LD_VAR 0 4
35227: NOT
35228: IFFALSE 35238
// range := 10 ;
35230: LD_ADDR_VAR 0 4
35234: PUSH
35235: LD_INT 10
35237: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35238: LD_ADDR_VAR 0 8
35242: PUSH
35243: LD_INT 81
35245: PUSH
35246: LD_VAR 0 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 92
35257: PUSH
35258: LD_VAR 0 2
35262: PUSH
35263: LD_VAR 0 3
35267: PUSH
35268: LD_VAR 0 4
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 3
35281: PUSH
35282: LD_INT 21
35284: PUSH
35285: LD_INT 3
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: PPUSH
35301: CALL_OW 69
35305: ST_TO_ADDR
// if not tmp then
35306: LD_VAR 0 8
35310: NOT
35311: IFFALSE 35315
// exit ;
35313: GO 36873
// for i in tmp do
35315: LD_ADDR_VAR 0 6
35319: PUSH
35320: LD_VAR 0 8
35324: PUSH
35325: FOR_IN
35326: IFFALSE 36848
// begin points := [ 0 , 0 , 0 ] ;
35328: LD_ADDR_VAR 0 9
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: ST_TO_ADDR
// bpoints := 1 ;
35347: LD_ADDR_VAR 0 10
35351: PUSH
35352: LD_INT 1
35354: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35355: LD_VAR 0 6
35359: PPUSH
35360: CALL_OW 247
35364: PUSH
35365: LD_INT 1
35367: DOUBLE
35368: EQUAL
35369: IFTRUE 35373
35371: GO 35951
35373: POP
// begin if GetClass ( i ) = 1 then
35374: LD_VAR 0 6
35378: PPUSH
35379: CALL_OW 257
35383: PUSH
35384: LD_INT 1
35386: EQUAL
35387: IFFALSE 35408
// points := [ 10 , 5 , 3 ] ;
35389: LD_ADDR_VAR 0 9
35393: PUSH
35394: LD_INT 10
35396: PUSH
35397: LD_INT 5
35399: PUSH
35400: LD_INT 3
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: LIST
35407: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35408: LD_VAR 0 6
35412: PPUSH
35413: CALL_OW 257
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: LD_INT 3
35423: PUSH
35424: LD_INT 4
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: LIST
35431: IN
35432: IFFALSE 35453
// points := [ 3 , 2 , 1 ] ;
35434: LD_ADDR_VAR 0 9
35438: PUSH
35439: LD_INT 3
35441: PUSH
35442: LD_INT 2
35444: PUSH
35445: LD_INT 1
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: LIST
35452: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35453: LD_VAR 0 6
35457: PPUSH
35458: CALL_OW 257
35462: PUSH
35463: LD_INT 5
35465: EQUAL
35466: IFFALSE 35487
// points := [ 130 , 5 , 2 ] ;
35468: LD_ADDR_VAR 0 9
35472: PUSH
35473: LD_INT 130
35475: PUSH
35476: LD_INT 5
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35487: LD_VAR 0 6
35491: PPUSH
35492: CALL_OW 257
35496: PUSH
35497: LD_INT 8
35499: EQUAL
35500: IFFALSE 35521
// points := [ 35 , 35 , 30 ] ;
35502: LD_ADDR_VAR 0 9
35506: PUSH
35507: LD_INT 35
35509: PUSH
35510: LD_INT 35
35512: PUSH
35513: LD_INT 30
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35521: LD_VAR 0 6
35525: PPUSH
35526: CALL_OW 257
35530: PUSH
35531: LD_INT 9
35533: EQUAL
35534: IFFALSE 35555
// points := [ 20 , 55 , 40 ] ;
35536: LD_ADDR_VAR 0 9
35540: PUSH
35541: LD_INT 20
35543: PUSH
35544: LD_INT 55
35546: PUSH
35547: LD_INT 40
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35555: LD_VAR 0 6
35559: PPUSH
35560: CALL_OW 257
35564: PUSH
35565: LD_INT 12
35567: PUSH
35568: LD_INT 16
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: IN
35575: IFFALSE 35596
// points := [ 5 , 3 , 2 ] ;
35577: LD_ADDR_VAR 0 9
35581: PUSH
35582: LD_INT 5
35584: PUSH
35585: LD_INT 3
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35596: LD_VAR 0 6
35600: PPUSH
35601: CALL_OW 257
35605: PUSH
35606: LD_INT 17
35608: EQUAL
35609: IFFALSE 35630
// points := [ 100 , 50 , 75 ] ;
35611: LD_ADDR_VAR 0 9
35615: PUSH
35616: LD_INT 100
35618: PUSH
35619: LD_INT 50
35621: PUSH
35622: LD_INT 75
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35630: LD_VAR 0 6
35634: PPUSH
35635: CALL_OW 257
35639: PUSH
35640: LD_INT 15
35642: EQUAL
35643: IFFALSE 35664
// points := [ 10 , 5 , 3 ] ;
35645: LD_ADDR_VAR 0 9
35649: PUSH
35650: LD_INT 10
35652: PUSH
35653: LD_INT 5
35655: PUSH
35656: LD_INT 3
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: LIST
35663: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35664: LD_VAR 0 6
35668: PPUSH
35669: CALL_OW 257
35673: PUSH
35674: LD_INT 14
35676: EQUAL
35677: IFFALSE 35698
// points := [ 10 , 0 , 0 ] ;
35679: LD_ADDR_VAR 0 9
35683: PUSH
35684: LD_INT 10
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35698: LD_VAR 0 6
35702: PPUSH
35703: CALL_OW 257
35707: PUSH
35708: LD_INT 11
35710: EQUAL
35711: IFFALSE 35732
// points := [ 30 , 10 , 5 ] ;
35713: LD_ADDR_VAR 0 9
35717: PUSH
35718: LD_INT 30
35720: PUSH
35721: LD_INT 10
35723: PUSH
35724: LD_INT 5
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35732: LD_VAR 0 1
35736: PPUSH
35737: LD_INT 5
35739: PPUSH
35740: CALL_OW 321
35744: PUSH
35745: LD_INT 2
35747: EQUAL
35748: IFFALSE 35765
// bpoints := bpoints * 1.8 ;
35750: LD_ADDR_VAR 0 10
35754: PUSH
35755: LD_VAR 0 10
35759: PUSH
35760: LD_REAL  1.80000000000000E+0000
35763: MUL
35764: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35765: LD_VAR 0 6
35769: PPUSH
35770: CALL_OW 257
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 3
35783: PUSH
35784: LD_INT 4
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: IN
35793: PUSH
35794: LD_VAR 0 1
35798: PPUSH
35799: LD_INT 51
35801: PPUSH
35802: CALL_OW 321
35806: PUSH
35807: LD_INT 2
35809: EQUAL
35810: AND
35811: IFFALSE 35828
// bpoints := bpoints * 1.2 ;
35813: LD_ADDR_VAR 0 10
35817: PUSH
35818: LD_VAR 0 10
35822: PUSH
35823: LD_REAL  1.20000000000000E+0000
35826: MUL
35827: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35828: LD_VAR 0 6
35832: PPUSH
35833: CALL_OW 257
35837: PUSH
35838: LD_INT 5
35840: PUSH
35841: LD_INT 7
35843: PUSH
35844: LD_INT 9
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: IN
35852: PUSH
35853: LD_VAR 0 1
35857: PPUSH
35858: LD_INT 52
35860: PPUSH
35861: CALL_OW 321
35865: PUSH
35866: LD_INT 2
35868: EQUAL
35869: AND
35870: IFFALSE 35887
// bpoints := bpoints * 1.5 ;
35872: LD_ADDR_VAR 0 10
35876: PUSH
35877: LD_VAR 0 10
35881: PUSH
35882: LD_REAL  1.50000000000000E+0000
35885: MUL
35886: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35887: LD_VAR 0 1
35891: PPUSH
35892: LD_INT 66
35894: PPUSH
35895: CALL_OW 321
35899: PUSH
35900: LD_INT 2
35902: EQUAL
35903: IFFALSE 35920
// bpoints := bpoints * 1.1 ;
35905: LD_ADDR_VAR 0 10
35909: PUSH
35910: LD_VAR 0 10
35914: PUSH
35915: LD_REAL  1.10000000000000E+0000
35918: MUL
35919: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35920: LD_ADDR_VAR 0 10
35924: PUSH
35925: LD_VAR 0 10
35929: PUSH
35930: LD_VAR 0 6
35934: PPUSH
35935: LD_INT 1
35937: PPUSH
35938: CALL_OW 259
35942: PUSH
35943: LD_REAL  1.15000000000000E+0000
35946: MUL
35947: MUL
35948: ST_TO_ADDR
// end ; unit_vehicle :
35949: GO 36777
35951: LD_INT 2
35953: DOUBLE
35954: EQUAL
35955: IFTRUE 35959
35957: GO 36765
35959: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35960: LD_VAR 0 6
35964: PPUSH
35965: CALL_OW 264
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: LD_INT 42
35975: PUSH
35976: LD_INT 24
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: IN
35984: IFFALSE 36005
// points := [ 25 , 5 , 3 ] ;
35986: LD_ADDR_VAR 0 9
35990: PUSH
35991: LD_INT 25
35993: PUSH
35994: LD_INT 5
35996: PUSH
35997: LD_INT 3
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: LIST
36004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36005: LD_VAR 0 6
36009: PPUSH
36010: CALL_OW 264
36014: PUSH
36015: LD_INT 4
36017: PUSH
36018: LD_INT 43
36020: PUSH
36021: LD_INT 25
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: LIST
36028: IN
36029: IFFALSE 36050
// points := [ 40 , 15 , 5 ] ;
36031: LD_ADDR_VAR 0 9
36035: PUSH
36036: LD_INT 40
36038: PUSH
36039: LD_INT 15
36041: PUSH
36042: LD_INT 5
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36050: LD_VAR 0 6
36054: PPUSH
36055: CALL_OW 264
36059: PUSH
36060: LD_INT 3
36062: PUSH
36063: LD_INT 23
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: IN
36070: IFFALSE 36091
// points := [ 7 , 25 , 8 ] ;
36072: LD_ADDR_VAR 0 9
36076: PUSH
36077: LD_INT 7
36079: PUSH
36080: LD_INT 25
36082: PUSH
36083: LD_INT 8
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: LIST
36090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36091: LD_VAR 0 6
36095: PPUSH
36096: CALL_OW 264
36100: PUSH
36101: LD_INT 5
36103: PUSH
36104: LD_INT 27
36106: PUSH
36107: LD_INT 44
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: LIST
36114: IN
36115: IFFALSE 36136
// points := [ 14 , 50 , 16 ] ;
36117: LD_ADDR_VAR 0 9
36121: PUSH
36122: LD_INT 14
36124: PUSH
36125: LD_INT 50
36127: PUSH
36128: LD_INT 16
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36136: LD_VAR 0 6
36140: PPUSH
36141: CALL_OW 264
36145: PUSH
36146: LD_INT 6
36148: PUSH
36149: LD_INT 46
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: IN
36156: IFFALSE 36177
// points := [ 32 , 120 , 70 ] ;
36158: LD_ADDR_VAR 0 9
36162: PUSH
36163: LD_INT 32
36165: PUSH
36166: LD_INT 120
36168: PUSH
36169: LD_INT 70
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: LIST
36176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36177: LD_VAR 0 6
36181: PPUSH
36182: CALL_OW 264
36186: PUSH
36187: LD_INT 7
36189: PUSH
36190: LD_INT 28
36192: PUSH
36193: LD_INT 45
36195: PUSH
36196: LD_INT 92
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: IN
36205: IFFALSE 36226
// points := [ 35 , 20 , 45 ] ;
36207: LD_ADDR_VAR 0 9
36211: PUSH
36212: LD_INT 35
36214: PUSH
36215: LD_INT 20
36217: PUSH
36218: LD_INT 45
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: LIST
36225: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36226: LD_VAR 0 6
36230: PPUSH
36231: CALL_OW 264
36235: PUSH
36236: LD_INT 47
36238: PUSH
36239: EMPTY
36240: LIST
36241: IN
36242: IFFALSE 36263
// points := [ 67 , 45 , 75 ] ;
36244: LD_ADDR_VAR 0 9
36248: PUSH
36249: LD_INT 67
36251: PUSH
36252: LD_INT 45
36254: PUSH
36255: LD_INT 75
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36263: LD_VAR 0 6
36267: PPUSH
36268: CALL_OW 264
36272: PUSH
36273: LD_INT 26
36275: PUSH
36276: EMPTY
36277: LIST
36278: IN
36279: IFFALSE 36300
// points := [ 120 , 30 , 80 ] ;
36281: LD_ADDR_VAR 0 9
36285: PUSH
36286: LD_INT 120
36288: PUSH
36289: LD_INT 30
36291: PUSH
36292: LD_INT 80
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: LIST
36299: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36300: LD_VAR 0 6
36304: PPUSH
36305: CALL_OW 264
36309: PUSH
36310: LD_INT 22
36312: PUSH
36313: EMPTY
36314: LIST
36315: IN
36316: IFFALSE 36337
// points := [ 40 , 1 , 1 ] ;
36318: LD_ADDR_VAR 0 9
36322: PUSH
36323: LD_INT 40
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: LIST
36336: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36337: LD_VAR 0 6
36341: PPUSH
36342: CALL_OW 264
36346: PUSH
36347: LD_INT 29
36349: PUSH
36350: EMPTY
36351: LIST
36352: IN
36353: IFFALSE 36374
// points := [ 70 , 200 , 400 ] ;
36355: LD_ADDR_VAR 0 9
36359: PUSH
36360: LD_INT 70
36362: PUSH
36363: LD_INT 200
36365: PUSH
36366: LD_INT 400
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36374: LD_VAR 0 6
36378: PPUSH
36379: CALL_OW 264
36383: PUSH
36384: LD_INT 14
36386: PUSH
36387: LD_INT 53
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: IN
36394: IFFALSE 36415
// points := [ 40 , 10 , 20 ] ;
36396: LD_ADDR_VAR 0 9
36400: PUSH
36401: LD_INT 40
36403: PUSH
36404: LD_INT 10
36406: PUSH
36407: LD_INT 20
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36415: LD_VAR 0 6
36419: PPUSH
36420: CALL_OW 264
36424: PUSH
36425: LD_INT 9
36427: PUSH
36428: EMPTY
36429: LIST
36430: IN
36431: IFFALSE 36452
// points := [ 5 , 70 , 20 ] ;
36433: LD_ADDR_VAR 0 9
36437: PUSH
36438: LD_INT 5
36440: PUSH
36441: LD_INT 70
36443: PUSH
36444: LD_INT 20
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36452: LD_VAR 0 6
36456: PPUSH
36457: CALL_OW 264
36461: PUSH
36462: LD_INT 10
36464: PUSH
36465: EMPTY
36466: LIST
36467: IN
36468: IFFALSE 36489
// points := [ 35 , 110 , 70 ] ;
36470: LD_ADDR_VAR 0 9
36474: PUSH
36475: LD_INT 35
36477: PUSH
36478: LD_INT 110
36480: PUSH
36481: LD_INT 70
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: LIST
36488: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36489: LD_VAR 0 6
36493: PPUSH
36494: CALL_OW 265
36498: PUSH
36499: LD_INT 25
36501: EQUAL
36502: IFFALSE 36523
// points := [ 80 , 65 , 100 ] ;
36504: LD_ADDR_VAR 0 9
36508: PUSH
36509: LD_INT 80
36511: PUSH
36512: LD_INT 65
36514: PUSH
36515: LD_INT 100
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: LIST
36522: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36523: LD_VAR 0 6
36527: PPUSH
36528: CALL_OW 263
36532: PUSH
36533: LD_INT 1
36535: EQUAL
36536: IFFALSE 36571
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36538: LD_ADDR_VAR 0 10
36542: PUSH
36543: LD_VAR 0 10
36547: PUSH
36548: LD_VAR 0 6
36552: PPUSH
36553: CALL_OW 311
36557: PPUSH
36558: LD_INT 3
36560: PPUSH
36561: CALL_OW 259
36565: PUSH
36566: LD_INT 4
36568: MUL
36569: MUL
36570: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36571: LD_VAR 0 6
36575: PPUSH
36576: CALL_OW 263
36580: PUSH
36581: LD_INT 2
36583: EQUAL
36584: IFFALSE 36635
// begin j := IsControledBy ( i ) ;
36586: LD_ADDR_VAR 0 7
36590: PUSH
36591: LD_VAR 0 6
36595: PPUSH
36596: CALL_OW 312
36600: ST_TO_ADDR
// if j then
36601: LD_VAR 0 7
36605: IFFALSE 36635
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36607: LD_ADDR_VAR 0 10
36611: PUSH
36612: LD_VAR 0 10
36616: PUSH
36617: LD_VAR 0 7
36621: PPUSH
36622: LD_INT 3
36624: PPUSH
36625: CALL_OW 259
36629: PUSH
36630: LD_INT 3
36632: MUL
36633: MUL
36634: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36635: LD_VAR 0 6
36639: PPUSH
36640: CALL_OW 264
36644: PUSH
36645: LD_INT 5
36647: PUSH
36648: LD_INT 6
36650: PUSH
36651: LD_INT 46
36653: PUSH
36654: LD_INT 44
36656: PUSH
36657: LD_INT 47
36659: PUSH
36660: LD_INT 45
36662: PUSH
36663: LD_INT 28
36665: PUSH
36666: LD_INT 7
36668: PUSH
36669: LD_INT 27
36671: PUSH
36672: LD_INT 29
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: IN
36687: PUSH
36688: LD_VAR 0 1
36692: PPUSH
36693: LD_INT 52
36695: PPUSH
36696: CALL_OW 321
36700: PUSH
36701: LD_INT 2
36703: EQUAL
36704: AND
36705: IFFALSE 36722
// bpoints := bpoints * 1.2 ;
36707: LD_ADDR_VAR 0 10
36711: PUSH
36712: LD_VAR 0 10
36716: PUSH
36717: LD_REAL  1.20000000000000E+0000
36720: MUL
36721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36722: LD_VAR 0 6
36726: PPUSH
36727: CALL_OW 264
36731: PUSH
36732: LD_INT 6
36734: PUSH
36735: LD_INT 46
36737: PUSH
36738: LD_INT 47
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: IN
36746: IFFALSE 36763
// bpoints := bpoints * 1.2 ;
36748: LD_ADDR_VAR 0 10
36752: PUSH
36753: LD_VAR 0 10
36757: PUSH
36758: LD_REAL  1.20000000000000E+0000
36761: MUL
36762: ST_TO_ADDR
// end ; unit_building :
36763: GO 36777
36765: LD_INT 3
36767: DOUBLE
36768: EQUAL
36769: IFTRUE 36773
36771: GO 36776
36773: POP
// ; end ;
36774: GO 36777
36776: POP
// for j = 1 to 3 do
36777: LD_ADDR_VAR 0 7
36781: PUSH
36782: DOUBLE
36783: LD_INT 1
36785: DEC
36786: ST_TO_ADDR
36787: LD_INT 3
36789: PUSH
36790: FOR_TO
36791: IFFALSE 36844
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36793: LD_ADDR_VAR 0 5
36797: PUSH
36798: LD_VAR 0 5
36802: PPUSH
36803: LD_VAR 0 7
36807: PPUSH
36808: LD_VAR 0 5
36812: PUSH
36813: LD_VAR 0 7
36817: ARRAY
36818: PUSH
36819: LD_VAR 0 9
36823: PUSH
36824: LD_VAR 0 7
36828: ARRAY
36829: PUSH
36830: LD_VAR 0 10
36834: MUL
36835: PLUS
36836: PPUSH
36837: CALL_OW 1
36841: ST_TO_ADDR
36842: GO 36790
36844: POP
36845: POP
// end ;
36846: GO 35325
36848: POP
36849: POP
// result := Replace ( result , 4 , tmp ) ;
36850: LD_ADDR_VAR 0 5
36854: PUSH
36855: LD_VAR 0 5
36859: PPUSH
36860: LD_INT 4
36862: PPUSH
36863: LD_VAR 0 8
36867: PPUSH
36868: CALL_OW 1
36872: ST_TO_ADDR
// end ;
36873: LD_VAR 0 5
36877: RET
// export function DangerAtRange ( unit , range ) ; begin
36878: LD_INT 0
36880: PPUSH
// if not unit then
36881: LD_VAR 0 1
36885: NOT
36886: IFFALSE 36890
// exit ;
36888: GO 36935
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36890: LD_ADDR_VAR 0 3
36894: PUSH
36895: LD_VAR 0 1
36899: PPUSH
36900: CALL_OW 255
36904: PPUSH
36905: LD_VAR 0 1
36909: PPUSH
36910: CALL_OW 250
36914: PPUSH
36915: LD_VAR 0 1
36919: PPUSH
36920: CALL_OW 251
36924: PPUSH
36925: LD_VAR 0 2
36929: PPUSH
36930: CALL 35177 0 4
36934: ST_TO_ADDR
// end ;
36935: LD_VAR 0 3
36939: RET
// export function DangerInArea ( side , area ) ; begin
36940: LD_INT 0
36942: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36943: LD_ADDR_VAR 0 3
36947: PUSH
36948: LD_VAR 0 2
36952: PPUSH
36953: LD_INT 81
36955: PUSH
36956: LD_VAR 0 1
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PPUSH
36965: CALL_OW 70
36969: ST_TO_ADDR
// end ;
36970: LD_VAR 0 3
36974: RET
// export function IsExtension ( b ) ; begin
36975: LD_INT 0
36977: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36978: LD_ADDR_VAR 0 2
36982: PUSH
36983: LD_VAR 0 1
36987: PUSH
36988: LD_INT 23
36990: PUSH
36991: LD_INT 20
36993: PUSH
36994: LD_INT 22
36996: PUSH
36997: LD_INT 17
36999: PUSH
37000: LD_INT 24
37002: PUSH
37003: LD_INT 21
37005: PUSH
37006: LD_INT 19
37008: PUSH
37009: LD_INT 16
37011: PUSH
37012: LD_INT 25
37014: PUSH
37015: LD_INT 18
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: IN
37030: ST_TO_ADDR
// end ;
37031: LD_VAR 0 2
37035: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37036: LD_INT 0
37038: PPUSH
37039: PPUSH
37040: PPUSH
// result := [ ] ;
37041: LD_ADDR_VAR 0 4
37045: PUSH
37046: EMPTY
37047: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37048: LD_ADDR_VAR 0 5
37052: PUSH
37053: LD_VAR 0 2
37057: PPUSH
37058: LD_INT 21
37060: PUSH
37061: LD_INT 3
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PPUSH
37068: CALL_OW 70
37072: ST_TO_ADDR
// if not tmp then
37073: LD_VAR 0 5
37077: NOT
37078: IFFALSE 37082
// exit ;
37080: GO 37146
// if checkLink then
37082: LD_VAR 0 3
37086: IFFALSE 37136
// begin for i in tmp do
37088: LD_ADDR_VAR 0 6
37092: PUSH
37093: LD_VAR 0 5
37097: PUSH
37098: FOR_IN
37099: IFFALSE 37134
// if GetBase ( i ) <> base then
37101: LD_VAR 0 6
37105: PPUSH
37106: CALL_OW 274
37110: PUSH
37111: LD_VAR 0 1
37115: NONEQUAL
37116: IFFALSE 37132
// ComLinkToBase ( base , i ) ;
37118: LD_VAR 0 1
37122: PPUSH
37123: LD_VAR 0 6
37127: PPUSH
37128: CALL_OW 169
37132: GO 37098
37134: POP
37135: POP
// end ; result := tmp ;
37136: LD_ADDR_VAR 0 4
37140: PUSH
37141: LD_VAR 0 5
37145: ST_TO_ADDR
// end ;
37146: LD_VAR 0 4
37150: RET
// export function ComComplete ( units , b ) ; var i ; begin
37151: LD_INT 0
37153: PPUSH
37154: PPUSH
// if not units then
37155: LD_VAR 0 1
37159: NOT
37160: IFFALSE 37164
// exit ;
37162: GO 37254
// for i in units do
37164: LD_ADDR_VAR 0 4
37168: PUSH
37169: LD_VAR 0 1
37173: PUSH
37174: FOR_IN
37175: IFFALSE 37252
// if BuildingStatus ( b ) = bs_build then
37177: LD_VAR 0 2
37181: PPUSH
37182: CALL_OW 461
37186: PUSH
37187: LD_INT 1
37189: EQUAL
37190: IFFALSE 37250
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37192: LD_VAR 0 4
37196: PPUSH
37197: LD_STRING h
37199: PUSH
37200: LD_VAR 0 2
37204: PPUSH
37205: CALL_OW 250
37209: PUSH
37210: LD_VAR 0 2
37214: PPUSH
37215: CALL_OW 251
37219: PUSH
37220: LD_VAR 0 2
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: PUSH
37243: EMPTY
37244: LIST
37245: PPUSH
37246: CALL_OW 446
37250: GO 37174
37252: POP
37253: POP
// end ;
37254: LD_VAR 0 3
37258: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37259: LD_INT 0
37261: PPUSH
37262: PPUSH
37263: PPUSH
37264: PPUSH
37265: PPUSH
37266: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37267: LD_VAR 0 1
37271: NOT
37272: PUSH
37273: LD_VAR 0 1
37277: PPUSH
37278: CALL_OW 263
37282: PUSH
37283: LD_INT 2
37285: NONEQUAL
37286: OR
37287: IFFALSE 37291
// exit ;
37289: GO 37607
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37291: LD_ADDR_VAR 0 6
37295: PUSH
37296: LD_INT 22
37298: PUSH
37299: LD_VAR 0 1
37303: PPUSH
37304: CALL_OW 255
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: LD_INT 30
37318: PUSH
37319: LD_INT 36
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 34
37328: PUSH
37329: LD_INT 31
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PPUSH
37345: CALL_OW 69
37349: ST_TO_ADDR
// if not tmp then
37350: LD_VAR 0 6
37354: NOT
37355: IFFALSE 37359
// exit ;
37357: GO 37607
// result := [ ] ;
37359: LD_ADDR_VAR 0 2
37363: PUSH
37364: EMPTY
37365: ST_TO_ADDR
// for i in tmp do
37366: LD_ADDR_VAR 0 3
37370: PUSH
37371: LD_VAR 0 6
37375: PUSH
37376: FOR_IN
37377: IFFALSE 37448
// begin t := UnitsInside ( i ) ;
37379: LD_ADDR_VAR 0 4
37383: PUSH
37384: LD_VAR 0 3
37388: PPUSH
37389: CALL_OW 313
37393: ST_TO_ADDR
// if t then
37394: LD_VAR 0 4
37398: IFFALSE 37446
// for j in t do
37400: LD_ADDR_VAR 0 7
37404: PUSH
37405: LD_VAR 0 4
37409: PUSH
37410: FOR_IN
37411: IFFALSE 37444
// result := Replace ( result , result + 1 , j ) ;
37413: LD_ADDR_VAR 0 2
37417: PUSH
37418: LD_VAR 0 2
37422: PPUSH
37423: LD_VAR 0 2
37427: PUSH
37428: LD_INT 1
37430: PLUS
37431: PPUSH
37432: LD_VAR 0 7
37436: PPUSH
37437: CALL_OW 1
37441: ST_TO_ADDR
37442: GO 37410
37444: POP
37445: POP
// end ;
37446: GO 37376
37448: POP
37449: POP
// if not result then
37450: LD_VAR 0 2
37454: NOT
37455: IFFALSE 37459
// exit ;
37457: GO 37607
// mech := result [ 1 ] ;
37459: LD_ADDR_VAR 0 5
37463: PUSH
37464: LD_VAR 0 2
37468: PUSH
37469: LD_INT 1
37471: ARRAY
37472: ST_TO_ADDR
// if result > 1 then
37473: LD_VAR 0 2
37477: PUSH
37478: LD_INT 1
37480: GREATER
37481: IFFALSE 37593
// begin for i = 2 to result do
37483: LD_ADDR_VAR 0 3
37487: PUSH
37488: DOUBLE
37489: LD_INT 2
37491: DEC
37492: ST_TO_ADDR
37493: LD_VAR 0 2
37497: PUSH
37498: FOR_TO
37499: IFFALSE 37591
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37501: LD_ADDR_VAR 0 4
37505: PUSH
37506: LD_VAR 0 2
37510: PUSH
37511: LD_VAR 0 3
37515: ARRAY
37516: PPUSH
37517: LD_INT 3
37519: PPUSH
37520: CALL_OW 259
37524: PUSH
37525: LD_VAR 0 2
37529: PUSH
37530: LD_VAR 0 3
37534: ARRAY
37535: PPUSH
37536: CALL_OW 432
37540: MINUS
37541: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37542: LD_VAR 0 4
37546: PUSH
37547: LD_VAR 0 5
37551: PPUSH
37552: LD_INT 3
37554: PPUSH
37555: CALL_OW 259
37559: PUSH
37560: LD_VAR 0 5
37564: PPUSH
37565: CALL_OW 432
37569: MINUS
37570: GREATEREQUAL
37571: IFFALSE 37589
// mech := result [ i ] ;
37573: LD_ADDR_VAR 0 5
37577: PUSH
37578: LD_VAR 0 2
37582: PUSH
37583: LD_VAR 0 3
37587: ARRAY
37588: ST_TO_ADDR
// end ;
37589: GO 37498
37591: POP
37592: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37593: LD_VAR 0 1
37597: PPUSH
37598: LD_VAR 0 5
37602: PPUSH
37603: CALL_OW 135
// end ;
37607: LD_VAR 0 2
37611: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37612: LD_INT 0
37614: PPUSH
37615: PPUSH
37616: PPUSH
37617: PPUSH
37618: PPUSH
37619: PPUSH
37620: PPUSH
37621: PPUSH
37622: PPUSH
37623: PPUSH
37624: PPUSH
37625: PPUSH
37626: PPUSH
// result := [ ] ;
37627: LD_ADDR_VAR 0 7
37631: PUSH
37632: EMPTY
37633: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37634: LD_VAR 0 1
37638: PPUSH
37639: CALL_OW 266
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: IN
37654: NOT
37655: IFFALSE 37659
// exit ;
37657: GO 39293
// if name then
37659: LD_VAR 0 3
37663: IFFALSE 37679
// SetBName ( base_dep , name ) ;
37665: LD_VAR 0 1
37669: PPUSH
37670: LD_VAR 0 3
37674: PPUSH
37675: CALL_OW 500
// base := GetBase ( base_dep ) ;
37679: LD_ADDR_VAR 0 15
37683: PUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 274
37693: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37694: LD_ADDR_VAR 0 16
37698: PUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: CALL_OW 255
37708: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37709: LD_ADDR_VAR 0 17
37713: PUSH
37714: LD_VAR 0 1
37718: PPUSH
37719: CALL_OW 248
37723: ST_TO_ADDR
// if sources then
37724: LD_VAR 0 5
37728: IFFALSE 37775
// for i = 1 to 3 do
37730: LD_ADDR_VAR 0 8
37734: PUSH
37735: DOUBLE
37736: LD_INT 1
37738: DEC
37739: ST_TO_ADDR
37740: LD_INT 3
37742: PUSH
37743: FOR_TO
37744: IFFALSE 37773
// AddResourceType ( base , i , sources [ i ] ) ;
37746: LD_VAR 0 15
37750: PPUSH
37751: LD_VAR 0 8
37755: PPUSH
37756: LD_VAR 0 5
37760: PUSH
37761: LD_VAR 0 8
37765: ARRAY
37766: PPUSH
37767: CALL_OW 276
37771: GO 37743
37773: POP
37774: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37775: LD_ADDR_VAR 0 18
37779: PUSH
37780: LD_VAR 0 15
37784: PPUSH
37785: LD_VAR 0 2
37789: PPUSH
37790: LD_INT 1
37792: PPUSH
37793: CALL 37036 0 3
37797: ST_TO_ADDR
// InitHc ;
37798: CALL_OW 19
// InitUc ;
37802: CALL_OW 18
// uc_side := side ;
37806: LD_ADDR_OWVAR 20
37810: PUSH
37811: LD_VAR 0 16
37815: ST_TO_ADDR
// uc_nation := nation ;
37816: LD_ADDR_OWVAR 21
37820: PUSH
37821: LD_VAR 0 17
37825: ST_TO_ADDR
// if buildings then
37826: LD_VAR 0 18
37830: IFFALSE 39152
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37832: LD_ADDR_VAR 0 19
37836: PUSH
37837: LD_VAR 0 18
37841: PPUSH
37842: LD_INT 2
37844: PUSH
37845: LD_INT 30
37847: PUSH
37848: LD_INT 29
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 30
37857: PUSH
37858: LD_INT 30
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: PPUSH
37870: CALL_OW 72
37874: ST_TO_ADDR
// if tmp then
37875: LD_VAR 0 19
37879: IFFALSE 37927
// for i in tmp do
37881: LD_ADDR_VAR 0 8
37885: PUSH
37886: LD_VAR 0 19
37890: PUSH
37891: FOR_IN
37892: IFFALSE 37925
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37894: LD_VAR 0 8
37898: PPUSH
37899: CALL_OW 250
37903: PPUSH
37904: LD_VAR 0 8
37908: PPUSH
37909: CALL_OW 251
37913: PPUSH
37914: LD_VAR 0 16
37918: PPUSH
37919: CALL_OW 441
37923: GO 37891
37925: POP
37926: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37927: LD_VAR 0 18
37931: PPUSH
37932: LD_INT 2
37934: PUSH
37935: LD_INT 30
37937: PUSH
37938: LD_INT 32
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 30
37947: PUSH
37948: LD_INT 33
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: LIST
37959: PPUSH
37960: CALL_OW 72
37964: IFFALSE 38052
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37966: LD_ADDR_VAR 0 8
37970: PUSH
37971: LD_VAR 0 18
37975: PPUSH
37976: LD_INT 2
37978: PUSH
37979: LD_INT 30
37981: PUSH
37982: LD_INT 32
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 30
37991: PUSH
37992: LD_INT 33
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: LIST
38003: PPUSH
38004: CALL_OW 72
38008: PUSH
38009: FOR_IN
38010: IFFALSE 38050
// begin if not GetBWeapon ( i ) then
38012: LD_VAR 0 8
38016: PPUSH
38017: CALL_OW 269
38021: NOT
38022: IFFALSE 38048
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38024: LD_VAR 0 8
38028: PPUSH
38029: LD_VAR 0 8
38033: PPUSH
38034: LD_VAR 0 2
38038: PPUSH
38039: CALL 39298 0 2
38043: PPUSH
38044: CALL_OW 431
// end ;
38048: GO 38009
38050: POP
38051: POP
// end ; for i = 1 to personel do
38052: LD_ADDR_VAR 0 8
38056: PUSH
38057: DOUBLE
38058: LD_INT 1
38060: DEC
38061: ST_TO_ADDR
38062: LD_VAR 0 6
38066: PUSH
38067: FOR_TO
38068: IFFALSE 39132
// begin if i > 4 then
38070: LD_VAR 0 8
38074: PUSH
38075: LD_INT 4
38077: GREATER
38078: IFFALSE 38082
// break ;
38080: GO 39132
// case i of 1 :
38082: LD_VAR 0 8
38086: PUSH
38087: LD_INT 1
38089: DOUBLE
38090: EQUAL
38091: IFTRUE 38095
38093: GO 38175
38095: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38096: LD_ADDR_VAR 0 12
38100: PUSH
38101: LD_VAR 0 18
38105: PPUSH
38106: LD_INT 22
38108: PUSH
38109: LD_VAR 0 16
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 58
38120: PUSH
38121: EMPTY
38122: LIST
38123: PUSH
38124: LD_INT 2
38126: PUSH
38127: LD_INT 30
38129: PUSH
38130: LD_INT 32
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 30
38139: PUSH
38140: LD_INT 4
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 30
38149: PUSH
38150: LD_INT 5
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: PPUSH
38168: CALL_OW 72
38172: ST_TO_ADDR
38173: GO 38397
38175: LD_INT 2
38177: DOUBLE
38178: EQUAL
38179: IFTRUE 38183
38181: GO 38245
38183: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38184: LD_ADDR_VAR 0 12
38188: PUSH
38189: LD_VAR 0 18
38193: PPUSH
38194: LD_INT 22
38196: PUSH
38197: LD_VAR 0 16
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 2
38208: PUSH
38209: LD_INT 30
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 30
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: LIST
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PPUSH
38238: CALL_OW 72
38242: ST_TO_ADDR
38243: GO 38397
38245: LD_INT 3
38247: DOUBLE
38248: EQUAL
38249: IFTRUE 38253
38251: GO 38315
38253: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38254: LD_ADDR_VAR 0 12
38258: PUSH
38259: LD_VAR 0 18
38263: PPUSH
38264: LD_INT 22
38266: PUSH
38267: LD_VAR 0 16
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: LD_INT 30
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 30
38291: PUSH
38292: LD_INT 3
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PPUSH
38308: CALL_OW 72
38312: ST_TO_ADDR
38313: GO 38397
38315: LD_INT 4
38317: DOUBLE
38318: EQUAL
38319: IFTRUE 38323
38321: GO 38396
38323: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38324: LD_ADDR_VAR 0 12
38328: PUSH
38329: LD_VAR 0 18
38333: PPUSH
38334: LD_INT 22
38336: PUSH
38337: LD_VAR 0 16
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: LD_INT 30
38351: PUSH
38352: LD_INT 6
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 30
38361: PUSH
38362: LD_INT 7
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 30
38371: PUSH
38372: LD_INT 8
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PPUSH
38389: CALL_OW 72
38393: ST_TO_ADDR
38394: GO 38397
38396: POP
// if i = 1 then
38397: LD_VAR 0 8
38401: PUSH
38402: LD_INT 1
38404: EQUAL
38405: IFFALSE 38516
// begin tmp := [ ] ;
38407: LD_ADDR_VAR 0 19
38411: PUSH
38412: EMPTY
38413: ST_TO_ADDR
// for j in f do
38414: LD_ADDR_VAR 0 9
38418: PUSH
38419: LD_VAR 0 12
38423: PUSH
38424: FOR_IN
38425: IFFALSE 38498
// if GetBType ( j ) = b_bunker then
38427: LD_VAR 0 9
38431: PPUSH
38432: CALL_OW 266
38436: PUSH
38437: LD_INT 32
38439: EQUAL
38440: IFFALSE 38467
// tmp := Insert ( tmp , 1 , j ) else
38442: LD_ADDR_VAR 0 19
38446: PUSH
38447: LD_VAR 0 19
38451: PPUSH
38452: LD_INT 1
38454: PPUSH
38455: LD_VAR 0 9
38459: PPUSH
38460: CALL_OW 2
38464: ST_TO_ADDR
38465: GO 38496
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38467: LD_ADDR_VAR 0 19
38471: PUSH
38472: LD_VAR 0 19
38476: PPUSH
38477: LD_VAR 0 19
38481: PUSH
38482: LD_INT 1
38484: PLUS
38485: PPUSH
38486: LD_VAR 0 9
38490: PPUSH
38491: CALL_OW 2
38495: ST_TO_ADDR
38496: GO 38424
38498: POP
38499: POP
// if tmp then
38500: LD_VAR 0 19
38504: IFFALSE 38516
// f := tmp ;
38506: LD_ADDR_VAR 0 12
38510: PUSH
38511: LD_VAR 0 19
38515: ST_TO_ADDR
// end ; x := personel [ i ] ;
38516: LD_ADDR_VAR 0 13
38520: PUSH
38521: LD_VAR 0 6
38525: PUSH
38526: LD_VAR 0 8
38530: ARRAY
38531: ST_TO_ADDR
// if x = - 1 then
38532: LD_VAR 0 13
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: EQUAL
38541: IFFALSE 38750
// begin for j in f do
38543: LD_ADDR_VAR 0 9
38547: PUSH
38548: LD_VAR 0 12
38552: PUSH
38553: FOR_IN
38554: IFFALSE 38746
// repeat InitHc ;
38556: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38560: LD_VAR 0 9
38564: PPUSH
38565: CALL_OW 266
38569: PUSH
38570: LD_INT 5
38572: EQUAL
38573: IFFALSE 38643
// begin if UnitsInside ( j ) < 3 then
38575: LD_VAR 0 9
38579: PPUSH
38580: CALL_OW 313
38584: PUSH
38585: LD_INT 3
38587: LESS
38588: IFFALSE 38624
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38590: LD_INT 0
38592: PPUSH
38593: LD_INT 5
38595: PUSH
38596: LD_INT 8
38598: PUSH
38599: LD_INT 9
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: LIST
38606: PUSH
38607: LD_VAR 0 17
38611: ARRAY
38612: PPUSH
38613: LD_VAR 0 4
38617: PPUSH
38618: CALL_OW 380
38622: GO 38641
// PrepareHuman ( false , i , skill ) ;
38624: LD_INT 0
38626: PPUSH
38627: LD_VAR 0 8
38631: PPUSH
38632: LD_VAR 0 4
38636: PPUSH
38637: CALL_OW 380
// end else
38641: GO 38660
// PrepareHuman ( false , i , skill ) ;
38643: LD_INT 0
38645: PPUSH
38646: LD_VAR 0 8
38650: PPUSH
38651: LD_VAR 0 4
38655: PPUSH
38656: CALL_OW 380
// un := CreateHuman ;
38660: LD_ADDR_VAR 0 14
38664: PUSH
38665: CALL_OW 44
38669: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38670: LD_ADDR_VAR 0 7
38674: PUSH
38675: LD_VAR 0 7
38679: PPUSH
38680: LD_INT 1
38682: PPUSH
38683: LD_VAR 0 14
38687: PPUSH
38688: CALL_OW 2
38692: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38693: LD_VAR 0 14
38697: PPUSH
38698: LD_VAR 0 9
38702: PPUSH
38703: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38707: LD_VAR 0 9
38711: PPUSH
38712: CALL_OW 313
38716: PUSH
38717: LD_INT 6
38719: EQUAL
38720: PUSH
38721: LD_VAR 0 9
38725: PPUSH
38726: CALL_OW 266
38730: PUSH
38731: LD_INT 32
38733: PUSH
38734: LD_INT 31
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: IN
38741: OR
38742: IFFALSE 38556
38744: GO 38553
38746: POP
38747: POP
// end else
38748: GO 39130
// for j = 1 to x do
38750: LD_ADDR_VAR 0 9
38754: PUSH
38755: DOUBLE
38756: LD_INT 1
38758: DEC
38759: ST_TO_ADDR
38760: LD_VAR 0 13
38764: PUSH
38765: FOR_TO
38766: IFFALSE 39128
// begin InitHc ;
38768: CALL_OW 19
// if not f then
38772: LD_VAR 0 12
38776: NOT
38777: IFFALSE 38866
// begin PrepareHuman ( false , i , skill ) ;
38779: LD_INT 0
38781: PPUSH
38782: LD_VAR 0 8
38786: PPUSH
38787: LD_VAR 0 4
38791: PPUSH
38792: CALL_OW 380
// un := CreateHuman ;
38796: LD_ADDR_VAR 0 14
38800: PUSH
38801: CALL_OW 44
38805: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38806: LD_ADDR_VAR 0 7
38810: PUSH
38811: LD_VAR 0 7
38815: PPUSH
38816: LD_INT 1
38818: PPUSH
38819: LD_VAR 0 14
38823: PPUSH
38824: CALL_OW 2
38828: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38829: LD_VAR 0 14
38833: PPUSH
38834: LD_VAR 0 1
38838: PPUSH
38839: CALL_OW 250
38843: PPUSH
38844: LD_VAR 0 1
38848: PPUSH
38849: CALL_OW 251
38853: PPUSH
38854: LD_INT 10
38856: PPUSH
38857: LD_INT 0
38859: PPUSH
38860: CALL_OW 50
// continue ;
38864: GO 38765
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38866: LD_VAR 0 12
38870: PUSH
38871: LD_INT 1
38873: ARRAY
38874: PPUSH
38875: CALL_OW 313
38879: PUSH
38880: LD_VAR 0 12
38884: PUSH
38885: LD_INT 1
38887: ARRAY
38888: PPUSH
38889: CALL_OW 266
38893: PUSH
38894: LD_INT 32
38896: PUSH
38897: LD_INT 31
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: IN
38904: AND
38905: PUSH
38906: LD_VAR 0 12
38910: PUSH
38911: LD_INT 1
38913: ARRAY
38914: PPUSH
38915: CALL_OW 313
38919: PUSH
38920: LD_INT 6
38922: EQUAL
38923: OR
38924: IFFALSE 38944
// f := Delete ( f , 1 ) ;
38926: LD_ADDR_VAR 0 12
38930: PUSH
38931: LD_VAR 0 12
38935: PPUSH
38936: LD_INT 1
38938: PPUSH
38939: CALL_OW 3
38943: ST_TO_ADDR
// if not f then
38944: LD_VAR 0 12
38948: NOT
38949: IFFALSE 38967
// begin x := x + 2 ;
38951: LD_ADDR_VAR 0 13
38955: PUSH
38956: LD_VAR 0 13
38960: PUSH
38961: LD_INT 2
38963: PLUS
38964: ST_TO_ADDR
// continue ;
38965: GO 38765
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38967: LD_VAR 0 12
38971: PUSH
38972: LD_INT 1
38974: ARRAY
38975: PPUSH
38976: CALL_OW 266
38980: PUSH
38981: LD_INT 5
38983: EQUAL
38984: IFFALSE 39058
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38986: LD_VAR 0 12
38990: PUSH
38991: LD_INT 1
38993: ARRAY
38994: PPUSH
38995: CALL_OW 313
38999: PUSH
39000: LD_INT 3
39002: LESS
39003: IFFALSE 39039
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39005: LD_INT 0
39007: PPUSH
39008: LD_INT 5
39010: PUSH
39011: LD_INT 8
39013: PUSH
39014: LD_INT 9
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: LIST
39021: PUSH
39022: LD_VAR 0 17
39026: ARRAY
39027: PPUSH
39028: LD_VAR 0 4
39032: PPUSH
39033: CALL_OW 380
39037: GO 39056
// PrepareHuman ( false , i , skill ) ;
39039: LD_INT 0
39041: PPUSH
39042: LD_VAR 0 8
39046: PPUSH
39047: LD_VAR 0 4
39051: PPUSH
39052: CALL_OW 380
// end else
39056: GO 39075
// PrepareHuman ( false , i , skill ) ;
39058: LD_INT 0
39060: PPUSH
39061: LD_VAR 0 8
39065: PPUSH
39066: LD_VAR 0 4
39070: PPUSH
39071: CALL_OW 380
// un := CreateHuman ;
39075: LD_ADDR_VAR 0 14
39079: PUSH
39080: CALL_OW 44
39084: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39085: LD_ADDR_VAR 0 7
39089: PUSH
39090: LD_VAR 0 7
39094: PPUSH
39095: LD_INT 1
39097: PPUSH
39098: LD_VAR 0 14
39102: PPUSH
39103: CALL_OW 2
39107: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39108: LD_VAR 0 14
39112: PPUSH
39113: LD_VAR 0 12
39117: PUSH
39118: LD_INT 1
39120: ARRAY
39121: PPUSH
39122: CALL_OW 52
// end ;
39126: GO 38765
39128: POP
39129: POP
// end ;
39130: GO 38067
39132: POP
39133: POP
// result := result ^ buildings ;
39134: LD_ADDR_VAR 0 7
39138: PUSH
39139: LD_VAR 0 7
39143: PUSH
39144: LD_VAR 0 18
39148: ADD
39149: ST_TO_ADDR
// end else
39150: GO 39293
// begin for i = 1 to personel do
39152: LD_ADDR_VAR 0 8
39156: PUSH
39157: DOUBLE
39158: LD_INT 1
39160: DEC
39161: ST_TO_ADDR
39162: LD_VAR 0 6
39166: PUSH
39167: FOR_TO
39168: IFFALSE 39291
// begin if i > 4 then
39170: LD_VAR 0 8
39174: PUSH
39175: LD_INT 4
39177: GREATER
39178: IFFALSE 39182
// break ;
39180: GO 39291
// x := personel [ i ] ;
39182: LD_ADDR_VAR 0 13
39186: PUSH
39187: LD_VAR 0 6
39191: PUSH
39192: LD_VAR 0 8
39196: ARRAY
39197: ST_TO_ADDR
// if x = - 1 then
39198: LD_VAR 0 13
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: EQUAL
39207: IFFALSE 39211
// continue ;
39209: GO 39167
// PrepareHuman ( false , i , skill ) ;
39211: LD_INT 0
39213: PPUSH
39214: LD_VAR 0 8
39218: PPUSH
39219: LD_VAR 0 4
39223: PPUSH
39224: CALL_OW 380
// un := CreateHuman ;
39228: LD_ADDR_VAR 0 14
39232: PUSH
39233: CALL_OW 44
39237: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39238: LD_VAR 0 14
39242: PPUSH
39243: LD_VAR 0 1
39247: PPUSH
39248: CALL_OW 250
39252: PPUSH
39253: LD_VAR 0 1
39257: PPUSH
39258: CALL_OW 251
39262: PPUSH
39263: LD_INT 10
39265: PPUSH
39266: LD_INT 0
39268: PPUSH
39269: CALL_OW 50
// result := result ^ un ;
39273: LD_ADDR_VAR 0 7
39277: PUSH
39278: LD_VAR 0 7
39282: PUSH
39283: LD_VAR 0 14
39287: ADD
39288: ST_TO_ADDR
// end ;
39289: GO 39167
39291: POP
39292: POP
// end ; end ;
39293: LD_VAR 0 7
39297: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39298: LD_INT 0
39300: PPUSH
39301: PPUSH
39302: PPUSH
39303: PPUSH
39304: PPUSH
39305: PPUSH
39306: PPUSH
39307: PPUSH
39308: PPUSH
39309: PPUSH
39310: PPUSH
39311: PPUSH
39312: PPUSH
39313: PPUSH
39314: PPUSH
39315: PPUSH
// result := false ;
39316: LD_ADDR_VAR 0 3
39320: PUSH
39321: LD_INT 0
39323: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39324: LD_VAR 0 1
39328: NOT
39329: PUSH
39330: LD_VAR 0 1
39334: PPUSH
39335: CALL_OW 266
39339: PUSH
39340: LD_INT 32
39342: PUSH
39343: LD_INT 33
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: IN
39350: NOT
39351: OR
39352: IFFALSE 39356
// exit ;
39354: GO 40465
// nat := GetNation ( tower ) ;
39356: LD_ADDR_VAR 0 12
39360: PUSH
39361: LD_VAR 0 1
39365: PPUSH
39366: CALL_OW 248
39370: ST_TO_ADDR
// side := GetSide ( tower ) ;
39371: LD_ADDR_VAR 0 16
39375: PUSH
39376: LD_VAR 0 1
39380: PPUSH
39381: CALL_OW 255
39385: ST_TO_ADDR
// x := GetX ( tower ) ;
39386: LD_ADDR_VAR 0 10
39390: PUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: CALL_OW 250
39400: ST_TO_ADDR
// y := GetY ( tower ) ;
39401: LD_ADDR_VAR 0 11
39405: PUSH
39406: LD_VAR 0 1
39410: PPUSH
39411: CALL_OW 251
39415: ST_TO_ADDR
// if not x or not y then
39416: LD_VAR 0 10
39420: NOT
39421: PUSH
39422: LD_VAR 0 11
39426: NOT
39427: OR
39428: IFFALSE 39432
// exit ;
39430: GO 40465
// weapon := 0 ;
39432: LD_ADDR_VAR 0 18
39436: PUSH
39437: LD_INT 0
39439: ST_TO_ADDR
// fac_list := [ ] ;
39440: LD_ADDR_VAR 0 17
39444: PUSH
39445: EMPTY
39446: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39447: LD_ADDR_VAR 0 6
39451: PUSH
39452: LD_VAR 0 1
39456: PPUSH
39457: CALL_OW 274
39461: PPUSH
39462: LD_VAR 0 2
39466: PPUSH
39467: LD_INT 0
39469: PPUSH
39470: CALL 37036 0 3
39474: PPUSH
39475: LD_INT 30
39477: PUSH
39478: LD_INT 3
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PPUSH
39485: CALL_OW 72
39489: ST_TO_ADDR
// if not factories then
39490: LD_VAR 0 6
39494: NOT
39495: IFFALSE 39499
// exit ;
39497: GO 40465
// for i in factories do
39499: LD_ADDR_VAR 0 8
39503: PUSH
39504: LD_VAR 0 6
39508: PUSH
39509: FOR_IN
39510: IFFALSE 39535
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39512: LD_ADDR_VAR 0 17
39516: PUSH
39517: LD_VAR 0 17
39521: PUSH
39522: LD_VAR 0 8
39526: PPUSH
39527: CALL_OW 478
39531: UNION
39532: ST_TO_ADDR
39533: GO 39509
39535: POP
39536: POP
// if not fac_list then
39537: LD_VAR 0 17
39541: NOT
39542: IFFALSE 39546
// exit ;
39544: GO 40465
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39546: LD_ADDR_VAR 0 5
39550: PUSH
39551: LD_INT 4
39553: PUSH
39554: LD_INT 5
39556: PUSH
39557: LD_INT 9
39559: PUSH
39560: LD_INT 10
39562: PUSH
39563: LD_INT 6
39565: PUSH
39566: LD_INT 7
39568: PUSH
39569: LD_INT 11
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 27
39583: PUSH
39584: LD_INT 28
39586: PUSH
39587: LD_INT 26
39589: PUSH
39590: LD_INT 30
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 43
39601: PUSH
39602: LD_INT 44
39604: PUSH
39605: LD_INT 46
39607: PUSH
39608: LD_INT 45
39610: PUSH
39611: LD_INT 47
39613: PUSH
39614: LD_INT 49
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: LIST
39629: PUSH
39630: LD_VAR 0 12
39634: ARRAY
39635: ST_TO_ADDR
// list := list isect fac_list ;
39636: LD_ADDR_VAR 0 5
39640: PUSH
39641: LD_VAR 0 5
39645: PUSH
39646: LD_VAR 0 17
39650: ISECT
39651: ST_TO_ADDR
// if not list then
39652: LD_VAR 0 5
39656: NOT
39657: IFFALSE 39661
// exit ;
39659: GO 40465
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39661: LD_VAR 0 12
39665: PUSH
39666: LD_INT 3
39668: EQUAL
39669: PUSH
39670: LD_INT 49
39672: PUSH
39673: LD_VAR 0 5
39677: IN
39678: AND
39679: PUSH
39680: LD_INT 31
39682: PPUSH
39683: LD_VAR 0 16
39687: PPUSH
39688: CALL_OW 321
39692: PUSH
39693: LD_INT 2
39695: EQUAL
39696: AND
39697: IFFALSE 39757
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39699: LD_INT 22
39701: PUSH
39702: LD_VAR 0 16
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 35
39713: PUSH
39714: LD_INT 49
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 91
39723: PUSH
39724: LD_VAR 0 1
39728: PUSH
39729: LD_INT 10
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: LIST
39741: PPUSH
39742: CALL_OW 69
39746: NOT
39747: IFFALSE 39757
// weapon := ru_time_lapser ;
39749: LD_ADDR_VAR 0 18
39753: PUSH
39754: LD_INT 49
39756: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39757: LD_VAR 0 12
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: IN
39772: PUSH
39773: LD_INT 11
39775: PUSH
39776: LD_VAR 0 5
39780: IN
39781: PUSH
39782: LD_INT 30
39784: PUSH
39785: LD_VAR 0 5
39789: IN
39790: OR
39791: AND
39792: PUSH
39793: LD_INT 6
39795: PPUSH
39796: LD_VAR 0 16
39800: PPUSH
39801: CALL_OW 321
39805: PUSH
39806: LD_INT 2
39808: EQUAL
39809: AND
39810: IFFALSE 39975
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39812: LD_INT 22
39814: PUSH
39815: LD_VAR 0 16
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 2
39826: PUSH
39827: LD_INT 35
39829: PUSH
39830: LD_INT 11
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 35
39839: PUSH
39840: LD_INT 30
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 91
39854: PUSH
39855: LD_VAR 0 1
39859: PUSH
39860: LD_INT 18
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: LIST
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: LIST
39872: PPUSH
39873: CALL_OW 69
39877: NOT
39878: PUSH
39879: LD_INT 22
39881: PUSH
39882: LD_VAR 0 16
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: LD_INT 30
39896: PUSH
39897: LD_INT 32
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 30
39906: PUSH
39907: LD_INT 33
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 91
39921: PUSH
39922: LD_VAR 0 1
39926: PUSH
39927: LD_INT 12
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: LIST
39939: PUSH
39940: EMPTY
39941: LIST
39942: PPUSH
39943: CALL_OW 69
39947: PUSH
39948: LD_INT 2
39950: GREATER
39951: AND
39952: IFFALSE 39975
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39954: LD_ADDR_VAR 0 18
39958: PUSH
39959: LD_INT 11
39961: PUSH
39962: LD_INT 30
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_VAR 0 12
39973: ARRAY
39974: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39975: LD_VAR 0 18
39979: NOT
39980: PUSH
39981: LD_INT 40
39983: PPUSH
39984: LD_VAR 0 16
39988: PPUSH
39989: CALL_OW 321
39993: PUSH
39994: LD_INT 2
39996: EQUAL
39997: AND
39998: PUSH
39999: LD_INT 7
40001: PUSH
40002: LD_VAR 0 5
40006: IN
40007: PUSH
40008: LD_INT 28
40010: PUSH
40011: LD_VAR 0 5
40015: IN
40016: OR
40017: PUSH
40018: LD_INT 45
40020: PUSH
40021: LD_VAR 0 5
40025: IN
40026: OR
40027: AND
40028: IFFALSE 40282
// begin hex := GetHexInfo ( x , y ) ;
40030: LD_ADDR_VAR 0 4
40034: PUSH
40035: LD_VAR 0 10
40039: PPUSH
40040: LD_VAR 0 11
40044: PPUSH
40045: CALL_OW 546
40049: ST_TO_ADDR
// if hex [ 1 ] then
40050: LD_VAR 0 4
40054: PUSH
40055: LD_INT 1
40057: ARRAY
40058: IFFALSE 40062
// exit ;
40060: GO 40465
// height := hex [ 2 ] ;
40062: LD_ADDR_VAR 0 15
40066: PUSH
40067: LD_VAR 0 4
40071: PUSH
40072: LD_INT 2
40074: ARRAY
40075: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40076: LD_ADDR_VAR 0 14
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: LD_INT 3
40089: PUSH
40090: LD_INT 5
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: ST_TO_ADDR
// for i in tmp do
40099: LD_ADDR_VAR 0 8
40103: PUSH
40104: LD_VAR 0 14
40108: PUSH
40109: FOR_IN
40110: IFFALSE 40280
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40112: LD_ADDR_VAR 0 9
40116: PUSH
40117: LD_VAR 0 10
40121: PPUSH
40122: LD_VAR 0 8
40126: PPUSH
40127: LD_INT 5
40129: PPUSH
40130: CALL_OW 272
40134: PUSH
40135: LD_VAR 0 11
40139: PPUSH
40140: LD_VAR 0 8
40144: PPUSH
40145: LD_INT 5
40147: PPUSH
40148: CALL_OW 273
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40157: LD_VAR 0 9
40161: PUSH
40162: LD_INT 1
40164: ARRAY
40165: PPUSH
40166: LD_VAR 0 9
40170: PUSH
40171: LD_INT 2
40173: ARRAY
40174: PPUSH
40175: CALL_OW 488
40179: IFFALSE 40278
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40181: LD_ADDR_VAR 0 4
40185: PUSH
40186: LD_VAR 0 9
40190: PUSH
40191: LD_INT 1
40193: ARRAY
40194: PPUSH
40195: LD_VAR 0 9
40199: PUSH
40200: LD_INT 2
40202: ARRAY
40203: PPUSH
40204: CALL_OW 546
40208: ST_TO_ADDR
// if hex [ 1 ] then
40209: LD_VAR 0 4
40213: PUSH
40214: LD_INT 1
40216: ARRAY
40217: IFFALSE 40221
// continue ;
40219: GO 40109
// h := hex [ 2 ] ;
40221: LD_ADDR_VAR 0 13
40225: PUSH
40226: LD_VAR 0 4
40230: PUSH
40231: LD_INT 2
40233: ARRAY
40234: ST_TO_ADDR
// if h + 7 < height then
40235: LD_VAR 0 13
40239: PUSH
40240: LD_INT 7
40242: PLUS
40243: PUSH
40244: LD_VAR 0 15
40248: LESS
40249: IFFALSE 40278
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40251: LD_ADDR_VAR 0 18
40255: PUSH
40256: LD_INT 7
40258: PUSH
40259: LD_INT 28
40261: PUSH
40262: LD_INT 45
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: LIST
40269: PUSH
40270: LD_VAR 0 12
40274: ARRAY
40275: ST_TO_ADDR
// break ;
40276: GO 40280
// end ; end ; end ;
40278: GO 40109
40280: POP
40281: POP
// end ; if not weapon then
40282: LD_VAR 0 18
40286: NOT
40287: IFFALSE 40347
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40289: LD_ADDR_VAR 0 5
40293: PUSH
40294: LD_VAR 0 5
40298: PUSH
40299: LD_INT 11
40301: PUSH
40302: LD_INT 30
40304: PUSH
40305: LD_INT 49
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: DIFF
40313: ST_TO_ADDR
// if not list then
40314: LD_VAR 0 5
40318: NOT
40319: IFFALSE 40323
// exit ;
40321: GO 40465
// weapon := list [ rand ( 1 , list ) ] ;
40323: LD_ADDR_VAR 0 18
40327: PUSH
40328: LD_VAR 0 5
40332: PUSH
40333: LD_INT 1
40335: PPUSH
40336: LD_VAR 0 5
40340: PPUSH
40341: CALL_OW 12
40345: ARRAY
40346: ST_TO_ADDR
// end ; if weapon then
40347: LD_VAR 0 18
40351: IFFALSE 40465
// begin tmp := CostOfWeapon ( weapon ) ;
40353: LD_ADDR_VAR 0 14
40357: PUSH
40358: LD_VAR 0 18
40362: PPUSH
40363: CALL_OW 451
40367: ST_TO_ADDR
// j := GetBase ( tower ) ;
40368: LD_ADDR_VAR 0 9
40372: PUSH
40373: LD_VAR 0 1
40377: PPUSH
40378: CALL_OW 274
40382: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40383: LD_VAR 0 9
40387: PPUSH
40388: LD_INT 1
40390: PPUSH
40391: CALL_OW 275
40395: PUSH
40396: LD_VAR 0 14
40400: PUSH
40401: LD_INT 1
40403: ARRAY
40404: GREATEREQUAL
40405: PUSH
40406: LD_VAR 0 9
40410: PPUSH
40411: LD_INT 2
40413: PPUSH
40414: CALL_OW 275
40418: PUSH
40419: LD_VAR 0 14
40423: PUSH
40424: LD_INT 2
40426: ARRAY
40427: GREATEREQUAL
40428: AND
40429: PUSH
40430: LD_VAR 0 9
40434: PPUSH
40435: LD_INT 3
40437: PPUSH
40438: CALL_OW 275
40442: PUSH
40443: LD_VAR 0 14
40447: PUSH
40448: LD_INT 3
40450: ARRAY
40451: GREATEREQUAL
40452: AND
40453: IFFALSE 40465
// result := weapon ;
40455: LD_ADDR_VAR 0 3
40459: PUSH
40460: LD_VAR 0 18
40464: ST_TO_ADDR
// end ; end ;
40465: LD_VAR 0 3
40469: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40470: LD_INT 0
40472: PPUSH
40473: PPUSH
// result := true ;
40474: LD_ADDR_VAR 0 3
40478: PUSH
40479: LD_INT 1
40481: ST_TO_ADDR
// if array1 = array2 then
40482: LD_VAR 0 1
40486: PUSH
40487: LD_VAR 0 2
40491: EQUAL
40492: IFFALSE 40552
// begin for i = 1 to array1 do
40494: LD_ADDR_VAR 0 4
40498: PUSH
40499: DOUBLE
40500: LD_INT 1
40502: DEC
40503: ST_TO_ADDR
40504: LD_VAR 0 1
40508: PUSH
40509: FOR_TO
40510: IFFALSE 40548
// if array1 [ i ] <> array2 [ i ] then
40512: LD_VAR 0 1
40516: PUSH
40517: LD_VAR 0 4
40521: ARRAY
40522: PUSH
40523: LD_VAR 0 2
40527: PUSH
40528: LD_VAR 0 4
40532: ARRAY
40533: NONEQUAL
40534: IFFALSE 40546
// begin result := false ;
40536: LD_ADDR_VAR 0 3
40540: PUSH
40541: LD_INT 0
40543: ST_TO_ADDR
// break ;
40544: GO 40548
// end ;
40546: GO 40509
40548: POP
40549: POP
// end else
40550: GO 40560
// result := false ;
40552: LD_ADDR_VAR 0 3
40556: PUSH
40557: LD_INT 0
40559: ST_TO_ADDR
// end ;
40560: LD_VAR 0 3
40564: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40565: LD_INT 0
40567: PPUSH
40568: PPUSH
// if not array1 or not array2 then
40569: LD_VAR 0 1
40573: NOT
40574: PUSH
40575: LD_VAR 0 2
40579: NOT
40580: OR
40581: IFFALSE 40585
// exit ;
40583: GO 40649
// result := true ;
40585: LD_ADDR_VAR 0 3
40589: PUSH
40590: LD_INT 1
40592: ST_TO_ADDR
// for i = 1 to array1 do
40593: LD_ADDR_VAR 0 4
40597: PUSH
40598: DOUBLE
40599: LD_INT 1
40601: DEC
40602: ST_TO_ADDR
40603: LD_VAR 0 1
40607: PUSH
40608: FOR_TO
40609: IFFALSE 40647
// if array1 [ i ] <> array2 [ i ] then
40611: LD_VAR 0 1
40615: PUSH
40616: LD_VAR 0 4
40620: ARRAY
40621: PUSH
40622: LD_VAR 0 2
40626: PUSH
40627: LD_VAR 0 4
40631: ARRAY
40632: NONEQUAL
40633: IFFALSE 40645
// begin result := false ;
40635: LD_ADDR_VAR 0 3
40639: PUSH
40640: LD_INT 0
40642: ST_TO_ADDR
// break ;
40643: GO 40647
// end ;
40645: GO 40608
40647: POP
40648: POP
// end ;
40649: LD_VAR 0 3
40653: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40654: LD_INT 0
40656: PPUSH
40657: PPUSH
40658: PPUSH
// pom := GetBase ( fac ) ;
40659: LD_ADDR_VAR 0 5
40663: PUSH
40664: LD_VAR 0 1
40668: PPUSH
40669: CALL_OW 274
40673: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40674: LD_ADDR_VAR 0 4
40678: PUSH
40679: LD_VAR 0 2
40683: PUSH
40684: LD_INT 1
40686: ARRAY
40687: PPUSH
40688: LD_VAR 0 2
40692: PUSH
40693: LD_INT 2
40695: ARRAY
40696: PPUSH
40697: LD_VAR 0 2
40701: PUSH
40702: LD_INT 3
40704: ARRAY
40705: PPUSH
40706: LD_VAR 0 2
40710: PUSH
40711: LD_INT 4
40713: ARRAY
40714: PPUSH
40715: CALL_OW 449
40719: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40720: LD_ADDR_VAR 0 3
40724: PUSH
40725: LD_VAR 0 5
40729: PPUSH
40730: LD_INT 1
40732: PPUSH
40733: CALL_OW 275
40737: PUSH
40738: LD_VAR 0 4
40742: PUSH
40743: LD_INT 1
40745: ARRAY
40746: GREATEREQUAL
40747: PUSH
40748: LD_VAR 0 5
40752: PPUSH
40753: LD_INT 2
40755: PPUSH
40756: CALL_OW 275
40760: PUSH
40761: LD_VAR 0 4
40765: PUSH
40766: LD_INT 2
40768: ARRAY
40769: GREATEREQUAL
40770: AND
40771: PUSH
40772: LD_VAR 0 5
40776: PPUSH
40777: LD_INT 3
40779: PPUSH
40780: CALL_OW 275
40784: PUSH
40785: LD_VAR 0 4
40789: PUSH
40790: LD_INT 3
40792: ARRAY
40793: GREATEREQUAL
40794: AND
40795: ST_TO_ADDR
// end ;
40796: LD_VAR 0 3
40800: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40801: LD_INT 0
40803: PPUSH
40804: PPUSH
40805: PPUSH
40806: PPUSH
// pom := GetBase ( building ) ;
40807: LD_ADDR_VAR 0 3
40811: PUSH
40812: LD_VAR 0 1
40816: PPUSH
40817: CALL_OW 274
40821: ST_TO_ADDR
// if not pom then
40822: LD_VAR 0 3
40826: NOT
40827: IFFALSE 40831
// exit ;
40829: GO 41001
// btype := GetBType ( building ) ;
40831: LD_ADDR_VAR 0 5
40835: PUSH
40836: LD_VAR 0 1
40840: PPUSH
40841: CALL_OW 266
40845: ST_TO_ADDR
// if btype = b_armoury then
40846: LD_VAR 0 5
40850: PUSH
40851: LD_INT 4
40853: EQUAL
40854: IFFALSE 40864
// btype := b_barracks ;
40856: LD_ADDR_VAR 0 5
40860: PUSH
40861: LD_INT 5
40863: ST_TO_ADDR
// if btype = b_depot then
40864: LD_VAR 0 5
40868: PUSH
40869: LD_INT 0
40871: EQUAL
40872: IFFALSE 40882
// btype := b_warehouse ;
40874: LD_ADDR_VAR 0 5
40878: PUSH
40879: LD_INT 1
40881: ST_TO_ADDR
// if btype = b_workshop then
40882: LD_VAR 0 5
40886: PUSH
40887: LD_INT 2
40889: EQUAL
40890: IFFALSE 40900
// btype := b_factory ;
40892: LD_ADDR_VAR 0 5
40896: PUSH
40897: LD_INT 3
40899: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40900: LD_ADDR_VAR 0 4
40904: PUSH
40905: LD_VAR 0 5
40909: PPUSH
40910: LD_VAR 0 1
40914: PPUSH
40915: CALL_OW 248
40919: PPUSH
40920: CALL_OW 450
40924: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40925: LD_ADDR_VAR 0 2
40929: PUSH
40930: LD_VAR 0 3
40934: PPUSH
40935: LD_INT 1
40937: PPUSH
40938: CALL_OW 275
40942: PUSH
40943: LD_VAR 0 4
40947: PUSH
40948: LD_INT 1
40950: ARRAY
40951: GREATEREQUAL
40952: PUSH
40953: LD_VAR 0 3
40957: PPUSH
40958: LD_INT 2
40960: PPUSH
40961: CALL_OW 275
40965: PUSH
40966: LD_VAR 0 4
40970: PUSH
40971: LD_INT 2
40973: ARRAY
40974: GREATEREQUAL
40975: AND
40976: PUSH
40977: LD_VAR 0 3
40981: PPUSH
40982: LD_INT 3
40984: PPUSH
40985: CALL_OW 275
40989: PUSH
40990: LD_VAR 0 4
40994: PUSH
40995: LD_INT 3
40997: ARRAY
40998: GREATEREQUAL
40999: AND
41000: ST_TO_ADDR
// end ;
41001: LD_VAR 0 2
41005: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41006: LD_INT 0
41008: PPUSH
41009: PPUSH
41010: PPUSH
// pom := GetBase ( building ) ;
41011: LD_ADDR_VAR 0 4
41015: PUSH
41016: LD_VAR 0 1
41020: PPUSH
41021: CALL_OW 274
41025: ST_TO_ADDR
// if not pom then
41026: LD_VAR 0 4
41030: NOT
41031: IFFALSE 41035
// exit ;
41033: GO 41136
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41035: LD_ADDR_VAR 0 5
41039: PUSH
41040: LD_VAR 0 2
41044: PPUSH
41045: LD_VAR 0 1
41049: PPUSH
41050: CALL_OW 248
41054: PPUSH
41055: CALL_OW 450
41059: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41060: LD_ADDR_VAR 0 3
41064: PUSH
41065: LD_VAR 0 4
41069: PPUSH
41070: LD_INT 1
41072: PPUSH
41073: CALL_OW 275
41077: PUSH
41078: LD_VAR 0 5
41082: PUSH
41083: LD_INT 1
41085: ARRAY
41086: GREATEREQUAL
41087: PUSH
41088: LD_VAR 0 4
41092: PPUSH
41093: LD_INT 2
41095: PPUSH
41096: CALL_OW 275
41100: PUSH
41101: LD_VAR 0 5
41105: PUSH
41106: LD_INT 2
41108: ARRAY
41109: GREATEREQUAL
41110: AND
41111: PUSH
41112: LD_VAR 0 4
41116: PPUSH
41117: LD_INT 3
41119: PPUSH
41120: CALL_OW 275
41124: PUSH
41125: LD_VAR 0 5
41129: PUSH
41130: LD_INT 3
41132: ARRAY
41133: GREATEREQUAL
41134: AND
41135: ST_TO_ADDR
// end ;
41136: LD_VAR 0 3
41140: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41141: LD_INT 0
41143: PPUSH
41144: PPUSH
41145: PPUSH
41146: PPUSH
41147: PPUSH
41148: PPUSH
41149: PPUSH
41150: PPUSH
41151: PPUSH
41152: PPUSH
41153: PPUSH
// result := false ;
41154: LD_ADDR_VAR 0 8
41158: PUSH
41159: LD_INT 0
41161: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41162: LD_VAR 0 5
41166: NOT
41167: PUSH
41168: LD_VAR 0 1
41172: NOT
41173: OR
41174: PUSH
41175: LD_VAR 0 2
41179: NOT
41180: OR
41181: PUSH
41182: LD_VAR 0 3
41186: NOT
41187: OR
41188: IFFALSE 41192
// exit ;
41190: GO 42006
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41192: LD_ADDR_VAR 0 14
41196: PUSH
41197: LD_VAR 0 1
41201: PPUSH
41202: LD_VAR 0 2
41206: PPUSH
41207: LD_VAR 0 3
41211: PPUSH
41212: LD_VAR 0 4
41216: PPUSH
41217: LD_VAR 0 5
41221: PUSH
41222: LD_INT 1
41224: ARRAY
41225: PPUSH
41226: CALL_OW 248
41230: PPUSH
41231: LD_INT 0
41233: PPUSH
41234: CALL 43259 0 6
41238: ST_TO_ADDR
// if not hexes then
41239: LD_VAR 0 14
41243: NOT
41244: IFFALSE 41248
// exit ;
41246: GO 42006
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41248: LD_ADDR_VAR 0 17
41252: PUSH
41253: LD_VAR 0 5
41257: PPUSH
41258: LD_INT 22
41260: PUSH
41261: LD_VAR 0 13
41265: PPUSH
41266: CALL_OW 255
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 2
41277: PUSH
41278: LD_INT 30
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 30
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: LIST
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PPUSH
41307: CALL_OW 72
41311: ST_TO_ADDR
// for i = 1 to hexes do
41312: LD_ADDR_VAR 0 9
41316: PUSH
41317: DOUBLE
41318: LD_INT 1
41320: DEC
41321: ST_TO_ADDR
41322: LD_VAR 0 14
41326: PUSH
41327: FOR_TO
41328: IFFALSE 42004
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41330: LD_ADDR_VAR 0 13
41334: PUSH
41335: LD_VAR 0 14
41339: PUSH
41340: LD_VAR 0 9
41344: ARRAY
41345: PUSH
41346: LD_INT 1
41348: ARRAY
41349: PPUSH
41350: LD_VAR 0 14
41354: PUSH
41355: LD_VAR 0 9
41359: ARRAY
41360: PUSH
41361: LD_INT 2
41363: ARRAY
41364: PPUSH
41365: CALL_OW 428
41369: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41370: LD_VAR 0 14
41374: PUSH
41375: LD_VAR 0 9
41379: ARRAY
41380: PUSH
41381: LD_INT 1
41383: ARRAY
41384: PPUSH
41385: LD_VAR 0 14
41389: PUSH
41390: LD_VAR 0 9
41394: ARRAY
41395: PUSH
41396: LD_INT 2
41398: ARRAY
41399: PPUSH
41400: CALL_OW 351
41404: PUSH
41405: LD_VAR 0 14
41409: PUSH
41410: LD_VAR 0 9
41414: ARRAY
41415: PUSH
41416: LD_INT 1
41418: ARRAY
41419: PPUSH
41420: LD_VAR 0 14
41424: PUSH
41425: LD_VAR 0 9
41429: ARRAY
41430: PUSH
41431: LD_INT 2
41433: ARRAY
41434: PPUSH
41435: CALL_OW 488
41439: NOT
41440: OR
41441: PUSH
41442: LD_VAR 0 13
41446: PPUSH
41447: CALL_OW 247
41451: PUSH
41452: LD_INT 3
41454: EQUAL
41455: OR
41456: IFFALSE 41462
// exit ;
41458: POP
41459: POP
41460: GO 42006
// if not tmp then
41462: LD_VAR 0 13
41466: NOT
41467: IFFALSE 41471
// continue ;
41469: GO 41327
// result := true ;
41471: LD_ADDR_VAR 0 8
41475: PUSH
41476: LD_INT 1
41478: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41479: LD_VAR 0 6
41483: PUSH
41484: LD_VAR 0 13
41488: PPUSH
41489: CALL_OW 247
41493: PUSH
41494: LD_INT 2
41496: EQUAL
41497: AND
41498: PUSH
41499: LD_VAR 0 13
41503: PPUSH
41504: CALL_OW 263
41508: PUSH
41509: LD_INT 1
41511: EQUAL
41512: AND
41513: IFFALSE 41677
// begin if IsDrivenBy ( tmp ) then
41515: LD_VAR 0 13
41519: PPUSH
41520: CALL_OW 311
41524: IFFALSE 41528
// continue ;
41526: GO 41327
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41528: LD_VAR 0 6
41532: PPUSH
41533: LD_INT 3
41535: PUSH
41536: LD_INT 60
41538: PUSH
41539: EMPTY
41540: LIST
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: PUSH
41549: LD_INT 55
41551: PUSH
41552: EMPTY
41553: LIST
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PPUSH
41563: CALL_OW 72
41567: IFFALSE 41675
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41569: LD_ADDR_VAR 0 18
41573: PUSH
41574: LD_VAR 0 6
41578: PPUSH
41579: LD_INT 3
41581: PUSH
41582: LD_INT 60
41584: PUSH
41585: EMPTY
41586: LIST
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 3
41594: PUSH
41595: LD_INT 55
41597: PUSH
41598: EMPTY
41599: LIST
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PPUSH
41609: CALL_OW 72
41613: PUSH
41614: LD_INT 1
41616: ARRAY
41617: ST_TO_ADDR
// if IsInUnit ( driver ) then
41618: LD_VAR 0 18
41622: PPUSH
41623: CALL_OW 310
41627: IFFALSE 41638
// ComExit ( driver ) ;
41629: LD_VAR 0 18
41633: PPUSH
41634: CALL 67051 0 1
// AddComEnterUnit ( driver , tmp ) ;
41638: LD_VAR 0 18
41642: PPUSH
41643: LD_VAR 0 13
41647: PPUSH
41648: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41652: LD_VAR 0 18
41656: PPUSH
41657: LD_VAR 0 7
41661: PPUSH
41662: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41666: LD_VAR 0 18
41670: PPUSH
41671: CALL_OW 181
// end ; continue ;
41675: GO 41327
// end ; if not cleaners or not tmp in cleaners then
41677: LD_VAR 0 6
41681: NOT
41682: PUSH
41683: LD_VAR 0 13
41687: PUSH
41688: LD_VAR 0 6
41692: IN
41693: NOT
41694: OR
41695: IFFALSE 42002
// begin if dep then
41697: LD_VAR 0 17
41701: IFFALSE 41837
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41703: LD_ADDR_VAR 0 16
41707: PUSH
41708: LD_VAR 0 17
41712: PUSH
41713: LD_INT 1
41715: ARRAY
41716: PPUSH
41717: CALL_OW 250
41721: PPUSH
41722: LD_VAR 0 17
41726: PUSH
41727: LD_INT 1
41729: ARRAY
41730: PPUSH
41731: CALL_OW 254
41735: PPUSH
41736: LD_INT 5
41738: PPUSH
41739: CALL_OW 272
41743: PUSH
41744: LD_VAR 0 17
41748: PUSH
41749: LD_INT 1
41751: ARRAY
41752: PPUSH
41753: CALL_OW 251
41757: PPUSH
41758: LD_VAR 0 17
41762: PUSH
41763: LD_INT 1
41765: ARRAY
41766: PPUSH
41767: CALL_OW 254
41771: PPUSH
41772: LD_INT 5
41774: PPUSH
41775: CALL_OW 273
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41784: LD_VAR 0 16
41788: PUSH
41789: LD_INT 1
41791: ARRAY
41792: PPUSH
41793: LD_VAR 0 16
41797: PUSH
41798: LD_INT 2
41800: ARRAY
41801: PPUSH
41802: CALL_OW 488
41806: IFFALSE 41837
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41808: LD_VAR 0 13
41812: PPUSH
41813: LD_VAR 0 16
41817: PUSH
41818: LD_INT 1
41820: ARRAY
41821: PPUSH
41822: LD_VAR 0 16
41826: PUSH
41827: LD_INT 2
41829: ARRAY
41830: PPUSH
41831: CALL_OW 111
// continue ;
41835: GO 41327
// end ; end ; r := GetDir ( tmp ) ;
41837: LD_ADDR_VAR 0 15
41841: PUSH
41842: LD_VAR 0 13
41846: PPUSH
41847: CALL_OW 254
41851: ST_TO_ADDR
// if r = 5 then
41852: LD_VAR 0 15
41856: PUSH
41857: LD_INT 5
41859: EQUAL
41860: IFFALSE 41870
// r := 0 ;
41862: LD_ADDR_VAR 0 15
41866: PUSH
41867: LD_INT 0
41869: ST_TO_ADDR
// for j = r to 5 do
41870: LD_ADDR_VAR 0 10
41874: PUSH
41875: DOUBLE
41876: LD_VAR 0 15
41880: DEC
41881: ST_TO_ADDR
41882: LD_INT 5
41884: PUSH
41885: FOR_TO
41886: IFFALSE 42000
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41888: LD_ADDR_VAR 0 11
41892: PUSH
41893: LD_VAR 0 13
41897: PPUSH
41898: CALL_OW 250
41902: PPUSH
41903: LD_VAR 0 10
41907: PPUSH
41908: LD_INT 2
41910: PPUSH
41911: CALL_OW 272
41915: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41916: LD_ADDR_VAR 0 12
41920: PUSH
41921: LD_VAR 0 13
41925: PPUSH
41926: CALL_OW 251
41930: PPUSH
41931: LD_VAR 0 10
41935: PPUSH
41936: LD_INT 2
41938: PPUSH
41939: CALL_OW 273
41943: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41944: LD_VAR 0 11
41948: PPUSH
41949: LD_VAR 0 12
41953: PPUSH
41954: CALL_OW 488
41958: PUSH
41959: LD_VAR 0 11
41963: PPUSH
41964: LD_VAR 0 12
41968: PPUSH
41969: CALL_OW 428
41973: NOT
41974: AND
41975: IFFALSE 41998
// begin ComMoveXY ( tmp , _x , _y ) ;
41977: LD_VAR 0 13
41981: PPUSH
41982: LD_VAR 0 11
41986: PPUSH
41987: LD_VAR 0 12
41991: PPUSH
41992: CALL_OW 111
// break ;
41996: GO 42000
// end ; end ;
41998: GO 41885
42000: POP
42001: POP
// end ; end ;
42002: GO 41327
42004: POP
42005: POP
// end ;
42006: LD_VAR 0 8
42010: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42011: LD_INT 0
42013: PPUSH
// result := true ;
42014: LD_ADDR_VAR 0 3
42018: PUSH
42019: LD_INT 1
42021: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42022: LD_VAR 0 2
42026: PUSH
42027: LD_INT 24
42029: DOUBLE
42030: EQUAL
42031: IFTRUE 42041
42033: LD_INT 33
42035: DOUBLE
42036: EQUAL
42037: IFTRUE 42041
42039: GO 42066
42041: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42042: LD_ADDR_VAR 0 3
42046: PUSH
42047: LD_INT 32
42049: PPUSH
42050: LD_VAR 0 1
42054: PPUSH
42055: CALL_OW 321
42059: PUSH
42060: LD_INT 2
42062: EQUAL
42063: ST_TO_ADDR
42064: GO 42382
42066: LD_INT 20
42068: DOUBLE
42069: EQUAL
42070: IFTRUE 42074
42072: GO 42099
42074: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42075: LD_ADDR_VAR 0 3
42079: PUSH
42080: LD_INT 6
42082: PPUSH
42083: LD_VAR 0 1
42087: PPUSH
42088: CALL_OW 321
42092: PUSH
42093: LD_INT 2
42095: EQUAL
42096: ST_TO_ADDR
42097: GO 42382
42099: LD_INT 22
42101: DOUBLE
42102: EQUAL
42103: IFTRUE 42113
42105: LD_INT 36
42107: DOUBLE
42108: EQUAL
42109: IFTRUE 42113
42111: GO 42138
42113: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42114: LD_ADDR_VAR 0 3
42118: PUSH
42119: LD_INT 15
42121: PPUSH
42122: LD_VAR 0 1
42126: PPUSH
42127: CALL_OW 321
42131: PUSH
42132: LD_INT 2
42134: EQUAL
42135: ST_TO_ADDR
42136: GO 42382
42138: LD_INT 30
42140: DOUBLE
42141: EQUAL
42142: IFTRUE 42146
42144: GO 42171
42146: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42147: LD_ADDR_VAR 0 3
42151: PUSH
42152: LD_INT 20
42154: PPUSH
42155: LD_VAR 0 1
42159: PPUSH
42160: CALL_OW 321
42164: PUSH
42165: LD_INT 2
42167: EQUAL
42168: ST_TO_ADDR
42169: GO 42382
42171: LD_INT 28
42173: DOUBLE
42174: EQUAL
42175: IFTRUE 42185
42177: LD_INT 21
42179: DOUBLE
42180: EQUAL
42181: IFTRUE 42185
42183: GO 42210
42185: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42186: LD_ADDR_VAR 0 3
42190: PUSH
42191: LD_INT 21
42193: PPUSH
42194: LD_VAR 0 1
42198: PPUSH
42199: CALL_OW 321
42203: PUSH
42204: LD_INT 2
42206: EQUAL
42207: ST_TO_ADDR
42208: GO 42382
42210: LD_INT 16
42212: DOUBLE
42213: EQUAL
42214: IFTRUE 42218
42216: GO 42243
42218: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42219: LD_ADDR_VAR 0 3
42223: PUSH
42224: LD_INT 84
42226: PPUSH
42227: LD_VAR 0 1
42231: PPUSH
42232: CALL_OW 321
42236: PUSH
42237: LD_INT 2
42239: EQUAL
42240: ST_TO_ADDR
42241: GO 42382
42243: LD_INT 19
42245: DOUBLE
42246: EQUAL
42247: IFTRUE 42257
42249: LD_INT 23
42251: DOUBLE
42252: EQUAL
42253: IFTRUE 42257
42255: GO 42282
42257: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42258: LD_ADDR_VAR 0 3
42262: PUSH
42263: LD_INT 83
42265: PPUSH
42266: LD_VAR 0 1
42270: PPUSH
42271: CALL_OW 321
42275: PUSH
42276: LD_INT 2
42278: EQUAL
42279: ST_TO_ADDR
42280: GO 42382
42282: LD_INT 17
42284: DOUBLE
42285: EQUAL
42286: IFTRUE 42290
42288: GO 42315
42290: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42291: LD_ADDR_VAR 0 3
42295: PUSH
42296: LD_INT 39
42298: PPUSH
42299: LD_VAR 0 1
42303: PPUSH
42304: CALL_OW 321
42308: PUSH
42309: LD_INT 2
42311: EQUAL
42312: ST_TO_ADDR
42313: GO 42382
42315: LD_INT 18
42317: DOUBLE
42318: EQUAL
42319: IFTRUE 42323
42321: GO 42348
42323: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42324: LD_ADDR_VAR 0 3
42328: PUSH
42329: LD_INT 40
42331: PPUSH
42332: LD_VAR 0 1
42336: PPUSH
42337: CALL_OW 321
42341: PUSH
42342: LD_INT 2
42344: EQUAL
42345: ST_TO_ADDR
42346: GO 42382
42348: LD_INT 27
42350: DOUBLE
42351: EQUAL
42352: IFTRUE 42356
42354: GO 42381
42356: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42357: LD_ADDR_VAR 0 3
42361: PUSH
42362: LD_INT 35
42364: PPUSH
42365: LD_VAR 0 1
42369: PPUSH
42370: CALL_OW 321
42374: PUSH
42375: LD_INT 2
42377: EQUAL
42378: ST_TO_ADDR
42379: GO 42382
42381: POP
// end ;
42382: LD_VAR 0 3
42386: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42387: LD_INT 0
42389: PPUSH
42390: PPUSH
42391: PPUSH
42392: PPUSH
42393: PPUSH
42394: PPUSH
42395: PPUSH
42396: PPUSH
42397: PPUSH
42398: PPUSH
42399: PPUSH
// result := false ;
42400: LD_ADDR_VAR 0 6
42404: PUSH
42405: LD_INT 0
42407: ST_TO_ADDR
// if btype = b_depot then
42408: LD_VAR 0 2
42412: PUSH
42413: LD_INT 0
42415: EQUAL
42416: IFFALSE 42428
// begin result := true ;
42418: LD_ADDR_VAR 0 6
42422: PUSH
42423: LD_INT 1
42425: ST_TO_ADDR
// exit ;
42426: GO 43254
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42428: LD_VAR 0 1
42432: NOT
42433: PUSH
42434: LD_VAR 0 1
42438: PPUSH
42439: CALL_OW 266
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: IN
42454: NOT
42455: OR
42456: PUSH
42457: LD_VAR 0 2
42461: NOT
42462: OR
42463: PUSH
42464: LD_VAR 0 5
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: LD_INT 3
42480: PUSH
42481: LD_INT 4
42483: PUSH
42484: LD_INT 5
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: IN
42495: NOT
42496: OR
42497: PUSH
42498: LD_VAR 0 3
42502: PPUSH
42503: LD_VAR 0 4
42507: PPUSH
42508: CALL_OW 488
42512: NOT
42513: OR
42514: IFFALSE 42518
// exit ;
42516: GO 43254
// side := GetSide ( depot ) ;
42518: LD_ADDR_VAR 0 9
42522: PUSH
42523: LD_VAR 0 1
42527: PPUSH
42528: CALL_OW 255
42532: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42533: LD_VAR 0 9
42537: PPUSH
42538: LD_VAR 0 2
42542: PPUSH
42543: CALL 42011 0 2
42547: NOT
42548: IFFALSE 42552
// exit ;
42550: GO 43254
// pom := GetBase ( depot ) ;
42552: LD_ADDR_VAR 0 10
42556: PUSH
42557: LD_VAR 0 1
42561: PPUSH
42562: CALL_OW 274
42566: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42567: LD_ADDR_VAR 0 11
42571: PUSH
42572: LD_VAR 0 2
42576: PPUSH
42577: LD_VAR 0 1
42581: PPUSH
42582: CALL_OW 248
42586: PPUSH
42587: CALL_OW 450
42591: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42592: LD_VAR 0 10
42596: PPUSH
42597: LD_INT 1
42599: PPUSH
42600: CALL_OW 275
42604: PUSH
42605: LD_VAR 0 11
42609: PUSH
42610: LD_INT 1
42612: ARRAY
42613: GREATEREQUAL
42614: PUSH
42615: LD_VAR 0 10
42619: PPUSH
42620: LD_INT 2
42622: PPUSH
42623: CALL_OW 275
42627: PUSH
42628: LD_VAR 0 11
42632: PUSH
42633: LD_INT 2
42635: ARRAY
42636: GREATEREQUAL
42637: AND
42638: PUSH
42639: LD_VAR 0 10
42643: PPUSH
42644: LD_INT 3
42646: PPUSH
42647: CALL_OW 275
42651: PUSH
42652: LD_VAR 0 11
42656: PUSH
42657: LD_INT 3
42659: ARRAY
42660: GREATEREQUAL
42661: AND
42662: NOT
42663: IFFALSE 42667
// exit ;
42665: GO 43254
// if GetBType ( depot ) = b_depot then
42667: LD_VAR 0 1
42671: PPUSH
42672: CALL_OW 266
42676: PUSH
42677: LD_INT 0
42679: EQUAL
42680: IFFALSE 42692
// dist := 28 else
42682: LD_ADDR_VAR 0 14
42686: PUSH
42687: LD_INT 28
42689: ST_TO_ADDR
42690: GO 42700
// dist := 36 ;
42692: LD_ADDR_VAR 0 14
42696: PUSH
42697: LD_INT 36
42699: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42700: LD_VAR 0 1
42704: PPUSH
42705: LD_VAR 0 3
42709: PPUSH
42710: LD_VAR 0 4
42714: PPUSH
42715: CALL_OW 297
42719: PUSH
42720: LD_VAR 0 14
42724: GREATER
42725: IFFALSE 42729
// exit ;
42727: GO 43254
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42729: LD_ADDR_VAR 0 12
42733: PUSH
42734: LD_VAR 0 2
42738: PPUSH
42739: LD_VAR 0 3
42743: PPUSH
42744: LD_VAR 0 4
42748: PPUSH
42749: LD_VAR 0 5
42753: PPUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 248
42763: PPUSH
42764: LD_INT 0
42766: PPUSH
42767: CALL 43259 0 6
42771: ST_TO_ADDR
// if not hexes then
42772: LD_VAR 0 12
42776: NOT
42777: IFFALSE 42781
// exit ;
42779: GO 43254
// hex := GetHexInfo ( x , y ) ;
42781: LD_ADDR_VAR 0 15
42785: PUSH
42786: LD_VAR 0 3
42790: PPUSH
42791: LD_VAR 0 4
42795: PPUSH
42796: CALL_OW 546
42800: ST_TO_ADDR
// if hex [ 1 ] then
42801: LD_VAR 0 15
42805: PUSH
42806: LD_INT 1
42808: ARRAY
42809: IFFALSE 42813
// exit ;
42811: GO 43254
// height := hex [ 2 ] ;
42813: LD_ADDR_VAR 0 13
42817: PUSH
42818: LD_VAR 0 15
42822: PUSH
42823: LD_INT 2
42825: ARRAY
42826: ST_TO_ADDR
// for i = 1 to hexes do
42827: LD_ADDR_VAR 0 7
42831: PUSH
42832: DOUBLE
42833: LD_INT 1
42835: DEC
42836: ST_TO_ADDR
42837: LD_VAR 0 12
42841: PUSH
42842: FOR_TO
42843: IFFALSE 43173
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42845: LD_VAR 0 12
42849: PUSH
42850: LD_VAR 0 7
42854: ARRAY
42855: PUSH
42856: LD_INT 1
42858: ARRAY
42859: PPUSH
42860: LD_VAR 0 12
42864: PUSH
42865: LD_VAR 0 7
42869: ARRAY
42870: PUSH
42871: LD_INT 2
42873: ARRAY
42874: PPUSH
42875: CALL_OW 488
42879: NOT
42880: PUSH
42881: LD_VAR 0 12
42885: PUSH
42886: LD_VAR 0 7
42890: ARRAY
42891: PUSH
42892: LD_INT 1
42894: ARRAY
42895: PPUSH
42896: LD_VAR 0 12
42900: PUSH
42901: LD_VAR 0 7
42905: ARRAY
42906: PUSH
42907: LD_INT 2
42909: ARRAY
42910: PPUSH
42911: CALL_OW 428
42915: PUSH
42916: LD_INT 0
42918: GREATER
42919: OR
42920: PUSH
42921: LD_VAR 0 12
42925: PUSH
42926: LD_VAR 0 7
42930: ARRAY
42931: PUSH
42932: LD_INT 1
42934: ARRAY
42935: PPUSH
42936: LD_VAR 0 12
42940: PUSH
42941: LD_VAR 0 7
42945: ARRAY
42946: PUSH
42947: LD_INT 2
42949: ARRAY
42950: PPUSH
42951: CALL_OW 351
42955: OR
42956: IFFALSE 42962
// exit ;
42958: POP
42959: POP
42960: GO 43254
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42962: LD_ADDR_VAR 0 8
42966: PUSH
42967: LD_VAR 0 12
42971: PUSH
42972: LD_VAR 0 7
42976: ARRAY
42977: PUSH
42978: LD_INT 1
42980: ARRAY
42981: PPUSH
42982: LD_VAR 0 12
42986: PUSH
42987: LD_VAR 0 7
42991: ARRAY
42992: PUSH
42993: LD_INT 2
42995: ARRAY
42996: PPUSH
42997: CALL_OW 546
43001: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43002: LD_VAR 0 8
43006: PUSH
43007: LD_INT 1
43009: ARRAY
43010: PUSH
43011: LD_VAR 0 8
43015: PUSH
43016: LD_INT 2
43018: ARRAY
43019: PUSH
43020: LD_VAR 0 13
43024: PUSH
43025: LD_INT 2
43027: PLUS
43028: GREATER
43029: OR
43030: PUSH
43031: LD_VAR 0 8
43035: PUSH
43036: LD_INT 2
43038: ARRAY
43039: PUSH
43040: LD_VAR 0 13
43044: PUSH
43045: LD_INT 2
43047: MINUS
43048: LESS
43049: OR
43050: PUSH
43051: LD_VAR 0 8
43055: PUSH
43056: LD_INT 3
43058: ARRAY
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: LD_INT 8
43065: PUSH
43066: LD_INT 9
43068: PUSH
43069: LD_INT 10
43071: PUSH
43072: LD_INT 11
43074: PUSH
43075: LD_INT 12
43077: PUSH
43078: LD_INT 13
43080: PUSH
43081: LD_INT 16
43083: PUSH
43084: LD_INT 17
43086: PUSH
43087: LD_INT 18
43089: PUSH
43090: LD_INT 19
43092: PUSH
43093: LD_INT 20
43095: PUSH
43096: LD_INT 21
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: IN
43114: NOT
43115: OR
43116: PUSH
43117: LD_VAR 0 8
43121: PUSH
43122: LD_INT 5
43124: ARRAY
43125: NOT
43126: OR
43127: PUSH
43128: LD_VAR 0 8
43132: PUSH
43133: LD_INT 6
43135: ARRAY
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: LD_INT 7
43145: PUSH
43146: LD_INT 9
43148: PUSH
43149: LD_INT 10
43151: PUSH
43152: LD_INT 11
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: IN
43163: NOT
43164: OR
43165: IFFALSE 43171
// exit ;
43167: POP
43168: POP
43169: GO 43254
// end ;
43171: GO 42842
43173: POP
43174: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43175: LD_VAR 0 9
43179: PPUSH
43180: LD_VAR 0 3
43184: PPUSH
43185: LD_VAR 0 4
43189: PPUSH
43190: LD_INT 20
43192: PPUSH
43193: CALL 35177 0 4
43197: PUSH
43198: LD_INT 4
43200: ARRAY
43201: IFFALSE 43205
// exit ;
43203: GO 43254
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43205: LD_VAR 0 2
43209: PUSH
43210: LD_INT 29
43212: PUSH
43213: LD_INT 30
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: IN
43220: PUSH
43221: LD_VAR 0 3
43225: PPUSH
43226: LD_VAR 0 4
43230: PPUSH
43231: LD_VAR 0 9
43235: PPUSH
43236: CALL_OW 440
43240: NOT
43241: AND
43242: IFFALSE 43246
// exit ;
43244: GO 43254
// result := true ;
43246: LD_ADDR_VAR 0 6
43250: PUSH
43251: LD_INT 1
43253: ST_TO_ADDR
// end ;
43254: LD_VAR 0 6
43258: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43259: LD_INT 0
43261: PPUSH
43262: PPUSH
43263: PPUSH
43264: PPUSH
43265: PPUSH
43266: PPUSH
43267: PPUSH
43268: PPUSH
43269: PPUSH
43270: PPUSH
43271: PPUSH
43272: PPUSH
43273: PPUSH
43274: PPUSH
43275: PPUSH
43276: PPUSH
43277: PPUSH
43278: PPUSH
43279: PPUSH
43280: PPUSH
43281: PPUSH
43282: PPUSH
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
43287: PPUSH
43288: PPUSH
43289: PPUSH
43290: PPUSH
43291: PPUSH
43292: PPUSH
43293: PPUSH
43294: PPUSH
43295: PPUSH
43296: PPUSH
43297: PPUSH
43298: PPUSH
43299: PPUSH
43300: PPUSH
43301: PPUSH
43302: PPUSH
43303: PPUSH
43304: PPUSH
43305: PPUSH
43306: PPUSH
43307: PPUSH
43308: PPUSH
43309: PPUSH
43310: PPUSH
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
43315: PPUSH
43316: PPUSH
43317: PPUSH
43318: PPUSH
// result = [ ] ;
43319: LD_ADDR_VAR 0 7
43323: PUSH
43324: EMPTY
43325: ST_TO_ADDR
// temp_list = [ ] ;
43326: LD_ADDR_VAR 0 9
43330: PUSH
43331: EMPTY
43332: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43333: LD_VAR 0 4
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: LD_INT 3
43349: PUSH
43350: LD_INT 4
43352: PUSH
43353: LD_INT 5
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: IN
43364: NOT
43365: PUSH
43366: LD_VAR 0 1
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: IN
43381: PUSH
43382: LD_VAR 0 5
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: LD_INT 3
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: IN
43401: NOT
43402: AND
43403: OR
43404: IFFALSE 43408
// exit ;
43406: GO 61799
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43408: LD_VAR 0 1
43412: PUSH
43413: LD_INT 6
43415: PUSH
43416: LD_INT 7
43418: PUSH
43419: LD_INT 8
43421: PUSH
43422: LD_INT 13
43424: PUSH
43425: LD_INT 12
43427: PUSH
43428: LD_INT 15
43430: PUSH
43431: LD_INT 11
43433: PUSH
43434: LD_INT 14
43436: PUSH
43437: LD_INT 10
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: IN
43451: IFFALSE 43461
// btype = b_lab ;
43453: LD_ADDR_VAR 0 1
43457: PUSH
43458: LD_INT 6
43460: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43461: LD_VAR 0 6
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: IN
43480: NOT
43481: PUSH
43482: LD_VAR 0 1
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: LD_INT 3
43498: PUSH
43499: LD_INT 6
43501: PUSH
43502: LD_INT 36
43504: PUSH
43505: LD_INT 4
43507: PUSH
43508: LD_INT 5
43510: PUSH
43511: LD_INT 31
43513: PUSH
43514: LD_INT 32
43516: PUSH
43517: LD_INT 33
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: IN
43533: NOT
43534: PUSH
43535: LD_VAR 0 6
43539: PUSH
43540: LD_INT 1
43542: EQUAL
43543: AND
43544: OR
43545: PUSH
43546: LD_VAR 0 1
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: LD_INT 3
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: IN
43561: NOT
43562: PUSH
43563: LD_VAR 0 6
43567: PUSH
43568: LD_INT 2
43570: EQUAL
43571: AND
43572: OR
43573: IFFALSE 43583
// mode = 0 ;
43575: LD_ADDR_VAR 0 6
43579: PUSH
43580: LD_INT 0
43582: ST_TO_ADDR
// case mode of 0 :
43583: LD_VAR 0 6
43587: PUSH
43588: LD_INT 0
43590: DOUBLE
43591: EQUAL
43592: IFTRUE 43596
43594: GO 55049
43596: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43597: LD_ADDR_VAR 0 11
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 2
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: LD_INT 2
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: LD_INT 3
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43790: LD_ADDR_VAR 0 12
43794: PUSH
43795: LD_INT 0
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 3
43947: NEG
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 3
43958: NEG
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43986: LD_ADDR_VAR 0 13
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: LD_INT 2
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: NEG
44134: PUSH
44135: LD_INT 3
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 3
44145: NEG
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 3
44157: NEG
44158: PUSH
44159: LD_INT 3
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44185: LD_ADDR_VAR 0 14
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: LD_INT 3
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 3
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44381: LD_ADDR_VAR 0 15
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 3
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 3
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44574: LD_ADDR_VAR 0 16
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: LD_INT 2
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 2
44697: NEG
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 3
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 3
44731: PUSH
44732: LD_INT 3
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 3
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44767: LD_ADDR_VAR 0 17
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 2
44852: NEG
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: NEG
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44997: LD_ADDR_VAR 0 18
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: LD_INT 2
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: NEG
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45227: LD_ADDR_VAR 0 19
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 2
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 2
45403: NEG
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: NEG
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45457: LD_ADDR_VAR 0 20
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 2
45633: NEG
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45687: LD_ADDR_VAR 0 21
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 2
45863: NEG
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: NEG
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45917: LD_ADDR_VAR 0 22
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: NEG
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46147: LD_ADDR_VAR 0 23
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: NEG
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: LD_INT 3
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: LD_INT 3
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46427: LD_ADDR_VAR 0 24
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 3
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 3
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46703: LD_ADDR_VAR 0 25
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 3
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46977: LD_ADDR_VAR 0 26
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: LD_INT 3
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 3
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47253: LD_ADDR_VAR 0 27
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 3
47486: NEG
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 3
47498: NEG
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47533: LD_ADDR_VAR 0 28
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 2
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: LD_INT 3
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 3
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 3
47780: NEG
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47815: LD_ADDR_VAR 0 29
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: NEG
48006: PUSH
48007: LD_INT 3
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 3
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 3
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 3
48059: NEG
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48094: LD_ADDR_VAR 0 30
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 3
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 2
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 3
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: LD_INT 3
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 3
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48372: LD_ADDR_VAR 0 31
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: LD_INT 3
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: NEG
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48650: LD_ADDR_VAR 0 32
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: LD_INT 3
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 3
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 3
48893: NEG
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48928: LD_ADDR_VAR 0 33
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: LD_INT 2
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: LD_INT 3
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 3
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: LD_INT 3
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 3
49172: NEG
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49207: LD_ADDR_VAR 0 34
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 3
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: LD_INT 3
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: NEG
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49487: LD_ADDR_VAR 0 35
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49599: LD_ADDR_VAR 0 36
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49711: LD_ADDR_VAR 0 37
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49823: LD_ADDR_VAR 0 38
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49935: LD_ADDR_VAR 0 39
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50047: LD_ADDR_VAR 0 40
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50159: LD_ADDR_VAR 0 41
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: NEG
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: NEG
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: LD_INT 3
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 3
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 3
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: LD_INT 3
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 3
50433: NEG
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 3
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 3
50456: NEG
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50509: LD_ADDR_VAR 0 42
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: NEG
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: LD_INT 3
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: LD_INT 3
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 3
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 3
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 3
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 3
50806: NEG
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 3
50818: NEG
50819: PUSH
50820: LD_INT 3
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50859: LD_ADDR_VAR 0 43
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 3
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: LD_INT 2
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 3
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 3
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: LD_INT 2
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 3
51155: NEG
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 3
51166: NEG
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51207: LD_ADDR_VAR 0 44
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 3
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 3
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: PUSH
51451: LD_INT 3
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 3
51504: NEG
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: NEG
51517: PUSH
51518: LD_INT 3
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51557: LD_ADDR_VAR 0 45
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: LD_INT 3
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 3
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 3
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 3
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: LD_INT 3
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 3
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 3
51854: NEG
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 3
51866: NEG
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51907: LD_ADDR_VAR 0 46
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: NEG
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 3
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 3
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 3
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 3
52203: NEG
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 3
52214: NEG
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52255: LD_ADDR_VAR 0 47
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: LD_INT 2
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 2
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52406: LD_ADDR_VAR 0 48
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52553: LD_ADDR_VAR 0 49
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52697: LD_ADDR_VAR 0 50
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 2
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52841: LD_ADDR_VAR 0 51
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52988: LD_ADDR_VAR 0 52
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53139: LD_ADDR_VAR 0 53
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53369: LD_ADDR_VAR 0 54
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53599: LD_ADDR_VAR 0 55
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: NEG
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53829: LD_ADDR_VAR 0 56
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54059: LD_ADDR_VAR 0 57
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: NEG
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: NEG
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54289: LD_ADDR_VAR 0 58
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54519: LD_ADDR_VAR 0 59
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54607: LD_ADDR_VAR 0 60
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54695: LD_ADDR_VAR 0 61
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54783: LD_ADDR_VAR 0 62
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54871: LD_ADDR_VAR 0 63
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54959: LD_ADDR_VAR 0 64
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// end ; 1 :
55047: GO 60944
55049: LD_INT 1
55051: DOUBLE
55052: EQUAL
55053: IFTRUE 55057
55055: GO 57680
55057: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55058: LD_ADDR_VAR 0 11
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 3
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55102: LD_ADDR_VAR 0 12
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 3
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 3
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: LIST
55142: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55143: LD_ADDR_VAR 0 13
55147: PUSH
55148: LD_INT 3
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: PUSH
55161: LD_INT 3
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: LD_INT 3
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: LIST
55182: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55183: LD_ADDR_VAR 0 14
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: LD_INT 2
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55224: LD_ADDR_VAR 0 15
55228: PUSH
55229: LD_INT 2
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 3
55253: NEG
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: LIST
55267: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55268: LD_ADDR_VAR 0 16
55272: PUSH
55273: LD_INT 2
55275: NEG
55276: PUSH
55277: LD_INT 3
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 3
55287: NEG
55288: PUSH
55289: LD_INT 2
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: NEG
55300: PUSH
55301: LD_INT 3
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55314: LD_ADDR_VAR 0 17
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: LIST
55357: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55358: LD_ADDR_VAR 0 18
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 3
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 3
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: LIST
55398: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55399: LD_ADDR_VAR 0 19
55403: PUSH
55404: LD_INT 3
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 3
55416: PUSH
55417: LD_INT 3
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: LD_INT 3
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55439: LD_ADDR_VAR 0 20
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 3
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 3
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55480: LD_ADDR_VAR 0 21
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 3
55498: NEG
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 3
55509: NEG
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55524: LD_ADDR_VAR 0 22
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 3
55543: NEG
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: NEG
55556: PUSH
55557: LD_INT 3
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: LIST
55569: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55570: LD_ADDR_VAR 0 23
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 3
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 4
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 3
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55614: LD_ADDR_VAR 0 24
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 4
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55655: LD_ADDR_VAR 0 25
55659: PUSH
55660: LD_INT 3
55662: PUSH
55663: LD_INT 3
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 4
55672: PUSH
55673: LD_INT 3
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: LD_INT 4
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: LIST
55694: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55695: LD_ADDR_VAR 0 26
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 3
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55736: LD_ADDR_VAR 0 27
55740: PUSH
55741: LD_INT 3
55743: NEG
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: NEG
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 4
55765: NEG
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: LIST
55779: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55780: LD_ADDR_VAR 0 28
55784: PUSH
55785: LD_INT 3
55787: NEG
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: NEG
55800: PUSH
55801: LD_INT 4
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 4
55811: NEG
55812: PUSH
55813: LD_INT 3
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: LIST
55825: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55826: LD_ADDR_VAR 0 29
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 3
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 3
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 2
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 4
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 4
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: LD_INT 3
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 5
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 5
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 4
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 6
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 6
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 5
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55981: LD_ADDR_VAR 0 30
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 3
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 3
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 3
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 4
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 4
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 4
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 5
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 5
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 5
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 6
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 6
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56124: LD_ADDR_VAR 0 31
56128: PUSH
56129: LD_INT 3
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: PUSH
56142: LD_INT 3
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: LD_INT 3
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 4
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 4
56171: PUSH
56172: LD_INT 4
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: LD_INT 4
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 5
56191: PUSH
56192: LD_INT 4
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 5
56201: PUSH
56202: LD_INT 5
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 4
56211: PUSH
56212: LD_INT 5
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 6
56221: PUSH
56222: LD_INT 5
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 6
56231: PUSH
56232: LD_INT 6
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 5
56241: PUSH
56242: LD_INT 6
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56263: LD_ADDR_VAR 0 32
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 3
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 3
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 4
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 4
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 5
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 5
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: LD_INT 4
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 6
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 6
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 5
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56406: LD_ADDR_VAR 0 33
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 3
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 3
56447: NEG
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 4
56458: NEG
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 4
56469: NEG
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 4
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 5
56492: NEG
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 5
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 5
56515: NEG
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 6
56526: NEG
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 6
56537: NEG
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56561: LD_ADDR_VAR 0 34
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: LD_INT 3
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 3
56592: NEG
56593: PUSH
56594: LD_INT 3
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 3
56604: NEG
56605: PUSH
56606: LD_INT 4
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 4
56616: NEG
56617: PUSH
56618: LD_INT 3
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 4
56628: NEG
56629: PUSH
56630: LD_INT 4
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 4
56640: NEG
56641: PUSH
56642: LD_INT 5
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 5
56652: NEG
56653: PUSH
56654: LD_INT 4
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 5
56664: NEG
56665: PUSH
56666: LD_INT 5
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 5
56676: NEG
56677: PUSH
56678: LD_INT 6
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 6
56688: NEG
56689: PUSH
56690: LD_INT 5
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 6
56700: NEG
56701: PUSH
56702: LD_INT 6
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56724: LD_ADDR_VAR 0 41
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 2
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 3
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56768: LD_ADDR_VAR 0 42
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 3
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: LIST
56808: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56809: LD_ADDR_VAR 0 43
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: LD_INT 3
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: LIST
56848: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56849: LD_ADDR_VAR 0 44
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: LIST
56889: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56890: LD_ADDR_VAR 0 45
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: NEG
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: LIST
56933: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56934: LD_ADDR_VAR 0 46
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 2
56953: NEG
56954: PUSH
56955: LD_INT 3
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56980: LD_ADDR_VAR 0 47
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57013: LD_ADDR_VAR 0 48
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57044: LD_ADDR_VAR 0 49
57048: PUSH
57049: LD_INT 3
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57073: LD_ADDR_VAR 0 50
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: LD_INT 3
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: LD_INT 3
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57102: LD_ADDR_VAR 0 51
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57133: LD_ADDR_VAR 0 52
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 3
57152: NEG
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57166: LD_ADDR_VAR 0 53
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 3
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: LIST
57209: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57210: LD_ADDR_VAR 0 54
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 3
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: LIST
57250: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57251: LD_ADDR_VAR 0 55
57255: PUSH
57256: LD_INT 3
57258: PUSH
57259: LD_INT 2
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 3
57268: PUSH
57269: LD_INT 3
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: LIST
57290: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57291: LD_ADDR_VAR 0 56
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: LD_INT 3
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 3
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57332: LD_ADDR_VAR 0 57
57336: PUSH
57337: LD_INT 2
57339: NEG
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 3
57350: NEG
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 3
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: LIST
57375: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57376: LD_ADDR_VAR 0 58
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: LD_INT 3
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 3
57395: NEG
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57422: LD_ADDR_VAR 0 59
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: LIST
57465: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57466: LD_ADDR_VAR 0 60
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: LIST
57506: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57507: LD_ADDR_VAR 0 61
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: LD_INT 2
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: LIST
57546: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57547: LD_ADDR_VAR 0 62
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57588: LD_ADDR_VAR 0 63
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57632: LD_ADDR_VAR 0 64
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// end ; 2 :
57678: GO 60944
57680: LD_INT 2
57682: DOUBLE
57683: EQUAL
57684: IFTRUE 57688
57686: GO 60943
57688: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57689: LD_ADDR_VAR 0 29
57693: PUSH
57694: LD_INT 4
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 4
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 5
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 5
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 4
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 3
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 3
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 3
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 5
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 4
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 4
57819: PUSH
57820: LD_INT 4
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: LD_INT 4
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 4
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: LD_INT 4
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: LD_INT 4
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: LD_INT 3
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 4
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 5
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 5
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 4
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 3
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: LD_INT 5
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 2
57961: NEG
57962: PUSH
57963: LD_INT 3
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 3
57972: NEG
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 3
57983: NEG
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 3
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 4
58028: NEG
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 4
58039: NEG
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 4
58051: NEG
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 4
58074: NEG
58075: PUSH
58076: LD_INT 4
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 4
58086: NEG
58087: PUSH
58088: LD_INT 5
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: LD_INT 4
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 3
58110: NEG
58111: PUSH
58112: LD_INT 3
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 4
58122: NEG
58123: PUSH
58124: LD_INT 3
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 5
58134: NEG
58135: PUSH
58136: LD_INT 4
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 5
58146: NEG
58147: PUSH
58148: LD_INT 5
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 3
58158: NEG
58159: PUSH
58160: LD_INT 5
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 5
58170: NEG
58171: PUSH
58172: LD_INT 3
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58227: LD_ADDR_VAR 0 30
58231: PUSH
58232: LD_INT 4
58234: PUSH
58235: LD_INT 4
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 4
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 5
58254: PUSH
58255: LD_INT 4
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 5
58264: PUSH
58265: LD_INT 5
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 4
58274: PUSH
58275: LD_INT 5
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 3
58284: PUSH
58285: LD_INT 4
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 3
58294: PUSH
58295: LD_INT 3
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 5
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 3
58314: PUSH
58315: LD_INT 5
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: LD_INT 3
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 3
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: LD_INT 4
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 4
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: LD_INT 3
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: LD_INT 4
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 4
58417: NEG
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 4
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 3
58440: NEG
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 3
58451: NEG
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 4
58462: NEG
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 5
58473: NEG
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 5
58484: NEG
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 5
58496: NEG
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 3
58508: NEG
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 3
58519: NEG
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: LD_INT 4
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 2
58543: NEG
58544: PUSH
58545: LD_INT 3
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 3
58567: NEG
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 4
58579: NEG
58580: PUSH
58581: LD_INT 3
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 4
58591: NEG
58592: PUSH
58593: LD_INT 4
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: LD_INT 4
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 4
58615: NEG
58616: PUSH
58617: LD_INT 2
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: LD_INT 4
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: LD_INT 5
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: LD_INT 4
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: LD_INT 3
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 3
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: LD_INT 4
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 5
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: LD_INT 5
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58774: LD_ADDR_VAR 0 31
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: LD_INT 4
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 3
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: LD_INT 4
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: LD_INT 5
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 5
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: LD_INT 4
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: LD_INT 5
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: LD_INT 3
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 3
58885: NEG
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 4
58930: NEG
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 4
58941: NEG
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 4
58953: NEG
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 4
58976: NEG
58977: PUSH
58978: LD_INT 4
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 4
58988: NEG
58989: PUSH
58990: LD_INT 5
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 3
59000: NEG
59001: PUSH
59002: LD_INT 4
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 3
59012: NEG
59013: PUSH
59014: LD_INT 3
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 4
59024: NEG
59025: PUSH
59026: LD_INT 3
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 5
59036: NEG
59037: PUSH
59038: LD_INT 4
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 5
59048: NEG
59049: PUSH
59050: LD_INT 5
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: LD_INT 5
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 5
59072: NEG
59073: PUSH
59074: LD_INT 3
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 3
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 4
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: LD_INT 3
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: LD_INT 3
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: LD_INT 4
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: LD_INT 4
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 4
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 4
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 5
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 5
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 4
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 3
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 5
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59324: LD_ADDR_VAR 0 32
59328: PUSH
59329: LD_INT 4
59331: NEG
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 4
59342: NEG
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 3
59354: NEG
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 3
59365: NEG
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 4
59376: NEG
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 5
59387: NEG
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 5
59398: NEG
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 5
59410: NEG
59411: PUSH
59412: LD_INT 2
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: NEG
59423: PUSH
59424: LD_INT 2
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: LD_INT 3
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 3
59445: NEG
59446: PUSH
59447: LD_INT 4
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 4
59493: NEG
59494: PUSH
59495: LD_INT 3
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 4
59505: NEG
59506: PUSH
59507: LD_INT 4
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: LD_INT 4
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 4
59529: NEG
59530: PUSH
59531: LD_INT 2
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: LD_INT 4
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 5
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: LD_INT 4
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 3
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 3
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 4
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 5
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: LD_INT 3
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: LD_INT 5
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 4
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 4
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 3
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 4
59726: PUSH
59727: LD_INT 2
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 4
59736: PUSH
59737: LD_INT 4
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 4
59746: PUSH
59747: LD_INT 3
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 5
59756: PUSH
59757: LD_INT 4
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 5
59766: PUSH
59767: LD_INT 5
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 4
59776: PUSH
59777: LD_INT 5
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 3
59786: PUSH
59787: LD_INT 4
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 3
59796: PUSH
59797: LD_INT 3
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 5
59806: PUSH
59807: LD_INT 3
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: PUSH
59817: LD_INT 5
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59871: LD_ADDR_VAR 0 33
59875: PUSH
59876: LD_INT 4
59878: NEG
59879: PUSH
59880: LD_INT 4
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 4
59890: NEG
59891: PUSH
59892: LD_INT 5
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 3
59902: NEG
59903: PUSH
59904: LD_INT 4
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: NEG
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 4
59926: NEG
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 5
59938: NEG
59939: PUSH
59940: LD_INT 4
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 5
59950: NEG
59951: PUSH
59952: LD_INT 5
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 3
59962: NEG
59963: PUSH
59964: LD_INT 5
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 5
59974: NEG
59975: PUSH
59976: LD_INT 3
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: LD_INT 4
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: LD_INT 3
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 2
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 3
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: LD_INT 4
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 2
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 2
60076: NEG
60077: PUSH
60078: LD_INT 4
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 4
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 4
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 5
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 5
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 4
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 3
60160: PUSH
60161: LD_INT 2
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 5
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 3
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 4
60201: PUSH
60202: LD_INT 3
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 4
60211: PUSH
60212: LD_INT 4
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 3
60221: PUSH
60222: LD_INT 4
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 2
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 4
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: LD_INT 4
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: LD_INT 4
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 1
60291: PUSH
60292: LD_INT 4
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: PUSH
60302: LD_INT 5
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: LD_INT 5
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: LD_INT 4
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: PUSH
60344: LD_INT 5
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: LD_INT 3
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60409: LD_ADDR_VAR 0 34
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 4
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: LD_INT 5
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: LD_INT 4
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 3
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: LD_INT 4
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: LD_INT 5
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: LD_INT 5
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 3
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 4
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 4
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 3
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 2
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 2
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: LD_INT 2
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 4
60601: PUSH
60602: LD_INT 2
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 4
60611: PUSH
60612: LD_INT 4
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 4
60621: PUSH
60622: LD_INT 3
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 5
60631: PUSH
60632: LD_INT 4
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 5
60641: PUSH
60642: LD_INT 5
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 4
60651: PUSH
60652: LD_INT 5
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 3
60661: PUSH
60662: LD_INT 4
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 3
60671: PUSH
60672: LD_INT 3
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 5
60681: PUSH
60682: LD_INT 3
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 3
60691: PUSH
60692: LD_INT 5
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: LD_INT 3
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: LD_INT 3
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: LD_INT 4
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: LD_INT 4
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: LD_INT 3
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 2
60773: PUSH
60774: LD_INT 4
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: NEG
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 4
60794: NEG
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 4
60805: NEG
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 3
60817: NEG
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: NEG
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 4
60839: NEG
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 5
60850: NEG
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 5
60861: NEG
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 5
60873: NEG
60874: PUSH
60875: LD_INT 2
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 3
60885: NEG
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: ST_TO_ADDR
// end ; end ;
60941: GO 60944
60943: POP
// case btype of b_depot , b_warehouse :
60944: LD_VAR 0 1
60948: PUSH
60949: LD_INT 0
60951: DOUBLE
60952: EQUAL
60953: IFTRUE 60963
60955: LD_INT 1
60957: DOUBLE
60958: EQUAL
60959: IFTRUE 60963
60961: GO 61164
60963: POP
// case nation of nation_american :
60964: LD_VAR 0 5
60968: PUSH
60969: LD_INT 1
60971: DOUBLE
60972: EQUAL
60973: IFTRUE 60977
60975: GO 61033
60977: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60978: LD_ADDR_VAR 0 9
60982: PUSH
60983: LD_VAR 0 11
60987: PUSH
60988: LD_VAR 0 12
60992: PUSH
60993: LD_VAR 0 13
60997: PUSH
60998: LD_VAR 0 14
61002: PUSH
61003: LD_VAR 0 15
61007: PUSH
61008: LD_VAR 0 16
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: PUSH
61021: LD_VAR 0 4
61025: PUSH
61026: LD_INT 1
61028: PLUS
61029: ARRAY
61030: ST_TO_ADDR
61031: GO 61162
61033: LD_INT 2
61035: DOUBLE
61036: EQUAL
61037: IFTRUE 61041
61039: GO 61097
61041: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61042: LD_ADDR_VAR 0 9
61046: PUSH
61047: LD_VAR 0 17
61051: PUSH
61052: LD_VAR 0 18
61056: PUSH
61057: LD_VAR 0 19
61061: PUSH
61062: LD_VAR 0 20
61066: PUSH
61067: LD_VAR 0 21
61071: PUSH
61072: LD_VAR 0 22
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: PUSH
61085: LD_VAR 0 4
61089: PUSH
61090: LD_INT 1
61092: PLUS
61093: ARRAY
61094: ST_TO_ADDR
61095: GO 61162
61097: LD_INT 3
61099: DOUBLE
61100: EQUAL
61101: IFTRUE 61105
61103: GO 61161
61105: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61106: LD_ADDR_VAR 0 9
61110: PUSH
61111: LD_VAR 0 23
61115: PUSH
61116: LD_VAR 0 24
61120: PUSH
61121: LD_VAR 0 25
61125: PUSH
61126: LD_VAR 0 26
61130: PUSH
61131: LD_VAR 0 27
61135: PUSH
61136: LD_VAR 0 28
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: PUSH
61149: LD_VAR 0 4
61153: PUSH
61154: LD_INT 1
61156: PLUS
61157: ARRAY
61158: ST_TO_ADDR
61159: GO 61162
61161: POP
61162: GO 61717
61164: LD_INT 2
61166: DOUBLE
61167: EQUAL
61168: IFTRUE 61178
61170: LD_INT 3
61172: DOUBLE
61173: EQUAL
61174: IFTRUE 61178
61176: GO 61234
61178: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61179: LD_ADDR_VAR 0 9
61183: PUSH
61184: LD_VAR 0 29
61188: PUSH
61189: LD_VAR 0 30
61193: PUSH
61194: LD_VAR 0 31
61198: PUSH
61199: LD_VAR 0 32
61203: PUSH
61204: LD_VAR 0 33
61208: PUSH
61209: LD_VAR 0 34
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: PUSH
61222: LD_VAR 0 4
61226: PUSH
61227: LD_INT 1
61229: PLUS
61230: ARRAY
61231: ST_TO_ADDR
61232: GO 61717
61234: LD_INT 16
61236: DOUBLE
61237: EQUAL
61238: IFTRUE 61296
61240: LD_INT 17
61242: DOUBLE
61243: EQUAL
61244: IFTRUE 61296
61246: LD_INT 18
61248: DOUBLE
61249: EQUAL
61250: IFTRUE 61296
61252: LD_INT 19
61254: DOUBLE
61255: EQUAL
61256: IFTRUE 61296
61258: LD_INT 22
61260: DOUBLE
61261: EQUAL
61262: IFTRUE 61296
61264: LD_INT 20
61266: DOUBLE
61267: EQUAL
61268: IFTRUE 61296
61270: LD_INT 21
61272: DOUBLE
61273: EQUAL
61274: IFTRUE 61296
61276: LD_INT 23
61278: DOUBLE
61279: EQUAL
61280: IFTRUE 61296
61282: LD_INT 24
61284: DOUBLE
61285: EQUAL
61286: IFTRUE 61296
61288: LD_INT 25
61290: DOUBLE
61291: EQUAL
61292: IFTRUE 61296
61294: GO 61352
61296: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61297: LD_ADDR_VAR 0 9
61301: PUSH
61302: LD_VAR 0 35
61306: PUSH
61307: LD_VAR 0 36
61311: PUSH
61312: LD_VAR 0 37
61316: PUSH
61317: LD_VAR 0 38
61321: PUSH
61322: LD_VAR 0 39
61326: PUSH
61327: LD_VAR 0 40
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: PUSH
61340: LD_VAR 0 4
61344: PUSH
61345: LD_INT 1
61347: PLUS
61348: ARRAY
61349: ST_TO_ADDR
61350: GO 61717
61352: LD_INT 6
61354: DOUBLE
61355: EQUAL
61356: IFTRUE 61408
61358: LD_INT 7
61360: DOUBLE
61361: EQUAL
61362: IFTRUE 61408
61364: LD_INT 8
61366: DOUBLE
61367: EQUAL
61368: IFTRUE 61408
61370: LD_INT 13
61372: DOUBLE
61373: EQUAL
61374: IFTRUE 61408
61376: LD_INT 12
61378: DOUBLE
61379: EQUAL
61380: IFTRUE 61408
61382: LD_INT 15
61384: DOUBLE
61385: EQUAL
61386: IFTRUE 61408
61388: LD_INT 11
61390: DOUBLE
61391: EQUAL
61392: IFTRUE 61408
61394: LD_INT 14
61396: DOUBLE
61397: EQUAL
61398: IFTRUE 61408
61400: LD_INT 10
61402: DOUBLE
61403: EQUAL
61404: IFTRUE 61408
61406: GO 61464
61408: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61409: LD_ADDR_VAR 0 9
61413: PUSH
61414: LD_VAR 0 41
61418: PUSH
61419: LD_VAR 0 42
61423: PUSH
61424: LD_VAR 0 43
61428: PUSH
61429: LD_VAR 0 44
61433: PUSH
61434: LD_VAR 0 45
61438: PUSH
61439: LD_VAR 0 46
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: PUSH
61452: LD_VAR 0 4
61456: PUSH
61457: LD_INT 1
61459: PLUS
61460: ARRAY
61461: ST_TO_ADDR
61462: GO 61717
61464: LD_INT 36
61466: DOUBLE
61467: EQUAL
61468: IFTRUE 61472
61470: GO 61528
61472: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61473: LD_ADDR_VAR 0 9
61477: PUSH
61478: LD_VAR 0 47
61482: PUSH
61483: LD_VAR 0 48
61487: PUSH
61488: LD_VAR 0 49
61492: PUSH
61493: LD_VAR 0 50
61497: PUSH
61498: LD_VAR 0 51
61502: PUSH
61503: LD_VAR 0 52
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: PUSH
61516: LD_VAR 0 4
61520: PUSH
61521: LD_INT 1
61523: PLUS
61524: ARRAY
61525: ST_TO_ADDR
61526: GO 61717
61528: LD_INT 4
61530: DOUBLE
61531: EQUAL
61532: IFTRUE 61554
61534: LD_INT 5
61536: DOUBLE
61537: EQUAL
61538: IFTRUE 61554
61540: LD_INT 34
61542: DOUBLE
61543: EQUAL
61544: IFTRUE 61554
61546: LD_INT 37
61548: DOUBLE
61549: EQUAL
61550: IFTRUE 61554
61552: GO 61610
61554: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61555: LD_ADDR_VAR 0 9
61559: PUSH
61560: LD_VAR 0 53
61564: PUSH
61565: LD_VAR 0 54
61569: PUSH
61570: LD_VAR 0 55
61574: PUSH
61575: LD_VAR 0 56
61579: PUSH
61580: LD_VAR 0 57
61584: PUSH
61585: LD_VAR 0 58
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: PUSH
61598: LD_VAR 0 4
61602: PUSH
61603: LD_INT 1
61605: PLUS
61606: ARRAY
61607: ST_TO_ADDR
61608: GO 61717
61610: LD_INT 31
61612: DOUBLE
61613: EQUAL
61614: IFTRUE 61660
61616: LD_INT 32
61618: DOUBLE
61619: EQUAL
61620: IFTRUE 61660
61622: LD_INT 33
61624: DOUBLE
61625: EQUAL
61626: IFTRUE 61660
61628: LD_INT 27
61630: DOUBLE
61631: EQUAL
61632: IFTRUE 61660
61634: LD_INT 26
61636: DOUBLE
61637: EQUAL
61638: IFTRUE 61660
61640: LD_INT 28
61642: DOUBLE
61643: EQUAL
61644: IFTRUE 61660
61646: LD_INT 29
61648: DOUBLE
61649: EQUAL
61650: IFTRUE 61660
61652: LD_INT 30
61654: DOUBLE
61655: EQUAL
61656: IFTRUE 61660
61658: GO 61716
61660: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61661: LD_ADDR_VAR 0 9
61665: PUSH
61666: LD_VAR 0 59
61670: PUSH
61671: LD_VAR 0 60
61675: PUSH
61676: LD_VAR 0 61
61680: PUSH
61681: LD_VAR 0 62
61685: PUSH
61686: LD_VAR 0 63
61690: PUSH
61691: LD_VAR 0 64
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: PUSH
61704: LD_VAR 0 4
61708: PUSH
61709: LD_INT 1
61711: PLUS
61712: ARRAY
61713: ST_TO_ADDR
61714: GO 61717
61716: POP
// temp_list2 = [ ] ;
61717: LD_ADDR_VAR 0 10
61721: PUSH
61722: EMPTY
61723: ST_TO_ADDR
// for i in temp_list do
61724: LD_ADDR_VAR 0 8
61728: PUSH
61729: LD_VAR 0 9
61733: PUSH
61734: FOR_IN
61735: IFFALSE 61787
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61737: LD_ADDR_VAR 0 10
61741: PUSH
61742: LD_VAR 0 10
61746: PUSH
61747: LD_VAR 0 8
61751: PUSH
61752: LD_INT 1
61754: ARRAY
61755: PUSH
61756: LD_VAR 0 2
61760: PLUS
61761: PUSH
61762: LD_VAR 0 8
61766: PUSH
61767: LD_INT 2
61769: ARRAY
61770: PUSH
61771: LD_VAR 0 3
61775: PLUS
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: EMPTY
61782: LIST
61783: ADD
61784: ST_TO_ADDR
61785: GO 61734
61787: POP
61788: POP
// result = temp_list2 ;
61789: LD_ADDR_VAR 0 7
61793: PUSH
61794: LD_VAR 0 10
61798: ST_TO_ADDR
// end ;
61799: LD_VAR 0 7
61803: RET
// export function EnemyInRange ( unit , dist ) ; begin
61804: LD_INT 0
61806: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61807: LD_ADDR_VAR 0 3
61811: PUSH
61812: LD_VAR 0 1
61816: PPUSH
61817: CALL_OW 255
61821: PPUSH
61822: LD_VAR 0 1
61826: PPUSH
61827: CALL_OW 250
61831: PPUSH
61832: LD_VAR 0 1
61836: PPUSH
61837: CALL_OW 251
61841: PPUSH
61842: LD_VAR 0 2
61846: PPUSH
61847: CALL 35177 0 4
61851: PUSH
61852: LD_INT 4
61854: ARRAY
61855: ST_TO_ADDR
// end ;
61856: LD_VAR 0 3
61860: RET
// export function PlayerSeeMe ( unit ) ; begin
61861: LD_INT 0
61863: PPUSH
// result := See ( your_side , unit ) ;
61864: LD_ADDR_VAR 0 2
61868: PUSH
61869: LD_OWVAR 2
61873: PPUSH
61874: LD_VAR 0 1
61878: PPUSH
61879: CALL_OW 292
61883: ST_TO_ADDR
// end ;
61884: LD_VAR 0 2
61888: RET
// export function ReverseDir ( unit ) ; begin
61889: LD_INT 0
61891: PPUSH
// if not unit then
61892: LD_VAR 0 1
61896: NOT
61897: IFFALSE 61901
// exit ;
61899: GO 61924
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61901: LD_ADDR_VAR 0 2
61905: PUSH
61906: LD_VAR 0 1
61910: PPUSH
61911: CALL_OW 254
61915: PUSH
61916: LD_INT 3
61918: PLUS
61919: PUSH
61920: LD_INT 6
61922: MOD
61923: ST_TO_ADDR
// end ;
61924: LD_VAR 0 2
61928: RET
// export function ReverseArray ( array ) ; var i ; begin
61929: LD_INT 0
61931: PPUSH
61932: PPUSH
// if not array then
61933: LD_VAR 0 1
61937: NOT
61938: IFFALSE 61942
// exit ;
61940: GO 61997
// result := [ ] ;
61942: LD_ADDR_VAR 0 2
61946: PUSH
61947: EMPTY
61948: ST_TO_ADDR
// for i := array downto 1 do
61949: LD_ADDR_VAR 0 3
61953: PUSH
61954: DOUBLE
61955: LD_VAR 0 1
61959: INC
61960: ST_TO_ADDR
61961: LD_INT 1
61963: PUSH
61964: FOR_DOWNTO
61965: IFFALSE 61995
// result := Join ( result , array [ i ] ) ;
61967: LD_ADDR_VAR 0 2
61971: PUSH
61972: LD_VAR 0 2
61976: PPUSH
61977: LD_VAR 0 1
61981: PUSH
61982: LD_VAR 0 3
61986: ARRAY
61987: PPUSH
61988: CALL 66653 0 2
61992: ST_TO_ADDR
61993: GO 61964
61995: POP
61996: POP
// end ;
61997: LD_VAR 0 2
62001: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62002: LD_INT 0
62004: PPUSH
62005: PPUSH
62006: PPUSH
62007: PPUSH
62008: PPUSH
62009: PPUSH
// if not unit or not hexes then
62010: LD_VAR 0 1
62014: NOT
62015: PUSH
62016: LD_VAR 0 2
62020: NOT
62021: OR
62022: IFFALSE 62026
// exit ;
62024: GO 62149
// dist := 9999 ;
62026: LD_ADDR_VAR 0 5
62030: PUSH
62031: LD_INT 9999
62033: ST_TO_ADDR
// for i = 1 to hexes do
62034: LD_ADDR_VAR 0 4
62038: PUSH
62039: DOUBLE
62040: LD_INT 1
62042: DEC
62043: ST_TO_ADDR
62044: LD_VAR 0 2
62048: PUSH
62049: FOR_TO
62050: IFFALSE 62137
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62052: LD_ADDR_VAR 0 6
62056: PUSH
62057: LD_VAR 0 1
62061: PPUSH
62062: LD_VAR 0 2
62066: PUSH
62067: LD_VAR 0 4
62071: ARRAY
62072: PUSH
62073: LD_INT 1
62075: ARRAY
62076: PPUSH
62077: LD_VAR 0 2
62081: PUSH
62082: LD_VAR 0 4
62086: ARRAY
62087: PUSH
62088: LD_INT 2
62090: ARRAY
62091: PPUSH
62092: CALL_OW 297
62096: ST_TO_ADDR
// if tdist < dist then
62097: LD_VAR 0 6
62101: PUSH
62102: LD_VAR 0 5
62106: LESS
62107: IFFALSE 62135
// begin hex := hexes [ i ] ;
62109: LD_ADDR_VAR 0 8
62113: PUSH
62114: LD_VAR 0 2
62118: PUSH
62119: LD_VAR 0 4
62123: ARRAY
62124: ST_TO_ADDR
// dist := tdist ;
62125: LD_ADDR_VAR 0 5
62129: PUSH
62130: LD_VAR 0 6
62134: ST_TO_ADDR
// end ; end ;
62135: GO 62049
62137: POP
62138: POP
// result := hex ;
62139: LD_ADDR_VAR 0 3
62143: PUSH
62144: LD_VAR 0 8
62148: ST_TO_ADDR
// end ;
62149: LD_VAR 0 3
62153: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62154: LD_INT 0
62156: PPUSH
62157: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62158: LD_VAR 0 1
62162: NOT
62163: PUSH
62164: LD_VAR 0 1
62168: PUSH
62169: LD_INT 21
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 23
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PPUSH
62193: CALL_OW 69
62197: IN
62198: NOT
62199: OR
62200: IFFALSE 62204
// exit ;
62202: GO 62251
// for i = 1 to 3 do
62204: LD_ADDR_VAR 0 3
62208: PUSH
62209: DOUBLE
62210: LD_INT 1
62212: DEC
62213: ST_TO_ADDR
62214: LD_INT 3
62216: PUSH
62217: FOR_TO
62218: IFFALSE 62249
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62220: LD_VAR 0 1
62224: PPUSH
62225: CALL_OW 250
62229: PPUSH
62230: LD_VAR 0 1
62234: PPUSH
62235: CALL_OW 251
62239: PPUSH
62240: LD_INT 1
62242: PPUSH
62243: CALL_OW 453
62247: GO 62217
62249: POP
62250: POP
// end ;
62251: LD_VAR 0 2
62255: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62256: LD_INT 0
62258: PPUSH
62259: PPUSH
62260: PPUSH
62261: PPUSH
62262: PPUSH
62263: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62264: LD_VAR 0 1
62268: NOT
62269: PUSH
62270: LD_VAR 0 2
62274: NOT
62275: OR
62276: PUSH
62277: LD_VAR 0 1
62281: PPUSH
62282: CALL_OW 314
62286: OR
62287: IFFALSE 62291
// exit ;
62289: GO 62758
// if GetLives ( i ) < 250 then
62291: LD_VAR 0 4
62295: PPUSH
62296: CALL_OW 256
62300: PUSH
62301: LD_INT 250
62303: LESS
62304: IFFALSE 62317
// begin ComAutodestruct ( i ) ;
62306: LD_VAR 0 4
62310: PPUSH
62311: CALL 62154 0 1
// exit ;
62315: GO 62758
// end ; x := GetX ( enemy_unit ) ;
62317: LD_ADDR_VAR 0 7
62321: PUSH
62322: LD_VAR 0 2
62326: PPUSH
62327: CALL_OW 250
62331: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62332: LD_ADDR_VAR 0 8
62336: PUSH
62337: LD_VAR 0 2
62341: PPUSH
62342: CALL_OW 251
62346: ST_TO_ADDR
// if not x or not y then
62347: LD_VAR 0 7
62351: NOT
62352: PUSH
62353: LD_VAR 0 8
62357: NOT
62358: OR
62359: IFFALSE 62363
// exit ;
62361: GO 62758
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62363: LD_ADDR_VAR 0 6
62367: PUSH
62368: LD_VAR 0 7
62372: PPUSH
62373: LD_INT 0
62375: PPUSH
62376: LD_INT 4
62378: PPUSH
62379: CALL_OW 272
62383: PUSH
62384: LD_VAR 0 8
62388: PPUSH
62389: LD_INT 0
62391: PPUSH
62392: LD_INT 4
62394: PPUSH
62395: CALL_OW 273
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_VAR 0 7
62408: PPUSH
62409: LD_INT 1
62411: PPUSH
62412: LD_INT 4
62414: PPUSH
62415: CALL_OW 272
62419: PUSH
62420: LD_VAR 0 8
62424: PPUSH
62425: LD_INT 1
62427: PPUSH
62428: LD_INT 4
62430: PPUSH
62431: CALL_OW 273
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_VAR 0 7
62444: PPUSH
62445: LD_INT 2
62447: PPUSH
62448: LD_INT 4
62450: PPUSH
62451: CALL_OW 272
62455: PUSH
62456: LD_VAR 0 8
62460: PPUSH
62461: LD_INT 2
62463: PPUSH
62464: LD_INT 4
62466: PPUSH
62467: CALL_OW 273
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_VAR 0 7
62480: PPUSH
62481: LD_INT 3
62483: PPUSH
62484: LD_INT 4
62486: PPUSH
62487: CALL_OW 272
62491: PUSH
62492: LD_VAR 0 8
62496: PPUSH
62497: LD_INT 3
62499: PPUSH
62500: LD_INT 4
62502: PPUSH
62503: CALL_OW 273
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_VAR 0 7
62516: PPUSH
62517: LD_INT 4
62519: PPUSH
62520: LD_INT 4
62522: PPUSH
62523: CALL_OW 272
62527: PUSH
62528: LD_VAR 0 8
62532: PPUSH
62533: LD_INT 4
62535: PPUSH
62536: LD_INT 4
62538: PPUSH
62539: CALL_OW 273
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_VAR 0 7
62552: PPUSH
62553: LD_INT 5
62555: PPUSH
62556: LD_INT 4
62558: PPUSH
62559: CALL_OW 272
62563: PUSH
62564: LD_VAR 0 8
62568: PPUSH
62569: LD_INT 5
62571: PPUSH
62572: LD_INT 4
62574: PPUSH
62575: CALL_OW 273
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: ST_TO_ADDR
// for i = tmp downto 1 do
62592: LD_ADDR_VAR 0 4
62596: PUSH
62597: DOUBLE
62598: LD_VAR 0 6
62602: INC
62603: ST_TO_ADDR
62604: LD_INT 1
62606: PUSH
62607: FOR_DOWNTO
62608: IFFALSE 62709
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62610: LD_VAR 0 6
62614: PUSH
62615: LD_VAR 0 4
62619: ARRAY
62620: PUSH
62621: LD_INT 1
62623: ARRAY
62624: PPUSH
62625: LD_VAR 0 6
62629: PUSH
62630: LD_VAR 0 4
62634: ARRAY
62635: PUSH
62636: LD_INT 2
62638: ARRAY
62639: PPUSH
62640: CALL_OW 488
62644: NOT
62645: PUSH
62646: LD_VAR 0 6
62650: PUSH
62651: LD_VAR 0 4
62655: ARRAY
62656: PUSH
62657: LD_INT 1
62659: ARRAY
62660: PPUSH
62661: LD_VAR 0 6
62665: PUSH
62666: LD_VAR 0 4
62670: ARRAY
62671: PUSH
62672: LD_INT 2
62674: ARRAY
62675: PPUSH
62676: CALL_OW 428
62680: PUSH
62681: LD_INT 0
62683: NONEQUAL
62684: OR
62685: IFFALSE 62707
// tmp := Delete ( tmp , i ) ;
62687: LD_ADDR_VAR 0 6
62691: PUSH
62692: LD_VAR 0 6
62696: PPUSH
62697: LD_VAR 0 4
62701: PPUSH
62702: CALL_OW 3
62706: ST_TO_ADDR
62707: GO 62607
62709: POP
62710: POP
// j := GetClosestHex ( unit , tmp ) ;
62711: LD_ADDR_VAR 0 5
62715: PUSH
62716: LD_VAR 0 1
62720: PPUSH
62721: LD_VAR 0 6
62725: PPUSH
62726: CALL 62002 0 2
62730: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62731: LD_VAR 0 1
62735: PPUSH
62736: LD_VAR 0 5
62740: PUSH
62741: LD_INT 1
62743: ARRAY
62744: PPUSH
62745: LD_VAR 0 5
62749: PUSH
62750: LD_INT 2
62752: ARRAY
62753: PPUSH
62754: CALL_OW 111
// end ;
62758: LD_VAR 0 3
62762: RET
// export function PrepareApemanSoldier ( ) ; begin
62763: LD_INT 0
62765: PPUSH
// uc_nation := 0 ;
62766: LD_ADDR_OWVAR 21
62770: PUSH
62771: LD_INT 0
62773: ST_TO_ADDR
// hc_sex := sex_male ;
62774: LD_ADDR_OWVAR 27
62778: PUSH
62779: LD_INT 1
62781: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62782: LD_ADDR_OWVAR 28
62786: PUSH
62787: LD_INT 15
62789: ST_TO_ADDR
// hc_gallery :=  ;
62790: LD_ADDR_OWVAR 33
62794: PUSH
62795: LD_STRING 
62797: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62798: LD_ADDR_OWVAR 31
62802: PUSH
62803: LD_INT 0
62805: PPUSH
62806: LD_INT 3
62808: PPUSH
62809: CALL_OW 12
62813: PUSH
62814: LD_INT 0
62816: PPUSH
62817: LD_INT 3
62819: PPUSH
62820: CALL_OW 12
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: ST_TO_ADDR
// end ;
62837: LD_VAR 0 1
62841: RET
// export function PrepareApemanEngineer ( ) ; begin
62842: LD_INT 0
62844: PPUSH
// uc_nation := 0 ;
62845: LD_ADDR_OWVAR 21
62849: PUSH
62850: LD_INT 0
62852: ST_TO_ADDR
// hc_sex := sex_male ;
62853: LD_ADDR_OWVAR 27
62857: PUSH
62858: LD_INT 1
62860: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62861: LD_ADDR_OWVAR 28
62865: PUSH
62866: LD_INT 16
62868: ST_TO_ADDR
// hc_gallery :=  ;
62869: LD_ADDR_OWVAR 33
62873: PUSH
62874: LD_STRING 
62876: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62877: LD_ADDR_OWVAR 31
62881: PUSH
62882: LD_INT 0
62884: PPUSH
62885: LD_INT 3
62887: PPUSH
62888: CALL_OW 12
62892: PUSH
62893: LD_INT 0
62895: PPUSH
62896: LD_INT 3
62898: PPUSH
62899: CALL_OW 12
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: ST_TO_ADDR
// end ;
62916: LD_VAR 0 1
62920: RET
// export function PrepareApeman ( agressivity ) ; begin
62921: LD_INT 0
62923: PPUSH
// uc_side := 0 ;
62924: LD_ADDR_OWVAR 20
62928: PUSH
62929: LD_INT 0
62931: ST_TO_ADDR
// uc_nation := 0 ;
62932: LD_ADDR_OWVAR 21
62936: PUSH
62937: LD_INT 0
62939: ST_TO_ADDR
// hc_sex := sex_male ;
62940: LD_ADDR_OWVAR 27
62944: PUSH
62945: LD_INT 1
62947: ST_TO_ADDR
// hc_class := class_apeman ;
62948: LD_ADDR_OWVAR 28
62952: PUSH
62953: LD_INT 12
62955: ST_TO_ADDR
// hc_gallery :=  ;
62956: LD_ADDR_OWVAR 33
62960: PUSH
62961: LD_STRING 
62963: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62964: LD_ADDR_OWVAR 35
62968: PUSH
62969: LD_VAR 0 1
62973: NEG
62974: PPUSH
62975: LD_VAR 0 1
62979: PPUSH
62980: CALL_OW 12
62984: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62985: LD_ADDR_OWVAR 31
62989: PUSH
62990: LD_INT 0
62992: PPUSH
62993: LD_INT 3
62995: PPUSH
62996: CALL_OW 12
63000: PUSH
63001: LD_INT 0
63003: PPUSH
63004: LD_INT 3
63006: PPUSH
63007: CALL_OW 12
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: ST_TO_ADDR
// end ;
63024: LD_VAR 0 2
63028: RET
// export function PrepareTiger ( agressivity ) ; begin
63029: LD_INT 0
63031: PPUSH
// uc_side := 0 ;
63032: LD_ADDR_OWVAR 20
63036: PUSH
63037: LD_INT 0
63039: ST_TO_ADDR
// uc_nation := 0 ;
63040: LD_ADDR_OWVAR 21
63044: PUSH
63045: LD_INT 0
63047: ST_TO_ADDR
// hc_class := class_tiger ;
63048: LD_ADDR_OWVAR 28
63052: PUSH
63053: LD_INT 14
63055: ST_TO_ADDR
// hc_gallery :=  ;
63056: LD_ADDR_OWVAR 33
63060: PUSH
63061: LD_STRING 
63063: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63064: LD_ADDR_OWVAR 35
63068: PUSH
63069: LD_VAR 0 1
63073: NEG
63074: PPUSH
63075: LD_VAR 0 1
63079: PPUSH
63080: CALL_OW 12
63084: ST_TO_ADDR
// end ;
63085: LD_VAR 0 2
63089: RET
// export function PrepareEnchidna ( ) ; begin
63090: LD_INT 0
63092: PPUSH
// uc_side := 0 ;
63093: LD_ADDR_OWVAR 20
63097: PUSH
63098: LD_INT 0
63100: ST_TO_ADDR
// uc_nation := 0 ;
63101: LD_ADDR_OWVAR 21
63105: PUSH
63106: LD_INT 0
63108: ST_TO_ADDR
// hc_class := class_baggie ;
63109: LD_ADDR_OWVAR 28
63113: PUSH
63114: LD_INT 13
63116: ST_TO_ADDR
// hc_gallery :=  ;
63117: LD_ADDR_OWVAR 33
63121: PUSH
63122: LD_STRING 
63124: ST_TO_ADDR
// end ;
63125: LD_VAR 0 1
63129: RET
// export function PrepareFrog ( ) ; begin
63130: LD_INT 0
63132: PPUSH
// uc_side := 0 ;
63133: LD_ADDR_OWVAR 20
63137: PUSH
63138: LD_INT 0
63140: ST_TO_ADDR
// uc_nation := 0 ;
63141: LD_ADDR_OWVAR 21
63145: PUSH
63146: LD_INT 0
63148: ST_TO_ADDR
// hc_class := class_frog ;
63149: LD_ADDR_OWVAR 28
63153: PUSH
63154: LD_INT 19
63156: ST_TO_ADDR
// hc_gallery :=  ;
63157: LD_ADDR_OWVAR 33
63161: PUSH
63162: LD_STRING 
63164: ST_TO_ADDR
// end ;
63165: LD_VAR 0 1
63169: RET
// export function PrepareFish ( ) ; begin
63170: LD_INT 0
63172: PPUSH
// uc_side := 0 ;
63173: LD_ADDR_OWVAR 20
63177: PUSH
63178: LD_INT 0
63180: ST_TO_ADDR
// uc_nation := 0 ;
63181: LD_ADDR_OWVAR 21
63185: PUSH
63186: LD_INT 0
63188: ST_TO_ADDR
// hc_class := class_fish ;
63189: LD_ADDR_OWVAR 28
63193: PUSH
63194: LD_INT 20
63196: ST_TO_ADDR
// hc_gallery :=  ;
63197: LD_ADDR_OWVAR 33
63201: PUSH
63202: LD_STRING 
63204: ST_TO_ADDR
// end ;
63205: LD_VAR 0 1
63209: RET
// export function PrepareBird ( ) ; begin
63210: LD_INT 0
63212: PPUSH
// uc_side := 0 ;
63213: LD_ADDR_OWVAR 20
63217: PUSH
63218: LD_INT 0
63220: ST_TO_ADDR
// uc_nation := 0 ;
63221: LD_ADDR_OWVAR 21
63225: PUSH
63226: LD_INT 0
63228: ST_TO_ADDR
// hc_class := class_phororhacos ;
63229: LD_ADDR_OWVAR 28
63233: PUSH
63234: LD_INT 18
63236: ST_TO_ADDR
// hc_gallery :=  ;
63237: LD_ADDR_OWVAR 33
63241: PUSH
63242: LD_STRING 
63244: ST_TO_ADDR
// end ;
63245: LD_VAR 0 1
63249: RET
// export function PrepareHorse ( ) ; begin
63250: LD_INT 0
63252: PPUSH
// uc_side := 0 ;
63253: LD_ADDR_OWVAR 20
63257: PUSH
63258: LD_INT 0
63260: ST_TO_ADDR
// uc_nation := 0 ;
63261: LD_ADDR_OWVAR 21
63265: PUSH
63266: LD_INT 0
63268: ST_TO_ADDR
// hc_class := class_horse ;
63269: LD_ADDR_OWVAR 28
63273: PUSH
63274: LD_INT 21
63276: ST_TO_ADDR
// hc_gallery :=  ;
63277: LD_ADDR_OWVAR 33
63281: PUSH
63282: LD_STRING 
63284: ST_TO_ADDR
// end ;
63285: LD_VAR 0 1
63289: RET
// export function PrepareMastodont ( ) ; begin
63290: LD_INT 0
63292: PPUSH
// uc_side := 0 ;
63293: LD_ADDR_OWVAR 20
63297: PUSH
63298: LD_INT 0
63300: ST_TO_ADDR
// uc_nation := 0 ;
63301: LD_ADDR_OWVAR 21
63305: PUSH
63306: LD_INT 0
63308: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63309: LD_ADDR_OWVAR 37
63313: PUSH
63314: LD_INT 31
63316: ST_TO_ADDR
// vc_control := control_rider ;
63317: LD_ADDR_OWVAR 38
63321: PUSH
63322: LD_INT 4
63324: ST_TO_ADDR
// end ;
63325: LD_VAR 0 1
63329: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63330: LD_INT 0
63332: PPUSH
63333: PPUSH
63334: PPUSH
// uc_side = 0 ;
63335: LD_ADDR_OWVAR 20
63339: PUSH
63340: LD_INT 0
63342: ST_TO_ADDR
// uc_nation = 0 ;
63343: LD_ADDR_OWVAR 21
63347: PUSH
63348: LD_INT 0
63350: ST_TO_ADDR
// InitHc_All ( ) ;
63351: CALL_OW 584
// InitVc ;
63355: CALL_OW 20
// if mastodonts then
63359: LD_VAR 0 6
63363: IFFALSE 63430
// for i = 1 to mastodonts do
63365: LD_ADDR_VAR 0 11
63369: PUSH
63370: DOUBLE
63371: LD_INT 1
63373: DEC
63374: ST_TO_ADDR
63375: LD_VAR 0 6
63379: PUSH
63380: FOR_TO
63381: IFFALSE 63428
// begin vc_chassis := 31 ;
63383: LD_ADDR_OWVAR 37
63387: PUSH
63388: LD_INT 31
63390: ST_TO_ADDR
// vc_control := control_rider ;
63391: LD_ADDR_OWVAR 38
63395: PUSH
63396: LD_INT 4
63398: ST_TO_ADDR
// animal := CreateVehicle ;
63399: LD_ADDR_VAR 0 12
63403: PUSH
63404: CALL_OW 45
63408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63409: LD_VAR 0 12
63413: PPUSH
63414: LD_VAR 0 8
63418: PPUSH
63419: LD_INT 0
63421: PPUSH
63422: CALL 65558 0 3
// end ;
63426: GO 63380
63428: POP
63429: POP
// if horses then
63430: LD_VAR 0 5
63434: IFFALSE 63501
// for i = 1 to horses do
63436: LD_ADDR_VAR 0 11
63440: PUSH
63441: DOUBLE
63442: LD_INT 1
63444: DEC
63445: ST_TO_ADDR
63446: LD_VAR 0 5
63450: PUSH
63451: FOR_TO
63452: IFFALSE 63499
// begin hc_class := 21 ;
63454: LD_ADDR_OWVAR 28
63458: PUSH
63459: LD_INT 21
63461: ST_TO_ADDR
// hc_gallery :=  ;
63462: LD_ADDR_OWVAR 33
63466: PUSH
63467: LD_STRING 
63469: ST_TO_ADDR
// animal := CreateHuman ;
63470: LD_ADDR_VAR 0 12
63474: PUSH
63475: CALL_OW 44
63479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63480: LD_VAR 0 12
63484: PPUSH
63485: LD_VAR 0 8
63489: PPUSH
63490: LD_INT 0
63492: PPUSH
63493: CALL 65558 0 3
// end ;
63497: GO 63451
63499: POP
63500: POP
// if birds then
63501: LD_VAR 0 1
63505: IFFALSE 63572
// for i = 1 to birds do
63507: LD_ADDR_VAR 0 11
63511: PUSH
63512: DOUBLE
63513: LD_INT 1
63515: DEC
63516: ST_TO_ADDR
63517: LD_VAR 0 1
63521: PUSH
63522: FOR_TO
63523: IFFALSE 63570
// begin hc_class := 18 ;
63525: LD_ADDR_OWVAR 28
63529: PUSH
63530: LD_INT 18
63532: ST_TO_ADDR
// hc_gallery =  ;
63533: LD_ADDR_OWVAR 33
63537: PUSH
63538: LD_STRING 
63540: ST_TO_ADDR
// animal := CreateHuman ;
63541: LD_ADDR_VAR 0 12
63545: PUSH
63546: CALL_OW 44
63550: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63551: LD_VAR 0 12
63555: PPUSH
63556: LD_VAR 0 8
63560: PPUSH
63561: LD_INT 0
63563: PPUSH
63564: CALL 65558 0 3
// end ;
63568: GO 63522
63570: POP
63571: POP
// if tigers then
63572: LD_VAR 0 2
63576: IFFALSE 63660
// for i = 1 to tigers do
63578: LD_ADDR_VAR 0 11
63582: PUSH
63583: DOUBLE
63584: LD_INT 1
63586: DEC
63587: ST_TO_ADDR
63588: LD_VAR 0 2
63592: PUSH
63593: FOR_TO
63594: IFFALSE 63658
// begin hc_class = class_tiger ;
63596: LD_ADDR_OWVAR 28
63600: PUSH
63601: LD_INT 14
63603: ST_TO_ADDR
// hc_gallery =  ;
63604: LD_ADDR_OWVAR 33
63608: PUSH
63609: LD_STRING 
63611: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63612: LD_ADDR_OWVAR 35
63616: PUSH
63617: LD_INT 7
63619: NEG
63620: PPUSH
63621: LD_INT 7
63623: PPUSH
63624: CALL_OW 12
63628: ST_TO_ADDR
// animal := CreateHuman ;
63629: LD_ADDR_VAR 0 12
63633: PUSH
63634: CALL_OW 44
63638: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63639: LD_VAR 0 12
63643: PPUSH
63644: LD_VAR 0 8
63648: PPUSH
63649: LD_INT 0
63651: PPUSH
63652: CALL 65558 0 3
// end ;
63656: GO 63593
63658: POP
63659: POP
// if apemans then
63660: LD_VAR 0 3
63664: IFFALSE 63787
// for i = 1 to apemans do
63666: LD_ADDR_VAR 0 11
63670: PUSH
63671: DOUBLE
63672: LD_INT 1
63674: DEC
63675: ST_TO_ADDR
63676: LD_VAR 0 3
63680: PUSH
63681: FOR_TO
63682: IFFALSE 63785
// begin hc_class = class_apeman ;
63684: LD_ADDR_OWVAR 28
63688: PUSH
63689: LD_INT 12
63691: ST_TO_ADDR
// hc_gallery =  ;
63692: LD_ADDR_OWVAR 33
63696: PUSH
63697: LD_STRING 
63699: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63700: LD_ADDR_OWVAR 35
63704: PUSH
63705: LD_INT 2
63707: NEG
63708: PPUSH
63709: LD_INT 2
63711: PPUSH
63712: CALL_OW 12
63716: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63717: LD_ADDR_OWVAR 31
63721: PUSH
63722: LD_INT 1
63724: PPUSH
63725: LD_INT 3
63727: PPUSH
63728: CALL_OW 12
63732: PUSH
63733: LD_INT 1
63735: PPUSH
63736: LD_INT 3
63738: PPUSH
63739: CALL_OW 12
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: ST_TO_ADDR
// animal := CreateHuman ;
63756: LD_ADDR_VAR 0 12
63760: PUSH
63761: CALL_OW 44
63765: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63766: LD_VAR 0 12
63770: PPUSH
63771: LD_VAR 0 8
63775: PPUSH
63776: LD_INT 0
63778: PPUSH
63779: CALL 65558 0 3
// end ;
63783: GO 63681
63785: POP
63786: POP
// if enchidnas then
63787: LD_VAR 0 4
63791: IFFALSE 63858
// for i = 1 to enchidnas do
63793: LD_ADDR_VAR 0 11
63797: PUSH
63798: DOUBLE
63799: LD_INT 1
63801: DEC
63802: ST_TO_ADDR
63803: LD_VAR 0 4
63807: PUSH
63808: FOR_TO
63809: IFFALSE 63856
// begin hc_class = 13 ;
63811: LD_ADDR_OWVAR 28
63815: PUSH
63816: LD_INT 13
63818: ST_TO_ADDR
// hc_gallery =  ;
63819: LD_ADDR_OWVAR 33
63823: PUSH
63824: LD_STRING 
63826: ST_TO_ADDR
// animal := CreateHuman ;
63827: LD_ADDR_VAR 0 12
63831: PUSH
63832: CALL_OW 44
63836: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63837: LD_VAR 0 12
63841: PPUSH
63842: LD_VAR 0 8
63846: PPUSH
63847: LD_INT 0
63849: PPUSH
63850: CALL 65558 0 3
// end ;
63854: GO 63808
63856: POP
63857: POP
// if fishes then
63858: LD_VAR 0 7
63862: IFFALSE 63929
// for i = 1 to fishes do
63864: LD_ADDR_VAR 0 11
63868: PUSH
63869: DOUBLE
63870: LD_INT 1
63872: DEC
63873: ST_TO_ADDR
63874: LD_VAR 0 7
63878: PUSH
63879: FOR_TO
63880: IFFALSE 63927
// begin hc_class = 20 ;
63882: LD_ADDR_OWVAR 28
63886: PUSH
63887: LD_INT 20
63889: ST_TO_ADDR
// hc_gallery =  ;
63890: LD_ADDR_OWVAR 33
63894: PUSH
63895: LD_STRING 
63897: ST_TO_ADDR
// animal := CreateHuman ;
63898: LD_ADDR_VAR 0 12
63902: PUSH
63903: CALL_OW 44
63907: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63908: LD_VAR 0 12
63912: PPUSH
63913: LD_VAR 0 9
63917: PPUSH
63918: LD_INT 0
63920: PPUSH
63921: CALL 65558 0 3
// end ;
63925: GO 63879
63927: POP
63928: POP
// end ;
63929: LD_VAR 0 10
63933: RET
// export function WantHeal ( sci , unit ) ; begin
63934: LD_INT 0
63936: PPUSH
// if GetTaskList ( sci ) > 0 then
63937: LD_VAR 0 1
63941: PPUSH
63942: CALL_OW 437
63946: PUSH
63947: LD_INT 0
63949: GREATER
63950: IFFALSE 64020
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63952: LD_VAR 0 1
63956: PPUSH
63957: CALL_OW 437
63961: PUSH
63962: LD_INT 1
63964: ARRAY
63965: PUSH
63966: LD_INT 1
63968: ARRAY
63969: PUSH
63970: LD_STRING l
63972: EQUAL
63973: PUSH
63974: LD_VAR 0 1
63978: PPUSH
63979: CALL_OW 437
63983: PUSH
63984: LD_INT 1
63986: ARRAY
63987: PUSH
63988: LD_INT 4
63990: ARRAY
63991: PUSH
63992: LD_VAR 0 2
63996: EQUAL
63997: AND
63998: IFFALSE 64010
// result := true else
64000: LD_ADDR_VAR 0 3
64004: PUSH
64005: LD_INT 1
64007: ST_TO_ADDR
64008: GO 64018
// result := false ;
64010: LD_ADDR_VAR 0 3
64014: PUSH
64015: LD_INT 0
64017: ST_TO_ADDR
// end else
64018: GO 64028
// result := false ;
64020: LD_ADDR_VAR 0 3
64024: PUSH
64025: LD_INT 0
64027: ST_TO_ADDR
// end ;
64028: LD_VAR 0 3
64032: RET
// export function HealTarget ( sci ) ; begin
64033: LD_INT 0
64035: PPUSH
// if not sci then
64036: LD_VAR 0 1
64040: NOT
64041: IFFALSE 64045
// exit ;
64043: GO 64110
// result := 0 ;
64045: LD_ADDR_VAR 0 2
64049: PUSH
64050: LD_INT 0
64052: ST_TO_ADDR
// if GetTaskList ( sci ) then
64053: LD_VAR 0 1
64057: PPUSH
64058: CALL_OW 437
64062: IFFALSE 64110
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64064: LD_VAR 0 1
64068: PPUSH
64069: CALL_OW 437
64073: PUSH
64074: LD_INT 1
64076: ARRAY
64077: PUSH
64078: LD_INT 1
64080: ARRAY
64081: PUSH
64082: LD_STRING l
64084: EQUAL
64085: IFFALSE 64110
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64087: LD_ADDR_VAR 0 2
64091: PUSH
64092: LD_VAR 0 1
64096: PPUSH
64097: CALL_OW 437
64101: PUSH
64102: LD_INT 1
64104: ARRAY
64105: PUSH
64106: LD_INT 4
64108: ARRAY
64109: ST_TO_ADDR
// end ;
64110: LD_VAR 0 2
64114: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64115: LD_INT 0
64117: PPUSH
64118: PPUSH
64119: PPUSH
64120: PPUSH
// if not base_units then
64121: LD_VAR 0 1
64125: NOT
64126: IFFALSE 64130
// exit ;
64128: GO 64217
// result := false ;
64130: LD_ADDR_VAR 0 2
64134: PUSH
64135: LD_INT 0
64137: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64138: LD_ADDR_VAR 0 5
64142: PUSH
64143: LD_VAR 0 1
64147: PPUSH
64148: LD_INT 21
64150: PUSH
64151: LD_INT 3
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PPUSH
64158: CALL_OW 72
64162: ST_TO_ADDR
// if not tmp then
64163: LD_VAR 0 5
64167: NOT
64168: IFFALSE 64172
// exit ;
64170: GO 64217
// for i in tmp do
64172: LD_ADDR_VAR 0 3
64176: PUSH
64177: LD_VAR 0 5
64181: PUSH
64182: FOR_IN
64183: IFFALSE 64215
// begin result := EnemyInRange ( i , 22 ) ;
64185: LD_ADDR_VAR 0 2
64189: PUSH
64190: LD_VAR 0 3
64194: PPUSH
64195: LD_INT 22
64197: PPUSH
64198: CALL 61804 0 2
64202: ST_TO_ADDR
// if result then
64203: LD_VAR 0 2
64207: IFFALSE 64213
// exit ;
64209: POP
64210: POP
64211: GO 64217
// end ;
64213: GO 64182
64215: POP
64216: POP
// end ;
64217: LD_VAR 0 2
64221: RET
// export function FilterByTag ( units , tag ) ; begin
64222: LD_INT 0
64224: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64225: LD_ADDR_VAR 0 3
64229: PUSH
64230: LD_VAR 0 1
64234: PPUSH
64235: LD_INT 120
64237: PUSH
64238: LD_VAR 0 2
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PPUSH
64247: CALL_OW 72
64251: ST_TO_ADDR
// end ;
64252: LD_VAR 0 3
64256: RET
// export function IsDriver ( un ) ; begin
64257: LD_INT 0
64259: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64260: LD_ADDR_VAR 0 2
64264: PUSH
64265: LD_VAR 0 1
64269: PUSH
64270: LD_INT 55
64272: PUSH
64273: EMPTY
64274: LIST
64275: PPUSH
64276: CALL_OW 69
64280: IN
64281: ST_TO_ADDR
// end ;
64282: LD_VAR 0 2
64286: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64287: LD_INT 0
64289: PPUSH
64290: PPUSH
// list := [ ] ;
64291: LD_ADDR_VAR 0 5
64295: PUSH
64296: EMPTY
64297: ST_TO_ADDR
// case d of 0 :
64298: LD_VAR 0 3
64302: PUSH
64303: LD_INT 0
64305: DOUBLE
64306: EQUAL
64307: IFTRUE 64311
64309: GO 64444
64311: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64312: LD_ADDR_VAR 0 5
64316: PUSH
64317: LD_VAR 0 1
64321: PUSH
64322: LD_INT 4
64324: MINUS
64325: PUSH
64326: LD_VAR 0 2
64330: PUSH
64331: LD_INT 4
64333: MINUS
64334: PUSH
64335: LD_INT 2
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: LIST
64342: PUSH
64343: LD_VAR 0 1
64347: PUSH
64348: LD_INT 3
64350: MINUS
64351: PUSH
64352: LD_VAR 0 2
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: PUSH
64365: LD_VAR 0 1
64369: PUSH
64370: LD_INT 4
64372: PLUS
64373: PUSH
64374: LD_VAR 0 2
64378: PUSH
64379: LD_INT 4
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: LIST
64386: PUSH
64387: LD_VAR 0 1
64391: PUSH
64392: LD_INT 3
64394: PLUS
64395: PUSH
64396: LD_VAR 0 2
64400: PUSH
64401: LD_INT 3
64403: PLUS
64404: PUSH
64405: LD_INT 5
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: PUSH
64413: LD_VAR 0 1
64417: PUSH
64418: LD_VAR 0 2
64422: PUSH
64423: LD_INT 4
64425: PLUS
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: ST_TO_ADDR
// end ; 1 :
64442: GO 65142
64444: LD_INT 1
64446: DOUBLE
64447: EQUAL
64448: IFTRUE 64452
64450: GO 64585
64452: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64453: LD_ADDR_VAR 0 5
64457: PUSH
64458: LD_VAR 0 1
64462: PUSH
64463: LD_VAR 0 2
64467: PUSH
64468: LD_INT 4
64470: MINUS
64471: PUSH
64472: LD_INT 3
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: LIST
64479: PUSH
64480: LD_VAR 0 1
64484: PUSH
64485: LD_INT 3
64487: MINUS
64488: PUSH
64489: LD_VAR 0 2
64493: PUSH
64494: LD_INT 3
64496: MINUS
64497: PUSH
64498: LD_INT 2
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: LIST
64505: PUSH
64506: LD_VAR 0 1
64510: PUSH
64511: LD_INT 4
64513: MINUS
64514: PUSH
64515: LD_VAR 0 2
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: LIST
64527: PUSH
64528: LD_VAR 0 1
64532: PUSH
64533: LD_VAR 0 2
64537: PUSH
64538: LD_INT 3
64540: PLUS
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: PUSH
64550: LD_VAR 0 1
64554: PUSH
64555: LD_INT 4
64557: PLUS
64558: PUSH
64559: LD_VAR 0 2
64563: PUSH
64564: LD_INT 4
64566: PLUS
64567: PUSH
64568: LD_INT 5
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: LIST
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: ST_TO_ADDR
// end ; 2 :
64583: GO 65142
64585: LD_INT 2
64587: DOUBLE
64588: EQUAL
64589: IFTRUE 64593
64591: GO 64722
64593: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64594: LD_ADDR_VAR 0 5
64598: PUSH
64599: LD_VAR 0 1
64603: PUSH
64604: LD_VAR 0 2
64608: PUSH
64609: LD_INT 3
64611: MINUS
64612: PUSH
64613: LD_INT 3
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: LIST
64620: PUSH
64621: LD_VAR 0 1
64625: PUSH
64626: LD_INT 4
64628: PLUS
64629: PUSH
64630: LD_VAR 0 2
64634: PUSH
64635: LD_INT 4
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: LIST
64642: PUSH
64643: LD_VAR 0 1
64647: PUSH
64648: LD_VAR 0 2
64652: PUSH
64653: LD_INT 4
64655: PLUS
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: PUSH
64665: LD_VAR 0 1
64669: PUSH
64670: LD_INT 3
64672: MINUS
64673: PUSH
64674: LD_VAR 0 2
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: PUSH
64687: LD_VAR 0 1
64691: PUSH
64692: LD_INT 4
64694: MINUS
64695: PUSH
64696: LD_VAR 0 2
64700: PUSH
64701: LD_INT 4
64703: MINUS
64704: PUSH
64705: LD_INT 2
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: LIST
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: ST_TO_ADDR
// end ; 3 :
64720: GO 65142
64722: LD_INT 3
64724: DOUBLE
64725: EQUAL
64726: IFTRUE 64730
64728: GO 64863
64730: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64731: LD_ADDR_VAR 0 5
64735: PUSH
64736: LD_VAR 0 1
64740: PUSH
64741: LD_INT 3
64743: PLUS
64744: PUSH
64745: LD_VAR 0 2
64749: PUSH
64750: LD_INT 4
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: LIST
64757: PUSH
64758: LD_VAR 0 1
64762: PUSH
64763: LD_INT 4
64765: PLUS
64766: PUSH
64767: LD_VAR 0 2
64771: PUSH
64772: LD_INT 4
64774: PLUS
64775: PUSH
64776: LD_INT 5
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: LIST
64783: PUSH
64784: LD_VAR 0 1
64788: PUSH
64789: LD_INT 4
64791: MINUS
64792: PUSH
64793: LD_VAR 0 2
64797: PUSH
64798: LD_INT 1
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: LIST
64805: PUSH
64806: LD_VAR 0 1
64810: PUSH
64811: LD_VAR 0 2
64815: PUSH
64816: LD_INT 4
64818: MINUS
64819: PUSH
64820: LD_INT 3
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: PUSH
64828: LD_VAR 0 1
64832: PUSH
64833: LD_INT 3
64835: MINUS
64836: PUSH
64837: LD_VAR 0 2
64841: PUSH
64842: LD_INT 3
64844: MINUS
64845: PUSH
64846: LD_INT 2
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: LIST
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: ST_TO_ADDR
// end ; 4 :
64861: GO 65142
64863: LD_INT 4
64865: DOUBLE
64866: EQUAL
64867: IFTRUE 64871
64869: GO 65004
64871: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64872: LD_ADDR_VAR 0 5
64876: PUSH
64877: LD_VAR 0 1
64881: PUSH
64882: LD_VAR 0 2
64886: PUSH
64887: LD_INT 4
64889: PLUS
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: PUSH
64899: LD_VAR 0 1
64903: PUSH
64904: LD_INT 3
64906: PLUS
64907: PUSH
64908: LD_VAR 0 2
64912: PUSH
64913: LD_INT 3
64915: PLUS
64916: PUSH
64917: LD_INT 5
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: PUSH
64925: LD_VAR 0 1
64929: PUSH
64930: LD_INT 4
64932: PLUS
64933: PUSH
64934: LD_VAR 0 2
64938: PUSH
64939: LD_INT 4
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: PUSH
64947: LD_VAR 0 1
64951: PUSH
64952: LD_VAR 0 2
64956: PUSH
64957: LD_INT 3
64959: MINUS
64960: PUSH
64961: LD_INT 3
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: LIST
64968: PUSH
64969: LD_VAR 0 1
64973: PUSH
64974: LD_INT 4
64976: MINUS
64977: PUSH
64978: LD_VAR 0 2
64982: PUSH
64983: LD_INT 4
64985: MINUS
64986: PUSH
64987: LD_INT 2
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: LIST
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: ST_TO_ADDR
// end ; 5 :
65002: GO 65142
65004: LD_INT 5
65006: DOUBLE
65007: EQUAL
65008: IFTRUE 65012
65010: GO 65141
65012: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65013: LD_ADDR_VAR 0 5
65017: PUSH
65018: LD_VAR 0 1
65022: PUSH
65023: LD_INT 4
65025: MINUS
65026: PUSH
65027: LD_VAR 0 2
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: LIST
65039: PUSH
65040: LD_VAR 0 1
65044: PUSH
65045: LD_VAR 0 2
65049: PUSH
65050: LD_INT 4
65052: MINUS
65053: PUSH
65054: LD_INT 3
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: PUSH
65062: LD_VAR 0 1
65066: PUSH
65067: LD_INT 4
65069: PLUS
65070: PUSH
65071: LD_VAR 0 2
65075: PUSH
65076: LD_INT 4
65078: PLUS
65079: PUSH
65080: LD_INT 5
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: LIST
65087: PUSH
65088: LD_VAR 0 1
65092: PUSH
65093: LD_INT 3
65095: PLUS
65096: PUSH
65097: LD_VAR 0 2
65101: PUSH
65102: LD_INT 4
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: LIST
65109: PUSH
65110: LD_VAR 0 1
65114: PUSH
65115: LD_VAR 0 2
65119: PUSH
65120: LD_INT 3
65122: PLUS
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: LIST
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: ST_TO_ADDR
// end ; end ;
65139: GO 65142
65141: POP
// result := list ;
65142: LD_ADDR_VAR 0 4
65146: PUSH
65147: LD_VAR 0 5
65151: ST_TO_ADDR
// end ;
65152: LD_VAR 0 4
65156: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65157: LD_INT 0
65159: PPUSH
65160: PPUSH
65161: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65162: LD_VAR 0 1
65166: NOT
65167: PUSH
65168: LD_VAR 0 2
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: LD_INT 2
65178: PUSH
65179: LD_INT 3
65181: PUSH
65182: LD_INT 4
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: IN
65191: NOT
65192: OR
65193: IFFALSE 65197
// exit ;
65195: GO 65280
// tmp := [ ] ;
65197: LD_ADDR_VAR 0 5
65201: PUSH
65202: EMPTY
65203: ST_TO_ADDR
// for i in units do
65204: LD_ADDR_VAR 0 4
65208: PUSH
65209: LD_VAR 0 1
65213: PUSH
65214: FOR_IN
65215: IFFALSE 65249
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65217: LD_ADDR_VAR 0 5
65221: PUSH
65222: LD_VAR 0 5
65226: PPUSH
65227: LD_VAR 0 4
65231: PPUSH
65232: LD_VAR 0 2
65236: PPUSH
65237: CALL_OW 259
65241: PPUSH
65242: CALL 66653 0 2
65246: ST_TO_ADDR
65247: GO 65214
65249: POP
65250: POP
// if not tmp then
65251: LD_VAR 0 5
65255: NOT
65256: IFFALSE 65260
// exit ;
65258: GO 65280
// result := SortListByListDesc ( units , tmp ) ;
65260: LD_ADDR_VAR 0 3
65264: PUSH
65265: LD_VAR 0 1
65269: PPUSH
65270: LD_VAR 0 5
65274: PPUSH
65275: CALL_OW 77
65279: ST_TO_ADDR
// end ;
65280: LD_VAR 0 3
65284: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65285: LD_INT 0
65287: PPUSH
65288: PPUSH
65289: PPUSH
// result := false ;
65290: LD_ADDR_VAR 0 3
65294: PUSH
65295: LD_INT 0
65297: ST_TO_ADDR
// if not building then
65298: LD_VAR 0 2
65302: NOT
65303: IFFALSE 65307
// exit ;
65305: GO 65445
// x := GetX ( building ) ;
65307: LD_ADDR_VAR 0 4
65311: PUSH
65312: LD_VAR 0 2
65316: PPUSH
65317: CALL_OW 250
65321: ST_TO_ADDR
// y := GetY ( building ) ;
65322: LD_ADDR_VAR 0 5
65326: PUSH
65327: LD_VAR 0 2
65331: PPUSH
65332: CALL_OW 251
65336: ST_TO_ADDR
// if not x or not y then
65337: LD_VAR 0 4
65341: NOT
65342: PUSH
65343: LD_VAR 0 5
65347: NOT
65348: OR
65349: IFFALSE 65353
// exit ;
65351: GO 65445
// if GetTaskList ( unit ) then
65353: LD_VAR 0 1
65357: PPUSH
65358: CALL_OW 437
65362: IFFALSE 65445
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65364: LD_STRING e
65366: PUSH
65367: LD_VAR 0 1
65371: PPUSH
65372: CALL_OW 437
65376: PUSH
65377: LD_INT 1
65379: ARRAY
65380: PUSH
65381: LD_INT 1
65383: ARRAY
65384: EQUAL
65385: PUSH
65386: LD_VAR 0 4
65390: PUSH
65391: LD_VAR 0 1
65395: PPUSH
65396: CALL_OW 437
65400: PUSH
65401: LD_INT 1
65403: ARRAY
65404: PUSH
65405: LD_INT 2
65407: ARRAY
65408: EQUAL
65409: AND
65410: PUSH
65411: LD_VAR 0 5
65415: PUSH
65416: LD_VAR 0 1
65420: PPUSH
65421: CALL_OW 437
65425: PUSH
65426: LD_INT 1
65428: ARRAY
65429: PUSH
65430: LD_INT 3
65432: ARRAY
65433: EQUAL
65434: AND
65435: IFFALSE 65445
// result := true end ;
65437: LD_ADDR_VAR 0 3
65441: PUSH
65442: LD_INT 1
65444: ST_TO_ADDR
// end ;
65445: LD_VAR 0 3
65449: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65450: LD_INT 0
65452: PPUSH
// result := false ;
65453: LD_ADDR_VAR 0 4
65457: PUSH
65458: LD_INT 0
65460: ST_TO_ADDR
// if GetTaskList ( unit ) then
65461: LD_VAR 0 1
65465: PPUSH
65466: CALL_OW 437
65470: IFFALSE 65553
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65472: LD_STRING M
65474: PUSH
65475: LD_VAR 0 1
65479: PPUSH
65480: CALL_OW 437
65484: PUSH
65485: LD_INT 1
65487: ARRAY
65488: PUSH
65489: LD_INT 1
65491: ARRAY
65492: EQUAL
65493: PUSH
65494: LD_VAR 0 2
65498: PUSH
65499: LD_VAR 0 1
65503: PPUSH
65504: CALL_OW 437
65508: PUSH
65509: LD_INT 1
65511: ARRAY
65512: PUSH
65513: LD_INT 2
65515: ARRAY
65516: EQUAL
65517: AND
65518: PUSH
65519: LD_VAR 0 3
65523: PUSH
65524: LD_VAR 0 1
65528: PPUSH
65529: CALL_OW 437
65533: PUSH
65534: LD_INT 1
65536: ARRAY
65537: PUSH
65538: LD_INT 3
65540: ARRAY
65541: EQUAL
65542: AND
65543: IFFALSE 65553
// result := true ;
65545: LD_ADDR_VAR 0 4
65549: PUSH
65550: LD_INT 1
65552: ST_TO_ADDR
// end ; end ;
65553: LD_VAR 0 4
65557: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65558: LD_INT 0
65560: PPUSH
65561: PPUSH
65562: PPUSH
65563: PPUSH
// if not unit or not area then
65564: LD_VAR 0 1
65568: NOT
65569: PUSH
65570: LD_VAR 0 2
65574: NOT
65575: OR
65576: IFFALSE 65580
// exit ;
65578: GO 65756
// tmp := AreaToList ( area , i ) ;
65580: LD_ADDR_VAR 0 6
65584: PUSH
65585: LD_VAR 0 2
65589: PPUSH
65590: LD_VAR 0 5
65594: PPUSH
65595: CALL_OW 517
65599: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65600: LD_ADDR_VAR 0 5
65604: PUSH
65605: DOUBLE
65606: LD_INT 1
65608: DEC
65609: ST_TO_ADDR
65610: LD_VAR 0 6
65614: PUSH
65615: LD_INT 1
65617: ARRAY
65618: PUSH
65619: FOR_TO
65620: IFFALSE 65754
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65622: LD_ADDR_VAR 0 7
65626: PUSH
65627: LD_VAR 0 6
65631: PUSH
65632: LD_INT 1
65634: ARRAY
65635: PUSH
65636: LD_VAR 0 5
65640: ARRAY
65641: PUSH
65642: LD_VAR 0 6
65646: PUSH
65647: LD_INT 2
65649: ARRAY
65650: PUSH
65651: LD_VAR 0 5
65655: ARRAY
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65661: LD_INT 92
65663: PUSH
65664: LD_VAR 0 7
65668: PUSH
65669: LD_INT 1
65671: ARRAY
65672: PUSH
65673: LD_VAR 0 7
65677: PUSH
65678: LD_INT 2
65680: ARRAY
65681: PUSH
65682: LD_INT 2
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: PPUSH
65691: CALL_OW 69
65695: PUSH
65696: LD_INT 0
65698: EQUAL
65699: IFFALSE 65752
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65701: LD_VAR 0 1
65705: PPUSH
65706: LD_VAR 0 7
65710: PUSH
65711: LD_INT 1
65713: ARRAY
65714: PPUSH
65715: LD_VAR 0 7
65719: PUSH
65720: LD_INT 2
65722: ARRAY
65723: PPUSH
65724: LD_VAR 0 3
65728: PPUSH
65729: CALL_OW 48
// result := IsPlaced ( unit ) ;
65733: LD_ADDR_VAR 0 4
65737: PUSH
65738: LD_VAR 0 1
65742: PPUSH
65743: CALL_OW 305
65747: ST_TO_ADDR
// exit ;
65748: POP
65749: POP
65750: GO 65756
// end ; end ;
65752: GO 65619
65754: POP
65755: POP
// end ;
65756: LD_VAR 0 4
65760: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65761: LD_INT 0
65763: PPUSH
65764: PPUSH
65765: PPUSH
// if not side or side > 8 then
65766: LD_VAR 0 1
65770: NOT
65771: PUSH
65772: LD_VAR 0 1
65776: PUSH
65777: LD_INT 8
65779: GREATER
65780: OR
65781: IFFALSE 65785
// exit ;
65783: GO 65972
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65785: LD_ADDR_VAR 0 4
65789: PUSH
65790: LD_INT 22
65792: PUSH
65793: LD_VAR 0 1
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 21
65804: PUSH
65805: LD_INT 3
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PPUSH
65816: CALL_OW 69
65820: ST_TO_ADDR
// if not tmp then
65821: LD_VAR 0 4
65825: NOT
65826: IFFALSE 65830
// exit ;
65828: GO 65972
// enable_addtolog := true ;
65830: LD_ADDR_OWVAR 81
65834: PUSH
65835: LD_INT 1
65837: ST_TO_ADDR
// AddToLog ( [ ) ;
65838: LD_STRING [
65840: PPUSH
65841: CALL_OW 561
// for i in tmp do
65845: LD_ADDR_VAR 0 3
65849: PUSH
65850: LD_VAR 0 4
65854: PUSH
65855: FOR_IN
65856: IFFALSE 65963
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65858: LD_STRING [
65860: PUSH
65861: LD_VAR 0 3
65865: PPUSH
65866: CALL_OW 266
65870: STR
65871: PUSH
65872: LD_STRING , 
65874: STR
65875: PUSH
65876: LD_VAR 0 3
65880: PPUSH
65881: CALL_OW 250
65885: STR
65886: PUSH
65887: LD_STRING , 
65889: STR
65890: PUSH
65891: LD_VAR 0 3
65895: PPUSH
65896: CALL_OW 251
65900: STR
65901: PUSH
65902: LD_STRING , 
65904: STR
65905: PUSH
65906: LD_VAR 0 3
65910: PPUSH
65911: CALL_OW 254
65915: STR
65916: PUSH
65917: LD_STRING , 
65919: STR
65920: PUSH
65921: LD_VAR 0 3
65925: PPUSH
65926: LD_INT 1
65928: PPUSH
65929: CALL_OW 268
65933: STR
65934: PUSH
65935: LD_STRING , 
65937: STR
65938: PUSH
65939: LD_VAR 0 3
65943: PPUSH
65944: LD_INT 2
65946: PPUSH
65947: CALL_OW 268
65951: STR
65952: PUSH
65953: LD_STRING ],
65955: STR
65956: PPUSH
65957: CALL_OW 561
// end ;
65961: GO 65855
65963: POP
65964: POP
// AddToLog ( ]; ) ;
65965: LD_STRING ];
65967: PPUSH
65968: CALL_OW 561
// end ;
65972: LD_VAR 0 2
65976: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65977: LD_INT 0
65979: PPUSH
65980: PPUSH
65981: PPUSH
65982: PPUSH
65983: PPUSH
// if not area or not rate or not max then
65984: LD_VAR 0 1
65988: NOT
65989: PUSH
65990: LD_VAR 0 2
65994: NOT
65995: OR
65996: PUSH
65997: LD_VAR 0 4
66001: NOT
66002: OR
66003: IFFALSE 66007
// exit ;
66005: GO 66196
// while 1 do
66007: LD_INT 1
66009: IFFALSE 66196
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66011: LD_ADDR_VAR 0 9
66015: PUSH
66016: LD_VAR 0 1
66020: PPUSH
66021: LD_INT 1
66023: PPUSH
66024: CALL_OW 287
66028: PUSH
66029: LD_INT 10
66031: MUL
66032: ST_TO_ADDR
// r := rate / 10 ;
66033: LD_ADDR_VAR 0 7
66037: PUSH
66038: LD_VAR 0 2
66042: PUSH
66043: LD_INT 10
66045: DIVREAL
66046: ST_TO_ADDR
// time := 1 1$00 ;
66047: LD_ADDR_VAR 0 8
66051: PUSH
66052: LD_INT 2100
66054: ST_TO_ADDR
// if amount < min then
66055: LD_VAR 0 9
66059: PUSH
66060: LD_VAR 0 3
66064: LESS
66065: IFFALSE 66083
// r := r * 2 else
66067: LD_ADDR_VAR 0 7
66071: PUSH
66072: LD_VAR 0 7
66076: PUSH
66077: LD_INT 2
66079: MUL
66080: ST_TO_ADDR
66081: GO 66109
// if amount > max then
66083: LD_VAR 0 9
66087: PUSH
66088: LD_VAR 0 4
66092: GREATER
66093: IFFALSE 66109
// r := r / 2 ;
66095: LD_ADDR_VAR 0 7
66099: PUSH
66100: LD_VAR 0 7
66104: PUSH
66105: LD_INT 2
66107: DIVREAL
66108: ST_TO_ADDR
// time := time / r ;
66109: LD_ADDR_VAR 0 8
66113: PUSH
66114: LD_VAR 0 8
66118: PUSH
66119: LD_VAR 0 7
66123: DIVREAL
66124: ST_TO_ADDR
// if time < 0 then
66125: LD_VAR 0 8
66129: PUSH
66130: LD_INT 0
66132: LESS
66133: IFFALSE 66150
// time := time * - 1 ;
66135: LD_ADDR_VAR 0 8
66139: PUSH
66140: LD_VAR 0 8
66144: PUSH
66145: LD_INT 1
66147: NEG
66148: MUL
66149: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66150: LD_VAR 0 8
66154: PUSH
66155: LD_INT 35
66157: PPUSH
66158: LD_INT 875
66160: PPUSH
66161: CALL_OW 12
66165: PLUS
66166: PPUSH
66167: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66171: LD_INT 1
66173: PPUSH
66174: LD_INT 5
66176: PPUSH
66177: CALL_OW 12
66181: PPUSH
66182: LD_VAR 0 1
66186: PPUSH
66187: LD_INT 1
66189: PPUSH
66190: CALL_OW 55
// end ;
66194: GO 66007
// end ;
66196: LD_VAR 0 5
66200: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66201: LD_INT 0
66203: PPUSH
66204: PPUSH
66205: PPUSH
66206: PPUSH
66207: PPUSH
66208: PPUSH
66209: PPUSH
66210: PPUSH
// if not turrets or not factories then
66211: LD_VAR 0 1
66215: NOT
66216: PUSH
66217: LD_VAR 0 2
66221: NOT
66222: OR
66223: IFFALSE 66227
// exit ;
66225: GO 66534
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66227: LD_ADDR_VAR 0 10
66231: PUSH
66232: LD_INT 5
66234: PUSH
66235: LD_INT 6
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 2
66244: PUSH
66245: LD_INT 4
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 3
66254: PUSH
66255: LD_INT 5
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 24
66269: PUSH
66270: LD_INT 25
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 23
66279: PUSH
66280: LD_INT 27
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 42
66293: PUSH
66294: LD_INT 43
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 44
66303: PUSH
66304: LD_INT 46
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 45
66313: PUSH
66314: LD_INT 47
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: LIST
66330: ST_TO_ADDR
// result := [ ] ;
66331: LD_ADDR_VAR 0 3
66335: PUSH
66336: EMPTY
66337: ST_TO_ADDR
// for i in turrets do
66338: LD_ADDR_VAR 0 4
66342: PUSH
66343: LD_VAR 0 1
66347: PUSH
66348: FOR_IN
66349: IFFALSE 66532
// begin nat := GetNation ( i ) ;
66351: LD_ADDR_VAR 0 7
66355: PUSH
66356: LD_VAR 0 4
66360: PPUSH
66361: CALL_OW 248
66365: ST_TO_ADDR
// weapon := 0 ;
66366: LD_ADDR_VAR 0 8
66370: PUSH
66371: LD_INT 0
66373: ST_TO_ADDR
// if not nat then
66374: LD_VAR 0 7
66378: NOT
66379: IFFALSE 66383
// continue ;
66381: GO 66348
// for j in list [ nat ] do
66383: LD_ADDR_VAR 0 5
66387: PUSH
66388: LD_VAR 0 10
66392: PUSH
66393: LD_VAR 0 7
66397: ARRAY
66398: PUSH
66399: FOR_IN
66400: IFFALSE 66441
// if GetBWeapon ( i ) = j [ 1 ] then
66402: LD_VAR 0 4
66406: PPUSH
66407: CALL_OW 269
66411: PUSH
66412: LD_VAR 0 5
66416: PUSH
66417: LD_INT 1
66419: ARRAY
66420: EQUAL
66421: IFFALSE 66439
// begin weapon := j [ 2 ] ;
66423: LD_ADDR_VAR 0 8
66427: PUSH
66428: LD_VAR 0 5
66432: PUSH
66433: LD_INT 2
66435: ARRAY
66436: ST_TO_ADDR
// break ;
66437: GO 66441
// end ;
66439: GO 66399
66441: POP
66442: POP
// if not weapon then
66443: LD_VAR 0 8
66447: NOT
66448: IFFALSE 66452
// continue ;
66450: GO 66348
// for k in factories do
66452: LD_ADDR_VAR 0 6
66456: PUSH
66457: LD_VAR 0 2
66461: PUSH
66462: FOR_IN
66463: IFFALSE 66528
// begin weapons := AvailableWeaponList ( k ) ;
66465: LD_ADDR_VAR 0 9
66469: PUSH
66470: LD_VAR 0 6
66474: PPUSH
66475: CALL_OW 478
66479: ST_TO_ADDR
// if not weapons then
66480: LD_VAR 0 9
66484: NOT
66485: IFFALSE 66489
// continue ;
66487: GO 66462
// if weapon in weapons then
66489: LD_VAR 0 8
66493: PUSH
66494: LD_VAR 0 9
66498: IN
66499: IFFALSE 66526
// begin result := [ i , weapon ] ;
66501: LD_ADDR_VAR 0 3
66505: PUSH
66506: LD_VAR 0 4
66510: PUSH
66511: LD_VAR 0 8
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: ST_TO_ADDR
// exit ;
66520: POP
66521: POP
66522: POP
66523: POP
66524: GO 66534
// end ; end ;
66526: GO 66462
66528: POP
66529: POP
// end ;
66530: GO 66348
66532: POP
66533: POP
// end ;
66534: LD_VAR 0 3
66538: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66539: LD_INT 0
66541: PPUSH
// if not side or side > 8 then
66542: LD_VAR 0 3
66546: NOT
66547: PUSH
66548: LD_VAR 0 3
66552: PUSH
66553: LD_INT 8
66555: GREATER
66556: OR
66557: IFFALSE 66561
// exit ;
66559: GO 66620
// if not range then
66561: LD_VAR 0 4
66565: NOT
66566: IFFALSE 66577
// range := - 12 ;
66568: LD_ADDR_VAR 0 4
66572: PUSH
66573: LD_INT 12
66575: NEG
66576: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66577: LD_VAR 0 1
66581: PPUSH
66582: LD_VAR 0 2
66586: PPUSH
66587: LD_VAR 0 3
66591: PPUSH
66592: LD_VAR 0 4
66596: PPUSH
66597: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66601: LD_VAR 0 1
66605: PPUSH
66606: LD_VAR 0 2
66610: PPUSH
66611: LD_VAR 0 3
66615: PPUSH
66616: CALL_OW 331
// end ;
66620: LD_VAR 0 5
66624: RET
// export function Video ( mode ) ; begin
66625: LD_INT 0
66627: PPUSH
// ingame_video = mode ;
66628: LD_ADDR_OWVAR 52
66632: PUSH
66633: LD_VAR 0 1
66637: ST_TO_ADDR
// interface_hidden = mode ;
66638: LD_ADDR_OWVAR 54
66642: PUSH
66643: LD_VAR 0 1
66647: ST_TO_ADDR
// end ;
66648: LD_VAR 0 2
66652: RET
// export function Join ( array , element ) ; begin
66653: LD_INT 0
66655: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66656: LD_ADDR_VAR 0 3
66660: PUSH
66661: LD_VAR 0 1
66665: PPUSH
66666: LD_VAR 0 1
66670: PUSH
66671: LD_INT 1
66673: PLUS
66674: PPUSH
66675: LD_VAR 0 2
66679: PPUSH
66680: CALL_OW 1
66684: ST_TO_ADDR
// end ;
66685: LD_VAR 0 3
66689: RET
// export function JoinUnion ( array , element ) ; begin
66690: LD_INT 0
66692: PPUSH
// result := array union element ;
66693: LD_ADDR_VAR 0 3
66697: PUSH
66698: LD_VAR 0 1
66702: PUSH
66703: LD_VAR 0 2
66707: UNION
66708: ST_TO_ADDR
// end ;
66709: LD_VAR 0 3
66713: RET
// export function GetBehemoths ( side ) ; begin
66714: LD_INT 0
66716: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66717: LD_ADDR_VAR 0 2
66721: PUSH
66722: LD_INT 22
66724: PUSH
66725: LD_VAR 0 1
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 31
66736: PUSH
66737: LD_INT 25
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PPUSH
66748: CALL_OW 69
66752: ST_TO_ADDR
// end ;
66753: LD_VAR 0 2
66757: RET
// export function Shuffle ( array ) ; var i , index ; begin
66758: LD_INT 0
66760: PPUSH
66761: PPUSH
66762: PPUSH
// result := [ ] ;
66763: LD_ADDR_VAR 0 2
66767: PUSH
66768: EMPTY
66769: ST_TO_ADDR
// if not array then
66770: LD_VAR 0 1
66774: NOT
66775: IFFALSE 66779
// exit ;
66777: GO 66878
// Randomize ;
66779: CALL_OW 10
// for i = array downto 1 do
66783: LD_ADDR_VAR 0 3
66787: PUSH
66788: DOUBLE
66789: LD_VAR 0 1
66793: INC
66794: ST_TO_ADDR
66795: LD_INT 1
66797: PUSH
66798: FOR_DOWNTO
66799: IFFALSE 66876
// begin index := rand ( 1 , array ) ;
66801: LD_ADDR_VAR 0 4
66805: PUSH
66806: LD_INT 1
66808: PPUSH
66809: LD_VAR 0 1
66813: PPUSH
66814: CALL_OW 12
66818: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66819: LD_ADDR_VAR 0 2
66823: PUSH
66824: LD_VAR 0 2
66828: PPUSH
66829: LD_VAR 0 2
66833: PUSH
66834: LD_INT 1
66836: PLUS
66837: PPUSH
66838: LD_VAR 0 1
66842: PUSH
66843: LD_VAR 0 4
66847: ARRAY
66848: PPUSH
66849: CALL_OW 2
66853: ST_TO_ADDR
// array := Delete ( array , index ) ;
66854: LD_ADDR_VAR 0 1
66858: PUSH
66859: LD_VAR 0 1
66863: PPUSH
66864: LD_VAR 0 4
66868: PPUSH
66869: CALL_OW 3
66873: ST_TO_ADDR
// end ;
66874: GO 66798
66876: POP
66877: POP
// end ;
66878: LD_VAR 0 2
66882: RET
// export function GetBaseMaterials ( base ) ; begin
66883: LD_INT 0
66885: PPUSH
// result := [ 0 , 0 , 0 ] ;
66886: LD_ADDR_VAR 0 2
66890: PUSH
66891: LD_INT 0
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: LD_INT 0
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: LIST
66904: ST_TO_ADDR
// if not base then
66905: LD_VAR 0 1
66909: NOT
66910: IFFALSE 66914
// exit ;
66912: GO 66963
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66914: LD_ADDR_VAR 0 2
66918: PUSH
66919: LD_VAR 0 1
66923: PPUSH
66924: LD_INT 1
66926: PPUSH
66927: CALL_OW 275
66931: PUSH
66932: LD_VAR 0 1
66936: PPUSH
66937: LD_INT 2
66939: PPUSH
66940: CALL_OW 275
66944: PUSH
66945: LD_VAR 0 1
66949: PPUSH
66950: LD_INT 3
66952: PPUSH
66953: CALL_OW 275
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: LIST
66962: ST_TO_ADDR
// end ;
66963: LD_VAR 0 2
66967: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66968: LD_INT 0
66970: PPUSH
66971: PPUSH
// result := array ;
66972: LD_ADDR_VAR 0 3
66976: PUSH
66977: LD_VAR 0 1
66981: ST_TO_ADDR
// if size >= result then
66982: LD_VAR 0 2
66986: PUSH
66987: LD_VAR 0 3
66991: GREATEREQUAL
66992: IFFALSE 66996
// exit ;
66994: GO 67046
// if size then
66996: LD_VAR 0 2
67000: IFFALSE 67046
// for i := array downto size do
67002: LD_ADDR_VAR 0 4
67006: PUSH
67007: DOUBLE
67008: LD_VAR 0 1
67012: INC
67013: ST_TO_ADDR
67014: LD_VAR 0 2
67018: PUSH
67019: FOR_DOWNTO
67020: IFFALSE 67044
// result := Delete ( result , result ) ;
67022: LD_ADDR_VAR 0 3
67026: PUSH
67027: LD_VAR 0 3
67031: PPUSH
67032: LD_VAR 0 3
67036: PPUSH
67037: CALL_OW 3
67041: ST_TO_ADDR
67042: GO 67019
67044: POP
67045: POP
// end ;
67046: LD_VAR 0 3
67050: RET
// export function ComExit ( unit ) ; var tmp ; begin
67051: LD_INT 0
67053: PPUSH
67054: PPUSH
// if not IsInUnit ( unit ) then
67055: LD_VAR 0 1
67059: PPUSH
67060: CALL_OW 310
67064: NOT
67065: IFFALSE 67069
// exit ;
67067: GO 67129
// tmp := IsInUnit ( unit ) ;
67069: LD_ADDR_VAR 0 3
67073: PUSH
67074: LD_VAR 0 1
67078: PPUSH
67079: CALL_OW 310
67083: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67084: LD_VAR 0 3
67088: PPUSH
67089: CALL_OW 247
67093: PUSH
67094: LD_INT 2
67096: EQUAL
67097: IFFALSE 67110
// ComExitVehicle ( unit ) else
67099: LD_VAR 0 1
67103: PPUSH
67104: CALL_OW 121
67108: GO 67119
// ComExitBuilding ( unit ) ;
67110: LD_VAR 0 1
67114: PPUSH
67115: CALL_OW 122
// result := tmp ;
67119: LD_ADDR_VAR 0 2
67123: PUSH
67124: LD_VAR 0 3
67128: ST_TO_ADDR
// end ;
67129: LD_VAR 0 2
67133: RET
// export function ComExitAll ( units ) ; var i ; begin
67134: LD_INT 0
67136: PPUSH
67137: PPUSH
// if not units then
67138: LD_VAR 0 1
67142: NOT
67143: IFFALSE 67147
// exit ;
67145: GO 67173
// for i in units do
67147: LD_ADDR_VAR 0 3
67151: PUSH
67152: LD_VAR 0 1
67156: PUSH
67157: FOR_IN
67158: IFFALSE 67171
// ComExit ( i ) ;
67160: LD_VAR 0 3
67164: PPUSH
67165: CALL 67051 0 1
67169: GO 67157
67171: POP
67172: POP
// end ;
67173: LD_VAR 0 2
67177: RET
// export function ResetHc ; begin
67178: LD_INT 0
67180: PPUSH
// InitHc ;
67181: CALL_OW 19
// hc_importance := 0 ;
67185: LD_ADDR_OWVAR 32
67189: PUSH
67190: LD_INT 0
67192: ST_TO_ADDR
// end ;
67193: LD_VAR 0 1
67197: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67198: LD_INT 0
67200: PPUSH
67201: PPUSH
67202: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67203: LD_ADDR_VAR 0 6
67207: PUSH
67208: LD_VAR 0 1
67212: PUSH
67213: LD_VAR 0 3
67217: PLUS
67218: PUSH
67219: LD_INT 2
67221: DIV
67222: ST_TO_ADDR
// if _x < 0 then
67223: LD_VAR 0 6
67227: PUSH
67228: LD_INT 0
67230: LESS
67231: IFFALSE 67248
// _x := _x * - 1 ;
67233: LD_ADDR_VAR 0 6
67237: PUSH
67238: LD_VAR 0 6
67242: PUSH
67243: LD_INT 1
67245: NEG
67246: MUL
67247: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67248: LD_ADDR_VAR 0 7
67252: PUSH
67253: LD_VAR 0 2
67257: PUSH
67258: LD_VAR 0 4
67262: PLUS
67263: PUSH
67264: LD_INT 2
67266: DIV
67267: ST_TO_ADDR
// if _y < 0 then
67268: LD_VAR 0 7
67272: PUSH
67273: LD_INT 0
67275: LESS
67276: IFFALSE 67293
// _y := _y * - 1 ;
67278: LD_ADDR_VAR 0 7
67282: PUSH
67283: LD_VAR 0 7
67287: PUSH
67288: LD_INT 1
67290: NEG
67291: MUL
67292: ST_TO_ADDR
// result := [ _x , _y ] ;
67293: LD_ADDR_VAR 0 5
67297: PUSH
67298: LD_VAR 0 6
67302: PUSH
67303: LD_VAR 0 7
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: ST_TO_ADDR
// end ;
67312: LD_VAR 0 5
67316: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67317: LD_INT 0
67319: PPUSH
67320: PPUSH
67321: PPUSH
67322: PPUSH
// task := GetTaskList ( unit ) ;
67323: LD_ADDR_VAR 0 7
67327: PUSH
67328: LD_VAR 0 1
67332: PPUSH
67333: CALL_OW 437
67337: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67338: LD_VAR 0 7
67342: NOT
67343: PUSH
67344: LD_VAR 0 1
67348: PPUSH
67349: LD_VAR 0 2
67353: PPUSH
67354: CALL_OW 308
67358: NOT
67359: AND
67360: IFFALSE 67364
// exit ;
67362: GO 67482
// if IsInArea ( unit , area ) then
67364: LD_VAR 0 1
67368: PPUSH
67369: LD_VAR 0 2
67373: PPUSH
67374: CALL_OW 308
67378: IFFALSE 67396
// begin ComMoveToArea ( unit , goAway ) ;
67380: LD_VAR 0 1
67384: PPUSH
67385: LD_VAR 0 3
67389: PPUSH
67390: CALL_OW 113
// exit ;
67394: GO 67482
// end ; if task [ 1 ] [ 1 ] <> M then
67396: LD_VAR 0 7
67400: PUSH
67401: LD_INT 1
67403: ARRAY
67404: PUSH
67405: LD_INT 1
67407: ARRAY
67408: PUSH
67409: LD_STRING M
67411: NONEQUAL
67412: IFFALSE 67416
// exit ;
67414: GO 67482
// x := task [ 1 ] [ 2 ] ;
67416: LD_ADDR_VAR 0 5
67420: PUSH
67421: LD_VAR 0 7
67425: PUSH
67426: LD_INT 1
67428: ARRAY
67429: PUSH
67430: LD_INT 2
67432: ARRAY
67433: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67434: LD_ADDR_VAR 0 6
67438: PUSH
67439: LD_VAR 0 7
67443: PUSH
67444: LD_INT 1
67446: ARRAY
67447: PUSH
67448: LD_INT 3
67450: ARRAY
67451: ST_TO_ADDR
// if InArea ( x , y , area ) then
67452: LD_VAR 0 5
67456: PPUSH
67457: LD_VAR 0 6
67461: PPUSH
67462: LD_VAR 0 2
67466: PPUSH
67467: CALL_OW 309
67471: IFFALSE 67482
// ComStop ( unit ) ;
67473: LD_VAR 0 1
67477: PPUSH
67478: CALL_OW 141
// end ;
67482: LD_VAR 0 4
67486: RET
// export function Abs ( value ) ; begin
67487: LD_INT 0
67489: PPUSH
// result := value ;
67490: LD_ADDR_VAR 0 2
67494: PUSH
67495: LD_VAR 0 1
67499: ST_TO_ADDR
// if value < 0 then
67500: LD_VAR 0 1
67504: PUSH
67505: LD_INT 0
67507: LESS
67508: IFFALSE 67525
// result := value * - 1 ;
67510: LD_ADDR_VAR 0 2
67514: PUSH
67515: LD_VAR 0 1
67519: PUSH
67520: LD_INT 1
67522: NEG
67523: MUL
67524: ST_TO_ADDR
// end ;
67525: LD_VAR 0 2
67529: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67530: LD_INT 0
67532: PPUSH
67533: PPUSH
67534: PPUSH
67535: PPUSH
67536: PPUSH
67537: PPUSH
67538: PPUSH
67539: PPUSH
// if not unit or not building then
67540: LD_VAR 0 1
67544: NOT
67545: PUSH
67546: LD_VAR 0 2
67550: NOT
67551: OR
67552: IFFALSE 67556
// exit ;
67554: GO 67782
// x := GetX ( building ) ;
67556: LD_ADDR_VAR 0 4
67560: PUSH
67561: LD_VAR 0 2
67565: PPUSH
67566: CALL_OW 250
67570: ST_TO_ADDR
// y := GetY ( building ) ;
67571: LD_ADDR_VAR 0 6
67575: PUSH
67576: LD_VAR 0 2
67580: PPUSH
67581: CALL_OW 251
67585: ST_TO_ADDR
// d := GetDir ( building ) ;
67586: LD_ADDR_VAR 0 8
67590: PUSH
67591: LD_VAR 0 2
67595: PPUSH
67596: CALL_OW 254
67600: ST_TO_ADDR
// r := 4 ;
67601: LD_ADDR_VAR 0 9
67605: PUSH
67606: LD_INT 4
67608: ST_TO_ADDR
// for i := 1 to 5 do
67609: LD_ADDR_VAR 0 10
67613: PUSH
67614: DOUBLE
67615: LD_INT 1
67617: DEC
67618: ST_TO_ADDR
67619: LD_INT 5
67621: PUSH
67622: FOR_TO
67623: IFFALSE 67780
// begin _x := ShiftX ( x , d , r + i ) ;
67625: LD_ADDR_VAR 0 5
67629: PUSH
67630: LD_VAR 0 4
67634: PPUSH
67635: LD_VAR 0 8
67639: PPUSH
67640: LD_VAR 0 9
67644: PUSH
67645: LD_VAR 0 10
67649: PLUS
67650: PPUSH
67651: CALL_OW 272
67655: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67656: LD_ADDR_VAR 0 7
67660: PUSH
67661: LD_VAR 0 6
67665: PPUSH
67666: LD_VAR 0 8
67670: PPUSH
67671: LD_VAR 0 9
67675: PUSH
67676: LD_VAR 0 10
67680: PLUS
67681: PPUSH
67682: CALL_OW 273
67686: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67687: LD_VAR 0 5
67691: PPUSH
67692: LD_VAR 0 7
67696: PPUSH
67697: CALL_OW 488
67701: PUSH
67702: LD_VAR 0 5
67706: PPUSH
67707: LD_VAR 0 7
67711: PPUSH
67712: CALL_OW 428
67716: PPUSH
67717: CALL_OW 247
67721: PUSH
67722: LD_INT 3
67724: PUSH
67725: LD_INT 2
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: IN
67732: NOT
67733: AND
67734: IFFALSE 67778
// begin ComMoveXY ( unit , _x , _y ) ;
67736: LD_VAR 0 1
67740: PPUSH
67741: LD_VAR 0 5
67745: PPUSH
67746: LD_VAR 0 7
67750: PPUSH
67751: CALL_OW 111
// result := [ _x , _y ] ;
67755: LD_ADDR_VAR 0 3
67759: PUSH
67760: LD_VAR 0 5
67764: PUSH
67765: LD_VAR 0 7
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: ST_TO_ADDR
// exit ;
67774: POP
67775: POP
67776: GO 67782
// end ; end ;
67778: GO 67622
67780: POP
67781: POP
// end ;
67782: LD_VAR 0 3
67786: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67787: LD_INT 0
67789: PPUSH
67790: PPUSH
67791: PPUSH
// result := 0 ;
67792: LD_ADDR_VAR 0 3
67796: PUSH
67797: LD_INT 0
67799: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67800: LD_VAR 0 1
67804: PUSH
67805: LD_INT 0
67807: LESS
67808: PUSH
67809: LD_VAR 0 1
67813: PUSH
67814: LD_INT 8
67816: GREATER
67817: OR
67818: PUSH
67819: LD_VAR 0 2
67823: PUSH
67824: LD_INT 0
67826: LESS
67827: OR
67828: PUSH
67829: LD_VAR 0 2
67833: PUSH
67834: LD_INT 8
67836: GREATER
67837: OR
67838: IFFALSE 67842
// exit ;
67840: GO 67917
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67842: LD_ADDR_VAR 0 4
67846: PUSH
67847: LD_INT 22
67849: PUSH
67850: LD_VAR 0 2
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PPUSH
67859: CALL_OW 69
67863: PUSH
67864: FOR_IN
67865: IFFALSE 67915
// begin un := UnitShoot ( i ) ;
67867: LD_ADDR_VAR 0 5
67871: PUSH
67872: LD_VAR 0 4
67876: PPUSH
67877: CALL_OW 504
67881: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67882: LD_VAR 0 5
67886: PPUSH
67887: CALL_OW 255
67891: PUSH
67892: LD_VAR 0 1
67896: EQUAL
67897: IFFALSE 67913
// begin result := un ;
67899: LD_ADDR_VAR 0 3
67903: PUSH
67904: LD_VAR 0 5
67908: ST_TO_ADDR
// exit ;
67909: POP
67910: POP
67911: GO 67917
// end ; end ;
67913: GO 67864
67915: POP
67916: POP
// end ;
67917: LD_VAR 0 3
67921: RET
// export function GetCargoBay ( units ) ; begin
67922: LD_INT 0
67924: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67925: LD_ADDR_VAR 0 2
67929: PUSH
67930: LD_VAR 0 1
67934: PPUSH
67935: LD_INT 2
67937: PUSH
67938: LD_INT 34
67940: PUSH
67941: LD_INT 12
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 34
67950: PUSH
67951: LD_INT 51
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 34
67960: PUSH
67961: LD_INT 32
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 34
67970: PUSH
67971: LD_INT 89
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: PPUSH
67985: CALL_OW 72
67989: ST_TO_ADDR
// end ;
67990: LD_VAR 0 2
67994: RET
// export function Negate ( value ) ; begin
67995: LD_INT 0
67997: PPUSH
// result := not value ;
67998: LD_ADDR_VAR 0 2
68002: PUSH
68003: LD_VAR 0 1
68007: NOT
68008: ST_TO_ADDR
// end ;
68009: LD_VAR 0 2
68013: RET
// export function Inc ( value ) ; begin
68014: LD_INT 0
68016: PPUSH
// result := value + 1 ;
68017: LD_ADDR_VAR 0 2
68021: PUSH
68022: LD_VAR 0 1
68026: PUSH
68027: LD_INT 1
68029: PLUS
68030: ST_TO_ADDR
// end ;
68031: LD_VAR 0 2
68035: RET
// export function Dec ( value ) ; begin
68036: LD_INT 0
68038: PPUSH
// result := value - 1 ;
68039: LD_ADDR_VAR 0 2
68043: PUSH
68044: LD_VAR 0 1
68048: PUSH
68049: LD_INT 1
68051: MINUS
68052: ST_TO_ADDR
// end ;
68053: LD_VAR 0 2
68057: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68058: LD_INT 0
68060: PPUSH
68061: PPUSH
68062: PPUSH
68063: PPUSH
68064: PPUSH
68065: PPUSH
68066: PPUSH
68067: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68068: LD_VAR 0 1
68072: PPUSH
68073: LD_VAR 0 2
68077: PPUSH
68078: CALL_OW 488
68082: NOT
68083: PUSH
68084: LD_VAR 0 3
68088: PPUSH
68089: LD_VAR 0 4
68093: PPUSH
68094: CALL_OW 488
68098: NOT
68099: OR
68100: IFFALSE 68113
// begin result := - 1 ;
68102: LD_ADDR_VAR 0 5
68106: PUSH
68107: LD_INT 1
68109: NEG
68110: ST_TO_ADDR
// exit ;
68111: GO 68348
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68113: LD_ADDR_VAR 0 12
68117: PUSH
68118: LD_VAR 0 1
68122: PPUSH
68123: LD_VAR 0 2
68127: PPUSH
68128: LD_VAR 0 3
68132: PPUSH
68133: LD_VAR 0 4
68137: PPUSH
68138: CALL 67198 0 4
68142: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68143: LD_ADDR_VAR 0 11
68147: PUSH
68148: LD_VAR 0 1
68152: PPUSH
68153: LD_VAR 0 2
68157: PPUSH
68158: LD_VAR 0 12
68162: PUSH
68163: LD_INT 1
68165: ARRAY
68166: PPUSH
68167: LD_VAR 0 12
68171: PUSH
68172: LD_INT 2
68174: ARRAY
68175: PPUSH
68176: CALL_OW 298
68180: ST_TO_ADDR
// distance := 9999 ;
68181: LD_ADDR_VAR 0 10
68185: PUSH
68186: LD_INT 9999
68188: ST_TO_ADDR
// for i := 0 to 5 do
68189: LD_ADDR_VAR 0 6
68193: PUSH
68194: DOUBLE
68195: LD_INT 0
68197: DEC
68198: ST_TO_ADDR
68199: LD_INT 5
68201: PUSH
68202: FOR_TO
68203: IFFALSE 68346
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68205: LD_ADDR_VAR 0 7
68209: PUSH
68210: LD_VAR 0 1
68214: PPUSH
68215: LD_VAR 0 6
68219: PPUSH
68220: LD_VAR 0 11
68224: PPUSH
68225: CALL_OW 272
68229: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68230: LD_ADDR_VAR 0 8
68234: PUSH
68235: LD_VAR 0 2
68239: PPUSH
68240: LD_VAR 0 6
68244: PPUSH
68245: LD_VAR 0 11
68249: PPUSH
68250: CALL_OW 273
68254: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68255: LD_VAR 0 7
68259: PPUSH
68260: LD_VAR 0 8
68264: PPUSH
68265: CALL_OW 488
68269: NOT
68270: IFFALSE 68274
// continue ;
68272: GO 68202
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68274: LD_ADDR_VAR 0 9
68278: PUSH
68279: LD_VAR 0 12
68283: PUSH
68284: LD_INT 1
68286: ARRAY
68287: PPUSH
68288: LD_VAR 0 12
68292: PUSH
68293: LD_INT 2
68295: ARRAY
68296: PPUSH
68297: LD_VAR 0 7
68301: PPUSH
68302: LD_VAR 0 8
68306: PPUSH
68307: CALL_OW 298
68311: ST_TO_ADDR
// if tmp < distance then
68312: LD_VAR 0 9
68316: PUSH
68317: LD_VAR 0 10
68321: LESS
68322: IFFALSE 68344
// begin result := i ;
68324: LD_ADDR_VAR 0 5
68328: PUSH
68329: LD_VAR 0 6
68333: ST_TO_ADDR
// distance := tmp ;
68334: LD_ADDR_VAR 0 10
68338: PUSH
68339: LD_VAR 0 9
68343: ST_TO_ADDR
// end ; end ;
68344: GO 68202
68346: POP
68347: POP
// end ;
68348: LD_VAR 0 5
68352: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68353: LD_INT 0
68355: PPUSH
68356: PPUSH
// if not driver or not IsInUnit ( driver ) then
68357: LD_VAR 0 1
68361: NOT
68362: PUSH
68363: LD_VAR 0 1
68367: PPUSH
68368: CALL_OW 310
68372: NOT
68373: OR
68374: IFFALSE 68378
// exit ;
68376: GO 68468
// vehicle := IsInUnit ( driver ) ;
68378: LD_ADDR_VAR 0 3
68382: PUSH
68383: LD_VAR 0 1
68387: PPUSH
68388: CALL_OW 310
68392: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68393: LD_VAR 0 1
68397: PPUSH
68398: LD_STRING \
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: LD_INT 0
68406: PUSH
68407: LD_INT 0
68409: PUSH
68410: LD_INT 0
68412: PUSH
68413: LD_INT 0
68415: PUSH
68416: LD_INT 0
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: PUSH
68428: LD_STRING E
68430: PUSH
68431: LD_INT 0
68433: PUSH
68434: LD_INT 0
68436: PUSH
68437: LD_VAR 0 3
68441: PUSH
68442: LD_INT 0
68444: PUSH
68445: LD_INT 0
68447: PUSH
68448: LD_INT 0
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PPUSH
68464: CALL_OW 446
// end ;
68468: LD_VAR 0 2
68472: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68473: LD_INT 0
68475: PPUSH
68476: PPUSH
// if not driver or not IsInUnit ( driver ) then
68477: LD_VAR 0 1
68481: NOT
68482: PUSH
68483: LD_VAR 0 1
68487: PPUSH
68488: CALL_OW 310
68492: NOT
68493: OR
68494: IFFALSE 68498
// exit ;
68496: GO 68588
// vehicle := IsInUnit ( driver ) ;
68498: LD_ADDR_VAR 0 3
68502: PUSH
68503: LD_VAR 0 1
68507: PPUSH
68508: CALL_OW 310
68512: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68513: LD_VAR 0 1
68517: PPUSH
68518: LD_STRING \
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: LD_INT 0
68526: PUSH
68527: LD_INT 0
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: LD_INT 0
68535: PUSH
68536: LD_INT 0
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: PUSH
68548: LD_STRING E
68550: PUSH
68551: LD_INT 0
68553: PUSH
68554: LD_INT 0
68556: PUSH
68557: LD_VAR 0 3
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: LD_INT 0
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PPUSH
68584: CALL_OW 447
// end ;
68588: LD_VAR 0 2
68592: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68593: LD_INT 0
68595: PPUSH
68596: PPUSH
68597: PPUSH
// tmp := [ ] ;
68598: LD_ADDR_VAR 0 5
68602: PUSH
68603: EMPTY
68604: ST_TO_ADDR
// for i in units do
68605: LD_ADDR_VAR 0 4
68609: PUSH
68610: LD_VAR 0 1
68614: PUSH
68615: FOR_IN
68616: IFFALSE 68654
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68618: LD_ADDR_VAR 0 5
68622: PUSH
68623: LD_VAR 0 5
68627: PPUSH
68628: LD_VAR 0 5
68632: PUSH
68633: LD_INT 1
68635: PLUS
68636: PPUSH
68637: LD_VAR 0 4
68641: PPUSH
68642: CALL_OW 256
68646: PPUSH
68647: CALL_OW 2
68651: ST_TO_ADDR
68652: GO 68615
68654: POP
68655: POP
// if not tmp then
68656: LD_VAR 0 5
68660: NOT
68661: IFFALSE 68665
// exit ;
68663: GO 68713
// if asc then
68665: LD_VAR 0 2
68669: IFFALSE 68693
// result := SortListByListAsc ( units , tmp ) else
68671: LD_ADDR_VAR 0 3
68675: PUSH
68676: LD_VAR 0 1
68680: PPUSH
68681: LD_VAR 0 5
68685: PPUSH
68686: CALL_OW 76
68690: ST_TO_ADDR
68691: GO 68713
// result := SortListByListDesc ( units , tmp ) ;
68693: LD_ADDR_VAR 0 3
68697: PUSH
68698: LD_VAR 0 1
68702: PPUSH
68703: LD_VAR 0 5
68707: PPUSH
68708: CALL_OW 77
68712: ST_TO_ADDR
// end ;
68713: LD_VAR 0 3
68717: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68718: LD_INT 0
68720: PPUSH
68721: PPUSH
// task := GetTaskList ( mech ) ;
68722: LD_ADDR_VAR 0 4
68726: PUSH
68727: LD_VAR 0 1
68731: PPUSH
68732: CALL_OW 437
68736: ST_TO_ADDR
// if not task then
68737: LD_VAR 0 4
68741: NOT
68742: IFFALSE 68746
// exit ;
68744: GO 68788
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68746: LD_ADDR_VAR 0 3
68750: PUSH
68751: LD_VAR 0 4
68755: PUSH
68756: LD_INT 1
68758: ARRAY
68759: PUSH
68760: LD_INT 1
68762: ARRAY
68763: PUSH
68764: LD_STRING r
68766: EQUAL
68767: PUSH
68768: LD_VAR 0 4
68772: PUSH
68773: LD_INT 1
68775: ARRAY
68776: PUSH
68777: LD_INT 4
68779: ARRAY
68780: PUSH
68781: LD_VAR 0 2
68785: EQUAL
68786: AND
68787: ST_TO_ADDR
// end ;
68788: LD_VAR 0 3
68792: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68793: LD_INT 0
68795: PPUSH
// SetDir ( unit , d ) ;
68796: LD_VAR 0 1
68800: PPUSH
68801: LD_VAR 0 4
68805: PPUSH
68806: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68810: LD_VAR 0 1
68814: PPUSH
68815: LD_VAR 0 2
68819: PPUSH
68820: LD_VAR 0 3
68824: PPUSH
68825: LD_VAR 0 5
68829: PPUSH
68830: CALL_OW 48
// end ;
68834: LD_VAR 0 6
68838: RET
// export function ToNaturalNumber ( number ) ; begin
68839: LD_INT 0
68841: PPUSH
// result := number div 1 ;
68842: LD_ADDR_VAR 0 2
68846: PUSH
68847: LD_VAR 0 1
68851: PUSH
68852: LD_INT 1
68854: DIV
68855: ST_TO_ADDR
// if number < 0 then
68856: LD_VAR 0 1
68860: PUSH
68861: LD_INT 0
68863: LESS
68864: IFFALSE 68874
// result := 0 ;
68866: LD_ADDR_VAR 0 2
68870: PUSH
68871: LD_INT 0
68873: ST_TO_ADDR
// end ;
68874: LD_VAR 0 2
68878: RET
// export function SortByClass ( units , class ) ; var un ; begin
68879: LD_INT 0
68881: PPUSH
68882: PPUSH
// if not units or not class then
68883: LD_VAR 0 1
68887: NOT
68888: PUSH
68889: LD_VAR 0 2
68893: NOT
68894: OR
68895: IFFALSE 68899
// exit ;
68897: GO 68994
// result := [ ] ;
68899: LD_ADDR_VAR 0 3
68903: PUSH
68904: EMPTY
68905: ST_TO_ADDR
// for un in units do
68906: LD_ADDR_VAR 0 4
68910: PUSH
68911: LD_VAR 0 1
68915: PUSH
68916: FOR_IN
68917: IFFALSE 68992
// if GetClass ( un ) = class then
68919: LD_VAR 0 4
68923: PPUSH
68924: CALL_OW 257
68928: PUSH
68929: LD_VAR 0 2
68933: EQUAL
68934: IFFALSE 68961
// result := Insert ( result , 1 , un ) else
68936: LD_ADDR_VAR 0 3
68940: PUSH
68941: LD_VAR 0 3
68945: PPUSH
68946: LD_INT 1
68948: PPUSH
68949: LD_VAR 0 4
68953: PPUSH
68954: CALL_OW 2
68958: ST_TO_ADDR
68959: GO 68990
// result := Replace ( result , result + 1 , un ) ;
68961: LD_ADDR_VAR 0 3
68965: PUSH
68966: LD_VAR 0 3
68970: PPUSH
68971: LD_VAR 0 3
68975: PUSH
68976: LD_INT 1
68978: PLUS
68979: PPUSH
68980: LD_VAR 0 4
68984: PPUSH
68985: CALL_OW 1
68989: ST_TO_ADDR
68990: GO 68916
68992: POP
68993: POP
// end ;
68994: LD_VAR 0 3
68998: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68999: LD_INT 0
69001: PPUSH
69002: PPUSH
69003: PPUSH
69004: PPUSH
69005: PPUSH
69006: PPUSH
69007: PPUSH
// result := [ ] ;
69008: LD_ADDR_VAR 0 4
69012: PUSH
69013: EMPTY
69014: ST_TO_ADDR
// if x - r < 0 then
69015: LD_VAR 0 1
69019: PUSH
69020: LD_VAR 0 3
69024: MINUS
69025: PUSH
69026: LD_INT 0
69028: LESS
69029: IFFALSE 69041
// min_x := 0 else
69031: LD_ADDR_VAR 0 8
69035: PUSH
69036: LD_INT 0
69038: ST_TO_ADDR
69039: GO 69057
// min_x := x - r ;
69041: LD_ADDR_VAR 0 8
69045: PUSH
69046: LD_VAR 0 1
69050: PUSH
69051: LD_VAR 0 3
69055: MINUS
69056: ST_TO_ADDR
// if y - r < 0 then
69057: LD_VAR 0 2
69061: PUSH
69062: LD_VAR 0 3
69066: MINUS
69067: PUSH
69068: LD_INT 0
69070: LESS
69071: IFFALSE 69083
// min_y := 0 else
69073: LD_ADDR_VAR 0 7
69077: PUSH
69078: LD_INT 0
69080: ST_TO_ADDR
69081: GO 69099
// min_y := y - r ;
69083: LD_ADDR_VAR 0 7
69087: PUSH
69088: LD_VAR 0 2
69092: PUSH
69093: LD_VAR 0 3
69097: MINUS
69098: ST_TO_ADDR
// max_x := x + r ;
69099: LD_ADDR_VAR 0 9
69103: PUSH
69104: LD_VAR 0 1
69108: PUSH
69109: LD_VAR 0 3
69113: PLUS
69114: ST_TO_ADDR
// max_y := y + r ;
69115: LD_ADDR_VAR 0 10
69119: PUSH
69120: LD_VAR 0 2
69124: PUSH
69125: LD_VAR 0 3
69129: PLUS
69130: ST_TO_ADDR
// for _x = min_x to max_x do
69131: LD_ADDR_VAR 0 5
69135: PUSH
69136: DOUBLE
69137: LD_VAR 0 8
69141: DEC
69142: ST_TO_ADDR
69143: LD_VAR 0 9
69147: PUSH
69148: FOR_TO
69149: IFFALSE 69250
// for _y = min_y to max_y do
69151: LD_ADDR_VAR 0 6
69155: PUSH
69156: DOUBLE
69157: LD_VAR 0 7
69161: DEC
69162: ST_TO_ADDR
69163: LD_VAR 0 10
69167: PUSH
69168: FOR_TO
69169: IFFALSE 69246
// begin if not ValidHex ( _x , _y ) then
69171: LD_VAR 0 5
69175: PPUSH
69176: LD_VAR 0 6
69180: PPUSH
69181: CALL_OW 488
69185: NOT
69186: IFFALSE 69190
// continue ;
69188: GO 69168
// if GetResourceTypeXY ( _x , _y ) then
69190: LD_VAR 0 5
69194: PPUSH
69195: LD_VAR 0 6
69199: PPUSH
69200: CALL_OW 283
69204: IFFALSE 69244
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69206: LD_ADDR_VAR 0 4
69210: PUSH
69211: LD_VAR 0 4
69215: PPUSH
69216: LD_VAR 0 4
69220: PUSH
69221: LD_INT 1
69223: PLUS
69224: PPUSH
69225: LD_VAR 0 5
69229: PUSH
69230: LD_VAR 0 6
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PPUSH
69239: CALL_OW 1
69243: ST_TO_ADDR
// end ;
69244: GO 69168
69246: POP
69247: POP
69248: GO 69148
69250: POP
69251: POP
// end ;
69252: LD_VAR 0 4
69256: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69257: LD_INT 0
69259: PPUSH
69260: PPUSH
69261: PPUSH
69262: PPUSH
69263: PPUSH
69264: PPUSH
69265: PPUSH
69266: PPUSH
// if not units then
69267: LD_VAR 0 1
69271: NOT
69272: IFFALSE 69276
// exit ;
69274: GO 69800
// result := UnitFilter ( units , [ f_ok ] ) ;
69276: LD_ADDR_VAR 0 3
69280: PUSH
69281: LD_VAR 0 1
69285: PPUSH
69286: LD_INT 50
69288: PUSH
69289: EMPTY
69290: LIST
69291: PPUSH
69292: CALL_OW 72
69296: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69297: LD_ADDR_VAR 0 8
69301: PUSH
69302: LD_VAR 0 1
69306: PUSH
69307: LD_INT 1
69309: ARRAY
69310: PPUSH
69311: CALL_OW 255
69315: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69316: LD_ADDR_VAR 0 10
69320: PUSH
69321: LD_INT 29
69323: PUSH
69324: LD_INT 91
69326: PUSH
69327: LD_INT 49
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: LIST
69334: ST_TO_ADDR
// if not result then
69335: LD_VAR 0 3
69339: NOT
69340: IFFALSE 69344
// exit ;
69342: GO 69800
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69344: LD_ADDR_VAR 0 5
69348: PUSH
69349: LD_INT 81
69351: PUSH
69352: LD_VAR 0 8
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PPUSH
69361: CALL_OW 69
69365: ST_TO_ADDR
// for i in result do
69366: LD_ADDR_VAR 0 4
69370: PUSH
69371: LD_VAR 0 3
69375: PUSH
69376: FOR_IN
69377: IFFALSE 69798
// begin tag := GetTag ( i ) + 1 ;
69379: LD_ADDR_VAR 0 9
69383: PUSH
69384: LD_VAR 0 4
69388: PPUSH
69389: CALL_OW 110
69393: PUSH
69394: LD_INT 1
69396: PLUS
69397: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69398: LD_ADDR_VAR 0 7
69402: PUSH
69403: LD_VAR 0 4
69407: PPUSH
69408: CALL_OW 250
69412: PPUSH
69413: LD_VAR 0 4
69417: PPUSH
69418: CALL_OW 251
69422: PPUSH
69423: LD_INT 6
69425: PPUSH
69426: CALL 68999 0 3
69430: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69431: LD_VAR 0 4
69435: PPUSH
69436: CALL_OW 247
69440: PUSH
69441: LD_INT 2
69443: EQUAL
69444: PUSH
69445: LD_VAR 0 7
69449: AND
69450: PUSH
69451: LD_VAR 0 4
69455: PPUSH
69456: CALL_OW 264
69460: PUSH
69461: LD_VAR 0 10
69465: IN
69466: NOT
69467: AND
69468: IFFALSE 69507
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69470: LD_VAR 0 4
69474: PPUSH
69475: LD_VAR 0 7
69479: PUSH
69480: LD_INT 1
69482: ARRAY
69483: PUSH
69484: LD_INT 1
69486: ARRAY
69487: PPUSH
69488: LD_VAR 0 7
69492: PUSH
69493: LD_INT 1
69495: ARRAY
69496: PUSH
69497: LD_INT 2
69499: ARRAY
69500: PPUSH
69501: CALL_OW 116
69505: GO 69796
// if path > tag then
69507: LD_VAR 0 2
69511: PUSH
69512: LD_VAR 0 9
69516: GREATER
69517: IFFALSE 69725
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69519: LD_ADDR_VAR 0 6
69523: PUSH
69524: LD_VAR 0 5
69528: PPUSH
69529: LD_INT 91
69531: PUSH
69532: LD_VAR 0 4
69536: PUSH
69537: LD_INT 8
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: LIST
69544: PPUSH
69545: CALL_OW 72
69549: ST_TO_ADDR
// if nearEnemy then
69550: LD_VAR 0 6
69554: IFFALSE 69623
// begin if GetWeapon ( i ) = ru_time_lapser then
69556: LD_VAR 0 4
69560: PPUSH
69561: CALL_OW 264
69565: PUSH
69566: LD_INT 49
69568: EQUAL
69569: IFFALSE 69597
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69571: LD_VAR 0 4
69575: PPUSH
69576: LD_VAR 0 6
69580: PPUSH
69581: LD_VAR 0 4
69585: PPUSH
69586: CALL_OW 74
69590: PPUSH
69591: CALL_OW 112
69595: GO 69621
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69597: LD_VAR 0 4
69601: PPUSH
69602: LD_VAR 0 6
69606: PPUSH
69607: LD_VAR 0 4
69611: PPUSH
69612: CALL_OW 74
69616: PPUSH
69617: CALL 70725 0 2
// end else
69621: GO 69723
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69623: LD_VAR 0 4
69627: PPUSH
69628: LD_VAR 0 2
69632: PUSH
69633: LD_VAR 0 9
69637: ARRAY
69638: PUSH
69639: LD_INT 1
69641: ARRAY
69642: PPUSH
69643: LD_VAR 0 2
69647: PUSH
69648: LD_VAR 0 9
69652: ARRAY
69653: PUSH
69654: LD_INT 2
69656: ARRAY
69657: PPUSH
69658: CALL_OW 297
69662: PUSH
69663: LD_INT 6
69665: GREATER
69666: IFFALSE 69709
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69668: LD_VAR 0 4
69672: PPUSH
69673: LD_VAR 0 2
69677: PUSH
69678: LD_VAR 0 9
69682: ARRAY
69683: PUSH
69684: LD_INT 1
69686: ARRAY
69687: PPUSH
69688: LD_VAR 0 2
69692: PUSH
69693: LD_VAR 0 9
69697: ARRAY
69698: PUSH
69699: LD_INT 2
69701: ARRAY
69702: PPUSH
69703: CALL_OW 114
69707: GO 69723
// SetTag ( i , tag ) ;
69709: LD_VAR 0 4
69713: PPUSH
69714: LD_VAR 0 9
69718: PPUSH
69719: CALL_OW 109
// end else
69723: GO 69796
// if enemy then
69725: LD_VAR 0 5
69729: IFFALSE 69796
// begin if GetWeapon ( i ) = ru_time_lapser then
69731: LD_VAR 0 4
69735: PPUSH
69736: CALL_OW 264
69740: PUSH
69741: LD_INT 49
69743: EQUAL
69744: IFFALSE 69772
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69746: LD_VAR 0 4
69750: PPUSH
69751: LD_VAR 0 5
69755: PPUSH
69756: LD_VAR 0 4
69760: PPUSH
69761: CALL_OW 74
69765: PPUSH
69766: CALL_OW 112
69770: GO 69796
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69772: LD_VAR 0 4
69776: PPUSH
69777: LD_VAR 0 5
69781: PPUSH
69782: LD_VAR 0 4
69786: PPUSH
69787: CALL_OW 74
69791: PPUSH
69792: CALL 70725 0 2
// end ; end ;
69796: GO 69376
69798: POP
69799: POP
// end ;
69800: LD_VAR 0 3
69804: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69805: LD_INT 0
69807: PPUSH
69808: PPUSH
69809: PPUSH
// if not unit or IsInUnit ( unit ) then
69810: LD_VAR 0 1
69814: NOT
69815: PUSH
69816: LD_VAR 0 1
69820: PPUSH
69821: CALL_OW 310
69825: OR
69826: IFFALSE 69830
// exit ;
69828: GO 69921
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69830: LD_ADDR_VAR 0 4
69834: PUSH
69835: LD_VAR 0 1
69839: PPUSH
69840: CALL_OW 250
69844: PPUSH
69845: LD_VAR 0 2
69849: PPUSH
69850: LD_INT 1
69852: PPUSH
69853: CALL_OW 272
69857: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69858: LD_ADDR_VAR 0 5
69862: PUSH
69863: LD_VAR 0 1
69867: PPUSH
69868: CALL_OW 251
69872: PPUSH
69873: LD_VAR 0 2
69877: PPUSH
69878: LD_INT 1
69880: PPUSH
69881: CALL_OW 273
69885: ST_TO_ADDR
// if ValidHex ( x , y ) then
69886: LD_VAR 0 4
69890: PPUSH
69891: LD_VAR 0 5
69895: PPUSH
69896: CALL_OW 488
69900: IFFALSE 69921
// ComTurnXY ( unit , x , y ) ;
69902: LD_VAR 0 1
69906: PPUSH
69907: LD_VAR 0 4
69911: PPUSH
69912: LD_VAR 0 5
69916: PPUSH
69917: CALL_OW 118
// end ;
69921: LD_VAR 0 3
69925: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69926: LD_INT 0
69928: PPUSH
69929: PPUSH
// result := false ;
69930: LD_ADDR_VAR 0 3
69934: PUSH
69935: LD_INT 0
69937: ST_TO_ADDR
// if not units then
69938: LD_VAR 0 2
69942: NOT
69943: IFFALSE 69947
// exit ;
69945: GO 69992
// for i in units do
69947: LD_ADDR_VAR 0 4
69951: PUSH
69952: LD_VAR 0 2
69956: PUSH
69957: FOR_IN
69958: IFFALSE 69990
// if See ( side , i ) then
69960: LD_VAR 0 1
69964: PPUSH
69965: LD_VAR 0 4
69969: PPUSH
69970: CALL_OW 292
69974: IFFALSE 69988
// begin result := true ;
69976: LD_ADDR_VAR 0 3
69980: PUSH
69981: LD_INT 1
69983: ST_TO_ADDR
// exit ;
69984: POP
69985: POP
69986: GO 69992
// end ;
69988: GO 69957
69990: POP
69991: POP
// end ;
69992: LD_VAR 0 3
69996: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69997: LD_INT 0
69999: PPUSH
70000: PPUSH
70001: PPUSH
70002: PPUSH
// if not unit or not points then
70003: LD_VAR 0 1
70007: NOT
70008: PUSH
70009: LD_VAR 0 2
70013: NOT
70014: OR
70015: IFFALSE 70019
// exit ;
70017: GO 70109
// dist := 99999 ;
70019: LD_ADDR_VAR 0 5
70023: PUSH
70024: LD_INT 99999
70026: ST_TO_ADDR
// for i in points do
70027: LD_ADDR_VAR 0 4
70031: PUSH
70032: LD_VAR 0 2
70036: PUSH
70037: FOR_IN
70038: IFFALSE 70107
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70040: LD_ADDR_VAR 0 6
70044: PUSH
70045: LD_VAR 0 1
70049: PPUSH
70050: LD_VAR 0 4
70054: PUSH
70055: LD_INT 1
70057: ARRAY
70058: PPUSH
70059: LD_VAR 0 4
70063: PUSH
70064: LD_INT 2
70066: ARRAY
70067: PPUSH
70068: CALL_OW 297
70072: ST_TO_ADDR
// if tmpDist < dist then
70073: LD_VAR 0 6
70077: PUSH
70078: LD_VAR 0 5
70082: LESS
70083: IFFALSE 70105
// begin result := i ;
70085: LD_ADDR_VAR 0 3
70089: PUSH
70090: LD_VAR 0 4
70094: ST_TO_ADDR
// dist := tmpDist ;
70095: LD_ADDR_VAR 0 5
70099: PUSH
70100: LD_VAR 0 6
70104: ST_TO_ADDR
// end ; end ;
70105: GO 70037
70107: POP
70108: POP
// end ;
70109: LD_VAR 0 3
70113: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70114: LD_INT 0
70116: PPUSH
// uc_side := side ;
70117: LD_ADDR_OWVAR 20
70121: PUSH
70122: LD_VAR 0 1
70126: ST_TO_ADDR
// uc_nation := 3 ;
70127: LD_ADDR_OWVAR 21
70131: PUSH
70132: LD_INT 3
70134: ST_TO_ADDR
// vc_chassis := 25 ;
70135: LD_ADDR_OWVAR 37
70139: PUSH
70140: LD_INT 25
70142: ST_TO_ADDR
// vc_engine := engine_siberite ;
70143: LD_ADDR_OWVAR 39
70147: PUSH
70148: LD_INT 3
70150: ST_TO_ADDR
// vc_control := control_computer ;
70151: LD_ADDR_OWVAR 38
70155: PUSH
70156: LD_INT 3
70158: ST_TO_ADDR
// vc_weapon := 59 ;
70159: LD_ADDR_OWVAR 40
70163: PUSH
70164: LD_INT 59
70166: ST_TO_ADDR
// result := CreateVehicle ;
70167: LD_ADDR_VAR 0 5
70171: PUSH
70172: CALL_OW 45
70176: ST_TO_ADDR
// SetDir ( result , d ) ;
70177: LD_VAR 0 5
70181: PPUSH
70182: LD_VAR 0 4
70186: PPUSH
70187: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70191: LD_VAR 0 5
70195: PPUSH
70196: LD_VAR 0 2
70200: PPUSH
70201: LD_VAR 0 3
70205: PPUSH
70206: LD_INT 0
70208: PPUSH
70209: CALL_OW 48
// end ;
70213: LD_VAR 0 5
70217: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70218: LD_INT 0
70220: PPUSH
70221: PPUSH
70222: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70223: LD_ADDR_VAR 0 2
70227: PUSH
70228: LD_INT 0
70230: PUSH
70231: LD_INT 0
70233: PUSH
70234: LD_INT 0
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70246: LD_VAR 0 1
70250: NOT
70251: PUSH
70252: LD_VAR 0 1
70256: PPUSH
70257: CALL_OW 264
70261: PUSH
70262: LD_INT 12
70264: PUSH
70265: LD_INT 51
70267: PUSH
70268: LD_INT 32
70270: PUSH
70271: LD_INT 89
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: IN
70280: NOT
70281: OR
70282: IFFALSE 70286
// exit ;
70284: GO 70384
// for i := 1 to 3 do
70286: LD_ADDR_VAR 0 3
70290: PUSH
70291: DOUBLE
70292: LD_INT 1
70294: DEC
70295: ST_TO_ADDR
70296: LD_INT 3
70298: PUSH
70299: FOR_TO
70300: IFFALSE 70382
// begin tmp := GetCargo ( cargo , i ) ;
70302: LD_ADDR_VAR 0 4
70306: PUSH
70307: LD_VAR 0 1
70311: PPUSH
70312: LD_VAR 0 3
70316: PPUSH
70317: CALL_OW 289
70321: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70322: LD_ADDR_VAR 0 2
70326: PUSH
70327: LD_VAR 0 2
70331: PPUSH
70332: LD_VAR 0 3
70336: PPUSH
70337: LD_VAR 0 4
70341: PPUSH
70342: CALL_OW 1
70346: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70347: LD_ADDR_VAR 0 2
70351: PUSH
70352: LD_VAR 0 2
70356: PPUSH
70357: LD_INT 4
70359: PPUSH
70360: LD_VAR 0 2
70364: PUSH
70365: LD_INT 4
70367: ARRAY
70368: PUSH
70369: LD_VAR 0 4
70373: PLUS
70374: PPUSH
70375: CALL_OW 1
70379: ST_TO_ADDR
// end ;
70380: GO 70299
70382: POP
70383: POP
// end ;
70384: LD_VAR 0 2
70388: RET
// export function Length ( array ) ; begin
70389: LD_INT 0
70391: PPUSH
// result := array + 0 ;
70392: LD_ADDR_VAR 0 2
70396: PUSH
70397: LD_VAR 0 1
70401: PUSH
70402: LD_INT 0
70404: PLUS
70405: ST_TO_ADDR
// end ;
70406: LD_VAR 0 2
70410: RET
// export function PrepareArray ( array ) ; begin
70411: LD_INT 0
70413: PPUSH
// result := array diff 0 ;
70414: LD_ADDR_VAR 0 2
70418: PUSH
70419: LD_VAR 0 1
70423: PUSH
70424: LD_INT 0
70426: DIFF
70427: ST_TO_ADDR
// if not result [ 1 ] then
70428: LD_VAR 0 2
70432: PUSH
70433: LD_INT 1
70435: ARRAY
70436: NOT
70437: IFFALSE 70457
// result := Delete ( result , 1 ) ;
70439: LD_ADDR_VAR 0 2
70443: PUSH
70444: LD_VAR 0 2
70448: PPUSH
70449: LD_INT 1
70451: PPUSH
70452: CALL_OW 3
70456: ST_TO_ADDR
// end ;
70457: LD_VAR 0 2
70461: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70462: LD_INT 0
70464: PPUSH
70465: PPUSH
70466: PPUSH
70467: PPUSH
// sibRocketRange := 25 ;
70468: LD_ADDR_VAR 0 6
70472: PUSH
70473: LD_INT 25
70475: ST_TO_ADDR
// result := false ;
70476: LD_ADDR_VAR 0 4
70480: PUSH
70481: LD_INT 0
70483: ST_TO_ADDR
// for i := 0 to 5 do
70484: LD_ADDR_VAR 0 5
70488: PUSH
70489: DOUBLE
70490: LD_INT 0
70492: DEC
70493: ST_TO_ADDR
70494: LD_INT 5
70496: PUSH
70497: FOR_TO
70498: IFFALSE 70565
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70500: LD_VAR 0 1
70504: PPUSH
70505: LD_VAR 0 5
70509: PPUSH
70510: LD_VAR 0 6
70514: PPUSH
70515: CALL_OW 272
70519: PPUSH
70520: LD_VAR 0 2
70524: PPUSH
70525: LD_VAR 0 5
70529: PPUSH
70530: LD_VAR 0 6
70534: PPUSH
70535: CALL_OW 273
70539: PPUSH
70540: LD_VAR 0 3
70544: PPUSH
70545: CALL_OW 309
70549: IFFALSE 70563
// begin result := true ;
70551: LD_ADDR_VAR 0 4
70555: PUSH
70556: LD_INT 1
70558: ST_TO_ADDR
// exit ;
70559: POP
70560: POP
70561: GO 70567
// end ;
70563: GO 70497
70565: POP
70566: POP
// end ;
70567: LD_VAR 0 4
70571: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70572: LD_INT 0
70574: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70575: LD_VAR 0 1
70579: PPUSH
70580: LD_VAR 0 2
70584: PPUSH
70585: LD_INT 0
70587: PPUSH
70588: LD_INT 0
70590: PPUSH
70591: LD_INT 1
70593: PPUSH
70594: LD_INT 0
70596: PPUSH
70597: CALL_OW 587
// end ;
70601: LD_VAR 0 3
70605: RET
// export function CenterOnNow ( unit ) ; begin
70606: LD_INT 0
70608: PPUSH
// result := IsInUnit ( unit ) ;
70609: LD_ADDR_VAR 0 2
70613: PUSH
70614: LD_VAR 0 1
70618: PPUSH
70619: CALL_OW 310
70623: ST_TO_ADDR
// if not result then
70624: LD_VAR 0 2
70628: NOT
70629: IFFALSE 70641
// result := unit ;
70631: LD_ADDR_VAR 0 2
70635: PUSH
70636: LD_VAR 0 1
70640: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70641: LD_VAR 0 1
70645: PPUSH
70646: CALL_OW 87
// end ;
70650: LD_VAR 0 2
70654: RET
// export function ComMoveHex ( unit , hex ) ; begin
70655: LD_INT 0
70657: PPUSH
// if not hex then
70658: LD_VAR 0 2
70662: NOT
70663: IFFALSE 70667
// exit ;
70665: GO 70720
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70667: LD_VAR 0 2
70671: PUSH
70672: LD_INT 1
70674: ARRAY
70675: PPUSH
70676: LD_VAR 0 2
70680: PUSH
70681: LD_INT 2
70683: ARRAY
70684: PPUSH
70685: CALL_OW 428
70689: IFFALSE 70693
// exit ;
70691: GO 70720
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70693: LD_VAR 0 1
70697: PPUSH
70698: LD_VAR 0 2
70702: PUSH
70703: LD_INT 1
70705: ARRAY
70706: PPUSH
70707: LD_VAR 0 2
70711: PUSH
70712: LD_INT 2
70714: ARRAY
70715: PPUSH
70716: CALL_OW 111
// end ;
70720: LD_VAR 0 3
70724: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70725: LD_INT 0
70727: PPUSH
70728: PPUSH
70729: PPUSH
// if not unit or not enemy then
70730: LD_VAR 0 1
70734: NOT
70735: PUSH
70736: LD_VAR 0 2
70740: NOT
70741: OR
70742: IFFALSE 70746
// exit ;
70744: GO 70870
// x := GetX ( enemy ) ;
70746: LD_ADDR_VAR 0 4
70750: PUSH
70751: LD_VAR 0 2
70755: PPUSH
70756: CALL_OW 250
70760: ST_TO_ADDR
// y := GetY ( enemy ) ;
70761: LD_ADDR_VAR 0 5
70765: PUSH
70766: LD_VAR 0 2
70770: PPUSH
70771: CALL_OW 251
70775: ST_TO_ADDR
// if ValidHex ( x , y ) then
70776: LD_VAR 0 4
70780: PPUSH
70781: LD_VAR 0 5
70785: PPUSH
70786: CALL_OW 488
70790: IFFALSE 70870
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
70792: LD_VAR 0 2
70796: PPUSH
70797: CALL_OW 247
70801: PUSH
70802: LD_INT 3
70804: PUSH
70805: LD_INT 2
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: IN
70812: PUSH
70813: LD_VAR 0 1
70817: PPUSH
70818: CALL_OW 255
70822: PPUSH
70823: LD_VAR 0 2
70827: PPUSH
70828: CALL_OW 292
70832: AND
70833: IFFALSE 70851
// ComAttackUnit ( unit , enemy ) else
70835: LD_VAR 0 1
70839: PPUSH
70840: LD_VAR 0 2
70844: PPUSH
70845: CALL_OW 115
70849: GO 70870
// ComAgressiveMove ( unit , x , y ) ;
70851: LD_VAR 0 1
70855: PPUSH
70856: LD_VAR 0 4
70860: PPUSH
70861: LD_VAR 0 5
70865: PPUSH
70866: CALL_OW 114
// end ;
70870: LD_VAR 0 3
70874: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70875: LD_INT 0
70877: PPUSH
70878: PPUSH
70879: PPUSH
// list := AreaToList ( area , 0 ) ;
70880: LD_ADDR_VAR 0 5
70884: PUSH
70885: LD_VAR 0 1
70889: PPUSH
70890: LD_INT 0
70892: PPUSH
70893: CALL_OW 517
70897: ST_TO_ADDR
// if not list then
70898: LD_VAR 0 5
70902: NOT
70903: IFFALSE 70907
// exit ;
70905: GO 71034
// if all then
70907: LD_VAR 0 2
70911: IFFALSE 70999
// begin for i := 1 to list [ 1 ] do
70913: LD_ADDR_VAR 0 4
70917: PUSH
70918: DOUBLE
70919: LD_INT 1
70921: DEC
70922: ST_TO_ADDR
70923: LD_VAR 0 5
70927: PUSH
70928: LD_INT 1
70930: ARRAY
70931: PUSH
70932: FOR_TO
70933: IFFALSE 70995
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70935: LD_ADDR_VAR 0 3
70939: PUSH
70940: LD_VAR 0 3
70944: PPUSH
70945: LD_VAR 0 3
70949: PUSH
70950: LD_INT 1
70952: PLUS
70953: PPUSH
70954: LD_VAR 0 5
70958: PUSH
70959: LD_INT 1
70961: ARRAY
70962: PUSH
70963: LD_VAR 0 4
70967: ARRAY
70968: PUSH
70969: LD_VAR 0 5
70973: PUSH
70974: LD_INT 2
70976: ARRAY
70977: PUSH
70978: LD_VAR 0 4
70982: ARRAY
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PPUSH
70988: CALL_OW 1
70992: ST_TO_ADDR
70993: GO 70932
70995: POP
70996: POP
// exit ;
70997: GO 71034
// end ; result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ;
70999: LD_ADDR_VAR 0 3
71003: PUSH
71004: LD_VAR 0 5
71008: PUSH
71009: LD_INT 1
71011: ARRAY
71012: PUSH
71013: LD_INT 1
71015: ARRAY
71016: PUSH
71017: LD_VAR 0 5
71021: PUSH
71022: LD_INT 2
71024: ARRAY
71025: PUSH
71026: LD_INT 1
71028: ARRAY
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: ST_TO_ADDR
// end ;
71034: LD_VAR 0 3
71038: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71039: LD_INT 0
71041: PPUSH
71042: PPUSH
// list := AreaToList ( area , 0 ) ;
71043: LD_ADDR_VAR 0 4
71047: PUSH
71048: LD_VAR 0 1
71052: PPUSH
71053: LD_INT 0
71055: PPUSH
71056: CALL_OW 517
71060: ST_TO_ADDR
// if not list then
71061: LD_VAR 0 4
71065: NOT
71066: IFFALSE 71070
// exit ;
71068: GO 71111
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71070: LD_ADDR_VAR 0 3
71074: PUSH
71075: LD_VAR 0 4
71079: PUSH
71080: LD_INT 1
71082: ARRAY
71083: PUSH
71084: LD_INT 1
71086: ARRAY
71087: PUSH
71088: LD_VAR 0 4
71092: PUSH
71093: LD_INT 2
71095: ARRAY
71096: PUSH
71097: LD_INT 1
71099: ARRAY
71100: PUSH
71101: LD_VAR 0 2
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: LIST
71110: ST_TO_ADDR
// end ; end_of_file
71111: LD_VAR 0 3
71115: RET
// export globalGameSaveCounter ; every 0 0$1 do
71116: GO 71118
71118: DISABLE
// begin enable ;
71119: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
71120: LD_STRING updateTimer(
71122: PUSH
71123: LD_OWVAR 1
71127: STR
71128: PUSH
71129: LD_STRING );
71131: STR
71132: PPUSH
71133: CALL_OW 559
// end ;
71137: END
// every 0 0$1 do
71138: GO 71140
71140: DISABLE
// begin globalGameSaveCounter := 0 ;
71141: LD_ADDR_EXP 73
71145: PUSH
71146: LD_INT 0
71148: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
71149: LD_STRING setGameSaveCounter(0)
71151: PPUSH
71152: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
71156: LD_STRING initStreamRollete();
71158: PPUSH
71159: CALL_OW 559
// InitStreamMode ;
71163: CALL 72489 0 0
// DefineStreamItems ( false ) ;
71167: LD_INT 0
71169: PPUSH
71170: CALL 72953 0 1
// end ;
71174: END
// export function SOS_MapStart ( ) ; begin
71175: LD_INT 0
71177: PPUSH
// if streamModeActive then
71178: LD_EXP 74
71182: IFFALSE 71191
// DefineStreamItems ( true ) ;
71184: LD_INT 1
71186: PPUSH
71187: CALL 72953 0 1
// UpdateLuaVariables ( ) ;
71191: CALL 71208 0 0
// UpdateFactoryWaypoints ( ) ;
71195: CALL 85822 0 0
// UpdateWarehouseGatheringPoints ( ) ;
71199: CALL 86079 0 0
// end ;
71203: LD_VAR 0 1
71207: RET
// function UpdateLuaVariables ( ) ; begin
71208: LD_INT 0
71210: PPUSH
// if globalGameSaveCounter then
71211: LD_EXP 73
71215: IFFALSE 71249
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
71217: LD_ADDR_EXP 73
71221: PUSH
71222: LD_EXP 73
71226: PPUSH
71227: CALL 68014 0 1
71231: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71232: LD_STRING setGameSaveCounter(
71234: PUSH
71235: LD_EXP 73
71239: STR
71240: PUSH
71241: LD_STRING )
71243: STR
71244: PPUSH
71245: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
71249: LD_STRING setGameDifficulty(
71251: PUSH
71252: LD_OWVAR 67
71256: STR
71257: PUSH
71258: LD_STRING )
71260: STR
71261: PPUSH
71262: CALL_OW 559
// end ;
71266: LD_VAR 0 1
71270: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71271: LD_INT 0
71273: PPUSH
// if p2 = stream_mode then
71274: LD_VAR 0 2
71278: PUSH
71279: LD_INT 100
71281: EQUAL
71282: IFFALSE 72285
// begin if not StreamModeActive then
71284: LD_EXP 74
71288: NOT
71289: IFFALSE 71299
// StreamModeActive := true ;
71291: LD_ADDR_EXP 74
71295: PUSH
71296: LD_INT 1
71298: ST_TO_ADDR
// if p3 = 0 then
71299: LD_VAR 0 3
71303: PUSH
71304: LD_INT 0
71306: EQUAL
71307: IFFALSE 71313
// InitStreamMode ;
71309: CALL 72489 0 0
// if p3 = 1 then
71313: LD_VAR 0 3
71317: PUSH
71318: LD_INT 1
71320: EQUAL
71321: IFFALSE 71331
// sRocket := true ;
71323: LD_ADDR_EXP 79
71327: PUSH
71328: LD_INT 1
71330: ST_TO_ADDR
// if p3 = 2 then
71331: LD_VAR 0 3
71335: PUSH
71336: LD_INT 2
71338: EQUAL
71339: IFFALSE 71349
// sSpeed := true ;
71341: LD_ADDR_EXP 78
71345: PUSH
71346: LD_INT 1
71348: ST_TO_ADDR
// if p3 = 3 then
71349: LD_VAR 0 3
71353: PUSH
71354: LD_INT 3
71356: EQUAL
71357: IFFALSE 71367
// sEngine := true ;
71359: LD_ADDR_EXP 80
71363: PUSH
71364: LD_INT 1
71366: ST_TO_ADDR
// if p3 = 4 then
71367: LD_VAR 0 3
71371: PUSH
71372: LD_INT 4
71374: EQUAL
71375: IFFALSE 71385
// sSpec := true ;
71377: LD_ADDR_EXP 77
71381: PUSH
71382: LD_INT 1
71384: ST_TO_ADDR
// if p3 = 5 then
71385: LD_VAR 0 3
71389: PUSH
71390: LD_INT 5
71392: EQUAL
71393: IFFALSE 71403
// sLevel := true ;
71395: LD_ADDR_EXP 81
71399: PUSH
71400: LD_INT 1
71402: ST_TO_ADDR
// if p3 = 6 then
71403: LD_VAR 0 3
71407: PUSH
71408: LD_INT 6
71410: EQUAL
71411: IFFALSE 71421
// sArmoury := true ;
71413: LD_ADDR_EXP 82
71417: PUSH
71418: LD_INT 1
71420: ST_TO_ADDR
// if p3 = 7 then
71421: LD_VAR 0 3
71425: PUSH
71426: LD_INT 7
71428: EQUAL
71429: IFFALSE 71439
// sRadar := true ;
71431: LD_ADDR_EXP 83
71435: PUSH
71436: LD_INT 1
71438: ST_TO_ADDR
// if p3 = 8 then
71439: LD_VAR 0 3
71443: PUSH
71444: LD_INT 8
71446: EQUAL
71447: IFFALSE 71457
// sBunker := true ;
71449: LD_ADDR_EXP 84
71453: PUSH
71454: LD_INT 1
71456: ST_TO_ADDR
// if p3 = 9 then
71457: LD_VAR 0 3
71461: PUSH
71462: LD_INT 9
71464: EQUAL
71465: IFFALSE 71475
// sHack := true ;
71467: LD_ADDR_EXP 85
71471: PUSH
71472: LD_INT 1
71474: ST_TO_ADDR
// if p3 = 10 then
71475: LD_VAR 0 3
71479: PUSH
71480: LD_INT 10
71482: EQUAL
71483: IFFALSE 71493
// sFire := true ;
71485: LD_ADDR_EXP 86
71489: PUSH
71490: LD_INT 1
71492: ST_TO_ADDR
// if p3 = 11 then
71493: LD_VAR 0 3
71497: PUSH
71498: LD_INT 11
71500: EQUAL
71501: IFFALSE 71511
// sRefresh := true ;
71503: LD_ADDR_EXP 87
71507: PUSH
71508: LD_INT 1
71510: ST_TO_ADDR
// if p3 = 12 then
71511: LD_VAR 0 3
71515: PUSH
71516: LD_INT 12
71518: EQUAL
71519: IFFALSE 71529
// sExp := true ;
71521: LD_ADDR_EXP 88
71525: PUSH
71526: LD_INT 1
71528: ST_TO_ADDR
// if p3 = 13 then
71529: LD_VAR 0 3
71533: PUSH
71534: LD_INT 13
71536: EQUAL
71537: IFFALSE 71547
// sDepot := true ;
71539: LD_ADDR_EXP 89
71543: PUSH
71544: LD_INT 1
71546: ST_TO_ADDR
// if p3 = 14 then
71547: LD_VAR 0 3
71551: PUSH
71552: LD_INT 14
71554: EQUAL
71555: IFFALSE 71565
// sFlag := true ;
71557: LD_ADDR_EXP 90
71561: PUSH
71562: LD_INT 1
71564: ST_TO_ADDR
// if p3 = 15 then
71565: LD_VAR 0 3
71569: PUSH
71570: LD_INT 15
71572: EQUAL
71573: IFFALSE 71583
// sKamikadze := true ;
71575: LD_ADDR_EXP 98
71579: PUSH
71580: LD_INT 1
71582: ST_TO_ADDR
// if p3 = 16 then
71583: LD_VAR 0 3
71587: PUSH
71588: LD_INT 16
71590: EQUAL
71591: IFFALSE 71601
// sTroll := true ;
71593: LD_ADDR_EXP 99
71597: PUSH
71598: LD_INT 1
71600: ST_TO_ADDR
// if p3 = 17 then
71601: LD_VAR 0 3
71605: PUSH
71606: LD_INT 17
71608: EQUAL
71609: IFFALSE 71619
// sSlow := true ;
71611: LD_ADDR_EXP 100
71615: PUSH
71616: LD_INT 1
71618: ST_TO_ADDR
// if p3 = 18 then
71619: LD_VAR 0 3
71623: PUSH
71624: LD_INT 18
71626: EQUAL
71627: IFFALSE 71637
// sLack := true ;
71629: LD_ADDR_EXP 101
71633: PUSH
71634: LD_INT 1
71636: ST_TO_ADDR
// if p3 = 19 then
71637: LD_VAR 0 3
71641: PUSH
71642: LD_INT 19
71644: EQUAL
71645: IFFALSE 71655
// sTank := true ;
71647: LD_ADDR_EXP 103
71651: PUSH
71652: LD_INT 1
71654: ST_TO_ADDR
// if p3 = 20 then
71655: LD_VAR 0 3
71659: PUSH
71660: LD_INT 20
71662: EQUAL
71663: IFFALSE 71673
// sRemote := true ;
71665: LD_ADDR_EXP 104
71669: PUSH
71670: LD_INT 1
71672: ST_TO_ADDR
// if p3 = 21 then
71673: LD_VAR 0 3
71677: PUSH
71678: LD_INT 21
71680: EQUAL
71681: IFFALSE 71691
// sPowell := true ;
71683: LD_ADDR_EXP 105
71687: PUSH
71688: LD_INT 1
71690: ST_TO_ADDR
// if p3 = 22 then
71691: LD_VAR 0 3
71695: PUSH
71696: LD_INT 22
71698: EQUAL
71699: IFFALSE 71709
// sTeleport := true ;
71701: LD_ADDR_EXP 108
71705: PUSH
71706: LD_INT 1
71708: ST_TO_ADDR
// if p3 = 23 then
71709: LD_VAR 0 3
71713: PUSH
71714: LD_INT 23
71716: EQUAL
71717: IFFALSE 71727
// sOilTower := true ;
71719: LD_ADDR_EXP 110
71723: PUSH
71724: LD_INT 1
71726: ST_TO_ADDR
// if p3 = 24 then
71727: LD_VAR 0 3
71731: PUSH
71732: LD_INT 24
71734: EQUAL
71735: IFFALSE 71745
// sShovel := true ;
71737: LD_ADDR_EXP 111
71741: PUSH
71742: LD_INT 1
71744: ST_TO_ADDR
// if p3 = 25 then
71745: LD_VAR 0 3
71749: PUSH
71750: LD_INT 25
71752: EQUAL
71753: IFFALSE 71763
// sSheik := true ;
71755: LD_ADDR_EXP 112
71759: PUSH
71760: LD_INT 1
71762: ST_TO_ADDR
// if p3 = 26 then
71763: LD_VAR 0 3
71767: PUSH
71768: LD_INT 26
71770: EQUAL
71771: IFFALSE 71781
// sEarthquake := true ;
71773: LD_ADDR_EXP 114
71777: PUSH
71778: LD_INT 1
71780: ST_TO_ADDR
// if p3 = 27 then
71781: LD_VAR 0 3
71785: PUSH
71786: LD_INT 27
71788: EQUAL
71789: IFFALSE 71799
// sAI := true ;
71791: LD_ADDR_EXP 115
71795: PUSH
71796: LD_INT 1
71798: ST_TO_ADDR
// if p3 = 28 then
71799: LD_VAR 0 3
71803: PUSH
71804: LD_INT 28
71806: EQUAL
71807: IFFALSE 71817
// sCargo := true ;
71809: LD_ADDR_EXP 118
71813: PUSH
71814: LD_INT 1
71816: ST_TO_ADDR
// if p3 = 29 then
71817: LD_VAR 0 3
71821: PUSH
71822: LD_INT 29
71824: EQUAL
71825: IFFALSE 71835
// sDLaser := true ;
71827: LD_ADDR_EXP 119
71831: PUSH
71832: LD_INT 1
71834: ST_TO_ADDR
// if p3 = 30 then
71835: LD_VAR 0 3
71839: PUSH
71840: LD_INT 30
71842: EQUAL
71843: IFFALSE 71853
// sExchange := true ;
71845: LD_ADDR_EXP 120
71849: PUSH
71850: LD_INT 1
71852: ST_TO_ADDR
// if p3 = 31 then
71853: LD_VAR 0 3
71857: PUSH
71858: LD_INT 31
71860: EQUAL
71861: IFFALSE 71871
// sFac := true ;
71863: LD_ADDR_EXP 121
71867: PUSH
71868: LD_INT 1
71870: ST_TO_ADDR
// if p3 = 32 then
71871: LD_VAR 0 3
71875: PUSH
71876: LD_INT 32
71878: EQUAL
71879: IFFALSE 71889
// sPower := true ;
71881: LD_ADDR_EXP 122
71885: PUSH
71886: LD_INT 1
71888: ST_TO_ADDR
// if p3 = 33 then
71889: LD_VAR 0 3
71893: PUSH
71894: LD_INT 33
71896: EQUAL
71897: IFFALSE 71907
// sRandom := true ;
71899: LD_ADDR_EXP 123
71903: PUSH
71904: LD_INT 1
71906: ST_TO_ADDR
// if p3 = 34 then
71907: LD_VAR 0 3
71911: PUSH
71912: LD_INT 34
71914: EQUAL
71915: IFFALSE 71925
// sShield := true ;
71917: LD_ADDR_EXP 124
71921: PUSH
71922: LD_INT 1
71924: ST_TO_ADDR
// if p3 = 35 then
71925: LD_VAR 0 3
71929: PUSH
71930: LD_INT 35
71932: EQUAL
71933: IFFALSE 71943
// sTime := true ;
71935: LD_ADDR_EXP 125
71939: PUSH
71940: LD_INT 1
71942: ST_TO_ADDR
// if p3 = 36 then
71943: LD_VAR 0 3
71947: PUSH
71948: LD_INT 36
71950: EQUAL
71951: IFFALSE 71961
// sTools := true ;
71953: LD_ADDR_EXP 126
71957: PUSH
71958: LD_INT 1
71960: ST_TO_ADDR
// if p3 = 101 then
71961: LD_VAR 0 3
71965: PUSH
71966: LD_INT 101
71968: EQUAL
71969: IFFALSE 71979
// sSold := true ;
71971: LD_ADDR_EXP 91
71975: PUSH
71976: LD_INT 1
71978: ST_TO_ADDR
// if p3 = 102 then
71979: LD_VAR 0 3
71983: PUSH
71984: LD_INT 102
71986: EQUAL
71987: IFFALSE 71997
// sDiff := true ;
71989: LD_ADDR_EXP 92
71993: PUSH
71994: LD_INT 1
71996: ST_TO_ADDR
// if p3 = 103 then
71997: LD_VAR 0 3
72001: PUSH
72002: LD_INT 103
72004: EQUAL
72005: IFFALSE 72015
// sFog := true ;
72007: LD_ADDR_EXP 95
72011: PUSH
72012: LD_INT 1
72014: ST_TO_ADDR
// if p3 = 104 then
72015: LD_VAR 0 3
72019: PUSH
72020: LD_INT 104
72022: EQUAL
72023: IFFALSE 72033
// sReset := true ;
72025: LD_ADDR_EXP 96
72029: PUSH
72030: LD_INT 1
72032: ST_TO_ADDR
// if p3 = 105 then
72033: LD_VAR 0 3
72037: PUSH
72038: LD_INT 105
72040: EQUAL
72041: IFFALSE 72051
// sSun := true ;
72043: LD_ADDR_EXP 97
72047: PUSH
72048: LD_INT 1
72050: ST_TO_ADDR
// if p3 = 106 then
72051: LD_VAR 0 3
72055: PUSH
72056: LD_INT 106
72058: EQUAL
72059: IFFALSE 72069
// sTiger := true ;
72061: LD_ADDR_EXP 93
72065: PUSH
72066: LD_INT 1
72068: ST_TO_ADDR
// if p3 = 107 then
72069: LD_VAR 0 3
72073: PUSH
72074: LD_INT 107
72076: EQUAL
72077: IFFALSE 72087
// sBomb := true ;
72079: LD_ADDR_EXP 94
72083: PUSH
72084: LD_INT 1
72086: ST_TO_ADDR
// if p3 = 108 then
72087: LD_VAR 0 3
72091: PUSH
72092: LD_INT 108
72094: EQUAL
72095: IFFALSE 72105
// sWound := true ;
72097: LD_ADDR_EXP 102
72101: PUSH
72102: LD_INT 1
72104: ST_TO_ADDR
// if p3 = 109 then
72105: LD_VAR 0 3
72109: PUSH
72110: LD_INT 109
72112: EQUAL
72113: IFFALSE 72123
// sBetray := true ;
72115: LD_ADDR_EXP 106
72119: PUSH
72120: LD_INT 1
72122: ST_TO_ADDR
// if p3 = 110 then
72123: LD_VAR 0 3
72127: PUSH
72128: LD_INT 110
72130: EQUAL
72131: IFFALSE 72141
// sContamin := true ;
72133: LD_ADDR_EXP 107
72137: PUSH
72138: LD_INT 1
72140: ST_TO_ADDR
// if p3 = 111 then
72141: LD_VAR 0 3
72145: PUSH
72146: LD_INT 111
72148: EQUAL
72149: IFFALSE 72159
// sOil := true ;
72151: LD_ADDR_EXP 109
72155: PUSH
72156: LD_INT 1
72158: ST_TO_ADDR
// if p3 = 112 then
72159: LD_VAR 0 3
72163: PUSH
72164: LD_INT 112
72166: EQUAL
72167: IFFALSE 72177
// sStu := true ;
72169: LD_ADDR_EXP 113
72173: PUSH
72174: LD_INT 1
72176: ST_TO_ADDR
// if p3 = 113 then
72177: LD_VAR 0 3
72181: PUSH
72182: LD_INT 113
72184: EQUAL
72185: IFFALSE 72195
// sBazooka := true ;
72187: LD_ADDR_EXP 116
72191: PUSH
72192: LD_INT 1
72194: ST_TO_ADDR
// if p3 = 114 then
72195: LD_VAR 0 3
72199: PUSH
72200: LD_INT 114
72202: EQUAL
72203: IFFALSE 72213
// sMortar := true ;
72205: LD_ADDR_EXP 117
72209: PUSH
72210: LD_INT 1
72212: ST_TO_ADDR
// if p3 = 115 then
72213: LD_VAR 0 3
72217: PUSH
72218: LD_INT 115
72220: EQUAL
72221: IFFALSE 72231
// sRanger := true ;
72223: LD_ADDR_EXP 127
72227: PUSH
72228: LD_INT 1
72230: ST_TO_ADDR
// if p3 = 116 then
72231: LD_VAR 0 3
72235: PUSH
72236: LD_INT 116
72238: EQUAL
72239: IFFALSE 72249
// sComputer := true ;
72241: LD_ADDR_EXP 128
72245: PUSH
72246: LD_INT 1
72248: ST_TO_ADDR
// if p3 = 117 then
72249: LD_VAR 0 3
72253: PUSH
72254: LD_INT 117
72256: EQUAL
72257: IFFALSE 72267
// s30 := true ;
72259: LD_ADDR_EXP 129
72263: PUSH
72264: LD_INT 1
72266: ST_TO_ADDR
// if p3 = 118 then
72267: LD_VAR 0 3
72271: PUSH
72272: LD_INT 118
72274: EQUAL
72275: IFFALSE 72285
// s60 := true ;
72277: LD_ADDR_EXP 130
72281: PUSH
72282: LD_INT 1
72284: ST_TO_ADDR
// end ; if p2 = hack_mode then
72285: LD_VAR 0 2
72289: PUSH
72290: LD_INT 101
72292: EQUAL
72293: IFFALSE 72421
// begin case p3 of 1 :
72295: LD_VAR 0 3
72299: PUSH
72300: LD_INT 1
72302: DOUBLE
72303: EQUAL
72304: IFTRUE 72308
72306: GO 72315
72308: POP
// hHackUnlimitedResources ; 2 :
72309: CALL 84568 0 0
72313: GO 72421
72315: LD_INT 2
72317: DOUBLE
72318: EQUAL
72319: IFTRUE 72323
72321: GO 72330
72323: POP
// hHackSetLevel10 ; 3 :
72324: CALL 84701 0 0
72328: GO 72421
72330: LD_INT 3
72332: DOUBLE
72333: EQUAL
72334: IFTRUE 72338
72336: GO 72345
72338: POP
// hHackSetLevel10YourUnits ; 4 :
72339: CALL 84786 0 0
72343: GO 72421
72345: LD_INT 4
72347: DOUBLE
72348: EQUAL
72349: IFTRUE 72353
72351: GO 72360
72353: POP
// hHackInvincible ; 5 :
72354: CALL 85234 0 0
72358: GO 72421
72360: LD_INT 5
72362: DOUBLE
72363: EQUAL
72364: IFTRUE 72368
72366: GO 72375
72368: POP
// hHackInvisible ; 6 :
72369: CALL 85345 0 0
72373: GO 72421
72375: LD_INT 6
72377: DOUBLE
72378: EQUAL
72379: IFTRUE 72383
72381: GO 72390
72383: POP
// hHackChangeYourSide ; 7 :
72384: CALL 85402 0 0
72388: GO 72421
72390: LD_INT 7
72392: DOUBLE
72393: EQUAL
72394: IFTRUE 72398
72396: GO 72405
72398: POP
// hHackChangeUnitSide ; 8 :
72399: CALL 85444 0 0
72403: GO 72421
72405: LD_INT 8
72407: DOUBLE
72408: EQUAL
72409: IFTRUE 72413
72411: GO 72420
72413: POP
// hHackFog ; end ;
72414: CALL 85545 0 0
72418: GO 72421
72420: POP
// end ; if p2 = game_save_mode then
72421: LD_VAR 0 2
72425: PUSH
72426: LD_INT 102
72428: EQUAL
72429: IFFALSE 72484
// begin if p3 = 1 then
72431: LD_VAR 0 3
72435: PUSH
72436: LD_INT 1
72438: EQUAL
72439: IFFALSE 72451
// globalGameSaveCounter := p4 ;
72441: LD_ADDR_EXP 73
72445: PUSH
72446: LD_VAR 0 4
72450: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
72451: LD_VAR 0 3
72455: PUSH
72456: LD_INT 2
72458: EQUAL
72459: PUSH
72460: LD_EXP 73
72464: AND
72465: IFFALSE 72484
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72467: LD_STRING setGameSaveCounter(
72469: PUSH
72470: LD_EXP 73
72474: STR
72475: PUSH
72476: LD_STRING )
72478: STR
72479: PPUSH
72480: CALL_OW 559
// end ; end ;
72484: LD_VAR 0 7
72488: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
72489: LD_INT 0
72491: PPUSH
// streamModeActive := false ;
72492: LD_ADDR_EXP 74
72496: PUSH
72497: LD_INT 0
72499: ST_TO_ADDR
// normalCounter := 36 ;
72500: LD_ADDR_EXP 75
72504: PUSH
72505: LD_INT 36
72507: ST_TO_ADDR
// hardcoreCounter := 18 ;
72508: LD_ADDR_EXP 76
72512: PUSH
72513: LD_INT 18
72515: ST_TO_ADDR
// sRocket := false ;
72516: LD_ADDR_EXP 79
72520: PUSH
72521: LD_INT 0
72523: ST_TO_ADDR
// sSpeed := false ;
72524: LD_ADDR_EXP 78
72528: PUSH
72529: LD_INT 0
72531: ST_TO_ADDR
// sEngine := false ;
72532: LD_ADDR_EXP 80
72536: PUSH
72537: LD_INT 0
72539: ST_TO_ADDR
// sSpec := false ;
72540: LD_ADDR_EXP 77
72544: PUSH
72545: LD_INT 0
72547: ST_TO_ADDR
// sLevel := false ;
72548: LD_ADDR_EXP 81
72552: PUSH
72553: LD_INT 0
72555: ST_TO_ADDR
// sArmoury := false ;
72556: LD_ADDR_EXP 82
72560: PUSH
72561: LD_INT 0
72563: ST_TO_ADDR
// sRadar := false ;
72564: LD_ADDR_EXP 83
72568: PUSH
72569: LD_INT 0
72571: ST_TO_ADDR
// sBunker := false ;
72572: LD_ADDR_EXP 84
72576: PUSH
72577: LD_INT 0
72579: ST_TO_ADDR
// sHack := false ;
72580: LD_ADDR_EXP 85
72584: PUSH
72585: LD_INT 0
72587: ST_TO_ADDR
// sFire := false ;
72588: LD_ADDR_EXP 86
72592: PUSH
72593: LD_INT 0
72595: ST_TO_ADDR
// sRefresh := false ;
72596: LD_ADDR_EXP 87
72600: PUSH
72601: LD_INT 0
72603: ST_TO_ADDR
// sExp := false ;
72604: LD_ADDR_EXP 88
72608: PUSH
72609: LD_INT 0
72611: ST_TO_ADDR
// sDepot := false ;
72612: LD_ADDR_EXP 89
72616: PUSH
72617: LD_INT 0
72619: ST_TO_ADDR
// sFlag := false ;
72620: LD_ADDR_EXP 90
72624: PUSH
72625: LD_INT 0
72627: ST_TO_ADDR
// sKamikadze := false ;
72628: LD_ADDR_EXP 98
72632: PUSH
72633: LD_INT 0
72635: ST_TO_ADDR
// sTroll := false ;
72636: LD_ADDR_EXP 99
72640: PUSH
72641: LD_INT 0
72643: ST_TO_ADDR
// sSlow := false ;
72644: LD_ADDR_EXP 100
72648: PUSH
72649: LD_INT 0
72651: ST_TO_ADDR
// sLack := false ;
72652: LD_ADDR_EXP 101
72656: PUSH
72657: LD_INT 0
72659: ST_TO_ADDR
// sTank := false ;
72660: LD_ADDR_EXP 103
72664: PUSH
72665: LD_INT 0
72667: ST_TO_ADDR
// sRemote := false ;
72668: LD_ADDR_EXP 104
72672: PUSH
72673: LD_INT 0
72675: ST_TO_ADDR
// sPowell := false ;
72676: LD_ADDR_EXP 105
72680: PUSH
72681: LD_INT 0
72683: ST_TO_ADDR
// sTeleport := false ;
72684: LD_ADDR_EXP 108
72688: PUSH
72689: LD_INT 0
72691: ST_TO_ADDR
// sOilTower := false ;
72692: LD_ADDR_EXP 110
72696: PUSH
72697: LD_INT 0
72699: ST_TO_ADDR
// sShovel := false ;
72700: LD_ADDR_EXP 111
72704: PUSH
72705: LD_INT 0
72707: ST_TO_ADDR
// sSheik := false ;
72708: LD_ADDR_EXP 112
72712: PUSH
72713: LD_INT 0
72715: ST_TO_ADDR
// sEarthquake := false ;
72716: LD_ADDR_EXP 114
72720: PUSH
72721: LD_INT 0
72723: ST_TO_ADDR
// sAI := false ;
72724: LD_ADDR_EXP 115
72728: PUSH
72729: LD_INT 0
72731: ST_TO_ADDR
// sCargo := false ;
72732: LD_ADDR_EXP 118
72736: PUSH
72737: LD_INT 0
72739: ST_TO_ADDR
// sDLaser := false ;
72740: LD_ADDR_EXP 119
72744: PUSH
72745: LD_INT 0
72747: ST_TO_ADDR
// sExchange := false ;
72748: LD_ADDR_EXP 120
72752: PUSH
72753: LD_INT 0
72755: ST_TO_ADDR
// sFac := false ;
72756: LD_ADDR_EXP 121
72760: PUSH
72761: LD_INT 0
72763: ST_TO_ADDR
// sPower := false ;
72764: LD_ADDR_EXP 122
72768: PUSH
72769: LD_INT 0
72771: ST_TO_ADDR
// sRandom := false ;
72772: LD_ADDR_EXP 123
72776: PUSH
72777: LD_INT 0
72779: ST_TO_ADDR
// sShield := false ;
72780: LD_ADDR_EXP 124
72784: PUSH
72785: LD_INT 0
72787: ST_TO_ADDR
// sTime := false ;
72788: LD_ADDR_EXP 125
72792: PUSH
72793: LD_INT 0
72795: ST_TO_ADDR
// sTools := false ;
72796: LD_ADDR_EXP 126
72800: PUSH
72801: LD_INT 0
72803: ST_TO_ADDR
// sSold := false ;
72804: LD_ADDR_EXP 91
72808: PUSH
72809: LD_INT 0
72811: ST_TO_ADDR
// sDiff := false ;
72812: LD_ADDR_EXP 92
72816: PUSH
72817: LD_INT 0
72819: ST_TO_ADDR
// sFog := false ;
72820: LD_ADDR_EXP 95
72824: PUSH
72825: LD_INT 0
72827: ST_TO_ADDR
// sReset := false ;
72828: LD_ADDR_EXP 96
72832: PUSH
72833: LD_INT 0
72835: ST_TO_ADDR
// sSun := false ;
72836: LD_ADDR_EXP 97
72840: PUSH
72841: LD_INT 0
72843: ST_TO_ADDR
// sTiger := false ;
72844: LD_ADDR_EXP 93
72848: PUSH
72849: LD_INT 0
72851: ST_TO_ADDR
// sBomb := false ;
72852: LD_ADDR_EXP 94
72856: PUSH
72857: LD_INT 0
72859: ST_TO_ADDR
// sWound := false ;
72860: LD_ADDR_EXP 102
72864: PUSH
72865: LD_INT 0
72867: ST_TO_ADDR
// sBetray := false ;
72868: LD_ADDR_EXP 106
72872: PUSH
72873: LD_INT 0
72875: ST_TO_ADDR
// sContamin := false ;
72876: LD_ADDR_EXP 107
72880: PUSH
72881: LD_INT 0
72883: ST_TO_ADDR
// sOil := false ;
72884: LD_ADDR_EXP 109
72888: PUSH
72889: LD_INT 0
72891: ST_TO_ADDR
// sStu := false ;
72892: LD_ADDR_EXP 113
72896: PUSH
72897: LD_INT 0
72899: ST_TO_ADDR
// sBazooka := false ;
72900: LD_ADDR_EXP 116
72904: PUSH
72905: LD_INT 0
72907: ST_TO_ADDR
// sMortar := false ;
72908: LD_ADDR_EXP 117
72912: PUSH
72913: LD_INT 0
72915: ST_TO_ADDR
// sRanger := false ;
72916: LD_ADDR_EXP 127
72920: PUSH
72921: LD_INT 0
72923: ST_TO_ADDR
// sComputer := false ;
72924: LD_ADDR_EXP 128
72928: PUSH
72929: LD_INT 0
72931: ST_TO_ADDR
// s30 := false ;
72932: LD_ADDR_EXP 129
72936: PUSH
72937: LD_INT 0
72939: ST_TO_ADDR
// s60 := false ;
72940: LD_ADDR_EXP 130
72944: PUSH
72945: LD_INT 0
72947: ST_TO_ADDR
// end ;
72948: LD_VAR 0 1
72952: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
72953: LD_INT 0
72955: PPUSH
72956: PPUSH
72957: PPUSH
72958: PPUSH
72959: PPUSH
72960: PPUSH
72961: PPUSH
// result := [ ] ;
72962: LD_ADDR_VAR 0 2
72966: PUSH
72967: EMPTY
72968: ST_TO_ADDR
// if campaign_id = 1 then
72969: LD_OWVAR 69
72973: PUSH
72974: LD_INT 1
72976: EQUAL
72977: IFFALSE 76143
// begin case mission_number of 1 :
72979: LD_OWVAR 70
72983: PUSH
72984: LD_INT 1
72986: DOUBLE
72987: EQUAL
72988: IFTRUE 72992
72990: GO 73068
72992: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
72993: LD_ADDR_VAR 0 2
72997: PUSH
72998: LD_INT 2
73000: PUSH
73001: LD_INT 4
73003: PUSH
73004: LD_INT 11
73006: PUSH
73007: LD_INT 12
73009: PUSH
73010: LD_INT 15
73012: PUSH
73013: LD_INT 16
73015: PUSH
73016: LD_INT 22
73018: PUSH
73019: LD_INT 23
73021: PUSH
73022: LD_INT 26
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: PUSH
73036: LD_INT 101
73038: PUSH
73039: LD_INT 102
73041: PUSH
73042: LD_INT 106
73044: PUSH
73045: LD_INT 116
73047: PUSH
73048: LD_INT 117
73050: PUSH
73051: LD_INT 118
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: PUSH
73062: EMPTY
73063: LIST
73064: LIST
73065: ST_TO_ADDR
73066: GO 76141
73068: LD_INT 2
73070: DOUBLE
73071: EQUAL
73072: IFTRUE 73076
73074: GO 73160
73076: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
73077: LD_ADDR_VAR 0 2
73081: PUSH
73082: LD_INT 2
73084: PUSH
73085: LD_INT 4
73087: PUSH
73088: LD_INT 11
73090: PUSH
73091: LD_INT 12
73093: PUSH
73094: LD_INT 15
73096: PUSH
73097: LD_INT 16
73099: PUSH
73100: LD_INT 22
73102: PUSH
73103: LD_INT 23
73105: PUSH
73106: LD_INT 26
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: PUSH
73120: LD_INT 101
73122: PUSH
73123: LD_INT 102
73125: PUSH
73126: LD_INT 105
73128: PUSH
73129: LD_INT 106
73131: PUSH
73132: LD_INT 108
73134: PUSH
73135: LD_INT 116
73137: PUSH
73138: LD_INT 117
73140: PUSH
73141: LD_INT 118
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: ST_TO_ADDR
73158: GO 76141
73160: LD_INT 3
73162: DOUBLE
73163: EQUAL
73164: IFTRUE 73168
73166: GO 73256
73168: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
73169: LD_ADDR_VAR 0 2
73173: PUSH
73174: LD_INT 2
73176: PUSH
73177: LD_INT 4
73179: PUSH
73180: LD_INT 5
73182: PUSH
73183: LD_INT 11
73185: PUSH
73186: LD_INT 12
73188: PUSH
73189: LD_INT 15
73191: PUSH
73192: LD_INT 16
73194: PUSH
73195: LD_INT 22
73197: PUSH
73198: LD_INT 26
73200: PUSH
73201: LD_INT 36
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: PUSH
73216: LD_INT 101
73218: PUSH
73219: LD_INT 102
73221: PUSH
73222: LD_INT 105
73224: PUSH
73225: LD_INT 106
73227: PUSH
73228: LD_INT 108
73230: PUSH
73231: LD_INT 116
73233: PUSH
73234: LD_INT 117
73236: PUSH
73237: LD_INT 118
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: ST_TO_ADDR
73254: GO 76141
73256: LD_INT 4
73258: DOUBLE
73259: EQUAL
73260: IFTRUE 73264
73262: GO 73360
73264: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
73265: LD_ADDR_VAR 0 2
73269: PUSH
73270: LD_INT 2
73272: PUSH
73273: LD_INT 4
73275: PUSH
73276: LD_INT 5
73278: PUSH
73279: LD_INT 8
73281: PUSH
73282: LD_INT 11
73284: PUSH
73285: LD_INT 12
73287: PUSH
73288: LD_INT 15
73290: PUSH
73291: LD_INT 16
73293: PUSH
73294: LD_INT 22
73296: PUSH
73297: LD_INT 23
73299: PUSH
73300: LD_INT 26
73302: PUSH
73303: LD_INT 36
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: PUSH
73320: LD_INT 101
73322: PUSH
73323: LD_INT 102
73325: PUSH
73326: LD_INT 105
73328: PUSH
73329: LD_INT 106
73331: PUSH
73332: LD_INT 108
73334: PUSH
73335: LD_INT 116
73337: PUSH
73338: LD_INT 117
73340: PUSH
73341: LD_INT 118
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: ST_TO_ADDR
73358: GO 76141
73360: LD_INT 5
73362: DOUBLE
73363: EQUAL
73364: IFTRUE 73368
73366: GO 73480
73368: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
73369: LD_ADDR_VAR 0 2
73373: PUSH
73374: LD_INT 2
73376: PUSH
73377: LD_INT 4
73379: PUSH
73380: LD_INT 5
73382: PUSH
73383: LD_INT 6
73385: PUSH
73386: LD_INT 8
73388: PUSH
73389: LD_INT 11
73391: PUSH
73392: LD_INT 12
73394: PUSH
73395: LD_INT 15
73397: PUSH
73398: LD_INT 16
73400: PUSH
73401: LD_INT 22
73403: PUSH
73404: LD_INT 23
73406: PUSH
73407: LD_INT 25
73409: PUSH
73410: LD_INT 26
73412: PUSH
73413: LD_INT 36
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: PUSH
73432: LD_INT 101
73434: PUSH
73435: LD_INT 102
73437: PUSH
73438: LD_INT 105
73440: PUSH
73441: LD_INT 106
73443: PUSH
73444: LD_INT 108
73446: PUSH
73447: LD_INT 109
73449: PUSH
73450: LD_INT 112
73452: PUSH
73453: LD_INT 116
73455: PUSH
73456: LD_INT 117
73458: PUSH
73459: LD_INT 118
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: LIST
73472: LIST
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: ST_TO_ADDR
73478: GO 76141
73480: LD_INT 6
73482: DOUBLE
73483: EQUAL
73484: IFTRUE 73488
73486: GO 73620
73488: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
73489: LD_ADDR_VAR 0 2
73493: PUSH
73494: LD_INT 2
73496: PUSH
73497: LD_INT 4
73499: PUSH
73500: LD_INT 5
73502: PUSH
73503: LD_INT 6
73505: PUSH
73506: LD_INT 8
73508: PUSH
73509: LD_INT 11
73511: PUSH
73512: LD_INT 12
73514: PUSH
73515: LD_INT 15
73517: PUSH
73518: LD_INT 16
73520: PUSH
73521: LD_INT 20
73523: PUSH
73524: LD_INT 21
73526: PUSH
73527: LD_INT 22
73529: PUSH
73530: LD_INT 23
73532: PUSH
73533: LD_INT 25
73535: PUSH
73536: LD_INT 26
73538: PUSH
73539: LD_INT 30
73541: PUSH
73542: LD_INT 31
73544: PUSH
73545: LD_INT 32
73547: PUSH
73548: LD_INT 36
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: PUSH
73572: LD_INT 101
73574: PUSH
73575: LD_INT 102
73577: PUSH
73578: LD_INT 105
73580: PUSH
73581: LD_INT 106
73583: PUSH
73584: LD_INT 108
73586: PUSH
73587: LD_INT 109
73589: PUSH
73590: LD_INT 112
73592: PUSH
73593: LD_INT 116
73595: PUSH
73596: LD_INT 117
73598: PUSH
73599: LD_INT 118
73601: PUSH
73602: EMPTY
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: LIST
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: ST_TO_ADDR
73618: GO 76141
73620: LD_INT 7
73622: DOUBLE
73623: EQUAL
73624: IFTRUE 73628
73626: GO 73740
73628: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
73629: LD_ADDR_VAR 0 2
73633: PUSH
73634: LD_INT 2
73636: PUSH
73637: LD_INT 4
73639: PUSH
73640: LD_INT 5
73642: PUSH
73643: LD_INT 7
73645: PUSH
73646: LD_INT 11
73648: PUSH
73649: LD_INT 12
73651: PUSH
73652: LD_INT 15
73654: PUSH
73655: LD_INT 16
73657: PUSH
73658: LD_INT 20
73660: PUSH
73661: LD_INT 21
73663: PUSH
73664: LD_INT 22
73666: PUSH
73667: LD_INT 23
73669: PUSH
73670: LD_INT 25
73672: PUSH
73673: LD_INT 26
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: PUSH
73692: LD_INT 101
73694: PUSH
73695: LD_INT 102
73697: PUSH
73698: LD_INT 103
73700: PUSH
73701: LD_INT 105
73703: PUSH
73704: LD_INT 106
73706: PUSH
73707: LD_INT 108
73709: PUSH
73710: LD_INT 112
73712: PUSH
73713: LD_INT 116
73715: PUSH
73716: LD_INT 117
73718: PUSH
73719: LD_INT 118
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: ST_TO_ADDR
73738: GO 76141
73740: LD_INT 8
73742: DOUBLE
73743: EQUAL
73744: IFTRUE 73748
73746: GO 73888
73748: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
73749: LD_ADDR_VAR 0 2
73753: PUSH
73754: LD_INT 2
73756: PUSH
73757: LD_INT 4
73759: PUSH
73760: LD_INT 5
73762: PUSH
73763: LD_INT 6
73765: PUSH
73766: LD_INT 7
73768: PUSH
73769: LD_INT 8
73771: PUSH
73772: LD_INT 11
73774: PUSH
73775: LD_INT 12
73777: PUSH
73778: LD_INT 15
73780: PUSH
73781: LD_INT 16
73783: PUSH
73784: LD_INT 20
73786: PUSH
73787: LD_INT 21
73789: PUSH
73790: LD_INT 22
73792: PUSH
73793: LD_INT 23
73795: PUSH
73796: LD_INT 25
73798: PUSH
73799: LD_INT 26
73801: PUSH
73802: LD_INT 30
73804: PUSH
73805: LD_INT 31
73807: PUSH
73808: LD_INT 32
73810: PUSH
73811: LD_INT 36
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: PUSH
73836: LD_INT 101
73838: PUSH
73839: LD_INT 102
73841: PUSH
73842: LD_INT 103
73844: PUSH
73845: LD_INT 105
73847: PUSH
73848: LD_INT 106
73850: PUSH
73851: LD_INT 108
73853: PUSH
73854: LD_INT 109
73856: PUSH
73857: LD_INT 112
73859: PUSH
73860: LD_INT 116
73862: PUSH
73863: LD_INT 117
73865: PUSH
73866: LD_INT 118
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: ST_TO_ADDR
73886: GO 76141
73888: LD_INT 9
73890: DOUBLE
73891: EQUAL
73892: IFTRUE 73896
73894: GO 74044
73896: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
73897: LD_ADDR_VAR 0 2
73901: PUSH
73902: LD_INT 2
73904: PUSH
73905: LD_INT 4
73907: PUSH
73908: LD_INT 5
73910: PUSH
73911: LD_INT 6
73913: PUSH
73914: LD_INT 7
73916: PUSH
73917: LD_INT 8
73919: PUSH
73920: LD_INT 11
73922: PUSH
73923: LD_INT 12
73925: PUSH
73926: LD_INT 15
73928: PUSH
73929: LD_INT 16
73931: PUSH
73932: LD_INT 20
73934: PUSH
73935: LD_INT 21
73937: PUSH
73938: LD_INT 22
73940: PUSH
73941: LD_INT 23
73943: PUSH
73944: LD_INT 25
73946: PUSH
73947: LD_INT 26
73949: PUSH
73950: LD_INT 28
73952: PUSH
73953: LD_INT 30
73955: PUSH
73956: LD_INT 31
73958: PUSH
73959: LD_INT 32
73961: PUSH
73962: LD_INT 36
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: LIST
73982: LIST
73983: LIST
73984: LIST
73985: LIST
73986: LIST
73987: PUSH
73988: LD_INT 101
73990: PUSH
73991: LD_INT 102
73993: PUSH
73994: LD_INT 103
73996: PUSH
73997: LD_INT 105
73999: PUSH
74000: LD_INT 106
74002: PUSH
74003: LD_INT 108
74005: PUSH
74006: LD_INT 109
74008: PUSH
74009: LD_INT 112
74011: PUSH
74012: LD_INT 114
74014: PUSH
74015: LD_INT 116
74017: PUSH
74018: LD_INT 117
74020: PUSH
74021: LD_INT 118
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: ST_TO_ADDR
74042: GO 76141
74044: LD_INT 10
74046: DOUBLE
74047: EQUAL
74048: IFTRUE 74052
74050: GO 74248
74052: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
74053: LD_ADDR_VAR 0 2
74057: PUSH
74058: LD_INT 2
74060: PUSH
74061: LD_INT 4
74063: PUSH
74064: LD_INT 5
74066: PUSH
74067: LD_INT 6
74069: PUSH
74070: LD_INT 7
74072: PUSH
74073: LD_INT 8
74075: PUSH
74076: LD_INT 9
74078: PUSH
74079: LD_INT 10
74081: PUSH
74082: LD_INT 11
74084: PUSH
74085: LD_INT 12
74087: PUSH
74088: LD_INT 13
74090: PUSH
74091: LD_INT 14
74093: PUSH
74094: LD_INT 15
74096: PUSH
74097: LD_INT 16
74099: PUSH
74100: LD_INT 17
74102: PUSH
74103: LD_INT 18
74105: PUSH
74106: LD_INT 19
74108: PUSH
74109: LD_INT 20
74111: PUSH
74112: LD_INT 21
74114: PUSH
74115: LD_INT 22
74117: PUSH
74118: LD_INT 23
74120: PUSH
74121: LD_INT 24
74123: PUSH
74124: LD_INT 25
74126: PUSH
74127: LD_INT 26
74129: PUSH
74130: LD_INT 28
74132: PUSH
74133: LD_INT 30
74135: PUSH
74136: LD_INT 31
74138: PUSH
74139: LD_INT 32
74141: PUSH
74142: LD_INT 36
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: LIST
74156: LIST
74157: LIST
74158: LIST
74159: LIST
74160: LIST
74161: LIST
74162: LIST
74163: LIST
74164: LIST
74165: LIST
74166: LIST
74167: LIST
74168: LIST
74169: LIST
74170: LIST
74171: LIST
74172: LIST
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 101
74178: PUSH
74179: LD_INT 102
74181: PUSH
74182: LD_INT 103
74184: PUSH
74185: LD_INT 104
74187: PUSH
74188: LD_INT 105
74190: PUSH
74191: LD_INT 106
74193: PUSH
74194: LD_INT 107
74196: PUSH
74197: LD_INT 108
74199: PUSH
74200: LD_INT 109
74202: PUSH
74203: LD_INT 110
74205: PUSH
74206: LD_INT 111
74208: PUSH
74209: LD_INT 112
74211: PUSH
74212: LD_INT 114
74214: PUSH
74215: LD_INT 116
74217: PUSH
74218: LD_INT 117
74220: PUSH
74221: LD_INT 118
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: ST_TO_ADDR
74246: GO 76141
74248: LD_INT 11
74250: DOUBLE
74251: EQUAL
74252: IFTRUE 74256
74254: GO 74460
74256: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
74257: LD_ADDR_VAR 0 2
74261: PUSH
74262: LD_INT 2
74264: PUSH
74265: LD_INT 3
74267: PUSH
74268: LD_INT 4
74270: PUSH
74271: LD_INT 5
74273: PUSH
74274: LD_INT 6
74276: PUSH
74277: LD_INT 7
74279: PUSH
74280: LD_INT 8
74282: PUSH
74283: LD_INT 9
74285: PUSH
74286: LD_INT 10
74288: PUSH
74289: LD_INT 11
74291: PUSH
74292: LD_INT 12
74294: PUSH
74295: LD_INT 13
74297: PUSH
74298: LD_INT 14
74300: PUSH
74301: LD_INT 15
74303: PUSH
74304: LD_INT 16
74306: PUSH
74307: LD_INT 17
74309: PUSH
74310: LD_INT 18
74312: PUSH
74313: LD_INT 19
74315: PUSH
74316: LD_INT 20
74318: PUSH
74319: LD_INT 21
74321: PUSH
74322: LD_INT 22
74324: PUSH
74325: LD_INT 23
74327: PUSH
74328: LD_INT 24
74330: PUSH
74331: LD_INT 25
74333: PUSH
74334: LD_INT 26
74336: PUSH
74337: LD_INT 28
74339: PUSH
74340: LD_INT 30
74342: PUSH
74343: LD_INT 31
74345: PUSH
74346: LD_INT 32
74348: PUSH
74349: LD_INT 34
74351: PUSH
74352: LD_INT 36
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: PUSH
74388: LD_INT 101
74390: PUSH
74391: LD_INT 102
74393: PUSH
74394: LD_INT 103
74396: PUSH
74397: LD_INT 104
74399: PUSH
74400: LD_INT 105
74402: PUSH
74403: LD_INT 106
74405: PUSH
74406: LD_INT 107
74408: PUSH
74409: LD_INT 108
74411: PUSH
74412: LD_INT 109
74414: PUSH
74415: LD_INT 110
74417: PUSH
74418: LD_INT 111
74420: PUSH
74421: LD_INT 112
74423: PUSH
74424: LD_INT 114
74426: PUSH
74427: LD_INT 116
74429: PUSH
74430: LD_INT 117
74432: PUSH
74433: LD_INT 118
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: ST_TO_ADDR
74458: GO 76141
74460: LD_INT 12
74462: DOUBLE
74463: EQUAL
74464: IFTRUE 74468
74466: GO 74688
74468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
74469: LD_ADDR_VAR 0 2
74473: PUSH
74474: LD_INT 1
74476: PUSH
74477: LD_INT 2
74479: PUSH
74480: LD_INT 3
74482: PUSH
74483: LD_INT 4
74485: PUSH
74486: LD_INT 5
74488: PUSH
74489: LD_INT 6
74491: PUSH
74492: LD_INT 7
74494: PUSH
74495: LD_INT 8
74497: PUSH
74498: LD_INT 9
74500: PUSH
74501: LD_INT 10
74503: PUSH
74504: LD_INT 11
74506: PUSH
74507: LD_INT 12
74509: PUSH
74510: LD_INT 13
74512: PUSH
74513: LD_INT 14
74515: PUSH
74516: LD_INT 15
74518: PUSH
74519: LD_INT 16
74521: PUSH
74522: LD_INT 17
74524: PUSH
74525: LD_INT 18
74527: PUSH
74528: LD_INT 19
74530: PUSH
74531: LD_INT 20
74533: PUSH
74534: LD_INT 21
74536: PUSH
74537: LD_INT 22
74539: PUSH
74540: LD_INT 23
74542: PUSH
74543: LD_INT 24
74545: PUSH
74546: LD_INT 25
74548: PUSH
74549: LD_INT 26
74551: PUSH
74552: LD_INT 27
74554: PUSH
74555: LD_INT 28
74557: PUSH
74558: LD_INT 30
74560: PUSH
74561: LD_INT 31
74563: PUSH
74564: LD_INT 32
74566: PUSH
74567: LD_INT 33
74569: PUSH
74570: LD_INT 34
74572: PUSH
74573: LD_INT 36
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: LIST
74591: LIST
74592: LIST
74593: LIST
74594: LIST
74595: LIST
74596: LIST
74597: LIST
74598: LIST
74599: LIST
74600: LIST
74601: LIST
74602: LIST
74603: LIST
74604: LIST
74605: LIST
74606: LIST
74607: LIST
74608: LIST
74609: LIST
74610: LIST
74611: PUSH
74612: LD_INT 101
74614: PUSH
74615: LD_INT 102
74617: PUSH
74618: LD_INT 103
74620: PUSH
74621: LD_INT 104
74623: PUSH
74624: LD_INT 105
74626: PUSH
74627: LD_INT 106
74629: PUSH
74630: LD_INT 107
74632: PUSH
74633: LD_INT 108
74635: PUSH
74636: LD_INT 109
74638: PUSH
74639: LD_INT 110
74641: PUSH
74642: LD_INT 111
74644: PUSH
74645: LD_INT 112
74647: PUSH
74648: LD_INT 113
74650: PUSH
74651: LD_INT 114
74653: PUSH
74654: LD_INT 116
74656: PUSH
74657: LD_INT 117
74659: PUSH
74660: LD_INT 118
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: LIST
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: ST_TO_ADDR
74686: GO 76141
74688: LD_INT 13
74690: DOUBLE
74691: EQUAL
74692: IFTRUE 74696
74694: GO 74904
74696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
74697: LD_ADDR_VAR 0 2
74701: PUSH
74702: LD_INT 1
74704: PUSH
74705: LD_INT 2
74707: PUSH
74708: LD_INT 3
74710: PUSH
74711: LD_INT 4
74713: PUSH
74714: LD_INT 5
74716: PUSH
74717: LD_INT 8
74719: PUSH
74720: LD_INT 9
74722: PUSH
74723: LD_INT 10
74725: PUSH
74726: LD_INT 11
74728: PUSH
74729: LD_INT 12
74731: PUSH
74732: LD_INT 14
74734: PUSH
74735: LD_INT 15
74737: PUSH
74738: LD_INT 16
74740: PUSH
74741: LD_INT 17
74743: PUSH
74744: LD_INT 18
74746: PUSH
74747: LD_INT 19
74749: PUSH
74750: LD_INT 20
74752: PUSH
74753: LD_INT 21
74755: PUSH
74756: LD_INT 22
74758: PUSH
74759: LD_INT 23
74761: PUSH
74762: LD_INT 24
74764: PUSH
74765: LD_INT 25
74767: PUSH
74768: LD_INT 26
74770: PUSH
74771: LD_INT 27
74773: PUSH
74774: LD_INT 28
74776: PUSH
74777: LD_INT 30
74779: PUSH
74780: LD_INT 31
74782: PUSH
74783: LD_INT 32
74785: PUSH
74786: LD_INT 33
74788: PUSH
74789: LD_INT 34
74791: PUSH
74792: LD_INT 36
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: PUSH
74828: LD_INT 101
74830: PUSH
74831: LD_INT 102
74833: PUSH
74834: LD_INT 103
74836: PUSH
74837: LD_INT 104
74839: PUSH
74840: LD_INT 105
74842: PUSH
74843: LD_INT 106
74845: PUSH
74846: LD_INT 107
74848: PUSH
74849: LD_INT 108
74851: PUSH
74852: LD_INT 109
74854: PUSH
74855: LD_INT 110
74857: PUSH
74858: LD_INT 111
74860: PUSH
74861: LD_INT 112
74863: PUSH
74864: LD_INT 113
74866: PUSH
74867: LD_INT 114
74869: PUSH
74870: LD_INT 116
74872: PUSH
74873: LD_INT 117
74875: PUSH
74876: LD_INT 118
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: LIST
74890: LIST
74891: LIST
74892: LIST
74893: LIST
74894: LIST
74895: LIST
74896: LIST
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: ST_TO_ADDR
74902: GO 76141
74904: LD_INT 14
74906: DOUBLE
74907: EQUAL
74908: IFTRUE 74912
74910: GO 75136
74912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
74913: LD_ADDR_VAR 0 2
74917: PUSH
74918: LD_INT 1
74920: PUSH
74921: LD_INT 2
74923: PUSH
74924: LD_INT 3
74926: PUSH
74927: LD_INT 4
74929: PUSH
74930: LD_INT 5
74932: PUSH
74933: LD_INT 6
74935: PUSH
74936: LD_INT 7
74938: PUSH
74939: LD_INT 8
74941: PUSH
74942: LD_INT 9
74944: PUSH
74945: LD_INT 10
74947: PUSH
74948: LD_INT 11
74950: PUSH
74951: LD_INT 12
74953: PUSH
74954: LD_INT 13
74956: PUSH
74957: LD_INT 14
74959: PUSH
74960: LD_INT 15
74962: PUSH
74963: LD_INT 16
74965: PUSH
74966: LD_INT 17
74968: PUSH
74969: LD_INT 18
74971: PUSH
74972: LD_INT 19
74974: PUSH
74975: LD_INT 20
74977: PUSH
74978: LD_INT 21
74980: PUSH
74981: LD_INT 22
74983: PUSH
74984: LD_INT 23
74986: PUSH
74987: LD_INT 24
74989: PUSH
74990: LD_INT 25
74992: PUSH
74993: LD_INT 26
74995: PUSH
74996: LD_INT 27
74998: PUSH
74999: LD_INT 28
75001: PUSH
75002: LD_INT 29
75004: PUSH
75005: LD_INT 30
75007: PUSH
75008: LD_INT 31
75010: PUSH
75011: LD_INT 32
75013: PUSH
75014: LD_INT 33
75016: PUSH
75017: LD_INT 34
75019: PUSH
75020: LD_INT 36
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: LIST
75053: LIST
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: PUSH
75060: LD_INT 101
75062: PUSH
75063: LD_INT 102
75065: PUSH
75066: LD_INT 103
75068: PUSH
75069: LD_INT 104
75071: PUSH
75072: LD_INT 105
75074: PUSH
75075: LD_INT 106
75077: PUSH
75078: LD_INT 107
75080: PUSH
75081: LD_INT 108
75083: PUSH
75084: LD_INT 109
75086: PUSH
75087: LD_INT 110
75089: PUSH
75090: LD_INT 111
75092: PUSH
75093: LD_INT 112
75095: PUSH
75096: LD_INT 113
75098: PUSH
75099: LD_INT 114
75101: PUSH
75102: LD_INT 116
75104: PUSH
75105: LD_INT 117
75107: PUSH
75108: LD_INT 118
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: ST_TO_ADDR
75134: GO 76141
75136: LD_INT 15
75138: DOUBLE
75139: EQUAL
75140: IFTRUE 75144
75142: GO 75368
75144: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
75145: LD_ADDR_VAR 0 2
75149: PUSH
75150: LD_INT 1
75152: PUSH
75153: LD_INT 2
75155: PUSH
75156: LD_INT 3
75158: PUSH
75159: LD_INT 4
75161: PUSH
75162: LD_INT 5
75164: PUSH
75165: LD_INT 6
75167: PUSH
75168: LD_INT 7
75170: PUSH
75171: LD_INT 8
75173: PUSH
75174: LD_INT 9
75176: PUSH
75177: LD_INT 10
75179: PUSH
75180: LD_INT 11
75182: PUSH
75183: LD_INT 12
75185: PUSH
75186: LD_INT 13
75188: PUSH
75189: LD_INT 14
75191: PUSH
75192: LD_INT 15
75194: PUSH
75195: LD_INT 16
75197: PUSH
75198: LD_INT 17
75200: PUSH
75201: LD_INT 18
75203: PUSH
75204: LD_INT 19
75206: PUSH
75207: LD_INT 20
75209: PUSH
75210: LD_INT 21
75212: PUSH
75213: LD_INT 22
75215: PUSH
75216: LD_INT 23
75218: PUSH
75219: LD_INT 24
75221: PUSH
75222: LD_INT 25
75224: PUSH
75225: LD_INT 26
75227: PUSH
75228: LD_INT 27
75230: PUSH
75231: LD_INT 28
75233: PUSH
75234: LD_INT 29
75236: PUSH
75237: LD_INT 30
75239: PUSH
75240: LD_INT 31
75242: PUSH
75243: LD_INT 32
75245: PUSH
75246: LD_INT 33
75248: PUSH
75249: LD_INT 34
75251: PUSH
75252: LD_INT 36
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: LIST
75264: LIST
75265: LIST
75266: LIST
75267: LIST
75268: LIST
75269: LIST
75270: LIST
75271: LIST
75272: LIST
75273: LIST
75274: LIST
75275: LIST
75276: LIST
75277: LIST
75278: LIST
75279: LIST
75280: LIST
75281: LIST
75282: LIST
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: LIST
75288: LIST
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 101
75294: PUSH
75295: LD_INT 102
75297: PUSH
75298: LD_INT 103
75300: PUSH
75301: LD_INT 104
75303: PUSH
75304: LD_INT 105
75306: PUSH
75307: LD_INT 106
75309: PUSH
75310: LD_INT 107
75312: PUSH
75313: LD_INT 108
75315: PUSH
75316: LD_INT 109
75318: PUSH
75319: LD_INT 110
75321: PUSH
75322: LD_INT 111
75324: PUSH
75325: LD_INT 112
75327: PUSH
75328: LD_INT 113
75330: PUSH
75331: LD_INT 114
75333: PUSH
75334: LD_INT 116
75336: PUSH
75337: LD_INT 117
75339: PUSH
75340: LD_INT 118
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: ST_TO_ADDR
75366: GO 76141
75368: LD_INT 16
75370: DOUBLE
75371: EQUAL
75372: IFTRUE 75376
75374: GO 75512
75376: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
75377: LD_ADDR_VAR 0 2
75381: PUSH
75382: LD_INT 2
75384: PUSH
75385: LD_INT 4
75387: PUSH
75388: LD_INT 5
75390: PUSH
75391: LD_INT 7
75393: PUSH
75394: LD_INT 11
75396: PUSH
75397: LD_INT 12
75399: PUSH
75400: LD_INT 15
75402: PUSH
75403: LD_INT 16
75405: PUSH
75406: LD_INT 20
75408: PUSH
75409: LD_INT 21
75411: PUSH
75412: LD_INT 22
75414: PUSH
75415: LD_INT 23
75417: PUSH
75418: LD_INT 25
75420: PUSH
75421: LD_INT 26
75423: PUSH
75424: LD_INT 30
75426: PUSH
75427: LD_INT 31
75429: PUSH
75430: LD_INT 32
75432: PUSH
75433: LD_INT 33
75435: PUSH
75436: LD_INT 34
75438: PUSH
75439: EMPTY
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: PUSH
75460: LD_INT 101
75462: PUSH
75463: LD_INT 102
75465: PUSH
75466: LD_INT 103
75468: PUSH
75469: LD_INT 106
75471: PUSH
75472: LD_INT 108
75474: PUSH
75475: LD_INT 112
75477: PUSH
75478: LD_INT 113
75480: PUSH
75481: LD_INT 114
75483: PUSH
75484: LD_INT 116
75486: PUSH
75487: LD_INT 117
75489: PUSH
75490: LD_INT 118
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: LIST
75501: LIST
75502: LIST
75503: LIST
75504: LIST
75505: PUSH
75506: EMPTY
75507: LIST
75508: LIST
75509: ST_TO_ADDR
75510: GO 76141
75512: LD_INT 17
75514: DOUBLE
75515: EQUAL
75516: IFTRUE 75520
75518: GO 75744
75520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
75521: LD_ADDR_VAR 0 2
75525: PUSH
75526: LD_INT 1
75528: PUSH
75529: LD_INT 2
75531: PUSH
75532: LD_INT 3
75534: PUSH
75535: LD_INT 4
75537: PUSH
75538: LD_INT 5
75540: PUSH
75541: LD_INT 6
75543: PUSH
75544: LD_INT 7
75546: PUSH
75547: LD_INT 8
75549: PUSH
75550: LD_INT 9
75552: PUSH
75553: LD_INT 10
75555: PUSH
75556: LD_INT 11
75558: PUSH
75559: LD_INT 12
75561: PUSH
75562: LD_INT 13
75564: PUSH
75565: LD_INT 14
75567: PUSH
75568: LD_INT 15
75570: PUSH
75571: LD_INT 16
75573: PUSH
75574: LD_INT 17
75576: PUSH
75577: LD_INT 18
75579: PUSH
75580: LD_INT 19
75582: PUSH
75583: LD_INT 20
75585: PUSH
75586: LD_INT 21
75588: PUSH
75589: LD_INT 22
75591: PUSH
75592: LD_INT 23
75594: PUSH
75595: LD_INT 24
75597: PUSH
75598: LD_INT 25
75600: PUSH
75601: LD_INT 26
75603: PUSH
75604: LD_INT 27
75606: PUSH
75607: LD_INT 28
75609: PUSH
75610: LD_INT 29
75612: PUSH
75613: LD_INT 30
75615: PUSH
75616: LD_INT 31
75618: PUSH
75619: LD_INT 32
75621: PUSH
75622: LD_INT 33
75624: PUSH
75625: LD_INT 34
75627: PUSH
75628: LD_INT 36
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: LIST
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: LIST
75652: LIST
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: LIST
75662: LIST
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: PUSH
75668: LD_INT 101
75670: PUSH
75671: LD_INT 102
75673: PUSH
75674: LD_INT 103
75676: PUSH
75677: LD_INT 104
75679: PUSH
75680: LD_INT 105
75682: PUSH
75683: LD_INT 106
75685: PUSH
75686: LD_INT 107
75688: PUSH
75689: LD_INT 108
75691: PUSH
75692: LD_INT 109
75694: PUSH
75695: LD_INT 110
75697: PUSH
75698: LD_INT 111
75700: PUSH
75701: LD_INT 112
75703: PUSH
75704: LD_INT 113
75706: PUSH
75707: LD_INT 114
75709: PUSH
75710: LD_INT 116
75712: PUSH
75713: LD_INT 117
75715: PUSH
75716: LD_INT 118
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: LIST
75723: LIST
75724: LIST
75725: LIST
75726: LIST
75727: LIST
75728: LIST
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: LIST
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: ST_TO_ADDR
75742: GO 76141
75744: LD_INT 18
75746: DOUBLE
75747: EQUAL
75748: IFTRUE 75752
75750: GO 75900
75752: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
75753: LD_ADDR_VAR 0 2
75757: PUSH
75758: LD_INT 2
75760: PUSH
75761: LD_INT 4
75763: PUSH
75764: LD_INT 5
75766: PUSH
75767: LD_INT 7
75769: PUSH
75770: LD_INT 11
75772: PUSH
75773: LD_INT 12
75775: PUSH
75776: LD_INT 15
75778: PUSH
75779: LD_INT 16
75781: PUSH
75782: LD_INT 20
75784: PUSH
75785: LD_INT 21
75787: PUSH
75788: LD_INT 22
75790: PUSH
75791: LD_INT 23
75793: PUSH
75794: LD_INT 25
75796: PUSH
75797: LD_INT 26
75799: PUSH
75800: LD_INT 30
75802: PUSH
75803: LD_INT 31
75805: PUSH
75806: LD_INT 32
75808: PUSH
75809: LD_INT 33
75811: PUSH
75812: LD_INT 34
75814: PUSH
75815: LD_INT 35
75817: PUSH
75818: LD_INT 36
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: LIST
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: LIST
75842: LIST
75843: PUSH
75844: LD_INT 101
75846: PUSH
75847: LD_INT 102
75849: PUSH
75850: LD_INT 103
75852: PUSH
75853: LD_INT 106
75855: PUSH
75856: LD_INT 108
75858: PUSH
75859: LD_INT 112
75861: PUSH
75862: LD_INT 113
75864: PUSH
75865: LD_INT 114
75867: PUSH
75868: LD_INT 115
75870: PUSH
75871: LD_INT 116
75873: PUSH
75874: LD_INT 117
75876: PUSH
75877: LD_INT 118
75879: PUSH
75880: EMPTY
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: LIST
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: LIST
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: ST_TO_ADDR
75898: GO 76141
75900: LD_INT 19
75902: DOUBLE
75903: EQUAL
75904: IFTRUE 75908
75906: GO 76140
75908: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
75909: LD_ADDR_VAR 0 2
75913: PUSH
75914: LD_INT 1
75916: PUSH
75917: LD_INT 2
75919: PUSH
75920: LD_INT 3
75922: PUSH
75923: LD_INT 4
75925: PUSH
75926: LD_INT 5
75928: PUSH
75929: LD_INT 6
75931: PUSH
75932: LD_INT 7
75934: PUSH
75935: LD_INT 8
75937: PUSH
75938: LD_INT 9
75940: PUSH
75941: LD_INT 10
75943: PUSH
75944: LD_INT 11
75946: PUSH
75947: LD_INT 12
75949: PUSH
75950: LD_INT 13
75952: PUSH
75953: LD_INT 14
75955: PUSH
75956: LD_INT 15
75958: PUSH
75959: LD_INT 16
75961: PUSH
75962: LD_INT 17
75964: PUSH
75965: LD_INT 18
75967: PUSH
75968: LD_INT 19
75970: PUSH
75971: LD_INT 20
75973: PUSH
75974: LD_INT 21
75976: PUSH
75977: LD_INT 22
75979: PUSH
75980: LD_INT 23
75982: PUSH
75983: LD_INT 24
75985: PUSH
75986: LD_INT 25
75988: PUSH
75989: LD_INT 26
75991: PUSH
75992: LD_INT 27
75994: PUSH
75995: LD_INT 28
75997: PUSH
75998: LD_INT 29
76000: PUSH
76001: LD_INT 30
76003: PUSH
76004: LD_INT 31
76006: PUSH
76007: LD_INT 32
76009: PUSH
76010: LD_INT 33
76012: PUSH
76013: LD_INT 34
76015: PUSH
76016: LD_INT 35
76018: PUSH
76019: LD_INT 36
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: LIST
76057: LIST
76058: LIST
76059: PUSH
76060: LD_INT 101
76062: PUSH
76063: LD_INT 102
76065: PUSH
76066: LD_INT 103
76068: PUSH
76069: LD_INT 104
76071: PUSH
76072: LD_INT 105
76074: PUSH
76075: LD_INT 106
76077: PUSH
76078: LD_INT 107
76080: PUSH
76081: LD_INT 108
76083: PUSH
76084: LD_INT 109
76086: PUSH
76087: LD_INT 110
76089: PUSH
76090: LD_INT 111
76092: PUSH
76093: LD_INT 112
76095: PUSH
76096: LD_INT 113
76098: PUSH
76099: LD_INT 114
76101: PUSH
76102: LD_INT 115
76104: PUSH
76105: LD_INT 116
76107: PUSH
76108: LD_INT 117
76110: PUSH
76111: LD_INT 118
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: LIST
76118: LIST
76119: LIST
76120: LIST
76121: LIST
76122: LIST
76123: LIST
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: LIST
76129: LIST
76130: LIST
76131: LIST
76132: LIST
76133: PUSH
76134: EMPTY
76135: LIST
76136: LIST
76137: ST_TO_ADDR
76138: GO 76141
76140: POP
// end else
76141: GO 76372
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
76143: LD_ADDR_VAR 0 2
76147: PUSH
76148: LD_INT 1
76150: PUSH
76151: LD_INT 2
76153: PUSH
76154: LD_INT 3
76156: PUSH
76157: LD_INT 4
76159: PUSH
76160: LD_INT 5
76162: PUSH
76163: LD_INT 6
76165: PUSH
76166: LD_INT 7
76168: PUSH
76169: LD_INT 8
76171: PUSH
76172: LD_INT 9
76174: PUSH
76175: LD_INT 10
76177: PUSH
76178: LD_INT 11
76180: PUSH
76181: LD_INT 12
76183: PUSH
76184: LD_INT 13
76186: PUSH
76187: LD_INT 14
76189: PUSH
76190: LD_INT 15
76192: PUSH
76193: LD_INT 16
76195: PUSH
76196: LD_INT 17
76198: PUSH
76199: LD_INT 18
76201: PUSH
76202: LD_INT 19
76204: PUSH
76205: LD_INT 20
76207: PUSH
76208: LD_INT 21
76210: PUSH
76211: LD_INT 22
76213: PUSH
76214: LD_INT 23
76216: PUSH
76217: LD_INT 24
76219: PUSH
76220: LD_INT 25
76222: PUSH
76223: LD_INT 26
76225: PUSH
76226: LD_INT 27
76228: PUSH
76229: LD_INT 28
76231: PUSH
76232: LD_INT 29
76234: PUSH
76235: LD_INT 30
76237: PUSH
76238: LD_INT 31
76240: PUSH
76241: LD_INT 32
76243: PUSH
76244: LD_INT 33
76246: PUSH
76247: LD_INT 34
76249: PUSH
76250: LD_INT 35
76252: PUSH
76253: LD_INT 36
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: LIST
76260: LIST
76261: LIST
76262: LIST
76263: LIST
76264: LIST
76265: LIST
76266: LIST
76267: LIST
76268: LIST
76269: LIST
76270: LIST
76271: LIST
76272: LIST
76273: LIST
76274: LIST
76275: LIST
76276: LIST
76277: LIST
76278: LIST
76279: LIST
76280: LIST
76281: LIST
76282: LIST
76283: LIST
76284: LIST
76285: LIST
76286: LIST
76287: LIST
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: PUSH
76294: LD_INT 101
76296: PUSH
76297: LD_INT 102
76299: PUSH
76300: LD_INT 103
76302: PUSH
76303: LD_INT 104
76305: PUSH
76306: LD_INT 105
76308: PUSH
76309: LD_INT 106
76311: PUSH
76312: LD_INT 107
76314: PUSH
76315: LD_INT 108
76317: PUSH
76318: LD_INT 109
76320: PUSH
76321: LD_INT 110
76323: PUSH
76324: LD_INT 111
76326: PUSH
76327: LD_INT 112
76329: PUSH
76330: LD_INT 113
76332: PUSH
76333: LD_INT 114
76335: PUSH
76336: LD_INT 115
76338: PUSH
76339: LD_INT 116
76341: PUSH
76342: LD_INT 117
76344: PUSH
76345: LD_INT 118
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: LIST
76352: LIST
76353: LIST
76354: LIST
76355: LIST
76356: LIST
76357: LIST
76358: LIST
76359: LIST
76360: LIST
76361: LIST
76362: LIST
76363: LIST
76364: LIST
76365: LIST
76366: LIST
76367: PUSH
76368: EMPTY
76369: LIST
76370: LIST
76371: ST_TO_ADDR
// if result then
76372: LD_VAR 0 2
76376: IFFALSE 77162
// begin normal :=  ;
76378: LD_ADDR_VAR 0 5
76382: PUSH
76383: LD_STRING 
76385: ST_TO_ADDR
// hardcore :=  ;
76386: LD_ADDR_VAR 0 6
76390: PUSH
76391: LD_STRING 
76393: ST_TO_ADDR
// active :=  ;
76394: LD_ADDR_VAR 0 7
76398: PUSH
76399: LD_STRING 
76401: ST_TO_ADDR
// for i = 1 to normalCounter do
76402: LD_ADDR_VAR 0 8
76406: PUSH
76407: DOUBLE
76408: LD_INT 1
76410: DEC
76411: ST_TO_ADDR
76412: LD_EXP 75
76416: PUSH
76417: FOR_TO
76418: IFFALSE 76519
// begin tmp := 0 ;
76420: LD_ADDR_VAR 0 3
76424: PUSH
76425: LD_STRING 0
76427: ST_TO_ADDR
// if result [ 1 ] then
76428: LD_VAR 0 2
76432: PUSH
76433: LD_INT 1
76435: ARRAY
76436: IFFALSE 76501
// if result [ 1 ] [ 1 ] = i then
76438: LD_VAR 0 2
76442: PUSH
76443: LD_INT 1
76445: ARRAY
76446: PUSH
76447: LD_INT 1
76449: ARRAY
76450: PUSH
76451: LD_VAR 0 8
76455: EQUAL
76456: IFFALSE 76501
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
76458: LD_ADDR_VAR 0 2
76462: PUSH
76463: LD_VAR 0 2
76467: PPUSH
76468: LD_INT 1
76470: PPUSH
76471: LD_VAR 0 2
76475: PUSH
76476: LD_INT 1
76478: ARRAY
76479: PPUSH
76480: LD_INT 1
76482: PPUSH
76483: CALL_OW 3
76487: PPUSH
76488: CALL_OW 1
76492: ST_TO_ADDR
// tmp := 1 ;
76493: LD_ADDR_VAR 0 3
76497: PUSH
76498: LD_STRING 1
76500: ST_TO_ADDR
// end ; normal := normal & tmp ;
76501: LD_ADDR_VAR 0 5
76505: PUSH
76506: LD_VAR 0 5
76510: PUSH
76511: LD_VAR 0 3
76515: STR
76516: ST_TO_ADDR
// end ;
76517: GO 76417
76519: POP
76520: POP
// for i = 1 to hardcoreCounter do
76521: LD_ADDR_VAR 0 8
76525: PUSH
76526: DOUBLE
76527: LD_INT 1
76529: DEC
76530: ST_TO_ADDR
76531: LD_EXP 76
76535: PUSH
76536: FOR_TO
76537: IFFALSE 76642
// begin tmp := 0 ;
76539: LD_ADDR_VAR 0 3
76543: PUSH
76544: LD_STRING 0
76546: ST_TO_ADDR
// if result [ 2 ] then
76547: LD_VAR 0 2
76551: PUSH
76552: LD_INT 2
76554: ARRAY
76555: IFFALSE 76624
// if result [ 2 ] [ 1 ] = 100 + i then
76557: LD_VAR 0 2
76561: PUSH
76562: LD_INT 2
76564: ARRAY
76565: PUSH
76566: LD_INT 1
76568: ARRAY
76569: PUSH
76570: LD_INT 100
76572: PUSH
76573: LD_VAR 0 8
76577: PLUS
76578: EQUAL
76579: IFFALSE 76624
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
76581: LD_ADDR_VAR 0 2
76585: PUSH
76586: LD_VAR 0 2
76590: PPUSH
76591: LD_INT 2
76593: PPUSH
76594: LD_VAR 0 2
76598: PUSH
76599: LD_INT 2
76601: ARRAY
76602: PPUSH
76603: LD_INT 1
76605: PPUSH
76606: CALL_OW 3
76610: PPUSH
76611: CALL_OW 1
76615: ST_TO_ADDR
// tmp := 1 ;
76616: LD_ADDR_VAR 0 3
76620: PUSH
76621: LD_STRING 1
76623: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
76624: LD_ADDR_VAR 0 6
76628: PUSH
76629: LD_VAR 0 6
76633: PUSH
76634: LD_VAR 0 3
76638: STR
76639: ST_TO_ADDR
// end ;
76640: GO 76536
76642: POP
76643: POP
// if isGameLoad then
76644: LD_VAR 0 1
76648: IFFALSE 77123
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
76650: LD_ADDR_VAR 0 4
76654: PUSH
76655: LD_EXP 79
76659: PUSH
76660: LD_EXP 78
76664: PUSH
76665: LD_EXP 80
76669: PUSH
76670: LD_EXP 77
76674: PUSH
76675: LD_EXP 81
76679: PUSH
76680: LD_EXP 82
76684: PUSH
76685: LD_EXP 83
76689: PUSH
76690: LD_EXP 84
76694: PUSH
76695: LD_EXP 85
76699: PUSH
76700: LD_EXP 86
76704: PUSH
76705: LD_EXP 87
76709: PUSH
76710: LD_EXP 88
76714: PUSH
76715: LD_EXP 89
76719: PUSH
76720: LD_EXP 90
76724: PUSH
76725: LD_EXP 98
76729: PUSH
76730: LD_EXP 99
76734: PUSH
76735: LD_EXP 100
76739: PUSH
76740: LD_EXP 101
76744: PUSH
76745: LD_EXP 103
76749: PUSH
76750: LD_EXP 104
76754: PUSH
76755: LD_EXP 105
76759: PUSH
76760: LD_EXP 108
76764: PUSH
76765: LD_EXP 110
76769: PUSH
76770: LD_EXP 111
76774: PUSH
76775: LD_EXP 112
76779: PUSH
76780: LD_EXP 114
76784: PUSH
76785: LD_EXP 115
76789: PUSH
76790: LD_EXP 118
76794: PUSH
76795: LD_EXP 119
76799: PUSH
76800: LD_EXP 120
76804: PUSH
76805: LD_EXP 121
76809: PUSH
76810: LD_EXP 122
76814: PUSH
76815: LD_EXP 123
76819: PUSH
76820: LD_EXP 124
76824: PUSH
76825: LD_EXP 125
76829: PUSH
76830: LD_EXP 126
76834: PUSH
76835: LD_EXP 91
76839: PUSH
76840: LD_EXP 92
76844: PUSH
76845: LD_EXP 95
76849: PUSH
76850: LD_EXP 96
76854: PUSH
76855: LD_EXP 97
76859: PUSH
76860: LD_EXP 93
76864: PUSH
76865: LD_EXP 94
76869: PUSH
76870: LD_EXP 102
76874: PUSH
76875: LD_EXP 106
76879: PUSH
76880: LD_EXP 107
76884: PUSH
76885: LD_EXP 109
76889: PUSH
76890: LD_EXP 113
76894: PUSH
76895: LD_EXP 116
76899: PUSH
76900: LD_EXP 117
76904: PUSH
76905: LD_EXP 127
76909: PUSH
76910: LD_EXP 128
76914: PUSH
76915: LD_EXP 129
76919: PUSH
76920: LD_EXP 130
76924: PUSH
76925: EMPTY
76926: LIST
76927: LIST
76928: LIST
76929: LIST
76930: LIST
76931: LIST
76932: LIST
76933: LIST
76934: LIST
76935: LIST
76936: LIST
76937: LIST
76938: LIST
76939: LIST
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: LIST
76948: LIST
76949: LIST
76950: LIST
76951: LIST
76952: LIST
76953: LIST
76954: LIST
76955: LIST
76956: LIST
76957: LIST
76958: LIST
76959: LIST
76960: LIST
76961: LIST
76962: LIST
76963: LIST
76964: LIST
76965: LIST
76966: LIST
76967: LIST
76968: LIST
76969: LIST
76970: LIST
76971: LIST
76972: LIST
76973: LIST
76974: LIST
76975: LIST
76976: LIST
76977: LIST
76978: LIST
76979: LIST
76980: ST_TO_ADDR
// tmp :=  ;
76981: LD_ADDR_VAR 0 3
76985: PUSH
76986: LD_STRING 
76988: ST_TO_ADDR
// for i = 1 to normalCounter do
76989: LD_ADDR_VAR 0 8
76993: PUSH
76994: DOUBLE
76995: LD_INT 1
76997: DEC
76998: ST_TO_ADDR
76999: LD_EXP 75
77003: PUSH
77004: FOR_TO
77005: IFFALSE 77041
// begin if flags [ i ] then
77007: LD_VAR 0 4
77011: PUSH
77012: LD_VAR 0 8
77016: ARRAY
77017: IFFALSE 77039
// tmp := tmp & i & ; ;
77019: LD_ADDR_VAR 0 3
77023: PUSH
77024: LD_VAR 0 3
77028: PUSH
77029: LD_VAR 0 8
77033: STR
77034: PUSH
77035: LD_STRING ;
77037: STR
77038: ST_TO_ADDR
// end ;
77039: GO 77004
77041: POP
77042: POP
// for i = 1 to hardcoreCounter do
77043: LD_ADDR_VAR 0 8
77047: PUSH
77048: DOUBLE
77049: LD_INT 1
77051: DEC
77052: ST_TO_ADDR
77053: LD_EXP 76
77057: PUSH
77058: FOR_TO
77059: IFFALSE 77105
// begin if flags [ normalCounter + i ] then
77061: LD_VAR 0 4
77065: PUSH
77066: LD_EXP 75
77070: PUSH
77071: LD_VAR 0 8
77075: PLUS
77076: ARRAY
77077: IFFALSE 77103
// tmp := tmp & ( 100 + i ) & ; ;
77079: LD_ADDR_VAR 0 3
77083: PUSH
77084: LD_VAR 0 3
77088: PUSH
77089: LD_INT 100
77091: PUSH
77092: LD_VAR 0 8
77096: PLUS
77097: STR
77098: PUSH
77099: LD_STRING ;
77101: STR
77102: ST_TO_ADDR
// end ;
77103: GO 77058
77105: POP
77106: POP
// if tmp then
77107: LD_VAR 0 3
77111: IFFALSE 77123
// active := tmp ;
77113: LD_ADDR_VAR 0 7
77117: PUSH
77118: LD_VAR 0 3
77122: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
77123: LD_STRING getStreamItemsFromMission("
77125: PUSH
77126: LD_VAR 0 5
77130: STR
77131: PUSH
77132: LD_STRING ","
77134: STR
77135: PUSH
77136: LD_VAR 0 6
77140: STR
77141: PUSH
77142: LD_STRING ","
77144: STR
77145: PUSH
77146: LD_VAR 0 7
77150: STR
77151: PUSH
77152: LD_STRING ")
77154: STR
77155: PPUSH
77156: CALL_OW 559
// end else
77160: GO 77169
// ToLua ( getStreamItemsFromMission("","","") ) ;
77162: LD_STRING getStreamItemsFromMission("","","")
77164: PPUSH
77165: CALL_OW 559
// end ;
77169: LD_VAR 0 2
77173: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
77174: LD_EXP 74
77178: PUSH
77179: LD_EXP 79
77183: AND
77184: IFFALSE 77308
77186: GO 77188
77188: DISABLE
77189: LD_INT 0
77191: PPUSH
77192: PPUSH
// begin enable ;
77193: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
77194: LD_ADDR_VAR 0 2
77198: PUSH
77199: LD_INT 22
77201: PUSH
77202: LD_OWVAR 2
77206: PUSH
77207: EMPTY
77208: LIST
77209: LIST
77210: PUSH
77211: LD_INT 2
77213: PUSH
77214: LD_INT 34
77216: PUSH
77217: LD_INT 7
77219: PUSH
77220: EMPTY
77221: LIST
77222: LIST
77223: PUSH
77224: LD_INT 34
77226: PUSH
77227: LD_INT 45
77229: PUSH
77230: EMPTY
77231: LIST
77232: LIST
77233: PUSH
77234: LD_INT 34
77236: PUSH
77237: LD_INT 28
77239: PUSH
77240: EMPTY
77241: LIST
77242: LIST
77243: PUSH
77244: LD_INT 34
77246: PUSH
77247: LD_INT 47
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: EMPTY
77255: LIST
77256: LIST
77257: LIST
77258: LIST
77259: LIST
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: PPUSH
77265: CALL_OW 69
77269: ST_TO_ADDR
// if not tmp then
77270: LD_VAR 0 2
77274: NOT
77275: IFFALSE 77279
// exit ;
77277: GO 77308
// for i in tmp do
77279: LD_ADDR_VAR 0 1
77283: PUSH
77284: LD_VAR 0 2
77288: PUSH
77289: FOR_IN
77290: IFFALSE 77306
// begin SetLives ( i , 0 ) ;
77292: LD_VAR 0 1
77296: PPUSH
77297: LD_INT 0
77299: PPUSH
77300: CALL_OW 234
// end ;
77304: GO 77289
77306: POP
77307: POP
// end ;
77308: PPOPN 2
77310: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
77311: LD_EXP 74
77315: PUSH
77316: LD_EXP 80
77320: AND
77321: IFFALSE 77405
77323: GO 77325
77325: DISABLE
77326: LD_INT 0
77328: PPUSH
77329: PPUSH
// begin enable ;
77330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
77331: LD_ADDR_VAR 0 2
77335: PUSH
77336: LD_INT 22
77338: PUSH
77339: LD_OWVAR 2
77343: PUSH
77344: EMPTY
77345: LIST
77346: LIST
77347: PUSH
77348: LD_INT 32
77350: PUSH
77351: LD_INT 3
77353: PUSH
77354: EMPTY
77355: LIST
77356: LIST
77357: PUSH
77358: EMPTY
77359: LIST
77360: LIST
77361: PPUSH
77362: CALL_OW 69
77366: ST_TO_ADDR
// if not tmp then
77367: LD_VAR 0 2
77371: NOT
77372: IFFALSE 77376
// exit ;
77374: GO 77405
// for i in tmp do
77376: LD_ADDR_VAR 0 1
77380: PUSH
77381: LD_VAR 0 2
77385: PUSH
77386: FOR_IN
77387: IFFALSE 77403
// begin SetLives ( i , 0 ) ;
77389: LD_VAR 0 1
77393: PPUSH
77394: LD_INT 0
77396: PPUSH
77397: CALL_OW 234
// end ;
77401: GO 77386
77403: POP
77404: POP
// end ;
77405: PPOPN 2
77407: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
77408: LD_EXP 74
77412: PUSH
77413: LD_EXP 77
77417: AND
77418: IFFALSE 77511
77420: GO 77422
77422: DISABLE
77423: LD_INT 0
77425: PPUSH
// begin enable ;
77426: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
77427: LD_ADDR_VAR 0 1
77431: PUSH
77432: LD_INT 22
77434: PUSH
77435: LD_OWVAR 2
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: PUSH
77444: LD_INT 2
77446: PUSH
77447: LD_INT 25
77449: PUSH
77450: LD_INT 5
77452: PUSH
77453: EMPTY
77454: LIST
77455: LIST
77456: PUSH
77457: LD_INT 25
77459: PUSH
77460: LD_INT 9
77462: PUSH
77463: EMPTY
77464: LIST
77465: LIST
77466: PUSH
77467: LD_INT 25
77469: PUSH
77470: LD_INT 8
77472: PUSH
77473: EMPTY
77474: LIST
77475: LIST
77476: PUSH
77477: EMPTY
77478: LIST
77479: LIST
77480: LIST
77481: LIST
77482: PUSH
77483: EMPTY
77484: LIST
77485: LIST
77486: PPUSH
77487: CALL_OW 69
77491: PUSH
77492: FOR_IN
77493: IFFALSE 77509
// begin SetClass ( i , 1 ) ;
77495: LD_VAR 0 1
77499: PPUSH
77500: LD_INT 1
77502: PPUSH
77503: CALL_OW 336
// end ;
77507: GO 77492
77509: POP
77510: POP
// end ;
77511: PPOPN 1
77513: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
77514: LD_EXP 74
77518: PUSH
77519: LD_EXP 78
77523: AND
77524: PUSH
77525: LD_OWVAR 65
77529: PUSH
77530: LD_INT 7
77532: LESS
77533: AND
77534: IFFALSE 77548
77536: GO 77538
77538: DISABLE
// begin enable ;
77539: ENABLE
// game_speed := 7 ;
77540: LD_ADDR_OWVAR 65
77544: PUSH
77545: LD_INT 7
77547: ST_TO_ADDR
// end ;
77548: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
77549: LD_EXP 74
77553: PUSH
77554: LD_EXP 81
77558: AND
77559: IFFALSE 77761
77561: GO 77563
77563: DISABLE
77564: LD_INT 0
77566: PPUSH
77567: PPUSH
77568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77569: LD_ADDR_VAR 0 3
77573: PUSH
77574: LD_INT 81
77576: PUSH
77577: LD_OWVAR 2
77581: PUSH
77582: EMPTY
77583: LIST
77584: LIST
77585: PUSH
77586: LD_INT 21
77588: PUSH
77589: LD_INT 1
77591: PUSH
77592: EMPTY
77593: LIST
77594: LIST
77595: PUSH
77596: EMPTY
77597: LIST
77598: LIST
77599: PPUSH
77600: CALL_OW 69
77604: ST_TO_ADDR
// if not tmp then
77605: LD_VAR 0 3
77609: NOT
77610: IFFALSE 77614
// exit ;
77612: GO 77761
// if tmp > 5 then
77614: LD_VAR 0 3
77618: PUSH
77619: LD_INT 5
77621: GREATER
77622: IFFALSE 77634
// k := 5 else
77624: LD_ADDR_VAR 0 2
77628: PUSH
77629: LD_INT 5
77631: ST_TO_ADDR
77632: GO 77644
// k := tmp ;
77634: LD_ADDR_VAR 0 2
77638: PUSH
77639: LD_VAR 0 3
77643: ST_TO_ADDR
// for i := 1 to k do
77644: LD_ADDR_VAR 0 1
77648: PUSH
77649: DOUBLE
77650: LD_INT 1
77652: DEC
77653: ST_TO_ADDR
77654: LD_VAR 0 2
77658: PUSH
77659: FOR_TO
77660: IFFALSE 77759
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
77662: LD_VAR 0 3
77666: PUSH
77667: LD_VAR 0 1
77671: ARRAY
77672: PPUSH
77673: LD_VAR 0 1
77677: PUSH
77678: LD_INT 4
77680: MOD
77681: PUSH
77682: LD_INT 1
77684: PLUS
77685: PPUSH
77686: CALL_OW 259
77690: PUSH
77691: LD_INT 10
77693: LESS
77694: IFFALSE 77757
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
77696: LD_VAR 0 3
77700: PUSH
77701: LD_VAR 0 1
77705: ARRAY
77706: PPUSH
77707: LD_VAR 0 1
77711: PUSH
77712: LD_INT 4
77714: MOD
77715: PUSH
77716: LD_INT 1
77718: PLUS
77719: PPUSH
77720: LD_VAR 0 3
77724: PUSH
77725: LD_VAR 0 1
77729: ARRAY
77730: PPUSH
77731: LD_VAR 0 1
77735: PUSH
77736: LD_INT 4
77738: MOD
77739: PUSH
77740: LD_INT 1
77742: PLUS
77743: PPUSH
77744: CALL_OW 259
77748: PUSH
77749: LD_INT 1
77751: PLUS
77752: PPUSH
77753: CALL_OW 237
77757: GO 77659
77759: POP
77760: POP
// end ;
77761: PPOPN 3
77763: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
77764: LD_EXP 74
77768: PUSH
77769: LD_EXP 82
77773: AND
77774: IFFALSE 77794
77776: GO 77778
77778: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
77779: LD_INT 4
77781: PPUSH
77782: LD_OWVAR 2
77786: PPUSH
77787: LD_INT 0
77789: PPUSH
77790: CALL_OW 324
77794: END
// every 0 0$1 trigger StreamModeActive and sShovel do
77795: LD_EXP 74
77799: PUSH
77800: LD_EXP 111
77804: AND
77805: IFFALSE 77825
77807: GO 77809
77809: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
77810: LD_INT 19
77812: PPUSH
77813: LD_OWVAR 2
77817: PPUSH
77818: LD_INT 0
77820: PPUSH
77821: CALL_OW 324
77825: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
77826: LD_EXP 74
77830: PUSH
77831: LD_EXP 83
77835: AND
77836: IFFALSE 77938
77838: GO 77840
77840: DISABLE
77841: LD_INT 0
77843: PPUSH
77844: PPUSH
// begin enable ;
77845: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
77846: LD_ADDR_VAR 0 2
77850: PUSH
77851: LD_INT 22
77853: PUSH
77854: LD_OWVAR 2
77858: PUSH
77859: EMPTY
77860: LIST
77861: LIST
77862: PUSH
77863: LD_INT 2
77865: PUSH
77866: LD_INT 34
77868: PUSH
77869: LD_INT 11
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: PUSH
77876: LD_INT 34
77878: PUSH
77879: LD_INT 30
77881: PUSH
77882: EMPTY
77883: LIST
77884: LIST
77885: PUSH
77886: EMPTY
77887: LIST
77888: LIST
77889: LIST
77890: PUSH
77891: EMPTY
77892: LIST
77893: LIST
77894: PPUSH
77895: CALL_OW 69
77899: ST_TO_ADDR
// if not tmp then
77900: LD_VAR 0 2
77904: NOT
77905: IFFALSE 77909
// exit ;
77907: GO 77938
// for i in tmp do
77909: LD_ADDR_VAR 0 1
77913: PUSH
77914: LD_VAR 0 2
77918: PUSH
77919: FOR_IN
77920: IFFALSE 77936
// begin SetLives ( i , 0 ) ;
77922: LD_VAR 0 1
77926: PPUSH
77927: LD_INT 0
77929: PPUSH
77930: CALL_OW 234
// end ;
77934: GO 77919
77936: POP
77937: POP
// end ;
77938: PPOPN 2
77940: END
// every 0 0$1 trigger StreamModeActive and sBunker do
77941: LD_EXP 74
77945: PUSH
77946: LD_EXP 84
77950: AND
77951: IFFALSE 77971
77953: GO 77955
77955: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
77956: LD_INT 32
77958: PPUSH
77959: LD_OWVAR 2
77963: PPUSH
77964: LD_INT 0
77966: PPUSH
77967: CALL_OW 324
77971: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
77972: LD_EXP 74
77976: PUSH
77977: LD_EXP 85
77981: AND
77982: IFFALSE 78163
77984: GO 77986
77986: DISABLE
77987: LD_INT 0
77989: PPUSH
77990: PPUSH
77991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
77992: LD_ADDR_VAR 0 2
77996: PUSH
77997: LD_INT 22
77999: PUSH
78000: LD_OWVAR 2
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: PUSH
78009: LD_INT 33
78011: PUSH
78012: LD_INT 3
78014: PUSH
78015: EMPTY
78016: LIST
78017: LIST
78018: PUSH
78019: EMPTY
78020: LIST
78021: LIST
78022: PPUSH
78023: CALL_OW 69
78027: ST_TO_ADDR
// if not tmp then
78028: LD_VAR 0 2
78032: NOT
78033: IFFALSE 78037
// exit ;
78035: GO 78163
// side := 0 ;
78037: LD_ADDR_VAR 0 3
78041: PUSH
78042: LD_INT 0
78044: ST_TO_ADDR
// for i := 1 to 8 do
78045: LD_ADDR_VAR 0 1
78049: PUSH
78050: DOUBLE
78051: LD_INT 1
78053: DEC
78054: ST_TO_ADDR
78055: LD_INT 8
78057: PUSH
78058: FOR_TO
78059: IFFALSE 78107
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
78061: LD_OWVAR 2
78065: PUSH
78066: LD_VAR 0 1
78070: NONEQUAL
78071: PUSH
78072: LD_OWVAR 2
78076: PPUSH
78077: LD_VAR 0 1
78081: PPUSH
78082: CALL_OW 81
78086: PUSH
78087: LD_INT 2
78089: EQUAL
78090: AND
78091: IFFALSE 78105
// begin side := i ;
78093: LD_ADDR_VAR 0 3
78097: PUSH
78098: LD_VAR 0 1
78102: ST_TO_ADDR
// break ;
78103: GO 78107
// end ;
78105: GO 78058
78107: POP
78108: POP
// if not side then
78109: LD_VAR 0 3
78113: NOT
78114: IFFALSE 78118
// exit ;
78116: GO 78163
// for i := 1 to tmp do
78118: LD_ADDR_VAR 0 1
78122: PUSH
78123: DOUBLE
78124: LD_INT 1
78126: DEC
78127: ST_TO_ADDR
78128: LD_VAR 0 2
78132: PUSH
78133: FOR_TO
78134: IFFALSE 78161
// if Prob ( 60 ) then
78136: LD_INT 60
78138: PPUSH
78139: CALL_OW 13
78143: IFFALSE 78159
// SetSide ( i , side ) ;
78145: LD_VAR 0 1
78149: PPUSH
78150: LD_VAR 0 3
78154: PPUSH
78155: CALL_OW 235
78159: GO 78133
78161: POP
78162: POP
// end ;
78163: PPOPN 3
78165: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
78166: LD_EXP 74
78170: PUSH
78171: LD_EXP 87
78175: AND
78176: IFFALSE 78295
78178: GO 78180
78180: DISABLE
78181: LD_INT 0
78183: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
78184: LD_ADDR_VAR 0 1
78188: PUSH
78189: LD_INT 22
78191: PUSH
78192: LD_OWVAR 2
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: PUSH
78201: LD_INT 21
78203: PUSH
78204: LD_INT 1
78206: PUSH
78207: EMPTY
78208: LIST
78209: LIST
78210: PUSH
78211: LD_INT 3
78213: PUSH
78214: LD_INT 23
78216: PUSH
78217: LD_INT 0
78219: PUSH
78220: EMPTY
78221: LIST
78222: LIST
78223: PUSH
78224: EMPTY
78225: LIST
78226: LIST
78227: PUSH
78228: EMPTY
78229: LIST
78230: LIST
78231: LIST
78232: PPUSH
78233: CALL_OW 69
78237: PUSH
78238: FOR_IN
78239: IFFALSE 78293
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
78241: LD_VAR 0 1
78245: PPUSH
78246: CALL_OW 257
78250: PUSH
78251: LD_INT 1
78253: PUSH
78254: LD_INT 2
78256: PUSH
78257: LD_INT 3
78259: PUSH
78260: LD_INT 4
78262: PUSH
78263: EMPTY
78264: LIST
78265: LIST
78266: LIST
78267: LIST
78268: IN
78269: IFFALSE 78291
// SetClass ( un , rand ( 1 , 4 ) ) ;
78271: LD_VAR 0 1
78275: PPUSH
78276: LD_INT 1
78278: PPUSH
78279: LD_INT 4
78281: PPUSH
78282: CALL_OW 12
78286: PPUSH
78287: CALL_OW 336
78291: GO 78238
78293: POP
78294: POP
// end ;
78295: PPOPN 1
78297: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
78298: LD_EXP 74
78302: PUSH
78303: LD_EXP 86
78307: AND
78308: IFFALSE 78387
78310: GO 78312
78312: DISABLE
78313: LD_INT 0
78315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78316: LD_ADDR_VAR 0 1
78320: PUSH
78321: LD_INT 22
78323: PUSH
78324: LD_OWVAR 2
78328: PUSH
78329: EMPTY
78330: LIST
78331: LIST
78332: PUSH
78333: LD_INT 21
78335: PUSH
78336: LD_INT 3
78338: PUSH
78339: EMPTY
78340: LIST
78341: LIST
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: PPUSH
78347: CALL_OW 69
78351: ST_TO_ADDR
// if not tmp then
78352: LD_VAR 0 1
78356: NOT
78357: IFFALSE 78361
// exit ;
78359: GO 78387
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
78361: LD_VAR 0 1
78365: PUSH
78366: LD_INT 1
78368: PPUSH
78369: LD_VAR 0 1
78373: PPUSH
78374: CALL_OW 12
78378: ARRAY
78379: PPUSH
78380: LD_INT 100
78382: PPUSH
78383: CALL_OW 234
// end ;
78387: PPOPN 1
78389: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
78390: LD_EXP 74
78394: PUSH
78395: LD_EXP 88
78399: AND
78400: IFFALSE 78498
78402: GO 78404
78404: DISABLE
78405: LD_INT 0
78407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78408: LD_ADDR_VAR 0 1
78412: PUSH
78413: LD_INT 22
78415: PUSH
78416: LD_OWVAR 2
78420: PUSH
78421: EMPTY
78422: LIST
78423: LIST
78424: PUSH
78425: LD_INT 21
78427: PUSH
78428: LD_INT 1
78430: PUSH
78431: EMPTY
78432: LIST
78433: LIST
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: PPUSH
78439: CALL_OW 69
78443: ST_TO_ADDR
// if not tmp then
78444: LD_VAR 0 1
78448: NOT
78449: IFFALSE 78453
// exit ;
78451: GO 78498
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
78453: LD_VAR 0 1
78457: PUSH
78458: LD_INT 1
78460: PPUSH
78461: LD_VAR 0 1
78465: PPUSH
78466: CALL_OW 12
78470: ARRAY
78471: PPUSH
78472: LD_INT 1
78474: PPUSH
78475: LD_INT 4
78477: PPUSH
78478: CALL_OW 12
78482: PPUSH
78483: LD_INT 3000
78485: PPUSH
78486: LD_INT 9000
78488: PPUSH
78489: CALL_OW 12
78493: PPUSH
78494: CALL_OW 492
// end ;
78498: PPOPN 1
78500: END
// every 0 0$1 trigger StreamModeActive and sDepot do
78501: LD_EXP 74
78505: PUSH
78506: LD_EXP 89
78510: AND
78511: IFFALSE 78531
78513: GO 78515
78515: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
78516: LD_INT 1
78518: PPUSH
78519: LD_OWVAR 2
78523: PPUSH
78524: LD_INT 0
78526: PPUSH
78527: CALL_OW 324
78531: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
78532: LD_EXP 74
78536: PUSH
78537: LD_EXP 90
78541: AND
78542: IFFALSE 78625
78544: GO 78546
78546: DISABLE
78547: LD_INT 0
78549: PPUSH
78550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78551: LD_ADDR_VAR 0 2
78555: PUSH
78556: LD_INT 22
78558: PUSH
78559: LD_OWVAR 2
78563: PUSH
78564: EMPTY
78565: LIST
78566: LIST
78567: PUSH
78568: LD_INT 21
78570: PUSH
78571: LD_INT 3
78573: PUSH
78574: EMPTY
78575: LIST
78576: LIST
78577: PUSH
78578: EMPTY
78579: LIST
78580: LIST
78581: PPUSH
78582: CALL_OW 69
78586: ST_TO_ADDR
// if not tmp then
78587: LD_VAR 0 2
78591: NOT
78592: IFFALSE 78596
// exit ;
78594: GO 78625
// for i in tmp do
78596: LD_ADDR_VAR 0 1
78600: PUSH
78601: LD_VAR 0 2
78605: PUSH
78606: FOR_IN
78607: IFFALSE 78623
// SetBLevel ( i , 10 ) ;
78609: LD_VAR 0 1
78613: PPUSH
78614: LD_INT 10
78616: PPUSH
78617: CALL_OW 241
78621: GO 78606
78623: POP
78624: POP
// end ;
78625: PPOPN 2
78627: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
78628: LD_EXP 74
78632: PUSH
78633: LD_EXP 91
78637: AND
78638: IFFALSE 78749
78640: GO 78642
78642: DISABLE
78643: LD_INT 0
78645: PPUSH
78646: PPUSH
78647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78648: LD_ADDR_VAR 0 3
78652: PUSH
78653: LD_INT 22
78655: PUSH
78656: LD_OWVAR 2
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: PUSH
78665: LD_INT 25
78667: PUSH
78668: LD_INT 1
78670: PUSH
78671: EMPTY
78672: LIST
78673: LIST
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: PPUSH
78679: CALL_OW 69
78683: ST_TO_ADDR
// if not tmp then
78684: LD_VAR 0 3
78688: NOT
78689: IFFALSE 78693
// exit ;
78691: GO 78749
// un := tmp [ rand ( 1 , tmp ) ] ;
78693: LD_ADDR_VAR 0 2
78697: PUSH
78698: LD_VAR 0 3
78702: PUSH
78703: LD_INT 1
78705: PPUSH
78706: LD_VAR 0 3
78710: PPUSH
78711: CALL_OW 12
78715: ARRAY
78716: ST_TO_ADDR
// if Crawls ( un ) then
78717: LD_VAR 0 2
78721: PPUSH
78722: CALL_OW 318
78726: IFFALSE 78737
// ComWalk ( un ) ;
78728: LD_VAR 0 2
78732: PPUSH
78733: CALL_OW 138
// SetClass ( un , class_sniper ) ;
78737: LD_VAR 0 2
78741: PPUSH
78742: LD_INT 5
78744: PPUSH
78745: CALL_OW 336
// end ;
78749: PPOPN 3
78751: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
78752: LD_EXP 74
78756: PUSH
78757: LD_EXP 92
78761: AND
78762: PUSH
78763: LD_OWVAR 67
78767: PUSH
78768: LD_INT 4
78770: LESS
78771: AND
78772: IFFALSE 78791
78774: GO 78776
78776: DISABLE
// begin Difficulty := Difficulty + 1 ;
78777: LD_ADDR_OWVAR 67
78781: PUSH
78782: LD_OWVAR 67
78786: PUSH
78787: LD_INT 1
78789: PLUS
78790: ST_TO_ADDR
// end ;
78791: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
78792: LD_EXP 74
78796: PUSH
78797: LD_EXP 93
78801: AND
78802: IFFALSE 78905
78804: GO 78806
78806: DISABLE
78807: LD_INT 0
78809: PPUSH
// begin for i := 1 to 5 do
78810: LD_ADDR_VAR 0 1
78814: PUSH
78815: DOUBLE
78816: LD_INT 1
78818: DEC
78819: ST_TO_ADDR
78820: LD_INT 5
78822: PUSH
78823: FOR_TO
78824: IFFALSE 78903
// begin uc_nation := nation_nature ;
78826: LD_ADDR_OWVAR 21
78830: PUSH
78831: LD_INT 0
78833: ST_TO_ADDR
// uc_side := 0 ;
78834: LD_ADDR_OWVAR 20
78838: PUSH
78839: LD_INT 0
78841: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78842: LD_ADDR_OWVAR 29
78846: PUSH
78847: LD_INT 12
78849: PUSH
78850: LD_INT 12
78852: PUSH
78853: EMPTY
78854: LIST
78855: LIST
78856: ST_TO_ADDR
// hc_agressivity := 20 ;
78857: LD_ADDR_OWVAR 35
78861: PUSH
78862: LD_INT 20
78864: ST_TO_ADDR
// hc_class := class_tiger ;
78865: LD_ADDR_OWVAR 28
78869: PUSH
78870: LD_INT 14
78872: ST_TO_ADDR
// hc_gallery :=  ;
78873: LD_ADDR_OWVAR 33
78877: PUSH
78878: LD_STRING 
78880: ST_TO_ADDR
// hc_name :=  ;
78881: LD_ADDR_OWVAR 26
78885: PUSH
78886: LD_STRING 
78888: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
78889: CALL_OW 44
78893: PPUSH
78894: LD_INT 0
78896: PPUSH
78897: CALL_OW 51
// end ;
78901: GO 78823
78903: POP
78904: POP
// end ;
78905: PPOPN 1
78907: END
// every 0 0$1 trigger StreamModeActive and sBomb do
78908: LD_EXP 74
78912: PUSH
78913: LD_EXP 94
78917: AND
78918: IFFALSE 78927
78920: GO 78922
78922: DISABLE
// StreamSibBomb ;
78923: CALL 78928 0 0
78927: END
// export function StreamSibBomb ; var i , x , y ; begin
78928: LD_INT 0
78930: PPUSH
78931: PPUSH
78932: PPUSH
78933: PPUSH
// result := false ;
78934: LD_ADDR_VAR 0 1
78938: PUSH
78939: LD_INT 0
78941: ST_TO_ADDR
// for i := 1 to 16 do
78942: LD_ADDR_VAR 0 2
78946: PUSH
78947: DOUBLE
78948: LD_INT 1
78950: DEC
78951: ST_TO_ADDR
78952: LD_INT 16
78954: PUSH
78955: FOR_TO
78956: IFFALSE 79155
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78958: LD_ADDR_VAR 0 3
78962: PUSH
78963: LD_INT 10
78965: PUSH
78966: LD_INT 20
78968: PUSH
78969: LD_INT 30
78971: PUSH
78972: LD_INT 40
78974: PUSH
78975: LD_INT 50
78977: PUSH
78978: LD_INT 60
78980: PUSH
78981: LD_INT 70
78983: PUSH
78984: LD_INT 80
78986: PUSH
78987: LD_INT 90
78989: PUSH
78990: LD_INT 100
78992: PUSH
78993: LD_INT 110
78995: PUSH
78996: LD_INT 120
78998: PUSH
78999: LD_INT 130
79001: PUSH
79002: LD_INT 140
79004: PUSH
79005: LD_INT 150
79007: PUSH
79008: EMPTY
79009: LIST
79010: LIST
79011: LIST
79012: LIST
79013: LIST
79014: LIST
79015: LIST
79016: LIST
79017: LIST
79018: LIST
79019: LIST
79020: LIST
79021: LIST
79022: LIST
79023: LIST
79024: PUSH
79025: LD_INT 1
79027: PPUSH
79028: LD_INT 15
79030: PPUSH
79031: CALL_OW 12
79035: ARRAY
79036: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
79037: LD_ADDR_VAR 0 4
79041: PUSH
79042: LD_INT 10
79044: PUSH
79045: LD_INT 20
79047: PUSH
79048: LD_INT 30
79050: PUSH
79051: LD_INT 40
79053: PUSH
79054: LD_INT 50
79056: PUSH
79057: LD_INT 60
79059: PUSH
79060: LD_INT 70
79062: PUSH
79063: LD_INT 80
79065: PUSH
79066: LD_INT 90
79068: PUSH
79069: LD_INT 100
79071: PUSH
79072: LD_INT 110
79074: PUSH
79075: LD_INT 120
79077: PUSH
79078: LD_INT 130
79080: PUSH
79081: LD_INT 140
79083: PUSH
79084: LD_INT 150
79086: PUSH
79087: EMPTY
79088: LIST
79089: LIST
79090: LIST
79091: LIST
79092: LIST
79093: LIST
79094: LIST
79095: LIST
79096: LIST
79097: LIST
79098: LIST
79099: LIST
79100: LIST
79101: LIST
79102: LIST
79103: PUSH
79104: LD_INT 1
79106: PPUSH
79107: LD_INT 15
79109: PPUSH
79110: CALL_OW 12
79114: ARRAY
79115: ST_TO_ADDR
// if ValidHex ( x , y ) then
79116: LD_VAR 0 3
79120: PPUSH
79121: LD_VAR 0 4
79125: PPUSH
79126: CALL_OW 488
79130: IFFALSE 79153
// begin result := [ x , y ] ;
79132: LD_ADDR_VAR 0 1
79136: PUSH
79137: LD_VAR 0 3
79141: PUSH
79142: LD_VAR 0 4
79146: PUSH
79147: EMPTY
79148: LIST
79149: LIST
79150: ST_TO_ADDR
// break ;
79151: GO 79155
// end ; end ;
79153: GO 78955
79155: POP
79156: POP
// if result then
79157: LD_VAR 0 1
79161: IFFALSE 79221
// begin ToLua ( playSibBomb() ) ;
79163: LD_STRING playSibBomb()
79165: PPUSH
79166: CALL_OW 559
// wait ( 0 0$14 ) ;
79170: LD_INT 490
79172: PPUSH
79173: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
79177: LD_VAR 0 1
79181: PUSH
79182: LD_INT 1
79184: ARRAY
79185: PPUSH
79186: LD_VAR 0 1
79190: PUSH
79191: LD_INT 2
79193: ARRAY
79194: PPUSH
79195: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
79199: LD_VAR 0 1
79203: PUSH
79204: LD_INT 1
79206: ARRAY
79207: PPUSH
79208: LD_VAR 0 1
79212: PUSH
79213: LD_INT 2
79215: ARRAY
79216: PPUSH
79217: CALL_OW 429
// end ; end ;
79221: LD_VAR 0 1
79225: RET
// every 0 0$1 trigger StreamModeActive and sReset do
79226: LD_EXP 74
79230: PUSH
79231: LD_EXP 96
79235: AND
79236: IFFALSE 79248
79238: GO 79240
79240: DISABLE
// YouLost (  ) ;
79241: LD_STRING 
79243: PPUSH
79244: CALL_OW 104
79248: END
// every 0 0$1 trigger StreamModeActive and sFog do
79249: LD_EXP 74
79253: PUSH
79254: LD_EXP 95
79258: AND
79259: IFFALSE 79273
79261: GO 79263
79263: DISABLE
// FogOff ( your_side ) ;
79264: LD_OWVAR 2
79268: PPUSH
79269: CALL_OW 344
79273: END
// every 0 0$1 trigger StreamModeActive and sSun do
79274: LD_EXP 74
79278: PUSH
79279: LD_EXP 97
79283: AND
79284: IFFALSE 79312
79286: GO 79288
79288: DISABLE
// begin solar_recharge_percent := 0 ;
79289: LD_ADDR_OWVAR 79
79293: PUSH
79294: LD_INT 0
79296: ST_TO_ADDR
// wait ( 5 5$00 ) ;
79297: LD_INT 10500
79299: PPUSH
79300: CALL_OW 67
// solar_recharge_percent := 100 ;
79304: LD_ADDR_OWVAR 79
79308: PUSH
79309: LD_INT 100
79311: ST_TO_ADDR
// end ;
79312: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
79313: LD_EXP 74
79317: PUSH
79318: LD_EXP 98
79322: AND
79323: IFFALSE 79562
79325: GO 79327
79327: DISABLE
79328: LD_INT 0
79330: PPUSH
79331: PPUSH
79332: PPUSH
// begin tmp := [ ] ;
79333: LD_ADDR_VAR 0 3
79337: PUSH
79338: EMPTY
79339: ST_TO_ADDR
// for i := 1 to 6 do
79340: LD_ADDR_VAR 0 1
79344: PUSH
79345: DOUBLE
79346: LD_INT 1
79348: DEC
79349: ST_TO_ADDR
79350: LD_INT 6
79352: PUSH
79353: FOR_TO
79354: IFFALSE 79459
// begin uc_nation := nation_nature ;
79356: LD_ADDR_OWVAR 21
79360: PUSH
79361: LD_INT 0
79363: ST_TO_ADDR
// uc_side := 0 ;
79364: LD_ADDR_OWVAR 20
79368: PUSH
79369: LD_INT 0
79371: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79372: LD_ADDR_OWVAR 29
79376: PUSH
79377: LD_INT 12
79379: PUSH
79380: LD_INT 12
79382: PUSH
79383: EMPTY
79384: LIST
79385: LIST
79386: ST_TO_ADDR
// hc_agressivity := 20 ;
79387: LD_ADDR_OWVAR 35
79391: PUSH
79392: LD_INT 20
79394: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
79395: LD_ADDR_OWVAR 28
79399: PUSH
79400: LD_INT 17
79402: ST_TO_ADDR
// hc_gallery :=  ;
79403: LD_ADDR_OWVAR 33
79407: PUSH
79408: LD_STRING 
79410: ST_TO_ADDR
// hc_name :=  ;
79411: LD_ADDR_OWVAR 26
79415: PUSH
79416: LD_STRING 
79418: ST_TO_ADDR
// un := CreateHuman ;
79419: LD_ADDR_VAR 0 2
79423: PUSH
79424: CALL_OW 44
79428: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
79429: LD_VAR 0 2
79433: PPUSH
79434: LD_INT 1
79436: PPUSH
79437: CALL_OW 51
// tmp := tmp ^ un ;
79441: LD_ADDR_VAR 0 3
79445: PUSH
79446: LD_VAR 0 3
79450: PUSH
79451: LD_VAR 0 2
79455: ADD
79456: ST_TO_ADDR
// end ;
79457: GO 79353
79459: POP
79460: POP
// repeat wait ( 0 0$1 ) ;
79461: LD_INT 35
79463: PPUSH
79464: CALL_OW 67
// for un in tmp do
79468: LD_ADDR_VAR 0 2
79472: PUSH
79473: LD_VAR 0 3
79477: PUSH
79478: FOR_IN
79479: IFFALSE 79553
// begin if IsDead ( un ) then
79481: LD_VAR 0 2
79485: PPUSH
79486: CALL_OW 301
79490: IFFALSE 79510
// begin tmp := tmp diff un ;
79492: LD_ADDR_VAR 0 3
79496: PUSH
79497: LD_VAR 0 3
79501: PUSH
79502: LD_VAR 0 2
79506: DIFF
79507: ST_TO_ADDR
// continue ;
79508: GO 79478
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
79510: LD_VAR 0 2
79514: PPUSH
79515: LD_INT 3
79517: PUSH
79518: LD_INT 22
79520: PUSH
79521: LD_INT 0
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: PUSH
79528: EMPTY
79529: LIST
79530: LIST
79531: PPUSH
79532: CALL_OW 69
79536: PPUSH
79537: LD_VAR 0 2
79541: PPUSH
79542: CALL_OW 74
79546: PPUSH
79547: CALL_OW 115
// end ;
79551: GO 79478
79553: POP
79554: POP
// until not tmp ;
79555: LD_VAR 0 3
79559: NOT
79560: IFFALSE 79461
// end ;
79562: PPOPN 3
79564: END
// every 0 0$1 trigger StreamModeActive and sTroll do
79565: LD_EXP 74
79569: PUSH
79570: LD_EXP 99
79574: AND
79575: IFFALSE 79629
79577: GO 79579
79579: DISABLE
// begin ToLua ( displayTroll(); ) ;
79580: LD_STRING displayTroll();
79582: PPUSH
79583: CALL_OW 559
// wait ( 3 3$00 ) ;
79587: LD_INT 6300
79589: PPUSH
79590: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79594: LD_STRING hideTroll();
79596: PPUSH
79597: CALL_OW 559
// wait ( 1 1$00 ) ;
79601: LD_INT 2100
79603: PPUSH
79604: CALL_OW 67
// ToLua ( displayTroll(); ) ;
79608: LD_STRING displayTroll();
79610: PPUSH
79611: CALL_OW 559
// wait ( 1 1$00 ) ;
79615: LD_INT 2100
79617: PPUSH
79618: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79622: LD_STRING hideTroll();
79624: PPUSH
79625: CALL_OW 559
// end ;
79629: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
79630: LD_EXP 74
79634: PUSH
79635: LD_EXP 100
79639: AND
79640: IFFALSE 79703
79642: GO 79644
79644: DISABLE
79645: LD_INT 0
79647: PPUSH
// begin p := 0 ;
79648: LD_ADDR_VAR 0 1
79652: PUSH
79653: LD_INT 0
79655: ST_TO_ADDR
// repeat game_speed := 1 ;
79656: LD_ADDR_OWVAR 65
79660: PUSH
79661: LD_INT 1
79663: ST_TO_ADDR
// wait ( 0 0$1 ) ;
79664: LD_INT 35
79666: PPUSH
79667: CALL_OW 67
// p := p + 1 ;
79671: LD_ADDR_VAR 0 1
79675: PUSH
79676: LD_VAR 0 1
79680: PUSH
79681: LD_INT 1
79683: PLUS
79684: ST_TO_ADDR
// until p >= 60 ;
79685: LD_VAR 0 1
79689: PUSH
79690: LD_INT 60
79692: GREATEREQUAL
79693: IFFALSE 79656
// game_speed := 4 ;
79695: LD_ADDR_OWVAR 65
79699: PUSH
79700: LD_INT 4
79702: ST_TO_ADDR
// end ;
79703: PPOPN 1
79705: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
79706: LD_EXP 74
79710: PUSH
79711: LD_EXP 101
79715: AND
79716: IFFALSE 79862
79718: GO 79720
79720: DISABLE
79721: LD_INT 0
79723: PPUSH
79724: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79725: LD_ADDR_VAR 0 1
79729: PUSH
79730: LD_INT 22
79732: PUSH
79733: LD_OWVAR 2
79737: PUSH
79738: EMPTY
79739: LIST
79740: LIST
79741: PUSH
79742: LD_INT 2
79744: PUSH
79745: LD_INT 30
79747: PUSH
79748: LD_INT 0
79750: PUSH
79751: EMPTY
79752: LIST
79753: LIST
79754: PUSH
79755: LD_INT 30
79757: PUSH
79758: LD_INT 1
79760: PUSH
79761: EMPTY
79762: LIST
79763: LIST
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: LIST
79769: PUSH
79770: EMPTY
79771: LIST
79772: LIST
79773: PPUSH
79774: CALL_OW 69
79778: ST_TO_ADDR
// if not depot then
79779: LD_VAR 0 1
79783: NOT
79784: IFFALSE 79788
// exit ;
79786: GO 79862
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
79788: LD_ADDR_VAR 0 2
79792: PUSH
79793: LD_VAR 0 1
79797: PUSH
79798: LD_INT 1
79800: PPUSH
79801: LD_VAR 0 1
79805: PPUSH
79806: CALL_OW 12
79810: ARRAY
79811: PPUSH
79812: CALL_OW 274
79816: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
79817: LD_VAR 0 2
79821: PPUSH
79822: LD_INT 1
79824: PPUSH
79825: LD_INT 0
79827: PPUSH
79828: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
79832: LD_VAR 0 2
79836: PPUSH
79837: LD_INT 2
79839: PPUSH
79840: LD_INT 0
79842: PPUSH
79843: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
79847: LD_VAR 0 2
79851: PPUSH
79852: LD_INT 3
79854: PPUSH
79855: LD_INT 0
79857: PPUSH
79858: CALL_OW 277
// end ;
79862: PPOPN 2
79864: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
79865: LD_EXP 74
79869: PUSH
79870: LD_EXP 102
79874: AND
79875: IFFALSE 79972
79877: GO 79879
79879: DISABLE
79880: LD_INT 0
79882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79883: LD_ADDR_VAR 0 1
79887: PUSH
79888: LD_INT 22
79890: PUSH
79891: LD_OWVAR 2
79895: PUSH
79896: EMPTY
79897: LIST
79898: LIST
79899: PUSH
79900: LD_INT 21
79902: PUSH
79903: LD_INT 1
79905: PUSH
79906: EMPTY
79907: LIST
79908: LIST
79909: PUSH
79910: LD_INT 3
79912: PUSH
79913: LD_INT 23
79915: PUSH
79916: LD_INT 0
79918: PUSH
79919: EMPTY
79920: LIST
79921: LIST
79922: PUSH
79923: EMPTY
79924: LIST
79925: LIST
79926: PUSH
79927: EMPTY
79928: LIST
79929: LIST
79930: LIST
79931: PPUSH
79932: CALL_OW 69
79936: ST_TO_ADDR
// if not tmp then
79937: LD_VAR 0 1
79941: NOT
79942: IFFALSE 79946
// exit ;
79944: GO 79972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
79946: LD_VAR 0 1
79950: PUSH
79951: LD_INT 1
79953: PPUSH
79954: LD_VAR 0 1
79958: PPUSH
79959: CALL_OW 12
79963: ARRAY
79964: PPUSH
79965: LD_INT 200
79967: PPUSH
79968: CALL_OW 234
// end ;
79972: PPOPN 1
79974: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
79975: LD_EXP 74
79979: PUSH
79980: LD_EXP 103
79984: AND
79985: IFFALSE 80064
79987: GO 79989
79989: DISABLE
79990: LD_INT 0
79992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
79993: LD_ADDR_VAR 0 1
79997: PUSH
79998: LD_INT 22
80000: PUSH
80001: LD_OWVAR 2
80005: PUSH
80006: EMPTY
80007: LIST
80008: LIST
80009: PUSH
80010: LD_INT 21
80012: PUSH
80013: LD_INT 2
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: PUSH
80020: EMPTY
80021: LIST
80022: LIST
80023: PPUSH
80024: CALL_OW 69
80028: ST_TO_ADDR
// if not tmp then
80029: LD_VAR 0 1
80033: NOT
80034: IFFALSE 80038
// exit ;
80036: GO 80064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
80038: LD_VAR 0 1
80042: PUSH
80043: LD_INT 1
80045: PPUSH
80046: LD_VAR 0 1
80050: PPUSH
80051: CALL_OW 12
80055: ARRAY
80056: PPUSH
80057: LD_INT 60
80059: PPUSH
80060: CALL_OW 234
// end ;
80064: PPOPN 1
80066: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
80067: LD_EXP 74
80071: PUSH
80072: LD_EXP 104
80076: AND
80077: IFFALSE 80176
80079: GO 80081
80081: DISABLE
80082: LD_INT 0
80084: PPUSH
80085: PPUSH
// begin enable ;
80086: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
80087: LD_ADDR_VAR 0 1
80091: PUSH
80092: LD_INT 22
80094: PUSH
80095: LD_OWVAR 2
80099: PUSH
80100: EMPTY
80101: LIST
80102: LIST
80103: PUSH
80104: LD_INT 61
80106: PUSH
80107: EMPTY
80108: LIST
80109: PUSH
80110: LD_INT 33
80112: PUSH
80113: LD_INT 2
80115: PUSH
80116: EMPTY
80117: LIST
80118: LIST
80119: PUSH
80120: EMPTY
80121: LIST
80122: LIST
80123: LIST
80124: PPUSH
80125: CALL_OW 69
80129: ST_TO_ADDR
// if not tmp then
80130: LD_VAR 0 1
80134: NOT
80135: IFFALSE 80139
// exit ;
80137: GO 80176
// for i in tmp do
80139: LD_ADDR_VAR 0 2
80143: PUSH
80144: LD_VAR 0 1
80148: PUSH
80149: FOR_IN
80150: IFFALSE 80174
// if IsControledBy ( i ) then
80152: LD_VAR 0 2
80156: PPUSH
80157: CALL_OW 312
80161: IFFALSE 80172
// ComUnlink ( i ) ;
80163: LD_VAR 0 2
80167: PPUSH
80168: CALL_OW 136
80172: GO 80149
80174: POP
80175: POP
// end ;
80176: PPOPN 2
80178: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
80179: LD_EXP 74
80183: PUSH
80184: LD_EXP 105
80188: AND
80189: IFFALSE 80329
80191: GO 80193
80193: DISABLE
80194: LD_INT 0
80196: PPUSH
80197: PPUSH
// begin ToLua ( displayPowell(); ) ;
80198: LD_STRING displayPowell();
80200: PPUSH
80201: CALL_OW 559
// uc_side := 0 ;
80205: LD_ADDR_OWVAR 20
80209: PUSH
80210: LD_INT 0
80212: ST_TO_ADDR
// uc_nation := 2 ;
80213: LD_ADDR_OWVAR 21
80217: PUSH
80218: LD_INT 2
80220: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
80221: LD_ADDR_OWVAR 37
80225: PUSH
80226: LD_INT 14
80228: ST_TO_ADDR
// vc_engine := engine_siberite ;
80229: LD_ADDR_OWVAR 39
80233: PUSH
80234: LD_INT 3
80236: ST_TO_ADDR
// vc_control := control_apeman ;
80237: LD_ADDR_OWVAR 38
80241: PUSH
80242: LD_INT 5
80244: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
80245: LD_ADDR_OWVAR 40
80249: PUSH
80250: LD_INT 29
80252: ST_TO_ADDR
// un := CreateVehicle ;
80253: LD_ADDR_VAR 0 2
80257: PUSH
80258: CALL_OW 45
80262: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80263: LD_VAR 0 2
80267: PPUSH
80268: LD_INT 1
80270: PPUSH
80271: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80275: LD_INT 35
80277: PPUSH
80278: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80282: LD_VAR 0 2
80286: PPUSH
80287: LD_INT 22
80289: PUSH
80290: LD_OWVAR 2
80294: PUSH
80295: EMPTY
80296: LIST
80297: LIST
80298: PPUSH
80299: CALL_OW 69
80303: PPUSH
80304: LD_VAR 0 2
80308: PPUSH
80309: CALL_OW 74
80313: PPUSH
80314: CALL_OW 115
// until IsDead ( un ) ;
80318: LD_VAR 0 2
80322: PPUSH
80323: CALL_OW 301
80327: IFFALSE 80275
// end ;
80329: PPOPN 2
80331: END
// every 0 0$1 trigger StreamModeActive and sStu do
80332: LD_EXP 74
80336: PUSH
80337: LD_EXP 113
80341: AND
80342: IFFALSE 80358
80344: GO 80346
80346: DISABLE
// begin ToLua ( displayStucuk(); ) ;
80347: LD_STRING displayStucuk();
80349: PPUSH
80350: CALL_OW 559
// ResetFog ;
80354: CALL_OW 335
// end ;
80358: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
80359: LD_EXP 74
80363: PUSH
80364: LD_EXP 106
80368: AND
80369: IFFALSE 80510
80371: GO 80373
80373: DISABLE
80374: LD_INT 0
80376: PPUSH
80377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80378: LD_ADDR_VAR 0 2
80382: PUSH
80383: LD_INT 22
80385: PUSH
80386: LD_OWVAR 2
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: LD_INT 21
80397: PUSH
80398: LD_INT 1
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: PUSH
80405: EMPTY
80406: LIST
80407: LIST
80408: PPUSH
80409: CALL_OW 69
80413: ST_TO_ADDR
// if not tmp then
80414: LD_VAR 0 2
80418: NOT
80419: IFFALSE 80423
// exit ;
80421: GO 80510
// un := tmp [ rand ( 1 , tmp ) ] ;
80423: LD_ADDR_VAR 0 1
80427: PUSH
80428: LD_VAR 0 2
80432: PUSH
80433: LD_INT 1
80435: PPUSH
80436: LD_VAR 0 2
80440: PPUSH
80441: CALL_OW 12
80445: ARRAY
80446: ST_TO_ADDR
// SetSide ( un , 0 ) ;
80447: LD_VAR 0 1
80451: PPUSH
80452: LD_INT 0
80454: PPUSH
80455: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
80459: LD_VAR 0 1
80463: PPUSH
80464: LD_OWVAR 3
80468: PUSH
80469: LD_VAR 0 1
80473: DIFF
80474: PPUSH
80475: LD_VAR 0 1
80479: PPUSH
80480: CALL_OW 74
80484: PPUSH
80485: CALL_OW 115
// wait ( 0 0$20 ) ;
80489: LD_INT 700
80491: PPUSH
80492: CALL_OW 67
// SetSide ( un , your_side ) ;
80496: LD_VAR 0 1
80500: PPUSH
80501: LD_OWVAR 2
80505: PPUSH
80506: CALL_OW 235
// end ;
80510: PPOPN 2
80512: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
80513: LD_EXP 74
80517: PUSH
80518: LD_EXP 107
80522: AND
80523: IFFALSE 80629
80525: GO 80527
80527: DISABLE
80528: LD_INT 0
80530: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80531: LD_ADDR_VAR 0 1
80535: PUSH
80536: LD_INT 22
80538: PUSH
80539: LD_OWVAR 2
80543: PUSH
80544: EMPTY
80545: LIST
80546: LIST
80547: PUSH
80548: LD_INT 2
80550: PUSH
80551: LD_INT 30
80553: PUSH
80554: LD_INT 0
80556: PUSH
80557: EMPTY
80558: LIST
80559: LIST
80560: PUSH
80561: LD_INT 30
80563: PUSH
80564: LD_INT 1
80566: PUSH
80567: EMPTY
80568: LIST
80569: LIST
80570: PUSH
80571: EMPTY
80572: LIST
80573: LIST
80574: LIST
80575: PUSH
80576: EMPTY
80577: LIST
80578: LIST
80579: PPUSH
80580: CALL_OW 69
80584: ST_TO_ADDR
// if not depot then
80585: LD_VAR 0 1
80589: NOT
80590: IFFALSE 80594
// exit ;
80592: GO 80629
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
80594: LD_VAR 0 1
80598: PUSH
80599: LD_INT 1
80601: ARRAY
80602: PPUSH
80603: CALL_OW 250
80607: PPUSH
80608: LD_VAR 0 1
80612: PUSH
80613: LD_INT 1
80615: ARRAY
80616: PPUSH
80617: CALL_OW 251
80621: PPUSH
80622: LD_INT 70
80624: PPUSH
80625: CALL_OW 495
// end ;
80629: PPOPN 1
80631: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
80632: LD_EXP 74
80636: PUSH
80637: LD_EXP 108
80641: AND
80642: IFFALSE 80853
80644: GO 80646
80646: DISABLE
80647: LD_INT 0
80649: PPUSH
80650: PPUSH
80651: PPUSH
80652: PPUSH
80653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80654: LD_ADDR_VAR 0 5
80658: PUSH
80659: LD_INT 22
80661: PUSH
80662: LD_OWVAR 2
80666: PUSH
80667: EMPTY
80668: LIST
80669: LIST
80670: PUSH
80671: LD_INT 21
80673: PUSH
80674: LD_INT 1
80676: PUSH
80677: EMPTY
80678: LIST
80679: LIST
80680: PUSH
80681: EMPTY
80682: LIST
80683: LIST
80684: PPUSH
80685: CALL_OW 69
80689: ST_TO_ADDR
// if not tmp then
80690: LD_VAR 0 5
80694: NOT
80695: IFFALSE 80699
// exit ;
80697: GO 80853
// for i in tmp do
80699: LD_ADDR_VAR 0 1
80703: PUSH
80704: LD_VAR 0 5
80708: PUSH
80709: FOR_IN
80710: IFFALSE 80851
// begin d := rand ( 0 , 5 ) ;
80712: LD_ADDR_VAR 0 4
80716: PUSH
80717: LD_INT 0
80719: PPUSH
80720: LD_INT 5
80722: PPUSH
80723: CALL_OW 12
80727: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
80728: LD_ADDR_VAR 0 2
80732: PUSH
80733: LD_VAR 0 1
80737: PPUSH
80738: CALL_OW 250
80742: PPUSH
80743: LD_VAR 0 4
80747: PPUSH
80748: LD_INT 3
80750: PPUSH
80751: LD_INT 12
80753: PPUSH
80754: CALL_OW 12
80758: PPUSH
80759: CALL_OW 272
80763: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
80764: LD_ADDR_VAR 0 3
80768: PUSH
80769: LD_VAR 0 1
80773: PPUSH
80774: CALL_OW 251
80778: PPUSH
80779: LD_VAR 0 4
80783: PPUSH
80784: LD_INT 3
80786: PPUSH
80787: LD_INT 12
80789: PPUSH
80790: CALL_OW 12
80794: PPUSH
80795: CALL_OW 273
80799: ST_TO_ADDR
// if ValidHex ( x , y ) then
80800: LD_VAR 0 2
80804: PPUSH
80805: LD_VAR 0 3
80809: PPUSH
80810: CALL_OW 488
80814: IFFALSE 80849
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
80816: LD_VAR 0 1
80820: PPUSH
80821: LD_VAR 0 2
80825: PPUSH
80826: LD_VAR 0 3
80830: PPUSH
80831: LD_INT 3
80833: PPUSH
80834: LD_INT 6
80836: PPUSH
80837: CALL_OW 12
80841: PPUSH
80842: LD_INT 1
80844: PPUSH
80845: CALL_OW 483
// end ;
80849: GO 80709
80851: POP
80852: POP
// end ;
80853: PPOPN 5
80855: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
80856: LD_EXP 74
80860: PUSH
80861: LD_EXP 109
80865: AND
80866: IFFALSE 80960
80868: GO 80870
80870: DISABLE
80871: LD_INT 0
80873: PPUSH
80874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
80875: LD_ADDR_VAR 0 2
80879: PUSH
80880: LD_INT 22
80882: PUSH
80883: LD_OWVAR 2
80887: PUSH
80888: EMPTY
80889: LIST
80890: LIST
80891: PUSH
80892: LD_INT 32
80894: PUSH
80895: LD_INT 1
80897: PUSH
80898: EMPTY
80899: LIST
80900: LIST
80901: PUSH
80902: LD_INT 21
80904: PUSH
80905: LD_INT 2
80907: PUSH
80908: EMPTY
80909: LIST
80910: LIST
80911: PUSH
80912: EMPTY
80913: LIST
80914: LIST
80915: LIST
80916: PPUSH
80917: CALL_OW 69
80921: ST_TO_ADDR
// if not tmp then
80922: LD_VAR 0 2
80926: NOT
80927: IFFALSE 80931
// exit ;
80929: GO 80960
// for i in tmp do
80931: LD_ADDR_VAR 0 1
80935: PUSH
80936: LD_VAR 0 2
80940: PUSH
80941: FOR_IN
80942: IFFALSE 80958
// SetFuel ( i , 0 ) ;
80944: LD_VAR 0 1
80948: PPUSH
80949: LD_INT 0
80951: PPUSH
80952: CALL_OW 240
80956: GO 80941
80958: POP
80959: POP
// end ;
80960: PPOPN 2
80962: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
80963: LD_EXP 74
80967: PUSH
80968: LD_EXP 110
80972: AND
80973: IFFALSE 81039
80975: GO 80977
80977: DISABLE
80978: LD_INT 0
80980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80981: LD_ADDR_VAR 0 1
80985: PUSH
80986: LD_INT 22
80988: PUSH
80989: LD_OWVAR 2
80993: PUSH
80994: EMPTY
80995: LIST
80996: LIST
80997: PUSH
80998: LD_INT 30
81000: PUSH
81001: LD_INT 29
81003: PUSH
81004: EMPTY
81005: LIST
81006: LIST
81007: PUSH
81008: EMPTY
81009: LIST
81010: LIST
81011: PPUSH
81012: CALL_OW 69
81016: ST_TO_ADDR
// if not tmp then
81017: LD_VAR 0 1
81021: NOT
81022: IFFALSE 81026
// exit ;
81024: GO 81039
// DestroyUnit ( tmp [ 1 ] ) ;
81026: LD_VAR 0 1
81030: PUSH
81031: LD_INT 1
81033: ARRAY
81034: PPUSH
81035: CALL_OW 65
// end ;
81039: PPOPN 1
81041: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
81042: LD_EXP 74
81046: PUSH
81047: LD_EXP 112
81051: AND
81052: IFFALSE 81181
81054: GO 81056
81056: DISABLE
81057: LD_INT 0
81059: PPUSH
// begin uc_side := 0 ;
81060: LD_ADDR_OWVAR 20
81064: PUSH
81065: LD_INT 0
81067: ST_TO_ADDR
// uc_nation := nation_arabian ;
81068: LD_ADDR_OWVAR 21
81072: PUSH
81073: LD_INT 2
81075: ST_TO_ADDR
// hc_gallery :=  ;
81076: LD_ADDR_OWVAR 33
81080: PUSH
81081: LD_STRING 
81083: ST_TO_ADDR
// hc_name :=  ;
81084: LD_ADDR_OWVAR 26
81088: PUSH
81089: LD_STRING 
81091: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
81092: LD_INT 1
81094: PPUSH
81095: LD_INT 11
81097: PPUSH
81098: LD_INT 10
81100: PPUSH
81101: CALL_OW 380
// un := CreateHuman ;
81105: LD_ADDR_VAR 0 1
81109: PUSH
81110: CALL_OW 44
81114: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81115: LD_VAR 0 1
81119: PPUSH
81120: LD_INT 1
81122: PPUSH
81123: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81127: LD_INT 35
81129: PPUSH
81130: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81134: LD_VAR 0 1
81138: PPUSH
81139: LD_INT 22
81141: PUSH
81142: LD_OWVAR 2
81146: PUSH
81147: EMPTY
81148: LIST
81149: LIST
81150: PPUSH
81151: CALL_OW 69
81155: PPUSH
81156: LD_VAR 0 1
81160: PPUSH
81161: CALL_OW 74
81165: PPUSH
81166: CALL_OW 115
// until IsDead ( un ) ;
81170: LD_VAR 0 1
81174: PPUSH
81175: CALL_OW 301
81179: IFFALSE 81127
// end ;
81181: PPOPN 1
81183: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
81184: LD_EXP 74
81188: PUSH
81189: LD_EXP 114
81193: AND
81194: IFFALSE 81206
81196: GO 81198
81198: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
81199: LD_STRING earthquake(getX(game), 0, 32)
81201: PPUSH
81202: CALL_OW 559
81206: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
81207: LD_EXP 74
81211: PUSH
81212: LD_EXP 115
81216: AND
81217: IFFALSE 81308
81219: GO 81221
81221: DISABLE
81222: LD_INT 0
81224: PPUSH
// begin enable ;
81225: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
81226: LD_ADDR_VAR 0 1
81230: PUSH
81231: LD_INT 22
81233: PUSH
81234: LD_OWVAR 2
81238: PUSH
81239: EMPTY
81240: LIST
81241: LIST
81242: PUSH
81243: LD_INT 21
81245: PUSH
81246: LD_INT 2
81248: PUSH
81249: EMPTY
81250: LIST
81251: LIST
81252: PUSH
81253: LD_INT 33
81255: PUSH
81256: LD_INT 3
81258: PUSH
81259: EMPTY
81260: LIST
81261: LIST
81262: PUSH
81263: EMPTY
81264: LIST
81265: LIST
81266: LIST
81267: PPUSH
81268: CALL_OW 69
81272: ST_TO_ADDR
// if not tmp then
81273: LD_VAR 0 1
81277: NOT
81278: IFFALSE 81282
// exit ;
81280: GO 81308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81282: LD_VAR 0 1
81286: PUSH
81287: LD_INT 1
81289: PPUSH
81290: LD_VAR 0 1
81294: PPUSH
81295: CALL_OW 12
81299: ARRAY
81300: PPUSH
81301: LD_INT 1
81303: PPUSH
81304: CALL_OW 234
// end ;
81308: PPOPN 1
81310: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
81311: LD_EXP 74
81315: PUSH
81316: LD_EXP 116
81320: AND
81321: IFFALSE 81462
81323: GO 81325
81325: DISABLE
81326: LD_INT 0
81328: PPUSH
81329: PPUSH
81330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81331: LD_ADDR_VAR 0 3
81335: PUSH
81336: LD_INT 22
81338: PUSH
81339: LD_OWVAR 2
81343: PUSH
81344: EMPTY
81345: LIST
81346: LIST
81347: PUSH
81348: LD_INT 25
81350: PUSH
81351: LD_INT 1
81353: PUSH
81354: EMPTY
81355: LIST
81356: LIST
81357: PUSH
81358: EMPTY
81359: LIST
81360: LIST
81361: PPUSH
81362: CALL_OW 69
81366: ST_TO_ADDR
// if not tmp then
81367: LD_VAR 0 3
81371: NOT
81372: IFFALSE 81376
// exit ;
81374: GO 81462
// un := tmp [ rand ( 1 , tmp ) ] ;
81376: LD_ADDR_VAR 0 2
81380: PUSH
81381: LD_VAR 0 3
81385: PUSH
81386: LD_INT 1
81388: PPUSH
81389: LD_VAR 0 3
81393: PPUSH
81394: CALL_OW 12
81398: ARRAY
81399: ST_TO_ADDR
// if Crawls ( un ) then
81400: LD_VAR 0 2
81404: PPUSH
81405: CALL_OW 318
81409: IFFALSE 81420
// ComWalk ( un ) ;
81411: LD_VAR 0 2
81415: PPUSH
81416: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
81420: LD_VAR 0 2
81424: PPUSH
81425: LD_INT 9
81427: PPUSH
81428: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
81432: LD_INT 28
81434: PPUSH
81435: LD_OWVAR 2
81439: PPUSH
81440: LD_INT 2
81442: PPUSH
81443: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
81447: LD_INT 29
81449: PPUSH
81450: LD_OWVAR 2
81454: PPUSH
81455: LD_INT 2
81457: PPUSH
81458: CALL_OW 322
// end ;
81462: PPOPN 3
81464: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
81465: LD_EXP 74
81469: PUSH
81470: LD_EXP 117
81474: AND
81475: IFFALSE 81586
81477: GO 81479
81479: DISABLE
81480: LD_INT 0
81482: PPUSH
81483: PPUSH
81484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81485: LD_ADDR_VAR 0 3
81489: PUSH
81490: LD_INT 22
81492: PUSH
81493: LD_OWVAR 2
81497: PUSH
81498: EMPTY
81499: LIST
81500: LIST
81501: PUSH
81502: LD_INT 25
81504: PUSH
81505: LD_INT 1
81507: PUSH
81508: EMPTY
81509: LIST
81510: LIST
81511: PUSH
81512: EMPTY
81513: LIST
81514: LIST
81515: PPUSH
81516: CALL_OW 69
81520: ST_TO_ADDR
// if not tmp then
81521: LD_VAR 0 3
81525: NOT
81526: IFFALSE 81530
// exit ;
81528: GO 81586
// un := tmp [ rand ( 1 , tmp ) ] ;
81530: LD_ADDR_VAR 0 2
81534: PUSH
81535: LD_VAR 0 3
81539: PUSH
81540: LD_INT 1
81542: PPUSH
81543: LD_VAR 0 3
81547: PPUSH
81548: CALL_OW 12
81552: ARRAY
81553: ST_TO_ADDR
// if Crawls ( un ) then
81554: LD_VAR 0 2
81558: PPUSH
81559: CALL_OW 318
81563: IFFALSE 81574
// ComWalk ( un ) ;
81565: LD_VAR 0 2
81569: PPUSH
81570: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81574: LD_VAR 0 2
81578: PPUSH
81579: LD_INT 8
81581: PPUSH
81582: CALL_OW 336
// end ;
81586: PPOPN 3
81588: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
81589: LD_EXP 74
81593: PUSH
81594: LD_EXP 118
81598: AND
81599: IFFALSE 81743
81601: GO 81603
81603: DISABLE
81604: LD_INT 0
81606: PPUSH
81607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
81608: LD_ADDR_VAR 0 2
81612: PUSH
81613: LD_INT 22
81615: PUSH
81616: LD_OWVAR 2
81620: PUSH
81621: EMPTY
81622: LIST
81623: LIST
81624: PUSH
81625: LD_INT 21
81627: PUSH
81628: LD_INT 2
81630: PUSH
81631: EMPTY
81632: LIST
81633: LIST
81634: PUSH
81635: LD_INT 2
81637: PUSH
81638: LD_INT 34
81640: PUSH
81641: LD_INT 12
81643: PUSH
81644: EMPTY
81645: LIST
81646: LIST
81647: PUSH
81648: LD_INT 34
81650: PUSH
81651: LD_INT 51
81653: PUSH
81654: EMPTY
81655: LIST
81656: LIST
81657: PUSH
81658: LD_INT 34
81660: PUSH
81661: LD_INT 32
81663: PUSH
81664: EMPTY
81665: LIST
81666: LIST
81667: PUSH
81668: EMPTY
81669: LIST
81670: LIST
81671: LIST
81672: LIST
81673: PUSH
81674: EMPTY
81675: LIST
81676: LIST
81677: LIST
81678: PPUSH
81679: CALL_OW 69
81683: ST_TO_ADDR
// if not tmp then
81684: LD_VAR 0 2
81688: NOT
81689: IFFALSE 81693
// exit ;
81691: GO 81743
// for i in tmp do
81693: LD_ADDR_VAR 0 1
81697: PUSH
81698: LD_VAR 0 2
81702: PUSH
81703: FOR_IN
81704: IFFALSE 81741
// if GetCargo ( i , mat_artifact ) = 0 then
81706: LD_VAR 0 1
81710: PPUSH
81711: LD_INT 4
81713: PPUSH
81714: CALL_OW 289
81718: PUSH
81719: LD_INT 0
81721: EQUAL
81722: IFFALSE 81739
// SetCargo ( i , mat_siberit , 100 ) ;
81724: LD_VAR 0 1
81728: PPUSH
81729: LD_INT 3
81731: PPUSH
81732: LD_INT 100
81734: PPUSH
81735: CALL_OW 290
81739: GO 81703
81741: POP
81742: POP
// end ;
81743: PPOPN 2
81745: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
81746: LD_EXP 74
81750: PUSH
81751: LD_EXP 119
81755: AND
81756: IFFALSE 81939
81758: GO 81760
81760: DISABLE
81761: LD_INT 0
81763: PPUSH
81764: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81765: LD_ADDR_VAR 0 2
81769: PUSH
81770: LD_INT 22
81772: PUSH
81773: LD_OWVAR 2
81777: PUSH
81778: EMPTY
81779: LIST
81780: LIST
81781: PPUSH
81782: CALL_OW 69
81786: ST_TO_ADDR
// if not tmp then
81787: LD_VAR 0 2
81791: NOT
81792: IFFALSE 81796
// exit ;
81794: GO 81939
// for i := 1 to 2 do
81796: LD_ADDR_VAR 0 1
81800: PUSH
81801: DOUBLE
81802: LD_INT 1
81804: DEC
81805: ST_TO_ADDR
81806: LD_INT 2
81808: PUSH
81809: FOR_TO
81810: IFFALSE 81937
// begin uc_side := your_side ;
81812: LD_ADDR_OWVAR 20
81816: PUSH
81817: LD_OWVAR 2
81821: ST_TO_ADDR
// uc_nation := nation_american ;
81822: LD_ADDR_OWVAR 21
81826: PUSH
81827: LD_INT 1
81829: ST_TO_ADDR
// vc_chassis := us_morphling ;
81830: LD_ADDR_OWVAR 37
81834: PUSH
81835: LD_INT 5
81837: ST_TO_ADDR
// vc_engine := engine_siberite ;
81838: LD_ADDR_OWVAR 39
81842: PUSH
81843: LD_INT 3
81845: ST_TO_ADDR
// vc_control := control_computer ;
81846: LD_ADDR_OWVAR 38
81850: PUSH
81851: LD_INT 3
81853: ST_TO_ADDR
// vc_weapon := us_double_laser ;
81854: LD_ADDR_OWVAR 40
81858: PUSH
81859: LD_INT 10
81861: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
81862: LD_VAR 0 2
81866: PUSH
81867: LD_INT 1
81869: ARRAY
81870: PPUSH
81871: CALL_OW 310
81875: NOT
81876: IFFALSE 81923
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
81878: CALL_OW 45
81882: PPUSH
81883: LD_VAR 0 2
81887: PUSH
81888: LD_INT 1
81890: ARRAY
81891: PPUSH
81892: CALL_OW 250
81896: PPUSH
81897: LD_VAR 0 2
81901: PUSH
81902: LD_INT 1
81904: ARRAY
81905: PPUSH
81906: CALL_OW 251
81910: PPUSH
81911: LD_INT 12
81913: PPUSH
81914: LD_INT 1
81916: PPUSH
81917: CALL_OW 50
81921: GO 81935
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81923: CALL_OW 45
81927: PPUSH
81928: LD_INT 1
81930: PPUSH
81931: CALL_OW 51
// end ;
81935: GO 81809
81937: POP
81938: POP
// end ;
81939: PPOPN 2
81941: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
81942: LD_EXP 74
81946: PUSH
81947: LD_EXP 120
81951: AND
81952: IFFALSE 82174
81954: GO 81956
81956: DISABLE
81957: LD_INT 0
81959: PPUSH
81960: PPUSH
81961: PPUSH
81962: PPUSH
81963: PPUSH
81964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81965: LD_ADDR_VAR 0 6
81969: PUSH
81970: LD_INT 22
81972: PUSH
81973: LD_OWVAR 2
81977: PUSH
81978: EMPTY
81979: LIST
81980: LIST
81981: PUSH
81982: LD_INT 21
81984: PUSH
81985: LD_INT 1
81987: PUSH
81988: EMPTY
81989: LIST
81990: LIST
81991: PUSH
81992: LD_INT 3
81994: PUSH
81995: LD_INT 23
81997: PUSH
81998: LD_INT 0
82000: PUSH
82001: EMPTY
82002: LIST
82003: LIST
82004: PUSH
82005: EMPTY
82006: LIST
82007: LIST
82008: PUSH
82009: EMPTY
82010: LIST
82011: LIST
82012: LIST
82013: PPUSH
82014: CALL_OW 69
82018: ST_TO_ADDR
// if not tmp then
82019: LD_VAR 0 6
82023: NOT
82024: IFFALSE 82028
// exit ;
82026: GO 82174
// s1 := rand ( 1 , 4 ) ;
82028: LD_ADDR_VAR 0 2
82032: PUSH
82033: LD_INT 1
82035: PPUSH
82036: LD_INT 4
82038: PPUSH
82039: CALL_OW 12
82043: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
82044: LD_ADDR_VAR 0 4
82048: PUSH
82049: LD_VAR 0 6
82053: PUSH
82054: LD_INT 1
82056: ARRAY
82057: PPUSH
82058: LD_VAR 0 2
82062: PPUSH
82063: CALL_OW 259
82067: ST_TO_ADDR
// if s1 = 1 then
82068: LD_VAR 0 2
82072: PUSH
82073: LD_INT 1
82075: EQUAL
82076: IFFALSE 82096
// s2 := rand ( 2 , 4 ) else
82078: LD_ADDR_VAR 0 3
82082: PUSH
82083: LD_INT 2
82085: PPUSH
82086: LD_INT 4
82088: PPUSH
82089: CALL_OW 12
82093: ST_TO_ADDR
82094: GO 82104
// s2 := 1 ;
82096: LD_ADDR_VAR 0 3
82100: PUSH
82101: LD_INT 1
82103: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
82104: LD_ADDR_VAR 0 5
82108: PUSH
82109: LD_VAR 0 6
82113: PUSH
82114: LD_INT 1
82116: ARRAY
82117: PPUSH
82118: LD_VAR 0 3
82122: PPUSH
82123: CALL_OW 259
82127: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
82128: LD_VAR 0 6
82132: PUSH
82133: LD_INT 1
82135: ARRAY
82136: PPUSH
82137: LD_VAR 0 2
82141: PPUSH
82142: LD_VAR 0 5
82146: PPUSH
82147: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
82151: LD_VAR 0 6
82155: PUSH
82156: LD_INT 1
82158: ARRAY
82159: PPUSH
82160: LD_VAR 0 3
82164: PPUSH
82165: LD_VAR 0 4
82169: PPUSH
82170: CALL_OW 237
// end ;
82174: PPOPN 6
82176: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
82177: LD_EXP 74
82181: PUSH
82182: LD_EXP 121
82186: AND
82187: IFFALSE 82266
82189: GO 82191
82191: DISABLE
82192: LD_INT 0
82194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
82195: LD_ADDR_VAR 0 1
82199: PUSH
82200: LD_INT 22
82202: PUSH
82203: LD_OWVAR 2
82207: PUSH
82208: EMPTY
82209: LIST
82210: LIST
82211: PUSH
82212: LD_INT 30
82214: PUSH
82215: LD_INT 3
82217: PUSH
82218: EMPTY
82219: LIST
82220: LIST
82221: PUSH
82222: EMPTY
82223: LIST
82224: LIST
82225: PPUSH
82226: CALL_OW 69
82230: ST_TO_ADDR
// if not tmp then
82231: LD_VAR 0 1
82235: NOT
82236: IFFALSE 82240
// exit ;
82238: GO 82266
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82240: LD_VAR 0 1
82244: PUSH
82245: LD_INT 1
82247: PPUSH
82248: LD_VAR 0 1
82252: PPUSH
82253: CALL_OW 12
82257: ARRAY
82258: PPUSH
82259: LD_INT 1
82261: PPUSH
82262: CALL_OW 234
// end ;
82266: PPOPN 1
82268: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
82269: LD_EXP 74
82273: PUSH
82274: LD_EXP 122
82278: AND
82279: IFFALSE 82391
82281: GO 82283
82283: DISABLE
82284: LD_INT 0
82286: PPUSH
82287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
82288: LD_ADDR_VAR 0 2
82292: PUSH
82293: LD_INT 22
82295: PUSH
82296: LD_OWVAR 2
82300: PUSH
82301: EMPTY
82302: LIST
82303: LIST
82304: PUSH
82305: LD_INT 2
82307: PUSH
82308: LD_INT 30
82310: PUSH
82311: LD_INT 27
82313: PUSH
82314: EMPTY
82315: LIST
82316: LIST
82317: PUSH
82318: LD_INT 30
82320: PUSH
82321: LD_INT 26
82323: PUSH
82324: EMPTY
82325: LIST
82326: LIST
82327: PUSH
82328: LD_INT 30
82330: PUSH
82331: LD_INT 28
82333: PUSH
82334: EMPTY
82335: LIST
82336: LIST
82337: PUSH
82338: EMPTY
82339: LIST
82340: LIST
82341: LIST
82342: LIST
82343: PUSH
82344: EMPTY
82345: LIST
82346: LIST
82347: PPUSH
82348: CALL_OW 69
82352: ST_TO_ADDR
// if not tmp then
82353: LD_VAR 0 2
82357: NOT
82358: IFFALSE 82362
// exit ;
82360: GO 82391
// for i in tmp do
82362: LD_ADDR_VAR 0 1
82366: PUSH
82367: LD_VAR 0 2
82371: PUSH
82372: FOR_IN
82373: IFFALSE 82389
// SetLives ( i , 1 ) ;
82375: LD_VAR 0 1
82379: PPUSH
82380: LD_INT 1
82382: PPUSH
82383: CALL_OW 234
82387: GO 82372
82389: POP
82390: POP
// end ;
82391: PPOPN 2
82393: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
82394: LD_EXP 74
82398: PUSH
82399: LD_EXP 123
82403: AND
82404: IFFALSE 82691
82406: GO 82408
82408: DISABLE
82409: LD_INT 0
82411: PPUSH
82412: PPUSH
82413: PPUSH
// begin i := rand ( 1 , 7 ) ;
82414: LD_ADDR_VAR 0 1
82418: PUSH
82419: LD_INT 1
82421: PPUSH
82422: LD_INT 7
82424: PPUSH
82425: CALL_OW 12
82429: ST_TO_ADDR
// case i of 1 :
82430: LD_VAR 0 1
82434: PUSH
82435: LD_INT 1
82437: DOUBLE
82438: EQUAL
82439: IFTRUE 82443
82441: GO 82453
82443: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
82444: LD_STRING earthquake(getX(game), 0, 32)
82446: PPUSH
82447: CALL_OW 559
82451: GO 82691
82453: LD_INT 2
82455: DOUBLE
82456: EQUAL
82457: IFTRUE 82461
82459: GO 82475
82461: POP
// begin ToLua ( displayStucuk(); ) ;
82462: LD_STRING displayStucuk();
82464: PPUSH
82465: CALL_OW 559
// ResetFog ;
82469: CALL_OW 335
// end ; 3 :
82473: GO 82691
82475: LD_INT 3
82477: DOUBLE
82478: EQUAL
82479: IFTRUE 82483
82481: GO 82587
82483: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82484: LD_ADDR_VAR 0 2
82488: PUSH
82489: LD_INT 22
82491: PUSH
82492: LD_OWVAR 2
82496: PUSH
82497: EMPTY
82498: LIST
82499: LIST
82500: PUSH
82501: LD_INT 25
82503: PUSH
82504: LD_INT 1
82506: PUSH
82507: EMPTY
82508: LIST
82509: LIST
82510: PUSH
82511: EMPTY
82512: LIST
82513: LIST
82514: PPUSH
82515: CALL_OW 69
82519: ST_TO_ADDR
// if not tmp then
82520: LD_VAR 0 2
82524: NOT
82525: IFFALSE 82529
// exit ;
82527: GO 82691
// un := tmp [ rand ( 1 , tmp ) ] ;
82529: LD_ADDR_VAR 0 3
82533: PUSH
82534: LD_VAR 0 2
82538: PUSH
82539: LD_INT 1
82541: PPUSH
82542: LD_VAR 0 2
82546: PPUSH
82547: CALL_OW 12
82551: ARRAY
82552: ST_TO_ADDR
// if Crawls ( un ) then
82553: LD_VAR 0 3
82557: PPUSH
82558: CALL_OW 318
82562: IFFALSE 82573
// ComWalk ( un ) ;
82564: LD_VAR 0 3
82568: PPUSH
82569: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82573: LD_VAR 0 3
82577: PPUSH
82578: LD_INT 8
82580: PPUSH
82581: CALL_OW 336
// end ; 4 :
82585: GO 82691
82587: LD_INT 4
82589: DOUBLE
82590: EQUAL
82591: IFTRUE 82595
82593: GO 82669
82595: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82596: LD_ADDR_VAR 0 2
82600: PUSH
82601: LD_INT 22
82603: PUSH
82604: LD_OWVAR 2
82608: PUSH
82609: EMPTY
82610: LIST
82611: LIST
82612: PUSH
82613: LD_INT 30
82615: PUSH
82616: LD_INT 29
82618: PUSH
82619: EMPTY
82620: LIST
82621: LIST
82622: PUSH
82623: EMPTY
82624: LIST
82625: LIST
82626: PPUSH
82627: CALL_OW 69
82631: ST_TO_ADDR
// if not tmp then
82632: LD_VAR 0 2
82636: NOT
82637: IFFALSE 82641
// exit ;
82639: GO 82691
// CenterNowOnUnits ( tmp [ 1 ] ) ;
82641: LD_VAR 0 2
82645: PUSH
82646: LD_INT 1
82648: ARRAY
82649: PPUSH
82650: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
82654: LD_VAR 0 2
82658: PUSH
82659: LD_INT 1
82661: ARRAY
82662: PPUSH
82663: CALL_OW 65
// end ; 5 .. 7 :
82667: GO 82691
82669: LD_INT 5
82671: DOUBLE
82672: GREATEREQUAL
82673: IFFALSE 82681
82675: LD_INT 7
82677: DOUBLE
82678: LESSEQUAL
82679: IFTRUE 82683
82681: GO 82690
82683: POP
// StreamSibBomb ; end ;
82684: CALL 78928 0 0
82688: GO 82691
82690: POP
// end ;
82691: PPOPN 3
82693: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
82694: LD_EXP 74
82698: PUSH
82699: LD_EXP 124
82703: AND
82704: IFFALSE 82860
82706: GO 82708
82708: DISABLE
82709: LD_INT 0
82711: PPUSH
82712: PPUSH
82713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
82714: LD_ADDR_VAR 0 2
82718: PUSH
82719: LD_INT 81
82721: PUSH
82722: LD_OWVAR 2
82726: PUSH
82727: EMPTY
82728: LIST
82729: LIST
82730: PUSH
82731: LD_INT 2
82733: PUSH
82734: LD_INT 21
82736: PUSH
82737: LD_INT 1
82739: PUSH
82740: EMPTY
82741: LIST
82742: LIST
82743: PUSH
82744: LD_INT 21
82746: PUSH
82747: LD_INT 2
82749: PUSH
82750: EMPTY
82751: LIST
82752: LIST
82753: PUSH
82754: EMPTY
82755: LIST
82756: LIST
82757: LIST
82758: PUSH
82759: EMPTY
82760: LIST
82761: LIST
82762: PPUSH
82763: CALL_OW 69
82767: ST_TO_ADDR
// if not tmp then
82768: LD_VAR 0 2
82772: NOT
82773: IFFALSE 82777
// exit ;
82775: GO 82860
// p := 0 ;
82777: LD_ADDR_VAR 0 3
82781: PUSH
82782: LD_INT 0
82784: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82785: LD_INT 35
82787: PPUSH
82788: CALL_OW 67
// p := p + 1 ;
82792: LD_ADDR_VAR 0 3
82796: PUSH
82797: LD_VAR 0 3
82801: PUSH
82802: LD_INT 1
82804: PLUS
82805: ST_TO_ADDR
// for i in tmp do
82806: LD_ADDR_VAR 0 1
82810: PUSH
82811: LD_VAR 0 2
82815: PUSH
82816: FOR_IN
82817: IFFALSE 82848
// if GetLives ( i ) < 1000 then
82819: LD_VAR 0 1
82823: PPUSH
82824: CALL_OW 256
82828: PUSH
82829: LD_INT 1000
82831: LESS
82832: IFFALSE 82846
// SetLives ( i , 1000 ) ;
82834: LD_VAR 0 1
82838: PPUSH
82839: LD_INT 1000
82841: PPUSH
82842: CALL_OW 234
82846: GO 82816
82848: POP
82849: POP
// until p > 20 ;
82850: LD_VAR 0 3
82854: PUSH
82855: LD_INT 20
82857: GREATER
82858: IFFALSE 82785
// end ;
82860: PPOPN 3
82862: END
// every 0 0$1 trigger StreamModeActive and sTime do
82863: LD_EXP 74
82867: PUSH
82868: LD_EXP 125
82872: AND
82873: IFFALSE 82908
82875: GO 82877
82877: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
82878: LD_INT 28
82880: PPUSH
82881: LD_OWVAR 2
82885: PPUSH
82886: LD_INT 2
82888: PPUSH
82889: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
82893: LD_INT 30
82895: PPUSH
82896: LD_OWVAR 2
82900: PPUSH
82901: LD_INT 2
82903: PPUSH
82904: CALL_OW 322
// end ;
82908: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
82909: LD_EXP 74
82913: PUSH
82914: LD_EXP 126
82918: AND
82919: IFFALSE 83040
82921: GO 82923
82923: DISABLE
82924: LD_INT 0
82926: PPUSH
82927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82928: LD_ADDR_VAR 0 2
82932: PUSH
82933: LD_INT 22
82935: PUSH
82936: LD_OWVAR 2
82940: PUSH
82941: EMPTY
82942: LIST
82943: LIST
82944: PUSH
82945: LD_INT 21
82947: PUSH
82948: LD_INT 1
82950: PUSH
82951: EMPTY
82952: LIST
82953: LIST
82954: PUSH
82955: LD_INT 3
82957: PUSH
82958: LD_INT 23
82960: PUSH
82961: LD_INT 0
82963: PUSH
82964: EMPTY
82965: LIST
82966: LIST
82967: PUSH
82968: EMPTY
82969: LIST
82970: LIST
82971: PUSH
82972: EMPTY
82973: LIST
82974: LIST
82975: LIST
82976: PPUSH
82977: CALL_OW 69
82981: ST_TO_ADDR
// if not tmp then
82982: LD_VAR 0 2
82986: NOT
82987: IFFALSE 82991
// exit ;
82989: GO 83040
// for i in tmp do
82991: LD_ADDR_VAR 0 1
82995: PUSH
82996: LD_VAR 0 2
83000: PUSH
83001: FOR_IN
83002: IFFALSE 83038
// begin if Crawls ( i ) then
83004: LD_VAR 0 1
83008: PPUSH
83009: CALL_OW 318
83013: IFFALSE 83024
// ComWalk ( i ) ;
83015: LD_VAR 0 1
83019: PPUSH
83020: CALL_OW 138
// SetClass ( i , 2 ) ;
83024: LD_VAR 0 1
83028: PPUSH
83029: LD_INT 2
83031: PPUSH
83032: CALL_OW 336
// end ;
83036: GO 83001
83038: POP
83039: POP
// end ;
83040: PPOPN 2
83042: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
83043: LD_EXP 74
83047: PUSH
83048: LD_EXP 127
83052: AND
83053: IFFALSE 83341
83055: GO 83057
83057: DISABLE
83058: LD_INT 0
83060: PPUSH
83061: PPUSH
83062: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
83063: LD_OWVAR 2
83067: PPUSH
83068: LD_INT 9
83070: PPUSH
83071: LD_INT 1
83073: PPUSH
83074: LD_INT 1
83076: PPUSH
83077: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
83081: LD_INT 9
83083: PPUSH
83084: LD_OWVAR 2
83088: PPUSH
83089: CALL_OW 343
// uc_side := 9 ;
83093: LD_ADDR_OWVAR 20
83097: PUSH
83098: LD_INT 9
83100: ST_TO_ADDR
// uc_nation := 2 ;
83101: LD_ADDR_OWVAR 21
83105: PUSH
83106: LD_INT 2
83108: ST_TO_ADDR
// hc_name := Dark Warrior ;
83109: LD_ADDR_OWVAR 26
83113: PUSH
83114: LD_STRING Dark Warrior
83116: ST_TO_ADDR
// hc_gallery :=  ;
83117: LD_ADDR_OWVAR 33
83121: PUSH
83122: LD_STRING 
83124: ST_TO_ADDR
// hc_noskilllimit := true ;
83125: LD_ADDR_OWVAR 76
83129: PUSH
83130: LD_INT 1
83132: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
83133: LD_ADDR_OWVAR 31
83137: PUSH
83138: LD_INT 30
83140: PUSH
83141: LD_INT 30
83143: PUSH
83144: LD_INT 30
83146: PUSH
83147: LD_INT 30
83149: PUSH
83150: EMPTY
83151: LIST
83152: LIST
83153: LIST
83154: LIST
83155: ST_TO_ADDR
// un := CreateHuman ;
83156: LD_ADDR_VAR 0 3
83160: PUSH
83161: CALL_OW 44
83165: ST_TO_ADDR
// hc_noskilllimit := false ;
83166: LD_ADDR_OWVAR 76
83170: PUSH
83171: LD_INT 0
83173: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83174: LD_VAR 0 3
83178: PPUSH
83179: LD_INT 1
83181: PPUSH
83182: CALL_OW 51
// ToLua ( playRanger() ) ;
83186: LD_STRING playRanger()
83188: PPUSH
83189: CALL_OW 559
// p := 0 ;
83193: LD_ADDR_VAR 0 2
83197: PUSH
83198: LD_INT 0
83200: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83201: LD_INT 35
83203: PPUSH
83204: CALL_OW 67
// p := p + 1 ;
83208: LD_ADDR_VAR 0 2
83212: PUSH
83213: LD_VAR 0 2
83217: PUSH
83218: LD_INT 1
83220: PLUS
83221: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
83222: LD_VAR 0 3
83226: PPUSH
83227: CALL_OW 256
83231: PUSH
83232: LD_INT 1000
83234: LESS
83235: IFFALSE 83249
// SetLives ( un , 1000 ) ;
83237: LD_VAR 0 3
83241: PPUSH
83242: LD_INT 1000
83244: PPUSH
83245: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
83249: LD_VAR 0 3
83253: PPUSH
83254: LD_INT 81
83256: PUSH
83257: LD_OWVAR 2
83261: PUSH
83262: EMPTY
83263: LIST
83264: LIST
83265: PUSH
83266: LD_INT 91
83268: PUSH
83269: LD_VAR 0 3
83273: PUSH
83274: LD_INT 30
83276: PUSH
83277: EMPTY
83278: LIST
83279: LIST
83280: LIST
83281: PUSH
83282: EMPTY
83283: LIST
83284: LIST
83285: PPUSH
83286: CALL_OW 69
83290: PPUSH
83291: LD_VAR 0 3
83295: PPUSH
83296: CALL_OW 74
83300: PPUSH
83301: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
83305: LD_VAR 0 2
83309: PUSH
83310: LD_INT 80
83312: GREATER
83313: PUSH
83314: LD_VAR 0 3
83318: PPUSH
83319: CALL_OW 301
83323: OR
83324: IFFALSE 83201
// if un then
83326: LD_VAR 0 3
83330: IFFALSE 83341
// RemoveUnit ( un ) ;
83332: LD_VAR 0 3
83336: PPUSH
83337: CALL_OW 64
// end ;
83341: PPOPN 3
83343: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
83344: LD_EXP 128
83348: IFFALSE 83464
83350: GO 83352
83352: DISABLE
83353: LD_INT 0
83355: PPUSH
83356: PPUSH
83357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
83358: LD_ADDR_VAR 0 2
83362: PUSH
83363: LD_INT 81
83365: PUSH
83366: LD_OWVAR 2
83370: PUSH
83371: EMPTY
83372: LIST
83373: LIST
83374: PUSH
83375: LD_INT 21
83377: PUSH
83378: LD_INT 1
83380: PUSH
83381: EMPTY
83382: LIST
83383: LIST
83384: PUSH
83385: EMPTY
83386: LIST
83387: LIST
83388: PPUSH
83389: CALL_OW 69
83393: ST_TO_ADDR
// ToLua ( playComputer() ) ;
83394: LD_STRING playComputer()
83396: PPUSH
83397: CALL_OW 559
// if not tmp then
83401: LD_VAR 0 2
83405: NOT
83406: IFFALSE 83410
// exit ;
83408: GO 83464
// for i in tmp do
83410: LD_ADDR_VAR 0 1
83414: PUSH
83415: LD_VAR 0 2
83419: PUSH
83420: FOR_IN
83421: IFFALSE 83462
// for j := 1 to 4 do
83423: LD_ADDR_VAR 0 3
83427: PUSH
83428: DOUBLE
83429: LD_INT 1
83431: DEC
83432: ST_TO_ADDR
83433: LD_INT 4
83435: PUSH
83436: FOR_TO
83437: IFFALSE 83458
// SetSkill ( i , j , 10 ) ;
83439: LD_VAR 0 1
83443: PPUSH
83444: LD_VAR 0 3
83448: PPUSH
83449: LD_INT 10
83451: PPUSH
83452: CALL_OW 237
83456: GO 83436
83458: POP
83459: POP
83460: GO 83420
83462: POP
83463: POP
// end ;
83464: PPOPN 3
83466: END
// every 0 0$1 trigger s30 do var i , tmp ;
83467: LD_EXP 129
83471: IFFALSE 83540
83473: GO 83475
83475: DISABLE
83476: LD_INT 0
83478: PPUSH
83479: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83480: LD_ADDR_VAR 0 2
83484: PUSH
83485: LD_INT 22
83487: PUSH
83488: LD_OWVAR 2
83492: PUSH
83493: EMPTY
83494: LIST
83495: LIST
83496: PPUSH
83497: CALL_OW 69
83501: ST_TO_ADDR
// if not tmp then
83502: LD_VAR 0 2
83506: NOT
83507: IFFALSE 83511
// exit ;
83509: GO 83540
// for i in tmp do
83511: LD_ADDR_VAR 0 1
83515: PUSH
83516: LD_VAR 0 2
83520: PUSH
83521: FOR_IN
83522: IFFALSE 83538
// SetLives ( i , 300 ) ;
83524: LD_VAR 0 1
83528: PPUSH
83529: LD_INT 300
83531: PPUSH
83532: CALL_OW 234
83536: GO 83521
83538: POP
83539: POP
// end ;
83540: PPOPN 2
83542: END
// every 0 0$1 trigger s60 do var i , tmp ;
83543: LD_EXP 130
83547: IFFALSE 83616
83549: GO 83551
83551: DISABLE
83552: LD_INT 0
83554: PPUSH
83555: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83556: LD_ADDR_VAR 0 2
83560: PUSH
83561: LD_INT 22
83563: PUSH
83564: LD_OWVAR 2
83568: PUSH
83569: EMPTY
83570: LIST
83571: LIST
83572: PPUSH
83573: CALL_OW 69
83577: ST_TO_ADDR
// if not tmp then
83578: LD_VAR 0 2
83582: NOT
83583: IFFALSE 83587
// exit ;
83585: GO 83616
// for i in tmp do
83587: LD_ADDR_VAR 0 1
83591: PUSH
83592: LD_VAR 0 2
83596: PUSH
83597: FOR_IN
83598: IFFALSE 83614
// SetLives ( i , 600 ) ;
83600: LD_VAR 0 1
83604: PPUSH
83605: LD_INT 600
83607: PPUSH
83608: CALL_OW 234
83612: GO 83597
83614: POP
83615: POP
// end ;
83616: PPOPN 2
83618: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
83619: LD_INT 0
83621: PPUSH
// case cmd of 301 :
83622: LD_VAR 0 1
83626: PUSH
83627: LD_INT 301
83629: DOUBLE
83630: EQUAL
83631: IFTRUE 83635
83633: GO 83667
83635: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
83636: LD_VAR 0 6
83640: PPUSH
83641: LD_VAR 0 7
83645: PPUSH
83646: LD_VAR 0 8
83650: PPUSH
83651: LD_VAR 0 4
83655: PPUSH
83656: LD_VAR 0 5
83660: PPUSH
83661: CALL 84876 0 5
83665: GO 83788
83667: LD_INT 302
83669: DOUBLE
83670: EQUAL
83671: IFTRUE 83675
83673: GO 83712
83675: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
83676: LD_VAR 0 6
83680: PPUSH
83681: LD_VAR 0 7
83685: PPUSH
83686: LD_VAR 0 8
83690: PPUSH
83691: LD_VAR 0 9
83695: PPUSH
83696: LD_VAR 0 4
83700: PPUSH
83701: LD_VAR 0 5
83705: PPUSH
83706: CALL 84967 0 6
83710: GO 83788
83712: LD_INT 303
83714: DOUBLE
83715: EQUAL
83716: IFTRUE 83720
83718: GO 83757
83720: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
83721: LD_VAR 0 6
83725: PPUSH
83726: LD_VAR 0 7
83730: PPUSH
83731: LD_VAR 0 8
83735: PPUSH
83736: LD_VAR 0 9
83740: PPUSH
83741: LD_VAR 0 4
83745: PPUSH
83746: LD_VAR 0 5
83750: PPUSH
83751: CALL 83793 0 6
83755: GO 83788
83757: LD_INT 304
83759: DOUBLE
83760: EQUAL
83761: IFTRUE 83765
83763: GO 83787
83765: POP
// hHackTeleport ( unit , x , y ) ; end ;
83766: LD_VAR 0 2
83770: PPUSH
83771: LD_VAR 0 4
83775: PPUSH
83776: LD_VAR 0 5
83780: PPUSH
83781: CALL 85560 0 3
83785: GO 83788
83787: POP
// end ;
83788: LD_VAR 0 12
83792: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
83793: LD_INT 0
83795: PPUSH
83796: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
83797: LD_VAR 0 1
83801: PUSH
83802: LD_INT 1
83804: LESS
83805: PUSH
83806: LD_VAR 0 1
83810: PUSH
83811: LD_INT 3
83813: GREATER
83814: OR
83815: PUSH
83816: LD_VAR 0 5
83820: PPUSH
83821: LD_VAR 0 6
83825: PPUSH
83826: CALL_OW 428
83830: OR
83831: IFFALSE 83835
// exit ;
83833: GO 84563
// uc_side := your_side ;
83835: LD_ADDR_OWVAR 20
83839: PUSH
83840: LD_OWVAR 2
83844: ST_TO_ADDR
// uc_nation := nation ;
83845: LD_ADDR_OWVAR 21
83849: PUSH
83850: LD_VAR 0 1
83854: ST_TO_ADDR
// bc_level = 1 ;
83855: LD_ADDR_OWVAR 43
83859: PUSH
83860: LD_INT 1
83862: ST_TO_ADDR
// case btype of 1 :
83863: LD_VAR 0 2
83867: PUSH
83868: LD_INT 1
83870: DOUBLE
83871: EQUAL
83872: IFTRUE 83876
83874: GO 83887
83876: POP
// bc_type := b_depot ; 2 :
83877: LD_ADDR_OWVAR 42
83881: PUSH
83882: LD_INT 0
83884: ST_TO_ADDR
83885: GO 84507
83887: LD_INT 2
83889: DOUBLE
83890: EQUAL
83891: IFTRUE 83895
83893: GO 83906
83895: POP
// bc_type := b_warehouse ; 3 :
83896: LD_ADDR_OWVAR 42
83900: PUSH
83901: LD_INT 1
83903: ST_TO_ADDR
83904: GO 84507
83906: LD_INT 3
83908: DOUBLE
83909: EQUAL
83910: IFTRUE 83914
83912: GO 83925
83914: POP
// bc_type := b_lab ; 4 .. 9 :
83915: LD_ADDR_OWVAR 42
83919: PUSH
83920: LD_INT 6
83922: ST_TO_ADDR
83923: GO 84507
83925: LD_INT 4
83927: DOUBLE
83928: GREATEREQUAL
83929: IFFALSE 83937
83931: LD_INT 9
83933: DOUBLE
83934: LESSEQUAL
83935: IFTRUE 83939
83937: GO 83999
83939: POP
// begin bc_type := b_lab_half ;
83940: LD_ADDR_OWVAR 42
83944: PUSH
83945: LD_INT 7
83947: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
83948: LD_ADDR_OWVAR 44
83952: PUSH
83953: LD_INT 10
83955: PUSH
83956: LD_INT 11
83958: PUSH
83959: LD_INT 12
83961: PUSH
83962: LD_INT 15
83964: PUSH
83965: LD_INT 14
83967: PUSH
83968: LD_INT 13
83970: PUSH
83971: EMPTY
83972: LIST
83973: LIST
83974: LIST
83975: LIST
83976: LIST
83977: LIST
83978: PUSH
83979: LD_VAR 0 2
83983: PUSH
83984: LD_INT 3
83986: MINUS
83987: ARRAY
83988: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
83989: LD_ADDR_OWVAR 45
83993: PUSH
83994: LD_INT 9
83996: ST_TO_ADDR
// end ; 10 .. 13 :
83997: GO 84507
83999: LD_INT 10
84001: DOUBLE
84002: GREATEREQUAL
84003: IFFALSE 84011
84005: LD_INT 13
84007: DOUBLE
84008: LESSEQUAL
84009: IFTRUE 84013
84011: GO 84090
84013: POP
// begin bc_type := b_lab_full ;
84014: LD_ADDR_OWVAR 42
84018: PUSH
84019: LD_INT 8
84021: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
84022: LD_ADDR_OWVAR 44
84026: PUSH
84027: LD_INT 10
84029: PUSH
84030: LD_INT 12
84032: PUSH
84033: LD_INT 14
84035: PUSH
84036: LD_INT 13
84038: PUSH
84039: EMPTY
84040: LIST
84041: LIST
84042: LIST
84043: LIST
84044: PUSH
84045: LD_VAR 0 2
84049: PUSH
84050: LD_INT 9
84052: MINUS
84053: ARRAY
84054: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
84055: LD_ADDR_OWVAR 45
84059: PUSH
84060: LD_INT 11
84062: PUSH
84063: LD_INT 15
84065: PUSH
84066: LD_INT 12
84068: PUSH
84069: LD_INT 15
84071: PUSH
84072: EMPTY
84073: LIST
84074: LIST
84075: LIST
84076: LIST
84077: PUSH
84078: LD_VAR 0 2
84082: PUSH
84083: LD_INT 9
84085: MINUS
84086: ARRAY
84087: ST_TO_ADDR
// end ; 14 :
84088: GO 84507
84090: LD_INT 14
84092: DOUBLE
84093: EQUAL
84094: IFTRUE 84098
84096: GO 84109
84098: POP
// bc_type := b_workshop ; 15 :
84099: LD_ADDR_OWVAR 42
84103: PUSH
84104: LD_INT 2
84106: ST_TO_ADDR
84107: GO 84507
84109: LD_INT 15
84111: DOUBLE
84112: EQUAL
84113: IFTRUE 84117
84115: GO 84128
84117: POP
// bc_type := b_factory ; 16 :
84118: LD_ADDR_OWVAR 42
84122: PUSH
84123: LD_INT 3
84125: ST_TO_ADDR
84126: GO 84507
84128: LD_INT 16
84130: DOUBLE
84131: EQUAL
84132: IFTRUE 84136
84134: GO 84147
84136: POP
// bc_type := b_ext_gun ; 17 :
84137: LD_ADDR_OWVAR 42
84141: PUSH
84142: LD_INT 17
84144: ST_TO_ADDR
84145: GO 84507
84147: LD_INT 17
84149: DOUBLE
84150: EQUAL
84151: IFTRUE 84155
84153: GO 84183
84155: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
84156: LD_ADDR_OWVAR 42
84160: PUSH
84161: LD_INT 19
84163: PUSH
84164: LD_INT 23
84166: PUSH
84167: LD_INT 19
84169: PUSH
84170: EMPTY
84171: LIST
84172: LIST
84173: LIST
84174: PUSH
84175: LD_VAR 0 1
84179: ARRAY
84180: ST_TO_ADDR
84181: GO 84507
84183: LD_INT 18
84185: DOUBLE
84186: EQUAL
84187: IFTRUE 84191
84189: GO 84202
84191: POP
// bc_type := b_ext_radar ; 19 :
84192: LD_ADDR_OWVAR 42
84196: PUSH
84197: LD_INT 20
84199: ST_TO_ADDR
84200: GO 84507
84202: LD_INT 19
84204: DOUBLE
84205: EQUAL
84206: IFTRUE 84210
84208: GO 84221
84210: POP
// bc_type := b_ext_radio ; 20 :
84211: LD_ADDR_OWVAR 42
84215: PUSH
84216: LD_INT 22
84218: ST_TO_ADDR
84219: GO 84507
84221: LD_INT 20
84223: DOUBLE
84224: EQUAL
84225: IFTRUE 84229
84227: GO 84240
84229: POP
// bc_type := b_ext_siberium ; 21 :
84230: LD_ADDR_OWVAR 42
84234: PUSH
84235: LD_INT 21
84237: ST_TO_ADDR
84238: GO 84507
84240: LD_INT 21
84242: DOUBLE
84243: EQUAL
84244: IFTRUE 84248
84246: GO 84259
84248: POP
// bc_type := b_ext_computer ; 22 :
84249: LD_ADDR_OWVAR 42
84253: PUSH
84254: LD_INT 24
84256: ST_TO_ADDR
84257: GO 84507
84259: LD_INT 22
84261: DOUBLE
84262: EQUAL
84263: IFTRUE 84267
84265: GO 84278
84267: POP
// bc_type := b_ext_track ; 23 :
84268: LD_ADDR_OWVAR 42
84272: PUSH
84273: LD_INT 16
84275: ST_TO_ADDR
84276: GO 84507
84278: LD_INT 23
84280: DOUBLE
84281: EQUAL
84282: IFTRUE 84286
84284: GO 84297
84286: POP
// bc_type := b_ext_laser ; 24 :
84287: LD_ADDR_OWVAR 42
84291: PUSH
84292: LD_INT 25
84294: ST_TO_ADDR
84295: GO 84507
84297: LD_INT 24
84299: DOUBLE
84300: EQUAL
84301: IFTRUE 84305
84303: GO 84316
84305: POP
// bc_type := b_control_tower ; 25 :
84306: LD_ADDR_OWVAR 42
84310: PUSH
84311: LD_INT 36
84313: ST_TO_ADDR
84314: GO 84507
84316: LD_INT 25
84318: DOUBLE
84319: EQUAL
84320: IFTRUE 84324
84322: GO 84335
84324: POP
// bc_type := b_breastwork ; 26 :
84325: LD_ADDR_OWVAR 42
84329: PUSH
84330: LD_INT 31
84332: ST_TO_ADDR
84333: GO 84507
84335: LD_INT 26
84337: DOUBLE
84338: EQUAL
84339: IFTRUE 84343
84341: GO 84354
84343: POP
// bc_type := b_bunker ; 27 :
84344: LD_ADDR_OWVAR 42
84348: PUSH
84349: LD_INT 32
84351: ST_TO_ADDR
84352: GO 84507
84354: LD_INT 27
84356: DOUBLE
84357: EQUAL
84358: IFTRUE 84362
84360: GO 84373
84362: POP
// bc_type := b_turret ; 28 :
84363: LD_ADDR_OWVAR 42
84367: PUSH
84368: LD_INT 33
84370: ST_TO_ADDR
84371: GO 84507
84373: LD_INT 28
84375: DOUBLE
84376: EQUAL
84377: IFTRUE 84381
84379: GO 84392
84381: POP
// bc_type := b_armoury ; 29 :
84382: LD_ADDR_OWVAR 42
84386: PUSH
84387: LD_INT 4
84389: ST_TO_ADDR
84390: GO 84507
84392: LD_INT 29
84394: DOUBLE
84395: EQUAL
84396: IFTRUE 84400
84398: GO 84411
84400: POP
// bc_type := b_barracks ; 30 :
84401: LD_ADDR_OWVAR 42
84405: PUSH
84406: LD_INT 5
84408: ST_TO_ADDR
84409: GO 84507
84411: LD_INT 30
84413: DOUBLE
84414: EQUAL
84415: IFTRUE 84419
84417: GO 84430
84419: POP
// bc_type := b_solar_power ; 31 :
84420: LD_ADDR_OWVAR 42
84424: PUSH
84425: LD_INT 27
84427: ST_TO_ADDR
84428: GO 84507
84430: LD_INT 31
84432: DOUBLE
84433: EQUAL
84434: IFTRUE 84438
84436: GO 84449
84438: POP
// bc_type := b_oil_power ; 32 :
84439: LD_ADDR_OWVAR 42
84443: PUSH
84444: LD_INT 26
84446: ST_TO_ADDR
84447: GO 84507
84449: LD_INT 32
84451: DOUBLE
84452: EQUAL
84453: IFTRUE 84457
84455: GO 84468
84457: POP
// bc_type := b_siberite_power ; 33 :
84458: LD_ADDR_OWVAR 42
84462: PUSH
84463: LD_INT 28
84465: ST_TO_ADDR
84466: GO 84507
84468: LD_INT 33
84470: DOUBLE
84471: EQUAL
84472: IFTRUE 84476
84474: GO 84487
84476: POP
// bc_type := b_oil_mine ; 34 :
84477: LD_ADDR_OWVAR 42
84481: PUSH
84482: LD_INT 29
84484: ST_TO_ADDR
84485: GO 84507
84487: LD_INT 34
84489: DOUBLE
84490: EQUAL
84491: IFTRUE 84495
84493: GO 84506
84495: POP
// bc_type := b_siberite_mine ; end ;
84496: LD_ADDR_OWVAR 42
84500: PUSH
84501: LD_INT 30
84503: ST_TO_ADDR
84504: GO 84507
84506: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
84507: LD_ADDR_VAR 0 8
84511: PUSH
84512: LD_VAR 0 5
84516: PPUSH
84517: LD_VAR 0 6
84521: PPUSH
84522: LD_VAR 0 3
84526: PPUSH
84527: CALL_OW 47
84531: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
84532: LD_OWVAR 42
84536: PUSH
84537: LD_INT 32
84539: PUSH
84540: LD_INT 33
84542: PUSH
84543: EMPTY
84544: LIST
84545: LIST
84546: IN
84547: IFFALSE 84563
// PlaceWeaponTurret ( b , weapon ) ;
84549: LD_VAR 0 8
84553: PPUSH
84554: LD_VAR 0 4
84558: PPUSH
84559: CALL_OW 431
// end ;
84563: LD_VAR 0 7
84567: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
84568: LD_INT 0
84570: PPUSH
84571: PPUSH
84572: PPUSH
84573: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
84574: LD_ADDR_VAR 0 4
84578: PUSH
84579: LD_INT 22
84581: PUSH
84582: LD_OWVAR 2
84586: PUSH
84587: EMPTY
84588: LIST
84589: LIST
84590: PUSH
84591: LD_INT 2
84593: PUSH
84594: LD_INT 30
84596: PUSH
84597: LD_INT 0
84599: PUSH
84600: EMPTY
84601: LIST
84602: LIST
84603: PUSH
84604: LD_INT 30
84606: PUSH
84607: LD_INT 1
84609: PUSH
84610: EMPTY
84611: LIST
84612: LIST
84613: PUSH
84614: EMPTY
84615: LIST
84616: LIST
84617: LIST
84618: PUSH
84619: EMPTY
84620: LIST
84621: LIST
84622: PPUSH
84623: CALL_OW 69
84627: ST_TO_ADDR
// if not tmp then
84628: LD_VAR 0 4
84632: NOT
84633: IFFALSE 84637
// exit ;
84635: GO 84696
// for i in tmp do
84637: LD_ADDR_VAR 0 2
84641: PUSH
84642: LD_VAR 0 4
84646: PUSH
84647: FOR_IN
84648: IFFALSE 84694
// for j = 1 to 3 do
84650: LD_ADDR_VAR 0 3
84654: PUSH
84655: DOUBLE
84656: LD_INT 1
84658: DEC
84659: ST_TO_ADDR
84660: LD_INT 3
84662: PUSH
84663: FOR_TO
84664: IFFALSE 84690
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
84666: LD_VAR 0 2
84670: PPUSH
84671: CALL_OW 274
84675: PPUSH
84676: LD_VAR 0 3
84680: PPUSH
84681: LD_INT 99999
84683: PPUSH
84684: CALL_OW 277
84688: GO 84663
84690: POP
84691: POP
84692: GO 84647
84694: POP
84695: POP
// end ;
84696: LD_VAR 0 1
84700: RET
// export function hHackSetLevel10 ; var i , j ; begin
84701: LD_INT 0
84703: PPUSH
84704: PPUSH
84705: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84706: LD_ADDR_VAR 0 2
84710: PUSH
84711: LD_INT 21
84713: PUSH
84714: LD_INT 1
84716: PUSH
84717: EMPTY
84718: LIST
84719: LIST
84720: PPUSH
84721: CALL_OW 69
84725: PUSH
84726: FOR_IN
84727: IFFALSE 84779
// if IsSelected ( i ) then
84729: LD_VAR 0 2
84733: PPUSH
84734: CALL_OW 306
84738: IFFALSE 84777
// begin for j := 1 to 4 do
84740: LD_ADDR_VAR 0 3
84744: PUSH
84745: DOUBLE
84746: LD_INT 1
84748: DEC
84749: ST_TO_ADDR
84750: LD_INT 4
84752: PUSH
84753: FOR_TO
84754: IFFALSE 84775
// SetSkill ( i , j , 10 ) ;
84756: LD_VAR 0 2
84760: PPUSH
84761: LD_VAR 0 3
84765: PPUSH
84766: LD_INT 10
84768: PPUSH
84769: CALL_OW 237
84773: GO 84753
84775: POP
84776: POP
// end ;
84777: GO 84726
84779: POP
84780: POP
// end ;
84781: LD_VAR 0 1
84785: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
84786: LD_INT 0
84788: PPUSH
84789: PPUSH
84790: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
84791: LD_ADDR_VAR 0 2
84795: PUSH
84796: LD_INT 22
84798: PUSH
84799: LD_OWVAR 2
84803: PUSH
84804: EMPTY
84805: LIST
84806: LIST
84807: PUSH
84808: LD_INT 21
84810: PUSH
84811: LD_INT 1
84813: PUSH
84814: EMPTY
84815: LIST
84816: LIST
84817: PUSH
84818: EMPTY
84819: LIST
84820: LIST
84821: PPUSH
84822: CALL_OW 69
84826: PUSH
84827: FOR_IN
84828: IFFALSE 84869
// begin for j := 1 to 4 do
84830: LD_ADDR_VAR 0 3
84834: PUSH
84835: DOUBLE
84836: LD_INT 1
84838: DEC
84839: ST_TO_ADDR
84840: LD_INT 4
84842: PUSH
84843: FOR_TO
84844: IFFALSE 84865
// SetSkill ( i , j , 10 ) ;
84846: LD_VAR 0 2
84850: PPUSH
84851: LD_VAR 0 3
84855: PPUSH
84856: LD_INT 10
84858: PPUSH
84859: CALL_OW 237
84863: GO 84843
84865: POP
84866: POP
// end ;
84867: GO 84827
84869: POP
84870: POP
// end ;
84871: LD_VAR 0 1
84875: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
84876: LD_INT 0
84878: PPUSH
// uc_side := your_side ;
84879: LD_ADDR_OWVAR 20
84883: PUSH
84884: LD_OWVAR 2
84888: ST_TO_ADDR
// uc_nation := nation ;
84889: LD_ADDR_OWVAR 21
84893: PUSH
84894: LD_VAR 0 1
84898: ST_TO_ADDR
// InitHc ;
84899: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
84903: LD_INT 0
84905: PPUSH
84906: LD_VAR 0 2
84910: PPUSH
84911: LD_VAR 0 3
84915: PPUSH
84916: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
84920: LD_VAR 0 4
84924: PPUSH
84925: LD_VAR 0 5
84929: PPUSH
84930: CALL_OW 428
84934: PUSH
84935: LD_INT 0
84937: EQUAL
84938: IFFALSE 84962
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
84940: CALL_OW 44
84944: PPUSH
84945: LD_VAR 0 4
84949: PPUSH
84950: LD_VAR 0 5
84954: PPUSH
84955: LD_INT 1
84957: PPUSH
84958: CALL_OW 48
// end ;
84962: LD_VAR 0 6
84966: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
84967: LD_INT 0
84969: PPUSH
84970: PPUSH
// uc_side := your_side ;
84971: LD_ADDR_OWVAR 20
84975: PUSH
84976: LD_OWVAR 2
84980: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
84981: LD_VAR 0 1
84985: PUSH
84986: LD_INT 1
84988: PUSH
84989: LD_INT 2
84991: PUSH
84992: LD_INT 3
84994: PUSH
84995: LD_INT 4
84997: PUSH
84998: LD_INT 5
85000: PUSH
85001: EMPTY
85002: LIST
85003: LIST
85004: LIST
85005: LIST
85006: LIST
85007: IN
85008: IFFALSE 85020
// uc_nation := nation_american else
85010: LD_ADDR_OWVAR 21
85014: PUSH
85015: LD_INT 1
85017: ST_TO_ADDR
85018: GO 85063
// if chassis in [ 11 , 12 , 13 , 14 ] then
85020: LD_VAR 0 1
85024: PUSH
85025: LD_INT 11
85027: PUSH
85028: LD_INT 12
85030: PUSH
85031: LD_INT 13
85033: PUSH
85034: LD_INT 14
85036: PUSH
85037: EMPTY
85038: LIST
85039: LIST
85040: LIST
85041: LIST
85042: IN
85043: IFFALSE 85055
// uc_nation := nation_arabian else
85045: LD_ADDR_OWVAR 21
85049: PUSH
85050: LD_INT 2
85052: ST_TO_ADDR
85053: GO 85063
// uc_nation := nation_russian ;
85055: LD_ADDR_OWVAR 21
85059: PUSH
85060: LD_INT 3
85062: ST_TO_ADDR
// vc_chassis := chassis ;
85063: LD_ADDR_OWVAR 37
85067: PUSH
85068: LD_VAR 0 1
85072: ST_TO_ADDR
// vc_engine := engine ;
85073: LD_ADDR_OWVAR 39
85077: PUSH
85078: LD_VAR 0 2
85082: ST_TO_ADDR
// vc_control := control ;
85083: LD_ADDR_OWVAR 38
85087: PUSH
85088: LD_VAR 0 3
85092: ST_TO_ADDR
// vc_weapon := weapon ;
85093: LD_ADDR_OWVAR 40
85097: PUSH
85098: LD_VAR 0 4
85102: ST_TO_ADDR
// un := CreateVehicle ;
85103: LD_ADDR_VAR 0 8
85107: PUSH
85108: CALL_OW 45
85112: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
85113: LD_VAR 0 8
85117: PPUSH
85118: LD_INT 0
85120: PPUSH
85121: LD_INT 5
85123: PPUSH
85124: CALL_OW 12
85128: PPUSH
85129: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
85133: LD_VAR 0 8
85137: PPUSH
85138: LD_VAR 0 5
85142: PPUSH
85143: LD_VAR 0 6
85147: PPUSH
85148: LD_INT 1
85150: PPUSH
85151: CALL_OW 48
// end ;
85155: LD_VAR 0 7
85159: RET
// export hInvincible ; every 1 do
85160: GO 85162
85162: DISABLE
// hInvincible := [ ] ;
85163: LD_ADDR_EXP 131
85167: PUSH
85168: EMPTY
85169: ST_TO_ADDR
85170: END
// every 10 do var i ;
85171: GO 85173
85173: DISABLE
85174: LD_INT 0
85176: PPUSH
// begin enable ;
85177: ENABLE
// if not hInvincible then
85178: LD_EXP 131
85182: NOT
85183: IFFALSE 85187
// exit ;
85185: GO 85231
// for i in hInvincible do
85187: LD_ADDR_VAR 0 1
85191: PUSH
85192: LD_EXP 131
85196: PUSH
85197: FOR_IN
85198: IFFALSE 85229
// if GetLives ( i ) < 1000 then
85200: LD_VAR 0 1
85204: PPUSH
85205: CALL_OW 256
85209: PUSH
85210: LD_INT 1000
85212: LESS
85213: IFFALSE 85227
// SetLives ( i , 1000 ) ;
85215: LD_VAR 0 1
85219: PPUSH
85220: LD_INT 1000
85222: PPUSH
85223: CALL_OW 234
85227: GO 85197
85229: POP
85230: POP
// end ;
85231: PPOPN 1
85233: END
// export function hHackInvincible ; var i ; begin
85234: LD_INT 0
85236: PPUSH
85237: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
85238: LD_ADDR_VAR 0 2
85242: PUSH
85243: LD_INT 2
85245: PUSH
85246: LD_INT 21
85248: PUSH
85249: LD_INT 1
85251: PUSH
85252: EMPTY
85253: LIST
85254: LIST
85255: PUSH
85256: LD_INT 21
85258: PUSH
85259: LD_INT 2
85261: PUSH
85262: EMPTY
85263: LIST
85264: LIST
85265: PUSH
85266: EMPTY
85267: LIST
85268: LIST
85269: LIST
85270: PPUSH
85271: CALL_OW 69
85275: PUSH
85276: FOR_IN
85277: IFFALSE 85338
// if IsSelected ( i ) then
85279: LD_VAR 0 2
85283: PPUSH
85284: CALL_OW 306
85288: IFFALSE 85336
// begin if i in hInvincible then
85290: LD_VAR 0 2
85294: PUSH
85295: LD_EXP 131
85299: IN
85300: IFFALSE 85320
// hInvincible := hInvincible diff i else
85302: LD_ADDR_EXP 131
85306: PUSH
85307: LD_EXP 131
85311: PUSH
85312: LD_VAR 0 2
85316: DIFF
85317: ST_TO_ADDR
85318: GO 85336
// hInvincible := hInvincible union i ;
85320: LD_ADDR_EXP 131
85324: PUSH
85325: LD_EXP 131
85329: PUSH
85330: LD_VAR 0 2
85334: UNION
85335: ST_TO_ADDR
// end ;
85336: GO 85276
85338: POP
85339: POP
// end ;
85340: LD_VAR 0 1
85344: RET
// export function hHackInvisible ; var i , j ; begin
85345: LD_INT 0
85347: PPUSH
85348: PPUSH
85349: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85350: LD_ADDR_VAR 0 2
85354: PUSH
85355: LD_INT 21
85357: PUSH
85358: LD_INT 1
85360: PUSH
85361: EMPTY
85362: LIST
85363: LIST
85364: PPUSH
85365: CALL_OW 69
85369: PUSH
85370: FOR_IN
85371: IFFALSE 85395
// if IsSelected ( i ) then
85373: LD_VAR 0 2
85377: PPUSH
85378: CALL_OW 306
85382: IFFALSE 85393
// ComForceInvisible ( i ) ;
85384: LD_VAR 0 2
85388: PPUSH
85389: CALL_OW 496
85393: GO 85370
85395: POP
85396: POP
// end ;
85397: LD_VAR 0 1
85401: RET
// export function hHackChangeYourSide ; begin
85402: LD_INT 0
85404: PPUSH
// if your_side = 8 then
85405: LD_OWVAR 2
85409: PUSH
85410: LD_INT 8
85412: EQUAL
85413: IFFALSE 85425
// your_side := 0 else
85415: LD_ADDR_OWVAR 2
85419: PUSH
85420: LD_INT 0
85422: ST_TO_ADDR
85423: GO 85439
// your_side := your_side + 1 ;
85425: LD_ADDR_OWVAR 2
85429: PUSH
85430: LD_OWVAR 2
85434: PUSH
85435: LD_INT 1
85437: PLUS
85438: ST_TO_ADDR
// end ;
85439: LD_VAR 0 1
85443: RET
// export function hHackChangeUnitSide ; var i , j ; begin
85444: LD_INT 0
85446: PPUSH
85447: PPUSH
85448: PPUSH
// for i in all_units do
85449: LD_ADDR_VAR 0 2
85453: PUSH
85454: LD_OWVAR 3
85458: PUSH
85459: FOR_IN
85460: IFFALSE 85538
// if IsSelected ( i ) then
85462: LD_VAR 0 2
85466: PPUSH
85467: CALL_OW 306
85471: IFFALSE 85536
// begin j := GetSide ( i ) ;
85473: LD_ADDR_VAR 0 3
85477: PUSH
85478: LD_VAR 0 2
85482: PPUSH
85483: CALL_OW 255
85487: ST_TO_ADDR
// if j = 8 then
85488: LD_VAR 0 3
85492: PUSH
85493: LD_INT 8
85495: EQUAL
85496: IFFALSE 85508
// j := 0 else
85498: LD_ADDR_VAR 0 3
85502: PUSH
85503: LD_INT 0
85505: ST_TO_ADDR
85506: GO 85522
// j := j + 1 ;
85508: LD_ADDR_VAR 0 3
85512: PUSH
85513: LD_VAR 0 3
85517: PUSH
85518: LD_INT 1
85520: PLUS
85521: ST_TO_ADDR
// SetSide ( i , j ) ;
85522: LD_VAR 0 2
85526: PPUSH
85527: LD_VAR 0 3
85531: PPUSH
85532: CALL_OW 235
// end ;
85536: GO 85459
85538: POP
85539: POP
// end ;
85540: LD_VAR 0 1
85544: RET
// export function hHackFog ; begin
85545: LD_INT 0
85547: PPUSH
// FogOff ( true ) ;
85548: LD_INT 1
85550: PPUSH
85551: CALL_OW 344
// end ;
85555: LD_VAR 0 1
85559: RET
// export function hHackTeleport ( unit , x , y ) ; begin
85560: LD_INT 0
85562: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
85563: LD_VAR 0 1
85567: PPUSH
85568: LD_VAR 0 2
85572: PPUSH
85573: LD_VAR 0 3
85577: PPUSH
85578: LD_INT 1
85580: PPUSH
85581: LD_INT 1
85583: PPUSH
85584: CALL_OW 483
// CenterOnXY ( x , y ) ;
85588: LD_VAR 0 2
85592: PPUSH
85593: LD_VAR 0 3
85597: PPUSH
85598: CALL_OW 84
// end ;
85602: LD_VAR 0 4
85606: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
85607: LD_INT 0
85609: PPUSH
85610: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
85611: LD_VAR 0 1
85615: NOT
85616: PUSH
85617: LD_VAR 0 2
85621: PPUSH
85622: LD_VAR 0 3
85626: PPUSH
85627: CALL_OW 488
85631: NOT
85632: OR
85633: PUSH
85634: LD_VAR 0 1
85638: PPUSH
85639: CALL_OW 266
85643: PUSH
85644: LD_INT 3
85646: NONEQUAL
85647: PUSH
85648: LD_VAR 0 1
85652: PPUSH
85653: CALL_OW 247
85657: PUSH
85658: LD_INT 1
85660: EQUAL
85661: NOT
85662: AND
85663: OR
85664: IFFALSE 85668
// exit ;
85666: GO 85817
// if GetType ( factory ) = unit_human then
85668: LD_VAR 0 1
85672: PPUSH
85673: CALL_OW 247
85677: PUSH
85678: LD_INT 1
85680: EQUAL
85681: IFFALSE 85698
// factory := IsInUnit ( factory ) ;
85683: LD_ADDR_VAR 0 1
85687: PUSH
85688: LD_VAR 0 1
85692: PPUSH
85693: CALL_OW 310
85697: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
85698: LD_VAR 0 1
85702: PPUSH
85703: CALL_OW 266
85707: PUSH
85708: LD_INT 3
85710: NONEQUAL
85711: IFFALSE 85715
// exit ;
85713: GO 85817
// if HexInfo ( x , y ) = factory then
85715: LD_VAR 0 2
85719: PPUSH
85720: LD_VAR 0 3
85724: PPUSH
85725: CALL_OW 428
85729: PUSH
85730: LD_VAR 0 1
85734: EQUAL
85735: IFFALSE 85762
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
85737: LD_ADDR_EXP 132
85741: PUSH
85742: LD_EXP 132
85746: PPUSH
85747: LD_VAR 0 1
85751: PPUSH
85752: LD_INT 0
85754: PPUSH
85755: CALL_OW 1
85759: ST_TO_ADDR
85760: GO 85813
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
85762: LD_ADDR_EXP 132
85766: PUSH
85767: LD_EXP 132
85771: PPUSH
85772: LD_VAR 0 1
85776: PPUSH
85777: LD_VAR 0 1
85781: PPUSH
85782: CALL_OW 255
85786: PUSH
85787: LD_VAR 0 1
85791: PUSH
85792: LD_VAR 0 2
85796: PUSH
85797: LD_VAR 0 3
85801: PUSH
85802: EMPTY
85803: LIST
85804: LIST
85805: LIST
85806: LIST
85807: PPUSH
85808: CALL_OW 1
85812: ST_TO_ADDR
// UpdateFactoryWaypoints ;
85813: CALL 85822 0 0
// end ;
85817: LD_VAR 0 4
85821: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
85822: LD_INT 0
85824: PPUSH
85825: PPUSH
85826: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
85827: LD_STRING resetFactoryWaypoint();
85829: PPUSH
85830: CALL_OW 559
// if factoryWaypoints then
85834: LD_EXP 132
85838: IFFALSE 85964
// begin list := PrepareArray ( factoryWaypoints ) ;
85840: LD_ADDR_VAR 0 3
85844: PUSH
85845: LD_EXP 132
85849: PPUSH
85850: CALL 70411 0 1
85854: ST_TO_ADDR
// for i := 1 to list do
85855: LD_ADDR_VAR 0 2
85859: PUSH
85860: DOUBLE
85861: LD_INT 1
85863: DEC
85864: ST_TO_ADDR
85865: LD_VAR 0 3
85869: PUSH
85870: FOR_TO
85871: IFFALSE 85962
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85873: LD_STRING setFactoryWaypointXY(
85875: PUSH
85876: LD_VAR 0 3
85880: PUSH
85881: LD_VAR 0 2
85885: ARRAY
85886: PUSH
85887: LD_INT 1
85889: ARRAY
85890: STR
85891: PUSH
85892: LD_STRING ,
85894: STR
85895: PUSH
85896: LD_VAR 0 3
85900: PUSH
85901: LD_VAR 0 2
85905: ARRAY
85906: PUSH
85907: LD_INT 2
85909: ARRAY
85910: STR
85911: PUSH
85912: LD_STRING ,
85914: STR
85915: PUSH
85916: LD_VAR 0 3
85920: PUSH
85921: LD_VAR 0 2
85925: ARRAY
85926: PUSH
85927: LD_INT 3
85929: ARRAY
85930: STR
85931: PUSH
85932: LD_STRING ,
85934: STR
85935: PUSH
85936: LD_VAR 0 3
85940: PUSH
85941: LD_VAR 0 2
85945: ARRAY
85946: PUSH
85947: LD_INT 4
85949: ARRAY
85950: STR
85951: PUSH
85952: LD_STRING )
85954: STR
85955: PPUSH
85956: CALL_OW 559
85960: GO 85870
85962: POP
85963: POP
// end ; end ;
85964: LD_VAR 0 1
85968: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
85969: LD_INT 0
85971: PPUSH
// if HexInfo ( x , y ) = warehouse then
85972: LD_VAR 0 2
85976: PPUSH
85977: LD_VAR 0 3
85981: PPUSH
85982: CALL_OW 428
85986: PUSH
85987: LD_VAR 0 1
85991: EQUAL
85992: IFFALSE 86019
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
85994: LD_ADDR_EXP 133
85998: PUSH
85999: LD_EXP 133
86003: PPUSH
86004: LD_VAR 0 1
86008: PPUSH
86009: LD_INT 0
86011: PPUSH
86012: CALL_OW 1
86016: ST_TO_ADDR
86017: GO 86070
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
86019: LD_ADDR_EXP 133
86023: PUSH
86024: LD_EXP 133
86028: PPUSH
86029: LD_VAR 0 1
86033: PPUSH
86034: LD_VAR 0 1
86038: PPUSH
86039: CALL_OW 255
86043: PUSH
86044: LD_VAR 0 1
86048: PUSH
86049: LD_VAR 0 2
86053: PUSH
86054: LD_VAR 0 3
86058: PUSH
86059: EMPTY
86060: LIST
86061: LIST
86062: LIST
86063: LIST
86064: PPUSH
86065: CALL_OW 1
86069: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
86070: CALL 86079 0 0
// end ;
86074: LD_VAR 0 4
86078: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
86079: LD_INT 0
86081: PPUSH
86082: PPUSH
86083: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
86084: LD_STRING resetWarehouseGatheringPoints();
86086: PPUSH
86087: CALL_OW 559
// if warehouseGatheringPoints then
86091: LD_EXP 133
86095: IFFALSE 86221
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
86097: LD_ADDR_VAR 0 3
86101: PUSH
86102: LD_EXP 133
86106: PPUSH
86107: CALL 70411 0 1
86111: ST_TO_ADDR
// for i := 1 to list do
86112: LD_ADDR_VAR 0 2
86116: PUSH
86117: DOUBLE
86118: LD_INT 1
86120: DEC
86121: ST_TO_ADDR
86122: LD_VAR 0 3
86126: PUSH
86127: FOR_TO
86128: IFFALSE 86219
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
86130: LD_STRING setWarehouseGatheringPointXY(
86132: PUSH
86133: LD_VAR 0 3
86137: PUSH
86138: LD_VAR 0 2
86142: ARRAY
86143: PUSH
86144: LD_INT 1
86146: ARRAY
86147: STR
86148: PUSH
86149: LD_STRING ,
86151: STR
86152: PUSH
86153: LD_VAR 0 3
86157: PUSH
86158: LD_VAR 0 2
86162: ARRAY
86163: PUSH
86164: LD_INT 2
86166: ARRAY
86167: STR
86168: PUSH
86169: LD_STRING ,
86171: STR
86172: PUSH
86173: LD_VAR 0 3
86177: PUSH
86178: LD_VAR 0 2
86182: ARRAY
86183: PUSH
86184: LD_INT 3
86186: ARRAY
86187: STR
86188: PUSH
86189: LD_STRING ,
86191: STR
86192: PUSH
86193: LD_VAR 0 3
86197: PUSH
86198: LD_VAR 0 2
86202: ARRAY
86203: PUSH
86204: LD_INT 4
86206: ARRAY
86207: STR
86208: PUSH
86209: LD_STRING )
86211: STR
86212: PPUSH
86213: CALL_OW 559
86217: GO 86127
86219: POP
86220: POP
// end ; end ;
86221: LD_VAR 0 1
86225: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
86226: LD_EXP 133
86230: IFFALSE 86915
86232: GO 86234
86234: DISABLE
86235: LD_INT 0
86237: PPUSH
86238: PPUSH
86239: PPUSH
86240: PPUSH
86241: PPUSH
86242: PPUSH
86243: PPUSH
86244: PPUSH
86245: PPUSH
// begin enable ;
86246: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
86247: LD_ADDR_VAR 0 3
86251: PUSH
86252: LD_EXP 133
86256: PPUSH
86257: CALL 70411 0 1
86261: ST_TO_ADDR
// if not list then
86262: LD_VAR 0 3
86266: NOT
86267: IFFALSE 86271
// exit ;
86269: GO 86915
// for i := 1 to list do
86271: LD_ADDR_VAR 0 1
86275: PUSH
86276: DOUBLE
86277: LD_INT 1
86279: DEC
86280: ST_TO_ADDR
86281: LD_VAR 0 3
86285: PUSH
86286: FOR_TO
86287: IFFALSE 86913
// begin depot := list [ i ] [ 2 ] ;
86289: LD_ADDR_VAR 0 8
86293: PUSH
86294: LD_VAR 0 3
86298: PUSH
86299: LD_VAR 0 1
86303: ARRAY
86304: PUSH
86305: LD_INT 2
86307: ARRAY
86308: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
86309: LD_ADDR_VAR 0 5
86313: PUSH
86314: LD_VAR 0 3
86318: PUSH
86319: LD_VAR 0 1
86323: ARRAY
86324: PUSH
86325: LD_INT 1
86327: ARRAY
86328: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
86329: LD_VAR 0 8
86333: PPUSH
86334: CALL_OW 301
86338: PUSH
86339: LD_VAR 0 5
86343: PUSH
86344: LD_VAR 0 8
86348: PPUSH
86349: CALL_OW 255
86353: NONEQUAL
86354: OR
86355: IFFALSE 86384
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
86357: LD_ADDR_EXP 133
86361: PUSH
86362: LD_EXP 133
86366: PPUSH
86367: LD_VAR 0 8
86371: PPUSH
86372: LD_INT 0
86374: PPUSH
86375: CALL_OW 1
86379: ST_TO_ADDR
// exit ;
86380: POP
86381: POP
86382: GO 86915
// end ; x := list [ i ] [ 3 ] ;
86384: LD_ADDR_VAR 0 6
86388: PUSH
86389: LD_VAR 0 3
86393: PUSH
86394: LD_VAR 0 1
86398: ARRAY
86399: PUSH
86400: LD_INT 3
86402: ARRAY
86403: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
86404: LD_ADDR_VAR 0 7
86408: PUSH
86409: LD_VAR 0 3
86413: PUSH
86414: LD_VAR 0 1
86418: ARRAY
86419: PUSH
86420: LD_INT 4
86422: ARRAY
86423: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
86424: LD_ADDR_VAR 0 9
86428: PUSH
86429: LD_VAR 0 6
86433: PPUSH
86434: LD_VAR 0 7
86438: PPUSH
86439: LD_INT 16
86441: PPUSH
86442: CALL 68999 0 3
86446: ST_TO_ADDR
// if not cratesNearbyPoint then
86447: LD_VAR 0 9
86451: NOT
86452: IFFALSE 86458
// exit ;
86454: POP
86455: POP
86456: GO 86915
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
86458: LD_ADDR_VAR 0 4
86462: PUSH
86463: LD_INT 22
86465: PUSH
86466: LD_VAR 0 5
86470: PUSH
86471: EMPTY
86472: LIST
86473: LIST
86474: PUSH
86475: LD_INT 3
86477: PUSH
86478: LD_INT 60
86480: PUSH
86481: EMPTY
86482: LIST
86483: PUSH
86484: EMPTY
86485: LIST
86486: LIST
86487: PUSH
86488: LD_INT 91
86490: PUSH
86491: LD_VAR 0 8
86495: PUSH
86496: LD_INT 6
86498: PUSH
86499: EMPTY
86500: LIST
86501: LIST
86502: LIST
86503: PUSH
86504: LD_INT 2
86506: PUSH
86507: LD_INT 25
86509: PUSH
86510: LD_INT 2
86512: PUSH
86513: EMPTY
86514: LIST
86515: LIST
86516: PUSH
86517: LD_INT 25
86519: PUSH
86520: LD_INT 16
86522: PUSH
86523: EMPTY
86524: LIST
86525: LIST
86526: PUSH
86527: EMPTY
86528: LIST
86529: LIST
86530: LIST
86531: PUSH
86532: EMPTY
86533: LIST
86534: LIST
86535: LIST
86536: LIST
86537: PPUSH
86538: CALL_OW 69
86542: PUSH
86543: LD_VAR 0 8
86547: PPUSH
86548: CALL_OW 313
86552: PPUSH
86553: LD_INT 3
86555: PUSH
86556: LD_INT 60
86558: PUSH
86559: EMPTY
86560: LIST
86561: PUSH
86562: EMPTY
86563: LIST
86564: LIST
86565: PUSH
86566: LD_INT 2
86568: PUSH
86569: LD_INT 25
86571: PUSH
86572: LD_INT 2
86574: PUSH
86575: EMPTY
86576: LIST
86577: LIST
86578: PUSH
86579: LD_INT 25
86581: PUSH
86582: LD_INT 16
86584: PUSH
86585: EMPTY
86586: LIST
86587: LIST
86588: PUSH
86589: EMPTY
86590: LIST
86591: LIST
86592: LIST
86593: PUSH
86594: EMPTY
86595: LIST
86596: LIST
86597: PPUSH
86598: CALL_OW 72
86602: UNION
86603: ST_TO_ADDR
// if tmp then
86604: LD_VAR 0 4
86608: IFFALSE 86688
// begin tmp := ShrinkArray ( tmp , 3 ) ;
86610: LD_ADDR_VAR 0 4
86614: PUSH
86615: LD_VAR 0 4
86619: PPUSH
86620: LD_INT 3
86622: PPUSH
86623: CALL 66968 0 2
86627: ST_TO_ADDR
// for j in tmp do
86628: LD_ADDR_VAR 0 2
86632: PUSH
86633: LD_VAR 0 4
86637: PUSH
86638: FOR_IN
86639: IFFALSE 86682
// begin if IsInUnit ( j ) then
86641: LD_VAR 0 2
86645: PPUSH
86646: CALL_OW 310
86650: IFFALSE 86661
// ComExit ( j ) ;
86652: LD_VAR 0 2
86656: PPUSH
86657: CALL 67051 0 1
// AddComCollect ( j , x , y ) ;
86661: LD_VAR 0 2
86665: PPUSH
86666: LD_VAR 0 6
86670: PPUSH
86671: LD_VAR 0 7
86675: PPUSH
86676: CALL_OW 177
// end ;
86680: GO 86638
86682: POP
86683: POP
// exit ;
86684: POP
86685: POP
86686: GO 86915
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
86688: LD_ADDR_VAR 0 4
86692: PUSH
86693: LD_INT 22
86695: PUSH
86696: LD_VAR 0 5
86700: PUSH
86701: EMPTY
86702: LIST
86703: LIST
86704: PUSH
86705: LD_INT 91
86707: PUSH
86708: LD_VAR 0 8
86712: PUSH
86713: LD_INT 8
86715: PUSH
86716: EMPTY
86717: LIST
86718: LIST
86719: LIST
86720: PUSH
86721: LD_INT 2
86723: PUSH
86724: LD_INT 34
86726: PUSH
86727: LD_INT 12
86729: PUSH
86730: EMPTY
86731: LIST
86732: LIST
86733: PUSH
86734: LD_INT 34
86736: PUSH
86737: LD_INT 51
86739: PUSH
86740: EMPTY
86741: LIST
86742: LIST
86743: PUSH
86744: LD_INT 34
86746: PUSH
86747: LD_INT 32
86749: PUSH
86750: EMPTY
86751: LIST
86752: LIST
86753: PUSH
86754: LD_INT 34
86756: PUSH
86757: LD_INT 89
86759: PUSH
86760: EMPTY
86761: LIST
86762: LIST
86763: PUSH
86764: EMPTY
86765: LIST
86766: LIST
86767: LIST
86768: LIST
86769: LIST
86770: PUSH
86771: EMPTY
86772: LIST
86773: LIST
86774: LIST
86775: PPUSH
86776: CALL_OW 69
86780: ST_TO_ADDR
// if tmp then
86781: LD_VAR 0 4
86785: IFFALSE 86911
// begin for j in tmp do
86787: LD_ADDR_VAR 0 2
86791: PUSH
86792: LD_VAR 0 4
86796: PUSH
86797: FOR_IN
86798: IFFALSE 86909
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
86800: LD_VAR 0 2
86804: PPUSH
86805: CALL_OW 262
86809: PUSH
86810: LD_INT 3
86812: EQUAL
86813: PUSH
86814: LD_VAR 0 2
86818: PPUSH
86819: CALL_OW 261
86823: PUSH
86824: LD_INT 20
86826: GREATER
86827: OR
86828: PUSH
86829: LD_VAR 0 2
86833: PPUSH
86834: CALL_OW 314
86838: NOT
86839: AND
86840: PUSH
86841: LD_VAR 0 2
86845: PPUSH
86846: CALL_OW 263
86850: PUSH
86851: LD_INT 1
86853: NONEQUAL
86854: PUSH
86855: LD_VAR 0 2
86859: PPUSH
86860: CALL_OW 311
86864: OR
86865: AND
86866: IFFALSE 86907
// begin ComCollect ( j , x , y ) ;
86868: LD_VAR 0 2
86872: PPUSH
86873: LD_VAR 0 6
86877: PPUSH
86878: LD_VAR 0 7
86882: PPUSH
86883: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
86887: LD_VAR 0 2
86891: PPUSH
86892: LD_VAR 0 8
86896: PPUSH
86897: CALL_OW 172
// exit ;
86901: POP
86902: POP
86903: POP
86904: POP
86905: GO 86915
// end ;
86907: GO 86797
86909: POP
86910: POP
// end ; end ;
86911: GO 86286
86913: POP
86914: POP
// end ; end_of_file
86915: PPOPN 9
86917: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86918: LD_VAR 0 1
86922: PUSH
86923: LD_INT 200
86925: DOUBLE
86926: GREATEREQUAL
86927: IFFALSE 86935
86929: LD_INT 299
86931: DOUBLE
86932: LESSEQUAL
86933: IFTRUE 86937
86935: GO 86969
86937: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86938: LD_VAR 0 1
86942: PPUSH
86943: LD_VAR 0 2
86947: PPUSH
86948: LD_VAR 0 3
86952: PPUSH
86953: LD_VAR 0 4
86957: PPUSH
86958: LD_VAR 0 5
86962: PPUSH
86963: CALL 87457 0 5
86967: GO 87046
86969: LD_INT 300
86971: DOUBLE
86972: GREATEREQUAL
86973: IFFALSE 86981
86975: LD_INT 399
86977: DOUBLE
86978: LESSEQUAL
86979: IFTRUE 86983
86981: GO 87045
86983: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86984: LD_VAR 0 1
86988: PPUSH
86989: LD_VAR 0 2
86993: PPUSH
86994: LD_VAR 0 3
86998: PPUSH
86999: LD_VAR 0 4
87003: PPUSH
87004: LD_VAR 0 5
87008: PPUSH
87009: LD_VAR 0 6
87013: PPUSH
87014: LD_VAR 0 7
87018: PPUSH
87019: LD_VAR 0 8
87023: PPUSH
87024: LD_VAR 0 9
87028: PPUSH
87029: LD_VAR 0 10
87033: PPUSH
87034: LD_VAR 0 11
87038: PPUSH
87039: CALL 83619 0 11
87043: GO 87046
87045: POP
// end ;
87046: PPOPN 11
87048: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
87049: LD_VAR 0 1
87053: PPUSH
87054: LD_VAR 0 2
87058: PPUSH
87059: LD_VAR 0 3
87063: PPUSH
87064: LD_VAR 0 4
87068: PPUSH
87069: LD_VAR 0 5
87073: PPUSH
87074: CALL 87193 0 5
// end ; end_of_file
87078: PPOPN 5
87080: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
87081: LD_INT 0
87083: PPUSH
87084: PPUSH
87085: PPUSH
87086: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
87087: LD_VAR 0 1
87091: PPUSH
87092: CALL_OW 264
87096: PUSH
87097: LD_INT 91
87099: EQUAL
87100: IFFALSE 87172
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
87102: LD_INT 68
87104: PPUSH
87105: LD_VAR 0 1
87109: PPUSH
87110: CALL_OW 255
87114: PPUSH
87115: CALL_OW 321
87119: PUSH
87120: LD_INT 2
87122: EQUAL
87123: IFFALSE 87135
// eff := 70 else
87125: LD_ADDR_VAR 0 4
87129: PUSH
87130: LD_INT 70
87132: ST_TO_ADDR
87133: GO 87143
// eff := 30 ;
87135: LD_ADDR_VAR 0 4
87139: PUSH
87140: LD_INT 30
87142: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
87143: LD_VAR 0 1
87147: PPUSH
87148: CALL_OW 250
87152: PPUSH
87153: LD_VAR 0 1
87157: PPUSH
87158: CALL_OW 251
87162: PPUSH
87163: LD_VAR 0 4
87167: PPUSH
87168: CALL_OW 495
// end ; end ;
87172: LD_VAR 0 2
87176: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
87177: LD_INT 0
87179: PPUSH
// end ;
87180: LD_VAR 0 4
87184: RET
// export function SOS_Command ( cmd ) ; begin
87185: LD_INT 0
87187: PPUSH
// end ;
87188: LD_VAR 0 2
87192: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
87193: LD_INT 0
87195: PPUSH
// end ;
87196: LD_VAR 0 6
87200: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
87201: LD_INT 0
87203: PPUSH
87204: PPUSH
// if not vehicle or not factory then
87205: LD_VAR 0 1
87209: NOT
87210: PUSH
87211: LD_VAR 0 2
87215: NOT
87216: OR
87217: IFFALSE 87221
// exit ;
87219: GO 87452
// if factoryWaypoints >= factory then
87221: LD_EXP 132
87225: PUSH
87226: LD_VAR 0 2
87230: GREATEREQUAL
87231: IFFALSE 87452
// if factoryWaypoints [ factory ] then
87233: LD_EXP 132
87237: PUSH
87238: LD_VAR 0 2
87242: ARRAY
87243: IFFALSE 87452
// begin if GetControl ( vehicle ) = control_manual then
87245: LD_VAR 0 1
87249: PPUSH
87250: CALL_OW 263
87254: PUSH
87255: LD_INT 1
87257: EQUAL
87258: IFFALSE 87339
// begin driver := IsDrivenBy ( vehicle ) ;
87260: LD_ADDR_VAR 0 4
87264: PUSH
87265: LD_VAR 0 1
87269: PPUSH
87270: CALL_OW 311
87274: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87275: LD_VAR 0 4
87279: PPUSH
87280: LD_EXP 132
87284: PUSH
87285: LD_VAR 0 2
87289: ARRAY
87290: PUSH
87291: LD_INT 3
87293: ARRAY
87294: PPUSH
87295: LD_EXP 132
87299: PUSH
87300: LD_VAR 0 2
87304: ARRAY
87305: PUSH
87306: LD_INT 4
87308: ARRAY
87309: PPUSH
87310: CALL_OW 171
// AddComExitVehicle ( driver ) ;
87314: LD_VAR 0 4
87318: PPUSH
87319: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
87323: LD_VAR 0 4
87327: PPUSH
87328: LD_VAR 0 2
87332: PPUSH
87333: CALL_OW 180
// end else
87337: GO 87452
// if GetControl ( vehicle ) = control_remote then
87339: LD_VAR 0 1
87343: PPUSH
87344: CALL_OW 263
87348: PUSH
87349: LD_INT 2
87351: EQUAL
87352: IFFALSE 87413
// begin wait ( 0 0$2 ) ;
87354: LD_INT 70
87356: PPUSH
87357: CALL_OW 67
// if Connect ( vehicle ) then
87361: LD_VAR 0 1
87365: PPUSH
87366: CALL 37259 0 1
87370: IFFALSE 87411
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87372: LD_VAR 0 1
87376: PPUSH
87377: LD_EXP 132
87381: PUSH
87382: LD_VAR 0 2
87386: ARRAY
87387: PUSH
87388: LD_INT 3
87390: ARRAY
87391: PPUSH
87392: LD_EXP 132
87396: PUSH
87397: LD_VAR 0 2
87401: ARRAY
87402: PUSH
87403: LD_INT 4
87405: ARRAY
87406: PPUSH
87407: CALL_OW 171
// end else
87411: GO 87452
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87413: LD_VAR 0 1
87417: PPUSH
87418: LD_EXP 132
87422: PUSH
87423: LD_VAR 0 2
87427: ARRAY
87428: PUSH
87429: LD_INT 3
87431: ARRAY
87432: PPUSH
87433: LD_EXP 132
87437: PUSH
87438: LD_VAR 0 2
87442: ARRAY
87443: PUSH
87444: LD_INT 4
87446: ARRAY
87447: PPUSH
87448: CALL_OW 171
// end ; end ;
87452: LD_VAR 0 3
87456: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
87457: LD_INT 0
87459: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
87460: LD_VAR 0 1
87464: PUSH
87465: LD_INT 250
87467: EQUAL
87468: PUSH
87469: LD_VAR 0 2
87473: PPUSH
87474: CALL_OW 264
87478: PUSH
87479: LD_INT 81
87481: EQUAL
87482: AND
87483: IFFALSE 87504
// MinerPlaceMine ( unit , x , y ) ;
87485: LD_VAR 0 2
87489: PPUSH
87490: LD_VAR 0 4
87494: PPUSH
87495: LD_VAR 0 5
87499: PPUSH
87500: CALL 90328 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
87504: LD_VAR 0 1
87508: PUSH
87509: LD_INT 251
87511: EQUAL
87512: PUSH
87513: LD_VAR 0 2
87517: PPUSH
87518: CALL_OW 264
87522: PUSH
87523: LD_INT 81
87525: EQUAL
87526: AND
87527: IFFALSE 87548
// MinerDetonateMine ( unit , x , y ) ;
87529: LD_VAR 0 2
87533: PPUSH
87534: LD_VAR 0 4
87538: PPUSH
87539: LD_VAR 0 5
87543: PPUSH
87544: CALL 90603 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
87548: LD_VAR 0 1
87552: PUSH
87553: LD_INT 252
87555: EQUAL
87556: PUSH
87557: LD_VAR 0 2
87561: PPUSH
87562: CALL_OW 264
87566: PUSH
87567: LD_INT 81
87569: EQUAL
87570: AND
87571: IFFALSE 87592
// MinerCreateMinefield ( unit , x , y ) ;
87573: LD_VAR 0 2
87577: PPUSH
87578: LD_VAR 0 4
87582: PPUSH
87583: LD_VAR 0 5
87587: PPUSH
87588: CALL 91020 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
87592: LD_VAR 0 1
87596: PUSH
87597: LD_INT 253
87599: EQUAL
87600: PUSH
87601: LD_VAR 0 2
87605: PPUSH
87606: CALL_OW 257
87610: PUSH
87611: LD_INT 5
87613: EQUAL
87614: AND
87615: IFFALSE 87636
// ComBinocular ( unit , x , y ) ;
87617: LD_VAR 0 2
87621: PPUSH
87622: LD_VAR 0 4
87626: PPUSH
87627: LD_VAR 0 5
87631: PPUSH
87632: CALL 91389 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
87636: LD_VAR 0 1
87640: PUSH
87641: LD_INT 254
87643: EQUAL
87644: PUSH
87645: LD_VAR 0 2
87649: PPUSH
87650: CALL_OW 264
87654: PUSH
87655: LD_INT 99
87657: EQUAL
87658: AND
87659: PUSH
87660: LD_VAR 0 3
87664: PPUSH
87665: CALL_OW 263
87669: PUSH
87670: LD_INT 3
87672: EQUAL
87673: AND
87674: IFFALSE 87690
// HackDestroyVehicle ( unit , selectedUnit ) ;
87676: LD_VAR 0 2
87680: PPUSH
87681: LD_VAR 0 3
87685: PPUSH
87686: CALL 89692 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
87690: LD_VAR 0 1
87694: PUSH
87695: LD_INT 255
87697: EQUAL
87698: PUSH
87699: LD_VAR 0 2
87703: PPUSH
87704: CALL_OW 264
87708: PUSH
87709: LD_INT 14
87711: PUSH
87712: LD_INT 53
87714: PUSH
87715: EMPTY
87716: LIST
87717: LIST
87718: IN
87719: AND
87720: PUSH
87721: LD_VAR 0 4
87725: PPUSH
87726: LD_VAR 0 5
87730: PPUSH
87731: CALL_OW 488
87735: AND
87736: IFFALSE 87760
// CutTreeXYR ( unit , x , y , 12 ) ;
87738: LD_VAR 0 2
87742: PPUSH
87743: LD_VAR 0 4
87747: PPUSH
87748: LD_VAR 0 5
87752: PPUSH
87753: LD_INT 12
87755: PPUSH
87756: CALL 87855 0 4
// if cmd = 256 then
87760: LD_VAR 0 1
87764: PUSH
87765: LD_INT 256
87767: EQUAL
87768: IFFALSE 87789
// SetFactoryWaypoint ( unit , x , y ) ;
87770: LD_VAR 0 2
87774: PPUSH
87775: LD_VAR 0 4
87779: PPUSH
87780: LD_VAR 0 5
87784: PPUSH
87785: CALL 85607 0 3
// if cmd = 257 then
87789: LD_VAR 0 1
87793: PUSH
87794: LD_INT 257
87796: EQUAL
87797: IFFALSE 87818
// SetWarehouseGatheringPoint ( unit , x , y ) ;
87799: LD_VAR 0 2
87803: PPUSH
87804: LD_VAR 0 4
87808: PPUSH
87809: LD_VAR 0 5
87813: PPUSH
87814: CALL 85969 0 3
// if cmd = 258 then
87818: LD_VAR 0 1
87822: PUSH
87823: LD_INT 258
87825: EQUAL
87826: IFFALSE 87850
// BurnTreeXYR ( unit , x , y , 8 ) ;
87828: LD_VAR 0 2
87832: PPUSH
87833: LD_VAR 0 4
87837: PPUSH
87838: LD_VAR 0 5
87842: PPUSH
87843: LD_INT 8
87845: PPUSH
87846: CALL 88249 0 4
// end ;
87850: LD_VAR 0 6
87854: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
87855: LD_INT 0
87857: PPUSH
87858: PPUSH
87859: PPUSH
87860: PPUSH
87861: PPUSH
87862: PPUSH
87863: PPUSH
87864: PPUSH
87865: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
87866: LD_VAR 0 1
87870: PPUSH
87871: CALL_OW 302
87875: NOT
87876: PUSH
87877: LD_VAR 0 2
87881: PPUSH
87882: LD_VAR 0 3
87886: PPUSH
87887: CALL_OW 488
87891: NOT
87892: OR
87893: PUSH
87894: LD_VAR 0 4
87898: NOT
87899: OR
87900: IFFALSE 87904
// exit ;
87902: GO 88244
// list := [ ] ;
87904: LD_ADDR_VAR 0 13
87908: PUSH
87909: EMPTY
87910: ST_TO_ADDR
// if x - r < 0 then
87911: LD_VAR 0 2
87915: PUSH
87916: LD_VAR 0 4
87920: MINUS
87921: PUSH
87922: LD_INT 0
87924: LESS
87925: IFFALSE 87937
// min_x := 0 else
87927: LD_ADDR_VAR 0 7
87931: PUSH
87932: LD_INT 0
87934: ST_TO_ADDR
87935: GO 87953
// min_x := x - r ;
87937: LD_ADDR_VAR 0 7
87941: PUSH
87942: LD_VAR 0 2
87946: PUSH
87947: LD_VAR 0 4
87951: MINUS
87952: ST_TO_ADDR
// if y - r < 0 then
87953: LD_VAR 0 3
87957: PUSH
87958: LD_VAR 0 4
87962: MINUS
87963: PUSH
87964: LD_INT 0
87966: LESS
87967: IFFALSE 87979
// min_y := 0 else
87969: LD_ADDR_VAR 0 8
87973: PUSH
87974: LD_INT 0
87976: ST_TO_ADDR
87977: GO 87995
// min_y := y - r ;
87979: LD_ADDR_VAR 0 8
87983: PUSH
87984: LD_VAR 0 3
87988: PUSH
87989: LD_VAR 0 4
87993: MINUS
87994: ST_TO_ADDR
// max_x := x + r ;
87995: LD_ADDR_VAR 0 9
87999: PUSH
88000: LD_VAR 0 2
88004: PUSH
88005: LD_VAR 0 4
88009: PLUS
88010: ST_TO_ADDR
// max_y := y + r ;
88011: LD_ADDR_VAR 0 10
88015: PUSH
88016: LD_VAR 0 3
88020: PUSH
88021: LD_VAR 0 4
88025: PLUS
88026: ST_TO_ADDR
// for _x = min_x to max_x do
88027: LD_ADDR_VAR 0 11
88031: PUSH
88032: DOUBLE
88033: LD_VAR 0 7
88037: DEC
88038: ST_TO_ADDR
88039: LD_VAR 0 9
88043: PUSH
88044: FOR_TO
88045: IFFALSE 88162
// for _y = min_y to max_y do
88047: LD_ADDR_VAR 0 12
88051: PUSH
88052: DOUBLE
88053: LD_VAR 0 8
88057: DEC
88058: ST_TO_ADDR
88059: LD_VAR 0 10
88063: PUSH
88064: FOR_TO
88065: IFFALSE 88158
// begin if not ValidHex ( _x , _y ) then
88067: LD_VAR 0 11
88071: PPUSH
88072: LD_VAR 0 12
88076: PPUSH
88077: CALL_OW 488
88081: NOT
88082: IFFALSE 88086
// continue ;
88084: GO 88064
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
88086: LD_VAR 0 11
88090: PPUSH
88091: LD_VAR 0 12
88095: PPUSH
88096: CALL_OW 351
88100: PUSH
88101: LD_VAR 0 11
88105: PPUSH
88106: LD_VAR 0 12
88110: PPUSH
88111: CALL_OW 554
88115: AND
88116: IFFALSE 88156
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
88118: LD_ADDR_VAR 0 13
88122: PUSH
88123: LD_VAR 0 13
88127: PPUSH
88128: LD_VAR 0 13
88132: PUSH
88133: LD_INT 1
88135: PLUS
88136: PPUSH
88137: LD_VAR 0 11
88141: PUSH
88142: LD_VAR 0 12
88146: PUSH
88147: EMPTY
88148: LIST
88149: LIST
88150: PPUSH
88151: CALL_OW 2
88155: ST_TO_ADDR
// end ;
88156: GO 88064
88158: POP
88159: POP
88160: GO 88044
88162: POP
88163: POP
// if not list then
88164: LD_VAR 0 13
88168: NOT
88169: IFFALSE 88173
// exit ;
88171: GO 88244
// for i in list do
88173: LD_ADDR_VAR 0 6
88177: PUSH
88178: LD_VAR 0 13
88182: PUSH
88183: FOR_IN
88184: IFFALSE 88242
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
88186: LD_VAR 0 1
88190: PPUSH
88191: LD_STRING M
88193: PUSH
88194: LD_VAR 0 6
88198: PUSH
88199: LD_INT 1
88201: ARRAY
88202: PUSH
88203: LD_VAR 0 6
88207: PUSH
88208: LD_INT 2
88210: ARRAY
88211: PUSH
88212: LD_INT 0
88214: PUSH
88215: LD_INT 0
88217: PUSH
88218: LD_INT 0
88220: PUSH
88221: LD_INT 0
88223: PUSH
88224: EMPTY
88225: LIST
88226: LIST
88227: LIST
88228: LIST
88229: LIST
88230: LIST
88231: LIST
88232: PUSH
88233: EMPTY
88234: LIST
88235: PPUSH
88236: CALL_OW 447
88240: GO 88183
88242: POP
88243: POP
// end ;
88244: LD_VAR 0 5
88248: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
88249: LD_INT 0
88251: PPUSH
88252: PPUSH
88253: PPUSH
88254: PPUSH
88255: PPUSH
88256: PPUSH
88257: PPUSH
88258: PPUSH
88259: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
88260: LD_VAR 0 1
88264: PPUSH
88265: CALL_OW 302
88269: NOT
88270: PUSH
88271: LD_VAR 0 2
88275: PPUSH
88276: LD_VAR 0 3
88280: PPUSH
88281: CALL_OW 488
88285: NOT
88286: OR
88287: PUSH
88288: LD_VAR 0 4
88292: NOT
88293: OR
88294: IFFALSE 88298
// exit ;
88296: GO 88646
// list := [ ] ;
88298: LD_ADDR_VAR 0 13
88302: PUSH
88303: EMPTY
88304: ST_TO_ADDR
// if x - r < 0 then
88305: LD_VAR 0 2
88309: PUSH
88310: LD_VAR 0 4
88314: MINUS
88315: PUSH
88316: LD_INT 0
88318: LESS
88319: IFFALSE 88331
// min_x := 0 else
88321: LD_ADDR_VAR 0 7
88325: PUSH
88326: LD_INT 0
88328: ST_TO_ADDR
88329: GO 88347
// min_x := x - r ;
88331: LD_ADDR_VAR 0 7
88335: PUSH
88336: LD_VAR 0 2
88340: PUSH
88341: LD_VAR 0 4
88345: MINUS
88346: ST_TO_ADDR
// if y - r < 0 then
88347: LD_VAR 0 3
88351: PUSH
88352: LD_VAR 0 4
88356: MINUS
88357: PUSH
88358: LD_INT 0
88360: LESS
88361: IFFALSE 88373
// min_y := 0 else
88363: LD_ADDR_VAR 0 8
88367: PUSH
88368: LD_INT 0
88370: ST_TO_ADDR
88371: GO 88389
// min_y := y - r ;
88373: LD_ADDR_VAR 0 8
88377: PUSH
88378: LD_VAR 0 3
88382: PUSH
88383: LD_VAR 0 4
88387: MINUS
88388: ST_TO_ADDR
// max_x := x + r ;
88389: LD_ADDR_VAR 0 9
88393: PUSH
88394: LD_VAR 0 2
88398: PUSH
88399: LD_VAR 0 4
88403: PLUS
88404: ST_TO_ADDR
// max_y := y + r ;
88405: LD_ADDR_VAR 0 10
88409: PUSH
88410: LD_VAR 0 3
88414: PUSH
88415: LD_VAR 0 4
88419: PLUS
88420: ST_TO_ADDR
// for _x = min_x to max_x do
88421: LD_ADDR_VAR 0 11
88425: PUSH
88426: DOUBLE
88427: LD_VAR 0 7
88431: DEC
88432: ST_TO_ADDR
88433: LD_VAR 0 9
88437: PUSH
88438: FOR_TO
88439: IFFALSE 88556
// for _y = min_y to max_y do
88441: LD_ADDR_VAR 0 12
88445: PUSH
88446: DOUBLE
88447: LD_VAR 0 8
88451: DEC
88452: ST_TO_ADDR
88453: LD_VAR 0 10
88457: PUSH
88458: FOR_TO
88459: IFFALSE 88552
// begin if not ValidHex ( _x , _y ) then
88461: LD_VAR 0 11
88465: PPUSH
88466: LD_VAR 0 12
88470: PPUSH
88471: CALL_OW 488
88475: NOT
88476: IFFALSE 88480
// continue ;
88478: GO 88458
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
88480: LD_VAR 0 11
88484: PPUSH
88485: LD_VAR 0 12
88489: PPUSH
88490: CALL_OW 351
88494: PUSH
88495: LD_VAR 0 11
88499: PPUSH
88500: LD_VAR 0 12
88504: PPUSH
88505: CALL_OW 554
88509: AND
88510: IFFALSE 88550
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
88512: LD_ADDR_VAR 0 13
88516: PUSH
88517: LD_VAR 0 13
88521: PPUSH
88522: LD_VAR 0 13
88526: PUSH
88527: LD_INT 1
88529: PLUS
88530: PPUSH
88531: LD_VAR 0 11
88535: PUSH
88536: LD_VAR 0 12
88540: PUSH
88541: EMPTY
88542: LIST
88543: LIST
88544: PPUSH
88545: CALL_OW 2
88549: ST_TO_ADDR
// end ;
88550: GO 88458
88552: POP
88553: POP
88554: GO 88438
88556: POP
88557: POP
// if not list then
88558: LD_VAR 0 13
88562: NOT
88563: IFFALSE 88567
// exit ;
88565: GO 88646
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
88567: LD_ADDR_VAR 0 13
88571: PUSH
88572: LD_VAR 0 1
88576: PPUSH
88577: LD_VAR 0 13
88581: PPUSH
88582: LD_INT 1
88584: PPUSH
88585: LD_INT 1
88587: PPUSH
88588: CALL 34401 0 4
88592: ST_TO_ADDR
// ComStop ( flame ) ;
88593: LD_VAR 0 1
88597: PPUSH
88598: CALL_OW 141
// for i in list do
88602: LD_ADDR_VAR 0 6
88606: PUSH
88607: LD_VAR 0 13
88611: PUSH
88612: FOR_IN
88613: IFFALSE 88644
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
88615: LD_VAR 0 1
88619: PPUSH
88620: LD_VAR 0 6
88624: PUSH
88625: LD_INT 1
88627: ARRAY
88628: PPUSH
88629: LD_VAR 0 6
88633: PUSH
88634: LD_INT 2
88636: ARRAY
88637: PPUSH
88638: CALL_OW 176
88642: GO 88612
88644: POP
88645: POP
// end ;
88646: LD_VAR 0 5
88650: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
88651: LD_EXP 135
88655: NOT
88656: IFFALSE 88706
88658: GO 88660
88660: DISABLE
// begin initHack := true ;
88661: LD_ADDR_EXP 135
88665: PUSH
88666: LD_INT 1
88668: ST_TO_ADDR
// hackTanks := [ ] ;
88669: LD_ADDR_EXP 136
88673: PUSH
88674: EMPTY
88675: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
88676: LD_ADDR_EXP 137
88680: PUSH
88681: EMPTY
88682: ST_TO_ADDR
// hackLimit := 3 ;
88683: LD_ADDR_EXP 138
88687: PUSH
88688: LD_INT 3
88690: ST_TO_ADDR
// hackDist := 12 ;
88691: LD_ADDR_EXP 139
88695: PUSH
88696: LD_INT 12
88698: ST_TO_ADDR
// hackCounter := [ ] ;
88699: LD_ADDR_EXP 140
88703: PUSH
88704: EMPTY
88705: ST_TO_ADDR
// end ;
88706: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
88707: LD_EXP 135
88711: PUSH
88712: LD_INT 34
88714: PUSH
88715: LD_INT 99
88717: PUSH
88718: EMPTY
88719: LIST
88720: LIST
88721: PPUSH
88722: CALL_OW 69
88726: AND
88727: IFFALSE 88980
88729: GO 88731
88731: DISABLE
88732: LD_INT 0
88734: PPUSH
88735: PPUSH
// begin enable ;
88736: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
88737: LD_ADDR_VAR 0 1
88741: PUSH
88742: LD_INT 34
88744: PUSH
88745: LD_INT 99
88747: PUSH
88748: EMPTY
88749: LIST
88750: LIST
88751: PPUSH
88752: CALL_OW 69
88756: PUSH
88757: FOR_IN
88758: IFFALSE 88978
// begin if not i in hackTanks then
88760: LD_VAR 0 1
88764: PUSH
88765: LD_EXP 136
88769: IN
88770: NOT
88771: IFFALSE 88854
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
88773: LD_ADDR_EXP 136
88777: PUSH
88778: LD_EXP 136
88782: PPUSH
88783: LD_EXP 136
88787: PUSH
88788: LD_INT 1
88790: PLUS
88791: PPUSH
88792: LD_VAR 0 1
88796: PPUSH
88797: CALL_OW 1
88801: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
88802: LD_ADDR_EXP 137
88806: PUSH
88807: LD_EXP 137
88811: PPUSH
88812: LD_EXP 137
88816: PUSH
88817: LD_INT 1
88819: PLUS
88820: PPUSH
88821: EMPTY
88822: PPUSH
88823: CALL_OW 1
88827: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
88828: LD_ADDR_EXP 140
88832: PUSH
88833: LD_EXP 140
88837: PPUSH
88838: LD_EXP 140
88842: PUSH
88843: LD_INT 1
88845: PLUS
88846: PPUSH
88847: EMPTY
88848: PPUSH
88849: CALL_OW 1
88853: ST_TO_ADDR
// end ; if not IsOk ( i ) then
88854: LD_VAR 0 1
88858: PPUSH
88859: CALL_OW 302
88863: NOT
88864: IFFALSE 88877
// begin HackUnlinkAll ( i ) ;
88866: LD_VAR 0 1
88870: PPUSH
88871: CALL 88983 0 1
// continue ;
88875: GO 88757
// end ; HackCheckCapturedStatus ( i ) ;
88877: LD_VAR 0 1
88881: PPUSH
88882: CALL 89426 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
88886: LD_ADDR_VAR 0 2
88890: PUSH
88891: LD_INT 81
88893: PUSH
88894: LD_VAR 0 1
88898: PPUSH
88899: CALL_OW 255
88903: PUSH
88904: EMPTY
88905: LIST
88906: LIST
88907: PUSH
88908: LD_INT 33
88910: PUSH
88911: LD_INT 3
88913: PUSH
88914: EMPTY
88915: LIST
88916: LIST
88917: PUSH
88918: LD_INT 91
88920: PUSH
88921: LD_VAR 0 1
88925: PUSH
88926: LD_EXP 139
88930: PUSH
88931: EMPTY
88932: LIST
88933: LIST
88934: LIST
88935: PUSH
88936: LD_INT 50
88938: PUSH
88939: EMPTY
88940: LIST
88941: PUSH
88942: EMPTY
88943: LIST
88944: LIST
88945: LIST
88946: LIST
88947: PPUSH
88948: CALL_OW 69
88952: ST_TO_ADDR
// if not tmp then
88953: LD_VAR 0 2
88957: NOT
88958: IFFALSE 88962
// continue ;
88960: GO 88757
// HackLink ( i , tmp ) ;
88962: LD_VAR 0 1
88966: PPUSH
88967: LD_VAR 0 2
88971: PPUSH
88972: CALL 89119 0 2
// end ;
88976: GO 88757
88978: POP
88979: POP
// end ;
88980: PPOPN 2
88982: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
88983: LD_INT 0
88985: PPUSH
88986: PPUSH
88987: PPUSH
// if not hack in hackTanks then
88988: LD_VAR 0 1
88992: PUSH
88993: LD_EXP 136
88997: IN
88998: NOT
88999: IFFALSE 89003
// exit ;
89001: GO 89114
// index := GetElementIndex ( hackTanks , hack ) ;
89003: LD_ADDR_VAR 0 4
89007: PUSH
89008: LD_EXP 136
89012: PPUSH
89013: LD_VAR 0 1
89017: PPUSH
89018: CALL 33698 0 2
89022: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
89023: LD_EXP 137
89027: PUSH
89028: LD_VAR 0 4
89032: ARRAY
89033: IFFALSE 89114
// begin for i in hackTanksCaptured [ index ] do
89035: LD_ADDR_VAR 0 3
89039: PUSH
89040: LD_EXP 137
89044: PUSH
89045: LD_VAR 0 4
89049: ARRAY
89050: PUSH
89051: FOR_IN
89052: IFFALSE 89078
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
89054: LD_VAR 0 3
89058: PUSH
89059: LD_INT 1
89061: ARRAY
89062: PPUSH
89063: LD_VAR 0 3
89067: PUSH
89068: LD_INT 2
89070: ARRAY
89071: PPUSH
89072: CALL_OW 235
89076: GO 89051
89078: POP
89079: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
89080: LD_ADDR_EXP 137
89084: PUSH
89085: LD_EXP 137
89089: PPUSH
89090: LD_VAR 0 4
89094: PPUSH
89095: EMPTY
89096: PPUSH
89097: CALL_OW 1
89101: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
89102: LD_VAR 0 1
89106: PPUSH
89107: LD_INT 0
89109: PPUSH
89110: CALL_OW 505
// end ; end ;
89114: LD_VAR 0 2
89118: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
89119: LD_INT 0
89121: PPUSH
89122: PPUSH
89123: PPUSH
// if not hack in hackTanks or not vehicles then
89124: LD_VAR 0 1
89128: PUSH
89129: LD_EXP 136
89133: IN
89134: NOT
89135: PUSH
89136: LD_VAR 0 2
89140: NOT
89141: OR
89142: IFFALSE 89146
// exit ;
89144: GO 89421
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
89146: LD_ADDR_VAR 0 2
89150: PUSH
89151: LD_VAR 0 1
89155: PPUSH
89156: LD_VAR 0 2
89160: PPUSH
89161: LD_INT 1
89163: PPUSH
89164: LD_INT 1
89166: PPUSH
89167: CALL 34348 0 4
89171: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
89172: LD_ADDR_VAR 0 5
89176: PUSH
89177: LD_EXP 136
89181: PPUSH
89182: LD_VAR 0 1
89186: PPUSH
89187: CALL 33698 0 2
89191: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
89192: LD_EXP 137
89196: PUSH
89197: LD_VAR 0 5
89201: ARRAY
89202: PUSH
89203: LD_EXP 138
89207: LESS
89208: IFFALSE 89397
// begin for i := 1 to vehicles do
89210: LD_ADDR_VAR 0 4
89214: PUSH
89215: DOUBLE
89216: LD_INT 1
89218: DEC
89219: ST_TO_ADDR
89220: LD_VAR 0 2
89224: PUSH
89225: FOR_TO
89226: IFFALSE 89395
// begin if hackTanksCaptured [ index ] = hackLimit then
89228: LD_EXP 137
89232: PUSH
89233: LD_VAR 0 5
89237: ARRAY
89238: PUSH
89239: LD_EXP 138
89243: EQUAL
89244: IFFALSE 89248
// break ;
89246: GO 89395
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
89248: LD_ADDR_EXP 140
89252: PUSH
89253: LD_EXP 140
89257: PPUSH
89258: LD_VAR 0 5
89262: PPUSH
89263: LD_EXP 140
89267: PUSH
89268: LD_VAR 0 5
89272: ARRAY
89273: PUSH
89274: LD_INT 1
89276: PLUS
89277: PPUSH
89278: CALL_OW 1
89282: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
89283: LD_ADDR_EXP 137
89287: PUSH
89288: LD_EXP 137
89292: PPUSH
89293: LD_VAR 0 5
89297: PUSH
89298: LD_EXP 137
89302: PUSH
89303: LD_VAR 0 5
89307: ARRAY
89308: PUSH
89309: LD_INT 1
89311: PLUS
89312: PUSH
89313: EMPTY
89314: LIST
89315: LIST
89316: PPUSH
89317: LD_VAR 0 2
89321: PUSH
89322: LD_VAR 0 4
89326: ARRAY
89327: PUSH
89328: LD_VAR 0 2
89332: PUSH
89333: LD_VAR 0 4
89337: ARRAY
89338: PPUSH
89339: CALL_OW 255
89343: PUSH
89344: EMPTY
89345: LIST
89346: LIST
89347: PPUSH
89348: CALL 33913 0 3
89352: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
89353: LD_VAR 0 2
89357: PUSH
89358: LD_VAR 0 4
89362: ARRAY
89363: PPUSH
89364: LD_VAR 0 1
89368: PPUSH
89369: CALL_OW 255
89373: PPUSH
89374: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
89378: LD_VAR 0 2
89382: PUSH
89383: LD_VAR 0 4
89387: ARRAY
89388: PPUSH
89389: CALL_OW 141
// end ;
89393: GO 89225
89395: POP
89396: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
89397: LD_VAR 0 1
89401: PPUSH
89402: LD_EXP 137
89406: PUSH
89407: LD_VAR 0 5
89411: ARRAY
89412: PUSH
89413: LD_INT 0
89415: PLUS
89416: PPUSH
89417: CALL_OW 505
// end ;
89421: LD_VAR 0 3
89425: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
89426: LD_INT 0
89428: PPUSH
89429: PPUSH
89430: PPUSH
89431: PPUSH
// if not hack in hackTanks then
89432: LD_VAR 0 1
89436: PUSH
89437: LD_EXP 136
89441: IN
89442: NOT
89443: IFFALSE 89447
// exit ;
89445: GO 89687
// index := GetElementIndex ( hackTanks , hack ) ;
89447: LD_ADDR_VAR 0 4
89451: PUSH
89452: LD_EXP 136
89456: PPUSH
89457: LD_VAR 0 1
89461: PPUSH
89462: CALL 33698 0 2
89466: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
89467: LD_ADDR_VAR 0 3
89471: PUSH
89472: DOUBLE
89473: LD_EXP 137
89477: PUSH
89478: LD_VAR 0 4
89482: ARRAY
89483: INC
89484: ST_TO_ADDR
89485: LD_INT 1
89487: PUSH
89488: FOR_DOWNTO
89489: IFFALSE 89661
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
89491: LD_ADDR_VAR 0 5
89495: PUSH
89496: LD_EXP 137
89500: PUSH
89501: LD_VAR 0 4
89505: ARRAY
89506: PUSH
89507: LD_VAR 0 3
89511: ARRAY
89512: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
89513: LD_VAR 0 5
89517: PUSH
89518: LD_INT 1
89520: ARRAY
89521: PPUSH
89522: CALL_OW 302
89526: NOT
89527: PUSH
89528: LD_VAR 0 5
89532: PUSH
89533: LD_INT 1
89535: ARRAY
89536: PPUSH
89537: CALL_OW 255
89541: PUSH
89542: LD_VAR 0 1
89546: PPUSH
89547: CALL_OW 255
89551: NONEQUAL
89552: OR
89553: IFFALSE 89659
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
89555: LD_VAR 0 5
89559: PUSH
89560: LD_INT 1
89562: ARRAY
89563: PPUSH
89564: CALL_OW 305
89568: PUSH
89569: LD_VAR 0 5
89573: PUSH
89574: LD_INT 1
89576: ARRAY
89577: PPUSH
89578: CALL_OW 255
89582: PUSH
89583: LD_VAR 0 1
89587: PPUSH
89588: CALL_OW 255
89592: EQUAL
89593: AND
89594: IFFALSE 89618
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
89596: LD_VAR 0 5
89600: PUSH
89601: LD_INT 1
89603: ARRAY
89604: PPUSH
89605: LD_VAR 0 5
89609: PUSH
89610: LD_INT 2
89612: ARRAY
89613: PPUSH
89614: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
89618: LD_ADDR_EXP 137
89622: PUSH
89623: LD_EXP 137
89627: PPUSH
89628: LD_VAR 0 4
89632: PPUSH
89633: LD_EXP 137
89637: PUSH
89638: LD_VAR 0 4
89642: ARRAY
89643: PPUSH
89644: LD_VAR 0 3
89648: PPUSH
89649: CALL_OW 3
89653: PPUSH
89654: CALL_OW 1
89658: ST_TO_ADDR
// end ; end ;
89659: GO 89488
89661: POP
89662: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
89663: LD_VAR 0 1
89667: PPUSH
89668: LD_EXP 137
89672: PUSH
89673: LD_VAR 0 4
89677: ARRAY
89678: PUSH
89679: LD_INT 0
89681: PLUS
89682: PPUSH
89683: CALL_OW 505
// end ;
89687: LD_VAR 0 2
89691: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
89692: LD_INT 0
89694: PPUSH
89695: PPUSH
89696: PPUSH
89697: PPUSH
// if not hack in hackTanks then
89698: LD_VAR 0 1
89702: PUSH
89703: LD_EXP 136
89707: IN
89708: NOT
89709: IFFALSE 89713
// exit ;
89711: GO 89798
// index := GetElementIndex ( hackTanks , hack ) ;
89713: LD_ADDR_VAR 0 5
89717: PUSH
89718: LD_EXP 136
89722: PPUSH
89723: LD_VAR 0 1
89727: PPUSH
89728: CALL 33698 0 2
89732: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
89733: LD_ADDR_VAR 0 4
89737: PUSH
89738: DOUBLE
89739: LD_INT 1
89741: DEC
89742: ST_TO_ADDR
89743: LD_EXP 137
89747: PUSH
89748: LD_VAR 0 5
89752: ARRAY
89753: PUSH
89754: FOR_TO
89755: IFFALSE 89796
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
89757: LD_EXP 137
89761: PUSH
89762: LD_VAR 0 5
89766: ARRAY
89767: PUSH
89768: LD_VAR 0 4
89772: ARRAY
89773: PUSH
89774: LD_INT 1
89776: ARRAY
89777: PUSH
89778: LD_VAR 0 2
89782: EQUAL
89783: IFFALSE 89794
// KillUnit ( vehicle ) ;
89785: LD_VAR 0 2
89789: PPUSH
89790: CALL_OW 66
89794: GO 89754
89796: POP
89797: POP
// end ;
89798: LD_VAR 0 3
89802: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
89803: LD_EXP 141
89807: NOT
89808: IFFALSE 89843
89810: GO 89812
89812: DISABLE
// begin initMiner := true ;
89813: LD_ADDR_EXP 141
89817: PUSH
89818: LD_INT 1
89820: ST_TO_ADDR
// minersList := [ ] ;
89821: LD_ADDR_EXP 142
89825: PUSH
89826: EMPTY
89827: ST_TO_ADDR
// minerMinesList := [ ] ;
89828: LD_ADDR_EXP 143
89832: PUSH
89833: EMPTY
89834: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
89835: LD_ADDR_EXP 144
89839: PUSH
89840: LD_INT 5
89842: ST_TO_ADDR
// end ;
89843: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
89844: LD_EXP 141
89848: PUSH
89849: LD_INT 34
89851: PUSH
89852: LD_INT 81
89854: PUSH
89855: EMPTY
89856: LIST
89857: LIST
89858: PPUSH
89859: CALL_OW 69
89863: AND
89864: IFFALSE 90325
89866: GO 89868
89868: DISABLE
89869: LD_INT 0
89871: PPUSH
89872: PPUSH
89873: PPUSH
89874: PPUSH
// begin enable ;
89875: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
89876: LD_ADDR_VAR 0 1
89880: PUSH
89881: LD_INT 34
89883: PUSH
89884: LD_INT 81
89886: PUSH
89887: EMPTY
89888: LIST
89889: LIST
89890: PPUSH
89891: CALL_OW 69
89895: PUSH
89896: FOR_IN
89897: IFFALSE 89969
// begin if not i in minersList then
89899: LD_VAR 0 1
89903: PUSH
89904: LD_EXP 142
89908: IN
89909: NOT
89910: IFFALSE 89967
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
89912: LD_ADDR_EXP 142
89916: PUSH
89917: LD_EXP 142
89921: PPUSH
89922: LD_EXP 142
89926: PUSH
89927: LD_INT 1
89929: PLUS
89930: PPUSH
89931: LD_VAR 0 1
89935: PPUSH
89936: CALL_OW 1
89940: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
89941: LD_ADDR_EXP 143
89945: PUSH
89946: LD_EXP 143
89950: PPUSH
89951: LD_EXP 143
89955: PUSH
89956: LD_INT 1
89958: PLUS
89959: PPUSH
89960: EMPTY
89961: PPUSH
89962: CALL_OW 1
89966: ST_TO_ADDR
// end end ;
89967: GO 89896
89969: POP
89970: POP
// for i := minerMinesList downto 1 do
89971: LD_ADDR_VAR 0 1
89975: PUSH
89976: DOUBLE
89977: LD_EXP 143
89981: INC
89982: ST_TO_ADDR
89983: LD_INT 1
89985: PUSH
89986: FOR_DOWNTO
89987: IFFALSE 90323
// begin if IsLive ( minersList [ i ] ) then
89989: LD_EXP 142
89993: PUSH
89994: LD_VAR 0 1
89998: ARRAY
89999: PPUSH
90000: CALL_OW 300
90004: IFFALSE 90032
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
90006: LD_EXP 142
90010: PUSH
90011: LD_VAR 0 1
90015: ARRAY
90016: PPUSH
90017: LD_EXP 143
90021: PUSH
90022: LD_VAR 0 1
90026: ARRAY
90027: PPUSH
90028: CALL_OW 505
// if not minerMinesList [ i ] then
90032: LD_EXP 143
90036: PUSH
90037: LD_VAR 0 1
90041: ARRAY
90042: NOT
90043: IFFALSE 90047
// continue ;
90045: GO 89986
// for j := minerMinesList [ i ] downto 1 do
90047: LD_ADDR_VAR 0 2
90051: PUSH
90052: DOUBLE
90053: LD_EXP 143
90057: PUSH
90058: LD_VAR 0 1
90062: ARRAY
90063: INC
90064: ST_TO_ADDR
90065: LD_INT 1
90067: PUSH
90068: FOR_DOWNTO
90069: IFFALSE 90319
// begin side := GetSide ( minersList [ i ] ) ;
90071: LD_ADDR_VAR 0 3
90075: PUSH
90076: LD_EXP 142
90080: PUSH
90081: LD_VAR 0 1
90085: ARRAY
90086: PPUSH
90087: CALL_OW 255
90091: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
90092: LD_ADDR_VAR 0 4
90096: PUSH
90097: LD_EXP 143
90101: PUSH
90102: LD_VAR 0 1
90106: ARRAY
90107: PUSH
90108: LD_VAR 0 2
90112: ARRAY
90113: PUSH
90114: LD_INT 1
90116: ARRAY
90117: PPUSH
90118: LD_EXP 143
90122: PUSH
90123: LD_VAR 0 1
90127: ARRAY
90128: PUSH
90129: LD_VAR 0 2
90133: ARRAY
90134: PUSH
90135: LD_INT 2
90137: ARRAY
90138: PPUSH
90139: CALL_OW 428
90143: ST_TO_ADDR
// if not tmp then
90144: LD_VAR 0 4
90148: NOT
90149: IFFALSE 90153
// continue ;
90151: GO 90068
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
90153: LD_VAR 0 4
90157: PUSH
90158: LD_INT 81
90160: PUSH
90161: LD_VAR 0 3
90165: PUSH
90166: EMPTY
90167: LIST
90168: LIST
90169: PPUSH
90170: CALL_OW 69
90174: IN
90175: PUSH
90176: LD_EXP 143
90180: PUSH
90181: LD_VAR 0 1
90185: ARRAY
90186: PUSH
90187: LD_VAR 0 2
90191: ARRAY
90192: PUSH
90193: LD_INT 1
90195: ARRAY
90196: PPUSH
90197: LD_EXP 143
90201: PUSH
90202: LD_VAR 0 1
90206: ARRAY
90207: PUSH
90208: LD_VAR 0 2
90212: ARRAY
90213: PUSH
90214: LD_INT 2
90216: ARRAY
90217: PPUSH
90218: CALL_OW 458
90222: AND
90223: IFFALSE 90317
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
90225: LD_EXP 143
90229: PUSH
90230: LD_VAR 0 1
90234: ARRAY
90235: PUSH
90236: LD_VAR 0 2
90240: ARRAY
90241: PUSH
90242: LD_INT 1
90244: ARRAY
90245: PPUSH
90246: LD_EXP 143
90250: PUSH
90251: LD_VAR 0 1
90255: ARRAY
90256: PUSH
90257: LD_VAR 0 2
90261: ARRAY
90262: PUSH
90263: LD_INT 2
90265: ARRAY
90266: PPUSH
90267: LD_VAR 0 3
90271: PPUSH
90272: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
90276: LD_ADDR_EXP 143
90280: PUSH
90281: LD_EXP 143
90285: PPUSH
90286: LD_VAR 0 1
90290: PPUSH
90291: LD_EXP 143
90295: PUSH
90296: LD_VAR 0 1
90300: ARRAY
90301: PPUSH
90302: LD_VAR 0 2
90306: PPUSH
90307: CALL_OW 3
90311: PPUSH
90312: CALL_OW 1
90316: ST_TO_ADDR
// end ; end ;
90317: GO 90068
90319: POP
90320: POP
// end ;
90321: GO 89986
90323: POP
90324: POP
// end ;
90325: PPOPN 4
90327: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
90328: LD_INT 0
90330: PPUSH
90331: PPUSH
// result := false ;
90332: LD_ADDR_VAR 0 4
90336: PUSH
90337: LD_INT 0
90339: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
90340: LD_VAR 0 1
90344: PPUSH
90345: CALL_OW 264
90349: PUSH
90350: LD_INT 81
90352: EQUAL
90353: NOT
90354: IFFALSE 90358
// exit ;
90356: GO 90598
// index := GetElementIndex ( minersList , unit ) ;
90358: LD_ADDR_VAR 0 5
90362: PUSH
90363: LD_EXP 142
90367: PPUSH
90368: LD_VAR 0 1
90372: PPUSH
90373: CALL 33698 0 2
90377: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
90378: LD_EXP 143
90382: PUSH
90383: LD_VAR 0 5
90387: ARRAY
90388: PUSH
90389: LD_EXP 144
90393: GREATEREQUAL
90394: IFFALSE 90398
// exit ;
90396: GO 90598
// ComMoveXY ( unit , x , y ) ;
90398: LD_VAR 0 1
90402: PPUSH
90403: LD_VAR 0 2
90407: PPUSH
90408: LD_VAR 0 3
90412: PPUSH
90413: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90417: LD_INT 35
90419: PPUSH
90420: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
90424: LD_VAR 0 1
90428: PPUSH
90429: LD_VAR 0 2
90433: PPUSH
90434: LD_VAR 0 3
90438: PPUSH
90439: CALL 65450 0 3
90443: NOT
90444: PUSH
90445: LD_VAR 0 1
90449: PPUSH
90450: CALL_OW 314
90454: AND
90455: IFFALSE 90459
// exit ;
90457: GO 90598
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
90459: LD_VAR 0 2
90463: PPUSH
90464: LD_VAR 0 3
90468: PPUSH
90469: CALL_OW 428
90473: PUSH
90474: LD_VAR 0 1
90478: EQUAL
90479: PUSH
90480: LD_VAR 0 1
90484: PPUSH
90485: CALL_OW 314
90489: NOT
90490: AND
90491: IFFALSE 90417
// PlaySoundXY ( x , y , PlantMine ) ;
90493: LD_VAR 0 2
90497: PPUSH
90498: LD_VAR 0 3
90502: PPUSH
90503: LD_STRING PlantMine
90505: PPUSH
90506: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
90510: LD_VAR 0 2
90514: PPUSH
90515: LD_VAR 0 3
90519: PPUSH
90520: LD_VAR 0 1
90524: PPUSH
90525: CALL_OW 255
90529: PPUSH
90530: LD_INT 0
90532: PPUSH
90533: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
90537: LD_ADDR_EXP 143
90541: PUSH
90542: LD_EXP 143
90546: PPUSH
90547: LD_VAR 0 5
90551: PUSH
90552: LD_EXP 143
90556: PUSH
90557: LD_VAR 0 5
90561: ARRAY
90562: PUSH
90563: LD_INT 1
90565: PLUS
90566: PUSH
90567: EMPTY
90568: LIST
90569: LIST
90570: PPUSH
90571: LD_VAR 0 2
90575: PUSH
90576: LD_VAR 0 3
90580: PUSH
90581: EMPTY
90582: LIST
90583: LIST
90584: PPUSH
90585: CALL 33913 0 3
90589: ST_TO_ADDR
// result := true ;
90590: LD_ADDR_VAR 0 4
90594: PUSH
90595: LD_INT 1
90597: ST_TO_ADDR
// end ;
90598: LD_VAR 0 4
90602: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
90603: LD_INT 0
90605: PPUSH
90606: PPUSH
90607: PPUSH
// if not unit in minersList then
90608: LD_VAR 0 1
90612: PUSH
90613: LD_EXP 142
90617: IN
90618: NOT
90619: IFFALSE 90623
// exit ;
90621: GO 91015
// index := GetElementIndex ( minersList , unit ) ;
90623: LD_ADDR_VAR 0 6
90627: PUSH
90628: LD_EXP 142
90632: PPUSH
90633: LD_VAR 0 1
90637: PPUSH
90638: CALL 33698 0 2
90642: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
90643: LD_ADDR_VAR 0 5
90647: PUSH
90648: DOUBLE
90649: LD_EXP 143
90653: PUSH
90654: LD_VAR 0 6
90658: ARRAY
90659: INC
90660: ST_TO_ADDR
90661: LD_INT 1
90663: PUSH
90664: FOR_DOWNTO
90665: IFFALSE 90826
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
90667: LD_EXP 143
90671: PUSH
90672: LD_VAR 0 6
90676: ARRAY
90677: PUSH
90678: LD_VAR 0 5
90682: ARRAY
90683: PUSH
90684: LD_INT 1
90686: ARRAY
90687: PUSH
90688: LD_VAR 0 2
90692: EQUAL
90693: PUSH
90694: LD_EXP 143
90698: PUSH
90699: LD_VAR 0 6
90703: ARRAY
90704: PUSH
90705: LD_VAR 0 5
90709: ARRAY
90710: PUSH
90711: LD_INT 2
90713: ARRAY
90714: PUSH
90715: LD_VAR 0 3
90719: EQUAL
90720: AND
90721: IFFALSE 90824
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90723: LD_EXP 143
90727: PUSH
90728: LD_VAR 0 6
90732: ARRAY
90733: PUSH
90734: LD_VAR 0 5
90738: ARRAY
90739: PUSH
90740: LD_INT 1
90742: ARRAY
90743: PPUSH
90744: LD_EXP 143
90748: PUSH
90749: LD_VAR 0 6
90753: ARRAY
90754: PUSH
90755: LD_VAR 0 5
90759: ARRAY
90760: PUSH
90761: LD_INT 2
90763: ARRAY
90764: PPUSH
90765: LD_VAR 0 1
90769: PPUSH
90770: CALL_OW 255
90774: PPUSH
90775: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
90779: LD_ADDR_EXP 143
90783: PUSH
90784: LD_EXP 143
90788: PPUSH
90789: LD_VAR 0 6
90793: PPUSH
90794: LD_EXP 143
90798: PUSH
90799: LD_VAR 0 6
90803: ARRAY
90804: PPUSH
90805: LD_VAR 0 5
90809: PPUSH
90810: CALL_OW 3
90814: PPUSH
90815: CALL_OW 1
90819: ST_TO_ADDR
// exit ;
90820: POP
90821: POP
90822: GO 91015
// end ; end ;
90824: GO 90664
90826: POP
90827: POP
// for i := minerMinesList [ index ] downto 1 do
90828: LD_ADDR_VAR 0 5
90832: PUSH
90833: DOUBLE
90834: LD_EXP 143
90838: PUSH
90839: LD_VAR 0 6
90843: ARRAY
90844: INC
90845: ST_TO_ADDR
90846: LD_INT 1
90848: PUSH
90849: FOR_DOWNTO
90850: IFFALSE 91013
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
90852: LD_EXP 143
90856: PUSH
90857: LD_VAR 0 6
90861: ARRAY
90862: PUSH
90863: LD_VAR 0 5
90867: ARRAY
90868: PUSH
90869: LD_INT 1
90871: ARRAY
90872: PPUSH
90873: LD_EXP 143
90877: PUSH
90878: LD_VAR 0 6
90882: ARRAY
90883: PUSH
90884: LD_VAR 0 5
90888: ARRAY
90889: PUSH
90890: LD_INT 2
90892: ARRAY
90893: PPUSH
90894: LD_VAR 0 2
90898: PPUSH
90899: LD_VAR 0 3
90903: PPUSH
90904: CALL_OW 298
90908: PUSH
90909: LD_INT 6
90911: LESS
90912: IFFALSE 91011
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90914: LD_EXP 143
90918: PUSH
90919: LD_VAR 0 6
90923: ARRAY
90924: PUSH
90925: LD_VAR 0 5
90929: ARRAY
90930: PUSH
90931: LD_INT 1
90933: ARRAY
90934: PPUSH
90935: LD_EXP 143
90939: PUSH
90940: LD_VAR 0 6
90944: ARRAY
90945: PUSH
90946: LD_VAR 0 5
90950: ARRAY
90951: PUSH
90952: LD_INT 2
90954: ARRAY
90955: PPUSH
90956: LD_VAR 0 1
90960: PPUSH
90961: CALL_OW 255
90965: PPUSH
90966: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
90970: LD_ADDR_EXP 143
90974: PUSH
90975: LD_EXP 143
90979: PPUSH
90980: LD_VAR 0 6
90984: PPUSH
90985: LD_EXP 143
90989: PUSH
90990: LD_VAR 0 6
90994: ARRAY
90995: PPUSH
90996: LD_VAR 0 5
91000: PPUSH
91001: CALL_OW 3
91005: PPUSH
91006: CALL_OW 1
91010: ST_TO_ADDR
// end ; end ;
91011: GO 90849
91013: POP
91014: POP
// end ;
91015: LD_VAR 0 4
91019: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
91020: LD_INT 0
91022: PPUSH
91023: PPUSH
91024: PPUSH
91025: PPUSH
91026: PPUSH
91027: PPUSH
91028: PPUSH
91029: PPUSH
91030: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
91031: LD_VAR 0 1
91035: PPUSH
91036: CALL_OW 264
91040: PUSH
91041: LD_INT 81
91043: EQUAL
91044: NOT
91045: PUSH
91046: LD_VAR 0 1
91050: PUSH
91051: LD_EXP 142
91055: IN
91056: NOT
91057: OR
91058: IFFALSE 91062
// exit ;
91060: GO 91384
// index := GetElementIndex ( minersList , unit ) ;
91062: LD_ADDR_VAR 0 6
91066: PUSH
91067: LD_EXP 142
91071: PPUSH
91072: LD_VAR 0 1
91076: PPUSH
91077: CALL 33698 0 2
91081: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
91082: LD_ADDR_VAR 0 8
91086: PUSH
91087: LD_EXP 144
91091: PUSH
91092: LD_EXP 143
91096: PUSH
91097: LD_VAR 0 6
91101: ARRAY
91102: MINUS
91103: ST_TO_ADDR
// if not minesFreeAmount then
91104: LD_VAR 0 8
91108: NOT
91109: IFFALSE 91113
// exit ;
91111: GO 91384
// tmp := [ ] ;
91113: LD_ADDR_VAR 0 7
91117: PUSH
91118: EMPTY
91119: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
91120: LD_ADDR_VAR 0 5
91124: PUSH
91125: DOUBLE
91126: LD_INT 1
91128: DEC
91129: ST_TO_ADDR
91130: LD_VAR 0 8
91134: PUSH
91135: FOR_TO
91136: IFFALSE 91331
// begin _d := rand ( 0 , 5 ) ;
91138: LD_ADDR_VAR 0 11
91142: PUSH
91143: LD_INT 0
91145: PPUSH
91146: LD_INT 5
91148: PPUSH
91149: CALL_OW 12
91153: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
91154: LD_ADDR_VAR 0 12
91158: PUSH
91159: LD_INT 2
91161: PPUSH
91162: LD_INT 6
91164: PPUSH
91165: CALL_OW 12
91169: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
91170: LD_ADDR_VAR 0 9
91174: PUSH
91175: LD_VAR 0 2
91179: PPUSH
91180: LD_VAR 0 11
91184: PPUSH
91185: LD_VAR 0 12
91189: PPUSH
91190: CALL_OW 272
91194: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
91195: LD_ADDR_VAR 0 10
91199: PUSH
91200: LD_VAR 0 3
91204: PPUSH
91205: LD_VAR 0 11
91209: PPUSH
91210: LD_VAR 0 12
91214: PPUSH
91215: CALL_OW 273
91219: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
91220: LD_VAR 0 9
91224: PPUSH
91225: LD_VAR 0 10
91229: PPUSH
91230: CALL_OW 488
91234: PUSH
91235: LD_VAR 0 9
91239: PUSH
91240: LD_VAR 0 10
91244: PUSH
91245: EMPTY
91246: LIST
91247: LIST
91248: PUSH
91249: LD_VAR 0 7
91253: IN
91254: NOT
91255: AND
91256: PUSH
91257: LD_VAR 0 9
91261: PPUSH
91262: LD_VAR 0 10
91266: PPUSH
91267: CALL_OW 458
91271: NOT
91272: AND
91273: IFFALSE 91315
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
91275: LD_ADDR_VAR 0 7
91279: PUSH
91280: LD_VAR 0 7
91284: PPUSH
91285: LD_VAR 0 7
91289: PUSH
91290: LD_INT 1
91292: PLUS
91293: PPUSH
91294: LD_VAR 0 9
91298: PUSH
91299: LD_VAR 0 10
91303: PUSH
91304: EMPTY
91305: LIST
91306: LIST
91307: PPUSH
91308: CALL_OW 1
91312: ST_TO_ADDR
91313: GO 91329
// i := i - 1 ;
91315: LD_ADDR_VAR 0 5
91319: PUSH
91320: LD_VAR 0 5
91324: PUSH
91325: LD_INT 1
91327: MINUS
91328: ST_TO_ADDR
// end ;
91329: GO 91135
91331: POP
91332: POP
// for i in tmp do
91333: LD_ADDR_VAR 0 5
91337: PUSH
91338: LD_VAR 0 7
91342: PUSH
91343: FOR_IN
91344: IFFALSE 91382
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
91346: LD_VAR 0 1
91350: PPUSH
91351: LD_VAR 0 5
91355: PUSH
91356: LD_INT 1
91358: ARRAY
91359: PPUSH
91360: LD_VAR 0 5
91364: PUSH
91365: LD_INT 2
91367: ARRAY
91368: PPUSH
91369: CALL 90328 0 3
91373: NOT
91374: IFFALSE 91380
// exit ;
91376: POP
91377: POP
91378: GO 91384
91380: GO 91343
91382: POP
91383: POP
// end ;
91384: LD_VAR 0 4
91388: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
91389: LD_INT 0
91391: PPUSH
91392: PPUSH
91393: PPUSH
91394: PPUSH
91395: PPUSH
91396: PPUSH
91397: PPUSH
// if not GetClass ( unit ) = class_sniper then
91398: LD_VAR 0 1
91402: PPUSH
91403: CALL_OW 257
91407: PUSH
91408: LD_INT 5
91410: EQUAL
91411: NOT
91412: IFFALSE 91416
// exit ;
91414: GO 91804
// dist := 8 ;
91416: LD_ADDR_VAR 0 5
91420: PUSH
91421: LD_INT 8
91423: ST_TO_ADDR
// viewRange := 12 ;
91424: LD_ADDR_VAR 0 7
91428: PUSH
91429: LD_INT 12
91431: ST_TO_ADDR
// side := GetSide ( unit ) ;
91432: LD_ADDR_VAR 0 6
91436: PUSH
91437: LD_VAR 0 1
91441: PPUSH
91442: CALL_OW 255
91446: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
91447: LD_INT 61
91449: PPUSH
91450: LD_VAR 0 6
91454: PPUSH
91455: CALL_OW 321
91459: PUSH
91460: LD_INT 2
91462: EQUAL
91463: IFFALSE 91473
// viewRange := 16 ;
91465: LD_ADDR_VAR 0 7
91469: PUSH
91470: LD_INT 16
91472: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
91473: LD_VAR 0 1
91477: PPUSH
91478: LD_VAR 0 2
91482: PPUSH
91483: LD_VAR 0 3
91487: PPUSH
91488: CALL_OW 297
91492: PUSH
91493: LD_VAR 0 5
91497: GREATER
91498: IFFALSE 91577
// begin ComMoveXY ( unit , x , y ) ;
91500: LD_VAR 0 1
91504: PPUSH
91505: LD_VAR 0 2
91509: PPUSH
91510: LD_VAR 0 3
91514: PPUSH
91515: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
91519: LD_INT 35
91521: PPUSH
91522: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
91526: LD_VAR 0 1
91530: PPUSH
91531: LD_VAR 0 2
91535: PPUSH
91536: LD_VAR 0 3
91540: PPUSH
91541: CALL 65450 0 3
91545: NOT
91546: IFFALSE 91550
// exit ;
91548: GO 91804
// until GetDistUnitXY ( unit , x , y ) < dist ;
91550: LD_VAR 0 1
91554: PPUSH
91555: LD_VAR 0 2
91559: PPUSH
91560: LD_VAR 0 3
91564: PPUSH
91565: CALL_OW 297
91569: PUSH
91570: LD_VAR 0 5
91574: LESS
91575: IFFALSE 91519
// end ; ComTurnXY ( unit , x , y ) ;
91577: LD_VAR 0 1
91581: PPUSH
91582: LD_VAR 0 2
91586: PPUSH
91587: LD_VAR 0 3
91591: PPUSH
91592: CALL_OW 118
// wait ( 5 ) ;
91596: LD_INT 5
91598: PPUSH
91599: CALL_OW 67
// _d := GetDir ( unit ) ;
91603: LD_ADDR_VAR 0 10
91607: PUSH
91608: LD_VAR 0 1
91612: PPUSH
91613: CALL_OW 254
91617: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
91618: LD_ADDR_VAR 0 8
91622: PUSH
91623: LD_VAR 0 1
91627: PPUSH
91628: CALL_OW 250
91632: PPUSH
91633: LD_VAR 0 10
91637: PPUSH
91638: LD_VAR 0 5
91642: PPUSH
91643: CALL_OW 272
91647: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
91648: LD_ADDR_VAR 0 9
91652: PUSH
91653: LD_VAR 0 1
91657: PPUSH
91658: CALL_OW 251
91662: PPUSH
91663: LD_VAR 0 10
91667: PPUSH
91668: LD_VAR 0 5
91672: PPUSH
91673: CALL_OW 273
91677: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
91678: LD_VAR 0 8
91682: PPUSH
91683: LD_VAR 0 9
91687: PPUSH
91688: CALL_OW 488
91692: NOT
91693: IFFALSE 91697
// exit ;
91695: GO 91804
// ComAnimCustom ( unit , 1 ) ;
91697: LD_VAR 0 1
91701: PPUSH
91702: LD_INT 1
91704: PPUSH
91705: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
91709: LD_VAR 0 8
91713: PPUSH
91714: LD_VAR 0 9
91718: PPUSH
91719: LD_VAR 0 6
91723: PPUSH
91724: LD_VAR 0 7
91728: PPUSH
91729: CALL_OW 330
// repeat wait ( 1 ) ;
91733: LD_INT 1
91735: PPUSH
91736: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
91740: LD_VAR 0 1
91744: PPUSH
91745: CALL_OW 316
91749: PUSH
91750: LD_VAR 0 1
91754: PPUSH
91755: CALL_OW 314
91759: OR
91760: PUSH
91761: LD_VAR 0 1
91765: PPUSH
91766: CALL_OW 302
91770: NOT
91771: OR
91772: PUSH
91773: LD_VAR 0 1
91777: PPUSH
91778: CALL_OW 301
91782: OR
91783: IFFALSE 91733
// RemoveSeeing ( _x , _y , side ) ;
91785: LD_VAR 0 8
91789: PPUSH
91790: LD_VAR 0 9
91794: PPUSH
91795: LD_VAR 0 6
91799: PPUSH
91800: CALL_OW 331
// end ; end_of_file
91804: LD_VAR 0 4
91808: RET
// export function StopOriginalMusic ; begin
91809: LD_INT 0
91811: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
91812: LD_STRING OW_FORCEMUSICDISABLE(true);
91814: PPUSH
91815: CALL_OW 559
// end ;
91819: LD_VAR 0 1
91823: RET
// export function PlayOriginalMusic ; begin
91824: LD_INT 0
91826: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
91827: LD_STRING OW_FORCEMUSICDISABLE(false);
91829: PPUSH
91830: CALL_OW 559
// end ;
91834: LD_VAR 0 1
91838: RET
// export function PlayCustomMusic ( track , callback ) ; begin
91839: LD_INT 0
91841: PPUSH
// StopOriginalMusic ;
91842: CALL 91809 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
91846: LD_STRING playMusic("
91848: PUSH
91849: LD_VAR 0 1
91853: STR
91854: PUSH
91855: LD_STRING ", "
91857: STR
91858: PUSH
91859: LD_VAR 0 2
91863: STR
91864: PUSH
91865: LD_STRING ")
91867: STR
91868: PPUSH
91869: CALL_OW 559
// end ;
91873: LD_VAR 0 3
91877: RET
