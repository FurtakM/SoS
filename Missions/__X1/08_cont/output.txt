// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 21374 0 0
// PrepareRussian ;
  12: CALL 2056 0 0
// PrepareArabian ;
  16: CALL 446 0 0
// Action ;
  20: CALL 3854 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin , kaiaWeaponHidden ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// kaiaWeaponHidden := 0 ;
 427: LD_ADDR_EXP 45
 431: PUSH
 432: LD_INT 0
 434: ST_TO_ADDR
// enable ( entranceEvent ) ;
 435: LD_INT 1
 437: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 438: LD_INT 2
 440: DISABLE_MARKED
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
// uc_side := 4 ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_INT 4
 457: ST_TO_ADDR
// uc_nation := 1 ;
 458: LD_ADDR_OWVAR 21
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 466: LD_ADDR_EXP 58
 470: PUSH
 471: LD_STRING 07_Americans
 473: PPUSH
 474: CALL_OW 31
 478: ST_TO_ADDR
// if americanSquad < 5 then
 479: LD_EXP 58
 483: PUSH
 484: LD_INT 5
 486: LESS
 487: IFFALSE 581
// begin if not americanSquad then
 489: LD_EXP 58
 493: NOT
 494: IFFALSE 503
// americanSquad := [ ] ;
 496: LD_ADDR_EXP 58
 500: PUSH
 501: EMPTY
 502: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: DOUBLE
 509: LD_EXP 58
 513: DEC
 514: ST_TO_ADDR
 515: LD_INT 2
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 4
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_OWVAR 67
 537: ARRAY
 538: PUSH
 539: FOR_TO
 540: IFFALSE 577
// begin PrepareHuman ( false , 2 , 6 ) ;
 542: LD_INT 0
 544: PPUSH
 545: LD_INT 2
 547: PPUSH
 548: LD_INT 6
 550: PPUSH
 551: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 555: LD_ADDR_EXP 58
 559: PUSH
 560: LD_EXP 58
 564: PPUSH
 565: CALL_OW 44
 569: PPUSH
 570: CALL 68237 0 2
 574: ST_TO_ADDR
// end ;
 575: GO 539
 577: POP
 578: POP
// end else
 579: GO 628
// for i := Count ( americanSquad ) downto 5 do
 581: LD_ADDR_VAR 0 2
 585: PUSH
 586: DOUBLE
 587: LD_EXP 58
 591: PPUSH
 592: CALL 32305 0 1
 596: INC
 597: ST_TO_ADDR
 598: LD_INT 5
 600: PUSH
 601: FOR_DOWNTO
 602: IFFALSE 626
// americanSquad := Delete ( americanSquad , i ) ;
 604: LD_ADDR_EXP 58
 608: PUSH
 609: LD_EXP 58
 613: PPUSH
 614: LD_VAR 0 2
 618: PPUSH
 619: CALL_OW 3
 623: ST_TO_ADDR
 624: GO 601
 626: POP
 627: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 628: LD_ADDR_EXP 60
 632: PUSH
 633: LD_STRING UsCommander
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_STRING 07_
 644: PPUSH
 645: CALL 30105 0 3
 649: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 650: LD_INT 1
 652: PPUSH
 653: LD_INT 6
 655: PPUSH
 656: CALL_OW 381
// Jerry := CreateHuman ;
 660: LD_ADDR_EXP 61
 664: PUSH
 665: CALL_OW 44
 669: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 670: LD_EXP 61
 674: PPUSH
 675: LD_INT 33
 677: PPUSH
 678: CALL_OW 336
// if not Doug then
 682: LD_EXP 60
 686: NOT
 687: IFFALSE 709
// begin PrepareSoldier ( sex_male , 6 ) ;
 689: LD_INT 1
 691: PPUSH
 692: LD_INT 6
 694: PPUSH
 695: CALL_OW 381
// Doug := CreateHuman ;
 699: LD_ADDR_EXP 60
 703: PUSH
 704: CALL_OW 44
 708: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 709: LD_EXP 60
 713: PPUSH
 714: LD_INT 33
 716: PPUSH
 717: CALL_OW 336
// if johnnySaved or debug then
 721: LD_EXP 3
 725: IFTRUE 733
 727: PUSH
 728: LD_EXP 1
 732: OR
 733: IFFALSE 760
// begin Harris := NewCharacter ( Harris ) ;
 735: LD_ADDR_EXP 59
 739: PUSH
 740: LD_STRING Harris
 742: PPUSH
 743: CALL_OW 25
 747: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 748: LD_EXP 59
 752: PPUSH
 753: LD_INT 33
 755: PPUSH
 756: CALL_OW 336
// end ; uc_side := 2 ;
 760: LD_ADDR_OWVAR 20
 764: PUSH
 765: LD_INT 2
 767: ST_TO_ADDR
// uc_nation := 2 ;
 768: LD_ADDR_OWVAR 21
 772: PUSH
 773: LD_INT 2
 775: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 776: LD_ADDR_EXP 46
 780: PUSH
 781: LD_STRING Heike
 783: PPUSH
 784: LD_EXP 1
 788: NOT
 789: PPUSH
 790: LD_EXP 2
 794: PPUSH
 795: CALL 30105 0 3
 799: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 800: LD_ADDR_EXP 49
 804: PUSH
 805: LD_STRING Ibrahim
 807: PPUSH
 808: LD_EXP 1
 812: NOT
 813: PPUSH
 814: LD_EXP 2
 818: PPUSH
 819: CALL 30105 0 3
 823: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 824: LD_ADDR_EXP 47
 828: PUSH
 829: LD_STRING Givi
 831: PPUSH
 832: LD_EXP 1
 836: NOT
 837: PPUSH
 838: LD_EXP 2
 842: PPUSH
 843: CALL 30105 0 3
 847: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 848: LD_ADDR_EXP 50
 852: PUSH
 853: LD_STRING Kamil
 855: PPUSH
 856: LD_EXP 1
 860: NOT
 861: PPUSH
 862: LD_EXP 2
 866: PPUSH
 867: CALL 30105 0 3
 871: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 872: LD_ADDR_EXP 51
 876: PUSH
 877: LD_STRING Kaia
 879: PPUSH
 880: LD_EXP 1
 884: NOT
 885: PPUSH
 886: LD_EXP 2
 890: PPUSH
 891: CALL 30105 0 3
 895: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 896: LD_ADDR_EXP 52
 900: PUSH
 901: LD_STRING Sophia
 903: PPUSH
 904: LD_EXP 1
 908: NOT
 909: PPUSH
 910: LD_EXP 2
 914: PPUSH
 915: CALL 30105 0 3
 919: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 920: LD_ADDR_EXP 53
 924: PUSH
 925: LD_STRING Markov
 927: PPUSH
 928: LD_EXP 1
 932: NOT
 933: PPUSH
 934: LD_EXP 2
 938: PPUSH
 939: CALL 30105 0 3
 943: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 944: LD_ADDR_EXP 56
 948: PUSH
 949: LD_STRING Aviradze
 951: PPUSH
 952: LD_EXP 1
 956: NOT
 957: PPUSH
 958: LD_EXP 2
 962: PPUSH
 963: CALL 30105 0 3
 967: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 968: LD_ADDR_EXP 55
 972: PUSH
 973: LD_STRING Kurt
 975: PPUSH
 976: LD_EXP 1
 980: NOT
 981: PPUSH
 982: LD_EXP 2
 986: PPUSH
 987: CALL 30105 0 3
 991: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 992: LD_ADDR_EXP 48
 996: PUSH
 997: LD_STRING Mike
 999: PPUSH
1000: LD_EXP 1
1004: NOT
1005: PPUSH
1006: LD_EXP 2
1010: PPUSH
1011: CALL 30105 0 3
1015: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1016: LD_ADDR_EXP 54
1020: PUSH
1021: LD_STRING Olaf
1023: PPUSH
1024: LD_EXP 1
1028: NOT
1029: PPUSH
1030: LD_EXP 2
1034: PPUSH
1035: CALL 30105 0 3
1039: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1040: LD_ADDR_EXP 57
1044: PUSH
1045: LD_STRING 07_others
1047: PPUSH
1048: CALL_OW 31
1052: ST_TO_ADDR
// end ;
1053: LD_VAR 0 1
1057: RET
// export function PrepareGame ; var i ; begin
1058: LD_INT 0
1060: PPUSH
1061: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1062: LD_EXP 46
1066: PPUSH
1067: LD_INT 23
1069: PPUSH
1070: CALL_OW 52
// if Givi then
1074: LD_EXP 47
1078: IFFALSE 1116
// begin SetSide ( Givi , 5 ) ;
1080: LD_EXP 47
1084: PPUSH
1085: LD_INT 5
1087: PPUSH
1088: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1092: LD_EXP 47
1096: PPUSH
1097: LD_INT 9
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: CALL_OW 49
// ComHold ( Givi ) ;
1107: LD_EXP 47
1111: PPUSH
1112: CALL_OW 140
// end ; if Markov then
1116: LD_EXP 53
1120: IFFALSE 1158
// begin SetSide ( Markov , 5 ) ;
1122: LD_EXP 53
1126: PPUSH
1127: LD_INT 5
1129: PPUSH
1130: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1134: LD_EXP 53
1138: PPUSH
1139: LD_INT 3
1141: PPUSH
1142: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1146: LD_EXP 53
1150: PPUSH
1151: LD_INT 61
1153: PPUSH
1154: CALL_OW 52
// end ; if Mike then
1158: LD_EXP 48
1162: IFFALSE 1200
// begin SetSide ( Mike , 5 ) ;
1164: LD_EXP 48
1168: PPUSH
1169: LD_INT 5
1171: PPUSH
1172: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1176: LD_EXP 48
1180: PPUSH
1181: LD_INT 17
1183: PPUSH
1184: LD_INT 0
1186: PPUSH
1187: CALL_OW 49
// ComHold ( Mike ) ;
1191: LD_EXP 48
1195: PPUSH
1196: CALL_OW 140
// end ; if Olaf then
1200: LD_EXP 54
1204: IFFALSE 1245
// begin SetSide ( Olaf , 5 ) ;
1206: LD_EXP 54
1210: PPUSH
1211: LD_INT 5
1213: PPUSH
1214: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1218: LD_EXP 54
1222: PPUSH
1223: LD_INT 16
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1233: LD_EXP 54
1237: PPUSH
1238: LD_INT 3
1240: PPUSH
1241: CALL 71559 0 2
// end ; if Kamil then
1245: LD_EXP 50
1249: IFFALSE 1275
// begin SetSide ( Kamil , 5 ) ;
1251: LD_EXP 50
1255: PPUSH
1256: LD_INT 5
1258: PPUSH
1259: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1263: LD_EXP 50
1267: PPUSH
1268: LD_INT 109
1270: PPUSH
1271: CALL_OW 52
// end ; if Kurt then
1275: LD_EXP 55
1279: IFFALSE 1305
// begin SetSide ( Kurt , 5 ) ;
1281: LD_EXP 55
1285: PPUSH
1286: LD_INT 5
1288: PPUSH
1289: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1293: LD_EXP 55
1297: PPUSH
1298: LD_INT 169
1300: PPUSH
1301: CALL_OW 52
// end ; if Kaia then
1305: LD_EXP 51
1309: IFFALSE 1335
// begin SetSide ( Kaia , 5 ) ;
1311: LD_EXP 51
1315: PPUSH
1316: LD_INT 5
1318: PPUSH
1319: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1323: LD_EXP 51
1327: PPUSH
1328: LD_INT 147
1330: PPUSH
1331: CALL_OW 52
// end ; if Sophia then
1335: LD_EXP 52
1339: IFFALSE 1380
// begin SetSide ( Sophia , 5 ) ;
1341: LD_EXP 52
1345: PPUSH
1346: LD_INT 5
1348: PPUSH
1349: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1353: LD_EXP 52
1357: PPUSH
1358: LD_INT 142
1360: PPUSH
1361: LD_INT 96
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL_OW 48
// ComHold ( Sophia ) ;
1371: LD_EXP 52
1375: PPUSH
1376: CALL_OW 140
// end ; if Harris then
1380: LD_EXP 59
1384: IFFALSE 1422
// begin SetSide ( Harris , 4 ) ;
1386: LD_EXP 59
1390: PPUSH
1391: LD_INT 4
1393: PPUSH
1394: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1398: LD_EXP 59
1402: PPUSH
1403: LD_INT 20
1405: PPUSH
1406: LD_INT 0
1408: PPUSH
1409: CALL_OW 49
// ComHold ( i ) ;
1413: LD_VAR 0 2
1417: PPUSH
1418: CALL_OW 140
// end ; if Doug then
1422: LD_EXP 60
1426: IFFALSE 1452
// begin SetSide ( Doug , 4 ) ;
1428: LD_EXP 60
1432: PPUSH
1433: LD_INT 4
1435: PPUSH
1436: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1440: LD_EXP 60
1444: PPUSH
1445: LD_INT 106
1447: PPUSH
1448: CALL_OW 52
// end ; if Aviradze then
1452: LD_EXP 56
1456: IFFALSE 1482
// begin SetSide ( Aviradze , 5 ) ;
1458: LD_EXP 56
1462: PPUSH
1463: LD_INT 5
1465: PPUSH
1466: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1470: LD_EXP 56
1474: PPUSH
1475: LD_INT 119
1477: PPUSH
1478: CALL_OW 52
// end ; if Ibrahim then
1482: LD_EXP 49
1486: IFFALSE 1512
// begin SetSide ( Ibrahim , 5 ) ;
1488: LD_EXP 49
1492: PPUSH
1493: LD_INT 5
1495: PPUSH
1496: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1500: LD_EXP 49
1504: PPUSH
1505: LD_INT 119
1507: PPUSH
1508: CALL_OW 52
// end ; if Jerry then
1512: LD_EXP 61
1516: IFFALSE 1557
// begin SetSide ( Jerry , 4 ) ;
1518: LD_EXP 61
1522: PPUSH
1523: LD_INT 4
1525: PPUSH
1526: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1530: LD_EXP 61
1534: PPUSH
1535: LD_INT 119
1537: PPUSH
1538: LD_INT 59
1540: PPUSH
1541: LD_INT 0
1543: PPUSH
1544: CALL_OW 48
// ComHold ( Jerry ) ;
1548: LD_EXP 61
1552: PPUSH
1553: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1557: LD_EXP 65
1561: PPUSH
1562: LD_INT 119
1564: PPUSH
1565: CALL_OW 52
// for i in americanSquad do
1569: LD_ADDR_VAR 0 2
1573: PUSH
1574: LD_EXP 58
1578: PUSH
1579: FOR_IN
1580: IFFALSE 1608
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1582: LD_VAR 0 2
1586: PPUSH
1587: LD_INT 21
1589: PPUSH
1590: LD_INT 0
1592: PPUSH
1593: CALL_OW 49
// ComHold ( i ) ;
1597: LD_VAR 0 2
1601: PPUSH
1602: CALL_OW 140
// end ;
1606: GO 1579
1608: POP
1609: POP
// for i in heikeSecondSquad do
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: LD_EXP 57
1619: PUSH
1620: FOR_IN
1621: IFFALSE 1661
// begin SetSide ( i , 5 ) ;
1623: LD_VAR 0 2
1627: PPUSH
1628: LD_INT 5
1630: PPUSH
1631: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1635: LD_VAR 0 2
1639: PPUSH
1640: LD_INT 22
1642: PPUSH
1643: LD_INT 0
1645: PPUSH
1646: CALL_OW 49
// ComHold ( i ) ;
1650: LD_VAR 0 2
1654: PPUSH
1655: CALL_OW 140
// end ;
1659: GO 1620
1661: POP
1662: POP
// if not hasVodka then
1663: LD_EXP 4
1667: NOT
1668: IFFALSE 1727
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: LD_INT 22
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 22
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: LIST
1702: PPUSH
1703: CALL_OW 69
1707: PUSH
1708: FOR_IN
1709: IFFALSE 1725
// SetLives ( i , 500 ) ;
1711: LD_VAR 0 2
1715: PPUSH
1716: LD_INT 500
1718: PPUSH
1719: CALL_OW 234
1723: GO 1708
1725: POP
1726: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1727: LD_ADDR_VAR 0 2
1731: PUSH
1732: LD_INT 22
1734: PUSH
1735: LD_INT 4
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PPUSH
1742: CALL_OW 69
1746: PUSH
1747: FOR_IN
1748: IFFALSE 1764
// SetLives ( i , 500 ) ;
1750: LD_VAR 0 2
1754: PPUSH
1755: LD_INT 500
1757: PPUSH
1758: CALL_OW 234
1762: GO 1747
1764: POP
1765: POP
// end ;
1766: LD_VAR 0 1
1770: RET
// export function SetClassKaiaRevolver ; begin
1771: LD_INT 0
1773: PPUSH
// if not IsOk ( Kaia ) then
1774: LD_EXP 51
1778: PPUSH
1779: CALL_OW 302
1783: NOT
1784: IFFALSE 1788
// exit ;
1786: GO 1835
// repeat wait ( 1 ) ;
1788: LD_INT 1
1790: PPUSH
1791: CALL_OW 67
// ComWalk ( Kaia ) ;
1795: LD_EXP 51
1799: PPUSH
1800: CALL_OW 138
// until not Crawls ( Kaia ) ;
1804: LD_EXP 51
1808: PPUSH
1809: CALL_OW 318
1813: NOT
1814: IFFALSE 1788
// SetClass ( Kaia , class_revolver ) ;
1816: LD_EXP 51
1820: PPUSH
1821: LD_INT 34
1823: PPUSH
1824: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1828: LD_STRING ACH_REVOLVER
1830: PPUSH
1831: CALL_OW 543
// end ;
1835: LD_VAR 0 1
1839: RET
// export function SpawnHeikeAsRussian ; begin
1840: LD_INT 0
1842: PPUSH
// RemoveUnit ( Heike ) ;
1843: LD_EXP 46
1847: PPUSH
1848: CALL_OW 64
// heikeTmp := Heike ;
1852: LD_ADDR_EXP 62
1856: PUSH
1857: LD_EXP 46
1861: ST_TO_ADDR
// uc_side := 2 ;
1862: LD_ADDR_OWVAR 20
1866: PUSH
1867: LD_INT 2
1869: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1870: LD_ADDR_EXP 46
1874: PUSH
1875: LD_STRING HeikeRu
1877: PPUSH
1878: CALL_OW 25
1882: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1883: LD_EXP 62
1887: PPUSH
1888: LD_EXP 46
1892: PPUSH
1893: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1897: LD_EXP 46
1901: PPUSH
1902: LD_INT 165
1904: PPUSH
1905: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1909: LD_EXP 46
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: CALL_OW 336
// heikeAsRussian := true ;
1921: LD_ADDR_EXP 27
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1929: LD_STRING M1-laundry-out
1931: PPUSH
1932: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1936: LD_STRING ACH_HEIKERU
1938: PPUSH
1939: CALL_OW 543
// end ;
1943: LD_VAR 0 1
1947: RET
// export function SpawnGiviAsRussian ; begin
1948: LD_INT 0
1950: PPUSH
// RemoveUnit ( Givi ) ;
1951: LD_EXP 47
1955: PPUSH
1956: CALL_OW 64
// giviTmp := Givi ;
1960: LD_ADDR_EXP 63
1964: PUSH
1965: LD_EXP 47
1969: ST_TO_ADDR
// uc_side := 2 ;
1970: LD_ADDR_OWVAR 20
1974: PUSH
1975: LD_INT 2
1977: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1978: LD_ADDR_EXP 47
1982: PUSH
1983: LD_STRING GiviRu
1985: PPUSH
1986: CALL_OW 25
1990: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1991: LD_EXP 63
1995: PPUSH
1996: LD_EXP 47
2000: PPUSH
2001: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
2005: LD_EXP 47
2009: PPUSH
2010: LD_INT 165
2012: PPUSH
2013: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
2017: LD_EXP 47
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL_OW 336
// giviAsRussian := true ;
2029: LD_ADDR_EXP 28
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
2037: LD_STRING M1-laundry-out
2039: PPUSH
2040: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2044: LD_STRING ACH_GIVIRU
2046: PPUSH
2047: CALL_OW 543
// end ; end_of_file
2051: LD_VAR 0 1
2055: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2056: LD_INT 0
2058: PPUSH
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
// uc_side := 3 ;
2063: LD_ADDR_OWVAR 20
2067: PUSH
2068: LD_INT 3
2070: ST_TO_ADDR
// uc_nation := 3 ;
2071: LD_ADDR_OWVAR 21
2075: PUSH
2076: LD_INT 3
2078: ST_TO_ADDR
// SetBName ( ruMainBase , yagoda ) ;
2079: LD_INT 2
2081: PPUSH
2082: LD_STRING yagoda
2084: PPUSH
2085: CALL_OW 500
// SetBName ( ruKitchen , kitchen ) ;
2089: LD_INT 192
2091: PPUSH
2092: LD_STRING kitchen
2094: PPUSH
2095: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2099: LD_INT 165
2101: PPUSH
2102: LD_STRING laundry
2104: PPUSH
2105: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2109: LD_INT 54
2111: PPUSH
2112: LD_STRING adminSection
2114: PPUSH
2115: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2119: LD_ADDR_VAR 0 2
2123: PUSH
2124: LD_INT 21
2126: PUSH
2127: LD_INT 3
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PPUSH
2134: CALL_OW 69
2138: PUSH
2139: FOR_IN
2140: IFFALSE 2156
// SetBLevel ( i , 7 ) ;
2142: LD_VAR 0 2
2146: PPUSH
2147: LD_INT 7
2149: PPUSH
2150: CALL_OW 241
2154: GO 2139
2156: POP
2157: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: LD_INT 22
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 2
2175: PUSH
2176: LD_INT 30
2178: PUSH
2179: LD_INT 0
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 30
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PPUSH
2205: CALL_OW 69
2209: PUSH
2210: FOR_IN
2211: IFFALSE 2275
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2213: LD_VAR 0 2
2217: PPUSH
2218: CALL_OW 274
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: LD_INT 1000
2228: PPUSH
2229: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2233: LD_VAR 0 2
2237: PPUSH
2238: CALL_OW 274
2242: PPUSH
2243: LD_INT 2
2245: PPUSH
2246: LD_INT 1000
2248: PPUSH
2249: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2253: LD_VAR 0 2
2257: PPUSH
2258: CALL_OW 274
2262: PPUSH
2263: LD_INT 3
2265: PPUSH
2266: LD_INT 100
2268: PPUSH
2269: CALL_OW 277
// end ;
2273: GO 2210
2275: POP
2276: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 22
2284: PUSH
2285: LD_INT 3
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 30
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PPUSH
2306: CALL_OW 69
2310: PUSH
2311: FOR_IN
2312: IFFALSE 2346
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2314: LD_INT 0
2316: PPUSH
2317: LD_INT 5
2319: PUSH
2320: LD_OWVAR 67
2324: PLUS
2325: PPUSH
2326: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2330: CALL_OW 44
2334: PPUSH
2335: LD_VAR 0 2
2339: PPUSH
2340: CALL_OW 52
// end ;
2344: GO 2311
2346: POP
2347: POP
// for i := 1 to 2 do
2348: LD_ADDR_VAR 0 2
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_INT 2
2360: PUSH
2361: FOR_TO
2362: IFFALSE 2414
// begin PrepareMechanic ( false , 8 ) ;
2364: LD_INT 0
2366: PPUSH
2367: LD_INT 8
2369: PPUSH
2370: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2374: LD_ADDR_EXP 67
2378: PUSH
2379: LD_EXP 67
2383: PPUSH
2384: CALL_OW 44
2388: PPUSH
2389: CALL 68237 0 2
2393: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2394: LD_EXP 67
2398: PUSH
2399: LD_EXP 67
2403: ARRAY
2404: PPUSH
2405: LD_INT 61
2407: PPUSH
2408: CALL_OW 52
// end ;
2412: GO 2361
2414: POP
2415: POP
// PrepareMechanic ( sex_male , 8 ) ;
2416: LD_INT 1
2418: PPUSH
2419: LD_INT 8
2421: PPUSH
2422: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2426: LD_ADDR_EXP 68
2430: PUSH
2431: LD_EXP 68
2435: PPUSH
2436: CALL_OW 44
2440: PPUSH
2441: CALL 68237 0 2
2445: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2446: LD_EXP 68
2450: PUSH
2451: LD_EXP 68
2455: ARRAY
2456: PPUSH
2457: LD_INT 196
2459: PPUSH
2460: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2464: LD_INT 1
2466: PPUSH
2467: LD_INT 8
2469: PPUSH
2470: CALL_OW 383
// hc_name := Stiepan Simonov ;
2474: LD_ADDR_OWVAR 26
2478: PUSH
2479: LD_STRING Stiepan Simonov
2481: ST_TO_ADDR
// Stiopa := CreateHuman ;
2482: LD_ADDR_EXP 69
2486: PUSH
2487: CALL_OW 44
2491: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2492: LD_INT 2
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 383
// hc_name := Laura Dragunov ;
2502: LD_ADDR_OWVAR 26
2506: PUSH
2507: LD_STRING Laura Dragunov
2509: ST_TO_ADDR
// Laura := CreateHuman ;
2510: LD_ADDR_EXP 70
2514: PUSH
2515: CALL_OW 44
2519: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2520: LD_EXP 70
2524: PPUSH
2525: LD_INT 196
2527: PPUSH
2528: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2532: LD_INT 1
2534: PPUSH
2535: LD_INT 8
2537: PPUSH
2538: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2542: LD_ADDR_EXP 67
2546: PUSH
2547: LD_EXP 67
2551: PPUSH
2552: LD_INT 1
2554: PPUSH
2555: CALL_OW 44
2559: PPUSH
2560: CALL_OW 2
2564: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2565: LD_EXP 67
2569: PUSH
2570: LD_INT 1
2572: ARRAY
2573: PPUSH
2574: LD_INT 61
2576: PPUSH
2577: CALL_OW 52
// hc_sex := sex_male ;
2581: LD_ADDR_OWVAR 27
2585: PUSH
2586: LD_INT 1
2588: ST_TO_ADDR
// hc_name := Muchin ;
2589: LD_ADDR_OWVAR 26
2593: PUSH
2594: LD_STRING Muchin
2596: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2597: LD_ADDR_OWVAR 33
2601: PUSH
2602: LD_STRING SecondCharsGal
2604: ST_TO_ADDR
// hc_face_number := 87 ;
2605: LD_ADDR_OWVAR 34
2609: PUSH
2610: LD_INT 87
2612: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 2 , 6 ] ;
2613: LD_ADDR_OWVAR 31
2617: PUSH
2618: LD_INT 8
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_INT 2
2626: PUSH
2627: LD_INT 6
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2636: LD_ADDR_OWVAR 29
2640: PUSH
2641: LD_INT 13
2643: PUSH
2644: LD_INT 13
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: ST_TO_ADDR
// hc_class := class_soldier ;
2651: LD_ADDR_OWVAR 28
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2659: LD_ADDR_EXP 66
2663: PUSH
2664: CALL_OW 44
2668: ST_TO_ADDR
// InitHC_All ( ) ;
2669: CALL_OW 584
// if Difficulty > 1 then
2673: LD_OWVAR 67
2677: PUSH
2678: LD_INT 1
2680: GREATER
2681: IFFALSE 2801
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2683: LD_ADDR_VAR 0 2
2687: PUSH
2688: DOUBLE
2689: LD_INT 1
2691: DEC
2692: ST_TO_ADDR
2693: LD_INT 3
2695: PUSH
2696: LD_INT 4
2698: PUSH
2699: LD_INT 5
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PUSH
2707: LD_OWVAR 67
2711: PUSH
2712: LD_INT 1
2714: PLUS
2715: ARRAY
2716: PUSH
2717: FOR_TO
2718: IFFALSE 2799
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2720: LD_INT 0
2722: PPUSH
2723: LD_INT 5
2725: PUSH
2726: LD_INT 6
2728: PUSH
2729: LD_INT 7
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: LIST
2736: PUSH
2737: LD_OWVAR 67
2741: PUSH
2742: LD_INT 1
2744: PLUS
2745: ARRAY
2746: PPUSH
2747: CALL_OW 381
// un := CreateHuman ;
2751: LD_ADDR_VAR 0 4
2755: PUSH
2756: CALL_OW 44
2760: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2761: LD_VAR 0 4
2765: PPUSH
2766: LD_INT 62
2768: PUSH
2769: LD_INT 63
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_VAR 0 2
2780: PUSH
2781: LD_INT 2
2783: MOD
2784: PUSH
2785: LD_INT 1
2787: PLUS
2788: ARRAY
2789: PPUSH
2790: LD_INT 0
2792: PPUSH
2793: CALL_OW 49
// end ;
2797: GO 2717
2799: POP
2800: POP
// end ; uc_side := 6 ;
2801: LD_ADDR_OWVAR 20
2805: PUSH
2806: LD_INT 6
2808: ST_TO_ADDR
// uc_nation := 3 ;
2809: LD_ADDR_OWVAR 21
2813: PUSH
2814: LD_INT 3
2816: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2817: LD_ADDR_VAR 0 5
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: LD_INT 15
2827: PUSH
2828: LD_INT 48
2830: PUSH
2831: LD_INT 24
2833: PUSH
2834: LD_INT 149
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: LIST
2843: ST_TO_ADDR
// for i in tmp do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: LD_VAR 0 5
2853: PUSH
2854: FOR_IN
2855: IFFALSE 2903
// begin for j := 1 to 2 do
2857: LD_ADDR_VAR 0 3
2861: PUSH
2862: DOUBLE
2863: LD_INT 1
2865: DEC
2866: ST_TO_ADDR
2867: LD_INT 2
2869: PUSH
2870: FOR_TO
2871: IFFALSE 2899
// begin PrepareSoldier ( false , 7 ) ;
2873: LD_INT 0
2875: PPUSH
2876: LD_INT 7
2878: PPUSH
2879: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2883: CALL_OW 44
2887: PPUSH
2888: LD_VAR 0 2
2892: PPUSH
2893: CALL_OW 52
// end ;
2897: GO 2870
2899: POP
2900: POP
// end ;
2901: GO 2854
2903: POP
2904: POP
// end ;
2905: LD_VAR 0 1
2909: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2910: LD_INT 0
2912: PPUSH
2913: PPUSH
2914: PPUSH
2915: PPUSH
// uc_side := 3 ;
2916: LD_ADDR_OWVAR 20
2920: PUSH
2921: LD_INT 3
2923: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2924: LD_ADDR_OWVAR 21
2928: PUSH
2929: LD_INT 1
2931: PPUSH
2932: LD_INT 3
2934: PPUSH
2935: CALL_OW 12
2939: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2940: LD_ADDR_VAR 0 4
2944: PUSH
2945: LD_INT 5
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 517
2955: ST_TO_ADDR
// for i := 1 to 3 do
2956: LD_ADDR_VAR 0 2
2960: PUSH
2961: DOUBLE
2962: LD_INT 1
2964: DEC
2965: ST_TO_ADDR
2966: LD_INT 3
2968: PUSH
2969: FOR_TO
2970: IFFALSE 3039
// begin PrepareHuman ( false , class_prison , 0 ) ;
2972: LD_INT 0
2974: PPUSH
2975: LD_INT 33
2977: PPUSH
2978: LD_INT 0
2980: PPUSH
2981: CALL_OW 380
// un := CreateHuman ;
2985: LD_ADDR_VAR 0 3
2989: PUSH
2990: CALL_OW 44
2994: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2995: LD_VAR 0 3
2999: PPUSH
3000: LD_VAR 0 4
3004: PUSH
3005: LD_INT 1
3007: ARRAY
3008: PUSH
3009: LD_VAR 0 2
3013: ARRAY
3014: PPUSH
3015: LD_VAR 0 4
3019: PUSH
3020: LD_INT 2
3022: ARRAY
3023: PUSH
3024: LD_VAR 0 2
3028: ARRAY
3029: PPUSH
3030: LD_INT 1
3032: PPUSH
3033: CALL_OW 601
// end ;
3037: GO 2969
3039: POP
3040: POP
// end ;
3041: LD_VAR 0 1
3045: RET
// export function PrepareFirstScene ; var i , un ; begin
3046: LD_INT 0
3048: PPUSH
3049: PPUSH
3050: PPUSH
// uc_side := 4 ;
3051: LD_ADDR_OWVAR 20
3055: PUSH
3056: LD_INT 4
3058: ST_TO_ADDR
// uc_nation := 1 ;
3059: LD_ADDR_OWVAR 21
3063: PUSH
3064: LD_INT 1
3066: ST_TO_ADDR
// PrepareHuman ( false , class_prison , 0 ) ;
3067: LD_INT 0
3069: PPUSH
3070: LD_INT 33
3072: PPUSH
3073: LD_INT 0
3075: PPUSH
3076: CALL_OW 380
// for i := 1 to 2 do
3080: LD_ADDR_VAR 0 2
3084: PUSH
3085: DOUBLE
3086: LD_INT 1
3088: DEC
3089: ST_TO_ADDR
3090: LD_INT 2
3092: PUSH
3093: FOR_TO
3094: IFFALSE 3159
// begin un := CreateHuman ;
3096: LD_ADDR_VAR 0 3
3100: PUSH
3101: CALL_OW 44
3105: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_INT 1
3113: PPUSH
3114: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3118: LD_VAR 0 3
3122: PPUSH
3123: LD_INT 6
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3133: LD_VAR 0 3
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: CALL 71559 0 2
// SetLives ( un , 300 ) ;
3145: LD_VAR 0 3
3149: PPUSH
3150: LD_INT 300
3152: PPUSH
3153: CALL_OW 234
// end ;
3157: GO 3093
3159: POP
3160: POP
// uc_side := 3 ;
3161: LD_ADDR_OWVAR 20
3165: PUSH
3166: LD_INT 3
3168: ST_TO_ADDR
// uc_nation := 3 ;
3169: LD_ADDR_OWVAR 21
3173: PUSH
3174: LD_INT 3
3176: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3177: LD_INT 1
3179: PPUSH
3180: LD_INT 5
3182: PPUSH
3183: CALL_OW 381
// for i := 1 to 3 do
3187: LD_ADDR_VAR 0 2
3191: PUSH
3192: DOUBLE
3193: LD_INT 1
3195: DEC
3196: ST_TO_ADDR
3197: LD_INT 3
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3274
// begin un := CreateHuman ;
3203: LD_ADDR_VAR 0 3
3207: PUSH
3208: CALL_OW 44
3212: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3213: LD_ADDR_EXP 64
3217: PUSH
3218: LD_EXP 64
3222: PPUSH
3223: LD_VAR 0 3
3227: PPUSH
3228: CALL 68237 0 2
3232: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3233: LD_VAR 0 3
3237: PPUSH
3238: LD_INT 4
3240: PPUSH
3241: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3245: LD_VAR 0 3
3249: PPUSH
3250: LD_INT 7
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3260: LD_VAR 0 3
3264: PPUSH
3265: LD_INT 4
3267: PPUSH
3268: CALL 71559 0 2
// end ;
3272: GO 3200
3274: POP
3275: POP
// ruCommisar := CreateHuman ;
3276: LD_ADDR_EXP 65
3280: PUSH
3281: CALL_OW 44
3285: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3286: LD_EXP 65
3290: PPUSH
3291: LD_INT 124
3293: PPUSH
3294: LD_INT 37
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3304: LD_EXP 65
3308: PPUSH
3309: LD_INT 3
3311: PPUSH
3312: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3316: LD_EXP 65
3320: PPUSH
3321: LD_INT 3
3323: PPUSH
3324: CALL 71559 0 2
// end ;
3328: LD_VAR 0 1
3332: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
// uc_side := 6 ;
3339: LD_ADDR_OWVAR 20
3343: PUSH
3344: LD_INT 6
3346: ST_TO_ADDR
// uc_nation := 3 ;
3347: LD_ADDR_OWVAR 21
3351: PUSH
3352: LD_INT 3
3354: ST_TO_ADDR
// ruPatrol := [ ] ;
3355: LD_ADDR_EXP 71
3359: PUSH
3360: EMPTY
3361: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3362: LD_ADDR_VAR 0 4
3366: PUSH
3367: LD_INT 26
3369: PUSH
3370: LD_INT 30
3372: PUSH
3373: LD_INT 39
3375: PUSH
3376: LD_INT 43
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: ST_TO_ADDR
// for i := 1 to spawn do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: DOUBLE
3391: LD_INT 1
3393: DEC
3394: ST_TO_ADDR
3395: LD_VAR 0 4
3399: PUSH
3400: FOR_TO
3401: IFFALSE 3512
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3403: LD_INT 0
3405: PPUSH
3406: LD_INT 4
3408: PUSH
3409: LD_INT 5
3411: PUSH
3412: LD_INT 6
3414: PUSH
3415: LD_INT 7
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: PUSH
3424: LD_OWVAR 67
3428: ARRAY
3429: PPUSH
3430: CALL_OW 381
// un := CreateHuman ;
3434: LD_ADDR_VAR 0 3
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// SetTag ( un , i ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_VAR 0 2
3453: PPUSH
3454: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3458: LD_ADDR_EXP 71
3462: PUSH
3463: LD_EXP 71
3467: PPUSH
3468: LD_VAR 0 3
3472: PPUSH
3473: CALL 68237 0 2
3477: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_VAR 0 4
3487: PUSH
3488: LD_VAR 0 2
3492: ARRAY
3493: PPUSH
3494: LD_INT 0
3496: PPUSH
3497: CALL_OW 49
// ComHold ( un ) ;
3501: LD_VAR 0 3
3505: PPUSH
3506: CALL_OW 140
// end ;
3510: GO 3400
3512: POP
3513: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3514: LD_ADDR_VAR 0 4
3518: PUSH
3519: LD_INT 48
3521: PUSH
3522: LD_INT 49
3524: PUSH
3525: LD_INT 50
3527: PUSH
3528: LD_INT 51
3530: PUSH
3531: LD_INT 52
3533: PUSH
3534: LD_INT 53
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: ST_TO_ADDR
// for i := 1 to spawn do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_VAR 0 4
3559: PUSH
3560: FOR_TO
3561: IFFALSE 3670
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3563: LD_INT 0
3565: PPUSH
3566: LD_INT 4
3568: PUSH
3569: LD_INT 5
3571: PUSH
3572: LD_INT 6
3574: PUSH
3575: LD_INT 7
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: PUSH
3584: LD_OWVAR 67
3588: ARRAY
3589: PPUSH
3590: CALL_OW 381
// un := CreateHuman ;
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: CALL_OW 44
3603: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3604: LD_VAR 0 3
3608: PPUSH
3609: LD_INT 0
3611: PPUSH
3612: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3616: LD_ADDR_EXP 71
3620: PUSH
3621: LD_EXP 71
3625: PPUSH
3626: LD_VAR 0 3
3630: PPUSH
3631: CALL 68237 0 2
3635: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3636: LD_VAR 0 3
3640: PPUSH
3641: LD_VAR 0 4
3645: PUSH
3646: LD_VAR 0 2
3650: ARRAY
3651: PPUSH
3652: LD_INT 0
3654: PPUSH
3655: CALL_OW 49
// ComHold ( un ) ;
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 140
// end ;
3668: GO 3560
3670: POP
3671: POP
// end ;
3672: LD_VAR 0 1
3676: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3677: LD_INT 0
3679: PPUSH
3680: PPUSH
3681: PPUSH
3682: PPUSH
// uc_side := 6 ;
3683: LD_ADDR_OWVAR 20
3687: PUSH
3688: LD_INT 6
3690: ST_TO_ADDR
// uc_nation := nation_russian ;
3691: LD_ADDR_OWVAR 21
3695: PUSH
3696: LD_INT 3
3698: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3699: LD_ADDR_VAR 0 4
3703: PUSH
3704: LD_INT 54
3706: PUSH
3707: LD_INT 55
3709: PUSH
3710: LD_INT 56
3712: PUSH
3713: LD_INT 57
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: ST_TO_ADDR
// for i := 1 to spawn do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 3847
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3740: LD_INT 0
3742: PPUSH
3743: LD_INT 4
3745: PUSH
3746: LD_INT 5
3748: PUSH
3749: LD_INT 6
3751: PUSH
3752: LD_INT 7
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: PUSH
3761: LD_OWVAR 67
3765: ARRAY
3766: PPUSH
3767: CALL_OW 381
// un := CreateHuman ;
3771: LD_ADDR_VAR 0 3
3775: PUSH
3776: CALL_OW 44
3780: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3781: LD_VAR 0 3
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3793: LD_ADDR_EXP 71
3797: PUSH
3798: LD_EXP 71
3802: PPUSH
3803: LD_VAR 0 3
3807: PPUSH
3808: CALL 68237 0 2
3812: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3813: LD_VAR 0 3
3817: PPUSH
3818: LD_VAR 0 4
3822: PUSH
3823: LD_VAR 0 2
3827: ARRAY
3828: PPUSH
3829: LD_INT 0
3831: PPUSH
3832: CALL_OW 49
// ComHold ( un ) ;
3836: LD_VAR 0 3
3840: PPUSH
3841: CALL_OW 140
// end ;
3845: GO 3737
3847: POP
3848: POP
// end ; end_of_file
3849: LD_VAR 0 1
3853: RET
// export function Action ; var speaker , i , tmp ; begin
3854: LD_INT 0
3856: PPUSH
3857: PPUSH
3858: PPUSH
3859: PPUSH
// Video ( true ) ;
3860: LD_INT 1
3862: PPUSH
3863: CALL 68209 0 1
// hasNormalScene := Kaia or Givi ;
3867: LD_ADDR_EXP 5
3871: PUSH
3872: LD_EXP 51
3876: IFTRUE 3884
3878: PUSH
3879: LD_EXP 47
3883: OR
3884: ST_TO_ADDR
// if hasNormalScene then
3885: LD_EXP 5
3889: IFFALSE 4130
// begin for i in americanSquad do
3891: LD_ADDR_VAR 0 3
3895: PUSH
3896: LD_EXP 58
3900: PUSH
3901: FOR_IN
3902: IFFALSE 3948
// begin SetClass ( i , class_prison ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 33
3911: PPUSH
3912: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_INT 78
3923: PPUSH
3924: LD_INT 16
3926: PPUSH
3927: LD_INT 5
3929: PPUSH
3930: LD_INT 0
3932: PPUSH
3933: CALL_OW 50
// ComHold ( i ) ;
3937: LD_VAR 0 3
3941: PPUSH
3942: CALL_OW 140
// end ;
3946: GO 3901
3948: POP
3949: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3950: LD_ADDR_VAR 0 4
3954: PUSH
3955: LD_EXP 48
3959: PUSH
3960: LD_EXP 49
3964: PUSH
3965: LD_EXP 50
3969: PUSH
3970: LD_EXP 51
3974: PUSH
3975: LD_EXP 52
3979: PUSH
3980: LD_EXP 53
3984: PUSH
3985: LD_EXP 54
3989: PUSH
3990: LD_EXP 55
3994: PUSH
3995: LD_EXP 47
3999: PUSH
4000: LD_EXP 56
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: PUSH
4017: LD_EXP 57
4021: UNION
4022: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
4023: LD_EXP 46
4027: PPUSH
4028: LD_INT 33
4030: PPUSH
4031: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
4035: LD_EXP 46
4039: PPUSH
4040: LD_INT 117
4042: PPUSH
4043: LD_INT 24
4045: PPUSH
4046: LD_INT 3
4048: PPUSH
4049: LD_INT 0
4051: PPUSH
4052: CALL 70397 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
4056: LD_EXP 46
4060: PPUSH
4061: LD_INT 123
4063: PPUSH
4064: LD_INT 39
4066: PPUSH
4067: CALL_OW 118
// for i in tmp do
4071: LD_ADDR_VAR 0 3
4075: PUSH
4076: LD_VAR 0 4
4080: PUSH
4081: FOR_IN
4082: IFFALSE 4128
// begin SetClass ( i , class_prison ) ;
4084: LD_VAR 0 3
4088: PPUSH
4089: LD_INT 33
4091: PPUSH
4092: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4096: LD_VAR 0 3
4100: PPUSH
4101: LD_INT 3
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4111: LD_VAR 0 3
4115: PPUSH
4116: LD_INT 113
4118: PPUSH
4119: LD_INT 16
4121: PPUSH
4122: CALL_OW 118
// end ;
4126: GO 4081
4128: POP
4129: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4130: LD_INT 124
4132: PPUSH
4133: LD_INT 39
4135: PPUSH
4136: CALL_OW 86
// PrepareDeadBodies ;
4140: CALL 2910 0 0
// PrepareFirstScene ;
4144: CALL 3046 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4148: LD_INT 152
4150: PPUSH
4151: LD_INT 65
4153: PPUSH
4154: LD_INT 2
4156: PPUSH
4157: LD_INT 70
4159: NEG
4160: PPUSH
4161: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4165: LD_INT 152
4167: PPUSH
4168: LD_INT 65
4170: PPUSH
4171: LD_INT 2
4173: PPUSH
4174: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4178: LD_INT 122
4180: PPUSH
4181: LD_INT 40
4183: PPUSH
4184: LD_INT 2
4186: PPUSH
4187: LD_INT 8
4189: NEG
4190: PPUSH
4191: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4195: LD_INT 124
4197: PPUSH
4198: LD_INT 37
4200: PPUSH
4201: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4205: LD_EXP 65
4209: PPUSH
4210: LD_STRING DRum-Execution-1
4212: PPUSH
4213: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4217: LD_EXP 65
4221: PPUSH
4222: LD_STRING DRum-Execution-2
4224: PPUSH
4225: CALL_OW 88
// wait ( 0 0$01 ) ;
4229: LD_INT 35
4231: PPUSH
4232: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4236: LD_EXP 65
4240: PPUSH
4241: LD_STRING DRum-Execution-3
4243: PPUSH
4244: CALL_OW 88
// wait ( 0 0$1 ) ;
4248: LD_INT 35
4250: PPUSH
4251: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4255: LD_EXP 65
4259: PPUSH
4260: LD_STRING DRum-Execution-4
4262: PPUSH
4263: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4267: LD_EXP 64
4271: PUSH
4272: LD_INT 1
4274: ARRAY
4275: PPUSH
4276: LD_INT 122
4278: PPUSH
4279: LD_INT 39
4281: PPUSH
4282: CALL_OW 428
4286: PPUSH
4287: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4291: LD_EXP 64
4295: PUSH
4296: LD_INT 2
4298: ARRAY
4299: PPUSH
4300: LD_INT 123
4302: PPUSH
4303: LD_INT 41
4305: PPUSH
4306: CALL_OW 428
4310: PPUSH
4311: CALL_OW 115
// AddComHold ( russianKillers ) ;
4315: LD_EXP 64
4319: PPUSH
4320: CALL_OW 200
// wait ( 0 0$1 ) ;
4324: LD_INT 35
4326: PPUSH
4327: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4331: LD_INT 122
4333: PPUSH
4334: LD_INT 40
4336: PPUSH
4337: LD_INT 2
4339: PPUSH
4340: CALL_OW 331
// for i in russianKillers union ruCommisar do
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: LD_EXP 64
4353: PUSH
4354: LD_EXP 65
4358: UNION
4359: PUSH
4360: FOR_IN
4361: IFFALSE 4374
// RemoveUnit ( i ) ;
4363: LD_VAR 0 3
4367: PPUSH
4368: CALL_OW 64
4372: GO 4360
4374: POP
4375: POP
// if hasNormalScene then
4376: LD_EXP 5
4380: IFFALSE 4388
// ActionNormal else
4382: CALL 4397 0 0
4386: GO 4392
// ActionAdditional ;
4388: CALL 6223 0 0
// end ;
4392: LD_VAR 0 1
4396: RET
// function ActionNormal ; var i , tmp ; begin
4397: LD_INT 0
4399: PPUSH
4400: PPUSH
4401: PPUSH
// CenterNowOnUnits ( Heike ) ;
4402: LD_EXP 46
4406: PPUSH
4407: CALL_OW 87
// wait ( 0 0$1 ) ;
4411: LD_INT 35
4413: PPUSH
4414: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4418: LD_EXP 46
4422: PPUSH
4423: LD_INT 115
4425: PPUSH
4426: LD_INT 19
4428: PPUSH
4429: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4433: LD_EXP 46
4437: PPUSH
4438: LD_INT 113
4440: PPUSH
4441: LD_INT 16
4443: PPUSH
4444: CALL_OW 178
// wait ( 0 0$2 ) ;
4448: LD_INT 70
4450: PPUSH
4451: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4455: LD_EXP 46
4459: PPUSH
4460: LD_STRING DH-Conspiracy-1
4462: PPUSH
4463: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4467: LD_EXP 51
4471: PPUSH
4472: LD_STRING DK-Conspiracy-2
4474: PPUSH
4475: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4479: LD_EXP 47
4483: PPUSH
4484: LD_STRING DG-Conspiracy-3
4486: PPUSH
4487: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4491: LD_EXP 47
4495: PPUSH
4496: LD_STRING DG-Conspiracy-4
4498: PPUSH
4499: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4503: LD_EXP 46
4507: PPUSH
4508: LD_STRING DH-Conspiracy-5
4510: PPUSH
4511: CALL_OW 88
// if IsOk ( Kamil ) then
4515: LD_EXP 50
4519: PPUSH
4520: CALL_OW 302
4524: IFFALSE 4582
// begin hasVodka := true ;
4526: LD_ADDR_EXP 4
4530: PUSH
4531: LD_INT 1
4533: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4534: LD_EXP 50
4538: PPUSH
4539: LD_STRING DKam-Conspiracy-6
4541: PPUSH
4542: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4546: LD_EXP 50
4550: PPUSH
4551: LD_STRING DKam-Conspiracy-7
4553: PPUSH
4554: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4558: LD_EXP 50
4562: PPUSH
4563: LD_STRING DKam-Conspiracy-8
4565: PPUSH
4566: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4570: LD_EXP 50
4574: PPUSH
4575: LD_STRING DKam-Conspiracy-9
4577: PPUSH
4578: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4582: LD_EXP 52
4586: PPUSH
4587: CALL_OW 302
4591: IFFALSE 4772
// begin americanContact := true ;
4593: LD_ADDR_EXP 10
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4601: LD_STRING M1-american
4603: PPUSH
4604: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4608: LD_EXP 52
4612: PPUSH
4613: LD_STRING DS-Conspiracy-10
4615: PPUSH
4616: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-11 ) ;
4620: LD_EXP 53
4624: PPUSH
4625: LD_STRING DMar-Conspiracy-11
4627: PPUSH
4628: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4632: LD_EXP 52
4636: PPUSH
4637: LD_STRING DS-Conspiracy-12
4639: PPUSH
4640: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4644: LD_INT 84
4646: PPUSH
4647: LD_INT 19
4649: PPUSH
4650: LD_INT 105
4652: PPUSH
4653: CALL 20731 0 3
// if johnnySaved then
4657: LD_EXP 3
4661: IFFALSE 4701
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4663: LD_EXP 52
4667: PPUSH
4668: LD_STRING DS-Conspiracy-13
4670: PPUSH
4671: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4675: LD_EXP 46
4679: PPUSH
4680: LD_STRING DH-Conspiracy-14
4682: PPUSH
4683: CALL_OW 88
// Say ( Heike , DH-Conspiracy-15 ) ;
4687: LD_EXP 46
4691: PPUSH
4692: LD_STRING DH-Conspiracy-15
4694: PPUSH
4695: CALL_OW 88
// end else
4699: GO 4737
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4701: LD_EXP 52
4705: PPUSH
4706: LD_STRING DS-Conspiracy-a-13
4708: PPUSH
4709: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4713: LD_EXP 46
4717: PPUSH
4718: LD_STRING DH-Conspiracy-a-14
4720: PPUSH
4721: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4725: LD_EXP 46
4729: PPUSH
4730: LD_STRING DH-Conspiracy-a-15
4732: PPUSH
4733: CALL_OW 88
// end ; if IsOk ( Givi ) then
4737: LD_EXP 47
4741: PPUSH
4742: CALL_OW 302
4746: IFFALSE 4772
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4748: LD_EXP 47
4752: PPUSH
4753: LD_STRING DG-Conspiracy-a-16
4755: PPUSH
4756: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4760: LD_EXP 46
4764: PPUSH
4765: LD_STRING DH-Conspiracy-a-17
4767: PPUSH
4768: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4772: LD_EXP 46
4776: PPUSH
4777: LD_STRING DH-Conspiracy-16
4779: PPUSH
4780: CALL_OW 88
// if IsOk ( Givi ) then
4784: LD_EXP 47
4788: PPUSH
4789: CALL_OW 302
4793: IFFALSE 5065
// begin hasStimDrugs := true ;
4795: LD_ADDR_EXP 9
4799: PUSH
4800: LD_INT 1
4802: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4803: LD_STRING M1-drugs
4805: PPUSH
4806: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4810: LD_EXP 47
4814: PPUSH
4815: LD_STRING DG-Conspiracy-17
4817: PPUSH
4818: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4822: LD_INT 162
4824: PPUSH
4825: LD_INT 2
4827: PPUSH
4828: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4832: LD_INT 194
4834: PPUSH
4835: LD_INT 98
4837: PPUSH
4838: LD_INT 105
4840: PPUSH
4841: CALL 20731 0 3
// SetSide ( drugsLab , 3 ) ;
4845: LD_INT 162
4847: PPUSH
4848: LD_INT 3
4850: PPUSH
4851: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4855: LD_EXP 47
4859: PPUSH
4860: LD_STRING DG-Conspiracy-18
4862: PPUSH
4863: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4867: LD_EXP 47
4871: PPUSH
4872: LD_STRING DG-Conspiracy-19
4874: PPUSH
4875: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4879: LD_EXP 47
4883: PPUSH
4884: LD_STRING DG-Conspiracy-20
4886: PPUSH
4887: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4891: LD_EXP 46
4895: PPUSH
4896: LD_STRING DH-Conspiracy-21
4898: PPUSH
4899: CALL_OW 88
// if IsOk ( Kaia ) then
4903: LD_EXP 51
4907: PPUSH
4908: CALL_OW 302
4912: IFFALSE 4986
// begin hasExplosions := true ;
4914: LD_ADDR_EXP 6
4918: PUSH
4919: LD_INT 1
4921: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4922: LD_STRING M1-explosive
4924: PPUSH
4925: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4929: LD_EXP 51
4933: PPUSH
4934: LD_STRING DK-Conspiracy-22
4936: PPUSH
4937: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4941: LD_INT 73
4943: PPUSH
4944: LD_INT 2
4946: PPUSH
4947: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4951: LD_INT 170
4953: PPUSH
4954: LD_INT 104
4956: PPUSH
4957: LD_INT 105
4959: PPUSH
4960: CALL 20731 0 3
// SetSide ( barExplosion , 3 ) ;
4964: LD_INT 73
4966: PPUSH
4967: LD_INT 3
4969: PPUSH
4970: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4974: LD_EXP 51
4978: PPUSH
4979: LD_STRING DK-Conspiracy-23
4981: PPUSH
4982: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4986: LD_EXP 54
4990: PPUSH
4991: CALL_OW 302
4995: IFFALSE 5065
// begin hasExplosionsInFactory := true ;
4997: LD_ADDR_EXP 7
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
5005: LD_EXP 54
5009: PPUSH
5010: LD_STRING DO-Conspiracy-24
5012: PPUSH
5013: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
5017: LD_INT 175
5019: PPUSH
5020: LD_INT 54
5022: PPUSH
5023: LD_INT 70
5025: PPUSH
5026: CALL 20731 0 3
// if IsOk ( Markov ) then
5030: LD_EXP 53
5034: PPUSH
5035: CALL_OW 302
5039: IFFALSE 5065
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
5041: LD_EXP 53
5045: PPUSH
5046: LD_STRING DMar-Conspiracy-25
5048: PPUSH
5049: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
5053: LD_EXP 53
5057: PPUSH
5058: LD_STRING DMar-Conspiracy-26
5060: PPUSH
5061: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
5065: LD_EXP 55
5069: PPUSH
5070: CALL_OW 302
5074: IFFALSE 5087
5076: PUSH
5077: LD_EXP 51
5081: PPUSH
5082: CALL_OW 302
5086: AND
5087: IFFALSE 5549
// begin hasWeapons := true ;
5089: LD_ADDR_EXP 19
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// hasRevolver := true ;
5097: LD_ADDR_EXP 8
5101: PUSH
5102: LD_INT 1
5104: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5105: LD_STRING M1-weapons
5107: PPUSH
5108: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5112: LD_EXP 55
5116: PPUSH
5117: LD_STRING DKs-Conspiracy-27
5119: PPUSH
5120: CALL_OW 88
// if IsOk ( Givi ) then
5124: LD_EXP 47
5128: PPUSH
5129: CALL_OW 302
5133: IFFALSE 5149
// Say ( Givi , DG-Conspiracy-28 ) else
5135: LD_EXP 47
5139: PPUSH
5140: LD_STRING DG-Conspiracy-28
5142: PPUSH
5143: CALL_OW 88
5147: GO 5214
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5149: LD_EXP 57
5153: PPUSH
5154: LD_INT 26
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PPUSH
5164: CALL_OW 72
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: PPUSH
5173: LD_STRING DArm-Conspiracy-a-28
5175: PPUSH
5176: CALL_OW 88
5180: NOT
5181: IFFALSE 5214
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5183: LD_EXP 57
5187: PPUSH
5188: LD_INT 26
5190: PUSH
5191: LD_INT 2
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: CALL_OW 72
5202: PUSH
5203: LD_INT 1
5205: ARRAY
5206: PPUSH
5207: LD_STRING DArf-Conspiracy-a-28
5209: PPUSH
5210: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5214: LD_EXP 55
5218: PPUSH
5219: LD_STRING DKs-Conspiracy-29
5221: PPUSH
5222: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5226: LD_INT 192
5228: PPUSH
5229: LD_INT 122
5231: PPUSH
5232: LD_INT 105
5234: PPUSH
5235: CALL 20731 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5239: LD_EXP 55
5243: PPUSH
5244: LD_STRING DKs-Conspiracy-30
5246: PPUSH
5247: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5251: LD_EXP 51
5255: PPUSH
5256: LD_STRING DK-Conspiracy-31
5258: PPUSH
5259: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5263: LD_EXP 53
5267: PPUSH
5268: LD_STRING DMar-Conspiracy-33
5270: PPUSH
5271: CALL_OW 88
5275: NOT
5276: IFFALSE 5284
5278: PUSH
5279: LD_EXP 57
5283: AND
5284: IFFALSE 5351
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5286: LD_EXP 57
5290: PPUSH
5291: LD_INT 26
5293: PUSH
5294: LD_INT 1
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PPUSH
5301: CALL_OW 72
5305: PUSH
5306: LD_INT 1
5308: ARRAY
5309: PPUSH
5310: LD_STRING DArm-Conspiracy-a-34
5312: PPUSH
5313: CALL_OW 88
5317: NOT
5318: IFFALSE 5351
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5320: LD_EXP 57
5324: PPUSH
5325: LD_INT 26
5327: PUSH
5328: LD_INT 2
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 72
5339: PUSH
5340: LD_INT 1
5342: ARRAY
5343: PPUSH
5344: LD_STRING DArf-Conspiracy-a-34
5346: PPUSH
5347: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5351: LD_EXP 51
5355: PPUSH
5356: LD_STRING DK-Conspiracy-34
5358: PPUSH
5359: CALL_OW 88
// if IsOk ( Markov ) then
5363: LD_EXP 53
5367: PPUSH
5368: CALL_OW 302
5372: IFFALSE 5457
// begin hasSniperRifle := true ;
5374: LD_ADDR_EXP 11
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5382: LD_EXP 53
5386: PPUSH
5387: LD_STRING DMar-Conspiracy-35
5389: PPUSH
5390: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5394: LD_EXP 51
5398: PPUSH
5399: LD_STRING DK-Conspiracy-36
5401: PPUSH
5402: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5406: LD_EXP 53
5410: PPUSH
5411: LD_STRING DMar-Conspiracy-37
5413: PPUSH
5414: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5418: LD_EXP 53
5422: PPUSH
5423: LD_STRING DMar-Conspiracy-38
5425: PPUSH
5426: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5430: LD_INT 137
5432: PPUSH
5433: LD_INT 98
5435: PPUSH
5436: LD_INT 105
5438: PPUSH
5439: CALL 20731 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5443: LD_EXP 53
5447: PPUSH
5448: LD_STRING DMar-Conspiracy-39
5450: PPUSH
5451: CALL_OW 88
// end else
5455: GO 5549
// if heikeSecondSquad then
5457: LD_EXP 57
5461: IFFALSE 5549
// begin hasSniperRifle := true ;
5463: LD_ADDR_EXP 11
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5471: LD_INT 137
5473: PPUSH
5474: LD_INT 98
5476: PPUSH
5477: LD_INT 105
5479: PPUSH
5480: CALL 20731 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5484: LD_EXP 57
5488: PPUSH
5489: LD_INT 26
5491: PUSH
5492: LD_INT 1
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PPUSH
5499: CALL_OW 72
5503: PUSH
5504: LD_INT 1
5506: ARRAY
5507: PPUSH
5508: LD_STRING DArm-Conspiracy-a-35
5510: PPUSH
5511: CALL_OW 88
5515: NOT
5516: IFFALSE 5549
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5518: LD_EXP 57
5522: PPUSH
5523: LD_INT 26
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 72
5537: PUSH
5538: LD_INT 1
5540: ARRAY
5541: PPUSH
5542: LD_STRING DArf-Conspiracy-a-35
5544: PPUSH
5545: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5549: LD_EXP 46
5553: PPUSH
5554: LD_STRING DH-Conspiracy-40
5556: PPUSH
5557: CALL_OW 88
// if IsOk ( Mike ) then
5561: LD_EXP 48
5565: PPUSH
5566: CALL_OW 302
5570: IFFALSE 5629
// begin hasScout := true ;
5572: LD_ADDR_EXP 12
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5580: LD_EXP 48
5584: PPUSH
5585: LD_STRING DM-Conspiracy-41
5587: PPUSH
5588: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5592: LD_EXP 48
5596: PPUSH
5597: LD_STRING DM-Conspiracy-42
5599: PPUSH
5600: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5604: LD_INT 73
5606: PPUSH
5607: LD_INT 102
5609: PPUSH
5610: LD_INT 105
5612: PPUSH
5613: CALL 20731 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5617: LD_EXP 48
5621: PPUSH
5622: LD_STRING DM-Conspiracy-43
5624: PPUSH
5625: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5629: LD_EXP 4
5633: IFFALSE 5646
5635: PUSH
5636: LD_EXP 51
5640: PPUSH
5641: CALL_OW 302
5645: AND
5646: IFFALSE 5659
5648: PUSH
5649: LD_EXP 55
5653: PPUSH
5654: CALL_OW 302
5658: AND
5659: IFFALSE 5705
// begin hasMethanol := true ;
5661: LD_ADDR_EXP 13
5665: PUSH
5666: LD_INT 1
5668: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5669: LD_EXP 51
5673: PPUSH
5674: LD_STRING DK-Conspiracy-44
5676: PPUSH
5677: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5681: LD_EXP 51
5685: PPUSH
5686: LD_STRING DK-Conspiracy-45
5688: PPUSH
5689: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5693: LD_EXP 50
5697: PPUSH
5698: LD_STRING DKam-Conspiracy-46
5700: PPUSH
5701: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5705: LD_EXP 46
5709: PPUSH
5710: LD_STRING DH-Conspiracy-47
5712: PPUSH
5713: CALL_OW 88
// wait ( 0 0$1 ) ;
5717: LD_INT 35
5719: PPUSH
5720: CALL_OW 67
// your_side := 8 ;
5724: LD_ADDR_OWVAR 2
5728: PUSH
5729: LD_INT 8
5731: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5732: LD_INT 1
5734: PPUSH
5735: LD_INT 1
5737: PPUSH
5738: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5742: LD_ADDR_VAR 0 2
5746: PUSH
5747: LD_INT 2
5749: PUSH
5750: LD_INT 22
5752: PUSH
5753: LD_INT 2
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 22
5762: PUSH
5763: LD_INT 4
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 21
5777: PUSH
5778: LD_INT 1
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PPUSH
5789: CALL_OW 69
5793: PUSH
5794: FOR_IN
5795: IFFALSE 5808
// RemoveUnit ( i ) ;
5797: LD_VAR 0 2
5801: PPUSH
5802: CALL_OW 64
5806: GO 5794
5808: POP
5809: POP
// wait ( 0 0$0.3 ) ;
5810: LD_INT 10
5812: PPUSH
5813: CALL_OW 67
// Query ( StartInfo1 ) ;
5817: LD_STRING StartInfo1
5819: PPUSH
5820: CALL_OW 97
// wait ( 0 0$1 ) ;
5824: LD_INT 35
5826: PPUSH
5827: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5831: LD_STRING colors_night.txt
5833: PPUSH
5834: CALL_OW 544
// Query ( StartInfo2 ) ;
5838: LD_STRING StartInfo2
5840: PPUSH
5841: CALL_OW 97
// PrepareGame ;
5845: CALL 1058 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5849: LD_INT 152
5851: PPUSH
5852: LD_INT 65
5854: PPUSH
5855: LD_INT 2
5857: PPUSH
5858: LD_INT 70
5860: NEG
5861: PPUSH
5862: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5866: LD_INT 152
5868: PPUSH
5869: LD_INT 65
5871: PPUSH
5872: LD_INT 2
5874: PPUSH
5875: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5879: LD_INT 133
5881: PPUSH
5882: LD_INT 76
5884: PPUSH
5885: LD_INT 2
5887: PPUSH
5888: LD_INT 6
5890: NEG
5891: PPUSH
5892: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5896: LD_INT 152
5898: PPUSH
5899: LD_INT 65
5901: PPUSH
5902: LD_INT 8
5904: PPUSH
5905: LD_INT 70
5907: NEG
5908: PPUSH
5909: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5913: LD_INT 152
5915: PPUSH
5916: LD_INT 65
5918: PPUSH
5919: LD_INT 8
5921: PPUSH
5922: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5926: LD_INT 133
5928: PPUSH
5929: LD_INT 76
5931: PPUSH
5932: LD_INT 8
5934: PPUSH
5935: LD_INT 6
5937: NEG
5938: PPUSH
5939: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5943: LD_INT 23
5945: PPUSH
5946: CALL_OW 87
// dialogue_skipped := false ;
5950: LD_ADDR_OWVAR 59
5954: PUSH
5955: LD_INT 0
5957: ST_TO_ADDR
// InitRuPatrols ;
5958: CALL 3333 0 0
// Say ( Heike , DH-Escape-1 ) ;
5962: LD_EXP 46
5966: PPUSH
5967: LD_STRING DH-Escape-1
5969: PPUSH
5970: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5974: LD_EXP 46
5978: PPUSH
5979: LD_STRING DH-Escape-2
5981: PPUSH
5982: CALL_OW 88
// StartLockerMinigame ;
5986: CALL 21520 0 0
// wait ( 0 0$1 ) ;
5990: LD_INT 35
5992: PPUSH
5993: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5997: LD_EXP 46
6001: PPUSH
6002: LD_STRING DH-Escape-4
6004: PPUSH
6005: CALL_OW 88
// wait ( 0 0$3 ) ;
6009: LD_INT 105
6011: PPUSH
6012: CALL_OW 67
// your_side := 2 ;
6016: LD_ADDR_OWVAR 2
6020: PUSH
6021: LD_INT 2
6023: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
6024: LD_EXP 46
6028: PPUSH
6029: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
6033: LD_INT 152
6035: PPUSH
6036: LD_INT 65
6038: PPUSH
6039: LD_INT 2
6041: PPUSH
6042: LD_INT 70
6044: NEG
6045: PPUSH
6046: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
6050: LD_INT 152
6052: PPUSH
6053: LD_INT 65
6055: PPUSH
6056: LD_INT 2
6058: PPUSH
6059: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
6063: LD_INT 133
6065: PPUSH
6066: LD_INT 76
6068: PPUSH
6069: LD_INT 8
6071: PPUSH
6072: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
6076: LD_EXP 46
6080: PPUSH
6081: LD_INT 128
6083: PPUSH
6084: LD_INT 64
6086: PPUSH
6087: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6091: LD_INT 35
6093: PPUSH
6094: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
6098: LD_EXP 46
6102: PPUSH
6103: LD_INT 128
6105: PPUSH
6106: LD_INT 64
6108: PPUSH
6109: CALL_OW 307
6113: IFFALSE 6091
// ComHold ( Heike ) ;
6115: LD_EXP 46
6119: PPUSH
6120: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6124: LD_EXP 46
6128: PPUSH
6129: LD_STRING DH-Start-1
6131: PPUSH
6132: CALL_OW 88
// if not americanContact then
6136: LD_EXP 10
6140: NOT
6141: IFFALSE 6157
// Say ( Heike , DH-Start-c-2 ) else
6143: LD_EXP 46
6147: PPUSH
6148: LD_STRING DH-Start-c-2
6150: PPUSH
6151: CALL_OW 88
6155: GO 6189
// if johnnySaved then
6157: LD_EXP 3
6161: IFFALSE 6177
// Say ( Heike , DH-Start-a-2 ) else
6163: LD_EXP 46
6167: PPUSH
6168: LD_STRING DH-Start-a-2
6170: PPUSH
6171: CALL_OW 88
6175: GO 6189
// Say ( Heike , DH-Start-b-2 ) ;
6177: LD_EXP 46
6181: PPUSH
6182: LD_STRING DH-Start-b-2
6184: PPUSH
6185: CALL_OW 88
// Video ( false ) ;
6189: LD_INT 0
6191: PPUSH
6192: CALL 68209 0 1
// tick := 0 ;
6196: LD_ADDR_OWVAR 1
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6204: LD_STRING M1
6206: PPUSH
6207: CALL_OW 337
// enable ( gameStartEvent ) ;
6211: LD_INT 2
6213: ENABLE_MARKED
// SaveForQuickRestart ;
6214: CALL_OW 22
// end ;
6218: LD_VAR 0 1
6222: RET
// function ActionAdditional ; var i , un , tmp ; begin
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6229: LD_INT 115
6231: PPUSH
6232: LD_INT 27
6234: PPUSH
6235: LD_INT 2
6237: PPUSH
6238: LD_INT 6
6240: NEG
6241: PPUSH
6242: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6246: LD_EXP 46
6250: PPUSH
6251: LD_INT 115
6253: PPUSH
6254: LD_INT 27
6256: PPUSH
6257: CALL_OW 428
6261: PPUSH
6262: CALL_OW 52
// SetClass ( Heike , class_prison ) ;
6266: LD_EXP 46
6270: PPUSH
6271: LD_INT 33
6273: PPUSH
6274: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6278: LD_INT 124
6280: PPUSH
6281: LD_INT 39
6283: PPUSH
6284: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6288: LD_EXP 46
6292: PPUSH
6293: LD_STRING DH-Fail-1
6295: PPUSH
6296: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6300: LD_INT 3
6302: PPUSH
6303: CALL_OW 427
// ComExit ( Heike ) ;
6307: LD_EXP 46
6311: PPUSH
6312: CALL 68635 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6316: LD_EXP 46
6320: PPUSH
6321: LD_INT 109
6323: PPUSH
6324: LD_INT 33
6326: PPUSH
6327: CALL_OW 171
// AddComHold ( Heike ) ;
6331: LD_EXP 46
6335: PPUSH
6336: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6340: LD_INT 115
6342: PPUSH
6343: LD_INT 27
6345: PPUSH
6346: LD_INT 2
6348: PPUSH
6349: CALL_OW 331
// wait ( 0 0$2 ) ;
6353: LD_INT 70
6355: PPUSH
6356: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6360: LD_INT 35
6362: PPUSH
6363: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6367: LD_EXP 46
6371: PPUSH
6372: LD_INT 109
6374: PPUSH
6375: LD_INT 33
6377: PPUSH
6378: CALL_OW 307
6382: IFFALSE 6360
// Say ( Heike , DH-Fail-2 ) ;
6384: LD_EXP 46
6388: PPUSH
6389: LD_STRING DH-Fail-2
6391: PPUSH
6392: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6396: LD_EXP 46
6400: PPUSH
6401: LD_INT 111
6403: PPUSH
6404: LD_INT 48
6406: PPUSH
6407: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6411: LD_INT 35
6413: PPUSH
6414: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6418: LD_EXP 46
6422: PPUSH
6423: LD_INT 111
6425: PPUSH
6426: LD_INT 48
6428: PPUSH
6429: CALL_OW 297
6433: PUSH
6434: LD_INT 4
6436: LESS
6437: IFFALSE 6411
// AddComMoveXY ( Heike , 106 , 72 ) ;
6439: LD_EXP 46
6443: PPUSH
6444: LD_INT 106
6446: PPUSH
6447: LD_INT 72
6449: PPUSH
6450: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6454: LD_EXP 46
6458: PPUSH
6459: LD_INT 103
6461: PPUSH
6462: LD_INT 80
6464: PPUSH
6465: CALL_OW 171
// uc_side := 3 ;
6469: LD_ADDR_OWVAR 20
6473: PUSH
6474: LD_INT 3
6476: ST_TO_ADDR
// uc_nation := 3 ;
6477: LD_ADDR_OWVAR 21
6481: PUSH
6482: LD_INT 3
6484: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6485: LD_INT 1
6487: PPUSH
6488: LD_INT 1
6490: PPUSH
6491: LD_INT 6
6493: PPUSH
6494: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6498: LD_ADDR_OWVAR 29
6502: PUSH
6503: LD_INT 12
6505: PUSH
6506: LD_INT 12
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: ST_TO_ADDR
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 3
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6523: LD_VAR 0 3
6527: PPUSH
6528: LD_INT 134
6530: PPUSH
6531: LD_INT 52
6533: PPUSH
6534: LD_INT 4
6536: PPUSH
6537: LD_INT 0
6539: PPUSH
6540: CALL 70397 0 5
// ComTurnUnit ( un , Heike ) ;
6544: LD_VAR 0 3
6548: PPUSH
6549: LD_EXP 46
6553: PPUSH
6554: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6558: LD_VAR 0 3
6562: PPUSH
6563: LD_EXP 46
6567: PPUSH
6568: CALL_OW 112
// if GetSex ( un ) = sex_male then
6572: LD_VAR 0 3
6576: PPUSH
6577: CALL_OW 258
6581: PUSH
6582: LD_INT 1
6584: EQUAL
6585: IFFALSE 6601
// Say ( un , DRum-Fail-3 ) else
6587: LD_VAR 0 3
6591: PPUSH
6592: LD_STRING DRum-Fail-3
6594: PPUSH
6595: CALL_OW 88
6599: GO 6613
// Say ( un , DRuf-Fail-3 ) ;
6601: LD_VAR 0 3
6605: PPUSH
6606: LD_STRING DRuf-Fail-3
6608: PPUSH
6609: CALL_OW 88
// for i := 1 to 3 do
6613: LD_ADDR_VAR 0 2
6617: PUSH
6618: DOUBLE
6619: LD_INT 1
6621: DEC
6622: ST_TO_ADDR
6623: LD_INT 3
6625: PUSH
6626: FOR_TO
6627: IFFALSE 6700
// begin PrepareSoldier ( false , 10 ) ;
6629: LD_INT 0
6631: PPUSH
6632: LD_INT 10
6634: PPUSH
6635: CALL_OW 381
// un := CreateHuman ;
6639: LD_ADDR_VAR 0 3
6643: PUSH
6644: CALL_OW 44
6648: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6649: LD_ADDR_VAR 0 4
6653: PUSH
6654: LD_VAR 0 4
6658: PPUSH
6659: LD_VAR 0 3
6663: PPUSH
6664: CALL 68237 0 2
6668: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6669: LD_VAR 0 3
6673: PPUSH
6674: LD_INT 8
6676: PPUSH
6677: LD_INT 0
6679: PPUSH
6680: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6684: LD_VAR 0 3
6688: PPUSH
6689: LD_EXP 46
6693: PPUSH
6694: CALL_OW 119
// end ;
6698: GO 6626
6700: POP
6701: POP
// repeat wait ( 0 0$1 ) ;
6702: LD_INT 35
6704: PPUSH
6705: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6709: LD_VAR 0 4
6713: PPUSH
6714: LD_INT 101
6716: PUSH
6717: LD_INT 2
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 72
6728: PUSH
6729: LD_INT 1
6731: GREATER
6732: IFFALSE 6702
// wait ( 0 0$1 ) ;
6734: LD_INT 35
6736: PPUSH
6737: CALL_OW 67
// DialogueOn ;
6741: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6745: LD_EXP 46
6749: PPUSH
6750: LD_STRING DH-Fail-4
6752: PPUSH
6753: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6757: LD_EXP 46
6761: PPUSH
6762: LD_STRING DH-Fail-5
6764: PPUSH
6765: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6769: LD_EXP 46
6773: PPUSH
6774: LD_STRING DH-Fail-6
6776: PPUSH
6777: CALL_OW 88
// DialogueOff ;
6781: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6785: LD_VAR 0 4
6789: PPUSH
6790: LD_EXP 46
6794: PPUSH
6795: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6799: LD_INT 35
6801: PPUSH
6802: CALL_OW 67
// until IsDying ( Heike ) ;
6806: LD_EXP 46
6810: PPUSH
6811: CALL_OW 303
6815: IFFALSE 6799
// KillUnit ( Heike ) ;
6817: LD_EXP 46
6821: PPUSH
6822: CALL_OW 66
// wait ( 0 0$4 ) ;
6826: LD_INT 140
6828: PPUSH
6829: CALL_OW 67
// ResetFog ;
6833: CALL_OW 335
// DialogueOn ;
6837: CALL_OW 6
// dwait ( 0 0$1 ) ;
6841: LD_INT 35
6843: PPUSH
6844: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6848: LD_ADDR_EXP 46
6852: PUSH
6853: LD_STRING Heike
6855: PPUSH
6856: LD_EXP 1
6860: NOT
6861: PPUSH
6862: LD_EXP 2
6866: PPUSH
6867: CALL 30105 0 3
6871: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6872: LD_EXP 46
6876: PPUSH
6877: LD_STRING DH-Fail-7
6879: PPUSH
6880: CALL_OW 89
// DialogueOff ;
6884: CALL_OW 7
// YouLost ( Fail ) ;
6888: LD_STRING Fail
6890: PPUSH
6891: CALL_OW 104
// end ;
6895: LD_VAR 0 1
6899: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6900: LD_INT 2
6902: PPUSH
6903: LD_INT 173
6905: PPUSH
6906: LD_INT 29
6908: PPUSH
6909: CALL_OW 293
6913: IFFALSE 6936
6915: PUSH
6916: LD_EXP 46
6920: PPUSH
6921: LD_INT 173
6923: PPUSH
6924: LD_INT 29
6926: PPUSH
6927: CALL_OW 297
6931: PUSH
6932: LD_INT 6
6934: LESS
6935: AND
6936: IFFALSE 6953
6938: GO 6940
6940: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6941: LD_EXP 46
6945: PPUSH
6946: LD_STRING DH-EastRoad
6948: PPUSH
6949: CALL_OW 88
6953: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6954: LD_INT 2
6956: PPUSH
6957: LD_INT 149
6959: PPUSH
6960: LD_INT 3
6962: PPUSH
6963: CALL_OW 293
6967: IFFALSE 6990
6969: PUSH
6970: LD_EXP 46
6974: PPUSH
6975: LD_INT 149
6977: PPUSH
6978: LD_INT 3
6980: PPUSH
6981: CALL_OW 297
6985: PUSH
6986: LD_INT 6
6988: LESS
6989: AND
6990: IFFALSE 7007
6992: GO 6994
6994: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6995: LD_EXP 46
6999: PPUSH
7000: LD_STRING DH-EastRoad
7002: PPUSH
7003: CALL_OW 88
7007: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
7008: LD_INT 2
7010: PPUSH
7011: LD_INT 217
7013: PPUSH
7014: LD_INT 120
7016: PPUSH
7017: CALL_OW 293
7021: IFFALSE 7044
7023: PUSH
7024: LD_EXP 46
7028: PPUSH
7029: LD_INT 217
7031: PPUSH
7032: LD_INT 120
7034: PPUSH
7035: CALL_OW 297
7039: PUSH
7040: LD_INT 6
7042: LESS
7043: AND
7044: IFFALSE 7061
7046: GO 7048
7048: DISABLE
// Say ( Heike , DH-EastEnd ) ;
7049: LD_EXP 46
7053: PPUSH
7054: LD_STRING DH-EastEnd
7056: PPUSH
7057: CALL_OW 88
7061: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
7062: LD_EXP 46
7066: PPUSH
7067: LD_INT 11
7069: PPUSH
7070: CALL_OW 308
7074: IFFALSE 7112
7076: GO 7078
7078: DISABLE
// begin if not heikeSquad then
7079: LD_EXP 14
7083: NOT
7084: IFFALSE 7100
// Say ( Heike , DH-Hill ) else
7086: LD_EXP 46
7090: PPUSH
7091: LD_STRING DH-Hill
7093: PPUSH
7094: CALL_OW 88
7098: GO 7112
// Say ( Heike , DH-Hill-a ) ;
7100: LD_EXP 46
7104: PPUSH
7105: LD_STRING DH-Hill-a
7107: PPUSH
7108: CALL_OW 88
// end ;
7112: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
7113: LD_EXP 46
7117: PPUSH
7118: LD_INT 12
7120: PPUSH
7121: CALL_OW 308
7125: IFFALSE 7312
7127: GO 7129
7129: DISABLE
7130: LD_INT 0
7132: PPUSH
7133: PPUSH
7134: PPUSH
// begin DialogueOn ;
7135: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7139: LD_EXP 46
7143: PPUSH
7144: CALL_OW 87
// x := GetX ( Heike ) ;
7148: LD_ADDR_VAR 0 1
7152: PUSH
7153: LD_EXP 46
7157: PPUSH
7158: CALL_OW 250
7162: ST_TO_ADDR
// y := GetY ( Heike ) ;
7163: LD_ADDR_VAR 0 2
7167: PUSH
7168: LD_EXP 46
7172: PPUSH
7173: CALL_OW 251
7177: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7178: LD_VAR 0 1
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: LD_INT 2
7190: PPUSH
7191: LD_INT 12
7193: NEG
7194: PPUSH
7195: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7199: LD_VAR 0 1
7203: PPUSH
7204: LD_VAR 0 2
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7216: LD_INT 101
7218: PUSH
7219: LD_INT 2
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 2
7228: PUSH
7229: LD_INT 30
7231: PUSH
7232: LD_INT 32
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 30
7241: PUSH
7242: LD_INT 33
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: CALL_OW 69
7262: IFFALSE 7274
// v := 3 else
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: LD_INT 3
7271: ST_TO_ADDR
7272: GO 7282
// v := 2 ;
7274: LD_ADDR_VAR 0 3
7278: PUSH
7279: LD_INT 2
7281: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7282: LD_EXP 46
7286: PPUSH
7287: LD_STRING DH-Outpost-
7289: PUSH
7290: LD_INT 1
7292: PPUSH
7293: LD_VAR 0 3
7297: PPUSH
7298: CALL_OW 12
7302: STR
7303: PPUSH
7304: CALL_OW 88
// DialogueOff ;
7308: CALL_OW 7
// end ;
7312: PPOPN 3
7314: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7315: LD_EXP 46
7319: PPUSH
7320: LD_INT 64
7322: PPUSH
7323: CALL_OW 308
7327: IFFALSE 7514
7329: GO 7331
7331: DISABLE
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
7336: PPUSH
// begin DialogueOn ;
7337: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7341: LD_EXP 46
7345: PPUSH
7346: CALL_OW 87
// x := GetX ( Heike ) ;
7350: LD_ADDR_VAR 0 1
7354: PUSH
7355: LD_EXP 46
7359: PPUSH
7360: CALL_OW 250
7364: ST_TO_ADDR
// y := GetY ( Heike ) ;
7365: LD_ADDR_VAR 0 2
7369: PUSH
7370: LD_EXP 46
7374: PPUSH
7375: CALL_OW 251
7379: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7380: LD_VAR 0 1
7384: PPUSH
7385: LD_VAR 0 2
7389: PPUSH
7390: LD_INT 2
7392: PPUSH
7393: LD_INT 12
7395: NEG
7396: PPUSH
7397: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7401: LD_VAR 0 1
7405: PPUSH
7406: LD_VAR 0 2
7410: PPUSH
7411: LD_INT 2
7413: PPUSH
7414: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7418: LD_INT 101
7420: PUSH
7421: LD_INT 2
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 2
7430: PUSH
7431: LD_INT 30
7433: PUSH
7434: LD_INT 32
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: LD_INT 30
7443: PUSH
7444: LD_INT 33
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PPUSH
7460: CALL_OW 69
7464: IFFALSE 7476
// v := 3 else
7466: LD_ADDR_VAR 0 3
7470: PUSH
7471: LD_INT 3
7473: ST_TO_ADDR
7474: GO 7484
// v := 2 ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: LD_INT 2
7483: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7484: LD_EXP 46
7488: PPUSH
7489: LD_STRING DH-Outpost-
7491: PUSH
7492: LD_INT 1
7494: PPUSH
7495: LD_VAR 0 3
7499: PPUSH
7500: CALL_OW 12
7504: STR
7505: PPUSH
7506: CALL_OW 88
// DialogueOff ;
7510: CALL_OW 7
// end ;
7514: PPOPN 3
7516: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7517: LD_EXP 46
7521: PPUSH
7522: LD_INT 19
7524: PPUSH
7525: CALL_OW 308
7529: IFFALSE 7538
7531: PUSH
7532: LD_EXP 22
7536: NOT
7537: AND
7538: IFFALSE 7547
7540: PUSH
7541: LD_EXP 30
7545: NOT
7546: AND
7547: IFFALSE 7620
7549: GO 7551
7551: DISABLE
// begin DialogueOn ;
7552: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7556: LD_INT 152
7558: PPUSH
7559: LD_INT 115
7561: PPUSH
7562: LD_INT 2
7564: PPUSH
7565: LD_INT 16
7567: NEG
7568: PPUSH
7569: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7573: LD_INT 152
7575: PPUSH
7576: LD_INT 115
7578: PPUSH
7579: LD_INT 2
7581: PPUSH
7582: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7586: LD_INT 152
7588: PPUSH
7589: LD_INT 115
7591: PPUSH
7592: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7596: LD_EXP 46
7600: PPUSH
7601: LD_STRING DH-Stealth-1
7603: PPUSH
7604: CALL_OW 88
// DialogueOff ;
7608: CALL_OW 7
// adminAreaDiscovered := true ;
7612: LD_ADDR_EXP 22
7616: PUSH
7617: LD_INT 1
7619: ST_TO_ADDR
// end ;
7620: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7621: LD_INT 2
7623: PPUSH
7624: LD_EXP 47
7628: PPUSH
7629: CALL_OW 292
7633: IFFALSE 7655
7635: PUSH
7636: LD_EXP 46
7640: PPUSH
7641: LD_EXP 47
7645: PPUSH
7646: CALL_OW 296
7650: PUSH
7651: LD_INT 6
7653: LESS
7654: AND
7655: IFFALSE 7664
7657: PUSH
7658: LD_EXP 17
7662: NOT
7663: AND
7664: IFFALSE 7673
7666: PUSH
7667: LD_EXP 30
7671: NOT
7672: AND
7673: IFFALSE 7779
7675: GO 7677
7677: DISABLE
// begin DialogueOn ;
7678: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7682: LD_EXP 47
7686: PPUSH
7687: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7691: LD_EXP 47
7695: PPUSH
7696: LD_EXP 46
7700: PPUSH
7701: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7705: LD_EXP 46
7709: PPUSH
7710: LD_EXP 47
7714: PPUSH
7715: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7719: LD_EXP 46
7723: PPUSH
7724: LD_STRING DH-Givi-1
7726: PPUSH
7727: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7731: LD_EXP 47
7735: PPUSH
7736: LD_STRING DG-Givi-2
7738: PPUSH
7739: CALL_OW 88
// DialogueOff ;
7743: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7747: LD_EXP 47
7751: PPUSH
7752: LD_INT 2
7754: PPUSH
7755: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7759: LD_ADDR_EXP 14
7763: PUSH
7764: LD_EXP 14
7768: PPUSH
7769: LD_EXP 47
7773: PPUSH
7774: CALL 68237 0 2
7778: ST_TO_ADDR
// end ;
7779: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7780: LD_INT 2
7782: PPUSH
7783: LD_EXP 52
7787: PPUSH
7788: CALL_OW 292
7792: IFFALSE 7814
7794: PUSH
7795: LD_EXP 46
7799: PPUSH
7800: LD_EXP 52
7804: PPUSH
7805: CALL_OW 296
7809: PUSH
7810: LD_INT 6
7812: LESS
7813: AND
7814: IFFALSE 7823
7816: PUSH
7817: LD_EXP 17
7821: NOT
7822: AND
7823: IFFALSE 7832
7825: PUSH
7826: LD_EXP 30
7830: NOT
7831: AND
7832: IFFALSE 7938
7834: GO 7836
7836: DISABLE
// begin DialogueOn ;
7837: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7841: LD_EXP 52
7845: PPUSH
7846: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7850: LD_EXP 52
7854: PPUSH
7855: LD_EXP 46
7859: PPUSH
7860: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7864: LD_EXP 46
7868: PPUSH
7869: LD_EXP 52
7873: PPUSH
7874: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7878: LD_EXP 46
7882: PPUSH
7883: LD_STRING DH-Sophia-1
7885: PPUSH
7886: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7890: LD_EXP 52
7894: PPUSH
7895: LD_STRING DS-Sophia-2
7897: PPUSH
7898: CALL_OW 88
// DialogueOff ;
7902: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7906: LD_EXP 52
7910: PPUSH
7911: LD_INT 2
7913: PPUSH
7914: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7918: LD_ADDR_EXP 14
7922: PUSH
7923: LD_EXP 14
7927: PPUSH
7928: LD_EXP 52
7932: PPUSH
7933: CALL 68237 0 2
7937: ST_TO_ADDR
// end ;
7938: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7939: LD_INT 2
7941: PPUSH
7942: LD_EXP 54
7946: PPUSH
7947: CALL_OW 292
7951: IFFALSE 7973
7953: PUSH
7954: LD_EXP 46
7958: PPUSH
7959: LD_EXP 54
7963: PPUSH
7964: CALL_OW 296
7968: PUSH
7969: LD_INT 6
7971: LESS
7972: AND
7973: IFFALSE 7982
7975: PUSH
7976: LD_EXP 17
7980: NOT
7981: AND
7982: IFFALSE 7991
7984: PUSH
7985: LD_EXP 30
7989: NOT
7990: AND
7991: IFFALSE 8087
7993: GO 7995
7995: DISABLE
// begin DialogueOn ;
7996: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
8000: LD_EXP 54
8004: PPUSH
8005: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
8009: LD_EXP 46
8013: PPUSH
8014: LD_STRING DH-Olaf-1
8016: PPUSH
8017: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
8021: LD_EXP 54
8025: PPUSH
8026: LD_STRING DO-Olaf-2
8028: PPUSH
8029: CALL_OW 88
// if explosionsTakenByRussians then
8033: LD_EXP 21
8037: IFFALSE 8051
// Say ( Olaf , DO-Olaf-a-3 ) ;
8039: LD_EXP 54
8043: PPUSH
8044: LD_STRING DO-Olaf-a-3
8046: PPUSH
8047: CALL_OW 88
// DialogueOff ;
8051: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
8055: LD_EXP 54
8059: PPUSH
8060: LD_INT 2
8062: PPUSH
8063: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
8067: LD_ADDR_EXP 14
8071: PUSH
8072: LD_EXP 14
8076: PPUSH
8077: LD_EXP 54
8081: PPUSH
8082: CALL 68237 0 2
8086: ST_TO_ADDR
// end ;
8087: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
8088: LD_INT 2
8090: PPUSH
8091: LD_EXP 48
8095: PPUSH
8096: CALL_OW 292
8100: IFFALSE 8122
8102: PUSH
8103: LD_EXP 46
8107: PPUSH
8108: LD_EXP 48
8112: PPUSH
8113: CALL_OW 296
8117: PUSH
8118: LD_INT 6
8120: LESS
8121: AND
8122: IFFALSE 8131
8124: PUSH
8125: LD_EXP 17
8129: NOT
8130: AND
8131: IFFALSE 8140
8133: PUSH
8134: LD_EXP 30
8138: NOT
8139: AND
8140: IFFALSE 8368
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
8148: PPUSH
// begin DialogueOn ;
8149: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
8153: LD_EXP 48
8157: PPUSH
8158: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
8162: LD_ADDR_VAR 0 2
8166: PUSH
8167: LD_INT 18
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: CALL_OW 517
8177: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8178: LD_ADDR_VAR 0 1
8182: PUSH
8183: DOUBLE
8184: LD_INT 1
8186: DEC
8187: ST_TO_ADDR
8188: LD_VAR 0 2
8192: PUSH
8193: LD_INT 1
8195: ARRAY
8196: PUSH
8197: FOR_TO
8198: IFFALSE 8280
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8200: LD_VAR 0 2
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: PUSH
8209: LD_VAR 0 1
8213: ARRAY
8214: PPUSH
8215: LD_VAR 0 2
8219: PUSH
8220: LD_INT 2
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 1
8228: ARRAY
8229: PPUSH
8230: LD_INT 2
8232: PPUSH
8233: LD_INT 3
8235: NEG
8236: PPUSH
8237: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8241: LD_VAR 0 2
8245: PUSH
8246: LD_INT 1
8248: ARRAY
8249: PUSH
8250: LD_VAR 0 1
8254: ARRAY
8255: PPUSH
8256: LD_VAR 0 2
8260: PUSH
8261: LD_INT 2
8263: ARRAY
8264: PUSH
8265: LD_VAR 0 1
8269: ARRAY
8270: PPUSH
8271: LD_INT 2
8273: PPUSH
8274: CALL_OW 331
// end ;
8278: GO 8197
8280: POP
8281: POP
// Say ( Mike , DM-Mike-1 ) ;
8282: LD_EXP 48
8286: PPUSH
8287: LD_STRING DM-Mike-1
8289: PPUSH
8290: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8294: LD_EXP 46
8298: PPUSH
8299: LD_STRING DH-Mike-2
8301: PPUSH
8302: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8306: LD_INT 78
8308: PPUSH
8309: LD_INT 104
8311: PPUSH
8312: CALL_OW 84
// dwait ( 0 0$1 ) ;
8316: LD_INT 35
8318: PPUSH
8319: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8323: LD_EXP 46
8327: PPUSH
8328: CALL_OW 87
// DialogueOff ;
8332: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8336: LD_EXP 48
8340: PPUSH
8341: LD_INT 2
8343: PPUSH
8344: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8348: LD_ADDR_EXP 14
8352: PUSH
8353: LD_EXP 14
8357: PPUSH
8358: LD_EXP 48
8362: PPUSH
8363: CALL 68237 0 2
8367: ST_TO_ADDR
// end ;
8368: PPOPN 2
8370: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = class_prison and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8371: LD_EXP 46
8375: PPUSH
8376: LD_EXP 51
8380: PPUSH
8381: CALL_OW 296
8385: PUSH
8386: LD_INT 6
8388: LESS
8389: IFFALSE 8406
8391: PUSH
8392: LD_EXP 51
8396: PPUSH
8397: CALL_OW 257
8401: PUSH
8402: LD_INT 33
8404: EQUAL
8405: AND
8406: IFFALSE 8415
8408: PUSH
8409: LD_EXP 17
8413: NOT
8414: AND
8415: IFFALSE 8424
8417: PUSH
8418: LD_EXP 30
8422: NOT
8423: AND
8424: IFFALSE 8437
8426: PUSH
8427: LD_EXP 51
8431: PPUSH
8432: CALL_OW 302
8436: AND
8437: IFFALSE 8445
8439: PUSH
8440: LD_EXP 20
8444: AND
8445: IFFALSE 8459
8447: PUSH
8448: LD_EXP 51
8452: PUSH
8453: LD_EXP 14
8457: IN
8458: AND
8459: IFFALSE 8476
8461: PUSH
8462: LD_EXP 51
8466: PPUSH
8467: CALL_OW 255
8471: PUSH
8472: LD_INT 2
8474: EQUAL
8475: AND
8476: IFFALSE 8505
8478: GO 8480
8480: DISABLE
// begin DialogueOn ;
8481: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8485: LD_EXP 46
8489: PPUSH
8490: LD_STRING DH-Kaia-Revolver-2
8492: PPUSH
8493: CALL_OW 88
// SetClassKaiaRevolver ;
8497: CALL 1771 0 0
// DialogueOff ;
8501: CALL_OW 7
// end ;
8505: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8506: LD_EXP 49
8510: IFFALSE 8518
8512: PUSH
8513: LD_EXP 56
8517: AND
8518: IFFALSE 8535
8520: PUSH
8521: LD_EXP 56
8525: PPUSH
8526: CALL_OW 255
8530: PUSH
8531: LD_INT 2
8533: NONEQUAL
8534: AND
8535: IFFALSE 8552
8537: PUSH
8538: LD_EXP 49
8542: PPUSH
8543: CALL_OW 255
8547: PUSH
8548: LD_INT 2
8550: NONEQUAL
8551: AND
8552: IFFALSE 8579
8554: PUSH
8555: LD_EXP 14
8559: PPUSH
8560: LD_INT 22
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 72
8574: PUSH
8575: LD_INT 5
8577: GREATER
8578: AND
8579: IFFALSE 8588
8581: PUSH
8582: LD_EXP 17
8586: NOT
8587: AND
8588: IFFALSE 8597
8590: PUSH
8591: LD_EXP 30
8595: NOT
8596: AND
8597: IFFALSE 9334
8599: GO 8601
8601: DISABLE
8602: LD_INT 0
8604: PPUSH
8605: PPUSH
// begin DialogueOn ;
8606: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8610: LD_ADDR_VAR 0 2
8614: PUSH
8615: LD_EXP 47
8619: PPUSH
8620: CALL_OW 302
8624: IFFALSE 8638
8626: PUSH
8627: LD_EXP 47
8631: PUSH
8632: LD_EXP 14
8636: IN
8637: AND
8638: IFFALSE 8655
8640: PUSH
8641: LD_EXP 47
8645: PPUSH
8646: CALL_OW 255
8650: PUSH
8651: LD_INT 2
8653: EQUAL
8654: AND
8655: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8656: LD_EXP 46
8660: PPUSH
8661: LD_STRING DH-Med-1
8663: PPUSH
8664: CALL_OW 88
// if hasGivi then
8668: LD_VAR 0 2
8672: IFFALSE 8688
// Say ( Givi , DG-Med-2 ) else
8674: LD_EXP 47
8678: PPUSH
8679: LD_STRING DG-Med-2
8681: PPUSH
8682: CALL_OW 88
8686: GO 8793
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8688: LD_EXP 14
8692: PUSH
8693: LD_EXP 57
8697: ISECT
8698: PPUSH
8699: LD_INT 22
8701: PUSH
8702: LD_INT 2
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 26
8711: PUSH
8712: LD_INT 1
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PPUSH
8723: CALL_OW 72
8727: PUSH
8728: LD_INT 1
8730: ARRAY
8731: PPUSH
8732: LD_STRING DArm-Med-e-2
8734: PPUSH
8735: CALL_OW 88
8739: NOT
8740: IFFALSE 8793
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8742: LD_EXP 14
8746: PUSH
8747: LD_EXP 57
8751: ISECT
8752: PPUSH
8753: LD_INT 22
8755: PUSH
8756: LD_INT 2
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 26
8765: PUSH
8766: LD_INT 2
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PPUSH
8777: CALL_OW 72
8781: PUSH
8782: LD_INT 1
8784: ARRAY
8785: PPUSH
8786: LD_STRING DArf-Med-e-2
8788: PPUSH
8789: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8793: LD_INT 154
8795: PPUSH
8796: LD_INT 119
8798: PPUSH
8799: LD_INT 70
8801: PPUSH
8802: CALL 20731 0 3
// Say ( Heike , DH-Med-3 ) ;
8806: LD_EXP 46
8810: PPUSH
8811: LD_STRING DH-Med-3
8813: PPUSH
8814: CALL_OW 88
// if hasGivi then
8818: LD_VAR 0 2
8822: IFFALSE 8838
// Say ( Givi , DG-Med-4 ) else
8824: LD_EXP 47
8828: PPUSH
8829: LD_STRING DG-Med-4
8831: PPUSH
8832: CALL_OW 88
8836: GO 8943
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8838: LD_EXP 14
8842: PUSH
8843: LD_EXP 57
8847: ISECT
8848: PPUSH
8849: LD_INT 22
8851: PUSH
8852: LD_INT 2
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: LD_INT 26
8861: PUSH
8862: LD_INT 1
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 72
8877: PUSH
8878: LD_INT 1
8880: ARRAY
8881: PPUSH
8882: LD_STRING DArm-Med-e-4
8884: PPUSH
8885: CALL_OW 88
8889: NOT
8890: IFFALSE 8943
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8892: LD_EXP 14
8896: PUSH
8897: LD_EXP 57
8901: ISECT
8902: PPUSH
8903: LD_INT 22
8905: PUSH
8906: LD_INT 2
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 26
8915: PUSH
8916: LD_INT 2
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 72
8931: PUSH
8932: LD_INT 1
8934: ARRAY
8935: PPUSH
8936: LD_STRING DArf-Med-e-4
8938: PPUSH
8939: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8943: LD_ADDR_VAR 0 1
8947: PUSH
8948: LD_EXP 51
8952: PPUSH
8953: CALL_OW 302
8957: IFFALSE 8971
8959: PUSH
8960: LD_EXP 51
8964: PUSH
8965: LD_EXP 14
8969: IN
8970: AND
8971: IFFALSE 8988
8973: PUSH
8974: LD_EXP 51
8978: PPUSH
8979: CALL_OW 255
8983: PUSH
8984: LD_INT 2
8986: EQUAL
8987: AND
8988: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8989: LD_EXP 48
8993: PPUSH
8994: CALL_OW 302
8998: IFFALSE 9012
9000: PUSH
9001: LD_EXP 48
9005: PUSH
9006: LD_EXP 14
9010: IN
9011: AND
9012: IFFALSE 9029
9014: PUSH
9015: LD_EXP 51
9019: PPUSH
9020: CALL_OW 255
9024: PUSH
9025: LD_INT 2
9027: EQUAL
9028: AND
9029: IFFALSE 9061
// begin Say ( Mike , DM-Med-5 ) ;
9031: LD_EXP 48
9035: PPUSH
9036: LD_STRING DM-Med-5
9038: PPUSH
9039: CALL_OW 88
// if hasKaia then
9043: LD_VAR 0 1
9047: IFFALSE 9061
// Say ( Kaia , DK-Med-6 ) ;
9049: LD_EXP 51
9053: PPUSH
9054: LD_STRING DK-Med-6
9056: PPUSH
9057: CALL_OW 88
// end ; if hasKaia then
9061: LD_VAR 0 1
9065: IFFALSE 9314
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9067: LD_INT 175
9069: PPUSH
9070: LD_INT 123
9072: PPUSH
9073: LD_INT 2
9075: PPUSH
9076: LD_INT 8
9078: NEG
9079: PPUSH
9080: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9084: LD_INT 175
9086: PPUSH
9087: LD_INT 123
9089: PPUSH
9090: LD_INT 2
9092: PPUSH
9093: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9097: LD_INT 175
9099: PPUSH
9100: LD_INT 123
9102: PPUSH
9103: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9107: LD_EXP 51
9111: PPUSH
9112: LD_STRING DK-Med-7
9114: PPUSH
9115: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9119: LD_EXP 51
9123: PPUSH
9124: LD_STRING DK-Med-8
9126: PPUSH
9127: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9131: LD_EXP 53
9135: PPUSH
9136: CALL_OW 302
9140: IFFALSE 9154
9142: PUSH
9143: LD_EXP 53
9147: PUSH
9148: LD_EXP 14
9152: IN
9153: AND
9154: IFFALSE 9171
9156: PUSH
9157: LD_EXP 53
9161: PPUSH
9162: CALL_OW 255
9166: PUSH
9167: LD_INT 2
9169: EQUAL
9170: AND
9171: IFFALSE 9229
// begin Say ( Markov , DMar-Med-9 ) ;
9173: LD_EXP 53
9177: PPUSH
9178: LD_STRING DMar-Med-9
9180: PPUSH
9181: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9185: LD_EXP 51
9189: PPUSH
9190: LD_STRING DK-Med-10
9192: PPUSH
9193: CALL_OW 88
// if hasGivi then
9197: LD_VAR 0 2
9201: IFFALSE 9217
// Say ( Kaia , DK-Med-11 ) else
9203: LD_EXP 51
9207: PPUSH
9208: LD_STRING DK-Med-11
9210: PPUSH
9211: CALL_OW 88
9215: GO 9229
// Say ( Kaia , DK-Med-a-11 ) ;
9217: LD_EXP 51
9221: PPUSH
9222: LD_STRING DK-Med-a-11
9224: PPUSH
9225: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9229: LD_EXP 50
9233: PPUSH
9234: CALL_OW 302
9238: IFFALSE 9252
9240: PUSH
9241: LD_EXP 50
9245: PUSH
9246: LD_EXP 14
9250: IN
9251: AND
9252: IFFALSE 9269
9254: PUSH
9255: LD_EXP 50
9259: PPUSH
9260: CALL_OW 255
9264: PUSH
9265: LD_INT 2
9267: EQUAL
9268: AND
9269: IFFALSE 9314
// begin Say ( Kamil , DKam-Med-12 ) ;
9271: LD_EXP 50
9275: PPUSH
9276: LD_STRING DKam-Med-12
9278: PPUSH
9279: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9283: LD_EXP 50
9287: PPUSH
9288: LD_STRING DKam-Med-13
9290: PPUSH
9291: CALL_OW 88
// if not hasExplosionCollected then
9295: LD_EXP 23
9299: NOT
9300: IFFALSE 9314
// Say ( Heike , DH-Med-d-14 ) ;
9302: LD_EXP 46
9306: PPUSH
9307: LD_STRING DH-Med-d-14
9309: PPUSH
9310: CALL_OW 88
// end ; end ; DialogueOff ;
9314: CALL_OW 7
// adminAreaDiscovered := true ;
9318: LD_ADDR_EXP 22
9322: PUSH
9323: LD_INT 1
9325: ST_TO_ADDR
// laundryAllowed := true ;
9326: LD_ADDR_EXP 26
9330: PUSH
9331: LD_INT 1
9333: ST_TO_ADDR
// end ;
9334: PPOPN 2
9336: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9337: LD_EXP 49
9341: NOT
9342: IFFALSE 9350
9344: PUSH
9345: LD_EXP 56
9349: AND
9350: IFFALSE 9365
9352: PUSH
9353: LD_EXP 56
9357: PUSH
9358: LD_EXP 14
9362: IN
9363: NOT
9364: AND
9365: IFFALSE 9392
9367: PUSH
9368: LD_EXP 14
9372: PPUSH
9373: LD_INT 22
9375: PUSH
9376: LD_INT 2
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 72
9387: PUSH
9388: LD_INT 4
9390: GREATER
9391: AND
9392: IFFALSE 9401
9394: PUSH
9395: LD_EXP 17
9399: NOT
9400: AND
9401: IFFALSE 9410
9403: PUSH
9404: LD_EXP 30
9408: NOT
9409: AND
9410: IFFALSE 10147
9412: GO 9414
9414: DISABLE
9415: LD_INT 0
9417: PPUSH
9418: PPUSH
// begin DialogueOn ;
9419: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9423: LD_ADDR_VAR 0 1
9427: PUSH
9428: LD_EXP 47
9432: PPUSH
9433: CALL_OW 302
9437: IFFALSE 9451
9439: PUSH
9440: LD_EXP 47
9444: PUSH
9445: LD_EXP 14
9449: IN
9450: AND
9451: IFFALSE 9468
9453: PUSH
9454: LD_EXP 47
9458: PPUSH
9459: CALL_OW 255
9463: PUSH
9464: LD_INT 2
9466: EQUAL
9467: AND
9468: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9469: LD_EXP 46
9473: PPUSH
9474: LD_STRING DH-Med-a-1
9476: PPUSH
9477: CALL_OW 88
// if hasGivi then
9481: LD_VAR 0 1
9485: IFFALSE 9501
// Say ( Givi , DG-Med-a-2 ) else
9487: LD_EXP 47
9491: PPUSH
9492: LD_STRING DG-Med-a-2
9494: PPUSH
9495: CALL_OW 88
9499: GO 9606
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9501: LD_EXP 14
9505: PUSH
9506: LD_EXP 57
9510: ISECT
9511: PPUSH
9512: LD_INT 22
9514: PUSH
9515: LD_INT 2
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 26
9524: PUSH
9525: LD_INT 1
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PPUSH
9536: CALL_OW 72
9540: PUSH
9541: LD_INT 1
9543: ARRAY
9544: PPUSH
9545: LD_STRING DArm-Med-f-2
9547: PPUSH
9548: CALL_OW 88
9552: NOT
9553: IFFALSE 9606
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9555: LD_EXP 14
9559: PUSH
9560: LD_EXP 57
9564: ISECT
9565: PPUSH
9566: LD_INT 22
9568: PUSH
9569: LD_INT 2
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 26
9578: PUSH
9579: LD_INT 2
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: CALL_OW 72
9594: PUSH
9595: LD_INT 1
9597: ARRAY
9598: PPUSH
9599: LD_STRING DArf-Med-f-2
9601: PPUSH
9602: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9606: LD_INT 154
9608: PPUSH
9609: LD_INT 119
9611: PPUSH
9612: LD_INT 70
9614: PPUSH
9615: CALL 20731 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9619: LD_EXP 46
9623: PPUSH
9624: LD_STRING DH-Med-a-3
9626: PPUSH
9627: CALL_OW 88
// if hasGivi then
9631: LD_VAR 0 1
9635: IFFALSE 9651
// Say ( Givi , DG-Med-a-4 ) else
9637: LD_EXP 47
9641: PPUSH
9642: LD_STRING DG-Med-a-4
9644: PPUSH
9645: CALL_OW 88
9649: GO 9756
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9651: LD_EXP 14
9655: PUSH
9656: LD_EXP 57
9660: ISECT
9661: PPUSH
9662: LD_INT 22
9664: PUSH
9665: LD_INT 2
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: PUSH
9672: LD_INT 26
9674: PUSH
9675: LD_INT 1
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PPUSH
9686: CALL_OW 72
9690: PUSH
9691: LD_INT 1
9693: ARRAY
9694: PPUSH
9695: LD_STRING DArm-Med-f-4
9697: PPUSH
9698: CALL_OW 88
9702: NOT
9703: IFFALSE 9756
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9705: LD_EXP 14
9709: PUSH
9710: LD_EXP 57
9714: ISECT
9715: PPUSH
9716: LD_INT 22
9718: PUSH
9719: LD_INT 2
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: LD_INT 26
9728: PUSH
9729: LD_INT 2
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: PPUSH
9740: CALL_OW 72
9744: PUSH
9745: LD_INT 1
9747: ARRAY
9748: PPUSH
9749: LD_STRING DArf-Med-f-4
9751: PPUSH
9752: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: LD_EXP 51
9765: PPUSH
9766: CALL_OW 302
9770: IFFALSE 9784
9772: PUSH
9773: LD_EXP 51
9777: PUSH
9778: LD_EXP 14
9782: IN
9783: AND
9784: IFFALSE 9801
9786: PUSH
9787: LD_EXP 51
9791: PPUSH
9792: CALL_OW 255
9796: PUSH
9797: LD_INT 2
9799: EQUAL
9800: AND
9801: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9802: LD_EXP 48
9806: PPUSH
9807: CALL_OW 302
9811: IFFALSE 9825
9813: PUSH
9814: LD_EXP 48
9818: PUSH
9819: LD_EXP 14
9823: IN
9824: AND
9825: IFFALSE 9842
9827: PUSH
9828: LD_EXP 48
9832: PPUSH
9833: CALL_OW 255
9837: PUSH
9838: LD_INT 2
9840: EQUAL
9841: AND
9842: IFFALSE 9874
// begin Say ( Mike , DM-Med-5 ) ;
9844: LD_EXP 48
9848: PPUSH
9849: LD_STRING DM-Med-5
9851: PPUSH
9852: CALL_OW 88
// if hasKaia then
9856: LD_VAR 0 2
9860: IFFALSE 9874
// Say ( Kaia , DK-Med-6 ) ;
9862: LD_EXP 51
9866: PPUSH
9867: LD_STRING DK-Med-6
9869: PPUSH
9870: CALL_OW 88
// end ; if hasKaia then
9874: LD_VAR 0 2
9878: IFFALSE 10127
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9880: LD_INT 175
9882: PPUSH
9883: LD_INT 123
9885: PPUSH
9886: LD_INT 2
9888: PPUSH
9889: LD_INT 8
9891: NEG
9892: PPUSH
9893: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9897: LD_INT 175
9899: PPUSH
9900: LD_INT 123
9902: PPUSH
9903: LD_INT 2
9905: PPUSH
9906: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9910: LD_INT 175
9912: PPUSH
9913: LD_INT 123
9915: PPUSH
9916: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9920: LD_EXP 51
9924: PPUSH
9925: LD_STRING DK-Med-7
9927: PPUSH
9928: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9932: LD_EXP 51
9936: PPUSH
9937: LD_STRING DK-Med-8
9939: PPUSH
9940: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9944: LD_EXP 53
9948: PPUSH
9949: CALL_OW 302
9953: IFFALSE 9967
9955: PUSH
9956: LD_EXP 53
9960: PUSH
9961: LD_EXP 14
9965: IN
9966: AND
9967: IFFALSE 9984
9969: PUSH
9970: LD_EXP 53
9974: PPUSH
9975: CALL_OW 255
9979: PUSH
9980: LD_INT 2
9982: EQUAL
9983: AND
9984: IFFALSE 10042
// begin Say ( Markov , DMar-Med-9 ) ;
9986: LD_EXP 53
9990: PPUSH
9991: LD_STRING DMar-Med-9
9993: PPUSH
9994: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9998: LD_EXP 51
10002: PPUSH
10003: LD_STRING DK-Med-10
10005: PPUSH
10006: CALL_OW 88
// if hasGivi then
10010: LD_VAR 0 1
10014: IFFALSE 10030
// Say ( Kaia , DK-Med-11 ) else
10016: LD_EXP 51
10020: PPUSH
10021: LD_STRING DK-Med-11
10023: PPUSH
10024: CALL_OW 88
10028: GO 10042
// Say ( Kaia , DK-Med-a-11 ) ;
10030: LD_EXP 51
10034: PPUSH
10035: LD_STRING DK-Med-a-11
10037: PPUSH
10038: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10042: LD_EXP 50
10046: PPUSH
10047: CALL_OW 302
10051: IFFALSE 10065
10053: PUSH
10054: LD_EXP 50
10058: PUSH
10059: LD_EXP 14
10063: IN
10064: AND
10065: IFFALSE 10082
10067: PUSH
10068: LD_EXP 50
10072: PPUSH
10073: CALL_OW 255
10077: PUSH
10078: LD_INT 2
10080: EQUAL
10081: AND
10082: IFFALSE 10127
// begin Say ( Kamil , DKam-Med-12 ) ;
10084: LD_EXP 50
10088: PPUSH
10089: LD_STRING DKam-Med-12
10091: PPUSH
10092: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10096: LD_EXP 50
10100: PPUSH
10101: LD_STRING DKam-Med-13
10103: PPUSH
10104: CALL_OW 88
// if not hasExplosionCollected then
10108: LD_EXP 23
10112: NOT
10113: IFFALSE 10127
// Say ( Heike , DH-Med-d-14 ) ;
10115: LD_EXP 46
10119: PPUSH
10120: LD_STRING DH-Med-d-14
10122: PPUSH
10123: CALL_OW 88
// end ; end ; DialogueOff ;
10127: CALL_OW 7
// adminAreaDiscovered := true ;
10131: LD_ADDR_EXP 22
10135: PUSH
10136: LD_INT 1
10138: ST_TO_ADDR
// laundryAllowed := true ;
10139: LD_ADDR_EXP 26
10143: PUSH
10144: LD_INT 1
10146: ST_TO_ADDR
// end ;
10147: PPOPN 2
10149: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
10150: LD_EXP 49
10154: IFFALSE 10163
10156: PUSH
10157: LD_EXP 56
10161: NOT
10162: AND
10163: IFFALSE 10178
10165: PUSH
10166: LD_EXP 49
10170: PUSH
10171: LD_EXP 14
10175: IN
10176: NOT
10177: AND
10178: IFFALSE 10205
10180: PUSH
10181: LD_EXP 14
10185: PPUSH
10186: LD_INT 22
10188: PUSH
10189: LD_INT 2
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PUSH
10201: LD_INT 4
10203: GREATER
10204: AND
10205: IFFALSE 10214
10207: PUSH
10208: LD_EXP 17
10212: NOT
10213: AND
10214: IFFALSE 10223
10216: PUSH
10217: LD_EXP 30
10221: NOT
10222: AND
10223: IFFALSE 10960
10225: GO 10227
10227: DISABLE
10228: LD_INT 0
10230: PPUSH
10231: PPUSH
// begin DialogueOn ;
10232: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
10236: LD_ADDR_VAR 0 1
10240: PUSH
10241: LD_EXP 47
10245: PPUSH
10246: CALL_OW 302
10250: IFFALSE 10264
10252: PUSH
10253: LD_EXP 47
10257: PUSH
10258: LD_EXP 14
10262: IN
10263: AND
10264: IFFALSE 10281
10266: PUSH
10267: LD_EXP 47
10271: PPUSH
10272: CALL_OW 255
10276: PUSH
10277: LD_INT 2
10279: EQUAL
10280: AND
10281: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10282: LD_EXP 46
10286: PPUSH
10287: LD_STRING DH-Med-b-1
10289: PPUSH
10290: CALL_OW 88
// if hasGivi then
10294: LD_VAR 0 1
10298: IFFALSE 10314
// Say ( Givi , DG-Med-a-2 ) else
10300: LD_EXP 47
10304: PPUSH
10305: LD_STRING DG-Med-a-2
10307: PPUSH
10308: CALL_OW 88
10312: GO 10419
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10314: LD_EXP 14
10318: PUSH
10319: LD_EXP 57
10323: ISECT
10324: PPUSH
10325: LD_INT 22
10327: PUSH
10328: LD_INT 2
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 26
10337: PUSH
10338: LD_INT 1
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 72
10353: PUSH
10354: LD_INT 1
10356: ARRAY
10357: PPUSH
10358: LD_STRING DArm-Med-f-2
10360: PPUSH
10361: CALL_OW 88
10365: NOT
10366: IFFALSE 10419
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10368: LD_EXP 14
10372: PUSH
10373: LD_EXP 57
10377: ISECT
10378: PPUSH
10379: LD_INT 22
10381: PUSH
10382: LD_INT 2
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: LD_INT 26
10391: PUSH
10392: LD_INT 2
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 72
10407: PUSH
10408: LD_INT 1
10410: ARRAY
10411: PPUSH
10412: LD_STRING DArf-Med-f-2
10414: PPUSH
10415: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10419: LD_INT 154
10421: PPUSH
10422: LD_INT 119
10424: PPUSH
10425: LD_INT 70
10427: PPUSH
10428: CALL 20731 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10432: LD_EXP 46
10436: PPUSH
10437: LD_STRING DH-Med-a-3
10439: PPUSH
10440: CALL_OW 88
// if hasGivi then
10444: LD_VAR 0 1
10448: IFFALSE 10464
// Say ( Givi , DG-Med-a-4 ) else
10450: LD_EXP 47
10454: PPUSH
10455: LD_STRING DG-Med-a-4
10457: PPUSH
10458: CALL_OW 88
10462: GO 10569
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10464: LD_EXP 14
10468: PUSH
10469: LD_EXP 57
10473: ISECT
10474: PPUSH
10475: LD_INT 22
10477: PUSH
10478: LD_INT 2
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 26
10487: PUSH
10488: LD_INT 1
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PPUSH
10499: CALL_OW 72
10503: PUSH
10504: LD_INT 1
10506: ARRAY
10507: PPUSH
10508: LD_STRING DArm-Med-f-4
10510: PPUSH
10511: CALL_OW 88
10515: NOT
10516: IFFALSE 10569
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10518: LD_EXP 14
10522: PUSH
10523: LD_EXP 57
10527: ISECT
10528: PPUSH
10529: LD_INT 22
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 26
10541: PUSH
10542: LD_INT 2
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PPUSH
10553: CALL_OW 72
10557: PUSH
10558: LD_INT 1
10560: ARRAY
10561: PPUSH
10562: LD_STRING DArf-Med-f-4
10564: PPUSH
10565: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: LD_EXP 51
10578: PPUSH
10579: CALL_OW 302
10583: IFFALSE 10597
10585: PUSH
10586: LD_EXP 51
10590: PUSH
10591: LD_EXP 14
10595: IN
10596: AND
10597: IFFALSE 10614
10599: PUSH
10600: LD_EXP 51
10604: PPUSH
10605: CALL_OW 255
10609: PUSH
10610: LD_INT 2
10612: EQUAL
10613: AND
10614: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10615: LD_EXP 48
10619: PPUSH
10620: CALL_OW 302
10624: IFFALSE 10638
10626: PUSH
10627: LD_EXP 48
10631: PUSH
10632: LD_EXP 14
10636: IN
10637: AND
10638: IFFALSE 10655
10640: PUSH
10641: LD_EXP 48
10645: PPUSH
10646: CALL_OW 255
10650: PUSH
10651: LD_INT 2
10653: EQUAL
10654: AND
10655: IFFALSE 10687
// begin Say ( Mike , DM-Med-5 ) ;
10657: LD_EXP 48
10661: PPUSH
10662: LD_STRING DM-Med-5
10664: PPUSH
10665: CALL_OW 88
// if hasKaia then
10669: LD_VAR 0 2
10673: IFFALSE 10687
// Say ( Kaia , DK-Med-6 ) ;
10675: LD_EXP 51
10679: PPUSH
10680: LD_STRING DK-Med-6
10682: PPUSH
10683: CALL_OW 88
// end ; if hasKaia then
10687: LD_VAR 0 2
10691: IFFALSE 10940
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10693: LD_INT 175
10695: PPUSH
10696: LD_INT 123
10698: PPUSH
10699: LD_INT 2
10701: PPUSH
10702: LD_INT 8
10704: NEG
10705: PPUSH
10706: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10710: LD_INT 175
10712: PPUSH
10713: LD_INT 123
10715: PPUSH
10716: LD_INT 2
10718: PPUSH
10719: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10723: LD_INT 175
10725: PPUSH
10726: LD_INT 123
10728: PPUSH
10729: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10733: LD_EXP 51
10737: PPUSH
10738: LD_STRING DK-Med-7
10740: PPUSH
10741: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10745: LD_EXP 51
10749: PPUSH
10750: LD_STRING DK-Med-8
10752: PPUSH
10753: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10757: LD_EXP 53
10761: PPUSH
10762: CALL_OW 302
10766: IFFALSE 10780
10768: PUSH
10769: LD_EXP 53
10773: PUSH
10774: LD_EXP 14
10778: IN
10779: AND
10780: IFFALSE 10797
10782: PUSH
10783: LD_EXP 53
10787: PPUSH
10788: CALL_OW 255
10792: PUSH
10793: LD_INT 2
10795: EQUAL
10796: AND
10797: IFFALSE 10855
// begin Say ( Markov , DMar-Med-9 ) ;
10799: LD_EXP 53
10803: PPUSH
10804: LD_STRING DMar-Med-9
10806: PPUSH
10807: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10811: LD_EXP 51
10815: PPUSH
10816: LD_STRING DK-Med-10
10818: PPUSH
10819: CALL_OW 88
// if hasGivi then
10823: LD_VAR 0 1
10827: IFFALSE 10843
// Say ( Kaia , DK-Med-11 ) else
10829: LD_EXP 51
10833: PPUSH
10834: LD_STRING DK-Med-11
10836: PPUSH
10837: CALL_OW 88
10841: GO 10855
// Say ( Kaia , DK-Med-a-11 ) ;
10843: LD_EXP 51
10847: PPUSH
10848: LD_STRING DK-Med-a-11
10850: PPUSH
10851: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10855: LD_EXP 50
10859: PPUSH
10860: CALL_OW 302
10864: IFFALSE 10878
10866: PUSH
10867: LD_EXP 50
10871: PUSH
10872: LD_EXP 14
10876: IN
10877: AND
10878: IFFALSE 10895
10880: PUSH
10881: LD_EXP 50
10885: PPUSH
10886: CALL_OW 255
10890: PUSH
10891: LD_INT 2
10893: EQUAL
10894: AND
10895: IFFALSE 10940
// begin Say ( Kamil , DKam-Med-12 ) ;
10897: LD_EXP 50
10901: PPUSH
10902: LD_STRING DKam-Med-12
10904: PPUSH
10905: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10909: LD_EXP 50
10913: PPUSH
10914: LD_STRING DKam-Med-13
10916: PPUSH
10917: CALL_OW 88
// if not hasExplosionCollected then
10921: LD_EXP 23
10925: NOT
10926: IFFALSE 10940
// Say ( Heike , DH-Med-d-14 ) ;
10928: LD_EXP 46
10932: PPUSH
10933: LD_STRING DH-Med-d-14
10935: PPUSH
10936: CALL_OW 88
// end ; end ; DialogueOff ;
10940: CALL_OW 7
// adminAreaDiscovered := true ;
10944: LD_ADDR_EXP 22
10948: PUSH
10949: LD_INT 1
10951: ST_TO_ADDR
// laundryAllowed := true ;
10952: LD_ADDR_EXP 26
10956: PUSH
10957: LD_INT 1
10959: ST_TO_ADDR
// end ;
10960: PPOPN 2
10962: END
// every 0 0$1 trigger laundryAllowed do
10963: LD_EXP 26
10967: IFFALSE 10979
10969: GO 10971
10971: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10972: LD_STRING M1-laundry
10974: PPUSH
10975: CALL_OW 337
10979: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10980: LD_EXP 49
10984: NOT
10985: IFFALSE 10994
10987: PUSH
10988: LD_EXP 56
10992: NOT
10993: AND
10994: IFFALSE 11007
10996: PUSH
10997: LD_EXP 54
11001: PPUSH
11002: CALL_OW 302
11006: AND
11007: IFFALSE 11021
11009: PUSH
11010: LD_EXP 54
11014: PUSH
11015: LD_EXP 14
11019: IN
11020: AND
11021: IFFALSE 11038
11023: PUSH
11024: LD_EXP 54
11028: PPUSH
11029: CALL_OW 255
11033: PUSH
11034: LD_INT 2
11036: EQUAL
11037: AND
11038: IFFALSE 11047
11040: PUSH
11041: LD_EXP 17
11045: NOT
11046: AND
11047: IFFALSE 11056
11049: PUSH
11050: LD_EXP 30
11054: NOT
11055: AND
11056: IFFALSE 11216
11058: GO 11060
11060: DISABLE
// begin DialogueOn ;
11061: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
11065: LD_INT 152
11067: PPUSH
11068: LD_INT 115
11070: PPUSH
11071: LD_INT 2
11073: PPUSH
11074: LD_INT 16
11076: NEG
11077: PPUSH
11078: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
11082: LD_INT 152
11084: PPUSH
11085: LD_INT 115
11087: PPUSH
11088: LD_INT 2
11090: PPUSH
11091: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
11095: LD_INT 152
11097: PPUSH
11098: LD_INT 115
11100: PPUSH
11101: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
11105: LD_EXP 54
11109: PPUSH
11110: LD_STRING DO-Med-c-1
11112: PPUSH
11113: CALL_OW 88
// if not hasExplosionCollected then
11117: LD_EXP 23
11121: NOT
11122: IFFALSE 11138
// Say ( Heike , DH-Med-d-14 ) else
11124: LD_EXP 46
11128: PPUSH
11129: LD_STRING DH-Med-d-14
11131: PPUSH
11132: CALL_OW 88
11136: GO 11204
// begin Say ( Heike , DH-Med-c-2 ) ;
11138: LD_EXP 46
11142: PPUSH
11143: LD_STRING DH-Med-c-2
11145: PPUSH
11146: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
11150: LD_EXP 51
11154: PPUSH
11155: CALL_OW 302
11159: IFFALSE 11173
11161: PUSH
11162: LD_EXP 51
11166: PUSH
11167: LD_EXP 14
11171: IN
11172: AND
11173: IFFALSE 11190
11175: PUSH
11176: LD_EXP 51
11180: PPUSH
11181: CALL_OW 255
11185: PUSH
11186: LD_INT 2
11188: EQUAL
11189: AND
11190: IFFALSE 11204
// Say ( Kaia , DK-Med-c-3 ) ;
11192: LD_EXP 51
11196: PPUSH
11197: LD_STRING DK-Med-c-3
11199: PPUSH
11200: CALL_OW 88
// end ; DialogueOff ;
11204: CALL_OW 7
// adminAreaDiscovered := true ;
11208: LD_ADDR_EXP 22
11212: PUSH
11213: LD_INT 1
11215: ST_TO_ADDR
// end ;
11216: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
11217: LD_EXP 51
11221: PPUSH
11222: CALL_OW 256
11226: PUSH
11227: LD_INT 250
11229: LESS
11230: IFFALSE 11244
11232: PUSH
11233: LD_EXP 51
11237: PUSH
11238: LD_EXP 14
11242: IN
11243: AND
11244: IFFALSE 11252
11246: PUSH
11247: LD_EXP 17
11251: AND
11252: IFFALSE 11260
11254: PUSH
11255: LD_EXP 24
11259: AND
11260: IFFALSE 11389
11262: GO 11264
11264: DISABLE
// begin DialogueOn ;
11265: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
11269: LD_EXP 51
11273: PPUSH
11274: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
11278: LD_EXP 51
11282: PPUSH
11283: LD_STRING DK-death-1
11285: PPUSH
11286: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
11290: LD_EXP 46
11294: PPUSH
11295: LD_STRING DH-death-2
11297: PPUSH
11298: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11302: LD_EXP 51
11306: PPUSH
11307: LD_STRING DK-death-3
11309: PPUSH
11310: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11314: LD_EXP 51
11318: PPUSH
11319: LD_STRING DK-death-4
11321: PPUSH
11322: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11326: LD_EXP 51
11330: PPUSH
11331: LD_INT 8
11333: PPUSH
11334: CALL_OW 235
// ComStop ( Kaia ) ;
11338: LD_EXP 51
11342: PPUSH
11343: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11347: LD_INT 8
11349: PPUSH
11350: LD_INT 2
11352: PPUSH
11353: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11357: LD_ADDR_EXP 14
11361: PUSH
11362: LD_EXP 14
11366: PUSH
11367: LD_EXP 51
11371: DIFF
11372: ST_TO_ADDR
// DialogueOff ;
11373: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11377: LD_EXP 48
11381: PPUSH
11382: LD_STRING DM-death-5
11384: PPUSH
11385: CALL_OW 88
// end ;
11389: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11390: LD_EXP 25
11394: NOT
11395: IFFALSE 11404
11397: PUSH
11398: LD_EXP 30
11402: NOT
11403: AND
11404: IFFALSE 11419
11406: PUSH
11407: LD_EXP 59
11411: PUSH
11412: LD_EXP 14
11416: IN
11417: NOT
11418: AND
11419: IFFALSE 11435
11421: PUSH
11422: LD_INT 2
11424: PPUSH
11425: LD_EXP 59
11429: PPUSH
11430: CALL_OW 292
11434: AND
11435: IFFALSE 11457
11437: PUSH
11438: LD_EXP 46
11442: PPUSH
11443: LD_EXP 59
11447: PPUSH
11448: CALL_OW 296
11452: PUSH
11453: LD_INT 6
11455: LESS
11456: AND
11457: IFFALSE 11466
11459: PUSH
11460: LD_EXP 17
11464: NOT
11465: AND
11466: IFFALSE 11690
11468: GO 11470
11470: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11471: LD_EXP 59
11475: PPUSH
11476: LD_EXP 46
11480: PPUSH
11481: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11485: LD_EXP 46
11489: PPUSH
11490: LD_EXP 59
11494: PPUSH
11495: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11499: LD_INT 10
11501: PPUSH
11502: CALL_OW 67
// DialogueOn ;
11506: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11510: LD_EXP 59
11514: PPUSH
11515: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11519: LD_EXP 46
11523: PPUSH
11524: LD_STRING DH-Deal-1
11526: PPUSH
11527: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11531: LD_EXP 59
11535: PPUSH
11536: LD_STRING DJ-Deal-2
11538: PPUSH
11539: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11543: LD_EXP 46
11547: PPUSH
11548: LD_STRING DH-Deal-3
11550: PPUSH
11551: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11555: LD_EXP 59
11559: PPUSH
11560: LD_STRING DJ-Deal-4
11562: PPUSH
11563: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11567: LD_EXP 59
11571: PPUSH
11572: LD_STRING DJ-Deal-5
11574: PPUSH
11575: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11579: LD_EXP 59
11583: PPUSH
11584: LD_STRING DJ-Deal-6
11586: PPUSH
11587: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11591: LD_EXP 59
11595: PPUSH
11596: LD_STRING DJ-Deal-7
11598: PPUSH
11599: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11603: LD_EXP 46
11607: PPUSH
11608: LD_STRING DH-Deal-8
11610: PPUSH
11611: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11615: LD_EXP 46
11619: PPUSH
11620: LD_STRING DH-Deal-9
11622: PPUSH
11623: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11627: LD_EXP 59
11631: PPUSH
11632: LD_STRING DJ-Deal-10
11634: PPUSH
11635: CALL_OW 88
// DialogueOff ;
11639: CALL_OW 7
// contactWithAmerican := true ;
11643: LD_ADDR_EXP 25
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11651: LD_STRING M1-american-out
11653: PPUSH
11654: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11658: LD_EXP 59
11662: PPUSH
11663: LD_INT 2
11665: PPUSH
11666: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11670: LD_ADDR_EXP 14
11674: PUSH
11675: LD_EXP 14
11679: PPUSH
11680: LD_EXP 59
11684: PPUSH
11685: CALL 68237 0 2
11689: ST_TO_ADDR
// end ;
11690: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11691: LD_EXP 25
11695: IFFALSE 11704
11697: PUSH
11698: LD_EXP 30
11702: NOT
11703: AND
11704: IFFALSE 11719
11706: PUSH
11707: LD_EXP 59
11711: PUSH
11712: LD_EXP 14
11716: IN
11717: NOT
11718: AND
11719: IFFALSE 11735
11721: PUSH
11722: LD_INT 2
11724: PPUSH
11725: LD_EXP 59
11729: PPUSH
11730: CALL_OW 292
11734: AND
11735: IFFALSE 11757
11737: PUSH
11738: LD_EXP 46
11742: PPUSH
11743: LD_EXP 59
11747: PPUSH
11748: CALL_OW 296
11752: PUSH
11753: LD_INT 6
11755: LESS
11756: AND
11757: IFFALSE 11766
11759: PUSH
11760: LD_EXP 17
11764: NOT
11765: AND
11766: IFFALSE 11891
11768: GO 11770
11770: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11771: LD_EXP 59
11775: PPUSH
11776: LD_EXP 46
11780: PPUSH
11781: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11785: LD_EXP 46
11789: PPUSH
11790: LD_EXP 59
11794: PPUSH
11795: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11799: LD_INT 10
11801: PPUSH
11802: CALL_OW 67
// DialogueOn ;
11806: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11810: LD_EXP 59
11814: PPUSH
11815: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11819: LD_EXP 59
11823: PPUSH
11824: LD_STRING DJ-Escort-1
11826: PPUSH
11827: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11831: LD_EXP 46
11835: PPUSH
11836: LD_STRING DH-Escort-2
11838: PPUSH
11839: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11843: LD_EXP 59
11847: PPUSH
11848: LD_STRING DJ-Escort-3
11850: PPUSH
11851: CALL_OW 88
// DialogueOff ;
11855: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11859: LD_EXP 59
11863: PPUSH
11864: LD_INT 2
11866: PPUSH
11867: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11871: LD_ADDR_EXP 14
11875: PUSH
11876: LD_EXP 14
11880: PPUSH
11881: LD_EXP 59
11885: PPUSH
11886: CALL 68237 0 2
11890: ST_TO_ADDR
// end ;
11891: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11892: LD_EXP 25
11896: IFFALSE 11905
11898: PUSH
11899: LD_EXP 30
11903: NOT
11904: AND
11905: IFFALSE 11966
11907: PUSH
11908: LD_EXP 58
11912: PUSH
11913: LD_EXP 14
11917: DIFF
11918: PPUSH
11919: LD_INT 22
11921: PUSH
11922: LD_INT 4
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: LD_INT 3
11931: PUSH
11932: LD_INT 120
11934: PUSH
11935: LD_INT 1
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 101
11948: PUSH
11949: LD_INT 2
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: PPUSH
11961: CALL_OW 72
11965: AND
11966: IFFALSE 11975
11968: PUSH
11969: LD_EXP 17
11973: NOT
11974: AND
11975: IFFALSE 12202
11977: GO 11979
11979: DISABLE
11980: LD_INT 0
11982: PPUSH
// begin enable ;
11983: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11984: LD_ADDR_VAR 0 1
11988: PUSH
11989: LD_EXP 58
11993: PUSH
11994: LD_EXP 14
11998: DIFF
11999: PPUSH
12000: LD_INT 22
12002: PUSH
12003: LD_INT 4
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 91
12012: PUSH
12013: LD_EXP 46
12017: PUSH
12018: LD_INT 6
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 101
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: PPUSH
12041: CALL_OW 72
12045: PPUSH
12046: LD_EXP 46
12050: PPUSH
12051: CALL_OW 74
12055: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12056: LD_VAR 0 1
12060: PPUSH
12061: LD_EXP 46
12065: PPUSH
12066: CALL_OW 296
12070: PUSH
12071: LD_INT 6
12073: LESS
12074: IFFALSE 12202
// begin DialogueOn ;
12076: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12080: LD_VAR 0 1
12084: PPUSH
12085: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12089: LD_EXP 46
12093: PPUSH
12094: LD_STRING DH-USsol-1
12096: PPUSH
12097: CALL_OW 88
// if un <> Jerry then
12101: LD_VAR 0 1
12105: PUSH
12106: LD_EXP 61
12110: NONEQUAL
12111: IFFALSE 12154
// if GetSex ( un ) = sex_male then
12113: LD_VAR 0 1
12117: PPUSH
12118: CALL_OW 258
12122: PUSH
12123: LD_INT 1
12125: EQUAL
12126: IFFALSE 12142
// Say ( un , DUSM-USsol-2 ) else
12128: LD_VAR 0 1
12132: PPUSH
12133: LD_STRING DUSM-USsol-2
12135: PPUSH
12136: CALL_OW 88
12140: GO 12154
// Say ( un , DUSF-USsol-2 ) ;
12142: LD_VAR 0 1
12146: PPUSH
12147: LD_STRING DUSF-USsol-2
12149: PPUSH
12150: CALL_OW 88
// DialogueOff ;
12154: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12158: LD_ADDR_EXP 14
12162: PUSH
12163: LD_EXP 14
12167: PPUSH
12168: LD_VAR 0 1
12172: PPUSH
12173: CALL 68237 0 2
12177: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12178: LD_VAR 0 1
12182: PPUSH
12183: LD_INT 1
12185: PPUSH
12186: CALL_OW 109
// SetSide ( un , 2 ) ;
12190: LD_VAR 0 1
12194: PPUSH
12195: LD_INT 2
12197: PPUSH
12198: CALL_OW 235
// end ; end ;
12202: PPOPN 1
12204: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
12205: LD_EXP 57
12209: IFFALSE 12218
12211: PUSH
12212: LD_EXP 30
12216: NOT
12217: AND
12218: IFFALSE 12285
12220: PUSH
12221: LD_EXP 57
12225: PUSH
12226: LD_EXP 14
12230: DIFF
12231: PPUSH
12232: LD_INT 3
12234: PUSH
12235: LD_INT 120
12237: PUSH
12238: LD_INT 1
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 91
12251: PUSH
12252: LD_EXP 46
12256: PUSH
12257: LD_INT 6
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 101
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: PPUSH
12280: CALL_OW 72
12284: AND
12285: IFFALSE 12294
12287: PUSH
12288: LD_EXP 17
12292: NOT
12293: AND
12294: IFFALSE 12509
12296: GO 12298
12298: DISABLE
12299: LD_INT 0
12301: PPUSH
// begin enable ;
12302: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
12303: LD_ADDR_VAR 0 1
12307: PUSH
12308: LD_EXP 57
12312: PUSH
12313: LD_EXP 14
12317: DIFF
12318: PPUSH
12319: LD_INT 22
12321: PUSH
12322: LD_INT 5
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 91
12331: PUSH
12332: LD_EXP 46
12336: PUSH
12337: LD_INT 6
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 101
12347: PUSH
12348: LD_INT 2
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 72
12364: PPUSH
12365: LD_EXP 46
12369: PPUSH
12370: CALL_OW 74
12374: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12375: LD_VAR 0 1
12379: PPUSH
12380: LD_EXP 46
12384: PPUSH
12385: CALL_OW 296
12389: PUSH
12390: LD_INT 6
12392: LESS
12393: IFFALSE 12509
// begin DialogueOn ;
12395: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12399: LD_VAR 0 1
12403: PPUSH
12404: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12408: LD_EXP 46
12412: PPUSH
12413: LD_STRING DH-USsol-1
12415: PPUSH
12416: CALL_OW 88
// if GetSex ( un ) = sex_male then
12420: LD_VAR 0 1
12424: PPUSH
12425: CALL_OW 258
12429: PUSH
12430: LD_INT 1
12432: EQUAL
12433: IFFALSE 12449
// Say ( un , DArm-USsol-2 ) else
12435: LD_VAR 0 1
12439: PPUSH
12440: LD_STRING DArm-USsol-2
12442: PPUSH
12443: CALL_OW 88
12447: GO 12461
// Say ( un , DArf-USsol-3 ) ;
12449: LD_VAR 0 1
12453: PPUSH
12454: LD_STRING DArf-USsol-3
12456: PPUSH
12457: CALL_OW 88
// DialogueOff ;
12461: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12465: LD_ADDR_EXP 14
12469: PUSH
12470: LD_EXP 14
12474: PPUSH
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL 68237 0 2
12484: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12485: LD_VAR 0 1
12489: PPUSH
12490: LD_INT 1
12492: PPUSH
12493: CALL_OW 109
// SetSide ( un , 2 ) ;
12497: LD_VAR 0 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 235
// end ; end ;
12509: PPOPN 1
12511: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12512: LD_EXP 58
12516: PPUSH
12517: LD_INT 101
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PPUSH
12527: CALL_OW 72
12531: IFFALSE 12558
12533: PUSH
12534: LD_EXP 14
12538: PPUSH
12539: LD_INT 22
12541: PUSH
12542: LD_INT 2
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 72
12553: PUSH
12554: LD_INT 5
12556: GREATER
12557: AND
12558: IFFALSE 12567
12560: PUSH
12561: LD_EXP 10
12565: NOT
12566: AND
12567: IFFALSE 12576
12569: PUSH
12570: LD_EXP 30
12574: NOT
12575: AND
12576: IFFALSE 12585
12578: PUSH
12579: LD_EXP 25
12583: NOT
12584: AND
12585: IFFALSE 12594
12587: PUSH
12588: LD_EXP 17
12592: NOT
12593: AND
12594: IFFALSE 12709
12596: GO 12598
12598: DISABLE
12599: LD_INT 0
12601: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12602: LD_ADDR_VAR 0 1
12606: PUSH
12607: LD_EXP 58
12611: PPUSH
12612: LD_INT 22
12614: PUSH
12615: LD_INT 4
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 101
12624: PUSH
12625: LD_INT 2
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PPUSH
12636: CALL_OW 72
12640: PUSH
12641: LD_INT 1
12643: ARRAY
12644: ST_TO_ADDR
// DialogueOn ;
12645: CALL_OW 6
// if GetSex ( un ) = sex_male then
12649: LD_VAR 0 1
12653: PPUSH
12654: CALL_OW 258
12658: PUSH
12659: LD_INT 1
12661: EQUAL
12662: IFFALSE 12678
// Say ( un , DUSm-USsol-a-2 ) else
12664: LD_VAR 0 1
12668: PPUSH
12669: LD_STRING DUSm-USsol-a-2
12671: PPUSH
12672: CALL_OW 88
12676: GO 12690
// Say ( un , DUSf-USsol-a-2 ) ;
12678: LD_VAR 0 1
12682: PPUSH
12683: LD_STRING DUSf-USsol-a-2
12685: PPUSH
12686: CALL_OW 88
// DialogueOff ;
12690: CALL_OW 7
// wait ( 0 0$2 ) ;
12694: LD_INT 70
12696: PPUSH
12697: CALL_OW 67
// isAlarm := true ;
12701: LD_ADDR_EXP 17
12705: PUSH
12706: LD_INT 1
12708: ST_TO_ADDR
// end ;
12709: PPOPN 1
12711: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12712: LD_EXP 17
12716: NOT
12717: IFFALSE 12730
12719: PUSH
12720: LD_EXP 47
12724: PPUSH
12725: CALL_OW 302
12729: AND
12730: IFFALSE 12747
12732: PUSH
12733: LD_EXP 47
12737: PPUSH
12738: CALL_OW 255
12742: PUSH
12743: LD_INT 2
12745: EQUAL
12746: AND
12747: IFFALSE 12755
12749: PUSH
12750: LD_EXP 26
12754: AND
12755: IFFALSE 12764
12757: PUSH
12758: LD_EXP 28
12762: NOT
12763: AND
12764: IFFALSE 12773
12766: PUSH
12767: LD_EXP 27
12771: NOT
12772: AND
12773: IFFALSE 12782
12775: PUSH
12776: LD_EXP 30
12780: NOT
12781: AND
12782: IFFALSE 12798
12784: PUSH
12785: LD_EXP 47
12789: PPUSH
12790: LD_INT 165
12792: PPUSH
12793: CALL 21044 0 2
12797: AND
12798: IFFALSE 12930
12800: GO 12802
12802: DISABLE
// begin enable ;
12803: ENABLE
// InGameOn ;
12804: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12808: LD_EXP 47
12812: PPUSH
12813: LD_INT 5
12815: PPUSH
12816: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12820: LD_INT 165
12822: PPUSH
12823: LD_INT 5
12825: PPUSH
12826: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12830: LD_EXP 47
12834: PPUSH
12835: LD_INT 165
12837: PPUSH
12838: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12842: LD_INT 35
12844: PPUSH
12845: CALL_OW 67
// until IsInUnit ( Givi ) ;
12849: LD_EXP 47
12853: PPUSH
12854: CALL_OW 310
12858: IFFALSE 12842
// case Query ( GiviInLaundry ) of 1 :
12860: LD_STRING GiviInLaundry
12862: PPUSH
12863: CALL_OW 97
12867: PUSH
12868: LD_INT 1
12870: DOUBLE
12871: EQUAL
12872: IFTRUE 12876
12874: GO 12883
12876: POP
// SpawnGiviAsRussian ; 2 :
12877: CALL 1948 0 0
12881: GO 12895
12883: LD_INT 2
12885: DOUBLE
12886: EQUAL
12887: IFTRUE 12891
12889: GO 12894
12891: POP
// ; end ;
12892: GO 12895
12894: POP
// ComExitBuilding ( Givi ) ;
12895: LD_EXP 47
12899: PPUSH
12900: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12904: LD_EXP 47
12908: PPUSH
12909: LD_INT 2
12911: PPUSH
12912: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12916: LD_INT 165
12918: PPUSH
12919: LD_INT 3
12921: PPUSH
12922: CALL_OW 235
// InGameOff ;
12926: CALL_OW 9
// end ;
12930: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12931: LD_EXP 17
12935: NOT
12936: IFFALSE 12944
12938: PUSH
12939: LD_EXP 28
12943: AND
12944: IFFALSE 12961
12946: PUSH
12947: LD_EXP 47
12951: PPUSH
12952: CALL_OW 255
12956: PUSH
12957: LD_INT 2
12959: EQUAL
12960: AND
12961: IFFALSE 12978
12963: PUSH
12964: LD_EXP 47
12968: PPUSH
12969: CALL_OW 248
12973: PUSH
12974: LD_INT 3
12976: EQUAL
12977: AND
12978: IFFALSE 12994
12980: PUSH
12981: LD_EXP 47
12985: PPUSH
12986: LD_INT 119
12988: PPUSH
12989: CALL 21044 0 2
12993: AND
12994: IFFALSE 13003
12996: PUSH
12997: LD_EXP 30
13001: NOT
13002: AND
13003: IFFALSE 13257
13005: GO 13007
13007: DISABLE
// begin InGameOn ;
13008: CALL_OW 8
// SetSide ( Givi , 3 ) ;
13012: LD_EXP 47
13016: PPUSH
13017: LD_INT 3
13019: PPUSH
13020: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13024: LD_INT 10
13026: PPUSH
13027: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
13031: LD_EXP 47
13035: PPUSH
13036: LD_INT 119
13038: PPUSH
13039: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13043: LD_INT 35
13045: PPUSH
13046: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
13050: LD_EXP 47
13054: PPUSH
13055: LD_INT 119
13057: PPUSH
13058: CALL_OW 120
// until IsInUnit ( Givi ) ;
13062: LD_EXP 47
13066: PPUSH
13067: CALL_OW 310
13071: IFFALSE 13043
// DialogueOn ;
13073: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
13077: LD_EXP 47
13081: PPUSH
13082: LD_STRING DG-Captive-1
13084: PPUSH
13085: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
13089: LD_EXP 65
13093: PPUSH
13094: LD_STRING DCom-Captive-2
13096: PPUSH
13097: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
13101: LD_EXP 47
13105: PPUSH
13106: LD_STRING DG-Captive-3
13108: PPUSH
13109: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
13113: LD_EXP 65
13117: PPUSH
13118: LD_STRING DCom-Captive-4
13120: PPUSH
13121: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13125: LD_EXP 65
13129: PPUSH
13130: CALL_OW 64
// DialogueOff ;
13134: CALL_OW 7
// InGameOff ;
13138: CALL_OW 9
// SetSide ( Givi , 2 ) ;
13142: LD_EXP 47
13146: PPUSH
13147: LD_INT 2
13149: PPUSH
13150: CALL_OW 235
// ComExitBuilding ( Givi ) ;
13154: LD_EXP 47
13158: PPUSH
13159: CALL_OW 122
// if Aviradze then
13163: LD_EXP 56
13167: IFFALSE 13210
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13169: LD_ADDR_EXP 14
13173: PUSH
13174: LD_EXP 14
13178: PPUSH
13179: LD_EXP 56
13183: PPUSH
13184: CALL 68237 0 2
13188: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13189: LD_EXP 56
13193: PPUSH
13194: LD_INT 2
13196: PPUSH
13197: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13201: LD_EXP 56
13205: PPUSH
13206: CALL_OW 122
// end ; if Ibrahim then
13210: LD_EXP 49
13214: IFFALSE 13257
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13216: LD_ADDR_EXP 14
13220: PUSH
13221: LD_EXP 14
13225: PPUSH
13226: LD_EXP 49
13230: PPUSH
13231: CALL 68237 0 2
13235: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13236: LD_EXP 49
13240: PPUSH
13241: LD_INT 2
13243: PPUSH
13244: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13248: LD_EXP 49
13252: PPUSH
13253: CALL_OW 122
// end ; end ;
13257: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
13258: LD_EXP 17
13262: NOT
13263: IFFALSE 13271
13265: PUSH
13266: LD_EXP 27
13270: AND
13271: IFFALSE 13288
13273: PUSH
13274: LD_EXP 46
13278: PPUSH
13279: CALL_OW 248
13283: PUSH
13284: LD_INT 3
13286: EQUAL
13287: AND
13288: IFFALSE 13304
13290: PUSH
13291: LD_EXP 46
13295: PPUSH
13296: LD_INT 119
13298: PPUSH
13299: CALL 21044 0 2
13303: AND
13304: IFFALSE 13313
13306: PUSH
13307: LD_EXP 30
13311: NOT
13312: AND
13313: IFFALSE 13614
13315: GO 13317
13317: DISABLE
// begin InGameOn ;
13318: CALL_OW 8
// SetSide ( Heike , 3 ) ;
13322: LD_EXP 46
13326: PPUSH
13327: LD_INT 3
13329: PPUSH
13330: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13334: LD_INT 10
13336: PPUSH
13337: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13341: LD_EXP 46
13345: PPUSH
13346: LD_INT 119
13348: PPUSH
13349: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13353: LD_INT 35
13355: PPUSH
13356: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13360: LD_EXP 46
13364: PPUSH
13365: LD_INT 119
13367: PPUSH
13368: CALL_OW 120
// until IsInUnit ( Heike ) ;
13372: LD_EXP 46
13376: PPUSH
13377: CALL_OW 310
13381: IFFALSE 13353
// wait ( 0 0$1 ) ;
13383: LD_INT 35
13385: PPUSH
13386: CALL_OW 67
// DialogueOn ;
13390: CALL_OW 6
// if Aviradze and Ibrahim then
13394: LD_EXP 56
13398: IFFALSE 13406
13400: PUSH
13401: LD_EXP 49
13405: AND
13406: IFFALSE 13422
// Say ( Heike , DH-Captive-a-1 ) else
13408: LD_EXP 46
13412: PPUSH
13413: LD_STRING DH-Captive-a-1
13415: PPUSH
13416: CALL_OW 88
13420: GO 13434
// Say ( Heike , DH-Captive-a-b-1 ) ;
13422: LD_EXP 46
13426: PPUSH
13427: LD_STRING DH-Captive-a-b-1
13429: PPUSH
13430: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13434: LD_EXP 65
13438: PPUSH
13439: LD_STRING DCom-Captive-a-2
13441: PPUSH
13442: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13446: LD_EXP 46
13450: PPUSH
13451: LD_STRING DH-Captive-a-3
13453: PPUSH
13454: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13458: LD_EXP 65
13462: PPUSH
13463: LD_STRING DCom-Captive-a-4
13465: PPUSH
13466: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13470: LD_EXP 46
13474: PPUSH
13475: LD_STRING DH-Captive-a-5
13477: PPUSH
13478: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13482: LD_EXP 65
13486: PPUSH
13487: CALL_OW 64
// DialogueOff ;
13491: CALL_OW 7
// InGameOff ;
13495: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13499: LD_EXP 46
13503: PPUSH
13504: LD_INT 2
13506: PPUSH
13507: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13511: LD_EXP 46
13515: PPUSH
13516: CALL_OW 122
// if Aviradze then
13520: LD_EXP 56
13524: IFFALSE 13567
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13526: LD_ADDR_EXP 14
13530: PUSH
13531: LD_EXP 14
13535: PPUSH
13536: LD_EXP 56
13540: PPUSH
13541: CALL 68237 0 2
13545: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13546: LD_EXP 56
13550: PPUSH
13551: LD_INT 2
13553: PPUSH
13554: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13558: LD_EXP 56
13562: PPUSH
13563: CALL_OW 122
// end ; if Ibrahim then
13567: LD_EXP 49
13571: IFFALSE 13614
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13573: LD_ADDR_EXP 14
13577: PUSH
13578: LD_EXP 14
13582: PPUSH
13583: LD_EXP 49
13587: PPUSH
13588: CALL 68237 0 2
13592: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13593: LD_EXP 49
13597: PPUSH
13598: LD_INT 2
13600: PPUSH
13601: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13605: LD_EXP 49
13609: PPUSH
13610: CALL_OW 122
// end ; end ;
13614: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13615: LD_INT 2
13617: PUSH
13618: LD_INT 25
13620: PUSH
13621: LD_INT 32
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 25
13630: PUSH
13631: LD_INT 34
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: IFFALSE 13659
13649: GO 13651
13651: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13652: LD_STRING M1-weapons-out
13654: PPUSH
13655: CALL_OW 604
13659: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13660: LD_INT 2
13662: PPUSH
13663: LD_EXP 61
13667: PPUSH
13668: CALL_OW 292
13672: IFFALSE 13690
13674: PUSH
13675: LD_EXP 46
13679: PPUSH
13680: LD_EXP 61
13684: PPUSH
13685: CALL_OW 296
13689: AND
13690: IFFALSE 13699
13692: PUSH
13693: LD_EXP 17
13697: NOT
13698: AND
13699: IFFALSE 13708
13701: PUSH
13702: LD_EXP 30
13706: NOT
13707: AND
13708: IFFALSE 14566
13710: GO 13712
13712: DISABLE
13713: LD_INT 0
13715: PPUSH
13716: PPUSH
// begin if contactWithAmerican then
13717: LD_EXP 25
13721: IFFALSE 13818
// begin DialogueOn ;
13723: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13727: LD_EXP 61
13731: PPUSH
13732: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13736: LD_EXP 46
13740: PPUSH
13741: LD_STRING DH-USsol-1
13743: PPUSH
13744: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13748: LD_EXP 61
13752: PPUSH
13753: LD_INT 2
13755: PPUSH
13756: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13760: LD_ADDR_EXP 58
13764: PUSH
13765: LD_EXP 58
13769: PPUSH
13770: LD_EXP 61
13774: PPUSH
13775: CALL 68237 0 2
13779: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13780: LD_ADDR_EXP 14
13784: PUSH
13785: LD_EXP 14
13789: PPUSH
13790: LD_EXP 48
13794: PPUSH
13795: CALL 68237 0 2
13799: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13800: LD_EXP 61
13804: PPUSH
13805: LD_INT 1
13807: PPUSH
13808: CALL_OW 109
// DialogueOff ;
13812: CALL_OW 7
// exit ;
13816: GO 14566
// end ; DialogueOn ;
13818: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13822: LD_EXP 61
13826: PPUSH
13827: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13831: LD_EXP 61
13835: PPUSH
13836: LD_STRING DJy-Food-1
13838: PPUSH
13839: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13843: LD_EXP 46
13847: PPUSH
13848: LD_STRING DH-Food-2
13850: PPUSH
13851: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13855: LD_EXP 61
13859: PPUSH
13860: LD_STRING DJy-Food-3
13862: PPUSH
13863: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13867: LD_EXP 61
13871: PPUSH
13872: LD_STRING DJy-Food-4
13874: PPUSH
13875: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13879: LD_EXP 46
13883: PPUSH
13884: LD_STRING DH-Food-5
13886: PPUSH
13887: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13891: LD_EXP 61
13895: PPUSH
13896: LD_STRING DJy-Food-6
13898: PPUSH
13899: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13903: LD_EXP 61
13907: PPUSH
13908: LD_STRING DJy-Food-7
13910: PPUSH
13911: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13915: LD_EXP 61
13919: PPUSH
13920: LD_STRING DJy-Food-8
13922: PPUSH
13923: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13927: LD_EXP 46
13931: PPUSH
13932: LD_STRING DH-Food-9
13934: PPUSH
13935: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13939: LD_EXP 61
13943: PPUSH
13944: LD_STRING DJy-Food-10
13946: PPUSH
13947: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13951: LD_EXP 46
13955: PPUSH
13956: LD_STRING DH-Food-11
13958: PPUSH
13959: CALL_OW 88
// DialogueOff ;
13963: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13967: LD_STRING M3
13969: PPUSH
13970: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13974: LD_INT 5
13976: PPUSH
13977: LD_INT 215
13979: PPUSH
13980: LD_INT 117
13982: PPUSH
13983: LD_INT 0
13985: PPUSH
13986: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13990: LD_INT 215
13992: PPUSH
13993: LD_INT 118
13995: PPUSH
13996: LD_INT 2
13998: PPUSH
13999: LD_INT 6
14001: NEG
14002: PPUSH
14003: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
14007: LD_INT 215
14009: PPUSH
14010: LD_INT 118
14012: PPUSH
14013: LD_INT 2
14015: PPUSH
14016: CALL_OW 331
// foodDelivered := false ;
14020: LD_ADDR_VAR 0 2
14024: PUSH
14025: LD_INT 0
14027: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14028: LD_INT 35
14030: PPUSH
14031: CALL_OW 67
// if hasMuchin then
14035: LD_EXP 30
14039: IFFALSE 14043
// continue ;
14041: GO 14028
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
14043: LD_ADDR_VAR 0 1
14047: PUSH
14048: LD_EXP 14
14052: PUSH
14053: LD_EXP 46
14057: UNION
14058: PPUSH
14059: LD_INT 91
14061: PUSH
14062: LD_EXP 61
14066: PUSH
14067: LD_INT 6
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 25
14077: PUSH
14078: LD_INT 33
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 72
14093: PUSH
14094: FOR_IN
14095: IFFALSE 14295
// if Carry ( i ) then
14097: LD_VAR 0 1
14101: PPUSH
14102: CALL_OW 281
14106: IFFALSE 14293
// begin DialogueOn ;
14108: CALL_OW 6
// foodDelivered := true ;
14112: LD_ADDR_VAR 0 2
14116: PUSH
14117: LD_INT 1
14119: ST_TO_ADDR
// case i of Heike :
14120: LD_VAR 0 1
14124: PUSH
14125: LD_EXP 46
14129: DOUBLE
14130: EQUAL
14131: IFTRUE 14135
14133: GO 14150
14135: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
14136: LD_EXP 46
14140: PPUSH
14141: LD_STRING DH-Food-12
14143: PPUSH
14144: CALL_OW 88
14148: GO 14276
14150: LD_EXP 51
14154: DOUBLE
14155: EQUAL
14156: IFTRUE 14160
14158: GO 14175
14160: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
14161: LD_EXP 51
14165: PPUSH
14166: LD_STRING DK-Food-a-12
14168: PPUSH
14169: CALL_OW 88
14173: GO 14276
14175: LD_EXP 53
14179: DOUBLE
14180: EQUAL
14181: IFTRUE 14185
14183: GO 14200
14185: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
14186: LD_EXP 53
14190: PPUSH
14191: LD_STRING DMar-Food-a-12
14193: PPUSH
14194: CALL_OW 88
14198: GO 14276
14200: LD_EXP 47
14204: DOUBLE
14205: EQUAL
14206: IFTRUE 14210
14208: GO 14225
14210: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
14211: LD_EXP 47
14215: PPUSH
14216: LD_STRING DG-Food-a-14
14218: PPUSH
14219: CALL_OW 88
14223: GO 14276
14225: LD_EXP 48
14229: DOUBLE
14230: EQUAL
14231: IFTRUE 14235
14233: GO 14250
14235: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
14236: LD_EXP 48
14240: PPUSH
14241: LD_STRING DM-Food-a-15
14243: PPUSH
14244: CALL_OW 88
14248: GO 14276
14250: LD_EXP 50
14254: DOUBLE
14255: EQUAL
14256: IFTRUE 14260
14258: GO 14275
14260: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
14261: LD_EXP 50
14265: PPUSH
14266: LD_STRING DKam-Food-a-16
14268: PPUSH
14269: CALL_OW 88
14273: GO 14276
14275: POP
// SetCargo ( i , mat_cans , 0 ) ;
14276: LD_VAR 0 1
14280: PPUSH
14281: LD_INT 1
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 290
// break ;
14291: GO 14295
// end ;
14293: GO 14094
14295: POP
14296: POP
// until foodDelivered ;
14297: LD_VAR 0 2
14301: IFFALSE 14028
// givenFood := true ;
14303: LD_ADDR_EXP 33
14307: PUSH
14308: LD_INT 1
14310: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
14311: LD_EXP 61
14315: PPUSH
14316: LD_STRING DJy-Food-13
14318: PPUSH
14319: CALL_OW 88
// hasVirus := true ;
14323: LD_ADDR_EXP 31
14327: PUSH
14328: LD_INT 1
14330: ST_TO_ADDR
// if not americanContact then
14331: LD_EXP 10
14335: NOT
14336: IFFALSE 14386
// begin Say ( Heike , DH-Food-14 ) ;
14338: LD_EXP 46
14342: PPUSH
14343: LD_STRING DH-Food-14
14345: PPUSH
14346: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
14350: LD_EXP 61
14354: PPUSH
14355: LD_STRING DJy-Food-15
14357: PPUSH
14358: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
14362: LD_EXP 61
14366: PPUSH
14367: LD_STRING DJy-Food-16
14369: PPUSH
14370: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
14374: LD_EXP 61
14378: PPUSH
14379: LD_STRING DJy-Food-17
14381: PPUSH
14382: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14386: LD_STRING M3-out
14388: PPUSH
14389: CALL_OW 337
// DialogueOff ;
14393: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
14397: LD_EXP 61
14401: PPUSH
14402: LD_INT 1
14404: PPUSH
14405: LD_INT 10
14407: PPUSH
14408: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14412: LD_EXP 61
14416: PPUSH
14417: LD_INT 95
14419: PPUSH
14420: LD_INT 17
14422: PPUSH
14423: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14427: LD_INT 35
14429: PPUSH
14430: CALL_OW 67
// if not HasTask ( Jerry ) then
14434: LD_EXP 61
14438: PPUSH
14439: CALL_OW 314
14443: NOT
14444: IFFALSE 14461
// ComMoveXY ( Jerry , 95 , 17 ) ;
14446: LD_EXP 61
14450: PPUSH
14451: LD_INT 95
14453: PPUSH
14454: LD_INT 17
14456: PPUSH
14457: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14461: LD_EXP 61
14465: PPUSH
14466: LD_INT 95
14468: PPUSH
14469: LD_INT 17
14471: PPUSH
14472: CALL_OW 307
14476: IFFALSE 14427
// SetCargo ( Jerry , mat_cans , 0 ) ;
14478: LD_EXP 61
14482: PPUSH
14483: LD_INT 1
14485: PPUSH
14486: LD_INT 0
14488: PPUSH
14489: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14493: LD_ADDR_EXP 58
14497: PUSH
14498: LD_EXP 58
14502: PPUSH
14503: LD_EXP 61
14507: PPUSH
14508: CALL 68237 0 2
14512: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14513: LD_ADDR_VAR 0 1
14517: PUSH
14518: LD_INT 22
14520: PUSH
14521: LD_INT 4
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 23
14530: PUSH
14531: LD_INT 1
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PPUSH
14542: CALL_OW 69
14546: PUSH
14547: FOR_IN
14548: IFFALSE 14564
// SetLives ( i , 1000 ) ;
14550: LD_VAR 0 1
14554: PPUSH
14555: LD_INT 1000
14557: PPUSH
14558: CALL_OW 234
14562: GO 14547
14564: POP
14565: POP
// end ;
14566: PPOPN 2
14568: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14569: LD_EXP 30
14573: NOT
14574: IFFALSE 14582
14576: PUSH
14577: LD_EXP 6
14581: AND
14582: IFFALSE 15010
14584: GO 14586
14586: DISABLE
14587: LD_INT 0
14589: PPUSH
14590: PPUSH
// begin tmp := [ ] ;
14591: LD_ADDR_VAR 0 2
14595: PUSH
14596: EMPTY
14597: ST_TO_ADDR
// uc_side := 3 ;
14598: LD_ADDR_OWVAR 20
14602: PUSH
14603: LD_INT 3
14605: ST_TO_ADDR
// uc_nation := 3 ;
14606: LD_ADDR_OWVAR 21
14610: PUSH
14611: LD_INT 3
14613: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14614: LD_INT 1
14616: PPUSH
14617: LD_INT 8
14619: PPUSH
14620: CALL_OW 381
// un := CreateHuman ;
14624: LD_ADDR_VAR 0 1
14628: PUSH
14629: CALL_OW 44
14633: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14634: LD_VAR 0 1
14638: PPUSH
14639: LD_INT 173
14641: PPUSH
14642: LD_INT 104
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14652: LD_ADDR_VAR 0 2
14656: PUSH
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 1
14666: PPUSH
14667: CALL 68237 0 2
14671: ST_TO_ADDR
// un := CreateHuman ;
14672: LD_ADDR_VAR 0 1
14676: PUSH
14677: CALL_OW 44
14681: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14682: LD_VAR 0 1
14686: PPUSH
14687: LD_INT 73
14689: PPUSH
14690: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14694: LD_ADDR_VAR 0 2
14698: PUSH
14699: LD_VAR 0 2
14703: PPUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL 68237 0 2
14713: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14714: LD_INT 35
14716: PPUSH
14717: CALL_OW 67
// if isAlarm then
14721: LD_EXP 17
14725: IFFALSE 14729
// exit ;
14727: GO 15010
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 12 ;
14729: LD_EXP 51
14733: PPUSH
14734: CALL_OW 255
14738: PUSH
14739: LD_INT 2
14741: EQUAL
14742: IFFALSE 14762
14744: PUSH
14745: LD_EXP 51
14749: PPUSH
14750: LD_INT 73
14752: PPUSH
14753: CALL_OW 296
14757: PUSH
14758: LD_INT 12
14760: LESS
14761: AND
14762: IFFALSE 14714
// InGameOn ;
14764: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14768: LD_INT 73
14770: PPUSH
14771: CALL_OW 250
14775: PPUSH
14776: LD_INT 73
14778: PPUSH
14779: CALL_OW 251
14783: PPUSH
14784: LD_INT 2
14786: PPUSH
14787: LD_INT 9
14789: NEG
14790: PPUSH
14791: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14795: LD_INT 73
14797: PPUSH
14798: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14802: LD_EXP 51
14806: PPUSH
14807: LD_INT 73
14809: PPUSH
14810: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14814: LD_EXP 51
14818: PPUSH
14819: LD_STRING DK-Plastic-1
14821: PPUSH
14822: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14826: LD_EXP 51
14830: PPUSH
14831: LD_STRING DK-Plastic-2
14833: PPUSH
14834: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14838: LD_EXP 51
14842: PPUSH
14843: LD_INT 73
14845: PPUSH
14846: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14850: LD_INT 35
14852: PPUSH
14853: CALL_OW 67
// if isAlarm then
14857: LD_EXP 17
14861: IFFALSE 14865
// exit ;
14863: GO 15010
// until GetDistUnits ( Kaia , barExplosion ) < 8 ;
14865: LD_EXP 51
14869: PPUSH
14870: LD_INT 73
14872: PPUSH
14873: CALL_OW 296
14877: PUSH
14878: LD_INT 8
14880: LESS
14881: IFFALSE 14850
// ComHold ( Kaia ) ;
14883: LD_EXP 51
14887: PPUSH
14888: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14892: LD_VAR 0 2
14896: PUSH
14897: LD_INT 1
14899: ARRAY
14900: PPUSH
14901: LD_STRING DRum-Plastic-3
14903: PPUSH
14904: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14908: LD_VAR 0 2
14912: PUSH
14913: LD_INT 2
14915: ARRAY
14916: PPUSH
14917: LD_STRING DRum2-Plastic-4
14919: PPUSH
14920: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14924: LD_VAR 0 2
14928: PUSH
14929: LD_INT 1
14931: ARRAY
14932: PPUSH
14933: LD_STRING DRum-Plastic-5
14935: PPUSH
14936: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14940: LD_VAR 0 2
14944: PUSH
14945: LD_INT 2
14947: ARRAY
14948: PPUSH
14949: LD_STRING DRum2-Plastic-6
14951: PPUSH
14952: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14956: LD_EXP 51
14960: PPUSH
14961: LD_STRING DK-Plastic-7
14963: PPUSH
14964: CALL_OW 88
// InGameOff ;
14968: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14972: LD_INT 73
14974: PPUSH
14975: CALL_OW 250
14979: PPUSH
14980: LD_INT 73
14982: PPUSH
14983: CALL_OW 251
14987: PPUSH
14988: LD_INT 2
14990: PPUSH
14991: CALL_OW 331
// explosionsTakenByRussians := true ;
14995: LD_ADDR_EXP 21
14999: PUSH
15000: LD_INT 1
15002: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
15003: LD_STRING ExplosivesInfo
15005: PPUSH
15006: CALL_OW 97
// end ;
15010: PPOPN 2
15012: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do var class ;
15013: LD_EXP 21
15017: IFFALSE 15034
15019: PUSH
15020: LD_EXP 51
15024: PPUSH
15025: CALL_OW 255
15029: PUSH
15030: LD_INT 2
15032: EQUAL
15033: AND
15034: IFFALSE 15050
15036: PUSH
15037: LD_EXP 51
15041: PPUSH
15042: LD_INT 61
15044: PPUSH
15045: CALL 21044 0 2
15049: AND
15050: IFFALSE 15059
15052: PUSH
15053: LD_EXP 17
15057: NOT
15058: AND
15059: IFFALSE 15068
15061: PUSH
15062: LD_EXP 30
15066: NOT
15067: AND
15068: IFFALSE 15379
15070: GO 15072
15072: DISABLE
15073: LD_INT 0
15075: PPUSH
// begin class := GetClass ( Kaia ) ;
15076: LD_ADDR_VAR 0 1
15080: PUSH
15081: LD_EXP 51
15085: PPUSH
15086: CALL_OW 257
15090: ST_TO_ADDR
// if class <> class_prison then
15091: LD_VAR 0 1
15095: PUSH
15096: LD_INT 33
15098: NONEQUAL
15099: IFFALSE 15220
// begin Query ( QKaiaWeapon ) ;
15101: LD_STRING QKaiaWeapon
15103: PPUSH
15104: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15108: LD_INT 67
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15118: LD_INT 192
15120: PPUSH
15121: LD_INT 71
15123: PPUSH
15124: CALL_OW 86
// kaiaWeaponHidden := class ;
15128: LD_ADDR_EXP 45
15132: PUSH
15133: LD_VAR 0 1
15137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15138: LD_INT 35
15140: PPUSH
15141: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15145: LD_EXP 51
15149: PPUSH
15150: LD_INT 67
15152: PPUSH
15153: CALL_OW 308
15157: IFFALSE 15138
// repeat wait ( 1 ) ;
15159: LD_INT 1
15161: PPUSH
15162: CALL_OW 67
// ComWalk ( Kaia ) ;
15166: LD_EXP 51
15170: PPUSH
15171: CALL_OW 138
// until not Crawls ( Kaia ) ;
15175: LD_EXP 51
15179: PPUSH
15180: CALL_OW 318
15184: NOT
15185: IFFALSE 15159
// SetClass ( Kaia , class_prison ) ;
15187: LD_EXP 51
15191: PPUSH
15192: LD_INT 33
15194: PPUSH
15195: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15199: LD_INT 35
15201: PPUSH
15202: CALL_OW 67
// until InEntrance ( Kaia , ruFac ) ;
15206: LD_EXP 51
15210: PPUSH
15211: LD_INT 61
15213: PPUSH
15214: CALL 21044 0 2
15218: IFFALSE 15199
// end ; if knowWhereExplosivesAre then
15220: LD_EXP 34
15224: IFFALSE 15228
// exit ;
15226: GO 15379
// InGameOn ;
15228: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
15232: LD_INT 61
15234: PPUSH
15235: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15239: LD_EXP 51
15243: PPUSH
15244: LD_INT 3
15246: PPUSH
15247: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
15251: LD_EXP 51
15255: PPUSH
15256: LD_INT 61
15258: PPUSH
15259: CALL_OW 120
// wait ( 0 0$2 ) ;
15263: LD_INT 70
15265: PPUSH
15266: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15270: LD_EXP 51
15274: PPUSH
15275: LD_STRING DK-Plastic-8
15277: PPUSH
15278: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
15282: LD_EXP 67
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PPUSH
15291: LD_STRING DRuMch-Plastic-9
15293: PPUSH
15294: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15298: LD_EXP 51
15302: PPUSH
15303: LD_STRING DK-Plastic-10
15305: PPUSH
15306: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
15310: LD_EXP 67
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: PPUSH
15319: LD_STRING DRuMch-Plastic-a-11
15321: PPUSH
15322: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
15326: LD_EXP 51
15330: PPUSH
15331: LD_STRING DK-Plastic-a-12
15333: PPUSH
15334: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
15338: LD_EXP 67
15342: PUSH
15343: LD_INT 1
15345: ARRAY
15346: PPUSH
15347: LD_STRING DRuMch-Plastic-a-13
15349: PPUSH
15350: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
15354: LD_EXP 51
15358: PPUSH
15359: LD_INT 2
15361: PPUSH
15362: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15366: LD_EXP 51
15370: PPUSH
15371: CALL_OW 122
// InGameOff ;
15375: CALL_OW 9
// end ;
15379: PPOPN 1
15381: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do var class ;
15382: LD_EXP 21
15386: IFFALSE 15403
15388: PUSH
15389: LD_EXP 51
15393: PPUSH
15394: CALL_OW 255
15398: PUSH
15399: LD_INT 2
15401: EQUAL
15402: AND
15403: IFFALSE 15419
15405: PUSH
15406: LD_EXP 51
15410: PPUSH
15411: LD_INT 196
15413: PPUSH
15414: CALL 21044 0 2
15418: AND
15419: IFFALSE 15428
15421: PUSH
15422: LD_EXP 17
15426: NOT
15427: AND
15428: IFFALSE 15437
15430: PUSH
15431: LD_EXP 30
15435: NOT
15436: AND
15437: IFFALSE 15923
15439: GO 15441
15441: DISABLE
15442: LD_INT 0
15444: PPUSH
// begin class := GetClass ( Kaia ) ;
15445: LD_ADDR_VAR 0 1
15449: PUSH
15450: LD_EXP 51
15454: PPUSH
15455: CALL_OW 257
15459: ST_TO_ADDR
// if class <> class_prison then
15460: LD_VAR 0 1
15464: PUSH
15465: LD_INT 33
15467: NONEQUAL
15468: IFFALSE 15589
// begin Query ( QKaiaWeapon ) ;
15470: LD_STRING QKaiaWeapon
15472: PPUSH
15473: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15477: LD_INT 67
15479: PPUSH
15480: LD_INT 1
15482: PPUSH
15483: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15487: LD_INT 192
15489: PPUSH
15490: LD_INT 71
15492: PPUSH
15493: CALL_OW 86
// kaiaWeaponHidden := class ;
15497: LD_ADDR_EXP 45
15501: PUSH
15502: LD_VAR 0 1
15506: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15507: LD_INT 35
15509: PPUSH
15510: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15514: LD_EXP 51
15518: PPUSH
15519: LD_INT 67
15521: PPUSH
15522: CALL_OW 308
15526: IFFALSE 15507
// repeat wait ( 1 ) ;
15528: LD_INT 1
15530: PPUSH
15531: CALL_OW 67
// ComWalk ( Kaia ) ;
15535: LD_EXP 51
15539: PPUSH
15540: CALL_OW 138
// until not Crawls ( Kaia ) ;
15544: LD_EXP 51
15548: PPUSH
15549: CALL_OW 318
15553: NOT
15554: IFFALSE 15528
// SetClass ( Kaia , class_prison ) ;
15556: LD_EXP 51
15560: PPUSH
15561: LD_INT 33
15563: PPUSH
15564: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15568: LD_INT 35
15570: PPUSH
15571: CALL_OW 67
// until InEntrance ( Kaia , ruWorkshop ) ;
15575: LD_EXP 51
15579: PPUSH
15580: LD_INT 196
15582: PPUSH
15583: CALL 21044 0 2
15587: IFFALSE 15568
// end ; InGameOn ;
15589: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
15593: LD_INT 196
15595: PPUSH
15596: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15600: LD_EXP 51
15604: PPUSH
15605: LD_INT 3
15607: PPUSH
15608: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
15612: LD_EXP 51
15616: PPUSH
15617: LD_INT 196
15619: PPUSH
15620: CALL_OW 120
// wait ( 0 0$2 ) ;
15624: LD_INT 70
15626: PPUSH
15627: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15631: LD_EXP 51
15635: PPUSH
15636: LD_STRING DK-Plastic-8
15638: PPUSH
15639: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
15643: LD_EXP 68
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PPUSH
15652: LD_STRING DRuMch-Plastic-9
15654: PPUSH
15655: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15659: LD_EXP 51
15663: PPUSH
15664: LD_STRING DK-Plastic-10
15666: PPUSH
15667: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
15671: LD_EXP 68
15675: PUSH
15676: LD_INT 1
15678: ARRAY
15679: PPUSH
15680: LD_STRING DRuMch-Plastic-11
15682: PPUSH
15683: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
15687: LD_EXP 51
15691: PPUSH
15692: LD_STRING DK-Plastic-12
15694: PPUSH
15695: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15699: LD_EXP 51
15703: PPUSH
15704: LD_STRING DK-Plastic-13
15706: PPUSH
15707: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15711: LD_EXP 68
15715: PUSH
15716: LD_INT 1
15718: ARRAY
15719: PPUSH
15720: LD_STRING DRuMch-Plastic-14
15722: PPUSH
15723: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15727: LD_EXP 69
15731: PPUSH
15732: LD_INT 167
15734: PPUSH
15735: LD_INT 34
15737: PPUSH
15738: LD_INT 3
15740: PPUSH
15741: LD_INT 0
15743: PPUSH
15744: CALL 70397 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15748: LD_EXP 69
15752: PPUSH
15753: LD_INT 196
15755: PPUSH
15756: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15760: LD_INT 35
15762: PPUSH
15763: CALL_OW 67
// if not HasTask ( Stiopa ) then
15767: LD_EXP 69
15771: PPUSH
15772: CALL_OW 314
15776: NOT
15777: IFFALSE 15791
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15779: LD_EXP 69
15783: PPUSH
15784: LD_INT 196
15786: PPUSH
15787: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15791: LD_EXP 69
15795: PPUSH
15796: CALL_OW 310
15800: IFFALSE 15760
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15802: LD_EXP 69
15806: PPUSH
15807: LD_STRING DSpn-Plastic-15
15809: PPUSH
15810: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15814: LD_EXP 70
15818: PPUSH
15819: LD_STRING DLr-Plastic-16
15821: PPUSH
15822: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15826: LD_EXP 51
15830: PPUSH
15831: LD_STRING DK-Plastic-17
15833: PPUSH
15834: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15838: LD_INT 10
15840: PPUSH
15841: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15845: LD_INT 196
15847: PPUSH
15848: CALL 20770 0 1
// SetSide ( Kaia , 2 ) ;
15852: LD_EXP 51
15856: PPUSH
15857: LD_INT 2
15859: PPUSH
15860: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15864: LD_EXP 51
15868: PPUSH
15869: CALL_OW 122
// InGameOff ;
15873: CALL_OW 9
// explosionsTakenByRussians := false ;
15877: LD_ADDR_EXP 21
15881: PUSH
15882: LD_INT 0
15884: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15885: LD_INT 170
15887: PPUSH
15888: LD_INT 28
15890: PPUSH
15891: LD_INT 2
15893: PPUSH
15894: LD_INT 6
15896: NEG
15897: PPUSH
15898: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15902: LD_INT 170
15904: PPUSH
15905: LD_INT 28
15907: PPUSH
15908: LD_INT 2
15910: PPUSH
15911: CALL_OW 331
// knowWhereExplosivesAre := true ;
15915: LD_ADDR_EXP 34
15919: PUSH
15920: LD_INT 1
15922: ST_TO_ADDR
// end ;
15923: PPOPN 1
15925: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15926: LD_EXP 34
15930: IFFALSE 15947
15932: PUSH
15933: LD_EXP 51
15937: PPUSH
15938: CALL_OW 255
15942: PUSH
15943: LD_INT 2
15945: EQUAL
15946: AND
15947: IFFALSE 15963
15949: PUSH
15950: LD_EXP 51
15954: PPUSH
15955: LD_INT 195
15957: PPUSH
15958: CALL 21044 0 2
15962: AND
15963: IFFALSE 15972
15965: PUSH
15966: LD_EXP 17
15970: NOT
15971: AND
15972: IFFALSE 15981
15974: PUSH
15975: LD_EXP 30
15979: NOT
15980: AND
15981: IFFALSE 16087
15983: GO 15985
15985: DISABLE
// begin InGameOn ;
15986: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15990: LD_EXP 51
15994: PPUSH
15995: LD_INT 3
15997: PPUSH
15998: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
16002: LD_EXP 51
16006: PPUSH
16007: LD_INT 195
16009: PPUSH
16010: CALL_OW 120
// wait ( 0 0$1 ) ;
16014: LD_INT 35
16016: PPUSH
16017: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
16021: LD_EXP 51
16025: PPUSH
16026: LD_STRING DK-Plastic-18
16028: PPUSH
16029: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
16033: LD_STRING ExplosivesInfoUsage
16035: PPUSH
16036: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
16040: LD_INT 195
16042: PPUSH
16043: CALL 20770 0 1
// SetSide ( Kaia , 2 ) ;
16047: LD_EXP 51
16051: PPUSH
16052: LD_INT 2
16054: PPUSH
16055: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
16059: LD_EXP 51
16063: PPUSH
16064: CALL_OW 122
// InGameOff ;
16068: CALL_OW 9
// hasExplosionCollected := true ;
16072: LD_ADDR_EXP 23
16076: PUSH
16077: LD_INT 1
16079: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
16080: LD_STRING M1-explosive-out
16082: PPUSH
16083: CALL_OW 337
// end ;
16087: END
// every 0 0$2 trigger kaiaWeaponHidden marked gameStartEvent do
16088: LD_EXP 45
16092: IFFALSE 16157
16094: GO 16096
16096: DISABLE
// begin enable ;
16097: ENABLE
// if not kaiaWeaponHidden then
16098: LD_EXP 45
16102: NOT
16103: IFFALSE 16107
// exit ;
16105: GO 16157
// repeat wait ( 1 ) ;
16107: LD_INT 1
16109: PPUSH
16110: CALL_OW 67
// ComWalk ( Kaia ) ;
16114: LD_EXP 51
16118: PPUSH
16119: CALL_OW 138
// until not Crawls ( Kaia ) ;
16123: LD_EXP 51
16127: PPUSH
16128: CALL_OW 318
16132: NOT
16133: IFFALSE 16107
// SetClass ( Kaia , kaiaWeaponHidden ) ;
16135: LD_EXP 51
16139: PPUSH
16140: LD_EXP 45
16144: PPUSH
16145: CALL_OW 336
// kaiaWeaponHidden := 0 ;
16149: LD_ADDR_EXP 45
16153: PUSH
16154: LD_INT 0
16156: ST_TO_ADDR
// end ;
16157: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
16158: LD_EXP 23
16162: IFFALSE 16171
16164: PUSH
16165: LD_EXP 17
16169: NOT
16170: AND
16171: IFFALSE 16180
16173: PUSH
16174: LD_EXP 30
16178: NOT
16179: AND
16180: IFFALSE 16355
16182: GO 16184
16184: DISABLE
16185: LD_INT 0
16187: PPUSH
16188: PPUSH
// begin for i in importantBuildingsList do
16189: LD_ADDR_VAR 0 1
16193: PUSH
16194: LD_EXP 35
16198: PUSH
16199: FOR_IN
16200: IFFALSE 16216
// MarkBuilding ( i , true ) ;
16202: LD_VAR 0 1
16206: PPUSH
16207: LD_INT 1
16209: PPUSH
16210: CALL 21422 0 2
16214: GO 16199
16216: POP
16217: POP
// repeat wait ( 0 0$1 ) ;
16218: LD_INT 35
16220: PPUSH
16221: CALL_OW 67
// for i in importantBuildingsList do
16225: LD_ADDR_VAR 0 1
16229: PUSH
16230: LD_EXP 35
16234: PUSH
16235: FOR_IN
16236: IFFALSE 16346
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
16238: LD_EXP 46
16242: PUSH
16243: LD_EXP 14
16247: UNION
16248: PPUSH
16249: LD_INT 22
16251: PUSH
16252: LD_INT 2
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 1
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 91
16271: PUSH
16272: LD_VAR 0 1
16276: PUSH
16277: LD_INT 6
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: LIST
16289: PPUSH
16290: CALL_OW 72
16294: IFFALSE 16344
// begin CenterNowOnUnits ( i ) ;
16296: LD_VAR 0 1
16300: PPUSH
16301: CALL_OW 87
// PlaceExplosives ( i ) ;
16305: LD_VAR 0 1
16309: PPUSH
16310: CALL 21319 0 1
// MarkBuilding ( i , false ) ;
16314: LD_VAR 0 1
16318: PPUSH
16319: LD_INT 0
16321: PPUSH
16322: CALL 21422 0 2
// importantBuildingsList := importantBuildingsList diff i ;
16326: LD_ADDR_EXP 35
16330: PUSH
16331: LD_EXP 35
16335: PUSH
16336: LD_VAR 0 1
16340: DIFF
16341: ST_TO_ADDR
// continue ;
16342: GO 16235
// end ; end ;
16344: GO 16235
16346: POP
16347: POP
// until not importantBuildingsList ;
16348: LD_EXP 35
16352: NOT
16353: IFFALSE 16218
// end ;
16355: PPOPN 2
16357: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
16358: LD_EXP 14
16362: PPUSH
16363: LD_INT 22
16365: PUSH
16366: LD_INT 2
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 95
16375: PUSH
16376: LD_INT 23
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PPUSH
16387: CALL_OW 72
16391: IFFALSE 16404
16393: PUSH
16394: LD_EXP 46
16398: PPUSH
16399: CALL_OW 302
16403: AND
16404: IFFALSE 16413
16406: PUSH
16407: LD_EXP 30
16411: NOT
16412: AND
16413: IFFALSE 16441
16415: GO 16417
16417: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
16418: LD_EXP 46
16422: PPUSH
16423: LD_STRING DH-End-1
16425: PPUSH
16426: CALL_OW 88
// if not activeExplosives then
16430: LD_EXP 36
16434: NOT
16435: IFFALSE 16441
// Explode ;
16437: CALL 24206 0 0
// end ;
16441: END
// function SayHEmpty ( ) ; begin
16442: LD_INT 0
16444: PPUSH
// case rand ( 1 , 3 ) of 1 :
16445: LD_INT 1
16447: PPUSH
16448: LD_INT 3
16450: PPUSH
16451: CALL_OW 12
16455: PUSH
16456: LD_INT 1
16458: DOUBLE
16459: EQUAL
16460: IFTRUE 16464
16462: GO 16479
16464: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
16465: LD_EXP 46
16469: PPUSH
16470: LD_STRING DH-Empty-1
16472: PPUSH
16473: CALL_OW 88
16477: GO 16526
16479: LD_INT 2
16481: DOUBLE
16482: EQUAL
16483: IFTRUE 16487
16485: GO 16502
16487: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
16488: LD_EXP 46
16492: PPUSH
16493: LD_STRING DH-Empty-2
16495: PPUSH
16496: CALL_OW 88
16500: GO 16526
16502: LD_INT 3
16504: DOUBLE
16505: EQUAL
16506: IFTRUE 16510
16508: GO 16525
16510: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
16511: LD_EXP 46
16515: PPUSH
16516: LD_STRING DH-Empty-3
16518: PPUSH
16519: CALL_OW 88
16523: GO 16526
16525: POP
// end ;
16526: LD_VAR 0 1
16530: RET
// function SayHVisited ( ) ; begin
16531: LD_INT 0
16533: PPUSH
// case rand ( 1 , 3 ) of 1 :
16534: LD_INT 1
16536: PPUSH
16537: LD_INT 3
16539: PPUSH
16540: CALL_OW 12
16544: PUSH
16545: LD_INT 1
16547: DOUBLE
16548: EQUAL
16549: IFTRUE 16553
16551: GO 16568
16553: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
16554: LD_EXP 46
16558: PPUSH
16559: LD_STRING DH-Visited-1
16561: PPUSH
16562: CALL_OW 88
16566: GO 16615
16568: LD_INT 2
16570: DOUBLE
16571: EQUAL
16572: IFTRUE 16576
16574: GO 16591
16576: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
16577: LD_EXP 46
16581: PPUSH
16582: LD_STRING DH-Visited-2
16584: PPUSH
16585: CALL_OW 88
16589: GO 16615
16591: LD_INT 3
16593: DOUBLE
16594: EQUAL
16595: IFTRUE 16599
16597: GO 16614
16599: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
16600: LD_EXP 46
16604: PPUSH
16605: LD_STRING DH-Visited-3
16607: PPUSH
16608: CALL_OW 88
16612: GO 16615
16614: POP
// end ;
16615: LD_VAR 0 1
16619: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
16620: LD_EXP 17
16624: NOT
16625: IFFALSE 16633
16627: PUSH
16628: LD_EXP 15
16632: AND
16633: IFFALSE 16650
16635: PUSH
16636: LD_EXP 46
16640: PPUSH
16641: CALL_OW 255
16645: PUSH
16646: LD_INT 2
16648: EQUAL
16649: AND
16650: IFFALSE 16663
16652: PUSH
16653: LD_EXP 46
16657: PPUSH
16658: CALL_OW 302
16662: AND
16663: IFFALSE 16676
16665: PUSH
16666: LD_EXP 46
16670: PPUSH
16671: CALL_OW 316
16675: AND
16676: IFFALSE 16685
16678: PUSH
16679: LD_EXP 30
16683: NOT
16684: AND
16685: IFFALSE 16751
16687: GO 16689
16689: DISABLE
16690: LD_INT 0
16692: PPUSH
// begin enable ;
16693: ENABLE
// for i in entranceAllowedList do
16694: LD_ADDR_VAR 0 1
16698: PUSH
16699: LD_EXP 15
16703: PUSH
16704: FOR_IN
16705: IFFALSE 16749
// if InEntrance ( Heike , i ) then
16707: LD_EXP 46
16711: PPUSH
16712: LD_VAR 0 1
16716: PPUSH
16717: CALL 21044 0 2
16721: IFFALSE 16747
// begin disable ( entranceEvent ) ;
16723: LD_INT 1
16725: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL 16754 0 1
// wait ( 0 0$3 ) ;
16735: LD_INT 105
16737: PPUSH
16738: CALL_OW 67
// enable ( entranceEvent ) ;
16742: LD_INT 1
16744: ENABLE_MARKED
// break ;
16745: GO 16749
// end ;
16747: GO 16704
16749: POP
16750: POP
// end ;
16751: PPOPN 1
16753: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
16754: LD_INT 0
16756: PPUSH
16757: PPUSH
16758: PPUSH
16759: PPUSH
// if not building then
16760: LD_VAR 0 1
16764: NOT
16765: IFFALSE 16769
// exit ;
16767: GO 19462
// if building in entranceVisitedList then
16769: LD_VAR 0 1
16773: PUSH
16774: LD_EXP 16
16778: IN
16779: IFFALSE 16787
// begin SayHVisited ( ) ;
16781: CALL 16531 0 0
// exit ;
16785: GO 19462
// end ; case Query ( EnterBuilding ) of 1 :
16787: LD_STRING EnterBuilding
16789: PPUSH
16790: CALL_OW 97
16794: PUSH
16795: LD_INT 1
16797: DOUBLE
16798: EQUAL
16799: IFTRUE 16803
16801: GO 16806
16803: POP
// ; 2 :
16804: GO 16820
16806: LD_INT 2
16808: DOUBLE
16809: EQUAL
16810: IFTRUE 16814
16812: GO 16819
16814: POP
// exit ; end ;
16815: GO 19462
16817: GO 16820
16819: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16820: LD_ADDR_EXP 16
16824: PUSH
16825: LD_EXP 16
16829: PPUSH
16830: LD_VAR 0 1
16834: PPUSH
16835: CALL 68237 0 2
16839: ST_TO_ADDR
// InGameOn ;
16840: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16844: LD_EXP 46
16848: PPUSH
16849: LD_INT 5
16851: PPUSH
16852: CALL_OW 235
// SetSide ( building , 5 ) ;
16856: LD_VAR 0 1
16860: PPUSH
16861: LD_INT 5
16863: PPUSH
16864: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16868: LD_EXP 46
16872: PPUSH
16873: LD_VAR 0 1
16877: PPUSH
16878: CALL_OW 120
// wait ( 0 0$3 ) ;
16882: LD_INT 105
16884: PPUSH
16885: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16889: LD_ADDR_VAR 0 4
16893: PUSH
16894: LD_INT 165
16896: PUSH
16897: LD_INT 106
16899: PUSH
16900: LD_INT 135
16902: PUSH
16903: LD_INT 162
16905: PUSH
16906: LD_INT 61
16908: PUSH
16909: LD_INT 109
16911: PUSH
16912: LD_INT 169
16914: PUSH
16915: LD_INT 13
16917: PUSH
16918: LD_INT 147
16920: PUSH
16921: LD_INT 137
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: ST_TO_ADDR
// if not building in tmp then
16936: LD_VAR 0 1
16940: PUSH
16941: LD_VAR 0 4
16945: IN
16946: NOT
16947: IFFALSE 16955
// SayHEmpty ( ) else
16949: CALL 16442 0 0
16953: GO 19409
// case building of laundry :
16955: LD_VAR 0 1
16959: PUSH
16960: LD_INT 165
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 17076
16968: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16969: LD_EXP 26
16973: IFFALSE 16982
16975: PUSH
16976: LD_EXP 27
16980: NOT
16981: AND
16982: IFFALSE 16991
16984: PUSH
16985: LD_EXP 28
16989: NOT
16990: AND
16991: IFFALSE 17046
// begin case Query ( HeikeInLaundry ) of 1 :
16993: LD_STRING HeikeInLaundry
16995: PPUSH
16996: CALL_OW 97
17000: PUSH
17001: LD_INT 1
17003: DOUBLE
17004: EQUAL
17005: IFTRUE 17009
17007: GO 17016
17009: POP
// SpawnHeikeAsRussian ; 2 :
17010: CALL 1840 0 0
17014: GO 17044
17016: LD_INT 2
17018: DOUBLE
17019: EQUAL
17020: IFTRUE 17024
17022: GO 17043
17024: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
17025: LD_ADDR_EXP 16
17029: PUSH
17030: LD_EXP 16
17034: PUSH
17035: LD_VAR 0 1
17039: DIFF
17040: ST_TO_ADDR
17041: GO 17044
17043: POP
// end else
17044: GO 17074
// begin entranceVisitedList := entranceVisitedList diff building ;
17046: LD_ADDR_EXP 16
17050: PUSH
17051: LD_EXP 16
17055: PUSH
17056: LD_VAR 0 1
17060: DIFF
17061: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17062: LD_EXP 46
17066: PPUSH
17067: LD_STRING DH-Locked
17069: PPUSH
17070: CALL_OW 88
// end ; end ; dougBar :
17074: GO 19409
17076: LD_INT 106
17078: DOUBLE
17079: EQUAL
17080: IFTRUE 17084
17082: GO 17448
17084: POP
// begin if contactWithAmerican and americanContact then
17085: LD_EXP 25
17089: IFFALSE 17097
17091: PUSH
17092: LD_EXP 10
17096: AND
17097: IFFALSE 17161
// begin Say ( Heike , DH-Escort-a-1 ) ;
17099: LD_EXP 46
17103: PPUSH
17104: LD_STRING DH-Escort-a-1
17106: PPUSH
17107: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
17111: LD_EXP 60
17115: PPUSH
17116: LD_STRING DCa-Escort-a-2
17118: PPUSH
17119: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
17123: LD_EXP 60
17127: PPUSH
17128: LD_STRING DCa-Escort-a-3
17130: PPUSH
17131: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
17135: LD_EXP 46
17139: PPUSH
17140: LD_STRING DH-Escort-a-4
17142: PPUSH
17143: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
17147: LD_EXP 46
17151: PPUSH
17152: LD_STRING DH-Escort-a-5
17154: PPUSH
17155: CALL_OW 88
// end else
17159: GO 17405
// if contactWithAmerican then
17161: LD_EXP 25
17165: IFFALSE 17205
// begin Say ( Heike , DH-Escort-b-1 ) ;
17167: LD_EXP 46
17171: PPUSH
17172: LD_STRING DH-Escort-b-1
17174: PPUSH
17175: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
17179: LD_EXP 60
17183: PPUSH
17184: LD_STRING DCa-Escort-b-2
17186: PPUSH
17187: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
17191: LD_EXP 60
17195: PPUSH
17196: LD_STRING DCa-Escort-b-3
17198: PPUSH
17199: CALL_OW 88
// end else
17203: GO 17405
// begin Say ( Doug , DCa-Deal-a-1 ) ;
17205: LD_EXP 60
17209: PPUSH
17210: LD_STRING DCa-Deal-a-1
17212: PPUSH
17213: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
17217: LD_EXP 60
17221: PPUSH
17222: LD_STRING DCa-Deal-a-2
17224: PPUSH
17225: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
17229: LD_EXP 46
17233: PPUSH
17234: LD_STRING DH-Deal-a-3
17236: PPUSH
17237: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
17241: LD_EXP 60
17245: PPUSH
17246: LD_STRING DCa-Deal-a-4
17248: PPUSH
17249: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
17253: LD_EXP 46
17257: PPUSH
17258: LD_STRING DH-Deal-a-5
17260: PPUSH
17261: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
17265: LD_EXP 60
17269: PPUSH
17270: LD_STRING DCa-Deal-a-6
17272: PPUSH
17273: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
17277: LD_EXP 60
17281: PPUSH
17282: LD_STRING DCa-Deal-a-7
17284: PPUSH
17285: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
17289: LD_EXP 60
17293: PPUSH
17294: LD_STRING DCa-Deal-a-8
17296: PPUSH
17297: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
17301: LD_EXP 60
17305: PPUSH
17306: LD_STRING DCa-Deal-a-9
17308: PPUSH
17309: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
17313: LD_EXP 60
17317: PPUSH
17318: LD_STRING DCa-Deal-a-10
17320: PPUSH
17321: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
17325: LD_EXP 60
17329: PPUSH
17330: LD_STRING DCa-Deal-a-11
17332: PPUSH
17333: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17337: LD_INT 10
17339: PPUSH
17340: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
17344: LD_EXP 60
17348: PPUSH
17349: LD_STRING DCa-Deal-a-12
17351: PPUSH
17352: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
17356: LD_EXP 46
17360: PPUSH
17361: LD_STRING DH-Deal-a-13
17363: PPUSH
17364: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
17368: LD_EXP 46
17372: PPUSH
17373: LD_STRING DH-Deal-a-14
17375: PPUSH
17376: CALL_OW 88
// contactWithAmerican := true ;
17380: LD_ADDR_EXP 25
17384: PUSH
17385: LD_INT 1
17387: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
17388: LD_INT 1
17390: PPUSH
17391: LD_STRING 08_DealWithDoug
17393: PPUSH
17394: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
17398: LD_STRING M1-american-out
17400: PPUSH
17401: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
17405: LD_EXP 60
17409: PPUSH
17410: LD_INT 2
17412: PPUSH
17413: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
17417: LD_ADDR_EXP 14
17421: PUSH
17422: LD_EXP 14
17426: PPUSH
17427: LD_EXP 60
17431: PPUSH
17432: CALL 68237 0 2
17436: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
17437: LD_EXP 60
17441: PPUSH
17442: CALL_OW 122
// end ; usLab :
17446: GO 19409
17448: LD_INT 135
17450: DOUBLE
17451: EQUAL
17452: IFTRUE 17456
17454: GO 17813
17456: POP
// begin if hasSniperRifle then
17457: LD_EXP 11
17461: IFFALSE 17811
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
17463: LD_EXP 51
17467: PPUSH
17468: CALL_OW 302
17472: IFFALSE 17486
17474: PUSH
17475: LD_EXP 51
17479: PUSH
17480: LD_EXP 14
17484: IN
17485: AND
17486: IFFALSE 17503
17488: PUSH
17489: LD_EXP 51
17493: PPUSH
17494: CALL_OW 255
17498: PUSH
17499: LD_INT 2
17501: EQUAL
17502: AND
17503: IFFALSE 17785
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
17505: LD_EXP 46
17509: PPUSH
17510: LD_EXP 51
17514: PPUSH
17515: CALL_OW 296
17519: PUSH
17520: LD_INT 10
17522: GREATER
17523: IFFALSE 17548
// begin Query ( KaiaDistance ) ;
17525: LD_STRING KaiaDistance
17527: PPUSH
17528: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
17532: LD_ADDR_EXP 16
17536: PUSH
17537: LD_EXP 16
17541: PUSH
17542: LD_INT 135
17544: DIFF
17545: ST_TO_ADDR
// end else
17546: GO 17783
// begin SetSide ( Kaia , 5 ) ;
17548: LD_EXP 51
17552: PPUSH
17553: LD_INT 5
17555: PPUSH
17556: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
17560: LD_EXP 51
17564: PPUSH
17565: LD_INT 135
17567: PPUSH
17568: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17572: LD_INT 35
17574: PPUSH
17575: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17579: LD_EXP 51
17583: PPUSH
17584: CALL_OW 310
17588: IFFALSE 17572
// Say ( Kaia , DK-Sniper-1 ) ;
17590: LD_EXP 51
17594: PPUSH
17595: LD_STRING DK-Sniper-1
17597: PPUSH
17598: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
17602: LD_EXP 51
17606: PPUSH
17607: CALL_OW 257
17611: PUSH
17612: LD_INT 34
17614: EQUAL
17615: IFFALSE 17629
17617: PUSH
17618: LD_EXP 48
17622: PUSH
17623: LD_EXP 14
17627: IN
17628: AND
17629: IFFALSE 17642
17631: PUSH
17632: LD_EXP 48
17636: PPUSH
17637: CALL_OW 302
17641: AND
17642: IFFALSE 17673
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
17644: LD_EXP 51
17648: PPUSH
17649: LD_STRING DK-Sniper-a-2
17651: PPUSH
17652: CALL_OW 88
// giveSniperRifleToMike := true ;
17656: LD_ADDR_EXP 42
17660: PUSH
17661: LD_INT 1
17663: ST_TO_ADDR
// Query ( QSniperMike ) ;
17664: LD_STRING QSniperMike
17666: PPUSH
17667: CALL_OW 97
// end else
17671: GO 17762
// begin Say ( Kaia , DK-Sniper-2 ) ;
17673: LD_EXP 51
17677: PPUSH
17678: LD_STRING DK-Sniper-2
17680: PPUSH
17681: CALL_OW 88
// repeat wait ( 1 ) ;
17685: LD_INT 1
17687: PPUSH
17688: CALL_OW 67
// ComWalk ( Kaia ) ;
17692: LD_EXP 51
17696: PPUSH
17697: CALL_OW 138
// until not Crawls ( Kaia ) ;
17701: LD_EXP 51
17705: PPUSH
17706: CALL_OW 318
17710: NOT
17711: IFFALSE 17685
// SetClass ( Kaia , class_hunter ) ;
17713: LD_EXP 51
17717: PPUSH
17718: LD_INT 32
17720: PPUSH
17721: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
17725: LD_EXP 53
17729: PPUSH
17730: CALL_OW 302
17734: IFFALSE 17748
17736: PUSH
17737: LD_EXP 53
17741: PUSH
17742: LD_EXP 14
17746: IN
17747: AND
17748: IFFALSE 17762
// Say ( Markov , DMar-Sniper-3 ) ;
17750: LD_EXP 53
17754: PPUSH
17755: LD_STRING DMar-Sniper-3
17757: PPUSH
17758: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
17762: LD_EXP 51
17766: PPUSH
17767: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
17771: LD_EXP 51
17775: PPUSH
17776: LD_INT 2
17778: PPUSH
17779: CALL_OW 235
// end ; end else
17783: GO 17811
// begin entranceVisitedList := entranceVisitedList diff usLab ;
17785: LD_ADDR_EXP 16
17789: PUSH
17790: LD_EXP 16
17794: PUSH
17795: LD_INT 135
17797: DIFF
17798: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17799: LD_EXP 46
17803: PPUSH
17804: LD_STRING DH-Locked
17806: PPUSH
17807: CALL_OW 88
// end ; end ; end ; drugsLab :
17811: GO 19409
17813: LD_INT 162
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 17954
17821: POP
// begin if hasStimDrugs then
17822: LD_EXP 9
17826: IFFALSE 17940
// begin wait ( 0 0$1 ) ;
17828: LD_INT 35
17830: PPUSH
17831: CALL_OW 67
// if not hasStimDrugsCollected then
17835: LD_EXP 24
17839: NOT
17840: IFFALSE 17882
// begin Say ( Heike , DH-Lab-1 ) ;
17842: LD_EXP 46
17846: PPUSH
17847: LD_STRING DH-Lab-1
17849: PPUSH
17850: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17854: LD_INT 5
17856: PPUSH
17857: LD_INT 2
17859: PPUSH
17860: LD_INT 2
17862: PPUSH
17863: CALL_OW 322
// hasStimDrugsCollected := true ;
17867: LD_ADDR_EXP 24
17871: PUSH
17872: LD_INT 1
17874: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17875: LD_STRING M1-drugs-out
17877: PPUSH
17878: CALL_OW 604
// end ; if not hasExplosionCollected then
17882: LD_EXP 23
17886: NOT
17887: IFFALSE 17905
// entranceVisitedList := entranceVisitedList diff drugsLab else
17889: LD_ADDR_EXP 16
17893: PUSH
17894: LD_EXP 16
17898: PUSH
17899: LD_INT 162
17901: DIFF
17902: ST_TO_ADDR
17903: GO 17938
// begin wait ( 0 0$3 ) ;
17905: LD_INT 105
17907: PPUSH
17908: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17912: LD_EXP 46
17916: PPUSH
17917: LD_STRING DH-Lab-2
17919: PPUSH
17920: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17924: LD_STRING M1-drugsLab-out
17926: PPUSH
17927: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17931: LD_INT 162
17933: PPUSH
17934: CALL 21319 0 1
// end ; end else
17938: GO 17952
// Say ( Heike , DH-Locked ) ;
17940: LD_EXP 46
17944: PPUSH
17945: LD_STRING DH-Locked
17947: PPUSH
17948: CALL_OW 88
// end ; ruFac :
17952: GO 19409
17954: LD_INT 61
17956: DOUBLE
17957: EQUAL
17958: IFTRUE 17962
17960: GO 18074
17962: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17963: LD_EXP 53
17967: PPUSH
17968: CALL_OW 302
17972: IFFALSE 17987
17974: PUSH
17975: LD_EXP 53
17979: PUSH
17980: LD_EXP 14
17984: IN
17985: NOT
17986: AND
17987: IFFALSE 18068
// begin Say ( Heike , DH-Krastyo-1 ) ;
17989: LD_EXP 46
17993: PPUSH
17994: LD_STRING DH-Krastyo-1
17996: PPUSH
17997: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
18001: LD_EXP 53
18005: PPUSH
18006: LD_STRING DMar-Krastyo-2
18008: PPUSH
18009: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
18013: LD_EXP 53
18017: PPUSH
18018: LD_STRING DMar-Krastyo-3
18020: PPUSH
18021: CALL_OW 88
// SetSide ( Markov , 2 ) ;
18025: LD_EXP 53
18029: PPUSH
18030: LD_INT 2
18032: PPUSH
18033: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
18037: LD_ADDR_EXP 14
18041: PUSH
18042: LD_EXP 14
18046: PPUSH
18047: LD_EXP 53
18051: PPUSH
18052: CALL 68237 0 2
18056: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
18057: LD_EXP 53
18061: PPUSH
18062: CALL_OW 122
// end else
18066: GO 18072
// SayHEmpty ( ) ;
18068: CALL 16442 0 0
// end ; ruBarKam :
18072: GO 19409
18074: LD_INT 109
18076: DOUBLE
18077: EQUAL
18078: IFTRUE 18082
18080: GO 18231
18082: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
18083: LD_EXP 50
18087: PPUSH
18088: CALL_OW 302
18092: IFFALSE 18107
18094: PUSH
18095: LD_EXP 50
18099: PUSH
18100: LD_EXP 14
18104: IN
18105: NOT
18106: AND
18107: IFFALSE 18225
// begin Say ( Heike , DH-Kamil-1 ) ;
18109: LD_EXP 46
18113: PPUSH
18114: LD_STRING DH-Kamil-1
18116: PPUSH
18117: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
18121: LD_EXP 50
18125: PPUSH
18126: LD_STRING DKam-Kamil-2
18128: PPUSH
18129: CALL_OW 88
// if IsOk ( Sophia ) then
18133: LD_EXP 52
18137: PPUSH
18138: CALL_OW 302
18142: IFFALSE 18182
// if Sophia in heikeSquad then
18144: LD_EXP 52
18148: PUSH
18149: LD_EXP 14
18153: IN
18154: IFFALSE 18170
// Say ( Kamil , DKam-Kamil-a-3 ) else
18156: LD_EXP 50
18160: PPUSH
18161: LD_STRING DKam-Kamil-a-3
18163: PPUSH
18164: CALL_OW 88
18168: GO 18182
// Say ( Kamil , DKam-Kamil-3 ) ;
18170: LD_EXP 50
18174: PPUSH
18175: LD_STRING DKam-Kamil-3
18177: PPUSH
18178: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
18182: LD_EXP 50
18186: PPUSH
18187: LD_INT 2
18189: PPUSH
18190: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
18194: LD_ADDR_EXP 14
18198: PUSH
18199: LD_EXP 14
18203: PPUSH
18204: LD_EXP 50
18208: PPUSH
18209: CALL 68237 0 2
18213: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
18214: LD_EXP 50
18218: PPUSH
18219: CALL_OW 122
// end else
18223: GO 18229
// SayHEmpty ( ) ;
18225: CALL 16442 0 0
// end ; ruOutpost1 :
18229: GO 19409
18231: LD_INT 169
18233: DOUBLE
18234: EQUAL
18235: IFTRUE 18239
18237: GO 18480
18239: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
18240: LD_EXP 55
18244: PPUSH
18245: CALL_OW 302
18249: IFFALSE 18264
18251: PUSH
18252: LD_EXP 55
18256: PUSH
18257: LD_EXP 14
18261: IN
18262: NOT
18263: AND
18264: IFFALSE 18474
// begin if hasMethanol then
18266: LD_EXP 13
18270: IFFALSE 18403
// begin Say ( Heike , DH-Kurt-1 ) ;
18272: LD_EXP 46
18276: PPUSH
18277: LD_STRING DH-Kurt-1
18279: PPUSH
18280: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
18284: LD_EXP 55
18288: PPUSH
18289: LD_STRING DKs-Kurt-2
18291: PPUSH
18292: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
18296: LD_EXP 47
18300: PPUSH
18301: LD_INT 169
18303: PPUSH
18304: CALL_OW 296
18308: PUSH
18309: LD_INT 10
18311: LESS
18312: IFFALSE 18326
18314: PUSH
18315: LD_EXP 47
18319: PUSH
18320: LD_EXP 14
18324: IN
18325: AND
18326: IFFALSE 18401
// begin ComMoveXY ( Givi , 100 , 37 ) ;
18328: LD_EXP 47
18332: PPUSH
18333: LD_INT 100
18335: PPUSH
18336: LD_INT 37
18338: PPUSH
18339: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
18343: LD_EXP 47
18347: PPUSH
18348: LD_INT 169
18350: PPUSH
18351: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
18355: LD_INT 35
18357: PPUSH
18358: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
18362: LD_EXP 47
18366: PPUSH
18367: LD_INT 169
18369: PPUSH
18370: CALL_OW 296
18374: PUSH
18375: LD_INT 7
18377: LESS
18378: IFFALSE 18355
// Say ( Givi , DG-Kurt-3 ) ;
18380: LD_EXP 47
18384: PPUSH
18385: LD_STRING DG-Kurt-3
18387: PPUSH
18388: CALL_OW 88
// ComStop ( Givi ) ;
18392: LD_EXP 47
18396: PPUSH
18397: CALL_OW 141
// end ; end else
18401: GO 18431
// begin Say ( Heike , DH-Kurt-1 ) ;
18403: LD_EXP 46
18407: PPUSH
18408: LD_STRING DH-Kurt-1
18410: PPUSH
18411: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
18415: LD_EXP 55
18419: PPUSH
18420: LD_STRING DKs-Kurt-2
18422: PPUSH
18423: CALL_OW 88
// SpawnAdditionalRuGuards ;
18427: CALL 3677 0 0
// end ; SetSide ( Kurt , 2 ) ;
18431: LD_EXP 55
18435: PPUSH
18436: LD_INT 2
18438: PPUSH
18439: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
18443: LD_ADDR_EXP 14
18447: PUSH
18448: LD_EXP 14
18452: PPUSH
18453: LD_EXP 55
18457: PPUSH
18458: CALL 68237 0 2
18462: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
18463: LD_EXP 55
18467: PPUSH
18468: CALL_OW 122
// end else
18472: GO 18478
// SayHEmpty ( ) ;
18474: CALL 16442 0 0
// end ; ruOutpostBar :
18478: GO 19409
18480: LD_INT 13
18482: DOUBLE
18483: EQUAL
18484: IFTRUE 18488
18486: GO 18534
18488: POP
// begin if not hasGuardPatrolPlan then
18489: LD_EXP 18
18493: NOT
18494: IFFALSE 18528
// begin Say ( Heike , DH-PatrolPlan ) ;
18496: LD_EXP 46
18500: PPUSH
18501: LD_STRING DH-PatrolPlan
18503: PPUSH
18504: CALL_OW 88
// hasGuardPatrolPlan := true ;
18508: LD_ADDR_EXP 18
18512: PUSH
18513: LD_INT 1
18515: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
18516: LD_INT 6
18518: PPUSH
18519: LD_INT 2
18521: PPUSH
18522: CALL_OW 343
// end else
18526: GO 18532
// SayHEmpty ( ) ;
18528: CALL 16442 0 0
// end ; ruKaiaBar :
18532: GO 19409
18534: LD_INT 147
18536: DOUBLE
18537: EQUAL
18538: IFTRUE 18542
18540: GO 18691
18542: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
18543: LD_EXP 51
18547: PPUSH
18548: CALL_OW 302
18552: IFFALSE 18567
18554: PUSH
18555: LD_EXP 51
18559: PUSH
18560: LD_EXP 14
18564: IN
18565: NOT
18566: AND
18567: IFFALSE 18689
// begin Say ( Heike , DH-Kaia-1 ) ;
18569: LD_EXP 46
18573: PPUSH
18574: LD_STRING DH-Kaia-1
18576: PPUSH
18577: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
18581: LD_EXP 51
18585: PPUSH
18586: LD_STRING DK-Kaia-2
18588: PPUSH
18589: CALL_OW 88
// if hasSniperRifle then
18593: LD_EXP 11
18597: IFFALSE 18648
// begin if IsOk ( Markov ) then
18599: LD_EXP 53
18603: PPUSH
18604: CALL_OW 302
18608: IFFALSE 18624
// Say ( Kaia , DK-Kaia-3 ) else
18610: LD_EXP 51
18614: PPUSH
18615: LD_STRING DK-Kaia-3
18617: PPUSH
18618: CALL_OW 88
18622: GO 18636
// Say ( Kaia , DK-Kaia-a-3 ) ;
18624: LD_EXP 51
18628: PPUSH
18629: LD_STRING DK-Kaia-a-3
18631: PPUSH
18632: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
18636: LD_EXP 46
18640: PPUSH
18641: LD_STRING DH-Kaia-4
18643: PPUSH
18644: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
18648: LD_EXP 51
18652: PPUSH
18653: LD_INT 2
18655: PPUSH
18656: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
18660: LD_ADDR_EXP 14
18664: PUSH
18665: LD_EXP 14
18669: PPUSH
18670: LD_EXP 51
18674: PPUSH
18675: CALL 68237 0 2
18679: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
18680: LD_EXP 51
18684: PPUSH
18685: CALL_OW 122
// end ; end ; ruWeaponsBar :
18689: GO 19409
18691: LD_INT 137
18693: DOUBLE
18694: EQUAL
18695: IFTRUE 18699
18697: GO 19408
18699: POP
// begin if hasWeapons then
18700: LD_EXP 19
18704: IFFALSE 19394
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
18706: LD_ADDR_EXP 16
18710: PUSH
18711: LD_EXP 16
18715: PUSH
18716: LD_INT 137
18718: DIFF
18719: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
18720: LD_ADDR_VAR 0 4
18724: PUSH
18725: LD_EXP 14
18729: PPUSH
18730: LD_INT 91
18732: PUSH
18733: LD_EXP 46
18737: PUSH
18738: LD_INT 8
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: PPUSH
18746: CALL_OW 72
18750: ST_TO_ADDR
// if not heikeSquad or not tmp then
18751: LD_EXP 14
18755: NOT
18756: IFTRUE 18765
18758: PUSH
18759: LD_VAR 0 4
18763: NOT
18764: OR
18765: IFFALSE 18781
// Say ( Heike , DH-Weapons-Alone ) else
18767: LD_EXP 46
18771: PPUSH
18772: LD_STRING DH-Weapons-Alone
18774: PPUSH
18775: CALL_OW 88
18779: GO 19392
// begin if not firstArmouryDialog then
18781: LD_EXP 39
18785: NOT
18786: IFFALSE 18845
// begin Say ( Heike , DH-Weapons-1 ) ;
18788: LD_EXP 46
18792: PPUSH
18793: LD_STRING DH-Weapons-1
18795: PPUSH
18796: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
18800: LD_EXP 46
18804: PPUSH
18805: LD_STRING DH-Weapons-2
18807: PPUSH
18808: CALL_OW 88
// Query ( Weapons ) ;
18812: LD_STRING Weapons
18814: PPUSH
18815: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
18819: LD_INT 65
18821: PPUSH
18822: LD_INT 1
18824: PPUSH
18825: CALL_OW 424
// canEquipWeapons := true ;
18829: LD_ADDR_EXP 41
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// firstArmouryDialog := true ;
18837: LD_ADDR_EXP 39
18841: PUSH
18842: LD_INT 1
18844: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
18845: LD_EXP 8
18849: IFFALSE 18863
18851: PUSH
18852: LD_EXP 51
18856: PUSH
18857: LD_VAR 0 4
18861: IN
18862: AND
18863: IFFALSE 18880
18865: PUSH
18866: LD_EXP 51
18870: PPUSH
18871: CALL_OW 257
18875: PUSH
18876: LD_INT 34
18878: NONEQUAL
18879: AND
18880: IFFALSE 19030
// begin SetSide ( Kaia , 5 ) ;
18882: LD_EXP 51
18886: PPUSH
18887: LD_INT 5
18889: PPUSH
18890: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
18894: LD_EXP 51
18898: PPUSH
18899: LD_INT 137
18901: PPUSH
18902: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18906: LD_INT 35
18908: PPUSH
18909: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18913: LD_EXP 51
18917: PPUSH
18918: CALL_OW 310
18922: IFFALSE 18906
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18924: LD_EXP 46
18928: PPUSH
18929: LD_STRING DH-Kaia-Revolver-2
18931: PPUSH
18932: CALL_OW 88
// SetClassKaiaRevolver ;
18936: CALL 1771 0 0
// hasRevolver := false ;
18940: LD_ADDR_EXP 8
18944: PUSH
18945: LD_INT 0
18947: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18948: LD_EXP 51
18952: PPUSH
18953: LD_INT 2
18955: PPUSH
18956: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18960: LD_EXP 51
18964: PPUSH
18965: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18969: LD_EXP 51
18973: PPUSH
18974: CALL_OW 257
18978: PUSH
18979: LD_INT 32
18981: EQUAL
18982: IFFALSE 18996
18984: PUSH
18985: LD_EXP 48
18989: PUSH
18990: LD_EXP 14
18994: IN
18995: AND
18996: IFFALSE 19013
18998: PUSH
18999: LD_EXP 48
19003: PPUSH
19004: CALL_OW 255
19008: PUSH
19009: LD_INT 2
19011: EQUAL
19012: AND
19013: IFFALSE 19030
// begin giveSniperRifleToMike := true ;
19015: LD_ADDR_EXP 42
19019: PUSH
19020: LD_INT 1
19022: ST_TO_ADDR
// Query ( QSniperMike ) ;
19023: LD_STRING QSniperMike
19025: PPUSH
19026: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
19030: LD_EXP 47
19034: PUSH
19035: LD_VAR 0 4
19039: IN
19040: IFFALSE 19057
19042: PUSH
19043: LD_EXP 47
19047: PPUSH
19048: CALL_OW 257
19052: PUSH
19053: LD_INT 33
19055: EQUAL
19056: AND
19057: IFFALSE 19198
// begin SetSide ( Givi , 5 ) ;
19059: LD_EXP 47
19063: PPUSH
19064: LD_INT 5
19066: PPUSH
19067: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
19071: LD_EXP 47
19075: PPUSH
19076: LD_INT 137
19078: PPUSH
19079: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19083: LD_INT 35
19085: PPUSH
19086: CALL_OW 67
// until IsInUnit ( Givi ) ;
19090: LD_EXP 47
19094: PPUSH
19095: CALL_OW 310
19099: IFFALSE 19083
// Say ( Givi , DG-Weapons-3 ) ;
19101: LD_EXP 47
19105: PPUSH
19106: LD_STRING DG-Weapons-3
19108: PPUSH
19109: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
19113: LD_EXP 46
19117: PPUSH
19118: LD_STRING DH-Weapons-4
19120: PPUSH
19121: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
19125: LD_EXP 47
19129: PPUSH
19130: LD_STRING DG-Weapons-5
19132: PPUSH
19133: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
19137: LD_EXP 47
19141: PPUSH
19142: LD_INT 11
19144: PPUSH
19145: CALL_OW 336
// ComExitBuilding ( Givi ) ;
19149: LD_EXP 47
19153: PPUSH
19154: CALL_OW 122
// SetSide ( Givi , 2 ) ;
19158: LD_EXP 47
19162: PPUSH
19163: LD_INT 2
19165: PPUSH
19166: CALL_OW 235
// if hasRevolver then
19170: LD_EXP 8
19174: IFFALSE 19196
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
19176: LD_EXP 46
19180: PPUSH
19181: LD_STRING DH-Kaia-Revolver-1
19183: PPUSH
19184: CALL_OW 88
// heikeHasRevolver := true ;
19188: LD_ADDR_EXP 20
19192: PUSH
19193: LD_INT 1
19195: ST_TO_ADDR
// end ; end else
19196: GO 19392
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
19198: LD_EXP 50
19202: PUSH
19203: LD_VAR 0 4
19207: IN
19208: IFFALSE 19225
19210: PUSH
19211: LD_EXP 50
19215: PPUSH
19216: CALL_OW 257
19220: PUSH
19221: LD_INT 33
19223: EQUAL
19224: AND
19225: IFFALSE 19354
// begin SetSide ( Kamil , 5 ) ;
19227: LD_EXP 50
19231: PPUSH
19232: LD_INT 5
19234: PPUSH
19235: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
19239: LD_EXP 50
19243: PPUSH
19244: LD_INT 137
19246: PPUSH
19247: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19251: LD_INT 35
19253: PPUSH
19254: CALL_OW 67
// until IsInUnit ( Kamil ) ;
19258: LD_EXP 50
19262: PPUSH
19263: CALL_OW 310
19267: IFFALSE 19251
// Say ( Kamil , DKam-Weapons-a-3 ) ;
19269: LD_EXP 50
19273: PPUSH
19274: LD_STRING DKam-Weapons-a-3
19276: PPUSH
19277: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
19281: LD_EXP 46
19285: PPUSH
19286: LD_STRING DH-Weapons-a-4
19288: PPUSH
19289: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
19293: LD_EXP 50
19297: PPUSH
19298: LD_INT 11
19300: PPUSH
19301: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
19305: LD_EXP 50
19309: PPUSH
19310: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
19314: LD_EXP 50
19318: PPUSH
19319: LD_INT 2
19321: PPUSH
19322: CALL_OW 235
// if hasRevolver then
19326: LD_EXP 8
19330: IFFALSE 19352
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
19332: LD_EXP 46
19336: PPUSH
19337: LD_STRING DH-Kaia-Revolver-1
19339: PPUSH
19340: CALL_OW 88
// heikeHasRevolver := true ;
19344: LD_ADDR_EXP 20
19348: PUSH
19349: LD_INT 1
19351: ST_TO_ADDR
// end ; end else
19352: GO 19392
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
19354: LD_EXP 46
19358: PPUSH
19359: LD_STRING DH-Weapons-Alone-2
19361: PPUSH
19362: CALL_OW 88
// if hasRevolver then
19366: LD_EXP 8
19370: IFFALSE 19392
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
19372: LD_EXP 46
19376: PPUSH
19377: LD_STRING DH-Kaia-Revolver-1a
19379: PPUSH
19380: CALL_OW 88
// heikeHasRevolver := true ;
19384: LD_ADDR_EXP 20
19388: PUSH
19389: LD_INT 1
19391: ST_TO_ADDR
// end ; end ; end ; end else
19392: GO 19406
// Say ( Heike , DH-Locked ) ;
19394: LD_EXP 46
19398: PPUSH
19399: LD_STRING DH-Locked
19401: PPUSH
19402: CALL_OW 88
// end ; end ;
19406: GO 19409
19408: POP
// SetSide ( building , 3 ) ;
19409: LD_VAR 0 1
19413: PPUSH
19414: LD_INT 3
19416: PPUSH
19417: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
19421: LD_VAR 0 1
19425: PPUSH
19426: CALL 20770 0 1
// wait ( 0 0$0.3 ) ;
19430: LD_INT 10
19432: PPUSH
19433: CALL_OW 67
// ComExitBuilding ( Heike ) ;
19437: LD_EXP 46
19441: PPUSH
19442: CALL_OW 122
// SetSide ( Heike , 2 ) ;
19446: LD_EXP 46
19450: PPUSH
19451: LD_INT 2
19453: PPUSH
19454: CALL_OW 235
// InGameOff ;
19458: CALL_OW 9
// end ;
19462: LD_VAR 0 2
19466: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
19467: LD_EXP 30
19471: NOT
19472: IFFALSE 19481
19474: PUSH
19475: LD_EXP 17
19479: NOT
19480: AND
19481: IFFALSE 19517
19483: PUSH
19484: LD_INT 22
19486: PUSH
19487: LD_INT 5
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 21
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PPUSH
19508: CALL_OW 69
19512: PUSH
19513: LD_INT 0
19515: EQUAL
19516: AND
19517: IFFALSE 19570
19519: PUSH
19520: LD_INT 22
19522: PUSH
19523: LD_INT 4
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 21
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PPUSH
19544: CALL_OW 69
19548: PUSH
19549: LD_INT 0
19551: EQUAL
19552: IFFALSE 19560
19554: PUSH
19555: LD_EXP 25
19559: AND
19560: IFTRUE 19569
19562: PUSH
19563: LD_EXP 25
19567: NOT
19568: OR
19569: AND
19570: IFFALSE 19602
19572: GO 19574
19574: DISABLE
// begin DialogueOn ;
19575: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
19579: LD_EXP 46
19583: PPUSH
19584: LD_STRING DH-Alarm-2
19586: PPUSH
19587: CALL_OW 88
// DialogueOff ;
19591: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
19595: LD_STRING M1-people-out
19597: PPUSH
19598: CALL_OW 337
// end ;
19602: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
19603: LD_EXP 48
19607: PPUSH
19608: CALL_OW 255
19612: PUSH
19613: LD_INT 2
19615: EQUAL
19616: IFFALSE 19630
19618: PUSH
19619: LD_EXP 48
19623: PUSH
19624: LD_EXP 14
19628: IN
19629: AND
19630: IFFALSE 19652
19632: PUSH
19633: LD_EXP 46
19637: PPUSH
19638: LD_EXP 48
19642: PPUSH
19643: CALL_OW 296
19647: PUSH
19648: LD_INT 6
19650: LESS
19651: AND
19652: IFFALSE 19661
19654: PUSH
19655: LD_EXP 30
19659: NOT
19660: AND
19661: IFFALSE 19669
19663: PUSH
19664: LD_EXP 42
19668: AND
19669: IFFALSE 19714
19671: GO 19673
19673: DISABLE
// begin repeat wait ( 1 ) ;
19674: LD_INT 1
19676: PPUSH
19677: CALL_OW 67
// ComWalk ( Mike ) ;
19681: LD_EXP 48
19685: PPUSH
19686: CALL_OW 138
// until not Crawls ( Mike ) ;
19690: LD_EXP 48
19694: PPUSH
19695: CALL_OW 318
19699: NOT
19700: IFFALSE 19674
// SetClass ( Mike , class_hunter ) ;
19702: LD_EXP 48
19706: PPUSH
19707: LD_INT 32
19709: PPUSH
19710: CALL_OW 336
// end ;
19714: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
19715: LD_EXP 41
19719: IFFALSE 19727
19721: PUSH
19722: LD_EXP 40
19726: AND
19727: IFFALSE 19742
19729: PUSH
19730: LD_INT 137
19732: PPUSH
19733: CALL_OW 255
19737: PUSH
19738: LD_INT 3
19740: EQUAL
19741: AND
19742: IFFALSE 19790
19744: PUSH
19745: LD_EXP 14
19749: PPUSH
19750: LD_INT 95
19752: PUSH
19753: LD_INT 65
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 22
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 25
19772: PUSH
19773: LD_INT 33
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 72
19789: AND
19790: IFFALSE 19809
19792: PUSH
19793: LD_INT 2
19795: PPUSH
19796: LD_INT 3
19798: PPUSH
19799: CALL_OW 81
19803: PUSH
19804: LD_INT 2
19806: EQUAL
19807: NOT
19808: AND
19809: IFFALSE 19830
19811: PUSH
19812: LD_EXP 66
19816: PPUSH
19817: LD_INT 137
19819: PPUSH
19820: CALL_OW 296
19824: PUSH
19825: LD_INT 12
19827: LESS
19828: NOT
19829: AND
19830: IFFALSE 20084
19832: GO 19834
19834: DISABLE
19835: LD_INT 0
19837: PPUSH
19838: PPUSH
// begin enable ;
19839: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
19840: LD_ADDR_VAR 0 2
19844: PUSH
19845: LD_EXP 14
19849: PPUSH
19850: LD_INT 95
19852: PUSH
19853: LD_INT 65
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 22
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 25
19872: PUSH
19873: LD_INT 33
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: PPUSH
19885: CALL_OW 72
19889: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
19890: LD_STRING QWeapons
19892: PPUSH
19893: CALL_OW 97
19897: PUSH
19898: LD_INT 1
19900: EQUAL
19901: IFFALSE 20084
// begin for i in tmp do
19903: LD_ADDR_VAR 0 1
19907: PUSH
19908: LD_VAR 0 2
19912: PUSH
19913: FOR_IN
19914: IFFALSE 20082
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
19916: LD_INT 137
19918: PPUSH
19919: CALL_OW 313
19923: PUSH
19924: LD_INT 6
19926: EQUAL
19927: IFFALSE 19931
// continue ;
19929: GO 19913
// SetSide ( i , 3 ) ;
19931: LD_VAR 0 1
19935: PPUSH
19936: LD_INT 3
19938: PPUSH
19939: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
19943: LD_VAR 0 1
19947: PPUSH
19948: LD_INT 137
19950: PPUSH
19951: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
19955: LD_ADDR_EXP 40
19959: PUSH
19960: LD_EXP 40
19964: PPUSH
19965: CALL 69632 0 1
19969: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
19970: LD_INT 10
19972: PPUSH
19973: CALL_OW 67
// until IsInUnit ( i ) ;
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 310
19986: IFFALSE 19970
// SetClass ( i , class_soldier ) ;
19988: LD_VAR 0 1
19992: PPUSH
19993: LD_INT 1
19995: PPUSH
19996: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
20000: LD_VAR 0 1
20004: PPUSH
20005: CALL_OW 122
// wait ( 0 0$1 ) ;
20009: LD_INT 35
20011: PPUSH
20012: CALL_OW 67
// until not IsInUnit ( i ) ;
20016: LD_VAR 0 1
20020: PPUSH
20021: CALL_OW 310
20025: NOT
20026: IFFALSE 20000
// SetSide ( i , 2 ) ;
20028: LD_VAR 0 1
20032: PPUSH
20033: LD_INT 2
20035: PPUSH
20036: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
20040: LD_VAR 0 1
20044: PPUSH
20045: LD_INT 191
20047: PPUSH
20048: LD_INT 126
20050: PPUSH
20051: CALL_OW 171
// if weaponsAmount = 0 then
20055: LD_EXP 40
20059: PUSH
20060: LD_INT 0
20062: EQUAL
20063: IFFALSE 20080
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
20065: LD_INT 65
20067: PPUSH
20068: LD_INT 0
20070: PPUSH
20071: CALL_OW 424
// disable ;
20075: DISABLE
// exit ;
20076: POP
20077: POP
20078: GO 20084
// end ; end ;
20080: GO 19913
20082: POP
20083: POP
// end ; end ; end_of_file
20084: PPOPN 2
20086: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
20087: LD_VAR 0 1
20091: PUSH
20092: LD_INT 3
20094: DOUBLE
20095: EQUAL
20096: IFTRUE 20100
20098: GO 20130
20100: POP
// begin repeat wait ( 0 0$1 ) ;
20101: LD_INT 35
20103: PPUSH
20104: CALL_OW 67
// CenterOnUnits ( Heike ) ;
20108: LD_EXP 46
20112: PPUSH
20113: CALL_OW 85
// until IsDying ( Heike ) ;
20117: LD_EXP 46
20121: PPUSH
20122: CALL_OW 303
20126: IFFALSE 20101
// end ; end ;
20128: GO 20131
20130: POP
// end ;
20131: PPOPN 1
20133: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
20134: LD_OWVAR 59
20138: IFFALSE 20142
// exit ;
20140: GO 20216
// if showPlaceEvent then
20142: LD_INT 4
20144: IFFALSE 20216
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
20146: LD_VAR 0 2
20150: PPUSH
20151: LD_VAR 0 3
20155: PPUSH
20156: LD_INT 2
20158: PPUSH
20159: LD_INT 6
20161: NEG
20162: PPUSH
20163: CALL_OW 330
// CenterOnXY ( x , y ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_VAR 0 3
20176: PPUSH
20177: CALL_OW 84
// wait ( time ) ;
20181: LD_VAR 0 4
20185: PPUSH
20186: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
20190: LD_EXP 46
20194: PPUSH
20195: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
20199: LD_VAR 0 2
20203: PPUSH
20204: LD_VAR 0 3
20208: PPUSH
20209: LD_INT 2
20211: PPUSH
20212: CALL_OW 331
// end ; end ;
20216: PPOPN 7
20218: END
// on UnitDestroyed ( un ) do var x , y ;
20219: LD_INT 0
20221: PPUSH
20222: PPUSH
// begin if un = Heike and hasNormalScene then
20223: LD_VAR 0 1
20227: PUSH
20228: LD_EXP 46
20232: EQUAL
20233: IFFALSE 20241
20235: PUSH
20236: LD_EXP 5
20240: AND
20241: IFFALSE 20265
// if loseCounter then
20243: LD_EXP 32
20247: IFFALSE 20258
// YouLost ( HeikeNoSurrender ) else
20249: LD_STRING HeikeNoSurrender
20251: PPUSH
20252: CALL_OW 104
20256: GO 20265
// YouLost ( Heike ) ;
20258: LD_STRING Heike
20260: PPUSH
20261: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
20265: LD_VAR 0 1
20269: PPUSH
20270: CALL_OW 255
20274: PUSH
20275: LD_INT 2
20277: EQUAL
20278: IFFALSE 20295
20280: PUSH
20281: LD_VAR 0 1
20285: PPUSH
20286: CALL_OW 247
20290: PUSH
20291: LD_INT 1
20293: EQUAL
20294: AND
20295: IFFALSE 20312
// loseCounter := Inc ( loseCounter ) ;
20297: LD_ADDR_EXP 32
20301: PUSH
20302: LD_EXP 32
20306: PPUSH
20307: CALL 69610 0 1
20311: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 255
20321: PUSH
20322: LD_INT 6
20324: EQUAL
20325: IFFALSE 20334
20327: PUSH
20328: LD_EXP 17
20332: NOT
20333: AND
20334: IFFALSE 20348
20336: PUSH
20337: LD_VAR 0 1
20341: PUSH
20342: LD_EXP 71
20346: IN
20347: AND
20348: IFFALSE 20452
// begin x := GetX ( un ) ;
20350: LD_ADDR_VAR 0 2
20354: PUSH
20355: LD_VAR 0 1
20359: PPUSH
20360: CALL_OW 250
20364: ST_TO_ADDR
// y := GetY ( un ) ;
20365: LD_ADDR_VAR 0 3
20369: PUSH
20370: LD_VAR 0 1
20374: PPUSH
20375: CALL_OW 251
20379: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
20380: LD_ADDR_EXP 43
20384: PUSH
20385: LD_EXP 43
20389: PPUSH
20390: LD_VAR 0 2
20394: PUSH
20395: LD_VAR 0 3
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PPUSH
20404: CALL 68237 0 2
20408: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
20409: LD_ADDR_EXP 71
20413: PUSH
20414: LD_EXP 71
20418: PUSH
20419: LD_VAR 0 1
20423: DIFF
20424: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
20425: LD_INT 3
20427: PPUSH
20428: LD_VAR 0 2
20432: PPUSH
20433: LD_VAR 0 3
20437: PPUSH
20438: CALL_OW 293
20442: IFFALSE 20452
// isAlarm := true ;
20444: LD_ADDR_EXP 17
20448: PUSH
20449: LD_INT 1
20451: ST_TO_ADDR
// end ; end ;
20452: PPOPN 3
20454: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
20455: LD_EXP 44
20459: IFFALSE 20463
// exit ;
20461: GO 20517
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
20463: LD_VAR 0 1
20467: PUSH
20468: LD_INT 2
20470: EQUAL
20471: IFFALSE 20483
20473: PUSH
20474: LD_VAR 0 2
20478: PUSH
20479: LD_INT 3
20481: EQUAL
20482: AND
20483: IFTRUE 20507
20485: PUSH
20486: LD_VAR 0 1
20490: PUSH
20491: LD_INT 3
20493: EQUAL
20494: IFFALSE 20506
20496: PUSH
20497: LD_VAR 0 2
20501: PUSH
20502: LD_INT 2
20504: EQUAL
20505: AND
20506: OR
20507: IFFALSE 20517
// isAlarm := true ;
20509: LD_ADDR_EXP 17
20513: PUSH
20514: LD_INT 1
20516: ST_TO_ADDR
// end ;
20517: PPOPN 2
20519: END
// on DestinationUnreachable ( un ) do var i , units ;
20520: LD_INT 0
20522: PPUSH
20523: PPUSH
// begin if un = ruDisturb and not isAlarm then
20524: LD_VAR 0 1
20528: PUSH
20529: LD_EXP 66
20533: EQUAL
20534: IFFALSE 20543
20536: PUSH
20537: LD_EXP 17
20541: NOT
20542: AND
20543: IFFALSE 20664
// begin units := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff Heike ;
20545: LD_ADDR_VAR 0 3
20549: PUSH
20550: LD_INT 22
20552: PUSH
20553: LD_INT 2
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 21
20562: PUSH
20563: LD_INT 1
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PPUSH
20574: CALL_OW 69
20578: PUSH
20579: LD_EXP 46
20583: DIFF
20584: ST_TO_ADDR
// if not units then
20585: LD_VAR 0 3
20589: NOT
20590: IFFALSE 20594
// exit ;
20592: GO 20664
// for i in units do
20594: LD_ADDR_VAR 0 2
20598: PUSH
20599: LD_VAR 0 3
20603: PUSH
20604: FOR_IN
20605: IFFALSE 20662
// begin if Carry ( i ) then
20607: LD_VAR 0 2
20611: PPUSH
20612: CALL_OW 281
20616: IFFALSE 20633
// SetCargo ( i , mat_cans , 0 ) ;
20618: LD_VAR 0 2
20622: PPUSH
20623: LD_INT 1
20625: PPUSH
20626: LD_INT 0
20628: PPUSH
20629: CALL_OW 290
// SetSide ( i , 5 ) ;
20633: LD_VAR 0 2
20637: PPUSH
20638: LD_INT 5
20640: PPUSH
20641: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
20645: LD_VAR 0 2
20649: PPUSH
20650: LD_INT 113
20652: PPUSH
20653: LD_INT 17
20655: PPUSH
20656: CALL_OW 111
// end ;
20660: GO 20604
20662: POP
20663: POP
// end ; end ; end_of_file
20664: PPOPN 3
20666: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
20667: LD_INT 0
20669: PPUSH
20670: PPUSH
20671: PPUSH
// u1 := IsInUnit ( unit1 ) ;
20672: LD_ADDR_VAR 0 4
20676: PUSH
20677: LD_VAR 0 1
20681: PPUSH
20682: CALL_OW 310
20686: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
20687: LD_ADDR_VAR 0 5
20691: PUSH
20692: LD_VAR 0 2
20696: PPUSH
20697: CALL_OW 310
20701: ST_TO_ADDR
// result := u1 and u1 = u2 ;
20702: LD_ADDR_VAR 0 3
20706: PUSH
20707: LD_VAR 0 4
20711: IFFALSE 20725
20713: PUSH
20714: LD_VAR 0 4
20718: PUSH
20719: LD_VAR 0 5
20723: EQUAL
20724: AND
20725: ST_TO_ADDR
// end ;
20726: LD_VAR 0 3
20730: RET
// export function ShowPlace ( x , y , time ) ; begin
20731: LD_INT 0
20733: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
20734: LD_INT 4
20736: PPUSH
20737: LD_VAR 0 1
20741: PPUSH
20742: LD_VAR 0 2
20746: PPUSH
20747: LD_VAR 0 3
20751: PPUSH
20752: LD_INT 0
20754: PPUSH
20755: LD_INT 0
20757: PPUSH
20758: LD_INT 0
20760: PPUSH
20761: CALL_OW 595
// end ;
20765: LD_VAR 0 4
20769: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
20770: LD_INT 0
20772: PPUSH
20773: PPUSH
20774: PPUSH
20775: PPUSH
20776: PPUSH
20777: PPUSH
// if not IsOk ( building ) then
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL_OW 302
20787: NOT
20788: IFFALSE 20792
// exit ;
20790: GO 21039
// x := GetX ( building ) ;
20792: LD_ADDR_VAR 0 4
20796: PUSH
20797: LD_VAR 0 1
20801: PPUSH
20802: CALL_OW 250
20806: ST_TO_ADDR
// y := GetY ( building ) ;
20807: LD_ADDR_VAR 0 5
20811: PUSH
20812: LD_VAR 0 1
20816: PPUSH
20817: CALL_OW 251
20821: ST_TO_ADDR
// d := GetDir ( building ) ;
20822: LD_ADDR_VAR 0 6
20826: PUSH
20827: LD_VAR 0 1
20831: PPUSH
20832: CALL_OW 254
20836: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20837: LD_ADDR_VAR 0 7
20841: PUSH
20842: LD_VAR 0 4
20846: PPUSH
20847: LD_VAR 0 6
20851: PPUSH
20852: LD_INT 3
20854: PPUSH
20855: CALL_OW 272
20859: PUSH
20860: LD_VAR 0 5
20864: PPUSH
20865: LD_VAR 0 6
20869: PPUSH
20870: LD_INT 3
20872: PPUSH
20873: CALL_OW 273
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20882: LD_VAR 0 7
20886: PUSH
20887: LD_INT 1
20889: ARRAY
20890: PPUSH
20891: LD_VAR 0 7
20895: PUSH
20896: LD_INT 2
20898: ARRAY
20899: PPUSH
20900: CALL_OW 488
20904: NOT
20905: IFFALSE 20909
// exit ;
20907: GO 21039
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
20909: LD_ADDR_VAR 0 2
20913: PUSH
20914: LD_INT 92
20916: PUSH
20917: LD_VAR 0 4
20921: PUSH
20922: LD_VAR 0 5
20926: PUSH
20927: LD_INT 4
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 3
20938: PUSH
20939: LD_INT 54
20941: PUSH
20942: EMPTY
20943: LIST
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PPUSH
20953: CALL_OW 69
20957: ST_TO_ADDR
// if not result then
20958: LD_VAR 0 2
20962: NOT
20963: IFFALSE 20967
// exit ;
20965: GO 21039
// for i in result do
20967: LD_ADDR_VAR 0 3
20971: PUSH
20972: LD_VAR 0 2
20976: PUSH
20977: FOR_IN
20978: IFFALSE 21037
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
20980: LD_VAR 0 3
20984: PPUSH
20985: LD_VAR 0 3
20989: PPUSH
20990: CALL_OW 250
20994: PPUSH
20995: LD_VAR 0 6
20999: PPUSH
21000: LD_INT 3
21002: PPUSH
21003: CALL_OW 272
21007: PPUSH
21008: LD_VAR 0 3
21012: PPUSH
21013: CALL_OW 251
21017: PPUSH
21018: LD_VAR 0 6
21022: PPUSH
21023: LD_INT 3
21025: PPUSH
21026: CALL_OW 273
21030: PPUSH
21031: CALL_OW 111
21035: GO 20977
21037: POP
21038: POP
// end ;
21039: LD_VAR 0 2
21043: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
21044: LD_INT 0
21046: PPUSH
21047: PPUSH
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
21052: LD_VAR 0 1
21056: PPUSH
21057: CALL_OW 302
21061: NOT
21062: IFTRUE 21076
21064: PUSH
21065: LD_VAR 0 2
21069: PPUSH
21070: CALL_OW 302
21074: NOT
21075: OR
21076: IFTRUE 21093
21078: PUSH
21079: LD_VAR 0 2
21083: PPUSH
21084: CALL_OW 313
21088: PUSH
21089: LD_INT 6
21091: EQUAL
21092: OR
21093: IFFALSE 21097
// exit ;
21095: GO 21314
// btype := GetBType ( building ) ;
21097: LD_ADDR_VAR 0 8
21101: PUSH
21102: LD_VAR 0 2
21106: PPUSH
21107: CALL_OW 266
21111: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
21112: LD_VAR 0 8
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: LD_INT 4
21128: PUSH
21129: LD_INT 5
21131: PUSH
21132: LD_INT 3
21134: PUSH
21135: LD_INT 6
21137: PUSH
21138: LD_INT 7
21140: PUSH
21141: LD_INT 8
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: IN
21155: NOT
21156: IFFALSE 21160
// exit ;
21158: GO 21314
// x := GetX ( building ) ;
21160: LD_ADDR_VAR 0 4
21164: PUSH
21165: LD_VAR 0 2
21169: PPUSH
21170: CALL_OW 250
21174: ST_TO_ADDR
// y := GetY ( building ) ;
21175: LD_ADDR_VAR 0 5
21179: PUSH
21180: LD_VAR 0 2
21184: PPUSH
21185: CALL_OW 251
21189: ST_TO_ADDR
// d := GetDir ( building ) ;
21190: LD_ADDR_VAR 0 6
21194: PUSH
21195: LD_VAR 0 2
21199: PPUSH
21200: CALL_OW 254
21204: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
21205: LD_ADDR_VAR 0 7
21209: PUSH
21210: LD_VAR 0 4
21214: PPUSH
21215: LD_VAR 0 6
21219: PPUSH
21220: LD_INT 3
21222: PPUSH
21223: CALL_OW 272
21227: PUSH
21228: LD_VAR 0 5
21232: PPUSH
21233: LD_VAR 0 6
21237: PPUSH
21238: LD_INT 3
21240: PPUSH
21241: CALL_OW 273
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
21250: LD_VAR 0 7
21254: PUSH
21255: LD_INT 1
21257: ARRAY
21258: PPUSH
21259: LD_VAR 0 7
21263: PUSH
21264: LD_INT 2
21266: ARRAY
21267: PPUSH
21268: CALL_OW 488
21272: NOT
21273: IFFALSE 21277
// exit ;
21275: GO 21314
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
21277: LD_ADDR_VAR 0 3
21281: PUSH
21282: LD_VAR 0 1
21286: PPUSH
21287: LD_VAR 0 7
21291: PUSH
21292: LD_INT 1
21294: ARRAY
21295: PPUSH
21296: LD_VAR 0 7
21300: PUSH
21301: LD_INT 2
21303: ARRAY
21304: PPUSH
21305: CALL_OW 297
21309: PUSH
21310: LD_INT 4
21312: LESS
21313: ST_TO_ADDR
// end ;
21314: LD_VAR 0 3
21318: RET
// export function PlaceExplosives ( building ) ; begin
21319: LD_INT 0
21321: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
21322: LD_ADDR_EXP 29
21326: PUSH
21327: LD_EXP 29
21331: PPUSH
21332: LD_VAR 0 1
21336: PPUSH
21337: CALL 68237 0 2
21341: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
21342: LD_VAR 0 1
21346: PPUSH
21347: CALL_OW 250
21351: PPUSH
21352: LD_VAR 0 1
21356: PPUSH
21357: CALL_OW 251
21361: PPUSH
21362: LD_STRING PlantBomb
21364: PPUSH
21365: CALL_OW 366
// end ;
21369: LD_VAR 0 2
21373: RET
// export function CreateNature ; var i ; begin
21374: LD_INT 0
21376: PPUSH
21377: PPUSH
// PrepareFrog ;
21378: CALL 64640 0 0
// for i := 1 to 3 do
21382: LD_ADDR_VAR 0 2
21386: PUSH
21387: DOUBLE
21388: LD_INT 1
21390: DEC
21391: ST_TO_ADDR
21392: LD_INT 3
21394: PUSH
21395: FOR_TO
21396: IFFALSE 21415
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
21398: CALL_OW 44
21402: PPUSH
21403: LD_INT 24
21405: PPUSH
21406: LD_INT 0
21408: PPUSH
21409: CALL_OW 49
21413: GO 21395
21415: POP
21416: POP
// end ;
21417: LD_VAR 0 1
21421: RET
// export function MarkBuilding ( building , marker ) ; begin
21422: LD_INT 0
21424: PPUSH
// if marker then
21425: LD_VAR 0 2
21429: IFFALSE 21476
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
21431: LD_VAR 0 1
21435: PPUSH
21436: CALL_OW 250
21440: PPUSH
21441: LD_VAR 0 1
21445: PPUSH
21446: CALL_OW 251
21450: PPUSH
21451: LD_INT 2
21453: PPUSH
21454: LD_INT 3
21456: NEG
21457: PPUSH
21458: CALL_OW 330
// SetBName ( building , target ) ;
21462: LD_VAR 0 1
21466: PPUSH
21467: LD_STRING target
21469: PPUSH
21470: CALL_OW 500
// end else
21474: GO 21515
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
21476: LD_VAR 0 1
21480: PPUSH
21481: CALL_OW 250
21485: PPUSH
21486: LD_VAR 0 1
21490: PPUSH
21491: CALL_OW 251
21495: PPUSH
21496: LD_INT 2
21498: PPUSH
21499: CALL_OW 331
// SetBName ( building ,  ) ;
21503: LD_VAR 0 1
21507: PPUSH
21508: LD_STRING 
21510: PPUSH
21511: CALL_OW 500
// end ; end ; end_of_file
21515: LD_VAR 0 3
21519: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
21520: LD_INT 0
21522: PPUSH
// lockerCodeValid := false ;
21523: LD_ADDR_EXP 72
21527: PUSH
21528: LD_INT 0
21530: ST_TO_ADDR
// if not step then
21531: LD_LOC 1
21535: NOT
21536: IFFALSE 21546
// step := 1 ;
21538: LD_ADDR_LOC 1
21542: PUSH
21543: LD_INT 1
21545: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
21546: LD_STRING HEscape
21548: PUSH
21549: LD_LOC 1
21553: STR
21554: PPUSH
21555: CALL_OW 97
21559: PUSH
21560: LD_INT 1
21562: DOUBLE
21563: EQUAL
21564: IFTRUE 21568
21566: GO 21575
21568: POP
// LockerMinigameSearch ; 2 :
21569: CALL 21608 0 0
21573: GO 21591
21575: LD_INT 2
21577: DOUBLE
21578: EQUAL
21579: IFTRUE 21583
21581: GO 21590
21583: POP
// LockerMinigameSetCode ; end ;
21584: CALL 21682 0 0
21588: GO 21591
21590: POP
// if lockerCodeValid then
21591: LD_EXP 72
21595: IFFALSE 21599
// exit ;
21597: GO 21603
// StartLockerMinigame ;
21599: CALL 21520 0 0
// end ;
21603: LD_VAR 0 1
21607: RET
// function LockerMinigameSearch ; begin
21608: LD_INT 0
21610: PPUSH
// if code then
21611: LD_LOC 2
21615: IFFALSE 21631
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
21617: LD_EXP 46
21621: PPUSH
21622: LD_STRING DH-Escape-3-Hint-0
21624: PPUSH
21625: CALL_OW 88
// exit ;
21629: GO 21677
// end ; Randomize ;
21631: CALL_OW 10
// code := rand ( 1 , 5 ) ;
21635: LD_ADDR_LOC 2
21639: PUSH
21640: LD_INT 1
21642: PPUSH
21643: LD_INT 5
21645: PPUSH
21646: CALL_OW 12
21650: ST_TO_ADDR
// step := 2 ;
21651: LD_ADDR_LOC 1
21655: PUSH
21656: LD_INT 2
21658: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
21659: LD_EXP 46
21663: PPUSH
21664: LD_STRING DH-Escape-3-Hint-
21666: PUSH
21667: LD_LOC 2
21671: STR
21672: PPUSH
21673: CALL_OW 88
// end ;
21677: LD_VAR 0 1
21681: RET
// function LockerMinigameSetCode ; begin
21682: LD_INT 0
21684: PPUSH
// if not code then
21685: LD_LOC 2
21689: NOT
21690: IFFALSE 21700
// code := 0 ;
21692: LD_ADDR_LOC 2
21696: PUSH
21697: LD_INT 0
21699: ST_TO_ADDR
// lockerBusy := true ;
21700: LD_ADDR_EXP 73
21704: PUSH
21705: LD_INT 1
21707: ST_TO_ADDR
// InGameOff ;
21708: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
21712: LD_STRING initLockerMinigame("
21714: PUSH
21715: LD_LOC 2
21719: STR
21720: PUSH
21721: LD_STRING ")
21723: STR
21724: PPUSH
21725: CALL_OW 559
// step := 3 ;
21729: LD_ADDR_LOC 1
21733: PUSH
21734: LD_INT 3
21736: ST_TO_ADDR
// repeat wait ( 1 ) ;
21737: LD_INT 1
21739: PPUSH
21740: CALL_OW 67
// until not lockerBusy ;
21744: LD_EXP 73
21748: NOT
21749: IFFALSE 21737
// InGameOn ;
21751: CALL_OW 8
// if not lockerCodeValid then
21755: LD_EXP 72
21759: NOT
21760: IFFALSE 21786
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
21762: LD_EXP 46
21766: PPUSH
21767: LD_STRING DH-Escape-3-Fail-
21769: PUSH
21770: LD_INT 1
21772: PPUSH
21773: LD_INT 2
21775: PPUSH
21776: CALL_OW 12
21780: STR
21781: PPUSH
21782: CALL_OW 88
// end ; end_of_file
21786: LD_VAR 0 1
21790: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
21791: LD_VAR 0 2
21795: PUSH
21796: LD_INT 102
21798: EQUAL
21799: IFFALSE 21821
// begin lockerBusy := false ;
21801: LD_ADDR_EXP 73
21805: PUSH
21806: LD_INT 0
21808: ST_TO_ADDR
// lockerCodeValid := p3 ;
21809: LD_ADDR_EXP 72
21813: PUSH
21814: LD_VAR 0 3
21818: ST_TO_ADDR
// end else
21819: GO 21875
// if p2 = 103 then
21821: LD_VAR 0 2
21825: PUSH
21826: LD_INT 103
21828: EQUAL
21829: IFFALSE 21841
// begin weatherBusy := false ;
21831: LD_ADDR_EXP 37
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
// end else
21839: GO 21875
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21841: LD_VAR 0 1
21845: PPUSH
21846: LD_VAR 0 2
21850: PPUSH
21851: LD_VAR 0 3
21855: PPUSH
21856: LD_VAR 0 4
21860: PPUSH
21861: LD_VAR 0 5
21865: PPUSH
21866: LD_VAR 0 6
21870: PPUSH
21871: CALL 73763 0 6
// end ;
21875: PPOPN 6
21877: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
21878: LD_STRING killGameMusic();
21880: PPUSH
21881: CALL_OW 559
// PlayOriginalMusic ;
21885: CALL 95274 0 0
// SOS_MapStart ( ) ;
21889: CALL 73650 0 0
// end ; end_of_file
21893: PPOPN 1
21895: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
21896: LD_EXP 17
21900: NOT
21901: IFFALSE 21909
21903: PUSH
21904: LD_EXP 71
21908: AND
21909: IFFALSE 22495
21911: GO 21913
21913: DISABLE
21914: LD_INT 0
21916: PPUSH
21917: PPUSH
21918: PPUSH
21919: PPUSH
21920: PPUSH
// begin enable ;
21921: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
21922: LD_ADDR_VAR 0 3
21926: PUSH
21927: LD_INT 26
21929: PUSH
21930: LD_INT 27
21932: PUSH
21933: LD_INT 28
21935: PUSH
21936: LD_INT 29
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 30
21947: PUSH
21948: LD_INT 31
21950: PUSH
21951: LD_INT 32
21953: PUSH
21954: LD_INT 33
21956: PUSH
21957: LD_INT 34
21959: PUSH
21960: LD_INT 35
21962: PUSH
21963: LD_INT 36
21965: PUSH
21966: LD_INT 37
21968: PUSH
21969: LD_INT 38
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 39
21985: PUSH
21986: LD_INT 40
21988: PUSH
21989: LD_INT 41
21991: PUSH
21992: LD_INT 42
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 43
22003: PUSH
22004: LD_INT 44
22006: PUSH
22007: LD_INT 45
22009: PUSH
22010: LD_INT 46
22012: PUSH
22013: LD_INT 47
22015: PUSH
22016: LD_INT 46
22018: PUSH
22019: LD_INT 45
22021: PUSH
22022: LD_INT 44
22024: PUSH
22025: LD_INT 43
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: ST_TO_ADDR
// for i in ruPatrol do
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: LD_EXP 71
22054: PUSH
22055: FOR_IN
22056: IFFALSE 22493
// begin if not IsOk ( i ) then
22058: LD_VAR 0 1
22062: PPUSH
22063: CALL_OW 302
22067: NOT
22068: IFFALSE 22072
// continue ;
22070: GO 22055
// if Count ( ruKilledHex ) then
22072: LD_EXP 43
22076: PPUSH
22077: CALL 32305 0 1
22081: IFFALSE 22154
// for j in ruKilledHex do
22083: LD_ADDR_VAR 0 2
22087: PUSH
22088: LD_EXP 43
22092: PUSH
22093: FOR_IN
22094: IFFALSE 22152
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
22096: LD_VAR 0 1
22100: PPUSH
22101: LD_VAR 0 2
22105: PUSH
22106: LD_INT 1
22108: ARRAY
22109: PPUSH
22110: LD_VAR 0 2
22114: PUSH
22115: LD_INT 2
22117: ARRAY
22118: PPUSH
22119: CALL_OW 297
22123: PUSH
22124: LD_INT 6
22126: LESS
22127: IFFALSE 22150
// begin Query ( QBody ) ;
22129: LD_STRING QBody
22131: PPUSH
22132: CALL_OW 97
// isAlarm := true ;
22136: LD_ADDR_EXP 17
22140: PUSH
22141: LD_INT 1
22143: ST_TO_ADDR
// exit ;
22144: POP
22145: POP
22146: POP
22147: POP
22148: GO 22495
// end ;
22150: GO 22093
22152: POP
22153: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
22154: LD_ADDR_VAR 0 5
22158: PUSH
22159: LD_INT 22
22161: PUSH
22162: LD_INT 2
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 21
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 91
22181: PUSH
22182: LD_VAR 0 1
22186: PUSH
22187: LD_INT 7
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: LIST
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: LIST
22199: PPUSH
22200: CALL_OW 69
22204: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
22205: LD_INT 2
22207: PPUSH
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL_OW 292
22217: IFFALSE 22225
22219: PUSH
22220: LD_VAR 0 5
22224: AND
22225: IFFALSE 22379
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
22227: LD_EXP 30
22231: IFFALSE 22253
22233: PUSH
22234: LD_VAR 0 1
22238: PPUSH
22239: LD_EXP 66
22243: PPUSH
22244: CALL_OW 296
22248: PUSH
22249: LD_INT 16
22251: LESS
22252: AND
22253: IFTRUE 22261
22255: PUSH
22256: LD_EXP 38
22260: OR
22261: IFFALSE 22265
// continue ;
22263: GO 22055
// for j in tmp do
22265: LD_ADDR_VAR 0 2
22269: PUSH
22270: LD_VAR 0 5
22274: PUSH
22275: FOR_IN
22276: IFFALSE 22337
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
22278: LD_ADDR_VAR 0 5
22282: PUSH
22283: LD_VAR 0 5
22287: PUSH
22288: LD_INT 22
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 21
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 91
22310: PUSH
22311: LD_VAR 0 2
22315: PUSH
22316: LD_INT 4
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: PPUSH
22329: CALL_OW 69
22333: UNION
22334: ST_TO_ADDR
22335: GO 22275
22337: POP
22338: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
22339: LD_VAR 0 1
22343: PPUSH
22344: LD_VAR 0 5
22348: PPUSH
22349: LD_VAR 0 1
22353: PPUSH
22354: CALL_OW 74
22358: PPUSH
22359: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
22363: LD_VAR 0 1
22367: PPUSH
22368: LD_VAR 0 5
22372: PPUSH
22373: CALL 22498 0 2
// continue ;
22377: GO 22055
// end ; if HasTask ( i ) then
22379: LD_VAR 0 1
22383: PPUSH
22384: CALL_OW 314
22388: IFFALSE 22392
// continue ;
22390: GO 22055
// tag := GetTag ( i ) ;
22392: LD_ADDR_VAR 0 4
22396: PUSH
22397: LD_VAR 0 1
22401: PPUSH
22402: CALL_OW 110
22406: ST_TO_ADDR
// if not tag then
22407: LD_VAR 0 4
22411: NOT
22412: IFFALSE 22425
// begin ComHold ( i ) ;
22414: LD_VAR 0 1
22418: PPUSH
22419: CALL_OW 140
// continue ;
22423: GO 22055
// end ; for j := 1 to points [ tag ] do
22425: LD_ADDR_VAR 0 2
22429: PUSH
22430: DOUBLE
22431: LD_INT 1
22433: DEC
22434: ST_TO_ADDR
22435: LD_VAR 0 3
22439: PUSH
22440: LD_VAR 0 4
22444: ARRAY
22445: PUSH
22446: FOR_TO
22447: IFFALSE 22489
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
22449: LD_VAR 0 1
22453: PPUSH
22454: LD_VAR 0 3
22458: PUSH
22459: LD_VAR 0 4
22463: ARRAY
22464: PUSH
22465: LD_VAR 0 2
22469: ARRAY
22470: PPUSH
22471: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
22475: LD_VAR 0 1
22479: PPUSH
22480: LD_INT 70
22482: PPUSH
22483: CALL_OW 202
// end ;
22487: GO 22446
22489: POP
22490: POP
// end ;
22491: GO 22055
22493: POP
22494: POP
// end ;
22495: PPOPN 5
22497: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
22498: LD_INT 0
22500: PPUSH
22501: PPUSH
22502: PPUSH
// if UnitFilter ( units , [ [ f_nation , nation_arabian ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
22503: LD_VAR 0 2
22507: PPUSH
22508: LD_INT 23
22510: PUSH
22511: LD_INT 2
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 2
22520: PUSH
22521: LD_INT 25
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 25
22533: PUSH
22534: LD_INT 11
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 25
22543: PUSH
22544: LD_INT 34
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 25
22553: PUSH
22554: LD_INT 32
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PPUSH
22572: CALL_OW 72
22576: IFFALSE 22689
// begin blockPatrolThread := true ;
22578: LD_ADDR_EXP 38
22582: PUSH
22583: LD_INT 1
22585: ST_TO_ADDR
// DialogueOn ;
22586: CALL_OW 6
// case GetSex ( guard ) of sex_male :
22590: LD_VAR 0 1
22594: PPUSH
22595: CALL_OW 258
22599: PUSH
22600: LD_INT 1
22602: DOUBLE
22603: EQUAL
22604: IFTRUE 22608
22606: GO 22623
22608: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22609: LD_VAR 0 1
22613: PPUSH
22614: LD_STRING DRum-Fail-3
22616: PPUSH
22617: CALL_OW 88
22621: GO 22647
22623: LD_INT 2
22625: DOUBLE
22626: EQUAL
22627: IFTRUE 22631
22629: GO 22646
22631: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
22632: LD_VAR 0 1
22636: PPUSH
22637: LD_STRING DRuf-Fail-3
22639: PPUSH
22640: CALL_OW 88
22644: GO 22647
22646: POP
// DialogueOff ;
22647: CALL_OW 7
// wait ( 0 0$5 ) ;
22651: LD_INT 175
22653: PPUSH
22654: CALL_OW 67
// if IsOk ( guard ) then
22658: LD_VAR 0 1
22662: PPUSH
22663: CALL_OW 302
22667: IFFALSE 22679
// isAlarm := true else
22669: LD_ADDR_EXP 17
22673: PUSH
22674: LD_INT 1
22676: ST_TO_ADDR
22677: GO 22687
// blockPatrolThread := false ;
22679: LD_ADDR_EXP 38
22683: PUSH
22684: LD_INT 0
22686: ST_TO_ADDR
// exit ;
22687: GO 23692
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
22689: LD_VAR 0 2
22693: PPUSH
22694: LD_INT 23
22696: PUSH
22697: LD_INT 3
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PPUSH
22704: CALL_OW 72
22708: IFTRUE 22731
22710: PUSH
22711: LD_VAR 0 2
22715: PPUSH
22716: LD_INT 95
22718: PUSH
22719: LD_INT 61
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PPUSH
22726: CALL_OW 72
22730: OR
22731: IFFALSE 22735
// exit ;
22733: GO 23692
// DialogueOn ;
22735: CALL_OW 6
// blockPatrolThread := true ;
22739: LD_ADDR_EXP 38
22743: PUSH
22744: LD_INT 1
22746: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
22747: LD_VAR 0 1
22751: PPUSH
22752: CALL_OW 87
// if not Heike in units then
22756: LD_EXP 46
22760: PUSH
22761: LD_VAR 0 2
22765: IN
22766: NOT
22767: IFFALSE 23133
// begin case GetSex ( guard ) of sex_male :
22769: LD_VAR 0 1
22773: PPUSH
22774: CALL_OW 258
22778: PUSH
22779: LD_INT 1
22781: DOUBLE
22782: EQUAL
22783: IFTRUE 22787
22785: GO 22802
22787: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
22788: LD_VAR 0 1
22792: PPUSH
22793: LD_STRING DRum-Guard-1
22795: PPUSH
22796: CALL_OW 88
22800: GO 22826
22802: LD_INT 2
22804: DOUBLE
22805: EQUAL
22806: IFTRUE 22810
22808: GO 22825
22810: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
22811: LD_VAR 0 1
22815: PPUSH
22816: LD_STRING DRuf-Guard-1
22818: PPUSH
22819: CALL_OW 88
22823: GO 22826
22825: POP
// case Query ( SurrenderInfoPeople ) of 1 :
22826: LD_STRING SurrenderInfoPeople
22828: PPUSH
22829: CALL_OW 97
22833: PUSH
22834: LD_INT 1
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 22951
22842: POP
// begin Query ( CaughtSquadInfo ) ;
22843: LD_STRING CaughtSquadInfo
22845: PPUSH
22846: CALL_OW 97
// for i in units do
22850: LD_ADDR_VAR 0 4
22854: PUSH
22855: LD_VAR 0 2
22859: PUSH
22860: FOR_IN
22861: IFFALSE 22918
// begin if Carry ( i ) then
22863: LD_VAR 0 4
22867: PPUSH
22868: CALL_OW 281
22872: IFFALSE 22889
// SetCargo ( i , mat_cans , 0 ) ;
22874: LD_VAR 0 4
22878: PPUSH
22879: LD_INT 1
22881: PPUSH
22882: LD_INT 0
22884: PPUSH
22885: CALL_OW 290
// SetSide ( i , 5 ) ;
22889: LD_VAR 0 4
22893: PPUSH
22894: LD_INT 5
22896: PPUSH
22897: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
22901: LD_VAR 0 4
22905: PPUSH
22906: LD_INT 113
22908: PPUSH
22909: LD_INT 17
22911: PPUSH
22912: CALL_OW 111
// end ;
22916: GO 22860
22918: POP
22919: POP
// ComMoveXY ( guard , 117 , 25 ) ;
22920: LD_VAR 0 1
22924: PPUSH
22925: LD_INT 117
22927: PPUSH
22928: LD_INT 25
22930: PPUSH
22931: CALL_OW 111
// DialogueOff ;
22935: CALL_OW 7
// blockPatrolThread := false ;
22939: LD_ADDR_EXP 38
22943: PUSH
22944: LD_INT 0
22946: ST_TO_ADDR
// exit ;
22947: GO 23692
// end ; 2 :
22949: GO 23133
22951: LD_INT 2
22953: DOUBLE
22954: EQUAL
22955: IFTRUE 22959
22957: GO 23132
22959: POP
// begin DialogueOff ;
22960: CALL_OW 7
// wait ( 0 0$2 ) ;
22964: LD_INT 70
22966: PPUSH
22967: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22971: LD_INT 6
22973: PPUSH
22974: LD_INT 2
22976: PPUSH
22977: LD_INT 2
22979: PPUSH
22980: LD_INT 1
22982: PPUSH
22983: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
22987: LD_VAR 0 1
22991: PPUSH
22992: LD_VAR 0 2
22996: PUSH
22997: LD_INT 1
22999: ARRAY
23000: PPUSH
23001: CALL_OW 115
// case GetSex ( guard ) of sex_male :
23005: LD_VAR 0 1
23009: PPUSH
23010: CALL_OW 258
23014: PUSH
23015: LD_INT 1
23017: DOUBLE
23018: EQUAL
23019: IFTRUE 23023
23021: GO 23038
23023: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
23024: LD_VAR 0 1
23028: PPUSH
23029: LD_STRING DRum-Fail-3
23031: PPUSH
23032: CALL_OW 88
23036: GO 23062
23038: LD_INT 2
23040: DOUBLE
23041: EQUAL
23042: IFTRUE 23046
23044: GO 23061
23046: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
23047: LD_VAR 0 1
23051: PPUSH
23052: LD_STRING DRum-Fail-3
23054: PPUSH
23055: CALL_OW 88
23059: GO 23062
23061: POP
// wait ( 0 0$5 ) ;
23062: LD_INT 175
23064: PPUSH
23065: CALL_OW 67
// if IsOk ( guard ) then
23069: LD_VAR 0 1
23073: PPUSH
23074: CALL_OW 302
23078: IFFALSE 23090
// isAlarm := true else
23080: LD_ADDR_EXP 17
23084: PUSH
23085: LD_INT 1
23087: ST_TO_ADDR
23088: GO 23122
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
23090: LD_INT 6
23092: PPUSH
23093: LD_INT 2
23095: PPUSH
23096: LD_INT 0
23098: PPUSH
23099: LD_INT 1
23101: PPUSH
23102: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
23106: LD_INT 3
23108: PPUSH
23109: LD_INT 2
23111: PPUSH
23112: LD_INT 0
23114: PPUSH
23115: LD_INT 1
23117: PPUSH
23118: CALL_OW 80
// end ; blockPatrolThread := false ;
23122: LD_ADDR_EXP 38
23126: PUSH
23127: LD_INT 0
23129: ST_TO_ADDR
// end ; end ;
23130: GO 23133
23132: POP
// end ; if Carry ( Heike ) then
23133: LD_EXP 46
23137: PPUSH
23138: CALL_OW 281
23142: IFFALSE 23218
// begin case GetSex ( guard ) of sex_male :
23144: LD_VAR 0 1
23148: PPUSH
23149: CALL_OW 258
23153: PUSH
23154: LD_INT 1
23156: DOUBLE
23157: EQUAL
23158: IFTRUE 23162
23160: GO 23177
23162: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
23163: LD_VAR 0 1
23167: PPUSH
23168: LD_STRING DRum-FoodFail-1
23170: PPUSH
23171: CALL_OW 88
23175: GO 23201
23177: LD_INT 2
23179: DOUBLE
23180: EQUAL
23181: IFTRUE 23185
23183: GO 23200
23185: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
23186: LD_VAR 0 1
23190: PPUSH
23191: LD_STRING DRuf-FoodFail-2
23193: PPUSH
23194: CALL_OW 88
23198: GO 23201
23200: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
23201: LD_EXP 46
23205: PPUSH
23206: LD_INT 1
23208: PPUSH
23209: LD_INT 0
23211: PPUSH
23212: CALL_OW 290
// end else
23216: GO 23275
// begin case GetSex ( guard ) of sex_male :
23218: LD_VAR 0 1
23222: PPUSH
23223: CALL_OW 258
23227: PUSH
23228: LD_INT 1
23230: DOUBLE
23231: EQUAL
23232: IFTRUE 23236
23234: GO 23251
23236: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
23237: LD_VAR 0 1
23241: PPUSH
23242: LD_STRING DRum-Seen-1
23244: PPUSH
23245: CALL_OW 88
23249: GO 23275
23251: LD_INT 2
23253: DOUBLE
23254: EQUAL
23255: IFTRUE 23259
23257: GO 23274
23259: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
23260: LD_VAR 0 1
23264: PPUSH
23265: LD_STRING DRuf-Seen-1
23267: PPUSH
23268: CALL_OW 88
23272: GO 23275
23274: POP
// end ; alone := ( units = 1 ) ;
23275: LD_ADDR_VAR 0 5
23279: PUSH
23280: LD_VAR 0 2
23284: PUSH
23285: LD_INT 1
23287: EQUAL
23288: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
23289: LD_STRING SurrenderInfo
23291: PPUSH
23292: CALL_OW 97
23296: PUSH
23297: LD_INT 1
23299: DOUBLE
23300: EQUAL
23301: IFTRUE 23305
23303: GO 23494
23305: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
23306: LD_INT 23
23308: PPUSH
23309: CALL_OW 87
// RemoveUnit ( Heike ) ;
23313: LD_EXP 46
23317: PPUSH
23318: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
23322: LD_EXP 46
23326: PPUSH
23327: LD_INT 23
23329: PPUSH
23330: CALL_OW 52
// if not alone then
23334: LD_VAR 0 5
23338: NOT
23339: IFFALSE 23406
// for i in units diff Heike do
23341: LD_ADDR_VAR 0 4
23345: PUSH
23346: LD_VAR 0 2
23350: PUSH
23351: LD_EXP 46
23355: DIFF
23356: PUSH
23357: FOR_IN
23358: IFFALSE 23404
// begin RemoveUnit ( i ) ;
23360: LD_VAR 0 4
23364: PPUSH
23365: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
23369: LD_VAR 0 4
23373: PPUSH
23374: LD_INT 114
23376: PPUSH
23377: LD_INT 17
23379: PPUSH
23380: LD_INT 10
23382: PPUSH
23383: LD_INT 0
23385: PPUSH
23386: CALL_OW 50
// SetSide ( i , 5 ) ;
23390: LD_VAR 0 4
23394: PPUSH
23395: LD_INT 5
23397: PPUSH
23398: CALL_OW 235
// end ;
23402: GO 23357
23404: POP
23405: POP
// wait ( 0 0$0.3 ) ;
23406: LD_INT 10
23408: PPUSH
23409: CALL_OW 67
// if alone then
23413: LD_VAR 0 5
23417: IFFALSE 23428
// Query ( CaughtInfoAlone ) else
23419: LD_STRING CaughtInfoAlone
23421: PPUSH
23422: CALL_OW 97
23426: GO 23435
// Query ( CaughtInfo ) ;
23428: LD_STRING CaughtInfo
23430: PPUSH
23431: CALL_OW 97
// wait ( 0 0$2 ) ;
23435: LD_INT 70
23437: PPUSH
23438: CALL_OW 67
// StartLockerMinigame ;
23442: CALL 21520 0 0
// Say ( Heike , DH-Reset ) ;
23446: LD_EXP 46
23450: PPUSH
23451: LD_STRING DH-Reset
23453: PPUSH
23454: CALL_OW 88
// DialogueOff ;
23458: CALL_OW 7
// InGameOff ;
23462: CALL_OW 9
// blockPatrolThread := false ;
23466: LD_ADDR_EXP 38
23470: PUSH
23471: LD_INT 0
23473: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
23474: LD_EXP 46
23478: PPUSH
23479: CALL_OW 122
// ComFree ( guard ) ;
23483: LD_VAR 0 1
23487: PPUSH
23488: CALL_OW 139
// end ; 2 :
23492: GO 23684
23494: LD_INT 2
23496: DOUBLE
23497: EQUAL
23498: IFTRUE 23502
23500: GO 23683
23502: POP
// begin Say ( Heike , DH-Guard-2 ) ;
23503: LD_EXP 46
23507: PPUSH
23508: LD_STRING DH-Guard-2
23510: PPUSH
23511: CALL_OW 88
// DialogueOff ;
23515: CALL_OW 7
// wait ( 0 0$2 ) ;
23519: LD_INT 70
23521: PPUSH
23522: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23526: LD_INT 6
23528: PPUSH
23529: LD_INT 2
23531: PPUSH
23532: LD_INT 2
23534: PPUSH
23535: LD_INT 1
23537: PPUSH
23538: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
23542: LD_VAR 0 1
23546: PPUSH
23547: LD_EXP 46
23551: PPUSH
23552: CALL_OW 115
// case GetSex ( guard ) of sex_male :
23556: LD_VAR 0 1
23560: PPUSH
23561: CALL_OW 258
23565: PUSH
23566: LD_INT 1
23568: DOUBLE
23569: EQUAL
23570: IFTRUE 23574
23572: GO 23589
23574: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
23575: LD_VAR 0 1
23579: PPUSH
23580: LD_STRING DRum-Fail-3
23582: PPUSH
23583: CALL_OW 88
23587: GO 23613
23589: LD_INT 2
23591: DOUBLE
23592: EQUAL
23593: IFTRUE 23597
23595: GO 23612
23597: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
23598: LD_VAR 0 1
23602: PPUSH
23603: LD_STRING DRum-Fail-3
23605: PPUSH
23606: CALL_OW 88
23610: GO 23613
23612: POP
// wait ( 0 0$5 ) ;
23613: LD_INT 175
23615: PPUSH
23616: CALL_OW 67
// if IsOk ( guard ) then
23620: LD_VAR 0 1
23624: PPUSH
23625: CALL_OW 302
23629: IFFALSE 23641
// isAlarm := true else
23631: LD_ADDR_EXP 17
23635: PUSH
23636: LD_INT 1
23638: ST_TO_ADDR
23639: GO 23673
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
23641: LD_INT 6
23643: PPUSH
23644: LD_INT 2
23646: PPUSH
23647: LD_INT 0
23649: PPUSH
23650: LD_INT 1
23652: PPUSH
23653: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
23657: LD_INT 3
23659: PPUSH
23660: LD_INT 2
23662: PPUSH
23663: LD_INT 0
23665: PPUSH
23666: LD_INT 1
23668: PPUSH
23669: CALL_OW 80
// end ; blockPatrolThread := false ;
23673: LD_ADDR_EXP 38
23677: PUSH
23678: LD_INT 0
23680: ST_TO_ADDR
// end ; end ;
23681: GO 23684
23683: POP
// blockPatrolThread := false ;
23684: LD_ADDR_EXP 38
23688: PUSH
23689: LD_INT 0
23691: ST_TO_ADDR
// end ;
23692: LD_VAR 0 3
23696: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
23697: LD_EXP 14
23701: PPUSH
23702: LD_INT 22
23704: PUSH
23705: LD_INT 5
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 3
23714: PUSH
23715: LD_INT 101
23717: PUSH
23718: LD_INT 6
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 92
23731: PUSH
23732: LD_INT 113
23734: PUSH
23735: LD_INT 16
23737: PUSH
23738: LD_INT 12
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 91
23749: PUSH
23750: LD_EXP 46
23754: PUSH
23755: LD_INT 6
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: PPUSH
23769: CALL_OW 72
23773: IFFALSE 23782
23775: PUSH
23776: LD_EXP 30
23780: NOT
23781: AND
23782: IFFALSE 23887
23784: GO 23786
23786: DISABLE
23787: LD_INT 0
23789: PPUSH
// begin enable ;
23790: ENABLE
// DialogueOn ;
23791: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
23795: LD_EXP 46
23799: PPUSH
23800: LD_STRING DH-Join-
23802: PUSH
23803: LD_INT 1
23805: PPUSH
23806: LD_INT 3
23808: PPUSH
23809: CALL_OW 12
23813: STR
23814: PPUSH
23815: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
23819: LD_ADDR_VAR 0 1
23823: PUSH
23824: LD_EXP 14
23828: PPUSH
23829: LD_INT 22
23831: PUSH
23832: LD_INT 5
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 91
23841: PUSH
23842: LD_EXP 46
23846: PUSH
23847: LD_INT 10
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PPUSH
23859: CALL_OW 72
23863: PUSH
23864: FOR_IN
23865: IFFALSE 23881
// SetSide ( i , 2 ) ;
23867: LD_VAR 0 1
23871: PPUSH
23872: LD_INT 2
23874: PPUSH
23875: CALL_OW 235
23879: GO 23864
23881: POP
23882: POP
// DialogueOff ;
23883: CALL_OW 7
// end ; end_of_file
23887: PPOPN 1
23889: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
23890: LD_EXP 17
23894: IFFALSE 23902
23896: PUSH
23897: LD_EXP 5
23901: AND
23902: IFFALSE 24203
23904: GO 23906
23906: DISABLE
23907: LD_INT 0
23909: PPUSH
23910: PPUSH
23911: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
23912: LD_INT 1
23914: NEG
23915: PPUSH
23916: LD_INT 1
23918: NEG
23919: PPUSH
23920: LD_STRING alarm
23922: PPUSH
23923: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
23927: LD_INT 3
23929: PPUSH
23930: LD_INT 2
23932: PPUSH
23933: LD_INT 2
23935: PPUSH
23936: LD_INT 1
23938: PPUSH
23939: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23943: LD_INT 6
23945: PPUSH
23946: LD_INT 2
23948: PPUSH
23949: LD_INT 2
23951: PPUSH
23952: LD_INT 1
23954: PPUSH
23955: CALL_OW 80
// DialogueOn ;
23959: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
23963: LD_EXP 46
23967: PPUSH
23968: LD_STRING DH-Alarm-1
23970: PPUSH
23971: CALL_OW 88
// DialogueOff ;
23975: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
23979: LD_ADDR_VAR 0 2
23983: PUSH
23984: LD_INT 107
23986: PUSH
23987: LD_INT 39
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 143
23996: PUSH
23997: LD_INT 33
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 180
24006: PUSH
24007: LD_INT 115
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 96
24016: PUSH
24017: LD_INT 90
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 59
24026: PUSH
24027: LD_INT 52
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 16
24036: PUSH
24037: LD_INT 15
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 90
24046: PUSH
24047: LD_INT 120
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
24063: LD_ADDR_VAR 0 3
24067: PUSH
24068: LD_INT 22
24070: PUSH
24071: LD_INT 6
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 25
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PPUSH
24092: CALL_OW 69
24096: ST_TO_ADDR
// for i in tmp do
24097: LD_ADDR_VAR 0 1
24101: PUSH
24102: LD_VAR 0 3
24106: PUSH
24107: FOR_IN
24108: IFFALSE 24176
// begin ComExit ( i ) ;
24110: LD_VAR 0 1
24114: PPUSH
24115: CALL 68635 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
24119: LD_VAR 0 1
24123: PPUSH
24124: LD_VAR 0 2
24128: PUSH
24129: LD_VAR 0 1
24133: PUSH
24134: LD_INT 7
24136: MOD
24137: PUSH
24138: LD_INT 1
24140: PLUS
24141: ARRAY
24142: PUSH
24143: LD_INT 1
24145: ARRAY
24146: PPUSH
24147: LD_VAR 0 2
24151: PUSH
24152: LD_VAR 0 1
24156: PUSH
24157: LD_INT 7
24159: MOD
24160: PUSH
24161: LD_INT 1
24163: PLUS
24164: ARRAY
24165: PUSH
24166: LD_INT 2
24168: ARRAY
24169: PPUSH
24170: CALL_OW 174
// end ;
24174: GO 24107
24176: POP
24177: POP
// Explode ;
24178: CALL 24206 0 0
// wait ( 0 0$45 ) ;
24182: LD_INT 1575
24184: PPUSH
24185: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
24189: LD_VAR 0 3
24193: PPUSH
24194: LD_EXP 46
24198: PPUSH
24199: CALL_OW 175
// end ;
24203: PPOPN 3
24205: END
// export function Explode ; var i , x , y , j ; begin
24206: LD_INT 0
24208: PPUSH
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
// if hasExplosionsInFactory then
24213: LD_EXP 7
24217: IFFALSE 24237
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
24219: LD_ADDR_EXP 29
24223: PUSH
24224: LD_EXP 29
24228: PPUSH
24229: LD_INT 61
24231: PPUSH
24232: CALL 68237 0 2
24236: ST_TO_ADDR
// if explosivePlantedList then
24237: LD_EXP 29
24241: IFFALSE 24389
// begin for i in explosivePlantedList do
24243: LD_ADDR_VAR 0 2
24247: PUSH
24248: LD_EXP 29
24252: PUSH
24253: FOR_IN
24254: IFFALSE 24357
// begin x := GetX ( i ) ;
24256: LD_ADDR_VAR 0 3
24260: PUSH
24261: LD_VAR 0 2
24265: PPUSH
24266: CALL_OW 250
24270: ST_TO_ADDR
// y := GetY ( i ) ;
24271: LD_ADDR_VAR 0 4
24275: PUSH
24276: LD_VAR 0 2
24280: PPUSH
24281: CALL_OW 251
24285: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
24286: LD_ADDR_VAR 0 5
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: LD_INT 3
24296: PUSH
24297: LD_INT 5
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: LIST
24304: PUSH
24305: FOR_IN
24306: IFFALSE 24353
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
24308: LD_VAR 0 3
24312: PPUSH
24313: LD_VAR 0 5
24317: PPUSH
24318: LD_INT 2
24320: PPUSH
24321: CALL_OW 272
24325: PPUSH
24326: LD_VAR 0 4
24330: PPUSH
24331: LD_VAR 0 5
24335: PPUSH
24336: LD_INT 2
24338: PPUSH
24339: CALL_OW 273
24343: PPUSH
24344: LD_INT 1
24346: PPUSH
24347: CALL_OW 453
24351: GO 24305
24353: POP
24354: POP
// end ;
24355: GO 24253
24357: POP
24358: POP
// Say ( Heike , DH-End-2 ) ;
24359: LD_EXP 46
24363: PPUSH
24364: LD_STRING DH-End-2
24366: PPUSH
24367: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
24371: LD_INT 175
24373: PUSH
24374: LD_EXP 29
24378: PPUSH
24379: CALL 32305 0 1
24383: MUL
24384: PPUSH
24385: CALL_OW 67
// end ; if not isAlarm then
24389: LD_EXP 17
24393: NOT
24394: IFFALSE 24404
// isAlarm := true ;
24396: LD_ADDR_EXP 17
24400: PUSH
24401: LD_INT 1
24403: ST_TO_ADDR
// end ;
24404: LD_VAR 0 1
24408: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
24409: LD_INT 22
24411: PUSH
24412: LD_INT 2
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 21
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 2
24431: PUSH
24432: LD_INT 101
24434: PUSH
24435: LD_INT 3
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 101
24444: PUSH
24445: LD_INT 6
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: LIST
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: LIST
24461: PPUSH
24462: CALL_OW 69
24466: IFFALSE 24479
24468: GO 24470
24470: DISABLE
// isAlarm := true ; end_of_file
24471: LD_ADDR_EXP 17
24475: PUSH
24476: LD_INT 1
24478: ST_TO_ADDR
24479: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
24480: LD_EXP 14
24484: PPUSH
24485: LD_INT 22
24487: PUSH
24488: LD_INT 2
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 72
24499: PUSH
24500: LD_INT 3
24502: GREATER
24503: IFFALSE 24512
24505: PUSH
24506: LD_EXP 17
24510: NOT
24511: AND
24512: IFFALSE 28585
24514: GO 24516
24516: DISABLE
24517: LD_INT 0
24519: PPUSH
24520: PPUSH
24521: PPUSH
24522: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
24523: LD_EXP 66
24527: PPUSH
24528: LD_INT 155
24530: PPUSH
24531: LD_INT 68
24533: PPUSH
24534: LD_INT 0
24536: PPUSH
24537: CALL_OW 48
// wait ( 0 0$1 ) ;
24541: LD_INT 35
24543: PPUSH
24544: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24548: LD_INT 35
24550: PPUSH
24551: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24555: LD_EXP 66
24559: PPUSH
24560: CALL_OW 314
24564: NOT
24565: IFFALSE 24581
// ComMoveUnit ( ruDisturb , Heike ) ;
24567: LD_EXP 66
24571: PPUSH
24572: LD_EXP 46
24576: PPUSH
24577: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24581: LD_EXP 46
24585: PPUSH
24586: LD_EXP 66
24590: PPUSH
24591: CALL_OW 296
24595: PUSH
24596: LD_INT 6
24598: LESS
24599: IFFALSE 24612
24601: PUSH
24602: LD_EXP 66
24606: PPUSH
24607: CALL_OW 302
24611: AND
24612: IFFALSE 24548
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24614: LD_EXP 46
24618: PPUSH
24619: CALL_OW 257
24623: PUSH
24624: LD_INT 33
24626: NONEQUAL
24627: IFTRUE 24721
24629: PUSH
24630: LD_EXP 14
24634: PPUSH
24635: LD_INT 22
24637: PUSH
24638: LD_INT 2
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 91
24647: PUSH
24648: LD_EXP 66
24652: PUSH
24653: LD_INT 8
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 2
24663: PUSH
24664: LD_INT 25
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 25
24676: PUSH
24677: LD_INT 11
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 25
24686: PUSH
24687: LD_INT 32
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 25
24696: PUSH
24697: LD_INT 34
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: PPUSH
24716: CALL_OW 72
24720: OR
24721: IFFALSE 24731
// isAlarm := true ;
24723: LD_ADDR_EXP 17
24727: PUSH
24728: LD_INT 1
24730: ST_TO_ADDR
// if isAlarm then
24731: LD_EXP 17
24735: IFFALSE 24739
// exit ;
24737: GO 28585
// DialogueOn ;
24739: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24743: LD_EXP 66
24747: PPUSH
24748: LD_STRING DMcn-Interrupt-1
24750: PPUSH
24751: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24755: LD_EXP 66
24759: PPUSH
24760: LD_STRING DMcn-Interrupt-2
24762: PPUSH
24763: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
24767: LD_EXP 66
24771: PPUSH
24772: LD_STRING DMcn-Interrupt-3
24774: PPUSH
24775: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
24779: LD_EXP 46
24783: PPUSH
24784: LD_STRING DH-Interrupt-a-4
24786: PPUSH
24787: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
24791: LD_EXP 66
24795: PPUSH
24796: LD_STRING DMcn-Interrupt-a-5
24798: PPUSH
24799: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
24803: LD_EXP 46
24807: PPUSH
24808: LD_STRING DH-Interrupt-a-6
24810: PPUSH
24811: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
24815: LD_EXP 66
24819: PPUSH
24820: LD_STRING DMcn-Interrupt-a-7
24822: PPUSH
24823: CALL_OW 88
// DialogueOff ;
24827: CALL_OW 7
// hasMuchin := true ;
24831: LD_ADDR_EXP 30
24835: PUSH
24836: LD_INT 1
24838: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24839: LD_STRING MuchinInfo
24841: PPUSH
24842: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
24846: LD_STRING M2a
24848: PPUSH
24849: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
24853: LD_INT 105
24855: PPUSH
24856: LD_INT 55
24858: PPUSH
24859: CALL_OW 428
24863: PPUSH
24864: LD_INT 2
24866: PPUSH
24867: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
24871: LD_INT 115
24873: PPUSH
24874: LD_INT 65
24876: PPUSH
24877: CALL_OW 428
24881: PPUSH
24882: LD_INT 2
24884: PPUSH
24885: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
24889: LD_INT 109
24891: PPUSH
24892: LD_INT 59
24894: PPUSH
24895: LD_INT 2
24897: PPUSH
24898: LD_INT 10
24900: NEG
24901: PPUSH
24902: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
24906: LD_INT 109
24908: PPUSH
24909: LD_INT 59
24911: PPUSH
24912: CALL_OW 84
// wait ( 0 0$2 ) ;
24916: LD_INT 70
24918: PPUSH
24919: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
24923: LD_INT 109
24925: PPUSH
24926: LD_INT 59
24928: PPUSH
24929: LD_INT 2
24931: PPUSH
24932: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
24936: LD_INT 35
24938: PPUSH
24939: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24943: LD_EXP 66
24947: PPUSH
24948: LD_EXP 46
24952: PPUSH
24953: CALL_OW 296
24957: PUSH
24958: LD_INT 6
24960: GREATER
24961: IFFALSE 24977
// ComMoveUnit ( ruDisturb , Heike ) ;
24963: LD_EXP 66
24967: PPUSH
24968: LD_EXP 46
24972: PPUSH
24973: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24977: LD_EXP 46
24981: PPUSH
24982: CALL_OW 257
24986: PUSH
24987: LD_INT 33
24989: NONEQUAL
24990: IFTRUE 25084
24992: PUSH
24993: LD_EXP 14
24997: PPUSH
24998: LD_INT 22
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 91
25010: PUSH
25011: LD_EXP 66
25015: PUSH
25016: LD_INT 8
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 2
25026: PUSH
25027: LD_INT 25
25029: PUSH
25030: LD_INT 1
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 25
25039: PUSH
25040: LD_INT 11
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 25
25049: PUSH
25050: LD_INT 32
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 25
25059: PUSH
25060: LD_INT 34
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: LIST
25078: PPUSH
25079: CALL_OW 72
25083: OR
25084: IFFALSE 25096
// begin isAlarm := true ;
25086: LD_ADDR_EXP 17
25090: PUSH
25091: LD_INT 1
25093: ST_TO_ADDR
// exit ;
25094: GO 28585
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
25096: LD_INT 105
25098: PPUSH
25099: LD_INT 55
25101: PPUSH
25102: CALL_OW 428
25106: NOT
25107: IFTRUE 25122
25109: PUSH
25110: LD_INT 115
25112: PPUSH
25113: LD_INT 65
25115: PPUSH
25116: CALL_OW 428
25120: NOT
25121: OR
25122: IFFALSE 25134
// begin isAlarm := true ;
25124: LD_ADDR_EXP 17
25128: PUSH
25129: LD_INT 1
25131: ST_TO_ADDR
// exit ;
25132: GO 28585
// end ; until not BuildingsInProgress ( 2 ) ;
25134: LD_INT 2
25136: PPUSH
25137: CALL_OW 345
25141: NOT
25142: IFFALSE 24936
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
25144: LD_INT 105
25146: PPUSH
25147: LD_INT 55
25149: PPUSH
25150: CALL_OW 428
25154: PPUSH
25155: LD_INT 3
25157: PPUSH
25158: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
25162: LD_INT 115
25164: PPUSH
25165: LD_INT 65
25167: PPUSH
25168: CALL_OW 428
25172: PPUSH
25173: LD_INT 3
25175: PPUSH
25176: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
25180: LD_STRING M2a-out
25182: PPUSH
25183: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
25187: LD_EXP 66
25191: PPUSH
25192: LD_INT 2
25194: PPUSH
25195: CALL_OW 120
// wait ( 0 0$3 ) ;
25199: LD_INT 105
25201: PPUSH
25202: CALL_OW 67
// hasMuchin := false ;
25206: LD_ADDR_EXP 30
25210: PUSH
25211: LD_INT 0
25213: ST_TO_ADDR
// wait ( 2 2$00 ) ;
25214: LD_INT 4200
25216: PPUSH
25217: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25221: LD_INT 35
25223: PPUSH
25224: CALL_OW 67
// if not HasTask ( ruDisturb ) then
25228: LD_EXP 66
25232: PPUSH
25233: CALL_OW 314
25237: NOT
25238: IFFALSE 25254
// ComMoveUnit ( ruDisturb , Heike ) ;
25240: LD_EXP 66
25244: PPUSH
25245: LD_EXP 46
25249: PPUSH
25250: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
25254: LD_EXP 46
25258: PPUSH
25259: LD_EXP 66
25263: PPUSH
25264: CALL_OW 296
25268: PUSH
25269: LD_INT 6
25271: LESS
25272: IFFALSE 25285
25274: PUSH
25275: LD_EXP 66
25279: PPUSH
25280: CALL_OW 302
25284: AND
25285: IFFALSE 25221
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25287: LD_EXP 46
25291: PPUSH
25292: CALL_OW 257
25296: PUSH
25297: LD_INT 33
25299: NONEQUAL
25300: IFTRUE 25394
25302: PUSH
25303: LD_EXP 14
25307: PPUSH
25308: LD_INT 22
25310: PUSH
25311: LD_INT 2
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 91
25320: PUSH
25321: LD_EXP 66
25325: PUSH
25326: LD_INT 8
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: LD_INT 25
25339: PUSH
25340: LD_INT 1
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 25
25349: PUSH
25350: LD_INT 11
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 25
25359: PUSH
25360: LD_INT 32
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 25
25369: PUSH
25370: LD_INT 34
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: LIST
25388: PPUSH
25389: CALL_OW 72
25393: OR
25394: IFFALSE 25404
// isAlarm := true ;
25396: LD_ADDR_EXP 17
25400: PUSH
25401: LD_INT 1
25403: ST_TO_ADDR
// if isAlarm then
25404: LD_EXP 17
25408: IFFALSE 25412
// exit ;
25410: GO 28585
// DialogueOn ;
25412: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
25416: LD_EXP 66
25420: PPUSH
25421: LD_STRING DMcn-Interrupt-1
25423: PPUSH
25424: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
25428: LD_EXP 66
25432: PPUSH
25433: LD_STRING DMcn-Interrupt-2
25435: PPUSH
25436: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
25440: LD_INT 176
25442: PPUSH
25443: LD_INT 54
25445: PPUSH
25446: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
25450: LD_INT 176
25452: PPUSH
25453: LD_INT 54
25455: PPUSH
25456: LD_INT 2
25458: PPUSH
25459: LD_INT 6
25461: NEG
25462: PPUSH
25463: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
25467: LD_INT 10
25469: PPUSH
25470: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
25474: LD_EXP 66
25478: PPUSH
25479: LD_STRING DMcn-Interrupt-b-3
25481: PPUSH
25482: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
25486: LD_EXP 46
25490: PPUSH
25491: LD_STRING DH-Interrupt-b-4
25493: PPUSH
25494: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
25498: LD_EXP 66
25502: PPUSH
25503: LD_STRING DMcn-Interrupt-b-5
25505: PPUSH
25506: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
25510: LD_EXP 46
25514: PPUSH
25515: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
25519: LD_INT 176
25521: PPUSH
25522: LD_INT 54
25524: PPUSH
25525: LD_INT 2
25527: PPUSH
25528: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
25532: LD_EXP 66
25536: PPUSH
25537: LD_STRING DMcn-Interrupt-b-6
25539: PPUSH
25540: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
25544: LD_EXP 46
25548: PPUSH
25549: LD_STRING DH-Interrupt-b-7
25551: PPUSH
25552: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
25556: LD_EXP 66
25560: PPUSH
25561: LD_STRING DMcn-Interrupt-b-8
25563: PPUSH
25564: CALL_OW 88
// DialogueOff ;
25568: CALL_OW 7
// Query ( MuchinInfo ) ;
25572: LD_STRING MuchinInfo
25574: PPUSH
25575: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
25579: LD_STRING M2b
25581: PPUSH
25582: CALL_OW 337
// hasMuchin := true ;
25586: LD_ADDR_EXP 30
25590: PUSH
25591: LD_INT 1
25593: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25594: LD_INT 35
25596: PPUSH
25597: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
25601: LD_EXP 66
25605: PPUSH
25606: LD_EXP 46
25610: PPUSH
25611: CALL_OW 296
25615: PUSH
25616: LD_INT 6
25618: GREATER
25619: IFFALSE 25635
// ComMoveUnit ( ruDisturb , Heike ) ;
25621: LD_EXP 66
25625: PPUSH
25626: LD_EXP 46
25630: PPUSH
25631: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25635: LD_EXP 46
25639: PPUSH
25640: CALL_OW 257
25644: PUSH
25645: LD_INT 33
25647: NONEQUAL
25648: IFTRUE 25742
25650: PUSH
25651: LD_EXP 14
25655: PPUSH
25656: LD_INT 22
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 91
25668: PUSH
25669: LD_EXP 66
25673: PUSH
25674: LD_INT 8
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: LD_INT 25
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 25
25697: PUSH
25698: LD_INT 11
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 25
25707: PUSH
25708: LD_INT 32
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 25
25717: PUSH
25718: LD_INT 34
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: LIST
25736: PPUSH
25737: CALL_OW 72
25741: OR
25742: IFFALSE 25754
// begin isAlarm := true ;
25744: LD_ADDR_EXP 17
25748: PUSH
25749: LD_INT 1
25751: ST_TO_ADDR
// exit ;
25752: GO 28585
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
25754: LD_EXP 46
25758: PPUSH
25759: LD_INT 61
25761: PPUSH
25762: CALL_OW 296
25766: PUSH
25767: LD_INT 4
25769: LESS
25770: IFFALSE 25594
// InGameOn ;
25772: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
25776: LD_INT 173
25778: PPUSH
25779: LD_INT 54
25781: PPUSH
25782: LD_INT 2
25784: PPUSH
25785: LD_INT 8
25787: NEG
25788: PPUSH
25789: CALL_OW 330
// SetSide ( Heike , 3 ) ;
25793: LD_EXP 46
25797: PPUSH
25798: LD_INT 3
25800: PPUSH
25801: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
25805: LD_EXP 46
25809: PPUSH
25810: LD_INT 61
25812: PPUSH
25813: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
25817: LD_EXP 66
25821: PPUSH
25822: LD_INT 61
25824: PPUSH
25825: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
25829: LD_EXP 53
25833: PUSH
25834: LD_EXP 14
25838: IN
25839: IFFALSE 25859
25841: PUSH
25842: LD_EXP 53
25846: PPUSH
25847: LD_INT 61
25849: PPUSH
25850: CALL_OW 296
25854: PUSH
25855: LD_INT 12
25857: LESS
25858: AND
25859: IFFALSE 25903
// begin SetSide ( Markov , 3 ) ;
25861: LD_EXP 53
25865: PPUSH
25866: LD_INT 3
25868: PPUSH
25869: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
25873: LD_EXP 53
25877: PPUSH
25878: LD_INT 61
25880: PPUSH
25881: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
25885: LD_INT 35
25887: PPUSH
25888: CALL_OW 67
// until IsInUnit ( Markov ) ;
25892: LD_EXP 53
25896: PPUSH
25897: CALL_OW 310
25901: IFFALSE 25885
// end ; repeat wait ( 0 0$1 ) ;
25903: LD_INT 35
25905: PPUSH
25906: CALL_OW 67
// until IsInUnit ( Heike ) ;
25910: LD_EXP 46
25914: PPUSH
25915: CALL_OW 310
25919: IFFALSE 25903
// SetClass ( Heike , class_mechanic ) ;
25921: LD_EXP 46
25925: PPUSH
25926: LD_INT 3
25928: PPUSH
25929: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
25933: LD_INT 61
25935: PPUSH
25936: LD_INT 21
25938: PPUSH
25939: LD_INT 3
25941: PPUSH
25942: LD_INT 3
25944: PPUSH
25945: LD_INT 43
25947: PPUSH
25948: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
25952: LD_EXP 31
25956: IFFALSE 25987
25958: PUSH
25959: LD_EXP 53
25963: PUSH
25964: LD_EXP 14
25968: IN
25969: IFTRUE 25986
25971: PUSH
25972: LD_EXP 53
25976: PPUSH
25977: CALL_OW 310
25981: PUSH
25982: LD_INT 61
25984: EQUAL
25985: OR
25986: AND
25987: IFFALSE 26477
// begin wait ( 0 0$5 ) ;
25989: LD_INT 175
25991: PPUSH
25992: CALL_OW 67
// SetSide ( Heike , 2 ) ;
25996: LD_EXP 46
26000: PPUSH
26001: LD_INT 2
26003: PPUSH
26004: CALL_OW 235
// SetSide ( Markov , 2 ) ;
26008: LD_EXP 53
26012: PPUSH
26013: LD_INT 2
26015: PPUSH
26016: CALL_OW 235
// if not Markov in heikeSquad then
26020: LD_EXP 53
26024: PUSH
26025: LD_EXP 14
26029: IN
26030: NOT
26031: IFFALSE 26053
// heikeSquad := Join ( heikeSquad , Markov ) ;
26033: LD_ADDR_EXP 14
26037: PUSH
26038: LD_EXP 14
26042: PPUSH
26043: LD_EXP 53
26047: PPUSH
26048: CALL 68237 0 2
26052: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
26053: LD_EXP 53
26057: PPUSH
26058: LD_STRING DMar-Factory-1
26060: PPUSH
26061: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
26065: LD_INT 61
26067: PPUSH
26068: LD_INT 99
26070: PPUSH
26071: CALL_OW 329
// game_speed := 4 ;
26075: LD_ADDR_OWVAR 65
26079: PUSH
26080: LD_INT 4
26082: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
26083: LD_EXP 66
26087: PPUSH
26088: CALL_OW 122
// ComExitBuilding ( Markov ) ;
26092: LD_EXP 53
26096: PPUSH
26097: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
26101: LD_EXP 66
26105: PPUSH
26106: LD_INT 171
26108: PPUSH
26109: LD_INT 51
26111: PPUSH
26112: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
26116: LD_EXP 53
26120: PPUSH
26121: LD_INT 167
26123: PPUSH
26124: LD_INT 50
26126: PPUSH
26127: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
26131: LD_EXP 53
26135: PPUSH
26136: LD_EXP 66
26140: PPUSH
26141: CALL_OW 179
// wait ( 0 0$5 ) ;
26145: LD_INT 175
26147: PPUSH
26148: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
26152: LD_EXP 53
26156: PPUSH
26157: LD_STRING DMar-Factory-2
26159: PPUSH
26160: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
26164: LD_ADDR_VAR 0 2
26168: PUSH
26169: LD_INT 22
26171: PUSH
26172: LD_INT 3
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 33
26181: PUSH
26182: LD_INT 3
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PPUSH
26193: CALL_OW 69
26197: PUSH
26198: LD_INT 1
26200: ARRAY
26201: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
26202: LD_EXP 66
26206: PPUSH
26207: LD_VAR 0 2
26211: PPUSH
26212: CALL_OW 119
// game_speed := 4 ;
26216: LD_ADDR_OWVAR 65
26220: PUSH
26221: LD_INT 4
26223: ST_TO_ADDR
// async ;
26224: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
26225: LD_EXP 66
26229: PPUSH
26230: LD_STRING DMcn-Factory-3
26232: PPUSH
26233: CALL_OW 88
// wait ( 0 0$0.9 ) ;
26237: LD_INT 32
26239: PPUSH
26240: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
26244: LD_VAR 0 2
26248: PPUSH
26249: LD_EXP 66
26253: PPUSH
26254: CALL_OW 115
// sync ;
26258: SYNC
// wait ( 0 0$1 ) ;
26259: LD_INT 35
26261: PPUSH
26262: CALL_OW 67
// KillUnit ( ruDisturb ) ;
26266: LD_EXP 66
26270: PPUSH
26271: CALL_OW 66
// SetSide ( veh , 7 ) ;
26275: LD_VAR 0 2
26279: PPUSH
26280: LD_INT 7
26282: PPUSH
26283: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
26287: LD_VAR 0 2
26291: PPUSH
26292: LD_INT 84
26294: PPUSH
26295: LD_INT 38
26297: PPUSH
26298: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
26302: LD_EXP 67
26306: PUSH
26307: LD_INT 1
26309: ARRAY
26310: PPUSH
26311: CALL_OW 258
26315: PUSH
26316: LD_INT 1
26318: EQUAL
26319: IFFALSE 26339
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
26321: LD_EXP 67
26325: PUSH
26326: LD_INT 1
26328: ARRAY
26329: PPUSH
26330: LD_STRING DRum-Factory-4
26332: PPUSH
26333: CALL_OW 88
26337: GO 26355
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
26339: LD_EXP 67
26343: PUSH
26344: LD_INT 1
26346: ARRAY
26347: PPUSH
26348: LD_STRING DRuf-Factory-4
26350: PPUSH
26351: CALL_OW 88
// wait ( 0 0$1 ) ;
26355: LD_INT 35
26357: PPUSH
26358: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
26362: LD_EXP 67
26366: PPUSH
26367: LD_INT 26
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PPUSH
26377: CALL_OW 72
26381: PUSH
26382: LD_INT 1
26384: ARRAY
26385: PPUSH
26386: LD_STRING DRum-Factory-6
26388: PPUSH
26389: CALL_OW 88
// wait ( 0 0$2 ) ;
26393: LD_INT 70
26395: PPUSH
26396: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
26400: LD_EXP 46
26404: PPUSH
26405: LD_INT 33
26407: PPUSH
26408: CALL_OW 336
// ComExitBuilding ( Heike ) ;
26412: LD_EXP 46
26416: PPUSH
26417: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
26421: LD_EXP 46
26425: PPUSH
26426: LD_INT 168
26428: PPUSH
26429: LD_INT 54
26431: PPUSH
26432: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
26436: LD_INT 173
26438: PPUSH
26439: LD_INT 54
26441: PPUSH
26442: LD_INT 2
26444: PPUSH
26445: CALL_OW 331
// InGameOff ;
26449: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
26453: LD_STRING M2b-out
26455: PPUSH
26456: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
26460: LD_STRING ACH_TOY
26462: PPUSH
26463: CALL_OW 543
// hasMuchin := false ;
26467: LD_ADDR_EXP 30
26471: PUSH
26472: LD_INT 0
26474: ST_TO_ADDR
// exit ;
26475: GO 28585
// end ; wait ( 0 0$5 ) ;
26477: LD_INT 175
26479: PPUSH
26480: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
26484: LD_INT 61
26486: PPUSH
26487: LD_INT 99
26489: PPUSH
26490: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
26494: LD_EXP 53
26498: PUSH
26499: LD_EXP 14
26503: IN
26504: IFFALSE 26521
26506: PUSH
26507: LD_EXP 53
26511: PPUSH
26512: CALL_OW 255
26516: PUSH
26517: LD_INT 3
26519: EQUAL
26520: AND
26521: IFFALSE 26544
// begin SetSide ( Markov , 2 ) ;
26523: LD_EXP 53
26527: PPUSH
26528: LD_INT 2
26530: PPUSH
26531: CALL_OW 235
// ComExitBuilding ( Markov ) ;
26535: LD_EXP 53
26539: PPUSH
26540: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
26544: LD_EXP 46
26548: PPUSH
26549: LD_INT 2
26551: PPUSH
26552: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
26556: LD_EXP 46
26560: PPUSH
26561: LD_INT 33
26563: PPUSH
26564: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
26568: LD_EXP 66
26572: PPUSH
26573: CALL_OW 122
// ComExitBuilding ( Heike ) ;
26577: LD_EXP 46
26581: PPUSH
26582: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
26586: LD_EXP 46
26590: PPUSH
26591: LD_INT 168
26593: PPUSH
26594: LD_INT 54
26596: PPUSH
26597: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
26601: LD_INT 173
26603: PPUSH
26604: LD_INT 54
26606: PPUSH
26607: LD_INT 2
26609: PPUSH
26610: CALL_OW 331
// InGameOff ;
26614: CALL_OW 9
// wait ( 3 ) ;
26618: LD_INT 3
26620: PPUSH
26621: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
26625: LD_EXP 66
26629: PPUSH
26630: LD_INT 2
26632: PPUSH
26633: CALL_OW 120
// wait ( 0 0$3 ) ;
26637: LD_INT 105
26639: PPUSH
26640: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
26644: LD_STRING M2b-out
26646: PPUSH
26647: CALL_OW 337
// hasMuchin := false ;
26651: LD_ADDR_EXP 30
26655: PUSH
26656: LD_INT 0
26658: ST_TO_ADDR
// wait ( 2 2$00 ) ;
26659: LD_INT 4200
26661: PPUSH
26662: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
26666: LD_INT 35
26668: PPUSH
26669: CALL_OW 67
// if not HasTask ( ruDisturb ) then
26673: LD_EXP 66
26677: PPUSH
26678: CALL_OW 314
26682: NOT
26683: IFFALSE 26699
// ComMoveUnit ( ruDisturb , Heike ) ;
26685: LD_EXP 66
26689: PPUSH
26690: LD_EXP 46
26694: PPUSH
26695: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
26699: LD_EXP 46
26703: PPUSH
26704: LD_EXP 66
26708: PPUSH
26709: CALL_OW 296
26713: PUSH
26714: LD_INT 2
26716: LESS
26717: IFFALSE 26730
26719: PUSH
26720: LD_EXP 66
26724: PPUSH
26725: CALL_OW 302
26729: AND
26730: IFFALSE 26666
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26732: LD_EXP 46
26736: PPUSH
26737: CALL_OW 257
26741: PUSH
26742: LD_INT 33
26744: NONEQUAL
26745: IFTRUE 26839
26747: PUSH
26748: LD_EXP 14
26752: PPUSH
26753: LD_INT 22
26755: PUSH
26756: LD_INT 2
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 91
26765: PUSH
26766: LD_EXP 66
26770: PUSH
26771: LD_INT 8
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 2
26781: PUSH
26782: LD_INT 25
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 25
26794: PUSH
26795: LD_INT 11
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 25
26804: PUSH
26805: LD_INT 32
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 25
26814: PUSH
26815: LD_INT 34
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: PPUSH
26834: CALL_OW 72
26838: OR
26839: IFFALSE 26849
// isAlarm := true ;
26841: LD_ADDR_EXP 17
26845: PUSH
26846: LD_INT 1
26848: ST_TO_ADDR
// if isAlarm then
26849: LD_EXP 17
26853: IFFALSE 26857
// exit ;
26855: GO 28585
// ComTurnUnit ( Heike , ruDisturb ) ;
26857: LD_EXP 46
26861: PPUSH
26862: LD_EXP 66
26866: PPUSH
26867: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
26871: LD_EXP 66
26875: PPUSH
26876: LD_EXP 46
26880: PPUSH
26881: CALL_OW 119
// wait ( 3 ) ;
26885: LD_INT 3
26887: PPUSH
26888: CALL_OW 67
// for i := 1 to 3 do
26892: LD_ADDR_VAR 0 1
26896: PUSH
26897: DOUBLE
26898: LD_INT 1
26900: DEC
26901: ST_TO_ADDR
26902: LD_INT 3
26904: PUSH
26905: FOR_TO
26906: IFFALSE 26923
// CreateCratesArea ( 5 , cratesArea , false ) ;
26908: LD_INT 5
26910: PPUSH
26911: LD_INT 58
26913: PPUSH
26914: LD_INT 0
26916: PPUSH
26917: CALL_OW 55
26921: GO 26905
26923: POP
26924: POP
// uc_side := 3 ;
26925: LD_ADDR_OWVAR 20
26929: PUSH
26930: LD_INT 3
26932: ST_TO_ADDR
// uc_nation := nation_russian ;
26933: LD_ADDR_OWVAR 21
26937: PUSH
26938: LD_INT 3
26940: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
26941: LD_INT 21
26943: PPUSH
26944: LD_INT 3
26946: PPUSH
26947: LD_INT 1
26949: PPUSH
26950: LD_INT 51
26952: PPUSH
26953: LD_INT 100
26955: PPUSH
26956: CALL 35067 0 5
// veh := CreateVehicle ;
26960: LD_ADDR_VAR 0 2
26964: PUSH
26965: CALL_OW 45
26969: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
26970: LD_VAR 0 2
26974: PPUSH
26975: LD_INT 104
26977: PPUSH
26978: LD_INT 41
26980: PPUSH
26981: LD_INT 3
26983: PPUSH
26984: LD_INT 0
26986: PPUSH
26987: CALL 70397 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
26991: LD_VAR 0 2
26995: PPUSH
26996: LD_INT 1
26998: PPUSH
26999: LD_INT 100
27001: PPUSH
27002: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
27006: CALL_OW 44
27010: PPUSH
27011: LD_VAR 0 2
27015: PPUSH
27016: CALL_OW 52
// DialogueOn ;
27020: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
27024: LD_EXP 66
27028: PPUSH
27029: LD_STRING DMcn-Interrupt-1
27031: PPUSH
27032: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
27036: LD_EXP 66
27040: PPUSH
27041: LD_STRING DMcn-Interrupt-2
27043: PPUSH
27044: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
27048: LD_EXP 66
27052: PPUSH
27053: LD_STRING DMcn-Interrupt-c-3
27055: PPUSH
27056: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
27060: LD_INT 101
27062: PPUSH
27063: LD_INT 38
27065: PPUSH
27066: LD_INT 2
27068: PPUSH
27069: LD_INT 10
27071: NEG
27072: PPUSH
27073: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
27077: LD_INT 101
27079: PPUSH
27080: LD_INT 38
27082: PPUSH
27083: CALL_OW 84
// wait ( 0 0$2 ) ;
27087: LD_INT 70
27089: PPUSH
27090: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
27094: LD_INT 101
27096: PPUSH
27097: LD_INT 38
27099: PPUSH
27100: LD_INT 2
27102: PPUSH
27103: CALL_OW 331
// RemoveUnit ( veh ) ;
27107: LD_VAR 0 2
27111: PPUSH
27112: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
27116: LD_EXP 66
27120: PPUSH
27121: LD_STRING DMcn-Interrupt-c-4
27123: PPUSH
27124: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
27128: LD_EXP 46
27132: PPUSH
27133: LD_STRING DH-Interrupt-c-5
27135: PPUSH
27136: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
27140: LD_EXP 66
27144: PPUSH
27145: LD_STRING DMcn-Interrupt-c-6
27147: PPUSH
27148: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
27152: LD_EXP 46
27156: PPUSH
27157: LD_STRING DH-Interrupt-c-7
27159: PPUSH
27160: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
27164: LD_EXP 66
27168: PPUSH
27169: LD_STRING DMcn-Interrupt-c-8
27171: PPUSH
27172: CALL_OW 88
// DialogueOff ;
27176: CALL_OW 7
// hasMuchin := true ;
27180: LD_ADDR_EXP 30
27184: PUSH
27185: LD_INT 1
27187: ST_TO_ADDR
// Query ( MuchinInfo ) ;
27188: LD_STRING MuchinInfo
27190: PPUSH
27191: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
27195: LD_STRING M2c
27197: PPUSH
27198: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
27202: LD_INT 35
27204: PPUSH
27205: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
27209: LD_EXP 66
27213: PPUSH
27214: LD_EXP 46
27218: PPUSH
27219: CALL_OW 296
27223: PUSH
27224: LD_INT 6
27226: GREATER
27227: IFFALSE 27243
// ComMoveUnit ( ruDisturb , Heike ) ;
27229: LD_EXP 66
27233: PPUSH
27234: LD_EXP 46
27238: PPUSH
27239: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
27243: LD_EXP 46
27247: PPUSH
27248: CALL_OW 257
27252: PUSH
27253: LD_INT 33
27255: NONEQUAL
27256: IFTRUE 27350
27258: PUSH
27259: LD_EXP 14
27263: PPUSH
27264: LD_INT 22
27266: PUSH
27267: LD_INT 2
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 91
27276: PUSH
27277: LD_EXP 66
27281: PUSH
27282: LD_INT 8
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: LD_INT 25
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 25
27305: PUSH
27306: LD_INT 11
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 25
27315: PUSH
27316: LD_INT 32
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 25
27325: PUSH
27326: LD_INT 34
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: PPUSH
27345: CALL_OW 72
27349: OR
27350: IFFALSE 27362
// begin isAlarm := true ;
27352: LD_ADDR_EXP 17
27356: PUSH
27357: LD_INT 1
27359: ST_TO_ADDR
// exit ;
27360: GO 28585
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
27362: LD_EXP 14
27366: PUSH
27367: LD_EXP 46
27371: UNION
27372: PPUSH
27373: LD_INT 92
27375: PUSH
27376: LD_INT 100
27378: PUSH
27379: LD_INT 37
27381: PUSH
27382: LD_INT 6
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: PPUSH
27391: CALL_OW 72
27395: IFFALSE 27202
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
27397: LD_INT 100
27399: PPUSH
27400: LD_INT 37
27402: PPUSH
27403: LD_INT 3
27405: PPUSH
27406: LD_INT 10
27408: NEG
27409: PPUSH
27410: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
27414: LD_ADDR_VAR 0 3
27418: PUSH
27419: LD_EXP 14
27423: PUSH
27424: LD_EXP 46
27428: UNION
27429: PPUSH
27430: LD_INT 25
27432: PUSH
27433: LD_INT 33
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 91
27442: PUSH
27443: LD_INT 6
27445: PUSH
27446: LD_INT 12
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PPUSH
27458: CALL_OW 72
27462: ST_TO_ADDR
// for i in tmp do
27463: LD_ADDR_VAR 0 1
27467: PUSH
27468: LD_VAR 0 3
27472: PUSH
27473: FOR_IN
27474: IFFALSE 27505
// begin SetSide ( i , 3 ) ;
27476: LD_VAR 0 1
27480: PPUSH
27481: LD_INT 3
27483: PPUSH
27484: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
27488: LD_VAR 0 1
27492: PPUSH
27493: LD_INT 101
27495: PPUSH
27496: LD_INT 38
27498: PPUSH
27499: CALL_OW 111
// end ;
27503: GO 27473
27505: POP
27506: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
27507: LD_EXP 66
27511: PPUSH
27512: LD_INT 104
27514: PPUSH
27515: LD_INT 37
27517: PPUSH
27518: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27522: LD_EXP 66
27526: PPUSH
27527: LD_EXP 46
27531: PPUSH
27532: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
27536: LD_INT 35
27538: PPUSH
27539: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
27543: LD_ADDR_VAR 0 4
27547: PUSH
27548: LD_INT 58
27550: PPUSH
27551: CALL_OW 435
27555: ST_TO_ADDR
// for i in tmp do
27556: LD_ADDR_VAR 0 1
27560: PUSH
27561: LD_VAR 0 3
27565: PUSH
27566: FOR_IN
27567: IFFALSE 27610
// if not HasTask ( i ) then
27569: LD_VAR 0 1
27573: PPUSH
27574: CALL_OW 314
27578: NOT
27579: IFFALSE 27608
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
27581: LD_VAR 0 1
27585: PPUSH
27586: LD_VAR 0 4
27590: PUSH
27591: LD_INT 1
27593: ARRAY
27594: PPUSH
27595: LD_VAR 0 4
27599: PUSH
27600: LD_INT 2
27602: ARRAY
27603: PPUSH
27604: CALL_OW 117
27608: GO 27566
27610: POP
27611: POP
// until not cr ;
27612: LD_VAR 0 4
27616: NOT
27617: IFFALSE 27536
// wait ( 0 0$2 ) ;
27619: LD_INT 70
27621: PPUSH
27622: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
27626: LD_INT 100
27628: PPUSH
27629: LD_INT 37
27631: PPUSH
27632: LD_INT 3
27634: PPUSH
27635: CALL_OW 331
// for i in tmp do
27639: LD_ADDR_VAR 0 1
27643: PUSH
27644: LD_VAR 0 3
27648: PUSH
27649: FOR_IN
27650: IFFALSE 27666
// SetSide ( i , 2 ) ;
27652: LD_VAR 0 1
27656: PPUSH
27657: LD_INT 2
27659: PPUSH
27660: CALL_OW 235
27664: GO 27649
27666: POP
27667: POP
// if Kaia in tmp then
27668: LD_EXP 51
27672: PUSH
27673: LD_VAR 0 3
27677: IN
27678: IFFALSE 27979
// begin InGameOn ;
27680: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
27684: LD_EXP 51
27688: PPUSH
27689: LD_EXP 66
27693: PPUSH
27694: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
27698: LD_EXP 66
27702: PPUSH
27703: LD_EXP 51
27707: PPUSH
27708: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
27712: LD_EXP 51
27716: PPUSH
27717: LD_EXP 66
27721: PPUSH
27722: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
27726: LD_EXP 51
27730: PPUSH
27731: LD_STRING DK-Assassin-1
27733: PPUSH
27734: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
27738: LD_EXP 66
27742: PPUSH
27743: LD_STRING DMcn-Assassin-2
27745: PPUSH
27746: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
27750: LD_EXP 51
27754: PPUSH
27755: LD_STRING DK-Assassin-3
27757: PPUSH
27758: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
27762: LD_EXP 66
27766: PPUSH
27767: LD_STRING DMcn-Assassin-4
27769: PPUSH
27770: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
27774: LD_EXP 51
27778: PPUSH
27779: LD_STRING DK-Assassin-5
27781: PPUSH
27782: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
27786: LD_EXP 66
27790: PPUSH
27791: LD_STRING DMcn-Assassin-6
27793: PPUSH
27794: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
27798: LD_EXP 51
27802: PPUSH
27803: LD_INT 3
27805: PPUSH
27806: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
27810: LD_EXP 51
27814: PUSH
27815: LD_EXP 66
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PPUSH
27824: LD_INT 6
27826: PPUSH
27827: CALL_OW 120
// wait ( 0 0$5 ) ;
27831: LD_INT 175
27833: PPUSH
27834: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
27838: LD_EXP 51
27842: PPUSH
27843: LD_STRING DK-Assassin-7
27845: PPUSH
27846: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
27850: LD_EXP 66
27854: PPUSH
27855: LD_STRING DMcn-Assassin-8
27857: PPUSH
27858: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27862: LD_INT 10
27864: PPUSH
27865: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
27869: LD_EXP 51
27873: PPUSH
27874: LD_STRING DK-Assassin-9
27876: PPUSH
27877: CALL_OW 88
// wait ( 0 0$2 ) ;
27881: LD_INT 70
27883: PPUSH
27884: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
27888: LD_EXP 51
27892: PPUSH
27893: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
27897: LD_EXP 66
27901: PPUSH
27902: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
27906: LD_EXP 51
27910: PPUSH
27911: LD_INT 2
27913: PPUSH
27914: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
27918: LD_EXP 51
27922: PPUSH
27923: LD_EXP 46
27927: PPUSH
27928: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
27932: LD_EXP 51
27936: PPUSH
27937: LD_STRING DK-Assasin-10
27939: PPUSH
27940: CALL_OW 88
// InGameOff ;
27944: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
27948: LD_STRING ACH_POKER
27950: PPUSH
27951: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
27955: LD_STRING M2c-out
27957: PPUSH
27958: CALL_OW 337
// wait ( 0 0$3 ) ;
27962: LD_INT 105
27964: PPUSH
27965: CALL_OW 67
// hasMuchin := false ;
27969: LD_ADDR_EXP 30
27973: PUSH
27974: LD_INT 0
27976: ST_TO_ADDR
// exit ;
27977: GO 28585
// end ; ChangeMissionObjectives ( M2c-out ) ;
27979: LD_STRING M2c-out
27981: PPUSH
27982: CALL_OW 337
// meetWithMuchin := true ;
27986: LD_ADDR_EXP 44
27990: PUSH
27991: LD_INT 1
27993: ST_TO_ADDR
// InGameOn ;
27994: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
27998: LD_EXP 66
28002: PPUSH
28003: LD_STRING DMcn-Fail-1
28005: PPUSH
28006: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
28010: LD_VAR 0 3
28014: PPUSH
28015: LD_INT 114
28017: PPUSH
28018: LD_INT 17
28020: PPUSH
28021: CALL_OW 111
// wait ( 0 0$1 ) ;
28025: LD_INT 35
28027: PPUSH
28028: CALL_OW 67
// async ;
28032: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
28033: LD_EXP 66
28037: PPUSH
28038: LD_EXP 46
28042: PPUSH
28043: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
28047: LD_EXP 66
28051: PPUSH
28052: LD_STRING DMcn-Fail-2
28054: PPUSH
28055: CALL_OW 88
// ComStop ( Heike ) ;
28059: LD_EXP 46
28063: PPUSH
28064: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
28068: LD_EXP 46
28072: PPUSH
28073: LD_EXP 66
28077: PPUSH
28078: CALL_OW 179
// sync ;
28082: SYNC
// Say ( Heike , DH-Fail-3 ) ;
28083: LD_EXP 46
28087: PPUSH
28088: LD_STRING DH-Fail-3
28090: PPUSH
28091: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
28095: LD_EXP 66
28099: PPUSH
28100: LD_STRING DMcn-Fail-4
28102: PPUSH
28103: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
28107: LD_EXP 46
28111: PUSH
28112: LD_EXP 66
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PPUSH
28121: LD_INT 41
28123: PPUSH
28124: LD_INT 19
28126: PPUSH
28127: CALL_OW 111
// wait ( 0 0$2 ) ;
28131: LD_INT 70
28133: PPUSH
28134: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
28138: LD_EXP 66
28142: PPUSH
28143: LD_INT 40
28145: PPUSH
28146: LD_INT 19
28148: PPUSH
28149: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
28153: LD_EXP 46
28157: PPUSH
28158: LD_INT 43
28160: PPUSH
28161: LD_INT 21
28163: PPUSH
28164: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
28168: LD_EXP 66
28172: PPUSH
28173: LD_EXP 46
28177: PPUSH
28178: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
28182: LD_EXP 46
28186: PPUSH
28187: LD_EXP 66
28191: PPUSH
28192: CALL_OW 179
// wait ( 0 0$2 ) ;
28196: LD_INT 70
28198: PPUSH
28199: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
28203: LD_EXP 66
28207: PPUSH
28208: LD_STRING DMcn-Fail-5
28210: PPUSH
28211: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
28215: LD_EXP 46
28219: PPUSH
28220: CALL_OW 87
// wait ( 0 0$2 ) ;
28224: LD_INT 70
28226: PPUSH
28227: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
28231: LD_EXP 66
28235: PPUSH
28236: LD_STRING DMcn-Fail-6
28238: PPUSH
28239: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
28243: LD_EXP 46
28247: PPUSH
28248: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
28252: LD_INT 35
28254: PPUSH
28255: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
28259: LD_EXP 46
28263: PPUSH
28264: LD_INT 43
28266: PPUSH
28267: LD_INT 21
28269: PPUSH
28270: CALL_OW 307
28274: IFFALSE 28252
// CenterNowOnUnits ( Heike ) ;
28276: LD_EXP 46
28280: PPUSH
28281: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
28285: LD_STRING MuchinQuestion
28287: PPUSH
28288: CALL_OW 97
28292: PUSH
28293: LD_INT 1
28295: DOUBLE
28296: EQUAL
28297: IFTRUE 28301
28299: GO 28401
28301: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
28302: LD_EXP 66
28306: PPUSH
28307: LD_STRING DMcn-Fail-7
28309: PPUSH
28310: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
28314: LD_EXP 46
28318: PPUSH
28319: LD_STRING DH-Fail-8
28321: PPUSH
28322: CALL_OW 88
// wait ( 0 0$0.3 ) ;
28326: LD_INT 10
28328: PPUSH
28329: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
28333: LD_EXP 46
28337: PPUSH
28338: LD_STRING DH-Fail-9
28340: PPUSH
28341: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
28345: LD_EXP 46
28349: PPUSH
28350: LD_STRING DH-Fail-10
28352: PPUSH
28353: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
28357: LD_EXP 66
28361: PPUSH
28362: LD_STRING DMcn-Fail-11
28364: PPUSH
28365: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
28369: LD_EXP 66
28373: PPUSH
28374: LD_EXP 46
28378: PPUSH
28379: CALL_OW 115
// wait ( 0 0$2 ) ;
28383: LD_INT 70
28385: PPUSH
28386: CALL_OW 67
// KillUnit ( Heike ) ;
28390: LD_EXP 46
28394: PPUSH
28395: CALL_OW 66
// end ; 2 :
28399: GO 28581
28401: LD_INT 2
28403: DOUBLE
28404: EQUAL
28405: IFTRUE 28409
28407: GO 28580
28409: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
28410: LD_EXP 46
28414: PPUSH
28415: LD_STRING DH-Fail-a-8
28417: PPUSH
28418: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
28422: LD_EXP 46
28426: PPUSH
28427: LD_STRING DH-Fail-a-9
28429: PPUSH
28430: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
28434: LD_EXP 46
28438: PPUSH
28439: LD_STRING DH-Fail-10
28441: PPUSH
28442: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
28446: LD_EXP 46
28450: PPUSH
28451: LD_STRING DH-Fail-a-11
28453: PPUSH
28454: CALL_OW 88
// async ;
28458: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
28459: LD_EXP 66
28463: PPUSH
28464: LD_EXP 46
28468: PPUSH
28469: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
28473: LD_EXP 66
28477: PPUSH
28478: LD_EXP 46
28482: PPUSH
28483: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
28487: LD_EXP 66
28491: PPUSH
28492: LD_STRING DH-Fail-12
28494: PPUSH
28495: CALL_OW 88
// sync ;
28499: SYNC
// wait ( 0 0$1 ) ;
28500: LD_INT 35
28502: PPUSH
28503: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
28507: LD_EXP 46
28511: PPUSH
28512: LD_STRING DH-Fail-a-13
28514: PPUSH
28515: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
28519: LD_EXP 66
28523: PPUSH
28524: LD_INT 100
28526: PPUSH
28527: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
28531: LD_EXP 66
28535: PPUSH
28536: LD_STRING DMcn-Fail-a-14
28538: PPUSH
28539: CALL_OW 91
// KillUnit ( ruDisturb ) ;
28543: LD_EXP 66
28547: PPUSH
28548: CALL_OW 66
// wait ( 0 0$1 ) ;
28552: LD_INT 35
28554: PPUSH
28555: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
28559: LD_EXP 46
28563: PPUSH
28564: LD_STRING DH-Fail-a-15
28566: PPUSH
28567: CALL_OW 88
// YouLost ( FailMuchin ) ;
28571: LD_STRING FailMuchin
28573: PPUSH
28574: CALL_OW 104
// end ; end ;
28578: GO 28581
28580: POP
// InGameOff ;
28581: CALL_OW 9
// end ;
28585: PPOPN 4
28587: END
// every 0 0$1 trigger FilterUnitsInArea ( baseOutsideBorderArea , [ f_side , 2 ] ) and not meetWithMuchin and hasMuchin marked gameStartEvent do
28588: LD_INT 23
28590: PPUSH
28591: LD_INT 22
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PPUSH
28601: CALL_OW 70
28605: IFFALSE 28614
28607: PUSH
28608: LD_EXP 44
28612: NOT
28613: AND
28614: IFFALSE 28622
28616: PUSH
28617: LD_EXP 30
28621: AND
28622: IFFALSE 28635
28624: GO 28626
28626: DISABLE
// isAlarm := true ; end_of_file
28627: LD_ADDR_EXP 17
28631: PUSH
28632: LD_INT 1
28634: ST_TO_ADDR
28635: END
// every 0 0$1 marked gameStartEvent do
28636: GO 28638
28638: DISABLE
// begin enable ;
28639: ENABLE
// if not contactWithAmerican then
28640: LD_EXP 25
28644: NOT
28645: IFFALSE 28690
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
28647: LD_ADDR_OWVAR 47
28651: PUSH
28652: LD_STRING #X108-1
28654: PUSH
28655: LD_INT 22
28657: PUSH
28658: LD_INT 5
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 21
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PPUSH
28679: CALL_OW 69
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: ST_TO_ADDR
28688: GO 28779
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
28690: LD_ADDR_OWVAR 47
28694: PUSH
28695: LD_STRING #X108-1
28697: PUSH
28698: LD_INT 22
28700: PUSH
28701: LD_INT 5
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 21
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 50
28720: PUSH
28721: EMPTY
28722: LIST
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: LIST
28728: PPUSH
28729: CALL_OW 69
28733: PUSH
28734: LD_STRING #X108-2
28736: PUSH
28737: LD_INT 22
28739: PUSH
28740: LD_INT 4
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 21
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 50
28759: PUSH
28760: EMPTY
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 69
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
// end ; end_of_file
28779: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
28780: LD_EXP 46
28784: PPUSH
28785: LD_INT 59
28787: PPUSH
28788: CALL_OW 308
28792: IFFALSE 28914
28794: GO 28796
28796: DISABLE
// begin Query ( FinalInfo ) ;
28797: LD_STRING FinalInfo
28799: PPUSH
28800: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
28804: LD_INT 59
28806: PPUSH
28807: LD_INT 1
28809: PPUSH
28810: CALL_OW 424
// end_the_mission_allowed := true ;
28814: LD_ADDR_OWVAR 57
28818: PUSH
28819: LD_INT 1
28821: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28822: LD_INT 35
28824: PPUSH
28825: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
28829: LD_INT 22
28831: PUSH
28832: LD_INT 2
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 21
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 95
28851: PUSH
28852: LD_INT 59
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: LIST
28863: PPUSH
28864: CALL_OW 69
28868: PPUSH
28869: CALL 32305 0 1
28873: PUSH
28874: LD_INT 22
28876: PUSH
28877: LD_INT 2
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 21
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PPUSH
28898: CALL_OW 69
28902: PPUSH
28903: CALL 32305 0 1
28907: EQUAL
28908: IFFALSE 28822
// EndMission ;
28910: CALL 28922 0 0
// end ;
28914: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
28915: CALL 28922 0 0
// end ;
28919: PPOPN 1
28921: END
// function EndMission ; var tmp ; begin
28922: LD_INT 0
28924: PPUSH
28925: PPUSH
// PlayOriginalMusic ;
28926: CALL 95274 0 0
// if not IsInArea ( Heike , finalArea ) then
28930: LD_EXP 46
28934: PPUSH
28935: LD_INT 59
28937: PPUSH
28938: CALL_OW 308
28942: NOT
28943: IFFALSE 28954
// begin Query ( HeikeOutOfArea ) ;
28945: LD_STRING HeikeOutOfArea
28947: PPUSH
28948: CALL_OW 97
// exit ;
28952: GO 29903
// end ; if not IsOk ( Heike ) then
28954: LD_EXP 46
28958: PPUSH
28959: CALL_OW 302
28963: NOT
28964: IFFALSE 28975
// begin Query ( HeikeIsHurt ) ;
28966: LD_STRING HeikeIsHurt
28968: PPUSH
28969: CALL_OW 97
// exit ;
28973: GO 29903
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
28975: LD_INT 22
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 21
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 50
28997: PUSH
28998: EMPTY
28999: LIST
29000: PUSH
29001: LD_INT 95
29003: PUSH
29004: LD_INT 59
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: PPUSH
29017: CALL_OW 69
29021: PPUSH
29022: CALL 32305 0 1
29026: PUSH
29027: LD_INT 6
29029: LESS
29030: IFFALSE 29039
// YouLost ( NeedMorePep ) ;
29032: LD_STRING NeedMorePep
29034: PPUSH
29035: CALL_OW 104
// if tick < 20 20$00 then
29039: LD_OWVAR 1
29043: PUSH
29044: LD_INT 42000
29046: LESS
29047: IFFALSE 29056
// SetAchievement ( ACH_HSPEED_8 ) ;
29049: LD_STRING ACH_HSPEED_8
29051: PPUSH
29052: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
29056: LD_INT 22
29058: PUSH
29059: LD_INT 5
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 21
29068: PUSH
29069: LD_INT 1
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PPUSH
29080: CALL_OW 69
29084: PUSH
29085: LD_INT 0
29087: EQUAL
29088: IFFALSE 29100
29090: PUSH
29091: LD_EXP 32
29095: PUSH
29096: LD_INT 0
29098: EQUAL
29099: AND
29100: IFFALSE 29114
// AddMedal ( med1 , 1 ) else
29102: LD_STRING med1
29104: PPUSH
29105: LD_INT 1
29107: PPUSH
29108: CALL_OW 101
29112: GO 29125
// AddMedal ( med1 , - 1 ) ;
29114: LD_STRING med1
29116: PPUSH
29117: LD_INT 1
29119: NEG
29120: PPUSH
29121: CALL_OW 101
// if explosivePlantedList >= 3 then
29125: LD_EXP 29
29129: PUSH
29130: LD_INT 3
29132: GREATEREQUAL
29133: IFFALSE 29147
// AddMedal ( med2 , 1 ) else
29135: LD_STRING med2
29137: PPUSH
29138: LD_INT 1
29140: PPUSH
29141: CALL_OW 101
29145: GO 29181
// if explosivePlantedList < 3 then
29147: LD_EXP 29
29151: PUSH
29152: LD_INT 3
29154: LESS
29155: IFFALSE 29170
// AddMedal ( med2 , - 2 ) else
29157: LD_STRING med2
29159: PPUSH
29160: LD_INT 2
29162: NEG
29163: PPUSH
29164: CALL_OW 101
29168: GO 29181
// AddMedal ( med2 , - 1 ) ;
29170: LD_STRING med2
29172: PPUSH
29173: LD_INT 1
29175: NEG
29176: PPUSH
29177: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
29181: LD_INT 5
29183: PPUSH
29184: LD_INT 2
29186: PPUSH
29187: CALL_OW 321
29191: PUSH
29192: LD_INT 2
29194: EQUAL
29195: IFFALSE 29209
// AddMedal ( med3 , 1 ) else
29197: LD_STRING med3
29199: PPUSH
29200: LD_INT 1
29202: PPUSH
29203: CALL_OW 101
29207: GO 29220
// AddMedal ( med3 , - 1 ) ;
29209: LD_STRING med3
29211: PPUSH
29212: LD_INT 1
29214: NEG
29215: PPUSH
29216: CALL_OW 101
// GiveMedals ( MAIN ) ;
29220: LD_STRING MAIN
29222: PPUSH
29223: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ;
29227: LD_ADDR_VAR 0 2
29231: PUSH
29232: LD_INT 22
29234: PUSH
29235: LD_INT 2
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 21
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 50
29254: PUSH
29255: EMPTY
29256: LIST
29257: PUSH
29258: LD_INT 95
29260: PUSH
29261: LD_INT 59
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: PPUSH
29274: CALL_OW 69
29278: ST_TO_ADDR
// RewardPeople ( UnitFilter ( tmp , [ f_nation , 2 ] ) ) ;
29279: LD_VAR 0 2
29283: PPUSH
29284: LD_INT 23
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PPUSH
29294: CALL_OW 72
29298: PPUSH
29299: CALL_OW 43
// if Doug and Doug in tmp then
29303: LD_EXP 60
29307: IFFALSE 29321
29309: PUSH
29310: LD_EXP 60
29314: PUSH
29315: LD_VAR 0 2
29319: IN
29320: AND
29321: IFFALSE 29335
// SaveCharacters ( Doug , 08_UsCommander ) ;
29323: LD_EXP 60
29327: PPUSH
29328: LD_STRING 08_UsCommander
29330: PPUSH
29331: CALL_OW 38
// if Harris and Harris in tmp then
29335: LD_EXP 59
29339: IFFALSE 29353
29341: PUSH
29342: LD_EXP 59
29346: PUSH
29347: LD_VAR 0 2
29351: IN
29352: AND
29353: IFFALSE 29367
// SaveCharacters ( Harris , 08_Harris ) ;
29355: LD_EXP 59
29359: PPUSH
29360: LD_STRING 08_Harris
29362: PPUSH
29363: CALL_OW 38
// SaveCharacters ( UnitFilter ( tmp , [ f_nation , 1 ] ) diff [ Doug , Harris ] , 08_Americans ) ;
29367: LD_VAR 0 2
29371: PPUSH
29372: LD_INT 23
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PPUSH
29382: CALL_OW 72
29386: PUSH
29387: LD_EXP 60
29391: PUSH
29392: LD_EXP 59
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: DIFF
29401: PPUSH
29402: LD_STRING 08_Americans
29404: PPUSH
29405: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
29409: LD_EXP 46
29413: PPUSH
29414: CALL_OW 248
29418: PUSH
29419: LD_INT 3
29421: EQUAL
29422: IFFALSE 29452
// begin CopySkills ( Heike , HeikeTmp ) ;
29424: LD_EXP 46
29428: PPUSH
29429: LD_EXP 62
29433: PPUSH
29434: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
29438: LD_EXP 62
29442: PPUSH
29443: LD_STRING 08_Heike
29445: PPUSH
29446: CALL_OW 38
// end else
29450: GO 29464
// SaveCharacters ( Heike , 08_Heike ) ;
29452: LD_EXP 46
29456: PPUSH
29457: LD_STRING 08_Heike
29459: PPUSH
29460: CALL_OW 38
// if Aviradze and Aviradze in tmp then
29464: LD_EXP 56
29468: IFFALSE 29482
29470: PUSH
29471: LD_EXP 56
29475: PUSH
29476: LD_VAR 0 2
29480: IN
29481: AND
29482: IFFALSE 29496
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
29484: LD_EXP 56
29488: PPUSH
29489: LD_STRING 08_Aviradze
29491: PPUSH
29492: CALL_OW 38
// if Ibrahim and Ibrahim in tmp then
29496: LD_EXP 49
29500: IFFALSE 29514
29502: PUSH
29503: LD_EXP 49
29507: PUSH
29508: LD_VAR 0 2
29512: IN
29513: AND
29514: IFFALSE 29528
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
29516: LD_EXP 49
29520: PPUSH
29521: LD_STRING 08_Ibrahim
29523: PPUSH
29524: CALL_OW 38
// if Kamil and Kamil in tmp then
29528: LD_EXP 50
29532: IFFALSE 29546
29534: PUSH
29535: LD_EXP 50
29539: PUSH
29540: LD_VAR 0 2
29544: IN
29545: AND
29546: IFFALSE 29560
// SaveCharacters ( Kamil , 08_Kamil ) ;
29548: LD_EXP 50
29552: PPUSH
29553: LD_STRING 08_Kamil
29555: PPUSH
29556: CALL_OW 38
// if Sophia and Sophia in tmp then
29560: LD_EXP 52
29564: IFFALSE 29578
29566: PUSH
29567: LD_EXP 52
29571: PUSH
29572: LD_VAR 0 2
29576: IN
29577: AND
29578: IFFALSE 29592
// SaveCharacters ( Sophia , 08_Sophia ) ;
29580: LD_EXP 52
29584: PPUSH
29585: LD_STRING 08_Sophia
29587: PPUSH
29588: CALL_OW 38
// if Kaia and Kaia in tmp then
29592: LD_EXP 51
29596: IFFALSE 29610
29598: PUSH
29599: LD_EXP 51
29603: PUSH
29604: LD_VAR 0 2
29608: IN
29609: AND
29610: IFFALSE 29624
// SaveCharacters ( Kaia , 08_Kaia ) ;
29612: LD_EXP 51
29616: PPUSH
29617: LD_STRING 08_Kaia
29619: PPUSH
29620: CALL_OW 38
// if Givi and Givi in tmp then
29624: LD_EXP 47
29628: IFFALSE 29642
29630: PUSH
29631: LD_EXP 47
29635: PUSH
29636: LD_VAR 0 2
29640: IN
29641: AND
29642: IFFALSE 29699
// if GetNation ( Givi ) = nation_russian then
29644: LD_EXP 47
29648: PPUSH
29649: CALL_OW 248
29653: PUSH
29654: LD_INT 3
29656: EQUAL
29657: IFFALSE 29687
// begin CopySkills ( Givi , GiviTmp ) ;
29659: LD_EXP 47
29663: PPUSH
29664: LD_EXP 63
29668: PPUSH
29669: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
29673: LD_EXP 63
29677: PPUSH
29678: LD_STRING 08_Givi
29680: PPUSH
29681: CALL_OW 38
// end else
29685: GO 29699
// SaveCharacters ( Givi , 08_Givi ) ;
29687: LD_EXP 47
29691: PPUSH
29692: LD_STRING 08_Givi
29694: PPUSH
29695: CALL_OW 38
// if Mike and Mike in tmp then
29699: LD_EXP 48
29703: IFFALSE 29717
29705: PUSH
29706: LD_EXP 48
29710: PUSH
29711: LD_VAR 0 2
29715: IN
29716: AND
29717: IFFALSE 29731
// SaveCharacters ( Mike , 08_Mike ) ;
29719: LD_EXP 48
29723: PPUSH
29724: LD_STRING 08_Mike
29726: PPUSH
29727: CALL_OW 38
// if Markov and Markov in tmp then
29731: LD_EXP 53
29735: IFFALSE 29749
29737: PUSH
29738: LD_EXP 53
29742: PUSH
29743: LD_VAR 0 2
29747: IN
29748: AND
29749: IFFALSE 29763
// SaveCharacters ( Markov , 08_Markov ) ;
29751: LD_EXP 53
29755: PPUSH
29756: LD_STRING 08_Markov
29758: PPUSH
29759: CALL_OW 38
// if Kurt and Kurt in tmp then
29763: LD_EXP 55
29767: IFFALSE 29781
29769: PUSH
29770: LD_EXP 55
29774: PUSH
29775: LD_VAR 0 2
29779: IN
29780: AND
29781: IFFALSE 29795
// SaveCharacters ( Kurt , 08_Kurt ) ;
29783: LD_EXP 55
29787: PPUSH
29788: LD_STRING 08_Kurt
29790: PPUSH
29791: CALL_OW 38
// if Olaf and Olaf in tmp then
29795: LD_EXP 54
29799: IFFALSE 29813
29801: PUSH
29802: LD_EXP 54
29806: PUSH
29807: LD_VAR 0 2
29811: IN
29812: AND
29813: IFFALSE 29827
// SaveCharacters ( Olaf , 08_Olaf ) ;
29815: LD_EXP 54
29819: PPUSH
29820: LD_STRING 08_Olaf
29822: PPUSH
29823: CALL_OW 38
// if UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) then
29827: LD_EXP 57
29831: PPUSH
29832: LD_INT 95
29834: PUSH
29835: LD_INT 59
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 50
29844: PUSH
29845: EMPTY
29846: LIST
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PPUSH
29852: CALL_OW 72
29856: IFFALSE 29895
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) , 08_others ) ;
29858: LD_EXP 57
29862: PPUSH
29863: LD_INT 95
29865: PUSH
29866: LD_INT 59
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 50
29875: PUSH
29876: EMPTY
29877: LIST
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PPUSH
29883: CALL_OW 72
29887: PPUSH
29888: LD_STRING 08_others
29890: PPUSH
29891: CALL_OW 38
// YouWin ;
29895: CALL_OW 103
// DialogueOff ;
29899: CALL_OW 7
// end ; end_of_file
29903: LD_VAR 0 1
29907: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
29908: LD_EXP 5
29912: IFFALSE 30102
29914: GO 29916
29916: DISABLE
29917: LD_INT 0
29919: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
29920: LD_INT 35
29922: PPUSH
29923: LD_INT 2100
29925: PPUSH
29926: CALL_OW 12
29930: PPUSH
29931: CALL_OW 67
// StopOriginalMusic ;
29935: CALL 95259 0 0
// weatherBusy := true ;
29939: LD_ADDR_EXP 37
29943: PUSH
29944: LD_INT 1
29946: ST_TO_ADDR
// for i := 1 to 3 do
29947: LD_ADDR_VAR 0 1
29951: PUSH
29952: DOUBLE
29953: LD_INT 1
29955: DEC
29956: ST_TO_ADDR
29957: LD_INT 3
29959: PUSH
29960: FOR_TO
29961: IFFALSE 29995
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
29963: LD_INT 1
29965: PPUSH
29966: LD_INT 100
29968: PUSH
29969: LD_INT 100
29971: PUSH
29972: LD_VAR 0 1
29976: MUL
29977: PLUS
29978: PPUSH
29979: LD_INT 60
29981: PPUSH
29982: CALL_OW 550
// wait ( 0 0$2 ) ;
29986: LD_INT 70
29988: PPUSH
29989: CALL_OW 67
// end ;
29993: GO 29960
29995: POP
29996: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
29997: LD_STRING ArStormRain.wav
29999: PPUSH
30000: LD_STRING OW_CUSTOM_COMMAND(103);
30002: PPUSH
30003: CALL 95289 0 2
// wait ( 0 0$3 ) ;
30007: LD_INT 105
30009: PPUSH
30010: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
30014: LD_INT 1
30016: PPUSH
30017: LD_INT 900
30019: PPUSH
30020: LD_INT 120
30022: PPUSH
30023: CALL_OW 550
// wait ( 0 0$10 ) ;
30027: LD_INT 350
30029: PPUSH
30030: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
30034: LD_INT 1
30036: PPUSH
30037: LD_INT 1500
30039: PPUSH
30040: LD_INT 300
30042: PPUSH
30043: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
30047: LD_INT 35
30049: PPUSH
30050: CALL_OW 67
// until not weatherBusy ;
30054: LD_EXP 37
30058: NOT
30059: IFFALSE 30047
// SetWeather ( 0 , 0 , 0 ) ;
30061: LD_INT 0
30063: PPUSH
30064: LD_INT 0
30066: PPUSH
30067: LD_INT 0
30069: PPUSH
30070: CALL_OW 550
// wait ( 5 5$00 ) ;
30074: LD_INT 10500
30076: PPUSH
30077: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
30081: LD_STRING ArStormNormal.wav
30083: PPUSH
30084: LD_STRING OW_CUSTOM_COMMAND(103);
30086: PPUSH
30087: CALL 95289 0 2
// wait ( 5 5$00 ) ;
30091: LD_INT 10500
30093: PPUSH
30094: CALL_OW 67
// PlayOriginalMusic ;
30098: CALL 95274 0 0
// end ; end_of_file
30102: PPOPN 1
30104: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30105: LD_INT 0
30107: PPUSH
30108: PPUSH
// if exist_mode then
30109: LD_VAR 0 2
30113: IFFALSE 30159
// begin unit := CreateCharacter ( prefix & ident ) ;
30115: LD_ADDR_VAR 0 5
30119: PUSH
30120: LD_VAR 0 3
30124: PUSH
30125: LD_VAR 0 1
30129: STR
30130: PPUSH
30131: CALL_OW 34
30135: ST_TO_ADDR
// if unit then
30136: LD_VAR 0 5
30140: IFFALSE 30157
// DeleteCharacters ( prefix & ident ) ;
30142: LD_VAR 0 3
30146: PUSH
30147: LD_VAR 0 1
30151: STR
30152: PPUSH
30153: CALL_OW 40
// end else
30157: GO 30174
// unit := NewCharacter ( ident ) ;
30159: LD_ADDR_VAR 0 5
30163: PUSH
30164: LD_VAR 0 1
30168: PPUSH
30169: CALL_OW 25
30173: ST_TO_ADDR
// result := unit ;
30174: LD_ADDR_VAR 0 4
30178: PUSH
30179: LD_VAR 0 5
30183: ST_TO_ADDR
// end ;
30184: LD_VAR 0 4
30188: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30189: LD_INT 0
30191: PPUSH
30192: PPUSH
// if exist_mode then
30193: LD_VAR 0 2
30197: IFFALSE 30222
// unit := CreateCharacter ( prefix & ident ) else
30199: LD_ADDR_VAR 0 5
30203: PUSH
30204: LD_VAR 0 3
30208: PUSH
30209: LD_VAR 0 1
30213: STR
30214: PPUSH
30215: CALL_OW 34
30219: ST_TO_ADDR
30220: GO 30237
// unit := NewCharacter ( ident ) ;
30222: LD_ADDR_VAR 0 5
30226: PUSH
30227: LD_VAR 0 1
30231: PPUSH
30232: CALL_OW 25
30236: ST_TO_ADDR
// result := unit ;
30237: LD_ADDR_VAR 0 4
30241: PUSH
30242: LD_VAR 0 5
30246: ST_TO_ADDR
// end ;
30247: LD_VAR 0 4
30251: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30252: LD_INT 0
30254: PPUSH
30255: PPUSH
// if not side or not nation then
30256: LD_VAR 0 1
30260: NOT
30261: IFTRUE 30270
30263: PUSH
30264: LD_VAR 0 2
30268: NOT
30269: OR
30270: IFFALSE 30274
// exit ;
30272: GO 31044
// case nation of nation_american :
30274: LD_VAR 0 2
30278: PUSH
30279: LD_INT 1
30281: DOUBLE
30282: EQUAL
30283: IFTRUE 30287
30285: GO 30501
30287: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30288: LD_ADDR_VAR 0 4
30292: PUSH
30293: LD_INT 35
30295: PUSH
30296: LD_INT 45
30298: PUSH
30299: LD_INT 46
30301: PUSH
30302: LD_INT 47
30304: PUSH
30305: LD_INT 82
30307: PUSH
30308: LD_INT 83
30310: PUSH
30311: LD_INT 84
30313: PUSH
30314: LD_INT 85
30316: PUSH
30317: LD_INT 86
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: LD_INT 6
30328: PUSH
30329: LD_INT 15
30331: PUSH
30332: LD_INT 16
30334: PUSH
30335: LD_INT 7
30337: PUSH
30338: LD_INT 12
30340: PUSH
30341: LD_INT 13
30343: PUSH
30344: LD_INT 10
30346: PUSH
30347: LD_INT 14
30349: PUSH
30350: LD_INT 20
30352: PUSH
30353: LD_INT 21
30355: PUSH
30356: LD_INT 22
30358: PUSH
30359: LD_INT 25
30361: PUSH
30362: LD_INT 32
30364: PUSH
30365: LD_INT 27
30367: PUSH
30368: LD_INT 36
30370: PUSH
30371: LD_INT 69
30373: PUSH
30374: LD_INT 39
30376: PUSH
30377: LD_INT 34
30379: PUSH
30380: LD_INT 40
30382: PUSH
30383: LD_INT 48
30385: PUSH
30386: LD_INT 49
30388: PUSH
30389: LD_INT 50
30391: PUSH
30392: LD_INT 51
30394: PUSH
30395: LD_INT 52
30397: PUSH
30398: LD_INT 53
30400: PUSH
30401: LD_INT 54
30403: PUSH
30404: LD_INT 55
30406: PUSH
30407: LD_INT 56
30409: PUSH
30410: LD_INT 57
30412: PUSH
30413: LD_INT 58
30415: PUSH
30416: LD_INT 59
30418: PUSH
30419: LD_INT 60
30421: PUSH
30422: LD_INT 61
30424: PUSH
30425: LD_INT 62
30427: PUSH
30428: LD_INT 80
30430: PUSH
30431: LD_INT 82
30433: PUSH
30434: LD_INT 83
30436: PUSH
30437: LD_INT 84
30439: PUSH
30440: LD_INT 85
30442: PUSH
30443: LD_INT 86
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: ST_TO_ADDR
30499: GO 30966
30501: LD_INT 2
30503: DOUBLE
30504: EQUAL
30505: IFTRUE 30509
30507: GO 30735
30509: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30510: LD_ADDR_VAR 0 4
30514: PUSH
30515: LD_INT 35
30517: PUSH
30518: LD_INT 45
30520: PUSH
30521: LD_INT 46
30523: PUSH
30524: LD_INT 47
30526: PUSH
30527: LD_INT 82
30529: PUSH
30530: LD_INT 83
30532: PUSH
30533: LD_INT 84
30535: PUSH
30536: LD_INT 85
30538: PUSH
30539: LD_INT 87
30541: PUSH
30542: LD_INT 70
30544: PUSH
30545: LD_INT 1
30547: PUSH
30548: LD_INT 11
30550: PUSH
30551: LD_INT 3
30553: PUSH
30554: LD_INT 4
30556: PUSH
30557: LD_INT 5
30559: PUSH
30560: LD_INT 6
30562: PUSH
30563: LD_INT 15
30565: PUSH
30566: LD_INT 18
30568: PUSH
30569: LD_INT 7
30571: PUSH
30572: LD_INT 17
30574: PUSH
30575: LD_INT 8
30577: PUSH
30578: LD_INT 20
30580: PUSH
30581: LD_INT 21
30583: PUSH
30584: LD_INT 22
30586: PUSH
30587: LD_INT 72
30589: PUSH
30590: LD_INT 26
30592: PUSH
30593: LD_INT 69
30595: PUSH
30596: LD_INT 39
30598: PUSH
30599: LD_INT 40
30601: PUSH
30602: LD_INT 41
30604: PUSH
30605: LD_INT 42
30607: PUSH
30608: LD_INT 43
30610: PUSH
30611: LD_INT 48
30613: PUSH
30614: LD_INT 49
30616: PUSH
30617: LD_INT 50
30619: PUSH
30620: LD_INT 51
30622: PUSH
30623: LD_INT 52
30625: PUSH
30626: LD_INT 53
30628: PUSH
30629: LD_INT 54
30631: PUSH
30632: LD_INT 55
30634: PUSH
30635: LD_INT 56
30637: PUSH
30638: LD_INT 60
30640: PUSH
30641: LD_INT 61
30643: PUSH
30644: LD_INT 62
30646: PUSH
30647: LD_INT 66
30649: PUSH
30650: LD_INT 67
30652: PUSH
30653: LD_INT 68
30655: PUSH
30656: LD_INT 81
30658: PUSH
30659: LD_INT 82
30661: PUSH
30662: LD_INT 83
30664: PUSH
30665: LD_INT 84
30667: PUSH
30668: LD_INT 85
30670: PUSH
30671: LD_INT 87
30673: PUSH
30674: LD_INT 88
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: ST_TO_ADDR
30733: GO 30966
30735: LD_INT 3
30737: DOUBLE
30738: EQUAL
30739: IFTRUE 30743
30741: GO 30965
30743: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30744: LD_ADDR_VAR 0 4
30748: PUSH
30749: LD_INT 46
30751: PUSH
30752: LD_INT 47
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: LD_INT 82
30763: PUSH
30764: LD_INT 83
30766: PUSH
30767: LD_INT 84
30769: PUSH
30770: LD_INT 85
30772: PUSH
30773: LD_INT 86
30775: PUSH
30776: LD_INT 11
30778: PUSH
30779: LD_INT 9
30781: PUSH
30782: LD_INT 20
30784: PUSH
30785: LD_INT 19
30787: PUSH
30788: LD_INT 21
30790: PUSH
30791: LD_INT 24
30793: PUSH
30794: LD_INT 22
30796: PUSH
30797: LD_INT 25
30799: PUSH
30800: LD_INT 28
30802: PUSH
30803: LD_INT 29
30805: PUSH
30806: LD_INT 30
30808: PUSH
30809: LD_INT 31
30811: PUSH
30812: LD_INT 37
30814: PUSH
30815: LD_INT 38
30817: PUSH
30818: LD_INT 32
30820: PUSH
30821: LD_INT 27
30823: PUSH
30824: LD_INT 33
30826: PUSH
30827: LD_INT 69
30829: PUSH
30830: LD_INT 39
30832: PUSH
30833: LD_INT 34
30835: PUSH
30836: LD_INT 40
30838: PUSH
30839: LD_INT 71
30841: PUSH
30842: LD_INT 23
30844: PUSH
30845: LD_INT 44
30847: PUSH
30848: LD_INT 48
30850: PUSH
30851: LD_INT 49
30853: PUSH
30854: LD_INT 50
30856: PUSH
30857: LD_INT 51
30859: PUSH
30860: LD_INT 52
30862: PUSH
30863: LD_INT 53
30865: PUSH
30866: LD_INT 54
30868: PUSH
30869: LD_INT 55
30871: PUSH
30872: LD_INT 56
30874: PUSH
30875: LD_INT 57
30877: PUSH
30878: LD_INT 58
30880: PUSH
30881: LD_INT 59
30883: PUSH
30884: LD_INT 63
30886: PUSH
30887: LD_INT 64
30889: PUSH
30890: LD_INT 65
30892: PUSH
30893: LD_INT 82
30895: PUSH
30896: LD_INT 83
30898: PUSH
30899: LD_INT 84
30901: PUSH
30902: LD_INT 85
30904: PUSH
30905: LD_INT 86
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: ST_TO_ADDR
30963: GO 30966
30965: POP
// if state > - 1 and state < 3 then
30966: LD_VAR 0 3
30970: PUSH
30971: LD_INT 1
30973: NEG
30974: GREATER
30975: IFFALSE 30987
30977: PUSH
30978: LD_VAR 0 3
30982: PUSH
30983: LD_INT 3
30985: LESS
30986: AND
30987: IFFALSE 31044
// for i in result do
30989: LD_ADDR_VAR 0 5
30993: PUSH
30994: LD_VAR 0 4
30998: PUSH
30999: FOR_IN
31000: IFFALSE 31042
// if GetTech ( i , side ) <> state then
31002: LD_VAR 0 5
31006: PPUSH
31007: LD_VAR 0 1
31011: PPUSH
31012: CALL_OW 321
31016: PUSH
31017: LD_VAR 0 3
31021: NONEQUAL
31022: IFFALSE 31040
// result := result diff i ;
31024: LD_ADDR_VAR 0 4
31028: PUSH
31029: LD_VAR 0 4
31033: PUSH
31034: LD_VAR 0 5
31038: DIFF
31039: ST_TO_ADDR
31040: GO 30999
31042: POP
31043: POP
// end ;
31044: LD_VAR 0 4
31048: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31049: LD_INT 0
31051: PPUSH
31052: PPUSH
31053: PPUSH
// result := true ;
31054: LD_ADDR_VAR 0 3
31058: PUSH
31059: LD_INT 1
31061: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31062: LD_ADDR_VAR 0 5
31066: PUSH
31067: LD_VAR 0 2
31071: PPUSH
31072: CALL_OW 480
31076: ST_TO_ADDR
// if not tmp then
31077: LD_VAR 0 5
31081: NOT
31082: IFFALSE 31086
// exit ;
31084: GO 31135
// for i in tmp do
31086: LD_ADDR_VAR 0 4
31090: PUSH
31091: LD_VAR 0 5
31095: PUSH
31096: FOR_IN
31097: IFFALSE 31133
// if GetTech ( i , side ) <> state_researched then
31099: LD_VAR 0 4
31103: PPUSH
31104: LD_VAR 0 1
31108: PPUSH
31109: CALL_OW 321
31113: PUSH
31114: LD_INT 2
31116: NONEQUAL
31117: IFFALSE 31131
// begin result := false ;
31119: LD_ADDR_VAR 0 3
31123: PUSH
31124: LD_INT 0
31126: ST_TO_ADDR
// exit ;
31127: POP
31128: POP
31129: GO 31135
// end ;
31131: GO 31096
31133: POP
31134: POP
// end ;
31135: LD_VAR 0 3
31139: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31140: LD_INT 0
31142: PPUSH
31143: PPUSH
31144: PPUSH
31145: PPUSH
31146: PPUSH
31147: PPUSH
31148: PPUSH
31149: PPUSH
31150: PPUSH
31151: PPUSH
31152: PPUSH
31153: PPUSH
31154: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31155: LD_VAR 0 1
31159: NOT
31160: IFTRUE 31177
31162: PUSH
31163: LD_VAR 0 1
31167: PPUSH
31168: CALL_OW 257
31172: PUSH
31173: LD_INT 9
31175: NONEQUAL
31176: OR
31177: IFFALSE 31181
// exit ;
31179: GO 31760
// side := GetSide ( unit ) ;
31181: LD_ADDR_VAR 0 9
31185: PUSH
31186: LD_VAR 0 1
31190: PPUSH
31191: CALL_OW 255
31195: ST_TO_ADDR
// tech_space := tech_spacanom ;
31196: LD_ADDR_VAR 0 12
31200: PUSH
31201: LD_INT 29
31203: ST_TO_ADDR
// tech_time := tech_taurad ;
31204: LD_ADDR_VAR 0 13
31208: PUSH
31209: LD_INT 28
31211: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31212: LD_ADDR_VAR 0 11
31216: PUSH
31217: LD_VAR 0 1
31221: PPUSH
31222: CALL_OW 310
31226: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31227: LD_VAR 0 11
31231: PPUSH
31232: CALL_OW 247
31236: PUSH
31237: LD_INT 2
31239: EQUAL
31240: IFFALSE 31244
// exit ;
31242: GO 31760
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31244: LD_ADDR_VAR 0 8
31248: PUSH
31249: LD_INT 81
31251: PUSH
31252: LD_VAR 0 9
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: LD_INT 21
31266: PUSH
31267: LD_INT 3
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PPUSH
31282: CALL_OW 69
31286: ST_TO_ADDR
// if not tmp then
31287: LD_VAR 0 8
31291: NOT
31292: IFFALSE 31296
// exit ;
31294: GO 31760
// if in_unit then
31296: LD_VAR 0 11
31300: IFFALSE 31324
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31302: LD_ADDR_VAR 0 10
31306: PUSH
31307: LD_VAR 0 8
31311: PPUSH
31312: LD_VAR 0 11
31316: PPUSH
31317: CALL_OW 74
31321: ST_TO_ADDR
31322: GO 31344
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31324: LD_ADDR_VAR 0 10
31328: PUSH
31329: LD_VAR 0 8
31333: PPUSH
31334: LD_VAR 0 1
31338: PPUSH
31339: CALL_OW 74
31343: ST_TO_ADDR
// if not enemy then
31344: LD_VAR 0 10
31348: NOT
31349: IFFALSE 31353
// exit ;
31351: GO 31760
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31353: LD_VAR 0 11
31357: IFFALSE 31379
31359: PUSH
31360: LD_VAR 0 11
31364: PPUSH
31365: LD_VAR 0 10
31369: PPUSH
31370: CALL_OW 296
31374: PUSH
31375: LD_INT 13
31377: GREATER
31378: AND
31379: IFTRUE 31401
31381: PUSH
31382: LD_VAR 0 1
31386: PPUSH
31387: LD_VAR 0 10
31391: PPUSH
31392: CALL_OW 296
31396: PUSH
31397: LD_INT 12
31399: GREATER
31400: OR
31401: IFFALSE 31405
// exit ;
31403: GO 31760
// missile := [ 1 ] ;
31405: LD_ADDR_VAR 0 14
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: EMPTY
31414: LIST
31415: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31416: LD_VAR 0 9
31420: PPUSH
31421: LD_VAR 0 12
31425: PPUSH
31426: CALL_OW 325
31430: IFFALSE 31459
// missile := Replace ( missile , missile + 1 , 2 ) ;
31432: LD_ADDR_VAR 0 14
31436: PUSH
31437: LD_VAR 0 14
31441: PPUSH
31442: LD_VAR 0 14
31446: PUSH
31447: LD_INT 1
31449: PLUS
31450: PPUSH
31451: LD_INT 2
31453: PPUSH
31454: CALL_OW 1
31458: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31459: LD_VAR 0 9
31463: PPUSH
31464: LD_VAR 0 13
31468: PPUSH
31469: CALL_OW 325
31473: IFFALSE 31497
31475: PUSH
31476: LD_VAR 0 10
31480: PPUSH
31481: CALL_OW 255
31485: PPUSH
31486: LD_VAR 0 13
31490: PPUSH
31491: CALL_OW 325
31495: NOT
31496: AND
31497: IFFALSE 31526
// missile := Replace ( missile , missile + 1 , 3 ) ;
31499: LD_ADDR_VAR 0 14
31503: PUSH
31504: LD_VAR 0 14
31508: PPUSH
31509: LD_VAR 0 14
31513: PUSH
31514: LD_INT 1
31516: PLUS
31517: PPUSH
31518: LD_INT 3
31520: PPUSH
31521: CALL_OW 1
31525: ST_TO_ADDR
// if missile < 2 then
31526: LD_VAR 0 14
31530: PUSH
31531: LD_INT 2
31533: LESS
31534: IFFALSE 31538
// exit ;
31536: GO 31760
// x := GetX ( enemy ) ;
31538: LD_ADDR_VAR 0 4
31542: PUSH
31543: LD_VAR 0 10
31547: PPUSH
31548: CALL_OW 250
31552: ST_TO_ADDR
// y := GetY ( enemy ) ;
31553: LD_ADDR_VAR 0 5
31557: PUSH
31558: LD_VAR 0 10
31562: PPUSH
31563: CALL_OW 251
31567: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31568: LD_ADDR_VAR 0 6
31572: PUSH
31573: LD_VAR 0 4
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PPUSH
31582: LD_INT 1
31584: PPUSH
31585: CALL_OW 12
31589: PLUS
31590: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31591: LD_ADDR_VAR 0 7
31595: PUSH
31596: LD_VAR 0 5
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PPUSH
31605: LD_INT 1
31607: PPUSH
31608: CALL_OW 12
31612: PLUS
31613: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31614: LD_VAR 0 6
31618: PPUSH
31619: LD_VAR 0 7
31623: PPUSH
31624: CALL_OW 488
31628: NOT
31629: IFFALSE 31651
// begin _x := x ;
31631: LD_ADDR_VAR 0 6
31635: PUSH
31636: LD_VAR 0 4
31640: ST_TO_ADDR
// _y := y ;
31641: LD_ADDR_VAR 0 7
31645: PUSH
31646: LD_VAR 0 5
31650: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31651: LD_ADDR_VAR 0 3
31655: PUSH
31656: LD_INT 1
31658: PPUSH
31659: LD_VAR 0 14
31663: PPUSH
31664: CALL_OW 12
31668: ST_TO_ADDR
// case i of 1 :
31669: LD_VAR 0 3
31673: PUSH
31674: LD_INT 1
31676: DOUBLE
31677: EQUAL
31678: IFTRUE 31682
31680: GO 31699
31682: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31683: LD_VAR 0 1
31687: PPUSH
31688: LD_VAR 0 10
31692: PPUSH
31693: CALL_OW 115
31697: GO 31760
31699: LD_INT 2
31701: DOUBLE
31702: EQUAL
31703: IFTRUE 31707
31705: GO 31729
31707: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31708: LD_VAR 0 1
31712: PPUSH
31713: LD_VAR 0 6
31717: PPUSH
31718: LD_VAR 0 7
31722: PPUSH
31723: CALL_OW 153
31727: GO 31760
31729: LD_INT 3
31731: DOUBLE
31732: EQUAL
31733: IFTRUE 31737
31735: GO 31759
31737: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31738: LD_VAR 0 1
31742: PPUSH
31743: LD_VAR 0 6
31747: PPUSH
31748: LD_VAR 0 7
31752: PPUSH
31753: CALL_OW 154
31757: GO 31760
31759: POP
// end ;
31760: LD_VAR 0 2
31764: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31765: LD_INT 0
31767: PPUSH
31768: PPUSH
31769: PPUSH
31770: PPUSH
31771: PPUSH
31772: PPUSH
// if not unit or not building then
31773: LD_VAR 0 1
31777: NOT
31778: IFTRUE 31787
31780: PUSH
31781: LD_VAR 0 2
31785: NOT
31786: OR
31787: IFFALSE 31791
// exit ;
31789: GO 31949
// x := GetX ( building ) ;
31791: LD_ADDR_VAR 0 5
31795: PUSH
31796: LD_VAR 0 2
31800: PPUSH
31801: CALL_OW 250
31805: ST_TO_ADDR
// y := GetY ( building ) ;
31806: LD_ADDR_VAR 0 6
31810: PUSH
31811: LD_VAR 0 2
31815: PPUSH
31816: CALL_OW 251
31820: ST_TO_ADDR
// for i := 0 to 5 do
31821: LD_ADDR_VAR 0 4
31825: PUSH
31826: DOUBLE
31827: LD_INT 0
31829: DEC
31830: ST_TO_ADDR
31831: LD_INT 5
31833: PUSH
31834: FOR_TO
31835: IFFALSE 31947
// begin _x := ShiftX ( x , i , 3 ) ;
31837: LD_ADDR_VAR 0 7
31841: PUSH
31842: LD_VAR 0 5
31846: PPUSH
31847: LD_VAR 0 4
31851: PPUSH
31852: LD_INT 3
31854: PPUSH
31855: CALL_OW 272
31859: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31860: LD_ADDR_VAR 0 8
31864: PUSH
31865: LD_VAR 0 6
31869: PPUSH
31870: LD_VAR 0 4
31874: PPUSH
31875: LD_INT 3
31877: PPUSH
31878: CALL_OW 273
31882: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31883: LD_VAR 0 7
31887: PPUSH
31888: LD_VAR 0 8
31892: PPUSH
31893: CALL_OW 488
31897: NOT
31898: IFFALSE 31902
// continue ;
31900: GO 31834
// if HexInfo ( _x , _y ) = 0 then
31902: LD_VAR 0 7
31906: PPUSH
31907: LD_VAR 0 8
31911: PPUSH
31912: CALL_OW 428
31916: PUSH
31917: LD_INT 0
31919: EQUAL
31920: IFFALSE 31945
// begin ComMoveXY ( unit , _x , _y ) ;
31922: LD_VAR 0 1
31926: PPUSH
31927: LD_VAR 0 7
31931: PPUSH
31932: LD_VAR 0 8
31936: PPUSH
31937: CALL_OW 111
// exit ;
31941: POP
31942: POP
31943: GO 31949
// end ; end ;
31945: GO 31834
31947: POP
31948: POP
// end ;
31949: LD_VAR 0 3
31953: RET
// export function ScanBase ( side , base_area ) ; begin
31954: LD_INT 0
31956: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31957: LD_ADDR_VAR 0 3
31961: PUSH
31962: LD_VAR 0 2
31966: PPUSH
31967: LD_INT 81
31969: PUSH
31970: LD_VAR 0 1
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PPUSH
31979: CALL_OW 70
31983: ST_TO_ADDR
// end ;
31984: LD_VAR 0 3
31988: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31989: LD_INT 0
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
// result := false ;
31995: LD_ADDR_VAR 0 2
31999: PUSH
32000: LD_INT 0
32002: ST_TO_ADDR
// side := GetSide ( unit ) ;
32003: LD_ADDR_VAR 0 3
32007: PUSH
32008: LD_VAR 0 1
32012: PPUSH
32013: CALL_OW 255
32017: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32018: LD_ADDR_VAR 0 4
32022: PUSH
32023: LD_VAR 0 1
32027: PPUSH
32028: CALL_OW 248
32032: ST_TO_ADDR
// case nat of 1 :
32033: LD_VAR 0 4
32037: PUSH
32038: LD_INT 1
32040: DOUBLE
32041: EQUAL
32042: IFTRUE 32046
32044: GO 32057
32046: POP
// tech := tech_lassight ; 2 :
32047: LD_ADDR_VAR 0 5
32051: PUSH
32052: LD_INT 12
32054: ST_TO_ADDR
32055: GO 32096
32057: LD_INT 2
32059: DOUBLE
32060: EQUAL
32061: IFTRUE 32065
32063: GO 32076
32065: POP
// tech := tech_mortar ; 3 :
32066: LD_ADDR_VAR 0 5
32070: PUSH
32071: LD_INT 41
32073: ST_TO_ADDR
32074: GO 32096
32076: LD_INT 3
32078: DOUBLE
32079: EQUAL
32080: IFTRUE 32084
32082: GO 32095
32084: POP
// tech := tech_bazooka ; end ;
32085: LD_ADDR_VAR 0 5
32089: PUSH
32090: LD_INT 44
32092: ST_TO_ADDR
32093: GO 32096
32095: POP
// if Researched ( side , tech ) then
32096: LD_VAR 0 3
32100: PPUSH
32101: LD_VAR 0 5
32105: PPUSH
32106: CALL_OW 325
32110: IFFALSE 32137
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32112: LD_ADDR_VAR 0 2
32116: PUSH
32117: LD_INT 5
32119: PUSH
32120: LD_INT 8
32122: PUSH
32123: LD_INT 9
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: LIST
32130: PUSH
32131: LD_VAR 0 4
32135: ARRAY
32136: ST_TO_ADDR
// end ;
32137: LD_VAR 0 2
32141: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32142: LD_INT 0
32144: PPUSH
32145: PPUSH
32146: PPUSH
// if not mines then
32147: LD_VAR 0 2
32151: NOT
32152: IFFALSE 32156
// exit ;
32154: GO 32300
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32156: LD_ADDR_VAR 0 5
32160: PUSH
32161: LD_INT 81
32163: PUSH
32164: LD_VAR 0 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 3
32175: PUSH
32176: LD_INT 21
32178: PUSH
32179: LD_INT 3
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PPUSH
32194: CALL_OW 69
32198: ST_TO_ADDR
// for i in mines do
32199: LD_ADDR_VAR 0 4
32203: PUSH
32204: LD_VAR 0 2
32208: PUSH
32209: FOR_IN
32210: IFFALSE 32298
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32212: LD_VAR 0 4
32216: PUSH
32217: LD_INT 1
32219: ARRAY
32220: PPUSH
32221: LD_VAR 0 4
32225: PUSH
32226: LD_INT 2
32228: ARRAY
32229: PPUSH
32230: CALL_OW 458
32234: NOT
32235: IFFALSE 32239
// continue ;
32237: GO 32209
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32239: LD_VAR 0 4
32243: PUSH
32244: LD_INT 1
32246: ARRAY
32247: PPUSH
32248: LD_VAR 0 4
32252: PUSH
32253: LD_INT 2
32255: ARRAY
32256: PPUSH
32257: CALL_OW 428
32261: PUSH
32262: LD_VAR 0 5
32266: IN
32267: IFFALSE 32296
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32269: LD_VAR 0 4
32273: PUSH
32274: LD_INT 1
32276: ARRAY
32277: PPUSH
32278: LD_VAR 0 4
32282: PUSH
32283: LD_INT 2
32285: ARRAY
32286: PPUSH
32287: LD_VAR 0 1
32291: PPUSH
32292: CALL_OW 456
// end ;
32296: GO 32209
32298: POP
32299: POP
// end ;
32300: LD_VAR 0 3
32304: RET
// export function Count ( array ) ; begin
32305: LD_INT 0
32307: PPUSH
// result := array + 0 ;
32308: LD_ADDR_VAR 0 2
32312: PUSH
32313: LD_VAR 0 1
32317: PUSH
32318: LD_INT 0
32320: PLUS
32321: ST_TO_ADDR
// end ;
32322: LD_VAR 0 2
32326: RET
// export function IsEmpty ( building ) ; begin
32327: LD_INT 0
32329: PPUSH
// if not building then
32330: LD_VAR 0 1
32334: NOT
32335: IFFALSE 32339
// exit ;
32337: GO 32382
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32339: LD_ADDR_VAR 0 2
32343: PUSH
32344: LD_VAR 0 1
32348: PUSH
32349: LD_INT 22
32351: PUSH
32352: LD_VAR 0 1
32356: PPUSH
32357: CALL_OW 255
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 58
32368: PUSH
32369: EMPTY
32370: LIST
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PPUSH
32376: CALL_OW 69
32380: IN
32381: ST_TO_ADDR
// end ;
32382: LD_VAR 0 2
32386: RET
// export function IsNotFull ( building ) ; var places ; begin
32387: LD_INT 0
32389: PPUSH
32390: PPUSH
// if not building then
32391: LD_VAR 0 1
32395: NOT
32396: IFFALSE 32400
// exit ;
32398: GO 32428
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32400: LD_ADDR_VAR 0 2
32404: PUSH
32405: LD_VAR 0 1
32409: PPUSH
32410: LD_INT 3
32412: PUSH
32413: LD_INT 62
32415: PUSH
32416: EMPTY
32417: LIST
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PPUSH
32423: CALL_OW 72
32427: ST_TO_ADDR
// end ;
32428: LD_VAR 0 2
32432: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32433: LD_INT 0
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
// tmp := [ ] ;
32439: LD_ADDR_VAR 0 3
32443: PUSH
32444: EMPTY
32445: ST_TO_ADDR
// list := [ ] ;
32446: LD_ADDR_VAR 0 5
32450: PUSH
32451: EMPTY
32452: ST_TO_ADDR
// for i = 16 to 25 do
32453: LD_ADDR_VAR 0 4
32457: PUSH
32458: DOUBLE
32459: LD_INT 16
32461: DEC
32462: ST_TO_ADDR
32463: LD_INT 25
32465: PUSH
32466: FOR_TO
32467: IFFALSE 32540
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32469: LD_ADDR_VAR 0 3
32473: PUSH
32474: LD_VAR 0 3
32478: PUSH
32479: LD_INT 22
32481: PUSH
32482: LD_VAR 0 1
32486: PPUSH
32487: CALL_OW 255
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 91
32498: PUSH
32499: LD_VAR 0 1
32503: PUSH
32504: LD_INT 6
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 30
32514: PUSH
32515: LD_VAR 0 4
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: LIST
32528: PUSH
32529: EMPTY
32530: LIST
32531: PPUSH
32532: CALL_OW 69
32536: ADD
32537: ST_TO_ADDR
32538: GO 32466
32540: POP
32541: POP
// for i = 1 to tmp do
32542: LD_ADDR_VAR 0 4
32546: PUSH
32547: DOUBLE
32548: LD_INT 1
32550: DEC
32551: ST_TO_ADDR
32552: LD_VAR 0 3
32556: PUSH
32557: FOR_TO
32558: IFFALSE 32646
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32560: LD_ADDR_VAR 0 5
32564: PUSH
32565: LD_VAR 0 5
32569: PUSH
32570: LD_VAR 0 3
32574: PUSH
32575: LD_VAR 0 4
32579: ARRAY
32580: PPUSH
32581: CALL_OW 266
32585: PUSH
32586: LD_VAR 0 3
32590: PUSH
32591: LD_VAR 0 4
32595: ARRAY
32596: PPUSH
32597: CALL_OW 250
32601: PUSH
32602: LD_VAR 0 3
32606: PUSH
32607: LD_VAR 0 4
32611: ARRAY
32612: PPUSH
32613: CALL_OW 251
32617: PUSH
32618: LD_VAR 0 3
32622: PUSH
32623: LD_VAR 0 4
32627: ARRAY
32628: PPUSH
32629: CALL_OW 254
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: PUSH
32640: EMPTY
32641: LIST
32642: ADD
32643: ST_TO_ADDR
32644: GO 32557
32646: POP
32647: POP
// result := list ;
32648: LD_ADDR_VAR 0 2
32652: PUSH
32653: LD_VAR 0 5
32657: ST_TO_ADDR
// end ;
32658: LD_VAR 0 2
32662: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32663: LD_INT 0
32665: PPUSH
32666: PPUSH
32667: PPUSH
32668: PPUSH
32669: PPUSH
32670: PPUSH
32671: PPUSH
// if not factory then
32672: LD_VAR 0 1
32676: NOT
32677: IFFALSE 32681
// exit ;
32679: GO 33284
// if control = control_apeman then
32681: LD_VAR 0 4
32685: PUSH
32686: LD_INT 5
32688: EQUAL
32689: IFFALSE 32798
// begin tmp := UnitsInside ( factory ) ;
32691: LD_ADDR_VAR 0 8
32695: PUSH
32696: LD_VAR 0 1
32700: PPUSH
32701: CALL_OW 313
32705: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32706: LD_VAR 0 8
32710: PPUSH
32711: LD_INT 25
32713: PUSH
32714: LD_INT 12
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PPUSH
32721: CALL_OW 72
32725: NOT
32726: IFFALSE 32736
// control := control_manual ;
32728: LD_ADDR_VAR 0 4
32732: PUSH
32733: LD_INT 1
32735: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32736: LD_ADDR_VAR 0 8
32740: PUSH
32741: LD_VAR 0 1
32745: PPUSH
32746: CALL 32433 0 1
32750: ST_TO_ADDR
// if tmp then
32751: LD_VAR 0 8
32755: IFFALSE 32798
// begin for i in tmp do
32757: LD_ADDR_VAR 0 7
32761: PUSH
32762: LD_VAR 0 8
32766: PUSH
32767: FOR_IN
32768: IFFALSE 32796
// if i [ 1 ] = b_ext_radio then
32770: LD_VAR 0 7
32774: PUSH
32775: LD_INT 1
32777: ARRAY
32778: PUSH
32779: LD_INT 22
32781: EQUAL
32782: IFFALSE 32794
// begin control := control_remote ;
32784: LD_ADDR_VAR 0 4
32788: PUSH
32789: LD_INT 2
32791: ST_TO_ADDR
// break ;
32792: GO 32796
// end ;
32794: GO 32767
32796: POP
32797: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32798: LD_VAR 0 1
32802: PPUSH
32803: LD_VAR 0 2
32807: PPUSH
32808: LD_VAR 0 3
32812: PPUSH
32813: LD_VAR 0 4
32817: PPUSH
32818: LD_VAR 0 5
32822: PPUSH
32823: CALL_OW 448
32827: IFFALSE 32862
// begin result := [ chassis , engine , control , weapon ] ;
32829: LD_ADDR_VAR 0 6
32833: PUSH
32834: LD_VAR 0 2
32838: PUSH
32839: LD_VAR 0 3
32843: PUSH
32844: LD_VAR 0 4
32848: PUSH
32849: LD_VAR 0 5
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: ST_TO_ADDR
// exit ;
32860: GO 33284
// end ; _chassis := AvailableChassisList ( factory ) ;
32862: LD_ADDR_VAR 0 9
32866: PUSH
32867: LD_VAR 0 1
32871: PPUSH
32872: CALL_OW 475
32876: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32877: LD_ADDR_VAR 0 11
32881: PUSH
32882: LD_VAR 0 1
32886: PPUSH
32887: CALL_OW 476
32891: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32892: LD_ADDR_VAR 0 12
32896: PUSH
32897: LD_VAR 0 1
32901: PPUSH
32902: CALL_OW 477
32906: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32907: LD_ADDR_VAR 0 10
32911: PUSH
32912: LD_VAR 0 1
32916: PPUSH
32917: CALL_OW 478
32921: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32922: LD_VAR 0 9
32926: NOT
32927: IFTRUE 32936
32929: PUSH
32930: LD_VAR 0 11
32934: NOT
32935: OR
32936: IFTRUE 32945
32938: PUSH
32939: LD_VAR 0 12
32943: NOT
32944: OR
32945: IFTRUE 32954
32947: PUSH
32948: LD_VAR 0 10
32952: NOT
32953: OR
32954: IFFALSE 32989
// begin result := [ chassis , engine , control , weapon ] ;
32956: LD_ADDR_VAR 0 6
32960: PUSH
32961: LD_VAR 0 2
32965: PUSH
32966: LD_VAR 0 3
32970: PUSH
32971: LD_VAR 0 4
32975: PUSH
32976: LD_VAR 0 5
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: ST_TO_ADDR
// exit ;
32987: GO 33284
// end ; if not chassis in _chassis then
32989: LD_VAR 0 2
32993: PUSH
32994: LD_VAR 0 9
32998: IN
32999: NOT
33000: IFFALSE 33026
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33002: LD_ADDR_VAR 0 2
33006: PUSH
33007: LD_VAR 0 9
33011: PUSH
33012: LD_INT 1
33014: PPUSH
33015: LD_VAR 0 9
33019: PPUSH
33020: CALL_OW 12
33024: ARRAY
33025: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33026: LD_VAR 0 2
33030: PPUSH
33031: LD_VAR 0 3
33035: PPUSH
33036: CALL 33289 0 2
33040: NOT
33041: IFFALSE 33102
// repeat engine := _engine [ 1 ] ;
33043: LD_ADDR_VAR 0 3
33047: PUSH
33048: LD_VAR 0 11
33052: PUSH
33053: LD_INT 1
33055: ARRAY
33056: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33057: LD_ADDR_VAR 0 11
33061: PUSH
33062: LD_VAR 0 11
33066: PPUSH
33067: LD_INT 1
33069: PPUSH
33070: CALL_OW 3
33074: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33075: LD_VAR 0 2
33079: PPUSH
33080: LD_VAR 0 3
33084: PPUSH
33085: CALL 33289 0 2
33089: IFTRUE 33100
33091: PUSH
33092: LD_VAR 0 11
33096: PUSH
33097: EMPTY
33098: EQUAL
33099: OR
33100: IFFALSE 33043
// if not control in _control then
33102: LD_VAR 0 4
33106: PUSH
33107: LD_VAR 0 12
33111: IN
33112: NOT
33113: IFFALSE 33139
// control := _control [ rand ( 1 , _control ) ] ;
33115: LD_ADDR_VAR 0 4
33119: PUSH
33120: LD_VAR 0 12
33124: PUSH
33125: LD_INT 1
33127: PPUSH
33128: LD_VAR 0 12
33132: PPUSH
33133: CALL_OW 12
33137: ARRAY
33138: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33139: LD_VAR 0 2
33143: PPUSH
33144: LD_VAR 0 5
33148: PPUSH
33149: CALL 33511 0 2
33153: NOT
33154: IFFALSE 33215
// repeat weapon := _weapon [ 1 ] ;
33156: LD_ADDR_VAR 0 5
33160: PUSH
33161: LD_VAR 0 10
33165: PUSH
33166: LD_INT 1
33168: ARRAY
33169: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33170: LD_ADDR_VAR 0 10
33174: PUSH
33175: LD_VAR 0 10
33179: PPUSH
33180: LD_INT 1
33182: PPUSH
33183: CALL_OW 3
33187: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33188: LD_VAR 0 2
33192: PPUSH
33193: LD_VAR 0 5
33197: PPUSH
33198: CALL 33511 0 2
33202: IFTRUE 33213
33204: PUSH
33205: LD_VAR 0 10
33209: PUSH
33210: EMPTY
33211: EQUAL
33212: OR
33213: IFFALSE 33156
// result := [ ] ;
33215: LD_ADDR_VAR 0 6
33219: PUSH
33220: EMPTY
33221: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33222: LD_VAR 0 1
33226: PPUSH
33227: LD_VAR 0 2
33231: PPUSH
33232: LD_VAR 0 3
33236: PPUSH
33237: LD_VAR 0 4
33241: PPUSH
33242: LD_VAR 0 5
33246: PPUSH
33247: CALL_OW 448
33251: IFFALSE 33284
// result := [ chassis , engine , control , weapon ] ;
33253: LD_ADDR_VAR 0 6
33257: PUSH
33258: LD_VAR 0 2
33262: PUSH
33263: LD_VAR 0 3
33267: PUSH
33268: LD_VAR 0 4
33272: PUSH
33273: LD_VAR 0 5
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: ST_TO_ADDR
// end ;
33284: LD_VAR 0 6
33288: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33289: LD_INT 0
33291: PPUSH
// if not chassis or not engine then
33292: LD_VAR 0 1
33296: NOT
33297: IFTRUE 33306
33299: PUSH
33300: LD_VAR 0 2
33304: NOT
33305: OR
33306: IFFALSE 33310
// exit ;
33308: GO 33506
// case engine of engine_solar :
33310: LD_VAR 0 2
33314: PUSH
33315: LD_INT 2
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33323
33321: GO 33361
33323: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33324: LD_ADDR_VAR 0 3
33328: PUSH
33329: LD_INT 11
33331: PUSH
33332: LD_INT 12
33334: PUSH
33335: LD_INT 13
33337: PUSH
33338: LD_INT 14
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 3
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: ST_TO_ADDR
33359: GO 33490
33361: LD_INT 1
33363: DOUBLE
33364: EQUAL
33365: IFTRUE 33369
33367: GO 33431
33369: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33370: LD_ADDR_VAR 0 3
33374: PUSH
33375: LD_INT 11
33377: PUSH
33378: LD_INT 12
33380: PUSH
33381: LD_INT 13
33383: PUSH
33384: LD_INT 14
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: LD_INT 3
33395: PUSH
33396: LD_INT 4
33398: PUSH
33399: LD_INT 5
33401: PUSH
33402: LD_INT 21
33404: PUSH
33405: LD_INT 23
33407: PUSH
33408: LD_INT 22
33410: PUSH
33411: LD_INT 24
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: ST_TO_ADDR
33429: GO 33490
33431: LD_INT 3
33433: DOUBLE
33434: EQUAL
33435: IFTRUE 33439
33437: GO 33489
33439: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33440: LD_ADDR_VAR 0 3
33444: PUSH
33445: LD_INT 13
33447: PUSH
33448: LD_INT 14
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: LD_INT 3
33456: PUSH
33457: LD_INT 4
33459: PUSH
33460: LD_INT 5
33462: PUSH
33463: LD_INT 21
33465: PUSH
33466: LD_INT 22
33468: PUSH
33469: LD_INT 23
33471: PUSH
33472: LD_INT 24
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: ST_TO_ADDR
33487: GO 33490
33489: POP
// result := ( chassis in result ) ;
33490: LD_ADDR_VAR 0 3
33494: PUSH
33495: LD_VAR 0 1
33499: PUSH
33500: LD_VAR 0 3
33504: IN
33505: ST_TO_ADDR
// end ;
33506: LD_VAR 0 3
33510: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33511: LD_INT 0
33513: PPUSH
// if not chassis or not weapon then
33514: LD_VAR 0 1
33518: NOT
33519: IFTRUE 33528
33521: PUSH
33522: LD_VAR 0 2
33526: NOT
33527: OR
33528: IFFALSE 33532
// exit ;
33530: GO 34592
// case weapon of us_machine_gun :
33532: LD_VAR 0 2
33536: PUSH
33537: LD_INT 2
33539: DOUBLE
33540: EQUAL
33541: IFTRUE 33545
33543: GO 33575
33545: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33546: LD_ADDR_VAR 0 3
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: LD_INT 3
33559: PUSH
33560: LD_INT 4
33562: PUSH
33563: LD_INT 5
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: ST_TO_ADDR
33573: GO 34576
33575: LD_INT 3
33577: DOUBLE
33578: EQUAL
33579: IFTRUE 33583
33581: GO 33613
33583: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33584: LD_ADDR_VAR 0 3
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: LD_INT 2
33594: PUSH
33595: LD_INT 3
33597: PUSH
33598: LD_INT 4
33600: PUSH
33601: LD_INT 5
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: ST_TO_ADDR
33611: GO 34576
33613: LD_INT 11
33615: DOUBLE
33616: EQUAL
33617: IFTRUE 33621
33619: GO 33651
33621: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33622: LD_ADDR_VAR 0 3
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 3
33635: PUSH
33636: LD_INT 4
33638: PUSH
33639: LD_INT 5
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: ST_TO_ADDR
33649: GO 34576
33651: LD_INT 4
33653: DOUBLE
33654: EQUAL
33655: IFTRUE 33659
33657: GO 33685
33659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33660: LD_ADDR_VAR 0 3
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: LD_INT 3
33670: PUSH
33671: LD_INT 4
33673: PUSH
33674: LD_INT 5
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: ST_TO_ADDR
33683: GO 34576
33685: LD_INT 5
33687: DOUBLE
33688: EQUAL
33689: IFTRUE 33693
33691: GO 33719
33693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33694: LD_ADDR_VAR 0 3
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 3
33704: PUSH
33705: LD_INT 4
33707: PUSH
33708: LD_INT 5
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: ST_TO_ADDR
33717: GO 34576
33719: LD_INT 9
33721: DOUBLE
33722: EQUAL
33723: IFTRUE 33727
33725: GO 33753
33727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33728: LD_ADDR_VAR 0 3
33732: PUSH
33733: LD_INT 2
33735: PUSH
33736: LD_INT 3
33738: PUSH
33739: LD_INT 4
33741: PUSH
33742: LD_INT 5
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: ST_TO_ADDR
33751: GO 34576
33753: LD_INT 7
33755: DOUBLE
33756: EQUAL
33757: IFTRUE 33761
33759: GO 33787
33761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33762: LD_ADDR_VAR 0 3
33766: PUSH
33767: LD_INT 2
33769: PUSH
33770: LD_INT 3
33772: PUSH
33773: LD_INT 4
33775: PUSH
33776: LD_INT 5
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: ST_TO_ADDR
33785: GO 34576
33787: LD_INT 12
33789: DOUBLE
33790: EQUAL
33791: IFTRUE 33795
33793: GO 33821
33795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33796: LD_ADDR_VAR 0 3
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: LD_INT 3
33806: PUSH
33807: LD_INT 4
33809: PUSH
33810: LD_INT 5
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: ST_TO_ADDR
33819: GO 34576
33821: LD_INT 13
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33829
33827: GO 33855
33829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33830: LD_ADDR_VAR 0 3
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: LD_INT 3
33840: PUSH
33841: LD_INT 4
33843: PUSH
33844: LD_INT 5
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: ST_TO_ADDR
33853: GO 34576
33855: LD_INT 14
33857: DOUBLE
33858: EQUAL
33859: IFTRUE 33863
33861: GO 33881
33863: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33864: LD_ADDR_VAR 0 3
33868: PUSH
33869: LD_INT 4
33871: PUSH
33872: LD_INT 5
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: ST_TO_ADDR
33879: GO 34576
33881: LD_INT 6
33883: DOUBLE
33884: EQUAL
33885: IFTRUE 33889
33887: GO 33907
33889: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33890: LD_ADDR_VAR 0 3
33894: PUSH
33895: LD_INT 4
33897: PUSH
33898: LD_INT 5
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: ST_TO_ADDR
33905: GO 34576
33907: LD_INT 10
33909: DOUBLE
33910: EQUAL
33911: IFTRUE 33915
33913: GO 33933
33915: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33916: LD_ADDR_VAR 0 3
33920: PUSH
33921: LD_INT 4
33923: PUSH
33924: LD_INT 5
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: ST_TO_ADDR
33931: GO 34576
33933: LD_INT 22
33935: DOUBLE
33936: EQUAL
33937: IFTRUE 33941
33939: GO 33967
33941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33942: LD_ADDR_VAR 0 3
33946: PUSH
33947: LD_INT 11
33949: PUSH
33950: LD_INT 12
33952: PUSH
33953: LD_INT 13
33955: PUSH
33956: LD_INT 14
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: ST_TO_ADDR
33965: GO 34576
33967: LD_INT 23
33969: DOUBLE
33970: EQUAL
33971: IFTRUE 33975
33973: GO 34001
33975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33976: LD_ADDR_VAR 0 3
33980: PUSH
33981: LD_INT 11
33983: PUSH
33984: LD_INT 12
33986: PUSH
33987: LD_INT 13
33989: PUSH
33990: LD_INT 14
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: ST_TO_ADDR
33999: GO 34576
34001: LD_INT 24
34003: DOUBLE
34004: EQUAL
34005: IFTRUE 34009
34007: GO 34035
34009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34010: LD_ADDR_VAR 0 3
34014: PUSH
34015: LD_INT 11
34017: PUSH
34018: LD_INT 12
34020: PUSH
34021: LD_INT 13
34023: PUSH
34024: LD_INT 14
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: ST_TO_ADDR
34033: GO 34576
34035: LD_INT 30
34037: DOUBLE
34038: EQUAL
34039: IFTRUE 34043
34041: GO 34069
34043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34044: LD_ADDR_VAR 0 3
34048: PUSH
34049: LD_INT 11
34051: PUSH
34052: LD_INT 12
34054: PUSH
34055: LD_INT 13
34057: PUSH
34058: LD_INT 14
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: ST_TO_ADDR
34067: GO 34576
34069: LD_INT 25
34071: DOUBLE
34072: EQUAL
34073: IFTRUE 34077
34075: GO 34095
34077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34078: LD_ADDR_VAR 0 3
34082: PUSH
34083: LD_INT 13
34085: PUSH
34086: LD_INT 14
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: ST_TO_ADDR
34093: GO 34576
34095: LD_INT 27
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34103
34101: GO 34121
34103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34104: LD_ADDR_VAR 0 3
34108: PUSH
34109: LD_INT 13
34111: PUSH
34112: LD_INT 14
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: ST_TO_ADDR
34119: GO 34576
34121: LD_INT 92
34123: DOUBLE
34124: EQUAL
34125: IFTRUE 34129
34127: GO 34155
34129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34130: LD_ADDR_VAR 0 3
34134: PUSH
34135: LD_INT 11
34137: PUSH
34138: LD_INT 12
34140: PUSH
34141: LD_INT 13
34143: PUSH
34144: LD_INT 14
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: ST_TO_ADDR
34153: GO 34576
34155: LD_INT 28
34157: DOUBLE
34158: EQUAL
34159: IFTRUE 34163
34161: GO 34181
34163: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34164: LD_ADDR_VAR 0 3
34168: PUSH
34169: LD_INT 13
34171: PUSH
34172: LD_INT 14
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: ST_TO_ADDR
34179: GO 34576
34181: LD_INT 29
34183: DOUBLE
34184: EQUAL
34185: IFTRUE 34189
34187: GO 34207
34189: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34190: LD_ADDR_VAR 0 3
34194: PUSH
34195: LD_INT 13
34197: PUSH
34198: LD_INT 14
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: ST_TO_ADDR
34205: GO 34576
34207: LD_INT 31
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34215
34213: GO 34233
34215: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34216: LD_ADDR_VAR 0 3
34220: PUSH
34221: LD_INT 13
34223: PUSH
34224: LD_INT 14
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: ST_TO_ADDR
34231: GO 34576
34233: LD_INT 26
34235: DOUBLE
34236: EQUAL
34237: IFTRUE 34241
34239: GO 34259
34241: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34242: LD_ADDR_VAR 0 3
34246: PUSH
34247: LD_INT 13
34249: PUSH
34250: LD_INT 14
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: ST_TO_ADDR
34257: GO 34576
34259: LD_INT 42
34261: DOUBLE
34262: EQUAL
34263: IFTRUE 34267
34265: GO 34293
34267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34268: LD_ADDR_VAR 0 3
34272: PUSH
34273: LD_INT 21
34275: PUSH
34276: LD_INT 22
34278: PUSH
34279: LD_INT 23
34281: PUSH
34282: LD_INT 24
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: ST_TO_ADDR
34291: GO 34576
34293: LD_INT 43
34295: DOUBLE
34296: EQUAL
34297: IFTRUE 34301
34299: GO 34327
34301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34302: LD_ADDR_VAR 0 3
34306: PUSH
34307: LD_INT 21
34309: PUSH
34310: LD_INT 22
34312: PUSH
34313: LD_INT 23
34315: PUSH
34316: LD_INT 24
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: ST_TO_ADDR
34325: GO 34576
34327: LD_INT 44
34329: DOUBLE
34330: EQUAL
34331: IFTRUE 34335
34333: GO 34361
34335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34336: LD_ADDR_VAR 0 3
34340: PUSH
34341: LD_INT 21
34343: PUSH
34344: LD_INT 22
34346: PUSH
34347: LD_INT 23
34349: PUSH
34350: LD_INT 24
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: ST_TO_ADDR
34359: GO 34576
34361: LD_INT 45
34363: DOUBLE
34364: EQUAL
34365: IFTRUE 34369
34367: GO 34395
34369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34370: LD_ADDR_VAR 0 3
34374: PUSH
34375: LD_INT 21
34377: PUSH
34378: LD_INT 22
34380: PUSH
34381: LD_INT 23
34383: PUSH
34384: LD_INT 24
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: ST_TO_ADDR
34393: GO 34576
34395: LD_INT 49
34397: DOUBLE
34398: EQUAL
34399: IFTRUE 34403
34401: GO 34429
34403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34404: LD_ADDR_VAR 0 3
34408: PUSH
34409: LD_INT 21
34411: PUSH
34412: LD_INT 22
34414: PUSH
34415: LD_INT 23
34417: PUSH
34418: LD_INT 24
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: ST_TO_ADDR
34427: GO 34576
34429: LD_INT 51
34431: DOUBLE
34432: EQUAL
34433: IFTRUE 34437
34435: GO 34463
34437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34438: LD_ADDR_VAR 0 3
34442: PUSH
34443: LD_INT 21
34445: PUSH
34446: LD_INT 22
34448: PUSH
34449: LD_INT 23
34451: PUSH
34452: LD_INT 24
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: ST_TO_ADDR
34461: GO 34576
34463: LD_INT 52
34465: DOUBLE
34466: EQUAL
34467: IFTRUE 34471
34469: GO 34497
34471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34472: LD_ADDR_VAR 0 3
34476: PUSH
34477: LD_INT 21
34479: PUSH
34480: LD_INT 22
34482: PUSH
34483: LD_INT 23
34485: PUSH
34486: LD_INT 24
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: ST_TO_ADDR
34495: GO 34576
34497: LD_INT 53
34499: DOUBLE
34500: EQUAL
34501: IFTRUE 34505
34503: GO 34523
34505: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34506: LD_ADDR_VAR 0 3
34510: PUSH
34511: LD_INT 23
34513: PUSH
34514: LD_INT 24
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: ST_TO_ADDR
34521: GO 34576
34523: LD_INT 46
34525: DOUBLE
34526: EQUAL
34527: IFTRUE 34531
34529: GO 34549
34531: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34532: LD_ADDR_VAR 0 3
34536: PUSH
34537: LD_INT 23
34539: PUSH
34540: LD_INT 24
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: ST_TO_ADDR
34547: GO 34576
34549: LD_INT 47
34551: DOUBLE
34552: EQUAL
34553: IFTRUE 34557
34555: GO 34575
34557: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34558: LD_ADDR_VAR 0 3
34562: PUSH
34563: LD_INT 23
34565: PUSH
34566: LD_INT 24
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: ST_TO_ADDR
34573: GO 34576
34575: POP
// result := ( chassis in result ) ;
34576: LD_ADDR_VAR 0 3
34580: PUSH
34581: LD_VAR 0 1
34585: PUSH
34586: LD_VAR 0 3
34590: IN
34591: ST_TO_ADDR
// end ;
34592: LD_VAR 0 3
34596: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34597: LD_INT 0
34599: PPUSH
34600: PPUSH
34601: PPUSH
34602: PPUSH
34603: PPUSH
34604: PPUSH
34605: PPUSH
// result := array ;
34606: LD_ADDR_VAR 0 5
34610: PUSH
34611: LD_VAR 0 1
34615: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34616: LD_VAR 0 1
34620: NOT
34621: IFTRUE 34630
34623: PUSH
34624: LD_VAR 0 2
34628: NOT
34629: OR
34630: IFTRUE 34639
34632: PUSH
34633: LD_VAR 0 3
34637: NOT
34638: OR
34639: IFTRUE 34653
34641: PUSH
34642: LD_VAR 0 2
34646: PUSH
34647: LD_VAR 0 1
34651: GREATER
34652: OR
34653: IFTRUE 34667
34655: PUSH
34656: LD_VAR 0 3
34660: PUSH
34661: LD_VAR 0 1
34665: GREATER
34666: OR
34667: IFFALSE 34671
// exit ;
34669: GO 34967
// if direction then
34671: LD_VAR 0 4
34675: IFFALSE 34739
// begin d := 1 ;
34677: LD_ADDR_VAR 0 9
34681: PUSH
34682: LD_INT 1
34684: ST_TO_ADDR
// if i_from > i_to then
34685: LD_VAR 0 2
34689: PUSH
34690: LD_VAR 0 3
34694: GREATER
34695: IFFALSE 34721
// length := ( array - i_from ) + i_to else
34697: LD_ADDR_VAR 0 11
34701: PUSH
34702: LD_VAR 0 1
34706: PUSH
34707: LD_VAR 0 2
34711: MINUS
34712: PUSH
34713: LD_VAR 0 3
34717: PLUS
34718: ST_TO_ADDR
34719: GO 34737
// length := i_to - i_from ;
34721: LD_ADDR_VAR 0 11
34725: PUSH
34726: LD_VAR 0 3
34730: PUSH
34731: LD_VAR 0 2
34735: MINUS
34736: ST_TO_ADDR
// end else
34737: GO 34800
// begin d := - 1 ;
34739: LD_ADDR_VAR 0 9
34743: PUSH
34744: LD_INT 1
34746: NEG
34747: ST_TO_ADDR
// if i_from > i_to then
34748: LD_VAR 0 2
34752: PUSH
34753: LD_VAR 0 3
34757: GREATER
34758: IFFALSE 34778
// length := i_from - i_to else
34760: LD_ADDR_VAR 0 11
34764: PUSH
34765: LD_VAR 0 2
34769: PUSH
34770: LD_VAR 0 3
34774: MINUS
34775: ST_TO_ADDR
34776: GO 34800
// length := ( array - i_to ) + i_from ;
34778: LD_ADDR_VAR 0 11
34782: PUSH
34783: LD_VAR 0 1
34787: PUSH
34788: LD_VAR 0 3
34792: MINUS
34793: PUSH
34794: LD_VAR 0 2
34798: PLUS
34799: ST_TO_ADDR
// end ; if not length then
34800: LD_VAR 0 11
34804: NOT
34805: IFFALSE 34809
// exit ;
34807: GO 34967
// tmp := array ;
34809: LD_ADDR_VAR 0 10
34813: PUSH
34814: LD_VAR 0 1
34818: ST_TO_ADDR
// for i = 1 to length do
34819: LD_ADDR_VAR 0 6
34823: PUSH
34824: DOUBLE
34825: LD_INT 1
34827: DEC
34828: ST_TO_ADDR
34829: LD_VAR 0 11
34833: PUSH
34834: FOR_TO
34835: IFFALSE 34955
// begin for j = 1 to array do
34837: LD_ADDR_VAR 0 7
34841: PUSH
34842: DOUBLE
34843: LD_INT 1
34845: DEC
34846: ST_TO_ADDR
34847: LD_VAR 0 1
34851: PUSH
34852: FOR_TO
34853: IFFALSE 34941
// begin k := j + d ;
34855: LD_ADDR_VAR 0 8
34859: PUSH
34860: LD_VAR 0 7
34864: PUSH
34865: LD_VAR 0 9
34869: PLUS
34870: ST_TO_ADDR
// if k > array then
34871: LD_VAR 0 8
34875: PUSH
34876: LD_VAR 0 1
34880: GREATER
34881: IFFALSE 34891
// k := 1 ;
34883: LD_ADDR_VAR 0 8
34887: PUSH
34888: LD_INT 1
34890: ST_TO_ADDR
// if not k then
34891: LD_VAR 0 8
34895: NOT
34896: IFFALSE 34908
// k := array ;
34898: LD_ADDR_VAR 0 8
34902: PUSH
34903: LD_VAR 0 1
34907: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34908: LD_ADDR_VAR 0 10
34912: PUSH
34913: LD_VAR 0 10
34917: PPUSH
34918: LD_VAR 0 8
34922: PPUSH
34923: LD_VAR 0 1
34927: PUSH
34928: LD_VAR 0 7
34932: ARRAY
34933: PPUSH
34934: CALL_OW 1
34938: ST_TO_ADDR
// end ;
34939: GO 34852
34941: POP
34942: POP
// array := tmp ;
34943: LD_ADDR_VAR 0 1
34947: PUSH
34948: LD_VAR 0 10
34952: ST_TO_ADDR
// end ;
34953: GO 34834
34955: POP
34956: POP
// result := array ;
34957: LD_ADDR_VAR 0 5
34961: PUSH
34962: LD_VAR 0 1
34966: ST_TO_ADDR
// end ;
34967: LD_VAR 0 5
34971: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34972: LD_INT 0
34974: PPUSH
34975: PPUSH
// result := 0 ;
34976: LD_ADDR_VAR 0 3
34980: PUSH
34981: LD_INT 0
34983: ST_TO_ADDR
// if not array or not value in array then
34984: LD_VAR 0 1
34988: NOT
34989: IFTRUE 35004
34991: PUSH
34992: LD_VAR 0 2
34996: PUSH
34997: LD_VAR 0 1
35001: IN
35002: NOT
35003: OR
35004: IFFALSE 35008
// exit ;
35006: GO 35062
// for i = 1 to array do
35008: LD_ADDR_VAR 0 4
35012: PUSH
35013: DOUBLE
35014: LD_INT 1
35016: DEC
35017: ST_TO_ADDR
35018: LD_VAR 0 1
35022: PUSH
35023: FOR_TO
35024: IFFALSE 35060
// if value = array [ i ] then
35026: LD_VAR 0 2
35030: PUSH
35031: LD_VAR 0 1
35035: PUSH
35036: LD_VAR 0 4
35040: ARRAY
35041: EQUAL
35042: IFFALSE 35058
// begin result := i ;
35044: LD_ADDR_VAR 0 3
35048: PUSH
35049: LD_VAR 0 4
35053: ST_TO_ADDR
// exit ;
35054: POP
35055: POP
35056: GO 35062
// end ;
35058: GO 35023
35060: POP
35061: POP
// end ;
35062: LD_VAR 0 3
35066: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35067: LD_INT 0
35069: PPUSH
// vc_chassis := chassis ;
35070: LD_ADDR_OWVAR 37
35074: PUSH
35075: LD_VAR 0 1
35079: ST_TO_ADDR
// vc_engine := engine ;
35080: LD_ADDR_OWVAR 39
35084: PUSH
35085: LD_VAR 0 2
35089: ST_TO_ADDR
// vc_control := control ;
35090: LD_ADDR_OWVAR 38
35094: PUSH
35095: LD_VAR 0 3
35099: ST_TO_ADDR
// vc_weapon := weapon ;
35100: LD_ADDR_OWVAR 40
35104: PUSH
35105: LD_VAR 0 4
35109: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35110: LD_ADDR_OWVAR 41
35114: PUSH
35115: LD_VAR 0 5
35119: ST_TO_ADDR
// end ;
35120: LD_VAR 0 6
35124: RET
// export function WantPlant ( unit ) ; var task ; begin
35125: LD_INT 0
35127: PPUSH
35128: PPUSH
// result := false ;
35129: LD_ADDR_VAR 0 2
35133: PUSH
35134: LD_INT 0
35136: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35137: LD_ADDR_VAR 0 3
35141: PUSH
35142: LD_VAR 0 1
35146: PPUSH
35147: CALL_OW 437
35151: ST_TO_ADDR
// if task then
35152: LD_VAR 0 3
35156: IFFALSE 35184
// if task [ 1 ] [ 1 ] = p then
35158: LD_VAR 0 3
35162: PUSH
35163: LD_INT 1
35165: ARRAY
35166: PUSH
35167: LD_INT 1
35169: ARRAY
35170: PUSH
35171: LD_STRING p
35173: EQUAL
35174: IFFALSE 35184
// result := true ;
35176: LD_ADDR_VAR 0 2
35180: PUSH
35181: LD_INT 1
35183: ST_TO_ADDR
// end ;
35184: LD_VAR 0 2
35188: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35189: LD_INT 0
35191: PPUSH
35192: PPUSH
35193: PPUSH
35194: PPUSH
// if pos < 1 then
35195: LD_VAR 0 2
35199: PUSH
35200: LD_INT 1
35202: LESS
35203: IFFALSE 35207
// exit ;
35205: GO 35510
// if pos = 1 then
35207: LD_VAR 0 2
35211: PUSH
35212: LD_INT 1
35214: EQUAL
35215: IFFALSE 35248
// result := Replace ( arr , pos [ 1 ] , value ) else
35217: LD_ADDR_VAR 0 4
35221: PUSH
35222: LD_VAR 0 1
35226: PPUSH
35227: LD_VAR 0 2
35231: PUSH
35232: LD_INT 1
35234: ARRAY
35235: PPUSH
35236: LD_VAR 0 3
35240: PPUSH
35241: CALL_OW 1
35245: ST_TO_ADDR
35246: GO 35510
// begin tmp := arr ;
35248: LD_ADDR_VAR 0 6
35252: PUSH
35253: LD_VAR 0 1
35257: ST_TO_ADDR
// s_arr := [ tmp ] ;
35258: LD_ADDR_VAR 0 7
35262: PUSH
35263: LD_VAR 0 6
35267: PUSH
35268: EMPTY
35269: LIST
35270: ST_TO_ADDR
// for i = 1 to pos - 1 do
35271: LD_ADDR_VAR 0 5
35275: PUSH
35276: DOUBLE
35277: LD_INT 1
35279: DEC
35280: ST_TO_ADDR
35281: LD_VAR 0 2
35285: PUSH
35286: LD_INT 1
35288: MINUS
35289: PUSH
35290: FOR_TO
35291: IFFALSE 35336
// begin tmp := tmp [ pos [ i ] ] ;
35293: LD_ADDR_VAR 0 6
35297: PUSH
35298: LD_VAR 0 6
35302: PUSH
35303: LD_VAR 0 2
35307: PUSH
35308: LD_VAR 0 5
35312: ARRAY
35313: ARRAY
35314: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35315: LD_ADDR_VAR 0 7
35319: PUSH
35320: LD_VAR 0 7
35324: PUSH
35325: LD_VAR 0 6
35329: PUSH
35330: EMPTY
35331: LIST
35332: ADD
35333: ST_TO_ADDR
// end ;
35334: GO 35290
35336: POP
35337: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35338: LD_ADDR_VAR 0 6
35342: PUSH
35343: LD_VAR 0 6
35347: PPUSH
35348: LD_VAR 0 2
35352: PUSH
35353: LD_VAR 0 2
35357: ARRAY
35358: PPUSH
35359: LD_VAR 0 3
35363: PPUSH
35364: CALL_OW 1
35368: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35369: LD_ADDR_VAR 0 7
35373: PUSH
35374: LD_VAR 0 7
35378: PPUSH
35379: LD_VAR 0 7
35383: PPUSH
35384: LD_VAR 0 6
35388: PPUSH
35389: CALL_OW 1
35393: ST_TO_ADDR
// for i = s_arr downto 2 do
35394: LD_ADDR_VAR 0 5
35398: PUSH
35399: DOUBLE
35400: LD_VAR 0 7
35404: INC
35405: ST_TO_ADDR
35406: LD_INT 2
35408: PUSH
35409: FOR_DOWNTO
35410: IFFALSE 35494
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35412: LD_ADDR_VAR 0 6
35416: PUSH
35417: LD_VAR 0 7
35421: PUSH
35422: LD_VAR 0 5
35426: PUSH
35427: LD_INT 1
35429: MINUS
35430: ARRAY
35431: PPUSH
35432: LD_VAR 0 2
35436: PUSH
35437: LD_VAR 0 5
35441: PUSH
35442: LD_INT 1
35444: MINUS
35445: ARRAY
35446: PPUSH
35447: LD_VAR 0 7
35451: PUSH
35452: LD_VAR 0 5
35456: ARRAY
35457: PPUSH
35458: CALL_OW 1
35462: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35463: LD_ADDR_VAR 0 7
35467: PUSH
35468: LD_VAR 0 7
35472: PPUSH
35473: LD_VAR 0 5
35477: PUSH
35478: LD_INT 1
35480: MINUS
35481: PPUSH
35482: LD_VAR 0 6
35486: PPUSH
35487: CALL_OW 1
35491: ST_TO_ADDR
// end ;
35492: GO 35409
35494: POP
35495: POP
// result := s_arr [ 1 ] ;
35496: LD_ADDR_VAR 0 4
35500: PUSH
35501: LD_VAR 0 7
35505: PUSH
35506: LD_INT 1
35508: ARRAY
35509: ST_TO_ADDR
// end ; end ;
35510: LD_VAR 0 4
35514: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35515: LD_INT 0
35517: PPUSH
35518: PPUSH
// if not list then
35519: LD_VAR 0 1
35523: NOT
35524: IFFALSE 35528
// exit ;
35526: GO 35619
// i := list [ pos1 ] ;
35528: LD_ADDR_VAR 0 5
35532: PUSH
35533: LD_VAR 0 1
35537: PUSH
35538: LD_VAR 0 2
35542: ARRAY
35543: ST_TO_ADDR
// if not i then
35544: LD_VAR 0 5
35548: NOT
35549: IFFALSE 35553
// exit ;
35551: GO 35619
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35553: LD_ADDR_VAR 0 1
35557: PUSH
35558: LD_VAR 0 1
35562: PPUSH
35563: LD_VAR 0 2
35567: PPUSH
35568: LD_VAR 0 1
35572: PUSH
35573: LD_VAR 0 3
35577: ARRAY
35578: PPUSH
35579: CALL_OW 1
35583: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35584: LD_ADDR_VAR 0 1
35588: PUSH
35589: LD_VAR 0 1
35593: PPUSH
35594: LD_VAR 0 3
35598: PPUSH
35599: LD_VAR 0 5
35603: PPUSH
35604: CALL_OW 1
35608: ST_TO_ADDR
// result := list ;
35609: LD_ADDR_VAR 0 4
35613: PUSH
35614: LD_VAR 0 1
35618: ST_TO_ADDR
// end ;
35619: LD_VAR 0 4
35623: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35624: LD_INT 0
35626: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35627: LD_ADDR_VAR 0 5
35631: PUSH
35632: LD_VAR 0 1
35636: PPUSH
35637: CALL_OW 250
35641: PPUSH
35642: LD_VAR 0 1
35646: PPUSH
35647: CALL_OW 251
35651: PPUSH
35652: LD_VAR 0 2
35656: PPUSH
35657: LD_VAR 0 3
35661: PPUSH
35662: LD_VAR 0 4
35666: PPUSH
35667: CALL 36049 0 5
35671: ST_TO_ADDR
// end ;
35672: LD_VAR 0 5
35676: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35677: LD_INT 0
35679: PPUSH
35680: PPUSH
35681: PPUSH
35682: PPUSH
// if not list or not unit then
35683: LD_VAR 0 2
35687: NOT
35688: IFTRUE 35697
35690: PUSH
35691: LD_VAR 0 1
35695: NOT
35696: OR
35697: IFFALSE 35701
// exit ;
35699: GO 36044
// result := [ ] ;
35701: LD_ADDR_VAR 0 5
35705: PUSH
35706: EMPTY
35707: ST_TO_ADDR
// for i in list do
35708: LD_ADDR_VAR 0 6
35712: PUSH
35713: LD_VAR 0 2
35717: PUSH
35718: FOR_IN
35719: IFFALSE 35937
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35721: LD_ADDR_VAR 0 8
35725: PUSH
35726: LD_VAR 0 1
35730: PPUSH
35731: LD_VAR 0 6
35735: PUSH
35736: LD_INT 1
35738: ARRAY
35739: PPUSH
35740: LD_VAR 0 6
35744: PUSH
35745: LD_INT 2
35747: ARRAY
35748: PPUSH
35749: CALL_OW 297
35753: ST_TO_ADDR
// if not Count ( result ) then
35754: LD_VAR 0 5
35758: PPUSH
35759: CALL 32305 0 1
35763: NOT
35764: IFFALSE 35797
// begin result := Join ( result , [ i , tmp ] ) ;
35766: LD_ADDR_VAR 0 5
35770: PUSH
35771: LD_VAR 0 5
35775: PPUSH
35776: LD_VAR 0 6
35780: PUSH
35781: LD_VAR 0 8
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PPUSH
35790: CALL 68237 0 2
35794: ST_TO_ADDR
// continue ;
35795: GO 35718
// end ; if result [ result ] [ 2 ] <= tmp then
35797: LD_VAR 0 5
35801: PUSH
35802: LD_VAR 0 5
35806: ARRAY
35807: PUSH
35808: LD_INT 2
35810: ARRAY
35811: PUSH
35812: LD_VAR 0 8
35816: LESSEQUAL
35817: IFFALSE 35850
// result := Join ( result , [ i , tmp ] ) else
35819: LD_ADDR_VAR 0 5
35823: PUSH
35824: LD_VAR 0 5
35828: PPUSH
35829: LD_VAR 0 6
35833: PUSH
35834: LD_VAR 0 8
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PPUSH
35843: CALL 68237 0 2
35847: ST_TO_ADDR
35848: GO 35935
// begin for j := 1 to Count ( result ) do
35850: LD_ADDR_VAR 0 7
35854: PUSH
35855: DOUBLE
35856: LD_INT 1
35858: DEC
35859: ST_TO_ADDR
35860: LD_VAR 0 5
35864: PPUSH
35865: CALL 32305 0 1
35869: PUSH
35870: FOR_TO
35871: IFFALSE 35933
// begin if tmp < result [ j ] [ 2 ] then
35873: LD_VAR 0 8
35877: PUSH
35878: LD_VAR 0 5
35882: PUSH
35883: LD_VAR 0 7
35887: ARRAY
35888: PUSH
35889: LD_INT 2
35891: ARRAY
35892: LESS
35893: IFFALSE 35931
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35895: LD_ADDR_VAR 0 5
35899: PUSH
35900: LD_VAR 0 5
35904: PPUSH
35905: LD_VAR 0 7
35909: PPUSH
35910: LD_VAR 0 6
35914: PUSH
35915: LD_VAR 0 8
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PPUSH
35924: CALL_OW 2
35928: ST_TO_ADDR
// break ;
35929: GO 35933
// end ; end ;
35931: GO 35870
35933: POP
35934: POP
// end ; end ;
35935: GO 35718
35937: POP
35938: POP
// if result and not asc then
35939: LD_VAR 0 5
35943: IFFALSE 35952
35945: PUSH
35946: LD_VAR 0 3
35950: NOT
35951: AND
35952: IFFALSE 35969
// result := ReverseArray ( result ) ;
35954: LD_ADDR_VAR 0 5
35958: PUSH
35959: LD_VAR 0 5
35963: PPUSH
35964: CALL 63327 0 1
35968: ST_TO_ADDR
// tmp := [ ] ;
35969: LD_ADDR_VAR 0 8
35973: PUSH
35974: EMPTY
35975: ST_TO_ADDR
// if mode then
35976: LD_VAR 0 4
35980: IFFALSE 36044
// begin for i := 1 to result do
35982: LD_ADDR_VAR 0 6
35986: PUSH
35987: DOUBLE
35988: LD_INT 1
35990: DEC
35991: ST_TO_ADDR
35992: LD_VAR 0 5
35996: PUSH
35997: FOR_TO
35998: IFFALSE 36032
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36000: LD_ADDR_VAR 0 8
36004: PUSH
36005: LD_VAR 0 8
36009: PPUSH
36010: LD_VAR 0 5
36014: PUSH
36015: LD_VAR 0 6
36019: ARRAY
36020: PUSH
36021: LD_INT 1
36023: ARRAY
36024: PPUSH
36025: CALL 68237 0 2
36029: ST_TO_ADDR
36030: GO 35997
36032: POP
36033: POP
// result := tmp ;
36034: LD_ADDR_VAR 0 5
36038: PUSH
36039: LD_VAR 0 8
36043: ST_TO_ADDR
// end ; end ;
36044: LD_VAR 0 5
36048: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36049: LD_INT 0
36051: PPUSH
36052: PPUSH
36053: PPUSH
36054: PPUSH
// if not list then
36055: LD_VAR 0 3
36059: NOT
36060: IFFALSE 36064
// exit ;
36062: GO 36454
// result := [ ] ;
36064: LD_ADDR_VAR 0 6
36068: PUSH
36069: EMPTY
36070: ST_TO_ADDR
// for i in list do
36071: LD_ADDR_VAR 0 7
36075: PUSH
36076: LD_VAR 0 3
36080: PUSH
36081: FOR_IN
36082: IFFALSE 36284
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36084: LD_ADDR_VAR 0 9
36088: PUSH
36089: LD_VAR 0 7
36093: PPUSH
36094: LD_VAR 0 1
36098: PPUSH
36099: LD_VAR 0 2
36103: PPUSH
36104: CALL_OW 297
36108: ST_TO_ADDR
// if not result then
36109: LD_VAR 0 6
36113: NOT
36114: IFFALSE 36140
// result := [ [ i , tmp ] ] else
36116: LD_ADDR_VAR 0 6
36120: PUSH
36121: LD_VAR 0 7
36125: PUSH
36126: LD_VAR 0 9
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: EMPTY
36136: LIST
36137: ST_TO_ADDR
36138: GO 36282
// begin if result [ result ] [ 2 ] <= tmp then
36140: LD_VAR 0 6
36144: PUSH
36145: LD_VAR 0 6
36149: ARRAY
36150: PUSH
36151: LD_INT 2
36153: ARRAY
36154: PUSH
36155: LD_VAR 0 9
36159: LESSEQUAL
36160: IFFALSE 36202
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36162: LD_ADDR_VAR 0 6
36166: PUSH
36167: LD_VAR 0 6
36171: PPUSH
36172: LD_VAR 0 6
36176: PUSH
36177: LD_INT 1
36179: PLUS
36180: PPUSH
36181: LD_VAR 0 7
36185: PUSH
36186: LD_VAR 0 9
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PPUSH
36195: CALL_OW 2
36199: ST_TO_ADDR
36200: GO 36282
// for j := 1 to result do
36202: LD_ADDR_VAR 0 8
36206: PUSH
36207: DOUBLE
36208: LD_INT 1
36210: DEC
36211: ST_TO_ADDR
36212: LD_VAR 0 6
36216: PUSH
36217: FOR_TO
36218: IFFALSE 36280
// begin if tmp < result [ j ] [ 2 ] then
36220: LD_VAR 0 9
36224: PUSH
36225: LD_VAR 0 6
36229: PUSH
36230: LD_VAR 0 8
36234: ARRAY
36235: PUSH
36236: LD_INT 2
36238: ARRAY
36239: LESS
36240: IFFALSE 36278
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36242: LD_ADDR_VAR 0 6
36246: PUSH
36247: LD_VAR 0 6
36251: PPUSH
36252: LD_VAR 0 8
36256: PPUSH
36257: LD_VAR 0 7
36261: PUSH
36262: LD_VAR 0 9
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PPUSH
36271: CALL_OW 2
36275: ST_TO_ADDR
// break ;
36276: GO 36280
// end ; end ;
36278: GO 36217
36280: POP
36281: POP
// end ; end ;
36282: GO 36081
36284: POP
36285: POP
// if result and not asc then
36286: LD_VAR 0 6
36290: IFFALSE 36299
36292: PUSH
36293: LD_VAR 0 4
36297: NOT
36298: AND
36299: IFFALSE 36374
// begin tmp := result ;
36301: LD_ADDR_VAR 0 9
36305: PUSH
36306: LD_VAR 0 6
36310: ST_TO_ADDR
// for i = tmp downto 1 do
36311: LD_ADDR_VAR 0 7
36315: PUSH
36316: DOUBLE
36317: LD_VAR 0 9
36321: INC
36322: ST_TO_ADDR
36323: LD_INT 1
36325: PUSH
36326: FOR_DOWNTO
36327: IFFALSE 36372
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36329: LD_ADDR_VAR 0 6
36333: PUSH
36334: LD_VAR 0 6
36338: PPUSH
36339: LD_VAR 0 9
36343: PUSH
36344: LD_VAR 0 7
36348: MINUS
36349: PUSH
36350: LD_INT 1
36352: PLUS
36353: PPUSH
36354: LD_VAR 0 9
36358: PUSH
36359: LD_VAR 0 7
36363: ARRAY
36364: PPUSH
36365: CALL_OW 1
36369: ST_TO_ADDR
36370: GO 36326
36372: POP
36373: POP
// end ; tmp := [ ] ;
36374: LD_ADDR_VAR 0 9
36378: PUSH
36379: EMPTY
36380: ST_TO_ADDR
// if mode then
36381: LD_VAR 0 5
36385: IFFALSE 36454
// begin for i = 1 to result do
36387: LD_ADDR_VAR 0 7
36391: PUSH
36392: DOUBLE
36393: LD_INT 1
36395: DEC
36396: ST_TO_ADDR
36397: LD_VAR 0 6
36401: PUSH
36402: FOR_TO
36403: IFFALSE 36442
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36405: LD_ADDR_VAR 0 9
36409: PUSH
36410: LD_VAR 0 9
36414: PPUSH
36415: LD_VAR 0 7
36419: PPUSH
36420: LD_VAR 0 6
36424: PUSH
36425: LD_VAR 0 7
36429: ARRAY
36430: PUSH
36431: LD_INT 1
36433: ARRAY
36434: PPUSH
36435: CALL_OW 1
36439: ST_TO_ADDR
36440: GO 36402
36442: POP
36443: POP
// result := tmp ;
36444: LD_ADDR_VAR 0 6
36448: PUSH
36449: LD_VAR 0 9
36453: ST_TO_ADDR
// end ; end ;
36454: LD_VAR 0 6
36458: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36459: LD_INT 0
36461: PPUSH
36462: PPUSH
36463: PPUSH
36464: PPUSH
36465: PPUSH
36466: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36467: LD_ADDR_VAR 0 5
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: ST_TO_ADDR
// if not x or not y then
36489: LD_VAR 0 2
36493: NOT
36494: IFTRUE 36503
36496: PUSH
36497: LD_VAR 0 3
36501: NOT
36502: OR
36503: IFFALSE 36507
// exit ;
36505: GO 38163
// if not range then
36507: LD_VAR 0 4
36511: NOT
36512: IFFALSE 36522
// range := 10 ;
36514: LD_ADDR_VAR 0 4
36518: PUSH
36519: LD_INT 10
36521: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36522: LD_ADDR_VAR 0 8
36526: PUSH
36527: LD_INT 81
36529: PUSH
36530: LD_VAR 0 1
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 92
36541: PUSH
36542: LD_VAR 0 2
36546: PUSH
36547: LD_VAR 0 3
36551: PUSH
36552: LD_VAR 0 4
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 3
36565: PUSH
36566: LD_INT 21
36568: PUSH
36569: LD_INT 3
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: PPUSH
36585: CALL_OW 69
36589: ST_TO_ADDR
// if not tmp then
36590: LD_VAR 0 8
36594: NOT
36595: IFFALSE 36599
// exit ;
36597: GO 38163
// for i in tmp do
36599: LD_ADDR_VAR 0 6
36603: PUSH
36604: LD_VAR 0 8
36608: PUSH
36609: FOR_IN
36610: IFFALSE 38138
// begin points := [ 0 , 0 , 0 ] ;
36612: LD_ADDR_VAR 0 9
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: LIST
36630: ST_TO_ADDR
// bpoints := 1 ;
36631: LD_ADDR_VAR 0 10
36635: PUSH
36636: LD_INT 1
36638: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36639: LD_VAR 0 6
36643: PPUSH
36644: CALL_OW 247
36648: PUSH
36649: LD_INT 1
36651: DOUBLE
36652: EQUAL
36653: IFTRUE 36657
36655: GO 37239
36657: POP
// begin if GetClass ( i ) = 1 then
36658: LD_VAR 0 6
36662: PPUSH
36663: CALL_OW 257
36667: PUSH
36668: LD_INT 1
36670: EQUAL
36671: IFFALSE 36692
// points := [ 10 , 5 , 3 ] ;
36673: LD_ADDR_VAR 0 9
36677: PUSH
36678: LD_INT 10
36680: PUSH
36681: LD_INT 5
36683: PUSH
36684: LD_INT 3
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: LIST
36691: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36692: LD_VAR 0 6
36696: PPUSH
36697: CALL_OW 257
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: LD_INT 3
36707: PUSH
36708: LD_INT 4
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: LIST
36715: IN
36716: IFFALSE 36737
// points := [ 3 , 2 , 1 ] ;
36718: LD_ADDR_VAR 0 9
36722: PUSH
36723: LD_INT 3
36725: PUSH
36726: LD_INT 2
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: LIST
36736: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36737: LD_VAR 0 6
36741: PPUSH
36742: CALL_OW 257
36746: PUSH
36747: LD_INT 5
36749: EQUAL
36750: IFFALSE 36771
// points := [ 130 , 5 , 2 ] ;
36752: LD_ADDR_VAR 0 9
36756: PUSH
36757: LD_INT 130
36759: PUSH
36760: LD_INT 5
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: LIST
36770: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36771: LD_VAR 0 6
36775: PPUSH
36776: CALL_OW 257
36780: PUSH
36781: LD_INT 8
36783: EQUAL
36784: IFFALSE 36805
// points := [ 35 , 35 , 30 ] ;
36786: LD_ADDR_VAR 0 9
36790: PUSH
36791: LD_INT 35
36793: PUSH
36794: LD_INT 35
36796: PUSH
36797: LD_INT 30
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: LIST
36804: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36805: LD_VAR 0 6
36809: PPUSH
36810: CALL_OW 257
36814: PUSH
36815: LD_INT 9
36817: EQUAL
36818: IFFALSE 36839
// points := [ 20 , 55 , 40 ] ;
36820: LD_ADDR_VAR 0 9
36824: PUSH
36825: LD_INT 20
36827: PUSH
36828: LD_INT 55
36830: PUSH
36831: LD_INT 40
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: LIST
36838: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36839: LD_VAR 0 6
36843: PPUSH
36844: CALL_OW 257
36848: PUSH
36849: LD_INT 12
36851: PUSH
36852: LD_INT 16
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: IN
36859: IFFALSE 36880
// points := [ 5 , 3 , 2 ] ;
36861: LD_ADDR_VAR 0 9
36865: PUSH
36866: LD_INT 5
36868: PUSH
36869: LD_INT 3
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36880: LD_VAR 0 6
36884: PPUSH
36885: CALL_OW 257
36889: PUSH
36890: LD_INT 17
36892: EQUAL
36893: IFFALSE 36914
// points := [ 100 , 50 , 75 ] ;
36895: LD_ADDR_VAR 0 9
36899: PUSH
36900: LD_INT 100
36902: PUSH
36903: LD_INT 50
36905: PUSH
36906: LD_INT 75
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36914: LD_VAR 0 6
36918: PPUSH
36919: CALL_OW 257
36923: PUSH
36924: LD_INT 15
36926: EQUAL
36927: IFFALSE 36948
// points := [ 10 , 5 , 3 ] ;
36929: LD_ADDR_VAR 0 9
36933: PUSH
36934: LD_INT 10
36936: PUSH
36937: LD_INT 5
36939: PUSH
36940: LD_INT 3
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36948: LD_VAR 0 6
36952: PPUSH
36953: CALL_OW 257
36957: PUSH
36958: LD_INT 14
36960: EQUAL
36961: IFFALSE 36982
// points := [ 10 , 0 , 0 ] ;
36963: LD_ADDR_VAR 0 9
36967: PUSH
36968: LD_INT 10
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: LIST
36981: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36982: LD_VAR 0 6
36986: PPUSH
36987: CALL_OW 257
36991: PUSH
36992: LD_INT 11
36994: EQUAL
36995: IFFALSE 37016
// points := [ 30 , 10 , 5 ] ;
36997: LD_ADDR_VAR 0 9
37001: PUSH
37002: LD_INT 30
37004: PUSH
37005: LD_INT 10
37007: PUSH
37008: LD_INT 5
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37016: LD_VAR 0 1
37020: PPUSH
37021: LD_INT 5
37023: PPUSH
37024: CALL_OW 321
37028: PUSH
37029: LD_INT 2
37031: EQUAL
37032: IFFALSE 37049
// bpoints := bpoints * 1.8 ;
37034: LD_ADDR_VAR 0 10
37038: PUSH
37039: LD_VAR 0 10
37043: PUSH
37044: LD_REAL  1.80000000000000E+0000
37047: MUL
37048: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37049: LD_VAR 0 6
37053: PPUSH
37054: CALL_OW 257
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: LD_INT 2
37064: PUSH
37065: LD_INT 3
37067: PUSH
37068: LD_INT 4
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: IN
37077: IFFALSE 37097
37079: PUSH
37080: LD_VAR 0 1
37084: PPUSH
37085: LD_INT 51
37087: PPUSH
37088: CALL_OW 321
37092: PUSH
37093: LD_INT 2
37095: EQUAL
37096: AND
37097: IFFALSE 37114
// bpoints := bpoints * 1.2 ;
37099: LD_ADDR_VAR 0 10
37103: PUSH
37104: LD_VAR 0 10
37108: PUSH
37109: LD_REAL  1.20000000000000E+0000
37112: MUL
37113: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37114: LD_VAR 0 6
37118: PPUSH
37119: CALL_OW 257
37123: PUSH
37124: LD_INT 5
37126: PUSH
37127: LD_INT 7
37129: PUSH
37130: LD_INT 9
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: LIST
37137: IN
37138: IFFALSE 37158
37140: PUSH
37141: LD_VAR 0 1
37145: PPUSH
37146: LD_INT 52
37148: PPUSH
37149: CALL_OW 321
37153: PUSH
37154: LD_INT 2
37156: EQUAL
37157: AND
37158: IFFALSE 37175
// bpoints := bpoints * 1.5 ;
37160: LD_ADDR_VAR 0 10
37164: PUSH
37165: LD_VAR 0 10
37169: PUSH
37170: LD_REAL  1.50000000000000E+0000
37173: MUL
37174: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37175: LD_VAR 0 1
37179: PPUSH
37180: LD_INT 66
37182: PPUSH
37183: CALL_OW 321
37187: PUSH
37188: LD_INT 2
37190: EQUAL
37191: IFFALSE 37208
// bpoints := bpoints * 1.1 ;
37193: LD_ADDR_VAR 0 10
37197: PUSH
37198: LD_VAR 0 10
37202: PUSH
37203: LD_REAL  1.10000000000000E+0000
37206: MUL
37207: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37208: LD_ADDR_VAR 0 10
37212: PUSH
37213: LD_VAR 0 10
37217: PUSH
37218: LD_VAR 0 6
37222: PPUSH
37223: LD_INT 1
37225: PPUSH
37226: CALL_OW 259
37230: PUSH
37231: LD_REAL  1.15000000000000E+0000
37234: MUL
37235: MUL
37236: ST_TO_ADDR
// end ; unit_vehicle :
37237: GO 38067
37239: LD_INT 2
37241: DOUBLE
37242: EQUAL
37243: IFTRUE 37247
37245: GO 38055
37247: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37248: LD_VAR 0 6
37252: PPUSH
37253: CALL_OW 264
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: LD_INT 42
37263: PUSH
37264: LD_INT 24
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: LIST
37271: IN
37272: IFFALSE 37293
// points := [ 25 , 5 , 3 ] ;
37274: LD_ADDR_VAR 0 9
37278: PUSH
37279: LD_INT 25
37281: PUSH
37282: LD_INT 5
37284: PUSH
37285: LD_INT 3
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: LIST
37292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37293: LD_VAR 0 6
37297: PPUSH
37298: CALL_OW 264
37302: PUSH
37303: LD_INT 4
37305: PUSH
37306: LD_INT 43
37308: PUSH
37309: LD_INT 25
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: LIST
37316: IN
37317: IFFALSE 37338
// points := [ 40 , 15 , 5 ] ;
37319: LD_ADDR_VAR 0 9
37323: PUSH
37324: LD_INT 40
37326: PUSH
37327: LD_INT 15
37329: PUSH
37330: LD_INT 5
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37338: LD_VAR 0 6
37342: PPUSH
37343: CALL_OW 264
37347: PUSH
37348: LD_INT 3
37350: PUSH
37351: LD_INT 23
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: IN
37358: IFFALSE 37379
// points := [ 7 , 25 , 8 ] ;
37360: LD_ADDR_VAR 0 9
37364: PUSH
37365: LD_INT 7
37367: PUSH
37368: LD_INT 25
37370: PUSH
37371: LD_INT 8
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: LIST
37378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37379: LD_VAR 0 6
37383: PPUSH
37384: CALL_OW 264
37388: PUSH
37389: LD_INT 5
37391: PUSH
37392: LD_INT 27
37394: PUSH
37395: LD_INT 44
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: IN
37403: IFFALSE 37424
// points := [ 14 , 50 , 16 ] ;
37405: LD_ADDR_VAR 0 9
37409: PUSH
37410: LD_INT 14
37412: PUSH
37413: LD_INT 50
37415: PUSH
37416: LD_INT 16
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37424: LD_VAR 0 6
37428: PPUSH
37429: CALL_OW 264
37433: PUSH
37434: LD_INT 6
37436: PUSH
37437: LD_INT 46
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: IN
37444: IFFALSE 37465
// points := [ 32 , 120 , 70 ] ;
37446: LD_ADDR_VAR 0 9
37450: PUSH
37451: LD_INT 32
37453: PUSH
37454: LD_INT 120
37456: PUSH
37457: LD_INT 70
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37465: LD_VAR 0 6
37469: PPUSH
37470: CALL_OW 264
37474: PUSH
37475: LD_INT 7
37477: PUSH
37478: LD_INT 28
37480: PUSH
37481: LD_INT 45
37483: PUSH
37484: LD_INT 92
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: IN
37493: IFFALSE 37514
// points := [ 35 , 20 , 45 ] ;
37495: LD_ADDR_VAR 0 9
37499: PUSH
37500: LD_INT 35
37502: PUSH
37503: LD_INT 20
37505: PUSH
37506: LD_INT 45
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: LIST
37513: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37514: LD_VAR 0 6
37518: PPUSH
37519: CALL_OW 264
37523: PUSH
37524: LD_INT 47
37526: PUSH
37527: EMPTY
37528: LIST
37529: IN
37530: IFFALSE 37551
// points := [ 67 , 45 , 75 ] ;
37532: LD_ADDR_VAR 0 9
37536: PUSH
37537: LD_INT 67
37539: PUSH
37540: LD_INT 45
37542: PUSH
37543: LD_INT 75
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: LIST
37550: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37551: LD_VAR 0 6
37555: PPUSH
37556: CALL_OW 264
37560: PUSH
37561: LD_INT 26
37563: PUSH
37564: EMPTY
37565: LIST
37566: IN
37567: IFFALSE 37588
// points := [ 120 , 30 , 80 ] ;
37569: LD_ADDR_VAR 0 9
37573: PUSH
37574: LD_INT 120
37576: PUSH
37577: LD_INT 30
37579: PUSH
37580: LD_INT 80
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37588: LD_VAR 0 6
37592: PPUSH
37593: CALL_OW 264
37597: PUSH
37598: LD_INT 22
37600: PUSH
37601: EMPTY
37602: LIST
37603: IN
37604: IFFALSE 37625
// points := [ 40 , 1 , 1 ] ;
37606: LD_ADDR_VAR 0 9
37610: PUSH
37611: LD_INT 40
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37625: LD_VAR 0 6
37629: PPUSH
37630: CALL_OW 264
37634: PUSH
37635: LD_INT 29
37637: PUSH
37638: EMPTY
37639: LIST
37640: IN
37641: IFFALSE 37662
// points := [ 70 , 200 , 400 ] ;
37643: LD_ADDR_VAR 0 9
37647: PUSH
37648: LD_INT 70
37650: PUSH
37651: LD_INT 200
37653: PUSH
37654: LD_INT 400
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: LIST
37661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37662: LD_VAR 0 6
37666: PPUSH
37667: CALL_OW 264
37671: PUSH
37672: LD_INT 14
37674: PUSH
37675: LD_INT 53
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: IN
37682: IFFALSE 37703
// points := [ 40 , 10 , 20 ] ;
37684: LD_ADDR_VAR 0 9
37688: PUSH
37689: LD_INT 40
37691: PUSH
37692: LD_INT 10
37694: PUSH
37695: LD_INT 20
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: LIST
37702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37703: LD_VAR 0 6
37707: PPUSH
37708: CALL_OW 264
37712: PUSH
37713: LD_INT 9
37715: PUSH
37716: EMPTY
37717: LIST
37718: IN
37719: IFFALSE 37740
// points := [ 5 , 70 , 20 ] ;
37721: LD_ADDR_VAR 0 9
37725: PUSH
37726: LD_INT 5
37728: PUSH
37729: LD_INT 70
37731: PUSH
37732: LD_INT 20
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37740: LD_VAR 0 6
37744: PPUSH
37745: CALL_OW 264
37749: PUSH
37750: LD_INT 10
37752: PUSH
37753: EMPTY
37754: LIST
37755: IN
37756: IFFALSE 37777
// points := [ 35 , 110 , 70 ] ;
37758: LD_ADDR_VAR 0 9
37762: PUSH
37763: LD_INT 35
37765: PUSH
37766: LD_INT 110
37768: PUSH
37769: LD_INT 70
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37777: LD_VAR 0 6
37781: PPUSH
37782: CALL_OW 265
37786: PUSH
37787: LD_INT 25
37789: EQUAL
37790: IFFALSE 37811
// points := [ 80 , 65 , 100 ] ;
37792: LD_ADDR_VAR 0 9
37796: PUSH
37797: LD_INT 80
37799: PUSH
37800: LD_INT 65
37802: PUSH
37803: LD_INT 100
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37811: LD_VAR 0 6
37815: PPUSH
37816: CALL_OW 263
37820: PUSH
37821: LD_INT 1
37823: EQUAL
37824: IFFALSE 37859
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37826: LD_ADDR_VAR 0 10
37830: PUSH
37831: LD_VAR 0 10
37835: PUSH
37836: LD_VAR 0 6
37840: PPUSH
37841: CALL_OW 311
37845: PPUSH
37846: LD_INT 3
37848: PPUSH
37849: CALL_OW 259
37853: PUSH
37854: LD_INT 4
37856: MUL
37857: MUL
37858: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37859: LD_VAR 0 6
37863: PPUSH
37864: CALL_OW 263
37868: PUSH
37869: LD_INT 2
37871: EQUAL
37872: IFFALSE 37923
// begin j := IsControledBy ( i ) ;
37874: LD_ADDR_VAR 0 7
37878: PUSH
37879: LD_VAR 0 6
37883: PPUSH
37884: CALL_OW 312
37888: ST_TO_ADDR
// if j then
37889: LD_VAR 0 7
37893: IFFALSE 37923
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37895: LD_ADDR_VAR 0 10
37899: PUSH
37900: LD_VAR 0 10
37904: PUSH
37905: LD_VAR 0 7
37909: PPUSH
37910: LD_INT 3
37912: PPUSH
37913: CALL_OW 259
37917: PUSH
37918: LD_INT 3
37920: MUL
37921: MUL
37922: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37923: LD_VAR 0 6
37927: PPUSH
37928: CALL_OW 264
37932: PUSH
37933: LD_INT 5
37935: PUSH
37936: LD_INT 6
37938: PUSH
37939: LD_INT 46
37941: PUSH
37942: LD_INT 44
37944: PUSH
37945: LD_INT 47
37947: PUSH
37948: LD_INT 45
37950: PUSH
37951: LD_INT 28
37953: PUSH
37954: LD_INT 7
37956: PUSH
37957: LD_INT 27
37959: PUSH
37960: LD_INT 29
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: IN
37975: IFFALSE 37995
37977: PUSH
37978: LD_VAR 0 1
37982: PPUSH
37983: LD_INT 52
37985: PPUSH
37986: CALL_OW 321
37990: PUSH
37991: LD_INT 2
37993: EQUAL
37994: AND
37995: IFFALSE 38012
// bpoints := bpoints * 1.2 ;
37997: LD_ADDR_VAR 0 10
38001: PUSH
38002: LD_VAR 0 10
38006: PUSH
38007: LD_REAL  1.20000000000000E+0000
38010: MUL
38011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38012: LD_VAR 0 6
38016: PPUSH
38017: CALL_OW 264
38021: PUSH
38022: LD_INT 6
38024: PUSH
38025: LD_INT 46
38027: PUSH
38028: LD_INT 47
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: LIST
38035: IN
38036: IFFALSE 38053
// bpoints := bpoints * 1.2 ;
38038: LD_ADDR_VAR 0 10
38042: PUSH
38043: LD_VAR 0 10
38047: PUSH
38048: LD_REAL  1.20000000000000E+0000
38051: MUL
38052: ST_TO_ADDR
// end ; unit_building :
38053: GO 38067
38055: LD_INT 3
38057: DOUBLE
38058: EQUAL
38059: IFTRUE 38063
38061: GO 38066
38063: POP
// ; end ;
38064: GO 38067
38066: POP
// for j = 1 to 3 do
38067: LD_ADDR_VAR 0 7
38071: PUSH
38072: DOUBLE
38073: LD_INT 1
38075: DEC
38076: ST_TO_ADDR
38077: LD_INT 3
38079: PUSH
38080: FOR_TO
38081: IFFALSE 38134
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38083: LD_ADDR_VAR 0 5
38087: PUSH
38088: LD_VAR 0 5
38092: PPUSH
38093: LD_VAR 0 7
38097: PPUSH
38098: LD_VAR 0 5
38102: PUSH
38103: LD_VAR 0 7
38107: ARRAY
38108: PUSH
38109: LD_VAR 0 9
38113: PUSH
38114: LD_VAR 0 7
38118: ARRAY
38119: PUSH
38120: LD_VAR 0 10
38124: MUL
38125: PLUS
38126: PPUSH
38127: CALL_OW 1
38131: ST_TO_ADDR
38132: GO 38080
38134: POP
38135: POP
// end ;
38136: GO 36609
38138: POP
38139: POP
// result := Replace ( result , 4 , tmp ) ;
38140: LD_ADDR_VAR 0 5
38144: PUSH
38145: LD_VAR 0 5
38149: PPUSH
38150: LD_INT 4
38152: PPUSH
38153: LD_VAR 0 8
38157: PPUSH
38158: CALL_OW 1
38162: ST_TO_ADDR
// end ;
38163: LD_VAR 0 5
38167: RET
// export function DangerAtRange ( unit , range ) ; begin
38168: LD_INT 0
38170: PPUSH
// if not unit then
38171: LD_VAR 0 1
38175: NOT
38176: IFFALSE 38180
// exit ;
38178: GO 38225
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38180: LD_ADDR_VAR 0 3
38184: PUSH
38185: LD_VAR 0 1
38189: PPUSH
38190: CALL_OW 255
38194: PPUSH
38195: LD_VAR 0 1
38199: PPUSH
38200: CALL_OW 250
38204: PPUSH
38205: LD_VAR 0 1
38209: PPUSH
38210: CALL_OW 251
38214: PPUSH
38215: LD_VAR 0 2
38219: PPUSH
38220: CALL 36459 0 4
38224: ST_TO_ADDR
// end ;
38225: LD_VAR 0 3
38229: RET
// export function DangerInArea ( side , area ) ; begin
38230: LD_INT 0
38232: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38233: LD_ADDR_VAR 0 3
38237: PUSH
38238: LD_VAR 0 2
38242: PPUSH
38243: LD_INT 81
38245: PUSH
38246: LD_VAR 0 1
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PPUSH
38255: CALL_OW 70
38259: ST_TO_ADDR
// end ;
38260: LD_VAR 0 3
38264: RET
// export function IsExtension ( b ) ; begin
38265: LD_INT 0
38267: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38268: LD_ADDR_VAR 0 2
38272: PUSH
38273: LD_VAR 0 1
38277: PUSH
38278: LD_INT 23
38280: PUSH
38281: LD_INT 20
38283: PUSH
38284: LD_INT 22
38286: PUSH
38287: LD_INT 17
38289: PUSH
38290: LD_INT 24
38292: PUSH
38293: LD_INT 21
38295: PUSH
38296: LD_INT 19
38298: PUSH
38299: LD_INT 16
38301: PUSH
38302: LD_INT 25
38304: PUSH
38305: LD_INT 18
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: IN
38320: ST_TO_ADDR
// end ;
38321: LD_VAR 0 2
38325: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38326: LD_INT 0
38328: PPUSH
38329: PPUSH
38330: PPUSH
// result := [ ] ;
38331: LD_ADDR_VAR 0 4
38335: PUSH
38336: EMPTY
38337: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38338: LD_ADDR_VAR 0 5
38342: PUSH
38343: LD_VAR 0 2
38347: PPUSH
38348: LD_INT 21
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PPUSH
38358: CALL_OW 70
38362: ST_TO_ADDR
// if not tmp then
38363: LD_VAR 0 5
38367: NOT
38368: IFFALSE 38372
// exit ;
38370: GO 38436
// if checkLink then
38372: LD_VAR 0 3
38376: IFFALSE 38426
// begin for i in tmp do
38378: LD_ADDR_VAR 0 6
38382: PUSH
38383: LD_VAR 0 5
38387: PUSH
38388: FOR_IN
38389: IFFALSE 38424
// if GetBase ( i ) <> base then
38391: LD_VAR 0 6
38395: PPUSH
38396: CALL_OW 274
38400: PUSH
38401: LD_VAR 0 1
38405: NONEQUAL
38406: IFFALSE 38422
// ComLinkToBase ( base , i ) ;
38408: LD_VAR 0 1
38412: PPUSH
38413: LD_VAR 0 6
38417: PPUSH
38418: CALL_OW 169
38422: GO 38388
38424: POP
38425: POP
// end ; result := tmp ;
38426: LD_ADDR_VAR 0 4
38430: PUSH
38431: LD_VAR 0 5
38435: ST_TO_ADDR
// end ;
38436: LD_VAR 0 4
38440: RET
// export function ComComplete ( units , b ) ; var i ; begin
38441: LD_INT 0
38443: PPUSH
38444: PPUSH
// if not units then
38445: LD_VAR 0 1
38449: NOT
38450: IFFALSE 38454
// exit ;
38452: GO 38544
// for i in units do
38454: LD_ADDR_VAR 0 4
38458: PUSH
38459: LD_VAR 0 1
38463: PUSH
38464: FOR_IN
38465: IFFALSE 38542
// if BuildingStatus ( b ) = bs_build then
38467: LD_VAR 0 2
38471: PPUSH
38472: CALL_OW 461
38476: PUSH
38477: LD_INT 1
38479: EQUAL
38480: IFFALSE 38540
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38482: LD_VAR 0 4
38486: PPUSH
38487: LD_STRING h
38489: PUSH
38490: LD_VAR 0 2
38494: PPUSH
38495: CALL_OW 250
38499: PUSH
38500: LD_VAR 0 2
38504: PPUSH
38505: CALL_OW 251
38509: PUSH
38510: LD_VAR 0 2
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: PUSH
38533: EMPTY
38534: LIST
38535: PPUSH
38536: CALL_OW 446
38540: GO 38464
38542: POP
38543: POP
// end ;
38544: LD_VAR 0 3
38548: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38549: LD_INT 0
38551: PPUSH
38552: PPUSH
38553: PPUSH
38554: PPUSH
38555: PPUSH
38556: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38557: LD_VAR 0 1
38561: NOT
38562: IFTRUE 38579
38564: PUSH
38565: LD_VAR 0 1
38569: PPUSH
38570: CALL_OW 263
38574: PUSH
38575: LD_INT 2
38577: NONEQUAL
38578: OR
38579: IFFALSE 38583
// exit ;
38581: GO 38899
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38583: LD_ADDR_VAR 0 6
38587: PUSH
38588: LD_INT 22
38590: PUSH
38591: LD_VAR 0 1
38595: PPUSH
38596: CALL_OW 255
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: LD_INT 30
38610: PUSH
38611: LD_INT 36
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 34
38620: PUSH
38621: LD_INT 31
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: LIST
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PPUSH
38637: CALL_OW 69
38641: ST_TO_ADDR
// if not tmp then
38642: LD_VAR 0 6
38646: NOT
38647: IFFALSE 38651
// exit ;
38649: GO 38899
// result := [ ] ;
38651: LD_ADDR_VAR 0 2
38655: PUSH
38656: EMPTY
38657: ST_TO_ADDR
// for i in tmp do
38658: LD_ADDR_VAR 0 3
38662: PUSH
38663: LD_VAR 0 6
38667: PUSH
38668: FOR_IN
38669: IFFALSE 38740
// begin t := UnitsInside ( i ) ;
38671: LD_ADDR_VAR 0 4
38675: PUSH
38676: LD_VAR 0 3
38680: PPUSH
38681: CALL_OW 313
38685: ST_TO_ADDR
// if t then
38686: LD_VAR 0 4
38690: IFFALSE 38738
// for j in t do
38692: LD_ADDR_VAR 0 7
38696: PUSH
38697: LD_VAR 0 4
38701: PUSH
38702: FOR_IN
38703: IFFALSE 38736
// result := Replace ( result , result + 1 , j ) ;
38705: LD_ADDR_VAR 0 2
38709: PUSH
38710: LD_VAR 0 2
38714: PPUSH
38715: LD_VAR 0 2
38719: PUSH
38720: LD_INT 1
38722: PLUS
38723: PPUSH
38724: LD_VAR 0 7
38728: PPUSH
38729: CALL_OW 1
38733: ST_TO_ADDR
38734: GO 38702
38736: POP
38737: POP
// end ;
38738: GO 38668
38740: POP
38741: POP
// if not result then
38742: LD_VAR 0 2
38746: NOT
38747: IFFALSE 38751
// exit ;
38749: GO 38899
// mech := result [ 1 ] ;
38751: LD_ADDR_VAR 0 5
38755: PUSH
38756: LD_VAR 0 2
38760: PUSH
38761: LD_INT 1
38763: ARRAY
38764: ST_TO_ADDR
// if result > 1 then
38765: LD_VAR 0 2
38769: PUSH
38770: LD_INT 1
38772: GREATER
38773: IFFALSE 38885
// begin for i = 2 to result do
38775: LD_ADDR_VAR 0 3
38779: PUSH
38780: DOUBLE
38781: LD_INT 2
38783: DEC
38784: ST_TO_ADDR
38785: LD_VAR 0 2
38789: PUSH
38790: FOR_TO
38791: IFFALSE 38883
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38793: LD_ADDR_VAR 0 4
38797: PUSH
38798: LD_VAR 0 2
38802: PUSH
38803: LD_VAR 0 3
38807: ARRAY
38808: PPUSH
38809: LD_INT 3
38811: PPUSH
38812: CALL_OW 259
38816: PUSH
38817: LD_VAR 0 2
38821: PUSH
38822: LD_VAR 0 3
38826: ARRAY
38827: PPUSH
38828: CALL_OW 432
38832: MINUS
38833: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38834: LD_VAR 0 4
38838: PUSH
38839: LD_VAR 0 5
38843: PPUSH
38844: LD_INT 3
38846: PPUSH
38847: CALL_OW 259
38851: PUSH
38852: LD_VAR 0 5
38856: PPUSH
38857: CALL_OW 432
38861: MINUS
38862: GREATEREQUAL
38863: IFFALSE 38881
// mech := result [ i ] ;
38865: LD_ADDR_VAR 0 5
38869: PUSH
38870: LD_VAR 0 2
38874: PUSH
38875: LD_VAR 0 3
38879: ARRAY
38880: ST_TO_ADDR
// end ;
38881: GO 38790
38883: POP
38884: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38885: LD_VAR 0 1
38889: PPUSH
38890: LD_VAR 0 5
38894: PPUSH
38895: CALL_OW 135
// end ;
38899: LD_VAR 0 2
38903: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38904: LD_INT 0
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
// result := [ ] ;
38919: LD_ADDR_VAR 0 7
38923: PUSH
38924: EMPTY
38925: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38926: LD_VAR 0 1
38930: PPUSH
38931: CALL_OW 266
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: IN
38946: NOT
38947: IFFALSE 38951
// exit ;
38949: GO 40591
// if name then
38951: LD_VAR 0 3
38955: IFFALSE 38971
// SetBName ( base_dep , name ) ;
38957: LD_VAR 0 1
38961: PPUSH
38962: LD_VAR 0 3
38966: PPUSH
38967: CALL_OW 500
// base := GetBase ( base_dep ) ;
38971: LD_ADDR_VAR 0 15
38975: PUSH
38976: LD_VAR 0 1
38980: PPUSH
38981: CALL_OW 274
38985: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38986: LD_ADDR_VAR 0 16
38990: PUSH
38991: LD_VAR 0 1
38995: PPUSH
38996: CALL_OW 255
39000: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39001: LD_ADDR_VAR 0 17
39005: PUSH
39006: LD_VAR 0 1
39010: PPUSH
39011: CALL_OW 248
39015: ST_TO_ADDR
// if sources then
39016: LD_VAR 0 5
39020: IFFALSE 39067
// for i = 1 to 3 do
39022: LD_ADDR_VAR 0 8
39026: PUSH
39027: DOUBLE
39028: LD_INT 1
39030: DEC
39031: ST_TO_ADDR
39032: LD_INT 3
39034: PUSH
39035: FOR_TO
39036: IFFALSE 39065
// AddResourceType ( base , i , sources [ i ] ) ;
39038: LD_VAR 0 15
39042: PPUSH
39043: LD_VAR 0 8
39047: PPUSH
39048: LD_VAR 0 5
39052: PUSH
39053: LD_VAR 0 8
39057: ARRAY
39058: PPUSH
39059: CALL_OW 276
39063: GO 39035
39065: POP
39066: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39067: LD_ADDR_VAR 0 18
39071: PUSH
39072: LD_VAR 0 15
39076: PPUSH
39077: LD_VAR 0 2
39081: PPUSH
39082: LD_INT 1
39084: PPUSH
39085: CALL 38326 0 3
39089: ST_TO_ADDR
// InitHc ;
39090: CALL_OW 19
// InitUc ;
39094: CALL_OW 18
// uc_side := side ;
39098: LD_ADDR_OWVAR 20
39102: PUSH
39103: LD_VAR 0 16
39107: ST_TO_ADDR
// uc_nation := nation ;
39108: LD_ADDR_OWVAR 21
39112: PUSH
39113: LD_VAR 0 17
39117: ST_TO_ADDR
// if buildings then
39118: LD_VAR 0 18
39122: IFFALSE 40450
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39124: LD_ADDR_VAR 0 19
39128: PUSH
39129: LD_VAR 0 18
39133: PPUSH
39134: LD_INT 2
39136: PUSH
39137: LD_INT 30
39139: PUSH
39140: LD_INT 29
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 30
39149: PUSH
39150: LD_INT 30
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: PPUSH
39162: CALL_OW 72
39166: ST_TO_ADDR
// if tmp then
39167: LD_VAR 0 19
39171: IFFALSE 39219
// for i in tmp do
39173: LD_ADDR_VAR 0 8
39177: PUSH
39178: LD_VAR 0 19
39182: PUSH
39183: FOR_IN
39184: IFFALSE 39217
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39186: LD_VAR 0 8
39190: PPUSH
39191: CALL_OW 250
39195: PPUSH
39196: LD_VAR 0 8
39200: PPUSH
39201: CALL_OW 251
39205: PPUSH
39206: LD_VAR 0 16
39210: PPUSH
39211: CALL_OW 441
39215: GO 39183
39217: POP
39218: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39219: LD_VAR 0 18
39223: PPUSH
39224: LD_INT 2
39226: PUSH
39227: LD_INT 30
39229: PUSH
39230: LD_INT 32
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 30
39239: PUSH
39240: LD_INT 33
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: LIST
39251: PPUSH
39252: CALL_OW 72
39256: IFFALSE 39344
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39258: LD_ADDR_VAR 0 8
39262: PUSH
39263: LD_VAR 0 18
39267: PPUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 30
39273: PUSH
39274: LD_INT 32
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 30
39283: PUSH
39284: LD_INT 33
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: LIST
39295: PPUSH
39296: CALL_OW 72
39300: PUSH
39301: FOR_IN
39302: IFFALSE 39342
// begin if not GetBWeapon ( i ) then
39304: LD_VAR 0 8
39308: PPUSH
39309: CALL_OW 269
39313: NOT
39314: IFFALSE 39340
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39316: LD_VAR 0 8
39320: PPUSH
39321: LD_VAR 0 8
39325: PPUSH
39326: LD_VAR 0 2
39330: PPUSH
39331: CALL 40596 0 2
39335: PPUSH
39336: CALL_OW 431
// end ;
39340: GO 39301
39342: POP
39343: POP
// end ; for i = 1 to personel do
39344: LD_ADDR_VAR 0 8
39348: PUSH
39349: DOUBLE
39350: LD_INT 1
39352: DEC
39353: ST_TO_ADDR
39354: LD_VAR 0 6
39358: PUSH
39359: FOR_TO
39360: IFFALSE 40430
// begin if i > 4 then
39362: LD_VAR 0 8
39366: PUSH
39367: LD_INT 4
39369: GREATER
39370: IFFALSE 39374
// break ;
39372: GO 40430
// case i of 1 :
39374: LD_VAR 0 8
39378: PUSH
39379: LD_INT 1
39381: DOUBLE
39382: EQUAL
39383: IFTRUE 39387
39385: GO 39467
39387: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39388: LD_ADDR_VAR 0 12
39392: PUSH
39393: LD_VAR 0 18
39397: PPUSH
39398: LD_INT 22
39400: PUSH
39401: LD_VAR 0 16
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 58
39412: PUSH
39413: EMPTY
39414: LIST
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: LD_INT 30
39421: PUSH
39422: LD_INT 32
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 30
39431: PUSH
39432: LD_INT 4
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 30
39441: PUSH
39442: LD_INT 5
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: LIST
39459: PPUSH
39460: CALL_OW 72
39464: ST_TO_ADDR
39465: GO 39689
39467: LD_INT 2
39469: DOUBLE
39470: EQUAL
39471: IFTRUE 39475
39473: GO 39537
39475: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39476: LD_ADDR_VAR 0 12
39480: PUSH
39481: LD_VAR 0 18
39485: PPUSH
39486: LD_INT 22
39488: PUSH
39489: LD_VAR 0 16
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: PUSH
39501: LD_INT 30
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 30
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PPUSH
39530: CALL_OW 72
39534: ST_TO_ADDR
39535: GO 39689
39537: LD_INT 3
39539: DOUBLE
39540: EQUAL
39541: IFTRUE 39545
39543: GO 39607
39545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39546: LD_ADDR_VAR 0 12
39550: PUSH
39551: LD_VAR 0 18
39555: PPUSH
39556: LD_INT 22
39558: PUSH
39559: LD_VAR 0 16
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: LD_INT 30
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 30
39583: PUSH
39584: LD_INT 3
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: LIST
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PPUSH
39600: CALL_OW 72
39604: ST_TO_ADDR
39605: GO 39689
39607: LD_INT 4
39609: DOUBLE
39610: EQUAL
39611: IFTRUE 39615
39613: GO 39688
39615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39616: LD_ADDR_VAR 0 12
39620: PUSH
39621: LD_VAR 0 18
39625: PPUSH
39626: LD_INT 22
39628: PUSH
39629: LD_VAR 0 16
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: LD_INT 30
39643: PUSH
39644: LD_INT 6
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 30
39653: PUSH
39654: LD_INT 7
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 30
39663: PUSH
39664: LD_INT 8
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PPUSH
39681: CALL_OW 72
39685: ST_TO_ADDR
39686: GO 39689
39688: POP
// if i = 1 then
39689: LD_VAR 0 8
39693: PUSH
39694: LD_INT 1
39696: EQUAL
39697: IFFALSE 39808
// begin tmp := [ ] ;
39699: LD_ADDR_VAR 0 19
39703: PUSH
39704: EMPTY
39705: ST_TO_ADDR
// for j in f do
39706: LD_ADDR_VAR 0 9
39710: PUSH
39711: LD_VAR 0 12
39715: PUSH
39716: FOR_IN
39717: IFFALSE 39790
// if GetBType ( j ) = b_bunker then
39719: LD_VAR 0 9
39723: PPUSH
39724: CALL_OW 266
39728: PUSH
39729: LD_INT 32
39731: EQUAL
39732: IFFALSE 39759
// tmp := Insert ( tmp , 1 , j ) else
39734: LD_ADDR_VAR 0 19
39738: PUSH
39739: LD_VAR 0 19
39743: PPUSH
39744: LD_INT 1
39746: PPUSH
39747: LD_VAR 0 9
39751: PPUSH
39752: CALL_OW 2
39756: ST_TO_ADDR
39757: GO 39788
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39759: LD_ADDR_VAR 0 19
39763: PUSH
39764: LD_VAR 0 19
39768: PPUSH
39769: LD_VAR 0 19
39773: PUSH
39774: LD_INT 1
39776: PLUS
39777: PPUSH
39778: LD_VAR 0 9
39782: PPUSH
39783: CALL_OW 2
39787: ST_TO_ADDR
39788: GO 39716
39790: POP
39791: POP
// if tmp then
39792: LD_VAR 0 19
39796: IFFALSE 39808
// f := tmp ;
39798: LD_ADDR_VAR 0 12
39802: PUSH
39803: LD_VAR 0 19
39807: ST_TO_ADDR
// end ; x := personel [ i ] ;
39808: LD_ADDR_VAR 0 13
39812: PUSH
39813: LD_VAR 0 6
39817: PUSH
39818: LD_VAR 0 8
39822: ARRAY
39823: ST_TO_ADDR
// if x = - 1 then
39824: LD_VAR 0 13
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: EQUAL
39833: IFFALSE 40044
// begin for j in f do
39835: LD_ADDR_VAR 0 9
39839: PUSH
39840: LD_VAR 0 12
39844: PUSH
39845: FOR_IN
39846: IFFALSE 40040
// repeat InitHc ;
39848: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39852: LD_VAR 0 9
39856: PPUSH
39857: CALL_OW 266
39861: PUSH
39862: LD_INT 5
39864: EQUAL
39865: IFFALSE 39935
// begin if UnitsInside ( j ) < 3 then
39867: LD_VAR 0 9
39871: PPUSH
39872: CALL_OW 313
39876: PUSH
39877: LD_INT 3
39879: LESS
39880: IFFALSE 39916
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39882: LD_INT 0
39884: PPUSH
39885: LD_INT 5
39887: PUSH
39888: LD_INT 8
39890: PUSH
39891: LD_INT 9
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: LIST
39898: PUSH
39899: LD_VAR 0 17
39903: ARRAY
39904: PPUSH
39905: LD_VAR 0 4
39909: PPUSH
39910: CALL_OW 380
39914: GO 39933
// PrepareHuman ( false , i , skill ) ;
39916: LD_INT 0
39918: PPUSH
39919: LD_VAR 0 8
39923: PPUSH
39924: LD_VAR 0 4
39928: PPUSH
39929: CALL_OW 380
// end else
39933: GO 39952
// PrepareHuman ( false , i , skill ) ;
39935: LD_INT 0
39937: PPUSH
39938: LD_VAR 0 8
39942: PPUSH
39943: LD_VAR 0 4
39947: PPUSH
39948: CALL_OW 380
// un := CreateHuman ;
39952: LD_ADDR_VAR 0 14
39956: PUSH
39957: CALL_OW 44
39961: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39962: LD_ADDR_VAR 0 7
39966: PUSH
39967: LD_VAR 0 7
39971: PPUSH
39972: LD_INT 1
39974: PPUSH
39975: LD_VAR 0 14
39979: PPUSH
39980: CALL_OW 2
39984: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39985: LD_VAR 0 14
39989: PPUSH
39990: LD_VAR 0 9
39994: PPUSH
39995: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39999: LD_VAR 0 9
40003: PPUSH
40004: CALL_OW 313
40008: PUSH
40009: LD_INT 6
40011: EQUAL
40012: IFTRUE 40036
40014: PUSH
40015: LD_VAR 0 9
40019: PPUSH
40020: CALL_OW 266
40024: PUSH
40025: LD_INT 32
40027: PUSH
40028: LD_INT 31
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: IN
40035: OR
40036: IFFALSE 39848
40038: GO 39845
40040: POP
40041: POP
// end else
40042: GO 40428
// for j = 1 to x do
40044: LD_ADDR_VAR 0 9
40048: PUSH
40049: DOUBLE
40050: LD_INT 1
40052: DEC
40053: ST_TO_ADDR
40054: LD_VAR 0 13
40058: PUSH
40059: FOR_TO
40060: IFFALSE 40426
// begin InitHc ;
40062: CALL_OW 19
// if not f then
40066: LD_VAR 0 12
40070: NOT
40071: IFFALSE 40160
// begin PrepareHuman ( false , i , skill ) ;
40073: LD_INT 0
40075: PPUSH
40076: LD_VAR 0 8
40080: PPUSH
40081: LD_VAR 0 4
40085: PPUSH
40086: CALL_OW 380
// un := CreateHuman ;
40090: LD_ADDR_VAR 0 14
40094: PUSH
40095: CALL_OW 44
40099: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40100: LD_ADDR_VAR 0 7
40104: PUSH
40105: LD_VAR 0 7
40109: PPUSH
40110: LD_INT 1
40112: PPUSH
40113: LD_VAR 0 14
40117: PPUSH
40118: CALL_OW 2
40122: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40123: LD_VAR 0 14
40127: PPUSH
40128: LD_VAR 0 1
40132: PPUSH
40133: CALL_OW 250
40137: PPUSH
40138: LD_VAR 0 1
40142: PPUSH
40143: CALL_OW 251
40147: PPUSH
40148: LD_INT 10
40150: PPUSH
40151: LD_INT 0
40153: PPUSH
40154: CALL_OW 50
// continue ;
40158: GO 40059
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40160: LD_VAR 0 12
40164: PUSH
40165: LD_INT 1
40167: ARRAY
40168: PPUSH
40169: CALL_OW 313
40173: IFFALSE 40201
40175: PUSH
40176: LD_VAR 0 12
40180: PUSH
40181: LD_INT 1
40183: ARRAY
40184: PPUSH
40185: CALL_OW 266
40189: PUSH
40190: LD_INT 32
40192: PUSH
40193: LD_INT 31
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: IN
40200: AND
40201: IFTRUE 40222
40203: PUSH
40204: LD_VAR 0 12
40208: PUSH
40209: LD_INT 1
40211: ARRAY
40212: PPUSH
40213: CALL_OW 313
40217: PUSH
40218: LD_INT 6
40220: EQUAL
40221: OR
40222: IFFALSE 40242
// f := Delete ( f , 1 ) ;
40224: LD_ADDR_VAR 0 12
40228: PUSH
40229: LD_VAR 0 12
40233: PPUSH
40234: LD_INT 1
40236: PPUSH
40237: CALL_OW 3
40241: ST_TO_ADDR
// if not f then
40242: LD_VAR 0 12
40246: NOT
40247: IFFALSE 40265
// begin x := x + 2 ;
40249: LD_ADDR_VAR 0 13
40253: PUSH
40254: LD_VAR 0 13
40258: PUSH
40259: LD_INT 2
40261: PLUS
40262: ST_TO_ADDR
// continue ;
40263: GO 40059
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40265: LD_VAR 0 12
40269: PUSH
40270: LD_INT 1
40272: ARRAY
40273: PPUSH
40274: CALL_OW 266
40278: PUSH
40279: LD_INT 5
40281: EQUAL
40282: IFFALSE 40356
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40284: LD_VAR 0 12
40288: PUSH
40289: LD_INT 1
40291: ARRAY
40292: PPUSH
40293: CALL_OW 313
40297: PUSH
40298: LD_INT 3
40300: LESS
40301: IFFALSE 40337
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40303: LD_INT 0
40305: PPUSH
40306: LD_INT 5
40308: PUSH
40309: LD_INT 8
40311: PUSH
40312: LD_INT 9
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: LIST
40319: PUSH
40320: LD_VAR 0 17
40324: ARRAY
40325: PPUSH
40326: LD_VAR 0 4
40330: PPUSH
40331: CALL_OW 380
40335: GO 40354
// PrepareHuman ( false , i , skill ) ;
40337: LD_INT 0
40339: PPUSH
40340: LD_VAR 0 8
40344: PPUSH
40345: LD_VAR 0 4
40349: PPUSH
40350: CALL_OW 380
// end else
40354: GO 40373
// PrepareHuman ( false , i , skill ) ;
40356: LD_INT 0
40358: PPUSH
40359: LD_VAR 0 8
40363: PPUSH
40364: LD_VAR 0 4
40368: PPUSH
40369: CALL_OW 380
// un := CreateHuman ;
40373: LD_ADDR_VAR 0 14
40377: PUSH
40378: CALL_OW 44
40382: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40383: LD_ADDR_VAR 0 7
40387: PUSH
40388: LD_VAR 0 7
40392: PPUSH
40393: LD_INT 1
40395: PPUSH
40396: LD_VAR 0 14
40400: PPUSH
40401: CALL_OW 2
40405: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40406: LD_VAR 0 14
40410: PPUSH
40411: LD_VAR 0 12
40415: PUSH
40416: LD_INT 1
40418: ARRAY
40419: PPUSH
40420: CALL_OW 52
// end ;
40424: GO 40059
40426: POP
40427: POP
// end ;
40428: GO 39359
40430: POP
40431: POP
// result := result ^ buildings ;
40432: LD_ADDR_VAR 0 7
40436: PUSH
40437: LD_VAR 0 7
40441: PUSH
40442: LD_VAR 0 18
40446: ADD
40447: ST_TO_ADDR
// end else
40448: GO 40591
// begin for i = 1 to personel do
40450: LD_ADDR_VAR 0 8
40454: PUSH
40455: DOUBLE
40456: LD_INT 1
40458: DEC
40459: ST_TO_ADDR
40460: LD_VAR 0 6
40464: PUSH
40465: FOR_TO
40466: IFFALSE 40589
// begin if i > 4 then
40468: LD_VAR 0 8
40472: PUSH
40473: LD_INT 4
40475: GREATER
40476: IFFALSE 40480
// break ;
40478: GO 40589
// x := personel [ i ] ;
40480: LD_ADDR_VAR 0 13
40484: PUSH
40485: LD_VAR 0 6
40489: PUSH
40490: LD_VAR 0 8
40494: ARRAY
40495: ST_TO_ADDR
// if x = - 1 then
40496: LD_VAR 0 13
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: EQUAL
40505: IFFALSE 40509
// continue ;
40507: GO 40465
// PrepareHuman ( false , i , skill ) ;
40509: LD_INT 0
40511: PPUSH
40512: LD_VAR 0 8
40516: PPUSH
40517: LD_VAR 0 4
40521: PPUSH
40522: CALL_OW 380
// un := CreateHuman ;
40526: LD_ADDR_VAR 0 14
40530: PUSH
40531: CALL_OW 44
40535: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40536: LD_VAR 0 14
40540: PPUSH
40541: LD_VAR 0 1
40545: PPUSH
40546: CALL_OW 250
40550: PPUSH
40551: LD_VAR 0 1
40555: PPUSH
40556: CALL_OW 251
40560: PPUSH
40561: LD_INT 10
40563: PPUSH
40564: LD_INT 0
40566: PPUSH
40567: CALL_OW 50
// result := result ^ un ;
40571: LD_ADDR_VAR 0 7
40575: PUSH
40576: LD_VAR 0 7
40580: PUSH
40581: LD_VAR 0 14
40585: ADD
40586: ST_TO_ADDR
// end ;
40587: GO 40465
40589: POP
40590: POP
// end ; end ;
40591: LD_VAR 0 7
40595: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40596: LD_INT 0
40598: PPUSH
40599: PPUSH
40600: PPUSH
40601: PPUSH
40602: PPUSH
40603: PPUSH
40604: PPUSH
40605: PPUSH
40606: PPUSH
40607: PPUSH
40608: PPUSH
40609: PPUSH
40610: PPUSH
40611: PPUSH
40612: PPUSH
40613: PPUSH
// result := false ;
40614: LD_ADDR_VAR 0 3
40618: PUSH
40619: LD_INT 0
40621: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40622: LD_VAR 0 1
40626: NOT
40627: IFTRUE 40652
40629: PUSH
40630: LD_VAR 0 1
40634: PPUSH
40635: CALL_OW 266
40639: PUSH
40640: LD_INT 32
40642: PUSH
40643: LD_INT 33
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: IN
40650: NOT
40651: OR
40652: IFFALSE 40656
// exit ;
40654: GO 41791
// nat := GetNation ( tower ) ;
40656: LD_ADDR_VAR 0 12
40660: PUSH
40661: LD_VAR 0 1
40665: PPUSH
40666: CALL_OW 248
40670: ST_TO_ADDR
// side := GetSide ( tower ) ;
40671: LD_ADDR_VAR 0 16
40675: PUSH
40676: LD_VAR 0 1
40680: PPUSH
40681: CALL_OW 255
40685: ST_TO_ADDR
// x := GetX ( tower ) ;
40686: LD_ADDR_VAR 0 10
40690: PUSH
40691: LD_VAR 0 1
40695: PPUSH
40696: CALL_OW 250
40700: ST_TO_ADDR
// y := GetY ( tower ) ;
40701: LD_ADDR_VAR 0 11
40705: PUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 251
40715: ST_TO_ADDR
// if not x or not y then
40716: LD_VAR 0 10
40720: NOT
40721: IFTRUE 40730
40723: PUSH
40724: LD_VAR 0 11
40728: NOT
40729: OR
40730: IFFALSE 40734
// exit ;
40732: GO 41791
// weapon := 0 ;
40734: LD_ADDR_VAR 0 18
40738: PUSH
40739: LD_INT 0
40741: ST_TO_ADDR
// fac_list := [ ] ;
40742: LD_ADDR_VAR 0 17
40746: PUSH
40747: EMPTY
40748: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40749: LD_ADDR_VAR 0 6
40753: PUSH
40754: LD_VAR 0 1
40758: PPUSH
40759: CALL_OW 274
40763: PPUSH
40764: LD_VAR 0 2
40768: PPUSH
40769: LD_INT 0
40771: PPUSH
40772: CALL 38326 0 3
40776: PPUSH
40777: LD_INT 30
40779: PUSH
40780: LD_INT 3
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PPUSH
40787: CALL_OW 72
40791: ST_TO_ADDR
// if not factories then
40792: LD_VAR 0 6
40796: NOT
40797: IFFALSE 40801
// exit ;
40799: GO 41791
// for i in factories do
40801: LD_ADDR_VAR 0 8
40805: PUSH
40806: LD_VAR 0 6
40810: PUSH
40811: FOR_IN
40812: IFFALSE 40837
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40814: LD_ADDR_VAR 0 17
40818: PUSH
40819: LD_VAR 0 17
40823: PUSH
40824: LD_VAR 0 8
40828: PPUSH
40829: CALL_OW 478
40833: UNION
40834: ST_TO_ADDR
40835: GO 40811
40837: POP
40838: POP
// if not fac_list then
40839: LD_VAR 0 17
40843: NOT
40844: IFFALSE 40848
// exit ;
40846: GO 41791
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40848: LD_ADDR_VAR 0 5
40852: PUSH
40853: LD_INT 4
40855: PUSH
40856: LD_INT 5
40858: PUSH
40859: LD_INT 9
40861: PUSH
40862: LD_INT 10
40864: PUSH
40865: LD_INT 6
40867: PUSH
40868: LD_INT 7
40870: PUSH
40871: LD_INT 11
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 27
40885: PUSH
40886: LD_INT 28
40888: PUSH
40889: LD_INT 26
40891: PUSH
40892: LD_INT 30
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 43
40903: PUSH
40904: LD_INT 44
40906: PUSH
40907: LD_INT 46
40909: PUSH
40910: LD_INT 45
40912: PUSH
40913: LD_INT 47
40915: PUSH
40916: LD_INT 49
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: LIST
40931: PUSH
40932: LD_VAR 0 12
40936: ARRAY
40937: ST_TO_ADDR
// list := list isect fac_list ;
40938: LD_ADDR_VAR 0 5
40942: PUSH
40943: LD_VAR 0 5
40947: PUSH
40948: LD_VAR 0 17
40952: ISECT
40953: ST_TO_ADDR
// if not list then
40954: LD_VAR 0 5
40958: NOT
40959: IFFALSE 40963
// exit ;
40961: GO 41791
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40963: LD_VAR 0 12
40967: PUSH
40968: LD_INT 3
40970: EQUAL
40971: IFFALSE 40983
40973: PUSH
40974: LD_INT 49
40976: PUSH
40977: LD_VAR 0 5
40981: IN
40982: AND
40983: IFFALSE 41003
40985: PUSH
40986: LD_INT 31
40988: PPUSH
40989: LD_VAR 0 16
40993: PPUSH
40994: CALL_OW 321
40998: PUSH
40999: LD_INT 2
41001: EQUAL
41002: AND
41003: IFFALSE 41063
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41005: LD_INT 22
41007: PUSH
41008: LD_VAR 0 16
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 35
41019: PUSH
41020: LD_INT 49
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 91
41029: PUSH
41030: LD_VAR 0 1
41034: PUSH
41035: LD_INT 10
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: LIST
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: LIST
41047: PPUSH
41048: CALL_OW 69
41052: NOT
41053: IFFALSE 41063
// weapon := ru_time_lapser ;
41055: LD_ADDR_VAR 0 18
41059: PUSH
41060: LD_INT 49
41062: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41063: LD_VAR 0 12
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: IN
41078: IFFALSE 41102
41080: PUSH
41081: LD_INT 11
41083: PUSH
41084: LD_VAR 0 5
41088: IN
41089: IFTRUE 41101
41091: PUSH
41092: LD_INT 30
41094: PUSH
41095: LD_VAR 0 5
41099: IN
41100: OR
41101: AND
41102: IFFALSE 41122
41104: PUSH
41105: LD_INT 6
41107: PPUSH
41108: LD_VAR 0 16
41112: PPUSH
41113: CALL_OW 321
41117: PUSH
41118: LD_INT 2
41120: EQUAL
41121: AND
41122: IFFALSE 41289
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41124: LD_INT 22
41126: PUSH
41127: LD_VAR 0 16
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: LD_INT 35
41141: PUSH
41142: LD_INT 11
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 35
41151: PUSH
41152: LD_INT 30
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 91
41166: PUSH
41167: LD_VAR 0 1
41171: PUSH
41172: LD_INT 18
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: LIST
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: LIST
41184: PPUSH
41185: CALL_OW 69
41189: NOT
41190: IFFALSE 41266
41192: PUSH
41193: LD_INT 22
41195: PUSH
41196: LD_VAR 0 16
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 30
41210: PUSH
41211: LD_INT 32
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 30
41220: PUSH
41221: LD_INT 33
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 91
41235: PUSH
41236: LD_VAR 0 1
41240: PUSH
41241: LD_INT 12
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: LIST
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: LIST
41253: PUSH
41254: EMPTY
41255: LIST
41256: PPUSH
41257: CALL_OW 69
41261: PUSH
41262: LD_INT 2
41264: GREATER
41265: AND
41266: IFFALSE 41289
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41268: LD_ADDR_VAR 0 18
41272: PUSH
41273: LD_INT 11
41275: PUSH
41276: LD_INT 30
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_VAR 0 12
41287: ARRAY
41288: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41289: LD_VAR 0 18
41293: NOT
41294: IFFALSE 41314
41296: PUSH
41297: LD_INT 40
41299: PPUSH
41300: LD_VAR 0 16
41304: PPUSH
41305: CALL_OW 321
41309: PUSH
41310: LD_INT 2
41312: EQUAL
41313: AND
41314: IFFALSE 41350
41316: PUSH
41317: LD_INT 7
41319: PUSH
41320: LD_VAR 0 5
41324: IN
41325: IFTRUE 41337
41327: PUSH
41328: LD_INT 28
41330: PUSH
41331: LD_VAR 0 5
41335: IN
41336: OR
41337: IFTRUE 41349
41339: PUSH
41340: LD_INT 45
41342: PUSH
41343: LD_VAR 0 5
41347: IN
41348: OR
41349: AND
41350: IFFALSE 41604
// begin hex := GetHexInfo ( x , y ) ;
41352: LD_ADDR_VAR 0 4
41356: PUSH
41357: LD_VAR 0 10
41361: PPUSH
41362: LD_VAR 0 11
41366: PPUSH
41367: CALL_OW 546
41371: ST_TO_ADDR
// if hex [ 1 ] then
41372: LD_VAR 0 4
41376: PUSH
41377: LD_INT 1
41379: ARRAY
41380: IFFALSE 41384
// exit ;
41382: GO 41791
// height := hex [ 2 ] ;
41384: LD_ADDR_VAR 0 15
41388: PUSH
41389: LD_VAR 0 4
41393: PUSH
41394: LD_INT 2
41396: ARRAY
41397: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41398: LD_ADDR_VAR 0 14
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: LD_INT 5
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: ST_TO_ADDR
// for i in tmp do
41421: LD_ADDR_VAR 0 8
41425: PUSH
41426: LD_VAR 0 14
41430: PUSH
41431: FOR_IN
41432: IFFALSE 41602
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41434: LD_ADDR_VAR 0 9
41438: PUSH
41439: LD_VAR 0 10
41443: PPUSH
41444: LD_VAR 0 8
41448: PPUSH
41449: LD_INT 5
41451: PPUSH
41452: CALL_OW 272
41456: PUSH
41457: LD_VAR 0 11
41461: PPUSH
41462: LD_VAR 0 8
41466: PPUSH
41467: LD_INT 5
41469: PPUSH
41470: CALL_OW 273
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41479: LD_VAR 0 9
41483: PUSH
41484: LD_INT 1
41486: ARRAY
41487: PPUSH
41488: LD_VAR 0 9
41492: PUSH
41493: LD_INT 2
41495: ARRAY
41496: PPUSH
41497: CALL_OW 488
41501: IFFALSE 41600
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41503: LD_ADDR_VAR 0 4
41507: PUSH
41508: LD_VAR 0 9
41512: PUSH
41513: LD_INT 1
41515: ARRAY
41516: PPUSH
41517: LD_VAR 0 9
41521: PUSH
41522: LD_INT 2
41524: ARRAY
41525: PPUSH
41526: CALL_OW 546
41530: ST_TO_ADDR
// if hex [ 1 ] then
41531: LD_VAR 0 4
41535: PUSH
41536: LD_INT 1
41538: ARRAY
41539: IFFALSE 41543
// continue ;
41541: GO 41431
// h := hex [ 2 ] ;
41543: LD_ADDR_VAR 0 13
41547: PUSH
41548: LD_VAR 0 4
41552: PUSH
41553: LD_INT 2
41555: ARRAY
41556: ST_TO_ADDR
// if h + 7 < height then
41557: LD_VAR 0 13
41561: PUSH
41562: LD_INT 7
41564: PLUS
41565: PUSH
41566: LD_VAR 0 15
41570: LESS
41571: IFFALSE 41600
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41573: LD_ADDR_VAR 0 18
41577: PUSH
41578: LD_INT 7
41580: PUSH
41581: LD_INT 28
41583: PUSH
41584: LD_INT 45
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: LIST
41591: PUSH
41592: LD_VAR 0 12
41596: ARRAY
41597: ST_TO_ADDR
// break ;
41598: GO 41602
// end ; end ; end ;
41600: GO 41431
41602: POP
41603: POP
// end ; if not weapon then
41604: LD_VAR 0 18
41608: NOT
41609: IFFALSE 41669
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41611: LD_ADDR_VAR 0 5
41615: PUSH
41616: LD_VAR 0 5
41620: PUSH
41621: LD_INT 11
41623: PUSH
41624: LD_INT 30
41626: PUSH
41627: LD_INT 49
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: DIFF
41635: ST_TO_ADDR
// if not list then
41636: LD_VAR 0 5
41640: NOT
41641: IFFALSE 41645
// exit ;
41643: GO 41791
// weapon := list [ rand ( 1 , list ) ] ;
41645: LD_ADDR_VAR 0 18
41649: PUSH
41650: LD_VAR 0 5
41654: PUSH
41655: LD_INT 1
41657: PPUSH
41658: LD_VAR 0 5
41662: PPUSH
41663: CALL_OW 12
41667: ARRAY
41668: ST_TO_ADDR
// end ; if weapon then
41669: LD_VAR 0 18
41673: IFFALSE 41791
// begin tmp := CostOfWeapon ( weapon ) ;
41675: LD_ADDR_VAR 0 14
41679: PUSH
41680: LD_VAR 0 18
41684: PPUSH
41685: CALL_OW 451
41689: ST_TO_ADDR
// j := GetBase ( tower ) ;
41690: LD_ADDR_VAR 0 9
41694: PUSH
41695: LD_VAR 0 1
41699: PPUSH
41700: CALL_OW 274
41704: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41705: LD_VAR 0 9
41709: PPUSH
41710: LD_INT 1
41712: PPUSH
41713: CALL_OW 275
41717: PUSH
41718: LD_VAR 0 14
41722: PUSH
41723: LD_INT 1
41725: ARRAY
41726: GREATEREQUAL
41727: IFFALSE 41753
41729: PUSH
41730: LD_VAR 0 9
41734: PPUSH
41735: LD_INT 2
41737: PPUSH
41738: CALL_OW 275
41742: PUSH
41743: LD_VAR 0 14
41747: PUSH
41748: LD_INT 2
41750: ARRAY
41751: GREATEREQUAL
41752: AND
41753: IFFALSE 41779
41755: PUSH
41756: LD_VAR 0 9
41760: PPUSH
41761: LD_INT 3
41763: PPUSH
41764: CALL_OW 275
41768: PUSH
41769: LD_VAR 0 14
41773: PUSH
41774: LD_INT 3
41776: ARRAY
41777: GREATEREQUAL
41778: AND
41779: IFFALSE 41791
// result := weapon ;
41781: LD_ADDR_VAR 0 3
41785: PUSH
41786: LD_VAR 0 18
41790: ST_TO_ADDR
// end ; end ;
41791: LD_VAR 0 3
41795: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41796: LD_INT 0
41798: PPUSH
41799: PPUSH
// result := true ;
41800: LD_ADDR_VAR 0 3
41804: PUSH
41805: LD_INT 1
41807: ST_TO_ADDR
// if array1 = array2 then
41808: LD_VAR 0 1
41812: PUSH
41813: LD_VAR 0 2
41817: EQUAL
41818: IFFALSE 41878
// begin for i = 1 to array1 do
41820: LD_ADDR_VAR 0 4
41824: PUSH
41825: DOUBLE
41826: LD_INT 1
41828: DEC
41829: ST_TO_ADDR
41830: LD_VAR 0 1
41834: PUSH
41835: FOR_TO
41836: IFFALSE 41874
// if array1 [ i ] <> array2 [ i ] then
41838: LD_VAR 0 1
41842: PUSH
41843: LD_VAR 0 4
41847: ARRAY
41848: PUSH
41849: LD_VAR 0 2
41853: PUSH
41854: LD_VAR 0 4
41858: ARRAY
41859: NONEQUAL
41860: IFFALSE 41872
// begin result := false ;
41862: LD_ADDR_VAR 0 3
41866: PUSH
41867: LD_INT 0
41869: ST_TO_ADDR
// break ;
41870: GO 41874
// end ;
41872: GO 41835
41874: POP
41875: POP
// end else
41876: GO 41886
// result := false ;
41878: LD_ADDR_VAR 0 3
41882: PUSH
41883: LD_INT 0
41885: ST_TO_ADDR
// end ;
41886: LD_VAR 0 3
41890: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41891: LD_INT 0
41893: PPUSH
41894: PPUSH
// if not array1 or not array2 then
41895: LD_VAR 0 1
41899: NOT
41900: IFTRUE 41909
41902: PUSH
41903: LD_VAR 0 2
41907: NOT
41908: OR
41909: IFFALSE 41913
// exit ;
41911: GO 41977
// result := true ;
41913: LD_ADDR_VAR 0 3
41917: PUSH
41918: LD_INT 1
41920: ST_TO_ADDR
// for i = 1 to array1 do
41921: LD_ADDR_VAR 0 4
41925: PUSH
41926: DOUBLE
41927: LD_INT 1
41929: DEC
41930: ST_TO_ADDR
41931: LD_VAR 0 1
41935: PUSH
41936: FOR_TO
41937: IFFALSE 41975
// if array1 [ i ] <> array2 [ i ] then
41939: LD_VAR 0 1
41943: PUSH
41944: LD_VAR 0 4
41948: ARRAY
41949: PUSH
41950: LD_VAR 0 2
41954: PUSH
41955: LD_VAR 0 4
41959: ARRAY
41960: NONEQUAL
41961: IFFALSE 41973
// begin result := false ;
41963: LD_ADDR_VAR 0 3
41967: PUSH
41968: LD_INT 0
41970: ST_TO_ADDR
// break ;
41971: GO 41975
// end ;
41973: GO 41936
41975: POP
41976: POP
// end ;
41977: LD_VAR 0 3
41981: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41982: LD_INT 0
41984: PPUSH
41985: PPUSH
41986: PPUSH
// pom := GetBase ( fac ) ;
41987: LD_ADDR_VAR 0 5
41991: PUSH
41992: LD_VAR 0 1
41996: PPUSH
41997: CALL_OW 274
42001: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42002: LD_ADDR_VAR 0 4
42006: PUSH
42007: LD_VAR 0 2
42011: PUSH
42012: LD_INT 1
42014: ARRAY
42015: PPUSH
42016: LD_VAR 0 2
42020: PUSH
42021: LD_INT 2
42023: ARRAY
42024: PPUSH
42025: LD_VAR 0 2
42029: PUSH
42030: LD_INT 3
42032: ARRAY
42033: PPUSH
42034: LD_VAR 0 2
42038: PUSH
42039: LD_INT 4
42041: ARRAY
42042: PPUSH
42043: CALL_OW 449
42047: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42048: LD_ADDR_VAR 0 3
42052: PUSH
42053: LD_VAR 0 5
42057: PPUSH
42058: LD_INT 1
42060: PPUSH
42061: CALL_OW 275
42065: PUSH
42066: LD_VAR 0 4
42070: PUSH
42071: LD_INT 1
42073: ARRAY
42074: GREATEREQUAL
42075: IFFALSE 42101
42077: PUSH
42078: LD_VAR 0 5
42082: PPUSH
42083: LD_INT 2
42085: PPUSH
42086: CALL_OW 275
42090: PUSH
42091: LD_VAR 0 4
42095: PUSH
42096: LD_INT 2
42098: ARRAY
42099: GREATEREQUAL
42100: AND
42101: IFFALSE 42127
42103: PUSH
42104: LD_VAR 0 5
42108: PPUSH
42109: LD_INT 3
42111: PPUSH
42112: CALL_OW 275
42116: PUSH
42117: LD_VAR 0 4
42121: PUSH
42122: LD_INT 3
42124: ARRAY
42125: GREATEREQUAL
42126: AND
42127: ST_TO_ADDR
// end ;
42128: LD_VAR 0 3
42132: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42133: LD_INT 0
42135: PPUSH
42136: PPUSH
42137: PPUSH
42138: PPUSH
// pom := GetBase ( building ) ;
42139: LD_ADDR_VAR 0 3
42143: PUSH
42144: LD_VAR 0 1
42148: PPUSH
42149: CALL_OW 274
42153: ST_TO_ADDR
// if not pom then
42154: LD_VAR 0 3
42158: NOT
42159: IFFALSE 42163
// exit ;
42161: GO 42337
// btype := GetBType ( building ) ;
42163: LD_ADDR_VAR 0 5
42167: PUSH
42168: LD_VAR 0 1
42172: PPUSH
42173: CALL_OW 266
42177: ST_TO_ADDR
// if btype = b_armoury then
42178: LD_VAR 0 5
42182: PUSH
42183: LD_INT 4
42185: EQUAL
42186: IFFALSE 42196
// btype := b_barracks ;
42188: LD_ADDR_VAR 0 5
42192: PUSH
42193: LD_INT 5
42195: ST_TO_ADDR
// if btype = b_depot then
42196: LD_VAR 0 5
42200: PUSH
42201: LD_INT 0
42203: EQUAL
42204: IFFALSE 42214
// btype := b_warehouse ;
42206: LD_ADDR_VAR 0 5
42210: PUSH
42211: LD_INT 1
42213: ST_TO_ADDR
// if btype = b_workshop then
42214: LD_VAR 0 5
42218: PUSH
42219: LD_INT 2
42221: EQUAL
42222: IFFALSE 42232
// btype := b_factory ;
42224: LD_ADDR_VAR 0 5
42228: PUSH
42229: LD_INT 3
42231: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42232: LD_ADDR_VAR 0 4
42236: PUSH
42237: LD_VAR 0 5
42241: PPUSH
42242: LD_VAR 0 1
42246: PPUSH
42247: CALL_OW 248
42251: PPUSH
42252: CALL_OW 450
42256: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42257: LD_ADDR_VAR 0 2
42261: PUSH
42262: LD_VAR 0 3
42266: PPUSH
42267: LD_INT 1
42269: PPUSH
42270: CALL_OW 275
42274: PUSH
42275: LD_VAR 0 4
42279: PUSH
42280: LD_INT 1
42282: ARRAY
42283: GREATEREQUAL
42284: IFFALSE 42310
42286: PUSH
42287: LD_VAR 0 3
42291: PPUSH
42292: LD_INT 2
42294: PPUSH
42295: CALL_OW 275
42299: PUSH
42300: LD_VAR 0 4
42304: PUSH
42305: LD_INT 2
42307: ARRAY
42308: GREATEREQUAL
42309: AND
42310: IFFALSE 42336
42312: PUSH
42313: LD_VAR 0 3
42317: PPUSH
42318: LD_INT 3
42320: PPUSH
42321: CALL_OW 275
42325: PUSH
42326: LD_VAR 0 4
42330: PUSH
42331: LD_INT 3
42333: ARRAY
42334: GREATEREQUAL
42335: AND
42336: ST_TO_ADDR
// end ;
42337: LD_VAR 0 2
42341: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42342: LD_INT 0
42344: PPUSH
42345: PPUSH
42346: PPUSH
// pom := GetBase ( building ) ;
42347: LD_ADDR_VAR 0 4
42351: PUSH
42352: LD_VAR 0 1
42356: PPUSH
42357: CALL_OW 274
42361: ST_TO_ADDR
// if not pom then
42362: LD_VAR 0 4
42366: NOT
42367: IFFALSE 42371
// exit ;
42369: GO 42476
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42371: LD_ADDR_VAR 0 5
42375: PUSH
42376: LD_VAR 0 2
42380: PPUSH
42381: LD_VAR 0 1
42385: PPUSH
42386: CALL_OW 248
42390: PPUSH
42391: CALL_OW 450
42395: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42396: LD_ADDR_VAR 0 3
42400: PUSH
42401: LD_VAR 0 4
42405: PPUSH
42406: LD_INT 1
42408: PPUSH
42409: CALL_OW 275
42413: PUSH
42414: LD_VAR 0 5
42418: PUSH
42419: LD_INT 1
42421: ARRAY
42422: GREATEREQUAL
42423: IFFALSE 42449
42425: PUSH
42426: LD_VAR 0 4
42430: PPUSH
42431: LD_INT 2
42433: PPUSH
42434: CALL_OW 275
42438: PUSH
42439: LD_VAR 0 5
42443: PUSH
42444: LD_INT 2
42446: ARRAY
42447: GREATEREQUAL
42448: AND
42449: IFFALSE 42475
42451: PUSH
42452: LD_VAR 0 4
42456: PPUSH
42457: LD_INT 3
42459: PPUSH
42460: CALL_OW 275
42464: PUSH
42465: LD_VAR 0 5
42469: PUSH
42470: LD_INT 3
42472: ARRAY
42473: GREATEREQUAL
42474: AND
42475: ST_TO_ADDR
// end ;
42476: LD_VAR 0 3
42480: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42481: LD_INT 0
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
42488: PPUSH
42489: PPUSH
42490: PPUSH
42491: PPUSH
42492: PPUSH
42493: PPUSH
// result := false ;
42494: LD_ADDR_VAR 0 8
42498: PUSH
42499: LD_INT 0
42501: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42502: LD_VAR 0 5
42506: NOT
42507: IFTRUE 42516
42509: PUSH
42510: LD_VAR 0 1
42514: NOT
42515: OR
42516: IFTRUE 42525
42518: PUSH
42519: LD_VAR 0 2
42523: NOT
42524: OR
42525: IFTRUE 42534
42527: PUSH
42528: LD_VAR 0 3
42532: NOT
42533: OR
42534: IFFALSE 42538
// exit ;
42536: GO 43364
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42538: LD_ADDR_VAR 0 14
42542: PUSH
42543: LD_VAR 0 1
42547: PPUSH
42548: LD_VAR 0 2
42552: PPUSH
42553: LD_VAR 0 3
42557: PPUSH
42558: LD_VAR 0 4
42562: PPUSH
42563: LD_VAR 0 5
42567: PUSH
42568: LD_INT 1
42570: ARRAY
42571: PPUSH
42572: CALL_OW 248
42576: PPUSH
42577: LD_INT 0
42579: PPUSH
42580: CALL 44645 0 6
42584: ST_TO_ADDR
// if not hexes then
42585: LD_VAR 0 14
42589: NOT
42590: IFFALSE 42594
// exit ;
42592: GO 43364
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42594: LD_ADDR_VAR 0 17
42598: PUSH
42599: LD_VAR 0 5
42603: PPUSH
42604: LD_INT 22
42606: PUSH
42607: LD_VAR 0 13
42611: PPUSH
42612: CALL_OW 255
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: LD_INT 30
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 30
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: LIST
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PPUSH
42653: CALL_OW 72
42657: ST_TO_ADDR
// for i = 1 to hexes do
42658: LD_ADDR_VAR 0 9
42662: PUSH
42663: DOUBLE
42664: LD_INT 1
42666: DEC
42667: ST_TO_ADDR
42668: LD_VAR 0 14
42672: PUSH
42673: FOR_TO
42674: IFFALSE 43362
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42676: LD_ADDR_VAR 0 13
42680: PUSH
42681: LD_VAR 0 14
42685: PUSH
42686: LD_VAR 0 9
42690: ARRAY
42691: PUSH
42692: LD_INT 1
42694: ARRAY
42695: PPUSH
42696: LD_VAR 0 14
42700: PUSH
42701: LD_VAR 0 9
42705: ARRAY
42706: PUSH
42707: LD_INT 2
42709: ARRAY
42710: PPUSH
42711: CALL_OW 428
42715: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42716: LD_VAR 0 14
42720: PUSH
42721: LD_VAR 0 9
42725: ARRAY
42726: PUSH
42727: LD_INT 1
42729: ARRAY
42730: PPUSH
42731: LD_VAR 0 14
42735: PUSH
42736: LD_VAR 0 9
42740: ARRAY
42741: PUSH
42742: LD_INT 2
42744: ARRAY
42745: PPUSH
42746: CALL_OW 351
42750: IFTRUE 42789
42752: PUSH
42753: LD_VAR 0 14
42757: PUSH
42758: LD_VAR 0 9
42762: ARRAY
42763: PUSH
42764: LD_INT 1
42766: ARRAY
42767: PPUSH
42768: LD_VAR 0 14
42772: PUSH
42773: LD_VAR 0 9
42777: ARRAY
42778: PUSH
42779: LD_INT 2
42781: ARRAY
42782: PPUSH
42783: CALL_OW 488
42787: NOT
42788: OR
42789: IFTRUE 42806
42791: PUSH
42792: LD_VAR 0 13
42796: PPUSH
42797: CALL_OW 247
42801: PUSH
42802: LD_INT 3
42804: EQUAL
42805: OR
42806: IFFALSE 42812
// exit ;
42808: POP
42809: POP
42810: GO 43364
// if not tmp then
42812: LD_VAR 0 13
42816: NOT
42817: IFFALSE 42821
// continue ;
42819: GO 42673
// result := true ;
42821: LD_ADDR_VAR 0 8
42825: PUSH
42826: LD_INT 1
42828: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42829: LD_VAR 0 6
42833: IFFALSE 42850
42835: PUSH
42836: LD_VAR 0 13
42840: PPUSH
42841: CALL_OW 247
42845: PUSH
42846: LD_INT 2
42848: EQUAL
42849: AND
42850: IFFALSE 42867
42852: PUSH
42853: LD_VAR 0 13
42857: PPUSH
42858: CALL_OW 263
42862: PUSH
42863: LD_INT 1
42865: EQUAL
42866: AND
42867: IFFALSE 43031
// begin if IsDrivenBy ( tmp ) then
42869: LD_VAR 0 13
42873: PPUSH
42874: CALL_OW 311
42878: IFFALSE 42882
// continue ;
42880: GO 42673
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42882: LD_VAR 0 6
42886: PPUSH
42887: LD_INT 3
42889: PUSH
42890: LD_INT 60
42892: PUSH
42893: EMPTY
42894: LIST
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 3
42902: PUSH
42903: LD_INT 55
42905: PUSH
42906: EMPTY
42907: LIST
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PPUSH
42917: CALL_OW 72
42921: IFFALSE 43029
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42923: LD_ADDR_VAR 0 18
42927: PUSH
42928: LD_VAR 0 6
42932: PPUSH
42933: LD_INT 3
42935: PUSH
42936: LD_INT 60
42938: PUSH
42939: EMPTY
42940: LIST
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: PUSH
42949: LD_INT 55
42951: PUSH
42952: EMPTY
42953: LIST
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PPUSH
42963: CALL_OW 72
42967: PUSH
42968: LD_INT 1
42970: ARRAY
42971: ST_TO_ADDR
// if IsInUnit ( driver ) then
42972: LD_VAR 0 18
42976: PPUSH
42977: CALL_OW 310
42981: IFFALSE 42992
// ComExit ( driver ) ;
42983: LD_VAR 0 18
42987: PPUSH
42988: CALL 68635 0 1
// AddComEnterUnit ( driver , tmp ) ;
42992: LD_VAR 0 18
42996: PPUSH
42997: LD_VAR 0 13
43001: PPUSH
43002: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43006: LD_VAR 0 18
43010: PPUSH
43011: LD_VAR 0 7
43015: PPUSH
43016: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43020: LD_VAR 0 18
43024: PPUSH
43025: CALL_OW 181
// end ; continue ;
43029: GO 42673
// end ; if not cleaners or not tmp in cleaners then
43031: LD_VAR 0 6
43035: NOT
43036: IFTRUE 43051
43038: PUSH
43039: LD_VAR 0 13
43043: PUSH
43044: LD_VAR 0 6
43048: IN
43049: NOT
43050: OR
43051: IFFALSE 43360
// begin if dep then
43053: LD_VAR 0 17
43057: IFFALSE 43193
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43059: LD_ADDR_VAR 0 16
43063: PUSH
43064: LD_VAR 0 17
43068: PUSH
43069: LD_INT 1
43071: ARRAY
43072: PPUSH
43073: CALL_OW 250
43077: PPUSH
43078: LD_VAR 0 17
43082: PUSH
43083: LD_INT 1
43085: ARRAY
43086: PPUSH
43087: CALL_OW 254
43091: PPUSH
43092: LD_INT 5
43094: PPUSH
43095: CALL_OW 272
43099: PUSH
43100: LD_VAR 0 17
43104: PUSH
43105: LD_INT 1
43107: ARRAY
43108: PPUSH
43109: CALL_OW 251
43113: PPUSH
43114: LD_VAR 0 17
43118: PUSH
43119: LD_INT 1
43121: ARRAY
43122: PPUSH
43123: CALL_OW 254
43127: PPUSH
43128: LD_INT 5
43130: PPUSH
43131: CALL_OW 273
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43140: LD_VAR 0 16
43144: PUSH
43145: LD_INT 1
43147: ARRAY
43148: PPUSH
43149: LD_VAR 0 16
43153: PUSH
43154: LD_INT 2
43156: ARRAY
43157: PPUSH
43158: CALL_OW 488
43162: IFFALSE 43193
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43164: LD_VAR 0 13
43168: PPUSH
43169: LD_VAR 0 16
43173: PUSH
43174: LD_INT 1
43176: ARRAY
43177: PPUSH
43178: LD_VAR 0 16
43182: PUSH
43183: LD_INT 2
43185: ARRAY
43186: PPUSH
43187: CALL_OW 111
// continue ;
43191: GO 42673
// end ; end ; r := GetDir ( tmp ) ;
43193: LD_ADDR_VAR 0 15
43197: PUSH
43198: LD_VAR 0 13
43202: PPUSH
43203: CALL_OW 254
43207: ST_TO_ADDR
// if r = 5 then
43208: LD_VAR 0 15
43212: PUSH
43213: LD_INT 5
43215: EQUAL
43216: IFFALSE 43226
// r := 0 ;
43218: LD_ADDR_VAR 0 15
43222: PUSH
43223: LD_INT 0
43225: ST_TO_ADDR
// for j = r to 5 do
43226: LD_ADDR_VAR 0 10
43230: PUSH
43231: DOUBLE
43232: LD_VAR 0 15
43236: DEC
43237: ST_TO_ADDR
43238: LD_INT 5
43240: PUSH
43241: FOR_TO
43242: IFFALSE 43358
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43244: LD_ADDR_VAR 0 11
43248: PUSH
43249: LD_VAR 0 13
43253: PPUSH
43254: CALL_OW 250
43258: PPUSH
43259: LD_VAR 0 10
43263: PPUSH
43264: LD_INT 2
43266: PPUSH
43267: CALL_OW 272
43271: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43272: LD_ADDR_VAR 0 12
43276: PUSH
43277: LD_VAR 0 13
43281: PPUSH
43282: CALL_OW 251
43286: PPUSH
43287: LD_VAR 0 10
43291: PPUSH
43292: LD_INT 2
43294: PPUSH
43295: CALL_OW 273
43299: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43300: LD_VAR 0 11
43304: PPUSH
43305: LD_VAR 0 12
43309: PPUSH
43310: CALL_OW 488
43314: IFFALSE 43333
43316: PUSH
43317: LD_VAR 0 11
43321: PPUSH
43322: LD_VAR 0 12
43326: PPUSH
43327: CALL_OW 428
43331: NOT
43332: AND
43333: IFFALSE 43356
// begin ComMoveXY ( tmp , _x , _y ) ;
43335: LD_VAR 0 13
43339: PPUSH
43340: LD_VAR 0 11
43344: PPUSH
43345: LD_VAR 0 12
43349: PPUSH
43350: CALL_OW 111
// break ;
43354: GO 43358
// end ; end ;
43356: GO 43241
43358: POP
43359: POP
// end ; end ;
43360: GO 42673
43362: POP
43363: POP
// end ;
43364: LD_VAR 0 8
43368: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43369: LD_INT 0
43371: PPUSH
// result := true ;
43372: LD_ADDR_VAR 0 3
43376: PUSH
43377: LD_INT 1
43379: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43380: LD_VAR 0 2
43384: PUSH
43385: LD_INT 24
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43399
43391: LD_INT 33
43393: DOUBLE
43394: EQUAL
43395: IFTRUE 43399
43397: GO 43424
43399: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43400: LD_ADDR_VAR 0 3
43404: PUSH
43405: LD_INT 32
43407: PPUSH
43408: LD_VAR 0 1
43412: PPUSH
43413: CALL_OW 321
43417: PUSH
43418: LD_INT 2
43420: EQUAL
43421: ST_TO_ADDR
43422: GO 43740
43424: LD_INT 20
43426: DOUBLE
43427: EQUAL
43428: IFTRUE 43432
43430: GO 43457
43432: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43433: LD_ADDR_VAR 0 3
43437: PUSH
43438: LD_INT 6
43440: PPUSH
43441: LD_VAR 0 1
43445: PPUSH
43446: CALL_OW 321
43450: PUSH
43451: LD_INT 2
43453: EQUAL
43454: ST_TO_ADDR
43455: GO 43740
43457: LD_INT 22
43459: DOUBLE
43460: EQUAL
43461: IFTRUE 43471
43463: LD_INT 36
43465: DOUBLE
43466: EQUAL
43467: IFTRUE 43471
43469: GO 43496
43471: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43472: LD_ADDR_VAR 0 3
43476: PUSH
43477: LD_INT 15
43479: PPUSH
43480: LD_VAR 0 1
43484: PPUSH
43485: CALL_OW 321
43489: PUSH
43490: LD_INT 2
43492: EQUAL
43493: ST_TO_ADDR
43494: GO 43740
43496: LD_INT 30
43498: DOUBLE
43499: EQUAL
43500: IFTRUE 43504
43502: GO 43529
43504: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43505: LD_ADDR_VAR 0 3
43509: PUSH
43510: LD_INT 20
43512: PPUSH
43513: LD_VAR 0 1
43517: PPUSH
43518: CALL_OW 321
43522: PUSH
43523: LD_INT 2
43525: EQUAL
43526: ST_TO_ADDR
43527: GO 43740
43529: LD_INT 28
43531: DOUBLE
43532: EQUAL
43533: IFTRUE 43543
43535: LD_INT 21
43537: DOUBLE
43538: EQUAL
43539: IFTRUE 43543
43541: GO 43568
43543: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43544: LD_ADDR_VAR 0 3
43548: PUSH
43549: LD_INT 21
43551: PPUSH
43552: LD_VAR 0 1
43556: PPUSH
43557: CALL_OW 321
43561: PUSH
43562: LD_INT 2
43564: EQUAL
43565: ST_TO_ADDR
43566: GO 43740
43568: LD_INT 16
43570: DOUBLE
43571: EQUAL
43572: IFTRUE 43576
43574: GO 43601
43576: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43577: LD_ADDR_VAR 0 3
43581: PUSH
43582: LD_INT 84
43584: PPUSH
43585: LD_VAR 0 1
43589: PPUSH
43590: CALL_OW 321
43594: PUSH
43595: LD_INT 2
43597: EQUAL
43598: ST_TO_ADDR
43599: GO 43740
43601: LD_INT 19
43603: DOUBLE
43604: EQUAL
43605: IFTRUE 43615
43607: LD_INT 23
43609: DOUBLE
43610: EQUAL
43611: IFTRUE 43615
43613: GO 43640
43615: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43616: LD_ADDR_VAR 0 3
43620: PUSH
43621: LD_INT 83
43623: PPUSH
43624: LD_VAR 0 1
43628: PPUSH
43629: CALL_OW 321
43633: PUSH
43634: LD_INT 2
43636: EQUAL
43637: ST_TO_ADDR
43638: GO 43740
43640: LD_INT 17
43642: DOUBLE
43643: EQUAL
43644: IFTRUE 43648
43646: GO 43673
43648: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43649: LD_ADDR_VAR 0 3
43653: PUSH
43654: LD_INT 39
43656: PPUSH
43657: LD_VAR 0 1
43661: PPUSH
43662: CALL_OW 321
43666: PUSH
43667: LD_INT 2
43669: EQUAL
43670: ST_TO_ADDR
43671: GO 43740
43673: LD_INT 18
43675: DOUBLE
43676: EQUAL
43677: IFTRUE 43681
43679: GO 43706
43681: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43682: LD_ADDR_VAR 0 3
43686: PUSH
43687: LD_INT 40
43689: PPUSH
43690: LD_VAR 0 1
43694: PPUSH
43695: CALL_OW 321
43699: PUSH
43700: LD_INT 2
43702: EQUAL
43703: ST_TO_ADDR
43704: GO 43740
43706: LD_INT 27
43708: DOUBLE
43709: EQUAL
43710: IFTRUE 43714
43712: GO 43739
43714: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43715: LD_ADDR_VAR 0 3
43719: PUSH
43720: LD_INT 35
43722: PPUSH
43723: LD_VAR 0 1
43727: PPUSH
43728: CALL_OW 321
43732: PUSH
43733: LD_INT 2
43735: EQUAL
43736: ST_TO_ADDR
43737: GO 43740
43739: POP
// end ;
43740: LD_VAR 0 3
43744: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43745: LD_INT 0
43747: PPUSH
43748: PPUSH
43749: PPUSH
43750: PPUSH
43751: PPUSH
43752: PPUSH
43753: PPUSH
43754: PPUSH
43755: PPUSH
43756: PPUSH
43757: PPUSH
// result := false ;
43758: LD_ADDR_VAR 0 6
43762: PUSH
43763: LD_INT 0
43765: ST_TO_ADDR
// if btype = b_depot then
43766: LD_VAR 0 2
43770: PUSH
43771: LD_INT 0
43773: EQUAL
43774: IFFALSE 43786
// begin result := true ;
43776: LD_ADDR_VAR 0 6
43780: PUSH
43781: LD_INT 1
43783: ST_TO_ADDR
// exit ;
43784: GO 44640
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43786: LD_VAR 0 1
43790: NOT
43791: IFTRUE 43816
43793: PUSH
43794: LD_VAR 0 1
43798: PPUSH
43799: CALL_OW 266
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: IN
43814: NOT
43815: OR
43816: IFTRUE 43825
43818: PUSH
43819: LD_VAR 0 2
43823: NOT
43824: OR
43825: IFTRUE 43861
43827: PUSH
43828: LD_VAR 0 5
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: LD_INT 3
43844: PUSH
43845: LD_INT 4
43847: PUSH
43848: LD_INT 5
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: IN
43859: NOT
43860: OR
43861: IFTRUE 43880
43863: PUSH
43864: LD_VAR 0 3
43868: PPUSH
43869: LD_VAR 0 4
43873: PPUSH
43874: CALL_OW 488
43878: NOT
43879: OR
43880: IFFALSE 43884
// exit ;
43882: GO 44640
// side := GetSide ( depot ) ;
43884: LD_ADDR_VAR 0 9
43888: PUSH
43889: LD_VAR 0 1
43893: PPUSH
43894: CALL_OW 255
43898: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43899: LD_VAR 0 9
43903: PPUSH
43904: LD_VAR 0 2
43908: PPUSH
43909: CALL 43369 0 2
43913: NOT
43914: IFFALSE 43918
// exit ;
43916: GO 44640
// pom := GetBase ( depot ) ;
43918: LD_ADDR_VAR 0 10
43922: PUSH
43923: LD_VAR 0 1
43927: PPUSH
43928: CALL_OW 274
43932: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43933: LD_ADDR_VAR 0 11
43937: PUSH
43938: LD_VAR 0 2
43942: PPUSH
43943: LD_VAR 0 1
43947: PPUSH
43948: CALL_OW 248
43952: PPUSH
43953: CALL_OW 450
43957: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43958: LD_VAR 0 10
43962: PPUSH
43963: LD_INT 1
43965: PPUSH
43966: CALL_OW 275
43970: PUSH
43971: LD_VAR 0 11
43975: PUSH
43976: LD_INT 1
43978: ARRAY
43979: GREATEREQUAL
43980: IFFALSE 44006
43982: PUSH
43983: LD_VAR 0 10
43987: PPUSH
43988: LD_INT 2
43990: PPUSH
43991: CALL_OW 275
43995: PUSH
43996: LD_VAR 0 11
44000: PUSH
44001: LD_INT 2
44003: ARRAY
44004: GREATEREQUAL
44005: AND
44006: IFFALSE 44032
44008: PUSH
44009: LD_VAR 0 10
44013: PPUSH
44014: LD_INT 3
44016: PPUSH
44017: CALL_OW 275
44021: PUSH
44022: LD_VAR 0 11
44026: PUSH
44027: LD_INT 3
44029: ARRAY
44030: GREATEREQUAL
44031: AND
44032: NOT
44033: IFFALSE 44037
// exit ;
44035: GO 44640
// if GetBType ( depot ) = b_depot then
44037: LD_VAR 0 1
44041: PPUSH
44042: CALL_OW 266
44046: PUSH
44047: LD_INT 0
44049: EQUAL
44050: IFFALSE 44062
// dist := 28 else
44052: LD_ADDR_VAR 0 14
44056: PUSH
44057: LD_INT 28
44059: ST_TO_ADDR
44060: GO 44070
// dist := 36 ;
44062: LD_ADDR_VAR 0 14
44066: PUSH
44067: LD_INT 36
44069: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44070: LD_VAR 0 1
44074: PPUSH
44075: LD_VAR 0 3
44079: PPUSH
44080: LD_VAR 0 4
44084: PPUSH
44085: CALL_OW 297
44089: PUSH
44090: LD_VAR 0 14
44094: GREATER
44095: IFFALSE 44099
// exit ;
44097: GO 44640
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44099: LD_ADDR_VAR 0 12
44103: PUSH
44104: LD_VAR 0 2
44108: PPUSH
44109: LD_VAR 0 3
44113: PPUSH
44114: LD_VAR 0 4
44118: PPUSH
44119: LD_VAR 0 5
44123: PPUSH
44124: LD_VAR 0 1
44128: PPUSH
44129: CALL_OW 248
44133: PPUSH
44134: LD_INT 0
44136: PPUSH
44137: CALL 44645 0 6
44141: ST_TO_ADDR
// if not hexes then
44142: LD_VAR 0 12
44146: NOT
44147: IFFALSE 44151
// exit ;
44149: GO 44640
// hex := GetHexInfo ( x , y ) ;
44151: LD_ADDR_VAR 0 15
44155: PUSH
44156: LD_VAR 0 3
44160: PPUSH
44161: LD_VAR 0 4
44165: PPUSH
44166: CALL_OW 546
44170: ST_TO_ADDR
// if hex [ 1 ] then
44171: LD_VAR 0 15
44175: PUSH
44176: LD_INT 1
44178: ARRAY
44179: IFFALSE 44183
// exit ;
44181: GO 44640
// height := hex [ 2 ] ;
44183: LD_ADDR_VAR 0 13
44187: PUSH
44188: LD_VAR 0 15
44192: PUSH
44193: LD_INT 2
44195: ARRAY
44196: ST_TO_ADDR
// for i = 1 to hexes do
44197: LD_ADDR_VAR 0 7
44201: PUSH
44202: DOUBLE
44203: LD_INT 1
44205: DEC
44206: ST_TO_ADDR
44207: LD_VAR 0 12
44211: PUSH
44212: FOR_TO
44213: IFFALSE 44557
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44215: LD_VAR 0 12
44219: PUSH
44220: LD_VAR 0 7
44224: ARRAY
44225: PUSH
44226: LD_INT 1
44228: ARRAY
44229: PPUSH
44230: LD_VAR 0 12
44234: PUSH
44235: LD_VAR 0 7
44239: ARRAY
44240: PUSH
44241: LD_INT 2
44243: ARRAY
44244: PPUSH
44245: CALL_OW 488
44249: NOT
44250: IFTRUE 44292
44252: PUSH
44253: LD_VAR 0 12
44257: PUSH
44258: LD_VAR 0 7
44262: ARRAY
44263: PUSH
44264: LD_INT 1
44266: ARRAY
44267: PPUSH
44268: LD_VAR 0 12
44272: PUSH
44273: LD_VAR 0 7
44277: ARRAY
44278: PUSH
44279: LD_INT 2
44281: ARRAY
44282: PPUSH
44283: CALL_OW 428
44287: PUSH
44288: LD_INT 0
44290: GREATER
44291: OR
44292: IFTRUE 44330
44294: PUSH
44295: LD_VAR 0 12
44299: PUSH
44300: LD_VAR 0 7
44304: ARRAY
44305: PUSH
44306: LD_INT 1
44308: ARRAY
44309: PPUSH
44310: LD_VAR 0 12
44314: PUSH
44315: LD_VAR 0 7
44319: ARRAY
44320: PUSH
44321: LD_INT 2
44323: ARRAY
44324: PPUSH
44325: CALL_OW 351
44329: OR
44330: IFFALSE 44336
// exit ;
44332: POP
44333: POP
44334: GO 44640
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44336: LD_ADDR_VAR 0 8
44340: PUSH
44341: LD_VAR 0 12
44345: PUSH
44346: LD_VAR 0 7
44350: ARRAY
44351: PUSH
44352: LD_INT 1
44354: ARRAY
44355: PPUSH
44356: LD_VAR 0 12
44360: PUSH
44361: LD_VAR 0 7
44365: ARRAY
44366: PUSH
44367: LD_INT 2
44369: ARRAY
44370: PPUSH
44371: CALL_OW 546
44375: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44376: LD_VAR 0 8
44380: PUSH
44381: LD_INT 1
44383: ARRAY
44384: IFTRUE 44406
44386: PUSH
44387: LD_VAR 0 8
44391: PUSH
44392: LD_INT 2
44394: ARRAY
44395: PUSH
44396: LD_VAR 0 13
44400: PUSH
44401: LD_INT 2
44403: PLUS
44404: GREATER
44405: OR
44406: IFTRUE 44428
44408: PUSH
44409: LD_VAR 0 8
44413: PUSH
44414: LD_INT 2
44416: ARRAY
44417: PUSH
44418: LD_VAR 0 13
44422: PUSH
44423: LD_INT 2
44425: MINUS
44426: LESS
44427: OR
44428: IFTRUE 44496
44430: PUSH
44431: LD_VAR 0 8
44435: PUSH
44436: LD_INT 3
44438: ARRAY
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 8
44445: PUSH
44446: LD_INT 9
44448: PUSH
44449: LD_INT 10
44451: PUSH
44452: LD_INT 11
44454: PUSH
44455: LD_INT 12
44457: PUSH
44458: LD_INT 13
44460: PUSH
44461: LD_INT 16
44463: PUSH
44464: LD_INT 17
44466: PUSH
44467: LD_INT 18
44469: PUSH
44470: LD_INT 19
44472: PUSH
44473: LD_INT 20
44475: PUSH
44476: LD_INT 21
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: IN
44494: NOT
44495: OR
44496: IFTRUE 44509
44498: PUSH
44499: LD_VAR 0 8
44503: PUSH
44504: LD_INT 5
44506: ARRAY
44507: NOT
44508: OR
44509: IFTRUE 44549
44511: PUSH
44512: LD_VAR 0 8
44516: PUSH
44517: LD_INT 6
44519: ARRAY
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: LD_INT 7
44529: PUSH
44530: LD_INT 9
44532: PUSH
44533: LD_INT 10
44535: PUSH
44536: LD_INT 11
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: IN
44547: NOT
44548: OR
44549: IFFALSE 44555
// exit ;
44551: POP
44552: POP
44553: GO 44640
// end ;
44555: GO 44212
44557: POP
44558: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44559: LD_VAR 0 9
44563: PPUSH
44564: LD_VAR 0 3
44568: PPUSH
44569: LD_VAR 0 4
44573: PPUSH
44574: LD_INT 20
44576: PPUSH
44577: CALL 36459 0 4
44581: PUSH
44582: LD_INT 4
44584: ARRAY
44585: IFFALSE 44589
// exit ;
44587: GO 44640
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44589: LD_VAR 0 2
44593: PUSH
44594: LD_INT 29
44596: PUSH
44597: LD_INT 30
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: IN
44604: IFFALSE 44628
44606: PUSH
44607: LD_VAR 0 3
44611: PPUSH
44612: LD_VAR 0 4
44616: PPUSH
44617: LD_VAR 0 9
44621: PPUSH
44622: CALL_OW 440
44626: NOT
44627: AND
44628: IFFALSE 44632
// exit ;
44630: GO 44640
// result := true ;
44632: LD_ADDR_VAR 0 6
44636: PUSH
44637: LD_INT 1
44639: ST_TO_ADDR
// end ;
44640: LD_VAR 0 6
44644: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44645: LD_INT 0
44647: PPUSH
44648: PPUSH
44649: PPUSH
44650: PPUSH
44651: PPUSH
44652: PPUSH
44653: PPUSH
44654: PPUSH
44655: PPUSH
44656: PPUSH
44657: PPUSH
44658: PPUSH
44659: PPUSH
44660: PPUSH
44661: PPUSH
44662: PPUSH
44663: PPUSH
44664: PPUSH
44665: PPUSH
44666: PPUSH
44667: PPUSH
44668: PPUSH
44669: PPUSH
44670: PPUSH
44671: PPUSH
44672: PPUSH
44673: PPUSH
44674: PPUSH
44675: PPUSH
44676: PPUSH
44677: PPUSH
44678: PPUSH
44679: PPUSH
44680: PPUSH
44681: PPUSH
44682: PPUSH
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
44692: PPUSH
44693: PPUSH
44694: PPUSH
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
44700: PPUSH
44701: PPUSH
44702: PPUSH
44703: PPUSH
44704: PPUSH
// result = [ ] ;
44705: LD_ADDR_VAR 0 7
44709: PUSH
44710: EMPTY
44711: ST_TO_ADDR
// temp_list = [ ] ;
44712: LD_ADDR_VAR 0 9
44716: PUSH
44717: EMPTY
44718: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44719: LD_VAR 0 4
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: LD_INT 3
44735: PUSH
44736: LD_INT 4
44738: PUSH
44739: LD_INT 5
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: IN
44750: NOT
44751: IFTRUE 44794
44753: PUSH
44754: LD_VAR 0 1
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: IN
44769: IFFALSE 44793
44771: PUSH
44772: LD_VAR 0 5
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: LD_INT 3
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: LIST
44790: IN
44791: NOT
44792: AND
44793: OR
44794: IFFALSE 44798
// exit ;
44796: GO 63197
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44798: LD_VAR 0 1
44802: PUSH
44803: LD_INT 6
44805: PUSH
44806: LD_INT 7
44808: PUSH
44809: LD_INT 8
44811: PUSH
44812: LD_INT 13
44814: PUSH
44815: LD_INT 12
44817: PUSH
44818: LD_INT 15
44820: PUSH
44821: LD_INT 11
44823: PUSH
44824: LD_INT 14
44826: PUSH
44827: LD_INT 10
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: IN
44841: IFFALSE 44851
// btype = b_lab ;
44843: LD_ADDR_VAR 0 1
44847: PUSH
44848: LD_INT 6
44850: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44851: LD_VAR 0 6
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: LIST
44869: IN
44870: NOT
44871: IFTRUE 44939
44873: PUSH
44874: LD_VAR 0 1
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 3
44890: PUSH
44891: LD_INT 6
44893: PUSH
44894: LD_INT 36
44896: PUSH
44897: LD_INT 4
44899: PUSH
44900: LD_INT 5
44902: PUSH
44903: LD_INT 31
44905: PUSH
44906: LD_INT 32
44908: PUSH
44909: LD_INT 33
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: IN
44925: NOT
44926: IFFALSE 44938
44928: PUSH
44929: LD_VAR 0 6
44933: PUSH
44934: LD_INT 1
44936: EQUAL
44937: AND
44938: OR
44939: IFTRUE 44971
44941: PUSH
44942: LD_VAR 0 1
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: LD_INT 3
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: IN
44957: NOT
44958: IFFALSE 44970
44960: PUSH
44961: LD_VAR 0 6
44965: PUSH
44966: LD_INT 2
44968: EQUAL
44969: AND
44970: OR
44971: IFFALSE 44981
// mode = 0 ;
44973: LD_ADDR_VAR 0 6
44977: PUSH
44978: LD_INT 0
44980: ST_TO_ADDR
// case mode of 0 :
44981: LD_VAR 0 6
44985: PUSH
44986: LD_INT 0
44988: DOUBLE
44989: EQUAL
44990: IFTRUE 44994
44992: GO 56447
44994: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44995: LD_ADDR_VAR 0 11
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 2
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: LD_INT 3
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 3
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45188: LD_ADDR_VAR 0 12
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 3
45345: NEG
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 3
45356: NEG
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45384: LD_ADDR_VAR 0 13
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: LD_INT 3
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 3
45543: NEG
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 3
45555: NEG
45556: PUSH
45557: LD_INT 3
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45583: LD_ADDR_VAR 0 14
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: LD_INT 3
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 3
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: LD_INT 2
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45779: LD_ADDR_VAR 0 15
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 3
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 3
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45972: LD_ADDR_VAR 0 16
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 3
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: PUSH
46130: LD_INT 3
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: LD_INT 3
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46165: LD_ADDR_VAR 0 17
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46395: LD_ADDR_VAR 0 18
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46625: LD_ADDR_VAR 0 19
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46855: LD_ADDR_VAR 0 20
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: NEG
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47085: LD_ADDR_VAR 0 21
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 2
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47315: LD_ADDR_VAR 0 22
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 2
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47545: LD_ADDR_VAR 0 23
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: LD_INT 3
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47825: LD_ADDR_VAR 0 24
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 3
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 3
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48101: LD_ADDR_VAR 0 25
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 3
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 3
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 3
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48375: LD_ADDR_VAR 0 26
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: NEG
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: LD_INT 3
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 3
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: NEG
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48651: LD_ADDR_VAR 0 27
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 2
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 3
48884: NEG
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 3
48896: NEG
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48931: LD_ADDR_VAR 0 28
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 2
49107: NEG
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 3
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: LD_INT 3
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 3
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 3
49178: NEG
49179: PUSH
49180: LD_INT 2
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49213: LD_ADDR_VAR 0 29
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 3
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 3
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 3
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 3
49457: NEG
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49492: LD_ADDR_VAR 0 30
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 3
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 3
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 3
49735: NEG
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49770: LD_ADDR_VAR 0 31
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: NEG
49960: PUSH
49961: LD_INT 3
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 3
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 3
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 3
50013: NEG
50014: PUSH
50015: LD_INT 2
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50048: LD_ADDR_VAR 0 32
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: LD_INT 2
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 3
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 2
50270: PUSH
50271: LD_INT 3
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 3
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50326: LD_ADDR_VAR 0 33
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: LD_INT 3
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 3
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 3
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: NEG
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50605: LD_ADDR_VAR 0 34
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 3
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 3
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 3
50850: NEG
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50885: LD_ADDR_VAR 0 35
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50997: LD_ADDR_VAR 0 36
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51109: LD_ADDR_VAR 0 37
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51221: LD_ADDR_VAR 0 38
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51333: LD_ADDR_VAR 0 39
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51445: LD_ADDR_VAR 0 40
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51557: LD_ADDR_VAR 0 41
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: LD_INT 3
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 3
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 3
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 3
51800: PUSH
51801: LD_INT 3
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: LD_INT 3
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: NEG
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 3
51842: NEG
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 3
51854: NEG
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 3
51866: NEG
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51907: LD_ADDR_VAR 0 42
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: LD_INT 2
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: LD_INT 3
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 3
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 3
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 3
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: LD_INT 3
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 3
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 3
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 3
52204: NEG
52205: PUSH
52206: LD_INT 2
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: LD_INT 3
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52257: LD_ADDR_VAR 0 43
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: LD_INT 2
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 3
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 3
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 3
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 3
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 3
52553: NEG
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 3
52564: NEG
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52605: LD_ADDR_VAR 0 44
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 2
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: LD_INT 3
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 3
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 3
52848: PUSH
52849: LD_INT 3
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: LD_INT 3
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 3
52879: NEG
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 3
52902: NEG
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 3
52914: NEG
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52955: LD_ADDR_VAR 0 45
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: NEG
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: LD_INT 3
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 3
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 3
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: LD_INT 3
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 2
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 3
53252: NEG
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: NEG
53265: PUSH
53266: LD_INT 3
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53305: LD_ADDR_VAR 0 46
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 3
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 3
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 3
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 2
53590: NEG
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 3
53612: NEG
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53653: LD_ADDR_VAR 0 47
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53804: LD_ADDR_VAR 0 48
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53951: LD_ADDR_VAR 0 49
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54095: LD_ADDR_VAR 0 50
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54239: LD_ADDR_VAR 0 51
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54386: LD_ADDR_VAR 0 52
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54537: LD_ADDR_VAR 0 53
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54767: LD_ADDR_VAR 0 54
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 2
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54997: LD_ADDR_VAR 0 55
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 2
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: LD_INT 2
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55227: LD_ADDR_VAR 0 56
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: LD_INT 2
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55457: LD_ADDR_VAR 0 57
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55687: LD_ADDR_VAR 0 58
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55917: LD_ADDR_VAR 0 59
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56005: LD_ADDR_VAR 0 60
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56093: LD_ADDR_VAR 0 61
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56181: LD_ADDR_VAR 0 62
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56269: LD_ADDR_VAR 0 63
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56357: LD_ADDR_VAR 0 64
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: ST_TO_ADDR
// end ; 1 :
56445: GO 62342
56447: LD_INT 1
56449: DOUBLE
56450: EQUAL
56451: IFTRUE 56455
56453: GO 59078
56455: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56456: LD_ADDR_VAR 0 11
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 3
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: LIST
56499: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56500: LD_ADDR_VAR 0 12
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: LIST
56540: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56541: LD_ADDR_VAR 0 13
56545: PUSH
56546: LD_INT 3
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 3
56558: PUSH
56559: LD_INT 3
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 2
56568: PUSH
56569: LD_INT 3
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56581: LD_ADDR_VAR 0 14
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 3
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56622: LD_ADDR_VAR 0 15
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 3
56640: NEG
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: LIST
56665: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56666: LD_ADDR_VAR 0 16
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: LD_INT 3
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 3
56685: NEG
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: NEG
56698: PUSH
56699: LD_INT 3
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56712: LD_ADDR_VAR 0 17
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 3
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 2
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56756: LD_ADDR_VAR 0 18
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56797: LD_ADDR_VAR 0 19
56801: PUSH
56802: LD_INT 3
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 3
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: LD_INT 3
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: LIST
56836: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56837: LD_ADDR_VAR 0 20
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56878: LD_ADDR_VAR 0 21
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 3
56896: NEG
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 3
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56922: LD_ADDR_VAR 0 22
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 3
56941: NEG
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 3
56953: NEG
56954: PUSH
56955: LD_INT 3
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: LIST
56967: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56968: LD_ADDR_VAR 0 23
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 4
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 3
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: LIST
57011: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57012: LD_ADDR_VAR 0 24
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 4
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57053: LD_ADDR_VAR 0 25
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: LD_INT 3
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 4
57070: PUSH
57071: LD_INT 3
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: LD_INT 4
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: LIST
57092: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57093: LD_ADDR_VAR 0 26
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 4
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: LIST
57133: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57134: LD_ADDR_VAR 0 27
57138: PUSH
57139: LD_INT 3
57141: NEG
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 3
57152: NEG
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 4
57163: NEG
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57178: LD_ADDR_VAR 0 28
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: LD_INT 4
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 4
57209: NEG
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57224: LD_ADDR_VAR 0 29
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 3
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 4
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 4
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 3
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 5
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 5
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: LD_INT 4
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 6
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 6
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: LD_INT 5
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57379: LD_ADDR_VAR 0 30
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 3
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 3
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 4
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 4
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 4
57448: PUSH
57449: LD_INT 1
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 5
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 5
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 5
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 6
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 6
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57522: LD_ADDR_VAR 0 31
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 4
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 4
57569: PUSH
57570: LD_INT 4
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: LD_INT 4
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 5
57589: PUSH
57590: LD_INT 4
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 5
57599: PUSH
57600: LD_INT 5
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 4
57609: PUSH
57610: LD_INT 5
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 6
57619: PUSH
57620: LD_INT 5
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 6
57629: PUSH
57630: LD_INT 6
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 5
57639: PUSH
57640: LD_INT 6
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57661: LD_ADDR_VAR 0 32
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 3
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: LD_INT 3
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: LD_INT 4
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 4
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: LD_INT 5
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: LD_INT 5
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: LD_INT 4
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 6
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 6
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 5
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57804: LD_ADDR_VAR 0 33
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 3
57845: NEG
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 4
57856: NEG
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 4
57867: NEG
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 4
57879: NEG
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 5
57890: NEG
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 5
57901: NEG
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 5
57913: NEG
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 6
57924: NEG
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 6
57935: NEG
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57959: LD_ADDR_VAR 0 34
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: LD_INT 3
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 3
57978: NEG
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 3
57990: NEG
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: LD_INT 4
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 4
58014: NEG
58015: PUSH
58016: LD_INT 3
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 4
58026: NEG
58027: PUSH
58028: LD_INT 4
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 4
58038: NEG
58039: PUSH
58040: LD_INT 5
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 5
58050: NEG
58051: PUSH
58052: LD_INT 4
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 5
58062: NEG
58063: PUSH
58064: LD_INT 5
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 5
58074: NEG
58075: PUSH
58076: LD_INT 6
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 6
58086: NEG
58087: PUSH
58088: LD_INT 5
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 6
58098: NEG
58099: PUSH
58100: LD_INT 6
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58122: LD_ADDR_VAR 0 41
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 3
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: LD_INT 2
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: LIST
58165: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58166: LD_ADDR_VAR 0 42
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 3
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: LIST
58206: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58207: LD_ADDR_VAR 0 43
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: LIST
58246: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58247: LD_ADDR_VAR 0 44
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 3
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58288: LD_ADDR_VAR 0 45
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 3
58317: NEG
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: LIST
58331: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58332: LD_ADDR_VAR 0 46
58336: PUSH
58337: LD_INT 2
58339: NEG
58340: PUSH
58341: LD_INT 2
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 2
58351: NEG
58352: PUSH
58353: LD_INT 3
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 3
58363: NEG
58364: PUSH
58365: LD_INT 2
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: LIST
58377: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58378: LD_ADDR_VAR 0 47
58382: PUSH
58383: LD_INT 2
58385: NEG
58386: PUSH
58387: LD_INT 3
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: LD_INT 3
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58411: LD_ADDR_VAR 0 48
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58442: LD_ADDR_VAR 0 49
58446: PUSH
58447: LD_INT 3
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58471: LD_ADDR_VAR 0 50
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 3
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: LD_INT 3
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58500: LD_ADDR_VAR 0 51
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58531: LD_ADDR_VAR 0 52
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 3
58550: NEG
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58564: LD_ADDR_VAR 0 53
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: LD_INT 3
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: LD_INT 2
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: LIST
58607: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58608: LD_ADDR_VAR 0 54
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 3
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: LIST
58648: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58649: LD_ADDR_VAR 0 55
58653: PUSH
58654: LD_INT 3
58656: PUSH
58657: LD_INT 2
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 3
58666: PUSH
58667: LD_INT 3
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: LD_INT 3
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: LIST
58688: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58689: LD_ADDR_VAR 0 56
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 3
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: LIST
58729: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58730: LD_ADDR_VAR 0 57
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 3
58748: NEG
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 3
58759: NEG
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58774: LD_ADDR_VAR 0 58
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: LD_INT 3
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 3
58793: NEG
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: NEG
58806: PUSH
58807: LD_INT 3
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: LIST
58819: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58820: LD_ADDR_VAR 0 59
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58864: LD_ADDR_VAR 0 60
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: LIST
58904: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58905: LD_ADDR_VAR 0 61
58909: PUSH
58910: LD_INT 2
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: LD_INT 2
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: LIST
58944: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58945: LD_ADDR_VAR 0 62
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58986: LD_ADDR_VAR 0 63
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: LIST
59029: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59030: LD_ADDR_VAR 0 64
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: LIST
59075: ST_TO_ADDR
// end ; 2 :
59076: GO 62342
59078: LD_INT 2
59080: DOUBLE
59081: EQUAL
59082: IFTRUE 59086
59084: GO 62341
59086: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59087: LD_ADDR_VAR 0 29
59091: PUSH
59092: LD_INT 4
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 4
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 5
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 5
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 4
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 3
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 3
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 5
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 4
59207: PUSH
59208: LD_INT 3
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 4
59217: PUSH
59218: LD_INT 4
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 3
59227: PUSH
59228: LD_INT 4
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: LD_INT 3
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 4
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 2
59267: PUSH
59268: LD_INT 4
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 4
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 4
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 5
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: LD_INT 5
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 4
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: LD_INT 5
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: LD_INT 3
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 3
59370: NEG
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: NEG
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 2
59393: NEG
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 3
59415: NEG
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 4
59426: NEG
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 4
59437: NEG
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 4
59449: NEG
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 4
59472: NEG
59473: PUSH
59474: LD_INT 4
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 4
59484: NEG
59485: PUSH
59486: LD_INT 5
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 3
59496: NEG
59497: PUSH
59498: LD_INT 4
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: NEG
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 4
59520: NEG
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 5
59532: NEG
59533: PUSH
59534: LD_INT 4
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 5
59544: NEG
59545: PUSH
59546: LD_INT 5
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: LD_INT 5
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 5
59568: NEG
59569: PUSH
59570: LD_INT 3
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59625: LD_ADDR_VAR 0 30
59629: PUSH
59630: LD_INT 4
59632: PUSH
59633: LD_INT 4
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 4
59642: PUSH
59643: LD_INT 3
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 5
59652: PUSH
59653: LD_INT 4
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 5
59662: PUSH
59663: LD_INT 5
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 4
59672: PUSH
59673: LD_INT 5
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 3
59682: PUSH
59683: LD_INT 4
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 3
59692: PUSH
59693: LD_INT 3
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 5
59702: PUSH
59703: LD_INT 3
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: LD_INT 5
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: LD_INT 3
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: LD_INT 2
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 3
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 4
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 4
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: LD_INT 4
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: NEG
59805: PUSH
59806: LD_INT 2
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 4
59815: NEG
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 4
59826: NEG
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 3
59838: NEG
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 3
59849: NEG
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 4
59860: NEG
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 5
59871: NEG
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 5
59882: NEG
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 5
59894: NEG
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: LD_INT 2
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 3
59917: NEG
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 3
59929: NEG
59930: PUSH
59931: LD_INT 4
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 2
59941: NEG
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: LD_INT 2
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 3
59965: NEG
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 4
59977: NEG
59978: PUSH
59979: LD_INT 3
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 4
59989: NEG
59990: PUSH
59991: LD_INT 4
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: LD_INT 4
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 4
60013: NEG
60014: PUSH
60015: LD_INT 2
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 4
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: LD_INT 5
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: LD_INT 4
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: LD_INT 3
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: LD_INT 3
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: LD_INT 4
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: LD_INT 5
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: LD_INT 3
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: NEG
60116: PUSH
60117: LD_INT 5
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60172: LD_ADDR_VAR 0 31
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 4
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: LD_INT 3
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 4
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: LD_INT 5
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: LD_INT 5
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: LD_INT 4
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: LD_INT 5
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: NEG
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 3
60283: NEG
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 2
60295: NEG
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 2
60306: NEG
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 3
60317: NEG
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 4
60328: NEG
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 4
60339: NEG
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 4
60351: NEG
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 4
60374: NEG
60375: PUSH
60376: LD_INT 4
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 4
60386: NEG
60387: PUSH
60388: LD_INT 5
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 3
60398: NEG
60399: PUSH
60400: LD_INT 4
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 4
60422: NEG
60423: PUSH
60424: LD_INT 3
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 5
60434: NEG
60435: PUSH
60436: LD_INT 4
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 5
60446: NEG
60447: PUSH
60448: LD_INT 5
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 3
60458: NEG
60459: PUSH
60460: LD_INT 5
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 5
60470: NEG
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 4
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: LD_INT 3
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: LD_INT 2
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 3
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 4
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: LD_INT 2
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: LD_INT 4
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 5
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 5
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 4
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 3
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 3
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 5
60667: PUSH
60668: LD_INT 2
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60722: LD_ADDR_VAR 0 32
60726: PUSH
60727: LD_INT 4
60729: NEG
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 4
60740: NEG
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 3
60752: NEG
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: NEG
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 4
60774: NEG
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 5
60785: NEG
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 5
60796: NEG
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 5
60808: NEG
60809: PUSH
60810: LD_INT 2
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 3
60820: NEG
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: NEG
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 3
60843: NEG
60844: PUSH
60845: LD_INT 4
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: NEG
60856: PUSH
60857: LD_INT 3
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: NEG
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: NEG
60880: PUSH
60881: LD_INT 2
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 4
60891: NEG
60892: PUSH
60893: LD_INT 3
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 4
60903: NEG
60904: PUSH
60905: LD_INT 4
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 2
60915: NEG
60916: PUSH
60917: LD_INT 4
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 4
60927: NEG
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 4
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: LD_INT 5
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: LD_INT 4
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 3
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 3
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 4
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: LD_INT 5
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: LD_INT 3
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: LD_INT 5
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 3
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 3
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 4
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 4
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 3
61082: PUSH
61083: LD_INT 1
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 2
61102: PUSH
61103: LD_INT 1
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: LD_INT 2
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 4
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 4
61134: PUSH
61135: LD_INT 4
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 4
61144: PUSH
61145: LD_INT 3
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 5
61154: PUSH
61155: LD_INT 4
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 5
61164: PUSH
61165: LD_INT 5
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 4
61174: PUSH
61175: LD_INT 5
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: LD_INT 4
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 3
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 5
61204: PUSH
61205: LD_INT 3
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 3
61214: PUSH
61215: LD_INT 5
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61269: LD_ADDR_VAR 0 33
61273: PUSH
61274: LD_INT 4
61276: NEG
61277: PUSH
61278: LD_INT 4
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 4
61288: NEG
61289: PUSH
61290: LD_INT 5
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 3
61300: NEG
61301: PUSH
61302: LD_INT 4
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 3
61312: NEG
61313: PUSH
61314: LD_INT 3
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 4
61324: NEG
61325: PUSH
61326: LD_INT 3
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 5
61336: NEG
61337: PUSH
61338: LD_INT 4
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 5
61348: NEG
61349: PUSH
61350: LD_INT 5
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 3
61360: NEG
61361: PUSH
61362: LD_INT 5
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 5
61372: NEG
61373: PUSH
61374: LD_INT 3
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 3
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 4
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: LD_INT 3
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: LD_INT 2
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 2
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: LD_INT 3
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: LD_INT 4
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 2
61463: PUSH
61464: LD_INT 2
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: LD_INT 4
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 4
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 5
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 5
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 4
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 3
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 3
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 3
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 5
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 3
61579: PUSH
61580: LD_INT 3
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 3
61589: PUSH
61590: LD_INT 2
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 4
61599: PUSH
61600: LD_INT 3
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 4
61609: PUSH
61610: LD_INT 4
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 3
61619: PUSH
61620: LD_INT 4
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: PUSH
61640: LD_INT 2
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 4
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: LD_INT 4
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: LD_INT 4
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: LD_INT 3
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: LD_INT 4
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: LD_INT 5
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 5
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: NEG
61720: PUSH
61721: LD_INT 4
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: LD_INT 3
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 2
61741: PUSH
61742: LD_INT 5
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: LD_INT 3
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61807: LD_ADDR_VAR 0 34
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 4
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: LD_INT 5
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: LD_INT 4
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: LD_INT 3
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: LD_INT 3
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: NEG
61870: PUSH
61871: LD_INT 4
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: LD_INT 5
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 2
61893: PUSH
61894: LD_INT 3
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PUSH
61906: LD_INT 5
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 3
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 4
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 4
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 3
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: LD_INT 2
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 4
61999: PUSH
62000: LD_INT 2
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 4
62009: PUSH
62010: LD_INT 4
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 4
62019: PUSH
62020: LD_INT 3
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 5
62029: PUSH
62030: LD_INT 4
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 5
62039: PUSH
62040: LD_INT 5
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 4
62049: PUSH
62050: LD_INT 5
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: LD_INT 4
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 3
62069: PUSH
62070: LD_INT 3
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 5
62079: PUSH
62080: LD_INT 3
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 3
62089: PUSH
62090: LD_INT 5
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 3
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: LD_INT 3
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 1
62129: PUSH
62130: LD_INT 4
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: LD_INT 4
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: LD_INT 3
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: LD_INT 4
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: NEG
62182: PUSH
62183: LD_INT 2
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 4
62192: NEG
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 4
62203: NEG
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 3
62215: NEG
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 3
62226: NEG
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 4
62237: NEG
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 5
62248: NEG
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 5
62259: NEG
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 5
62271: NEG
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 3
62283: NEG
62284: PUSH
62285: LD_INT 2
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: ST_TO_ADDR
// end ; end ;
62339: GO 62342
62341: POP
// case btype of b_depot , b_warehouse :
62342: LD_VAR 0 1
62346: PUSH
62347: LD_INT 0
62349: DOUBLE
62350: EQUAL
62351: IFTRUE 62361
62353: LD_INT 1
62355: DOUBLE
62356: EQUAL
62357: IFTRUE 62361
62359: GO 62562
62361: POP
// case nation of nation_american :
62362: LD_VAR 0 5
62366: PUSH
62367: LD_INT 1
62369: DOUBLE
62370: EQUAL
62371: IFTRUE 62375
62373: GO 62431
62375: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62376: LD_ADDR_VAR 0 9
62380: PUSH
62381: LD_VAR 0 11
62385: PUSH
62386: LD_VAR 0 12
62390: PUSH
62391: LD_VAR 0 13
62395: PUSH
62396: LD_VAR 0 14
62400: PUSH
62401: LD_VAR 0 15
62405: PUSH
62406: LD_VAR 0 16
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: PUSH
62419: LD_VAR 0 4
62423: PUSH
62424: LD_INT 1
62426: PLUS
62427: ARRAY
62428: ST_TO_ADDR
62429: GO 62560
62431: LD_INT 2
62433: DOUBLE
62434: EQUAL
62435: IFTRUE 62439
62437: GO 62495
62439: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62440: LD_ADDR_VAR 0 9
62444: PUSH
62445: LD_VAR 0 17
62449: PUSH
62450: LD_VAR 0 18
62454: PUSH
62455: LD_VAR 0 19
62459: PUSH
62460: LD_VAR 0 20
62464: PUSH
62465: LD_VAR 0 21
62469: PUSH
62470: LD_VAR 0 22
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: PUSH
62483: LD_VAR 0 4
62487: PUSH
62488: LD_INT 1
62490: PLUS
62491: ARRAY
62492: ST_TO_ADDR
62493: GO 62560
62495: LD_INT 3
62497: DOUBLE
62498: EQUAL
62499: IFTRUE 62503
62501: GO 62559
62503: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62504: LD_ADDR_VAR 0 9
62508: PUSH
62509: LD_VAR 0 23
62513: PUSH
62514: LD_VAR 0 24
62518: PUSH
62519: LD_VAR 0 25
62523: PUSH
62524: LD_VAR 0 26
62528: PUSH
62529: LD_VAR 0 27
62533: PUSH
62534: LD_VAR 0 28
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: PUSH
62547: LD_VAR 0 4
62551: PUSH
62552: LD_INT 1
62554: PLUS
62555: ARRAY
62556: ST_TO_ADDR
62557: GO 62560
62559: POP
62560: GO 63115
62562: LD_INT 2
62564: DOUBLE
62565: EQUAL
62566: IFTRUE 62576
62568: LD_INT 3
62570: DOUBLE
62571: EQUAL
62572: IFTRUE 62576
62574: GO 62632
62576: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62577: LD_ADDR_VAR 0 9
62581: PUSH
62582: LD_VAR 0 29
62586: PUSH
62587: LD_VAR 0 30
62591: PUSH
62592: LD_VAR 0 31
62596: PUSH
62597: LD_VAR 0 32
62601: PUSH
62602: LD_VAR 0 33
62606: PUSH
62607: LD_VAR 0 34
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: PUSH
62620: LD_VAR 0 4
62624: PUSH
62625: LD_INT 1
62627: PLUS
62628: ARRAY
62629: ST_TO_ADDR
62630: GO 63115
62632: LD_INT 16
62634: DOUBLE
62635: EQUAL
62636: IFTRUE 62694
62638: LD_INT 17
62640: DOUBLE
62641: EQUAL
62642: IFTRUE 62694
62644: LD_INT 18
62646: DOUBLE
62647: EQUAL
62648: IFTRUE 62694
62650: LD_INT 19
62652: DOUBLE
62653: EQUAL
62654: IFTRUE 62694
62656: LD_INT 22
62658: DOUBLE
62659: EQUAL
62660: IFTRUE 62694
62662: LD_INT 20
62664: DOUBLE
62665: EQUAL
62666: IFTRUE 62694
62668: LD_INT 21
62670: DOUBLE
62671: EQUAL
62672: IFTRUE 62694
62674: LD_INT 23
62676: DOUBLE
62677: EQUAL
62678: IFTRUE 62694
62680: LD_INT 24
62682: DOUBLE
62683: EQUAL
62684: IFTRUE 62694
62686: LD_INT 25
62688: DOUBLE
62689: EQUAL
62690: IFTRUE 62694
62692: GO 62750
62694: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62695: LD_ADDR_VAR 0 9
62699: PUSH
62700: LD_VAR 0 35
62704: PUSH
62705: LD_VAR 0 36
62709: PUSH
62710: LD_VAR 0 37
62714: PUSH
62715: LD_VAR 0 38
62719: PUSH
62720: LD_VAR 0 39
62724: PUSH
62725: LD_VAR 0 40
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: PUSH
62738: LD_VAR 0 4
62742: PUSH
62743: LD_INT 1
62745: PLUS
62746: ARRAY
62747: ST_TO_ADDR
62748: GO 63115
62750: LD_INT 6
62752: DOUBLE
62753: EQUAL
62754: IFTRUE 62806
62756: LD_INT 7
62758: DOUBLE
62759: EQUAL
62760: IFTRUE 62806
62762: LD_INT 8
62764: DOUBLE
62765: EQUAL
62766: IFTRUE 62806
62768: LD_INT 13
62770: DOUBLE
62771: EQUAL
62772: IFTRUE 62806
62774: LD_INT 12
62776: DOUBLE
62777: EQUAL
62778: IFTRUE 62806
62780: LD_INT 15
62782: DOUBLE
62783: EQUAL
62784: IFTRUE 62806
62786: LD_INT 11
62788: DOUBLE
62789: EQUAL
62790: IFTRUE 62806
62792: LD_INT 14
62794: DOUBLE
62795: EQUAL
62796: IFTRUE 62806
62798: LD_INT 10
62800: DOUBLE
62801: EQUAL
62802: IFTRUE 62806
62804: GO 62862
62806: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62807: LD_ADDR_VAR 0 9
62811: PUSH
62812: LD_VAR 0 41
62816: PUSH
62817: LD_VAR 0 42
62821: PUSH
62822: LD_VAR 0 43
62826: PUSH
62827: LD_VAR 0 44
62831: PUSH
62832: LD_VAR 0 45
62836: PUSH
62837: LD_VAR 0 46
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: PUSH
62850: LD_VAR 0 4
62854: PUSH
62855: LD_INT 1
62857: PLUS
62858: ARRAY
62859: ST_TO_ADDR
62860: GO 63115
62862: LD_INT 36
62864: DOUBLE
62865: EQUAL
62866: IFTRUE 62870
62868: GO 62926
62870: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62871: LD_ADDR_VAR 0 9
62875: PUSH
62876: LD_VAR 0 47
62880: PUSH
62881: LD_VAR 0 48
62885: PUSH
62886: LD_VAR 0 49
62890: PUSH
62891: LD_VAR 0 50
62895: PUSH
62896: LD_VAR 0 51
62900: PUSH
62901: LD_VAR 0 52
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: PUSH
62914: LD_VAR 0 4
62918: PUSH
62919: LD_INT 1
62921: PLUS
62922: ARRAY
62923: ST_TO_ADDR
62924: GO 63115
62926: LD_INT 4
62928: DOUBLE
62929: EQUAL
62930: IFTRUE 62952
62932: LD_INT 5
62934: DOUBLE
62935: EQUAL
62936: IFTRUE 62952
62938: LD_INT 34
62940: DOUBLE
62941: EQUAL
62942: IFTRUE 62952
62944: LD_INT 37
62946: DOUBLE
62947: EQUAL
62948: IFTRUE 62952
62950: GO 63008
62952: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62953: LD_ADDR_VAR 0 9
62957: PUSH
62958: LD_VAR 0 53
62962: PUSH
62963: LD_VAR 0 54
62967: PUSH
62968: LD_VAR 0 55
62972: PUSH
62973: LD_VAR 0 56
62977: PUSH
62978: LD_VAR 0 57
62982: PUSH
62983: LD_VAR 0 58
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: PUSH
62996: LD_VAR 0 4
63000: PUSH
63001: LD_INT 1
63003: PLUS
63004: ARRAY
63005: ST_TO_ADDR
63006: GO 63115
63008: LD_INT 31
63010: DOUBLE
63011: EQUAL
63012: IFTRUE 63058
63014: LD_INT 32
63016: DOUBLE
63017: EQUAL
63018: IFTRUE 63058
63020: LD_INT 33
63022: DOUBLE
63023: EQUAL
63024: IFTRUE 63058
63026: LD_INT 27
63028: DOUBLE
63029: EQUAL
63030: IFTRUE 63058
63032: LD_INT 26
63034: DOUBLE
63035: EQUAL
63036: IFTRUE 63058
63038: LD_INT 28
63040: DOUBLE
63041: EQUAL
63042: IFTRUE 63058
63044: LD_INT 29
63046: DOUBLE
63047: EQUAL
63048: IFTRUE 63058
63050: LD_INT 30
63052: DOUBLE
63053: EQUAL
63054: IFTRUE 63058
63056: GO 63114
63058: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63059: LD_ADDR_VAR 0 9
63063: PUSH
63064: LD_VAR 0 59
63068: PUSH
63069: LD_VAR 0 60
63073: PUSH
63074: LD_VAR 0 61
63078: PUSH
63079: LD_VAR 0 62
63083: PUSH
63084: LD_VAR 0 63
63088: PUSH
63089: LD_VAR 0 64
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: PUSH
63102: LD_VAR 0 4
63106: PUSH
63107: LD_INT 1
63109: PLUS
63110: ARRAY
63111: ST_TO_ADDR
63112: GO 63115
63114: POP
// temp_list2 = [ ] ;
63115: LD_ADDR_VAR 0 10
63119: PUSH
63120: EMPTY
63121: ST_TO_ADDR
// for i in temp_list do
63122: LD_ADDR_VAR 0 8
63126: PUSH
63127: LD_VAR 0 9
63131: PUSH
63132: FOR_IN
63133: IFFALSE 63185
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63135: LD_ADDR_VAR 0 10
63139: PUSH
63140: LD_VAR 0 10
63144: PUSH
63145: LD_VAR 0 8
63149: PUSH
63150: LD_INT 1
63152: ARRAY
63153: PUSH
63154: LD_VAR 0 2
63158: PLUS
63159: PUSH
63160: LD_VAR 0 8
63164: PUSH
63165: LD_INT 2
63167: ARRAY
63168: PUSH
63169: LD_VAR 0 3
63173: PLUS
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: EMPTY
63180: LIST
63181: ADD
63182: ST_TO_ADDR
63183: GO 63132
63185: POP
63186: POP
// result = temp_list2 ;
63187: LD_ADDR_VAR 0 7
63191: PUSH
63192: LD_VAR 0 10
63196: ST_TO_ADDR
// end ;
63197: LD_VAR 0 7
63201: RET
// export function EnemyInRange ( unit , dist ) ; begin
63202: LD_INT 0
63204: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63205: LD_ADDR_VAR 0 3
63209: PUSH
63210: LD_VAR 0 1
63214: PPUSH
63215: CALL_OW 255
63219: PPUSH
63220: LD_VAR 0 1
63224: PPUSH
63225: CALL_OW 250
63229: PPUSH
63230: LD_VAR 0 1
63234: PPUSH
63235: CALL_OW 251
63239: PPUSH
63240: LD_VAR 0 2
63244: PPUSH
63245: CALL 36459 0 4
63249: PUSH
63250: LD_INT 4
63252: ARRAY
63253: ST_TO_ADDR
// end ;
63254: LD_VAR 0 3
63258: RET
// export function PlayerSeeMe ( unit ) ; begin
63259: LD_INT 0
63261: PPUSH
// result := See ( your_side , unit ) ;
63262: LD_ADDR_VAR 0 2
63266: PUSH
63267: LD_OWVAR 2
63271: PPUSH
63272: LD_VAR 0 1
63276: PPUSH
63277: CALL_OW 292
63281: ST_TO_ADDR
// end ;
63282: LD_VAR 0 2
63286: RET
// export function ReverseDir ( unit ) ; begin
63287: LD_INT 0
63289: PPUSH
// if not unit then
63290: LD_VAR 0 1
63294: NOT
63295: IFFALSE 63299
// exit ;
63297: GO 63322
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63299: LD_ADDR_VAR 0 2
63303: PUSH
63304: LD_VAR 0 1
63308: PPUSH
63309: CALL_OW 254
63313: PUSH
63314: LD_INT 3
63316: PLUS
63317: PUSH
63318: LD_INT 6
63320: MOD
63321: ST_TO_ADDR
// end ;
63322: LD_VAR 0 2
63326: RET
// export function ReverseArray ( array ) ; var i ; begin
63327: LD_INT 0
63329: PPUSH
63330: PPUSH
// if not array then
63331: LD_VAR 0 1
63335: NOT
63336: IFFALSE 63340
// exit ;
63338: GO 63395
// result := [ ] ;
63340: LD_ADDR_VAR 0 2
63344: PUSH
63345: EMPTY
63346: ST_TO_ADDR
// for i := array downto 1 do
63347: LD_ADDR_VAR 0 3
63351: PUSH
63352: DOUBLE
63353: LD_VAR 0 1
63357: INC
63358: ST_TO_ADDR
63359: LD_INT 1
63361: PUSH
63362: FOR_DOWNTO
63363: IFFALSE 63393
// result := Join ( result , array [ i ] ) ;
63365: LD_ADDR_VAR 0 2
63369: PUSH
63370: LD_VAR 0 2
63374: PPUSH
63375: LD_VAR 0 1
63379: PUSH
63380: LD_VAR 0 3
63384: ARRAY
63385: PPUSH
63386: CALL 68237 0 2
63390: ST_TO_ADDR
63391: GO 63362
63393: POP
63394: POP
// end ;
63395: LD_VAR 0 2
63399: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63400: LD_INT 0
63402: PPUSH
63403: PPUSH
63404: PPUSH
63405: PPUSH
63406: PPUSH
63407: PPUSH
// if not unit or not hexes then
63408: LD_VAR 0 1
63412: NOT
63413: IFTRUE 63422
63415: PUSH
63416: LD_VAR 0 2
63420: NOT
63421: OR
63422: IFFALSE 63426
// exit ;
63424: GO 63549
// dist := 9999 ;
63426: LD_ADDR_VAR 0 5
63430: PUSH
63431: LD_INT 9999
63433: ST_TO_ADDR
// for i = 1 to hexes do
63434: LD_ADDR_VAR 0 4
63438: PUSH
63439: DOUBLE
63440: LD_INT 1
63442: DEC
63443: ST_TO_ADDR
63444: LD_VAR 0 2
63448: PUSH
63449: FOR_TO
63450: IFFALSE 63537
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63452: LD_ADDR_VAR 0 6
63456: PUSH
63457: LD_VAR 0 1
63461: PPUSH
63462: LD_VAR 0 2
63466: PUSH
63467: LD_VAR 0 4
63471: ARRAY
63472: PUSH
63473: LD_INT 1
63475: ARRAY
63476: PPUSH
63477: LD_VAR 0 2
63481: PUSH
63482: LD_VAR 0 4
63486: ARRAY
63487: PUSH
63488: LD_INT 2
63490: ARRAY
63491: PPUSH
63492: CALL_OW 297
63496: ST_TO_ADDR
// if tdist < dist then
63497: LD_VAR 0 6
63501: PUSH
63502: LD_VAR 0 5
63506: LESS
63507: IFFALSE 63535
// begin hex := hexes [ i ] ;
63509: LD_ADDR_VAR 0 8
63513: PUSH
63514: LD_VAR 0 2
63518: PUSH
63519: LD_VAR 0 4
63523: ARRAY
63524: ST_TO_ADDR
// dist := tdist ;
63525: LD_ADDR_VAR 0 5
63529: PUSH
63530: LD_VAR 0 6
63534: ST_TO_ADDR
// end ; end ;
63535: GO 63449
63537: POP
63538: POP
// result := hex ;
63539: LD_ADDR_VAR 0 3
63543: PUSH
63544: LD_VAR 0 8
63548: ST_TO_ADDR
// end ;
63549: LD_VAR 0 3
63553: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63554: LD_INT 0
63556: PPUSH
63557: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63558: LD_VAR 0 1
63562: NOT
63563: IFTRUE 63602
63565: PUSH
63566: LD_VAR 0 1
63570: PUSH
63571: LD_INT 21
63573: PUSH
63574: LD_INT 2
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 23
63583: PUSH
63584: LD_INT 2
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PPUSH
63595: CALL_OW 69
63599: IN
63600: NOT
63601: OR
63602: IFFALSE 63606
// exit ;
63604: GO 63653
// for i = 1 to 3 do
63606: LD_ADDR_VAR 0 3
63610: PUSH
63611: DOUBLE
63612: LD_INT 1
63614: DEC
63615: ST_TO_ADDR
63616: LD_INT 3
63618: PUSH
63619: FOR_TO
63620: IFFALSE 63651
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63622: LD_VAR 0 1
63626: PPUSH
63627: CALL_OW 250
63631: PPUSH
63632: LD_VAR 0 1
63636: PPUSH
63637: CALL_OW 251
63641: PPUSH
63642: LD_INT 1
63644: PPUSH
63645: CALL_OW 453
63649: GO 63619
63651: POP
63652: POP
// end ;
63653: LD_VAR 0 2
63657: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63658: LD_INT 0
63660: PPUSH
63661: PPUSH
63662: PPUSH
63663: PPUSH
63664: PPUSH
63665: PPUSH
// if not unit or not enemy_unit then
63666: LD_VAR 0 1
63670: NOT
63671: IFTRUE 63680
63673: PUSH
63674: LD_VAR 0 2
63678: NOT
63679: OR
63680: IFFALSE 63684
// exit ;
63682: GO 64155
// if GetLives ( i ) < 250 then
63684: LD_VAR 0 4
63688: PPUSH
63689: CALL_OW 256
63693: PUSH
63694: LD_INT 250
63696: LESS
63697: IFFALSE 63710
// begin ComAutodestruct ( i ) ;
63699: LD_VAR 0 4
63703: PPUSH
63704: CALL 63554 0 1
// exit ;
63708: GO 64155
// end ; x := GetX ( enemy_unit ) ;
63710: LD_ADDR_VAR 0 7
63714: PUSH
63715: LD_VAR 0 2
63719: PPUSH
63720: CALL_OW 250
63724: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63725: LD_ADDR_VAR 0 8
63729: PUSH
63730: LD_VAR 0 2
63734: PPUSH
63735: CALL_OW 251
63739: ST_TO_ADDR
// if not x or not y then
63740: LD_VAR 0 7
63744: NOT
63745: IFTRUE 63754
63747: PUSH
63748: LD_VAR 0 8
63752: NOT
63753: OR
63754: IFFALSE 63758
// exit ;
63756: GO 64155
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63758: LD_ADDR_VAR 0 6
63762: PUSH
63763: LD_VAR 0 7
63767: PPUSH
63768: LD_INT 0
63770: PPUSH
63771: LD_INT 4
63773: PPUSH
63774: CALL_OW 272
63778: PUSH
63779: LD_VAR 0 8
63783: PPUSH
63784: LD_INT 0
63786: PPUSH
63787: LD_INT 4
63789: PPUSH
63790: CALL_OW 273
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_VAR 0 7
63803: PPUSH
63804: LD_INT 1
63806: PPUSH
63807: LD_INT 4
63809: PPUSH
63810: CALL_OW 272
63814: PUSH
63815: LD_VAR 0 8
63819: PPUSH
63820: LD_INT 1
63822: PPUSH
63823: LD_INT 4
63825: PPUSH
63826: CALL_OW 273
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_VAR 0 7
63839: PPUSH
63840: LD_INT 2
63842: PPUSH
63843: LD_INT 4
63845: PPUSH
63846: CALL_OW 272
63850: PUSH
63851: LD_VAR 0 8
63855: PPUSH
63856: LD_INT 2
63858: PPUSH
63859: LD_INT 4
63861: PPUSH
63862: CALL_OW 273
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_VAR 0 7
63875: PPUSH
63876: LD_INT 3
63878: PPUSH
63879: LD_INT 4
63881: PPUSH
63882: CALL_OW 272
63886: PUSH
63887: LD_VAR 0 8
63891: PPUSH
63892: LD_INT 3
63894: PPUSH
63895: LD_INT 4
63897: PPUSH
63898: CALL_OW 273
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_VAR 0 7
63911: PPUSH
63912: LD_INT 4
63914: PPUSH
63915: LD_INT 4
63917: PPUSH
63918: CALL_OW 272
63922: PUSH
63923: LD_VAR 0 8
63927: PPUSH
63928: LD_INT 4
63930: PPUSH
63931: LD_INT 4
63933: PPUSH
63934: CALL_OW 273
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_VAR 0 7
63947: PPUSH
63948: LD_INT 5
63950: PPUSH
63951: LD_INT 4
63953: PPUSH
63954: CALL_OW 272
63958: PUSH
63959: LD_VAR 0 8
63963: PPUSH
63964: LD_INT 5
63966: PPUSH
63967: LD_INT 4
63969: PPUSH
63970: CALL_OW 273
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: ST_TO_ADDR
// for i = tmp downto 1 do
63987: LD_ADDR_VAR 0 4
63991: PUSH
63992: DOUBLE
63993: LD_VAR 0 6
63997: INC
63998: ST_TO_ADDR
63999: LD_INT 1
64001: PUSH
64002: FOR_DOWNTO
64003: IFFALSE 64106
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64005: LD_VAR 0 6
64009: PUSH
64010: LD_VAR 0 4
64014: ARRAY
64015: PUSH
64016: LD_INT 1
64018: ARRAY
64019: PPUSH
64020: LD_VAR 0 6
64024: PUSH
64025: LD_VAR 0 4
64029: ARRAY
64030: PUSH
64031: LD_INT 2
64033: ARRAY
64034: PPUSH
64035: CALL_OW 488
64039: NOT
64040: IFTRUE 64082
64042: PUSH
64043: LD_VAR 0 6
64047: PUSH
64048: LD_VAR 0 4
64052: ARRAY
64053: PUSH
64054: LD_INT 1
64056: ARRAY
64057: PPUSH
64058: LD_VAR 0 6
64062: PUSH
64063: LD_VAR 0 4
64067: ARRAY
64068: PUSH
64069: LD_INT 2
64071: ARRAY
64072: PPUSH
64073: CALL_OW 428
64077: PUSH
64078: LD_INT 0
64080: NONEQUAL
64081: OR
64082: IFFALSE 64104
// tmp := Delete ( tmp , i ) ;
64084: LD_ADDR_VAR 0 6
64088: PUSH
64089: LD_VAR 0 6
64093: PPUSH
64094: LD_VAR 0 4
64098: PPUSH
64099: CALL_OW 3
64103: ST_TO_ADDR
64104: GO 64002
64106: POP
64107: POP
// j := GetClosestHex ( unit , tmp ) ;
64108: LD_ADDR_VAR 0 5
64112: PUSH
64113: LD_VAR 0 1
64117: PPUSH
64118: LD_VAR 0 6
64122: PPUSH
64123: CALL 63400 0 2
64127: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64128: LD_VAR 0 1
64132: PPUSH
64133: LD_VAR 0 5
64137: PUSH
64138: LD_INT 1
64140: ARRAY
64141: PPUSH
64142: LD_VAR 0 5
64146: PUSH
64147: LD_INT 2
64149: ARRAY
64150: PPUSH
64151: CALL_OW 111
// end ;
64155: LD_VAR 0 3
64159: RET
// export function PrepareApemanSoldier ( ) ; begin
64160: LD_INT 0
64162: PPUSH
// uc_nation := 0 ;
64163: LD_ADDR_OWVAR 21
64167: PUSH
64168: LD_INT 0
64170: ST_TO_ADDR
// hc_sex := sex_male ;
64171: LD_ADDR_OWVAR 27
64175: PUSH
64176: LD_INT 1
64178: ST_TO_ADDR
// hc_name :=  ;
64179: LD_ADDR_OWVAR 26
64183: PUSH
64184: LD_STRING 
64186: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64187: LD_ADDR_OWVAR 28
64191: PUSH
64192: LD_INT 15
64194: ST_TO_ADDR
// hc_gallery :=  ;
64195: LD_ADDR_OWVAR 33
64199: PUSH
64200: LD_STRING 
64202: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64203: LD_ADDR_OWVAR 31
64207: PUSH
64208: LD_INT 0
64210: PPUSH
64211: LD_INT 3
64213: PPUSH
64214: CALL_OW 12
64218: PUSH
64219: LD_INT 0
64221: PPUSH
64222: LD_INT 3
64224: PPUSH
64225: CALL_OW 12
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: LD_INT 0
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64242: LD_ADDR_OWVAR 29
64246: PUSH
64247: LD_INT 12
64249: PUSH
64250: LD_INT 12
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: ST_TO_ADDR
// end ;
64257: LD_VAR 0 1
64261: RET
// export function PrepareApemanEngineer ( ) ; begin
64262: LD_INT 0
64264: PPUSH
// uc_nation := 0 ;
64265: LD_ADDR_OWVAR 21
64269: PUSH
64270: LD_INT 0
64272: ST_TO_ADDR
// hc_sex := sex_male ;
64273: LD_ADDR_OWVAR 27
64277: PUSH
64278: LD_INT 1
64280: ST_TO_ADDR
// hc_name :=  ;
64281: LD_ADDR_OWVAR 26
64285: PUSH
64286: LD_STRING 
64288: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64289: LD_ADDR_OWVAR 28
64293: PUSH
64294: LD_INT 16
64296: ST_TO_ADDR
// hc_gallery :=  ;
64297: LD_ADDR_OWVAR 33
64301: PUSH
64302: LD_STRING 
64304: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64305: LD_ADDR_OWVAR 31
64309: PUSH
64310: LD_INT 0
64312: PPUSH
64313: LD_INT 3
64315: PPUSH
64316: CALL_OW 12
64320: PUSH
64321: LD_INT 0
64323: PPUSH
64324: LD_INT 3
64326: PPUSH
64327: CALL_OW 12
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64344: LD_ADDR_OWVAR 29
64348: PUSH
64349: LD_INT 12
64351: PUSH
64352: LD_INT 12
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: ST_TO_ADDR
// end ;
64359: LD_VAR 0 1
64363: RET
// export function PrepareApeman ( agressivity ) ; begin
64364: LD_INT 0
64366: PPUSH
// uc_side := 0 ;
64367: LD_ADDR_OWVAR 20
64371: PUSH
64372: LD_INT 0
64374: ST_TO_ADDR
// uc_nation := 0 ;
64375: LD_ADDR_OWVAR 21
64379: PUSH
64380: LD_INT 0
64382: ST_TO_ADDR
// hc_sex := sex_male ;
64383: LD_ADDR_OWVAR 27
64387: PUSH
64388: LD_INT 1
64390: ST_TO_ADDR
// hc_class := class_apeman ;
64391: LD_ADDR_OWVAR 28
64395: PUSH
64396: LD_INT 12
64398: ST_TO_ADDR
// hc_gallery :=  ;
64399: LD_ADDR_OWVAR 33
64403: PUSH
64404: LD_STRING 
64406: ST_TO_ADDR
// hc_name :=  ;
64407: LD_ADDR_OWVAR 26
64411: PUSH
64412: LD_STRING 
64414: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64415: LD_ADDR_OWVAR 29
64419: PUSH
64420: LD_INT 12
64422: PUSH
64423: LD_INT 12
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: ST_TO_ADDR
// if agressivity = 0 then
64430: LD_VAR 0 1
64434: PUSH
64435: LD_INT 0
64437: EQUAL
64438: IFFALSE 64450
// hc_agressivity := 0 else
64440: LD_ADDR_OWVAR 35
64444: PUSH
64445: LD_INT 0
64447: ST_TO_ADDR
64448: GO 64471
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64450: LD_ADDR_OWVAR 35
64454: PUSH
64455: LD_VAR 0 1
64459: NEG
64460: PPUSH
64461: LD_VAR 0 1
64465: PPUSH
64466: CALL_OW 12
64470: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64471: LD_ADDR_OWVAR 31
64475: PUSH
64476: LD_INT 0
64478: PPUSH
64479: LD_INT 3
64481: PPUSH
64482: CALL_OW 12
64486: PUSH
64487: LD_INT 0
64489: PPUSH
64490: LD_INT 3
64492: PPUSH
64493: CALL_OW 12
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: ST_TO_ADDR
// end ;
64510: LD_VAR 0 2
64514: RET
// export function PrepareTiger ( agressivity ) ; begin
64515: LD_INT 0
64517: PPUSH
// uc_side := 0 ;
64518: LD_ADDR_OWVAR 20
64522: PUSH
64523: LD_INT 0
64525: ST_TO_ADDR
// uc_nation := 0 ;
64526: LD_ADDR_OWVAR 21
64530: PUSH
64531: LD_INT 0
64533: ST_TO_ADDR
// InitHc ;
64534: CALL_OW 19
// hc_class := class_tiger ;
64538: LD_ADDR_OWVAR 28
64542: PUSH
64543: LD_INT 14
64545: ST_TO_ADDR
// hc_gallery :=  ;
64546: LD_ADDR_OWVAR 33
64550: PUSH
64551: LD_STRING 
64553: ST_TO_ADDR
// hc_name :=  ;
64554: LD_ADDR_OWVAR 26
64558: PUSH
64559: LD_STRING 
64561: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64562: LD_ADDR_OWVAR 35
64566: PUSH
64567: LD_VAR 0 1
64571: NEG
64572: PPUSH
64573: LD_VAR 0 1
64577: PPUSH
64578: CALL_OW 12
64582: ST_TO_ADDR
// end ;
64583: LD_VAR 0 2
64587: RET
// export function PrepareEnchidna ( ) ; begin
64588: LD_INT 0
64590: PPUSH
// uc_side := 0 ;
64591: LD_ADDR_OWVAR 20
64595: PUSH
64596: LD_INT 0
64598: ST_TO_ADDR
// uc_nation := 0 ;
64599: LD_ADDR_OWVAR 21
64603: PUSH
64604: LD_INT 0
64606: ST_TO_ADDR
// InitHc ;
64607: CALL_OW 19
// hc_class := class_baggie ;
64611: LD_ADDR_OWVAR 28
64615: PUSH
64616: LD_INT 13
64618: ST_TO_ADDR
// hc_gallery :=  ;
64619: LD_ADDR_OWVAR 33
64623: PUSH
64624: LD_STRING 
64626: ST_TO_ADDR
// hc_name :=  ;
64627: LD_ADDR_OWVAR 26
64631: PUSH
64632: LD_STRING 
64634: ST_TO_ADDR
// end ;
64635: LD_VAR 0 1
64639: RET
// export function PrepareFrog ( ) ; begin
64640: LD_INT 0
64642: PPUSH
// uc_side := 0 ;
64643: LD_ADDR_OWVAR 20
64647: PUSH
64648: LD_INT 0
64650: ST_TO_ADDR
// uc_nation := 0 ;
64651: LD_ADDR_OWVAR 21
64655: PUSH
64656: LD_INT 0
64658: ST_TO_ADDR
// InitHc ;
64659: CALL_OW 19
// hc_class := class_frog ;
64663: LD_ADDR_OWVAR 28
64667: PUSH
64668: LD_INT 19
64670: ST_TO_ADDR
// hc_gallery :=  ;
64671: LD_ADDR_OWVAR 33
64675: PUSH
64676: LD_STRING 
64678: ST_TO_ADDR
// hc_name :=  ;
64679: LD_ADDR_OWVAR 26
64683: PUSH
64684: LD_STRING 
64686: ST_TO_ADDR
// end ;
64687: LD_VAR 0 1
64691: RET
// export function PrepareFish ( ) ; begin
64692: LD_INT 0
64694: PPUSH
// uc_side := 0 ;
64695: LD_ADDR_OWVAR 20
64699: PUSH
64700: LD_INT 0
64702: ST_TO_ADDR
// uc_nation := 0 ;
64703: LD_ADDR_OWVAR 21
64707: PUSH
64708: LD_INT 0
64710: ST_TO_ADDR
// InitHc ;
64711: CALL_OW 19
// hc_class := class_fish ;
64715: LD_ADDR_OWVAR 28
64719: PUSH
64720: LD_INT 20
64722: ST_TO_ADDR
// hc_gallery :=  ;
64723: LD_ADDR_OWVAR 33
64727: PUSH
64728: LD_STRING 
64730: ST_TO_ADDR
// hc_name :=  ;
64731: LD_ADDR_OWVAR 26
64735: PUSH
64736: LD_STRING 
64738: ST_TO_ADDR
// end ;
64739: LD_VAR 0 1
64743: RET
// export function PrepareBird ( ) ; begin
64744: LD_INT 0
64746: PPUSH
// uc_side := 0 ;
64747: LD_ADDR_OWVAR 20
64751: PUSH
64752: LD_INT 0
64754: ST_TO_ADDR
// uc_nation := 0 ;
64755: LD_ADDR_OWVAR 21
64759: PUSH
64760: LD_INT 0
64762: ST_TO_ADDR
// InitHc ;
64763: CALL_OW 19
// hc_class := class_phororhacos ;
64767: LD_ADDR_OWVAR 28
64771: PUSH
64772: LD_INT 18
64774: ST_TO_ADDR
// hc_gallery :=  ;
64775: LD_ADDR_OWVAR 33
64779: PUSH
64780: LD_STRING 
64782: ST_TO_ADDR
// hc_name :=  ;
64783: LD_ADDR_OWVAR 26
64787: PUSH
64788: LD_STRING 
64790: ST_TO_ADDR
// end ;
64791: LD_VAR 0 1
64795: RET
// export function PrepareHorse ( ) ; begin
64796: LD_INT 0
64798: PPUSH
// uc_side := 0 ;
64799: LD_ADDR_OWVAR 20
64803: PUSH
64804: LD_INT 0
64806: ST_TO_ADDR
// uc_nation := 0 ;
64807: LD_ADDR_OWVAR 21
64811: PUSH
64812: LD_INT 0
64814: ST_TO_ADDR
// InitHc ;
64815: CALL_OW 19
// hc_class := class_horse ;
64819: LD_ADDR_OWVAR 28
64823: PUSH
64824: LD_INT 21
64826: ST_TO_ADDR
// hc_gallery :=  ;
64827: LD_ADDR_OWVAR 33
64831: PUSH
64832: LD_STRING 
64834: ST_TO_ADDR
// hc_name :=  ;
64835: LD_ADDR_OWVAR 26
64839: PUSH
64840: LD_STRING 
64842: ST_TO_ADDR
// end ;
64843: LD_VAR 0 1
64847: RET
// export function PrepareMastodont ( ) ; begin
64848: LD_INT 0
64850: PPUSH
// uc_side := 0 ;
64851: LD_ADDR_OWVAR 20
64855: PUSH
64856: LD_INT 0
64858: ST_TO_ADDR
// uc_nation := 0 ;
64859: LD_ADDR_OWVAR 21
64863: PUSH
64864: LD_INT 0
64866: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64867: LD_ADDR_OWVAR 37
64871: PUSH
64872: LD_INT 31
64874: ST_TO_ADDR
// vc_control := control_rider ;
64875: LD_ADDR_OWVAR 38
64879: PUSH
64880: LD_INT 4
64882: ST_TO_ADDR
// end ;
64883: LD_VAR 0 1
64887: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64888: LD_INT 0
64890: PPUSH
64891: PPUSH
64892: PPUSH
// uc_side = 0 ;
64893: LD_ADDR_OWVAR 20
64897: PUSH
64898: LD_INT 0
64900: ST_TO_ADDR
// uc_nation = 0 ;
64901: LD_ADDR_OWVAR 21
64905: PUSH
64906: LD_INT 0
64908: ST_TO_ADDR
// InitHc_All ( ) ;
64909: CALL_OW 584
// InitVc ;
64913: CALL_OW 20
// if mastodonts then
64917: LD_VAR 0 6
64921: IFFALSE 64988
// for i = 1 to mastodonts do
64923: LD_ADDR_VAR 0 11
64927: PUSH
64928: DOUBLE
64929: LD_INT 1
64931: DEC
64932: ST_TO_ADDR
64933: LD_VAR 0 6
64937: PUSH
64938: FOR_TO
64939: IFFALSE 64986
// begin vc_chassis := 31 ;
64941: LD_ADDR_OWVAR 37
64945: PUSH
64946: LD_INT 31
64948: ST_TO_ADDR
// vc_control := control_rider ;
64949: LD_ADDR_OWVAR 38
64953: PUSH
64954: LD_INT 4
64956: ST_TO_ADDR
// animal := CreateVehicle ;
64957: LD_ADDR_VAR 0 12
64961: PUSH
64962: CALL_OW 45
64966: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64967: LD_VAR 0 12
64971: PPUSH
64972: LD_VAR 0 8
64976: PPUSH
64977: LD_INT 0
64979: PPUSH
64980: CALL 67130 0 3
// end ;
64984: GO 64938
64986: POP
64987: POP
// if horses then
64988: LD_VAR 0 5
64992: IFFALSE 65059
// for i = 1 to horses do
64994: LD_ADDR_VAR 0 11
64998: PUSH
64999: DOUBLE
65000: LD_INT 1
65002: DEC
65003: ST_TO_ADDR
65004: LD_VAR 0 5
65008: PUSH
65009: FOR_TO
65010: IFFALSE 65057
// begin hc_class := 21 ;
65012: LD_ADDR_OWVAR 28
65016: PUSH
65017: LD_INT 21
65019: ST_TO_ADDR
// hc_gallery :=  ;
65020: LD_ADDR_OWVAR 33
65024: PUSH
65025: LD_STRING 
65027: ST_TO_ADDR
// animal := CreateHuman ;
65028: LD_ADDR_VAR 0 12
65032: PUSH
65033: CALL_OW 44
65037: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65038: LD_VAR 0 12
65042: PPUSH
65043: LD_VAR 0 8
65047: PPUSH
65048: LD_INT 0
65050: PPUSH
65051: CALL 67130 0 3
// end ;
65055: GO 65009
65057: POP
65058: POP
// if birds then
65059: LD_VAR 0 1
65063: IFFALSE 65130
// for i = 1 to birds do
65065: LD_ADDR_VAR 0 11
65069: PUSH
65070: DOUBLE
65071: LD_INT 1
65073: DEC
65074: ST_TO_ADDR
65075: LD_VAR 0 1
65079: PUSH
65080: FOR_TO
65081: IFFALSE 65128
// begin hc_class := 18 ;
65083: LD_ADDR_OWVAR 28
65087: PUSH
65088: LD_INT 18
65090: ST_TO_ADDR
// hc_gallery =  ;
65091: LD_ADDR_OWVAR 33
65095: PUSH
65096: LD_STRING 
65098: ST_TO_ADDR
// animal := CreateHuman ;
65099: LD_ADDR_VAR 0 12
65103: PUSH
65104: CALL_OW 44
65108: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65109: LD_VAR 0 12
65113: PPUSH
65114: LD_VAR 0 8
65118: PPUSH
65119: LD_INT 0
65121: PPUSH
65122: CALL 67130 0 3
// end ;
65126: GO 65080
65128: POP
65129: POP
// if tigers then
65130: LD_VAR 0 2
65134: IFFALSE 65218
// for i = 1 to tigers do
65136: LD_ADDR_VAR 0 11
65140: PUSH
65141: DOUBLE
65142: LD_INT 1
65144: DEC
65145: ST_TO_ADDR
65146: LD_VAR 0 2
65150: PUSH
65151: FOR_TO
65152: IFFALSE 65216
// begin hc_class = class_tiger ;
65154: LD_ADDR_OWVAR 28
65158: PUSH
65159: LD_INT 14
65161: ST_TO_ADDR
// hc_gallery =  ;
65162: LD_ADDR_OWVAR 33
65166: PUSH
65167: LD_STRING 
65169: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65170: LD_ADDR_OWVAR 35
65174: PUSH
65175: LD_INT 7
65177: NEG
65178: PPUSH
65179: LD_INT 7
65181: PPUSH
65182: CALL_OW 12
65186: ST_TO_ADDR
// animal := CreateHuman ;
65187: LD_ADDR_VAR 0 12
65191: PUSH
65192: CALL_OW 44
65196: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65197: LD_VAR 0 12
65201: PPUSH
65202: LD_VAR 0 8
65206: PPUSH
65207: LD_INT 0
65209: PPUSH
65210: CALL 67130 0 3
// end ;
65214: GO 65151
65216: POP
65217: POP
// if apemans then
65218: LD_VAR 0 3
65222: IFFALSE 65345
// for i = 1 to apemans do
65224: LD_ADDR_VAR 0 11
65228: PUSH
65229: DOUBLE
65230: LD_INT 1
65232: DEC
65233: ST_TO_ADDR
65234: LD_VAR 0 3
65238: PUSH
65239: FOR_TO
65240: IFFALSE 65343
// begin hc_class = class_apeman ;
65242: LD_ADDR_OWVAR 28
65246: PUSH
65247: LD_INT 12
65249: ST_TO_ADDR
// hc_gallery =  ;
65250: LD_ADDR_OWVAR 33
65254: PUSH
65255: LD_STRING 
65257: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65258: LD_ADDR_OWVAR 35
65262: PUSH
65263: LD_INT 2
65265: NEG
65266: PPUSH
65267: LD_INT 2
65269: PPUSH
65270: CALL_OW 12
65274: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65275: LD_ADDR_OWVAR 31
65279: PUSH
65280: LD_INT 1
65282: PPUSH
65283: LD_INT 3
65285: PPUSH
65286: CALL_OW 12
65290: PUSH
65291: LD_INT 1
65293: PPUSH
65294: LD_INT 3
65296: PPUSH
65297: CALL_OW 12
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: ST_TO_ADDR
// animal := CreateHuman ;
65314: LD_ADDR_VAR 0 12
65318: PUSH
65319: CALL_OW 44
65323: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65324: LD_VAR 0 12
65328: PPUSH
65329: LD_VAR 0 8
65333: PPUSH
65334: LD_INT 0
65336: PPUSH
65337: CALL 67130 0 3
// end ;
65341: GO 65239
65343: POP
65344: POP
// if enchidnas then
65345: LD_VAR 0 4
65349: IFFALSE 65416
// for i = 1 to enchidnas do
65351: LD_ADDR_VAR 0 11
65355: PUSH
65356: DOUBLE
65357: LD_INT 1
65359: DEC
65360: ST_TO_ADDR
65361: LD_VAR 0 4
65365: PUSH
65366: FOR_TO
65367: IFFALSE 65414
// begin hc_class = 13 ;
65369: LD_ADDR_OWVAR 28
65373: PUSH
65374: LD_INT 13
65376: ST_TO_ADDR
// hc_gallery =  ;
65377: LD_ADDR_OWVAR 33
65381: PUSH
65382: LD_STRING 
65384: ST_TO_ADDR
// animal := CreateHuman ;
65385: LD_ADDR_VAR 0 12
65389: PUSH
65390: CALL_OW 44
65394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65395: LD_VAR 0 12
65399: PPUSH
65400: LD_VAR 0 8
65404: PPUSH
65405: LD_INT 0
65407: PPUSH
65408: CALL 67130 0 3
// end ;
65412: GO 65366
65414: POP
65415: POP
// if fishes then
65416: LD_VAR 0 7
65420: IFFALSE 65487
// for i = 1 to fishes do
65422: LD_ADDR_VAR 0 11
65426: PUSH
65427: DOUBLE
65428: LD_INT 1
65430: DEC
65431: ST_TO_ADDR
65432: LD_VAR 0 7
65436: PUSH
65437: FOR_TO
65438: IFFALSE 65485
// begin hc_class = 20 ;
65440: LD_ADDR_OWVAR 28
65444: PUSH
65445: LD_INT 20
65447: ST_TO_ADDR
// hc_gallery =  ;
65448: LD_ADDR_OWVAR 33
65452: PUSH
65453: LD_STRING 
65455: ST_TO_ADDR
// animal := CreateHuman ;
65456: LD_ADDR_VAR 0 12
65460: PUSH
65461: CALL_OW 44
65465: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65466: LD_VAR 0 12
65470: PPUSH
65471: LD_VAR 0 9
65475: PPUSH
65476: LD_INT 0
65478: PPUSH
65479: CALL 67130 0 3
// end ;
65483: GO 65437
65485: POP
65486: POP
// end ;
65487: LD_VAR 0 10
65491: RET
// export function WantHeal ( sci , unit ) ; begin
65492: LD_INT 0
65494: PPUSH
// if GetTaskList ( sci ) > 0 then
65495: LD_VAR 0 1
65499: PPUSH
65500: CALL_OW 437
65504: PUSH
65505: LD_INT 0
65507: GREATER
65508: IFFALSE 65580
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65510: LD_VAR 0 1
65514: PPUSH
65515: CALL_OW 437
65519: PUSH
65520: LD_INT 1
65522: ARRAY
65523: PUSH
65524: LD_INT 1
65526: ARRAY
65527: PUSH
65528: LD_STRING l
65530: EQUAL
65531: IFFALSE 65558
65533: PUSH
65534: LD_VAR 0 1
65538: PPUSH
65539: CALL_OW 437
65543: PUSH
65544: LD_INT 1
65546: ARRAY
65547: PUSH
65548: LD_INT 4
65550: ARRAY
65551: PUSH
65552: LD_VAR 0 2
65556: EQUAL
65557: AND
65558: IFFALSE 65570
// result := true else
65560: LD_ADDR_VAR 0 3
65564: PUSH
65565: LD_INT 1
65567: ST_TO_ADDR
65568: GO 65578
// result := false ;
65570: LD_ADDR_VAR 0 3
65574: PUSH
65575: LD_INT 0
65577: ST_TO_ADDR
// end else
65578: GO 65588
// result := false ;
65580: LD_ADDR_VAR 0 3
65584: PUSH
65585: LD_INT 0
65587: ST_TO_ADDR
// end ;
65588: LD_VAR 0 3
65592: RET
// export function HealTarget ( sci ) ; begin
65593: LD_INT 0
65595: PPUSH
// if not sci then
65596: LD_VAR 0 1
65600: NOT
65601: IFFALSE 65605
// exit ;
65603: GO 65670
// result := 0 ;
65605: LD_ADDR_VAR 0 2
65609: PUSH
65610: LD_INT 0
65612: ST_TO_ADDR
// if GetTaskList ( sci ) then
65613: LD_VAR 0 1
65617: PPUSH
65618: CALL_OW 437
65622: IFFALSE 65670
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65624: LD_VAR 0 1
65628: PPUSH
65629: CALL_OW 437
65633: PUSH
65634: LD_INT 1
65636: ARRAY
65637: PUSH
65638: LD_INT 1
65640: ARRAY
65641: PUSH
65642: LD_STRING l
65644: EQUAL
65645: IFFALSE 65670
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65647: LD_ADDR_VAR 0 2
65651: PUSH
65652: LD_VAR 0 1
65656: PPUSH
65657: CALL_OW 437
65661: PUSH
65662: LD_INT 1
65664: ARRAY
65665: PUSH
65666: LD_INT 4
65668: ARRAY
65669: ST_TO_ADDR
// end ;
65670: LD_VAR 0 2
65674: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65675: LD_INT 0
65677: PPUSH
65678: PPUSH
65679: PPUSH
65680: PPUSH
// if not base_units then
65681: LD_VAR 0 1
65685: NOT
65686: IFFALSE 65690
// exit ;
65688: GO 65777
// result := false ;
65690: LD_ADDR_VAR 0 2
65694: PUSH
65695: LD_INT 0
65697: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65698: LD_ADDR_VAR 0 5
65702: PUSH
65703: LD_VAR 0 1
65707: PPUSH
65708: LD_INT 21
65710: PUSH
65711: LD_INT 3
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PPUSH
65718: CALL_OW 72
65722: ST_TO_ADDR
// if not tmp then
65723: LD_VAR 0 5
65727: NOT
65728: IFFALSE 65732
// exit ;
65730: GO 65777
// for i in tmp do
65732: LD_ADDR_VAR 0 3
65736: PUSH
65737: LD_VAR 0 5
65741: PUSH
65742: FOR_IN
65743: IFFALSE 65775
// begin result := EnemyInRange ( i , 22 ) ;
65745: LD_ADDR_VAR 0 2
65749: PUSH
65750: LD_VAR 0 3
65754: PPUSH
65755: LD_INT 22
65757: PPUSH
65758: CALL 63202 0 2
65762: ST_TO_ADDR
// if result then
65763: LD_VAR 0 2
65767: IFFALSE 65773
// exit ;
65769: POP
65770: POP
65771: GO 65777
// end ;
65773: GO 65742
65775: POP
65776: POP
// end ;
65777: LD_VAR 0 2
65781: RET
// export function FilterByTag ( units , tag ) ; begin
65782: LD_INT 0
65784: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65785: LD_ADDR_VAR 0 3
65789: PUSH
65790: LD_VAR 0 1
65794: PPUSH
65795: LD_INT 120
65797: PUSH
65798: LD_VAR 0 2
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PPUSH
65807: CALL_OW 72
65811: ST_TO_ADDR
// end ;
65812: LD_VAR 0 3
65816: RET
// export function IsDriver ( un ) ; begin
65817: LD_INT 0
65819: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65820: LD_ADDR_VAR 0 2
65824: PUSH
65825: LD_VAR 0 1
65829: PUSH
65830: LD_INT 55
65832: PUSH
65833: EMPTY
65834: LIST
65835: PPUSH
65836: CALL_OW 69
65840: IN
65841: ST_TO_ADDR
// end ;
65842: LD_VAR 0 2
65846: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65847: LD_INT 0
65849: PPUSH
65850: PPUSH
// list := [ ] ;
65851: LD_ADDR_VAR 0 5
65855: PUSH
65856: EMPTY
65857: ST_TO_ADDR
// case d of 0 :
65858: LD_VAR 0 3
65862: PUSH
65863: LD_INT 0
65865: DOUBLE
65866: EQUAL
65867: IFTRUE 65871
65869: GO 66004
65871: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65872: LD_ADDR_VAR 0 5
65876: PUSH
65877: LD_VAR 0 1
65881: PUSH
65882: LD_INT 4
65884: MINUS
65885: PUSH
65886: LD_VAR 0 2
65890: PUSH
65891: LD_INT 4
65893: MINUS
65894: PUSH
65895: LD_INT 2
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: LIST
65902: PUSH
65903: LD_VAR 0 1
65907: PUSH
65908: LD_INT 3
65910: MINUS
65911: PUSH
65912: LD_VAR 0 2
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: LIST
65924: PUSH
65925: LD_VAR 0 1
65929: PUSH
65930: LD_INT 4
65932: PLUS
65933: PUSH
65934: LD_VAR 0 2
65938: PUSH
65939: LD_INT 4
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: LIST
65946: PUSH
65947: LD_VAR 0 1
65951: PUSH
65952: LD_INT 3
65954: PLUS
65955: PUSH
65956: LD_VAR 0 2
65960: PUSH
65961: LD_INT 3
65963: PLUS
65964: PUSH
65965: LD_INT 5
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: LIST
65972: PUSH
65973: LD_VAR 0 1
65977: PUSH
65978: LD_VAR 0 2
65982: PUSH
65983: LD_INT 4
65985: PLUS
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: LIST
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: ST_TO_ADDR
// end ; 1 :
66002: GO 66702
66004: LD_INT 1
66006: DOUBLE
66007: EQUAL
66008: IFTRUE 66012
66010: GO 66145
66012: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66013: LD_ADDR_VAR 0 5
66017: PUSH
66018: LD_VAR 0 1
66022: PUSH
66023: LD_VAR 0 2
66027: PUSH
66028: LD_INT 4
66030: MINUS
66031: PUSH
66032: LD_INT 3
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: LIST
66039: PUSH
66040: LD_VAR 0 1
66044: PUSH
66045: LD_INT 3
66047: MINUS
66048: PUSH
66049: LD_VAR 0 2
66053: PUSH
66054: LD_INT 3
66056: MINUS
66057: PUSH
66058: LD_INT 2
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: LIST
66065: PUSH
66066: LD_VAR 0 1
66070: PUSH
66071: LD_INT 4
66073: MINUS
66074: PUSH
66075: LD_VAR 0 2
66079: PUSH
66080: LD_INT 1
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: PUSH
66088: LD_VAR 0 1
66092: PUSH
66093: LD_VAR 0 2
66097: PUSH
66098: LD_INT 3
66100: PLUS
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: LIST
66109: PUSH
66110: LD_VAR 0 1
66114: PUSH
66115: LD_INT 4
66117: PLUS
66118: PUSH
66119: LD_VAR 0 2
66123: PUSH
66124: LD_INT 4
66126: PLUS
66127: PUSH
66128: LD_INT 5
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: LIST
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: ST_TO_ADDR
// end ; 2 :
66143: GO 66702
66145: LD_INT 2
66147: DOUBLE
66148: EQUAL
66149: IFTRUE 66153
66151: GO 66282
66153: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66154: LD_ADDR_VAR 0 5
66158: PUSH
66159: LD_VAR 0 1
66163: PUSH
66164: LD_VAR 0 2
66168: PUSH
66169: LD_INT 3
66171: MINUS
66172: PUSH
66173: LD_INT 3
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: LIST
66180: PUSH
66181: LD_VAR 0 1
66185: PUSH
66186: LD_INT 4
66188: PLUS
66189: PUSH
66190: LD_VAR 0 2
66194: PUSH
66195: LD_INT 4
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: LIST
66202: PUSH
66203: LD_VAR 0 1
66207: PUSH
66208: LD_VAR 0 2
66212: PUSH
66213: LD_INT 4
66215: PLUS
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: LIST
66224: PUSH
66225: LD_VAR 0 1
66229: PUSH
66230: LD_INT 3
66232: MINUS
66233: PUSH
66234: LD_VAR 0 2
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: LIST
66246: PUSH
66247: LD_VAR 0 1
66251: PUSH
66252: LD_INT 4
66254: MINUS
66255: PUSH
66256: LD_VAR 0 2
66260: PUSH
66261: LD_INT 4
66263: MINUS
66264: PUSH
66265: LD_INT 2
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: LIST
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: ST_TO_ADDR
// end ; 3 :
66280: GO 66702
66282: LD_INT 3
66284: DOUBLE
66285: EQUAL
66286: IFTRUE 66290
66288: GO 66423
66290: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66291: LD_ADDR_VAR 0 5
66295: PUSH
66296: LD_VAR 0 1
66300: PUSH
66301: LD_INT 3
66303: PLUS
66304: PUSH
66305: LD_VAR 0 2
66309: PUSH
66310: LD_INT 4
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: LIST
66317: PUSH
66318: LD_VAR 0 1
66322: PUSH
66323: LD_INT 4
66325: PLUS
66326: PUSH
66327: LD_VAR 0 2
66331: PUSH
66332: LD_INT 4
66334: PLUS
66335: PUSH
66336: LD_INT 5
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: LIST
66343: PUSH
66344: LD_VAR 0 1
66348: PUSH
66349: LD_INT 4
66351: MINUS
66352: PUSH
66353: LD_VAR 0 2
66357: PUSH
66358: LD_INT 1
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: LIST
66365: PUSH
66366: LD_VAR 0 1
66370: PUSH
66371: LD_VAR 0 2
66375: PUSH
66376: LD_INT 4
66378: MINUS
66379: PUSH
66380: LD_INT 3
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: LIST
66387: PUSH
66388: LD_VAR 0 1
66392: PUSH
66393: LD_INT 3
66395: MINUS
66396: PUSH
66397: LD_VAR 0 2
66401: PUSH
66402: LD_INT 3
66404: MINUS
66405: PUSH
66406: LD_INT 2
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: LIST
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: ST_TO_ADDR
// end ; 4 :
66421: GO 66702
66423: LD_INT 4
66425: DOUBLE
66426: EQUAL
66427: IFTRUE 66431
66429: GO 66564
66431: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66432: LD_ADDR_VAR 0 5
66436: PUSH
66437: LD_VAR 0 1
66441: PUSH
66442: LD_VAR 0 2
66446: PUSH
66447: LD_INT 4
66449: PLUS
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: LIST
66458: PUSH
66459: LD_VAR 0 1
66463: PUSH
66464: LD_INT 3
66466: PLUS
66467: PUSH
66468: LD_VAR 0 2
66472: PUSH
66473: LD_INT 3
66475: PLUS
66476: PUSH
66477: LD_INT 5
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: LIST
66484: PUSH
66485: LD_VAR 0 1
66489: PUSH
66490: LD_INT 4
66492: PLUS
66493: PUSH
66494: LD_VAR 0 2
66498: PUSH
66499: LD_INT 4
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: LIST
66506: PUSH
66507: LD_VAR 0 1
66511: PUSH
66512: LD_VAR 0 2
66516: PUSH
66517: LD_INT 3
66519: MINUS
66520: PUSH
66521: LD_INT 3
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: LIST
66528: PUSH
66529: LD_VAR 0 1
66533: PUSH
66534: LD_INT 4
66536: MINUS
66537: PUSH
66538: LD_VAR 0 2
66542: PUSH
66543: LD_INT 4
66545: MINUS
66546: PUSH
66547: LD_INT 2
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: LIST
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: ST_TO_ADDR
// end ; 5 :
66562: GO 66702
66564: LD_INT 5
66566: DOUBLE
66567: EQUAL
66568: IFTRUE 66572
66570: GO 66701
66572: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66573: LD_ADDR_VAR 0 5
66577: PUSH
66578: LD_VAR 0 1
66582: PUSH
66583: LD_INT 4
66585: MINUS
66586: PUSH
66587: LD_VAR 0 2
66591: PUSH
66592: LD_INT 1
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: LIST
66599: PUSH
66600: LD_VAR 0 1
66604: PUSH
66605: LD_VAR 0 2
66609: PUSH
66610: LD_INT 4
66612: MINUS
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: LIST
66621: PUSH
66622: LD_VAR 0 1
66626: PUSH
66627: LD_INT 4
66629: PLUS
66630: PUSH
66631: LD_VAR 0 2
66635: PUSH
66636: LD_INT 4
66638: PLUS
66639: PUSH
66640: LD_INT 5
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: LIST
66647: PUSH
66648: LD_VAR 0 1
66652: PUSH
66653: LD_INT 3
66655: PLUS
66656: PUSH
66657: LD_VAR 0 2
66661: PUSH
66662: LD_INT 4
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: LIST
66669: PUSH
66670: LD_VAR 0 1
66674: PUSH
66675: LD_VAR 0 2
66679: PUSH
66680: LD_INT 3
66682: PLUS
66683: PUSH
66684: LD_INT 0
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: LIST
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: ST_TO_ADDR
// end ; end ;
66699: GO 66702
66701: POP
// result := list ;
66702: LD_ADDR_VAR 0 4
66706: PUSH
66707: LD_VAR 0 5
66711: ST_TO_ADDR
// end ;
66712: LD_VAR 0 4
66716: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66717: LD_INT 0
66719: PPUSH
66720: PPUSH
66721: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66722: LD_VAR 0 1
66726: NOT
66727: IFTRUE 66755
66729: PUSH
66730: LD_VAR 0 2
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: LD_INT 2
66740: PUSH
66741: LD_INT 3
66743: PUSH
66744: LD_INT 4
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: IN
66753: NOT
66754: OR
66755: IFFALSE 66759
// exit ;
66757: GO 66842
// tmp := [ ] ;
66759: LD_ADDR_VAR 0 5
66763: PUSH
66764: EMPTY
66765: ST_TO_ADDR
// for i in units do
66766: LD_ADDR_VAR 0 4
66770: PUSH
66771: LD_VAR 0 1
66775: PUSH
66776: FOR_IN
66777: IFFALSE 66811
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66779: LD_ADDR_VAR 0 5
66783: PUSH
66784: LD_VAR 0 5
66788: PPUSH
66789: LD_VAR 0 4
66793: PPUSH
66794: LD_VAR 0 2
66798: PPUSH
66799: CALL_OW 259
66803: PPUSH
66804: CALL 68237 0 2
66808: ST_TO_ADDR
66809: GO 66776
66811: POP
66812: POP
// if not tmp then
66813: LD_VAR 0 5
66817: NOT
66818: IFFALSE 66822
// exit ;
66820: GO 66842
// result := SortListByListDesc ( units , tmp ) ;
66822: LD_ADDR_VAR 0 3
66826: PUSH
66827: LD_VAR 0 1
66831: PPUSH
66832: LD_VAR 0 5
66836: PPUSH
66837: CALL_OW 77
66841: ST_TO_ADDR
// end ;
66842: LD_VAR 0 3
66846: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66847: LD_INT 0
66849: PPUSH
66850: PPUSH
66851: PPUSH
// result := false ;
66852: LD_ADDR_VAR 0 3
66856: PUSH
66857: LD_INT 0
66859: ST_TO_ADDR
// if not building then
66860: LD_VAR 0 2
66864: NOT
66865: IFFALSE 66869
// exit ;
66867: GO 67013
// x := GetX ( building ) ;
66869: LD_ADDR_VAR 0 4
66873: PUSH
66874: LD_VAR 0 2
66878: PPUSH
66879: CALL_OW 250
66883: ST_TO_ADDR
// y := GetY ( building ) ;
66884: LD_ADDR_VAR 0 5
66888: PUSH
66889: LD_VAR 0 2
66893: PPUSH
66894: CALL_OW 251
66898: ST_TO_ADDR
// if not x or not y then
66899: LD_VAR 0 4
66903: NOT
66904: IFTRUE 66913
66906: PUSH
66907: LD_VAR 0 5
66911: NOT
66912: OR
66913: IFFALSE 66917
// exit ;
66915: GO 67013
// if GetTaskList ( unit ) then
66917: LD_VAR 0 1
66921: PPUSH
66922: CALL_OW 437
66926: IFFALSE 67013
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66928: LD_STRING e
66930: PUSH
66931: LD_VAR 0 1
66935: PPUSH
66936: CALL_OW 437
66940: PUSH
66941: LD_INT 1
66943: ARRAY
66944: PUSH
66945: LD_INT 1
66947: ARRAY
66948: EQUAL
66949: IFFALSE 66976
66951: PUSH
66952: LD_VAR 0 4
66956: PUSH
66957: LD_VAR 0 1
66961: PPUSH
66962: CALL_OW 437
66966: PUSH
66967: LD_INT 1
66969: ARRAY
66970: PUSH
66971: LD_INT 2
66973: ARRAY
66974: EQUAL
66975: AND
66976: IFFALSE 67003
66978: PUSH
66979: LD_VAR 0 5
66983: PUSH
66984: LD_VAR 0 1
66988: PPUSH
66989: CALL_OW 437
66993: PUSH
66994: LD_INT 1
66996: ARRAY
66997: PUSH
66998: LD_INT 3
67000: ARRAY
67001: EQUAL
67002: AND
67003: IFFALSE 67013
// result := true end ;
67005: LD_ADDR_VAR 0 3
67009: PUSH
67010: LD_INT 1
67012: ST_TO_ADDR
// end ;
67013: LD_VAR 0 3
67017: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67018: LD_INT 0
67020: PPUSH
// result := false ;
67021: LD_ADDR_VAR 0 4
67025: PUSH
67026: LD_INT 0
67028: ST_TO_ADDR
// if GetTaskList ( unit ) then
67029: LD_VAR 0 1
67033: PPUSH
67034: CALL_OW 437
67038: IFFALSE 67125
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67040: LD_STRING M
67042: PUSH
67043: LD_VAR 0 1
67047: PPUSH
67048: CALL_OW 437
67052: PUSH
67053: LD_INT 1
67055: ARRAY
67056: PUSH
67057: LD_INT 1
67059: ARRAY
67060: EQUAL
67061: IFFALSE 67088
67063: PUSH
67064: LD_VAR 0 2
67068: PUSH
67069: LD_VAR 0 1
67073: PPUSH
67074: CALL_OW 437
67078: PUSH
67079: LD_INT 1
67081: ARRAY
67082: PUSH
67083: LD_INT 2
67085: ARRAY
67086: EQUAL
67087: AND
67088: IFFALSE 67115
67090: PUSH
67091: LD_VAR 0 3
67095: PUSH
67096: LD_VAR 0 1
67100: PPUSH
67101: CALL_OW 437
67105: PUSH
67106: LD_INT 1
67108: ARRAY
67109: PUSH
67110: LD_INT 3
67112: ARRAY
67113: EQUAL
67114: AND
67115: IFFALSE 67125
// result := true ;
67117: LD_ADDR_VAR 0 4
67121: PUSH
67122: LD_INT 1
67124: ST_TO_ADDR
// end ; end ;
67125: LD_VAR 0 4
67129: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67130: LD_INT 0
67132: PPUSH
67133: PPUSH
67134: PPUSH
67135: PPUSH
// if not unit or not area then
67136: LD_VAR 0 1
67140: NOT
67141: IFTRUE 67150
67143: PUSH
67144: LD_VAR 0 2
67148: NOT
67149: OR
67150: IFFALSE 67154
// exit ;
67152: GO 67330
// tmp := AreaToList ( area , i ) ;
67154: LD_ADDR_VAR 0 6
67158: PUSH
67159: LD_VAR 0 2
67163: PPUSH
67164: LD_VAR 0 5
67168: PPUSH
67169: CALL_OW 517
67173: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67174: LD_ADDR_VAR 0 5
67178: PUSH
67179: DOUBLE
67180: LD_INT 1
67182: DEC
67183: ST_TO_ADDR
67184: LD_VAR 0 6
67188: PUSH
67189: LD_INT 1
67191: ARRAY
67192: PUSH
67193: FOR_TO
67194: IFFALSE 67328
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67196: LD_ADDR_VAR 0 7
67200: PUSH
67201: LD_VAR 0 6
67205: PUSH
67206: LD_INT 1
67208: ARRAY
67209: PUSH
67210: LD_VAR 0 5
67214: ARRAY
67215: PUSH
67216: LD_VAR 0 6
67220: PUSH
67221: LD_INT 2
67223: ARRAY
67224: PUSH
67225: LD_VAR 0 5
67229: ARRAY
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67235: LD_INT 92
67237: PUSH
67238: LD_VAR 0 7
67242: PUSH
67243: LD_INT 1
67245: ARRAY
67246: PUSH
67247: LD_VAR 0 7
67251: PUSH
67252: LD_INT 2
67254: ARRAY
67255: PUSH
67256: LD_INT 2
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: PPUSH
67265: CALL_OW 69
67269: PUSH
67270: LD_INT 0
67272: EQUAL
67273: IFFALSE 67326
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67275: LD_VAR 0 1
67279: PPUSH
67280: LD_VAR 0 7
67284: PUSH
67285: LD_INT 1
67287: ARRAY
67288: PPUSH
67289: LD_VAR 0 7
67293: PUSH
67294: LD_INT 2
67296: ARRAY
67297: PPUSH
67298: LD_VAR 0 3
67302: PPUSH
67303: CALL_OW 48
// result := IsPlaced ( unit ) ;
67307: LD_ADDR_VAR 0 4
67311: PUSH
67312: LD_VAR 0 1
67316: PPUSH
67317: CALL_OW 305
67321: ST_TO_ADDR
// exit ;
67322: POP
67323: POP
67324: GO 67330
// end ; end ;
67326: GO 67193
67328: POP
67329: POP
// end ;
67330: LD_VAR 0 4
67334: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67335: LD_INT 0
67337: PPUSH
67338: PPUSH
67339: PPUSH
// if not side or side > 8 then
67340: LD_VAR 0 1
67344: NOT
67345: IFTRUE 67357
67347: PUSH
67348: LD_VAR 0 1
67352: PUSH
67353: LD_INT 8
67355: GREATER
67356: OR
67357: IFFALSE 67361
// exit ;
67359: GO 67548
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67361: LD_ADDR_VAR 0 4
67365: PUSH
67366: LD_INT 22
67368: PUSH
67369: LD_VAR 0 1
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 21
67380: PUSH
67381: LD_INT 3
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PPUSH
67392: CALL_OW 69
67396: ST_TO_ADDR
// if not tmp then
67397: LD_VAR 0 4
67401: NOT
67402: IFFALSE 67406
// exit ;
67404: GO 67548
// enable_addtolog := true ;
67406: LD_ADDR_OWVAR 81
67410: PUSH
67411: LD_INT 1
67413: ST_TO_ADDR
// AddToLog ( [ ) ;
67414: LD_STRING [
67416: PPUSH
67417: CALL_OW 561
// for i in tmp do
67421: LD_ADDR_VAR 0 3
67425: PUSH
67426: LD_VAR 0 4
67430: PUSH
67431: FOR_IN
67432: IFFALSE 67539
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67434: LD_STRING [
67436: PUSH
67437: LD_VAR 0 3
67441: PPUSH
67442: CALL_OW 266
67446: STR
67447: PUSH
67448: LD_STRING , 
67450: STR
67451: PUSH
67452: LD_VAR 0 3
67456: PPUSH
67457: CALL_OW 250
67461: STR
67462: PUSH
67463: LD_STRING , 
67465: STR
67466: PUSH
67467: LD_VAR 0 3
67471: PPUSH
67472: CALL_OW 251
67476: STR
67477: PUSH
67478: LD_STRING , 
67480: STR
67481: PUSH
67482: LD_VAR 0 3
67486: PPUSH
67487: CALL_OW 254
67491: STR
67492: PUSH
67493: LD_STRING , 
67495: STR
67496: PUSH
67497: LD_VAR 0 3
67501: PPUSH
67502: LD_INT 1
67504: PPUSH
67505: CALL_OW 268
67509: STR
67510: PUSH
67511: LD_STRING , 
67513: STR
67514: PUSH
67515: LD_VAR 0 3
67519: PPUSH
67520: LD_INT 2
67522: PPUSH
67523: CALL_OW 268
67527: STR
67528: PUSH
67529: LD_STRING ],
67531: STR
67532: PPUSH
67533: CALL_OW 561
// end ;
67537: GO 67431
67539: POP
67540: POP
// AddToLog ( ]; ) ;
67541: LD_STRING ];
67543: PPUSH
67544: CALL_OW 561
// end ;
67548: LD_VAR 0 2
67552: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67553: LD_INT 0
67555: PPUSH
67556: PPUSH
67557: PPUSH
67558: PPUSH
67559: PPUSH
// if not area or not rate or not max then
67560: LD_VAR 0 1
67564: NOT
67565: IFTRUE 67574
67567: PUSH
67568: LD_VAR 0 2
67572: NOT
67573: OR
67574: IFTRUE 67583
67576: PUSH
67577: LD_VAR 0 4
67581: NOT
67582: OR
67583: IFFALSE 67587
// exit ;
67585: GO 67776
// while 1 do
67587: LD_INT 1
67589: IFFALSE 67776
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67591: LD_ADDR_VAR 0 9
67595: PUSH
67596: LD_VAR 0 1
67600: PPUSH
67601: LD_INT 1
67603: PPUSH
67604: CALL_OW 287
67608: PUSH
67609: LD_INT 10
67611: MUL
67612: ST_TO_ADDR
// r := rate / 10 ;
67613: LD_ADDR_VAR 0 7
67617: PUSH
67618: LD_VAR 0 2
67622: PUSH
67623: LD_INT 10
67625: DIVREAL
67626: ST_TO_ADDR
// time := 1 1$00 ;
67627: LD_ADDR_VAR 0 8
67631: PUSH
67632: LD_INT 2100
67634: ST_TO_ADDR
// if amount < min then
67635: LD_VAR 0 9
67639: PUSH
67640: LD_VAR 0 3
67644: LESS
67645: IFFALSE 67663
// r := r * 2 else
67647: LD_ADDR_VAR 0 7
67651: PUSH
67652: LD_VAR 0 7
67656: PUSH
67657: LD_INT 2
67659: MUL
67660: ST_TO_ADDR
67661: GO 67689
// if amount > max then
67663: LD_VAR 0 9
67667: PUSH
67668: LD_VAR 0 4
67672: GREATER
67673: IFFALSE 67689
// r := r / 2 ;
67675: LD_ADDR_VAR 0 7
67679: PUSH
67680: LD_VAR 0 7
67684: PUSH
67685: LD_INT 2
67687: DIVREAL
67688: ST_TO_ADDR
// time := time / r ;
67689: LD_ADDR_VAR 0 8
67693: PUSH
67694: LD_VAR 0 8
67698: PUSH
67699: LD_VAR 0 7
67703: DIVREAL
67704: ST_TO_ADDR
// if time < 0 then
67705: LD_VAR 0 8
67709: PUSH
67710: LD_INT 0
67712: LESS
67713: IFFALSE 67730
// time := time * - 1 ;
67715: LD_ADDR_VAR 0 8
67719: PUSH
67720: LD_VAR 0 8
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: MUL
67729: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67730: LD_VAR 0 8
67734: PUSH
67735: LD_INT 35
67737: PPUSH
67738: LD_INT 875
67740: PPUSH
67741: CALL_OW 12
67745: PLUS
67746: PPUSH
67747: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67751: LD_INT 1
67753: PPUSH
67754: LD_INT 5
67756: PPUSH
67757: CALL_OW 12
67761: PPUSH
67762: LD_VAR 0 1
67766: PPUSH
67767: LD_INT 1
67769: PPUSH
67770: CALL_OW 55
// end ;
67774: GO 67587
// end ;
67776: LD_VAR 0 5
67780: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67781: LD_INT 0
67783: PPUSH
67784: PPUSH
67785: PPUSH
67786: PPUSH
67787: PPUSH
67788: PPUSH
67789: PPUSH
67790: PPUSH
// if not turrets or not factories then
67791: LD_VAR 0 1
67795: NOT
67796: IFTRUE 67805
67798: PUSH
67799: LD_VAR 0 2
67803: NOT
67804: OR
67805: IFFALSE 67809
// exit ;
67807: GO 68116
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67809: LD_ADDR_VAR 0 10
67813: PUSH
67814: LD_INT 5
67816: PUSH
67817: LD_INT 6
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 2
67826: PUSH
67827: LD_INT 4
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 3
67836: PUSH
67837: LD_INT 5
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 24
67851: PUSH
67852: LD_INT 25
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 23
67861: PUSH
67862: LD_INT 27
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 42
67875: PUSH
67876: LD_INT 43
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 44
67885: PUSH
67886: LD_INT 46
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 45
67895: PUSH
67896: LD_INT 47
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: LIST
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: LIST
67912: ST_TO_ADDR
// result := [ ] ;
67913: LD_ADDR_VAR 0 3
67917: PUSH
67918: EMPTY
67919: ST_TO_ADDR
// for i in turrets do
67920: LD_ADDR_VAR 0 4
67924: PUSH
67925: LD_VAR 0 1
67929: PUSH
67930: FOR_IN
67931: IFFALSE 68114
// begin nat := GetNation ( i ) ;
67933: LD_ADDR_VAR 0 7
67937: PUSH
67938: LD_VAR 0 4
67942: PPUSH
67943: CALL_OW 248
67947: ST_TO_ADDR
// weapon := 0 ;
67948: LD_ADDR_VAR 0 8
67952: PUSH
67953: LD_INT 0
67955: ST_TO_ADDR
// if not nat then
67956: LD_VAR 0 7
67960: NOT
67961: IFFALSE 67965
// continue ;
67963: GO 67930
// for j in list [ nat ] do
67965: LD_ADDR_VAR 0 5
67969: PUSH
67970: LD_VAR 0 10
67974: PUSH
67975: LD_VAR 0 7
67979: ARRAY
67980: PUSH
67981: FOR_IN
67982: IFFALSE 68023
// if GetBWeapon ( i ) = j [ 1 ] then
67984: LD_VAR 0 4
67988: PPUSH
67989: CALL_OW 269
67993: PUSH
67994: LD_VAR 0 5
67998: PUSH
67999: LD_INT 1
68001: ARRAY
68002: EQUAL
68003: IFFALSE 68021
// begin weapon := j [ 2 ] ;
68005: LD_ADDR_VAR 0 8
68009: PUSH
68010: LD_VAR 0 5
68014: PUSH
68015: LD_INT 2
68017: ARRAY
68018: ST_TO_ADDR
// break ;
68019: GO 68023
// end ;
68021: GO 67981
68023: POP
68024: POP
// if not weapon then
68025: LD_VAR 0 8
68029: NOT
68030: IFFALSE 68034
// continue ;
68032: GO 67930
// for k in factories do
68034: LD_ADDR_VAR 0 6
68038: PUSH
68039: LD_VAR 0 2
68043: PUSH
68044: FOR_IN
68045: IFFALSE 68110
// begin weapons := AvailableWeaponList ( k ) ;
68047: LD_ADDR_VAR 0 9
68051: PUSH
68052: LD_VAR 0 6
68056: PPUSH
68057: CALL_OW 478
68061: ST_TO_ADDR
// if not weapons then
68062: LD_VAR 0 9
68066: NOT
68067: IFFALSE 68071
// continue ;
68069: GO 68044
// if weapon in weapons then
68071: LD_VAR 0 8
68075: PUSH
68076: LD_VAR 0 9
68080: IN
68081: IFFALSE 68108
// begin result := [ i , weapon ] ;
68083: LD_ADDR_VAR 0 3
68087: PUSH
68088: LD_VAR 0 4
68092: PUSH
68093: LD_VAR 0 8
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: ST_TO_ADDR
// exit ;
68102: POP
68103: POP
68104: POP
68105: POP
68106: GO 68116
// end ; end ;
68108: GO 68044
68110: POP
68111: POP
// end ;
68112: GO 67930
68114: POP
68115: POP
// end ;
68116: LD_VAR 0 3
68120: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68121: LD_INT 0
68123: PPUSH
// if not side or side > 8 then
68124: LD_VAR 0 3
68128: NOT
68129: IFTRUE 68141
68131: PUSH
68132: LD_VAR 0 3
68136: PUSH
68137: LD_INT 8
68139: GREATER
68140: OR
68141: IFFALSE 68145
// exit ;
68143: GO 68204
// if not range then
68145: LD_VAR 0 4
68149: NOT
68150: IFFALSE 68161
// range := - 12 ;
68152: LD_ADDR_VAR 0 4
68156: PUSH
68157: LD_INT 12
68159: NEG
68160: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68161: LD_VAR 0 1
68165: PPUSH
68166: LD_VAR 0 2
68170: PPUSH
68171: LD_VAR 0 3
68175: PPUSH
68176: LD_VAR 0 4
68180: PPUSH
68181: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68185: LD_VAR 0 1
68189: PPUSH
68190: LD_VAR 0 2
68194: PPUSH
68195: LD_VAR 0 3
68199: PPUSH
68200: CALL_OW 331
// end ;
68204: LD_VAR 0 5
68208: RET
// export function Video ( mode ) ; begin
68209: LD_INT 0
68211: PPUSH
// ingame_video = mode ;
68212: LD_ADDR_OWVAR 52
68216: PUSH
68217: LD_VAR 0 1
68221: ST_TO_ADDR
// interface_hidden = mode ;
68222: LD_ADDR_OWVAR 54
68226: PUSH
68227: LD_VAR 0 1
68231: ST_TO_ADDR
// end ;
68232: LD_VAR 0 2
68236: RET
// export function Join ( array , element ) ; begin
68237: LD_INT 0
68239: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68240: LD_ADDR_VAR 0 3
68244: PUSH
68245: LD_VAR 0 1
68249: PPUSH
68250: LD_VAR 0 1
68254: PUSH
68255: LD_INT 1
68257: PLUS
68258: PPUSH
68259: LD_VAR 0 2
68263: PPUSH
68264: CALL_OW 1
68268: ST_TO_ADDR
// end ;
68269: LD_VAR 0 3
68273: RET
// export function JoinUnion ( array , element ) ; begin
68274: LD_INT 0
68276: PPUSH
// result := array union element ;
68277: LD_ADDR_VAR 0 3
68281: PUSH
68282: LD_VAR 0 1
68286: PUSH
68287: LD_VAR 0 2
68291: UNION
68292: ST_TO_ADDR
// end ;
68293: LD_VAR 0 3
68297: RET
// export function GetBehemoths ( side ) ; begin
68298: LD_INT 0
68300: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68301: LD_ADDR_VAR 0 2
68305: PUSH
68306: LD_INT 22
68308: PUSH
68309: LD_VAR 0 1
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 31
68320: PUSH
68321: LD_INT 25
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PPUSH
68332: CALL_OW 69
68336: ST_TO_ADDR
// end ;
68337: LD_VAR 0 2
68341: RET
// export function Shuffle ( array ) ; var i , index ; begin
68342: LD_INT 0
68344: PPUSH
68345: PPUSH
68346: PPUSH
// result := [ ] ;
68347: LD_ADDR_VAR 0 2
68351: PUSH
68352: EMPTY
68353: ST_TO_ADDR
// if not array then
68354: LD_VAR 0 1
68358: NOT
68359: IFFALSE 68363
// exit ;
68361: GO 68462
// Randomize ;
68363: CALL_OW 10
// for i = array downto 1 do
68367: LD_ADDR_VAR 0 3
68371: PUSH
68372: DOUBLE
68373: LD_VAR 0 1
68377: INC
68378: ST_TO_ADDR
68379: LD_INT 1
68381: PUSH
68382: FOR_DOWNTO
68383: IFFALSE 68460
// begin index := rand ( 1 , array ) ;
68385: LD_ADDR_VAR 0 4
68389: PUSH
68390: LD_INT 1
68392: PPUSH
68393: LD_VAR 0 1
68397: PPUSH
68398: CALL_OW 12
68402: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68403: LD_ADDR_VAR 0 2
68407: PUSH
68408: LD_VAR 0 2
68412: PPUSH
68413: LD_VAR 0 2
68417: PUSH
68418: LD_INT 1
68420: PLUS
68421: PPUSH
68422: LD_VAR 0 1
68426: PUSH
68427: LD_VAR 0 4
68431: ARRAY
68432: PPUSH
68433: CALL_OW 2
68437: ST_TO_ADDR
// array := Delete ( array , index ) ;
68438: LD_ADDR_VAR 0 1
68442: PUSH
68443: LD_VAR 0 1
68447: PPUSH
68448: LD_VAR 0 4
68452: PPUSH
68453: CALL_OW 3
68457: ST_TO_ADDR
// end ;
68458: GO 68382
68460: POP
68461: POP
// end ;
68462: LD_VAR 0 2
68466: RET
// export function GetBaseMaterials ( base ) ; begin
68467: LD_INT 0
68469: PPUSH
// result := [ 0 , 0 , 0 ] ;
68470: LD_ADDR_VAR 0 2
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: LIST
68488: ST_TO_ADDR
// if not base then
68489: LD_VAR 0 1
68493: NOT
68494: IFFALSE 68498
// exit ;
68496: GO 68547
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68498: LD_ADDR_VAR 0 2
68502: PUSH
68503: LD_VAR 0 1
68507: PPUSH
68508: LD_INT 1
68510: PPUSH
68511: CALL_OW 275
68515: PUSH
68516: LD_VAR 0 1
68520: PPUSH
68521: LD_INT 2
68523: PPUSH
68524: CALL_OW 275
68528: PUSH
68529: LD_VAR 0 1
68533: PPUSH
68534: LD_INT 3
68536: PPUSH
68537: CALL_OW 275
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: LIST
68546: ST_TO_ADDR
// end ;
68547: LD_VAR 0 2
68551: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68552: LD_INT 0
68554: PPUSH
68555: PPUSH
// result := array ;
68556: LD_ADDR_VAR 0 3
68560: PUSH
68561: LD_VAR 0 1
68565: ST_TO_ADDR
// if size >= result then
68566: LD_VAR 0 2
68570: PUSH
68571: LD_VAR 0 3
68575: GREATEREQUAL
68576: IFFALSE 68580
// exit ;
68578: GO 68630
// if size then
68580: LD_VAR 0 2
68584: IFFALSE 68630
// for i := array downto size do
68586: LD_ADDR_VAR 0 4
68590: PUSH
68591: DOUBLE
68592: LD_VAR 0 1
68596: INC
68597: ST_TO_ADDR
68598: LD_VAR 0 2
68602: PUSH
68603: FOR_DOWNTO
68604: IFFALSE 68628
// result := Delete ( result , result ) ;
68606: LD_ADDR_VAR 0 3
68610: PUSH
68611: LD_VAR 0 3
68615: PPUSH
68616: LD_VAR 0 3
68620: PPUSH
68621: CALL_OW 3
68625: ST_TO_ADDR
68626: GO 68603
68628: POP
68629: POP
// end ;
68630: LD_VAR 0 3
68634: RET
// export function ComExit ( unit ) ; var tmp ; begin
68635: LD_INT 0
68637: PPUSH
68638: PPUSH
// if not IsInUnit ( unit ) then
68639: LD_VAR 0 1
68643: PPUSH
68644: CALL_OW 310
68648: NOT
68649: IFFALSE 68653
// exit ;
68651: GO 68713
// tmp := IsInUnit ( unit ) ;
68653: LD_ADDR_VAR 0 3
68657: PUSH
68658: LD_VAR 0 1
68662: PPUSH
68663: CALL_OW 310
68667: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68668: LD_VAR 0 3
68672: PPUSH
68673: CALL_OW 247
68677: PUSH
68678: LD_INT 2
68680: EQUAL
68681: IFFALSE 68694
// ComExitVehicle ( unit ) else
68683: LD_VAR 0 1
68687: PPUSH
68688: CALL_OW 121
68692: GO 68703
// ComExitBuilding ( unit ) ;
68694: LD_VAR 0 1
68698: PPUSH
68699: CALL_OW 122
// result := tmp ;
68703: LD_ADDR_VAR 0 2
68707: PUSH
68708: LD_VAR 0 3
68712: ST_TO_ADDR
// end ;
68713: LD_VAR 0 2
68717: RET
// export function ComExitAll ( units ) ; var i ; begin
68718: LD_INT 0
68720: PPUSH
68721: PPUSH
// if not units then
68722: LD_VAR 0 1
68726: NOT
68727: IFFALSE 68731
// exit ;
68729: GO 68757
// for i in units do
68731: LD_ADDR_VAR 0 3
68735: PUSH
68736: LD_VAR 0 1
68740: PUSH
68741: FOR_IN
68742: IFFALSE 68755
// ComExit ( i ) ;
68744: LD_VAR 0 3
68748: PPUSH
68749: CALL 68635 0 1
68753: GO 68741
68755: POP
68756: POP
// end ;
68757: LD_VAR 0 2
68761: RET
// export function ResetHc ; begin
68762: LD_INT 0
68764: PPUSH
// InitHc ;
68765: CALL_OW 19
// hc_importance := 0 ;
68769: LD_ADDR_OWVAR 32
68773: PUSH
68774: LD_INT 0
68776: ST_TO_ADDR
// end ;
68777: LD_VAR 0 1
68781: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68782: LD_INT 0
68784: PPUSH
68785: PPUSH
68786: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68787: LD_ADDR_VAR 0 6
68791: PUSH
68792: LD_VAR 0 1
68796: PUSH
68797: LD_VAR 0 3
68801: PLUS
68802: PUSH
68803: LD_INT 2
68805: DIV
68806: ST_TO_ADDR
// if _x < 0 then
68807: LD_VAR 0 6
68811: PUSH
68812: LD_INT 0
68814: LESS
68815: IFFALSE 68832
// _x := _x * - 1 ;
68817: LD_ADDR_VAR 0 6
68821: PUSH
68822: LD_VAR 0 6
68826: PUSH
68827: LD_INT 1
68829: NEG
68830: MUL
68831: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68832: LD_ADDR_VAR 0 7
68836: PUSH
68837: LD_VAR 0 2
68841: PUSH
68842: LD_VAR 0 4
68846: PLUS
68847: PUSH
68848: LD_INT 2
68850: DIV
68851: ST_TO_ADDR
// if _y < 0 then
68852: LD_VAR 0 7
68856: PUSH
68857: LD_INT 0
68859: LESS
68860: IFFALSE 68877
// _y := _y * - 1 ;
68862: LD_ADDR_VAR 0 7
68866: PUSH
68867: LD_VAR 0 7
68871: PUSH
68872: LD_INT 1
68874: NEG
68875: MUL
68876: ST_TO_ADDR
// result := [ _x , _y ] ;
68877: LD_ADDR_VAR 0 5
68881: PUSH
68882: LD_VAR 0 6
68886: PUSH
68887: LD_VAR 0 7
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: ST_TO_ADDR
// end ;
68896: LD_VAR 0 5
68900: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68901: LD_INT 0
68903: PPUSH
68904: PPUSH
68905: PPUSH
68906: PPUSH
// task := GetTaskList ( unit ) ;
68907: LD_ADDR_VAR 0 7
68911: PUSH
68912: LD_VAR 0 1
68916: PPUSH
68917: CALL_OW 437
68921: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68922: LD_VAR 0 7
68926: NOT
68927: IFFALSE 68946
68929: PUSH
68930: LD_VAR 0 1
68934: PPUSH
68935: LD_VAR 0 2
68939: PPUSH
68940: CALL_OW 308
68944: NOT
68945: AND
68946: IFFALSE 68950
// exit ;
68948: GO 69068
// if IsInArea ( unit , area ) then
68950: LD_VAR 0 1
68954: PPUSH
68955: LD_VAR 0 2
68959: PPUSH
68960: CALL_OW 308
68964: IFFALSE 68982
// begin ComMoveToArea ( unit , goAway ) ;
68966: LD_VAR 0 1
68970: PPUSH
68971: LD_VAR 0 3
68975: PPUSH
68976: CALL_OW 113
// exit ;
68980: GO 69068
// end ; if task [ 1 ] [ 1 ] <> M then
68982: LD_VAR 0 7
68986: PUSH
68987: LD_INT 1
68989: ARRAY
68990: PUSH
68991: LD_INT 1
68993: ARRAY
68994: PUSH
68995: LD_STRING M
68997: NONEQUAL
68998: IFFALSE 69002
// exit ;
69000: GO 69068
// x := task [ 1 ] [ 2 ] ;
69002: LD_ADDR_VAR 0 5
69006: PUSH
69007: LD_VAR 0 7
69011: PUSH
69012: LD_INT 1
69014: ARRAY
69015: PUSH
69016: LD_INT 2
69018: ARRAY
69019: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69020: LD_ADDR_VAR 0 6
69024: PUSH
69025: LD_VAR 0 7
69029: PUSH
69030: LD_INT 1
69032: ARRAY
69033: PUSH
69034: LD_INT 3
69036: ARRAY
69037: ST_TO_ADDR
// if InArea ( x , y , area ) then
69038: LD_VAR 0 5
69042: PPUSH
69043: LD_VAR 0 6
69047: PPUSH
69048: LD_VAR 0 2
69052: PPUSH
69053: CALL_OW 309
69057: IFFALSE 69068
// ComStop ( unit ) ;
69059: LD_VAR 0 1
69063: PPUSH
69064: CALL_OW 141
// end ;
69068: LD_VAR 0 4
69072: RET
// export function Abs ( value ) ; begin
69073: LD_INT 0
69075: PPUSH
// result := value ;
69076: LD_ADDR_VAR 0 2
69080: PUSH
69081: LD_VAR 0 1
69085: ST_TO_ADDR
// if value < 0 then
69086: LD_VAR 0 1
69090: PUSH
69091: LD_INT 0
69093: LESS
69094: IFFALSE 69111
// result := value * - 1 ;
69096: LD_ADDR_VAR 0 2
69100: PUSH
69101: LD_VAR 0 1
69105: PUSH
69106: LD_INT 1
69108: NEG
69109: MUL
69110: ST_TO_ADDR
// end ;
69111: LD_VAR 0 2
69115: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69116: LD_INT 0
69118: PPUSH
69119: PPUSH
69120: PPUSH
69121: PPUSH
69122: PPUSH
69123: PPUSH
69124: PPUSH
69125: PPUSH
// if not unit or not building then
69126: LD_VAR 0 1
69130: NOT
69131: IFTRUE 69140
69133: PUSH
69134: LD_VAR 0 2
69138: NOT
69139: OR
69140: IFFALSE 69144
// exit ;
69142: GO 69372
// x := GetX ( building ) ;
69144: LD_ADDR_VAR 0 4
69148: PUSH
69149: LD_VAR 0 2
69153: PPUSH
69154: CALL_OW 250
69158: ST_TO_ADDR
// y := GetY ( building ) ;
69159: LD_ADDR_VAR 0 6
69163: PUSH
69164: LD_VAR 0 2
69168: PPUSH
69169: CALL_OW 251
69173: ST_TO_ADDR
// d := GetDir ( building ) ;
69174: LD_ADDR_VAR 0 8
69178: PUSH
69179: LD_VAR 0 2
69183: PPUSH
69184: CALL_OW 254
69188: ST_TO_ADDR
// r := 4 ;
69189: LD_ADDR_VAR 0 9
69193: PUSH
69194: LD_INT 4
69196: ST_TO_ADDR
// for i := 1 to 5 do
69197: LD_ADDR_VAR 0 10
69201: PUSH
69202: DOUBLE
69203: LD_INT 1
69205: DEC
69206: ST_TO_ADDR
69207: LD_INT 5
69209: PUSH
69210: FOR_TO
69211: IFFALSE 69370
// begin _x := ShiftX ( x , d , r + i ) ;
69213: LD_ADDR_VAR 0 5
69217: PUSH
69218: LD_VAR 0 4
69222: PPUSH
69223: LD_VAR 0 8
69227: PPUSH
69228: LD_VAR 0 9
69232: PUSH
69233: LD_VAR 0 10
69237: PLUS
69238: PPUSH
69239: CALL_OW 272
69243: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69244: LD_ADDR_VAR 0 7
69248: PUSH
69249: LD_VAR 0 6
69253: PPUSH
69254: LD_VAR 0 8
69258: PPUSH
69259: LD_VAR 0 9
69263: PUSH
69264: LD_VAR 0 10
69268: PLUS
69269: PPUSH
69270: CALL_OW 273
69274: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69275: LD_VAR 0 5
69279: PPUSH
69280: LD_VAR 0 7
69284: PPUSH
69285: CALL_OW 488
69289: IFFALSE 69324
69291: PUSH
69292: LD_VAR 0 5
69296: PPUSH
69297: LD_VAR 0 7
69301: PPUSH
69302: CALL_OW 428
69306: PPUSH
69307: CALL_OW 247
69311: PUSH
69312: LD_INT 3
69314: PUSH
69315: LD_INT 2
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: IN
69322: NOT
69323: AND
69324: IFFALSE 69368
// begin ComMoveXY ( unit , _x , _y ) ;
69326: LD_VAR 0 1
69330: PPUSH
69331: LD_VAR 0 5
69335: PPUSH
69336: LD_VAR 0 7
69340: PPUSH
69341: CALL_OW 111
// result := [ _x , _y ] ;
69345: LD_ADDR_VAR 0 3
69349: PUSH
69350: LD_VAR 0 5
69354: PUSH
69355: LD_VAR 0 7
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: ST_TO_ADDR
// exit ;
69364: POP
69365: POP
69366: GO 69372
// end ; end ;
69368: GO 69210
69370: POP
69371: POP
// end ;
69372: LD_VAR 0 3
69376: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69377: LD_INT 0
69379: PPUSH
69380: PPUSH
69381: PPUSH
// result := 0 ;
69382: LD_ADDR_VAR 0 3
69386: PUSH
69387: LD_INT 0
69389: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69390: LD_VAR 0 1
69394: PUSH
69395: LD_INT 0
69397: LESS
69398: IFTRUE 69410
69400: PUSH
69401: LD_VAR 0 1
69405: PUSH
69406: LD_INT 8
69408: GREATER
69409: OR
69410: IFTRUE 69422
69412: PUSH
69413: LD_VAR 0 2
69417: PUSH
69418: LD_INT 0
69420: LESS
69421: OR
69422: IFTRUE 69434
69424: PUSH
69425: LD_VAR 0 2
69429: PUSH
69430: LD_INT 8
69432: GREATER
69433: OR
69434: IFFALSE 69438
// exit ;
69436: GO 69513
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69438: LD_ADDR_VAR 0 4
69442: PUSH
69443: LD_INT 22
69445: PUSH
69446: LD_VAR 0 2
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PPUSH
69455: CALL_OW 69
69459: PUSH
69460: FOR_IN
69461: IFFALSE 69511
// begin un := UnitShoot ( i ) ;
69463: LD_ADDR_VAR 0 5
69467: PUSH
69468: LD_VAR 0 4
69472: PPUSH
69473: CALL_OW 504
69477: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69478: LD_VAR 0 5
69482: PPUSH
69483: CALL_OW 255
69487: PUSH
69488: LD_VAR 0 1
69492: EQUAL
69493: IFFALSE 69509
// begin result := un ;
69495: LD_ADDR_VAR 0 3
69499: PUSH
69500: LD_VAR 0 5
69504: ST_TO_ADDR
// exit ;
69505: POP
69506: POP
69507: GO 69513
// end ; end ;
69509: GO 69460
69511: POP
69512: POP
// end ;
69513: LD_VAR 0 3
69517: RET
// export function GetCargoBay ( units ) ; begin
69518: LD_INT 0
69520: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69521: LD_ADDR_VAR 0 2
69525: PUSH
69526: LD_VAR 0 1
69530: PPUSH
69531: LD_INT 2
69533: PUSH
69534: LD_INT 34
69536: PUSH
69537: LD_INT 12
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 34
69546: PUSH
69547: LD_INT 51
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 34
69556: PUSH
69557: LD_INT 32
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 34
69566: PUSH
69567: LD_INT 89
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: PPUSH
69581: CALL_OW 72
69585: ST_TO_ADDR
// end ;
69586: LD_VAR 0 2
69590: RET
// export function Negate ( value ) ; begin
69591: LD_INT 0
69593: PPUSH
// result := not value ;
69594: LD_ADDR_VAR 0 2
69598: PUSH
69599: LD_VAR 0 1
69603: NOT
69604: ST_TO_ADDR
// end ;
69605: LD_VAR 0 2
69609: RET
// export function Inc ( value ) ; begin
69610: LD_INT 0
69612: PPUSH
// result := value + 1 ;
69613: LD_ADDR_VAR 0 2
69617: PUSH
69618: LD_VAR 0 1
69622: PUSH
69623: LD_INT 1
69625: PLUS
69626: ST_TO_ADDR
// end ;
69627: LD_VAR 0 2
69631: RET
// export function Dec ( value ) ; begin
69632: LD_INT 0
69634: PPUSH
// result := value - 1 ;
69635: LD_ADDR_VAR 0 2
69639: PUSH
69640: LD_VAR 0 1
69644: PUSH
69645: LD_INT 1
69647: MINUS
69648: ST_TO_ADDR
// end ;
69649: LD_VAR 0 2
69653: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69654: LD_INT 0
69656: PPUSH
69657: PPUSH
69658: PPUSH
69659: PPUSH
69660: PPUSH
69661: PPUSH
69662: PPUSH
69663: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69664: LD_VAR 0 1
69668: PPUSH
69669: LD_VAR 0 2
69673: PPUSH
69674: CALL_OW 488
69678: NOT
69679: IFTRUE 69698
69681: PUSH
69682: LD_VAR 0 3
69686: PPUSH
69687: LD_VAR 0 4
69691: PPUSH
69692: CALL_OW 488
69696: NOT
69697: OR
69698: IFFALSE 69711
// begin result := - 1 ;
69700: LD_ADDR_VAR 0 5
69704: PUSH
69705: LD_INT 1
69707: NEG
69708: ST_TO_ADDR
// exit ;
69709: GO 69946
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69711: LD_ADDR_VAR 0 12
69715: PUSH
69716: LD_VAR 0 1
69720: PPUSH
69721: LD_VAR 0 2
69725: PPUSH
69726: LD_VAR 0 3
69730: PPUSH
69731: LD_VAR 0 4
69735: PPUSH
69736: CALL 68782 0 4
69740: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69741: LD_ADDR_VAR 0 11
69745: PUSH
69746: LD_VAR 0 1
69750: PPUSH
69751: LD_VAR 0 2
69755: PPUSH
69756: LD_VAR 0 12
69760: PUSH
69761: LD_INT 1
69763: ARRAY
69764: PPUSH
69765: LD_VAR 0 12
69769: PUSH
69770: LD_INT 2
69772: ARRAY
69773: PPUSH
69774: CALL_OW 298
69778: ST_TO_ADDR
// distance := 9999 ;
69779: LD_ADDR_VAR 0 10
69783: PUSH
69784: LD_INT 9999
69786: ST_TO_ADDR
// for i := 0 to 5 do
69787: LD_ADDR_VAR 0 6
69791: PUSH
69792: DOUBLE
69793: LD_INT 0
69795: DEC
69796: ST_TO_ADDR
69797: LD_INT 5
69799: PUSH
69800: FOR_TO
69801: IFFALSE 69944
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69803: LD_ADDR_VAR 0 7
69807: PUSH
69808: LD_VAR 0 1
69812: PPUSH
69813: LD_VAR 0 6
69817: PPUSH
69818: LD_VAR 0 11
69822: PPUSH
69823: CALL_OW 272
69827: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69828: LD_ADDR_VAR 0 8
69832: PUSH
69833: LD_VAR 0 2
69837: PPUSH
69838: LD_VAR 0 6
69842: PPUSH
69843: LD_VAR 0 11
69847: PPUSH
69848: CALL_OW 273
69852: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69853: LD_VAR 0 7
69857: PPUSH
69858: LD_VAR 0 8
69862: PPUSH
69863: CALL_OW 488
69867: NOT
69868: IFFALSE 69872
// continue ;
69870: GO 69800
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69872: LD_ADDR_VAR 0 9
69876: PUSH
69877: LD_VAR 0 12
69881: PUSH
69882: LD_INT 1
69884: ARRAY
69885: PPUSH
69886: LD_VAR 0 12
69890: PUSH
69891: LD_INT 2
69893: ARRAY
69894: PPUSH
69895: LD_VAR 0 7
69899: PPUSH
69900: LD_VAR 0 8
69904: PPUSH
69905: CALL_OW 298
69909: ST_TO_ADDR
// if tmp < distance then
69910: LD_VAR 0 9
69914: PUSH
69915: LD_VAR 0 10
69919: LESS
69920: IFFALSE 69942
// begin result := i ;
69922: LD_ADDR_VAR 0 5
69926: PUSH
69927: LD_VAR 0 6
69931: ST_TO_ADDR
// distance := tmp ;
69932: LD_ADDR_VAR 0 10
69936: PUSH
69937: LD_VAR 0 9
69941: ST_TO_ADDR
// end ; end ;
69942: GO 69800
69944: POP
69945: POP
// end ;
69946: LD_VAR 0 5
69950: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69951: LD_INT 0
69953: PPUSH
69954: PPUSH
// if not driver or not IsInUnit ( driver ) then
69955: LD_VAR 0 1
69959: NOT
69960: IFTRUE 69974
69962: PUSH
69963: LD_VAR 0 1
69967: PPUSH
69968: CALL_OW 310
69972: NOT
69973: OR
69974: IFFALSE 69978
// exit ;
69976: GO 70068
// vehicle := IsInUnit ( driver ) ;
69978: LD_ADDR_VAR 0 3
69982: PUSH
69983: LD_VAR 0 1
69987: PPUSH
69988: CALL_OW 310
69992: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69993: LD_VAR 0 1
69997: PPUSH
69998: LD_STRING \
70000: PUSH
70001: LD_INT 0
70003: PUSH
70004: LD_INT 0
70006: PUSH
70007: LD_INT 0
70009: PUSH
70010: LD_INT 0
70012: PUSH
70013: LD_INT 0
70015: PUSH
70016: LD_INT 0
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: PUSH
70028: LD_STRING E
70030: PUSH
70031: LD_INT 0
70033: PUSH
70034: LD_INT 0
70036: PUSH
70037: LD_VAR 0 3
70041: PUSH
70042: LD_INT 0
70044: PUSH
70045: LD_INT 0
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PPUSH
70064: CALL_OW 446
// end ;
70068: LD_VAR 0 2
70072: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70073: LD_INT 0
70075: PPUSH
70076: PPUSH
// if not driver or not IsInUnit ( driver ) then
70077: LD_VAR 0 1
70081: NOT
70082: IFTRUE 70096
70084: PUSH
70085: LD_VAR 0 1
70089: PPUSH
70090: CALL_OW 310
70094: NOT
70095: OR
70096: IFFALSE 70100
// exit ;
70098: GO 70190
// vehicle := IsInUnit ( driver ) ;
70100: LD_ADDR_VAR 0 3
70104: PUSH
70105: LD_VAR 0 1
70109: PPUSH
70110: CALL_OW 310
70114: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70115: LD_VAR 0 1
70119: PPUSH
70120: LD_STRING \
70122: PUSH
70123: LD_INT 0
70125: PUSH
70126: LD_INT 0
70128: PUSH
70129: LD_INT 0
70131: PUSH
70132: LD_INT 0
70134: PUSH
70135: LD_INT 0
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: PUSH
70150: LD_STRING E
70152: PUSH
70153: LD_INT 0
70155: PUSH
70156: LD_INT 0
70158: PUSH
70159: LD_VAR 0 3
70163: PUSH
70164: LD_INT 0
70166: PUSH
70167: LD_INT 0
70169: PUSH
70170: LD_INT 0
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PPUSH
70186: CALL_OW 447
// end ;
70190: LD_VAR 0 2
70194: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70195: LD_INT 0
70197: PPUSH
70198: PPUSH
70199: PPUSH
// tmp := [ ] ;
70200: LD_ADDR_VAR 0 5
70204: PUSH
70205: EMPTY
70206: ST_TO_ADDR
// for i in units do
70207: LD_ADDR_VAR 0 4
70211: PUSH
70212: LD_VAR 0 1
70216: PUSH
70217: FOR_IN
70218: IFFALSE 70256
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70220: LD_ADDR_VAR 0 5
70224: PUSH
70225: LD_VAR 0 5
70229: PPUSH
70230: LD_VAR 0 5
70234: PUSH
70235: LD_INT 1
70237: PLUS
70238: PPUSH
70239: LD_VAR 0 4
70243: PPUSH
70244: CALL_OW 256
70248: PPUSH
70249: CALL_OW 2
70253: ST_TO_ADDR
70254: GO 70217
70256: POP
70257: POP
// if not tmp then
70258: LD_VAR 0 5
70262: NOT
70263: IFFALSE 70267
// exit ;
70265: GO 70315
// if asc then
70267: LD_VAR 0 2
70271: IFFALSE 70295
// result := SortListByListAsc ( units , tmp ) else
70273: LD_ADDR_VAR 0 3
70277: PUSH
70278: LD_VAR 0 1
70282: PPUSH
70283: LD_VAR 0 5
70287: PPUSH
70288: CALL_OW 76
70292: ST_TO_ADDR
70293: GO 70315
// result := SortListByListDesc ( units , tmp ) ;
70295: LD_ADDR_VAR 0 3
70299: PUSH
70300: LD_VAR 0 1
70304: PPUSH
70305: LD_VAR 0 5
70309: PPUSH
70310: CALL_OW 77
70314: ST_TO_ADDR
// end ;
70315: LD_VAR 0 3
70319: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70320: LD_INT 0
70322: PPUSH
70323: PPUSH
// task := GetTaskList ( mech ) ;
70324: LD_ADDR_VAR 0 4
70328: PUSH
70329: LD_VAR 0 1
70333: PPUSH
70334: CALL_OW 437
70338: ST_TO_ADDR
// if not task then
70339: LD_VAR 0 4
70343: NOT
70344: IFFALSE 70348
// exit ;
70346: GO 70392
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70348: LD_ADDR_VAR 0 3
70352: PUSH
70353: LD_VAR 0 4
70357: PUSH
70358: LD_INT 1
70360: ARRAY
70361: PUSH
70362: LD_INT 1
70364: ARRAY
70365: PUSH
70366: LD_STRING r
70368: EQUAL
70369: IFFALSE 70391
70371: PUSH
70372: LD_VAR 0 4
70376: PUSH
70377: LD_INT 1
70379: ARRAY
70380: PUSH
70381: LD_INT 4
70383: ARRAY
70384: PUSH
70385: LD_VAR 0 2
70389: EQUAL
70390: AND
70391: ST_TO_ADDR
// end ;
70392: LD_VAR 0 3
70396: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70397: LD_INT 0
70399: PPUSH
// SetDir ( unit , d ) ;
70400: LD_VAR 0 1
70404: PPUSH
70405: LD_VAR 0 4
70409: PPUSH
70410: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70414: LD_ADDR_VAR 0 6
70418: PUSH
70419: LD_VAR 0 1
70423: PPUSH
70424: LD_VAR 0 2
70428: PPUSH
70429: LD_VAR 0 3
70433: PPUSH
70434: LD_VAR 0 5
70438: PPUSH
70439: CALL_OW 48
70443: ST_TO_ADDR
// end ;
70444: LD_VAR 0 6
70448: RET
// export function ToNaturalNumber ( number ) ; begin
70449: LD_INT 0
70451: PPUSH
// result := number div 1 ;
70452: LD_ADDR_VAR 0 2
70456: PUSH
70457: LD_VAR 0 1
70461: PUSH
70462: LD_INT 1
70464: DIV
70465: ST_TO_ADDR
// if number < 0 then
70466: LD_VAR 0 1
70470: PUSH
70471: LD_INT 0
70473: LESS
70474: IFFALSE 70484
// result := 0 ;
70476: LD_ADDR_VAR 0 2
70480: PUSH
70481: LD_INT 0
70483: ST_TO_ADDR
// end ;
70484: LD_VAR 0 2
70488: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70489: LD_INT 0
70491: PPUSH
70492: PPUSH
70493: PPUSH
// if not buildings then
70494: LD_VAR 0 1
70498: NOT
70499: IFFALSE 70503
// exit ;
70501: GO 70618
// tmp := [ ] ;
70503: LD_ADDR_VAR 0 5
70507: PUSH
70508: EMPTY
70509: ST_TO_ADDR
// for b in buildings do
70510: LD_ADDR_VAR 0 4
70514: PUSH
70515: LD_VAR 0 1
70519: PUSH
70520: FOR_IN
70521: IFFALSE 70559
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70523: LD_ADDR_VAR 0 5
70527: PUSH
70528: LD_VAR 0 5
70532: PPUSH
70533: LD_VAR 0 5
70537: PUSH
70538: LD_INT 1
70540: PLUS
70541: PPUSH
70542: LD_VAR 0 4
70546: PPUSH
70547: CALL_OW 266
70551: PPUSH
70552: CALL_OW 1
70556: ST_TO_ADDR
70557: GO 70520
70559: POP
70560: POP
// if not tmp then
70561: LD_VAR 0 5
70565: NOT
70566: IFFALSE 70570
// exit ;
70568: GO 70618
// if asc then
70570: LD_VAR 0 2
70574: IFFALSE 70598
// result := SortListByListAsc ( buildings , tmp ) else
70576: LD_ADDR_VAR 0 3
70580: PUSH
70581: LD_VAR 0 1
70585: PPUSH
70586: LD_VAR 0 5
70590: PPUSH
70591: CALL_OW 76
70595: ST_TO_ADDR
70596: GO 70618
// result := SortListByListDesc ( buildings , tmp ) ;
70598: LD_ADDR_VAR 0 3
70602: PUSH
70603: LD_VAR 0 1
70607: PPUSH
70608: LD_VAR 0 5
70612: PPUSH
70613: CALL_OW 77
70617: ST_TO_ADDR
// end ;
70618: LD_VAR 0 3
70622: RET
// export function SortByClass ( units , class ) ; var un ; begin
70623: LD_INT 0
70625: PPUSH
70626: PPUSH
// if not units or not class then
70627: LD_VAR 0 1
70631: NOT
70632: IFTRUE 70641
70634: PUSH
70635: LD_VAR 0 2
70639: NOT
70640: OR
70641: IFFALSE 70645
// exit ;
70643: GO 70740
// result := [ ] ;
70645: LD_ADDR_VAR 0 3
70649: PUSH
70650: EMPTY
70651: ST_TO_ADDR
// for un in units do
70652: LD_ADDR_VAR 0 4
70656: PUSH
70657: LD_VAR 0 1
70661: PUSH
70662: FOR_IN
70663: IFFALSE 70738
// if GetClass ( un ) = class then
70665: LD_VAR 0 4
70669: PPUSH
70670: CALL_OW 257
70674: PUSH
70675: LD_VAR 0 2
70679: EQUAL
70680: IFFALSE 70707
// result := Insert ( result , 1 , un ) else
70682: LD_ADDR_VAR 0 3
70686: PUSH
70687: LD_VAR 0 3
70691: PPUSH
70692: LD_INT 1
70694: PPUSH
70695: LD_VAR 0 4
70699: PPUSH
70700: CALL_OW 2
70704: ST_TO_ADDR
70705: GO 70736
// result := Replace ( result , result + 1 , un ) ;
70707: LD_ADDR_VAR 0 3
70711: PUSH
70712: LD_VAR 0 3
70716: PPUSH
70717: LD_VAR 0 3
70721: PUSH
70722: LD_INT 1
70724: PLUS
70725: PPUSH
70726: LD_VAR 0 4
70730: PPUSH
70731: CALL_OW 1
70735: ST_TO_ADDR
70736: GO 70662
70738: POP
70739: POP
// end ;
70740: LD_VAR 0 3
70744: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70745: LD_INT 0
70747: PPUSH
70748: PPUSH
70749: PPUSH
70750: PPUSH
70751: PPUSH
70752: PPUSH
70753: PPUSH
// result := [ ] ;
70754: LD_ADDR_VAR 0 4
70758: PUSH
70759: EMPTY
70760: ST_TO_ADDR
// if x - r < 0 then
70761: LD_VAR 0 1
70765: PUSH
70766: LD_VAR 0 3
70770: MINUS
70771: PUSH
70772: LD_INT 0
70774: LESS
70775: IFFALSE 70787
// min_x := 0 else
70777: LD_ADDR_VAR 0 8
70781: PUSH
70782: LD_INT 0
70784: ST_TO_ADDR
70785: GO 70803
// min_x := x - r ;
70787: LD_ADDR_VAR 0 8
70791: PUSH
70792: LD_VAR 0 1
70796: PUSH
70797: LD_VAR 0 3
70801: MINUS
70802: ST_TO_ADDR
// if y - r < 0 then
70803: LD_VAR 0 2
70807: PUSH
70808: LD_VAR 0 3
70812: MINUS
70813: PUSH
70814: LD_INT 0
70816: LESS
70817: IFFALSE 70829
// min_y := 0 else
70819: LD_ADDR_VAR 0 7
70823: PUSH
70824: LD_INT 0
70826: ST_TO_ADDR
70827: GO 70845
// min_y := y - r ;
70829: LD_ADDR_VAR 0 7
70833: PUSH
70834: LD_VAR 0 2
70838: PUSH
70839: LD_VAR 0 3
70843: MINUS
70844: ST_TO_ADDR
// max_x := x + r ;
70845: LD_ADDR_VAR 0 9
70849: PUSH
70850: LD_VAR 0 1
70854: PUSH
70855: LD_VAR 0 3
70859: PLUS
70860: ST_TO_ADDR
// max_y := y + r ;
70861: LD_ADDR_VAR 0 10
70865: PUSH
70866: LD_VAR 0 2
70870: PUSH
70871: LD_VAR 0 3
70875: PLUS
70876: ST_TO_ADDR
// for _x = min_x to max_x do
70877: LD_ADDR_VAR 0 5
70881: PUSH
70882: DOUBLE
70883: LD_VAR 0 8
70887: DEC
70888: ST_TO_ADDR
70889: LD_VAR 0 9
70893: PUSH
70894: FOR_TO
70895: IFFALSE 70996
// for _y = min_y to max_y do
70897: LD_ADDR_VAR 0 6
70901: PUSH
70902: DOUBLE
70903: LD_VAR 0 7
70907: DEC
70908: ST_TO_ADDR
70909: LD_VAR 0 10
70913: PUSH
70914: FOR_TO
70915: IFFALSE 70992
// begin if not ValidHex ( _x , _y ) then
70917: LD_VAR 0 5
70921: PPUSH
70922: LD_VAR 0 6
70926: PPUSH
70927: CALL_OW 488
70931: NOT
70932: IFFALSE 70936
// continue ;
70934: GO 70914
// if GetResourceTypeXY ( _x , _y ) then
70936: LD_VAR 0 5
70940: PPUSH
70941: LD_VAR 0 6
70945: PPUSH
70946: CALL_OW 283
70950: IFFALSE 70990
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70952: LD_ADDR_VAR 0 4
70956: PUSH
70957: LD_VAR 0 4
70961: PPUSH
70962: LD_VAR 0 4
70966: PUSH
70967: LD_INT 1
70969: PLUS
70970: PPUSH
70971: LD_VAR 0 5
70975: PUSH
70976: LD_VAR 0 6
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PPUSH
70985: CALL_OW 1
70989: ST_TO_ADDR
// end ;
70990: GO 70914
70992: POP
70993: POP
70994: GO 70894
70996: POP
70997: POP
// end ;
70998: LD_VAR 0 4
71002: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71003: LD_INT 0
71005: PPUSH
71006: PPUSH
71007: PPUSH
71008: PPUSH
71009: PPUSH
71010: PPUSH
71011: PPUSH
71012: PPUSH
// if not units then
71013: LD_VAR 0 1
71017: NOT
71018: IFFALSE 71022
// exit ;
71020: GO 71554
// result := UnitFilter ( units , [ f_ok ] ) ;
71022: LD_ADDR_VAR 0 3
71026: PUSH
71027: LD_VAR 0 1
71031: PPUSH
71032: LD_INT 50
71034: PUSH
71035: EMPTY
71036: LIST
71037: PPUSH
71038: CALL_OW 72
71042: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71043: LD_ADDR_VAR 0 8
71047: PUSH
71048: LD_VAR 0 1
71052: PUSH
71053: LD_INT 1
71055: ARRAY
71056: PPUSH
71057: CALL_OW 255
71061: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71062: LD_ADDR_VAR 0 10
71066: PUSH
71067: LD_INT 29
71069: PUSH
71070: LD_INT 91
71072: PUSH
71073: LD_INT 49
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: LIST
71080: ST_TO_ADDR
// if not result then
71081: LD_VAR 0 3
71085: NOT
71086: IFFALSE 71090
// exit ;
71088: GO 71554
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71090: LD_ADDR_VAR 0 5
71094: PUSH
71095: LD_INT 81
71097: PUSH
71098: LD_VAR 0 8
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PPUSH
71107: CALL_OW 69
71111: ST_TO_ADDR
// for i in result do
71112: LD_ADDR_VAR 0 4
71116: PUSH
71117: LD_VAR 0 3
71121: PUSH
71122: FOR_IN
71123: IFFALSE 71552
// begin tag := GetTag ( i ) + 1 ;
71125: LD_ADDR_VAR 0 9
71129: PUSH
71130: LD_VAR 0 4
71134: PPUSH
71135: CALL_OW 110
71139: PUSH
71140: LD_INT 1
71142: PLUS
71143: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71144: LD_ADDR_VAR 0 7
71148: PUSH
71149: LD_VAR 0 4
71153: PPUSH
71154: CALL_OW 250
71158: PPUSH
71159: LD_VAR 0 4
71163: PPUSH
71164: CALL_OW 251
71168: PPUSH
71169: LD_INT 4
71171: PPUSH
71172: CALL 70745 0 3
71176: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71177: LD_VAR 0 4
71181: PPUSH
71182: CALL_OW 247
71186: PUSH
71187: LD_INT 2
71189: EQUAL
71190: IFFALSE 71202
71192: PUSH
71193: LD_VAR 0 7
71197: PUSH
71198: LD_INT 2
71200: GREATER
71201: AND
71202: IFFALSE 71222
71204: PUSH
71205: LD_VAR 0 4
71209: PPUSH
71210: CALL_OW 264
71214: PUSH
71215: LD_VAR 0 10
71219: IN
71220: NOT
71221: AND
71222: IFFALSE 71261
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71224: LD_VAR 0 4
71228: PPUSH
71229: LD_VAR 0 7
71233: PUSH
71234: LD_INT 1
71236: ARRAY
71237: PUSH
71238: LD_INT 1
71240: ARRAY
71241: PPUSH
71242: LD_VAR 0 7
71246: PUSH
71247: LD_INT 1
71249: ARRAY
71250: PUSH
71251: LD_INT 2
71253: ARRAY
71254: PPUSH
71255: CALL_OW 116
71259: GO 71550
// if path > tag then
71261: LD_VAR 0 2
71265: PUSH
71266: LD_VAR 0 9
71270: GREATER
71271: IFFALSE 71479
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71273: LD_ADDR_VAR 0 6
71277: PUSH
71278: LD_VAR 0 5
71282: PPUSH
71283: LD_INT 91
71285: PUSH
71286: LD_VAR 0 4
71290: PUSH
71291: LD_INT 8
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: LIST
71298: PPUSH
71299: CALL_OW 72
71303: ST_TO_ADDR
// if nearEnemy then
71304: LD_VAR 0 6
71308: IFFALSE 71377
// begin if GetWeapon ( i ) = ru_time_lapser then
71310: LD_VAR 0 4
71314: PPUSH
71315: CALL_OW 264
71319: PUSH
71320: LD_INT 49
71322: EQUAL
71323: IFFALSE 71351
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71325: LD_VAR 0 4
71329: PPUSH
71330: LD_VAR 0 6
71334: PPUSH
71335: LD_VAR 0 4
71339: PPUSH
71340: CALL_OW 74
71344: PPUSH
71345: CALL_OW 112
71349: GO 71375
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71351: LD_VAR 0 4
71355: PPUSH
71356: LD_VAR 0 6
71360: PPUSH
71361: LD_VAR 0 4
71365: PPUSH
71366: CALL_OW 74
71370: PPUSH
71371: CALL 72635 0 2
// end else
71375: GO 71477
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71377: LD_VAR 0 4
71381: PPUSH
71382: LD_VAR 0 2
71386: PUSH
71387: LD_VAR 0 9
71391: ARRAY
71392: PUSH
71393: LD_INT 1
71395: ARRAY
71396: PPUSH
71397: LD_VAR 0 2
71401: PUSH
71402: LD_VAR 0 9
71406: ARRAY
71407: PUSH
71408: LD_INT 2
71410: ARRAY
71411: PPUSH
71412: CALL_OW 297
71416: PUSH
71417: LD_INT 6
71419: GREATER
71420: IFFALSE 71463
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71422: LD_VAR 0 4
71426: PPUSH
71427: LD_VAR 0 2
71431: PUSH
71432: LD_VAR 0 9
71436: ARRAY
71437: PUSH
71438: LD_INT 1
71440: ARRAY
71441: PPUSH
71442: LD_VAR 0 2
71446: PUSH
71447: LD_VAR 0 9
71451: ARRAY
71452: PUSH
71453: LD_INT 2
71455: ARRAY
71456: PPUSH
71457: CALL_OW 114
71461: GO 71477
// SetTag ( i , tag ) ;
71463: LD_VAR 0 4
71467: PPUSH
71468: LD_VAR 0 9
71472: PPUSH
71473: CALL_OW 109
// end else
71477: GO 71550
// if enemy then
71479: LD_VAR 0 5
71483: IFFALSE 71550
// begin if GetWeapon ( i ) = ru_time_lapser then
71485: LD_VAR 0 4
71489: PPUSH
71490: CALL_OW 264
71494: PUSH
71495: LD_INT 49
71497: EQUAL
71498: IFFALSE 71526
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71500: LD_VAR 0 4
71504: PPUSH
71505: LD_VAR 0 5
71509: PPUSH
71510: LD_VAR 0 4
71514: PPUSH
71515: CALL_OW 74
71519: PPUSH
71520: CALL_OW 112
71524: GO 71550
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71526: LD_VAR 0 4
71530: PPUSH
71531: LD_VAR 0 5
71535: PPUSH
71536: LD_VAR 0 4
71540: PPUSH
71541: CALL_OW 74
71545: PPUSH
71546: CALL 72635 0 2
// end ; end ;
71550: GO 71122
71552: POP
71553: POP
// end ;
71554: LD_VAR 0 3
71558: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71559: LD_INT 0
71561: PPUSH
71562: PPUSH
71563: PPUSH
// if not unit or IsInUnit ( unit ) then
71564: LD_VAR 0 1
71568: NOT
71569: IFTRUE 71582
71571: PUSH
71572: LD_VAR 0 1
71576: PPUSH
71577: CALL_OW 310
71581: OR
71582: IFFALSE 71586
// exit ;
71584: GO 71677
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71586: LD_ADDR_VAR 0 4
71590: PUSH
71591: LD_VAR 0 1
71595: PPUSH
71596: CALL_OW 250
71600: PPUSH
71601: LD_VAR 0 2
71605: PPUSH
71606: LD_INT 1
71608: PPUSH
71609: CALL_OW 272
71613: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71614: LD_ADDR_VAR 0 5
71618: PUSH
71619: LD_VAR 0 1
71623: PPUSH
71624: CALL_OW 251
71628: PPUSH
71629: LD_VAR 0 2
71633: PPUSH
71634: LD_INT 1
71636: PPUSH
71637: CALL_OW 273
71641: ST_TO_ADDR
// if ValidHex ( x , y ) then
71642: LD_VAR 0 4
71646: PPUSH
71647: LD_VAR 0 5
71651: PPUSH
71652: CALL_OW 488
71656: IFFALSE 71677
// ComTurnXY ( unit , x , y ) ;
71658: LD_VAR 0 1
71662: PPUSH
71663: LD_VAR 0 4
71667: PPUSH
71668: LD_VAR 0 5
71672: PPUSH
71673: CALL_OW 118
// end ;
71677: LD_VAR 0 3
71681: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71682: LD_INT 0
71684: PPUSH
71685: PPUSH
// result := false ;
71686: LD_ADDR_VAR 0 3
71690: PUSH
71691: LD_INT 0
71693: ST_TO_ADDR
// if not units then
71694: LD_VAR 0 2
71698: NOT
71699: IFFALSE 71703
// exit ;
71701: GO 71748
// for i in units do
71703: LD_ADDR_VAR 0 4
71707: PUSH
71708: LD_VAR 0 2
71712: PUSH
71713: FOR_IN
71714: IFFALSE 71746
// if See ( side , i ) then
71716: LD_VAR 0 1
71720: PPUSH
71721: LD_VAR 0 4
71725: PPUSH
71726: CALL_OW 292
71730: IFFALSE 71744
// begin result := true ;
71732: LD_ADDR_VAR 0 3
71736: PUSH
71737: LD_INT 1
71739: ST_TO_ADDR
// exit ;
71740: POP
71741: POP
71742: GO 71748
// end ;
71744: GO 71713
71746: POP
71747: POP
// end ;
71748: LD_VAR 0 3
71752: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71753: LD_INT 0
71755: PPUSH
71756: PPUSH
71757: PPUSH
71758: PPUSH
// if not unit or not points then
71759: LD_VAR 0 1
71763: NOT
71764: IFTRUE 71773
71766: PUSH
71767: LD_VAR 0 2
71771: NOT
71772: OR
71773: IFFALSE 71777
// exit ;
71775: GO 71867
// dist := 99999 ;
71777: LD_ADDR_VAR 0 5
71781: PUSH
71782: LD_INT 99999
71784: ST_TO_ADDR
// for i in points do
71785: LD_ADDR_VAR 0 4
71789: PUSH
71790: LD_VAR 0 2
71794: PUSH
71795: FOR_IN
71796: IFFALSE 71865
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71798: LD_ADDR_VAR 0 6
71802: PUSH
71803: LD_VAR 0 1
71807: PPUSH
71808: LD_VAR 0 4
71812: PUSH
71813: LD_INT 1
71815: ARRAY
71816: PPUSH
71817: LD_VAR 0 4
71821: PUSH
71822: LD_INT 2
71824: ARRAY
71825: PPUSH
71826: CALL_OW 297
71830: ST_TO_ADDR
// if tmpDist < dist then
71831: LD_VAR 0 6
71835: PUSH
71836: LD_VAR 0 5
71840: LESS
71841: IFFALSE 71863
// begin result := i ;
71843: LD_ADDR_VAR 0 3
71847: PUSH
71848: LD_VAR 0 4
71852: ST_TO_ADDR
// dist := tmpDist ;
71853: LD_ADDR_VAR 0 5
71857: PUSH
71858: LD_VAR 0 6
71862: ST_TO_ADDR
// end ; end ;
71863: GO 71795
71865: POP
71866: POP
// end ;
71867: LD_VAR 0 3
71871: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71872: LD_INT 0
71874: PPUSH
// uc_side := side ;
71875: LD_ADDR_OWVAR 20
71879: PUSH
71880: LD_VAR 0 1
71884: ST_TO_ADDR
// uc_nation := 3 ;
71885: LD_ADDR_OWVAR 21
71889: PUSH
71890: LD_INT 3
71892: ST_TO_ADDR
// vc_chassis := 25 ;
71893: LD_ADDR_OWVAR 37
71897: PUSH
71898: LD_INT 25
71900: ST_TO_ADDR
// vc_engine := engine_siberite ;
71901: LD_ADDR_OWVAR 39
71905: PUSH
71906: LD_INT 3
71908: ST_TO_ADDR
// vc_control := control_computer ;
71909: LD_ADDR_OWVAR 38
71913: PUSH
71914: LD_INT 3
71916: ST_TO_ADDR
// vc_weapon := 59 ;
71917: LD_ADDR_OWVAR 40
71921: PUSH
71922: LD_INT 59
71924: ST_TO_ADDR
// result := CreateVehicle ;
71925: LD_ADDR_VAR 0 5
71929: PUSH
71930: CALL_OW 45
71934: ST_TO_ADDR
// SetDir ( result , d ) ;
71935: LD_VAR 0 5
71939: PPUSH
71940: LD_VAR 0 4
71944: PPUSH
71945: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71949: LD_VAR 0 5
71953: PPUSH
71954: LD_VAR 0 2
71958: PPUSH
71959: LD_VAR 0 3
71963: PPUSH
71964: LD_INT 0
71966: PPUSH
71967: CALL_OW 48
// end ;
71971: LD_VAR 0 5
71975: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71976: LD_INT 0
71978: PPUSH
71979: PPUSH
71980: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71981: LD_ADDR_VAR 0 2
71985: PUSH
71986: LD_INT 0
71988: PUSH
71989: LD_INT 0
71991: PUSH
71992: LD_INT 0
71994: PUSH
71995: LD_INT 0
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72004: LD_VAR 0 1
72008: NOT
72009: IFTRUE 72042
72011: PUSH
72012: LD_VAR 0 1
72016: PPUSH
72017: CALL_OW 264
72021: PUSH
72022: LD_INT 12
72024: PUSH
72025: LD_INT 51
72027: PUSH
72028: LD_INT 32
72030: PUSH
72031: LD_INT 89
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: IN
72040: NOT
72041: OR
72042: IFFALSE 72046
// exit ;
72044: GO 72144
// for i := 1 to 3 do
72046: LD_ADDR_VAR 0 3
72050: PUSH
72051: DOUBLE
72052: LD_INT 1
72054: DEC
72055: ST_TO_ADDR
72056: LD_INT 3
72058: PUSH
72059: FOR_TO
72060: IFFALSE 72142
// begin tmp := GetCargo ( cargo , i ) ;
72062: LD_ADDR_VAR 0 4
72066: PUSH
72067: LD_VAR 0 1
72071: PPUSH
72072: LD_VAR 0 3
72076: PPUSH
72077: CALL_OW 289
72081: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72082: LD_ADDR_VAR 0 2
72086: PUSH
72087: LD_VAR 0 2
72091: PPUSH
72092: LD_VAR 0 3
72096: PPUSH
72097: LD_VAR 0 4
72101: PPUSH
72102: CALL_OW 1
72106: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72107: LD_ADDR_VAR 0 2
72111: PUSH
72112: LD_VAR 0 2
72116: PPUSH
72117: LD_INT 4
72119: PPUSH
72120: LD_VAR 0 2
72124: PUSH
72125: LD_INT 4
72127: ARRAY
72128: PUSH
72129: LD_VAR 0 4
72133: PLUS
72134: PPUSH
72135: CALL_OW 1
72139: ST_TO_ADDR
// end ;
72140: GO 72059
72142: POP
72143: POP
// end ;
72144: LD_VAR 0 2
72148: RET
// export function Length ( array ) ; begin
72149: LD_INT 0
72151: PPUSH
// result := array + 0 ;
72152: LD_ADDR_VAR 0 2
72156: PUSH
72157: LD_VAR 0 1
72161: PUSH
72162: LD_INT 0
72164: PLUS
72165: ST_TO_ADDR
// end ;
72166: LD_VAR 0 2
72170: RET
// export function PrepareArray ( array ) ; begin
72171: LD_INT 0
72173: PPUSH
// result := array diff 0 ;
72174: LD_ADDR_VAR 0 2
72178: PUSH
72179: LD_VAR 0 1
72183: PUSH
72184: LD_INT 0
72186: DIFF
72187: ST_TO_ADDR
// if not result [ 1 ] then
72188: LD_VAR 0 2
72192: PUSH
72193: LD_INT 1
72195: ARRAY
72196: NOT
72197: IFFALSE 72217
// result := Delete ( result , 1 ) ;
72199: LD_ADDR_VAR 0 2
72203: PUSH
72204: LD_VAR 0 2
72208: PPUSH
72209: LD_INT 1
72211: PPUSH
72212: CALL_OW 3
72216: ST_TO_ADDR
// end ;
72217: LD_VAR 0 2
72221: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72222: LD_INT 0
72224: PPUSH
72225: PPUSH
72226: PPUSH
72227: PPUSH
// sibRocketRange := 25 ;
72228: LD_ADDR_VAR 0 6
72232: PUSH
72233: LD_INT 25
72235: ST_TO_ADDR
// result := false ;
72236: LD_ADDR_VAR 0 4
72240: PUSH
72241: LD_INT 0
72243: ST_TO_ADDR
// for i := 0 to 5 do
72244: LD_ADDR_VAR 0 5
72248: PUSH
72249: DOUBLE
72250: LD_INT 0
72252: DEC
72253: ST_TO_ADDR
72254: LD_INT 5
72256: PUSH
72257: FOR_TO
72258: IFFALSE 72325
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72260: LD_VAR 0 1
72264: PPUSH
72265: LD_VAR 0 5
72269: PPUSH
72270: LD_VAR 0 6
72274: PPUSH
72275: CALL_OW 272
72279: PPUSH
72280: LD_VAR 0 2
72284: PPUSH
72285: LD_VAR 0 5
72289: PPUSH
72290: LD_VAR 0 6
72294: PPUSH
72295: CALL_OW 273
72299: PPUSH
72300: LD_VAR 0 3
72304: PPUSH
72305: CALL_OW 309
72309: IFFALSE 72323
// begin result := true ;
72311: LD_ADDR_VAR 0 4
72315: PUSH
72316: LD_INT 1
72318: ST_TO_ADDR
// exit ;
72319: POP
72320: POP
72321: GO 72327
// end ;
72323: GO 72257
72325: POP
72326: POP
// end ;
72327: LD_VAR 0 4
72331: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72332: LD_INT 0
72334: PPUSH
72335: PPUSH
72336: PPUSH
// if btype = b_depot then
72337: LD_VAR 0 2
72341: PUSH
72342: LD_INT 0
72344: EQUAL
72345: IFFALSE 72357
// begin result := true ;
72347: LD_ADDR_VAR 0 3
72351: PUSH
72352: LD_INT 1
72354: ST_TO_ADDR
// exit ;
72355: GO 72477
// end ; pom := GetBase ( depot ) ;
72357: LD_ADDR_VAR 0 4
72361: PUSH
72362: LD_VAR 0 1
72366: PPUSH
72367: CALL_OW 274
72371: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72372: LD_ADDR_VAR 0 5
72376: PUSH
72377: LD_VAR 0 2
72381: PPUSH
72382: LD_VAR 0 1
72386: PPUSH
72387: CALL_OW 248
72391: PPUSH
72392: CALL_OW 450
72396: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72397: LD_ADDR_VAR 0 3
72401: PUSH
72402: LD_VAR 0 4
72406: PPUSH
72407: LD_INT 1
72409: PPUSH
72410: CALL_OW 275
72414: PUSH
72415: LD_VAR 0 5
72419: PUSH
72420: LD_INT 1
72422: ARRAY
72423: GREATEREQUAL
72424: IFFALSE 72450
72426: PUSH
72427: LD_VAR 0 4
72431: PPUSH
72432: LD_INT 2
72434: PPUSH
72435: CALL_OW 275
72439: PUSH
72440: LD_VAR 0 5
72444: PUSH
72445: LD_INT 2
72447: ARRAY
72448: GREATEREQUAL
72449: AND
72450: IFFALSE 72476
72452: PUSH
72453: LD_VAR 0 4
72457: PPUSH
72458: LD_INT 3
72460: PPUSH
72461: CALL_OW 275
72465: PUSH
72466: LD_VAR 0 5
72470: PUSH
72471: LD_INT 3
72473: ARRAY
72474: GREATEREQUAL
72475: AND
72476: ST_TO_ADDR
// end ;
72477: LD_VAR 0 3
72481: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72482: LD_INT 0
72484: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72485: LD_VAR 0 1
72489: PPUSH
72490: LD_VAR 0 2
72494: PPUSH
72495: LD_INT 0
72497: PPUSH
72498: LD_INT 0
72500: PPUSH
72501: LD_INT 1
72503: PPUSH
72504: LD_INT 0
72506: PPUSH
72507: CALL_OW 587
// end ;
72511: LD_VAR 0 3
72515: RET
// export function CenterOnNow ( unit ) ; begin
72516: LD_INT 0
72518: PPUSH
// result := IsInUnit ( unit ) ;
72519: LD_ADDR_VAR 0 2
72523: PUSH
72524: LD_VAR 0 1
72528: PPUSH
72529: CALL_OW 310
72533: ST_TO_ADDR
// if not result then
72534: LD_VAR 0 2
72538: NOT
72539: IFFALSE 72551
// result := unit ;
72541: LD_ADDR_VAR 0 2
72545: PUSH
72546: LD_VAR 0 1
72550: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72551: LD_VAR 0 1
72555: PPUSH
72556: CALL_OW 87
// end ;
72560: LD_VAR 0 2
72564: RET
// export function ComMoveHex ( unit , hex ) ; begin
72565: LD_INT 0
72567: PPUSH
// if not hex then
72568: LD_VAR 0 2
72572: NOT
72573: IFFALSE 72577
// exit ;
72575: GO 72630
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72577: LD_VAR 0 2
72581: PUSH
72582: LD_INT 1
72584: ARRAY
72585: PPUSH
72586: LD_VAR 0 2
72590: PUSH
72591: LD_INT 2
72593: ARRAY
72594: PPUSH
72595: CALL_OW 428
72599: IFFALSE 72603
// exit ;
72601: GO 72630
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72603: LD_VAR 0 1
72607: PPUSH
72608: LD_VAR 0 2
72612: PUSH
72613: LD_INT 1
72615: ARRAY
72616: PPUSH
72617: LD_VAR 0 2
72621: PUSH
72622: LD_INT 2
72624: ARRAY
72625: PPUSH
72626: CALL_OW 111
// end ;
72630: LD_VAR 0 3
72634: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72635: LD_INT 0
72637: PPUSH
72638: PPUSH
72639: PPUSH
// if not unit or not enemy then
72640: LD_VAR 0 1
72644: NOT
72645: IFTRUE 72654
72647: PUSH
72648: LD_VAR 0 2
72652: NOT
72653: OR
72654: IFFALSE 72658
// exit ;
72656: GO 72784
// x := GetX ( enemy ) ;
72658: LD_ADDR_VAR 0 4
72662: PUSH
72663: LD_VAR 0 2
72667: PPUSH
72668: CALL_OW 250
72672: ST_TO_ADDR
// y := GetY ( enemy ) ;
72673: LD_ADDR_VAR 0 5
72677: PUSH
72678: LD_VAR 0 2
72682: PPUSH
72683: CALL_OW 251
72687: ST_TO_ADDR
// if ValidHex ( x , y ) then
72688: LD_VAR 0 4
72692: PPUSH
72693: LD_VAR 0 5
72697: PPUSH
72698: CALL_OW 488
72702: IFFALSE 72784
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72704: LD_VAR 0 2
72708: PPUSH
72709: CALL_OW 247
72713: PUSH
72714: LD_INT 3
72716: PUSH
72717: LD_INT 2
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: IN
72724: IFTRUE 72747
72726: PUSH
72727: LD_VAR 0 1
72731: PPUSH
72732: CALL_OW 255
72736: PPUSH
72737: LD_VAR 0 2
72741: PPUSH
72742: CALL_OW 292
72746: OR
72747: IFFALSE 72765
// ComAttackUnit ( unit , enemy ) else
72749: LD_VAR 0 1
72753: PPUSH
72754: LD_VAR 0 2
72758: PPUSH
72759: CALL_OW 115
72763: GO 72784
// ComAgressiveMove ( unit , x , y ) ;
72765: LD_VAR 0 1
72769: PPUSH
72770: LD_VAR 0 4
72774: PPUSH
72775: LD_VAR 0 5
72779: PPUSH
72780: CALL_OW 114
// end ;
72784: LD_VAR 0 3
72788: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72789: LD_INT 0
72791: PPUSH
72792: PPUSH
72793: PPUSH
// list := AreaToList ( area , 0 ) ;
72794: LD_ADDR_VAR 0 5
72798: PUSH
72799: LD_VAR 0 1
72803: PPUSH
72804: LD_INT 0
72806: PPUSH
72807: CALL_OW 517
72811: ST_TO_ADDR
// if not list then
72812: LD_VAR 0 5
72816: NOT
72817: IFFALSE 72821
// exit ;
72819: GO 72951
// if all then
72821: LD_VAR 0 2
72825: IFFALSE 72913
// begin for i := 1 to list [ 1 ] do
72827: LD_ADDR_VAR 0 4
72831: PUSH
72832: DOUBLE
72833: LD_INT 1
72835: DEC
72836: ST_TO_ADDR
72837: LD_VAR 0 5
72841: PUSH
72842: LD_INT 1
72844: ARRAY
72845: PUSH
72846: FOR_TO
72847: IFFALSE 72909
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72849: LD_ADDR_VAR 0 3
72853: PUSH
72854: LD_VAR 0 3
72858: PPUSH
72859: LD_VAR 0 3
72863: PUSH
72864: LD_INT 1
72866: PLUS
72867: PPUSH
72868: LD_VAR 0 5
72872: PUSH
72873: LD_INT 1
72875: ARRAY
72876: PUSH
72877: LD_VAR 0 4
72881: ARRAY
72882: PUSH
72883: LD_VAR 0 5
72887: PUSH
72888: LD_INT 2
72890: ARRAY
72891: PUSH
72892: LD_VAR 0 4
72896: ARRAY
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PPUSH
72902: CALL_OW 1
72906: ST_TO_ADDR
72907: GO 72846
72909: POP
72910: POP
// exit ;
72911: GO 72951
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72913: LD_ADDR_VAR 0 3
72917: PUSH
72918: LD_VAR 0 5
72922: PUSH
72923: LD_INT 1
72925: ARRAY
72926: PUSH
72927: LD_INT 1
72929: ARRAY
72930: PUSH
72931: LD_VAR 0 5
72935: PUSH
72936: LD_INT 2
72938: ARRAY
72939: PUSH
72940: LD_INT 1
72942: ARRAY
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: EMPTY
72949: LIST
72950: ST_TO_ADDR
// end ;
72951: LD_VAR 0 3
72955: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72956: LD_INT 0
72958: PPUSH
72959: PPUSH
// list := AreaToList ( area , 0 ) ;
72960: LD_ADDR_VAR 0 4
72964: PUSH
72965: LD_VAR 0 1
72969: PPUSH
72970: LD_INT 0
72972: PPUSH
72973: CALL_OW 517
72977: ST_TO_ADDR
// if not list then
72978: LD_VAR 0 4
72982: NOT
72983: IFFALSE 72987
// exit ;
72985: GO 73028
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72987: LD_ADDR_VAR 0 3
72991: PUSH
72992: LD_VAR 0 4
72996: PUSH
72997: LD_INT 1
72999: ARRAY
73000: PUSH
73001: LD_INT 1
73003: ARRAY
73004: PUSH
73005: LD_VAR 0 4
73009: PUSH
73010: LD_INT 2
73012: ARRAY
73013: PUSH
73014: LD_INT 1
73016: ARRAY
73017: PUSH
73018: LD_VAR 0 2
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: LIST
73027: ST_TO_ADDR
// end ;
73028: LD_VAR 0 3
73032: RET
// export function First ( array ) ; begin
73033: LD_INT 0
73035: PPUSH
// if not array then
73036: LD_VAR 0 1
73040: NOT
73041: IFFALSE 73045
// exit ;
73043: GO 73059
// result := array [ 1 ] ;
73045: LD_ADDR_VAR 0 2
73049: PUSH
73050: LD_VAR 0 1
73054: PUSH
73055: LD_INT 1
73057: ARRAY
73058: ST_TO_ADDR
// end ;
73059: LD_VAR 0 2
73063: RET
// export function Last ( array ) ; begin
73064: LD_INT 0
73066: PPUSH
// if not array then
73067: LD_VAR 0 1
73071: NOT
73072: IFFALSE 73076
// exit ;
73074: GO 73092
// result := array [ array ] ;
73076: LD_ADDR_VAR 0 2
73080: PUSH
73081: LD_VAR 0 1
73085: PUSH
73086: LD_VAR 0 1
73090: ARRAY
73091: ST_TO_ADDR
// end ;
73092: LD_VAR 0 2
73096: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73097: LD_INT 0
73099: PPUSH
73100: PPUSH
// result := [ ] ;
73101: LD_ADDR_VAR 0 5
73105: PUSH
73106: EMPTY
73107: ST_TO_ADDR
// if not array then
73108: LD_VAR 0 1
73112: NOT
73113: IFFALSE 73117
// exit ;
73115: GO 73229
// for i := 1 to array do
73117: LD_ADDR_VAR 0 6
73121: PUSH
73122: DOUBLE
73123: LD_INT 1
73125: DEC
73126: ST_TO_ADDR
73127: LD_VAR 0 1
73131: PUSH
73132: FOR_TO
73133: IFFALSE 73227
// if array [ i ] [ index ] = value then
73135: LD_VAR 0 1
73139: PUSH
73140: LD_VAR 0 6
73144: ARRAY
73145: PUSH
73146: LD_VAR 0 2
73150: ARRAY
73151: PUSH
73152: LD_VAR 0 3
73156: EQUAL
73157: IFFALSE 73225
// begin if indexColumn then
73159: LD_VAR 0 4
73163: IFFALSE 73199
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73165: LD_ADDR_VAR 0 5
73169: PUSH
73170: LD_VAR 0 5
73174: PPUSH
73175: LD_VAR 0 1
73179: PUSH
73180: LD_VAR 0 6
73184: ARRAY
73185: PUSH
73186: LD_VAR 0 4
73190: ARRAY
73191: PPUSH
73192: CALL 68237 0 2
73196: ST_TO_ADDR
73197: GO 73225
// result := Join ( result , array [ i ] ) ;
73199: LD_ADDR_VAR 0 5
73203: PUSH
73204: LD_VAR 0 5
73208: PPUSH
73209: LD_VAR 0 1
73213: PUSH
73214: LD_VAR 0 6
73218: ARRAY
73219: PPUSH
73220: CALL 68237 0 2
73224: ST_TO_ADDR
// end ;
73225: GO 73132
73227: POP
73228: POP
// end ;
73229: LD_VAR 0 5
73233: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73234: LD_INT 0
73236: PPUSH
// if not vehicles or not parkingPoint then
73237: LD_VAR 0 1
73241: NOT
73242: IFTRUE 73251
73244: PUSH
73245: LD_VAR 0 2
73249: NOT
73250: OR
73251: IFFALSE 73255
// exit ;
73253: GO 73353
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73255: LD_ADDR_VAR 0 1
73259: PUSH
73260: LD_VAR 0 1
73264: PPUSH
73265: LD_INT 50
73267: PUSH
73268: EMPTY
73269: LIST
73270: PUSH
73271: LD_INT 3
73273: PUSH
73274: LD_INT 92
73276: PUSH
73277: LD_VAR 0 2
73281: PUSH
73282: LD_INT 1
73284: ARRAY
73285: PUSH
73286: LD_VAR 0 2
73290: PUSH
73291: LD_INT 2
73293: ARRAY
73294: PUSH
73295: LD_INT 8
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: PPUSH
73312: CALL_OW 72
73316: ST_TO_ADDR
// if not vehicles then
73317: LD_VAR 0 1
73321: NOT
73322: IFFALSE 73326
// exit ;
73324: GO 73353
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73326: LD_VAR 0 1
73330: PPUSH
73331: LD_VAR 0 2
73335: PUSH
73336: LD_INT 1
73338: ARRAY
73339: PPUSH
73340: LD_VAR 0 2
73344: PUSH
73345: LD_INT 2
73347: ARRAY
73348: PPUSH
73349: CALL_OW 111
// end ;
73353: LD_VAR 0 3
73357: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73358: LD_INT 0
73360: PPUSH
73361: PPUSH
73362: PPUSH
// if not side or not area then
73363: LD_VAR 0 1
73367: NOT
73368: IFTRUE 73377
73370: PUSH
73371: LD_VAR 0 2
73375: NOT
73376: OR
73377: IFFALSE 73381
// exit ;
73379: GO 73500
// tmp := AreaToList ( area , 0 ) ;
73381: LD_ADDR_VAR 0 5
73385: PUSH
73386: LD_VAR 0 2
73390: PPUSH
73391: LD_INT 0
73393: PPUSH
73394: CALL_OW 517
73398: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73399: LD_ADDR_VAR 0 4
73403: PUSH
73404: DOUBLE
73405: LD_INT 1
73407: DEC
73408: ST_TO_ADDR
73409: LD_VAR 0 5
73413: PUSH
73414: LD_INT 1
73416: ARRAY
73417: PUSH
73418: FOR_TO
73419: IFFALSE 73498
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73421: LD_VAR 0 5
73425: PUSH
73426: LD_INT 1
73428: ARRAY
73429: PUSH
73430: LD_VAR 0 4
73434: ARRAY
73435: PPUSH
73436: LD_VAR 0 5
73440: PUSH
73441: LD_INT 2
73443: ARRAY
73444: PUSH
73445: LD_VAR 0 4
73449: ARRAY
73450: PPUSH
73451: CALL_OW 351
73455: IFFALSE 73496
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73457: LD_VAR 0 5
73461: PUSH
73462: LD_INT 1
73464: ARRAY
73465: PUSH
73466: LD_VAR 0 4
73470: ARRAY
73471: PPUSH
73472: LD_VAR 0 5
73476: PUSH
73477: LD_INT 2
73479: ARRAY
73480: PUSH
73481: LD_VAR 0 4
73485: ARRAY
73486: PPUSH
73487: LD_VAR 0 1
73491: PPUSH
73492: CALL_OW 244
// end ;
73496: GO 73418
73498: POP
73499: POP
// end ;
73500: LD_VAR 0 3
73504: RET
// export function UniqueArray ( array ) ; var i ; begin
73505: LD_INT 0
73507: PPUSH
73508: PPUSH
// result := [ ] ;
73509: LD_ADDR_VAR 0 2
73513: PUSH
73514: EMPTY
73515: ST_TO_ADDR
// if not array then
73516: LD_VAR 0 1
73520: NOT
73521: IFFALSE 73525
// exit ;
73523: GO 73586
// for i := 1 to array do
73525: LD_ADDR_VAR 0 3
73529: PUSH
73530: DOUBLE
73531: LD_INT 1
73533: DEC
73534: ST_TO_ADDR
73535: LD_VAR 0 1
73539: PUSH
73540: FOR_TO
73541: IFFALSE 73584
// if not array [ i ] in result then
73543: LD_VAR 0 1
73547: PUSH
73548: LD_VAR 0 3
73552: ARRAY
73553: PUSH
73554: LD_VAR 0 2
73558: IN
73559: NOT
73560: IFFALSE 73582
// result := Join ( result , i ) ;
73562: LD_ADDR_VAR 0 2
73566: PUSH
73567: LD_VAR 0 2
73571: PPUSH
73572: LD_VAR 0 3
73576: PPUSH
73577: CALL 68237 0 2
73581: ST_TO_ADDR
73582: GO 73540
73584: POP
73585: POP
// end ; end_of_file
73586: LD_VAR 0 2
73590: RET
// export globalGameSaveCounter ; every 0 0$1 do
73591: GO 73593
73593: DISABLE
// begin enable ;
73594: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
73595: LD_STRING updateTimer(
73597: PUSH
73598: LD_OWVAR 1
73602: STR
73603: PUSH
73604: LD_STRING );
73606: STR
73607: PPUSH
73608: CALL_OW 559
// end ;
73612: END
// every 0 0$1 do
73613: GO 73615
73615: DISABLE
// begin globalGameSaveCounter := 0 ;
73616: LD_ADDR_EXP 74
73620: PUSH
73621: LD_INT 0
73623: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
73624: LD_STRING setGameSaveCounter(0)
73626: PPUSH
73627: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
73631: LD_STRING initStreamRollete();
73633: PPUSH
73634: CALL_OW 559
// InitStreamMode ;
73638: CALL 74983 0 0
// DefineStreamItems ( false ) ;
73642: LD_INT 0
73644: PPUSH
73645: CALL 75447 0 1
// end ;
73649: END
// export function SOS_MapStart ( ) ; begin
73650: LD_INT 0
73652: PPUSH
// if streamModeActive then
73653: LD_EXP 75
73657: IFFALSE 73666
// DefineStreamItems ( true ) ;
73659: LD_INT 1
73661: PPUSH
73662: CALL 75447 0 1
// UpdateLuaVariables ( ) ;
73666: CALL 73683 0 0
// UpdateFactoryWaypoints ( ) ;
73670: CALL 88569 0 0
// UpdateWarehouseGatheringPoints ( ) ;
73674: CALL 88821 0 0
// end ;
73678: LD_VAR 0 1
73682: RET
// function UpdateLuaVariables ( ) ; begin
73683: LD_INT 0
73685: PPUSH
// if globalGameSaveCounter then
73686: LD_EXP 74
73690: IFFALSE 73724
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
73692: LD_ADDR_EXP 74
73696: PUSH
73697: LD_EXP 74
73701: PPUSH
73702: CALL 69610 0 1
73706: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73707: LD_STRING setGameSaveCounter(
73709: PUSH
73710: LD_EXP 74
73714: STR
73715: PUSH
73716: LD_STRING )
73718: STR
73719: PPUSH
73720: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
73724: LD_STRING setGameDifficulty(
73726: PUSH
73727: LD_OWVAR 67
73731: STR
73732: PUSH
73733: LD_STRING )
73735: STR
73736: PPUSH
73737: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
73741: LD_STRING displayDifficulty(
73743: PUSH
73744: LD_OWVAR 67
73748: STR
73749: PUSH
73750: LD_STRING )
73752: STR
73753: PPUSH
73754: CALL_OW 559
// end ;
73758: LD_VAR 0 1
73762: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73763: LD_INT 0
73765: PPUSH
// if p2 = stream_mode then
73766: LD_VAR 0 2
73770: PUSH
73771: LD_INT 100
73773: EQUAL
73774: IFFALSE 74777
// begin if not StreamModeActive then
73776: LD_EXP 75
73780: NOT
73781: IFFALSE 73791
// StreamModeActive := true ;
73783: LD_ADDR_EXP 75
73787: PUSH
73788: LD_INT 1
73790: ST_TO_ADDR
// if p3 = 0 then
73791: LD_VAR 0 3
73795: PUSH
73796: LD_INT 0
73798: EQUAL
73799: IFFALSE 73805
// InitStreamMode ;
73801: CALL 74983 0 0
// if p3 = 1 then
73805: LD_VAR 0 3
73809: PUSH
73810: LD_INT 1
73812: EQUAL
73813: IFFALSE 73823
// sRocket := true ;
73815: LD_ADDR_EXP 80
73819: PUSH
73820: LD_INT 1
73822: ST_TO_ADDR
// if p3 = 2 then
73823: LD_VAR 0 3
73827: PUSH
73828: LD_INT 2
73830: EQUAL
73831: IFFALSE 73841
// sSpeed := true ;
73833: LD_ADDR_EXP 79
73837: PUSH
73838: LD_INT 1
73840: ST_TO_ADDR
// if p3 = 3 then
73841: LD_VAR 0 3
73845: PUSH
73846: LD_INT 3
73848: EQUAL
73849: IFFALSE 73859
// sEngine := true ;
73851: LD_ADDR_EXP 81
73855: PUSH
73856: LD_INT 1
73858: ST_TO_ADDR
// if p3 = 4 then
73859: LD_VAR 0 3
73863: PUSH
73864: LD_INT 4
73866: EQUAL
73867: IFFALSE 73877
// sSpec := true ;
73869: LD_ADDR_EXP 78
73873: PUSH
73874: LD_INT 1
73876: ST_TO_ADDR
// if p3 = 5 then
73877: LD_VAR 0 3
73881: PUSH
73882: LD_INT 5
73884: EQUAL
73885: IFFALSE 73895
// sLevel := true ;
73887: LD_ADDR_EXP 82
73891: PUSH
73892: LD_INT 1
73894: ST_TO_ADDR
// if p3 = 6 then
73895: LD_VAR 0 3
73899: PUSH
73900: LD_INT 6
73902: EQUAL
73903: IFFALSE 73913
// sArmoury := true ;
73905: LD_ADDR_EXP 83
73909: PUSH
73910: LD_INT 1
73912: ST_TO_ADDR
// if p3 = 7 then
73913: LD_VAR 0 3
73917: PUSH
73918: LD_INT 7
73920: EQUAL
73921: IFFALSE 73931
// sRadar := true ;
73923: LD_ADDR_EXP 84
73927: PUSH
73928: LD_INT 1
73930: ST_TO_ADDR
// if p3 = 8 then
73931: LD_VAR 0 3
73935: PUSH
73936: LD_INT 8
73938: EQUAL
73939: IFFALSE 73949
// sBunker := true ;
73941: LD_ADDR_EXP 85
73945: PUSH
73946: LD_INT 1
73948: ST_TO_ADDR
// if p3 = 9 then
73949: LD_VAR 0 3
73953: PUSH
73954: LD_INT 9
73956: EQUAL
73957: IFFALSE 73967
// sHack := true ;
73959: LD_ADDR_EXP 86
73963: PUSH
73964: LD_INT 1
73966: ST_TO_ADDR
// if p3 = 10 then
73967: LD_VAR 0 3
73971: PUSH
73972: LD_INT 10
73974: EQUAL
73975: IFFALSE 73985
// sFire := true ;
73977: LD_ADDR_EXP 87
73981: PUSH
73982: LD_INT 1
73984: ST_TO_ADDR
// if p3 = 11 then
73985: LD_VAR 0 3
73989: PUSH
73990: LD_INT 11
73992: EQUAL
73993: IFFALSE 74003
// sRefresh := true ;
73995: LD_ADDR_EXP 88
73999: PUSH
74000: LD_INT 1
74002: ST_TO_ADDR
// if p3 = 12 then
74003: LD_VAR 0 3
74007: PUSH
74008: LD_INT 12
74010: EQUAL
74011: IFFALSE 74021
// sExp := true ;
74013: LD_ADDR_EXP 89
74017: PUSH
74018: LD_INT 1
74020: ST_TO_ADDR
// if p3 = 13 then
74021: LD_VAR 0 3
74025: PUSH
74026: LD_INT 13
74028: EQUAL
74029: IFFALSE 74039
// sDepot := true ;
74031: LD_ADDR_EXP 90
74035: PUSH
74036: LD_INT 1
74038: ST_TO_ADDR
// if p3 = 14 then
74039: LD_VAR 0 3
74043: PUSH
74044: LD_INT 14
74046: EQUAL
74047: IFFALSE 74057
// sFlag := true ;
74049: LD_ADDR_EXP 91
74053: PUSH
74054: LD_INT 1
74056: ST_TO_ADDR
// if p3 = 15 then
74057: LD_VAR 0 3
74061: PUSH
74062: LD_INT 15
74064: EQUAL
74065: IFFALSE 74075
// sKamikadze := true ;
74067: LD_ADDR_EXP 99
74071: PUSH
74072: LD_INT 1
74074: ST_TO_ADDR
// if p3 = 16 then
74075: LD_VAR 0 3
74079: PUSH
74080: LD_INT 16
74082: EQUAL
74083: IFFALSE 74093
// sTroll := true ;
74085: LD_ADDR_EXP 100
74089: PUSH
74090: LD_INT 1
74092: ST_TO_ADDR
// if p3 = 17 then
74093: LD_VAR 0 3
74097: PUSH
74098: LD_INT 17
74100: EQUAL
74101: IFFALSE 74111
// sSlow := true ;
74103: LD_ADDR_EXP 101
74107: PUSH
74108: LD_INT 1
74110: ST_TO_ADDR
// if p3 = 18 then
74111: LD_VAR 0 3
74115: PUSH
74116: LD_INT 18
74118: EQUAL
74119: IFFALSE 74129
// sLack := true ;
74121: LD_ADDR_EXP 102
74125: PUSH
74126: LD_INT 1
74128: ST_TO_ADDR
// if p3 = 19 then
74129: LD_VAR 0 3
74133: PUSH
74134: LD_INT 19
74136: EQUAL
74137: IFFALSE 74147
// sTank := true ;
74139: LD_ADDR_EXP 104
74143: PUSH
74144: LD_INT 1
74146: ST_TO_ADDR
// if p3 = 20 then
74147: LD_VAR 0 3
74151: PUSH
74152: LD_INT 20
74154: EQUAL
74155: IFFALSE 74165
// sRemote := true ;
74157: LD_ADDR_EXP 105
74161: PUSH
74162: LD_INT 1
74164: ST_TO_ADDR
// if p3 = 21 then
74165: LD_VAR 0 3
74169: PUSH
74170: LD_INT 21
74172: EQUAL
74173: IFFALSE 74183
// sPowell := true ;
74175: LD_ADDR_EXP 106
74179: PUSH
74180: LD_INT 1
74182: ST_TO_ADDR
// if p3 = 22 then
74183: LD_VAR 0 3
74187: PUSH
74188: LD_INT 22
74190: EQUAL
74191: IFFALSE 74201
// sTeleport := true ;
74193: LD_ADDR_EXP 109
74197: PUSH
74198: LD_INT 1
74200: ST_TO_ADDR
// if p3 = 23 then
74201: LD_VAR 0 3
74205: PUSH
74206: LD_INT 23
74208: EQUAL
74209: IFFALSE 74219
// sOilTower := true ;
74211: LD_ADDR_EXP 111
74215: PUSH
74216: LD_INT 1
74218: ST_TO_ADDR
// if p3 = 24 then
74219: LD_VAR 0 3
74223: PUSH
74224: LD_INT 24
74226: EQUAL
74227: IFFALSE 74237
// sShovel := true ;
74229: LD_ADDR_EXP 112
74233: PUSH
74234: LD_INT 1
74236: ST_TO_ADDR
// if p3 = 25 then
74237: LD_VAR 0 3
74241: PUSH
74242: LD_INT 25
74244: EQUAL
74245: IFFALSE 74255
// sSheik := true ;
74247: LD_ADDR_EXP 113
74251: PUSH
74252: LD_INT 1
74254: ST_TO_ADDR
// if p3 = 26 then
74255: LD_VAR 0 3
74259: PUSH
74260: LD_INT 26
74262: EQUAL
74263: IFFALSE 74273
// sEarthquake := true ;
74265: LD_ADDR_EXP 115
74269: PUSH
74270: LD_INT 1
74272: ST_TO_ADDR
// if p3 = 27 then
74273: LD_VAR 0 3
74277: PUSH
74278: LD_INT 27
74280: EQUAL
74281: IFFALSE 74291
// sAI := true ;
74283: LD_ADDR_EXP 116
74287: PUSH
74288: LD_INT 1
74290: ST_TO_ADDR
// if p3 = 28 then
74291: LD_VAR 0 3
74295: PUSH
74296: LD_INT 28
74298: EQUAL
74299: IFFALSE 74309
// sCargo := true ;
74301: LD_ADDR_EXP 119
74305: PUSH
74306: LD_INT 1
74308: ST_TO_ADDR
// if p3 = 29 then
74309: LD_VAR 0 3
74313: PUSH
74314: LD_INT 29
74316: EQUAL
74317: IFFALSE 74327
// sDLaser := true ;
74319: LD_ADDR_EXP 120
74323: PUSH
74324: LD_INT 1
74326: ST_TO_ADDR
// if p3 = 30 then
74327: LD_VAR 0 3
74331: PUSH
74332: LD_INT 30
74334: EQUAL
74335: IFFALSE 74345
// sExchange := true ;
74337: LD_ADDR_EXP 121
74341: PUSH
74342: LD_INT 1
74344: ST_TO_ADDR
// if p3 = 31 then
74345: LD_VAR 0 3
74349: PUSH
74350: LD_INT 31
74352: EQUAL
74353: IFFALSE 74363
// sFac := true ;
74355: LD_ADDR_EXP 122
74359: PUSH
74360: LD_INT 1
74362: ST_TO_ADDR
// if p3 = 32 then
74363: LD_VAR 0 3
74367: PUSH
74368: LD_INT 32
74370: EQUAL
74371: IFFALSE 74381
// sPower := true ;
74373: LD_ADDR_EXP 123
74377: PUSH
74378: LD_INT 1
74380: ST_TO_ADDR
// if p3 = 33 then
74381: LD_VAR 0 3
74385: PUSH
74386: LD_INT 33
74388: EQUAL
74389: IFFALSE 74399
// sRandom := true ;
74391: LD_ADDR_EXP 124
74395: PUSH
74396: LD_INT 1
74398: ST_TO_ADDR
// if p3 = 34 then
74399: LD_VAR 0 3
74403: PUSH
74404: LD_INT 34
74406: EQUAL
74407: IFFALSE 74417
// sShield := true ;
74409: LD_ADDR_EXP 125
74413: PUSH
74414: LD_INT 1
74416: ST_TO_ADDR
// if p3 = 35 then
74417: LD_VAR 0 3
74421: PUSH
74422: LD_INT 35
74424: EQUAL
74425: IFFALSE 74435
// sTime := true ;
74427: LD_ADDR_EXP 126
74431: PUSH
74432: LD_INT 1
74434: ST_TO_ADDR
// if p3 = 36 then
74435: LD_VAR 0 3
74439: PUSH
74440: LD_INT 36
74442: EQUAL
74443: IFFALSE 74453
// sTools := true ;
74445: LD_ADDR_EXP 127
74449: PUSH
74450: LD_INT 1
74452: ST_TO_ADDR
// if p3 = 101 then
74453: LD_VAR 0 3
74457: PUSH
74458: LD_INT 101
74460: EQUAL
74461: IFFALSE 74471
// sSold := true ;
74463: LD_ADDR_EXP 92
74467: PUSH
74468: LD_INT 1
74470: ST_TO_ADDR
// if p3 = 102 then
74471: LD_VAR 0 3
74475: PUSH
74476: LD_INT 102
74478: EQUAL
74479: IFFALSE 74489
// sDiff := true ;
74481: LD_ADDR_EXP 93
74485: PUSH
74486: LD_INT 1
74488: ST_TO_ADDR
// if p3 = 103 then
74489: LD_VAR 0 3
74493: PUSH
74494: LD_INT 103
74496: EQUAL
74497: IFFALSE 74507
// sFog := true ;
74499: LD_ADDR_EXP 96
74503: PUSH
74504: LD_INT 1
74506: ST_TO_ADDR
// if p3 = 104 then
74507: LD_VAR 0 3
74511: PUSH
74512: LD_INT 104
74514: EQUAL
74515: IFFALSE 74525
// sReset := true ;
74517: LD_ADDR_EXP 97
74521: PUSH
74522: LD_INT 1
74524: ST_TO_ADDR
// if p3 = 105 then
74525: LD_VAR 0 3
74529: PUSH
74530: LD_INT 105
74532: EQUAL
74533: IFFALSE 74543
// sSun := true ;
74535: LD_ADDR_EXP 98
74539: PUSH
74540: LD_INT 1
74542: ST_TO_ADDR
// if p3 = 106 then
74543: LD_VAR 0 3
74547: PUSH
74548: LD_INT 106
74550: EQUAL
74551: IFFALSE 74561
// sTiger := true ;
74553: LD_ADDR_EXP 94
74557: PUSH
74558: LD_INT 1
74560: ST_TO_ADDR
// if p3 = 107 then
74561: LD_VAR 0 3
74565: PUSH
74566: LD_INT 107
74568: EQUAL
74569: IFFALSE 74579
// sBomb := true ;
74571: LD_ADDR_EXP 95
74575: PUSH
74576: LD_INT 1
74578: ST_TO_ADDR
// if p3 = 108 then
74579: LD_VAR 0 3
74583: PUSH
74584: LD_INT 108
74586: EQUAL
74587: IFFALSE 74597
// sWound := true ;
74589: LD_ADDR_EXP 103
74593: PUSH
74594: LD_INT 1
74596: ST_TO_ADDR
// if p3 = 109 then
74597: LD_VAR 0 3
74601: PUSH
74602: LD_INT 109
74604: EQUAL
74605: IFFALSE 74615
// sBetray := true ;
74607: LD_ADDR_EXP 107
74611: PUSH
74612: LD_INT 1
74614: ST_TO_ADDR
// if p3 = 110 then
74615: LD_VAR 0 3
74619: PUSH
74620: LD_INT 110
74622: EQUAL
74623: IFFALSE 74633
// sContamin := true ;
74625: LD_ADDR_EXP 108
74629: PUSH
74630: LD_INT 1
74632: ST_TO_ADDR
// if p3 = 111 then
74633: LD_VAR 0 3
74637: PUSH
74638: LD_INT 111
74640: EQUAL
74641: IFFALSE 74651
// sOil := true ;
74643: LD_ADDR_EXP 110
74647: PUSH
74648: LD_INT 1
74650: ST_TO_ADDR
// if p3 = 112 then
74651: LD_VAR 0 3
74655: PUSH
74656: LD_INT 112
74658: EQUAL
74659: IFFALSE 74669
// sStu := true ;
74661: LD_ADDR_EXP 114
74665: PUSH
74666: LD_INT 1
74668: ST_TO_ADDR
// if p3 = 113 then
74669: LD_VAR 0 3
74673: PUSH
74674: LD_INT 113
74676: EQUAL
74677: IFFALSE 74687
// sBazooka := true ;
74679: LD_ADDR_EXP 117
74683: PUSH
74684: LD_INT 1
74686: ST_TO_ADDR
// if p3 = 114 then
74687: LD_VAR 0 3
74691: PUSH
74692: LD_INT 114
74694: EQUAL
74695: IFFALSE 74705
// sMortar := true ;
74697: LD_ADDR_EXP 118
74701: PUSH
74702: LD_INT 1
74704: ST_TO_ADDR
// if p3 = 115 then
74705: LD_VAR 0 3
74709: PUSH
74710: LD_INT 115
74712: EQUAL
74713: IFFALSE 74723
// sRanger := true ;
74715: LD_ADDR_EXP 128
74719: PUSH
74720: LD_INT 1
74722: ST_TO_ADDR
// if p3 = 116 then
74723: LD_VAR 0 3
74727: PUSH
74728: LD_INT 116
74730: EQUAL
74731: IFFALSE 74741
// sComputer := true ;
74733: LD_ADDR_EXP 129
74737: PUSH
74738: LD_INT 1
74740: ST_TO_ADDR
// if p3 = 117 then
74741: LD_VAR 0 3
74745: PUSH
74746: LD_INT 117
74748: EQUAL
74749: IFFALSE 74759
// s30 := true ;
74751: LD_ADDR_EXP 130
74755: PUSH
74756: LD_INT 1
74758: ST_TO_ADDR
// if p3 = 118 then
74759: LD_VAR 0 3
74763: PUSH
74764: LD_INT 118
74766: EQUAL
74767: IFFALSE 74777
// s60 := true ;
74769: LD_ADDR_EXP 131
74773: PUSH
74774: LD_INT 1
74776: ST_TO_ADDR
// end ; if p2 = hack_mode then
74777: LD_VAR 0 2
74781: PUSH
74782: LD_INT 101
74784: EQUAL
74785: IFFALSE 74913
// begin case p3 of 1 :
74787: LD_VAR 0 3
74791: PUSH
74792: LD_INT 1
74794: DOUBLE
74795: EQUAL
74796: IFTRUE 74800
74798: GO 74807
74800: POP
// hHackUnlimitedResources ; 2 :
74801: CALL 87176 0 0
74805: GO 74913
74807: LD_INT 2
74809: DOUBLE
74810: EQUAL
74811: IFTRUE 74815
74813: GO 74822
74815: POP
// hHackSetLevel10 ; 3 :
74816: CALL 87309 0 0
74820: GO 74913
74822: LD_INT 3
74824: DOUBLE
74825: EQUAL
74826: IFTRUE 74830
74828: GO 74837
74830: POP
// hHackSetLevel10YourUnits ; 4 :
74831: CALL 87394 0 0
74835: GO 74913
74837: LD_INT 4
74839: DOUBLE
74840: EQUAL
74841: IFTRUE 74845
74843: GO 74852
74845: POP
// hHackInvincible ; 5 :
74846: CALL 87842 0 0
74850: GO 74913
74852: LD_INT 5
74854: DOUBLE
74855: EQUAL
74856: IFTRUE 74860
74858: GO 74867
74860: POP
// hHackInvisible ; 6 :
74861: CALL 87953 0 0
74865: GO 74913
74867: LD_INT 6
74869: DOUBLE
74870: EQUAL
74871: IFTRUE 74875
74873: GO 74882
74875: POP
// hHackChangeYourSide ; 7 :
74876: CALL 88010 0 0
74880: GO 74913
74882: LD_INT 7
74884: DOUBLE
74885: EQUAL
74886: IFTRUE 74890
74888: GO 74897
74890: POP
// hHackChangeUnitSide ; 8 :
74891: CALL 88052 0 0
74895: GO 74913
74897: LD_INT 8
74899: DOUBLE
74900: EQUAL
74901: IFTRUE 74905
74903: GO 74912
74905: POP
// hHackFog ; end ;
74906: CALL 88153 0 0
74910: GO 74913
74912: POP
// end ; if p2 = game_save_mode then
74913: LD_VAR 0 2
74917: PUSH
74918: LD_INT 102
74920: EQUAL
74921: IFFALSE 74978
// begin if p3 = 1 then
74923: LD_VAR 0 3
74927: PUSH
74928: LD_INT 1
74930: EQUAL
74931: IFFALSE 74943
// globalGameSaveCounter := p4 ;
74933: LD_ADDR_EXP 74
74937: PUSH
74938: LD_VAR 0 4
74942: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
74943: LD_VAR 0 3
74947: PUSH
74948: LD_INT 2
74950: EQUAL
74951: IFFALSE 74959
74953: PUSH
74954: LD_EXP 74
74958: AND
74959: IFFALSE 74978
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
74961: LD_STRING setGameSaveCounter(
74963: PUSH
74964: LD_EXP 74
74968: STR
74969: PUSH
74970: LD_STRING )
74972: STR
74973: PPUSH
74974: CALL_OW 559
// end ; end ;
74978: LD_VAR 0 7
74982: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
74983: LD_INT 0
74985: PPUSH
// streamModeActive := false ;
74986: LD_ADDR_EXP 75
74990: PUSH
74991: LD_INT 0
74993: ST_TO_ADDR
// normalCounter := 36 ;
74994: LD_ADDR_EXP 76
74998: PUSH
74999: LD_INT 36
75001: ST_TO_ADDR
// hardcoreCounter := 18 ;
75002: LD_ADDR_EXP 77
75006: PUSH
75007: LD_INT 18
75009: ST_TO_ADDR
// sRocket := false ;
75010: LD_ADDR_EXP 80
75014: PUSH
75015: LD_INT 0
75017: ST_TO_ADDR
// sSpeed := false ;
75018: LD_ADDR_EXP 79
75022: PUSH
75023: LD_INT 0
75025: ST_TO_ADDR
// sEngine := false ;
75026: LD_ADDR_EXP 81
75030: PUSH
75031: LD_INT 0
75033: ST_TO_ADDR
// sSpec := false ;
75034: LD_ADDR_EXP 78
75038: PUSH
75039: LD_INT 0
75041: ST_TO_ADDR
// sLevel := false ;
75042: LD_ADDR_EXP 82
75046: PUSH
75047: LD_INT 0
75049: ST_TO_ADDR
// sArmoury := false ;
75050: LD_ADDR_EXP 83
75054: PUSH
75055: LD_INT 0
75057: ST_TO_ADDR
// sRadar := false ;
75058: LD_ADDR_EXP 84
75062: PUSH
75063: LD_INT 0
75065: ST_TO_ADDR
// sBunker := false ;
75066: LD_ADDR_EXP 85
75070: PUSH
75071: LD_INT 0
75073: ST_TO_ADDR
// sHack := false ;
75074: LD_ADDR_EXP 86
75078: PUSH
75079: LD_INT 0
75081: ST_TO_ADDR
// sFire := false ;
75082: LD_ADDR_EXP 87
75086: PUSH
75087: LD_INT 0
75089: ST_TO_ADDR
// sRefresh := false ;
75090: LD_ADDR_EXP 88
75094: PUSH
75095: LD_INT 0
75097: ST_TO_ADDR
// sExp := false ;
75098: LD_ADDR_EXP 89
75102: PUSH
75103: LD_INT 0
75105: ST_TO_ADDR
// sDepot := false ;
75106: LD_ADDR_EXP 90
75110: PUSH
75111: LD_INT 0
75113: ST_TO_ADDR
// sFlag := false ;
75114: LD_ADDR_EXP 91
75118: PUSH
75119: LD_INT 0
75121: ST_TO_ADDR
// sKamikadze := false ;
75122: LD_ADDR_EXP 99
75126: PUSH
75127: LD_INT 0
75129: ST_TO_ADDR
// sTroll := false ;
75130: LD_ADDR_EXP 100
75134: PUSH
75135: LD_INT 0
75137: ST_TO_ADDR
// sSlow := false ;
75138: LD_ADDR_EXP 101
75142: PUSH
75143: LD_INT 0
75145: ST_TO_ADDR
// sLack := false ;
75146: LD_ADDR_EXP 102
75150: PUSH
75151: LD_INT 0
75153: ST_TO_ADDR
// sTank := false ;
75154: LD_ADDR_EXP 104
75158: PUSH
75159: LD_INT 0
75161: ST_TO_ADDR
// sRemote := false ;
75162: LD_ADDR_EXP 105
75166: PUSH
75167: LD_INT 0
75169: ST_TO_ADDR
// sPowell := false ;
75170: LD_ADDR_EXP 106
75174: PUSH
75175: LD_INT 0
75177: ST_TO_ADDR
// sTeleport := false ;
75178: LD_ADDR_EXP 109
75182: PUSH
75183: LD_INT 0
75185: ST_TO_ADDR
// sOilTower := false ;
75186: LD_ADDR_EXP 111
75190: PUSH
75191: LD_INT 0
75193: ST_TO_ADDR
// sShovel := false ;
75194: LD_ADDR_EXP 112
75198: PUSH
75199: LD_INT 0
75201: ST_TO_ADDR
// sSheik := false ;
75202: LD_ADDR_EXP 113
75206: PUSH
75207: LD_INT 0
75209: ST_TO_ADDR
// sEarthquake := false ;
75210: LD_ADDR_EXP 115
75214: PUSH
75215: LD_INT 0
75217: ST_TO_ADDR
// sAI := false ;
75218: LD_ADDR_EXP 116
75222: PUSH
75223: LD_INT 0
75225: ST_TO_ADDR
// sCargo := false ;
75226: LD_ADDR_EXP 119
75230: PUSH
75231: LD_INT 0
75233: ST_TO_ADDR
// sDLaser := false ;
75234: LD_ADDR_EXP 120
75238: PUSH
75239: LD_INT 0
75241: ST_TO_ADDR
// sExchange := false ;
75242: LD_ADDR_EXP 121
75246: PUSH
75247: LD_INT 0
75249: ST_TO_ADDR
// sFac := false ;
75250: LD_ADDR_EXP 122
75254: PUSH
75255: LD_INT 0
75257: ST_TO_ADDR
// sPower := false ;
75258: LD_ADDR_EXP 123
75262: PUSH
75263: LD_INT 0
75265: ST_TO_ADDR
// sRandom := false ;
75266: LD_ADDR_EXP 124
75270: PUSH
75271: LD_INT 0
75273: ST_TO_ADDR
// sShield := false ;
75274: LD_ADDR_EXP 125
75278: PUSH
75279: LD_INT 0
75281: ST_TO_ADDR
// sTime := false ;
75282: LD_ADDR_EXP 126
75286: PUSH
75287: LD_INT 0
75289: ST_TO_ADDR
// sTools := false ;
75290: LD_ADDR_EXP 127
75294: PUSH
75295: LD_INT 0
75297: ST_TO_ADDR
// sSold := false ;
75298: LD_ADDR_EXP 92
75302: PUSH
75303: LD_INT 0
75305: ST_TO_ADDR
// sDiff := false ;
75306: LD_ADDR_EXP 93
75310: PUSH
75311: LD_INT 0
75313: ST_TO_ADDR
// sFog := false ;
75314: LD_ADDR_EXP 96
75318: PUSH
75319: LD_INT 0
75321: ST_TO_ADDR
// sReset := false ;
75322: LD_ADDR_EXP 97
75326: PUSH
75327: LD_INT 0
75329: ST_TO_ADDR
// sSun := false ;
75330: LD_ADDR_EXP 98
75334: PUSH
75335: LD_INT 0
75337: ST_TO_ADDR
// sTiger := false ;
75338: LD_ADDR_EXP 94
75342: PUSH
75343: LD_INT 0
75345: ST_TO_ADDR
// sBomb := false ;
75346: LD_ADDR_EXP 95
75350: PUSH
75351: LD_INT 0
75353: ST_TO_ADDR
// sWound := false ;
75354: LD_ADDR_EXP 103
75358: PUSH
75359: LD_INT 0
75361: ST_TO_ADDR
// sBetray := false ;
75362: LD_ADDR_EXP 107
75366: PUSH
75367: LD_INT 0
75369: ST_TO_ADDR
// sContamin := false ;
75370: LD_ADDR_EXP 108
75374: PUSH
75375: LD_INT 0
75377: ST_TO_ADDR
// sOil := false ;
75378: LD_ADDR_EXP 110
75382: PUSH
75383: LD_INT 0
75385: ST_TO_ADDR
// sStu := false ;
75386: LD_ADDR_EXP 114
75390: PUSH
75391: LD_INT 0
75393: ST_TO_ADDR
// sBazooka := false ;
75394: LD_ADDR_EXP 117
75398: PUSH
75399: LD_INT 0
75401: ST_TO_ADDR
// sMortar := false ;
75402: LD_ADDR_EXP 118
75406: PUSH
75407: LD_INT 0
75409: ST_TO_ADDR
// sRanger := false ;
75410: LD_ADDR_EXP 128
75414: PUSH
75415: LD_INT 0
75417: ST_TO_ADDR
// sComputer := false ;
75418: LD_ADDR_EXP 129
75422: PUSH
75423: LD_INT 0
75425: ST_TO_ADDR
// s30 := false ;
75426: LD_ADDR_EXP 130
75430: PUSH
75431: LD_INT 0
75433: ST_TO_ADDR
// s60 := false ;
75434: LD_ADDR_EXP 131
75438: PUSH
75439: LD_INT 0
75441: ST_TO_ADDR
// end ;
75442: LD_VAR 0 1
75446: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
75447: LD_INT 0
75449: PPUSH
75450: PPUSH
75451: PPUSH
75452: PPUSH
75453: PPUSH
75454: PPUSH
75455: PPUSH
// result := [ ] ;
75456: LD_ADDR_VAR 0 2
75460: PUSH
75461: EMPTY
75462: ST_TO_ADDR
// if campaign_id = 1 then
75463: LD_OWVAR 69
75467: PUSH
75468: LD_INT 1
75470: EQUAL
75471: IFFALSE 78637
// begin case mission_number of 1 :
75473: LD_OWVAR 70
75477: PUSH
75478: LD_INT 1
75480: DOUBLE
75481: EQUAL
75482: IFTRUE 75486
75484: GO 75562
75486: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
75487: LD_ADDR_VAR 0 2
75491: PUSH
75492: LD_INT 2
75494: PUSH
75495: LD_INT 4
75497: PUSH
75498: LD_INT 11
75500: PUSH
75501: LD_INT 12
75503: PUSH
75504: LD_INT 15
75506: PUSH
75507: LD_INT 16
75509: PUSH
75510: LD_INT 22
75512: PUSH
75513: LD_INT 23
75515: PUSH
75516: LD_INT 26
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: PUSH
75530: LD_INT 101
75532: PUSH
75533: LD_INT 102
75535: PUSH
75536: LD_INT 106
75538: PUSH
75539: LD_INT 116
75541: PUSH
75542: LD_INT 117
75544: PUSH
75545: LD_INT 118
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: LIST
75554: LIST
75555: PUSH
75556: EMPTY
75557: LIST
75558: LIST
75559: ST_TO_ADDR
75560: GO 78635
75562: LD_INT 2
75564: DOUBLE
75565: EQUAL
75566: IFTRUE 75570
75568: GO 75654
75570: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
75571: LD_ADDR_VAR 0 2
75575: PUSH
75576: LD_INT 2
75578: PUSH
75579: LD_INT 4
75581: PUSH
75582: LD_INT 11
75584: PUSH
75585: LD_INT 12
75587: PUSH
75588: LD_INT 15
75590: PUSH
75591: LD_INT 16
75593: PUSH
75594: LD_INT 22
75596: PUSH
75597: LD_INT 23
75599: PUSH
75600: LD_INT 26
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: LIST
75607: LIST
75608: LIST
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: PUSH
75614: LD_INT 101
75616: PUSH
75617: LD_INT 102
75619: PUSH
75620: LD_INT 105
75622: PUSH
75623: LD_INT 106
75625: PUSH
75626: LD_INT 108
75628: PUSH
75629: LD_INT 116
75631: PUSH
75632: LD_INT 117
75634: PUSH
75635: LD_INT 118
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: LIST
75647: PUSH
75648: EMPTY
75649: LIST
75650: LIST
75651: ST_TO_ADDR
75652: GO 78635
75654: LD_INT 3
75656: DOUBLE
75657: EQUAL
75658: IFTRUE 75662
75660: GO 75750
75662: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
75663: LD_ADDR_VAR 0 2
75667: PUSH
75668: LD_INT 2
75670: PUSH
75671: LD_INT 4
75673: PUSH
75674: LD_INT 5
75676: PUSH
75677: LD_INT 11
75679: PUSH
75680: LD_INT 12
75682: PUSH
75683: LD_INT 15
75685: PUSH
75686: LD_INT 16
75688: PUSH
75689: LD_INT 22
75691: PUSH
75692: LD_INT 26
75694: PUSH
75695: LD_INT 36
75697: PUSH
75698: EMPTY
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: LIST
75706: LIST
75707: LIST
75708: LIST
75709: PUSH
75710: LD_INT 101
75712: PUSH
75713: LD_INT 102
75715: PUSH
75716: LD_INT 105
75718: PUSH
75719: LD_INT 106
75721: PUSH
75722: LD_INT 108
75724: PUSH
75725: LD_INT 116
75727: PUSH
75728: LD_INT 117
75730: PUSH
75731: LD_INT 118
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: ST_TO_ADDR
75748: GO 78635
75750: LD_INT 4
75752: DOUBLE
75753: EQUAL
75754: IFTRUE 75758
75756: GO 75854
75758: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
75759: LD_ADDR_VAR 0 2
75763: PUSH
75764: LD_INT 2
75766: PUSH
75767: LD_INT 4
75769: PUSH
75770: LD_INT 5
75772: PUSH
75773: LD_INT 8
75775: PUSH
75776: LD_INT 11
75778: PUSH
75779: LD_INT 12
75781: PUSH
75782: LD_INT 15
75784: PUSH
75785: LD_INT 16
75787: PUSH
75788: LD_INT 22
75790: PUSH
75791: LD_INT 23
75793: PUSH
75794: LD_INT 26
75796: PUSH
75797: LD_INT 36
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: LIST
75804: LIST
75805: LIST
75806: LIST
75807: LIST
75808: LIST
75809: LIST
75810: LIST
75811: LIST
75812: LIST
75813: PUSH
75814: LD_INT 101
75816: PUSH
75817: LD_INT 102
75819: PUSH
75820: LD_INT 105
75822: PUSH
75823: LD_INT 106
75825: PUSH
75826: LD_INT 108
75828: PUSH
75829: LD_INT 116
75831: PUSH
75832: LD_INT 117
75834: PUSH
75835: LD_INT 118
75837: PUSH
75838: EMPTY
75839: LIST
75840: LIST
75841: LIST
75842: LIST
75843: LIST
75844: LIST
75845: LIST
75846: LIST
75847: PUSH
75848: EMPTY
75849: LIST
75850: LIST
75851: ST_TO_ADDR
75852: GO 78635
75854: LD_INT 5
75856: DOUBLE
75857: EQUAL
75858: IFTRUE 75862
75860: GO 75974
75862: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
75863: LD_ADDR_VAR 0 2
75867: PUSH
75868: LD_INT 2
75870: PUSH
75871: LD_INT 4
75873: PUSH
75874: LD_INT 5
75876: PUSH
75877: LD_INT 6
75879: PUSH
75880: LD_INT 8
75882: PUSH
75883: LD_INT 11
75885: PUSH
75886: LD_INT 12
75888: PUSH
75889: LD_INT 15
75891: PUSH
75892: LD_INT 16
75894: PUSH
75895: LD_INT 22
75897: PUSH
75898: LD_INT 23
75900: PUSH
75901: LD_INT 25
75903: PUSH
75904: LD_INT 26
75906: PUSH
75907: LD_INT 36
75909: PUSH
75910: EMPTY
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: LIST
75925: PUSH
75926: LD_INT 101
75928: PUSH
75929: LD_INT 102
75931: PUSH
75932: LD_INT 105
75934: PUSH
75935: LD_INT 106
75937: PUSH
75938: LD_INT 108
75940: PUSH
75941: LD_INT 109
75943: PUSH
75944: LD_INT 112
75946: PUSH
75947: LD_INT 116
75949: PUSH
75950: LD_INT 117
75952: PUSH
75953: LD_INT 118
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: PUSH
75968: EMPTY
75969: LIST
75970: LIST
75971: ST_TO_ADDR
75972: GO 78635
75974: LD_INT 6
75976: DOUBLE
75977: EQUAL
75978: IFTRUE 75982
75980: GO 76114
75982: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
75983: LD_ADDR_VAR 0 2
75987: PUSH
75988: LD_INT 2
75990: PUSH
75991: LD_INT 4
75993: PUSH
75994: LD_INT 5
75996: PUSH
75997: LD_INT 6
75999: PUSH
76000: LD_INT 8
76002: PUSH
76003: LD_INT 11
76005: PUSH
76006: LD_INT 12
76008: PUSH
76009: LD_INT 15
76011: PUSH
76012: LD_INT 16
76014: PUSH
76015: LD_INT 20
76017: PUSH
76018: LD_INT 21
76020: PUSH
76021: LD_INT 22
76023: PUSH
76024: LD_INT 23
76026: PUSH
76027: LD_INT 25
76029: PUSH
76030: LD_INT 26
76032: PUSH
76033: LD_INT 30
76035: PUSH
76036: LD_INT 31
76038: PUSH
76039: LD_INT 32
76041: PUSH
76042: LD_INT 36
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: LIST
76057: LIST
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: PUSH
76066: LD_INT 101
76068: PUSH
76069: LD_INT 102
76071: PUSH
76072: LD_INT 105
76074: PUSH
76075: LD_INT 106
76077: PUSH
76078: LD_INT 108
76080: PUSH
76081: LD_INT 109
76083: PUSH
76084: LD_INT 112
76086: PUSH
76087: LD_INT 116
76089: PUSH
76090: LD_INT 117
76092: PUSH
76093: LD_INT 118
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: LIST
76105: LIST
76106: LIST
76107: PUSH
76108: EMPTY
76109: LIST
76110: LIST
76111: ST_TO_ADDR
76112: GO 78635
76114: LD_INT 7
76116: DOUBLE
76117: EQUAL
76118: IFTRUE 76122
76120: GO 76234
76122: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
76123: LD_ADDR_VAR 0 2
76127: PUSH
76128: LD_INT 2
76130: PUSH
76131: LD_INT 4
76133: PUSH
76134: LD_INT 5
76136: PUSH
76137: LD_INT 7
76139: PUSH
76140: LD_INT 11
76142: PUSH
76143: LD_INT 12
76145: PUSH
76146: LD_INT 15
76148: PUSH
76149: LD_INT 16
76151: PUSH
76152: LD_INT 20
76154: PUSH
76155: LD_INT 21
76157: PUSH
76158: LD_INT 22
76160: PUSH
76161: LD_INT 23
76163: PUSH
76164: LD_INT 25
76166: PUSH
76167: LD_INT 26
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: LIST
76174: LIST
76175: LIST
76176: LIST
76177: LIST
76178: LIST
76179: LIST
76180: LIST
76181: LIST
76182: LIST
76183: LIST
76184: LIST
76185: PUSH
76186: LD_INT 101
76188: PUSH
76189: LD_INT 102
76191: PUSH
76192: LD_INT 103
76194: PUSH
76195: LD_INT 105
76197: PUSH
76198: LD_INT 106
76200: PUSH
76201: LD_INT 108
76203: PUSH
76204: LD_INT 112
76206: PUSH
76207: LD_INT 116
76209: PUSH
76210: LD_INT 117
76212: PUSH
76213: LD_INT 118
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: PUSH
76228: EMPTY
76229: LIST
76230: LIST
76231: ST_TO_ADDR
76232: GO 78635
76234: LD_INT 8
76236: DOUBLE
76237: EQUAL
76238: IFTRUE 76242
76240: GO 76382
76242: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
76243: LD_ADDR_VAR 0 2
76247: PUSH
76248: LD_INT 2
76250: PUSH
76251: LD_INT 4
76253: PUSH
76254: LD_INT 5
76256: PUSH
76257: LD_INT 6
76259: PUSH
76260: LD_INT 7
76262: PUSH
76263: LD_INT 8
76265: PUSH
76266: LD_INT 11
76268: PUSH
76269: LD_INT 12
76271: PUSH
76272: LD_INT 15
76274: PUSH
76275: LD_INT 16
76277: PUSH
76278: LD_INT 20
76280: PUSH
76281: LD_INT 21
76283: PUSH
76284: LD_INT 22
76286: PUSH
76287: LD_INT 23
76289: PUSH
76290: LD_INT 25
76292: PUSH
76293: LD_INT 26
76295: PUSH
76296: LD_INT 30
76298: PUSH
76299: LD_INT 31
76301: PUSH
76302: LD_INT 32
76304: PUSH
76305: LD_INT 36
76307: PUSH
76308: EMPTY
76309: LIST
76310: LIST
76311: LIST
76312: LIST
76313: LIST
76314: LIST
76315: LIST
76316: LIST
76317: LIST
76318: LIST
76319: LIST
76320: LIST
76321: LIST
76322: LIST
76323: LIST
76324: LIST
76325: LIST
76326: LIST
76327: LIST
76328: LIST
76329: PUSH
76330: LD_INT 101
76332: PUSH
76333: LD_INT 102
76335: PUSH
76336: LD_INT 103
76338: PUSH
76339: LD_INT 105
76341: PUSH
76342: LD_INT 106
76344: PUSH
76345: LD_INT 108
76347: PUSH
76348: LD_INT 109
76350: PUSH
76351: LD_INT 112
76353: PUSH
76354: LD_INT 116
76356: PUSH
76357: LD_INT 117
76359: PUSH
76360: LD_INT 118
76362: PUSH
76363: EMPTY
76364: LIST
76365: LIST
76366: LIST
76367: LIST
76368: LIST
76369: LIST
76370: LIST
76371: LIST
76372: LIST
76373: LIST
76374: LIST
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: ST_TO_ADDR
76380: GO 78635
76382: LD_INT 9
76384: DOUBLE
76385: EQUAL
76386: IFTRUE 76390
76388: GO 76538
76390: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
76391: LD_ADDR_VAR 0 2
76395: PUSH
76396: LD_INT 2
76398: PUSH
76399: LD_INT 4
76401: PUSH
76402: LD_INT 5
76404: PUSH
76405: LD_INT 6
76407: PUSH
76408: LD_INT 7
76410: PUSH
76411: LD_INT 8
76413: PUSH
76414: LD_INT 11
76416: PUSH
76417: LD_INT 12
76419: PUSH
76420: LD_INT 15
76422: PUSH
76423: LD_INT 16
76425: PUSH
76426: LD_INT 20
76428: PUSH
76429: LD_INT 21
76431: PUSH
76432: LD_INT 22
76434: PUSH
76435: LD_INT 23
76437: PUSH
76438: LD_INT 25
76440: PUSH
76441: LD_INT 26
76443: PUSH
76444: LD_INT 28
76446: PUSH
76447: LD_INT 30
76449: PUSH
76450: LD_INT 31
76452: PUSH
76453: LD_INT 32
76455: PUSH
76456: LD_INT 36
76458: PUSH
76459: EMPTY
76460: LIST
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: LIST
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: PUSH
76482: LD_INT 101
76484: PUSH
76485: LD_INT 102
76487: PUSH
76488: LD_INT 103
76490: PUSH
76491: LD_INT 105
76493: PUSH
76494: LD_INT 106
76496: PUSH
76497: LD_INT 108
76499: PUSH
76500: LD_INT 109
76502: PUSH
76503: LD_INT 112
76505: PUSH
76506: LD_INT 114
76508: PUSH
76509: LD_INT 116
76511: PUSH
76512: LD_INT 117
76514: PUSH
76515: LD_INT 118
76517: PUSH
76518: EMPTY
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: LIST
76530: LIST
76531: PUSH
76532: EMPTY
76533: LIST
76534: LIST
76535: ST_TO_ADDR
76536: GO 78635
76538: LD_INT 10
76540: DOUBLE
76541: EQUAL
76542: IFTRUE 76546
76544: GO 76742
76546: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
76547: LD_ADDR_VAR 0 2
76551: PUSH
76552: LD_INT 2
76554: PUSH
76555: LD_INT 4
76557: PUSH
76558: LD_INT 5
76560: PUSH
76561: LD_INT 6
76563: PUSH
76564: LD_INT 7
76566: PUSH
76567: LD_INT 8
76569: PUSH
76570: LD_INT 9
76572: PUSH
76573: LD_INT 10
76575: PUSH
76576: LD_INT 11
76578: PUSH
76579: LD_INT 12
76581: PUSH
76582: LD_INT 13
76584: PUSH
76585: LD_INT 14
76587: PUSH
76588: LD_INT 15
76590: PUSH
76591: LD_INT 16
76593: PUSH
76594: LD_INT 17
76596: PUSH
76597: LD_INT 18
76599: PUSH
76600: LD_INT 19
76602: PUSH
76603: LD_INT 20
76605: PUSH
76606: LD_INT 21
76608: PUSH
76609: LD_INT 22
76611: PUSH
76612: LD_INT 23
76614: PUSH
76615: LD_INT 24
76617: PUSH
76618: LD_INT 25
76620: PUSH
76621: LD_INT 26
76623: PUSH
76624: LD_INT 28
76626: PUSH
76627: LD_INT 30
76629: PUSH
76630: LD_INT 31
76632: PUSH
76633: LD_INT 32
76635: PUSH
76636: LD_INT 36
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: LIST
76643: LIST
76644: LIST
76645: LIST
76646: LIST
76647: LIST
76648: LIST
76649: LIST
76650: LIST
76651: LIST
76652: LIST
76653: LIST
76654: LIST
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: LIST
76660: LIST
76661: LIST
76662: LIST
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: PUSH
76670: LD_INT 101
76672: PUSH
76673: LD_INT 102
76675: PUSH
76676: LD_INT 103
76678: PUSH
76679: LD_INT 104
76681: PUSH
76682: LD_INT 105
76684: PUSH
76685: LD_INT 106
76687: PUSH
76688: LD_INT 107
76690: PUSH
76691: LD_INT 108
76693: PUSH
76694: LD_INT 109
76696: PUSH
76697: LD_INT 110
76699: PUSH
76700: LD_INT 111
76702: PUSH
76703: LD_INT 112
76705: PUSH
76706: LD_INT 114
76708: PUSH
76709: LD_INT 116
76711: PUSH
76712: LD_INT 117
76714: PUSH
76715: LD_INT 118
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: LIST
76722: LIST
76723: LIST
76724: LIST
76725: LIST
76726: LIST
76727: LIST
76728: LIST
76729: LIST
76730: LIST
76731: LIST
76732: LIST
76733: LIST
76734: LIST
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: ST_TO_ADDR
76740: GO 78635
76742: LD_INT 11
76744: DOUBLE
76745: EQUAL
76746: IFTRUE 76750
76748: GO 76954
76750: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
76751: LD_ADDR_VAR 0 2
76755: PUSH
76756: LD_INT 2
76758: PUSH
76759: LD_INT 3
76761: PUSH
76762: LD_INT 4
76764: PUSH
76765: LD_INT 5
76767: PUSH
76768: LD_INT 6
76770: PUSH
76771: LD_INT 7
76773: PUSH
76774: LD_INT 8
76776: PUSH
76777: LD_INT 9
76779: PUSH
76780: LD_INT 10
76782: PUSH
76783: LD_INT 11
76785: PUSH
76786: LD_INT 12
76788: PUSH
76789: LD_INT 13
76791: PUSH
76792: LD_INT 14
76794: PUSH
76795: LD_INT 15
76797: PUSH
76798: LD_INT 16
76800: PUSH
76801: LD_INT 17
76803: PUSH
76804: LD_INT 18
76806: PUSH
76807: LD_INT 19
76809: PUSH
76810: LD_INT 20
76812: PUSH
76813: LD_INT 21
76815: PUSH
76816: LD_INT 22
76818: PUSH
76819: LD_INT 23
76821: PUSH
76822: LD_INT 24
76824: PUSH
76825: LD_INT 25
76827: PUSH
76828: LD_INT 26
76830: PUSH
76831: LD_INT 28
76833: PUSH
76834: LD_INT 30
76836: PUSH
76837: LD_INT 31
76839: PUSH
76840: LD_INT 32
76842: PUSH
76843: LD_INT 34
76845: PUSH
76846: LD_INT 36
76848: PUSH
76849: EMPTY
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: LIST
76856: LIST
76857: LIST
76858: LIST
76859: LIST
76860: LIST
76861: LIST
76862: LIST
76863: LIST
76864: LIST
76865: LIST
76866: LIST
76867: LIST
76868: LIST
76869: LIST
76870: LIST
76871: LIST
76872: LIST
76873: LIST
76874: LIST
76875: LIST
76876: LIST
76877: LIST
76878: LIST
76879: LIST
76880: LIST
76881: PUSH
76882: LD_INT 101
76884: PUSH
76885: LD_INT 102
76887: PUSH
76888: LD_INT 103
76890: PUSH
76891: LD_INT 104
76893: PUSH
76894: LD_INT 105
76896: PUSH
76897: LD_INT 106
76899: PUSH
76900: LD_INT 107
76902: PUSH
76903: LD_INT 108
76905: PUSH
76906: LD_INT 109
76908: PUSH
76909: LD_INT 110
76911: PUSH
76912: LD_INT 111
76914: PUSH
76915: LD_INT 112
76917: PUSH
76918: LD_INT 114
76920: PUSH
76921: LD_INT 116
76923: PUSH
76924: LD_INT 117
76926: PUSH
76927: LD_INT 118
76929: PUSH
76930: EMPTY
76931: LIST
76932: LIST
76933: LIST
76934: LIST
76935: LIST
76936: LIST
76937: LIST
76938: LIST
76939: LIST
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: PUSH
76948: EMPTY
76949: LIST
76950: LIST
76951: ST_TO_ADDR
76952: GO 78635
76954: LD_INT 12
76956: DOUBLE
76957: EQUAL
76958: IFTRUE 76962
76960: GO 77182
76962: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
76963: LD_ADDR_VAR 0 2
76967: PUSH
76968: LD_INT 1
76970: PUSH
76971: LD_INT 2
76973: PUSH
76974: LD_INT 3
76976: PUSH
76977: LD_INT 4
76979: PUSH
76980: LD_INT 5
76982: PUSH
76983: LD_INT 6
76985: PUSH
76986: LD_INT 7
76988: PUSH
76989: LD_INT 8
76991: PUSH
76992: LD_INT 9
76994: PUSH
76995: LD_INT 10
76997: PUSH
76998: LD_INT 11
77000: PUSH
77001: LD_INT 12
77003: PUSH
77004: LD_INT 13
77006: PUSH
77007: LD_INT 14
77009: PUSH
77010: LD_INT 15
77012: PUSH
77013: LD_INT 16
77015: PUSH
77016: LD_INT 17
77018: PUSH
77019: LD_INT 18
77021: PUSH
77022: LD_INT 19
77024: PUSH
77025: LD_INT 20
77027: PUSH
77028: LD_INT 21
77030: PUSH
77031: LD_INT 22
77033: PUSH
77034: LD_INT 23
77036: PUSH
77037: LD_INT 24
77039: PUSH
77040: LD_INT 25
77042: PUSH
77043: LD_INT 26
77045: PUSH
77046: LD_INT 27
77048: PUSH
77049: LD_INT 28
77051: PUSH
77052: LD_INT 30
77054: PUSH
77055: LD_INT 31
77057: PUSH
77058: LD_INT 32
77060: PUSH
77061: LD_INT 33
77063: PUSH
77064: LD_INT 34
77066: PUSH
77067: LD_INT 36
77069: PUSH
77070: EMPTY
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: LIST
77076: LIST
77077: LIST
77078: LIST
77079: LIST
77080: LIST
77081: LIST
77082: LIST
77083: LIST
77084: LIST
77085: LIST
77086: LIST
77087: LIST
77088: LIST
77089: LIST
77090: LIST
77091: LIST
77092: LIST
77093: LIST
77094: LIST
77095: LIST
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: LIST
77105: PUSH
77106: LD_INT 101
77108: PUSH
77109: LD_INT 102
77111: PUSH
77112: LD_INT 103
77114: PUSH
77115: LD_INT 104
77117: PUSH
77118: LD_INT 105
77120: PUSH
77121: LD_INT 106
77123: PUSH
77124: LD_INT 107
77126: PUSH
77127: LD_INT 108
77129: PUSH
77130: LD_INT 109
77132: PUSH
77133: LD_INT 110
77135: PUSH
77136: LD_INT 111
77138: PUSH
77139: LD_INT 112
77141: PUSH
77142: LD_INT 113
77144: PUSH
77145: LD_INT 114
77147: PUSH
77148: LD_INT 116
77150: PUSH
77151: LD_INT 117
77153: PUSH
77154: LD_INT 118
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: LIST
77161: LIST
77162: LIST
77163: LIST
77164: LIST
77165: LIST
77166: LIST
77167: LIST
77168: LIST
77169: LIST
77170: LIST
77171: LIST
77172: LIST
77173: LIST
77174: LIST
77175: PUSH
77176: EMPTY
77177: LIST
77178: LIST
77179: ST_TO_ADDR
77180: GO 78635
77182: LD_INT 13
77184: DOUBLE
77185: EQUAL
77186: IFTRUE 77190
77188: GO 77398
77190: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
77191: LD_ADDR_VAR 0 2
77195: PUSH
77196: LD_INT 1
77198: PUSH
77199: LD_INT 2
77201: PUSH
77202: LD_INT 3
77204: PUSH
77205: LD_INT 4
77207: PUSH
77208: LD_INT 5
77210: PUSH
77211: LD_INT 8
77213: PUSH
77214: LD_INT 9
77216: PUSH
77217: LD_INT 10
77219: PUSH
77220: LD_INT 11
77222: PUSH
77223: LD_INT 12
77225: PUSH
77226: LD_INT 14
77228: PUSH
77229: LD_INT 15
77231: PUSH
77232: LD_INT 16
77234: PUSH
77235: LD_INT 17
77237: PUSH
77238: LD_INT 18
77240: PUSH
77241: LD_INT 19
77243: PUSH
77244: LD_INT 20
77246: PUSH
77247: LD_INT 21
77249: PUSH
77250: LD_INT 22
77252: PUSH
77253: LD_INT 23
77255: PUSH
77256: LD_INT 24
77258: PUSH
77259: LD_INT 25
77261: PUSH
77262: LD_INT 26
77264: PUSH
77265: LD_INT 27
77267: PUSH
77268: LD_INT 28
77270: PUSH
77271: LD_INT 30
77273: PUSH
77274: LD_INT 31
77276: PUSH
77277: LD_INT 32
77279: PUSH
77280: LD_INT 33
77282: PUSH
77283: LD_INT 34
77285: PUSH
77286: LD_INT 36
77288: PUSH
77289: EMPTY
77290: LIST
77291: LIST
77292: LIST
77293: LIST
77294: LIST
77295: LIST
77296: LIST
77297: LIST
77298: LIST
77299: LIST
77300: LIST
77301: LIST
77302: LIST
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: LIST
77318: LIST
77319: LIST
77320: LIST
77321: PUSH
77322: LD_INT 101
77324: PUSH
77325: LD_INT 102
77327: PUSH
77328: LD_INT 103
77330: PUSH
77331: LD_INT 104
77333: PUSH
77334: LD_INT 105
77336: PUSH
77337: LD_INT 106
77339: PUSH
77340: LD_INT 107
77342: PUSH
77343: LD_INT 108
77345: PUSH
77346: LD_INT 109
77348: PUSH
77349: LD_INT 110
77351: PUSH
77352: LD_INT 111
77354: PUSH
77355: LD_INT 112
77357: PUSH
77358: LD_INT 113
77360: PUSH
77361: LD_INT 114
77363: PUSH
77364: LD_INT 116
77366: PUSH
77367: LD_INT 117
77369: PUSH
77370: LD_INT 118
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: LIST
77377: LIST
77378: LIST
77379: LIST
77380: LIST
77381: LIST
77382: LIST
77383: LIST
77384: LIST
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: LIST
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: ST_TO_ADDR
77396: GO 78635
77398: LD_INT 14
77400: DOUBLE
77401: EQUAL
77402: IFTRUE 77406
77404: GO 77630
77406: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
77407: LD_ADDR_VAR 0 2
77411: PUSH
77412: LD_INT 1
77414: PUSH
77415: LD_INT 2
77417: PUSH
77418: LD_INT 3
77420: PUSH
77421: LD_INT 4
77423: PUSH
77424: LD_INT 5
77426: PUSH
77427: LD_INT 6
77429: PUSH
77430: LD_INT 7
77432: PUSH
77433: LD_INT 8
77435: PUSH
77436: LD_INT 9
77438: PUSH
77439: LD_INT 10
77441: PUSH
77442: LD_INT 11
77444: PUSH
77445: LD_INT 12
77447: PUSH
77448: LD_INT 13
77450: PUSH
77451: LD_INT 14
77453: PUSH
77454: LD_INT 15
77456: PUSH
77457: LD_INT 16
77459: PUSH
77460: LD_INT 17
77462: PUSH
77463: LD_INT 18
77465: PUSH
77466: LD_INT 19
77468: PUSH
77469: LD_INT 20
77471: PUSH
77472: LD_INT 21
77474: PUSH
77475: LD_INT 22
77477: PUSH
77478: LD_INT 23
77480: PUSH
77481: LD_INT 24
77483: PUSH
77484: LD_INT 25
77486: PUSH
77487: LD_INT 26
77489: PUSH
77490: LD_INT 27
77492: PUSH
77493: LD_INT 28
77495: PUSH
77496: LD_INT 29
77498: PUSH
77499: LD_INT 30
77501: PUSH
77502: LD_INT 31
77504: PUSH
77505: LD_INT 32
77507: PUSH
77508: LD_INT 33
77510: PUSH
77511: LD_INT 34
77513: PUSH
77514: LD_INT 36
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: LIST
77525: LIST
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: LIST
77535: LIST
77536: LIST
77537: LIST
77538: LIST
77539: LIST
77540: LIST
77541: LIST
77542: LIST
77543: LIST
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: LIST
77549: LIST
77550: LIST
77551: LIST
77552: LIST
77553: PUSH
77554: LD_INT 101
77556: PUSH
77557: LD_INT 102
77559: PUSH
77560: LD_INT 103
77562: PUSH
77563: LD_INT 104
77565: PUSH
77566: LD_INT 105
77568: PUSH
77569: LD_INT 106
77571: PUSH
77572: LD_INT 107
77574: PUSH
77575: LD_INT 108
77577: PUSH
77578: LD_INT 109
77580: PUSH
77581: LD_INT 110
77583: PUSH
77584: LD_INT 111
77586: PUSH
77587: LD_INT 112
77589: PUSH
77590: LD_INT 113
77592: PUSH
77593: LD_INT 114
77595: PUSH
77596: LD_INT 116
77598: PUSH
77599: LD_INT 117
77601: PUSH
77602: LD_INT 118
77604: PUSH
77605: EMPTY
77606: LIST
77607: LIST
77608: LIST
77609: LIST
77610: LIST
77611: LIST
77612: LIST
77613: LIST
77614: LIST
77615: LIST
77616: LIST
77617: LIST
77618: LIST
77619: LIST
77620: LIST
77621: LIST
77622: LIST
77623: PUSH
77624: EMPTY
77625: LIST
77626: LIST
77627: ST_TO_ADDR
77628: GO 78635
77630: LD_INT 15
77632: DOUBLE
77633: EQUAL
77634: IFTRUE 77638
77636: GO 77862
77638: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
77639: LD_ADDR_VAR 0 2
77643: PUSH
77644: LD_INT 1
77646: PUSH
77647: LD_INT 2
77649: PUSH
77650: LD_INT 3
77652: PUSH
77653: LD_INT 4
77655: PUSH
77656: LD_INT 5
77658: PUSH
77659: LD_INT 6
77661: PUSH
77662: LD_INT 7
77664: PUSH
77665: LD_INT 8
77667: PUSH
77668: LD_INT 9
77670: PUSH
77671: LD_INT 10
77673: PUSH
77674: LD_INT 11
77676: PUSH
77677: LD_INT 12
77679: PUSH
77680: LD_INT 13
77682: PUSH
77683: LD_INT 14
77685: PUSH
77686: LD_INT 15
77688: PUSH
77689: LD_INT 16
77691: PUSH
77692: LD_INT 17
77694: PUSH
77695: LD_INT 18
77697: PUSH
77698: LD_INT 19
77700: PUSH
77701: LD_INT 20
77703: PUSH
77704: LD_INT 21
77706: PUSH
77707: LD_INT 22
77709: PUSH
77710: LD_INT 23
77712: PUSH
77713: LD_INT 24
77715: PUSH
77716: LD_INT 25
77718: PUSH
77719: LD_INT 26
77721: PUSH
77722: LD_INT 27
77724: PUSH
77725: LD_INT 28
77727: PUSH
77728: LD_INT 29
77730: PUSH
77731: LD_INT 30
77733: PUSH
77734: LD_INT 31
77736: PUSH
77737: LD_INT 32
77739: PUSH
77740: LD_INT 33
77742: PUSH
77743: LD_INT 34
77745: PUSH
77746: LD_INT 36
77748: PUSH
77749: EMPTY
77750: LIST
77751: LIST
77752: LIST
77753: LIST
77754: LIST
77755: LIST
77756: LIST
77757: LIST
77758: LIST
77759: LIST
77760: LIST
77761: LIST
77762: LIST
77763: LIST
77764: LIST
77765: LIST
77766: LIST
77767: LIST
77768: LIST
77769: LIST
77770: LIST
77771: LIST
77772: LIST
77773: LIST
77774: LIST
77775: LIST
77776: LIST
77777: LIST
77778: LIST
77779: LIST
77780: LIST
77781: LIST
77782: LIST
77783: LIST
77784: LIST
77785: PUSH
77786: LD_INT 101
77788: PUSH
77789: LD_INT 102
77791: PUSH
77792: LD_INT 103
77794: PUSH
77795: LD_INT 104
77797: PUSH
77798: LD_INT 105
77800: PUSH
77801: LD_INT 106
77803: PUSH
77804: LD_INT 107
77806: PUSH
77807: LD_INT 108
77809: PUSH
77810: LD_INT 109
77812: PUSH
77813: LD_INT 110
77815: PUSH
77816: LD_INT 111
77818: PUSH
77819: LD_INT 112
77821: PUSH
77822: LD_INT 113
77824: PUSH
77825: LD_INT 114
77827: PUSH
77828: LD_INT 116
77830: PUSH
77831: LD_INT 117
77833: PUSH
77834: LD_INT 118
77836: PUSH
77837: EMPTY
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: LIST
77848: LIST
77849: LIST
77850: LIST
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: PUSH
77856: EMPTY
77857: LIST
77858: LIST
77859: ST_TO_ADDR
77860: GO 78635
77862: LD_INT 16
77864: DOUBLE
77865: EQUAL
77866: IFTRUE 77870
77868: GO 78006
77870: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
77871: LD_ADDR_VAR 0 2
77875: PUSH
77876: LD_INT 2
77878: PUSH
77879: LD_INT 4
77881: PUSH
77882: LD_INT 5
77884: PUSH
77885: LD_INT 7
77887: PUSH
77888: LD_INT 11
77890: PUSH
77891: LD_INT 12
77893: PUSH
77894: LD_INT 15
77896: PUSH
77897: LD_INT 16
77899: PUSH
77900: LD_INT 20
77902: PUSH
77903: LD_INT 21
77905: PUSH
77906: LD_INT 22
77908: PUSH
77909: LD_INT 23
77911: PUSH
77912: LD_INT 25
77914: PUSH
77915: LD_INT 26
77917: PUSH
77918: LD_INT 30
77920: PUSH
77921: LD_INT 31
77923: PUSH
77924: LD_INT 32
77926: PUSH
77927: LD_INT 33
77929: PUSH
77930: LD_INT 34
77932: PUSH
77933: EMPTY
77934: LIST
77935: LIST
77936: LIST
77937: LIST
77938: LIST
77939: LIST
77940: LIST
77941: LIST
77942: LIST
77943: LIST
77944: LIST
77945: LIST
77946: LIST
77947: LIST
77948: LIST
77949: LIST
77950: LIST
77951: LIST
77952: LIST
77953: PUSH
77954: LD_INT 101
77956: PUSH
77957: LD_INT 102
77959: PUSH
77960: LD_INT 103
77962: PUSH
77963: LD_INT 106
77965: PUSH
77966: LD_INT 108
77968: PUSH
77969: LD_INT 112
77971: PUSH
77972: LD_INT 113
77974: PUSH
77975: LD_INT 114
77977: PUSH
77978: LD_INT 116
77980: PUSH
77981: LD_INT 117
77983: PUSH
77984: LD_INT 118
77986: PUSH
77987: EMPTY
77988: LIST
77989: LIST
77990: LIST
77991: LIST
77992: LIST
77993: LIST
77994: LIST
77995: LIST
77996: LIST
77997: LIST
77998: LIST
77999: PUSH
78000: EMPTY
78001: LIST
78002: LIST
78003: ST_TO_ADDR
78004: GO 78635
78006: LD_INT 17
78008: DOUBLE
78009: EQUAL
78010: IFTRUE 78014
78012: GO 78238
78014: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
78015: LD_ADDR_VAR 0 2
78019: PUSH
78020: LD_INT 1
78022: PUSH
78023: LD_INT 2
78025: PUSH
78026: LD_INT 3
78028: PUSH
78029: LD_INT 4
78031: PUSH
78032: LD_INT 5
78034: PUSH
78035: LD_INT 6
78037: PUSH
78038: LD_INT 7
78040: PUSH
78041: LD_INT 8
78043: PUSH
78044: LD_INT 9
78046: PUSH
78047: LD_INT 10
78049: PUSH
78050: LD_INT 11
78052: PUSH
78053: LD_INT 12
78055: PUSH
78056: LD_INT 13
78058: PUSH
78059: LD_INT 14
78061: PUSH
78062: LD_INT 15
78064: PUSH
78065: LD_INT 16
78067: PUSH
78068: LD_INT 17
78070: PUSH
78071: LD_INT 18
78073: PUSH
78074: LD_INT 19
78076: PUSH
78077: LD_INT 20
78079: PUSH
78080: LD_INT 21
78082: PUSH
78083: LD_INT 22
78085: PUSH
78086: LD_INT 23
78088: PUSH
78089: LD_INT 24
78091: PUSH
78092: LD_INT 25
78094: PUSH
78095: LD_INT 26
78097: PUSH
78098: LD_INT 27
78100: PUSH
78101: LD_INT 28
78103: PUSH
78104: LD_INT 29
78106: PUSH
78107: LD_INT 30
78109: PUSH
78110: LD_INT 31
78112: PUSH
78113: LD_INT 32
78115: PUSH
78116: LD_INT 33
78118: PUSH
78119: LD_INT 34
78121: PUSH
78122: LD_INT 36
78124: PUSH
78125: EMPTY
78126: LIST
78127: LIST
78128: LIST
78129: LIST
78130: LIST
78131: LIST
78132: LIST
78133: LIST
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: LIST
78139: LIST
78140: LIST
78141: LIST
78142: LIST
78143: LIST
78144: LIST
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: LIST
78157: LIST
78158: LIST
78159: LIST
78160: LIST
78161: PUSH
78162: LD_INT 101
78164: PUSH
78165: LD_INT 102
78167: PUSH
78168: LD_INT 103
78170: PUSH
78171: LD_INT 104
78173: PUSH
78174: LD_INT 105
78176: PUSH
78177: LD_INT 106
78179: PUSH
78180: LD_INT 107
78182: PUSH
78183: LD_INT 108
78185: PUSH
78186: LD_INT 109
78188: PUSH
78189: LD_INT 110
78191: PUSH
78192: LD_INT 111
78194: PUSH
78195: LD_INT 112
78197: PUSH
78198: LD_INT 113
78200: PUSH
78201: LD_INT 114
78203: PUSH
78204: LD_INT 116
78206: PUSH
78207: LD_INT 117
78209: PUSH
78210: LD_INT 118
78212: PUSH
78213: EMPTY
78214: LIST
78215: LIST
78216: LIST
78217: LIST
78218: LIST
78219: LIST
78220: LIST
78221: LIST
78222: LIST
78223: LIST
78224: LIST
78225: LIST
78226: LIST
78227: LIST
78228: LIST
78229: LIST
78230: LIST
78231: PUSH
78232: EMPTY
78233: LIST
78234: LIST
78235: ST_TO_ADDR
78236: GO 78635
78238: LD_INT 18
78240: DOUBLE
78241: EQUAL
78242: IFTRUE 78246
78244: GO 78394
78246: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
78247: LD_ADDR_VAR 0 2
78251: PUSH
78252: LD_INT 2
78254: PUSH
78255: LD_INT 4
78257: PUSH
78258: LD_INT 5
78260: PUSH
78261: LD_INT 7
78263: PUSH
78264: LD_INT 11
78266: PUSH
78267: LD_INT 12
78269: PUSH
78270: LD_INT 15
78272: PUSH
78273: LD_INT 16
78275: PUSH
78276: LD_INT 20
78278: PUSH
78279: LD_INT 21
78281: PUSH
78282: LD_INT 22
78284: PUSH
78285: LD_INT 23
78287: PUSH
78288: LD_INT 25
78290: PUSH
78291: LD_INT 26
78293: PUSH
78294: LD_INT 30
78296: PUSH
78297: LD_INT 31
78299: PUSH
78300: LD_INT 32
78302: PUSH
78303: LD_INT 33
78305: PUSH
78306: LD_INT 34
78308: PUSH
78309: LD_INT 35
78311: PUSH
78312: LD_INT 36
78314: PUSH
78315: EMPTY
78316: LIST
78317: LIST
78318: LIST
78319: LIST
78320: LIST
78321: LIST
78322: LIST
78323: LIST
78324: LIST
78325: LIST
78326: LIST
78327: LIST
78328: LIST
78329: LIST
78330: LIST
78331: LIST
78332: LIST
78333: LIST
78334: LIST
78335: LIST
78336: LIST
78337: PUSH
78338: LD_INT 101
78340: PUSH
78341: LD_INT 102
78343: PUSH
78344: LD_INT 103
78346: PUSH
78347: LD_INT 106
78349: PUSH
78350: LD_INT 108
78352: PUSH
78353: LD_INT 112
78355: PUSH
78356: LD_INT 113
78358: PUSH
78359: LD_INT 114
78361: PUSH
78362: LD_INT 115
78364: PUSH
78365: LD_INT 116
78367: PUSH
78368: LD_INT 117
78370: PUSH
78371: LD_INT 118
78373: PUSH
78374: EMPTY
78375: LIST
78376: LIST
78377: LIST
78378: LIST
78379: LIST
78380: LIST
78381: LIST
78382: LIST
78383: LIST
78384: LIST
78385: LIST
78386: LIST
78387: PUSH
78388: EMPTY
78389: LIST
78390: LIST
78391: ST_TO_ADDR
78392: GO 78635
78394: LD_INT 19
78396: DOUBLE
78397: EQUAL
78398: IFTRUE 78402
78400: GO 78634
78402: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
78403: LD_ADDR_VAR 0 2
78407: PUSH
78408: LD_INT 1
78410: PUSH
78411: LD_INT 2
78413: PUSH
78414: LD_INT 3
78416: PUSH
78417: LD_INT 4
78419: PUSH
78420: LD_INT 5
78422: PUSH
78423: LD_INT 6
78425: PUSH
78426: LD_INT 7
78428: PUSH
78429: LD_INT 8
78431: PUSH
78432: LD_INT 9
78434: PUSH
78435: LD_INT 10
78437: PUSH
78438: LD_INT 11
78440: PUSH
78441: LD_INT 12
78443: PUSH
78444: LD_INT 13
78446: PUSH
78447: LD_INT 14
78449: PUSH
78450: LD_INT 15
78452: PUSH
78453: LD_INT 16
78455: PUSH
78456: LD_INT 17
78458: PUSH
78459: LD_INT 18
78461: PUSH
78462: LD_INT 19
78464: PUSH
78465: LD_INT 20
78467: PUSH
78468: LD_INT 21
78470: PUSH
78471: LD_INT 22
78473: PUSH
78474: LD_INT 23
78476: PUSH
78477: LD_INT 24
78479: PUSH
78480: LD_INT 25
78482: PUSH
78483: LD_INT 26
78485: PUSH
78486: LD_INT 27
78488: PUSH
78489: LD_INT 28
78491: PUSH
78492: LD_INT 29
78494: PUSH
78495: LD_INT 30
78497: PUSH
78498: LD_INT 31
78500: PUSH
78501: LD_INT 32
78503: PUSH
78504: LD_INT 33
78506: PUSH
78507: LD_INT 34
78509: PUSH
78510: LD_INT 35
78512: PUSH
78513: LD_INT 36
78515: PUSH
78516: EMPTY
78517: LIST
78518: LIST
78519: LIST
78520: LIST
78521: LIST
78522: LIST
78523: LIST
78524: LIST
78525: LIST
78526: LIST
78527: LIST
78528: LIST
78529: LIST
78530: LIST
78531: LIST
78532: LIST
78533: LIST
78534: LIST
78535: LIST
78536: LIST
78537: LIST
78538: LIST
78539: LIST
78540: LIST
78541: LIST
78542: LIST
78543: LIST
78544: LIST
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: LIST
78551: LIST
78552: LIST
78553: PUSH
78554: LD_INT 101
78556: PUSH
78557: LD_INT 102
78559: PUSH
78560: LD_INT 103
78562: PUSH
78563: LD_INT 104
78565: PUSH
78566: LD_INT 105
78568: PUSH
78569: LD_INT 106
78571: PUSH
78572: LD_INT 107
78574: PUSH
78575: LD_INT 108
78577: PUSH
78578: LD_INT 109
78580: PUSH
78581: LD_INT 110
78583: PUSH
78584: LD_INT 111
78586: PUSH
78587: LD_INT 112
78589: PUSH
78590: LD_INT 113
78592: PUSH
78593: LD_INT 114
78595: PUSH
78596: LD_INT 115
78598: PUSH
78599: LD_INT 116
78601: PUSH
78602: LD_INT 117
78604: PUSH
78605: LD_INT 118
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: LIST
78612: LIST
78613: LIST
78614: LIST
78615: LIST
78616: LIST
78617: LIST
78618: LIST
78619: LIST
78620: LIST
78621: LIST
78622: LIST
78623: LIST
78624: LIST
78625: LIST
78626: LIST
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: ST_TO_ADDR
78632: GO 78635
78634: POP
// end else
78635: GO 78866
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
78637: LD_ADDR_VAR 0 2
78641: PUSH
78642: LD_INT 1
78644: PUSH
78645: LD_INT 2
78647: PUSH
78648: LD_INT 3
78650: PUSH
78651: LD_INT 4
78653: PUSH
78654: LD_INT 5
78656: PUSH
78657: LD_INT 6
78659: PUSH
78660: LD_INT 7
78662: PUSH
78663: LD_INT 8
78665: PUSH
78666: LD_INT 9
78668: PUSH
78669: LD_INT 10
78671: PUSH
78672: LD_INT 11
78674: PUSH
78675: LD_INT 12
78677: PUSH
78678: LD_INT 13
78680: PUSH
78681: LD_INT 14
78683: PUSH
78684: LD_INT 15
78686: PUSH
78687: LD_INT 16
78689: PUSH
78690: LD_INT 17
78692: PUSH
78693: LD_INT 18
78695: PUSH
78696: LD_INT 19
78698: PUSH
78699: LD_INT 20
78701: PUSH
78702: LD_INT 21
78704: PUSH
78705: LD_INT 22
78707: PUSH
78708: LD_INT 23
78710: PUSH
78711: LD_INT 24
78713: PUSH
78714: LD_INT 25
78716: PUSH
78717: LD_INT 26
78719: PUSH
78720: LD_INT 27
78722: PUSH
78723: LD_INT 28
78725: PUSH
78726: LD_INT 29
78728: PUSH
78729: LD_INT 30
78731: PUSH
78732: LD_INT 31
78734: PUSH
78735: LD_INT 32
78737: PUSH
78738: LD_INT 33
78740: PUSH
78741: LD_INT 34
78743: PUSH
78744: LD_INT 35
78746: PUSH
78747: LD_INT 36
78749: PUSH
78750: EMPTY
78751: LIST
78752: LIST
78753: LIST
78754: LIST
78755: LIST
78756: LIST
78757: LIST
78758: LIST
78759: LIST
78760: LIST
78761: LIST
78762: LIST
78763: LIST
78764: LIST
78765: LIST
78766: LIST
78767: LIST
78768: LIST
78769: LIST
78770: LIST
78771: LIST
78772: LIST
78773: LIST
78774: LIST
78775: LIST
78776: LIST
78777: LIST
78778: LIST
78779: LIST
78780: LIST
78781: LIST
78782: LIST
78783: LIST
78784: LIST
78785: LIST
78786: LIST
78787: PUSH
78788: LD_INT 101
78790: PUSH
78791: LD_INT 102
78793: PUSH
78794: LD_INT 103
78796: PUSH
78797: LD_INT 104
78799: PUSH
78800: LD_INT 105
78802: PUSH
78803: LD_INT 106
78805: PUSH
78806: LD_INT 107
78808: PUSH
78809: LD_INT 108
78811: PUSH
78812: LD_INT 109
78814: PUSH
78815: LD_INT 110
78817: PUSH
78818: LD_INT 111
78820: PUSH
78821: LD_INT 112
78823: PUSH
78824: LD_INT 113
78826: PUSH
78827: LD_INT 114
78829: PUSH
78830: LD_INT 115
78832: PUSH
78833: LD_INT 116
78835: PUSH
78836: LD_INT 117
78838: PUSH
78839: LD_INT 118
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: LIST
78848: LIST
78849: LIST
78850: LIST
78851: LIST
78852: LIST
78853: LIST
78854: LIST
78855: LIST
78856: LIST
78857: LIST
78858: LIST
78859: LIST
78860: LIST
78861: PUSH
78862: EMPTY
78863: LIST
78864: LIST
78865: ST_TO_ADDR
// if result then
78866: LD_VAR 0 2
78870: IFFALSE 79656
// begin normal :=  ;
78872: LD_ADDR_VAR 0 5
78876: PUSH
78877: LD_STRING 
78879: ST_TO_ADDR
// hardcore :=  ;
78880: LD_ADDR_VAR 0 6
78884: PUSH
78885: LD_STRING 
78887: ST_TO_ADDR
// active :=  ;
78888: LD_ADDR_VAR 0 7
78892: PUSH
78893: LD_STRING 
78895: ST_TO_ADDR
// for i = 1 to normalCounter do
78896: LD_ADDR_VAR 0 8
78900: PUSH
78901: DOUBLE
78902: LD_INT 1
78904: DEC
78905: ST_TO_ADDR
78906: LD_EXP 76
78910: PUSH
78911: FOR_TO
78912: IFFALSE 79013
// begin tmp := 0 ;
78914: LD_ADDR_VAR 0 3
78918: PUSH
78919: LD_STRING 0
78921: ST_TO_ADDR
// if result [ 1 ] then
78922: LD_VAR 0 2
78926: PUSH
78927: LD_INT 1
78929: ARRAY
78930: IFFALSE 78995
// if result [ 1 ] [ 1 ] = i then
78932: LD_VAR 0 2
78936: PUSH
78937: LD_INT 1
78939: ARRAY
78940: PUSH
78941: LD_INT 1
78943: ARRAY
78944: PUSH
78945: LD_VAR 0 8
78949: EQUAL
78950: IFFALSE 78995
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
78952: LD_ADDR_VAR 0 2
78956: PUSH
78957: LD_VAR 0 2
78961: PPUSH
78962: LD_INT 1
78964: PPUSH
78965: LD_VAR 0 2
78969: PUSH
78970: LD_INT 1
78972: ARRAY
78973: PPUSH
78974: LD_INT 1
78976: PPUSH
78977: CALL_OW 3
78981: PPUSH
78982: CALL_OW 1
78986: ST_TO_ADDR
// tmp := 1 ;
78987: LD_ADDR_VAR 0 3
78991: PUSH
78992: LD_STRING 1
78994: ST_TO_ADDR
// end ; normal := normal & tmp ;
78995: LD_ADDR_VAR 0 5
78999: PUSH
79000: LD_VAR 0 5
79004: PUSH
79005: LD_VAR 0 3
79009: STR
79010: ST_TO_ADDR
// end ;
79011: GO 78911
79013: POP
79014: POP
// for i = 1 to hardcoreCounter do
79015: LD_ADDR_VAR 0 8
79019: PUSH
79020: DOUBLE
79021: LD_INT 1
79023: DEC
79024: ST_TO_ADDR
79025: LD_EXP 77
79029: PUSH
79030: FOR_TO
79031: IFFALSE 79136
// begin tmp := 0 ;
79033: LD_ADDR_VAR 0 3
79037: PUSH
79038: LD_STRING 0
79040: ST_TO_ADDR
// if result [ 2 ] then
79041: LD_VAR 0 2
79045: PUSH
79046: LD_INT 2
79048: ARRAY
79049: IFFALSE 79118
// if result [ 2 ] [ 1 ] = 100 + i then
79051: LD_VAR 0 2
79055: PUSH
79056: LD_INT 2
79058: ARRAY
79059: PUSH
79060: LD_INT 1
79062: ARRAY
79063: PUSH
79064: LD_INT 100
79066: PUSH
79067: LD_VAR 0 8
79071: PLUS
79072: EQUAL
79073: IFFALSE 79118
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
79075: LD_ADDR_VAR 0 2
79079: PUSH
79080: LD_VAR 0 2
79084: PPUSH
79085: LD_INT 2
79087: PPUSH
79088: LD_VAR 0 2
79092: PUSH
79093: LD_INT 2
79095: ARRAY
79096: PPUSH
79097: LD_INT 1
79099: PPUSH
79100: CALL_OW 3
79104: PPUSH
79105: CALL_OW 1
79109: ST_TO_ADDR
// tmp := 1 ;
79110: LD_ADDR_VAR 0 3
79114: PUSH
79115: LD_STRING 1
79117: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
79118: LD_ADDR_VAR 0 6
79122: PUSH
79123: LD_VAR 0 6
79127: PUSH
79128: LD_VAR 0 3
79132: STR
79133: ST_TO_ADDR
// end ;
79134: GO 79030
79136: POP
79137: POP
// if isGameLoad then
79138: LD_VAR 0 1
79142: IFFALSE 79617
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
79144: LD_ADDR_VAR 0 4
79148: PUSH
79149: LD_EXP 80
79153: PUSH
79154: LD_EXP 79
79158: PUSH
79159: LD_EXP 81
79163: PUSH
79164: LD_EXP 78
79168: PUSH
79169: LD_EXP 82
79173: PUSH
79174: LD_EXP 83
79178: PUSH
79179: LD_EXP 84
79183: PUSH
79184: LD_EXP 85
79188: PUSH
79189: LD_EXP 86
79193: PUSH
79194: LD_EXP 87
79198: PUSH
79199: LD_EXP 88
79203: PUSH
79204: LD_EXP 89
79208: PUSH
79209: LD_EXP 90
79213: PUSH
79214: LD_EXP 91
79218: PUSH
79219: LD_EXP 99
79223: PUSH
79224: LD_EXP 100
79228: PUSH
79229: LD_EXP 101
79233: PUSH
79234: LD_EXP 102
79238: PUSH
79239: LD_EXP 104
79243: PUSH
79244: LD_EXP 105
79248: PUSH
79249: LD_EXP 106
79253: PUSH
79254: LD_EXP 109
79258: PUSH
79259: LD_EXP 111
79263: PUSH
79264: LD_EXP 112
79268: PUSH
79269: LD_EXP 113
79273: PUSH
79274: LD_EXP 115
79278: PUSH
79279: LD_EXP 116
79283: PUSH
79284: LD_EXP 119
79288: PUSH
79289: LD_EXP 120
79293: PUSH
79294: LD_EXP 121
79298: PUSH
79299: LD_EXP 122
79303: PUSH
79304: LD_EXP 123
79308: PUSH
79309: LD_EXP 124
79313: PUSH
79314: LD_EXP 125
79318: PUSH
79319: LD_EXP 126
79323: PUSH
79324: LD_EXP 127
79328: PUSH
79329: LD_EXP 92
79333: PUSH
79334: LD_EXP 93
79338: PUSH
79339: LD_EXP 96
79343: PUSH
79344: LD_EXP 97
79348: PUSH
79349: LD_EXP 98
79353: PUSH
79354: LD_EXP 94
79358: PUSH
79359: LD_EXP 95
79363: PUSH
79364: LD_EXP 103
79368: PUSH
79369: LD_EXP 107
79373: PUSH
79374: LD_EXP 108
79378: PUSH
79379: LD_EXP 110
79383: PUSH
79384: LD_EXP 114
79388: PUSH
79389: LD_EXP 117
79393: PUSH
79394: LD_EXP 118
79398: PUSH
79399: LD_EXP 128
79403: PUSH
79404: LD_EXP 129
79408: PUSH
79409: LD_EXP 130
79413: PUSH
79414: LD_EXP 131
79418: PUSH
79419: EMPTY
79420: LIST
79421: LIST
79422: LIST
79423: LIST
79424: LIST
79425: LIST
79426: LIST
79427: LIST
79428: LIST
79429: LIST
79430: LIST
79431: LIST
79432: LIST
79433: LIST
79434: LIST
79435: LIST
79436: LIST
79437: LIST
79438: LIST
79439: LIST
79440: LIST
79441: LIST
79442: LIST
79443: LIST
79444: LIST
79445: LIST
79446: LIST
79447: LIST
79448: LIST
79449: LIST
79450: LIST
79451: LIST
79452: LIST
79453: LIST
79454: LIST
79455: LIST
79456: LIST
79457: LIST
79458: LIST
79459: LIST
79460: LIST
79461: LIST
79462: LIST
79463: LIST
79464: LIST
79465: LIST
79466: LIST
79467: LIST
79468: LIST
79469: LIST
79470: LIST
79471: LIST
79472: LIST
79473: LIST
79474: ST_TO_ADDR
// tmp :=  ;
79475: LD_ADDR_VAR 0 3
79479: PUSH
79480: LD_STRING 
79482: ST_TO_ADDR
// for i = 1 to normalCounter do
79483: LD_ADDR_VAR 0 8
79487: PUSH
79488: DOUBLE
79489: LD_INT 1
79491: DEC
79492: ST_TO_ADDR
79493: LD_EXP 76
79497: PUSH
79498: FOR_TO
79499: IFFALSE 79535
// begin if flags [ i ] then
79501: LD_VAR 0 4
79505: PUSH
79506: LD_VAR 0 8
79510: ARRAY
79511: IFFALSE 79533
// tmp := tmp & i & ; ;
79513: LD_ADDR_VAR 0 3
79517: PUSH
79518: LD_VAR 0 3
79522: PUSH
79523: LD_VAR 0 8
79527: STR
79528: PUSH
79529: LD_STRING ;
79531: STR
79532: ST_TO_ADDR
// end ;
79533: GO 79498
79535: POP
79536: POP
// for i = 1 to hardcoreCounter do
79537: LD_ADDR_VAR 0 8
79541: PUSH
79542: DOUBLE
79543: LD_INT 1
79545: DEC
79546: ST_TO_ADDR
79547: LD_EXP 77
79551: PUSH
79552: FOR_TO
79553: IFFALSE 79599
// begin if flags [ normalCounter + i ] then
79555: LD_VAR 0 4
79559: PUSH
79560: LD_EXP 76
79564: PUSH
79565: LD_VAR 0 8
79569: PLUS
79570: ARRAY
79571: IFFALSE 79597
// tmp := tmp & ( 100 + i ) & ; ;
79573: LD_ADDR_VAR 0 3
79577: PUSH
79578: LD_VAR 0 3
79582: PUSH
79583: LD_INT 100
79585: PUSH
79586: LD_VAR 0 8
79590: PLUS
79591: STR
79592: PUSH
79593: LD_STRING ;
79595: STR
79596: ST_TO_ADDR
// end ;
79597: GO 79552
79599: POP
79600: POP
// if tmp then
79601: LD_VAR 0 3
79605: IFFALSE 79617
// active := tmp ;
79607: LD_ADDR_VAR 0 7
79611: PUSH
79612: LD_VAR 0 3
79616: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
79617: LD_STRING getStreamItemsFromMission("
79619: PUSH
79620: LD_VAR 0 5
79624: STR
79625: PUSH
79626: LD_STRING ","
79628: STR
79629: PUSH
79630: LD_VAR 0 6
79634: STR
79635: PUSH
79636: LD_STRING ","
79638: STR
79639: PUSH
79640: LD_VAR 0 7
79644: STR
79645: PUSH
79646: LD_STRING ")
79648: STR
79649: PPUSH
79650: CALL_OW 559
// end else
79654: GO 79663
// ToLua ( getStreamItemsFromMission("","","") ) ;
79656: LD_STRING getStreamItemsFromMission("","","")
79658: PPUSH
79659: CALL_OW 559
// end ;
79663: LD_VAR 0 2
79667: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
79668: LD_EXP 75
79672: IFFALSE 79680
79674: PUSH
79675: LD_EXP 80
79679: AND
79680: IFFALSE 79804
79682: GO 79684
79684: DISABLE
79685: LD_INT 0
79687: PPUSH
79688: PPUSH
// begin enable ;
79689: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
79690: LD_ADDR_VAR 0 2
79694: PUSH
79695: LD_INT 22
79697: PUSH
79698: LD_OWVAR 2
79702: PUSH
79703: EMPTY
79704: LIST
79705: LIST
79706: PUSH
79707: LD_INT 2
79709: PUSH
79710: LD_INT 34
79712: PUSH
79713: LD_INT 7
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: PUSH
79720: LD_INT 34
79722: PUSH
79723: LD_INT 45
79725: PUSH
79726: EMPTY
79727: LIST
79728: LIST
79729: PUSH
79730: LD_INT 34
79732: PUSH
79733: LD_INT 28
79735: PUSH
79736: EMPTY
79737: LIST
79738: LIST
79739: PUSH
79740: LD_INT 34
79742: PUSH
79743: LD_INT 47
79745: PUSH
79746: EMPTY
79747: LIST
79748: LIST
79749: PUSH
79750: EMPTY
79751: LIST
79752: LIST
79753: LIST
79754: LIST
79755: LIST
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: PPUSH
79761: CALL_OW 69
79765: ST_TO_ADDR
// if not tmp then
79766: LD_VAR 0 2
79770: NOT
79771: IFFALSE 79775
// exit ;
79773: GO 79804
// for i in tmp do
79775: LD_ADDR_VAR 0 1
79779: PUSH
79780: LD_VAR 0 2
79784: PUSH
79785: FOR_IN
79786: IFFALSE 79802
// begin SetLives ( i , 0 ) ;
79788: LD_VAR 0 1
79792: PPUSH
79793: LD_INT 0
79795: PPUSH
79796: CALL_OW 234
// end ;
79800: GO 79785
79802: POP
79803: POP
// end ;
79804: PPOPN 2
79806: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
79807: LD_EXP 75
79811: IFFALSE 79819
79813: PUSH
79814: LD_EXP 81
79818: AND
79819: IFFALSE 79903
79821: GO 79823
79823: DISABLE
79824: LD_INT 0
79826: PPUSH
79827: PPUSH
// begin enable ;
79828: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
79829: LD_ADDR_VAR 0 2
79833: PUSH
79834: LD_INT 22
79836: PUSH
79837: LD_OWVAR 2
79841: PUSH
79842: EMPTY
79843: LIST
79844: LIST
79845: PUSH
79846: LD_INT 32
79848: PUSH
79849: LD_INT 3
79851: PUSH
79852: EMPTY
79853: LIST
79854: LIST
79855: PUSH
79856: EMPTY
79857: LIST
79858: LIST
79859: PPUSH
79860: CALL_OW 69
79864: ST_TO_ADDR
// if not tmp then
79865: LD_VAR 0 2
79869: NOT
79870: IFFALSE 79874
// exit ;
79872: GO 79903
// for i in tmp do
79874: LD_ADDR_VAR 0 1
79878: PUSH
79879: LD_VAR 0 2
79883: PUSH
79884: FOR_IN
79885: IFFALSE 79901
// begin SetLives ( i , 0 ) ;
79887: LD_VAR 0 1
79891: PPUSH
79892: LD_INT 0
79894: PPUSH
79895: CALL_OW 234
// end ;
79899: GO 79884
79901: POP
79902: POP
// end ;
79903: PPOPN 2
79905: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
79906: LD_EXP 75
79910: IFFALSE 79918
79912: PUSH
79913: LD_EXP 78
79917: AND
79918: IFFALSE 80011
79920: GO 79922
79922: DISABLE
79923: LD_INT 0
79925: PPUSH
// begin enable ;
79926: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
79927: LD_ADDR_VAR 0 1
79931: PUSH
79932: LD_INT 22
79934: PUSH
79935: LD_OWVAR 2
79939: PUSH
79940: EMPTY
79941: LIST
79942: LIST
79943: PUSH
79944: LD_INT 2
79946: PUSH
79947: LD_INT 25
79949: PUSH
79950: LD_INT 5
79952: PUSH
79953: EMPTY
79954: LIST
79955: LIST
79956: PUSH
79957: LD_INT 25
79959: PUSH
79960: LD_INT 9
79962: PUSH
79963: EMPTY
79964: LIST
79965: LIST
79966: PUSH
79967: LD_INT 25
79969: PUSH
79970: LD_INT 8
79972: PUSH
79973: EMPTY
79974: LIST
79975: LIST
79976: PUSH
79977: EMPTY
79978: LIST
79979: LIST
79980: LIST
79981: LIST
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PPUSH
79987: CALL_OW 69
79991: PUSH
79992: FOR_IN
79993: IFFALSE 80009
// begin SetClass ( i , 1 ) ;
79995: LD_VAR 0 1
79999: PPUSH
80000: LD_INT 1
80002: PPUSH
80003: CALL_OW 336
// end ;
80007: GO 79992
80009: POP
80010: POP
// end ;
80011: PPOPN 1
80013: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
80014: LD_EXP 75
80018: IFFALSE 80026
80020: PUSH
80021: LD_EXP 79
80025: AND
80026: IFFALSE 80038
80028: PUSH
80029: LD_OWVAR 65
80033: PUSH
80034: LD_INT 7
80036: LESS
80037: AND
80038: IFFALSE 80052
80040: GO 80042
80042: DISABLE
// begin enable ;
80043: ENABLE
// game_speed := 7 ;
80044: LD_ADDR_OWVAR 65
80048: PUSH
80049: LD_INT 7
80051: ST_TO_ADDR
// end ;
80052: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
80053: LD_EXP 75
80057: IFFALSE 80065
80059: PUSH
80060: LD_EXP 82
80064: AND
80065: IFFALSE 80267
80067: GO 80069
80069: DISABLE
80070: LD_INT 0
80072: PPUSH
80073: PPUSH
80074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80075: LD_ADDR_VAR 0 3
80079: PUSH
80080: LD_INT 81
80082: PUSH
80083: LD_OWVAR 2
80087: PUSH
80088: EMPTY
80089: LIST
80090: LIST
80091: PUSH
80092: LD_INT 21
80094: PUSH
80095: LD_INT 1
80097: PUSH
80098: EMPTY
80099: LIST
80100: LIST
80101: PUSH
80102: EMPTY
80103: LIST
80104: LIST
80105: PPUSH
80106: CALL_OW 69
80110: ST_TO_ADDR
// if not tmp then
80111: LD_VAR 0 3
80115: NOT
80116: IFFALSE 80120
// exit ;
80118: GO 80267
// if tmp > 5 then
80120: LD_VAR 0 3
80124: PUSH
80125: LD_INT 5
80127: GREATER
80128: IFFALSE 80140
// k := 5 else
80130: LD_ADDR_VAR 0 2
80134: PUSH
80135: LD_INT 5
80137: ST_TO_ADDR
80138: GO 80150
// k := tmp ;
80140: LD_ADDR_VAR 0 2
80144: PUSH
80145: LD_VAR 0 3
80149: ST_TO_ADDR
// for i := 1 to k do
80150: LD_ADDR_VAR 0 1
80154: PUSH
80155: DOUBLE
80156: LD_INT 1
80158: DEC
80159: ST_TO_ADDR
80160: LD_VAR 0 2
80164: PUSH
80165: FOR_TO
80166: IFFALSE 80265
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
80168: LD_VAR 0 3
80172: PUSH
80173: LD_VAR 0 1
80177: ARRAY
80178: PPUSH
80179: LD_VAR 0 1
80183: PUSH
80184: LD_INT 4
80186: MOD
80187: PUSH
80188: LD_INT 1
80190: PLUS
80191: PPUSH
80192: CALL_OW 259
80196: PUSH
80197: LD_INT 10
80199: LESS
80200: IFFALSE 80263
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
80202: LD_VAR 0 3
80206: PUSH
80207: LD_VAR 0 1
80211: ARRAY
80212: PPUSH
80213: LD_VAR 0 1
80217: PUSH
80218: LD_INT 4
80220: MOD
80221: PUSH
80222: LD_INT 1
80224: PLUS
80225: PPUSH
80226: LD_VAR 0 3
80230: PUSH
80231: LD_VAR 0 1
80235: ARRAY
80236: PPUSH
80237: LD_VAR 0 1
80241: PUSH
80242: LD_INT 4
80244: MOD
80245: PUSH
80246: LD_INT 1
80248: PLUS
80249: PPUSH
80250: CALL_OW 259
80254: PUSH
80255: LD_INT 1
80257: PLUS
80258: PPUSH
80259: CALL_OW 237
80263: GO 80165
80265: POP
80266: POP
// end ;
80267: PPOPN 3
80269: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
80270: LD_EXP 75
80274: IFFALSE 80282
80276: PUSH
80277: LD_EXP 83
80281: AND
80282: IFFALSE 80302
80284: GO 80286
80286: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
80287: LD_INT 4
80289: PPUSH
80290: LD_OWVAR 2
80294: PPUSH
80295: LD_INT 0
80297: PPUSH
80298: CALL_OW 324
80302: END
// every 0 0$1 trigger StreamModeActive and sShovel do
80303: LD_EXP 75
80307: IFFALSE 80315
80309: PUSH
80310: LD_EXP 112
80314: AND
80315: IFFALSE 80335
80317: GO 80319
80319: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
80320: LD_INT 19
80322: PPUSH
80323: LD_OWVAR 2
80327: PPUSH
80328: LD_INT 0
80330: PPUSH
80331: CALL_OW 324
80335: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
80336: LD_EXP 75
80340: IFFALSE 80348
80342: PUSH
80343: LD_EXP 84
80347: AND
80348: IFFALSE 80450
80350: GO 80352
80352: DISABLE
80353: LD_INT 0
80355: PPUSH
80356: PPUSH
// begin enable ;
80357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
80358: LD_ADDR_VAR 0 2
80362: PUSH
80363: LD_INT 22
80365: PUSH
80366: LD_OWVAR 2
80370: PUSH
80371: EMPTY
80372: LIST
80373: LIST
80374: PUSH
80375: LD_INT 2
80377: PUSH
80378: LD_INT 34
80380: PUSH
80381: LD_INT 11
80383: PUSH
80384: EMPTY
80385: LIST
80386: LIST
80387: PUSH
80388: LD_INT 34
80390: PUSH
80391: LD_INT 30
80393: PUSH
80394: EMPTY
80395: LIST
80396: LIST
80397: PUSH
80398: EMPTY
80399: LIST
80400: LIST
80401: LIST
80402: PUSH
80403: EMPTY
80404: LIST
80405: LIST
80406: PPUSH
80407: CALL_OW 69
80411: ST_TO_ADDR
// if not tmp then
80412: LD_VAR 0 2
80416: NOT
80417: IFFALSE 80421
// exit ;
80419: GO 80450
// for i in tmp do
80421: LD_ADDR_VAR 0 1
80425: PUSH
80426: LD_VAR 0 2
80430: PUSH
80431: FOR_IN
80432: IFFALSE 80448
// begin SetLives ( i , 0 ) ;
80434: LD_VAR 0 1
80438: PPUSH
80439: LD_INT 0
80441: PPUSH
80442: CALL_OW 234
// end ;
80446: GO 80431
80448: POP
80449: POP
// end ;
80450: PPOPN 2
80452: END
// every 0 0$1 trigger StreamModeActive and sBunker do
80453: LD_EXP 75
80457: IFFALSE 80465
80459: PUSH
80460: LD_EXP 85
80464: AND
80465: IFFALSE 80485
80467: GO 80469
80469: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
80470: LD_INT 32
80472: PPUSH
80473: LD_OWVAR 2
80477: PPUSH
80478: LD_INT 0
80480: PPUSH
80481: CALL_OW 324
80485: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
80486: LD_EXP 75
80490: IFFALSE 80498
80492: PUSH
80493: LD_EXP 86
80497: AND
80498: IFFALSE 80681
80500: GO 80502
80502: DISABLE
80503: LD_INT 0
80505: PPUSH
80506: PPUSH
80507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
80508: LD_ADDR_VAR 0 2
80512: PUSH
80513: LD_INT 22
80515: PUSH
80516: LD_OWVAR 2
80520: PUSH
80521: EMPTY
80522: LIST
80523: LIST
80524: PUSH
80525: LD_INT 33
80527: PUSH
80528: LD_INT 3
80530: PUSH
80531: EMPTY
80532: LIST
80533: LIST
80534: PUSH
80535: EMPTY
80536: LIST
80537: LIST
80538: PPUSH
80539: CALL_OW 69
80543: ST_TO_ADDR
// if not tmp then
80544: LD_VAR 0 2
80548: NOT
80549: IFFALSE 80553
// exit ;
80551: GO 80681
// side := 0 ;
80553: LD_ADDR_VAR 0 3
80557: PUSH
80558: LD_INT 0
80560: ST_TO_ADDR
// for i := 1 to 8 do
80561: LD_ADDR_VAR 0 1
80565: PUSH
80566: DOUBLE
80567: LD_INT 1
80569: DEC
80570: ST_TO_ADDR
80571: LD_INT 8
80573: PUSH
80574: FOR_TO
80575: IFFALSE 80625
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
80577: LD_OWVAR 2
80581: PUSH
80582: LD_VAR 0 1
80586: NONEQUAL
80587: IFFALSE 80609
80589: PUSH
80590: LD_OWVAR 2
80594: PPUSH
80595: LD_VAR 0 1
80599: PPUSH
80600: CALL_OW 81
80604: PUSH
80605: LD_INT 2
80607: EQUAL
80608: AND
80609: IFFALSE 80623
// begin side := i ;
80611: LD_ADDR_VAR 0 3
80615: PUSH
80616: LD_VAR 0 1
80620: ST_TO_ADDR
// break ;
80621: GO 80625
// end ;
80623: GO 80574
80625: POP
80626: POP
// if not side then
80627: LD_VAR 0 3
80631: NOT
80632: IFFALSE 80636
// exit ;
80634: GO 80681
// for i := 1 to tmp do
80636: LD_ADDR_VAR 0 1
80640: PUSH
80641: DOUBLE
80642: LD_INT 1
80644: DEC
80645: ST_TO_ADDR
80646: LD_VAR 0 2
80650: PUSH
80651: FOR_TO
80652: IFFALSE 80679
// if Prob ( 60 ) then
80654: LD_INT 60
80656: PPUSH
80657: CALL_OW 13
80661: IFFALSE 80677
// SetSide ( i , side ) ;
80663: LD_VAR 0 1
80667: PPUSH
80668: LD_VAR 0 3
80672: PPUSH
80673: CALL_OW 235
80677: GO 80651
80679: POP
80680: POP
// end ;
80681: PPOPN 3
80683: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
80684: LD_EXP 75
80688: IFFALSE 80696
80690: PUSH
80691: LD_EXP 88
80695: AND
80696: IFFALSE 80815
80698: GO 80700
80700: DISABLE
80701: LD_INT 0
80703: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
80704: LD_ADDR_VAR 0 1
80708: PUSH
80709: LD_INT 22
80711: PUSH
80712: LD_OWVAR 2
80716: PUSH
80717: EMPTY
80718: LIST
80719: LIST
80720: PUSH
80721: LD_INT 21
80723: PUSH
80724: LD_INT 1
80726: PUSH
80727: EMPTY
80728: LIST
80729: LIST
80730: PUSH
80731: LD_INT 3
80733: PUSH
80734: LD_INT 23
80736: PUSH
80737: LD_INT 0
80739: PUSH
80740: EMPTY
80741: LIST
80742: LIST
80743: PUSH
80744: EMPTY
80745: LIST
80746: LIST
80747: PUSH
80748: EMPTY
80749: LIST
80750: LIST
80751: LIST
80752: PPUSH
80753: CALL_OW 69
80757: PUSH
80758: FOR_IN
80759: IFFALSE 80813
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
80761: LD_VAR 0 1
80765: PPUSH
80766: CALL_OW 257
80770: PUSH
80771: LD_INT 1
80773: PUSH
80774: LD_INT 2
80776: PUSH
80777: LD_INT 3
80779: PUSH
80780: LD_INT 4
80782: PUSH
80783: EMPTY
80784: LIST
80785: LIST
80786: LIST
80787: LIST
80788: IN
80789: IFFALSE 80811
// SetClass ( un , rand ( 1 , 4 ) ) ;
80791: LD_VAR 0 1
80795: PPUSH
80796: LD_INT 1
80798: PPUSH
80799: LD_INT 4
80801: PPUSH
80802: CALL_OW 12
80806: PPUSH
80807: CALL_OW 336
80811: GO 80758
80813: POP
80814: POP
// end ;
80815: PPOPN 1
80817: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
80818: LD_EXP 75
80822: IFFALSE 80830
80824: PUSH
80825: LD_EXP 87
80829: AND
80830: IFFALSE 80909
80832: GO 80834
80834: DISABLE
80835: LD_INT 0
80837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
80838: LD_ADDR_VAR 0 1
80842: PUSH
80843: LD_INT 22
80845: PUSH
80846: LD_OWVAR 2
80850: PUSH
80851: EMPTY
80852: LIST
80853: LIST
80854: PUSH
80855: LD_INT 21
80857: PUSH
80858: LD_INT 3
80860: PUSH
80861: EMPTY
80862: LIST
80863: LIST
80864: PUSH
80865: EMPTY
80866: LIST
80867: LIST
80868: PPUSH
80869: CALL_OW 69
80873: ST_TO_ADDR
// if not tmp then
80874: LD_VAR 0 1
80878: NOT
80879: IFFALSE 80883
// exit ;
80881: GO 80909
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
80883: LD_VAR 0 1
80887: PUSH
80888: LD_INT 1
80890: PPUSH
80891: LD_VAR 0 1
80895: PPUSH
80896: CALL_OW 12
80900: ARRAY
80901: PPUSH
80902: LD_INT 100
80904: PPUSH
80905: CALL_OW 234
// end ;
80909: PPOPN 1
80911: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
80912: LD_EXP 75
80916: IFFALSE 80924
80918: PUSH
80919: LD_EXP 89
80923: AND
80924: IFFALSE 81022
80926: GO 80928
80928: DISABLE
80929: LD_INT 0
80931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80932: LD_ADDR_VAR 0 1
80936: PUSH
80937: LD_INT 22
80939: PUSH
80940: LD_OWVAR 2
80944: PUSH
80945: EMPTY
80946: LIST
80947: LIST
80948: PUSH
80949: LD_INT 21
80951: PUSH
80952: LD_INT 1
80954: PUSH
80955: EMPTY
80956: LIST
80957: LIST
80958: PUSH
80959: EMPTY
80960: LIST
80961: LIST
80962: PPUSH
80963: CALL_OW 69
80967: ST_TO_ADDR
// if not tmp then
80968: LD_VAR 0 1
80972: NOT
80973: IFFALSE 80977
// exit ;
80975: GO 81022
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
80977: LD_VAR 0 1
80981: PUSH
80982: LD_INT 1
80984: PPUSH
80985: LD_VAR 0 1
80989: PPUSH
80990: CALL_OW 12
80994: ARRAY
80995: PPUSH
80996: LD_INT 1
80998: PPUSH
80999: LD_INT 4
81001: PPUSH
81002: CALL_OW 12
81006: PPUSH
81007: LD_INT 3000
81009: PPUSH
81010: LD_INT 9000
81012: PPUSH
81013: CALL_OW 12
81017: PPUSH
81018: CALL_OW 492
// end ;
81022: PPOPN 1
81024: END
// every 0 0$1 trigger StreamModeActive and sDepot do
81025: LD_EXP 75
81029: IFFALSE 81037
81031: PUSH
81032: LD_EXP 90
81036: AND
81037: IFFALSE 81057
81039: GO 81041
81041: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
81042: LD_INT 1
81044: PPUSH
81045: LD_OWVAR 2
81049: PPUSH
81050: LD_INT 0
81052: PPUSH
81053: CALL_OW 324
81057: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
81058: LD_EXP 75
81062: IFFALSE 81070
81064: PUSH
81065: LD_EXP 91
81069: AND
81070: IFFALSE 81153
81072: GO 81074
81074: DISABLE
81075: LD_INT 0
81077: PPUSH
81078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
81079: LD_ADDR_VAR 0 2
81083: PUSH
81084: LD_INT 22
81086: PUSH
81087: LD_OWVAR 2
81091: PUSH
81092: EMPTY
81093: LIST
81094: LIST
81095: PUSH
81096: LD_INT 21
81098: PUSH
81099: LD_INT 3
81101: PUSH
81102: EMPTY
81103: LIST
81104: LIST
81105: PUSH
81106: EMPTY
81107: LIST
81108: LIST
81109: PPUSH
81110: CALL_OW 69
81114: ST_TO_ADDR
// if not tmp then
81115: LD_VAR 0 2
81119: NOT
81120: IFFALSE 81124
// exit ;
81122: GO 81153
// for i in tmp do
81124: LD_ADDR_VAR 0 1
81128: PUSH
81129: LD_VAR 0 2
81133: PUSH
81134: FOR_IN
81135: IFFALSE 81151
// SetBLevel ( i , 10 ) ;
81137: LD_VAR 0 1
81141: PPUSH
81142: LD_INT 10
81144: PPUSH
81145: CALL_OW 241
81149: GO 81134
81151: POP
81152: POP
// end ;
81153: PPOPN 2
81155: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
81156: LD_EXP 75
81160: IFFALSE 81168
81162: PUSH
81163: LD_EXP 92
81167: AND
81168: IFFALSE 81279
81170: GO 81172
81172: DISABLE
81173: LD_INT 0
81175: PPUSH
81176: PPUSH
81177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81178: LD_ADDR_VAR 0 3
81182: PUSH
81183: LD_INT 22
81185: PUSH
81186: LD_OWVAR 2
81190: PUSH
81191: EMPTY
81192: LIST
81193: LIST
81194: PUSH
81195: LD_INT 25
81197: PUSH
81198: LD_INT 1
81200: PUSH
81201: EMPTY
81202: LIST
81203: LIST
81204: PUSH
81205: EMPTY
81206: LIST
81207: LIST
81208: PPUSH
81209: CALL_OW 69
81213: ST_TO_ADDR
// if not tmp then
81214: LD_VAR 0 3
81218: NOT
81219: IFFALSE 81223
// exit ;
81221: GO 81279
// un := tmp [ rand ( 1 , tmp ) ] ;
81223: LD_ADDR_VAR 0 2
81227: PUSH
81228: LD_VAR 0 3
81232: PUSH
81233: LD_INT 1
81235: PPUSH
81236: LD_VAR 0 3
81240: PPUSH
81241: CALL_OW 12
81245: ARRAY
81246: ST_TO_ADDR
// if Crawls ( un ) then
81247: LD_VAR 0 2
81251: PPUSH
81252: CALL_OW 318
81256: IFFALSE 81267
// ComWalk ( un ) ;
81258: LD_VAR 0 2
81262: PPUSH
81263: CALL_OW 138
// SetClass ( un , class_sniper ) ;
81267: LD_VAR 0 2
81271: PPUSH
81272: LD_INT 5
81274: PPUSH
81275: CALL_OW 336
// end ;
81279: PPOPN 3
81281: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
81282: LD_EXP 75
81286: IFFALSE 81294
81288: PUSH
81289: LD_EXP 93
81293: AND
81294: IFFALSE 81306
81296: PUSH
81297: LD_OWVAR 67
81301: PUSH
81302: LD_INT 4
81304: LESS
81305: AND
81306: IFFALSE 81325
81308: GO 81310
81310: DISABLE
// begin Difficulty := Difficulty + 1 ;
81311: LD_ADDR_OWVAR 67
81315: PUSH
81316: LD_OWVAR 67
81320: PUSH
81321: LD_INT 1
81323: PLUS
81324: ST_TO_ADDR
// end ;
81325: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
81326: LD_EXP 75
81330: IFFALSE 81338
81332: PUSH
81333: LD_EXP 94
81337: AND
81338: IFFALSE 81441
81340: GO 81342
81342: DISABLE
81343: LD_INT 0
81345: PPUSH
// begin for i := 1 to 5 do
81346: LD_ADDR_VAR 0 1
81350: PUSH
81351: DOUBLE
81352: LD_INT 1
81354: DEC
81355: ST_TO_ADDR
81356: LD_INT 5
81358: PUSH
81359: FOR_TO
81360: IFFALSE 81439
// begin uc_nation := nation_nature ;
81362: LD_ADDR_OWVAR 21
81366: PUSH
81367: LD_INT 0
81369: ST_TO_ADDR
// uc_side := 0 ;
81370: LD_ADDR_OWVAR 20
81374: PUSH
81375: LD_INT 0
81377: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
81378: LD_ADDR_OWVAR 29
81382: PUSH
81383: LD_INT 12
81385: PUSH
81386: LD_INT 12
81388: PUSH
81389: EMPTY
81390: LIST
81391: LIST
81392: ST_TO_ADDR
// hc_agressivity := 20 ;
81393: LD_ADDR_OWVAR 35
81397: PUSH
81398: LD_INT 20
81400: ST_TO_ADDR
// hc_class := class_tiger ;
81401: LD_ADDR_OWVAR 28
81405: PUSH
81406: LD_INT 14
81408: ST_TO_ADDR
// hc_gallery :=  ;
81409: LD_ADDR_OWVAR 33
81413: PUSH
81414: LD_STRING 
81416: ST_TO_ADDR
// hc_name :=  ;
81417: LD_ADDR_OWVAR 26
81421: PUSH
81422: LD_STRING 
81424: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
81425: CALL_OW 44
81429: PPUSH
81430: LD_INT 0
81432: PPUSH
81433: CALL_OW 51
// end ;
81437: GO 81359
81439: POP
81440: POP
// end ;
81441: PPOPN 1
81443: END
// every 0 0$1 trigger StreamModeActive and sBomb do
81444: LD_EXP 75
81448: IFFALSE 81456
81450: PUSH
81451: LD_EXP 95
81455: AND
81456: IFFALSE 81465
81458: GO 81460
81460: DISABLE
// StreamSibBomb ;
81461: CALL 81466 0 0
81465: END
// export function StreamSibBomb ; var i , x , y ; begin
81466: LD_INT 0
81468: PPUSH
81469: PPUSH
81470: PPUSH
81471: PPUSH
// result := false ;
81472: LD_ADDR_VAR 0 1
81476: PUSH
81477: LD_INT 0
81479: ST_TO_ADDR
// for i := 1 to 16 do
81480: LD_ADDR_VAR 0 2
81484: PUSH
81485: DOUBLE
81486: LD_INT 1
81488: DEC
81489: ST_TO_ADDR
81490: LD_INT 16
81492: PUSH
81493: FOR_TO
81494: IFFALSE 81693
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
81496: LD_ADDR_VAR 0 3
81500: PUSH
81501: LD_INT 10
81503: PUSH
81504: LD_INT 20
81506: PUSH
81507: LD_INT 30
81509: PUSH
81510: LD_INT 40
81512: PUSH
81513: LD_INT 50
81515: PUSH
81516: LD_INT 60
81518: PUSH
81519: LD_INT 70
81521: PUSH
81522: LD_INT 80
81524: PUSH
81525: LD_INT 90
81527: PUSH
81528: LD_INT 100
81530: PUSH
81531: LD_INT 110
81533: PUSH
81534: LD_INT 120
81536: PUSH
81537: LD_INT 130
81539: PUSH
81540: LD_INT 140
81542: PUSH
81543: LD_INT 150
81545: PUSH
81546: EMPTY
81547: LIST
81548: LIST
81549: LIST
81550: LIST
81551: LIST
81552: LIST
81553: LIST
81554: LIST
81555: LIST
81556: LIST
81557: LIST
81558: LIST
81559: LIST
81560: LIST
81561: LIST
81562: PUSH
81563: LD_INT 1
81565: PPUSH
81566: LD_INT 15
81568: PPUSH
81569: CALL_OW 12
81573: ARRAY
81574: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
81575: LD_ADDR_VAR 0 4
81579: PUSH
81580: LD_INT 10
81582: PUSH
81583: LD_INT 20
81585: PUSH
81586: LD_INT 30
81588: PUSH
81589: LD_INT 40
81591: PUSH
81592: LD_INT 50
81594: PUSH
81595: LD_INT 60
81597: PUSH
81598: LD_INT 70
81600: PUSH
81601: LD_INT 80
81603: PUSH
81604: LD_INT 90
81606: PUSH
81607: LD_INT 100
81609: PUSH
81610: LD_INT 110
81612: PUSH
81613: LD_INT 120
81615: PUSH
81616: LD_INT 130
81618: PUSH
81619: LD_INT 140
81621: PUSH
81622: LD_INT 150
81624: PUSH
81625: EMPTY
81626: LIST
81627: LIST
81628: LIST
81629: LIST
81630: LIST
81631: LIST
81632: LIST
81633: LIST
81634: LIST
81635: LIST
81636: LIST
81637: LIST
81638: LIST
81639: LIST
81640: LIST
81641: PUSH
81642: LD_INT 1
81644: PPUSH
81645: LD_INT 15
81647: PPUSH
81648: CALL_OW 12
81652: ARRAY
81653: ST_TO_ADDR
// if ValidHex ( x , y ) then
81654: LD_VAR 0 3
81658: PPUSH
81659: LD_VAR 0 4
81663: PPUSH
81664: CALL_OW 488
81668: IFFALSE 81691
// begin result := [ x , y ] ;
81670: LD_ADDR_VAR 0 1
81674: PUSH
81675: LD_VAR 0 3
81679: PUSH
81680: LD_VAR 0 4
81684: PUSH
81685: EMPTY
81686: LIST
81687: LIST
81688: ST_TO_ADDR
// break ;
81689: GO 81693
// end ; end ;
81691: GO 81493
81693: POP
81694: POP
// if result then
81695: LD_VAR 0 1
81699: IFFALSE 81759
// begin ToLua ( playSibBomb() ) ;
81701: LD_STRING playSibBomb()
81703: PPUSH
81704: CALL_OW 559
// wait ( 0 0$14 ) ;
81708: LD_INT 490
81710: PPUSH
81711: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
81715: LD_VAR 0 1
81719: PUSH
81720: LD_INT 1
81722: ARRAY
81723: PPUSH
81724: LD_VAR 0 1
81728: PUSH
81729: LD_INT 2
81731: ARRAY
81732: PPUSH
81733: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
81737: LD_VAR 0 1
81741: PUSH
81742: LD_INT 1
81744: ARRAY
81745: PPUSH
81746: LD_VAR 0 1
81750: PUSH
81751: LD_INT 2
81753: ARRAY
81754: PPUSH
81755: CALL_OW 429
// end ; end ;
81759: LD_VAR 0 1
81763: RET
// every 0 0$1 trigger StreamModeActive and sReset do
81764: LD_EXP 75
81768: IFFALSE 81776
81770: PUSH
81771: LD_EXP 97
81775: AND
81776: IFFALSE 81788
81778: GO 81780
81780: DISABLE
// YouLost (  ) ;
81781: LD_STRING 
81783: PPUSH
81784: CALL_OW 104
81788: END
// every 0 0$1 trigger StreamModeActive and sFog do
81789: LD_EXP 75
81793: IFFALSE 81801
81795: PUSH
81796: LD_EXP 96
81800: AND
81801: IFFALSE 81815
81803: GO 81805
81805: DISABLE
// FogOff ( your_side ) ;
81806: LD_OWVAR 2
81810: PPUSH
81811: CALL_OW 344
81815: END
// every 0 0$1 trigger StreamModeActive and sSun do
81816: LD_EXP 75
81820: IFFALSE 81828
81822: PUSH
81823: LD_EXP 98
81827: AND
81828: IFFALSE 81856
81830: GO 81832
81832: DISABLE
// begin solar_recharge_percent := 0 ;
81833: LD_ADDR_OWVAR 79
81837: PUSH
81838: LD_INT 0
81840: ST_TO_ADDR
// wait ( 5 5$00 ) ;
81841: LD_INT 10500
81843: PPUSH
81844: CALL_OW 67
// solar_recharge_percent := 100 ;
81848: LD_ADDR_OWVAR 79
81852: PUSH
81853: LD_INT 100
81855: ST_TO_ADDR
// end ;
81856: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
81857: LD_EXP 75
81861: IFFALSE 81869
81863: PUSH
81864: LD_EXP 99
81868: AND
81869: IFFALSE 82108
81871: GO 81873
81873: DISABLE
81874: LD_INT 0
81876: PPUSH
81877: PPUSH
81878: PPUSH
// begin tmp := [ ] ;
81879: LD_ADDR_VAR 0 3
81883: PUSH
81884: EMPTY
81885: ST_TO_ADDR
// for i := 1 to 6 do
81886: LD_ADDR_VAR 0 1
81890: PUSH
81891: DOUBLE
81892: LD_INT 1
81894: DEC
81895: ST_TO_ADDR
81896: LD_INT 6
81898: PUSH
81899: FOR_TO
81900: IFFALSE 82005
// begin uc_nation := nation_nature ;
81902: LD_ADDR_OWVAR 21
81906: PUSH
81907: LD_INT 0
81909: ST_TO_ADDR
// uc_side := 0 ;
81910: LD_ADDR_OWVAR 20
81914: PUSH
81915: LD_INT 0
81917: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
81918: LD_ADDR_OWVAR 29
81922: PUSH
81923: LD_INT 12
81925: PUSH
81926: LD_INT 12
81928: PUSH
81929: EMPTY
81930: LIST
81931: LIST
81932: ST_TO_ADDR
// hc_agressivity := 20 ;
81933: LD_ADDR_OWVAR 35
81937: PUSH
81938: LD_INT 20
81940: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
81941: LD_ADDR_OWVAR 28
81945: PUSH
81946: LD_INT 17
81948: ST_TO_ADDR
// hc_gallery :=  ;
81949: LD_ADDR_OWVAR 33
81953: PUSH
81954: LD_STRING 
81956: ST_TO_ADDR
// hc_name :=  ;
81957: LD_ADDR_OWVAR 26
81961: PUSH
81962: LD_STRING 
81964: ST_TO_ADDR
// un := CreateHuman ;
81965: LD_ADDR_VAR 0 2
81969: PUSH
81970: CALL_OW 44
81974: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
81975: LD_VAR 0 2
81979: PPUSH
81980: LD_INT 1
81982: PPUSH
81983: CALL_OW 51
// tmp := tmp ^ un ;
81987: LD_ADDR_VAR 0 3
81991: PUSH
81992: LD_VAR 0 3
81996: PUSH
81997: LD_VAR 0 2
82001: ADD
82002: ST_TO_ADDR
// end ;
82003: GO 81899
82005: POP
82006: POP
// repeat wait ( 0 0$1 ) ;
82007: LD_INT 35
82009: PPUSH
82010: CALL_OW 67
// for un in tmp do
82014: LD_ADDR_VAR 0 2
82018: PUSH
82019: LD_VAR 0 3
82023: PUSH
82024: FOR_IN
82025: IFFALSE 82099
// begin if IsDead ( un ) then
82027: LD_VAR 0 2
82031: PPUSH
82032: CALL_OW 301
82036: IFFALSE 82056
// begin tmp := tmp diff un ;
82038: LD_ADDR_VAR 0 3
82042: PUSH
82043: LD_VAR 0 3
82047: PUSH
82048: LD_VAR 0 2
82052: DIFF
82053: ST_TO_ADDR
// continue ;
82054: GO 82024
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
82056: LD_VAR 0 2
82060: PPUSH
82061: LD_INT 3
82063: PUSH
82064: LD_INT 22
82066: PUSH
82067: LD_INT 0
82069: PUSH
82070: EMPTY
82071: LIST
82072: LIST
82073: PUSH
82074: EMPTY
82075: LIST
82076: LIST
82077: PPUSH
82078: CALL_OW 69
82082: PPUSH
82083: LD_VAR 0 2
82087: PPUSH
82088: CALL_OW 74
82092: PPUSH
82093: CALL_OW 115
// end ;
82097: GO 82024
82099: POP
82100: POP
// until not tmp ;
82101: LD_VAR 0 3
82105: NOT
82106: IFFALSE 82007
// end ;
82108: PPOPN 3
82110: END
// every 0 0$1 trigger StreamModeActive and sTroll do
82111: LD_EXP 75
82115: IFFALSE 82123
82117: PUSH
82118: LD_EXP 100
82122: AND
82123: IFFALSE 82177
82125: GO 82127
82127: DISABLE
// begin ToLua ( displayTroll(); ) ;
82128: LD_STRING displayTroll();
82130: PPUSH
82131: CALL_OW 559
// wait ( 3 3$00 ) ;
82135: LD_INT 6300
82137: PPUSH
82138: CALL_OW 67
// ToLua ( hideTroll(); ) ;
82142: LD_STRING hideTroll();
82144: PPUSH
82145: CALL_OW 559
// wait ( 1 1$00 ) ;
82149: LD_INT 2100
82151: PPUSH
82152: CALL_OW 67
// ToLua ( displayTroll(); ) ;
82156: LD_STRING displayTroll();
82158: PPUSH
82159: CALL_OW 559
// wait ( 1 1$00 ) ;
82163: LD_INT 2100
82165: PPUSH
82166: CALL_OW 67
// ToLua ( hideTroll(); ) ;
82170: LD_STRING hideTroll();
82172: PPUSH
82173: CALL_OW 559
// end ;
82177: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
82178: LD_EXP 75
82182: IFFALSE 82190
82184: PUSH
82185: LD_EXP 101
82189: AND
82190: IFFALSE 82253
82192: GO 82194
82194: DISABLE
82195: LD_INT 0
82197: PPUSH
// begin p := 0 ;
82198: LD_ADDR_VAR 0 1
82202: PUSH
82203: LD_INT 0
82205: ST_TO_ADDR
// repeat game_speed := 1 ;
82206: LD_ADDR_OWVAR 65
82210: PUSH
82211: LD_INT 1
82213: ST_TO_ADDR
// wait ( 0 0$1 ) ;
82214: LD_INT 35
82216: PPUSH
82217: CALL_OW 67
// p := p + 1 ;
82221: LD_ADDR_VAR 0 1
82225: PUSH
82226: LD_VAR 0 1
82230: PUSH
82231: LD_INT 1
82233: PLUS
82234: ST_TO_ADDR
// until p >= 60 ;
82235: LD_VAR 0 1
82239: PUSH
82240: LD_INT 60
82242: GREATEREQUAL
82243: IFFALSE 82206
// game_speed := 4 ;
82245: LD_ADDR_OWVAR 65
82249: PUSH
82250: LD_INT 4
82252: ST_TO_ADDR
// end ;
82253: PPOPN 1
82255: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
82256: LD_EXP 75
82260: IFFALSE 82268
82262: PUSH
82263: LD_EXP 102
82267: AND
82268: IFFALSE 82414
82270: GO 82272
82272: DISABLE
82273: LD_INT 0
82275: PPUSH
82276: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
82277: LD_ADDR_VAR 0 1
82281: PUSH
82282: LD_INT 22
82284: PUSH
82285: LD_OWVAR 2
82289: PUSH
82290: EMPTY
82291: LIST
82292: LIST
82293: PUSH
82294: LD_INT 2
82296: PUSH
82297: LD_INT 30
82299: PUSH
82300: LD_INT 0
82302: PUSH
82303: EMPTY
82304: LIST
82305: LIST
82306: PUSH
82307: LD_INT 30
82309: PUSH
82310: LD_INT 1
82312: PUSH
82313: EMPTY
82314: LIST
82315: LIST
82316: PUSH
82317: EMPTY
82318: LIST
82319: LIST
82320: LIST
82321: PUSH
82322: EMPTY
82323: LIST
82324: LIST
82325: PPUSH
82326: CALL_OW 69
82330: ST_TO_ADDR
// if not depot then
82331: LD_VAR 0 1
82335: NOT
82336: IFFALSE 82340
// exit ;
82338: GO 82414
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
82340: LD_ADDR_VAR 0 2
82344: PUSH
82345: LD_VAR 0 1
82349: PUSH
82350: LD_INT 1
82352: PPUSH
82353: LD_VAR 0 1
82357: PPUSH
82358: CALL_OW 12
82362: ARRAY
82363: PPUSH
82364: CALL_OW 274
82368: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
82369: LD_VAR 0 2
82373: PPUSH
82374: LD_INT 1
82376: PPUSH
82377: LD_INT 0
82379: PPUSH
82380: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
82384: LD_VAR 0 2
82388: PPUSH
82389: LD_INT 2
82391: PPUSH
82392: LD_INT 0
82394: PPUSH
82395: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
82399: LD_VAR 0 2
82403: PPUSH
82404: LD_INT 3
82406: PPUSH
82407: LD_INT 0
82409: PPUSH
82410: CALL_OW 277
// end ;
82414: PPOPN 2
82416: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
82417: LD_EXP 75
82421: IFFALSE 82429
82423: PUSH
82424: LD_EXP 103
82428: AND
82429: IFFALSE 82526
82431: GO 82433
82433: DISABLE
82434: LD_INT 0
82436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82437: LD_ADDR_VAR 0 1
82441: PUSH
82442: LD_INT 22
82444: PUSH
82445: LD_OWVAR 2
82449: PUSH
82450: EMPTY
82451: LIST
82452: LIST
82453: PUSH
82454: LD_INT 21
82456: PUSH
82457: LD_INT 1
82459: PUSH
82460: EMPTY
82461: LIST
82462: LIST
82463: PUSH
82464: LD_INT 3
82466: PUSH
82467: LD_INT 23
82469: PUSH
82470: LD_INT 0
82472: PUSH
82473: EMPTY
82474: LIST
82475: LIST
82476: PUSH
82477: EMPTY
82478: LIST
82479: LIST
82480: PUSH
82481: EMPTY
82482: LIST
82483: LIST
82484: LIST
82485: PPUSH
82486: CALL_OW 69
82490: ST_TO_ADDR
// if not tmp then
82491: LD_VAR 0 1
82495: NOT
82496: IFFALSE 82500
// exit ;
82498: GO 82526
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
82500: LD_VAR 0 1
82504: PUSH
82505: LD_INT 1
82507: PPUSH
82508: LD_VAR 0 1
82512: PPUSH
82513: CALL_OW 12
82517: ARRAY
82518: PPUSH
82519: LD_INT 200
82521: PPUSH
82522: CALL_OW 234
// end ;
82526: PPOPN 1
82528: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
82529: LD_EXP 75
82533: IFFALSE 82541
82535: PUSH
82536: LD_EXP 104
82540: AND
82541: IFFALSE 82620
82543: GO 82545
82545: DISABLE
82546: LD_INT 0
82548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
82549: LD_ADDR_VAR 0 1
82553: PUSH
82554: LD_INT 22
82556: PUSH
82557: LD_OWVAR 2
82561: PUSH
82562: EMPTY
82563: LIST
82564: LIST
82565: PUSH
82566: LD_INT 21
82568: PUSH
82569: LD_INT 2
82571: PUSH
82572: EMPTY
82573: LIST
82574: LIST
82575: PUSH
82576: EMPTY
82577: LIST
82578: LIST
82579: PPUSH
82580: CALL_OW 69
82584: ST_TO_ADDR
// if not tmp then
82585: LD_VAR 0 1
82589: NOT
82590: IFFALSE 82594
// exit ;
82592: GO 82620
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
82594: LD_VAR 0 1
82598: PUSH
82599: LD_INT 1
82601: PPUSH
82602: LD_VAR 0 1
82606: PPUSH
82607: CALL_OW 12
82611: ARRAY
82612: PPUSH
82613: LD_INT 60
82615: PPUSH
82616: CALL_OW 234
// end ;
82620: PPOPN 1
82622: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
82623: LD_EXP 75
82627: IFFALSE 82635
82629: PUSH
82630: LD_EXP 105
82634: AND
82635: IFFALSE 82734
82637: GO 82639
82639: DISABLE
82640: LD_INT 0
82642: PPUSH
82643: PPUSH
// begin enable ;
82644: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
82645: LD_ADDR_VAR 0 1
82649: PUSH
82650: LD_INT 22
82652: PUSH
82653: LD_OWVAR 2
82657: PUSH
82658: EMPTY
82659: LIST
82660: LIST
82661: PUSH
82662: LD_INT 61
82664: PUSH
82665: EMPTY
82666: LIST
82667: PUSH
82668: LD_INT 33
82670: PUSH
82671: LD_INT 2
82673: PUSH
82674: EMPTY
82675: LIST
82676: LIST
82677: PUSH
82678: EMPTY
82679: LIST
82680: LIST
82681: LIST
82682: PPUSH
82683: CALL_OW 69
82687: ST_TO_ADDR
// if not tmp then
82688: LD_VAR 0 1
82692: NOT
82693: IFFALSE 82697
// exit ;
82695: GO 82734
// for i in tmp do
82697: LD_ADDR_VAR 0 2
82701: PUSH
82702: LD_VAR 0 1
82706: PUSH
82707: FOR_IN
82708: IFFALSE 82732
// if IsControledBy ( i ) then
82710: LD_VAR 0 2
82714: PPUSH
82715: CALL_OW 312
82719: IFFALSE 82730
// ComUnlink ( i ) ;
82721: LD_VAR 0 2
82725: PPUSH
82726: CALL_OW 136
82730: GO 82707
82732: POP
82733: POP
// end ;
82734: PPOPN 2
82736: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
82737: LD_EXP 75
82741: IFFALSE 82749
82743: PUSH
82744: LD_EXP 106
82748: AND
82749: IFFALSE 82889
82751: GO 82753
82753: DISABLE
82754: LD_INT 0
82756: PPUSH
82757: PPUSH
// begin ToLua ( displayPowell(); ) ;
82758: LD_STRING displayPowell();
82760: PPUSH
82761: CALL_OW 559
// uc_side := 0 ;
82765: LD_ADDR_OWVAR 20
82769: PUSH
82770: LD_INT 0
82772: ST_TO_ADDR
// uc_nation := 2 ;
82773: LD_ADDR_OWVAR 21
82777: PUSH
82778: LD_INT 2
82780: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
82781: LD_ADDR_OWVAR 37
82785: PUSH
82786: LD_INT 14
82788: ST_TO_ADDR
// vc_engine := engine_siberite ;
82789: LD_ADDR_OWVAR 39
82793: PUSH
82794: LD_INT 3
82796: ST_TO_ADDR
// vc_control := control_apeman ;
82797: LD_ADDR_OWVAR 38
82801: PUSH
82802: LD_INT 5
82804: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
82805: LD_ADDR_OWVAR 40
82809: PUSH
82810: LD_INT 29
82812: ST_TO_ADDR
// un := CreateVehicle ;
82813: LD_ADDR_VAR 0 2
82817: PUSH
82818: CALL_OW 45
82822: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82823: LD_VAR 0 2
82827: PPUSH
82828: LD_INT 1
82830: PPUSH
82831: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
82835: LD_INT 35
82837: PPUSH
82838: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
82842: LD_VAR 0 2
82846: PPUSH
82847: LD_INT 22
82849: PUSH
82850: LD_OWVAR 2
82854: PUSH
82855: EMPTY
82856: LIST
82857: LIST
82858: PPUSH
82859: CALL_OW 69
82863: PPUSH
82864: LD_VAR 0 2
82868: PPUSH
82869: CALL_OW 74
82873: PPUSH
82874: CALL_OW 115
// until IsDead ( un ) ;
82878: LD_VAR 0 2
82882: PPUSH
82883: CALL_OW 301
82887: IFFALSE 82835
// end ;
82889: PPOPN 2
82891: END
// every 0 0$1 trigger StreamModeActive and sStu do
82892: LD_EXP 75
82896: IFFALSE 82904
82898: PUSH
82899: LD_EXP 114
82903: AND
82904: IFFALSE 82920
82906: GO 82908
82908: DISABLE
// begin ToLua ( displayStucuk(); ) ;
82909: LD_STRING displayStucuk();
82911: PPUSH
82912: CALL_OW 559
// ResetFog ;
82916: CALL_OW 335
// end ;
82920: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
82921: LD_EXP 75
82925: IFFALSE 82933
82927: PUSH
82928: LD_EXP 107
82932: AND
82933: IFFALSE 83074
82935: GO 82937
82937: DISABLE
82938: LD_INT 0
82940: PPUSH
82941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
82942: LD_ADDR_VAR 0 2
82946: PUSH
82947: LD_INT 22
82949: PUSH
82950: LD_OWVAR 2
82954: PUSH
82955: EMPTY
82956: LIST
82957: LIST
82958: PUSH
82959: LD_INT 21
82961: PUSH
82962: LD_INT 1
82964: PUSH
82965: EMPTY
82966: LIST
82967: LIST
82968: PUSH
82969: EMPTY
82970: LIST
82971: LIST
82972: PPUSH
82973: CALL_OW 69
82977: ST_TO_ADDR
// if not tmp then
82978: LD_VAR 0 2
82982: NOT
82983: IFFALSE 82987
// exit ;
82985: GO 83074
// un := tmp [ rand ( 1 , tmp ) ] ;
82987: LD_ADDR_VAR 0 1
82991: PUSH
82992: LD_VAR 0 2
82996: PUSH
82997: LD_INT 1
82999: PPUSH
83000: LD_VAR 0 2
83004: PPUSH
83005: CALL_OW 12
83009: ARRAY
83010: ST_TO_ADDR
// SetSide ( un , 0 ) ;
83011: LD_VAR 0 1
83015: PPUSH
83016: LD_INT 0
83018: PPUSH
83019: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
83023: LD_VAR 0 1
83027: PPUSH
83028: LD_OWVAR 3
83032: PUSH
83033: LD_VAR 0 1
83037: DIFF
83038: PPUSH
83039: LD_VAR 0 1
83043: PPUSH
83044: CALL_OW 74
83048: PPUSH
83049: CALL_OW 115
// wait ( 0 0$20 ) ;
83053: LD_INT 700
83055: PPUSH
83056: CALL_OW 67
// SetSide ( un , your_side ) ;
83060: LD_VAR 0 1
83064: PPUSH
83065: LD_OWVAR 2
83069: PPUSH
83070: CALL_OW 235
// end ;
83074: PPOPN 2
83076: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
83077: LD_EXP 75
83081: IFFALSE 83089
83083: PUSH
83084: LD_EXP 108
83088: AND
83089: IFFALSE 83195
83091: GO 83093
83093: DISABLE
83094: LD_INT 0
83096: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
83097: LD_ADDR_VAR 0 1
83101: PUSH
83102: LD_INT 22
83104: PUSH
83105: LD_OWVAR 2
83109: PUSH
83110: EMPTY
83111: LIST
83112: LIST
83113: PUSH
83114: LD_INT 2
83116: PUSH
83117: LD_INT 30
83119: PUSH
83120: LD_INT 0
83122: PUSH
83123: EMPTY
83124: LIST
83125: LIST
83126: PUSH
83127: LD_INT 30
83129: PUSH
83130: LD_INT 1
83132: PUSH
83133: EMPTY
83134: LIST
83135: LIST
83136: PUSH
83137: EMPTY
83138: LIST
83139: LIST
83140: LIST
83141: PUSH
83142: EMPTY
83143: LIST
83144: LIST
83145: PPUSH
83146: CALL_OW 69
83150: ST_TO_ADDR
// if not depot then
83151: LD_VAR 0 1
83155: NOT
83156: IFFALSE 83160
// exit ;
83158: GO 83195
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
83160: LD_VAR 0 1
83164: PUSH
83165: LD_INT 1
83167: ARRAY
83168: PPUSH
83169: CALL_OW 250
83173: PPUSH
83174: LD_VAR 0 1
83178: PUSH
83179: LD_INT 1
83181: ARRAY
83182: PPUSH
83183: CALL_OW 251
83187: PPUSH
83188: LD_INT 70
83190: PPUSH
83191: CALL_OW 495
// end ;
83195: PPOPN 1
83197: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
83198: LD_EXP 75
83202: IFFALSE 83210
83204: PUSH
83205: LD_EXP 109
83209: AND
83210: IFFALSE 83421
83212: GO 83214
83214: DISABLE
83215: LD_INT 0
83217: PPUSH
83218: PPUSH
83219: PPUSH
83220: PPUSH
83221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
83222: LD_ADDR_VAR 0 5
83226: PUSH
83227: LD_INT 22
83229: PUSH
83230: LD_OWVAR 2
83234: PUSH
83235: EMPTY
83236: LIST
83237: LIST
83238: PUSH
83239: LD_INT 21
83241: PUSH
83242: LD_INT 1
83244: PUSH
83245: EMPTY
83246: LIST
83247: LIST
83248: PUSH
83249: EMPTY
83250: LIST
83251: LIST
83252: PPUSH
83253: CALL_OW 69
83257: ST_TO_ADDR
// if not tmp then
83258: LD_VAR 0 5
83262: NOT
83263: IFFALSE 83267
// exit ;
83265: GO 83421
// for i in tmp do
83267: LD_ADDR_VAR 0 1
83271: PUSH
83272: LD_VAR 0 5
83276: PUSH
83277: FOR_IN
83278: IFFALSE 83419
// begin d := rand ( 0 , 5 ) ;
83280: LD_ADDR_VAR 0 4
83284: PUSH
83285: LD_INT 0
83287: PPUSH
83288: LD_INT 5
83290: PPUSH
83291: CALL_OW 12
83295: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
83296: LD_ADDR_VAR 0 2
83300: PUSH
83301: LD_VAR 0 1
83305: PPUSH
83306: CALL_OW 250
83310: PPUSH
83311: LD_VAR 0 4
83315: PPUSH
83316: LD_INT 3
83318: PPUSH
83319: LD_INT 12
83321: PPUSH
83322: CALL_OW 12
83326: PPUSH
83327: CALL_OW 272
83331: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
83332: LD_ADDR_VAR 0 3
83336: PUSH
83337: LD_VAR 0 1
83341: PPUSH
83342: CALL_OW 251
83346: PPUSH
83347: LD_VAR 0 4
83351: PPUSH
83352: LD_INT 3
83354: PPUSH
83355: LD_INT 12
83357: PPUSH
83358: CALL_OW 12
83362: PPUSH
83363: CALL_OW 273
83367: ST_TO_ADDR
// if ValidHex ( x , y ) then
83368: LD_VAR 0 2
83372: PPUSH
83373: LD_VAR 0 3
83377: PPUSH
83378: CALL_OW 488
83382: IFFALSE 83417
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
83384: LD_VAR 0 1
83388: PPUSH
83389: LD_VAR 0 2
83393: PPUSH
83394: LD_VAR 0 3
83398: PPUSH
83399: LD_INT 3
83401: PPUSH
83402: LD_INT 6
83404: PPUSH
83405: CALL_OW 12
83409: PPUSH
83410: LD_INT 1
83412: PPUSH
83413: CALL_OW 483
// end ;
83417: GO 83277
83419: POP
83420: POP
// end ;
83421: PPOPN 5
83423: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
83424: LD_EXP 75
83428: IFFALSE 83436
83430: PUSH
83431: LD_EXP 110
83435: AND
83436: IFFALSE 83530
83438: GO 83440
83440: DISABLE
83441: LD_INT 0
83443: PPUSH
83444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
83445: LD_ADDR_VAR 0 2
83449: PUSH
83450: LD_INT 22
83452: PUSH
83453: LD_OWVAR 2
83457: PUSH
83458: EMPTY
83459: LIST
83460: LIST
83461: PUSH
83462: LD_INT 32
83464: PUSH
83465: LD_INT 1
83467: PUSH
83468: EMPTY
83469: LIST
83470: LIST
83471: PUSH
83472: LD_INT 21
83474: PUSH
83475: LD_INT 2
83477: PUSH
83478: EMPTY
83479: LIST
83480: LIST
83481: PUSH
83482: EMPTY
83483: LIST
83484: LIST
83485: LIST
83486: PPUSH
83487: CALL_OW 69
83491: ST_TO_ADDR
// if not tmp then
83492: LD_VAR 0 2
83496: NOT
83497: IFFALSE 83501
// exit ;
83499: GO 83530
// for i in tmp do
83501: LD_ADDR_VAR 0 1
83505: PUSH
83506: LD_VAR 0 2
83510: PUSH
83511: FOR_IN
83512: IFFALSE 83528
// SetFuel ( i , 0 ) ;
83514: LD_VAR 0 1
83518: PPUSH
83519: LD_INT 0
83521: PPUSH
83522: CALL_OW 240
83526: GO 83511
83528: POP
83529: POP
// end ;
83530: PPOPN 2
83532: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
83533: LD_EXP 75
83537: IFFALSE 83545
83539: PUSH
83540: LD_EXP 111
83544: AND
83545: IFFALSE 83611
83547: GO 83549
83549: DISABLE
83550: LD_INT 0
83552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83553: LD_ADDR_VAR 0 1
83557: PUSH
83558: LD_INT 22
83560: PUSH
83561: LD_OWVAR 2
83565: PUSH
83566: EMPTY
83567: LIST
83568: LIST
83569: PUSH
83570: LD_INT 30
83572: PUSH
83573: LD_INT 29
83575: PUSH
83576: EMPTY
83577: LIST
83578: LIST
83579: PUSH
83580: EMPTY
83581: LIST
83582: LIST
83583: PPUSH
83584: CALL_OW 69
83588: ST_TO_ADDR
// if not tmp then
83589: LD_VAR 0 1
83593: NOT
83594: IFFALSE 83598
// exit ;
83596: GO 83611
// DestroyUnit ( tmp [ 1 ] ) ;
83598: LD_VAR 0 1
83602: PUSH
83603: LD_INT 1
83605: ARRAY
83606: PPUSH
83607: CALL_OW 65
// end ;
83611: PPOPN 1
83613: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
83614: LD_EXP 75
83618: IFFALSE 83626
83620: PUSH
83621: LD_EXP 113
83625: AND
83626: IFFALSE 83755
83628: GO 83630
83630: DISABLE
83631: LD_INT 0
83633: PPUSH
// begin uc_side := 0 ;
83634: LD_ADDR_OWVAR 20
83638: PUSH
83639: LD_INT 0
83641: ST_TO_ADDR
// uc_nation := nation_arabian ;
83642: LD_ADDR_OWVAR 21
83646: PUSH
83647: LD_INT 2
83649: ST_TO_ADDR
// hc_gallery :=  ;
83650: LD_ADDR_OWVAR 33
83654: PUSH
83655: LD_STRING 
83657: ST_TO_ADDR
// hc_name :=  ;
83658: LD_ADDR_OWVAR 26
83662: PUSH
83663: LD_STRING 
83665: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
83666: LD_INT 1
83668: PPUSH
83669: LD_INT 11
83671: PPUSH
83672: LD_INT 10
83674: PPUSH
83675: CALL_OW 380
// un := CreateHuman ;
83679: LD_ADDR_VAR 0 1
83683: PUSH
83684: CALL_OW 44
83688: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83689: LD_VAR 0 1
83693: PPUSH
83694: LD_INT 1
83696: PPUSH
83697: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
83701: LD_INT 35
83703: PPUSH
83704: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
83708: LD_VAR 0 1
83712: PPUSH
83713: LD_INT 22
83715: PUSH
83716: LD_OWVAR 2
83720: PUSH
83721: EMPTY
83722: LIST
83723: LIST
83724: PPUSH
83725: CALL_OW 69
83729: PPUSH
83730: LD_VAR 0 1
83734: PPUSH
83735: CALL_OW 74
83739: PPUSH
83740: CALL_OW 115
// until IsDead ( un ) ;
83744: LD_VAR 0 1
83748: PPUSH
83749: CALL_OW 301
83753: IFFALSE 83701
// end ;
83755: PPOPN 1
83757: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
83758: LD_EXP 75
83762: IFFALSE 83770
83764: PUSH
83765: LD_EXP 115
83769: AND
83770: IFFALSE 83782
83772: GO 83774
83774: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
83775: LD_STRING earthquake(getX(game), 0, 32)
83777: PPUSH
83778: CALL_OW 559
83782: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
83783: LD_EXP 75
83787: IFFALSE 83795
83789: PUSH
83790: LD_EXP 116
83794: AND
83795: IFFALSE 83886
83797: GO 83799
83799: DISABLE
83800: LD_INT 0
83802: PPUSH
// begin enable ;
83803: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
83804: LD_ADDR_VAR 0 1
83808: PUSH
83809: LD_INT 22
83811: PUSH
83812: LD_OWVAR 2
83816: PUSH
83817: EMPTY
83818: LIST
83819: LIST
83820: PUSH
83821: LD_INT 21
83823: PUSH
83824: LD_INT 2
83826: PUSH
83827: EMPTY
83828: LIST
83829: LIST
83830: PUSH
83831: LD_INT 33
83833: PUSH
83834: LD_INT 3
83836: PUSH
83837: EMPTY
83838: LIST
83839: LIST
83840: PUSH
83841: EMPTY
83842: LIST
83843: LIST
83844: LIST
83845: PPUSH
83846: CALL_OW 69
83850: ST_TO_ADDR
// if not tmp then
83851: LD_VAR 0 1
83855: NOT
83856: IFFALSE 83860
// exit ;
83858: GO 83886
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
83860: LD_VAR 0 1
83864: PUSH
83865: LD_INT 1
83867: PPUSH
83868: LD_VAR 0 1
83872: PPUSH
83873: CALL_OW 12
83877: ARRAY
83878: PPUSH
83879: LD_INT 1
83881: PPUSH
83882: CALL_OW 234
// end ;
83886: PPOPN 1
83888: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
83889: LD_EXP 75
83893: IFFALSE 83901
83895: PUSH
83896: LD_EXP 117
83900: AND
83901: IFFALSE 84042
83903: GO 83905
83905: DISABLE
83906: LD_INT 0
83908: PPUSH
83909: PPUSH
83910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83911: LD_ADDR_VAR 0 3
83915: PUSH
83916: LD_INT 22
83918: PUSH
83919: LD_OWVAR 2
83923: PUSH
83924: EMPTY
83925: LIST
83926: LIST
83927: PUSH
83928: LD_INT 25
83930: PUSH
83931: LD_INT 1
83933: PUSH
83934: EMPTY
83935: LIST
83936: LIST
83937: PUSH
83938: EMPTY
83939: LIST
83940: LIST
83941: PPUSH
83942: CALL_OW 69
83946: ST_TO_ADDR
// if not tmp then
83947: LD_VAR 0 3
83951: NOT
83952: IFFALSE 83956
// exit ;
83954: GO 84042
// un := tmp [ rand ( 1 , tmp ) ] ;
83956: LD_ADDR_VAR 0 2
83960: PUSH
83961: LD_VAR 0 3
83965: PUSH
83966: LD_INT 1
83968: PPUSH
83969: LD_VAR 0 3
83973: PPUSH
83974: CALL_OW 12
83978: ARRAY
83979: ST_TO_ADDR
// if Crawls ( un ) then
83980: LD_VAR 0 2
83984: PPUSH
83985: CALL_OW 318
83989: IFFALSE 84000
// ComWalk ( un ) ;
83991: LD_VAR 0 2
83995: PPUSH
83996: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
84000: LD_VAR 0 2
84004: PPUSH
84005: LD_INT 9
84007: PPUSH
84008: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
84012: LD_INT 28
84014: PPUSH
84015: LD_OWVAR 2
84019: PPUSH
84020: LD_INT 2
84022: PPUSH
84023: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
84027: LD_INT 29
84029: PPUSH
84030: LD_OWVAR 2
84034: PPUSH
84035: LD_INT 2
84037: PPUSH
84038: CALL_OW 322
// end ;
84042: PPOPN 3
84044: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
84045: LD_EXP 75
84049: IFFALSE 84057
84051: PUSH
84052: LD_EXP 118
84056: AND
84057: IFFALSE 84168
84059: GO 84061
84061: DISABLE
84062: LD_INT 0
84064: PPUSH
84065: PPUSH
84066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
84067: LD_ADDR_VAR 0 3
84071: PUSH
84072: LD_INT 22
84074: PUSH
84075: LD_OWVAR 2
84079: PUSH
84080: EMPTY
84081: LIST
84082: LIST
84083: PUSH
84084: LD_INT 25
84086: PUSH
84087: LD_INT 1
84089: PUSH
84090: EMPTY
84091: LIST
84092: LIST
84093: PUSH
84094: EMPTY
84095: LIST
84096: LIST
84097: PPUSH
84098: CALL_OW 69
84102: ST_TO_ADDR
// if not tmp then
84103: LD_VAR 0 3
84107: NOT
84108: IFFALSE 84112
// exit ;
84110: GO 84168
// un := tmp [ rand ( 1 , tmp ) ] ;
84112: LD_ADDR_VAR 0 2
84116: PUSH
84117: LD_VAR 0 3
84121: PUSH
84122: LD_INT 1
84124: PPUSH
84125: LD_VAR 0 3
84129: PPUSH
84130: CALL_OW 12
84134: ARRAY
84135: ST_TO_ADDR
// if Crawls ( un ) then
84136: LD_VAR 0 2
84140: PPUSH
84141: CALL_OW 318
84145: IFFALSE 84156
// ComWalk ( un ) ;
84147: LD_VAR 0 2
84151: PPUSH
84152: CALL_OW 138
// SetClass ( un , class_mortar ) ;
84156: LD_VAR 0 2
84160: PPUSH
84161: LD_INT 8
84163: PPUSH
84164: CALL_OW 336
// end ;
84168: PPOPN 3
84170: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
84171: LD_EXP 75
84175: IFFALSE 84183
84177: PUSH
84178: LD_EXP 119
84182: AND
84183: IFFALSE 84327
84185: GO 84187
84187: DISABLE
84188: LD_INT 0
84190: PPUSH
84191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
84192: LD_ADDR_VAR 0 2
84196: PUSH
84197: LD_INT 22
84199: PUSH
84200: LD_OWVAR 2
84204: PUSH
84205: EMPTY
84206: LIST
84207: LIST
84208: PUSH
84209: LD_INT 21
84211: PUSH
84212: LD_INT 2
84214: PUSH
84215: EMPTY
84216: LIST
84217: LIST
84218: PUSH
84219: LD_INT 2
84221: PUSH
84222: LD_INT 34
84224: PUSH
84225: LD_INT 12
84227: PUSH
84228: EMPTY
84229: LIST
84230: LIST
84231: PUSH
84232: LD_INT 34
84234: PUSH
84235: LD_INT 51
84237: PUSH
84238: EMPTY
84239: LIST
84240: LIST
84241: PUSH
84242: LD_INT 34
84244: PUSH
84245: LD_INT 32
84247: PUSH
84248: EMPTY
84249: LIST
84250: LIST
84251: PUSH
84252: EMPTY
84253: LIST
84254: LIST
84255: LIST
84256: LIST
84257: PUSH
84258: EMPTY
84259: LIST
84260: LIST
84261: LIST
84262: PPUSH
84263: CALL_OW 69
84267: ST_TO_ADDR
// if not tmp then
84268: LD_VAR 0 2
84272: NOT
84273: IFFALSE 84277
// exit ;
84275: GO 84327
// for i in tmp do
84277: LD_ADDR_VAR 0 1
84281: PUSH
84282: LD_VAR 0 2
84286: PUSH
84287: FOR_IN
84288: IFFALSE 84325
// if GetCargo ( i , mat_artifact ) = 0 then
84290: LD_VAR 0 1
84294: PPUSH
84295: LD_INT 4
84297: PPUSH
84298: CALL_OW 289
84302: PUSH
84303: LD_INT 0
84305: EQUAL
84306: IFFALSE 84323
// SetCargo ( i , mat_siberit , 100 ) ;
84308: LD_VAR 0 1
84312: PPUSH
84313: LD_INT 3
84315: PPUSH
84316: LD_INT 100
84318: PPUSH
84319: CALL_OW 290
84323: GO 84287
84325: POP
84326: POP
// end ;
84327: PPOPN 2
84329: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
84330: LD_EXP 75
84334: IFFALSE 84342
84336: PUSH
84337: LD_EXP 120
84341: AND
84342: IFFALSE 84525
84344: GO 84346
84346: DISABLE
84347: LD_INT 0
84349: PPUSH
84350: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84351: LD_ADDR_VAR 0 2
84355: PUSH
84356: LD_INT 22
84358: PUSH
84359: LD_OWVAR 2
84363: PUSH
84364: EMPTY
84365: LIST
84366: LIST
84367: PPUSH
84368: CALL_OW 69
84372: ST_TO_ADDR
// if not tmp then
84373: LD_VAR 0 2
84377: NOT
84378: IFFALSE 84382
// exit ;
84380: GO 84525
// for i := 1 to 2 do
84382: LD_ADDR_VAR 0 1
84386: PUSH
84387: DOUBLE
84388: LD_INT 1
84390: DEC
84391: ST_TO_ADDR
84392: LD_INT 2
84394: PUSH
84395: FOR_TO
84396: IFFALSE 84523
// begin uc_side := your_side ;
84398: LD_ADDR_OWVAR 20
84402: PUSH
84403: LD_OWVAR 2
84407: ST_TO_ADDR
// uc_nation := nation_american ;
84408: LD_ADDR_OWVAR 21
84412: PUSH
84413: LD_INT 1
84415: ST_TO_ADDR
// vc_chassis := us_morphling ;
84416: LD_ADDR_OWVAR 37
84420: PUSH
84421: LD_INT 5
84423: ST_TO_ADDR
// vc_engine := engine_siberite ;
84424: LD_ADDR_OWVAR 39
84428: PUSH
84429: LD_INT 3
84431: ST_TO_ADDR
// vc_control := control_computer ;
84432: LD_ADDR_OWVAR 38
84436: PUSH
84437: LD_INT 3
84439: ST_TO_ADDR
// vc_weapon := us_double_laser ;
84440: LD_ADDR_OWVAR 40
84444: PUSH
84445: LD_INT 10
84447: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
84448: LD_VAR 0 2
84452: PUSH
84453: LD_INT 1
84455: ARRAY
84456: PPUSH
84457: CALL_OW 310
84461: NOT
84462: IFFALSE 84509
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
84464: CALL_OW 45
84468: PPUSH
84469: LD_VAR 0 2
84473: PUSH
84474: LD_INT 1
84476: ARRAY
84477: PPUSH
84478: CALL_OW 250
84482: PPUSH
84483: LD_VAR 0 2
84487: PUSH
84488: LD_INT 1
84490: ARRAY
84491: PPUSH
84492: CALL_OW 251
84496: PPUSH
84497: LD_INT 12
84499: PPUSH
84500: LD_INT 1
84502: PPUSH
84503: CALL_OW 50
84507: GO 84521
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
84509: CALL_OW 45
84513: PPUSH
84514: LD_INT 1
84516: PPUSH
84517: CALL_OW 51
// end ;
84521: GO 84395
84523: POP
84524: POP
// end ;
84525: PPOPN 2
84527: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
84528: LD_EXP 75
84532: IFFALSE 84540
84534: PUSH
84535: LD_EXP 121
84539: AND
84540: IFFALSE 84762
84542: GO 84544
84544: DISABLE
84545: LD_INT 0
84547: PPUSH
84548: PPUSH
84549: PPUSH
84550: PPUSH
84551: PPUSH
84552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
84553: LD_ADDR_VAR 0 6
84557: PUSH
84558: LD_INT 22
84560: PUSH
84561: LD_OWVAR 2
84565: PUSH
84566: EMPTY
84567: LIST
84568: LIST
84569: PUSH
84570: LD_INT 21
84572: PUSH
84573: LD_INT 1
84575: PUSH
84576: EMPTY
84577: LIST
84578: LIST
84579: PUSH
84580: LD_INT 3
84582: PUSH
84583: LD_INT 23
84585: PUSH
84586: LD_INT 0
84588: PUSH
84589: EMPTY
84590: LIST
84591: LIST
84592: PUSH
84593: EMPTY
84594: LIST
84595: LIST
84596: PUSH
84597: EMPTY
84598: LIST
84599: LIST
84600: LIST
84601: PPUSH
84602: CALL_OW 69
84606: ST_TO_ADDR
// if not tmp then
84607: LD_VAR 0 6
84611: NOT
84612: IFFALSE 84616
// exit ;
84614: GO 84762
// s1 := rand ( 1 , 4 ) ;
84616: LD_ADDR_VAR 0 2
84620: PUSH
84621: LD_INT 1
84623: PPUSH
84624: LD_INT 4
84626: PPUSH
84627: CALL_OW 12
84631: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
84632: LD_ADDR_VAR 0 4
84636: PUSH
84637: LD_VAR 0 6
84641: PUSH
84642: LD_INT 1
84644: ARRAY
84645: PPUSH
84646: LD_VAR 0 2
84650: PPUSH
84651: CALL_OW 259
84655: ST_TO_ADDR
// if s1 = 1 then
84656: LD_VAR 0 2
84660: PUSH
84661: LD_INT 1
84663: EQUAL
84664: IFFALSE 84684
// s2 := rand ( 2 , 4 ) else
84666: LD_ADDR_VAR 0 3
84670: PUSH
84671: LD_INT 2
84673: PPUSH
84674: LD_INT 4
84676: PPUSH
84677: CALL_OW 12
84681: ST_TO_ADDR
84682: GO 84692
// s2 := 1 ;
84684: LD_ADDR_VAR 0 3
84688: PUSH
84689: LD_INT 1
84691: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
84692: LD_ADDR_VAR 0 5
84696: PUSH
84697: LD_VAR 0 6
84701: PUSH
84702: LD_INT 1
84704: ARRAY
84705: PPUSH
84706: LD_VAR 0 3
84710: PPUSH
84711: CALL_OW 259
84715: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
84716: LD_VAR 0 6
84720: PUSH
84721: LD_INT 1
84723: ARRAY
84724: PPUSH
84725: LD_VAR 0 2
84729: PPUSH
84730: LD_VAR 0 5
84734: PPUSH
84735: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
84739: LD_VAR 0 6
84743: PUSH
84744: LD_INT 1
84746: ARRAY
84747: PPUSH
84748: LD_VAR 0 3
84752: PPUSH
84753: LD_VAR 0 4
84757: PPUSH
84758: CALL_OW 237
// end ;
84762: PPOPN 6
84764: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
84765: LD_EXP 75
84769: IFFALSE 84777
84771: PUSH
84772: LD_EXP 122
84776: AND
84777: IFFALSE 84856
84779: GO 84781
84781: DISABLE
84782: LD_INT 0
84784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
84785: LD_ADDR_VAR 0 1
84789: PUSH
84790: LD_INT 22
84792: PUSH
84793: LD_OWVAR 2
84797: PUSH
84798: EMPTY
84799: LIST
84800: LIST
84801: PUSH
84802: LD_INT 30
84804: PUSH
84805: LD_INT 3
84807: PUSH
84808: EMPTY
84809: LIST
84810: LIST
84811: PUSH
84812: EMPTY
84813: LIST
84814: LIST
84815: PPUSH
84816: CALL_OW 69
84820: ST_TO_ADDR
// if not tmp then
84821: LD_VAR 0 1
84825: NOT
84826: IFFALSE 84830
// exit ;
84828: GO 84856
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
84830: LD_VAR 0 1
84834: PUSH
84835: LD_INT 1
84837: PPUSH
84838: LD_VAR 0 1
84842: PPUSH
84843: CALL_OW 12
84847: ARRAY
84848: PPUSH
84849: LD_INT 1
84851: PPUSH
84852: CALL_OW 234
// end ;
84856: PPOPN 1
84858: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
84859: LD_EXP 75
84863: IFFALSE 84871
84865: PUSH
84866: LD_EXP 123
84870: AND
84871: IFFALSE 84983
84873: GO 84875
84875: DISABLE
84876: LD_INT 0
84878: PPUSH
84879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
84880: LD_ADDR_VAR 0 2
84884: PUSH
84885: LD_INT 22
84887: PUSH
84888: LD_OWVAR 2
84892: PUSH
84893: EMPTY
84894: LIST
84895: LIST
84896: PUSH
84897: LD_INT 2
84899: PUSH
84900: LD_INT 30
84902: PUSH
84903: LD_INT 27
84905: PUSH
84906: EMPTY
84907: LIST
84908: LIST
84909: PUSH
84910: LD_INT 30
84912: PUSH
84913: LD_INT 26
84915: PUSH
84916: EMPTY
84917: LIST
84918: LIST
84919: PUSH
84920: LD_INT 30
84922: PUSH
84923: LD_INT 28
84925: PUSH
84926: EMPTY
84927: LIST
84928: LIST
84929: PUSH
84930: EMPTY
84931: LIST
84932: LIST
84933: LIST
84934: LIST
84935: PUSH
84936: EMPTY
84937: LIST
84938: LIST
84939: PPUSH
84940: CALL_OW 69
84944: ST_TO_ADDR
// if not tmp then
84945: LD_VAR 0 2
84949: NOT
84950: IFFALSE 84954
// exit ;
84952: GO 84983
// for i in tmp do
84954: LD_ADDR_VAR 0 1
84958: PUSH
84959: LD_VAR 0 2
84963: PUSH
84964: FOR_IN
84965: IFFALSE 84981
// SetLives ( i , 1 ) ;
84967: LD_VAR 0 1
84971: PPUSH
84972: LD_INT 1
84974: PPUSH
84975: CALL_OW 234
84979: GO 84964
84981: POP
84982: POP
// end ;
84983: PPOPN 2
84985: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
84986: LD_EXP 75
84990: IFFALSE 84998
84992: PUSH
84993: LD_EXP 124
84997: AND
84998: IFFALSE 85285
85000: GO 85002
85002: DISABLE
85003: LD_INT 0
85005: PPUSH
85006: PPUSH
85007: PPUSH
// begin i := rand ( 1 , 7 ) ;
85008: LD_ADDR_VAR 0 1
85012: PUSH
85013: LD_INT 1
85015: PPUSH
85016: LD_INT 7
85018: PPUSH
85019: CALL_OW 12
85023: ST_TO_ADDR
// case i of 1 :
85024: LD_VAR 0 1
85028: PUSH
85029: LD_INT 1
85031: DOUBLE
85032: EQUAL
85033: IFTRUE 85037
85035: GO 85047
85037: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
85038: LD_STRING earthquake(getX(game), 0, 32)
85040: PPUSH
85041: CALL_OW 559
85045: GO 85285
85047: LD_INT 2
85049: DOUBLE
85050: EQUAL
85051: IFTRUE 85055
85053: GO 85069
85055: POP
// begin ToLua ( displayStucuk(); ) ;
85056: LD_STRING displayStucuk();
85058: PPUSH
85059: CALL_OW 559
// ResetFog ;
85063: CALL_OW 335
// end ; 3 :
85067: GO 85285
85069: LD_INT 3
85071: DOUBLE
85072: EQUAL
85073: IFTRUE 85077
85075: GO 85181
85077: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
85078: LD_ADDR_VAR 0 2
85082: PUSH
85083: LD_INT 22
85085: PUSH
85086: LD_OWVAR 2
85090: PUSH
85091: EMPTY
85092: LIST
85093: LIST
85094: PUSH
85095: LD_INT 25
85097: PUSH
85098: LD_INT 1
85100: PUSH
85101: EMPTY
85102: LIST
85103: LIST
85104: PUSH
85105: EMPTY
85106: LIST
85107: LIST
85108: PPUSH
85109: CALL_OW 69
85113: ST_TO_ADDR
// if not tmp then
85114: LD_VAR 0 2
85118: NOT
85119: IFFALSE 85123
// exit ;
85121: GO 85285
// un := tmp [ rand ( 1 , tmp ) ] ;
85123: LD_ADDR_VAR 0 3
85127: PUSH
85128: LD_VAR 0 2
85132: PUSH
85133: LD_INT 1
85135: PPUSH
85136: LD_VAR 0 2
85140: PPUSH
85141: CALL_OW 12
85145: ARRAY
85146: ST_TO_ADDR
// if Crawls ( un ) then
85147: LD_VAR 0 3
85151: PPUSH
85152: CALL_OW 318
85156: IFFALSE 85167
// ComWalk ( un ) ;
85158: LD_VAR 0 3
85162: PPUSH
85163: CALL_OW 138
// SetClass ( un , class_mortar ) ;
85167: LD_VAR 0 3
85171: PPUSH
85172: LD_INT 8
85174: PPUSH
85175: CALL_OW 336
// end ; 4 :
85179: GO 85285
85181: LD_INT 4
85183: DOUBLE
85184: EQUAL
85185: IFTRUE 85189
85187: GO 85263
85189: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
85190: LD_ADDR_VAR 0 2
85194: PUSH
85195: LD_INT 22
85197: PUSH
85198: LD_OWVAR 2
85202: PUSH
85203: EMPTY
85204: LIST
85205: LIST
85206: PUSH
85207: LD_INT 30
85209: PUSH
85210: LD_INT 29
85212: PUSH
85213: EMPTY
85214: LIST
85215: LIST
85216: PUSH
85217: EMPTY
85218: LIST
85219: LIST
85220: PPUSH
85221: CALL_OW 69
85225: ST_TO_ADDR
// if not tmp then
85226: LD_VAR 0 2
85230: NOT
85231: IFFALSE 85235
// exit ;
85233: GO 85285
// CenterNowOnUnits ( tmp [ 1 ] ) ;
85235: LD_VAR 0 2
85239: PUSH
85240: LD_INT 1
85242: ARRAY
85243: PPUSH
85244: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
85248: LD_VAR 0 2
85252: PUSH
85253: LD_INT 1
85255: ARRAY
85256: PPUSH
85257: CALL_OW 65
// end ; 5 .. 7 :
85261: GO 85285
85263: LD_INT 5
85265: DOUBLE
85266: GREATEREQUAL
85267: IFFALSE 85275
85269: LD_INT 7
85271: DOUBLE
85272: LESSEQUAL
85273: IFTRUE 85277
85275: GO 85284
85277: POP
// StreamSibBomb ; end ;
85278: CALL 81466 0 0
85282: GO 85285
85284: POP
// end ;
85285: PPOPN 3
85287: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
85288: LD_EXP 75
85292: IFFALSE 85300
85294: PUSH
85295: LD_EXP 125
85299: AND
85300: IFFALSE 85456
85302: GO 85304
85304: DISABLE
85305: LD_INT 0
85307: PPUSH
85308: PPUSH
85309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
85310: LD_ADDR_VAR 0 2
85314: PUSH
85315: LD_INT 81
85317: PUSH
85318: LD_OWVAR 2
85322: PUSH
85323: EMPTY
85324: LIST
85325: LIST
85326: PUSH
85327: LD_INT 2
85329: PUSH
85330: LD_INT 21
85332: PUSH
85333: LD_INT 1
85335: PUSH
85336: EMPTY
85337: LIST
85338: LIST
85339: PUSH
85340: LD_INT 21
85342: PUSH
85343: LD_INT 2
85345: PUSH
85346: EMPTY
85347: LIST
85348: LIST
85349: PUSH
85350: EMPTY
85351: LIST
85352: LIST
85353: LIST
85354: PUSH
85355: EMPTY
85356: LIST
85357: LIST
85358: PPUSH
85359: CALL_OW 69
85363: ST_TO_ADDR
// if not tmp then
85364: LD_VAR 0 2
85368: NOT
85369: IFFALSE 85373
// exit ;
85371: GO 85456
// p := 0 ;
85373: LD_ADDR_VAR 0 3
85377: PUSH
85378: LD_INT 0
85380: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
85381: LD_INT 35
85383: PPUSH
85384: CALL_OW 67
// p := p + 1 ;
85388: LD_ADDR_VAR 0 3
85392: PUSH
85393: LD_VAR 0 3
85397: PUSH
85398: LD_INT 1
85400: PLUS
85401: ST_TO_ADDR
// for i in tmp do
85402: LD_ADDR_VAR 0 1
85406: PUSH
85407: LD_VAR 0 2
85411: PUSH
85412: FOR_IN
85413: IFFALSE 85444
// if GetLives ( i ) < 1000 then
85415: LD_VAR 0 1
85419: PPUSH
85420: CALL_OW 256
85424: PUSH
85425: LD_INT 1000
85427: LESS
85428: IFFALSE 85442
// SetLives ( i , 1000 ) ;
85430: LD_VAR 0 1
85434: PPUSH
85435: LD_INT 1000
85437: PPUSH
85438: CALL_OW 234
85442: GO 85412
85444: POP
85445: POP
// until p > 20 ;
85446: LD_VAR 0 3
85450: PUSH
85451: LD_INT 20
85453: GREATER
85454: IFFALSE 85381
// end ;
85456: PPOPN 3
85458: END
// every 0 0$1 trigger StreamModeActive and sTime do
85459: LD_EXP 75
85463: IFFALSE 85471
85465: PUSH
85466: LD_EXP 126
85470: AND
85471: IFFALSE 85506
85473: GO 85475
85475: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
85476: LD_INT 28
85478: PPUSH
85479: LD_OWVAR 2
85483: PPUSH
85484: LD_INT 2
85486: PPUSH
85487: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
85491: LD_INT 30
85493: PPUSH
85494: LD_OWVAR 2
85498: PPUSH
85499: LD_INT 2
85501: PPUSH
85502: CALL_OW 322
// end ;
85506: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
85507: LD_EXP 75
85511: IFFALSE 85519
85513: PUSH
85514: LD_EXP 127
85518: AND
85519: IFFALSE 85640
85521: GO 85523
85523: DISABLE
85524: LD_INT 0
85526: PPUSH
85527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
85528: LD_ADDR_VAR 0 2
85532: PUSH
85533: LD_INT 22
85535: PUSH
85536: LD_OWVAR 2
85540: PUSH
85541: EMPTY
85542: LIST
85543: LIST
85544: PUSH
85545: LD_INT 21
85547: PUSH
85548: LD_INT 1
85550: PUSH
85551: EMPTY
85552: LIST
85553: LIST
85554: PUSH
85555: LD_INT 3
85557: PUSH
85558: LD_INT 23
85560: PUSH
85561: LD_INT 0
85563: PUSH
85564: EMPTY
85565: LIST
85566: LIST
85567: PUSH
85568: EMPTY
85569: LIST
85570: LIST
85571: PUSH
85572: EMPTY
85573: LIST
85574: LIST
85575: LIST
85576: PPUSH
85577: CALL_OW 69
85581: ST_TO_ADDR
// if not tmp then
85582: LD_VAR 0 2
85586: NOT
85587: IFFALSE 85591
// exit ;
85589: GO 85640
// for i in tmp do
85591: LD_ADDR_VAR 0 1
85595: PUSH
85596: LD_VAR 0 2
85600: PUSH
85601: FOR_IN
85602: IFFALSE 85638
// begin if Crawls ( i ) then
85604: LD_VAR 0 1
85608: PPUSH
85609: CALL_OW 318
85613: IFFALSE 85624
// ComWalk ( i ) ;
85615: LD_VAR 0 1
85619: PPUSH
85620: CALL_OW 138
// SetClass ( i , 2 ) ;
85624: LD_VAR 0 1
85628: PPUSH
85629: LD_INT 2
85631: PPUSH
85632: CALL_OW 336
// end ;
85636: GO 85601
85638: POP
85639: POP
// end ;
85640: PPOPN 2
85642: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
85643: LD_EXP 75
85647: IFFALSE 85655
85649: PUSH
85650: LD_EXP 128
85654: AND
85655: IFFALSE 85945
85657: GO 85659
85659: DISABLE
85660: LD_INT 0
85662: PPUSH
85663: PPUSH
85664: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
85665: LD_OWVAR 2
85669: PPUSH
85670: LD_INT 9
85672: PPUSH
85673: LD_INT 1
85675: PPUSH
85676: LD_INT 1
85678: PPUSH
85679: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
85683: LD_INT 9
85685: PPUSH
85686: LD_OWVAR 2
85690: PPUSH
85691: CALL_OW 343
// uc_side := 9 ;
85695: LD_ADDR_OWVAR 20
85699: PUSH
85700: LD_INT 9
85702: ST_TO_ADDR
// uc_nation := 2 ;
85703: LD_ADDR_OWVAR 21
85707: PUSH
85708: LD_INT 2
85710: ST_TO_ADDR
// hc_name := Dark Warrior ;
85711: LD_ADDR_OWVAR 26
85715: PUSH
85716: LD_STRING Dark Warrior
85718: ST_TO_ADDR
// hc_gallery :=  ;
85719: LD_ADDR_OWVAR 33
85723: PUSH
85724: LD_STRING 
85726: ST_TO_ADDR
// hc_noskilllimit := true ;
85727: LD_ADDR_OWVAR 76
85731: PUSH
85732: LD_INT 1
85734: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
85735: LD_ADDR_OWVAR 31
85739: PUSH
85740: LD_INT 30
85742: PUSH
85743: LD_INT 30
85745: PUSH
85746: LD_INT 30
85748: PUSH
85749: LD_INT 30
85751: PUSH
85752: EMPTY
85753: LIST
85754: LIST
85755: LIST
85756: LIST
85757: ST_TO_ADDR
// un := CreateHuman ;
85758: LD_ADDR_VAR 0 3
85762: PUSH
85763: CALL_OW 44
85767: ST_TO_ADDR
// hc_noskilllimit := false ;
85768: LD_ADDR_OWVAR 76
85772: PUSH
85773: LD_INT 0
85775: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
85776: LD_VAR 0 3
85780: PPUSH
85781: LD_INT 1
85783: PPUSH
85784: CALL_OW 51
// ToLua ( playRanger() ) ;
85788: LD_STRING playRanger()
85790: PPUSH
85791: CALL_OW 559
// p := 0 ;
85795: LD_ADDR_VAR 0 2
85799: PUSH
85800: LD_INT 0
85802: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
85803: LD_INT 35
85805: PPUSH
85806: CALL_OW 67
// p := p + 1 ;
85810: LD_ADDR_VAR 0 2
85814: PUSH
85815: LD_VAR 0 2
85819: PUSH
85820: LD_INT 1
85822: PLUS
85823: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
85824: LD_VAR 0 3
85828: PPUSH
85829: CALL_OW 256
85833: PUSH
85834: LD_INT 1000
85836: LESS
85837: IFFALSE 85851
// SetLives ( un , 1000 ) ;
85839: LD_VAR 0 3
85843: PPUSH
85844: LD_INT 1000
85846: PPUSH
85847: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
85851: LD_VAR 0 3
85855: PPUSH
85856: LD_INT 81
85858: PUSH
85859: LD_OWVAR 2
85863: PUSH
85864: EMPTY
85865: LIST
85866: LIST
85867: PUSH
85868: LD_INT 91
85870: PUSH
85871: LD_VAR 0 3
85875: PUSH
85876: LD_INT 30
85878: PUSH
85879: EMPTY
85880: LIST
85881: LIST
85882: LIST
85883: PUSH
85884: EMPTY
85885: LIST
85886: LIST
85887: PPUSH
85888: CALL_OW 69
85892: PPUSH
85893: LD_VAR 0 3
85897: PPUSH
85898: CALL_OW 74
85902: PPUSH
85903: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
85907: LD_VAR 0 2
85911: PUSH
85912: LD_INT 80
85914: GREATER
85915: IFTRUE 85928
85917: PUSH
85918: LD_VAR 0 3
85922: PPUSH
85923: CALL_OW 301
85927: OR
85928: IFFALSE 85803
// if un then
85930: LD_VAR 0 3
85934: IFFALSE 85945
// RemoveUnit ( un ) ;
85936: LD_VAR 0 3
85940: PPUSH
85941: CALL_OW 64
// end ;
85945: PPOPN 3
85947: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
85948: LD_EXP 129
85952: IFFALSE 86068
85954: GO 85956
85956: DISABLE
85957: LD_INT 0
85959: PPUSH
85960: PPUSH
85961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
85962: LD_ADDR_VAR 0 2
85966: PUSH
85967: LD_INT 81
85969: PUSH
85970: LD_OWVAR 2
85974: PUSH
85975: EMPTY
85976: LIST
85977: LIST
85978: PUSH
85979: LD_INT 21
85981: PUSH
85982: LD_INT 1
85984: PUSH
85985: EMPTY
85986: LIST
85987: LIST
85988: PUSH
85989: EMPTY
85990: LIST
85991: LIST
85992: PPUSH
85993: CALL_OW 69
85997: ST_TO_ADDR
// ToLua ( playComputer() ) ;
85998: LD_STRING playComputer()
86000: PPUSH
86001: CALL_OW 559
// if not tmp then
86005: LD_VAR 0 2
86009: NOT
86010: IFFALSE 86014
// exit ;
86012: GO 86068
// for i in tmp do
86014: LD_ADDR_VAR 0 1
86018: PUSH
86019: LD_VAR 0 2
86023: PUSH
86024: FOR_IN
86025: IFFALSE 86066
// for j := 1 to 4 do
86027: LD_ADDR_VAR 0 3
86031: PUSH
86032: DOUBLE
86033: LD_INT 1
86035: DEC
86036: ST_TO_ADDR
86037: LD_INT 4
86039: PUSH
86040: FOR_TO
86041: IFFALSE 86062
// SetSkill ( i , j , 10 ) ;
86043: LD_VAR 0 1
86047: PPUSH
86048: LD_VAR 0 3
86052: PPUSH
86053: LD_INT 10
86055: PPUSH
86056: CALL_OW 237
86060: GO 86040
86062: POP
86063: POP
86064: GO 86024
86066: POP
86067: POP
// end ;
86068: PPOPN 3
86070: END
// every 0 0$1 trigger s30 do var i , tmp ;
86071: LD_EXP 130
86075: IFFALSE 86144
86077: GO 86079
86079: DISABLE
86080: LD_INT 0
86082: PPUSH
86083: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
86084: LD_ADDR_VAR 0 2
86088: PUSH
86089: LD_INT 22
86091: PUSH
86092: LD_OWVAR 2
86096: PUSH
86097: EMPTY
86098: LIST
86099: LIST
86100: PPUSH
86101: CALL_OW 69
86105: ST_TO_ADDR
// if not tmp then
86106: LD_VAR 0 2
86110: NOT
86111: IFFALSE 86115
// exit ;
86113: GO 86144
// for i in tmp do
86115: LD_ADDR_VAR 0 1
86119: PUSH
86120: LD_VAR 0 2
86124: PUSH
86125: FOR_IN
86126: IFFALSE 86142
// SetLives ( i , 300 ) ;
86128: LD_VAR 0 1
86132: PPUSH
86133: LD_INT 300
86135: PPUSH
86136: CALL_OW 234
86140: GO 86125
86142: POP
86143: POP
// end ;
86144: PPOPN 2
86146: END
// every 0 0$1 trigger s60 do var i , tmp ;
86147: LD_EXP 131
86151: IFFALSE 86220
86153: GO 86155
86155: DISABLE
86156: LD_INT 0
86158: PPUSH
86159: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
86160: LD_ADDR_VAR 0 2
86164: PUSH
86165: LD_INT 22
86167: PUSH
86168: LD_OWVAR 2
86172: PUSH
86173: EMPTY
86174: LIST
86175: LIST
86176: PPUSH
86177: CALL_OW 69
86181: ST_TO_ADDR
// if not tmp then
86182: LD_VAR 0 2
86186: NOT
86187: IFFALSE 86191
// exit ;
86189: GO 86220
// for i in tmp do
86191: LD_ADDR_VAR 0 1
86195: PUSH
86196: LD_VAR 0 2
86200: PUSH
86201: FOR_IN
86202: IFFALSE 86218
// SetLives ( i , 600 ) ;
86204: LD_VAR 0 1
86208: PPUSH
86209: LD_INT 600
86211: PPUSH
86212: CALL_OW 234
86216: GO 86201
86218: POP
86219: POP
// end ;
86220: PPOPN 2
86222: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
86223: LD_INT 0
86225: PPUSH
// case cmd of 301 :
86226: LD_VAR 0 1
86230: PUSH
86231: LD_INT 301
86233: DOUBLE
86234: EQUAL
86235: IFTRUE 86239
86237: GO 86271
86239: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
86240: LD_VAR 0 6
86244: PPUSH
86245: LD_VAR 0 7
86249: PPUSH
86250: LD_VAR 0 8
86254: PPUSH
86255: LD_VAR 0 4
86259: PPUSH
86260: LD_VAR 0 5
86264: PPUSH
86265: CALL 87484 0 5
86269: GO 86392
86271: LD_INT 302
86273: DOUBLE
86274: EQUAL
86275: IFTRUE 86279
86277: GO 86316
86279: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
86280: LD_VAR 0 6
86284: PPUSH
86285: LD_VAR 0 7
86289: PPUSH
86290: LD_VAR 0 8
86294: PPUSH
86295: LD_VAR 0 9
86299: PPUSH
86300: LD_VAR 0 4
86304: PPUSH
86305: LD_VAR 0 5
86309: PPUSH
86310: CALL 87575 0 6
86314: GO 86392
86316: LD_INT 303
86318: DOUBLE
86319: EQUAL
86320: IFTRUE 86324
86322: GO 86361
86324: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
86325: LD_VAR 0 6
86329: PPUSH
86330: LD_VAR 0 7
86334: PPUSH
86335: LD_VAR 0 8
86339: PPUSH
86340: LD_VAR 0 9
86344: PPUSH
86345: LD_VAR 0 4
86349: PPUSH
86350: LD_VAR 0 5
86354: PPUSH
86355: CALL 86397 0 6
86359: GO 86392
86361: LD_INT 304
86363: DOUBLE
86364: EQUAL
86365: IFTRUE 86369
86367: GO 86391
86369: POP
// hHackTeleport ( unit , x , y ) ; end ;
86370: LD_VAR 0 2
86374: PPUSH
86375: LD_VAR 0 4
86379: PPUSH
86380: LD_VAR 0 5
86384: PPUSH
86385: CALL 88168 0 3
86389: GO 86392
86391: POP
// end ;
86392: LD_VAR 0 12
86396: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
86397: LD_INT 0
86399: PPUSH
86400: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
86401: LD_VAR 0 1
86405: PUSH
86406: LD_INT 1
86408: LESS
86409: IFTRUE 86421
86411: PUSH
86412: LD_VAR 0 1
86416: PUSH
86417: LD_INT 3
86419: GREATER
86420: OR
86421: IFTRUE 86439
86423: PUSH
86424: LD_VAR 0 5
86428: PPUSH
86429: LD_VAR 0 6
86433: PPUSH
86434: CALL_OW 428
86438: OR
86439: IFFALSE 86443
// exit ;
86441: GO 87171
// uc_side := your_side ;
86443: LD_ADDR_OWVAR 20
86447: PUSH
86448: LD_OWVAR 2
86452: ST_TO_ADDR
// uc_nation := nation ;
86453: LD_ADDR_OWVAR 21
86457: PUSH
86458: LD_VAR 0 1
86462: ST_TO_ADDR
// bc_level = 1 ;
86463: LD_ADDR_OWVAR 43
86467: PUSH
86468: LD_INT 1
86470: ST_TO_ADDR
// case btype of 1 :
86471: LD_VAR 0 2
86475: PUSH
86476: LD_INT 1
86478: DOUBLE
86479: EQUAL
86480: IFTRUE 86484
86482: GO 86495
86484: POP
// bc_type := b_depot ; 2 :
86485: LD_ADDR_OWVAR 42
86489: PUSH
86490: LD_INT 0
86492: ST_TO_ADDR
86493: GO 87115
86495: LD_INT 2
86497: DOUBLE
86498: EQUAL
86499: IFTRUE 86503
86501: GO 86514
86503: POP
// bc_type := b_warehouse ; 3 :
86504: LD_ADDR_OWVAR 42
86508: PUSH
86509: LD_INT 1
86511: ST_TO_ADDR
86512: GO 87115
86514: LD_INT 3
86516: DOUBLE
86517: EQUAL
86518: IFTRUE 86522
86520: GO 86533
86522: POP
// bc_type := b_lab ; 4 .. 9 :
86523: LD_ADDR_OWVAR 42
86527: PUSH
86528: LD_INT 6
86530: ST_TO_ADDR
86531: GO 87115
86533: LD_INT 4
86535: DOUBLE
86536: GREATEREQUAL
86537: IFFALSE 86545
86539: LD_INT 9
86541: DOUBLE
86542: LESSEQUAL
86543: IFTRUE 86547
86545: GO 86607
86547: POP
// begin bc_type := b_lab_half ;
86548: LD_ADDR_OWVAR 42
86552: PUSH
86553: LD_INT 7
86555: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
86556: LD_ADDR_OWVAR 44
86560: PUSH
86561: LD_INT 10
86563: PUSH
86564: LD_INT 11
86566: PUSH
86567: LD_INT 12
86569: PUSH
86570: LD_INT 15
86572: PUSH
86573: LD_INT 14
86575: PUSH
86576: LD_INT 13
86578: PUSH
86579: EMPTY
86580: LIST
86581: LIST
86582: LIST
86583: LIST
86584: LIST
86585: LIST
86586: PUSH
86587: LD_VAR 0 2
86591: PUSH
86592: LD_INT 3
86594: MINUS
86595: ARRAY
86596: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
86597: LD_ADDR_OWVAR 45
86601: PUSH
86602: LD_INT 9
86604: ST_TO_ADDR
// end ; 10 .. 13 :
86605: GO 87115
86607: LD_INT 10
86609: DOUBLE
86610: GREATEREQUAL
86611: IFFALSE 86619
86613: LD_INT 13
86615: DOUBLE
86616: LESSEQUAL
86617: IFTRUE 86621
86619: GO 86698
86621: POP
// begin bc_type := b_lab_full ;
86622: LD_ADDR_OWVAR 42
86626: PUSH
86627: LD_INT 8
86629: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
86630: LD_ADDR_OWVAR 44
86634: PUSH
86635: LD_INT 10
86637: PUSH
86638: LD_INT 12
86640: PUSH
86641: LD_INT 14
86643: PUSH
86644: LD_INT 13
86646: PUSH
86647: EMPTY
86648: LIST
86649: LIST
86650: LIST
86651: LIST
86652: PUSH
86653: LD_VAR 0 2
86657: PUSH
86658: LD_INT 9
86660: MINUS
86661: ARRAY
86662: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
86663: LD_ADDR_OWVAR 45
86667: PUSH
86668: LD_INT 11
86670: PUSH
86671: LD_INT 15
86673: PUSH
86674: LD_INT 12
86676: PUSH
86677: LD_INT 15
86679: PUSH
86680: EMPTY
86681: LIST
86682: LIST
86683: LIST
86684: LIST
86685: PUSH
86686: LD_VAR 0 2
86690: PUSH
86691: LD_INT 9
86693: MINUS
86694: ARRAY
86695: ST_TO_ADDR
// end ; 14 :
86696: GO 87115
86698: LD_INT 14
86700: DOUBLE
86701: EQUAL
86702: IFTRUE 86706
86704: GO 86717
86706: POP
// bc_type := b_workshop ; 15 :
86707: LD_ADDR_OWVAR 42
86711: PUSH
86712: LD_INT 2
86714: ST_TO_ADDR
86715: GO 87115
86717: LD_INT 15
86719: DOUBLE
86720: EQUAL
86721: IFTRUE 86725
86723: GO 86736
86725: POP
// bc_type := b_factory ; 16 :
86726: LD_ADDR_OWVAR 42
86730: PUSH
86731: LD_INT 3
86733: ST_TO_ADDR
86734: GO 87115
86736: LD_INT 16
86738: DOUBLE
86739: EQUAL
86740: IFTRUE 86744
86742: GO 86755
86744: POP
// bc_type := b_ext_gun ; 17 :
86745: LD_ADDR_OWVAR 42
86749: PUSH
86750: LD_INT 17
86752: ST_TO_ADDR
86753: GO 87115
86755: LD_INT 17
86757: DOUBLE
86758: EQUAL
86759: IFTRUE 86763
86761: GO 86791
86763: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
86764: LD_ADDR_OWVAR 42
86768: PUSH
86769: LD_INT 19
86771: PUSH
86772: LD_INT 23
86774: PUSH
86775: LD_INT 19
86777: PUSH
86778: EMPTY
86779: LIST
86780: LIST
86781: LIST
86782: PUSH
86783: LD_VAR 0 1
86787: ARRAY
86788: ST_TO_ADDR
86789: GO 87115
86791: LD_INT 18
86793: DOUBLE
86794: EQUAL
86795: IFTRUE 86799
86797: GO 86810
86799: POP
// bc_type := b_ext_radar ; 19 :
86800: LD_ADDR_OWVAR 42
86804: PUSH
86805: LD_INT 20
86807: ST_TO_ADDR
86808: GO 87115
86810: LD_INT 19
86812: DOUBLE
86813: EQUAL
86814: IFTRUE 86818
86816: GO 86829
86818: POP
// bc_type := b_ext_radio ; 20 :
86819: LD_ADDR_OWVAR 42
86823: PUSH
86824: LD_INT 22
86826: ST_TO_ADDR
86827: GO 87115
86829: LD_INT 20
86831: DOUBLE
86832: EQUAL
86833: IFTRUE 86837
86835: GO 86848
86837: POP
// bc_type := b_ext_siberium ; 21 :
86838: LD_ADDR_OWVAR 42
86842: PUSH
86843: LD_INT 21
86845: ST_TO_ADDR
86846: GO 87115
86848: LD_INT 21
86850: DOUBLE
86851: EQUAL
86852: IFTRUE 86856
86854: GO 86867
86856: POP
// bc_type := b_ext_computer ; 22 :
86857: LD_ADDR_OWVAR 42
86861: PUSH
86862: LD_INT 24
86864: ST_TO_ADDR
86865: GO 87115
86867: LD_INT 22
86869: DOUBLE
86870: EQUAL
86871: IFTRUE 86875
86873: GO 86886
86875: POP
// bc_type := b_ext_track ; 23 :
86876: LD_ADDR_OWVAR 42
86880: PUSH
86881: LD_INT 16
86883: ST_TO_ADDR
86884: GO 87115
86886: LD_INT 23
86888: DOUBLE
86889: EQUAL
86890: IFTRUE 86894
86892: GO 86905
86894: POP
// bc_type := b_ext_laser ; 24 :
86895: LD_ADDR_OWVAR 42
86899: PUSH
86900: LD_INT 25
86902: ST_TO_ADDR
86903: GO 87115
86905: LD_INT 24
86907: DOUBLE
86908: EQUAL
86909: IFTRUE 86913
86911: GO 86924
86913: POP
// bc_type := b_control_tower ; 25 :
86914: LD_ADDR_OWVAR 42
86918: PUSH
86919: LD_INT 36
86921: ST_TO_ADDR
86922: GO 87115
86924: LD_INT 25
86926: DOUBLE
86927: EQUAL
86928: IFTRUE 86932
86930: GO 86943
86932: POP
// bc_type := b_breastwork ; 26 :
86933: LD_ADDR_OWVAR 42
86937: PUSH
86938: LD_INT 31
86940: ST_TO_ADDR
86941: GO 87115
86943: LD_INT 26
86945: DOUBLE
86946: EQUAL
86947: IFTRUE 86951
86949: GO 86962
86951: POP
// bc_type := b_bunker ; 27 :
86952: LD_ADDR_OWVAR 42
86956: PUSH
86957: LD_INT 32
86959: ST_TO_ADDR
86960: GO 87115
86962: LD_INT 27
86964: DOUBLE
86965: EQUAL
86966: IFTRUE 86970
86968: GO 86981
86970: POP
// bc_type := b_turret ; 28 :
86971: LD_ADDR_OWVAR 42
86975: PUSH
86976: LD_INT 33
86978: ST_TO_ADDR
86979: GO 87115
86981: LD_INT 28
86983: DOUBLE
86984: EQUAL
86985: IFTRUE 86989
86987: GO 87000
86989: POP
// bc_type := b_armoury ; 29 :
86990: LD_ADDR_OWVAR 42
86994: PUSH
86995: LD_INT 4
86997: ST_TO_ADDR
86998: GO 87115
87000: LD_INT 29
87002: DOUBLE
87003: EQUAL
87004: IFTRUE 87008
87006: GO 87019
87008: POP
// bc_type := b_barracks ; 30 :
87009: LD_ADDR_OWVAR 42
87013: PUSH
87014: LD_INT 5
87016: ST_TO_ADDR
87017: GO 87115
87019: LD_INT 30
87021: DOUBLE
87022: EQUAL
87023: IFTRUE 87027
87025: GO 87038
87027: POP
// bc_type := b_solar_power ; 31 :
87028: LD_ADDR_OWVAR 42
87032: PUSH
87033: LD_INT 27
87035: ST_TO_ADDR
87036: GO 87115
87038: LD_INT 31
87040: DOUBLE
87041: EQUAL
87042: IFTRUE 87046
87044: GO 87057
87046: POP
// bc_type := b_oil_power ; 32 :
87047: LD_ADDR_OWVAR 42
87051: PUSH
87052: LD_INT 26
87054: ST_TO_ADDR
87055: GO 87115
87057: LD_INT 32
87059: DOUBLE
87060: EQUAL
87061: IFTRUE 87065
87063: GO 87076
87065: POP
// bc_type := b_siberite_power ; 33 :
87066: LD_ADDR_OWVAR 42
87070: PUSH
87071: LD_INT 28
87073: ST_TO_ADDR
87074: GO 87115
87076: LD_INT 33
87078: DOUBLE
87079: EQUAL
87080: IFTRUE 87084
87082: GO 87095
87084: POP
// bc_type := b_oil_mine ; 34 :
87085: LD_ADDR_OWVAR 42
87089: PUSH
87090: LD_INT 29
87092: ST_TO_ADDR
87093: GO 87115
87095: LD_INT 34
87097: DOUBLE
87098: EQUAL
87099: IFTRUE 87103
87101: GO 87114
87103: POP
// bc_type := b_siberite_mine ; end ;
87104: LD_ADDR_OWVAR 42
87108: PUSH
87109: LD_INT 30
87111: ST_TO_ADDR
87112: GO 87115
87114: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
87115: LD_ADDR_VAR 0 8
87119: PUSH
87120: LD_VAR 0 5
87124: PPUSH
87125: LD_VAR 0 6
87129: PPUSH
87130: LD_VAR 0 3
87134: PPUSH
87135: CALL_OW 47
87139: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
87140: LD_OWVAR 42
87144: PUSH
87145: LD_INT 32
87147: PUSH
87148: LD_INT 33
87150: PUSH
87151: EMPTY
87152: LIST
87153: LIST
87154: IN
87155: IFFALSE 87171
// PlaceWeaponTurret ( b , weapon ) ;
87157: LD_VAR 0 8
87161: PPUSH
87162: LD_VAR 0 4
87166: PPUSH
87167: CALL_OW 431
// end ;
87171: LD_VAR 0 7
87175: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
87176: LD_INT 0
87178: PPUSH
87179: PPUSH
87180: PPUSH
87181: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
87182: LD_ADDR_VAR 0 4
87186: PUSH
87187: LD_INT 22
87189: PUSH
87190: LD_OWVAR 2
87194: PUSH
87195: EMPTY
87196: LIST
87197: LIST
87198: PUSH
87199: LD_INT 2
87201: PUSH
87202: LD_INT 30
87204: PUSH
87205: LD_INT 0
87207: PUSH
87208: EMPTY
87209: LIST
87210: LIST
87211: PUSH
87212: LD_INT 30
87214: PUSH
87215: LD_INT 1
87217: PUSH
87218: EMPTY
87219: LIST
87220: LIST
87221: PUSH
87222: EMPTY
87223: LIST
87224: LIST
87225: LIST
87226: PUSH
87227: EMPTY
87228: LIST
87229: LIST
87230: PPUSH
87231: CALL_OW 69
87235: ST_TO_ADDR
// if not tmp then
87236: LD_VAR 0 4
87240: NOT
87241: IFFALSE 87245
// exit ;
87243: GO 87304
// for i in tmp do
87245: LD_ADDR_VAR 0 2
87249: PUSH
87250: LD_VAR 0 4
87254: PUSH
87255: FOR_IN
87256: IFFALSE 87302
// for j = 1 to 3 do
87258: LD_ADDR_VAR 0 3
87262: PUSH
87263: DOUBLE
87264: LD_INT 1
87266: DEC
87267: ST_TO_ADDR
87268: LD_INT 3
87270: PUSH
87271: FOR_TO
87272: IFFALSE 87298
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
87274: LD_VAR 0 2
87278: PPUSH
87279: CALL_OW 274
87283: PPUSH
87284: LD_VAR 0 3
87288: PPUSH
87289: LD_INT 99999
87291: PPUSH
87292: CALL_OW 277
87296: GO 87271
87298: POP
87299: POP
87300: GO 87255
87302: POP
87303: POP
// end ;
87304: LD_VAR 0 1
87308: RET
// export function hHackSetLevel10 ; var i , j ; begin
87309: LD_INT 0
87311: PPUSH
87312: PPUSH
87313: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
87314: LD_ADDR_VAR 0 2
87318: PUSH
87319: LD_INT 21
87321: PUSH
87322: LD_INT 1
87324: PUSH
87325: EMPTY
87326: LIST
87327: LIST
87328: PPUSH
87329: CALL_OW 69
87333: PUSH
87334: FOR_IN
87335: IFFALSE 87387
// if IsSelected ( i ) then
87337: LD_VAR 0 2
87341: PPUSH
87342: CALL_OW 306
87346: IFFALSE 87385
// begin for j := 1 to 4 do
87348: LD_ADDR_VAR 0 3
87352: PUSH
87353: DOUBLE
87354: LD_INT 1
87356: DEC
87357: ST_TO_ADDR
87358: LD_INT 4
87360: PUSH
87361: FOR_TO
87362: IFFALSE 87383
// SetSkill ( i , j , 10 ) ;
87364: LD_VAR 0 2
87368: PPUSH
87369: LD_VAR 0 3
87373: PPUSH
87374: LD_INT 10
87376: PPUSH
87377: CALL_OW 237
87381: GO 87361
87383: POP
87384: POP
// end ;
87385: GO 87334
87387: POP
87388: POP
// end ;
87389: LD_VAR 0 1
87393: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
87394: LD_INT 0
87396: PPUSH
87397: PPUSH
87398: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
87399: LD_ADDR_VAR 0 2
87403: PUSH
87404: LD_INT 22
87406: PUSH
87407: LD_OWVAR 2
87411: PUSH
87412: EMPTY
87413: LIST
87414: LIST
87415: PUSH
87416: LD_INT 21
87418: PUSH
87419: LD_INT 1
87421: PUSH
87422: EMPTY
87423: LIST
87424: LIST
87425: PUSH
87426: EMPTY
87427: LIST
87428: LIST
87429: PPUSH
87430: CALL_OW 69
87434: PUSH
87435: FOR_IN
87436: IFFALSE 87477
// begin for j := 1 to 4 do
87438: LD_ADDR_VAR 0 3
87442: PUSH
87443: DOUBLE
87444: LD_INT 1
87446: DEC
87447: ST_TO_ADDR
87448: LD_INT 4
87450: PUSH
87451: FOR_TO
87452: IFFALSE 87473
// SetSkill ( i , j , 10 ) ;
87454: LD_VAR 0 2
87458: PPUSH
87459: LD_VAR 0 3
87463: PPUSH
87464: LD_INT 10
87466: PPUSH
87467: CALL_OW 237
87471: GO 87451
87473: POP
87474: POP
// end ;
87475: GO 87435
87477: POP
87478: POP
// end ;
87479: LD_VAR 0 1
87483: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
87484: LD_INT 0
87486: PPUSH
// uc_side := your_side ;
87487: LD_ADDR_OWVAR 20
87491: PUSH
87492: LD_OWVAR 2
87496: ST_TO_ADDR
// uc_nation := nation ;
87497: LD_ADDR_OWVAR 21
87501: PUSH
87502: LD_VAR 0 1
87506: ST_TO_ADDR
// InitHc ;
87507: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
87511: LD_INT 0
87513: PPUSH
87514: LD_VAR 0 2
87518: PPUSH
87519: LD_VAR 0 3
87523: PPUSH
87524: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
87528: LD_VAR 0 4
87532: PPUSH
87533: LD_VAR 0 5
87537: PPUSH
87538: CALL_OW 428
87542: PUSH
87543: LD_INT 0
87545: EQUAL
87546: IFFALSE 87570
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
87548: CALL_OW 44
87552: PPUSH
87553: LD_VAR 0 4
87557: PPUSH
87558: LD_VAR 0 5
87562: PPUSH
87563: LD_INT 1
87565: PPUSH
87566: CALL_OW 48
// end ;
87570: LD_VAR 0 6
87574: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
87575: LD_INT 0
87577: PPUSH
87578: PPUSH
// uc_side := your_side ;
87579: LD_ADDR_OWVAR 20
87583: PUSH
87584: LD_OWVAR 2
87588: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
87589: LD_VAR 0 1
87593: PUSH
87594: LD_INT 1
87596: PUSH
87597: LD_INT 2
87599: PUSH
87600: LD_INT 3
87602: PUSH
87603: LD_INT 4
87605: PUSH
87606: LD_INT 5
87608: PUSH
87609: EMPTY
87610: LIST
87611: LIST
87612: LIST
87613: LIST
87614: LIST
87615: IN
87616: IFFALSE 87628
// uc_nation := nation_american else
87618: LD_ADDR_OWVAR 21
87622: PUSH
87623: LD_INT 1
87625: ST_TO_ADDR
87626: GO 87671
// if chassis in [ 11 , 12 , 13 , 14 ] then
87628: LD_VAR 0 1
87632: PUSH
87633: LD_INT 11
87635: PUSH
87636: LD_INT 12
87638: PUSH
87639: LD_INT 13
87641: PUSH
87642: LD_INT 14
87644: PUSH
87645: EMPTY
87646: LIST
87647: LIST
87648: LIST
87649: LIST
87650: IN
87651: IFFALSE 87663
// uc_nation := nation_arabian else
87653: LD_ADDR_OWVAR 21
87657: PUSH
87658: LD_INT 2
87660: ST_TO_ADDR
87661: GO 87671
// uc_nation := nation_russian ;
87663: LD_ADDR_OWVAR 21
87667: PUSH
87668: LD_INT 3
87670: ST_TO_ADDR
// vc_chassis := chassis ;
87671: LD_ADDR_OWVAR 37
87675: PUSH
87676: LD_VAR 0 1
87680: ST_TO_ADDR
// vc_engine := engine ;
87681: LD_ADDR_OWVAR 39
87685: PUSH
87686: LD_VAR 0 2
87690: ST_TO_ADDR
// vc_control := control ;
87691: LD_ADDR_OWVAR 38
87695: PUSH
87696: LD_VAR 0 3
87700: ST_TO_ADDR
// vc_weapon := weapon ;
87701: LD_ADDR_OWVAR 40
87705: PUSH
87706: LD_VAR 0 4
87710: ST_TO_ADDR
// un := CreateVehicle ;
87711: LD_ADDR_VAR 0 8
87715: PUSH
87716: CALL_OW 45
87720: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
87721: LD_VAR 0 8
87725: PPUSH
87726: LD_INT 0
87728: PPUSH
87729: LD_INT 5
87731: PPUSH
87732: CALL_OW 12
87736: PPUSH
87737: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
87741: LD_VAR 0 8
87745: PPUSH
87746: LD_VAR 0 5
87750: PPUSH
87751: LD_VAR 0 6
87755: PPUSH
87756: LD_INT 1
87758: PPUSH
87759: CALL_OW 48
// end ;
87763: LD_VAR 0 7
87767: RET
// export hInvincible ; every 1 do
87768: GO 87770
87770: DISABLE
// hInvincible := [ ] ;
87771: LD_ADDR_EXP 132
87775: PUSH
87776: EMPTY
87777: ST_TO_ADDR
87778: END
// every 10 do var i ;
87779: GO 87781
87781: DISABLE
87782: LD_INT 0
87784: PPUSH
// begin enable ;
87785: ENABLE
// if not hInvincible then
87786: LD_EXP 132
87790: NOT
87791: IFFALSE 87795
// exit ;
87793: GO 87839
// for i in hInvincible do
87795: LD_ADDR_VAR 0 1
87799: PUSH
87800: LD_EXP 132
87804: PUSH
87805: FOR_IN
87806: IFFALSE 87837
// if GetLives ( i ) < 1000 then
87808: LD_VAR 0 1
87812: PPUSH
87813: CALL_OW 256
87817: PUSH
87818: LD_INT 1000
87820: LESS
87821: IFFALSE 87835
// SetLives ( i , 1000 ) ;
87823: LD_VAR 0 1
87827: PPUSH
87828: LD_INT 1000
87830: PPUSH
87831: CALL_OW 234
87835: GO 87805
87837: POP
87838: POP
// end ;
87839: PPOPN 1
87841: END
// export function hHackInvincible ; var i ; begin
87842: LD_INT 0
87844: PPUSH
87845: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
87846: LD_ADDR_VAR 0 2
87850: PUSH
87851: LD_INT 2
87853: PUSH
87854: LD_INT 21
87856: PUSH
87857: LD_INT 1
87859: PUSH
87860: EMPTY
87861: LIST
87862: LIST
87863: PUSH
87864: LD_INT 21
87866: PUSH
87867: LD_INT 2
87869: PUSH
87870: EMPTY
87871: LIST
87872: LIST
87873: PUSH
87874: EMPTY
87875: LIST
87876: LIST
87877: LIST
87878: PPUSH
87879: CALL_OW 69
87883: PUSH
87884: FOR_IN
87885: IFFALSE 87946
// if IsSelected ( i ) then
87887: LD_VAR 0 2
87891: PPUSH
87892: CALL_OW 306
87896: IFFALSE 87944
// begin if i in hInvincible then
87898: LD_VAR 0 2
87902: PUSH
87903: LD_EXP 132
87907: IN
87908: IFFALSE 87928
// hInvincible := hInvincible diff i else
87910: LD_ADDR_EXP 132
87914: PUSH
87915: LD_EXP 132
87919: PUSH
87920: LD_VAR 0 2
87924: DIFF
87925: ST_TO_ADDR
87926: GO 87944
// hInvincible := hInvincible union i ;
87928: LD_ADDR_EXP 132
87932: PUSH
87933: LD_EXP 132
87937: PUSH
87938: LD_VAR 0 2
87942: UNION
87943: ST_TO_ADDR
// end ;
87944: GO 87884
87946: POP
87947: POP
// end ;
87948: LD_VAR 0 1
87952: RET
// export function hHackInvisible ; var i , j ; begin
87953: LD_INT 0
87955: PPUSH
87956: PPUSH
87957: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
87958: LD_ADDR_VAR 0 2
87962: PUSH
87963: LD_INT 21
87965: PUSH
87966: LD_INT 1
87968: PUSH
87969: EMPTY
87970: LIST
87971: LIST
87972: PPUSH
87973: CALL_OW 69
87977: PUSH
87978: FOR_IN
87979: IFFALSE 88003
// if IsSelected ( i ) then
87981: LD_VAR 0 2
87985: PPUSH
87986: CALL_OW 306
87990: IFFALSE 88001
// ComForceInvisible ( i ) ;
87992: LD_VAR 0 2
87996: PPUSH
87997: CALL_OW 496
88001: GO 87978
88003: POP
88004: POP
// end ;
88005: LD_VAR 0 1
88009: RET
// export function hHackChangeYourSide ; begin
88010: LD_INT 0
88012: PPUSH
// if your_side = 8 then
88013: LD_OWVAR 2
88017: PUSH
88018: LD_INT 8
88020: EQUAL
88021: IFFALSE 88033
// your_side := 0 else
88023: LD_ADDR_OWVAR 2
88027: PUSH
88028: LD_INT 0
88030: ST_TO_ADDR
88031: GO 88047
// your_side := your_side + 1 ;
88033: LD_ADDR_OWVAR 2
88037: PUSH
88038: LD_OWVAR 2
88042: PUSH
88043: LD_INT 1
88045: PLUS
88046: ST_TO_ADDR
// end ;
88047: LD_VAR 0 1
88051: RET
// export function hHackChangeUnitSide ; var i , j ; begin
88052: LD_INT 0
88054: PPUSH
88055: PPUSH
88056: PPUSH
// for i in all_units do
88057: LD_ADDR_VAR 0 2
88061: PUSH
88062: LD_OWVAR 3
88066: PUSH
88067: FOR_IN
88068: IFFALSE 88146
// if IsSelected ( i ) then
88070: LD_VAR 0 2
88074: PPUSH
88075: CALL_OW 306
88079: IFFALSE 88144
// begin j := GetSide ( i ) ;
88081: LD_ADDR_VAR 0 3
88085: PUSH
88086: LD_VAR 0 2
88090: PPUSH
88091: CALL_OW 255
88095: ST_TO_ADDR
// if j = 8 then
88096: LD_VAR 0 3
88100: PUSH
88101: LD_INT 8
88103: EQUAL
88104: IFFALSE 88116
// j := 0 else
88106: LD_ADDR_VAR 0 3
88110: PUSH
88111: LD_INT 0
88113: ST_TO_ADDR
88114: GO 88130
// j := j + 1 ;
88116: LD_ADDR_VAR 0 3
88120: PUSH
88121: LD_VAR 0 3
88125: PUSH
88126: LD_INT 1
88128: PLUS
88129: ST_TO_ADDR
// SetSide ( i , j ) ;
88130: LD_VAR 0 2
88134: PPUSH
88135: LD_VAR 0 3
88139: PPUSH
88140: CALL_OW 235
// end ;
88144: GO 88067
88146: POP
88147: POP
// end ;
88148: LD_VAR 0 1
88152: RET
// export function hHackFog ; begin
88153: LD_INT 0
88155: PPUSH
// FogOff ( true ) ;
88156: LD_INT 1
88158: PPUSH
88159: CALL_OW 344
// end ;
88163: LD_VAR 0 1
88167: RET
// export function hHackTeleport ( unit , x , y ) ; begin
88168: LD_INT 0
88170: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
88171: LD_VAR 0 1
88175: PPUSH
88176: LD_VAR 0 2
88180: PPUSH
88181: LD_VAR 0 3
88185: PPUSH
88186: LD_INT 1
88188: PPUSH
88189: LD_INT 1
88191: PPUSH
88192: CALL_OW 483
// CenterOnXY ( x , y ) ;
88196: LD_VAR 0 2
88200: PPUSH
88201: LD_VAR 0 3
88205: PPUSH
88206: CALL_OW 84
// end ;
88210: LD_VAR 0 4
88214: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
88215: LD_INT 0
88217: PPUSH
88218: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
88219: LD_VAR 0 1
88223: NOT
88224: IFTRUE 88243
88226: PUSH
88227: LD_VAR 0 2
88231: PPUSH
88232: LD_VAR 0 3
88236: PPUSH
88237: CALL_OW 488
88241: NOT
88242: OR
88243: IFTRUE 88278
88245: PUSH
88246: LD_VAR 0 1
88250: PPUSH
88251: CALL_OW 266
88255: PUSH
88256: LD_INT 3
88258: NONEQUAL
88259: IFFALSE 88277
88261: PUSH
88262: LD_VAR 0 1
88266: PPUSH
88267: CALL_OW 247
88271: PUSH
88272: LD_INT 1
88274: EQUAL
88275: NOT
88276: AND
88277: OR
88278: IFFALSE 88282
// exit ;
88280: GO 88564
// if GetType ( factory ) = unit_human then
88282: LD_VAR 0 1
88286: PPUSH
88287: CALL_OW 247
88291: PUSH
88292: LD_INT 1
88294: EQUAL
88295: IFFALSE 88312
// factory := IsInUnit ( factory ) ;
88297: LD_ADDR_VAR 0 1
88301: PUSH
88302: LD_VAR 0 1
88306: PPUSH
88307: CALL_OW 310
88311: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
88312: LD_VAR 0 1
88316: PPUSH
88317: CALL_OW 266
88321: PUSH
88322: LD_INT 3
88324: NONEQUAL
88325: IFFALSE 88329
// exit ;
88327: GO 88564
// for i := 1 to Count ( factoryWaypoints ) do
88329: LD_ADDR_VAR 0 5
88333: PUSH
88334: DOUBLE
88335: LD_INT 1
88337: DEC
88338: ST_TO_ADDR
88339: LD_EXP 133
88343: PPUSH
88344: CALL 32305 0 1
88348: PUSH
88349: FOR_TO
88350: IFFALSE 88512
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
88352: LD_VAR 0 2
88356: PPUSH
88357: LD_VAR 0 3
88361: PPUSH
88362: CALL_OW 428
88366: PUSH
88367: LD_EXP 133
88371: PUSH
88372: LD_VAR 0 5
88376: ARRAY
88377: PUSH
88378: LD_INT 2
88380: ARRAY
88381: EQUAL
88382: IFFALSE 88414
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88384: LD_ADDR_EXP 133
88388: PUSH
88389: LD_EXP 133
88393: PPUSH
88394: LD_VAR 0 5
88398: PPUSH
88399: CALL_OW 3
88403: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88404: CALL 88569 0 0
// exit ;
88408: POP
88409: POP
88410: GO 88564
// end else
88412: GO 88510
// if factory = factoryWaypoints [ i ] [ 2 ] then
88414: LD_VAR 0 1
88418: PUSH
88419: LD_EXP 133
88423: PUSH
88424: LD_VAR 0 5
88428: ARRAY
88429: PUSH
88430: LD_INT 2
88432: ARRAY
88433: EQUAL
88434: IFFALSE 88510
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88436: LD_ADDR_EXP 133
88440: PUSH
88441: LD_EXP 133
88445: PPUSH
88446: LD_VAR 0 5
88450: PPUSH
88451: CALL_OW 3
88455: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88456: LD_ADDR_EXP 133
88460: PUSH
88461: LD_EXP 133
88465: PPUSH
88466: LD_VAR 0 1
88470: PPUSH
88471: CALL_OW 255
88475: PUSH
88476: LD_VAR 0 1
88480: PUSH
88481: LD_VAR 0 2
88485: PUSH
88486: LD_VAR 0 3
88490: PUSH
88491: EMPTY
88492: LIST
88493: LIST
88494: LIST
88495: LIST
88496: PPUSH
88497: CALL 68237 0 2
88501: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88502: CALL 88569 0 0
// exit ;
88506: POP
88507: POP
88508: GO 88564
// end ; end ;
88510: GO 88349
88512: POP
88513: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88514: LD_ADDR_EXP 133
88518: PUSH
88519: LD_EXP 133
88523: PPUSH
88524: LD_VAR 0 1
88528: PPUSH
88529: CALL_OW 255
88533: PUSH
88534: LD_VAR 0 1
88538: PUSH
88539: LD_VAR 0 2
88543: PUSH
88544: LD_VAR 0 3
88548: PUSH
88549: EMPTY
88550: LIST
88551: LIST
88552: LIST
88553: LIST
88554: PPUSH
88555: CALL 68237 0 2
88559: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88560: CALL 88569 0 0
// end ;
88564: LD_VAR 0 4
88568: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
88569: LD_INT 0
88571: PPUSH
88572: PPUSH
88573: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
88574: LD_STRING resetFactoryWaypoint();
88576: PPUSH
88577: CALL_OW 559
// if factoryWaypoints then
88581: LD_EXP 133
88585: IFFALSE 88706
// begin list := factoryWaypoints ;
88587: LD_ADDR_VAR 0 3
88591: PUSH
88592: LD_EXP 133
88596: ST_TO_ADDR
// for i := 1 to list do
88597: LD_ADDR_VAR 0 2
88601: PUSH
88602: DOUBLE
88603: LD_INT 1
88605: DEC
88606: ST_TO_ADDR
88607: LD_VAR 0 3
88611: PUSH
88612: FOR_TO
88613: IFFALSE 88704
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
88615: LD_STRING setFactoryWaypointXY(
88617: PUSH
88618: LD_VAR 0 3
88622: PUSH
88623: LD_VAR 0 2
88627: ARRAY
88628: PUSH
88629: LD_INT 1
88631: ARRAY
88632: STR
88633: PUSH
88634: LD_STRING ,
88636: STR
88637: PUSH
88638: LD_VAR 0 3
88642: PUSH
88643: LD_VAR 0 2
88647: ARRAY
88648: PUSH
88649: LD_INT 2
88651: ARRAY
88652: STR
88653: PUSH
88654: LD_STRING ,
88656: STR
88657: PUSH
88658: LD_VAR 0 3
88662: PUSH
88663: LD_VAR 0 2
88667: ARRAY
88668: PUSH
88669: LD_INT 3
88671: ARRAY
88672: STR
88673: PUSH
88674: LD_STRING ,
88676: STR
88677: PUSH
88678: LD_VAR 0 3
88682: PUSH
88683: LD_VAR 0 2
88687: ARRAY
88688: PUSH
88689: LD_INT 4
88691: ARRAY
88692: STR
88693: PUSH
88694: LD_STRING )
88696: STR
88697: PPUSH
88698: CALL_OW 559
88702: GO 88612
88704: POP
88705: POP
// end ; end ;
88706: LD_VAR 0 1
88710: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
88711: LD_INT 0
88713: PPUSH
// if HexInfo ( x , y ) = warehouse then
88714: LD_VAR 0 2
88718: PPUSH
88719: LD_VAR 0 3
88723: PPUSH
88724: CALL_OW 428
88728: PUSH
88729: LD_VAR 0 1
88733: EQUAL
88734: IFFALSE 88761
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
88736: LD_ADDR_EXP 135
88740: PUSH
88741: LD_EXP 135
88745: PPUSH
88746: LD_VAR 0 1
88750: PPUSH
88751: LD_INT 0
88753: PPUSH
88754: CALL_OW 1
88758: ST_TO_ADDR
88759: GO 88812
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
88761: LD_ADDR_EXP 135
88765: PUSH
88766: LD_EXP 135
88770: PPUSH
88771: LD_VAR 0 1
88775: PPUSH
88776: LD_VAR 0 1
88780: PPUSH
88781: CALL_OW 255
88785: PUSH
88786: LD_VAR 0 1
88790: PUSH
88791: LD_VAR 0 2
88795: PUSH
88796: LD_VAR 0 3
88800: PUSH
88801: EMPTY
88802: LIST
88803: LIST
88804: LIST
88805: LIST
88806: PPUSH
88807: CALL_OW 1
88811: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
88812: CALL 88821 0 0
// end ;
88816: LD_VAR 0 4
88820: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
88821: LD_INT 0
88823: PPUSH
88824: PPUSH
88825: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
88826: LD_STRING resetWarehouseGatheringPoints();
88828: PPUSH
88829: CALL_OW 559
// if warehouseGatheringPoints then
88833: LD_EXP 135
88837: IFFALSE 88963
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
88839: LD_ADDR_VAR 0 3
88843: PUSH
88844: LD_EXP 135
88848: PPUSH
88849: CALL 72171 0 1
88853: ST_TO_ADDR
// for i := 1 to list do
88854: LD_ADDR_VAR 0 2
88858: PUSH
88859: DOUBLE
88860: LD_INT 1
88862: DEC
88863: ST_TO_ADDR
88864: LD_VAR 0 3
88868: PUSH
88869: FOR_TO
88870: IFFALSE 88961
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
88872: LD_STRING setWarehouseGatheringPointXY(
88874: PUSH
88875: LD_VAR 0 3
88879: PUSH
88880: LD_VAR 0 2
88884: ARRAY
88885: PUSH
88886: LD_INT 1
88888: ARRAY
88889: STR
88890: PUSH
88891: LD_STRING ,
88893: STR
88894: PUSH
88895: LD_VAR 0 3
88899: PUSH
88900: LD_VAR 0 2
88904: ARRAY
88905: PUSH
88906: LD_INT 2
88908: ARRAY
88909: STR
88910: PUSH
88911: LD_STRING ,
88913: STR
88914: PUSH
88915: LD_VAR 0 3
88919: PUSH
88920: LD_VAR 0 2
88924: ARRAY
88925: PUSH
88926: LD_INT 3
88928: ARRAY
88929: STR
88930: PUSH
88931: LD_STRING ,
88933: STR
88934: PUSH
88935: LD_VAR 0 3
88939: PUSH
88940: LD_VAR 0 2
88944: ARRAY
88945: PUSH
88946: LD_INT 4
88948: ARRAY
88949: STR
88950: PUSH
88951: LD_STRING )
88953: STR
88954: PPUSH
88955: CALL_OW 559
88959: GO 88869
88961: POP
88962: POP
// end ; end ;
88963: LD_VAR 0 1
88967: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
88968: LD_EXP 135
88972: IFFALSE 89667
88974: GO 88976
88976: DISABLE
88977: LD_INT 0
88979: PPUSH
88980: PPUSH
88981: PPUSH
88982: PPUSH
88983: PPUSH
88984: PPUSH
88985: PPUSH
88986: PPUSH
88987: PPUSH
// begin enable ;
88988: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
88989: LD_ADDR_VAR 0 3
88993: PUSH
88994: LD_EXP 135
88998: PPUSH
88999: CALL 72171 0 1
89003: ST_TO_ADDR
// if not list then
89004: LD_VAR 0 3
89008: NOT
89009: IFFALSE 89013
// exit ;
89011: GO 89667
// for i := 1 to list do
89013: LD_ADDR_VAR 0 1
89017: PUSH
89018: DOUBLE
89019: LD_INT 1
89021: DEC
89022: ST_TO_ADDR
89023: LD_VAR 0 3
89027: PUSH
89028: FOR_TO
89029: IFFALSE 89665
// begin depot := list [ i ] [ 2 ] ;
89031: LD_ADDR_VAR 0 8
89035: PUSH
89036: LD_VAR 0 3
89040: PUSH
89041: LD_VAR 0 1
89045: ARRAY
89046: PUSH
89047: LD_INT 2
89049: ARRAY
89050: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
89051: LD_ADDR_VAR 0 5
89055: PUSH
89056: LD_VAR 0 3
89060: PUSH
89061: LD_VAR 0 1
89065: ARRAY
89066: PUSH
89067: LD_INT 1
89069: ARRAY
89070: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
89071: LD_VAR 0 8
89075: PPUSH
89076: CALL_OW 301
89080: IFTRUE 89099
89082: PUSH
89083: LD_VAR 0 5
89087: PUSH
89088: LD_VAR 0 8
89092: PPUSH
89093: CALL_OW 255
89097: NONEQUAL
89098: OR
89099: IFFALSE 89128
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
89101: LD_ADDR_EXP 135
89105: PUSH
89106: LD_EXP 135
89110: PPUSH
89111: LD_VAR 0 8
89115: PPUSH
89116: LD_INT 0
89118: PPUSH
89119: CALL_OW 1
89123: ST_TO_ADDR
// exit ;
89124: POP
89125: POP
89126: GO 89667
// end ; x := list [ i ] [ 3 ] ;
89128: LD_ADDR_VAR 0 6
89132: PUSH
89133: LD_VAR 0 3
89137: PUSH
89138: LD_VAR 0 1
89142: ARRAY
89143: PUSH
89144: LD_INT 3
89146: ARRAY
89147: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
89148: LD_ADDR_VAR 0 7
89152: PUSH
89153: LD_VAR 0 3
89157: PUSH
89158: LD_VAR 0 1
89162: ARRAY
89163: PUSH
89164: LD_INT 4
89166: ARRAY
89167: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
89168: LD_ADDR_VAR 0 9
89172: PUSH
89173: LD_VAR 0 6
89177: PPUSH
89178: LD_VAR 0 7
89182: PPUSH
89183: LD_INT 16
89185: PPUSH
89186: CALL 70745 0 3
89190: ST_TO_ADDR
// if not cratesNearbyPoint then
89191: LD_VAR 0 9
89195: NOT
89196: IFFALSE 89202
// exit ;
89198: POP
89199: POP
89200: GO 89667
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
89202: LD_ADDR_VAR 0 4
89206: PUSH
89207: LD_INT 22
89209: PUSH
89210: LD_VAR 0 5
89214: PUSH
89215: EMPTY
89216: LIST
89217: LIST
89218: PUSH
89219: LD_INT 3
89221: PUSH
89222: LD_INT 60
89224: PUSH
89225: EMPTY
89226: LIST
89227: PUSH
89228: EMPTY
89229: LIST
89230: LIST
89231: PUSH
89232: LD_INT 91
89234: PUSH
89235: LD_VAR 0 8
89239: PUSH
89240: LD_INT 6
89242: PUSH
89243: EMPTY
89244: LIST
89245: LIST
89246: LIST
89247: PUSH
89248: LD_INT 2
89250: PUSH
89251: LD_INT 25
89253: PUSH
89254: LD_INT 2
89256: PUSH
89257: EMPTY
89258: LIST
89259: LIST
89260: PUSH
89261: LD_INT 25
89263: PUSH
89264: LD_INT 16
89266: PUSH
89267: EMPTY
89268: LIST
89269: LIST
89270: PUSH
89271: EMPTY
89272: LIST
89273: LIST
89274: LIST
89275: PUSH
89276: EMPTY
89277: LIST
89278: LIST
89279: LIST
89280: LIST
89281: PPUSH
89282: CALL_OW 69
89286: PUSH
89287: LD_VAR 0 8
89291: PPUSH
89292: CALL_OW 313
89296: PPUSH
89297: LD_INT 3
89299: PUSH
89300: LD_INT 60
89302: PUSH
89303: EMPTY
89304: LIST
89305: PUSH
89306: EMPTY
89307: LIST
89308: LIST
89309: PUSH
89310: LD_INT 2
89312: PUSH
89313: LD_INT 25
89315: PUSH
89316: LD_INT 2
89318: PUSH
89319: EMPTY
89320: LIST
89321: LIST
89322: PUSH
89323: LD_INT 25
89325: PUSH
89326: LD_INT 16
89328: PUSH
89329: EMPTY
89330: LIST
89331: LIST
89332: PUSH
89333: EMPTY
89334: LIST
89335: LIST
89336: LIST
89337: PUSH
89338: EMPTY
89339: LIST
89340: LIST
89341: PPUSH
89342: CALL_OW 72
89346: UNION
89347: ST_TO_ADDR
// if tmp then
89348: LD_VAR 0 4
89352: IFFALSE 89432
// begin tmp := ShrinkArray ( tmp , 3 ) ;
89354: LD_ADDR_VAR 0 4
89358: PUSH
89359: LD_VAR 0 4
89363: PPUSH
89364: LD_INT 3
89366: PPUSH
89367: CALL 68552 0 2
89371: ST_TO_ADDR
// for j in tmp do
89372: LD_ADDR_VAR 0 2
89376: PUSH
89377: LD_VAR 0 4
89381: PUSH
89382: FOR_IN
89383: IFFALSE 89426
// begin if IsInUnit ( j ) then
89385: LD_VAR 0 2
89389: PPUSH
89390: CALL_OW 310
89394: IFFALSE 89405
// ComExit ( j ) ;
89396: LD_VAR 0 2
89400: PPUSH
89401: CALL 68635 0 1
// AddComCollect ( j , x , y ) ;
89405: LD_VAR 0 2
89409: PPUSH
89410: LD_VAR 0 6
89414: PPUSH
89415: LD_VAR 0 7
89419: PPUSH
89420: CALL_OW 177
// end ;
89424: GO 89382
89426: POP
89427: POP
// exit ;
89428: POP
89429: POP
89430: GO 89667
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
89432: LD_ADDR_VAR 0 4
89436: PUSH
89437: LD_INT 22
89439: PUSH
89440: LD_VAR 0 5
89444: PUSH
89445: EMPTY
89446: LIST
89447: LIST
89448: PUSH
89449: LD_INT 91
89451: PUSH
89452: LD_VAR 0 8
89456: PUSH
89457: LD_INT 8
89459: PUSH
89460: EMPTY
89461: LIST
89462: LIST
89463: LIST
89464: PUSH
89465: LD_INT 2
89467: PUSH
89468: LD_INT 34
89470: PUSH
89471: LD_INT 12
89473: PUSH
89474: EMPTY
89475: LIST
89476: LIST
89477: PUSH
89478: LD_INT 34
89480: PUSH
89481: LD_INT 51
89483: PUSH
89484: EMPTY
89485: LIST
89486: LIST
89487: PUSH
89488: LD_INT 34
89490: PUSH
89491: LD_INT 32
89493: PUSH
89494: EMPTY
89495: LIST
89496: LIST
89497: PUSH
89498: LD_INT 34
89500: PUSH
89501: LD_INT 89
89503: PUSH
89504: EMPTY
89505: LIST
89506: LIST
89507: PUSH
89508: EMPTY
89509: LIST
89510: LIST
89511: LIST
89512: LIST
89513: LIST
89514: PUSH
89515: EMPTY
89516: LIST
89517: LIST
89518: LIST
89519: PPUSH
89520: CALL_OW 69
89524: ST_TO_ADDR
// if tmp then
89525: LD_VAR 0 4
89529: IFFALSE 89663
// begin for j in tmp do
89531: LD_ADDR_VAR 0 2
89535: PUSH
89536: LD_VAR 0 4
89540: PUSH
89541: FOR_IN
89542: IFFALSE 89661
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
89544: LD_VAR 0 2
89548: PPUSH
89549: CALL_OW 262
89553: PUSH
89554: LD_INT 3
89556: EQUAL
89557: IFTRUE 89574
89559: PUSH
89560: LD_VAR 0 2
89564: PPUSH
89565: CALL_OW 261
89569: PUSH
89570: LD_INT 20
89572: GREATER
89573: OR
89574: IFFALSE 89588
89576: PUSH
89577: LD_VAR 0 2
89581: PPUSH
89582: CALL_OW 314
89586: NOT
89587: AND
89588: IFFALSE 89618
89590: PUSH
89591: LD_VAR 0 2
89595: PPUSH
89596: CALL_OW 263
89600: PUSH
89601: LD_INT 1
89603: NONEQUAL
89604: IFTRUE 89617
89606: PUSH
89607: LD_VAR 0 2
89611: PPUSH
89612: CALL_OW 311
89616: OR
89617: AND
89618: IFFALSE 89659
// begin ComCollect ( j , x , y ) ;
89620: LD_VAR 0 2
89624: PPUSH
89625: LD_VAR 0 6
89629: PPUSH
89630: LD_VAR 0 7
89634: PPUSH
89635: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
89639: LD_VAR 0 2
89643: PPUSH
89644: LD_VAR 0 8
89648: PPUSH
89649: CALL_OW 172
// exit ;
89653: POP
89654: POP
89655: POP
89656: POP
89657: GO 89667
// end ;
89659: GO 89541
89661: POP
89662: POP
// end ; end ;
89663: GO 89028
89665: POP
89666: POP
// end ; end_of_file
89667: PPOPN 9
89669: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
89670: LD_VAR 0 1
89674: PUSH
89675: LD_INT 200
89677: DOUBLE
89678: GREATEREQUAL
89679: IFFALSE 89687
89681: LD_INT 299
89683: DOUBLE
89684: LESSEQUAL
89685: IFTRUE 89689
89687: GO 89721
89689: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
89690: LD_VAR 0 1
89694: PPUSH
89695: LD_VAR 0 2
89699: PPUSH
89700: LD_VAR 0 3
89704: PPUSH
89705: LD_VAR 0 4
89709: PPUSH
89710: LD_VAR 0 5
89714: PPUSH
89715: CALL 90502 0 5
89719: GO 89798
89721: LD_INT 300
89723: DOUBLE
89724: GREATEREQUAL
89725: IFFALSE 89733
89727: LD_INT 399
89729: DOUBLE
89730: LESSEQUAL
89731: IFTRUE 89735
89733: GO 89797
89735: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
89736: LD_VAR 0 1
89740: PPUSH
89741: LD_VAR 0 2
89745: PPUSH
89746: LD_VAR 0 3
89750: PPUSH
89751: LD_VAR 0 4
89755: PPUSH
89756: LD_VAR 0 5
89760: PPUSH
89761: LD_VAR 0 6
89765: PPUSH
89766: LD_VAR 0 7
89770: PPUSH
89771: LD_VAR 0 8
89775: PPUSH
89776: LD_VAR 0 9
89780: PPUSH
89781: LD_VAR 0 10
89785: PPUSH
89786: LD_VAR 0 11
89790: PPUSH
89791: CALL 86223 0 11
89795: GO 89798
89797: POP
// end ;
89798: PPOPN 11
89800: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
89801: LD_VAR 0 1
89805: PPUSH
89806: LD_VAR 0 2
89810: PPUSH
89811: LD_VAR 0 3
89815: PPUSH
89816: LD_VAR 0 4
89820: PPUSH
89821: LD_VAR 0 5
89825: PPUSH
89826: CALL 89883 0 5
// end ; end_of_file
89830: PPOPN 5
89832: END
// export function SOS_UnitDestroyed ( un ) ; begin
89833: LD_INT 0
89835: PPUSH
// ComRadiation ( un ) ;
89836: LD_VAR 0 1
89840: PPUSH
89841: CALL 90922 0 1
// end ;
89845: LD_VAR 0 2
89849: RET
// export function SOS_UnitKamikazed ( un ) ; begin
89850: LD_INT 0
89852: PPUSH
// ComRadiation ( un ) ;
89853: LD_VAR 0 1
89857: PPUSH
89858: CALL 90922 0 1
// end ;
89862: LD_VAR 0 2
89866: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
89867: LD_INT 0
89869: PPUSH
// end ;
89870: LD_VAR 0 4
89874: RET
// export function SOS_Command ( cmd ) ; begin
89875: LD_INT 0
89877: PPUSH
// end ;
89878: LD_VAR 0 2
89882: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
89883: LD_INT 0
89885: PPUSH
// end ;
89886: LD_VAR 0 6
89890: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
89891: LD_INT 0
89893: PPUSH
89894: PPUSH
89895: PPUSH
89896: PPUSH
// if not vehicle or not factory then
89897: LD_VAR 0 1
89901: NOT
89902: IFTRUE 89911
89904: PUSH
89905: LD_VAR 0 2
89909: NOT
89910: OR
89911: IFFALSE 89915
// exit ;
89913: GO 90497
// if not factoryWaypoints then
89915: LD_EXP 133
89919: NOT
89920: IFFALSE 89924
// exit ;
89922: GO 90497
// for i := 1 to Count ( factoryWaypoints ) do
89924: LD_ADDR_VAR 0 4
89928: PUSH
89929: DOUBLE
89930: LD_INT 1
89932: DEC
89933: ST_TO_ADDR
89934: LD_EXP 133
89938: PPUSH
89939: CALL 32305 0 1
89943: PUSH
89944: FOR_TO
89945: IFFALSE 90495
// if factoryWaypoints [ i ] [ 2 ] = factory then
89947: LD_EXP 133
89951: PUSH
89952: LD_VAR 0 4
89956: ARRAY
89957: PUSH
89958: LD_INT 2
89960: ARRAY
89961: PUSH
89962: LD_VAR 0 2
89966: EQUAL
89967: IFFALSE 90493
// begin if GetControl ( vehicle ) = control_manual then
89969: LD_VAR 0 1
89973: PPUSH
89974: CALL_OW 263
89978: PUSH
89979: LD_INT 1
89981: EQUAL
89982: IFFALSE 90346
// begin driver := IsDrivenBy ( vehicle ) ;
89984: LD_ADDR_VAR 0 5
89988: PUSH
89989: LD_VAR 0 1
89993: PPUSH
89994: CALL_OW 311
89998: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
89999: LD_VAR 0 5
90003: PUSH
90004: LD_EXP 134
90008: IN
90009: IFTRUE 90023
90011: PUSH
90012: LD_VAR 0 1
90016: PUSH
90017: LD_EXP 134
90021: IN
90022: OR
90023: IFFALSE 90029
// exit ;
90025: POP
90026: POP
90027: GO 90497
// if not HasTask ( driver ) then
90029: LD_VAR 0 5
90033: PPUSH
90034: CALL_OW 314
90038: NOT
90039: IFFALSE 90344
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
90041: LD_ADDR_EXP 134
90045: PUSH
90046: LD_EXP 134
90050: PPUSH
90051: LD_VAR 0 5
90055: PPUSH
90056: CALL 68237 0 2
90060: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
90061: LD_ADDR_EXP 134
90065: PUSH
90066: LD_EXP 134
90070: PPUSH
90071: LD_VAR 0 1
90075: PPUSH
90076: CALL 68237 0 2
90080: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90081: LD_ADDR_VAR 0 6
90085: PUSH
90086: LD_EXP 133
90090: PUSH
90091: LD_VAR 0 4
90095: ARRAY
90096: PUSH
90097: LD_INT 3
90099: ARRAY
90100: PPUSH
90101: LD_EXP 133
90105: PUSH
90106: LD_VAR 0 4
90110: ARRAY
90111: PUSH
90112: LD_INT 4
90114: ARRAY
90115: PPUSH
90116: CALL_OW 428
90120: ST_TO_ADDR
// if hex then
90121: LD_VAR 0 6
90125: IFFALSE 90143
// ComMoveUnit ( driver , hex ) else
90127: LD_VAR 0 5
90131: PPUSH
90132: LD_VAR 0 6
90136: PPUSH
90137: CALL_OW 112
90141: GO 90227
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
90143: LD_VAR 0 1
90147: PPUSH
90148: LD_EXP 133
90152: PUSH
90153: LD_VAR 0 4
90157: ARRAY
90158: PUSH
90159: LD_INT 3
90161: ARRAY
90162: PPUSH
90163: LD_EXP 133
90167: PUSH
90168: LD_VAR 0 4
90172: ARRAY
90173: PUSH
90174: LD_INT 4
90176: ARRAY
90177: PPUSH
90178: CALL_OW 297
90182: PUSH
90183: LD_INT 0
90185: GREATER
90186: IFFALSE 90227
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90188: LD_VAR 0 5
90192: PPUSH
90193: LD_EXP 133
90197: PUSH
90198: LD_VAR 0 4
90202: ARRAY
90203: PUSH
90204: LD_INT 3
90206: ARRAY
90207: PPUSH
90208: LD_EXP 133
90212: PUSH
90213: LD_VAR 0 4
90217: ARRAY
90218: PUSH
90219: LD_INT 4
90221: ARRAY
90222: PPUSH
90223: CALL_OW 111
// AddComExitVehicle ( driver ) ;
90227: LD_VAR 0 5
90231: PPUSH
90232: CALL_OW 181
// if Multiplayer then
90236: LD_OWVAR 4
90240: IFFALSE 90289
// begin repeat wait ( 10 ) ;
90242: LD_INT 10
90244: PPUSH
90245: CALL_OW 67
// until not IsInUnit ( driver ) ;
90249: LD_VAR 0 5
90253: PPUSH
90254: CALL_OW 310
90258: NOT
90259: IFFALSE 90242
// if not HasTask ( driver ) then
90261: LD_VAR 0 5
90265: PPUSH
90266: CALL_OW 314
90270: NOT
90271: IFFALSE 90287
// ComEnterUnit ( driver , factory ) ;
90273: LD_VAR 0 5
90277: PPUSH
90278: LD_VAR 0 2
90282: PPUSH
90283: CALL_OW 120
// end else
90287: GO 90303
// AddComEnterUnit ( driver , factory ) ;
90289: LD_VAR 0 5
90293: PPUSH
90294: LD_VAR 0 2
90298: PPUSH
90299: CALL_OW 180
// wait ( 0 0$1 ) ;
90303: LD_INT 35
90305: PPUSH
90306: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
90310: LD_ADDR_EXP 134
90314: PUSH
90315: LD_EXP 134
90319: PUSH
90320: LD_VAR 0 5
90324: DIFF
90325: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
90326: LD_ADDR_EXP 134
90330: PUSH
90331: LD_EXP 134
90335: PUSH
90336: LD_VAR 0 1
90340: DIFF
90341: ST_TO_ADDR
// break ;
90342: GO 90495
// end ; end else
90344: GO 90493
// if GetControl ( vehicle ) = control_remote then
90346: LD_VAR 0 1
90350: PPUSH
90351: CALL_OW 263
90355: PUSH
90356: LD_INT 2
90358: EQUAL
90359: IFFALSE 90445
// begin wait ( 0 0$2 ) ;
90361: LD_INT 70
90363: PPUSH
90364: CALL_OW 67
// repeat wait ( 10 ) ;
90368: LD_INT 10
90370: PPUSH
90371: CALL_OW 67
// Connect ( vehicle ) ;
90375: LD_VAR 0 1
90379: PPUSH
90380: CALL 38549 0 1
// until IsControledBy ( vehicle ) ;
90384: LD_VAR 0 1
90388: PPUSH
90389: CALL_OW 312
90393: IFFALSE 90368
// wait ( 10 ) ;
90395: LD_INT 10
90397: PPUSH
90398: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90402: LD_VAR 0 1
90406: PPUSH
90407: LD_EXP 133
90411: PUSH
90412: LD_VAR 0 4
90416: ARRAY
90417: PUSH
90418: LD_INT 3
90420: ARRAY
90421: PPUSH
90422: LD_EXP 133
90426: PUSH
90427: LD_VAR 0 4
90431: ARRAY
90432: PUSH
90433: LD_INT 4
90435: ARRAY
90436: PPUSH
90437: CALL_OW 111
// break ;
90441: GO 90495
// end else
90443: GO 90493
// begin wait ( 0 0$3 ) ;
90445: LD_INT 105
90447: PPUSH
90448: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90452: LD_VAR 0 1
90456: PPUSH
90457: LD_EXP 133
90461: PUSH
90462: LD_VAR 0 4
90466: ARRAY
90467: PUSH
90468: LD_INT 3
90470: ARRAY
90471: PPUSH
90472: LD_EXP 133
90476: PUSH
90477: LD_VAR 0 4
90481: ARRAY
90482: PUSH
90483: LD_INT 4
90485: ARRAY
90486: PPUSH
90487: CALL_OW 111
// break ;
90491: GO 90495
// end ; end ;
90493: GO 89944
90495: POP
90496: POP
// end ;
90497: LD_VAR 0 3
90501: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
90502: LD_INT 0
90504: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
90505: LD_VAR 0 1
90509: PUSH
90510: LD_INT 250
90512: EQUAL
90513: IFFALSE 90530
90515: PUSH
90516: LD_VAR 0 2
90520: PPUSH
90521: CALL_OW 264
90525: PUSH
90526: LD_INT 81
90528: EQUAL
90529: AND
90530: IFFALSE 90551
// MinerPlaceMine ( unit , x , y ) ;
90532: LD_VAR 0 2
90536: PPUSH
90537: LD_VAR 0 4
90541: PPUSH
90542: LD_VAR 0 5
90546: PPUSH
90547: CALL 93683 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
90551: LD_VAR 0 1
90555: PUSH
90556: LD_INT 251
90558: EQUAL
90559: IFFALSE 90576
90561: PUSH
90562: LD_VAR 0 2
90566: PPUSH
90567: CALL_OW 264
90571: PUSH
90572: LD_INT 81
90574: EQUAL
90575: AND
90576: IFFALSE 90597
// MinerDetonateMine ( unit , x , y ) ;
90578: LD_VAR 0 2
90582: PPUSH
90583: LD_VAR 0 4
90587: PPUSH
90588: LD_VAR 0 5
90592: PPUSH
90593: CALL 93962 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
90597: LD_VAR 0 1
90601: PUSH
90602: LD_INT 252
90604: EQUAL
90605: IFFALSE 90622
90607: PUSH
90608: LD_VAR 0 2
90612: PPUSH
90613: CALL_OW 264
90617: PUSH
90618: LD_INT 81
90620: EQUAL
90621: AND
90622: IFFALSE 90643
// MinerCreateMinefield ( unit , x , y ) ;
90624: LD_VAR 0 2
90628: PPUSH
90629: LD_VAR 0 4
90633: PPUSH
90634: LD_VAR 0 5
90638: PPUSH
90639: CALL 94381 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
90643: LD_VAR 0 1
90647: PUSH
90648: LD_INT 253
90650: EQUAL
90651: IFFALSE 90668
90653: PUSH
90654: LD_VAR 0 2
90658: PPUSH
90659: CALL_OW 257
90663: PUSH
90664: LD_INT 5
90666: EQUAL
90667: AND
90668: IFFALSE 90689
// ComBinocular ( unit , x , y ) ;
90670: LD_VAR 0 2
90674: PPUSH
90675: LD_VAR 0 4
90679: PPUSH
90680: LD_VAR 0 5
90684: PPUSH
90685: CALL 94756 0 3
// if selectedUnit then
90689: LD_VAR 0 3
90693: IFFALSE 90753
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
90695: LD_VAR 0 1
90699: PUSH
90700: LD_INT 254
90702: EQUAL
90703: IFFALSE 90720
90705: PUSH
90706: LD_VAR 0 2
90710: PPUSH
90711: CALL_OW 264
90715: PUSH
90716: LD_INT 99
90718: EQUAL
90719: AND
90720: IFFALSE 90737
90722: PUSH
90723: LD_VAR 0 3
90727: PPUSH
90728: CALL_OW 263
90732: PUSH
90733: LD_INT 3
90735: EQUAL
90736: AND
90737: IFFALSE 90753
// HackDestroyVehicle ( unit , selectedUnit ) ;
90739: LD_VAR 0 2
90743: PPUSH
90744: LD_VAR 0 3
90748: PPUSH
90749: CALL 93043 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
90753: LD_VAR 0 1
90757: PUSH
90758: LD_INT 255
90760: EQUAL
90761: IFFALSE 90785
90763: PUSH
90764: LD_VAR 0 2
90768: PPUSH
90769: CALL_OW 264
90773: PUSH
90774: LD_INT 14
90776: PUSH
90777: LD_INT 53
90779: PUSH
90780: EMPTY
90781: LIST
90782: LIST
90783: IN
90784: AND
90785: IFFALSE 90803
90787: PUSH
90788: LD_VAR 0 4
90792: PPUSH
90793: LD_VAR 0 5
90797: PPUSH
90798: CALL_OW 488
90802: AND
90803: IFFALSE 90827
// CutTreeXYR ( unit , x , y , 12 ) ;
90805: LD_VAR 0 2
90809: PPUSH
90810: LD_VAR 0 4
90814: PPUSH
90815: LD_VAR 0 5
90819: PPUSH
90820: LD_INT 12
90822: PPUSH
90823: CALL 91018 0 4
// if cmd = 256 then
90827: LD_VAR 0 1
90831: PUSH
90832: LD_INT 256
90834: EQUAL
90835: IFFALSE 90856
// SetFactoryWaypoint ( unit , x , y ) ;
90837: LD_VAR 0 2
90841: PPUSH
90842: LD_VAR 0 4
90846: PPUSH
90847: LD_VAR 0 5
90851: PPUSH
90852: CALL 88215 0 3
// if cmd = 257 then
90856: LD_VAR 0 1
90860: PUSH
90861: LD_INT 257
90863: EQUAL
90864: IFFALSE 90885
// SetWarehouseGatheringPoint ( unit , x , y ) ;
90866: LD_VAR 0 2
90870: PPUSH
90871: LD_VAR 0 4
90875: PPUSH
90876: LD_VAR 0 5
90880: PPUSH
90881: CALL 88711 0 3
// if cmd = 258 then
90885: LD_VAR 0 1
90889: PUSH
90890: LD_INT 258
90892: EQUAL
90893: IFFALSE 90917
// BurnTreeXYR ( unit , x , y , 8 ) ;
90895: LD_VAR 0 2
90899: PPUSH
90900: LD_VAR 0 4
90904: PPUSH
90905: LD_VAR 0 5
90909: PPUSH
90910: LD_INT 8
90912: PPUSH
90913: CALL 91418 0 4
// end ;
90917: LD_VAR 0 6
90921: RET
// export function ComRadiation ( un ) ; var eff ; begin
90922: LD_INT 0
90924: PPUSH
90925: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
90926: LD_VAR 0 1
90930: PPUSH
90931: CALL_OW 264
90935: PUSH
90936: LD_INT 91
90938: NONEQUAL
90939: IFFALSE 90943
// exit ;
90941: GO 91013
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
90943: LD_INT 68
90945: PPUSH
90946: LD_VAR 0 1
90950: PPUSH
90951: CALL_OW 255
90955: PPUSH
90956: CALL_OW 321
90960: PUSH
90961: LD_INT 2
90963: EQUAL
90964: IFFALSE 90976
// eff := 50 else
90966: LD_ADDR_VAR 0 3
90970: PUSH
90971: LD_INT 50
90973: ST_TO_ADDR
90974: GO 90984
// eff := 25 ;
90976: LD_ADDR_VAR 0 3
90980: PUSH
90981: LD_INT 25
90983: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
90984: LD_VAR 0 1
90988: PPUSH
90989: CALL_OW 250
90993: PPUSH
90994: LD_VAR 0 1
90998: PPUSH
90999: CALL_OW 251
91003: PPUSH
91004: LD_VAR 0 3
91008: PPUSH
91009: CALL_OW 495
// end ;
91013: LD_VAR 0 2
91017: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
91018: LD_INT 0
91020: PPUSH
91021: PPUSH
91022: PPUSH
91023: PPUSH
91024: PPUSH
91025: PPUSH
91026: PPUSH
91027: PPUSH
91028: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
91029: LD_VAR 0 1
91033: PPUSH
91034: CALL_OW 302
91038: NOT
91039: IFTRUE 91058
91041: PUSH
91042: LD_VAR 0 2
91046: PPUSH
91047: LD_VAR 0 3
91051: PPUSH
91052: CALL_OW 488
91056: NOT
91057: OR
91058: IFTRUE 91067
91060: PUSH
91061: LD_VAR 0 4
91065: NOT
91066: OR
91067: IFFALSE 91071
// exit ;
91069: GO 91413
// list := [ ] ;
91071: LD_ADDR_VAR 0 13
91075: PUSH
91076: EMPTY
91077: ST_TO_ADDR
// if x - r < 0 then
91078: LD_VAR 0 2
91082: PUSH
91083: LD_VAR 0 4
91087: MINUS
91088: PUSH
91089: LD_INT 0
91091: LESS
91092: IFFALSE 91104
// min_x := 0 else
91094: LD_ADDR_VAR 0 7
91098: PUSH
91099: LD_INT 0
91101: ST_TO_ADDR
91102: GO 91120
// min_x := x - r ;
91104: LD_ADDR_VAR 0 7
91108: PUSH
91109: LD_VAR 0 2
91113: PUSH
91114: LD_VAR 0 4
91118: MINUS
91119: ST_TO_ADDR
// if y - r < 0 then
91120: LD_VAR 0 3
91124: PUSH
91125: LD_VAR 0 4
91129: MINUS
91130: PUSH
91131: LD_INT 0
91133: LESS
91134: IFFALSE 91146
// min_y := 0 else
91136: LD_ADDR_VAR 0 8
91140: PUSH
91141: LD_INT 0
91143: ST_TO_ADDR
91144: GO 91162
// min_y := y - r ;
91146: LD_ADDR_VAR 0 8
91150: PUSH
91151: LD_VAR 0 3
91155: PUSH
91156: LD_VAR 0 4
91160: MINUS
91161: ST_TO_ADDR
// max_x := x + r ;
91162: LD_ADDR_VAR 0 9
91166: PUSH
91167: LD_VAR 0 2
91171: PUSH
91172: LD_VAR 0 4
91176: PLUS
91177: ST_TO_ADDR
// max_y := y + r ;
91178: LD_ADDR_VAR 0 10
91182: PUSH
91183: LD_VAR 0 3
91187: PUSH
91188: LD_VAR 0 4
91192: PLUS
91193: ST_TO_ADDR
// for _x = min_x to max_x do
91194: LD_ADDR_VAR 0 11
91198: PUSH
91199: DOUBLE
91200: LD_VAR 0 7
91204: DEC
91205: ST_TO_ADDR
91206: LD_VAR 0 9
91210: PUSH
91211: FOR_TO
91212: IFFALSE 91331
// for _y = min_y to max_y do
91214: LD_ADDR_VAR 0 12
91218: PUSH
91219: DOUBLE
91220: LD_VAR 0 8
91224: DEC
91225: ST_TO_ADDR
91226: LD_VAR 0 10
91230: PUSH
91231: FOR_TO
91232: IFFALSE 91327
// begin if not ValidHex ( _x , _y ) then
91234: LD_VAR 0 11
91238: PPUSH
91239: LD_VAR 0 12
91243: PPUSH
91244: CALL_OW 488
91248: NOT
91249: IFFALSE 91253
// continue ;
91251: GO 91231
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91253: LD_VAR 0 11
91257: PPUSH
91258: LD_VAR 0 12
91262: PPUSH
91263: CALL_OW 351
91267: IFFALSE 91285
91269: PUSH
91270: LD_VAR 0 11
91274: PPUSH
91275: LD_VAR 0 12
91279: PPUSH
91280: CALL_OW 554
91284: AND
91285: IFFALSE 91325
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91287: LD_ADDR_VAR 0 13
91291: PUSH
91292: LD_VAR 0 13
91296: PPUSH
91297: LD_VAR 0 13
91301: PUSH
91302: LD_INT 1
91304: PLUS
91305: PPUSH
91306: LD_VAR 0 11
91310: PUSH
91311: LD_VAR 0 12
91315: PUSH
91316: EMPTY
91317: LIST
91318: LIST
91319: PPUSH
91320: CALL_OW 2
91324: ST_TO_ADDR
// end ;
91325: GO 91231
91327: POP
91328: POP
91329: GO 91211
91331: POP
91332: POP
// if not list then
91333: LD_VAR 0 13
91337: NOT
91338: IFFALSE 91342
// exit ;
91340: GO 91413
// for i in list do
91342: LD_ADDR_VAR 0 6
91346: PUSH
91347: LD_VAR 0 13
91351: PUSH
91352: FOR_IN
91353: IFFALSE 91411
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
91355: LD_VAR 0 1
91359: PPUSH
91360: LD_STRING M
91362: PUSH
91363: LD_VAR 0 6
91367: PUSH
91368: LD_INT 1
91370: ARRAY
91371: PUSH
91372: LD_VAR 0 6
91376: PUSH
91377: LD_INT 2
91379: ARRAY
91380: PUSH
91381: LD_INT 0
91383: PUSH
91384: LD_INT 0
91386: PUSH
91387: LD_INT 0
91389: PUSH
91390: LD_INT 0
91392: PUSH
91393: EMPTY
91394: LIST
91395: LIST
91396: LIST
91397: LIST
91398: LIST
91399: LIST
91400: LIST
91401: PUSH
91402: EMPTY
91403: LIST
91404: PPUSH
91405: CALL_OW 447
91409: GO 91352
91411: POP
91412: POP
// end ;
91413: LD_VAR 0 5
91417: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
91418: LD_INT 0
91420: PPUSH
91421: PPUSH
91422: PPUSH
91423: PPUSH
91424: PPUSH
91425: PPUSH
91426: PPUSH
91427: PPUSH
91428: PPUSH
91429: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
91430: LD_VAR 0 1
91434: PPUSH
91435: CALL_OW 302
91439: NOT
91440: IFTRUE 91459
91442: PUSH
91443: LD_VAR 0 2
91447: PPUSH
91448: LD_VAR 0 3
91452: PPUSH
91453: CALL_OW 488
91457: NOT
91458: OR
91459: IFTRUE 91468
91461: PUSH
91462: LD_VAR 0 4
91466: NOT
91467: OR
91468: IFFALSE 91472
// exit ;
91470: GO 91989
// list := [ ] ;
91472: LD_ADDR_VAR 0 13
91476: PUSH
91477: EMPTY
91478: ST_TO_ADDR
// if x - r < 0 then
91479: LD_VAR 0 2
91483: PUSH
91484: LD_VAR 0 4
91488: MINUS
91489: PUSH
91490: LD_INT 0
91492: LESS
91493: IFFALSE 91505
// min_x := 0 else
91495: LD_ADDR_VAR 0 7
91499: PUSH
91500: LD_INT 0
91502: ST_TO_ADDR
91503: GO 91521
// min_x := x - r ;
91505: LD_ADDR_VAR 0 7
91509: PUSH
91510: LD_VAR 0 2
91514: PUSH
91515: LD_VAR 0 4
91519: MINUS
91520: ST_TO_ADDR
// if y - r < 0 then
91521: LD_VAR 0 3
91525: PUSH
91526: LD_VAR 0 4
91530: MINUS
91531: PUSH
91532: LD_INT 0
91534: LESS
91535: IFFALSE 91547
// min_y := 0 else
91537: LD_ADDR_VAR 0 8
91541: PUSH
91542: LD_INT 0
91544: ST_TO_ADDR
91545: GO 91563
// min_y := y - r ;
91547: LD_ADDR_VAR 0 8
91551: PUSH
91552: LD_VAR 0 3
91556: PUSH
91557: LD_VAR 0 4
91561: MINUS
91562: ST_TO_ADDR
// max_x := x + r ;
91563: LD_ADDR_VAR 0 9
91567: PUSH
91568: LD_VAR 0 2
91572: PUSH
91573: LD_VAR 0 4
91577: PLUS
91578: ST_TO_ADDR
// max_y := y + r ;
91579: LD_ADDR_VAR 0 10
91583: PUSH
91584: LD_VAR 0 3
91588: PUSH
91589: LD_VAR 0 4
91593: PLUS
91594: ST_TO_ADDR
// for _x = min_x to max_x do
91595: LD_ADDR_VAR 0 11
91599: PUSH
91600: DOUBLE
91601: LD_VAR 0 7
91605: DEC
91606: ST_TO_ADDR
91607: LD_VAR 0 9
91611: PUSH
91612: FOR_TO
91613: IFFALSE 91732
// for _y = min_y to max_y do
91615: LD_ADDR_VAR 0 12
91619: PUSH
91620: DOUBLE
91621: LD_VAR 0 8
91625: DEC
91626: ST_TO_ADDR
91627: LD_VAR 0 10
91631: PUSH
91632: FOR_TO
91633: IFFALSE 91728
// begin if not ValidHex ( _x , _y ) then
91635: LD_VAR 0 11
91639: PPUSH
91640: LD_VAR 0 12
91644: PPUSH
91645: CALL_OW 488
91649: NOT
91650: IFFALSE 91654
// continue ;
91652: GO 91632
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91654: LD_VAR 0 11
91658: PPUSH
91659: LD_VAR 0 12
91663: PPUSH
91664: CALL_OW 351
91668: IFFALSE 91686
91670: PUSH
91671: LD_VAR 0 11
91675: PPUSH
91676: LD_VAR 0 12
91680: PPUSH
91681: CALL_OW 554
91685: AND
91686: IFFALSE 91726
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91688: LD_ADDR_VAR 0 13
91692: PUSH
91693: LD_VAR 0 13
91697: PPUSH
91698: LD_VAR 0 13
91702: PUSH
91703: LD_INT 1
91705: PLUS
91706: PPUSH
91707: LD_VAR 0 11
91711: PUSH
91712: LD_VAR 0 12
91716: PUSH
91717: EMPTY
91718: LIST
91719: LIST
91720: PPUSH
91721: CALL_OW 2
91725: ST_TO_ADDR
// end ;
91726: GO 91632
91728: POP
91729: POP
91730: GO 91612
91732: POP
91733: POP
// if not list then
91734: LD_VAR 0 13
91738: NOT
91739: IFFALSE 91743
// exit ;
91741: GO 91989
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
91743: LD_ADDR_VAR 0 13
91747: PUSH
91748: LD_VAR 0 1
91752: PPUSH
91753: LD_VAR 0 13
91757: PPUSH
91758: LD_INT 1
91760: PPUSH
91761: LD_INT 1
91763: PPUSH
91764: CALL 35677 0 4
91768: ST_TO_ADDR
// ComStop ( flame ) ;
91769: LD_VAR 0 1
91773: PPUSH
91774: CALL_OW 141
// for i in list do
91778: LD_ADDR_VAR 0 6
91782: PUSH
91783: LD_VAR 0 13
91787: PUSH
91788: FOR_IN
91789: IFFALSE 91820
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
91791: LD_VAR 0 1
91795: PPUSH
91796: LD_VAR 0 6
91800: PUSH
91801: LD_INT 1
91803: ARRAY
91804: PPUSH
91805: LD_VAR 0 6
91809: PUSH
91810: LD_INT 2
91812: ARRAY
91813: PPUSH
91814: CALL_OW 176
91818: GO 91788
91820: POP
91821: POP
// repeat wait ( 0 0$1 ) ;
91822: LD_INT 35
91824: PPUSH
91825: CALL_OW 67
// task := GetTaskList ( flame ) ;
91829: LD_ADDR_VAR 0 14
91833: PUSH
91834: LD_VAR 0 1
91838: PPUSH
91839: CALL_OW 437
91843: ST_TO_ADDR
// if not task then
91844: LD_VAR 0 14
91848: NOT
91849: IFFALSE 91853
// exit ;
91851: GO 91989
// if task [ 1 ] [ 1 ] <> | then
91853: LD_VAR 0 14
91857: PUSH
91858: LD_INT 1
91860: ARRAY
91861: PUSH
91862: LD_INT 1
91864: ARRAY
91865: PUSH
91866: LD_STRING |
91868: NONEQUAL
91869: IFFALSE 91873
// exit ;
91871: GO 91989
// _x := task [ 1 ] [ 2 ] ;
91873: LD_ADDR_VAR 0 11
91877: PUSH
91878: LD_VAR 0 14
91882: PUSH
91883: LD_INT 1
91885: ARRAY
91886: PUSH
91887: LD_INT 2
91889: ARRAY
91890: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
91891: LD_ADDR_VAR 0 12
91895: PUSH
91896: LD_VAR 0 14
91900: PUSH
91901: LD_INT 1
91903: ARRAY
91904: PUSH
91905: LD_INT 3
91907: ARRAY
91908: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
91909: LD_VAR 0 11
91913: PPUSH
91914: LD_VAR 0 12
91918: PPUSH
91919: CALL_OW 351
91923: NOT
91924: IFTRUE 91943
91926: PUSH
91927: LD_VAR 0 11
91931: PPUSH
91932: LD_VAR 0 12
91936: PPUSH
91937: CALL_OW 554
91941: NOT
91942: OR
91943: IFFALSE 91977
// begin task := Delete ( task , 1 ) ;
91945: LD_ADDR_VAR 0 14
91949: PUSH
91950: LD_VAR 0 14
91954: PPUSH
91955: LD_INT 1
91957: PPUSH
91958: CALL_OW 3
91962: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
91963: LD_VAR 0 1
91967: PPUSH
91968: LD_VAR 0 14
91972: PPUSH
91973: CALL_OW 446
// end ; until not HasTask ( flame ) ;
91977: LD_VAR 0 1
91981: PPUSH
91982: CALL_OW 314
91986: NOT
91987: IFFALSE 91822
// end ;
91989: LD_VAR 0 5
91993: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
91994: LD_EXP 137
91998: NOT
91999: IFFALSE 92049
92001: GO 92003
92003: DISABLE
// begin initHack := true ;
92004: LD_ADDR_EXP 137
92008: PUSH
92009: LD_INT 1
92011: ST_TO_ADDR
// hackTanks := [ ] ;
92012: LD_ADDR_EXP 138
92016: PUSH
92017: EMPTY
92018: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
92019: LD_ADDR_EXP 139
92023: PUSH
92024: EMPTY
92025: ST_TO_ADDR
// hackLimit := 3 ;
92026: LD_ADDR_EXP 140
92030: PUSH
92031: LD_INT 3
92033: ST_TO_ADDR
// hackDist := 12 ;
92034: LD_ADDR_EXP 141
92038: PUSH
92039: LD_INT 12
92041: ST_TO_ADDR
// hackCounter := [ ] ;
92042: LD_ADDR_EXP 142
92046: PUSH
92047: EMPTY
92048: ST_TO_ADDR
// end ;
92049: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
92050: LD_EXP 137
92054: IFFALSE 92072
92056: PUSH
92057: LD_INT 34
92059: PUSH
92060: LD_INT 99
92062: PUSH
92063: EMPTY
92064: LIST
92065: LIST
92066: PPUSH
92067: CALL_OW 69
92071: AND
92072: IFFALSE 92325
92074: GO 92076
92076: DISABLE
92077: LD_INT 0
92079: PPUSH
92080: PPUSH
// begin enable ;
92081: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
92082: LD_ADDR_VAR 0 1
92086: PUSH
92087: LD_INT 34
92089: PUSH
92090: LD_INT 99
92092: PUSH
92093: EMPTY
92094: LIST
92095: LIST
92096: PPUSH
92097: CALL_OW 69
92101: PUSH
92102: FOR_IN
92103: IFFALSE 92323
// begin if not i in hackTanks then
92105: LD_VAR 0 1
92109: PUSH
92110: LD_EXP 138
92114: IN
92115: NOT
92116: IFFALSE 92199
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
92118: LD_ADDR_EXP 138
92122: PUSH
92123: LD_EXP 138
92127: PPUSH
92128: LD_EXP 138
92132: PUSH
92133: LD_INT 1
92135: PLUS
92136: PPUSH
92137: LD_VAR 0 1
92141: PPUSH
92142: CALL_OW 1
92146: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
92147: LD_ADDR_EXP 139
92151: PUSH
92152: LD_EXP 139
92156: PPUSH
92157: LD_EXP 139
92161: PUSH
92162: LD_INT 1
92164: PLUS
92165: PPUSH
92166: EMPTY
92167: PPUSH
92168: CALL_OW 1
92172: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
92173: LD_ADDR_EXP 142
92177: PUSH
92178: LD_EXP 142
92182: PPUSH
92183: LD_EXP 142
92187: PUSH
92188: LD_INT 1
92190: PLUS
92191: PPUSH
92192: EMPTY
92193: PPUSH
92194: CALL_OW 1
92198: ST_TO_ADDR
// end ; if not IsOk ( i ) then
92199: LD_VAR 0 1
92203: PPUSH
92204: CALL_OW 302
92208: NOT
92209: IFFALSE 92222
// begin HackUnlinkAll ( i ) ;
92211: LD_VAR 0 1
92215: PPUSH
92216: CALL 92328 0 1
// continue ;
92220: GO 92102
// end ; HackCheckCapturedStatus ( i ) ;
92222: LD_VAR 0 1
92226: PPUSH
92227: CALL 92773 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
92231: LD_ADDR_VAR 0 2
92235: PUSH
92236: LD_INT 81
92238: PUSH
92239: LD_VAR 0 1
92243: PPUSH
92244: CALL_OW 255
92248: PUSH
92249: EMPTY
92250: LIST
92251: LIST
92252: PUSH
92253: LD_INT 33
92255: PUSH
92256: LD_INT 3
92258: PUSH
92259: EMPTY
92260: LIST
92261: LIST
92262: PUSH
92263: LD_INT 91
92265: PUSH
92266: LD_VAR 0 1
92270: PUSH
92271: LD_EXP 141
92275: PUSH
92276: EMPTY
92277: LIST
92278: LIST
92279: LIST
92280: PUSH
92281: LD_INT 50
92283: PUSH
92284: EMPTY
92285: LIST
92286: PUSH
92287: EMPTY
92288: LIST
92289: LIST
92290: LIST
92291: LIST
92292: PPUSH
92293: CALL_OW 69
92297: ST_TO_ADDR
// if not tmp then
92298: LD_VAR 0 2
92302: NOT
92303: IFFALSE 92307
// continue ;
92305: GO 92102
// HackLink ( i , tmp ) ;
92307: LD_VAR 0 1
92311: PPUSH
92312: LD_VAR 0 2
92316: PPUSH
92317: CALL 92464 0 2
// end ;
92321: GO 92102
92323: POP
92324: POP
// end ;
92325: PPOPN 2
92327: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
92328: LD_INT 0
92330: PPUSH
92331: PPUSH
92332: PPUSH
// if not hack in hackTanks then
92333: LD_VAR 0 1
92337: PUSH
92338: LD_EXP 138
92342: IN
92343: NOT
92344: IFFALSE 92348
// exit ;
92346: GO 92459
// index := GetElementIndex ( hackTanks , hack ) ;
92348: LD_ADDR_VAR 0 4
92352: PUSH
92353: LD_EXP 138
92357: PPUSH
92358: LD_VAR 0 1
92362: PPUSH
92363: CALL 34972 0 2
92367: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
92368: LD_EXP 139
92372: PUSH
92373: LD_VAR 0 4
92377: ARRAY
92378: IFFALSE 92459
// begin for i in hackTanksCaptured [ index ] do
92380: LD_ADDR_VAR 0 3
92384: PUSH
92385: LD_EXP 139
92389: PUSH
92390: LD_VAR 0 4
92394: ARRAY
92395: PUSH
92396: FOR_IN
92397: IFFALSE 92423
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
92399: LD_VAR 0 3
92403: PUSH
92404: LD_INT 1
92406: ARRAY
92407: PPUSH
92408: LD_VAR 0 3
92412: PUSH
92413: LD_INT 2
92415: ARRAY
92416: PPUSH
92417: CALL_OW 235
92421: GO 92396
92423: POP
92424: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
92425: LD_ADDR_EXP 139
92429: PUSH
92430: LD_EXP 139
92434: PPUSH
92435: LD_VAR 0 4
92439: PPUSH
92440: EMPTY
92441: PPUSH
92442: CALL_OW 1
92446: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
92447: LD_VAR 0 1
92451: PPUSH
92452: LD_INT 0
92454: PPUSH
92455: CALL_OW 505
// end ; end ;
92459: LD_VAR 0 2
92463: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
92464: LD_INT 0
92466: PPUSH
92467: PPUSH
92468: PPUSH
// if not hack in hackTanks or not vehicles then
92469: LD_VAR 0 1
92473: PUSH
92474: LD_EXP 138
92478: IN
92479: NOT
92480: IFTRUE 92489
92482: PUSH
92483: LD_VAR 0 2
92487: NOT
92488: OR
92489: IFFALSE 92493
// exit ;
92491: GO 92768
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
92493: LD_ADDR_VAR 0 2
92497: PUSH
92498: LD_VAR 0 1
92502: PPUSH
92503: LD_VAR 0 2
92507: PPUSH
92508: LD_INT 1
92510: PPUSH
92511: LD_INT 1
92513: PPUSH
92514: CALL 35624 0 4
92518: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
92519: LD_ADDR_VAR 0 5
92523: PUSH
92524: LD_EXP 138
92528: PPUSH
92529: LD_VAR 0 1
92533: PPUSH
92534: CALL 34972 0 2
92538: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
92539: LD_EXP 139
92543: PUSH
92544: LD_VAR 0 5
92548: ARRAY
92549: PUSH
92550: LD_EXP 140
92554: LESS
92555: IFFALSE 92744
// begin for i := 1 to vehicles do
92557: LD_ADDR_VAR 0 4
92561: PUSH
92562: DOUBLE
92563: LD_INT 1
92565: DEC
92566: ST_TO_ADDR
92567: LD_VAR 0 2
92571: PUSH
92572: FOR_TO
92573: IFFALSE 92742
// begin if hackTanksCaptured [ index ] = hackLimit then
92575: LD_EXP 139
92579: PUSH
92580: LD_VAR 0 5
92584: ARRAY
92585: PUSH
92586: LD_EXP 140
92590: EQUAL
92591: IFFALSE 92595
// break ;
92593: GO 92742
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
92595: LD_ADDR_EXP 142
92599: PUSH
92600: LD_EXP 142
92604: PPUSH
92605: LD_VAR 0 5
92609: PPUSH
92610: LD_EXP 142
92614: PUSH
92615: LD_VAR 0 5
92619: ARRAY
92620: PUSH
92621: LD_INT 1
92623: PLUS
92624: PPUSH
92625: CALL_OW 1
92629: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
92630: LD_ADDR_EXP 139
92634: PUSH
92635: LD_EXP 139
92639: PPUSH
92640: LD_VAR 0 5
92644: PUSH
92645: LD_EXP 139
92649: PUSH
92650: LD_VAR 0 5
92654: ARRAY
92655: PUSH
92656: LD_INT 1
92658: PLUS
92659: PUSH
92660: EMPTY
92661: LIST
92662: LIST
92663: PPUSH
92664: LD_VAR 0 2
92668: PUSH
92669: LD_VAR 0 4
92673: ARRAY
92674: PUSH
92675: LD_VAR 0 2
92679: PUSH
92680: LD_VAR 0 4
92684: ARRAY
92685: PPUSH
92686: CALL_OW 255
92690: PUSH
92691: EMPTY
92692: LIST
92693: LIST
92694: PPUSH
92695: CALL 35189 0 3
92699: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
92700: LD_VAR 0 2
92704: PUSH
92705: LD_VAR 0 4
92709: ARRAY
92710: PPUSH
92711: LD_VAR 0 1
92715: PPUSH
92716: CALL_OW 255
92720: PPUSH
92721: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
92725: LD_VAR 0 2
92729: PUSH
92730: LD_VAR 0 4
92734: ARRAY
92735: PPUSH
92736: CALL_OW 141
// end ;
92740: GO 92572
92742: POP
92743: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
92744: LD_VAR 0 1
92748: PPUSH
92749: LD_EXP 139
92753: PUSH
92754: LD_VAR 0 5
92758: ARRAY
92759: PUSH
92760: LD_INT 0
92762: PLUS
92763: PPUSH
92764: CALL_OW 505
// end ;
92768: LD_VAR 0 3
92772: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
92773: LD_INT 0
92775: PPUSH
92776: PPUSH
92777: PPUSH
92778: PPUSH
// if not hack in hackTanks then
92779: LD_VAR 0 1
92783: PUSH
92784: LD_EXP 138
92788: IN
92789: NOT
92790: IFFALSE 92794
// exit ;
92792: GO 93038
// index := GetElementIndex ( hackTanks , hack ) ;
92794: LD_ADDR_VAR 0 4
92798: PUSH
92799: LD_EXP 138
92803: PPUSH
92804: LD_VAR 0 1
92808: PPUSH
92809: CALL 34972 0 2
92813: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
92814: LD_ADDR_VAR 0 3
92818: PUSH
92819: DOUBLE
92820: LD_EXP 139
92824: PUSH
92825: LD_VAR 0 4
92829: ARRAY
92830: INC
92831: ST_TO_ADDR
92832: LD_INT 1
92834: PUSH
92835: FOR_DOWNTO
92836: IFFALSE 93012
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
92838: LD_ADDR_VAR 0 5
92842: PUSH
92843: LD_EXP 139
92847: PUSH
92848: LD_VAR 0 4
92852: ARRAY
92853: PUSH
92854: LD_VAR 0 3
92858: ARRAY
92859: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
92860: LD_VAR 0 5
92864: PUSH
92865: LD_INT 1
92867: ARRAY
92868: PPUSH
92869: CALL_OW 302
92873: NOT
92874: IFTRUE 92902
92876: PUSH
92877: LD_VAR 0 5
92881: PUSH
92882: LD_INT 1
92884: ARRAY
92885: PPUSH
92886: CALL_OW 255
92890: PUSH
92891: LD_VAR 0 1
92895: PPUSH
92896: CALL_OW 255
92900: NONEQUAL
92901: OR
92902: IFFALSE 93010
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
92904: LD_VAR 0 5
92908: PUSH
92909: LD_INT 1
92911: ARRAY
92912: PPUSH
92913: CALL_OW 305
92917: IFFALSE 92945
92919: PUSH
92920: LD_VAR 0 5
92924: PUSH
92925: LD_INT 1
92927: ARRAY
92928: PPUSH
92929: CALL_OW 255
92933: PUSH
92934: LD_VAR 0 1
92938: PPUSH
92939: CALL_OW 255
92943: EQUAL
92944: AND
92945: IFFALSE 92969
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
92947: LD_VAR 0 5
92951: PUSH
92952: LD_INT 1
92954: ARRAY
92955: PPUSH
92956: LD_VAR 0 5
92960: PUSH
92961: LD_INT 2
92963: ARRAY
92964: PPUSH
92965: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
92969: LD_ADDR_EXP 139
92973: PUSH
92974: LD_EXP 139
92978: PPUSH
92979: LD_VAR 0 4
92983: PPUSH
92984: LD_EXP 139
92988: PUSH
92989: LD_VAR 0 4
92993: ARRAY
92994: PPUSH
92995: LD_VAR 0 3
92999: PPUSH
93000: CALL_OW 3
93004: PPUSH
93005: CALL_OW 1
93009: ST_TO_ADDR
// end ; end ;
93010: GO 92835
93012: POP
93013: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
93014: LD_VAR 0 1
93018: PPUSH
93019: LD_EXP 139
93023: PUSH
93024: LD_VAR 0 4
93028: ARRAY
93029: PUSH
93030: LD_INT 0
93032: PLUS
93033: PPUSH
93034: CALL_OW 505
// end ;
93038: LD_VAR 0 2
93042: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
93043: LD_INT 0
93045: PPUSH
93046: PPUSH
93047: PPUSH
93048: PPUSH
// if not hack in hackTanks then
93049: LD_VAR 0 1
93053: PUSH
93054: LD_EXP 138
93058: IN
93059: NOT
93060: IFFALSE 93064
// exit ;
93062: GO 93149
// index := GetElementIndex ( hackTanks , hack ) ;
93064: LD_ADDR_VAR 0 5
93068: PUSH
93069: LD_EXP 138
93073: PPUSH
93074: LD_VAR 0 1
93078: PPUSH
93079: CALL 34972 0 2
93083: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
93084: LD_ADDR_VAR 0 4
93088: PUSH
93089: DOUBLE
93090: LD_INT 1
93092: DEC
93093: ST_TO_ADDR
93094: LD_EXP 139
93098: PUSH
93099: LD_VAR 0 5
93103: ARRAY
93104: PUSH
93105: FOR_TO
93106: IFFALSE 93147
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
93108: LD_EXP 139
93112: PUSH
93113: LD_VAR 0 5
93117: ARRAY
93118: PUSH
93119: LD_VAR 0 4
93123: ARRAY
93124: PUSH
93125: LD_INT 1
93127: ARRAY
93128: PUSH
93129: LD_VAR 0 2
93133: EQUAL
93134: IFFALSE 93145
// KillUnit ( vehicle ) ;
93136: LD_VAR 0 2
93140: PPUSH
93141: CALL_OW 66
93145: GO 93105
93147: POP
93148: POP
// end ;
93149: LD_VAR 0 3
93153: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
93154: LD_EXP 143
93158: NOT
93159: IFFALSE 93194
93161: GO 93163
93163: DISABLE
// begin initMiner := true ;
93164: LD_ADDR_EXP 143
93168: PUSH
93169: LD_INT 1
93171: ST_TO_ADDR
// minersList := [ ] ;
93172: LD_ADDR_EXP 144
93176: PUSH
93177: EMPTY
93178: ST_TO_ADDR
// minerMinesList := [ ] ;
93179: LD_ADDR_EXP 145
93183: PUSH
93184: EMPTY
93185: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
93186: LD_ADDR_EXP 146
93190: PUSH
93191: LD_INT 5
93193: ST_TO_ADDR
// end ;
93194: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
93195: LD_EXP 143
93199: IFFALSE 93217
93201: PUSH
93202: LD_INT 34
93204: PUSH
93205: LD_INT 81
93207: PUSH
93208: EMPTY
93209: LIST
93210: LIST
93211: PPUSH
93212: CALL_OW 69
93216: AND
93217: IFFALSE 93680
93219: GO 93221
93221: DISABLE
93222: LD_INT 0
93224: PPUSH
93225: PPUSH
93226: PPUSH
93227: PPUSH
// begin enable ;
93228: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
93229: LD_ADDR_VAR 0 1
93233: PUSH
93234: LD_INT 34
93236: PUSH
93237: LD_INT 81
93239: PUSH
93240: EMPTY
93241: LIST
93242: LIST
93243: PPUSH
93244: CALL_OW 69
93248: PUSH
93249: FOR_IN
93250: IFFALSE 93322
// begin if not i in minersList then
93252: LD_VAR 0 1
93256: PUSH
93257: LD_EXP 144
93261: IN
93262: NOT
93263: IFFALSE 93320
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
93265: LD_ADDR_EXP 144
93269: PUSH
93270: LD_EXP 144
93274: PPUSH
93275: LD_EXP 144
93279: PUSH
93280: LD_INT 1
93282: PLUS
93283: PPUSH
93284: LD_VAR 0 1
93288: PPUSH
93289: CALL_OW 1
93293: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
93294: LD_ADDR_EXP 145
93298: PUSH
93299: LD_EXP 145
93303: PPUSH
93304: LD_EXP 145
93308: PUSH
93309: LD_INT 1
93311: PLUS
93312: PPUSH
93313: EMPTY
93314: PPUSH
93315: CALL_OW 1
93319: ST_TO_ADDR
// end end ;
93320: GO 93249
93322: POP
93323: POP
// for i := minerMinesList downto 1 do
93324: LD_ADDR_VAR 0 1
93328: PUSH
93329: DOUBLE
93330: LD_EXP 145
93334: INC
93335: ST_TO_ADDR
93336: LD_INT 1
93338: PUSH
93339: FOR_DOWNTO
93340: IFFALSE 93678
// begin if IsLive ( minersList [ i ] ) then
93342: LD_EXP 144
93346: PUSH
93347: LD_VAR 0 1
93351: ARRAY
93352: PPUSH
93353: CALL_OW 300
93357: IFFALSE 93385
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
93359: LD_EXP 144
93363: PUSH
93364: LD_VAR 0 1
93368: ARRAY
93369: PPUSH
93370: LD_EXP 145
93374: PUSH
93375: LD_VAR 0 1
93379: ARRAY
93380: PPUSH
93381: CALL_OW 505
// if not minerMinesList [ i ] then
93385: LD_EXP 145
93389: PUSH
93390: LD_VAR 0 1
93394: ARRAY
93395: NOT
93396: IFFALSE 93400
// continue ;
93398: GO 93339
// for j := minerMinesList [ i ] downto 1 do
93400: LD_ADDR_VAR 0 2
93404: PUSH
93405: DOUBLE
93406: LD_EXP 145
93410: PUSH
93411: LD_VAR 0 1
93415: ARRAY
93416: INC
93417: ST_TO_ADDR
93418: LD_INT 1
93420: PUSH
93421: FOR_DOWNTO
93422: IFFALSE 93674
// begin side := GetSide ( minersList [ i ] ) ;
93424: LD_ADDR_VAR 0 3
93428: PUSH
93429: LD_EXP 144
93433: PUSH
93434: LD_VAR 0 1
93438: ARRAY
93439: PPUSH
93440: CALL_OW 255
93444: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
93445: LD_ADDR_VAR 0 4
93449: PUSH
93450: LD_EXP 145
93454: PUSH
93455: LD_VAR 0 1
93459: ARRAY
93460: PUSH
93461: LD_VAR 0 2
93465: ARRAY
93466: PUSH
93467: LD_INT 1
93469: ARRAY
93470: PPUSH
93471: LD_EXP 145
93475: PUSH
93476: LD_VAR 0 1
93480: ARRAY
93481: PUSH
93482: LD_VAR 0 2
93486: ARRAY
93487: PUSH
93488: LD_INT 2
93490: ARRAY
93491: PPUSH
93492: CALL_OW 428
93496: ST_TO_ADDR
// if not tmp then
93497: LD_VAR 0 4
93501: NOT
93502: IFFALSE 93506
// continue ;
93504: GO 93421
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
93506: LD_VAR 0 4
93510: PUSH
93511: LD_INT 81
93513: PUSH
93514: LD_VAR 0 3
93518: PUSH
93519: EMPTY
93520: LIST
93521: LIST
93522: PPUSH
93523: CALL_OW 69
93527: IN
93528: IFFALSE 93578
93530: PUSH
93531: LD_EXP 145
93535: PUSH
93536: LD_VAR 0 1
93540: ARRAY
93541: PUSH
93542: LD_VAR 0 2
93546: ARRAY
93547: PUSH
93548: LD_INT 1
93550: ARRAY
93551: PPUSH
93552: LD_EXP 145
93556: PUSH
93557: LD_VAR 0 1
93561: ARRAY
93562: PUSH
93563: LD_VAR 0 2
93567: ARRAY
93568: PUSH
93569: LD_INT 2
93571: ARRAY
93572: PPUSH
93573: CALL_OW 458
93577: AND
93578: IFFALSE 93672
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
93580: LD_EXP 145
93584: PUSH
93585: LD_VAR 0 1
93589: ARRAY
93590: PUSH
93591: LD_VAR 0 2
93595: ARRAY
93596: PUSH
93597: LD_INT 1
93599: ARRAY
93600: PPUSH
93601: LD_EXP 145
93605: PUSH
93606: LD_VAR 0 1
93610: ARRAY
93611: PUSH
93612: LD_VAR 0 2
93616: ARRAY
93617: PUSH
93618: LD_INT 2
93620: ARRAY
93621: PPUSH
93622: LD_VAR 0 3
93626: PPUSH
93627: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
93631: LD_ADDR_EXP 145
93635: PUSH
93636: LD_EXP 145
93640: PPUSH
93641: LD_VAR 0 1
93645: PPUSH
93646: LD_EXP 145
93650: PUSH
93651: LD_VAR 0 1
93655: ARRAY
93656: PPUSH
93657: LD_VAR 0 2
93661: PPUSH
93662: CALL_OW 3
93666: PPUSH
93667: CALL_OW 1
93671: ST_TO_ADDR
// end ; end ;
93672: GO 93421
93674: POP
93675: POP
// end ;
93676: GO 93339
93678: POP
93679: POP
// end ;
93680: PPOPN 4
93682: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
93683: LD_INT 0
93685: PPUSH
93686: PPUSH
// result := false ;
93687: LD_ADDR_VAR 0 4
93691: PUSH
93692: LD_INT 0
93694: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
93695: LD_VAR 0 1
93699: PPUSH
93700: CALL_OW 264
93704: PUSH
93705: LD_INT 81
93707: EQUAL
93708: NOT
93709: IFFALSE 93713
// exit ;
93711: GO 93957
// index := GetElementIndex ( minersList , unit ) ;
93713: LD_ADDR_VAR 0 5
93717: PUSH
93718: LD_EXP 144
93722: PPUSH
93723: LD_VAR 0 1
93727: PPUSH
93728: CALL 34972 0 2
93732: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
93733: LD_EXP 145
93737: PUSH
93738: LD_VAR 0 5
93742: ARRAY
93743: PUSH
93744: LD_EXP 146
93748: GREATEREQUAL
93749: IFFALSE 93753
// exit ;
93751: GO 93957
// ComMoveXY ( unit , x , y ) ;
93753: LD_VAR 0 1
93757: PPUSH
93758: LD_VAR 0 2
93762: PPUSH
93763: LD_VAR 0 3
93767: PPUSH
93768: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
93772: LD_INT 35
93774: PPUSH
93775: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
93779: LD_VAR 0 1
93783: PPUSH
93784: LD_VAR 0 2
93788: PPUSH
93789: LD_VAR 0 3
93793: PPUSH
93794: CALL 67018 0 3
93798: NOT
93799: IFFALSE 93812
93801: PUSH
93802: LD_VAR 0 1
93806: PPUSH
93807: CALL_OW 314
93811: AND
93812: IFFALSE 93816
// exit ;
93814: GO 93957
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
93816: LD_VAR 0 2
93820: PPUSH
93821: LD_VAR 0 3
93825: PPUSH
93826: CALL_OW 428
93830: PUSH
93831: LD_VAR 0 1
93835: EQUAL
93836: IFFALSE 93850
93838: PUSH
93839: LD_VAR 0 1
93843: PPUSH
93844: CALL_OW 314
93848: NOT
93849: AND
93850: IFFALSE 93772
// PlaySoundXY ( x , y , PlantMine ) ;
93852: LD_VAR 0 2
93856: PPUSH
93857: LD_VAR 0 3
93861: PPUSH
93862: LD_STRING PlantMine
93864: PPUSH
93865: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
93869: LD_VAR 0 2
93873: PPUSH
93874: LD_VAR 0 3
93878: PPUSH
93879: LD_VAR 0 1
93883: PPUSH
93884: CALL_OW 255
93888: PPUSH
93889: LD_INT 0
93891: PPUSH
93892: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
93896: LD_ADDR_EXP 145
93900: PUSH
93901: LD_EXP 145
93905: PPUSH
93906: LD_VAR 0 5
93910: PUSH
93911: LD_EXP 145
93915: PUSH
93916: LD_VAR 0 5
93920: ARRAY
93921: PUSH
93922: LD_INT 1
93924: PLUS
93925: PUSH
93926: EMPTY
93927: LIST
93928: LIST
93929: PPUSH
93930: LD_VAR 0 2
93934: PUSH
93935: LD_VAR 0 3
93939: PUSH
93940: EMPTY
93941: LIST
93942: LIST
93943: PPUSH
93944: CALL 35189 0 3
93948: ST_TO_ADDR
// result := true ;
93949: LD_ADDR_VAR 0 4
93953: PUSH
93954: LD_INT 1
93956: ST_TO_ADDR
// end ;
93957: LD_VAR 0 4
93961: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
93962: LD_INT 0
93964: PPUSH
93965: PPUSH
93966: PPUSH
// if not unit in minersList then
93967: LD_VAR 0 1
93971: PUSH
93972: LD_EXP 144
93976: IN
93977: NOT
93978: IFFALSE 93982
// exit ;
93980: GO 94376
// index := GetElementIndex ( minersList , unit ) ;
93982: LD_ADDR_VAR 0 6
93986: PUSH
93987: LD_EXP 144
93991: PPUSH
93992: LD_VAR 0 1
93996: PPUSH
93997: CALL 34972 0 2
94001: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
94002: LD_ADDR_VAR 0 5
94006: PUSH
94007: DOUBLE
94008: LD_EXP 145
94012: PUSH
94013: LD_VAR 0 6
94017: ARRAY
94018: INC
94019: ST_TO_ADDR
94020: LD_INT 1
94022: PUSH
94023: FOR_DOWNTO
94024: IFFALSE 94187
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
94026: LD_EXP 145
94030: PUSH
94031: LD_VAR 0 6
94035: ARRAY
94036: PUSH
94037: LD_VAR 0 5
94041: ARRAY
94042: PUSH
94043: LD_INT 1
94045: ARRAY
94046: PUSH
94047: LD_VAR 0 2
94051: EQUAL
94052: IFFALSE 94082
94054: PUSH
94055: LD_EXP 145
94059: PUSH
94060: LD_VAR 0 6
94064: ARRAY
94065: PUSH
94066: LD_VAR 0 5
94070: ARRAY
94071: PUSH
94072: LD_INT 2
94074: ARRAY
94075: PUSH
94076: LD_VAR 0 3
94080: EQUAL
94081: AND
94082: IFFALSE 94185
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
94084: LD_EXP 145
94088: PUSH
94089: LD_VAR 0 6
94093: ARRAY
94094: PUSH
94095: LD_VAR 0 5
94099: ARRAY
94100: PUSH
94101: LD_INT 1
94103: ARRAY
94104: PPUSH
94105: LD_EXP 145
94109: PUSH
94110: LD_VAR 0 6
94114: ARRAY
94115: PUSH
94116: LD_VAR 0 5
94120: ARRAY
94121: PUSH
94122: LD_INT 2
94124: ARRAY
94125: PPUSH
94126: LD_VAR 0 1
94130: PPUSH
94131: CALL_OW 255
94135: PPUSH
94136: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
94140: LD_ADDR_EXP 145
94144: PUSH
94145: LD_EXP 145
94149: PPUSH
94150: LD_VAR 0 6
94154: PPUSH
94155: LD_EXP 145
94159: PUSH
94160: LD_VAR 0 6
94164: ARRAY
94165: PPUSH
94166: LD_VAR 0 5
94170: PPUSH
94171: CALL_OW 3
94175: PPUSH
94176: CALL_OW 1
94180: ST_TO_ADDR
// exit ;
94181: POP
94182: POP
94183: GO 94376
// end ; end ;
94185: GO 94023
94187: POP
94188: POP
// for i := minerMinesList [ index ] downto 1 do
94189: LD_ADDR_VAR 0 5
94193: PUSH
94194: DOUBLE
94195: LD_EXP 145
94199: PUSH
94200: LD_VAR 0 6
94204: ARRAY
94205: INC
94206: ST_TO_ADDR
94207: LD_INT 1
94209: PUSH
94210: FOR_DOWNTO
94211: IFFALSE 94374
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
94213: LD_EXP 145
94217: PUSH
94218: LD_VAR 0 6
94222: ARRAY
94223: PUSH
94224: LD_VAR 0 5
94228: ARRAY
94229: PUSH
94230: LD_INT 1
94232: ARRAY
94233: PPUSH
94234: LD_EXP 145
94238: PUSH
94239: LD_VAR 0 6
94243: ARRAY
94244: PUSH
94245: LD_VAR 0 5
94249: ARRAY
94250: PUSH
94251: LD_INT 2
94253: ARRAY
94254: PPUSH
94255: LD_VAR 0 2
94259: PPUSH
94260: LD_VAR 0 3
94264: PPUSH
94265: CALL_OW 298
94269: PUSH
94270: LD_INT 6
94272: LESS
94273: IFFALSE 94372
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
94275: LD_EXP 145
94279: PUSH
94280: LD_VAR 0 6
94284: ARRAY
94285: PUSH
94286: LD_VAR 0 5
94290: ARRAY
94291: PUSH
94292: LD_INT 1
94294: ARRAY
94295: PPUSH
94296: LD_EXP 145
94300: PUSH
94301: LD_VAR 0 6
94305: ARRAY
94306: PUSH
94307: LD_VAR 0 5
94311: ARRAY
94312: PUSH
94313: LD_INT 2
94315: ARRAY
94316: PPUSH
94317: LD_VAR 0 1
94321: PPUSH
94322: CALL_OW 255
94326: PPUSH
94327: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
94331: LD_ADDR_EXP 145
94335: PUSH
94336: LD_EXP 145
94340: PPUSH
94341: LD_VAR 0 6
94345: PPUSH
94346: LD_EXP 145
94350: PUSH
94351: LD_VAR 0 6
94355: ARRAY
94356: PPUSH
94357: LD_VAR 0 5
94361: PPUSH
94362: CALL_OW 3
94366: PPUSH
94367: CALL_OW 1
94371: ST_TO_ADDR
// end ; end ;
94372: GO 94210
94374: POP
94375: POP
// end ;
94376: LD_VAR 0 4
94380: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
94381: LD_INT 0
94383: PPUSH
94384: PPUSH
94385: PPUSH
94386: PPUSH
94387: PPUSH
94388: PPUSH
94389: PPUSH
94390: PPUSH
94391: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
94392: LD_VAR 0 1
94396: PPUSH
94397: CALL_OW 264
94401: PUSH
94402: LD_INT 81
94404: EQUAL
94405: NOT
94406: IFTRUE 94421
94408: PUSH
94409: LD_VAR 0 1
94413: PUSH
94414: LD_EXP 144
94418: IN
94419: NOT
94420: OR
94421: IFFALSE 94425
// exit ;
94423: GO 94751
// index := GetElementIndex ( minersList , unit ) ;
94425: LD_ADDR_VAR 0 6
94429: PUSH
94430: LD_EXP 144
94434: PPUSH
94435: LD_VAR 0 1
94439: PPUSH
94440: CALL 34972 0 2
94444: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
94445: LD_ADDR_VAR 0 8
94449: PUSH
94450: LD_EXP 146
94454: PUSH
94455: LD_EXP 145
94459: PUSH
94460: LD_VAR 0 6
94464: ARRAY
94465: MINUS
94466: ST_TO_ADDR
// if not minesFreeAmount then
94467: LD_VAR 0 8
94471: NOT
94472: IFFALSE 94476
// exit ;
94474: GO 94751
// tmp := [ ] ;
94476: LD_ADDR_VAR 0 7
94480: PUSH
94481: EMPTY
94482: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
94483: LD_ADDR_VAR 0 5
94487: PUSH
94488: DOUBLE
94489: LD_INT 1
94491: DEC
94492: ST_TO_ADDR
94493: LD_VAR 0 8
94497: PUSH
94498: FOR_TO
94499: IFFALSE 94698
// begin _d := rand ( 0 , 5 ) ;
94501: LD_ADDR_VAR 0 11
94505: PUSH
94506: LD_INT 0
94508: PPUSH
94509: LD_INT 5
94511: PPUSH
94512: CALL_OW 12
94516: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
94517: LD_ADDR_VAR 0 12
94521: PUSH
94522: LD_INT 2
94524: PPUSH
94525: LD_INT 6
94527: PPUSH
94528: CALL_OW 12
94532: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
94533: LD_ADDR_VAR 0 9
94537: PUSH
94538: LD_VAR 0 2
94542: PPUSH
94543: LD_VAR 0 11
94547: PPUSH
94548: LD_VAR 0 12
94552: PPUSH
94553: CALL_OW 272
94557: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
94558: LD_ADDR_VAR 0 10
94562: PUSH
94563: LD_VAR 0 3
94567: PPUSH
94568: LD_VAR 0 11
94572: PPUSH
94573: LD_VAR 0 12
94577: PPUSH
94578: CALL_OW 273
94582: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
94583: LD_VAR 0 9
94587: PPUSH
94588: LD_VAR 0 10
94592: PPUSH
94593: CALL_OW 488
94597: IFFALSE 94621
94599: PUSH
94600: LD_VAR 0 9
94604: PUSH
94605: LD_VAR 0 10
94609: PUSH
94610: EMPTY
94611: LIST
94612: LIST
94613: PUSH
94614: LD_VAR 0 7
94618: IN
94619: NOT
94620: AND
94621: IFFALSE 94640
94623: PUSH
94624: LD_VAR 0 9
94628: PPUSH
94629: LD_VAR 0 10
94633: PPUSH
94634: CALL_OW 458
94638: NOT
94639: AND
94640: IFFALSE 94682
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
94642: LD_ADDR_VAR 0 7
94646: PUSH
94647: LD_VAR 0 7
94651: PPUSH
94652: LD_VAR 0 7
94656: PUSH
94657: LD_INT 1
94659: PLUS
94660: PPUSH
94661: LD_VAR 0 9
94665: PUSH
94666: LD_VAR 0 10
94670: PUSH
94671: EMPTY
94672: LIST
94673: LIST
94674: PPUSH
94675: CALL_OW 1
94679: ST_TO_ADDR
94680: GO 94696
// i := i - 1 ;
94682: LD_ADDR_VAR 0 5
94686: PUSH
94687: LD_VAR 0 5
94691: PUSH
94692: LD_INT 1
94694: MINUS
94695: ST_TO_ADDR
// end ;
94696: GO 94498
94698: POP
94699: POP
// for i in tmp do
94700: LD_ADDR_VAR 0 5
94704: PUSH
94705: LD_VAR 0 7
94709: PUSH
94710: FOR_IN
94711: IFFALSE 94749
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
94713: LD_VAR 0 1
94717: PPUSH
94718: LD_VAR 0 5
94722: PUSH
94723: LD_INT 1
94725: ARRAY
94726: PPUSH
94727: LD_VAR 0 5
94731: PUSH
94732: LD_INT 2
94734: ARRAY
94735: PPUSH
94736: CALL 93683 0 3
94740: NOT
94741: IFFALSE 94747
// exit ;
94743: POP
94744: POP
94745: GO 94751
94747: GO 94710
94749: POP
94750: POP
// end ;
94751: LD_VAR 0 4
94755: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
94756: LD_INT 0
94758: PPUSH
94759: PPUSH
94760: PPUSH
94761: PPUSH
94762: PPUSH
94763: PPUSH
94764: PPUSH
94765: PPUSH
94766: PPUSH
// if GetClass ( unit ) <> class_sniper then
94767: LD_VAR 0 1
94771: PPUSH
94772: CALL_OW 257
94776: PUSH
94777: LD_INT 5
94779: NONEQUAL
94780: IFFALSE 94784
// exit ;
94782: GO 95254
// dist := 8 ;
94784: LD_ADDR_VAR 0 5
94788: PUSH
94789: LD_INT 8
94791: ST_TO_ADDR
// viewRange := 12 ;
94792: LD_ADDR_VAR 0 8
94796: PUSH
94797: LD_INT 12
94799: ST_TO_ADDR
// side := GetSide ( unit ) ;
94800: LD_ADDR_VAR 0 6
94804: PUSH
94805: LD_VAR 0 1
94809: PPUSH
94810: CALL_OW 255
94814: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
94815: LD_INT 61
94817: PPUSH
94818: LD_VAR 0 6
94822: PPUSH
94823: CALL_OW 321
94827: PUSH
94828: LD_INT 2
94830: EQUAL
94831: IFFALSE 94841
// viewRange := 16 ;
94833: LD_ADDR_VAR 0 8
94837: PUSH
94838: LD_INT 16
94840: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
94841: LD_VAR 0 1
94845: PPUSH
94846: LD_VAR 0 2
94850: PPUSH
94851: LD_VAR 0 3
94855: PPUSH
94856: CALL_OW 297
94860: PUSH
94861: LD_VAR 0 5
94865: GREATER
94866: IFFALSE 94945
// begin ComMoveXY ( unit , x , y ) ;
94868: LD_VAR 0 1
94872: PPUSH
94873: LD_VAR 0 2
94877: PPUSH
94878: LD_VAR 0 3
94882: PPUSH
94883: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
94887: LD_INT 35
94889: PPUSH
94890: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
94894: LD_VAR 0 1
94898: PPUSH
94899: LD_VAR 0 2
94903: PPUSH
94904: LD_VAR 0 3
94908: PPUSH
94909: CALL 67018 0 3
94913: NOT
94914: IFFALSE 94918
// exit ;
94916: GO 95254
// until GetDistUnitXY ( unit , x , y ) < dist ;
94918: LD_VAR 0 1
94922: PPUSH
94923: LD_VAR 0 2
94927: PPUSH
94928: LD_VAR 0 3
94932: PPUSH
94933: CALL_OW 297
94937: PUSH
94938: LD_VAR 0 5
94942: LESS
94943: IFFALSE 94887
// end ; ComTurnXY ( unit , x , y ) ;
94945: LD_VAR 0 1
94949: PPUSH
94950: LD_VAR 0 2
94954: PPUSH
94955: LD_VAR 0 3
94959: PPUSH
94960: CALL_OW 118
// repeat if Multiplayer then
94964: LD_OWVAR 4
94968: IFFALSE 94979
// wait ( 35 ) else
94970: LD_INT 35
94972: PPUSH
94973: CALL_OW 67
94977: GO 94986
// wait ( 5 ) ;
94979: LD_INT 5
94981: PPUSH
94982: CALL_OW 67
// _d := GetDir ( unit ) ;
94986: LD_ADDR_VAR 0 11
94990: PUSH
94991: LD_VAR 0 1
94995: PPUSH
94996: CALL_OW 254
95000: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
95001: LD_ADDR_VAR 0 7
95005: PUSH
95006: LD_VAR 0 1
95010: PPUSH
95011: CALL_OW 250
95015: PPUSH
95016: LD_VAR 0 1
95020: PPUSH
95021: CALL_OW 251
95025: PPUSH
95026: LD_VAR 0 2
95030: PPUSH
95031: LD_VAR 0 3
95035: PPUSH
95036: CALL 69654 0 4
95040: ST_TO_ADDR
// until dir = _d ;
95041: LD_VAR 0 7
95045: PUSH
95046: LD_VAR 0 11
95050: EQUAL
95051: IFFALSE 94964
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
95053: LD_ADDR_VAR 0 9
95057: PUSH
95058: LD_VAR 0 1
95062: PPUSH
95063: CALL_OW 250
95067: PPUSH
95068: LD_VAR 0 7
95072: PPUSH
95073: LD_VAR 0 5
95077: PPUSH
95078: CALL_OW 272
95082: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
95083: LD_ADDR_VAR 0 10
95087: PUSH
95088: LD_VAR 0 1
95092: PPUSH
95093: CALL_OW 251
95097: PPUSH
95098: LD_VAR 0 7
95102: PPUSH
95103: LD_VAR 0 5
95107: PPUSH
95108: CALL_OW 273
95112: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
95113: LD_VAR 0 9
95117: PPUSH
95118: LD_VAR 0 10
95122: PPUSH
95123: CALL_OW 488
95127: NOT
95128: IFFALSE 95132
// exit ;
95130: GO 95254
// ComAnimCustom ( unit , 1 ) ;
95132: LD_VAR 0 1
95136: PPUSH
95137: LD_INT 1
95139: PPUSH
95140: CALL_OW 592
// p := 0 ;
95144: LD_ADDR_VAR 0 12
95148: PUSH
95149: LD_INT 0
95151: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
95152: LD_VAR 0 9
95156: PPUSH
95157: LD_VAR 0 10
95161: PPUSH
95162: LD_VAR 0 6
95166: PPUSH
95167: LD_VAR 0 8
95171: PPUSH
95172: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
95176: LD_INT 35
95178: PPUSH
95179: CALL_OW 67
// p := Inc ( p ) ;
95183: LD_ADDR_VAR 0 12
95187: PUSH
95188: LD_VAR 0 12
95192: PPUSH
95193: CALL 69610 0 1
95197: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
95198: LD_VAR 0 12
95202: PUSH
95203: LD_INT 3
95205: EQUAL
95206: IFTRUE 95220
95208: PUSH
95209: LD_VAR 0 1
95213: PPUSH
95214: CALL_OW 302
95218: NOT
95219: OR
95220: IFTRUE 95233
95222: PUSH
95223: LD_VAR 0 1
95227: PPUSH
95228: CALL_OW 301
95232: OR
95233: IFFALSE 95176
// RemoveSeeing ( _x , _y , side ) ;
95235: LD_VAR 0 9
95239: PPUSH
95240: LD_VAR 0 10
95244: PPUSH
95245: LD_VAR 0 6
95249: PPUSH
95250: CALL_OW 331
// end ; end_of_file
95254: LD_VAR 0 4
95258: RET
// export function StopOriginalMusic ; begin
95259: LD_INT 0
95261: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
95262: LD_STRING OW_FORCEMUSICDISABLE(true);
95264: PPUSH
95265: CALL_OW 559
// end ;
95269: LD_VAR 0 1
95273: RET
// export function PlayOriginalMusic ; begin
95274: LD_INT 0
95276: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
95277: LD_STRING OW_FORCEMUSICDISABLE(false);
95279: PPUSH
95280: CALL_OW 559
// end ;
95284: LD_VAR 0 1
95288: RET
// export function PlayCustomMusic ( track , callback ) ; begin
95289: LD_INT 0
95291: PPUSH
// StopOriginalMusic ;
95292: CALL 95259 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
95296: LD_STRING playMusic("
95298: PUSH
95299: LD_VAR 0 1
95303: STR
95304: PUSH
95305: LD_STRING ", "
95307: STR
95308: PUSH
95309: LD_VAR 0 2
95313: STR
95314: PUSH
95315: LD_STRING ")
95317: STR
95318: PPUSH
95319: CALL_OW 559
// end ;
95323: LD_VAR 0 3
95327: RET
