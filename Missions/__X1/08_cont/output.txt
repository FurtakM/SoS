// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 20614 0 0
// PrepareRussian ;
  12: CALL 2026 0 0
// PrepareArabian ;
  16: CALL 446 0 0
// Action ;
  20: CALL 3769 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin , kaiaWeaponHidden ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// kaiaWeaponHidden := 0 ;
 427: LD_ADDR_EXP 45
 431: PUSH
 432: LD_INT 0
 434: ST_TO_ADDR
// enable ( entranceEvent ) ;
 435: LD_INT 1
 437: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 438: LD_INT 2
 440: DISABLE_MARKED
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
// uc_side := 4 ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_INT 4
 457: ST_TO_ADDR
// uc_nation := 1 ;
 458: LD_ADDR_OWVAR 21
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 466: LD_ADDR_EXP 58
 470: PUSH
 471: LD_STRING 07_Americans
 473: PPUSH
 474: CALL_OW 31
 478: ST_TO_ADDR
// if americanSquad < 5 then
 479: LD_EXP 58
 483: PUSH
 484: LD_INT 5
 486: LESS
 487: IFFALSE 581
// begin if not americanSquad then
 489: LD_EXP 58
 493: NOT
 494: IFFALSE 503
// americanSquad := [ ] ;
 496: LD_ADDR_EXP 58
 500: PUSH
 501: EMPTY
 502: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: DOUBLE
 509: LD_EXP 58
 513: DEC
 514: ST_TO_ADDR
 515: LD_INT 2
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 4
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_OWVAR 67
 537: ARRAY
 538: PUSH
 539: FOR_TO
 540: IFFALSE 577
// begin PrepareHuman ( false , 2 , 6 ) ;
 542: LD_INT 0
 544: PPUSH
 545: LD_INT 2
 547: PPUSH
 548: LD_INT 6
 550: PPUSH
 551: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 555: LD_ADDR_EXP 58
 559: PUSH
 560: LD_EXP 58
 564: PPUSH
 565: CALL_OW 44
 569: PPUSH
 570: CALL 66973 0 2
 574: ST_TO_ADDR
// end ;
 575: GO 539
 577: POP
 578: POP
// end else
 579: GO 628
// for i := Count ( americanSquad ) downto 5 do
 581: LD_ADDR_VAR 0 2
 585: PUSH
 586: DOUBLE
 587: LD_EXP 58
 591: PPUSH
 592: CALL 31373 0 1
 596: INC
 597: ST_TO_ADDR
 598: LD_INT 5
 600: PUSH
 601: FOR_DOWNTO
 602: IFFALSE 626
// americanSquad := Delete ( americanSquad , i ) ;
 604: LD_ADDR_EXP 58
 608: PUSH
 609: LD_EXP 58
 613: PPUSH
 614: LD_VAR 0 2
 618: PPUSH
 619: CALL_OW 3
 623: ST_TO_ADDR
 624: GO 601
 626: POP
 627: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 628: LD_ADDR_EXP 60
 632: PUSH
 633: LD_STRING UsCommander
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_STRING 07_
 644: PPUSH
 645: CALL 29271 0 3
 649: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 650: LD_INT 1
 652: PPUSH
 653: LD_INT 6
 655: PPUSH
 656: CALL_OW 381
// Jerry := CreateHuman ;
 660: LD_ADDR_EXP 61
 664: PUSH
 665: CALL_OW 44
 669: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 670: LD_EXP 61
 674: PPUSH
 675: LD_INT 33
 677: PPUSH
 678: CALL_OW 336
// if not Doug then
 682: LD_EXP 60
 686: NOT
 687: IFFALSE 709
// begin PrepareSoldier ( sex_male , 6 ) ;
 689: LD_INT 1
 691: PPUSH
 692: LD_INT 6
 694: PPUSH
 695: CALL_OW 381
// Doug := CreateHuman ;
 699: LD_ADDR_EXP 60
 703: PUSH
 704: CALL_OW 44
 708: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 709: LD_EXP 60
 713: PPUSH
 714: LD_INT 33
 716: PPUSH
 717: CALL_OW 336
// if johnnySaved or debug then
 721: LD_EXP 3
 725: PUSH
 726: LD_EXP 1
 730: OR
 731: IFFALSE 758
// begin Harris := NewCharacter ( Harris ) ;
 733: LD_ADDR_EXP 59
 737: PUSH
 738: LD_STRING Harris
 740: PPUSH
 741: CALL_OW 25
 745: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 746: LD_EXP 59
 750: PPUSH
 751: LD_INT 33
 753: PPUSH
 754: CALL_OW 336
// end ; uc_side := 2 ;
 758: LD_ADDR_OWVAR 20
 762: PUSH
 763: LD_INT 2
 765: ST_TO_ADDR
// uc_nation := 2 ;
 766: LD_ADDR_OWVAR 21
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 774: LD_ADDR_EXP 46
 778: PUSH
 779: LD_STRING Heike
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 2
 792: PPUSH
 793: CALL 29271 0 3
 797: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 798: LD_ADDR_EXP 49
 802: PUSH
 803: LD_STRING Ibrahim
 805: PPUSH
 806: LD_EXP 1
 810: NOT
 811: PPUSH
 812: LD_EXP 2
 816: PPUSH
 817: CALL 29271 0 3
 821: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 822: LD_ADDR_EXP 47
 826: PUSH
 827: LD_STRING Givi
 829: PPUSH
 830: LD_EXP 1
 834: NOT
 835: PPUSH
 836: LD_EXP 2
 840: PPUSH
 841: CALL 29271 0 3
 845: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 846: LD_ADDR_EXP 50
 850: PUSH
 851: LD_STRING Kamil
 853: PPUSH
 854: LD_EXP 1
 858: NOT
 859: PPUSH
 860: LD_EXP 2
 864: PPUSH
 865: CALL 29271 0 3
 869: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 870: LD_ADDR_EXP 51
 874: PUSH
 875: LD_STRING Kaia
 877: PPUSH
 878: LD_EXP 1
 882: NOT
 883: PPUSH
 884: LD_EXP 2
 888: PPUSH
 889: CALL 29271 0 3
 893: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 894: LD_ADDR_EXP 52
 898: PUSH
 899: LD_STRING Sophia
 901: PPUSH
 902: LD_EXP 1
 906: NOT
 907: PPUSH
 908: LD_EXP 2
 912: PPUSH
 913: CALL 29271 0 3
 917: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 918: LD_ADDR_EXP 53
 922: PUSH
 923: LD_STRING Markov
 925: PPUSH
 926: LD_EXP 1
 930: NOT
 931: PPUSH
 932: LD_EXP 2
 936: PPUSH
 937: CALL 29271 0 3
 941: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 942: LD_ADDR_EXP 56
 946: PUSH
 947: LD_STRING Aviradze
 949: PPUSH
 950: LD_EXP 1
 954: NOT
 955: PPUSH
 956: LD_EXP 2
 960: PPUSH
 961: CALL 29271 0 3
 965: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 966: LD_ADDR_EXP 55
 970: PUSH
 971: LD_STRING Kurt
 973: PPUSH
 974: LD_EXP 1
 978: NOT
 979: PPUSH
 980: LD_EXP 2
 984: PPUSH
 985: CALL 29271 0 3
 989: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 990: LD_ADDR_EXP 48
 994: PUSH
 995: LD_STRING Mike
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 2
1008: PPUSH
1009: CALL 29271 0 3
1013: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1014: LD_ADDR_EXP 54
1018: PUSH
1019: LD_STRING Olaf
1021: PPUSH
1022: LD_EXP 1
1026: NOT
1027: PPUSH
1028: LD_EXP 2
1032: PPUSH
1033: CALL 29271 0 3
1037: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1038: LD_ADDR_EXP 57
1042: PUSH
1043: LD_STRING 07_others
1045: PPUSH
1046: CALL_OW 31
1050: ST_TO_ADDR
// end ;
1051: LD_VAR 0 1
1055: RET
// export function PrepareGame ; var i ; begin
1056: LD_INT 0
1058: PPUSH
1059: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1060: LD_EXP 46
1064: PPUSH
1065: LD_INT 23
1067: PPUSH
1068: CALL_OW 52
// if Givi then
1072: LD_EXP 47
1076: IFFALSE 1114
// begin SetSide ( Givi , 5 ) ;
1078: LD_EXP 47
1082: PPUSH
1083: LD_INT 5
1085: PPUSH
1086: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1090: LD_EXP 47
1094: PPUSH
1095: LD_INT 9
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL_OW 49
// ComHold ( Givi ) ;
1105: LD_EXP 47
1109: PPUSH
1110: CALL_OW 140
// end ; if Markov then
1114: LD_EXP 53
1118: IFFALSE 1156
// begin SetSide ( Markov , 5 ) ;
1120: LD_EXP 53
1124: PPUSH
1125: LD_INT 5
1127: PPUSH
1128: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1132: LD_EXP 53
1136: PPUSH
1137: LD_INT 3
1139: PPUSH
1140: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1144: LD_EXP 53
1148: PPUSH
1149: LD_INT 61
1151: PPUSH
1152: CALL_OW 52
// end ; if Mike then
1156: LD_EXP 48
1160: IFFALSE 1198
// begin SetSide ( Mike , 5 ) ;
1162: LD_EXP 48
1166: PPUSH
1167: LD_INT 5
1169: PPUSH
1170: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1174: LD_EXP 48
1178: PPUSH
1179: LD_INT 17
1181: PPUSH
1182: LD_INT 0
1184: PPUSH
1185: CALL_OW 49
// ComHold ( Mike ) ;
1189: LD_EXP 48
1193: PPUSH
1194: CALL_OW 140
// end ; if Olaf then
1198: LD_EXP 54
1202: IFFALSE 1243
// begin SetSide ( Olaf , 5 ) ;
1204: LD_EXP 54
1208: PPUSH
1209: LD_INT 5
1211: PPUSH
1212: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1216: LD_EXP 54
1220: PPUSH
1221: LD_INT 16
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1231: LD_EXP 54
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL 70125 0 2
// end ; if Kamil then
1243: LD_EXP 50
1247: IFFALSE 1273
// begin SetSide ( Kamil , 5 ) ;
1249: LD_EXP 50
1253: PPUSH
1254: LD_INT 5
1256: PPUSH
1257: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1261: LD_EXP 50
1265: PPUSH
1266: LD_INT 109
1268: PPUSH
1269: CALL_OW 52
// end ; if Kurt then
1273: LD_EXP 55
1277: IFFALSE 1303
// begin SetSide ( Kurt , 5 ) ;
1279: LD_EXP 55
1283: PPUSH
1284: LD_INT 5
1286: PPUSH
1287: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1291: LD_EXP 55
1295: PPUSH
1296: LD_INT 169
1298: PPUSH
1299: CALL_OW 52
// end ; if Kaia then
1303: LD_EXP 51
1307: IFFALSE 1333
// begin SetSide ( Kaia , 5 ) ;
1309: LD_EXP 51
1313: PPUSH
1314: LD_INT 5
1316: PPUSH
1317: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1321: LD_EXP 51
1325: PPUSH
1326: LD_INT 147
1328: PPUSH
1329: CALL_OW 52
// end ; if Sophia then
1333: LD_EXP 52
1337: IFFALSE 1378
// begin SetSide ( Sophia , 5 ) ;
1339: LD_EXP 52
1343: PPUSH
1344: LD_INT 5
1346: PPUSH
1347: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1351: LD_EXP 52
1355: PPUSH
1356: LD_INT 142
1358: PPUSH
1359: LD_INT 96
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: CALL_OW 48
// ComHold ( Sophia ) ;
1369: LD_EXP 52
1373: PPUSH
1374: CALL_OW 140
// end ; if Harris then
1378: LD_EXP 59
1382: IFFALSE 1420
// begin SetSide ( Harris , 4 ) ;
1384: LD_EXP 59
1388: PPUSH
1389: LD_INT 4
1391: PPUSH
1392: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1396: LD_EXP 59
1400: PPUSH
1401: LD_INT 20
1403: PPUSH
1404: LD_INT 0
1406: PPUSH
1407: CALL_OW 49
// ComHold ( i ) ;
1411: LD_VAR 0 2
1415: PPUSH
1416: CALL_OW 140
// end ; if Doug then
1420: LD_EXP 60
1424: IFFALSE 1450
// begin SetSide ( Doug , 4 ) ;
1426: LD_EXP 60
1430: PPUSH
1431: LD_INT 4
1433: PPUSH
1434: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1438: LD_EXP 60
1442: PPUSH
1443: LD_INT 106
1445: PPUSH
1446: CALL_OW 52
// end ; if Aviradze then
1450: LD_EXP 56
1454: IFFALSE 1480
// begin SetSide ( Aviradze , 5 ) ;
1456: LD_EXP 56
1460: PPUSH
1461: LD_INT 5
1463: PPUSH
1464: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1468: LD_EXP 56
1472: PPUSH
1473: LD_INT 119
1475: PPUSH
1476: CALL_OW 52
// end ; if Ibrahim then
1480: LD_EXP 49
1484: IFFALSE 1510
// begin SetSide ( Ibrahim , 5 ) ;
1486: LD_EXP 49
1490: PPUSH
1491: LD_INT 5
1493: PPUSH
1494: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1498: LD_EXP 49
1502: PPUSH
1503: LD_INT 119
1505: PPUSH
1506: CALL_OW 52
// end ; if Jerry then
1510: LD_EXP 61
1514: IFFALSE 1555
// begin SetSide ( Jerry , 4 ) ;
1516: LD_EXP 61
1520: PPUSH
1521: LD_INT 4
1523: PPUSH
1524: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1528: LD_EXP 61
1532: PPUSH
1533: LD_INT 119
1535: PPUSH
1536: LD_INT 59
1538: PPUSH
1539: LD_INT 0
1541: PPUSH
1542: CALL_OW 48
// ComHold ( Jerry ) ;
1546: LD_EXP 61
1550: PPUSH
1551: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1555: LD_EXP 65
1559: PPUSH
1560: LD_INT 119
1562: PPUSH
1563: CALL_OW 52
// for i in americanSquad do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_EXP 58
1576: PUSH
1577: FOR_IN
1578: IFFALSE 1606
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1580: LD_VAR 0 2
1584: PPUSH
1585: LD_INT 21
1587: PPUSH
1588: LD_INT 0
1590: PPUSH
1591: CALL_OW 49
// ComHold ( i ) ;
1595: LD_VAR 0 2
1599: PPUSH
1600: CALL_OW 140
// end ;
1604: GO 1577
1606: POP
1607: POP
// for i in heikeSecondSquad do
1608: LD_ADDR_VAR 0 2
1612: PUSH
1613: LD_EXP 57
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1659
// begin SetSide ( i , 5 ) ;
1621: LD_VAR 0 2
1625: PPUSH
1626: LD_INT 5
1628: PPUSH
1629: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1633: LD_VAR 0 2
1637: PPUSH
1638: LD_INT 22
1640: PPUSH
1641: LD_INT 0
1643: PPUSH
1644: CALL_OW 49
// ComHold ( i ) ;
1648: LD_VAR 0 2
1652: PPUSH
1653: CALL_OW 140
// end ;
1657: GO 1618
1659: POP
1660: POP
// if not hasVodka then
1661: LD_EXP 4
1665: NOT
1666: IFFALSE 1725
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1668: LD_ADDR_VAR 0 2
1672: PUSH
1673: LD_INT 2
1675: PUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 2
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 22
1688: PUSH
1689: LD_INT 5
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PPUSH
1701: CALL_OW 69
1705: PUSH
1706: FOR_IN
1707: IFFALSE 1723
// SetLives ( i , 500 ) ;
1709: LD_VAR 0 2
1713: PPUSH
1714: LD_INT 500
1716: PPUSH
1717: CALL_OW 234
1721: GO 1706
1723: POP
1724: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1725: LD_ADDR_VAR 0 2
1729: PUSH
1730: LD_INT 22
1732: PUSH
1733: LD_INT 4
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PPUSH
1740: CALL_OW 69
1744: PUSH
1745: FOR_IN
1746: IFFALSE 1762
// SetLives ( i , 500 ) ;
1748: LD_VAR 0 2
1752: PPUSH
1753: LD_INT 500
1755: PPUSH
1756: CALL_OW 234
1760: GO 1745
1762: POP
1763: POP
// end ;
1764: LD_VAR 0 1
1768: RET
// export function SetClassKaiaRevolver ; begin
1769: LD_INT 0
1771: PPUSH
// if not IsOk ( Kaia ) then
1772: LD_EXP 51
1776: PPUSH
1777: CALL_OW 302
1781: NOT
1782: IFFALSE 1786
// exit ;
1784: GO 1805
// SetClass ( Kaia , class_revolver ) ;
1786: LD_EXP 51
1790: PPUSH
1791: LD_INT 34
1793: PPUSH
1794: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1798: LD_STRING ACH_REVOLVER
1800: PPUSH
1801: CALL_OW 543
// end ;
1805: LD_VAR 0 1
1809: RET
// export function SpawnHeikeAsRussian ; begin
1810: LD_INT 0
1812: PPUSH
// RemoveUnit ( Heike ) ;
1813: LD_EXP 46
1817: PPUSH
1818: CALL_OW 64
// heikeTmp := Heike ;
1822: LD_ADDR_EXP 62
1826: PUSH
1827: LD_EXP 46
1831: ST_TO_ADDR
// uc_side := 2 ;
1832: LD_ADDR_OWVAR 20
1836: PUSH
1837: LD_INT 2
1839: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1840: LD_ADDR_EXP 46
1844: PUSH
1845: LD_STRING HeikeRu
1847: PPUSH
1848: CALL_OW 25
1852: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1853: LD_EXP 62
1857: PPUSH
1858: LD_EXP 46
1862: PPUSH
1863: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1867: LD_EXP 46
1871: PPUSH
1872: LD_INT 165
1874: PPUSH
1875: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1879: LD_EXP 46
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: CALL_OW 336
// heikeAsRussian := true ;
1891: LD_ADDR_EXP 27
1895: PUSH
1896: LD_INT 1
1898: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1899: LD_STRING M1-laundry-out
1901: PPUSH
1902: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1906: LD_STRING ACH_HEIKERU
1908: PPUSH
1909: CALL_OW 543
// end ;
1913: LD_VAR 0 1
1917: RET
// export function SpawnGiviAsRussian ; begin
1918: LD_INT 0
1920: PPUSH
// RemoveUnit ( Givi ) ;
1921: LD_EXP 47
1925: PPUSH
1926: CALL_OW 64
// giviTmp := Givi ;
1930: LD_ADDR_EXP 63
1934: PUSH
1935: LD_EXP 47
1939: ST_TO_ADDR
// uc_side := 2 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 2
1947: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1948: LD_ADDR_EXP 47
1952: PUSH
1953: LD_STRING GiviRu
1955: PPUSH
1956: CALL_OW 25
1960: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1961: LD_EXP 63
1965: PPUSH
1966: LD_EXP 47
1970: PPUSH
1971: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1975: LD_EXP 47
1979: PPUSH
1980: LD_INT 165
1982: PPUSH
1983: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1987: LD_EXP 47
1991: PPUSH
1992: LD_INT 1
1994: PPUSH
1995: CALL_OW 336
// giviAsRussian := true ;
1999: LD_ADDR_EXP 28
2003: PUSH
2004: LD_INT 1
2006: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
2007: LD_STRING M1-laundry-out
2009: PPUSH
2010: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2014: LD_STRING ACH_GIVIRU
2016: PPUSH
2017: CALL_OW 543
// end ; end_of_file
2021: LD_VAR 0 1
2025: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
2031: PPUSH
2032: PPUSH
// uc_side := 3 ;
2033: LD_ADDR_OWVAR 20
2037: PUSH
2038: LD_INT 3
2040: ST_TO_ADDR
// uc_nation := 3 ;
2041: LD_ADDR_OWVAR 21
2045: PUSH
2046: LD_INT 3
2048: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
2049: LD_INT 192
2051: PPUSH
2052: LD_STRING kitchen
2054: PPUSH
2055: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2059: LD_INT 165
2061: PPUSH
2062: LD_STRING laundry
2064: PPUSH
2065: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2069: LD_INT 54
2071: PPUSH
2072: LD_STRING adminSection
2074: PPUSH
2075: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2079: LD_ADDR_VAR 0 2
2083: PUSH
2084: LD_INT 21
2086: PUSH
2087: LD_INT 3
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 69
2098: PUSH
2099: FOR_IN
2100: IFFALSE 2116
// SetBLevel ( i , 7 ) ;
2102: LD_VAR 0 2
2106: PPUSH
2107: LD_INT 7
2109: PPUSH
2110: CALL_OW 241
2114: GO 2099
2116: POP
2117: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_INT 22
2125: PUSH
2126: LD_INT 3
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 2
2135: PUSH
2136: LD_INT 30
2138: PUSH
2139: LD_INT 0
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: PUSH
2146: LD_INT 30
2148: PUSH
2149: LD_INT 1
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PPUSH
2165: CALL_OW 69
2169: PUSH
2170: FOR_IN
2171: IFFALSE 2235
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2173: LD_VAR 0 2
2177: PPUSH
2178: CALL_OW 274
2182: PPUSH
2183: LD_INT 1
2185: PPUSH
2186: LD_INT 1000
2188: PPUSH
2189: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 274
2202: PPUSH
2203: LD_INT 2
2205: PPUSH
2206: LD_INT 1000
2208: PPUSH
2209: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2213: LD_VAR 0 2
2217: PPUSH
2218: CALL_OW 274
2222: PPUSH
2223: LD_INT 3
2225: PPUSH
2226: LD_INT 100
2228: PPUSH
2229: CALL_OW 277
// end ;
2233: GO 2170
2235: POP
2236: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2237: LD_ADDR_VAR 0 2
2241: PUSH
2242: LD_INT 22
2244: PUSH
2245: LD_INT 3
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 30
2254: PUSH
2255: LD_INT 32
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 69
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2306
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2274: LD_INT 0
2276: PPUSH
2277: LD_INT 5
2279: PUSH
2280: LD_OWVAR 67
2284: PLUS
2285: PPUSH
2286: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2290: CALL_OW 44
2294: PPUSH
2295: LD_VAR 0 2
2299: PPUSH
2300: CALL_OW 52
// end ;
2304: GO 2271
2306: POP
2307: POP
// for i := 1 to 2 do
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: DOUBLE
2314: LD_INT 1
2316: DEC
2317: ST_TO_ADDR
2318: LD_INT 2
2320: PUSH
2321: FOR_TO
2322: IFFALSE 2374
// begin PrepareMechanic ( false , 8 ) ;
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 8
2329: PPUSH
2330: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2334: LD_ADDR_EXP 67
2338: PUSH
2339: LD_EXP 67
2343: PPUSH
2344: CALL_OW 44
2348: PPUSH
2349: CALL 66973 0 2
2353: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2354: LD_EXP 67
2358: PUSH
2359: LD_EXP 67
2363: ARRAY
2364: PPUSH
2365: LD_INT 61
2367: PPUSH
2368: CALL_OW 52
// end ;
2372: GO 2321
2374: POP
2375: POP
// PrepareMechanic ( sex_male , 8 ) ;
2376: LD_INT 1
2378: PPUSH
2379: LD_INT 8
2381: PPUSH
2382: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2386: LD_ADDR_EXP 68
2390: PUSH
2391: LD_EXP 68
2395: PPUSH
2396: CALL_OW 44
2400: PPUSH
2401: CALL 66973 0 2
2405: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2406: LD_EXP 68
2410: PUSH
2411: LD_EXP 68
2415: ARRAY
2416: PPUSH
2417: LD_INT 196
2419: PPUSH
2420: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2424: LD_INT 1
2426: PPUSH
2427: LD_INT 8
2429: PPUSH
2430: CALL_OW 383
// hc_name := Stiepan Simonov ;
2434: LD_ADDR_OWVAR 26
2438: PUSH
2439: LD_STRING Stiepan Simonov
2441: ST_TO_ADDR
// Stiopa := CreateHuman ;
2442: LD_ADDR_EXP 69
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2452: LD_INT 2
2454: PPUSH
2455: LD_INT 8
2457: PPUSH
2458: CALL_OW 383
// hc_name := Laura Dragunov ;
2462: LD_ADDR_OWVAR 26
2466: PUSH
2467: LD_STRING Laura Dragunov
2469: ST_TO_ADDR
// Laura := CreateHuman ;
2470: LD_ADDR_EXP 70
2474: PUSH
2475: CALL_OW 44
2479: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2480: LD_EXP 70
2484: PPUSH
2485: LD_INT 196
2487: PPUSH
2488: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2492: LD_INT 1
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2502: LD_ADDR_EXP 67
2506: PUSH
2507: LD_EXP 67
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 44
2519: PPUSH
2520: CALL_OW 2
2524: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2525: LD_EXP 67
2529: PUSH
2530: LD_INT 1
2532: ARRAY
2533: PPUSH
2534: LD_INT 61
2536: PPUSH
2537: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2541: LD_INT 1
2543: PPUSH
2544: LD_INT 8
2546: PPUSH
2547: CALL_OW 381
// hc_name := Pavel Muchin ;
2551: LD_ADDR_OWVAR 26
2555: PUSH
2556: LD_STRING Pavel Muchin
2558: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2559: LD_ADDR_OWVAR 29
2563: PUSH
2564: LD_INT 13
2566: PUSH
2567: LD_INT 13
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2574: LD_ADDR_EXP 66
2578: PUSH
2579: CALL_OW 44
2583: ST_TO_ADDR
// InitHC_All ( ) ;
2584: CALL_OW 584
// if Difficulty > 1 then
2588: LD_OWVAR 67
2592: PUSH
2593: LD_INT 1
2595: GREATER
2596: IFFALSE 2716
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2598: LD_ADDR_VAR 0 2
2602: PUSH
2603: DOUBLE
2604: LD_INT 1
2606: DEC
2607: ST_TO_ADDR
2608: LD_INT 3
2610: PUSH
2611: LD_INT 4
2613: PUSH
2614: LD_INT 5
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: PUSH
2627: LD_INT 1
2629: PLUS
2630: ARRAY
2631: PUSH
2632: FOR_TO
2633: IFFALSE 2714
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 5
2640: PUSH
2641: LD_INT 6
2643: PUSH
2644: LD_INT 7
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: PUSH
2652: LD_OWVAR 67
2656: PUSH
2657: LD_INT 1
2659: PLUS
2660: ARRAY
2661: PPUSH
2662: CALL_OW 381
// un := CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 62
2683: PUSH
2684: LD_INT 63
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: LD_VAR 0 2
2695: PUSH
2696: LD_INT 2
2698: MOD
2699: PUSH
2700: LD_INT 1
2702: PLUS
2703: ARRAY
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// end ;
2712: GO 2632
2714: POP
2715: POP
// end ; uc_side := 6 ;
2716: LD_ADDR_OWVAR 20
2720: PUSH
2721: LD_INT 6
2723: ST_TO_ADDR
// uc_nation := 3 ;
2724: LD_ADDR_OWVAR 21
2728: PUSH
2729: LD_INT 3
2731: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2732: LD_ADDR_VAR 0 5
2736: PUSH
2737: LD_INT 14
2739: PUSH
2740: LD_INT 15
2742: PUSH
2743: LD_INT 48
2745: PUSH
2746: LD_INT 24
2748: PUSH
2749: LD_INT 149
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: ST_TO_ADDR
// for i in tmp do
2759: LD_ADDR_VAR 0 2
2763: PUSH
2764: LD_VAR 0 5
2768: PUSH
2769: FOR_IN
2770: IFFALSE 2818
// begin for j := 1 to 2 do
2772: LD_ADDR_VAR 0 3
2776: PUSH
2777: DOUBLE
2778: LD_INT 1
2780: DEC
2781: ST_TO_ADDR
2782: LD_INT 2
2784: PUSH
2785: FOR_TO
2786: IFFALSE 2814
// begin PrepareSoldier ( false , 7 ) ;
2788: LD_INT 0
2790: PPUSH
2791: LD_INT 7
2793: PPUSH
2794: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2798: CALL_OW 44
2802: PPUSH
2803: LD_VAR 0 2
2807: PPUSH
2808: CALL_OW 52
// end ;
2812: GO 2785
2814: POP
2815: POP
// end ;
2816: GO 2769
2818: POP
2819: POP
// end ;
2820: LD_VAR 0 1
2824: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2825: LD_INT 0
2827: PPUSH
2828: PPUSH
2829: PPUSH
2830: PPUSH
// uc_side := 3 ;
2831: LD_ADDR_OWVAR 20
2835: PUSH
2836: LD_INT 3
2838: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2839: LD_ADDR_OWVAR 21
2843: PUSH
2844: LD_INT 1
2846: PPUSH
2847: LD_INT 3
2849: PPUSH
2850: CALL_OW 12
2854: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2855: LD_ADDR_VAR 0 4
2859: PUSH
2860: LD_INT 5
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 517
2870: ST_TO_ADDR
// for i := 1 to 3 do
2871: LD_ADDR_VAR 0 2
2875: PUSH
2876: DOUBLE
2877: LD_INT 1
2879: DEC
2880: ST_TO_ADDR
2881: LD_INT 3
2883: PUSH
2884: FOR_TO
2885: IFFALSE 2954
// begin PrepareHuman ( false , 33 , 0 ) ;
2887: LD_INT 0
2889: PPUSH
2890: LD_INT 33
2892: PPUSH
2893: LD_INT 0
2895: PPUSH
2896: CALL_OW 380
// un := CreateHuman ;
2900: LD_ADDR_VAR 0 3
2904: PUSH
2905: CALL_OW 44
2909: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_VAR 0 4
2919: PUSH
2920: LD_INT 1
2922: ARRAY
2923: PUSH
2924: LD_VAR 0 2
2928: ARRAY
2929: PPUSH
2930: LD_VAR 0 4
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PUSH
2939: LD_VAR 0 2
2943: ARRAY
2944: PPUSH
2945: LD_INT 1
2947: PPUSH
2948: CALL_OW 601
// end ;
2952: GO 2884
2954: POP
2955: POP
// end ;
2956: LD_VAR 0 1
2960: RET
// export function PrepareFirstScene ; var i , un ; begin
2961: LD_INT 0
2963: PPUSH
2964: PPUSH
2965: PPUSH
// uc_side := 4 ;
2966: LD_ADDR_OWVAR 20
2970: PUSH
2971: LD_INT 4
2973: ST_TO_ADDR
// uc_nation := 1 ;
2974: LD_ADDR_OWVAR 21
2978: PUSH
2979: LD_INT 1
2981: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 33
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 380
// for i := 1 to 2 do
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 2
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3074
// begin un := CreateHuman ;
3011: LD_ADDR_VAR 0 3
3015: PUSH
3016: CALL_OW 44
3020: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3021: LD_VAR 0 3
3025: PPUSH
3026: LD_INT 1
3028: PPUSH
3029: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3033: LD_VAR 0 3
3037: PPUSH
3038: LD_INT 6
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3048: LD_VAR 0 3
3052: PPUSH
3053: LD_INT 1
3055: PPUSH
3056: CALL 70125 0 2
// SetLives ( un , 300 ) ;
3060: LD_VAR 0 3
3064: PPUSH
3065: LD_INT 300
3067: PPUSH
3068: CALL_OW 234
// end ;
3072: GO 3008
3074: POP
3075: POP
// uc_side := 3 ;
3076: LD_ADDR_OWVAR 20
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// uc_nation := 3 ;
3084: LD_ADDR_OWVAR 21
3088: PUSH
3089: LD_INT 3
3091: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3092: LD_INT 1
3094: PPUSH
3095: LD_INT 5
3097: PPUSH
3098: CALL_OW 381
// for i := 1 to 3 do
3102: LD_ADDR_VAR 0 2
3106: PUSH
3107: DOUBLE
3108: LD_INT 1
3110: DEC
3111: ST_TO_ADDR
3112: LD_INT 3
3114: PUSH
3115: FOR_TO
3116: IFFALSE 3189
// begin un := CreateHuman ;
3118: LD_ADDR_VAR 0 3
3122: PUSH
3123: CALL_OW 44
3127: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3128: LD_ADDR_EXP 64
3132: PUSH
3133: LD_EXP 64
3137: PPUSH
3138: LD_VAR 0 3
3142: PPUSH
3143: CALL 66973 0 2
3147: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3148: LD_VAR 0 3
3152: PPUSH
3153: LD_INT 4
3155: PPUSH
3156: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3160: LD_VAR 0 3
3164: PPUSH
3165: LD_INT 7
3167: PPUSH
3168: LD_INT 0
3170: PPUSH
3171: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3175: LD_VAR 0 3
3179: PPUSH
3180: LD_INT 4
3182: PPUSH
3183: CALL 70125 0 2
// end ;
3187: GO 3115
3189: POP
3190: POP
// ruCommisar := CreateHuman ;
3191: LD_ADDR_EXP 65
3195: PUSH
3196: CALL_OW 44
3200: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3201: LD_EXP 65
3205: PPUSH
3206: LD_INT 124
3208: PPUSH
3209: LD_INT 37
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3219: LD_EXP 65
3223: PPUSH
3224: LD_INT 3
3226: PPUSH
3227: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3231: LD_EXP 65
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: CALL 70125 0 2
// end ;
3243: LD_VAR 0 1
3247: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3248: LD_INT 0
3250: PPUSH
3251: PPUSH
3252: PPUSH
3253: PPUSH
// uc_side := 6 ;
3254: LD_ADDR_OWVAR 20
3258: PUSH
3259: LD_INT 6
3261: ST_TO_ADDR
// uc_nation := 3 ;
3262: LD_ADDR_OWVAR 21
3266: PUSH
3267: LD_INT 3
3269: ST_TO_ADDR
// ruPatrol := [ ] ;
3270: LD_ADDR_EXP 71
3274: PUSH
3275: EMPTY
3276: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3277: LD_ADDR_VAR 0 4
3281: PUSH
3282: LD_INT 26
3284: PUSH
3285: LD_INT 30
3287: PUSH
3288: LD_INT 39
3290: PUSH
3291: LD_INT 43
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: ST_TO_ADDR
// for i := 1 to spawn do
3300: LD_ADDR_VAR 0 2
3304: PUSH
3305: DOUBLE
3306: LD_INT 1
3308: DEC
3309: ST_TO_ADDR
3310: LD_VAR 0 4
3314: PUSH
3315: FOR_TO
3316: IFFALSE 3427
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3318: LD_INT 0
3320: PPUSH
3321: LD_INT 4
3323: PUSH
3324: LD_INT 5
3326: PUSH
3327: LD_INT 6
3329: PUSH
3330: LD_INT 7
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: PUSH
3339: LD_OWVAR 67
3343: ARRAY
3344: PPUSH
3345: CALL_OW 381
// un := CreateHuman ;
3349: LD_ADDR_VAR 0 3
3353: PUSH
3354: CALL_OW 44
3358: ST_TO_ADDR
// SetTag ( un , i ) ;
3359: LD_VAR 0 3
3363: PPUSH
3364: LD_VAR 0 2
3368: PPUSH
3369: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3373: LD_ADDR_EXP 71
3377: PUSH
3378: LD_EXP 71
3382: PPUSH
3383: LD_VAR 0 3
3387: PPUSH
3388: CALL 66973 0 2
3392: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: LD_VAR 0 4
3402: PUSH
3403: LD_VAR 0 2
3407: ARRAY
3408: PPUSH
3409: LD_INT 0
3411: PPUSH
3412: CALL_OW 49
// ComHold ( un ) ;
3416: LD_VAR 0 3
3420: PPUSH
3421: CALL_OW 140
// end ;
3425: GO 3315
3427: POP
3428: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3429: LD_ADDR_VAR 0 4
3433: PUSH
3434: LD_INT 48
3436: PUSH
3437: LD_INT 49
3439: PUSH
3440: LD_INT 50
3442: PUSH
3443: LD_INT 51
3445: PUSH
3446: LD_INT 52
3448: PUSH
3449: LD_INT 53
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: ST_TO_ADDR
// for i := 1 to spawn do
3460: LD_ADDR_VAR 0 2
3464: PUSH
3465: DOUBLE
3466: LD_INT 1
3468: DEC
3469: ST_TO_ADDR
3470: LD_VAR 0 4
3474: PUSH
3475: FOR_TO
3476: IFFALSE 3585
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3478: LD_INT 0
3480: PPUSH
3481: LD_INT 4
3483: PUSH
3484: LD_INT 5
3486: PUSH
3487: LD_INT 6
3489: PUSH
3490: LD_INT 7
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: LD_OWVAR 67
3503: ARRAY
3504: PPUSH
3505: CALL_OW 381
// un := CreateHuman ;
3509: LD_ADDR_VAR 0 3
3513: PUSH
3514: CALL_OW 44
3518: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3519: LD_VAR 0 3
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3531: LD_ADDR_EXP 71
3535: PUSH
3536: LD_EXP 71
3540: PPUSH
3541: LD_VAR 0 3
3545: PPUSH
3546: CALL 66973 0 2
3550: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_VAR 0 4
3560: PUSH
3561: LD_VAR 0 2
3565: ARRAY
3566: PPUSH
3567: LD_INT 0
3569: PPUSH
3570: CALL_OW 49
// ComHold ( un ) ;
3574: LD_VAR 0 3
3578: PPUSH
3579: CALL_OW 140
// end ;
3583: GO 3475
3585: POP
3586: POP
// end ;
3587: LD_VAR 0 1
3591: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3592: LD_INT 0
3594: PPUSH
3595: PPUSH
3596: PPUSH
3597: PPUSH
// uc_side := 6 ;
3598: LD_ADDR_OWVAR 20
3602: PUSH
3603: LD_INT 6
3605: ST_TO_ADDR
// uc_nation := nation_russian ;
3606: LD_ADDR_OWVAR 21
3610: PUSH
3611: LD_INT 3
3613: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3614: LD_ADDR_VAR 0 4
3618: PUSH
3619: LD_INT 54
3621: PUSH
3622: LD_INT 55
3624: PUSH
3625: LD_INT 56
3627: PUSH
3628: LD_INT 57
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: ST_TO_ADDR
// for i := 1 to spawn do
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: DOUBLE
3643: LD_INT 1
3645: DEC
3646: ST_TO_ADDR
3647: LD_VAR 0 4
3651: PUSH
3652: FOR_TO
3653: IFFALSE 3762
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3655: LD_INT 0
3657: PPUSH
3658: LD_INT 4
3660: PUSH
3661: LD_INT 5
3663: PUSH
3664: LD_INT 6
3666: PUSH
3667: LD_INT 7
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: PUSH
3676: LD_OWVAR 67
3680: ARRAY
3681: PPUSH
3682: CALL_OW 381
// un := CreateHuman ;
3686: LD_ADDR_VAR 0 3
3690: PUSH
3691: CALL_OW 44
3695: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3696: LD_VAR 0 3
3700: PPUSH
3701: LD_INT 0
3703: PPUSH
3704: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3708: LD_ADDR_EXP 71
3712: PUSH
3713: LD_EXP 71
3717: PPUSH
3718: LD_VAR 0 3
3722: PPUSH
3723: CALL 66973 0 2
3727: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3728: LD_VAR 0 3
3732: PPUSH
3733: LD_VAR 0 4
3737: PUSH
3738: LD_VAR 0 2
3742: ARRAY
3743: PPUSH
3744: LD_INT 0
3746: PPUSH
3747: CALL_OW 49
// ComHold ( un ) ;
3751: LD_VAR 0 3
3755: PPUSH
3756: CALL_OW 140
// end ;
3760: GO 3652
3762: POP
3763: POP
// end ; end_of_file
3764: LD_VAR 0 1
3768: RET
// export function Action ; var speaker , i , tmp ; begin
3769: LD_INT 0
3771: PPUSH
3772: PPUSH
3773: PPUSH
3774: PPUSH
// Video ( true ) ;
3775: LD_INT 1
3777: PPUSH
3778: CALL 66945 0 1
// hasNormalScene := Kaia or Givi ;
3782: LD_ADDR_EXP 5
3786: PUSH
3787: LD_EXP 51
3791: PUSH
3792: LD_EXP 47
3796: OR
3797: ST_TO_ADDR
// if hasNormalScene then
3798: LD_EXP 5
3802: IFFALSE 4043
// begin for i in americanSquad do
3804: LD_ADDR_VAR 0 3
3808: PUSH
3809: LD_EXP 58
3813: PUSH
3814: FOR_IN
3815: IFFALSE 3861
// begin SetClass ( i , class_prison ) ;
3817: LD_VAR 0 3
3821: PPUSH
3822: LD_INT 33
3824: PPUSH
3825: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3829: LD_VAR 0 3
3833: PPUSH
3834: LD_INT 78
3836: PPUSH
3837: LD_INT 16
3839: PPUSH
3840: LD_INT 5
3842: PPUSH
3843: LD_INT 0
3845: PPUSH
3846: CALL_OW 50
// ComHold ( i ) ;
3850: LD_VAR 0 3
3854: PPUSH
3855: CALL_OW 140
// end ;
3859: GO 3814
3861: POP
3862: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3863: LD_ADDR_VAR 0 4
3867: PUSH
3868: LD_EXP 48
3872: PUSH
3873: LD_EXP 49
3877: PUSH
3878: LD_EXP 50
3882: PUSH
3883: LD_EXP 51
3887: PUSH
3888: LD_EXP 52
3892: PUSH
3893: LD_EXP 53
3897: PUSH
3898: LD_EXP 54
3902: PUSH
3903: LD_EXP 55
3907: PUSH
3908: LD_EXP 47
3912: PUSH
3913: LD_EXP 56
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: LD_EXP 57
3934: UNION
3935: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3936: LD_EXP 46
3940: PPUSH
3941: LD_INT 33
3943: PPUSH
3944: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3948: LD_EXP 46
3952: PPUSH
3953: LD_INT 117
3955: PPUSH
3956: LD_INT 24
3958: PPUSH
3959: LD_INT 3
3961: PPUSH
3962: LD_INT 0
3964: PPUSH
3965: CALL 69113 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3969: LD_EXP 46
3973: PPUSH
3974: LD_INT 123
3976: PPUSH
3977: LD_INT 39
3979: PPUSH
3980: CALL_OW 118
// for i in tmp do
3984: LD_ADDR_VAR 0 3
3988: PUSH
3989: LD_VAR 0 4
3993: PUSH
3994: FOR_IN
3995: IFFALSE 4041
// begin SetClass ( i , class_prison ) ;
3997: LD_VAR 0 3
4001: PPUSH
4002: LD_INT 33
4004: PPUSH
4005: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4009: LD_VAR 0 3
4013: PPUSH
4014: LD_INT 3
4016: PPUSH
4017: LD_INT 0
4019: PPUSH
4020: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4024: LD_VAR 0 3
4028: PPUSH
4029: LD_INT 113
4031: PPUSH
4032: LD_INT 16
4034: PPUSH
4035: CALL_OW 118
// end ;
4039: GO 3994
4041: POP
4042: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4043: LD_INT 124
4045: PPUSH
4046: LD_INT 39
4048: PPUSH
4049: CALL_OW 86
// PrepareDeadBodies ;
4053: CALL 2825 0 0
// PrepareFirstScene ;
4057: CALL 2961 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4061: LD_INT 152
4063: PPUSH
4064: LD_INT 65
4066: PPUSH
4067: LD_INT 2
4069: PPUSH
4070: LD_INT 70
4072: NEG
4073: PPUSH
4074: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4078: LD_INT 152
4080: PPUSH
4081: LD_INT 65
4083: PPUSH
4084: LD_INT 2
4086: PPUSH
4087: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4091: LD_INT 122
4093: PPUSH
4094: LD_INT 40
4096: PPUSH
4097: LD_INT 2
4099: PPUSH
4100: LD_INT 8
4102: NEG
4103: PPUSH
4104: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4108: LD_INT 124
4110: PPUSH
4111: LD_INT 37
4113: PPUSH
4114: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4118: LD_EXP 65
4122: PPUSH
4123: LD_STRING DRum-Execution-1
4125: PPUSH
4126: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4130: LD_EXP 65
4134: PPUSH
4135: LD_STRING DRum-Execution-2
4137: PPUSH
4138: CALL_OW 88
// wait ( 0 0$01 ) ;
4142: LD_INT 35
4144: PPUSH
4145: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4149: LD_EXP 65
4153: PPUSH
4154: LD_STRING DRum-Execution-3
4156: PPUSH
4157: CALL_OW 88
// wait ( 0 0$1 ) ;
4161: LD_INT 35
4163: PPUSH
4164: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4168: LD_EXP 65
4172: PPUSH
4173: LD_STRING DRum-Execution-4
4175: PPUSH
4176: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4180: LD_EXP 64
4184: PUSH
4185: LD_INT 1
4187: ARRAY
4188: PPUSH
4189: LD_INT 122
4191: PPUSH
4192: LD_INT 39
4194: PPUSH
4195: CALL_OW 428
4199: PPUSH
4200: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4204: LD_EXP 64
4208: PUSH
4209: LD_INT 2
4211: ARRAY
4212: PPUSH
4213: LD_INT 123
4215: PPUSH
4216: LD_INT 41
4218: PPUSH
4219: CALL_OW 428
4223: PPUSH
4224: CALL_OW 115
// AddComHold ( russianKillers ) ;
4228: LD_EXP 64
4232: PPUSH
4233: CALL_OW 200
// wait ( 0 0$1 ) ;
4237: LD_INT 35
4239: PPUSH
4240: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4244: LD_INT 122
4246: PPUSH
4247: LD_INT 40
4249: PPUSH
4250: LD_INT 2
4252: PPUSH
4253: CALL_OW 331
// for i in russianKillers union ruCommisar do
4257: LD_ADDR_VAR 0 3
4261: PUSH
4262: LD_EXP 64
4266: PUSH
4267: LD_EXP 65
4271: UNION
4272: PUSH
4273: FOR_IN
4274: IFFALSE 4287
// RemoveUnit ( i ) ;
4276: LD_VAR 0 3
4280: PPUSH
4281: CALL_OW 64
4285: GO 4273
4287: POP
4288: POP
// if hasNormalScene then
4289: LD_EXP 5
4293: IFFALSE 4301
// ActionNormal else
4295: CALL 4310 0 0
4299: GO 4305
// ActionAdditional ;
4301: CALL 6128 0 0
// end ;
4305: LD_VAR 0 1
4309: RET
// function ActionNormal ; var i , tmp ; begin
4310: LD_INT 0
4312: PPUSH
4313: PPUSH
4314: PPUSH
// CenterNowOnUnits ( Heike ) ;
4315: LD_EXP 46
4319: PPUSH
4320: CALL_OW 87
// wait ( 0 0$1 ) ;
4324: LD_INT 35
4326: PPUSH
4327: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4331: LD_EXP 46
4335: PPUSH
4336: LD_INT 115
4338: PPUSH
4339: LD_INT 19
4341: PPUSH
4342: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4346: LD_EXP 46
4350: PPUSH
4351: LD_INT 113
4353: PPUSH
4354: LD_INT 16
4356: PPUSH
4357: CALL_OW 178
// wait ( 0 0$2 ) ;
4361: LD_INT 70
4363: PPUSH
4364: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4368: LD_EXP 46
4372: PPUSH
4373: LD_STRING DH-Conspiracy-1
4375: PPUSH
4376: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4380: LD_EXP 51
4384: PPUSH
4385: LD_STRING DK-Conspiracy-2
4387: PPUSH
4388: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4392: LD_EXP 47
4396: PPUSH
4397: LD_STRING DG-Conspiracy-3
4399: PPUSH
4400: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4404: LD_EXP 47
4408: PPUSH
4409: LD_STRING DG-Conspiracy-4
4411: PPUSH
4412: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4416: LD_EXP 46
4420: PPUSH
4421: LD_STRING DH-Conspiracy-5
4423: PPUSH
4424: CALL_OW 88
// if IsOk ( Kamil ) then
4428: LD_EXP 50
4432: PPUSH
4433: CALL_OW 302
4437: IFFALSE 4495
// begin hasVodka := true ;
4439: LD_ADDR_EXP 4
4443: PUSH
4444: LD_INT 1
4446: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4447: LD_EXP 50
4451: PPUSH
4452: LD_STRING DKam-Conspiracy-6
4454: PPUSH
4455: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4459: LD_EXP 50
4463: PPUSH
4464: LD_STRING DKam-Conspiracy-7
4466: PPUSH
4467: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4471: LD_EXP 50
4475: PPUSH
4476: LD_STRING DKam-Conspiracy-8
4478: PPUSH
4479: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4483: LD_EXP 50
4487: PPUSH
4488: LD_STRING DKam-Conspiracy-9
4490: PPUSH
4491: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4495: LD_EXP 52
4499: PPUSH
4500: CALL_OW 302
4504: IFFALSE 4685
// begin americanContact := true ;
4506: LD_ADDR_EXP 10
4510: PUSH
4511: LD_INT 1
4513: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4514: LD_STRING M1-american
4516: PPUSH
4517: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4521: LD_EXP 52
4525: PPUSH
4526: LD_STRING DS-Conspiracy-10
4528: PPUSH
4529: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4533: LD_EXP 53
4537: PPUSH
4538: LD_STRING DM-Conspiracy-11
4540: PPUSH
4541: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4545: LD_EXP 52
4549: PPUSH
4550: LD_STRING DS-Conspiracy-12
4552: PPUSH
4553: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4557: LD_INT 84
4559: PPUSH
4560: LD_INT 19
4562: PPUSH
4563: LD_INT 105
4565: PPUSH
4566: CALL 19975 0 3
// if johnnySaved then
4570: LD_EXP 3
4574: IFFALSE 4614
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4576: LD_EXP 52
4580: PPUSH
4581: LD_STRING DS-Conspiracy-13
4583: PPUSH
4584: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4588: LD_EXP 46
4592: PPUSH
4593: LD_STRING DH-Conspiracy-14
4595: PPUSH
4596: CALL_OW 88
// Say ( Heike , DH-Conspiracy-15 ) ;
4600: LD_EXP 46
4604: PPUSH
4605: LD_STRING DH-Conspiracy-15
4607: PPUSH
4608: CALL_OW 88
// end else
4612: GO 4650
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4614: LD_EXP 52
4618: PPUSH
4619: LD_STRING DS-Conspiracy-a-13
4621: PPUSH
4622: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4626: LD_EXP 46
4630: PPUSH
4631: LD_STRING DH-Conspiracy-a-14
4633: PPUSH
4634: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4638: LD_EXP 46
4642: PPUSH
4643: LD_STRING DH-Conspiracy-a-15
4645: PPUSH
4646: CALL_OW 88
// end ; if IsOk ( Givi ) then
4650: LD_EXP 47
4654: PPUSH
4655: CALL_OW 302
4659: IFFALSE 4685
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4661: LD_EXP 47
4665: PPUSH
4666: LD_STRING DG-Conspiracy-a-16
4668: PPUSH
4669: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4673: LD_EXP 46
4677: PPUSH
4678: LD_STRING DH-Conspiracy-a-17
4680: PPUSH
4681: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4685: LD_EXP 46
4689: PPUSH
4690: LD_STRING DH-Conspiracy-16
4692: PPUSH
4693: CALL_OW 88
// if IsOk ( Givi ) then
4697: LD_EXP 47
4701: PPUSH
4702: CALL_OW 302
4706: IFFALSE 4978
// begin hasStimDrugs := true ;
4708: LD_ADDR_EXP 9
4712: PUSH
4713: LD_INT 1
4715: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4716: LD_STRING M1-drugs
4718: PPUSH
4719: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4723: LD_EXP 47
4727: PPUSH
4728: LD_STRING DG-Conspiracy-17
4730: PPUSH
4731: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4735: LD_INT 162
4737: PPUSH
4738: LD_INT 2
4740: PPUSH
4741: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4745: LD_INT 194
4747: PPUSH
4748: LD_INT 98
4750: PPUSH
4751: LD_INT 105
4753: PPUSH
4754: CALL 19975 0 3
// SetSide ( drugsLab , 3 ) ;
4758: LD_INT 162
4760: PPUSH
4761: LD_INT 3
4763: PPUSH
4764: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4768: LD_EXP 47
4772: PPUSH
4773: LD_STRING DG-Conspiracy-18
4775: PPUSH
4776: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4780: LD_EXP 47
4784: PPUSH
4785: LD_STRING DG-Conspiracy-19
4787: PPUSH
4788: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4792: LD_EXP 47
4796: PPUSH
4797: LD_STRING DG-Conspiracy-20
4799: PPUSH
4800: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4804: LD_EXP 46
4808: PPUSH
4809: LD_STRING DH-Conspiracy-21
4811: PPUSH
4812: CALL_OW 88
// if IsOk ( Kaia ) then
4816: LD_EXP 51
4820: PPUSH
4821: CALL_OW 302
4825: IFFALSE 4899
// begin hasExplosions := true ;
4827: LD_ADDR_EXP 6
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4835: LD_STRING M1-explosive
4837: PPUSH
4838: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4842: LD_EXP 51
4846: PPUSH
4847: LD_STRING DK-Conspiracy-22
4849: PPUSH
4850: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4854: LD_INT 73
4856: PPUSH
4857: LD_INT 2
4859: PPUSH
4860: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4864: LD_INT 170
4866: PPUSH
4867: LD_INT 104
4869: PPUSH
4870: LD_INT 105
4872: PPUSH
4873: CALL 19975 0 3
// SetSide ( barExplosion , 3 ) ;
4877: LD_INT 73
4879: PPUSH
4880: LD_INT 3
4882: PPUSH
4883: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4887: LD_EXP 51
4891: PPUSH
4892: LD_STRING DK-Conspiracy-23
4894: PPUSH
4895: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4899: LD_EXP 54
4903: PPUSH
4904: CALL_OW 302
4908: IFFALSE 4978
// begin hasExplosionsInFactory := true ;
4910: LD_ADDR_EXP 7
4914: PUSH
4915: LD_INT 1
4917: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4918: LD_EXP 54
4922: PPUSH
4923: LD_STRING DO-Conspiracy-24
4925: PPUSH
4926: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4930: LD_INT 175
4932: PPUSH
4933: LD_INT 54
4935: PPUSH
4936: LD_INT 70
4938: PPUSH
4939: CALL 19975 0 3
// if IsOk ( Markov ) then
4943: LD_EXP 53
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4978
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4954: LD_EXP 53
4958: PPUSH
4959: LD_STRING DMar-Conspiracy-25
4961: PPUSH
4962: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4966: LD_EXP 53
4970: PPUSH
4971: LD_STRING DMar-Conspiracy-26
4973: PPUSH
4974: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4978: LD_EXP 55
4982: PPUSH
4983: CALL_OW 302
4987: PUSH
4988: LD_EXP 51
4992: PPUSH
4993: CALL_OW 302
4997: AND
4998: IFFALSE 5458
// begin hasWeapons := true ;
5000: LD_ADDR_EXP 19
5004: PUSH
5005: LD_INT 1
5007: ST_TO_ADDR
// hasRevolver := true ;
5008: LD_ADDR_EXP 8
5012: PUSH
5013: LD_INT 1
5015: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5016: LD_STRING M1-weapons
5018: PPUSH
5019: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5023: LD_EXP 55
5027: PPUSH
5028: LD_STRING DKs-Conspiracy-27
5030: PPUSH
5031: CALL_OW 88
// if IsOk ( Givi ) then
5035: LD_EXP 47
5039: PPUSH
5040: CALL_OW 302
5044: IFFALSE 5060
// Say ( Givi , DG-Conspiracy-28 ) else
5046: LD_EXP 47
5050: PPUSH
5051: LD_STRING DG-Conspiracy-28
5053: PPUSH
5054: CALL_OW 88
5058: GO 5125
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5060: LD_EXP 57
5064: PPUSH
5065: LD_INT 26
5067: PUSH
5068: LD_INT 1
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 72
5079: PUSH
5080: LD_INT 1
5082: ARRAY
5083: PPUSH
5084: LD_STRING DArm-Conspiracy-a-28
5086: PPUSH
5087: CALL_OW 88
5091: NOT
5092: IFFALSE 5125
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5094: LD_EXP 57
5098: PPUSH
5099: LD_INT 26
5101: PUSH
5102: LD_INT 2
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL_OW 72
5113: PUSH
5114: LD_INT 1
5116: ARRAY
5117: PPUSH
5118: LD_STRING DArf-Conspiracy-a-28
5120: PPUSH
5121: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5125: LD_EXP 55
5129: PPUSH
5130: LD_STRING DKs-Conspiracy-29
5132: PPUSH
5133: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5137: LD_INT 192
5139: PPUSH
5140: LD_INT 122
5142: PPUSH
5143: LD_INT 105
5145: PPUSH
5146: CALL 19975 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5150: LD_EXP 55
5154: PPUSH
5155: LD_STRING DKs-Conspiracy-30
5157: PPUSH
5158: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5162: LD_EXP 51
5166: PPUSH
5167: LD_STRING DK-Conspiracy-31
5169: PPUSH
5170: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5174: LD_EXP 53
5178: PPUSH
5179: LD_STRING DMar-Conspiracy-33
5181: PPUSH
5182: CALL_OW 88
5186: NOT
5187: PUSH
5188: LD_EXP 57
5192: AND
5193: IFFALSE 5260
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5195: LD_EXP 57
5199: PPUSH
5200: LD_INT 26
5202: PUSH
5203: LD_INT 1
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 72
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_STRING DArm-Conspiracy-a-34
5221: PPUSH
5222: CALL_OW 88
5226: NOT
5227: IFFALSE 5260
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5229: LD_EXP 57
5233: PPUSH
5234: LD_INT 26
5236: PUSH
5237: LD_INT 2
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PPUSH
5244: CALL_OW 72
5248: PUSH
5249: LD_INT 1
5251: ARRAY
5252: PPUSH
5253: LD_STRING DArf-Conspiracy-a-34
5255: PPUSH
5256: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5260: LD_EXP 51
5264: PPUSH
5265: LD_STRING DK-Conspiracy-34
5267: PPUSH
5268: CALL_OW 88
// if IsOk ( Markov ) then
5272: LD_EXP 53
5276: PPUSH
5277: CALL_OW 302
5281: IFFALSE 5366
// begin hasSniperRifle := true ;
5283: LD_ADDR_EXP 11
5287: PUSH
5288: LD_INT 1
5290: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5291: LD_EXP 53
5295: PPUSH
5296: LD_STRING DMar-Conspiracy-35
5298: PPUSH
5299: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5303: LD_EXP 51
5307: PPUSH
5308: LD_STRING DK-Conspiracy-36
5310: PPUSH
5311: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5315: LD_EXP 53
5319: PPUSH
5320: LD_STRING DMar-Conspiracy-37
5322: PPUSH
5323: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5327: LD_EXP 53
5331: PPUSH
5332: LD_STRING DMar-Conspiracy-38
5334: PPUSH
5335: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5339: LD_INT 137
5341: PPUSH
5342: LD_INT 98
5344: PPUSH
5345: LD_INT 105
5347: PPUSH
5348: CALL 19975 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5352: LD_EXP 53
5356: PPUSH
5357: LD_STRING DMar-Conspiracy-39
5359: PPUSH
5360: CALL_OW 88
// end else
5364: GO 5458
// if heikeSecondSquad then
5366: LD_EXP 57
5370: IFFALSE 5458
// begin hasSniperRifle := true ;
5372: LD_ADDR_EXP 11
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5380: LD_INT 137
5382: PPUSH
5383: LD_INT 98
5385: PPUSH
5386: LD_INT 105
5388: PPUSH
5389: CALL 19975 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5393: LD_EXP 57
5397: PPUSH
5398: LD_INT 26
5400: PUSH
5401: LD_INT 1
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PPUSH
5408: CALL_OW 72
5412: PUSH
5413: LD_INT 1
5415: ARRAY
5416: PPUSH
5417: LD_STRING DArm-Conspiracy-a-35
5419: PPUSH
5420: CALL_OW 88
5424: NOT
5425: IFFALSE 5458
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5427: LD_EXP 57
5431: PPUSH
5432: LD_INT 26
5434: PUSH
5435: LD_INT 2
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PPUSH
5442: CALL_OW 72
5446: PUSH
5447: LD_INT 1
5449: ARRAY
5450: PPUSH
5451: LD_STRING DArf-Conspiracy-a-35
5453: PPUSH
5454: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5458: LD_EXP 46
5462: PPUSH
5463: LD_STRING DH-Conspiracy-40
5465: PPUSH
5466: CALL_OW 88
// if IsOk ( Mike ) then
5470: LD_EXP 48
5474: PPUSH
5475: CALL_OW 302
5479: IFFALSE 5538
// begin hasScout := true ;
5481: LD_ADDR_EXP 12
5485: PUSH
5486: LD_INT 1
5488: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5489: LD_EXP 48
5493: PPUSH
5494: LD_STRING DM-Conspiracy-41
5496: PPUSH
5497: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5501: LD_EXP 48
5505: PPUSH
5506: LD_STRING DM-Conspiracy-42
5508: PPUSH
5509: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5513: LD_INT 73
5515: PPUSH
5516: LD_INT 102
5518: PPUSH
5519: LD_INT 105
5521: PPUSH
5522: CALL 19975 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5526: LD_EXP 48
5530: PPUSH
5531: LD_STRING DM-Conspiracy-43
5533: PPUSH
5534: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5538: LD_EXP 4
5542: PUSH
5543: LD_EXP 51
5547: PPUSH
5548: CALL_OW 302
5552: AND
5553: PUSH
5554: LD_EXP 55
5558: PPUSH
5559: CALL_OW 302
5563: AND
5564: IFFALSE 5610
// begin hasMethanol := true ;
5566: LD_ADDR_EXP 13
5570: PUSH
5571: LD_INT 1
5573: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5574: LD_EXP 51
5578: PPUSH
5579: LD_STRING DK-Conspiracy-44
5581: PPUSH
5582: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5586: LD_EXP 51
5590: PPUSH
5591: LD_STRING DK-Conspiracy-45
5593: PPUSH
5594: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5598: LD_EXP 50
5602: PPUSH
5603: LD_STRING DKam-Conspiracy-46
5605: PPUSH
5606: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5610: LD_EXP 46
5614: PPUSH
5615: LD_STRING DH-Conspiracy-47
5617: PPUSH
5618: CALL_OW 88
// wait ( 0 0$1 ) ;
5622: LD_INT 35
5624: PPUSH
5625: CALL_OW 67
// your_side := 8 ;
5629: LD_ADDR_OWVAR 2
5633: PUSH
5634: LD_INT 8
5636: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5637: LD_INT 1
5639: PPUSH
5640: LD_INT 1
5642: PPUSH
5643: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5647: LD_ADDR_VAR 0 2
5651: PUSH
5652: LD_INT 2
5654: PUSH
5655: LD_INT 22
5657: PUSH
5658: LD_INT 2
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PUSH
5665: LD_INT 22
5667: PUSH
5668: LD_INT 4
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 21
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PPUSH
5694: CALL_OW 69
5698: PUSH
5699: FOR_IN
5700: IFFALSE 5713
// RemoveUnit ( i ) ;
5702: LD_VAR 0 2
5706: PPUSH
5707: CALL_OW 64
5711: GO 5699
5713: POP
5714: POP
// wait ( 0 0$0.3 ) ;
5715: LD_INT 10
5717: PPUSH
5718: CALL_OW 67
// Query ( StartInfo1 ) ;
5722: LD_STRING StartInfo1
5724: PPUSH
5725: CALL_OW 97
// wait ( 0 0$1 ) ;
5729: LD_INT 35
5731: PPUSH
5732: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5736: LD_STRING colors_night.txt
5738: PPUSH
5739: CALL_OW 544
// Query ( StartInfo2 ) ;
5743: LD_STRING StartInfo2
5745: PPUSH
5746: CALL_OW 97
// PrepareGame ;
5750: CALL 1056 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5754: LD_INT 152
5756: PPUSH
5757: LD_INT 65
5759: PPUSH
5760: LD_INT 2
5762: PPUSH
5763: LD_INT 70
5765: NEG
5766: PPUSH
5767: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5771: LD_INT 152
5773: PPUSH
5774: LD_INT 65
5776: PPUSH
5777: LD_INT 2
5779: PPUSH
5780: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5784: LD_INT 133
5786: PPUSH
5787: LD_INT 76
5789: PPUSH
5790: LD_INT 2
5792: PPUSH
5793: LD_INT 6
5795: NEG
5796: PPUSH
5797: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5801: LD_INT 152
5803: PPUSH
5804: LD_INT 65
5806: PPUSH
5807: LD_INT 8
5809: PPUSH
5810: LD_INT 70
5812: NEG
5813: PPUSH
5814: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5818: LD_INT 152
5820: PPUSH
5821: LD_INT 65
5823: PPUSH
5824: LD_INT 8
5826: PPUSH
5827: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5831: LD_INT 133
5833: PPUSH
5834: LD_INT 76
5836: PPUSH
5837: LD_INT 8
5839: PPUSH
5840: LD_INT 6
5842: NEG
5843: PPUSH
5844: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5848: LD_INT 23
5850: PPUSH
5851: CALL_OW 87
// dialogue_skipped := false ;
5855: LD_ADDR_OWVAR 59
5859: PUSH
5860: LD_INT 0
5862: ST_TO_ADDR
// InitRuPatrols ;
5863: CALL 3248 0 0
// Say ( Heike , DH-Escape-1 ) ;
5867: LD_EXP 46
5871: PPUSH
5872: LD_STRING DH-Escape-1
5874: PPUSH
5875: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5879: LD_EXP 46
5883: PPUSH
5884: LD_STRING DH-Escape-2
5886: PPUSH
5887: CALL_OW 88
// StartLockerMinigame ;
5891: CALL 20760 0 0
// wait ( 0 0$1 ) ;
5895: LD_INT 35
5897: PPUSH
5898: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5902: LD_EXP 46
5906: PPUSH
5907: LD_STRING DH-Escape-4
5909: PPUSH
5910: CALL_OW 88
// wait ( 0 0$3 ) ;
5914: LD_INT 105
5916: PPUSH
5917: CALL_OW 67
// your_side := 2 ;
5921: LD_ADDR_OWVAR 2
5925: PUSH
5926: LD_INT 2
5928: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5929: LD_EXP 46
5933: PPUSH
5934: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5938: LD_INT 152
5940: PPUSH
5941: LD_INT 65
5943: PPUSH
5944: LD_INT 2
5946: PPUSH
5947: LD_INT 70
5949: NEG
5950: PPUSH
5951: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5955: LD_INT 152
5957: PPUSH
5958: LD_INT 65
5960: PPUSH
5961: LD_INT 2
5963: PPUSH
5964: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5968: LD_INT 133
5970: PPUSH
5971: LD_INT 76
5973: PPUSH
5974: LD_INT 8
5976: PPUSH
5977: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5981: LD_EXP 46
5985: PPUSH
5986: LD_INT 128
5988: PPUSH
5989: LD_INT 64
5991: PPUSH
5992: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5996: LD_INT 35
5998: PPUSH
5999: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
6003: LD_EXP 46
6007: PPUSH
6008: LD_INT 128
6010: PPUSH
6011: LD_INT 64
6013: PPUSH
6014: CALL_OW 307
6018: IFFALSE 5996
// ComHold ( Heike ) ;
6020: LD_EXP 46
6024: PPUSH
6025: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6029: LD_EXP 46
6033: PPUSH
6034: LD_STRING DH-Start-1
6036: PPUSH
6037: CALL_OW 88
// if not americanContact then
6041: LD_EXP 10
6045: NOT
6046: IFFALSE 6062
// Say ( Heike , DH-Start-c-2 ) else
6048: LD_EXP 46
6052: PPUSH
6053: LD_STRING DH-Start-c-2
6055: PPUSH
6056: CALL_OW 88
6060: GO 6094
// if johnnySaved then
6062: LD_EXP 3
6066: IFFALSE 6082
// Say ( Heike , DH-Start-a-2 ) else
6068: LD_EXP 46
6072: PPUSH
6073: LD_STRING DH-Start-a-2
6075: PPUSH
6076: CALL_OW 88
6080: GO 6094
// Say ( Heike , DH-Start-b-2 ) ;
6082: LD_EXP 46
6086: PPUSH
6087: LD_STRING DH-Start-b-2
6089: PPUSH
6090: CALL_OW 88
// Video ( false ) ;
6094: LD_INT 0
6096: PPUSH
6097: CALL 66945 0 1
// tick := 0 ;
6101: LD_ADDR_OWVAR 1
6105: PUSH
6106: LD_INT 0
6108: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6109: LD_STRING M1
6111: PPUSH
6112: CALL_OW 337
// enable ( gameStartEvent ) ;
6116: LD_INT 2
6118: ENABLE_MARKED
// SaveForQuickRestart ;
6119: CALL_OW 22
// end ;
6123: LD_VAR 0 1
6127: RET
// function ActionAdditional ; var i , un , tmp ; begin
6128: LD_INT 0
6130: PPUSH
6131: PPUSH
6132: PPUSH
6133: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6134: LD_INT 115
6136: PPUSH
6137: LD_INT 27
6139: PPUSH
6140: LD_INT 2
6142: PPUSH
6143: LD_INT 6
6145: NEG
6146: PPUSH
6147: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6151: LD_EXP 46
6155: PPUSH
6156: LD_INT 115
6158: PPUSH
6159: LD_INT 27
6161: PPUSH
6162: CALL_OW 428
6166: PPUSH
6167: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6171: LD_EXP 46
6175: PPUSH
6176: LD_INT 33
6178: PPUSH
6179: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6183: LD_INT 124
6185: PPUSH
6186: LD_INT 39
6188: PPUSH
6189: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6193: LD_EXP 46
6197: PPUSH
6198: LD_STRING DH-Fail-1
6200: PPUSH
6201: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6205: LD_INT 3
6207: PPUSH
6208: CALL_OW 427
// ComExit ( Heike ) ;
6212: LD_EXP 46
6216: PPUSH
6217: CALL 67371 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6221: LD_EXP 46
6225: PPUSH
6226: LD_INT 109
6228: PPUSH
6229: LD_INT 33
6231: PPUSH
6232: CALL_OW 171
// AddComHold ( Heike ) ;
6236: LD_EXP 46
6240: PPUSH
6241: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6245: LD_INT 115
6247: PPUSH
6248: LD_INT 27
6250: PPUSH
6251: LD_INT 2
6253: PPUSH
6254: CALL_OW 331
// wait ( 0 0$2 ) ;
6258: LD_INT 70
6260: PPUSH
6261: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6265: LD_INT 35
6267: PPUSH
6268: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6272: LD_EXP 46
6276: PPUSH
6277: LD_INT 109
6279: PPUSH
6280: LD_INT 33
6282: PPUSH
6283: CALL_OW 307
6287: IFFALSE 6265
// Say ( Heike , DH-Fail-2 ) ;
6289: LD_EXP 46
6293: PPUSH
6294: LD_STRING DH-Fail-2
6296: PPUSH
6297: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6301: LD_EXP 46
6305: PPUSH
6306: LD_INT 111
6308: PPUSH
6309: LD_INT 48
6311: PPUSH
6312: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6316: LD_INT 35
6318: PPUSH
6319: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6323: LD_EXP 46
6327: PPUSH
6328: LD_INT 111
6330: PPUSH
6331: LD_INT 48
6333: PPUSH
6334: CALL_OW 297
6338: PUSH
6339: LD_INT 4
6341: LESS
6342: IFFALSE 6316
// AddComMoveXY ( Heike , 106 , 72 ) ;
6344: LD_EXP 46
6348: PPUSH
6349: LD_INT 106
6351: PPUSH
6352: LD_INT 72
6354: PPUSH
6355: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6359: LD_EXP 46
6363: PPUSH
6364: LD_INT 103
6366: PPUSH
6367: LD_INT 80
6369: PPUSH
6370: CALL_OW 171
// uc_side := 3 ;
6374: LD_ADDR_OWVAR 20
6378: PUSH
6379: LD_INT 3
6381: ST_TO_ADDR
// uc_nation := 3 ;
6382: LD_ADDR_OWVAR 21
6386: PUSH
6387: LD_INT 3
6389: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6390: LD_INT 1
6392: PPUSH
6393: LD_INT 1
6395: PPUSH
6396: LD_INT 6
6398: PPUSH
6399: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6403: LD_ADDR_OWVAR 29
6407: PUSH
6408: LD_INT 12
6410: PUSH
6411: LD_INT 12
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: ST_TO_ADDR
// un := CreateHuman ;
6418: LD_ADDR_VAR 0 3
6422: PUSH
6423: CALL_OW 44
6427: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6428: LD_VAR 0 3
6432: PPUSH
6433: LD_INT 134
6435: PPUSH
6436: LD_INT 52
6438: PPUSH
6439: LD_INT 4
6441: PPUSH
6442: LD_INT 0
6444: PPUSH
6445: CALL 69113 0 5
// ComTurnUnit ( un , Heike ) ;
6449: LD_VAR 0 3
6453: PPUSH
6454: LD_EXP 46
6458: PPUSH
6459: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6463: LD_VAR 0 3
6467: PPUSH
6468: LD_EXP 46
6472: PPUSH
6473: CALL_OW 112
// if GetSex ( un ) = sex_male then
6477: LD_VAR 0 3
6481: PPUSH
6482: CALL_OW 258
6486: PUSH
6487: LD_INT 1
6489: EQUAL
6490: IFFALSE 6506
// Say ( un , DRum-Fail-3 ) else
6492: LD_VAR 0 3
6496: PPUSH
6497: LD_STRING DRum-Fail-3
6499: PPUSH
6500: CALL_OW 88
6504: GO 6518
// Say ( un , DRuf-Fail-3 ) ;
6506: LD_VAR 0 3
6510: PPUSH
6511: LD_STRING DRuf-Fail-3
6513: PPUSH
6514: CALL_OW 88
// for i := 1 to 3 do
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_INT 3
6530: PUSH
6531: FOR_TO
6532: IFFALSE 6605
// begin PrepareSoldier ( false , 10 ) ;
6534: LD_INT 0
6536: PPUSH
6537: LD_INT 10
6539: PPUSH
6540: CALL_OW 381
// un := CreateHuman ;
6544: LD_ADDR_VAR 0 3
6548: PUSH
6549: CALL_OW 44
6553: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6554: LD_ADDR_VAR 0 4
6558: PUSH
6559: LD_VAR 0 4
6563: PPUSH
6564: LD_VAR 0 3
6568: PPUSH
6569: CALL 66973 0 2
6573: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6574: LD_VAR 0 3
6578: PPUSH
6579: LD_INT 8
6581: PPUSH
6582: LD_INT 0
6584: PPUSH
6585: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6589: LD_VAR 0 3
6593: PPUSH
6594: LD_EXP 46
6598: PPUSH
6599: CALL_OW 119
// end ;
6603: GO 6531
6605: POP
6606: POP
// repeat wait ( 0 0$1 ) ;
6607: LD_INT 35
6609: PPUSH
6610: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6614: LD_VAR 0 4
6618: PPUSH
6619: LD_INT 101
6621: PUSH
6622: LD_INT 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PPUSH
6629: CALL_OW 72
6633: PUSH
6634: LD_INT 1
6636: GREATER
6637: IFFALSE 6607
// wait ( 0 0$1 ) ;
6639: LD_INT 35
6641: PPUSH
6642: CALL_OW 67
// DialogueOn ;
6646: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6650: LD_EXP 46
6654: PPUSH
6655: LD_STRING DH-Fail-4
6657: PPUSH
6658: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6662: LD_EXP 46
6666: PPUSH
6667: LD_STRING DH-Fail-5
6669: PPUSH
6670: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6674: LD_EXP 46
6678: PPUSH
6679: LD_STRING DH-Fail-6
6681: PPUSH
6682: CALL_OW 88
// DialogueOff ;
6686: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6690: LD_VAR 0 4
6694: PPUSH
6695: LD_EXP 46
6699: PPUSH
6700: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6704: LD_INT 35
6706: PPUSH
6707: CALL_OW 67
// until IsDying ( Heike ) ;
6711: LD_EXP 46
6715: PPUSH
6716: CALL_OW 303
6720: IFFALSE 6704
// KillUnit ( Heike ) ;
6722: LD_EXP 46
6726: PPUSH
6727: CALL_OW 66
// wait ( 0 0$4 ) ;
6731: LD_INT 140
6733: PPUSH
6734: CALL_OW 67
// ResetFog ;
6738: CALL_OW 335
// DialogueOn ;
6742: CALL_OW 6
// dwait ( 0 0$1 ) ;
6746: LD_INT 35
6748: PPUSH
6749: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6753: LD_ADDR_EXP 46
6757: PUSH
6758: LD_STRING Heike
6760: PPUSH
6761: LD_EXP 1
6765: NOT
6766: PPUSH
6767: LD_EXP 2
6771: PPUSH
6772: CALL 29271 0 3
6776: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6777: LD_EXP 46
6781: PPUSH
6782: LD_STRING DH-Fail-7
6784: PPUSH
6785: CALL_OW 89
// DialogueOff ;
6789: CALL_OW 7
// YouLost ( Fail ) ;
6793: LD_STRING Fail
6795: PPUSH
6796: CALL_OW 104
// end ;
6800: LD_VAR 0 1
6804: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6805: LD_INT 2
6807: PPUSH
6808: LD_INT 173
6810: PPUSH
6811: LD_INT 29
6813: PPUSH
6814: CALL_OW 293
6818: PUSH
6819: LD_EXP 46
6823: PPUSH
6824: LD_INT 173
6826: PPUSH
6827: LD_INT 29
6829: PPUSH
6830: CALL_OW 297
6834: PUSH
6835: LD_INT 6
6837: LESS
6838: AND
6839: IFFALSE 6856
6841: GO 6843
6843: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6844: LD_EXP 46
6848: PPUSH
6849: LD_STRING DH-EastRoad
6851: PPUSH
6852: CALL_OW 88
6856: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6857: LD_INT 2
6859: PPUSH
6860: LD_INT 149
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: CALL_OW 293
6870: PUSH
6871: LD_EXP 46
6875: PPUSH
6876: LD_INT 149
6878: PPUSH
6879: LD_INT 3
6881: PPUSH
6882: CALL_OW 297
6886: PUSH
6887: LD_INT 6
6889: LESS
6890: AND
6891: IFFALSE 6908
6893: GO 6895
6895: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6896: LD_EXP 46
6900: PPUSH
6901: LD_STRING DH-EastRoad
6903: PPUSH
6904: CALL_OW 88
6908: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6909: LD_INT 2
6911: PPUSH
6912: LD_INT 217
6914: PPUSH
6915: LD_INT 120
6917: PPUSH
6918: CALL_OW 293
6922: PUSH
6923: LD_EXP 46
6927: PPUSH
6928: LD_INT 217
6930: PPUSH
6931: LD_INT 120
6933: PPUSH
6934: CALL_OW 297
6938: PUSH
6939: LD_INT 6
6941: LESS
6942: AND
6943: IFFALSE 6960
6945: GO 6947
6947: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6948: LD_EXP 46
6952: PPUSH
6953: LD_STRING DH-EastEnd
6955: PPUSH
6956: CALL_OW 88
6960: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6961: LD_EXP 46
6965: PPUSH
6966: LD_INT 11
6968: PPUSH
6969: CALL_OW 308
6973: IFFALSE 7011
6975: GO 6977
6977: DISABLE
// begin if not heikeSquad then
6978: LD_EXP 14
6982: NOT
6983: IFFALSE 6999
// Say ( Heike , DH-Hill ) else
6985: LD_EXP 46
6989: PPUSH
6990: LD_STRING DH-Hill
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Heike , DH-Hill-a ) ;
6999: LD_EXP 46
7003: PPUSH
7004: LD_STRING DH-Hill-a
7006: PPUSH
7007: CALL_OW 88
// end ;
7011: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
7012: LD_EXP 46
7016: PPUSH
7017: LD_INT 12
7019: PPUSH
7020: CALL_OW 308
7024: IFFALSE 7211
7026: GO 7028
7028: DISABLE
7029: LD_INT 0
7031: PPUSH
7032: PPUSH
7033: PPUSH
// begin DialogueOn ;
7034: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7038: LD_EXP 46
7042: PPUSH
7043: CALL_OW 87
// x := GetX ( Heike ) ;
7047: LD_ADDR_VAR 0 1
7051: PUSH
7052: LD_EXP 46
7056: PPUSH
7057: CALL_OW 250
7061: ST_TO_ADDR
// y := GetY ( Heike ) ;
7062: LD_ADDR_VAR 0 2
7066: PUSH
7067: LD_EXP 46
7071: PPUSH
7072: CALL_OW 251
7076: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7077: LD_VAR 0 1
7081: PPUSH
7082: LD_VAR 0 2
7086: PPUSH
7087: LD_INT 2
7089: PPUSH
7090: LD_INT 12
7092: NEG
7093: PPUSH
7094: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7098: LD_VAR 0 1
7102: PPUSH
7103: LD_VAR 0 2
7107: PPUSH
7108: LD_INT 2
7110: PPUSH
7111: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7115: LD_INT 101
7117: PUSH
7118: LD_INT 2
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 32
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 30
7140: PUSH
7141: LD_INT 33
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PPUSH
7157: CALL_OW 69
7161: IFFALSE 7173
// v := 3 else
7163: LD_ADDR_VAR 0 3
7167: PUSH
7168: LD_INT 3
7170: ST_TO_ADDR
7171: GO 7181
// v := 2 ;
7173: LD_ADDR_VAR 0 3
7177: PUSH
7178: LD_INT 2
7180: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7181: LD_EXP 46
7185: PPUSH
7186: LD_STRING DH-Outpost-
7188: PUSH
7189: LD_INT 1
7191: PPUSH
7192: LD_VAR 0 3
7196: PPUSH
7197: CALL_OW 12
7201: STR
7202: PPUSH
7203: CALL_OW 88
// DialogueOff ;
7207: CALL_OW 7
// end ;
7211: PPOPN 3
7213: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7214: LD_EXP 46
7218: PPUSH
7219: LD_INT 64
7221: PPUSH
7222: CALL_OW 308
7226: IFFALSE 7413
7228: GO 7230
7230: DISABLE
7231: LD_INT 0
7233: PPUSH
7234: PPUSH
7235: PPUSH
// begin DialogueOn ;
7236: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7240: LD_EXP 46
7244: PPUSH
7245: CALL_OW 87
// x := GetX ( Heike ) ;
7249: LD_ADDR_VAR 0 1
7253: PUSH
7254: LD_EXP 46
7258: PPUSH
7259: CALL_OW 250
7263: ST_TO_ADDR
// y := GetY ( Heike ) ;
7264: LD_ADDR_VAR 0 2
7268: PUSH
7269: LD_EXP 46
7273: PPUSH
7274: CALL_OW 251
7278: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7279: LD_VAR 0 1
7283: PPUSH
7284: LD_VAR 0 2
7288: PPUSH
7289: LD_INT 2
7291: PPUSH
7292: LD_INT 12
7294: NEG
7295: PPUSH
7296: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7300: LD_VAR 0 1
7304: PPUSH
7305: LD_VAR 0 2
7309: PPUSH
7310: LD_INT 2
7312: PPUSH
7313: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7317: LD_INT 101
7319: PUSH
7320: LD_INT 2
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: LD_INT 2
7329: PUSH
7330: LD_INT 30
7332: PUSH
7333: LD_INT 32
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: LD_INT 30
7342: PUSH
7343: LD_INT 33
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PPUSH
7359: CALL_OW 69
7363: IFFALSE 7375
// v := 3 else
7365: LD_ADDR_VAR 0 3
7369: PUSH
7370: LD_INT 3
7372: ST_TO_ADDR
7373: GO 7383
// v := 2 ;
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_INT 2
7382: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7383: LD_EXP 46
7387: PPUSH
7388: LD_STRING DH-Outpost-
7390: PUSH
7391: LD_INT 1
7393: PPUSH
7394: LD_VAR 0 3
7398: PPUSH
7399: CALL_OW 12
7403: STR
7404: PPUSH
7405: CALL_OW 88
// DialogueOff ;
7409: CALL_OW 7
// end ;
7413: PPOPN 3
7415: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7416: LD_EXP 46
7420: PPUSH
7421: LD_INT 19
7423: PPUSH
7424: CALL_OW 308
7428: PUSH
7429: LD_EXP 22
7433: NOT
7434: AND
7435: PUSH
7436: LD_EXP 30
7440: NOT
7441: AND
7442: IFFALSE 7515
7444: GO 7446
7446: DISABLE
// begin DialogueOn ;
7447: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7451: LD_INT 152
7453: PPUSH
7454: LD_INT 115
7456: PPUSH
7457: LD_INT 2
7459: PPUSH
7460: LD_INT 16
7462: NEG
7463: PPUSH
7464: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7468: LD_INT 152
7470: PPUSH
7471: LD_INT 115
7473: PPUSH
7474: LD_INT 2
7476: PPUSH
7477: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7481: LD_INT 152
7483: PPUSH
7484: LD_INT 115
7486: PPUSH
7487: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7491: LD_EXP 46
7495: PPUSH
7496: LD_STRING DH-Stealth-1
7498: PPUSH
7499: CALL_OW 88
// DialogueOff ;
7503: CALL_OW 7
// adminAreaDiscovered := true ;
7507: LD_ADDR_EXP 22
7511: PUSH
7512: LD_INT 1
7514: ST_TO_ADDR
// end ;
7515: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7516: LD_INT 2
7518: PPUSH
7519: LD_EXP 47
7523: PPUSH
7524: CALL_OW 292
7528: PUSH
7529: LD_EXP 46
7533: PPUSH
7534: LD_EXP 47
7538: PPUSH
7539: CALL_OW 296
7543: PUSH
7544: LD_INT 6
7546: LESS
7547: AND
7548: PUSH
7549: LD_EXP 17
7553: NOT
7554: AND
7555: PUSH
7556: LD_EXP 30
7560: NOT
7561: AND
7562: IFFALSE 7668
7564: GO 7566
7566: DISABLE
// begin DialogueOn ;
7567: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7571: LD_EXP 47
7575: PPUSH
7576: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7580: LD_EXP 47
7584: PPUSH
7585: LD_EXP 46
7589: PPUSH
7590: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7594: LD_EXP 46
7598: PPUSH
7599: LD_EXP 47
7603: PPUSH
7604: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7608: LD_EXP 46
7612: PPUSH
7613: LD_STRING DH-Givi-1
7615: PPUSH
7616: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7620: LD_EXP 47
7624: PPUSH
7625: LD_STRING DG-Givi-2
7627: PPUSH
7628: CALL_OW 88
// DialogueOff ;
7632: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7636: LD_EXP 47
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7648: LD_ADDR_EXP 14
7652: PUSH
7653: LD_EXP 14
7657: PPUSH
7658: LD_EXP 47
7662: PPUSH
7663: CALL 66973 0 2
7667: ST_TO_ADDR
// end ;
7668: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7669: LD_INT 2
7671: PPUSH
7672: LD_EXP 52
7676: PPUSH
7677: CALL_OW 292
7681: PUSH
7682: LD_EXP 46
7686: PPUSH
7687: LD_EXP 52
7691: PPUSH
7692: CALL_OW 296
7696: PUSH
7697: LD_INT 6
7699: LESS
7700: AND
7701: PUSH
7702: LD_EXP 17
7706: NOT
7707: AND
7708: PUSH
7709: LD_EXP 30
7713: NOT
7714: AND
7715: IFFALSE 7821
7717: GO 7719
7719: DISABLE
// begin DialogueOn ;
7720: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7724: LD_EXP 52
7728: PPUSH
7729: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7733: LD_EXP 52
7737: PPUSH
7738: LD_EXP 46
7742: PPUSH
7743: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7747: LD_EXP 46
7751: PPUSH
7752: LD_EXP 52
7756: PPUSH
7757: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7761: LD_EXP 46
7765: PPUSH
7766: LD_STRING DH-Sophia-1
7768: PPUSH
7769: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7773: LD_EXP 52
7777: PPUSH
7778: LD_STRING DS-Sophia-2
7780: PPUSH
7781: CALL_OW 88
// DialogueOff ;
7785: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7789: LD_EXP 52
7793: PPUSH
7794: LD_INT 2
7796: PPUSH
7797: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7801: LD_ADDR_EXP 14
7805: PUSH
7806: LD_EXP 14
7810: PPUSH
7811: LD_EXP 52
7815: PPUSH
7816: CALL 66973 0 2
7820: ST_TO_ADDR
// end ;
7821: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7822: LD_INT 2
7824: PPUSH
7825: LD_EXP 54
7829: PPUSH
7830: CALL_OW 292
7834: PUSH
7835: LD_EXP 46
7839: PPUSH
7840: LD_EXP 54
7844: PPUSH
7845: CALL_OW 296
7849: PUSH
7850: LD_INT 6
7852: LESS
7853: AND
7854: PUSH
7855: LD_EXP 17
7859: NOT
7860: AND
7861: PUSH
7862: LD_EXP 30
7866: NOT
7867: AND
7868: IFFALSE 7964
7870: GO 7872
7872: DISABLE
// begin DialogueOn ;
7873: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7877: LD_EXP 54
7881: PPUSH
7882: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7886: LD_EXP 46
7890: PPUSH
7891: LD_STRING DH-Olaf-1
7893: PPUSH
7894: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7898: LD_EXP 54
7902: PPUSH
7903: LD_STRING DO-Olaf-2
7905: PPUSH
7906: CALL_OW 88
// if explosionsTakenByRussians then
7910: LD_EXP 21
7914: IFFALSE 7928
// Say ( Olaf , DO-Olaf-a-3 ) ;
7916: LD_EXP 54
7920: PPUSH
7921: LD_STRING DO-Olaf-a-3
7923: PPUSH
7924: CALL_OW 88
// DialogueOff ;
7928: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7932: LD_EXP 54
7936: PPUSH
7937: LD_INT 2
7939: PPUSH
7940: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7944: LD_ADDR_EXP 14
7948: PUSH
7949: LD_EXP 14
7953: PPUSH
7954: LD_EXP 54
7958: PPUSH
7959: CALL 66973 0 2
7963: ST_TO_ADDR
// end ;
7964: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7965: LD_INT 2
7967: PPUSH
7968: LD_EXP 48
7972: PPUSH
7973: CALL_OW 292
7977: PUSH
7978: LD_EXP 46
7982: PPUSH
7983: LD_EXP 48
7987: PPUSH
7988: CALL_OW 296
7992: PUSH
7993: LD_INT 6
7995: LESS
7996: AND
7997: PUSH
7998: LD_EXP 17
8002: NOT
8003: AND
8004: PUSH
8005: LD_EXP 30
8009: NOT
8010: AND
8011: IFFALSE 8239
8013: GO 8015
8015: DISABLE
8016: LD_INT 0
8018: PPUSH
8019: PPUSH
// begin DialogueOn ;
8020: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
8024: LD_EXP 48
8028: PPUSH
8029: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
8033: LD_ADDR_VAR 0 2
8037: PUSH
8038: LD_INT 18
8040: PPUSH
8041: LD_INT 0
8043: PPUSH
8044: CALL_OW 517
8048: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8049: LD_ADDR_VAR 0 1
8053: PUSH
8054: DOUBLE
8055: LD_INT 1
8057: DEC
8058: ST_TO_ADDR
8059: LD_VAR 0 2
8063: PUSH
8064: LD_INT 1
8066: ARRAY
8067: PUSH
8068: FOR_TO
8069: IFFALSE 8151
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8071: LD_VAR 0 2
8075: PUSH
8076: LD_INT 1
8078: ARRAY
8079: PUSH
8080: LD_VAR 0 1
8084: ARRAY
8085: PPUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_INT 2
8093: ARRAY
8094: PUSH
8095: LD_VAR 0 1
8099: ARRAY
8100: PPUSH
8101: LD_INT 2
8103: PPUSH
8104: LD_INT 3
8106: NEG
8107: PPUSH
8108: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 1
8119: ARRAY
8120: PUSH
8121: LD_VAR 0 1
8125: ARRAY
8126: PPUSH
8127: LD_VAR 0 2
8131: PUSH
8132: LD_INT 2
8134: ARRAY
8135: PUSH
8136: LD_VAR 0 1
8140: ARRAY
8141: PPUSH
8142: LD_INT 2
8144: PPUSH
8145: CALL_OW 331
// end ;
8149: GO 8068
8151: POP
8152: POP
// Say ( Mike , DM-Mike-1 ) ;
8153: LD_EXP 48
8157: PPUSH
8158: LD_STRING DM-Mike-1
8160: PPUSH
8161: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8165: LD_EXP 46
8169: PPUSH
8170: LD_STRING DH-Mike-2
8172: PPUSH
8173: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8177: LD_INT 78
8179: PPUSH
8180: LD_INT 104
8182: PPUSH
8183: CALL_OW 84
// dwait ( 0 0$1 ) ;
8187: LD_INT 35
8189: PPUSH
8190: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8194: LD_EXP 46
8198: PPUSH
8199: CALL_OW 87
// DialogueOff ;
8203: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8207: LD_EXP 48
8211: PPUSH
8212: LD_INT 2
8214: PPUSH
8215: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8219: LD_ADDR_EXP 14
8223: PUSH
8224: LD_EXP 14
8228: PPUSH
8229: LD_EXP 48
8233: PPUSH
8234: CALL 66973 0 2
8238: ST_TO_ADDR
// end ;
8239: PPOPN 2
8241: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8242: LD_EXP 46
8246: PPUSH
8247: LD_EXP 51
8251: PPUSH
8252: CALL_OW 296
8256: PUSH
8257: LD_INT 6
8259: LESS
8260: PUSH
8261: LD_EXP 51
8265: PPUSH
8266: CALL_OW 257
8270: PUSH
8271: LD_INT 33
8273: EQUAL
8274: AND
8275: PUSH
8276: LD_EXP 17
8280: NOT
8281: AND
8282: PUSH
8283: LD_EXP 30
8287: NOT
8288: AND
8289: PUSH
8290: LD_EXP 51
8294: PPUSH
8295: CALL_OW 302
8299: AND
8300: PUSH
8301: LD_EXP 20
8305: AND
8306: PUSH
8307: LD_EXP 51
8311: PUSH
8312: LD_EXP 14
8316: IN
8317: AND
8318: PUSH
8319: LD_EXP 51
8323: PPUSH
8324: CALL_OW 255
8328: PUSH
8329: LD_INT 2
8331: EQUAL
8332: AND
8333: IFFALSE 8362
8335: GO 8337
8337: DISABLE
// begin DialogueOn ;
8338: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8342: LD_EXP 46
8346: PPUSH
8347: LD_STRING DH-Kaia-Revolver-2
8349: PPUSH
8350: CALL_OW 88
// SetClassKaiaRevolver ;
8354: CALL 1769 0 0
// DialogueOff ;
8358: CALL_OW 7
// end ;
8362: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8363: LD_EXP 49
8367: PUSH
8368: LD_EXP 56
8372: AND
8373: PUSH
8374: LD_EXP 56
8378: PPUSH
8379: CALL_OW 255
8383: PUSH
8384: LD_INT 2
8386: NONEQUAL
8387: AND
8388: PUSH
8389: LD_EXP 49
8393: PPUSH
8394: CALL_OW 255
8398: PUSH
8399: LD_INT 2
8401: NONEQUAL
8402: AND
8403: PUSH
8404: LD_EXP 14
8408: PPUSH
8409: LD_INT 22
8411: PUSH
8412: LD_INT 2
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 72
8423: PUSH
8424: LD_INT 5
8426: GREATER
8427: AND
8428: PUSH
8429: LD_EXP 17
8433: NOT
8434: AND
8435: PUSH
8436: LD_EXP 30
8440: NOT
8441: AND
8442: IFFALSE 9159
8444: GO 8446
8446: DISABLE
8447: LD_INT 0
8449: PPUSH
8450: PPUSH
// begin DialogueOn ;
8451: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8455: LD_ADDR_VAR 0 2
8459: PUSH
8460: LD_EXP 47
8464: PPUSH
8465: CALL_OW 302
8469: PUSH
8470: LD_EXP 47
8474: PUSH
8475: LD_EXP 14
8479: IN
8480: AND
8481: PUSH
8482: LD_EXP 47
8486: PPUSH
8487: CALL_OW 255
8491: PUSH
8492: LD_INT 2
8494: EQUAL
8495: AND
8496: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8497: LD_EXP 46
8501: PPUSH
8502: LD_STRING DH-Med-1
8504: PPUSH
8505: CALL_OW 88
// if hasGivi then
8509: LD_VAR 0 2
8513: IFFALSE 8529
// Say ( Givi , DG-Med-2 ) else
8515: LD_EXP 47
8519: PPUSH
8520: LD_STRING DG-Med-2
8522: PPUSH
8523: CALL_OW 88
8527: GO 8634
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8529: LD_EXP 14
8533: PUSH
8534: LD_EXP 57
8538: ISECT
8539: PPUSH
8540: LD_INT 22
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 26
8552: PUSH
8553: LD_INT 1
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 72
8568: PUSH
8569: LD_INT 1
8571: ARRAY
8572: PPUSH
8573: LD_STRING DArm-Med-e-2
8575: PPUSH
8576: CALL_OW 88
8580: NOT
8581: IFFALSE 8634
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8583: LD_EXP 14
8587: PUSH
8588: LD_EXP 57
8592: ISECT
8593: PPUSH
8594: LD_INT 22
8596: PUSH
8597: LD_INT 2
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: LD_INT 26
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 72
8622: PUSH
8623: LD_INT 1
8625: ARRAY
8626: PPUSH
8627: LD_STRING DArf-Med-e-2
8629: PPUSH
8630: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8634: LD_INT 154
8636: PPUSH
8637: LD_INT 119
8639: PPUSH
8640: LD_INT 70
8642: PPUSH
8643: CALL 19975 0 3
// Say ( Heike , DH-Med-3 ) ;
8647: LD_EXP 46
8651: PPUSH
8652: LD_STRING DH-Med-3
8654: PPUSH
8655: CALL_OW 88
// if hasGivi then
8659: LD_VAR 0 2
8663: IFFALSE 8679
// Say ( Givi , DG-Med-4 ) else
8665: LD_EXP 47
8669: PPUSH
8670: LD_STRING DG-Med-4
8672: PPUSH
8673: CALL_OW 88
8677: GO 8784
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8679: LD_EXP 14
8683: PUSH
8684: LD_EXP 57
8688: ISECT
8689: PPUSH
8690: LD_INT 22
8692: PUSH
8693: LD_INT 2
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 26
8702: PUSH
8703: LD_INT 1
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 72
8718: PUSH
8719: LD_INT 1
8721: ARRAY
8722: PPUSH
8723: LD_STRING DArm-Med-e-4
8725: PPUSH
8726: CALL_OW 88
8730: NOT
8731: IFFALSE 8784
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8733: LD_EXP 14
8737: PUSH
8738: LD_EXP 57
8742: ISECT
8743: PPUSH
8744: LD_INT 22
8746: PUSH
8747: LD_INT 2
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 26
8756: PUSH
8757: LD_INT 2
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PPUSH
8768: CALL_OW 72
8772: PUSH
8773: LD_INT 1
8775: ARRAY
8776: PPUSH
8777: LD_STRING DArf-Med-e-4
8779: PPUSH
8780: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8784: LD_ADDR_VAR 0 1
8788: PUSH
8789: LD_EXP 51
8793: PPUSH
8794: CALL_OW 302
8798: PUSH
8799: LD_EXP 51
8803: PUSH
8804: LD_EXP 14
8808: IN
8809: AND
8810: PUSH
8811: LD_EXP 51
8815: PPUSH
8816: CALL_OW 255
8820: PUSH
8821: LD_INT 2
8823: EQUAL
8824: AND
8825: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8826: LD_EXP 48
8830: PPUSH
8831: CALL_OW 302
8835: PUSH
8836: LD_EXP 48
8840: PUSH
8841: LD_EXP 14
8845: IN
8846: AND
8847: PUSH
8848: LD_EXP 51
8852: PPUSH
8853: CALL_OW 255
8857: PUSH
8858: LD_INT 2
8860: EQUAL
8861: AND
8862: IFFALSE 8894
// begin Say ( Mike , DM-Med-5 ) ;
8864: LD_EXP 48
8868: PPUSH
8869: LD_STRING DM-Med-5
8871: PPUSH
8872: CALL_OW 88
// if hasKaia then
8876: LD_VAR 0 1
8880: IFFALSE 8894
// Say ( Kaia , DK-Med-6 ) ;
8882: LD_EXP 51
8886: PPUSH
8887: LD_STRING DK-Med-6
8889: PPUSH
8890: CALL_OW 88
// end ; if hasKaia then
8894: LD_VAR 0 1
8898: IFFALSE 9139
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8900: LD_INT 175
8902: PPUSH
8903: LD_INT 123
8905: PPUSH
8906: LD_INT 2
8908: PPUSH
8909: LD_INT 8
8911: NEG
8912: PPUSH
8913: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8917: LD_INT 175
8919: PPUSH
8920: LD_INT 123
8922: PPUSH
8923: LD_INT 2
8925: PPUSH
8926: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8930: LD_INT 175
8932: PPUSH
8933: LD_INT 123
8935: PPUSH
8936: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8940: LD_EXP 51
8944: PPUSH
8945: LD_STRING DK-Med-7
8947: PPUSH
8948: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8952: LD_EXP 51
8956: PPUSH
8957: LD_STRING DK-Med-8
8959: PPUSH
8960: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8964: LD_EXP 53
8968: PPUSH
8969: CALL_OW 302
8973: PUSH
8974: LD_EXP 53
8978: PUSH
8979: LD_EXP 14
8983: IN
8984: AND
8985: PUSH
8986: LD_EXP 53
8990: PPUSH
8991: CALL_OW 255
8995: PUSH
8996: LD_INT 2
8998: EQUAL
8999: AND
9000: IFFALSE 9058
// begin Say ( Markov , DMar-Med-9 ) ;
9002: LD_EXP 53
9006: PPUSH
9007: LD_STRING DMar-Med-9
9009: PPUSH
9010: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9014: LD_EXP 51
9018: PPUSH
9019: LD_STRING DK-Med-10
9021: PPUSH
9022: CALL_OW 88
// if hasGivi then
9026: LD_VAR 0 2
9030: IFFALSE 9046
// Say ( Kaia , DK-Med-11 ) else
9032: LD_EXP 51
9036: PPUSH
9037: LD_STRING DK-Med-11
9039: PPUSH
9040: CALL_OW 88
9044: GO 9058
// Say ( Kaia , DK-Med-a-11 ) ;
9046: LD_EXP 51
9050: PPUSH
9051: LD_STRING DK-Med-a-11
9053: PPUSH
9054: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9058: LD_EXP 50
9062: PPUSH
9063: CALL_OW 302
9067: PUSH
9068: LD_EXP 50
9072: PUSH
9073: LD_EXP 14
9077: IN
9078: AND
9079: PUSH
9080: LD_EXP 50
9084: PPUSH
9085: CALL_OW 255
9089: PUSH
9090: LD_INT 2
9092: EQUAL
9093: AND
9094: IFFALSE 9139
// begin Say ( Kamil , DKam-Med-12 ) ;
9096: LD_EXP 50
9100: PPUSH
9101: LD_STRING DKam-Med-12
9103: PPUSH
9104: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9108: LD_EXP 50
9112: PPUSH
9113: LD_STRING DKam-Med-13
9115: PPUSH
9116: CALL_OW 88
// if not hasExplosionCollected then
9120: LD_EXP 23
9124: NOT
9125: IFFALSE 9139
// Say ( Heike , DH-Med-d-14 ) ;
9127: LD_EXP 46
9131: PPUSH
9132: LD_STRING DH-Med-d-14
9134: PPUSH
9135: CALL_OW 88
// end ; end ; DialogueOff ;
9139: CALL_OW 7
// adminAreaDiscovered := true ;
9143: LD_ADDR_EXP 22
9147: PUSH
9148: LD_INT 1
9150: ST_TO_ADDR
// laundryAllowed := true ;
9151: LD_ADDR_EXP 26
9155: PUSH
9156: LD_INT 1
9158: ST_TO_ADDR
// end ;
9159: PPOPN 2
9161: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9162: LD_EXP 49
9166: NOT
9167: PUSH
9168: LD_EXP 56
9172: AND
9173: PUSH
9174: LD_EXP 56
9178: PUSH
9179: LD_EXP 14
9183: IN
9184: NOT
9185: AND
9186: PUSH
9187: LD_EXP 14
9191: PPUSH
9192: LD_INT 22
9194: PUSH
9195: LD_INT 2
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PPUSH
9202: CALL_OW 72
9206: PUSH
9207: LD_INT 4
9209: GREATER
9210: AND
9211: PUSH
9212: LD_EXP 17
9216: NOT
9217: AND
9218: PUSH
9219: LD_EXP 30
9223: NOT
9224: AND
9225: IFFALSE 9942
9227: GO 9229
9229: DISABLE
9230: LD_INT 0
9232: PPUSH
9233: PPUSH
// begin DialogueOn ;
9234: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9238: LD_ADDR_VAR 0 1
9242: PUSH
9243: LD_EXP 47
9247: PPUSH
9248: CALL_OW 302
9252: PUSH
9253: LD_EXP 47
9257: PUSH
9258: LD_EXP 14
9262: IN
9263: AND
9264: PUSH
9265: LD_EXP 47
9269: PPUSH
9270: CALL_OW 255
9274: PUSH
9275: LD_INT 2
9277: EQUAL
9278: AND
9279: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9280: LD_EXP 46
9284: PPUSH
9285: LD_STRING DH-Med-a-1
9287: PPUSH
9288: CALL_OW 88
// if hasGivi then
9292: LD_VAR 0 1
9296: IFFALSE 9312
// Say ( Givi , DG-Med-a-2 ) else
9298: LD_EXP 47
9302: PPUSH
9303: LD_STRING DG-Med-a-2
9305: PPUSH
9306: CALL_OW 88
9310: GO 9417
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9312: LD_EXP 14
9316: PUSH
9317: LD_EXP 57
9321: ISECT
9322: PPUSH
9323: LD_INT 22
9325: PUSH
9326: LD_INT 2
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 26
9335: PUSH
9336: LD_INT 1
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PPUSH
9347: CALL_OW 72
9351: PUSH
9352: LD_INT 1
9354: ARRAY
9355: PPUSH
9356: LD_STRING DArm-Med-f-2
9358: PPUSH
9359: CALL_OW 88
9363: NOT
9364: IFFALSE 9417
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9366: LD_EXP 14
9370: PUSH
9371: LD_EXP 57
9375: ISECT
9376: PPUSH
9377: LD_INT 22
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 26
9389: PUSH
9390: LD_INT 2
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PPUSH
9401: CALL_OW 72
9405: PUSH
9406: LD_INT 1
9408: ARRAY
9409: PPUSH
9410: LD_STRING DArf-Med-f-2
9412: PPUSH
9413: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9417: LD_INT 154
9419: PPUSH
9420: LD_INT 119
9422: PPUSH
9423: LD_INT 70
9425: PPUSH
9426: CALL 19975 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9430: LD_EXP 46
9434: PPUSH
9435: LD_STRING DH-Med-a-3
9437: PPUSH
9438: CALL_OW 88
// if hasGivi then
9442: LD_VAR 0 1
9446: IFFALSE 9462
// Say ( Givi , DG-Med-a-4 ) else
9448: LD_EXP 47
9452: PPUSH
9453: LD_STRING DG-Med-a-4
9455: PPUSH
9456: CALL_OW 88
9460: GO 9567
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9462: LD_EXP 14
9466: PUSH
9467: LD_EXP 57
9471: ISECT
9472: PPUSH
9473: LD_INT 22
9475: PUSH
9476: LD_INT 2
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 26
9485: PUSH
9486: LD_INT 1
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PPUSH
9497: CALL_OW 72
9501: PUSH
9502: LD_INT 1
9504: ARRAY
9505: PPUSH
9506: LD_STRING DArm-Med-f-4
9508: PPUSH
9509: CALL_OW 88
9513: NOT
9514: IFFALSE 9567
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9516: LD_EXP 14
9520: PUSH
9521: LD_EXP 57
9525: ISECT
9526: PPUSH
9527: LD_INT 22
9529: PUSH
9530: LD_INT 2
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 26
9539: PUSH
9540: LD_INT 2
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PPUSH
9551: CALL_OW 72
9555: PUSH
9556: LD_INT 1
9558: ARRAY
9559: PPUSH
9560: LD_STRING DArf-Med-f-4
9562: PPUSH
9563: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9567: LD_ADDR_VAR 0 2
9571: PUSH
9572: LD_EXP 51
9576: PPUSH
9577: CALL_OW 302
9581: PUSH
9582: LD_EXP 51
9586: PUSH
9587: LD_EXP 14
9591: IN
9592: AND
9593: PUSH
9594: LD_EXP 51
9598: PPUSH
9599: CALL_OW 255
9603: PUSH
9604: LD_INT 2
9606: EQUAL
9607: AND
9608: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9609: LD_EXP 48
9613: PPUSH
9614: CALL_OW 302
9618: PUSH
9619: LD_EXP 48
9623: PUSH
9624: LD_EXP 14
9628: IN
9629: AND
9630: PUSH
9631: LD_EXP 48
9635: PPUSH
9636: CALL_OW 255
9640: PUSH
9641: LD_INT 2
9643: EQUAL
9644: AND
9645: IFFALSE 9677
// begin Say ( Mike , DM-Med-5 ) ;
9647: LD_EXP 48
9651: PPUSH
9652: LD_STRING DM-Med-5
9654: PPUSH
9655: CALL_OW 88
// if hasKaia then
9659: LD_VAR 0 2
9663: IFFALSE 9677
// Say ( Kaia , DK-Med-6 ) ;
9665: LD_EXP 51
9669: PPUSH
9670: LD_STRING DK-Med-6
9672: PPUSH
9673: CALL_OW 88
// end ; if hasKaia then
9677: LD_VAR 0 2
9681: IFFALSE 9922
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9683: LD_INT 175
9685: PPUSH
9686: LD_INT 123
9688: PPUSH
9689: LD_INT 2
9691: PPUSH
9692: LD_INT 8
9694: NEG
9695: PPUSH
9696: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9700: LD_INT 175
9702: PPUSH
9703: LD_INT 123
9705: PPUSH
9706: LD_INT 2
9708: PPUSH
9709: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9713: LD_INT 175
9715: PPUSH
9716: LD_INT 123
9718: PPUSH
9719: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9723: LD_EXP 51
9727: PPUSH
9728: LD_STRING DK-Med-7
9730: PPUSH
9731: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9735: LD_EXP 51
9739: PPUSH
9740: LD_STRING DK-Med-8
9742: PPUSH
9743: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9747: LD_EXP 53
9751: PPUSH
9752: CALL_OW 302
9756: PUSH
9757: LD_EXP 53
9761: PUSH
9762: LD_EXP 14
9766: IN
9767: AND
9768: PUSH
9769: LD_EXP 53
9773: PPUSH
9774: CALL_OW 255
9778: PUSH
9779: LD_INT 2
9781: EQUAL
9782: AND
9783: IFFALSE 9841
// begin Say ( Markov , DMar-Med-9 ) ;
9785: LD_EXP 53
9789: PPUSH
9790: LD_STRING DMar-Med-9
9792: PPUSH
9793: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9797: LD_EXP 51
9801: PPUSH
9802: LD_STRING DK-Med-10
9804: PPUSH
9805: CALL_OW 88
// if hasGivi then
9809: LD_VAR 0 1
9813: IFFALSE 9829
// Say ( Kaia , DK-Med-11 ) else
9815: LD_EXP 51
9819: PPUSH
9820: LD_STRING DK-Med-11
9822: PPUSH
9823: CALL_OW 88
9827: GO 9841
// Say ( Kaia , DK-Med-a-11 ) ;
9829: LD_EXP 51
9833: PPUSH
9834: LD_STRING DK-Med-a-11
9836: PPUSH
9837: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9841: LD_EXP 50
9845: PPUSH
9846: CALL_OW 302
9850: PUSH
9851: LD_EXP 50
9855: PUSH
9856: LD_EXP 14
9860: IN
9861: AND
9862: PUSH
9863: LD_EXP 50
9867: PPUSH
9868: CALL_OW 255
9872: PUSH
9873: LD_INT 2
9875: EQUAL
9876: AND
9877: IFFALSE 9922
// begin Say ( Kamil , DKam-Med-12 ) ;
9879: LD_EXP 50
9883: PPUSH
9884: LD_STRING DKam-Med-12
9886: PPUSH
9887: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9891: LD_EXP 50
9895: PPUSH
9896: LD_STRING DKam-Med-13
9898: PPUSH
9899: CALL_OW 88
// if not hasExplosionCollected then
9903: LD_EXP 23
9907: NOT
9908: IFFALSE 9922
// Say ( Heike , DH-Med-d-14 ) ;
9910: LD_EXP 46
9914: PPUSH
9915: LD_STRING DH-Med-d-14
9917: PPUSH
9918: CALL_OW 88
// end ; end ; DialogueOff ;
9922: CALL_OW 7
// adminAreaDiscovered := true ;
9926: LD_ADDR_EXP 22
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// laundryAllowed := true ;
9934: LD_ADDR_EXP 26
9938: PUSH
9939: LD_INT 1
9941: ST_TO_ADDR
// end ;
9942: PPOPN 2
9944: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9945: LD_EXP 49
9949: PUSH
9950: LD_EXP 56
9954: NOT
9955: AND
9956: PUSH
9957: LD_EXP 49
9961: PUSH
9962: LD_EXP 14
9966: IN
9967: NOT
9968: AND
9969: PUSH
9970: LD_EXP 14
9974: PPUSH
9975: LD_INT 22
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 72
9989: PUSH
9990: LD_INT 4
9992: GREATER
9993: AND
9994: PUSH
9995: LD_EXP 17
9999: NOT
10000: AND
10001: PUSH
10002: LD_EXP 30
10006: NOT
10007: AND
10008: IFFALSE 10725
10010: GO 10012
10012: DISABLE
10013: LD_INT 0
10015: PPUSH
10016: PPUSH
// begin DialogueOn ;
10017: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
10021: LD_ADDR_VAR 0 1
10025: PUSH
10026: LD_EXP 47
10030: PPUSH
10031: CALL_OW 302
10035: PUSH
10036: LD_EXP 47
10040: PUSH
10041: LD_EXP 14
10045: IN
10046: AND
10047: PUSH
10048: LD_EXP 47
10052: PPUSH
10053: CALL_OW 255
10057: PUSH
10058: LD_INT 2
10060: EQUAL
10061: AND
10062: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10063: LD_EXP 46
10067: PPUSH
10068: LD_STRING DH-Med-b-1
10070: PPUSH
10071: CALL_OW 88
// if hasGivi then
10075: LD_VAR 0 1
10079: IFFALSE 10095
// Say ( Givi , DG-Med-a-2 ) else
10081: LD_EXP 47
10085: PPUSH
10086: LD_STRING DG-Med-a-2
10088: PPUSH
10089: CALL_OW 88
10093: GO 10200
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10095: LD_EXP 14
10099: PUSH
10100: LD_EXP 57
10104: ISECT
10105: PPUSH
10106: LD_INT 22
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 26
10118: PUSH
10119: LD_INT 1
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PPUSH
10130: CALL_OW 72
10134: PUSH
10135: LD_INT 1
10137: ARRAY
10138: PPUSH
10139: LD_STRING DArm-Med-f-2
10141: PPUSH
10142: CALL_OW 88
10146: NOT
10147: IFFALSE 10200
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10149: LD_EXP 14
10153: PUSH
10154: LD_EXP 57
10158: ISECT
10159: PPUSH
10160: LD_INT 22
10162: PUSH
10163: LD_INT 2
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: LD_INT 26
10172: PUSH
10173: LD_INT 2
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PPUSH
10184: CALL_OW 72
10188: PUSH
10189: LD_INT 1
10191: ARRAY
10192: PPUSH
10193: LD_STRING DArf-Med-f-2
10195: PPUSH
10196: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10200: LD_INT 154
10202: PPUSH
10203: LD_INT 119
10205: PPUSH
10206: LD_INT 70
10208: PPUSH
10209: CALL 19975 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10213: LD_EXP 46
10217: PPUSH
10218: LD_STRING DH-Med-a-3
10220: PPUSH
10221: CALL_OW 88
// if hasGivi then
10225: LD_VAR 0 1
10229: IFFALSE 10245
// Say ( Givi , DG-Med-a-4 ) else
10231: LD_EXP 47
10235: PPUSH
10236: LD_STRING DG-Med-a-4
10238: PPUSH
10239: CALL_OW 88
10243: GO 10350
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10245: LD_EXP 14
10249: PUSH
10250: LD_EXP 57
10254: ISECT
10255: PPUSH
10256: LD_INT 22
10258: PUSH
10259: LD_INT 2
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 26
10268: PUSH
10269: LD_INT 1
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PPUSH
10280: CALL_OW 72
10284: PUSH
10285: LD_INT 1
10287: ARRAY
10288: PPUSH
10289: LD_STRING DArm-Med-f-4
10291: PPUSH
10292: CALL_OW 88
10296: NOT
10297: IFFALSE 10350
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10299: LD_EXP 14
10303: PUSH
10304: LD_EXP 57
10308: ISECT
10309: PPUSH
10310: LD_INT 22
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 26
10322: PUSH
10323: LD_INT 2
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PPUSH
10334: CALL_OW 72
10338: PUSH
10339: LD_INT 1
10341: ARRAY
10342: PPUSH
10343: LD_STRING DArf-Med-f-4
10345: PPUSH
10346: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10350: LD_ADDR_VAR 0 2
10354: PUSH
10355: LD_EXP 51
10359: PPUSH
10360: CALL_OW 302
10364: PUSH
10365: LD_EXP 51
10369: PUSH
10370: LD_EXP 14
10374: IN
10375: AND
10376: PUSH
10377: LD_EXP 51
10381: PPUSH
10382: CALL_OW 255
10386: PUSH
10387: LD_INT 2
10389: EQUAL
10390: AND
10391: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10392: LD_EXP 48
10396: PPUSH
10397: CALL_OW 302
10401: PUSH
10402: LD_EXP 48
10406: PUSH
10407: LD_EXP 14
10411: IN
10412: AND
10413: PUSH
10414: LD_EXP 48
10418: PPUSH
10419: CALL_OW 255
10423: PUSH
10424: LD_INT 2
10426: EQUAL
10427: AND
10428: IFFALSE 10460
// begin Say ( Mike , DM-Med-5 ) ;
10430: LD_EXP 48
10434: PPUSH
10435: LD_STRING DM-Med-5
10437: PPUSH
10438: CALL_OW 88
// if hasKaia then
10442: LD_VAR 0 2
10446: IFFALSE 10460
// Say ( Kaia , DK-Med-6 ) ;
10448: LD_EXP 51
10452: PPUSH
10453: LD_STRING DK-Med-6
10455: PPUSH
10456: CALL_OW 88
// end ; if hasKaia then
10460: LD_VAR 0 2
10464: IFFALSE 10705
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10466: LD_INT 175
10468: PPUSH
10469: LD_INT 123
10471: PPUSH
10472: LD_INT 2
10474: PPUSH
10475: LD_INT 8
10477: NEG
10478: PPUSH
10479: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10483: LD_INT 175
10485: PPUSH
10486: LD_INT 123
10488: PPUSH
10489: LD_INT 2
10491: PPUSH
10492: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10496: LD_INT 175
10498: PPUSH
10499: LD_INT 123
10501: PPUSH
10502: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10506: LD_EXP 51
10510: PPUSH
10511: LD_STRING DK-Med-7
10513: PPUSH
10514: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10518: LD_EXP 51
10522: PPUSH
10523: LD_STRING DK-Med-8
10525: PPUSH
10526: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10530: LD_EXP 53
10534: PPUSH
10535: CALL_OW 302
10539: PUSH
10540: LD_EXP 53
10544: PUSH
10545: LD_EXP 14
10549: IN
10550: AND
10551: PUSH
10552: LD_EXP 53
10556: PPUSH
10557: CALL_OW 255
10561: PUSH
10562: LD_INT 2
10564: EQUAL
10565: AND
10566: IFFALSE 10624
// begin Say ( Markov , DMar-Med-9 ) ;
10568: LD_EXP 53
10572: PPUSH
10573: LD_STRING DMar-Med-9
10575: PPUSH
10576: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10580: LD_EXP 51
10584: PPUSH
10585: LD_STRING DK-Med-10
10587: PPUSH
10588: CALL_OW 88
// if hasGivi then
10592: LD_VAR 0 1
10596: IFFALSE 10612
// Say ( Kaia , DK-Med-11 ) else
10598: LD_EXP 51
10602: PPUSH
10603: LD_STRING DK-Med-11
10605: PPUSH
10606: CALL_OW 88
10610: GO 10624
// Say ( Kaia , DK-Med-a-11 ) ;
10612: LD_EXP 51
10616: PPUSH
10617: LD_STRING DK-Med-a-11
10619: PPUSH
10620: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10624: LD_EXP 50
10628: PPUSH
10629: CALL_OW 302
10633: PUSH
10634: LD_EXP 50
10638: PUSH
10639: LD_EXP 14
10643: IN
10644: AND
10645: PUSH
10646: LD_EXP 50
10650: PPUSH
10651: CALL_OW 255
10655: PUSH
10656: LD_INT 2
10658: EQUAL
10659: AND
10660: IFFALSE 10705
// begin Say ( Kamil , DKam-Med-12 ) ;
10662: LD_EXP 50
10666: PPUSH
10667: LD_STRING DKam-Med-12
10669: PPUSH
10670: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10674: LD_EXP 50
10678: PPUSH
10679: LD_STRING DKam-Med-13
10681: PPUSH
10682: CALL_OW 88
// if not hasExplosionCollected then
10686: LD_EXP 23
10690: NOT
10691: IFFALSE 10705
// Say ( Heike , DH-Med-d-14 ) ;
10693: LD_EXP 46
10697: PPUSH
10698: LD_STRING DH-Med-d-14
10700: PPUSH
10701: CALL_OW 88
// end ; end ; DialogueOff ;
10705: CALL_OW 7
// adminAreaDiscovered := true ;
10709: LD_ADDR_EXP 22
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// laundryAllowed := true ;
10717: LD_ADDR_EXP 26
10721: PUSH
10722: LD_INT 1
10724: ST_TO_ADDR
// end ;
10725: PPOPN 2
10727: END
// every 0 0$1 trigger laundryAllowed do
10728: LD_EXP 26
10732: IFFALSE 10744
10734: GO 10736
10736: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10737: LD_STRING M1-laundry
10739: PPUSH
10740: CALL_OW 337
10744: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10745: LD_EXP 49
10749: NOT
10750: PUSH
10751: LD_EXP 56
10755: NOT
10756: AND
10757: PUSH
10758: LD_EXP 54
10762: PPUSH
10763: CALL_OW 302
10767: AND
10768: PUSH
10769: LD_EXP 54
10773: PUSH
10774: LD_EXP 14
10778: IN
10779: AND
10780: PUSH
10781: LD_EXP 54
10785: PPUSH
10786: CALL_OW 255
10790: PUSH
10791: LD_INT 2
10793: EQUAL
10794: AND
10795: PUSH
10796: LD_EXP 17
10800: NOT
10801: AND
10802: PUSH
10803: LD_EXP 30
10807: NOT
10808: AND
10809: IFFALSE 10965
10811: GO 10813
10813: DISABLE
// begin DialogueOn ;
10814: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10818: LD_INT 152
10820: PPUSH
10821: LD_INT 115
10823: PPUSH
10824: LD_INT 2
10826: PPUSH
10827: LD_INT 16
10829: NEG
10830: PPUSH
10831: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10835: LD_INT 152
10837: PPUSH
10838: LD_INT 115
10840: PPUSH
10841: LD_INT 2
10843: PPUSH
10844: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10848: LD_INT 152
10850: PPUSH
10851: LD_INT 115
10853: PPUSH
10854: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10858: LD_EXP 54
10862: PPUSH
10863: LD_STRING DO-Med-c-1
10865: PPUSH
10866: CALL_OW 88
// if not hasExplosionCollected then
10870: LD_EXP 23
10874: NOT
10875: IFFALSE 10891
// Say ( Heike , DH-Med-d-14 ) else
10877: LD_EXP 46
10881: PPUSH
10882: LD_STRING DH-Med-d-14
10884: PPUSH
10885: CALL_OW 88
10889: GO 10953
// begin Say ( Heike , DH-Med-c-2 ) ;
10891: LD_EXP 46
10895: PPUSH
10896: LD_STRING DH-Med-c-2
10898: PPUSH
10899: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10903: LD_EXP 51
10907: PPUSH
10908: CALL_OW 302
10912: PUSH
10913: LD_EXP 51
10917: PUSH
10918: LD_EXP 14
10922: IN
10923: AND
10924: PUSH
10925: LD_EXP 51
10929: PPUSH
10930: CALL_OW 255
10934: PUSH
10935: LD_INT 2
10937: EQUAL
10938: AND
10939: IFFALSE 10953
// Say ( Kaia , DK-Med-c-3 ) ;
10941: LD_EXP 51
10945: PPUSH
10946: LD_STRING DK-Med-c-3
10948: PPUSH
10949: CALL_OW 88
// end ; DialogueOff ;
10953: CALL_OW 7
// adminAreaDiscovered := true ;
10957: LD_ADDR_EXP 22
10961: PUSH
10962: LD_INT 1
10964: ST_TO_ADDR
// end ;
10965: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10966: LD_EXP 51
10970: PPUSH
10971: CALL_OW 256
10975: PUSH
10976: LD_INT 250
10978: LESS
10979: PUSH
10980: LD_EXP 51
10984: PUSH
10985: LD_EXP 14
10989: IN
10990: AND
10991: PUSH
10992: LD_EXP 17
10996: AND
10997: PUSH
10998: LD_EXP 24
11002: AND
11003: IFFALSE 11132
11005: GO 11007
11007: DISABLE
// begin DialogueOn ;
11008: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
11012: LD_EXP 51
11016: PPUSH
11017: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
11021: LD_EXP 51
11025: PPUSH
11026: LD_STRING DK-death-1
11028: PPUSH
11029: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
11033: LD_EXP 46
11037: PPUSH
11038: LD_STRING DH-death-2
11040: PPUSH
11041: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11045: LD_EXP 51
11049: PPUSH
11050: LD_STRING DK-death-3
11052: PPUSH
11053: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11057: LD_EXP 51
11061: PPUSH
11062: LD_STRING DK-death-4
11064: PPUSH
11065: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11069: LD_EXP 51
11073: PPUSH
11074: LD_INT 8
11076: PPUSH
11077: CALL_OW 235
// ComStop ( Kaia ) ;
11081: LD_EXP 51
11085: PPUSH
11086: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11090: LD_INT 8
11092: PPUSH
11093: LD_INT 2
11095: PPUSH
11096: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11100: LD_ADDR_EXP 14
11104: PUSH
11105: LD_EXP 14
11109: PUSH
11110: LD_EXP 51
11114: DIFF
11115: ST_TO_ADDR
// DialogueOff ;
11116: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11120: LD_EXP 48
11124: PPUSH
11125: LD_STRING DM-death-5
11127: PPUSH
11128: CALL_OW 88
// end ;
11132: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11133: LD_EXP 25
11137: NOT
11138: PUSH
11139: LD_EXP 30
11143: NOT
11144: AND
11145: PUSH
11146: LD_EXP 59
11150: PUSH
11151: LD_EXP 14
11155: IN
11156: NOT
11157: AND
11158: PUSH
11159: LD_INT 2
11161: PPUSH
11162: LD_EXP 59
11166: PPUSH
11167: CALL_OW 292
11171: AND
11172: PUSH
11173: LD_EXP 46
11177: PPUSH
11178: LD_EXP 59
11182: PPUSH
11183: CALL_OW 296
11187: PUSH
11188: LD_INT 6
11190: LESS
11191: AND
11192: PUSH
11193: LD_EXP 17
11197: NOT
11198: AND
11199: IFFALSE 11423
11201: GO 11203
11203: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11204: LD_EXP 59
11208: PPUSH
11209: LD_EXP 46
11213: PPUSH
11214: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11218: LD_EXP 46
11222: PPUSH
11223: LD_EXP 59
11227: PPUSH
11228: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11232: LD_INT 10
11234: PPUSH
11235: CALL_OW 67
// DialogueOn ;
11239: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11243: LD_EXP 59
11247: PPUSH
11248: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11252: LD_EXP 46
11256: PPUSH
11257: LD_STRING DH-Deal-1
11259: PPUSH
11260: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11264: LD_EXP 59
11268: PPUSH
11269: LD_STRING DJ-Deal-2
11271: PPUSH
11272: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11276: LD_EXP 46
11280: PPUSH
11281: LD_STRING DH-Deal-3
11283: PPUSH
11284: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11288: LD_EXP 59
11292: PPUSH
11293: LD_STRING DJ-Deal-4
11295: PPUSH
11296: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11300: LD_EXP 59
11304: PPUSH
11305: LD_STRING DJ-Deal-5
11307: PPUSH
11308: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11312: LD_EXP 59
11316: PPUSH
11317: LD_STRING DJ-Deal-6
11319: PPUSH
11320: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11324: LD_EXP 59
11328: PPUSH
11329: LD_STRING DJ-Deal-7
11331: PPUSH
11332: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11336: LD_EXP 46
11340: PPUSH
11341: LD_STRING DH-Deal-8
11343: PPUSH
11344: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11348: LD_EXP 46
11352: PPUSH
11353: LD_STRING DH-Deal-9
11355: PPUSH
11356: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11360: LD_EXP 59
11364: PPUSH
11365: LD_STRING DJ-Deal-10
11367: PPUSH
11368: CALL_OW 88
// DialogueOff ;
11372: CALL_OW 7
// contactWithAmerican := true ;
11376: LD_ADDR_EXP 25
11380: PUSH
11381: LD_INT 1
11383: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11384: LD_STRING M1-american-out
11386: PPUSH
11387: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11391: LD_EXP 59
11395: PPUSH
11396: LD_INT 2
11398: PPUSH
11399: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11403: LD_ADDR_EXP 14
11407: PUSH
11408: LD_EXP 14
11412: PPUSH
11413: LD_EXP 59
11417: PPUSH
11418: CALL 66973 0 2
11422: ST_TO_ADDR
// end ;
11423: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11424: LD_EXP 25
11428: PUSH
11429: LD_EXP 30
11433: NOT
11434: AND
11435: PUSH
11436: LD_EXP 59
11440: PUSH
11441: LD_EXP 14
11445: IN
11446: NOT
11447: AND
11448: PUSH
11449: LD_INT 2
11451: PPUSH
11452: LD_EXP 59
11456: PPUSH
11457: CALL_OW 292
11461: AND
11462: PUSH
11463: LD_EXP 46
11467: PPUSH
11468: LD_EXP 59
11472: PPUSH
11473: CALL_OW 296
11477: PUSH
11478: LD_INT 6
11480: LESS
11481: AND
11482: PUSH
11483: LD_EXP 17
11487: NOT
11488: AND
11489: IFFALSE 11614
11491: GO 11493
11493: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11494: LD_EXP 59
11498: PPUSH
11499: LD_EXP 46
11503: PPUSH
11504: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11508: LD_EXP 46
11512: PPUSH
11513: LD_EXP 59
11517: PPUSH
11518: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11522: LD_INT 10
11524: PPUSH
11525: CALL_OW 67
// DialogueOn ;
11529: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11533: LD_EXP 59
11537: PPUSH
11538: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11542: LD_EXP 59
11546: PPUSH
11547: LD_STRING DJ-Escort-1
11549: PPUSH
11550: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11554: LD_EXP 46
11558: PPUSH
11559: LD_STRING DH-Escort-2
11561: PPUSH
11562: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11566: LD_EXP 59
11570: PPUSH
11571: LD_STRING DJ-Escort-3
11573: PPUSH
11574: CALL_OW 88
// DialogueOff ;
11578: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11582: LD_EXP 59
11586: PPUSH
11587: LD_INT 2
11589: PPUSH
11590: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11594: LD_ADDR_EXP 14
11598: PUSH
11599: LD_EXP 14
11603: PPUSH
11604: LD_EXP 59
11608: PPUSH
11609: CALL 66973 0 2
11613: ST_TO_ADDR
// end ;
11614: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11615: LD_EXP 25
11619: PUSH
11620: LD_EXP 30
11624: NOT
11625: AND
11626: PUSH
11627: LD_EXP 58
11631: PUSH
11632: LD_EXP 14
11636: DIFF
11637: PPUSH
11638: LD_INT 22
11640: PUSH
11641: LD_INT 4
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 3
11650: PUSH
11651: LD_INT 120
11653: PUSH
11654: LD_INT 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 101
11667: PUSH
11668: LD_INT 2
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: LIST
11679: PPUSH
11680: CALL_OW 72
11684: AND
11685: PUSH
11686: LD_EXP 17
11690: NOT
11691: AND
11692: IFFALSE 11919
11694: GO 11696
11696: DISABLE
11697: LD_INT 0
11699: PPUSH
// begin enable ;
11700: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11701: LD_ADDR_VAR 0 1
11705: PUSH
11706: LD_EXP 58
11710: PUSH
11711: LD_EXP 14
11715: DIFF
11716: PPUSH
11717: LD_INT 22
11719: PUSH
11720: LD_INT 4
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 91
11729: PUSH
11730: LD_EXP 46
11734: PUSH
11735: LD_INT 6
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 101
11745: PUSH
11746: LD_INT 2
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: PPUSH
11758: CALL_OW 72
11762: PPUSH
11763: LD_EXP 46
11767: PPUSH
11768: CALL_OW 74
11772: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11773: LD_VAR 0 1
11777: PPUSH
11778: LD_EXP 46
11782: PPUSH
11783: CALL_OW 296
11787: PUSH
11788: LD_INT 6
11790: LESS
11791: IFFALSE 11919
// begin DialogueOn ;
11793: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11797: LD_VAR 0 1
11801: PPUSH
11802: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11806: LD_EXP 46
11810: PPUSH
11811: LD_STRING DH-USsol-1
11813: PPUSH
11814: CALL_OW 88
// if un <> Jerry then
11818: LD_VAR 0 1
11822: PUSH
11823: LD_EXP 61
11827: NONEQUAL
11828: IFFALSE 11871
// if GetSex ( un ) = sex_male then
11830: LD_VAR 0 1
11834: PPUSH
11835: CALL_OW 258
11839: PUSH
11840: LD_INT 1
11842: EQUAL
11843: IFFALSE 11859
// Say ( un , DUSM-USsol-2 ) else
11845: LD_VAR 0 1
11849: PPUSH
11850: LD_STRING DUSM-USsol-2
11852: PPUSH
11853: CALL_OW 88
11857: GO 11871
// Say ( un , DUSF-USsol-2 ) ;
11859: LD_VAR 0 1
11863: PPUSH
11864: LD_STRING DUSF-USsol-2
11866: PPUSH
11867: CALL_OW 88
// DialogueOff ;
11871: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11875: LD_ADDR_EXP 14
11879: PUSH
11880: LD_EXP 14
11884: PPUSH
11885: LD_VAR 0 1
11889: PPUSH
11890: CALL 66973 0 2
11894: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11895: LD_VAR 0 1
11899: PPUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL_OW 109
// SetSide ( un , 2 ) ;
11907: LD_VAR 0 1
11911: PPUSH
11912: LD_INT 2
11914: PPUSH
11915: CALL_OW 235
// end ; end ;
11919: PPOPN 1
11921: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11922: LD_EXP 57
11926: PUSH
11927: LD_EXP 30
11931: NOT
11932: AND
11933: PUSH
11934: LD_EXP 57
11938: PUSH
11939: LD_EXP 14
11943: DIFF
11944: PPUSH
11945: LD_INT 3
11947: PUSH
11948: LD_INT 120
11950: PUSH
11951: LD_INT 1
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 91
11964: PUSH
11965: LD_EXP 46
11969: PUSH
11970: LD_INT 6
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: PUSH
11978: LD_INT 101
11980: PUSH
11981: LD_INT 2
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: PPUSH
11993: CALL_OW 72
11997: AND
11998: PUSH
11999: LD_EXP 17
12003: NOT
12004: AND
12005: IFFALSE 12220
12007: GO 12009
12009: DISABLE
12010: LD_INT 0
12012: PPUSH
// begin enable ;
12013: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
12014: LD_ADDR_VAR 0 1
12018: PUSH
12019: LD_EXP 57
12023: PUSH
12024: LD_EXP 14
12028: DIFF
12029: PPUSH
12030: LD_INT 22
12032: PUSH
12033: LD_INT 5
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 91
12042: PUSH
12043: LD_EXP 46
12047: PUSH
12048: LD_INT 6
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: PUSH
12056: LD_INT 101
12058: PUSH
12059: LD_INT 2
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 72
12075: PPUSH
12076: LD_EXP 46
12080: PPUSH
12081: CALL_OW 74
12085: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12086: LD_VAR 0 1
12090: PPUSH
12091: LD_EXP 46
12095: PPUSH
12096: CALL_OW 296
12100: PUSH
12101: LD_INT 6
12103: LESS
12104: IFFALSE 12220
// begin DialogueOn ;
12106: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12110: LD_VAR 0 1
12114: PPUSH
12115: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12119: LD_EXP 46
12123: PPUSH
12124: LD_STRING DH-USsol-1
12126: PPUSH
12127: CALL_OW 88
// if GetSex ( un ) = sex_male then
12131: LD_VAR 0 1
12135: PPUSH
12136: CALL_OW 258
12140: PUSH
12141: LD_INT 1
12143: EQUAL
12144: IFFALSE 12160
// Say ( un , DArm-USsol-2 ) else
12146: LD_VAR 0 1
12150: PPUSH
12151: LD_STRING DArm-USsol-2
12153: PPUSH
12154: CALL_OW 88
12158: GO 12172
// Say ( un , DArf-USsol-3 ) ;
12160: LD_VAR 0 1
12164: PPUSH
12165: LD_STRING DArf-USsol-3
12167: PPUSH
12168: CALL_OW 88
// DialogueOff ;
12172: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12176: LD_ADDR_EXP 14
12180: PUSH
12181: LD_EXP 14
12185: PPUSH
12186: LD_VAR 0 1
12190: PPUSH
12191: CALL 66973 0 2
12195: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12196: LD_VAR 0 1
12200: PPUSH
12201: LD_INT 1
12203: PPUSH
12204: CALL_OW 109
// SetSide ( un , 2 ) ;
12208: LD_VAR 0 1
12212: PPUSH
12213: LD_INT 2
12215: PPUSH
12216: CALL_OW 235
// end ; end ;
12220: PPOPN 1
12222: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12223: LD_EXP 58
12227: PPUSH
12228: LD_INT 101
12230: PUSH
12231: LD_INT 2
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PPUSH
12238: CALL_OW 72
12242: PUSH
12243: LD_EXP 14
12247: PPUSH
12248: LD_INT 22
12250: PUSH
12251: LD_INT 2
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PPUSH
12258: CALL_OW 72
12262: PUSH
12263: LD_INT 5
12265: GREATER
12266: AND
12267: PUSH
12268: LD_EXP 10
12272: NOT
12273: AND
12274: PUSH
12275: LD_EXP 30
12279: NOT
12280: AND
12281: PUSH
12282: LD_EXP 25
12286: NOT
12287: AND
12288: PUSH
12289: LD_EXP 17
12293: NOT
12294: AND
12295: IFFALSE 12410
12297: GO 12299
12299: DISABLE
12300: LD_INT 0
12302: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12303: LD_ADDR_VAR 0 1
12307: PUSH
12308: LD_EXP 58
12312: PPUSH
12313: LD_INT 22
12315: PUSH
12316: LD_INT 4
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 101
12325: PUSH
12326: LD_INT 2
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PPUSH
12337: CALL_OW 72
12341: PUSH
12342: LD_INT 1
12344: ARRAY
12345: ST_TO_ADDR
// DialogueOn ;
12346: CALL_OW 6
// if GetSex ( un ) = sex_male then
12350: LD_VAR 0 1
12354: PPUSH
12355: CALL_OW 258
12359: PUSH
12360: LD_INT 1
12362: EQUAL
12363: IFFALSE 12379
// Say ( un , DUSm-USsol-a-2 ) else
12365: LD_VAR 0 1
12369: PPUSH
12370: LD_STRING DUSm-USsol-a-2
12372: PPUSH
12373: CALL_OW 88
12377: GO 12391
// Say ( un , DUSf-USsol-a-2 ) ;
12379: LD_VAR 0 1
12383: PPUSH
12384: LD_STRING DUSf-USsol-a-2
12386: PPUSH
12387: CALL_OW 88
// DialogueOff ;
12391: CALL_OW 7
// wait ( 0 0$2 ) ;
12395: LD_INT 70
12397: PPUSH
12398: CALL_OW 67
// isAlarm := true ;
12402: LD_ADDR_EXP 17
12406: PUSH
12407: LD_INT 1
12409: ST_TO_ADDR
// end ;
12410: PPOPN 1
12412: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12413: LD_EXP 17
12417: NOT
12418: PUSH
12419: LD_EXP 47
12423: PPUSH
12424: CALL_OW 302
12428: AND
12429: PUSH
12430: LD_EXP 47
12434: PPUSH
12435: CALL_OW 255
12439: PUSH
12440: LD_INT 2
12442: EQUAL
12443: AND
12444: PUSH
12445: LD_EXP 26
12449: AND
12450: PUSH
12451: LD_EXP 28
12455: NOT
12456: AND
12457: PUSH
12458: LD_EXP 27
12462: NOT
12463: AND
12464: PUSH
12465: LD_EXP 30
12469: NOT
12470: AND
12471: PUSH
12472: LD_EXP 47
12476: PPUSH
12477: LD_INT 165
12479: PPUSH
12480: CALL 20288 0 2
12484: AND
12485: IFFALSE 12617
12487: GO 12489
12489: DISABLE
// begin enable ;
12490: ENABLE
// InGameOn ;
12491: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12495: LD_EXP 47
12499: PPUSH
12500: LD_INT 5
12502: PPUSH
12503: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12507: LD_INT 165
12509: PPUSH
12510: LD_INT 5
12512: PPUSH
12513: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12517: LD_EXP 47
12521: PPUSH
12522: LD_INT 165
12524: PPUSH
12525: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12529: LD_INT 35
12531: PPUSH
12532: CALL_OW 67
// until IsInUnit ( Givi ) ;
12536: LD_EXP 47
12540: PPUSH
12541: CALL_OW 310
12545: IFFALSE 12529
// case Query ( GiviInLaundry ) of 1 :
12547: LD_STRING GiviInLaundry
12549: PPUSH
12550: CALL_OW 97
12554: PUSH
12555: LD_INT 1
12557: DOUBLE
12558: EQUAL
12559: IFTRUE 12563
12561: GO 12570
12563: POP
// SpawnGiviAsRussian ; 2 :
12564: CALL 1918 0 0
12568: GO 12582
12570: LD_INT 2
12572: DOUBLE
12573: EQUAL
12574: IFTRUE 12578
12576: GO 12581
12578: POP
// ; end ;
12579: GO 12582
12581: POP
// ComExitBuilding ( Givi ) ;
12582: LD_EXP 47
12586: PPUSH
12587: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12591: LD_EXP 47
12595: PPUSH
12596: LD_INT 2
12598: PPUSH
12599: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12603: LD_INT 165
12605: PPUSH
12606: LD_INT 3
12608: PPUSH
12609: CALL_OW 235
// InGameOff ;
12613: CALL_OW 9
// end ;
12617: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12618: LD_EXP 17
12622: NOT
12623: PUSH
12624: LD_EXP 28
12628: AND
12629: PUSH
12630: LD_EXP 47
12634: PPUSH
12635: CALL_OW 255
12639: PUSH
12640: LD_INT 2
12642: EQUAL
12643: AND
12644: PUSH
12645: LD_EXP 47
12649: PPUSH
12650: CALL_OW 248
12654: PUSH
12655: LD_INT 3
12657: EQUAL
12658: AND
12659: PUSH
12660: LD_EXP 47
12664: PPUSH
12665: LD_INT 119
12667: PPUSH
12668: CALL 20288 0 2
12672: AND
12673: PUSH
12674: LD_EXP 30
12678: NOT
12679: AND
12680: IFFALSE 12934
12682: GO 12684
12684: DISABLE
// begin InGameOn ;
12685: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12689: LD_EXP 47
12693: PPUSH
12694: LD_INT 3
12696: PPUSH
12697: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12701: LD_INT 10
12703: PPUSH
12704: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12708: LD_EXP 47
12712: PPUSH
12713: LD_INT 119
12715: PPUSH
12716: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12720: LD_INT 35
12722: PPUSH
12723: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12727: LD_EXP 47
12731: PPUSH
12732: LD_INT 119
12734: PPUSH
12735: CALL_OW 120
// until IsInUnit ( Givi ) ;
12739: LD_EXP 47
12743: PPUSH
12744: CALL_OW 310
12748: IFFALSE 12720
// DialogueOn ;
12750: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12754: LD_EXP 47
12758: PPUSH
12759: LD_STRING DG-Captive-1
12761: PPUSH
12762: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12766: LD_EXP 65
12770: PPUSH
12771: LD_STRING DCom-Captive-2
12773: PPUSH
12774: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12778: LD_EXP 47
12782: PPUSH
12783: LD_STRING DG-Captive-3
12785: PPUSH
12786: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12790: LD_EXP 65
12794: PPUSH
12795: LD_STRING DCom-Captive-4
12797: PPUSH
12798: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12802: LD_EXP 65
12806: PPUSH
12807: CALL_OW 64
// DialogueOff ;
12811: CALL_OW 7
// InGameOff ;
12815: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12819: LD_EXP 47
12823: PPUSH
12824: LD_INT 2
12826: PPUSH
12827: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12831: LD_EXP 47
12835: PPUSH
12836: CALL_OW 122
// if Aviradze then
12840: LD_EXP 56
12844: IFFALSE 12887
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12846: LD_ADDR_EXP 14
12850: PUSH
12851: LD_EXP 14
12855: PPUSH
12856: LD_EXP 56
12860: PPUSH
12861: CALL 66973 0 2
12865: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12866: LD_EXP 56
12870: PPUSH
12871: LD_INT 2
12873: PPUSH
12874: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12878: LD_EXP 56
12882: PPUSH
12883: CALL_OW 122
// end ; if Ibrahim then
12887: LD_EXP 49
12891: IFFALSE 12934
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12893: LD_ADDR_EXP 14
12897: PUSH
12898: LD_EXP 14
12902: PPUSH
12903: LD_EXP 49
12907: PPUSH
12908: CALL 66973 0 2
12912: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12913: LD_EXP 49
12917: PPUSH
12918: LD_INT 2
12920: PPUSH
12921: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12925: LD_EXP 49
12929: PPUSH
12930: CALL_OW 122
// end ; end ;
12934: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12935: LD_EXP 17
12939: NOT
12940: PUSH
12941: LD_EXP 27
12945: AND
12946: PUSH
12947: LD_EXP 46
12951: PPUSH
12952: CALL_OW 248
12956: PUSH
12957: LD_INT 3
12959: EQUAL
12960: AND
12961: PUSH
12962: LD_EXP 46
12966: PPUSH
12967: LD_INT 119
12969: PPUSH
12970: CALL 20288 0 2
12974: AND
12975: PUSH
12976: LD_EXP 30
12980: NOT
12981: AND
12982: IFFALSE 13281
12984: GO 12986
12986: DISABLE
// begin InGameOn ;
12987: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12991: LD_EXP 46
12995: PPUSH
12996: LD_INT 3
12998: PPUSH
12999: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13003: LD_INT 10
13005: PPUSH
13006: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13010: LD_EXP 46
13014: PPUSH
13015: LD_INT 119
13017: PPUSH
13018: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13022: LD_INT 35
13024: PPUSH
13025: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13029: LD_EXP 46
13033: PPUSH
13034: LD_INT 119
13036: PPUSH
13037: CALL_OW 120
// until IsInUnit ( Heike ) ;
13041: LD_EXP 46
13045: PPUSH
13046: CALL_OW 310
13050: IFFALSE 13022
// wait ( 0 0$1 ) ;
13052: LD_INT 35
13054: PPUSH
13055: CALL_OW 67
// DialogueOn ;
13059: CALL_OW 6
// if Aviradze and Ibrahim then
13063: LD_EXP 56
13067: PUSH
13068: LD_EXP 49
13072: AND
13073: IFFALSE 13089
// Say ( Heike , DH-Captive-a-1 ) else
13075: LD_EXP 46
13079: PPUSH
13080: LD_STRING DH-Captive-a-1
13082: PPUSH
13083: CALL_OW 88
13087: GO 13101
// Say ( Heike , DH-Captive-a-b-1 ) ;
13089: LD_EXP 46
13093: PPUSH
13094: LD_STRING DH-Captive-a-b-1
13096: PPUSH
13097: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13101: LD_EXP 65
13105: PPUSH
13106: LD_STRING DCom-Captive-a-2
13108: PPUSH
13109: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13113: LD_EXP 46
13117: PPUSH
13118: LD_STRING DH-Captive-a-3
13120: PPUSH
13121: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13125: LD_EXP 65
13129: PPUSH
13130: LD_STRING DCom-Captive-a-4
13132: PPUSH
13133: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13137: LD_EXP 46
13141: PPUSH
13142: LD_STRING DH-Captive-a-5
13144: PPUSH
13145: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13149: LD_EXP 65
13153: PPUSH
13154: CALL_OW 64
// DialogueOff ;
13158: CALL_OW 7
// InGameOff ;
13162: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13166: LD_EXP 46
13170: PPUSH
13171: LD_INT 2
13173: PPUSH
13174: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13178: LD_EXP 46
13182: PPUSH
13183: CALL_OW 122
// if Aviradze then
13187: LD_EXP 56
13191: IFFALSE 13234
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13193: LD_ADDR_EXP 14
13197: PUSH
13198: LD_EXP 14
13202: PPUSH
13203: LD_EXP 56
13207: PPUSH
13208: CALL 66973 0 2
13212: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13213: LD_EXP 56
13217: PPUSH
13218: LD_INT 2
13220: PPUSH
13221: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13225: LD_EXP 56
13229: PPUSH
13230: CALL_OW 122
// end ; if Ibrahim then
13234: LD_EXP 49
13238: IFFALSE 13281
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13240: LD_ADDR_EXP 14
13244: PUSH
13245: LD_EXP 14
13249: PPUSH
13250: LD_EXP 49
13254: PPUSH
13255: CALL 66973 0 2
13259: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13260: LD_EXP 49
13264: PPUSH
13265: LD_INT 2
13267: PPUSH
13268: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13272: LD_EXP 49
13276: PPUSH
13277: CALL_OW 122
// end ; end ;
13281: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13282: LD_INT 2
13284: PUSH
13285: LD_INT 25
13287: PUSH
13288: LD_INT 32
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 25
13297: PUSH
13298: LD_INT 34
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: IFFALSE 13326
13316: GO 13318
13318: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13319: LD_STRING M1-weapons-out
13321: PPUSH
13322: CALL_OW 604
13326: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13327: LD_INT 2
13329: PPUSH
13330: LD_EXP 61
13334: PPUSH
13335: CALL_OW 292
13339: PUSH
13340: LD_EXP 46
13344: PPUSH
13345: LD_EXP 61
13349: PPUSH
13350: CALL_OW 296
13354: AND
13355: PUSH
13356: LD_EXP 17
13360: NOT
13361: AND
13362: PUSH
13363: LD_EXP 30
13367: NOT
13368: AND
13369: IFFALSE 14227
13371: GO 13373
13373: DISABLE
13374: LD_INT 0
13376: PPUSH
13377: PPUSH
// begin if contactWithAmerican then
13378: LD_EXP 25
13382: IFFALSE 13479
// begin DialogueOn ;
13384: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13388: LD_EXP 61
13392: PPUSH
13393: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13397: LD_EXP 46
13401: PPUSH
13402: LD_STRING DH-USsol-1
13404: PPUSH
13405: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13409: LD_EXP 61
13413: PPUSH
13414: LD_INT 2
13416: PPUSH
13417: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13421: LD_ADDR_EXP 58
13425: PUSH
13426: LD_EXP 58
13430: PPUSH
13431: LD_EXP 61
13435: PPUSH
13436: CALL 66973 0 2
13440: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13441: LD_ADDR_EXP 14
13445: PUSH
13446: LD_EXP 14
13450: PPUSH
13451: LD_EXP 48
13455: PPUSH
13456: CALL 66973 0 2
13460: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13461: LD_EXP 61
13465: PPUSH
13466: LD_INT 1
13468: PPUSH
13469: CALL_OW 109
// DialogueOff ;
13473: CALL_OW 7
// exit ;
13477: GO 14227
// end ; DialogueOn ;
13479: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13483: LD_EXP 61
13487: PPUSH
13488: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13492: LD_EXP 61
13496: PPUSH
13497: LD_STRING DJy-Food-1
13499: PPUSH
13500: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13504: LD_EXP 46
13508: PPUSH
13509: LD_STRING DH-Food-2
13511: PPUSH
13512: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13516: LD_EXP 61
13520: PPUSH
13521: LD_STRING DJy-Food-3
13523: PPUSH
13524: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13528: LD_EXP 61
13532: PPUSH
13533: LD_STRING DJy-Food-4
13535: PPUSH
13536: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13540: LD_EXP 46
13544: PPUSH
13545: LD_STRING DH-Food-5
13547: PPUSH
13548: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13552: LD_EXP 61
13556: PPUSH
13557: LD_STRING DJy-Food-6
13559: PPUSH
13560: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13564: LD_EXP 61
13568: PPUSH
13569: LD_STRING DJy-Food-7
13571: PPUSH
13572: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13576: LD_EXP 61
13580: PPUSH
13581: LD_STRING DJy-Food-8
13583: PPUSH
13584: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13588: LD_EXP 46
13592: PPUSH
13593: LD_STRING DH-Food-9
13595: PPUSH
13596: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13600: LD_EXP 61
13604: PPUSH
13605: LD_STRING DJy-Food-10
13607: PPUSH
13608: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13612: LD_EXP 46
13616: PPUSH
13617: LD_STRING DH-Food-11
13619: PPUSH
13620: CALL_OW 88
// DialogueOff ;
13624: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13628: LD_STRING M3
13630: PPUSH
13631: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13635: LD_INT 5
13637: PPUSH
13638: LD_INT 215
13640: PPUSH
13641: LD_INT 117
13643: PPUSH
13644: LD_INT 0
13646: PPUSH
13647: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13651: LD_INT 215
13653: PPUSH
13654: LD_INT 118
13656: PPUSH
13657: LD_INT 2
13659: PPUSH
13660: LD_INT 6
13662: NEG
13663: PPUSH
13664: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13668: LD_INT 215
13670: PPUSH
13671: LD_INT 118
13673: PPUSH
13674: LD_INT 2
13676: PPUSH
13677: CALL_OW 331
// foodDelivered := false ;
13681: LD_ADDR_VAR 0 2
13685: PUSH
13686: LD_INT 0
13688: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13689: LD_INT 35
13691: PPUSH
13692: CALL_OW 67
// if hasMuchin then
13696: LD_EXP 30
13700: IFFALSE 13704
// continue ;
13702: GO 13689
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13704: LD_ADDR_VAR 0 1
13708: PUSH
13709: LD_EXP 14
13713: PUSH
13714: LD_EXP 46
13718: UNION
13719: PPUSH
13720: LD_INT 91
13722: PUSH
13723: LD_EXP 61
13727: PUSH
13728: LD_INT 6
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 25
13738: PUSH
13739: LD_INT 33
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PPUSH
13750: CALL_OW 72
13754: PUSH
13755: FOR_IN
13756: IFFALSE 13956
// if Carry ( i ) then
13758: LD_VAR 0 1
13762: PPUSH
13763: CALL_OW 281
13767: IFFALSE 13954
// begin DialogueOn ;
13769: CALL_OW 6
// foodDelivered := true ;
13773: LD_ADDR_VAR 0 2
13777: PUSH
13778: LD_INT 1
13780: ST_TO_ADDR
// case i of Heike :
13781: LD_VAR 0 1
13785: PUSH
13786: LD_EXP 46
13790: DOUBLE
13791: EQUAL
13792: IFTRUE 13796
13794: GO 13811
13796: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13797: LD_EXP 46
13801: PPUSH
13802: LD_STRING DH-Food-12
13804: PPUSH
13805: CALL_OW 88
13809: GO 13937
13811: LD_EXP 51
13815: DOUBLE
13816: EQUAL
13817: IFTRUE 13821
13819: GO 13836
13821: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13822: LD_EXP 51
13826: PPUSH
13827: LD_STRING DK-Food-a-12
13829: PPUSH
13830: CALL_OW 88
13834: GO 13937
13836: LD_EXP 53
13840: DOUBLE
13841: EQUAL
13842: IFTRUE 13846
13844: GO 13861
13846: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13847: LD_EXP 53
13851: PPUSH
13852: LD_STRING DMar-Food-a-12
13854: PPUSH
13855: CALL_OW 88
13859: GO 13937
13861: LD_EXP 47
13865: DOUBLE
13866: EQUAL
13867: IFTRUE 13871
13869: GO 13886
13871: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13872: LD_EXP 47
13876: PPUSH
13877: LD_STRING DG-Food-a-14
13879: PPUSH
13880: CALL_OW 88
13884: GO 13937
13886: LD_EXP 48
13890: DOUBLE
13891: EQUAL
13892: IFTRUE 13896
13894: GO 13911
13896: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13897: LD_EXP 48
13901: PPUSH
13902: LD_STRING DM-Food-a-15
13904: PPUSH
13905: CALL_OW 88
13909: GO 13937
13911: LD_EXP 50
13915: DOUBLE
13916: EQUAL
13917: IFTRUE 13921
13919: GO 13936
13921: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13922: LD_EXP 50
13926: PPUSH
13927: LD_STRING DKam-Food-a-16
13929: PPUSH
13930: CALL_OW 88
13934: GO 13937
13936: POP
// SetCargo ( i , mat_cans , 0 ) ;
13937: LD_VAR 0 1
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: LD_INT 0
13947: PPUSH
13948: CALL_OW 290
// break ;
13952: GO 13956
// end ;
13954: GO 13755
13956: POP
13957: POP
// until foodDelivered ;
13958: LD_VAR 0 2
13962: IFFALSE 13689
// givenFood := true ;
13964: LD_ADDR_EXP 33
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13972: LD_EXP 61
13976: PPUSH
13977: LD_STRING DJy-Food-13
13979: PPUSH
13980: CALL_OW 88
// hasVirus := true ;
13984: LD_ADDR_EXP 31
13988: PUSH
13989: LD_INT 1
13991: ST_TO_ADDR
// if not americanContact then
13992: LD_EXP 10
13996: NOT
13997: IFFALSE 14047
// begin Say ( Heike , DH-Food-14 ) ;
13999: LD_EXP 46
14003: PPUSH
14004: LD_STRING DH-Food-14
14006: PPUSH
14007: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
14011: LD_EXP 61
14015: PPUSH
14016: LD_STRING DJy-Food-15
14018: PPUSH
14019: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
14023: LD_EXP 61
14027: PPUSH
14028: LD_STRING DJy-Food-16
14030: PPUSH
14031: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
14035: LD_EXP 61
14039: PPUSH
14040: LD_STRING DJy-Food-17
14042: PPUSH
14043: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14047: LD_STRING M3-out
14049: PPUSH
14050: CALL_OW 337
// DialogueOff ;
14054: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
14058: LD_EXP 61
14062: PPUSH
14063: LD_INT 1
14065: PPUSH
14066: LD_INT 10
14068: PPUSH
14069: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14073: LD_EXP 61
14077: PPUSH
14078: LD_INT 95
14080: PPUSH
14081: LD_INT 17
14083: PPUSH
14084: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14088: LD_INT 35
14090: PPUSH
14091: CALL_OW 67
// if not HasTask ( Jerry ) then
14095: LD_EXP 61
14099: PPUSH
14100: CALL_OW 314
14104: NOT
14105: IFFALSE 14122
// ComMoveXY ( Jerry , 95 , 17 ) ;
14107: LD_EXP 61
14111: PPUSH
14112: LD_INT 95
14114: PPUSH
14115: LD_INT 17
14117: PPUSH
14118: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14122: LD_EXP 61
14126: PPUSH
14127: LD_INT 95
14129: PPUSH
14130: LD_INT 17
14132: PPUSH
14133: CALL_OW 307
14137: IFFALSE 14088
// SetCargo ( Jerry , mat_cans , 0 ) ;
14139: LD_EXP 61
14143: PPUSH
14144: LD_INT 1
14146: PPUSH
14147: LD_INT 0
14149: PPUSH
14150: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14154: LD_ADDR_EXP 58
14158: PUSH
14159: LD_EXP 58
14163: PPUSH
14164: LD_EXP 61
14168: PPUSH
14169: CALL 66973 0 2
14173: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14174: LD_ADDR_VAR 0 1
14178: PUSH
14179: LD_INT 22
14181: PUSH
14182: LD_INT 4
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 23
14191: PUSH
14192: LD_INT 1
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PPUSH
14203: CALL_OW 69
14207: PUSH
14208: FOR_IN
14209: IFFALSE 14225
// SetLives ( i , 1000 ) ;
14211: LD_VAR 0 1
14215: PPUSH
14216: LD_INT 1000
14218: PPUSH
14219: CALL_OW 234
14223: GO 14208
14225: POP
14226: POP
// end ;
14227: PPOPN 2
14229: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14230: LD_EXP 30
14234: NOT
14235: PUSH
14236: LD_EXP 6
14240: AND
14241: IFFALSE 14667
14243: GO 14245
14245: DISABLE
14246: LD_INT 0
14248: PPUSH
14249: PPUSH
// begin tmp := [ ] ;
14250: LD_ADDR_VAR 0 2
14254: PUSH
14255: EMPTY
14256: ST_TO_ADDR
// uc_side := 3 ;
14257: LD_ADDR_OWVAR 20
14261: PUSH
14262: LD_INT 3
14264: ST_TO_ADDR
// uc_nation := 3 ;
14265: LD_ADDR_OWVAR 21
14269: PUSH
14270: LD_INT 3
14272: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14273: LD_INT 1
14275: PPUSH
14276: LD_INT 8
14278: PPUSH
14279: CALL_OW 381
// un := CreateHuman ;
14283: LD_ADDR_VAR 0 1
14287: PUSH
14288: CALL_OW 44
14292: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14293: LD_VAR 0 1
14297: PPUSH
14298: LD_INT 173
14300: PPUSH
14301: LD_INT 104
14303: PPUSH
14304: LD_INT 0
14306: PPUSH
14307: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14311: LD_ADDR_VAR 0 2
14315: PUSH
14316: LD_VAR 0 2
14320: PPUSH
14321: LD_VAR 0 1
14325: PPUSH
14326: CALL 66973 0 2
14330: ST_TO_ADDR
// un := CreateHuman ;
14331: LD_ADDR_VAR 0 1
14335: PUSH
14336: CALL_OW 44
14340: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14341: LD_VAR 0 1
14345: PPUSH
14346: LD_INT 73
14348: PPUSH
14349: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14353: LD_ADDR_VAR 0 2
14357: PUSH
14358: LD_VAR 0 2
14362: PPUSH
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL 66973 0 2
14372: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14373: LD_INT 35
14375: PPUSH
14376: CALL_OW 67
// if isAlarm then
14380: LD_EXP 17
14384: IFFALSE 14388
// exit ;
14386: GO 14667
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 12 ;
14388: LD_EXP 51
14392: PPUSH
14393: CALL_OW 255
14397: PUSH
14398: LD_INT 2
14400: EQUAL
14401: PUSH
14402: LD_EXP 51
14406: PPUSH
14407: LD_INT 73
14409: PPUSH
14410: CALL_OW 296
14414: PUSH
14415: LD_INT 12
14417: LESS
14418: AND
14419: IFFALSE 14373
// InGameOn ;
14421: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14425: LD_INT 73
14427: PPUSH
14428: CALL_OW 250
14432: PPUSH
14433: LD_INT 73
14435: PPUSH
14436: CALL_OW 251
14440: PPUSH
14441: LD_INT 2
14443: PPUSH
14444: LD_INT 9
14446: NEG
14447: PPUSH
14448: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14452: LD_INT 73
14454: PPUSH
14455: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14459: LD_EXP 51
14463: PPUSH
14464: LD_INT 73
14466: PPUSH
14467: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14471: LD_EXP 51
14475: PPUSH
14476: LD_STRING DK-Plastic-1
14478: PPUSH
14479: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14483: LD_EXP 51
14487: PPUSH
14488: LD_STRING DK-Plastic-2
14490: PPUSH
14491: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14495: LD_EXP 51
14499: PPUSH
14500: LD_INT 73
14502: PPUSH
14503: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14507: LD_INT 35
14509: PPUSH
14510: CALL_OW 67
// if isAlarm then
14514: LD_EXP 17
14518: IFFALSE 14522
// exit ;
14520: GO 14667
// until GetDistUnits ( Kaia , barExplosion ) < 8 ;
14522: LD_EXP 51
14526: PPUSH
14527: LD_INT 73
14529: PPUSH
14530: CALL_OW 296
14534: PUSH
14535: LD_INT 8
14537: LESS
14538: IFFALSE 14507
// ComHold ( Kaia ) ;
14540: LD_EXP 51
14544: PPUSH
14545: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14549: LD_VAR 0 2
14553: PUSH
14554: LD_INT 1
14556: ARRAY
14557: PPUSH
14558: LD_STRING DRum-Plastic-3
14560: PPUSH
14561: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14565: LD_VAR 0 2
14569: PUSH
14570: LD_INT 2
14572: ARRAY
14573: PPUSH
14574: LD_STRING DRum2-Plastic-4
14576: PPUSH
14577: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14581: LD_VAR 0 2
14585: PUSH
14586: LD_INT 1
14588: ARRAY
14589: PPUSH
14590: LD_STRING DRum-Plastic-5
14592: PPUSH
14593: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14597: LD_VAR 0 2
14601: PUSH
14602: LD_INT 2
14604: ARRAY
14605: PPUSH
14606: LD_STRING DRum2-Plastic-6
14608: PPUSH
14609: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14613: LD_EXP 51
14617: PPUSH
14618: LD_STRING DK-Plastic-7
14620: PPUSH
14621: CALL_OW 88
// InGameOff ;
14625: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14629: LD_INT 73
14631: PPUSH
14632: CALL_OW 250
14636: PPUSH
14637: LD_INT 73
14639: PPUSH
14640: CALL_OW 251
14644: PPUSH
14645: LD_INT 2
14647: PPUSH
14648: CALL_OW 331
// explosionsTakenByRussians := true ;
14652: LD_ADDR_EXP 21
14656: PUSH
14657: LD_INT 1
14659: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14660: LD_STRING ExplosivesInfo
14662: PPUSH
14663: CALL_OW 97
// end ;
14667: PPOPN 2
14669: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do var class ;
14670: LD_EXP 21
14674: PUSH
14675: LD_EXP 51
14679: PPUSH
14680: CALL_OW 255
14684: PUSH
14685: LD_INT 2
14687: EQUAL
14688: AND
14689: PUSH
14690: LD_EXP 51
14694: PPUSH
14695: LD_INT 61
14697: PPUSH
14698: CALL 20288 0 2
14702: AND
14703: PUSH
14704: LD_EXP 17
14708: NOT
14709: AND
14710: PUSH
14711: LD_EXP 30
14715: NOT
14716: AND
14717: IFFALSE 15000
14719: GO 14721
14721: DISABLE
14722: LD_INT 0
14724: PPUSH
// begin class := GetClass ( Kaia ) ;
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: LD_EXP 51
14734: PPUSH
14735: CALL_OW 257
14739: ST_TO_ADDR
// if class <> class_prison then
14740: LD_VAR 0 1
14744: PUSH
14745: LD_INT 33
14747: NONEQUAL
14748: IFFALSE 14841
// begin Query ( QKaiaWeapon ) ;
14750: LD_STRING QKaiaWeapon
14752: PPUSH
14753: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
14757: LD_INT 67
14759: PPUSH
14760: LD_INT 1
14762: PPUSH
14763: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
14767: LD_INT 192
14769: PPUSH
14770: LD_INT 71
14772: PPUSH
14773: CALL_OW 86
// kaiaWeaponHidden := class ;
14777: LD_ADDR_EXP 45
14781: PUSH
14782: LD_VAR 0 1
14786: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14787: LD_INT 35
14789: PPUSH
14790: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
14794: LD_EXP 51
14798: PPUSH
14799: LD_INT 67
14801: PPUSH
14802: CALL_OW 308
14806: IFFALSE 14787
// SetClass ( Kaia , class_prison ) ;
14808: LD_EXP 51
14812: PPUSH
14813: LD_INT 33
14815: PPUSH
14816: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
14820: LD_INT 35
14822: PPUSH
14823: CALL_OW 67
// until InEntrance ( Kaia , ruFac ) ;
14827: LD_EXP 51
14831: PPUSH
14832: LD_INT 61
14834: PPUSH
14835: CALL 20288 0 2
14839: IFFALSE 14820
// end ; if knowWhereExplosivesAre then
14841: LD_EXP 34
14845: IFFALSE 14849
// exit ;
14847: GO 15000
// InGameOn ;
14849: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14853: LD_INT 61
14855: PPUSH
14856: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14860: LD_EXP 51
14864: PPUSH
14865: LD_INT 3
14867: PPUSH
14868: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14872: LD_EXP 51
14876: PPUSH
14877: LD_INT 61
14879: PPUSH
14880: CALL_OW 120
// wait ( 0 0$2 ) ;
14884: LD_INT 70
14886: PPUSH
14887: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14891: LD_EXP 51
14895: PPUSH
14896: LD_STRING DK-Plastic-8
14898: PPUSH
14899: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14903: LD_EXP 67
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: LD_STRING DRuMch-Plastic-9
14914: PPUSH
14915: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14919: LD_EXP 51
14923: PPUSH
14924: LD_STRING DK-Plastic-10
14926: PPUSH
14927: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14931: LD_EXP 67
14935: PUSH
14936: LD_INT 1
14938: ARRAY
14939: PPUSH
14940: LD_STRING DRuMch-Plastic-a-11
14942: PPUSH
14943: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14947: LD_EXP 51
14951: PPUSH
14952: LD_STRING DK-Plastic-a-12
14954: PPUSH
14955: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14959: LD_EXP 67
14963: PUSH
14964: LD_INT 1
14966: ARRAY
14967: PPUSH
14968: LD_STRING DRuMch-Plastic-a-13
14970: PPUSH
14971: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14975: LD_EXP 51
14979: PPUSH
14980: LD_INT 2
14982: PPUSH
14983: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14987: LD_EXP 51
14991: PPUSH
14992: CALL_OW 122
// InGameOff ;
14996: CALL_OW 9
// end ;
15000: PPOPN 1
15002: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do var class ;
15003: LD_EXP 21
15007: PUSH
15008: LD_EXP 51
15012: PPUSH
15013: CALL_OW 255
15017: PUSH
15018: LD_INT 2
15020: EQUAL
15021: AND
15022: PUSH
15023: LD_EXP 51
15027: PPUSH
15028: LD_INT 196
15030: PPUSH
15031: CALL 20288 0 2
15035: AND
15036: PUSH
15037: LD_EXP 17
15041: NOT
15042: AND
15043: PUSH
15044: LD_EXP 30
15048: NOT
15049: AND
15050: IFFALSE 15508
15052: GO 15054
15054: DISABLE
15055: LD_INT 0
15057: PPUSH
// begin class := GetClass ( Kaia ) ;
15058: LD_ADDR_VAR 0 1
15062: PUSH
15063: LD_EXP 51
15067: PPUSH
15068: CALL_OW 257
15072: ST_TO_ADDR
// if class <> class_prison then
15073: LD_VAR 0 1
15077: PUSH
15078: LD_INT 33
15080: NONEQUAL
15081: IFFALSE 15174
// begin Query ( QKaiaWeapon ) ;
15083: LD_STRING QKaiaWeapon
15085: PPUSH
15086: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15090: LD_INT 67
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15100: LD_INT 192
15102: PPUSH
15103: LD_INT 71
15105: PPUSH
15106: CALL_OW 86
// kaiaWeaponHidden := class ;
15110: LD_ADDR_EXP 45
15114: PUSH
15115: LD_VAR 0 1
15119: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15120: LD_INT 35
15122: PPUSH
15123: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15127: LD_EXP 51
15131: PPUSH
15132: LD_INT 67
15134: PPUSH
15135: CALL_OW 308
15139: IFFALSE 15120
// SetClass ( Kaia , class_prison ) ;
15141: LD_EXP 51
15145: PPUSH
15146: LD_INT 33
15148: PPUSH
15149: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15153: LD_INT 35
15155: PPUSH
15156: CALL_OW 67
// until InEntrance ( Kaia , ruWorkshop ) ;
15160: LD_EXP 51
15164: PPUSH
15165: LD_INT 196
15167: PPUSH
15168: CALL 20288 0 2
15172: IFFALSE 15153
// end ; InGameOn ;
15174: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
15178: LD_INT 196
15180: PPUSH
15181: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15185: LD_EXP 51
15189: PPUSH
15190: LD_INT 3
15192: PPUSH
15193: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
15197: LD_EXP 51
15201: PPUSH
15202: LD_INT 196
15204: PPUSH
15205: CALL_OW 120
// wait ( 0 0$2 ) ;
15209: LD_INT 70
15211: PPUSH
15212: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15216: LD_EXP 51
15220: PPUSH
15221: LD_STRING DK-Plastic-8
15223: PPUSH
15224: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
15228: LD_EXP 68
15232: PUSH
15233: LD_INT 1
15235: ARRAY
15236: PPUSH
15237: LD_STRING DRuMch-Plastic-9
15239: PPUSH
15240: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15244: LD_EXP 51
15248: PPUSH
15249: LD_STRING DK-Plastic-10
15251: PPUSH
15252: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
15256: LD_EXP 68
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DRuMch-Plastic-11
15267: PPUSH
15268: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
15272: LD_EXP 51
15276: PPUSH
15277: LD_STRING DK-Plastic-12
15279: PPUSH
15280: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15284: LD_EXP 51
15288: PPUSH
15289: LD_STRING DK-Plastic-13
15291: PPUSH
15292: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15296: LD_EXP 68
15300: PUSH
15301: LD_INT 1
15303: ARRAY
15304: PPUSH
15305: LD_STRING DRuMch-Plastic-14
15307: PPUSH
15308: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15312: LD_EXP 69
15316: PPUSH
15317: LD_INT 167
15319: PPUSH
15320: LD_INT 34
15322: PPUSH
15323: LD_INT 3
15325: PPUSH
15326: LD_INT 0
15328: PPUSH
15329: CALL 69113 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15333: LD_EXP 69
15337: PPUSH
15338: LD_INT 196
15340: PPUSH
15341: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15345: LD_INT 35
15347: PPUSH
15348: CALL_OW 67
// if not HasTask ( Stiopa ) then
15352: LD_EXP 69
15356: PPUSH
15357: CALL_OW 314
15361: NOT
15362: IFFALSE 15376
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15364: LD_EXP 69
15368: PPUSH
15369: LD_INT 196
15371: PPUSH
15372: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15376: LD_EXP 69
15380: PPUSH
15381: CALL_OW 310
15385: IFFALSE 15345
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15387: LD_EXP 69
15391: PPUSH
15392: LD_STRING DSpn-Plastic-15
15394: PPUSH
15395: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15399: LD_EXP 70
15403: PPUSH
15404: LD_STRING DLr-Plastic-16
15406: PPUSH
15407: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15411: LD_EXP 51
15415: PPUSH
15416: LD_STRING DK-Plastic-17
15418: PPUSH
15419: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15423: LD_INT 10
15425: PPUSH
15426: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15430: LD_INT 196
15432: PPUSH
15433: CALL 20014 0 1
// SetSide ( Kaia , 2 ) ;
15437: LD_EXP 51
15441: PPUSH
15442: LD_INT 2
15444: PPUSH
15445: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15449: LD_EXP 51
15453: PPUSH
15454: CALL_OW 122
// InGameOff ;
15458: CALL_OW 9
// explosionsTakenByRussians := false ;
15462: LD_ADDR_EXP 21
15466: PUSH
15467: LD_INT 0
15469: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15470: LD_INT 170
15472: PPUSH
15473: LD_INT 28
15475: PPUSH
15476: LD_INT 2
15478: PPUSH
15479: LD_INT 6
15481: NEG
15482: PPUSH
15483: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15487: LD_INT 170
15489: PPUSH
15490: LD_INT 28
15492: PPUSH
15493: LD_INT 2
15495: PPUSH
15496: CALL_OW 331
// knowWhereExplosivesAre := true ;
15500: LD_ADDR_EXP 34
15504: PUSH
15505: LD_INT 1
15507: ST_TO_ADDR
// end ;
15508: PPOPN 1
15510: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15511: LD_EXP 34
15515: PUSH
15516: LD_EXP 51
15520: PPUSH
15521: CALL_OW 255
15525: PUSH
15526: LD_INT 2
15528: EQUAL
15529: AND
15530: PUSH
15531: LD_EXP 51
15535: PPUSH
15536: LD_INT 195
15538: PPUSH
15539: CALL 20288 0 2
15543: AND
15544: PUSH
15545: LD_EXP 17
15549: NOT
15550: AND
15551: PUSH
15552: LD_EXP 30
15556: NOT
15557: AND
15558: IFFALSE 15664
15560: GO 15562
15562: DISABLE
// begin InGameOn ;
15563: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15567: LD_EXP 51
15571: PPUSH
15572: LD_INT 3
15574: PPUSH
15575: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15579: LD_EXP 51
15583: PPUSH
15584: LD_INT 195
15586: PPUSH
15587: CALL_OW 120
// wait ( 0 0$1 ) ;
15591: LD_INT 35
15593: PPUSH
15594: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15598: LD_EXP 51
15602: PPUSH
15603: LD_STRING DK-Plastic-18
15605: PPUSH
15606: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15610: LD_STRING ExplosivesInfoUsage
15612: PPUSH
15613: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
15617: LD_INT 195
15619: PPUSH
15620: CALL 20014 0 1
// SetSide ( Kaia , 2 ) ;
15624: LD_EXP 51
15628: PPUSH
15629: LD_INT 2
15631: PPUSH
15632: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15636: LD_EXP 51
15640: PPUSH
15641: CALL_OW 122
// InGameOff ;
15645: CALL_OW 9
// hasExplosionCollected := true ;
15649: LD_ADDR_EXP 23
15653: PUSH
15654: LD_INT 1
15656: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15657: LD_STRING M1-explosive-out
15659: PPUSH
15660: CALL_OW 337
// end ;
15664: END
// every 0 0$2 trigger kaiaWeaponHidden marked gameStartEvent do
15665: LD_EXP 45
15669: IFFALSE 15706
15671: GO 15673
15673: DISABLE
// begin enable ;
15674: ENABLE
// if not kaiaWeaponHidden then
15675: LD_EXP 45
15679: NOT
15680: IFFALSE 15684
// exit ;
15682: GO 15706
// SetClass ( Kaia , kaiaWeaponHidden ) ;
15684: LD_EXP 51
15688: PPUSH
15689: LD_EXP 45
15693: PPUSH
15694: CALL_OW 336
// kaiaWeaponHidden := 0 ;
15698: LD_ADDR_EXP 45
15702: PUSH
15703: LD_INT 0
15705: ST_TO_ADDR
// end ;
15706: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15707: LD_EXP 23
15711: PUSH
15712: LD_EXP 17
15716: NOT
15717: AND
15718: PUSH
15719: LD_EXP 30
15723: NOT
15724: AND
15725: IFFALSE 15900
15727: GO 15729
15729: DISABLE
15730: LD_INT 0
15732: PPUSH
15733: PPUSH
// begin for i in importantBuildingsList do
15734: LD_ADDR_VAR 0 1
15738: PUSH
15739: LD_EXP 35
15743: PUSH
15744: FOR_IN
15745: IFFALSE 15761
// MarkBuilding ( i , true ) ;
15747: LD_VAR 0 1
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: CALL 20662 0 2
15759: GO 15744
15761: POP
15762: POP
// repeat wait ( 0 0$1 ) ;
15763: LD_INT 35
15765: PPUSH
15766: CALL_OW 67
// for i in importantBuildingsList do
15770: LD_ADDR_VAR 0 1
15774: PUSH
15775: LD_EXP 35
15779: PUSH
15780: FOR_IN
15781: IFFALSE 15891
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15783: LD_EXP 46
15787: PUSH
15788: LD_EXP 14
15792: UNION
15793: PPUSH
15794: LD_INT 22
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 21
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 91
15816: PUSH
15817: LD_VAR 0 1
15821: PUSH
15822: LD_INT 6
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: PPUSH
15835: CALL_OW 72
15839: IFFALSE 15889
// begin CenterNowOnUnits ( i ) ;
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 87
// PlaceExplosives ( i ) ;
15850: LD_VAR 0 1
15854: PPUSH
15855: CALL 20559 0 1
// MarkBuilding ( i , false ) ;
15859: LD_VAR 0 1
15863: PPUSH
15864: LD_INT 0
15866: PPUSH
15867: CALL 20662 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15871: LD_ADDR_EXP 35
15875: PUSH
15876: LD_EXP 35
15880: PUSH
15881: LD_VAR 0 1
15885: DIFF
15886: ST_TO_ADDR
// continue ;
15887: GO 15780
// end ; end ;
15889: GO 15780
15891: POP
15892: POP
// until not importantBuildingsList ;
15893: LD_EXP 35
15897: NOT
15898: IFFALSE 15763
// end ;
15900: PPOPN 2
15902: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15903: LD_EXP 14
15907: PPUSH
15908: LD_INT 22
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 95
15920: PUSH
15921: LD_INT 23
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PPUSH
15932: CALL_OW 72
15936: PUSH
15937: LD_EXP 46
15941: PPUSH
15942: CALL_OW 302
15946: AND
15947: PUSH
15948: LD_EXP 30
15952: NOT
15953: AND
15954: IFFALSE 15982
15956: GO 15958
15958: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15959: LD_EXP 46
15963: PPUSH
15964: LD_STRING DH-End-1
15966: PPUSH
15967: CALL_OW 88
// if not activeExplosives then
15971: LD_EXP 36
15975: NOT
15976: IFFALSE 15982
// Explode ;
15978: CALL 23432 0 0
// end ;
15982: END
// function SayHEmpty ( ) ; begin
15983: LD_INT 0
15985: PPUSH
// case rand ( 1 , 3 ) of 1 :
15986: LD_INT 1
15988: PPUSH
15989: LD_INT 3
15991: PPUSH
15992: CALL_OW 12
15996: PUSH
15997: LD_INT 1
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16020
16005: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
16006: LD_EXP 46
16010: PPUSH
16011: LD_STRING DH-Empty-1
16013: PPUSH
16014: CALL_OW 88
16018: GO 16067
16020: LD_INT 2
16022: DOUBLE
16023: EQUAL
16024: IFTRUE 16028
16026: GO 16043
16028: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
16029: LD_EXP 46
16033: PPUSH
16034: LD_STRING DH-Empty-2
16036: PPUSH
16037: CALL_OW 88
16041: GO 16067
16043: LD_INT 3
16045: DOUBLE
16046: EQUAL
16047: IFTRUE 16051
16049: GO 16066
16051: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
16052: LD_EXP 46
16056: PPUSH
16057: LD_STRING DH-Empty-3
16059: PPUSH
16060: CALL_OW 88
16064: GO 16067
16066: POP
// end ;
16067: LD_VAR 0 1
16071: RET
// function SayHVisited ( ) ; begin
16072: LD_INT 0
16074: PPUSH
// case rand ( 1 , 3 ) of 1 :
16075: LD_INT 1
16077: PPUSH
16078: LD_INT 3
16080: PPUSH
16081: CALL_OW 12
16085: PUSH
16086: LD_INT 1
16088: DOUBLE
16089: EQUAL
16090: IFTRUE 16094
16092: GO 16109
16094: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
16095: LD_EXP 46
16099: PPUSH
16100: LD_STRING DH-Visited-1
16102: PPUSH
16103: CALL_OW 88
16107: GO 16156
16109: LD_INT 2
16111: DOUBLE
16112: EQUAL
16113: IFTRUE 16117
16115: GO 16132
16117: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
16118: LD_EXP 46
16122: PPUSH
16123: LD_STRING DH-Visited-2
16125: PPUSH
16126: CALL_OW 88
16130: GO 16156
16132: LD_INT 3
16134: DOUBLE
16135: EQUAL
16136: IFTRUE 16140
16138: GO 16155
16140: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
16141: LD_EXP 46
16145: PPUSH
16146: LD_STRING DH-Visited-3
16148: PPUSH
16149: CALL_OW 88
16153: GO 16156
16155: POP
// end ;
16156: LD_VAR 0 1
16160: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
16161: LD_EXP 17
16165: NOT
16166: PUSH
16167: LD_EXP 15
16171: AND
16172: PUSH
16173: LD_EXP 46
16177: PPUSH
16178: CALL_OW 255
16182: PUSH
16183: LD_INT 2
16185: EQUAL
16186: AND
16187: PUSH
16188: LD_EXP 46
16192: PPUSH
16193: CALL_OW 302
16197: AND
16198: PUSH
16199: LD_EXP 46
16203: PPUSH
16204: CALL_OW 316
16208: AND
16209: PUSH
16210: LD_EXP 30
16214: NOT
16215: AND
16216: IFFALSE 16282
16218: GO 16220
16220: DISABLE
16221: LD_INT 0
16223: PPUSH
// begin enable ;
16224: ENABLE
// for i in entranceAllowedList do
16225: LD_ADDR_VAR 0 1
16229: PUSH
16230: LD_EXP 15
16234: PUSH
16235: FOR_IN
16236: IFFALSE 16280
// if InEntrance ( Heike , i ) then
16238: LD_EXP 46
16242: PPUSH
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL 20288 0 2
16252: IFFALSE 16278
// begin disable ( entranceEvent ) ;
16254: LD_INT 1
16256: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL 16285 0 1
// wait ( 0 0$3 ) ;
16266: LD_INT 105
16268: PPUSH
16269: CALL_OW 67
// enable ( entranceEvent ) ;
16273: LD_INT 1
16275: ENABLE_MARKED
// break ;
16276: GO 16280
// end ;
16278: GO 16235
16280: POP
16281: POP
// end ;
16282: PPOPN 1
16284: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
16285: LD_INT 0
16287: PPUSH
16288: PPUSH
16289: PPUSH
16290: PPUSH
// if not building then
16291: LD_VAR 0 1
16295: NOT
16296: IFFALSE 16300
// exit ;
16298: GO 18925
// if building in entranceVisitedList then
16300: LD_VAR 0 1
16304: PUSH
16305: LD_EXP 16
16309: IN
16310: IFFALSE 16318
// begin SayHVisited ( ) ;
16312: CALL 16072 0 0
// exit ;
16316: GO 18925
// end ; case Query ( EnterBuilding ) of 1 :
16318: LD_STRING EnterBuilding
16320: PPUSH
16321: CALL_OW 97
16325: PUSH
16326: LD_INT 1
16328: DOUBLE
16329: EQUAL
16330: IFTRUE 16334
16332: GO 16337
16334: POP
// ; 2 :
16335: GO 16351
16337: LD_INT 2
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16350
16345: POP
// exit ; end ;
16346: GO 18925
16348: GO 16351
16350: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16351: LD_ADDR_EXP 16
16355: PUSH
16356: LD_EXP 16
16360: PPUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL 66973 0 2
16370: ST_TO_ADDR
// InGameOn ;
16371: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16375: LD_EXP 46
16379: PPUSH
16380: LD_INT 5
16382: PPUSH
16383: CALL_OW 235
// SetSide ( building , 5 ) ;
16387: LD_VAR 0 1
16391: PPUSH
16392: LD_INT 5
16394: PPUSH
16395: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16399: LD_EXP 46
16403: PPUSH
16404: LD_VAR 0 1
16408: PPUSH
16409: CALL_OW 120
// wait ( 0 0$3 ) ;
16413: LD_INT 105
16415: PPUSH
16416: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16420: LD_ADDR_VAR 0 4
16424: PUSH
16425: LD_INT 165
16427: PUSH
16428: LD_INT 106
16430: PUSH
16431: LD_INT 135
16433: PUSH
16434: LD_INT 162
16436: PUSH
16437: LD_INT 61
16439: PUSH
16440: LD_INT 109
16442: PUSH
16443: LD_INT 169
16445: PUSH
16446: LD_INT 13
16448: PUSH
16449: LD_INT 147
16451: PUSH
16452: LD_INT 137
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: ST_TO_ADDR
// if not building in tmp then
16467: LD_VAR 0 1
16471: PUSH
16472: LD_VAR 0 4
16476: IN
16477: NOT
16478: IFFALSE 16486
// SayHEmpty ( ) else
16480: CALL 15983 0 0
16484: GO 18872
// case building of laundry :
16486: LD_VAR 0 1
16490: PUSH
16491: LD_INT 165
16493: DOUBLE
16494: EQUAL
16495: IFTRUE 16499
16497: GO 16603
16499: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16500: LD_EXP 26
16504: PUSH
16505: LD_EXP 27
16509: NOT
16510: AND
16511: PUSH
16512: LD_EXP 28
16516: NOT
16517: AND
16518: IFFALSE 16573
// begin case Query ( HeikeInLaundry ) of 1 :
16520: LD_STRING HeikeInLaundry
16522: PPUSH
16523: CALL_OW 97
16527: PUSH
16528: LD_INT 1
16530: DOUBLE
16531: EQUAL
16532: IFTRUE 16536
16534: GO 16543
16536: POP
// SpawnHeikeAsRussian ; 2 :
16537: CALL 1810 0 0
16541: GO 16571
16543: LD_INT 2
16545: DOUBLE
16546: EQUAL
16547: IFTRUE 16551
16549: GO 16570
16551: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16552: LD_ADDR_EXP 16
16556: PUSH
16557: LD_EXP 16
16561: PUSH
16562: LD_VAR 0 1
16566: DIFF
16567: ST_TO_ADDR
16568: GO 16571
16570: POP
// end else
16571: GO 16601
// begin entranceVisitedList := entranceVisitedList diff building ;
16573: LD_ADDR_EXP 16
16577: PUSH
16578: LD_EXP 16
16582: PUSH
16583: LD_VAR 0 1
16587: DIFF
16588: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16589: LD_EXP 46
16593: PPUSH
16594: LD_STRING DH-Locked
16596: PPUSH
16597: CALL_OW 88
// end ; end ; dougBar :
16601: GO 18872
16603: LD_INT 106
16605: DOUBLE
16606: EQUAL
16607: IFTRUE 16611
16609: GO 16973
16611: POP
// begin if contactWithAmerican and americanContact then
16612: LD_EXP 25
16616: PUSH
16617: LD_EXP 10
16621: AND
16622: IFFALSE 16686
// begin Say ( Heike , DH-Escort-a-1 ) ;
16624: LD_EXP 46
16628: PPUSH
16629: LD_STRING DH-Escort-a-1
16631: PPUSH
16632: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16636: LD_EXP 60
16640: PPUSH
16641: LD_STRING DCa-Escort-a-2
16643: PPUSH
16644: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16648: LD_EXP 60
16652: PPUSH
16653: LD_STRING DCa-Escort-a-3
16655: PPUSH
16656: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16660: LD_EXP 46
16664: PPUSH
16665: LD_STRING DH-Escort-a-4
16667: PPUSH
16668: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16672: LD_EXP 46
16676: PPUSH
16677: LD_STRING DH-Escort-a-5
16679: PPUSH
16680: CALL_OW 88
// end else
16684: GO 16930
// if contactWithAmerican then
16686: LD_EXP 25
16690: IFFALSE 16730
// begin Say ( Heike , DH-Escort-b-1 ) ;
16692: LD_EXP 46
16696: PPUSH
16697: LD_STRING DH-Escort-b-1
16699: PPUSH
16700: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16704: LD_EXP 60
16708: PPUSH
16709: LD_STRING DCa-Escort-b-2
16711: PPUSH
16712: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16716: LD_EXP 60
16720: PPUSH
16721: LD_STRING DCa-Escort-b-3
16723: PPUSH
16724: CALL_OW 88
// end else
16728: GO 16930
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16730: LD_EXP 60
16734: PPUSH
16735: LD_STRING DCa-Deal-a-1
16737: PPUSH
16738: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16742: LD_EXP 60
16746: PPUSH
16747: LD_STRING DCa-Deal-a-2
16749: PPUSH
16750: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16754: LD_EXP 46
16758: PPUSH
16759: LD_STRING DH-Deal-a-3
16761: PPUSH
16762: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16766: LD_EXP 60
16770: PPUSH
16771: LD_STRING DCa-Deal-a-4
16773: PPUSH
16774: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16778: LD_EXP 46
16782: PPUSH
16783: LD_STRING DH-Deal-a-5
16785: PPUSH
16786: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16790: LD_EXP 60
16794: PPUSH
16795: LD_STRING DCa-Deal-a-6
16797: PPUSH
16798: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16802: LD_EXP 60
16806: PPUSH
16807: LD_STRING DCa-Deal-a-7
16809: PPUSH
16810: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16814: LD_EXP 60
16818: PPUSH
16819: LD_STRING DCa-Deal-a-8
16821: PPUSH
16822: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16826: LD_EXP 60
16830: PPUSH
16831: LD_STRING DCa-Deal-a-9
16833: PPUSH
16834: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16838: LD_EXP 60
16842: PPUSH
16843: LD_STRING DCa-Deal-a-10
16845: PPUSH
16846: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16850: LD_EXP 60
16854: PPUSH
16855: LD_STRING DCa-Deal-a-11
16857: PPUSH
16858: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16862: LD_INT 10
16864: PPUSH
16865: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16869: LD_EXP 60
16873: PPUSH
16874: LD_STRING DCa-Deal-a-12
16876: PPUSH
16877: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16881: LD_EXP 46
16885: PPUSH
16886: LD_STRING DH-Deal-a-13
16888: PPUSH
16889: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16893: LD_EXP 46
16897: PPUSH
16898: LD_STRING DH-Deal-a-14
16900: PPUSH
16901: CALL_OW 88
// contactWithAmerican := true ;
16905: LD_ADDR_EXP 25
16909: PUSH
16910: LD_INT 1
16912: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
16913: LD_INT 1
16915: PPUSH
16916: LD_STRING 08_DealWithDoug
16918: PPUSH
16919: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16923: LD_STRING M1-american-out
16925: PPUSH
16926: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16930: LD_EXP 60
16934: PPUSH
16935: LD_INT 2
16937: PPUSH
16938: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16942: LD_ADDR_EXP 14
16946: PUSH
16947: LD_EXP 14
16951: PPUSH
16952: LD_EXP 60
16956: PPUSH
16957: CALL 66973 0 2
16961: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16962: LD_EXP 60
16966: PPUSH
16967: CALL_OW 122
// end ; usLab :
16971: GO 18872
16973: LD_INT 135
16975: DOUBLE
16976: EQUAL
16977: IFTRUE 16981
16979: GO 17300
16981: POP
// begin if hasSniperRifle then
16982: LD_EXP 11
16986: IFFALSE 17298
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16988: LD_EXP 51
16992: PPUSH
16993: CALL_OW 302
16997: PUSH
16998: LD_EXP 51
17002: PUSH
17003: LD_EXP 14
17007: IN
17008: AND
17009: PUSH
17010: LD_EXP 51
17014: PPUSH
17015: CALL_OW 255
17019: PUSH
17020: LD_INT 2
17022: EQUAL
17023: AND
17024: IFFALSE 17272
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
17026: LD_EXP 46
17030: PPUSH
17031: LD_EXP 51
17035: PPUSH
17036: CALL_OW 296
17040: PUSH
17041: LD_INT 10
17043: GREATER
17044: IFFALSE 17069
// begin Query ( KaiaDistance ) ;
17046: LD_STRING KaiaDistance
17048: PPUSH
17049: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
17053: LD_ADDR_EXP 16
17057: PUSH
17058: LD_EXP 16
17062: PUSH
17063: LD_INT 135
17065: DIFF
17066: ST_TO_ADDR
// end else
17067: GO 17270
// begin SetSide ( Kaia , 5 ) ;
17069: LD_EXP 51
17073: PPUSH
17074: LD_INT 5
17076: PPUSH
17077: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
17081: LD_EXP 51
17085: PPUSH
17086: LD_INT 135
17088: PPUSH
17089: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17093: LD_INT 35
17095: PPUSH
17096: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17100: LD_EXP 51
17104: PPUSH
17105: CALL_OW 310
17109: IFFALSE 17093
// Say ( Kaia , DK-Sniper-1 ) ;
17111: LD_EXP 51
17115: PPUSH
17116: LD_STRING DK-Sniper-1
17118: PPUSH
17119: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
17123: LD_EXP 51
17127: PPUSH
17128: CALL_OW 257
17132: PUSH
17133: LD_INT 34
17135: EQUAL
17136: PUSH
17137: LD_EXP 48
17141: PUSH
17142: LD_EXP 14
17146: IN
17147: AND
17148: PUSH
17149: LD_EXP 48
17153: PPUSH
17154: CALL_OW 302
17158: AND
17159: IFFALSE 17190
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
17161: LD_EXP 51
17165: PPUSH
17166: LD_STRING DK-Sniper-a-2
17168: PPUSH
17169: CALL_OW 88
// giveSniperRifleToMike := true ;
17173: LD_ADDR_EXP 42
17177: PUSH
17178: LD_INT 1
17180: ST_TO_ADDR
// Query ( QSniperMike ) ;
17181: LD_STRING QSniperMike
17183: PPUSH
17184: CALL_OW 97
// end else
17188: GO 17249
// begin Say ( Kaia , DK-Sniper-2 ) ;
17190: LD_EXP 51
17194: PPUSH
17195: LD_STRING DK-Sniper-2
17197: PPUSH
17198: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
17202: LD_EXP 51
17206: PPUSH
17207: LD_INT 32
17209: PPUSH
17210: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
17214: LD_EXP 53
17218: PPUSH
17219: CALL_OW 302
17223: PUSH
17224: LD_EXP 53
17228: PUSH
17229: LD_EXP 14
17233: IN
17234: AND
17235: IFFALSE 17249
// Say ( Markov , DMar-Sniper-3 ) ;
17237: LD_EXP 53
17241: PPUSH
17242: LD_STRING DMar-Sniper-3
17244: PPUSH
17245: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
17249: LD_EXP 51
17253: PPUSH
17254: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
17258: LD_EXP 51
17262: PPUSH
17263: LD_INT 2
17265: PPUSH
17266: CALL_OW 235
// end ; end else
17270: GO 17298
// begin entranceVisitedList := entranceVisitedList diff usLab ;
17272: LD_ADDR_EXP 16
17276: PUSH
17277: LD_EXP 16
17281: PUSH
17282: LD_INT 135
17284: DIFF
17285: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17286: LD_EXP 46
17290: PPUSH
17291: LD_STRING DH-Locked
17293: PPUSH
17294: CALL_OW 88
// end ; end ; end ; drugsLab :
17298: GO 18872
17300: LD_INT 162
17302: DOUBLE
17303: EQUAL
17304: IFTRUE 17308
17306: GO 17441
17308: POP
// begin if hasStimDrugs then
17309: LD_EXP 9
17313: IFFALSE 17427
// begin wait ( 0 0$1 ) ;
17315: LD_INT 35
17317: PPUSH
17318: CALL_OW 67
// if not hasStimDrugsCollected then
17322: LD_EXP 24
17326: NOT
17327: IFFALSE 17369
// begin Say ( Heike , DH-Lab-1 ) ;
17329: LD_EXP 46
17333: PPUSH
17334: LD_STRING DH-Lab-1
17336: PPUSH
17337: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17341: LD_INT 5
17343: PPUSH
17344: LD_INT 2
17346: PPUSH
17347: LD_INT 2
17349: PPUSH
17350: CALL_OW 322
// hasStimDrugsCollected := true ;
17354: LD_ADDR_EXP 24
17358: PUSH
17359: LD_INT 1
17361: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17362: LD_STRING M1-drugs-out
17364: PPUSH
17365: CALL_OW 604
// end ; if not hasExplosionCollected then
17369: LD_EXP 23
17373: NOT
17374: IFFALSE 17392
// entranceVisitedList := entranceVisitedList diff drugsLab else
17376: LD_ADDR_EXP 16
17380: PUSH
17381: LD_EXP 16
17385: PUSH
17386: LD_INT 162
17388: DIFF
17389: ST_TO_ADDR
17390: GO 17425
// begin wait ( 0 0$3 ) ;
17392: LD_INT 105
17394: PPUSH
17395: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17399: LD_EXP 46
17403: PPUSH
17404: LD_STRING DH-Lab-2
17406: PPUSH
17407: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17411: LD_STRING M1-drugsLab-out
17413: PPUSH
17414: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17418: LD_INT 162
17420: PPUSH
17421: CALL 20559 0 1
// end ; end else
17425: GO 17439
// Say ( Heike , DH-Locked ) ;
17427: LD_EXP 46
17431: PPUSH
17432: LD_STRING DH-Locked
17434: PPUSH
17435: CALL_OW 88
// end ; ruFac :
17439: GO 18872
17441: LD_INT 61
17443: DOUBLE
17444: EQUAL
17445: IFTRUE 17449
17447: GO 17559
17449: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17450: LD_EXP 53
17454: PPUSH
17455: CALL_OW 302
17459: PUSH
17460: LD_EXP 53
17464: PUSH
17465: LD_EXP 14
17469: IN
17470: NOT
17471: AND
17472: IFFALSE 17553
// begin Say ( Heike , DH-Krastyo-1 ) ;
17474: LD_EXP 46
17478: PPUSH
17479: LD_STRING DH-Krastyo-1
17481: PPUSH
17482: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
17486: LD_EXP 53
17490: PPUSH
17491: LD_STRING DMar-Krastyo-2
17493: PPUSH
17494: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
17498: LD_EXP 53
17502: PPUSH
17503: LD_STRING DMar-Krastyo-3
17505: PPUSH
17506: CALL_OW 88
// SetSide ( Markov , 2 ) ;
17510: LD_EXP 53
17514: PPUSH
17515: LD_INT 2
17517: PPUSH
17518: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
17522: LD_ADDR_EXP 14
17526: PUSH
17527: LD_EXP 14
17531: PPUSH
17532: LD_EXP 53
17536: PPUSH
17537: CALL 66973 0 2
17541: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
17542: LD_EXP 53
17546: PPUSH
17547: CALL_OW 122
// end else
17551: GO 17557
// SayHEmpty ( ) ;
17553: CALL 15983 0 0
// end ; ruBarKam :
17557: GO 18872
17559: LD_INT 109
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17714
17567: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17568: LD_EXP 50
17572: PPUSH
17573: CALL_OW 302
17577: PUSH
17578: LD_EXP 50
17582: PUSH
17583: LD_EXP 14
17587: IN
17588: NOT
17589: AND
17590: IFFALSE 17708
// begin Say ( Heike , DH-Kamil-1 ) ;
17592: LD_EXP 46
17596: PPUSH
17597: LD_STRING DH-Kamil-1
17599: PPUSH
17600: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17604: LD_EXP 50
17608: PPUSH
17609: LD_STRING DKam-Kamil-2
17611: PPUSH
17612: CALL_OW 88
// if IsOk ( Sophia ) then
17616: LD_EXP 52
17620: PPUSH
17621: CALL_OW 302
17625: IFFALSE 17665
// if Sophia in heikeSquad then
17627: LD_EXP 52
17631: PUSH
17632: LD_EXP 14
17636: IN
17637: IFFALSE 17653
// Say ( Kamil , DKam-Kamil-a-3 ) else
17639: LD_EXP 50
17643: PPUSH
17644: LD_STRING DKam-Kamil-a-3
17646: PPUSH
17647: CALL_OW 88
17651: GO 17665
// Say ( Kamil , DKam-Kamil-3 ) ;
17653: LD_EXP 50
17657: PPUSH
17658: LD_STRING DKam-Kamil-3
17660: PPUSH
17661: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17665: LD_EXP 50
17669: PPUSH
17670: LD_INT 2
17672: PPUSH
17673: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17677: LD_ADDR_EXP 14
17681: PUSH
17682: LD_EXP 14
17686: PPUSH
17687: LD_EXP 50
17691: PPUSH
17692: CALL 66973 0 2
17696: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17697: LD_EXP 50
17701: PPUSH
17702: CALL_OW 122
// end else
17706: GO 17712
// SayHEmpty ( ) ;
17708: CALL 15983 0 0
// end ; ruOutpost1 :
17712: GO 18872
17714: LD_INT 169
17716: DOUBLE
17717: EQUAL
17718: IFTRUE 17722
17720: GO 17959
17722: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17723: LD_EXP 55
17727: PPUSH
17728: CALL_OW 302
17732: PUSH
17733: LD_EXP 55
17737: PUSH
17738: LD_EXP 14
17742: IN
17743: NOT
17744: AND
17745: IFFALSE 17953
// begin if hasMethanol then
17747: LD_EXP 13
17751: IFFALSE 17882
// begin Say ( Heike , DH-Kurt-1 ) ;
17753: LD_EXP 46
17757: PPUSH
17758: LD_STRING DH-Kurt-1
17760: PPUSH
17761: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17765: LD_EXP 55
17769: PPUSH
17770: LD_STRING DKs-Kurt-2
17772: PPUSH
17773: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17777: LD_EXP 47
17781: PPUSH
17782: LD_INT 169
17784: PPUSH
17785: CALL_OW 296
17789: PUSH
17790: LD_INT 10
17792: LESS
17793: PUSH
17794: LD_EXP 47
17798: PUSH
17799: LD_EXP 14
17803: IN
17804: AND
17805: IFFALSE 17880
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17807: LD_EXP 47
17811: PPUSH
17812: LD_INT 100
17814: PPUSH
17815: LD_INT 37
17817: PPUSH
17818: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17822: LD_EXP 47
17826: PPUSH
17827: LD_INT 169
17829: PPUSH
17830: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17834: LD_INT 35
17836: PPUSH
17837: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17841: LD_EXP 47
17845: PPUSH
17846: LD_INT 169
17848: PPUSH
17849: CALL_OW 296
17853: PUSH
17854: LD_INT 7
17856: LESS
17857: IFFALSE 17834
// Say ( Givi , DG-Kurt-3 ) ;
17859: LD_EXP 47
17863: PPUSH
17864: LD_STRING DG-Kurt-3
17866: PPUSH
17867: CALL_OW 88
// ComStop ( Givi ) ;
17871: LD_EXP 47
17875: PPUSH
17876: CALL_OW 141
// end ; end else
17880: GO 17910
// begin Say ( Heike , DH-Kurt-1 ) ;
17882: LD_EXP 46
17886: PPUSH
17887: LD_STRING DH-Kurt-1
17889: PPUSH
17890: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17894: LD_EXP 55
17898: PPUSH
17899: LD_STRING DKs-Kurt-2
17901: PPUSH
17902: CALL_OW 88
// SpawnAdditionalRuGuards ;
17906: CALL 3592 0 0
// end ; SetSide ( Kurt , 2 ) ;
17910: LD_EXP 55
17914: PPUSH
17915: LD_INT 2
17917: PPUSH
17918: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17922: LD_ADDR_EXP 14
17926: PUSH
17927: LD_EXP 14
17931: PPUSH
17932: LD_EXP 55
17936: PPUSH
17937: CALL 66973 0 2
17941: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17942: LD_EXP 55
17946: PPUSH
17947: CALL_OW 122
// end else
17951: GO 17957
// SayHEmpty ( ) ;
17953: CALL 15983 0 0
// end ; ruOutpostBar :
17957: GO 18872
17959: LD_INT 13
17961: DOUBLE
17962: EQUAL
17963: IFTRUE 17967
17965: GO 18013
17967: POP
// begin if not hasGuardPatrolPlan then
17968: LD_EXP 18
17972: NOT
17973: IFFALSE 18007
// begin Say ( Heike , DH-PatrolPlan ) ;
17975: LD_EXP 46
17979: PPUSH
17980: LD_STRING DH-PatrolPlan
17982: PPUSH
17983: CALL_OW 88
// hasGuardPatrolPlan := true ;
17987: LD_ADDR_EXP 18
17991: PUSH
17992: LD_INT 1
17994: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17995: LD_INT 6
17997: PPUSH
17998: LD_INT 2
18000: PPUSH
18001: CALL_OW 343
// end else
18005: GO 18011
// SayHEmpty ( ) ;
18007: CALL 15983 0 0
// end ; ruKaiaBar :
18011: GO 18872
18013: LD_INT 147
18015: DOUBLE
18016: EQUAL
18017: IFTRUE 18021
18019: GO 18168
18021: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
18022: LD_EXP 51
18026: PPUSH
18027: CALL_OW 302
18031: PUSH
18032: LD_EXP 51
18036: PUSH
18037: LD_EXP 14
18041: IN
18042: NOT
18043: AND
18044: IFFALSE 18166
// begin Say ( Heike , DH-Kaia-1 ) ;
18046: LD_EXP 46
18050: PPUSH
18051: LD_STRING DH-Kaia-1
18053: PPUSH
18054: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
18058: LD_EXP 51
18062: PPUSH
18063: LD_STRING DK-Kaia-2
18065: PPUSH
18066: CALL_OW 88
// if hasSniperRifle then
18070: LD_EXP 11
18074: IFFALSE 18125
// begin if IsOk ( Markov ) then
18076: LD_EXP 53
18080: PPUSH
18081: CALL_OW 302
18085: IFFALSE 18101
// Say ( Kaia , DK-Kaia-3 ) else
18087: LD_EXP 51
18091: PPUSH
18092: LD_STRING DK-Kaia-3
18094: PPUSH
18095: CALL_OW 88
18099: GO 18113
// Say ( Kaia , DK-Kaia-a-3 ) ;
18101: LD_EXP 51
18105: PPUSH
18106: LD_STRING DK-Kaia-a-3
18108: PPUSH
18109: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
18113: LD_EXP 46
18117: PPUSH
18118: LD_STRING DH-Kaia-4
18120: PPUSH
18121: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
18125: LD_EXP 51
18129: PPUSH
18130: LD_INT 2
18132: PPUSH
18133: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
18137: LD_ADDR_EXP 14
18141: PUSH
18142: LD_EXP 14
18146: PPUSH
18147: LD_EXP 51
18151: PPUSH
18152: CALL 66973 0 2
18156: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
18157: LD_EXP 51
18161: PPUSH
18162: CALL_OW 122
// end ; end ; ruWeaponsBar :
18166: GO 18872
18168: LD_INT 137
18170: DOUBLE
18171: EQUAL
18172: IFTRUE 18176
18174: GO 18871
18176: POP
// begin if hasWeapons then
18177: LD_EXP 19
18181: IFFALSE 18857
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
18183: LD_ADDR_EXP 16
18187: PUSH
18188: LD_EXP 16
18192: PUSH
18193: LD_INT 137
18195: DIFF
18196: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
18197: LD_ADDR_VAR 0 4
18201: PUSH
18202: LD_EXP 14
18206: PPUSH
18207: LD_INT 91
18209: PUSH
18210: LD_EXP 46
18214: PUSH
18215: LD_INT 8
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: LIST
18222: PPUSH
18223: CALL_OW 72
18227: ST_TO_ADDR
// if not heikeSquad or not tmp then
18228: LD_EXP 14
18232: NOT
18233: PUSH
18234: LD_VAR 0 4
18238: NOT
18239: OR
18240: IFFALSE 18256
// Say ( Heike , DH-Weapons-Alone ) else
18242: LD_EXP 46
18246: PPUSH
18247: LD_STRING DH-Weapons-Alone
18249: PPUSH
18250: CALL_OW 88
18254: GO 18855
// begin if not firstArmouryDialog then
18256: LD_EXP 39
18260: NOT
18261: IFFALSE 18320
// begin Say ( Heike , DH-Weapons-1 ) ;
18263: LD_EXP 46
18267: PPUSH
18268: LD_STRING DH-Weapons-1
18270: PPUSH
18271: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
18275: LD_EXP 46
18279: PPUSH
18280: LD_STRING DH-Weapons-2
18282: PPUSH
18283: CALL_OW 88
// Query ( Weapons ) ;
18287: LD_STRING Weapons
18289: PPUSH
18290: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
18294: LD_INT 65
18296: PPUSH
18297: LD_INT 1
18299: PPUSH
18300: CALL_OW 424
// canEquipWeapons := true ;
18304: LD_ADDR_EXP 41
18308: PUSH
18309: LD_INT 1
18311: ST_TO_ADDR
// firstArmouryDialog := true ;
18312: LD_ADDR_EXP 39
18316: PUSH
18317: LD_INT 1
18319: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
18320: LD_EXP 8
18324: PUSH
18325: LD_EXP 51
18329: PUSH
18330: LD_VAR 0 4
18334: IN
18335: AND
18336: PUSH
18337: LD_EXP 51
18341: PPUSH
18342: CALL_OW 257
18346: PUSH
18347: LD_INT 34
18349: NONEQUAL
18350: AND
18351: IFFALSE 18497
// begin SetSide ( Kaia , 5 ) ;
18353: LD_EXP 51
18357: PPUSH
18358: LD_INT 5
18360: PPUSH
18361: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
18365: LD_EXP 51
18369: PPUSH
18370: LD_INT 137
18372: PPUSH
18373: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18377: LD_INT 35
18379: PPUSH
18380: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18384: LD_EXP 51
18388: PPUSH
18389: CALL_OW 310
18393: IFFALSE 18377
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18395: LD_EXP 46
18399: PPUSH
18400: LD_STRING DH-Kaia-Revolver-2
18402: PPUSH
18403: CALL_OW 88
// SetClassKaiaRevolver ;
18407: CALL 1769 0 0
// hasRevolver := false ;
18411: LD_ADDR_EXP 8
18415: PUSH
18416: LD_INT 0
18418: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18419: LD_EXP 51
18423: PPUSH
18424: LD_INT 2
18426: PPUSH
18427: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18431: LD_EXP 51
18435: PPUSH
18436: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18440: LD_EXP 51
18444: PPUSH
18445: CALL_OW 257
18449: PUSH
18450: LD_INT 32
18452: EQUAL
18453: PUSH
18454: LD_EXP 48
18458: PUSH
18459: LD_EXP 14
18463: IN
18464: AND
18465: PUSH
18466: LD_EXP 48
18470: PPUSH
18471: CALL_OW 255
18475: PUSH
18476: LD_INT 2
18478: EQUAL
18479: AND
18480: IFFALSE 18497
// begin giveSniperRifleToMike := true ;
18482: LD_ADDR_EXP 42
18486: PUSH
18487: LD_INT 1
18489: ST_TO_ADDR
// Query ( QSniperMike ) ;
18490: LD_STRING QSniperMike
18492: PPUSH
18493: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
18497: LD_EXP 47
18501: PUSH
18502: LD_VAR 0 4
18506: IN
18507: PUSH
18508: LD_EXP 47
18512: PPUSH
18513: CALL_OW 257
18517: PUSH
18518: LD_INT 33
18520: EQUAL
18521: AND
18522: IFFALSE 18663
// begin SetSide ( Givi , 5 ) ;
18524: LD_EXP 47
18528: PPUSH
18529: LD_INT 5
18531: PPUSH
18532: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18536: LD_EXP 47
18540: PPUSH
18541: LD_INT 137
18543: PPUSH
18544: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18548: LD_INT 35
18550: PPUSH
18551: CALL_OW 67
// until IsInUnit ( Givi ) ;
18555: LD_EXP 47
18559: PPUSH
18560: CALL_OW 310
18564: IFFALSE 18548
// Say ( Givi , DG-Weapons-3 ) ;
18566: LD_EXP 47
18570: PPUSH
18571: LD_STRING DG-Weapons-3
18573: PPUSH
18574: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18578: LD_EXP 46
18582: PPUSH
18583: LD_STRING DH-Weapons-4
18585: PPUSH
18586: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18590: LD_EXP 47
18594: PPUSH
18595: LD_STRING DG-Weapons-5
18597: PPUSH
18598: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18602: LD_EXP 47
18606: PPUSH
18607: LD_INT 11
18609: PPUSH
18610: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18614: LD_EXP 47
18618: PPUSH
18619: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18623: LD_EXP 47
18627: PPUSH
18628: LD_INT 2
18630: PPUSH
18631: CALL_OW 235
// if hasRevolver then
18635: LD_EXP 8
18639: IFFALSE 18661
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18641: LD_EXP 46
18645: PPUSH
18646: LD_STRING DH-Kaia-Revolver-1
18648: PPUSH
18649: CALL_OW 88
// heikeHasRevolver := true ;
18653: LD_ADDR_EXP 20
18657: PUSH
18658: LD_INT 1
18660: ST_TO_ADDR
// end ; end else
18661: GO 18855
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18663: LD_EXP 50
18667: PUSH
18668: LD_VAR 0 4
18672: IN
18673: PUSH
18674: LD_EXP 50
18678: PPUSH
18679: CALL_OW 257
18683: PUSH
18684: LD_INT 33
18686: EQUAL
18687: AND
18688: IFFALSE 18817
// begin SetSide ( Kamil , 5 ) ;
18690: LD_EXP 50
18694: PPUSH
18695: LD_INT 5
18697: PPUSH
18698: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18702: LD_EXP 50
18706: PPUSH
18707: LD_INT 137
18709: PPUSH
18710: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18714: LD_INT 35
18716: PPUSH
18717: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18721: LD_EXP 50
18725: PPUSH
18726: CALL_OW 310
18730: IFFALSE 18714
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18732: LD_EXP 50
18736: PPUSH
18737: LD_STRING DKam-Weapons-a-3
18739: PPUSH
18740: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18744: LD_EXP 46
18748: PPUSH
18749: LD_STRING DH-Weapons-a-4
18751: PPUSH
18752: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18756: LD_EXP 50
18760: PPUSH
18761: LD_INT 11
18763: PPUSH
18764: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18768: LD_EXP 50
18772: PPUSH
18773: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18777: LD_EXP 50
18781: PPUSH
18782: LD_INT 2
18784: PPUSH
18785: CALL_OW 235
// if hasRevolver then
18789: LD_EXP 8
18793: IFFALSE 18815
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18795: LD_EXP 46
18799: PPUSH
18800: LD_STRING DH-Kaia-Revolver-1
18802: PPUSH
18803: CALL_OW 88
// heikeHasRevolver := true ;
18807: LD_ADDR_EXP 20
18811: PUSH
18812: LD_INT 1
18814: ST_TO_ADDR
// end ; end else
18815: GO 18855
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18817: LD_EXP 46
18821: PPUSH
18822: LD_STRING DH-Weapons-Alone-2
18824: PPUSH
18825: CALL_OW 88
// if hasRevolver then
18829: LD_EXP 8
18833: IFFALSE 18855
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18835: LD_EXP 46
18839: PPUSH
18840: LD_STRING DH-Kaia-Revolver-1a
18842: PPUSH
18843: CALL_OW 88
// heikeHasRevolver := true ;
18847: LD_ADDR_EXP 20
18851: PUSH
18852: LD_INT 1
18854: ST_TO_ADDR
// end ; end ; end ; end else
18855: GO 18869
// Say ( Heike , DH-Locked ) ;
18857: LD_EXP 46
18861: PPUSH
18862: LD_STRING DH-Locked
18864: PPUSH
18865: CALL_OW 88
// end ; end ;
18869: GO 18872
18871: POP
// SetSide ( building , 3 ) ;
18872: LD_VAR 0 1
18876: PPUSH
18877: LD_INT 3
18879: PPUSH
18880: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
18884: LD_VAR 0 1
18888: PPUSH
18889: CALL 20014 0 1
// wait ( 0 0$0.3 ) ;
18893: LD_INT 10
18895: PPUSH
18896: CALL_OW 67
// ComExitBuilding ( Heike ) ;
18900: LD_EXP 46
18904: PPUSH
18905: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18909: LD_EXP 46
18913: PPUSH
18914: LD_INT 2
18916: PPUSH
18917: CALL_OW 235
// InGameOff ;
18921: CALL_OW 9
// end ;
18925: LD_VAR 0 2
18929: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18930: LD_EXP 30
18934: NOT
18935: PUSH
18936: LD_EXP 17
18940: NOT
18941: AND
18942: PUSH
18943: LD_INT 22
18945: PUSH
18946: LD_INT 5
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 21
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PPUSH
18967: CALL_OW 69
18971: PUSH
18972: LD_INT 0
18974: EQUAL
18975: AND
18976: PUSH
18977: LD_INT 22
18979: PUSH
18980: LD_INT 4
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 21
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PPUSH
19001: CALL_OW 69
19005: PUSH
19006: LD_INT 0
19008: EQUAL
19009: PUSH
19010: LD_EXP 25
19014: AND
19015: PUSH
19016: LD_EXP 25
19020: NOT
19021: OR
19022: AND
19023: IFFALSE 19055
19025: GO 19027
19027: DISABLE
// begin DialogueOn ;
19028: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
19032: LD_EXP 46
19036: PPUSH
19037: LD_STRING DH-Alarm-2
19039: PPUSH
19040: CALL_OW 88
// DialogueOff ;
19044: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
19048: LD_STRING M1-people-out
19050: PPUSH
19051: CALL_OW 337
// end ;
19055: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
19056: LD_EXP 48
19060: PPUSH
19061: CALL_OW 255
19065: PUSH
19066: LD_INT 2
19068: EQUAL
19069: PUSH
19070: LD_EXP 48
19074: PUSH
19075: LD_EXP 14
19079: IN
19080: AND
19081: PUSH
19082: LD_EXP 46
19086: PPUSH
19087: LD_EXP 48
19091: PPUSH
19092: CALL_OW 296
19096: PUSH
19097: LD_INT 6
19099: LESS
19100: AND
19101: PUSH
19102: LD_EXP 30
19106: NOT
19107: AND
19108: PUSH
19109: LD_EXP 42
19113: AND
19114: IFFALSE 19131
19116: GO 19118
19118: DISABLE
// SetClass ( Mike , class_hunter ) ;
19119: LD_EXP 48
19123: PPUSH
19124: LD_INT 32
19126: PPUSH
19127: CALL_OW 336
19131: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
19132: LD_EXP 41
19136: PUSH
19137: LD_EXP 40
19141: AND
19142: PUSH
19143: LD_INT 137
19145: PPUSH
19146: CALL_OW 255
19150: PUSH
19151: LD_INT 3
19153: EQUAL
19154: AND
19155: PUSH
19156: LD_EXP 14
19160: PPUSH
19161: LD_INT 95
19163: PUSH
19164: LD_INT 65
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 22
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 25
19183: PUSH
19184: LD_INT 33
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: PPUSH
19196: CALL_OW 72
19200: AND
19201: PUSH
19202: LD_INT 2
19204: PPUSH
19205: LD_INT 3
19207: PPUSH
19208: CALL_OW 81
19212: PUSH
19213: LD_INT 2
19215: EQUAL
19216: NOT
19217: AND
19218: PUSH
19219: LD_EXP 66
19223: PPUSH
19224: LD_INT 137
19226: PPUSH
19227: CALL_OW 296
19231: PUSH
19232: LD_INT 12
19234: LESS
19235: NOT
19236: AND
19237: IFFALSE 19491
19239: GO 19241
19241: DISABLE
19242: LD_INT 0
19244: PPUSH
19245: PPUSH
// begin enable ;
19246: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
19247: LD_ADDR_VAR 0 2
19251: PUSH
19252: LD_EXP 14
19256: PPUSH
19257: LD_INT 95
19259: PUSH
19260: LD_INT 65
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 22
19269: PUSH
19270: LD_INT 2
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 25
19279: PUSH
19280: LD_INT 33
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: LIST
19291: PPUSH
19292: CALL_OW 72
19296: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
19297: LD_STRING QWeapons
19299: PPUSH
19300: CALL_OW 97
19304: PUSH
19305: LD_INT 1
19307: EQUAL
19308: IFFALSE 19491
// begin for i in tmp do
19310: LD_ADDR_VAR 0 1
19314: PUSH
19315: LD_VAR 0 2
19319: PUSH
19320: FOR_IN
19321: IFFALSE 19489
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
19323: LD_INT 137
19325: PPUSH
19326: CALL_OW 313
19330: PUSH
19331: LD_INT 6
19333: EQUAL
19334: IFFALSE 19338
// continue ;
19336: GO 19320
// SetSide ( i , 3 ) ;
19338: LD_VAR 0 1
19342: PPUSH
19343: LD_INT 3
19345: PPUSH
19346: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
19350: LD_VAR 0 1
19354: PPUSH
19355: LD_INT 137
19357: PPUSH
19358: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
19362: LD_ADDR_EXP 40
19366: PUSH
19367: LD_EXP 40
19371: PPUSH
19372: CALL 68356 0 1
19376: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
19377: LD_INT 10
19379: PPUSH
19380: CALL_OW 67
// until IsInUnit ( i ) ;
19384: LD_VAR 0 1
19388: PPUSH
19389: CALL_OW 310
19393: IFFALSE 19377
// SetClass ( i , class_soldier ) ;
19395: LD_VAR 0 1
19399: PPUSH
19400: LD_INT 1
19402: PPUSH
19403: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
19407: LD_VAR 0 1
19411: PPUSH
19412: CALL_OW 122
// wait ( 0 0$1 ) ;
19416: LD_INT 35
19418: PPUSH
19419: CALL_OW 67
// until not IsInUnit ( i ) ;
19423: LD_VAR 0 1
19427: PPUSH
19428: CALL_OW 310
19432: NOT
19433: IFFALSE 19407
// SetSide ( i , 2 ) ;
19435: LD_VAR 0 1
19439: PPUSH
19440: LD_INT 2
19442: PPUSH
19443: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
19447: LD_VAR 0 1
19451: PPUSH
19452: LD_INT 191
19454: PPUSH
19455: LD_INT 126
19457: PPUSH
19458: CALL_OW 171
// if weaponsAmount = 0 then
19462: LD_EXP 40
19466: PUSH
19467: LD_INT 0
19469: EQUAL
19470: IFFALSE 19487
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
19472: LD_INT 65
19474: PPUSH
19475: LD_INT 0
19477: PPUSH
19478: CALL_OW 424
// disable ;
19482: DISABLE
// exit ;
19483: POP
19484: POP
19485: GO 19491
// end ; end ;
19487: GO 19320
19489: POP
19490: POP
// end ; end ; end_of_file
19491: PPOPN 2
19493: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
19494: LD_VAR 0 1
19498: PUSH
19499: LD_INT 3
19501: DOUBLE
19502: EQUAL
19503: IFTRUE 19507
19505: GO 19537
19507: POP
// begin repeat wait ( 0 0$1 ) ;
19508: LD_INT 35
19510: PPUSH
19511: CALL_OW 67
// CenterOnUnits ( Heike ) ;
19515: LD_EXP 46
19519: PPUSH
19520: CALL_OW 85
// until IsDying ( Heike ) ;
19524: LD_EXP 46
19528: PPUSH
19529: CALL_OW 303
19533: IFFALSE 19508
// end ; end ;
19535: GO 19538
19537: POP
// end ;
19538: PPOPN 1
19540: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
19541: LD_OWVAR 59
19545: IFFALSE 19549
// exit ;
19547: GO 19623
// if showPlaceEvent then
19549: LD_INT 4
19551: IFFALSE 19623
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
19553: LD_VAR 0 2
19557: PPUSH
19558: LD_VAR 0 3
19562: PPUSH
19563: LD_INT 2
19565: PPUSH
19566: LD_INT 6
19568: NEG
19569: PPUSH
19570: CALL_OW 330
// CenterOnXY ( x , y ) ;
19574: LD_VAR 0 2
19578: PPUSH
19579: LD_VAR 0 3
19583: PPUSH
19584: CALL_OW 84
// wait ( time ) ;
19588: LD_VAR 0 4
19592: PPUSH
19593: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
19597: LD_EXP 46
19601: PPUSH
19602: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
19606: LD_VAR 0 2
19610: PPUSH
19611: LD_VAR 0 3
19615: PPUSH
19616: LD_INT 2
19618: PPUSH
19619: CALL_OW 331
// end ; end ;
19623: PPOPN 7
19625: END
// on UnitDestroyed ( un ) do var x , y ;
19626: LD_INT 0
19628: PPUSH
19629: PPUSH
// begin if un = Heike and hasNormalScene then
19630: LD_VAR 0 1
19634: PUSH
19635: LD_EXP 46
19639: EQUAL
19640: PUSH
19641: LD_EXP 5
19645: AND
19646: IFFALSE 19670
// if loseCounter then
19648: LD_EXP 32
19652: IFFALSE 19663
// YouLost ( HeikeNoSurrender ) else
19654: LD_STRING HeikeNoSurrender
19656: PPUSH
19657: CALL_OW 104
19661: GO 19670
// YouLost ( Heike ) ;
19663: LD_STRING Heike
19665: PPUSH
19666: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 255
19679: PUSH
19680: LD_INT 2
19682: EQUAL
19683: PUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 247
19693: PUSH
19694: LD_INT 1
19696: EQUAL
19697: AND
19698: IFFALSE 19715
// loseCounter := Inc ( loseCounter ) ;
19700: LD_ADDR_EXP 32
19704: PUSH
19705: LD_EXP 32
19709: PPUSH
19710: CALL 68334 0 1
19714: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
19715: LD_VAR 0 1
19719: PPUSH
19720: CALL_OW 255
19724: PUSH
19725: LD_INT 6
19727: EQUAL
19728: PUSH
19729: LD_EXP 17
19733: NOT
19734: AND
19735: PUSH
19736: LD_VAR 0 1
19740: PUSH
19741: LD_EXP 71
19745: IN
19746: AND
19747: IFFALSE 19851
// begin x := GetX ( un ) ;
19749: LD_ADDR_VAR 0 2
19753: PUSH
19754: LD_VAR 0 1
19758: PPUSH
19759: CALL_OW 250
19763: ST_TO_ADDR
// y := GetY ( un ) ;
19764: LD_ADDR_VAR 0 3
19768: PUSH
19769: LD_VAR 0 1
19773: PPUSH
19774: CALL_OW 251
19778: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
19779: LD_ADDR_EXP 43
19783: PUSH
19784: LD_EXP 43
19788: PPUSH
19789: LD_VAR 0 2
19793: PUSH
19794: LD_VAR 0 3
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PPUSH
19803: CALL 66973 0 2
19807: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
19808: LD_ADDR_EXP 71
19812: PUSH
19813: LD_EXP 71
19817: PUSH
19818: LD_VAR 0 1
19822: DIFF
19823: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
19824: LD_INT 3
19826: PPUSH
19827: LD_VAR 0 2
19831: PPUSH
19832: LD_VAR 0 3
19836: PPUSH
19837: CALL_OW 293
19841: IFFALSE 19851
// isAlarm := true ;
19843: LD_ADDR_EXP 17
19847: PUSH
19848: LD_INT 1
19850: ST_TO_ADDR
// end ; end ;
19851: PPOPN 3
19853: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
19854: LD_EXP 44
19858: IFFALSE 19862
// exit ;
19860: GO 19910
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
19862: LD_VAR 0 1
19866: PUSH
19867: LD_INT 2
19869: EQUAL
19870: PUSH
19871: LD_VAR 0 2
19875: PUSH
19876: LD_INT 3
19878: EQUAL
19879: AND
19880: PUSH
19881: LD_VAR 0 1
19885: PUSH
19886: LD_INT 3
19888: EQUAL
19889: PUSH
19890: LD_VAR 0 2
19894: PUSH
19895: LD_INT 2
19897: EQUAL
19898: AND
19899: OR
19900: IFFALSE 19910
// isAlarm := true ;
19902: LD_ADDR_EXP 17
19906: PUSH
19907: LD_INT 1
19909: ST_TO_ADDR
// end ; end_of_file
19910: PPOPN 2
19912: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
19913: LD_INT 0
19915: PPUSH
19916: PPUSH
19917: PPUSH
// u1 := IsInUnit ( unit1 ) ;
19918: LD_ADDR_VAR 0 4
19922: PUSH
19923: LD_VAR 0 1
19927: PPUSH
19928: CALL_OW 310
19932: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
19933: LD_ADDR_VAR 0 5
19937: PUSH
19938: LD_VAR 0 2
19942: PPUSH
19943: CALL_OW 310
19947: ST_TO_ADDR
// result := u1 and u1 = u2 ;
19948: LD_ADDR_VAR 0 3
19952: PUSH
19953: LD_VAR 0 4
19957: PUSH
19958: LD_VAR 0 4
19962: PUSH
19963: LD_VAR 0 5
19967: EQUAL
19968: AND
19969: ST_TO_ADDR
// end ;
19970: LD_VAR 0 3
19974: RET
// export function ShowPlace ( x , y , time ) ; begin
19975: LD_INT 0
19977: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
19978: LD_INT 4
19980: PPUSH
19981: LD_VAR 0 1
19985: PPUSH
19986: LD_VAR 0 2
19990: PPUSH
19991: LD_VAR 0 3
19995: PPUSH
19996: LD_INT 0
19998: PPUSH
19999: LD_INT 0
20001: PPUSH
20002: LD_INT 0
20004: PPUSH
20005: CALL_OW 595
// end ;
20009: LD_VAR 0 4
20013: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
20014: LD_INT 0
20016: PPUSH
20017: PPUSH
20018: PPUSH
20019: PPUSH
20020: PPUSH
20021: PPUSH
// if not IsOk ( building ) then
20022: LD_VAR 0 1
20026: PPUSH
20027: CALL_OW 302
20031: NOT
20032: IFFALSE 20036
// exit ;
20034: GO 20283
// x := GetX ( building ) ;
20036: LD_ADDR_VAR 0 4
20040: PUSH
20041: LD_VAR 0 1
20045: PPUSH
20046: CALL_OW 250
20050: ST_TO_ADDR
// y := GetY ( building ) ;
20051: LD_ADDR_VAR 0 5
20055: PUSH
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL_OW 251
20065: ST_TO_ADDR
// d := GetDir ( building ) ;
20066: LD_ADDR_VAR 0 6
20070: PUSH
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 254
20080: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20081: LD_ADDR_VAR 0 7
20085: PUSH
20086: LD_VAR 0 4
20090: PPUSH
20091: LD_VAR 0 6
20095: PPUSH
20096: LD_INT 3
20098: PPUSH
20099: CALL_OW 272
20103: PUSH
20104: LD_VAR 0 5
20108: PPUSH
20109: LD_VAR 0 6
20113: PPUSH
20114: LD_INT 3
20116: PPUSH
20117: CALL_OW 273
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20126: LD_VAR 0 7
20130: PUSH
20131: LD_INT 1
20133: ARRAY
20134: PPUSH
20135: LD_VAR 0 7
20139: PUSH
20140: LD_INT 2
20142: ARRAY
20143: PPUSH
20144: CALL_OW 488
20148: NOT
20149: IFFALSE 20153
// exit ;
20151: GO 20283
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
20153: LD_ADDR_VAR 0 2
20157: PUSH
20158: LD_INT 92
20160: PUSH
20161: LD_VAR 0 4
20165: PUSH
20166: LD_VAR 0 5
20170: PUSH
20171: LD_INT 4
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 3
20182: PUSH
20183: LD_INT 54
20185: PUSH
20186: EMPTY
20187: LIST
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PPUSH
20197: CALL_OW 69
20201: ST_TO_ADDR
// if not result then
20202: LD_VAR 0 2
20206: NOT
20207: IFFALSE 20211
// exit ;
20209: GO 20283
// for i in result do
20211: LD_ADDR_VAR 0 3
20215: PUSH
20216: LD_VAR 0 2
20220: PUSH
20221: FOR_IN
20222: IFFALSE 20281
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
20224: LD_VAR 0 3
20228: PPUSH
20229: LD_VAR 0 3
20233: PPUSH
20234: CALL_OW 250
20238: PPUSH
20239: LD_VAR 0 6
20243: PPUSH
20244: LD_INT 3
20246: PPUSH
20247: CALL_OW 272
20251: PPUSH
20252: LD_VAR 0 3
20256: PPUSH
20257: CALL_OW 251
20261: PPUSH
20262: LD_VAR 0 6
20266: PPUSH
20267: LD_INT 3
20269: PPUSH
20270: CALL_OW 273
20274: PPUSH
20275: CALL_OW 111
20279: GO 20221
20281: POP
20282: POP
// end ;
20283: LD_VAR 0 2
20287: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
20288: LD_INT 0
20290: PPUSH
20291: PPUSH
20292: PPUSH
20293: PPUSH
20294: PPUSH
20295: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
20296: LD_VAR 0 1
20300: PPUSH
20301: CALL_OW 302
20305: NOT
20306: PUSH
20307: LD_VAR 0 2
20311: PPUSH
20312: CALL_OW 302
20316: NOT
20317: OR
20318: PUSH
20319: LD_VAR 0 2
20323: PPUSH
20324: CALL_OW 313
20328: PUSH
20329: LD_INT 6
20331: EQUAL
20332: OR
20333: IFFALSE 20337
// exit ;
20335: GO 20554
// btype := GetBType ( building ) ;
20337: LD_ADDR_VAR 0 8
20341: PUSH
20342: LD_VAR 0 2
20346: PPUSH
20347: CALL_OW 266
20351: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
20352: LD_VAR 0 8
20356: PUSH
20357: LD_INT 0
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: LD_INT 2
20365: PUSH
20366: LD_INT 4
20368: PUSH
20369: LD_INT 5
20371: PUSH
20372: LD_INT 3
20374: PUSH
20375: LD_INT 6
20377: PUSH
20378: LD_INT 7
20380: PUSH
20381: LD_INT 8
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: IN
20395: NOT
20396: IFFALSE 20400
// exit ;
20398: GO 20554
// x := GetX ( building ) ;
20400: LD_ADDR_VAR 0 4
20404: PUSH
20405: LD_VAR 0 2
20409: PPUSH
20410: CALL_OW 250
20414: ST_TO_ADDR
// y := GetY ( building ) ;
20415: LD_ADDR_VAR 0 5
20419: PUSH
20420: LD_VAR 0 2
20424: PPUSH
20425: CALL_OW 251
20429: ST_TO_ADDR
// d := GetDir ( building ) ;
20430: LD_ADDR_VAR 0 6
20434: PUSH
20435: LD_VAR 0 2
20439: PPUSH
20440: CALL_OW 254
20444: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20445: LD_ADDR_VAR 0 7
20449: PUSH
20450: LD_VAR 0 4
20454: PPUSH
20455: LD_VAR 0 6
20459: PPUSH
20460: LD_INT 3
20462: PPUSH
20463: CALL_OW 272
20467: PUSH
20468: LD_VAR 0 5
20472: PPUSH
20473: LD_VAR 0 6
20477: PPUSH
20478: LD_INT 3
20480: PPUSH
20481: CALL_OW 273
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20490: LD_VAR 0 7
20494: PUSH
20495: LD_INT 1
20497: ARRAY
20498: PPUSH
20499: LD_VAR 0 7
20503: PUSH
20504: LD_INT 2
20506: ARRAY
20507: PPUSH
20508: CALL_OW 488
20512: NOT
20513: IFFALSE 20517
// exit ;
20515: GO 20554
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
20517: LD_ADDR_VAR 0 3
20521: PUSH
20522: LD_VAR 0 1
20526: PPUSH
20527: LD_VAR 0 7
20531: PUSH
20532: LD_INT 1
20534: ARRAY
20535: PPUSH
20536: LD_VAR 0 7
20540: PUSH
20541: LD_INT 2
20543: ARRAY
20544: PPUSH
20545: CALL_OW 297
20549: PUSH
20550: LD_INT 4
20552: LESS
20553: ST_TO_ADDR
// end ;
20554: LD_VAR 0 3
20558: RET
// export function PlaceExplosives ( building ) ; begin
20559: LD_INT 0
20561: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
20562: LD_ADDR_EXP 29
20566: PUSH
20567: LD_EXP 29
20571: PPUSH
20572: LD_VAR 0 1
20576: PPUSH
20577: CALL 66973 0 2
20581: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
20582: LD_VAR 0 1
20586: PPUSH
20587: CALL_OW 250
20591: PPUSH
20592: LD_VAR 0 1
20596: PPUSH
20597: CALL_OW 251
20601: PPUSH
20602: LD_STRING PlantBomb
20604: PPUSH
20605: CALL_OW 366
// end ;
20609: LD_VAR 0 2
20613: RET
// export function CreateNature ; var i ; begin
20614: LD_INT 0
20616: PPUSH
20617: PPUSH
// PrepareFrog ;
20618: CALL 63450 0 0
// for i := 1 to 3 do
20622: LD_ADDR_VAR 0 2
20626: PUSH
20627: DOUBLE
20628: LD_INT 1
20630: DEC
20631: ST_TO_ADDR
20632: LD_INT 3
20634: PUSH
20635: FOR_TO
20636: IFFALSE 20655
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
20638: CALL_OW 44
20642: PPUSH
20643: LD_INT 24
20645: PPUSH
20646: LD_INT 0
20648: PPUSH
20649: CALL_OW 49
20653: GO 20635
20655: POP
20656: POP
// end ;
20657: LD_VAR 0 1
20661: RET
// export function MarkBuilding ( building , marker ) ; begin
20662: LD_INT 0
20664: PPUSH
// if marker then
20665: LD_VAR 0 2
20669: IFFALSE 20716
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
20671: LD_VAR 0 1
20675: PPUSH
20676: CALL_OW 250
20680: PPUSH
20681: LD_VAR 0 1
20685: PPUSH
20686: CALL_OW 251
20690: PPUSH
20691: LD_INT 2
20693: PPUSH
20694: LD_INT 3
20696: NEG
20697: PPUSH
20698: CALL_OW 330
// SetBName ( building , target ) ;
20702: LD_VAR 0 1
20706: PPUSH
20707: LD_STRING target
20709: PPUSH
20710: CALL_OW 500
// end else
20714: GO 20755
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
20716: LD_VAR 0 1
20720: PPUSH
20721: CALL_OW 250
20725: PPUSH
20726: LD_VAR 0 1
20730: PPUSH
20731: CALL_OW 251
20735: PPUSH
20736: LD_INT 2
20738: PPUSH
20739: CALL_OW 331
// SetBName ( building ,  ) ;
20743: LD_VAR 0 1
20747: PPUSH
20748: LD_STRING 
20750: PPUSH
20751: CALL_OW 500
// end ; end ; end_of_file
20755: LD_VAR 0 3
20759: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
20760: LD_INT 0
20762: PPUSH
// lockerCodeValid := false ;
20763: LD_ADDR_EXP 72
20767: PUSH
20768: LD_INT 0
20770: ST_TO_ADDR
// if not step then
20771: LD_LOC 1
20775: NOT
20776: IFFALSE 20786
// step := 1 ;
20778: LD_ADDR_LOC 1
20782: PUSH
20783: LD_INT 1
20785: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
20786: LD_STRING HEscape
20788: PUSH
20789: LD_LOC 1
20793: STR
20794: PPUSH
20795: CALL_OW 97
20799: PUSH
20800: LD_INT 1
20802: DOUBLE
20803: EQUAL
20804: IFTRUE 20808
20806: GO 20815
20808: POP
// LockerMinigameSearch ; 2 :
20809: CALL 20848 0 0
20813: GO 20831
20815: LD_INT 2
20817: DOUBLE
20818: EQUAL
20819: IFTRUE 20823
20821: GO 20830
20823: POP
// LockerMinigameSetCode ; end ;
20824: CALL 20922 0 0
20828: GO 20831
20830: POP
// if lockerCodeValid then
20831: LD_EXP 72
20835: IFFALSE 20839
// exit ;
20837: GO 20843
// StartLockerMinigame ;
20839: CALL 20760 0 0
// end ;
20843: LD_VAR 0 1
20847: RET
// function LockerMinigameSearch ; begin
20848: LD_INT 0
20850: PPUSH
// if code then
20851: LD_LOC 2
20855: IFFALSE 20871
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
20857: LD_EXP 46
20861: PPUSH
20862: LD_STRING DH-Escape-3-Hint-0
20864: PPUSH
20865: CALL_OW 88
// exit ;
20869: GO 20917
// end ; Randomize ;
20871: CALL_OW 10
// code := rand ( 1 , 5 ) ;
20875: LD_ADDR_LOC 2
20879: PUSH
20880: LD_INT 1
20882: PPUSH
20883: LD_INT 5
20885: PPUSH
20886: CALL_OW 12
20890: ST_TO_ADDR
// step := 2 ;
20891: LD_ADDR_LOC 1
20895: PUSH
20896: LD_INT 2
20898: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
20899: LD_EXP 46
20903: PPUSH
20904: LD_STRING DH-Escape-3-Hint-
20906: PUSH
20907: LD_LOC 2
20911: STR
20912: PPUSH
20913: CALL_OW 88
// end ;
20917: LD_VAR 0 1
20921: RET
// function LockerMinigameSetCode ; begin
20922: LD_INT 0
20924: PPUSH
// if not code then
20925: LD_LOC 2
20929: NOT
20930: IFFALSE 20940
// code := 0 ;
20932: LD_ADDR_LOC 2
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// lockerBusy := true ;
20940: LD_ADDR_EXP 73
20944: PUSH
20945: LD_INT 1
20947: ST_TO_ADDR
// InGameOff ;
20948: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
20952: LD_STRING initLockerMinigame("
20954: PUSH
20955: LD_LOC 2
20959: STR
20960: PUSH
20961: LD_STRING ")
20963: STR
20964: PPUSH
20965: CALL_OW 559
// step := 3 ;
20969: LD_ADDR_LOC 1
20973: PUSH
20974: LD_INT 3
20976: ST_TO_ADDR
// repeat wait ( 1 ) ;
20977: LD_INT 1
20979: PPUSH
20980: CALL_OW 67
// until not lockerBusy ;
20984: LD_EXP 73
20988: NOT
20989: IFFALSE 20977
// InGameOn ;
20991: CALL_OW 8
// if not lockerCodeValid then
20995: LD_EXP 72
20999: NOT
21000: IFFALSE 21026
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
21002: LD_EXP 46
21006: PPUSH
21007: LD_STRING DH-Escape-3-Fail-
21009: PUSH
21010: LD_INT 1
21012: PPUSH
21013: LD_INT 2
21015: PPUSH
21016: CALL_OW 12
21020: STR
21021: PPUSH
21022: CALL_OW 88
// end ; end_of_file
21026: LD_VAR 0 1
21030: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
21031: LD_VAR 0 2
21035: PUSH
21036: LD_INT 102
21038: EQUAL
21039: IFFALSE 21061
// begin lockerBusy := false ;
21041: LD_ADDR_EXP 73
21045: PUSH
21046: LD_INT 0
21048: ST_TO_ADDR
// lockerCodeValid := p3 ;
21049: LD_ADDR_EXP 72
21053: PUSH
21054: LD_VAR 0 3
21058: ST_TO_ADDR
// end else
21059: GO 21115
// if p2 = 103 then
21061: LD_VAR 0 2
21065: PUSH
21066: LD_INT 103
21068: EQUAL
21069: IFFALSE 21081
// begin weatherBusy := false ;
21071: LD_ADDR_EXP 37
21075: PUSH
21076: LD_INT 0
21078: ST_TO_ADDR
// end else
21079: GO 21115
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21081: LD_VAR 0 1
21085: PPUSH
21086: LD_VAR 0 2
21090: PPUSH
21091: LD_VAR 0 3
21095: PPUSH
21096: LD_VAR 0 4
21100: PPUSH
21101: LD_VAR 0 5
21105: PPUSH
21106: LD_VAR 0 6
21110: PPUSH
21111: CALL 71658 0 6
// end ;
21115: PPOPN 6
21117: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
21118: LD_STRING killGameMusic();
21120: PPUSH
21121: CALL_OW 559
// PlayOriginalMusic ;
21125: CALL 92377 0 0
// SOS_MapStart ( ) ;
21129: CALL 71562 0 0
// end ; end_of_file
21133: PPOPN 1
21135: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
21136: LD_EXP 17
21140: NOT
21141: PUSH
21142: LD_EXP 71
21146: AND
21147: IFFALSE 21727
21149: GO 21151
21151: DISABLE
21152: LD_INT 0
21154: PPUSH
21155: PPUSH
21156: PPUSH
21157: PPUSH
21158: PPUSH
// begin enable ;
21159: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
21160: LD_ADDR_VAR 0 3
21164: PUSH
21165: LD_INT 26
21167: PUSH
21168: LD_INT 27
21170: PUSH
21171: LD_INT 28
21173: PUSH
21174: LD_INT 29
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 30
21185: PUSH
21186: LD_INT 31
21188: PUSH
21189: LD_INT 32
21191: PUSH
21192: LD_INT 33
21194: PUSH
21195: LD_INT 34
21197: PUSH
21198: LD_INT 35
21200: PUSH
21201: LD_INT 36
21203: PUSH
21204: LD_INT 37
21206: PUSH
21207: LD_INT 38
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 39
21223: PUSH
21224: LD_INT 40
21226: PUSH
21227: LD_INT 41
21229: PUSH
21230: LD_INT 42
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 43
21241: PUSH
21242: LD_INT 44
21244: PUSH
21245: LD_INT 45
21247: PUSH
21248: LD_INT 46
21250: PUSH
21251: LD_INT 47
21253: PUSH
21254: LD_INT 46
21256: PUSH
21257: LD_INT 45
21259: PUSH
21260: LD_INT 44
21262: PUSH
21263: LD_INT 43
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: ST_TO_ADDR
// for i in ruPatrol do
21283: LD_ADDR_VAR 0 1
21287: PUSH
21288: LD_EXP 71
21292: PUSH
21293: FOR_IN
21294: IFFALSE 21725
// begin if not IsOk ( i ) then
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL_OW 302
21305: NOT
21306: IFFALSE 21310
// continue ;
21308: GO 21293
// if Count ( ruKilledHex ) then
21310: LD_EXP 43
21314: PPUSH
21315: CALL 31373 0 1
21319: IFFALSE 21392
// for j in ruKilledHex do
21321: LD_ADDR_VAR 0 2
21325: PUSH
21326: LD_EXP 43
21330: PUSH
21331: FOR_IN
21332: IFFALSE 21390
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
21334: LD_VAR 0 1
21338: PPUSH
21339: LD_VAR 0 2
21343: PUSH
21344: LD_INT 1
21346: ARRAY
21347: PPUSH
21348: LD_VAR 0 2
21352: PUSH
21353: LD_INT 2
21355: ARRAY
21356: PPUSH
21357: CALL_OW 297
21361: PUSH
21362: LD_INT 6
21364: LESS
21365: IFFALSE 21388
// begin Query ( QBody ) ;
21367: LD_STRING QBody
21369: PPUSH
21370: CALL_OW 97
// isAlarm := true ;
21374: LD_ADDR_EXP 17
21378: PUSH
21379: LD_INT 1
21381: ST_TO_ADDR
// exit ;
21382: POP
21383: POP
21384: POP
21385: POP
21386: GO 21727
// end ;
21388: GO 21331
21390: POP
21391: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
21392: LD_ADDR_VAR 0 5
21396: PUSH
21397: LD_INT 22
21399: PUSH
21400: LD_INT 2
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 21
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 91
21419: PUSH
21420: LD_VAR 0 1
21424: PUSH
21425: LD_INT 7
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: LIST
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: LIST
21437: PPUSH
21438: CALL_OW 69
21442: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
21443: LD_INT 2
21445: PPUSH
21446: LD_VAR 0 1
21450: PPUSH
21451: CALL_OW 292
21455: PUSH
21456: LD_VAR 0 5
21460: AND
21461: IFFALSE 21611
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
21463: LD_EXP 30
21467: PUSH
21468: LD_VAR 0 1
21472: PPUSH
21473: LD_EXP 66
21477: PPUSH
21478: CALL_OW 296
21482: PUSH
21483: LD_INT 16
21485: LESS
21486: AND
21487: PUSH
21488: LD_EXP 38
21492: OR
21493: IFFALSE 21497
// continue ;
21495: GO 21293
// for j in tmp do
21497: LD_ADDR_VAR 0 2
21501: PUSH
21502: LD_VAR 0 5
21506: PUSH
21507: FOR_IN
21508: IFFALSE 21569
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
21510: LD_ADDR_VAR 0 5
21514: PUSH
21515: LD_VAR 0 5
21519: PUSH
21520: LD_INT 22
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 21
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 91
21542: PUSH
21543: LD_VAR 0 2
21547: PUSH
21548: LD_INT 4
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: LIST
21560: PPUSH
21561: CALL_OW 69
21565: UNION
21566: ST_TO_ADDR
21567: GO 21507
21569: POP
21570: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
21571: LD_VAR 0 1
21575: PPUSH
21576: LD_VAR 0 5
21580: PPUSH
21581: LD_VAR 0 1
21585: PPUSH
21586: CALL_OW 74
21590: PPUSH
21591: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
21595: LD_VAR 0 1
21599: PPUSH
21600: LD_VAR 0 5
21604: PPUSH
21605: CALL 21730 0 2
// continue ;
21609: GO 21293
// end ; if HasTask ( i ) then
21611: LD_VAR 0 1
21615: PPUSH
21616: CALL_OW 314
21620: IFFALSE 21624
// continue ;
21622: GO 21293
// tag := GetTag ( i ) ;
21624: LD_ADDR_VAR 0 4
21628: PUSH
21629: LD_VAR 0 1
21633: PPUSH
21634: CALL_OW 110
21638: ST_TO_ADDR
// if not tag then
21639: LD_VAR 0 4
21643: NOT
21644: IFFALSE 21657
// begin ComHold ( i ) ;
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 140
// continue ;
21655: GO 21293
// end ; for j := 1 to points [ tag ] do
21657: LD_ADDR_VAR 0 2
21661: PUSH
21662: DOUBLE
21663: LD_INT 1
21665: DEC
21666: ST_TO_ADDR
21667: LD_VAR 0 3
21671: PUSH
21672: LD_VAR 0 4
21676: ARRAY
21677: PUSH
21678: FOR_TO
21679: IFFALSE 21721
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
21681: LD_VAR 0 1
21685: PPUSH
21686: LD_VAR 0 3
21690: PUSH
21691: LD_VAR 0 4
21695: ARRAY
21696: PUSH
21697: LD_VAR 0 2
21701: ARRAY
21702: PPUSH
21703: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
21707: LD_VAR 0 1
21711: PPUSH
21712: LD_INT 70
21714: PPUSH
21715: CALL_OW 202
// end ;
21719: GO 21678
21721: POP
21722: POP
// end ;
21723: GO 21293
21725: POP
21726: POP
// end ;
21727: PPOPN 5
21729: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
21730: LD_INT 0
21732: PPUSH
21733: PPUSH
21734: PPUSH
// if UnitFilter ( units , [ [ f_nation , nation_arabian ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
21735: LD_VAR 0 2
21739: PPUSH
21740: LD_INT 23
21742: PUSH
21743: LD_INT 2
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: PUSH
21753: LD_INT 25
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 25
21765: PUSH
21766: LD_INT 11
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 25
21775: PUSH
21776: LD_INT 34
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 25
21785: PUSH
21786: LD_INT 32
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PPUSH
21804: CALL_OW 72
21808: IFFALSE 21921
// begin blockPatrolThread := true ;
21810: LD_ADDR_EXP 38
21814: PUSH
21815: LD_INT 1
21817: ST_TO_ADDR
// DialogueOn ;
21818: CALL_OW 6
// case GetSex ( guard ) of sex_male :
21822: LD_VAR 0 1
21826: PPUSH
21827: CALL_OW 258
21831: PUSH
21832: LD_INT 1
21834: DOUBLE
21835: EQUAL
21836: IFTRUE 21840
21838: GO 21855
21840: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21841: LD_VAR 0 1
21845: PPUSH
21846: LD_STRING DRum-Fail-3
21848: PPUSH
21849: CALL_OW 88
21853: GO 21879
21855: LD_INT 2
21857: DOUBLE
21858: EQUAL
21859: IFTRUE 21863
21861: GO 21878
21863: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
21864: LD_VAR 0 1
21868: PPUSH
21869: LD_STRING DRuf-Fail-3
21871: PPUSH
21872: CALL_OW 88
21876: GO 21879
21878: POP
// DialogueOff ;
21879: CALL_OW 7
// wait ( 0 0$5 ) ;
21883: LD_INT 175
21885: PPUSH
21886: CALL_OW 67
// if IsOk ( guard ) then
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 302
21899: IFFALSE 21911
// isAlarm := true else
21901: LD_ADDR_EXP 17
21905: PUSH
21906: LD_INT 1
21908: ST_TO_ADDR
21909: GO 21919
// blockPatrolThread := false ;
21911: LD_ADDR_EXP 38
21915: PUSH
21916: LD_INT 0
21918: ST_TO_ADDR
// exit ;
21919: GO 22922
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
21921: LD_VAR 0 2
21925: PPUSH
21926: LD_INT 23
21928: PUSH
21929: LD_INT 3
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PPUSH
21936: CALL_OW 72
21940: PUSH
21941: LD_VAR 0 2
21945: PPUSH
21946: LD_INT 95
21948: PUSH
21949: LD_INT 61
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PPUSH
21956: CALL_OW 72
21960: OR
21961: IFFALSE 21965
// exit ;
21963: GO 22922
// DialogueOn ;
21965: CALL_OW 6
// blockPatrolThread := true ;
21969: LD_ADDR_EXP 38
21973: PUSH
21974: LD_INT 1
21976: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 87
// if not Heike in units then
21986: LD_EXP 46
21990: PUSH
21991: LD_VAR 0 2
21995: IN
21996: NOT
21997: IFFALSE 22363
// begin case GetSex ( guard ) of sex_male :
21999: LD_VAR 0 1
22003: PPUSH
22004: CALL_OW 258
22008: PUSH
22009: LD_INT 1
22011: DOUBLE
22012: EQUAL
22013: IFTRUE 22017
22015: GO 22032
22017: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
22018: LD_VAR 0 1
22022: PPUSH
22023: LD_STRING DRum-Guard-1
22025: PPUSH
22026: CALL_OW 88
22030: GO 22056
22032: LD_INT 2
22034: DOUBLE
22035: EQUAL
22036: IFTRUE 22040
22038: GO 22055
22040: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
22041: LD_VAR 0 1
22045: PPUSH
22046: LD_STRING DRuf-Guard-1
22048: PPUSH
22049: CALL_OW 88
22053: GO 22056
22055: POP
// case Query ( SurrenderInfoPeople ) of 1 :
22056: LD_STRING SurrenderInfoPeople
22058: PPUSH
22059: CALL_OW 97
22063: PUSH
22064: LD_INT 1
22066: DOUBLE
22067: EQUAL
22068: IFTRUE 22072
22070: GO 22181
22072: POP
// begin Query ( CaughtSquadInfo ) ;
22073: LD_STRING CaughtSquadInfo
22075: PPUSH
22076: CALL_OW 97
// for i in units do
22080: LD_ADDR_VAR 0 4
22084: PUSH
22085: LD_VAR 0 2
22089: PUSH
22090: FOR_IN
22091: IFFALSE 22148
// begin if Carry ( i ) then
22093: LD_VAR 0 4
22097: PPUSH
22098: CALL_OW 281
22102: IFFALSE 22119
// SetCargo ( i , mat_cans , 0 ) ;
22104: LD_VAR 0 4
22108: PPUSH
22109: LD_INT 1
22111: PPUSH
22112: LD_INT 0
22114: PPUSH
22115: CALL_OW 290
// SetSide ( i , 5 ) ;
22119: LD_VAR 0 4
22123: PPUSH
22124: LD_INT 5
22126: PPUSH
22127: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
22131: LD_VAR 0 4
22135: PPUSH
22136: LD_INT 113
22138: PPUSH
22139: LD_INT 17
22141: PPUSH
22142: CALL_OW 111
// end ;
22146: GO 22090
22148: POP
22149: POP
// ComMoveXY ( guard , 117 , 25 ) ;
22150: LD_VAR 0 1
22154: PPUSH
22155: LD_INT 117
22157: PPUSH
22158: LD_INT 25
22160: PPUSH
22161: CALL_OW 111
// DialogueOff ;
22165: CALL_OW 7
// blockPatrolThread := false ;
22169: LD_ADDR_EXP 38
22173: PUSH
22174: LD_INT 0
22176: ST_TO_ADDR
// exit ;
22177: GO 22922
// end ; 2 :
22179: GO 22363
22181: LD_INT 2
22183: DOUBLE
22184: EQUAL
22185: IFTRUE 22189
22187: GO 22362
22189: POP
// begin DialogueOff ;
22190: CALL_OW 7
// wait ( 0 0$2 ) ;
22194: LD_INT 70
22196: PPUSH
22197: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22201: LD_INT 6
22203: PPUSH
22204: LD_INT 2
22206: PPUSH
22207: LD_INT 2
22209: PPUSH
22210: LD_INT 1
22212: PPUSH
22213: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
22217: LD_VAR 0 1
22221: PPUSH
22222: LD_VAR 0 2
22226: PUSH
22227: LD_INT 1
22229: ARRAY
22230: PPUSH
22231: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22235: LD_VAR 0 1
22239: PPUSH
22240: CALL_OW 258
22244: PUSH
22245: LD_INT 1
22247: DOUBLE
22248: EQUAL
22249: IFTRUE 22253
22251: GO 22268
22253: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22254: LD_VAR 0 1
22258: PPUSH
22259: LD_STRING DRum-Fail-3
22261: PPUSH
22262: CALL_OW 88
22266: GO 22292
22268: LD_INT 2
22270: DOUBLE
22271: EQUAL
22272: IFTRUE 22276
22274: GO 22291
22276: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22277: LD_VAR 0 1
22281: PPUSH
22282: LD_STRING DRum-Fail-3
22284: PPUSH
22285: CALL_OW 88
22289: GO 22292
22291: POP
// wait ( 0 0$5 ) ;
22292: LD_INT 175
22294: PPUSH
22295: CALL_OW 67
// if IsOk ( guard ) then
22299: LD_VAR 0 1
22303: PPUSH
22304: CALL_OW 302
22308: IFFALSE 22320
// isAlarm := true else
22310: LD_ADDR_EXP 17
22314: PUSH
22315: LD_INT 1
22317: ST_TO_ADDR
22318: GO 22352
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22320: LD_INT 6
22322: PPUSH
22323: LD_INT 2
22325: PPUSH
22326: LD_INT 0
22328: PPUSH
22329: LD_INT 1
22331: PPUSH
22332: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22336: LD_INT 3
22338: PPUSH
22339: LD_INT 2
22341: PPUSH
22342: LD_INT 0
22344: PPUSH
22345: LD_INT 1
22347: PPUSH
22348: CALL_OW 80
// end ; blockPatrolThread := false ;
22352: LD_ADDR_EXP 38
22356: PUSH
22357: LD_INT 0
22359: ST_TO_ADDR
// end ; end ;
22360: GO 22363
22362: POP
// end ; if Carry ( Heike ) then
22363: LD_EXP 46
22367: PPUSH
22368: CALL_OW 281
22372: IFFALSE 22448
// begin case GetSex ( guard ) of sex_male :
22374: LD_VAR 0 1
22378: PPUSH
22379: CALL_OW 258
22383: PUSH
22384: LD_INT 1
22386: DOUBLE
22387: EQUAL
22388: IFTRUE 22392
22390: GO 22407
22392: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
22393: LD_VAR 0 1
22397: PPUSH
22398: LD_STRING DRum-FoodFail-1
22400: PPUSH
22401: CALL_OW 88
22405: GO 22431
22407: LD_INT 2
22409: DOUBLE
22410: EQUAL
22411: IFTRUE 22415
22413: GO 22430
22415: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
22416: LD_VAR 0 1
22420: PPUSH
22421: LD_STRING DRuf-FoodFail-2
22423: PPUSH
22424: CALL_OW 88
22428: GO 22431
22430: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
22431: LD_EXP 46
22435: PPUSH
22436: LD_INT 1
22438: PPUSH
22439: LD_INT 0
22441: PPUSH
22442: CALL_OW 290
// end else
22446: GO 22505
// begin case GetSex ( guard ) of sex_male :
22448: LD_VAR 0 1
22452: PPUSH
22453: CALL_OW 258
22457: PUSH
22458: LD_INT 1
22460: DOUBLE
22461: EQUAL
22462: IFTRUE 22466
22464: GO 22481
22466: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
22467: LD_VAR 0 1
22471: PPUSH
22472: LD_STRING DRum-Seen-1
22474: PPUSH
22475: CALL_OW 88
22479: GO 22505
22481: LD_INT 2
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22504
22489: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
22490: LD_VAR 0 1
22494: PPUSH
22495: LD_STRING DRuf-Seen-1
22497: PPUSH
22498: CALL_OW 88
22502: GO 22505
22504: POP
// end ; alone := ( units = 1 ) ;
22505: LD_ADDR_VAR 0 5
22509: PUSH
22510: LD_VAR 0 2
22514: PUSH
22515: LD_INT 1
22517: EQUAL
22518: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
22519: LD_STRING SurrenderInfo
22521: PPUSH
22522: CALL_OW 97
22526: PUSH
22527: LD_INT 1
22529: DOUBLE
22530: EQUAL
22531: IFTRUE 22535
22533: GO 22724
22535: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
22536: LD_INT 23
22538: PPUSH
22539: CALL_OW 87
// RemoveUnit ( Heike ) ;
22543: LD_EXP 46
22547: PPUSH
22548: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
22552: LD_EXP 46
22556: PPUSH
22557: LD_INT 23
22559: PPUSH
22560: CALL_OW 52
// if not alone then
22564: LD_VAR 0 5
22568: NOT
22569: IFFALSE 22636
// for i in units diff Heike do
22571: LD_ADDR_VAR 0 4
22575: PUSH
22576: LD_VAR 0 2
22580: PUSH
22581: LD_EXP 46
22585: DIFF
22586: PUSH
22587: FOR_IN
22588: IFFALSE 22634
// begin RemoveUnit ( i ) ;
22590: LD_VAR 0 4
22594: PPUSH
22595: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
22599: LD_VAR 0 4
22603: PPUSH
22604: LD_INT 114
22606: PPUSH
22607: LD_INT 17
22609: PPUSH
22610: LD_INT 10
22612: PPUSH
22613: LD_INT 0
22615: PPUSH
22616: CALL_OW 50
// SetSide ( i , 5 ) ;
22620: LD_VAR 0 4
22624: PPUSH
22625: LD_INT 5
22627: PPUSH
22628: CALL_OW 235
// end ;
22632: GO 22587
22634: POP
22635: POP
// wait ( 0 0$0.3 ) ;
22636: LD_INT 10
22638: PPUSH
22639: CALL_OW 67
// if alone then
22643: LD_VAR 0 5
22647: IFFALSE 22658
// Query ( CaughtInfoAlone ) else
22649: LD_STRING CaughtInfoAlone
22651: PPUSH
22652: CALL_OW 97
22656: GO 22665
// Query ( CaughtInfo ) ;
22658: LD_STRING CaughtInfo
22660: PPUSH
22661: CALL_OW 97
// wait ( 0 0$2 ) ;
22665: LD_INT 70
22667: PPUSH
22668: CALL_OW 67
// StartLockerMinigame ;
22672: CALL 20760 0 0
// Say ( Heike , DH-Reset ) ;
22676: LD_EXP 46
22680: PPUSH
22681: LD_STRING DH-Reset
22683: PPUSH
22684: CALL_OW 88
// DialogueOff ;
22688: CALL_OW 7
// InGameOff ;
22692: CALL_OW 9
// blockPatrolThread := false ;
22696: LD_ADDR_EXP 38
22700: PUSH
22701: LD_INT 0
22703: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
22704: LD_EXP 46
22708: PPUSH
22709: CALL_OW 122
// ComFree ( guard ) ;
22713: LD_VAR 0 1
22717: PPUSH
22718: CALL_OW 139
// end ; 2 :
22722: GO 22914
22724: LD_INT 2
22726: DOUBLE
22727: EQUAL
22728: IFTRUE 22732
22730: GO 22913
22732: POP
// begin Say ( Heike , DH-Guard-2 ) ;
22733: LD_EXP 46
22737: PPUSH
22738: LD_STRING DH-Guard-2
22740: PPUSH
22741: CALL_OW 88
// DialogueOff ;
22745: CALL_OW 7
// wait ( 0 0$2 ) ;
22749: LD_INT 70
22751: PPUSH
22752: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22756: LD_INT 6
22758: PPUSH
22759: LD_INT 2
22761: PPUSH
22762: LD_INT 2
22764: PPUSH
22765: LD_INT 1
22767: PPUSH
22768: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
22772: LD_VAR 0 1
22776: PPUSH
22777: LD_EXP 46
22781: PPUSH
22782: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22786: LD_VAR 0 1
22790: PPUSH
22791: CALL_OW 258
22795: PUSH
22796: LD_INT 1
22798: DOUBLE
22799: EQUAL
22800: IFTRUE 22804
22802: GO 22819
22804: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22805: LD_VAR 0 1
22809: PPUSH
22810: LD_STRING DRum-Fail-3
22812: PPUSH
22813: CALL_OW 88
22817: GO 22843
22819: LD_INT 2
22821: DOUBLE
22822: EQUAL
22823: IFTRUE 22827
22825: GO 22842
22827: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22828: LD_VAR 0 1
22832: PPUSH
22833: LD_STRING DRum-Fail-3
22835: PPUSH
22836: CALL_OW 88
22840: GO 22843
22842: POP
// wait ( 0 0$5 ) ;
22843: LD_INT 175
22845: PPUSH
22846: CALL_OW 67
// if IsOk ( guard ) then
22850: LD_VAR 0 1
22854: PPUSH
22855: CALL_OW 302
22859: IFFALSE 22871
// isAlarm := true else
22861: LD_ADDR_EXP 17
22865: PUSH
22866: LD_INT 1
22868: ST_TO_ADDR
22869: GO 22903
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22871: LD_INT 6
22873: PPUSH
22874: LD_INT 2
22876: PPUSH
22877: LD_INT 0
22879: PPUSH
22880: LD_INT 1
22882: PPUSH
22883: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22887: LD_INT 3
22889: PPUSH
22890: LD_INT 2
22892: PPUSH
22893: LD_INT 0
22895: PPUSH
22896: LD_INT 1
22898: PPUSH
22899: CALL_OW 80
// end ; blockPatrolThread := false ;
22903: LD_ADDR_EXP 38
22907: PUSH
22908: LD_INT 0
22910: ST_TO_ADDR
// end ; end ;
22911: GO 22914
22913: POP
// blockPatrolThread := false ;
22914: LD_ADDR_EXP 38
22918: PUSH
22919: LD_INT 0
22921: ST_TO_ADDR
// end ;
22922: LD_VAR 0 3
22926: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
22927: LD_EXP 14
22931: PPUSH
22932: LD_INT 22
22934: PUSH
22935: LD_INT 5
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 3
22944: PUSH
22945: LD_INT 101
22947: PUSH
22948: LD_INT 6
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 92
22961: PUSH
22962: LD_INT 113
22964: PUSH
22965: LD_INT 16
22967: PUSH
22968: LD_INT 12
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 91
22979: PUSH
22980: LD_EXP 46
22984: PUSH
22985: LD_INT 6
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: PPUSH
22999: CALL_OW 72
23003: PUSH
23004: LD_EXP 30
23008: NOT
23009: AND
23010: IFFALSE 23115
23012: GO 23014
23014: DISABLE
23015: LD_INT 0
23017: PPUSH
// begin enable ;
23018: ENABLE
// DialogueOn ;
23019: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
23023: LD_EXP 46
23027: PPUSH
23028: LD_STRING DH-Join-
23030: PUSH
23031: LD_INT 1
23033: PPUSH
23034: LD_INT 3
23036: PPUSH
23037: CALL_OW 12
23041: STR
23042: PPUSH
23043: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
23047: LD_ADDR_VAR 0 1
23051: PUSH
23052: LD_EXP 14
23056: PPUSH
23057: LD_INT 22
23059: PUSH
23060: LD_INT 5
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 91
23069: PUSH
23070: LD_EXP 46
23074: PUSH
23075: LD_INT 10
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: LIST
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PPUSH
23087: CALL_OW 72
23091: PUSH
23092: FOR_IN
23093: IFFALSE 23109
// SetSide ( i , 2 ) ;
23095: LD_VAR 0 1
23099: PPUSH
23100: LD_INT 2
23102: PPUSH
23103: CALL_OW 235
23107: GO 23092
23109: POP
23110: POP
// DialogueOff ;
23111: CALL_OW 7
// end ; end_of_file
23115: PPOPN 1
23117: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
23118: LD_EXP 17
23122: PUSH
23123: LD_EXP 5
23127: AND
23128: IFFALSE 23429
23130: GO 23132
23132: DISABLE
23133: LD_INT 0
23135: PPUSH
23136: PPUSH
23137: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
23138: LD_INT 1
23140: NEG
23141: PPUSH
23142: LD_INT 1
23144: NEG
23145: PPUSH
23146: LD_STRING alarm
23148: PPUSH
23149: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
23153: LD_INT 3
23155: PPUSH
23156: LD_INT 2
23158: PPUSH
23159: LD_INT 2
23161: PPUSH
23162: LD_INT 1
23164: PPUSH
23165: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23169: LD_INT 6
23171: PPUSH
23172: LD_INT 2
23174: PPUSH
23175: LD_INT 2
23177: PPUSH
23178: LD_INT 1
23180: PPUSH
23181: CALL_OW 80
// DialogueOn ;
23185: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
23189: LD_EXP 46
23193: PPUSH
23194: LD_STRING DH-Alarm-1
23196: PPUSH
23197: CALL_OW 88
// DialogueOff ;
23201: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
23205: LD_ADDR_VAR 0 2
23209: PUSH
23210: LD_INT 107
23212: PUSH
23213: LD_INT 39
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 143
23222: PUSH
23223: LD_INT 33
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 180
23232: PUSH
23233: LD_INT 115
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 96
23242: PUSH
23243: LD_INT 90
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 59
23252: PUSH
23253: LD_INT 52
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 16
23262: PUSH
23263: LD_INT 15
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 90
23272: PUSH
23273: LD_INT 120
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
23289: LD_ADDR_VAR 0 3
23293: PUSH
23294: LD_INT 22
23296: PUSH
23297: LD_INT 6
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 25
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PPUSH
23318: CALL_OW 69
23322: ST_TO_ADDR
// for i in tmp do
23323: LD_ADDR_VAR 0 1
23327: PUSH
23328: LD_VAR 0 3
23332: PUSH
23333: FOR_IN
23334: IFFALSE 23402
// begin ComExit ( i ) ;
23336: LD_VAR 0 1
23340: PPUSH
23341: CALL 67371 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
23345: LD_VAR 0 1
23349: PPUSH
23350: LD_VAR 0 2
23354: PUSH
23355: LD_VAR 0 1
23359: PUSH
23360: LD_INT 7
23362: MOD
23363: PUSH
23364: LD_INT 1
23366: PLUS
23367: ARRAY
23368: PUSH
23369: LD_INT 1
23371: ARRAY
23372: PPUSH
23373: LD_VAR 0 2
23377: PUSH
23378: LD_VAR 0 1
23382: PUSH
23383: LD_INT 7
23385: MOD
23386: PUSH
23387: LD_INT 1
23389: PLUS
23390: ARRAY
23391: PUSH
23392: LD_INT 2
23394: ARRAY
23395: PPUSH
23396: CALL_OW 174
// end ;
23400: GO 23333
23402: POP
23403: POP
// Explode ;
23404: CALL 23432 0 0
// wait ( 0 0$45 ) ;
23408: LD_INT 1575
23410: PPUSH
23411: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
23415: LD_VAR 0 3
23419: PPUSH
23420: LD_EXP 46
23424: PPUSH
23425: CALL_OW 175
// end ;
23429: PPOPN 3
23431: END
// export function Explode ; var i , x , y , j ; begin
23432: LD_INT 0
23434: PPUSH
23435: PPUSH
23436: PPUSH
23437: PPUSH
23438: PPUSH
// if hasExplosionsInFactory then
23439: LD_EXP 7
23443: IFFALSE 23463
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
23445: LD_ADDR_EXP 29
23449: PUSH
23450: LD_EXP 29
23454: PPUSH
23455: LD_INT 61
23457: PPUSH
23458: CALL 66973 0 2
23462: ST_TO_ADDR
// if explosivePlantedList then
23463: LD_EXP 29
23467: IFFALSE 23615
// begin for i in explosivePlantedList do
23469: LD_ADDR_VAR 0 2
23473: PUSH
23474: LD_EXP 29
23478: PUSH
23479: FOR_IN
23480: IFFALSE 23583
// begin x := GetX ( i ) ;
23482: LD_ADDR_VAR 0 3
23486: PUSH
23487: LD_VAR 0 2
23491: PPUSH
23492: CALL_OW 250
23496: ST_TO_ADDR
// y := GetY ( i ) ;
23497: LD_ADDR_VAR 0 4
23501: PUSH
23502: LD_VAR 0 2
23506: PPUSH
23507: CALL_OW 251
23511: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
23512: LD_ADDR_VAR 0 5
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: LD_INT 3
23522: PUSH
23523: LD_INT 5
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: PUSH
23531: FOR_IN
23532: IFFALSE 23579
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
23534: LD_VAR 0 3
23538: PPUSH
23539: LD_VAR 0 5
23543: PPUSH
23544: LD_INT 2
23546: PPUSH
23547: CALL_OW 272
23551: PPUSH
23552: LD_VAR 0 4
23556: PPUSH
23557: LD_VAR 0 5
23561: PPUSH
23562: LD_INT 2
23564: PPUSH
23565: CALL_OW 273
23569: PPUSH
23570: LD_INT 1
23572: PPUSH
23573: CALL_OW 453
23577: GO 23531
23579: POP
23580: POP
// end ;
23581: GO 23479
23583: POP
23584: POP
// Say ( Heike , DH-End-2 ) ;
23585: LD_EXP 46
23589: PPUSH
23590: LD_STRING DH-End-2
23592: PPUSH
23593: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
23597: LD_INT 175
23599: PUSH
23600: LD_EXP 29
23604: PPUSH
23605: CALL 31373 0 1
23609: MUL
23610: PPUSH
23611: CALL_OW 67
// end ; if not isAlarm then
23615: LD_EXP 17
23619: NOT
23620: IFFALSE 23630
// isAlarm := true ;
23622: LD_ADDR_EXP 17
23626: PUSH
23627: LD_INT 1
23629: ST_TO_ADDR
// end ;
23630: LD_VAR 0 1
23634: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
23635: LD_INT 22
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 21
23647: PUSH
23648: LD_INT 2
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 2
23657: PUSH
23658: LD_INT 101
23660: PUSH
23661: LD_INT 3
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 101
23670: PUSH
23671: LD_INT 6
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: LIST
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: LIST
23687: PPUSH
23688: CALL_OW 69
23692: IFFALSE 23705
23694: GO 23696
23696: DISABLE
// isAlarm := true ; end_of_file
23697: LD_ADDR_EXP 17
23701: PUSH
23702: LD_INT 1
23704: ST_TO_ADDR
23705: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
23706: LD_EXP 14
23710: PPUSH
23711: LD_INT 22
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PPUSH
23721: CALL_OW 72
23725: PUSH
23726: LD_INT 3
23728: GREATER
23729: PUSH
23730: LD_EXP 17
23734: NOT
23735: AND
23736: IFFALSE 27781
23738: GO 23740
23740: DISABLE
23741: LD_INT 0
23743: PPUSH
23744: PPUSH
23745: PPUSH
23746: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
23747: LD_EXP 66
23751: PPUSH
23752: LD_INT 155
23754: PPUSH
23755: LD_INT 68
23757: PPUSH
23758: LD_INT 0
23760: PPUSH
23761: CALL_OW 48
// wait ( 0 0$1 ) ;
23765: LD_INT 35
23767: PPUSH
23768: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23772: LD_INT 35
23774: PPUSH
23775: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23779: LD_EXP 66
23783: PPUSH
23784: CALL_OW 314
23788: NOT
23789: IFFALSE 23805
// ComMoveUnit ( ruDisturb , Heike ) ;
23791: LD_EXP 66
23795: PPUSH
23796: LD_EXP 46
23800: PPUSH
23801: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
23805: LD_EXP 46
23809: PPUSH
23810: LD_EXP 66
23814: PPUSH
23815: CALL_OW 296
23819: PUSH
23820: LD_INT 6
23822: LESS
23823: PUSH
23824: LD_EXP 66
23828: PPUSH
23829: CALL_OW 302
23833: AND
23834: IFFALSE 23772
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23836: LD_EXP 46
23840: PPUSH
23841: CALL_OW 257
23845: PUSH
23846: LD_INT 33
23848: NONEQUAL
23849: PUSH
23850: LD_EXP 14
23854: PPUSH
23855: LD_INT 22
23857: PUSH
23858: LD_INT 2
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 91
23867: PUSH
23868: LD_EXP 66
23872: PUSH
23873: LD_INT 8
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: LD_INT 25
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 25
23896: PUSH
23897: LD_INT 11
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 25
23906: PUSH
23907: LD_INT 32
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 25
23916: PUSH
23917: LD_INT 34
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: PPUSH
23936: CALL_OW 72
23940: OR
23941: IFFALSE 23951
// isAlarm := true ;
23943: LD_ADDR_EXP 17
23947: PUSH
23948: LD_INT 1
23950: ST_TO_ADDR
// if isAlarm then
23951: LD_EXP 17
23955: IFFALSE 23959
// exit ;
23957: GO 27781
// DialogueOn ;
23959: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23963: LD_EXP 66
23967: PPUSH
23968: LD_STRING DMcn-Interrupt-1
23970: PPUSH
23971: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23975: LD_EXP 66
23979: PPUSH
23980: LD_STRING DMcn-Interrupt-2
23982: PPUSH
23983: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
23987: LD_EXP 66
23991: PPUSH
23992: LD_STRING DMcn-Interrupt-3
23994: PPUSH
23995: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
23999: LD_EXP 46
24003: PPUSH
24004: LD_STRING DH-Interrupt-a-4
24006: PPUSH
24007: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
24011: LD_EXP 66
24015: PPUSH
24016: LD_STRING DMcn-Interrupt-a-5
24018: PPUSH
24019: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
24023: LD_EXP 46
24027: PPUSH
24028: LD_STRING DH-Interrupt-a-6
24030: PPUSH
24031: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
24035: LD_EXP 66
24039: PPUSH
24040: LD_STRING DMcn-Interrupt-a-7
24042: PPUSH
24043: CALL_OW 88
// DialogueOff ;
24047: CALL_OW 7
// hasMuchin := true ;
24051: LD_ADDR_EXP 30
24055: PUSH
24056: LD_INT 1
24058: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24059: LD_STRING MuchinInfo
24061: PPUSH
24062: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
24066: LD_STRING M2a
24068: PPUSH
24069: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
24073: LD_INT 105
24075: PPUSH
24076: LD_INT 55
24078: PPUSH
24079: CALL_OW 428
24083: PPUSH
24084: LD_INT 2
24086: PPUSH
24087: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
24091: LD_INT 115
24093: PPUSH
24094: LD_INT 65
24096: PPUSH
24097: CALL_OW 428
24101: PPUSH
24102: LD_INT 2
24104: PPUSH
24105: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
24109: LD_INT 109
24111: PPUSH
24112: LD_INT 59
24114: PPUSH
24115: LD_INT 2
24117: PPUSH
24118: LD_INT 10
24120: NEG
24121: PPUSH
24122: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
24126: LD_INT 109
24128: PPUSH
24129: LD_INT 59
24131: PPUSH
24132: CALL_OW 84
// wait ( 0 0$2 ) ;
24136: LD_INT 70
24138: PPUSH
24139: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
24143: LD_INT 109
24145: PPUSH
24146: LD_INT 59
24148: PPUSH
24149: LD_INT 2
24151: PPUSH
24152: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
24156: LD_INT 35
24158: PPUSH
24159: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24163: LD_EXP 66
24167: PPUSH
24168: LD_EXP 46
24172: PPUSH
24173: CALL_OW 296
24177: PUSH
24178: LD_INT 6
24180: GREATER
24181: IFFALSE 24197
// ComMoveUnit ( ruDisturb , Heike ) ;
24183: LD_EXP 66
24187: PPUSH
24188: LD_EXP 46
24192: PPUSH
24193: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24197: LD_EXP 46
24201: PPUSH
24202: CALL_OW 257
24206: PUSH
24207: LD_INT 33
24209: NONEQUAL
24210: PUSH
24211: LD_EXP 14
24215: PPUSH
24216: LD_INT 22
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 91
24228: PUSH
24229: LD_EXP 66
24233: PUSH
24234: LD_INT 8
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 2
24244: PUSH
24245: LD_INT 25
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 25
24257: PUSH
24258: LD_INT 11
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 25
24267: PUSH
24268: LD_INT 32
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 25
24277: PUSH
24278: LD_INT 34
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: PPUSH
24297: CALL_OW 72
24301: OR
24302: IFFALSE 24314
// begin isAlarm := true ;
24304: LD_ADDR_EXP 17
24308: PUSH
24309: LD_INT 1
24311: ST_TO_ADDR
// exit ;
24312: GO 27781
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
24314: LD_INT 105
24316: PPUSH
24317: LD_INT 55
24319: PPUSH
24320: CALL_OW 428
24324: NOT
24325: PUSH
24326: LD_INT 115
24328: PPUSH
24329: LD_INT 65
24331: PPUSH
24332: CALL_OW 428
24336: NOT
24337: OR
24338: IFFALSE 24350
// begin isAlarm := true ;
24340: LD_ADDR_EXP 17
24344: PUSH
24345: LD_INT 1
24347: ST_TO_ADDR
// exit ;
24348: GO 27781
// end ; until not BuildingsInProgress ( 2 ) ;
24350: LD_INT 2
24352: PPUSH
24353: CALL_OW 345
24357: NOT
24358: IFFALSE 24156
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
24360: LD_INT 105
24362: PPUSH
24363: LD_INT 55
24365: PPUSH
24366: CALL_OW 428
24370: PPUSH
24371: LD_INT 3
24373: PPUSH
24374: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
24378: LD_INT 115
24380: PPUSH
24381: LD_INT 65
24383: PPUSH
24384: CALL_OW 428
24388: PPUSH
24389: LD_INT 3
24391: PPUSH
24392: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
24396: LD_STRING M2a-out
24398: PPUSH
24399: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
24403: LD_EXP 66
24407: PPUSH
24408: LD_INT 2
24410: PPUSH
24411: CALL_OW 120
// wait ( 0 0$3 ) ;
24415: LD_INT 105
24417: PPUSH
24418: CALL_OW 67
// hasMuchin := false ;
24422: LD_ADDR_EXP 30
24426: PUSH
24427: LD_INT 0
24429: ST_TO_ADDR
// wait ( 2 2$00 ) ;
24430: LD_INT 4200
24432: PPUSH
24433: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24437: LD_INT 35
24439: PPUSH
24440: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24444: LD_EXP 66
24448: PPUSH
24449: CALL_OW 314
24453: NOT
24454: IFFALSE 24470
// ComMoveUnit ( ruDisturb , Heike ) ;
24456: LD_EXP 66
24460: PPUSH
24461: LD_EXP 46
24465: PPUSH
24466: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24470: LD_EXP 46
24474: PPUSH
24475: LD_EXP 66
24479: PPUSH
24480: CALL_OW 296
24484: PUSH
24485: LD_INT 6
24487: LESS
24488: PUSH
24489: LD_EXP 66
24493: PPUSH
24494: CALL_OW 302
24498: AND
24499: IFFALSE 24437
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24501: LD_EXP 46
24505: PPUSH
24506: CALL_OW 257
24510: PUSH
24511: LD_INT 33
24513: NONEQUAL
24514: PUSH
24515: LD_EXP 14
24519: PPUSH
24520: LD_INT 22
24522: PUSH
24523: LD_INT 2
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 91
24532: PUSH
24533: LD_EXP 66
24537: PUSH
24538: LD_INT 8
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 2
24548: PUSH
24549: LD_INT 25
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 25
24561: PUSH
24562: LD_INT 11
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 25
24571: PUSH
24572: LD_INT 32
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 25
24581: PUSH
24582: LD_INT 34
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: LIST
24600: PPUSH
24601: CALL_OW 72
24605: OR
24606: IFFALSE 24616
// isAlarm := true ;
24608: LD_ADDR_EXP 17
24612: PUSH
24613: LD_INT 1
24615: ST_TO_ADDR
// if isAlarm then
24616: LD_EXP 17
24620: IFFALSE 24624
// exit ;
24622: GO 27781
// DialogueOn ;
24624: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24628: LD_EXP 66
24632: PPUSH
24633: LD_STRING DMcn-Interrupt-1
24635: PPUSH
24636: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24640: LD_EXP 66
24644: PPUSH
24645: LD_STRING DMcn-Interrupt-2
24647: PPUSH
24648: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
24652: LD_INT 176
24654: PPUSH
24655: LD_INT 54
24657: PPUSH
24658: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
24662: LD_INT 176
24664: PPUSH
24665: LD_INT 54
24667: PPUSH
24668: LD_INT 2
24670: PPUSH
24671: LD_INT 6
24673: NEG
24674: PPUSH
24675: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
24679: LD_INT 10
24681: PPUSH
24682: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
24686: LD_EXP 66
24690: PPUSH
24691: LD_STRING DMcn-Interrupt-b-3
24693: PPUSH
24694: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
24698: LD_EXP 46
24702: PPUSH
24703: LD_STRING DH-Interrupt-b-4
24705: PPUSH
24706: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
24710: LD_EXP 66
24714: PPUSH
24715: LD_STRING DMcn-Interrupt-b-5
24717: PPUSH
24718: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
24722: LD_EXP 46
24726: PPUSH
24727: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
24731: LD_INT 176
24733: PPUSH
24734: LD_INT 54
24736: PPUSH
24737: LD_INT 2
24739: PPUSH
24740: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
24744: LD_EXP 66
24748: PPUSH
24749: LD_STRING DMcn-Interrupt-b-6
24751: PPUSH
24752: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
24756: LD_EXP 46
24760: PPUSH
24761: LD_STRING DH-Interrupt-b-7
24763: PPUSH
24764: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
24768: LD_EXP 66
24772: PPUSH
24773: LD_STRING DMcn-Interrupt-b-8
24775: PPUSH
24776: CALL_OW 88
// DialogueOff ;
24780: CALL_OW 7
// Query ( MuchinInfo ) ;
24784: LD_STRING MuchinInfo
24786: PPUSH
24787: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
24791: LD_STRING M2b
24793: PPUSH
24794: CALL_OW 337
// hasMuchin := true ;
24798: LD_ADDR_EXP 30
24802: PUSH
24803: LD_INT 1
24805: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24806: LD_INT 35
24808: PPUSH
24809: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24813: LD_EXP 66
24817: PPUSH
24818: LD_EXP 46
24822: PPUSH
24823: CALL_OW 296
24827: PUSH
24828: LD_INT 6
24830: GREATER
24831: IFFALSE 24847
// ComMoveUnit ( ruDisturb , Heike ) ;
24833: LD_EXP 66
24837: PPUSH
24838: LD_EXP 46
24842: PPUSH
24843: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24847: LD_EXP 46
24851: PPUSH
24852: CALL_OW 257
24856: PUSH
24857: LD_INT 33
24859: NONEQUAL
24860: PUSH
24861: LD_EXP 14
24865: PPUSH
24866: LD_INT 22
24868: PUSH
24869: LD_INT 2
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 91
24878: PUSH
24879: LD_EXP 66
24883: PUSH
24884: LD_INT 8
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: LD_INT 25
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 25
24907: PUSH
24908: LD_INT 11
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 25
24917: PUSH
24918: LD_INT 32
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 25
24927: PUSH
24928: LD_INT 34
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: LIST
24946: PPUSH
24947: CALL_OW 72
24951: OR
24952: IFFALSE 24964
// begin isAlarm := true ;
24954: LD_ADDR_EXP 17
24958: PUSH
24959: LD_INT 1
24961: ST_TO_ADDR
// exit ;
24962: GO 27781
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
24964: LD_EXP 46
24968: PPUSH
24969: LD_INT 61
24971: PPUSH
24972: CALL_OW 296
24976: PUSH
24977: LD_INT 4
24979: LESS
24980: IFFALSE 24806
// InGameOn ;
24982: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
24986: LD_INT 173
24988: PPUSH
24989: LD_INT 54
24991: PPUSH
24992: LD_INT 2
24994: PPUSH
24995: LD_INT 8
24997: NEG
24998: PPUSH
24999: CALL_OW 330
// SetSide ( Heike , 3 ) ;
25003: LD_EXP 46
25007: PPUSH
25008: LD_INT 3
25010: PPUSH
25011: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
25015: LD_EXP 46
25019: PPUSH
25020: LD_INT 61
25022: PPUSH
25023: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
25027: LD_EXP 66
25031: PPUSH
25032: LD_INT 61
25034: PPUSH
25035: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
25039: LD_EXP 53
25043: PUSH
25044: LD_EXP 14
25048: IN
25049: PUSH
25050: LD_EXP 53
25054: PPUSH
25055: LD_INT 61
25057: PPUSH
25058: CALL_OW 296
25062: PUSH
25063: LD_INT 12
25065: LESS
25066: AND
25067: IFFALSE 25111
// begin SetSide ( Markov , 3 ) ;
25069: LD_EXP 53
25073: PPUSH
25074: LD_INT 3
25076: PPUSH
25077: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
25081: LD_EXP 53
25085: PPUSH
25086: LD_INT 61
25088: PPUSH
25089: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
25093: LD_INT 35
25095: PPUSH
25096: CALL_OW 67
// until IsInUnit ( Markov ) ;
25100: LD_EXP 53
25104: PPUSH
25105: CALL_OW 310
25109: IFFALSE 25093
// end ; repeat wait ( 0 0$1 ) ;
25111: LD_INT 35
25113: PPUSH
25114: CALL_OW 67
// until IsInUnit ( Heike ) ;
25118: LD_EXP 46
25122: PPUSH
25123: CALL_OW 310
25127: IFFALSE 25111
// SetClass ( Heike , class_mechanic ) ;
25129: LD_EXP 46
25133: PPUSH
25134: LD_INT 3
25136: PPUSH
25137: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
25141: LD_INT 61
25143: PPUSH
25144: LD_INT 21
25146: PPUSH
25147: LD_INT 3
25149: PPUSH
25150: LD_INT 3
25152: PPUSH
25153: LD_INT 43
25155: PPUSH
25156: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
25160: LD_EXP 31
25164: PUSH
25165: LD_EXP 53
25169: PUSH
25170: LD_EXP 14
25174: IN
25175: PUSH
25176: LD_EXP 53
25180: PPUSH
25181: CALL_OW 310
25185: PUSH
25186: LD_INT 61
25188: EQUAL
25189: OR
25190: AND
25191: IFFALSE 25681
// begin wait ( 0 0$5 ) ;
25193: LD_INT 175
25195: PPUSH
25196: CALL_OW 67
// SetSide ( Heike , 2 ) ;
25200: LD_EXP 46
25204: PPUSH
25205: LD_INT 2
25207: PPUSH
25208: CALL_OW 235
// SetSide ( Markov , 2 ) ;
25212: LD_EXP 53
25216: PPUSH
25217: LD_INT 2
25219: PPUSH
25220: CALL_OW 235
// if not Markov in heikeSquad then
25224: LD_EXP 53
25228: PUSH
25229: LD_EXP 14
25233: IN
25234: NOT
25235: IFFALSE 25257
// heikeSquad := Join ( heikeSquad , Markov ) ;
25237: LD_ADDR_EXP 14
25241: PUSH
25242: LD_EXP 14
25246: PPUSH
25247: LD_EXP 53
25251: PPUSH
25252: CALL 66973 0 2
25256: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
25257: LD_EXP 53
25261: PPUSH
25262: LD_STRING DMar-Factory-1
25264: PPUSH
25265: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
25269: LD_INT 61
25271: PPUSH
25272: LD_INT 99
25274: PPUSH
25275: CALL_OW 329
// game_speed := 4 ;
25279: LD_ADDR_OWVAR 65
25283: PUSH
25284: LD_INT 4
25286: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
25287: LD_EXP 66
25291: PPUSH
25292: CALL_OW 122
// ComExitBuilding ( Markov ) ;
25296: LD_EXP 53
25300: PPUSH
25301: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
25305: LD_EXP 66
25309: PPUSH
25310: LD_INT 171
25312: PPUSH
25313: LD_INT 51
25315: PPUSH
25316: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
25320: LD_EXP 53
25324: PPUSH
25325: LD_INT 167
25327: PPUSH
25328: LD_INT 50
25330: PPUSH
25331: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
25335: LD_EXP 53
25339: PPUSH
25340: LD_EXP 66
25344: PPUSH
25345: CALL_OW 179
// wait ( 0 0$5 ) ;
25349: LD_INT 175
25351: PPUSH
25352: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
25356: LD_EXP 53
25360: PPUSH
25361: LD_STRING DMar-Factory-2
25363: PPUSH
25364: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
25368: LD_ADDR_VAR 0 2
25372: PUSH
25373: LD_INT 22
25375: PUSH
25376: LD_INT 3
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 33
25385: PUSH
25386: LD_INT 3
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PPUSH
25397: CALL_OW 69
25401: PUSH
25402: LD_INT 1
25404: ARRAY
25405: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
25406: LD_EXP 66
25410: PPUSH
25411: LD_VAR 0 2
25415: PPUSH
25416: CALL_OW 119
// game_speed := 4 ;
25420: LD_ADDR_OWVAR 65
25424: PUSH
25425: LD_INT 4
25427: ST_TO_ADDR
// async ;
25428: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
25429: LD_EXP 66
25433: PPUSH
25434: LD_STRING DMcn-Factory-3
25436: PPUSH
25437: CALL_OW 88
// wait ( 0 0$0.9 ) ;
25441: LD_INT 32
25443: PPUSH
25444: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
25448: LD_VAR 0 2
25452: PPUSH
25453: LD_EXP 66
25457: PPUSH
25458: CALL_OW 115
// sync ;
25462: SYNC
// wait ( 0 0$1 ) ;
25463: LD_INT 35
25465: PPUSH
25466: CALL_OW 67
// KillUnit ( ruDisturb ) ;
25470: LD_EXP 66
25474: PPUSH
25475: CALL_OW 66
// SetSide ( veh , 7 ) ;
25479: LD_VAR 0 2
25483: PPUSH
25484: LD_INT 7
25486: PPUSH
25487: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
25491: LD_VAR 0 2
25495: PPUSH
25496: LD_INT 84
25498: PPUSH
25499: LD_INT 38
25501: PPUSH
25502: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
25506: LD_EXP 67
25510: PUSH
25511: LD_INT 1
25513: ARRAY
25514: PPUSH
25515: CALL_OW 258
25519: PUSH
25520: LD_INT 1
25522: EQUAL
25523: IFFALSE 25543
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
25525: LD_EXP 67
25529: PUSH
25530: LD_INT 1
25532: ARRAY
25533: PPUSH
25534: LD_STRING DRum-Factory-4
25536: PPUSH
25537: CALL_OW 88
25541: GO 25559
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
25543: LD_EXP 67
25547: PUSH
25548: LD_INT 1
25550: ARRAY
25551: PPUSH
25552: LD_STRING DRuf-Factory-4
25554: PPUSH
25555: CALL_OW 88
// wait ( 0 0$1 ) ;
25559: LD_INT 35
25561: PPUSH
25562: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
25566: LD_EXP 67
25570: PPUSH
25571: LD_INT 26
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PPUSH
25581: CALL_OW 72
25585: PUSH
25586: LD_INT 1
25588: ARRAY
25589: PPUSH
25590: LD_STRING DRum-Factory-6
25592: PPUSH
25593: CALL_OW 88
// wait ( 0 0$2 ) ;
25597: LD_INT 70
25599: PPUSH
25600: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
25604: LD_EXP 46
25608: PPUSH
25609: LD_INT 33
25611: PPUSH
25612: CALL_OW 336
// ComExitBuilding ( Heike ) ;
25616: LD_EXP 46
25620: PPUSH
25621: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25625: LD_EXP 46
25629: PPUSH
25630: LD_INT 168
25632: PPUSH
25633: LD_INT 54
25635: PPUSH
25636: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25640: LD_INT 173
25642: PPUSH
25643: LD_INT 54
25645: PPUSH
25646: LD_INT 2
25648: PPUSH
25649: CALL_OW 331
// InGameOff ;
25653: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
25657: LD_STRING M2b-out
25659: PPUSH
25660: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
25664: LD_STRING ACH_TOY
25666: PPUSH
25667: CALL_OW 543
// hasMuchin := false ;
25671: LD_ADDR_EXP 30
25675: PUSH
25676: LD_INT 0
25678: ST_TO_ADDR
// exit ;
25679: GO 27781
// end ; wait ( 0 0$5 ) ;
25681: LD_INT 175
25683: PPUSH
25684: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
25688: LD_INT 61
25690: PPUSH
25691: LD_INT 99
25693: PPUSH
25694: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
25698: LD_EXP 53
25702: PUSH
25703: LD_EXP 14
25707: IN
25708: PUSH
25709: LD_EXP 53
25713: PPUSH
25714: CALL_OW 255
25718: PUSH
25719: LD_INT 3
25721: EQUAL
25722: AND
25723: IFFALSE 25746
// begin SetSide ( Markov , 2 ) ;
25725: LD_EXP 53
25729: PPUSH
25730: LD_INT 2
25732: PPUSH
25733: CALL_OW 235
// ComExitBuilding ( Markov ) ;
25737: LD_EXP 53
25741: PPUSH
25742: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
25746: LD_EXP 46
25750: PPUSH
25751: LD_INT 2
25753: PPUSH
25754: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
25758: LD_EXP 46
25762: PPUSH
25763: LD_INT 33
25765: PPUSH
25766: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
25770: LD_EXP 66
25774: PPUSH
25775: CALL_OW 122
// ComExitBuilding ( Heike ) ;
25779: LD_EXP 46
25783: PPUSH
25784: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25788: LD_EXP 46
25792: PPUSH
25793: LD_INT 168
25795: PPUSH
25796: LD_INT 54
25798: PPUSH
25799: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25803: LD_INT 173
25805: PPUSH
25806: LD_INT 54
25808: PPUSH
25809: LD_INT 2
25811: PPUSH
25812: CALL_OW 331
// InGameOff ;
25816: CALL_OW 9
// wait ( 3 ) ;
25820: LD_INT 3
25822: PPUSH
25823: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
25827: LD_EXP 66
25831: PPUSH
25832: LD_INT 2
25834: PPUSH
25835: CALL_OW 120
// wait ( 0 0$3 ) ;
25839: LD_INT 105
25841: PPUSH
25842: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
25846: LD_STRING M2b-out
25848: PPUSH
25849: CALL_OW 337
// hasMuchin := false ;
25853: LD_ADDR_EXP 30
25857: PUSH
25858: LD_INT 0
25860: ST_TO_ADDR
// wait ( 2 2$00 ) ;
25861: LD_INT 4200
25863: PPUSH
25864: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25868: LD_INT 35
25870: PPUSH
25871: CALL_OW 67
// if not HasTask ( ruDisturb ) then
25875: LD_EXP 66
25879: PPUSH
25880: CALL_OW 314
25884: NOT
25885: IFFALSE 25901
// ComMoveUnit ( ruDisturb , Heike ) ;
25887: LD_EXP 66
25891: PPUSH
25892: LD_EXP 46
25896: PPUSH
25897: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
25901: LD_EXP 46
25905: PPUSH
25906: LD_EXP 66
25910: PPUSH
25911: CALL_OW 296
25915: PUSH
25916: LD_INT 2
25918: LESS
25919: PUSH
25920: LD_EXP 66
25924: PPUSH
25925: CALL_OW 302
25929: AND
25930: IFFALSE 25868
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25932: LD_EXP 46
25936: PPUSH
25937: CALL_OW 257
25941: PUSH
25942: LD_INT 33
25944: NONEQUAL
25945: PUSH
25946: LD_EXP 14
25950: PPUSH
25951: LD_INT 22
25953: PUSH
25954: LD_INT 2
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 91
25963: PUSH
25964: LD_EXP 66
25968: PUSH
25969: LD_INT 8
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: LD_INT 25
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 25
25992: PUSH
25993: LD_INT 11
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 25
26002: PUSH
26003: LD_INT 32
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 25
26012: PUSH
26013: LD_INT 34
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: LIST
26031: PPUSH
26032: CALL_OW 72
26036: OR
26037: IFFALSE 26047
// isAlarm := true ;
26039: LD_ADDR_EXP 17
26043: PUSH
26044: LD_INT 1
26046: ST_TO_ADDR
// if isAlarm then
26047: LD_EXP 17
26051: IFFALSE 26055
// exit ;
26053: GO 27781
// ComTurnUnit ( Heike , ruDisturb ) ;
26055: LD_EXP 46
26059: PPUSH
26060: LD_EXP 66
26064: PPUSH
26065: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
26069: LD_EXP 66
26073: PPUSH
26074: LD_EXP 46
26078: PPUSH
26079: CALL_OW 119
// wait ( 3 ) ;
26083: LD_INT 3
26085: PPUSH
26086: CALL_OW 67
// for i := 1 to 3 do
26090: LD_ADDR_VAR 0 1
26094: PUSH
26095: DOUBLE
26096: LD_INT 1
26098: DEC
26099: ST_TO_ADDR
26100: LD_INT 3
26102: PUSH
26103: FOR_TO
26104: IFFALSE 26121
// CreateCratesArea ( 5 , cratesArea , false ) ;
26106: LD_INT 5
26108: PPUSH
26109: LD_INT 58
26111: PPUSH
26112: LD_INT 0
26114: PPUSH
26115: CALL_OW 55
26119: GO 26103
26121: POP
26122: POP
// uc_side := 3 ;
26123: LD_ADDR_OWVAR 20
26127: PUSH
26128: LD_INT 3
26130: ST_TO_ADDR
// uc_nation := nation_russian ;
26131: LD_ADDR_OWVAR 21
26135: PUSH
26136: LD_INT 3
26138: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
26139: LD_INT 21
26141: PPUSH
26142: LD_INT 3
26144: PPUSH
26145: LD_INT 1
26147: PPUSH
26148: LD_INT 51
26150: PPUSH
26151: LD_INT 100
26153: PPUSH
26154: CALL 34111 0 5
// veh := CreateVehicle ;
26158: LD_ADDR_VAR 0 2
26162: PUSH
26163: CALL_OW 45
26167: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
26168: LD_VAR 0 2
26172: PPUSH
26173: LD_INT 104
26175: PPUSH
26176: LD_INT 41
26178: PPUSH
26179: LD_INT 3
26181: PPUSH
26182: LD_INT 0
26184: PPUSH
26185: CALL 69113 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
26189: LD_VAR 0 2
26193: PPUSH
26194: LD_INT 1
26196: PPUSH
26197: LD_INT 100
26199: PPUSH
26200: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
26204: CALL_OW 44
26208: PPUSH
26209: LD_VAR 0 2
26213: PPUSH
26214: CALL_OW 52
// DialogueOn ;
26218: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
26222: LD_EXP 66
26226: PPUSH
26227: LD_STRING DMcn-Interrupt-1
26229: PPUSH
26230: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
26234: LD_EXP 66
26238: PPUSH
26239: LD_STRING DMcn-Interrupt-2
26241: PPUSH
26242: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
26246: LD_EXP 66
26250: PPUSH
26251: LD_STRING DMcn-Interrupt-c-3
26253: PPUSH
26254: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
26258: LD_INT 101
26260: PPUSH
26261: LD_INT 38
26263: PPUSH
26264: LD_INT 2
26266: PPUSH
26267: LD_INT 10
26269: NEG
26270: PPUSH
26271: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
26275: LD_INT 101
26277: PPUSH
26278: LD_INT 38
26280: PPUSH
26281: CALL_OW 84
// wait ( 0 0$2 ) ;
26285: LD_INT 70
26287: PPUSH
26288: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
26292: LD_INT 101
26294: PPUSH
26295: LD_INT 38
26297: PPUSH
26298: LD_INT 2
26300: PPUSH
26301: CALL_OW 331
// RemoveUnit ( veh ) ;
26305: LD_VAR 0 2
26309: PPUSH
26310: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
26314: LD_EXP 66
26318: PPUSH
26319: LD_STRING DMcn-Interrupt-c-4
26321: PPUSH
26322: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
26326: LD_EXP 46
26330: PPUSH
26331: LD_STRING DH-Interrupt-c-5
26333: PPUSH
26334: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
26338: LD_EXP 66
26342: PPUSH
26343: LD_STRING DMcn-Interrupt-c-6
26345: PPUSH
26346: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
26350: LD_EXP 46
26354: PPUSH
26355: LD_STRING DH-Interrupt-c-7
26357: PPUSH
26358: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
26362: LD_EXP 66
26366: PPUSH
26367: LD_STRING DMcn-Interrupt-c-8
26369: PPUSH
26370: CALL_OW 88
// DialogueOff ;
26374: CALL_OW 7
// hasMuchin := true ;
26378: LD_ADDR_EXP 30
26382: PUSH
26383: LD_INT 1
26385: ST_TO_ADDR
// Query ( MuchinInfo ) ;
26386: LD_STRING MuchinInfo
26388: PPUSH
26389: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
26393: LD_STRING M2c
26395: PPUSH
26396: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
26400: LD_INT 35
26402: PPUSH
26403: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
26407: LD_EXP 66
26411: PPUSH
26412: LD_EXP 46
26416: PPUSH
26417: CALL_OW 296
26421: PUSH
26422: LD_INT 6
26424: GREATER
26425: IFFALSE 26441
// ComMoveUnit ( ruDisturb , Heike ) ;
26427: LD_EXP 66
26431: PPUSH
26432: LD_EXP 46
26436: PPUSH
26437: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26441: LD_EXP 46
26445: PPUSH
26446: CALL_OW 257
26450: PUSH
26451: LD_INT 33
26453: NONEQUAL
26454: PUSH
26455: LD_EXP 14
26459: PPUSH
26460: LD_INT 22
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 91
26472: PUSH
26473: LD_EXP 66
26477: PUSH
26478: LD_INT 8
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: LD_INT 25
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 25
26501: PUSH
26502: LD_INT 11
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 25
26511: PUSH
26512: LD_INT 32
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 25
26521: PUSH
26522: LD_INT 34
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: LIST
26540: PPUSH
26541: CALL_OW 72
26545: OR
26546: IFFALSE 26558
// begin isAlarm := true ;
26548: LD_ADDR_EXP 17
26552: PUSH
26553: LD_INT 1
26555: ST_TO_ADDR
// exit ;
26556: GO 27781
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
26558: LD_EXP 14
26562: PUSH
26563: LD_EXP 46
26567: UNION
26568: PPUSH
26569: LD_INT 92
26571: PUSH
26572: LD_INT 100
26574: PUSH
26575: LD_INT 37
26577: PUSH
26578: LD_INT 6
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: PPUSH
26587: CALL_OW 72
26591: IFFALSE 26400
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
26593: LD_INT 100
26595: PPUSH
26596: LD_INT 37
26598: PPUSH
26599: LD_INT 3
26601: PPUSH
26602: LD_INT 10
26604: NEG
26605: PPUSH
26606: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
26610: LD_ADDR_VAR 0 3
26614: PUSH
26615: LD_EXP 14
26619: PUSH
26620: LD_EXP 46
26624: UNION
26625: PPUSH
26626: LD_INT 25
26628: PUSH
26629: LD_INT 33
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 91
26638: PUSH
26639: LD_INT 6
26641: PUSH
26642: LD_INT 12
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: LIST
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PPUSH
26654: CALL_OW 72
26658: ST_TO_ADDR
// for i in tmp do
26659: LD_ADDR_VAR 0 1
26663: PUSH
26664: LD_VAR 0 3
26668: PUSH
26669: FOR_IN
26670: IFFALSE 26701
// begin SetSide ( i , 3 ) ;
26672: LD_VAR 0 1
26676: PPUSH
26677: LD_INT 3
26679: PPUSH
26680: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
26684: LD_VAR 0 1
26688: PPUSH
26689: LD_INT 101
26691: PPUSH
26692: LD_INT 38
26694: PPUSH
26695: CALL_OW 111
// end ;
26699: GO 26669
26701: POP
26702: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
26703: LD_EXP 66
26707: PPUSH
26708: LD_INT 104
26710: PPUSH
26711: LD_INT 37
26713: PPUSH
26714: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26718: LD_EXP 66
26722: PPUSH
26723: LD_EXP 46
26727: PPUSH
26728: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
26732: LD_INT 35
26734: PPUSH
26735: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
26739: LD_ADDR_VAR 0 4
26743: PUSH
26744: LD_INT 58
26746: PPUSH
26747: CALL_OW 435
26751: ST_TO_ADDR
// for i in tmp do
26752: LD_ADDR_VAR 0 1
26756: PUSH
26757: LD_VAR 0 3
26761: PUSH
26762: FOR_IN
26763: IFFALSE 26806
// if not HasTask ( i ) then
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 314
26774: NOT
26775: IFFALSE 26804
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
26777: LD_VAR 0 1
26781: PPUSH
26782: LD_VAR 0 4
26786: PUSH
26787: LD_INT 1
26789: ARRAY
26790: PPUSH
26791: LD_VAR 0 4
26795: PUSH
26796: LD_INT 2
26798: ARRAY
26799: PPUSH
26800: CALL_OW 117
26804: GO 26762
26806: POP
26807: POP
// until not cr ;
26808: LD_VAR 0 4
26812: NOT
26813: IFFALSE 26732
// wait ( 0 0$2 ) ;
26815: LD_INT 70
26817: PPUSH
26818: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
26822: LD_INT 100
26824: PPUSH
26825: LD_INT 37
26827: PPUSH
26828: LD_INT 3
26830: PPUSH
26831: CALL_OW 331
// for i in tmp do
26835: LD_ADDR_VAR 0 1
26839: PUSH
26840: LD_VAR 0 3
26844: PUSH
26845: FOR_IN
26846: IFFALSE 26862
// SetSide ( i , 2 ) ;
26848: LD_VAR 0 1
26852: PPUSH
26853: LD_INT 2
26855: PPUSH
26856: CALL_OW 235
26860: GO 26845
26862: POP
26863: POP
// if Kaia in tmp then
26864: LD_EXP 51
26868: PUSH
26869: LD_VAR 0 3
26873: IN
26874: IFFALSE 27175
// begin InGameOn ;
26876: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
26880: LD_EXP 51
26884: PPUSH
26885: LD_EXP 66
26889: PPUSH
26890: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
26894: LD_EXP 66
26898: PPUSH
26899: LD_EXP 51
26903: PPUSH
26904: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
26908: LD_EXP 51
26912: PPUSH
26913: LD_EXP 66
26917: PPUSH
26918: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
26922: LD_EXP 51
26926: PPUSH
26927: LD_STRING DK-Assassin-1
26929: PPUSH
26930: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
26934: LD_EXP 66
26938: PPUSH
26939: LD_STRING DMcn-Assassin-2
26941: PPUSH
26942: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
26946: LD_EXP 51
26950: PPUSH
26951: LD_STRING DK-Assassin-3
26953: PPUSH
26954: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
26958: LD_EXP 66
26962: PPUSH
26963: LD_STRING DMcn-Assassin-4
26965: PPUSH
26966: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
26970: LD_EXP 51
26974: PPUSH
26975: LD_STRING DK-Assassin-5
26977: PPUSH
26978: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
26982: LD_EXP 66
26986: PPUSH
26987: LD_STRING DMcn-Assassin-6
26989: PPUSH
26990: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
26994: LD_EXP 51
26998: PPUSH
26999: LD_INT 3
27001: PPUSH
27002: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
27006: LD_EXP 51
27010: PUSH
27011: LD_EXP 66
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PPUSH
27020: LD_INT 6
27022: PPUSH
27023: CALL_OW 120
// wait ( 0 0$5 ) ;
27027: LD_INT 175
27029: PPUSH
27030: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
27034: LD_EXP 51
27038: PPUSH
27039: LD_STRING DK-Assassin-7
27041: PPUSH
27042: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
27046: LD_EXP 66
27050: PPUSH
27051: LD_STRING DMcn-Assassin-8
27053: PPUSH
27054: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27058: LD_INT 10
27060: PPUSH
27061: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
27065: LD_EXP 51
27069: PPUSH
27070: LD_STRING DK-Assassin-9
27072: PPUSH
27073: CALL_OW 88
// wait ( 0 0$2 ) ;
27077: LD_INT 70
27079: PPUSH
27080: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
27084: LD_EXP 51
27088: PPUSH
27089: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
27093: LD_EXP 66
27097: PPUSH
27098: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
27102: LD_EXP 51
27106: PPUSH
27107: LD_INT 2
27109: PPUSH
27110: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
27114: LD_EXP 51
27118: PPUSH
27119: LD_EXP 46
27123: PPUSH
27124: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
27128: LD_EXP 51
27132: PPUSH
27133: LD_STRING DK-Assasin-10
27135: PPUSH
27136: CALL_OW 88
// InGameOff ;
27140: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
27144: LD_STRING ACH_POKER
27146: PPUSH
27147: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
27151: LD_STRING M2c-out
27153: PPUSH
27154: CALL_OW 337
// wait ( 0 0$3 ) ;
27158: LD_INT 105
27160: PPUSH
27161: CALL_OW 67
// hasMuchin := false ;
27165: LD_ADDR_EXP 30
27169: PUSH
27170: LD_INT 0
27172: ST_TO_ADDR
// exit ;
27173: GO 27781
// end ; ChangeMissionObjectives ( M2c-out ) ;
27175: LD_STRING M2c-out
27177: PPUSH
27178: CALL_OW 337
// meetWithMuchin := true ;
27182: LD_ADDR_EXP 44
27186: PUSH
27187: LD_INT 1
27189: ST_TO_ADDR
// InGameOn ;
27190: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
27194: LD_EXP 66
27198: PPUSH
27199: LD_STRING DMcn-Fail-1
27201: PPUSH
27202: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
27206: LD_VAR 0 3
27210: PPUSH
27211: LD_INT 114
27213: PPUSH
27214: LD_INT 17
27216: PPUSH
27217: CALL_OW 111
// wait ( 0 0$1 ) ;
27221: LD_INT 35
27223: PPUSH
27224: CALL_OW 67
// async ;
27228: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27229: LD_EXP 66
27233: PPUSH
27234: LD_EXP 46
27238: PPUSH
27239: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
27243: LD_EXP 66
27247: PPUSH
27248: LD_STRING DMcn-Fail-2
27250: PPUSH
27251: CALL_OW 88
// ComStop ( Heike ) ;
27255: LD_EXP 46
27259: PPUSH
27260: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
27264: LD_EXP 46
27268: PPUSH
27269: LD_EXP 66
27273: PPUSH
27274: CALL_OW 179
// sync ;
27278: SYNC
// Say ( Heike , DH-Fail-3 ) ;
27279: LD_EXP 46
27283: PPUSH
27284: LD_STRING DH-Fail-3
27286: PPUSH
27287: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
27291: LD_EXP 66
27295: PPUSH
27296: LD_STRING DMcn-Fail-4
27298: PPUSH
27299: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
27303: LD_EXP 46
27307: PUSH
27308: LD_EXP 66
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PPUSH
27317: LD_INT 41
27319: PPUSH
27320: LD_INT 19
27322: PPUSH
27323: CALL_OW 111
// wait ( 0 0$2 ) ;
27327: LD_INT 70
27329: PPUSH
27330: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
27334: LD_EXP 66
27338: PPUSH
27339: LD_INT 40
27341: PPUSH
27342: LD_INT 19
27344: PPUSH
27345: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
27349: LD_EXP 46
27353: PPUSH
27354: LD_INT 43
27356: PPUSH
27357: LD_INT 21
27359: PPUSH
27360: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27364: LD_EXP 66
27368: PPUSH
27369: LD_EXP 46
27373: PPUSH
27374: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
27378: LD_EXP 46
27382: PPUSH
27383: LD_EXP 66
27387: PPUSH
27388: CALL_OW 179
// wait ( 0 0$2 ) ;
27392: LD_INT 70
27394: PPUSH
27395: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
27399: LD_EXP 66
27403: PPUSH
27404: LD_STRING DMcn-Fail-5
27406: PPUSH
27407: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27411: LD_EXP 46
27415: PPUSH
27416: CALL_OW 87
// wait ( 0 0$2 ) ;
27420: LD_INT 70
27422: PPUSH
27423: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
27427: LD_EXP 66
27431: PPUSH
27432: LD_STRING DMcn-Fail-6
27434: PPUSH
27435: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27439: LD_EXP 46
27443: PPUSH
27444: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
27448: LD_INT 35
27450: PPUSH
27451: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
27455: LD_EXP 46
27459: PPUSH
27460: LD_INT 43
27462: PPUSH
27463: LD_INT 21
27465: PPUSH
27466: CALL_OW 307
27470: IFFALSE 27448
// CenterNowOnUnits ( Heike ) ;
27472: LD_EXP 46
27476: PPUSH
27477: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
27481: LD_STRING MuchinQuestion
27483: PPUSH
27484: CALL_OW 97
27488: PUSH
27489: LD_INT 1
27491: DOUBLE
27492: EQUAL
27493: IFTRUE 27497
27495: GO 27597
27497: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
27498: LD_EXP 66
27502: PPUSH
27503: LD_STRING DMcn-Fail-7
27505: PPUSH
27506: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
27510: LD_EXP 46
27514: PPUSH
27515: LD_STRING DH-Fail-8
27517: PPUSH
27518: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27522: LD_INT 10
27524: PPUSH
27525: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
27529: LD_EXP 46
27533: PPUSH
27534: LD_STRING DH-Fail-9
27536: PPUSH
27537: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27541: LD_EXP 46
27545: PPUSH
27546: LD_STRING DH-Fail-10
27548: PPUSH
27549: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
27553: LD_EXP 66
27557: PPUSH
27558: LD_STRING DMcn-Fail-11
27560: PPUSH
27561: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
27565: LD_EXP 66
27569: PPUSH
27570: LD_EXP 46
27574: PPUSH
27575: CALL_OW 115
// wait ( 0 0$2 ) ;
27579: LD_INT 70
27581: PPUSH
27582: CALL_OW 67
// KillUnit ( Heike ) ;
27586: LD_EXP 46
27590: PPUSH
27591: CALL_OW 66
// end ; 2 :
27595: GO 27777
27597: LD_INT 2
27599: DOUBLE
27600: EQUAL
27601: IFTRUE 27605
27603: GO 27776
27605: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
27606: LD_EXP 46
27610: PPUSH
27611: LD_STRING DH-Fail-a-8
27613: PPUSH
27614: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
27618: LD_EXP 46
27622: PPUSH
27623: LD_STRING DH-Fail-a-9
27625: PPUSH
27626: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27630: LD_EXP 46
27634: PPUSH
27635: LD_STRING DH-Fail-10
27637: PPUSH
27638: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
27642: LD_EXP 46
27646: PPUSH
27647: LD_STRING DH-Fail-a-11
27649: PPUSH
27650: CALL_OW 88
// async ;
27654: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27655: LD_EXP 66
27659: PPUSH
27660: LD_EXP 46
27664: PPUSH
27665: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
27669: LD_EXP 66
27673: PPUSH
27674: LD_EXP 46
27678: PPUSH
27679: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
27683: LD_EXP 66
27687: PPUSH
27688: LD_STRING DH-Fail-12
27690: PPUSH
27691: CALL_OW 88
// sync ;
27695: SYNC
// wait ( 0 0$1 ) ;
27696: LD_INT 35
27698: PPUSH
27699: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
27703: LD_EXP 46
27707: PPUSH
27708: LD_STRING DH-Fail-a-13
27710: PPUSH
27711: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
27715: LD_EXP 66
27719: PPUSH
27720: LD_INT 100
27722: PPUSH
27723: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
27727: LD_EXP 66
27731: PPUSH
27732: LD_STRING DMcn-Fail-a-14
27734: PPUSH
27735: CALL_OW 91
// KillUnit ( ruDisturb ) ;
27739: LD_EXP 66
27743: PPUSH
27744: CALL_OW 66
// wait ( 0 0$1 ) ;
27748: LD_INT 35
27750: PPUSH
27751: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
27755: LD_EXP 46
27759: PPUSH
27760: LD_STRING DH-Fail-a-15
27762: PPUSH
27763: CALL_OW 88
// YouLost ( FailMuchin ) ;
27767: LD_STRING FailMuchin
27769: PPUSH
27770: CALL_OW 104
// end ; end ;
27774: GO 27777
27776: POP
// InGameOff ;
27777: CALL_OW 9
// end ;
27781: PPOPN 4
27783: END
// every 0 0$1 trigger FilterUnitsInArea ( baseOutsideBorderArea , [ f_side , 2 ] ) and not meetWithMuchin and hasMuchin marked gameStartEvent do
27784: LD_INT 23
27786: PPUSH
27787: LD_INT 22
27789: PUSH
27790: LD_INT 2
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PPUSH
27797: CALL_OW 70
27801: PUSH
27802: LD_EXP 44
27806: NOT
27807: AND
27808: PUSH
27809: LD_EXP 30
27813: AND
27814: IFFALSE 27827
27816: GO 27818
27818: DISABLE
// isAlarm := true ; end_of_file
27819: LD_ADDR_EXP 17
27823: PUSH
27824: LD_INT 1
27826: ST_TO_ADDR
27827: END
// every 0 0$1 marked gameStartEvent do
27828: GO 27830
27830: DISABLE
// begin enable ;
27831: ENABLE
// if not contactWithAmerican then
27832: LD_EXP 25
27836: NOT
27837: IFFALSE 27882
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
27839: LD_ADDR_OWVAR 47
27843: PUSH
27844: LD_STRING #X108-1
27846: PUSH
27847: LD_INT 22
27849: PUSH
27850: LD_INT 5
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 21
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PPUSH
27871: CALL_OW 69
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: ST_TO_ADDR
27880: GO 27971
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
27882: LD_ADDR_OWVAR 47
27886: PUSH
27887: LD_STRING #X108-1
27889: PUSH
27890: LD_INT 22
27892: PUSH
27893: LD_INT 5
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 21
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 50
27912: PUSH
27913: EMPTY
27914: LIST
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: PPUSH
27921: CALL_OW 69
27925: PUSH
27926: LD_STRING #X108-2
27928: PUSH
27929: LD_INT 22
27931: PUSH
27932: LD_INT 4
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 21
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 50
27951: PUSH
27952: EMPTY
27953: LIST
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: LIST
27959: PPUSH
27960: CALL_OW 69
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: ST_TO_ADDR
// end ; end_of_file
27971: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
27972: LD_EXP 46
27976: PPUSH
27977: LD_INT 59
27979: PPUSH
27980: CALL_OW 308
27984: IFFALSE 28106
27986: GO 27988
27988: DISABLE
// begin Query ( FinalInfo ) ;
27989: LD_STRING FinalInfo
27991: PPUSH
27992: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
27996: LD_INT 59
27998: PPUSH
27999: LD_INT 1
28001: PPUSH
28002: CALL_OW 424
// end_the_mission_allowed := true ;
28006: LD_ADDR_OWVAR 57
28010: PUSH
28011: LD_INT 1
28013: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28014: LD_INT 35
28016: PPUSH
28017: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
28021: LD_INT 22
28023: PUSH
28024: LD_INT 2
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 21
28033: PUSH
28034: LD_INT 1
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 95
28043: PUSH
28044: LD_INT 59
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: LIST
28055: PPUSH
28056: CALL_OW 69
28060: PPUSH
28061: CALL 31373 0 1
28065: PUSH
28066: LD_INT 22
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 21
28078: PUSH
28079: LD_INT 1
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PPUSH
28090: CALL_OW 69
28094: PPUSH
28095: CALL 31373 0 1
28099: EQUAL
28100: IFFALSE 28014
// EndMission ;
28102: CALL 28114 0 0
// end ;
28106: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
28107: CALL 28114 0 0
// end ;
28111: PPOPN 1
28113: END
// function EndMission ; var tmp ; begin
28114: LD_INT 0
28116: PPUSH
28117: PPUSH
// PlayOriginalMusic ;
28118: CALL 92377 0 0
// if not IsInArea ( Heike , finalArea ) then
28122: LD_EXP 46
28126: PPUSH
28127: LD_INT 59
28129: PPUSH
28130: CALL_OW 308
28134: NOT
28135: IFFALSE 28146
// begin Query ( HeikeOutOfArea ) ;
28137: LD_STRING HeikeOutOfArea
28139: PPUSH
28140: CALL_OW 97
// exit ;
28144: GO 29069
// end ; if not IsOk ( Heike ) then
28146: LD_EXP 46
28150: PPUSH
28151: CALL_OW 302
28155: NOT
28156: IFFALSE 28167
// begin Query ( HeikeIsHurt ) ;
28158: LD_STRING HeikeIsHurt
28160: PPUSH
28161: CALL_OW 97
// exit ;
28165: GO 29069
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
28167: LD_INT 22
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 21
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 50
28189: PUSH
28190: EMPTY
28191: LIST
28192: PUSH
28193: LD_INT 95
28195: PUSH
28196: LD_INT 59
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: PPUSH
28209: CALL_OW 69
28213: PPUSH
28214: CALL 31373 0 1
28218: PUSH
28219: LD_INT 6
28221: LESS
28222: IFFALSE 28231
// YouLost ( NeedMorePep ) ;
28224: LD_STRING NeedMorePep
28226: PPUSH
28227: CALL_OW 104
// if tick < 20 20$00 then
28231: LD_OWVAR 1
28235: PUSH
28236: LD_INT 42000
28238: LESS
28239: IFFALSE 28248
// SetAchievement ( ACH_HSPEED_8 ) ;
28241: LD_STRING ACH_HSPEED_8
28243: PPUSH
28244: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
28248: LD_INT 22
28250: PUSH
28251: LD_INT 5
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 21
28260: PUSH
28261: LD_INT 1
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PPUSH
28272: CALL_OW 69
28276: PUSH
28277: LD_INT 0
28279: EQUAL
28280: PUSH
28281: LD_EXP 32
28285: PUSH
28286: LD_INT 0
28288: EQUAL
28289: AND
28290: IFFALSE 28304
// AddMedal ( med1 , 1 ) else
28292: LD_STRING med1
28294: PPUSH
28295: LD_INT 1
28297: PPUSH
28298: CALL_OW 101
28302: GO 28315
// AddMedal ( med1 , - 1 ) ;
28304: LD_STRING med1
28306: PPUSH
28307: LD_INT 1
28309: NEG
28310: PPUSH
28311: CALL_OW 101
// if explosivePlantedList >= 3 then
28315: LD_EXP 29
28319: PUSH
28320: LD_INT 3
28322: GREATEREQUAL
28323: IFFALSE 28337
// AddMedal ( med2 , 1 ) else
28325: LD_STRING med2
28327: PPUSH
28328: LD_INT 1
28330: PPUSH
28331: CALL_OW 101
28335: GO 28371
// if explosivePlantedList < 3 then
28337: LD_EXP 29
28341: PUSH
28342: LD_INT 3
28344: LESS
28345: IFFALSE 28360
// AddMedal ( med2 , - 2 ) else
28347: LD_STRING med2
28349: PPUSH
28350: LD_INT 2
28352: NEG
28353: PPUSH
28354: CALL_OW 101
28358: GO 28371
// AddMedal ( med2 , - 1 ) ;
28360: LD_STRING med2
28362: PPUSH
28363: LD_INT 1
28365: NEG
28366: PPUSH
28367: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
28371: LD_INT 5
28373: PPUSH
28374: LD_INT 2
28376: PPUSH
28377: CALL_OW 321
28381: PUSH
28382: LD_INT 2
28384: EQUAL
28385: IFFALSE 28399
// AddMedal ( med3 , 1 ) else
28387: LD_STRING med3
28389: PPUSH
28390: LD_INT 1
28392: PPUSH
28393: CALL_OW 101
28397: GO 28410
// AddMedal ( med3 , - 1 ) ;
28399: LD_STRING med3
28401: PPUSH
28402: LD_INT 1
28404: NEG
28405: PPUSH
28406: CALL_OW 101
// GiveMedals ( MAIN ) ;
28410: LD_STRING MAIN
28412: PPUSH
28413: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ;
28417: LD_ADDR_VAR 0 2
28421: PUSH
28422: LD_INT 22
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 21
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 50
28444: PUSH
28445: EMPTY
28446: LIST
28447: PUSH
28448: LD_INT 95
28450: PUSH
28451: LD_INT 59
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: PPUSH
28464: CALL_OW 69
28468: ST_TO_ADDR
// RewardPeople ( UnitFilter ( tmp , [ f_nation , 2 ] ) ) ;
28469: LD_VAR 0 2
28473: PPUSH
28474: LD_INT 23
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PPUSH
28484: CALL_OW 72
28488: PPUSH
28489: CALL_OW 43
// if Doug and Doug in tmp then
28493: LD_EXP 60
28497: PUSH
28498: LD_EXP 60
28502: PUSH
28503: LD_VAR 0 2
28507: IN
28508: AND
28509: IFFALSE 28523
// SaveCharacters ( Doug , 08_UsCommander ) ;
28511: LD_EXP 60
28515: PPUSH
28516: LD_STRING 08_UsCommander
28518: PPUSH
28519: CALL_OW 38
// if Harris and Harris in tmp then
28523: LD_EXP 59
28527: PUSH
28528: LD_EXP 59
28532: PUSH
28533: LD_VAR 0 2
28537: IN
28538: AND
28539: IFFALSE 28553
// SaveCharacters ( Harris , 08_Harris ) ;
28541: LD_EXP 59
28545: PPUSH
28546: LD_STRING 08_Harris
28548: PPUSH
28549: CALL_OW 38
// SaveCharacters ( UnitFilter ( tmp , [ f_nation , 1 ] ) diff [ Doug , Harris ] , 08_Americans ) ;
28553: LD_VAR 0 2
28557: PPUSH
28558: LD_INT 23
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PPUSH
28568: CALL_OW 72
28572: PUSH
28573: LD_EXP 60
28577: PUSH
28578: LD_EXP 59
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: DIFF
28587: PPUSH
28588: LD_STRING 08_Americans
28590: PPUSH
28591: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
28595: LD_EXP 46
28599: PPUSH
28600: CALL_OW 248
28604: PUSH
28605: LD_INT 3
28607: EQUAL
28608: IFFALSE 28638
// begin CopySkills ( Heike , HeikeTmp ) ;
28610: LD_EXP 46
28614: PPUSH
28615: LD_EXP 62
28619: PPUSH
28620: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
28624: LD_EXP 62
28628: PPUSH
28629: LD_STRING 08_Heike
28631: PPUSH
28632: CALL_OW 38
// end else
28636: GO 28650
// SaveCharacters ( Heike , 08_Heike ) ;
28638: LD_EXP 46
28642: PPUSH
28643: LD_STRING 08_Heike
28645: PPUSH
28646: CALL_OW 38
// if Aviradze and Aviradze in tmp then
28650: LD_EXP 56
28654: PUSH
28655: LD_EXP 56
28659: PUSH
28660: LD_VAR 0 2
28664: IN
28665: AND
28666: IFFALSE 28680
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
28668: LD_EXP 56
28672: PPUSH
28673: LD_STRING 08_Aviradze
28675: PPUSH
28676: CALL_OW 38
// if Ibrahim and Ibrahim in tmp then
28680: LD_EXP 49
28684: PUSH
28685: LD_EXP 49
28689: PUSH
28690: LD_VAR 0 2
28694: IN
28695: AND
28696: IFFALSE 28710
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
28698: LD_EXP 49
28702: PPUSH
28703: LD_STRING 08_Ibrahim
28705: PPUSH
28706: CALL_OW 38
// if Kamil and Kamil in tmp then
28710: LD_EXP 50
28714: PUSH
28715: LD_EXP 50
28719: PUSH
28720: LD_VAR 0 2
28724: IN
28725: AND
28726: IFFALSE 28740
// SaveCharacters ( Kamil , 08_Kamil ) ;
28728: LD_EXP 50
28732: PPUSH
28733: LD_STRING 08_Kamil
28735: PPUSH
28736: CALL_OW 38
// if Sophia and Sophia in tmp then
28740: LD_EXP 52
28744: PUSH
28745: LD_EXP 52
28749: PUSH
28750: LD_VAR 0 2
28754: IN
28755: AND
28756: IFFALSE 28770
// SaveCharacters ( Sophia , 08_Sophia ) ;
28758: LD_EXP 52
28762: PPUSH
28763: LD_STRING 08_Sophia
28765: PPUSH
28766: CALL_OW 38
// if Kaia and Kaia in tmp then
28770: LD_EXP 51
28774: PUSH
28775: LD_EXP 51
28779: PUSH
28780: LD_VAR 0 2
28784: IN
28785: AND
28786: IFFALSE 28800
// SaveCharacters ( Kaia , 08_Kaia ) ;
28788: LD_EXP 51
28792: PPUSH
28793: LD_STRING 08_Kaia
28795: PPUSH
28796: CALL_OW 38
// if Givi and Givi in tmp then
28800: LD_EXP 47
28804: PUSH
28805: LD_EXP 47
28809: PUSH
28810: LD_VAR 0 2
28814: IN
28815: AND
28816: IFFALSE 28873
// if GetNation ( Givi ) = nation_russian then
28818: LD_EXP 47
28822: PPUSH
28823: CALL_OW 248
28827: PUSH
28828: LD_INT 3
28830: EQUAL
28831: IFFALSE 28861
// begin CopySkills ( Givi , GiviTmp ) ;
28833: LD_EXP 47
28837: PPUSH
28838: LD_EXP 63
28842: PPUSH
28843: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
28847: LD_EXP 63
28851: PPUSH
28852: LD_STRING 08_Givi
28854: PPUSH
28855: CALL_OW 38
// end else
28859: GO 28873
// SaveCharacters ( Givi , 08_Givi ) ;
28861: LD_EXP 47
28865: PPUSH
28866: LD_STRING 08_Givi
28868: PPUSH
28869: CALL_OW 38
// if Mike and Mike in tmp then
28873: LD_EXP 48
28877: PUSH
28878: LD_EXP 48
28882: PUSH
28883: LD_VAR 0 2
28887: IN
28888: AND
28889: IFFALSE 28903
// SaveCharacters ( Mike , 08_Mike ) ;
28891: LD_EXP 48
28895: PPUSH
28896: LD_STRING 08_Mike
28898: PPUSH
28899: CALL_OW 38
// if Markov and Markov in tmp then
28903: LD_EXP 53
28907: PUSH
28908: LD_EXP 53
28912: PUSH
28913: LD_VAR 0 2
28917: IN
28918: AND
28919: IFFALSE 28933
// SaveCharacters ( Markov , 08_Markov ) ;
28921: LD_EXP 53
28925: PPUSH
28926: LD_STRING 08_Markov
28928: PPUSH
28929: CALL_OW 38
// if Kurt and Kurt in tmp then
28933: LD_EXP 55
28937: PUSH
28938: LD_EXP 55
28942: PUSH
28943: LD_VAR 0 2
28947: IN
28948: AND
28949: IFFALSE 28963
// SaveCharacters ( Kurt , 08_Kurt ) ;
28951: LD_EXP 55
28955: PPUSH
28956: LD_STRING 08_Kurt
28958: PPUSH
28959: CALL_OW 38
// if Olaf and Olaf in tmp then
28963: LD_EXP 54
28967: PUSH
28968: LD_EXP 54
28972: PUSH
28973: LD_VAR 0 2
28977: IN
28978: AND
28979: IFFALSE 28993
// SaveCharacters ( Olaf , 08_Olaf ) ;
28981: LD_EXP 54
28985: PPUSH
28986: LD_STRING 08_Olaf
28988: PPUSH
28989: CALL_OW 38
// if UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) then
28993: LD_EXP 57
28997: PPUSH
28998: LD_INT 95
29000: PUSH
29001: LD_INT 59
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 50
29010: PUSH
29011: EMPTY
29012: LIST
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PPUSH
29018: CALL_OW 72
29022: IFFALSE 29061
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) , 08_others ) ;
29024: LD_EXP 57
29028: PPUSH
29029: LD_INT 95
29031: PUSH
29032: LD_INT 59
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 50
29041: PUSH
29042: EMPTY
29043: LIST
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PPUSH
29049: CALL_OW 72
29053: PPUSH
29054: LD_STRING 08_others
29056: PPUSH
29057: CALL_OW 38
// YouWin ;
29061: CALL_OW 103
// DialogueOff ;
29065: CALL_OW 7
// end ; end_of_file
29069: LD_VAR 0 1
29073: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
29074: LD_EXP 5
29078: IFFALSE 29268
29080: GO 29082
29082: DISABLE
29083: LD_INT 0
29085: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
29086: LD_INT 35
29088: PPUSH
29089: LD_INT 2100
29091: PPUSH
29092: CALL_OW 12
29096: PPUSH
29097: CALL_OW 67
// StopOriginalMusic ;
29101: CALL 92362 0 0
// weatherBusy := true ;
29105: LD_ADDR_EXP 37
29109: PUSH
29110: LD_INT 1
29112: ST_TO_ADDR
// for i := 1 to 3 do
29113: LD_ADDR_VAR 0 1
29117: PUSH
29118: DOUBLE
29119: LD_INT 1
29121: DEC
29122: ST_TO_ADDR
29123: LD_INT 3
29125: PUSH
29126: FOR_TO
29127: IFFALSE 29161
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
29129: LD_INT 1
29131: PPUSH
29132: LD_INT 100
29134: PUSH
29135: LD_INT 100
29137: PUSH
29138: LD_VAR 0 1
29142: MUL
29143: PLUS
29144: PPUSH
29145: LD_INT 60
29147: PPUSH
29148: CALL_OW 550
// wait ( 0 0$2 ) ;
29152: LD_INT 70
29154: PPUSH
29155: CALL_OW 67
// end ;
29159: GO 29126
29161: POP
29162: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
29163: LD_STRING ArStormRain.wav
29165: PPUSH
29166: LD_STRING OW_CUSTOM_COMMAND(103);
29168: PPUSH
29169: CALL 92392 0 2
// wait ( 0 0$3 ) ;
29173: LD_INT 105
29175: PPUSH
29176: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
29180: LD_INT 1
29182: PPUSH
29183: LD_INT 900
29185: PPUSH
29186: LD_INT 120
29188: PPUSH
29189: CALL_OW 550
// wait ( 0 0$10 ) ;
29193: LD_INT 350
29195: PPUSH
29196: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
29200: LD_INT 1
29202: PPUSH
29203: LD_INT 1500
29205: PPUSH
29206: LD_INT 300
29208: PPUSH
29209: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
29213: LD_INT 35
29215: PPUSH
29216: CALL_OW 67
// until not weatherBusy ;
29220: LD_EXP 37
29224: NOT
29225: IFFALSE 29213
// SetWeather ( 0 , 0 , 0 ) ;
29227: LD_INT 0
29229: PPUSH
29230: LD_INT 0
29232: PPUSH
29233: LD_INT 0
29235: PPUSH
29236: CALL_OW 550
// wait ( 5 5$00 ) ;
29240: LD_INT 10500
29242: PPUSH
29243: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
29247: LD_STRING ArStormNormal.wav
29249: PPUSH
29250: LD_STRING OW_CUSTOM_COMMAND(103);
29252: PPUSH
29253: CALL 92392 0 2
// wait ( 5 5$00 ) ;
29257: LD_INT 10500
29259: PPUSH
29260: CALL_OW 67
// PlayOriginalMusic ;
29264: CALL 92377 0 0
// end ; end_of_file
29268: PPOPN 1
29270: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29271: LD_INT 0
29273: PPUSH
29274: PPUSH
// if exist_mode then
29275: LD_VAR 0 2
29279: IFFALSE 29304
// unit := CreateCharacter ( prefix & ident ) else
29281: LD_ADDR_VAR 0 5
29285: PUSH
29286: LD_VAR 0 3
29290: PUSH
29291: LD_VAR 0 1
29295: STR
29296: PPUSH
29297: CALL_OW 34
29301: ST_TO_ADDR
29302: GO 29319
// unit := NewCharacter ( ident ) ;
29304: LD_ADDR_VAR 0 5
29308: PUSH
29309: LD_VAR 0 1
29313: PPUSH
29314: CALL_OW 25
29318: ST_TO_ADDR
// result := unit ;
29319: LD_ADDR_VAR 0 4
29323: PUSH
29324: LD_VAR 0 5
29328: ST_TO_ADDR
// end ;
29329: LD_VAR 0 4
29333: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29334: LD_INT 0
29336: PPUSH
29337: PPUSH
// if not side or not nation then
29338: LD_VAR 0 1
29342: NOT
29343: PUSH
29344: LD_VAR 0 2
29348: NOT
29349: OR
29350: IFFALSE 29354
// exit ;
29352: GO 30122
// case nation of nation_american :
29354: LD_VAR 0 2
29358: PUSH
29359: LD_INT 1
29361: DOUBLE
29362: EQUAL
29363: IFTRUE 29367
29365: GO 29581
29367: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29368: LD_ADDR_VAR 0 4
29372: PUSH
29373: LD_INT 35
29375: PUSH
29376: LD_INT 45
29378: PUSH
29379: LD_INT 46
29381: PUSH
29382: LD_INT 47
29384: PUSH
29385: LD_INT 82
29387: PUSH
29388: LD_INT 83
29390: PUSH
29391: LD_INT 84
29393: PUSH
29394: LD_INT 85
29396: PUSH
29397: LD_INT 86
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 6
29408: PUSH
29409: LD_INT 15
29411: PUSH
29412: LD_INT 16
29414: PUSH
29415: LD_INT 7
29417: PUSH
29418: LD_INT 12
29420: PUSH
29421: LD_INT 13
29423: PUSH
29424: LD_INT 10
29426: PUSH
29427: LD_INT 14
29429: PUSH
29430: LD_INT 20
29432: PUSH
29433: LD_INT 21
29435: PUSH
29436: LD_INT 22
29438: PUSH
29439: LD_INT 25
29441: PUSH
29442: LD_INT 32
29444: PUSH
29445: LD_INT 27
29447: PUSH
29448: LD_INT 36
29450: PUSH
29451: LD_INT 69
29453: PUSH
29454: LD_INT 39
29456: PUSH
29457: LD_INT 34
29459: PUSH
29460: LD_INT 40
29462: PUSH
29463: LD_INT 48
29465: PUSH
29466: LD_INT 49
29468: PUSH
29469: LD_INT 50
29471: PUSH
29472: LD_INT 51
29474: PUSH
29475: LD_INT 52
29477: PUSH
29478: LD_INT 53
29480: PUSH
29481: LD_INT 54
29483: PUSH
29484: LD_INT 55
29486: PUSH
29487: LD_INT 56
29489: PUSH
29490: LD_INT 57
29492: PUSH
29493: LD_INT 58
29495: PUSH
29496: LD_INT 59
29498: PUSH
29499: LD_INT 60
29501: PUSH
29502: LD_INT 61
29504: PUSH
29505: LD_INT 62
29507: PUSH
29508: LD_INT 80
29510: PUSH
29511: LD_INT 82
29513: PUSH
29514: LD_INT 83
29516: PUSH
29517: LD_INT 84
29519: PUSH
29520: LD_INT 85
29522: PUSH
29523: LD_INT 86
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: ST_TO_ADDR
29579: GO 30046
29581: LD_INT 2
29583: DOUBLE
29584: EQUAL
29585: IFTRUE 29589
29587: GO 29815
29589: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29590: LD_ADDR_VAR 0 4
29594: PUSH
29595: LD_INT 35
29597: PUSH
29598: LD_INT 45
29600: PUSH
29601: LD_INT 46
29603: PUSH
29604: LD_INT 47
29606: PUSH
29607: LD_INT 82
29609: PUSH
29610: LD_INT 83
29612: PUSH
29613: LD_INT 84
29615: PUSH
29616: LD_INT 85
29618: PUSH
29619: LD_INT 87
29621: PUSH
29622: LD_INT 70
29624: PUSH
29625: LD_INT 1
29627: PUSH
29628: LD_INT 11
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: LD_INT 4
29636: PUSH
29637: LD_INT 5
29639: PUSH
29640: LD_INT 6
29642: PUSH
29643: LD_INT 15
29645: PUSH
29646: LD_INT 18
29648: PUSH
29649: LD_INT 7
29651: PUSH
29652: LD_INT 17
29654: PUSH
29655: LD_INT 8
29657: PUSH
29658: LD_INT 20
29660: PUSH
29661: LD_INT 21
29663: PUSH
29664: LD_INT 22
29666: PUSH
29667: LD_INT 72
29669: PUSH
29670: LD_INT 26
29672: PUSH
29673: LD_INT 69
29675: PUSH
29676: LD_INT 39
29678: PUSH
29679: LD_INT 40
29681: PUSH
29682: LD_INT 41
29684: PUSH
29685: LD_INT 42
29687: PUSH
29688: LD_INT 43
29690: PUSH
29691: LD_INT 48
29693: PUSH
29694: LD_INT 49
29696: PUSH
29697: LD_INT 50
29699: PUSH
29700: LD_INT 51
29702: PUSH
29703: LD_INT 52
29705: PUSH
29706: LD_INT 53
29708: PUSH
29709: LD_INT 54
29711: PUSH
29712: LD_INT 55
29714: PUSH
29715: LD_INT 56
29717: PUSH
29718: LD_INT 60
29720: PUSH
29721: LD_INT 61
29723: PUSH
29724: LD_INT 62
29726: PUSH
29727: LD_INT 66
29729: PUSH
29730: LD_INT 67
29732: PUSH
29733: LD_INT 68
29735: PUSH
29736: LD_INT 81
29738: PUSH
29739: LD_INT 82
29741: PUSH
29742: LD_INT 83
29744: PUSH
29745: LD_INT 84
29747: PUSH
29748: LD_INT 85
29750: PUSH
29751: LD_INT 87
29753: PUSH
29754: LD_INT 88
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: ST_TO_ADDR
29813: GO 30046
29815: LD_INT 3
29817: DOUBLE
29818: EQUAL
29819: IFTRUE 29823
29821: GO 30045
29823: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29824: LD_ADDR_VAR 0 4
29828: PUSH
29829: LD_INT 46
29831: PUSH
29832: LD_INT 47
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: LD_INT 82
29843: PUSH
29844: LD_INT 83
29846: PUSH
29847: LD_INT 84
29849: PUSH
29850: LD_INT 85
29852: PUSH
29853: LD_INT 86
29855: PUSH
29856: LD_INT 11
29858: PUSH
29859: LD_INT 9
29861: PUSH
29862: LD_INT 20
29864: PUSH
29865: LD_INT 19
29867: PUSH
29868: LD_INT 21
29870: PUSH
29871: LD_INT 24
29873: PUSH
29874: LD_INT 22
29876: PUSH
29877: LD_INT 25
29879: PUSH
29880: LD_INT 28
29882: PUSH
29883: LD_INT 29
29885: PUSH
29886: LD_INT 30
29888: PUSH
29889: LD_INT 31
29891: PUSH
29892: LD_INT 37
29894: PUSH
29895: LD_INT 38
29897: PUSH
29898: LD_INT 32
29900: PUSH
29901: LD_INT 27
29903: PUSH
29904: LD_INT 33
29906: PUSH
29907: LD_INT 69
29909: PUSH
29910: LD_INT 39
29912: PUSH
29913: LD_INT 34
29915: PUSH
29916: LD_INT 40
29918: PUSH
29919: LD_INT 71
29921: PUSH
29922: LD_INT 23
29924: PUSH
29925: LD_INT 44
29927: PUSH
29928: LD_INT 48
29930: PUSH
29931: LD_INT 49
29933: PUSH
29934: LD_INT 50
29936: PUSH
29937: LD_INT 51
29939: PUSH
29940: LD_INT 52
29942: PUSH
29943: LD_INT 53
29945: PUSH
29946: LD_INT 54
29948: PUSH
29949: LD_INT 55
29951: PUSH
29952: LD_INT 56
29954: PUSH
29955: LD_INT 57
29957: PUSH
29958: LD_INT 58
29960: PUSH
29961: LD_INT 59
29963: PUSH
29964: LD_INT 63
29966: PUSH
29967: LD_INT 64
29969: PUSH
29970: LD_INT 65
29972: PUSH
29973: LD_INT 82
29975: PUSH
29976: LD_INT 83
29978: PUSH
29979: LD_INT 84
29981: PUSH
29982: LD_INT 85
29984: PUSH
29985: LD_INT 86
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: ST_TO_ADDR
30043: GO 30046
30045: POP
// if state > - 1 and state < 3 then
30046: LD_VAR 0 3
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: GREATER
30055: PUSH
30056: LD_VAR 0 3
30060: PUSH
30061: LD_INT 3
30063: LESS
30064: AND
30065: IFFALSE 30122
// for i in result do
30067: LD_ADDR_VAR 0 5
30071: PUSH
30072: LD_VAR 0 4
30076: PUSH
30077: FOR_IN
30078: IFFALSE 30120
// if GetTech ( i , side ) <> state then
30080: LD_VAR 0 5
30084: PPUSH
30085: LD_VAR 0 1
30089: PPUSH
30090: CALL_OW 321
30094: PUSH
30095: LD_VAR 0 3
30099: NONEQUAL
30100: IFFALSE 30118
// result := result diff i ;
30102: LD_ADDR_VAR 0 4
30106: PUSH
30107: LD_VAR 0 4
30111: PUSH
30112: LD_VAR 0 5
30116: DIFF
30117: ST_TO_ADDR
30118: GO 30077
30120: POP
30121: POP
// end ;
30122: LD_VAR 0 4
30126: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30127: LD_INT 0
30129: PPUSH
30130: PPUSH
30131: PPUSH
// result := true ;
30132: LD_ADDR_VAR 0 3
30136: PUSH
30137: LD_INT 1
30139: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30140: LD_ADDR_VAR 0 5
30144: PUSH
30145: LD_VAR 0 2
30149: PPUSH
30150: CALL_OW 480
30154: ST_TO_ADDR
// if not tmp then
30155: LD_VAR 0 5
30159: NOT
30160: IFFALSE 30164
// exit ;
30162: GO 30213
// for i in tmp do
30164: LD_ADDR_VAR 0 4
30168: PUSH
30169: LD_VAR 0 5
30173: PUSH
30174: FOR_IN
30175: IFFALSE 30211
// if GetTech ( i , side ) <> state_researched then
30177: LD_VAR 0 4
30181: PPUSH
30182: LD_VAR 0 1
30186: PPUSH
30187: CALL_OW 321
30191: PUSH
30192: LD_INT 2
30194: NONEQUAL
30195: IFFALSE 30209
// begin result := false ;
30197: LD_ADDR_VAR 0 3
30201: PUSH
30202: LD_INT 0
30204: ST_TO_ADDR
// exit ;
30205: POP
30206: POP
30207: GO 30213
// end ;
30209: GO 30174
30211: POP
30212: POP
// end ;
30213: LD_VAR 0 3
30217: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30218: LD_INT 0
30220: PPUSH
30221: PPUSH
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
30226: PPUSH
30227: PPUSH
30228: PPUSH
30229: PPUSH
30230: PPUSH
30231: PPUSH
30232: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30233: LD_VAR 0 1
30237: NOT
30238: PUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 257
30248: PUSH
30249: LD_INT 9
30251: NONEQUAL
30252: OR
30253: IFFALSE 30257
// exit ;
30255: GO 30830
// side := GetSide ( unit ) ;
30257: LD_ADDR_VAR 0 9
30261: PUSH
30262: LD_VAR 0 1
30266: PPUSH
30267: CALL_OW 255
30271: ST_TO_ADDR
// tech_space := tech_spacanom ;
30272: LD_ADDR_VAR 0 12
30276: PUSH
30277: LD_INT 29
30279: ST_TO_ADDR
// tech_time := tech_taurad ;
30280: LD_ADDR_VAR 0 13
30284: PUSH
30285: LD_INT 28
30287: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30288: LD_ADDR_VAR 0 11
30292: PUSH
30293: LD_VAR 0 1
30297: PPUSH
30298: CALL_OW 310
30302: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30303: LD_VAR 0 11
30307: PPUSH
30308: CALL_OW 247
30312: PUSH
30313: LD_INT 2
30315: EQUAL
30316: IFFALSE 30320
// exit ;
30318: GO 30830
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30320: LD_ADDR_VAR 0 8
30324: PUSH
30325: LD_INT 81
30327: PUSH
30328: LD_VAR 0 9
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: LD_INT 21
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PPUSH
30358: CALL_OW 69
30362: ST_TO_ADDR
// if not tmp then
30363: LD_VAR 0 8
30367: NOT
30368: IFFALSE 30372
// exit ;
30370: GO 30830
// if in_unit then
30372: LD_VAR 0 11
30376: IFFALSE 30400
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30378: LD_ADDR_VAR 0 10
30382: PUSH
30383: LD_VAR 0 8
30387: PPUSH
30388: LD_VAR 0 11
30392: PPUSH
30393: CALL_OW 74
30397: ST_TO_ADDR
30398: GO 30420
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30400: LD_ADDR_VAR 0 10
30404: PUSH
30405: LD_VAR 0 8
30409: PPUSH
30410: LD_VAR 0 1
30414: PPUSH
30415: CALL_OW 74
30419: ST_TO_ADDR
// if not enemy then
30420: LD_VAR 0 10
30424: NOT
30425: IFFALSE 30429
// exit ;
30427: GO 30830
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30429: LD_VAR 0 11
30433: PUSH
30434: LD_VAR 0 11
30438: PPUSH
30439: LD_VAR 0 10
30443: PPUSH
30444: CALL_OW 296
30448: PUSH
30449: LD_INT 13
30451: GREATER
30452: AND
30453: PUSH
30454: LD_VAR 0 1
30458: PPUSH
30459: LD_VAR 0 10
30463: PPUSH
30464: CALL_OW 296
30468: PUSH
30469: LD_INT 12
30471: GREATER
30472: OR
30473: IFFALSE 30477
// exit ;
30475: GO 30830
// missile := [ 1 ] ;
30477: LD_ADDR_VAR 0 14
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: EMPTY
30486: LIST
30487: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30488: LD_VAR 0 9
30492: PPUSH
30493: LD_VAR 0 12
30497: PPUSH
30498: CALL_OW 325
30502: IFFALSE 30531
// missile := Replace ( missile , missile + 1 , 2 ) ;
30504: LD_ADDR_VAR 0 14
30508: PUSH
30509: LD_VAR 0 14
30513: PPUSH
30514: LD_VAR 0 14
30518: PUSH
30519: LD_INT 1
30521: PLUS
30522: PPUSH
30523: LD_INT 2
30525: PPUSH
30526: CALL_OW 1
30530: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30531: LD_VAR 0 9
30535: PPUSH
30536: LD_VAR 0 13
30540: PPUSH
30541: CALL_OW 325
30545: PUSH
30546: LD_VAR 0 10
30550: PPUSH
30551: CALL_OW 255
30555: PPUSH
30556: LD_VAR 0 13
30560: PPUSH
30561: CALL_OW 325
30565: NOT
30566: AND
30567: IFFALSE 30596
// missile := Replace ( missile , missile + 1 , 3 ) ;
30569: LD_ADDR_VAR 0 14
30573: PUSH
30574: LD_VAR 0 14
30578: PPUSH
30579: LD_VAR 0 14
30583: PUSH
30584: LD_INT 1
30586: PLUS
30587: PPUSH
30588: LD_INT 3
30590: PPUSH
30591: CALL_OW 1
30595: ST_TO_ADDR
// if missile < 2 then
30596: LD_VAR 0 14
30600: PUSH
30601: LD_INT 2
30603: LESS
30604: IFFALSE 30608
// exit ;
30606: GO 30830
// x := GetX ( enemy ) ;
30608: LD_ADDR_VAR 0 4
30612: PUSH
30613: LD_VAR 0 10
30617: PPUSH
30618: CALL_OW 250
30622: ST_TO_ADDR
// y := GetY ( enemy ) ;
30623: LD_ADDR_VAR 0 5
30627: PUSH
30628: LD_VAR 0 10
30632: PPUSH
30633: CALL_OW 251
30637: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30638: LD_ADDR_VAR 0 6
30642: PUSH
30643: LD_VAR 0 4
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PPUSH
30652: LD_INT 1
30654: PPUSH
30655: CALL_OW 12
30659: PLUS
30660: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30661: LD_ADDR_VAR 0 7
30665: PUSH
30666: LD_VAR 0 5
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PPUSH
30675: LD_INT 1
30677: PPUSH
30678: CALL_OW 12
30682: PLUS
30683: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30684: LD_VAR 0 6
30688: PPUSH
30689: LD_VAR 0 7
30693: PPUSH
30694: CALL_OW 488
30698: NOT
30699: IFFALSE 30721
// begin _x := x ;
30701: LD_ADDR_VAR 0 6
30705: PUSH
30706: LD_VAR 0 4
30710: ST_TO_ADDR
// _y := y ;
30711: LD_ADDR_VAR 0 7
30715: PUSH
30716: LD_VAR 0 5
30720: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_INT 1
30728: PPUSH
30729: LD_VAR 0 14
30733: PPUSH
30734: CALL_OW 12
30738: ST_TO_ADDR
// case i of 1 :
30739: LD_VAR 0 3
30743: PUSH
30744: LD_INT 1
30746: DOUBLE
30747: EQUAL
30748: IFTRUE 30752
30750: GO 30769
30752: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30753: LD_VAR 0 1
30757: PPUSH
30758: LD_VAR 0 10
30762: PPUSH
30763: CALL_OW 115
30767: GO 30830
30769: LD_INT 2
30771: DOUBLE
30772: EQUAL
30773: IFTRUE 30777
30775: GO 30799
30777: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30778: LD_VAR 0 1
30782: PPUSH
30783: LD_VAR 0 6
30787: PPUSH
30788: LD_VAR 0 7
30792: PPUSH
30793: CALL_OW 153
30797: GO 30830
30799: LD_INT 3
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30807
30805: GO 30829
30807: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30808: LD_VAR 0 1
30812: PPUSH
30813: LD_VAR 0 6
30817: PPUSH
30818: LD_VAR 0 7
30822: PPUSH
30823: CALL_OW 154
30827: GO 30830
30829: POP
// end ;
30830: LD_VAR 0 2
30834: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30835: LD_INT 0
30837: PPUSH
30838: PPUSH
30839: PPUSH
30840: PPUSH
30841: PPUSH
30842: PPUSH
// if not unit or not building then
30843: LD_VAR 0 1
30847: NOT
30848: PUSH
30849: LD_VAR 0 2
30853: NOT
30854: OR
30855: IFFALSE 30859
// exit ;
30857: GO 31017
// x := GetX ( building ) ;
30859: LD_ADDR_VAR 0 5
30863: PUSH
30864: LD_VAR 0 2
30868: PPUSH
30869: CALL_OW 250
30873: ST_TO_ADDR
// y := GetY ( building ) ;
30874: LD_ADDR_VAR 0 6
30878: PUSH
30879: LD_VAR 0 2
30883: PPUSH
30884: CALL_OW 251
30888: ST_TO_ADDR
// for i = 0 to 5 do
30889: LD_ADDR_VAR 0 4
30893: PUSH
30894: DOUBLE
30895: LD_INT 0
30897: DEC
30898: ST_TO_ADDR
30899: LD_INT 5
30901: PUSH
30902: FOR_TO
30903: IFFALSE 31015
// begin _x := ShiftX ( x , i , 3 ) ;
30905: LD_ADDR_VAR 0 7
30909: PUSH
30910: LD_VAR 0 5
30914: PPUSH
30915: LD_VAR 0 4
30919: PPUSH
30920: LD_INT 3
30922: PPUSH
30923: CALL_OW 272
30927: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30928: LD_ADDR_VAR 0 8
30932: PUSH
30933: LD_VAR 0 6
30937: PPUSH
30938: LD_VAR 0 4
30942: PPUSH
30943: LD_INT 3
30945: PPUSH
30946: CALL_OW 273
30950: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30951: LD_VAR 0 7
30955: PPUSH
30956: LD_VAR 0 8
30960: PPUSH
30961: CALL_OW 488
30965: NOT
30966: IFFALSE 30970
// continue ;
30968: GO 30902
// if HexInfo ( _x , _y ) = 0 then
30970: LD_VAR 0 7
30974: PPUSH
30975: LD_VAR 0 8
30979: PPUSH
30980: CALL_OW 428
30984: PUSH
30985: LD_INT 0
30987: EQUAL
30988: IFFALSE 31013
// begin ComMoveXY ( unit , _x , _y ) ;
30990: LD_VAR 0 1
30994: PPUSH
30995: LD_VAR 0 7
30999: PPUSH
31000: LD_VAR 0 8
31004: PPUSH
31005: CALL_OW 111
// exit ;
31009: POP
31010: POP
31011: GO 31017
// end ; end ;
31013: GO 30902
31015: POP
31016: POP
// end ;
31017: LD_VAR 0 3
31021: RET
// export function ScanBase ( side , base_area ) ; begin
31022: LD_INT 0
31024: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31025: LD_ADDR_VAR 0 3
31029: PUSH
31030: LD_VAR 0 2
31034: PPUSH
31035: LD_INT 81
31037: PUSH
31038: LD_VAR 0 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PPUSH
31047: CALL_OW 70
31051: ST_TO_ADDR
// end ;
31052: LD_VAR 0 3
31056: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31057: LD_INT 0
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
// result := false ;
31063: LD_ADDR_VAR 0 2
31067: PUSH
31068: LD_INT 0
31070: ST_TO_ADDR
// side := GetSide ( unit ) ;
31071: LD_ADDR_VAR 0 3
31075: PUSH
31076: LD_VAR 0 1
31080: PPUSH
31081: CALL_OW 255
31085: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31086: LD_ADDR_VAR 0 4
31090: PUSH
31091: LD_VAR 0 1
31095: PPUSH
31096: CALL_OW 248
31100: ST_TO_ADDR
// case nat of 1 :
31101: LD_VAR 0 4
31105: PUSH
31106: LD_INT 1
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31114
31112: GO 31125
31114: POP
// tech := tech_lassight ; 2 :
31115: LD_ADDR_VAR 0 5
31119: PUSH
31120: LD_INT 12
31122: ST_TO_ADDR
31123: GO 31164
31125: LD_INT 2
31127: DOUBLE
31128: EQUAL
31129: IFTRUE 31133
31131: GO 31144
31133: POP
// tech := tech_mortar ; 3 :
31134: LD_ADDR_VAR 0 5
31138: PUSH
31139: LD_INT 41
31141: ST_TO_ADDR
31142: GO 31164
31144: LD_INT 3
31146: DOUBLE
31147: EQUAL
31148: IFTRUE 31152
31150: GO 31163
31152: POP
// tech := tech_bazooka ; end ;
31153: LD_ADDR_VAR 0 5
31157: PUSH
31158: LD_INT 44
31160: ST_TO_ADDR
31161: GO 31164
31163: POP
// if Researched ( side , tech ) then
31164: LD_VAR 0 3
31168: PPUSH
31169: LD_VAR 0 5
31173: PPUSH
31174: CALL_OW 325
31178: IFFALSE 31205
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31180: LD_ADDR_VAR 0 2
31184: PUSH
31185: LD_INT 5
31187: PUSH
31188: LD_INT 8
31190: PUSH
31191: LD_INT 9
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: PUSH
31199: LD_VAR 0 4
31203: ARRAY
31204: ST_TO_ADDR
// end ;
31205: LD_VAR 0 2
31209: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31210: LD_INT 0
31212: PPUSH
31213: PPUSH
31214: PPUSH
// if not mines then
31215: LD_VAR 0 2
31219: NOT
31220: IFFALSE 31224
// exit ;
31222: GO 31368
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31224: LD_ADDR_VAR 0 5
31228: PUSH
31229: LD_INT 81
31231: PUSH
31232: LD_VAR 0 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 3
31243: PUSH
31244: LD_INT 21
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PPUSH
31262: CALL_OW 69
31266: ST_TO_ADDR
// for i in mines do
31267: LD_ADDR_VAR 0 4
31271: PUSH
31272: LD_VAR 0 2
31276: PUSH
31277: FOR_IN
31278: IFFALSE 31366
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31280: LD_VAR 0 4
31284: PUSH
31285: LD_INT 1
31287: ARRAY
31288: PPUSH
31289: LD_VAR 0 4
31293: PUSH
31294: LD_INT 2
31296: ARRAY
31297: PPUSH
31298: CALL_OW 458
31302: NOT
31303: IFFALSE 31307
// continue ;
31305: GO 31277
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31307: LD_VAR 0 4
31311: PUSH
31312: LD_INT 1
31314: ARRAY
31315: PPUSH
31316: LD_VAR 0 4
31320: PUSH
31321: LD_INT 2
31323: ARRAY
31324: PPUSH
31325: CALL_OW 428
31329: PUSH
31330: LD_VAR 0 5
31334: IN
31335: IFFALSE 31364
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31337: LD_VAR 0 4
31341: PUSH
31342: LD_INT 1
31344: ARRAY
31345: PPUSH
31346: LD_VAR 0 4
31350: PUSH
31351: LD_INT 2
31353: ARRAY
31354: PPUSH
31355: LD_VAR 0 1
31359: PPUSH
31360: CALL_OW 456
// end ;
31364: GO 31277
31366: POP
31367: POP
// end ;
31368: LD_VAR 0 3
31372: RET
// export function Count ( array ) ; begin
31373: LD_INT 0
31375: PPUSH
// result := array + 0 ;
31376: LD_ADDR_VAR 0 2
31380: PUSH
31381: LD_VAR 0 1
31385: PUSH
31386: LD_INT 0
31388: PLUS
31389: ST_TO_ADDR
// end ;
31390: LD_VAR 0 2
31394: RET
// export function IsEmpty ( building ) ; begin
31395: LD_INT 0
31397: PPUSH
// if not building then
31398: LD_VAR 0 1
31402: NOT
31403: IFFALSE 31407
// exit ;
31405: GO 31450
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31407: LD_ADDR_VAR 0 2
31411: PUSH
31412: LD_VAR 0 1
31416: PUSH
31417: LD_INT 22
31419: PUSH
31420: LD_VAR 0 1
31424: PPUSH
31425: CALL_OW 255
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 58
31436: PUSH
31437: EMPTY
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PPUSH
31444: CALL_OW 69
31448: IN
31449: ST_TO_ADDR
// end ;
31450: LD_VAR 0 2
31454: RET
// export function IsNotFull ( building ) ; var places ; begin
31455: LD_INT 0
31457: PPUSH
31458: PPUSH
// if not building then
31459: LD_VAR 0 1
31463: NOT
31464: IFFALSE 31468
// exit ;
31466: GO 31496
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31468: LD_ADDR_VAR 0 2
31472: PUSH
31473: LD_VAR 0 1
31477: PPUSH
31478: LD_INT 3
31480: PUSH
31481: LD_INT 62
31483: PUSH
31484: EMPTY
31485: LIST
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PPUSH
31491: CALL_OW 72
31495: ST_TO_ADDR
// end ;
31496: LD_VAR 0 2
31500: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31501: LD_INT 0
31503: PPUSH
31504: PPUSH
31505: PPUSH
31506: PPUSH
// tmp := [ ] ;
31507: LD_ADDR_VAR 0 3
31511: PUSH
31512: EMPTY
31513: ST_TO_ADDR
// list := [ ] ;
31514: LD_ADDR_VAR 0 5
31518: PUSH
31519: EMPTY
31520: ST_TO_ADDR
// for i = 16 to 25 do
31521: LD_ADDR_VAR 0 4
31525: PUSH
31526: DOUBLE
31527: LD_INT 16
31529: DEC
31530: ST_TO_ADDR
31531: LD_INT 25
31533: PUSH
31534: FOR_TO
31535: IFFALSE 31608
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31537: LD_ADDR_VAR 0 3
31541: PUSH
31542: LD_VAR 0 3
31546: PUSH
31547: LD_INT 22
31549: PUSH
31550: LD_VAR 0 1
31554: PPUSH
31555: CALL_OW 255
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 91
31566: PUSH
31567: LD_VAR 0 1
31571: PUSH
31572: LD_INT 6
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 30
31582: PUSH
31583: LD_VAR 0 4
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: PPUSH
31600: CALL_OW 69
31604: ADD
31605: ST_TO_ADDR
31606: GO 31534
31608: POP
31609: POP
// for i = 1 to tmp do
31610: LD_ADDR_VAR 0 4
31614: PUSH
31615: DOUBLE
31616: LD_INT 1
31618: DEC
31619: ST_TO_ADDR
31620: LD_VAR 0 3
31624: PUSH
31625: FOR_TO
31626: IFFALSE 31714
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31628: LD_ADDR_VAR 0 5
31632: PUSH
31633: LD_VAR 0 5
31637: PUSH
31638: LD_VAR 0 3
31642: PUSH
31643: LD_VAR 0 4
31647: ARRAY
31648: PPUSH
31649: CALL_OW 266
31653: PUSH
31654: LD_VAR 0 3
31658: PUSH
31659: LD_VAR 0 4
31663: ARRAY
31664: PPUSH
31665: CALL_OW 250
31669: PUSH
31670: LD_VAR 0 3
31674: PUSH
31675: LD_VAR 0 4
31679: ARRAY
31680: PPUSH
31681: CALL_OW 251
31685: PUSH
31686: LD_VAR 0 3
31690: PUSH
31691: LD_VAR 0 4
31695: ARRAY
31696: PPUSH
31697: CALL_OW 254
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: PUSH
31708: EMPTY
31709: LIST
31710: ADD
31711: ST_TO_ADDR
31712: GO 31625
31714: POP
31715: POP
// result := list ;
31716: LD_ADDR_VAR 0 2
31720: PUSH
31721: LD_VAR 0 5
31725: ST_TO_ADDR
// end ;
31726: LD_VAR 0 2
31730: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31731: LD_INT 0
31733: PPUSH
31734: PPUSH
31735: PPUSH
31736: PPUSH
31737: PPUSH
31738: PPUSH
31739: PPUSH
// if not factory then
31740: LD_VAR 0 1
31744: NOT
31745: IFFALSE 31749
// exit ;
31747: GO 32342
// if control = control_apeman then
31749: LD_VAR 0 4
31753: PUSH
31754: LD_INT 5
31756: EQUAL
31757: IFFALSE 31866
// begin tmp := UnitsInside ( factory ) ;
31759: LD_ADDR_VAR 0 8
31763: PUSH
31764: LD_VAR 0 1
31768: PPUSH
31769: CALL_OW 313
31773: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31774: LD_VAR 0 8
31778: PPUSH
31779: LD_INT 25
31781: PUSH
31782: LD_INT 12
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PPUSH
31789: CALL_OW 72
31793: NOT
31794: IFFALSE 31804
// control := control_manual ;
31796: LD_ADDR_VAR 0 4
31800: PUSH
31801: LD_INT 1
31803: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31804: LD_ADDR_VAR 0 8
31808: PUSH
31809: LD_VAR 0 1
31813: PPUSH
31814: CALL 31501 0 1
31818: ST_TO_ADDR
// if tmp then
31819: LD_VAR 0 8
31823: IFFALSE 31866
// begin for i in tmp do
31825: LD_ADDR_VAR 0 7
31829: PUSH
31830: LD_VAR 0 8
31834: PUSH
31835: FOR_IN
31836: IFFALSE 31864
// if i [ 1 ] = b_ext_radio then
31838: LD_VAR 0 7
31842: PUSH
31843: LD_INT 1
31845: ARRAY
31846: PUSH
31847: LD_INT 22
31849: EQUAL
31850: IFFALSE 31862
// begin control := control_remote ;
31852: LD_ADDR_VAR 0 4
31856: PUSH
31857: LD_INT 2
31859: ST_TO_ADDR
// break ;
31860: GO 31864
// end ;
31862: GO 31835
31864: POP
31865: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31866: LD_VAR 0 1
31870: PPUSH
31871: LD_VAR 0 2
31875: PPUSH
31876: LD_VAR 0 3
31880: PPUSH
31881: LD_VAR 0 4
31885: PPUSH
31886: LD_VAR 0 5
31890: PPUSH
31891: CALL_OW 448
31895: IFFALSE 31930
// begin result := [ chassis , engine , control , weapon ] ;
31897: LD_ADDR_VAR 0 6
31901: PUSH
31902: LD_VAR 0 2
31906: PUSH
31907: LD_VAR 0 3
31911: PUSH
31912: LD_VAR 0 4
31916: PUSH
31917: LD_VAR 0 5
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: ST_TO_ADDR
// exit ;
31928: GO 32342
// end ; _chassis := AvailableChassisList ( factory ) ;
31930: LD_ADDR_VAR 0 9
31934: PUSH
31935: LD_VAR 0 1
31939: PPUSH
31940: CALL_OW 475
31944: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31945: LD_ADDR_VAR 0 11
31949: PUSH
31950: LD_VAR 0 1
31954: PPUSH
31955: CALL_OW 476
31959: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31960: LD_ADDR_VAR 0 12
31964: PUSH
31965: LD_VAR 0 1
31969: PPUSH
31970: CALL_OW 477
31974: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31975: LD_ADDR_VAR 0 10
31979: PUSH
31980: LD_VAR 0 1
31984: PPUSH
31985: CALL_OW 478
31989: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31990: LD_VAR 0 9
31994: NOT
31995: PUSH
31996: LD_VAR 0 11
32000: NOT
32001: OR
32002: PUSH
32003: LD_VAR 0 12
32007: NOT
32008: OR
32009: PUSH
32010: LD_VAR 0 10
32014: NOT
32015: OR
32016: IFFALSE 32051
// begin result := [ chassis , engine , control , weapon ] ;
32018: LD_ADDR_VAR 0 6
32022: PUSH
32023: LD_VAR 0 2
32027: PUSH
32028: LD_VAR 0 3
32032: PUSH
32033: LD_VAR 0 4
32037: PUSH
32038: LD_VAR 0 5
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: ST_TO_ADDR
// exit ;
32049: GO 32342
// end ; if not chassis in _chassis then
32051: LD_VAR 0 2
32055: PUSH
32056: LD_VAR 0 9
32060: IN
32061: NOT
32062: IFFALSE 32088
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32064: LD_ADDR_VAR 0 2
32068: PUSH
32069: LD_VAR 0 9
32073: PUSH
32074: LD_INT 1
32076: PPUSH
32077: LD_VAR 0 9
32081: PPUSH
32082: CALL_OW 12
32086: ARRAY
32087: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32088: LD_VAR 0 2
32092: PPUSH
32093: LD_VAR 0 3
32097: PPUSH
32098: CALL 32347 0 2
32102: NOT
32103: IFFALSE 32162
// repeat engine := _engine [ 1 ] ;
32105: LD_ADDR_VAR 0 3
32109: PUSH
32110: LD_VAR 0 11
32114: PUSH
32115: LD_INT 1
32117: ARRAY
32118: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32119: LD_ADDR_VAR 0 11
32123: PUSH
32124: LD_VAR 0 11
32128: PPUSH
32129: LD_INT 1
32131: PPUSH
32132: CALL_OW 3
32136: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32137: LD_VAR 0 2
32141: PPUSH
32142: LD_VAR 0 3
32146: PPUSH
32147: CALL 32347 0 2
32151: PUSH
32152: LD_VAR 0 11
32156: PUSH
32157: EMPTY
32158: EQUAL
32159: OR
32160: IFFALSE 32105
// if not control in _control then
32162: LD_VAR 0 4
32166: PUSH
32167: LD_VAR 0 12
32171: IN
32172: NOT
32173: IFFALSE 32199
// control := _control [ rand ( 1 , _control ) ] ;
32175: LD_ADDR_VAR 0 4
32179: PUSH
32180: LD_VAR 0 12
32184: PUSH
32185: LD_INT 1
32187: PPUSH
32188: LD_VAR 0 12
32192: PPUSH
32193: CALL_OW 12
32197: ARRAY
32198: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32199: LD_VAR 0 2
32203: PPUSH
32204: LD_VAR 0 5
32208: PPUSH
32209: CALL 32567 0 2
32213: NOT
32214: IFFALSE 32273
// repeat weapon := _weapon [ 1 ] ;
32216: LD_ADDR_VAR 0 5
32220: PUSH
32221: LD_VAR 0 10
32225: PUSH
32226: LD_INT 1
32228: ARRAY
32229: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32230: LD_ADDR_VAR 0 10
32234: PUSH
32235: LD_VAR 0 10
32239: PPUSH
32240: LD_INT 1
32242: PPUSH
32243: CALL_OW 3
32247: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32248: LD_VAR 0 2
32252: PPUSH
32253: LD_VAR 0 5
32257: PPUSH
32258: CALL 32567 0 2
32262: PUSH
32263: LD_VAR 0 10
32267: PUSH
32268: EMPTY
32269: EQUAL
32270: OR
32271: IFFALSE 32216
// result := [ ] ;
32273: LD_ADDR_VAR 0 6
32277: PUSH
32278: EMPTY
32279: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32280: LD_VAR 0 1
32284: PPUSH
32285: LD_VAR 0 2
32289: PPUSH
32290: LD_VAR 0 3
32294: PPUSH
32295: LD_VAR 0 4
32299: PPUSH
32300: LD_VAR 0 5
32304: PPUSH
32305: CALL_OW 448
32309: IFFALSE 32342
// result := [ chassis , engine , control , weapon ] ;
32311: LD_ADDR_VAR 0 6
32315: PUSH
32316: LD_VAR 0 2
32320: PUSH
32321: LD_VAR 0 3
32325: PUSH
32326: LD_VAR 0 4
32330: PUSH
32331: LD_VAR 0 5
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: ST_TO_ADDR
// end ;
32342: LD_VAR 0 6
32346: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32347: LD_INT 0
32349: PPUSH
// if not chassis or not engine then
32350: LD_VAR 0 1
32354: NOT
32355: PUSH
32356: LD_VAR 0 2
32360: NOT
32361: OR
32362: IFFALSE 32366
// exit ;
32364: GO 32562
// case engine of engine_solar :
32366: LD_VAR 0 2
32370: PUSH
32371: LD_INT 2
32373: DOUBLE
32374: EQUAL
32375: IFTRUE 32379
32377: GO 32417
32379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32380: LD_ADDR_VAR 0 3
32384: PUSH
32385: LD_INT 11
32387: PUSH
32388: LD_INT 12
32390: PUSH
32391: LD_INT 13
32393: PUSH
32394: LD_INT 14
32396: PUSH
32397: LD_INT 1
32399: PUSH
32400: LD_INT 2
32402: PUSH
32403: LD_INT 3
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: ST_TO_ADDR
32415: GO 32546
32417: LD_INT 1
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32487
32425: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32426: LD_ADDR_VAR 0 3
32430: PUSH
32431: LD_INT 11
32433: PUSH
32434: LD_INT 12
32436: PUSH
32437: LD_INT 13
32439: PUSH
32440: LD_INT 14
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: LD_INT 3
32451: PUSH
32452: LD_INT 4
32454: PUSH
32455: LD_INT 5
32457: PUSH
32458: LD_INT 21
32460: PUSH
32461: LD_INT 23
32463: PUSH
32464: LD_INT 22
32466: PUSH
32467: LD_INT 24
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: ST_TO_ADDR
32485: GO 32546
32487: LD_INT 3
32489: DOUBLE
32490: EQUAL
32491: IFTRUE 32495
32493: GO 32545
32495: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32496: LD_ADDR_VAR 0 3
32500: PUSH
32501: LD_INT 13
32503: PUSH
32504: LD_INT 14
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: LD_INT 4
32515: PUSH
32516: LD_INT 5
32518: PUSH
32519: LD_INT 21
32521: PUSH
32522: LD_INT 22
32524: PUSH
32525: LD_INT 23
32527: PUSH
32528: LD_INT 24
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: ST_TO_ADDR
32543: GO 32546
32545: POP
// result := ( chassis in result ) ;
32546: LD_ADDR_VAR 0 3
32550: PUSH
32551: LD_VAR 0 1
32555: PUSH
32556: LD_VAR 0 3
32560: IN
32561: ST_TO_ADDR
// end ;
32562: LD_VAR 0 3
32566: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32567: LD_INT 0
32569: PPUSH
// if not chassis or not weapon then
32570: LD_VAR 0 1
32574: NOT
32575: PUSH
32576: LD_VAR 0 2
32580: NOT
32581: OR
32582: IFFALSE 32586
// exit ;
32584: GO 33646
// case weapon of us_machine_gun :
32586: LD_VAR 0 2
32590: PUSH
32591: LD_INT 2
32593: DOUBLE
32594: EQUAL
32595: IFTRUE 32599
32597: GO 32629
32599: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32600: LD_ADDR_VAR 0 3
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: LD_INT 4
32616: PUSH
32617: LD_INT 5
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
32627: GO 33630
32629: LD_INT 3
32631: DOUBLE
32632: EQUAL
32633: IFTRUE 32637
32635: GO 32667
32637: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32638: LD_ADDR_VAR 0 3
32642: PUSH
32643: LD_INT 1
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: LD_INT 4
32654: PUSH
32655: LD_INT 5
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: ST_TO_ADDR
32665: GO 33630
32667: LD_INT 11
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32705
32675: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32676: LD_ADDR_VAR 0 3
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: LD_INT 3
32689: PUSH
32690: LD_INT 4
32692: PUSH
32693: LD_INT 5
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: ST_TO_ADDR
32703: GO 33630
32705: LD_INT 4
32707: DOUBLE
32708: EQUAL
32709: IFTRUE 32713
32711: GO 32739
32713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32714: LD_ADDR_VAR 0 3
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: LD_INT 4
32727: PUSH
32728: LD_INT 5
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: ST_TO_ADDR
32737: GO 33630
32739: LD_INT 5
32741: DOUBLE
32742: EQUAL
32743: IFTRUE 32747
32745: GO 32773
32747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32748: LD_ADDR_VAR 0 3
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: LD_INT 3
32758: PUSH
32759: LD_INT 4
32761: PUSH
32762: LD_INT 5
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: ST_TO_ADDR
32771: GO 33630
32773: LD_INT 9
32775: DOUBLE
32776: EQUAL
32777: IFTRUE 32781
32779: GO 32807
32781: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32782: LD_ADDR_VAR 0 3
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: LD_INT 4
32795: PUSH
32796: LD_INT 5
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: ST_TO_ADDR
32805: GO 33630
32807: LD_INT 7
32809: DOUBLE
32810: EQUAL
32811: IFTRUE 32815
32813: GO 32841
32815: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32816: LD_ADDR_VAR 0 3
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: LD_INT 3
32826: PUSH
32827: LD_INT 4
32829: PUSH
32830: LD_INT 5
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: ST_TO_ADDR
32839: GO 33630
32841: LD_INT 12
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32849
32847: GO 32875
32849: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32850: LD_ADDR_VAR 0 3
32854: PUSH
32855: LD_INT 2
32857: PUSH
32858: LD_INT 3
32860: PUSH
32861: LD_INT 4
32863: PUSH
32864: LD_INT 5
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: ST_TO_ADDR
32873: GO 33630
32875: LD_INT 13
32877: DOUBLE
32878: EQUAL
32879: IFTRUE 32883
32881: GO 32909
32883: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32884: LD_ADDR_VAR 0 3
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: LD_INT 4
32897: PUSH
32898: LD_INT 5
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: ST_TO_ADDR
32907: GO 33630
32909: LD_INT 14
32911: DOUBLE
32912: EQUAL
32913: IFTRUE 32917
32915: GO 32935
32917: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32918: LD_ADDR_VAR 0 3
32922: PUSH
32923: LD_INT 4
32925: PUSH
32926: LD_INT 5
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: ST_TO_ADDR
32933: GO 33630
32935: LD_INT 6
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32961
32943: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32944: LD_ADDR_VAR 0 3
32948: PUSH
32949: LD_INT 4
32951: PUSH
32952: LD_INT 5
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: ST_TO_ADDR
32959: GO 33630
32961: LD_INT 10
32963: DOUBLE
32964: EQUAL
32965: IFTRUE 32969
32967: GO 32987
32969: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32970: LD_ADDR_VAR 0 3
32974: PUSH
32975: LD_INT 4
32977: PUSH
32978: LD_INT 5
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: ST_TO_ADDR
32985: GO 33630
32987: LD_INT 22
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33021
32995: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32996: LD_ADDR_VAR 0 3
33000: PUSH
33001: LD_INT 11
33003: PUSH
33004: LD_INT 12
33006: PUSH
33007: LD_INT 13
33009: PUSH
33010: LD_INT 14
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: ST_TO_ADDR
33019: GO 33630
33021: LD_INT 23
33023: DOUBLE
33024: EQUAL
33025: IFTRUE 33029
33027: GO 33055
33029: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33030: LD_ADDR_VAR 0 3
33034: PUSH
33035: LD_INT 11
33037: PUSH
33038: LD_INT 12
33040: PUSH
33041: LD_INT 13
33043: PUSH
33044: LD_INT 14
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: ST_TO_ADDR
33053: GO 33630
33055: LD_INT 24
33057: DOUBLE
33058: EQUAL
33059: IFTRUE 33063
33061: GO 33089
33063: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33064: LD_ADDR_VAR 0 3
33068: PUSH
33069: LD_INT 11
33071: PUSH
33072: LD_INT 12
33074: PUSH
33075: LD_INT 13
33077: PUSH
33078: LD_INT 14
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: ST_TO_ADDR
33087: GO 33630
33089: LD_INT 30
33091: DOUBLE
33092: EQUAL
33093: IFTRUE 33097
33095: GO 33123
33097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33098: LD_ADDR_VAR 0 3
33102: PUSH
33103: LD_INT 11
33105: PUSH
33106: LD_INT 12
33108: PUSH
33109: LD_INT 13
33111: PUSH
33112: LD_INT 14
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: ST_TO_ADDR
33121: GO 33630
33123: LD_INT 25
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33131
33129: GO 33149
33131: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33132: LD_ADDR_VAR 0 3
33136: PUSH
33137: LD_INT 13
33139: PUSH
33140: LD_INT 14
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: ST_TO_ADDR
33147: GO 33630
33149: LD_INT 27
33151: DOUBLE
33152: EQUAL
33153: IFTRUE 33157
33155: GO 33175
33157: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33158: LD_ADDR_VAR 0 3
33162: PUSH
33163: LD_INT 13
33165: PUSH
33166: LD_INT 14
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: ST_TO_ADDR
33173: GO 33630
33175: LD_INT 92
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33183
33181: GO 33209
33183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33184: LD_ADDR_VAR 0 3
33188: PUSH
33189: LD_INT 11
33191: PUSH
33192: LD_INT 12
33194: PUSH
33195: LD_INT 13
33197: PUSH
33198: LD_INT 14
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: ST_TO_ADDR
33207: GO 33630
33209: LD_INT 28
33211: DOUBLE
33212: EQUAL
33213: IFTRUE 33217
33215: GO 33235
33217: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33218: LD_ADDR_VAR 0 3
33222: PUSH
33223: LD_INT 13
33225: PUSH
33226: LD_INT 14
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: ST_TO_ADDR
33233: GO 33630
33235: LD_INT 29
33237: DOUBLE
33238: EQUAL
33239: IFTRUE 33243
33241: GO 33261
33243: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33244: LD_ADDR_VAR 0 3
33248: PUSH
33249: LD_INT 13
33251: PUSH
33252: LD_INT 14
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: ST_TO_ADDR
33259: GO 33630
33261: LD_INT 31
33263: DOUBLE
33264: EQUAL
33265: IFTRUE 33269
33267: GO 33287
33269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33270: LD_ADDR_VAR 0 3
33274: PUSH
33275: LD_INT 13
33277: PUSH
33278: LD_INT 14
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: ST_TO_ADDR
33285: GO 33630
33287: LD_INT 26
33289: DOUBLE
33290: EQUAL
33291: IFTRUE 33295
33293: GO 33313
33295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33296: LD_ADDR_VAR 0 3
33300: PUSH
33301: LD_INT 13
33303: PUSH
33304: LD_INT 14
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: ST_TO_ADDR
33311: GO 33630
33313: LD_INT 42
33315: DOUBLE
33316: EQUAL
33317: IFTRUE 33321
33319: GO 33347
33321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33322: LD_ADDR_VAR 0 3
33326: PUSH
33327: LD_INT 21
33329: PUSH
33330: LD_INT 22
33332: PUSH
33333: LD_INT 23
33335: PUSH
33336: LD_INT 24
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: ST_TO_ADDR
33345: GO 33630
33347: LD_INT 43
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33355
33353: GO 33381
33355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33356: LD_ADDR_VAR 0 3
33360: PUSH
33361: LD_INT 21
33363: PUSH
33364: LD_INT 22
33366: PUSH
33367: LD_INT 23
33369: PUSH
33370: LD_INT 24
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: ST_TO_ADDR
33379: GO 33630
33381: LD_INT 44
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33389
33387: GO 33415
33389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33390: LD_ADDR_VAR 0 3
33394: PUSH
33395: LD_INT 21
33397: PUSH
33398: LD_INT 22
33400: PUSH
33401: LD_INT 23
33403: PUSH
33404: LD_INT 24
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: ST_TO_ADDR
33413: GO 33630
33415: LD_INT 45
33417: DOUBLE
33418: EQUAL
33419: IFTRUE 33423
33421: GO 33449
33423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33424: LD_ADDR_VAR 0 3
33428: PUSH
33429: LD_INT 21
33431: PUSH
33432: LD_INT 22
33434: PUSH
33435: LD_INT 23
33437: PUSH
33438: LD_INT 24
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: ST_TO_ADDR
33447: GO 33630
33449: LD_INT 49
33451: DOUBLE
33452: EQUAL
33453: IFTRUE 33457
33455: GO 33483
33457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33458: LD_ADDR_VAR 0 3
33462: PUSH
33463: LD_INT 21
33465: PUSH
33466: LD_INT 22
33468: PUSH
33469: LD_INT 23
33471: PUSH
33472: LD_INT 24
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: ST_TO_ADDR
33481: GO 33630
33483: LD_INT 51
33485: DOUBLE
33486: EQUAL
33487: IFTRUE 33491
33489: GO 33517
33491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33492: LD_ADDR_VAR 0 3
33496: PUSH
33497: LD_INT 21
33499: PUSH
33500: LD_INT 22
33502: PUSH
33503: LD_INT 23
33505: PUSH
33506: LD_INT 24
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: ST_TO_ADDR
33515: GO 33630
33517: LD_INT 52
33519: DOUBLE
33520: EQUAL
33521: IFTRUE 33525
33523: GO 33551
33525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33526: LD_ADDR_VAR 0 3
33530: PUSH
33531: LD_INT 21
33533: PUSH
33534: LD_INT 22
33536: PUSH
33537: LD_INT 23
33539: PUSH
33540: LD_INT 24
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: ST_TO_ADDR
33549: GO 33630
33551: LD_INT 53
33553: DOUBLE
33554: EQUAL
33555: IFTRUE 33559
33557: GO 33577
33559: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33560: LD_ADDR_VAR 0 3
33564: PUSH
33565: LD_INT 23
33567: PUSH
33568: LD_INT 24
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: ST_TO_ADDR
33575: GO 33630
33577: LD_INT 46
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33585
33583: GO 33603
33585: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33586: LD_ADDR_VAR 0 3
33590: PUSH
33591: LD_INT 23
33593: PUSH
33594: LD_INT 24
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: ST_TO_ADDR
33601: GO 33630
33603: LD_INT 47
33605: DOUBLE
33606: EQUAL
33607: IFTRUE 33611
33609: GO 33629
33611: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33612: LD_ADDR_VAR 0 3
33616: PUSH
33617: LD_INT 23
33619: PUSH
33620: LD_INT 24
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: ST_TO_ADDR
33627: GO 33630
33629: POP
// result := ( chassis in result ) ;
33630: LD_ADDR_VAR 0 3
33634: PUSH
33635: LD_VAR 0 1
33639: PUSH
33640: LD_VAR 0 3
33644: IN
33645: ST_TO_ADDR
// end ;
33646: LD_VAR 0 3
33650: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33651: LD_INT 0
33653: PPUSH
33654: PPUSH
33655: PPUSH
33656: PPUSH
33657: PPUSH
33658: PPUSH
33659: PPUSH
// result := array ;
33660: LD_ADDR_VAR 0 5
33664: PUSH
33665: LD_VAR 0 1
33669: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33670: LD_VAR 0 1
33674: NOT
33675: PUSH
33676: LD_VAR 0 2
33680: NOT
33681: OR
33682: PUSH
33683: LD_VAR 0 3
33687: NOT
33688: OR
33689: PUSH
33690: LD_VAR 0 2
33694: PUSH
33695: LD_VAR 0 1
33699: GREATER
33700: OR
33701: PUSH
33702: LD_VAR 0 3
33706: PUSH
33707: LD_VAR 0 1
33711: GREATER
33712: OR
33713: IFFALSE 33717
// exit ;
33715: GO 34013
// if direction then
33717: LD_VAR 0 4
33721: IFFALSE 33785
// begin d := 1 ;
33723: LD_ADDR_VAR 0 9
33727: PUSH
33728: LD_INT 1
33730: ST_TO_ADDR
// if i_from > i_to then
33731: LD_VAR 0 2
33735: PUSH
33736: LD_VAR 0 3
33740: GREATER
33741: IFFALSE 33767
// length := ( array - i_from ) + i_to else
33743: LD_ADDR_VAR 0 11
33747: PUSH
33748: LD_VAR 0 1
33752: PUSH
33753: LD_VAR 0 2
33757: MINUS
33758: PUSH
33759: LD_VAR 0 3
33763: PLUS
33764: ST_TO_ADDR
33765: GO 33783
// length := i_to - i_from ;
33767: LD_ADDR_VAR 0 11
33771: PUSH
33772: LD_VAR 0 3
33776: PUSH
33777: LD_VAR 0 2
33781: MINUS
33782: ST_TO_ADDR
// end else
33783: GO 33846
// begin d := - 1 ;
33785: LD_ADDR_VAR 0 9
33789: PUSH
33790: LD_INT 1
33792: NEG
33793: ST_TO_ADDR
// if i_from > i_to then
33794: LD_VAR 0 2
33798: PUSH
33799: LD_VAR 0 3
33803: GREATER
33804: IFFALSE 33824
// length := i_from - i_to else
33806: LD_ADDR_VAR 0 11
33810: PUSH
33811: LD_VAR 0 2
33815: PUSH
33816: LD_VAR 0 3
33820: MINUS
33821: ST_TO_ADDR
33822: GO 33846
// length := ( array - i_to ) + i_from ;
33824: LD_ADDR_VAR 0 11
33828: PUSH
33829: LD_VAR 0 1
33833: PUSH
33834: LD_VAR 0 3
33838: MINUS
33839: PUSH
33840: LD_VAR 0 2
33844: PLUS
33845: ST_TO_ADDR
// end ; if not length then
33846: LD_VAR 0 11
33850: NOT
33851: IFFALSE 33855
// exit ;
33853: GO 34013
// tmp := array ;
33855: LD_ADDR_VAR 0 10
33859: PUSH
33860: LD_VAR 0 1
33864: ST_TO_ADDR
// for i = 1 to length do
33865: LD_ADDR_VAR 0 6
33869: PUSH
33870: DOUBLE
33871: LD_INT 1
33873: DEC
33874: ST_TO_ADDR
33875: LD_VAR 0 11
33879: PUSH
33880: FOR_TO
33881: IFFALSE 34001
// begin for j = 1 to array do
33883: LD_ADDR_VAR 0 7
33887: PUSH
33888: DOUBLE
33889: LD_INT 1
33891: DEC
33892: ST_TO_ADDR
33893: LD_VAR 0 1
33897: PUSH
33898: FOR_TO
33899: IFFALSE 33987
// begin k := j + d ;
33901: LD_ADDR_VAR 0 8
33905: PUSH
33906: LD_VAR 0 7
33910: PUSH
33911: LD_VAR 0 9
33915: PLUS
33916: ST_TO_ADDR
// if k > array then
33917: LD_VAR 0 8
33921: PUSH
33922: LD_VAR 0 1
33926: GREATER
33927: IFFALSE 33937
// k := 1 ;
33929: LD_ADDR_VAR 0 8
33933: PUSH
33934: LD_INT 1
33936: ST_TO_ADDR
// if not k then
33937: LD_VAR 0 8
33941: NOT
33942: IFFALSE 33954
// k := array ;
33944: LD_ADDR_VAR 0 8
33948: PUSH
33949: LD_VAR 0 1
33953: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33954: LD_ADDR_VAR 0 10
33958: PUSH
33959: LD_VAR 0 10
33963: PPUSH
33964: LD_VAR 0 8
33968: PPUSH
33969: LD_VAR 0 1
33973: PUSH
33974: LD_VAR 0 7
33978: ARRAY
33979: PPUSH
33980: CALL_OW 1
33984: ST_TO_ADDR
// end ;
33985: GO 33898
33987: POP
33988: POP
// array := tmp ;
33989: LD_ADDR_VAR 0 1
33993: PUSH
33994: LD_VAR 0 10
33998: ST_TO_ADDR
// end ;
33999: GO 33880
34001: POP
34002: POP
// result := array ;
34003: LD_ADDR_VAR 0 5
34007: PUSH
34008: LD_VAR 0 1
34012: ST_TO_ADDR
// end ;
34013: LD_VAR 0 5
34017: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34018: LD_INT 0
34020: PPUSH
34021: PPUSH
// result := 0 ;
34022: LD_ADDR_VAR 0 3
34026: PUSH
34027: LD_INT 0
34029: ST_TO_ADDR
// if not array or not value in array then
34030: LD_VAR 0 1
34034: NOT
34035: PUSH
34036: LD_VAR 0 2
34040: PUSH
34041: LD_VAR 0 1
34045: IN
34046: NOT
34047: OR
34048: IFFALSE 34052
// exit ;
34050: GO 34106
// for i = 1 to array do
34052: LD_ADDR_VAR 0 4
34056: PUSH
34057: DOUBLE
34058: LD_INT 1
34060: DEC
34061: ST_TO_ADDR
34062: LD_VAR 0 1
34066: PUSH
34067: FOR_TO
34068: IFFALSE 34104
// if value = array [ i ] then
34070: LD_VAR 0 2
34074: PUSH
34075: LD_VAR 0 1
34079: PUSH
34080: LD_VAR 0 4
34084: ARRAY
34085: EQUAL
34086: IFFALSE 34102
// begin result := i ;
34088: LD_ADDR_VAR 0 3
34092: PUSH
34093: LD_VAR 0 4
34097: ST_TO_ADDR
// exit ;
34098: POP
34099: POP
34100: GO 34106
// end ;
34102: GO 34067
34104: POP
34105: POP
// end ;
34106: LD_VAR 0 3
34110: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34111: LD_INT 0
34113: PPUSH
// vc_chassis := chassis ;
34114: LD_ADDR_OWVAR 37
34118: PUSH
34119: LD_VAR 0 1
34123: ST_TO_ADDR
// vc_engine := engine ;
34124: LD_ADDR_OWVAR 39
34128: PUSH
34129: LD_VAR 0 2
34133: ST_TO_ADDR
// vc_control := control ;
34134: LD_ADDR_OWVAR 38
34138: PUSH
34139: LD_VAR 0 3
34143: ST_TO_ADDR
// vc_weapon := weapon ;
34144: LD_ADDR_OWVAR 40
34148: PUSH
34149: LD_VAR 0 4
34153: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34154: LD_ADDR_OWVAR 41
34158: PUSH
34159: LD_VAR 0 5
34163: ST_TO_ADDR
// end ;
34164: LD_VAR 0 6
34168: RET
// export function WantPlant ( unit ) ; var task ; begin
34169: LD_INT 0
34171: PPUSH
34172: PPUSH
// result := false ;
34173: LD_ADDR_VAR 0 2
34177: PUSH
34178: LD_INT 0
34180: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34181: LD_ADDR_VAR 0 3
34185: PUSH
34186: LD_VAR 0 1
34190: PPUSH
34191: CALL_OW 437
34195: ST_TO_ADDR
// if task then
34196: LD_VAR 0 3
34200: IFFALSE 34228
// if task [ 1 ] [ 1 ] = p then
34202: LD_VAR 0 3
34206: PUSH
34207: LD_INT 1
34209: ARRAY
34210: PUSH
34211: LD_INT 1
34213: ARRAY
34214: PUSH
34215: LD_STRING p
34217: EQUAL
34218: IFFALSE 34228
// result := true ;
34220: LD_ADDR_VAR 0 2
34224: PUSH
34225: LD_INT 1
34227: ST_TO_ADDR
// end ;
34228: LD_VAR 0 2
34232: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34233: LD_INT 0
34235: PPUSH
34236: PPUSH
34237: PPUSH
34238: PPUSH
// if pos < 1 then
34239: LD_VAR 0 2
34243: PUSH
34244: LD_INT 1
34246: LESS
34247: IFFALSE 34251
// exit ;
34249: GO 34554
// if pos = 1 then
34251: LD_VAR 0 2
34255: PUSH
34256: LD_INT 1
34258: EQUAL
34259: IFFALSE 34292
// result := Replace ( arr , pos [ 1 ] , value ) else
34261: LD_ADDR_VAR 0 4
34265: PUSH
34266: LD_VAR 0 1
34270: PPUSH
34271: LD_VAR 0 2
34275: PUSH
34276: LD_INT 1
34278: ARRAY
34279: PPUSH
34280: LD_VAR 0 3
34284: PPUSH
34285: CALL_OW 1
34289: ST_TO_ADDR
34290: GO 34554
// begin tmp := arr ;
34292: LD_ADDR_VAR 0 6
34296: PUSH
34297: LD_VAR 0 1
34301: ST_TO_ADDR
// s_arr := [ tmp ] ;
34302: LD_ADDR_VAR 0 7
34306: PUSH
34307: LD_VAR 0 6
34311: PUSH
34312: EMPTY
34313: LIST
34314: ST_TO_ADDR
// for i = 1 to pos - 1 do
34315: LD_ADDR_VAR 0 5
34319: PUSH
34320: DOUBLE
34321: LD_INT 1
34323: DEC
34324: ST_TO_ADDR
34325: LD_VAR 0 2
34329: PUSH
34330: LD_INT 1
34332: MINUS
34333: PUSH
34334: FOR_TO
34335: IFFALSE 34380
// begin tmp := tmp [ pos [ i ] ] ;
34337: LD_ADDR_VAR 0 6
34341: PUSH
34342: LD_VAR 0 6
34346: PUSH
34347: LD_VAR 0 2
34351: PUSH
34352: LD_VAR 0 5
34356: ARRAY
34357: ARRAY
34358: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34359: LD_ADDR_VAR 0 7
34363: PUSH
34364: LD_VAR 0 7
34368: PUSH
34369: LD_VAR 0 6
34373: PUSH
34374: EMPTY
34375: LIST
34376: ADD
34377: ST_TO_ADDR
// end ;
34378: GO 34334
34380: POP
34381: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34382: LD_ADDR_VAR 0 6
34386: PUSH
34387: LD_VAR 0 6
34391: PPUSH
34392: LD_VAR 0 2
34396: PUSH
34397: LD_VAR 0 2
34401: ARRAY
34402: PPUSH
34403: LD_VAR 0 3
34407: PPUSH
34408: CALL_OW 1
34412: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34413: LD_ADDR_VAR 0 7
34417: PUSH
34418: LD_VAR 0 7
34422: PPUSH
34423: LD_VAR 0 7
34427: PPUSH
34428: LD_VAR 0 6
34432: PPUSH
34433: CALL_OW 1
34437: ST_TO_ADDR
// for i = s_arr downto 2 do
34438: LD_ADDR_VAR 0 5
34442: PUSH
34443: DOUBLE
34444: LD_VAR 0 7
34448: INC
34449: ST_TO_ADDR
34450: LD_INT 2
34452: PUSH
34453: FOR_DOWNTO
34454: IFFALSE 34538
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34456: LD_ADDR_VAR 0 6
34460: PUSH
34461: LD_VAR 0 7
34465: PUSH
34466: LD_VAR 0 5
34470: PUSH
34471: LD_INT 1
34473: MINUS
34474: ARRAY
34475: PPUSH
34476: LD_VAR 0 2
34480: PUSH
34481: LD_VAR 0 5
34485: PUSH
34486: LD_INT 1
34488: MINUS
34489: ARRAY
34490: PPUSH
34491: LD_VAR 0 7
34495: PUSH
34496: LD_VAR 0 5
34500: ARRAY
34501: PPUSH
34502: CALL_OW 1
34506: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34507: LD_ADDR_VAR 0 7
34511: PUSH
34512: LD_VAR 0 7
34516: PPUSH
34517: LD_VAR 0 5
34521: PUSH
34522: LD_INT 1
34524: MINUS
34525: PPUSH
34526: LD_VAR 0 6
34530: PPUSH
34531: CALL_OW 1
34535: ST_TO_ADDR
// end ;
34536: GO 34453
34538: POP
34539: POP
// result := s_arr [ 1 ] ;
34540: LD_ADDR_VAR 0 4
34544: PUSH
34545: LD_VAR 0 7
34549: PUSH
34550: LD_INT 1
34552: ARRAY
34553: ST_TO_ADDR
// end ; end ;
34554: LD_VAR 0 4
34558: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34559: LD_INT 0
34561: PPUSH
34562: PPUSH
// if not list then
34563: LD_VAR 0 1
34567: NOT
34568: IFFALSE 34572
// exit ;
34570: GO 34663
// i := list [ pos1 ] ;
34572: LD_ADDR_VAR 0 5
34576: PUSH
34577: LD_VAR 0 1
34581: PUSH
34582: LD_VAR 0 2
34586: ARRAY
34587: ST_TO_ADDR
// if not i then
34588: LD_VAR 0 5
34592: NOT
34593: IFFALSE 34597
// exit ;
34595: GO 34663
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34597: LD_ADDR_VAR 0 1
34601: PUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: LD_VAR 0 2
34611: PPUSH
34612: LD_VAR 0 1
34616: PUSH
34617: LD_VAR 0 3
34621: ARRAY
34622: PPUSH
34623: CALL_OW 1
34627: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34628: LD_ADDR_VAR 0 1
34632: PUSH
34633: LD_VAR 0 1
34637: PPUSH
34638: LD_VAR 0 3
34642: PPUSH
34643: LD_VAR 0 5
34647: PPUSH
34648: CALL_OW 1
34652: ST_TO_ADDR
// result := list ;
34653: LD_ADDR_VAR 0 4
34657: PUSH
34658: LD_VAR 0 1
34662: ST_TO_ADDR
// end ;
34663: LD_VAR 0 4
34667: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34668: LD_INT 0
34670: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34671: LD_ADDR_VAR 0 5
34675: PUSH
34676: LD_VAR 0 1
34680: PPUSH
34681: CALL_OW 250
34685: PPUSH
34686: LD_VAR 0 1
34690: PPUSH
34691: CALL_OW 251
34695: PPUSH
34696: LD_VAR 0 2
34700: PPUSH
34701: LD_VAR 0 3
34705: PPUSH
34706: LD_VAR 0 4
34710: PPUSH
34711: CALL 35089 0 5
34715: ST_TO_ADDR
// end ;
34716: LD_VAR 0 5
34720: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34721: LD_INT 0
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
// if not list or not unit then
34727: LD_VAR 0 2
34731: NOT
34732: PUSH
34733: LD_VAR 0 1
34737: NOT
34738: OR
34739: IFFALSE 34743
// exit ;
34741: GO 35084
// result := [ ] ;
34743: LD_ADDR_VAR 0 5
34747: PUSH
34748: EMPTY
34749: ST_TO_ADDR
// for i in list do
34750: LD_ADDR_VAR 0 6
34754: PUSH
34755: LD_VAR 0 2
34759: PUSH
34760: FOR_IN
34761: IFFALSE 34979
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34763: LD_ADDR_VAR 0 8
34767: PUSH
34768: LD_VAR 0 1
34772: PPUSH
34773: LD_VAR 0 6
34777: PUSH
34778: LD_INT 1
34780: ARRAY
34781: PPUSH
34782: LD_VAR 0 6
34786: PUSH
34787: LD_INT 2
34789: ARRAY
34790: PPUSH
34791: CALL_OW 297
34795: ST_TO_ADDR
// if not Count ( result ) then
34796: LD_VAR 0 5
34800: PPUSH
34801: CALL 31373 0 1
34805: NOT
34806: IFFALSE 34839
// begin result := Join ( result , [ i , tmp ] ) ;
34808: LD_ADDR_VAR 0 5
34812: PUSH
34813: LD_VAR 0 5
34817: PPUSH
34818: LD_VAR 0 6
34822: PUSH
34823: LD_VAR 0 8
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PPUSH
34832: CALL 66973 0 2
34836: ST_TO_ADDR
// continue ;
34837: GO 34760
// end ; if result [ result ] [ 2 ] <= tmp then
34839: LD_VAR 0 5
34843: PUSH
34844: LD_VAR 0 5
34848: ARRAY
34849: PUSH
34850: LD_INT 2
34852: ARRAY
34853: PUSH
34854: LD_VAR 0 8
34858: LESSEQUAL
34859: IFFALSE 34892
// result := Join ( result , [ i , tmp ] ) else
34861: LD_ADDR_VAR 0 5
34865: PUSH
34866: LD_VAR 0 5
34870: PPUSH
34871: LD_VAR 0 6
34875: PUSH
34876: LD_VAR 0 8
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PPUSH
34885: CALL 66973 0 2
34889: ST_TO_ADDR
34890: GO 34977
// begin for j := 1 to Count ( result ) do
34892: LD_ADDR_VAR 0 7
34896: PUSH
34897: DOUBLE
34898: LD_INT 1
34900: DEC
34901: ST_TO_ADDR
34902: LD_VAR 0 5
34906: PPUSH
34907: CALL 31373 0 1
34911: PUSH
34912: FOR_TO
34913: IFFALSE 34975
// begin if tmp < result [ j ] [ 2 ] then
34915: LD_VAR 0 8
34919: PUSH
34920: LD_VAR 0 5
34924: PUSH
34925: LD_VAR 0 7
34929: ARRAY
34930: PUSH
34931: LD_INT 2
34933: ARRAY
34934: LESS
34935: IFFALSE 34973
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34937: LD_ADDR_VAR 0 5
34941: PUSH
34942: LD_VAR 0 5
34946: PPUSH
34947: LD_VAR 0 7
34951: PPUSH
34952: LD_VAR 0 6
34956: PUSH
34957: LD_VAR 0 8
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PPUSH
34966: CALL_OW 2
34970: ST_TO_ADDR
// break ;
34971: GO 34975
// end ; end ;
34973: GO 34912
34975: POP
34976: POP
// end ; end ;
34977: GO 34760
34979: POP
34980: POP
// if result and not asc then
34981: LD_VAR 0 5
34985: PUSH
34986: LD_VAR 0 3
34990: NOT
34991: AND
34992: IFFALSE 35009
// result := ReverseArray ( result ) ;
34994: LD_ADDR_VAR 0 5
34998: PUSH
34999: LD_VAR 0 5
35003: PPUSH
35004: CALL 62249 0 1
35008: ST_TO_ADDR
// tmp := [ ] ;
35009: LD_ADDR_VAR 0 8
35013: PUSH
35014: EMPTY
35015: ST_TO_ADDR
// if mode then
35016: LD_VAR 0 4
35020: IFFALSE 35084
// begin for i := 1 to result do
35022: LD_ADDR_VAR 0 6
35026: PUSH
35027: DOUBLE
35028: LD_INT 1
35030: DEC
35031: ST_TO_ADDR
35032: LD_VAR 0 5
35036: PUSH
35037: FOR_TO
35038: IFFALSE 35072
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35040: LD_ADDR_VAR 0 8
35044: PUSH
35045: LD_VAR 0 8
35049: PPUSH
35050: LD_VAR 0 5
35054: PUSH
35055: LD_VAR 0 6
35059: ARRAY
35060: PUSH
35061: LD_INT 1
35063: ARRAY
35064: PPUSH
35065: CALL 66973 0 2
35069: ST_TO_ADDR
35070: GO 35037
35072: POP
35073: POP
// result := tmp ;
35074: LD_ADDR_VAR 0 5
35078: PUSH
35079: LD_VAR 0 8
35083: ST_TO_ADDR
// end ; end ;
35084: LD_VAR 0 5
35088: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35089: LD_INT 0
35091: PPUSH
35092: PPUSH
35093: PPUSH
35094: PPUSH
// if not list then
35095: LD_VAR 0 3
35099: NOT
35100: IFFALSE 35104
// exit ;
35102: GO 35492
// result := [ ] ;
35104: LD_ADDR_VAR 0 6
35108: PUSH
35109: EMPTY
35110: ST_TO_ADDR
// for i in list do
35111: LD_ADDR_VAR 0 7
35115: PUSH
35116: LD_VAR 0 3
35120: PUSH
35121: FOR_IN
35122: IFFALSE 35324
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35124: LD_ADDR_VAR 0 9
35128: PUSH
35129: LD_VAR 0 7
35133: PPUSH
35134: LD_VAR 0 1
35138: PPUSH
35139: LD_VAR 0 2
35143: PPUSH
35144: CALL_OW 297
35148: ST_TO_ADDR
// if not result then
35149: LD_VAR 0 6
35153: NOT
35154: IFFALSE 35180
// result := [ [ i , tmp ] ] else
35156: LD_ADDR_VAR 0 6
35160: PUSH
35161: LD_VAR 0 7
35165: PUSH
35166: LD_VAR 0 9
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: EMPTY
35176: LIST
35177: ST_TO_ADDR
35178: GO 35322
// begin if result [ result ] [ 2 ] < tmp then
35180: LD_VAR 0 6
35184: PUSH
35185: LD_VAR 0 6
35189: ARRAY
35190: PUSH
35191: LD_INT 2
35193: ARRAY
35194: PUSH
35195: LD_VAR 0 9
35199: LESS
35200: IFFALSE 35242
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35202: LD_ADDR_VAR 0 6
35206: PUSH
35207: LD_VAR 0 6
35211: PPUSH
35212: LD_VAR 0 6
35216: PUSH
35217: LD_INT 1
35219: PLUS
35220: PPUSH
35221: LD_VAR 0 7
35225: PUSH
35226: LD_VAR 0 9
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PPUSH
35235: CALL_OW 2
35239: ST_TO_ADDR
35240: GO 35322
// for j = 1 to result do
35242: LD_ADDR_VAR 0 8
35246: PUSH
35247: DOUBLE
35248: LD_INT 1
35250: DEC
35251: ST_TO_ADDR
35252: LD_VAR 0 6
35256: PUSH
35257: FOR_TO
35258: IFFALSE 35320
// begin if tmp < result [ j ] [ 2 ] then
35260: LD_VAR 0 9
35264: PUSH
35265: LD_VAR 0 6
35269: PUSH
35270: LD_VAR 0 8
35274: ARRAY
35275: PUSH
35276: LD_INT 2
35278: ARRAY
35279: LESS
35280: IFFALSE 35318
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35282: LD_ADDR_VAR 0 6
35286: PUSH
35287: LD_VAR 0 6
35291: PPUSH
35292: LD_VAR 0 8
35296: PPUSH
35297: LD_VAR 0 7
35301: PUSH
35302: LD_VAR 0 9
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PPUSH
35311: CALL_OW 2
35315: ST_TO_ADDR
// break ;
35316: GO 35320
// end ; end ;
35318: GO 35257
35320: POP
35321: POP
// end ; end ;
35322: GO 35121
35324: POP
35325: POP
// if result and not asc then
35326: LD_VAR 0 6
35330: PUSH
35331: LD_VAR 0 4
35335: NOT
35336: AND
35337: IFFALSE 35412
// begin tmp := result ;
35339: LD_ADDR_VAR 0 9
35343: PUSH
35344: LD_VAR 0 6
35348: ST_TO_ADDR
// for i = tmp downto 1 do
35349: LD_ADDR_VAR 0 7
35353: PUSH
35354: DOUBLE
35355: LD_VAR 0 9
35359: INC
35360: ST_TO_ADDR
35361: LD_INT 1
35363: PUSH
35364: FOR_DOWNTO
35365: IFFALSE 35410
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35367: LD_ADDR_VAR 0 6
35371: PUSH
35372: LD_VAR 0 6
35376: PPUSH
35377: LD_VAR 0 9
35381: PUSH
35382: LD_VAR 0 7
35386: MINUS
35387: PUSH
35388: LD_INT 1
35390: PLUS
35391: PPUSH
35392: LD_VAR 0 9
35396: PUSH
35397: LD_VAR 0 7
35401: ARRAY
35402: PPUSH
35403: CALL_OW 1
35407: ST_TO_ADDR
35408: GO 35364
35410: POP
35411: POP
// end ; tmp := [ ] ;
35412: LD_ADDR_VAR 0 9
35416: PUSH
35417: EMPTY
35418: ST_TO_ADDR
// if mode then
35419: LD_VAR 0 5
35423: IFFALSE 35492
// begin for i = 1 to result do
35425: LD_ADDR_VAR 0 7
35429: PUSH
35430: DOUBLE
35431: LD_INT 1
35433: DEC
35434: ST_TO_ADDR
35435: LD_VAR 0 6
35439: PUSH
35440: FOR_TO
35441: IFFALSE 35480
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35443: LD_ADDR_VAR 0 9
35447: PUSH
35448: LD_VAR 0 9
35452: PPUSH
35453: LD_VAR 0 7
35457: PPUSH
35458: LD_VAR 0 6
35462: PUSH
35463: LD_VAR 0 7
35467: ARRAY
35468: PUSH
35469: LD_INT 1
35471: ARRAY
35472: PPUSH
35473: CALL_OW 1
35477: ST_TO_ADDR
35478: GO 35440
35480: POP
35481: POP
// result := tmp ;
35482: LD_ADDR_VAR 0 6
35486: PUSH
35487: LD_VAR 0 9
35491: ST_TO_ADDR
// end ; end ;
35492: LD_VAR 0 6
35496: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35497: LD_INT 0
35499: PPUSH
35500: PPUSH
35501: PPUSH
35502: PPUSH
35503: PPUSH
35504: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35505: LD_ADDR_VAR 0 5
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: EMPTY
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: ST_TO_ADDR
// if not x or not y then
35527: LD_VAR 0 2
35531: NOT
35532: PUSH
35533: LD_VAR 0 3
35537: NOT
35538: OR
35539: IFFALSE 35543
// exit ;
35541: GO 37193
// if not range then
35543: LD_VAR 0 4
35547: NOT
35548: IFFALSE 35558
// range := 10 ;
35550: LD_ADDR_VAR 0 4
35554: PUSH
35555: LD_INT 10
35557: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35558: LD_ADDR_VAR 0 8
35562: PUSH
35563: LD_INT 81
35565: PUSH
35566: LD_VAR 0 1
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 92
35577: PUSH
35578: LD_VAR 0 2
35582: PUSH
35583: LD_VAR 0 3
35587: PUSH
35588: LD_VAR 0 4
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 3
35601: PUSH
35602: LD_INT 21
35604: PUSH
35605: LD_INT 3
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: LIST
35620: PPUSH
35621: CALL_OW 69
35625: ST_TO_ADDR
// if not tmp then
35626: LD_VAR 0 8
35630: NOT
35631: IFFALSE 35635
// exit ;
35633: GO 37193
// for i in tmp do
35635: LD_ADDR_VAR 0 6
35639: PUSH
35640: LD_VAR 0 8
35644: PUSH
35645: FOR_IN
35646: IFFALSE 37168
// begin points := [ 0 , 0 , 0 ] ;
35648: LD_ADDR_VAR 0 9
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: ST_TO_ADDR
// bpoints := 1 ;
35667: LD_ADDR_VAR 0 10
35671: PUSH
35672: LD_INT 1
35674: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35675: LD_VAR 0 6
35679: PPUSH
35680: CALL_OW 247
35684: PUSH
35685: LD_INT 1
35687: DOUBLE
35688: EQUAL
35689: IFTRUE 35693
35691: GO 36271
35693: POP
// begin if GetClass ( i ) = 1 then
35694: LD_VAR 0 6
35698: PPUSH
35699: CALL_OW 257
35703: PUSH
35704: LD_INT 1
35706: EQUAL
35707: IFFALSE 35728
// points := [ 10 , 5 , 3 ] ;
35709: LD_ADDR_VAR 0 9
35713: PUSH
35714: LD_INT 10
35716: PUSH
35717: LD_INT 5
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35728: LD_VAR 0 6
35732: PPUSH
35733: CALL_OW 257
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: LD_INT 3
35743: PUSH
35744: LD_INT 4
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: IN
35752: IFFALSE 35773
// points := [ 3 , 2 , 1 ] ;
35754: LD_ADDR_VAR 0 9
35758: PUSH
35759: LD_INT 3
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35773: LD_VAR 0 6
35777: PPUSH
35778: CALL_OW 257
35782: PUSH
35783: LD_INT 5
35785: EQUAL
35786: IFFALSE 35807
// points := [ 130 , 5 , 2 ] ;
35788: LD_ADDR_VAR 0 9
35792: PUSH
35793: LD_INT 130
35795: PUSH
35796: LD_INT 5
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35807: LD_VAR 0 6
35811: PPUSH
35812: CALL_OW 257
35816: PUSH
35817: LD_INT 8
35819: EQUAL
35820: IFFALSE 35841
// points := [ 35 , 35 , 30 ] ;
35822: LD_ADDR_VAR 0 9
35826: PUSH
35827: LD_INT 35
35829: PUSH
35830: LD_INT 35
35832: PUSH
35833: LD_INT 30
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35841: LD_VAR 0 6
35845: PPUSH
35846: CALL_OW 257
35850: PUSH
35851: LD_INT 9
35853: EQUAL
35854: IFFALSE 35875
// points := [ 20 , 55 , 40 ] ;
35856: LD_ADDR_VAR 0 9
35860: PUSH
35861: LD_INT 20
35863: PUSH
35864: LD_INT 55
35866: PUSH
35867: LD_INT 40
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: LIST
35874: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35875: LD_VAR 0 6
35879: PPUSH
35880: CALL_OW 257
35884: PUSH
35885: LD_INT 12
35887: PUSH
35888: LD_INT 16
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: IN
35895: IFFALSE 35916
// points := [ 5 , 3 , 2 ] ;
35897: LD_ADDR_VAR 0 9
35901: PUSH
35902: LD_INT 5
35904: PUSH
35905: LD_INT 3
35907: PUSH
35908: LD_INT 2
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35916: LD_VAR 0 6
35920: PPUSH
35921: CALL_OW 257
35925: PUSH
35926: LD_INT 17
35928: EQUAL
35929: IFFALSE 35950
// points := [ 100 , 50 , 75 ] ;
35931: LD_ADDR_VAR 0 9
35935: PUSH
35936: LD_INT 100
35938: PUSH
35939: LD_INT 50
35941: PUSH
35942: LD_INT 75
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35950: LD_VAR 0 6
35954: PPUSH
35955: CALL_OW 257
35959: PUSH
35960: LD_INT 15
35962: EQUAL
35963: IFFALSE 35984
// points := [ 10 , 5 , 3 ] ;
35965: LD_ADDR_VAR 0 9
35969: PUSH
35970: LD_INT 10
35972: PUSH
35973: LD_INT 5
35975: PUSH
35976: LD_INT 3
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35984: LD_VAR 0 6
35988: PPUSH
35989: CALL_OW 257
35993: PUSH
35994: LD_INT 14
35996: EQUAL
35997: IFFALSE 36018
// points := [ 10 , 0 , 0 ] ;
35999: LD_ADDR_VAR 0 9
36003: PUSH
36004: LD_INT 10
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36018: LD_VAR 0 6
36022: PPUSH
36023: CALL_OW 257
36027: PUSH
36028: LD_INT 11
36030: EQUAL
36031: IFFALSE 36052
// points := [ 30 , 10 , 5 ] ;
36033: LD_ADDR_VAR 0 9
36037: PUSH
36038: LD_INT 30
36040: PUSH
36041: LD_INT 10
36043: PUSH
36044: LD_INT 5
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36052: LD_VAR 0 1
36056: PPUSH
36057: LD_INT 5
36059: PPUSH
36060: CALL_OW 321
36064: PUSH
36065: LD_INT 2
36067: EQUAL
36068: IFFALSE 36085
// bpoints := bpoints * 1.8 ;
36070: LD_ADDR_VAR 0 10
36074: PUSH
36075: LD_VAR 0 10
36079: PUSH
36080: LD_REAL  1.80000000000000E+0000
36083: MUL
36084: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36085: LD_VAR 0 6
36089: PPUSH
36090: CALL_OW 257
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: LD_INT 4
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: IN
36113: PUSH
36114: LD_VAR 0 1
36118: PPUSH
36119: LD_INT 51
36121: PPUSH
36122: CALL_OW 321
36126: PUSH
36127: LD_INT 2
36129: EQUAL
36130: AND
36131: IFFALSE 36148
// bpoints := bpoints * 1.2 ;
36133: LD_ADDR_VAR 0 10
36137: PUSH
36138: LD_VAR 0 10
36142: PUSH
36143: LD_REAL  1.20000000000000E+0000
36146: MUL
36147: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36148: LD_VAR 0 6
36152: PPUSH
36153: CALL_OW 257
36157: PUSH
36158: LD_INT 5
36160: PUSH
36161: LD_INT 7
36163: PUSH
36164: LD_INT 9
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: IN
36172: PUSH
36173: LD_VAR 0 1
36177: PPUSH
36178: LD_INT 52
36180: PPUSH
36181: CALL_OW 321
36185: PUSH
36186: LD_INT 2
36188: EQUAL
36189: AND
36190: IFFALSE 36207
// bpoints := bpoints * 1.5 ;
36192: LD_ADDR_VAR 0 10
36196: PUSH
36197: LD_VAR 0 10
36201: PUSH
36202: LD_REAL  1.50000000000000E+0000
36205: MUL
36206: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36207: LD_VAR 0 1
36211: PPUSH
36212: LD_INT 66
36214: PPUSH
36215: CALL_OW 321
36219: PUSH
36220: LD_INT 2
36222: EQUAL
36223: IFFALSE 36240
// bpoints := bpoints * 1.1 ;
36225: LD_ADDR_VAR 0 10
36229: PUSH
36230: LD_VAR 0 10
36234: PUSH
36235: LD_REAL  1.10000000000000E+0000
36238: MUL
36239: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36240: LD_ADDR_VAR 0 10
36244: PUSH
36245: LD_VAR 0 10
36249: PUSH
36250: LD_VAR 0 6
36254: PPUSH
36255: LD_INT 1
36257: PPUSH
36258: CALL_OW 259
36262: PUSH
36263: LD_REAL  1.15000000000000E+0000
36266: MUL
36267: MUL
36268: ST_TO_ADDR
// end ; unit_vehicle :
36269: GO 37097
36271: LD_INT 2
36273: DOUBLE
36274: EQUAL
36275: IFTRUE 36279
36277: GO 37085
36279: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36280: LD_VAR 0 6
36284: PPUSH
36285: CALL_OW 264
36289: PUSH
36290: LD_INT 2
36292: PUSH
36293: LD_INT 42
36295: PUSH
36296: LD_INT 24
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: IN
36304: IFFALSE 36325
// points := [ 25 , 5 , 3 ] ;
36306: LD_ADDR_VAR 0 9
36310: PUSH
36311: LD_INT 25
36313: PUSH
36314: LD_INT 5
36316: PUSH
36317: LD_INT 3
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36325: LD_VAR 0 6
36329: PPUSH
36330: CALL_OW 264
36334: PUSH
36335: LD_INT 4
36337: PUSH
36338: LD_INT 43
36340: PUSH
36341: LD_INT 25
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: IN
36349: IFFALSE 36370
// points := [ 40 , 15 , 5 ] ;
36351: LD_ADDR_VAR 0 9
36355: PUSH
36356: LD_INT 40
36358: PUSH
36359: LD_INT 15
36361: PUSH
36362: LD_INT 5
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36370: LD_VAR 0 6
36374: PPUSH
36375: CALL_OW 264
36379: PUSH
36380: LD_INT 3
36382: PUSH
36383: LD_INT 23
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: IN
36390: IFFALSE 36411
// points := [ 7 , 25 , 8 ] ;
36392: LD_ADDR_VAR 0 9
36396: PUSH
36397: LD_INT 7
36399: PUSH
36400: LD_INT 25
36402: PUSH
36403: LD_INT 8
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36411: LD_VAR 0 6
36415: PPUSH
36416: CALL_OW 264
36420: PUSH
36421: LD_INT 5
36423: PUSH
36424: LD_INT 27
36426: PUSH
36427: LD_INT 44
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: LIST
36434: IN
36435: IFFALSE 36456
// points := [ 14 , 50 , 16 ] ;
36437: LD_ADDR_VAR 0 9
36441: PUSH
36442: LD_INT 14
36444: PUSH
36445: LD_INT 50
36447: PUSH
36448: LD_INT 16
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36456: LD_VAR 0 6
36460: PPUSH
36461: CALL_OW 264
36465: PUSH
36466: LD_INT 6
36468: PUSH
36469: LD_INT 46
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: IN
36476: IFFALSE 36497
// points := [ 32 , 120 , 70 ] ;
36478: LD_ADDR_VAR 0 9
36482: PUSH
36483: LD_INT 32
36485: PUSH
36486: LD_INT 120
36488: PUSH
36489: LD_INT 70
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36497: LD_VAR 0 6
36501: PPUSH
36502: CALL_OW 264
36506: PUSH
36507: LD_INT 7
36509: PUSH
36510: LD_INT 28
36512: PUSH
36513: LD_INT 45
36515: PUSH
36516: LD_INT 92
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: IN
36525: IFFALSE 36546
// points := [ 35 , 20 , 45 ] ;
36527: LD_ADDR_VAR 0 9
36531: PUSH
36532: LD_INT 35
36534: PUSH
36535: LD_INT 20
36537: PUSH
36538: LD_INT 45
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36546: LD_VAR 0 6
36550: PPUSH
36551: CALL_OW 264
36555: PUSH
36556: LD_INT 47
36558: PUSH
36559: EMPTY
36560: LIST
36561: IN
36562: IFFALSE 36583
// points := [ 67 , 45 , 75 ] ;
36564: LD_ADDR_VAR 0 9
36568: PUSH
36569: LD_INT 67
36571: PUSH
36572: LD_INT 45
36574: PUSH
36575: LD_INT 75
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36583: LD_VAR 0 6
36587: PPUSH
36588: CALL_OW 264
36592: PUSH
36593: LD_INT 26
36595: PUSH
36596: EMPTY
36597: LIST
36598: IN
36599: IFFALSE 36620
// points := [ 120 , 30 , 80 ] ;
36601: LD_ADDR_VAR 0 9
36605: PUSH
36606: LD_INT 120
36608: PUSH
36609: LD_INT 30
36611: PUSH
36612: LD_INT 80
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36620: LD_VAR 0 6
36624: PPUSH
36625: CALL_OW 264
36629: PUSH
36630: LD_INT 22
36632: PUSH
36633: EMPTY
36634: LIST
36635: IN
36636: IFFALSE 36657
// points := [ 40 , 1 , 1 ] ;
36638: LD_ADDR_VAR 0 9
36642: PUSH
36643: LD_INT 40
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36657: LD_VAR 0 6
36661: PPUSH
36662: CALL_OW 264
36666: PUSH
36667: LD_INT 29
36669: PUSH
36670: EMPTY
36671: LIST
36672: IN
36673: IFFALSE 36694
// points := [ 70 , 200 , 400 ] ;
36675: LD_ADDR_VAR 0 9
36679: PUSH
36680: LD_INT 70
36682: PUSH
36683: LD_INT 200
36685: PUSH
36686: LD_INT 400
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36694: LD_VAR 0 6
36698: PPUSH
36699: CALL_OW 264
36703: PUSH
36704: LD_INT 14
36706: PUSH
36707: LD_INT 53
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: IN
36714: IFFALSE 36735
// points := [ 40 , 10 , 20 ] ;
36716: LD_ADDR_VAR 0 9
36720: PUSH
36721: LD_INT 40
36723: PUSH
36724: LD_INT 10
36726: PUSH
36727: LD_INT 20
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: LIST
36734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36735: LD_VAR 0 6
36739: PPUSH
36740: CALL_OW 264
36744: PUSH
36745: LD_INT 9
36747: PUSH
36748: EMPTY
36749: LIST
36750: IN
36751: IFFALSE 36772
// points := [ 5 , 70 , 20 ] ;
36753: LD_ADDR_VAR 0 9
36757: PUSH
36758: LD_INT 5
36760: PUSH
36761: LD_INT 70
36763: PUSH
36764: LD_INT 20
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36772: LD_VAR 0 6
36776: PPUSH
36777: CALL_OW 264
36781: PUSH
36782: LD_INT 10
36784: PUSH
36785: EMPTY
36786: LIST
36787: IN
36788: IFFALSE 36809
// points := [ 35 , 110 , 70 ] ;
36790: LD_ADDR_VAR 0 9
36794: PUSH
36795: LD_INT 35
36797: PUSH
36798: LD_INT 110
36800: PUSH
36801: LD_INT 70
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: LIST
36808: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36809: LD_VAR 0 6
36813: PPUSH
36814: CALL_OW 265
36818: PUSH
36819: LD_INT 25
36821: EQUAL
36822: IFFALSE 36843
// points := [ 80 , 65 , 100 ] ;
36824: LD_ADDR_VAR 0 9
36828: PUSH
36829: LD_INT 80
36831: PUSH
36832: LD_INT 65
36834: PUSH
36835: LD_INT 100
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: LIST
36842: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36843: LD_VAR 0 6
36847: PPUSH
36848: CALL_OW 263
36852: PUSH
36853: LD_INT 1
36855: EQUAL
36856: IFFALSE 36891
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36858: LD_ADDR_VAR 0 10
36862: PUSH
36863: LD_VAR 0 10
36867: PUSH
36868: LD_VAR 0 6
36872: PPUSH
36873: CALL_OW 311
36877: PPUSH
36878: LD_INT 3
36880: PPUSH
36881: CALL_OW 259
36885: PUSH
36886: LD_INT 4
36888: MUL
36889: MUL
36890: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36891: LD_VAR 0 6
36895: PPUSH
36896: CALL_OW 263
36900: PUSH
36901: LD_INT 2
36903: EQUAL
36904: IFFALSE 36955
// begin j := IsControledBy ( i ) ;
36906: LD_ADDR_VAR 0 7
36910: PUSH
36911: LD_VAR 0 6
36915: PPUSH
36916: CALL_OW 312
36920: ST_TO_ADDR
// if j then
36921: LD_VAR 0 7
36925: IFFALSE 36955
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36927: LD_ADDR_VAR 0 10
36931: PUSH
36932: LD_VAR 0 10
36936: PUSH
36937: LD_VAR 0 7
36941: PPUSH
36942: LD_INT 3
36944: PPUSH
36945: CALL_OW 259
36949: PUSH
36950: LD_INT 3
36952: MUL
36953: MUL
36954: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36955: LD_VAR 0 6
36959: PPUSH
36960: CALL_OW 264
36964: PUSH
36965: LD_INT 5
36967: PUSH
36968: LD_INT 6
36970: PUSH
36971: LD_INT 46
36973: PUSH
36974: LD_INT 44
36976: PUSH
36977: LD_INT 47
36979: PUSH
36980: LD_INT 45
36982: PUSH
36983: LD_INT 28
36985: PUSH
36986: LD_INT 7
36988: PUSH
36989: LD_INT 27
36991: PUSH
36992: LD_INT 29
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: IN
37007: PUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: LD_INT 52
37015: PPUSH
37016: CALL_OW 321
37020: PUSH
37021: LD_INT 2
37023: EQUAL
37024: AND
37025: IFFALSE 37042
// bpoints := bpoints * 1.2 ;
37027: LD_ADDR_VAR 0 10
37031: PUSH
37032: LD_VAR 0 10
37036: PUSH
37037: LD_REAL  1.20000000000000E+0000
37040: MUL
37041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37042: LD_VAR 0 6
37046: PPUSH
37047: CALL_OW 264
37051: PUSH
37052: LD_INT 6
37054: PUSH
37055: LD_INT 46
37057: PUSH
37058: LD_INT 47
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: IN
37066: IFFALSE 37083
// bpoints := bpoints * 1.2 ;
37068: LD_ADDR_VAR 0 10
37072: PUSH
37073: LD_VAR 0 10
37077: PUSH
37078: LD_REAL  1.20000000000000E+0000
37081: MUL
37082: ST_TO_ADDR
// end ; unit_building :
37083: GO 37097
37085: LD_INT 3
37087: DOUBLE
37088: EQUAL
37089: IFTRUE 37093
37091: GO 37096
37093: POP
// ; end ;
37094: GO 37097
37096: POP
// for j = 1 to 3 do
37097: LD_ADDR_VAR 0 7
37101: PUSH
37102: DOUBLE
37103: LD_INT 1
37105: DEC
37106: ST_TO_ADDR
37107: LD_INT 3
37109: PUSH
37110: FOR_TO
37111: IFFALSE 37164
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37113: LD_ADDR_VAR 0 5
37117: PUSH
37118: LD_VAR 0 5
37122: PPUSH
37123: LD_VAR 0 7
37127: PPUSH
37128: LD_VAR 0 5
37132: PUSH
37133: LD_VAR 0 7
37137: ARRAY
37138: PUSH
37139: LD_VAR 0 9
37143: PUSH
37144: LD_VAR 0 7
37148: ARRAY
37149: PUSH
37150: LD_VAR 0 10
37154: MUL
37155: PLUS
37156: PPUSH
37157: CALL_OW 1
37161: ST_TO_ADDR
37162: GO 37110
37164: POP
37165: POP
// end ;
37166: GO 35645
37168: POP
37169: POP
// result := Replace ( result , 4 , tmp ) ;
37170: LD_ADDR_VAR 0 5
37174: PUSH
37175: LD_VAR 0 5
37179: PPUSH
37180: LD_INT 4
37182: PPUSH
37183: LD_VAR 0 8
37187: PPUSH
37188: CALL_OW 1
37192: ST_TO_ADDR
// end ;
37193: LD_VAR 0 5
37197: RET
// export function DangerAtRange ( unit , range ) ; begin
37198: LD_INT 0
37200: PPUSH
// if not unit then
37201: LD_VAR 0 1
37205: NOT
37206: IFFALSE 37210
// exit ;
37208: GO 37255
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37210: LD_ADDR_VAR 0 3
37214: PUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 255
37224: PPUSH
37225: LD_VAR 0 1
37229: PPUSH
37230: CALL_OW 250
37234: PPUSH
37235: LD_VAR 0 1
37239: PPUSH
37240: CALL_OW 251
37244: PPUSH
37245: LD_VAR 0 2
37249: PPUSH
37250: CALL 35497 0 4
37254: ST_TO_ADDR
// end ;
37255: LD_VAR 0 3
37259: RET
// export function DangerInArea ( side , area ) ; begin
37260: LD_INT 0
37262: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37263: LD_ADDR_VAR 0 3
37267: PUSH
37268: LD_VAR 0 2
37272: PPUSH
37273: LD_INT 81
37275: PUSH
37276: LD_VAR 0 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PPUSH
37285: CALL_OW 70
37289: ST_TO_ADDR
// end ;
37290: LD_VAR 0 3
37294: RET
// export function IsExtension ( b ) ; begin
37295: LD_INT 0
37297: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37298: LD_ADDR_VAR 0 2
37302: PUSH
37303: LD_VAR 0 1
37307: PUSH
37308: LD_INT 23
37310: PUSH
37311: LD_INT 20
37313: PUSH
37314: LD_INT 22
37316: PUSH
37317: LD_INT 17
37319: PUSH
37320: LD_INT 24
37322: PUSH
37323: LD_INT 21
37325: PUSH
37326: LD_INT 19
37328: PUSH
37329: LD_INT 16
37331: PUSH
37332: LD_INT 25
37334: PUSH
37335: LD_INT 18
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: IN
37350: ST_TO_ADDR
// end ;
37351: LD_VAR 0 2
37355: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37356: LD_INT 0
37358: PPUSH
37359: PPUSH
37360: PPUSH
// result := [ ] ;
37361: LD_ADDR_VAR 0 4
37365: PUSH
37366: EMPTY
37367: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37368: LD_ADDR_VAR 0 5
37372: PUSH
37373: LD_VAR 0 2
37377: PPUSH
37378: LD_INT 21
37380: PUSH
37381: LD_INT 3
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PPUSH
37388: CALL_OW 70
37392: ST_TO_ADDR
// if not tmp then
37393: LD_VAR 0 5
37397: NOT
37398: IFFALSE 37402
// exit ;
37400: GO 37466
// if checkLink then
37402: LD_VAR 0 3
37406: IFFALSE 37456
// begin for i in tmp do
37408: LD_ADDR_VAR 0 6
37412: PUSH
37413: LD_VAR 0 5
37417: PUSH
37418: FOR_IN
37419: IFFALSE 37454
// if GetBase ( i ) <> base then
37421: LD_VAR 0 6
37425: PPUSH
37426: CALL_OW 274
37430: PUSH
37431: LD_VAR 0 1
37435: NONEQUAL
37436: IFFALSE 37452
// ComLinkToBase ( base , i ) ;
37438: LD_VAR 0 1
37442: PPUSH
37443: LD_VAR 0 6
37447: PPUSH
37448: CALL_OW 169
37452: GO 37418
37454: POP
37455: POP
// end ; result := tmp ;
37456: LD_ADDR_VAR 0 4
37460: PUSH
37461: LD_VAR 0 5
37465: ST_TO_ADDR
// end ;
37466: LD_VAR 0 4
37470: RET
// export function ComComplete ( units , b ) ; var i ; begin
37471: LD_INT 0
37473: PPUSH
37474: PPUSH
// if not units then
37475: LD_VAR 0 1
37479: NOT
37480: IFFALSE 37484
// exit ;
37482: GO 37574
// for i in units do
37484: LD_ADDR_VAR 0 4
37488: PUSH
37489: LD_VAR 0 1
37493: PUSH
37494: FOR_IN
37495: IFFALSE 37572
// if BuildingStatus ( b ) = bs_build then
37497: LD_VAR 0 2
37501: PPUSH
37502: CALL_OW 461
37506: PUSH
37507: LD_INT 1
37509: EQUAL
37510: IFFALSE 37570
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37512: LD_VAR 0 4
37516: PPUSH
37517: LD_STRING h
37519: PUSH
37520: LD_VAR 0 2
37524: PPUSH
37525: CALL_OW 250
37529: PUSH
37530: LD_VAR 0 2
37534: PPUSH
37535: CALL_OW 251
37539: PUSH
37540: LD_VAR 0 2
37544: PUSH
37545: LD_INT 0
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: PUSH
37563: EMPTY
37564: LIST
37565: PPUSH
37566: CALL_OW 446
37570: GO 37494
37572: POP
37573: POP
// end ;
37574: LD_VAR 0 3
37578: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37579: LD_INT 0
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37587: LD_VAR 0 1
37591: NOT
37592: PUSH
37593: LD_VAR 0 1
37597: PPUSH
37598: CALL_OW 263
37602: PUSH
37603: LD_INT 2
37605: NONEQUAL
37606: OR
37607: IFFALSE 37611
// exit ;
37609: GO 37927
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37611: LD_ADDR_VAR 0 6
37615: PUSH
37616: LD_INT 22
37618: PUSH
37619: LD_VAR 0 1
37623: PPUSH
37624: CALL_OW 255
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: LD_INT 30
37638: PUSH
37639: LD_INT 36
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 34
37648: PUSH
37649: LD_INT 31
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PPUSH
37665: CALL_OW 69
37669: ST_TO_ADDR
// if not tmp then
37670: LD_VAR 0 6
37674: NOT
37675: IFFALSE 37679
// exit ;
37677: GO 37927
// result := [ ] ;
37679: LD_ADDR_VAR 0 2
37683: PUSH
37684: EMPTY
37685: ST_TO_ADDR
// for i in tmp do
37686: LD_ADDR_VAR 0 3
37690: PUSH
37691: LD_VAR 0 6
37695: PUSH
37696: FOR_IN
37697: IFFALSE 37768
// begin t := UnitsInside ( i ) ;
37699: LD_ADDR_VAR 0 4
37703: PUSH
37704: LD_VAR 0 3
37708: PPUSH
37709: CALL_OW 313
37713: ST_TO_ADDR
// if t then
37714: LD_VAR 0 4
37718: IFFALSE 37766
// for j in t do
37720: LD_ADDR_VAR 0 7
37724: PUSH
37725: LD_VAR 0 4
37729: PUSH
37730: FOR_IN
37731: IFFALSE 37764
// result := Replace ( result , result + 1 , j ) ;
37733: LD_ADDR_VAR 0 2
37737: PUSH
37738: LD_VAR 0 2
37742: PPUSH
37743: LD_VAR 0 2
37747: PUSH
37748: LD_INT 1
37750: PLUS
37751: PPUSH
37752: LD_VAR 0 7
37756: PPUSH
37757: CALL_OW 1
37761: ST_TO_ADDR
37762: GO 37730
37764: POP
37765: POP
// end ;
37766: GO 37696
37768: POP
37769: POP
// if not result then
37770: LD_VAR 0 2
37774: NOT
37775: IFFALSE 37779
// exit ;
37777: GO 37927
// mech := result [ 1 ] ;
37779: LD_ADDR_VAR 0 5
37783: PUSH
37784: LD_VAR 0 2
37788: PUSH
37789: LD_INT 1
37791: ARRAY
37792: ST_TO_ADDR
// if result > 1 then
37793: LD_VAR 0 2
37797: PUSH
37798: LD_INT 1
37800: GREATER
37801: IFFALSE 37913
// begin for i = 2 to result do
37803: LD_ADDR_VAR 0 3
37807: PUSH
37808: DOUBLE
37809: LD_INT 2
37811: DEC
37812: ST_TO_ADDR
37813: LD_VAR 0 2
37817: PUSH
37818: FOR_TO
37819: IFFALSE 37911
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37821: LD_ADDR_VAR 0 4
37825: PUSH
37826: LD_VAR 0 2
37830: PUSH
37831: LD_VAR 0 3
37835: ARRAY
37836: PPUSH
37837: LD_INT 3
37839: PPUSH
37840: CALL_OW 259
37844: PUSH
37845: LD_VAR 0 2
37849: PUSH
37850: LD_VAR 0 3
37854: ARRAY
37855: PPUSH
37856: CALL_OW 432
37860: MINUS
37861: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37862: LD_VAR 0 4
37866: PUSH
37867: LD_VAR 0 5
37871: PPUSH
37872: LD_INT 3
37874: PPUSH
37875: CALL_OW 259
37879: PUSH
37880: LD_VAR 0 5
37884: PPUSH
37885: CALL_OW 432
37889: MINUS
37890: GREATEREQUAL
37891: IFFALSE 37909
// mech := result [ i ] ;
37893: LD_ADDR_VAR 0 5
37897: PUSH
37898: LD_VAR 0 2
37902: PUSH
37903: LD_VAR 0 3
37907: ARRAY
37908: ST_TO_ADDR
// end ;
37909: GO 37818
37911: POP
37912: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37913: LD_VAR 0 1
37917: PPUSH
37918: LD_VAR 0 5
37922: PPUSH
37923: CALL_OW 135
// end ;
37927: LD_VAR 0 2
37931: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37932: LD_INT 0
37934: PPUSH
37935: PPUSH
37936: PPUSH
37937: PPUSH
37938: PPUSH
37939: PPUSH
37940: PPUSH
37941: PPUSH
37942: PPUSH
37943: PPUSH
37944: PPUSH
37945: PPUSH
37946: PPUSH
// result := [ ] ;
37947: LD_ADDR_VAR 0 7
37951: PUSH
37952: EMPTY
37953: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37954: LD_VAR 0 1
37958: PPUSH
37959: CALL_OW 266
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: IN
37974: NOT
37975: IFFALSE 37979
// exit ;
37977: GO 39613
// if name then
37979: LD_VAR 0 3
37983: IFFALSE 37999
// SetBName ( base_dep , name ) ;
37985: LD_VAR 0 1
37989: PPUSH
37990: LD_VAR 0 3
37994: PPUSH
37995: CALL_OW 500
// base := GetBase ( base_dep ) ;
37999: LD_ADDR_VAR 0 15
38003: PUSH
38004: LD_VAR 0 1
38008: PPUSH
38009: CALL_OW 274
38013: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38014: LD_ADDR_VAR 0 16
38018: PUSH
38019: LD_VAR 0 1
38023: PPUSH
38024: CALL_OW 255
38028: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38029: LD_ADDR_VAR 0 17
38033: PUSH
38034: LD_VAR 0 1
38038: PPUSH
38039: CALL_OW 248
38043: ST_TO_ADDR
// if sources then
38044: LD_VAR 0 5
38048: IFFALSE 38095
// for i = 1 to 3 do
38050: LD_ADDR_VAR 0 8
38054: PUSH
38055: DOUBLE
38056: LD_INT 1
38058: DEC
38059: ST_TO_ADDR
38060: LD_INT 3
38062: PUSH
38063: FOR_TO
38064: IFFALSE 38093
// AddResourceType ( base , i , sources [ i ] ) ;
38066: LD_VAR 0 15
38070: PPUSH
38071: LD_VAR 0 8
38075: PPUSH
38076: LD_VAR 0 5
38080: PUSH
38081: LD_VAR 0 8
38085: ARRAY
38086: PPUSH
38087: CALL_OW 276
38091: GO 38063
38093: POP
38094: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38095: LD_ADDR_VAR 0 18
38099: PUSH
38100: LD_VAR 0 15
38104: PPUSH
38105: LD_VAR 0 2
38109: PPUSH
38110: LD_INT 1
38112: PPUSH
38113: CALL 37356 0 3
38117: ST_TO_ADDR
// InitHc ;
38118: CALL_OW 19
// InitUc ;
38122: CALL_OW 18
// uc_side := side ;
38126: LD_ADDR_OWVAR 20
38130: PUSH
38131: LD_VAR 0 16
38135: ST_TO_ADDR
// uc_nation := nation ;
38136: LD_ADDR_OWVAR 21
38140: PUSH
38141: LD_VAR 0 17
38145: ST_TO_ADDR
// if buildings then
38146: LD_VAR 0 18
38150: IFFALSE 39472
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38152: LD_ADDR_VAR 0 19
38156: PUSH
38157: LD_VAR 0 18
38161: PPUSH
38162: LD_INT 2
38164: PUSH
38165: LD_INT 30
38167: PUSH
38168: LD_INT 29
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 30
38177: PUSH
38178: LD_INT 30
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: PPUSH
38190: CALL_OW 72
38194: ST_TO_ADDR
// if tmp then
38195: LD_VAR 0 19
38199: IFFALSE 38247
// for i in tmp do
38201: LD_ADDR_VAR 0 8
38205: PUSH
38206: LD_VAR 0 19
38210: PUSH
38211: FOR_IN
38212: IFFALSE 38245
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38214: LD_VAR 0 8
38218: PPUSH
38219: CALL_OW 250
38223: PPUSH
38224: LD_VAR 0 8
38228: PPUSH
38229: CALL_OW 251
38233: PPUSH
38234: LD_VAR 0 16
38238: PPUSH
38239: CALL_OW 441
38243: GO 38211
38245: POP
38246: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38247: LD_VAR 0 18
38251: PPUSH
38252: LD_INT 2
38254: PUSH
38255: LD_INT 30
38257: PUSH
38258: LD_INT 32
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 30
38267: PUSH
38268: LD_INT 33
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: PPUSH
38280: CALL_OW 72
38284: IFFALSE 38372
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38286: LD_ADDR_VAR 0 8
38290: PUSH
38291: LD_VAR 0 18
38295: PPUSH
38296: LD_INT 2
38298: PUSH
38299: LD_INT 30
38301: PUSH
38302: LD_INT 32
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 30
38311: PUSH
38312: LD_INT 33
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: LIST
38323: PPUSH
38324: CALL_OW 72
38328: PUSH
38329: FOR_IN
38330: IFFALSE 38370
// begin if not GetBWeapon ( i ) then
38332: LD_VAR 0 8
38336: PPUSH
38337: CALL_OW 269
38341: NOT
38342: IFFALSE 38368
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38344: LD_VAR 0 8
38348: PPUSH
38349: LD_VAR 0 8
38353: PPUSH
38354: LD_VAR 0 2
38358: PPUSH
38359: CALL 39618 0 2
38363: PPUSH
38364: CALL_OW 431
// end ;
38368: GO 38329
38370: POP
38371: POP
// end ; for i = 1 to personel do
38372: LD_ADDR_VAR 0 8
38376: PUSH
38377: DOUBLE
38378: LD_INT 1
38380: DEC
38381: ST_TO_ADDR
38382: LD_VAR 0 6
38386: PUSH
38387: FOR_TO
38388: IFFALSE 39452
// begin if i > 4 then
38390: LD_VAR 0 8
38394: PUSH
38395: LD_INT 4
38397: GREATER
38398: IFFALSE 38402
// break ;
38400: GO 39452
// case i of 1 :
38402: LD_VAR 0 8
38406: PUSH
38407: LD_INT 1
38409: DOUBLE
38410: EQUAL
38411: IFTRUE 38415
38413: GO 38495
38415: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38416: LD_ADDR_VAR 0 12
38420: PUSH
38421: LD_VAR 0 18
38425: PPUSH
38426: LD_INT 22
38428: PUSH
38429: LD_VAR 0 16
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 58
38440: PUSH
38441: EMPTY
38442: LIST
38443: PUSH
38444: LD_INT 2
38446: PUSH
38447: LD_INT 30
38449: PUSH
38450: LD_INT 32
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 30
38459: PUSH
38460: LD_INT 4
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 30
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: PPUSH
38488: CALL_OW 72
38492: ST_TO_ADDR
38493: GO 38717
38495: LD_INT 2
38497: DOUBLE
38498: EQUAL
38499: IFTRUE 38503
38501: GO 38565
38503: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38504: LD_ADDR_VAR 0 12
38508: PUSH
38509: LD_VAR 0 18
38513: PPUSH
38514: LD_INT 22
38516: PUSH
38517: LD_VAR 0 16
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: LD_INT 30
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 30
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PPUSH
38558: CALL_OW 72
38562: ST_TO_ADDR
38563: GO 38717
38565: LD_INT 3
38567: DOUBLE
38568: EQUAL
38569: IFTRUE 38573
38571: GO 38635
38573: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38574: LD_ADDR_VAR 0 12
38578: PUSH
38579: LD_VAR 0 18
38583: PPUSH
38584: LD_INT 22
38586: PUSH
38587: LD_VAR 0 16
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 2
38598: PUSH
38599: LD_INT 30
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 30
38611: PUSH
38612: LD_INT 3
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PPUSH
38628: CALL_OW 72
38632: ST_TO_ADDR
38633: GO 38717
38635: LD_INT 4
38637: DOUBLE
38638: EQUAL
38639: IFTRUE 38643
38641: GO 38716
38643: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38644: LD_ADDR_VAR 0 12
38648: PUSH
38649: LD_VAR 0 18
38653: PPUSH
38654: LD_INT 22
38656: PUSH
38657: LD_VAR 0 16
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: LD_INT 30
38671: PUSH
38672: LD_INT 6
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 30
38681: PUSH
38682: LD_INT 7
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 30
38691: PUSH
38692: LD_INT 8
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PPUSH
38709: CALL_OW 72
38713: ST_TO_ADDR
38714: GO 38717
38716: POP
// if i = 1 then
38717: LD_VAR 0 8
38721: PUSH
38722: LD_INT 1
38724: EQUAL
38725: IFFALSE 38836
// begin tmp := [ ] ;
38727: LD_ADDR_VAR 0 19
38731: PUSH
38732: EMPTY
38733: ST_TO_ADDR
// for j in f do
38734: LD_ADDR_VAR 0 9
38738: PUSH
38739: LD_VAR 0 12
38743: PUSH
38744: FOR_IN
38745: IFFALSE 38818
// if GetBType ( j ) = b_bunker then
38747: LD_VAR 0 9
38751: PPUSH
38752: CALL_OW 266
38756: PUSH
38757: LD_INT 32
38759: EQUAL
38760: IFFALSE 38787
// tmp := Insert ( tmp , 1 , j ) else
38762: LD_ADDR_VAR 0 19
38766: PUSH
38767: LD_VAR 0 19
38771: PPUSH
38772: LD_INT 1
38774: PPUSH
38775: LD_VAR 0 9
38779: PPUSH
38780: CALL_OW 2
38784: ST_TO_ADDR
38785: GO 38816
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38787: LD_ADDR_VAR 0 19
38791: PUSH
38792: LD_VAR 0 19
38796: PPUSH
38797: LD_VAR 0 19
38801: PUSH
38802: LD_INT 1
38804: PLUS
38805: PPUSH
38806: LD_VAR 0 9
38810: PPUSH
38811: CALL_OW 2
38815: ST_TO_ADDR
38816: GO 38744
38818: POP
38819: POP
// if tmp then
38820: LD_VAR 0 19
38824: IFFALSE 38836
// f := tmp ;
38826: LD_ADDR_VAR 0 12
38830: PUSH
38831: LD_VAR 0 19
38835: ST_TO_ADDR
// end ; x := personel [ i ] ;
38836: LD_ADDR_VAR 0 13
38840: PUSH
38841: LD_VAR 0 6
38845: PUSH
38846: LD_VAR 0 8
38850: ARRAY
38851: ST_TO_ADDR
// if x = - 1 then
38852: LD_VAR 0 13
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: EQUAL
38861: IFFALSE 39070
// begin for j in f do
38863: LD_ADDR_VAR 0 9
38867: PUSH
38868: LD_VAR 0 12
38872: PUSH
38873: FOR_IN
38874: IFFALSE 39066
// repeat InitHc ;
38876: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38880: LD_VAR 0 9
38884: PPUSH
38885: CALL_OW 266
38889: PUSH
38890: LD_INT 5
38892: EQUAL
38893: IFFALSE 38963
// begin if UnitsInside ( j ) < 3 then
38895: LD_VAR 0 9
38899: PPUSH
38900: CALL_OW 313
38904: PUSH
38905: LD_INT 3
38907: LESS
38908: IFFALSE 38944
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38910: LD_INT 0
38912: PPUSH
38913: LD_INT 5
38915: PUSH
38916: LD_INT 8
38918: PUSH
38919: LD_INT 9
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: PUSH
38927: LD_VAR 0 17
38931: ARRAY
38932: PPUSH
38933: LD_VAR 0 4
38937: PPUSH
38938: CALL_OW 380
38942: GO 38961
// PrepareHuman ( false , i , skill ) ;
38944: LD_INT 0
38946: PPUSH
38947: LD_VAR 0 8
38951: PPUSH
38952: LD_VAR 0 4
38956: PPUSH
38957: CALL_OW 380
// end else
38961: GO 38980
// PrepareHuman ( false , i , skill ) ;
38963: LD_INT 0
38965: PPUSH
38966: LD_VAR 0 8
38970: PPUSH
38971: LD_VAR 0 4
38975: PPUSH
38976: CALL_OW 380
// un := CreateHuman ;
38980: LD_ADDR_VAR 0 14
38984: PUSH
38985: CALL_OW 44
38989: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38990: LD_ADDR_VAR 0 7
38994: PUSH
38995: LD_VAR 0 7
38999: PPUSH
39000: LD_INT 1
39002: PPUSH
39003: LD_VAR 0 14
39007: PPUSH
39008: CALL_OW 2
39012: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39013: LD_VAR 0 14
39017: PPUSH
39018: LD_VAR 0 9
39022: PPUSH
39023: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39027: LD_VAR 0 9
39031: PPUSH
39032: CALL_OW 313
39036: PUSH
39037: LD_INT 6
39039: EQUAL
39040: PUSH
39041: LD_VAR 0 9
39045: PPUSH
39046: CALL_OW 266
39050: PUSH
39051: LD_INT 32
39053: PUSH
39054: LD_INT 31
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: IN
39061: OR
39062: IFFALSE 38876
39064: GO 38873
39066: POP
39067: POP
// end else
39068: GO 39450
// for j = 1 to x do
39070: LD_ADDR_VAR 0 9
39074: PUSH
39075: DOUBLE
39076: LD_INT 1
39078: DEC
39079: ST_TO_ADDR
39080: LD_VAR 0 13
39084: PUSH
39085: FOR_TO
39086: IFFALSE 39448
// begin InitHc ;
39088: CALL_OW 19
// if not f then
39092: LD_VAR 0 12
39096: NOT
39097: IFFALSE 39186
// begin PrepareHuman ( false , i , skill ) ;
39099: LD_INT 0
39101: PPUSH
39102: LD_VAR 0 8
39106: PPUSH
39107: LD_VAR 0 4
39111: PPUSH
39112: CALL_OW 380
// un := CreateHuman ;
39116: LD_ADDR_VAR 0 14
39120: PUSH
39121: CALL_OW 44
39125: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39126: LD_ADDR_VAR 0 7
39130: PUSH
39131: LD_VAR 0 7
39135: PPUSH
39136: LD_INT 1
39138: PPUSH
39139: LD_VAR 0 14
39143: PPUSH
39144: CALL_OW 2
39148: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39149: LD_VAR 0 14
39153: PPUSH
39154: LD_VAR 0 1
39158: PPUSH
39159: CALL_OW 250
39163: PPUSH
39164: LD_VAR 0 1
39168: PPUSH
39169: CALL_OW 251
39173: PPUSH
39174: LD_INT 10
39176: PPUSH
39177: LD_INT 0
39179: PPUSH
39180: CALL_OW 50
// continue ;
39184: GO 39085
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39186: LD_VAR 0 12
39190: PUSH
39191: LD_INT 1
39193: ARRAY
39194: PPUSH
39195: CALL_OW 313
39199: PUSH
39200: LD_VAR 0 12
39204: PUSH
39205: LD_INT 1
39207: ARRAY
39208: PPUSH
39209: CALL_OW 266
39213: PUSH
39214: LD_INT 32
39216: PUSH
39217: LD_INT 31
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: IN
39224: AND
39225: PUSH
39226: LD_VAR 0 12
39230: PUSH
39231: LD_INT 1
39233: ARRAY
39234: PPUSH
39235: CALL_OW 313
39239: PUSH
39240: LD_INT 6
39242: EQUAL
39243: OR
39244: IFFALSE 39264
// f := Delete ( f , 1 ) ;
39246: LD_ADDR_VAR 0 12
39250: PUSH
39251: LD_VAR 0 12
39255: PPUSH
39256: LD_INT 1
39258: PPUSH
39259: CALL_OW 3
39263: ST_TO_ADDR
// if not f then
39264: LD_VAR 0 12
39268: NOT
39269: IFFALSE 39287
// begin x := x + 2 ;
39271: LD_ADDR_VAR 0 13
39275: PUSH
39276: LD_VAR 0 13
39280: PUSH
39281: LD_INT 2
39283: PLUS
39284: ST_TO_ADDR
// continue ;
39285: GO 39085
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39287: LD_VAR 0 12
39291: PUSH
39292: LD_INT 1
39294: ARRAY
39295: PPUSH
39296: CALL_OW 266
39300: PUSH
39301: LD_INT 5
39303: EQUAL
39304: IFFALSE 39378
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39306: LD_VAR 0 12
39310: PUSH
39311: LD_INT 1
39313: ARRAY
39314: PPUSH
39315: CALL_OW 313
39319: PUSH
39320: LD_INT 3
39322: LESS
39323: IFFALSE 39359
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39325: LD_INT 0
39327: PPUSH
39328: LD_INT 5
39330: PUSH
39331: LD_INT 8
39333: PUSH
39334: LD_INT 9
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: PUSH
39342: LD_VAR 0 17
39346: ARRAY
39347: PPUSH
39348: LD_VAR 0 4
39352: PPUSH
39353: CALL_OW 380
39357: GO 39376
// PrepareHuman ( false , i , skill ) ;
39359: LD_INT 0
39361: PPUSH
39362: LD_VAR 0 8
39366: PPUSH
39367: LD_VAR 0 4
39371: PPUSH
39372: CALL_OW 380
// end else
39376: GO 39395
// PrepareHuman ( false , i , skill ) ;
39378: LD_INT 0
39380: PPUSH
39381: LD_VAR 0 8
39385: PPUSH
39386: LD_VAR 0 4
39390: PPUSH
39391: CALL_OW 380
// un := CreateHuman ;
39395: LD_ADDR_VAR 0 14
39399: PUSH
39400: CALL_OW 44
39404: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39405: LD_ADDR_VAR 0 7
39409: PUSH
39410: LD_VAR 0 7
39414: PPUSH
39415: LD_INT 1
39417: PPUSH
39418: LD_VAR 0 14
39422: PPUSH
39423: CALL_OW 2
39427: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39428: LD_VAR 0 14
39432: PPUSH
39433: LD_VAR 0 12
39437: PUSH
39438: LD_INT 1
39440: ARRAY
39441: PPUSH
39442: CALL_OW 52
// end ;
39446: GO 39085
39448: POP
39449: POP
// end ;
39450: GO 38387
39452: POP
39453: POP
// result := result ^ buildings ;
39454: LD_ADDR_VAR 0 7
39458: PUSH
39459: LD_VAR 0 7
39463: PUSH
39464: LD_VAR 0 18
39468: ADD
39469: ST_TO_ADDR
// end else
39470: GO 39613
// begin for i = 1 to personel do
39472: LD_ADDR_VAR 0 8
39476: PUSH
39477: DOUBLE
39478: LD_INT 1
39480: DEC
39481: ST_TO_ADDR
39482: LD_VAR 0 6
39486: PUSH
39487: FOR_TO
39488: IFFALSE 39611
// begin if i > 4 then
39490: LD_VAR 0 8
39494: PUSH
39495: LD_INT 4
39497: GREATER
39498: IFFALSE 39502
// break ;
39500: GO 39611
// x := personel [ i ] ;
39502: LD_ADDR_VAR 0 13
39506: PUSH
39507: LD_VAR 0 6
39511: PUSH
39512: LD_VAR 0 8
39516: ARRAY
39517: ST_TO_ADDR
// if x = - 1 then
39518: LD_VAR 0 13
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: EQUAL
39527: IFFALSE 39531
// continue ;
39529: GO 39487
// PrepareHuman ( false , i , skill ) ;
39531: LD_INT 0
39533: PPUSH
39534: LD_VAR 0 8
39538: PPUSH
39539: LD_VAR 0 4
39543: PPUSH
39544: CALL_OW 380
// un := CreateHuman ;
39548: LD_ADDR_VAR 0 14
39552: PUSH
39553: CALL_OW 44
39557: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39558: LD_VAR 0 14
39562: PPUSH
39563: LD_VAR 0 1
39567: PPUSH
39568: CALL_OW 250
39572: PPUSH
39573: LD_VAR 0 1
39577: PPUSH
39578: CALL_OW 251
39582: PPUSH
39583: LD_INT 10
39585: PPUSH
39586: LD_INT 0
39588: PPUSH
39589: CALL_OW 50
// result := result ^ un ;
39593: LD_ADDR_VAR 0 7
39597: PUSH
39598: LD_VAR 0 7
39602: PUSH
39603: LD_VAR 0 14
39607: ADD
39608: ST_TO_ADDR
// end ;
39609: GO 39487
39611: POP
39612: POP
// end ; end ;
39613: LD_VAR 0 7
39617: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39618: LD_INT 0
39620: PPUSH
39621: PPUSH
39622: PPUSH
39623: PPUSH
39624: PPUSH
39625: PPUSH
39626: PPUSH
39627: PPUSH
39628: PPUSH
39629: PPUSH
39630: PPUSH
39631: PPUSH
39632: PPUSH
39633: PPUSH
39634: PPUSH
39635: PPUSH
// result := false ;
39636: LD_ADDR_VAR 0 3
39640: PUSH
39641: LD_INT 0
39643: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39644: LD_VAR 0 1
39648: NOT
39649: PUSH
39650: LD_VAR 0 1
39654: PPUSH
39655: CALL_OW 266
39659: PUSH
39660: LD_INT 32
39662: PUSH
39663: LD_INT 33
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: IN
39670: NOT
39671: OR
39672: IFFALSE 39676
// exit ;
39674: GO 40785
// nat := GetNation ( tower ) ;
39676: LD_ADDR_VAR 0 12
39680: PUSH
39681: LD_VAR 0 1
39685: PPUSH
39686: CALL_OW 248
39690: ST_TO_ADDR
// side := GetSide ( tower ) ;
39691: LD_ADDR_VAR 0 16
39695: PUSH
39696: LD_VAR 0 1
39700: PPUSH
39701: CALL_OW 255
39705: ST_TO_ADDR
// x := GetX ( tower ) ;
39706: LD_ADDR_VAR 0 10
39710: PUSH
39711: LD_VAR 0 1
39715: PPUSH
39716: CALL_OW 250
39720: ST_TO_ADDR
// y := GetY ( tower ) ;
39721: LD_ADDR_VAR 0 11
39725: PUSH
39726: LD_VAR 0 1
39730: PPUSH
39731: CALL_OW 251
39735: ST_TO_ADDR
// if not x or not y then
39736: LD_VAR 0 10
39740: NOT
39741: PUSH
39742: LD_VAR 0 11
39746: NOT
39747: OR
39748: IFFALSE 39752
// exit ;
39750: GO 40785
// weapon := 0 ;
39752: LD_ADDR_VAR 0 18
39756: PUSH
39757: LD_INT 0
39759: ST_TO_ADDR
// fac_list := [ ] ;
39760: LD_ADDR_VAR 0 17
39764: PUSH
39765: EMPTY
39766: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39767: LD_ADDR_VAR 0 6
39771: PUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: CALL_OW 274
39781: PPUSH
39782: LD_VAR 0 2
39786: PPUSH
39787: LD_INT 0
39789: PPUSH
39790: CALL 37356 0 3
39794: PPUSH
39795: LD_INT 30
39797: PUSH
39798: LD_INT 3
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PPUSH
39805: CALL_OW 72
39809: ST_TO_ADDR
// if not factories then
39810: LD_VAR 0 6
39814: NOT
39815: IFFALSE 39819
// exit ;
39817: GO 40785
// for i in factories do
39819: LD_ADDR_VAR 0 8
39823: PUSH
39824: LD_VAR 0 6
39828: PUSH
39829: FOR_IN
39830: IFFALSE 39855
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39832: LD_ADDR_VAR 0 17
39836: PUSH
39837: LD_VAR 0 17
39841: PUSH
39842: LD_VAR 0 8
39846: PPUSH
39847: CALL_OW 478
39851: UNION
39852: ST_TO_ADDR
39853: GO 39829
39855: POP
39856: POP
// if not fac_list then
39857: LD_VAR 0 17
39861: NOT
39862: IFFALSE 39866
// exit ;
39864: GO 40785
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39866: LD_ADDR_VAR 0 5
39870: PUSH
39871: LD_INT 4
39873: PUSH
39874: LD_INT 5
39876: PUSH
39877: LD_INT 9
39879: PUSH
39880: LD_INT 10
39882: PUSH
39883: LD_INT 6
39885: PUSH
39886: LD_INT 7
39888: PUSH
39889: LD_INT 11
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 27
39903: PUSH
39904: LD_INT 28
39906: PUSH
39907: LD_INT 26
39909: PUSH
39910: LD_INT 30
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 43
39921: PUSH
39922: LD_INT 44
39924: PUSH
39925: LD_INT 46
39927: PUSH
39928: LD_INT 45
39930: PUSH
39931: LD_INT 47
39933: PUSH
39934: LD_INT 49
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: LIST
39949: PUSH
39950: LD_VAR 0 12
39954: ARRAY
39955: ST_TO_ADDR
// list := list isect fac_list ;
39956: LD_ADDR_VAR 0 5
39960: PUSH
39961: LD_VAR 0 5
39965: PUSH
39966: LD_VAR 0 17
39970: ISECT
39971: ST_TO_ADDR
// if not list then
39972: LD_VAR 0 5
39976: NOT
39977: IFFALSE 39981
// exit ;
39979: GO 40785
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39981: LD_VAR 0 12
39985: PUSH
39986: LD_INT 3
39988: EQUAL
39989: PUSH
39990: LD_INT 49
39992: PUSH
39993: LD_VAR 0 5
39997: IN
39998: AND
39999: PUSH
40000: LD_INT 31
40002: PPUSH
40003: LD_VAR 0 16
40007: PPUSH
40008: CALL_OW 321
40012: PUSH
40013: LD_INT 2
40015: EQUAL
40016: AND
40017: IFFALSE 40077
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40019: LD_INT 22
40021: PUSH
40022: LD_VAR 0 16
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 35
40033: PUSH
40034: LD_INT 49
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 91
40043: PUSH
40044: LD_VAR 0 1
40048: PUSH
40049: LD_INT 10
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: PPUSH
40062: CALL_OW 69
40066: NOT
40067: IFFALSE 40077
// weapon := ru_time_lapser ;
40069: LD_ADDR_VAR 0 18
40073: PUSH
40074: LD_INT 49
40076: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40077: LD_VAR 0 12
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: IN
40092: PUSH
40093: LD_INT 11
40095: PUSH
40096: LD_VAR 0 5
40100: IN
40101: PUSH
40102: LD_INT 30
40104: PUSH
40105: LD_VAR 0 5
40109: IN
40110: OR
40111: AND
40112: PUSH
40113: LD_INT 6
40115: PPUSH
40116: LD_VAR 0 16
40120: PPUSH
40121: CALL_OW 321
40125: PUSH
40126: LD_INT 2
40128: EQUAL
40129: AND
40130: IFFALSE 40295
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40132: LD_INT 22
40134: PUSH
40135: LD_VAR 0 16
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: LD_INT 35
40149: PUSH
40150: LD_INT 11
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 35
40159: PUSH
40160: LD_INT 30
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 91
40174: PUSH
40175: LD_VAR 0 1
40179: PUSH
40180: LD_INT 18
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: LIST
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: PPUSH
40193: CALL_OW 69
40197: NOT
40198: PUSH
40199: LD_INT 22
40201: PUSH
40202: LD_VAR 0 16
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: LD_INT 30
40216: PUSH
40217: LD_INT 32
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 30
40226: PUSH
40227: LD_INT 33
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 91
40241: PUSH
40242: LD_VAR 0 1
40246: PUSH
40247: LD_INT 12
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: LIST
40259: PUSH
40260: EMPTY
40261: LIST
40262: PPUSH
40263: CALL_OW 69
40267: PUSH
40268: LD_INT 2
40270: GREATER
40271: AND
40272: IFFALSE 40295
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40274: LD_ADDR_VAR 0 18
40278: PUSH
40279: LD_INT 11
40281: PUSH
40282: LD_INT 30
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_VAR 0 12
40293: ARRAY
40294: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40295: LD_VAR 0 18
40299: NOT
40300: PUSH
40301: LD_INT 40
40303: PPUSH
40304: LD_VAR 0 16
40308: PPUSH
40309: CALL_OW 321
40313: PUSH
40314: LD_INT 2
40316: EQUAL
40317: AND
40318: PUSH
40319: LD_INT 7
40321: PUSH
40322: LD_VAR 0 5
40326: IN
40327: PUSH
40328: LD_INT 28
40330: PUSH
40331: LD_VAR 0 5
40335: IN
40336: OR
40337: PUSH
40338: LD_INT 45
40340: PUSH
40341: LD_VAR 0 5
40345: IN
40346: OR
40347: AND
40348: IFFALSE 40602
// begin hex := GetHexInfo ( x , y ) ;
40350: LD_ADDR_VAR 0 4
40354: PUSH
40355: LD_VAR 0 10
40359: PPUSH
40360: LD_VAR 0 11
40364: PPUSH
40365: CALL_OW 546
40369: ST_TO_ADDR
// if hex [ 1 ] then
40370: LD_VAR 0 4
40374: PUSH
40375: LD_INT 1
40377: ARRAY
40378: IFFALSE 40382
// exit ;
40380: GO 40785
// height := hex [ 2 ] ;
40382: LD_ADDR_VAR 0 15
40386: PUSH
40387: LD_VAR 0 4
40391: PUSH
40392: LD_INT 2
40394: ARRAY
40395: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40396: LD_ADDR_VAR 0 14
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 3
40409: PUSH
40410: LD_INT 5
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: ST_TO_ADDR
// for i in tmp do
40419: LD_ADDR_VAR 0 8
40423: PUSH
40424: LD_VAR 0 14
40428: PUSH
40429: FOR_IN
40430: IFFALSE 40600
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40432: LD_ADDR_VAR 0 9
40436: PUSH
40437: LD_VAR 0 10
40441: PPUSH
40442: LD_VAR 0 8
40446: PPUSH
40447: LD_INT 5
40449: PPUSH
40450: CALL_OW 272
40454: PUSH
40455: LD_VAR 0 11
40459: PPUSH
40460: LD_VAR 0 8
40464: PPUSH
40465: LD_INT 5
40467: PPUSH
40468: CALL_OW 273
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40477: LD_VAR 0 9
40481: PUSH
40482: LD_INT 1
40484: ARRAY
40485: PPUSH
40486: LD_VAR 0 9
40490: PUSH
40491: LD_INT 2
40493: ARRAY
40494: PPUSH
40495: CALL_OW 488
40499: IFFALSE 40598
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40501: LD_ADDR_VAR 0 4
40505: PUSH
40506: LD_VAR 0 9
40510: PUSH
40511: LD_INT 1
40513: ARRAY
40514: PPUSH
40515: LD_VAR 0 9
40519: PUSH
40520: LD_INT 2
40522: ARRAY
40523: PPUSH
40524: CALL_OW 546
40528: ST_TO_ADDR
// if hex [ 1 ] then
40529: LD_VAR 0 4
40533: PUSH
40534: LD_INT 1
40536: ARRAY
40537: IFFALSE 40541
// continue ;
40539: GO 40429
// h := hex [ 2 ] ;
40541: LD_ADDR_VAR 0 13
40545: PUSH
40546: LD_VAR 0 4
40550: PUSH
40551: LD_INT 2
40553: ARRAY
40554: ST_TO_ADDR
// if h + 7 < height then
40555: LD_VAR 0 13
40559: PUSH
40560: LD_INT 7
40562: PLUS
40563: PUSH
40564: LD_VAR 0 15
40568: LESS
40569: IFFALSE 40598
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40571: LD_ADDR_VAR 0 18
40575: PUSH
40576: LD_INT 7
40578: PUSH
40579: LD_INT 28
40581: PUSH
40582: LD_INT 45
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: PUSH
40590: LD_VAR 0 12
40594: ARRAY
40595: ST_TO_ADDR
// break ;
40596: GO 40600
// end ; end ; end ;
40598: GO 40429
40600: POP
40601: POP
// end ; if not weapon then
40602: LD_VAR 0 18
40606: NOT
40607: IFFALSE 40667
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40609: LD_ADDR_VAR 0 5
40613: PUSH
40614: LD_VAR 0 5
40618: PUSH
40619: LD_INT 11
40621: PUSH
40622: LD_INT 30
40624: PUSH
40625: LD_INT 49
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: DIFF
40633: ST_TO_ADDR
// if not list then
40634: LD_VAR 0 5
40638: NOT
40639: IFFALSE 40643
// exit ;
40641: GO 40785
// weapon := list [ rand ( 1 , list ) ] ;
40643: LD_ADDR_VAR 0 18
40647: PUSH
40648: LD_VAR 0 5
40652: PUSH
40653: LD_INT 1
40655: PPUSH
40656: LD_VAR 0 5
40660: PPUSH
40661: CALL_OW 12
40665: ARRAY
40666: ST_TO_ADDR
// end ; if weapon then
40667: LD_VAR 0 18
40671: IFFALSE 40785
// begin tmp := CostOfWeapon ( weapon ) ;
40673: LD_ADDR_VAR 0 14
40677: PUSH
40678: LD_VAR 0 18
40682: PPUSH
40683: CALL_OW 451
40687: ST_TO_ADDR
// j := GetBase ( tower ) ;
40688: LD_ADDR_VAR 0 9
40692: PUSH
40693: LD_VAR 0 1
40697: PPUSH
40698: CALL_OW 274
40702: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40703: LD_VAR 0 9
40707: PPUSH
40708: LD_INT 1
40710: PPUSH
40711: CALL_OW 275
40715: PUSH
40716: LD_VAR 0 14
40720: PUSH
40721: LD_INT 1
40723: ARRAY
40724: GREATEREQUAL
40725: PUSH
40726: LD_VAR 0 9
40730: PPUSH
40731: LD_INT 2
40733: PPUSH
40734: CALL_OW 275
40738: PUSH
40739: LD_VAR 0 14
40743: PUSH
40744: LD_INT 2
40746: ARRAY
40747: GREATEREQUAL
40748: AND
40749: PUSH
40750: LD_VAR 0 9
40754: PPUSH
40755: LD_INT 3
40757: PPUSH
40758: CALL_OW 275
40762: PUSH
40763: LD_VAR 0 14
40767: PUSH
40768: LD_INT 3
40770: ARRAY
40771: GREATEREQUAL
40772: AND
40773: IFFALSE 40785
// result := weapon ;
40775: LD_ADDR_VAR 0 3
40779: PUSH
40780: LD_VAR 0 18
40784: ST_TO_ADDR
// end ; end ;
40785: LD_VAR 0 3
40789: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40790: LD_INT 0
40792: PPUSH
40793: PPUSH
// result := true ;
40794: LD_ADDR_VAR 0 3
40798: PUSH
40799: LD_INT 1
40801: ST_TO_ADDR
// if array1 = array2 then
40802: LD_VAR 0 1
40806: PUSH
40807: LD_VAR 0 2
40811: EQUAL
40812: IFFALSE 40872
// begin for i = 1 to array1 do
40814: LD_ADDR_VAR 0 4
40818: PUSH
40819: DOUBLE
40820: LD_INT 1
40822: DEC
40823: ST_TO_ADDR
40824: LD_VAR 0 1
40828: PUSH
40829: FOR_TO
40830: IFFALSE 40868
// if array1 [ i ] <> array2 [ i ] then
40832: LD_VAR 0 1
40836: PUSH
40837: LD_VAR 0 4
40841: ARRAY
40842: PUSH
40843: LD_VAR 0 2
40847: PUSH
40848: LD_VAR 0 4
40852: ARRAY
40853: NONEQUAL
40854: IFFALSE 40866
// begin result := false ;
40856: LD_ADDR_VAR 0 3
40860: PUSH
40861: LD_INT 0
40863: ST_TO_ADDR
// break ;
40864: GO 40868
// end ;
40866: GO 40829
40868: POP
40869: POP
// end else
40870: GO 40880
// result := false ;
40872: LD_ADDR_VAR 0 3
40876: PUSH
40877: LD_INT 0
40879: ST_TO_ADDR
// end ;
40880: LD_VAR 0 3
40884: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40885: LD_INT 0
40887: PPUSH
40888: PPUSH
// if not array1 or not array2 then
40889: LD_VAR 0 1
40893: NOT
40894: PUSH
40895: LD_VAR 0 2
40899: NOT
40900: OR
40901: IFFALSE 40905
// exit ;
40903: GO 40969
// result := true ;
40905: LD_ADDR_VAR 0 3
40909: PUSH
40910: LD_INT 1
40912: ST_TO_ADDR
// for i = 1 to array1 do
40913: LD_ADDR_VAR 0 4
40917: PUSH
40918: DOUBLE
40919: LD_INT 1
40921: DEC
40922: ST_TO_ADDR
40923: LD_VAR 0 1
40927: PUSH
40928: FOR_TO
40929: IFFALSE 40967
// if array1 [ i ] <> array2 [ i ] then
40931: LD_VAR 0 1
40935: PUSH
40936: LD_VAR 0 4
40940: ARRAY
40941: PUSH
40942: LD_VAR 0 2
40946: PUSH
40947: LD_VAR 0 4
40951: ARRAY
40952: NONEQUAL
40953: IFFALSE 40965
// begin result := false ;
40955: LD_ADDR_VAR 0 3
40959: PUSH
40960: LD_INT 0
40962: ST_TO_ADDR
// break ;
40963: GO 40967
// end ;
40965: GO 40928
40967: POP
40968: POP
// end ;
40969: LD_VAR 0 3
40973: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40974: LD_INT 0
40976: PPUSH
40977: PPUSH
40978: PPUSH
// pom := GetBase ( fac ) ;
40979: LD_ADDR_VAR 0 5
40983: PUSH
40984: LD_VAR 0 1
40988: PPUSH
40989: CALL_OW 274
40993: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40994: LD_ADDR_VAR 0 4
40998: PUSH
40999: LD_VAR 0 2
41003: PUSH
41004: LD_INT 1
41006: ARRAY
41007: PPUSH
41008: LD_VAR 0 2
41012: PUSH
41013: LD_INT 2
41015: ARRAY
41016: PPUSH
41017: LD_VAR 0 2
41021: PUSH
41022: LD_INT 3
41024: ARRAY
41025: PPUSH
41026: LD_VAR 0 2
41030: PUSH
41031: LD_INT 4
41033: ARRAY
41034: PPUSH
41035: CALL_OW 449
41039: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41040: LD_ADDR_VAR 0 3
41044: PUSH
41045: LD_VAR 0 5
41049: PPUSH
41050: LD_INT 1
41052: PPUSH
41053: CALL_OW 275
41057: PUSH
41058: LD_VAR 0 4
41062: PUSH
41063: LD_INT 1
41065: ARRAY
41066: GREATEREQUAL
41067: PUSH
41068: LD_VAR 0 5
41072: PPUSH
41073: LD_INT 2
41075: PPUSH
41076: CALL_OW 275
41080: PUSH
41081: LD_VAR 0 4
41085: PUSH
41086: LD_INT 2
41088: ARRAY
41089: GREATEREQUAL
41090: AND
41091: PUSH
41092: LD_VAR 0 5
41096: PPUSH
41097: LD_INT 3
41099: PPUSH
41100: CALL_OW 275
41104: PUSH
41105: LD_VAR 0 4
41109: PUSH
41110: LD_INT 3
41112: ARRAY
41113: GREATEREQUAL
41114: AND
41115: ST_TO_ADDR
// end ;
41116: LD_VAR 0 3
41120: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41121: LD_INT 0
41123: PPUSH
41124: PPUSH
41125: PPUSH
41126: PPUSH
// pom := GetBase ( building ) ;
41127: LD_ADDR_VAR 0 3
41131: PUSH
41132: LD_VAR 0 1
41136: PPUSH
41137: CALL_OW 274
41141: ST_TO_ADDR
// if not pom then
41142: LD_VAR 0 3
41146: NOT
41147: IFFALSE 41151
// exit ;
41149: GO 41321
// btype := GetBType ( building ) ;
41151: LD_ADDR_VAR 0 5
41155: PUSH
41156: LD_VAR 0 1
41160: PPUSH
41161: CALL_OW 266
41165: ST_TO_ADDR
// if btype = b_armoury then
41166: LD_VAR 0 5
41170: PUSH
41171: LD_INT 4
41173: EQUAL
41174: IFFALSE 41184
// btype := b_barracks ;
41176: LD_ADDR_VAR 0 5
41180: PUSH
41181: LD_INT 5
41183: ST_TO_ADDR
// if btype = b_depot then
41184: LD_VAR 0 5
41188: PUSH
41189: LD_INT 0
41191: EQUAL
41192: IFFALSE 41202
// btype := b_warehouse ;
41194: LD_ADDR_VAR 0 5
41198: PUSH
41199: LD_INT 1
41201: ST_TO_ADDR
// if btype = b_workshop then
41202: LD_VAR 0 5
41206: PUSH
41207: LD_INT 2
41209: EQUAL
41210: IFFALSE 41220
// btype := b_factory ;
41212: LD_ADDR_VAR 0 5
41216: PUSH
41217: LD_INT 3
41219: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41220: LD_ADDR_VAR 0 4
41224: PUSH
41225: LD_VAR 0 5
41229: PPUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: CALL_OW 248
41239: PPUSH
41240: CALL_OW 450
41244: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41245: LD_ADDR_VAR 0 2
41249: PUSH
41250: LD_VAR 0 3
41254: PPUSH
41255: LD_INT 1
41257: PPUSH
41258: CALL_OW 275
41262: PUSH
41263: LD_VAR 0 4
41267: PUSH
41268: LD_INT 1
41270: ARRAY
41271: GREATEREQUAL
41272: PUSH
41273: LD_VAR 0 3
41277: PPUSH
41278: LD_INT 2
41280: PPUSH
41281: CALL_OW 275
41285: PUSH
41286: LD_VAR 0 4
41290: PUSH
41291: LD_INT 2
41293: ARRAY
41294: GREATEREQUAL
41295: AND
41296: PUSH
41297: LD_VAR 0 3
41301: PPUSH
41302: LD_INT 3
41304: PPUSH
41305: CALL_OW 275
41309: PUSH
41310: LD_VAR 0 4
41314: PUSH
41315: LD_INT 3
41317: ARRAY
41318: GREATEREQUAL
41319: AND
41320: ST_TO_ADDR
// end ;
41321: LD_VAR 0 2
41325: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41326: LD_INT 0
41328: PPUSH
41329: PPUSH
41330: PPUSH
// pom := GetBase ( building ) ;
41331: LD_ADDR_VAR 0 4
41335: PUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: CALL_OW 274
41345: ST_TO_ADDR
// if not pom then
41346: LD_VAR 0 4
41350: NOT
41351: IFFALSE 41355
// exit ;
41353: GO 41456
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41355: LD_ADDR_VAR 0 5
41359: PUSH
41360: LD_VAR 0 2
41364: PPUSH
41365: LD_VAR 0 1
41369: PPUSH
41370: CALL_OW 248
41374: PPUSH
41375: CALL_OW 450
41379: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41380: LD_ADDR_VAR 0 3
41384: PUSH
41385: LD_VAR 0 4
41389: PPUSH
41390: LD_INT 1
41392: PPUSH
41393: CALL_OW 275
41397: PUSH
41398: LD_VAR 0 5
41402: PUSH
41403: LD_INT 1
41405: ARRAY
41406: GREATEREQUAL
41407: PUSH
41408: LD_VAR 0 4
41412: PPUSH
41413: LD_INT 2
41415: PPUSH
41416: CALL_OW 275
41420: PUSH
41421: LD_VAR 0 5
41425: PUSH
41426: LD_INT 2
41428: ARRAY
41429: GREATEREQUAL
41430: AND
41431: PUSH
41432: LD_VAR 0 4
41436: PPUSH
41437: LD_INT 3
41439: PPUSH
41440: CALL_OW 275
41444: PUSH
41445: LD_VAR 0 5
41449: PUSH
41450: LD_INT 3
41452: ARRAY
41453: GREATEREQUAL
41454: AND
41455: ST_TO_ADDR
// end ;
41456: LD_VAR 0 3
41460: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41461: LD_INT 0
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
// result := false ;
41474: LD_ADDR_VAR 0 8
41478: PUSH
41479: LD_INT 0
41481: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41482: LD_VAR 0 5
41486: NOT
41487: PUSH
41488: LD_VAR 0 1
41492: NOT
41493: OR
41494: PUSH
41495: LD_VAR 0 2
41499: NOT
41500: OR
41501: PUSH
41502: LD_VAR 0 3
41506: NOT
41507: OR
41508: IFFALSE 41512
// exit ;
41510: GO 42326
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41512: LD_ADDR_VAR 0 14
41516: PUSH
41517: LD_VAR 0 1
41521: PPUSH
41522: LD_VAR 0 2
41526: PPUSH
41527: LD_VAR 0 3
41531: PPUSH
41532: LD_VAR 0 4
41536: PPUSH
41537: LD_VAR 0 5
41541: PUSH
41542: LD_INT 1
41544: ARRAY
41545: PPUSH
41546: CALL_OW 248
41550: PPUSH
41551: LD_INT 0
41553: PPUSH
41554: CALL 43579 0 6
41558: ST_TO_ADDR
// if not hexes then
41559: LD_VAR 0 14
41563: NOT
41564: IFFALSE 41568
// exit ;
41566: GO 42326
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41568: LD_ADDR_VAR 0 17
41572: PUSH
41573: LD_VAR 0 5
41577: PPUSH
41578: LD_INT 22
41580: PUSH
41581: LD_VAR 0 13
41585: PPUSH
41586: CALL_OW 255
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: LD_INT 30
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 30
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PPUSH
41627: CALL_OW 72
41631: ST_TO_ADDR
// for i = 1 to hexes do
41632: LD_ADDR_VAR 0 9
41636: PUSH
41637: DOUBLE
41638: LD_INT 1
41640: DEC
41641: ST_TO_ADDR
41642: LD_VAR 0 14
41646: PUSH
41647: FOR_TO
41648: IFFALSE 42324
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41650: LD_ADDR_VAR 0 13
41654: PUSH
41655: LD_VAR 0 14
41659: PUSH
41660: LD_VAR 0 9
41664: ARRAY
41665: PUSH
41666: LD_INT 1
41668: ARRAY
41669: PPUSH
41670: LD_VAR 0 14
41674: PUSH
41675: LD_VAR 0 9
41679: ARRAY
41680: PUSH
41681: LD_INT 2
41683: ARRAY
41684: PPUSH
41685: CALL_OW 428
41689: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41690: LD_VAR 0 14
41694: PUSH
41695: LD_VAR 0 9
41699: ARRAY
41700: PUSH
41701: LD_INT 1
41703: ARRAY
41704: PPUSH
41705: LD_VAR 0 14
41709: PUSH
41710: LD_VAR 0 9
41714: ARRAY
41715: PUSH
41716: LD_INT 2
41718: ARRAY
41719: PPUSH
41720: CALL_OW 351
41724: PUSH
41725: LD_VAR 0 14
41729: PUSH
41730: LD_VAR 0 9
41734: ARRAY
41735: PUSH
41736: LD_INT 1
41738: ARRAY
41739: PPUSH
41740: LD_VAR 0 14
41744: PUSH
41745: LD_VAR 0 9
41749: ARRAY
41750: PUSH
41751: LD_INT 2
41753: ARRAY
41754: PPUSH
41755: CALL_OW 488
41759: NOT
41760: OR
41761: PUSH
41762: LD_VAR 0 13
41766: PPUSH
41767: CALL_OW 247
41771: PUSH
41772: LD_INT 3
41774: EQUAL
41775: OR
41776: IFFALSE 41782
// exit ;
41778: POP
41779: POP
41780: GO 42326
// if not tmp then
41782: LD_VAR 0 13
41786: NOT
41787: IFFALSE 41791
// continue ;
41789: GO 41647
// result := true ;
41791: LD_ADDR_VAR 0 8
41795: PUSH
41796: LD_INT 1
41798: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41799: LD_VAR 0 6
41803: PUSH
41804: LD_VAR 0 13
41808: PPUSH
41809: CALL_OW 247
41813: PUSH
41814: LD_INT 2
41816: EQUAL
41817: AND
41818: PUSH
41819: LD_VAR 0 13
41823: PPUSH
41824: CALL_OW 263
41828: PUSH
41829: LD_INT 1
41831: EQUAL
41832: AND
41833: IFFALSE 41997
// begin if IsDrivenBy ( tmp ) then
41835: LD_VAR 0 13
41839: PPUSH
41840: CALL_OW 311
41844: IFFALSE 41848
// continue ;
41846: GO 41647
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41848: LD_VAR 0 6
41852: PPUSH
41853: LD_INT 3
41855: PUSH
41856: LD_INT 60
41858: PUSH
41859: EMPTY
41860: LIST
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 3
41868: PUSH
41869: LD_INT 55
41871: PUSH
41872: EMPTY
41873: LIST
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PPUSH
41883: CALL_OW 72
41887: IFFALSE 41995
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41889: LD_ADDR_VAR 0 18
41893: PUSH
41894: LD_VAR 0 6
41898: PPUSH
41899: LD_INT 3
41901: PUSH
41902: LD_INT 60
41904: PUSH
41905: EMPTY
41906: LIST
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 3
41914: PUSH
41915: LD_INT 55
41917: PUSH
41918: EMPTY
41919: LIST
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PPUSH
41929: CALL_OW 72
41933: PUSH
41934: LD_INT 1
41936: ARRAY
41937: ST_TO_ADDR
// if IsInUnit ( driver ) then
41938: LD_VAR 0 18
41942: PPUSH
41943: CALL_OW 310
41947: IFFALSE 41958
// ComExit ( driver ) ;
41949: LD_VAR 0 18
41953: PPUSH
41954: CALL 67371 0 1
// AddComEnterUnit ( driver , tmp ) ;
41958: LD_VAR 0 18
41962: PPUSH
41963: LD_VAR 0 13
41967: PPUSH
41968: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41972: LD_VAR 0 18
41976: PPUSH
41977: LD_VAR 0 7
41981: PPUSH
41982: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41986: LD_VAR 0 18
41990: PPUSH
41991: CALL_OW 181
// end ; continue ;
41995: GO 41647
// end ; if not cleaners or not tmp in cleaners then
41997: LD_VAR 0 6
42001: NOT
42002: PUSH
42003: LD_VAR 0 13
42007: PUSH
42008: LD_VAR 0 6
42012: IN
42013: NOT
42014: OR
42015: IFFALSE 42322
// begin if dep then
42017: LD_VAR 0 17
42021: IFFALSE 42157
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42023: LD_ADDR_VAR 0 16
42027: PUSH
42028: LD_VAR 0 17
42032: PUSH
42033: LD_INT 1
42035: ARRAY
42036: PPUSH
42037: CALL_OW 250
42041: PPUSH
42042: LD_VAR 0 17
42046: PUSH
42047: LD_INT 1
42049: ARRAY
42050: PPUSH
42051: CALL_OW 254
42055: PPUSH
42056: LD_INT 5
42058: PPUSH
42059: CALL_OW 272
42063: PUSH
42064: LD_VAR 0 17
42068: PUSH
42069: LD_INT 1
42071: ARRAY
42072: PPUSH
42073: CALL_OW 251
42077: PPUSH
42078: LD_VAR 0 17
42082: PUSH
42083: LD_INT 1
42085: ARRAY
42086: PPUSH
42087: CALL_OW 254
42091: PPUSH
42092: LD_INT 5
42094: PPUSH
42095: CALL_OW 273
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42104: LD_VAR 0 16
42108: PUSH
42109: LD_INT 1
42111: ARRAY
42112: PPUSH
42113: LD_VAR 0 16
42117: PUSH
42118: LD_INT 2
42120: ARRAY
42121: PPUSH
42122: CALL_OW 488
42126: IFFALSE 42157
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42128: LD_VAR 0 13
42132: PPUSH
42133: LD_VAR 0 16
42137: PUSH
42138: LD_INT 1
42140: ARRAY
42141: PPUSH
42142: LD_VAR 0 16
42146: PUSH
42147: LD_INT 2
42149: ARRAY
42150: PPUSH
42151: CALL_OW 111
// continue ;
42155: GO 41647
// end ; end ; r := GetDir ( tmp ) ;
42157: LD_ADDR_VAR 0 15
42161: PUSH
42162: LD_VAR 0 13
42166: PPUSH
42167: CALL_OW 254
42171: ST_TO_ADDR
// if r = 5 then
42172: LD_VAR 0 15
42176: PUSH
42177: LD_INT 5
42179: EQUAL
42180: IFFALSE 42190
// r := 0 ;
42182: LD_ADDR_VAR 0 15
42186: PUSH
42187: LD_INT 0
42189: ST_TO_ADDR
// for j = r to 5 do
42190: LD_ADDR_VAR 0 10
42194: PUSH
42195: DOUBLE
42196: LD_VAR 0 15
42200: DEC
42201: ST_TO_ADDR
42202: LD_INT 5
42204: PUSH
42205: FOR_TO
42206: IFFALSE 42320
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42208: LD_ADDR_VAR 0 11
42212: PUSH
42213: LD_VAR 0 13
42217: PPUSH
42218: CALL_OW 250
42222: PPUSH
42223: LD_VAR 0 10
42227: PPUSH
42228: LD_INT 2
42230: PPUSH
42231: CALL_OW 272
42235: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42236: LD_ADDR_VAR 0 12
42240: PUSH
42241: LD_VAR 0 13
42245: PPUSH
42246: CALL_OW 251
42250: PPUSH
42251: LD_VAR 0 10
42255: PPUSH
42256: LD_INT 2
42258: PPUSH
42259: CALL_OW 273
42263: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42264: LD_VAR 0 11
42268: PPUSH
42269: LD_VAR 0 12
42273: PPUSH
42274: CALL_OW 488
42278: PUSH
42279: LD_VAR 0 11
42283: PPUSH
42284: LD_VAR 0 12
42288: PPUSH
42289: CALL_OW 428
42293: NOT
42294: AND
42295: IFFALSE 42318
// begin ComMoveXY ( tmp , _x , _y ) ;
42297: LD_VAR 0 13
42301: PPUSH
42302: LD_VAR 0 11
42306: PPUSH
42307: LD_VAR 0 12
42311: PPUSH
42312: CALL_OW 111
// break ;
42316: GO 42320
// end ; end ;
42318: GO 42205
42320: POP
42321: POP
// end ; end ;
42322: GO 41647
42324: POP
42325: POP
// end ;
42326: LD_VAR 0 8
42330: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42331: LD_INT 0
42333: PPUSH
// result := true ;
42334: LD_ADDR_VAR 0 3
42338: PUSH
42339: LD_INT 1
42341: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42342: LD_VAR 0 2
42346: PUSH
42347: LD_INT 24
42349: DOUBLE
42350: EQUAL
42351: IFTRUE 42361
42353: LD_INT 33
42355: DOUBLE
42356: EQUAL
42357: IFTRUE 42361
42359: GO 42386
42361: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42362: LD_ADDR_VAR 0 3
42366: PUSH
42367: LD_INT 32
42369: PPUSH
42370: LD_VAR 0 1
42374: PPUSH
42375: CALL_OW 321
42379: PUSH
42380: LD_INT 2
42382: EQUAL
42383: ST_TO_ADDR
42384: GO 42702
42386: LD_INT 20
42388: DOUBLE
42389: EQUAL
42390: IFTRUE 42394
42392: GO 42419
42394: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42395: LD_ADDR_VAR 0 3
42399: PUSH
42400: LD_INT 6
42402: PPUSH
42403: LD_VAR 0 1
42407: PPUSH
42408: CALL_OW 321
42412: PUSH
42413: LD_INT 2
42415: EQUAL
42416: ST_TO_ADDR
42417: GO 42702
42419: LD_INT 22
42421: DOUBLE
42422: EQUAL
42423: IFTRUE 42433
42425: LD_INT 36
42427: DOUBLE
42428: EQUAL
42429: IFTRUE 42433
42431: GO 42458
42433: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42434: LD_ADDR_VAR 0 3
42438: PUSH
42439: LD_INT 15
42441: PPUSH
42442: LD_VAR 0 1
42446: PPUSH
42447: CALL_OW 321
42451: PUSH
42452: LD_INT 2
42454: EQUAL
42455: ST_TO_ADDR
42456: GO 42702
42458: LD_INT 30
42460: DOUBLE
42461: EQUAL
42462: IFTRUE 42466
42464: GO 42491
42466: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42467: LD_ADDR_VAR 0 3
42471: PUSH
42472: LD_INT 20
42474: PPUSH
42475: LD_VAR 0 1
42479: PPUSH
42480: CALL_OW 321
42484: PUSH
42485: LD_INT 2
42487: EQUAL
42488: ST_TO_ADDR
42489: GO 42702
42491: LD_INT 28
42493: DOUBLE
42494: EQUAL
42495: IFTRUE 42505
42497: LD_INT 21
42499: DOUBLE
42500: EQUAL
42501: IFTRUE 42505
42503: GO 42530
42505: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42506: LD_ADDR_VAR 0 3
42510: PUSH
42511: LD_INT 21
42513: PPUSH
42514: LD_VAR 0 1
42518: PPUSH
42519: CALL_OW 321
42523: PUSH
42524: LD_INT 2
42526: EQUAL
42527: ST_TO_ADDR
42528: GO 42702
42530: LD_INT 16
42532: DOUBLE
42533: EQUAL
42534: IFTRUE 42538
42536: GO 42563
42538: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42539: LD_ADDR_VAR 0 3
42543: PUSH
42544: LD_INT 84
42546: PPUSH
42547: LD_VAR 0 1
42551: PPUSH
42552: CALL_OW 321
42556: PUSH
42557: LD_INT 2
42559: EQUAL
42560: ST_TO_ADDR
42561: GO 42702
42563: LD_INT 19
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42577
42569: LD_INT 23
42571: DOUBLE
42572: EQUAL
42573: IFTRUE 42577
42575: GO 42602
42577: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42578: LD_ADDR_VAR 0 3
42582: PUSH
42583: LD_INT 83
42585: PPUSH
42586: LD_VAR 0 1
42590: PPUSH
42591: CALL_OW 321
42595: PUSH
42596: LD_INT 2
42598: EQUAL
42599: ST_TO_ADDR
42600: GO 42702
42602: LD_INT 17
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42635
42610: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_INT 39
42618: PPUSH
42619: LD_VAR 0 1
42623: PPUSH
42624: CALL_OW 321
42628: PUSH
42629: LD_INT 2
42631: EQUAL
42632: ST_TO_ADDR
42633: GO 42702
42635: LD_INT 18
42637: DOUBLE
42638: EQUAL
42639: IFTRUE 42643
42641: GO 42668
42643: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42644: LD_ADDR_VAR 0 3
42648: PUSH
42649: LD_INT 40
42651: PPUSH
42652: LD_VAR 0 1
42656: PPUSH
42657: CALL_OW 321
42661: PUSH
42662: LD_INT 2
42664: EQUAL
42665: ST_TO_ADDR
42666: GO 42702
42668: LD_INT 27
42670: DOUBLE
42671: EQUAL
42672: IFTRUE 42676
42674: GO 42701
42676: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42677: LD_ADDR_VAR 0 3
42681: PUSH
42682: LD_INT 35
42684: PPUSH
42685: LD_VAR 0 1
42689: PPUSH
42690: CALL_OW 321
42694: PUSH
42695: LD_INT 2
42697: EQUAL
42698: ST_TO_ADDR
42699: GO 42702
42701: POP
// end ;
42702: LD_VAR 0 3
42706: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42707: LD_INT 0
42709: PPUSH
42710: PPUSH
42711: PPUSH
42712: PPUSH
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
42719: PPUSH
// result := false ;
42720: LD_ADDR_VAR 0 6
42724: PUSH
42725: LD_INT 0
42727: ST_TO_ADDR
// if btype = b_depot then
42728: LD_VAR 0 2
42732: PUSH
42733: LD_INT 0
42735: EQUAL
42736: IFFALSE 42748
// begin result := true ;
42738: LD_ADDR_VAR 0 6
42742: PUSH
42743: LD_INT 1
42745: ST_TO_ADDR
// exit ;
42746: GO 43574
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42748: LD_VAR 0 1
42752: NOT
42753: PUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 266
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: IN
42774: NOT
42775: OR
42776: PUSH
42777: LD_VAR 0 2
42781: NOT
42782: OR
42783: PUSH
42784: LD_VAR 0 5
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: LD_INT 4
42803: PUSH
42804: LD_INT 5
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: IN
42815: NOT
42816: OR
42817: PUSH
42818: LD_VAR 0 3
42822: PPUSH
42823: LD_VAR 0 4
42827: PPUSH
42828: CALL_OW 488
42832: NOT
42833: OR
42834: IFFALSE 42838
// exit ;
42836: GO 43574
// side := GetSide ( depot ) ;
42838: LD_ADDR_VAR 0 9
42842: PUSH
42843: LD_VAR 0 1
42847: PPUSH
42848: CALL_OW 255
42852: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42853: LD_VAR 0 9
42857: PPUSH
42858: LD_VAR 0 2
42862: PPUSH
42863: CALL 42331 0 2
42867: NOT
42868: IFFALSE 42872
// exit ;
42870: GO 43574
// pom := GetBase ( depot ) ;
42872: LD_ADDR_VAR 0 10
42876: PUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 274
42886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42887: LD_ADDR_VAR 0 11
42891: PUSH
42892: LD_VAR 0 2
42896: PPUSH
42897: LD_VAR 0 1
42901: PPUSH
42902: CALL_OW 248
42906: PPUSH
42907: CALL_OW 450
42911: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42912: LD_VAR 0 10
42916: PPUSH
42917: LD_INT 1
42919: PPUSH
42920: CALL_OW 275
42924: PUSH
42925: LD_VAR 0 11
42929: PUSH
42930: LD_INT 1
42932: ARRAY
42933: GREATEREQUAL
42934: PUSH
42935: LD_VAR 0 10
42939: PPUSH
42940: LD_INT 2
42942: PPUSH
42943: CALL_OW 275
42947: PUSH
42948: LD_VAR 0 11
42952: PUSH
42953: LD_INT 2
42955: ARRAY
42956: GREATEREQUAL
42957: AND
42958: PUSH
42959: LD_VAR 0 10
42963: PPUSH
42964: LD_INT 3
42966: PPUSH
42967: CALL_OW 275
42971: PUSH
42972: LD_VAR 0 11
42976: PUSH
42977: LD_INT 3
42979: ARRAY
42980: GREATEREQUAL
42981: AND
42982: NOT
42983: IFFALSE 42987
// exit ;
42985: GO 43574
// if GetBType ( depot ) = b_depot then
42987: LD_VAR 0 1
42991: PPUSH
42992: CALL_OW 266
42996: PUSH
42997: LD_INT 0
42999: EQUAL
43000: IFFALSE 43012
// dist := 28 else
43002: LD_ADDR_VAR 0 14
43006: PUSH
43007: LD_INT 28
43009: ST_TO_ADDR
43010: GO 43020
// dist := 36 ;
43012: LD_ADDR_VAR 0 14
43016: PUSH
43017: LD_INT 36
43019: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43020: LD_VAR 0 1
43024: PPUSH
43025: LD_VAR 0 3
43029: PPUSH
43030: LD_VAR 0 4
43034: PPUSH
43035: CALL_OW 297
43039: PUSH
43040: LD_VAR 0 14
43044: GREATER
43045: IFFALSE 43049
// exit ;
43047: GO 43574
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43049: LD_ADDR_VAR 0 12
43053: PUSH
43054: LD_VAR 0 2
43058: PPUSH
43059: LD_VAR 0 3
43063: PPUSH
43064: LD_VAR 0 4
43068: PPUSH
43069: LD_VAR 0 5
43073: PPUSH
43074: LD_VAR 0 1
43078: PPUSH
43079: CALL_OW 248
43083: PPUSH
43084: LD_INT 0
43086: PPUSH
43087: CALL 43579 0 6
43091: ST_TO_ADDR
// if not hexes then
43092: LD_VAR 0 12
43096: NOT
43097: IFFALSE 43101
// exit ;
43099: GO 43574
// hex := GetHexInfo ( x , y ) ;
43101: LD_ADDR_VAR 0 15
43105: PUSH
43106: LD_VAR 0 3
43110: PPUSH
43111: LD_VAR 0 4
43115: PPUSH
43116: CALL_OW 546
43120: ST_TO_ADDR
// if hex [ 1 ] then
43121: LD_VAR 0 15
43125: PUSH
43126: LD_INT 1
43128: ARRAY
43129: IFFALSE 43133
// exit ;
43131: GO 43574
// height := hex [ 2 ] ;
43133: LD_ADDR_VAR 0 13
43137: PUSH
43138: LD_VAR 0 15
43142: PUSH
43143: LD_INT 2
43145: ARRAY
43146: ST_TO_ADDR
// for i = 1 to hexes do
43147: LD_ADDR_VAR 0 7
43151: PUSH
43152: DOUBLE
43153: LD_INT 1
43155: DEC
43156: ST_TO_ADDR
43157: LD_VAR 0 12
43161: PUSH
43162: FOR_TO
43163: IFFALSE 43493
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43165: LD_VAR 0 12
43169: PUSH
43170: LD_VAR 0 7
43174: ARRAY
43175: PUSH
43176: LD_INT 1
43178: ARRAY
43179: PPUSH
43180: LD_VAR 0 12
43184: PUSH
43185: LD_VAR 0 7
43189: ARRAY
43190: PUSH
43191: LD_INT 2
43193: ARRAY
43194: PPUSH
43195: CALL_OW 488
43199: NOT
43200: PUSH
43201: LD_VAR 0 12
43205: PUSH
43206: LD_VAR 0 7
43210: ARRAY
43211: PUSH
43212: LD_INT 1
43214: ARRAY
43215: PPUSH
43216: LD_VAR 0 12
43220: PUSH
43221: LD_VAR 0 7
43225: ARRAY
43226: PUSH
43227: LD_INT 2
43229: ARRAY
43230: PPUSH
43231: CALL_OW 428
43235: PUSH
43236: LD_INT 0
43238: GREATER
43239: OR
43240: PUSH
43241: LD_VAR 0 12
43245: PUSH
43246: LD_VAR 0 7
43250: ARRAY
43251: PUSH
43252: LD_INT 1
43254: ARRAY
43255: PPUSH
43256: LD_VAR 0 12
43260: PUSH
43261: LD_VAR 0 7
43265: ARRAY
43266: PUSH
43267: LD_INT 2
43269: ARRAY
43270: PPUSH
43271: CALL_OW 351
43275: OR
43276: IFFALSE 43282
// exit ;
43278: POP
43279: POP
43280: GO 43574
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43282: LD_ADDR_VAR 0 8
43286: PUSH
43287: LD_VAR 0 12
43291: PUSH
43292: LD_VAR 0 7
43296: ARRAY
43297: PUSH
43298: LD_INT 1
43300: ARRAY
43301: PPUSH
43302: LD_VAR 0 12
43306: PUSH
43307: LD_VAR 0 7
43311: ARRAY
43312: PUSH
43313: LD_INT 2
43315: ARRAY
43316: PPUSH
43317: CALL_OW 546
43321: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43322: LD_VAR 0 8
43326: PUSH
43327: LD_INT 1
43329: ARRAY
43330: PUSH
43331: LD_VAR 0 8
43335: PUSH
43336: LD_INT 2
43338: ARRAY
43339: PUSH
43340: LD_VAR 0 13
43344: PUSH
43345: LD_INT 2
43347: PLUS
43348: GREATER
43349: OR
43350: PUSH
43351: LD_VAR 0 8
43355: PUSH
43356: LD_INT 2
43358: ARRAY
43359: PUSH
43360: LD_VAR 0 13
43364: PUSH
43365: LD_INT 2
43367: MINUS
43368: LESS
43369: OR
43370: PUSH
43371: LD_VAR 0 8
43375: PUSH
43376: LD_INT 3
43378: ARRAY
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 8
43385: PUSH
43386: LD_INT 9
43388: PUSH
43389: LD_INT 10
43391: PUSH
43392: LD_INT 11
43394: PUSH
43395: LD_INT 12
43397: PUSH
43398: LD_INT 13
43400: PUSH
43401: LD_INT 16
43403: PUSH
43404: LD_INT 17
43406: PUSH
43407: LD_INT 18
43409: PUSH
43410: LD_INT 19
43412: PUSH
43413: LD_INT 20
43415: PUSH
43416: LD_INT 21
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: IN
43434: NOT
43435: OR
43436: PUSH
43437: LD_VAR 0 8
43441: PUSH
43442: LD_INT 5
43444: ARRAY
43445: NOT
43446: OR
43447: PUSH
43448: LD_VAR 0 8
43452: PUSH
43453: LD_INT 6
43455: ARRAY
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 7
43465: PUSH
43466: LD_INT 9
43468: PUSH
43469: LD_INT 10
43471: PUSH
43472: LD_INT 11
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: IN
43483: NOT
43484: OR
43485: IFFALSE 43491
// exit ;
43487: POP
43488: POP
43489: GO 43574
// end ;
43491: GO 43162
43493: POP
43494: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43495: LD_VAR 0 9
43499: PPUSH
43500: LD_VAR 0 3
43504: PPUSH
43505: LD_VAR 0 4
43509: PPUSH
43510: LD_INT 20
43512: PPUSH
43513: CALL 35497 0 4
43517: PUSH
43518: LD_INT 4
43520: ARRAY
43521: IFFALSE 43525
// exit ;
43523: GO 43574
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43525: LD_VAR 0 2
43529: PUSH
43530: LD_INT 29
43532: PUSH
43533: LD_INT 30
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: IN
43540: PUSH
43541: LD_VAR 0 3
43545: PPUSH
43546: LD_VAR 0 4
43550: PPUSH
43551: LD_VAR 0 9
43555: PPUSH
43556: CALL_OW 440
43560: NOT
43561: AND
43562: IFFALSE 43566
// exit ;
43564: GO 43574
// result := true ;
43566: LD_ADDR_VAR 0 6
43570: PUSH
43571: LD_INT 1
43573: ST_TO_ADDR
// end ;
43574: LD_VAR 0 6
43578: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43579: LD_INT 0
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
43593: PPUSH
43594: PPUSH
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
43602: PPUSH
43603: PPUSH
43604: PPUSH
43605: PPUSH
43606: PPUSH
43607: PPUSH
43608: PPUSH
43609: PPUSH
43610: PPUSH
43611: PPUSH
43612: PPUSH
43613: PPUSH
43614: PPUSH
43615: PPUSH
43616: PPUSH
43617: PPUSH
43618: PPUSH
43619: PPUSH
43620: PPUSH
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
43625: PPUSH
43626: PPUSH
43627: PPUSH
43628: PPUSH
43629: PPUSH
43630: PPUSH
43631: PPUSH
43632: PPUSH
43633: PPUSH
43634: PPUSH
43635: PPUSH
43636: PPUSH
43637: PPUSH
43638: PPUSH
// result = [ ] ;
43639: LD_ADDR_VAR 0 7
43643: PUSH
43644: EMPTY
43645: ST_TO_ADDR
// temp_list = [ ] ;
43646: LD_ADDR_VAR 0 9
43650: PUSH
43651: EMPTY
43652: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43653: LD_VAR 0 4
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: LD_INT 3
43669: PUSH
43670: LD_INT 4
43672: PUSH
43673: LD_INT 5
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: IN
43684: NOT
43685: PUSH
43686: LD_VAR 0 1
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: IN
43701: PUSH
43702: LD_VAR 0 5
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 3
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: LIST
43720: IN
43721: NOT
43722: AND
43723: OR
43724: IFFALSE 43728
// exit ;
43726: GO 62119
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43728: LD_VAR 0 1
43732: PUSH
43733: LD_INT 6
43735: PUSH
43736: LD_INT 7
43738: PUSH
43739: LD_INT 8
43741: PUSH
43742: LD_INT 13
43744: PUSH
43745: LD_INT 12
43747: PUSH
43748: LD_INT 15
43750: PUSH
43751: LD_INT 11
43753: PUSH
43754: LD_INT 14
43756: PUSH
43757: LD_INT 10
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: IN
43771: IFFALSE 43781
// btype = b_lab ;
43773: LD_ADDR_VAR 0 1
43777: PUSH
43778: LD_INT 6
43780: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43781: LD_VAR 0 6
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: LD_INT 2
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: IN
43800: NOT
43801: PUSH
43802: LD_VAR 0 1
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: LD_INT 3
43818: PUSH
43819: LD_INT 6
43821: PUSH
43822: LD_INT 36
43824: PUSH
43825: LD_INT 4
43827: PUSH
43828: LD_INT 5
43830: PUSH
43831: LD_INT 31
43833: PUSH
43834: LD_INT 32
43836: PUSH
43837: LD_INT 33
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: IN
43853: NOT
43854: PUSH
43855: LD_VAR 0 6
43859: PUSH
43860: LD_INT 1
43862: EQUAL
43863: AND
43864: OR
43865: PUSH
43866: LD_VAR 0 1
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 3
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: IN
43881: NOT
43882: PUSH
43883: LD_VAR 0 6
43887: PUSH
43888: LD_INT 2
43890: EQUAL
43891: AND
43892: OR
43893: IFFALSE 43903
// mode = 0 ;
43895: LD_ADDR_VAR 0 6
43899: PUSH
43900: LD_INT 0
43902: ST_TO_ADDR
// case mode of 0 :
43903: LD_VAR 0 6
43907: PUSH
43908: LD_INT 0
43910: DOUBLE
43911: EQUAL
43912: IFTRUE 43916
43914: GO 55369
43916: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43917: LD_ADDR_VAR 0 11
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: LD_INT 2
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 3
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44110: LD_ADDR_VAR 0 12
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 3
44267: NEG
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 3
44278: NEG
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44306: LD_ADDR_VAR 0 13
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 3
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 3
44465: NEG
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 3
44477: NEG
44478: PUSH
44479: LD_INT 3
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44505: LD_ADDR_VAR 0 14
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 3
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 3
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44701: LD_ADDR_VAR 0 15
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 2
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 3
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 3
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44894: LD_ADDR_VAR 0 16
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 3
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 3
45051: PUSH
45052: LD_INT 3
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45087: LD_ADDR_VAR 0 17
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45317: LD_ADDR_VAR 0 18
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 2
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45547: LD_ADDR_VAR 0 19
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: LD_INT 2
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: LD_INT 2
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45777: LD_ADDR_VAR 0 20
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46007: LD_ADDR_VAR 0 21
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: LD_INT 2
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46237: LD_ADDR_VAR 0 22
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: LD_INT 2
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46467: LD_ADDR_VAR 0 23
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 3
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46747: LD_ADDR_VAR 0 24
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47023: LD_ADDR_VAR 0 25
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 2
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 3
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 3
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 3
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 3
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47297: LD_ADDR_VAR 0 26
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: LD_INT 2
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47573: LD_ADDR_VAR 0 27
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 3
47818: NEG
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47853: LD_ADDR_VAR 0 28
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: LD_INT 3
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 3
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 3
48088: NEG
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: NEG
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48135: LD_ADDR_VAR 0 29
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 2
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: LD_INT 3
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 3
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 3
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48414: LD_ADDR_VAR 0 30
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 3
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: LD_INT 3
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 3
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48692: LD_ADDR_VAR 0 31
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 3
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 3
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 3
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: NEG
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48970: LD_ADDR_VAR 0 32
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 3
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49248: LD_ADDR_VAR 0 33
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: NEG
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 3
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 3
49492: NEG
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49527: LD_ADDR_VAR 0 34
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 3
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49807: LD_ADDR_VAR 0 35
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49919: LD_ADDR_VAR 0 36
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50031: LD_ADDR_VAR 0 37
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50143: LD_ADDR_VAR 0 38
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50255: LD_ADDR_VAR 0 39
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50367: LD_ADDR_VAR 0 40
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50479: LD_ADDR_VAR 0 41
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 2
50669: NEG
50670: PUSH
50671: LD_INT 3
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 3
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 3
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 3
50722: PUSH
50723: LD_INT 3
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 3
50753: NEG
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 3
50788: NEG
50789: PUSH
50790: LD_INT 3
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50829: LD_ADDR_VAR 0 42
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: LD_INT 3
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 3
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 3
51075: PUSH
51076: LD_INT 3
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: LD_INT 3
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: LD_INT 3
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51179: LD_ADDR_VAR 0 43
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: LD_INT 3
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 2
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 3
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 3
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 3
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51527: LD_ADDR_VAR 0 44
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 2
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: LD_INT 3
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 3
51801: NEG
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 3
51812: NEG
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 3
51836: NEG
51837: PUSH
51838: LD_INT 3
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51877: LD_ADDR_VAR 0 45
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: LD_INT 3
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 3
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 3
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: LD_INT 3
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 3
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: LD_INT 3
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52227: LD_ADDR_VAR 0 46
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 3
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 3
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 3
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 3
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 3
52523: NEG
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 3
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52575: LD_ADDR_VAR 0 47
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52726: LD_ADDR_VAR 0 48
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52873: LD_ADDR_VAR 0 49
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53017: LD_ADDR_VAR 0 50
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: LD_INT 2
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53161: LD_ADDR_VAR 0 51
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: NEG
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53308: LD_ADDR_VAR 0 52
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53459: LD_ADDR_VAR 0 53
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53689: LD_ADDR_VAR 0 54
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: LD_INT 2
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53919: LD_ADDR_VAR 0 55
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: LD_INT 2
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54149: LD_ADDR_VAR 0 56
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54379: LD_ADDR_VAR 0 57
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54609: LD_ADDR_VAR 0 58
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54839: LD_ADDR_VAR 0 59
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54927: LD_ADDR_VAR 0 60
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55015: LD_ADDR_VAR 0 61
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55103: LD_ADDR_VAR 0 62
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55191: LD_ADDR_VAR 0 63
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55279: LD_ADDR_VAR 0 64
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: ST_TO_ADDR
// end ; 1 :
55367: GO 61264
55369: LD_INT 1
55371: DOUBLE
55372: EQUAL
55373: IFTRUE 55377
55375: GO 58000
55377: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55378: LD_ADDR_VAR 0 11
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 3
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 3
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55422: LD_ADDR_VAR 0 12
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: LIST
55462: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55463: LD_ADDR_VAR 0 13
55467: PUSH
55468: LD_INT 3
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55503: LD_ADDR_VAR 0 14
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55544: LD_ADDR_VAR 0 15
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: NEG
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 3
55573: NEG
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: LIST
55587: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55588: LD_ADDR_VAR 0 16
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 3
55607: NEG
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 3
55619: NEG
55620: PUSH
55621: LD_INT 3
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55634: LD_ADDR_VAR 0 17
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 3
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55678: LD_ADDR_VAR 0 18
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 3
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 3
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55719: LD_ADDR_VAR 0 19
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: LIST
55758: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55759: LD_ADDR_VAR 0 20
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: LD_INT 3
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 3
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55800: LD_ADDR_VAR 0 21
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 3
55818: NEG
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 3
55829: NEG
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: LIST
55843: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55844: LD_ADDR_VAR 0 22
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: LD_INT 3
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 3
55875: NEG
55876: PUSH
55877: LD_INT 3
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55890: LD_ADDR_VAR 0 23
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 4
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: LIST
55933: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55934: LD_ADDR_VAR 0 24
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 4
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55975: LD_ADDR_VAR 0 25
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 4
55992: PUSH
55993: LD_INT 3
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: LD_INT 4
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56015: LD_ADDR_VAR 0 26
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 3
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 4
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: LD_INT 3
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56056: LD_ADDR_VAR 0 27
56060: PUSH
56061: LD_INT 3
56063: NEG
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 4
56085: NEG
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56100: LD_ADDR_VAR 0 28
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: LD_INT 4
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 4
56131: NEG
56132: PUSH
56133: LD_INT 3
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56146: LD_ADDR_VAR 0 29
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 3
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 4
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 4
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: LD_INT 5
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 5
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: LD_INT 4
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 6
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 6
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 5
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56301: LD_ADDR_VAR 0 30
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 3
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 4
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 4
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 4
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 5
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 5
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 5
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 6
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 6
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56444: LD_ADDR_VAR 0 31
56448: PUSH
56449: LD_INT 3
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 4
56481: PUSH
56482: LD_INT 3
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 4
56491: PUSH
56492: LD_INT 4
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: LD_INT 4
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 5
56511: PUSH
56512: LD_INT 4
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 5
56521: PUSH
56522: LD_INT 5
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 4
56531: PUSH
56532: LD_INT 5
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 6
56541: PUSH
56542: LD_INT 5
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 6
56551: PUSH
56552: LD_INT 6
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 5
56561: PUSH
56562: LD_INT 6
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56583: LD_ADDR_VAR 0 32
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 4
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 4
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 3
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: LD_INT 5
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 5
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: LD_INT 4
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 6
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 6
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 5
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56726: LD_ADDR_VAR 0 33
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 3
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 4
56778: NEG
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 4
56789: NEG
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 4
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 5
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 5
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 5
56835: NEG
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 6
56846: NEG
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 6
56857: NEG
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56881: LD_ADDR_VAR 0 34
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: LD_INT 3
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 3
56912: NEG
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: LD_INT 4
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 4
56936: NEG
56937: PUSH
56938: LD_INT 3
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 4
56948: NEG
56949: PUSH
56950: LD_INT 4
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: LD_INT 5
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 5
56972: NEG
56973: PUSH
56974: LD_INT 4
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 5
56984: NEG
56985: PUSH
56986: LD_INT 5
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 5
56996: NEG
56997: PUSH
56998: LD_INT 6
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 6
57008: NEG
57009: PUSH
57010: LD_INT 5
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 6
57020: NEG
57021: PUSH
57022: LD_INT 6
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57044: LD_ADDR_VAR 0 41
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 3
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: LIST
57087: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57088: LD_ADDR_VAR 0 42
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57129: LD_ADDR_VAR 0 43
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 3
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57169: LD_ADDR_VAR 0 44
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: LIST
57209: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57210: LD_ADDR_VAR 0 45
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57254: LD_ADDR_VAR 0 46
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57300: LD_ADDR_VAR 0 47
57304: PUSH
57305: LD_INT 2
57307: NEG
57308: PUSH
57309: LD_INT 3
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 3
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57333: LD_ADDR_VAR 0 48
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57364: LD_ADDR_VAR 0 49
57368: PUSH
57369: LD_INT 3
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 3
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57393: LD_ADDR_VAR 0 50
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: LD_INT 3
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 3
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57422: LD_ADDR_VAR 0 51
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57453: LD_ADDR_VAR 0 52
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57486: LD_ADDR_VAR 0 53
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57530: LD_ADDR_VAR 0 54
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57571: LD_ADDR_VAR 0 55
57575: PUSH
57576: LD_INT 3
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 3
57588: PUSH
57589: LD_INT 3
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: LIST
57610: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57611: LD_ADDR_VAR 0 56
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 3
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57652: LD_ADDR_VAR 0 57
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 3
57681: NEG
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57696: LD_ADDR_VAR 0 58
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 3
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 3
57727: NEG
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: LIST
57741: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57742: LD_ADDR_VAR 0 59
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 2
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: LIST
57785: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57786: LD_ADDR_VAR 0 60
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: LIST
57826: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57827: LD_ADDR_VAR 0 61
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: LIST
57866: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57867: LD_ADDR_VAR 0 62
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57908: LD_ADDR_VAR 0 63
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: LIST
57951: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57952: LD_ADDR_VAR 0 64
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: ST_TO_ADDR
// end ; 2 :
57998: GO 61264
58000: LD_INT 2
58002: DOUBLE
58003: EQUAL
58004: IFTRUE 58008
58006: GO 61263
58008: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58009: LD_ADDR_VAR 0 29
58013: PUSH
58014: LD_INT 4
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 4
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 5
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 5
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 4
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 5
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 4
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 4
58139: PUSH
58140: LD_INT 4
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: LD_INT 4
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 4
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: LD_INT 4
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 4
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 3
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 4
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: LD_INT 5
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: LD_INT 5
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 4
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 3
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: LD_INT 5
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 3
58303: NEG
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 4
58348: NEG
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 4
58359: NEG
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 4
58371: NEG
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 4
58394: NEG
58395: PUSH
58396: LD_INT 4
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 4
58406: NEG
58407: PUSH
58408: LD_INT 5
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 3
58418: NEG
58419: PUSH
58420: LD_INT 4
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 3
58430: NEG
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 4
58442: NEG
58443: PUSH
58444: LD_INT 3
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 5
58454: NEG
58455: PUSH
58456: LD_INT 4
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 5
58466: NEG
58467: PUSH
58468: LD_INT 5
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 3
58478: NEG
58479: PUSH
58480: LD_INT 5
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 5
58490: NEG
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58547: LD_ADDR_VAR 0 30
58551: PUSH
58552: LD_INT 4
58554: PUSH
58555: LD_INT 4
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 5
58574: PUSH
58575: LD_INT 4
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 5
58584: PUSH
58585: LD_INT 5
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 4
58594: PUSH
58595: LD_INT 5
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 4
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 5
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 3
58634: PUSH
58635: LD_INT 5
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 3
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 4
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 3
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 4
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 4
58737: NEG
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 4
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 4
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 5
58793: NEG
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 5
58804: NEG
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 5
58816: NEG
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: NEG
58840: PUSH
58841: LD_INT 3
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: NEG
58852: PUSH
58853: LD_INT 4
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: LD_INT 3
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 4
58899: NEG
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 4
58911: NEG
58912: PUSH
58913: LD_INT 4
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: LD_INT 4
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 4
58935: NEG
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: LD_INT 4
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: LD_INT 5
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 3
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: LD_INT 4
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: LD_INT 5
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: LD_INT 3
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: LD_INT 5
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59094: LD_ADDR_VAR 0 31
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 4
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 3
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 4
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: LD_INT 5
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: LD_INT 5
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: LD_INT 4
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: LD_INT 5
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 4
59250: NEG
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 4
59261: NEG
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 4
59273: NEG
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 4
59296: NEG
59297: PUSH
59298: LD_INT 4
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 4
59308: NEG
59309: PUSH
59310: LD_INT 5
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 3
59320: NEG
59321: PUSH
59322: LD_INT 4
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: NEG
59333: PUSH
59334: LD_INT 3
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 4
59344: NEG
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 5
59356: NEG
59357: PUSH
59358: LD_INT 4
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 5
59368: NEG
59369: PUSH
59370: LD_INT 5
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: LD_INT 5
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 5
59392: NEG
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: LD_INT 3
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 3
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 2
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 4
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: LD_INT 4
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 4
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 4
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 5
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 5
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 4
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 3
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 3
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: LD_INT 2
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 5
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59644: LD_ADDR_VAR 0 32
59648: PUSH
59649: LD_INT 4
59651: NEG
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 4
59662: NEG
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: NEG
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 3
59685: NEG
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 4
59696: NEG
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 5
59707: NEG
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 5
59718: NEG
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 5
59730: NEG
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: NEG
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: LD_INT 3
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: LD_INT 4
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 2
59777: NEG
59778: PUSH
59779: LD_INT 3
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: NEG
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 4
59813: NEG
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 4
59825: NEG
59826: PUSH
59827: LD_INT 4
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: LD_INT 4
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 4
59849: NEG
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: LD_INT 4
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 5
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 3
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 4
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: LD_INT 5
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: LD_INT 5
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 3
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 4
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 4
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 4
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 4
60056: PUSH
60057: LD_INT 4
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 4
60066: PUSH
60067: LD_INT 3
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 5
60076: PUSH
60077: LD_INT 4
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 5
60086: PUSH
60087: LD_INT 5
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 4
60096: PUSH
60097: LD_INT 5
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: LD_INT 4
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 5
60126: PUSH
60127: LD_INT 3
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: LD_INT 5
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60191: LD_ADDR_VAR 0 33
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: LD_INT 4
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 4
60210: NEG
60211: PUSH
60212: LD_INT 5
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: NEG
60223: PUSH
60224: LD_INT 4
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: LD_INT 3
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 4
60246: NEG
60247: PUSH
60248: LD_INT 3
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 5
60258: NEG
60259: PUSH
60260: LD_INT 4
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 5
60270: NEG
60271: PUSH
60272: LD_INT 5
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: NEG
60283: PUSH
60284: LD_INT 5
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 5
60294: NEG
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 4
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 3
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 3
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 4
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: LD_INT 4
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 4
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 4
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 5
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 5
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 4
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 5
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 4
60531: PUSH
60532: LD_INT 4
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: LD_INT 4
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 4
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 3
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: LD_INT 4
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 5
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 5
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 4
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 5
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60729: LD_ADDR_VAR 0 34
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 4
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 5
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 4
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: LD_INT 3
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: LD_INT 3
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: LD_INT 4
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: LD_INT 5
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 2
60815: PUSH
60816: LD_INT 3
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: LD_INT 5
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 3
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 4
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 4
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: LD_INT 2
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 4
60921: PUSH
60922: LD_INT 2
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 4
60931: PUSH
60932: LD_INT 4
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 4
60941: PUSH
60942: LD_INT 3
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 5
60951: PUSH
60952: LD_INT 4
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 5
60961: PUSH
60962: LD_INT 5
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: LD_INT 5
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 3
60981: PUSH
60982: LD_INT 4
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: LD_INT 3
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 5
61001: PUSH
61002: LD_INT 3
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 3
61011: PUSH
61012: LD_INT 5
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 3
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 3
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: LD_INT 4
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 4
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: LD_INT 3
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 4
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 4
61114: NEG
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 4
61125: NEG
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 3
61137: NEG
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: NEG
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 4
61159: NEG
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 5
61170: NEG
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 5
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 5
61193: NEG
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 3
61205: NEG
61206: PUSH
61207: LD_INT 2
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: ST_TO_ADDR
// end ; end ;
61261: GO 61264
61263: POP
// case btype of b_depot , b_warehouse :
61264: LD_VAR 0 1
61268: PUSH
61269: LD_INT 0
61271: DOUBLE
61272: EQUAL
61273: IFTRUE 61283
61275: LD_INT 1
61277: DOUBLE
61278: EQUAL
61279: IFTRUE 61283
61281: GO 61484
61283: POP
// case nation of nation_american :
61284: LD_VAR 0 5
61288: PUSH
61289: LD_INT 1
61291: DOUBLE
61292: EQUAL
61293: IFTRUE 61297
61295: GO 61353
61297: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61298: LD_ADDR_VAR 0 9
61302: PUSH
61303: LD_VAR 0 11
61307: PUSH
61308: LD_VAR 0 12
61312: PUSH
61313: LD_VAR 0 13
61317: PUSH
61318: LD_VAR 0 14
61322: PUSH
61323: LD_VAR 0 15
61327: PUSH
61328: LD_VAR 0 16
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: PUSH
61341: LD_VAR 0 4
61345: PUSH
61346: LD_INT 1
61348: PLUS
61349: ARRAY
61350: ST_TO_ADDR
61351: GO 61482
61353: LD_INT 2
61355: DOUBLE
61356: EQUAL
61357: IFTRUE 61361
61359: GO 61417
61361: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61362: LD_ADDR_VAR 0 9
61366: PUSH
61367: LD_VAR 0 17
61371: PUSH
61372: LD_VAR 0 18
61376: PUSH
61377: LD_VAR 0 19
61381: PUSH
61382: LD_VAR 0 20
61386: PUSH
61387: LD_VAR 0 21
61391: PUSH
61392: LD_VAR 0 22
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: PUSH
61405: LD_VAR 0 4
61409: PUSH
61410: LD_INT 1
61412: PLUS
61413: ARRAY
61414: ST_TO_ADDR
61415: GO 61482
61417: LD_INT 3
61419: DOUBLE
61420: EQUAL
61421: IFTRUE 61425
61423: GO 61481
61425: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61426: LD_ADDR_VAR 0 9
61430: PUSH
61431: LD_VAR 0 23
61435: PUSH
61436: LD_VAR 0 24
61440: PUSH
61441: LD_VAR 0 25
61445: PUSH
61446: LD_VAR 0 26
61450: PUSH
61451: LD_VAR 0 27
61455: PUSH
61456: LD_VAR 0 28
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: PUSH
61469: LD_VAR 0 4
61473: PUSH
61474: LD_INT 1
61476: PLUS
61477: ARRAY
61478: ST_TO_ADDR
61479: GO 61482
61481: POP
61482: GO 62037
61484: LD_INT 2
61486: DOUBLE
61487: EQUAL
61488: IFTRUE 61498
61490: LD_INT 3
61492: DOUBLE
61493: EQUAL
61494: IFTRUE 61498
61496: GO 61554
61498: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61499: LD_ADDR_VAR 0 9
61503: PUSH
61504: LD_VAR 0 29
61508: PUSH
61509: LD_VAR 0 30
61513: PUSH
61514: LD_VAR 0 31
61518: PUSH
61519: LD_VAR 0 32
61523: PUSH
61524: LD_VAR 0 33
61528: PUSH
61529: LD_VAR 0 34
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: PUSH
61542: LD_VAR 0 4
61546: PUSH
61547: LD_INT 1
61549: PLUS
61550: ARRAY
61551: ST_TO_ADDR
61552: GO 62037
61554: LD_INT 16
61556: DOUBLE
61557: EQUAL
61558: IFTRUE 61616
61560: LD_INT 17
61562: DOUBLE
61563: EQUAL
61564: IFTRUE 61616
61566: LD_INT 18
61568: DOUBLE
61569: EQUAL
61570: IFTRUE 61616
61572: LD_INT 19
61574: DOUBLE
61575: EQUAL
61576: IFTRUE 61616
61578: LD_INT 22
61580: DOUBLE
61581: EQUAL
61582: IFTRUE 61616
61584: LD_INT 20
61586: DOUBLE
61587: EQUAL
61588: IFTRUE 61616
61590: LD_INT 21
61592: DOUBLE
61593: EQUAL
61594: IFTRUE 61616
61596: LD_INT 23
61598: DOUBLE
61599: EQUAL
61600: IFTRUE 61616
61602: LD_INT 24
61604: DOUBLE
61605: EQUAL
61606: IFTRUE 61616
61608: LD_INT 25
61610: DOUBLE
61611: EQUAL
61612: IFTRUE 61616
61614: GO 61672
61616: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61617: LD_ADDR_VAR 0 9
61621: PUSH
61622: LD_VAR 0 35
61626: PUSH
61627: LD_VAR 0 36
61631: PUSH
61632: LD_VAR 0 37
61636: PUSH
61637: LD_VAR 0 38
61641: PUSH
61642: LD_VAR 0 39
61646: PUSH
61647: LD_VAR 0 40
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: PUSH
61660: LD_VAR 0 4
61664: PUSH
61665: LD_INT 1
61667: PLUS
61668: ARRAY
61669: ST_TO_ADDR
61670: GO 62037
61672: LD_INT 6
61674: DOUBLE
61675: EQUAL
61676: IFTRUE 61728
61678: LD_INT 7
61680: DOUBLE
61681: EQUAL
61682: IFTRUE 61728
61684: LD_INT 8
61686: DOUBLE
61687: EQUAL
61688: IFTRUE 61728
61690: LD_INT 13
61692: DOUBLE
61693: EQUAL
61694: IFTRUE 61728
61696: LD_INT 12
61698: DOUBLE
61699: EQUAL
61700: IFTRUE 61728
61702: LD_INT 15
61704: DOUBLE
61705: EQUAL
61706: IFTRUE 61728
61708: LD_INT 11
61710: DOUBLE
61711: EQUAL
61712: IFTRUE 61728
61714: LD_INT 14
61716: DOUBLE
61717: EQUAL
61718: IFTRUE 61728
61720: LD_INT 10
61722: DOUBLE
61723: EQUAL
61724: IFTRUE 61728
61726: GO 61784
61728: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61729: LD_ADDR_VAR 0 9
61733: PUSH
61734: LD_VAR 0 41
61738: PUSH
61739: LD_VAR 0 42
61743: PUSH
61744: LD_VAR 0 43
61748: PUSH
61749: LD_VAR 0 44
61753: PUSH
61754: LD_VAR 0 45
61758: PUSH
61759: LD_VAR 0 46
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: PUSH
61772: LD_VAR 0 4
61776: PUSH
61777: LD_INT 1
61779: PLUS
61780: ARRAY
61781: ST_TO_ADDR
61782: GO 62037
61784: LD_INT 36
61786: DOUBLE
61787: EQUAL
61788: IFTRUE 61792
61790: GO 61848
61792: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61793: LD_ADDR_VAR 0 9
61797: PUSH
61798: LD_VAR 0 47
61802: PUSH
61803: LD_VAR 0 48
61807: PUSH
61808: LD_VAR 0 49
61812: PUSH
61813: LD_VAR 0 50
61817: PUSH
61818: LD_VAR 0 51
61822: PUSH
61823: LD_VAR 0 52
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: PUSH
61836: LD_VAR 0 4
61840: PUSH
61841: LD_INT 1
61843: PLUS
61844: ARRAY
61845: ST_TO_ADDR
61846: GO 62037
61848: LD_INT 4
61850: DOUBLE
61851: EQUAL
61852: IFTRUE 61874
61854: LD_INT 5
61856: DOUBLE
61857: EQUAL
61858: IFTRUE 61874
61860: LD_INT 34
61862: DOUBLE
61863: EQUAL
61864: IFTRUE 61874
61866: LD_INT 37
61868: DOUBLE
61869: EQUAL
61870: IFTRUE 61874
61872: GO 61930
61874: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61875: LD_ADDR_VAR 0 9
61879: PUSH
61880: LD_VAR 0 53
61884: PUSH
61885: LD_VAR 0 54
61889: PUSH
61890: LD_VAR 0 55
61894: PUSH
61895: LD_VAR 0 56
61899: PUSH
61900: LD_VAR 0 57
61904: PUSH
61905: LD_VAR 0 58
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: PUSH
61918: LD_VAR 0 4
61922: PUSH
61923: LD_INT 1
61925: PLUS
61926: ARRAY
61927: ST_TO_ADDR
61928: GO 62037
61930: LD_INT 31
61932: DOUBLE
61933: EQUAL
61934: IFTRUE 61980
61936: LD_INT 32
61938: DOUBLE
61939: EQUAL
61940: IFTRUE 61980
61942: LD_INT 33
61944: DOUBLE
61945: EQUAL
61946: IFTRUE 61980
61948: LD_INT 27
61950: DOUBLE
61951: EQUAL
61952: IFTRUE 61980
61954: LD_INT 26
61956: DOUBLE
61957: EQUAL
61958: IFTRUE 61980
61960: LD_INT 28
61962: DOUBLE
61963: EQUAL
61964: IFTRUE 61980
61966: LD_INT 29
61968: DOUBLE
61969: EQUAL
61970: IFTRUE 61980
61972: LD_INT 30
61974: DOUBLE
61975: EQUAL
61976: IFTRUE 61980
61978: GO 62036
61980: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61981: LD_ADDR_VAR 0 9
61985: PUSH
61986: LD_VAR 0 59
61990: PUSH
61991: LD_VAR 0 60
61995: PUSH
61996: LD_VAR 0 61
62000: PUSH
62001: LD_VAR 0 62
62005: PUSH
62006: LD_VAR 0 63
62010: PUSH
62011: LD_VAR 0 64
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: PUSH
62024: LD_VAR 0 4
62028: PUSH
62029: LD_INT 1
62031: PLUS
62032: ARRAY
62033: ST_TO_ADDR
62034: GO 62037
62036: POP
// temp_list2 = [ ] ;
62037: LD_ADDR_VAR 0 10
62041: PUSH
62042: EMPTY
62043: ST_TO_ADDR
// for i in temp_list do
62044: LD_ADDR_VAR 0 8
62048: PUSH
62049: LD_VAR 0 9
62053: PUSH
62054: FOR_IN
62055: IFFALSE 62107
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62057: LD_ADDR_VAR 0 10
62061: PUSH
62062: LD_VAR 0 10
62066: PUSH
62067: LD_VAR 0 8
62071: PUSH
62072: LD_INT 1
62074: ARRAY
62075: PUSH
62076: LD_VAR 0 2
62080: PLUS
62081: PUSH
62082: LD_VAR 0 8
62086: PUSH
62087: LD_INT 2
62089: ARRAY
62090: PUSH
62091: LD_VAR 0 3
62095: PLUS
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: EMPTY
62102: LIST
62103: ADD
62104: ST_TO_ADDR
62105: GO 62054
62107: POP
62108: POP
// result = temp_list2 ;
62109: LD_ADDR_VAR 0 7
62113: PUSH
62114: LD_VAR 0 10
62118: ST_TO_ADDR
// end ;
62119: LD_VAR 0 7
62123: RET
// export function EnemyInRange ( unit , dist ) ; begin
62124: LD_INT 0
62126: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62127: LD_ADDR_VAR 0 3
62131: PUSH
62132: LD_VAR 0 1
62136: PPUSH
62137: CALL_OW 255
62141: PPUSH
62142: LD_VAR 0 1
62146: PPUSH
62147: CALL_OW 250
62151: PPUSH
62152: LD_VAR 0 1
62156: PPUSH
62157: CALL_OW 251
62161: PPUSH
62162: LD_VAR 0 2
62166: PPUSH
62167: CALL 35497 0 4
62171: PUSH
62172: LD_INT 4
62174: ARRAY
62175: ST_TO_ADDR
// end ;
62176: LD_VAR 0 3
62180: RET
// export function PlayerSeeMe ( unit ) ; begin
62181: LD_INT 0
62183: PPUSH
// result := See ( your_side , unit ) ;
62184: LD_ADDR_VAR 0 2
62188: PUSH
62189: LD_OWVAR 2
62193: PPUSH
62194: LD_VAR 0 1
62198: PPUSH
62199: CALL_OW 292
62203: ST_TO_ADDR
// end ;
62204: LD_VAR 0 2
62208: RET
// export function ReverseDir ( unit ) ; begin
62209: LD_INT 0
62211: PPUSH
// if not unit then
62212: LD_VAR 0 1
62216: NOT
62217: IFFALSE 62221
// exit ;
62219: GO 62244
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62221: LD_ADDR_VAR 0 2
62225: PUSH
62226: LD_VAR 0 1
62230: PPUSH
62231: CALL_OW 254
62235: PUSH
62236: LD_INT 3
62238: PLUS
62239: PUSH
62240: LD_INT 6
62242: MOD
62243: ST_TO_ADDR
// end ;
62244: LD_VAR 0 2
62248: RET
// export function ReverseArray ( array ) ; var i ; begin
62249: LD_INT 0
62251: PPUSH
62252: PPUSH
// if not array then
62253: LD_VAR 0 1
62257: NOT
62258: IFFALSE 62262
// exit ;
62260: GO 62317
// result := [ ] ;
62262: LD_ADDR_VAR 0 2
62266: PUSH
62267: EMPTY
62268: ST_TO_ADDR
// for i := array downto 1 do
62269: LD_ADDR_VAR 0 3
62273: PUSH
62274: DOUBLE
62275: LD_VAR 0 1
62279: INC
62280: ST_TO_ADDR
62281: LD_INT 1
62283: PUSH
62284: FOR_DOWNTO
62285: IFFALSE 62315
// result := Join ( result , array [ i ] ) ;
62287: LD_ADDR_VAR 0 2
62291: PUSH
62292: LD_VAR 0 2
62296: PPUSH
62297: LD_VAR 0 1
62301: PUSH
62302: LD_VAR 0 3
62306: ARRAY
62307: PPUSH
62308: CALL 66973 0 2
62312: ST_TO_ADDR
62313: GO 62284
62315: POP
62316: POP
// end ;
62317: LD_VAR 0 2
62321: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62322: LD_INT 0
62324: PPUSH
62325: PPUSH
62326: PPUSH
62327: PPUSH
62328: PPUSH
62329: PPUSH
// if not unit or not hexes then
62330: LD_VAR 0 1
62334: NOT
62335: PUSH
62336: LD_VAR 0 2
62340: NOT
62341: OR
62342: IFFALSE 62346
// exit ;
62344: GO 62469
// dist := 9999 ;
62346: LD_ADDR_VAR 0 5
62350: PUSH
62351: LD_INT 9999
62353: ST_TO_ADDR
// for i = 1 to hexes do
62354: LD_ADDR_VAR 0 4
62358: PUSH
62359: DOUBLE
62360: LD_INT 1
62362: DEC
62363: ST_TO_ADDR
62364: LD_VAR 0 2
62368: PUSH
62369: FOR_TO
62370: IFFALSE 62457
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62372: LD_ADDR_VAR 0 6
62376: PUSH
62377: LD_VAR 0 1
62381: PPUSH
62382: LD_VAR 0 2
62386: PUSH
62387: LD_VAR 0 4
62391: ARRAY
62392: PUSH
62393: LD_INT 1
62395: ARRAY
62396: PPUSH
62397: LD_VAR 0 2
62401: PUSH
62402: LD_VAR 0 4
62406: ARRAY
62407: PUSH
62408: LD_INT 2
62410: ARRAY
62411: PPUSH
62412: CALL_OW 297
62416: ST_TO_ADDR
// if tdist < dist then
62417: LD_VAR 0 6
62421: PUSH
62422: LD_VAR 0 5
62426: LESS
62427: IFFALSE 62455
// begin hex := hexes [ i ] ;
62429: LD_ADDR_VAR 0 8
62433: PUSH
62434: LD_VAR 0 2
62438: PUSH
62439: LD_VAR 0 4
62443: ARRAY
62444: ST_TO_ADDR
// dist := tdist ;
62445: LD_ADDR_VAR 0 5
62449: PUSH
62450: LD_VAR 0 6
62454: ST_TO_ADDR
// end ; end ;
62455: GO 62369
62457: POP
62458: POP
// result := hex ;
62459: LD_ADDR_VAR 0 3
62463: PUSH
62464: LD_VAR 0 8
62468: ST_TO_ADDR
// end ;
62469: LD_VAR 0 3
62473: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62474: LD_INT 0
62476: PPUSH
62477: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62478: LD_VAR 0 1
62482: NOT
62483: PUSH
62484: LD_VAR 0 1
62488: PUSH
62489: LD_INT 21
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 23
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PPUSH
62513: CALL_OW 69
62517: IN
62518: NOT
62519: OR
62520: IFFALSE 62524
// exit ;
62522: GO 62571
// for i = 1 to 3 do
62524: LD_ADDR_VAR 0 3
62528: PUSH
62529: DOUBLE
62530: LD_INT 1
62532: DEC
62533: ST_TO_ADDR
62534: LD_INT 3
62536: PUSH
62537: FOR_TO
62538: IFFALSE 62569
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62540: LD_VAR 0 1
62544: PPUSH
62545: CALL_OW 250
62549: PPUSH
62550: LD_VAR 0 1
62554: PPUSH
62555: CALL_OW 251
62559: PPUSH
62560: LD_INT 1
62562: PPUSH
62563: CALL_OW 453
62567: GO 62537
62569: POP
62570: POP
// end ;
62571: LD_VAR 0 2
62575: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62576: LD_INT 0
62578: PPUSH
62579: PPUSH
62580: PPUSH
62581: PPUSH
62582: PPUSH
62583: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62584: LD_VAR 0 1
62588: NOT
62589: PUSH
62590: LD_VAR 0 2
62594: NOT
62595: OR
62596: PUSH
62597: LD_VAR 0 1
62601: PPUSH
62602: CALL_OW 314
62606: OR
62607: IFFALSE 62611
// exit ;
62609: GO 63078
// if GetLives ( i ) < 250 then
62611: LD_VAR 0 4
62615: PPUSH
62616: CALL_OW 256
62620: PUSH
62621: LD_INT 250
62623: LESS
62624: IFFALSE 62637
// begin ComAutodestruct ( i ) ;
62626: LD_VAR 0 4
62630: PPUSH
62631: CALL 62474 0 1
// exit ;
62635: GO 63078
// end ; x := GetX ( enemy_unit ) ;
62637: LD_ADDR_VAR 0 7
62641: PUSH
62642: LD_VAR 0 2
62646: PPUSH
62647: CALL_OW 250
62651: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62652: LD_ADDR_VAR 0 8
62656: PUSH
62657: LD_VAR 0 2
62661: PPUSH
62662: CALL_OW 251
62666: ST_TO_ADDR
// if not x or not y then
62667: LD_VAR 0 7
62671: NOT
62672: PUSH
62673: LD_VAR 0 8
62677: NOT
62678: OR
62679: IFFALSE 62683
// exit ;
62681: GO 63078
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62683: LD_ADDR_VAR 0 6
62687: PUSH
62688: LD_VAR 0 7
62692: PPUSH
62693: LD_INT 0
62695: PPUSH
62696: LD_INT 4
62698: PPUSH
62699: CALL_OW 272
62703: PUSH
62704: LD_VAR 0 8
62708: PPUSH
62709: LD_INT 0
62711: PPUSH
62712: LD_INT 4
62714: PPUSH
62715: CALL_OW 273
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_VAR 0 7
62728: PPUSH
62729: LD_INT 1
62731: PPUSH
62732: LD_INT 4
62734: PPUSH
62735: CALL_OW 272
62739: PUSH
62740: LD_VAR 0 8
62744: PPUSH
62745: LD_INT 1
62747: PPUSH
62748: LD_INT 4
62750: PPUSH
62751: CALL_OW 273
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_VAR 0 7
62764: PPUSH
62765: LD_INT 2
62767: PPUSH
62768: LD_INT 4
62770: PPUSH
62771: CALL_OW 272
62775: PUSH
62776: LD_VAR 0 8
62780: PPUSH
62781: LD_INT 2
62783: PPUSH
62784: LD_INT 4
62786: PPUSH
62787: CALL_OW 273
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_VAR 0 7
62800: PPUSH
62801: LD_INT 3
62803: PPUSH
62804: LD_INT 4
62806: PPUSH
62807: CALL_OW 272
62811: PUSH
62812: LD_VAR 0 8
62816: PPUSH
62817: LD_INT 3
62819: PPUSH
62820: LD_INT 4
62822: PPUSH
62823: CALL_OW 273
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_VAR 0 7
62836: PPUSH
62837: LD_INT 4
62839: PPUSH
62840: LD_INT 4
62842: PPUSH
62843: CALL_OW 272
62847: PUSH
62848: LD_VAR 0 8
62852: PPUSH
62853: LD_INT 4
62855: PPUSH
62856: LD_INT 4
62858: PPUSH
62859: CALL_OW 273
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_VAR 0 7
62872: PPUSH
62873: LD_INT 5
62875: PPUSH
62876: LD_INT 4
62878: PPUSH
62879: CALL_OW 272
62883: PUSH
62884: LD_VAR 0 8
62888: PPUSH
62889: LD_INT 5
62891: PPUSH
62892: LD_INT 4
62894: PPUSH
62895: CALL_OW 273
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: ST_TO_ADDR
// for i = tmp downto 1 do
62912: LD_ADDR_VAR 0 4
62916: PUSH
62917: DOUBLE
62918: LD_VAR 0 6
62922: INC
62923: ST_TO_ADDR
62924: LD_INT 1
62926: PUSH
62927: FOR_DOWNTO
62928: IFFALSE 63029
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62930: LD_VAR 0 6
62934: PUSH
62935: LD_VAR 0 4
62939: ARRAY
62940: PUSH
62941: LD_INT 1
62943: ARRAY
62944: PPUSH
62945: LD_VAR 0 6
62949: PUSH
62950: LD_VAR 0 4
62954: ARRAY
62955: PUSH
62956: LD_INT 2
62958: ARRAY
62959: PPUSH
62960: CALL_OW 488
62964: NOT
62965: PUSH
62966: LD_VAR 0 6
62970: PUSH
62971: LD_VAR 0 4
62975: ARRAY
62976: PUSH
62977: LD_INT 1
62979: ARRAY
62980: PPUSH
62981: LD_VAR 0 6
62985: PUSH
62986: LD_VAR 0 4
62990: ARRAY
62991: PUSH
62992: LD_INT 2
62994: ARRAY
62995: PPUSH
62996: CALL_OW 428
63000: PUSH
63001: LD_INT 0
63003: NONEQUAL
63004: OR
63005: IFFALSE 63027
// tmp := Delete ( tmp , i ) ;
63007: LD_ADDR_VAR 0 6
63011: PUSH
63012: LD_VAR 0 6
63016: PPUSH
63017: LD_VAR 0 4
63021: PPUSH
63022: CALL_OW 3
63026: ST_TO_ADDR
63027: GO 62927
63029: POP
63030: POP
// j := GetClosestHex ( unit , tmp ) ;
63031: LD_ADDR_VAR 0 5
63035: PUSH
63036: LD_VAR 0 1
63040: PPUSH
63041: LD_VAR 0 6
63045: PPUSH
63046: CALL 62322 0 2
63050: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63051: LD_VAR 0 1
63055: PPUSH
63056: LD_VAR 0 5
63060: PUSH
63061: LD_INT 1
63063: ARRAY
63064: PPUSH
63065: LD_VAR 0 5
63069: PUSH
63070: LD_INT 2
63072: ARRAY
63073: PPUSH
63074: CALL_OW 111
// end ;
63078: LD_VAR 0 3
63082: RET
// export function PrepareApemanSoldier ( ) ; begin
63083: LD_INT 0
63085: PPUSH
// uc_nation := 0 ;
63086: LD_ADDR_OWVAR 21
63090: PUSH
63091: LD_INT 0
63093: ST_TO_ADDR
// hc_sex := sex_male ;
63094: LD_ADDR_OWVAR 27
63098: PUSH
63099: LD_INT 1
63101: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63102: LD_ADDR_OWVAR 28
63106: PUSH
63107: LD_INT 15
63109: ST_TO_ADDR
// hc_gallery :=  ;
63110: LD_ADDR_OWVAR 33
63114: PUSH
63115: LD_STRING 
63117: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63118: LD_ADDR_OWVAR 31
63122: PUSH
63123: LD_INT 0
63125: PPUSH
63126: LD_INT 3
63128: PPUSH
63129: CALL_OW 12
63133: PUSH
63134: LD_INT 0
63136: PPUSH
63137: LD_INT 3
63139: PPUSH
63140: CALL_OW 12
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: ST_TO_ADDR
// end ;
63157: LD_VAR 0 1
63161: RET
// export function PrepareApemanEngineer ( ) ; begin
63162: LD_INT 0
63164: PPUSH
// uc_nation := 0 ;
63165: LD_ADDR_OWVAR 21
63169: PUSH
63170: LD_INT 0
63172: ST_TO_ADDR
// hc_sex := sex_male ;
63173: LD_ADDR_OWVAR 27
63177: PUSH
63178: LD_INT 1
63180: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63181: LD_ADDR_OWVAR 28
63185: PUSH
63186: LD_INT 16
63188: ST_TO_ADDR
// hc_gallery :=  ;
63189: LD_ADDR_OWVAR 33
63193: PUSH
63194: LD_STRING 
63196: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63197: LD_ADDR_OWVAR 31
63201: PUSH
63202: LD_INT 0
63204: PPUSH
63205: LD_INT 3
63207: PPUSH
63208: CALL_OW 12
63212: PUSH
63213: LD_INT 0
63215: PPUSH
63216: LD_INT 3
63218: PPUSH
63219: CALL_OW 12
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: ST_TO_ADDR
// end ;
63236: LD_VAR 0 1
63240: RET
// export function PrepareApeman ( agressivity ) ; begin
63241: LD_INT 0
63243: PPUSH
// uc_side := 0 ;
63244: LD_ADDR_OWVAR 20
63248: PUSH
63249: LD_INT 0
63251: ST_TO_ADDR
// uc_nation := 0 ;
63252: LD_ADDR_OWVAR 21
63256: PUSH
63257: LD_INT 0
63259: ST_TO_ADDR
// hc_sex := sex_male ;
63260: LD_ADDR_OWVAR 27
63264: PUSH
63265: LD_INT 1
63267: ST_TO_ADDR
// hc_class := class_apeman ;
63268: LD_ADDR_OWVAR 28
63272: PUSH
63273: LD_INT 12
63275: ST_TO_ADDR
// hc_gallery :=  ;
63276: LD_ADDR_OWVAR 33
63280: PUSH
63281: LD_STRING 
63283: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63284: LD_ADDR_OWVAR 35
63288: PUSH
63289: LD_VAR 0 1
63293: NEG
63294: PPUSH
63295: LD_VAR 0 1
63299: PPUSH
63300: CALL_OW 12
63304: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63305: LD_ADDR_OWVAR 31
63309: PUSH
63310: LD_INT 0
63312: PPUSH
63313: LD_INT 3
63315: PPUSH
63316: CALL_OW 12
63320: PUSH
63321: LD_INT 0
63323: PPUSH
63324: LD_INT 3
63326: PPUSH
63327: CALL_OW 12
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: ST_TO_ADDR
// end ;
63344: LD_VAR 0 2
63348: RET
// export function PrepareTiger ( agressivity ) ; begin
63349: LD_INT 0
63351: PPUSH
// uc_side := 0 ;
63352: LD_ADDR_OWVAR 20
63356: PUSH
63357: LD_INT 0
63359: ST_TO_ADDR
// uc_nation := 0 ;
63360: LD_ADDR_OWVAR 21
63364: PUSH
63365: LD_INT 0
63367: ST_TO_ADDR
// hc_class := class_tiger ;
63368: LD_ADDR_OWVAR 28
63372: PUSH
63373: LD_INT 14
63375: ST_TO_ADDR
// hc_gallery :=  ;
63376: LD_ADDR_OWVAR 33
63380: PUSH
63381: LD_STRING 
63383: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63384: LD_ADDR_OWVAR 35
63388: PUSH
63389: LD_VAR 0 1
63393: NEG
63394: PPUSH
63395: LD_VAR 0 1
63399: PPUSH
63400: CALL_OW 12
63404: ST_TO_ADDR
// end ;
63405: LD_VAR 0 2
63409: RET
// export function PrepareEnchidna ( ) ; begin
63410: LD_INT 0
63412: PPUSH
// uc_side := 0 ;
63413: LD_ADDR_OWVAR 20
63417: PUSH
63418: LD_INT 0
63420: ST_TO_ADDR
// uc_nation := 0 ;
63421: LD_ADDR_OWVAR 21
63425: PUSH
63426: LD_INT 0
63428: ST_TO_ADDR
// hc_class := class_baggie ;
63429: LD_ADDR_OWVAR 28
63433: PUSH
63434: LD_INT 13
63436: ST_TO_ADDR
// hc_gallery :=  ;
63437: LD_ADDR_OWVAR 33
63441: PUSH
63442: LD_STRING 
63444: ST_TO_ADDR
// end ;
63445: LD_VAR 0 1
63449: RET
// export function PrepareFrog ( ) ; begin
63450: LD_INT 0
63452: PPUSH
// uc_side := 0 ;
63453: LD_ADDR_OWVAR 20
63457: PUSH
63458: LD_INT 0
63460: ST_TO_ADDR
// uc_nation := 0 ;
63461: LD_ADDR_OWVAR 21
63465: PUSH
63466: LD_INT 0
63468: ST_TO_ADDR
// hc_class := class_frog ;
63469: LD_ADDR_OWVAR 28
63473: PUSH
63474: LD_INT 19
63476: ST_TO_ADDR
// hc_gallery :=  ;
63477: LD_ADDR_OWVAR 33
63481: PUSH
63482: LD_STRING 
63484: ST_TO_ADDR
// end ;
63485: LD_VAR 0 1
63489: RET
// export function PrepareFish ( ) ; begin
63490: LD_INT 0
63492: PPUSH
// uc_side := 0 ;
63493: LD_ADDR_OWVAR 20
63497: PUSH
63498: LD_INT 0
63500: ST_TO_ADDR
// uc_nation := 0 ;
63501: LD_ADDR_OWVAR 21
63505: PUSH
63506: LD_INT 0
63508: ST_TO_ADDR
// hc_class := class_fish ;
63509: LD_ADDR_OWVAR 28
63513: PUSH
63514: LD_INT 20
63516: ST_TO_ADDR
// hc_gallery :=  ;
63517: LD_ADDR_OWVAR 33
63521: PUSH
63522: LD_STRING 
63524: ST_TO_ADDR
// end ;
63525: LD_VAR 0 1
63529: RET
// export function PrepareBird ( ) ; begin
63530: LD_INT 0
63532: PPUSH
// uc_side := 0 ;
63533: LD_ADDR_OWVAR 20
63537: PUSH
63538: LD_INT 0
63540: ST_TO_ADDR
// uc_nation := 0 ;
63541: LD_ADDR_OWVAR 21
63545: PUSH
63546: LD_INT 0
63548: ST_TO_ADDR
// hc_class := class_phororhacos ;
63549: LD_ADDR_OWVAR 28
63553: PUSH
63554: LD_INT 18
63556: ST_TO_ADDR
// hc_gallery :=  ;
63557: LD_ADDR_OWVAR 33
63561: PUSH
63562: LD_STRING 
63564: ST_TO_ADDR
// end ;
63565: LD_VAR 0 1
63569: RET
// export function PrepareHorse ( ) ; begin
63570: LD_INT 0
63572: PPUSH
// uc_side := 0 ;
63573: LD_ADDR_OWVAR 20
63577: PUSH
63578: LD_INT 0
63580: ST_TO_ADDR
// uc_nation := 0 ;
63581: LD_ADDR_OWVAR 21
63585: PUSH
63586: LD_INT 0
63588: ST_TO_ADDR
// hc_class := class_horse ;
63589: LD_ADDR_OWVAR 28
63593: PUSH
63594: LD_INT 21
63596: ST_TO_ADDR
// hc_gallery :=  ;
63597: LD_ADDR_OWVAR 33
63601: PUSH
63602: LD_STRING 
63604: ST_TO_ADDR
// end ;
63605: LD_VAR 0 1
63609: RET
// export function PrepareMastodont ( ) ; begin
63610: LD_INT 0
63612: PPUSH
// uc_side := 0 ;
63613: LD_ADDR_OWVAR 20
63617: PUSH
63618: LD_INT 0
63620: ST_TO_ADDR
// uc_nation := 0 ;
63621: LD_ADDR_OWVAR 21
63625: PUSH
63626: LD_INT 0
63628: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63629: LD_ADDR_OWVAR 37
63633: PUSH
63634: LD_INT 31
63636: ST_TO_ADDR
// vc_control := control_rider ;
63637: LD_ADDR_OWVAR 38
63641: PUSH
63642: LD_INT 4
63644: ST_TO_ADDR
// end ;
63645: LD_VAR 0 1
63649: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63650: LD_INT 0
63652: PPUSH
63653: PPUSH
63654: PPUSH
// uc_side = 0 ;
63655: LD_ADDR_OWVAR 20
63659: PUSH
63660: LD_INT 0
63662: ST_TO_ADDR
// uc_nation = 0 ;
63663: LD_ADDR_OWVAR 21
63667: PUSH
63668: LD_INT 0
63670: ST_TO_ADDR
// InitHc_All ( ) ;
63671: CALL_OW 584
// InitVc ;
63675: CALL_OW 20
// if mastodonts then
63679: LD_VAR 0 6
63683: IFFALSE 63750
// for i = 1 to mastodonts do
63685: LD_ADDR_VAR 0 11
63689: PUSH
63690: DOUBLE
63691: LD_INT 1
63693: DEC
63694: ST_TO_ADDR
63695: LD_VAR 0 6
63699: PUSH
63700: FOR_TO
63701: IFFALSE 63748
// begin vc_chassis := 31 ;
63703: LD_ADDR_OWVAR 37
63707: PUSH
63708: LD_INT 31
63710: ST_TO_ADDR
// vc_control := control_rider ;
63711: LD_ADDR_OWVAR 38
63715: PUSH
63716: LD_INT 4
63718: ST_TO_ADDR
// animal := CreateVehicle ;
63719: LD_ADDR_VAR 0 12
63723: PUSH
63724: CALL_OW 45
63728: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63729: LD_VAR 0 12
63733: PPUSH
63734: LD_VAR 0 8
63738: PPUSH
63739: LD_INT 0
63741: PPUSH
63742: CALL 65878 0 3
// end ;
63746: GO 63700
63748: POP
63749: POP
// if horses then
63750: LD_VAR 0 5
63754: IFFALSE 63821
// for i = 1 to horses do
63756: LD_ADDR_VAR 0 11
63760: PUSH
63761: DOUBLE
63762: LD_INT 1
63764: DEC
63765: ST_TO_ADDR
63766: LD_VAR 0 5
63770: PUSH
63771: FOR_TO
63772: IFFALSE 63819
// begin hc_class := 21 ;
63774: LD_ADDR_OWVAR 28
63778: PUSH
63779: LD_INT 21
63781: ST_TO_ADDR
// hc_gallery :=  ;
63782: LD_ADDR_OWVAR 33
63786: PUSH
63787: LD_STRING 
63789: ST_TO_ADDR
// animal := CreateHuman ;
63790: LD_ADDR_VAR 0 12
63794: PUSH
63795: CALL_OW 44
63799: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63800: LD_VAR 0 12
63804: PPUSH
63805: LD_VAR 0 8
63809: PPUSH
63810: LD_INT 0
63812: PPUSH
63813: CALL 65878 0 3
// end ;
63817: GO 63771
63819: POP
63820: POP
// if birds then
63821: LD_VAR 0 1
63825: IFFALSE 63892
// for i = 1 to birds do
63827: LD_ADDR_VAR 0 11
63831: PUSH
63832: DOUBLE
63833: LD_INT 1
63835: DEC
63836: ST_TO_ADDR
63837: LD_VAR 0 1
63841: PUSH
63842: FOR_TO
63843: IFFALSE 63890
// begin hc_class := 18 ;
63845: LD_ADDR_OWVAR 28
63849: PUSH
63850: LD_INT 18
63852: ST_TO_ADDR
// hc_gallery =  ;
63853: LD_ADDR_OWVAR 33
63857: PUSH
63858: LD_STRING 
63860: ST_TO_ADDR
// animal := CreateHuman ;
63861: LD_ADDR_VAR 0 12
63865: PUSH
63866: CALL_OW 44
63870: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63871: LD_VAR 0 12
63875: PPUSH
63876: LD_VAR 0 8
63880: PPUSH
63881: LD_INT 0
63883: PPUSH
63884: CALL 65878 0 3
// end ;
63888: GO 63842
63890: POP
63891: POP
// if tigers then
63892: LD_VAR 0 2
63896: IFFALSE 63980
// for i = 1 to tigers do
63898: LD_ADDR_VAR 0 11
63902: PUSH
63903: DOUBLE
63904: LD_INT 1
63906: DEC
63907: ST_TO_ADDR
63908: LD_VAR 0 2
63912: PUSH
63913: FOR_TO
63914: IFFALSE 63978
// begin hc_class = class_tiger ;
63916: LD_ADDR_OWVAR 28
63920: PUSH
63921: LD_INT 14
63923: ST_TO_ADDR
// hc_gallery =  ;
63924: LD_ADDR_OWVAR 33
63928: PUSH
63929: LD_STRING 
63931: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63932: LD_ADDR_OWVAR 35
63936: PUSH
63937: LD_INT 7
63939: NEG
63940: PPUSH
63941: LD_INT 7
63943: PPUSH
63944: CALL_OW 12
63948: ST_TO_ADDR
// animal := CreateHuman ;
63949: LD_ADDR_VAR 0 12
63953: PUSH
63954: CALL_OW 44
63958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63959: LD_VAR 0 12
63963: PPUSH
63964: LD_VAR 0 8
63968: PPUSH
63969: LD_INT 0
63971: PPUSH
63972: CALL 65878 0 3
// end ;
63976: GO 63913
63978: POP
63979: POP
// if apemans then
63980: LD_VAR 0 3
63984: IFFALSE 64107
// for i = 1 to apemans do
63986: LD_ADDR_VAR 0 11
63990: PUSH
63991: DOUBLE
63992: LD_INT 1
63994: DEC
63995: ST_TO_ADDR
63996: LD_VAR 0 3
64000: PUSH
64001: FOR_TO
64002: IFFALSE 64105
// begin hc_class = class_apeman ;
64004: LD_ADDR_OWVAR 28
64008: PUSH
64009: LD_INT 12
64011: ST_TO_ADDR
// hc_gallery =  ;
64012: LD_ADDR_OWVAR 33
64016: PUSH
64017: LD_STRING 
64019: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64020: LD_ADDR_OWVAR 35
64024: PUSH
64025: LD_INT 2
64027: NEG
64028: PPUSH
64029: LD_INT 2
64031: PPUSH
64032: CALL_OW 12
64036: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64037: LD_ADDR_OWVAR 31
64041: PUSH
64042: LD_INT 1
64044: PPUSH
64045: LD_INT 3
64047: PPUSH
64048: CALL_OW 12
64052: PUSH
64053: LD_INT 1
64055: PPUSH
64056: LD_INT 3
64058: PPUSH
64059: CALL_OW 12
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: ST_TO_ADDR
// animal := CreateHuman ;
64076: LD_ADDR_VAR 0 12
64080: PUSH
64081: CALL_OW 44
64085: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64086: LD_VAR 0 12
64090: PPUSH
64091: LD_VAR 0 8
64095: PPUSH
64096: LD_INT 0
64098: PPUSH
64099: CALL 65878 0 3
// end ;
64103: GO 64001
64105: POP
64106: POP
// if enchidnas then
64107: LD_VAR 0 4
64111: IFFALSE 64178
// for i = 1 to enchidnas do
64113: LD_ADDR_VAR 0 11
64117: PUSH
64118: DOUBLE
64119: LD_INT 1
64121: DEC
64122: ST_TO_ADDR
64123: LD_VAR 0 4
64127: PUSH
64128: FOR_TO
64129: IFFALSE 64176
// begin hc_class = 13 ;
64131: LD_ADDR_OWVAR 28
64135: PUSH
64136: LD_INT 13
64138: ST_TO_ADDR
// hc_gallery =  ;
64139: LD_ADDR_OWVAR 33
64143: PUSH
64144: LD_STRING 
64146: ST_TO_ADDR
// animal := CreateHuman ;
64147: LD_ADDR_VAR 0 12
64151: PUSH
64152: CALL_OW 44
64156: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64157: LD_VAR 0 12
64161: PPUSH
64162: LD_VAR 0 8
64166: PPUSH
64167: LD_INT 0
64169: PPUSH
64170: CALL 65878 0 3
// end ;
64174: GO 64128
64176: POP
64177: POP
// if fishes then
64178: LD_VAR 0 7
64182: IFFALSE 64249
// for i = 1 to fishes do
64184: LD_ADDR_VAR 0 11
64188: PUSH
64189: DOUBLE
64190: LD_INT 1
64192: DEC
64193: ST_TO_ADDR
64194: LD_VAR 0 7
64198: PUSH
64199: FOR_TO
64200: IFFALSE 64247
// begin hc_class = 20 ;
64202: LD_ADDR_OWVAR 28
64206: PUSH
64207: LD_INT 20
64209: ST_TO_ADDR
// hc_gallery =  ;
64210: LD_ADDR_OWVAR 33
64214: PUSH
64215: LD_STRING 
64217: ST_TO_ADDR
// animal := CreateHuman ;
64218: LD_ADDR_VAR 0 12
64222: PUSH
64223: CALL_OW 44
64227: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64228: LD_VAR 0 12
64232: PPUSH
64233: LD_VAR 0 9
64237: PPUSH
64238: LD_INT 0
64240: PPUSH
64241: CALL 65878 0 3
// end ;
64245: GO 64199
64247: POP
64248: POP
// end ;
64249: LD_VAR 0 10
64253: RET
// export function WantHeal ( sci , unit ) ; begin
64254: LD_INT 0
64256: PPUSH
// if GetTaskList ( sci ) > 0 then
64257: LD_VAR 0 1
64261: PPUSH
64262: CALL_OW 437
64266: PUSH
64267: LD_INT 0
64269: GREATER
64270: IFFALSE 64340
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64272: LD_VAR 0 1
64276: PPUSH
64277: CALL_OW 437
64281: PUSH
64282: LD_INT 1
64284: ARRAY
64285: PUSH
64286: LD_INT 1
64288: ARRAY
64289: PUSH
64290: LD_STRING l
64292: EQUAL
64293: PUSH
64294: LD_VAR 0 1
64298: PPUSH
64299: CALL_OW 437
64303: PUSH
64304: LD_INT 1
64306: ARRAY
64307: PUSH
64308: LD_INT 4
64310: ARRAY
64311: PUSH
64312: LD_VAR 0 2
64316: EQUAL
64317: AND
64318: IFFALSE 64330
// result := true else
64320: LD_ADDR_VAR 0 3
64324: PUSH
64325: LD_INT 1
64327: ST_TO_ADDR
64328: GO 64338
// result := false ;
64330: LD_ADDR_VAR 0 3
64334: PUSH
64335: LD_INT 0
64337: ST_TO_ADDR
// end else
64338: GO 64348
// result := false ;
64340: LD_ADDR_VAR 0 3
64344: PUSH
64345: LD_INT 0
64347: ST_TO_ADDR
// end ;
64348: LD_VAR 0 3
64352: RET
// export function HealTarget ( sci ) ; begin
64353: LD_INT 0
64355: PPUSH
// if not sci then
64356: LD_VAR 0 1
64360: NOT
64361: IFFALSE 64365
// exit ;
64363: GO 64430
// result := 0 ;
64365: LD_ADDR_VAR 0 2
64369: PUSH
64370: LD_INT 0
64372: ST_TO_ADDR
// if GetTaskList ( sci ) then
64373: LD_VAR 0 1
64377: PPUSH
64378: CALL_OW 437
64382: IFFALSE 64430
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64384: LD_VAR 0 1
64388: PPUSH
64389: CALL_OW 437
64393: PUSH
64394: LD_INT 1
64396: ARRAY
64397: PUSH
64398: LD_INT 1
64400: ARRAY
64401: PUSH
64402: LD_STRING l
64404: EQUAL
64405: IFFALSE 64430
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64407: LD_ADDR_VAR 0 2
64411: PUSH
64412: LD_VAR 0 1
64416: PPUSH
64417: CALL_OW 437
64421: PUSH
64422: LD_INT 1
64424: ARRAY
64425: PUSH
64426: LD_INT 4
64428: ARRAY
64429: ST_TO_ADDR
// end ;
64430: LD_VAR 0 2
64434: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64435: LD_INT 0
64437: PPUSH
64438: PPUSH
64439: PPUSH
64440: PPUSH
// if not base_units then
64441: LD_VAR 0 1
64445: NOT
64446: IFFALSE 64450
// exit ;
64448: GO 64537
// result := false ;
64450: LD_ADDR_VAR 0 2
64454: PUSH
64455: LD_INT 0
64457: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64458: LD_ADDR_VAR 0 5
64462: PUSH
64463: LD_VAR 0 1
64467: PPUSH
64468: LD_INT 21
64470: PUSH
64471: LD_INT 3
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PPUSH
64478: CALL_OW 72
64482: ST_TO_ADDR
// if not tmp then
64483: LD_VAR 0 5
64487: NOT
64488: IFFALSE 64492
// exit ;
64490: GO 64537
// for i in tmp do
64492: LD_ADDR_VAR 0 3
64496: PUSH
64497: LD_VAR 0 5
64501: PUSH
64502: FOR_IN
64503: IFFALSE 64535
// begin result := EnemyInRange ( i , 22 ) ;
64505: LD_ADDR_VAR 0 2
64509: PUSH
64510: LD_VAR 0 3
64514: PPUSH
64515: LD_INT 22
64517: PPUSH
64518: CALL 62124 0 2
64522: ST_TO_ADDR
// if result then
64523: LD_VAR 0 2
64527: IFFALSE 64533
// exit ;
64529: POP
64530: POP
64531: GO 64537
// end ;
64533: GO 64502
64535: POP
64536: POP
// end ;
64537: LD_VAR 0 2
64541: RET
// export function FilterByTag ( units , tag ) ; begin
64542: LD_INT 0
64544: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64545: LD_ADDR_VAR 0 3
64549: PUSH
64550: LD_VAR 0 1
64554: PPUSH
64555: LD_INT 120
64557: PUSH
64558: LD_VAR 0 2
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PPUSH
64567: CALL_OW 72
64571: ST_TO_ADDR
// end ;
64572: LD_VAR 0 3
64576: RET
// export function IsDriver ( un ) ; begin
64577: LD_INT 0
64579: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64580: LD_ADDR_VAR 0 2
64584: PUSH
64585: LD_VAR 0 1
64589: PUSH
64590: LD_INT 55
64592: PUSH
64593: EMPTY
64594: LIST
64595: PPUSH
64596: CALL_OW 69
64600: IN
64601: ST_TO_ADDR
// end ;
64602: LD_VAR 0 2
64606: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64607: LD_INT 0
64609: PPUSH
64610: PPUSH
// list := [ ] ;
64611: LD_ADDR_VAR 0 5
64615: PUSH
64616: EMPTY
64617: ST_TO_ADDR
// case d of 0 :
64618: LD_VAR 0 3
64622: PUSH
64623: LD_INT 0
64625: DOUBLE
64626: EQUAL
64627: IFTRUE 64631
64629: GO 64764
64631: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64632: LD_ADDR_VAR 0 5
64636: PUSH
64637: LD_VAR 0 1
64641: PUSH
64642: LD_INT 4
64644: MINUS
64645: PUSH
64646: LD_VAR 0 2
64650: PUSH
64651: LD_INT 4
64653: MINUS
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: PUSH
64663: LD_VAR 0 1
64667: PUSH
64668: LD_INT 3
64670: MINUS
64671: PUSH
64672: LD_VAR 0 2
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: LIST
64684: PUSH
64685: LD_VAR 0 1
64689: PUSH
64690: LD_INT 4
64692: PLUS
64693: PUSH
64694: LD_VAR 0 2
64698: PUSH
64699: LD_INT 4
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: LIST
64706: PUSH
64707: LD_VAR 0 1
64711: PUSH
64712: LD_INT 3
64714: PLUS
64715: PUSH
64716: LD_VAR 0 2
64720: PUSH
64721: LD_INT 3
64723: PLUS
64724: PUSH
64725: LD_INT 5
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: LIST
64732: PUSH
64733: LD_VAR 0 1
64737: PUSH
64738: LD_VAR 0 2
64742: PUSH
64743: LD_INT 4
64745: PLUS
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: LIST
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: ST_TO_ADDR
// end ; 1 :
64762: GO 65462
64764: LD_INT 1
64766: DOUBLE
64767: EQUAL
64768: IFTRUE 64772
64770: GO 64905
64772: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64773: LD_ADDR_VAR 0 5
64777: PUSH
64778: LD_VAR 0 1
64782: PUSH
64783: LD_VAR 0 2
64787: PUSH
64788: LD_INT 4
64790: MINUS
64791: PUSH
64792: LD_INT 3
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: PUSH
64800: LD_VAR 0 1
64804: PUSH
64805: LD_INT 3
64807: MINUS
64808: PUSH
64809: LD_VAR 0 2
64813: PUSH
64814: LD_INT 3
64816: MINUS
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: LIST
64825: PUSH
64826: LD_VAR 0 1
64830: PUSH
64831: LD_INT 4
64833: MINUS
64834: PUSH
64835: LD_VAR 0 2
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: LIST
64847: PUSH
64848: LD_VAR 0 1
64852: PUSH
64853: LD_VAR 0 2
64857: PUSH
64858: LD_INT 3
64860: PLUS
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: LIST
64869: PUSH
64870: LD_VAR 0 1
64874: PUSH
64875: LD_INT 4
64877: PLUS
64878: PUSH
64879: LD_VAR 0 2
64883: PUSH
64884: LD_INT 4
64886: PLUS
64887: PUSH
64888: LD_INT 5
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: ST_TO_ADDR
// end ; 2 :
64903: GO 65462
64905: LD_INT 2
64907: DOUBLE
64908: EQUAL
64909: IFTRUE 64913
64911: GO 65042
64913: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64914: LD_ADDR_VAR 0 5
64918: PUSH
64919: LD_VAR 0 1
64923: PUSH
64924: LD_VAR 0 2
64928: PUSH
64929: LD_INT 3
64931: MINUS
64932: PUSH
64933: LD_INT 3
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: LIST
64940: PUSH
64941: LD_VAR 0 1
64945: PUSH
64946: LD_INT 4
64948: PLUS
64949: PUSH
64950: LD_VAR 0 2
64954: PUSH
64955: LD_INT 4
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: LIST
64962: PUSH
64963: LD_VAR 0 1
64967: PUSH
64968: LD_VAR 0 2
64972: PUSH
64973: LD_INT 4
64975: PLUS
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: PUSH
64985: LD_VAR 0 1
64989: PUSH
64990: LD_INT 3
64992: MINUS
64993: PUSH
64994: LD_VAR 0 2
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: LIST
65006: PUSH
65007: LD_VAR 0 1
65011: PUSH
65012: LD_INT 4
65014: MINUS
65015: PUSH
65016: LD_VAR 0 2
65020: PUSH
65021: LD_INT 4
65023: MINUS
65024: PUSH
65025: LD_INT 2
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: LIST
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: ST_TO_ADDR
// end ; 3 :
65040: GO 65462
65042: LD_INT 3
65044: DOUBLE
65045: EQUAL
65046: IFTRUE 65050
65048: GO 65183
65050: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65051: LD_ADDR_VAR 0 5
65055: PUSH
65056: LD_VAR 0 1
65060: PUSH
65061: LD_INT 3
65063: PLUS
65064: PUSH
65065: LD_VAR 0 2
65069: PUSH
65070: LD_INT 4
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: PUSH
65078: LD_VAR 0 1
65082: PUSH
65083: LD_INT 4
65085: PLUS
65086: PUSH
65087: LD_VAR 0 2
65091: PUSH
65092: LD_INT 4
65094: PLUS
65095: PUSH
65096: LD_INT 5
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: PUSH
65104: LD_VAR 0 1
65108: PUSH
65109: LD_INT 4
65111: MINUS
65112: PUSH
65113: LD_VAR 0 2
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: PUSH
65126: LD_VAR 0 1
65130: PUSH
65131: LD_VAR 0 2
65135: PUSH
65136: LD_INT 4
65138: MINUS
65139: PUSH
65140: LD_INT 3
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: LIST
65147: PUSH
65148: LD_VAR 0 1
65152: PUSH
65153: LD_INT 3
65155: MINUS
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: LD_INT 3
65164: MINUS
65165: PUSH
65166: LD_INT 2
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: LIST
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: ST_TO_ADDR
// end ; 4 :
65181: GO 65462
65183: LD_INT 4
65185: DOUBLE
65186: EQUAL
65187: IFTRUE 65191
65189: GO 65324
65191: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65192: LD_ADDR_VAR 0 5
65196: PUSH
65197: LD_VAR 0 1
65201: PUSH
65202: LD_VAR 0 2
65206: PUSH
65207: LD_INT 4
65209: PLUS
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: LIST
65218: PUSH
65219: LD_VAR 0 1
65223: PUSH
65224: LD_INT 3
65226: PLUS
65227: PUSH
65228: LD_VAR 0 2
65232: PUSH
65233: LD_INT 3
65235: PLUS
65236: PUSH
65237: LD_INT 5
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: LIST
65244: PUSH
65245: LD_VAR 0 1
65249: PUSH
65250: LD_INT 4
65252: PLUS
65253: PUSH
65254: LD_VAR 0 2
65258: PUSH
65259: LD_INT 4
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: PUSH
65267: LD_VAR 0 1
65271: PUSH
65272: LD_VAR 0 2
65276: PUSH
65277: LD_INT 3
65279: MINUS
65280: PUSH
65281: LD_INT 3
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: LIST
65288: PUSH
65289: LD_VAR 0 1
65293: PUSH
65294: LD_INT 4
65296: MINUS
65297: PUSH
65298: LD_VAR 0 2
65302: PUSH
65303: LD_INT 4
65305: MINUS
65306: PUSH
65307: LD_INT 2
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: ST_TO_ADDR
// end ; 5 :
65322: GO 65462
65324: LD_INT 5
65326: DOUBLE
65327: EQUAL
65328: IFTRUE 65332
65330: GO 65461
65332: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65333: LD_ADDR_VAR 0 5
65337: PUSH
65338: LD_VAR 0 1
65342: PUSH
65343: LD_INT 4
65345: MINUS
65346: PUSH
65347: LD_VAR 0 2
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: LIST
65359: PUSH
65360: LD_VAR 0 1
65364: PUSH
65365: LD_VAR 0 2
65369: PUSH
65370: LD_INT 4
65372: MINUS
65373: PUSH
65374: LD_INT 3
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: LIST
65381: PUSH
65382: LD_VAR 0 1
65386: PUSH
65387: LD_INT 4
65389: PLUS
65390: PUSH
65391: LD_VAR 0 2
65395: PUSH
65396: LD_INT 4
65398: PLUS
65399: PUSH
65400: LD_INT 5
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: LIST
65407: PUSH
65408: LD_VAR 0 1
65412: PUSH
65413: LD_INT 3
65415: PLUS
65416: PUSH
65417: LD_VAR 0 2
65421: PUSH
65422: LD_INT 4
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: LIST
65429: PUSH
65430: LD_VAR 0 1
65434: PUSH
65435: LD_VAR 0 2
65439: PUSH
65440: LD_INT 3
65442: PLUS
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: ST_TO_ADDR
// end ; end ;
65459: GO 65462
65461: POP
// result := list ;
65462: LD_ADDR_VAR 0 4
65466: PUSH
65467: LD_VAR 0 5
65471: ST_TO_ADDR
// end ;
65472: LD_VAR 0 4
65476: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65477: LD_INT 0
65479: PPUSH
65480: PPUSH
65481: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65482: LD_VAR 0 1
65486: NOT
65487: PUSH
65488: LD_VAR 0 2
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: LD_INT 3
65501: PUSH
65502: LD_INT 4
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: IN
65511: NOT
65512: OR
65513: IFFALSE 65517
// exit ;
65515: GO 65600
// tmp := [ ] ;
65517: LD_ADDR_VAR 0 5
65521: PUSH
65522: EMPTY
65523: ST_TO_ADDR
// for i in units do
65524: LD_ADDR_VAR 0 4
65528: PUSH
65529: LD_VAR 0 1
65533: PUSH
65534: FOR_IN
65535: IFFALSE 65569
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65537: LD_ADDR_VAR 0 5
65541: PUSH
65542: LD_VAR 0 5
65546: PPUSH
65547: LD_VAR 0 4
65551: PPUSH
65552: LD_VAR 0 2
65556: PPUSH
65557: CALL_OW 259
65561: PPUSH
65562: CALL 66973 0 2
65566: ST_TO_ADDR
65567: GO 65534
65569: POP
65570: POP
// if not tmp then
65571: LD_VAR 0 5
65575: NOT
65576: IFFALSE 65580
// exit ;
65578: GO 65600
// result := SortListByListDesc ( units , tmp ) ;
65580: LD_ADDR_VAR 0 3
65584: PUSH
65585: LD_VAR 0 1
65589: PPUSH
65590: LD_VAR 0 5
65594: PPUSH
65595: CALL_OW 77
65599: ST_TO_ADDR
// end ;
65600: LD_VAR 0 3
65604: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65605: LD_INT 0
65607: PPUSH
65608: PPUSH
65609: PPUSH
// result := false ;
65610: LD_ADDR_VAR 0 3
65614: PUSH
65615: LD_INT 0
65617: ST_TO_ADDR
// if not building then
65618: LD_VAR 0 2
65622: NOT
65623: IFFALSE 65627
// exit ;
65625: GO 65765
// x := GetX ( building ) ;
65627: LD_ADDR_VAR 0 4
65631: PUSH
65632: LD_VAR 0 2
65636: PPUSH
65637: CALL_OW 250
65641: ST_TO_ADDR
// y := GetY ( building ) ;
65642: LD_ADDR_VAR 0 5
65646: PUSH
65647: LD_VAR 0 2
65651: PPUSH
65652: CALL_OW 251
65656: ST_TO_ADDR
// if not x or not y then
65657: LD_VAR 0 4
65661: NOT
65662: PUSH
65663: LD_VAR 0 5
65667: NOT
65668: OR
65669: IFFALSE 65673
// exit ;
65671: GO 65765
// if GetTaskList ( unit ) then
65673: LD_VAR 0 1
65677: PPUSH
65678: CALL_OW 437
65682: IFFALSE 65765
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65684: LD_STRING e
65686: PUSH
65687: LD_VAR 0 1
65691: PPUSH
65692: CALL_OW 437
65696: PUSH
65697: LD_INT 1
65699: ARRAY
65700: PUSH
65701: LD_INT 1
65703: ARRAY
65704: EQUAL
65705: PUSH
65706: LD_VAR 0 4
65710: PUSH
65711: LD_VAR 0 1
65715: PPUSH
65716: CALL_OW 437
65720: PUSH
65721: LD_INT 1
65723: ARRAY
65724: PUSH
65725: LD_INT 2
65727: ARRAY
65728: EQUAL
65729: AND
65730: PUSH
65731: LD_VAR 0 5
65735: PUSH
65736: LD_VAR 0 1
65740: PPUSH
65741: CALL_OW 437
65745: PUSH
65746: LD_INT 1
65748: ARRAY
65749: PUSH
65750: LD_INT 3
65752: ARRAY
65753: EQUAL
65754: AND
65755: IFFALSE 65765
// result := true end ;
65757: LD_ADDR_VAR 0 3
65761: PUSH
65762: LD_INT 1
65764: ST_TO_ADDR
// end ;
65765: LD_VAR 0 3
65769: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65770: LD_INT 0
65772: PPUSH
// result := false ;
65773: LD_ADDR_VAR 0 4
65777: PUSH
65778: LD_INT 0
65780: ST_TO_ADDR
// if GetTaskList ( unit ) then
65781: LD_VAR 0 1
65785: PPUSH
65786: CALL_OW 437
65790: IFFALSE 65873
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65792: LD_STRING M
65794: PUSH
65795: LD_VAR 0 1
65799: PPUSH
65800: CALL_OW 437
65804: PUSH
65805: LD_INT 1
65807: ARRAY
65808: PUSH
65809: LD_INT 1
65811: ARRAY
65812: EQUAL
65813: PUSH
65814: LD_VAR 0 2
65818: PUSH
65819: LD_VAR 0 1
65823: PPUSH
65824: CALL_OW 437
65828: PUSH
65829: LD_INT 1
65831: ARRAY
65832: PUSH
65833: LD_INT 2
65835: ARRAY
65836: EQUAL
65837: AND
65838: PUSH
65839: LD_VAR 0 3
65843: PUSH
65844: LD_VAR 0 1
65848: PPUSH
65849: CALL_OW 437
65853: PUSH
65854: LD_INT 1
65856: ARRAY
65857: PUSH
65858: LD_INT 3
65860: ARRAY
65861: EQUAL
65862: AND
65863: IFFALSE 65873
// result := true ;
65865: LD_ADDR_VAR 0 4
65869: PUSH
65870: LD_INT 1
65872: ST_TO_ADDR
// end ; end ;
65873: LD_VAR 0 4
65877: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65878: LD_INT 0
65880: PPUSH
65881: PPUSH
65882: PPUSH
65883: PPUSH
// if not unit or not area then
65884: LD_VAR 0 1
65888: NOT
65889: PUSH
65890: LD_VAR 0 2
65894: NOT
65895: OR
65896: IFFALSE 65900
// exit ;
65898: GO 66076
// tmp := AreaToList ( area , i ) ;
65900: LD_ADDR_VAR 0 6
65904: PUSH
65905: LD_VAR 0 2
65909: PPUSH
65910: LD_VAR 0 5
65914: PPUSH
65915: CALL_OW 517
65919: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65920: LD_ADDR_VAR 0 5
65924: PUSH
65925: DOUBLE
65926: LD_INT 1
65928: DEC
65929: ST_TO_ADDR
65930: LD_VAR 0 6
65934: PUSH
65935: LD_INT 1
65937: ARRAY
65938: PUSH
65939: FOR_TO
65940: IFFALSE 66074
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65942: LD_ADDR_VAR 0 7
65946: PUSH
65947: LD_VAR 0 6
65951: PUSH
65952: LD_INT 1
65954: ARRAY
65955: PUSH
65956: LD_VAR 0 5
65960: ARRAY
65961: PUSH
65962: LD_VAR 0 6
65966: PUSH
65967: LD_INT 2
65969: ARRAY
65970: PUSH
65971: LD_VAR 0 5
65975: ARRAY
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65981: LD_INT 92
65983: PUSH
65984: LD_VAR 0 7
65988: PUSH
65989: LD_INT 1
65991: ARRAY
65992: PUSH
65993: LD_VAR 0 7
65997: PUSH
65998: LD_INT 2
66000: ARRAY
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: PPUSH
66011: CALL_OW 69
66015: PUSH
66016: LD_INT 0
66018: EQUAL
66019: IFFALSE 66072
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66021: LD_VAR 0 1
66025: PPUSH
66026: LD_VAR 0 7
66030: PUSH
66031: LD_INT 1
66033: ARRAY
66034: PPUSH
66035: LD_VAR 0 7
66039: PUSH
66040: LD_INT 2
66042: ARRAY
66043: PPUSH
66044: LD_VAR 0 3
66048: PPUSH
66049: CALL_OW 48
// result := IsPlaced ( unit ) ;
66053: LD_ADDR_VAR 0 4
66057: PUSH
66058: LD_VAR 0 1
66062: PPUSH
66063: CALL_OW 305
66067: ST_TO_ADDR
// exit ;
66068: POP
66069: POP
66070: GO 66076
// end ; end ;
66072: GO 65939
66074: POP
66075: POP
// end ;
66076: LD_VAR 0 4
66080: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66081: LD_INT 0
66083: PPUSH
66084: PPUSH
66085: PPUSH
// if not side or side > 8 then
66086: LD_VAR 0 1
66090: NOT
66091: PUSH
66092: LD_VAR 0 1
66096: PUSH
66097: LD_INT 8
66099: GREATER
66100: OR
66101: IFFALSE 66105
// exit ;
66103: GO 66292
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66105: LD_ADDR_VAR 0 4
66109: PUSH
66110: LD_INT 22
66112: PUSH
66113: LD_VAR 0 1
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 21
66124: PUSH
66125: LD_INT 3
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PPUSH
66136: CALL_OW 69
66140: ST_TO_ADDR
// if not tmp then
66141: LD_VAR 0 4
66145: NOT
66146: IFFALSE 66150
// exit ;
66148: GO 66292
// enable_addtolog := true ;
66150: LD_ADDR_OWVAR 81
66154: PUSH
66155: LD_INT 1
66157: ST_TO_ADDR
// AddToLog ( [ ) ;
66158: LD_STRING [
66160: PPUSH
66161: CALL_OW 561
// for i in tmp do
66165: LD_ADDR_VAR 0 3
66169: PUSH
66170: LD_VAR 0 4
66174: PUSH
66175: FOR_IN
66176: IFFALSE 66283
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66178: LD_STRING [
66180: PUSH
66181: LD_VAR 0 3
66185: PPUSH
66186: CALL_OW 266
66190: STR
66191: PUSH
66192: LD_STRING , 
66194: STR
66195: PUSH
66196: LD_VAR 0 3
66200: PPUSH
66201: CALL_OW 250
66205: STR
66206: PUSH
66207: LD_STRING , 
66209: STR
66210: PUSH
66211: LD_VAR 0 3
66215: PPUSH
66216: CALL_OW 251
66220: STR
66221: PUSH
66222: LD_STRING , 
66224: STR
66225: PUSH
66226: LD_VAR 0 3
66230: PPUSH
66231: CALL_OW 254
66235: STR
66236: PUSH
66237: LD_STRING , 
66239: STR
66240: PUSH
66241: LD_VAR 0 3
66245: PPUSH
66246: LD_INT 1
66248: PPUSH
66249: CALL_OW 268
66253: STR
66254: PUSH
66255: LD_STRING , 
66257: STR
66258: PUSH
66259: LD_VAR 0 3
66263: PPUSH
66264: LD_INT 2
66266: PPUSH
66267: CALL_OW 268
66271: STR
66272: PUSH
66273: LD_STRING ],
66275: STR
66276: PPUSH
66277: CALL_OW 561
// end ;
66281: GO 66175
66283: POP
66284: POP
// AddToLog ( ]; ) ;
66285: LD_STRING ];
66287: PPUSH
66288: CALL_OW 561
// end ;
66292: LD_VAR 0 2
66296: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66297: LD_INT 0
66299: PPUSH
66300: PPUSH
66301: PPUSH
66302: PPUSH
66303: PPUSH
// if not area or not rate or not max then
66304: LD_VAR 0 1
66308: NOT
66309: PUSH
66310: LD_VAR 0 2
66314: NOT
66315: OR
66316: PUSH
66317: LD_VAR 0 4
66321: NOT
66322: OR
66323: IFFALSE 66327
// exit ;
66325: GO 66516
// while 1 do
66327: LD_INT 1
66329: IFFALSE 66516
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66331: LD_ADDR_VAR 0 9
66335: PUSH
66336: LD_VAR 0 1
66340: PPUSH
66341: LD_INT 1
66343: PPUSH
66344: CALL_OW 287
66348: PUSH
66349: LD_INT 10
66351: MUL
66352: ST_TO_ADDR
// r := rate / 10 ;
66353: LD_ADDR_VAR 0 7
66357: PUSH
66358: LD_VAR 0 2
66362: PUSH
66363: LD_INT 10
66365: DIVREAL
66366: ST_TO_ADDR
// time := 1 1$00 ;
66367: LD_ADDR_VAR 0 8
66371: PUSH
66372: LD_INT 2100
66374: ST_TO_ADDR
// if amount < min then
66375: LD_VAR 0 9
66379: PUSH
66380: LD_VAR 0 3
66384: LESS
66385: IFFALSE 66403
// r := r * 2 else
66387: LD_ADDR_VAR 0 7
66391: PUSH
66392: LD_VAR 0 7
66396: PUSH
66397: LD_INT 2
66399: MUL
66400: ST_TO_ADDR
66401: GO 66429
// if amount > max then
66403: LD_VAR 0 9
66407: PUSH
66408: LD_VAR 0 4
66412: GREATER
66413: IFFALSE 66429
// r := r / 2 ;
66415: LD_ADDR_VAR 0 7
66419: PUSH
66420: LD_VAR 0 7
66424: PUSH
66425: LD_INT 2
66427: DIVREAL
66428: ST_TO_ADDR
// time := time / r ;
66429: LD_ADDR_VAR 0 8
66433: PUSH
66434: LD_VAR 0 8
66438: PUSH
66439: LD_VAR 0 7
66443: DIVREAL
66444: ST_TO_ADDR
// if time < 0 then
66445: LD_VAR 0 8
66449: PUSH
66450: LD_INT 0
66452: LESS
66453: IFFALSE 66470
// time := time * - 1 ;
66455: LD_ADDR_VAR 0 8
66459: PUSH
66460: LD_VAR 0 8
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: MUL
66469: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66470: LD_VAR 0 8
66474: PUSH
66475: LD_INT 35
66477: PPUSH
66478: LD_INT 875
66480: PPUSH
66481: CALL_OW 12
66485: PLUS
66486: PPUSH
66487: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66491: LD_INT 1
66493: PPUSH
66494: LD_INT 5
66496: PPUSH
66497: CALL_OW 12
66501: PPUSH
66502: LD_VAR 0 1
66506: PPUSH
66507: LD_INT 1
66509: PPUSH
66510: CALL_OW 55
// end ;
66514: GO 66327
// end ;
66516: LD_VAR 0 5
66520: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66521: LD_INT 0
66523: PPUSH
66524: PPUSH
66525: PPUSH
66526: PPUSH
66527: PPUSH
66528: PPUSH
66529: PPUSH
66530: PPUSH
// if not turrets or not factories then
66531: LD_VAR 0 1
66535: NOT
66536: PUSH
66537: LD_VAR 0 2
66541: NOT
66542: OR
66543: IFFALSE 66547
// exit ;
66545: GO 66854
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66547: LD_ADDR_VAR 0 10
66551: PUSH
66552: LD_INT 5
66554: PUSH
66555: LD_INT 6
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 2
66564: PUSH
66565: LD_INT 4
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 3
66574: PUSH
66575: LD_INT 5
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 24
66589: PUSH
66590: LD_INT 25
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 23
66599: PUSH
66600: LD_INT 27
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 42
66613: PUSH
66614: LD_INT 43
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 44
66623: PUSH
66624: LD_INT 46
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 45
66633: PUSH
66634: LD_INT 47
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: LIST
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: LIST
66650: ST_TO_ADDR
// result := [ ] ;
66651: LD_ADDR_VAR 0 3
66655: PUSH
66656: EMPTY
66657: ST_TO_ADDR
// for i in turrets do
66658: LD_ADDR_VAR 0 4
66662: PUSH
66663: LD_VAR 0 1
66667: PUSH
66668: FOR_IN
66669: IFFALSE 66852
// begin nat := GetNation ( i ) ;
66671: LD_ADDR_VAR 0 7
66675: PUSH
66676: LD_VAR 0 4
66680: PPUSH
66681: CALL_OW 248
66685: ST_TO_ADDR
// weapon := 0 ;
66686: LD_ADDR_VAR 0 8
66690: PUSH
66691: LD_INT 0
66693: ST_TO_ADDR
// if not nat then
66694: LD_VAR 0 7
66698: NOT
66699: IFFALSE 66703
// continue ;
66701: GO 66668
// for j in list [ nat ] do
66703: LD_ADDR_VAR 0 5
66707: PUSH
66708: LD_VAR 0 10
66712: PUSH
66713: LD_VAR 0 7
66717: ARRAY
66718: PUSH
66719: FOR_IN
66720: IFFALSE 66761
// if GetBWeapon ( i ) = j [ 1 ] then
66722: LD_VAR 0 4
66726: PPUSH
66727: CALL_OW 269
66731: PUSH
66732: LD_VAR 0 5
66736: PUSH
66737: LD_INT 1
66739: ARRAY
66740: EQUAL
66741: IFFALSE 66759
// begin weapon := j [ 2 ] ;
66743: LD_ADDR_VAR 0 8
66747: PUSH
66748: LD_VAR 0 5
66752: PUSH
66753: LD_INT 2
66755: ARRAY
66756: ST_TO_ADDR
// break ;
66757: GO 66761
// end ;
66759: GO 66719
66761: POP
66762: POP
// if not weapon then
66763: LD_VAR 0 8
66767: NOT
66768: IFFALSE 66772
// continue ;
66770: GO 66668
// for k in factories do
66772: LD_ADDR_VAR 0 6
66776: PUSH
66777: LD_VAR 0 2
66781: PUSH
66782: FOR_IN
66783: IFFALSE 66848
// begin weapons := AvailableWeaponList ( k ) ;
66785: LD_ADDR_VAR 0 9
66789: PUSH
66790: LD_VAR 0 6
66794: PPUSH
66795: CALL_OW 478
66799: ST_TO_ADDR
// if not weapons then
66800: LD_VAR 0 9
66804: NOT
66805: IFFALSE 66809
// continue ;
66807: GO 66782
// if weapon in weapons then
66809: LD_VAR 0 8
66813: PUSH
66814: LD_VAR 0 9
66818: IN
66819: IFFALSE 66846
// begin result := [ i , weapon ] ;
66821: LD_ADDR_VAR 0 3
66825: PUSH
66826: LD_VAR 0 4
66830: PUSH
66831: LD_VAR 0 8
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: ST_TO_ADDR
// exit ;
66840: POP
66841: POP
66842: POP
66843: POP
66844: GO 66854
// end ; end ;
66846: GO 66782
66848: POP
66849: POP
// end ;
66850: GO 66668
66852: POP
66853: POP
// end ;
66854: LD_VAR 0 3
66858: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66859: LD_INT 0
66861: PPUSH
// if not side or side > 8 then
66862: LD_VAR 0 3
66866: NOT
66867: PUSH
66868: LD_VAR 0 3
66872: PUSH
66873: LD_INT 8
66875: GREATER
66876: OR
66877: IFFALSE 66881
// exit ;
66879: GO 66940
// if not range then
66881: LD_VAR 0 4
66885: NOT
66886: IFFALSE 66897
// range := - 12 ;
66888: LD_ADDR_VAR 0 4
66892: PUSH
66893: LD_INT 12
66895: NEG
66896: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66897: LD_VAR 0 1
66901: PPUSH
66902: LD_VAR 0 2
66906: PPUSH
66907: LD_VAR 0 3
66911: PPUSH
66912: LD_VAR 0 4
66916: PPUSH
66917: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66921: LD_VAR 0 1
66925: PPUSH
66926: LD_VAR 0 2
66930: PPUSH
66931: LD_VAR 0 3
66935: PPUSH
66936: CALL_OW 331
// end ;
66940: LD_VAR 0 5
66944: RET
// export function Video ( mode ) ; begin
66945: LD_INT 0
66947: PPUSH
// ingame_video = mode ;
66948: LD_ADDR_OWVAR 52
66952: PUSH
66953: LD_VAR 0 1
66957: ST_TO_ADDR
// interface_hidden = mode ;
66958: LD_ADDR_OWVAR 54
66962: PUSH
66963: LD_VAR 0 1
66967: ST_TO_ADDR
// end ;
66968: LD_VAR 0 2
66972: RET
// export function Join ( array , element ) ; begin
66973: LD_INT 0
66975: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66976: LD_ADDR_VAR 0 3
66980: PUSH
66981: LD_VAR 0 1
66985: PPUSH
66986: LD_VAR 0 1
66990: PUSH
66991: LD_INT 1
66993: PLUS
66994: PPUSH
66995: LD_VAR 0 2
66999: PPUSH
67000: CALL_OW 1
67004: ST_TO_ADDR
// end ;
67005: LD_VAR 0 3
67009: RET
// export function JoinUnion ( array , element ) ; begin
67010: LD_INT 0
67012: PPUSH
// result := array union element ;
67013: LD_ADDR_VAR 0 3
67017: PUSH
67018: LD_VAR 0 1
67022: PUSH
67023: LD_VAR 0 2
67027: UNION
67028: ST_TO_ADDR
// end ;
67029: LD_VAR 0 3
67033: RET
// export function GetBehemoths ( side ) ; begin
67034: LD_INT 0
67036: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67037: LD_ADDR_VAR 0 2
67041: PUSH
67042: LD_INT 22
67044: PUSH
67045: LD_VAR 0 1
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 31
67056: PUSH
67057: LD_INT 25
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PPUSH
67068: CALL_OW 69
67072: ST_TO_ADDR
// end ;
67073: LD_VAR 0 2
67077: RET
// export function Shuffle ( array ) ; var i , index ; begin
67078: LD_INT 0
67080: PPUSH
67081: PPUSH
67082: PPUSH
// result := [ ] ;
67083: LD_ADDR_VAR 0 2
67087: PUSH
67088: EMPTY
67089: ST_TO_ADDR
// if not array then
67090: LD_VAR 0 1
67094: NOT
67095: IFFALSE 67099
// exit ;
67097: GO 67198
// Randomize ;
67099: CALL_OW 10
// for i = array downto 1 do
67103: LD_ADDR_VAR 0 3
67107: PUSH
67108: DOUBLE
67109: LD_VAR 0 1
67113: INC
67114: ST_TO_ADDR
67115: LD_INT 1
67117: PUSH
67118: FOR_DOWNTO
67119: IFFALSE 67196
// begin index := rand ( 1 , array ) ;
67121: LD_ADDR_VAR 0 4
67125: PUSH
67126: LD_INT 1
67128: PPUSH
67129: LD_VAR 0 1
67133: PPUSH
67134: CALL_OW 12
67138: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67139: LD_ADDR_VAR 0 2
67143: PUSH
67144: LD_VAR 0 2
67148: PPUSH
67149: LD_VAR 0 2
67153: PUSH
67154: LD_INT 1
67156: PLUS
67157: PPUSH
67158: LD_VAR 0 1
67162: PUSH
67163: LD_VAR 0 4
67167: ARRAY
67168: PPUSH
67169: CALL_OW 2
67173: ST_TO_ADDR
// array := Delete ( array , index ) ;
67174: LD_ADDR_VAR 0 1
67178: PUSH
67179: LD_VAR 0 1
67183: PPUSH
67184: LD_VAR 0 4
67188: PPUSH
67189: CALL_OW 3
67193: ST_TO_ADDR
// end ;
67194: GO 67118
67196: POP
67197: POP
// end ;
67198: LD_VAR 0 2
67202: RET
// export function GetBaseMaterials ( base ) ; begin
67203: LD_INT 0
67205: PPUSH
// result := [ 0 , 0 , 0 ] ;
67206: LD_ADDR_VAR 0 2
67210: PUSH
67211: LD_INT 0
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: LIST
67224: ST_TO_ADDR
// if not base then
67225: LD_VAR 0 1
67229: NOT
67230: IFFALSE 67234
// exit ;
67232: GO 67283
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67234: LD_ADDR_VAR 0 2
67238: PUSH
67239: LD_VAR 0 1
67243: PPUSH
67244: LD_INT 1
67246: PPUSH
67247: CALL_OW 275
67251: PUSH
67252: LD_VAR 0 1
67256: PPUSH
67257: LD_INT 2
67259: PPUSH
67260: CALL_OW 275
67264: PUSH
67265: LD_VAR 0 1
67269: PPUSH
67270: LD_INT 3
67272: PPUSH
67273: CALL_OW 275
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: LIST
67282: ST_TO_ADDR
// end ;
67283: LD_VAR 0 2
67287: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67288: LD_INT 0
67290: PPUSH
67291: PPUSH
// result := array ;
67292: LD_ADDR_VAR 0 3
67296: PUSH
67297: LD_VAR 0 1
67301: ST_TO_ADDR
// if size >= result then
67302: LD_VAR 0 2
67306: PUSH
67307: LD_VAR 0 3
67311: GREATEREQUAL
67312: IFFALSE 67316
// exit ;
67314: GO 67366
// if size then
67316: LD_VAR 0 2
67320: IFFALSE 67366
// for i := array downto size do
67322: LD_ADDR_VAR 0 4
67326: PUSH
67327: DOUBLE
67328: LD_VAR 0 1
67332: INC
67333: ST_TO_ADDR
67334: LD_VAR 0 2
67338: PUSH
67339: FOR_DOWNTO
67340: IFFALSE 67364
// result := Delete ( result , result ) ;
67342: LD_ADDR_VAR 0 3
67346: PUSH
67347: LD_VAR 0 3
67351: PPUSH
67352: LD_VAR 0 3
67356: PPUSH
67357: CALL_OW 3
67361: ST_TO_ADDR
67362: GO 67339
67364: POP
67365: POP
// end ;
67366: LD_VAR 0 3
67370: RET
// export function ComExit ( unit ) ; var tmp ; begin
67371: LD_INT 0
67373: PPUSH
67374: PPUSH
// if not IsInUnit ( unit ) then
67375: LD_VAR 0 1
67379: PPUSH
67380: CALL_OW 310
67384: NOT
67385: IFFALSE 67389
// exit ;
67387: GO 67449
// tmp := IsInUnit ( unit ) ;
67389: LD_ADDR_VAR 0 3
67393: PUSH
67394: LD_VAR 0 1
67398: PPUSH
67399: CALL_OW 310
67403: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67404: LD_VAR 0 3
67408: PPUSH
67409: CALL_OW 247
67413: PUSH
67414: LD_INT 2
67416: EQUAL
67417: IFFALSE 67430
// ComExitVehicle ( unit ) else
67419: LD_VAR 0 1
67423: PPUSH
67424: CALL_OW 121
67428: GO 67439
// ComExitBuilding ( unit ) ;
67430: LD_VAR 0 1
67434: PPUSH
67435: CALL_OW 122
// result := tmp ;
67439: LD_ADDR_VAR 0 2
67443: PUSH
67444: LD_VAR 0 3
67448: ST_TO_ADDR
// end ;
67449: LD_VAR 0 2
67453: RET
// export function ComExitAll ( units ) ; var i ; begin
67454: LD_INT 0
67456: PPUSH
67457: PPUSH
// if not units then
67458: LD_VAR 0 1
67462: NOT
67463: IFFALSE 67467
// exit ;
67465: GO 67493
// for i in units do
67467: LD_ADDR_VAR 0 3
67471: PUSH
67472: LD_VAR 0 1
67476: PUSH
67477: FOR_IN
67478: IFFALSE 67491
// ComExit ( i ) ;
67480: LD_VAR 0 3
67484: PPUSH
67485: CALL 67371 0 1
67489: GO 67477
67491: POP
67492: POP
// end ;
67493: LD_VAR 0 2
67497: RET
// export function ResetHc ; begin
67498: LD_INT 0
67500: PPUSH
// InitHc ;
67501: CALL_OW 19
// hc_importance := 0 ;
67505: LD_ADDR_OWVAR 32
67509: PUSH
67510: LD_INT 0
67512: ST_TO_ADDR
// end ;
67513: LD_VAR 0 1
67517: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67518: LD_INT 0
67520: PPUSH
67521: PPUSH
67522: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67523: LD_ADDR_VAR 0 6
67527: PUSH
67528: LD_VAR 0 1
67532: PUSH
67533: LD_VAR 0 3
67537: PLUS
67538: PUSH
67539: LD_INT 2
67541: DIV
67542: ST_TO_ADDR
// if _x < 0 then
67543: LD_VAR 0 6
67547: PUSH
67548: LD_INT 0
67550: LESS
67551: IFFALSE 67568
// _x := _x * - 1 ;
67553: LD_ADDR_VAR 0 6
67557: PUSH
67558: LD_VAR 0 6
67562: PUSH
67563: LD_INT 1
67565: NEG
67566: MUL
67567: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67568: LD_ADDR_VAR 0 7
67572: PUSH
67573: LD_VAR 0 2
67577: PUSH
67578: LD_VAR 0 4
67582: PLUS
67583: PUSH
67584: LD_INT 2
67586: DIV
67587: ST_TO_ADDR
// if _y < 0 then
67588: LD_VAR 0 7
67592: PUSH
67593: LD_INT 0
67595: LESS
67596: IFFALSE 67613
// _y := _y * - 1 ;
67598: LD_ADDR_VAR 0 7
67602: PUSH
67603: LD_VAR 0 7
67607: PUSH
67608: LD_INT 1
67610: NEG
67611: MUL
67612: ST_TO_ADDR
// result := [ _x , _y ] ;
67613: LD_ADDR_VAR 0 5
67617: PUSH
67618: LD_VAR 0 6
67622: PUSH
67623: LD_VAR 0 7
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: ST_TO_ADDR
// end ;
67632: LD_VAR 0 5
67636: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67637: LD_INT 0
67639: PPUSH
67640: PPUSH
67641: PPUSH
67642: PPUSH
// task := GetTaskList ( unit ) ;
67643: LD_ADDR_VAR 0 7
67647: PUSH
67648: LD_VAR 0 1
67652: PPUSH
67653: CALL_OW 437
67657: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67658: LD_VAR 0 7
67662: NOT
67663: PUSH
67664: LD_VAR 0 1
67668: PPUSH
67669: LD_VAR 0 2
67673: PPUSH
67674: CALL_OW 308
67678: NOT
67679: AND
67680: IFFALSE 67684
// exit ;
67682: GO 67802
// if IsInArea ( unit , area ) then
67684: LD_VAR 0 1
67688: PPUSH
67689: LD_VAR 0 2
67693: PPUSH
67694: CALL_OW 308
67698: IFFALSE 67716
// begin ComMoveToArea ( unit , goAway ) ;
67700: LD_VAR 0 1
67704: PPUSH
67705: LD_VAR 0 3
67709: PPUSH
67710: CALL_OW 113
// exit ;
67714: GO 67802
// end ; if task [ 1 ] [ 1 ] <> M then
67716: LD_VAR 0 7
67720: PUSH
67721: LD_INT 1
67723: ARRAY
67724: PUSH
67725: LD_INT 1
67727: ARRAY
67728: PUSH
67729: LD_STRING M
67731: NONEQUAL
67732: IFFALSE 67736
// exit ;
67734: GO 67802
// x := task [ 1 ] [ 2 ] ;
67736: LD_ADDR_VAR 0 5
67740: PUSH
67741: LD_VAR 0 7
67745: PUSH
67746: LD_INT 1
67748: ARRAY
67749: PUSH
67750: LD_INT 2
67752: ARRAY
67753: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67754: LD_ADDR_VAR 0 6
67758: PUSH
67759: LD_VAR 0 7
67763: PUSH
67764: LD_INT 1
67766: ARRAY
67767: PUSH
67768: LD_INT 3
67770: ARRAY
67771: ST_TO_ADDR
// if InArea ( x , y , area ) then
67772: LD_VAR 0 5
67776: PPUSH
67777: LD_VAR 0 6
67781: PPUSH
67782: LD_VAR 0 2
67786: PPUSH
67787: CALL_OW 309
67791: IFFALSE 67802
// ComStop ( unit ) ;
67793: LD_VAR 0 1
67797: PPUSH
67798: CALL_OW 141
// end ;
67802: LD_VAR 0 4
67806: RET
// export function Abs ( value ) ; begin
67807: LD_INT 0
67809: PPUSH
// result := value ;
67810: LD_ADDR_VAR 0 2
67814: PUSH
67815: LD_VAR 0 1
67819: ST_TO_ADDR
// if value < 0 then
67820: LD_VAR 0 1
67824: PUSH
67825: LD_INT 0
67827: LESS
67828: IFFALSE 67845
// result := value * - 1 ;
67830: LD_ADDR_VAR 0 2
67834: PUSH
67835: LD_VAR 0 1
67839: PUSH
67840: LD_INT 1
67842: NEG
67843: MUL
67844: ST_TO_ADDR
// end ;
67845: LD_VAR 0 2
67849: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67850: LD_INT 0
67852: PPUSH
67853: PPUSH
67854: PPUSH
67855: PPUSH
67856: PPUSH
67857: PPUSH
67858: PPUSH
67859: PPUSH
// if not unit or not building then
67860: LD_VAR 0 1
67864: NOT
67865: PUSH
67866: LD_VAR 0 2
67870: NOT
67871: OR
67872: IFFALSE 67876
// exit ;
67874: GO 68102
// x := GetX ( building ) ;
67876: LD_ADDR_VAR 0 4
67880: PUSH
67881: LD_VAR 0 2
67885: PPUSH
67886: CALL_OW 250
67890: ST_TO_ADDR
// y := GetY ( building ) ;
67891: LD_ADDR_VAR 0 6
67895: PUSH
67896: LD_VAR 0 2
67900: PPUSH
67901: CALL_OW 251
67905: ST_TO_ADDR
// d := GetDir ( building ) ;
67906: LD_ADDR_VAR 0 8
67910: PUSH
67911: LD_VAR 0 2
67915: PPUSH
67916: CALL_OW 254
67920: ST_TO_ADDR
// r := 4 ;
67921: LD_ADDR_VAR 0 9
67925: PUSH
67926: LD_INT 4
67928: ST_TO_ADDR
// for i := 1 to 5 do
67929: LD_ADDR_VAR 0 10
67933: PUSH
67934: DOUBLE
67935: LD_INT 1
67937: DEC
67938: ST_TO_ADDR
67939: LD_INT 5
67941: PUSH
67942: FOR_TO
67943: IFFALSE 68100
// begin _x := ShiftX ( x , d , r + i ) ;
67945: LD_ADDR_VAR 0 5
67949: PUSH
67950: LD_VAR 0 4
67954: PPUSH
67955: LD_VAR 0 8
67959: PPUSH
67960: LD_VAR 0 9
67964: PUSH
67965: LD_VAR 0 10
67969: PLUS
67970: PPUSH
67971: CALL_OW 272
67975: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67976: LD_ADDR_VAR 0 7
67980: PUSH
67981: LD_VAR 0 6
67985: PPUSH
67986: LD_VAR 0 8
67990: PPUSH
67991: LD_VAR 0 9
67995: PUSH
67996: LD_VAR 0 10
68000: PLUS
68001: PPUSH
68002: CALL_OW 273
68006: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68007: LD_VAR 0 5
68011: PPUSH
68012: LD_VAR 0 7
68016: PPUSH
68017: CALL_OW 488
68021: PUSH
68022: LD_VAR 0 5
68026: PPUSH
68027: LD_VAR 0 7
68031: PPUSH
68032: CALL_OW 428
68036: PPUSH
68037: CALL_OW 247
68041: PUSH
68042: LD_INT 3
68044: PUSH
68045: LD_INT 2
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: IN
68052: NOT
68053: AND
68054: IFFALSE 68098
// begin ComMoveXY ( unit , _x , _y ) ;
68056: LD_VAR 0 1
68060: PPUSH
68061: LD_VAR 0 5
68065: PPUSH
68066: LD_VAR 0 7
68070: PPUSH
68071: CALL_OW 111
// result := [ _x , _y ] ;
68075: LD_ADDR_VAR 0 3
68079: PUSH
68080: LD_VAR 0 5
68084: PUSH
68085: LD_VAR 0 7
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: ST_TO_ADDR
// exit ;
68094: POP
68095: POP
68096: GO 68102
// end ; end ;
68098: GO 67942
68100: POP
68101: POP
// end ;
68102: LD_VAR 0 3
68106: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68107: LD_INT 0
68109: PPUSH
68110: PPUSH
68111: PPUSH
// result := 0 ;
68112: LD_ADDR_VAR 0 3
68116: PUSH
68117: LD_INT 0
68119: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68120: LD_VAR 0 1
68124: PUSH
68125: LD_INT 0
68127: LESS
68128: PUSH
68129: LD_VAR 0 1
68133: PUSH
68134: LD_INT 8
68136: GREATER
68137: OR
68138: PUSH
68139: LD_VAR 0 2
68143: PUSH
68144: LD_INT 0
68146: LESS
68147: OR
68148: PUSH
68149: LD_VAR 0 2
68153: PUSH
68154: LD_INT 8
68156: GREATER
68157: OR
68158: IFFALSE 68162
// exit ;
68160: GO 68237
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68162: LD_ADDR_VAR 0 4
68166: PUSH
68167: LD_INT 22
68169: PUSH
68170: LD_VAR 0 2
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PPUSH
68179: CALL_OW 69
68183: PUSH
68184: FOR_IN
68185: IFFALSE 68235
// begin un := UnitShoot ( i ) ;
68187: LD_ADDR_VAR 0 5
68191: PUSH
68192: LD_VAR 0 4
68196: PPUSH
68197: CALL_OW 504
68201: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68202: LD_VAR 0 5
68206: PPUSH
68207: CALL_OW 255
68211: PUSH
68212: LD_VAR 0 1
68216: EQUAL
68217: IFFALSE 68233
// begin result := un ;
68219: LD_ADDR_VAR 0 3
68223: PUSH
68224: LD_VAR 0 5
68228: ST_TO_ADDR
// exit ;
68229: POP
68230: POP
68231: GO 68237
// end ; end ;
68233: GO 68184
68235: POP
68236: POP
// end ;
68237: LD_VAR 0 3
68241: RET
// export function GetCargoBay ( units ) ; begin
68242: LD_INT 0
68244: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68245: LD_ADDR_VAR 0 2
68249: PUSH
68250: LD_VAR 0 1
68254: PPUSH
68255: LD_INT 2
68257: PUSH
68258: LD_INT 34
68260: PUSH
68261: LD_INT 12
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 34
68270: PUSH
68271: LD_INT 51
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 34
68280: PUSH
68281: LD_INT 32
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 34
68290: PUSH
68291: LD_INT 89
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: PPUSH
68305: CALL_OW 72
68309: ST_TO_ADDR
// end ;
68310: LD_VAR 0 2
68314: RET
// export function Negate ( value ) ; begin
68315: LD_INT 0
68317: PPUSH
// result := not value ;
68318: LD_ADDR_VAR 0 2
68322: PUSH
68323: LD_VAR 0 1
68327: NOT
68328: ST_TO_ADDR
// end ;
68329: LD_VAR 0 2
68333: RET
// export function Inc ( value ) ; begin
68334: LD_INT 0
68336: PPUSH
// result := value + 1 ;
68337: LD_ADDR_VAR 0 2
68341: PUSH
68342: LD_VAR 0 1
68346: PUSH
68347: LD_INT 1
68349: PLUS
68350: ST_TO_ADDR
// end ;
68351: LD_VAR 0 2
68355: RET
// export function Dec ( value ) ; begin
68356: LD_INT 0
68358: PPUSH
// result := value - 1 ;
68359: LD_ADDR_VAR 0 2
68363: PUSH
68364: LD_VAR 0 1
68368: PUSH
68369: LD_INT 1
68371: MINUS
68372: ST_TO_ADDR
// end ;
68373: LD_VAR 0 2
68377: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68378: LD_INT 0
68380: PPUSH
68381: PPUSH
68382: PPUSH
68383: PPUSH
68384: PPUSH
68385: PPUSH
68386: PPUSH
68387: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68388: LD_VAR 0 1
68392: PPUSH
68393: LD_VAR 0 2
68397: PPUSH
68398: CALL_OW 488
68402: NOT
68403: PUSH
68404: LD_VAR 0 3
68408: PPUSH
68409: LD_VAR 0 4
68413: PPUSH
68414: CALL_OW 488
68418: NOT
68419: OR
68420: IFFALSE 68433
// begin result := - 1 ;
68422: LD_ADDR_VAR 0 5
68426: PUSH
68427: LD_INT 1
68429: NEG
68430: ST_TO_ADDR
// exit ;
68431: GO 68668
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68433: LD_ADDR_VAR 0 12
68437: PUSH
68438: LD_VAR 0 1
68442: PPUSH
68443: LD_VAR 0 2
68447: PPUSH
68448: LD_VAR 0 3
68452: PPUSH
68453: LD_VAR 0 4
68457: PPUSH
68458: CALL 67518 0 4
68462: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68463: LD_ADDR_VAR 0 11
68467: PUSH
68468: LD_VAR 0 1
68472: PPUSH
68473: LD_VAR 0 2
68477: PPUSH
68478: LD_VAR 0 12
68482: PUSH
68483: LD_INT 1
68485: ARRAY
68486: PPUSH
68487: LD_VAR 0 12
68491: PUSH
68492: LD_INT 2
68494: ARRAY
68495: PPUSH
68496: CALL_OW 298
68500: ST_TO_ADDR
// distance := 9999 ;
68501: LD_ADDR_VAR 0 10
68505: PUSH
68506: LD_INT 9999
68508: ST_TO_ADDR
// for i := 0 to 5 do
68509: LD_ADDR_VAR 0 6
68513: PUSH
68514: DOUBLE
68515: LD_INT 0
68517: DEC
68518: ST_TO_ADDR
68519: LD_INT 5
68521: PUSH
68522: FOR_TO
68523: IFFALSE 68666
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68525: LD_ADDR_VAR 0 7
68529: PUSH
68530: LD_VAR 0 1
68534: PPUSH
68535: LD_VAR 0 6
68539: PPUSH
68540: LD_VAR 0 11
68544: PPUSH
68545: CALL_OW 272
68549: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68550: LD_ADDR_VAR 0 8
68554: PUSH
68555: LD_VAR 0 2
68559: PPUSH
68560: LD_VAR 0 6
68564: PPUSH
68565: LD_VAR 0 11
68569: PPUSH
68570: CALL_OW 273
68574: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68575: LD_VAR 0 7
68579: PPUSH
68580: LD_VAR 0 8
68584: PPUSH
68585: CALL_OW 488
68589: NOT
68590: IFFALSE 68594
// continue ;
68592: GO 68522
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68594: LD_ADDR_VAR 0 9
68598: PUSH
68599: LD_VAR 0 12
68603: PUSH
68604: LD_INT 1
68606: ARRAY
68607: PPUSH
68608: LD_VAR 0 12
68612: PUSH
68613: LD_INT 2
68615: ARRAY
68616: PPUSH
68617: LD_VAR 0 7
68621: PPUSH
68622: LD_VAR 0 8
68626: PPUSH
68627: CALL_OW 298
68631: ST_TO_ADDR
// if tmp < distance then
68632: LD_VAR 0 9
68636: PUSH
68637: LD_VAR 0 10
68641: LESS
68642: IFFALSE 68664
// begin result := i ;
68644: LD_ADDR_VAR 0 5
68648: PUSH
68649: LD_VAR 0 6
68653: ST_TO_ADDR
// distance := tmp ;
68654: LD_ADDR_VAR 0 10
68658: PUSH
68659: LD_VAR 0 9
68663: ST_TO_ADDR
// end ; end ;
68664: GO 68522
68666: POP
68667: POP
// end ;
68668: LD_VAR 0 5
68672: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68673: LD_INT 0
68675: PPUSH
68676: PPUSH
// if not driver or not IsInUnit ( driver ) then
68677: LD_VAR 0 1
68681: NOT
68682: PUSH
68683: LD_VAR 0 1
68687: PPUSH
68688: CALL_OW 310
68692: NOT
68693: OR
68694: IFFALSE 68698
// exit ;
68696: GO 68788
// vehicle := IsInUnit ( driver ) ;
68698: LD_ADDR_VAR 0 3
68702: PUSH
68703: LD_VAR 0 1
68707: PPUSH
68708: CALL_OW 310
68712: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68713: LD_VAR 0 1
68717: PPUSH
68718: LD_STRING \
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: LD_INT 0
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: PUSH
68748: LD_STRING E
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: LD_VAR 0 3
68761: PUSH
68762: LD_INT 0
68764: PUSH
68765: LD_INT 0
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PPUSH
68784: CALL_OW 446
// end ;
68788: LD_VAR 0 2
68792: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68793: LD_INT 0
68795: PPUSH
68796: PPUSH
// if not driver or not IsInUnit ( driver ) then
68797: LD_VAR 0 1
68801: NOT
68802: PUSH
68803: LD_VAR 0 1
68807: PPUSH
68808: CALL_OW 310
68812: NOT
68813: OR
68814: IFFALSE 68818
// exit ;
68816: GO 68908
// vehicle := IsInUnit ( driver ) ;
68818: LD_ADDR_VAR 0 3
68822: PUSH
68823: LD_VAR 0 1
68827: PPUSH
68828: CALL_OW 310
68832: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68833: LD_VAR 0 1
68837: PPUSH
68838: LD_STRING \
68840: PUSH
68841: LD_INT 0
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: LD_INT 0
68855: PUSH
68856: LD_INT 0
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: PUSH
68868: LD_STRING E
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: LD_VAR 0 3
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: LD_INT 0
68887: PUSH
68888: LD_INT 0
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PPUSH
68904: CALL_OW 447
// end ;
68908: LD_VAR 0 2
68912: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68913: LD_INT 0
68915: PPUSH
68916: PPUSH
68917: PPUSH
// tmp := [ ] ;
68918: LD_ADDR_VAR 0 5
68922: PUSH
68923: EMPTY
68924: ST_TO_ADDR
// for i in units do
68925: LD_ADDR_VAR 0 4
68929: PUSH
68930: LD_VAR 0 1
68934: PUSH
68935: FOR_IN
68936: IFFALSE 68974
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68938: LD_ADDR_VAR 0 5
68942: PUSH
68943: LD_VAR 0 5
68947: PPUSH
68948: LD_VAR 0 5
68952: PUSH
68953: LD_INT 1
68955: PLUS
68956: PPUSH
68957: LD_VAR 0 4
68961: PPUSH
68962: CALL_OW 256
68966: PPUSH
68967: CALL_OW 2
68971: ST_TO_ADDR
68972: GO 68935
68974: POP
68975: POP
// if not tmp then
68976: LD_VAR 0 5
68980: NOT
68981: IFFALSE 68985
// exit ;
68983: GO 69033
// if asc then
68985: LD_VAR 0 2
68989: IFFALSE 69013
// result := SortListByListAsc ( units , tmp ) else
68991: LD_ADDR_VAR 0 3
68995: PUSH
68996: LD_VAR 0 1
69000: PPUSH
69001: LD_VAR 0 5
69005: PPUSH
69006: CALL_OW 76
69010: ST_TO_ADDR
69011: GO 69033
// result := SortListByListDesc ( units , tmp ) ;
69013: LD_ADDR_VAR 0 3
69017: PUSH
69018: LD_VAR 0 1
69022: PPUSH
69023: LD_VAR 0 5
69027: PPUSH
69028: CALL_OW 77
69032: ST_TO_ADDR
// end ;
69033: LD_VAR 0 3
69037: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69038: LD_INT 0
69040: PPUSH
69041: PPUSH
// task := GetTaskList ( mech ) ;
69042: LD_ADDR_VAR 0 4
69046: PUSH
69047: LD_VAR 0 1
69051: PPUSH
69052: CALL_OW 437
69056: ST_TO_ADDR
// if not task then
69057: LD_VAR 0 4
69061: NOT
69062: IFFALSE 69066
// exit ;
69064: GO 69108
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69066: LD_ADDR_VAR 0 3
69070: PUSH
69071: LD_VAR 0 4
69075: PUSH
69076: LD_INT 1
69078: ARRAY
69079: PUSH
69080: LD_INT 1
69082: ARRAY
69083: PUSH
69084: LD_STRING r
69086: EQUAL
69087: PUSH
69088: LD_VAR 0 4
69092: PUSH
69093: LD_INT 1
69095: ARRAY
69096: PUSH
69097: LD_INT 4
69099: ARRAY
69100: PUSH
69101: LD_VAR 0 2
69105: EQUAL
69106: AND
69107: ST_TO_ADDR
// end ;
69108: LD_VAR 0 3
69112: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69113: LD_INT 0
69115: PPUSH
// SetDir ( unit , d ) ;
69116: LD_VAR 0 1
69120: PPUSH
69121: LD_VAR 0 4
69125: PPUSH
69126: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69130: LD_VAR 0 1
69134: PPUSH
69135: LD_VAR 0 2
69139: PPUSH
69140: LD_VAR 0 3
69144: PPUSH
69145: LD_VAR 0 5
69149: PPUSH
69150: CALL_OW 48
// end ;
69154: LD_VAR 0 6
69158: RET
// export function ToNaturalNumber ( number ) ; begin
69159: LD_INT 0
69161: PPUSH
// result := number div 1 ;
69162: LD_ADDR_VAR 0 2
69166: PUSH
69167: LD_VAR 0 1
69171: PUSH
69172: LD_INT 1
69174: DIV
69175: ST_TO_ADDR
// if number < 0 then
69176: LD_VAR 0 1
69180: PUSH
69181: LD_INT 0
69183: LESS
69184: IFFALSE 69194
// result := 0 ;
69186: LD_ADDR_VAR 0 2
69190: PUSH
69191: LD_INT 0
69193: ST_TO_ADDR
// end ;
69194: LD_VAR 0 2
69198: RET
// export function SortByClass ( units , class ) ; var un ; begin
69199: LD_INT 0
69201: PPUSH
69202: PPUSH
// if not units or not class then
69203: LD_VAR 0 1
69207: NOT
69208: PUSH
69209: LD_VAR 0 2
69213: NOT
69214: OR
69215: IFFALSE 69219
// exit ;
69217: GO 69314
// result := [ ] ;
69219: LD_ADDR_VAR 0 3
69223: PUSH
69224: EMPTY
69225: ST_TO_ADDR
// for un in units do
69226: LD_ADDR_VAR 0 4
69230: PUSH
69231: LD_VAR 0 1
69235: PUSH
69236: FOR_IN
69237: IFFALSE 69312
// if GetClass ( un ) = class then
69239: LD_VAR 0 4
69243: PPUSH
69244: CALL_OW 257
69248: PUSH
69249: LD_VAR 0 2
69253: EQUAL
69254: IFFALSE 69281
// result := Insert ( result , 1 , un ) else
69256: LD_ADDR_VAR 0 3
69260: PUSH
69261: LD_VAR 0 3
69265: PPUSH
69266: LD_INT 1
69268: PPUSH
69269: LD_VAR 0 4
69273: PPUSH
69274: CALL_OW 2
69278: ST_TO_ADDR
69279: GO 69310
// result := Replace ( result , result + 1 , un ) ;
69281: LD_ADDR_VAR 0 3
69285: PUSH
69286: LD_VAR 0 3
69290: PPUSH
69291: LD_VAR 0 3
69295: PUSH
69296: LD_INT 1
69298: PLUS
69299: PPUSH
69300: LD_VAR 0 4
69304: PPUSH
69305: CALL_OW 1
69309: ST_TO_ADDR
69310: GO 69236
69312: POP
69313: POP
// end ;
69314: LD_VAR 0 3
69318: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69319: LD_INT 0
69321: PPUSH
69322: PPUSH
69323: PPUSH
69324: PPUSH
69325: PPUSH
69326: PPUSH
69327: PPUSH
// result := [ ] ;
69328: LD_ADDR_VAR 0 4
69332: PUSH
69333: EMPTY
69334: ST_TO_ADDR
// if x - r < 0 then
69335: LD_VAR 0 1
69339: PUSH
69340: LD_VAR 0 3
69344: MINUS
69345: PUSH
69346: LD_INT 0
69348: LESS
69349: IFFALSE 69361
// min_x := 0 else
69351: LD_ADDR_VAR 0 8
69355: PUSH
69356: LD_INT 0
69358: ST_TO_ADDR
69359: GO 69377
// min_x := x - r ;
69361: LD_ADDR_VAR 0 8
69365: PUSH
69366: LD_VAR 0 1
69370: PUSH
69371: LD_VAR 0 3
69375: MINUS
69376: ST_TO_ADDR
// if y - r < 0 then
69377: LD_VAR 0 2
69381: PUSH
69382: LD_VAR 0 3
69386: MINUS
69387: PUSH
69388: LD_INT 0
69390: LESS
69391: IFFALSE 69403
// min_y := 0 else
69393: LD_ADDR_VAR 0 7
69397: PUSH
69398: LD_INT 0
69400: ST_TO_ADDR
69401: GO 69419
// min_y := y - r ;
69403: LD_ADDR_VAR 0 7
69407: PUSH
69408: LD_VAR 0 2
69412: PUSH
69413: LD_VAR 0 3
69417: MINUS
69418: ST_TO_ADDR
// max_x := x + r ;
69419: LD_ADDR_VAR 0 9
69423: PUSH
69424: LD_VAR 0 1
69428: PUSH
69429: LD_VAR 0 3
69433: PLUS
69434: ST_TO_ADDR
// max_y := y + r ;
69435: LD_ADDR_VAR 0 10
69439: PUSH
69440: LD_VAR 0 2
69444: PUSH
69445: LD_VAR 0 3
69449: PLUS
69450: ST_TO_ADDR
// for _x = min_x to max_x do
69451: LD_ADDR_VAR 0 5
69455: PUSH
69456: DOUBLE
69457: LD_VAR 0 8
69461: DEC
69462: ST_TO_ADDR
69463: LD_VAR 0 9
69467: PUSH
69468: FOR_TO
69469: IFFALSE 69570
// for _y = min_y to max_y do
69471: LD_ADDR_VAR 0 6
69475: PUSH
69476: DOUBLE
69477: LD_VAR 0 7
69481: DEC
69482: ST_TO_ADDR
69483: LD_VAR 0 10
69487: PUSH
69488: FOR_TO
69489: IFFALSE 69566
// begin if not ValidHex ( _x , _y ) then
69491: LD_VAR 0 5
69495: PPUSH
69496: LD_VAR 0 6
69500: PPUSH
69501: CALL_OW 488
69505: NOT
69506: IFFALSE 69510
// continue ;
69508: GO 69488
// if GetResourceTypeXY ( _x , _y ) then
69510: LD_VAR 0 5
69514: PPUSH
69515: LD_VAR 0 6
69519: PPUSH
69520: CALL_OW 283
69524: IFFALSE 69564
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69526: LD_ADDR_VAR 0 4
69530: PUSH
69531: LD_VAR 0 4
69535: PPUSH
69536: LD_VAR 0 4
69540: PUSH
69541: LD_INT 1
69543: PLUS
69544: PPUSH
69545: LD_VAR 0 5
69549: PUSH
69550: LD_VAR 0 6
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PPUSH
69559: CALL_OW 1
69563: ST_TO_ADDR
// end ;
69564: GO 69488
69566: POP
69567: POP
69568: GO 69468
69570: POP
69571: POP
// end ;
69572: LD_VAR 0 4
69576: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69577: LD_INT 0
69579: PPUSH
69580: PPUSH
69581: PPUSH
69582: PPUSH
69583: PPUSH
69584: PPUSH
69585: PPUSH
69586: PPUSH
// if not units then
69587: LD_VAR 0 1
69591: NOT
69592: IFFALSE 69596
// exit ;
69594: GO 70120
// result := UnitFilter ( units , [ f_ok ] ) ;
69596: LD_ADDR_VAR 0 3
69600: PUSH
69601: LD_VAR 0 1
69605: PPUSH
69606: LD_INT 50
69608: PUSH
69609: EMPTY
69610: LIST
69611: PPUSH
69612: CALL_OW 72
69616: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69617: LD_ADDR_VAR 0 8
69621: PUSH
69622: LD_VAR 0 1
69626: PUSH
69627: LD_INT 1
69629: ARRAY
69630: PPUSH
69631: CALL_OW 255
69635: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69636: LD_ADDR_VAR 0 10
69640: PUSH
69641: LD_INT 29
69643: PUSH
69644: LD_INT 91
69646: PUSH
69647: LD_INT 49
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: LIST
69654: ST_TO_ADDR
// if not result then
69655: LD_VAR 0 3
69659: NOT
69660: IFFALSE 69664
// exit ;
69662: GO 70120
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69664: LD_ADDR_VAR 0 5
69668: PUSH
69669: LD_INT 81
69671: PUSH
69672: LD_VAR 0 8
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PPUSH
69681: CALL_OW 69
69685: ST_TO_ADDR
// for i in result do
69686: LD_ADDR_VAR 0 4
69690: PUSH
69691: LD_VAR 0 3
69695: PUSH
69696: FOR_IN
69697: IFFALSE 70118
// begin tag := GetTag ( i ) + 1 ;
69699: LD_ADDR_VAR 0 9
69703: PUSH
69704: LD_VAR 0 4
69708: PPUSH
69709: CALL_OW 110
69713: PUSH
69714: LD_INT 1
69716: PLUS
69717: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69718: LD_ADDR_VAR 0 7
69722: PUSH
69723: LD_VAR 0 4
69727: PPUSH
69728: CALL_OW 250
69732: PPUSH
69733: LD_VAR 0 4
69737: PPUSH
69738: CALL_OW 251
69742: PPUSH
69743: LD_INT 6
69745: PPUSH
69746: CALL 69319 0 3
69750: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69751: LD_VAR 0 4
69755: PPUSH
69756: CALL_OW 247
69760: PUSH
69761: LD_INT 2
69763: EQUAL
69764: PUSH
69765: LD_VAR 0 7
69769: AND
69770: PUSH
69771: LD_VAR 0 4
69775: PPUSH
69776: CALL_OW 264
69780: PUSH
69781: LD_VAR 0 10
69785: IN
69786: NOT
69787: AND
69788: IFFALSE 69827
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69790: LD_VAR 0 4
69794: PPUSH
69795: LD_VAR 0 7
69799: PUSH
69800: LD_INT 1
69802: ARRAY
69803: PUSH
69804: LD_INT 1
69806: ARRAY
69807: PPUSH
69808: LD_VAR 0 7
69812: PUSH
69813: LD_INT 1
69815: ARRAY
69816: PUSH
69817: LD_INT 2
69819: ARRAY
69820: PPUSH
69821: CALL_OW 116
69825: GO 70116
// if path > tag then
69827: LD_VAR 0 2
69831: PUSH
69832: LD_VAR 0 9
69836: GREATER
69837: IFFALSE 70045
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69839: LD_ADDR_VAR 0 6
69843: PUSH
69844: LD_VAR 0 5
69848: PPUSH
69849: LD_INT 91
69851: PUSH
69852: LD_VAR 0 4
69856: PUSH
69857: LD_INT 8
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: LIST
69864: PPUSH
69865: CALL_OW 72
69869: ST_TO_ADDR
// if nearEnemy then
69870: LD_VAR 0 6
69874: IFFALSE 69943
// begin if GetWeapon ( i ) = ru_time_lapser then
69876: LD_VAR 0 4
69880: PPUSH
69881: CALL_OW 264
69885: PUSH
69886: LD_INT 49
69888: EQUAL
69889: IFFALSE 69917
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69891: LD_VAR 0 4
69895: PPUSH
69896: LD_VAR 0 6
69900: PPUSH
69901: LD_VAR 0 4
69905: PPUSH
69906: CALL_OW 74
69910: PPUSH
69911: CALL_OW 112
69915: GO 69941
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69917: LD_VAR 0 4
69921: PPUSH
69922: LD_VAR 0 6
69926: PPUSH
69927: LD_VAR 0 4
69931: PPUSH
69932: CALL_OW 74
69936: PPUSH
69937: CALL 71045 0 2
// end else
69941: GO 70043
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69943: LD_VAR 0 4
69947: PPUSH
69948: LD_VAR 0 2
69952: PUSH
69953: LD_VAR 0 9
69957: ARRAY
69958: PUSH
69959: LD_INT 1
69961: ARRAY
69962: PPUSH
69963: LD_VAR 0 2
69967: PUSH
69968: LD_VAR 0 9
69972: ARRAY
69973: PUSH
69974: LD_INT 2
69976: ARRAY
69977: PPUSH
69978: CALL_OW 297
69982: PUSH
69983: LD_INT 6
69985: GREATER
69986: IFFALSE 70029
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69988: LD_VAR 0 4
69992: PPUSH
69993: LD_VAR 0 2
69997: PUSH
69998: LD_VAR 0 9
70002: ARRAY
70003: PUSH
70004: LD_INT 1
70006: ARRAY
70007: PPUSH
70008: LD_VAR 0 2
70012: PUSH
70013: LD_VAR 0 9
70017: ARRAY
70018: PUSH
70019: LD_INT 2
70021: ARRAY
70022: PPUSH
70023: CALL_OW 114
70027: GO 70043
// SetTag ( i , tag ) ;
70029: LD_VAR 0 4
70033: PPUSH
70034: LD_VAR 0 9
70038: PPUSH
70039: CALL_OW 109
// end else
70043: GO 70116
// if enemy then
70045: LD_VAR 0 5
70049: IFFALSE 70116
// begin if GetWeapon ( i ) = ru_time_lapser then
70051: LD_VAR 0 4
70055: PPUSH
70056: CALL_OW 264
70060: PUSH
70061: LD_INT 49
70063: EQUAL
70064: IFFALSE 70092
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70066: LD_VAR 0 4
70070: PPUSH
70071: LD_VAR 0 5
70075: PPUSH
70076: LD_VAR 0 4
70080: PPUSH
70081: CALL_OW 74
70085: PPUSH
70086: CALL_OW 112
70090: GO 70116
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70092: LD_VAR 0 4
70096: PPUSH
70097: LD_VAR 0 5
70101: PPUSH
70102: LD_VAR 0 4
70106: PPUSH
70107: CALL_OW 74
70111: PPUSH
70112: CALL 71045 0 2
// end ; end ;
70116: GO 69696
70118: POP
70119: POP
// end ;
70120: LD_VAR 0 3
70124: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70125: LD_INT 0
70127: PPUSH
70128: PPUSH
70129: PPUSH
// if not unit or IsInUnit ( unit ) then
70130: LD_VAR 0 1
70134: NOT
70135: PUSH
70136: LD_VAR 0 1
70140: PPUSH
70141: CALL_OW 310
70145: OR
70146: IFFALSE 70150
// exit ;
70148: GO 70241
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70150: LD_ADDR_VAR 0 4
70154: PUSH
70155: LD_VAR 0 1
70159: PPUSH
70160: CALL_OW 250
70164: PPUSH
70165: LD_VAR 0 2
70169: PPUSH
70170: LD_INT 1
70172: PPUSH
70173: CALL_OW 272
70177: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70178: LD_ADDR_VAR 0 5
70182: PUSH
70183: LD_VAR 0 1
70187: PPUSH
70188: CALL_OW 251
70192: PPUSH
70193: LD_VAR 0 2
70197: PPUSH
70198: LD_INT 1
70200: PPUSH
70201: CALL_OW 273
70205: ST_TO_ADDR
// if ValidHex ( x , y ) then
70206: LD_VAR 0 4
70210: PPUSH
70211: LD_VAR 0 5
70215: PPUSH
70216: CALL_OW 488
70220: IFFALSE 70241
// ComTurnXY ( unit , x , y ) ;
70222: LD_VAR 0 1
70226: PPUSH
70227: LD_VAR 0 4
70231: PPUSH
70232: LD_VAR 0 5
70236: PPUSH
70237: CALL_OW 118
// end ;
70241: LD_VAR 0 3
70245: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70246: LD_INT 0
70248: PPUSH
70249: PPUSH
// result := false ;
70250: LD_ADDR_VAR 0 3
70254: PUSH
70255: LD_INT 0
70257: ST_TO_ADDR
// if not units then
70258: LD_VAR 0 2
70262: NOT
70263: IFFALSE 70267
// exit ;
70265: GO 70312
// for i in units do
70267: LD_ADDR_VAR 0 4
70271: PUSH
70272: LD_VAR 0 2
70276: PUSH
70277: FOR_IN
70278: IFFALSE 70310
// if See ( side , i ) then
70280: LD_VAR 0 1
70284: PPUSH
70285: LD_VAR 0 4
70289: PPUSH
70290: CALL_OW 292
70294: IFFALSE 70308
// begin result := true ;
70296: LD_ADDR_VAR 0 3
70300: PUSH
70301: LD_INT 1
70303: ST_TO_ADDR
// exit ;
70304: POP
70305: POP
70306: GO 70312
// end ;
70308: GO 70277
70310: POP
70311: POP
// end ;
70312: LD_VAR 0 3
70316: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70317: LD_INT 0
70319: PPUSH
70320: PPUSH
70321: PPUSH
70322: PPUSH
// if not unit or not points then
70323: LD_VAR 0 1
70327: NOT
70328: PUSH
70329: LD_VAR 0 2
70333: NOT
70334: OR
70335: IFFALSE 70339
// exit ;
70337: GO 70429
// dist := 99999 ;
70339: LD_ADDR_VAR 0 5
70343: PUSH
70344: LD_INT 99999
70346: ST_TO_ADDR
// for i in points do
70347: LD_ADDR_VAR 0 4
70351: PUSH
70352: LD_VAR 0 2
70356: PUSH
70357: FOR_IN
70358: IFFALSE 70427
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70360: LD_ADDR_VAR 0 6
70364: PUSH
70365: LD_VAR 0 1
70369: PPUSH
70370: LD_VAR 0 4
70374: PUSH
70375: LD_INT 1
70377: ARRAY
70378: PPUSH
70379: LD_VAR 0 4
70383: PUSH
70384: LD_INT 2
70386: ARRAY
70387: PPUSH
70388: CALL_OW 297
70392: ST_TO_ADDR
// if tmpDist < dist then
70393: LD_VAR 0 6
70397: PUSH
70398: LD_VAR 0 5
70402: LESS
70403: IFFALSE 70425
// begin result := i ;
70405: LD_ADDR_VAR 0 3
70409: PUSH
70410: LD_VAR 0 4
70414: ST_TO_ADDR
// dist := tmpDist ;
70415: LD_ADDR_VAR 0 5
70419: PUSH
70420: LD_VAR 0 6
70424: ST_TO_ADDR
// end ; end ;
70425: GO 70357
70427: POP
70428: POP
// end ;
70429: LD_VAR 0 3
70433: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70434: LD_INT 0
70436: PPUSH
// uc_side := side ;
70437: LD_ADDR_OWVAR 20
70441: PUSH
70442: LD_VAR 0 1
70446: ST_TO_ADDR
// uc_nation := 3 ;
70447: LD_ADDR_OWVAR 21
70451: PUSH
70452: LD_INT 3
70454: ST_TO_ADDR
// vc_chassis := 25 ;
70455: LD_ADDR_OWVAR 37
70459: PUSH
70460: LD_INT 25
70462: ST_TO_ADDR
// vc_engine := engine_siberite ;
70463: LD_ADDR_OWVAR 39
70467: PUSH
70468: LD_INT 3
70470: ST_TO_ADDR
// vc_control := control_computer ;
70471: LD_ADDR_OWVAR 38
70475: PUSH
70476: LD_INT 3
70478: ST_TO_ADDR
// vc_weapon := 59 ;
70479: LD_ADDR_OWVAR 40
70483: PUSH
70484: LD_INT 59
70486: ST_TO_ADDR
// result := CreateVehicle ;
70487: LD_ADDR_VAR 0 5
70491: PUSH
70492: CALL_OW 45
70496: ST_TO_ADDR
// SetDir ( result , d ) ;
70497: LD_VAR 0 5
70501: PPUSH
70502: LD_VAR 0 4
70506: PPUSH
70507: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70511: LD_VAR 0 5
70515: PPUSH
70516: LD_VAR 0 2
70520: PPUSH
70521: LD_VAR 0 3
70525: PPUSH
70526: LD_INT 0
70528: PPUSH
70529: CALL_OW 48
// end ;
70533: LD_VAR 0 5
70537: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70538: LD_INT 0
70540: PPUSH
70541: PPUSH
70542: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70543: LD_ADDR_VAR 0 2
70547: PUSH
70548: LD_INT 0
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70566: LD_VAR 0 1
70570: NOT
70571: PUSH
70572: LD_VAR 0 1
70576: PPUSH
70577: CALL_OW 264
70581: PUSH
70582: LD_INT 12
70584: PUSH
70585: LD_INT 51
70587: PUSH
70588: LD_INT 32
70590: PUSH
70591: LD_INT 89
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: IN
70600: NOT
70601: OR
70602: IFFALSE 70606
// exit ;
70604: GO 70704
// for i := 1 to 3 do
70606: LD_ADDR_VAR 0 3
70610: PUSH
70611: DOUBLE
70612: LD_INT 1
70614: DEC
70615: ST_TO_ADDR
70616: LD_INT 3
70618: PUSH
70619: FOR_TO
70620: IFFALSE 70702
// begin tmp := GetCargo ( cargo , i ) ;
70622: LD_ADDR_VAR 0 4
70626: PUSH
70627: LD_VAR 0 1
70631: PPUSH
70632: LD_VAR 0 3
70636: PPUSH
70637: CALL_OW 289
70641: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70642: LD_ADDR_VAR 0 2
70646: PUSH
70647: LD_VAR 0 2
70651: PPUSH
70652: LD_VAR 0 3
70656: PPUSH
70657: LD_VAR 0 4
70661: PPUSH
70662: CALL_OW 1
70666: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70667: LD_ADDR_VAR 0 2
70671: PUSH
70672: LD_VAR 0 2
70676: PPUSH
70677: LD_INT 4
70679: PPUSH
70680: LD_VAR 0 2
70684: PUSH
70685: LD_INT 4
70687: ARRAY
70688: PUSH
70689: LD_VAR 0 4
70693: PLUS
70694: PPUSH
70695: CALL_OW 1
70699: ST_TO_ADDR
// end ;
70700: GO 70619
70702: POP
70703: POP
// end ;
70704: LD_VAR 0 2
70708: RET
// export function Length ( array ) ; begin
70709: LD_INT 0
70711: PPUSH
// result := array + 0 ;
70712: LD_ADDR_VAR 0 2
70716: PUSH
70717: LD_VAR 0 1
70721: PUSH
70722: LD_INT 0
70724: PLUS
70725: ST_TO_ADDR
// end ;
70726: LD_VAR 0 2
70730: RET
// export function PrepareArray ( array ) ; begin
70731: LD_INT 0
70733: PPUSH
// result := array diff 0 ;
70734: LD_ADDR_VAR 0 2
70738: PUSH
70739: LD_VAR 0 1
70743: PUSH
70744: LD_INT 0
70746: DIFF
70747: ST_TO_ADDR
// if not result [ 1 ] then
70748: LD_VAR 0 2
70752: PUSH
70753: LD_INT 1
70755: ARRAY
70756: NOT
70757: IFFALSE 70777
// result := Delete ( result , 1 ) ;
70759: LD_ADDR_VAR 0 2
70763: PUSH
70764: LD_VAR 0 2
70768: PPUSH
70769: LD_INT 1
70771: PPUSH
70772: CALL_OW 3
70776: ST_TO_ADDR
// end ;
70777: LD_VAR 0 2
70781: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70782: LD_INT 0
70784: PPUSH
70785: PPUSH
70786: PPUSH
70787: PPUSH
// sibRocketRange := 25 ;
70788: LD_ADDR_VAR 0 6
70792: PUSH
70793: LD_INT 25
70795: ST_TO_ADDR
// result := false ;
70796: LD_ADDR_VAR 0 4
70800: PUSH
70801: LD_INT 0
70803: ST_TO_ADDR
// for i := 0 to 5 do
70804: LD_ADDR_VAR 0 5
70808: PUSH
70809: DOUBLE
70810: LD_INT 0
70812: DEC
70813: ST_TO_ADDR
70814: LD_INT 5
70816: PUSH
70817: FOR_TO
70818: IFFALSE 70885
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70820: LD_VAR 0 1
70824: PPUSH
70825: LD_VAR 0 5
70829: PPUSH
70830: LD_VAR 0 6
70834: PPUSH
70835: CALL_OW 272
70839: PPUSH
70840: LD_VAR 0 2
70844: PPUSH
70845: LD_VAR 0 5
70849: PPUSH
70850: LD_VAR 0 6
70854: PPUSH
70855: CALL_OW 273
70859: PPUSH
70860: LD_VAR 0 3
70864: PPUSH
70865: CALL_OW 309
70869: IFFALSE 70883
// begin result := true ;
70871: LD_ADDR_VAR 0 4
70875: PUSH
70876: LD_INT 1
70878: ST_TO_ADDR
// exit ;
70879: POP
70880: POP
70881: GO 70887
// end ;
70883: GO 70817
70885: POP
70886: POP
// end ;
70887: LD_VAR 0 4
70891: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70892: LD_INT 0
70894: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70895: LD_VAR 0 1
70899: PPUSH
70900: LD_VAR 0 2
70904: PPUSH
70905: LD_INT 0
70907: PPUSH
70908: LD_INT 0
70910: PPUSH
70911: LD_INT 1
70913: PPUSH
70914: LD_INT 0
70916: PPUSH
70917: CALL_OW 587
// end ;
70921: LD_VAR 0 3
70925: RET
// export function CenterOnNow ( unit ) ; begin
70926: LD_INT 0
70928: PPUSH
// result := IsInUnit ( unit ) ;
70929: LD_ADDR_VAR 0 2
70933: PUSH
70934: LD_VAR 0 1
70938: PPUSH
70939: CALL_OW 310
70943: ST_TO_ADDR
// if not result then
70944: LD_VAR 0 2
70948: NOT
70949: IFFALSE 70961
// result := unit ;
70951: LD_ADDR_VAR 0 2
70955: PUSH
70956: LD_VAR 0 1
70960: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70961: LD_VAR 0 1
70965: PPUSH
70966: CALL_OW 87
// end ;
70970: LD_VAR 0 2
70974: RET
// export function ComMoveHex ( unit , hex ) ; begin
70975: LD_INT 0
70977: PPUSH
// if not hex then
70978: LD_VAR 0 2
70982: NOT
70983: IFFALSE 70987
// exit ;
70985: GO 71040
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70987: LD_VAR 0 2
70991: PUSH
70992: LD_INT 1
70994: ARRAY
70995: PPUSH
70996: LD_VAR 0 2
71000: PUSH
71001: LD_INT 2
71003: ARRAY
71004: PPUSH
71005: CALL_OW 428
71009: IFFALSE 71013
// exit ;
71011: GO 71040
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71013: LD_VAR 0 1
71017: PPUSH
71018: LD_VAR 0 2
71022: PUSH
71023: LD_INT 1
71025: ARRAY
71026: PPUSH
71027: LD_VAR 0 2
71031: PUSH
71032: LD_INT 2
71034: ARRAY
71035: PPUSH
71036: CALL_OW 111
// end ;
71040: LD_VAR 0 3
71044: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71045: LD_INT 0
71047: PPUSH
71048: PPUSH
71049: PPUSH
// if not unit or not enemy then
71050: LD_VAR 0 1
71054: NOT
71055: PUSH
71056: LD_VAR 0 2
71060: NOT
71061: OR
71062: IFFALSE 71066
// exit ;
71064: GO 71190
// x := GetX ( enemy ) ;
71066: LD_ADDR_VAR 0 4
71070: PUSH
71071: LD_VAR 0 2
71075: PPUSH
71076: CALL_OW 250
71080: ST_TO_ADDR
// y := GetY ( enemy ) ;
71081: LD_ADDR_VAR 0 5
71085: PUSH
71086: LD_VAR 0 2
71090: PPUSH
71091: CALL_OW 251
71095: ST_TO_ADDR
// if ValidHex ( x , y ) then
71096: LD_VAR 0 4
71100: PPUSH
71101: LD_VAR 0 5
71105: PPUSH
71106: CALL_OW 488
71110: IFFALSE 71190
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
71112: LD_VAR 0 2
71116: PPUSH
71117: CALL_OW 247
71121: PUSH
71122: LD_INT 3
71124: PUSH
71125: LD_INT 2
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: IN
71132: PUSH
71133: LD_VAR 0 1
71137: PPUSH
71138: CALL_OW 255
71142: PPUSH
71143: LD_VAR 0 2
71147: PPUSH
71148: CALL_OW 292
71152: AND
71153: IFFALSE 71171
// ComAttackUnit ( unit , enemy ) else
71155: LD_VAR 0 1
71159: PPUSH
71160: LD_VAR 0 2
71164: PPUSH
71165: CALL_OW 115
71169: GO 71190
// ComAgressiveMove ( unit , x , y ) ;
71171: LD_VAR 0 1
71175: PPUSH
71176: LD_VAR 0 4
71180: PPUSH
71181: LD_VAR 0 5
71185: PPUSH
71186: CALL_OW 114
// end ;
71190: LD_VAR 0 3
71194: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71195: LD_INT 0
71197: PPUSH
71198: PPUSH
71199: PPUSH
// list := AreaToList ( area , 0 ) ;
71200: LD_ADDR_VAR 0 5
71204: PUSH
71205: LD_VAR 0 1
71209: PPUSH
71210: LD_INT 0
71212: PPUSH
71213: CALL_OW 517
71217: ST_TO_ADDR
// if not list then
71218: LD_VAR 0 5
71222: NOT
71223: IFFALSE 71227
// exit ;
71225: GO 71357
// if all then
71227: LD_VAR 0 2
71231: IFFALSE 71319
// begin for i := 1 to list [ 1 ] do
71233: LD_ADDR_VAR 0 4
71237: PUSH
71238: DOUBLE
71239: LD_INT 1
71241: DEC
71242: ST_TO_ADDR
71243: LD_VAR 0 5
71247: PUSH
71248: LD_INT 1
71250: ARRAY
71251: PUSH
71252: FOR_TO
71253: IFFALSE 71315
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71255: LD_ADDR_VAR 0 3
71259: PUSH
71260: LD_VAR 0 3
71264: PPUSH
71265: LD_VAR 0 3
71269: PUSH
71270: LD_INT 1
71272: PLUS
71273: PPUSH
71274: LD_VAR 0 5
71278: PUSH
71279: LD_INT 1
71281: ARRAY
71282: PUSH
71283: LD_VAR 0 4
71287: ARRAY
71288: PUSH
71289: LD_VAR 0 5
71293: PUSH
71294: LD_INT 2
71296: ARRAY
71297: PUSH
71298: LD_VAR 0 4
71302: ARRAY
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PPUSH
71308: CALL_OW 1
71312: ST_TO_ADDR
71313: GO 71252
71315: POP
71316: POP
// exit ;
71317: GO 71357
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71319: LD_ADDR_VAR 0 3
71323: PUSH
71324: LD_VAR 0 5
71328: PUSH
71329: LD_INT 1
71331: ARRAY
71332: PUSH
71333: LD_INT 1
71335: ARRAY
71336: PUSH
71337: LD_VAR 0 5
71341: PUSH
71342: LD_INT 2
71344: ARRAY
71345: PUSH
71346: LD_INT 1
71348: ARRAY
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: EMPTY
71355: LIST
71356: ST_TO_ADDR
// end ;
71357: LD_VAR 0 3
71361: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71362: LD_INT 0
71364: PPUSH
71365: PPUSH
// list := AreaToList ( area , 0 ) ;
71366: LD_ADDR_VAR 0 4
71370: PUSH
71371: LD_VAR 0 1
71375: PPUSH
71376: LD_INT 0
71378: PPUSH
71379: CALL_OW 517
71383: ST_TO_ADDR
// if not list then
71384: LD_VAR 0 4
71388: NOT
71389: IFFALSE 71393
// exit ;
71391: GO 71434
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71393: LD_ADDR_VAR 0 3
71397: PUSH
71398: LD_VAR 0 4
71402: PUSH
71403: LD_INT 1
71405: ARRAY
71406: PUSH
71407: LD_INT 1
71409: ARRAY
71410: PUSH
71411: LD_VAR 0 4
71415: PUSH
71416: LD_INT 2
71418: ARRAY
71419: PUSH
71420: LD_INT 1
71422: ARRAY
71423: PUSH
71424: LD_VAR 0 2
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: LIST
71433: ST_TO_ADDR
// end ;
71434: LD_VAR 0 3
71438: RET
// export function First ( array ) ; begin
71439: LD_INT 0
71441: PPUSH
// if not array then
71442: LD_VAR 0 1
71446: NOT
71447: IFFALSE 71451
// exit ;
71449: GO 71465
// result := array [ 1 ] ;
71451: LD_ADDR_VAR 0 2
71455: PUSH
71456: LD_VAR 0 1
71460: PUSH
71461: LD_INT 1
71463: ARRAY
71464: ST_TO_ADDR
// end ;
71465: LD_VAR 0 2
71469: RET
// export function Last ( array ) ; begin
71470: LD_INT 0
71472: PPUSH
// if not array then
71473: LD_VAR 0 1
71477: NOT
71478: IFFALSE 71482
// exit ;
71480: GO 71498
// result := array [ array ] ;
71482: LD_ADDR_VAR 0 2
71486: PUSH
71487: LD_VAR 0 1
71491: PUSH
71492: LD_VAR 0 1
71496: ARRAY
71497: ST_TO_ADDR
// end ; end_of_file
71498: LD_VAR 0 2
71502: RET
// export globalGameSaveCounter ; every 0 0$1 do
71503: GO 71505
71505: DISABLE
// begin enable ;
71506: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
71507: LD_STRING updateTimer(
71509: PUSH
71510: LD_OWVAR 1
71514: STR
71515: PUSH
71516: LD_STRING );
71518: STR
71519: PPUSH
71520: CALL_OW 559
// end ;
71524: END
// every 0 0$1 do
71525: GO 71527
71527: DISABLE
// begin globalGameSaveCounter := 0 ;
71528: LD_ADDR_EXP 74
71532: PUSH
71533: LD_INT 0
71535: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
71536: LD_STRING setGameSaveCounter(0)
71538: PPUSH
71539: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
71543: LD_STRING initStreamRollete();
71545: PPUSH
71546: CALL_OW 559
// InitStreamMode ;
71550: CALL 72876 0 0
// DefineStreamItems ( false ) ;
71554: LD_INT 0
71556: PPUSH
71557: CALL 73340 0 1
// end ;
71561: END
// export function SOS_MapStart ( ) ; begin
71562: LD_INT 0
71564: PPUSH
// if streamModeActive then
71565: LD_EXP 75
71569: IFFALSE 71578
// DefineStreamItems ( true ) ;
71571: LD_INT 1
71573: PPUSH
71574: CALL 73340 0 1
// UpdateLuaVariables ( ) ;
71578: CALL 71595 0 0
// UpdateFactoryWaypoints ( ) ;
71582: CALL 86209 0 0
// UpdateWarehouseGatheringPoints ( ) ;
71586: CALL 86466 0 0
// end ;
71590: LD_VAR 0 1
71594: RET
// function UpdateLuaVariables ( ) ; begin
71595: LD_INT 0
71597: PPUSH
// if globalGameSaveCounter then
71598: LD_EXP 74
71602: IFFALSE 71636
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
71604: LD_ADDR_EXP 74
71608: PUSH
71609: LD_EXP 74
71613: PPUSH
71614: CALL 68334 0 1
71618: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71619: LD_STRING setGameSaveCounter(
71621: PUSH
71622: LD_EXP 74
71626: STR
71627: PUSH
71628: LD_STRING )
71630: STR
71631: PPUSH
71632: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
71636: LD_STRING setGameDifficulty(
71638: PUSH
71639: LD_OWVAR 67
71643: STR
71644: PUSH
71645: LD_STRING )
71647: STR
71648: PPUSH
71649: CALL_OW 559
// end ;
71653: LD_VAR 0 1
71657: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71658: LD_INT 0
71660: PPUSH
// if p2 = stream_mode then
71661: LD_VAR 0 2
71665: PUSH
71666: LD_INT 100
71668: EQUAL
71669: IFFALSE 72672
// begin if not StreamModeActive then
71671: LD_EXP 75
71675: NOT
71676: IFFALSE 71686
// StreamModeActive := true ;
71678: LD_ADDR_EXP 75
71682: PUSH
71683: LD_INT 1
71685: ST_TO_ADDR
// if p3 = 0 then
71686: LD_VAR 0 3
71690: PUSH
71691: LD_INT 0
71693: EQUAL
71694: IFFALSE 71700
// InitStreamMode ;
71696: CALL 72876 0 0
// if p3 = 1 then
71700: LD_VAR 0 3
71704: PUSH
71705: LD_INT 1
71707: EQUAL
71708: IFFALSE 71718
// sRocket := true ;
71710: LD_ADDR_EXP 80
71714: PUSH
71715: LD_INT 1
71717: ST_TO_ADDR
// if p3 = 2 then
71718: LD_VAR 0 3
71722: PUSH
71723: LD_INT 2
71725: EQUAL
71726: IFFALSE 71736
// sSpeed := true ;
71728: LD_ADDR_EXP 79
71732: PUSH
71733: LD_INT 1
71735: ST_TO_ADDR
// if p3 = 3 then
71736: LD_VAR 0 3
71740: PUSH
71741: LD_INT 3
71743: EQUAL
71744: IFFALSE 71754
// sEngine := true ;
71746: LD_ADDR_EXP 81
71750: PUSH
71751: LD_INT 1
71753: ST_TO_ADDR
// if p3 = 4 then
71754: LD_VAR 0 3
71758: PUSH
71759: LD_INT 4
71761: EQUAL
71762: IFFALSE 71772
// sSpec := true ;
71764: LD_ADDR_EXP 78
71768: PUSH
71769: LD_INT 1
71771: ST_TO_ADDR
// if p3 = 5 then
71772: LD_VAR 0 3
71776: PUSH
71777: LD_INT 5
71779: EQUAL
71780: IFFALSE 71790
// sLevel := true ;
71782: LD_ADDR_EXP 82
71786: PUSH
71787: LD_INT 1
71789: ST_TO_ADDR
// if p3 = 6 then
71790: LD_VAR 0 3
71794: PUSH
71795: LD_INT 6
71797: EQUAL
71798: IFFALSE 71808
// sArmoury := true ;
71800: LD_ADDR_EXP 83
71804: PUSH
71805: LD_INT 1
71807: ST_TO_ADDR
// if p3 = 7 then
71808: LD_VAR 0 3
71812: PUSH
71813: LD_INT 7
71815: EQUAL
71816: IFFALSE 71826
// sRadar := true ;
71818: LD_ADDR_EXP 84
71822: PUSH
71823: LD_INT 1
71825: ST_TO_ADDR
// if p3 = 8 then
71826: LD_VAR 0 3
71830: PUSH
71831: LD_INT 8
71833: EQUAL
71834: IFFALSE 71844
// sBunker := true ;
71836: LD_ADDR_EXP 85
71840: PUSH
71841: LD_INT 1
71843: ST_TO_ADDR
// if p3 = 9 then
71844: LD_VAR 0 3
71848: PUSH
71849: LD_INT 9
71851: EQUAL
71852: IFFALSE 71862
// sHack := true ;
71854: LD_ADDR_EXP 86
71858: PUSH
71859: LD_INT 1
71861: ST_TO_ADDR
// if p3 = 10 then
71862: LD_VAR 0 3
71866: PUSH
71867: LD_INT 10
71869: EQUAL
71870: IFFALSE 71880
// sFire := true ;
71872: LD_ADDR_EXP 87
71876: PUSH
71877: LD_INT 1
71879: ST_TO_ADDR
// if p3 = 11 then
71880: LD_VAR 0 3
71884: PUSH
71885: LD_INT 11
71887: EQUAL
71888: IFFALSE 71898
// sRefresh := true ;
71890: LD_ADDR_EXP 88
71894: PUSH
71895: LD_INT 1
71897: ST_TO_ADDR
// if p3 = 12 then
71898: LD_VAR 0 3
71902: PUSH
71903: LD_INT 12
71905: EQUAL
71906: IFFALSE 71916
// sExp := true ;
71908: LD_ADDR_EXP 89
71912: PUSH
71913: LD_INT 1
71915: ST_TO_ADDR
// if p3 = 13 then
71916: LD_VAR 0 3
71920: PUSH
71921: LD_INT 13
71923: EQUAL
71924: IFFALSE 71934
// sDepot := true ;
71926: LD_ADDR_EXP 90
71930: PUSH
71931: LD_INT 1
71933: ST_TO_ADDR
// if p3 = 14 then
71934: LD_VAR 0 3
71938: PUSH
71939: LD_INT 14
71941: EQUAL
71942: IFFALSE 71952
// sFlag := true ;
71944: LD_ADDR_EXP 91
71948: PUSH
71949: LD_INT 1
71951: ST_TO_ADDR
// if p3 = 15 then
71952: LD_VAR 0 3
71956: PUSH
71957: LD_INT 15
71959: EQUAL
71960: IFFALSE 71970
// sKamikadze := true ;
71962: LD_ADDR_EXP 99
71966: PUSH
71967: LD_INT 1
71969: ST_TO_ADDR
// if p3 = 16 then
71970: LD_VAR 0 3
71974: PUSH
71975: LD_INT 16
71977: EQUAL
71978: IFFALSE 71988
// sTroll := true ;
71980: LD_ADDR_EXP 100
71984: PUSH
71985: LD_INT 1
71987: ST_TO_ADDR
// if p3 = 17 then
71988: LD_VAR 0 3
71992: PUSH
71993: LD_INT 17
71995: EQUAL
71996: IFFALSE 72006
// sSlow := true ;
71998: LD_ADDR_EXP 101
72002: PUSH
72003: LD_INT 1
72005: ST_TO_ADDR
// if p3 = 18 then
72006: LD_VAR 0 3
72010: PUSH
72011: LD_INT 18
72013: EQUAL
72014: IFFALSE 72024
// sLack := true ;
72016: LD_ADDR_EXP 102
72020: PUSH
72021: LD_INT 1
72023: ST_TO_ADDR
// if p3 = 19 then
72024: LD_VAR 0 3
72028: PUSH
72029: LD_INT 19
72031: EQUAL
72032: IFFALSE 72042
// sTank := true ;
72034: LD_ADDR_EXP 104
72038: PUSH
72039: LD_INT 1
72041: ST_TO_ADDR
// if p3 = 20 then
72042: LD_VAR 0 3
72046: PUSH
72047: LD_INT 20
72049: EQUAL
72050: IFFALSE 72060
// sRemote := true ;
72052: LD_ADDR_EXP 105
72056: PUSH
72057: LD_INT 1
72059: ST_TO_ADDR
// if p3 = 21 then
72060: LD_VAR 0 3
72064: PUSH
72065: LD_INT 21
72067: EQUAL
72068: IFFALSE 72078
// sPowell := true ;
72070: LD_ADDR_EXP 106
72074: PUSH
72075: LD_INT 1
72077: ST_TO_ADDR
// if p3 = 22 then
72078: LD_VAR 0 3
72082: PUSH
72083: LD_INT 22
72085: EQUAL
72086: IFFALSE 72096
// sTeleport := true ;
72088: LD_ADDR_EXP 109
72092: PUSH
72093: LD_INT 1
72095: ST_TO_ADDR
// if p3 = 23 then
72096: LD_VAR 0 3
72100: PUSH
72101: LD_INT 23
72103: EQUAL
72104: IFFALSE 72114
// sOilTower := true ;
72106: LD_ADDR_EXP 111
72110: PUSH
72111: LD_INT 1
72113: ST_TO_ADDR
// if p3 = 24 then
72114: LD_VAR 0 3
72118: PUSH
72119: LD_INT 24
72121: EQUAL
72122: IFFALSE 72132
// sShovel := true ;
72124: LD_ADDR_EXP 112
72128: PUSH
72129: LD_INT 1
72131: ST_TO_ADDR
// if p3 = 25 then
72132: LD_VAR 0 3
72136: PUSH
72137: LD_INT 25
72139: EQUAL
72140: IFFALSE 72150
// sSheik := true ;
72142: LD_ADDR_EXP 113
72146: PUSH
72147: LD_INT 1
72149: ST_TO_ADDR
// if p3 = 26 then
72150: LD_VAR 0 3
72154: PUSH
72155: LD_INT 26
72157: EQUAL
72158: IFFALSE 72168
// sEarthquake := true ;
72160: LD_ADDR_EXP 115
72164: PUSH
72165: LD_INT 1
72167: ST_TO_ADDR
// if p3 = 27 then
72168: LD_VAR 0 3
72172: PUSH
72173: LD_INT 27
72175: EQUAL
72176: IFFALSE 72186
// sAI := true ;
72178: LD_ADDR_EXP 116
72182: PUSH
72183: LD_INT 1
72185: ST_TO_ADDR
// if p3 = 28 then
72186: LD_VAR 0 3
72190: PUSH
72191: LD_INT 28
72193: EQUAL
72194: IFFALSE 72204
// sCargo := true ;
72196: LD_ADDR_EXP 119
72200: PUSH
72201: LD_INT 1
72203: ST_TO_ADDR
// if p3 = 29 then
72204: LD_VAR 0 3
72208: PUSH
72209: LD_INT 29
72211: EQUAL
72212: IFFALSE 72222
// sDLaser := true ;
72214: LD_ADDR_EXP 120
72218: PUSH
72219: LD_INT 1
72221: ST_TO_ADDR
// if p3 = 30 then
72222: LD_VAR 0 3
72226: PUSH
72227: LD_INT 30
72229: EQUAL
72230: IFFALSE 72240
// sExchange := true ;
72232: LD_ADDR_EXP 121
72236: PUSH
72237: LD_INT 1
72239: ST_TO_ADDR
// if p3 = 31 then
72240: LD_VAR 0 3
72244: PUSH
72245: LD_INT 31
72247: EQUAL
72248: IFFALSE 72258
// sFac := true ;
72250: LD_ADDR_EXP 122
72254: PUSH
72255: LD_INT 1
72257: ST_TO_ADDR
// if p3 = 32 then
72258: LD_VAR 0 3
72262: PUSH
72263: LD_INT 32
72265: EQUAL
72266: IFFALSE 72276
// sPower := true ;
72268: LD_ADDR_EXP 123
72272: PUSH
72273: LD_INT 1
72275: ST_TO_ADDR
// if p3 = 33 then
72276: LD_VAR 0 3
72280: PUSH
72281: LD_INT 33
72283: EQUAL
72284: IFFALSE 72294
// sRandom := true ;
72286: LD_ADDR_EXP 124
72290: PUSH
72291: LD_INT 1
72293: ST_TO_ADDR
// if p3 = 34 then
72294: LD_VAR 0 3
72298: PUSH
72299: LD_INT 34
72301: EQUAL
72302: IFFALSE 72312
// sShield := true ;
72304: LD_ADDR_EXP 125
72308: PUSH
72309: LD_INT 1
72311: ST_TO_ADDR
// if p3 = 35 then
72312: LD_VAR 0 3
72316: PUSH
72317: LD_INT 35
72319: EQUAL
72320: IFFALSE 72330
// sTime := true ;
72322: LD_ADDR_EXP 126
72326: PUSH
72327: LD_INT 1
72329: ST_TO_ADDR
// if p3 = 36 then
72330: LD_VAR 0 3
72334: PUSH
72335: LD_INT 36
72337: EQUAL
72338: IFFALSE 72348
// sTools := true ;
72340: LD_ADDR_EXP 127
72344: PUSH
72345: LD_INT 1
72347: ST_TO_ADDR
// if p3 = 101 then
72348: LD_VAR 0 3
72352: PUSH
72353: LD_INT 101
72355: EQUAL
72356: IFFALSE 72366
// sSold := true ;
72358: LD_ADDR_EXP 92
72362: PUSH
72363: LD_INT 1
72365: ST_TO_ADDR
// if p3 = 102 then
72366: LD_VAR 0 3
72370: PUSH
72371: LD_INT 102
72373: EQUAL
72374: IFFALSE 72384
// sDiff := true ;
72376: LD_ADDR_EXP 93
72380: PUSH
72381: LD_INT 1
72383: ST_TO_ADDR
// if p3 = 103 then
72384: LD_VAR 0 3
72388: PUSH
72389: LD_INT 103
72391: EQUAL
72392: IFFALSE 72402
// sFog := true ;
72394: LD_ADDR_EXP 96
72398: PUSH
72399: LD_INT 1
72401: ST_TO_ADDR
// if p3 = 104 then
72402: LD_VAR 0 3
72406: PUSH
72407: LD_INT 104
72409: EQUAL
72410: IFFALSE 72420
// sReset := true ;
72412: LD_ADDR_EXP 97
72416: PUSH
72417: LD_INT 1
72419: ST_TO_ADDR
// if p3 = 105 then
72420: LD_VAR 0 3
72424: PUSH
72425: LD_INT 105
72427: EQUAL
72428: IFFALSE 72438
// sSun := true ;
72430: LD_ADDR_EXP 98
72434: PUSH
72435: LD_INT 1
72437: ST_TO_ADDR
// if p3 = 106 then
72438: LD_VAR 0 3
72442: PUSH
72443: LD_INT 106
72445: EQUAL
72446: IFFALSE 72456
// sTiger := true ;
72448: LD_ADDR_EXP 94
72452: PUSH
72453: LD_INT 1
72455: ST_TO_ADDR
// if p3 = 107 then
72456: LD_VAR 0 3
72460: PUSH
72461: LD_INT 107
72463: EQUAL
72464: IFFALSE 72474
// sBomb := true ;
72466: LD_ADDR_EXP 95
72470: PUSH
72471: LD_INT 1
72473: ST_TO_ADDR
// if p3 = 108 then
72474: LD_VAR 0 3
72478: PUSH
72479: LD_INT 108
72481: EQUAL
72482: IFFALSE 72492
// sWound := true ;
72484: LD_ADDR_EXP 103
72488: PUSH
72489: LD_INT 1
72491: ST_TO_ADDR
// if p3 = 109 then
72492: LD_VAR 0 3
72496: PUSH
72497: LD_INT 109
72499: EQUAL
72500: IFFALSE 72510
// sBetray := true ;
72502: LD_ADDR_EXP 107
72506: PUSH
72507: LD_INT 1
72509: ST_TO_ADDR
// if p3 = 110 then
72510: LD_VAR 0 3
72514: PUSH
72515: LD_INT 110
72517: EQUAL
72518: IFFALSE 72528
// sContamin := true ;
72520: LD_ADDR_EXP 108
72524: PUSH
72525: LD_INT 1
72527: ST_TO_ADDR
// if p3 = 111 then
72528: LD_VAR 0 3
72532: PUSH
72533: LD_INT 111
72535: EQUAL
72536: IFFALSE 72546
// sOil := true ;
72538: LD_ADDR_EXP 110
72542: PUSH
72543: LD_INT 1
72545: ST_TO_ADDR
// if p3 = 112 then
72546: LD_VAR 0 3
72550: PUSH
72551: LD_INT 112
72553: EQUAL
72554: IFFALSE 72564
// sStu := true ;
72556: LD_ADDR_EXP 114
72560: PUSH
72561: LD_INT 1
72563: ST_TO_ADDR
// if p3 = 113 then
72564: LD_VAR 0 3
72568: PUSH
72569: LD_INT 113
72571: EQUAL
72572: IFFALSE 72582
// sBazooka := true ;
72574: LD_ADDR_EXP 117
72578: PUSH
72579: LD_INT 1
72581: ST_TO_ADDR
// if p3 = 114 then
72582: LD_VAR 0 3
72586: PUSH
72587: LD_INT 114
72589: EQUAL
72590: IFFALSE 72600
// sMortar := true ;
72592: LD_ADDR_EXP 118
72596: PUSH
72597: LD_INT 1
72599: ST_TO_ADDR
// if p3 = 115 then
72600: LD_VAR 0 3
72604: PUSH
72605: LD_INT 115
72607: EQUAL
72608: IFFALSE 72618
// sRanger := true ;
72610: LD_ADDR_EXP 128
72614: PUSH
72615: LD_INT 1
72617: ST_TO_ADDR
// if p3 = 116 then
72618: LD_VAR 0 3
72622: PUSH
72623: LD_INT 116
72625: EQUAL
72626: IFFALSE 72636
// sComputer := true ;
72628: LD_ADDR_EXP 129
72632: PUSH
72633: LD_INT 1
72635: ST_TO_ADDR
// if p3 = 117 then
72636: LD_VAR 0 3
72640: PUSH
72641: LD_INT 117
72643: EQUAL
72644: IFFALSE 72654
// s30 := true ;
72646: LD_ADDR_EXP 130
72650: PUSH
72651: LD_INT 1
72653: ST_TO_ADDR
// if p3 = 118 then
72654: LD_VAR 0 3
72658: PUSH
72659: LD_INT 118
72661: EQUAL
72662: IFFALSE 72672
// s60 := true ;
72664: LD_ADDR_EXP 131
72668: PUSH
72669: LD_INT 1
72671: ST_TO_ADDR
// end ; if p2 = hack_mode then
72672: LD_VAR 0 2
72676: PUSH
72677: LD_INT 101
72679: EQUAL
72680: IFFALSE 72808
// begin case p3 of 1 :
72682: LD_VAR 0 3
72686: PUSH
72687: LD_INT 1
72689: DOUBLE
72690: EQUAL
72691: IFTRUE 72695
72693: GO 72702
72695: POP
// hHackUnlimitedResources ; 2 :
72696: CALL 84955 0 0
72700: GO 72808
72702: LD_INT 2
72704: DOUBLE
72705: EQUAL
72706: IFTRUE 72710
72708: GO 72717
72710: POP
// hHackSetLevel10 ; 3 :
72711: CALL 85088 0 0
72715: GO 72808
72717: LD_INT 3
72719: DOUBLE
72720: EQUAL
72721: IFTRUE 72725
72723: GO 72732
72725: POP
// hHackSetLevel10YourUnits ; 4 :
72726: CALL 85173 0 0
72730: GO 72808
72732: LD_INT 4
72734: DOUBLE
72735: EQUAL
72736: IFTRUE 72740
72738: GO 72747
72740: POP
// hHackInvincible ; 5 :
72741: CALL 85621 0 0
72745: GO 72808
72747: LD_INT 5
72749: DOUBLE
72750: EQUAL
72751: IFTRUE 72755
72753: GO 72762
72755: POP
// hHackInvisible ; 6 :
72756: CALL 85732 0 0
72760: GO 72808
72762: LD_INT 6
72764: DOUBLE
72765: EQUAL
72766: IFTRUE 72770
72768: GO 72777
72770: POP
// hHackChangeYourSide ; 7 :
72771: CALL 85789 0 0
72775: GO 72808
72777: LD_INT 7
72779: DOUBLE
72780: EQUAL
72781: IFTRUE 72785
72783: GO 72792
72785: POP
// hHackChangeUnitSide ; 8 :
72786: CALL 85831 0 0
72790: GO 72808
72792: LD_INT 8
72794: DOUBLE
72795: EQUAL
72796: IFTRUE 72800
72798: GO 72807
72800: POP
// hHackFog ; end ;
72801: CALL 85932 0 0
72805: GO 72808
72807: POP
// end ; if p2 = game_save_mode then
72808: LD_VAR 0 2
72812: PUSH
72813: LD_INT 102
72815: EQUAL
72816: IFFALSE 72871
// begin if p3 = 1 then
72818: LD_VAR 0 3
72822: PUSH
72823: LD_INT 1
72825: EQUAL
72826: IFFALSE 72838
// globalGameSaveCounter := p4 ;
72828: LD_ADDR_EXP 74
72832: PUSH
72833: LD_VAR 0 4
72837: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
72838: LD_VAR 0 3
72842: PUSH
72843: LD_INT 2
72845: EQUAL
72846: PUSH
72847: LD_EXP 74
72851: AND
72852: IFFALSE 72871
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72854: LD_STRING setGameSaveCounter(
72856: PUSH
72857: LD_EXP 74
72861: STR
72862: PUSH
72863: LD_STRING )
72865: STR
72866: PPUSH
72867: CALL_OW 559
// end ; end ;
72871: LD_VAR 0 7
72875: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
72876: LD_INT 0
72878: PPUSH
// streamModeActive := false ;
72879: LD_ADDR_EXP 75
72883: PUSH
72884: LD_INT 0
72886: ST_TO_ADDR
// normalCounter := 36 ;
72887: LD_ADDR_EXP 76
72891: PUSH
72892: LD_INT 36
72894: ST_TO_ADDR
// hardcoreCounter := 18 ;
72895: LD_ADDR_EXP 77
72899: PUSH
72900: LD_INT 18
72902: ST_TO_ADDR
// sRocket := false ;
72903: LD_ADDR_EXP 80
72907: PUSH
72908: LD_INT 0
72910: ST_TO_ADDR
// sSpeed := false ;
72911: LD_ADDR_EXP 79
72915: PUSH
72916: LD_INT 0
72918: ST_TO_ADDR
// sEngine := false ;
72919: LD_ADDR_EXP 81
72923: PUSH
72924: LD_INT 0
72926: ST_TO_ADDR
// sSpec := false ;
72927: LD_ADDR_EXP 78
72931: PUSH
72932: LD_INT 0
72934: ST_TO_ADDR
// sLevel := false ;
72935: LD_ADDR_EXP 82
72939: PUSH
72940: LD_INT 0
72942: ST_TO_ADDR
// sArmoury := false ;
72943: LD_ADDR_EXP 83
72947: PUSH
72948: LD_INT 0
72950: ST_TO_ADDR
// sRadar := false ;
72951: LD_ADDR_EXP 84
72955: PUSH
72956: LD_INT 0
72958: ST_TO_ADDR
// sBunker := false ;
72959: LD_ADDR_EXP 85
72963: PUSH
72964: LD_INT 0
72966: ST_TO_ADDR
// sHack := false ;
72967: LD_ADDR_EXP 86
72971: PUSH
72972: LD_INT 0
72974: ST_TO_ADDR
// sFire := false ;
72975: LD_ADDR_EXP 87
72979: PUSH
72980: LD_INT 0
72982: ST_TO_ADDR
// sRefresh := false ;
72983: LD_ADDR_EXP 88
72987: PUSH
72988: LD_INT 0
72990: ST_TO_ADDR
// sExp := false ;
72991: LD_ADDR_EXP 89
72995: PUSH
72996: LD_INT 0
72998: ST_TO_ADDR
// sDepot := false ;
72999: LD_ADDR_EXP 90
73003: PUSH
73004: LD_INT 0
73006: ST_TO_ADDR
// sFlag := false ;
73007: LD_ADDR_EXP 91
73011: PUSH
73012: LD_INT 0
73014: ST_TO_ADDR
// sKamikadze := false ;
73015: LD_ADDR_EXP 99
73019: PUSH
73020: LD_INT 0
73022: ST_TO_ADDR
// sTroll := false ;
73023: LD_ADDR_EXP 100
73027: PUSH
73028: LD_INT 0
73030: ST_TO_ADDR
// sSlow := false ;
73031: LD_ADDR_EXP 101
73035: PUSH
73036: LD_INT 0
73038: ST_TO_ADDR
// sLack := false ;
73039: LD_ADDR_EXP 102
73043: PUSH
73044: LD_INT 0
73046: ST_TO_ADDR
// sTank := false ;
73047: LD_ADDR_EXP 104
73051: PUSH
73052: LD_INT 0
73054: ST_TO_ADDR
// sRemote := false ;
73055: LD_ADDR_EXP 105
73059: PUSH
73060: LD_INT 0
73062: ST_TO_ADDR
// sPowell := false ;
73063: LD_ADDR_EXP 106
73067: PUSH
73068: LD_INT 0
73070: ST_TO_ADDR
// sTeleport := false ;
73071: LD_ADDR_EXP 109
73075: PUSH
73076: LD_INT 0
73078: ST_TO_ADDR
// sOilTower := false ;
73079: LD_ADDR_EXP 111
73083: PUSH
73084: LD_INT 0
73086: ST_TO_ADDR
// sShovel := false ;
73087: LD_ADDR_EXP 112
73091: PUSH
73092: LD_INT 0
73094: ST_TO_ADDR
// sSheik := false ;
73095: LD_ADDR_EXP 113
73099: PUSH
73100: LD_INT 0
73102: ST_TO_ADDR
// sEarthquake := false ;
73103: LD_ADDR_EXP 115
73107: PUSH
73108: LD_INT 0
73110: ST_TO_ADDR
// sAI := false ;
73111: LD_ADDR_EXP 116
73115: PUSH
73116: LD_INT 0
73118: ST_TO_ADDR
// sCargo := false ;
73119: LD_ADDR_EXP 119
73123: PUSH
73124: LD_INT 0
73126: ST_TO_ADDR
// sDLaser := false ;
73127: LD_ADDR_EXP 120
73131: PUSH
73132: LD_INT 0
73134: ST_TO_ADDR
// sExchange := false ;
73135: LD_ADDR_EXP 121
73139: PUSH
73140: LD_INT 0
73142: ST_TO_ADDR
// sFac := false ;
73143: LD_ADDR_EXP 122
73147: PUSH
73148: LD_INT 0
73150: ST_TO_ADDR
// sPower := false ;
73151: LD_ADDR_EXP 123
73155: PUSH
73156: LD_INT 0
73158: ST_TO_ADDR
// sRandom := false ;
73159: LD_ADDR_EXP 124
73163: PUSH
73164: LD_INT 0
73166: ST_TO_ADDR
// sShield := false ;
73167: LD_ADDR_EXP 125
73171: PUSH
73172: LD_INT 0
73174: ST_TO_ADDR
// sTime := false ;
73175: LD_ADDR_EXP 126
73179: PUSH
73180: LD_INT 0
73182: ST_TO_ADDR
// sTools := false ;
73183: LD_ADDR_EXP 127
73187: PUSH
73188: LD_INT 0
73190: ST_TO_ADDR
// sSold := false ;
73191: LD_ADDR_EXP 92
73195: PUSH
73196: LD_INT 0
73198: ST_TO_ADDR
// sDiff := false ;
73199: LD_ADDR_EXP 93
73203: PUSH
73204: LD_INT 0
73206: ST_TO_ADDR
// sFog := false ;
73207: LD_ADDR_EXP 96
73211: PUSH
73212: LD_INT 0
73214: ST_TO_ADDR
// sReset := false ;
73215: LD_ADDR_EXP 97
73219: PUSH
73220: LD_INT 0
73222: ST_TO_ADDR
// sSun := false ;
73223: LD_ADDR_EXP 98
73227: PUSH
73228: LD_INT 0
73230: ST_TO_ADDR
// sTiger := false ;
73231: LD_ADDR_EXP 94
73235: PUSH
73236: LD_INT 0
73238: ST_TO_ADDR
// sBomb := false ;
73239: LD_ADDR_EXP 95
73243: PUSH
73244: LD_INT 0
73246: ST_TO_ADDR
// sWound := false ;
73247: LD_ADDR_EXP 103
73251: PUSH
73252: LD_INT 0
73254: ST_TO_ADDR
// sBetray := false ;
73255: LD_ADDR_EXP 107
73259: PUSH
73260: LD_INT 0
73262: ST_TO_ADDR
// sContamin := false ;
73263: LD_ADDR_EXP 108
73267: PUSH
73268: LD_INT 0
73270: ST_TO_ADDR
// sOil := false ;
73271: LD_ADDR_EXP 110
73275: PUSH
73276: LD_INT 0
73278: ST_TO_ADDR
// sStu := false ;
73279: LD_ADDR_EXP 114
73283: PUSH
73284: LD_INT 0
73286: ST_TO_ADDR
// sBazooka := false ;
73287: LD_ADDR_EXP 117
73291: PUSH
73292: LD_INT 0
73294: ST_TO_ADDR
// sMortar := false ;
73295: LD_ADDR_EXP 118
73299: PUSH
73300: LD_INT 0
73302: ST_TO_ADDR
// sRanger := false ;
73303: LD_ADDR_EXP 128
73307: PUSH
73308: LD_INT 0
73310: ST_TO_ADDR
// sComputer := false ;
73311: LD_ADDR_EXP 129
73315: PUSH
73316: LD_INT 0
73318: ST_TO_ADDR
// s30 := false ;
73319: LD_ADDR_EXP 130
73323: PUSH
73324: LD_INT 0
73326: ST_TO_ADDR
// s60 := false ;
73327: LD_ADDR_EXP 131
73331: PUSH
73332: LD_INT 0
73334: ST_TO_ADDR
// end ;
73335: LD_VAR 0 1
73339: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
73340: LD_INT 0
73342: PPUSH
73343: PPUSH
73344: PPUSH
73345: PPUSH
73346: PPUSH
73347: PPUSH
73348: PPUSH
// result := [ ] ;
73349: LD_ADDR_VAR 0 2
73353: PUSH
73354: EMPTY
73355: ST_TO_ADDR
// if campaign_id = 1 then
73356: LD_OWVAR 69
73360: PUSH
73361: LD_INT 1
73363: EQUAL
73364: IFFALSE 76530
// begin case mission_number of 1 :
73366: LD_OWVAR 70
73370: PUSH
73371: LD_INT 1
73373: DOUBLE
73374: EQUAL
73375: IFTRUE 73379
73377: GO 73455
73379: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
73380: LD_ADDR_VAR 0 2
73384: PUSH
73385: LD_INT 2
73387: PUSH
73388: LD_INT 4
73390: PUSH
73391: LD_INT 11
73393: PUSH
73394: LD_INT 12
73396: PUSH
73397: LD_INT 15
73399: PUSH
73400: LD_INT 16
73402: PUSH
73403: LD_INT 22
73405: PUSH
73406: LD_INT 23
73408: PUSH
73409: LD_INT 26
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 101
73425: PUSH
73426: LD_INT 102
73428: PUSH
73429: LD_INT 106
73431: PUSH
73432: LD_INT 116
73434: PUSH
73435: LD_INT 117
73437: PUSH
73438: LD_INT 118
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: ST_TO_ADDR
73453: GO 76528
73455: LD_INT 2
73457: DOUBLE
73458: EQUAL
73459: IFTRUE 73463
73461: GO 73547
73463: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
73464: LD_ADDR_VAR 0 2
73468: PUSH
73469: LD_INT 2
73471: PUSH
73472: LD_INT 4
73474: PUSH
73475: LD_INT 11
73477: PUSH
73478: LD_INT 12
73480: PUSH
73481: LD_INT 15
73483: PUSH
73484: LD_INT 16
73486: PUSH
73487: LD_INT 22
73489: PUSH
73490: LD_INT 23
73492: PUSH
73493: LD_INT 26
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 101
73509: PUSH
73510: LD_INT 102
73512: PUSH
73513: LD_INT 105
73515: PUSH
73516: LD_INT 106
73518: PUSH
73519: LD_INT 108
73521: PUSH
73522: LD_INT 116
73524: PUSH
73525: LD_INT 117
73527: PUSH
73528: LD_INT 118
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: LIST
73539: LIST
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: ST_TO_ADDR
73545: GO 76528
73547: LD_INT 3
73549: DOUBLE
73550: EQUAL
73551: IFTRUE 73555
73553: GO 73643
73555: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
73556: LD_ADDR_VAR 0 2
73560: PUSH
73561: LD_INT 2
73563: PUSH
73564: LD_INT 4
73566: PUSH
73567: LD_INT 5
73569: PUSH
73570: LD_INT 11
73572: PUSH
73573: LD_INT 12
73575: PUSH
73576: LD_INT 15
73578: PUSH
73579: LD_INT 16
73581: PUSH
73582: LD_INT 22
73584: PUSH
73585: LD_INT 26
73587: PUSH
73588: LD_INT 36
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: PUSH
73603: LD_INT 101
73605: PUSH
73606: LD_INT 102
73608: PUSH
73609: LD_INT 105
73611: PUSH
73612: LD_INT 106
73614: PUSH
73615: LD_INT 108
73617: PUSH
73618: LD_INT 116
73620: PUSH
73621: LD_INT 117
73623: PUSH
73624: LD_INT 118
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: ST_TO_ADDR
73641: GO 76528
73643: LD_INT 4
73645: DOUBLE
73646: EQUAL
73647: IFTRUE 73651
73649: GO 73747
73651: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
73652: LD_ADDR_VAR 0 2
73656: PUSH
73657: LD_INT 2
73659: PUSH
73660: LD_INT 4
73662: PUSH
73663: LD_INT 5
73665: PUSH
73666: LD_INT 8
73668: PUSH
73669: LD_INT 11
73671: PUSH
73672: LD_INT 12
73674: PUSH
73675: LD_INT 15
73677: PUSH
73678: LD_INT 16
73680: PUSH
73681: LD_INT 22
73683: PUSH
73684: LD_INT 23
73686: PUSH
73687: LD_INT 26
73689: PUSH
73690: LD_INT 36
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 101
73709: PUSH
73710: LD_INT 102
73712: PUSH
73713: LD_INT 105
73715: PUSH
73716: LD_INT 106
73718: PUSH
73719: LD_INT 108
73721: PUSH
73722: LD_INT 116
73724: PUSH
73725: LD_INT 117
73727: PUSH
73728: LD_INT 118
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: ST_TO_ADDR
73745: GO 76528
73747: LD_INT 5
73749: DOUBLE
73750: EQUAL
73751: IFTRUE 73755
73753: GO 73867
73755: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
73756: LD_ADDR_VAR 0 2
73760: PUSH
73761: LD_INT 2
73763: PUSH
73764: LD_INT 4
73766: PUSH
73767: LD_INT 5
73769: PUSH
73770: LD_INT 6
73772: PUSH
73773: LD_INT 8
73775: PUSH
73776: LD_INT 11
73778: PUSH
73779: LD_INT 12
73781: PUSH
73782: LD_INT 15
73784: PUSH
73785: LD_INT 16
73787: PUSH
73788: LD_INT 22
73790: PUSH
73791: LD_INT 23
73793: PUSH
73794: LD_INT 25
73796: PUSH
73797: LD_INT 26
73799: PUSH
73800: LD_INT 36
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: PUSH
73819: LD_INT 101
73821: PUSH
73822: LD_INT 102
73824: PUSH
73825: LD_INT 105
73827: PUSH
73828: LD_INT 106
73830: PUSH
73831: LD_INT 108
73833: PUSH
73834: LD_INT 109
73836: PUSH
73837: LD_INT 112
73839: PUSH
73840: LD_INT 116
73842: PUSH
73843: LD_INT 117
73845: PUSH
73846: LD_INT 118
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: ST_TO_ADDR
73865: GO 76528
73867: LD_INT 6
73869: DOUBLE
73870: EQUAL
73871: IFTRUE 73875
73873: GO 74007
73875: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
73876: LD_ADDR_VAR 0 2
73880: PUSH
73881: LD_INT 2
73883: PUSH
73884: LD_INT 4
73886: PUSH
73887: LD_INT 5
73889: PUSH
73890: LD_INT 6
73892: PUSH
73893: LD_INT 8
73895: PUSH
73896: LD_INT 11
73898: PUSH
73899: LD_INT 12
73901: PUSH
73902: LD_INT 15
73904: PUSH
73905: LD_INT 16
73907: PUSH
73908: LD_INT 20
73910: PUSH
73911: LD_INT 21
73913: PUSH
73914: LD_INT 22
73916: PUSH
73917: LD_INT 23
73919: PUSH
73920: LD_INT 25
73922: PUSH
73923: LD_INT 26
73925: PUSH
73926: LD_INT 30
73928: PUSH
73929: LD_INT 31
73931: PUSH
73932: LD_INT 32
73934: PUSH
73935: LD_INT 36
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: LIST
73944: LIST
73945: LIST
73946: LIST
73947: LIST
73948: LIST
73949: LIST
73950: LIST
73951: LIST
73952: LIST
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: PUSH
73959: LD_INT 101
73961: PUSH
73962: LD_INT 102
73964: PUSH
73965: LD_INT 105
73967: PUSH
73968: LD_INT 106
73970: PUSH
73971: LD_INT 108
73973: PUSH
73974: LD_INT 109
73976: PUSH
73977: LD_INT 112
73979: PUSH
73980: LD_INT 116
73982: PUSH
73983: LD_INT 117
73985: PUSH
73986: LD_INT 118
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: LIST
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: LIST
73999: LIST
74000: PUSH
74001: EMPTY
74002: LIST
74003: LIST
74004: ST_TO_ADDR
74005: GO 76528
74007: LD_INT 7
74009: DOUBLE
74010: EQUAL
74011: IFTRUE 74015
74013: GO 74127
74015: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
74016: LD_ADDR_VAR 0 2
74020: PUSH
74021: LD_INT 2
74023: PUSH
74024: LD_INT 4
74026: PUSH
74027: LD_INT 5
74029: PUSH
74030: LD_INT 7
74032: PUSH
74033: LD_INT 11
74035: PUSH
74036: LD_INT 12
74038: PUSH
74039: LD_INT 15
74041: PUSH
74042: LD_INT 16
74044: PUSH
74045: LD_INT 20
74047: PUSH
74048: LD_INT 21
74050: PUSH
74051: LD_INT 22
74053: PUSH
74054: LD_INT 23
74056: PUSH
74057: LD_INT 25
74059: PUSH
74060: LD_INT 26
74062: PUSH
74063: EMPTY
74064: LIST
74065: LIST
74066: LIST
74067: LIST
74068: LIST
74069: LIST
74070: LIST
74071: LIST
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: PUSH
74079: LD_INT 101
74081: PUSH
74082: LD_INT 102
74084: PUSH
74085: LD_INT 103
74087: PUSH
74088: LD_INT 105
74090: PUSH
74091: LD_INT 106
74093: PUSH
74094: LD_INT 108
74096: PUSH
74097: LD_INT 112
74099: PUSH
74100: LD_INT 116
74102: PUSH
74103: LD_INT 117
74105: PUSH
74106: LD_INT 118
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: ST_TO_ADDR
74125: GO 76528
74127: LD_INT 8
74129: DOUBLE
74130: EQUAL
74131: IFTRUE 74135
74133: GO 74275
74135: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
74136: LD_ADDR_VAR 0 2
74140: PUSH
74141: LD_INT 2
74143: PUSH
74144: LD_INT 4
74146: PUSH
74147: LD_INT 5
74149: PUSH
74150: LD_INT 6
74152: PUSH
74153: LD_INT 7
74155: PUSH
74156: LD_INT 8
74158: PUSH
74159: LD_INT 11
74161: PUSH
74162: LD_INT 12
74164: PUSH
74165: LD_INT 15
74167: PUSH
74168: LD_INT 16
74170: PUSH
74171: LD_INT 20
74173: PUSH
74174: LD_INT 21
74176: PUSH
74177: LD_INT 22
74179: PUSH
74180: LD_INT 23
74182: PUSH
74183: LD_INT 25
74185: PUSH
74186: LD_INT 26
74188: PUSH
74189: LD_INT 30
74191: PUSH
74192: LD_INT 31
74194: PUSH
74195: LD_INT 32
74197: PUSH
74198: LD_INT 36
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: PUSH
74223: LD_INT 101
74225: PUSH
74226: LD_INT 102
74228: PUSH
74229: LD_INT 103
74231: PUSH
74232: LD_INT 105
74234: PUSH
74235: LD_INT 106
74237: PUSH
74238: LD_INT 108
74240: PUSH
74241: LD_INT 109
74243: PUSH
74244: LD_INT 112
74246: PUSH
74247: LD_INT 116
74249: PUSH
74250: LD_INT 117
74252: PUSH
74253: LD_INT 118
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: ST_TO_ADDR
74273: GO 76528
74275: LD_INT 9
74277: DOUBLE
74278: EQUAL
74279: IFTRUE 74283
74281: GO 74431
74283: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
74284: LD_ADDR_VAR 0 2
74288: PUSH
74289: LD_INT 2
74291: PUSH
74292: LD_INT 4
74294: PUSH
74295: LD_INT 5
74297: PUSH
74298: LD_INT 6
74300: PUSH
74301: LD_INT 7
74303: PUSH
74304: LD_INT 8
74306: PUSH
74307: LD_INT 11
74309: PUSH
74310: LD_INT 12
74312: PUSH
74313: LD_INT 15
74315: PUSH
74316: LD_INT 16
74318: PUSH
74319: LD_INT 20
74321: PUSH
74322: LD_INT 21
74324: PUSH
74325: LD_INT 22
74327: PUSH
74328: LD_INT 23
74330: PUSH
74331: LD_INT 25
74333: PUSH
74334: LD_INT 26
74336: PUSH
74337: LD_INT 28
74339: PUSH
74340: LD_INT 30
74342: PUSH
74343: LD_INT 31
74345: PUSH
74346: LD_INT 32
74348: PUSH
74349: LD_INT 36
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: PUSH
74375: LD_INT 101
74377: PUSH
74378: LD_INT 102
74380: PUSH
74381: LD_INT 103
74383: PUSH
74384: LD_INT 105
74386: PUSH
74387: LD_INT 106
74389: PUSH
74390: LD_INT 108
74392: PUSH
74393: LD_INT 109
74395: PUSH
74396: LD_INT 112
74398: PUSH
74399: LD_INT 114
74401: PUSH
74402: LD_INT 116
74404: PUSH
74405: LD_INT 117
74407: PUSH
74408: LD_INT 118
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: ST_TO_ADDR
74429: GO 76528
74431: LD_INT 10
74433: DOUBLE
74434: EQUAL
74435: IFTRUE 74439
74437: GO 74635
74439: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
74440: LD_ADDR_VAR 0 2
74444: PUSH
74445: LD_INT 2
74447: PUSH
74448: LD_INT 4
74450: PUSH
74451: LD_INT 5
74453: PUSH
74454: LD_INT 6
74456: PUSH
74457: LD_INT 7
74459: PUSH
74460: LD_INT 8
74462: PUSH
74463: LD_INT 9
74465: PUSH
74466: LD_INT 10
74468: PUSH
74469: LD_INT 11
74471: PUSH
74472: LD_INT 12
74474: PUSH
74475: LD_INT 13
74477: PUSH
74478: LD_INT 14
74480: PUSH
74481: LD_INT 15
74483: PUSH
74484: LD_INT 16
74486: PUSH
74487: LD_INT 17
74489: PUSH
74490: LD_INT 18
74492: PUSH
74493: LD_INT 19
74495: PUSH
74496: LD_INT 20
74498: PUSH
74499: LD_INT 21
74501: PUSH
74502: LD_INT 22
74504: PUSH
74505: LD_INT 23
74507: PUSH
74508: LD_INT 24
74510: PUSH
74511: LD_INT 25
74513: PUSH
74514: LD_INT 26
74516: PUSH
74517: LD_INT 28
74519: PUSH
74520: LD_INT 30
74522: PUSH
74523: LD_INT 31
74525: PUSH
74526: LD_INT 32
74528: PUSH
74529: LD_INT 36
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: LIST
74552: LIST
74553: LIST
74554: LIST
74555: LIST
74556: LIST
74557: LIST
74558: LIST
74559: LIST
74560: LIST
74561: LIST
74562: PUSH
74563: LD_INT 101
74565: PUSH
74566: LD_INT 102
74568: PUSH
74569: LD_INT 103
74571: PUSH
74572: LD_INT 104
74574: PUSH
74575: LD_INT 105
74577: PUSH
74578: LD_INT 106
74580: PUSH
74581: LD_INT 107
74583: PUSH
74584: LD_INT 108
74586: PUSH
74587: LD_INT 109
74589: PUSH
74590: LD_INT 110
74592: PUSH
74593: LD_INT 111
74595: PUSH
74596: LD_INT 112
74598: PUSH
74599: LD_INT 114
74601: PUSH
74602: LD_INT 116
74604: PUSH
74605: LD_INT 117
74607: PUSH
74608: LD_INT 118
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: LIST
74615: LIST
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: ST_TO_ADDR
74633: GO 76528
74635: LD_INT 11
74637: DOUBLE
74638: EQUAL
74639: IFTRUE 74643
74641: GO 74847
74643: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
74644: LD_ADDR_VAR 0 2
74648: PUSH
74649: LD_INT 2
74651: PUSH
74652: LD_INT 3
74654: PUSH
74655: LD_INT 4
74657: PUSH
74658: LD_INT 5
74660: PUSH
74661: LD_INT 6
74663: PUSH
74664: LD_INT 7
74666: PUSH
74667: LD_INT 8
74669: PUSH
74670: LD_INT 9
74672: PUSH
74673: LD_INT 10
74675: PUSH
74676: LD_INT 11
74678: PUSH
74679: LD_INT 12
74681: PUSH
74682: LD_INT 13
74684: PUSH
74685: LD_INT 14
74687: PUSH
74688: LD_INT 15
74690: PUSH
74691: LD_INT 16
74693: PUSH
74694: LD_INT 17
74696: PUSH
74697: LD_INT 18
74699: PUSH
74700: LD_INT 19
74702: PUSH
74703: LD_INT 20
74705: PUSH
74706: LD_INT 21
74708: PUSH
74709: LD_INT 22
74711: PUSH
74712: LD_INT 23
74714: PUSH
74715: LD_INT 24
74717: PUSH
74718: LD_INT 25
74720: PUSH
74721: LD_INT 26
74723: PUSH
74724: LD_INT 28
74726: PUSH
74727: LD_INT 30
74729: PUSH
74730: LD_INT 31
74732: PUSH
74733: LD_INT 32
74735: PUSH
74736: LD_INT 34
74738: PUSH
74739: LD_INT 36
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: LIST
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: PUSH
74775: LD_INT 101
74777: PUSH
74778: LD_INT 102
74780: PUSH
74781: LD_INT 103
74783: PUSH
74784: LD_INT 104
74786: PUSH
74787: LD_INT 105
74789: PUSH
74790: LD_INT 106
74792: PUSH
74793: LD_INT 107
74795: PUSH
74796: LD_INT 108
74798: PUSH
74799: LD_INT 109
74801: PUSH
74802: LD_INT 110
74804: PUSH
74805: LD_INT 111
74807: PUSH
74808: LD_INT 112
74810: PUSH
74811: LD_INT 114
74813: PUSH
74814: LD_INT 116
74816: PUSH
74817: LD_INT 117
74819: PUSH
74820: LD_INT 118
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: PUSH
74841: EMPTY
74842: LIST
74843: LIST
74844: ST_TO_ADDR
74845: GO 76528
74847: LD_INT 12
74849: DOUBLE
74850: EQUAL
74851: IFTRUE 74855
74853: GO 75075
74855: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
74856: LD_ADDR_VAR 0 2
74860: PUSH
74861: LD_INT 1
74863: PUSH
74864: LD_INT 2
74866: PUSH
74867: LD_INT 3
74869: PUSH
74870: LD_INT 4
74872: PUSH
74873: LD_INT 5
74875: PUSH
74876: LD_INT 6
74878: PUSH
74879: LD_INT 7
74881: PUSH
74882: LD_INT 8
74884: PUSH
74885: LD_INT 9
74887: PUSH
74888: LD_INT 10
74890: PUSH
74891: LD_INT 11
74893: PUSH
74894: LD_INT 12
74896: PUSH
74897: LD_INT 13
74899: PUSH
74900: LD_INT 14
74902: PUSH
74903: LD_INT 15
74905: PUSH
74906: LD_INT 16
74908: PUSH
74909: LD_INT 17
74911: PUSH
74912: LD_INT 18
74914: PUSH
74915: LD_INT 19
74917: PUSH
74918: LD_INT 20
74920: PUSH
74921: LD_INT 21
74923: PUSH
74924: LD_INT 22
74926: PUSH
74927: LD_INT 23
74929: PUSH
74930: LD_INT 24
74932: PUSH
74933: LD_INT 25
74935: PUSH
74936: LD_INT 26
74938: PUSH
74939: LD_INT 27
74941: PUSH
74942: LD_INT 28
74944: PUSH
74945: LD_INT 30
74947: PUSH
74948: LD_INT 31
74950: PUSH
74951: LD_INT 32
74953: PUSH
74954: LD_INT 33
74956: PUSH
74957: LD_INT 34
74959: PUSH
74960: LD_INT 36
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: LIST
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: PUSH
74999: LD_INT 101
75001: PUSH
75002: LD_INT 102
75004: PUSH
75005: LD_INT 103
75007: PUSH
75008: LD_INT 104
75010: PUSH
75011: LD_INT 105
75013: PUSH
75014: LD_INT 106
75016: PUSH
75017: LD_INT 107
75019: PUSH
75020: LD_INT 108
75022: PUSH
75023: LD_INT 109
75025: PUSH
75026: LD_INT 110
75028: PUSH
75029: LD_INT 111
75031: PUSH
75032: LD_INT 112
75034: PUSH
75035: LD_INT 113
75037: PUSH
75038: LD_INT 114
75040: PUSH
75041: LD_INT 116
75043: PUSH
75044: LD_INT 117
75046: PUSH
75047: LD_INT 118
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: LIST
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: ST_TO_ADDR
75073: GO 76528
75075: LD_INT 13
75077: DOUBLE
75078: EQUAL
75079: IFTRUE 75083
75081: GO 75291
75083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
75084: LD_ADDR_VAR 0 2
75088: PUSH
75089: LD_INT 1
75091: PUSH
75092: LD_INT 2
75094: PUSH
75095: LD_INT 3
75097: PUSH
75098: LD_INT 4
75100: PUSH
75101: LD_INT 5
75103: PUSH
75104: LD_INT 8
75106: PUSH
75107: LD_INT 9
75109: PUSH
75110: LD_INT 10
75112: PUSH
75113: LD_INT 11
75115: PUSH
75116: LD_INT 12
75118: PUSH
75119: LD_INT 14
75121: PUSH
75122: LD_INT 15
75124: PUSH
75125: LD_INT 16
75127: PUSH
75128: LD_INT 17
75130: PUSH
75131: LD_INT 18
75133: PUSH
75134: LD_INT 19
75136: PUSH
75137: LD_INT 20
75139: PUSH
75140: LD_INT 21
75142: PUSH
75143: LD_INT 22
75145: PUSH
75146: LD_INT 23
75148: PUSH
75149: LD_INT 24
75151: PUSH
75152: LD_INT 25
75154: PUSH
75155: LD_INT 26
75157: PUSH
75158: LD_INT 27
75160: PUSH
75161: LD_INT 28
75163: PUSH
75164: LD_INT 30
75166: PUSH
75167: LD_INT 31
75169: PUSH
75170: LD_INT 32
75172: PUSH
75173: LD_INT 33
75175: PUSH
75176: LD_INT 34
75178: PUSH
75179: LD_INT 36
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: LIST
75190: LIST
75191: LIST
75192: LIST
75193: LIST
75194: LIST
75195: LIST
75196: LIST
75197: LIST
75198: LIST
75199: LIST
75200: LIST
75201: LIST
75202: LIST
75203: LIST
75204: LIST
75205: LIST
75206: LIST
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: PUSH
75215: LD_INT 101
75217: PUSH
75218: LD_INT 102
75220: PUSH
75221: LD_INT 103
75223: PUSH
75224: LD_INT 104
75226: PUSH
75227: LD_INT 105
75229: PUSH
75230: LD_INT 106
75232: PUSH
75233: LD_INT 107
75235: PUSH
75236: LD_INT 108
75238: PUSH
75239: LD_INT 109
75241: PUSH
75242: LD_INT 110
75244: PUSH
75245: LD_INT 111
75247: PUSH
75248: LD_INT 112
75250: PUSH
75251: LD_INT 113
75253: PUSH
75254: LD_INT 114
75256: PUSH
75257: LD_INT 116
75259: PUSH
75260: LD_INT 117
75262: PUSH
75263: LD_INT 118
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: LIST
75270: LIST
75271: LIST
75272: LIST
75273: LIST
75274: LIST
75275: LIST
75276: LIST
75277: LIST
75278: LIST
75279: LIST
75280: LIST
75281: LIST
75282: LIST
75283: LIST
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: ST_TO_ADDR
75289: GO 76528
75291: LD_INT 14
75293: DOUBLE
75294: EQUAL
75295: IFTRUE 75299
75297: GO 75523
75299: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
75300: LD_ADDR_VAR 0 2
75304: PUSH
75305: LD_INT 1
75307: PUSH
75308: LD_INT 2
75310: PUSH
75311: LD_INT 3
75313: PUSH
75314: LD_INT 4
75316: PUSH
75317: LD_INT 5
75319: PUSH
75320: LD_INT 6
75322: PUSH
75323: LD_INT 7
75325: PUSH
75326: LD_INT 8
75328: PUSH
75329: LD_INT 9
75331: PUSH
75332: LD_INT 10
75334: PUSH
75335: LD_INT 11
75337: PUSH
75338: LD_INT 12
75340: PUSH
75341: LD_INT 13
75343: PUSH
75344: LD_INT 14
75346: PUSH
75347: LD_INT 15
75349: PUSH
75350: LD_INT 16
75352: PUSH
75353: LD_INT 17
75355: PUSH
75356: LD_INT 18
75358: PUSH
75359: LD_INT 19
75361: PUSH
75362: LD_INT 20
75364: PUSH
75365: LD_INT 21
75367: PUSH
75368: LD_INT 22
75370: PUSH
75371: LD_INT 23
75373: PUSH
75374: LD_INT 24
75376: PUSH
75377: LD_INT 25
75379: PUSH
75380: LD_INT 26
75382: PUSH
75383: LD_INT 27
75385: PUSH
75386: LD_INT 28
75388: PUSH
75389: LD_INT 29
75391: PUSH
75392: LD_INT 30
75394: PUSH
75395: LD_INT 31
75397: PUSH
75398: LD_INT 32
75400: PUSH
75401: LD_INT 33
75403: PUSH
75404: LD_INT 34
75406: PUSH
75407: LD_INT 36
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: PUSH
75447: LD_INT 101
75449: PUSH
75450: LD_INT 102
75452: PUSH
75453: LD_INT 103
75455: PUSH
75456: LD_INT 104
75458: PUSH
75459: LD_INT 105
75461: PUSH
75462: LD_INT 106
75464: PUSH
75465: LD_INT 107
75467: PUSH
75468: LD_INT 108
75470: PUSH
75471: LD_INT 109
75473: PUSH
75474: LD_INT 110
75476: PUSH
75477: LD_INT 111
75479: PUSH
75480: LD_INT 112
75482: PUSH
75483: LD_INT 113
75485: PUSH
75486: LD_INT 114
75488: PUSH
75489: LD_INT 116
75491: PUSH
75492: LD_INT 117
75494: PUSH
75495: LD_INT 118
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: LIST
75502: LIST
75503: LIST
75504: LIST
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: LIST
75510: LIST
75511: LIST
75512: LIST
75513: LIST
75514: LIST
75515: LIST
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: ST_TO_ADDR
75521: GO 76528
75523: LD_INT 15
75525: DOUBLE
75526: EQUAL
75527: IFTRUE 75531
75529: GO 75755
75531: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
75532: LD_ADDR_VAR 0 2
75536: PUSH
75537: LD_INT 1
75539: PUSH
75540: LD_INT 2
75542: PUSH
75543: LD_INT 3
75545: PUSH
75546: LD_INT 4
75548: PUSH
75549: LD_INT 5
75551: PUSH
75552: LD_INT 6
75554: PUSH
75555: LD_INT 7
75557: PUSH
75558: LD_INT 8
75560: PUSH
75561: LD_INT 9
75563: PUSH
75564: LD_INT 10
75566: PUSH
75567: LD_INT 11
75569: PUSH
75570: LD_INT 12
75572: PUSH
75573: LD_INT 13
75575: PUSH
75576: LD_INT 14
75578: PUSH
75579: LD_INT 15
75581: PUSH
75582: LD_INT 16
75584: PUSH
75585: LD_INT 17
75587: PUSH
75588: LD_INT 18
75590: PUSH
75591: LD_INT 19
75593: PUSH
75594: LD_INT 20
75596: PUSH
75597: LD_INT 21
75599: PUSH
75600: LD_INT 22
75602: PUSH
75603: LD_INT 23
75605: PUSH
75606: LD_INT 24
75608: PUSH
75609: LD_INT 25
75611: PUSH
75612: LD_INT 26
75614: PUSH
75615: LD_INT 27
75617: PUSH
75618: LD_INT 28
75620: PUSH
75621: LD_INT 29
75623: PUSH
75624: LD_INT 30
75626: PUSH
75627: LD_INT 31
75629: PUSH
75630: LD_INT 32
75632: PUSH
75633: LD_INT 33
75635: PUSH
75636: LD_INT 34
75638: PUSH
75639: LD_INT 36
75641: PUSH
75642: EMPTY
75643: LIST
75644: LIST
75645: LIST
75646: LIST
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: LIST
75652: LIST
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: LIST
75662: LIST
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: LIST
75668: LIST
75669: LIST
75670: LIST
75671: LIST
75672: LIST
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: LIST
75678: PUSH
75679: LD_INT 101
75681: PUSH
75682: LD_INT 102
75684: PUSH
75685: LD_INT 103
75687: PUSH
75688: LD_INT 104
75690: PUSH
75691: LD_INT 105
75693: PUSH
75694: LD_INT 106
75696: PUSH
75697: LD_INT 107
75699: PUSH
75700: LD_INT 108
75702: PUSH
75703: LD_INT 109
75705: PUSH
75706: LD_INT 110
75708: PUSH
75709: LD_INT 111
75711: PUSH
75712: LD_INT 112
75714: PUSH
75715: LD_INT 113
75717: PUSH
75718: LD_INT 114
75720: PUSH
75721: LD_INT 116
75723: PUSH
75724: LD_INT 117
75726: PUSH
75727: LD_INT 118
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: LIST
75747: LIST
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: ST_TO_ADDR
75753: GO 76528
75755: LD_INT 16
75757: DOUBLE
75758: EQUAL
75759: IFTRUE 75763
75761: GO 75899
75763: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
75764: LD_ADDR_VAR 0 2
75768: PUSH
75769: LD_INT 2
75771: PUSH
75772: LD_INT 4
75774: PUSH
75775: LD_INT 5
75777: PUSH
75778: LD_INT 7
75780: PUSH
75781: LD_INT 11
75783: PUSH
75784: LD_INT 12
75786: PUSH
75787: LD_INT 15
75789: PUSH
75790: LD_INT 16
75792: PUSH
75793: LD_INT 20
75795: PUSH
75796: LD_INT 21
75798: PUSH
75799: LD_INT 22
75801: PUSH
75802: LD_INT 23
75804: PUSH
75805: LD_INT 25
75807: PUSH
75808: LD_INT 26
75810: PUSH
75811: LD_INT 30
75813: PUSH
75814: LD_INT 31
75816: PUSH
75817: LD_INT 32
75819: PUSH
75820: LD_INT 33
75822: PUSH
75823: LD_INT 34
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: LIST
75842: LIST
75843: LIST
75844: LIST
75845: LIST
75846: PUSH
75847: LD_INT 101
75849: PUSH
75850: LD_INT 102
75852: PUSH
75853: LD_INT 103
75855: PUSH
75856: LD_INT 106
75858: PUSH
75859: LD_INT 108
75861: PUSH
75862: LD_INT 112
75864: PUSH
75865: LD_INT 113
75867: PUSH
75868: LD_INT 114
75870: PUSH
75871: LD_INT 116
75873: PUSH
75874: LD_INT 117
75876: PUSH
75877: LD_INT 118
75879: PUSH
75880: EMPTY
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: LIST
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: ST_TO_ADDR
75897: GO 76528
75899: LD_INT 17
75901: DOUBLE
75902: EQUAL
75903: IFTRUE 75907
75905: GO 76131
75907: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
75908: LD_ADDR_VAR 0 2
75912: PUSH
75913: LD_INT 1
75915: PUSH
75916: LD_INT 2
75918: PUSH
75919: LD_INT 3
75921: PUSH
75922: LD_INT 4
75924: PUSH
75925: LD_INT 5
75927: PUSH
75928: LD_INT 6
75930: PUSH
75931: LD_INT 7
75933: PUSH
75934: LD_INT 8
75936: PUSH
75937: LD_INT 9
75939: PUSH
75940: LD_INT 10
75942: PUSH
75943: LD_INT 11
75945: PUSH
75946: LD_INT 12
75948: PUSH
75949: LD_INT 13
75951: PUSH
75952: LD_INT 14
75954: PUSH
75955: LD_INT 15
75957: PUSH
75958: LD_INT 16
75960: PUSH
75961: LD_INT 17
75963: PUSH
75964: LD_INT 18
75966: PUSH
75967: LD_INT 19
75969: PUSH
75970: LD_INT 20
75972: PUSH
75973: LD_INT 21
75975: PUSH
75976: LD_INT 22
75978: PUSH
75979: LD_INT 23
75981: PUSH
75982: LD_INT 24
75984: PUSH
75985: LD_INT 25
75987: PUSH
75988: LD_INT 26
75990: PUSH
75991: LD_INT 27
75993: PUSH
75994: LD_INT 28
75996: PUSH
75997: LD_INT 29
75999: PUSH
76000: LD_INT 30
76002: PUSH
76003: LD_INT 31
76005: PUSH
76006: LD_INT 32
76008: PUSH
76009: LD_INT 33
76011: PUSH
76012: LD_INT 34
76014: PUSH
76015: LD_INT 36
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: PUSH
76055: LD_INT 101
76057: PUSH
76058: LD_INT 102
76060: PUSH
76061: LD_INT 103
76063: PUSH
76064: LD_INT 104
76066: PUSH
76067: LD_INT 105
76069: PUSH
76070: LD_INT 106
76072: PUSH
76073: LD_INT 107
76075: PUSH
76076: LD_INT 108
76078: PUSH
76079: LD_INT 109
76081: PUSH
76082: LD_INT 110
76084: PUSH
76085: LD_INT 111
76087: PUSH
76088: LD_INT 112
76090: PUSH
76091: LD_INT 113
76093: PUSH
76094: LD_INT 114
76096: PUSH
76097: LD_INT 116
76099: PUSH
76100: LD_INT 117
76102: PUSH
76103: LD_INT 118
76105: PUSH
76106: EMPTY
76107: LIST
76108: LIST
76109: LIST
76110: LIST
76111: LIST
76112: LIST
76113: LIST
76114: LIST
76115: LIST
76116: LIST
76117: LIST
76118: LIST
76119: LIST
76120: LIST
76121: LIST
76122: LIST
76123: LIST
76124: PUSH
76125: EMPTY
76126: LIST
76127: LIST
76128: ST_TO_ADDR
76129: GO 76528
76131: LD_INT 18
76133: DOUBLE
76134: EQUAL
76135: IFTRUE 76139
76137: GO 76287
76139: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
76140: LD_ADDR_VAR 0 2
76144: PUSH
76145: LD_INT 2
76147: PUSH
76148: LD_INT 4
76150: PUSH
76151: LD_INT 5
76153: PUSH
76154: LD_INT 7
76156: PUSH
76157: LD_INT 11
76159: PUSH
76160: LD_INT 12
76162: PUSH
76163: LD_INT 15
76165: PUSH
76166: LD_INT 16
76168: PUSH
76169: LD_INT 20
76171: PUSH
76172: LD_INT 21
76174: PUSH
76175: LD_INT 22
76177: PUSH
76178: LD_INT 23
76180: PUSH
76181: LD_INT 25
76183: PUSH
76184: LD_INT 26
76186: PUSH
76187: LD_INT 30
76189: PUSH
76190: LD_INT 31
76192: PUSH
76193: LD_INT 32
76195: PUSH
76196: LD_INT 33
76198: PUSH
76199: LD_INT 34
76201: PUSH
76202: LD_INT 35
76204: PUSH
76205: LD_INT 36
76207: PUSH
76208: EMPTY
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: PUSH
76231: LD_INT 101
76233: PUSH
76234: LD_INT 102
76236: PUSH
76237: LD_INT 103
76239: PUSH
76240: LD_INT 106
76242: PUSH
76243: LD_INT 108
76245: PUSH
76246: LD_INT 112
76248: PUSH
76249: LD_INT 113
76251: PUSH
76252: LD_INT 114
76254: PUSH
76255: LD_INT 115
76257: PUSH
76258: LD_INT 116
76260: PUSH
76261: LD_INT 117
76263: PUSH
76264: LD_INT 118
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: LIST
76271: LIST
76272: LIST
76273: LIST
76274: LIST
76275: LIST
76276: LIST
76277: LIST
76278: LIST
76279: LIST
76280: PUSH
76281: EMPTY
76282: LIST
76283: LIST
76284: ST_TO_ADDR
76285: GO 76528
76287: LD_INT 19
76289: DOUBLE
76290: EQUAL
76291: IFTRUE 76295
76293: GO 76527
76295: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
76296: LD_ADDR_VAR 0 2
76300: PUSH
76301: LD_INT 1
76303: PUSH
76304: LD_INT 2
76306: PUSH
76307: LD_INT 3
76309: PUSH
76310: LD_INT 4
76312: PUSH
76313: LD_INT 5
76315: PUSH
76316: LD_INT 6
76318: PUSH
76319: LD_INT 7
76321: PUSH
76322: LD_INT 8
76324: PUSH
76325: LD_INT 9
76327: PUSH
76328: LD_INT 10
76330: PUSH
76331: LD_INT 11
76333: PUSH
76334: LD_INT 12
76336: PUSH
76337: LD_INT 13
76339: PUSH
76340: LD_INT 14
76342: PUSH
76343: LD_INT 15
76345: PUSH
76346: LD_INT 16
76348: PUSH
76349: LD_INT 17
76351: PUSH
76352: LD_INT 18
76354: PUSH
76355: LD_INT 19
76357: PUSH
76358: LD_INT 20
76360: PUSH
76361: LD_INT 21
76363: PUSH
76364: LD_INT 22
76366: PUSH
76367: LD_INT 23
76369: PUSH
76370: LD_INT 24
76372: PUSH
76373: LD_INT 25
76375: PUSH
76376: LD_INT 26
76378: PUSH
76379: LD_INT 27
76381: PUSH
76382: LD_INT 28
76384: PUSH
76385: LD_INT 29
76387: PUSH
76388: LD_INT 30
76390: PUSH
76391: LD_INT 31
76393: PUSH
76394: LD_INT 32
76396: PUSH
76397: LD_INT 33
76399: PUSH
76400: LD_INT 34
76402: PUSH
76403: LD_INT 35
76405: PUSH
76406: LD_INT 36
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: LIST
76413: LIST
76414: LIST
76415: LIST
76416: LIST
76417: LIST
76418: LIST
76419: LIST
76420: LIST
76421: LIST
76422: LIST
76423: LIST
76424: LIST
76425: LIST
76426: LIST
76427: LIST
76428: LIST
76429: LIST
76430: LIST
76431: LIST
76432: LIST
76433: LIST
76434: LIST
76435: LIST
76436: LIST
76437: LIST
76438: LIST
76439: LIST
76440: LIST
76441: LIST
76442: LIST
76443: LIST
76444: LIST
76445: LIST
76446: PUSH
76447: LD_INT 101
76449: PUSH
76450: LD_INT 102
76452: PUSH
76453: LD_INT 103
76455: PUSH
76456: LD_INT 104
76458: PUSH
76459: LD_INT 105
76461: PUSH
76462: LD_INT 106
76464: PUSH
76465: LD_INT 107
76467: PUSH
76468: LD_INT 108
76470: PUSH
76471: LD_INT 109
76473: PUSH
76474: LD_INT 110
76476: PUSH
76477: LD_INT 111
76479: PUSH
76480: LD_INT 112
76482: PUSH
76483: LD_INT 113
76485: PUSH
76486: LD_INT 114
76488: PUSH
76489: LD_INT 115
76491: PUSH
76492: LD_INT 116
76494: PUSH
76495: LD_INT 117
76497: PUSH
76498: LD_INT 118
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: LIST
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: PUSH
76521: EMPTY
76522: LIST
76523: LIST
76524: ST_TO_ADDR
76525: GO 76528
76527: POP
// end else
76528: GO 76759
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
76530: LD_ADDR_VAR 0 2
76534: PUSH
76535: LD_INT 1
76537: PUSH
76538: LD_INT 2
76540: PUSH
76541: LD_INT 3
76543: PUSH
76544: LD_INT 4
76546: PUSH
76547: LD_INT 5
76549: PUSH
76550: LD_INT 6
76552: PUSH
76553: LD_INT 7
76555: PUSH
76556: LD_INT 8
76558: PUSH
76559: LD_INT 9
76561: PUSH
76562: LD_INT 10
76564: PUSH
76565: LD_INT 11
76567: PUSH
76568: LD_INT 12
76570: PUSH
76571: LD_INT 13
76573: PUSH
76574: LD_INT 14
76576: PUSH
76577: LD_INT 15
76579: PUSH
76580: LD_INT 16
76582: PUSH
76583: LD_INT 17
76585: PUSH
76586: LD_INT 18
76588: PUSH
76589: LD_INT 19
76591: PUSH
76592: LD_INT 20
76594: PUSH
76595: LD_INT 21
76597: PUSH
76598: LD_INT 22
76600: PUSH
76601: LD_INT 23
76603: PUSH
76604: LD_INT 24
76606: PUSH
76607: LD_INT 25
76609: PUSH
76610: LD_INT 26
76612: PUSH
76613: LD_INT 27
76615: PUSH
76616: LD_INT 28
76618: PUSH
76619: LD_INT 29
76621: PUSH
76622: LD_INT 30
76624: PUSH
76625: LD_INT 31
76627: PUSH
76628: LD_INT 32
76630: PUSH
76631: LD_INT 33
76633: PUSH
76634: LD_INT 34
76636: PUSH
76637: LD_INT 35
76639: PUSH
76640: LD_INT 36
76642: PUSH
76643: EMPTY
76644: LIST
76645: LIST
76646: LIST
76647: LIST
76648: LIST
76649: LIST
76650: LIST
76651: LIST
76652: LIST
76653: LIST
76654: LIST
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: LIST
76660: LIST
76661: LIST
76662: LIST
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: LIST
76670: LIST
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: LIST
76676: LIST
76677: LIST
76678: LIST
76679: LIST
76680: PUSH
76681: LD_INT 101
76683: PUSH
76684: LD_INT 102
76686: PUSH
76687: LD_INT 103
76689: PUSH
76690: LD_INT 104
76692: PUSH
76693: LD_INT 105
76695: PUSH
76696: LD_INT 106
76698: PUSH
76699: LD_INT 107
76701: PUSH
76702: LD_INT 108
76704: PUSH
76705: LD_INT 109
76707: PUSH
76708: LD_INT 110
76710: PUSH
76711: LD_INT 111
76713: PUSH
76714: LD_INT 112
76716: PUSH
76717: LD_INT 113
76719: PUSH
76720: LD_INT 114
76722: PUSH
76723: LD_INT 115
76725: PUSH
76726: LD_INT 116
76728: PUSH
76729: LD_INT 117
76731: PUSH
76732: LD_INT 118
76734: PUSH
76735: EMPTY
76736: LIST
76737: LIST
76738: LIST
76739: LIST
76740: LIST
76741: LIST
76742: LIST
76743: LIST
76744: LIST
76745: LIST
76746: LIST
76747: LIST
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: PUSH
76755: EMPTY
76756: LIST
76757: LIST
76758: ST_TO_ADDR
// if result then
76759: LD_VAR 0 2
76763: IFFALSE 77549
// begin normal :=  ;
76765: LD_ADDR_VAR 0 5
76769: PUSH
76770: LD_STRING 
76772: ST_TO_ADDR
// hardcore :=  ;
76773: LD_ADDR_VAR 0 6
76777: PUSH
76778: LD_STRING 
76780: ST_TO_ADDR
// active :=  ;
76781: LD_ADDR_VAR 0 7
76785: PUSH
76786: LD_STRING 
76788: ST_TO_ADDR
// for i = 1 to normalCounter do
76789: LD_ADDR_VAR 0 8
76793: PUSH
76794: DOUBLE
76795: LD_INT 1
76797: DEC
76798: ST_TO_ADDR
76799: LD_EXP 76
76803: PUSH
76804: FOR_TO
76805: IFFALSE 76906
// begin tmp := 0 ;
76807: LD_ADDR_VAR 0 3
76811: PUSH
76812: LD_STRING 0
76814: ST_TO_ADDR
// if result [ 1 ] then
76815: LD_VAR 0 2
76819: PUSH
76820: LD_INT 1
76822: ARRAY
76823: IFFALSE 76888
// if result [ 1 ] [ 1 ] = i then
76825: LD_VAR 0 2
76829: PUSH
76830: LD_INT 1
76832: ARRAY
76833: PUSH
76834: LD_INT 1
76836: ARRAY
76837: PUSH
76838: LD_VAR 0 8
76842: EQUAL
76843: IFFALSE 76888
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
76845: LD_ADDR_VAR 0 2
76849: PUSH
76850: LD_VAR 0 2
76854: PPUSH
76855: LD_INT 1
76857: PPUSH
76858: LD_VAR 0 2
76862: PUSH
76863: LD_INT 1
76865: ARRAY
76866: PPUSH
76867: LD_INT 1
76869: PPUSH
76870: CALL_OW 3
76874: PPUSH
76875: CALL_OW 1
76879: ST_TO_ADDR
// tmp := 1 ;
76880: LD_ADDR_VAR 0 3
76884: PUSH
76885: LD_STRING 1
76887: ST_TO_ADDR
// end ; normal := normal & tmp ;
76888: LD_ADDR_VAR 0 5
76892: PUSH
76893: LD_VAR 0 5
76897: PUSH
76898: LD_VAR 0 3
76902: STR
76903: ST_TO_ADDR
// end ;
76904: GO 76804
76906: POP
76907: POP
// for i = 1 to hardcoreCounter do
76908: LD_ADDR_VAR 0 8
76912: PUSH
76913: DOUBLE
76914: LD_INT 1
76916: DEC
76917: ST_TO_ADDR
76918: LD_EXP 77
76922: PUSH
76923: FOR_TO
76924: IFFALSE 77029
// begin tmp := 0 ;
76926: LD_ADDR_VAR 0 3
76930: PUSH
76931: LD_STRING 0
76933: ST_TO_ADDR
// if result [ 2 ] then
76934: LD_VAR 0 2
76938: PUSH
76939: LD_INT 2
76941: ARRAY
76942: IFFALSE 77011
// if result [ 2 ] [ 1 ] = 100 + i then
76944: LD_VAR 0 2
76948: PUSH
76949: LD_INT 2
76951: ARRAY
76952: PUSH
76953: LD_INT 1
76955: ARRAY
76956: PUSH
76957: LD_INT 100
76959: PUSH
76960: LD_VAR 0 8
76964: PLUS
76965: EQUAL
76966: IFFALSE 77011
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
76968: LD_ADDR_VAR 0 2
76972: PUSH
76973: LD_VAR 0 2
76977: PPUSH
76978: LD_INT 2
76980: PPUSH
76981: LD_VAR 0 2
76985: PUSH
76986: LD_INT 2
76988: ARRAY
76989: PPUSH
76990: LD_INT 1
76992: PPUSH
76993: CALL_OW 3
76997: PPUSH
76998: CALL_OW 1
77002: ST_TO_ADDR
// tmp := 1 ;
77003: LD_ADDR_VAR 0 3
77007: PUSH
77008: LD_STRING 1
77010: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
77011: LD_ADDR_VAR 0 6
77015: PUSH
77016: LD_VAR 0 6
77020: PUSH
77021: LD_VAR 0 3
77025: STR
77026: ST_TO_ADDR
// end ;
77027: GO 76923
77029: POP
77030: POP
// if isGameLoad then
77031: LD_VAR 0 1
77035: IFFALSE 77510
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
77037: LD_ADDR_VAR 0 4
77041: PUSH
77042: LD_EXP 80
77046: PUSH
77047: LD_EXP 79
77051: PUSH
77052: LD_EXP 81
77056: PUSH
77057: LD_EXP 78
77061: PUSH
77062: LD_EXP 82
77066: PUSH
77067: LD_EXP 83
77071: PUSH
77072: LD_EXP 84
77076: PUSH
77077: LD_EXP 85
77081: PUSH
77082: LD_EXP 86
77086: PUSH
77087: LD_EXP 87
77091: PUSH
77092: LD_EXP 88
77096: PUSH
77097: LD_EXP 89
77101: PUSH
77102: LD_EXP 90
77106: PUSH
77107: LD_EXP 91
77111: PUSH
77112: LD_EXP 99
77116: PUSH
77117: LD_EXP 100
77121: PUSH
77122: LD_EXP 101
77126: PUSH
77127: LD_EXP 102
77131: PUSH
77132: LD_EXP 104
77136: PUSH
77137: LD_EXP 105
77141: PUSH
77142: LD_EXP 106
77146: PUSH
77147: LD_EXP 109
77151: PUSH
77152: LD_EXP 111
77156: PUSH
77157: LD_EXP 112
77161: PUSH
77162: LD_EXP 113
77166: PUSH
77167: LD_EXP 115
77171: PUSH
77172: LD_EXP 116
77176: PUSH
77177: LD_EXP 119
77181: PUSH
77182: LD_EXP 120
77186: PUSH
77187: LD_EXP 121
77191: PUSH
77192: LD_EXP 122
77196: PUSH
77197: LD_EXP 123
77201: PUSH
77202: LD_EXP 124
77206: PUSH
77207: LD_EXP 125
77211: PUSH
77212: LD_EXP 126
77216: PUSH
77217: LD_EXP 127
77221: PUSH
77222: LD_EXP 92
77226: PUSH
77227: LD_EXP 93
77231: PUSH
77232: LD_EXP 96
77236: PUSH
77237: LD_EXP 97
77241: PUSH
77242: LD_EXP 98
77246: PUSH
77247: LD_EXP 94
77251: PUSH
77252: LD_EXP 95
77256: PUSH
77257: LD_EXP 103
77261: PUSH
77262: LD_EXP 107
77266: PUSH
77267: LD_EXP 108
77271: PUSH
77272: LD_EXP 110
77276: PUSH
77277: LD_EXP 114
77281: PUSH
77282: LD_EXP 117
77286: PUSH
77287: LD_EXP 118
77291: PUSH
77292: LD_EXP 128
77296: PUSH
77297: LD_EXP 129
77301: PUSH
77302: LD_EXP 130
77306: PUSH
77307: LD_EXP 131
77311: PUSH
77312: EMPTY
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: LIST
77318: LIST
77319: LIST
77320: LIST
77321: LIST
77322: LIST
77323: LIST
77324: LIST
77325: LIST
77326: LIST
77327: LIST
77328: LIST
77329: LIST
77330: LIST
77331: LIST
77332: LIST
77333: LIST
77334: LIST
77335: LIST
77336: LIST
77337: LIST
77338: LIST
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: LIST
77344: LIST
77345: LIST
77346: LIST
77347: LIST
77348: LIST
77349: LIST
77350: LIST
77351: LIST
77352: LIST
77353: LIST
77354: LIST
77355: LIST
77356: LIST
77357: LIST
77358: LIST
77359: LIST
77360: LIST
77361: LIST
77362: LIST
77363: LIST
77364: LIST
77365: LIST
77366: LIST
77367: ST_TO_ADDR
// tmp :=  ;
77368: LD_ADDR_VAR 0 3
77372: PUSH
77373: LD_STRING 
77375: ST_TO_ADDR
// for i = 1 to normalCounter do
77376: LD_ADDR_VAR 0 8
77380: PUSH
77381: DOUBLE
77382: LD_INT 1
77384: DEC
77385: ST_TO_ADDR
77386: LD_EXP 76
77390: PUSH
77391: FOR_TO
77392: IFFALSE 77428
// begin if flags [ i ] then
77394: LD_VAR 0 4
77398: PUSH
77399: LD_VAR 0 8
77403: ARRAY
77404: IFFALSE 77426
// tmp := tmp & i & ; ;
77406: LD_ADDR_VAR 0 3
77410: PUSH
77411: LD_VAR 0 3
77415: PUSH
77416: LD_VAR 0 8
77420: STR
77421: PUSH
77422: LD_STRING ;
77424: STR
77425: ST_TO_ADDR
// end ;
77426: GO 77391
77428: POP
77429: POP
// for i = 1 to hardcoreCounter do
77430: LD_ADDR_VAR 0 8
77434: PUSH
77435: DOUBLE
77436: LD_INT 1
77438: DEC
77439: ST_TO_ADDR
77440: LD_EXP 77
77444: PUSH
77445: FOR_TO
77446: IFFALSE 77492
// begin if flags [ normalCounter + i ] then
77448: LD_VAR 0 4
77452: PUSH
77453: LD_EXP 76
77457: PUSH
77458: LD_VAR 0 8
77462: PLUS
77463: ARRAY
77464: IFFALSE 77490
// tmp := tmp & ( 100 + i ) & ; ;
77466: LD_ADDR_VAR 0 3
77470: PUSH
77471: LD_VAR 0 3
77475: PUSH
77476: LD_INT 100
77478: PUSH
77479: LD_VAR 0 8
77483: PLUS
77484: STR
77485: PUSH
77486: LD_STRING ;
77488: STR
77489: ST_TO_ADDR
// end ;
77490: GO 77445
77492: POP
77493: POP
// if tmp then
77494: LD_VAR 0 3
77498: IFFALSE 77510
// active := tmp ;
77500: LD_ADDR_VAR 0 7
77504: PUSH
77505: LD_VAR 0 3
77509: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
77510: LD_STRING getStreamItemsFromMission("
77512: PUSH
77513: LD_VAR 0 5
77517: STR
77518: PUSH
77519: LD_STRING ","
77521: STR
77522: PUSH
77523: LD_VAR 0 6
77527: STR
77528: PUSH
77529: LD_STRING ","
77531: STR
77532: PUSH
77533: LD_VAR 0 7
77537: STR
77538: PUSH
77539: LD_STRING ")
77541: STR
77542: PPUSH
77543: CALL_OW 559
// end else
77547: GO 77556
// ToLua ( getStreamItemsFromMission("","","") ) ;
77549: LD_STRING getStreamItemsFromMission("","","")
77551: PPUSH
77552: CALL_OW 559
// end ;
77556: LD_VAR 0 2
77560: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
77561: LD_EXP 75
77565: PUSH
77566: LD_EXP 80
77570: AND
77571: IFFALSE 77695
77573: GO 77575
77575: DISABLE
77576: LD_INT 0
77578: PPUSH
77579: PPUSH
// begin enable ;
77580: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
77581: LD_ADDR_VAR 0 2
77585: PUSH
77586: LD_INT 22
77588: PUSH
77589: LD_OWVAR 2
77593: PUSH
77594: EMPTY
77595: LIST
77596: LIST
77597: PUSH
77598: LD_INT 2
77600: PUSH
77601: LD_INT 34
77603: PUSH
77604: LD_INT 7
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: PUSH
77611: LD_INT 34
77613: PUSH
77614: LD_INT 45
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: PUSH
77621: LD_INT 34
77623: PUSH
77624: LD_INT 28
77626: PUSH
77627: EMPTY
77628: LIST
77629: LIST
77630: PUSH
77631: LD_INT 34
77633: PUSH
77634: LD_INT 47
77636: PUSH
77637: EMPTY
77638: LIST
77639: LIST
77640: PUSH
77641: EMPTY
77642: LIST
77643: LIST
77644: LIST
77645: LIST
77646: LIST
77647: PUSH
77648: EMPTY
77649: LIST
77650: LIST
77651: PPUSH
77652: CALL_OW 69
77656: ST_TO_ADDR
// if not tmp then
77657: LD_VAR 0 2
77661: NOT
77662: IFFALSE 77666
// exit ;
77664: GO 77695
// for i in tmp do
77666: LD_ADDR_VAR 0 1
77670: PUSH
77671: LD_VAR 0 2
77675: PUSH
77676: FOR_IN
77677: IFFALSE 77693
// begin SetLives ( i , 0 ) ;
77679: LD_VAR 0 1
77683: PPUSH
77684: LD_INT 0
77686: PPUSH
77687: CALL_OW 234
// end ;
77691: GO 77676
77693: POP
77694: POP
// end ;
77695: PPOPN 2
77697: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
77698: LD_EXP 75
77702: PUSH
77703: LD_EXP 81
77707: AND
77708: IFFALSE 77792
77710: GO 77712
77712: DISABLE
77713: LD_INT 0
77715: PPUSH
77716: PPUSH
// begin enable ;
77717: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
77718: LD_ADDR_VAR 0 2
77722: PUSH
77723: LD_INT 22
77725: PUSH
77726: LD_OWVAR 2
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: PUSH
77735: LD_INT 32
77737: PUSH
77738: LD_INT 3
77740: PUSH
77741: EMPTY
77742: LIST
77743: LIST
77744: PUSH
77745: EMPTY
77746: LIST
77747: LIST
77748: PPUSH
77749: CALL_OW 69
77753: ST_TO_ADDR
// if not tmp then
77754: LD_VAR 0 2
77758: NOT
77759: IFFALSE 77763
// exit ;
77761: GO 77792
// for i in tmp do
77763: LD_ADDR_VAR 0 1
77767: PUSH
77768: LD_VAR 0 2
77772: PUSH
77773: FOR_IN
77774: IFFALSE 77790
// begin SetLives ( i , 0 ) ;
77776: LD_VAR 0 1
77780: PPUSH
77781: LD_INT 0
77783: PPUSH
77784: CALL_OW 234
// end ;
77788: GO 77773
77790: POP
77791: POP
// end ;
77792: PPOPN 2
77794: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
77795: LD_EXP 75
77799: PUSH
77800: LD_EXP 78
77804: AND
77805: IFFALSE 77898
77807: GO 77809
77809: DISABLE
77810: LD_INT 0
77812: PPUSH
// begin enable ;
77813: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
77814: LD_ADDR_VAR 0 1
77818: PUSH
77819: LD_INT 22
77821: PUSH
77822: LD_OWVAR 2
77826: PUSH
77827: EMPTY
77828: LIST
77829: LIST
77830: PUSH
77831: LD_INT 2
77833: PUSH
77834: LD_INT 25
77836: PUSH
77837: LD_INT 5
77839: PUSH
77840: EMPTY
77841: LIST
77842: LIST
77843: PUSH
77844: LD_INT 25
77846: PUSH
77847: LD_INT 9
77849: PUSH
77850: EMPTY
77851: LIST
77852: LIST
77853: PUSH
77854: LD_INT 25
77856: PUSH
77857: LD_INT 8
77859: PUSH
77860: EMPTY
77861: LIST
77862: LIST
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: LIST
77868: LIST
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PPUSH
77874: CALL_OW 69
77878: PUSH
77879: FOR_IN
77880: IFFALSE 77896
// begin SetClass ( i , 1 ) ;
77882: LD_VAR 0 1
77886: PPUSH
77887: LD_INT 1
77889: PPUSH
77890: CALL_OW 336
// end ;
77894: GO 77879
77896: POP
77897: POP
// end ;
77898: PPOPN 1
77900: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
77901: LD_EXP 75
77905: PUSH
77906: LD_EXP 79
77910: AND
77911: PUSH
77912: LD_OWVAR 65
77916: PUSH
77917: LD_INT 7
77919: LESS
77920: AND
77921: IFFALSE 77935
77923: GO 77925
77925: DISABLE
// begin enable ;
77926: ENABLE
// game_speed := 7 ;
77927: LD_ADDR_OWVAR 65
77931: PUSH
77932: LD_INT 7
77934: ST_TO_ADDR
// end ;
77935: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
77936: LD_EXP 75
77940: PUSH
77941: LD_EXP 82
77945: AND
77946: IFFALSE 78148
77948: GO 77950
77950: DISABLE
77951: LD_INT 0
77953: PPUSH
77954: PPUSH
77955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77956: LD_ADDR_VAR 0 3
77960: PUSH
77961: LD_INT 81
77963: PUSH
77964: LD_OWVAR 2
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: PUSH
77973: LD_INT 21
77975: PUSH
77976: LD_INT 1
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: PPUSH
77987: CALL_OW 69
77991: ST_TO_ADDR
// if not tmp then
77992: LD_VAR 0 3
77996: NOT
77997: IFFALSE 78001
// exit ;
77999: GO 78148
// if tmp > 5 then
78001: LD_VAR 0 3
78005: PUSH
78006: LD_INT 5
78008: GREATER
78009: IFFALSE 78021
// k := 5 else
78011: LD_ADDR_VAR 0 2
78015: PUSH
78016: LD_INT 5
78018: ST_TO_ADDR
78019: GO 78031
// k := tmp ;
78021: LD_ADDR_VAR 0 2
78025: PUSH
78026: LD_VAR 0 3
78030: ST_TO_ADDR
// for i := 1 to k do
78031: LD_ADDR_VAR 0 1
78035: PUSH
78036: DOUBLE
78037: LD_INT 1
78039: DEC
78040: ST_TO_ADDR
78041: LD_VAR 0 2
78045: PUSH
78046: FOR_TO
78047: IFFALSE 78146
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
78049: LD_VAR 0 3
78053: PUSH
78054: LD_VAR 0 1
78058: ARRAY
78059: PPUSH
78060: LD_VAR 0 1
78064: PUSH
78065: LD_INT 4
78067: MOD
78068: PUSH
78069: LD_INT 1
78071: PLUS
78072: PPUSH
78073: CALL_OW 259
78077: PUSH
78078: LD_INT 10
78080: LESS
78081: IFFALSE 78144
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
78083: LD_VAR 0 3
78087: PUSH
78088: LD_VAR 0 1
78092: ARRAY
78093: PPUSH
78094: LD_VAR 0 1
78098: PUSH
78099: LD_INT 4
78101: MOD
78102: PUSH
78103: LD_INT 1
78105: PLUS
78106: PPUSH
78107: LD_VAR 0 3
78111: PUSH
78112: LD_VAR 0 1
78116: ARRAY
78117: PPUSH
78118: LD_VAR 0 1
78122: PUSH
78123: LD_INT 4
78125: MOD
78126: PUSH
78127: LD_INT 1
78129: PLUS
78130: PPUSH
78131: CALL_OW 259
78135: PUSH
78136: LD_INT 1
78138: PLUS
78139: PPUSH
78140: CALL_OW 237
78144: GO 78046
78146: POP
78147: POP
// end ;
78148: PPOPN 3
78150: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
78151: LD_EXP 75
78155: PUSH
78156: LD_EXP 83
78160: AND
78161: IFFALSE 78181
78163: GO 78165
78165: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
78166: LD_INT 4
78168: PPUSH
78169: LD_OWVAR 2
78173: PPUSH
78174: LD_INT 0
78176: PPUSH
78177: CALL_OW 324
78181: END
// every 0 0$1 trigger StreamModeActive and sShovel do
78182: LD_EXP 75
78186: PUSH
78187: LD_EXP 112
78191: AND
78192: IFFALSE 78212
78194: GO 78196
78196: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
78197: LD_INT 19
78199: PPUSH
78200: LD_OWVAR 2
78204: PPUSH
78205: LD_INT 0
78207: PPUSH
78208: CALL_OW 324
78212: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
78213: LD_EXP 75
78217: PUSH
78218: LD_EXP 84
78222: AND
78223: IFFALSE 78325
78225: GO 78227
78227: DISABLE
78228: LD_INT 0
78230: PPUSH
78231: PPUSH
// begin enable ;
78232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
78233: LD_ADDR_VAR 0 2
78237: PUSH
78238: LD_INT 22
78240: PUSH
78241: LD_OWVAR 2
78245: PUSH
78246: EMPTY
78247: LIST
78248: LIST
78249: PUSH
78250: LD_INT 2
78252: PUSH
78253: LD_INT 34
78255: PUSH
78256: LD_INT 11
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: PUSH
78263: LD_INT 34
78265: PUSH
78266: LD_INT 30
78268: PUSH
78269: EMPTY
78270: LIST
78271: LIST
78272: PUSH
78273: EMPTY
78274: LIST
78275: LIST
78276: LIST
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PPUSH
78282: CALL_OW 69
78286: ST_TO_ADDR
// if not tmp then
78287: LD_VAR 0 2
78291: NOT
78292: IFFALSE 78296
// exit ;
78294: GO 78325
// for i in tmp do
78296: LD_ADDR_VAR 0 1
78300: PUSH
78301: LD_VAR 0 2
78305: PUSH
78306: FOR_IN
78307: IFFALSE 78323
// begin SetLives ( i , 0 ) ;
78309: LD_VAR 0 1
78313: PPUSH
78314: LD_INT 0
78316: PPUSH
78317: CALL_OW 234
// end ;
78321: GO 78306
78323: POP
78324: POP
// end ;
78325: PPOPN 2
78327: END
// every 0 0$1 trigger StreamModeActive and sBunker do
78328: LD_EXP 75
78332: PUSH
78333: LD_EXP 85
78337: AND
78338: IFFALSE 78358
78340: GO 78342
78342: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
78343: LD_INT 32
78345: PPUSH
78346: LD_OWVAR 2
78350: PPUSH
78351: LD_INT 0
78353: PPUSH
78354: CALL_OW 324
78358: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
78359: LD_EXP 75
78363: PUSH
78364: LD_EXP 86
78368: AND
78369: IFFALSE 78550
78371: GO 78373
78373: DISABLE
78374: LD_INT 0
78376: PPUSH
78377: PPUSH
78378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
78379: LD_ADDR_VAR 0 2
78383: PUSH
78384: LD_INT 22
78386: PUSH
78387: LD_OWVAR 2
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: LD_INT 33
78398: PUSH
78399: LD_INT 3
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: PPUSH
78410: CALL_OW 69
78414: ST_TO_ADDR
// if not tmp then
78415: LD_VAR 0 2
78419: NOT
78420: IFFALSE 78424
// exit ;
78422: GO 78550
// side := 0 ;
78424: LD_ADDR_VAR 0 3
78428: PUSH
78429: LD_INT 0
78431: ST_TO_ADDR
// for i := 1 to 8 do
78432: LD_ADDR_VAR 0 1
78436: PUSH
78437: DOUBLE
78438: LD_INT 1
78440: DEC
78441: ST_TO_ADDR
78442: LD_INT 8
78444: PUSH
78445: FOR_TO
78446: IFFALSE 78494
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
78448: LD_OWVAR 2
78452: PUSH
78453: LD_VAR 0 1
78457: NONEQUAL
78458: PUSH
78459: LD_OWVAR 2
78463: PPUSH
78464: LD_VAR 0 1
78468: PPUSH
78469: CALL_OW 81
78473: PUSH
78474: LD_INT 2
78476: EQUAL
78477: AND
78478: IFFALSE 78492
// begin side := i ;
78480: LD_ADDR_VAR 0 3
78484: PUSH
78485: LD_VAR 0 1
78489: ST_TO_ADDR
// break ;
78490: GO 78494
// end ;
78492: GO 78445
78494: POP
78495: POP
// if not side then
78496: LD_VAR 0 3
78500: NOT
78501: IFFALSE 78505
// exit ;
78503: GO 78550
// for i := 1 to tmp do
78505: LD_ADDR_VAR 0 1
78509: PUSH
78510: DOUBLE
78511: LD_INT 1
78513: DEC
78514: ST_TO_ADDR
78515: LD_VAR 0 2
78519: PUSH
78520: FOR_TO
78521: IFFALSE 78548
// if Prob ( 60 ) then
78523: LD_INT 60
78525: PPUSH
78526: CALL_OW 13
78530: IFFALSE 78546
// SetSide ( i , side ) ;
78532: LD_VAR 0 1
78536: PPUSH
78537: LD_VAR 0 3
78541: PPUSH
78542: CALL_OW 235
78546: GO 78520
78548: POP
78549: POP
// end ;
78550: PPOPN 3
78552: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
78553: LD_EXP 75
78557: PUSH
78558: LD_EXP 88
78562: AND
78563: IFFALSE 78682
78565: GO 78567
78567: DISABLE
78568: LD_INT 0
78570: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
78571: LD_ADDR_VAR 0 1
78575: PUSH
78576: LD_INT 22
78578: PUSH
78579: LD_OWVAR 2
78583: PUSH
78584: EMPTY
78585: LIST
78586: LIST
78587: PUSH
78588: LD_INT 21
78590: PUSH
78591: LD_INT 1
78593: PUSH
78594: EMPTY
78595: LIST
78596: LIST
78597: PUSH
78598: LD_INT 3
78600: PUSH
78601: LD_INT 23
78603: PUSH
78604: LD_INT 0
78606: PUSH
78607: EMPTY
78608: LIST
78609: LIST
78610: PUSH
78611: EMPTY
78612: LIST
78613: LIST
78614: PUSH
78615: EMPTY
78616: LIST
78617: LIST
78618: LIST
78619: PPUSH
78620: CALL_OW 69
78624: PUSH
78625: FOR_IN
78626: IFFALSE 78680
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
78628: LD_VAR 0 1
78632: PPUSH
78633: CALL_OW 257
78637: PUSH
78638: LD_INT 1
78640: PUSH
78641: LD_INT 2
78643: PUSH
78644: LD_INT 3
78646: PUSH
78647: LD_INT 4
78649: PUSH
78650: EMPTY
78651: LIST
78652: LIST
78653: LIST
78654: LIST
78655: IN
78656: IFFALSE 78678
// SetClass ( un , rand ( 1 , 4 ) ) ;
78658: LD_VAR 0 1
78662: PPUSH
78663: LD_INT 1
78665: PPUSH
78666: LD_INT 4
78668: PPUSH
78669: CALL_OW 12
78673: PPUSH
78674: CALL_OW 336
78678: GO 78625
78680: POP
78681: POP
// end ;
78682: PPOPN 1
78684: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
78685: LD_EXP 75
78689: PUSH
78690: LD_EXP 87
78694: AND
78695: IFFALSE 78774
78697: GO 78699
78699: DISABLE
78700: LD_INT 0
78702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78703: LD_ADDR_VAR 0 1
78707: PUSH
78708: LD_INT 22
78710: PUSH
78711: LD_OWVAR 2
78715: PUSH
78716: EMPTY
78717: LIST
78718: LIST
78719: PUSH
78720: LD_INT 21
78722: PUSH
78723: LD_INT 3
78725: PUSH
78726: EMPTY
78727: LIST
78728: LIST
78729: PUSH
78730: EMPTY
78731: LIST
78732: LIST
78733: PPUSH
78734: CALL_OW 69
78738: ST_TO_ADDR
// if not tmp then
78739: LD_VAR 0 1
78743: NOT
78744: IFFALSE 78748
// exit ;
78746: GO 78774
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
78748: LD_VAR 0 1
78752: PUSH
78753: LD_INT 1
78755: PPUSH
78756: LD_VAR 0 1
78760: PPUSH
78761: CALL_OW 12
78765: ARRAY
78766: PPUSH
78767: LD_INT 100
78769: PPUSH
78770: CALL_OW 234
// end ;
78774: PPOPN 1
78776: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
78777: LD_EXP 75
78781: PUSH
78782: LD_EXP 89
78786: AND
78787: IFFALSE 78885
78789: GO 78791
78791: DISABLE
78792: LD_INT 0
78794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78795: LD_ADDR_VAR 0 1
78799: PUSH
78800: LD_INT 22
78802: PUSH
78803: LD_OWVAR 2
78807: PUSH
78808: EMPTY
78809: LIST
78810: LIST
78811: PUSH
78812: LD_INT 21
78814: PUSH
78815: LD_INT 1
78817: PUSH
78818: EMPTY
78819: LIST
78820: LIST
78821: PUSH
78822: EMPTY
78823: LIST
78824: LIST
78825: PPUSH
78826: CALL_OW 69
78830: ST_TO_ADDR
// if not tmp then
78831: LD_VAR 0 1
78835: NOT
78836: IFFALSE 78840
// exit ;
78838: GO 78885
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
78840: LD_VAR 0 1
78844: PUSH
78845: LD_INT 1
78847: PPUSH
78848: LD_VAR 0 1
78852: PPUSH
78853: CALL_OW 12
78857: ARRAY
78858: PPUSH
78859: LD_INT 1
78861: PPUSH
78862: LD_INT 4
78864: PPUSH
78865: CALL_OW 12
78869: PPUSH
78870: LD_INT 3000
78872: PPUSH
78873: LD_INT 9000
78875: PPUSH
78876: CALL_OW 12
78880: PPUSH
78881: CALL_OW 492
// end ;
78885: PPOPN 1
78887: END
// every 0 0$1 trigger StreamModeActive and sDepot do
78888: LD_EXP 75
78892: PUSH
78893: LD_EXP 90
78897: AND
78898: IFFALSE 78918
78900: GO 78902
78902: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
78903: LD_INT 1
78905: PPUSH
78906: LD_OWVAR 2
78910: PPUSH
78911: LD_INT 0
78913: PPUSH
78914: CALL_OW 324
78918: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
78919: LD_EXP 75
78923: PUSH
78924: LD_EXP 91
78928: AND
78929: IFFALSE 79012
78931: GO 78933
78933: DISABLE
78934: LD_INT 0
78936: PPUSH
78937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78938: LD_ADDR_VAR 0 2
78942: PUSH
78943: LD_INT 22
78945: PUSH
78946: LD_OWVAR 2
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: PUSH
78955: LD_INT 21
78957: PUSH
78958: LD_INT 3
78960: PUSH
78961: EMPTY
78962: LIST
78963: LIST
78964: PUSH
78965: EMPTY
78966: LIST
78967: LIST
78968: PPUSH
78969: CALL_OW 69
78973: ST_TO_ADDR
// if not tmp then
78974: LD_VAR 0 2
78978: NOT
78979: IFFALSE 78983
// exit ;
78981: GO 79012
// for i in tmp do
78983: LD_ADDR_VAR 0 1
78987: PUSH
78988: LD_VAR 0 2
78992: PUSH
78993: FOR_IN
78994: IFFALSE 79010
// SetBLevel ( i , 10 ) ;
78996: LD_VAR 0 1
79000: PPUSH
79001: LD_INT 10
79003: PPUSH
79004: CALL_OW 241
79008: GO 78993
79010: POP
79011: POP
// end ;
79012: PPOPN 2
79014: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
79015: LD_EXP 75
79019: PUSH
79020: LD_EXP 92
79024: AND
79025: IFFALSE 79136
79027: GO 79029
79029: DISABLE
79030: LD_INT 0
79032: PPUSH
79033: PPUSH
79034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79035: LD_ADDR_VAR 0 3
79039: PUSH
79040: LD_INT 22
79042: PUSH
79043: LD_OWVAR 2
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: PUSH
79052: LD_INT 25
79054: PUSH
79055: LD_INT 1
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: PUSH
79062: EMPTY
79063: LIST
79064: LIST
79065: PPUSH
79066: CALL_OW 69
79070: ST_TO_ADDR
// if not tmp then
79071: LD_VAR 0 3
79075: NOT
79076: IFFALSE 79080
// exit ;
79078: GO 79136
// un := tmp [ rand ( 1 , tmp ) ] ;
79080: LD_ADDR_VAR 0 2
79084: PUSH
79085: LD_VAR 0 3
79089: PUSH
79090: LD_INT 1
79092: PPUSH
79093: LD_VAR 0 3
79097: PPUSH
79098: CALL_OW 12
79102: ARRAY
79103: ST_TO_ADDR
// if Crawls ( un ) then
79104: LD_VAR 0 2
79108: PPUSH
79109: CALL_OW 318
79113: IFFALSE 79124
// ComWalk ( un ) ;
79115: LD_VAR 0 2
79119: PPUSH
79120: CALL_OW 138
// SetClass ( un , class_sniper ) ;
79124: LD_VAR 0 2
79128: PPUSH
79129: LD_INT 5
79131: PPUSH
79132: CALL_OW 336
// end ;
79136: PPOPN 3
79138: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
79139: LD_EXP 75
79143: PUSH
79144: LD_EXP 93
79148: AND
79149: PUSH
79150: LD_OWVAR 67
79154: PUSH
79155: LD_INT 4
79157: LESS
79158: AND
79159: IFFALSE 79178
79161: GO 79163
79163: DISABLE
// begin Difficulty := Difficulty + 1 ;
79164: LD_ADDR_OWVAR 67
79168: PUSH
79169: LD_OWVAR 67
79173: PUSH
79174: LD_INT 1
79176: PLUS
79177: ST_TO_ADDR
// end ;
79178: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
79179: LD_EXP 75
79183: PUSH
79184: LD_EXP 94
79188: AND
79189: IFFALSE 79292
79191: GO 79193
79193: DISABLE
79194: LD_INT 0
79196: PPUSH
// begin for i := 1 to 5 do
79197: LD_ADDR_VAR 0 1
79201: PUSH
79202: DOUBLE
79203: LD_INT 1
79205: DEC
79206: ST_TO_ADDR
79207: LD_INT 5
79209: PUSH
79210: FOR_TO
79211: IFFALSE 79290
// begin uc_nation := nation_nature ;
79213: LD_ADDR_OWVAR 21
79217: PUSH
79218: LD_INT 0
79220: ST_TO_ADDR
// uc_side := 0 ;
79221: LD_ADDR_OWVAR 20
79225: PUSH
79226: LD_INT 0
79228: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79229: LD_ADDR_OWVAR 29
79233: PUSH
79234: LD_INT 12
79236: PUSH
79237: LD_INT 12
79239: PUSH
79240: EMPTY
79241: LIST
79242: LIST
79243: ST_TO_ADDR
// hc_agressivity := 20 ;
79244: LD_ADDR_OWVAR 35
79248: PUSH
79249: LD_INT 20
79251: ST_TO_ADDR
// hc_class := class_tiger ;
79252: LD_ADDR_OWVAR 28
79256: PUSH
79257: LD_INT 14
79259: ST_TO_ADDR
// hc_gallery :=  ;
79260: LD_ADDR_OWVAR 33
79264: PUSH
79265: LD_STRING 
79267: ST_TO_ADDR
// hc_name :=  ;
79268: LD_ADDR_OWVAR 26
79272: PUSH
79273: LD_STRING 
79275: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
79276: CALL_OW 44
79280: PPUSH
79281: LD_INT 0
79283: PPUSH
79284: CALL_OW 51
// end ;
79288: GO 79210
79290: POP
79291: POP
// end ;
79292: PPOPN 1
79294: END
// every 0 0$1 trigger StreamModeActive and sBomb do
79295: LD_EXP 75
79299: PUSH
79300: LD_EXP 95
79304: AND
79305: IFFALSE 79314
79307: GO 79309
79309: DISABLE
// StreamSibBomb ;
79310: CALL 79315 0 0
79314: END
// export function StreamSibBomb ; var i , x , y ; begin
79315: LD_INT 0
79317: PPUSH
79318: PPUSH
79319: PPUSH
79320: PPUSH
// result := false ;
79321: LD_ADDR_VAR 0 1
79325: PUSH
79326: LD_INT 0
79328: ST_TO_ADDR
// for i := 1 to 16 do
79329: LD_ADDR_VAR 0 2
79333: PUSH
79334: DOUBLE
79335: LD_INT 1
79337: DEC
79338: ST_TO_ADDR
79339: LD_INT 16
79341: PUSH
79342: FOR_TO
79343: IFFALSE 79542
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
79345: LD_ADDR_VAR 0 3
79349: PUSH
79350: LD_INT 10
79352: PUSH
79353: LD_INT 20
79355: PUSH
79356: LD_INT 30
79358: PUSH
79359: LD_INT 40
79361: PUSH
79362: LD_INT 50
79364: PUSH
79365: LD_INT 60
79367: PUSH
79368: LD_INT 70
79370: PUSH
79371: LD_INT 80
79373: PUSH
79374: LD_INT 90
79376: PUSH
79377: LD_INT 100
79379: PUSH
79380: LD_INT 110
79382: PUSH
79383: LD_INT 120
79385: PUSH
79386: LD_INT 130
79388: PUSH
79389: LD_INT 140
79391: PUSH
79392: LD_INT 150
79394: PUSH
79395: EMPTY
79396: LIST
79397: LIST
79398: LIST
79399: LIST
79400: LIST
79401: LIST
79402: LIST
79403: LIST
79404: LIST
79405: LIST
79406: LIST
79407: LIST
79408: LIST
79409: LIST
79410: LIST
79411: PUSH
79412: LD_INT 1
79414: PPUSH
79415: LD_INT 15
79417: PPUSH
79418: CALL_OW 12
79422: ARRAY
79423: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
79424: LD_ADDR_VAR 0 4
79428: PUSH
79429: LD_INT 10
79431: PUSH
79432: LD_INT 20
79434: PUSH
79435: LD_INT 30
79437: PUSH
79438: LD_INT 40
79440: PUSH
79441: LD_INT 50
79443: PUSH
79444: LD_INT 60
79446: PUSH
79447: LD_INT 70
79449: PUSH
79450: LD_INT 80
79452: PUSH
79453: LD_INT 90
79455: PUSH
79456: LD_INT 100
79458: PUSH
79459: LD_INT 110
79461: PUSH
79462: LD_INT 120
79464: PUSH
79465: LD_INT 130
79467: PUSH
79468: LD_INT 140
79470: PUSH
79471: LD_INT 150
79473: PUSH
79474: EMPTY
79475: LIST
79476: LIST
79477: LIST
79478: LIST
79479: LIST
79480: LIST
79481: LIST
79482: LIST
79483: LIST
79484: LIST
79485: LIST
79486: LIST
79487: LIST
79488: LIST
79489: LIST
79490: PUSH
79491: LD_INT 1
79493: PPUSH
79494: LD_INT 15
79496: PPUSH
79497: CALL_OW 12
79501: ARRAY
79502: ST_TO_ADDR
// if ValidHex ( x , y ) then
79503: LD_VAR 0 3
79507: PPUSH
79508: LD_VAR 0 4
79512: PPUSH
79513: CALL_OW 488
79517: IFFALSE 79540
// begin result := [ x , y ] ;
79519: LD_ADDR_VAR 0 1
79523: PUSH
79524: LD_VAR 0 3
79528: PUSH
79529: LD_VAR 0 4
79533: PUSH
79534: EMPTY
79535: LIST
79536: LIST
79537: ST_TO_ADDR
// break ;
79538: GO 79542
// end ; end ;
79540: GO 79342
79542: POP
79543: POP
// if result then
79544: LD_VAR 0 1
79548: IFFALSE 79608
// begin ToLua ( playSibBomb() ) ;
79550: LD_STRING playSibBomb()
79552: PPUSH
79553: CALL_OW 559
// wait ( 0 0$14 ) ;
79557: LD_INT 490
79559: PPUSH
79560: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
79564: LD_VAR 0 1
79568: PUSH
79569: LD_INT 1
79571: ARRAY
79572: PPUSH
79573: LD_VAR 0 1
79577: PUSH
79578: LD_INT 2
79580: ARRAY
79581: PPUSH
79582: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
79586: LD_VAR 0 1
79590: PUSH
79591: LD_INT 1
79593: ARRAY
79594: PPUSH
79595: LD_VAR 0 1
79599: PUSH
79600: LD_INT 2
79602: ARRAY
79603: PPUSH
79604: CALL_OW 429
// end ; end ;
79608: LD_VAR 0 1
79612: RET
// every 0 0$1 trigger StreamModeActive and sReset do
79613: LD_EXP 75
79617: PUSH
79618: LD_EXP 97
79622: AND
79623: IFFALSE 79635
79625: GO 79627
79627: DISABLE
// YouLost (  ) ;
79628: LD_STRING 
79630: PPUSH
79631: CALL_OW 104
79635: END
// every 0 0$1 trigger StreamModeActive and sFog do
79636: LD_EXP 75
79640: PUSH
79641: LD_EXP 96
79645: AND
79646: IFFALSE 79660
79648: GO 79650
79650: DISABLE
// FogOff ( your_side ) ;
79651: LD_OWVAR 2
79655: PPUSH
79656: CALL_OW 344
79660: END
// every 0 0$1 trigger StreamModeActive and sSun do
79661: LD_EXP 75
79665: PUSH
79666: LD_EXP 98
79670: AND
79671: IFFALSE 79699
79673: GO 79675
79675: DISABLE
// begin solar_recharge_percent := 0 ;
79676: LD_ADDR_OWVAR 79
79680: PUSH
79681: LD_INT 0
79683: ST_TO_ADDR
// wait ( 5 5$00 ) ;
79684: LD_INT 10500
79686: PPUSH
79687: CALL_OW 67
// solar_recharge_percent := 100 ;
79691: LD_ADDR_OWVAR 79
79695: PUSH
79696: LD_INT 100
79698: ST_TO_ADDR
// end ;
79699: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
79700: LD_EXP 75
79704: PUSH
79705: LD_EXP 99
79709: AND
79710: IFFALSE 79949
79712: GO 79714
79714: DISABLE
79715: LD_INT 0
79717: PPUSH
79718: PPUSH
79719: PPUSH
// begin tmp := [ ] ;
79720: LD_ADDR_VAR 0 3
79724: PUSH
79725: EMPTY
79726: ST_TO_ADDR
// for i := 1 to 6 do
79727: LD_ADDR_VAR 0 1
79731: PUSH
79732: DOUBLE
79733: LD_INT 1
79735: DEC
79736: ST_TO_ADDR
79737: LD_INT 6
79739: PUSH
79740: FOR_TO
79741: IFFALSE 79846
// begin uc_nation := nation_nature ;
79743: LD_ADDR_OWVAR 21
79747: PUSH
79748: LD_INT 0
79750: ST_TO_ADDR
// uc_side := 0 ;
79751: LD_ADDR_OWVAR 20
79755: PUSH
79756: LD_INT 0
79758: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79759: LD_ADDR_OWVAR 29
79763: PUSH
79764: LD_INT 12
79766: PUSH
79767: LD_INT 12
79769: PUSH
79770: EMPTY
79771: LIST
79772: LIST
79773: ST_TO_ADDR
// hc_agressivity := 20 ;
79774: LD_ADDR_OWVAR 35
79778: PUSH
79779: LD_INT 20
79781: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
79782: LD_ADDR_OWVAR 28
79786: PUSH
79787: LD_INT 17
79789: ST_TO_ADDR
// hc_gallery :=  ;
79790: LD_ADDR_OWVAR 33
79794: PUSH
79795: LD_STRING 
79797: ST_TO_ADDR
// hc_name :=  ;
79798: LD_ADDR_OWVAR 26
79802: PUSH
79803: LD_STRING 
79805: ST_TO_ADDR
// un := CreateHuman ;
79806: LD_ADDR_VAR 0 2
79810: PUSH
79811: CALL_OW 44
79815: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
79816: LD_VAR 0 2
79820: PPUSH
79821: LD_INT 1
79823: PPUSH
79824: CALL_OW 51
// tmp := tmp ^ un ;
79828: LD_ADDR_VAR 0 3
79832: PUSH
79833: LD_VAR 0 3
79837: PUSH
79838: LD_VAR 0 2
79842: ADD
79843: ST_TO_ADDR
// end ;
79844: GO 79740
79846: POP
79847: POP
// repeat wait ( 0 0$1 ) ;
79848: LD_INT 35
79850: PPUSH
79851: CALL_OW 67
// for un in tmp do
79855: LD_ADDR_VAR 0 2
79859: PUSH
79860: LD_VAR 0 3
79864: PUSH
79865: FOR_IN
79866: IFFALSE 79940
// begin if IsDead ( un ) then
79868: LD_VAR 0 2
79872: PPUSH
79873: CALL_OW 301
79877: IFFALSE 79897
// begin tmp := tmp diff un ;
79879: LD_ADDR_VAR 0 3
79883: PUSH
79884: LD_VAR 0 3
79888: PUSH
79889: LD_VAR 0 2
79893: DIFF
79894: ST_TO_ADDR
// continue ;
79895: GO 79865
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
79897: LD_VAR 0 2
79901: PPUSH
79902: LD_INT 3
79904: PUSH
79905: LD_INT 22
79907: PUSH
79908: LD_INT 0
79910: PUSH
79911: EMPTY
79912: LIST
79913: LIST
79914: PUSH
79915: EMPTY
79916: LIST
79917: LIST
79918: PPUSH
79919: CALL_OW 69
79923: PPUSH
79924: LD_VAR 0 2
79928: PPUSH
79929: CALL_OW 74
79933: PPUSH
79934: CALL_OW 115
// end ;
79938: GO 79865
79940: POP
79941: POP
// until not tmp ;
79942: LD_VAR 0 3
79946: NOT
79947: IFFALSE 79848
// end ;
79949: PPOPN 3
79951: END
// every 0 0$1 trigger StreamModeActive and sTroll do
79952: LD_EXP 75
79956: PUSH
79957: LD_EXP 100
79961: AND
79962: IFFALSE 80016
79964: GO 79966
79966: DISABLE
// begin ToLua ( displayTroll(); ) ;
79967: LD_STRING displayTroll();
79969: PPUSH
79970: CALL_OW 559
// wait ( 3 3$00 ) ;
79974: LD_INT 6300
79976: PPUSH
79977: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79981: LD_STRING hideTroll();
79983: PPUSH
79984: CALL_OW 559
// wait ( 1 1$00 ) ;
79988: LD_INT 2100
79990: PPUSH
79991: CALL_OW 67
// ToLua ( displayTroll(); ) ;
79995: LD_STRING displayTroll();
79997: PPUSH
79998: CALL_OW 559
// wait ( 1 1$00 ) ;
80002: LD_INT 2100
80004: PPUSH
80005: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80009: LD_STRING hideTroll();
80011: PPUSH
80012: CALL_OW 559
// end ;
80016: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
80017: LD_EXP 75
80021: PUSH
80022: LD_EXP 101
80026: AND
80027: IFFALSE 80090
80029: GO 80031
80031: DISABLE
80032: LD_INT 0
80034: PPUSH
// begin p := 0 ;
80035: LD_ADDR_VAR 0 1
80039: PUSH
80040: LD_INT 0
80042: ST_TO_ADDR
// repeat game_speed := 1 ;
80043: LD_ADDR_OWVAR 65
80047: PUSH
80048: LD_INT 1
80050: ST_TO_ADDR
// wait ( 0 0$1 ) ;
80051: LD_INT 35
80053: PPUSH
80054: CALL_OW 67
// p := p + 1 ;
80058: LD_ADDR_VAR 0 1
80062: PUSH
80063: LD_VAR 0 1
80067: PUSH
80068: LD_INT 1
80070: PLUS
80071: ST_TO_ADDR
// until p >= 60 ;
80072: LD_VAR 0 1
80076: PUSH
80077: LD_INT 60
80079: GREATEREQUAL
80080: IFFALSE 80043
// game_speed := 4 ;
80082: LD_ADDR_OWVAR 65
80086: PUSH
80087: LD_INT 4
80089: ST_TO_ADDR
// end ;
80090: PPOPN 1
80092: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
80093: LD_EXP 75
80097: PUSH
80098: LD_EXP 102
80102: AND
80103: IFFALSE 80249
80105: GO 80107
80107: DISABLE
80108: LD_INT 0
80110: PPUSH
80111: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80112: LD_ADDR_VAR 0 1
80116: PUSH
80117: LD_INT 22
80119: PUSH
80120: LD_OWVAR 2
80124: PUSH
80125: EMPTY
80126: LIST
80127: LIST
80128: PUSH
80129: LD_INT 2
80131: PUSH
80132: LD_INT 30
80134: PUSH
80135: LD_INT 0
80137: PUSH
80138: EMPTY
80139: LIST
80140: LIST
80141: PUSH
80142: LD_INT 30
80144: PUSH
80145: LD_INT 1
80147: PUSH
80148: EMPTY
80149: LIST
80150: LIST
80151: PUSH
80152: EMPTY
80153: LIST
80154: LIST
80155: LIST
80156: PUSH
80157: EMPTY
80158: LIST
80159: LIST
80160: PPUSH
80161: CALL_OW 69
80165: ST_TO_ADDR
// if not depot then
80166: LD_VAR 0 1
80170: NOT
80171: IFFALSE 80175
// exit ;
80173: GO 80249
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
80175: LD_ADDR_VAR 0 2
80179: PUSH
80180: LD_VAR 0 1
80184: PUSH
80185: LD_INT 1
80187: PPUSH
80188: LD_VAR 0 1
80192: PPUSH
80193: CALL_OW 12
80197: ARRAY
80198: PPUSH
80199: CALL_OW 274
80203: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
80204: LD_VAR 0 2
80208: PPUSH
80209: LD_INT 1
80211: PPUSH
80212: LD_INT 0
80214: PPUSH
80215: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
80219: LD_VAR 0 2
80223: PPUSH
80224: LD_INT 2
80226: PPUSH
80227: LD_INT 0
80229: PPUSH
80230: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
80234: LD_VAR 0 2
80238: PPUSH
80239: LD_INT 3
80241: PPUSH
80242: LD_INT 0
80244: PPUSH
80245: CALL_OW 277
// end ;
80249: PPOPN 2
80251: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
80252: LD_EXP 75
80256: PUSH
80257: LD_EXP 103
80261: AND
80262: IFFALSE 80359
80264: GO 80266
80266: DISABLE
80267: LD_INT 0
80269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80270: LD_ADDR_VAR 0 1
80274: PUSH
80275: LD_INT 22
80277: PUSH
80278: LD_OWVAR 2
80282: PUSH
80283: EMPTY
80284: LIST
80285: LIST
80286: PUSH
80287: LD_INT 21
80289: PUSH
80290: LD_INT 1
80292: PUSH
80293: EMPTY
80294: LIST
80295: LIST
80296: PUSH
80297: LD_INT 3
80299: PUSH
80300: LD_INT 23
80302: PUSH
80303: LD_INT 0
80305: PUSH
80306: EMPTY
80307: LIST
80308: LIST
80309: PUSH
80310: EMPTY
80311: LIST
80312: LIST
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: LIST
80318: PPUSH
80319: CALL_OW 69
80323: ST_TO_ADDR
// if not tmp then
80324: LD_VAR 0 1
80328: NOT
80329: IFFALSE 80333
// exit ;
80331: GO 80359
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
80333: LD_VAR 0 1
80337: PUSH
80338: LD_INT 1
80340: PPUSH
80341: LD_VAR 0 1
80345: PPUSH
80346: CALL_OW 12
80350: ARRAY
80351: PPUSH
80352: LD_INT 200
80354: PPUSH
80355: CALL_OW 234
// end ;
80359: PPOPN 1
80361: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
80362: LD_EXP 75
80366: PUSH
80367: LD_EXP 104
80371: AND
80372: IFFALSE 80451
80374: GO 80376
80376: DISABLE
80377: LD_INT 0
80379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
80380: LD_ADDR_VAR 0 1
80384: PUSH
80385: LD_INT 22
80387: PUSH
80388: LD_OWVAR 2
80392: PUSH
80393: EMPTY
80394: LIST
80395: LIST
80396: PUSH
80397: LD_INT 21
80399: PUSH
80400: LD_INT 2
80402: PUSH
80403: EMPTY
80404: LIST
80405: LIST
80406: PUSH
80407: EMPTY
80408: LIST
80409: LIST
80410: PPUSH
80411: CALL_OW 69
80415: ST_TO_ADDR
// if not tmp then
80416: LD_VAR 0 1
80420: NOT
80421: IFFALSE 80425
// exit ;
80423: GO 80451
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
80425: LD_VAR 0 1
80429: PUSH
80430: LD_INT 1
80432: PPUSH
80433: LD_VAR 0 1
80437: PPUSH
80438: CALL_OW 12
80442: ARRAY
80443: PPUSH
80444: LD_INT 60
80446: PPUSH
80447: CALL_OW 234
// end ;
80451: PPOPN 1
80453: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
80454: LD_EXP 75
80458: PUSH
80459: LD_EXP 105
80463: AND
80464: IFFALSE 80563
80466: GO 80468
80468: DISABLE
80469: LD_INT 0
80471: PPUSH
80472: PPUSH
// begin enable ;
80473: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
80474: LD_ADDR_VAR 0 1
80478: PUSH
80479: LD_INT 22
80481: PUSH
80482: LD_OWVAR 2
80486: PUSH
80487: EMPTY
80488: LIST
80489: LIST
80490: PUSH
80491: LD_INT 61
80493: PUSH
80494: EMPTY
80495: LIST
80496: PUSH
80497: LD_INT 33
80499: PUSH
80500: LD_INT 2
80502: PUSH
80503: EMPTY
80504: LIST
80505: LIST
80506: PUSH
80507: EMPTY
80508: LIST
80509: LIST
80510: LIST
80511: PPUSH
80512: CALL_OW 69
80516: ST_TO_ADDR
// if not tmp then
80517: LD_VAR 0 1
80521: NOT
80522: IFFALSE 80526
// exit ;
80524: GO 80563
// for i in tmp do
80526: LD_ADDR_VAR 0 2
80530: PUSH
80531: LD_VAR 0 1
80535: PUSH
80536: FOR_IN
80537: IFFALSE 80561
// if IsControledBy ( i ) then
80539: LD_VAR 0 2
80543: PPUSH
80544: CALL_OW 312
80548: IFFALSE 80559
// ComUnlink ( i ) ;
80550: LD_VAR 0 2
80554: PPUSH
80555: CALL_OW 136
80559: GO 80536
80561: POP
80562: POP
// end ;
80563: PPOPN 2
80565: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
80566: LD_EXP 75
80570: PUSH
80571: LD_EXP 106
80575: AND
80576: IFFALSE 80716
80578: GO 80580
80580: DISABLE
80581: LD_INT 0
80583: PPUSH
80584: PPUSH
// begin ToLua ( displayPowell(); ) ;
80585: LD_STRING displayPowell();
80587: PPUSH
80588: CALL_OW 559
// uc_side := 0 ;
80592: LD_ADDR_OWVAR 20
80596: PUSH
80597: LD_INT 0
80599: ST_TO_ADDR
// uc_nation := 2 ;
80600: LD_ADDR_OWVAR 21
80604: PUSH
80605: LD_INT 2
80607: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
80608: LD_ADDR_OWVAR 37
80612: PUSH
80613: LD_INT 14
80615: ST_TO_ADDR
// vc_engine := engine_siberite ;
80616: LD_ADDR_OWVAR 39
80620: PUSH
80621: LD_INT 3
80623: ST_TO_ADDR
// vc_control := control_apeman ;
80624: LD_ADDR_OWVAR 38
80628: PUSH
80629: LD_INT 5
80631: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
80632: LD_ADDR_OWVAR 40
80636: PUSH
80637: LD_INT 29
80639: ST_TO_ADDR
// un := CreateVehicle ;
80640: LD_ADDR_VAR 0 2
80644: PUSH
80645: CALL_OW 45
80649: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80650: LD_VAR 0 2
80654: PPUSH
80655: LD_INT 1
80657: PPUSH
80658: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80662: LD_INT 35
80664: PPUSH
80665: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80669: LD_VAR 0 2
80673: PPUSH
80674: LD_INT 22
80676: PUSH
80677: LD_OWVAR 2
80681: PUSH
80682: EMPTY
80683: LIST
80684: LIST
80685: PPUSH
80686: CALL_OW 69
80690: PPUSH
80691: LD_VAR 0 2
80695: PPUSH
80696: CALL_OW 74
80700: PPUSH
80701: CALL_OW 115
// until IsDead ( un ) ;
80705: LD_VAR 0 2
80709: PPUSH
80710: CALL_OW 301
80714: IFFALSE 80662
// end ;
80716: PPOPN 2
80718: END
// every 0 0$1 trigger StreamModeActive and sStu do
80719: LD_EXP 75
80723: PUSH
80724: LD_EXP 114
80728: AND
80729: IFFALSE 80745
80731: GO 80733
80733: DISABLE
// begin ToLua ( displayStucuk(); ) ;
80734: LD_STRING displayStucuk();
80736: PPUSH
80737: CALL_OW 559
// ResetFog ;
80741: CALL_OW 335
// end ;
80745: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
80746: LD_EXP 75
80750: PUSH
80751: LD_EXP 107
80755: AND
80756: IFFALSE 80897
80758: GO 80760
80760: DISABLE
80761: LD_INT 0
80763: PPUSH
80764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80765: LD_ADDR_VAR 0 2
80769: PUSH
80770: LD_INT 22
80772: PUSH
80773: LD_OWVAR 2
80777: PUSH
80778: EMPTY
80779: LIST
80780: LIST
80781: PUSH
80782: LD_INT 21
80784: PUSH
80785: LD_INT 1
80787: PUSH
80788: EMPTY
80789: LIST
80790: LIST
80791: PUSH
80792: EMPTY
80793: LIST
80794: LIST
80795: PPUSH
80796: CALL_OW 69
80800: ST_TO_ADDR
// if not tmp then
80801: LD_VAR 0 2
80805: NOT
80806: IFFALSE 80810
// exit ;
80808: GO 80897
// un := tmp [ rand ( 1 , tmp ) ] ;
80810: LD_ADDR_VAR 0 1
80814: PUSH
80815: LD_VAR 0 2
80819: PUSH
80820: LD_INT 1
80822: PPUSH
80823: LD_VAR 0 2
80827: PPUSH
80828: CALL_OW 12
80832: ARRAY
80833: ST_TO_ADDR
// SetSide ( un , 0 ) ;
80834: LD_VAR 0 1
80838: PPUSH
80839: LD_INT 0
80841: PPUSH
80842: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
80846: LD_VAR 0 1
80850: PPUSH
80851: LD_OWVAR 3
80855: PUSH
80856: LD_VAR 0 1
80860: DIFF
80861: PPUSH
80862: LD_VAR 0 1
80866: PPUSH
80867: CALL_OW 74
80871: PPUSH
80872: CALL_OW 115
// wait ( 0 0$20 ) ;
80876: LD_INT 700
80878: PPUSH
80879: CALL_OW 67
// SetSide ( un , your_side ) ;
80883: LD_VAR 0 1
80887: PPUSH
80888: LD_OWVAR 2
80892: PPUSH
80893: CALL_OW 235
// end ;
80897: PPOPN 2
80899: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
80900: LD_EXP 75
80904: PUSH
80905: LD_EXP 108
80909: AND
80910: IFFALSE 81016
80912: GO 80914
80914: DISABLE
80915: LD_INT 0
80917: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80918: LD_ADDR_VAR 0 1
80922: PUSH
80923: LD_INT 22
80925: PUSH
80926: LD_OWVAR 2
80930: PUSH
80931: EMPTY
80932: LIST
80933: LIST
80934: PUSH
80935: LD_INT 2
80937: PUSH
80938: LD_INT 30
80940: PUSH
80941: LD_INT 0
80943: PUSH
80944: EMPTY
80945: LIST
80946: LIST
80947: PUSH
80948: LD_INT 30
80950: PUSH
80951: LD_INT 1
80953: PUSH
80954: EMPTY
80955: LIST
80956: LIST
80957: PUSH
80958: EMPTY
80959: LIST
80960: LIST
80961: LIST
80962: PUSH
80963: EMPTY
80964: LIST
80965: LIST
80966: PPUSH
80967: CALL_OW 69
80971: ST_TO_ADDR
// if not depot then
80972: LD_VAR 0 1
80976: NOT
80977: IFFALSE 80981
// exit ;
80979: GO 81016
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
80981: LD_VAR 0 1
80985: PUSH
80986: LD_INT 1
80988: ARRAY
80989: PPUSH
80990: CALL_OW 250
80994: PPUSH
80995: LD_VAR 0 1
80999: PUSH
81000: LD_INT 1
81002: ARRAY
81003: PPUSH
81004: CALL_OW 251
81008: PPUSH
81009: LD_INT 70
81011: PPUSH
81012: CALL_OW 495
// end ;
81016: PPOPN 1
81018: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
81019: LD_EXP 75
81023: PUSH
81024: LD_EXP 109
81028: AND
81029: IFFALSE 81240
81031: GO 81033
81033: DISABLE
81034: LD_INT 0
81036: PPUSH
81037: PPUSH
81038: PPUSH
81039: PPUSH
81040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81041: LD_ADDR_VAR 0 5
81045: PUSH
81046: LD_INT 22
81048: PUSH
81049: LD_OWVAR 2
81053: PUSH
81054: EMPTY
81055: LIST
81056: LIST
81057: PUSH
81058: LD_INT 21
81060: PUSH
81061: LD_INT 1
81063: PUSH
81064: EMPTY
81065: LIST
81066: LIST
81067: PUSH
81068: EMPTY
81069: LIST
81070: LIST
81071: PPUSH
81072: CALL_OW 69
81076: ST_TO_ADDR
// if not tmp then
81077: LD_VAR 0 5
81081: NOT
81082: IFFALSE 81086
// exit ;
81084: GO 81240
// for i in tmp do
81086: LD_ADDR_VAR 0 1
81090: PUSH
81091: LD_VAR 0 5
81095: PUSH
81096: FOR_IN
81097: IFFALSE 81238
// begin d := rand ( 0 , 5 ) ;
81099: LD_ADDR_VAR 0 4
81103: PUSH
81104: LD_INT 0
81106: PPUSH
81107: LD_INT 5
81109: PPUSH
81110: CALL_OW 12
81114: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
81115: LD_ADDR_VAR 0 2
81119: PUSH
81120: LD_VAR 0 1
81124: PPUSH
81125: CALL_OW 250
81129: PPUSH
81130: LD_VAR 0 4
81134: PPUSH
81135: LD_INT 3
81137: PPUSH
81138: LD_INT 12
81140: PPUSH
81141: CALL_OW 12
81145: PPUSH
81146: CALL_OW 272
81150: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
81151: LD_ADDR_VAR 0 3
81155: PUSH
81156: LD_VAR 0 1
81160: PPUSH
81161: CALL_OW 251
81165: PPUSH
81166: LD_VAR 0 4
81170: PPUSH
81171: LD_INT 3
81173: PPUSH
81174: LD_INT 12
81176: PPUSH
81177: CALL_OW 12
81181: PPUSH
81182: CALL_OW 273
81186: ST_TO_ADDR
// if ValidHex ( x , y ) then
81187: LD_VAR 0 2
81191: PPUSH
81192: LD_VAR 0 3
81196: PPUSH
81197: CALL_OW 488
81201: IFFALSE 81236
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
81203: LD_VAR 0 1
81207: PPUSH
81208: LD_VAR 0 2
81212: PPUSH
81213: LD_VAR 0 3
81217: PPUSH
81218: LD_INT 3
81220: PPUSH
81221: LD_INT 6
81223: PPUSH
81224: CALL_OW 12
81228: PPUSH
81229: LD_INT 1
81231: PPUSH
81232: CALL_OW 483
// end ;
81236: GO 81096
81238: POP
81239: POP
// end ;
81240: PPOPN 5
81242: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
81243: LD_EXP 75
81247: PUSH
81248: LD_EXP 110
81252: AND
81253: IFFALSE 81347
81255: GO 81257
81257: DISABLE
81258: LD_INT 0
81260: PPUSH
81261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
81262: LD_ADDR_VAR 0 2
81266: PUSH
81267: LD_INT 22
81269: PUSH
81270: LD_OWVAR 2
81274: PUSH
81275: EMPTY
81276: LIST
81277: LIST
81278: PUSH
81279: LD_INT 32
81281: PUSH
81282: LD_INT 1
81284: PUSH
81285: EMPTY
81286: LIST
81287: LIST
81288: PUSH
81289: LD_INT 21
81291: PUSH
81292: LD_INT 2
81294: PUSH
81295: EMPTY
81296: LIST
81297: LIST
81298: PUSH
81299: EMPTY
81300: LIST
81301: LIST
81302: LIST
81303: PPUSH
81304: CALL_OW 69
81308: ST_TO_ADDR
// if not tmp then
81309: LD_VAR 0 2
81313: NOT
81314: IFFALSE 81318
// exit ;
81316: GO 81347
// for i in tmp do
81318: LD_ADDR_VAR 0 1
81322: PUSH
81323: LD_VAR 0 2
81327: PUSH
81328: FOR_IN
81329: IFFALSE 81345
// SetFuel ( i , 0 ) ;
81331: LD_VAR 0 1
81335: PPUSH
81336: LD_INT 0
81338: PPUSH
81339: CALL_OW 240
81343: GO 81328
81345: POP
81346: POP
// end ;
81347: PPOPN 2
81349: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
81350: LD_EXP 75
81354: PUSH
81355: LD_EXP 111
81359: AND
81360: IFFALSE 81426
81362: GO 81364
81364: DISABLE
81365: LD_INT 0
81367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81368: LD_ADDR_VAR 0 1
81372: PUSH
81373: LD_INT 22
81375: PUSH
81376: LD_OWVAR 2
81380: PUSH
81381: EMPTY
81382: LIST
81383: LIST
81384: PUSH
81385: LD_INT 30
81387: PUSH
81388: LD_INT 29
81390: PUSH
81391: EMPTY
81392: LIST
81393: LIST
81394: PUSH
81395: EMPTY
81396: LIST
81397: LIST
81398: PPUSH
81399: CALL_OW 69
81403: ST_TO_ADDR
// if not tmp then
81404: LD_VAR 0 1
81408: NOT
81409: IFFALSE 81413
// exit ;
81411: GO 81426
// DestroyUnit ( tmp [ 1 ] ) ;
81413: LD_VAR 0 1
81417: PUSH
81418: LD_INT 1
81420: ARRAY
81421: PPUSH
81422: CALL_OW 65
// end ;
81426: PPOPN 1
81428: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
81429: LD_EXP 75
81433: PUSH
81434: LD_EXP 113
81438: AND
81439: IFFALSE 81568
81441: GO 81443
81443: DISABLE
81444: LD_INT 0
81446: PPUSH
// begin uc_side := 0 ;
81447: LD_ADDR_OWVAR 20
81451: PUSH
81452: LD_INT 0
81454: ST_TO_ADDR
// uc_nation := nation_arabian ;
81455: LD_ADDR_OWVAR 21
81459: PUSH
81460: LD_INT 2
81462: ST_TO_ADDR
// hc_gallery :=  ;
81463: LD_ADDR_OWVAR 33
81467: PUSH
81468: LD_STRING 
81470: ST_TO_ADDR
// hc_name :=  ;
81471: LD_ADDR_OWVAR 26
81475: PUSH
81476: LD_STRING 
81478: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
81479: LD_INT 1
81481: PPUSH
81482: LD_INT 11
81484: PPUSH
81485: LD_INT 10
81487: PPUSH
81488: CALL_OW 380
// un := CreateHuman ;
81492: LD_ADDR_VAR 0 1
81496: PUSH
81497: CALL_OW 44
81501: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81502: LD_VAR 0 1
81506: PPUSH
81507: LD_INT 1
81509: PPUSH
81510: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81514: LD_INT 35
81516: PPUSH
81517: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81521: LD_VAR 0 1
81525: PPUSH
81526: LD_INT 22
81528: PUSH
81529: LD_OWVAR 2
81533: PUSH
81534: EMPTY
81535: LIST
81536: LIST
81537: PPUSH
81538: CALL_OW 69
81542: PPUSH
81543: LD_VAR 0 1
81547: PPUSH
81548: CALL_OW 74
81552: PPUSH
81553: CALL_OW 115
// until IsDead ( un ) ;
81557: LD_VAR 0 1
81561: PPUSH
81562: CALL_OW 301
81566: IFFALSE 81514
// end ;
81568: PPOPN 1
81570: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
81571: LD_EXP 75
81575: PUSH
81576: LD_EXP 115
81580: AND
81581: IFFALSE 81593
81583: GO 81585
81585: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
81586: LD_STRING earthquake(getX(game), 0, 32)
81588: PPUSH
81589: CALL_OW 559
81593: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
81594: LD_EXP 75
81598: PUSH
81599: LD_EXP 116
81603: AND
81604: IFFALSE 81695
81606: GO 81608
81608: DISABLE
81609: LD_INT 0
81611: PPUSH
// begin enable ;
81612: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
81613: LD_ADDR_VAR 0 1
81617: PUSH
81618: LD_INT 22
81620: PUSH
81621: LD_OWVAR 2
81625: PUSH
81626: EMPTY
81627: LIST
81628: LIST
81629: PUSH
81630: LD_INT 21
81632: PUSH
81633: LD_INT 2
81635: PUSH
81636: EMPTY
81637: LIST
81638: LIST
81639: PUSH
81640: LD_INT 33
81642: PUSH
81643: LD_INT 3
81645: PUSH
81646: EMPTY
81647: LIST
81648: LIST
81649: PUSH
81650: EMPTY
81651: LIST
81652: LIST
81653: LIST
81654: PPUSH
81655: CALL_OW 69
81659: ST_TO_ADDR
// if not tmp then
81660: LD_VAR 0 1
81664: NOT
81665: IFFALSE 81669
// exit ;
81667: GO 81695
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81669: LD_VAR 0 1
81673: PUSH
81674: LD_INT 1
81676: PPUSH
81677: LD_VAR 0 1
81681: PPUSH
81682: CALL_OW 12
81686: ARRAY
81687: PPUSH
81688: LD_INT 1
81690: PPUSH
81691: CALL_OW 234
// end ;
81695: PPOPN 1
81697: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
81698: LD_EXP 75
81702: PUSH
81703: LD_EXP 117
81707: AND
81708: IFFALSE 81849
81710: GO 81712
81712: DISABLE
81713: LD_INT 0
81715: PPUSH
81716: PPUSH
81717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81718: LD_ADDR_VAR 0 3
81722: PUSH
81723: LD_INT 22
81725: PUSH
81726: LD_OWVAR 2
81730: PUSH
81731: EMPTY
81732: LIST
81733: LIST
81734: PUSH
81735: LD_INT 25
81737: PUSH
81738: LD_INT 1
81740: PUSH
81741: EMPTY
81742: LIST
81743: LIST
81744: PUSH
81745: EMPTY
81746: LIST
81747: LIST
81748: PPUSH
81749: CALL_OW 69
81753: ST_TO_ADDR
// if not tmp then
81754: LD_VAR 0 3
81758: NOT
81759: IFFALSE 81763
// exit ;
81761: GO 81849
// un := tmp [ rand ( 1 , tmp ) ] ;
81763: LD_ADDR_VAR 0 2
81767: PUSH
81768: LD_VAR 0 3
81772: PUSH
81773: LD_INT 1
81775: PPUSH
81776: LD_VAR 0 3
81780: PPUSH
81781: CALL_OW 12
81785: ARRAY
81786: ST_TO_ADDR
// if Crawls ( un ) then
81787: LD_VAR 0 2
81791: PPUSH
81792: CALL_OW 318
81796: IFFALSE 81807
// ComWalk ( un ) ;
81798: LD_VAR 0 2
81802: PPUSH
81803: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
81807: LD_VAR 0 2
81811: PPUSH
81812: LD_INT 9
81814: PPUSH
81815: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
81819: LD_INT 28
81821: PPUSH
81822: LD_OWVAR 2
81826: PPUSH
81827: LD_INT 2
81829: PPUSH
81830: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
81834: LD_INT 29
81836: PPUSH
81837: LD_OWVAR 2
81841: PPUSH
81842: LD_INT 2
81844: PPUSH
81845: CALL_OW 322
// end ;
81849: PPOPN 3
81851: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
81852: LD_EXP 75
81856: PUSH
81857: LD_EXP 118
81861: AND
81862: IFFALSE 81973
81864: GO 81866
81866: DISABLE
81867: LD_INT 0
81869: PPUSH
81870: PPUSH
81871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81872: LD_ADDR_VAR 0 3
81876: PUSH
81877: LD_INT 22
81879: PUSH
81880: LD_OWVAR 2
81884: PUSH
81885: EMPTY
81886: LIST
81887: LIST
81888: PUSH
81889: LD_INT 25
81891: PUSH
81892: LD_INT 1
81894: PUSH
81895: EMPTY
81896: LIST
81897: LIST
81898: PUSH
81899: EMPTY
81900: LIST
81901: LIST
81902: PPUSH
81903: CALL_OW 69
81907: ST_TO_ADDR
// if not tmp then
81908: LD_VAR 0 3
81912: NOT
81913: IFFALSE 81917
// exit ;
81915: GO 81973
// un := tmp [ rand ( 1 , tmp ) ] ;
81917: LD_ADDR_VAR 0 2
81921: PUSH
81922: LD_VAR 0 3
81926: PUSH
81927: LD_INT 1
81929: PPUSH
81930: LD_VAR 0 3
81934: PPUSH
81935: CALL_OW 12
81939: ARRAY
81940: ST_TO_ADDR
// if Crawls ( un ) then
81941: LD_VAR 0 2
81945: PPUSH
81946: CALL_OW 318
81950: IFFALSE 81961
// ComWalk ( un ) ;
81952: LD_VAR 0 2
81956: PPUSH
81957: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81961: LD_VAR 0 2
81965: PPUSH
81966: LD_INT 8
81968: PPUSH
81969: CALL_OW 336
// end ;
81973: PPOPN 3
81975: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
81976: LD_EXP 75
81980: PUSH
81981: LD_EXP 119
81985: AND
81986: IFFALSE 82130
81988: GO 81990
81990: DISABLE
81991: LD_INT 0
81993: PPUSH
81994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
81995: LD_ADDR_VAR 0 2
81999: PUSH
82000: LD_INT 22
82002: PUSH
82003: LD_OWVAR 2
82007: PUSH
82008: EMPTY
82009: LIST
82010: LIST
82011: PUSH
82012: LD_INT 21
82014: PUSH
82015: LD_INT 2
82017: PUSH
82018: EMPTY
82019: LIST
82020: LIST
82021: PUSH
82022: LD_INT 2
82024: PUSH
82025: LD_INT 34
82027: PUSH
82028: LD_INT 12
82030: PUSH
82031: EMPTY
82032: LIST
82033: LIST
82034: PUSH
82035: LD_INT 34
82037: PUSH
82038: LD_INT 51
82040: PUSH
82041: EMPTY
82042: LIST
82043: LIST
82044: PUSH
82045: LD_INT 34
82047: PUSH
82048: LD_INT 32
82050: PUSH
82051: EMPTY
82052: LIST
82053: LIST
82054: PUSH
82055: EMPTY
82056: LIST
82057: LIST
82058: LIST
82059: LIST
82060: PUSH
82061: EMPTY
82062: LIST
82063: LIST
82064: LIST
82065: PPUSH
82066: CALL_OW 69
82070: ST_TO_ADDR
// if not tmp then
82071: LD_VAR 0 2
82075: NOT
82076: IFFALSE 82080
// exit ;
82078: GO 82130
// for i in tmp do
82080: LD_ADDR_VAR 0 1
82084: PUSH
82085: LD_VAR 0 2
82089: PUSH
82090: FOR_IN
82091: IFFALSE 82128
// if GetCargo ( i , mat_artifact ) = 0 then
82093: LD_VAR 0 1
82097: PPUSH
82098: LD_INT 4
82100: PPUSH
82101: CALL_OW 289
82105: PUSH
82106: LD_INT 0
82108: EQUAL
82109: IFFALSE 82126
// SetCargo ( i , mat_siberit , 100 ) ;
82111: LD_VAR 0 1
82115: PPUSH
82116: LD_INT 3
82118: PPUSH
82119: LD_INT 100
82121: PPUSH
82122: CALL_OW 290
82126: GO 82090
82128: POP
82129: POP
// end ;
82130: PPOPN 2
82132: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
82133: LD_EXP 75
82137: PUSH
82138: LD_EXP 120
82142: AND
82143: IFFALSE 82326
82145: GO 82147
82147: DISABLE
82148: LD_INT 0
82150: PPUSH
82151: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82152: LD_ADDR_VAR 0 2
82156: PUSH
82157: LD_INT 22
82159: PUSH
82160: LD_OWVAR 2
82164: PUSH
82165: EMPTY
82166: LIST
82167: LIST
82168: PPUSH
82169: CALL_OW 69
82173: ST_TO_ADDR
// if not tmp then
82174: LD_VAR 0 2
82178: NOT
82179: IFFALSE 82183
// exit ;
82181: GO 82326
// for i := 1 to 2 do
82183: LD_ADDR_VAR 0 1
82187: PUSH
82188: DOUBLE
82189: LD_INT 1
82191: DEC
82192: ST_TO_ADDR
82193: LD_INT 2
82195: PUSH
82196: FOR_TO
82197: IFFALSE 82324
// begin uc_side := your_side ;
82199: LD_ADDR_OWVAR 20
82203: PUSH
82204: LD_OWVAR 2
82208: ST_TO_ADDR
// uc_nation := nation_american ;
82209: LD_ADDR_OWVAR 21
82213: PUSH
82214: LD_INT 1
82216: ST_TO_ADDR
// vc_chassis := us_morphling ;
82217: LD_ADDR_OWVAR 37
82221: PUSH
82222: LD_INT 5
82224: ST_TO_ADDR
// vc_engine := engine_siberite ;
82225: LD_ADDR_OWVAR 39
82229: PUSH
82230: LD_INT 3
82232: ST_TO_ADDR
// vc_control := control_computer ;
82233: LD_ADDR_OWVAR 38
82237: PUSH
82238: LD_INT 3
82240: ST_TO_ADDR
// vc_weapon := us_double_laser ;
82241: LD_ADDR_OWVAR 40
82245: PUSH
82246: LD_INT 10
82248: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
82249: LD_VAR 0 2
82253: PUSH
82254: LD_INT 1
82256: ARRAY
82257: PPUSH
82258: CALL_OW 310
82262: NOT
82263: IFFALSE 82310
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
82265: CALL_OW 45
82269: PPUSH
82270: LD_VAR 0 2
82274: PUSH
82275: LD_INT 1
82277: ARRAY
82278: PPUSH
82279: CALL_OW 250
82283: PPUSH
82284: LD_VAR 0 2
82288: PUSH
82289: LD_INT 1
82291: ARRAY
82292: PPUSH
82293: CALL_OW 251
82297: PPUSH
82298: LD_INT 12
82300: PPUSH
82301: LD_INT 1
82303: PPUSH
82304: CALL_OW 50
82308: GO 82322
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
82310: CALL_OW 45
82314: PPUSH
82315: LD_INT 1
82317: PPUSH
82318: CALL_OW 51
// end ;
82322: GO 82196
82324: POP
82325: POP
// end ;
82326: PPOPN 2
82328: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
82329: LD_EXP 75
82333: PUSH
82334: LD_EXP 121
82338: AND
82339: IFFALSE 82561
82341: GO 82343
82343: DISABLE
82344: LD_INT 0
82346: PPUSH
82347: PPUSH
82348: PPUSH
82349: PPUSH
82350: PPUSH
82351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82352: LD_ADDR_VAR 0 6
82356: PUSH
82357: LD_INT 22
82359: PUSH
82360: LD_OWVAR 2
82364: PUSH
82365: EMPTY
82366: LIST
82367: LIST
82368: PUSH
82369: LD_INT 21
82371: PUSH
82372: LD_INT 1
82374: PUSH
82375: EMPTY
82376: LIST
82377: LIST
82378: PUSH
82379: LD_INT 3
82381: PUSH
82382: LD_INT 23
82384: PUSH
82385: LD_INT 0
82387: PUSH
82388: EMPTY
82389: LIST
82390: LIST
82391: PUSH
82392: EMPTY
82393: LIST
82394: LIST
82395: PUSH
82396: EMPTY
82397: LIST
82398: LIST
82399: LIST
82400: PPUSH
82401: CALL_OW 69
82405: ST_TO_ADDR
// if not tmp then
82406: LD_VAR 0 6
82410: NOT
82411: IFFALSE 82415
// exit ;
82413: GO 82561
// s1 := rand ( 1 , 4 ) ;
82415: LD_ADDR_VAR 0 2
82419: PUSH
82420: LD_INT 1
82422: PPUSH
82423: LD_INT 4
82425: PPUSH
82426: CALL_OW 12
82430: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
82431: LD_ADDR_VAR 0 4
82435: PUSH
82436: LD_VAR 0 6
82440: PUSH
82441: LD_INT 1
82443: ARRAY
82444: PPUSH
82445: LD_VAR 0 2
82449: PPUSH
82450: CALL_OW 259
82454: ST_TO_ADDR
// if s1 = 1 then
82455: LD_VAR 0 2
82459: PUSH
82460: LD_INT 1
82462: EQUAL
82463: IFFALSE 82483
// s2 := rand ( 2 , 4 ) else
82465: LD_ADDR_VAR 0 3
82469: PUSH
82470: LD_INT 2
82472: PPUSH
82473: LD_INT 4
82475: PPUSH
82476: CALL_OW 12
82480: ST_TO_ADDR
82481: GO 82491
// s2 := 1 ;
82483: LD_ADDR_VAR 0 3
82487: PUSH
82488: LD_INT 1
82490: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
82491: LD_ADDR_VAR 0 5
82495: PUSH
82496: LD_VAR 0 6
82500: PUSH
82501: LD_INT 1
82503: ARRAY
82504: PPUSH
82505: LD_VAR 0 3
82509: PPUSH
82510: CALL_OW 259
82514: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
82515: LD_VAR 0 6
82519: PUSH
82520: LD_INT 1
82522: ARRAY
82523: PPUSH
82524: LD_VAR 0 2
82528: PPUSH
82529: LD_VAR 0 5
82533: PPUSH
82534: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
82538: LD_VAR 0 6
82542: PUSH
82543: LD_INT 1
82545: ARRAY
82546: PPUSH
82547: LD_VAR 0 3
82551: PPUSH
82552: LD_VAR 0 4
82556: PPUSH
82557: CALL_OW 237
// end ;
82561: PPOPN 6
82563: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
82564: LD_EXP 75
82568: PUSH
82569: LD_EXP 122
82573: AND
82574: IFFALSE 82653
82576: GO 82578
82578: DISABLE
82579: LD_INT 0
82581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
82582: LD_ADDR_VAR 0 1
82586: PUSH
82587: LD_INT 22
82589: PUSH
82590: LD_OWVAR 2
82594: PUSH
82595: EMPTY
82596: LIST
82597: LIST
82598: PUSH
82599: LD_INT 30
82601: PUSH
82602: LD_INT 3
82604: PUSH
82605: EMPTY
82606: LIST
82607: LIST
82608: PUSH
82609: EMPTY
82610: LIST
82611: LIST
82612: PPUSH
82613: CALL_OW 69
82617: ST_TO_ADDR
// if not tmp then
82618: LD_VAR 0 1
82622: NOT
82623: IFFALSE 82627
// exit ;
82625: GO 82653
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82627: LD_VAR 0 1
82631: PUSH
82632: LD_INT 1
82634: PPUSH
82635: LD_VAR 0 1
82639: PPUSH
82640: CALL_OW 12
82644: ARRAY
82645: PPUSH
82646: LD_INT 1
82648: PPUSH
82649: CALL_OW 234
// end ;
82653: PPOPN 1
82655: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
82656: LD_EXP 75
82660: PUSH
82661: LD_EXP 123
82665: AND
82666: IFFALSE 82778
82668: GO 82670
82670: DISABLE
82671: LD_INT 0
82673: PPUSH
82674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
82675: LD_ADDR_VAR 0 2
82679: PUSH
82680: LD_INT 22
82682: PUSH
82683: LD_OWVAR 2
82687: PUSH
82688: EMPTY
82689: LIST
82690: LIST
82691: PUSH
82692: LD_INT 2
82694: PUSH
82695: LD_INT 30
82697: PUSH
82698: LD_INT 27
82700: PUSH
82701: EMPTY
82702: LIST
82703: LIST
82704: PUSH
82705: LD_INT 30
82707: PUSH
82708: LD_INT 26
82710: PUSH
82711: EMPTY
82712: LIST
82713: LIST
82714: PUSH
82715: LD_INT 30
82717: PUSH
82718: LD_INT 28
82720: PUSH
82721: EMPTY
82722: LIST
82723: LIST
82724: PUSH
82725: EMPTY
82726: LIST
82727: LIST
82728: LIST
82729: LIST
82730: PUSH
82731: EMPTY
82732: LIST
82733: LIST
82734: PPUSH
82735: CALL_OW 69
82739: ST_TO_ADDR
// if not tmp then
82740: LD_VAR 0 2
82744: NOT
82745: IFFALSE 82749
// exit ;
82747: GO 82778
// for i in tmp do
82749: LD_ADDR_VAR 0 1
82753: PUSH
82754: LD_VAR 0 2
82758: PUSH
82759: FOR_IN
82760: IFFALSE 82776
// SetLives ( i , 1 ) ;
82762: LD_VAR 0 1
82766: PPUSH
82767: LD_INT 1
82769: PPUSH
82770: CALL_OW 234
82774: GO 82759
82776: POP
82777: POP
// end ;
82778: PPOPN 2
82780: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
82781: LD_EXP 75
82785: PUSH
82786: LD_EXP 124
82790: AND
82791: IFFALSE 83078
82793: GO 82795
82795: DISABLE
82796: LD_INT 0
82798: PPUSH
82799: PPUSH
82800: PPUSH
// begin i := rand ( 1 , 7 ) ;
82801: LD_ADDR_VAR 0 1
82805: PUSH
82806: LD_INT 1
82808: PPUSH
82809: LD_INT 7
82811: PPUSH
82812: CALL_OW 12
82816: ST_TO_ADDR
// case i of 1 :
82817: LD_VAR 0 1
82821: PUSH
82822: LD_INT 1
82824: DOUBLE
82825: EQUAL
82826: IFTRUE 82830
82828: GO 82840
82830: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
82831: LD_STRING earthquake(getX(game), 0, 32)
82833: PPUSH
82834: CALL_OW 559
82838: GO 83078
82840: LD_INT 2
82842: DOUBLE
82843: EQUAL
82844: IFTRUE 82848
82846: GO 82862
82848: POP
// begin ToLua ( displayStucuk(); ) ;
82849: LD_STRING displayStucuk();
82851: PPUSH
82852: CALL_OW 559
// ResetFog ;
82856: CALL_OW 335
// end ; 3 :
82860: GO 83078
82862: LD_INT 3
82864: DOUBLE
82865: EQUAL
82866: IFTRUE 82870
82868: GO 82974
82870: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82871: LD_ADDR_VAR 0 2
82875: PUSH
82876: LD_INT 22
82878: PUSH
82879: LD_OWVAR 2
82883: PUSH
82884: EMPTY
82885: LIST
82886: LIST
82887: PUSH
82888: LD_INT 25
82890: PUSH
82891: LD_INT 1
82893: PUSH
82894: EMPTY
82895: LIST
82896: LIST
82897: PUSH
82898: EMPTY
82899: LIST
82900: LIST
82901: PPUSH
82902: CALL_OW 69
82906: ST_TO_ADDR
// if not tmp then
82907: LD_VAR 0 2
82911: NOT
82912: IFFALSE 82916
// exit ;
82914: GO 83078
// un := tmp [ rand ( 1 , tmp ) ] ;
82916: LD_ADDR_VAR 0 3
82920: PUSH
82921: LD_VAR 0 2
82925: PUSH
82926: LD_INT 1
82928: PPUSH
82929: LD_VAR 0 2
82933: PPUSH
82934: CALL_OW 12
82938: ARRAY
82939: ST_TO_ADDR
// if Crawls ( un ) then
82940: LD_VAR 0 3
82944: PPUSH
82945: CALL_OW 318
82949: IFFALSE 82960
// ComWalk ( un ) ;
82951: LD_VAR 0 3
82955: PPUSH
82956: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82960: LD_VAR 0 3
82964: PPUSH
82965: LD_INT 8
82967: PPUSH
82968: CALL_OW 336
// end ; 4 :
82972: GO 83078
82974: LD_INT 4
82976: DOUBLE
82977: EQUAL
82978: IFTRUE 82982
82980: GO 83056
82982: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82983: LD_ADDR_VAR 0 2
82987: PUSH
82988: LD_INT 22
82990: PUSH
82991: LD_OWVAR 2
82995: PUSH
82996: EMPTY
82997: LIST
82998: LIST
82999: PUSH
83000: LD_INT 30
83002: PUSH
83003: LD_INT 29
83005: PUSH
83006: EMPTY
83007: LIST
83008: LIST
83009: PUSH
83010: EMPTY
83011: LIST
83012: LIST
83013: PPUSH
83014: CALL_OW 69
83018: ST_TO_ADDR
// if not tmp then
83019: LD_VAR 0 2
83023: NOT
83024: IFFALSE 83028
// exit ;
83026: GO 83078
// CenterNowOnUnits ( tmp [ 1 ] ) ;
83028: LD_VAR 0 2
83032: PUSH
83033: LD_INT 1
83035: ARRAY
83036: PPUSH
83037: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
83041: LD_VAR 0 2
83045: PUSH
83046: LD_INT 1
83048: ARRAY
83049: PPUSH
83050: CALL_OW 65
// end ; 5 .. 7 :
83054: GO 83078
83056: LD_INT 5
83058: DOUBLE
83059: GREATEREQUAL
83060: IFFALSE 83068
83062: LD_INT 7
83064: DOUBLE
83065: LESSEQUAL
83066: IFTRUE 83070
83068: GO 83077
83070: POP
// StreamSibBomb ; end ;
83071: CALL 79315 0 0
83075: GO 83078
83077: POP
// end ;
83078: PPOPN 3
83080: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
83081: LD_EXP 75
83085: PUSH
83086: LD_EXP 125
83090: AND
83091: IFFALSE 83247
83093: GO 83095
83095: DISABLE
83096: LD_INT 0
83098: PPUSH
83099: PPUSH
83100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
83101: LD_ADDR_VAR 0 2
83105: PUSH
83106: LD_INT 81
83108: PUSH
83109: LD_OWVAR 2
83113: PUSH
83114: EMPTY
83115: LIST
83116: LIST
83117: PUSH
83118: LD_INT 2
83120: PUSH
83121: LD_INT 21
83123: PUSH
83124: LD_INT 1
83126: PUSH
83127: EMPTY
83128: LIST
83129: LIST
83130: PUSH
83131: LD_INT 21
83133: PUSH
83134: LD_INT 2
83136: PUSH
83137: EMPTY
83138: LIST
83139: LIST
83140: PUSH
83141: EMPTY
83142: LIST
83143: LIST
83144: LIST
83145: PUSH
83146: EMPTY
83147: LIST
83148: LIST
83149: PPUSH
83150: CALL_OW 69
83154: ST_TO_ADDR
// if not tmp then
83155: LD_VAR 0 2
83159: NOT
83160: IFFALSE 83164
// exit ;
83162: GO 83247
// p := 0 ;
83164: LD_ADDR_VAR 0 3
83168: PUSH
83169: LD_INT 0
83171: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83172: LD_INT 35
83174: PPUSH
83175: CALL_OW 67
// p := p + 1 ;
83179: LD_ADDR_VAR 0 3
83183: PUSH
83184: LD_VAR 0 3
83188: PUSH
83189: LD_INT 1
83191: PLUS
83192: ST_TO_ADDR
// for i in tmp do
83193: LD_ADDR_VAR 0 1
83197: PUSH
83198: LD_VAR 0 2
83202: PUSH
83203: FOR_IN
83204: IFFALSE 83235
// if GetLives ( i ) < 1000 then
83206: LD_VAR 0 1
83210: PPUSH
83211: CALL_OW 256
83215: PUSH
83216: LD_INT 1000
83218: LESS
83219: IFFALSE 83233
// SetLives ( i , 1000 ) ;
83221: LD_VAR 0 1
83225: PPUSH
83226: LD_INT 1000
83228: PPUSH
83229: CALL_OW 234
83233: GO 83203
83235: POP
83236: POP
// until p > 20 ;
83237: LD_VAR 0 3
83241: PUSH
83242: LD_INT 20
83244: GREATER
83245: IFFALSE 83172
// end ;
83247: PPOPN 3
83249: END
// every 0 0$1 trigger StreamModeActive and sTime do
83250: LD_EXP 75
83254: PUSH
83255: LD_EXP 126
83259: AND
83260: IFFALSE 83295
83262: GO 83264
83264: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
83265: LD_INT 28
83267: PPUSH
83268: LD_OWVAR 2
83272: PPUSH
83273: LD_INT 2
83275: PPUSH
83276: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
83280: LD_INT 30
83282: PPUSH
83283: LD_OWVAR 2
83287: PPUSH
83288: LD_INT 2
83290: PPUSH
83291: CALL_OW 322
// end ;
83295: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
83296: LD_EXP 75
83300: PUSH
83301: LD_EXP 127
83305: AND
83306: IFFALSE 83427
83308: GO 83310
83310: DISABLE
83311: LD_INT 0
83313: PPUSH
83314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
83315: LD_ADDR_VAR 0 2
83319: PUSH
83320: LD_INT 22
83322: PUSH
83323: LD_OWVAR 2
83327: PUSH
83328: EMPTY
83329: LIST
83330: LIST
83331: PUSH
83332: LD_INT 21
83334: PUSH
83335: LD_INT 1
83337: PUSH
83338: EMPTY
83339: LIST
83340: LIST
83341: PUSH
83342: LD_INT 3
83344: PUSH
83345: LD_INT 23
83347: PUSH
83348: LD_INT 0
83350: PUSH
83351: EMPTY
83352: LIST
83353: LIST
83354: PUSH
83355: EMPTY
83356: LIST
83357: LIST
83358: PUSH
83359: EMPTY
83360: LIST
83361: LIST
83362: LIST
83363: PPUSH
83364: CALL_OW 69
83368: ST_TO_ADDR
// if not tmp then
83369: LD_VAR 0 2
83373: NOT
83374: IFFALSE 83378
// exit ;
83376: GO 83427
// for i in tmp do
83378: LD_ADDR_VAR 0 1
83382: PUSH
83383: LD_VAR 0 2
83387: PUSH
83388: FOR_IN
83389: IFFALSE 83425
// begin if Crawls ( i ) then
83391: LD_VAR 0 1
83395: PPUSH
83396: CALL_OW 318
83400: IFFALSE 83411
// ComWalk ( i ) ;
83402: LD_VAR 0 1
83406: PPUSH
83407: CALL_OW 138
// SetClass ( i , 2 ) ;
83411: LD_VAR 0 1
83415: PPUSH
83416: LD_INT 2
83418: PPUSH
83419: CALL_OW 336
// end ;
83423: GO 83388
83425: POP
83426: POP
// end ;
83427: PPOPN 2
83429: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
83430: LD_EXP 75
83434: PUSH
83435: LD_EXP 128
83439: AND
83440: IFFALSE 83728
83442: GO 83444
83444: DISABLE
83445: LD_INT 0
83447: PPUSH
83448: PPUSH
83449: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
83450: LD_OWVAR 2
83454: PPUSH
83455: LD_INT 9
83457: PPUSH
83458: LD_INT 1
83460: PPUSH
83461: LD_INT 1
83463: PPUSH
83464: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
83468: LD_INT 9
83470: PPUSH
83471: LD_OWVAR 2
83475: PPUSH
83476: CALL_OW 343
// uc_side := 9 ;
83480: LD_ADDR_OWVAR 20
83484: PUSH
83485: LD_INT 9
83487: ST_TO_ADDR
// uc_nation := 2 ;
83488: LD_ADDR_OWVAR 21
83492: PUSH
83493: LD_INT 2
83495: ST_TO_ADDR
// hc_name := Dark Warrior ;
83496: LD_ADDR_OWVAR 26
83500: PUSH
83501: LD_STRING Dark Warrior
83503: ST_TO_ADDR
// hc_gallery :=  ;
83504: LD_ADDR_OWVAR 33
83508: PUSH
83509: LD_STRING 
83511: ST_TO_ADDR
// hc_noskilllimit := true ;
83512: LD_ADDR_OWVAR 76
83516: PUSH
83517: LD_INT 1
83519: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
83520: LD_ADDR_OWVAR 31
83524: PUSH
83525: LD_INT 30
83527: PUSH
83528: LD_INT 30
83530: PUSH
83531: LD_INT 30
83533: PUSH
83534: LD_INT 30
83536: PUSH
83537: EMPTY
83538: LIST
83539: LIST
83540: LIST
83541: LIST
83542: ST_TO_ADDR
// un := CreateHuman ;
83543: LD_ADDR_VAR 0 3
83547: PUSH
83548: CALL_OW 44
83552: ST_TO_ADDR
// hc_noskilllimit := false ;
83553: LD_ADDR_OWVAR 76
83557: PUSH
83558: LD_INT 0
83560: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83561: LD_VAR 0 3
83565: PPUSH
83566: LD_INT 1
83568: PPUSH
83569: CALL_OW 51
// ToLua ( playRanger() ) ;
83573: LD_STRING playRanger()
83575: PPUSH
83576: CALL_OW 559
// p := 0 ;
83580: LD_ADDR_VAR 0 2
83584: PUSH
83585: LD_INT 0
83587: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83588: LD_INT 35
83590: PPUSH
83591: CALL_OW 67
// p := p + 1 ;
83595: LD_ADDR_VAR 0 2
83599: PUSH
83600: LD_VAR 0 2
83604: PUSH
83605: LD_INT 1
83607: PLUS
83608: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
83609: LD_VAR 0 3
83613: PPUSH
83614: CALL_OW 256
83618: PUSH
83619: LD_INT 1000
83621: LESS
83622: IFFALSE 83636
// SetLives ( un , 1000 ) ;
83624: LD_VAR 0 3
83628: PPUSH
83629: LD_INT 1000
83631: PPUSH
83632: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
83636: LD_VAR 0 3
83640: PPUSH
83641: LD_INT 81
83643: PUSH
83644: LD_OWVAR 2
83648: PUSH
83649: EMPTY
83650: LIST
83651: LIST
83652: PUSH
83653: LD_INT 91
83655: PUSH
83656: LD_VAR 0 3
83660: PUSH
83661: LD_INT 30
83663: PUSH
83664: EMPTY
83665: LIST
83666: LIST
83667: LIST
83668: PUSH
83669: EMPTY
83670: LIST
83671: LIST
83672: PPUSH
83673: CALL_OW 69
83677: PPUSH
83678: LD_VAR 0 3
83682: PPUSH
83683: CALL_OW 74
83687: PPUSH
83688: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
83692: LD_VAR 0 2
83696: PUSH
83697: LD_INT 80
83699: GREATER
83700: PUSH
83701: LD_VAR 0 3
83705: PPUSH
83706: CALL_OW 301
83710: OR
83711: IFFALSE 83588
// if un then
83713: LD_VAR 0 3
83717: IFFALSE 83728
// RemoveUnit ( un ) ;
83719: LD_VAR 0 3
83723: PPUSH
83724: CALL_OW 64
// end ;
83728: PPOPN 3
83730: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
83731: LD_EXP 129
83735: IFFALSE 83851
83737: GO 83739
83739: DISABLE
83740: LD_INT 0
83742: PPUSH
83743: PPUSH
83744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
83745: LD_ADDR_VAR 0 2
83749: PUSH
83750: LD_INT 81
83752: PUSH
83753: LD_OWVAR 2
83757: PUSH
83758: EMPTY
83759: LIST
83760: LIST
83761: PUSH
83762: LD_INT 21
83764: PUSH
83765: LD_INT 1
83767: PUSH
83768: EMPTY
83769: LIST
83770: LIST
83771: PUSH
83772: EMPTY
83773: LIST
83774: LIST
83775: PPUSH
83776: CALL_OW 69
83780: ST_TO_ADDR
// ToLua ( playComputer() ) ;
83781: LD_STRING playComputer()
83783: PPUSH
83784: CALL_OW 559
// if not tmp then
83788: LD_VAR 0 2
83792: NOT
83793: IFFALSE 83797
// exit ;
83795: GO 83851
// for i in tmp do
83797: LD_ADDR_VAR 0 1
83801: PUSH
83802: LD_VAR 0 2
83806: PUSH
83807: FOR_IN
83808: IFFALSE 83849
// for j := 1 to 4 do
83810: LD_ADDR_VAR 0 3
83814: PUSH
83815: DOUBLE
83816: LD_INT 1
83818: DEC
83819: ST_TO_ADDR
83820: LD_INT 4
83822: PUSH
83823: FOR_TO
83824: IFFALSE 83845
// SetSkill ( i , j , 10 ) ;
83826: LD_VAR 0 1
83830: PPUSH
83831: LD_VAR 0 3
83835: PPUSH
83836: LD_INT 10
83838: PPUSH
83839: CALL_OW 237
83843: GO 83823
83845: POP
83846: POP
83847: GO 83807
83849: POP
83850: POP
// end ;
83851: PPOPN 3
83853: END
// every 0 0$1 trigger s30 do var i , tmp ;
83854: LD_EXP 130
83858: IFFALSE 83927
83860: GO 83862
83862: DISABLE
83863: LD_INT 0
83865: PPUSH
83866: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83867: LD_ADDR_VAR 0 2
83871: PUSH
83872: LD_INT 22
83874: PUSH
83875: LD_OWVAR 2
83879: PUSH
83880: EMPTY
83881: LIST
83882: LIST
83883: PPUSH
83884: CALL_OW 69
83888: ST_TO_ADDR
// if not tmp then
83889: LD_VAR 0 2
83893: NOT
83894: IFFALSE 83898
// exit ;
83896: GO 83927
// for i in tmp do
83898: LD_ADDR_VAR 0 1
83902: PUSH
83903: LD_VAR 0 2
83907: PUSH
83908: FOR_IN
83909: IFFALSE 83925
// SetLives ( i , 300 ) ;
83911: LD_VAR 0 1
83915: PPUSH
83916: LD_INT 300
83918: PPUSH
83919: CALL_OW 234
83923: GO 83908
83925: POP
83926: POP
// end ;
83927: PPOPN 2
83929: END
// every 0 0$1 trigger s60 do var i , tmp ;
83930: LD_EXP 131
83934: IFFALSE 84003
83936: GO 83938
83938: DISABLE
83939: LD_INT 0
83941: PPUSH
83942: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83943: LD_ADDR_VAR 0 2
83947: PUSH
83948: LD_INT 22
83950: PUSH
83951: LD_OWVAR 2
83955: PUSH
83956: EMPTY
83957: LIST
83958: LIST
83959: PPUSH
83960: CALL_OW 69
83964: ST_TO_ADDR
// if not tmp then
83965: LD_VAR 0 2
83969: NOT
83970: IFFALSE 83974
// exit ;
83972: GO 84003
// for i in tmp do
83974: LD_ADDR_VAR 0 1
83978: PUSH
83979: LD_VAR 0 2
83983: PUSH
83984: FOR_IN
83985: IFFALSE 84001
// SetLives ( i , 600 ) ;
83987: LD_VAR 0 1
83991: PPUSH
83992: LD_INT 600
83994: PPUSH
83995: CALL_OW 234
83999: GO 83984
84001: POP
84002: POP
// end ;
84003: PPOPN 2
84005: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
84006: LD_INT 0
84008: PPUSH
// case cmd of 301 :
84009: LD_VAR 0 1
84013: PUSH
84014: LD_INT 301
84016: DOUBLE
84017: EQUAL
84018: IFTRUE 84022
84020: GO 84054
84022: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
84023: LD_VAR 0 6
84027: PPUSH
84028: LD_VAR 0 7
84032: PPUSH
84033: LD_VAR 0 8
84037: PPUSH
84038: LD_VAR 0 4
84042: PPUSH
84043: LD_VAR 0 5
84047: PPUSH
84048: CALL 85263 0 5
84052: GO 84175
84054: LD_INT 302
84056: DOUBLE
84057: EQUAL
84058: IFTRUE 84062
84060: GO 84099
84062: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
84063: LD_VAR 0 6
84067: PPUSH
84068: LD_VAR 0 7
84072: PPUSH
84073: LD_VAR 0 8
84077: PPUSH
84078: LD_VAR 0 9
84082: PPUSH
84083: LD_VAR 0 4
84087: PPUSH
84088: LD_VAR 0 5
84092: PPUSH
84093: CALL 85354 0 6
84097: GO 84175
84099: LD_INT 303
84101: DOUBLE
84102: EQUAL
84103: IFTRUE 84107
84105: GO 84144
84107: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
84108: LD_VAR 0 6
84112: PPUSH
84113: LD_VAR 0 7
84117: PPUSH
84118: LD_VAR 0 8
84122: PPUSH
84123: LD_VAR 0 9
84127: PPUSH
84128: LD_VAR 0 4
84132: PPUSH
84133: LD_VAR 0 5
84137: PPUSH
84138: CALL 84180 0 6
84142: GO 84175
84144: LD_INT 304
84146: DOUBLE
84147: EQUAL
84148: IFTRUE 84152
84150: GO 84174
84152: POP
// hHackTeleport ( unit , x , y ) ; end ;
84153: LD_VAR 0 2
84157: PPUSH
84158: LD_VAR 0 4
84162: PPUSH
84163: LD_VAR 0 5
84167: PPUSH
84168: CALL 85947 0 3
84172: GO 84175
84174: POP
// end ;
84175: LD_VAR 0 12
84179: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
84180: LD_INT 0
84182: PPUSH
84183: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
84184: LD_VAR 0 1
84188: PUSH
84189: LD_INT 1
84191: LESS
84192: PUSH
84193: LD_VAR 0 1
84197: PUSH
84198: LD_INT 3
84200: GREATER
84201: OR
84202: PUSH
84203: LD_VAR 0 5
84207: PPUSH
84208: LD_VAR 0 6
84212: PPUSH
84213: CALL_OW 428
84217: OR
84218: IFFALSE 84222
// exit ;
84220: GO 84950
// uc_side := your_side ;
84222: LD_ADDR_OWVAR 20
84226: PUSH
84227: LD_OWVAR 2
84231: ST_TO_ADDR
// uc_nation := nation ;
84232: LD_ADDR_OWVAR 21
84236: PUSH
84237: LD_VAR 0 1
84241: ST_TO_ADDR
// bc_level = 1 ;
84242: LD_ADDR_OWVAR 43
84246: PUSH
84247: LD_INT 1
84249: ST_TO_ADDR
// case btype of 1 :
84250: LD_VAR 0 2
84254: PUSH
84255: LD_INT 1
84257: DOUBLE
84258: EQUAL
84259: IFTRUE 84263
84261: GO 84274
84263: POP
// bc_type := b_depot ; 2 :
84264: LD_ADDR_OWVAR 42
84268: PUSH
84269: LD_INT 0
84271: ST_TO_ADDR
84272: GO 84894
84274: LD_INT 2
84276: DOUBLE
84277: EQUAL
84278: IFTRUE 84282
84280: GO 84293
84282: POP
// bc_type := b_warehouse ; 3 :
84283: LD_ADDR_OWVAR 42
84287: PUSH
84288: LD_INT 1
84290: ST_TO_ADDR
84291: GO 84894
84293: LD_INT 3
84295: DOUBLE
84296: EQUAL
84297: IFTRUE 84301
84299: GO 84312
84301: POP
// bc_type := b_lab ; 4 .. 9 :
84302: LD_ADDR_OWVAR 42
84306: PUSH
84307: LD_INT 6
84309: ST_TO_ADDR
84310: GO 84894
84312: LD_INT 4
84314: DOUBLE
84315: GREATEREQUAL
84316: IFFALSE 84324
84318: LD_INT 9
84320: DOUBLE
84321: LESSEQUAL
84322: IFTRUE 84326
84324: GO 84386
84326: POP
// begin bc_type := b_lab_half ;
84327: LD_ADDR_OWVAR 42
84331: PUSH
84332: LD_INT 7
84334: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
84335: LD_ADDR_OWVAR 44
84339: PUSH
84340: LD_INT 10
84342: PUSH
84343: LD_INT 11
84345: PUSH
84346: LD_INT 12
84348: PUSH
84349: LD_INT 15
84351: PUSH
84352: LD_INT 14
84354: PUSH
84355: LD_INT 13
84357: PUSH
84358: EMPTY
84359: LIST
84360: LIST
84361: LIST
84362: LIST
84363: LIST
84364: LIST
84365: PUSH
84366: LD_VAR 0 2
84370: PUSH
84371: LD_INT 3
84373: MINUS
84374: ARRAY
84375: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
84376: LD_ADDR_OWVAR 45
84380: PUSH
84381: LD_INT 9
84383: ST_TO_ADDR
// end ; 10 .. 13 :
84384: GO 84894
84386: LD_INT 10
84388: DOUBLE
84389: GREATEREQUAL
84390: IFFALSE 84398
84392: LD_INT 13
84394: DOUBLE
84395: LESSEQUAL
84396: IFTRUE 84400
84398: GO 84477
84400: POP
// begin bc_type := b_lab_full ;
84401: LD_ADDR_OWVAR 42
84405: PUSH
84406: LD_INT 8
84408: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
84409: LD_ADDR_OWVAR 44
84413: PUSH
84414: LD_INT 10
84416: PUSH
84417: LD_INT 12
84419: PUSH
84420: LD_INT 14
84422: PUSH
84423: LD_INT 13
84425: PUSH
84426: EMPTY
84427: LIST
84428: LIST
84429: LIST
84430: LIST
84431: PUSH
84432: LD_VAR 0 2
84436: PUSH
84437: LD_INT 9
84439: MINUS
84440: ARRAY
84441: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
84442: LD_ADDR_OWVAR 45
84446: PUSH
84447: LD_INT 11
84449: PUSH
84450: LD_INT 15
84452: PUSH
84453: LD_INT 12
84455: PUSH
84456: LD_INT 15
84458: PUSH
84459: EMPTY
84460: LIST
84461: LIST
84462: LIST
84463: LIST
84464: PUSH
84465: LD_VAR 0 2
84469: PUSH
84470: LD_INT 9
84472: MINUS
84473: ARRAY
84474: ST_TO_ADDR
// end ; 14 :
84475: GO 84894
84477: LD_INT 14
84479: DOUBLE
84480: EQUAL
84481: IFTRUE 84485
84483: GO 84496
84485: POP
// bc_type := b_workshop ; 15 :
84486: LD_ADDR_OWVAR 42
84490: PUSH
84491: LD_INT 2
84493: ST_TO_ADDR
84494: GO 84894
84496: LD_INT 15
84498: DOUBLE
84499: EQUAL
84500: IFTRUE 84504
84502: GO 84515
84504: POP
// bc_type := b_factory ; 16 :
84505: LD_ADDR_OWVAR 42
84509: PUSH
84510: LD_INT 3
84512: ST_TO_ADDR
84513: GO 84894
84515: LD_INT 16
84517: DOUBLE
84518: EQUAL
84519: IFTRUE 84523
84521: GO 84534
84523: POP
// bc_type := b_ext_gun ; 17 :
84524: LD_ADDR_OWVAR 42
84528: PUSH
84529: LD_INT 17
84531: ST_TO_ADDR
84532: GO 84894
84534: LD_INT 17
84536: DOUBLE
84537: EQUAL
84538: IFTRUE 84542
84540: GO 84570
84542: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
84543: LD_ADDR_OWVAR 42
84547: PUSH
84548: LD_INT 19
84550: PUSH
84551: LD_INT 23
84553: PUSH
84554: LD_INT 19
84556: PUSH
84557: EMPTY
84558: LIST
84559: LIST
84560: LIST
84561: PUSH
84562: LD_VAR 0 1
84566: ARRAY
84567: ST_TO_ADDR
84568: GO 84894
84570: LD_INT 18
84572: DOUBLE
84573: EQUAL
84574: IFTRUE 84578
84576: GO 84589
84578: POP
// bc_type := b_ext_radar ; 19 :
84579: LD_ADDR_OWVAR 42
84583: PUSH
84584: LD_INT 20
84586: ST_TO_ADDR
84587: GO 84894
84589: LD_INT 19
84591: DOUBLE
84592: EQUAL
84593: IFTRUE 84597
84595: GO 84608
84597: POP
// bc_type := b_ext_radio ; 20 :
84598: LD_ADDR_OWVAR 42
84602: PUSH
84603: LD_INT 22
84605: ST_TO_ADDR
84606: GO 84894
84608: LD_INT 20
84610: DOUBLE
84611: EQUAL
84612: IFTRUE 84616
84614: GO 84627
84616: POP
// bc_type := b_ext_siberium ; 21 :
84617: LD_ADDR_OWVAR 42
84621: PUSH
84622: LD_INT 21
84624: ST_TO_ADDR
84625: GO 84894
84627: LD_INT 21
84629: DOUBLE
84630: EQUAL
84631: IFTRUE 84635
84633: GO 84646
84635: POP
// bc_type := b_ext_computer ; 22 :
84636: LD_ADDR_OWVAR 42
84640: PUSH
84641: LD_INT 24
84643: ST_TO_ADDR
84644: GO 84894
84646: LD_INT 22
84648: DOUBLE
84649: EQUAL
84650: IFTRUE 84654
84652: GO 84665
84654: POP
// bc_type := b_ext_track ; 23 :
84655: LD_ADDR_OWVAR 42
84659: PUSH
84660: LD_INT 16
84662: ST_TO_ADDR
84663: GO 84894
84665: LD_INT 23
84667: DOUBLE
84668: EQUAL
84669: IFTRUE 84673
84671: GO 84684
84673: POP
// bc_type := b_ext_laser ; 24 :
84674: LD_ADDR_OWVAR 42
84678: PUSH
84679: LD_INT 25
84681: ST_TO_ADDR
84682: GO 84894
84684: LD_INT 24
84686: DOUBLE
84687: EQUAL
84688: IFTRUE 84692
84690: GO 84703
84692: POP
// bc_type := b_control_tower ; 25 :
84693: LD_ADDR_OWVAR 42
84697: PUSH
84698: LD_INT 36
84700: ST_TO_ADDR
84701: GO 84894
84703: LD_INT 25
84705: DOUBLE
84706: EQUAL
84707: IFTRUE 84711
84709: GO 84722
84711: POP
// bc_type := b_breastwork ; 26 :
84712: LD_ADDR_OWVAR 42
84716: PUSH
84717: LD_INT 31
84719: ST_TO_ADDR
84720: GO 84894
84722: LD_INT 26
84724: DOUBLE
84725: EQUAL
84726: IFTRUE 84730
84728: GO 84741
84730: POP
// bc_type := b_bunker ; 27 :
84731: LD_ADDR_OWVAR 42
84735: PUSH
84736: LD_INT 32
84738: ST_TO_ADDR
84739: GO 84894
84741: LD_INT 27
84743: DOUBLE
84744: EQUAL
84745: IFTRUE 84749
84747: GO 84760
84749: POP
// bc_type := b_turret ; 28 :
84750: LD_ADDR_OWVAR 42
84754: PUSH
84755: LD_INT 33
84757: ST_TO_ADDR
84758: GO 84894
84760: LD_INT 28
84762: DOUBLE
84763: EQUAL
84764: IFTRUE 84768
84766: GO 84779
84768: POP
// bc_type := b_armoury ; 29 :
84769: LD_ADDR_OWVAR 42
84773: PUSH
84774: LD_INT 4
84776: ST_TO_ADDR
84777: GO 84894
84779: LD_INT 29
84781: DOUBLE
84782: EQUAL
84783: IFTRUE 84787
84785: GO 84798
84787: POP
// bc_type := b_barracks ; 30 :
84788: LD_ADDR_OWVAR 42
84792: PUSH
84793: LD_INT 5
84795: ST_TO_ADDR
84796: GO 84894
84798: LD_INT 30
84800: DOUBLE
84801: EQUAL
84802: IFTRUE 84806
84804: GO 84817
84806: POP
// bc_type := b_solar_power ; 31 :
84807: LD_ADDR_OWVAR 42
84811: PUSH
84812: LD_INT 27
84814: ST_TO_ADDR
84815: GO 84894
84817: LD_INT 31
84819: DOUBLE
84820: EQUAL
84821: IFTRUE 84825
84823: GO 84836
84825: POP
// bc_type := b_oil_power ; 32 :
84826: LD_ADDR_OWVAR 42
84830: PUSH
84831: LD_INT 26
84833: ST_TO_ADDR
84834: GO 84894
84836: LD_INT 32
84838: DOUBLE
84839: EQUAL
84840: IFTRUE 84844
84842: GO 84855
84844: POP
// bc_type := b_siberite_power ; 33 :
84845: LD_ADDR_OWVAR 42
84849: PUSH
84850: LD_INT 28
84852: ST_TO_ADDR
84853: GO 84894
84855: LD_INT 33
84857: DOUBLE
84858: EQUAL
84859: IFTRUE 84863
84861: GO 84874
84863: POP
// bc_type := b_oil_mine ; 34 :
84864: LD_ADDR_OWVAR 42
84868: PUSH
84869: LD_INT 29
84871: ST_TO_ADDR
84872: GO 84894
84874: LD_INT 34
84876: DOUBLE
84877: EQUAL
84878: IFTRUE 84882
84880: GO 84893
84882: POP
// bc_type := b_siberite_mine ; end ;
84883: LD_ADDR_OWVAR 42
84887: PUSH
84888: LD_INT 30
84890: ST_TO_ADDR
84891: GO 84894
84893: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
84894: LD_ADDR_VAR 0 8
84898: PUSH
84899: LD_VAR 0 5
84903: PPUSH
84904: LD_VAR 0 6
84908: PPUSH
84909: LD_VAR 0 3
84913: PPUSH
84914: CALL_OW 47
84918: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
84919: LD_OWVAR 42
84923: PUSH
84924: LD_INT 32
84926: PUSH
84927: LD_INT 33
84929: PUSH
84930: EMPTY
84931: LIST
84932: LIST
84933: IN
84934: IFFALSE 84950
// PlaceWeaponTurret ( b , weapon ) ;
84936: LD_VAR 0 8
84940: PPUSH
84941: LD_VAR 0 4
84945: PPUSH
84946: CALL_OW 431
// end ;
84950: LD_VAR 0 7
84954: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
84955: LD_INT 0
84957: PPUSH
84958: PPUSH
84959: PPUSH
84960: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
84961: LD_ADDR_VAR 0 4
84965: PUSH
84966: LD_INT 22
84968: PUSH
84969: LD_OWVAR 2
84973: PUSH
84974: EMPTY
84975: LIST
84976: LIST
84977: PUSH
84978: LD_INT 2
84980: PUSH
84981: LD_INT 30
84983: PUSH
84984: LD_INT 0
84986: PUSH
84987: EMPTY
84988: LIST
84989: LIST
84990: PUSH
84991: LD_INT 30
84993: PUSH
84994: LD_INT 1
84996: PUSH
84997: EMPTY
84998: LIST
84999: LIST
85000: PUSH
85001: EMPTY
85002: LIST
85003: LIST
85004: LIST
85005: PUSH
85006: EMPTY
85007: LIST
85008: LIST
85009: PPUSH
85010: CALL_OW 69
85014: ST_TO_ADDR
// if not tmp then
85015: LD_VAR 0 4
85019: NOT
85020: IFFALSE 85024
// exit ;
85022: GO 85083
// for i in tmp do
85024: LD_ADDR_VAR 0 2
85028: PUSH
85029: LD_VAR 0 4
85033: PUSH
85034: FOR_IN
85035: IFFALSE 85081
// for j = 1 to 3 do
85037: LD_ADDR_VAR 0 3
85041: PUSH
85042: DOUBLE
85043: LD_INT 1
85045: DEC
85046: ST_TO_ADDR
85047: LD_INT 3
85049: PUSH
85050: FOR_TO
85051: IFFALSE 85077
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
85053: LD_VAR 0 2
85057: PPUSH
85058: CALL_OW 274
85062: PPUSH
85063: LD_VAR 0 3
85067: PPUSH
85068: LD_INT 99999
85070: PPUSH
85071: CALL_OW 277
85075: GO 85050
85077: POP
85078: POP
85079: GO 85034
85081: POP
85082: POP
// end ;
85083: LD_VAR 0 1
85087: RET
// export function hHackSetLevel10 ; var i , j ; begin
85088: LD_INT 0
85090: PPUSH
85091: PPUSH
85092: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85093: LD_ADDR_VAR 0 2
85097: PUSH
85098: LD_INT 21
85100: PUSH
85101: LD_INT 1
85103: PUSH
85104: EMPTY
85105: LIST
85106: LIST
85107: PPUSH
85108: CALL_OW 69
85112: PUSH
85113: FOR_IN
85114: IFFALSE 85166
// if IsSelected ( i ) then
85116: LD_VAR 0 2
85120: PPUSH
85121: CALL_OW 306
85125: IFFALSE 85164
// begin for j := 1 to 4 do
85127: LD_ADDR_VAR 0 3
85131: PUSH
85132: DOUBLE
85133: LD_INT 1
85135: DEC
85136: ST_TO_ADDR
85137: LD_INT 4
85139: PUSH
85140: FOR_TO
85141: IFFALSE 85162
// SetSkill ( i , j , 10 ) ;
85143: LD_VAR 0 2
85147: PPUSH
85148: LD_VAR 0 3
85152: PPUSH
85153: LD_INT 10
85155: PPUSH
85156: CALL_OW 237
85160: GO 85140
85162: POP
85163: POP
// end ;
85164: GO 85113
85166: POP
85167: POP
// end ;
85168: LD_VAR 0 1
85172: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
85173: LD_INT 0
85175: PPUSH
85176: PPUSH
85177: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
85178: LD_ADDR_VAR 0 2
85182: PUSH
85183: LD_INT 22
85185: PUSH
85186: LD_OWVAR 2
85190: PUSH
85191: EMPTY
85192: LIST
85193: LIST
85194: PUSH
85195: LD_INT 21
85197: PUSH
85198: LD_INT 1
85200: PUSH
85201: EMPTY
85202: LIST
85203: LIST
85204: PUSH
85205: EMPTY
85206: LIST
85207: LIST
85208: PPUSH
85209: CALL_OW 69
85213: PUSH
85214: FOR_IN
85215: IFFALSE 85256
// begin for j := 1 to 4 do
85217: LD_ADDR_VAR 0 3
85221: PUSH
85222: DOUBLE
85223: LD_INT 1
85225: DEC
85226: ST_TO_ADDR
85227: LD_INT 4
85229: PUSH
85230: FOR_TO
85231: IFFALSE 85252
// SetSkill ( i , j , 10 ) ;
85233: LD_VAR 0 2
85237: PPUSH
85238: LD_VAR 0 3
85242: PPUSH
85243: LD_INT 10
85245: PPUSH
85246: CALL_OW 237
85250: GO 85230
85252: POP
85253: POP
// end ;
85254: GO 85214
85256: POP
85257: POP
// end ;
85258: LD_VAR 0 1
85262: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
85263: LD_INT 0
85265: PPUSH
// uc_side := your_side ;
85266: LD_ADDR_OWVAR 20
85270: PUSH
85271: LD_OWVAR 2
85275: ST_TO_ADDR
// uc_nation := nation ;
85276: LD_ADDR_OWVAR 21
85280: PUSH
85281: LD_VAR 0 1
85285: ST_TO_ADDR
// InitHc ;
85286: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
85290: LD_INT 0
85292: PPUSH
85293: LD_VAR 0 2
85297: PPUSH
85298: LD_VAR 0 3
85302: PPUSH
85303: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
85307: LD_VAR 0 4
85311: PPUSH
85312: LD_VAR 0 5
85316: PPUSH
85317: CALL_OW 428
85321: PUSH
85322: LD_INT 0
85324: EQUAL
85325: IFFALSE 85349
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
85327: CALL_OW 44
85331: PPUSH
85332: LD_VAR 0 4
85336: PPUSH
85337: LD_VAR 0 5
85341: PPUSH
85342: LD_INT 1
85344: PPUSH
85345: CALL_OW 48
// end ;
85349: LD_VAR 0 6
85353: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
85354: LD_INT 0
85356: PPUSH
85357: PPUSH
// uc_side := your_side ;
85358: LD_ADDR_OWVAR 20
85362: PUSH
85363: LD_OWVAR 2
85367: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
85368: LD_VAR 0 1
85372: PUSH
85373: LD_INT 1
85375: PUSH
85376: LD_INT 2
85378: PUSH
85379: LD_INT 3
85381: PUSH
85382: LD_INT 4
85384: PUSH
85385: LD_INT 5
85387: PUSH
85388: EMPTY
85389: LIST
85390: LIST
85391: LIST
85392: LIST
85393: LIST
85394: IN
85395: IFFALSE 85407
// uc_nation := nation_american else
85397: LD_ADDR_OWVAR 21
85401: PUSH
85402: LD_INT 1
85404: ST_TO_ADDR
85405: GO 85450
// if chassis in [ 11 , 12 , 13 , 14 ] then
85407: LD_VAR 0 1
85411: PUSH
85412: LD_INT 11
85414: PUSH
85415: LD_INT 12
85417: PUSH
85418: LD_INT 13
85420: PUSH
85421: LD_INT 14
85423: PUSH
85424: EMPTY
85425: LIST
85426: LIST
85427: LIST
85428: LIST
85429: IN
85430: IFFALSE 85442
// uc_nation := nation_arabian else
85432: LD_ADDR_OWVAR 21
85436: PUSH
85437: LD_INT 2
85439: ST_TO_ADDR
85440: GO 85450
// uc_nation := nation_russian ;
85442: LD_ADDR_OWVAR 21
85446: PUSH
85447: LD_INT 3
85449: ST_TO_ADDR
// vc_chassis := chassis ;
85450: LD_ADDR_OWVAR 37
85454: PUSH
85455: LD_VAR 0 1
85459: ST_TO_ADDR
// vc_engine := engine ;
85460: LD_ADDR_OWVAR 39
85464: PUSH
85465: LD_VAR 0 2
85469: ST_TO_ADDR
// vc_control := control ;
85470: LD_ADDR_OWVAR 38
85474: PUSH
85475: LD_VAR 0 3
85479: ST_TO_ADDR
// vc_weapon := weapon ;
85480: LD_ADDR_OWVAR 40
85484: PUSH
85485: LD_VAR 0 4
85489: ST_TO_ADDR
// un := CreateVehicle ;
85490: LD_ADDR_VAR 0 8
85494: PUSH
85495: CALL_OW 45
85499: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
85500: LD_VAR 0 8
85504: PPUSH
85505: LD_INT 0
85507: PPUSH
85508: LD_INT 5
85510: PPUSH
85511: CALL_OW 12
85515: PPUSH
85516: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
85520: LD_VAR 0 8
85524: PPUSH
85525: LD_VAR 0 5
85529: PPUSH
85530: LD_VAR 0 6
85534: PPUSH
85535: LD_INT 1
85537: PPUSH
85538: CALL_OW 48
// end ;
85542: LD_VAR 0 7
85546: RET
// export hInvincible ; every 1 do
85547: GO 85549
85549: DISABLE
// hInvincible := [ ] ;
85550: LD_ADDR_EXP 132
85554: PUSH
85555: EMPTY
85556: ST_TO_ADDR
85557: END
// every 10 do var i ;
85558: GO 85560
85560: DISABLE
85561: LD_INT 0
85563: PPUSH
// begin enable ;
85564: ENABLE
// if not hInvincible then
85565: LD_EXP 132
85569: NOT
85570: IFFALSE 85574
// exit ;
85572: GO 85618
// for i in hInvincible do
85574: LD_ADDR_VAR 0 1
85578: PUSH
85579: LD_EXP 132
85583: PUSH
85584: FOR_IN
85585: IFFALSE 85616
// if GetLives ( i ) < 1000 then
85587: LD_VAR 0 1
85591: PPUSH
85592: CALL_OW 256
85596: PUSH
85597: LD_INT 1000
85599: LESS
85600: IFFALSE 85614
// SetLives ( i , 1000 ) ;
85602: LD_VAR 0 1
85606: PPUSH
85607: LD_INT 1000
85609: PPUSH
85610: CALL_OW 234
85614: GO 85584
85616: POP
85617: POP
// end ;
85618: PPOPN 1
85620: END
// export function hHackInvincible ; var i ; begin
85621: LD_INT 0
85623: PPUSH
85624: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
85625: LD_ADDR_VAR 0 2
85629: PUSH
85630: LD_INT 2
85632: PUSH
85633: LD_INT 21
85635: PUSH
85636: LD_INT 1
85638: PUSH
85639: EMPTY
85640: LIST
85641: LIST
85642: PUSH
85643: LD_INT 21
85645: PUSH
85646: LD_INT 2
85648: PUSH
85649: EMPTY
85650: LIST
85651: LIST
85652: PUSH
85653: EMPTY
85654: LIST
85655: LIST
85656: LIST
85657: PPUSH
85658: CALL_OW 69
85662: PUSH
85663: FOR_IN
85664: IFFALSE 85725
// if IsSelected ( i ) then
85666: LD_VAR 0 2
85670: PPUSH
85671: CALL_OW 306
85675: IFFALSE 85723
// begin if i in hInvincible then
85677: LD_VAR 0 2
85681: PUSH
85682: LD_EXP 132
85686: IN
85687: IFFALSE 85707
// hInvincible := hInvincible diff i else
85689: LD_ADDR_EXP 132
85693: PUSH
85694: LD_EXP 132
85698: PUSH
85699: LD_VAR 0 2
85703: DIFF
85704: ST_TO_ADDR
85705: GO 85723
// hInvincible := hInvincible union i ;
85707: LD_ADDR_EXP 132
85711: PUSH
85712: LD_EXP 132
85716: PUSH
85717: LD_VAR 0 2
85721: UNION
85722: ST_TO_ADDR
// end ;
85723: GO 85663
85725: POP
85726: POP
// end ;
85727: LD_VAR 0 1
85731: RET
// export function hHackInvisible ; var i , j ; begin
85732: LD_INT 0
85734: PPUSH
85735: PPUSH
85736: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85737: LD_ADDR_VAR 0 2
85741: PUSH
85742: LD_INT 21
85744: PUSH
85745: LD_INT 1
85747: PUSH
85748: EMPTY
85749: LIST
85750: LIST
85751: PPUSH
85752: CALL_OW 69
85756: PUSH
85757: FOR_IN
85758: IFFALSE 85782
// if IsSelected ( i ) then
85760: LD_VAR 0 2
85764: PPUSH
85765: CALL_OW 306
85769: IFFALSE 85780
// ComForceInvisible ( i ) ;
85771: LD_VAR 0 2
85775: PPUSH
85776: CALL_OW 496
85780: GO 85757
85782: POP
85783: POP
// end ;
85784: LD_VAR 0 1
85788: RET
// export function hHackChangeYourSide ; begin
85789: LD_INT 0
85791: PPUSH
// if your_side = 8 then
85792: LD_OWVAR 2
85796: PUSH
85797: LD_INT 8
85799: EQUAL
85800: IFFALSE 85812
// your_side := 0 else
85802: LD_ADDR_OWVAR 2
85806: PUSH
85807: LD_INT 0
85809: ST_TO_ADDR
85810: GO 85826
// your_side := your_side + 1 ;
85812: LD_ADDR_OWVAR 2
85816: PUSH
85817: LD_OWVAR 2
85821: PUSH
85822: LD_INT 1
85824: PLUS
85825: ST_TO_ADDR
// end ;
85826: LD_VAR 0 1
85830: RET
// export function hHackChangeUnitSide ; var i , j ; begin
85831: LD_INT 0
85833: PPUSH
85834: PPUSH
85835: PPUSH
// for i in all_units do
85836: LD_ADDR_VAR 0 2
85840: PUSH
85841: LD_OWVAR 3
85845: PUSH
85846: FOR_IN
85847: IFFALSE 85925
// if IsSelected ( i ) then
85849: LD_VAR 0 2
85853: PPUSH
85854: CALL_OW 306
85858: IFFALSE 85923
// begin j := GetSide ( i ) ;
85860: LD_ADDR_VAR 0 3
85864: PUSH
85865: LD_VAR 0 2
85869: PPUSH
85870: CALL_OW 255
85874: ST_TO_ADDR
// if j = 8 then
85875: LD_VAR 0 3
85879: PUSH
85880: LD_INT 8
85882: EQUAL
85883: IFFALSE 85895
// j := 0 else
85885: LD_ADDR_VAR 0 3
85889: PUSH
85890: LD_INT 0
85892: ST_TO_ADDR
85893: GO 85909
// j := j + 1 ;
85895: LD_ADDR_VAR 0 3
85899: PUSH
85900: LD_VAR 0 3
85904: PUSH
85905: LD_INT 1
85907: PLUS
85908: ST_TO_ADDR
// SetSide ( i , j ) ;
85909: LD_VAR 0 2
85913: PPUSH
85914: LD_VAR 0 3
85918: PPUSH
85919: CALL_OW 235
// end ;
85923: GO 85846
85925: POP
85926: POP
// end ;
85927: LD_VAR 0 1
85931: RET
// export function hHackFog ; begin
85932: LD_INT 0
85934: PPUSH
// FogOff ( true ) ;
85935: LD_INT 1
85937: PPUSH
85938: CALL_OW 344
// end ;
85942: LD_VAR 0 1
85946: RET
// export function hHackTeleport ( unit , x , y ) ; begin
85947: LD_INT 0
85949: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
85950: LD_VAR 0 1
85954: PPUSH
85955: LD_VAR 0 2
85959: PPUSH
85960: LD_VAR 0 3
85964: PPUSH
85965: LD_INT 1
85967: PPUSH
85968: LD_INT 1
85970: PPUSH
85971: CALL_OW 483
// CenterOnXY ( x , y ) ;
85975: LD_VAR 0 2
85979: PPUSH
85980: LD_VAR 0 3
85984: PPUSH
85985: CALL_OW 84
// end ;
85989: LD_VAR 0 4
85993: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
85994: LD_INT 0
85996: PPUSH
85997: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
85998: LD_VAR 0 1
86002: NOT
86003: PUSH
86004: LD_VAR 0 2
86008: PPUSH
86009: LD_VAR 0 3
86013: PPUSH
86014: CALL_OW 488
86018: NOT
86019: OR
86020: PUSH
86021: LD_VAR 0 1
86025: PPUSH
86026: CALL_OW 266
86030: PUSH
86031: LD_INT 3
86033: NONEQUAL
86034: PUSH
86035: LD_VAR 0 1
86039: PPUSH
86040: CALL_OW 247
86044: PUSH
86045: LD_INT 1
86047: EQUAL
86048: NOT
86049: AND
86050: OR
86051: IFFALSE 86055
// exit ;
86053: GO 86204
// if GetType ( factory ) = unit_human then
86055: LD_VAR 0 1
86059: PPUSH
86060: CALL_OW 247
86064: PUSH
86065: LD_INT 1
86067: EQUAL
86068: IFFALSE 86085
// factory := IsInUnit ( factory ) ;
86070: LD_ADDR_VAR 0 1
86074: PUSH
86075: LD_VAR 0 1
86079: PPUSH
86080: CALL_OW 310
86084: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
86085: LD_VAR 0 1
86089: PPUSH
86090: CALL_OW 266
86094: PUSH
86095: LD_INT 3
86097: NONEQUAL
86098: IFFALSE 86102
// exit ;
86100: GO 86204
// if HexInfo ( x , y ) = factory then
86102: LD_VAR 0 2
86106: PPUSH
86107: LD_VAR 0 3
86111: PPUSH
86112: CALL_OW 428
86116: PUSH
86117: LD_VAR 0 1
86121: EQUAL
86122: IFFALSE 86149
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
86124: LD_ADDR_EXP 133
86128: PUSH
86129: LD_EXP 133
86133: PPUSH
86134: LD_VAR 0 1
86138: PPUSH
86139: LD_INT 0
86141: PPUSH
86142: CALL_OW 1
86146: ST_TO_ADDR
86147: GO 86200
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
86149: LD_ADDR_EXP 133
86153: PUSH
86154: LD_EXP 133
86158: PPUSH
86159: LD_VAR 0 1
86163: PPUSH
86164: LD_VAR 0 1
86168: PPUSH
86169: CALL_OW 255
86173: PUSH
86174: LD_VAR 0 1
86178: PUSH
86179: LD_VAR 0 2
86183: PUSH
86184: LD_VAR 0 3
86188: PUSH
86189: EMPTY
86190: LIST
86191: LIST
86192: LIST
86193: LIST
86194: PPUSH
86195: CALL_OW 1
86199: ST_TO_ADDR
// UpdateFactoryWaypoints ;
86200: CALL 86209 0 0
// end ;
86204: LD_VAR 0 4
86208: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
86209: LD_INT 0
86211: PPUSH
86212: PPUSH
86213: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
86214: LD_STRING resetFactoryWaypoint();
86216: PPUSH
86217: CALL_OW 559
// if factoryWaypoints then
86221: LD_EXP 133
86225: IFFALSE 86351
// begin list := PrepareArray ( factoryWaypoints ) ;
86227: LD_ADDR_VAR 0 3
86231: PUSH
86232: LD_EXP 133
86236: PPUSH
86237: CALL 70731 0 1
86241: ST_TO_ADDR
// for i := 1 to list do
86242: LD_ADDR_VAR 0 2
86246: PUSH
86247: DOUBLE
86248: LD_INT 1
86250: DEC
86251: ST_TO_ADDR
86252: LD_VAR 0 3
86256: PUSH
86257: FOR_TO
86258: IFFALSE 86349
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
86260: LD_STRING setFactoryWaypointXY(
86262: PUSH
86263: LD_VAR 0 3
86267: PUSH
86268: LD_VAR 0 2
86272: ARRAY
86273: PUSH
86274: LD_INT 1
86276: ARRAY
86277: STR
86278: PUSH
86279: LD_STRING ,
86281: STR
86282: PUSH
86283: LD_VAR 0 3
86287: PUSH
86288: LD_VAR 0 2
86292: ARRAY
86293: PUSH
86294: LD_INT 2
86296: ARRAY
86297: STR
86298: PUSH
86299: LD_STRING ,
86301: STR
86302: PUSH
86303: LD_VAR 0 3
86307: PUSH
86308: LD_VAR 0 2
86312: ARRAY
86313: PUSH
86314: LD_INT 3
86316: ARRAY
86317: STR
86318: PUSH
86319: LD_STRING ,
86321: STR
86322: PUSH
86323: LD_VAR 0 3
86327: PUSH
86328: LD_VAR 0 2
86332: ARRAY
86333: PUSH
86334: LD_INT 4
86336: ARRAY
86337: STR
86338: PUSH
86339: LD_STRING )
86341: STR
86342: PPUSH
86343: CALL_OW 559
86347: GO 86257
86349: POP
86350: POP
// end ; end ;
86351: LD_VAR 0 1
86355: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
86356: LD_INT 0
86358: PPUSH
// if HexInfo ( x , y ) = warehouse then
86359: LD_VAR 0 2
86363: PPUSH
86364: LD_VAR 0 3
86368: PPUSH
86369: CALL_OW 428
86373: PUSH
86374: LD_VAR 0 1
86378: EQUAL
86379: IFFALSE 86406
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
86381: LD_ADDR_EXP 134
86385: PUSH
86386: LD_EXP 134
86390: PPUSH
86391: LD_VAR 0 1
86395: PPUSH
86396: LD_INT 0
86398: PPUSH
86399: CALL_OW 1
86403: ST_TO_ADDR
86404: GO 86457
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
86406: LD_ADDR_EXP 134
86410: PUSH
86411: LD_EXP 134
86415: PPUSH
86416: LD_VAR 0 1
86420: PPUSH
86421: LD_VAR 0 1
86425: PPUSH
86426: CALL_OW 255
86430: PUSH
86431: LD_VAR 0 1
86435: PUSH
86436: LD_VAR 0 2
86440: PUSH
86441: LD_VAR 0 3
86445: PUSH
86446: EMPTY
86447: LIST
86448: LIST
86449: LIST
86450: LIST
86451: PPUSH
86452: CALL_OW 1
86456: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
86457: CALL 86466 0 0
// end ;
86461: LD_VAR 0 4
86465: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
86466: LD_INT 0
86468: PPUSH
86469: PPUSH
86470: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
86471: LD_STRING resetWarehouseGatheringPoints();
86473: PPUSH
86474: CALL_OW 559
// if warehouseGatheringPoints then
86478: LD_EXP 134
86482: IFFALSE 86608
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
86484: LD_ADDR_VAR 0 3
86488: PUSH
86489: LD_EXP 134
86493: PPUSH
86494: CALL 70731 0 1
86498: ST_TO_ADDR
// for i := 1 to list do
86499: LD_ADDR_VAR 0 2
86503: PUSH
86504: DOUBLE
86505: LD_INT 1
86507: DEC
86508: ST_TO_ADDR
86509: LD_VAR 0 3
86513: PUSH
86514: FOR_TO
86515: IFFALSE 86606
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
86517: LD_STRING setWarehouseGatheringPointXY(
86519: PUSH
86520: LD_VAR 0 3
86524: PUSH
86525: LD_VAR 0 2
86529: ARRAY
86530: PUSH
86531: LD_INT 1
86533: ARRAY
86534: STR
86535: PUSH
86536: LD_STRING ,
86538: STR
86539: PUSH
86540: LD_VAR 0 3
86544: PUSH
86545: LD_VAR 0 2
86549: ARRAY
86550: PUSH
86551: LD_INT 2
86553: ARRAY
86554: STR
86555: PUSH
86556: LD_STRING ,
86558: STR
86559: PUSH
86560: LD_VAR 0 3
86564: PUSH
86565: LD_VAR 0 2
86569: ARRAY
86570: PUSH
86571: LD_INT 3
86573: ARRAY
86574: STR
86575: PUSH
86576: LD_STRING ,
86578: STR
86579: PUSH
86580: LD_VAR 0 3
86584: PUSH
86585: LD_VAR 0 2
86589: ARRAY
86590: PUSH
86591: LD_INT 4
86593: ARRAY
86594: STR
86595: PUSH
86596: LD_STRING )
86598: STR
86599: PPUSH
86600: CALL_OW 559
86604: GO 86514
86606: POP
86607: POP
// end ; end ;
86608: LD_VAR 0 1
86612: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
86613: LD_EXP 134
86617: IFFALSE 87302
86619: GO 86621
86621: DISABLE
86622: LD_INT 0
86624: PPUSH
86625: PPUSH
86626: PPUSH
86627: PPUSH
86628: PPUSH
86629: PPUSH
86630: PPUSH
86631: PPUSH
86632: PPUSH
// begin enable ;
86633: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
86634: LD_ADDR_VAR 0 3
86638: PUSH
86639: LD_EXP 134
86643: PPUSH
86644: CALL 70731 0 1
86648: ST_TO_ADDR
// if not list then
86649: LD_VAR 0 3
86653: NOT
86654: IFFALSE 86658
// exit ;
86656: GO 87302
// for i := 1 to list do
86658: LD_ADDR_VAR 0 1
86662: PUSH
86663: DOUBLE
86664: LD_INT 1
86666: DEC
86667: ST_TO_ADDR
86668: LD_VAR 0 3
86672: PUSH
86673: FOR_TO
86674: IFFALSE 87300
// begin depot := list [ i ] [ 2 ] ;
86676: LD_ADDR_VAR 0 8
86680: PUSH
86681: LD_VAR 0 3
86685: PUSH
86686: LD_VAR 0 1
86690: ARRAY
86691: PUSH
86692: LD_INT 2
86694: ARRAY
86695: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
86696: LD_ADDR_VAR 0 5
86700: PUSH
86701: LD_VAR 0 3
86705: PUSH
86706: LD_VAR 0 1
86710: ARRAY
86711: PUSH
86712: LD_INT 1
86714: ARRAY
86715: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
86716: LD_VAR 0 8
86720: PPUSH
86721: CALL_OW 301
86725: PUSH
86726: LD_VAR 0 5
86730: PUSH
86731: LD_VAR 0 8
86735: PPUSH
86736: CALL_OW 255
86740: NONEQUAL
86741: OR
86742: IFFALSE 86771
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
86744: LD_ADDR_EXP 134
86748: PUSH
86749: LD_EXP 134
86753: PPUSH
86754: LD_VAR 0 8
86758: PPUSH
86759: LD_INT 0
86761: PPUSH
86762: CALL_OW 1
86766: ST_TO_ADDR
// exit ;
86767: POP
86768: POP
86769: GO 87302
// end ; x := list [ i ] [ 3 ] ;
86771: LD_ADDR_VAR 0 6
86775: PUSH
86776: LD_VAR 0 3
86780: PUSH
86781: LD_VAR 0 1
86785: ARRAY
86786: PUSH
86787: LD_INT 3
86789: ARRAY
86790: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
86791: LD_ADDR_VAR 0 7
86795: PUSH
86796: LD_VAR 0 3
86800: PUSH
86801: LD_VAR 0 1
86805: ARRAY
86806: PUSH
86807: LD_INT 4
86809: ARRAY
86810: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
86811: LD_ADDR_VAR 0 9
86815: PUSH
86816: LD_VAR 0 6
86820: PPUSH
86821: LD_VAR 0 7
86825: PPUSH
86826: LD_INT 16
86828: PPUSH
86829: CALL 69319 0 3
86833: ST_TO_ADDR
// if not cratesNearbyPoint then
86834: LD_VAR 0 9
86838: NOT
86839: IFFALSE 86845
// exit ;
86841: POP
86842: POP
86843: GO 87302
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
86845: LD_ADDR_VAR 0 4
86849: PUSH
86850: LD_INT 22
86852: PUSH
86853: LD_VAR 0 5
86857: PUSH
86858: EMPTY
86859: LIST
86860: LIST
86861: PUSH
86862: LD_INT 3
86864: PUSH
86865: LD_INT 60
86867: PUSH
86868: EMPTY
86869: LIST
86870: PUSH
86871: EMPTY
86872: LIST
86873: LIST
86874: PUSH
86875: LD_INT 91
86877: PUSH
86878: LD_VAR 0 8
86882: PUSH
86883: LD_INT 6
86885: PUSH
86886: EMPTY
86887: LIST
86888: LIST
86889: LIST
86890: PUSH
86891: LD_INT 2
86893: PUSH
86894: LD_INT 25
86896: PUSH
86897: LD_INT 2
86899: PUSH
86900: EMPTY
86901: LIST
86902: LIST
86903: PUSH
86904: LD_INT 25
86906: PUSH
86907: LD_INT 16
86909: PUSH
86910: EMPTY
86911: LIST
86912: LIST
86913: PUSH
86914: EMPTY
86915: LIST
86916: LIST
86917: LIST
86918: PUSH
86919: EMPTY
86920: LIST
86921: LIST
86922: LIST
86923: LIST
86924: PPUSH
86925: CALL_OW 69
86929: PUSH
86930: LD_VAR 0 8
86934: PPUSH
86935: CALL_OW 313
86939: PPUSH
86940: LD_INT 3
86942: PUSH
86943: LD_INT 60
86945: PUSH
86946: EMPTY
86947: LIST
86948: PUSH
86949: EMPTY
86950: LIST
86951: LIST
86952: PUSH
86953: LD_INT 2
86955: PUSH
86956: LD_INT 25
86958: PUSH
86959: LD_INT 2
86961: PUSH
86962: EMPTY
86963: LIST
86964: LIST
86965: PUSH
86966: LD_INT 25
86968: PUSH
86969: LD_INT 16
86971: PUSH
86972: EMPTY
86973: LIST
86974: LIST
86975: PUSH
86976: EMPTY
86977: LIST
86978: LIST
86979: LIST
86980: PUSH
86981: EMPTY
86982: LIST
86983: LIST
86984: PPUSH
86985: CALL_OW 72
86989: UNION
86990: ST_TO_ADDR
// if tmp then
86991: LD_VAR 0 4
86995: IFFALSE 87075
// begin tmp := ShrinkArray ( tmp , 3 ) ;
86997: LD_ADDR_VAR 0 4
87001: PUSH
87002: LD_VAR 0 4
87006: PPUSH
87007: LD_INT 3
87009: PPUSH
87010: CALL 67288 0 2
87014: ST_TO_ADDR
// for j in tmp do
87015: LD_ADDR_VAR 0 2
87019: PUSH
87020: LD_VAR 0 4
87024: PUSH
87025: FOR_IN
87026: IFFALSE 87069
// begin if IsInUnit ( j ) then
87028: LD_VAR 0 2
87032: PPUSH
87033: CALL_OW 310
87037: IFFALSE 87048
// ComExit ( j ) ;
87039: LD_VAR 0 2
87043: PPUSH
87044: CALL 67371 0 1
// AddComCollect ( j , x , y ) ;
87048: LD_VAR 0 2
87052: PPUSH
87053: LD_VAR 0 6
87057: PPUSH
87058: LD_VAR 0 7
87062: PPUSH
87063: CALL_OW 177
// end ;
87067: GO 87025
87069: POP
87070: POP
// exit ;
87071: POP
87072: POP
87073: GO 87302
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
87075: LD_ADDR_VAR 0 4
87079: PUSH
87080: LD_INT 22
87082: PUSH
87083: LD_VAR 0 5
87087: PUSH
87088: EMPTY
87089: LIST
87090: LIST
87091: PUSH
87092: LD_INT 91
87094: PUSH
87095: LD_VAR 0 8
87099: PUSH
87100: LD_INT 8
87102: PUSH
87103: EMPTY
87104: LIST
87105: LIST
87106: LIST
87107: PUSH
87108: LD_INT 2
87110: PUSH
87111: LD_INT 34
87113: PUSH
87114: LD_INT 12
87116: PUSH
87117: EMPTY
87118: LIST
87119: LIST
87120: PUSH
87121: LD_INT 34
87123: PUSH
87124: LD_INT 51
87126: PUSH
87127: EMPTY
87128: LIST
87129: LIST
87130: PUSH
87131: LD_INT 34
87133: PUSH
87134: LD_INT 32
87136: PUSH
87137: EMPTY
87138: LIST
87139: LIST
87140: PUSH
87141: LD_INT 34
87143: PUSH
87144: LD_INT 89
87146: PUSH
87147: EMPTY
87148: LIST
87149: LIST
87150: PUSH
87151: EMPTY
87152: LIST
87153: LIST
87154: LIST
87155: LIST
87156: LIST
87157: PUSH
87158: EMPTY
87159: LIST
87160: LIST
87161: LIST
87162: PPUSH
87163: CALL_OW 69
87167: ST_TO_ADDR
// if tmp then
87168: LD_VAR 0 4
87172: IFFALSE 87298
// begin for j in tmp do
87174: LD_ADDR_VAR 0 2
87178: PUSH
87179: LD_VAR 0 4
87183: PUSH
87184: FOR_IN
87185: IFFALSE 87296
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
87187: LD_VAR 0 2
87191: PPUSH
87192: CALL_OW 262
87196: PUSH
87197: LD_INT 3
87199: EQUAL
87200: PUSH
87201: LD_VAR 0 2
87205: PPUSH
87206: CALL_OW 261
87210: PUSH
87211: LD_INT 20
87213: GREATER
87214: OR
87215: PUSH
87216: LD_VAR 0 2
87220: PPUSH
87221: CALL_OW 314
87225: NOT
87226: AND
87227: PUSH
87228: LD_VAR 0 2
87232: PPUSH
87233: CALL_OW 263
87237: PUSH
87238: LD_INT 1
87240: NONEQUAL
87241: PUSH
87242: LD_VAR 0 2
87246: PPUSH
87247: CALL_OW 311
87251: OR
87252: AND
87253: IFFALSE 87294
// begin ComCollect ( j , x , y ) ;
87255: LD_VAR 0 2
87259: PPUSH
87260: LD_VAR 0 6
87264: PPUSH
87265: LD_VAR 0 7
87269: PPUSH
87270: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
87274: LD_VAR 0 2
87278: PPUSH
87279: LD_VAR 0 8
87283: PPUSH
87284: CALL_OW 172
// exit ;
87288: POP
87289: POP
87290: POP
87291: POP
87292: GO 87302
// end ;
87294: GO 87184
87296: POP
87297: POP
// end ; end ;
87298: GO 86673
87300: POP
87301: POP
// end ; end_of_file
87302: PPOPN 9
87304: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
87305: LD_VAR 0 1
87309: PUSH
87310: LD_INT 200
87312: DOUBLE
87313: GREATEREQUAL
87314: IFFALSE 87322
87316: LD_INT 299
87318: DOUBLE
87319: LESSEQUAL
87320: IFTRUE 87324
87322: GO 87356
87324: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
87325: LD_VAR 0 1
87329: PPUSH
87330: LD_VAR 0 2
87334: PPUSH
87335: LD_VAR 0 3
87339: PPUSH
87340: LD_VAR 0 4
87344: PPUSH
87345: LD_VAR 0 5
87349: PPUSH
87350: CALL 87844 0 5
87354: GO 87433
87356: LD_INT 300
87358: DOUBLE
87359: GREATEREQUAL
87360: IFFALSE 87368
87362: LD_INT 399
87364: DOUBLE
87365: LESSEQUAL
87366: IFTRUE 87370
87368: GO 87432
87370: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
87371: LD_VAR 0 1
87375: PPUSH
87376: LD_VAR 0 2
87380: PPUSH
87381: LD_VAR 0 3
87385: PPUSH
87386: LD_VAR 0 4
87390: PPUSH
87391: LD_VAR 0 5
87395: PPUSH
87396: LD_VAR 0 6
87400: PPUSH
87401: LD_VAR 0 7
87405: PPUSH
87406: LD_VAR 0 8
87410: PPUSH
87411: LD_VAR 0 9
87415: PPUSH
87416: LD_VAR 0 10
87420: PPUSH
87421: LD_VAR 0 11
87425: PPUSH
87426: CALL 84006 0 11
87430: GO 87433
87432: POP
// end ;
87433: PPOPN 11
87435: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
87436: LD_VAR 0 1
87440: PPUSH
87441: LD_VAR 0 2
87445: PPUSH
87446: LD_VAR 0 3
87450: PPUSH
87451: LD_VAR 0 4
87455: PPUSH
87456: LD_VAR 0 5
87460: PPUSH
87461: CALL 87580 0 5
// end ; end_of_file
87465: PPOPN 5
87467: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
87468: LD_INT 0
87470: PPUSH
87471: PPUSH
87472: PPUSH
87473: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
87474: LD_VAR 0 1
87478: PPUSH
87479: CALL_OW 264
87483: PUSH
87484: LD_INT 91
87486: EQUAL
87487: IFFALSE 87559
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
87489: LD_INT 68
87491: PPUSH
87492: LD_VAR 0 1
87496: PPUSH
87497: CALL_OW 255
87501: PPUSH
87502: CALL_OW 321
87506: PUSH
87507: LD_INT 2
87509: EQUAL
87510: IFFALSE 87522
// eff := 70 else
87512: LD_ADDR_VAR 0 4
87516: PUSH
87517: LD_INT 70
87519: ST_TO_ADDR
87520: GO 87530
// eff := 30 ;
87522: LD_ADDR_VAR 0 4
87526: PUSH
87527: LD_INT 30
87529: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
87530: LD_VAR 0 1
87534: PPUSH
87535: CALL_OW 250
87539: PPUSH
87540: LD_VAR 0 1
87544: PPUSH
87545: CALL_OW 251
87549: PPUSH
87550: LD_VAR 0 4
87554: PPUSH
87555: CALL_OW 495
// end ; end ;
87559: LD_VAR 0 2
87563: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
87564: LD_INT 0
87566: PPUSH
// end ;
87567: LD_VAR 0 4
87571: RET
// export function SOS_Command ( cmd ) ; begin
87572: LD_INT 0
87574: PPUSH
// end ;
87575: LD_VAR 0 2
87579: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
87580: LD_INT 0
87582: PPUSH
// end ;
87583: LD_VAR 0 6
87587: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
87588: LD_INT 0
87590: PPUSH
87591: PPUSH
// if not vehicle or not factory then
87592: LD_VAR 0 1
87596: NOT
87597: PUSH
87598: LD_VAR 0 2
87602: NOT
87603: OR
87604: IFFALSE 87608
// exit ;
87606: GO 87839
// if factoryWaypoints >= factory then
87608: LD_EXP 133
87612: PUSH
87613: LD_VAR 0 2
87617: GREATEREQUAL
87618: IFFALSE 87839
// if factoryWaypoints [ factory ] then
87620: LD_EXP 133
87624: PUSH
87625: LD_VAR 0 2
87629: ARRAY
87630: IFFALSE 87839
// begin if GetControl ( vehicle ) = control_manual then
87632: LD_VAR 0 1
87636: PPUSH
87637: CALL_OW 263
87641: PUSH
87642: LD_INT 1
87644: EQUAL
87645: IFFALSE 87726
// begin driver := IsDrivenBy ( vehicle ) ;
87647: LD_ADDR_VAR 0 4
87651: PUSH
87652: LD_VAR 0 1
87656: PPUSH
87657: CALL_OW 311
87661: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87662: LD_VAR 0 4
87666: PPUSH
87667: LD_EXP 133
87671: PUSH
87672: LD_VAR 0 2
87676: ARRAY
87677: PUSH
87678: LD_INT 3
87680: ARRAY
87681: PPUSH
87682: LD_EXP 133
87686: PUSH
87687: LD_VAR 0 2
87691: ARRAY
87692: PUSH
87693: LD_INT 4
87695: ARRAY
87696: PPUSH
87697: CALL_OW 171
// AddComExitVehicle ( driver ) ;
87701: LD_VAR 0 4
87705: PPUSH
87706: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
87710: LD_VAR 0 4
87714: PPUSH
87715: LD_VAR 0 2
87719: PPUSH
87720: CALL_OW 180
// end else
87724: GO 87839
// if GetControl ( vehicle ) = control_remote then
87726: LD_VAR 0 1
87730: PPUSH
87731: CALL_OW 263
87735: PUSH
87736: LD_INT 2
87738: EQUAL
87739: IFFALSE 87800
// begin wait ( 0 0$2 ) ;
87741: LD_INT 70
87743: PPUSH
87744: CALL_OW 67
// if Connect ( vehicle ) then
87748: LD_VAR 0 1
87752: PPUSH
87753: CALL 37579 0 1
87757: IFFALSE 87798
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87759: LD_VAR 0 1
87763: PPUSH
87764: LD_EXP 133
87768: PUSH
87769: LD_VAR 0 2
87773: ARRAY
87774: PUSH
87775: LD_INT 3
87777: ARRAY
87778: PPUSH
87779: LD_EXP 133
87783: PUSH
87784: LD_VAR 0 2
87788: ARRAY
87789: PUSH
87790: LD_INT 4
87792: ARRAY
87793: PPUSH
87794: CALL_OW 171
// end else
87798: GO 87839
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87800: LD_VAR 0 1
87804: PPUSH
87805: LD_EXP 133
87809: PUSH
87810: LD_VAR 0 2
87814: ARRAY
87815: PUSH
87816: LD_INT 3
87818: ARRAY
87819: PPUSH
87820: LD_EXP 133
87824: PUSH
87825: LD_VAR 0 2
87829: ARRAY
87830: PUSH
87831: LD_INT 4
87833: ARRAY
87834: PPUSH
87835: CALL_OW 171
// end ; end ;
87839: LD_VAR 0 3
87843: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
87844: LD_INT 0
87846: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
87847: LD_VAR 0 1
87851: PUSH
87852: LD_INT 250
87854: EQUAL
87855: PUSH
87856: LD_VAR 0 2
87860: PPUSH
87861: CALL_OW 264
87865: PUSH
87866: LD_INT 81
87868: EQUAL
87869: AND
87870: IFFALSE 87891
// MinerPlaceMine ( unit , x , y ) ;
87872: LD_VAR 0 2
87876: PPUSH
87877: LD_VAR 0 4
87881: PPUSH
87882: LD_VAR 0 5
87886: PPUSH
87887: CALL 90881 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
87891: LD_VAR 0 1
87895: PUSH
87896: LD_INT 251
87898: EQUAL
87899: PUSH
87900: LD_VAR 0 2
87904: PPUSH
87905: CALL_OW 264
87909: PUSH
87910: LD_INT 81
87912: EQUAL
87913: AND
87914: IFFALSE 87935
// MinerDetonateMine ( unit , x , y ) ;
87916: LD_VAR 0 2
87920: PPUSH
87921: LD_VAR 0 4
87925: PPUSH
87926: LD_VAR 0 5
87930: PPUSH
87931: CALL 91156 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
87935: LD_VAR 0 1
87939: PUSH
87940: LD_INT 252
87942: EQUAL
87943: PUSH
87944: LD_VAR 0 2
87948: PPUSH
87949: CALL_OW 264
87953: PUSH
87954: LD_INT 81
87956: EQUAL
87957: AND
87958: IFFALSE 87979
// MinerCreateMinefield ( unit , x , y ) ;
87960: LD_VAR 0 2
87964: PPUSH
87965: LD_VAR 0 4
87969: PPUSH
87970: LD_VAR 0 5
87974: PPUSH
87975: CALL 91573 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
87979: LD_VAR 0 1
87983: PUSH
87984: LD_INT 253
87986: EQUAL
87987: PUSH
87988: LD_VAR 0 2
87992: PPUSH
87993: CALL_OW 257
87997: PUSH
87998: LD_INT 5
88000: EQUAL
88001: AND
88002: IFFALSE 88023
// ComBinocular ( unit , x , y ) ;
88004: LD_VAR 0 2
88008: PPUSH
88009: LD_VAR 0 4
88013: PPUSH
88014: LD_VAR 0 5
88018: PPUSH
88019: CALL 91942 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
88023: LD_VAR 0 1
88027: PUSH
88028: LD_INT 254
88030: EQUAL
88031: PUSH
88032: LD_VAR 0 2
88036: PPUSH
88037: CALL_OW 264
88041: PUSH
88042: LD_INT 99
88044: EQUAL
88045: AND
88046: PUSH
88047: LD_VAR 0 3
88051: PPUSH
88052: CALL_OW 263
88056: PUSH
88057: LD_INT 3
88059: EQUAL
88060: AND
88061: IFFALSE 88077
// HackDestroyVehicle ( unit , selectedUnit ) ;
88063: LD_VAR 0 2
88067: PPUSH
88068: LD_VAR 0 3
88072: PPUSH
88073: CALL 90245 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
88077: LD_VAR 0 1
88081: PUSH
88082: LD_INT 255
88084: EQUAL
88085: PUSH
88086: LD_VAR 0 2
88090: PPUSH
88091: CALL_OW 264
88095: PUSH
88096: LD_INT 14
88098: PUSH
88099: LD_INT 53
88101: PUSH
88102: EMPTY
88103: LIST
88104: LIST
88105: IN
88106: AND
88107: PUSH
88108: LD_VAR 0 4
88112: PPUSH
88113: LD_VAR 0 5
88117: PPUSH
88118: CALL_OW 488
88122: AND
88123: IFFALSE 88147
// CutTreeXYR ( unit , x , y , 12 ) ;
88125: LD_VAR 0 2
88129: PPUSH
88130: LD_VAR 0 4
88134: PPUSH
88135: LD_VAR 0 5
88139: PPUSH
88140: LD_INT 12
88142: PPUSH
88143: CALL 88242 0 4
// if cmd = 256 then
88147: LD_VAR 0 1
88151: PUSH
88152: LD_INT 256
88154: EQUAL
88155: IFFALSE 88176
// SetFactoryWaypoint ( unit , x , y ) ;
88157: LD_VAR 0 2
88161: PPUSH
88162: LD_VAR 0 4
88166: PPUSH
88167: LD_VAR 0 5
88171: PPUSH
88172: CALL 85994 0 3
// if cmd = 257 then
88176: LD_VAR 0 1
88180: PUSH
88181: LD_INT 257
88183: EQUAL
88184: IFFALSE 88205
// SetWarehouseGatheringPoint ( unit , x , y ) ;
88186: LD_VAR 0 2
88190: PPUSH
88191: LD_VAR 0 4
88195: PPUSH
88196: LD_VAR 0 5
88200: PPUSH
88201: CALL 86356 0 3
// if cmd = 258 then
88205: LD_VAR 0 1
88209: PUSH
88210: LD_INT 258
88212: EQUAL
88213: IFFALSE 88237
// BurnTreeXYR ( unit , x , y , 8 ) ;
88215: LD_VAR 0 2
88219: PPUSH
88220: LD_VAR 0 4
88224: PPUSH
88225: LD_VAR 0 5
88229: PPUSH
88230: LD_INT 8
88232: PPUSH
88233: CALL 88636 0 4
// end ;
88237: LD_VAR 0 6
88241: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
88242: LD_INT 0
88244: PPUSH
88245: PPUSH
88246: PPUSH
88247: PPUSH
88248: PPUSH
88249: PPUSH
88250: PPUSH
88251: PPUSH
88252: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
88253: LD_VAR 0 1
88257: PPUSH
88258: CALL_OW 302
88262: NOT
88263: PUSH
88264: LD_VAR 0 2
88268: PPUSH
88269: LD_VAR 0 3
88273: PPUSH
88274: CALL_OW 488
88278: NOT
88279: OR
88280: PUSH
88281: LD_VAR 0 4
88285: NOT
88286: OR
88287: IFFALSE 88291
// exit ;
88289: GO 88631
// list := [ ] ;
88291: LD_ADDR_VAR 0 13
88295: PUSH
88296: EMPTY
88297: ST_TO_ADDR
// if x - r < 0 then
88298: LD_VAR 0 2
88302: PUSH
88303: LD_VAR 0 4
88307: MINUS
88308: PUSH
88309: LD_INT 0
88311: LESS
88312: IFFALSE 88324
// min_x := 0 else
88314: LD_ADDR_VAR 0 7
88318: PUSH
88319: LD_INT 0
88321: ST_TO_ADDR
88322: GO 88340
// min_x := x - r ;
88324: LD_ADDR_VAR 0 7
88328: PUSH
88329: LD_VAR 0 2
88333: PUSH
88334: LD_VAR 0 4
88338: MINUS
88339: ST_TO_ADDR
// if y - r < 0 then
88340: LD_VAR 0 3
88344: PUSH
88345: LD_VAR 0 4
88349: MINUS
88350: PUSH
88351: LD_INT 0
88353: LESS
88354: IFFALSE 88366
// min_y := 0 else
88356: LD_ADDR_VAR 0 8
88360: PUSH
88361: LD_INT 0
88363: ST_TO_ADDR
88364: GO 88382
// min_y := y - r ;
88366: LD_ADDR_VAR 0 8
88370: PUSH
88371: LD_VAR 0 3
88375: PUSH
88376: LD_VAR 0 4
88380: MINUS
88381: ST_TO_ADDR
// max_x := x + r ;
88382: LD_ADDR_VAR 0 9
88386: PUSH
88387: LD_VAR 0 2
88391: PUSH
88392: LD_VAR 0 4
88396: PLUS
88397: ST_TO_ADDR
// max_y := y + r ;
88398: LD_ADDR_VAR 0 10
88402: PUSH
88403: LD_VAR 0 3
88407: PUSH
88408: LD_VAR 0 4
88412: PLUS
88413: ST_TO_ADDR
// for _x = min_x to max_x do
88414: LD_ADDR_VAR 0 11
88418: PUSH
88419: DOUBLE
88420: LD_VAR 0 7
88424: DEC
88425: ST_TO_ADDR
88426: LD_VAR 0 9
88430: PUSH
88431: FOR_TO
88432: IFFALSE 88549
// for _y = min_y to max_y do
88434: LD_ADDR_VAR 0 12
88438: PUSH
88439: DOUBLE
88440: LD_VAR 0 8
88444: DEC
88445: ST_TO_ADDR
88446: LD_VAR 0 10
88450: PUSH
88451: FOR_TO
88452: IFFALSE 88545
// begin if not ValidHex ( _x , _y ) then
88454: LD_VAR 0 11
88458: PPUSH
88459: LD_VAR 0 12
88463: PPUSH
88464: CALL_OW 488
88468: NOT
88469: IFFALSE 88473
// continue ;
88471: GO 88451
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
88473: LD_VAR 0 11
88477: PPUSH
88478: LD_VAR 0 12
88482: PPUSH
88483: CALL_OW 351
88487: PUSH
88488: LD_VAR 0 11
88492: PPUSH
88493: LD_VAR 0 12
88497: PPUSH
88498: CALL_OW 554
88502: AND
88503: IFFALSE 88543
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
88505: LD_ADDR_VAR 0 13
88509: PUSH
88510: LD_VAR 0 13
88514: PPUSH
88515: LD_VAR 0 13
88519: PUSH
88520: LD_INT 1
88522: PLUS
88523: PPUSH
88524: LD_VAR 0 11
88528: PUSH
88529: LD_VAR 0 12
88533: PUSH
88534: EMPTY
88535: LIST
88536: LIST
88537: PPUSH
88538: CALL_OW 2
88542: ST_TO_ADDR
// end ;
88543: GO 88451
88545: POP
88546: POP
88547: GO 88431
88549: POP
88550: POP
// if not list then
88551: LD_VAR 0 13
88555: NOT
88556: IFFALSE 88560
// exit ;
88558: GO 88631
// for i in list do
88560: LD_ADDR_VAR 0 6
88564: PUSH
88565: LD_VAR 0 13
88569: PUSH
88570: FOR_IN
88571: IFFALSE 88629
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
88573: LD_VAR 0 1
88577: PPUSH
88578: LD_STRING M
88580: PUSH
88581: LD_VAR 0 6
88585: PUSH
88586: LD_INT 1
88588: ARRAY
88589: PUSH
88590: LD_VAR 0 6
88594: PUSH
88595: LD_INT 2
88597: ARRAY
88598: PUSH
88599: LD_INT 0
88601: PUSH
88602: LD_INT 0
88604: PUSH
88605: LD_INT 0
88607: PUSH
88608: LD_INT 0
88610: PUSH
88611: EMPTY
88612: LIST
88613: LIST
88614: LIST
88615: LIST
88616: LIST
88617: LIST
88618: LIST
88619: PUSH
88620: EMPTY
88621: LIST
88622: PPUSH
88623: CALL_OW 447
88627: GO 88570
88629: POP
88630: POP
// end ;
88631: LD_VAR 0 5
88635: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
88636: LD_INT 0
88638: PPUSH
88639: PPUSH
88640: PPUSH
88641: PPUSH
88642: PPUSH
88643: PPUSH
88644: PPUSH
88645: PPUSH
88646: PPUSH
88647: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
88648: LD_VAR 0 1
88652: PPUSH
88653: CALL_OW 302
88657: NOT
88658: PUSH
88659: LD_VAR 0 2
88663: PPUSH
88664: LD_VAR 0 3
88668: PPUSH
88669: CALL_OW 488
88673: NOT
88674: OR
88675: PUSH
88676: LD_VAR 0 4
88680: NOT
88681: OR
88682: IFFALSE 88686
// exit ;
88684: GO 89199
// list := [ ] ;
88686: LD_ADDR_VAR 0 13
88690: PUSH
88691: EMPTY
88692: ST_TO_ADDR
// if x - r < 0 then
88693: LD_VAR 0 2
88697: PUSH
88698: LD_VAR 0 4
88702: MINUS
88703: PUSH
88704: LD_INT 0
88706: LESS
88707: IFFALSE 88719
// min_x := 0 else
88709: LD_ADDR_VAR 0 7
88713: PUSH
88714: LD_INT 0
88716: ST_TO_ADDR
88717: GO 88735
// min_x := x - r ;
88719: LD_ADDR_VAR 0 7
88723: PUSH
88724: LD_VAR 0 2
88728: PUSH
88729: LD_VAR 0 4
88733: MINUS
88734: ST_TO_ADDR
// if y - r < 0 then
88735: LD_VAR 0 3
88739: PUSH
88740: LD_VAR 0 4
88744: MINUS
88745: PUSH
88746: LD_INT 0
88748: LESS
88749: IFFALSE 88761
// min_y := 0 else
88751: LD_ADDR_VAR 0 8
88755: PUSH
88756: LD_INT 0
88758: ST_TO_ADDR
88759: GO 88777
// min_y := y - r ;
88761: LD_ADDR_VAR 0 8
88765: PUSH
88766: LD_VAR 0 3
88770: PUSH
88771: LD_VAR 0 4
88775: MINUS
88776: ST_TO_ADDR
// max_x := x + r ;
88777: LD_ADDR_VAR 0 9
88781: PUSH
88782: LD_VAR 0 2
88786: PUSH
88787: LD_VAR 0 4
88791: PLUS
88792: ST_TO_ADDR
// max_y := y + r ;
88793: LD_ADDR_VAR 0 10
88797: PUSH
88798: LD_VAR 0 3
88802: PUSH
88803: LD_VAR 0 4
88807: PLUS
88808: ST_TO_ADDR
// for _x = min_x to max_x do
88809: LD_ADDR_VAR 0 11
88813: PUSH
88814: DOUBLE
88815: LD_VAR 0 7
88819: DEC
88820: ST_TO_ADDR
88821: LD_VAR 0 9
88825: PUSH
88826: FOR_TO
88827: IFFALSE 88944
// for _y = min_y to max_y do
88829: LD_ADDR_VAR 0 12
88833: PUSH
88834: DOUBLE
88835: LD_VAR 0 8
88839: DEC
88840: ST_TO_ADDR
88841: LD_VAR 0 10
88845: PUSH
88846: FOR_TO
88847: IFFALSE 88940
// begin if not ValidHex ( _x , _y ) then
88849: LD_VAR 0 11
88853: PPUSH
88854: LD_VAR 0 12
88858: PPUSH
88859: CALL_OW 488
88863: NOT
88864: IFFALSE 88868
// continue ;
88866: GO 88846
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
88868: LD_VAR 0 11
88872: PPUSH
88873: LD_VAR 0 12
88877: PPUSH
88878: CALL_OW 351
88882: PUSH
88883: LD_VAR 0 11
88887: PPUSH
88888: LD_VAR 0 12
88892: PPUSH
88893: CALL_OW 554
88897: AND
88898: IFFALSE 88938
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
88900: LD_ADDR_VAR 0 13
88904: PUSH
88905: LD_VAR 0 13
88909: PPUSH
88910: LD_VAR 0 13
88914: PUSH
88915: LD_INT 1
88917: PLUS
88918: PPUSH
88919: LD_VAR 0 11
88923: PUSH
88924: LD_VAR 0 12
88928: PUSH
88929: EMPTY
88930: LIST
88931: LIST
88932: PPUSH
88933: CALL_OW 2
88937: ST_TO_ADDR
// end ;
88938: GO 88846
88940: POP
88941: POP
88942: GO 88826
88944: POP
88945: POP
// if not list then
88946: LD_VAR 0 13
88950: NOT
88951: IFFALSE 88955
// exit ;
88953: GO 89199
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
88955: LD_ADDR_VAR 0 13
88959: PUSH
88960: LD_VAR 0 1
88964: PPUSH
88965: LD_VAR 0 13
88969: PPUSH
88970: LD_INT 1
88972: PPUSH
88973: LD_INT 1
88975: PPUSH
88976: CALL 34721 0 4
88980: ST_TO_ADDR
// ComStop ( flame ) ;
88981: LD_VAR 0 1
88985: PPUSH
88986: CALL_OW 141
// for i in list do
88990: LD_ADDR_VAR 0 6
88994: PUSH
88995: LD_VAR 0 13
88999: PUSH
89000: FOR_IN
89001: IFFALSE 89032
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
89003: LD_VAR 0 1
89007: PPUSH
89008: LD_VAR 0 6
89012: PUSH
89013: LD_INT 1
89015: ARRAY
89016: PPUSH
89017: LD_VAR 0 6
89021: PUSH
89022: LD_INT 2
89024: ARRAY
89025: PPUSH
89026: CALL_OW 176
89030: GO 89000
89032: POP
89033: POP
// repeat wait ( 0 0$1 ) ;
89034: LD_INT 35
89036: PPUSH
89037: CALL_OW 67
// task := GetTaskList ( flame ) ;
89041: LD_ADDR_VAR 0 14
89045: PUSH
89046: LD_VAR 0 1
89050: PPUSH
89051: CALL_OW 437
89055: ST_TO_ADDR
// if not task then
89056: LD_VAR 0 14
89060: NOT
89061: IFFALSE 89065
// exit ;
89063: GO 89199
// if task [ 1 ] [ 1 ] <> | then
89065: LD_VAR 0 14
89069: PUSH
89070: LD_INT 1
89072: ARRAY
89073: PUSH
89074: LD_INT 1
89076: ARRAY
89077: PUSH
89078: LD_STRING |
89080: NONEQUAL
89081: IFFALSE 89085
// exit ;
89083: GO 89199
// _x := task [ 1 ] [ 2 ] ;
89085: LD_ADDR_VAR 0 11
89089: PUSH
89090: LD_VAR 0 14
89094: PUSH
89095: LD_INT 1
89097: ARRAY
89098: PUSH
89099: LD_INT 2
89101: ARRAY
89102: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
89103: LD_ADDR_VAR 0 12
89107: PUSH
89108: LD_VAR 0 14
89112: PUSH
89113: LD_INT 1
89115: ARRAY
89116: PUSH
89117: LD_INT 3
89119: ARRAY
89120: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
89121: LD_VAR 0 11
89125: PPUSH
89126: LD_VAR 0 12
89130: PPUSH
89131: CALL_OW 351
89135: NOT
89136: PUSH
89137: LD_VAR 0 11
89141: PPUSH
89142: LD_VAR 0 12
89146: PPUSH
89147: CALL_OW 554
89151: NOT
89152: OR
89153: IFFALSE 89187
// begin task := Delete ( task , 1 ) ;
89155: LD_ADDR_VAR 0 14
89159: PUSH
89160: LD_VAR 0 14
89164: PPUSH
89165: LD_INT 1
89167: PPUSH
89168: CALL_OW 3
89172: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
89173: LD_VAR 0 1
89177: PPUSH
89178: LD_VAR 0 14
89182: PPUSH
89183: CALL_OW 446
// end ; until not HasTask ( flame ) ;
89187: LD_VAR 0 1
89191: PPUSH
89192: CALL_OW 314
89196: NOT
89197: IFFALSE 89034
// end ;
89199: LD_VAR 0 5
89203: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
89204: LD_EXP 136
89208: NOT
89209: IFFALSE 89259
89211: GO 89213
89213: DISABLE
// begin initHack := true ;
89214: LD_ADDR_EXP 136
89218: PUSH
89219: LD_INT 1
89221: ST_TO_ADDR
// hackTanks := [ ] ;
89222: LD_ADDR_EXP 137
89226: PUSH
89227: EMPTY
89228: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
89229: LD_ADDR_EXP 138
89233: PUSH
89234: EMPTY
89235: ST_TO_ADDR
// hackLimit := 3 ;
89236: LD_ADDR_EXP 139
89240: PUSH
89241: LD_INT 3
89243: ST_TO_ADDR
// hackDist := 12 ;
89244: LD_ADDR_EXP 140
89248: PUSH
89249: LD_INT 12
89251: ST_TO_ADDR
// hackCounter := [ ] ;
89252: LD_ADDR_EXP 141
89256: PUSH
89257: EMPTY
89258: ST_TO_ADDR
// end ;
89259: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
89260: LD_EXP 136
89264: PUSH
89265: LD_INT 34
89267: PUSH
89268: LD_INT 99
89270: PUSH
89271: EMPTY
89272: LIST
89273: LIST
89274: PPUSH
89275: CALL_OW 69
89279: AND
89280: IFFALSE 89533
89282: GO 89284
89284: DISABLE
89285: LD_INT 0
89287: PPUSH
89288: PPUSH
// begin enable ;
89289: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
89290: LD_ADDR_VAR 0 1
89294: PUSH
89295: LD_INT 34
89297: PUSH
89298: LD_INT 99
89300: PUSH
89301: EMPTY
89302: LIST
89303: LIST
89304: PPUSH
89305: CALL_OW 69
89309: PUSH
89310: FOR_IN
89311: IFFALSE 89531
// begin if not i in hackTanks then
89313: LD_VAR 0 1
89317: PUSH
89318: LD_EXP 137
89322: IN
89323: NOT
89324: IFFALSE 89407
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
89326: LD_ADDR_EXP 137
89330: PUSH
89331: LD_EXP 137
89335: PPUSH
89336: LD_EXP 137
89340: PUSH
89341: LD_INT 1
89343: PLUS
89344: PPUSH
89345: LD_VAR 0 1
89349: PPUSH
89350: CALL_OW 1
89354: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
89355: LD_ADDR_EXP 138
89359: PUSH
89360: LD_EXP 138
89364: PPUSH
89365: LD_EXP 138
89369: PUSH
89370: LD_INT 1
89372: PLUS
89373: PPUSH
89374: EMPTY
89375: PPUSH
89376: CALL_OW 1
89380: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
89381: LD_ADDR_EXP 141
89385: PUSH
89386: LD_EXP 141
89390: PPUSH
89391: LD_EXP 141
89395: PUSH
89396: LD_INT 1
89398: PLUS
89399: PPUSH
89400: EMPTY
89401: PPUSH
89402: CALL_OW 1
89406: ST_TO_ADDR
// end ; if not IsOk ( i ) then
89407: LD_VAR 0 1
89411: PPUSH
89412: CALL_OW 302
89416: NOT
89417: IFFALSE 89430
// begin HackUnlinkAll ( i ) ;
89419: LD_VAR 0 1
89423: PPUSH
89424: CALL 89536 0 1
// continue ;
89428: GO 89310
// end ; HackCheckCapturedStatus ( i ) ;
89430: LD_VAR 0 1
89434: PPUSH
89435: CALL 89979 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
89439: LD_ADDR_VAR 0 2
89443: PUSH
89444: LD_INT 81
89446: PUSH
89447: LD_VAR 0 1
89451: PPUSH
89452: CALL_OW 255
89456: PUSH
89457: EMPTY
89458: LIST
89459: LIST
89460: PUSH
89461: LD_INT 33
89463: PUSH
89464: LD_INT 3
89466: PUSH
89467: EMPTY
89468: LIST
89469: LIST
89470: PUSH
89471: LD_INT 91
89473: PUSH
89474: LD_VAR 0 1
89478: PUSH
89479: LD_EXP 140
89483: PUSH
89484: EMPTY
89485: LIST
89486: LIST
89487: LIST
89488: PUSH
89489: LD_INT 50
89491: PUSH
89492: EMPTY
89493: LIST
89494: PUSH
89495: EMPTY
89496: LIST
89497: LIST
89498: LIST
89499: LIST
89500: PPUSH
89501: CALL_OW 69
89505: ST_TO_ADDR
// if not tmp then
89506: LD_VAR 0 2
89510: NOT
89511: IFFALSE 89515
// continue ;
89513: GO 89310
// HackLink ( i , tmp ) ;
89515: LD_VAR 0 1
89519: PPUSH
89520: LD_VAR 0 2
89524: PPUSH
89525: CALL 89672 0 2
// end ;
89529: GO 89310
89531: POP
89532: POP
// end ;
89533: PPOPN 2
89535: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
89536: LD_INT 0
89538: PPUSH
89539: PPUSH
89540: PPUSH
// if not hack in hackTanks then
89541: LD_VAR 0 1
89545: PUSH
89546: LD_EXP 137
89550: IN
89551: NOT
89552: IFFALSE 89556
// exit ;
89554: GO 89667
// index := GetElementIndex ( hackTanks , hack ) ;
89556: LD_ADDR_VAR 0 4
89560: PUSH
89561: LD_EXP 137
89565: PPUSH
89566: LD_VAR 0 1
89570: PPUSH
89571: CALL 34018 0 2
89575: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
89576: LD_EXP 138
89580: PUSH
89581: LD_VAR 0 4
89585: ARRAY
89586: IFFALSE 89667
// begin for i in hackTanksCaptured [ index ] do
89588: LD_ADDR_VAR 0 3
89592: PUSH
89593: LD_EXP 138
89597: PUSH
89598: LD_VAR 0 4
89602: ARRAY
89603: PUSH
89604: FOR_IN
89605: IFFALSE 89631
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
89607: LD_VAR 0 3
89611: PUSH
89612: LD_INT 1
89614: ARRAY
89615: PPUSH
89616: LD_VAR 0 3
89620: PUSH
89621: LD_INT 2
89623: ARRAY
89624: PPUSH
89625: CALL_OW 235
89629: GO 89604
89631: POP
89632: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
89633: LD_ADDR_EXP 138
89637: PUSH
89638: LD_EXP 138
89642: PPUSH
89643: LD_VAR 0 4
89647: PPUSH
89648: EMPTY
89649: PPUSH
89650: CALL_OW 1
89654: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
89655: LD_VAR 0 1
89659: PPUSH
89660: LD_INT 0
89662: PPUSH
89663: CALL_OW 505
// end ; end ;
89667: LD_VAR 0 2
89671: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
89672: LD_INT 0
89674: PPUSH
89675: PPUSH
89676: PPUSH
// if not hack in hackTanks or not vehicles then
89677: LD_VAR 0 1
89681: PUSH
89682: LD_EXP 137
89686: IN
89687: NOT
89688: PUSH
89689: LD_VAR 0 2
89693: NOT
89694: OR
89695: IFFALSE 89699
// exit ;
89697: GO 89974
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
89699: LD_ADDR_VAR 0 2
89703: PUSH
89704: LD_VAR 0 1
89708: PPUSH
89709: LD_VAR 0 2
89713: PPUSH
89714: LD_INT 1
89716: PPUSH
89717: LD_INT 1
89719: PPUSH
89720: CALL 34668 0 4
89724: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
89725: LD_ADDR_VAR 0 5
89729: PUSH
89730: LD_EXP 137
89734: PPUSH
89735: LD_VAR 0 1
89739: PPUSH
89740: CALL 34018 0 2
89744: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
89745: LD_EXP 138
89749: PUSH
89750: LD_VAR 0 5
89754: ARRAY
89755: PUSH
89756: LD_EXP 139
89760: LESS
89761: IFFALSE 89950
// begin for i := 1 to vehicles do
89763: LD_ADDR_VAR 0 4
89767: PUSH
89768: DOUBLE
89769: LD_INT 1
89771: DEC
89772: ST_TO_ADDR
89773: LD_VAR 0 2
89777: PUSH
89778: FOR_TO
89779: IFFALSE 89948
// begin if hackTanksCaptured [ index ] = hackLimit then
89781: LD_EXP 138
89785: PUSH
89786: LD_VAR 0 5
89790: ARRAY
89791: PUSH
89792: LD_EXP 139
89796: EQUAL
89797: IFFALSE 89801
// break ;
89799: GO 89948
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
89801: LD_ADDR_EXP 141
89805: PUSH
89806: LD_EXP 141
89810: PPUSH
89811: LD_VAR 0 5
89815: PPUSH
89816: LD_EXP 141
89820: PUSH
89821: LD_VAR 0 5
89825: ARRAY
89826: PUSH
89827: LD_INT 1
89829: PLUS
89830: PPUSH
89831: CALL_OW 1
89835: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
89836: LD_ADDR_EXP 138
89840: PUSH
89841: LD_EXP 138
89845: PPUSH
89846: LD_VAR 0 5
89850: PUSH
89851: LD_EXP 138
89855: PUSH
89856: LD_VAR 0 5
89860: ARRAY
89861: PUSH
89862: LD_INT 1
89864: PLUS
89865: PUSH
89866: EMPTY
89867: LIST
89868: LIST
89869: PPUSH
89870: LD_VAR 0 2
89874: PUSH
89875: LD_VAR 0 4
89879: ARRAY
89880: PUSH
89881: LD_VAR 0 2
89885: PUSH
89886: LD_VAR 0 4
89890: ARRAY
89891: PPUSH
89892: CALL_OW 255
89896: PUSH
89897: EMPTY
89898: LIST
89899: LIST
89900: PPUSH
89901: CALL 34233 0 3
89905: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
89906: LD_VAR 0 2
89910: PUSH
89911: LD_VAR 0 4
89915: ARRAY
89916: PPUSH
89917: LD_VAR 0 1
89921: PPUSH
89922: CALL_OW 255
89926: PPUSH
89927: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
89931: LD_VAR 0 2
89935: PUSH
89936: LD_VAR 0 4
89940: ARRAY
89941: PPUSH
89942: CALL_OW 141
// end ;
89946: GO 89778
89948: POP
89949: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
89950: LD_VAR 0 1
89954: PPUSH
89955: LD_EXP 138
89959: PUSH
89960: LD_VAR 0 5
89964: ARRAY
89965: PUSH
89966: LD_INT 0
89968: PLUS
89969: PPUSH
89970: CALL_OW 505
// end ;
89974: LD_VAR 0 3
89978: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
89979: LD_INT 0
89981: PPUSH
89982: PPUSH
89983: PPUSH
89984: PPUSH
// if not hack in hackTanks then
89985: LD_VAR 0 1
89989: PUSH
89990: LD_EXP 137
89994: IN
89995: NOT
89996: IFFALSE 90000
// exit ;
89998: GO 90240
// index := GetElementIndex ( hackTanks , hack ) ;
90000: LD_ADDR_VAR 0 4
90004: PUSH
90005: LD_EXP 137
90009: PPUSH
90010: LD_VAR 0 1
90014: PPUSH
90015: CALL 34018 0 2
90019: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
90020: LD_ADDR_VAR 0 3
90024: PUSH
90025: DOUBLE
90026: LD_EXP 138
90030: PUSH
90031: LD_VAR 0 4
90035: ARRAY
90036: INC
90037: ST_TO_ADDR
90038: LD_INT 1
90040: PUSH
90041: FOR_DOWNTO
90042: IFFALSE 90214
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
90044: LD_ADDR_VAR 0 5
90048: PUSH
90049: LD_EXP 138
90053: PUSH
90054: LD_VAR 0 4
90058: ARRAY
90059: PUSH
90060: LD_VAR 0 3
90064: ARRAY
90065: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
90066: LD_VAR 0 5
90070: PUSH
90071: LD_INT 1
90073: ARRAY
90074: PPUSH
90075: CALL_OW 302
90079: NOT
90080: PUSH
90081: LD_VAR 0 5
90085: PUSH
90086: LD_INT 1
90088: ARRAY
90089: PPUSH
90090: CALL_OW 255
90094: PUSH
90095: LD_VAR 0 1
90099: PPUSH
90100: CALL_OW 255
90104: NONEQUAL
90105: OR
90106: IFFALSE 90212
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
90108: LD_VAR 0 5
90112: PUSH
90113: LD_INT 1
90115: ARRAY
90116: PPUSH
90117: CALL_OW 305
90121: PUSH
90122: LD_VAR 0 5
90126: PUSH
90127: LD_INT 1
90129: ARRAY
90130: PPUSH
90131: CALL_OW 255
90135: PUSH
90136: LD_VAR 0 1
90140: PPUSH
90141: CALL_OW 255
90145: EQUAL
90146: AND
90147: IFFALSE 90171
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
90149: LD_VAR 0 5
90153: PUSH
90154: LD_INT 1
90156: ARRAY
90157: PPUSH
90158: LD_VAR 0 5
90162: PUSH
90163: LD_INT 2
90165: ARRAY
90166: PPUSH
90167: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
90171: LD_ADDR_EXP 138
90175: PUSH
90176: LD_EXP 138
90180: PPUSH
90181: LD_VAR 0 4
90185: PPUSH
90186: LD_EXP 138
90190: PUSH
90191: LD_VAR 0 4
90195: ARRAY
90196: PPUSH
90197: LD_VAR 0 3
90201: PPUSH
90202: CALL_OW 3
90206: PPUSH
90207: CALL_OW 1
90211: ST_TO_ADDR
// end ; end ;
90212: GO 90041
90214: POP
90215: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
90216: LD_VAR 0 1
90220: PPUSH
90221: LD_EXP 138
90225: PUSH
90226: LD_VAR 0 4
90230: ARRAY
90231: PUSH
90232: LD_INT 0
90234: PLUS
90235: PPUSH
90236: CALL_OW 505
// end ;
90240: LD_VAR 0 2
90244: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
90245: LD_INT 0
90247: PPUSH
90248: PPUSH
90249: PPUSH
90250: PPUSH
// if not hack in hackTanks then
90251: LD_VAR 0 1
90255: PUSH
90256: LD_EXP 137
90260: IN
90261: NOT
90262: IFFALSE 90266
// exit ;
90264: GO 90351
// index := GetElementIndex ( hackTanks , hack ) ;
90266: LD_ADDR_VAR 0 5
90270: PUSH
90271: LD_EXP 137
90275: PPUSH
90276: LD_VAR 0 1
90280: PPUSH
90281: CALL 34018 0 2
90285: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
90286: LD_ADDR_VAR 0 4
90290: PUSH
90291: DOUBLE
90292: LD_INT 1
90294: DEC
90295: ST_TO_ADDR
90296: LD_EXP 138
90300: PUSH
90301: LD_VAR 0 5
90305: ARRAY
90306: PUSH
90307: FOR_TO
90308: IFFALSE 90349
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
90310: LD_EXP 138
90314: PUSH
90315: LD_VAR 0 5
90319: ARRAY
90320: PUSH
90321: LD_VAR 0 4
90325: ARRAY
90326: PUSH
90327: LD_INT 1
90329: ARRAY
90330: PUSH
90331: LD_VAR 0 2
90335: EQUAL
90336: IFFALSE 90347
// KillUnit ( vehicle ) ;
90338: LD_VAR 0 2
90342: PPUSH
90343: CALL_OW 66
90347: GO 90307
90349: POP
90350: POP
// end ;
90351: LD_VAR 0 3
90355: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
90356: LD_EXP 142
90360: NOT
90361: IFFALSE 90396
90363: GO 90365
90365: DISABLE
// begin initMiner := true ;
90366: LD_ADDR_EXP 142
90370: PUSH
90371: LD_INT 1
90373: ST_TO_ADDR
// minersList := [ ] ;
90374: LD_ADDR_EXP 143
90378: PUSH
90379: EMPTY
90380: ST_TO_ADDR
// minerMinesList := [ ] ;
90381: LD_ADDR_EXP 144
90385: PUSH
90386: EMPTY
90387: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
90388: LD_ADDR_EXP 145
90392: PUSH
90393: LD_INT 5
90395: ST_TO_ADDR
// end ;
90396: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
90397: LD_EXP 142
90401: PUSH
90402: LD_INT 34
90404: PUSH
90405: LD_INT 81
90407: PUSH
90408: EMPTY
90409: LIST
90410: LIST
90411: PPUSH
90412: CALL_OW 69
90416: AND
90417: IFFALSE 90878
90419: GO 90421
90421: DISABLE
90422: LD_INT 0
90424: PPUSH
90425: PPUSH
90426: PPUSH
90427: PPUSH
// begin enable ;
90428: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
90429: LD_ADDR_VAR 0 1
90433: PUSH
90434: LD_INT 34
90436: PUSH
90437: LD_INT 81
90439: PUSH
90440: EMPTY
90441: LIST
90442: LIST
90443: PPUSH
90444: CALL_OW 69
90448: PUSH
90449: FOR_IN
90450: IFFALSE 90522
// begin if not i in minersList then
90452: LD_VAR 0 1
90456: PUSH
90457: LD_EXP 143
90461: IN
90462: NOT
90463: IFFALSE 90520
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
90465: LD_ADDR_EXP 143
90469: PUSH
90470: LD_EXP 143
90474: PPUSH
90475: LD_EXP 143
90479: PUSH
90480: LD_INT 1
90482: PLUS
90483: PPUSH
90484: LD_VAR 0 1
90488: PPUSH
90489: CALL_OW 1
90493: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
90494: LD_ADDR_EXP 144
90498: PUSH
90499: LD_EXP 144
90503: PPUSH
90504: LD_EXP 144
90508: PUSH
90509: LD_INT 1
90511: PLUS
90512: PPUSH
90513: EMPTY
90514: PPUSH
90515: CALL_OW 1
90519: ST_TO_ADDR
// end end ;
90520: GO 90449
90522: POP
90523: POP
// for i := minerMinesList downto 1 do
90524: LD_ADDR_VAR 0 1
90528: PUSH
90529: DOUBLE
90530: LD_EXP 144
90534: INC
90535: ST_TO_ADDR
90536: LD_INT 1
90538: PUSH
90539: FOR_DOWNTO
90540: IFFALSE 90876
// begin if IsLive ( minersList [ i ] ) then
90542: LD_EXP 143
90546: PUSH
90547: LD_VAR 0 1
90551: ARRAY
90552: PPUSH
90553: CALL_OW 300
90557: IFFALSE 90585
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
90559: LD_EXP 143
90563: PUSH
90564: LD_VAR 0 1
90568: ARRAY
90569: PPUSH
90570: LD_EXP 144
90574: PUSH
90575: LD_VAR 0 1
90579: ARRAY
90580: PPUSH
90581: CALL_OW 505
// if not minerMinesList [ i ] then
90585: LD_EXP 144
90589: PUSH
90590: LD_VAR 0 1
90594: ARRAY
90595: NOT
90596: IFFALSE 90600
// continue ;
90598: GO 90539
// for j := minerMinesList [ i ] downto 1 do
90600: LD_ADDR_VAR 0 2
90604: PUSH
90605: DOUBLE
90606: LD_EXP 144
90610: PUSH
90611: LD_VAR 0 1
90615: ARRAY
90616: INC
90617: ST_TO_ADDR
90618: LD_INT 1
90620: PUSH
90621: FOR_DOWNTO
90622: IFFALSE 90872
// begin side := GetSide ( minersList [ i ] ) ;
90624: LD_ADDR_VAR 0 3
90628: PUSH
90629: LD_EXP 143
90633: PUSH
90634: LD_VAR 0 1
90638: ARRAY
90639: PPUSH
90640: CALL_OW 255
90644: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
90645: LD_ADDR_VAR 0 4
90649: PUSH
90650: LD_EXP 144
90654: PUSH
90655: LD_VAR 0 1
90659: ARRAY
90660: PUSH
90661: LD_VAR 0 2
90665: ARRAY
90666: PUSH
90667: LD_INT 1
90669: ARRAY
90670: PPUSH
90671: LD_EXP 144
90675: PUSH
90676: LD_VAR 0 1
90680: ARRAY
90681: PUSH
90682: LD_VAR 0 2
90686: ARRAY
90687: PUSH
90688: LD_INT 2
90690: ARRAY
90691: PPUSH
90692: CALL_OW 428
90696: ST_TO_ADDR
// if not tmp then
90697: LD_VAR 0 4
90701: NOT
90702: IFFALSE 90706
// continue ;
90704: GO 90621
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
90706: LD_VAR 0 4
90710: PUSH
90711: LD_INT 81
90713: PUSH
90714: LD_VAR 0 3
90718: PUSH
90719: EMPTY
90720: LIST
90721: LIST
90722: PPUSH
90723: CALL_OW 69
90727: IN
90728: PUSH
90729: LD_EXP 144
90733: PUSH
90734: LD_VAR 0 1
90738: ARRAY
90739: PUSH
90740: LD_VAR 0 2
90744: ARRAY
90745: PUSH
90746: LD_INT 1
90748: ARRAY
90749: PPUSH
90750: LD_EXP 144
90754: PUSH
90755: LD_VAR 0 1
90759: ARRAY
90760: PUSH
90761: LD_VAR 0 2
90765: ARRAY
90766: PUSH
90767: LD_INT 2
90769: ARRAY
90770: PPUSH
90771: CALL_OW 458
90775: AND
90776: IFFALSE 90870
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
90778: LD_EXP 144
90782: PUSH
90783: LD_VAR 0 1
90787: ARRAY
90788: PUSH
90789: LD_VAR 0 2
90793: ARRAY
90794: PUSH
90795: LD_INT 1
90797: ARRAY
90798: PPUSH
90799: LD_EXP 144
90803: PUSH
90804: LD_VAR 0 1
90808: ARRAY
90809: PUSH
90810: LD_VAR 0 2
90814: ARRAY
90815: PUSH
90816: LD_INT 2
90818: ARRAY
90819: PPUSH
90820: LD_VAR 0 3
90824: PPUSH
90825: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
90829: LD_ADDR_EXP 144
90833: PUSH
90834: LD_EXP 144
90838: PPUSH
90839: LD_VAR 0 1
90843: PPUSH
90844: LD_EXP 144
90848: PUSH
90849: LD_VAR 0 1
90853: ARRAY
90854: PPUSH
90855: LD_VAR 0 2
90859: PPUSH
90860: CALL_OW 3
90864: PPUSH
90865: CALL_OW 1
90869: ST_TO_ADDR
// end ; end ;
90870: GO 90621
90872: POP
90873: POP
// end ;
90874: GO 90539
90876: POP
90877: POP
// end ;
90878: PPOPN 4
90880: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
90881: LD_INT 0
90883: PPUSH
90884: PPUSH
// result := false ;
90885: LD_ADDR_VAR 0 4
90889: PUSH
90890: LD_INT 0
90892: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
90893: LD_VAR 0 1
90897: PPUSH
90898: CALL_OW 264
90902: PUSH
90903: LD_INT 81
90905: EQUAL
90906: NOT
90907: IFFALSE 90911
// exit ;
90909: GO 91151
// index := GetElementIndex ( minersList , unit ) ;
90911: LD_ADDR_VAR 0 5
90915: PUSH
90916: LD_EXP 143
90920: PPUSH
90921: LD_VAR 0 1
90925: PPUSH
90926: CALL 34018 0 2
90930: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
90931: LD_EXP 144
90935: PUSH
90936: LD_VAR 0 5
90940: ARRAY
90941: PUSH
90942: LD_EXP 145
90946: GREATEREQUAL
90947: IFFALSE 90951
// exit ;
90949: GO 91151
// ComMoveXY ( unit , x , y ) ;
90951: LD_VAR 0 1
90955: PPUSH
90956: LD_VAR 0 2
90960: PPUSH
90961: LD_VAR 0 3
90965: PPUSH
90966: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90970: LD_INT 35
90972: PPUSH
90973: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
90977: LD_VAR 0 1
90981: PPUSH
90982: LD_VAR 0 2
90986: PPUSH
90987: LD_VAR 0 3
90991: PPUSH
90992: CALL 65770 0 3
90996: NOT
90997: PUSH
90998: LD_VAR 0 1
91002: PPUSH
91003: CALL_OW 314
91007: AND
91008: IFFALSE 91012
// exit ;
91010: GO 91151
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
91012: LD_VAR 0 2
91016: PPUSH
91017: LD_VAR 0 3
91021: PPUSH
91022: CALL_OW 428
91026: PUSH
91027: LD_VAR 0 1
91031: EQUAL
91032: PUSH
91033: LD_VAR 0 1
91037: PPUSH
91038: CALL_OW 314
91042: NOT
91043: AND
91044: IFFALSE 90970
// PlaySoundXY ( x , y , PlantMine ) ;
91046: LD_VAR 0 2
91050: PPUSH
91051: LD_VAR 0 3
91055: PPUSH
91056: LD_STRING PlantMine
91058: PPUSH
91059: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
91063: LD_VAR 0 2
91067: PPUSH
91068: LD_VAR 0 3
91072: PPUSH
91073: LD_VAR 0 1
91077: PPUSH
91078: CALL_OW 255
91082: PPUSH
91083: LD_INT 0
91085: PPUSH
91086: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
91090: LD_ADDR_EXP 144
91094: PUSH
91095: LD_EXP 144
91099: PPUSH
91100: LD_VAR 0 5
91104: PUSH
91105: LD_EXP 144
91109: PUSH
91110: LD_VAR 0 5
91114: ARRAY
91115: PUSH
91116: LD_INT 1
91118: PLUS
91119: PUSH
91120: EMPTY
91121: LIST
91122: LIST
91123: PPUSH
91124: LD_VAR 0 2
91128: PUSH
91129: LD_VAR 0 3
91133: PUSH
91134: EMPTY
91135: LIST
91136: LIST
91137: PPUSH
91138: CALL 34233 0 3
91142: ST_TO_ADDR
// result := true ;
91143: LD_ADDR_VAR 0 4
91147: PUSH
91148: LD_INT 1
91150: ST_TO_ADDR
// end ;
91151: LD_VAR 0 4
91155: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
91156: LD_INT 0
91158: PPUSH
91159: PPUSH
91160: PPUSH
// if not unit in minersList then
91161: LD_VAR 0 1
91165: PUSH
91166: LD_EXP 143
91170: IN
91171: NOT
91172: IFFALSE 91176
// exit ;
91174: GO 91568
// index := GetElementIndex ( minersList , unit ) ;
91176: LD_ADDR_VAR 0 6
91180: PUSH
91181: LD_EXP 143
91185: PPUSH
91186: LD_VAR 0 1
91190: PPUSH
91191: CALL 34018 0 2
91195: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
91196: LD_ADDR_VAR 0 5
91200: PUSH
91201: DOUBLE
91202: LD_EXP 144
91206: PUSH
91207: LD_VAR 0 6
91211: ARRAY
91212: INC
91213: ST_TO_ADDR
91214: LD_INT 1
91216: PUSH
91217: FOR_DOWNTO
91218: IFFALSE 91379
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
91220: LD_EXP 144
91224: PUSH
91225: LD_VAR 0 6
91229: ARRAY
91230: PUSH
91231: LD_VAR 0 5
91235: ARRAY
91236: PUSH
91237: LD_INT 1
91239: ARRAY
91240: PUSH
91241: LD_VAR 0 2
91245: EQUAL
91246: PUSH
91247: LD_EXP 144
91251: PUSH
91252: LD_VAR 0 6
91256: ARRAY
91257: PUSH
91258: LD_VAR 0 5
91262: ARRAY
91263: PUSH
91264: LD_INT 2
91266: ARRAY
91267: PUSH
91268: LD_VAR 0 3
91272: EQUAL
91273: AND
91274: IFFALSE 91377
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
91276: LD_EXP 144
91280: PUSH
91281: LD_VAR 0 6
91285: ARRAY
91286: PUSH
91287: LD_VAR 0 5
91291: ARRAY
91292: PUSH
91293: LD_INT 1
91295: ARRAY
91296: PPUSH
91297: LD_EXP 144
91301: PUSH
91302: LD_VAR 0 6
91306: ARRAY
91307: PUSH
91308: LD_VAR 0 5
91312: ARRAY
91313: PUSH
91314: LD_INT 2
91316: ARRAY
91317: PPUSH
91318: LD_VAR 0 1
91322: PPUSH
91323: CALL_OW 255
91327: PPUSH
91328: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
91332: LD_ADDR_EXP 144
91336: PUSH
91337: LD_EXP 144
91341: PPUSH
91342: LD_VAR 0 6
91346: PPUSH
91347: LD_EXP 144
91351: PUSH
91352: LD_VAR 0 6
91356: ARRAY
91357: PPUSH
91358: LD_VAR 0 5
91362: PPUSH
91363: CALL_OW 3
91367: PPUSH
91368: CALL_OW 1
91372: ST_TO_ADDR
// exit ;
91373: POP
91374: POP
91375: GO 91568
// end ; end ;
91377: GO 91217
91379: POP
91380: POP
// for i := minerMinesList [ index ] downto 1 do
91381: LD_ADDR_VAR 0 5
91385: PUSH
91386: DOUBLE
91387: LD_EXP 144
91391: PUSH
91392: LD_VAR 0 6
91396: ARRAY
91397: INC
91398: ST_TO_ADDR
91399: LD_INT 1
91401: PUSH
91402: FOR_DOWNTO
91403: IFFALSE 91566
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
91405: LD_EXP 144
91409: PUSH
91410: LD_VAR 0 6
91414: ARRAY
91415: PUSH
91416: LD_VAR 0 5
91420: ARRAY
91421: PUSH
91422: LD_INT 1
91424: ARRAY
91425: PPUSH
91426: LD_EXP 144
91430: PUSH
91431: LD_VAR 0 6
91435: ARRAY
91436: PUSH
91437: LD_VAR 0 5
91441: ARRAY
91442: PUSH
91443: LD_INT 2
91445: ARRAY
91446: PPUSH
91447: LD_VAR 0 2
91451: PPUSH
91452: LD_VAR 0 3
91456: PPUSH
91457: CALL_OW 298
91461: PUSH
91462: LD_INT 6
91464: LESS
91465: IFFALSE 91564
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
91467: LD_EXP 144
91471: PUSH
91472: LD_VAR 0 6
91476: ARRAY
91477: PUSH
91478: LD_VAR 0 5
91482: ARRAY
91483: PUSH
91484: LD_INT 1
91486: ARRAY
91487: PPUSH
91488: LD_EXP 144
91492: PUSH
91493: LD_VAR 0 6
91497: ARRAY
91498: PUSH
91499: LD_VAR 0 5
91503: ARRAY
91504: PUSH
91505: LD_INT 2
91507: ARRAY
91508: PPUSH
91509: LD_VAR 0 1
91513: PPUSH
91514: CALL_OW 255
91518: PPUSH
91519: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
91523: LD_ADDR_EXP 144
91527: PUSH
91528: LD_EXP 144
91532: PPUSH
91533: LD_VAR 0 6
91537: PPUSH
91538: LD_EXP 144
91542: PUSH
91543: LD_VAR 0 6
91547: ARRAY
91548: PPUSH
91549: LD_VAR 0 5
91553: PPUSH
91554: CALL_OW 3
91558: PPUSH
91559: CALL_OW 1
91563: ST_TO_ADDR
// end ; end ;
91564: GO 91402
91566: POP
91567: POP
// end ;
91568: LD_VAR 0 4
91572: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
91573: LD_INT 0
91575: PPUSH
91576: PPUSH
91577: PPUSH
91578: PPUSH
91579: PPUSH
91580: PPUSH
91581: PPUSH
91582: PPUSH
91583: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
91584: LD_VAR 0 1
91588: PPUSH
91589: CALL_OW 264
91593: PUSH
91594: LD_INT 81
91596: EQUAL
91597: NOT
91598: PUSH
91599: LD_VAR 0 1
91603: PUSH
91604: LD_EXP 143
91608: IN
91609: NOT
91610: OR
91611: IFFALSE 91615
// exit ;
91613: GO 91937
// index := GetElementIndex ( minersList , unit ) ;
91615: LD_ADDR_VAR 0 6
91619: PUSH
91620: LD_EXP 143
91624: PPUSH
91625: LD_VAR 0 1
91629: PPUSH
91630: CALL 34018 0 2
91634: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
91635: LD_ADDR_VAR 0 8
91639: PUSH
91640: LD_EXP 145
91644: PUSH
91645: LD_EXP 144
91649: PUSH
91650: LD_VAR 0 6
91654: ARRAY
91655: MINUS
91656: ST_TO_ADDR
// if not minesFreeAmount then
91657: LD_VAR 0 8
91661: NOT
91662: IFFALSE 91666
// exit ;
91664: GO 91937
// tmp := [ ] ;
91666: LD_ADDR_VAR 0 7
91670: PUSH
91671: EMPTY
91672: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
91673: LD_ADDR_VAR 0 5
91677: PUSH
91678: DOUBLE
91679: LD_INT 1
91681: DEC
91682: ST_TO_ADDR
91683: LD_VAR 0 8
91687: PUSH
91688: FOR_TO
91689: IFFALSE 91884
// begin _d := rand ( 0 , 5 ) ;
91691: LD_ADDR_VAR 0 11
91695: PUSH
91696: LD_INT 0
91698: PPUSH
91699: LD_INT 5
91701: PPUSH
91702: CALL_OW 12
91706: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
91707: LD_ADDR_VAR 0 12
91711: PUSH
91712: LD_INT 2
91714: PPUSH
91715: LD_INT 6
91717: PPUSH
91718: CALL_OW 12
91722: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
91723: LD_ADDR_VAR 0 9
91727: PUSH
91728: LD_VAR 0 2
91732: PPUSH
91733: LD_VAR 0 11
91737: PPUSH
91738: LD_VAR 0 12
91742: PPUSH
91743: CALL_OW 272
91747: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
91748: LD_ADDR_VAR 0 10
91752: PUSH
91753: LD_VAR 0 3
91757: PPUSH
91758: LD_VAR 0 11
91762: PPUSH
91763: LD_VAR 0 12
91767: PPUSH
91768: CALL_OW 273
91772: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
91773: LD_VAR 0 9
91777: PPUSH
91778: LD_VAR 0 10
91782: PPUSH
91783: CALL_OW 488
91787: PUSH
91788: LD_VAR 0 9
91792: PUSH
91793: LD_VAR 0 10
91797: PUSH
91798: EMPTY
91799: LIST
91800: LIST
91801: PUSH
91802: LD_VAR 0 7
91806: IN
91807: NOT
91808: AND
91809: PUSH
91810: LD_VAR 0 9
91814: PPUSH
91815: LD_VAR 0 10
91819: PPUSH
91820: CALL_OW 458
91824: NOT
91825: AND
91826: IFFALSE 91868
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
91828: LD_ADDR_VAR 0 7
91832: PUSH
91833: LD_VAR 0 7
91837: PPUSH
91838: LD_VAR 0 7
91842: PUSH
91843: LD_INT 1
91845: PLUS
91846: PPUSH
91847: LD_VAR 0 9
91851: PUSH
91852: LD_VAR 0 10
91856: PUSH
91857: EMPTY
91858: LIST
91859: LIST
91860: PPUSH
91861: CALL_OW 1
91865: ST_TO_ADDR
91866: GO 91882
// i := i - 1 ;
91868: LD_ADDR_VAR 0 5
91872: PUSH
91873: LD_VAR 0 5
91877: PUSH
91878: LD_INT 1
91880: MINUS
91881: ST_TO_ADDR
// end ;
91882: GO 91688
91884: POP
91885: POP
// for i in tmp do
91886: LD_ADDR_VAR 0 5
91890: PUSH
91891: LD_VAR 0 7
91895: PUSH
91896: FOR_IN
91897: IFFALSE 91935
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
91899: LD_VAR 0 1
91903: PPUSH
91904: LD_VAR 0 5
91908: PUSH
91909: LD_INT 1
91911: ARRAY
91912: PPUSH
91913: LD_VAR 0 5
91917: PUSH
91918: LD_INT 2
91920: ARRAY
91921: PPUSH
91922: CALL 90881 0 3
91926: NOT
91927: IFFALSE 91933
// exit ;
91929: POP
91930: POP
91931: GO 91937
91933: GO 91896
91935: POP
91936: POP
// end ;
91937: LD_VAR 0 4
91941: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
91942: LD_INT 0
91944: PPUSH
91945: PPUSH
91946: PPUSH
91947: PPUSH
91948: PPUSH
91949: PPUSH
91950: PPUSH
// if not GetClass ( unit ) = class_sniper then
91951: LD_VAR 0 1
91955: PPUSH
91956: CALL_OW 257
91960: PUSH
91961: LD_INT 5
91963: EQUAL
91964: NOT
91965: IFFALSE 91969
// exit ;
91967: GO 92357
// dist := 8 ;
91969: LD_ADDR_VAR 0 5
91973: PUSH
91974: LD_INT 8
91976: ST_TO_ADDR
// viewRange := 12 ;
91977: LD_ADDR_VAR 0 7
91981: PUSH
91982: LD_INT 12
91984: ST_TO_ADDR
// side := GetSide ( unit ) ;
91985: LD_ADDR_VAR 0 6
91989: PUSH
91990: LD_VAR 0 1
91994: PPUSH
91995: CALL_OW 255
91999: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
92000: LD_INT 61
92002: PPUSH
92003: LD_VAR 0 6
92007: PPUSH
92008: CALL_OW 321
92012: PUSH
92013: LD_INT 2
92015: EQUAL
92016: IFFALSE 92026
// viewRange := 16 ;
92018: LD_ADDR_VAR 0 7
92022: PUSH
92023: LD_INT 16
92025: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
92026: LD_VAR 0 1
92030: PPUSH
92031: LD_VAR 0 2
92035: PPUSH
92036: LD_VAR 0 3
92040: PPUSH
92041: CALL_OW 297
92045: PUSH
92046: LD_VAR 0 5
92050: GREATER
92051: IFFALSE 92130
// begin ComMoveXY ( unit , x , y ) ;
92053: LD_VAR 0 1
92057: PPUSH
92058: LD_VAR 0 2
92062: PPUSH
92063: LD_VAR 0 3
92067: PPUSH
92068: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
92072: LD_INT 35
92074: PPUSH
92075: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
92079: LD_VAR 0 1
92083: PPUSH
92084: LD_VAR 0 2
92088: PPUSH
92089: LD_VAR 0 3
92093: PPUSH
92094: CALL 65770 0 3
92098: NOT
92099: IFFALSE 92103
// exit ;
92101: GO 92357
// until GetDistUnitXY ( unit , x , y ) < dist ;
92103: LD_VAR 0 1
92107: PPUSH
92108: LD_VAR 0 2
92112: PPUSH
92113: LD_VAR 0 3
92117: PPUSH
92118: CALL_OW 297
92122: PUSH
92123: LD_VAR 0 5
92127: LESS
92128: IFFALSE 92072
// end ; ComTurnXY ( unit , x , y ) ;
92130: LD_VAR 0 1
92134: PPUSH
92135: LD_VAR 0 2
92139: PPUSH
92140: LD_VAR 0 3
92144: PPUSH
92145: CALL_OW 118
// wait ( 5 ) ;
92149: LD_INT 5
92151: PPUSH
92152: CALL_OW 67
// _d := GetDir ( unit ) ;
92156: LD_ADDR_VAR 0 10
92160: PUSH
92161: LD_VAR 0 1
92165: PPUSH
92166: CALL_OW 254
92170: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
92171: LD_ADDR_VAR 0 8
92175: PUSH
92176: LD_VAR 0 1
92180: PPUSH
92181: CALL_OW 250
92185: PPUSH
92186: LD_VAR 0 10
92190: PPUSH
92191: LD_VAR 0 5
92195: PPUSH
92196: CALL_OW 272
92200: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
92201: LD_ADDR_VAR 0 9
92205: PUSH
92206: LD_VAR 0 1
92210: PPUSH
92211: CALL_OW 251
92215: PPUSH
92216: LD_VAR 0 10
92220: PPUSH
92221: LD_VAR 0 5
92225: PPUSH
92226: CALL_OW 273
92230: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
92231: LD_VAR 0 8
92235: PPUSH
92236: LD_VAR 0 9
92240: PPUSH
92241: CALL_OW 488
92245: NOT
92246: IFFALSE 92250
// exit ;
92248: GO 92357
// ComAnimCustom ( unit , 1 ) ;
92250: LD_VAR 0 1
92254: PPUSH
92255: LD_INT 1
92257: PPUSH
92258: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
92262: LD_VAR 0 8
92266: PPUSH
92267: LD_VAR 0 9
92271: PPUSH
92272: LD_VAR 0 6
92276: PPUSH
92277: LD_VAR 0 7
92281: PPUSH
92282: CALL_OW 330
// repeat wait ( 1 ) ;
92286: LD_INT 1
92288: PPUSH
92289: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
92293: LD_VAR 0 1
92297: PPUSH
92298: CALL_OW 316
92302: PUSH
92303: LD_VAR 0 1
92307: PPUSH
92308: CALL_OW 314
92312: OR
92313: PUSH
92314: LD_VAR 0 1
92318: PPUSH
92319: CALL_OW 302
92323: NOT
92324: OR
92325: PUSH
92326: LD_VAR 0 1
92330: PPUSH
92331: CALL_OW 301
92335: OR
92336: IFFALSE 92286
// RemoveSeeing ( _x , _y , side ) ;
92338: LD_VAR 0 8
92342: PPUSH
92343: LD_VAR 0 9
92347: PPUSH
92348: LD_VAR 0 6
92352: PPUSH
92353: CALL_OW 331
// end ; end_of_file
92357: LD_VAR 0 4
92361: RET
// export function StopOriginalMusic ; begin
92362: LD_INT 0
92364: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
92365: LD_STRING OW_FORCEMUSICDISABLE(true);
92367: PPUSH
92368: CALL_OW 559
// end ;
92372: LD_VAR 0 1
92376: RET
// export function PlayOriginalMusic ; begin
92377: LD_INT 0
92379: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
92380: LD_STRING OW_FORCEMUSICDISABLE(false);
92382: PPUSH
92383: CALL_OW 559
// end ;
92387: LD_VAR 0 1
92391: RET
// export function PlayCustomMusic ( track , callback ) ; begin
92392: LD_INT 0
92394: PPUSH
// StopOriginalMusic ;
92395: CALL 92362 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
92399: LD_STRING playMusic("
92401: PUSH
92402: LD_VAR 0 1
92406: STR
92407: PUSH
92408: LD_STRING ", "
92410: STR
92411: PUSH
92412: LD_VAR 0 2
92416: STR
92417: PUSH
92418: LD_STRING ")
92420: STR
92421: PPUSH
92422: CALL_OW 559
// end ;
92426: LD_VAR 0 3
92430: RET
