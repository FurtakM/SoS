// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 19938 0 0
// PrepareRussian ;
  12: CALL 1987 0 0
// PrepareArabian ;
  16: CALL 431 0 0
// Action ;
  20: CALL 3730 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// enable ( entranceEvent ) ;
 420: LD_INT 1
 422: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 423: LD_INT 2
 425: DISABLE_MARKED
// end ; end_of_file
 426: LD_VAR 0 1
 430: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 431: LD_INT 0
 433: PPUSH
 434: PPUSH
// uc_side := 4 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 4
 442: ST_TO_ADDR
// uc_nation := 1 ;
 443: LD_ADDR_OWVAR 21
 447: PUSH
 448: LD_INT 1
 450: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 451: LD_ADDR_EXP 55
 455: PUSH
 456: LD_STRING 07_Americans
 458: PPUSH
 459: CALL_OW 31
 463: ST_TO_ADDR
// if americanSquad < 5 then
 464: LD_EXP 55
 468: PUSH
 469: LD_INT 5
 471: LESS
 472: IFFALSE 566
// begin if not americanSquad then
 474: LD_EXP 55
 478: NOT
 479: IFFALSE 488
// americanSquad := [ ] ;
 481: LD_ADDR_EXP 55
 485: PUSH
 486: EMPTY
 487: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 488: LD_ADDR_VAR 0 2
 492: PUSH
 493: DOUBLE
 494: LD_EXP 55
 498: DEC
 499: ST_TO_ADDR
 500: LD_INT 2
 502: PUSH
 503: LD_INT 3
 505: PUSH
 506: LD_INT 4
 508: PUSH
 509: LD_INT 4
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_OWVAR 67
 522: ARRAY
 523: PUSH
 524: FOR_TO
 525: IFFALSE 562
// begin PrepareHuman ( false , 2 , 6 ) ;
 527: LD_INT 0
 529: PPUSH
 530: LD_INT 2
 532: PPUSH
 533: LD_INT 6
 535: PPUSH
 536: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 540: LD_ADDR_EXP 55
 544: PUSH
 545: LD_EXP 55
 549: PPUSH
 550: CALL_OW 44
 554: PPUSH
 555: CALL 65463 0 2
 559: ST_TO_ADDR
// end ;
 560: GO 524
 562: POP
 563: POP
// end else
 564: GO 613
// for i := Count ( americanSquad ) downto 5 do
 566: LD_ADDR_VAR 0 2
 570: PUSH
 571: DOUBLE
 572: LD_EXP 55
 576: PPUSH
 577: CALL 30097 0 1
 581: INC
 582: ST_TO_ADDR
 583: LD_INT 5
 585: PUSH
 586: FOR_DOWNTO
 587: IFFALSE 611
// americanSquad := Delete ( americanSquad , i ) ;
 589: LD_ADDR_EXP 55
 593: PUSH
 594: LD_EXP 55
 598: PPUSH
 599: LD_VAR 0 2
 603: PPUSH
 604: CALL_OW 3
 608: ST_TO_ADDR
 609: GO 586
 611: POP
 612: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 613: LD_ADDR_EXP 57
 617: PUSH
 618: LD_STRING UsCommander
 620: PPUSH
 621: LD_EXP 1
 625: NOT
 626: PPUSH
 627: LD_STRING 07_
 629: PPUSH
 630: CALL 27995 0 3
 634: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 6
 640: PPUSH
 641: CALL_OW 381
// Jerry := CreateHuman ;
 645: LD_ADDR_EXP 58
 649: PUSH
 650: CALL_OW 44
 654: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 655: LD_EXP 58
 659: PPUSH
 660: LD_INT 33
 662: PPUSH
 663: CALL_OW 336
// if not Doug then
 667: LD_EXP 57
 671: NOT
 672: IFFALSE 694
// begin PrepareSoldier ( sex_male , 6 ) ;
 674: LD_INT 1
 676: PPUSH
 677: LD_INT 6
 679: PPUSH
 680: CALL_OW 381
// Doug := CreateHuman ;
 684: LD_ADDR_EXP 57
 688: PUSH
 689: CALL_OW 44
 693: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 694: LD_EXP 57
 698: PPUSH
 699: LD_INT 33
 701: PPUSH
 702: CALL_OW 336
// if johnnySaved or debug then
 706: LD_EXP 3
 710: PUSH
 711: LD_EXP 1
 715: OR
 716: IFFALSE 743
// begin Harris := NewCharacter ( Harris ) ;
 718: LD_ADDR_EXP 56
 722: PUSH
 723: LD_STRING Harris
 725: PPUSH
 726: CALL_OW 25
 730: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 731: LD_EXP 56
 735: PPUSH
 736: LD_INT 33
 738: PPUSH
 739: CALL_OW 336
// end ; uc_side := 2 ;
 743: LD_ADDR_OWVAR 20
 747: PUSH
 748: LD_INT 2
 750: ST_TO_ADDR
// uc_nation := 2 ;
 751: LD_ADDR_OWVAR 21
 755: PUSH
 756: LD_INT 2
 758: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 759: LD_ADDR_EXP 43
 763: PUSH
 764: LD_STRING Heike
 766: PPUSH
 767: LD_EXP 1
 771: NOT
 772: PPUSH
 773: LD_EXP 2
 777: PPUSH
 778: CALL 27995 0 3
 782: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 783: LD_ADDR_EXP 46
 787: PUSH
 788: LD_STRING Ibrahim
 790: PPUSH
 791: LD_EXP 1
 795: NOT
 796: PPUSH
 797: LD_EXP 2
 801: PPUSH
 802: CALL 27995 0 3
 806: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 807: LD_ADDR_EXP 44
 811: PUSH
 812: LD_STRING Givi
 814: PPUSH
 815: LD_EXP 1
 819: NOT
 820: PPUSH
 821: LD_EXP 2
 825: PPUSH
 826: CALL 27995 0 3
 830: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 831: LD_ADDR_EXP 47
 835: PUSH
 836: LD_STRING Kamil
 838: PPUSH
 839: LD_EXP 1
 843: NOT
 844: PPUSH
 845: LD_EXP 2
 849: PPUSH
 850: CALL 27995 0 3
 854: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 855: LD_ADDR_EXP 48
 859: PUSH
 860: LD_STRING Kaia
 862: PPUSH
 863: LD_EXP 1
 867: NOT
 868: PPUSH
 869: LD_EXP 2
 873: PPUSH
 874: CALL 27995 0 3
 878: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 879: LD_ADDR_EXP 49
 883: PUSH
 884: LD_STRING Sophia
 886: PPUSH
 887: LD_EXP 1
 891: NOT
 892: PPUSH
 893: LD_EXP 2
 897: PPUSH
 898: CALL 27995 0 3
 902: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 903: LD_ADDR_EXP 50
 907: PUSH
 908: LD_STRING Markov
 910: PPUSH
 911: LD_EXP 1
 915: NOT
 916: PPUSH
 917: LD_EXP 2
 921: PPUSH
 922: CALL 27995 0 3
 926: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 927: LD_ADDR_EXP 53
 931: PUSH
 932: LD_STRING Aviradze
 934: PPUSH
 935: LD_EXP 1
 939: NOT
 940: PPUSH
 941: LD_EXP 2
 945: PPUSH
 946: CALL 27995 0 3
 950: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 951: LD_ADDR_EXP 52
 955: PUSH
 956: LD_STRING Kurt
 958: PPUSH
 959: LD_EXP 1
 963: NOT
 964: PPUSH
 965: LD_EXP 2
 969: PPUSH
 970: CALL 27995 0 3
 974: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 975: LD_ADDR_EXP 45
 979: PUSH
 980: LD_STRING Mike
 982: PPUSH
 983: LD_EXP 1
 987: NOT
 988: PPUSH
 989: LD_EXP 2
 993: PPUSH
 994: CALL 27995 0 3
 998: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 999: LD_ADDR_EXP 51
1003: PUSH
1004: LD_STRING Olaf
1006: PPUSH
1007: LD_EXP 1
1011: NOT
1012: PPUSH
1013: LD_EXP 2
1017: PPUSH
1018: CALL 27995 0 3
1022: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1023: LD_ADDR_EXP 54
1027: PUSH
1028: LD_STRING 07_others
1030: PPUSH
1031: CALL_OW 31
1035: ST_TO_ADDR
// end ;
1036: LD_VAR 0 1
1040: RET
// export function PrepareGame ; var i ; begin
1041: LD_INT 0
1043: PPUSH
1044: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1045: LD_EXP 43
1049: PPUSH
1050: LD_INT 23
1052: PPUSH
1053: CALL_OW 52
// if Givi then
1057: LD_EXP 44
1061: IFFALSE 1099
// begin SetSide ( Givi , 5 ) ;
1063: LD_EXP 44
1067: PPUSH
1068: LD_INT 5
1070: PPUSH
1071: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1075: LD_EXP 44
1079: PPUSH
1080: LD_INT 9
1082: PPUSH
1083: LD_INT 0
1085: PPUSH
1086: CALL_OW 49
// ComHold ( Givi ) ;
1090: LD_EXP 44
1094: PPUSH
1095: CALL_OW 140
// end ; if Markov then
1099: LD_EXP 50
1103: IFFALSE 1141
// begin SetSide ( Markov , 5 ) ;
1105: LD_EXP 50
1109: PPUSH
1110: LD_INT 5
1112: PPUSH
1113: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1117: LD_EXP 50
1121: PPUSH
1122: LD_INT 3
1124: PPUSH
1125: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1129: LD_EXP 50
1133: PPUSH
1134: LD_INT 61
1136: PPUSH
1137: CALL_OW 52
// end ; if Mike then
1141: LD_EXP 45
1145: IFFALSE 1183
// begin SetSide ( Mike , 5 ) ;
1147: LD_EXP 45
1151: PPUSH
1152: LD_INT 5
1154: PPUSH
1155: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1159: LD_EXP 45
1163: PPUSH
1164: LD_INT 17
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// ComHold ( Mike ) ;
1174: LD_EXP 45
1178: PPUSH
1179: CALL_OW 140
// end ; if Olaf then
1183: LD_EXP 51
1187: IFFALSE 1228
// begin SetSide ( Olaf , 5 ) ;
1189: LD_EXP 51
1193: PPUSH
1194: LD_INT 5
1196: PPUSH
1197: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1201: LD_EXP 51
1205: PPUSH
1206: LD_INT 16
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1216: LD_EXP 51
1220: PPUSH
1221: LD_INT 3
1223: PPUSH
1224: CALL 68615 0 2
// end ; if Kamil then
1228: LD_EXP 47
1232: IFFALSE 1258
// begin SetSide ( Kamil , 5 ) ;
1234: LD_EXP 47
1238: PPUSH
1239: LD_INT 5
1241: PPUSH
1242: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1246: LD_EXP 47
1250: PPUSH
1251: LD_INT 109
1253: PPUSH
1254: CALL_OW 52
// end ; if Kurt then
1258: LD_EXP 52
1262: IFFALSE 1288
// begin SetSide ( Kurt , 5 ) ;
1264: LD_EXP 52
1268: PPUSH
1269: LD_INT 5
1271: PPUSH
1272: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1276: LD_EXP 52
1280: PPUSH
1281: LD_INT 169
1283: PPUSH
1284: CALL_OW 52
// end ; if Kaia then
1288: LD_EXP 48
1292: IFFALSE 1318
// begin SetSide ( Kaia , 5 ) ;
1294: LD_EXP 48
1298: PPUSH
1299: LD_INT 5
1301: PPUSH
1302: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1306: LD_EXP 48
1310: PPUSH
1311: LD_INT 147
1313: PPUSH
1314: CALL_OW 52
// end ; if Sophia then
1318: LD_EXP 49
1322: IFFALSE 1363
// begin SetSide ( Sophia , 5 ) ;
1324: LD_EXP 49
1328: PPUSH
1329: LD_INT 5
1331: PPUSH
1332: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1336: LD_EXP 49
1340: PPUSH
1341: LD_INT 142
1343: PPUSH
1344: LD_INT 96
1346: PPUSH
1347: LD_INT 0
1349: PPUSH
1350: CALL_OW 48
// ComHold ( Sophia ) ;
1354: LD_EXP 49
1358: PPUSH
1359: CALL_OW 140
// end ; if Harris then
1363: LD_EXP 56
1367: IFFALSE 1405
// begin SetSide ( Harris , 4 ) ;
1369: LD_EXP 56
1373: PPUSH
1374: LD_INT 4
1376: PPUSH
1377: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1381: LD_EXP 56
1385: PPUSH
1386: LD_INT 20
1388: PPUSH
1389: LD_INT 0
1391: PPUSH
1392: CALL_OW 49
// ComHold ( i ) ;
1396: LD_VAR 0 2
1400: PPUSH
1401: CALL_OW 140
// end ; if Doug then
1405: LD_EXP 57
1409: IFFALSE 1435
// begin SetSide ( Doug , 4 ) ;
1411: LD_EXP 57
1415: PPUSH
1416: LD_INT 4
1418: PPUSH
1419: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1423: LD_EXP 57
1427: PPUSH
1428: LD_INT 106
1430: PPUSH
1431: CALL_OW 52
// end ; if Aviradze then
1435: LD_EXP 53
1439: IFFALSE 1465
// begin SetSide ( Aviradze , 5 ) ;
1441: LD_EXP 53
1445: PPUSH
1446: LD_INT 5
1448: PPUSH
1449: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1453: LD_EXP 53
1457: PPUSH
1458: LD_INT 119
1460: PPUSH
1461: CALL_OW 52
// end ; if Ibrahim then
1465: LD_EXP 46
1469: IFFALSE 1495
// begin SetSide ( Ibrahim , 5 ) ;
1471: LD_EXP 46
1475: PPUSH
1476: LD_INT 5
1478: PPUSH
1479: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1483: LD_EXP 46
1487: PPUSH
1488: LD_INT 119
1490: PPUSH
1491: CALL_OW 52
// end ; if Jerry then
1495: LD_EXP 58
1499: IFFALSE 1540
// begin SetSide ( Jerry , 4 ) ;
1501: LD_EXP 58
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1513: LD_EXP 58
1517: PPUSH
1518: LD_INT 119
1520: PPUSH
1521: LD_INT 59
1523: PPUSH
1524: LD_INT 0
1526: PPUSH
1527: CALL_OW 48
// ComHold ( Jerry ) ;
1531: LD_EXP 58
1535: PPUSH
1536: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1540: LD_EXP 62
1544: PPUSH
1545: LD_INT 119
1547: PPUSH
1548: CALL_OW 52
// for i in americanSquad do
1552: LD_ADDR_VAR 0 2
1556: PUSH
1557: LD_EXP 55
1561: PUSH
1562: FOR_IN
1563: IFFALSE 1591
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1565: LD_VAR 0 2
1569: PPUSH
1570: LD_INT 21
1572: PPUSH
1573: LD_INT 0
1575: PPUSH
1576: CALL_OW 49
// ComHold ( i ) ;
1580: LD_VAR 0 2
1584: PPUSH
1585: CALL_OW 140
// end ;
1589: GO 1562
1591: POP
1592: POP
// for i in heikeSecondSquad do
1593: LD_ADDR_VAR 0 2
1597: PUSH
1598: LD_EXP 54
1602: PUSH
1603: FOR_IN
1604: IFFALSE 1644
// begin SetSide ( i , 5 ) ;
1606: LD_VAR 0 2
1610: PPUSH
1611: LD_INT 5
1613: PPUSH
1614: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1618: LD_VAR 0 2
1622: PPUSH
1623: LD_INT 22
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 49
// ComHold ( i ) ;
1633: LD_VAR 0 2
1637: PPUSH
1638: CALL_OW 140
// end ;
1642: GO 1603
1644: POP
1645: POP
// if not hasVodka then
1646: LD_EXP 4
1650: NOT
1651: IFFALSE 1710
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1653: LD_ADDR_VAR 0 2
1657: PUSH
1658: LD_INT 2
1660: PUSH
1661: LD_INT 22
1663: PUSH
1664: LD_INT 2
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 22
1673: PUSH
1674: LD_INT 5
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 69
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1708
// SetLives ( i , 500 ) ;
1694: LD_VAR 0 2
1698: PPUSH
1699: LD_INT 500
1701: PPUSH
1702: CALL_OW 234
1706: GO 1691
1708: POP
1709: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1710: LD_ADDR_VAR 0 2
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 4
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PUSH
1730: FOR_IN
1731: IFFALSE 1747
// SetLives ( i , 500 ) ;
1733: LD_VAR 0 2
1737: PPUSH
1738: LD_INT 500
1740: PPUSH
1741: CALL_OW 234
1745: GO 1730
1747: POP
1748: POP
// end ;
1749: LD_VAR 0 1
1753: RET
// export function SetClassKaiaRevolver ; begin
1754: LD_INT 0
1756: PPUSH
// if IsOk ( Kaia ) then
1757: LD_EXP 48
1761: PPUSH
1762: CALL_OW 302
1766: IFFALSE 1780
// SetClass ( Kaia , class_revolver ) ;
1768: LD_EXP 48
1772: PPUSH
1773: LD_INT 34
1775: PPUSH
1776: CALL_OW 336
// end ;
1780: LD_VAR 0 1
1784: RET
// export function SpawnHeikeAsRussian ; begin
1785: LD_INT 0
1787: PPUSH
// RemoveUnit ( Heike ) ;
1788: LD_EXP 43
1792: PPUSH
1793: CALL_OW 64
// heikeTmp := Heike ;
1797: LD_ADDR_EXP 59
1801: PUSH
1802: LD_EXP 43
1806: ST_TO_ADDR
// uc_side := 2 ;
1807: LD_ADDR_OWVAR 20
1811: PUSH
1812: LD_INT 2
1814: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1815: LD_ADDR_EXP 43
1819: PUSH
1820: LD_STRING HeikeRu
1822: PPUSH
1823: CALL_OW 25
1827: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1828: LD_EXP 59
1832: PPUSH
1833: LD_EXP 43
1837: PPUSH
1838: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1842: LD_EXP 43
1846: PPUSH
1847: LD_INT 165
1849: PPUSH
1850: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1854: LD_EXP 43
1858: PPUSH
1859: LD_INT 1
1861: PPUSH
1862: CALL_OW 336
// heikeAsRussian := true ;
1866: LD_ADDR_EXP 27
1870: PUSH
1871: LD_INT 1
1873: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1874: LD_STRING M1-laundry-out
1876: PPUSH
1877: CALL_OW 604
// end ;
1881: LD_VAR 0 1
1885: RET
// export function SpawnGiviAsRussian ; begin
1886: LD_INT 0
1888: PPUSH
// RemoveUnit ( Givi ) ;
1889: LD_EXP 44
1893: PPUSH
1894: CALL_OW 64
// giviTmp := Givi ;
1898: LD_ADDR_EXP 60
1902: PUSH
1903: LD_EXP 44
1907: ST_TO_ADDR
// uc_side := 2 ;
1908: LD_ADDR_OWVAR 20
1912: PUSH
1913: LD_INT 2
1915: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1916: LD_ADDR_EXP 44
1920: PUSH
1921: LD_STRING GiviRu
1923: PPUSH
1924: CALL_OW 25
1928: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1929: LD_EXP 60
1933: PPUSH
1934: LD_EXP 44
1938: PPUSH
1939: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1943: LD_EXP 44
1947: PPUSH
1948: LD_INT 165
1950: PPUSH
1951: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1955: LD_EXP 44
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: CALL_OW 336
// giviAsRussian := true ;
1967: LD_ADDR_EXP 28
1971: PUSH
1972: LD_INT 1
1974: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1975: LD_STRING M1-laundry-out
1977: PPUSH
1978: CALL_OW 604
// end ; end_of_file
1982: LD_VAR 0 1
1986: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
1987: LD_INT 0
1989: PPUSH
1990: PPUSH
1991: PPUSH
1992: PPUSH
1993: PPUSH
// uc_side := 3 ;
1994: LD_ADDR_OWVAR 20
1998: PUSH
1999: LD_INT 3
2001: ST_TO_ADDR
// uc_nation := 3 ;
2002: LD_ADDR_OWVAR 21
2006: PUSH
2007: LD_INT 3
2009: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
2010: LD_INT 192
2012: PPUSH
2013: LD_STRING kitchen
2015: PPUSH
2016: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2020: LD_INT 165
2022: PPUSH
2023: LD_STRING laundry
2025: PPUSH
2026: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2030: LD_INT 54
2032: PPUSH
2033: LD_STRING adminSection
2035: PPUSH
2036: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2040: LD_ADDR_VAR 0 2
2044: PUSH
2045: LD_INT 21
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PPUSH
2055: CALL_OW 69
2059: PUSH
2060: FOR_IN
2061: IFFALSE 2077
// SetBLevel ( i , 7 ) ;
2063: LD_VAR 0 2
2067: PPUSH
2068: LD_INT 7
2070: PPUSH
2071: CALL_OW 241
2075: GO 2060
2077: POP
2078: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2079: LD_ADDR_VAR 0 2
2083: PUSH
2084: LD_INT 22
2086: PUSH
2087: LD_INT 3
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 2
2096: PUSH
2097: LD_INT 30
2099: PUSH
2100: LD_INT 0
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 1
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 69
2130: PUSH
2131: FOR_IN
2132: IFFALSE 2196
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2134: LD_VAR 0 2
2138: PPUSH
2139: CALL_OW 274
2143: PPUSH
2144: LD_INT 1
2146: PPUSH
2147: LD_INT 1000
2149: PPUSH
2150: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2154: LD_VAR 0 2
2158: PPUSH
2159: CALL_OW 274
2163: PPUSH
2164: LD_INT 2
2166: PPUSH
2167: LD_INT 1000
2169: PPUSH
2170: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2174: LD_VAR 0 2
2178: PPUSH
2179: CALL_OW 274
2183: PPUSH
2184: LD_INT 3
2186: PPUSH
2187: LD_INT 100
2189: PPUSH
2190: CALL_OW 277
// end ;
2194: GO 2131
2196: POP
2197: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2198: LD_ADDR_VAR 0 2
2202: PUSH
2203: LD_INT 22
2205: PUSH
2206: LD_INT 3
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 30
2215: PUSH
2216: LD_INT 32
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PPUSH
2227: CALL_OW 69
2231: PUSH
2232: FOR_IN
2233: IFFALSE 2267
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2235: LD_INT 0
2237: PPUSH
2238: LD_INT 5
2240: PUSH
2241: LD_OWVAR 67
2245: PLUS
2246: PPUSH
2247: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2251: CALL_OW 44
2255: PPUSH
2256: LD_VAR 0 2
2260: PPUSH
2261: CALL_OW 52
// end ;
2265: GO 2232
2267: POP
2268: POP
// for i := 1 to 2 do
2269: LD_ADDR_VAR 0 2
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_INT 2
2281: PUSH
2282: FOR_TO
2283: IFFALSE 2335
// begin PrepareMechanic ( false , 8 ) ;
2285: LD_INT 0
2287: PPUSH
2288: LD_INT 8
2290: PPUSH
2291: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2295: LD_ADDR_EXP 64
2299: PUSH
2300: LD_EXP 64
2304: PPUSH
2305: CALL_OW 44
2309: PPUSH
2310: CALL 65463 0 2
2314: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2315: LD_EXP 64
2319: PUSH
2320: LD_EXP 64
2324: ARRAY
2325: PPUSH
2326: LD_INT 61
2328: PPUSH
2329: CALL_OW 52
// end ;
2333: GO 2282
2335: POP
2336: POP
// PrepareMechanic ( sex_male , 8 ) ;
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 8
2342: PPUSH
2343: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2347: LD_ADDR_EXP 65
2351: PUSH
2352: LD_EXP 65
2356: PPUSH
2357: CALL_OW 44
2361: PPUSH
2362: CALL 65463 0 2
2366: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2367: LD_EXP 65
2371: PUSH
2372: LD_EXP 65
2376: ARRAY
2377: PPUSH
2378: LD_INT 196
2380: PPUSH
2381: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2385: LD_INT 1
2387: PPUSH
2388: LD_INT 8
2390: PPUSH
2391: CALL_OW 383
// hc_name := Stiepan Simonov ;
2395: LD_ADDR_OWVAR 26
2399: PUSH
2400: LD_STRING Stiepan Simonov
2402: ST_TO_ADDR
// Stiopa := CreateHuman ;
2403: LD_ADDR_EXP 66
2407: PUSH
2408: CALL_OW 44
2412: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2413: LD_INT 2
2415: PPUSH
2416: LD_INT 8
2418: PPUSH
2419: CALL_OW 383
// hc_name := Laura Dragunov ;
2423: LD_ADDR_OWVAR 26
2427: PUSH
2428: LD_STRING Laura Dragunov
2430: ST_TO_ADDR
// Laura := CreateHuman ;
2431: LD_ADDR_EXP 67
2435: PUSH
2436: CALL_OW 44
2440: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2441: LD_EXP 67
2445: PPUSH
2446: LD_INT 196
2448: PPUSH
2449: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2453: LD_INT 1
2455: PPUSH
2456: LD_INT 8
2458: PPUSH
2459: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2463: LD_ADDR_EXP 64
2467: PUSH
2468: LD_EXP 64
2472: PPUSH
2473: LD_INT 1
2475: PPUSH
2476: CALL_OW 44
2480: PPUSH
2481: CALL_OW 2
2485: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2486: LD_EXP 64
2490: PUSH
2491: LD_INT 1
2493: ARRAY
2494: PPUSH
2495: LD_INT 61
2497: PPUSH
2498: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2502: LD_INT 1
2504: PPUSH
2505: LD_INT 8
2507: PPUSH
2508: CALL_OW 381
// hc_name := Pavel Muchin ;
2512: LD_ADDR_OWVAR 26
2516: PUSH
2517: LD_STRING Pavel Muchin
2519: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2520: LD_ADDR_OWVAR 29
2524: PUSH
2525: LD_INT 13
2527: PUSH
2528: LD_INT 13
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2535: LD_ADDR_EXP 63
2539: PUSH
2540: CALL_OW 44
2544: ST_TO_ADDR
// InitHC_All ( ) ;
2545: CALL_OW 584
// if Difficulty > 1 then
2549: LD_OWVAR 67
2553: PUSH
2554: LD_INT 1
2556: GREATER
2557: IFFALSE 2677
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2559: LD_ADDR_VAR 0 2
2563: PUSH
2564: DOUBLE
2565: LD_INT 1
2567: DEC
2568: ST_TO_ADDR
2569: LD_INT 3
2571: PUSH
2572: LD_INT 4
2574: PUSH
2575: LD_INT 5
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: PUSH
2583: LD_OWVAR 67
2587: PUSH
2588: LD_INT 1
2590: PLUS
2591: ARRAY
2592: PUSH
2593: FOR_TO
2594: IFFALSE 2675
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2596: LD_INT 0
2598: PPUSH
2599: LD_INT 5
2601: PUSH
2602: LD_INT 6
2604: PUSH
2605: LD_INT 7
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: LD_OWVAR 67
2617: PUSH
2618: LD_INT 1
2620: PLUS
2621: ARRAY
2622: PPUSH
2623: CALL_OW 381
// un := CreateHuman ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2637: LD_VAR 0 4
2641: PPUSH
2642: LD_INT 62
2644: PUSH
2645: LD_INT 63
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_VAR 0 2
2656: PUSH
2657: LD_INT 2
2659: MOD
2660: PUSH
2661: LD_INT 1
2663: PLUS
2664: ARRAY
2665: PPUSH
2666: LD_INT 0
2668: PPUSH
2669: CALL_OW 49
// end ;
2673: GO 2593
2675: POP
2676: POP
// end ; uc_side := 6 ;
2677: LD_ADDR_OWVAR 20
2681: PUSH
2682: LD_INT 6
2684: ST_TO_ADDR
// uc_nation := 3 ;
2685: LD_ADDR_OWVAR 21
2689: PUSH
2690: LD_INT 3
2692: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2693: LD_ADDR_VAR 0 5
2697: PUSH
2698: LD_INT 14
2700: PUSH
2701: LD_INT 15
2703: PUSH
2704: LD_INT 48
2706: PUSH
2707: LD_INT 24
2709: PUSH
2710: LD_INT 149
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: ST_TO_ADDR
// for i in tmp do
2720: LD_ADDR_VAR 0 2
2724: PUSH
2725: LD_VAR 0 5
2729: PUSH
2730: FOR_IN
2731: IFFALSE 2779
// begin for j := 1 to 2 do
2733: LD_ADDR_VAR 0 3
2737: PUSH
2738: DOUBLE
2739: LD_INT 1
2741: DEC
2742: ST_TO_ADDR
2743: LD_INT 2
2745: PUSH
2746: FOR_TO
2747: IFFALSE 2775
// begin PrepareSoldier ( false , 7 ) ;
2749: LD_INT 0
2751: PPUSH
2752: LD_INT 7
2754: PPUSH
2755: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2759: CALL_OW 44
2763: PPUSH
2764: LD_VAR 0 2
2768: PPUSH
2769: CALL_OW 52
// end ;
2773: GO 2746
2775: POP
2776: POP
// end ;
2777: GO 2730
2779: POP
2780: POP
// end ;
2781: LD_VAR 0 1
2785: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2786: LD_INT 0
2788: PPUSH
2789: PPUSH
2790: PPUSH
2791: PPUSH
// uc_side := 3 ;
2792: LD_ADDR_OWVAR 20
2796: PUSH
2797: LD_INT 3
2799: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2800: LD_ADDR_OWVAR 21
2804: PUSH
2805: LD_INT 1
2807: PPUSH
2808: LD_INT 3
2810: PPUSH
2811: CALL_OW 12
2815: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2816: LD_ADDR_VAR 0 4
2820: PUSH
2821: LD_INT 5
2823: PPUSH
2824: LD_INT 0
2826: PPUSH
2827: CALL_OW 517
2831: ST_TO_ADDR
// for i := 1 to 3 do
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: DOUBLE
2838: LD_INT 1
2840: DEC
2841: ST_TO_ADDR
2842: LD_INT 3
2844: PUSH
2845: FOR_TO
2846: IFFALSE 2915
// begin PrepareHuman ( false , 33 , 0 ) ;
2848: LD_INT 0
2850: PPUSH
2851: LD_INT 33
2853: PPUSH
2854: LD_INT 0
2856: PPUSH
2857: CALL_OW 380
// un := CreateHuman ;
2861: LD_ADDR_VAR 0 3
2865: PUSH
2866: CALL_OW 44
2870: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2871: LD_VAR 0 3
2875: PPUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 1
2883: ARRAY
2884: PUSH
2885: LD_VAR 0 2
2889: ARRAY
2890: PPUSH
2891: LD_VAR 0 4
2895: PUSH
2896: LD_INT 2
2898: ARRAY
2899: PUSH
2900: LD_VAR 0 2
2904: ARRAY
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: CALL_OW 601
// end ;
2913: GO 2845
2915: POP
2916: POP
// end ;
2917: LD_VAR 0 1
2921: RET
// export function PrepareFirstScene ; var i , un ; begin
2922: LD_INT 0
2924: PPUSH
2925: PPUSH
2926: PPUSH
// uc_side := 4 ;
2927: LD_ADDR_OWVAR 20
2931: PUSH
2932: LD_INT 4
2934: ST_TO_ADDR
// uc_nation := 1 ;
2935: LD_ADDR_OWVAR 21
2939: PUSH
2940: LD_INT 1
2942: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2943: LD_INT 0
2945: PPUSH
2946: LD_INT 33
2948: PPUSH
2949: LD_INT 0
2951: PPUSH
2952: CALL_OW 380
// for i := 1 to 2 do
2956: LD_ADDR_VAR 0 2
2960: PUSH
2961: DOUBLE
2962: LD_INT 1
2964: DEC
2965: ST_TO_ADDR
2966: LD_INT 2
2968: PUSH
2969: FOR_TO
2970: IFFALSE 3035
// begin un := CreateHuman ;
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: CALL_OW 44
2981: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2982: LD_VAR 0 3
2986: PPUSH
2987: LD_INT 1
2989: PPUSH
2990: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
2994: LD_VAR 0 3
2998: PPUSH
2999: LD_INT 6
3001: PPUSH
3002: LD_INT 0
3004: PPUSH
3005: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3009: LD_VAR 0 3
3013: PPUSH
3014: LD_INT 1
3016: PPUSH
3017: CALL 68615 0 2
// SetLives ( un , 300 ) ;
3021: LD_VAR 0 3
3025: PPUSH
3026: LD_INT 300
3028: PPUSH
3029: CALL_OW 234
// end ;
3033: GO 2969
3035: POP
3036: POP
// uc_side := 3 ;
3037: LD_ADDR_OWVAR 20
3041: PUSH
3042: LD_INT 3
3044: ST_TO_ADDR
// uc_nation := 3 ;
3045: LD_ADDR_OWVAR 21
3049: PUSH
3050: LD_INT 3
3052: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 5
3058: PPUSH
3059: CALL_OW 381
// for i := 1 to 3 do
3063: LD_ADDR_VAR 0 2
3067: PUSH
3068: DOUBLE
3069: LD_INT 1
3071: DEC
3072: ST_TO_ADDR
3073: LD_INT 3
3075: PUSH
3076: FOR_TO
3077: IFFALSE 3150
// begin un := CreateHuman ;
3079: LD_ADDR_VAR 0 3
3083: PUSH
3084: CALL_OW 44
3088: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3089: LD_ADDR_EXP 61
3093: PUSH
3094: LD_EXP 61
3098: PPUSH
3099: LD_VAR 0 3
3103: PPUSH
3104: CALL 65463 0 2
3108: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3109: LD_VAR 0 3
3113: PPUSH
3114: LD_INT 4
3116: PPUSH
3117: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3121: LD_VAR 0 3
3125: PPUSH
3126: LD_INT 7
3128: PPUSH
3129: LD_INT 0
3131: PPUSH
3132: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3136: LD_VAR 0 3
3140: PPUSH
3141: LD_INT 4
3143: PPUSH
3144: CALL 68615 0 2
// end ;
3148: GO 3076
3150: POP
3151: POP
// ruCommisar := CreateHuman ;
3152: LD_ADDR_EXP 62
3156: PUSH
3157: CALL_OW 44
3161: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3162: LD_EXP 62
3166: PPUSH
3167: LD_INT 124
3169: PPUSH
3170: LD_INT 37
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3180: LD_EXP 62
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3192: LD_EXP 62
3196: PPUSH
3197: LD_INT 3
3199: PPUSH
3200: CALL 68615 0 2
// end ;
3204: LD_VAR 0 1
3208: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3209: LD_INT 0
3211: PPUSH
3212: PPUSH
3213: PPUSH
3214: PPUSH
// uc_side := 6 ;
3215: LD_ADDR_OWVAR 20
3219: PUSH
3220: LD_INT 6
3222: ST_TO_ADDR
// uc_nation := 3 ;
3223: LD_ADDR_OWVAR 21
3227: PUSH
3228: LD_INT 3
3230: ST_TO_ADDR
// ruPatrol := [ ] ;
3231: LD_ADDR_EXP 68
3235: PUSH
3236: EMPTY
3237: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3238: LD_ADDR_VAR 0 4
3242: PUSH
3243: LD_INT 26
3245: PUSH
3246: LD_INT 30
3248: PUSH
3249: LD_INT 39
3251: PUSH
3252: LD_INT 43
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: ST_TO_ADDR
// for i := 1 to spawn do
3261: LD_ADDR_VAR 0 2
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_VAR 0 4
3275: PUSH
3276: FOR_TO
3277: IFFALSE 3388
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3279: LD_INT 0
3281: PPUSH
3282: LD_INT 4
3284: PUSH
3285: LD_INT 5
3287: PUSH
3288: LD_INT 6
3290: PUSH
3291: LD_INT 7
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: PUSH
3300: LD_OWVAR 67
3304: ARRAY
3305: PPUSH
3306: CALL_OW 381
// un := CreateHuman ;
3310: LD_ADDR_VAR 0 3
3314: PUSH
3315: CALL_OW 44
3319: ST_TO_ADDR
// SetTag ( un , i ) ;
3320: LD_VAR 0 3
3324: PPUSH
3325: LD_VAR 0 2
3329: PPUSH
3330: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3334: LD_ADDR_EXP 68
3338: PUSH
3339: LD_EXP 68
3343: PPUSH
3344: LD_VAR 0 3
3348: PPUSH
3349: CALL 65463 0 2
3353: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3354: LD_VAR 0 3
3358: PPUSH
3359: LD_VAR 0 4
3363: PUSH
3364: LD_VAR 0 2
3368: ARRAY
3369: PPUSH
3370: LD_INT 0
3372: PPUSH
3373: CALL_OW 49
// ComHold ( un ) ;
3377: LD_VAR 0 3
3381: PPUSH
3382: CALL_OW 140
// end ;
3386: GO 3276
3388: POP
3389: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3390: LD_ADDR_VAR 0 4
3394: PUSH
3395: LD_INT 48
3397: PUSH
3398: LD_INT 49
3400: PUSH
3401: LD_INT 50
3403: PUSH
3404: LD_INT 51
3406: PUSH
3407: LD_INT 52
3409: PUSH
3410: LD_INT 53
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: ST_TO_ADDR
// for i := 1 to spawn do
3421: LD_ADDR_VAR 0 2
3425: PUSH
3426: DOUBLE
3427: LD_INT 1
3429: DEC
3430: ST_TO_ADDR
3431: LD_VAR 0 4
3435: PUSH
3436: FOR_TO
3437: IFFALSE 3546
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3439: LD_INT 0
3441: PPUSH
3442: LD_INT 4
3444: PUSH
3445: LD_INT 5
3447: PUSH
3448: LD_INT 6
3450: PUSH
3451: LD_INT 7
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: PUSH
3460: LD_OWVAR 67
3464: ARRAY
3465: PPUSH
3466: CALL_OW 381
// un := CreateHuman ;
3470: LD_ADDR_VAR 0 3
3474: PUSH
3475: CALL_OW 44
3479: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3480: LD_VAR 0 3
3484: PPUSH
3485: LD_INT 0
3487: PPUSH
3488: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3492: LD_ADDR_EXP 68
3496: PUSH
3497: LD_EXP 68
3501: PPUSH
3502: LD_VAR 0 3
3506: PPUSH
3507: CALL 65463 0 2
3511: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3512: LD_VAR 0 3
3516: PPUSH
3517: LD_VAR 0 4
3521: PUSH
3522: LD_VAR 0 2
3526: ARRAY
3527: PPUSH
3528: LD_INT 0
3530: PPUSH
3531: CALL_OW 49
// ComHold ( un ) ;
3535: LD_VAR 0 3
3539: PPUSH
3540: CALL_OW 140
// end ;
3544: GO 3436
3546: POP
3547: POP
// end ;
3548: LD_VAR 0 1
3552: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3553: LD_INT 0
3555: PPUSH
3556: PPUSH
3557: PPUSH
3558: PPUSH
// uc_side := 6 ;
3559: LD_ADDR_OWVAR 20
3563: PUSH
3564: LD_INT 6
3566: ST_TO_ADDR
// uc_nation := nation_russian ;
3567: LD_ADDR_OWVAR 21
3571: PUSH
3572: LD_INT 3
3574: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3575: LD_ADDR_VAR 0 4
3579: PUSH
3580: LD_INT 54
3582: PUSH
3583: LD_INT 55
3585: PUSH
3586: LD_INT 56
3588: PUSH
3589: LD_INT 57
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: ST_TO_ADDR
// for i := 1 to spawn do
3598: LD_ADDR_VAR 0 2
3602: PUSH
3603: DOUBLE
3604: LD_INT 1
3606: DEC
3607: ST_TO_ADDR
3608: LD_VAR 0 4
3612: PUSH
3613: FOR_TO
3614: IFFALSE 3723
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3616: LD_INT 0
3618: PPUSH
3619: LD_INT 4
3621: PUSH
3622: LD_INT 5
3624: PUSH
3625: LD_INT 6
3627: PUSH
3628: LD_INT 7
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: PUSH
3637: LD_OWVAR 67
3641: ARRAY
3642: PPUSH
3643: CALL_OW 381
// un := CreateHuman ;
3647: LD_ADDR_VAR 0 3
3651: PUSH
3652: CALL_OW 44
3656: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3657: LD_VAR 0 3
3661: PPUSH
3662: LD_INT 0
3664: PPUSH
3665: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3669: LD_ADDR_EXP 68
3673: PUSH
3674: LD_EXP 68
3678: PPUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: CALL 65463 0 2
3688: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3689: LD_VAR 0 3
3693: PPUSH
3694: LD_VAR 0 4
3698: PUSH
3699: LD_VAR 0 2
3703: ARRAY
3704: PPUSH
3705: LD_INT 0
3707: PPUSH
3708: CALL_OW 49
// ComHold ( un ) ;
3712: LD_VAR 0 3
3716: PPUSH
3717: CALL_OW 140
// end ;
3721: GO 3613
3723: POP
3724: POP
// end ; end_of_file
3725: LD_VAR 0 1
3729: RET
// export function Action ; var speaker , i , tmp ; begin
3730: LD_INT 0
3732: PPUSH
3733: PPUSH
3734: PPUSH
3735: PPUSH
// Video ( true ) ;
3736: LD_INT 1
3738: PPUSH
3739: CALL 65435 0 1
// hasNormalScene := Kaia or Givi ;
3743: LD_ADDR_EXP 5
3747: PUSH
3748: LD_EXP 48
3752: PUSH
3753: LD_EXP 44
3757: OR
3758: ST_TO_ADDR
// if hasNormalScene then
3759: LD_EXP 5
3763: IFFALSE 4004
// begin for i in americanSquad do
3765: LD_ADDR_VAR 0 3
3769: PUSH
3770: LD_EXP 55
3774: PUSH
3775: FOR_IN
3776: IFFALSE 3822
// begin SetClass ( i , class_prison ) ;
3778: LD_VAR 0 3
3782: PPUSH
3783: LD_INT 33
3785: PPUSH
3786: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3790: LD_VAR 0 3
3794: PPUSH
3795: LD_INT 78
3797: PPUSH
3798: LD_INT 16
3800: PPUSH
3801: LD_INT 5
3803: PPUSH
3804: LD_INT 0
3806: PPUSH
3807: CALL_OW 50
// ComHold ( i ) ;
3811: LD_VAR 0 3
3815: PPUSH
3816: CALL_OW 140
// end ;
3820: GO 3775
3822: POP
3823: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3824: LD_ADDR_VAR 0 4
3828: PUSH
3829: LD_EXP 45
3833: PUSH
3834: LD_EXP 46
3838: PUSH
3839: LD_EXP 47
3843: PUSH
3844: LD_EXP 48
3848: PUSH
3849: LD_EXP 49
3853: PUSH
3854: LD_EXP 50
3858: PUSH
3859: LD_EXP 51
3863: PUSH
3864: LD_EXP 52
3868: PUSH
3869: LD_EXP 44
3873: PUSH
3874: LD_EXP 53
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: PUSH
3891: LD_EXP 54
3895: UNION
3896: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3897: LD_EXP 43
3901: PPUSH
3902: LD_INT 33
3904: PPUSH
3905: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3909: LD_EXP 43
3913: PPUSH
3914: LD_INT 117
3916: PPUSH
3917: LD_INT 24
3919: PPUSH
3920: LD_INT 3
3922: PPUSH
3923: LD_INT 0
3925: PPUSH
3926: CALL 67603 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3930: LD_EXP 43
3934: PPUSH
3935: LD_INT 123
3937: PPUSH
3938: LD_INT 39
3940: PPUSH
3941: CALL_OW 118
// for i in tmp do
3945: LD_ADDR_VAR 0 3
3949: PUSH
3950: LD_VAR 0 4
3954: PUSH
3955: FOR_IN
3956: IFFALSE 4002
// begin SetClass ( i , class_prison ) ;
3958: LD_VAR 0 3
3962: PPUSH
3963: LD_INT 33
3965: PPUSH
3966: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
3970: LD_VAR 0 3
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
3985: LD_VAR 0 3
3989: PPUSH
3990: LD_INT 113
3992: PPUSH
3993: LD_INT 16
3995: PPUSH
3996: CALL_OW 118
// end ;
4000: GO 3955
4002: POP
4003: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4004: LD_INT 124
4006: PPUSH
4007: LD_INT 39
4009: PPUSH
4010: CALL_OW 86
// PrepareDeadBodies ;
4014: CALL 2786 0 0
// PrepareFirstScene ;
4018: CALL 2922 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4022: LD_INT 152
4024: PPUSH
4025: LD_INT 65
4027: PPUSH
4028: LD_INT 2
4030: PPUSH
4031: LD_INT 70
4033: NEG
4034: PPUSH
4035: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4039: LD_INT 152
4041: PPUSH
4042: LD_INT 65
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4052: LD_INT 122
4054: PPUSH
4055: LD_INT 40
4057: PPUSH
4058: LD_INT 2
4060: PPUSH
4061: LD_INT 8
4063: NEG
4064: PPUSH
4065: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4069: LD_INT 124
4071: PPUSH
4072: LD_INT 37
4074: PPUSH
4075: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4079: LD_EXP 62
4083: PPUSH
4084: LD_STRING DRum-Execution-1
4086: PPUSH
4087: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4091: LD_EXP 62
4095: PPUSH
4096: LD_STRING DRum-Execution-2
4098: PPUSH
4099: CALL_OW 88
// wait ( 0 0$01 ) ;
4103: LD_INT 35
4105: PPUSH
4106: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4110: LD_EXP 62
4114: PPUSH
4115: LD_STRING DRum-Execution-3
4117: PPUSH
4118: CALL_OW 88
// wait ( 0 0$1 ) ;
4122: LD_INT 35
4124: PPUSH
4125: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4129: LD_EXP 62
4133: PPUSH
4134: LD_STRING DRum-Execution-4
4136: PPUSH
4137: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4141: LD_EXP 61
4145: PUSH
4146: LD_INT 1
4148: ARRAY
4149: PPUSH
4150: LD_INT 122
4152: PPUSH
4153: LD_INT 39
4155: PPUSH
4156: CALL_OW 428
4160: PPUSH
4161: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4165: LD_EXP 61
4169: PUSH
4170: LD_INT 2
4172: ARRAY
4173: PPUSH
4174: LD_INT 123
4176: PPUSH
4177: LD_INT 41
4179: PPUSH
4180: CALL_OW 428
4184: PPUSH
4185: CALL_OW 115
// AddComHold ( russianKillers ) ;
4189: LD_EXP 61
4193: PPUSH
4194: CALL_OW 200
// wait ( 0 0$1 ) ;
4198: LD_INT 35
4200: PPUSH
4201: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4205: LD_INT 122
4207: PPUSH
4208: LD_INT 40
4210: PPUSH
4211: LD_INT 2
4213: PPUSH
4214: CALL_OW 331
// for i in russianKillers union ruCommisar do
4218: LD_ADDR_VAR 0 3
4222: PUSH
4223: LD_EXP 61
4227: PUSH
4228: LD_EXP 62
4232: UNION
4233: PUSH
4234: FOR_IN
4235: IFFALSE 4248
// RemoveUnit ( i ) ;
4237: LD_VAR 0 3
4241: PPUSH
4242: CALL_OW 64
4246: GO 4234
4248: POP
4249: POP
// if hasNormalScene then
4250: LD_EXP 5
4254: IFFALSE 4262
// ActionNormal else
4256: CALL 4271 0 0
4260: GO 4266
// ActionAdditional ;
4262: CALL 6089 0 0
// end ;
4266: LD_VAR 0 1
4270: RET
// function ActionNormal ; var i , tmp ; begin
4271: LD_INT 0
4273: PPUSH
4274: PPUSH
4275: PPUSH
// CenterNowOnUnits ( Heike ) ;
4276: LD_EXP 43
4280: PPUSH
4281: CALL_OW 87
// wait ( 0 0$1 ) ;
4285: LD_INT 35
4287: PPUSH
4288: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4292: LD_EXP 43
4296: PPUSH
4297: LD_INT 115
4299: PPUSH
4300: LD_INT 19
4302: PPUSH
4303: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4307: LD_EXP 43
4311: PPUSH
4312: LD_INT 113
4314: PPUSH
4315: LD_INT 16
4317: PPUSH
4318: CALL_OW 178
// wait ( 0 0$2 ) ;
4322: LD_INT 70
4324: PPUSH
4325: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4329: LD_EXP 43
4333: PPUSH
4334: LD_STRING DH-Conspiracy-1
4336: PPUSH
4337: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4341: LD_EXP 48
4345: PPUSH
4346: LD_STRING DK-Conspiracy-2
4348: PPUSH
4349: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4353: LD_EXP 44
4357: PPUSH
4358: LD_STRING DG-Conspiracy-3
4360: PPUSH
4361: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4365: LD_EXP 44
4369: PPUSH
4370: LD_STRING DG-Conspiracy-4
4372: PPUSH
4373: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4377: LD_EXP 43
4381: PPUSH
4382: LD_STRING DH-Conspiracy-5
4384: PPUSH
4385: CALL_OW 88
// if IsOk ( Kamil ) then
4389: LD_EXP 47
4393: PPUSH
4394: CALL_OW 302
4398: IFFALSE 4456
// begin hasVodka := true ;
4400: LD_ADDR_EXP 4
4404: PUSH
4405: LD_INT 1
4407: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4408: LD_EXP 47
4412: PPUSH
4413: LD_STRING DKam-Conspiracy-6
4415: PPUSH
4416: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4420: LD_EXP 47
4424: PPUSH
4425: LD_STRING DKam-Conspiracy-7
4427: PPUSH
4428: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4432: LD_EXP 47
4436: PPUSH
4437: LD_STRING DKam-Conspiracy-8
4439: PPUSH
4440: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4444: LD_EXP 47
4448: PPUSH
4449: LD_STRING DKam-Conspiracy-9
4451: PPUSH
4452: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4456: LD_EXP 49
4460: PPUSH
4461: CALL_OW 302
4465: IFFALSE 4646
// begin americanContact := true ;
4467: LD_ADDR_EXP 10
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4475: LD_STRING M1-american
4477: PPUSH
4478: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4482: LD_EXP 49
4486: PPUSH
4487: LD_STRING DS-Conspiracy-10
4489: PPUSH
4490: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4494: LD_EXP 50
4498: PPUSH
4499: LD_STRING DM-Conspiracy-11
4501: PPUSH
4502: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4506: LD_EXP 49
4510: PPUSH
4511: LD_STRING DS-Conspiracy-12
4513: PPUSH
4514: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4518: LD_INT 84
4520: PPUSH
4521: LD_INT 19
4523: PPUSH
4524: LD_INT 105
4526: PPUSH
4527: CALL 19299 0 3
// if johnnySaved then
4531: LD_EXP 3
4535: IFFALSE 4575
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4537: LD_EXP 49
4541: PPUSH
4542: LD_STRING DS-Conspiracy-13
4544: PPUSH
4545: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4549: LD_EXP 43
4553: PPUSH
4554: LD_STRING DH-Conspiracy-14
4556: PPUSH
4557: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4561: LD_EXP 49
4565: PPUSH
4566: LD_STRING DH-Conspiracy-15
4568: PPUSH
4569: CALL_OW 88
// end else
4573: GO 4611
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4575: LD_EXP 49
4579: PPUSH
4580: LD_STRING DS-Conspiracy-a-13
4582: PPUSH
4583: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4587: LD_EXP 43
4591: PPUSH
4592: LD_STRING DH-Conspiracy-a-14
4594: PPUSH
4595: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
4599: LD_EXP 49
4603: PPUSH
4604: LD_STRING DH-Conspiracy-a-15
4606: PPUSH
4607: CALL_OW 88
// end ; if IsOk ( Givi ) then
4611: LD_EXP 44
4615: PPUSH
4616: CALL_OW 302
4620: IFFALSE 4646
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4622: LD_EXP 44
4626: PPUSH
4627: LD_STRING DG-Conspiracy-a-16
4629: PPUSH
4630: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4634: LD_EXP 43
4638: PPUSH
4639: LD_STRING DH-Conspiracy-a-17
4641: PPUSH
4642: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4646: LD_EXP 43
4650: PPUSH
4651: LD_STRING DH-Conspiracy-16
4653: PPUSH
4654: CALL_OW 88
// if IsOk ( Givi ) then
4658: LD_EXP 44
4662: PPUSH
4663: CALL_OW 302
4667: IFFALSE 4939
// begin hasStimDrugs := true ;
4669: LD_ADDR_EXP 9
4673: PUSH
4674: LD_INT 1
4676: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4677: LD_STRING M1-drugs
4679: PPUSH
4680: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4684: LD_EXP 44
4688: PPUSH
4689: LD_STRING DG-Conspiracy-17
4691: PPUSH
4692: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4696: LD_INT 162
4698: PPUSH
4699: LD_INT 2
4701: PPUSH
4702: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4706: LD_INT 194
4708: PPUSH
4709: LD_INT 98
4711: PPUSH
4712: LD_INT 105
4714: PPUSH
4715: CALL 19299 0 3
// SetSide ( drugsLab , 3 ) ;
4719: LD_INT 162
4721: PPUSH
4722: LD_INT 3
4724: PPUSH
4725: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4729: LD_EXP 44
4733: PPUSH
4734: LD_STRING DG-Conspiracy-18
4736: PPUSH
4737: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4741: LD_EXP 44
4745: PPUSH
4746: LD_STRING DG-Conspiracy-19
4748: PPUSH
4749: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4753: LD_EXP 44
4757: PPUSH
4758: LD_STRING DG-Conspiracy-20
4760: PPUSH
4761: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4765: LD_EXP 43
4769: PPUSH
4770: LD_STRING DH-Conspiracy-21
4772: PPUSH
4773: CALL_OW 88
// if IsOk ( Kaia ) then
4777: LD_EXP 48
4781: PPUSH
4782: CALL_OW 302
4786: IFFALSE 4860
// begin hasExplosions := true ;
4788: LD_ADDR_EXP 6
4792: PUSH
4793: LD_INT 1
4795: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4796: LD_STRING M1-explosive
4798: PPUSH
4799: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4803: LD_EXP 48
4807: PPUSH
4808: LD_STRING DK-Conspiracy-22
4810: PPUSH
4811: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4815: LD_INT 73
4817: PPUSH
4818: LD_INT 2
4820: PPUSH
4821: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4825: LD_INT 170
4827: PPUSH
4828: LD_INT 104
4830: PPUSH
4831: LD_INT 105
4833: PPUSH
4834: CALL 19299 0 3
// SetSide ( barExplosion , 3 ) ;
4838: LD_INT 73
4840: PPUSH
4841: LD_INT 3
4843: PPUSH
4844: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4848: LD_EXP 48
4852: PPUSH
4853: LD_STRING DK-Conspiracy-23
4855: PPUSH
4856: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4860: LD_EXP 51
4864: PPUSH
4865: CALL_OW 302
4869: IFFALSE 4939
// begin hasExplosionsInFactory := true ;
4871: LD_ADDR_EXP 7
4875: PUSH
4876: LD_INT 1
4878: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4879: LD_EXP 51
4883: PPUSH
4884: LD_STRING DO-Conspiracy-24
4886: PPUSH
4887: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4891: LD_INT 175
4893: PPUSH
4894: LD_INT 54
4896: PPUSH
4897: LD_INT 70
4899: PPUSH
4900: CALL 19299 0 3
// if IsOk ( Markov ) then
4904: LD_EXP 50
4908: PPUSH
4909: CALL_OW 302
4913: IFFALSE 4939
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4915: LD_EXP 50
4919: PPUSH
4920: LD_STRING DMar-Conspiracy-25
4922: PPUSH
4923: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4927: LD_EXP 50
4931: PPUSH
4932: LD_STRING DMar-Conspiracy-26
4934: PPUSH
4935: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4939: LD_EXP 52
4943: PPUSH
4944: CALL_OW 302
4948: PUSH
4949: LD_EXP 48
4953: PPUSH
4954: CALL_OW 302
4958: AND
4959: IFFALSE 5419
// begin hasWeapons := true ;
4961: LD_ADDR_EXP 19
4965: PUSH
4966: LD_INT 1
4968: ST_TO_ADDR
// hasRevolver := true ;
4969: LD_ADDR_EXP 8
4973: PUSH
4974: LD_INT 1
4976: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
4977: LD_STRING M1-weapons
4979: PPUSH
4980: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
4984: LD_EXP 52
4988: PPUSH
4989: LD_STRING DKs-Conspiracy-27
4991: PPUSH
4992: CALL_OW 88
// if IsOk ( Givi ) then
4996: LD_EXP 44
5000: PPUSH
5001: CALL_OW 302
5005: IFFALSE 5021
// Say ( Givi , DG-Conspiracy-28 ) else
5007: LD_EXP 44
5011: PPUSH
5012: LD_STRING DG-Conspiracy-28
5014: PPUSH
5015: CALL_OW 88
5019: GO 5086
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5021: LD_EXP 54
5025: PPUSH
5026: LD_INT 26
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PPUSH
5036: CALL_OW 72
5040: PUSH
5041: LD_INT 1
5043: ARRAY
5044: PPUSH
5045: LD_STRING DArm-Conspiracy-a-28
5047: PPUSH
5048: CALL_OW 88
5052: NOT
5053: IFFALSE 5086
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5055: LD_EXP 54
5059: PPUSH
5060: LD_INT 26
5062: PUSH
5063: LD_INT 2
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PPUSH
5070: CALL_OW 72
5074: PUSH
5075: LD_INT 1
5077: ARRAY
5078: PPUSH
5079: LD_STRING DArf-Conspiracy-a-28
5081: PPUSH
5082: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5086: LD_EXP 52
5090: PPUSH
5091: LD_STRING DKs-Conspiracy-29
5093: PPUSH
5094: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5098: LD_INT 192
5100: PPUSH
5101: LD_INT 122
5103: PPUSH
5104: LD_INT 105
5106: PPUSH
5107: CALL 19299 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5111: LD_EXP 52
5115: PPUSH
5116: LD_STRING DKs-Conspiracy-30
5118: PPUSH
5119: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5123: LD_EXP 48
5127: PPUSH
5128: LD_STRING DK-Conspiracy-31
5130: PPUSH
5131: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5135: LD_EXP 50
5139: PPUSH
5140: LD_STRING DMar-Conspiracy-33
5142: PPUSH
5143: CALL_OW 88
5147: NOT
5148: PUSH
5149: LD_EXP 54
5153: AND
5154: IFFALSE 5221
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5156: LD_EXP 54
5160: PPUSH
5161: LD_INT 26
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PPUSH
5171: CALL_OW 72
5175: PUSH
5176: LD_INT 1
5178: ARRAY
5179: PPUSH
5180: LD_STRING DArm-Conspiracy-a-34
5182: PPUSH
5183: CALL_OW 88
5187: NOT
5188: IFFALSE 5221
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5190: LD_EXP 54
5194: PPUSH
5195: LD_INT 26
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PPUSH
5205: CALL_OW 72
5209: PUSH
5210: LD_INT 1
5212: ARRAY
5213: PPUSH
5214: LD_STRING DArf-Conspiracy-a-34
5216: PPUSH
5217: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5221: LD_EXP 48
5225: PPUSH
5226: LD_STRING DK-Conspiracy-34
5228: PPUSH
5229: CALL_OW 88
// if IsOk ( Markov ) then
5233: LD_EXP 50
5237: PPUSH
5238: CALL_OW 302
5242: IFFALSE 5327
// begin hasSniperRifle := true ;
5244: LD_ADDR_EXP 11
5248: PUSH
5249: LD_INT 1
5251: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5252: LD_EXP 50
5256: PPUSH
5257: LD_STRING DMar-Conspiracy-35
5259: PPUSH
5260: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5264: LD_EXP 48
5268: PPUSH
5269: LD_STRING DK-Conspiracy-36
5271: PPUSH
5272: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5276: LD_EXP 50
5280: PPUSH
5281: LD_STRING DMar-Conspiracy-37
5283: PPUSH
5284: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5288: LD_EXP 50
5292: PPUSH
5293: LD_STRING DMar-Conspiracy-38
5295: PPUSH
5296: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5300: LD_INT 137
5302: PPUSH
5303: LD_INT 98
5305: PPUSH
5306: LD_INT 105
5308: PPUSH
5309: CALL 19299 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5313: LD_EXP 50
5317: PPUSH
5318: LD_STRING DMar-Conspiracy-39
5320: PPUSH
5321: CALL_OW 88
// end else
5325: GO 5419
// if heikeSecondSquad then
5327: LD_EXP 54
5331: IFFALSE 5419
// begin hasSniperRifle := true ;
5333: LD_ADDR_EXP 11
5337: PUSH
5338: LD_INT 1
5340: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5341: LD_INT 137
5343: PPUSH
5344: LD_INT 98
5346: PPUSH
5347: LD_INT 105
5349: PPUSH
5350: CALL 19299 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5354: LD_EXP 54
5358: PPUSH
5359: LD_INT 26
5361: PUSH
5362: LD_INT 1
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PPUSH
5369: CALL_OW 72
5373: PUSH
5374: LD_INT 1
5376: ARRAY
5377: PPUSH
5378: LD_STRING DArm-Conspiracy-a-35
5380: PPUSH
5381: CALL_OW 88
5385: NOT
5386: IFFALSE 5419
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5388: LD_EXP 54
5392: PPUSH
5393: LD_INT 26
5395: PUSH
5396: LD_INT 2
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: PPUSH
5403: CALL_OW 72
5407: PUSH
5408: LD_INT 1
5410: ARRAY
5411: PPUSH
5412: LD_STRING DArf-Conspiracy-a-35
5414: PPUSH
5415: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5419: LD_EXP 43
5423: PPUSH
5424: LD_STRING DH-Conspiracy-40
5426: PPUSH
5427: CALL_OW 88
// if IsOk ( Mike ) then
5431: LD_EXP 45
5435: PPUSH
5436: CALL_OW 302
5440: IFFALSE 5499
// begin hasScout := true ;
5442: LD_ADDR_EXP 12
5446: PUSH
5447: LD_INT 1
5449: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5450: LD_EXP 45
5454: PPUSH
5455: LD_STRING DM-Conspiracy-41
5457: PPUSH
5458: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5462: LD_EXP 45
5466: PPUSH
5467: LD_STRING DM-Conspiracy-42
5469: PPUSH
5470: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5474: LD_INT 73
5476: PPUSH
5477: LD_INT 102
5479: PPUSH
5480: LD_INT 105
5482: PPUSH
5483: CALL 19299 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5487: LD_EXP 45
5491: PPUSH
5492: LD_STRING DM-Conspiracy-43
5494: PPUSH
5495: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5499: LD_EXP 4
5503: PUSH
5504: LD_EXP 48
5508: PPUSH
5509: CALL_OW 302
5513: AND
5514: PUSH
5515: LD_EXP 52
5519: PPUSH
5520: CALL_OW 302
5524: AND
5525: IFFALSE 5571
// begin hasMethanol := true ;
5527: LD_ADDR_EXP 13
5531: PUSH
5532: LD_INT 1
5534: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5535: LD_EXP 48
5539: PPUSH
5540: LD_STRING DK-Conspiracy-44
5542: PPUSH
5543: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5547: LD_EXP 48
5551: PPUSH
5552: LD_STRING DK-Conspiracy-45
5554: PPUSH
5555: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5559: LD_EXP 47
5563: PPUSH
5564: LD_STRING DKam-Conspiracy-46
5566: PPUSH
5567: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5571: LD_EXP 43
5575: PPUSH
5576: LD_STRING DH-Conspiracy-47
5578: PPUSH
5579: CALL_OW 88
// wait ( 0 0$1 ) ;
5583: LD_INT 35
5585: PPUSH
5586: CALL_OW 67
// your_side := 8 ;
5590: LD_ADDR_OWVAR 2
5594: PUSH
5595: LD_INT 8
5597: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5598: LD_INT 1
5600: PPUSH
5601: LD_INT 1
5603: PPUSH
5604: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5608: LD_ADDR_VAR 0 2
5612: PUSH
5613: LD_INT 2
5615: PUSH
5616: LD_INT 22
5618: PUSH
5619: LD_INT 2
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PUSH
5626: LD_INT 22
5628: PUSH
5629: LD_INT 4
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 21
5643: PUSH
5644: LD_INT 1
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 69
5659: PUSH
5660: FOR_IN
5661: IFFALSE 5674
// RemoveUnit ( i ) ;
5663: LD_VAR 0 2
5667: PPUSH
5668: CALL_OW 64
5672: GO 5660
5674: POP
5675: POP
// wait ( 0 0$0.3 ) ;
5676: LD_INT 10
5678: PPUSH
5679: CALL_OW 67
// Query ( StartInfo1 ) ;
5683: LD_STRING StartInfo1
5685: PPUSH
5686: CALL_OW 97
// wait ( 0 0$1 ) ;
5690: LD_INT 35
5692: PPUSH
5693: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5697: LD_STRING colors_night.txt
5699: PPUSH
5700: CALL_OW 544
// Query ( StartInfo2 ) ;
5704: LD_STRING StartInfo2
5706: PPUSH
5707: CALL_OW 97
// PrepareGame ;
5711: CALL 1041 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5715: LD_INT 152
5717: PPUSH
5718: LD_INT 65
5720: PPUSH
5721: LD_INT 2
5723: PPUSH
5724: LD_INT 70
5726: NEG
5727: PPUSH
5728: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5732: LD_INT 152
5734: PPUSH
5735: LD_INT 65
5737: PPUSH
5738: LD_INT 2
5740: PPUSH
5741: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5745: LD_INT 133
5747: PPUSH
5748: LD_INT 76
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_INT 6
5756: NEG
5757: PPUSH
5758: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5762: LD_INT 152
5764: PPUSH
5765: LD_INT 65
5767: PPUSH
5768: LD_INT 8
5770: PPUSH
5771: LD_INT 70
5773: NEG
5774: PPUSH
5775: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5779: LD_INT 152
5781: PPUSH
5782: LD_INT 65
5784: PPUSH
5785: LD_INT 8
5787: PPUSH
5788: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5792: LD_INT 133
5794: PPUSH
5795: LD_INT 76
5797: PPUSH
5798: LD_INT 8
5800: PPUSH
5801: LD_INT 6
5803: NEG
5804: PPUSH
5805: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5809: LD_INT 23
5811: PPUSH
5812: CALL_OW 87
// dialogue_skipped := false ;
5816: LD_ADDR_OWVAR 59
5820: PUSH
5821: LD_INT 0
5823: ST_TO_ADDR
// InitRuPatrols ;
5824: CALL 3209 0 0
// Say ( Heike , DH-Escape-1 ) ;
5828: LD_EXP 43
5832: PPUSH
5833: LD_STRING DH-Escape-1
5835: PPUSH
5836: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5840: LD_EXP 43
5844: PPUSH
5845: LD_STRING DH-Escape-2
5847: PPUSH
5848: CALL_OW 88
// StartLockerMinigame ;
5852: CALL 20084 0 0
// wait ( 0 0$1 ) ;
5856: LD_INT 35
5858: PPUSH
5859: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5863: LD_EXP 43
5867: PPUSH
5868: LD_STRING DH-Escape-4
5870: PPUSH
5871: CALL_OW 88
// wait ( 0 0$3 ) ;
5875: LD_INT 105
5877: PPUSH
5878: CALL_OW 67
// your_side := 2 ;
5882: LD_ADDR_OWVAR 2
5886: PUSH
5887: LD_INT 2
5889: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5890: LD_EXP 43
5894: PPUSH
5895: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5899: LD_INT 152
5901: PPUSH
5902: LD_INT 65
5904: PPUSH
5905: LD_INT 2
5907: PPUSH
5908: LD_INT 70
5910: NEG
5911: PPUSH
5912: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5916: LD_INT 152
5918: PPUSH
5919: LD_INT 65
5921: PPUSH
5922: LD_INT 2
5924: PPUSH
5925: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5929: LD_INT 133
5931: PPUSH
5932: LD_INT 76
5934: PPUSH
5935: LD_INT 8
5937: PPUSH
5938: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5942: LD_EXP 43
5946: PPUSH
5947: LD_INT 128
5949: PPUSH
5950: LD_INT 64
5952: PPUSH
5953: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5957: LD_INT 35
5959: PPUSH
5960: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5964: LD_EXP 43
5968: PPUSH
5969: LD_INT 128
5971: PPUSH
5972: LD_INT 64
5974: PPUSH
5975: CALL_OW 307
5979: IFFALSE 5957
// ComHold ( Heike ) ;
5981: LD_EXP 43
5985: PPUSH
5986: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
5990: LD_EXP 43
5994: PPUSH
5995: LD_STRING DH-Start-1
5997: PPUSH
5998: CALL_OW 88
// if not americanContact then
6002: LD_EXP 10
6006: NOT
6007: IFFALSE 6023
// Say ( Heike , DH-Start-c-2 ) else
6009: LD_EXP 43
6013: PPUSH
6014: LD_STRING DH-Start-c-2
6016: PPUSH
6017: CALL_OW 88
6021: GO 6055
// if johnnySaved then
6023: LD_EXP 3
6027: IFFALSE 6043
// Say ( Heike , DH-Start-a-2 ) else
6029: LD_EXP 43
6033: PPUSH
6034: LD_STRING DH-Start-a-2
6036: PPUSH
6037: CALL_OW 88
6041: GO 6055
// Say ( Heike , DH-Start-b-2 ) ;
6043: LD_EXP 43
6047: PPUSH
6048: LD_STRING DH-Start-b-2
6050: PPUSH
6051: CALL_OW 88
// Video ( false ) ;
6055: LD_INT 0
6057: PPUSH
6058: CALL 65435 0 1
// tick := 0 ;
6062: LD_ADDR_OWVAR 1
6066: PUSH
6067: LD_INT 0
6069: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6070: LD_STRING M1
6072: PPUSH
6073: CALL_OW 337
// enable ( gameStartEvent ) ;
6077: LD_INT 2
6079: ENABLE_MARKED
// SaveForQuickRestart ;
6080: CALL_OW 22
// end ;
6084: LD_VAR 0 1
6088: RET
// function ActionAdditional ; var i , un , tmp ; begin
6089: LD_INT 0
6091: PPUSH
6092: PPUSH
6093: PPUSH
6094: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6095: LD_INT 115
6097: PPUSH
6098: LD_INT 27
6100: PPUSH
6101: LD_INT 2
6103: PPUSH
6104: LD_INT 6
6106: NEG
6107: PPUSH
6108: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6112: LD_EXP 43
6116: PPUSH
6117: LD_INT 115
6119: PPUSH
6120: LD_INT 27
6122: PPUSH
6123: CALL_OW 428
6127: PPUSH
6128: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6132: LD_EXP 43
6136: PPUSH
6137: LD_INT 33
6139: PPUSH
6140: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6144: LD_INT 124
6146: PPUSH
6147: LD_INT 39
6149: PPUSH
6150: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6154: LD_EXP 43
6158: PPUSH
6159: LD_STRING DH-Fail-1
6161: PPUSH
6162: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6166: LD_INT 3
6168: PPUSH
6169: CALL_OW 427
// ComExit ( Heike ) ;
6173: LD_EXP 43
6177: PPUSH
6178: CALL 65861 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6182: LD_EXP 43
6186: PPUSH
6187: LD_INT 109
6189: PPUSH
6190: LD_INT 33
6192: PPUSH
6193: CALL_OW 171
// AddComHold ( Heike ) ;
6197: LD_EXP 43
6201: PPUSH
6202: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6206: LD_INT 115
6208: PPUSH
6209: LD_INT 27
6211: PPUSH
6212: LD_INT 2
6214: PPUSH
6215: CALL_OW 331
// wait ( 0 0$2 ) ;
6219: LD_INT 70
6221: PPUSH
6222: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6226: LD_INT 35
6228: PPUSH
6229: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6233: LD_EXP 43
6237: PPUSH
6238: LD_INT 109
6240: PPUSH
6241: LD_INT 33
6243: PPUSH
6244: CALL_OW 307
6248: IFFALSE 6226
// Say ( Heike , DH-Fail-2 ) ;
6250: LD_EXP 43
6254: PPUSH
6255: LD_STRING DH-Fail-2
6257: PPUSH
6258: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6262: LD_EXP 43
6266: PPUSH
6267: LD_INT 111
6269: PPUSH
6270: LD_INT 48
6272: PPUSH
6273: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6277: LD_INT 35
6279: PPUSH
6280: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6284: LD_EXP 43
6288: PPUSH
6289: LD_INT 111
6291: PPUSH
6292: LD_INT 48
6294: PPUSH
6295: CALL_OW 297
6299: PUSH
6300: LD_INT 4
6302: LESS
6303: IFFALSE 6277
// AddComMoveXY ( Heike , 106 , 72 ) ;
6305: LD_EXP 43
6309: PPUSH
6310: LD_INT 106
6312: PPUSH
6313: LD_INT 72
6315: PPUSH
6316: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6320: LD_EXP 43
6324: PPUSH
6325: LD_INT 103
6327: PPUSH
6328: LD_INT 80
6330: PPUSH
6331: CALL_OW 171
// uc_side := 3 ;
6335: LD_ADDR_OWVAR 20
6339: PUSH
6340: LD_INT 3
6342: ST_TO_ADDR
// uc_nation := 3 ;
6343: LD_ADDR_OWVAR 21
6347: PUSH
6348: LD_INT 3
6350: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6351: LD_INT 1
6353: PPUSH
6354: LD_INT 1
6356: PPUSH
6357: LD_INT 6
6359: PPUSH
6360: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6364: LD_ADDR_OWVAR 29
6368: PUSH
6369: LD_INT 12
6371: PUSH
6372: LD_INT 12
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: ST_TO_ADDR
// un := CreateHuman ;
6379: LD_ADDR_VAR 0 3
6383: PUSH
6384: CALL_OW 44
6388: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6389: LD_VAR 0 3
6393: PPUSH
6394: LD_INT 134
6396: PPUSH
6397: LD_INT 52
6399: PPUSH
6400: LD_INT 4
6402: PPUSH
6403: LD_INT 0
6405: PPUSH
6406: CALL 67603 0 5
// ComTurnUnit ( un , Heike ) ;
6410: LD_VAR 0 3
6414: PPUSH
6415: LD_EXP 43
6419: PPUSH
6420: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6424: LD_VAR 0 3
6428: PPUSH
6429: LD_EXP 43
6433: PPUSH
6434: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6438: LD_VAR 0 3
6442: PPUSH
6443: LD_STRING DRum-Fail-3
6445: PPUSH
6446: CALL_OW 88
// for i := 1 to 3 do
6450: LD_ADDR_VAR 0 2
6454: PUSH
6455: DOUBLE
6456: LD_INT 1
6458: DEC
6459: ST_TO_ADDR
6460: LD_INT 3
6462: PUSH
6463: FOR_TO
6464: IFFALSE 6537
// begin PrepareSoldier ( false , 10 ) ;
6466: LD_INT 0
6468: PPUSH
6469: LD_INT 10
6471: PPUSH
6472: CALL_OW 381
// un := CreateHuman ;
6476: LD_ADDR_VAR 0 3
6480: PUSH
6481: CALL_OW 44
6485: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6486: LD_ADDR_VAR 0 4
6490: PUSH
6491: LD_VAR 0 4
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: CALL 65463 0 2
6505: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6506: LD_VAR 0 3
6510: PPUSH
6511: LD_INT 8
6513: PPUSH
6514: LD_INT 0
6516: PPUSH
6517: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6521: LD_VAR 0 3
6525: PPUSH
6526: LD_EXP 43
6530: PPUSH
6531: CALL_OW 119
// end ;
6535: GO 6463
6537: POP
6538: POP
// repeat wait ( 0 0$1 ) ;
6539: LD_INT 35
6541: PPUSH
6542: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6546: LD_VAR 0 4
6550: PPUSH
6551: LD_INT 101
6553: PUSH
6554: LD_INT 2
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PPUSH
6561: CALL_OW 72
6565: PUSH
6566: LD_INT 1
6568: GREATER
6569: IFFALSE 6539
// wait ( 0 0$1 ) ;
6571: LD_INT 35
6573: PPUSH
6574: CALL_OW 67
// DialogueOn ;
6578: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6582: LD_EXP 43
6586: PPUSH
6587: LD_STRING DH-Fail-4
6589: PPUSH
6590: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6594: LD_EXP 43
6598: PPUSH
6599: LD_STRING DH-Fail-5
6601: PPUSH
6602: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6606: LD_EXP 43
6610: PPUSH
6611: LD_STRING DH-Fail-6
6613: PPUSH
6614: CALL_OW 88
// DialogueOff ;
6618: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6622: LD_VAR 0 4
6626: PPUSH
6627: LD_EXP 43
6631: PPUSH
6632: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6636: LD_INT 35
6638: PPUSH
6639: CALL_OW 67
// until IsDying ( Heike ) ;
6643: LD_EXP 43
6647: PPUSH
6648: CALL_OW 303
6652: IFFALSE 6636
// KillUnit ( Heike ) ;
6654: LD_EXP 43
6658: PPUSH
6659: CALL_OW 66
// wait ( 0 0$4 ) ;
6663: LD_INT 140
6665: PPUSH
6666: CALL_OW 67
// ResetFog ;
6670: CALL_OW 335
// DialogueOn ;
6674: CALL_OW 6
// dwait ( 0 0$1 ) ;
6678: LD_INT 35
6680: PPUSH
6681: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6685: LD_ADDR_EXP 43
6689: PUSH
6690: LD_STRING Heike
6692: PPUSH
6693: LD_EXP 1
6697: NOT
6698: PPUSH
6699: LD_EXP 2
6703: PPUSH
6704: CALL 27995 0 3
6708: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6709: LD_EXP 43
6713: PPUSH
6714: LD_STRING DH-Fail-7
6716: PPUSH
6717: CALL_OW 89
// DialogueOff ;
6721: CALL_OW 7
// YouLost ( Fail ) ;
6725: LD_STRING Fail
6727: PPUSH
6728: CALL_OW 104
// end ;
6732: LD_VAR 0 1
6736: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6737: LD_INT 2
6739: PPUSH
6740: LD_INT 173
6742: PPUSH
6743: LD_INT 29
6745: PPUSH
6746: CALL_OW 293
6750: PUSH
6751: LD_EXP 43
6755: PPUSH
6756: LD_INT 173
6758: PPUSH
6759: LD_INT 29
6761: PPUSH
6762: CALL_OW 297
6766: PUSH
6767: LD_INT 6
6769: LESS
6770: AND
6771: IFFALSE 6788
6773: GO 6775
6775: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6776: LD_EXP 43
6780: PPUSH
6781: LD_STRING DH-EastRoad
6783: PPUSH
6784: CALL_OW 88
6788: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6789: LD_INT 2
6791: PPUSH
6792: LD_INT 149
6794: PPUSH
6795: LD_INT 3
6797: PPUSH
6798: CALL_OW 293
6802: PUSH
6803: LD_EXP 43
6807: PPUSH
6808: LD_INT 149
6810: PPUSH
6811: LD_INT 3
6813: PPUSH
6814: CALL_OW 297
6818: PUSH
6819: LD_INT 6
6821: LESS
6822: AND
6823: IFFALSE 6840
6825: GO 6827
6827: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6828: LD_EXP 43
6832: PPUSH
6833: LD_STRING DH-EastRoad
6835: PPUSH
6836: CALL_OW 88
6840: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6841: LD_INT 2
6843: PPUSH
6844: LD_INT 217
6846: PPUSH
6847: LD_INT 120
6849: PPUSH
6850: CALL_OW 293
6854: PUSH
6855: LD_EXP 43
6859: PPUSH
6860: LD_INT 217
6862: PPUSH
6863: LD_INT 120
6865: PPUSH
6866: CALL_OW 297
6870: PUSH
6871: LD_INT 6
6873: LESS
6874: AND
6875: IFFALSE 6892
6877: GO 6879
6879: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6880: LD_EXP 43
6884: PPUSH
6885: LD_STRING DH-EastEnd
6887: PPUSH
6888: CALL_OW 88
6892: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6893: LD_EXP 43
6897: PPUSH
6898: LD_INT 11
6900: PPUSH
6901: CALL_OW 308
6905: IFFALSE 6943
6907: GO 6909
6909: DISABLE
// begin if not heikeSquad then
6910: LD_EXP 14
6914: NOT
6915: IFFALSE 6931
// Say ( Heike , DH-Hill ) else
6917: LD_EXP 43
6921: PPUSH
6922: LD_STRING DH-Hill
6924: PPUSH
6925: CALL_OW 88
6929: GO 6943
// Say ( Heike , DH-Hill-a ) ;
6931: LD_EXP 43
6935: PPUSH
6936: LD_STRING DH-Hill-a
6938: PPUSH
6939: CALL_OW 88
// end ;
6943: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6944: LD_EXP 43
6948: PPUSH
6949: LD_INT 12
6951: PPUSH
6952: CALL_OW 308
6956: IFFALSE 7143
6958: GO 6960
6960: DISABLE
6961: LD_INT 0
6963: PPUSH
6964: PPUSH
6965: PPUSH
// begin DialogueOn ;
6966: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
6970: LD_EXP 43
6974: PPUSH
6975: CALL_OW 87
// x := GetX ( Heike ) ;
6979: LD_ADDR_VAR 0 1
6983: PUSH
6984: LD_EXP 43
6988: PPUSH
6989: CALL_OW 250
6993: ST_TO_ADDR
// y := GetY ( Heike ) ;
6994: LD_ADDR_VAR 0 2
6998: PUSH
6999: LD_EXP 43
7003: PPUSH
7004: CALL_OW 251
7008: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7009: LD_VAR 0 1
7013: PPUSH
7014: LD_VAR 0 2
7018: PPUSH
7019: LD_INT 2
7021: PPUSH
7022: LD_INT 12
7024: NEG
7025: PPUSH
7026: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7030: LD_VAR 0 1
7034: PPUSH
7035: LD_VAR 0 2
7039: PPUSH
7040: LD_INT 2
7042: PPUSH
7043: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7047: LD_INT 101
7049: PUSH
7050: LD_INT 2
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 2
7059: PUSH
7060: LD_INT 30
7062: PUSH
7063: LD_INT 32
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 30
7072: PUSH
7073: LD_INT 33
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 69
7093: IFFALSE 7105
// v := 3 else
7095: LD_ADDR_VAR 0 3
7099: PUSH
7100: LD_INT 3
7102: ST_TO_ADDR
7103: GO 7113
// v := 2 ;
7105: LD_ADDR_VAR 0 3
7109: PUSH
7110: LD_INT 2
7112: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7113: LD_EXP 43
7117: PPUSH
7118: LD_STRING DH-Outpost-
7120: PUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_VAR 0 3
7128: PPUSH
7129: CALL_OW 12
7133: STR
7134: PPUSH
7135: CALL_OW 88
// DialogueOff ;
7139: CALL_OW 7
// end ;
7143: PPOPN 3
7145: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7146: LD_EXP 43
7150: PPUSH
7151: LD_INT 64
7153: PPUSH
7154: CALL_OW 308
7158: IFFALSE 7345
7160: GO 7162
7162: DISABLE
7163: LD_INT 0
7165: PPUSH
7166: PPUSH
7167: PPUSH
// begin DialogueOn ;
7168: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7172: LD_EXP 43
7176: PPUSH
7177: CALL_OW 87
// x := GetX ( Heike ) ;
7181: LD_ADDR_VAR 0 1
7185: PUSH
7186: LD_EXP 43
7190: PPUSH
7191: CALL_OW 250
7195: ST_TO_ADDR
// y := GetY ( Heike ) ;
7196: LD_ADDR_VAR 0 2
7200: PUSH
7201: LD_EXP 43
7205: PPUSH
7206: CALL_OW 251
7210: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7211: LD_VAR 0 1
7215: PPUSH
7216: LD_VAR 0 2
7220: PPUSH
7221: LD_INT 2
7223: PPUSH
7224: LD_INT 12
7226: NEG
7227: PPUSH
7228: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7232: LD_VAR 0 1
7236: PPUSH
7237: LD_VAR 0 2
7241: PPUSH
7242: LD_INT 2
7244: PPUSH
7245: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7249: LD_INT 101
7251: PUSH
7252: LD_INT 2
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: LD_INT 2
7261: PUSH
7262: LD_INT 30
7264: PUSH
7265: LD_INT 32
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 30
7274: PUSH
7275: LD_INT 33
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PPUSH
7291: CALL_OW 69
7295: IFFALSE 7307
// v := 3 else
7297: LD_ADDR_VAR 0 3
7301: PUSH
7302: LD_INT 3
7304: ST_TO_ADDR
7305: GO 7315
// v := 2 ;
7307: LD_ADDR_VAR 0 3
7311: PUSH
7312: LD_INT 2
7314: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7315: LD_EXP 43
7319: PPUSH
7320: LD_STRING DH-Outpost-
7322: PUSH
7323: LD_INT 1
7325: PPUSH
7326: LD_VAR 0 3
7330: PPUSH
7331: CALL_OW 12
7335: STR
7336: PPUSH
7337: CALL_OW 88
// DialogueOff ;
7341: CALL_OW 7
// end ;
7345: PPOPN 3
7347: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7348: LD_EXP 43
7352: PPUSH
7353: LD_INT 19
7355: PPUSH
7356: CALL_OW 308
7360: PUSH
7361: LD_EXP 22
7365: NOT
7366: AND
7367: PUSH
7368: LD_EXP 30
7372: NOT
7373: AND
7374: IFFALSE 7447
7376: GO 7378
7378: DISABLE
// begin DialogueOn ;
7379: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7383: LD_INT 152
7385: PPUSH
7386: LD_INT 115
7388: PPUSH
7389: LD_INT 2
7391: PPUSH
7392: LD_INT 16
7394: NEG
7395: PPUSH
7396: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7400: LD_INT 152
7402: PPUSH
7403: LD_INT 115
7405: PPUSH
7406: LD_INT 2
7408: PPUSH
7409: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7413: LD_INT 152
7415: PPUSH
7416: LD_INT 115
7418: PPUSH
7419: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7423: LD_EXP 43
7427: PPUSH
7428: LD_STRING DH-Stealth-1
7430: PPUSH
7431: CALL_OW 88
// DialogueOff ;
7435: CALL_OW 7
// adminAreaDiscovered := true ;
7439: LD_ADDR_EXP 22
7443: PUSH
7444: LD_INT 1
7446: ST_TO_ADDR
// end ;
7447: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7448: LD_INT 2
7450: PPUSH
7451: LD_EXP 44
7455: PPUSH
7456: CALL_OW 292
7460: PUSH
7461: LD_EXP 43
7465: PPUSH
7466: LD_EXP 44
7470: PPUSH
7471: CALL_OW 296
7475: PUSH
7476: LD_INT 6
7478: LESS
7479: AND
7480: PUSH
7481: LD_EXP 17
7485: NOT
7486: AND
7487: PUSH
7488: LD_EXP 30
7492: NOT
7493: AND
7494: IFFALSE 7600
7496: GO 7498
7498: DISABLE
// begin DialogueOn ;
7499: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7503: LD_EXP 44
7507: PPUSH
7508: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7512: LD_EXP 44
7516: PPUSH
7517: LD_EXP 43
7521: PPUSH
7522: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7526: LD_EXP 43
7530: PPUSH
7531: LD_EXP 44
7535: PPUSH
7536: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7540: LD_EXP 43
7544: PPUSH
7545: LD_STRING DH-Givi-1
7547: PPUSH
7548: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7552: LD_EXP 44
7556: PPUSH
7557: LD_STRING DG-Givi-2
7559: PPUSH
7560: CALL_OW 88
// DialogueOff ;
7564: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7568: LD_EXP 44
7572: PPUSH
7573: LD_INT 2
7575: PPUSH
7576: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7580: LD_ADDR_EXP 14
7584: PUSH
7585: LD_EXP 14
7589: PPUSH
7590: LD_EXP 44
7594: PPUSH
7595: CALL 65463 0 2
7599: ST_TO_ADDR
// end ;
7600: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7601: LD_INT 2
7603: PPUSH
7604: LD_EXP 49
7608: PPUSH
7609: CALL_OW 292
7613: PUSH
7614: LD_EXP 43
7618: PPUSH
7619: LD_EXP 49
7623: PPUSH
7624: CALL_OW 296
7628: PUSH
7629: LD_INT 6
7631: LESS
7632: AND
7633: PUSH
7634: LD_EXP 17
7638: NOT
7639: AND
7640: PUSH
7641: LD_EXP 30
7645: NOT
7646: AND
7647: IFFALSE 7753
7649: GO 7651
7651: DISABLE
// begin DialogueOn ;
7652: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7656: LD_EXP 49
7660: PPUSH
7661: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7665: LD_EXP 49
7669: PPUSH
7670: LD_EXP 43
7674: PPUSH
7675: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7679: LD_EXP 43
7683: PPUSH
7684: LD_EXP 49
7688: PPUSH
7689: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7693: LD_EXP 43
7697: PPUSH
7698: LD_STRING DH-Sophia-1
7700: PPUSH
7701: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7705: LD_EXP 49
7709: PPUSH
7710: LD_STRING DS-Sophia-2
7712: PPUSH
7713: CALL_OW 88
// DialogueOff ;
7717: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7721: LD_EXP 49
7725: PPUSH
7726: LD_INT 2
7728: PPUSH
7729: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7733: LD_ADDR_EXP 14
7737: PUSH
7738: LD_EXP 14
7742: PPUSH
7743: LD_EXP 49
7747: PPUSH
7748: CALL 65463 0 2
7752: ST_TO_ADDR
// end ;
7753: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7754: LD_INT 2
7756: PPUSH
7757: LD_EXP 51
7761: PPUSH
7762: CALL_OW 292
7766: PUSH
7767: LD_EXP 43
7771: PPUSH
7772: LD_EXP 51
7776: PPUSH
7777: CALL_OW 296
7781: PUSH
7782: LD_INT 6
7784: LESS
7785: AND
7786: PUSH
7787: LD_EXP 17
7791: NOT
7792: AND
7793: PUSH
7794: LD_EXP 30
7798: NOT
7799: AND
7800: IFFALSE 7896
7802: GO 7804
7804: DISABLE
// begin DialogueOn ;
7805: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7809: LD_EXP 51
7813: PPUSH
7814: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7818: LD_EXP 43
7822: PPUSH
7823: LD_STRING DH-Olaf-1
7825: PPUSH
7826: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7830: LD_EXP 51
7834: PPUSH
7835: LD_STRING DO-Olaf-2
7837: PPUSH
7838: CALL_OW 88
// if explosionsTakenByRussians then
7842: LD_EXP 21
7846: IFFALSE 7860
// Say ( Olaf , DO-Olaf-a-3 ) ;
7848: LD_EXP 51
7852: PPUSH
7853: LD_STRING DO-Olaf-a-3
7855: PPUSH
7856: CALL_OW 88
// DialogueOff ;
7860: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7864: LD_EXP 51
7868: PPUSH
7869: LD_INT 2
7871: PPUSH
7872: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7876: LD_ADDR_EXP 14
7880: PUSH
7881: LD_EXP 14
7885: PPUSH
7886: LD_EXP 51
7890: PPUSH
7891: CALL 65463 0 2
7895: ST_TO_ADDR
// end ;
7896: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7897: LD_INT 2
7899: PPUSH
7900: LD_EXP 45
7904: PPUSH
7905: CALL_OW 292
7909: PUSH
7910: LD_EXP 43
7914: PPUSH
7915: LD_EXP 45
7919: PPUSH
7920: CALL_OW 296
7924: PUSH
7925: LD_INT 6
7927: LESS
7928: AND
7929: PUSH
7930: LD_EXP 17
7934: NOT
7935: AND
7936: PUSH
7937: LD_EXP 30
7941: NOT
7942: AND
7943: IFFALSE 8171
7945: GO 7947
7947: DISABLE
7948: LD_INT 0
7950: PPUSH
7951: PPUSH
// begin DialogueOn ;
7952: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7956: LD_EXP 45
7960: PPUSH
7961: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7965: LD_ADDR_VAR 0 2
7969: PUSH
7970: LD_INT 18
7972: PPUSH
7973: LD_INT 0
7975: PPUSH
7976: CALL_OW 517
7980: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
7981: LD_ADDR_VAR 0 1
7985: PUSH
7986: DOUBLE
7987: LD_INT 1
7989: DEC
7990: ST_TO_ADDR
7991: LD_VAR 0 2
7995: PUSH
7996: LD_INT 1
7998: ARRAY
7999: PUSH
8000: FOR_TO
8001: IFFALSE 8083
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8003: LD_VAR 0 2
8007: PUSH
8008: LD_INT 1
8010: ARRAY
8011: PUSH
8012: LD_VAR 0 1
8016: ARRAY
8017: PPUSH
8018: LD_VAR 0 2
8022: PUSH
8023: LD_INT 2
8025: ARRAY
8026: PUSH
8027: LD_VAR 0 1
8031: ARRAY
8032: PPUSH
8033: LD_INT 2
8035: PPUSH
8036: LD_INT 3
8038: NEG
8039: PPUSH
8040: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8044: LD_VAR 0 2
8048: PUSH
8049: LD_INT 1
8051: ARRAY
8052: PUSH
8053: LD_VAR 0 1
8057: ARRAY
8058: PPUSH
8059: LD_VAR 0 2
8063: PUSH
8064: LD_INT 2
8066: ARRAY
8067: PUSH
8068: LD_VAR 0 1
8072: ARRAY
8073: PPUSH
8074: LD_INT 2
8076: PPUSH
8077: CALL_OW 331
// end ;
8081: GO 8000
8083: POP
8084: POP
// Say ( Mike , DM-Mike-1 ) ;
8085: LD_EXP 45
8089: PPUSH
8090: LD_STRING DM-Mike-1
8092: PPUSH
8093: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8097: LD_EXP 43
8101: PPUSH
8102: LD_STRING DH-Mike-2
8104: PPUSH
8105: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8109: LD_INT 78
8111: PPUSH
8112: LD_INT 104
8114: PPUSH
8115: CALL_OW 84
// dwait ( 0 0$1 ) ;
8119: LD_INT 35
8121: PPUSH
8122: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8126: LD_EXP 43
8130: PPUSH
8131: CALL_OW 87
// DialogueOff ;
8135: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8139: LD_EXP 45
8143: PPUSH
8144: LD_INT 2
8146: PPUSH
8147: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8151: LD_ADDR_EXP 14
8155: PUSH
8156: LD_EXP 14
8160: PPUSH
8161: LD_EXP 45
8165: PPUSH
8166: CALL 65463 0 2
8170: ST_TO_ADDR
// end ;
8171: PPOPN 2
8173: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8174: LD_EXP 43
8178: PPUSH
8179: LD_EXP 48
8183: PPUSH
8184: CALL_OW 296
8188: PUSH
8189: LD_INT 6
8191: LESS
8192: PUSH
8193: LD_EXP 48
8197: PPUSH
8198: CALL_OW 257
8202: PUSH
8203: LD_INT 33
8205: EQUAL
8206: AND
8207: PUSH
8208: LD_EXP 17
8212: NOT
8213: AND
8214: PUSH
8215: LD_EXP 30
8219: NOT
8220: AND
8221: PUSH
8222: LD_EXP 48
8226: PPUSH
8227: CALL_OW 302
8231: AND
8232: PUSH
8233: LD_EXP 20
8237: AND
8238: PUSH
8239: LD_EXP 48
8243: PUSH
8244: LD_EXP 14
8248: IN
8249: AND
8250: PUSH
8251: LD_EXP 48
8255: PPUSH
8256: CALL_OW 255
8260: PUSH
8261: LD_INT 2
8263: EQUAL
8264: AND
8265: IFFALSE 8294
8267: GO 8269
8269: DISABLE
// begin DialogueOn ;
8270: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8274: LD_EXP 43
8278: PPUSH
8279: LD_STRING DH-Kaia-Revolver-2
8281: PPUSH
8282: CALL_OW 88
// SetClassKaiaRevolver ;
8286: CALL 1754 0 0
// DialogueOff ;
8290: CALL_OW 7
// end ;
8294: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8295: LD_EXP 46
8299: PUSH
8300: LD_EXP 53
8304: AND
8305: PUSH
8306: LD_EXP 53
8310: PPUSH
8311: CALL_OW 255
8315: PUSH
8316: LD_INT 2
8318: NONEQUAL
8319: AND
8320: PUSH
8321: LD_EXP 46
8325: PPUSH
8326: CALL_OW 255
8330: PUSH
8331: LD_INT 2
8333: NONEQUAL
8334: AND
8335: PUSH
8336: LD_EXP 14
8340: PPUSH
8341: LD_INT 22
8343: PUSH
8344: LD_INT 2
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PPUSH
8351: CALL_OW 72
8355: PUSH
8356: LD_INT 5
8358: GREATER
8359: AND
8360: PUSH
8361: LD_EXP 17
8365: NOT
8366: AND
8367: PUSH
8368: LD_EXP 30
8372: NOT
8373: AND
8374: IFFALSE 9091
8376: GO 8378
8378: DISABLE
8379: LD_INT 0
8381: PPUSH
8382: PPUSH
// begin DialogueOn ;
8383: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8387: LD_ADDR_VAR 0 2
8391: PUSH
8392: LD_EXP 44
8396: PPUSH
8397: CALL_OW 302
8401: PUSH
8402: LD_EXP 44
8406: PUSH
8407: LD_EXP 14
8411: IN
8412: AND
8413: PUSH
8414: LD_EXP 44
8418: PPUSH
8419: CALL_OW 255
8423: PUSH
8424: LD_INT 2
8426: EQUAL
8427: AND
8428: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8429: LD_EXP 43
8433: PPUSH
8434: LD_STRING DH-Med-1
8436: PPUSH
8437: CALL_OW 88
// if hasGivi then
8441: LD_VAR 0 2
8445: IFFALSE 8461
// Say ( Givi , DG-Med-2 ) else
8447: LD_EXP 44
8451: PPUSH
8452: LD_STRING DG-Med-2
8454: PPUSH
8455: CALL_OW 88
8459: GO 8566
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8461: LD_EXP 14
8465: PUSH
8466: LD_EXP 54
8470: ISECT
8471: PPUSH
8472: LD_INT 22
8474: PUSH
8475: LD_INT 2
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: LD_INT 26
8484: PUSH
8485: LD_INT 1
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PPUSH
8496: CALL_OW 72
8500: PUSH
8501: LD_INT 1
8503: ARRAY
8504: PPUSH
8505: LD_STRING DArm-Med-e-2
8507: PPUSH
8508: CALL_OW 88
8512: NOT
8513: IFFALSE 8566
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8515: LD_EXP 14
8519: PUSH
8520: LD_EXP 54
8524: ISECT
8525: PPUSH
8526: LD_INT 22
8528: PUSH
8529: LD_INT 2
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PUSH
8536: LD_INT 26
8538: PUSH
8539: LD_INT 2
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PPUSH
8550: CALL_OW 72
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_STRING DArf-Med-e-2
8561: PPUSH
8562: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8566: LD_INT 154
8568: PPUSH
8569: LD_INT 119
8571: PPUSH
8572: LD_INT 70
8574: PPUSH
8575: CALL 19299 0 3
// Say ( Heike , DH-Med-3 ) ;
8579: LD_EXP 43
8583: PPUSH
8584: LD_STRING DH-Med-3
8586: PPUSH
8587: CALL_OW 88
// if hasGivi then
8591: LD_VAR 0 2
8595: IFFALSE 8611
// Say ( Givi , DG-Med-4 ) else
8597: LD_EXP 44
8601: PPUSH
8602: LD_STRING DG-Med-4
8604: PPUSH
8605: CALL_OW 88
8609: GO 8716
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8611: LD_EXP 14
8615: PUSH
8616: LD_EXP 54
8620: ISECT
8621: PPUSH
8622: LD_INT 22
8624: PUSH
8625: LD_INT 2
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 26
8634: PUSH
8635: LD_INT 1
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PPUSH
8646: CALL_OW 72
8650: PUSH
8651: LD_INT 1
8653: ARRAY
8654: PPUSH
8655: LD_STRING DArm-Med-e-4
8657: PPUSH
8658: CALL_OW 88
8662: NOT
8663: IFFALSE 8716
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8665: LD_EXP 14
8669: PUSH
8670: LD_EXP 54
8674: ISECT
8675: PPUSH
8676: LD_INT 22
8678: PUSH
8679: LD_INT 2
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 26
8688: PUSH
8689: LD_INT 2
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PPUSH
8700: CALL_OW 72
8704: PUSH
8705: LD_INT 1
8707: ARRAY
8708: PPUSH
8709: LD_STRING DArf-Med-e-4
8711: PPUSH
8712: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8716: LD_ADDR_VAR 0 1
8720: PUSH
8721: LD_EXP 48
8725: PPUSH
8726: CALL_OW 302
8730: PUSH
8731: LD_EXP 48
8735: PUSH
8736: LD_EXP 14
8740: IN
8741: AND
8742: PUSH
8743: LD_EXP 48
8747: PPUSH
8748: CALL_OW 255
8752: PUSH
8753: LD_INT 2
8755: EQUAL
8756: AND
8757: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8758: LD_EXP 45
8762: PPUSH
8763: CALL_OW 302
8767: PUSH
8768: LD_EXP 45
8772: PUSH
8773: LD_EXP 14
8777: IN
8778: AND
8779: PUSH
8780: LD_EXP 48
8784: PPUSH
8785: CALL_OW 255
8789: PUSH
8790: LD_INT 2
8792: EQUAL
8793: AND
8794: IFFALSE 8826
// begin Say ( Mike , DM-Med-5 ) ;
8796: LD_EXP 45
8800: PPUSH
8801: LD_STRING DM-Med-5
8803: PPUSH
8804: CALL_OW 88
// if hasKaia then
8808: LD_VAR 0 1
8812: IFFALSE 8826
// Say ( Kaia , DK-Med-6 ) ;
8814: LD_EXP 48
8818: PPUSH
8819: LD_STRING DK-Med-6
8821: PPUSH
8822: CALL_OW 88
// end ; if hasKaia then
8826: LD_VAR 0 1
8830: IFFALSE 9071
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8832: LD_INT 175
8834: PPUSH
8835: LD_INT 123
8837: PPUSH
8838: LD_INT 2
8840: PPUSH
8841: LD_INT 8
8843: NEG
8844: PPUSH
8845: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8849: LD_INT 175
8851: PPUSH
8852: LD_INT 123
8854: PPUSH
8855: LD_INT 2
8857: PPUSH
8858: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8862: LD_INT 175
8864: PPUSH
8865: LD_INT 123
8867: PPUSH
8868: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8872: LD_EXP 48
8876: PPUSH
8877: LD_STRING DK-Med-7
8879: PPUSH
8880: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8884: LD_EXP 48
8888: PPUSH
8889: LD_STRING DK-Med-8
8891: PPUSH
8892: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8896: LD_EXP 50
8900: PPUSH
8901: CALL_OW 302
8905: PUSH
8906: LD_EXP 50
8910: PUSH
8911: LD_EXP 14
8915: IN
8916: AND
8917: PUSH
8918: LD_EXP 50
8922: PPUSH
8923: CALL_OW 255
8927: PUSH
8928: LD_INT 2
8930: EQUAL
8931: AND
8932: IFFALSE 8990
// begin Say ( Markov , DMar-Med-9 ) ;
8934: LD_EXP 50
8938: PPUSH
8939: LD_STRING DMar-Med-9
8941: PPUSH
8942: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8946: LD_EXP 48
8950: PPUSH
8951: LD_STRING DK-Med-10
8953: PPUSH
8954: CALL_OW 88
// if hasGivi then
8958: LD_VAR 0 2
8962: IFFALSE 8978
// Say ( Kaia , DK-Med-11 ) else
8964: LD_EXP 48
8968: PPUSH
8969: LD_STRING DK-Med-11
8971: PPUSH
8972: CALL_OW 88
8976: GO 8990
// Say ( Kaia , DK-Med-a-11 ) ;
8978: LD_EXP 48
8982: PPUSH
8983: LD_STRING DK-Med-a-11
8985: PPUSH
8986: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
8990: LD_EXP 47
8994: PPUSH
8995: CALL_OW 302
8999: PUSH
9000: LD_EXP 47
9004: PUSH
9005: LD_EXP 14
9009: IN
9010: AND
9011: PUSH
9012: LD_EXP 47
9016: PPUSH
9017: CALL_OW 255
9021: PUSH
9022: LD_INT 2
9024: EQUAL
9025: AND
9026: IFFALSE 9071
// begin Say ( Kamil , DKam-Med-12 ) ;
9028: LD_EXP 47
9032: PPUSH
9033: LD_STRING DKam-Med-12
9035: PPUSH
9036: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9040: LD_EXP 47
9044: PPUSH
9045: LD_STRING DKam-Med-13
9047: PPUSH
9048: CALL_OW 88
// if not hasExplosionCollected then
9052: LD_EXP 23
9056: NOT
9057: IFFALSE 9071
// Say ( Heike , DH-Med-d-14 ) ;
9059: LD_EXP 43
9063: PPUSH
9064: LD_STRING DH-Med-d-14
9066: PPUSH
9067: CALL_OW 88
// end ; end ; DialogueOff ;
9071: CALL_OW 7
// adminAreaDiscovered := true ;
9075: LD_ADDR_EXP 22
9079: PUSH
9080: LD_INT 1
9082: ST_TO_ADDR
// laundryAllowed := true ;
9083: LD_ADDR_EXP 26
9087: PUSH
9088: LD_INT 1
9090: ST_TO_ADDR
// end ;
9091: PPOPN 2
9093: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9094: LD_EXP 46
9098: NOT
9099: PUSH
9100: LD_EXP 53
9104: AND
9105: PUSH
9106: LD_EXP 53
9110: PUSH
9111: LD_EXP 14
9115: IN
9116: NOT
9117: AND
9118: PUSH
9119: LD_EXP 14
9123: PPUSH
9124: LD_INT 22
9126: PUSH
9127: LD_INT 2
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 72
9138: PUSH
9139: LD_INT 4
9141: GREATER
9142: AND
9143: PUSH
9144: LD_EXP 17
9148: NOT
9149: AND
9150: PUSH
9151: LD_EXP 30
9155: NOT
9156: AND
9157: IFFALSE 9874
9159: GO 9161
9161: DISABLE
9162: LD_INT 0
9164: PPUSH
9165: PPUSH
// begin DialogueOn ;
9166: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9170: LD_ADDR_VAR 0 1
9174: PUSH
9175: LD_EXP 44
9179: PPUSH
9180: CALL_OW 302
9184: PUSH
9185: LD_EXP 44
9189: PUSH
9190: LD_EXP 14
9194: IN
9195: AND
9196: PUSH
9197: LD_EXP 44
9201: PPUSH
9202: CALL_OW 255
9206: PUSH
9207: LD_INT 2
9209: EQUAL
9210: AND
9211: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9212: LD_EXP 43
9216: PPUSH
9217: LD_STRING DH-Med-a-1
9219: PPUSH
9220: CALL_OW 88
// if hasGivi then
9224: LD_VAR 0 1
9228: IFFALSE 9244
// Say ( Givi , DG-Med-a-2 ) else
9230: LD_EXP 44
9234: PPUSH
9235: LD_STRING DG-Med-a-2
9237: PPUSH
9238: CALL_OW 88
9242: GO 9349
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9244: LD_EXP 14
9248: PUSH
9249: LD_EXP 54
9253: ISECT
9254: PPUSH
9255: LD_INT 22
9257: PUSH
9258: LD_INT 2
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: LD_INT 26
9267: PUSH
9268: LD_INT 1
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PPUSH
9279: CALL_OW 72
9283: PUSH
9284: LD_INT 1
9286: ARRAY
9287: PPUSH
9288: LD_STRING DArm-Med-f-2
9290: PPUSH
9291: CALL_OW 88
9295: NOT
9296: IFFALSE 9349
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9298: LD_EXP 14
9302: PUSH
9303: LD_EXP 54
9307: ISECT
9308: PPUSH
9309: LD_INT 22
9311: PUSH
9312: LD_INT 2
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 26
9321: PUSH
9322: LD_INT 2
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PPUSH
9333: CALL_OW 72
9337: PUSH
9338: LD_INT 1
9340: ARRAY
9341: PPUSH
9342: LD_STRING DArf-Med-f-2
9344: PPUSH
9345: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9349: LD_INT 154
9351: PPUSH
9352: LD_INT 119
9354: PPUSH
9355: LD_INT 70
9357: PPUSH
9358: CALL 19299 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9362: LD_EXP 43
9366: PPUSH
9367: LD_STRING DH-Med-a-3
9369: PPUSH
9370: CALL_OW 88
// if hasGivi then
9374: LD_VAR 0 1
9378: IFFALSE 9394
// Say ( Givi , DG-Med-a-4 ) else
9380: LD_EXP 44
9384: PPUSH
9385: LD_STRING DG-Med-a-4
9387: PPUSH
9388: CALL_OW 88
9392: GO 9499
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9394: LD_EXP 14
9398: PUSH
9399: LD_EXP 54
9403: ISECT
9404: PPUSH
9405: LD_INT 22
9407: PUSH
9408: LD_INT 2
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: LD_INT 26
9417: PUSH
9418: LD_INT 1
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PPUSH
9429: CALL_OW 72
9433: PUSH
9434: LD_INT 1
9436: ARRAY
9437: PPUSH
9438: LD_STRING DArm-Med-f-4
9440: PPUSH
9441: CALL_OW 88
9445: NOT
9446: IFFALSE 9499
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9448: LD_EXP 14
9452: PUSH
9453: LD_EXP 54
9457: ISECT
9458: PPUSH
9459: LD_INT 22
9461: PUSH
9462: LD_INT 2
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 26
9471: PUSH
9472: LD_INT 2
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PPUSH
9483: CALL_OW 72
9487: PUSH
9488: LD_INT 1
9490: ARRAY
9491: PPUSH
9492: LD_STRING DArf-Med-f-4
9494: PPUSH
9495: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9499: LD_ADDR_VAR 0 2
9503: PUSH
9504: LD_EXP 48
9508: PPUSH
9509: CALL_OW 302
9513: PUSH
9514: LD_EXP 48
9518: PUSH
9519: LD_EXP 14
9523: IN
9524: AND
9525: PUSH
9526: LD_EXP 48
9530: PPUSH
9531: CALL_OW 255
9535: PUSH
9536: LD_INT 2
9538: EQUAL
9539: AND
9540: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9541: LD_EXP 45
9545: PPUSH
9546: CALL_OW 302
9550: PUSH
9551: LD_EXP 45
9555: PUSH
9556: LD_EXP 14
9560: IN
9561: AND
9562: PUSH
9563: LD_EXP 45
9567: PPUSH
9568: CALL_OW 255
9572: PUSH
9573: LD_INT 2
9575: EQUAL
9576: AND
9577: IFFALSE 9609
// begin Say ( Mike , DM-Med-5 ) ;
9579: LD_EXP 45
9583: PPUSH
9584: LD_STRING DM-Med-5
9586: PPUSH
9587: CALL_OW 88
// if hasKaia then
9591: LD_VAR 0 2
9595: IFFALSE 9609
// Say ( Kaia , DK-Med-6 ) ;
9597: LD_EXP 48
9601: PPUSH
9602: LD_STRING DK-Med-6
9604: PPUSH
9605: CALL_OW 88
// end ; if hasKaia then
9609: LD_VAR 0 2
9613: IFFALSE 9854
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9615: LD_INT 175
9617: PPUSH
9618: LD_INT 123
9620: PPUSH
9621: LD_INT 2
9623: PPUSH
9624: LD_INT 8
9626: NEG
9627: PPUSH
9628: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9632: LD_INT 175
9634: PPUSH
9635: LD_INT 123
9637: PPUSH
9638: LD_INT 2
9640: PPUSH
9641: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9645: LD_INT 175
9647: PPUSH
9648: LD_INT 123
9650: PPUSH
9651: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9655: LD_EXP 48
9659: PPUSH
9660: LD_STRING DK-Med-7
9662: PPUSH
9663: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9667: LD_EXP 48
9671: PPUSH
9672: LD_STRING DK-Med-8
9674: PPUSH
9675: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9679: LD_EXP 50
9683: PPUSH
9684: CALL_OW 302
9688: PUSH
9689: LD_EXP 50
9693: PUSH
9694: LD_EXP 14
9698: IN
9699: AND
9700: PUSH
9701: LD_EXP 50
9705: PPUSH
9706: CALL_OW 255
9710: PUSH
9711: LD_INT 2
9713: EQUAL
9714: AND
9715: IFFALSE 9773
// begin Say ( Markov , DMar-Med-9 ) ;
9717: LD_EXP 50
9721: PPUSH
9722: LD_STRING DMar-Med-9
9724: PPUSH
9725: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9729: LD_EXP 48
9733: PPUSH
9734: LD_STRING DK-Med-10
9736: PPUSH
9737: CALL_OW 88
// if hasGivi then
9741: LD_VAR 0 1
9745: IFFALSE 9761
// Say ( Kaia , DK-Med-11 ) else
9747: LD_EXP 48
9751: PPUSH
9752: LD_STRING DK-Med-11
9754: PPUSH
9755: CALL_OW 88
9759: GO 9773
// Say ( Kaia , DK-Med-a-11 ) ;
9761: LD_EXP 48
9765: PPUSH
9766: LD_STRING DK-Med-a-11
9768: PPUSH
9769: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9773: LD_EXP 47
9777: PPUSH
9778: CALL_OW 302
9782: PUSH
9783: LD_EXP 47
9787: PUSH
9788: LD_EXP 14
9792: IN
9793: AND
9794: PUSH
9795: LD_EXP 47
9799: PPUSH
9800: CALL_OW 255
9804: PUSH
9805: LD_INT 2
9807: EQUAL
9808: AND
9809: IFFALSE 9854
// begin Say ( Kamil , DKam-Med-12 ) ;
9811: LD_EXP 47
9815: PPUSH
9816: LD_STRING DKam-Med-12
9818: PPUSH
9819: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9823: LD_EXP 47
9827: PPUSH
9828: LD_STRING DKam-Med-13
9830: PPUSH
9831: CALL_OW 88
// if not hasExplosionCollected then
9835: LD_EXP 23
9839: NOT
9840: IFFALSE 9854
// Say ( Heike , DH-Med-d-14 ) ;
9842: LD_EXP 43
9846: PPUSH
9847: LD_STRING DH-Med-d-14
9849: PPUSH
9850: CALL_OW 88
// end ; end ; DialogueOff ;
9854: CALL_OW 7
// adminAreaDiscovered := true ;
9858: LD_ADDR_EXP 22
9862: PUSH
9863: LD_INT 1
9865: ST_TO_ADDR
// laundryAllowed := true ;
9866: LD_ADDR_EXP 26
9870: PUSH
9871: LD_INT 1
9873: ST_TO_ADDR
// end ;
9874: PPOPN 2
9876: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9877: LD_EXP 46
9881: PUSH
9882: LD_EXP 53
9886: NOT
9887: AND
9888: PUSH
9889: LD_EXP 46
9893: PUSH
9894: LD_EXP 14
9898: IN
9899: NOT
9900: AND
9901: PUSH
9902: LD_EXP 14
9906: PPUSH
9907: LD_INT 22
9909: PUSH
9910: LD_INT 2
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PPUSH
9917: CALL_OW 72
9921: PUSH
9922: LD_INT 4
9924: GREATER
9925: AND
9926: PUSH
9927: LD_EXP 17
9931: NOT
9932: AND
9933: PUSH
9934: LD_EXP 30
9938: NOT
9939: AND
9940: IFFALSE 10657
9942: GO 9944
9944: DISABLE
9945: LD_INT 0
9947: PPUSH
9948: PPUSH
// begin DialogueOn ;
9949: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9953: LD_ADDR_VAR 0 1
9957: PUSH
9958: LD_EXP 44
9962: PPUSH
9963: CALL_OW 302
9967: PUSH
9968: LD_EXP 44
9972: PUSH
9973: LD_EXP 14
9977: IN
9978: AND
9979: PUSH
9980: LD_EXP 44
9984: PPUSH
9985: CALL_OW 255
9989: PUSH
9990: LD_INT 2
9992: EQUAL
9993: AND
9994: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
9995: LD_EXP 43
9999: PPUSH
10000: LD_STRING DH-Med-b-1
10002: PPUSH
10003: CALL_OW 88
// if hasGivi then
10007: LD_VAR 0 1
10011: IFFALSE 10027
// Say ( Givi , DG-Med-a-2 ) else
10013: LD_EXP 44
10017: PPUSH
10018: LD_STRING DG-Med-a-2
10020: PPUSH
10021: CALL_OW 88
10025: GO 10132
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10027: LD_EXP 14
10031: PUSH
10032: LD_EXP 54
10036: ISECT
10037: PPUSH
10038: LD_INT 22
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 26
10050: PUSH
10051: LD_INT 1
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 72
10066: PUSH
10067: LD_INT 1
10069: ARRAY
10070: PPUSH
10071: LD_STRING DArm-Med-f-2
10073: PPUSH
10074: CALL_OW 88
10078: NOT
10079: IFFALSE 10132
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10081: LD_EXP 14
10085: PUSH
10086: LD_EXP 54
10090: ISECT
10091: PPUSH
10092: LD_INT 22
10094: PUSH
10095: LD_INT 2
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 26
10104: PUSH
10105: LD_INT 2
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 72
10120: PUSH
10121: LD_INT 1
10123: ARRAY
10124: PPUSH
10125: LD_STRING DArf-Med-f-2
10127: PPUSH
10128: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10132: LD_INT 154
10134: PPUSH
10135: LD_INT 119
10137: PPUSH
10138: LD_INT 70
10140: PPUSH
10141: CALL 19299 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10145: LD_EXP 43
10149: PPUSH
10150: LD_STRING DH-Med-a-3
10152: PPUSH
10153: CALL_OW 88
// if hasGivi then
10157: LD_VAR 0 1
10161: IFFALSE 10177
// Say ( Givi , DG-Med-a-4 ) else
10163: LD_EXP 44
10167: PPUSH
10168: LD_STRING DG-Med-a-4
10170: PPUSH
10171: CALL_OW 88
10175: GO 10282
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10177: LD_EXP 14
10181: PUSH
10182: LD_EXP 54
10186: ISECT
10187: PPUSH
10188: LD_INT 22
10190: PUSH
10191: LD_INT 2
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 26
10200: PUSH
10201: LD_INT 1
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PPUSH
10212: CALL_OW 72
10216: PUSH
10217: LD_INT 1
10219: ARRAY
10220: PPUSH
10221: LD_STRING DArm-Med-f-4
10223: PPUSH
10224: CALL_OW 88
10228: NOT
10229: IFFALSE 10282
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10231: LD_EXP 14
10235: PUSH
10236: LD_EXP 54
10240: ISECT
10241: PPUSH
10242: LD_INT 22
10244: PUSH
10245: LD_INT 2
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PUSH
10252: LD_INT 26
10254: PUSH
10255: LD_INT 2
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PPUSH
10266: CALL_OW 72
10270: PUSH
10271: LD_INT 1
10273: ARRAY
10274: PPUSH
10275: LD_STRING DArf-Med-f-4
10277: PPUSH
10278: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10282: LD_ADDR_VAR 0 2
10286: PUSH
10287: LD_EXP 48
10291: PPUSH
10292: CALL_OW 302
10296: PUSH
10297: LD_EXP 48
10301: PUSH
10302: LD_EXP 14
10306: IN
10307: AND
10308: PUSH
10309: LD_EXP 48
10313: PPUSH
10314: CALL_OW 255
10318: PUSH
10319: LD_INT 2
10321: EQUAL
10322: AND
10323: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10324: LD_EXP 45
10328: PPUSH
10329: CALL_OW 302
10333: PUSH
10334: LD_EXP 45
10338: PUSH
10339: LD_EXP 14
10343: IN
10344: AND
10345: PUSH
10346: LD_EXP 45
10350: PPUSH
10351: CALL_OW 255
10355: PUSH
10356: LD_INT 2
10358: EQUAL
10359: AND
10360: IFFALSE 10392
// begin Say ( Mike , DM-Med-5 ) ;
10362: LD_EXP 45
10366: PPUSH
10367: LD_STRING DM-Med-5
10369: PPUSH
10370: CALL_OW 88
// if hasKaia then
10374: LD_VAR 0 2
10378: IFFALSE 10392
// Say ( Kaia , DK-Med-6 ) ;
10380: LD_EXP 48
10384: PPUSH
10385: LD_STRING DK-Med-6
10387: PPUSH
10388: CALL_OW 88
// end ; if hasKaia then
10392: LD_VAR 0 2
10396: IFFALSE 10637
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10398: LD_INT 175
10400: PPUSH
10401: LD_INT 123
10403: PPUSH
10404: LD_INT 2
10406: PPUSH
10407: LD_INT 8
10409: NEG
10410: PPUSH
10411: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10415: LD_INT 175
10417: PPUSH
10418: LD_INT 123
10420: PPUSH
10421: LD_INT 2
10423: PPUSH
10424: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10428: LD_INT 175
10430: PPUSH
10431: LD_INT 123
10433: PPUSH
10434: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10438: LD_EXP 48
10442: PPUSH
10443: LD_STRING DK-Med-7
10445: PPUSH
10446: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10450: LD_EXP 48
10454: PPUSH
10455: LD_STRING DK-Med-8
10457: PPUSH
10458: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10462: LD_EXP 50
10466: PPUSH
10467: CALL_OW 302
10471: PUSH
10472: LD_EXP 50
10476: PUSH
10477: LD_EXP 14
10481: IN
10482: AND
10483: PUSH
10484: LD_EXP 50
10488: PPUSH
10489: CALL_OW 255
10493: PUSH
10494: LD_INT 2
10496: EQUAL
10497: AND
10498: IFFALSE 10556
// begin Say ( Markov , DMar-Med-9 ) ;
10500: LD_EXP 50
10504: PPUSH
10505: LD_STRING DMar-Med-9
10507: PPUSH
10508: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10512: LD_EXP 48
10516: PPUSH
10517: LD_STRING DK-Med-10
10519: PPUSH
10520: CALL_OW 88
// if hasGivi then
10524: LD_VAR 0 1
10528: IFFALSE 10544
// Say ( Kaia , DK-Med-11 ) else
10530: LD_EXP 48
10534: PPUSH
10535: LD_STRING DK-Med-11
10537: PPUSH
10538: CALL_OW 88
10542: GO 10556
// Say ( Kaia , DK-Med-a-11 ) ;
10544: LD_EXP 48
10548: PPUSH
10549: LD_STRING DK-Med-a-11
10551: PPUSH
10552: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10556: LD_EXP 47
10560: PPUSH
10561: CALL_OW 302
10565: PUSH
10566: LD_EXP 47
10570: PUSH
10571: LD_EXP 14
10575: IN
10576: AND
10577: PUSH
10578: LD_EXP 47
10582: PPUSH
10583: CALL_OW 255
10587: PUSH
10588: LD_INT 2
10590: EQUAL
10591: AND
10592: IFFALSE 10637
// begin Say ( Kamil , DKam-Med-12 ) ;
10594: LD_EXP 47
10598: PPUSH
10599: LD_STRING DKam-Med-12
10601: PPUSH
10602: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10606: LD_EXP 47
10610: PPUSH
10611: LD_STRING DKam-Med-13
10613: PPUSH
10614: CALL_OW 88
// if not hasExplosionCollected then
10618: LD_EXP 23
10622: NOT
10623: IFFALSE 10637
// Say ( Heike , DH-Med-d-14 ) ;
10625: LD_EXP 43
10629: PPUSH
10630: LD_STRING DH-Med-d-14
10632: PPUSH
10633: CALL_OW 88
// end ; end ; DialogueOff ;
10637: CALL_OW 7
// adminAreaDiscovered := true ;
10641: LD_ADDR_EXP 22
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// laundryAllowed := true ;
10649: LD_ADDR_EXP 26
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// end ;
10657: PPOPN 2
10659: END
// every 0 0$1 trigger laundryAllowed do
10660: LD_EXP 26
10664: IFFALSE 10676
10666: GO 10668
10668: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10669: LD_STRING M1-laundry
10671: PPUSH
10672: CALL_OW 337
10676: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10677: LD_EXP 46
10681: NOT
10682: PUSH
10683: LD_EXP 53
10687: NOT
10688: AND
10689: PUSH
10690: LD_EXP 51
10694: PPUSH
10695: CALL_OW 302
10699: AND
10700: PUSH
10701: LD_EXP 51
10705: PUSH
10706: LD_EXP 14
10710: IN
10711: AND
10712: PUSH
10713: LD_EXP 51
10717: PPUSH
10718: CALL_OW 255
10722: PUSH
10723: LD_INT 2
10725: EQUAL
10726: AND
10727: PUSH
10728: LD_EXP 17
10732: NOT
10733: AND
10734: PUSH
10735: LD_EXP 30
10739: NOT
10740: AND
10741: IFFALSE 10897
10743: GO 10745
10745: DISABLE
// begin DialogueOn ;
10746: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10750: LD_INT 152
10752: PPUSH
10753: LD_INT 115
10755: PPUSH
10756: LD_INT 2
10758: PPUSH
10759: LD_INT 16
10761: NEG
10762: PPUSH
10763: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10767: LD_INT 152
10769: PPUSH
10770: LD_INT 115
10772: PPUSH
10773: LD_INT 2
10775: PPUSH
10776: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10780: LD_INT 152
10782: PPUSH
10783: LD_INT 115
10785: PPUSH
10786: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10790: LD_EXP 51
10794: PPUSH
10795: LD_STRING DO-Med-c-1
10797: PPUSH
10798: CALL_OW 88
// if not hasExplosionCollected then
10802: LD_EXP 23
10806: NOT
10807: IFFALSE 10823
// Say ( Heike , DH-Med-d-14 ) else
10809: LD_EXP 43
10813: PPUSH
10814: LD_STRING DH-Med-d-14
10816: PPUSH
10817: CALL_OW 88
10821: GO 10885
// begin Say ( Heike , DH-Med-c-2 ) ;
10823: LD_EXP 43
10827: PPUSH
10828: LD_STRING DH-Med-c-2
10830: PPUSH
10831: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10835: LD_EXP 48
10839: PPUSH
10840: CALL_OW 302
10844: PUSH
10845: LD_EXP 48
10849: PUSH
10850: LD_EXP 14
10854: IN
10855: AND
10856: PUSH
10857: LD_EXP 48
10861: PPUSH
10862: CALL_OW 255
10866: PUSH
10867: LD_INT 2
10869: EQUAL
10870: AND
10871: IFFALSE 10885
// Say ( Kaia , DK-Med-c-3 ) ;
10873: LD_EXP 48
10877: PPUSH
10878: LD_STRING DK-Med-c-3
10880: PPUSH
10881: CALL_OW 88
// end ; DialogueOff ;
10885: CALL_OW 7
// adminAreaDiscovered := true ;
10889: LD_ADDR_EXP 22
10893: PUSH
10894: LD_INT 1
10896: ST_TO_ADDR
// end ;
10897: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10898: LD_EXP 48
10902: PPUSH
10903: CALL_OW 256
10907: PUSH
10908: LD_INT 250
10910: LESS
10911: PUSH
10912: LD_EXP 48
10916: PUSH
10917: LD_EXP 14
10921: IN
10922: AND
10923: PUSH
10924: LD_EXP 17
10928: AND
10929: PUSH
10930: LD_EXP 24
10934: AND
10935: IFFALSE 11064
10937: GO 10939
10939: DISABLE
// begin DialogueOn ;
10940: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10944: LD_EXP 48
10948: PPUSH
10949: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10953: LD_EXP 48
10957: PPUSH
10958: LD_STRING DK-death-1
10960: PPUSH
10961: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10965: LD_EXP 43
10969: PPUSH
10970: LD_STRING DH-death-2
10972: PPUSH
10973: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
10977: LD_EXP 48
10981: PPUSH
10982: LD_STRING DK-death-3
10984: PPUSH
10985: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
10989: LD_EXP 48
10993: PPUSH
10994: LD_STRING DK-death-4
10996: PPUSH
10997: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11001: LD_EXP 48
11005: PPUSH
11006: LD_INT 8
11008: PPUSH
11009: CALL_OW 235
// ComStop ( Kaia ) ;
11013: LD_EXP 48
11017: PPUSH
11018: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11022: LD_INT 8
11024: PPUSH
11025: LD_INT 2
11027: PPUSH
11028: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11032: LD_ADDR_EXP 14
11036: PUSH
11037: LD_EXP 14
11041: PUSH
11042: LD_EXP 48
11046: DIFF
11047: ST_TO_ADDR
// DialogueOff ;
11048: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11052: LD_EXP 45
11056: PPUSH
11057: LD_STRING DM-death-5
11059: PPUSH
11060: CALL_OW 88
// end ;
11064: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11065: LD_EXP 25
11069: NOT
11070: PUSH
11071: LD_EXP 30
11075: NOT
11076: AND
11077: PUSH
11078: LD_EXP 56
11082: PUSH
11083: LD_EXP 14
11087: IN
11088: NOT
11089: AND
11090: PUSH
11091: LD_INT 2
11093: PPUSH
11094: LD_EXP 56
11098: PPUSH
11099: CALL_OW 292
11103: AND
11104: PUSH
11105: LD_EXP 43
11109: PPUSH
11110: LD_EXP 56
11114: PPUSH
11115: CALL_OW 296
11119: PUSH
11120: LD_INT 6
11122: LESS
11123: AND
11124: PUSH
11125: LD_EXP 17
11129: NOT
11130: AND
11131: IFFALSE 11355
11133: GO 11135
11135: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11136: LD_EXP 56
11140: PPUSH
11141: LD_EXP 43
11145: PPUSH
11146: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11150: LD_EXP 43
11154: PPUSH
11155: LD_EXP 56
11159: PPUSH
11160: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11164: LD_INT 10
11166: PPUSH
11167: CALL_OW 67
// DialogueOn ;
11171: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11175: LD_EXP 56
11179: PPUSH
11180: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11184: LD_EXP 43
11188: PPUSH
11189: LD_STRING DH-Deal-1
11191: PPUSH
11192: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11196: LD_EXP 56
11200: PPUSH
11201: LD_STRING DJ-Deal-2
11203: PPUSH
11204: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11208: LD_EXP 43
11212: PPUSH
11213: LD_STRING DH-Deal-3
11215: PPUSH
11216: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11220: LD_EXP 56
11224: PPUSH
11225: LD_STRING DJ-Deal-4
11227: PPUSH
11228: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11232: LD_EXP 56
11236: PPUSH
11237: LD_STRING DJ-Deal-5
11239: PPUSH
11240: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11244: LD_EXP 56
11248: PPUSH
11249: LD_STRING DJ-Deal-6
11251: PPUSH
11252: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11256: LD_EXP 56
11260: PPUSH
11261: LD_STRING DJ-Deal-7
11263: PPUSH
11264: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11268: LD_EXP 43
11272: PPUSH
11273: LD_STRING DH-Deal-8
11275: PPUSH
11276: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11280: LD_EXP 43
11284: PPUSH
11285: LD_STRING DH-Deal-9
11287: PPUSH
11288: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11292: LD_EXP 56
11296: PPUSH
11297: LD_STRING DJ-Deal-10
11299: PPUSH
11300: CALL_OW 88
// DialogueOff ;
11304: CALL_OW 7
// contactWithAmerican := true ;
11308: LD_ADDR_EXP 25
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11316: LD_STRING M1-american-out
11318: PPUSH
11319: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11323: LD_EXP 56
11327: PPUSH
11328: LD_INT 2
11330: PPUSH
11331: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11335: LD_ADDR_EXP 14
11339: PUSH
11340: LD_EXP 14
11344: PPUSH
11345: LD_EXP 56
11349: PPUSH
11350: CALL 65463 0 2
11354: ST_TO_ADDR
// end ;
11355: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11356: LD_EXP 25
11360: PUSH
11361: LD_EXP 30
11365: NOT
11366: AND
11367: PUSH
11368: LD_EXP 56
11372: PUSH
11373: LD_EXP 14
11377: IN
11378: NOT
11379: AND
11380: PUSH
11381: LD_INT 2
11383: PPUSH
11384: LD_EXP 56
11388: PPUSH
11389: CALL_OW 292
11393: AND
11394: PUSH
11395: LD_EXP 43
11399: PPUSH
11400: LD_EXP 56
11404: PPUSH
11405: CALL_OW 296
11409: PUSH
11410: LD_INT 6
11412: LESS
11413: AND
11414: PUSH
11415: LD_EXP 17
11419: NOT
11420: AND
11421: IFFALSE 11546
11423: GO 11425
11425: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11426: LD_EXP 56
11430: PPUSH
11431: LD_EXP 43
11435: PPUSH
11436: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11440: LD_EXP 43
11444: PPUSH
11445: LD_EXP 56
11449: PPUSH
11450: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11454: LD_INT 10
11456: PPUSH
11457: CALL_OW 67
// DialogueOn ;
11461: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11465: LD_EXP 56
11469: PPUSH
11470: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11474: LD_EXP 56
11478: PPUSH
11479: LD_STRING DJ-Escort-1
11481: PPUSH
11482: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11486: LD_EXP 43
11490: PPUSH
11491: LD_STRING DH-Escort-2
11493: PPUSH
11494: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11498: LD_EXP 56
11502: PPUSH
11503: LD_STRING DJ-Escort-3
11505: PPUSH
11506: CALL_OW 88
// DialogueOff ;
11510: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11514: LD_EXP 56
11518: PPUSH
11519: LD_INT 2
11521: PPUSH
11522: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11526: LD_ADDR_EXP 14
11530: PUSH
11531: LD_EXP 14
11535: PPUSH
11536: LD_EXP 56
11540: PPUSH
11541: CALL 65463 0 2
11545: ST_TO_ADDR
// end ;
11546: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11547: LD_EXP 25
11551: PUSH
11552: LD_EXP 30
11556: NOT
11557: AND
11558: PUSH
11559: LD_EXP 55
11563: PUSH
11564: LD_EXP 14
11568: DIFF
11569: PPUSH
11570: LD_INT 22
11572: PUSH
11573: LD_INT 4
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PUSH
11580: LD_INT 3
11582: PUSH
11583: LD_INT 120
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 101
11599: PUSH
11600: LD_INT 2
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: LIST
11611: PPUSH
11612: CALL_OW 72
11616: AND
11617: PUSH
11618: LD_EXP 17
11622: NOT
11623: AND
11624: IFFALSE 11839
11626: GO 11628
11628: DISABLE
11629: LD_INT 0
11631: PPUSH
// begin enable ;
11632: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11633: LD_ADDR_VAR 0 1
11637: PUSH
11638: LD_EXP 55
11642: PUSH
11643: LD_EXP 14
11647: DIFF
11648: PPUSH
11649: LD_INT 22
11651: PUSH
11652: LD_INT 4
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 91
11661: PUSH
11662: LD_EXP 43
11666: PUSH
11667: LD_INT 6
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: PUSH
11675: LD_INT 101
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: LIST
11689: PPUSH
11690: CALL_OW 72
11694: PPUSH
11695: LD_EXP 43
11699: PPUSH
11700: CALL_OW 74
11704: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11705: LD_VAR 0 1
11709: PPUSH
11710: LD_EXP 43
11714: PPUSH
11715: CALL_OW 296
11719: PUSH
11720: LD_INT 6
11722: LESS
11723: IFFALSE 11839
// begin DialogueOn ;
11725: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11729: LD_VAR 0 1
11733: PPUSH
11734: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11738: LD_EXP 43
11742: PPUSH
11743: LD_STRING DH-USsol-1
11745: PPUSH
11746: CALL_OW 88
// if GetSex ( un ) = sex_male then
11750: LD_VAR 0 1
11754: PPUSH
11755: CALL_OW 258
11759: PUSH
11760: LD_INT 1
11762: EQUAL
11763: IFFALSE 11779
// Say ( un , DUSM-USsol-2 ) else
11765: LD_VAR 0 1
11769: PPUSH
11770: LD_STRING DUSM-USsol-2
11772: PPUSH
11773: CALL_OW 88
11777: GO 11791
// Say ( un , DUSF-USsol-2 ) ;
11779: LD_VAR 0 1
11783: PPUSH
11784: LD_STRING DUSF-USsol-2
11786: PPUSH
11787: CALL_OW 88
// DialogueOff ;
11791: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11795: LD_ADDR_EXP 14
11799: PUSH
11800: LD_EXP 14
11804: PPUSH
11805: LD_VAR 0 1
11809: PPUSH
11810: CALL 65463 0 2
11814: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11815: LD_VAR 0 1
11819: PPUSH
11820: LD_INT 1
11822: PPUSH
11823: CALL_OW 109
// SetSide ( un , 2 ) ;
11827: LD_VAR 0 1
11831: PPUSH
11832: LD_INT 2
11834: PPUSH
11835: CALL_OW 235
// end ; end ;
11839: PPOPN 1
11841: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11842: LD_EXP 54
11846: PUSH
11847: LD_EXP 30
11851: NOT
11852: AND
11853: PUSH
11854: LD_EXP 54
11858: PUSH
11859: LD_EXP 14
11863: DIFF
11864: PPUSH
11865: LD_INT 3
11867: PUSH
11868: LD_INT 120
11870: PUSH
11871: LD_INT 1
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 91
11884: PUSH
11885: LD_EXP 43
11889: PUSH
11890: LD_INT 6
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 101
11900: PUSH
11901: LD_INT 2
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 72
11917: AND
11918: PUSH
11919: LD_EXP 17
11923: NOT
11924: AND
11925: IFFALSE 12140
11927: GO 11929
11929: DISABLE
11930: LD_INT 0
11932: PPUSH
// begin enable ;
11933: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11934: LD_ADDR_VAR 0 1
11938: PUSH
11939: LD_EXP 54
11943: PUSH
11944: LD_EXP 14
11948: DIFF
11949: PPUSH
11950: LD_INT 22
11952: PUSH
11953: LD_INT 5
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 91
11962: PUSH
11963: LD_EXP 43
11967: PUSH
11968: LD_INT 6
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 101
11978: PUSH
11979: LD_INT 2
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: LIST
11990: PPUSH
11991: CALL_OW 72
11995: PPUSH
11996: LD_EXP 43
12000: PPUSH
12001: CALL_OW 74
12005: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12006: LD_VAR 0 1
12010: PPUSH
12011: LD_EXP 43
12015: PPUSH
12016: CALL_OW 296
12020: PUSH
12021: LD_INT 6
12023: LESS
12024: IFFALSE 12140
// begin DialogueOn ;
12026: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12030: LD_VAR 0 1
12034: PPUSH
12035: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12039: LD_EXP 43
12043: PPUSH
12044: LD_STRING DH-USsol-1
12046: PPUSH
12047: CALL_OW 88
// if GetSex ( un ) = sex_male then
12051: LD_VAR 0 1
12055: PPUSH
12056: CALL_OW 258
12060: PUSH
12061: LD_INT 1
12063: EQUAL
12064: IFFALSE 12080
// Say ( un , DArm-USsol-2 ) else
12066: LD_VAR 0 1
12070: PPUSH
12071: LD_STRING DArm-USsol-2
12073: PPUSH
12074: CALL_OW 88
12078: GO 12092
// Say ( un , DArf-USsol-3 ) ;
12080: LD_VAR 0 1
12084: PPUSH
12085: LD_STRING DArf-USsol-3
12087: PPUSH
12088: CALL_OW 88
// DialogueOff ;
12092: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12096: LD_ADDR_EXP 14
12100: PUSH
12101: LD_EXP 14
12105: PPUSH
12106: LD_VAR 0 1
12110: PPUSH
12111: CALL 65463 0 2
12115: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12116: LD_VAR 0 1
12120: PPUSH
12121: LD_INT 1
12123: PPUSH
12124: CALL_OW 109
// SetSide ( un , 2 ) ;
12128: LD_VAR 0 1
12132: PPUSH
12133: LD_INT 2
12135: PPUSH
12136: CALL_OW 235
// end ; end ;
12140: PPOPN 1
12142: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12143: LD_EXP 55
12147: PPUSH
12148: LD_INT 101
12150: PUSH
12151: LD_INT 2
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PPUSH
12158: CALL_OW 72
12162: PUSH
12163: LD_EXP 14
12167: PPUSH
12168: LD_INT 22
12170: PUSH
12171: LD_INT 2
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PPUSH
12178: CALL_OW 72
12182: PUSH
12183: LD_INT 5
12185: GREATER
12186: AND
12187: PUSH
12188: LD_EXP 10
12192: NOT
12193: AND
12194: PUSH
12195: LD_EXP 30
12199: NOT
12200: AND
12201: PUSH
12202: LD_EXP 25
12206: NOT
12207: AND
12208: PUSH
12209: LD_EXP 17
12213: NOT
12214: AND
12215: IFFALSE 12330
12217: GO 12219
12219: DISABLE
12220: LD_INT 0
12222: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12223: LD_ADDR_VAR 0 1
12227: PUSH
12228: LD_EXP 55
12232: PPUSH
12233: LD_INT 22
12235: PUSH
12236: LD_INT 4
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 101
12245: PUSH
12246: LD_INT 2
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PPUSH
12257: CALL_OW 72
12261: PUSH
12262: LD_INT 1
12264: ARRAY
12265: ST_TO_ADDR
// DialogueOn ;
12266: CALL_OW 6
// if GetSex ( un ) = sex_male then
12270: LD_VAR 0 1
12274: PPUSH
12275: CALL_OW 258
12279: PUSH
12280: LD_INT 1
12282: EQUAL
12283: IFFALSE 12299
// Say ( un , DUSm-USsol-a-2 ) else
12285: LD_VAR 0 1
12289: PPUSH
12290: LD_STRING DUSm-USsol-a-2
12292: PPUSH
12293: CALL_OW 88
12297: GO 12311
// Say ( un , DUSf-USsol-a-2 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_STRING DUSf-USsol-a-2
12306: PPUSH
12307: CALL_OW 88
// DialogueOff ;
12311: CALL_OW 7
// wait ( 0 0$2 ) ;
12315: LD_INT 70
12317: PPUSH
12318: CALL_OW 67
// isAlarm := true ;
12322: LD_ADDR_EXP 17
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// end ;
12330: PPOPN 1
12332: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12333: LD_EXP 17
12337: NOT
12338: PUSH
12339: LD_EXP 44
12343: PPUSH
12344: CALL_OW 302
12348: AND
12349: PUSH
12350: LD_EXP 44
12354: PPUSH
12355: CALL_OW 255
12359: PUSH
12360: LD_INT 2
12362: EQUAL
12363: AND
12364: PUSH
12365: LD_EXP 26
12369: AND
12370: PUSH
12371: LD_EXP 28
12375: NOT
12376: AND
12377: PUSH
12378: LD_EXP 27
12382: NOT
12383: AND
12384: PUSH
12385: LD_EXP 30
12389: NOT
12390: AND
12391: PUSH
12392: LD_EXP 44
12396: PPUSH
12397: LD_INT 165
12399: PPUSH
12400: CALL 19612 0 2
12404: AND
12405: IFFALSE 12537
12407: GO 12409
12409: DISABLE
// begin enable ;
12410: ENABLE
// InGameOn ;
12411: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12415: LD_EXP 44
12419: PPUSH
12420: LD_INT 5
12422: PPUSH
12423: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12427: LD_INT 165
12429: PPUSH
12430: LD_INT 5
12432: PPUSH
12433: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12437: LD_EXP 44
12441: PPUSH
12442: LD_INT 165
12444: PPUSH
12445: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12449: LD_INT 35
12451: PPUSH
12452: CALL_OW 67
// until IsInUnit ( Givi ) ;
12456: LD_EXP 44
12460: PPUSH
12461: CALL_OW 310
12465: IFFALSE 12449
// case Query ( GiviInLaundry ) of 1 :
12467: LD_STRING GiviInLaundry
12469: PPUSH
12470: CALL_OW 97
12474: PUSH
12475: LD_INT 1
12477: DOUBLE
12478: EQUAL
12479: IFTRUE 12483
12481: GO 12490
12483: POP
// SpawnGiviAsRussian ; 2 :
12484: CALL 1886 0 0
12488: GO 12502
12490: LD_INT 2
12492: DOUBLE
12493: EQUAL
12494: IFTRUE 12498
12496: GO 12501
12498: POP
// ; end ;
12499: GO 12502
12501: POP
// ComExitBuilding ( Givi ) ;
12502: LD_EXP 44
12506: PPUSH
12507: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12511: LD_EXP 44
12515: PPUSH
12516: LD_INT 2
12518: PPUSH
12519: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12523: LD_INT 165
12525: PPUSH
12526: LD_INT 3
12528: PPUSH
12529: CALL_OW 235
// InGameOff ;
12533: CALL_OW 9
// end ;
12537: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12538: LD_EXP 17
12542: NOT
12543: PUSH
12544: LD_EXP 28
12548: AND
12549: PUSH
12550: LD_EXP 44
12554: PPUSH
12555: CALL_OW 255
12559: PUSH
12560: LD_INT 2
12562: EQUAL
12563: AND
12564: PUSH
12565: LD_EXP 44
12569: PPUSH
12570: CALL_OW 248
12574: PUSH
12575: LD_INT 3
12577: EQUAL
12578: AND
12579: PUSH
12580: LD_EXP 44
12584: PPUSH
12585: LD_INT 119
12587: PPUSH
12588: CALL 19612 0 2
12592: AND
12593: PUSH
12594: LD_EXP 30
12598: NOT
12599: AND
12600: IFFALSE 12824
12602: GO 12604
12604: DISABLE
// begin InGameOn ;
12605: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12609: LD_EXP 44
12613: PPUSH
12614: LD_INT 3
12616: PPUSH
12617: CALL_OW 235
// ComEnterUnit ( Givi , ruLab ) ;
12621: LD_EXP 44
12625: PPUSH
12626: LD_INT 119
12628: PPUSH
12629: CALL_OW 120
// wait ( 0 0$1 ) ;
12633: LD_INT 35
12635: PPUSH
12636: CALL_OW 67
// DialogueOn ;
12640: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12644: LD_EXP 44
12648: PPUSH
12649: LD_STRING DG-Captive-1
12651: PPUSH
12652: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12656: LD_EXP 62
12660: PPUSH
12661: LD_STRING DCom-Captive-2
12663: PPUSH
12664: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12668: LD_EXP 44
12672: PPUSH
12673: LD_STRING DG-Captive-3
12675: PPUSH
12676: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12680: LD_EXP 62
12684: PPUSH
12685: LD_STRING DCom-Captive-4
12687: PPUSH
12688: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12692: LD_EXP 62
12696: PPUSH
12697: CALL_OW 64
// DialogueOff ;
12701: CALL_OW 7
// InGameOff ;
12705: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12709: LD_EXP 44
12713: PPUSH
12714: LD_INT 2
12716: PPUSH
12717: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12721: LD_EXP 44
12725: PPUSH
12726: CALL_OW 122
// if Aviradze then
12730: LD_EXP 53
12734: IFFALSE 12777
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12736: LD_ADDR_EXP 14
12740: PUSH
12741: LD_EXP 14
12745: PPUSH
12746: LD_EXP 53
12750: PPUSH
12751: CALL 65463 0 2
12755: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12756: LD_EXP 53
12760: PPUSH
12761: LD_INT 2
12763: PPUSH
12764: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12768: LD_EXP 53
12772: PPUSH
12773: CALL_OW 122
// end ; if Ibrahim then
12777: LD_EXP 46
12781: IFFALSE 12824
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12783: LD_ADDR_EXP 14
12787: PUSH
12788: LD_EXP 14
12792: PPUSH
12793: LD_EXP 46
12797: PPUSH
12798: CALL 65463 0 2
12802: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12803: LD_EXP 46
12807: PPUSH
12808: LD_INT 2
12810: PPUSH
12811: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12815: LD_EXP 46
12819: PPUSH
12820: CALL_OW 122
// end ; end ;
12824: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12825: LD_EXP 17
12829: NOT
12830: PUSH
12831: LD_EXP 27
12835: AND
12836: PUSH
12837: LD_EXP 43
12841: PPUSH
12842: CALL_OW 248
12846: PUSH
12847: LD_INT 3
12849: EQUAL
12850: AND
12851: PUSH
12852: LD_EXP 43
12856: PPUSH
12857: LD_INT 119
12859: PPUSH
12860: CALL 19612 0 2
12864: AND
12865: PUSH
12866: LD_EXP 30
12870: NOT
12871: AND
12872: IFFALSE 13134
12874: GO 12876
12876: DISABLE
// begin InGameOn ;
12877: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12881: LD_EXP 43
12885: PPUSH
12886: LD_INT 3
12888: PPUSH
12889: CALL_OW 235
// ComEnterUnit ( Heike , ruLab ) ;
12893: LD_EXP 43
12897: PPUSH
12898: LD_INT 119
12900: PPUSH
12901: CALL_OW 120
// wait ( 0 0$1 ) ;
12905: LD_INT 35
12907: PPUSH
12908: CALL_OW 67
// DialogueOn ;
12912: CALL_OW 6
// if Aviradze and Ibrahim then
12916: LD_EXP 53
12920: PUSH
12921: LD_EXP 46
12925: AND
12926: IFFALSE 12942
// Say ( Heike , DH-Captive-a-1 ) else
12928: LD_EXP 43
12932: PPUSH
12933: LD_STRING DH-Captive-a-1
12935: PPUSH
12936: CALL_OW 88
12940: GO 12954
// Say ( Heike , DH-Captive-a-b-1 ) ;
12942: LD_EXP 43
12946: PPUSH
12947: LD_STRING DH-Captive-a-b-1
12949: PPUSH
12950: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
12954: LD_EXP 62
12958: PPUSH
12959: LD_STRING DCom-Captive-a-2
12961: PPUSH
12962: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
12966: LD_EXP 43
12970: PPUSH
12971: LD_STRING DH-Captive-a-3
12973: PPUSH
12974: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
12978: LD_EXP 62
12982: PPUSH
12983: LD_STRING DCom-Captive-a-4
12985: PPUSH
12986: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
12990: LD_EXP 43
12994: PPUSH
12995: LD_STRING DH-Captive-a-5
12997: PPUSH
12998: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13002: LD_EXP 62
13006: PPUSH
13007: CALL_OW 64
// DialogueOff ;
13011: CALL_OW 7
// InGameOff ;
13015: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13019: LD_EXP 43
13023: PPUSH
13024: LD_INT 2
13026: PPUSH
13027: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13031: LD_EXP 43
13035: PPUSH
13036: CALL_OW 122
// if Aviradze then
13040: LD_EXP 53
13044: IFFALSE 13087
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13046: LD_ADDR_EXP 14
13050: PUSH
13051: LD_EXP 14
13055: PPUSH
13056: LD_EXP 53
13060: PPUSH
13061: CALL 65463 0 2
13065: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13066: LD_EXP 53
13070: PPUSH
13071: LD_INT 2
13073: PPUSH
13074: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13078: LD_EXP 53
13082: PPUSH
13083: CALL_OW 122
// end ; if Ibrahim then
13087: LD_EXP 46
13091: IFFALSE 13134
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13093: LD_ADDR_EXP 14
13097: PUSH
13098: LD_EXP 14
13102: PPUSH
13103: LD_EXP 46
13107: PPUSH
13108: CALL 65463 0 2
13112: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13113: LD_EXP 46
13117: PPUSH
13118: LD_INT 2
13120: PPUSH
13121: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13125: LD_EXP 46
13129: PPUSH
13130: CALL_OW 122
// end ; end ;
13134: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13135: LD_INT 2
13137: PUSH
13138: LD_INT 25
13140: PUSH
13141: LD_INT 32
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 25
13150: PUSH
13151: LD_INT 34
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: LIST
13162: PPUSH
13163: CALL_OW 69
13167: IFFALSE 13179
13169: GO 13171
13171: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13172: LD_STRING M1-weapons-out
13174: PPUSH
13175: CALL_OW 604
13179: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not contactWithAmerican and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13180: LD_INT 2
13182: PPUSH
13183: LD_EXP 58
13187: PPUSH
13188: CALL_OW 292
13192: PUSH
13193: LD_EXP 43
13197: PPUSH
13198: LD_EXP 58
13202: PPUSH
13203: CALL_OW 296
13207: AND
13208: PUSH
13209: LD_EXP 25
13213: NOT
13214: AND
13215: PUSH
13216: LD_EXP 17
13220: NOT
13221: AND
13222: PUSH
13223: LD_EXP 30
13227: NOT
13228: AND
13229: IFFALSE 13986
13231: GO 13233
13233: DISABLE
13234: LD_INT 0
13236: PPUSH
13237: PPUSH
// begin DialogueOn ;
13238: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13242: LD_EXP 58
13246: PPUSH
13247: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13251: LD_EXP 58
13255: PPUSH
13256: LD_STRING DJy-Food-1
13258: PPUSH
13259: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13263: LD_EXP 43
13267: PPUSH
13268: LD_STRING DH-Food-2
13270: PPUSH
13271: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13275: LD_EXP 58
13279: PPUSH
13280: LD_STRING DJy-Food-3
13282: PPUSH
13283: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13287: LD_EXP 58
13291: PPUSH
13292: LD_STRING DJy-Food-4
13294: PPUSH
13295: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13299: LD_EXP 43
13303: PPUSH
13304: LD_STRING DH-Food-5
13306: PPUSH
13307: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13311: LD_EXP 58
13315: PPUSH
13316: LD_STRING DJy-Food-6
13318: PPUSH
13319: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13323: LD_EXP 58
13327: PPUSH
13328: LD_STRING DJy-Food-7
13330: PPUSH
13331: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13335: LD_EXP 58
13339: PPUSH
13340: LD_STRING DJy-Food-8
13342: PPUSH
13343: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13347: LD_EXP 43
13351: PPUSH
13352: LD_STRING DH-Food-9
13354: PPUSH
13355: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13359: LD_EXP 58
13363: PPUSH
13364: LD_STRING DJy-Food-10
13366: PPUSH
13367: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13371: LD_EXP 43
13375: PPUSH
13376: LD_STRING DH-Food-11
13378: PPUSH
13379: CALL_OW 88
// DialogueOff ;
13383: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13387: LD_STRING M3
13389: PPUSH
13390: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13394: LD_INT 5
13396: PPUSH
13397: LD_INT 215
13399: PPUSH
13400: LD_INT 117
13402: PPUSH
13403: LD_INT 0
13405: PPUSH
13406: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13410: LD_INT 215
13412: PPUSH
13413: LD_INT 118
13415: PPUSH
13416: LD_INT 2
13418: PPUSH
13419: LD_INT 6
13421: NEG
13422: PPUSH
13423: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13427: LD_INT 215
13429: PPUSH
13430: LD_INT 118
13432: PPUSH
13433: LD_INT 2
13435: PPUSH
13436: CALL_OW 331
// foodDelivered := false ;
13440: LD_ADDR_VAR 0 2
13444: PUSH
13445: LD_INT 0
13447: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13448: LD_INT 35
13450: PPUSH
13451: CALL_OW 67
// if hasMuchin then
13455: LD_EXP 30
13459: IFFALSE 13463
// continue ;
13461: GO 13448
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_EXP 14
13472: PUSH
13473: LD_EXP 43
13477: UNION
13478: PPUSH
13479: LD_INT 91
13481: PUSH
13482: LD_EXP 58
13486: PUSH
13487: LD_INT 6
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 25
13497: PUSH
13498: LD_INT 33
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PPUSH
13509: CALL_OW 72
13513: PUSH
13514: FOR_IN
13515: IFFALSE 13715
// if Carry ( i ) then
13517: LD_VAR 0 1
13521: PPUSH
13522: CALL_OW 281
13526: IFFALSE 13713
// begin DialogueOn ;
13528: CALL_OW 6
// foodDelivered := true ;
13532: LD_ADDR_VAR 0 2
13536: PUSH
13537: LD_INT 1
13539: ST_TO_ADDR
// case i of Heike :
13540: LD_VAR 0 1
13544: PUSH
13545: LD_EXP 43
13549: DOUBLE
13550: EQUAL
13551: IFTRUE 13555
13553: GO 13570
13555: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13556: LD_EXP 43
13560: PPUSH
13561: LD_STRING DH-Food-12
13563: PPUSH
13564: CALL_OW 88
13568: GO 13696
13570: LD_EXP 48
13574: DOUBLE
13575: EQUAL
13576: IFTRUE 13580
13578: GO 13595
13580: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13581: LD_EXP 48
13585: PPUSH
13586: LD_STRING DK-Food-a-12
13588: PPUSH
13589: CALL_OW 88
13593: GO 13696
13595: LD_EXP 50
13599: DOUBLE
13600: EQUAL
13601: IFTRUE 13605
13603: GO 13620
13605: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13606: LD_EXP 50
13610: PPUSH
13611: LD_STRING DMar-Food-a-12
13613: PPUSH
13614: CALL_OW 88
13618: GO 13696
13620: LD_EXP 44
13624: DOUBLE
13625: EQUAL
13626: IFTRUE 13630
13628: GO 13645
13630: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13631: LD_EXP 44
13635: PPUSH
13636: LD_STRING DG-Food-a-14
13638: PPUSH
13639: CALL_OW 88
13643: GO 13696
13645: LD_EXP 45
13649: DOUBLE
13650: EQUAL
13651: IFTRUE 13655
13653: GO 13670
13655: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13656: LD_EXP 45
13660: PPUSH
13661: LD_STRING DM-Food-a-15
13663: PPUSH
13664: CALL_OW 88
13668: GO 13696
13670: LD_EXP 47
13674: DOUBLE
13675: EQUAL
13676: IFTRUE 13680
13678: GO 13695
13680: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13681: LD_EXP 47
13685: PPUSH
13686: LD_STRING DKam-Food-a-16
13688: PPUSH
13689: CALL_OW 88
13693: GO 13696
13695: POP
// SetCargo ( i , mat_cans , 0 ) ;
13696: LD_VAR 0 1
13700: PPUSH
13701: LD_INT 1
13703: PPUSH
13704: LD_INT 0
13706: PPUSH
13707: CALL_OW 290
// break ;
13711: GO 13715
// end ;
13713: GO 13514
13715: POP
13716: POP
// until foodDelivered ;
13717: LD_VAR 0 2
13721: IFFALSE 13448
// givenFood := true ;
13723: LD_ADDR_EXP 33
13727: PUSH
13728: LD_INT 1
13730: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13731: LD_EXP 58
13735: PPUSH
13736: LD_STRING DJy-Food-13
13738: PPUSH
13739: CALL_OW 88
// hasVirus := true ;
13743: LD_ADDR_EXP 31
13747: PUSH
13748: LD_INT 1
13750: ST_TO_ADDR
// if not americanContact then
13751: LD_EXP 10
13755: NOT
13756: IFFALSE 13806
// begin Say ( Heike , DH-Food-14 ) ;
13758: LD_EXP 43
13762: PPUSH
13763: LD_STRING DH-Food-14
13765: PPUSH
13766: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13770: LD_EXP 58
13774: PPUSH
13775: LD_STRING DJy-Food-15
13777: PPUSH
13778: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13782: LD_EXP 58
13786: PPUSH
13787: LD_STRING DJy-Food-16
13789: PPUSH
13790: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13794: LD_EXP 58
13798: PPUSH
13799: LD_STRING DJy-Food-17
13801: PPUSH
13802: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
13806: LD_STRING M3-out
13808: PPUSH
13809: CALL_OW 337
// DialogueOff ;
13813: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
13817: LD_EXP 58
13821: PPUSH
13822: LD_INT 1
13824: PPUSH
13825: LD_INT 10
13827: PPUSH
13828: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
13832: LD_EXP 58
13836: PPUSH
13837: LD_INT 95
13839: PPUSH
13840: LD_INT 17
13842: PPUSH
13843: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13847: LD_INT 35
13849: PPUSH
13850: CALL_OW 67
// if not HasTask ( Jerry ) then
13854: LD_EXP 58
13858: PPUSH
13859: CALL_OW 314
13863: NOT
13864: IFFALSE 13881
// ComMoveXY ( Jerry , 95 , 17 ) ;
13866: LD_EXP 58
13870: PPUSH
13871: LD_INT 95
13873: PPUSH
13874: LD_INT 17
13876: PPUSH
13877: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
13881: LD_EXP 58
13885: PPUSH
13886: LD_INT 95
13888: PPUSH
13889: LD_INT 17
13891: PPUSH
13892: CALL_OW 307
13896: IFFALSE 13847
// SetCargo ( Jerry , mat_cans , 0 ) ;
13898: LD_EXP 58
13902: PPUSH
13903: LD_INT 1
13905: PPUSH
13906: LD_INT 0
13908: PPUSH
13909: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
13913: LD_ADDR_EXP 55
13917: PUSH
13918: LD_EXP 55
13922: PPUSH
13923: LD_EXP 58
13927: PPUSH
13928: CALL 65463 0 2
13932: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
13933: LD_ADDR_VAR 0 1
13937: PUSH
13938: LD_INT 22
13940: PUSH
13941: LD_INT 4
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 23
13950: PUSH
13951: LD_INT 1
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PPUSH
13962: CALL_OW 69
13966: PUSH
13967: FOR_IN
13968: IFFALSE 13984
// SetLives ( i , 1000 ) ;
13970: LD_VAR 0 1
13974: PPUSH
13975: LD_INT 1000
13977: PPUSH
13978: CALL_OW 234
13982: GO 13967
13984: POP
13985: POP
// end ;
13986: PPOPN 2
13988: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
13989: LD_EXP 30
13993: NOT
13994: PUSH
13995: LD_EXP 6
13999: AND
14000: IFFALSE 14431
14002: GO 14004
14004: DISABLE
14005: LD_INT 0
14007: PPUSH
14008: PPUSH
// begin tmp := [ ] ;
14009: LD_ADDR_VAR 0 2
14013: PUSH
14014: EMPTY
14015: ST_TO_ADDR
// uc_side := 3 ;
14016: LD_ADDR_OWVAR 20
14020: PUSH
14021: LD_INT 3
14023: ST_TO_ADDR
// uc_nation := 3 ;
14024: LD_ADDR_OWVAR 21
14028: PUSH
14029: LD_INT 3
14031: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14032: LD_INT 1
14034: PPUSH
14035: LD_INT 8
14037: PPUSH
14038: CALL_OW 381
// un := CreateHuman ;
14042: LD_ADDR_VAR 0 1
14046: PUSH
14047: CALL_OW 44
14051: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14052: LD_VAR 0 1
14056: PPUSH
14057: LD_INT 173
14059: PPUSH
14060: LD_INT 104
14062: PPUSH
14063: LD_INT 0
14065: PPUSH
14066: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14070: LD_ADDR_VAR 0 2
14074: PUSH
14075: LD_VAR 0 2
14079: PPUSH
14080: LD_VAR 0 1
14084: PPUSH
14085: CALL 65463 0 2
14089: ST_TO_ADDR
// un := CreateHuman ;
14090: LD_ADDR_VAR 0 1
14094: PUSH
14095: CALL_OW 44
14099: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14100: LD_VAR 0 1
14104: PPUSH
14105: LD_INT 73
14107: PPUSH
14108: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14112: LD_ADDR_VAR 0 2
14116: PUSH
14117: LD_VAR 0 2
14121: PPUSH
14122: LD_VAR 0 1
14126: PPUSH
14127: CALL 65463 0 2
14131: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14132: LD_INT 35
14134: PPUSH
14135: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
14139: LD_EXP 48
14143: PPUSH
14144: CALL_OW 255
14148: PUSH
14149: LD_INT 2
14151: EQUAL
14152: PUSH
14153: LD_EXP 48
14157: PPUSH
14158: LD_INT 73
14160: PPUSH
14161: CALL_OW 296
14165: PUSH
14166: LD_INT 8
14168: LESS
14169: AND
14170: PUSH
14171: LD_VAR 0 2
14175: PPUSH
14176: LD_INT 101
14178: PUSH
14179: LD_INT 2
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PPUSH
14186: CALL_OW 72
14190: AND
14191: IFFALSE 14132
// InGameOn ;
14193: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14197: LD_INT 73
14199: PPUSH
14200: CALL_OW 250
14204: PPUSH
14205: LD_INT 73
14207: PPUSH
14208: CALL_OW 251
14212: PPUSH
14213: LD_INT 2
14215: PPUSH
14216: LD_INT 9
14218: NEG
14219: PPUSH
14220: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14224: LD_INT 73
14226: PPUSH
14227: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14231: LD_EXP 48
14235: PPUSH
14236: LD_INT 73
14238: PPUSH
14239: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14243: LD_EXP 48
14247: PPUSH
14248: LD_STRING DK-Plastic-1
14250: PPUSH
14251: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14255: LD_EXP 48
14259: PPUSH
14260: LD_STRING DK-Plastic-2
14262: PPUSH
14263: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14267: LD_EXP 48
14271: PPUSH
14272: LD_INT 73
14274: PPUSH
14275: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14279: LD_INT 35
14281: PPUSH
14282: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
14286: LD_EXP 48
14290: PPUSH
14291: LD_INT 73
14293: PPUSH
14294: CALL_OW 296
14298: PUSH
14299: LD_INT 6
14301: LESS
14302: IFFALSE 14279
// ComHold ( Kaia ) ;
14304: LD_EXP 48
14308: PPUSH
14309: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14313: LD_VAR 0 2
14317: PUSH
14318: LD_INT 1
14320: ARRAY
14321: PPUSH
14322: LD_STRING DRum-Plastic-3
14324: PPUSH
14325: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14329: LD_VAR 0 2
14333: PUSH
14334: LD_INT 2
14336: ARRAY
14337: PPUSH
14338: LD_STRING DRum2-Plastic-4
14340: PPUSH
14341: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14345: LD_VAR 0 2
14349: PUSH
14350: LD_INT 1
14352: ARRAY
14353: PPUSH
14354: LD_STRING DRum-Plastic-5
14356: PPUSH
14357: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14361: LD_VAR 0 2
14365: PUSH
14366: LD_INT 2
14368: ARRAY
14369: PPUSH
14370: LD_STRING DRum2-Plastic-6
14372: PPUSH
14373: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14377: LD_EXP 48
14381: PPUSH
14382: LD_STRING DK-Plastic-7
14384: PPUSH
14385: CALL_OW 88
// InGameOff ;
14389: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14393: LD_INT 73
14395: PPUSH
14396: CALL_OW 250
14400: PPUSH
14401: LD_INT 73
14403: PPUSH
14404: CALL_OW 251
14408: PPUSH
14409: LD_INT 2
14411: PPUSH
14412: CALL_OW 331
// explosionsTakenByRussians := true ;
14416: LD_ADDR_EXP 21
14420: PUSH
14421: LD_INT 1
14423: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14424: LD_STRING ExplosivesInfo
14426: PPUSH
14427: CALL_OW 97
// end ;
14431: PPOPN 2
14433: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14434: LD_EXP 21
14438: PUSH
14439: LD_EXP 48
14443: PPUSH
14444: CALL_OW 255
14448: PUSH
14449: LD_INT 2
14451: EQUAL
14452: AND
14453: PUSH
14454: LD_EXP 48
14458: PPUSH
14459: LD_INT 61
14461: PPUSH
14462: CALL 19612 0 2
14466: AND
14467: PUSH
14468: LD_EXP 17
14472: NOT
14473: AND
14474: PUSH
14475: LD_EXP 30
14479: NOT
14480: AND
14481: IFFALSE 14637
14483: GO 14485
14485: DISABLE
// begin InGameOn ;
14486: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14490: LD_INT 61
14492: PPUSH
14493: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14497: LD_EXP 48
14501: PPUSH
14502: LD_INT 3
14504: PPUSH
14505: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14509: LD_EXP 48
14513: PPUSH
14514: LD_INT 61
14516: PPUSH
14517: CALL_OW 120
// wait ( 0 0$2 ) ;
14521: LD_INT 70
14523: PPUSH
14524: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14528: LD_EXP 48
14532: PPUSH
14533: LD_STRING DK-Plastic-8
14535: PPUSH
14536: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14540: LD_EXP 64
14544: PUSH
14545: LD_INT 1
14547: ARRAY
14548: PPUSH
14549: LD_STRING DRuMch-Plastic-9
14551: PPUSH
14552: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14556: LD_EXP 48
14560: PPUSH
14561: LD_STRING DK-Plastic-10
14563: PPUSH
14564: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14568: LD_EXP 64
14572: PUSH
14573: LD_INT 1
14575: ARRAY
14576: PPUSH
14577: LD_STRING DRuMch-Plastic-a-11
14579: PPUSH
14580: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14584: LD_EXP 48
14588: PPUSH
14589: LD_STRING DK-Plastic-a-12
14591: PPUSH
14592: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14596: LD_EXP 64
14600: PUSH
14601: LD_INT 1
14603: ARRAY
14604: PPUSH
14605: LD_STRING DRuMch-Plastic-a-13
14607: PPUSH
14608: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14612: LD_EXP 48
14616: PPUSH
14617: LD_INT 2
14619: PPUSH
14620: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14624: LD_EXP 48
14628: PPUSH
14629: CALL_OW 122
// InGameOff ;
14633: CALL_OW 9
// end ;
14637: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14638: LD_EXP 21
14642: PUSH
14643: LD_EXP 48
14647: PPUSH
14648: CALL_OW 255
14652: PUSH
14653: LD_INT 2
14655: EQUAL
14656: AND
14657: PUSH
14658: LD_EXP 48
14662: PPUSH
14663: LD_INT 196
14665: PPUSH
14666: CALL 19612 0 2
14670: AND
14671: PUSH
14672: LD_EXP 17
14676: NOT
14677: AND
14678: PUSH
14679: LD_EXP 30
14683: NOT
14684: AND
14685: IFFALSE 15024
14687: GO 14689
14689: DISABLE
// begin InGameOn ;
14690: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14694: LD_INT 196
14696: PPUSH
14697: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14701: LD_EXP 48
14705: PPUSH
14706: LD_INT 3
14708: PPUSH
14709: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14713: LD_EXP 48
14717: PPUSH
14718: LD_INT 196
14720: PPUSH
14721: CALL_OW 120
// wait ( 0 0$2 ) ;
14725: LD_INT 70
14727: PPUSH
14728: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14732: LD_EXP 48
14736: PPUSH
14737: LD_STRING DK-Plastic-8
14739: PPUSH
14740: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14744: LD_EXP 65
14748: PUSH
14749: LD_INT 1
14751: ARRAY
14752: PPUSH
14753: LD_STRING DRuMch-Plastic-9
14755: PPUSH
14756: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14760: LD_EXP 48
14764: PPUSH
14765: LD_STRING DK-Plastic-10
14767: PPUSH
14768: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14772: LD_EXP 65
14776: PUSH
14777: LD_INT 1
14779: ARRAY
14780: PPUSH
14781: LD_STRING DRuMch-Plastic-11
14783: PPUSH
14784: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14788: LD_EXP 48
14792: PPUSH
14793: LD_STRING DK-Plastic-12
14795: PPUSH
14796: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
14800: LD_EXP 48
14804: PPUSH
14805: LD_STRING DK-Plastic-13
14807: PPUSH
14808: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
14812: LD_EXP 65
14816: PUSH
14817: LD_INT 1
14819: ARRAY
14820: PPUSH
14821: LD_STRING DRuMch-Plastic-14
14823: PPUSH
14824: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
14828: LD_EXP 66
14832: PPUSH
14833: LD_INT 167
14835: PPUSH
14836: LD_INT 34
14838: PPUSH
14839: LD_INT 3
14841: PPUSH
14842: LD_INT 0
14844: PPUSH
14845: CALL 67603 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14849: LD_EXP 66
14853: PPUSH
14854: LD_INT 196
14856: PPUSH
14857: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14861: LD_INT 35
14863: PPUSH
14864: CALL_OW 67
// if not HasTask ( Stiopa ) then
14868: LD_EXP 66
14872: PPUSH
14873: CALL_OW 314
14877: NOT
14878: IFFALSE 14892
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14880: LD_EXP 66
14884: PPUSH
14885: LD_INT 196
14887: PPUSH
14888: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
14892: LD_EXP 66
14896: PPUSH
14897: CALL_OW 310
14901: IFFALSE 14861
// Say ( Stiopa , DSpn-Plastic-15 ) ;
14903: LD_EXP 66
14907: PPUSH
14908: LD_STRING DSpn-Plastic-15
14910: PPUSH
14911: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
14915: LD_EXP 67
14919: PPUSH
14920: LD_STRING DLr-Plastic-16
14922: PPUSH
14923: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
14927: LD_EXP 48
14931: PPUSH
14932: LD_STRING DK-Plastic-17
14934: PPUSH
14935: CALL_OW 88
// wait ( 0 0$0.3 ) ;
14939: LD_INT 10
14941: PPUSH
14942: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
14946: LD_INT 196
14948: PPUSH
14949: CALL 19338 0 1
// SetSide ( Kaia , 2 ) ;
14953: LD_EXP 48
14957: PPUSH
14958: LD_INT 2
14960: PPUSH
14961: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14965: LD_EXP 48
14969: PPUSH
14970: CALL_OW 122
// InGameOff ;
14974: CALL_OW 9
// explosionsTakenByRussians := false ;
14978: LD_ADDR_EXP 21
14982: PUSH
14983: LD_INT 0
14985: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
14986: LD_INT 170
14988: PPUSH
14989: LD_INT 28
14991: PPUSH
14992: LD_INT 2
14994: PPUSH
14995: LD_INT 6
14997: NEG
14998: PPUSH
14999: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15003: LD_INT 170
15005: PPUSH
15006: LD_INT 28
15008: PPUSH
15009: LD_INT 2
15011: PPUSH
15012: CALL_OW 331
// knowWhereExplosivesAre := true ;
15016: LD_ADDR_EXP 34
15020: PUSH
15021: LD_INT 1
15023: ST_TO_ADDR
// end ;
15024: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15025: LD_EXP 34
15029: PUSH
15030: LD_EXP 48
15034: PPUSH
15035: CALL_OW 255
15039: PUSH
15040: LD_INT 2
15042: EQUAL
15043: AND
15044: PUSH
15045: LD_EXP 48
15049: PPUSH
15050: LD_INT 195
15052: PPUSH
15053: CALL 19612 0 2
15057: AND
15058: PUSH
15059: LD_EXP 17
15063: NOT
15064: AND
15065: PUSH
15066: LD_EXP 30
15070: NOT
15071: AND
15072: IFFALSE 15178
15074: GO 15076
15076: DISABLE
// begin InGameOn ;
15077: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15081: LD_EXP 48
15085: PPUSH
15086: LD_INT 3
15088: PPUSH
15089: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15093: LD_EXP 48
15097: PPUSH
15098: LD_INT 195
15100: PPUSH
15101: CALL_OW 120
// wait ( 0 0$1 ) ;
15105: LD_INT 35
15107: PPUSH
15108: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15112: LD_EXP 48
15116: PPUSH
15117: LD_STRING DK-Plastic-18
15119: PPUSH
15120: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15124: LD_STRING ExplosivesInfoUsage
15126: PPUSH
15127: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
15131: LD_INT 195
15133: PPUSH
15134: CALL 19338 0 1
// SetSide ( Kaia , 2 ) ;
15138: LD_EXP 48
15142: PPUSH
15143: LD_INT 2
15145: PPUSH
15146: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15150: LD_EXP 48
15154: PPUSH
15155: CALL_OW 122
// InGameOff ;
15159: CALL_OW 9
// hasExplosionCollected := true ;
15163: LD_ADDR_EXP 23
15167: PUSH
15168: LD_INT 1
15170: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15171: LD_STRING M1-explosive-out
15173: PPUSH
15174: CALL_OW 337
// end ;
15178: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15179: LD_EXP 23
15183: PUSH
15184: LD_EXP 17
15188: NOT
15189: AND
15190: PUSH
15191: LD_EXP 30
15195: NOT
15196: AND
15197: IFFALSE 15372
15199: GO 15201
15201: DISABLE
15202: LD_INT 0
15204: PPUSH
15205: PPUSH
// begin for i in importantBuildingsList do
15206: LD_ADDR_VAR 0 1
15210: PUSH
15211: LD_EXP 35
15215: PUSH
15216: FOR_IN
15217: IFFALSE 15233
// MarkBuilding ( i , true ) ;
15219: LD_VAR 0 1
15223: PPUSH
15224: LD_INT 1
15226: PPUSH
15227: CALL 19986 0 2
15231: GO 15216
15233: POP
15234: POP
// repeat wait ( 0 0$1 ) ;
15235: LD_INT 35
15237: PPUSH
15238: CALL_OW 67
// for i in importantBuildingsList do
15242: LD_ADDR_VAR 0 1
15246: PUSH
15247: LD_EXP 35
15251: PUSH
15252: FOR_IN
15253: IFFALSE 15363
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15255: LD_EXP 43
15259: PUSH
15260: LD_EXP 14
15264: UNION
15265: PPUSH
15266: LD_INT 22
15268: PUSH
15269: LD_INT 2
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 21
15278: PUSH
15279: LD_INT 1
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 91
15288: PUSH
15289: LD_VAR 0 1
15293: PUSH
15294: LD_INT 6
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: LIST
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: LIST
15306: PPUSH
15307: CALL_OW 72
15311: IFFALSE 15361
// begin CenterNowOnUnits ( i ) ;
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 87
// PlaceExplosives ( i ) ;
15322: LD_VAR 0 1
15326: PPUSH
15327: CALL 19883 0 1
// MarkBuilding ( i , false ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: LD_INT 0
15338: PPUSH
15339: CALL 19986 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15343: LD_ADDR_EXP 35
15347: PUSH
15348: LD_EXP 35
15352: PUSH
15353: LD_VAR 0 1
15357: DIFF
15358: ST_TO_ADDR
// continue ;
15359: GO 15252
// end ; end ;
15361: GO 15252
15363: POP
15364: POP
// until not importantBuildingsList ;
15365: LD_EXP 35
15369: NOT
15370: IFFALSE 15235
// end ;
15372: PPOPN 2
15374: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15375: LD_EXP 14
15379: PPUSH
15380: LD_INT 22
15382: PUSH
15383: LD_INT 2
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 95
15392: PUSH
15393: LD_INT 23
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 72
15408: PUSH
15409: LD_EXP 43
15413: PPUSH
15414: CALL_OW 302
15418: AND
15419: PUSH
15420: LD_EXP 30
15424: NOT
15425: AND
15426: IFFALSE 15454
15428: GO 15430
15430: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15431: LD_EXP 43
15435: PPUSH
15436: LD_STRING DH-End-1
15438: PPUSH
15439: CALL_OW 88
// if not activeExplosives then
15443: LD_EXP 36
15447: NOT
15448: IFFALSE 15454
// Explode ;
15450: CALL 22527 0 0
// end ;
15454: END
// function SayHEmpty ( ) ; begin
15455: LD_INT 0
15457: PPUSH
// case rand ( 1 , 3 ) of 1 :
15458: LD_INT 1
15460: PPUSH
15461: LD_INT 3
15463: PPUSH
15464: CALL_OW 12
15468: PUSH
15469: LD_INT 1
15471: DOUBLE
15472: EQUAL
15473: IFTRUE 15477
15475: GO 15492
15477: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15478: LD_EXP 43
15482: PPUSH
15483: LD_STRING DH-Empty-1
15485: PPUSH
15486: CALL_OW 88
15490: GO 15539
15492: LD_INT 2
15494: DOUBLE
15495: EQUAL
15496: IFTRUE 15500
15498: GO 15515
15500: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15501: LD_EXP 43
15505: PPUSH
15506: LD_STRING DH-Empty-2
15508: PPUSH
15509: CALL_OW 88
15513: GO 15539
15515: LD_INT 3
15517: DOUBLE
15518: EQUAL
15519: IFTRUE 15523
15521: GO 15538
15523: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15524: LD_EXP 43
15528: PPUSH
15529: LD_STRING DH-Empty-3
15531: PPUSH
15532: CALL_OW 88
15536: GO 15539
15538: POP
// end ;
15539: LD_VAR 0 1
15543: RET
// function SayHVisited ( ) ; begin
15544: LD_INT 0
15546: PPUSH
// case rand ( 1 , 3 ) of 1 :
15547: LD_INT 1
15549: PPUSH
15550: LD_INT 3
15552: PPUSH
15553: CALL_OW 12
15557: PUSH
15558: LD_INT 1
15560: DOUBLE
15561: EQUAL
15562: IFTRUE 15566
15564: GO 15581
15566: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15567: LD_EXP 43
15571: PPUSH
15572: LD_STRING DH-Visited-1
15574: PPUSH
15575: CALL_OW 88
15579: GO 15628
15581: LD_INT 2
15583: DOUBLE
15584: EQUAL
15585: IFTRUE 15589
15587: GO 15604
15589: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15590: LD_EXP 43
15594: PPUSH
15595: LD_STRING DH-Visited-2
15597: PPUSH
15598: CALL_OW 88
15602: GO 15628
15604: LD_INT 3
15606: DOUBLE
15607: EQUAL
15608: IFTRUE 15612
15610: GO 15627
15612: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15613: LD_EXP 43
15617: PPUSH
15618: LD_STRING DH-Visited-3
15620: PPUSH
15621: CALL_OW 88
15625: GO 15628
15627: POP
// end ;
15628: LD_VAR 0 1
15632: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15633: LD_EXP 17
15637: NOT
15638: PUSH
15639: LD_EXP 15
15643: AND
15644: PUSH
15645: LD_EXP 43
15649: PPUSH
15650: CALL_OW 255
15654: PUSH
15655: LD_INT 2
15657: EQUAL
15658: AND
15659: PUSH
15660: LD_EXP 43
15664: PPUSH
15665: CALL_OW 302
15669: AND
15670: PUSH
15671: LD_EXP 43
15675: PPUSH
15676: CALL_OW 316
15680: AND
15681: PUSH
15682: LD_EXP 30
15686: NOT
15687: AND
15688: IFFALSE 15754
15690: GO 15692
15692: DISABLE
15693: LD_INT 0
15695: PPUSH
// begin enable ;
15696: ENABLE
// for i in entranceAllowedList do
15697: LD_ADDR_VAR 0 1
15701: PUSH
15702: LD_EXP 15
15706: PUSH
15707: FOR_IN
15708: IFFALSE 15752
// if InEntrance ( Heike , i ) then
15710: LD_EXP 43
15714: PPUSH
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL 19612 0 2
15724: IFFALSE 15750
// begin disable ( entranceEvent ) ;
15726: LD_INT 1
15728: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15729: LD_VAR 0 1
15733: PPUSH
15734: CALL 15757 0 1
// wait ( 0 0$3 ) ;
15738: LD_INT 105
15740: PPUSH
15741: CALL_OW 67
// enable ( entranceEvent ) ;
15745: LD_INT 1
15747: ENABLE_MARKED
// break ;
15748: GO 15752
// end ;
15750: GO 15707
15752: POP
15753: POP
// end ;
15754: PPOPN 1
15756: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
15757: LD_INT 0
15759: PPUSH
15760: PPUSH
15761: PPUSH
15762: PPUSH
// if not building then
15763: LD_VAR 0 1
15767: NOT
15768: IFFALSE 15772
// exit ;
15770: GO 18397
// if building in entranceVisitedList then
15772: LD_VAR 0 1
15776: PUSH
15777: LD_EXP 16
15781: IN
15782: IFFALSE 15790
// begin SayHVisited ( ) ;
15784: CALL 15544 0 0
// exit ;
15788: GO 18397
// end ; case Query ( EnterBuilding ) of 1 :
15790: LD_STRING EnterBuilding
15792: PPUSH
15793: CALL_OW 97
15797: PUSH
15798: LD_INT 1
15800: DOUBLE
15801: EQUAL
15802: IFTRUE 15806
15804: GO 15809
15806: POP
// ; 2 :
15807: GO 15823
15809: LD_INT 2
15811: DOUBLE
15812: EQUAL
15813: IFTRUE 15817
15815: GO 15822
15817: POP
// exit ; end ;
15818: GO 18397
15820: GO 15823
15822: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
15823: LD_ADDR_EXP 16
15827: PUSH
15828: LD_EXP 16
15832: PPUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL 65463 0 2
15842: ST_TO_ADDR
// InGameOn ;
15843: CALL_OW 8
// SetSide ( Heike , 5 ) ;
15847: LD_EXP 43
15851: PPUSH
15852: LD_INT 5
15854: PPUSH
15855: CALL_OW 235
// SetSide ( building , 5 ) ;
15859: LD_VAR 0 1
15863: PPUSH
15864: LD_INT 5
15866: PPUSH
15867: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
15871: LD_EXP 43
15875: PPUSH
15876: LD_VAR 0 1
15880: PPUSH
15881: CALL_OW 120
// wait ( 0 0$3 ) ;
15885: LD_INT 105
15887: PPUSH
15888: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
15892: LD_ADDR_VAR 0 4
15896: PUSH
15897: LD_INT 165
15899: PUSH
15900: LD_INT 106
15902: PUSH
15903: LD_INT 135
15905: PUSH
15906: LD_INT 162
15908: PUSH
15909: LD_INT 61
15911: PUSH
15912: LD_INT 109
15914: PUSH
15915: LD_INT 169
15917: PUSH
15918: LD_INT 13
15920: PUSH
15921: LD_INT 147
15923: PUSH
15924: LD_INT 137
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: ST_TO_ADDR
// if not building in tmp then
15939: LD_VAR 0 1
15943: PUSH
15944: LD_VAR 0 4
15948: IN
15949: NOT
15950: IFFALSE 15958
// SayHEmpty ( ) else
15952: CALL 15455 0 0
15956: GO 18344
// case building of laundry :
15958: LD_VAR 0 1
15962: PUSH
15963: LD_INT 165
15965: DOUBLE
15966: EQUAL
15967: IFTRUE 15971
15969: GO 16075
15971: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
15972: LD_EXP 26
15976: PUSH
15977: LD_EXP 27
15981: NOT
15982: AND
15983: PUSH
15984: LD_EXP 28
15988: NOT
15989: AND
15990: IFFALSE 16045
// begin case Query ( HeikeInLaundry ) of 1 :
15992: LD_STRING HeikeInLaundry
15994: PPUSH
15995: CALL_OW 97
15999: PUSH
16000: LD_INT 1
16002: DOUBLE
16003: EQUAL
16004: IFTRUE 16008
16006: GO 16015
16008: POP
// SpawnHeikeAsRussian ; 2 :
16009: CALL 1785 0 0
16013: GO 16043
16015: LD_INT 2
16017: DOUBLE
16018: EQUAL
16019: IFTRUE 16023
16021: GO 16042
16023: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16024: LD_ADDR_EXP 16
16028: PUSH
16029: LD_EXP 16
16033: PUSH
16034: LD_VAR 0 1
16038: DIFF
16039: ST_TO_ADDR
16040: GO 16043
16042: POP
// end else
16043: GO 16073
// begin entranceVisitedList := entranceVisitedList diff building ;
16045: LD_ADDR_EXP 16
16049: PUSH
16050: LD_EXP 16
16054: PUSH
16055: LD_VAR 0 1
16059: DIFF
16060: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16061: LD_EXP 43
16065: PPUSH
16066: LD_STRING DH-Locked
16068: PPUSH
16069: CALL_OW 88
// end ; end ; dougBar :
16073: GO 18344
16075: LD_INT 106
16077: DOUBLE
16078: EQUAL
16079: IFTRUE 16083
16081: GO 16445
16083: POP
// begin if contactWithAmerican and americanContact then
16084: LD_EXP 25
16088: PUSH
16089: LD_EXP 10
16093: AND
16094: IFFALSE 16158
// begin Say ( Heike , DH-Escort-a-1 ) ;
16096: LD_EXP 43
16100: PPUSH
16101: LD_STRING DH-Escort-a-1
16103: PPUSH
16104: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16108: LD_EXP 57
16112: PPUSH
16113: LD_STRING DCa-Escort-a-2
16115: PPUSH
16116: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16120: LD_EXP 57
16124: PPUSH
16125: LD_STRING DCa-Escort-a-3
16127: PPUSH
16128: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16132: LD_EXP 43
16136: PPUSH
16137: LD_STRING DH-Escort-a-4
16139: PPUSH
16140: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16144: LD_EXP 43
16148: PPUSH
16149: LD_STRING DH-Escort-a-5
16151: PPUSH
16152: CALL_OW 88
// end else
16156: GO 16402
// if contactWithAmerican then
16158: LD_EXP 25
16162: IFFALSE 16202
// begin Say ( Heike , DH-Escort-b-1 ) ;
16164: LD_EXP 43
16168: PPUSH
16169: LD_STRING DH-Escort-b-1
16171: PPUSH
16172: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16176: LD_EXP 57
16180: PPUSH
16181: LD_STRING DCa-Escort-b-2
16183: PPUSH
16184: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16188: LD_EXP 57
16192: PPUSH
16193: LD_STRING DCa-Escort-b-3
16195: PPUSH
16196: CALL_OW 88
// end else
16200: GO 16402
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16202: LD_EXP 57
16206: PPUSH
16207: LD_STRING DCa-Deal-a-1
16209: PPUSH
16210: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16214: LD_EXP 57
16218: PPUSH
16219: LD_STRING DCa-Deal-a-2
16221: PPUSH
16222: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16226: LD_EXP 43
16230: PPUSH
16231: LD_STRING DH-Deal-a-3
16233: PPUSH
16234: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16238: LD_EXP 57
16242: PPUSH
16243: LD_STRING DCa-Deal-a-4
16245: PPUSH
16246: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16250: LD_EXP 43
16254: PPUSH
16255: LD_STRING DH-Deal-a-5
16257: PPUSH
16258: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16262: LD_EXP 57
16266: PPUSH
16267: LD_STRING DCa-Deal-a-6
16269: PPUSH
16270: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16274: LD_EXP 57
16278: PPUSH
16279: LD_STRING DCa-Deal-a-7
16281: PPUSH
16282: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16286: LD_EXP 57
16290: PPUSH
16291: LD_STRING DCa-Deal-a-8
16293: PPUSH
16294: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16298: LD_EXP 57
16302: PPUSH
16303: LD_STRING DCa-Deal-a-9
16305: PPUSH
16306: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16310: LD_EXP 57
16314: PPUSH
16315: LD_STRING DCa-Deal-a-10
16317: PPUSH
16318: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16322: LD_EXP 57
16326: PPUSH
16327: LD_STRING DCa-Deal-a-11
16329: PPUSH
16330: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16334: LD_INT 10
16336: PPUSH
16337: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16341: LD_EXP 57
16345: PPUSH
16346: LD_STRING DCa-Deal-a-12
16348: PPUSH
16349: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16353: LD_EXP 43
16357: PPUSH
16358: LD_STRING DH-Deal-a-13
16360: PPUSH
16361: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16365: LD_EXP 43
16369: PPUSH
16370: LD_STRING DH-Deal-a-14
16372: PPUSH
16373: CALL_OW 88
// contactWithAmerican := true ;
16377: LD_ADDR_EXP 25
16381: PUSH
16382: LD_INT 1
16384: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
16385: LD_INT 1
16387: PPUSH
16388: LD_STRING 08_DealWithDoug
16390: PPUSH
16391: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16395: LD_STRING M1-american-out
16397: PPUSH
16398: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16402: LD_EXP 57
16406: PPUSH
16407: LD_INT 2
16409: PPUSH
16410: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16414: LD_ADDR_EXP 14
16418: PUSH
16419: LD_EXP 14
16423: PPUSH
16424: LD_EXP 57
16428: PPUSH
16429: CALL 65463 0 2
16433: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16434: LD_EXP 57
16438: PPUSH
16439: CALL_OW 122
// end ; usLab :
16443: GO 18344
16445: LD_INT 135
16447: DOUBLE
16448: EQUAL
16449: IFTRUE 16453
16451: GO 16772
16453: POP
// begin if hasSniperRifle then
16454: LD_EXP 11
16458: IFFALSE 16770
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16460: LD_EXP 48
16464: PPUSH
16465: CALL_OW 302
16469: PUSH
16470: LD_EXP 48
16474: PUSH
16475: LD_EXP 14
16479: IN
16480: AND
16481: PUSH
16482: LD_EXP 48
16486: PPUSH
16487: CALL_OW 255
16491: PUSH
16492: LD_INT 2
16494: EQUAL
16495: AND
16496: IFFALSE 16744
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16498: LD_EXP 43
16502: PPUSH
16503: LD_EXP 48
16507: PPUSH
16508: CALL_OW 296
16512: PUSH
16513: LD_INT 10
16515: GREATER
16516: IFFALSE 16541
// begin Query ( KaiaDistance ) ;
16518: LD_STRING KaiaDistance
16520: PPUSH
16521: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16525: LD_ADDR_EXP 16
16529: PUSH
16530: LD_EXP 16
16534: PUSH
16535: LD_INT 135
16537: DIFF
16538: ST_TO_ADDR
// end else
16539: GO 16742
// begin SetSide ( Kaia , 5 ) ;
16541: LD_EXP 48
16545: PPUSH
16546: LD_INT 5
16548: PPUSH
16549: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16553: LD_EXP 48
16557: PPUSH
16558: LD_INT 135
16560: PPUSH
16561: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16565: LD_INT 35
16567: PPUSH
16568: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16572: LD_EXP 48
16576: PPUSH
16577: CALL_OW 310
16581: IFFALSE 16565
// Say ( Kaia , DK-Sniper-1 ) ;
16583: LD_EXP 48
16587: PPUSH
16588: LD_STRING DK-Sniper-1
16590: PPUSH
16591: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16595: LD_EXP 48
16599: PPUSH
16600: CALL_OW 257
16604: PUSH
16605: LD_INT 34
16607: EQUAL
16608: PUSH
16609: LD_EXP 45
16613: PUSH
16614: LD_EXP 14
16618: IN
16619: AND
16620: PUSH
16621: LD_EXP 45
16625: PPUSH
16626: CALL_OW 302
16630: AND
16631: IFFALSE 16662
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16633: LD_EXP 48
16637: PPUSH
16638: LD_STRING DK-Sniper-a-2
16640: PPUSH
16641: CALL_OW 88
// giveSniperRifleToMike := true ;
16645: LD_ADDR_EXP 42
16649: PUSH
16650: LD_INT 1
16652: ST_TO_ADDR
// Query ( QSniperMike ) ;
16653: LD_STRING QSniperMike
16655: PPUSH
16656: CALL_OW 97
// end else
16660: GO 16721
// begin Say ( Kaia , DK-Sniper-2 ) ;
16662: LD_EXP 48
16666: PPUSH
16667: LD_STRING DK-Sniper-2
16669: PPUSH
16670: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16674: LD_EXP 48
16678: PPUSH
16679: LD_INT 32
16681: PPUSH
16682: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16686: LD_EXP 50
16690: PPUSH
16691: CALL_OW 302
16695: PUSH
16696: LD_EXP 50
16700: PUSH
16701: LD_EXP 14
16705: IN
16706: AND
16707: IFFALSE 16721
// Say ( Markov , DMar-Sniper-3 ) ;
16709: LD_EXP 50
16713: PPUSH
16714: LD_STRING DMar-Sniper-3
16716: PPUSH
16717: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16721: LD_EXP 48
16725: PPUSH
16726: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16730: LD_EXP 48
16734: PPUSH
16735: LD_INT 2
16737: PPUSH
16738: CALL_OW 235
// end ; end else
16742: GO 16770
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16744: LD_ADDR_EXP 16
16748: PUSH
16749: LD_EXP 16
16753: PUSH
16754: LD_INT 135
16756: DIFF
16757: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16758: LD_EXP 43
16762: PPUSH
16763: LD_STRING DH-Locked
16765: PPUSH
16766: CALL_OW 88
// end ; end ; end ; drugsLab :
16770: GO 18344
16772: LD_INT 162
16774: DOUBLE
16775: EQUAL
16776: IFTRUE 16780
16778: GO 16913
16780: POP
// begin if hasStimDrugs then
16781: LD_EXP 9
16785: IFFALSE 16899
// begin wait ( 0 0$1 ) ;
16787: LD_INT 35
16789: PPUSH
16790: CALL_OW 67
// if not hasStimDrugsCollected then
16794: LD_EXP 24
16798: NOT
16799: IFFALSE 16841
// begin Say ( Heike , DH-Lab-1 ) ;
16801: LD_EXP 43
16805: PPUSH
16806: LD_STRING DH-Lab-1
16808: PPUSH
16809: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
16813: LD_INT 5
16815: PPUSH
16816: LD_INT 2
16818: PPUSH
16819: LD_INT 2
16821: PPUSH
16822: CALL_OW 322
// hasStimDrugsCollected := true ;
16826: LD_ADDR_EXP 24
16830: PUSH
16831: LD_INT 1
16833: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
16834: LD_STRING M1-drugs-out
16836: PPUSH
16837: CALL_OW 604
// end ; if not hasExplosionCollected then
16841: LD_EXP 23
16845: NOT
16846: IFFALSE 16864
// entranceVisitedList := entranceVisitedList diff drugsLab else
16848: LD_ADDR_EXP 16
16852: PUSH
16853: LD_EXP 16
16857: PUSH
16858: LD_INT 162
16860: DIFF
16861: ST_TO_ADDR
16862: GO 16897
// begin wait ( 0 0$3 ) ;
16864: LD_INT 105
16866: PPUSH
16867: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
16871: LD_EXP 43
16875: PPUSH
16876: LD_STRING DH-Lab-2
16878: PPUSH
16879: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
16883: LD_STRING M1-drugsLab-out
16885: PPUSH
16886: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
16890: LD_INT 162
16892: PPUSH
16893: CALL 19883 0 1
// end ; end else
16897: GO 16911
// Say ( Heike , DH-Locked ) ;
16899: LD_EXP 43
16903: PPUSH
16904: LD_STRING DH-Locked
16906: PPUSH
16907: CALL_OW 88
// end ; ruFac :
16911: GO 18344
16913: LD_INT 61
16915: DOUBLE
16916: EQUAL
16917: IFTRUE 16921
16919: GO 17031
16921: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
16922: LD_EXP 50
16926: PPUSH
16927: CALL_OW 302
16931: PUSH
16932: LD_EXP 50
16936: PUSH
16937: LD_EXP 14
16941: IN
16942: NOT
16943: AND
16944: IFFALSE 17025
// begin Say ( Heike , DH-Krastyo-1 ) ;
16946: LD_EXP 43
16950: PPUSH
16951: LD_STRING DH-Krastyo-1
16953: PPUSH
16954: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
16958: LD_EXP 50
16962: PPUSH
16963: LD_STRING DMar-Krastyo-2
16965: PPUSH
16966: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
16970: LD_EXP 50
16974: PPUSH
16975: LD_STRING DMar-Krastyo-3
16977: PPUSH
16978: CALL_OW 88
// SetSide ( Markov , 2 ) ;
16982: LD_EXP 50
16986: PPUSH
16987: LD_INT 2
16989: PPUSH
16990: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
16994: LD_ADDR_EXP 14
16998: PUSH
16999: LD_EXP 14
17003: PPUSH
17004: LD_EXP 50
17008: PPUSH
17009: CALL 65463 0 2
17013: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
17014: LD_EXP 50
17018: PPUSH
17019: CALL_OW 122
// end else
17023: GO 17029
// SayHEmpty ( ) ;
17025: CALL 15455 0 0
// end ; ruBarKam :
17029: GO 18344
17031: LD_INT 109
17033: DOUBLE
17034: EQUAL
17035: IFTRUE 17039
17037: GO 17186
17039: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17040: LD_EXP 47
17044: PPUSH
17045: CALL_OW 302
17049: PUSH
17050: LD_EXP 47
17054: PUSH
17055: LD_EXP 14
17059: IN
17060: NOT
17061: AND
17062: IFFALSE 17180
// begin Say ( Heike , DH-Kamil-1 ) ;
17064: LD_EXP 43
17068: PPUSH
17069: LD_STRING DH-Kamil-1
17071: PPUSH
17072: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17076: LD_EXP 47
17080: PPUSH
17081: LD_STRING DKam-Kamil-2
17083: PPUSH
17084: CALL_OW 88
// if IsOk ( Sophia ) then
17088: LD_EXP 49
17092: PPUSH
17093: CALL_OW 302
17097: IFFALSE 17137
// if Sophia in heikeSquad then
17099: LD_EXP 49
17103: PUSH
17104: LD_EXP 14
17108: IN
17109: IFFALSE 17125
// Say ( Kamil , DKam-Kamil-a-3 ) else
17111: LD_EXP 47
17115: PPUSH
17116: LD_STRING DKam-Kamil-a-3
17118: PPUSH
17119: CALL_OW 88
17123: GO 17137
// Say ( Kamil , DKam-Kamil-3 ) ;
17125: LD_EXP 47
17129: PPUSH
17130: LD_STRING DKam-Kamil-3
17132: PPUSH
17133: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17137: LD_EXP 47
17141: PPUSH
17142: LD_INT 2
17144: PPUSH
17145: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17149: LD_ADDR_EXP 14
17153: PUSH
17154: LD_EXP 14
17158: PPUSH
17159: LD_EXP 47
17163: PPUSH
17164: CALL 65463 0 2
17168: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17169: LD_EXP 47
17173: PPUSH
17174: CALL_OW 122
// end else
17178: GO 17184
// SayHEmpty ( ) ;
17180: CALL 15455 0 0
// end ; ruOutpost1 :
17184: GO 18344
17186: LD_INT 169
17188: DOUBLE
17189: EQUAL
17190: IFTRUE 17194
17192: GO 17431
17194: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17195: LD_EXP 52
17199: PPUSH
17200: CALL_OW 302
17204: PUSH
17205: LD_EXP 52
17209: PUSH
17210: LD_EXP 14
17214: IN
17215: NOT
17216: AND
17217: IFFALSE 17425
// begin if hasMethanol then
17219: LD_EXP 13
17223: IFFALSE 17354
// begin Say ( Heike , DH-Kurt-1 ) ;
17225: LD_EXP 43
17229: PPUSH
17230: LD_STRING DH-Kurt-1
17232: PPUSH
17233: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17237: LD_EXP 52
17241: PPUSH
17242: LD_STRING DKs-Kurt-2
17244: PPUSH
17245: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17249: LD_EXP 44
17253: PPUSH
17254: LD_INT 169
17256: PPUSH
17257: CALL_OW 296
17261: PUSH
17262: LD_INT 10
17264: LESS
17265: PUSH
17266: LD_EXP 44
17270: PUSH
17271: LD_EXP 14
17275: IN
17276: AND
17277: IFFALSE 17352
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17279: LD_EXP 44
17283: PPUSH
17284: LD_INT 100
17286: PPUSH
17287: LD_INT 37
17289: PPUSH
17290: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17294: LD_EXP 44
17298: PPUSH
17299: LD_INT 169
17301: PPUSH
17302: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17306: LD_INT 35
17308: PPUSH
17309: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17313: LD_EXP 44
17317: PPUSH
17318: LD_INT 169
17320: PPUSH
17321: CALL_OW 296
17325: PUSH
17326: LD_INT 7
17328: LESS
17329: IFFALSE 17306
// Say ( Givi , DG-Kurt-3 ) ;
17331: LD_EXP 44
17335: PPUSH
17336: LD_STRING DG-Kurt-3
17338: PPUSH
17339: CALL_OW 88
// ComStop ( Givi ) ;
17343: LD_EXP 44
17347: PPUSH
17348: CALL_OW 141
// end ; end else
17352: GO 17382
// begin Say ( Heike , DH-Kurt-1 ) ;
17354: LD_EXP 43
17358: PPUSH
17359: LD_STRING DH-Kurt-1
17361: PPUSH
17362: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17366: LD_EXP 52
17370: PPUSH
17371: LD_STRING DKs-Kurt-2
17373: PPUSH
17374: CALL_OW 88
// SpawnAdditionalRuGuards ;
17378: CALL 3553 0 0
// end ; SetSide ( Kurt , 2 ) ;
17382: LD_EXP 52
17386: PPUSH
17387: LD_INT 2
17389: PPUSH
17390: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17394: LD_ADDR_EXP 14
17398: PUSH
17399: LD_EXP 14
17403: PPUSH
17404: LD_EXP 52
17408: PPUSH
17409: CALL 65463 0 2
17413: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17414: LD_EXP 52
17418: PPUSH
17419: CALL_OW 122
// end else
17423: GO 17429
// SayHEmpty ( ) ;
17425: CALL 15455 0 0
// end ; ruOutpostBar :
17429: GO 18344
17431: LD_INT 13
17433: DOUBLE
17434: EQUAL
17435: IFTRUE 17439
17437: GO 17485
17439: POP
// begin if not hasGuardPatrolPlan then
17440: LD_EXP 18
17444: NOT
17445: IFFALSE 17479
// begin Say ( Heike , DH-PatrolPlan ) ;
17447: LD_EXP 43
17451: PPUSH
17452: LD_STRING DH-PatrolPlan
17454: PPUSH
17455: CALL_OW 88
// hasGuardPatrolPlan := true ;
17459: LD_ADDR_EXP 18
17463: PUSH
17464: LD_INT 1
17466: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17467: LD_INT 6
17469: PPUSH
17470: LD_INT 2
17472: PPUSH
17473: CALL_OW 343
// end else
17477: GO 17483
// SayHEmpty ( ) ;
17479: CALL 15455 0 0
// end ; ruKaiaBar :
17483: GO 18344
17485: LD_INT 147
17487: DOUBLE
17488: EQUAL
17489: IFTRUE 17493
17491: GO 17640
17493: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17494: LD_EXP 48
17498: PPUSH
17499: CALL_OW 302
17503: PUSH
17504: LD_EXP 48
17508: PUSH
17509: LD_EXP 14
17513: IN
17514: NOT
17515: AND
17516: IFFALSE 17638
// begin Say ( Heike , DH-Kaia-1 ) ;
17518: LD_EXP 43
17522: PPUSH
17523: LD_STRING DH-Kaia-1
17525: PPUSH
17526: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17530: LD_EXP 48
17534: PPUSH
17535: LD_STRING DK-Kaia-2
17537: PPUSH
17538: CALL_OW 88
// if hasSniperRifle then
17542: LD_EXP 11
17546: IFFALSE 17597
// begin if IsOk ( Markov ) then
17548: LD_EXP 50
17552: PPUSH
17553: CALL_OW 302
17557: IFFALSE 17573
// Say ( Kaia , DK-Kaia-3 ) else
17559: LD_EXP 48
17563: PPUSH
17564: LD_STRING DK-Kaia-3
17566: PPUSH
17567: CALL_OW 88
17571: GO 17585
// Say ( Kaia , DK-Kaia-a-3 ) ;
17573: LD_EXP 48
17577: PPUSH
17578: LD_STRING DK-Kaia-a-3
17580: PPUSH
17581: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17585: LD_EXP 43
17589: PPUSH
17590: LD_STRING DH-Kaia-4
17592: PPUSH
17593: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17597: LD_EXP 48
17601: PPUSH
17602: LD_INT 2
17604: PPUSH
17605: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17609: LD_ADDR_EXP 14
17613: PUSH
17614: LD_EXP 14
17618: PPUSH
17619: LD_EXP 48
17623: PPUSH
17624: CALL 65463 0 2
17628: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17629: LD_EXP 48
17633: PPUSH
17634: CALL_OW 122
// end ; end ; ruWeaponsBar :
17638: GO 18344
17640: LD_INT 137
17642: DOUBLE
17643: EQUAL
17644: IFTRUE 17648
17646: GO 18343
17648: POP
// begin if hasWeapons then
17649: LD_EXP 19
17653: IFFALSE 18329
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17655: LD_ADDR_EXP 16
17659: PUSH
17660: LD_EXP 16
17664: PUSH
17665: LD_INT 137
17667: DIFF
17668: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17669: LD_ADDR_VAR 0 4
17673: PUSH
17674: LD_EXP 14
17678: PPUSH
17679: LD_INT 91
17681: PUSH
17682: LD_EXP 43
17686: PUSH
17687: LD_INT 8
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: LIST
17694: PPUSH
17695: CALL_OW 72
17699: ST_TO_ADDR
// if not heikeSquad or not tmp then
17700: LD_EXP 14
17704: NOT
17705: PUSH
17706: LD_VAR 0 4
17710: NOT
17711: OR
17712: IFFALSE 17728
// Say ( Heike , DH-Weapons-Alone ) else
17714: LD_EXP 43
17718: PPUSH
17719: LD_STRING DH-Weapons-Alone
17721: PPUSH
17722: CALL_OW 88
17726: GO 18327
// begin if not firstArmouryDialog then
17728: LD_EXP 39
17732: NOT
17733: IFFALSE 17792
// begin Say ( Heike , DH-Weapons-1 ) ;
17735: LD_EXP 43
17739: PPUSH
17740: LD_STRING DH-Weapons-1
17742: PPUSH
17743: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17747: LD_EXP 43
17751: PPUSH
17752: LD_STRING DH-Weapons-2
17754: PPUSH
17755: CALL_OW 88
// Query ( Weapons ) ;
17759: LD_STRING Weapons
17761: PPUSH
17762: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
17766: LD_INT 65
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: CALL_OW 424
// canEquipWeapons := true ;
17776: LD_ADDR_EXP 41
17780: PUSH
17781: LD_INT 1
17783: ST_TO_ADDR
// firstArmouryDialog := true ;
17784: LD_ADDR_EXP 39
17788: PUSH
17789: LD_INT 1
17791: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
17792: LD_EXP 8
17796: PUSH
17797: LD_EXP 48
17801: PUSH
17802: LD_VAR 0 4
17806: IN
17807: AND
17808: PUSH
17809: LD_EXP 48
17813: PPUSH
17814: CALL_OW 257
17818: PUSH
17819: LD_INT 34
17821: NONEQUAL
17822: AND
17823: IFFALSE 17969
// begin SetSide ( Kaia , 5 ) ;
17825: LD_EXP 48
17829: PPUSH
17830: LD_INT 5
17832: PPUSH
17833: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
17837: LD_EXP 48
17841: PPUSH
17842: LD_INT 137
17844: PPUSH
17845: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17849: LD_INT 35
17851: PPUSH
17852: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17856: LD_EXP 48
17860: PPUSH
17861: CALL_OW 310
17865: IFFALSE 17849
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
17867: LD_EXP 43
17871: PPUSH
17872: LD_STRING DH-Kaia-Revolver-2
17874: PPUSH
17875: CALL_OW 88
// SetClassKaiaRevolver ;
17879: CALL 1754 0 0
// hasRevolver := false ;
17883: LD_ADDR_EXP 8
17887: PUSH
17888: LD_INT 0
17890: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
17891: LD_EXP 48
17895: PPUSH
17896: LD_INT 2
17898: PPUSH
17899: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
17903: LD_EXP 48
17907: PPUSH
17908: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
17912: LD_EXP 48
17916: PPUSH
17917: CALL_OW 257
17921: PUSH
17922: LD_INT 32
17924: EQUAL
17925: PUSH
17926: LD_EXP 45
17930: PUSH
17931: LD_EXP 14
17935: IN
17936: AND
17937: PUSH
17938: LD_EXP 45
17942: PPUSH
17943: CALL_OW 255
17947: PUSH
17948: LD_INT 2
17950: EQUAL
17951: AND
17952: IFFALSE 17969
// begin giveSniperRifleToMike := true ;
17954: LD_ADDR_EXP 42
17958: PUSH
17959: LD_INT 1
17961: ST_TO_ADDR
// Query ( QSniperMike ) ;
17962: LD_STRING QSniperMike
17964: PPUSH
17965: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
17969: LD_EXP 44
17973: PUSH
17974: LD_VAR 0 4
17978: IN
17979: PUSH
17980: LD_EXP 44
17984: PPUSH
17985: CALL_OW 257
17989: PUSH
17990: LD_INT 33
17992: EQUAL
17993: AND
17994: IFFALSE 18135
// begin SetSide ( Givi , 5 ) ;
17996: LD_EXP 44
18000: PPUSH
18001: LD_INT 5
18003: PPUSH
18004: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18008: LD_EXP 44
18012: PPUSH
18013: LD_INT 137
18015: PPUSH
18016: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18020: LD_INT 35
18022: PPUSH
18023: CALL_OW 67
// until IsInUnit ( Givi ) ;
18027: LD_EXP 44
18031: PPUSH
18032: CALL_OW 310
18036: IFFALSE 18020
// Say ( Givi , DG-Weapons-3 ) ;
18038: LD_EXP 44
18042: PPUSH
18043: LD_STRING DG-Weapons-3
18045: PPUSH
18046: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18050: LD_EXP 43
18054: PPUSH
18055: LD_STRING DH-Weapons-4
18057: PPUSH
18058: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18062: LD_EXP 44
18066: PPUSH
18067: LD_STRING DG-Weapons-5
18069: PPUSH
18070: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18074: LD_EXP 44
18078: PPUSH
18079: LD_INT 11
18081: PPUSH
18082: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18086: LD_EXP 44
18090: PPUSH
18091: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18095: LD_EXP 44
18099: PPUSH
18100: LD_INT 2
18102: PPUSH
18103: CALL_OW 235
// if hasRevolver then
18107: LD_EXP 8
18111: IFFALSE 18133
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18113: LD_EXP 43
18117: PPUSH
18118: LD_STRING DH-Kaia-Revolver-1
18120: PPUSH
18121: CALL_OW 88
// heikeHasRevolver := true ;
18125: LD_ADDR_EXP 20
18129: PUSH
18130: LD_INT 1
18132: ST_TO_ADDR
// end ; end else
18133: GO 18327
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18135: LD_EXP 47
18139: PUSH
18140: LD_VAR 0 4
18144: IN
18145: PUSH
18146: LD_EXP 47
18150: PPUSH
18151: CALL_OW 257
18155: PUSH
18156: LD_INT 33
18158: EQUAL
18159: AND
18160: IFFALSE 18289
// begin SetSide ( Kamil , 5 ) ;
18162: LD_EXP 47
18166: PPUSH
18167: LD_INT 5
18169: PPUSH
18170: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18174: LD_EXP 47
18178: PPUSH
18179: LD_INT 137
18181: PPUSH
18182: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18186: LD_INT 35
18188: PPUSH
18189: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18193: LD_EXP 47
18197: PPUSH
18198: CALL_OW 310
18202: IFFALSE 18186
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18204: LD_EXP 47
18208: PPUSH
18209: LD_STRING DKam-Weapons-a-3
18211: PPUSH
18212: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18216: LD_EXP 43
18220: PPUSH
18221: LD_STRING DH-Weapons-a-4
18223: PPUSH
18224: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18228: LD_EXP 47
18232: PPUSH
18233: LD_INT 11
18235: PPUSH
18236: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18240: LD_EXP 47
18244: PPUSH
18245: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18249: LD_EXP 47
18253: PPUSH
18254: LD_INT 2
18256: PPUSH
18257: CALL_OW 235
// if hasRevolver then
18261: LD_EXP 8
18265: IFFALSE 18287
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18267: LD_EXP 43
18271: PPUSH
18272: LD_STRING DH-Kaia-Revolver-1
18274: PPUSH
18275: CALL_OW 88
// heikeHasRevolver := true ;
18279: LD_ADDR_EXP 20
18283: PUSH
18284: LD_INT 1
18286: ST_TO_ADDR
// end ; end else
18287: GO 18327
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18289: LD_EXP 43
18293: PPUSH
18294: LD_STRING DH-Weapons-Alone-2
18296: PPUSH
18297: CALL_OW 88
// if hasRevolver then
18301: LD_EXP 8
18305: IFFALSE 18327
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18307: LD_EXP 43
18311: PPUSH
18312: LD_STRING DH-Kaia-Revolver-1a
18314: PPUSH
18315: CALL_OW 88
// heikeHasRevolver := true ;
18319: LD_ADDR_EXP 20
18323: PUSH
18324: LD_INT 1
18326: ST_TO_ADDR
// end ; end ; end ; end else
18327: GO 18341
// Say ( Heike , DH-Locked ) ;
18329: LD_EXP 43
18333: PPUSH
18334: LD_STRING DH-Locked
18336: PPUSH
18337: CALL_OW 88
// end ; end ;
18341: GO 18344
18343: POP
// SetSide ( building , 3 ) ;
18344: LD_VAR 0 1
18348: PPUSH
18349: LD_INT 3
18351: PPUSH
18352: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
18356: LD_VAR 0 1
18360: PPUSH
18361: CALL 19338 0 1
// wait ( 0 0$0.3 ) ;
18365: LD_INT 10
18367: PPUSH
18368: CALL_OW 67
// ComExitBuilding ( Heike ) ;
18372: LD_EXP 43
18376: PPUSH
18377: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18381: LD_EXP 43
18385: PPUSH
18386: LD_INT 2
18388: PPUSH
18389: CALL_OW 235
// InGameOff ;
18393: CALL_OW 9
// end ;
18397: LD_VAR 0 2
18401: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18402: LD_EXP 30
18406: NOT
18407: PUSH
18408: LD_EXP 17
18412: NOT
18413: AND
18414: PUSH
18415: LD_INT 22
18417: PUSH
18418: LD_INT 5
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 21
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PPUSH
18439: CALL_OW 69
18443: PUSH
18444: LD_INT 0
18446: EQUAL
18447: AND
18448: PUSH
18449: LD_INT 22
18451: PUSH
18452: LD_INT 4
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 21
18461: PUSH
18462: LD_INT 1
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PPUSH
18473: CALL_OW 69
18477: PUSH
18478: LD_INT 0
18480: EQUAL
18481: PUSH
18482: LD_EXP 25
18486: AND
18487: PUSH
18488: LD_EXP 25
18492: NOT
18493: OR
18494: AND
18495: IFFALSE 18527
18497: GO 18499
18499: DISABLE
// begin DialogueOn ;
18500: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18504: LD_EXP 43
18508: PPUSH
18509: LD_STRING DH-Alarm-2
18511: PPUSH
18512: CALL_OW 88
// DialogueOff ;
18516: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18520: LD_STRING M1-people-out
18522: PPUSH
18523: CALL_OW 337
// end ;
18527: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
18528: LD_EXP 45
18532: PPUSH
18533: CALL_OW 255
18537: PUSH
18538: LD_INT 2
18540: EQUAL
18541: PUSH
18542: LD_EXP 45
18546: PUSH
18547: LD_EXP 14
18551: IN
18552: AND
18553: PUSH
18554: LD_EXP 43
18558: PPUSH
18559: LD_EXP 45
18563: PPUSH
18564: CALL_OW 296
18568: PUSH
18569: LD_INT 6
18571: LESS
18572: AND
18573: PUSH
18574: LD_EXP 30
18578: NOT
18579: AND
18580: PUSH
18581: LD_EXP 42
18585: AND
18586: IFFALSE 18603
18588: GO 18590
18590: DISABLE
// SetClass ( Mike , class_hunter ) ;
18591: LD_EXP 45
18595: PPUSH
18596: LD_INT 32
18598: PPUSH
18599: CALL_OW 336
18603: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
18604: LD_EXP 41
18608: PUSH
18609: LD_EXP 40
18613: AND
18614: PUSH
18615: LD_INT 137
18617: PPUSH
18618: CALL_OW 255
18622: PUSH
18623: LD_INT 3
18625: EQUAL
18626: AND
18627: PUSH
18628: LD_EXP 14
18632: PPUSH
18633: LD_INT 95
18635: PUSH
18636: LD_INT 65
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 22
18645: PUSH
18646: LD_INT 2
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 25
18655: PUSH
18656: LD_INT 33
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: LIST
18667: PPUSH
18668: CALL_OW 72
18672: AND
18673: PUSH
18674: LD_INT 2
18676: PPUSH
18677: LD_INT 3
18679: PPUSH
18680: CALL_OW 81
18684: PUSH
18685: LD_INT 2
18687: EQUAL
18688: NOT
18689: AND
18690: PUSH
18691: LD_EXP 63
18695: PPUSH
18696: LD_INT 137
18698: PPUSH
18699: CALL_OW 296
18703: PUSH
18704: LD_INT 12
18706: LESS
18707: NOT
18708: AND
18709: IFFALSE 18963
18711: GO 18713
18713: DISABLE
18714: LD_INT 0
18716: PPUSH
18717: PPUSH
// begin enable ;
18718: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
18719: LD_ADDR_VAR 0 2
18723: PUSH
18724: LD_EXP 14
18728: PPUSH
18729: LD_INT 95
18731: PUSH
18732: LD_INT 65
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 22
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 25
18751: PUSH
18752: LD_INT 33
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: LIST
18763: PPUSH
18764: CALL_OW 72
18768: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
18769: LD_STRING QWeapons
18771: PPUSH
18772: CALL_OW 97
18776: PUSH
18777: LD_INT 1
18779: EQUAL
18780: IFFALSE 18963
// begin for i in tmp do
18782: LD_ADDR_VAR 0 1
18786: PUSH
18787: LD_VAR 0 2
18791: PUSH
18792: FOR_IN
18793: IFFALSE 18961
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
18795: LD_INT 137
18797: PPUSH
18798: CALL_OW 313
18802: PUSH
18803: LD_INT 6
18805: EQUAL
18806: IFFALSE 18810
// continue ;
18808: GO 18792
// SetSide ( i , 3 ) ;
18810: LD_VAR 0 1
18814: PPUSH
18815: LD_INT 3
18817: PPUSH
18818: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
18822: LD_VAR 0 1
18826: PPUSH
18827: LD_INT 137
18829: PPUSH
18830: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
18834: LD_ADDR_EXP 40
18838: PUSH
18839: LD_EXP 40
18843: PPUSH
18844: CALL 66846 0 1
18848: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
18849: LD_INT 10
18851: PPUSH
18852: CALL_OW 67
// until IsInUnit ( i ) ;
18856: LD_VAR 0 1
18860: PPUSH
18861: CALL_OW 310
18865: IFFALSE 18849
// SetClass ( i , class_soldier ) ;
18867: LD_VAR 0 1
18871: PPUSH
18872: LD_INT 1
18874: PPUSH
18875: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
18879: LD_VAR 0 1
18883: PPUSH
18884: CALL_OW 122
// wait ( 0 0$1 ) ;
18888: LD_INT 35
18890: PPUSH
18891: CALL_OW 67
// until not IsInUnit ( i ) ;
18895: LD_VAR 0 1
18899: PPUSH
18900: CALL_OW 310
18904: NOT
18905: IFFALSE 18879
// SetSide ( i , 2 ) ;
18907: LD_VAR 0 1
18911: PPUSH
18912: LD_INT 2
18914: PPUSH
18915: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
18919: LD_VAR 0 1
18923: PPUSH
18924: LD_INT 191
18926: PPUSH
18927: LD_INT 126
18929: PPUSH
18930: CALL_OW 171
// if weaponsAmount = 0 then
18934: LD_EXP 40
18938: PUSH
18939: LD_INT 0
18941: EQUAL
18942: IFFALSE 18959
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
18944: LD_INT 65
18946: PPUSH
18947: LD_INT 0
18949: PPUSH
18950: CALL_OW 424
// disable ;
18954: DISABLE
// exit ;
18955: POP
18956: POP
18957: GO 18963
// end ; end ;
18959: GO 18792
18961: POP
18962: POP
// end ; end ; end_of_file
18963: PPOPN 2
18965: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
18966: LD_VAR 0 1
18970: PUSH
18971: LD_INT 3
18973: DOUBLE
18974: EQUAL
18975: IFTRUE 18979
18977: GO 19009
18979: POP
// begin repeat wait ( 0 0$1 ) ;
18980: LD_INT 35
18982: PPUSH
18983: CALL_OW 67
// CenterOnUnits ( Heike ) ;
18987: LD_EXP 43
18991: PPUSH
18992: CALL_OW 85
// until IsDying ( Heike ) ;
18996: LD_EXP 43
19000: PPUSH
19001: CALL_OW 303
19005: IFFALSE 18980
// end ; end ;
19007: GO 19010
19009: POP
// end ;
19010: PPOPN 1
19012: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
19013: LD_OWVAR 59
19017: IFFALSE 19021
// exit ;
19019: GO 19095
// if showPlaceEvent then
19021: LD_INT 4
19023: IFFALSE 19095
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
19025: LD_VAR 0 2
19029: PPUSH
19030: LD_VAR 0 3
19034: PPUSH
19035: LD_INT 2
19037: PPUSH
19038: LD_INT 6
19040: NEG
19041: PPUSH
19042: CALL_OW 330
// CenterOnXY ( x , y ) ;
19046: LD_VAR 0 2
19050: PPUSH
19051: LD_VAR 0 3
19055: PPUSH
19056: CALL_OW 84
// wait ( time ) ;
19060: LD_VAR 0 4
19064: PPUSH
19065: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
19069: LD_EXP 43
19073: PPUSH
19074: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
19078: LD_VAR 0 2
19082: PPUSH
19083: LD_VAR 0 3
19087: PPUSH
19088: LD_INT 2
19090: PPUSH
19091: CALL_OW 331
// end ; end ;
19095: PPOPN 7
19097: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
19098: LD_VAR 0 1
19102: PUSH
19103: LD_EXP 43
19107: EQUAL
19108: PUSH
19109: LD_EXP 5
19113: AND
19114: IFFALSE 19138
// if loseCounter then
19116: LD_EXP 32
19120: IFFALSE 19131
// YouLost ( HeikeNoSurrender ) else
19122: LD_STRING HeikeNoSurrender
19124: PPUSH
19125: CALL_OW 104
19129: GO 19138
// YouLost ( Heike ) ;
19131: LD_STRING Heike
19133: PPUSH
19134: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
19138: LD_VAR 0 1
19142: PPUSH
19143: CALL_OW 255
19147: PUSH
19148: LD_INT 2
19150: EQUAL
19151: PUSH
19152: LD_VAR 0 1
19156: PPUSH
19157: CALL_OW 247
19161: PUSH
19162: LD_INT 1
19164: EQUAL
19165: AND
19166: IFFALSE 19183
// loseCounter := Inc ( loseCounter ) ;
19168: LD_ADDR_EXP 32
19172: PUSH
19173: LD_EXP 32
19177: PPUSH
19178: CALL 66824 0 1
19182: ST_TO_ADDR
// end ;
19183: PPOPN 1
19185: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
19186: LD_VAR 0 1
19190: PUSH
19191: LD_INT 2
19193: EQUAL
19194: PUSH
19195: LD_VAR 0 2
19199: PUSH
19200: LD_INT 3
19202: EQUAL
19203: AND
19204: PUSH
19205: LD_VAR 0 1
19209: PUSH
19210: LD_INT 3
19212: EQUAL
19213: PUSH
19214: LD_VAR 0 2
19218: PUSH
19219: LD_INT 2
19221: EQUAL
19222: AND
19223: OR
19224: IFFALSE 19234
// isAlarm := true ;
19226: LD_ADDR_EXP 17
19230: PUSH
19231: LD_INT 1
19233: ST_TO_ADDR
// end ; end_of_file
19234: PPOPN 2
19236: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
19237: LD_INT 0
19239: PPUSH
19240: PPUSH
19241: PPUSH
// u1 := IsInUnit ( unit1 ) ;
19242: LD_ADDR_VAR 0 4
19246: PUSH
19247: LD_VAR 0 1
19251: PPUSH
19252: CALL_OW 310
19256: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
19257: LD_ADDR_VAR 0 5
19261: PUSH
19262: LD_VAR 0 2
19266: PPUSH
19267: CALL_OW 310
19271: ST_TO_ADDR
// result := u1 and u1 = u2 ;
19272: LD_ADDR_VAR 0 3
19276: PUSH
19277: LD_VAR 0 4
19281: PUSH
19282: LD_VAR 0 4
19286: PUSH
19287: LD_VAR 0 5
19291: EQUAL
19292: AND
19293: ST_TO_ADDR
// end ;
19294: LD_VAR 0 3
19298: RET
// export function ShowPlace ( x , y , time ) ; begin
19299: LD_INT 0
19301: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
19302: LD_INT 4
19304: PPUSH
19305: LD_VAR 0 1
19309: PPUSH
19310: LD_VAR 0 2
19314: PPUSH
19315: LD_VAR 0 3
19319: PPUSH
19320: LD_INT 0
19322: PPUSH
19323: LD_INT 0
19325: PPUSH
19326: LD_INT 0
19328: PPUSH
19329: CALL_OW 595
// end ;
19333: LD_VAR 0 4
19337: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
19338: LD_INT 0
19340: PPUSH
19341: PPUSH
19342: PPUSH
19343: PPUSH
19344: PPUSH
19345: PPUSH
// if not IsOk ( building ) then
19346: LD_VAR 0 1
19350: PPUSH
19351: CALL_OW 302
19355: NOT
19356: IFFALSE 19360
// exit ;
19358: GO 19607
// x := GetX ( building ) ;
19360: LD_ADDR_VAR 0 4
19364: PUSH
19365: LD_VAR 0 1
19369: PPUSH
19370: CALL_OW 250
19374: ST_TO_ADDR
// y := GetY ( building ) ;
19375: LD_ADDR_VAR 0 5
19379: PUSH
19380: LD_VAR 0 1
19384: PPUSH
19385: CALL_OW 251
19389: ST_TO_ADDR
// d := GetDir ( building ) ;
19390: LD_ADDR_VAR 0 6
19394: PUSH
19395: LD_VAR 0 1
19399: PPUSH
19400: CALL_OW 254
19404: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
19405: LD_ADDR_VAR 0 7
19409: PUSH
19410: LD_VAR 0 4
19414: PPUSH
19415: LD_VAR 0 6
19419: PPUSH
19420: LD_INT 3
19422: PPUSH
19423: CALL_OW 272
19427: PUSH
19428: LD_VAR 0 5
19432: PPUSH
19433: LD_VAR 0 6
19437: PPUSH
19438: LD_INT 3
19440: PPUSH
19441: CALL_OW 273
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
19450: LD_VAR 0 7
19454: PUSH
19455: LD_INT 1
19457: ARRAY
19458: PPUSH
19459: LD_VAR 0 7
19463: PUSH
19464: LD_INT 2
19466: ARRAY
19467: PPUSH
19468: CALL_OW 488
19472: NOT
19473: IFFALSE 19477
// exit ;
19475: GO 19607
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
19477: LD_ADDR_VAR 0 2
19481: PUSH
19482: LD_INT 92
19484: PUSH
19485: LD_VAR 0 4
19489: PUSH
19490: LD_VAR 0 5
19494: PUSH
19495: LD_INT 4
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 3
19506: PUSH
19507: LD_INT 54
19509: PUSH
19510: EMPTY
19511: LIST
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 69
19525: ST_TO_ADDR
// if not result then
19526: LD_VAR 0 2
19530: NOT
19531: IFFALSE 19535
// exit ;
19533: GO 19607
// for i in result do
19535: LD_ADDR_VAR 0 3
19539: PUSH
19540: LD_VAR 0 2
19544: PUSH
19545: FOR_IN
19546: IFFALSE 19605
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
19548: LD_VAR 0 3
19552: PPUSH
19553: LD_VAR 0 3
19557: PPUSH
19558: CALL_OW 250
19562: PPUSH
19563: LD_VAR 0 6
19567: PPUSH
19568: LD_INT 3
19570: PPUSH
19571: CALL_OW 272
19575: PPUSH
19576: LD_VAR 0 3
19580: PPUSH
19581: CALL_OW 251
19585: PPUSH
19586: LD_VAR 0 6
19590: PPUSH
19591: LD_INT 3
19593: PPUSH
19594: CALL_OW 273
19598: PPUSH
19599: CALL_OW 111
19603: GO 19545
19605: POP
19606: POP
// end ;
19607: LD_VAR 0 2
19611: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
19612: LD_INT 0
19614: PPUSH
19615: PPUSH
19616: PPUSH
19617: PPUSH
19618: PPUSH
19619: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
19620: LD_VAR 0 1
19624: PPUSH
19625: CALL_OW 302
19629: NOT
19630: PUSH
19631: LD_VAR 0 2
19635: PPUSH
19636: CALL_OW 302
19640: NOT
19641: OR
19642: PUSH
19643: LD_VAR 0 2
19647: PPUSH
19648: CALL_OW 313
19652: PUSH
19653: LD_INT 6
19655: EQUAL
19656: OR
19657: IFFALSE 19661
// exit ;
19659: GO 19878
// btype := GetBType ( building ) ;
19661: LD_ADDR_VAR 0 8
19665: PUSH
19666: LD_VAR 0 2
19670: PPUSH
19671: CALL_OW 266
19675: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
19676: LD_VAR 0 8
19680: PUSH
19681: LD_INT 0
19683: PUSH
19684: LD_INT 1
19686: PUSH
19687: LD_INT 2
19689: PUSH
19690: LD_INT 4
19692: PUSH
19693: LD_INT 5
19695: PUSH
19696: LD_INT 3
19698: PUSH
19699: LD_INT 6
19701: PUSH
19702: LD_INT 7
19704: PUSH
19705: LD_INT 8
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: IN
19719: NOT
19720: IFFALSE 19724
// exit ;
19722: GO 19878
// x := GetX ( building ) ;
19724: LD_ADDR_VAR 0 4
19728: PUSH
19729: LD_VAR 0 2
19733: PPUSH
19734: CALL_OW 250
19738: ST_TO_ADDR
// y := GetY ( building ) ;
19739: LD_ADDR_VAR 0 5
19743: PUSH
19744: LD_VAR 0 2
19748: PPUSH
19749: CALL_OW 251
19753: ST_TO_ADDR
// d := GetDir ( building ) ;
19754: LD_ADDR_VAR 0 6
19758: PUSH
19759: LD_VAR 0 2
19763: PPUSH
19764: CALL_OW 254
19768: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
19769: LD_ADDR_VAR 0 7
19773: PUSH
19774: LD_VAR 0 4
19778: PPUSH
19779: LD_VAR 0 6
19783: PPUSH
19784: LD_INT 3
19786: PPUSH
19787: CALL_OW 272
19791: PUSH
19792: LD_VAR 0 5
19796: PPUSH
19797: LD_VAR 0 6
19801: PPUSH
19802: LD_INT 3
19804: PPUSH
19805: CALL_OW 273
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
19814: LD_VAR 0 7
19818: PUSH
19819: LD_INT 1
19821: ARRAY
19822: PPUSH
19823: LD_VAR 0 7
19827: PUSH
19828: LD_INT 2
19830: ARRAY
19831: PPUSH
19832: CALL_OW 488
19836: NOT
19837: IFFALSE 19841
// exit ;
19839: GO 19878
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
19841: LD_ADDR_VAR 0 3
19845: PUSH
19846: LD_VAR 0 1
19850: PPUSH
19851: LD_VAR 0 7
19855: PUSH
19856: LD_INT 1
19858: ARRAY
19859: PPUSH
19860: LD_VAR 0 7
19864: PUSH
19865: LD_INT 2
19867: ARRAY
19868: PPUSH
19869: CALL_OW 297
19873: PUSH
19874: LD_INT 4
19876: LESS
19877: ST_TO_ADDR
// end ;
19878: LD_VAR 0 3
19882: RET
// export function PlaceExplosives ( building ) ; begin
19883: LD_INT 0
19885: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
19886: LD_ADDR_EXP 29
19890: PUSH
19891: LD_EXP 29
19895: PPUSH
19896: LD_VAR 0 1
19900: PPUSH
19901: CALL 65463 0 2
19905: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
19906: LD_VAR 0 1
19910: PPUSH
19911: CALL_OW 250
19915: PPUSH
19916: LD_VAR 0 1
19920: PPUSH
19921: CALL_OW 251
19925: PPUSH
19926: LD_STRING PlantBomb
19928: PPUSH
19929: CALL_OW 366
// end ;
19933: LD_VAR 0 2
19937: RET
// export function CreateNature ; var i ; begin
19938: LD_INT 0
19940: PPUSH
19941: PPUSH
// PrepareFrog ;
19942: CALL 61952 0 0
// for i := 1 to 3 do
19946: LD_ADDR_VAR 0 2
19950: PUSH
19951: DOUBLE
19952: LD_INT 1
19954: DEC
19955: ST_TO_ADDR
19956: LD_INT 3
19958: PUSH
19959: FOR_TO
19960: IFFALSE 19979
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
19962: CALL_OW 44
19966: PPUSH
19967: LD_INT 24
19969: PPUSH
19970: LD_INT 0
19972: PPUSH
19973: CALL_OW 49
19977: GO 19959
19979: POP
19980: POP
// end ;
19981: LD_VAR 0 1
19985: RET
// export function MarkBuilding ( building , marker ) ; begin
19986: LD_INT 0
19988: PPUSH
// if marker then
19989: LD_VAR 0 2
19993: IFFALSE 20040
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
19995: LD_VAR 0 1
19999: PPUSH
20000: CALL_OW 250
20004: PPUSH
20005: LD_VAR 0 1
20009: PPUSH
20010: CALL_OW 251
20014: PPUSH
20015: LD_INT 2
20017: PPUSH
20018: LD_INT 3
20020: NEG
20021: PPUSH
20022: CALL_OW 330
// SetBName ( building , target ) ;
20026: LD_VAR 0 1
20030: PPUSH
20031: LD_STRING target
20033: PPUSH
20034: CALL_OW 500
// end else
20038: GO 20079
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
20040: LD_VAR 0 1
20044: PPUSH
20045: CALL_OW 250
20049: PPUSH
20050: LD_VAR 0 1
20054: PPUSH
20055: CALL_OW 251
20059: PPUSH
20060: LD_INT 2
20062: PPUSH
20063: CALL_OW 331
// SetBName ( building ,  ) ;
20067: LD_VAR 0 1
20071: PPUSH
20072: LD_STRING 
20074: PPUSH
20075: CALL_OW 500
// end ; end ; end_of_file
20079: LD_VAR 0 3
20083: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
20084: LD_INT 0
20086: PPUSH
// lockerCodeValid := false ;
20087: LD_ADDR_EXP 69
20091: PUSH
20092: LD_INT 0
20094: ST_TO_ADDR
// if not step then
20095: LD_LOC 1
20099: NOT
20100: IFFALSE 20110
// step := 1 ;
20102: LD_ADDR_LOC 1
20106: PUSH
20107: LD_INT 1
20109: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
20110: LD_STRING HEscape
20112: PUSH
20113: LD_LOC 1
20117: STR
20118: PPUSH
20119: CALL_OW 97
20123: PUSH
20124: LD_INT 1
20126: DOUBLE
20127: EQUAL
20128: IFTRUE 20132
20130: GO 20139
20132: POP
// LockerMinigameSearch ; 2 :
20133: CALL 20172 0 0
20137: GO 20155
20139: LD_INT 2
20141: DOUBLE
20142: EQUAL
20143: IFTRUE 20147
20145: GO 20154
20147: POP
// LockerMinigameSetCode ; end ;
20148: CALL 20246 0 0
20152: GO 20155
20154: POP
// if lockerCodeValid then
20155: LD_EXP 69
20159: IFFALSE 20163
// exit ;
20161: GO 20167
// StartLockerMinigame ;
20163: CALL 20084 0 0
// end ;
20167: LD_VAR 0 1
20171: RET
// function LockerMinigameSearch ; begin
20172: LD_INT 0
20174: PPUSH
// if code then
20175: LD_LOC 2
20179: IFFALSE 20195
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
20181: LD_EXP 43
20185: PPUSH
20186: LD_STRING DH-Escape-3-Hint-0
20188: PPUSH
20189: CALL_OW 88
// exit ;
20193: GO 20241
// end ; Randomize ;
20195: CALL_OW 10
// code := rand ( 1 , 5 ) ;
20199: LD_ADDR_LOC 2
20203: PUSH
20204: LD_INT 1
20206: PPUSH
20207: LD_INT 5
20209: PPUSH
20210: CALL_OW 12
20214: ST_TO_ADDR
// step := 2 ;
20215: LD_ADDR_LOC 1
20219: PUSH
20220: LD_INT 2
20222: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
20223: LD_EXP 43
20227: PPUSH
20228: LD_STRING DH-Escape-3-Hint-
20230: PUSH
20231: LD_LOC 2
20235: STR
20236: PPUSH
20237: CALL_OW 88
// end ;
20241: LD_VAR 0 1
20245: RET
// function LockerMinigameSetCode ; begin
20246: LD_INT 0
20248: PPUSH
// if not code then
20249: LD_LOC 2
20253: NOT
20254: IFFALSE 20264
// code := 0 ;
20256: LD_ADDR_LOC 2
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// lockerBusy := true ;
20264: LD_ADDR_EXP 70
20268: PUSH
20269: LD_INT 1
20271: ST_TO_ADDR
// InGameOff ;
20272: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
20276: LD_STRING initLockerMinigame("
20278: PUSH
20279: LD_LOC 2
20283: STR
20284: PUSH
20285: LD_STRING ")
20287: STR
20288: PPUSH
20289: CALL_OW 559
// step := 3 ;
20293: LD_ADDR_LOC 1
20297: PUSH
20298: LD_INT 3
20300: ST_TO_ADDR
// repeat wait ( 1 ) ;
20301: LD_INT 1
20303: PPUSH
20304: CALL_OW 67
// until not lockerBusy ;
20308: LD_EXP 70
20312: NOT
20313: IFFALSE 20301
// InGameOn ;
20315: CALL_OW 8
// if not lockerCodeValid then
20319: LD_EXP 69
20323: NOT
20324: IFFALSE 20350
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
20326: LD_EXP 43
20330: PPUSH
20331: LD_STRING DH-Escape-3-Fail-
20333: PUSH
20334: LD_INT 1
20336: PPUSH
20337: LD_INT 2
20339: PPUSH
20340: CALL_OW 12
20344: STR
20345: PPUSH
20346: CALL_OW 88
// end ; end_of_file
20350: LD_VAR 0 1
20354: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
20355: LD_VAR 0 2
20359: PUSH
20360: LD_INT 102
20362: EQUAL
20363: IFFALSE 20385
// begin lockerBusy := false ;
20365: LD_ADDR_EXP 70
20369: PUSH
20370: LD_INT 0
20372: ST_TO_ADDR
// lockerCodeValid := p3 ;
20373: LD_ADDR_EXP 69
20377: PUSH
20378: LD_VAR 0 3
20382: ST_TO_ADDR
// end else
20383: GO 20439
// if p2 = 103 then
20385: LD_VAR 0 2
20389: PUSH
20390: LD_INT 103
20392: EQUAL
20393: IFFALSE 20405
// begin weatherBusy := false ;
20395: LD_ADDR_EXP 37
20399: PUSH
20400: LD_INT 0
20402: ST_TO_ADDR
// end else
20403: GO 20439
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
20405: LD_VAR 0 1
20409: PPUSH
20410: LD_VAR 0 2
20414: PPUSH
20415: LD_VAR 0 3
20419: PPUSH
20420: LD_VAR 0 4
20424: PPUSH
20425: LD_VAR 0 5
20429: PPUSH
20430: LD_VAR 0 6
20434: PPUSH
20435: CALL 69571 0 6
// end ;
20439: PPOPN 6
20441: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
20442: LD_STRING killGameMusic();
20444: PPUSH
20445: CALL_OW 559
// SOS_MapStart ( ) ;
20449: CALL 69475 0 0
// end ; end_of_file
20453: PPOPN 1
20455: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
20456: LD_EXP 17
20460: NOT
20461: PUSH
20462: LD_EXP 68
20466: AND
20467: IFFALSE 20877
20469: GO 20471
20471: DISABLE
20472: LD_INT 0
20474: PPUSH
20475: PPUSH
20476: PPUSH
20477: PPUSH
20478: PPUSH
// begin enable ;
20479: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
20480: LD_ADDR_VAR 0 3
20484: PUSH
20485: LD_INT 26
20487: PUSH
20488: LD_INT 27
20490: PUSH
20491: LD_INT 28
20493: PUSH
20494: LD_INT 29
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 30
20505: PUSH
20506: LD_INT 31
20508: PUSH
20509: LD_INT 32
20511: PUSH
20512: LD_INT 33
20514: PUSH
20515: LD_INT 34
20517: PUSH
20518: LD_INT 35
20520: PUSH
20521: LD_INT 36
20523: PUSH
20524: LD_INT 37
20526: PUSH
20527: LD_INT 38
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 39
20543: PUSH
20544: LD_INT 40
20546: PUSH
20547: LD_INT 41
20549: PUSH
20550: LD_INT 42
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 43
20561: PUSH
20562: LD_INT 44
20564: PUSH
20565: LD_INT 45
20567: PUSH
20568: LD_INT 46
20570: PUSH
20571: LD_INT 47
20573: PUSH
20574: LD_INT 46
20576: PUSH
20577: LD_INT 45
20579: PUSH
20580: LD_INT 44
20582: PUSH
20583: LD_INT 43
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: ST_TO_ADDR
// for i in ruPatrol do
20603: LD_ADDR_VAR 0 1
20607: PUSH
20608: LD_EXP 68
20612: PUSH
20613: FOR_IN
20614: IFFALSE 20875
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
20616: LD_ADDR_VAR 0 5
20620: PUSH
20621: LD_INT 22
20623: PUSH
20624: LD_INT 2
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 21
20633: PUSH
20634: LD_INT 1
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 91
20643: PUSH
20644: LD_VAR 0 1
20648: PUSH
20649: LD_INT 7
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: LIST
20661: PPUSH
20662: CALL_OW 69
20666: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
20667: LD_INT 2
20669: PPUSH
20670: LD_VAR 0 1
20674: PPUSH
20675: CALL_OW 292
20679: PUSH
20680: LD_VAR 0 5
20684: AND
20685: IFFALSE 20761
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
20687: LD_EXP 30
20691: PUSH
20692: LD_VAR 0 1
20696: PPUSH
20697: LD_EXP 63
20701: PPUSH
20702: CALL_OW 296
20706: PUSH
20707: LD_INT 16
20709: LESS
20710: AND
20711: PUSH
20712: LD_EXP 38
20716: OR
20717: IFFALSE 20721
// continue ;
20719: GO 20613
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
20721: LD_VAR 0 1
20725: PPUSH
20726: LD_VAR 0 5
20730: PPUSH
20731: LD_VAR 0 1
20735: PPUSH
20736: CALL_OW 74
20740: PPUSH
20741: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
20745: LD_VAR 0 1
20749: PPUSH
20750: LD_VAR 0 5
20754: PPUSH
20755: CALL 20880 0 2
// continue ;
20759: GO 20613
// end ; if HasTask ( i ) then
20761: LD_VAR 0 1
20765: PPUSH
20766: CALL_OW 314
20770: IFFALSE 20774
// continue ;
20772: GO 20613
// tag := GetTag ( i ) ;
20774: LD_ADDR_VAR 0 4
20778: PUSH
20779: LD_VAR 0 1
20783: PPUSH
20784: CALL_OW 110
20788: ST_TO_ADDR
// if not tag then
20789: LD_VAR 0 4
20793: NOT
20794: IFFALSE 20807
// begin ComHold ( i ) ;
20796: LD_VAR 0 1
20800: PPUSH
20801: CALL_OW 140
// continue ;
20805: GO 20613
// end ; for j := 1 to points [ tag ] do
20807: LD_ADDR_VAR 0 2
20811: PUSH
20812: DOUBLE
20813: LD_INT 1
20815: DEC
20816: ST_TO_ADDR
20817: LD_VAR 0 3
20821: PUSH
20822: LD_VAR 0 4
20826: ARRAY
20827: PUSH
20828: FOR_TO
20829: IFFALSE 20871
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
20831: LD_VAR 0 1
20835: PPUSH
20836: LD_VAR 0 3
20840: PUSH
20841: LD_VAR 0 4
20845: ARRAY
20846: PUSH
20847: LD_VAR 0 2
20851: ARRAY
20852: PPUSH
20853: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
20857: LD_VAR 0 1
20861: PPUSH
20862: LD_INT 70
20864: PPUSH
20865: CALL_OW 202
// end ;
20869: GO 20828
20871: POP
20872: POP
// end ;
20873: GO 20613
20875: POP
20876: POP
// end ;
20877: PPOPN 5
20879: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
20880: LD_INT 0
20882: PPUSH
20883: PPUSH
20884: PPUSH
// if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
20885: LD_VAR 0 2
20889: PPUSH
20890: LD_INT 23
20892: PUSH
20893: LD_INT 3
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PPUSH
20900: CALL_OW 72
20904: PUSH
20905: LD_VAR 0 2
20909: PPUSH
20910: LD_INT 95
20912: PUSH
20913: LD_INT 61
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PPUSH
20920: CALL_OW 72
20924: OR
20925: IFFALSE 20929
// exit ;
20927: GO 22017
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
20929: LD_VAR 0 2
20933: PPUSH
20934: LD_INT 2
20936: PUSH
20937: LD_INT 25
20939: PUSH
20940: LD_INT 1
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 25
20949: PUSH
20950: LD_INT 11
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 25
20959: PUSH
20960: LD_INT 34
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 25
20969: PUSH
20970: LD_INT 32
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: PPUSH
20987: CALL_OW 72
20991: IFFALSE 21104
// begin blockPatrolThread := true ;
20993: LD_ADDR_EXP 38
20997: PUSH
20998: LD_INT 1
21000: ST_TO_ADDR
// DialogueOn ;
21001: CALL_OW 6
// case GetSex ( guard ) of sex_male :
21005: LD_VAR 0 1
21009: PPUSH
21010: CALL_OW 258
21014: PUSH
21015: LD_INT 1
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21038
21023: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21024: LD_VAR 0 1
21028: PPUSH
21029: LD_STRING DRum-Fail-3
21031: PPUSH
21032: CALL_OW 88
21036: GO 21062
21038: LD_INT 2
21040: DOUBLE
21041: EQUAL
21042: IFTRUE 21046
21044: GO 21061
21046: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
21047: LD_VAR 0 1
21051: PPUSH
21052: LD_STRING DRum-Fail-3
21054: PPUSH
21055: CALL_OW 88
21059: GO 21062
21061: POP
// DialogueOff ;
21062: CALL_OW 7
// wait ( 0 0$5 ) ;
21066: LD_INT 175
21068: PPUSH
21069: CALL_OW 67
// if IsOk ( guard ) then
21073: LD_VAR 0 1
21077: PPUSH
21078: CALL_OW 302
21082: IFFALSE 21094
// isAlarm := true else
21084: LD_ADDR_EXP 17
21088: PUSH
21089: LD_INT 1
21091: ST_TO_ADDR
21092: GO 21102
// blockPatrolThread := false ;
21094: LD_ADDR_EXP 38
21098: PUSH
21099: LD_INT 0
21101: ST_TO_ADDR
// exit ;
21102: GO 22017
// end ; DialogueOn ;
21104: CALL_OW 6
// blockPatrolThread := true ;
21108: LD_ADDR_EXP 38
21112: PUSH
21113: LD_INT 1
21115: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
21116: LD_VAR 0 1
21120: PPUSH
21121: CALL_OW 87
// if not Heike in units then
21125: LD_EXP 43
21129: PUSH
21130: LD_VAR 0 2
21134: IN
21135: NOT
21136: IFFALSE 21486
// begin case GetSex ( guard ) of sex_male :
21138: LD_VAR 0 1
21142: PPUSH
21143: CALL_OW 258
21147: PUSH
21148: LD_INT 1
21150: DOUBLE
21151: EQUAL
21152: IFTRUE 21156
21154: GO 21171
21156: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
21157: LD_VAR 0 1
21161: PPUSH
21162: LD_STRING DRum-Guard-1
21164: PPUSH
21165: CALL_OW 88
21169: GO 21195
21171: LD_INT 2
21173: DOUBLE
21174: EQUAL
21175: IFTRUE 21179
21177: GO 21194
21179: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
21180: LD_VAR 0 1
21184: PPUSH
21185: LD_STRING DRuf-Guard-1
21187: PPUSH
21188: CALL_OW 88
21192: GO 21195
21194: POP
// case Query ( SurrenderInfoPeople ) of 1 :
21195: LD_STRING SurrenderInfoPeople
21197: PPUSH
21198: CALL_OW 97
21202: PUSH
21203: LD_INT 1
21205: DOUBLE
21206: EQUAL
21207: IFTRUE 21211
21209: GO 21312
21211: POP
// begin Query ( CaughtSquadInfo ) ;
21212: LD_STRING CaughtSquadInfo
21214: PPUSH
21215: CALL_OW 97
// for i in units do
21219: LD_ADDR_VAR 0 4
21223: PUSH
21224: LD_VAR 0 2
21228: PUSH
21229: FOR_IN
21230: IFFALSE 21287
// begin if Carry ( i ) then
21232: LD_VAR 0 4
21236: PPUSH
21237: CALL_OW 281
21241: IFFALSE 21258
// SetCargo ( i , mat_cans , 0 ) ;
21243: LD_VAR 0 4
21247: PPUSH
21248: LD_INT 1
21250: PPUSH
21251: LD_INT 0
21253: PPUSH
21254: CALL_OW 290
// SetSide ( i , 5 ) ;
21258: LD_VAR 0 4
21262: PPUSH
21263: LD_INT 5
21265: PPUSH
21266: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
21270: LD_VAR 0 4
21274: PPUSH
21275: LD_INT 113
21277: PPUSH
21278: LD_INT 17
21280: PPUSH
21281: CALL_OW 111
// end ;
21285: GO 21229
21287: POP
21288: POP
// ComMoveXY ( guard , 113 , 17 ) ;
21289: LD_VAR 0 1
21293: PPUSH
21294: LD_INT 113
21296: PPUSH
21297: LD_INT 17
21299: PPUSH
21300: CALL_OW 111
// DialogueOff ;
21304: CALL_OW 7
// exit ;
21308: GO 22017
// end ; 2 :
21310: GO 21486
21312: LD_INT 2
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21485
21320: POP
// begin DialogueOff ;
21321: CALL_OW 7
// wait ( 0 0$2 ) ;
21325: LD_INT 70
21327: PPUSH
21328: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21332: LD_INT 6
21334: PPUSH
21335: LD_INT 2
21337: PPUSH
21338: LD_INT 2
21340: PPUSH
21341: LD_INT 1
21343: PPUSH
21344: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
21348: LD_VAR 0 1
21352: PPUSH
21353: LD_VAR 0 2
21357: PUSH
21358: LD_INT 1
21360: ARRAY
21361: PPUSH
21362: CALL_OW 115
// case GetSex ( guard ) of sex_male :
21366: LD_VAR 0 1
21370: PPUSH
21371: CALL_OW 258
21375: PUSH
21376: LD_INT 1
21378: DOUBLE
21379: EQUAL
21380: IFTRUE 21384
21382: GO 21399
21384: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21385: LD_VAR 0 1
21389: PPUSH
21390: LD_STRING DRum-Fail-3
21392: PPUSH
21393: CALL_OW 88
21397: GO 21423
21399: LD_INT 2
21401: DOUBLE
21402: EQUAL
21403: IFTRUE 21407
21405: GO 21422
21407: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
21408: LD_VAR 0 1
21412: PPUSH
21413: LD_STRING DRum-Fail-3
21415: PPUSH
21416: CALL_OW 88
21420: GO 21423
21422: POP
// wait ( 0 0$5 ) ;
21423: LD_INT 175
21425: PPUSH
21426: CALL_OW 67
// if IsOk ( guard ) then
21430: LD_VAR 0 1
21434: PPUSH
21435: CALL_OW 302
21439: IFFALSE 21451
// isAlarm := true else
21441: LD_ADDR_EXP 17
21445: PUSH
21446: LD_INT 1
21448: ST_TO_ADDR
21449: GO 21483
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
21451: LD_INT 6
21453: PPUSH
21454: LD_INT 2
21456: PPUSH
21457: LD_INT 0
21459: PPUSH
21460: LD_INT 1
21462: PPUSH
21463: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
21467: LD_INT 3
21469: PPUSH
21470: LD_INT 2
21472: PPUSH
21473: LD_INT 0
21475: PPUSH
21476: LD_INT 1
21478: PPUSH
21479: CALL_OW 80
// end ; end ; end ;
21483: GO 21486
21485: POP
// end ; if Carry ( Heike ) then
21486: LD_EXP 43
21490: PPUSH
21491: CALL_OW 281
21495: IFFALSE 21571
// begin case GetSex ( guard ) of sex_male :
21497: LD_VAR 0 1
21501: PPUSH
21502: CALL_OW 258
21506: PUSH
21507: LD_INT 1
21509: DOUBLE
21510: EQUAL
21511: IFTRUE 21515
21513: GO 21530
21515: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
21516: LD_VAR 0 1
21520: PPUSH
21521: LD_STRING DRum-FoodFail-1
21523: PPUSH
21524: CALL_OW 88
21528: GO 21554
21530: LD_INT 2
21532: DOUBLE
21533: EQUAL
21534: IFTRUE 21538
21536: GO 21553
21538: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
21539: LD_VAR 0 1
21543: PPUSH
21544: LD_STRING DRuf-FoodFail-2
21546: PPUSH
21547: CALL_OW 88
21551: GO 21554
21553: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
21554: LD_EXP 43
21558: PPUSH
21559: LD_INT 1
21561: PPUSH
21562: LD_INT 0
21564: PPUSH
21565: CALL_OW 290
// end else
21569: GO 21628
// begin case GetSex ( guard ) of sex_male :
21571: LD_VAR 0 1
21575: PPUSH
21576: CALL_OW 258
21580: PUSH
21581: LD_INT 1
21583: DOUBLE
21584: EQUAL
21585: IFTRUE 21589
21587: GO 21604
21589: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
21590: LD_VAR 0 1
21594: PPUSH
21595: LD_STRING DRum-Seen-1
21597: PPUSH
21598: CALL_OW 88
21602: GO 21628
21604: LD_INT 2
21606: DOUBLE
21607: EQUAL
21608: IFTRUE 21612
21610: GO 21627
21612: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
21613: LD_VAR 0 1
21617: PPUSH
21618: LD_STRING DRuf-Seen-1
21620: PPUSH
21621: CALL_OW 88
21625: GO 21628
21627: POP
// end ; alone := ( units = 1 ) ;
21628: LD_ADDR_VAR 0 5
21632: PUSH
21633: LD_VAR 0 2
21637: PUSH
21638: LD_INT 1
21640: EQUAL
21641: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
21642: LD_STRING SurrenderInfo
21644: PPUSH
21645: CALL_OW 97
21649: PUSH
21650: LD_INT 1
21652: DOUBLE
21653: EQUAL
21654: IFTRUE 21658
21656: GO 21827
21658: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
21659: LD_INT 23
21661: PPUSH
21662: CALL_OW 87
// RemoveUnit ( Heike ) ;
21666: LD_EXP 43
21670: PPUSH
21671: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
21675: LD_EXP 43
21679: PPUSH
21680: LD_INT 23
21682: PPUSH
21683: CALL_OW 52
// if not alone then
21687: LD_VAR 0 5
21691: NOT
21692: IFFALSE 21747
// for i in units diff Heike do
21694: LD_ADDR_VAR 0 4
21698: PUSH
21699: LD_VAR 0 2
21703: PUSH
21704: LD_EXP 43
21708: DIFF
21709: PUSH
21710: FOR_IN
21711: IFFALSE 21745
// begin RemoveUnit ( i ) ;
21713: LD_VAR 0 4
21717: PPUSH
21718: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
21722: LD_VAR 0 4
21726: PPUSH
21727: LD_INT 114
21729: PPUSH
21730: LD_INT 17
21732: PPUSH
21733: LD_INT 10
21735: PPUSH
21736: LD_INT 0
21738: PPUSH
21739: CALL_OW 50
// end ;
21743: GO 21710
21745: POP
21746: POP
// wait ( 0 0$0.3 ) ;
21747: LD_INT 10
21749: PPUSH
21750: CALL_OW 67
// if alone then
21754: LD_VAR 0 5
21758: IFFALSE 21769
// Query ( CaughtInfoAlone ) else
21760: LD_STRING CaughtInfoAlone
21762: PPUSH
21763: CALL_OW 97
21767: GO 21776
// Query ( CaughtInfo ) ;
21769: LD_STRING CaughtInfo
21771: PPUSH
21772: CALL_OW 97
// wait ( 0 0$1 ) ;
21776: LD_INT 35
21778: PPUSH
21779: CALL_OW 67
// StartLockerMinigame ;
21783: CALL 20084 0 0
// Say ( Heike , DH-Reset ) ;
21787: LD_EXP 43
21791: PPUSH
21792: LD_STRING DH-Reset
21794: PPUSH
21795: CALL_OW 88
// DialogueOff ;
21799: CALL_OW 7
// InGameOff ;
21803: CALL_OW 9
// ComExitBuilding ( Heike ) ;
21807: LD_EXP 43
21811: PPUSH
21812: CALL_OW 122
// ComFree ( guard ) ;
21816: LD_VAR 0 1
21820: PPUSH
21821: CALL_OW 139
// end ; 2 :
21825: GO 22009
21827: LD_INT 2
21829: DOUBLE
21830: EQUAL
21831: IFTRUE 21835
21833: GO 22008
21835: POP
// begin Say ( Heike , DH-Guard-2 ) ;
21836: LD_EXP 43
21840: PPUSH
21841: LD_STRING DH-Guard-2
21843: PPUSH
21844: CALL_OW 88
// DialogueOff ;
21848: CALL_OW 7
// wait ( 0 0$2 ) ;
21852: LD_INT 70
21854: PPUSH
21855: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21859: LD_INT 6
21861: PPUSH
21862: LD_INT 2
21864: PPUSH
21865: LD_INT 2
21867: PPUSH
21868: LD_INT 1
21870: PPUSH
21871: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
21875: LD_VAR 0 1
21879: PPUSH
21880: LD_EXP 43
21884: PPUSH
21885: CALL_OW 115
// case GetSex ( guard ) of sex_male :
21889: LD_VAR 0 1
21893: PPUSH
21894: CALL_OW 258
21898: PUSH
21899: LD_INT 1
21901: DOUBLE
21902: EQUAL
21903: IFTRUE 21907
21905: GO 21922
21907: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21908: LD_VAR 0 1
21912: PPUSH
21913: LD_STRING DRum-Fail-3
21915: PPUSH
21916: CALL_OW 88
21920: GO 21946
21922: LD_INT 2
21924: DOUBLE
21925: EQUAL
21926: IFTRUE 21930
21928: GO 21945
21930: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
21931: LD_VAR 0 1
21935: PPUSH
21936: LD_STRING DRum-Fail-3
21938: PPUSH
21939: CALL_OW 88
21943: GO 21946
21945: POP
// wait ( 0 0$5 ) ;
21946: LD_INT 175
21948: PPUSH
21949: CALL_OW 67
// if IsOk ( guard ) then
21953: LD_VAR 0 1
21957: PPUSH
21958: CALL_OW 302
21962: IFFALSE 21974
// isAlarm := true else
21964: LD_ADDR_EXP 17
21968: PUSH
21969: LD_INT 1
21971: ST_TO_ADDR
21972: GO 22006
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
21974: LD_INT 6
21976: PPUSH
21977: LD_INT 2
21979: PPUSH
21980: LD_INT 0
21982: PPUSH
21983: LD_INT 1
21985: PPUSH
21986: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
21990: LD_INT 3
21992: PPUSH
21993: LD_INT 2
21995: PPUSH
21996: LD_INT 0
21998: PPUSH
21999: LD_INT 1
22001: PPUSH
22002: CALL_OW 80
// end ; end ; end ;
22006: GO 22009
22008: POP
// blockPatrolThread := false ;
22009: LD_ADDR_EXP 38
22013: PUSH
22014: LD_INT 0
22016: ST_TO_ADDR
// end ;
22017: LD_VAR 0 3
22021: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
22022: LD_EXP 14
22026: PPUSH
22027: LD_INT 22
22029: PUSH
22030: LD_INT 5
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 3
22039: PUSH
22040: LD_INT 101
22042: PUSH
22043: LD_INT 6
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 92
22056: PUSH
22057: LD_INT 113
22059: PUSH
22060: LD_INT 16
22062: PUSH
22063: LD_INT 12
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 91
22074: PUSH
22075: LD_EXP 43
22079: PUSH
22080: LD_INT 6
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: LIST
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: PPUSH
22094: CALL_OW 72
22098: PUSH
22099: LD_EXP 30
22103: NOT
22104: AND
22105: IFFALSE 22210
22107: GO 22109
22109: DISABLE
22110: LD_INT 0
22112: PPUSH
// begin enable ;
22113: ENABLE
// DialogueOn ;
22114: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
22118: LD_EXP 43
22122: PPUSH
22123: LD_STRING DH-Join-
22125: PUSH
22126: LD_INT 1
22128: PPUSH
22129: LD_INT 3
22131: PPUSH
22132: CALL_OW 12
22136: STR
22137: PPUSH
22138: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
22142: LD_ADDR_VAR 0 1
22146: PUSH
22147: LD_EXP 14
22151: PPUSH
22152: LD_INT 22
22154: PUSH
22155: LD_INT 5
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 91
22164: PUSH
22165: LD_EXP 43
22169: PUSH
22170: LD_INT 10
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PPUSH
22182: CALL_OW 72
22186: PUSH
22187: FOR_IN
22188: IFFALSE 22204
// SetSide ( i , 2 ) ;
22190: LD_VAR 0 1
22194: PPUSH
22195: LD_INT 2
22197: PPUSH
22198: CALL_OW 235
22202: GO 22187
22204: POP
22205: POP
// DialogueOff ;
22206: CALL_OW 7
// end ; end_of_file
22210: PPOPN 1
22212: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
22213: LD_EXP 17
22217: PUSH
22218: LD_EXP 5
22222: AND
22223: IFFALSE 22524
22225: GO 22227
22227: DISABLE
22228: LD_INT 0
22230: PPUSH
22231: PPUSH
22232: PPUSH
// begin DialogueOn ;
22233: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
22237: LD_EXP 43
22241: PPUSH
22242: LD_STRING DH-Alarm-1
22244: PPUSH
22245: CALL_OW 88
// DialogueOff ;
22249: CALL_OW 7
// PlaySoundXY ( - 1 , - 1 , alarm ) ;
22253: LD_INT 1
22255: NEG
22256: PPUSH
22257: LD_INT 1
22259: NEG
22260: PPUSH
22261: LD_STRING alarm
22263: PPUSH
22264: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
22268: LD_INT 3
22270: PPUSH
22271: LD_INT 2
22273: PPUSH
22274: LD_INT 2
22276: PPUSH
22277: LD_INT 1
22279: PPUSH
22280: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22284: LD_INT 6
22286: PPUSH
22287: LD_INT 2
22289: PPUSH
22290: LD_INT 2
22292: PPUSH
22293: LD_INT 1
22295: PPUSH
22296: CALL_OW 80
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
22300: LD_ADDR_VAR 0 2
22304: PUSH
22305: LD_INT 107
22307: PUSH
22308: LD_INT 39
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 143
22317: PUSH
22318: LD_INT 33
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 180
22327: PUSH
22328: LD_INT 115
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 96
22337: PUSH
22338: LD_INT 90
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 59
22347: PUSH
22348: LD_INT 52
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 16
22357: PUSH
22358: LD_INT 15
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 90
22367: PUSH
22368: LD_INT 120
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
22384: LD_ADDR_VAR 0 3
22388: PUSH
22389: LD_INT 22
22391: PUSH
22392: LD_INT 6
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 25
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PPUSH
22413: CALL_OW 69
22417: ST_TO_ADDR
// for i in tmp do
22418: LD_ADDR_VAR 0 1
22422: PUSH
22423: LD_VAR 0 3
22427: PUSH
22428: FOR_IN
22429: IFFALSE 22497
// begin ComExit ( i ) ;
22431: LD_VAR 0 1
22435: PPUSH
22436: CALL 65861 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
22440: LD_VAR 0 1
22444: PPUSH
22445: LD_VAR 0 2
22449: PUSH
22450: LD_VAR 0 1
22454: PUSH
22455: LD_INT 7
22457: MOD
22458: PUSH
22459: LD_INT 1
22461: PLUS
22462: ARRAY
22463: PUSH
22464: LD_INT 1
22466: ARRAY
22467: PPUSH
22468: LD_VAR 0 2
22472: PUSH
22473: LD_VAR 0 1
22477: PUSH
22478: LD_INT 7
22480: MOD
22481: PUSH
22482: LD_INT 1
22484: PLUS
22485: ARRAY
22486: PUSH
22487: LD_INT 2
22489: ARRAY
22490: PPUSH
22491: CALL_OW 174
// end ;
22495: GO 22428
22497: POP
22498: POP
// Explode ;
22499: CALL 22527 0 0
// wait ( 0 0$45 ) ;
22503: LD_INT 1575
22505: PPUSH
22506: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
22510: LD_VAR 0 3
22514: PPUSH
22515: LD_EXP 43
22519: PPUSH
22520: CALL_OW 175
// end ;
22524: PPOPN 3
22526: END
// export function Explode ; var i , x , y , j ; begin
22527: LD_INT 0
22529: PPUSH
22530: PPUSH
22531: PPUSH
22532: PPUSH
22533: PPUSH
// if hasExplosionsInFactory then
22534: LD_EXP 7
22538: IFFALSE 22558
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
22540: LD_ADDR_EXP 29
22544: PUSH
22545: LD_EXP 29
22549: PPUSH
22550: LD_INT 61
22552: PPUSH
22553: CALL 65463 0 2
22557: ST_TO_ADDR
// if explosivePlantedList then
22558: LD_EXP 29
22562: IFFALSE 22710
// begin for i in explosivePlantedList do
22564: LD_ADDR_VAR 0 2
22568: PUSH
22569: LD_EXP 29
22573: PUSH
22574: FOR_IN
22575: IFFALSE 22678
// begin x := GetX ( i ) ;
22577: LD_ADDR_VAR 0 3
22581: PUSH
22582: LD_VAR 0 2
22586: PPUSH
22587: CALL_OW 250
22591: ST_TO_ADDR
// y := GetY ( i ) ;
22592: LD_ADDR_VAR 0 4
22596: PUSH
22597: LD_VAR 0 2
22601: PPUSH
22602: CALL_OW 251
22606: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
22607: LD_ADDR_VAR 0 5
22611: PUSH
22612: LD_INT 1
22614: PUSH
22615: LD_INT 3
22617: PUSH
22618: LD_INT 5
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: PUSH
22626: FOR_IN
22627: IFFALSE 22674
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
22629: LD_VAR 0 3
22633: PPUSH
22634: LD_VAR 0 5
22638: PPUSH
22639: LD_INT 2
22641: PPUSH
22642: CALL_OW 272
22646: PPUSH
22647: LD_VAR 0 4
22651: PPUSH
22652: LD_VAR 0 5
22656: PPUSH
22657: LD_INT 2
22659: PPUSH
22660: CALL_OW 273
22664: PPUSH
22665: LD_INT 1
22667: PPUSH
22668: CALL_OW 453
22672: GO 22626
22674: POP
22675: POP
// end ;
22676: GO 22574
22678: POP
22679: POP
// Say ( Heike , DH-End-2 ) ;
22680: LD_EXP 43
22684: PPUSH
22685: LD_STRING DH-End-2
22687: PPUSH
22688: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
22692: LD_INT 175
22694: PUSH
22695: LD_EXP 29
22699: PPUSH
22700: CALL 30097 0 1
22704: MUL
22705: PPUSH
22706: CALL_OW 67
// end ; if not isAlarm then
22710: LD_EXP 17
22714: NOT
22715: IFFALSE 22725
// isAlarm := true ;
22717: LD_ADDR_EXP 17
22721: PUSH
22722: LD_INT 1
22724: ST_TO_ADDR
// end ;
22725: LD_VAR 0 1
22729: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
22730: LD_INT 22
22732: PUSH
22733: LD_INT 2
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 21
22742: PUSH
22743: LD_INT 2
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 2
22752: PUSH
22753: LD_INT 101
22755: PUSH
22756: LD_INT 3
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 101
22765: PUSH
22766: LD_INT 6
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: LIST
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: LIST
22782: PPUSH
22783: CALL_OW 69
22787: IFFALSE 22800
22789: GO 22791
22791: DISABLE
// isAlarm := true ; end_of_file
22792: LD_ADDR_EXP 17
22796: PUSH
22797: LD_INT 1
22799: ST_TO_ADDR
22800: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
22801: LD_EXP 14
22805: PPUSH
22806: LD_INT 22
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PPUSH
22816: CALL_OW 72
22820: PUSH
22821: LD_INT 3
22823: GREATER
22824: PUSH
22825: LD_EXP 17
22829: NOT
22830: AND
22831: IFFALSE 26705
22833: GO 22835
22835: DISABLE
22836: LD_INT 0
22838: PPUSH
22839: PPUSH
22840: PPUSH
22841: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
22842: LD_EXP 63
22846: PPUSH
22847: LD_INT 155
22849: PPUSH
22850: LD_INT 68
22852: PPUSH
22853: LD_INT 0
22855: PPUSH
22856: CALL_OW 48
// wait ( 0 0$1 ) ;
22860: LD_INT 35
22862: PPUSH
22863: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22867: LD_INT 35
22869: PPUSH
22870: CALL_OW 67
// if not HasTask ( ruDisturb ) then
22874: LD_EXP 63
22878: PPUSH
22879: CALL_OW 314
22883: NOT
22884: IFFALSE 22900
// ComMoveUnit ( ruDisturb , Heike ) ;
22886: LD_EXP 63
22890: PPUSH
22891: LD_EXP 43
22895: PPUSH
22896: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
22900: LD_EXP 43
22904: PPUSH
22905: LD_EXP 63
22909: PPUSH
22910: CALL_OW 296
22914: PUSH
22915: LD_INT 6
22917: LESS
22918: PUSH
22919: LD_EXP 63
22923: PPUSH
22924: CALL_OW 302
22928: AND
22929: IFFALSE 22867
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22931: LD_EXP 14
22935: PPUSH
22936: LD_INT 22
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 91
22948: PUSH
22949: LD_EXP 63
22953: PUSH
22954: LD_INT 8
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: LD_INT 25
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 25
22977: PUSH
22978: LD_INT 11
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 25
22987: PUSH
22988: LD_INT 32
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 25
22997: PUSH
22998: LD_INT 34
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: LIST
23016: PPUSH
23017: CALL_OW 72
23021: IFFALSE 23031
// isAlarm := true ;
23023: LD_ADDR_EXP 17
23027: PUSH
23028: LD_INT 1
23030: ST_TO_ADDR
// if isAlarm then
23031: LD_EXP 17
23035: IFFALSE 23039
// exit ;
23037: GO 26705
// DialogueOn ;
23039: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23043: LD_EXP 63
23047: PPUSH
23048: LD_STRING DMcn-Interrupt-1
23050: PPUSH
23051: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23055: LD_EXP 63
23059: PPUSH
23060: LD_STRING DMcn-Interrupt-2
23062: PPUSH
23063: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
23067: LD_EXP 63
23071: PPUSH
23072: LD_STRING DMcn-Interrupt-3
23074: PPUSH
23075: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
23079: LD_EXP 43
23083: PPUSH
23084: LD_STRING DH-Interrupt-a-4
23086: PPUSH
23087: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
23091: LD_EXP 63
23095: PPUSH
23096: LD_STRING DMcn-Interrupt-a-5
23098: PPUSH
23099: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
23103: LD_EXP 43
23107: PPUSH
23108: LD_STRING DH-Interrupt-a-6
23110: PPUSH
23111: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
23115: LD_EXP 63
23119: PPUSH
23120: LD_STRING DMcn-Interrupt-a-7
23122: PPUSH
23123: CALL_OW 88
// DialogueOff ;
23127: CALL_OW 7
// hasMuchin := true ;
23131: LD_ADDR_EXP 30
23135: PUSH
23136: LD_INT 1
23138: ST_TO_ADDR
// Query ( MuchinInfo ) ;
23139: LD_STRING MuchinInfo
23141: PPUSH
23142: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
23146: LD_STRING M2a
23148: PPUSH
23149: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
23153: LD_INT 105
23155: PPUSH
23156: LD_INT 55
23158: PPUSH
23159: CALL_OW 428
23163: PPUSH
23164: LD_INT 2
23166: PPUSH
23167: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
23171: LD_INT 115
23173: PPUSH
23174: LD_INT 65
23176: PPUSH
23177: CALL_OW 428
23181: PPUSH
23182: LD_INT 2
23184: PPUSH
23185: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
23189: LD_INT 109
23191: PPUSH
23192: LD_INT 59
23194: PPUSH
23195: LD_INT 2
23197: PPUSH
23198: LD_INT 10
23200: NEG
23201: PPUSH
23202: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
23206: LD_INT 109
23208: PPUSH
23209: LD_INT 59
23211: PPUSH
23212: CALL_OW 84
// wait ( 0 0$2 ) ;
23216: LD_INT 70
23218: PPUSH
23219: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
23223: LD_INT 109
23225: PPUSH
23226: LD_INT 59
23228: PPUSH
23229: LD_INT 2
23231: PPUSH
23232: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
23236: LD_INT 35
23238: PPUSH
23239: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
23243: LD_EXP 63
23247: PPUSH
23248: LD_EXP 43
23252: PPUSH
23253: CALL_OW 296
23257: PUSH
23258: LD_INT 6
23260: GREATER
23261: IFFALSE 23277
// ComMoveUnit ( ruDisturb , Heike ) ;
23263: LD_EXP 63
23267: PPUSH
23268: LD_EXP 43
23272: PPUSH
23273: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23277: LD_EXP 14
23281: PPUSH
23282: LD_INT 22
23284: PUSH
23285: LD_INT 2
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 91
23294: PUSH
23295: LD_EXP 63
23299: PUSH
23300: LD_INT 8
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: LD_INT 25
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 25
23323: PUSH
23324: LD_INT 11
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 25
23333: PUSH
23334: LD_INT 32
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 25
23343: PUSH
23344: LD_INT 34
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: PPUSH
23363: CALL_OW 72
23367: IFFALSE 23379
// begin isAlarm := true ;
23369: LD_ADDR_EXP 17
23373: PUSH
23374: LD_INT 1
23376: ST_TO_ADDR
// exit ;
23377: GO 26705
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
23379: LD_INT 105
23381: PPUSH
23382: LD_INT 55
23384: PPUSH
23385: CALL_OW 428
23389: NOT
23390: PUSH
23391: LD_INT 115
23393: PPUSH
23394: LD_INT 65
23396: PPUSH
23397: CALL_OW 428
23401: NOT
23402: OR
23403: IFFALSE 23415
// begin isAlarm := true ;
23405: LD_ADDR_EXP 17
23409: PUSH
23410: LD_INT 1
23412: ST_TO_ADDR
// exit ;
23413: GO 26705
// end ; until not BuildingsInProgress ( 2 ) ;
23415: LD_INT 2
23417: PPUSH
23418: CALL_OW 345
23422: NOT
23423: IFFALSE 23236
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
23425: LD_INT 105
23427: PPUSH
23428: LD_INT 55
23430: PPUSH
23431: CALL_OW 428
23435: PPUSH
23436: LD_INT 3
23438: PPUSH
23439: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
23443: LD_INT 115
23445: PPUSH
23446: LD_INT 65
23448: PPUSH
23449: CALL_OW 428
23453: PPUSH
23454: LD_INT 3
23456: PPUSH
23457: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
23461: LD_STRING M2a-out
23463: PPUSH
23464: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
23468: LD_EXP 63
23472: PPUSH
23473: LD_INT 2
23475: PPUSH
23476: CALL_OW 120
// wait ( 0 0$3 ) ;
23480: LD_INT 105
23482: PPUSH
23483: CALL_OW 67
// hasMuchin := false ;
23487: LD_ADDR_EXP 30
23491: PUSH
23492: LD_INT 0
23494: ST_TO_ADDR
// wait ( 2 2$00 ) ;
23495: LD_INT 4200
23497: PPUSH
23498: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23502: LD_INT 35
23504: PPUSH
23505: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23509: LD_EXP 63
23513: PPUSH
23514: CALL_OW 314
23518: NOT
23519: IFFALSE 23535
// ComMoveUnit ( ruDisturb , Heike ) ;
23521: LD_EXP 63
23525: PPUSH
23526: LD_EXP 43
23530: PPUSH
23531: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
23535: LD_EXP 43
23539: PPUSH
23540: LD_EXP 63
23544: PPUSH
23545: CALL_OW 296
23549: PUSH
23550: LD_INT 6
23552: LESS
23553: PUSH
23554: LD_EXP 63
23558: PPUSH
23559: CALL_OW 302
23563: AND
23564: IFFALSE 23502
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23566: LD_EXP 14
23570: PPUSH
23571: LD_INT 22
23573: PUSH
23574: LD_INT 2
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 91
23583: PUSH
23584: LD_EXP 63
23588: PUSH
23589: LD_INT 8
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 2
23599: PUSH
23600: LD_INT 25
23602: PUSH
23603: LD_INT 1
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 25
23612: PUSH
23613: LD_INT 11
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 25
23622: PUSH
23623: LD_INT 32
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 25
23632: PUSH
23633: LD_INT 34
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: LIST
23651: PPUSH
23652: CALL_OW 72
23656: IFFALSE 23666
// isAlarm := true ;
23658: LD_ADDR_EXP 17
23662: PUSH
23663: LD_INT 1
23665: ST_TO_ADDR
// if isAlarm then
23666: LD_EXP 17
23670: IFFALSE 23674
// exit ;
23672: GO 26705
// DialogueOn ;
23674: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23678: LD_EXP 63
23682: PPUSH
23683: LD_STRING DMcn-Interrupt-1
23685: PPUSH
23686: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23690: LD_EXP 63
23694: PPUSH
23695: LD_STRING DMcn-Interrupt-2
23697: PPUSH
23698: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
23702: LD_INT 176
23704: PPUSH
23705: LD_INT 54
23707: PPUSH
23708: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
23712: LD_INT 176
23714: PPUSH
23715: LD_INT 54
23717: PPUSH
23718: LD_INT 2
23720: PPUSH
23721: LD_INT 6
23723: NEG
23724: PPUSH
23725: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
23729: LD_INT 10
23731: PPUSH
23732: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
23736: LD_EXP 63
23740: PPUSH
23741: LD_STRING DMcn-Interrupt-b-3
23743: PPUSH
23744: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
23748: LD_EXP 43
23752: PPUSH
23753: LD_STRING DH-Interrupt-b-4
23755: PPUSH
23756: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
23760: LD_EXP 63
23764: PPUSH
23765: LD_STRING DMcn-Interrupt-b-5
23767: PPUSH
23768: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
23772: LD_EXP 43
23776: PPUSH
23777: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
23781: LD_INT 176
23783: PPUSH
23784: LD_INT 54
23786: PPUSH
23787: LD_INT 2
23789: PPUSH
23790: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
23794: LD_EXP 63
23798: PPUSH
23799: LD_STRING DMcn-Interrupt-b-6
23801: PPUSH
23802: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
23806: LD_EXP 43
23810: PPUSH
23811: LD_STRING DH-Interrupt-b-7
23813: PPUSH
23814: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
23818: LD_EXP 63
23822: PPUSH
23823: LD_STRING DMcn-Interrupt-b-8
23825: PPUSH
23826: CALL_OW 88
// DialogueOff ;
23830: CALL_OW 7
// Query ( MuchinInfo ) ;
23834: LD_STRING MuchinInfo
23836: PPUSH
23837: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
23841: LD_STRING M2b
23843: PPUSH
23844: CALL_OW 337
// hasMuchin := true ;
23848: LD_ADDR_EXP 30
23852: PUSH
23853: LD_INT 1
23855: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23856: LD_INT 35
23858: PPUSH
23859: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
23863: LD_EXP 63
23867: PPUSH
23868: LD_EXP 43
23872: PPUSH
23873: CALL_OW 296
23877: PUSH
23878: LD_INT 6
23880: GREATER
23881: IFFALSE 23897
// ComMoveUnit ( ruDisturb , Heike ) ;
23883: LD_EXP 63
23887: PPUSH
23888: LD_EXP 43
23892: PPUSH
23893: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23897: LD_EXP 14
23901: PPUSH
23902: LD_INT 22
23904: PUSH
23905: LD_INT 2
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 91
23914: PUSH
23915: LD_EXP 63
23919: PUSH
23920: LD_INT 8
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: LD_INT 25
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 25
23943: PUSH
23944: LD_INT 11
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 25
23953: PUSH
23954: LD_INT 32
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 25
23963: PUSH
23964: LD_INT 34
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: LIST
23982: PPUSH
23983: CALL_OW 72
23987: IFFALSE 23999
// begin isAlarm := true ;
23989: LD_ADDR_EXP 17
23993: PUSH
23994: LD_INT 1
23996: ST_TO_ADDR
// exit ;
23997: GO 26705
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
23999: LD_EXP 43
24003: PPUSH
24004: LD_INT 61
24006: PPUSH
24007: CALL_OW 296
24011: PUSH
24012: LD_INT 4
24014: LESS
24015: IFFALSE 23856
// InGameOn ;
24017: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
24021: LD_INT 173
24023: PPUSH
24024: LD_INT 54
24026: PPUSH
24027: LD_INT 2
24029: PPUSH
24030: LD_INT 8
24032: NEG
24033: PPUSH
24034: CALL_OW 330
// SetSide ( Heike , 3 ) ;
24038: LD_EXP 43
24042: PPUSH
24043: LD_INT 3
24045: PPUSH
24046: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
24050: LD_EXP 43
24054: PPUSH
24055: LD_INT 61
24057: PPUSH
24058: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
24062: LD_EXP 63
24066: PPUSH
24067: LD_INT 61
24069: PPUSH
24070: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
24074: LD_EXP 50
24078: PUSH
24079: LD_EXP 14
24083: IN
24084: PUSH
24085: LD_EXP 50
24089: PPUSH
24090: LD_INT 61
24092: PPUSH
24093: CALL_OW 296
24097: PUSH
24098: LD_INT 12
24100: LESS
24101: AND
24102: IFFALSE 24146
// begin SetSide ( Markov , 3 ) ;
24104: LD_EXP 50
24108: PPUSH
24109: LD_INT 3
24111: PPUSH
24112: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
24116: LD_EXP 50
24120: PPUSH
24121: LD_INT 61
24123: PPUSH
24124: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
24128: LD_INT 35
24130: PPUSH
24131: CALL_OW 67
// until IsInUnit ( Markov ) ;
24135: LD_EXP 50
24139: PPUSH
24140: CALL_OW 310
24144: IFFALSE 24128
// end ; repeat wait ( 0 0$1 ) ;
24146: LD_INT 35
24148: PPUSH
24149: CALL_OW 67
// until IsInUnit ( Heike ) ;
24153: LD_EXP 43
24157: PPUSH
24158: CALL_OW 310
24162: IFFALSE 24146
// SetClass ( Heike , class_mechanic ) ;
24164: LD_EXP 43
24168: PPUSH
24169: LD_INT 3
24171: PPUSH
24172: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
24176: LD_INT 61
24178: PPUSH
24179: LD_INT 21
24181: PPUSH
24182: LD_INT 3
24184: PPUSH
24185: LD_INT 3
24187: PPUSH
24188: LD_INT 43
24190: PPUSH
24191: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
24195: LD_EXP 31
24199: PUSH
24200: LD_EXP 50
24204: PUSH
24205: LD_EXP 14
24209: IN
24210: PUSH
24211: LD_EXP 50
24215: PPUSH
24216: CALL_OW 310
24220: PUSH
24221: LD_INT 61
24223: EQUAL
24224: OR
24225: AND
24226: IFFALSE 24694
// begin wait ( 0 0$5 ) ;
24228: LD_INT 175
24230: PPUSH
24231: CALL_OW 67
// SetSide ( Heike , 2 ) ;
24235: LD_EXP 43
24239: PPUSH
24240: LD_INT 2
24242: PPUSH
24243: CALL_OW 235
// SetSide ( Markov , 2 ) ;
24247: LD_EXP 50
24251: PPUSH
24252: LD_INT 2
24254: PPUSH
24255: CALL_OW 235
// if not Markov in heikeSquad then
24259: LD_EXP 50
24263: PUSH
24264: LD_EXP 14
24268: IN
24269: NOT
24270: IFFALSE 24292
// heikeSquad := Join ( heikeSquad , Markov ) ;
24272: LD_ADDR_EXP 14
24276: PUSH
24277: LD_EXP 14
24281: PPUSH
24282: LD_EXP 50
24286: PPUSH
24287: CALL 65463 0 2
24291: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
24292: LD_EXP 50
24296: PPUSH
24297: LD_STRING DMar-Factory-1
24299: PPUSH
24300: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
24304: LD_INT 61
24306: PPUSH
24307: LD_INT 99
24309: PPUSH
24310: CALL_OW 329
// game_speed := 4 ;
24314: LD_ADDR_OWVAR 65
24318: PUSH
24319: LD_INT 4
24321: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
24322: LD_EXP 63
24326: PPUSH
24327: CALL_OW 122
// ComExitBuilding ( Markov ) ;
24331: LD_EXP 50
24335: PPUSH
24336: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
24340: LD_EXP 63
24344: PPUSH
24345: LD_INT 171
24347: PPUSH
24348: LD_INT 51
24350: PPUSH
24351: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
24355: LD_EXP 50
24359: PPUSH
24360: LD_INT 167
24362: PPUSH
24363: LD_INT 50
24365: PPUSH
24366: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
24370: LD_EXP 50
24374: PPUSH
24375: LD_EXP 63
24379: PPUSH
24380: CALL_OW 179
// wait ( 0 0$5 ) ;
24384: LD_INT 175
24386: PPUSH
24387: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
24391: LD_EXP 50
24395: PPUSH
24396: LD_STRING DMar-Factory-2
24398: PPUSH
24399: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
24403: LD_ADDR_VAR 0 2
24407: PUSH
24408: LD_INT 22
24410: PUSH
24411: LD_INT 3
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 33
24420: PUSH
24421: LD_INT 3
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PPUSH
24432: CALL_OW 69
24436: PUSH
24437: LD_INT 1
24439: ARRAY
24440: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
24441: LD_EXP 63
24445: PPUSH
24446: LD_VAR 0 2
24450: PPUSH
24451: CALL_OW 119
// async ;
24455: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
24456: LD_EXP 63
24460: PPUSH
24461: LD_STRING DMcn-Factory-3
24463: PPUSH
24464: CALL_OW 88
// ComAttackUnit ( veh , ruDisturb ) ;
24468: LD_VAR 0 2
24472: PPUSH
24473: LD_EXP 63
24477: PPUSH
24478: CALL_OW 115
// sync ;
24482: SYNC
// wait ( 0 0$1 ) ;
24483: LD_INT 35
24485: PPUSH
24486: CALL_OW 67
// KillUnit ( ruDisturb ) ;
24490: LD_EXP 63
24494: PPUSH
24495: CALL_OW 66
// SetSide ( veh , 7 ) ;
24499: LD_VAR 0 2
24503: PPUSH
24504: LD_INT 7
24506: PPUSH
24507: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
24511: LD_VAR 0 2
24515: PPUSH
24516: LD_INT 84
24518: PPUSH
24519: LD_INT 38
24521: PPUSH
24522: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
24526: LD_EXP 64
24530: PUSH
24531: LD_INT 1
24533: ARRAY
24534: PPUSH
24535: CALL_OW 258
24539: PUSH
24540: LD_INT 1
24542: EQUAL
24543: IFFALSE 24563
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
24545: LD_EXP 64
24549: PUSH
24550: LD_INT 1
24552: ARRAY
24553: PPUSH
24554: LD_STRING DRum-Factory-4
24556: PPUSH
24557: CALL_OW 88
24561: GO 24579
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
24563: LD_EXP 64
24567: PUSH
24568: LD_INT 1
24570: ARRAY
24571: PPUSH
24572: LD_STRING DRuf-Factory-4
24574: PPUSH
24575: CALL_OW 88
// wait ( 0 0$1 ) ;
24579: LD_INT 35
24581: PPUSH
24582: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
24586: LD_EXP 64
24590: PPUSH
24591: LD_INT 26
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PPUSH
24601: CALL_OW 72
24605: PUSH
24606: LD_INT 1
24608: ARRAY
24609: PPUSH
24610: LD_STRING DRum-Factory-6
24612: PPUSH
24613: CALL_OW 88
// wait ( 0 0$2 ) ;
24617: LD_INT 70
24619: PPUSH
24620: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
24624: LD_EXP 43
24628: PPUSH
24629: LD_INT 33
24631: PPUSH
24632: CALL_OW 336
// ComExitBuilding ( Heike ) ;
24636: LD_EXP 43
24640: PPUSH
24641: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
24645: LD_EXP 43
24649: PPUSH
24650: LD_INT 168
24652: PPUSH
24653: LD_INT 54
24655: PPUSH
24656: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
24660: LD_INT 173
24662: PPUSH
24663: LD_INT 54
24665: PPUSH
24666: LD_INT 2
24668: PPUSH
24669: CALL_OW 331
// InGameOff ;
24673: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
24677: LD_STRING M2b-out
24679: PPUSH
24680: CALL_OW 337
// hasMuchin := false ;
24684: LD_ADDR_EXP 30
24688: PUSH
24689: LD_INT 0
24691: ST_TO_ADDR
// exit ;
24692: GO 26705
// end ; wait ( 0 0$5 ) ;
24694: LD_INT 175
24696: PPUSH
24697: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
24701: LD_INT 61
24703: PPUSH
24704: LD_INT 99
24706: PPUSH
24707: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
24711: LD_EXP 50
24715: PUSH
24716: LD_EXP 14
24720: IN
24721: PUSH
24722: LD_EXP 50
24726: PPUSH
24727: CALL_OW 255
24731: PUSH
24732: LD_INT 3
24734: EQUAL
24735: AND
24736: IFFALSE 24759
// begin SetSide ( Markov , 2 ) ;
24738: LD_EXP 50
24742: PPUSH
24743: LD_INT 2
24745: PPUSH
24746: CALL_OW 235
// ComExitBuilding ( Markov ) ;
24750: LD_EXP 50
24754: PPUSH
24755: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
24759: LD_EXP 43
24763: PPUSH
24764: LD_INT 2
24766: PPUSH
24767: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
24771: LD_EXP 43
24775: PPUSH
24776: LD_INT 33
24778: PPUSH
24779: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
24783: LD_EXP 63
24787: PPUSH
24788: CALL_OW 122
// ComExitBuilding ( Heike ) ;
24792: LD_EXP 43
24796: PPUSH
24797: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
24801: LD_EXP 43
24805: PPUSH
24806: LD_INT 168
24808: PPUSH
24809: LD_INT 54
24811: PPUSH
24812: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
24816: LD_INT 173
24818: PPUSH
24819: LD_INT 54
24821: PPUSH
24822: LD_INT 2
24824: PPUSH
24825: CALL_OW 331
// InGameOff ;
24829: CALL_OW 9
// wait ( 3 ) ;
24833: LD_INT 3
24835: PPUSH
24836: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
24840: LD_EXP 63
24844: PPUSH
24845: LD_INT 2
24847: PPUSH
24848: CALL_OW 120
// wait ( 0 0$3 ) ;
24852: LD_INT 105
24854: PPUSH
24855: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
24859: LD_STRING M2b-out
24861: PPUSH
24862: CALL_OW 337
// hasMuchin := false ;
24866: LD_ADDR_EXP 30
24870: PUSH
24871: LD_INT 0
24873: ST_TO_ADDR
// wait ( 2 2$00 ) ;
24874: LD_INT 4200
24876: PPUSH
24877: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24881: LD_INT 35
24883: PPUSH
24884: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24888: LD_EXP 63
24892: PPUSH
24893: CALL_OW 314
24897: NOT
24898: IFFALSE 24914
// ComMoveUnit ( ruDisturb , Heike ) ;
24900: LD_EXP 63
24904: PPUSH
24905: LD_EXP 43
24909: PPUSH
24910: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
24914: LD_EXP 43
24918: PPUSH
24919: LD_EXP 63
24923: PPUSH
24924: CALL_OW 296
24928: PUSH
24929: LD_INT 2
24931: LESS
24932: PUSH
24933: LD_EXP 63
24937: PPUSH
24938: CALL_OW 302
24942: AND
24943: IFFALSE 24881
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24945: LD_EXP 14
24949: PPUSH
24950: LD_INT 22
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 91
24962: PUSH
24963: LD_EXP 63
24967: PUSH
24968: LD_INT 8
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: LD_INT 25
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 25
24991: PUSH
24992: LD_INT 11
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 25
25001: PUSH
25002: LD_INT 32
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 25
25011: PUSH
25012: LD_INT 34
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: PPUSH
25031: CALL_OW 72
25035: IFFALSE 25045
// isAlarm := true ;
25037: LD_ADDR_EXP 17
25041: PUSH
25042: LD_INT 1
25044: ST_TO_ADDR
// if isAlarm then
25045: LD_EXP 17
25049: IFFALSE 25053
// exit ;
25051: GO 26705
// ComTurnUnit ( Heike , ruDisturb ) ;
25053: LD_EXP 43
25057: PPUSH
25058: LD_EXP 63
25062: PPUSH
25063: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
25067: LD_EXP 63
25071: PPUSH
25072: LD_EXP 43
25076: PPUSH
25077: CALL_OW 119
// wait ( 3 ) ;
25081: LD_INT 3
25083: PPUSH
25084: CALL_OW 67
// for i := 1 to 3 do
25088: LD_ADDR_VAR 0 1
25092: PUSH
25093: DOUBLE
25094: LD_INT 1
25096: DEC
25097: ST_TO_ADDR
25098: LD_INT 3
25100: PUSH
25101: FOR_TO
25102: IFFALSE 25119
// CreateCratesArea ( 5 , cratesArea , false ) ;
25104: LD_INT 5
25106: PPUSH
25107: LD_INT 58
25109: PPUSH
25110: LD_INT 0
25112: PPUSH
25113: CALL_OW 55
25117: GO 25101
25119: POP
25120: POP
// uc_side := 3 ;
25121: LD_ADDR_OWVAR 20
25125: PUSH
25126: LD_INT 3
25128: ST_TO_ADDR
// uc_nation := nation_russian ;
25129: LD_ADDR_OWVAR 21
25133: PUSH
25134: LD_INT 3
25136: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
25137: LD_INT 21
25139: PPUSH
25140: LD_INT 3
25142: PPUSH
25143: LD_INT 1
25145: PPUSH
25146: LD_INT 51
25148: PPUSH
25149: LD_INT 100
25151: PPUSH
25152: CALL 33010 0 5
// veh := CreateVehicle ;
25156: LD_ADDR_VAR 0 2
25160: PUSH
25161: CALL_OW 45
25165: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
25166: LD_VAR 0 2
25170: PPUSH
25171: LD_INT 104
25173: PPUSH
25174: LD_INT 41
25176: PPUSH
25177: LD_INT 3
25179: PPUSH
25180: LD_INT 0
25182: PPUSH
25183: CALL 67603 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
25187: LD_VAR 0 2
25191: PPUSH
25192: LD_INT 1
25194: PPUSH
25195: LD_INT 100
25197: PPUSH
25198: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
25202: CALL_OW 44
25206: PPUSH
25207: LD_VAR 0 2
25211: PPUSH
25212: CALL_OW 52
// DialogueOn ;
25216: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
25220: LD_EXP 63
25224: PPUSH
25225: LD_STRING DMcn-Interrupt-1
25227: PPUSH
25228: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
25232: LD_EXP 63
25236: PPUSH
25237: LD_STRING DMcn-Interrupt-2
25239: PPUSH
25240: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
25244: LD_EXP 63
25248: PPUSH
25249: LD_STRING DMcn-Interrupt-c-3
25251: PPUSH
25252: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
25256: LD_INT 101
25258: PPUSH
25259: LD_INT 38
25261: PPUSH
25262: LD_INT 2
25264: PPUSH
25265: LD_INT 10
25267: NEG
25268: PPUSH
25269: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
25273: LD_INT 101
25275: PPUSH
25276: LD_INT 38
25278: PPUSH
25279: CALL_OW 84
// wait ( 0 0$2 ) ;
25283: LD_INT 70
25285: PPUSH
25286: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
25290: LD_INT 101
25292: PPUSH
25293: LD_INT 38
25295: PPUSH
25296: LD_INT 2
25298: PPUSH
25299: CALL_OW 331
// RemoveUnit ( veh ) ;
25303: LD_VAR 0 2
25307: PPUSH
25308: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
25312: LD_EXP 63
25316: PPUSH
25317: LD_STRING DMcn-Interrupt-c-4
25319: PPUSH
25320: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
25324: LD_EXP 43
25328: PPUSH
25329: LD_STRING DH-Interrupt-c-5
25331: PPUSH
25332: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
25336: LD_EXP 63
25340: PPUSH
25341: LD_STRING DMcn-Interrupt-c-6
25343: PPUSH
25344: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
25348: LD_EXP 43
25352: PPUSH
25353: LD_STRING DH-Interrupt-c-7
25355: PPUSH
25356: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
25360: LD_EXP 63
25364: PPUSH
25365: LD_STRING DMcn-Interrupt-c-8
25367: PPUSH
25368: CALL_OW 88
// DialogueOff ;
25372: CALL_OW 7
// hasMuchin := true ;
25376: LD_ADDR_EXP 30
25380: PUSH
25381: LD_INT 1
25383: ST_TO_ADDR
// Query ( MuchinInfo ) ;
25384: LD_STRING MuchinInfo
25386: PPUSH
25387: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
25391: LD_STRING M2c
25393: PPUSH
25394: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
25398: LD_INT 35
25400: PPUSH
25401: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
25405: LD_EXP 63
25409: PPUSH
25410: LD_EXP 43
25414: PPUSH
25415: CALL_OW 296
25419: PUSH
25420: LD_INT 6
25422: GREATER
25423: IFFALSE 25439
// ComMoveUnit ( ruDisturb , Heike ) ;
25425: LD_EXP 63
25429: PPUSH
25430: LD_EXP 43
25434: PPUSH
25435: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25439: LD_EXP 14
25443: PPUSH
25444: LD_INT 22
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 91
25456: PUSH
25457: LD_EXP 63
25461: PUSH
25462: LD_INT 8
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 2
25472: PUSH
25473: LD_INT 25
25475: PUSH
25476: LD_INT 1
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 25
25485: PUSH
25486: LD_INT 11
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 25
25495: PUSH
25496: LD_INT 32
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 25
25505: PUSH
25506: LD_INT 34
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: LIST
25524: PPUSH
25525: CALL_OW 72
25529: IFFALSE 25541
// begin isAlarm := true ;
25531: LD_ADDR_EXP 17
25535: PUSH
25536: LD_INT 1
25538: ST_TO_ADDR
// exit ;
25539: GO 26705
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
25541: LD_EXP 14
25545: PUSH
25546: LD_EXP 43
25550: UNION
25551: PPUSH
25552: LD_INT 92
25554: PUSH
25555: LD_INT 100
25557: PUSH
25558: LD_INT 37
25560: PUSH
25561: LD_INT 6
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: PPUSH
25570: CALL_OW 72
25574: IFFALSE 25398
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
25576: LD_INT 100
25578: PPUSH
25579: LD_INT 37
25581: PPUSH
25582: LD_INT 3
25584: PPUSH
25585: LD_INT 10
25587: NEG
25588: PPUSH
25589: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
25593: LD_ADDR_VAR 0 3
25597: PUSH
25598: LD_EXP 14
25602: PUSH
25603: LD_EXP 43
25607: UNION
25608: PPUSH
25609: LD_INT 25
25611: PUSH
25612: LD_INT 33
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 91
25621: PUSH
25622: LD_INT 6
25624: PUSH
25625: LD_INT 12
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: LIST
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PPUSH
25637: CALL_OW 72
25641: ST_TO_ADDR
// for i in tmp do
25642: LD_ADDR_VAR 0 1
25646: PUSH
25647: LD_VAR 0 3
25651: PUSH
25652: FOR_IN
25653: IFFALSE 25684
// begin SetSide ( i , 3 ) ;
25655: LD_VAR 0 1
25659: PPUSH
25660: LD_INT 3
25662: PPUSH
25663: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
25667: LD_VAR 0 1
25671: PPUSH
25672: LD_INT 101
25674: PPUSH
25675: LD_INT 38
25677: PPUSH
25678: CALL_OW 111
// end ;
25682: GO 25652
25684: POP
25685: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
25686: LD_EXP 63
25690: PPUSH
25691: LD_INT 104
25693: PPUSH
25694: LD_INT 37
25696: PPUSH
25697: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
25701: LD_EXP 63
25705: PPUSH
25706: LD_EXP 43
25710: PPUSH
25711: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
25715: LD_INT 35
25717: PPUSH
25718: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
25722: LD_ADDR_VAR 0 4
25726: PUSH
25727: LD_INT 58
25729: PPUSH
25730: CALL_OW 435
25734: ST_TO_ADDR
// for i in tmp do
25735: LD_ADDR_VAR 0 1
25739: PUSH
25740: LD_VAR 0 3
25744: PUSH
25745: FOR_IN
25746: IFFALSE 25789
// if not HasTask ( i ) then
25748: LD_VAR 0 1
25752: PPUSH
25753: CALL_OW 314
25757: NOT
25758: IFFALSE 25787
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
25760: LD_VAR 0 1
25764: PPUSH
25765: LD_VAR 0 4
25769: PUSH
25770: LD_INT 1
25772: ARRAY
25773: PPUSH
25774: LD_VAR 0 4
25778: PUSH
25779: LD_INT 2
25781: ARRAY
25782: PPUSH
25783: CALL_OW 117
25787: GO 25745
25789: POP
25790: POP
// until not cr ;
25791: LD_VAR 0 4
25795: NOT
25796: IFFALSE 25715
// wait ( 0 0$2 ) ;
25798: LD_INT 70
25800: PPUSH
25801: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
25805: LD_INT 100
25807: PPUSH
25808: LD_INT 37
25810: PPUSH
25811: LD_INT 3
25813: PPUSH
25814: CALL_OW 331
// for i in tmp do
25818: LD_ADDR_VAR 0 1
25822: PUSH
25823: LD_VAR 0 3
25827: PUSH
25828: FOR_IN
25829: IFFALSE 25845
// SetSide ( i , 2 ) ;
25831: LD_VAR 0 1
25835: PPUSH
25836: LD_INT 2
25838: PPUSH
25839: CALL_OW 235
25843: GO 25828
25845: POP
25846: POP
// if Kaia in tmp then
25847: LD_EXP 48
25851: PUSH
25852: LD_VAR 0 3
25856: IN
25857: IFFALSE 26127
// begin InGameOn ;
25859: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
25863: LD_EXP 48
25867: PPUSH
25868: LD_EXP 63
25872: PPUSH
25873: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
25877: LD_EXP 63
25881: PPUSH
25882: LD_EXP 48
25886: PPUSH
25887: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
25891: LD_EXP 48
25895: PPUSH
25896: LD_EXP 63
25900: PPUSH
25901: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
25905: LD_EXP 48
25909: PPUSH
25910: LD_STRING DK-Assassin-1
25912: PPUSH
25913: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
25917: LD_EXP 63
25921: PPUSH
25922: LD_STRING DMcn-Assassin-2
25924: PPUSH
25925: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
25929: LD_EXP 48
25933: PPUSH
25934: LD_STRING DK-Assassin-3
25936: PPUSH
25937: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
25941: LD_EXP 63
25945: PPUSH
25946: LD_STRING DMcn-Assassin-4
25948: PPUSH
25949: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
25953: LD_EXP 48
25957: PPUSH
25958: LD_STRING DK-Assassin-5
25960: PPUSH
25961: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
25965: LD_EXP 63
25969: PPUSH
25970: LD_STRING DMcn-Assassin-6
25972: PPUSH
25973: CALL_OW 88
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
25977: LD_EXP 48
25981: PUSH
25982: LD_EXP 63
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PPUSH
25991: LD_INT 6
25993: PPUSH
25994: CALL_OW 120
// wait ( 0 0$5 ) ;
25998: LD_INT 175
26000: PPUSH
26001: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
26005: LD_EXP 48
26009: PPUSH
26010: LD_STRING DK-Assassin-7
26012: PPUSH
26013: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
26017: LD_EXP 63
26021: PPUSH
26022: LD_STRING DMcn-Assassin-8
26024: PPUSH
26025: CALL_OW 88
// wait ( 0 0$0.3 ) ;
26029: LD_INT 10
26031: PPUSH
26032: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
26036: LD_EXP 48
26040: PPUSH
26041: LD_STRING DK-Assassin-9
26043: PPUSH
26044: CALL_OW 88
// wait ( 0 0$2 ) ;
26048: LD_INT 70
26050: PPUSH
26051: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
26055: LD_EXP 48
26059: PPUSH
26060: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
26064: LD_EXP 63
26068: PPUSH
26069: CALL_OW 64
// AddComMoveUnit ( Kaia , Heike ) ;
26073: LD_EXP 48
26077: PPUSH
26078: LD_EXP 43
26082: PPUSH
26083: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
26087: LD_EXP 48
26091: PPUSH
26092: LD_STRING DK-Assasin-10
26094: PPUSH
26095: CALL_OW 88
// InGameOff ;
26099: CALL_OW 9
// ChangeMissionObjectives ( M2c-out ) ;
26103: LD_STRING M2c-out
26105: PPUSH
26106: CALL_OW 337
// wait ( 0 0$3 ) ;
26110: LD_INT 105
26112: PPUSH
26113: CALL_OW 67
// hasMuchin := false ;
26117: LD_ADDR_EXP 30
26121: PUSH
26122: LD_INT 0
26124: ST_TO_ADDR
// exit ;
26125: GO 26705
// end ; ChangeMissionObjectives ( M2c-out ) ;
26127: LD_STRING M2c-out
26129: PPUSH
26130: CALL_OW 337
// InGameOn ;
26134: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
26138: LD_EXP 63
26142: PPUSH
26143: LD_STRING DMcn-Fail-1
26145: PPUSH
26146: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
26150: LD_VAR 0 3
26154: PPUSH
26155: LD_INT 114
26157: PPUSH
26158: LD_INT 17
26160: PPUSH
26161: CALL_OW 111
// wait ( 0 0$1 ) ;
26165: LD_INT 35
26167: PPUSH
26168: CALL_OW 67
// async ;
26172: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
26173: LD_EXP 63
26177: PPUSH
26178: LD_EXP 43
26182: PPUSH
26183: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
26187: LD_EXP 63
26191: PPUSH
26192: LD_STRING DMcn-Fail-2
26194: PPUSH
26195: CALL_OW 88
// ComStop ( Heike ) ;
26199: LD_EXP 43
26203: PPUSH
26204: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
26208: LD_EXP 43
26212: PPUSH
26213: LD_EXP 63
26217: PPUSH
26218: CALL_OW 179
// sync ;
26222: SYNC
// Say ( Heike , DH-Fail-3 ) ;
26223: LD_EXP 43
26227: PPUSH
26228: LD_STRING DH-Fail-3
26230: PPUSH
26231: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
26235: LD_EXP 63
26239: PPUSH
26240: LD_STRING DMcn-Fail-4
26242: PPUSH
26243: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
26247: LD_EXP 43
26251: PUSH
26252: LD_EXP 63
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PPUSH
26261: LD_INT 41
26263: PPUSH
26264: LD_INT 19
26266: PPUSH
26267: CALL_OW 111
// wait ( 0 0$2 ) ;
26271: LD_INT 70
26273: PPUSH
26274: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
26278: LD_EXP 63
26282: PPUSH
26283: LD_INT 40
26285: PPUSH
26286: LD_INT 19
26288: PPUSH
26289: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
26293: LD_EXP 43
26297: PPUSH
26298: LD_INT 43
26300: PPUSH
26301: LD_INT 21
26303: PPUSH
26304: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26308: LD_EXP 63
26312: PPUSH
26313: LD_EXP 43
26317: PPUSH
26318: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
26322: LD_EXP 43
26326: PPUSH
26327: LD_EXP 63
26331: PPUSH
26332: CALL_OW 179
// RaiseSailEvent ( centerCamEvent ) ;
26336: LD_INT 3
26338: PPUSH
26339: CALL_OW 427
// wait ( 0 0$2 ) ;
26343: LD_INT 70
26345: PPUSH
26346: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
26350: LD_EXP 63
26354: PPUSH
26355: LD_STRING DMcn-Fail-5
26357: PPUSH
26358: CALL_OW 88
// wait ( 0 0$2 ) ;
26362: LD_INT 70
26364: PPUSH
26365: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
26369: LD_EXP 63
26373: PPUSH
26374: LD_STRING DMcn-Fail-6
26376: PPUSH
26377: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26381: LD_INT 35
26383: PPUSH
26384: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
26388: LD_EXP 43
26392: PPUSH
26393: LD_INT 43
26395: PPUSH
26396: LD_INT 21
26398: PPUSH
26399: CALL_OW 307
26403: IFFALSE 26381
// case Query ( MuchinQuestion ) of 1 :
26405: LD_STRING MuchinQuestion
26407: PPUSH
26408: CALL_OW 97
26412: PUSH
26413: LD_INT 1
26415: DOUBLE
26416: EQUAL
26417: IFTRUE 26421
26419: GO 26521
26421: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
26422: LD_EXP 63
26426: PPUSH
26427: LD_STRING DMcn-Fail-7
26429: PPUSH
26430: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
26434: LD_EXP 43
26438: PPUSH
26439: LD_STRING DH-Fail-8
26441: PPUSH
26442: CALL_OW 88
// wait ( 0 0$0.3 ) ;
26446: LD_INT 10
26448: PPUSH
26449: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
26453: LD_EXP 43
26457: PPUSH
26458: LD_STRING DH-Fail-9
26460: PPUSH
26461: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
26465: LD_EXP 43
26469: PPUSH
26470: LD_STRING DH-Fail-10
26472: PPUSH
26473: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
26477: LD_EXP 63
26481: PPUSH
26482: LD_STRING DMcn-Fail-11
26484: PPUSH
26485: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
26489: LD_EXP 63
26493: PPUSH
26494: LD_EXP 43
26498: PPUSH
26499: CALL_OW 115
// wait ( 0 0$2 ) ;
26503: LD_INT 70
26505: PPUSH
26506: CALL_OW 67
// KillUnit ( Heike ) ;
26510: LD_EXP 43
26514: PPUSH
26515: CALL_OW 66
// end ; 2 :
26519: GO 26701
26521: LD_INT 2
26523: DOUBLE
26524: EQUAL
26525: IFTRUE 26529
26527: GO 26700
26529: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
26530: LD_EXP 43
26534: PPUSH
26535: LD_STRING DH-Fail-a-8
26537: PPUSH
26538: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
26542: LD_EXP 43
26546: PPUSH
26547: LD_STRING DH-Fail-a-9
26549: PPUSH
26550: CALL_OW 88
// Say ( ruDisturb , DH-Fail-10 ) ;
26554: LD_EXP 63
26558: PPUSH
26559: LD_STRING DH-Fail-10
26561: PPUSH
26562: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
26566: LD_EXP 43
26570: PPUSH
26571: LD_STRING DH-Fail-a-11
26573: PPUSH
26574: CALL_OW 88
// async ;
26578: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
26579: LD_EXP 63
26583: PPUSH
26584: LD_EXP 43
26588: PPUSH
26589: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
26593: LD_EXP 63
26597: PPUSH
26598: LD_EXP 43
26602: PPUSH
26603: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
26607: LD_EXP 63
26611: PPUSH
26612: LD_STRING DH-Fail-12
26614: PPUSH
26615: CALL_OW 88
// sync ;
26619: SYNC
// wait ( 0 0$1 ) ;
26620: LD_INT 35
26622: PPUSH
26623: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
26627: LD_EXP 43
26631: PPUSH
26632: LD_STRING DH-Fail-a-13
26634: PPUSH
26635: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
26639: LD_EXP 63
26643: PPUSH
26644: LD_INT 100
26646: PPUSH
26647: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
26651: LD_EXP 63
26655: PPUSH
26656: LD_STRING DMcn-Fail-a-14
26658: PPUSH
26659: CALL_OW 91
// KillUnit ( ruDisturb ) ;
26663: LD_EXP 63
26667: PPUSH
26668: CALL_OW 66
// wait ( 0 0$1 ) ;
26672: LD_INT 35
26674: PPUSH
26675: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
26679: LD_EXP 43
26683: PPUSH
26684: LD_STRING DH-Fail-a-15
26686: PPUSH
26687: CALL_OW 88
// YouLost ( FailMuchin ) ;
26691: LD_STRING FailMuchin
26693: PPUSH
26694: CALL_OW 104
// end ; end ;
26698: GO 26701
26700: POP
// InGameOff ;
26701: CALL_OW 9
// end ; end_of_file
26705: PPOPN 4
26707: END
// every 0 0$1 marked gameStartEvent do
26708: GO 26710
26710: DISABLE
// begin enable ;
26711: ENABLE
// if not contactWithAmerican then
26712: LD_EXP 25
26716: NOT
26717: IFFALSE 26762
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
26719: LD_ADDR_OWVAR 47
26723: PUSH
26724: LD_STRING #X108-1
26726: PUSH
26727: LD_INT 22
26729: PUSH
26730: LD_INT 5
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 21
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PPUSH
26751: CALL_OW 69
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: ST_TO_ADDR
26760: GO 26851
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
26762: LD_ADDR_OWVAR 47
26766: PUSH
26767: LD_STRING #X108-1
26769: PUSH
26770: LD_INT 22
26772: PUSH
26773: LD_INT 5
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 21
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 50
26792: PUSH
26793: EMPTY
26794: LIST
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: LIST
26800: PPUSH
26801: CALL_OW 69
26805: PUSH
26806: LD_STRING #X108-2
26808: PUSH
26809: LD_INT 22
26811: PUSH
26812: LD_INT 4
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 21
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 50
26831: PUSH
26832: EMPTY
26833: LIST
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: PPUSH
26840: CALL_OW 69
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: ST_TO_ADDR
// end ; end_of_file
26851: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
26852: LD_EXP 43
26856: PPUSH
26857: LD_INT 59
26859: PPUSH
26860: CALL_OW 308
26864: IFFALSE 26986
26866: GO 26868
26868: DISABLE
// begin Query ( FinalInfo ) ;
26869: LD_STRING FinalInfo
26871: PPUSH
26872: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
26876: LD_INT 59
26878: PPUSH
26879: LD_INT 1
26881: PPUSH
26882: CALL_OW 424
// end_the_mission_allowed := true ;
26886: LD_ADDR_OWVAR 57
26890: PUSH
26891: LD_INT 1
26893: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26894: LD_INT 35
26896: PPUSH
26897: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
26901: LD_INT 22
26903: PUSH
26904: LD_INT 2
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 21
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 95
26923: PUSH
26924: LD_INT 59
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: LIST
26935: PPUSH
26936: CALL_OW 69
26940: PPUSH
26941: CALL 30097 0 1
26945: PUSH
26946: LD_INT 22
26948: PUSH
26949: LD_INT 2
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 21
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PPUSH
26970: CALL_OW 69
26974: PPUSH
26975: CALL 30097 0 1
26979: EQUAL
26980: IFFALSE 26894
// EndMission ;
26982: CALL 26994 0 0
// end ;
26986: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
26987: CALL 26994 0 0
// end ;
26991: PPOPN 1
26993: END
// function EndMission ; begin
26994: LD_INT 0
26996: PPUSH
// if not IsInArea ( Heike , finalArea ) then
26997: LD_EXP 43
27001: PPUSH
27002: LD_INT 59
27004: PPUSH
27005: CALL_OW 308
27009: NOT
27010: IFFALSE 27021
// begin Query ( HeikeOutOfArea ) ;
27012: LD_STRING HeikeOutOfArea
27014: PPUSH
27015: CALL_OW 97
// exit ;
27019: GO 27804
// end ; if not IsOk ( Heike ) then
27021: LD_EXP 43
27025: PPUSH
27026: CALL_OW 302
27030: NOT
27031: IFFALSE 27042
// begin Query ( HeikeIsHurt ) ;
27033: LD_STRING HeikeIsHurt
27035: PPUSH
27036: CALL_OW 97
// exit ;
27040: GO 27804
// end ; if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
27042: LD_INT 22
27044: PUSH
27045: LD_INT 5
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 21
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PPUSH
27066: CALL_OW 69
27070: PUSH
27071: LD_INT 0
27073: EQUAL
27074: PUSH
27075: LD_EXP 32
27079: PUSH
27080: LD_INT 0
27082: EQUAL
27083: AND
27084: IFFALSE 27098
// AddMedal ( med1 , 1 ) else
27086: LD_STRING med1
27088: PPUSH
27089: LD_INT 1
27091: PPUSH
27092: CALL_OW 101
27096: GO 27109
// AddMedal ( med1 , - 1 ) ;
27098: LD_STRING med1
27100: PPUSH
27101: LD_INT 1
27103: NEG
27104: PPUSH
27105: CALL_OW 101
// if explosivePlantedList >= 3 then
27109: LD_EXP 29
27113: PUSH
27114: LD_INT 3
27116: GREATEREQUAL
27117: IFFALSE 27131
// AddMedal ( med2 , 1 ) else
27119: LD_STRING med2
27121: PPUSH
27122: LD_INT 1
27124: PPUSH
27125: CALL_OW 101
27129: GO 27165
// if explosivePlantedList < 3 then
27131: LD_EXP 29
27135: PUSH
27136: LD_INT 3
27138: LESS
27139: IFFALSE 27154
// AddMedal ( med2 , - 2 ) else
27141: LD_STRING med2
27143: PPUSH
27144: LD_INT 2
27146: NEG
27147: PPUSH
27148: CALL_OW 101
27152: GO 27165
// AddMedal ( med2 , - 1 ) ;
27154: LD_STRING med2
27156: PPUSH
27157: LD_INT 1
27159: NEG
27160: PPUSH
27161: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
27165: LD_INT 5
27167: PPUSH
27168: LD_INT 2
27170: PPUSH
27171: CALL_OW 321
27175: PUSH
27176: LD_INT 2
27178: EQUAL
27179: IFFALSE 27193
// AddMedal ( med3 , 1 ) else
27181: LD_STRING med3
27183: PPUSH
27184: LD_INT 1
27186: PPUSH
27187: CALL_OW 101
27191: GO 27204
// AddMedal ( med3 , - 1 ) ;
27193: LD_STRING med3
27195: PPUSH
27196: LD_INT 1
27198: NEG
27199: PPUSH
27200: CALL_OW 101
// GiveMedals ( MAIN ) ;
27204: LD_STRING MAIN
27206: PPUSH
27207: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
27211: LD_INT 22
27213: PUSH
27214: LD_INT 2
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 23
27223: PUSH
27224: LD_INT 2
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 21
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: LIST
27245: PPUSH
27246: CALL_OW 69
27250: PPUSH
27251: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
27255: LD_EXP 57
27259: PUSH
27260: LD_EXP 57
27264: PPUSH
27265: CALL_OW 255
27269: PUSH
27270: LD_INT 2
27272: EQUAL
27273: AND
27274: IFFALSE 27288
// SaveCharacters ( Doug , 08_UsCommander ) ;
27276: LD_EXP 57
27280: PPUSH
27281: LD_STRING 08_UsCommander
27283: PPUSH
27284: CALL_OW 38
// if Harris and GetSide ( Harris ) = 2 then
27288: LD_EXP 56
27292: PUSH
27293: LD_EXP 56
27297: PPUSH
27298: CALL_OW 255
27302: PUSH
27303: LD_INT 2
27305: EQUAL
27306: AND
27307: IFFALSE 27321
// SaveCharacters ( Harris , 08_Harris ) ;
27309: LD_EXP 56
27313: PPUSH
27314: LD_STRING 08_Harris
27316: PPUSH
27317: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff [ Doug , Harris ] , 08_Americans ) ;
27321: LD_INT 22
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 23
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 21
27343: PUSH
27344: LD_INT 1
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: LIST
27355: PPUSH
27356: CALL_OW 69
27360: PUSH
27361: LD_EXP 57
27365: PUSH
27366: LD_EXP 56
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: DIFF
27375: PPUSH
27376: LD_STRING 08_Americans
27378: PPUSH
27379: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
27383: LD_EXP 43
27387: PPUSH
27388: CALL_OW 248
27392: PUSH
27393: LD_INT 3
27395: EQUAL
27396: IFFALSE 27426
// begin CopySkills ( Heike , HeikeTmp ) ;
27398: LD_EXP 43
27402: PPUSH
27403: LD_EXP 59
27407: PPUSH
27408: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
27412: LD_EXP 59
27416: PPUSH
27417: LD_STRING 08_Heike
27419: PPUSH
27420: CALL_OW 38
// end else
27424: GO 27438
// SaveCharacters ( Heike , 08_Heike ) ;
27426: LD_EXP 43
27430: PPUSH
27431: LD_STRING 08_Heike
27433: PPUSH
27434: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
27438: LD_EXP 53
27442: PUSH
27443: LD_EXP 53
27447: PPUSH
27448: CALL_OW 255
27452: PUSH
27453: LD_INT 2
27455: EQUAL
27456: AND
27457: IFFALSE 27471
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
27459: LD_EXP 53
27463: PPUSH
27464: LD_STRING 08_Aviradze
27466: PPUSH
27467: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
27471: LD_EXP 46
27475: PUSH
27476: LD_EXP 46
27480: PPUSH
27481: CALL_OW 255
27485: PUSH
27486: LD_INT 2
27488: EQUAL
27489: AND
27490: IFFALSE 27504
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
27492: LD_EXP 46
27496: PPUSH
27497: LD_STRING 08_Ibrahim
27499: PPUSH
27500: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
27504: LD_EXP 47
27508: PUSH
27509: LD_EXP 47
27513: PPUSH
27514: CALL_OW 255
27518: PUSH
27519: LD_INT 2
27521: EQUAL
27522: AND
27523: IFFALSE 27537
// SaveCharacters ( Kamil , 08_Kamil ) ;
27525: LD_EXP 47
27529: PPUSH
27530: LD_STRING 08_Kamil
27532: PPUSH
27533: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
27537: LD_EXP 49
27541: PUSH
27542: LD_EXP 49
27546: PPUSH
27547: CALL_OW 255
27551: PUSH
27552: LD_INT 2
27554: EQUAL
27555: AND
27556: IFFALSE 27570
// SaveCharacters ( Sophia , 08_Sophia ) ;
27558: LD_EXP 49
27562: PPUSH
27563: LD_STRING 08_Sophia
27565: PPUSH
27566: CALL_OW 38
// if Kaia and GetSide ( Kaia ) = 2 then
27570: LD_EXP 48
27574: PUSH
27575: LD_EXP 48
27579: PPUSH
27580: CALL_OW 255
27584: PUSH
27585: LD_INT 2
27587: EQUAL
27588: AND
27589: IFFALSE 27603
// SaveCharacters ( Kaia , 08_Kaia ) ;
27591: LD_EXP 48
27595: PPUSH
27596: LD_STRING 08_Kaia
27598: PPUSH
27599: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
27603: LD_EXP 44
27607: PUSH
27608: LD_EXP 44
27612: PPUSH
27613: CALL_OW 255
27617: PUSH
27618: LD_INT 2
27620: EQUAL
27621: AND
27622: IFFALSE 27679
// if GetNation ( Givi ) = nation_russian then
27624: LD_EXP 44
27628: PPUSH
27629: CALL_OW 248
27633: PUSH
27634: LD_INT 3
27636: EQUAL
27637: IFFALSE 27667
// begin CopySkills ( Givi , GiviTmp ) ;
27639: LD_EXP 44
27643: PPUSH
27644: LD_EXP 60
27648: PPUSH
27649: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
27653: LD_EXP 60
27657: PPUSH
27658: LD_STRING 08_Givi
27660: PPUSH
27661: CALL_OW 38
// end else
27665: GO 27679
// SaveCharacters ( Givi , 08_Givi ) ;
27667: LD_EXP 44
27671: PPUSH
27672: LD_STRING 08_Givi
27674: PPUSH
27675: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
27679: LD_EXP 45
27683: PUSH
27684: LD_EXP 45
27688: PPUSH
27689: CALL_OW 255
27693: PUSH
27694: LD_INT 2
27696: EQUAL
27697: AND
27698: IFFALSE 27712
// SaveCharacters ( Mike , 08_Mike ) ;
27700: LD_EXP 45
27704: PPUSH
27705: LD_STRING 08_Mike
27707: PPUSH
27708: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
27712: LD_EXP 50
27716: PUSH
27717: LD_EXP 50
27721: PPUSH
27722: CALL_OW 255
27726: PUSH
27727: LD_INT 2
27729: EQUAL
27730: AND
27731: IFFALSE 27745
// SaveCharacters ( Markov , 08_Markov ) ;
27733: LD_EXP 50
27737: PPUSH
27738: LD_STRING 08_Markov
27740: PPUSH
27741: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
27745: LD_EXP 52
27749: PUSH
27750: LD_EXP 52
27754: PPUSH
27755: CALL_OW 255
27759: PUSH
27760: LD_INT 2
27762: EQUAL
27763: AND
27764: IFFALSE 27778
// SaveCharacters ( Kurt , 08_Kurt ) ;
27766: LD_EXP 52
27770: PPUSH
27771: LD_STRING 08_Kurt
27773: PPUSH
27774: CALL_OW 38
// if heikeSecondSquad then
27778: LD_EXP 54
27782: IFFALSE 27796
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
27784: LD_EXP 54
27788: PPUSH
27789: LD_STRING 08_others
27791: PPUSH
27792: CALL_OW 38
// YouWin ;
27796: CALL_OW 103
// DialogueOff ;
27800: CALL_OW 7
// end ; end_of_file
27804: LD_VAR 0 1
27808: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
27809: LD_EXP 5
27813: IFFALSE 27992
27815: GO 27817
27817: DISABLE
27818: LD_INT 0
27820: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
27821: LD_INT 35
27823: PPUSH
27824: LD_INT 2100
27826: PPUSH
27827: CALL_OW 12
27831: PPUSH
27832: CALL_OW 67
// StopOriginalMusic ;
27836: CALL 89662 0 0
// weatherBusy := true ;
27840: LD_ADDR_EXP 37
27844: PUSH
27845: LD_INT 1
27847: ST_TO_ADDR
// for i := 1 to 3 do
27848: LD_ADDR_VAR 0 1
27852: PUSH
27853: DOUBLE
27854: LD_INT 1
27856: DEC
27857: ST_TO_ADDR
27858: LD_INT 3
27860: PUSH
27861: FOR_TO
27862: IFFALSE 27896
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
27864: LD_INT 1
27866: PPUSH
27867: LD_INT 100
27869: PUSH
27870: LD_INT 100
27872: PUSH
27873: LD_VAR 0 1
27877: MUL
27878: PLUS
27879: PPUSH
27880: LD_INT 60
27882: PPUSH
27883: CALL_OW 550
// wait ( 0 0$2 ) ;
27887: LD_INT 70
27889: PPUSH
27890: CALL_OW 67
// end ;
27894: GO 27861
27896: POP
27897: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
27898: LD_STRING ArStormRain.wav
27900: PPUSH
27901: LD_STRING OW_CUSTOM_COMMAND(103);
27903: PPUSH
27904: CALL 89692 0 2
// wait ( 0 0$3 ) ;
27908: LD_INT 105
27910: PPUSH
27911: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
27915: LD_INT 1
27917: PPUSH
27918: LD_INT 900
27920: PPUSH
27921: LD_INT 120
27923: PPUSH
27924: CALL_OW 550
// wait ( 0 0$10 ) ;
27928: LD_INT 350
27930: PPUSH
27931: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
27935: LD_INT 1
27937: PPUSH
27938: LD_INT 1500
27940: PPUSH
27941: LD_INT 300
27943: PPUSH
27944: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
27948: LD_INT 35
27950: PPUSH
27951: CALL_OW 67
// until not weatherBusy ;
27955: LD_EXP 37
27959: NOT
27960: IFFALSE 27948
// SetWeather ( 0 , 0 , 0 ) ;
27962: LD_INT 0
27964: PPUSH
27965: LD_INT 0
27967: PPUSH
27968: LD_INT 0
27970: PPUSH
27971: CALL_OW 550
// wait ( 5 5$00 ) ;
27975: LD_INT 10500
27977: PPUSH
27978: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
27982: LD_STRING ArStormNormal.wav
27984: PPUSH
27985: LD_STRING OW_CUSTOM_COMMAND(103);
27987: PPUSH
27988: CALL 89692 0 2
// end ; end_of_file
27992: PPOPN 1
27994: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27995: LD_INT 0
27997: PPUSH
27998: PPUSH
// if exist_mode then
27999: LD_VAR 0 2
28003: IFFALSE 28028
// unit := CreateCharacter ( prefix & ident ) else
28005: LD_ADDR_VAR 0 5
28009: PUSH
28010: LD_VAR 0 3
28014: PUSH
28015: LD_VAR 0 1
28019: STR
28020: PPUSH
28021: CALL_OW 34
28025: ST_TO_ADDR
28026: GO 28043
// unit := NewCharacter ( ident ) ;
28028: LD_ADDR_VAR 0 5
28032: PUSH
28033: LD_VAR 0 1
28037: PPUSH
28038: CALL_OW 25
28042: ST_TO_ADDR
// result := unit ;
28043: LD_ADDR_VAR 0 4
28047: PUSH
28048: LD_VAR 0 5
28052: ST_TO_ADDR
// end ;
28053: LD_VAR 0 4
28057: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28058: LD_INT 0
28060: PPUSH
28061: PPUSH
// if not side or not nation then
28062: LD_VAR 0 1
28066: NOT
28067: PUSH
28068: LD_VAR 0 2
28072: NOT
28073: OR
28074: IFFALSE 28078
// exit ;
28076: GO 28846
// case nation of nation_american :
28078: LD_VAR 0 2
28082: PUSH
28083: LD_INT 1
28085: DOUBLE
28086: EQUAL
28087: IFTRUE 28091
28089: GO 28305
28091: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28092: LD_ADDR_VAR 0 4
28096: PUSH
28097: LD_INT 35
28099: PUSH
28100: LD_INT 45
28102: PUSH
28103: LD_INT 46
28105: PUSH
28106: LD_INT 47
28108: PUSH
28109: LD_INT 82
28111: PUSH
28112: LD_INT 83
28114: PUSH
28115: LD_INT 84
28117: PUSH
28118: LD_INT 85
28120: PUSH
28121: LD_INT 86
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: LD_INT 2
28129: PUSH
28130: LD_INT 6
28132: PUSH
28133: LD_INT 15
28135: PUSH
28136: LD_INT 16
28138: PUSH
28139: LD_INT 7
28141: PUSH
28142: LD_INT 12
28144: PUSH
28145: LD_INT 13
28147: PUSH
28148: LD_INT 10
28150: PUSH
28151: LD_INT 14
28153: PUSH
28154: LD_INT 20
28156: PUSH
28157: LD_INT 21
28159: PUSH
28160: LD_INT 22
28162: PUSH
28163: LD_INT 25
28165: PUSH
28166: LD_INT 32
28168: PUSH
28169: LD_INT 27
28171: PUSH
28172: LD_INT 36
28174: PUSH
28175: LD_INT 69
28177: PUSH
28178: LD_INT 39
28180: PUSH
28181: LD_INT 34
28183: PUSH
28184: LD_INT 40
28186: PUSH
28187: LD_INT 48
28189: PUSH
28190: LD_INT 49
28192: PUSH
28193: LD_INT 50
28195: PUSH
28196: LD_INT 51
28198: PUSH
28199: LD_INT 52
28201: PUSH
28202: LD_INT 53
28204: PUSH
28205: LD_INT 54
28207: PUSH
28208: LD_INT 55
28210: PUSH
28211: LD_INT 56
28213: PUSH
28214: LD_INT 57
28216: PUSH
28217: LD_INT 58
28219: PUSH
28220: LD_INT 59
28222: PUSH
28223: LD_INT 60
28225: PUSH
28226: LD_INT 61
28228: PUSH
28229: LD_INT 62
28231: PUSH
28232: LD_INT 80
28234: PUSH
28235: LD_INT 82
28237: PUSH
28238: LD_INT 83
28240: PUSH
28241: LD_INT 84
28243: PUSH
28244: LD_INT 85
28246: PUSH
28247: LD_INT 86
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: ST_TO_ADDR
28303: GO 28770
28305: LD_INT 2
28307: DOUBLE
28308: EQUAL
28309: IFTRUE 28313
28311: GO 28539
28313: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28314: LD_ADDR_VAR 0 4
28318: PUSH
28319: LD_INT 35
28321: PUSH
28322: LD_INT 45
28324: PUSH
28325: LD_INT 46
28327: PUSH
28328: LD_INT 47
28330: PUSH
28331: LD_INT 82
28333: PUSH
28334: LD_INT 83
28336: PUSH
28337: LD_INT 84
28339: PUSH
28340: LD_INT 85
28342: PUSH
28343: LD_INT 87
28345: PUSH
28346: LD_INT 70
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: LD_INT 11
28354: PUSH
28355: LD_INT 3
28357: PUSH
28358: LD_INT 4
28360: PUSH
28361: LD_INT 5
28363: PUSH
28364: LD_INT 6
28366: PUSH
28367: LD_INT 15
28369: PUSH
28370: LD_INT 18
28372: PUSH
28373: LD_INT 7
28375: PUSH
28376: LD_INT 17
28378: PUSH
28379: LD_INT 8
28381: PUSH
28382: LD_INT 20
28384: PUSH
28385: LD_INT 21
28387: PUSH
28388: LD_INT 22
28390: PUSH
28391: LD_INT 72
28393: PUSH
28394: LD_INT 26
28396: PUSH
28397: LD_INT 69
28399: PUSH
28400: LD_INT 39
28402: PUSH
28403: LD_INT 40
28405: PUSH
28406: LD_INT 41
28408: PUSH
28409: LD_INT 42
28411: PUSH
28412: LD_INT 43
28414: PUSH
28415: LD_INT 48
28417: PUSH
28418: LD_INT 49
28420: PUSH
28421: LD_INT 50
28423: PUSH
28424: LD_INT 51
28426: PUSH
28427: LD_INT 52
28429: PUSH
28430: LD_INT 53
28432: PUSH
28433: LD_INT 54
28435: PUSH
28436: LD_INT 55
28438: PUSH
28439: LD_INT 56
28441: PUSH
28442: LD_INT 60
28444: PUSH
28445: LD_INT 61
28447: PUSH
28448: LD_INT 62
28450: PUSH
28451: LD_INT 66
28453: PUSH
28454: LD_INT 67
28456: PUSH
28457: LD_INT 68
28459: PUSH
28460: LD_INT 81
28462: PUSH
28463: LD_INT 82
28465: PUSH
28466: LD_INT 83
28468: PUSH
28469: LD_INT 84
28471: PUSH
28472: LD_INT 85
28474: PUSH
28475: LD_INT 87
28477: PUSH
28478: LD_INT 88
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: ST_TO_ADDR
28537: GO 28770
28539: LD_INT 3
28541: DOUBLE
28542: EQUAL
28543: IFTRUE 28547
28545: GO 28769
28547: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28548: LD_ADDR_VAR 0 4
28552: PUSH
28553: LD_INT 46
28555: PUSH
28556: LD_INT 47
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: LD_INT 2
28564: PUSH
28565: LD_INT 82
28567: PUSH
28568: LD_INT 83
28570: PUSH
28571: LD_INT 84
28573: PUSH
28574: LD_INT 85
28576: PUSH
28577: LD_INT 86
28579: PUSH
28580: LD_INT 11
28582: PUSH
28583: LD_INT 9
28585: PUSH
28586: LD_INT 20
28588: PUSH
28589: LD_INT 19
28591: PUSH
28592: LD_INT 21
28594: PUSH
28595: LD_INT 24
28597: PUSH
28598: LD_INT 22
28600: PUSH
28601: LD_INT 25
28603: PUSH
28604: LD_INT 28
28606: PUSH
28607: LD_INT 29
28609: PUSH
28610: LD_INT 30
28612: PUSH
28613: LD_INT 31
28615: PUSH
28616: LD_INT 37
28618: PUSH
28619: LD_INT 38
28621: PUSH
28622: LD_INT 32
28624: PUSH
28625: LD_INT 27
28627: PUSH
28628: LD_INT 33
28630: PUSH
28631: LD_INT 69
28633: PUSH
28634: LD_INT 39
28636: PUSH
28637: LD_INT 34
28639: PUSH
28640: LD_INT 40
28642: PUSH
28643: LD_INT 71
28645: PUSH
28646: LD_INT 23
28648: PUSH
28649: LD_INT 44
28651: PUSH
28652: LD_INT 48
28654: PUSH
28655: LD_INT 49
28657: PUSH
28658: LD_INT 50
28660: PUSH
28661: LD_INT 51
28663: PUSH
28664: LD_INT 52
28666: PUSH
28667: LD_INT 53
28669: PUSH
28670: LD_INT 54
28672: PUSH
28673: LD_INT 55
28675: PUSH
28676: LD_INT 56
28678: PUSH
28679: LD_INT 57
28681: PUSH
28682: LD_INT 58
28684: PUSH
28685: LD_INT 59
28687: PUSH
28688: LD_INT 63
28690: PUSH
28691: LD_INT 64
28693: PUSH
28694: LD_INT 65
28696: PUSH
28697: LD_INT 82
28699: PUSH
28700: LD_INT 83
28702: PUSH
28703: LD_INT 84
28705: PUSH
28706: LD_INT 85
28708: PUSH
28709: LD_INT 86
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: ST_TO_ADDR
28767: GO 28770
28769: POP
// if state > - 1 and state < 3 then
28770: LD_VAR 0 3
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: GREATER
28779: PUSH
28780: LD_VAR 0 3
28784: PUSH
28785: LD_INT 3
28787: LESS
28788: AND
28789: IFFALSE 28846
// for i in result do
28791: LD_ADDR_VAR 0 5
28795: PUSH
28796: LD_VAR 0 4
28800: PUSH
28801: FOR_IN
28802: IFFALSE 28844
// if GetTech ( i , side ) <> state then
28804: LD_VAR 0 5
28808: PPUSH
28809: LD_VAR 0 1
28813: PPUSH
28814: CALL_OW 321
28818: PUSH
28819: LD_VAR 0 3
28823: NONEQUAL
28824: IFFALSE 28842
// result := result diff i ;
28826: LD_ADDR_VAR 0 4
28830: PUSH
28831: LD_VAR 0 4
28835: PUSH
28836: LD_VAR 0 5
28840: DIFF
28841: ST_TO_ADDR
28842: GO 28801
28844: POP
28845: POP
// end ;
28846: LD_VAR 0 4
28850: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28851: LD_INT 0
28853: PPUSH
28854: PPUSH
28855: PPUSH
// result := true ;
28856: LD_ADDR_VAR 0 3
28860: PUSH
28861: LD_INT 1
28863: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28864: LD_ADDR_VAR 0 5
28868: PUSH
28869: LD_VAR 0 2
28873: PPUSH
28874: CALL_OW 480
28878: ST_TO_ADDR
// if not tmp then
28879: LD_VAR 0 5
28883: NOT
28884: IFFALSE 28888
// exit ;
28886: GO 28937
// for i in tmp do
28888: LD_ADDR_VAR 0 4
28892: PUSH
28893: LD_VAR 0 5
28897: PUSH
28898: FOR_IN
28899: IFFALSE 28935
// if GetTech ( i , side ) <> state_researched then
28901: LD_VAR 0 4
28905: PPUSH
28906: LD_VAR 0 1
28910: PPUSH
28911: CALL_OW 321
28915: PUSH
28916: LD_INT 2
28918: NONEQUAL
28919: IFFALSE 28933
// begin result := false ;
28921: LD_ADDR_VAR 0 3
28925: PUSH
28926: LD_INT 0
28928: ST_TO_ADDR
// exit ;
28929: POP
28930: POP
28931: GO 28937
// end ;
28933: GO 28898
28935: POP
28936: POP
// end ;
28937: LD_VAR 0 3
28941: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28942: LD_INT 0
28944: PPUSH
28945: PPUSH
28946: PPUSH
28947: PPUSH
28948: PPUSH
28949: PPUSH
28950: PPUSH
28951: PPUSH
28952: PPUSH
28953: PPUSH
28954: PPUSH
28955: PPUSH
28956: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28957: LD_VAR 0 1
28961: NOT
28962: PUSH
28963: LD_VAR 0 1
28967: PPUSH
28968: CALL_OW 257
28972: PUSH
28973: LD_INT 9
28975: NONEQUAL
28976: OR
28977: IFFALSE 28981
// exit ;
28979: GO 29554
// side := GetSide ( unit ) ;
28981: LD_ADDR_VAR 0 9
28985: PUSH
28986: LD_VAR 0 1
28990: PPUSH
28991: CALL_OW 255
28995: ST_TO_ADDR
// tech_space := tech_spacanom ;
28996: LD_ADDR_VAR 0 12
29000: PUSH
29001: LD_INT 29
29003: ST_TO_ADDR
// tech_time := tech_taurad ;
29004: LD_ADDR_VAR 0 13
29008: PUSH
29009: LD_INT 28
29011: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29012: LD_ADDR_VAR 0 11
29016: PUSH
29017: LD_VAR 0 1
29021: PPUSH
29022: CALL_OW 310
29026: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29027: LD_VAR 0 11
29031: PPUSH
29032: CALL_OW 247
29036: PUSH
29037: LD_INT 2
29039: EQUAL
29040: IFFALSE 29044
// exit ;
29042: GO 29554
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29044: LD_ADDR_VAR 0 8
29048: PUSH
29049: LD_INT 81
29051: PUSH
29052: LD_VAR 0 9
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 3
29063: PUSH
29064: LD_INT 21
29066: PUSH
29067: LD_INT 3
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PPUSH
29082: CALL_OW 69
29086: ST_TO_ADDR
// if not tmp then
29087: LD_VAR 0 8
29091: NOT
29092: IFFALSE 29096
// exit ;
29094: GO 29554
// if in_unit then
29096: LD_VAR 0 11
29100: IFFALSE 29124
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29102: LD_ADDR_VAR 0 10
29106: PUSH
29107: LD_VAR 0 8
29111: PPUSH
29112: LD_VAR 0 11
29116: PPUSH
29117: CALL_OW 74
29121: ST_TO_ADDR
29122: GO 29144
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29124: LD_ADDR_VAR 0 10
29128: PUSH
29129: LD_VAR 0 8
29133: PPUSH
29134: LD_VAR 0 1
29138: PPUSH
29139: CALL_OW 74
29143: ST_TO_ADDR
// if not enemy then
29144: LD_VAR 0 10
29148: NOT
29149: IFFALSE 29153
// exit ;
29151: GO 29554
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29153: LD_VAR 0 11
29157: PUSH
29158: LD_VAR 0 11
29162: PPUSH
29163: LD_VAR 0 10
29167: PPUSH
29168: CALL_OW 296
29172: PUSH
29173: LD_INT 13
29175: GREATER
29176: AND
29177: PUSH
29178: LD_VAR 0 1
29182: PPUSH
29183: LD_VAR 0 10
29187: PPUSH
29188: CALL_OW 296
29192: PUSH
29193: LD_INT 12
29195: GREATER
29196: OR
29197: IFFALSE 29201
// exit ;
29199: GO 29554
// missile := [ 1 ] ;
29201: LD_ADDR_VAR 0 14
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29212: LD_VAR 0 9
29216: PPUSH
29217: LD_VAR 0 12
29221: PPUSH
29222: CALL_OW 325
29226: IFFALSE 29255
// missile := Replace ( missile , missile + 1 , 2 ) ;
29228: LD_ADDR_VAR 0 14
29232: PUSH
29233: LD_VAR 0 14
29237: PPUSH
29238: LD_VAR 0 14
29242: PUSH
29243: LD_INT 1
29245: PLUS
29246: PPUSH
29247: LD_INT 2
29249: PPUSH
29250: CALL_OW 1
29254: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29255: LD_VAR 0 9
29259: PPUSH
29260: LD_VAR 0 13
29264: PPUSH
29265: CALL_OW 325
29269: PUSH
29270: LD_VAR 0 10
29274: PPUSH
29275: CALL_OW 255
29279: PPUSH
29280: LD_VAR 0 13
29284: PPUSH
29285: CALL_OW 325
29289: NOT
29290: AND
29291: IFFALSE 29320
// missile := Replace ( missile , missile + 1 , 3 ) ;
29293: LD_ADDR_VAR 0 14
29297: PUSH
29298: LD_VAR 0 14
29302: PPUSH
29303: LD_VAR 0 14
29307: PUSH
29308: LD_INT 1
29310: PLUS
29311: PPUSH
29312: LD_INT 3
29314: PPUSH
29315: CALL_OW 1
29319: ST_TO_ADDR
// if missile < 2 then
29320: LD_VAR 0 14
29324: PUSH
29325: LD_INT 2
29327: LESS
29328: IFFALSE 29332
// exit ;
29330: GO 29554
// x := GetX ( enemy ) ;
29332: LD_ADDR_VAR 0 4
29336: PUSH
29337: LD_VAR 0 10
29341: PPUSH
29342: CALL_OW 250
29346: ST_TO_ADDR
// y := GetY ( enemy ) ;
29347: LD_ADDR_VAR 0 5
29351: PUSH
29352: LD_VAR 0 10
29356: PPUSH
29357: CALL_OW 251
29361: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29362: LD_ADDR_VAR 0 6
29366: PUSH
29367: LD_VAR 0 4
29371: PUSH
29372: LD_INT 1
29374: NEG
29375: PPUSH
29376: LD_INT 1
29378: PPUSH
29379: CALL_OW 12
29383: PLUS
29384: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29385: LD_ADDR_VAR 0 7
29389: PUSH
29390: LD_VAR 0 5
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PPUSH
29399: LD_INT 1
29401: PPUSH
29402: CALL_OW 12
29406: PLUS
29407: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29408: LD_VAR 0 6
29412: PPUSH
29413: LD_VAR 0 7
29417: PPUSH
29418: CALL_OW 488
29422: NOT
29423: IFFALSE 29445
// begin _x := x ;
29425: LD_ADDR_VAR 0 6
29429: PUSH
29430: LD_VAR 0 4
29434: ST_TO_ADDR
// _y := y ;
29435: LD_ADDR_VAR 0 7
29439: PUSH
29440: LD_VAR 0 5
29444: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29445: LD_ADDR_VAR 0 3
29449: PUSH
29450: LD_INT 1
29452: PPUSH
29453: LD_VAR 0 14
29457: PPUSH
29458: CALL_OW 12
29462: ST_TO_ADDR
// case i of 1 :
29463: LD_VAR 0 3
29467: PUSH
29468: LD_INT 1
29470: DOUBLE
29471: EQUAL
29472: IFTRUE 29476
29474: GO 29493
29476: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29477: LD_VAR 0 1
29481: PPUSH
29482: LD_VAR 0 10
29486: PPUSH
29487: CALL_OW 115
29491: GO 29554
29493: LD_INT 2
29495: DOUBLE
29496: EQUAL
29497: IFTRUE 29501
29499: GO 29523
29501: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29502: LD_VAR 0 1
29506: PPUSH
29507: LD_VAR 0 6
29511: PPUSH
29512: LD_VAR 0 7
29516: PPUSH
29517: CALL_OW 153
29521: GO 29554
29523: LD_INT 3
29525: DOUBLE
29526: EQUAL
29527: IFTRUE 29531
29529: GO 29553
29531: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29532: LD_VAR 0 1
29536: PPUSH
29537: LD_VAR 0 6
29541: PPUSH
29542: LD_VAR 0 7
29546: PPUSH
29547: CALL_OW 154
29551: GO 29554
29553: POP
// end ;
29554: LD_VAR 0 2
29558: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29559: LD_INT 0
29561: PPUSH
29562: PPUSH
29563: PPUSH
29564: PPUSH
29565: PPUSH
29566: PPUSH
// if not unit or not building then
29567: LD_VAR 0 1
29571: NOT
29572: PUSH
29573: LD_VAR 0 2
29577: NOT
29578: OR
29579: IFFALSE 29583
// exit ;
29581: GO 29741
// x := GetX ( building ) ;
29583: LD_ADDR_VAR 0 5
29587: PUSH
29588: LD_VAR 0 2
29592: PPUSH
29593: CALL_OW 250
29597: ST_TO_ADDR
// y := GetY ( building ) ;
29598: LD_ADDR_VAR 0 6
29602: PUSH
29603: LD_VAR 0 2
29607: PPUSH
29608: CALL_OW 251
29612: ST_TO_ADDR
// for i = 0 to 5 do
29613: LD_ADDR_VAR 0 4
29617: PUSH
29618: DOUBLE
29619: LD_INT 0
29621: DEC
29622: ST_TO_ADDR
29623: LD_INT 5
29625: PUSH
29626: FOR_TO
29627: IFFALSE 29739
// begin _x := ShiftX ( x , i , 3 ) ;
29629: LD_ADDR_VAR 0 7
29633: PUSH
29634: LD_VAR 0 5
29638: PPUSH
29639: LD_VAR 0 4
29643: PPUSH
29644: LD_INT 3
29646: PPUSH
29647: CALL_OW 272
29651: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29652: LD_ADDR_VAR 0 8
29656: PUSH
29657: LD_VAR 0 6
29661: PPUSH
29662: LD_VAR 0 4
29666: PPUSH
29667: LD_INT 3
29669: PPUSH
29670: CALL_OW 273
29674: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29675: LD_VAR 0 7
29679: PPUSH
29680: LD_VAR 0 8
29684: PPUSH
29685: CALL_OW 488
29689: NOT
29690: IFFALSE 29694
// continue ;
29692: GO 29626
// if HexInfo ( _x , _y ) = 0 then
29694: LD_VAR 0 7
29698: PPUSH
29699: LD_VAR 0 8
29703: PPUSH
29704: CALL_OW 428
29708: PUSH
29709: LD_INT 0
29711: EQUAL
29712: IFFALSE 29737
// begin ComMoveXY ( unit , _x , _y ) ;
29714: LD_VAR 0 1
29718: PPUSH
29719: LD_VAR 0 7
29723: PPUSH
29724: LD_VAR 0 8
29728: PPUSH
29729: CALL_OW 111
// exit ;
29733: POP
29734: POP
29735: GO 29741
// end ; end ;
29737: GO 29626
29739: POP
29740: POP
// end ;
29741: LD_VAR 0 3
29745: RET
// export function ScanBase ( side , base_area ) ; begin
29746: LD_INT 0
29748: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29749: LD_ADDR_VAR 0 3
29753: PUSH
29754: LD_VAR 0 2
29758: PPUSH
29759: LD_INT 81
29761: PUSH
29762: LD_VAR 0 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PPUSH
29771: CALL_OW 70
29775: ST_TO_ADDR
// end ;
29776: LD_VAR 0 3
29780: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29781: LD_INT 0
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
// result := false ;
29787: LD_ADDR_VAR 0 2
29791: PUSH
29792: LD_INT 0
29794: ST_TO_ADDR
// side := GetSide ( unit ) ;
29795: LD_ADDR_VAR 0 3
29799: PUSH
29800: LD_VAR 0 1
29804: PPUSH
29805: CALL_OW 255
29809: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29810: LD_ADDR_VAR 0 4
29814: PUSH
29815: LD_VAR 0 1
29819: PPUSH
29820: CALL_OW 248
29824: ST_TO_ADDR
// case nat of 1 :
29825: LD_VAR 0 4
29829: PUSH
29830: LD_INT 1
29832: DOUBLE
29833: EQUAL
29834: IFTRUE 29838
29836: GO 29849
29838: POP
// tech := tech_lassight ; 2 :
29839: LD_ADDR_VAR 0 5
29843: PUSH
29844: LD_INT 12
29846: ST_TO_ADDR
29847: GO 29888
29849: LD_INT 2
29851: DOUBLE
29852: EQUAL
29853: IFTRUE 29857
29855: GO 29868
29857: POP
// tech := tech_mortar ; 3 :
29858: LD_ADDR_VAR 0 5
29862: PUSH
29863: LD_INT 41
29865: ST_TO_ADDR
29866: GO 29888
29868: LD_INT 3
29870: DOUBLE
29871: EQUAL
29872: IFTRUE 29876
29874: GO 29887
29876: POP
// tech := tech_bazooka ; end ;
29877: LD_ADDR_VAR 0 5
29881: PUSH
29882: LD_INT 44
29884: ST_TO_ADDR
29885: GO 29888
29887: POP
// if Researched ( side , tech ) then
29888: LD_VAR 0 3
29892: PPUSH
29893: LD_VAR 0 5
29897: PPUSH
29898: CALL_OW 325
29902: IFFALSE 29929
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29904: LD_ADDR_VAR 0 2
29908: PUSH
29909: LD_INT 5
29911: PUSH
29912: LD_INT 8
29914: PUSH
29915: LD_INT 9
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: PUSH
29923: LD_VAR 0 4
29927: ARRAY
29928: ST_TO_ADDR
// end ;
29929: LD_VAR 0 2
29933: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29934: LD_INT 0
29936: PPUSH
29937: PPUSH
29938: PPUSH
// if not mines then
29939: LD_VAR 0 2
29943: NOT
29944: IFFALSE 29948
// exit ;
29946: GO 30092
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29948: LD_ADDR_VAR 0 5
29952: PUSH
29953: LD_INT 81
29955: PUSH
29956: LD_VAR 0 1
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 3
29967: PUSH
29968: LD_INT 21
29970: PUSH
29971: LD_INT 3
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PPUSH
29986: CALL_OW 69
29990: ST_TO_ADDR
// for i in mines do
29991: LD_ADDR_VAR 0 4
29995: PUSH
29996: LD_VAR 0 2
30000: PUSH
30001: FOR_IN
30002: IFFALSE 30090
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30004: LD_VAR 0 4
30008: PUSH
30009: LD_INT 1
30011: ARRAY
30012: PPUSH
30013: LD_VAR 0 4
30017: PUSH
30018: LD_INT 2
30020: ARRAY
30021: PPUSH
30022: CALL_OW 458
30026: NOT
30027: IFFALSE 30031
// continue ;
30029: GO 30001
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30031: LD_VAR 0 4
30035: PUSH
30036: LD_INT 1
30038: ARRAY
30039: PPUSH
30040: LD_VAR 0 4
30044: PUSH
30045: LD_INT 2
30047: ARRAY
30048: PPUSH
30049: CALL_OW 428
30053: PUSH
30054: LD_VAR 0 5
30058: IN
30059: IFFALSE 30088
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30061: LD_VAR 0 4
30065: PUSH
30066: LD_INT 1
30068: ARRAY
30069: PPUSH
30070: LD_VAR 0 4
30074: PUSH
30075: LD_INT 2
30077: ARRAY
30078: PPUSH
30079: LD_VAR 0 1
30083: PPUSH
30084: CALL_OW 456
// end ;
30088: GO 30001
30090: POP
30091: POP
// end ;
30092: LD_VAR 0 3
30096: RET
// export function Count ( array ) ; var i ; begin
30097: LD_INT 0
30099: PPUSH
30100: PPUSH
// result := 0 ;
30101: LD_ADDR_VAR 0 2
30105: PUSH
30106: LD_INT 0
30108: ST_TO_ADDR
// for i in array do
30109: LD_ADDR_VAR 0 3
30113: PUSH
30114: LD_VAR 0 1
30118: PUSH
30119: FOR_IN
30120: IFFALSE 30144
// if i then
30122: LD_VAR 0 3
30126: IFFALSE 30142
// result := result + 1 ;
30128: LD_ADDR_VAR 0 2
30132: PUSH
30133: LD_VAR 0 2
30137: PUSH
30138: LD_INT 1
30140: PLUS
30141: ST_TO_ADDR
30142: GO 30119
30144: POP
30145: POP
// end ;
30146: LD_VAR 0 2
30150: RET
// export function IsEmpty ( building ) ; begin
30151: LD_INT 0
30153: PPUSH
// if not building then
30154: LD_VAR 0 1
30158: NOT
30159: IFFALSE 30163
// exit ;
30161: GO 30206
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30163: LD_ADDR_VAR 0 2
30167: PUSH
30168: LD_VAR 0 1
30172: PUSH
30173: LD_INT 22
30175: PUSH
30176: LD_VAR 0 1
30180: PPUSH
30181: CALL_OW 255
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 58
30192: PUSH
30193: EMPTY
30194: LIST
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PPUSH
30200: CALL_OW 69
30204: IN
30205: ST_TO_ADDR
// end ;
30206: LD_VAR 0 2
30210: RET
// export function IsNotFull ( building ) ; var places ; begin
30211: LD_INT 0
30213: PPUSH
30214: PPUSH
// if not building then
30215: LD_VAR 0 1
30219: NOT
30220: IFFALSE 30224
// exit ;
30222: GO 30395
// result := false ;
30224: LD_ADDR_VAR 0 2
30228: PUSH
30229: LD_INT 0
30231: ST_TO_ADDR
// places := 0 ;
30232: LD_ADDR_VAR 0 3
30236: PUSH
30237: LD_INT 0
30239: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30240: LD_VAR 0 1
30244: PPUSH
30245: CALL_OW 266
30249: PUSH
30250: LD_INT 0
30252: DOUBLE
30253: EQUAL
30254: IFTRUE 30312
30256: LD_INT 1
30258: DOUBLE
30259: EQUAL
30260: IFTRUE 30312
30262: LD_INT 6
30264: DOUBLE
30265: EQUAL
30266: IFTRUE 30312
30268: LD_INT 7
30270: DOUBLE
30271: EQUAL
30272: IFTRUE 30312
30274: LD_INT 8
30276: DOUBLE
30277: EQUAL
30278: IFTRUE 30312
30280: LD_INT 4
30282: DOUBLE
30283: EQUAL
30284: IFTRUE 30312
30286: LD_INT 5
30288: DOUBLE
30289: EQUAL
30290: IFTRUE 30312
30292: LD_INT 2
30294: DOUBLE
30295: EQUAL
30296: IFTRUE 30312
30298: LD_INT 3
30300: DOUBLE
30301: EQUAL
30302: IFTRUE 30312
30304: LD_INT 35
30306: DOUBLE
30307: EQUAL
30308: IFTRUE 30312
30310: GO 30323
30312: POP
// places := 6 ; b_bunker , b_breastwork :
30313: LD_ADDR_VAR 0 3
30317: PUSH
30318: LD_INT 6
30320: ST_TO_ADDR
30321: GO 30368
30323: LD_INT 32
30325: DOUBLE
30326: EQUAL
30327: IFTRUE 30337
30329: LD_INT 31
30331: DOUBLE
30332: EQUAL
30333: IFTRUE 30337
30335: GO 30348
30337: POP
// places := 1 ; b_control_tower :
30338: LD_ADDR_VAR 0 3
30342: PUSH
30343: LD_INT 1
30345: ST_TO_ADDR
30346: GO 30368
30348: LD_INT 36
30350: DOUBLE
30351: EQUAL
30352: IFTRUE 30356
30354: GO 30367
30356: POP
// places := 3 ; end ;
30357: LD_ADDR_VAR 0 3
30361: PUSH
30362: LD_INT 3
30364: ST_TO_ADDR
30365: GO 30368
30367: POP
// if places then
30368: LD_VAR 0 3
30372: IFFALSE 30395
// result := UnitsInside ( building ) < places ;
30374: LD_ADDR_VAR 0 2
30378: PUSH
30379: LD_VAR 0 1
30383: PPUSH
30384: CALL_OW 313
30388: PUSH
30389: LD_VAR 0 3
30393: LESS
30394: ST_TO_ADDR
// end ;
30395: LD_VAR 0 2
30399: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30400: LD_INT 0
30402: PPUSH
30403: PPUSH
30404: PPUSH
30405: PPUSH
// tmp := [ ] ;
30406: LD_ADDR_VAR 0 3
30410: PUSH
30411: EMPTY
30412: ST_TO_ADDR
// list := [ ] ;
30413: LD_ADDR_VAR 0 5
30417: PUSH
30418: EMPTY
30419: ST_TO_ADDR
// for i = 16 to 25 do
30420: LD_ADDR_VAR 0 4
30424: PUSH
30425: DOUBLE
30426: LD_INT 16
30428: DEC
30429: ST_TO_ADDR
30430: LD_INT 25
30432: PUSH
30433: FOR_TO
30434: IFFALSE 30507
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30436: LD_ADDR_VAR 0 3
30440: PUSH
30441: LD_VAR 0 3
30445: PUSH
30446: LD_INT 22
30448: PUSH
30449: LD_VAR 0 1
30453: PPUSH
30454: CALL_OW 255
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 91
30465: PUSH
30466: LD_VAR 0 1
30470: PUSH
30471: LD_INT 6
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 30
30481: PUSH
30482: LD_VAR 0 4
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: LIST
30495: PUSH
30496: EMPTY
30497: LIST
30498: PPUSH
30499: CALL_OW 69
30503: ADD
30504: ST_TO_ADDR
30505: GO 30433
30507: POP
30508: POP
// for i = 1 to tmp do
30509: LD_ADDR_VAR 0 4
30513: PUSH
30514: DOUBLE
30515: LD_INT 1
30517: DEC
30518: ST_TO_ADDR
30519: LD_VAR 0 3
30523: PUSH
30524: FOR_TO
30525: IFFALSE 30613
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30527: LD_ADDR_VAR 0 5
30531: PUSH
30532: LD_VAR 0 5
30536: PUSH
30537: LD_VAR 0 3
30541: PUSH
30542: LD_VAR 0 4
30546: ARRAY
30547: PPUSH
30548: CALL_OW 266
30552: PUSH
30553: LD_VAR 0 3
30557: PUSH
30558: LD_VAR 0 4
30562: ARRAY
30563: PPUSH
30564: CALL_OW 250
30568: PUSH
30569: LD_VAR 0 3
30573: PUSH
30574: LD_VAR 0 4
30578: ARRAY
30579: PPUSH
30580: CALL_OW 251
30584: PUSH
30585: LD_VAR 0 3
30589: PUSH
30590: LD_VAR 0 4
30594: ARRAY
30595: PPUSH
30596: CALL_OW 254
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: PUSH
30607: EMPTY
30608: LIST
30609: ADD
30610: ST_TO_ADDR
30611: GO 30524
30613: POP
30614: POP
// result := list ;
30615: LD_ADDR_VAR 0 2
30619: PUSH
30620: LD_VAR 0 5
30624: ST_TO_ADDR
// end ;
30625: LD_VAR 0 2
30629: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30630: LD_INT 0
30632: PPUSH
30633: PPUSH
30634: PPUSH
30635: PPUSH
30636: PPUSH
30637: PPUSH
30638: PPUSH
// if not factory then
30639: LD_VAR 0 1
30643: NOT
30644: IFFALSE 30648
// exit ;
30646: GO 31241
// if control = control_apeman then
30648: LD_VAR 0 4
30652: PUSH
30653: LD_INT 5
30655: EQUAL
30656: IFFALSE 30765
// begin tmp := UnitsInside ( factory ) ;
30658: LD_ADDR_VAR 0 8
30662: PUSH
30663: LD_VAR 0 1
30667: PPUSH
30668: CALL_OW 313
30672: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30673: LD_VAR 0 8
30677: PPUSH
30678: LD_INT 25
30680: PUSH
30681: LD_INT 12
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PPUSH
30688: CALL_OW 72
30692: NOT
30693: IFFALSE 30703
// control := control_manual ;
30695: LD_ADDR_VAR 0 4
30699: PUSH
30700: LD_INT 1
30702: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30703: LD_ADDR_VAR 0 8
30707: PUSH
30708: LD_VAR 0 1
30712: PPUSH
30713: CALL 30400 0 1
30717: ST_TO_ADDR
// if tmp then
30718: LD_VAR 0 8
30722: IFFALSE 30765
// begin for i in tmp do
30724: LD_ADDR_VAR 0 7
30728: PUSH
30729: LD_VAR 0 8
30733: PUSH
30734: FOR_IN
30735: IFFALSE 30763
// if i [ 1 ] = b_ext_radio then
30737: LD_VAR 0 7
30741: PUSH
30742: LD_INT 1
30744: ARRAY
30745: PUSH
30746: LD_INT 22
30748: EQUAL
30749: IFFALSE 30761
// begin control := control_remote ;
30751: LD_ADDR_VAR 0 4
30755: PUSH
30756: LD_INT 2
30758: ST_TO_ADDR
// break ;
30759: GO 30763
// end ;
30761: GO 30734
30763: POP
30764: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30765: LD_VAR 0 1
30769: PPUSH
30770: LD_VAR 0 2
30774: PPUSH
30775: LD_VAR 0 3
30779: PPUSH
30780: LD_VAR 0 4
30784: PPUSH
30785: LD_VAR 0 5
30789: PPUSH
30790: CALL_OW 448
30794: IFFALSE 30829
// begin result := [ chassis , engine , control , weapon ] ;
30796: LD_ADDR_VAR 0 6
30800: PUSH
30801: LD_VAR 0 2
30805: PUSH
30806: LD_VAR 0 3
30810: PUSH
30811: LD_VAR 0 4
30815: PUSH
30816: LD_VAR 0 5
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
// exit ;
30827: GO 31241
// end ; _chassis := AvailableChassisList ( factory ) ;
30829: LD_ADDR_VAR 0 9
30833: PUSH
30834: LD_VAR 0 1
30838: PPUSH
30839: CALL_OW 475
30843: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30844: LD_ADDR_VAR 0 11
30848: PUSH
30849: LD_VAR 0 1
30853: PPUSH
30854: CALL_OW 476
30858: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30859: LD_ADDR_VAR 0 12
30863: PUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 477
30873: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30874: LD_ADDR_VAR 0 10
30878: PUSH
30879: LD_VAR 0 1
30883: PPUSH
30884: CALL_OW 478
30888: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30889: LD_VAR 0 9
30893: NOT
30894: PUSH
30895: LD_VAR 0 11
30899: NOT
30900: OR
30901: PUSH
30902: LD_VAR 0 12
30906: NOT
30907: OR
30908: PUSH
30909: LD_VAR 0 10
30913: NOT
30914: OR
30915: IFFALSE 30950
// begin result := [ chassis , engine , control , weapon ] ;
30917: LD_ADDR_VAR 0 6
30921: PUSH
30922: LD_VAR 0 2
30926: PUSH
30927: LD_VAR 0 3
30931: PUSH
30932: LD_VAR 0 4
30936: PUSH
30937: LD_VAR 0 5
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: ST_TO_ADDR
// exit ;
30948: GO 31241
// end ; if not chassis in _chassis then
30950: LD_VAR 0 2
30954: PUSH
30955: LD_VAR 0 9
30959: IN
30960: NOT
30961: IFFALSE 30987
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30963: LD_ADDR_VAR 0 2
30967: PUSH
30968: LD_VAR 0 9
30972: PUSH
30973: LD_INT 1
30975: PPUSH
30976: LD_VAR 0 9
30980: PPUSH
30981: CALL_OW 12
30985: ARRAY
30986: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30987: LD_VAR 0 2
30991: PPUSH
30992: LD_VAR 0 3
30996: PPUSH
30997: CALL 31246 0 2
31001: NOT
31002: IFFALSE 31061
// repeat engine := _engine [ 1 ] ;
31004: LD_ADDR_VAR 0 3
31008: PUSH
31009: LD_VAR 0 11
31013: PUSH
31014: LD_INT 1
31016: ARRAY
31017: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31018: LD_ADDR_VAR 0 11
31022: PUSH
31023: LD_VAR 0 11
31027: PPUSH
31028: LD_INT 1
31030: PPUSH
31031: CALL_OW 3
31035: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31036: LD_VAR 0 2
31040: PPUSH
31041: LD_VAR 0 3
31045: PPUSH
31046: CALL 31246 0 2
31050: PUSH
31051: LD_VAR 0 11
31055: PUSH
31056: EMPTY
31057: EQUAL
31058: OR
31059: IFFALSE 31004
// if not control in _control then
31061: LD_VAR 0 4
31065: PUSH
31066: LD_VAR 0 12
31070: IN
31071: NOT
31072: IFFALSE 31098
// control := _control [ rand ( 1 , _control ) ] ;
31074: LD_ADDR_VAR 0 4
31078: PUSH
31079: LD_VAR 0 12
31083: PUSH
31084: LD_INT 1
31086: PPUSH
31087: LD_VAR 0 12
31091: PPUSH
31092: CALL_OW 12
31096: ARRAY
31097: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31098: LD_VAR 0 2
31102: PPUSH
31103: LD_VAR 0 5
31107: PPUSH
31108: CALL 31466 0 2
31112: NOT
31113: IFFALSE 31172
// repeat weapon := _weapon [ 1 ] ;
31115: LD_ADDR_VAR 0 5
31119: PUSH
31120: LD_VAR 0 10
31124: PUSH
31125: LD_INT 1
31127: ARRAY
31128: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31129: LD_ADDR_VAR 0 10
31133: PUSH
31134: LD_VAR 0 10
31138: PPUSH
31139: LD_INT 1
31141: PPUSH
31142: CALL_OW 3
31146: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31147: LD_VAR 0 2
31151: PPUSH
31152: LD_VAR 0 5
31156: PPUSH
31157: CALL 31466 0 2
31161: PUSH
31162: LD_VAR 0 10
31166: PUSH
31167: EMPTY
31168: EQUAL
31169: OR
31170: IFFALSE 31115
// result := [ ] ;
31172: LD_ADDR_VAR 0 6
31176: PUSH
31177: EMPTY
31178: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31179: LD_VAR 0 1
31183: PPUSH
31184: LD_VAR 0 2
31188: PPUSH
31189: LD_VAR 0 3
31193: PPUSH
31194: LD_VAR 0 4
31198: PPUSH
31199: LD_VAR 0 5
31203: PPUSH
31204: CALL_OW 448
31208: IFFALSE 31241
// result := [ chassis , engine , control , weapon ] ;
31210: LD_ADDR_VAR 0 6
31214: PUSH
31215: LD_VAR 0 2
31219: PUSH
31220: LD_VAR 0 3
31224: PUSH
31225: LD_VAR 0 4
31229: PUSH
31230: LD_VAR 0 5
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: ST_TO_ADDR
// end ;
31241: LD_VAR 0 6
31245: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31246: LD_INT 0
31248: PPUSH
// if not chassis or not engine then
31249: LD_VAR 0 1
31253: NOT
31254: PUSH
31255: LD_VAR 0 2
31259: NOT
31260: OR
31261: IFFALSE 31265
// exit ;
31263: GO 31461
// case engine of engine_solar :
31265: LD_VAR 0 2
31269: PUSH
31270: LD_INT 2
31272: DOUBLE
31273: EQUAL
31274: IFTRUE 31278
31276: GO 31316
31278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31279: LD_ADDR_VAR 0 3
31283: PUSH
31284: LD_INT 11
31286: PUSH
31287: LD_INT 12
31289: PUSH
31290: LD_INT 13
31292: PUSH
31293: LD_INT 14
31295: PUSH
31296: LD_INT 1
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: LD_INT 3
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: ST_TO_ADDR
31314: GO 31445
31316: LD_INT 1
31318: DOUBLE
31319: EQUAL
31320: IFTRUE 31324
31322: GO 31386
31324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31325: LD_ADDR_VAR 0 3
31329: PUSH
31330: LD_INT 11
31332: PUSH
31333: LD_INT 12
31335: PUSH
31336: LD_INT 13
31338: PUSH
31339: LD_INT 14
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: LD_INT 3
31350: PUSH
31351: LD_INT 4
31353: PUSH
31354: LD_INT 5
31356: PUSH
31357: LD_INT 21
31359: PUSH
31360: LD_INT 23
31362: PUSH
31363: LD_INT 22
31365: PUSH
31366: LD_INT 24
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: ST_TO_ADDR
31384: GO 31445
31386: LD_INT 3
31388: DOUBLE
31389: EQUAL
31390: IFTRUE 31394
31392: GO 31444
31394: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31395: LD_ADDR_VAR 0 3
31399: PUSH
31400: LD_INT 13
31402: PUSH
31403: LD_INT 14
31405: PUSH
31406: LD_INT 2
31408: PUSH
31409: LD_INT 3
31411: PUSH
31412: LD_INT 4
31414: PUSH
31415: LD_INT 5
31417: PUSH
31418: LD_INT 21
31420: PUSH
31421: LD_INT 22
31423: PUSH
31424: LD_INT 23
31426: PUSH
31427: LD_INT 24
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: ST_TO_ADDR
31442: GO 31445
31444: POP
// result := ( chassis in result ) ;
31445: LD_ADDR_VAR 0 3
31449: PUSH
31450: LD_VAR 0 1
31454: PUSH
31455: LD_VAR 0 3
31459: IN
31460: ST_TO_ADDR
// end ;
31461: LD_VAR 0 3
31465: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31466: LD_INT 0
31468: PPUSH
// if not chassis or not weapon then
31469: LD_VAR 0 1
31473: NOT
31474: PUSH
31475: LD_VAR 0 2
31479: NOT
31480: OR
31481: IFFALSE 31485
// exit ;
31483: GO 32545
// case weapon of us_machine_gun :
31485: LD_VAR 0 2
31489: PUSH
31490: LD_INT 2
31492: DOUBLE
31493: EQUAL
31494: IFTRUE 31498
31496: GO 31528
31498: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31499: LD_ADDR_VAR 0 3
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: LD_INT 3
31512: PUSH
31513: LD_INT 4
31515: PUSH
31516: LD_INT 5
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: ST_TO_ADDR
31526: GO 32529
31528: LD_INT 3
31530: DOUBLE
31531: EQUAL
31532: IFTRUE 31536
31534: GO 31566
31536: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31537: LD_ADDR_VAR 0 3
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: LD_INT 2
31547: PUSH
31548: LD_INT 3
31550: PUSH
31551: LD_INT 4
31553: PUSH
31554: LD_INT 5
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: ST_TO_ADDR
31564: GO 32529
31566: LD_INT 11
31568: DOUBLE
31569: EQUAL
31570: IFTRUE 31574
31572: GO 31604
31574: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31575: LD_ADDR_VAR 0 3
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: LD_INT 2
31585: PUSH
31586: LD_INT 3
31588: PUSH
31589: LD_INT 4
31591: PUSH
31592: LD_INT 5
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: ST_TO_ADDR
31602: GO 32529
31604: LD_INT 4
31606: DOUBLE
31607: EQUAL
31608: IFTRUE 31612
31610: GO 31638
31612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31613: LD_ADDR_VAR 0 3
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: LD_INT 3
31623: PUSH
31624: LD_INT 4
31626: PUSH
31627: LD_INT 5
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: ST_TO_ADDR
31636: GO 32529
31638: LD_INT 5
31640: DOUBLE
31641: EQUAL
31642: IFTRUE 31646
31644: GO 31672
31646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31647: LD_ADDR_VAR 0 3
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: LD_INT 3
31657: PUSH
31658: LD_INT 4
31660: PUSH
31661: LD_INT 5
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: ST_TO_ADDR
31670: GO 32529
31672: LD_INT 9
31674: DOUBLE
31675: EQUAL
31676: IFTRUE 31680
31678: GO 31706
31680: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31681: LD_ADDR_VAR 0 3
31685: PUSH
31686: LD_INT 2
31688: PUSH
31689: LD_INT 3
31691: PUSH
31692: LD_INT 4
31694: PUSH
31695: LD_INT 5
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: ST_TO_ADDR
31704: GO 32529
31706: LD_INT 7
31708: DOUBLE
31709: EQUAL
31710: IFTRUE 31714
31712: GO 31740
31714: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31715: LD_ADDR_VAR 0 3
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: LD_INT 4
31728: PUSH
31729: LD_INT 5
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
31738: GO 32529
31740: LD_INT 12
31742: DOUBLE
31743: EQUAL
31744: IFTRUE 31748
31746: GO 31774
31748: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31749: LD_ADDR_VAR 0 3
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: LD_INT 3
31759: PUSH
31760: LD_INT 4
31762: PUSH
31763: LD_INT 5
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: ST_TO_ADDR
31772: GO 32529
31774: LD_INT 13
31776: DOUBLE
31777: EQUAL
31778: IFTRUE 31782
31780: GO 31808
31782: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31783: LD_ADDR_VAR 0 3
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: LD_INT 3
31793: PUSH
31794: LD_INT 4
31796: PUSH
31797: LD_INT 5
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: ST_TO_ADDR
31806: GO 32529
31808: LD_INT 14
31810: DOUBLE
31811: EQUAL
31812: IFTRUE 31816
31814: GO 31834
31816: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31817: LD_ADDR_VAR 0 3
31821: PUSH
31822: LD_INT 4
31824: PUSH
31825: LD_INT 5
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: ST_TO_ADDR
31832: GO 32529
31834: LD_INT 6
31836: DOUBLE
31837: EQUAL
31838: IFTRUE 31842
31840: GO 31860
31842: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31843: LD_ADDR_VAR 0 3
31847: PUSH
31848: LD_INT 4
31850: PUSH
31851: LD_INT 5
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: ST_TO_ADDR
31858: GO 32529
31860: LD_INT 10
31862: DOUBLE
31863: EQUAL
31864: IFTRUE 31868
31866: GO 31886
31868: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31869: LD_ADDR_VAR 0 3
31873: PUSH
31874: LD_INT 4
31876: PUSH
31877: LD_INT 5
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: ST_TO_ADDR
31884: GO 32529
31886: LD_INT 22
31888: DOUBLE
31889: EQUAL
31890: IFTRUE 31894
31892: GO 31920
31894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31895: LD_ADDR_VAR 0 3
31899: PUSH
31900: LD_INT 11
31902: PUSH
31903: LD_INT 12
31905: PUSH
31906: LD_INT 13
31908: PUSH
31909: LD_INT 14
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: ST_TO_ADDR
31918: GO 32529
31920: LD_INT 23
31922: DOUBLE
31923: EQUAL
31924: IFTRUE 31928
31926: GO 31954
31928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31929: LD_ADDR_VAR 0 3
31933: PUSH
31934: LD_INT 11
31936: PUSH
31937: LD_INT 12
31939: PUSH
31940: LD_INT 13
31942: PUSH
31943: LD_INT 14
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: ST_TO_ADDR
31952: GO 32529
31954: LD_INT 24
31956: DOUBLE
31957: EQUAL
31958: IFTRUE 31962
31960: GO 31988
31962: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31963: LD_ADDR_VAR 0 3
31967: PUSH
31968: LD_INT 11
31970: PUSH
31971: LD_INT 12
31973: PUSH
31974: LD_INT 13
31976: PUSH
31977: LD_INT 14
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: ST_TO_ADDR
31986: GO 32529
31988: LD_INT 30
31990: DOUBLE
31991: EQUAL
31992: IFTRUE 31996
31994: GO 32022
31996: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31997: LD_ADDR_VAR 0 3
32001: PUSH
32002: LD_INT 11
32004: PUSH
32005: LD_INT 12
32007: PUSH
32008: LD_INT 13
32010: PUSH
32011: LD_INT 14
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: ST_TO_ADDR
32020: GO 32529
32022: LD_INT 25
32024: DOUBLE
32025: EQUAL
32026: IFTRUE 32030
32028: GO 32048
32030: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32031: LD_ADDR_VAR 0 3
32035: PUSH
32036: LD_INT 13
32038: PUSH
32039: LD_INT 14
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: ST_TO_ADDR
32046: GO 32529
32048: LD_INT 27
32050: DOUBLE
32051: EQUAL
32052: IFTRUE 32056
32054: GO 32074
32056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32057: LD_ADDR_VAR 0 3
32061: PUSH
32062: LD_INT 13
32064: PUSH
32065: LD_INT 14
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: ST_TO_ADDR
32072: GO 32529
32074: LD_INT 92
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 32108
32082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32083: LD_ADDR_VAR 0 3
32087: PUSH
32088: LD_INT 11
32090: PUSH
32091: LD_INT 12
32093: PUSH
32094: LD_INT 13
32096: PUSH
32097: LD_INT 14
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
32106: GO 32529
32108: LD_INT 28
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32134
32116: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32117: LD_ADDR_VAR 0 3
32121: PUSH
32122: LD_INT 13
32124: PUSH
32125: LD_INT 14
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: ST_TO_ADDR
32132: GO 32529
32134: LD_INT 29
32136: DOUBLE
32137: EQUAL
32138: IFTRUE 32142
32140: GO 32160
32142: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32143: LD_ADDR_VAR 0 3
32147: PUSH
32148: LD_INT 13
32150: PUSH
32151: LD_INT 14
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: ST_TO_ADDR
32158: GO 32529
32160: LD_INT 31
32162: DOUBLE
32163: EQUAL
32164: IFTRUE 32168
32166: GO 32186
32168: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32169: LD_ADDR_VAR 0 3
32173: PUSH
32174: LD_INT 13
32176: PUSH
32177: LD_INT 14
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: ST_TO_ADDR
32184: GO 32529
32186: LD_INT 26
32188: DOUBLE
32189: EQUAL
32190: IFTRUE 32194
32192: GO 32212
32194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32195: LD_ADDR_VAR 0 3
32199: PUSH
32200: LD_INT 13
32202: PUSH
32203: LD_INT 14
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: ST_TO_ADDR
32210: GO 32529
32212: LD_INT 42
32214: DOUBLE
32215: EQUAL
32216: IFTRUE 32220
32218: GO 32246
32220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32221: LD_ADDR_VAR 0 3
32225: PUSH
32226: LD_INT 21
32228: PUSH
32229: LD_INT 22
32231: PUSH
32232: LD_INT 23
32234: PUSH
32235: LD_INT 24
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: ST_TO_ADDR
32244: GO 32529
32246: LD_INT 43
32248: DOUBLE
32249: EQUAL
32250: IFTRUE 32254
32252: GO 32280
32254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32255: LD_ADDR_VAR 0 3
32259: PUSH
32260: LD_INT 21
32262: PUSH
32263: LD_INT 22
32265: PUSH
32266: LD_INT 23
32268: PUSH
32269: LD_INT 24
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: ST_TO_ADDR
32278: GO 32529
32280: LD_INT 44
32282: DOUBLE
32283: EQUAL
32284: IFTRUE 32288
32286: GO 32314
32288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32289: LD_ADDR_VAR 0 3
32293: PUSH
32294: LD_INT 21
32296: PUSH
32297: LD_INT 22
32299: PUSH
32300: LD_INT 23
32302: PUSH
32303: LD_INT 24
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: ST_TO_ADDR
32312: GO 32529
32314: LD_INT 45
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32322
32320: GO 32348
32322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32323: LD_ADDR_VAR 0 3
32327: PUSH
32328: LD_INT 21
32330: PUSH
32331: LD_INT 22
32333: PUSH
32334: LD_INT 23
32336: PUSH
32337: LD_INT 24
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: ST_TO_ADDR
32346: GO 32529
32348: LD_INT 49
32350: DOUBLE
32351: EQUAL
32352: IFTRUE 32356
32354: GO 32382
32356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32357: LD_ADDR_VAR 0 3
32361: PUSH
32362: LD_INT 21
32364: PUSH
32365: LD_INT 22
32367: PUSH
32368: LD_INT 23
32370: PUSH
32371: LD_INT 24
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: ST_TO_ADDR
32380: GO 32529
32382: LD_INT 51
32384: DOUBLE
32385: EQUAL
32386: IFTRUE 32390
32388: GO 32416
32390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32391: LD_ADDR_VAR 0 3
32395: PUSH
32396: LD_INT 21
32398: PUSH
32399: LD_INT 22
32401: PUSH
32402: LD_INT 23
32404: PUSH
32405: LD_INT 24
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: ST_TO_ADDR
32414: GO 32529
32416: LD_INT 52
32418: DOUBLE
32419: EQUAL
32420: IFTRUE 32424
32422: GO 32450
32424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32425: LD_ADDR_VAR 0 3
32429: PUSH
32430: LD_INT 21
32432: PUSH
32433: LD_INT 22
32435: PUSH
32436: LD_INT 23
32438: PUSH
32439: LD_INT 24
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: ST_TO_ADDR
32448: GO 32529
32450: LD_INT 53
32452: DOUBLE
32453: EQUAL
32454: IFTRUE 32458
32456: GO 32476
32458: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32459: LD_ADDR_VAR 0 3
32463: PUSH
32464: LD_INT 23
32466: PUSH
32467: LD_INT 24
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: ST_TO_ADDR
32474: GO 32529
32476: LD_INT 46
32478: DOUBLE
32479: EQUAL
32480: IFTRUE 32484
32482: GO 32502
32484: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32485: LD_ADDR_VAR 0 3
32489: PUSH
32490: LD_INT 23
32492: PUSH
32493: LD_INT 24
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: ST_TO_ADDR
32500: GO 32529
32502: LD_INT 47
32504: DOUBLE
32505: EQUAL
32506: IFTRUE 32510
32508: GO 32528
32510: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32511: LD_ADDR_VAR 0 3
32515: PUSH
32516: LD_INT 23
32518: PUSH
32519: LD_INT 24
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: ST_TO_ADDR
32526: GO 32529
32528: POP
// result := ( chassis in result ) ;
32529: LD_ADDR_VAR 0 3
32533: PUSH
32534: LD_VAR 0 1
32538: PUSH
32539: LD_VAR 0 3
32543: IN
32544: ST_TO_ADDR
// end ;
32545: LD_VAR 0 3
32549: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32550: LD_INT 0
32552: PPUSH
32553: PPUSH
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
32558: PPUSH
// result := array ;
32559: LD_ADDR_VAR 0 5
32563: PUSH
32564: LD_VAR 0 1
32568: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32569: LD_VAR 0 1
32573: NOT
32574: PUSH
32575: LD_VAR 0 2
32579: NOT
32580: OR
32581: PUSH
32582: LD_VAR 0 3
32586: NOT
32587: OR
32588: PUSH
32589: LD_VAR 0 2
32593: PUSH
32594: LD_VAR 0 1
32598: GREATER
32599: OR
32600: PUSH
32601: LD_VAR 0 3
32605: PUSH
32606: LD_VAR 0 1
32610: GREATER
32611: OR
32612: IFFALSE 32616
// exit ;
32614: GO 32912
// if direction then
32616: LD_VAR 0 4
32620: IFFALSE 32684
// begin d := 1 ;
32622: LD_ADDR_VAR 0 9
32626: PUSH
32627: LD_INT 1
32629: ST_TO_ADDR
// if i_from > i_to then
32630: LD_VAR 0 2
32634: PUSH
32635: LD_VAR 0 3
32639: GREATER
32640: IFFALSE 32666
// length := ( array - i_from ) + i_to else
32642: LD_ADDR_VAR 0 11
32646: PUSH
32647: LD_VAR 0 1
32651: PUSH
32652: LD_VAR 0 2
32656: MINUS
32657: PUSH
32658: LD_VAR 0 3
32662: PLUS
32663: ST_TO_ADDR
32664: GO 32682
// length := i_to - i_from ;
32666: LD_ADDR_VAR 0 11
32670: PUSH
32671: LD_VAR 0 3
32675: PUSH
32676: LD_VAR 0 2
32680: MINUS
32681: ST_TO_ADDR
// end else
32682: GO 32745
// begin d := - 1 ;
32684: LD_ADDR_VAR 0 9
32688: PUSH
32689: LD_INT 1
32691: NEG
32692: ST_TO_ADDR
// if i_from > i_to then
32693: LD_VAR 0 2
32697: PUSH
32698: LD_VAR 0 3
32702: GREATER
32703: IFFALSE 32723
// length := i_from - i_to else
32705: LD_ADDR_VAR 0 11
32709: PUSH
32710: LD_VAR 0 2
32714: PUSH
32715: LD_VAR 0 3
32719: MINUS
32720: ST_TO_ADDR
32721: GO 32745
// length := ( array - i_to ) + i_from ;
32723: LD_ADDR_VAR 0 11
32727: PUSH
32728: LD_VAR 0 1
32732: PUSH
32733: LD_VAR 0 3
32737: MINUS
32738: PUSH
32739: LD_VAR 0 2
32743: PLUS
32744: ST_TO_ADDR
// end ; if not length then
32745: LD_VAR 0 11
32749: NOT
32750: IFFALSE 32754
// exit ;
32752: GO 32912
// tmp := array ;
32754: LD_ADDR_VAR 0 10
32758: PUSH
32759: LD_VAR 0 1
32763: ST_TO_ADDR
// for i = 1 to length do
32764: LD_ADDR_VAR 0 6
32768: PUSH
32769: DOUBLE
32770: LD_INT 1
32772: DEC
32773: ST_TO_ADDR
32774: LD_VAR 0 11
32778: PUSH
32779: FOR_TO
32780: IFFALSE 32900
// begin for j = 1 to array do
32782: LD_ADDR_VAR 0 7
32786: PUSH
32787: DOUBLE
32788: LD_INT 1
32790: DEC
32791: ST_TO_ADDR
32792: LD_VAR 0 1
32796: PUSH
32797: FOR_TO
32798: IFFALSE 32886
// begin k := j + d ;
32800: LD_ADDR_VAR 0 8
32804: PUSH
32805: LD_VAR 0 7
32809: PUSH
32810: LD_VAR 0 9
32814: PLUS
32815: ST_TO_ADDR
// if k > array then
32816: LD_VAR 0 8
32820: PUSH
32821: LD_VAR 0 1
32825: GREATER
32826: IFFALSE 32836
// k := 1 ;
32828: LD_ADDR_VAR 0 8
32832: PUSH
32833: LD_INT 1
32835: ST_TO_ADDR
// if not k then
32836: LD_VAR 0 8
32840: NOT
32841: IFFALSE 32853
// k := array ;
32843: LD_ADDR_VAR 0 8
32847: PUSH
32848: LD_VAR 0 1
32852: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32853: LD_ADDR_VAR 0 10
32857: PUSH
32858: LD_VAR 0 10
32862: PPUSH
32863: LD_VAR 0 8
32867: PPUSH
32868: LD_VAR 0 1
32872: PUSH
32873: LD_VAR 0 7
32877: ARRAY
32878: PPUSH
32879: CALL_OW 1
32883: ST_TO_ADDR
// end ;
32884: GO 32797
32886: POP
32887: POP
// array := tmp ;
32888: LD_ADDR_VAR 0 1
32892: PUSH
32893: LD_VAR 0 10
32897: ST_TO_ADDR
// end ;
32898: GO 32779
32900: POP
32901: POP
// result := array ;
32902: LD_ADDR_VAR 0 5
32906: PUSH
32907: LD_VAR 0 1
32911: ST_TO_ADDR
// end ;
32912: LD_VAR 0 5
32916: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32917: LD_INT 0
32919: PPUSH
32920: PPUSH
// result := 0 ;
32921: LD_ADDR_VAR 0 3
32925: PUSH
32926: LD_INT 0
32928: ST_TO_ADDR
// if not array or not value in array then
32929: LD_VAR 0 1
32933: NOT
32934: PUSH
32935: LD_VAR 0 2
32939: PUSH
32940: LD_VAR 0 1
32944: IN
32945: NOT
32946: OR
32947: IFFALSE 32951
// exit ;
32949: GO 33005
// for i = 1 to array do
32951: LD_ADDR_VAR 0 4
32955: PUSH
32956: DOUBLE
32957: LD_INT 1
32959: DEC
32960: ST_TO_ADDR
32961: LD_VAR 0 1
32965: PUSH
32966: FOR_TO
32967: IFFALSE 33003
// if value = array [ i ] then
32969: LD_VAR 0 2
32973: PUSH
32974: LD_VAR 0 1
32978: PUSH
32979: LD_VAR 0 4
32983: ARRAY
32984: EQUAL
32985: IFFALSE 33001
// begin result := i ;
32987: LD_ADDR_VAR 0 3
32991: PUSH
32992: LD_VAR 0 4
32996: ST_TO_ADDR
// exit ;
32997: POP
32998: POP
32999: GO 33005
// end ;
33001: GO 32966
33003: POP
33004: POP
// end ;
33005: LD_VAR 0 3
33009: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33010: LD_INT 0
33012: PPUSH
// vc_chassis := chassis ;
33013: LD_ADDR_OWVAR 37
33017: PUSH
33018: LD_VAR 0 1
33022: ST_TO_ADDR
// vc_engine := engine ;
33023: LD_ADDR_OWVAR 39
33027: PUSH
33028: LD_VAR 0 2
33032: ST_TO_ADDR
// vc_control := control ;
33033: LD_ADDR_OWVAR 38
33037: PUSH
33038: LD_VAR 0 3
33042: ST_TO_ADDR
// vc_weapon := weapon ;
33043: LD_ADDR_OWVAR 40
33047: PUSH
33048: LD_VAR 0 4
33052: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33053: LD_ADDR_OWVAR 41
33057: PUSH
33058: LD_VAR 0 5
33062: ST_TO_ADDR
// end ;
33063: LD_VAR 0 6
33067: RET
// export function WantPlant ( unit ) ; var task ; begin
33068: LD_INT 0
33070: PPUSH
33071: PPUSH
// result := false ;
33072: LD_ADDR_VAR 0 2
33076: PUSH
33077: LD_INT 0
33079: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33080: LD_ADDR_VAR 0 3
33084: PUSH
33085: LD_VAR 0 1
33089: PPUSH
33090: CALL_OW 437
33094: ST_TO_ADDR
// if task then
33095: LD_VAR 0 3
33099: IFFALSE 33127
// if task [ 1 ] [ 1 ] = p then
33101: LD_VAR 0 3
33105: PUSH
33106: LD_INT 1
33108: ARRAY
33109: PUSH
33110: LD_INT 1
33112: ARRAY
33113: PUSH
33114: LD_STRING p
33116: EQUAL
33117: IFFALSE 33127
// result := true ;
33119: LD_ADDR_VAR 0 2
33123: PUSH
33124: LD_INT 1
33126: ST_TO_ADDR
// end ;
33127: LD_VAR 0 2
33131: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33132: LD_INT 0
33134: PPUSH
33135: PPUSH
33136: PPUSH
33137: PPUSH
// if pos < 1 then
33138: LD_VAR 0 2
33142: PUSH
33143: LD_INT 1
33145: LESS
33146: IFFALSE 33150
// exit ;
33148: GO 33453
// if pos = 1 then
33150: LD_VAR 0 2
33154: PUSH
33155: LD_INT 1
33157: EQUAL
33158: IFFALSE 33191
// result := Replace ( arr , pos [ 1 ] , value ) else
33160: LD_ADDR_VAR 0 4
33164: PUSH
33165: LD_VAR 0 1
33169: PPUSH
33170: LD_VAR 0 2
33174: PUSH
33175: LD_INT 1
33177: ARRAY
33178: PPUSH
33179: LD_VAR 0 3
33183: PPUSH
33184: CALL_OW 1
33188: ST_TO_ADDR
33189: GO 33453
// begin tmp := arr ;
33191: LD_ADDR_VAR 0 6
33195: PUSH
33196: LD_VAR 0 1
33200: ST_TO_ADDR
// s_arr := [ tmp ] ;
33201: LD_ADDR_VAR 0 7
33205: PUSH
33206: LD_VAR 0 6
33210: PUSH
33211: EMPTY
33212: LIST
33213: ST_TO_ADDR
// for i = 1 to pos - 1 do
33214: LD_ADDR_VAR 0 5
33218: PUSH
33219: DOUBLE
33220: LD_INT 1
33222: DEC
33223: ST_TO_ADDR
33224: LD_VAR 0 2
33228: PUSH
33229: LD_INT 1
33231: MINUS
33232: PUSH
33233: FOR_TO
33234: IFFALSE 33279
// begin tmp := tmp [ pos [ i ] ] ;
33236: LD_ADDR_VAR 0 6
33240: PUSH
33241: LD_VAR 0 6
33245: PUSH
33246: LD_VAR 0 2
33250: PUSH
33251: LD_VAR 0 5
33255: ARRAY
33256: ARRAY
33257: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33258: LD_ADDR_VAR 0 7
33262: PUSH
33263: LD_VAR 0 7
33267: PUSH
33268: LD_VAR 0 6
33272: PUSH
33273: EMPTY
33274: LIST
33275: ADD
33276: ST_TO_ADDR
// end ;
33277: GO 33233
33279: POP
33280: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33281: LD_ADDR_VAR 0 6
33285: PUSH
33286: LD_VAR 0 6
33290: PPUSH
33291: LD_VAR 0 2
33295: PUSH
33296: LD_VAR 0 2
33300: ARRAY
33301: PPUSH
33302: LD_VAR 0 3
33306: PPUSH
33307: CALL_OW 1
33311: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33312: LD_ADDR_VAR 0 7
33316: PUSH
33317: LD_VAR 0 7
33321: PPUSH
33322: LD_VAR 0 7
33326: PPUSH
33327: LD_VAR 0 6
33331: PPUSH
33332: CALL_OW 1
33336: ST_TO_ADDR
// for i = s_arr downto 2 do
33337: LD_ADDR_VAR 0 5
33341: PUSH
33342: DOUBLE
33343: LD_VAR 0 7
33347: INC
33348: ST_TO_ADDR
33349: LD_INT 2
33351: PUSH
33352: FOR_DOWNTO
33353: IFFALSE 33437
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33355: LD_ADDR_VAR 0 6
33359: PUSH
33360: LD_VAR 0 7
33364: PUSH
33365: LD_VAR 0 5
33369: PUSH
33370: LD_INT 1
33372: MINUS
33373: ARRAY
33374: PPUSH
33375: LD_VAR 0 2
33379: PUSH
33380: LD_VAR 0 5
33384: PUSH
33385: LD_INT 1
33387: MINUS
33388: ARRAY
33389: PPUSH
33390: LD_VAR 0 7
33394: PUSH
33395: LD_VAR 0 5
33399: ARRAY
33400: PPUSH
33401: CALL_OW 1
33405: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33406: LD_ADDR_VAR 0 7
33410: PUSH
33411: LD_VAR 0 7
33415: PPUSH
33416: LD_VAR 0 5
33420: PUSH
33421: LD_INT 1
33423: MINUS
33424: PPUSH
33425: LD_VAR 0 6
33429: PPUSH
33430: CALL_OW 1
33434: ST_TO_ADDR
// end ;
33435: GO 33352
33437: POP
33438: POP
// result := s_arr [ 1 ] ;
33439: LD_ADDR_VAR 0 4
33443: PUSH
33444: LD_VAR 0 7
33448: PUSH
33449: LD_INT 1
33451: ARRAY
33452: ST_TO_ADDR
// end ; end ;
33453: LD_VAR 0 4
33457: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33458: LD_INT 0
33460: PPUSH
33461: PPUSH
// if not list then
33462: LD_VAR 0 1
33466: NOT
33467: IFFALSE 33471
// exit ;
33469: GO 33562
// i := list [ pos1 ] ;
33471: LD_ADDR_VAR 0 5
33475: PUSH
33476: LD_VAR 0 1
33480: PUSH
33481: LD_VAR 0 2
33485: ARRAY
33486: ST_TO_ADDR
// if not i then
33487: LD_VAR 0 5
33491: NOT
33492: IFFALSE 33496
// exit ;
33494: GO 33562
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33496: LD_ADDR_VAR 0 1
33500: PUSH
33501: LD_VAR 0 1
33505: PPUSH
33506: LD_VAR 0 2
33510: PPUSH
33511: LD_VAR 0 1
33515: PUSH
33516: LD_VAR 0 3
33520: ARRAY
33521: PPUSH
33522: CALL_OW 1
33526: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33527: LD_ADDR_VAR 0 1
33531: PUSH
33532: LD_VAR 0 1
33536: PPUSH
33537: LD_VAR 0 3
33541: PPUSH
33542: LD_VAR 0 5
33546: PPUSH
33547: CALL_OW 1
33551: ST_TO_ADDR
// result := list ;
33552: LD_ADDR_VAR 0 4
33556: PUSH
33557: LD_VAR 0 1
33561: ST_TO_ADDR
// end ;
33562: LD_VAR 0 4
33566: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33567: LD_INT 0
33569: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33570: LD_ADDR_VAR 0 5
33574: PUSH
33575: LD_VAR 0 1
33579: PPUSH
33580: CALL_OW 250
33584: PPUSH
33585: LD_VAR 0 1
33589: PPUSH
33590: CALL_OW 251
33594: PPUSH
33595: LD_VAR 0 2
33599: PPUSH
33600: LD_VAR 0 3
33604: PPUSH
33605: LD_VAR 0 4
33609: PPUSH
33610: CALL 33620 0 5
33614: ST_TO_ADDR
// end ;
33615: LD_VAR 0 5
33619: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33620: LD_INT 0
33622: PPUSH
33623: PPUSH
33624: PPUSH
33625: PPUSH
// if not list then
33626: LD_VAR 0 3
33630: NOT
33631: IFFALSE 33635
// exit ;
33633: GO 34023
// result := [ ] ;
33635: LD_ADDR_VAR 0 6
33639: PUSH
33640: EMPTY
33641: ST_TO_ADDR
// for i in list do
33642: LD_ADDR_VAR 0 7
33646: PUSH
33647: LD_VAR 0 3
33651: PUSH
33652: FOR_IN
33653: IFFALSE 33855
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33655: LD_ADDR_VAR 0 9
33659: PUSH
33660: LD_VAR 0 7
33664: PPUSH
33665: LD_VAR 0 1
33669: PPUSH
33670: LD_VAR 0 2
33674: PPUSH
33675: CALL_OW 297
33679: ST_TO_ADDR
// if not result then
33680: LD_VAR 0 6
33684: NOT
33685: IFFALSE 33711
// result := [ [ i , tmp ] ] else
33687: LD_ADDR_VAR 0 6
33691: PUSH
33692: LD_VAR 0 7
33696: PUSH
33697: LD_VAR 0 9
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: EMPTY
33707: LIST
33708: ST_TO_ADDR
33709: GO 33853
// begin if result [ result ] [ 2 ] < tmp then
33711: LD_VAR 0 6
33715: PUSH
33716: LD_VAR 0 6
33720: ARRAY
33721: PUSH
33722: LD_INT 2
33724: ARRAY
33725: PUSH
33726: LD_VAR 0 9
33730: LESS
33731: IFFALSE 33773
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33733: LD_ADDR_VAR 0 6
33737: PUSH
33738: LD_VAR 0 6
33742: PPUSH
33743: LD_VAR 0 6
33747: PUSH
33748: LD_INT 1
33750: PLUS
33751: PPUSH
33752: LD_VAR 0 7
33756: PUSH
33757: LD_VAR 0 9
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PPUSH
33766: CALL_OW 2
33770: ST_TO_ADDR
33771: GO 33853
// for j = 1 to result do
33773: LD_ADDR_VAR 0 8
33777: PUSH
33778: DOUBLE
33779: LD_INT 1
33781: DEC
33782: ST_TO_ADDR
33783: LD_VAR 0 6
33787: PUSH
33788: FOR_TO
33789: IFFALSE 33851
// begin if tmp < result [ j ] [ 2 ] then
33791: LD_VAR 0 9
33795: PUSH
33796: LD_VAR 0 6
33800: PUSH
33801: LD_VAR 0 8
33805: ARRAY
33806: PUSH
33807: LD_INT 2
33809: ARRAY
33810: LESS
33811: IFFALSE 33849
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33813: LD_ADDR_VAR 0 6
33817: PUSH
33818: LD_VAR 0 6
33822: PPUSH
33823: LD_VAR 0 8
33827: PPUSH
33828: LD_VAR 0 7
33832: PUSH
33833: LD_VAR 0 9
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PPUSH
33842: CALL_OW 2
33846: ST_TO_ADDR
// break ;
33847: GO 33851
// end ; end ;
33849: GO 33788
33851: POP
33852: POP
// end ; end ;
33853: GO 33652
33855: POP
33856: POP
// if result and not asc then
33857: LD_VAR 0 6
33861: PUSH
33862: LD_VAR 0 4
33866: NOT
33867: AND
33868: IFFALSE 33943
// begin tmp := result ;
33870: LD_ADDR_VAR 0 9
33874: PUSH
33875: LD_VAR 0 6
33879: ST_TO_ADDR
// for i = tmp downto 1 do
33880: LD_ADDR_VAR 0 7
33884: PUSH
33885: DOUBLE
33886: LD_VAR 0 9
33890: INC
33891: ST_TO_ADDR
33892: LD_INT 1
33894: PUSH
33895: FOR_DOWNTO
33896: IFFALSE 33941
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33898: LD_ADDR_VAR 0 6
33902: PUSH
33903: LD_VAR 0 6
33907: PPUSH
33908: LD_VAR 0 9
33912: PUSH
33913: LD_VAR 0 7
33917: MINUS
33918: PUSH
33919: LD_INT 1
33921: PLUS
33922: PPUSH
33923: LD_VAR 0 9
33927: PUSH
33928: LD_VAR 0 7
33932: ARRAY
33933: PPUSH
33934: CALL_OW 1
33938: ST_TO_ADDR
33939: GO 33895
33941: POP
33942: POP
// end ; tmp := [ ] ;
33943: LD_ADDR_VAR 0 9
33947: PUSH
33948: EMPTY
33949: ST_TO_ADDR
// if mode then
33950: LD_VAR 0 5
33954: IFFALSE 34023
// begin for i = 1 to result do
33956: LD_ADDR_VAR 0 7
33960: PUSH
33961: DOUBLE
33962: LD_INT 1
33964: DEC
33965: ST_TO_ADDR
33966: LD_VAR 0 6
33970: PUSH
33971: FOR_TO
33972: IFFALSE 34011
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33974: LD_ADDR_VAR 0 9
33978: PUSH
33979: LD_VAR 0 9
33983: PPUSH
33984: LD_VAR 0 7
33988: PPUSH
33989: LD_VAR 0 6
33993: PUSH
33994: LD_VAR 0 7
33998: ARRAY
33999: PUSH
34000: LD_INT 1
34002: ARRAY
34003: PPUSH
34004: CALL_OW 1
34008: ST_TO_ADDR
34009: GO 33971
34011: POP
34012: POP
// result := tmp ;
34013: LD_ADDR_VAR 0 6
34017: PUSH
34018: LD_VAR 0 9
34022: ST_TO_ADDR
// end ; end ;
34023: LD_VAR 0 6
34027: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34028: LD_INT 0
34030: PPUSH
34031: PPUSH
34032: PPUSH
34033: PPUSH
34034: PPUSH
34035: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34036: LD_ADDR_VAR 0 5
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: EMPTY
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
// if not x or not y then
34058: LD_VAR 0 2
34062: NOT
34063: PUSH
34064: LD_VAR 0 3
34068: NOT
34069: OR
34070: IFFALSE 34074
// exit ;
34072: GO 35724
// if not range then
34074: LD_VAR 0 4
34078: NOT
34079: IFFALSE 34089
// range := 10 ;
34081: LD_ADDR_VAR 0 4
34085: PUSH
34086: LD_INT 10
34088: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34089: LD_ADDR_VAR 0 8
34093: PUSH
34094: LD_INT 81
34096: PUSH
34097: LD_VAR 0 1
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 92
34108: PUSH
34109: LD_VAR 0 2
34113: PUSH
34114: LD_VAR 0 3
34118: PUSH
34119: LD_VAR 0 4
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 3
34132: PUSH
34133: LD_INT 21
34135: PUSH
34136: LD_INT 3
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: LIST
34151: PPUSH
34152: CALL_OW 69
34156: ST_TO_ADDR
// if not tmp then
34157: LD_VAR 0 8
34161: NOT
34162: IFFALSE 34166
// exit ;
34164: GO 35724
// for i in tmp do
34166: LD_ADDR_VAR 0 6
34170: PUSH
34171: LD_VAR 0 8
34175: PUSH
34176: FOR_IN
34177: IFFALSE 35699
// begin points := [ 0 , 0 , 0 ] ;
34179: LD_ADDR_VAR 0 9
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: ST_TO_ADDR
// bpoints := 1 ;
34198: LD_ADDR_VAR 0 10
34202: PUSH
34203: LD_INT 1
34205: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34206: LD_VAR 0 6
34210: PPUSH
34211: CALL_OW 247
34215: PUSH
34216: LD_INT 1
34218: DOUBLE
34219: EQUAL
34220: IFTRUE 34224
34222: GO 34802
34224: POP
// begin if GetClass ( i ) = 1 then
34225: LD_VAR 0 6
34229: PPUSH
34230: CALL_OW 257
34234: PUSH
34235: LD_INT 1
34237: EQUAL
34238: IFFALSE 34259
// points := [ 10 , 5 , 3 ] ;
34240: LD_ADDR_VAR 0 9
34244: PUSH
34245: LD_INT 10
34247: PUSH
34248: LD_INT 5
34250: PUSH
34251: LD_INT 3
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: LIST
34258: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34259: LD_VAR 0 6
34263: PPUSH
34264: CALL_OW 257
34268: PUSH
34269: LD_INT 2
34271: PUSH
34272: LD_INT 3
34274: PUSH
34275: LD_INT 4
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: IN
34283: IFFALSE 34304
// points := [ 3 , 2 , 1 ] ;
34285: LD_ADDR_VAR 0 9
34289: PUSH
34290: LD_INT 3
34292: PUSH
34293: LD_INT 2
34295: PUSH
34296: LD_INT 1
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34304: LD_VAR 0 6
34308: PPUSH
34309: CALL_OW 257
34313: PUSH
34314: LD_INT 5
34316: EQUAL
34317: IFFALSE 34338
// points := [ 130 , 5 , 2 ] ;
34319: LD_ADDR_VAR 0 9
34323: PUSH
34324: LD_INT 130
34326: PUSH
34327: LD_INT 5
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34338: LD_VAR 0 6
34342: PPUSH
34343: CALL_OW 257
34347: PUSH
34348: LD_INT 8
34350: EQUAL
34351: IFFALSE 34372
// points := [ 35 , 35 , 30 ] ;
34353: LD_ADDR_VAR 0 9
34357: PUSH
34358: LD_INT 35
34360: PUSH
34361: LD_INT 35
34363: PUSH
34364: LD_INT 30
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: LIST
34371: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34372: LD_VAR 0 6
34376: PPUSH
34377: CALL_OW 257
34381: PUSH
34382: LD_INT 9
34384: EQUAL
34385: IFFALSE 34406
// points := [ 20 , 55 , 40 ] ;
34387: LD_ADDR_VAR 0 9
34391: PUSH
34392: LD_INT 20
34394: PUSH
34395: LD_INT 55
34397: PUSH
34398: LD_INT 40
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: LIST
34405: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34406: LD_VAR 0 6
34410: PPUSH
34411: CALL_OW 257
34415: PUSH
34416: LD_INT 12
34418: PUSH
34419: LD_INT 16
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: IN
34426: IFFALSE 34447
// points := [ 5 , 3 , 2 ] ;
34428: LD_ADDR_VAR 0 9
34432: PUSH
34433: LD_INT 5
34435: PUSH
34436: LD_INT 3
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34447: LD_VAR 0 6
34451: PPUSH
34452: CALL_OW 257
34456: PUSH
34457: LD_INT 17
34459: EQUAL
34460: IFFALSE 34481
// points := [ 100 , 50 , 75 ] ;
34462: LD_ADDR_VAR 0 9
34466: PUSH
34467: LD_INT 100
34469: PUSH
34470: LD_INT 50
34472: PUSH
34473: LD_INT 75
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: LIST
34480: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34481: LD_VAR 0 6
34485: PPUSH
34486: CALL_OW 257
34490: PUSH
34491: LD_INT 15
34493: EQUAL
34494: IFFALSE 34515
// points := [ 10 , 5 , 3 ] ;
34496: LD_ADDR_VAR 0 9
34500: PUSH
34501: LD_INT 10
34503: PUSH
34504: LD_INT 5
34506: PUSH
34507: LD_INT 3
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: LIST
34514: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34515: LD_VAR 0 6
34519: PPUSH
34520: CALL_OW 257
34524: PUSH
34525: LD_INT 14
34527: EQUAL
34528: IFFALSE 34549
// points := [ 10 , 0 , 0 ] ;
34530: LD_ADDR_VAR 0 9
34534: PUSH
34535: LD_INT 10
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34549: LD_VAR 0 6
34553: PPUSH
34554: CALL_OW 257
34558: PUSH
34559: LD_INT 11
34561: EQUAL
34562: IFFALSE 34583
// points := [ 30 , 10 , 5 ] ;
34564: LD_ADDR_VAR 0 9
34568: PUSH
34569: LD_INT 30
34571: PUSH
34572: LD_INT 10
34574: PUSH
34575: LD_INT 5
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34583: LD_VAR 0 1
34587: PPUSH
34588: LD_INT 5
34590: PPUSH
34591: CALL_OW 321
34595: PUSH
34596: LD_INT 2
34598: EQUAL
34599: IFFALSE 34616
// bpoints := bpoints * 1.8 ;
34601: LD_ADDR_VAR 0 10
34605: PUSH
34606: LD_VAR 0 10
34610: PUSH
34611: LD_REAL  1.80000000000000E+0000
34614: MUL
34615: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34616: LD_VAR 0 6
34620: PPUSH
34621: CALL_OW 257
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: LD_INT 4
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: IN
34644: PUSH
34645: LD_VAR 0 1
34649: PPUSH
34650: LD_INT 51
34652: PPUSH
34653: CALL_OW 321
34657: PUSH
34658: LD_INT 2
34660: EQUAL
34661: AND
34662: IFFALSE 34679
// bpoints := bpoints * 1.2 ;
34664: LD_ADDR_VAR 0 10
34668: PUSH
34669: LD_VAR 0 10
34673: PUSH
34674: LD_REAL  1.20000000000000E+0000
34677: MUL
34678: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34679: LD_VAR 0 6
34683: PPUSH
34684: CALL_OW 257
34688: PUSH
34689: LD_INT 5
34691: PUSH
34692: LD_INT 7
34694: PUSH
34695: LD_INT 9
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: LIST
34702: IN
34703: PUSH
34704: LD_VAR 0 1
34708: PPUSH
34709: LD_INT 52
34711: PPUSH
34712: CALL_OW 321
34716: PUSH
34717: LD_INT 2
34719: EQUAL
34720: AND
34721: IFFALSE 34738
// bpoints := bpoints * 1.5 ;
34723: LD_ADDR_VAR 0 10
34727: PUSH
34728: LD_VAR 0 10
34732: PUSH
34733: LD_REAL  1.50000000000000E+0000
34736: MUL
34737: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34738: LD_VAR 0 1
34742: PPUSH
34743: LD_INT 66
34745: PPUSH
34746: CALL_OW 321
34750: PUSH
34751: LD_INT 2
34753: EQUAL
34754: IFFALSE 34771
// bpoints := bpoints * 1.1 ;
34756: LD_ADDR_VAR 0 10
34760: PUSH
34761: LD_VAR 0 10
34765: PUSH
34766: LD_REAL  1.10000000000000E+0000
34769: MUL
34770: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34771: LD_ADDR_VAR 0 10
34775: PUSH
34776: LD_VAR 0 10
34780: PUSH
34781: LD_VAR 0 6
34785: PPUSH
34786: LD_INT 1
34788: PPUSH
34789: CALL_OW 259
34793: PUSH
34794: LD_REAL  1.15000000000000E+0000
34797: MUL
34798: MUL
34799: ST_TO_ADDR
// end ; unit_vehicle :
34800: GO 35628
34802: LD_INT 2
34804: DOUBLE
34805: EQUAL
34806: IFTRUE 34810
34808: GO 35616
34810: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34811: LD_VAR 0 6
34815: PPUSH
34816: CALL_OW 264
34820: PUSH
34821: LD_INT 2
34823: PUSH
34824: LD_INT 42
34826: PUSH
34827: LD_INT 24
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: LIST
34834: IN
34835: IFFALSE 34856
// points := [ 25 , 5 , 3 ] ;
34837: LD_ADDR_VAR 0 9
34841: PUSH
34842: LD_INT 25
34844: PUSH
34845: LD_INT 5
34847: PUSH
34848: LD_INT 3
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: LIST
34855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34856: LD_VAR 0 6
34860: PPUSH
34861: CALL_OW 264
34865: PUSH
34866: LD_INT 4
34868: PUSH
34869: LD_INT 43
34871: PUSH
34872: LD_INT 25
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: LIST
34879: IN
34880: IFFALSE 34901
// points := [ 40 , 15 , 5 ] ;
34882: LD_ADDR_VAR 0 9
34886: PUSH
34887: LD_INT 40
34889: PUSH
34890: LD_INT 15
34892: PUSH
34893: LD_INT 5
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34901: LD_VAR 0 6
34905: PPUSH
34906: CALL_OW 264
34910: PUSH
34911: LD_INT 3
34913: PUSH
34914: LD_INT 23
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: IN
34921: IFFALSE 34942
// points := [ 7 , 25 , 8 ] ;
34923: LD_ADDR_VAR 0 9
34927: PUSH
34928: LD_INT 7
34930: PUSH
34931: LD_INT 25
34933: PUSH
34934: LD_INT 8
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: LIST
34941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34942: LD_VAR 0 6
34946: PPUSH
34947: CALL_OW 264
34951: PUSH
34952: LD_INT 5
34954: PUSH
34955: LD_INT 27
34957: PUSH
34958: LD_INT 44
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: IN
34966: IFFALSE 34987
// points := [ 14 , 50 , 16 ] ;
34968: LD_ADDR_VAR 0 9
34972: PUSH
34973: LD_INT 14
34975: PUSH
34976: LD_INT 50
34978: PUSH
34979: LD_INT 16
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34987: LD_VAR 0 6
34991: PPUSH
34992: CALL_OW 264
34996: PUSH
34997: LD_INT 6
34999: PUSH
35000: LD_INT 46
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: IN
35007: IFFALSE 35028
// points := [ 32 , 120 , 70 ] ;
35009: LD_ADDR_VAR 0 9
35013: PUSH
35014: LD_INT 32
35016: PUSH
35017: LD_INT 120
35019: PUSH
35020: LD_INT 70
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: LIST
35027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35028: LD_VAR 0 6
35032: PPUSH
35033: CALL_OW 264
35037: PUSH
35038: LD_INT 7
35040: PUSH
35041: LD_INT 28
35043: PUSH
35044: LD_INT 45
35046: PUSH
35047: LD_INT 92
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: IN
35056: IFFALSE 35077
// points := [ 35 , 20 , 45 ] ;
35058: LD_ADDR_VAR 0 9
35062: PUSH
35063: LD_INT 35
35065: PUSH
35066: LD_INT 20
35068: PUSH
35069: LD_INT 45
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35077: LD_VAR 0 6
35081: PPUSH
35082: CALL_OW 264
35086: PUSH
35087: LD_INT 47
35089: PUSH
35090: EMPTY
35091: LIST
35092: IN
35093: IFFALSE 35114
// points := [ 67 , 45 , 75 ] ;
35095: LD_ADDR_VAR 0 9
35099: PUSH
35100: LD_INT 67
35102: PUSH
35103: LD_INT 45
35105: PUSH
35106: LD_INT 75
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: LIST
35113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35114: LD_VAR 0 6
35118: PPUSH
35119: CALL_OW 264
35123: PUSH
35124: LD_INT 26
35126: PUSH
35127: EMPTY
35128: LIST
35129: IN
35130: IFFALSE 35151
// points := [ 120 , 30 , 80 ] ;
35132: LD_ADDR_VAR 0 9
35136: PUSH
35137: LD_INT 120
35139: PUSH
35140: LD_INT 30
35142: PUSH
35143: LD_INT 80
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35151: LD_VAR 0 6
35155: PPUSH
35156: CALL_OW 264
35160: PUSH
35161: LD_INT 22
35163: PUSH
35164: EMPTY
35165: LIST
35166: IN
35167: IFFALSE 35188
// points := [ 40 , 1 , 1 ] ;
35169: LD_ADDR_VAR 0 9
35173: PUSH
35174: LD_INT 40
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35188: LD_VAR 0 6
35192: PPUSH
35193: CALL_OW 264
35197: PUSH
35198: LD_INT 29
35200: PUSH
35201: EMPTY
35202: LIST
35203: IN
35204: IFFALSE 35225
// points := [ 70 , 200 , 400 ] ;
35206: LD_ADDR_VAR 0 9
35210: PUSH
35211: LD_INT 70
35213: PUSH
35214: LD_INT 200
35216: PUSH
35217: LD_INT 400
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35225: LD_VAR 0 6
35229: PPUSH
35230: CALL_OW 264
35234: PUSH
35235: LD_INT 14
35237: PUSH
35238: LD_INT 53
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: IN
35245: IFFALSE 35266
// points := [ 40 , 10 , 20 ] ;
35247: LD_ADDR_VAR 0 9
35251: PUSH
35252: LD_INT 40
35254: PUSH
35255: LD_INT 10
35257: PUSH
35258: LD_INT 20
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: LIST
35265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35266: LD_VAR 0 6
35270: PPUSH
35271: CALL_OW 264
35275: PUSH
35276: LD_INT 9
35278: PUSH
35279: EMPTY
35280: LIST
35281: IN
35282: IFFALSE 35303
// points := [ 5 , 70 , 20 ] ;
35284: LD_ADDR_VAR 0 9
35288: PUSH
35289: LD_INT 5
35291: PUSH
35292: LD_INT 70
35294: PUSH
35295: LD_INT 20
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: LIST
35302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35303: LD_VAR 0 6
35307: PPUSH
35308: CALL_OW 264
35312: PUSH
35313: LD_INT 10
35315: PUSH
35316: EMPTY
35317: LIST
35318: IN
35319: IFFALSE 35340
// points := [ 35 , 110 , 70 ] ;
35321: LD_ADDR_VAR 0 9
35325: PUSH
35326: LD_INT 35
35328: PUSH
35329: LD_INT 110
35331: PUSH
35332: LD_INT 70
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: LIST
35339: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35340: LD_VAR 0 6
35344: PPUSH
35345: CALL_OW 265
35349: PUSH
35350: LD_INT 25
35352: EQUAL
35353: IFFALSE 35374
// points := [ 80 , 65 , 100 ] ;
35355: LD_ADDR_VAR 0 9
35359: PUSH
35360: LD_INT 80
35362: PUSH
35363: LD_INT 65
35365: PUSH
35366: LD_INT 100
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35374: LD_VAR 0 6
35378: PPUSH
35379: CALL_OW 263
35383: PUSH
35384: LD_INT 1
35386: EQUAL
35387: IFFALSE 35422
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35389: LD_ADDR_VAR 0 10
35393: PUSH
35394: LD_VAR 0 10
35398: PUSH
35399: LD_VAR 0 6
35403: PPUSH
35404: CALL_OW 311
35408: PPUSH
35409: LD_INT 3
35411: PPUSH
35412: CALL_OW 259
35416: PUSH
35417: LD_INT 4
35419: MUL
35420: MUL
35421: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35422: LD_VAR 0 6
35426: PPUSH
35427: CALL_OW 263
35431: PUSH
35432: LD_INT 2
35434: EQUAL
35435: IFFALSE 35486
// begin j := IsControledBy ( i ) ;
35437: LD_ADDR_VAR 0 7
35441: PUSH
35442: LD_VAR 0 6
35446: PPUSH
35447: CALL_OW 312
35451: ST_TO_ADDR
// if j then
35452: LD_VAR 0 7
35456: IFFALSE 35486
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35458: LD_ADDR_VAR 0 10
35462: PUSH
35463: LD_VAR 0 10
35467: PUSH
35468: LD_VAR 0 7
35472: PPUSH
35473: LD_INT 3
35475: PPUSH
35476: CALL_OW 259
35480: PUSH
35481: LD_INT 3
35483: MUL
35484: MUL
35485: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35486: LD_VAR 0 6
35490: PPUSH
35491: CALL_OW 264
35495: PUSH
35496: LD_INT 5
35498: PUSH
35499: LD_INT 6
35501: PUSH
35502: LD_INT 46
35504: PUSH
35505: LD_INT 44
35507: PUSH
35508: LD_INT 47
35510: PUSH
35511: LD_INT 45
35513: PUSH
35514: LD_INT 28
35516: PUSH
35517: LD_INT 7
35519: PUSH
35520: LD_INT 27
35522: PUSH
35523: LD_INT 29
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: IN
35538: PUSH
35539: LD_VAR 0 1
35543: PPUSH
35544: LD_INT 52
35546: PPUSH
35547: CALL_OW 321
35551: PUSH
35552: LD_INT 2
35554: EQUAL
35555: AND
35556: IFFALSE 35573
// bpoints := bpoints * 1.2 ;
35558: LD_ADDR_VAR 0 10
35562: PUSH
35563: LD_VAR 0 10
35567: PUSH
35568: LD_REAL  1.20000000000000E+0000
35571: MUL
35572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35573: LD_VAR 0 6
35577: PPUSH
35578: CALL_OW 264
35582: PUSH
35583: LD_INT 6
35585: PUSH
35586: LD_INT 46
35588: PUSH
35589: LD_INT 47
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: LIST
35596: IN
35597: IFFALSE 35614
// bpoints := bpoints * 1.2 ;
35599: LD_ADDR_VAR 0 10
35603: PUSH
35604: LD_VAR 0 10
35608: PUSH
35609: LD_REAL  1.20000000000000E+0000
35612: MUL
35613: ST_TO_ADDR
// end ; unit_building :
35614: GO 35628
35616: LD_INT 3
35618: DOUBLE
35619: EQUAL
35620: IFTRUE 35624
35622: GO 35627
35624: POP
// ; end ;
35625: GO 35628
35627: POP
// for j = 1 to 3 do
35628: LD_ADDR_VAR 0 7
35632: PUSH
35633: DOUBLE
35634: LD_INT 1
35636: DEC
35637: ST_TO_ADDR
35638: LD_INT 3
35640: PUSH
35641: FOR_TO
35642: IFFALSE 35695
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35644: LD_ADDR_VAR 0 5
35648: PUSH
35649: LD_VAR 0 5
35653: PPUSH
35654: LD_VAR 0 7
35658: PPUSH
35659: LD_VAR 0 5
35663: PUSH
35664: LD_VAR 0 7
35668: ARRAY
35669: PUSH
35670: LD_VAR 0 9
35674: PUSH
35675: LD_VAR 0 7
35679: ARRAY
35680: PUSH
35681: LD_VAR 0 10
35685: MUL
35686: PLUS
35687: PPUSH
35688: CALL_OW 1
35692: ST_TO_ADDR
35693: GO 35641
35695: POP
35696: POP
// end ;
35697: GO 34176
35699: POP
35700: POP
// result := Replace ( result , 4 , tmp ) ;
35701: LD_ADDR_VAR 0 5
35705: PUSH
35706: LD_VAR 0 5
35710: PPUSH
35711: LD_INT 4
35713: PPUSH
35714: LD_VAR 0 8
35718: PPUSH
35719: CALL_OW 1
35723: ST_TO_ADDR
// end ;
35724: LD_VAR 0 5
35728: RET
// export function DangerAtRange ( unit , range ) ; begin
35729: LD_INT 0
35731: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35732: LD_ADDR_VAR 0 3
35736: PUSH
35737: LD_VAR 0 1
35741: PPUSH
35742: CALL_OW 255
35746: PPUSH
35747: LD_VAR 0 1
35751: PPUSH
35752: CALL_OW 250
35756: PPUSH
35757: LD_VAR 0 1
35761: PPUSH
35762: CALL_OW 251
35766: PPUSH
35767: LD_VAR 0 2
35771: PPUSH
35772: CALL 34028 0 4
35776: ST_TO_ADDR
// end ;
35777: LD_VAR 0 3
35781: RET
// export function DangerInArea ( side , area ) ; begin
35782: LD_INT 0
35784: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35785: LD_ADDR_VAR 0 3
35789: PUSH
35790: LD_VAR 0 2
35794: PPUSH
35795: LD_INT 81
35797: PUSH
35798: LD_VAR 0 1
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PPUSH
35807: CALL_OW 70
35811: ST_TO_ADDR
// end ;
35812: LD_VAR 0 3
35816: RET
// export function IsExtension ( b ) ; begin
35817: LD_INT 0
35819: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35820: LD_ADDR_VAR 0 2
35824: PUSH
35825: LD_VAR 0 1
35829: PUSH
35830: LD_INT 23
35832: PUSH
35833: LD_INT 20
35835: PUSH
35836: LD_INT 22
35838: PUSH
35839: LD_INT 17
35841: PUSH
35842: LD_INT 24
35844: PUSH
35845: LD_INT 21
35847: PUSH
35848: LD_INT 19
35850: PUSH
35851: LD_INT 16
35853: PUSH
35854: LD_INT 25
35856: PUSH
35857: LD_INT 18
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: IN
35872: ST_TO_ADDR
// end ;
35873: LD_VAR 0 2
35877: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35878: LD_INT 0
35880: PPUSH
35881: PPUSH
35882: PPUSH
// result := [ ] ;
35883: LD_ADDR_VAR 0 4
35887: PUSH
35888: EMPTY
35889: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35890: LD_ADDR_VAR 0 5
35894: PUSH
35895: LD_VAR 0 2
35899: PPUSH
35900: LD_INT 21
35902: PUSH
35903: LD_INT 3
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PPUSH
35910: CALL_OW 70
35914: ST_TO_ADDR
// if not tmp then
35915: LD_VAR 0 5
35919: NOT
35920: IFFALSE 35924
// exit ;
35922: GO 35988
// if checkLink then
35924: LD_VAR 0 3
35928: IFFALSE 35978
// begin for i in tmp do
35930: LD_ADDR_VAR 0 6
35934: PUSH
35935: LD_VAR 0 5
35939: PUSH
35940: FOR_IN
35941: IFFALSE 35976
// if GetBase ( i ) <> base then
35943: LD_VAR 0 6
35947: PPUSH
35948: CALL_OW 274
35952: PUSH
35953: LD_VAR 0 1
35957: NONEQUAL
35958: IFFALSE 35974
// ComLinkToBase ( base , i ) ;
35960: LD_VAR 0 1
35964: PPUSH
35965: LD_VAR 0 6
35969: PPUSH
35970: CALL_OW 169
35974: GO 35940
35976: POP
35977: POP
// end ; result := tmp ;
35978: LD_ADDR_VAR 0 4
35982: PUSH
35983: LD_VAR 0 5
35987: ST_TO_ADDR
// end ;
35988: LD_VAR 0 4
35992: RET
// export function ComComplete ( units , b ) ; var i ; begin
35993: LD_INT 0
35995: PPUSH
35996: PPUSH
// if not units then
35997: LD_VAR 0 1
36001: NOT
36002: IFFALSE 36006
// exit ;
36004: GO 36096
// for i in units do
36006: LD_ADDR_VAR 0 4
36010: PUSH
36011: LD_VAR 0 1
36015: PUSH
36016: FOR_IN
36017: IFFALSE 36094
// if BuildingStatus ( b ) = bs_build then
36019: LD_VAR 0 2
36023: PPUSH
36024: CALL_OW 461
36028: PUSH
36029: LD_INT 1
36031: EQUAL
36032: IFFALSE 36092
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36034: LD_VAR 0 4
36038: PPUSH
36039: LD_STRING h
36041: PUSH
36042: LD_VAR 0 2
36046: PPUSH
36047: CALL_OW 250
36051: PUSH
36052: LD_VAR 0 2
36056: PPUSH
36057: CALL_OW 251
36061: PUSH
36062: LD_VAR 0 2
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: PUSH
36085: EMPTY
36086: LIST
36087: PPUSH
36088: CALL_OW 446
36092: GO 36016
36094: POP
36095: POP
// end ;
36096: LD_VAR 0 3
36100: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36101: LD_INT 0
36103: PPUSH
36104: PPUSH
36105: PPUSH
36106: PPUSH
36107: PPUSH
36108: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36109: LD_VAR 0 1
36113: NOT
36114: PUSH
36115: LD_VAR 0 1
36119: PPUSH
36120: CALL_OW 263
36124: PUSH
36125: LD_INT 2
36127: NONEQUAL
36128: OR
36129: IFFALSE 36133
// exit ;
36131: GO 36449
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36133: LD_ADDR_VAR 0 6
36137: PUSH
36138: LD_INT 22
36140: PUSH
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 255
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: LD_INT 30
36160: PUSH
36161: LD_INT 36
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 34
36170: PUSH
36171: LD_INT 31
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: LIST
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PPUSH
36187: CALL_OW 69
36191: ST_TO_ADDR
// if not tmp then
36192: LD_VAR 0 6
36196: NOT
36197: IFFALSE 36201
// exit ;
36199: GO 36449
// result := [ ] ;
36201: LD_ADDR_VAR 0 2
36205: PUSH
36206: EMPTY
36207: ST_TO_ADDR
// for i in tmp do
36208: LD_ADDR_VAR 0 3
36212: PUSH
36213: LD_VAR 0 6
36217: PUSH
36218: FOR_IN
36219: IFFALSE 36290
// begin t := UnitsInside ( i ) ;
36221: LD_ADDR_VAR 0 4
36225: PUSH
36226: LD_VAR 0 3
36230: PPUSH
36231: CALL_OW 313
36235: ST_TO_ADDR
// if t then
36236: LD_VAR 0 4
36240: IFFALSE 36288
// for j in t do
36242: LD_ADDR_VAR 0 7
36246: PUSH
36247: LD_VAR 0 4
36251: PUSH
36252: FOR_IN
36253: IFFALSE 36286
// result := Replace ( result , result + 1 , j ) ;
36255: LD_ADDR_VAR 0 2
36259: PUSH
36260: LD_VAR 0 2
36264: PPUSH
36265: LD_VAR 0 2
36269: PUSH
36270: LD_INT 1
36272: PLUS
36273: PPUSH
36274: LD_VAR 0 7
36278: PPUSH
36279: CALL_OW 1
36283: ST_TO_ADDR
36284: GO 36252
36286: POP
36287: POP
// end ;
36288: GO 36218
36290: POP
36291: POP
// if not result then
36292: LD_VAR 0 2
36296: NOT
36297: IFFALSE 36301
// exit ;
36299: GO 36449
// mech := result [ 1 ] ;
36301: LD_ADDR_VAR 0 5
36305: PUSH
36306: LD_VAR 0 2
36310: PUSH
36311: LD_INT 1
36313: ARRAY
36314: ST_TO_ADDR
// if result > 1 then
36315: LD_VAR 0 2
36319: PUSH
36320: LD_INT 1
36322: GREATER
36323: IFFALSE 36435
// begin for i = 2 to result do
36325: LD_ADDR_VAR 0 3
36329: PUSH
36330: DOUBLE
36331: LD_INT 2
36333: DEC
36334: ST_TO_ADDR
36335: LD_VAR 0 2
36339: PUSH
36340: FOR_TO
36341: IFFALSE 36433
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36343: LD_ADDR_VAR 0 4
36347: PUSH
36348: LD_VAR 0 2
36352: PUSH
36353: LD_VAR 0 3
36357: ARRAY
36358: PPUSH
36359: LD_INT 3
36361: PPUSH
36362: CALL_OW 259
36366: PUSH
36367: LD_VAR 0 2
36371: PUSH
36372: LD_VAR 0 3
36376: ARRAY
36377: PPUSH
36378: CALL_OW 432
36382: MINUS
36383: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36384: LD_VAR 0 4
36388: PUSH
36389: LD_VAR 0 5
36393: PPUSH
36394: LD_INT 3
36396: PPUSH
36397: CALL_OW 259
36401: PUSH
36402: LD_VAR 0 5
36406: PPUSH
36407: CALL_OW 432
36411: MINUS
36412: GREATEREQUAL
36413: IFFALSE 36431
// mech := result [ i ] ;
36415: LD_ADDR_VAR 0 5
36419: PUSH
36420: LD_VAR 0 2
36424: PUSH
36425: LD_VAR 0 3
36429: ARRAY
36430: ST_TO_ADDR
// end ;
36431: GO 36340
36433: POP
36434: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36435: LD_VAR 0 1
36439: PPUSH
36440: LD_VAR 0 5
36444: PPUSH
36445: CALL_OW 135
// end ;
36449: LD_VAR 0 2
36453: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36454: LD_INT 0
36456: PPUSH
36457: PPUSH
36458: PPUSH
36459: PPUSH
36460: PPUSH
36461: PPUSH
36462: PPUSH
36463: PPUSH
36464: PPUSH
36465: PPUSH
36466: PPUSH
36467: PPUSH
36468: PPUSH
// result := [ ] ;
36469: LD_ADDR_VAR 0 7
36473: PUSH
36474: EMPTY
36475: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36476: LD_VAR 0 1
36480: PPUSH
36481: CALL_OW 266
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: IN
36496: NOT
36497: IFFALSE 36501
// exit ;
36499: GO 38135
// if name then
36501: LD_VAR 0 3
36505: IFFALSE 36521
// SetBName ( base_dep , name ) ;
36507: LD_VAR 0 1
36511: PPUSH
36512: LD_VAR 0 3
36516: PPUSH
36517: CALL_OW 500
// base := GetBase ( base_dep ) ;
36521: LD_ADDR_VAR 0 15
36525: PUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: CALL_OW 274
36535: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36536: LD_ADDR_VAR 0 16
36540: PUSH
36541: LD_VAR 0 1
36545: PPUSH
36546: CALL_OW 255
36550: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36551: LD_ADDR_VAR 0 17
36555: PUSH
36556: LD_VAR 0 1
36560: PPUSH
36561: CALL_OW 248
36565: ST_TO_ADDR
// if sources then
36566: LD_VAR 0 5
36570: IFFALSE 36617
// for i = 1 to 3 do
36572: LD_ADDR_VAR 0 8
36576: PUSH
36577: DOUBLE
36578: LD_INT 1
36580: DEC
36581: ST_TO_ADDR
36582: LD_INT 3
36584: PUSH
36585: FOR_TO
36586: IFFALSE 36615
// AddResourceType ( base , i , sources [ i ] ) ;
36588: LD_VAR 0 15
36592: PPUSH
36593: LD_VAR 0 8
36597: PPUSH
36598: LD_VAR 0 5
36602: PUSH
36603: LD_VAR 0 8
36607: ARRAY
36608: PPUSH
36609: CALL_OW 276
36613: GO 36585
36615: POP
36616: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36617: LD_ADDR_VAR 0 18
36621: PUSH
36622: LD_VAR 0 15
36626: PPUSH
36627: LD_VAR 0 2
36631: PPUSH
36632: LD_INT 1
36634: PPUSH
36635: CALL 35878 0 3
36639: ST_TO_ADDR
// InitHc ;
36640: CALL_OW 19
// InitUc ;
36644: CALL_OW 18
// uc_side := side ;
36648: LD_ADDR_OWVAR 20
36652: PUSH
36653: LD_VAR 0 16
36657: ST_TO_ADDR
// uc_nation := nation ;
36658: LD_ADDR_OWVAR 21
36662: PUSH
36663: LD_VAR 0 17
36667: ST_TO_ADDR
// if buildings then
36668: LD_VAR 0 18
36672: IFFALSE 37994
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36674: LD_ADDR_VAR 0 19
36678: PUSH
36679: LD_VAR 0 18
36683: PPUSH
36684: LD_INT 2
36686: PUSH
36687: LD_INT 30
36689: PUSH
36690: LD_INT 29
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 30
36699: PUSH
36700: LD_INT 30
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: PPUSH
36712: CALL_OW 72
36716: ST_TO_ADDR
// if tmp then
36717: LD_VAR 0 19
36721: IFFALSE 36769
// for i in tmp do
36723: LD_ADDR_VAR 0 8
36727: PUSH
36728: LD_VAR 0 19
36732: PUSH
36733: FOR_IN
36734: IFFALSE 36767
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36736: LD_VAR 0 8
36740: PPUSH
36741: CALL_OW 250
36745: PPUSH
36746: LD_VAR 0 8
36750: PPUSH
36751: CALL_OW 251
36755: PPUSH
36756: LD_VAR 0 16
36760: PPUSH
36761: CALL_OW 441
36765: GO 36733
36767: POP
36768: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36769: LD_VAR 0 18
36773: PPUSH
36774: LD_INT 2
36776: PUSH
36777: LD_INT 30
36779: PUSH
36780: LD_INT 32
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 30
36789: PUSH
36790: LD_INT 33
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: PPUSH
36802: CALL_OW 72
36806: IFFALSE 36894
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36808: LD_ADDR_VAR 0 8
36812: PUSH
36813: LD_VAR 0 18
36817: PPUSH
36818: LD_INT 2
36820: PUSH
36821: LD_INT 30
36823: PUSH
36824: LD_INT 32
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 30
36833: PUSH
36834: LD_INT 33
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: PPUSH
36846: CALL_OW 72
36850: PUSH
36851: FOR_IN
36852: IFFALSE 36892
// begin if not GetBWeapon ( i ) then
36854: LD_VAR 0 8
36858: PPUSH
36859: CALL_OW 269
36863: NOT
36864: IFFALSE 36890
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36866: LD_VAR 0 8
36870: PPUSH
36871: LD_VAR 0 8
36875: PPUSH
36876: LD_VAR 0 2
36880: PPUSH
36881: CALL 38140 0 2
36885: PPUSH
36886: CALL_OW 431
// end ;
36890: GO 36851
36892: POP
36893: POP
// end ; for i = 1 to personel do
36894: LD_ADDR_VAR 0 8
36898: PUSH
36899: DOUBLE
36900: LD_INT 1
36902: DEC
36903: ST_TO_ADDR
36904: LD_VAR 0 6
36908: PUSH
36909: FOR_TO
36910: IFFALSE 37974
// begin if i > 4 then
36912: LD_VAR 0 8
36916: PUSH
36917: LD_INT 4
36919: GREATER
36920: IFFALSE 36924
// break ;
36922: GO 37974
// case i of 1 :
36924: LD_VAR 0 8
36928: PUSH
36929: LD_INT 1
36931: DOUBLE
36932: EQUAL
36933: IFTRUE 36937
36935: GO 37017
36937: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36938: LD_ADDR_VAR 0 12
36942: PUSH
36943: LD_VAR 0 18
36947: PPUSH
36948: LD_INT 22
36950: PUSH
36951: LD_VAR 0 16
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 58
36962: PUSH
36963: EMPTY
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: PUSH
36969: LD_INT 30
36971: PUSH
36972: LD_INT 32
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 30
36981: PUSH
36982: LD_INT 4
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 30
36991: PUSH
36992: LD_INT 5
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: PPUSH
37010: CALL_OW 72
37014: ST_TO_ADDR
37015: GO 37239
37017: LD_INT 2
37019: DOUBLE
37020: EQUAL
37021: IFTRUE 37025
37023: GO 37087
37025: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37026: LD_ADDR_VAR 0 12
37030: PUSH
37031: LD_VAR 0 18
37035: PPUSH
37036: LD_INT 22
37038: PUSH
37039: LD_VAR 0 16
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 2
37050: PUSH
37051: LD_INT 30
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 30
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PPUSH
37080: CALL_OW 72
37084: ST_TO_ADDR
37085: GO 37239
37087: LD_INT 3
37089: DOUBLE
37090: EQUAL
37091: IFTRUE 37095
37093: GO 37157
37095: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37096: LD_ADDR_VAR 0 12
37100: PUSH
37101: LD_VAR 0 18
37105: PPUSH
37106: LD_INT 22
37108: PUSH
37109: LD_VAR 0 16
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 2
37120: PUSH
37121: LD_INT 30
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 30
37133: PUSH
37134: LD_INT 3
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: LIST
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PPUSH
37150: CALL_OW 72
37154: ST_TO_ADDR
37155: GO 37239
37157: LD_INT 4
37159: DOUBLE
37160: EQUAL
37161: IFTRUE 37165
37163: GO 37238
37165: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37166: LD_ADDR_VAR 0 12
37170: PUSH
37171: LD_VAR 0 18
37175: PPUSH
37176: LD_INT 22
37178: PUSH
37179: LD_VAR 0 16
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 2
37190: PUSH
37191: LD_INT 30
37193: PUSH
37194: LD_INT 6
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 30
37203: PUSH
37204: LD_INT 7
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 30
37213: PUSH
37214: LD_INT 8
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PPUSH
37231: CALL_OW 72
37235: ST_TO_ADDR
37236: GO 37239
37238: POP
// if i = 1 then
37239: LD_VAR 0 8
37243: PUSH
37244: LD_INT 1
37246: EQUAL
37247: IFFALSE 37358
// begin tmp := [ ] ;
37249: LD_ADDR_VAR 0 19
37253: PUSH
37254: EMPTY
37255: ST_TO_ADDR
// for j in f do
37256: LD_ADDR_VAR 0 9
37260: PUSH
37261: LD_VAR 0 12
37265: PUSH
37266: FOR_IN
37267: IFFALSE 37340
// if GetBType ( j ) = b_bunker then
37269: LD_VAR 0 9
37273: PPUSH
37274: CALL_OW 266
37278: PUSH
37279: LD_INT 32
37281: EQUAL
37282: IFFALSE 37309
// tmp := Insert ( tmp , 1 , j ) else
37284: LD_ADDR_VAR 0 19
37288: PUSH
37289: LD_VAR 0 19
37293: PPUSH
37294: LD_INT 1
37296: PPUSH
37297: LD_VAR 0 9
37301: PPUSH
37302: CALL_OW 2
37306: ST_TO_ADDR
37307: GO 37338
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37309: LD_ADDR_VAR 0 19
37313: PUSH
37314: LD_VAR 0 19
37318: PPUSH
37319: LD_VAR 0 19
37323: PUSH
37324: LD_INT 1
37326: PLUS
37327: PPUSH
37328: LD_VAR 0 9
37332: PPUSH
37333: CALL_OW 2
37337: ST_TO_ADDR
37338: GO 37266
37340: POP
37341: POP
// if tmp then
37342: LD_VAR 0 19
37346: IFFALSE 37358
// f := tmp ;
37348: LD_ADDR_VAR 0 12
37352: PUSH
37353: LD_VAR 0 19
37357: ST_TO_ADDR
// end ; x := personel [ i ] ;
37358: LD_ADDR_VAR 0 13
37362: PUSH
37363: LD_VAR 0 6
37367: PUSH
37368: LD_VAR 0 8
37372: ARRAY
37373: ST_TO_ADDR
// if x = - 1 then
37374: LD_VAR 0 13
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: EQUAL
37383: IFFALSE 37592
// begin for j in f do
37385: LD_ADDR_VAR 0 9
37389: PUSH
37390: LD_VAR 0 12
37394: PUSH
37395: FOR_IN
37396: IFFALSE 37588
// repeat InitHc ;
37398: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37402: LD_VAR 0 9
37406: PPUSH
37407: CALL_OW 266
37411: PUSH
37412: LD_INT 5
37414: EQUAL
37415: IFFALSE 37485
// begin if UnitsInside ( j ) < 3 then
37417: LD_VAR 0 9
37421: PPUSH
37422: CALL_OW 313
37426: PUSH
37427: LD_INT 3
37429: LESS
37430: IFFALSE 37466
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37432: LD_INT 0
37434: PPUSH
37435: LD_INT 5
37437: PUSH
37438: LD_INT 8
37440: PUSH
37441: LD_INT 9
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: PUSH
37449: LD_VAR 0 17
37453: ARRAY
37454: PPUSH
37455: LD_VAR 0 4
37459: PPUSH
37460: CALL_OW 380
37464: GO 37483
// PrepareHuman ( false , i , skill ) ;
37466: LD_INT 0
37468: PPUSH
37469: LD_VAR 0 8
37473: PPUSH
37474: LD_VAR 0 4
37478: PPUSH
37479: CALL_OW 380
// end else
37483: GO 37502
// PrepareHuman ( false , i , skill ) ;
37485: LD_INT 0
37487: PPUSH
37488: LD_VAR 0 8
37492: PPUSH
37493: LD_VAR 0 4
37497: PPUSH
37498: CALL_OW 380
// un := CreateHuman ;
37502: LD_ADDR_VAR 0 14
37506: PUSH
37507: CALL_OW 44
37511: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37512: LD_ADDR_VAR 0 7
37516: PUSH
37517: LD_VAR 0 7
37521: PPUSH
37522: LD_INT 1
37524: PPUSH
37525: LD_VAR 0 14
37529: PPUSH
37530: CALL_OW 2
37534: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37535: LD_VAR 0 14
37539: PPUSH
37540: LD_VAR 0 9
37544: PPUSH
37545: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37549: LD_VAR 0 9
37553: PPUSH
37554: CALL_OW 313
37558: PUSH
37559: LD_INT 6
37561: EQUAL
37562: PUSH
37563: LD_VAR 0 9
37567: PPUSH
37568: CALL_OW 266
37572: PUSH
37573: LD_INT 32
37575: PUSH
37576: LD_INT 31
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: IN
37583: OR
37584: IFFALSE 37398
37586: GO 37395
37588: POP
37589: POP
// end else
37590: GO 37972
// for j = 1 to x do
37592: LD_ADDR_VAR 0 9
37596: PUSH
37597: DOUBLE
37598: LD_INT 1
37600: DEC
37601: ST_TO_ADDR
37602: LD_VAR 0 13
37606: PUSH
37607: FOR_TO
37608: IFFALSE 37970
// begin InitHc ;
37610: CALL_OW 19
// if not f then
37614: LD_VAR 0 12
37618: NOT
37619: IFFALSE 37708
// begin PrepareHuman ( false , i , skill ) ;
37621: LD_INT 0
37623: PPUSH
37624: LD_VAR 0 8
37628: PPUSH
37629: LD_VAR 0 4
37633: PPUSH
37634: CALL_OW 380
// un := CreateHuman ;
37638: LD_ADDR_VAR 0 14
37642: PUSH
37643: CALL_OW 44
37647: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37648: LD_ADDR_VAR 0 7
37652: PUSH
37653: LD_VAR 0 7
37657: PPUSH
37658: LD_INT 1
37660: PPUSH
37661: LD_VAR 0 14
37665: PPUSH
37666: CALL_OW 2
37670: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37671: LD_VAR 0 14
37675: PPUSH
37676: LD_VAR 0 1
37680: PPUSH
37681: CALL_OW 250
37685: PPUSH
37686: LD_VAR 0 1
37690: PPUSH
37691: CALL_OW 251
37695: PPUSH
37696: LD_INT 10
37698: PPUSH
37699: LD_INT 0
37701: PPUSH
37702: CALL_OW 50
// continue ;
37706: GO 37607
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37708: LD_VAR 0 12
37712: PUSH
37713: LD_INT 1
37715: ARRAY
37716: PPUSH
37717: CALL_OW 313
37721: PUSH
37722: LD_VAR 0 12
37726: PUSH
37727: LD_INT 1
37729: ARRAY
37730: PPUSH
37731: CALL_OW 266
37735: PUSH
37736: LD_INT 32
37738: PUSH
37739: LD_INT 31
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: IN
37746: AND
37747: PUSH
37748: LD_VAR 0 12
37752: PUSH
37753: LD_INT 1
37755: ARRAY
37756: PPUSH
37757: CALL_OW 313
37761: PUSH
37762: LD_INT 6
37764: EQUAL
37765: OR
37766: IFFALSE 37786
// f := Delete ( f , 1 ) ;
37768: LD_ADDR_VAR 0 12
37772: PUSH
37773: LD_VAR 0 12
37777: PPUSH
37778: LD_INT 1
37780: PPUSH
37781: CALL_OW 3
37785: ST_TO_ADDR
// if not f then
37786: LD_VAR 0 12
37790: NOT
37791: IFFALSE 37809
// begin x := x + 2 ;
37793: LD_ADDR_VAR 0 13
37797: PUSH
37798: LD_VAR 0 13
37802: PUSH
37803: LD_INT 2
37805: PLUS
37806: ST_TO_ADDR
// continue ;
37807: GO 37607
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37809: LD_VAR 0 12
37813: PUSH
37814: LD_INT 1
37816: ARRAY
37817: PPUSH
37818: CALL_OW 266
37822: PUSH
37823: LD_INT 5
37825: EQUAL
37826: IFFALSE 37900
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37828: LD_VAR 0 12
37832: PUSH
37833: LD_INT 1
37835: ARRAY
37836: PPUSH
37837: CALL_OW 313
37841: PUSH
37842: LD_INT 3
37844: LESS
37845: IFFALSE 37881
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37847: LD_INT 0
37849: PPUSH
37850: LD_INT 5
37852: PUSH
37853: LD_INT 8
37855: PUSH
37856: LD_INT 9
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: LIST
37863: PUSH
37864: LD_VAR 0 17
37868: ARRAY
37869: PPUSH
37870: LD_VAR 0 4
37874: PPUSH
37875: CALL_OW 380
37879: GO 37898
// PrepareHuman ( false , i , skill ) ;
37881: LD_INT 0
37883: PPUSH
37884: LD_VAR 0 8
37888: PPUSH
37889: LD_VAR 0 4
37893: PPUSH
37894: CALL_OW 380
// end else
37898: GO 37917
// PrepareHuman ( false , i , skill ) ;
37900: LD_INT 0
37902: PPUSH
37903: LD_VAR 0 8
37907: PPUSH
37908: LD_VAR 0 4
37912: PPUSH
37913: CALL_OW 380
// un := CreateHuman ;
37917: LD_ADDR_VAR 0 14
37921: PUSH
37922: CALL_OW 44
37926: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37927: LD_ADDR_VAR 0 7
37931: PUSH
37932: LD_VAR 0 7
37936: PPUSH
37937: LD_INT 1
37939: PPUSH
37940: LD_VAR 0 14
37944: PPUSH
37945: CALL_OW 2
37949: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37950: LD_VAR 0 14
37954: PPUSH
37955: LD_VAR 0 12
37959: PUSH
37960: LD_INT 1
37962: ARRAY
37963: PPUSH
37964: CALL_OW 52
// end ;
37968: GO 37607
37970: POP
37971: POP
// end ;
37972: GO 36909
37974: POP
37975: POP
// result := result ^ buildings ;
37976: LD_ADDR_VAR 0 7
37980: PUSH
37981: LD_VAR 0 7
37985: PUSH
37986: LD_VAR 0 18
37990: ADD
37991: ST_TO_ADDR
// end else
37992: GO 38135
// begin for i = 1 to personel do
37994: LD_ADDR_VAR 0 8
37998: PUSH
37999: DOUBLE
38000: LD_INT 1
38002: DEC
38003: ST_TO_ADDR
38004: LD_VAR 0 6
38008: PUSH
38009: FOR_TO
38010: IFFALSE 38133
// begin if i > 4 then
38012: LD_VAR 0 8
38016: PUSH
38017: LD_INT 4
38019: GREATER
38020: IFFALSE 38024
// break ;
38022: GO 38133
// x := personel [ i ] ;
38024: LD_ADDR_VAR 0 13
38028: PUSH
38029: LD_VAR 0 6
38033: PUSH
38034: LD_VAR 0 8
38038: ARRAY
38039: ST_TO_ADDR
// if x = - 1 then
38040: LD_VAR 0 13
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: EQUAL
38049: IFFALSE 38053
// continue ;
38051: GO 38009
// PrepareHuman ( false , i , skill ) ;
38053: LD_INT 0
38055: PPUSH
38056: LD_VAR 0 8
38060: PPUSH
38061: LD_VAR 0 4
38065: PPUSH
38066: CALL_OW 380
// un := CreateHuman ;
38070: LD_ADDR_VAR 0 14
38074: PUSH
38075: CALL_OW 44
38079: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38080: LD_VAR 0 14
38084: PPUSH
38085: LD_VAR 0 1
38089: PPUSH
38090: CALL_OW 250
38094: PPUSH
38095: LD_VAR 0 1
38099: PPUSH
38100: CALL_OW 251
38104: PPUSH
38105: LD_INT 10
38107: PPUSH
38108: LD_INT 0
38110: PPUSH
38111: CALL_OW 50
// result := result ^ un ;
38115: LD_ADDR_VAR 0 7
38119: PUSH
38120: LD_VAR 0 7
38124: PUSH
38125: LD_VAR 0 14
38129: ADD
38130: ST_TO_ADDR
// end ;
38131: GO 38009
38133: POP
38134: POP
// end ; end ;
38135: LD_VAR 0 7
38139: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38140: LD_INT 0
38142: PPUSH
38143: PPUSH
38144: PPUSH
38145: PPUSH
38146: PPUSH
38147: PPUSH
38148: PPUSH
38149: PPUSH
38150: PPUSH
38151: PPUSH
38152: PPUSH
38153: PPUSH
38154: PPUSH
38155: PPUSH
38156: PPUSH
38157: PPUSH
// result := false ;
38158: LD_ADDR_VAR 0 3
38162: PUSH
38163: LD_INT 0
38165: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38166: LD_VAR 0 1
38170: NOT
38171: PUSH
38172: LD_VAR 0 1
38176: PPUSH
38177: CALL_OW 266
38181: PUSH
38182: LD_INT 32
38184: PUSH
38185: LD_INT 33
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: IN
38192: NOT
38193: OR
38194: IFFALSE 38198
// exit ;
38196: GO 39307
// nat := GetNation ( tower ) ;
38198: LD_ADDR_VAR 0 12
38202: PUSH
38203: LD_VAR 0 1
38207: PPUSH
38208: CALL_OW 248
38212: ST_TO_ADDR
// side := GetSide ( tower ) ;
38213: LD_ADDR_VAR 0 16
38217: PUSH
38218: LD_VAR 0 1
38222: PPUSH
38223: CALL_OW 255
38227: ST_TO_ADDR
// x := GetX ( tower ) ;
38228: LD_ADDR_VAR 0 10
38232: PUSH
38233: LD_VAR 0 1
38237: PPUSH
38238: CALL_OW 250
38242: ST_TO_ADDR
// y := GetY ( tower ) ;
38243: LD_ADDR_VAR 0 11
38247: PUSH
38248: LD_VAR 0 1
38252: PPUSH
38253: CALL_OW 251
38257: ST_TO_ADDR
// if not x or not y then
38258: LD_VAR 0 10
38262: NOT
38263: PUSH
38264: LD_VAR 0 11
38268: NOT
38269: OR
38270: IFFALSE 38274
// exit ;
38272: GO 39307
// weapon := 0 ;
38274: LD_ADDR_VAR 0 18
38278: PUSH
38279: LD_INT 0
38281: ST_TO_ADDR
// fac_list := [ ] ;
38282: LD_ADDR_VAR 0 17
38286: PUSH
38287: EMPTY
38288: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38289: LD_ADDR_VAR 0 6
38293: PUSH
38294: LD_VAR 0 1
38298: PPUSH
38299: CALL_OW 274
38303: PPUSH
38304: LD_VAR 0 2
38308: PPUSH
38309: LD_INT 0
38311: PPUSH
38312: CALL 35878 0 3
38316: PPUSH
38317: LD_INT 30
38319: PUSH
38320: LD_INT 3
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PPUSH
38327: CALL_OW 72
38331: ST_TO_ADDR
// if not factories then
38332: LD_VAR 0 6
38336: NOT
38337: IFFALSE 38341
// exit ;
38339: GO 39307
// for i in factories do
38341: LD_ADDR_VAR 0 8
38345: PUSH
38346: LD_VAR 0 6
38350: PUSH
38351: FOR_IN
38352: IFFALSE 38377
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38354: LD_ADDR_VAR 0 17
38358: PUSH
38359: LD_VAR 0 17
38363: PUSH
38364: LD_VAR 0 8
38368: PPUSH
38369: CALL_OW 478
38373: UNION
38374: ST_TO_ADDR
38375: GO 38351
38377: POP
38378: POP
// if not fac_list then
38379: LD_VAR 0 17
38383: NOT
38384: IFFALSE 38388
// exit ;
38386: GO 39307
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38388: LD_ADDR_VAR 0 5
38392: PUSH
38393: LD_INT 4
38395: PUSH
38396: LD_INT 5
38398: PUSH
38399: LD_INT 9
38401: PUSH
38402: LD_INT 10
38404: PUSH
38405: LD_INT 6
38407: PUSH
38408: LD_INT 7
38410: PUSH
38411: LD_INT 11
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 27
38425: PUSH
38426: LD_INT 28
38428: PUSH
38429: LD_INT 26
38431: PUSH
38432: LD_INT 30
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 43
38443: PUSH
38444: LD_INT 44
38446: PUSH
38447: LD_INT 46
38449: PUSH
38450: LD_INT 45
38452: PUSH
38453: LD_INT 47
38455: PUSH
38456: LD_INT 49
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: LIST
38471: PUSH
38472: LD_VAR 0 12
38476: ARRAY
38477: ST_TO_ADDR
// list := list isect fac_list ;
38478: LD_ADDR_VAR 0 5
38482: PUSH
38483: LD_VAR 0 5
38487: PUSH
38488: LD_VAR 0 17
38492: ISECT
38493: ST_TO_ADDR
// if not list then
38494: LD_VAR 0 5
38498: NOT
38499: IFFALSE 38503
// exit ;
38501: GO 39307
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38503: LD_VAR 0 12
38507: PUSH
38508: LD_INT 3
38510: EQUAL
38511: PUSH
38512: LD_INT 49
38514: PUSH
38515: LD_VAR 0 5
38519: IN
38520: AND
38521: PUSH
38522: LD_INT 31
38524: PPUSH
38525: LD_VAR 0 16
38529: PPUSH
38530: CALL_OW 321
38534: PUSH
38535: LD_INT 2
38537: EQUAL
38538: AND
38539: IFFALSE 38599
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38541: LD_INT 22
38543: PUSH
38544: LD_VAR 0 16
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 35
38555: PUSH
38556: LD_INT 49
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 91
38565: PUSH
38566: LD_VAR 0 1
38570: PUSH
38571: LD_INT 10
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: LIST
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: LIST
38583: PPUSH
38584: CALL_OW 69
38588: NOT
38589: IFFALSE 38599
// weapon := ru_time_lapser ;
38591: LD_ADDR_VAR 0 18
38595: PUSH
38596: LD_INT 49
38598: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38599: LD_VAR 0 12
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: IN
38614: PUSH
38615: LD_INT 11
38617: PUSH
38618: LD_VAR 0 5
38622: IN
38623: PUSH
38624: LD_INT 30
38626: PUSH
38627: LD_VAR 0 5
38631: IN
38632: OR
38633: AND
38634: PUSH
38635: LD_INT 6
38637: PPUSH
38638: LD_VAR 0 16
38642: PPUSH
38643: CALL_OW 321
38647: PUSH
38648: LD_INT 2
38650: EQUAL
38651: AND
38652: IFFALSE 38817
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38654: LD_INT 22
38656: PUSH
38657: LD_VAR 0 16
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: LD_INT 35
38671: PUSH
38672: LD_INT 11
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 35
38681: PUSH
38682: LD_INT 30
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 91
38696: PUSH
38697: LD_VAR 0 1
38701: PUSH
38702: LD_INT 18
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: LIST
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: PPUSH
38715: CALL_OW 69
38719: NOT
38720: PUSH
38721: LD_INT 22
38723: PUSH
38724: LD_VAR 0 16
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: PUSH
38736: LD_INT 30
38738: PUSH
38739: LD_INT 32
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 30
38748: PUSH
38749: LD_INT 33
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 91
38763: PUSH
38764: LD_VAR 0 1
38768: PUSH
38769: LD_INT 12
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: PPUSH
38785: CALL_OW 69
38789: PUSH
38790: LD_INT 2
38792: GREATER
38793: AND
38794: IFFALSE 38817
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38796: LD_ADDR_VAR 0 18
38800: PUSH
38801: LD_INT 11
38803: PUSH
38804: LD_INT 30
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_VAR 0 12
38815: ARRAY
38816: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38817: LD_VAR 0 18
38821: NOT
38822: PUSH
38823: LD_INT 40
38825: PPUSH
38826: LD_VAR 0 16
38830: PPUSH
38831: CALL_OW 321
38835: PUSH
38836: LD_INT 2
38838: EQUAL
38839: AND
38840: PUSH
38841: LD_INT 7
38843: PUSH
38844: LD_VAR 0 5
38848: IN
38849: PUSH
38850: LD_INT 28
38852: PUSH
38853: LD_VAR 0 5
38857: IN
38858: OR
38859: PUSH
38860: LD_INT 45
38862: PUSH
38863: LD_VAR 0 5
38867: IN
38868: OR
38869: AND
38870: IFFALSE 39124
// begin hex := GetHexInfo ( x , y ) ;
38872: LD_ADDR_VAR 0 4
38876: PUSH
38877: LD_VAR 0 10
38881: PPUSH
38882: LD_VAR 0 11
38886: PPUSH
38887: CALL_OW 546
38891: ST_TO_ADDR
// if hex [ 1 ] then
38892: LD_VAR 0 4
38896: PUSH
38897: LD_INT 1
38899: ARRAY
38900: IFFALSE 38904
// exit ;
38902: GO 39307
// height := hex [ 2 ] ;
38904: LD_ADDR_VAR 0 15
38908: PUSH
38909: LD_VAR 0 4
38913: PUSH
38914: LD_INT 2
38916: ARRAY
38917: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38918: LD_ADDR_VAR 0 14
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: LD_INT 3
38931: PUSH
38932: LD_INT 5
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: ST_TO_ADDR
// for i in tmp do
38941: LD_ADDR_VAR 0 8
38945: PUSH
38946: LD_VAR 0 14
38950: PUSH
38951: FOR_IN
38952: IFFALSE 39122
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38954: LD_ADDR_VAR 0 9
38958: PUSH
38959: LD_VAR 0 10
38963: PPUSH
38964: LD_VAR 0 8
38968: PPUSH
38969: LD_INT 5
38971: PPUSH
38972: CALL_OW 272
38976: PUSH
38977: LD_VAR 0 11
38981: PPUSH
38982: LD_VAR 0 8
38986: PPUSH
38987: LD_INT 5
38989: PPUSH
38990: CALL_OW 273
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38999: LD_VAR 0 9
39003: PUSH
39004: LD_INT 1
39006: ARRAY
39007: PPUSH
39008: LD_VAR 0 9
39012: PUSH
39013: LD_INT 2
39015: ARRAY
39016: PPUSH
39017: CALL_OW 488
39021: IFFALSE 39120
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39023: LD_ADDR_VAR 0 4
39027: PUSH
39028: LD_VAR 0 9
39032: PUSH
39033: LD_INT 1
39035: ARRAY
39036: PPUSH
39037: LD_VAR 0 9
39041: PUSH
39042: LD_INT 2
39044: ARRAY
39045: PPUSH
39046: CALL_OW 546
39050: ST_TO_ADDR
// if hex [ 1 ] then
39051: LD_VAR 0 4
39055: PUSH
39056: LD_INT 1
39058: ARRAY
39059: IFFALSE 39063
// continue ;
39061: GO 38951
// h := hex [ 2 ] ;
39063: LD_ADDR_VAR 0 13
39067: PUSH
39068: LD_VAR 0 4
39072: PUSH
39073: LD_INT 2
39075: ARRAY
39076: ST_TO_ADDR
// if h + 7 < height then
39077: LD_VAR 0 13
39081: PUSH
39082: LD_INT 7
39084: PLUS
39085: PUSH
39086: LD_VAR 0 15
39090: LESS
39091: IFFALSE 39120
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39093: LD_ADDR_VAR 0 18
39097: PUSH
39098: LD_INT 7
39100: PUSH
39101: LD_INT 28
39103: PUSH
39104: LD_INT 45
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: PUSH
39112: LD_VAR 0 12
39116: ARRAY
39117: ST_TO_ADDR
// break ;
39118: GO 39122
// end ; end ; end ;
39120: GO 38951
39122: POP
39123: POP
// end ; if not weapon then
39124: LD_VAR 0 18
39128: NOT
39129: IFFALSE 39189
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39131: LD_ADDR_VAR 0 5
39135: PUSH
39136: LD_VAR 0 5
39140: PUSH
39141: LD_INT 11
39143: PUSH
39144: LD_INT 30
39146: PUSH
39147: LD_INT 49
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: LIST
39154: DIFF
39155: ST_TO_ADDR
// if not list then
39156: LD_VAR 0 5
39160: NOT
39161: IFFALSE 39165
// exit ;
39163: GO 39307
// weapon := list [ rand ( 1 , list ) ] ;
39165: LD_ADDR_VAR 0 18
39169: PUSH
39170: LD_VAR 0 5
39174: PUSH
39175: LD_INT 1
39177: PPUSH
39178: LD_VAR 0 5
39182: PPUSH
39183: CALL_OW 12
39187: ARRAY
39188: ST_TO_ADDR
// end ; if weapon then
39189: LD_VAR 0 18
39193: IFFALSE 39307
// begin tmp := CostOfWeapon ( weapon ) ;
39195: LD_ADDR_VAR 0 14
39199: PUSH
39200: LD_VAR 0 18
39204: PPUSH
39205: CALL_OW 451
39209: ST_TO_ADDR
// j := GetBase ( tower ) ;
39210: LD_ADDR_VAR 0 9
39214: PUSH
39215: LD_VAR 0 1
39219: PPUSH
39220: CALL_OW 274
39224: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39225: LD_VAR 0 9
39229: PPUSH
39230: LD_INT 1
39232: PPUSH
39233: CALL_OW 275
39237: PUSH
39238: LD_VAR 0 14
39242: PUSH
39243: LD_INT 1
39245: ARRAY
39246: GREATEREQUAL
39247: PUSH
39248: LD_VAR 0 9
39252: PPUSH
39253: LD_INT 2
39255: PPUSH
39256: CALL_OW 275
39260: PUSH
39261: LD_VAR 0 14
39265: PUSH
39266: LD_INT 2
39268: ARRAY
39269: GREATEREQUAL
39270: AND
39271: PUSH
39272: LD_VAR 0 9
39276: PPUSH
39277: LD_INT 3
39279: PPUSH
39280: CALL_OW 275
39284: PUSH
39285: LD_VAR 0 14
39289: PUSH
39290: LD_INT 3
39292: ARRAY
39293: GREATEREQUAL
39294: AND
39295: IFFALSE 39307
// result := weapon ;
39297: LD_ADDR_VAR 0 3
39301: PUSH
39302: LD_VAR 0 18
39306: ST_TO_ADDR
// end ; end ;
39307: LD_VAR 0 3
39311: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39312: LD_INT 0
39314: PPUSH
39315: PPUSH
// result := true ;
39316: LD_ADDR_VAR 0 3
39320: PUSH
39321: LD_INT 1
39323: ST_TO_ADDR
// if array1 = array2 then
39324: LD_VAR 0 1
39328: PUSH
39329: LD_VAR 0 2
39333: EQUAL
39334: IFFALSE 39394
// begin for i = 1 to array1 do
39336: LD_ADDR_VAR 0 4
39340: PUSH
39341: DOUBLE
39342: LD_INT 1
39344: DEC
39345: ST_TO_ADDR
39346: LD_VAR 0 1
39350: PUSH
39351: FOR_TO
39352: IFFALSE 39390
// if array1 [ i ] <> array2 [ i ] then
39354: LD_VAR 0 1
39358: PUSH
39359: LD_VAR 0 4
39363: ARRAY
39364: PUSH
39365: LD_VAR 0 2
39369: PUSH
39370: LD_VAR 0 4
39374: ARRAY
39375: NONEQUAL
39376: IFFALSE 39388
// begin result := false ;
39378: LD_ADDR_VAR 0 3
39382: PUSH
39383: LD_INT 0
39385: ST_TO_ADDR
// break ;
39386: GO 39390
// end ;
39388: GO 39351
39390: POP
39391: POP
// end else
39392: GO 39402
// result := false ;
39394: LD_ADDR_VAR 0 3
39398: PUSH
39399: LD_INT 0
39401: ST_TO_ADDR
// end ;
39402: LD_VAR 0 3
39406: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39407: LD_INT 0
39409: PPUSH
39410: PPUSH
// if not array1 or not array2 then
39411: LD_VAR 0 1
39415: NOT
39416: PUSH
39417: LD_VAR 0 2
39421: NOT
39422: OR
39423: IFFALSE 39427
// exit ;
39425: GO 39491
// result := true ;
39427: LD_ADDR_VAR 0 3
39431: PUSH
39432: LD_INT 1
39434: ST_TO_ADDR
// for i = 1 to array1 do
39435: LD_ADDR_VAR 0 4
39439: PUSH
39440: DOUBLE
39441: LD_INT 1
39443: DEC
39444: ST_TO_ADDR
39445: LD_VAR 0 1
39449: PUSH
39450: FOR_TO
39451: IFFALSE 39489
// if array1 [ i ] <> array2 [ i ] then
39453: LD_VAR 0 1
39457: PUSH
39458: LD_VAR 0 4
39462: ARRAY
39463: PUSH
39464: LD_VAR 0 2
39468: PUSH
39469: LD_VAR 0 4
39473: ARRAY
39474: NONEQUAL
39475: IFFALSE 39487
// begin result := false ;
39477: LD_ADDR_VAR 0 3
39481: PUSH
39482: LD_INT 0
39484: ST_TO_ADDR
// break ;
39485: GO 39489
// end ;
39487: GO 39450
39489: POP
39490: POP
// end ;
39491: LD_VAR 0 3
39495: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39496: LD_INT 0
39498: PPUSH
39499: PPUSH
39500: PPUSH
// pom := GetBase ( fac ) ;
39501: LD_ADDR_VAR 0 5
39505: PUSH
39506: LD_VAR 0 1
39510: PPUSH
39511: CALL_OW 274
39515: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39516: LD_ADDR_VAR 0 4
39520: PUSH
39521: LD_VAR 0 2
39525: PUSH
39526: LD_INT 1
39528: ARRAY
39529: PPUSH
39530: LD_VAR 0 2
39534: PUSH
39535: LD_INT 2
39537: ARRAY
39538: PPUSH
39539: LD_VAR 0 2
39543: PUSH
39544: LD_INT 3
39546: ARRAY
39547: PPUSH
39548: LD_VAR 0 2
39552: PUSH
39553: LD_INT 4
39555: ARRAY
39556: PPUSH
39557: CALL_OW 449
39561: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39562: LD_ADDR_VAR 0 3
39566: PUSH
39567: LD_VAR 0 5
39571: PPUSH
39572: LD_INT 1
39574: PPUSH
39575: CALL_OW 275
39579: PUSH
39580: LD_VAR 0 4
39584: PUSH
39585: LD_INT 1
39587: ARRAY
39588: GREATEREQUAL
39589: PUSH
39590: LD_VAR 0 5
39594: PPUSH
39595: LD_INT 2
39597: PPUSH
39598: CALL_OW 275
39602: PUSH
39603: LD_VAR 0 4
39607: PUSH
39608: LD_INT 2
39610: ARRAY
39611: GREATEREQUAL
39612: AND
39613: PUSH
39614: LD_VAR 0 5
39618: PPUSH
39619: LD_INT 3
39621: PPUSH
39622: CALL_OW 275
39626: PUSH
39627: LD_VAR 0 4
39631: PUSH
39632: LD_INT 3
39634: ARRAY
39635: GREATEREQUAL
39636: AND
39637: ST_TO_ADDR
// end ;
39638: LD_VAR 0 3
39642: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39643: LD_INT 0
39645: PPUSH
39646: PPUSH
39647: PPUSH
39648: PPUSH
// pom := GetBase ( building ) ;
39649: LD_ADDR_VAR 0 3
39653: PUSH
39654: LD_VAR 0 1
39658: PPUSH
39659: CALL_OW 274
39663: ST_TO_ADDR
// if not pom then
39664: LD_VAR 0 3
39668: NOT
39669: IFFALSE 39673
// exit ;
39671: GO 39843
// btype := GetBType ( building ) ;
39673: LD_ADDR_VAR 0 5
39677: PUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 266
39687: ST_TO_ADDR
// if btype = b_armoury then
39688: LD_VAR 0 5
39692: PUSH
39693: LD_INT 4
39695: EQUAL
39696: IFFALSE 39706
// btype := b_barracks ;
39698: LD_ADDR_VAR 0 5
39702: PUSH
39703: LD_INT 5
39705: ST_TO_ADDR
// if btype = b_depot then
39706: LD_VAR 0 5
39710: PUSH
39711: LD_INT 0
39713: EQUAL
39714: IFFALSE 39724
// btype := b_warehouse ;
39716: LD_ADDR_VAR 0 5
39720: PUSH
39721: LD_INT 1
39723: ST_TO_ADDR
// if btype = b_workshop then
39724: LD_VAR 0 5
39728: PUSH
39729: LD_INT 2
39731: EQUAL
39732: IFFALSE 39742
// btype := b_factory ;
39734: LD_ADDR_VAR 0 5
39738: PUSH
39739: LD_INT 3
39741: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39742: LD_ADDR_VAR 0 4
39746: PUSH
39747: LD_VAR 0 5
39751: PPUSH
39752: LD_VAR 0 1
39756: PPUSH
39757: CALL_OW 248
39761: PPUSH
39762: CALL_OW 450
39766: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39767: LD_ADDR_VAR 0 2
39771: PUSH
39772: LD_VAR 0 3
39776: PPUSH
39777: LD_INT 1
39779: PPUSH
39780: CALL_OW 275
39784: PUSH
39785: LD_VAR 0 4
39789: PUSH
39790: LD_INT 1
39792: ARRAY
39793: GREATEREQUAL
39794: PUSH
39795: LD_VAR 0 3
39799: PPUSH
39800: LD_INT 2
39802: PPUSH
39803: CALL_OW 275
39807: PUSH
39808: LD_VAR 0 4
39812: PUSH
39813: LD_INT 2
39815: ARRAY
39816: GREATEREQUAL
39817: AND
39818: PUSH
39819: LD_VAR 0 3
39823: PPUSH
39824: LD_INT 3
39826: PPUSH
39827: CALL_OW 275
39831: PUSH
39832: LD_VAR 0 4
39836: PUSH
39837: LD_INT 3
39839: ARRAY
39840: GREATEREQUAL
39841: AND
39842: ST_TO_ADDR
// end ;
39843: LD_VAR 0 2
39847: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39848: LD_INT 0
39850: PPUSH
39851: PPUSH
39852: PPUSH
// pom := GetBase ( building ) ;
39853: LD_ADDR_VAR 0 4
39857: PUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 274
39867: ST_TO_ADDR
// if not pom then
39868: LD_VAR 0 4
39872: NOT
39873: IFFALSE 39877
// exit ;
39875: GO 39978
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39877: LD_ADDR_VAR 0 5
39881: PUSH
39882: LD_VAR 0 2
39886: PPUSH
39887: LD_VAR 0 1
39891: PPUSH
39892: CALL_OW 248
39896: PPUSH
39897: CALL_OW 450
39901: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39902: LD_ADDR_VAR 0 3
39906: PUSH
39907: LD_VAR 0 4
39911: PPUSH
39912: LD_INT 1
39914: PPUSH
39915: CALL_OW 275
39919: PUSH
39920: LD_VAR 0 5
39924: PUSH
39925: LD_INT 1
39927: ARRAY
39928: GREATEREQUAL
39929: PUSH
39930: LD_VAR 0 4
39934: PPUSH
39935: LD_INT 2
39937: PPUSH
39938: CALL_OW 275
39942: PUSH
39943: LD_VAR 0 5
39947: PUSH
39948: LD_INT 2
39950: ARRAY
39951: GREATEREQUAL
39952: AND
39953: PUSH
39954: LD_VAR 0 4
39958: PPUSH
39959: LD_INT 3
39961: PPUSH
39962: CALL_OW 275
39966: PUSH
39967: LD_VAR 0 5
39971: PUSH
39972: LD_INT 3
39974: ARRAY
39975: GREATEREQUAL
39976: AND
39977: ST_TO_ADDR
// end ;
39978: LD_VAR 0 3
39982: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39983: LD_INT 0
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
39995: PPUSH
// result := false ;
39996: LD_ADDR_VAR 0 8
40000: PUSH
40001: LD_INT 0
40003: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40004: LD_VAR 0 5
40008: NOT
40009: PUSH
40010: LD_VAR 0 1
40014: NOT
40015: OR
40016: PUSH
40017: LD_VAR 0 2
40021: NOT
40022: OR
40023: PUSH
40024: LD_VAR 0 3
40028: NOT
40029: OR
40030: IFFALSE 40034
// exit ;
40032: GO 40848
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40034: LD_ADDR_VAR 0 14
40038: PUSH
40039: LD_VAR 0 1
40043: PPUSH
40044: LD_VAR 0 2
40048: PPUSH
40049: LD_VAR 0 3
40053: PPUSH
40054: LD_VAR 0 4
40058: PPUSH
40059: LD_VAR 0 5
40063: PUSH
40064: LD_INT 1
40066: ARRAY
40067: PPUSH
40068: CALL_OW 248
40072: PPUSH
40073: LD_INT 0
40075: PPUSH
40076: CALL 42081 0 6
40080: ST_TO_ADDR
// if not hexes then
40081: LD_VAR 0 14
40085: NOT
40086: IFFALSE 40090
// exit ;
40088: GO 40848
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40090: LD_ADDR_VAR 0 17
40094: PUSH
40095: LD_VAR 0 5
40099: PPUSH
40100: LD_INT 22
40102: PUSH
40103: LD_VAR 0 13
40107: PPUSH
40108: CALL_OW 255
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: LD_INT 30
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 30
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: LIST
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PPUSH
40149: CALL_OW 72
40153: ST_TO_ADDR
// for i = 1 to hexes do
40154: LD_ADDR_VAR 0 9
40158: PUSH
40159: DOUBLE
40160: LD_INT 1
40162: DEC
40163: ST_TO_ADDR
40164: LD_VAR 0 14
40168: PUSH
40169: FOR_TO
40170: IFFALSE 40846
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40172: LD_ADDR_VAR 0 13
40176: PUSH
40177: LD_VAR 0 14
40181: PUSH
40182: LD_VAR 0 9
40186: ARRAY
40187: PUSH
40188: LD_INT 1
40190: ARRAY
40191: PPUSH
40192: LD_VAR 0 14
40196: PUSH
40197: LD_VAR 0 9
40201: ARRAY
40202: PUSH
40203: LD_INT 2
40205: ARRAY
40206: PPUSH
40207: CALL_OW 428
40211: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40212: LD_VAR 0 14
40216: PUSH
40217: LD_VAR 0 9
40221: ARRAY
40222: PUSH
40223: LD_INT 1
40225: ARRAY
40226: PPUSH
40227: LD_VAR 0 14
40231: PUSH
40232: LD_VAR 0 9
40236: ARRAY
40237: PUSH
40238: LD_INT 2
40240: ARRAY
40241: PPUSH
40242: CALL_OW 351
40246: PUSH
40247: LD_VAR 0 14
40251: PUSH
40252: LD_VAR 0 9
40256: ARRAY
40257: PUSH
40258: LD_INT 1
40260: ARRAY
40261: PPUSH
40262: LD_VAR 0 14
40266: PUSH
40267: LD_VAR 0 9
40271: ARRAY
40272: PUSH
40273: LD_INT 2
40275: ARRAY
40276: PPUSH
40277: CALL_OW 488
40281: NOT
40282: OR
40283: PUSH
40284: LD_VAR 0 13
40288: PPUSH
40289: CALL_OW 247
40293: PUSH
40294: LD_INT 3
40296: EQUAL
40297: OR
40298: IFFALSE 40304
// exit ;
40300: POP
40301: POP
40302: GO 40848
// if not tmp then
40304: LD_VAR 0 13
40308: NOT
40309: IFFALSE 40313
// continue ;
40311: GO 40169
// result := true ;
40313: LD_ADDR_VAR 0 8
40317: PUSH
40318: LD_INT 1
40320: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40321: LD_VAR 0 6
40325: PUSH
40326: LD_VAR 0 13
40330: PPUSH
40331: CALL_OW 247
40335: PUSH
40336: LD_INT 2
40338: EQUAL
40339: AND
40340: PUSH
40341: LD_VAR 0 13
40345: PPUSH
40346: CALL_OW 263
40350: PUSH
40351: LD_INT 1
40353: EQUAL
40354: AND
40355: IFFALSE 40519
// begin if IsDrivenBy ( tmp ) then
40357: LD_VAR 0 13
40361: PPUSH
40362: CALL_OW 311
40366: IFFALSE 40370
// continue ;
40368: GO 40169
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40370: LD_VAR 0 6
40374: PPUSH
40375: LD_INT 3
40377: PUSH
40378: LD_INT 60
40380: PUSH
40381: EMPTY
40382: LIST
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 3
40390: PUSH
40391: LD_INT 55
40393: PUSH
40394: EMPTY
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PPUSH
40405: CALL_OW 72
40409: IFFALSE 40517
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40411: LD_ADDR_VAR 0 18
40415: PUSH
40416: LD_VAR 0 6
40420: PPUSH
40421: LD_INT 3
40423: PUSH
40424: LD_INT 60
40426: PUSH
40427: EMPTY
40428: LIST
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 3
40436: PUSH
40437: LD_INT 55
40439: PUSH
40440: EMPTY
40441: LIST
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PPUSH
40451: CALL_OW 72
40455: PUSH
40456: LD_INT 1
40458: ARRAY
40459: ST_TO_ADDR
// if IsInUnit ( driver ) then
40460: LD_VAR 0 18
40464: PPUSH
40465: CALL_OW 310
40469: IFFALSE 40480
// ComExit ( driver ) ;
40471: LD_VAR 0 18
40475: PPUSH
40476: CALL 65861 0 1
// AddComEnterUnit ( driver , tmp ) ;
40480: LD_VAR 0 18
40484: PPUSH
40485: LD_VAR 0 13
40489: PPUSH
40490: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40494: LD_VAR 0 18
40498: PPUSH
40499: LD_VAR 0 7
40503: PPUSH
40504: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40508: LD_VAR 0 18
40512: PPUSH
40513: CALL_OW 181
// end ; continue ;
40517: GO 40169
// end ; if not cleaners or not tmp in cleaners then
40519: LD_VAR 0 6
40523: NOT
40524: PUSH
40525: LD_VAR 0 13
40529: PUSH
40530: LD_VAR 0 6
40534: IN
40535: NOT
40536: OR
40537: IFFALSE 40844
// begin if dep then
40539: LD_VAR 0 17
40543: IFFALSE 40679
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40545: LD_ADDR_VAR 0 16
40549: PUSH
40550: LD_VAR 0 17
40554: PUSH
40555: LD_INT 1
40557: ARRAY
40558: PPUSH
40559: CALL_OW 250
40563: PPUSH
40564: LD_VAR 0 17
40568: PUSH
40569: LD_INT 1
40571: ARRAY
40572: PPUSH
40573: CALL_OW 254
40577: PPUSH
40578: LD_INT 5
40580: PPUSH
40581: CALL_OW 272
40585: PUSH
40586: LD_VAR 0 17
40590: PUSH
40591: LD_INT 1
40593: ARRAY
40594: PPUSH
40595: CALL_OW 251
40599: PPUSH
40600: LD_VAR 0 17
40604: PUSH
40605: LD_INT 1
40607: ARRAY
40608: PPUSH
40609: CALL_OW 254
40613: PPUSH
40614: LD_INT 5
40616: PPUSH
40617: CALL_OW 273
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40626: LD_VAR 0 16
40630: PUSH
40631: LD_INT 1
40633: ARRAY
40634: PPUSH
40635: LD_VAR 0 16
40639: PUSH
40640: LD_INT 2
40642: ARRAY
40643: PPUSH
40644: CALL_OW 488
40648: IFFALSE 40679
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40650: LD_VAR 0 13
40654: PPUSH
40655: LD_VAR 0 16
40659: PUSH
40660: LD_INT 1
40662: ARRAY
40663: PPUSH
40664: LD_VAR 0 16
40668: PUSH
40669: LD_INT 2
40671: ARRAY
40672: PPUSH
40673: CALL_OW 111
// continue ;
40677: GO 40169
// end ; end ; r := GetDir ( tmp ) ;
40679: LD_ADDR_VAR 0 15
40683: PUSH
40684: LD_VAR 0 13
40688: PPUSH
40689: CALL_OW 254
40693: ST_TO_ADDR
// if r = 5 then
40694: LD_VAR 0 15
40698: PUSH
40699: LD_INT 5
40701: EQUAL
40702: IFFALSE 40712
// r := 0 ;
40704: LD_ADDR_VAR 0 15
40708: PUSH
40709: LD_INT 0
40711: ST_TO_ADDR
// for j = r to 5 do
40712: LD_ADDR_VAR 0 10
40716: PUSH
40717: DOUBLE
40718: LD_VAR 0 15
40722: DEC
40723: ST_TO_ADDR
40724: LD_INT 5
40726: PUSH
40727: FOR_TO
40728: IFFALSE 40842
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40730: LD_ADDR_VAR 0 11
40734: PUSH
40735: LD_VAR 0 13
40739: PPUSH
40740: CALL_OW 250
40744: PPUSH
40745: LD_VAR 0 10
40749: PPUSH
40750: LD_INT 2
40752: PPUSH
40753: CALL_OW 272
40757: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40758: LD_ADDR_VAR 0 12
40762: PUSH
40763: LD_VAR 0 13
40767: PPUSH
40768: CALL_OW 251
40772: PPUSH
40773: LD_VAR 0 10
40777: PPUSH
40778: LD_INT 2
40780: PPUSH
40781: CALL_OW 273
40785: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40786: LD_VAR 0 11
40790: PPUSH
40791: LD_VAR 0 12
40795: PPUSH
40796: CALL_OW 488
40800: PUSH
40801: LD_VAR 0 11
40805: PPUSH
40806: LD_VAR 0 12
40810: PPUSH
40811: CALL_OW 428
40815: NOT
40816: AND
40817: IFFALSE 40840
// begin ComMoveXY ( tmp , _x , _y ) ;
40819: LD_VAR 0 13
40823: PPUSH
40824: LD_VAR 0 11
40828: PPUSH
40829: LD_VAR 0 12
40833: PPUSH
40834: CALL_OW 111
// break ;
40838: GO 40842
// end ; end ;
40840: GO 40727
40842: POP
40843: POP
// end ; end ;
40844: GO 40169
40846: POP
40847: POP
// end ;
40848: LD_VAR 0 8
40852: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40853: LD_INT 0
40855: PPUSH
// result := true ;
40856: LD_ADDR_VAR 0 3
40860: PUSH
40861: LD_INT 1
40863: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40864: LD_VAR 0 2
40868: PUSH
40869: LD_INT 24
40871: DOUBLE
40872: EQUAL
40873: IFTRUE 40883
40875: LD_INT 33
40877: DOUBLE
40878: EQUAL
40879: IFTRUE 40883
40881: GO 40908
40883: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40884: LD_ADDR_VAR 0 3
40888: PUSH
40889: LD_INT 32
40891: PPUSH
40892: LD_VAR 0 1
40896: PPUSH
40897: CALL_OW 321
40901: PUSH
40902: LD_INT 2
40904: EQUAL
40905: ST_TO_ADDR
40906: GO 41224
40908: LD_INT 20
40910: DOUBLE
40911: EQUAL
40912: IFTRUE 40916
40914: GO 40941
40916: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40917: LD_ADDR_VAR 0 3
40921: PUSH
40922: LD_INT 6
40924: PPUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: CALL_OW 321
40934: PUSH
40935: LD_INT 2
40937: EQUAL
40938: ST_TO_ADDR
40939: GO 41224
40941: LD_INT 22
40943: DOUBLE
40944: EQUAL
40945: IFTRUE 40955
40947: LD_INT 36
40949: DOUBLE
40950: EQUAL
40951: IFTRUE 40955
40953: GO 40980
40955: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40956: LD_ADDR_VAR 0 3
40960: PUSH
40961: LD_INT 15
40963: PPUSH
40964: LD_VAR 0 1
40968: PPUSH
40969: CALL_OW 321
40973: PUSH
40974: LD_INT 2
40976: EQUAL
40977: ST_TO_ADDR
40978: GO 41224
40980: LD_INT 30
40982: DOUBLE
40983: EQUAL
40984: IFTRUE 40988
40986: GO 41013
40988: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40989: LD_ADDR_VAR 0 3
40993: PUSH
40994: LD_INT 20
40996: PPUSH
40997: LD_VAR 0 1
41001: PPUSH
41002: CALL_OW 321
41006: PUSH
41007: LD_INT 2
41009: EQUAL
41010: ST_TO_ADDR
41011: GO 41224
41013: LD_INT 28
41015: DOUBLE
41016: EQUAL
41017: IFTRUE 41027
41019: LD_INT 21
41021: DOUBLE
41022: EQUAL
41023: IFTRUE 41027
41025: GO 41052
41027: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41028: LD_ADDR_VAR 0 3
41032: PUSH
41033: LD_INT 21
41035: PPUSH
41036: LD_VAR 0 1
41040: PPUSH
41041: CALL_OW 321
41045: PUSH
41046: LD_INT 2
41048: EQUAL
41049: ST_TO_ADDR
41050: GO 41224
41052: LD_INT 16
41054: DOUBLE
41055: EQUAL
41056: IFTRUE 41060
41058: GO 41085
41060: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41061: LD_ADDR_VAR 0 3
41065: PUSH
41066: LD_INT 84
41068: PPUSH
41069: LD_VAR 0 1
41073: PPUSH
41074: CALL_OW 321
41078: PUSH
41079: LD_INT 2
41081: EQUAL
41082: ST_TO_ADDR
41083: GO 41224
41085: LD_INT 19
41087: DOUBLE
41088: EQUAL
41089: IFTRUE 41099
41091: LD_INT 23
41093: DOUBLE
41094: EQUAL
41095: IFTRUE 41099
41097: GO 41124
41099: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41100: LD_ADDR_VAR 0 3
41104: PUSH
41105: LD_INT 83
41107: PPUSH
41108: LD_VAR 0 1
41112: PPUSH
41113: CALL_OW 321
41117: PUSH
41118: LD_INT 2
41120: EQUAL
41121: ST_TO_ADDR
41122: GO 41224
41124: LD_INT 17
41126: DOUBLE
41127: EQUAL
41128: IFTRUE 41132
41130: GO 41157
41132: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41133: LD_ADDR_VAR 0 3
41137: PUSH
41138: LD_INT 39
41140: PPUSH
41141: LD_VAR 0 1
41145: PPUSH
41146: CALL_OW 321
41150: PUSH
41151: LD_INT 2
41153: EQUAL
41154: ST_TO_ADDR
41155: GO 41224
41157: LD_INT 18
41159: DOUBLE
41160: EQUAL
41161: IFTRUE 41165
41163: GO 41190
41165: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41166: LD_ADDR_VAR 0 3
41170: PUSH
41171: LD_INT 40
41173: PPUSH
41174: LD_VAR 0 1
41178: PPUSH
41179: CALL_OW 321
41183: PUSH
41184: LD_INT 2
41186: EQUAL
41187: ST_TO_ADDR
41188: GO 41224
41190: LD_INT 27
41192: DOUBLE
41193: EQUAL
41194: IFTRUE 41198
41196: GO 41223
41198: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41199: LD_ADDR_VAR 0 3
41203: PUSH
41204: LD_INT 35
41206: PPUSH
41207: LD_VAR 0 1
41211: PPUSH
41212: CALL_OW 321
41216: PUSH
41217: LD_INT 2
41219: EQUAL
41220: ST_TO_ADDR
41221: GO 41224
41223: POP
// end ;
41224: LD_VAR 0 3
41228: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41229: LD_INT 0
41231: PPUSH
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
41240: PPUSH
41241: PPUSH
// result := false ;
41242: LD_ADDR_VAR 0 6
41246: PUSH
41247: LD_INT 0
41249: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41250: LD_VAR 0 1
41254: NOT
41255: PUSH
41256: LD_VAR 0 1
41260: PPUSH
41261: CALL_OW 266
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: IN
41276: NOT
41277: OR
41278: PUSH
41279: LD_VAR 0 2
41283: NOT
41284: OR
41285: PUSH
41286: LD_VAR 0 5
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: LD_INT 3
41302: PUSH
41303: LD_INT 4
41305: PUSH
41306: LD_INT 5
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: IN
41317: NOT
41318: OR
41319: PUSH
41320: LD_VAR 0 3
41324: PPUSH
41325: LD_VAR 0 4
41329: PPUSH
41330: CALL_OW 488
41334: NOT
41335: OR
41336: IFFALSE 41340
// exit ;
41338: GO 42076
// side := GetSide ( depot ) ;
41340: LD_ADDR_VAR 0 9
41344: PUSH
41345: LD_VAR 0 1
41349: PPUSH
41350: CALL_OW 255
41354: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41355: LD_VAR 0 9
41359: PPUSH
41360: LD_VAR 0 2
41364: PPUSH
41365: CALL 40853 0 2
41369: NOT
41370: IFFALSE 41374
// exit ;
41372: GO 42076
// pom := GetBase ( depot ) ;
41374: LD_ADDR_VAR 0 10
41378: PUSH
41379: LD_VAR 0 1
41383: PPUSH
41384: CALL_OW 274
41388: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41389: LD_ADDR_VAR 0 11
41393: PUSH
41394: LD_VAR 0 2
41398: PPUSH
41399: LD_VAR 0 1
41403: PPUSH
41404: CALL_OW 248
41408: PPUSH
41409: CALL_OW 450
41413: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41414: LD_VAR 0 10
41418: PPUSH
41419: LD_INT 1
41421: PPUSH
41422: CALL_OW 275
41426: PUSH
41427: LD_VAR 0 11
41431: PUSH
41432: LD_INT 1
41434: ARRAY
41435: GREATEREQUAL
41436: PUSH
41437: LD_VAR 0 10
41441: PPUSH
41442: LD_INT 2
41444: PPUSH
41445: CALL_OW 275
41449: PUSH
41450: LD_VAR 0 11
41454: PUSH
41455: LD_INT 2
41457: ARRAY
41458: GREATEREQUAL
41459: AND
41460: PUSH
41461: LD_VAR 0 10
41465: PPUSH
41466: LD_INT 3
41468: PPUSH
41469: CALL_OW 275
41473: PUSH
41474: LD_VAR 0 11
41478: PUSH
41479: LD_INT 3
41481: ARRAY
41482: GREATEREQUAL
41483: AND
41484: NOT
41485: IFFALSE 41489
// exit ;
41487: GO 42076
// if GetBType ( depot ) = b_depot then
41489: LD_VAR 0 1
41493: PPUSH
41494: CALL_OW 266
41498: PUSH
41499: LD_INT 0
41501: EQUAL
41502: IFFALSE 41514
// dist := 28 else
41504: LD_ADDR_VAR 0 14
41508: PUSH
41509: LD_INT 28
41511: ST_TO_ADDR
41512: GO 41522
// dist := 36 ;
41514: LD_ADDR_VAR 0 14
41518: PUSH
41519: LD_INT 36
41521: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41522: LD_VAR 0 1
41526: PPUSH
41527: LD_VAR 0 3
41531: PPUSH
41532: LD_VAR 0 4
41536: PPUSH
41537: CALL_OW 297
41541: PUSH
41542: LD_VAR 0 14
41546: GREATER
41547: IFFALSE 41551
// exit ;
41549: GO 42076
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41551: LD_ADDR_VAR 0 12
41555: PUSH
41556: LD_VAR 0 2
41560: PPUSH
41561: LD_VAR 0 3
41565: PPUSH
41566: LD_VAR 0 4
41570: PPUSH
41571: LD_VAR 0 5
41575: PPUSH
41576: LD_VAR 0 1
41580: PPUSH
41581: CALL_OW 248
41585: PPUSH
41586: LD_INT 0
41588: PPUSH
41589: CALL 42081 0 6
41593: ST_TO_ADDR
// if not hexes then
41594: LD_VAR 0 12
41598: NOT
41599: IFFALSE 41603
// exit ;
41601: GO 42076
// hex := GetHexInfo ( x , y ) ;
41603: LD_ADDR_VAR 0 15
41607: PUSH
41608: LD_VAR 0 3
41612: PPUSH
41613: LD_VAR 0 4
41617: PPUSH
41618: CALL_OW 546
41622: ST_TO_ADDR
// if hex [ 1 ] then
41623: LD_VAR 0 15
41627: PUSH
41628: LD_INT 1
41630: ARRAY
41631: IFFALSE 41635
// exit ;
41633: GO 42076
// height := hex [ 2 ] ;
41635: LD_ADDR_VAR 0 13
41639: PUSH
41640: LD_VAR 0 15
41644: PUSH
41645: LD_INT 2
41647: ARRAY
41648: ST_TO_ADDR
// for i = 1 to hexes do
41649: LD_ADDR_VAR 0 7
41653: PUSH
41654: DOUBLE
41655: LD_INT 1
41657: DEC
41658: ST_TO_ADDR
41659: LD_VAR 0 12
41663: PUSH
41664: FOR_TO
41665: IFFALSE 41995
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41667: LD_VAR 0 12
41671: PUSH
41672: LD_VAR 0 7
41676: ARRAY
41677: PUSH
41678: LD_INT 1
41680: ARRAY
41681: PPUSH
41682: LD_VAR 0 12
41686: PUSH
41687: LD_VAR 0 7
41691: ARRAY
41692: PUSH
41693: LD_INT 2
41695: ARRAY
41696: PPUSH
41697: CALL_OW 488
41701: NOT
41702: PUSH
41703: LD_VAR 0 12
41707: PUSH
41708: LD_VAR 0 7
41712: ARRAY
41713: PUSH
41714: LD_INT 1
41716: ARRAY
41717: PPUSH
41718: LD_VAR 0 12
41722: PUSH
41723: LD_VAR 0 7
41727: ARRAY
41728: PUSH
41729: LD_INT 2
41731: ARRAY
41732: PPUSH
41733: CALL_OW 428
41737: PUSH
41738: LD_INT 0
41740: GREATER
41741: OR
41742: PUSH
41743: LD_VAR 0 12
41747: PUSH
41748: LD_VAR 0 7
41752: ARRAY
41753: PUSH
41754: LD_INT 1
41756: ARRAY
41757: PPUSH
41758: LD_VAR 0 12
41762: PUSH
41763: LD_VAR 0 7
41767: ARRAY
41768: PUSH
41769: LD_INT 2
41771: ARRAY
41772: PPUSH
41773: CALL_OW 351
41777: OR
41778: IFFALSE 41784
// exit ;
41780: POP
41781: POP
41782: GO 42076
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41784: LD_ADDR_VAR 0 8
41788: PUSH
41789: LD_VAR 0 12
41793: PUSH
41794: LD_VAR 0 7
41798: ARRAY
41799: PUSH
41800: LD_INT 1
41802: ARRAY
41803: PPUSH
41804: LD_VAR 0 12
41808: PUSH
41809: LD_VAR 0 7
41813: ARRAY
41814: PUSH
41815: LD_INT 2
41817: ARRAY
41818: PPUSH
41819: CALL_OW 546
41823: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41824: LD_VAR 0 8
41828: PUSH
41829: LD_INT 1
41831: ARRAY
41832: PUSH
41833: LD_VAR 0 8
41837: PUSH
41838: LD_INT 2
41840: ARRAY
41841: PUSH
41842: LD_VAR 0 13
41846: PUSH
41847: LD_INT 2
41849: PLUS
41850: GREATER
41851: OR
41852: PUSH
41853: LD_VAR 0 8
41857: PUSH
41858: LD_INT 2
41860: ARRAY
41861: PUSH
41862: LD_VAR 0 13
41866: PUSH
41867: LD_INT 2
41869: MINUS
41870: LESS
41871: OR
41872: PUSH
41873: LD_VAR 0 8
41877: PUSH
41878: LD_INT 3
41880: ARRAY
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 8
41887: PUSH
41888: LD_INT 9
41890: PUSH
41891: LD_INT 10
41893: PUSH
41894: LD_INT 11
41896: PUSH
41897: LD_INT 12
41899: PUSH
41900: LD_INT 13
41902: PUSH
41903: LD_INT 16
41905: PUSH
41906: LD_INT 17
41908: PUSH
41909: LD_INT 18
41911: PUSH
41912: LD_INT 19
41914: PUSH
41915: LD_INT 20
41917: PUSH
41918: LD_INT 21
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: IN
41936: NOT
41937: OR
41938: PUSH
41939: LD_VAR 0 8
41943: PUSH
41944: LD_INT 5
41946: ARRAY
41947: NOT
41948: OR
41949: PUSH
41950: LD_VAR 0 8
41954: PUSH
41955: LD_INT 6
41957: ARRAY
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: LD_INT 7
41967: PUSH
41968: LD_INT 9
41970: PUSH
41971: LD_INT 10
41973: PUSH
41974: LD_INT 11
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: IN
41985: NOT
41986: OR
41987: IFFALSE 41993
// exit ;
41989: POP
41990: POP
41991: GO 42076
// end ;
41993: GO 41664
41995: POP
41996: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41997: LD_VAR 0 9
42001: PPUSH
42002: LD_VAR 0 3
42006: PPUSH
42007: LD_VAR 0 4
42011: PPUSH
42012: LD_INT 20
42014: PPUSH
42015: CALL 34028 0 4
42019: PUSH
42020: LD_INT 4
42022: ARRAY
42023: IFFALSE 42027
// exit ;
42025: GO 42076
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42027: LD_VAR 0 2
42031: PUSH
42032: LD_INT 29
42034: PUSH
42035: LD_INT 30
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: IN
42042: PUSH
42043: LD_VAR 0 3
42047: PPUSH
42048: LD_VAR 0 4
42052: PPUSH
42053: LD_VAR 0 9
42057: PPUSH
42058: CALL_OW 440
42062: NOT
42063: AND
42064: IFFALSE 42068
// exit ;
42066: GO 42076
// result := true ;
42068: LD_ADDR_VAR 0 6
42072: PUSH
42073: LD_INT 1
42075: ST_TO_ADDR
// end ;
42076: LD_VAR 0 6
42080: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42081: LD_INT 0
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
42091: PPUSH
42092: PPUSH
42093: PPUSH
42094: PPUSH
42095: PPUSH
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
42100: PPUSH
42101: PPUSH
42102: PPUSH
42103: PPUSH
42104: PPUSH
42105: PPUSH
42106: PPUSH
42107: PPUSH
42108: PPUSH
42109: PPUSH
42110: PPUSH
42111: PPUSH
42112: PPUSH
42113: PPUSH
42114: PPUSH
42115: PPUSH
42116: PPUSH
42117: PPUSH
42118: PPUSH
42119: PPUSH
42120: PPUSH
42121: PPUSH
42122: PPUSH
42123: PPUSH
42124: PPUSH
42125: PPUSH
42126: PPUSH
42127: PPUSH
42128: PPUSH
42129: PPUSH
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
42135: PPUSH
42136: PPUSH
42137: PPUSH
42138: PPUSH
42139: PPUSH
42140: PPUSH
// result = [ ] ;
42141: LD_ADDR_VAR 0 7
42145: PUSH
42146: EMPTY
42147: ST_TO_ADDR
// temp_list = [ ] ;
42148: LD_ADDR_VAR 0 9
42152: PUSH
42153: EMPTY
42154: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42155: LD_VAR 0 4
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: LD_INT 2
42168: PUSH
42169: LD_INT 3
42171: PUSH
42172: LD_INT 4
42174: PUSH
42175: LD_INT 5
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: IN
42186: NOT
42187: PUSH
42188: LD_VAR 0 1
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: IN
42203: PUSH
42204: LD_VAR 0 5
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: IN
42223: NOT
42224: AND
42225: OR
42226: IFFALSE 42230
// exit ;
42228: GO 60621
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42230: LD_VAR 0 1
42234: PUSH
42235: LD_INT 6
42237: PUSH
42238: LD_INT 7
42240: PUSH
42241: LD_INT 8
42243: PUSH
42244: LD_INT 13
42246: PUSH
42247: LD_INT 12
42249: PUSH
42250: LD_INT 15
42252: PUSH
42253: LD_INT 11
42255: PUSH
42256: LD_INT 14
42258: PUSH
42259: LD_INT 10
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: IN
42273: IFFALSE 42283
// btype = b_lab ;
42275: LD_ADDR_VAR 0 1
42279: PUSH
42280: LD_INT 6
42282: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42283: LD_VAR 0 6
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: IN
42302: NOT
42303: PUSH
42304: LD_VAR 0 1
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: LD_INT 2
42317: PUSH
42318: LD_INT 3
42320: PUSH
42321: LD_INT 6
42323: PUSH
42324: LD_INT 36
42326: PUSH
42327: LD_INT 4
42329: PUSH
42330: LD_INT 5
42332: PUSH
42333: LD_INT 31
42335: PUSH
42336: LD_INT 32
42338: PUSH
42339: LD_INT 33
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: IN
42355: NOT
42356: PUSH
42357: LD_VAR 0 6
42361: PUSH
42362: LD_INT 1
42364: EQUAL
42365: AND
42366: OR
42367: PUSH
42368: LD_VAR 0 1
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: IN
42383: NOT
42384: PUSH
42385: LD_VAR 0 6
42389: PUSH
42390: LD_INT 2
42392: EQUAL
42393: AND
42394: OR
42395: IFFALSE 42405
// mode = 0 ;
42397: LD_ADDR_VAR 0 6
42401: PUSH
42402: LD_INT 0
42404: ST_TO_ADDR
// case mode of 0 :
42405: LD_VAR 0 6
42409: PUSH
42410: LD_INT 0
42412: DOUBLE
42413: EQUAL
42414: IFTRUE 42418
42416: GO 53871
42418: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42419: LD_ADDR_VAR 0 11
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 2
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 2
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 3
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42612: LD_ADDR_VAR 0 12
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: NEG
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 3
42769: NEG
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 3
42780: NEG
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42808: LD_ADDR_VAR 0 13
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 2
42943: NEG
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 2
42955: NEG
42956: PUSH
42957: LD_INT 3
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 3
42967: NEG
42968: PUSH
42969: LD_INT 2
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 3
42979: NEG
42980: PUSH
42981: LD_INT 3
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43007: LD_ADDR_VAR 0 14
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 2
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: LD_INT 3
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 3
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 2
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43203: LD_ADDR_VAR 0 15
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 3
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43396: LD_ADDR_VAR 0 16
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: NEG
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 2
43531: NEG
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 3
43553: PUSH
43554: LD_INT 3
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: LD_INT 3
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43589: LD_ADDR_VAR 0 17
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 2
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43819: LD_ADDR_VAR 0 18
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: LD_INT 2
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: LD_INT 2
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: LD_INT 2
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 2
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: NEG
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: NEG
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44049: LD_ADDR_VAR 0 19
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: LD_INT 1
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: NEG
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: LD_INT 2
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44279: LD_ADDR_VAR 0 20
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: LD_INT 2
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 2
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 2
44478: NEG
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44509: LD_ADDR_VAR 0 21
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: NEG
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: NEG
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44739: LD_ADDR_VAR 0 22
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44969: LD_ADDR_VAR 0 23
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: LD_INT 3
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: LD_INT 3
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: LD_INT 2
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45249: LD_ADDR_VAR 0 24
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: NEG
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 3
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45525: LD_ADDR_VAR 0 25
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 2
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 3
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: LD_INT 3
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45799: LD_ADDR_VAR 0 26
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: LD_INT 3
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 3
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 2
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46075: LD_ADDR_VAR 0 27
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 2
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 3
46320: NEG
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46355: LD_ADDR_VAR 0 28
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 2
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: LD_INT 3
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 3
46590: NEG
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 3
46602: NEG
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46637: LD_ADDR_VAR 0 29
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: NEG
46828: PUSH
46829: LD_INT 3
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 3
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 3
46881: NEG
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46916: LD_ADDR_VAR 0 30
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 3
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 3
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 3
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 3
47159: NEG
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47194: LD_ADDR_VAR 0 31
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 3
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 3
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 3
47437: NEG
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47472: LD_ADDR_VAR 0 32
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: LD_INT 3
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 3
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 3
47715: NEG
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47750: LD_ADDR_VAR 0 33
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: NEG
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: LD_INT 3
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 3
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 3
47994: NEG
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48029: LD_ADDR_VAR 0 34
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 3
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 2
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 3
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 3
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: NEG
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48309: LD_ADDR_VAR 0 35
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48421: LD_ADDR_VAR 0 36
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 2
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48533: LD_ADDR_VAR 0 37
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48645: LD_ADDR_VAR 0 38
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48757: LD_ADDR_VAR 0 39
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48869: LD_ADDR_VAR 0 40
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48981: LD_ADDR_VAR 0 41
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 2
49171: NEG
49172: PUSH
49173: LD_INT 3
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 3
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 3
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 3
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 3
49224: PUSH
49225: LD_INT 3
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: LD_INT 3
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 3
49255: NEG
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: NEG
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 3
49278: NEG
49279: PUSH
49280: LD_INT 2
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 3
49290: NEG
49291: PUSH
49292: LD_INT 3
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49331: LD_ADDR_VAR 0 42
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 2
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 2
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: LD_INT 3
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: LD_INT 3
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: LD_INT 3
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 3
49577: PUSH
49578: LD_INT 3
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: LD_INT 3
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 3
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 3
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 3
49628: NEG
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 3
49640: NEG
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49681: LD_ADDR_VAR 0 43
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: LD_INT 2
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 3
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 3
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 3
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 3
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 3
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 3
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 3
49977: NEG
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 3
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50029: LD_ADDR_VAR 0 44
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 2
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: LD_INT 3
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 3
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 3
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 3
50272: PUSH
50273: LD_INT 3
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 3
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 3
50303: NEG
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 3
50314: NEG
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 3
50326: NEG
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 3
50338: NEG
50339: PUSH
50340: LD_INT 3
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50379: LD_ADDR_VAR 0 45
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 2
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: LD_INT 3
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 3
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 3
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 3
50625: PUSH
50626: LD_INT 3
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 3
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 3
50676: NEG
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 3
50688: NEG
50689: PUSH
50690: LD_INT 3
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50729: LD_ADDR_VAR 0 46
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 2
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: NEG
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 3
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 3
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 3
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 3
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 3
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 3
51025: NEG
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 3
51036: NEG
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51077: LD_ADDR_VAR 0 47
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51228: LD_ADDR_VAR 0 48
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 2
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51375: LD_ADDR_VAR 0 49
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51519: LD_ADDR_VAR 0 50
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: LD_INT 2
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51663: LD_ADDR_VAR 0 51
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 2
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51810: LD_ADDR_VAR 0 52
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 2
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51961: LD_ADDR_VAR 0 53
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: NEG
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52191: LD_ADDR_VAR 0 54
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 2
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 2
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 2
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: LD_INT 2
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52421: LD_ADDR_VAR 0 55
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: LD_INT 2
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52651: LD_ADDR_VAR 0 56
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: NEG
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: LD_INT 2
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52881: LD_ADDR_VAR 0 57
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 2
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 2
53057: NEG
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53111: LD_ADDR_VAR 0 58
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: LD_INT 2
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53341: LD_ADDR_VAR 0 59
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53429: LD_ADDR_VAR 0 60
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53517: LD_ADDR_VAR 0 61
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53605: LD_ADDR_VAR 0 62
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53693: LD_ADDR_VAR 0 63
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53781: LD_ADDR_VAR 0 64
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: ST_TO_ADDR
// end ; 1 :
53869: GO 59766
53871: LD_INT 1
53873: DOUBLE
53874: EQUAL
53875: IFTRUE 53879
53877: GO 56502
53879: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53880: LD_ADDR_VAR 0 11
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 3
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: LIST
53923: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53924: LD_ADDR_VAR 0 12
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 3
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 3
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: LIST
53964: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53965: LD_ADDR_VAR 0 13
53969: PUSH
53970: LD_INT 3
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 3
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 3
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54005: LD_ADDR_VAR 0 14
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 3
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 3
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54046: LD_ADDR_VAR 0 15
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 3
54064: NEG
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 3
54075: NEG
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: LIST
54089: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54090: LD_ADDR_VAR 0 16
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 3
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 3
54109: NEG
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 3
54121: NEG
54122: PUSH
54123: LD_INT 3
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: LIST
54135: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54136: LD_ADDR_VAR 0 17
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 3
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 3
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 2
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: LIST
54179: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54180: LD_ADDR_VAR 0 18
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 3
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 3
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: LIST
54220: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54221: LD_ADDR_VAR 0 19
54225: PUSH
54226: LD_INT 3
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 3
54238: PUSH
54239: LD_INT 3
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 2
54248: PUSH
54249: LD_INT 3
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: LIST
54260: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54261: LD_ADDR_VAR 0 20
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 3
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: LIST
54301: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54302: LD_ADDR_VAR 0 21
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 3
54320: NEG
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 3
54331: NEG
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: LIST
54345: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54346: LD_ADDR_VAR 0 22
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 3
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 3
54365: NEG
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 3
54377: NEG
54378: PUSH
54379: LD_INT 3
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: LIST
54391: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54392: LD_ADDR_VAR 0 23
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 3
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 4
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 3
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: LIST
54435: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54436: LD_ADDR_VAR 0 24
54440: PUSH
54441: LD_INT 3
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 3
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 4
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54477: LD_ADDR_VAR 0 25
54481: PUSH
54482: LD_INT 3
54484: PUSH
54485: LD_INT 3
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 4
54494: PUSH
54495: LD_INT 3
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: LD_INT 4
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54517: LD_ADDR_VAR 0 26
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 3
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 4
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: LIST
54557: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54558: LD_ADDR_VAR 0 27
54562: PUSH
54563: LD_INT 3
54565: NEG
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 3
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 4
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: LIST
54601: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54602: LD_ADDR_VAR 0 28
54606: PUSH
54607: LD_INT 3
54609: NEG
54610: PUSH
54611: LD_INT 3
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 3
54621: NEG
54622: PUSH
54623: LD_INT 4
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 4
54633: NEG
54634: PUSH
54635: LD_INT 3
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: LIST
54647: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54648: LD_ADDR_VAR 0 29
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: LD_INT 4
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 4
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: LD_INT 5
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 5
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 4
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 6
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 6
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 5
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54803: LD_ADDR_VAR 0 30
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 3
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 3
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 4
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 4
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 4
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 5
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 5
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 5
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 6
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 6
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54946: LD_ADDR_VAR 0 31
54950: PUSH
54951: LD_INT 3
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 3
54963: PUSH
54964: LD_INT 3
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: LD_INT 3
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 4
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 4
54993: PUSH
54994: LD_INT 4
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 3
55003: PUSH
55004: LD_INT 4
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 5
55013: PUSH
55014: LD_INT 4
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 5
55023: PUSH
55024: LD_INT 5
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 4
55033: PUSH
55034: LD_INT 5
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 6
55043: PUSH
55044: LD_INT 5
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 6
55053: PUSH
55054: LD_INT 6
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 5
55063: PUSH
55064: LD_INT 6
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55085: LD_ADDR_VAR 0 32
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 3
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 3
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 4
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 4
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 3
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 5
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 5
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 4
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: LD_INT 6
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 6
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: LD_INT 5
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55228: LD_ADDR_VAR 0 33
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 3
55246: NEG
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 3
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: NEG
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 4
55280: NEG
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 4
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 4
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 5
55314: NEG
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 5
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 5
55337: NEG
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 6
55348: NEG
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 6
55359: NEG
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55383: LD_ADDR_VAR 0 34
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: LD_INT 3
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 3
55414: NEG
55415: PUSH
55416: LD_INT 3
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: LD_INT 4
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 4
55438: NEG
55439: PUSH
55440: LD_INT 3
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 4
55450: NEG
55451: PUSH
55452: LD_INT 4
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 4
55462: NEG
55463: PUSH
55464: LD_INT 5
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 5
55474: NEG
55475: PUSH
55476: LD_INT 4
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 5
55486: NEG
55487: PUSH
55488: LD_INT 5
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 5
55498: NEG
55499: PUSH
55500: LD_INT 6
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 6
55510: NEG
55511: PUSH
55512: LD_INT 5
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 6
55522: NEG
55523: PUSH
55524: LD_INT 6
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55546: LD_ADDR_VAR 0 41
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: LD_INT 3
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: LD_INT 2
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: LIST
55589: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55590: LD_ADDR_VAR 0 42
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 3
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: LIST
55630: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55631: LD_ADDR_VAR 0 43
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 3
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55671: LD_ADDR_VAR 0 44
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 3
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: LIST
55711: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55712: LD_ADDR_VAR 0 45
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 3
55741: NEG
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: LIST
55755: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55756: LD_ADDR_VAR 0 46
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: LD_INT 3
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 3
55787: NEG
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: LIST
55801: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55802: LD_ADDR_VAR 0 47
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: LD_INT 3
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 3
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55835: LD_ADDR_VAR 0 48
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55866: LD_ADDR_VAR 0 49
55870: PUSH
55871: LD_INT 3
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 3
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55895: LD_ADDR_VAR 0 50
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: LD_INT 3
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55924: LD_ADDR_VAR 0 51
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55955: LD_ADDR_VAR 0 52
55959: PUSH
55960: LD_INT 3
55962: NEG
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55988: LD_ADDR_VAR 0 53
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: LD_INT 3
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: LIST
56031: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56032: LD_ADDR_VAR 0 54
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 3
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: LIST
56072: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56073: LD_ADDR_VAR 0 55
56077: PUSH
56078: LD_INT 3
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 3
56090: PUSH
56091: LD_INT 3
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: LD_INT 3
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56113: LD_ADDR_VAR 0 56
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 3
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 3
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: LIST
56153: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56154: LD_ADDR_VAR 0 57
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 3
56183: NEG
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56198: LD_ADDR_VAR 0 58
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: LD_INT 3
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 3
56217: NEG
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 3
56229: NEG
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: LIST
56243: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56244: LD_ADDR_VAR 0 59
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: LIST
56287: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56288: LD_ADDR_VAR 0 60
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 2
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: LIST
56328: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56329: LD_ADDR_VAR 0 61
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: LIST
56368: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56369: LD_ADDR_VAR 0 62
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: LIST
56409: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56410: LD_ADDR_VAR 0 63
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: LIST
56453: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56454: LD_ADDR_VAR 0 64
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: LIST
56499: ST_TO_ADDR
// end ; 2 :
56500: GO 59766
56502: LD_INT 2
56504: DOUBLE
56505: EQUAL
56506: IFTRUE 56510
56508: GO 59765
56510: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56511: LD_ADDR_VAR 0 29
56515: PUSH
56516: LD_INT 4
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 4
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 5
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 5
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 4
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 3
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 5
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 3
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 3
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 4
56631: PUSH
56632: LD_INT 3
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 4
56641: PUSH
56642: LD_INT 4
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: LD_INT 4
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: LD_INT 3
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: LD_INT 2
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: LD_INT 4
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 4
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: LD_INT 4
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: LD_INT 5
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 5
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 4
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 3
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: LD_INT 5
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 3
56794: NEG
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 3
56805: NEG
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: NEG
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 3
56839: NEG
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 4
56850: NEG
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 4
56861: NEG
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 4
56873: NEG
56874: PUSH
56875: LD_INT 2
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 4
56896: NEG
56897: PUSH
56898: LD_INT 4
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 4
56908: NEG
56909: PUSH
56910: LD_INT 5
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: LD_INT 4
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 4
56944: NEG
56945: PUSH
56946: LD_INT 3
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 5
56956: NEG
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 5
56968: NEG
56969: PUSH
56970: LD_INT 5
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 3
56980: NEG
56981: PUSH
56982: LD_INT 5
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 5
56992: NEG
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57049: LD_ADDR_VAR 0 30
57053: PUSH
57054: LD_INT 4
57056: PUSH
57057: LD_INT 4
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 4
57066: PUSH
57067: LD_INT 3
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 5
57076: PUSH
57077: LD_INT 4
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 5
57086: PUSH
57087: LD_INT 5
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 4
57096: PUSH
57097: LD_INT 5
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 3
57106: PUSH
57107: LD_INT 4
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: LD_INT 3
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 5
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 3
57136: PUSH
57137: LD_INT 5
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 3
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 3
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: LD_INT 4
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 4
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 3
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: LD_INT 4
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 4
57239: NEG
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 4
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: NEG
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 4
57284: NEG
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 5
57295: NEG
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 5
57306: NEG
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 5
57318: NEG
57319: PUSH
57320: LD_INT 2
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 3
57330: NEG
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 3
57341: NEG
57342: PUSH
57343: LD_INT 3
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 3
57353: NEG
57354: PUSH
57355: LD_INT 4
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 3
57389: NEG
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 4
57401: NEG
57402: PUSH
57403: LD_INT 3
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 4
57413: NEG
57414: PUSH
57415: LD_INT 4
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 2
57425: NEG
57426: PUSH
57427: LD_INT 4
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 4
57437: NEG
57438: PUSH
57439: LD_INT 2
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 4
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 5
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 4
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: LD_INT 3
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 3
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: LD_INT 4
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 5
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: LD_INT 3
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: LD_INT 5
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57596: LD_ADDR_VAR 0 31
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 4
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 3
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: PUSH
57624: LD_INT 4
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: LD_INT 5
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: LD_INT 5
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: LD_INT 4
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: LD_INT 3
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: LD_INT 5
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 3
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 3
57696: NEG
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 3
57707: NEG
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: NEG
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 4
57752: NEG
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 4
57763: NEG
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 4
57775: NEG
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: NEG
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 4
57798: NEG
57799: PUSH
57800: LD_INT 4
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 4
57810: NEG
57811: PUSH
57812: LD_INT 5
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: LD_INT 4
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 3
57834: NEG
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 4
57846: NEG
57847: PUSH
57848: LD_INT 3
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 5
57858: NEG
57859: PUSH
57860: LD_INT 4
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 5
57870: NEG
57871: PUSH
57872: LD_INT 5
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 3
57882: NEG
57883: PUSH
57884: LD_INT 5
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 5
57894: NEG
57895: PUSH
57896: LD_INT 3
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 3
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: LD_INT 4
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: LD_INT 3
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: LD_INT 3
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 4
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: LD_INT 4
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 4
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 4
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 5
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 5
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 4
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 3
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 5
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58146: LD_ADDR_VAR 0 32
58150: PUSH
58151: LD_INT 4
58153: NEG
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 4
58164: NEG
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 3
58187: NEG
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 4
58198: NEG
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 5
58209: NEG
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 5
58220: NEG
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 5
58232: NEG
58233: PUSH
58234: LD_INT 2
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 3
58244: NEG
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: LD_INT 3
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: LD_INT 4
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: LD_INT 3
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 3
58303: NEG
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 4
58315: NEG
58316: PUSH
58317: LD_INT 3
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 4
58327: NEG
58328: PUSH
58329: LD_INT 4
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 2
58339: NEG
58340: PUSH
58341: LD_INT 4
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 4
58351: NEG
58352: PUSH
58353: LD_INT 2
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 4
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: LD_INT 5
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 4
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 3
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 3
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: LD_INT 4
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: LD_INT 5
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: LD_INT 3
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: LD_INT 5
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 4
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 4
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 4
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 4
58558: PUSH
58559: LD_INT 4
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 4
58568: PUSH
58569: LD_INT 3
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 5
58578: PUSH
58579: LD_INT 4
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 5
58588: PUSH
58589: LD_INT 5
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 4
58598: PUSH
58599: LD_INT 5
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 3
58608: PUSH
58609: LD_INT 4
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 5
58628: PUSH
58629: LD_INT 3
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 3
58638: PUSH
58639: LD_INT 5
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58693: LD_ADDR_VAR 0 33
58697: PUSH
58698: LD_INT 4
58700: NEG
58701: PUSH
58702: LD_INT 4
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 4
58712: NEG
58713: PUSH
58714: LD_INT 5
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 3
58724: NEG
58725: PUSH
58726: LD_INT 4
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 3
58736: NEG
58737: PUSH
58738: LD_INT 3
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 4
58748: NEG
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 5
58760: NEG
58761: PUSH
58762: LD_INT 4
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 5
58772: NEG
58773: PUSH
58774: LD_INT 5
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 3
58784: NEG
58785: PUSH
58786: LD_INT 5
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 5
58796: NEG
58797: PUSH
58798: LD_INT 3
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: LD_INT 3
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: LD_INT 4
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: LD_INT 3
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 3
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: NEG
58876: PUSH
58877: LD_INT 4
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: LD_INT 4
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 4
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 4
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 5
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 5
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 4
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 3
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 5
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 3
59003: PUSH
59004: LD_INT 3
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 3
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 4
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 4
59033: PUSH
59034: LD_INT 4
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 3
59043: PUSH
59044: LD_INT 4
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: LD_INT 3
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 4
59073: PUSH
59074: LD_INT 2
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: LD_INT 4
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 4
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: LD_INT 4
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: LD_INT 5
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 5
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: LD_INT 4
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: LD_INT 3
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: LD_INT 5
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59231: LD_ADDR_VAR 0 34
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: LD_INT 4
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: LD_INT 5
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: LD_INT 4
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: LD_INT 3
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: LD_INT 3
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: LD_INT 4
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: LD_INT 5
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: LD_INT 3
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 2
59328: NEG
59329: PUSH
59330: LD_INT 5
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 3
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 4
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 4
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 4
59423: PUSH
59424: LD_INT 2
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 4
59433: PUSH
59434: LD_INT 4
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 4
59443: PUSH
59444: LD_INT 3
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 5
59453: PUSH
59454: LD_INT 4
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 5
59463: PUSH
59464: LD_INT 5
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 4
59473: PUSH
59474: LD_INT 5
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: LD_INT 4
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 3
59493: PUSH
59494: LD_INT 3
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 5
59503: PUSH
59504: LD_INT 3
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 3
59513: PUSH
59514: LD_INT 5
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 3
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 3
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: LD_INT 4
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 4
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: LD_INT 3
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: LD_INT 4
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 4
59616: NEG
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 4
59627: NEG
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 3
59639: NEG
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 3
59650: NEG
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 4
59661: NEG
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 5
59672: NEG
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 5
59683: NEG
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 5
59695: NEG
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 3
59707: NEG
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: ST_TO_ADDR
// end ; end ;
59763: GO 59766
59765: POP
// case btype of b_depot , b_warehouse :
59766: LD_VAR 0 1
59770: PUSH
59771: LD_INT 0
59773: DOUBLE
59774: EQUAL
59775: IFTRUE 59785
59777: LD_INT 1
59779: DOUBLE
59780: EQUAL
59781: IFTRUE 59785
59783: GO 59986
59785: POP
// case nation of nation_american :
59786: LD_VAR 0 5
59790: PUSH
59791: LD_INT 1
59793: DOUBLE
59794: EQUAL
59795: IFTRUE 59799
59797: GO 59855
59799: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59800: LD_ADDR_VAR 0 9
59804: PUSH
59805: LD_VAR 0 11
59809: PUSH
59810: LD_VAR 0 12
59814: PUSH
59815: LD_VAR 0 13
59819: PUSH
59820: LD_VAR 0 14
59824: PUSH
59825: LD_VAR 0 15
59829: PUSH
59830: LD_VAR 0 16
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: PUSH
59843: LD_VAR 0 4
59847: PUSH
59848: LD_INT 1
59850: PLUS
59851: ARRAY
59852: ST_TO_ADDR
59853: GO 59984
59855: LD_INT 2
59857: DOUBLE
59858: EQUAL
59859: IFTRUE 59863
59861: GO 59919
59863: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59864: LD_ADDR_VAR 0 9
59868: PUSH
59869: LD_VAR 0 17
59873: PUSH
59874: LD_VAR 0 18
59878: PUSH
59879: LD_VAR 0 19
59883: PUSH
59884: LD_VAR 0 20
59888: PUSH
59889: LD_VAR 0 21
59893: PUSH
59894: LD_VAR 0 22
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: PUSH
59907: LD_VAR 0 4
59911: PUSH
59912: LD_INT 1
59914: PLUS
59915: ARRAY
59916: ST_TO_ADDR
59917: GO 59984
59919: LD_INT 3
59921: DOUBLE
59922: EQUAL
59923: IFTRUE 59927
59925: GO 59983
59927: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59928: LD_ADDR_VAR 0 9
59932: PUSH
59933: LD_VAR 0 23
59937: PUSH
59938: LD_VAR 0 24
59942: PUSH
59943: LD_VAR 0 25
59947: PUSH
59948: LD_VAR 0 26
59952: PUSH
59953: LD_VAR 0 27
59957: PUSH
59958: LD_VAR 0 28
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: PUSH
59971: LD_VAR 0 4
59975: PUSH
59976: LD_INT 1
59978: PLUS
59979: ARRAY
59980: ST_TO_ADDR
59981: GO 59984
59983: POP
59984: GO 60539
59986: LD_INT 2
59988: DOUBLE
59989: EQUAL
59990: IFTRUE 60000
59992: LD_INT 3
59994: DOUBLE
59995: EQUAL
59996: IFTRUE 60000
59998: GO 60056
60000: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60001: LD_ADDR_VAR 0 9
60005: PUSH
60006: LD_VAR 0 29
60010: PUSH
60011: LD_VAR 0 30
60015: PUSH
60016: LD_VAR 0 31
60020: PUSH
60021: LD_VAR 0 32
60025: PUSH
60026: LD_VAR 0 33
60030: PUSH
60031: LD_VAR 0 34
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: PUSH
60044: LD_VAR 0 4
60048: PUSH
60049: LD_INT 1
60051: PLUS
60052: ARRAY
60053: ST_TO_ADDR
60054: GO 60539
60056: LD_INT 16
60058: DOUBLE
60059: EQUAL
60060: IFTRUE 60118
60062: LD_INT 17
60064: DOUBLE
60065: EQUAL
60066: IFTRUE 60118
60068: LD_INT 18
60070: DOUBLE
60071: EQUAL
60072: IFTRUE 60118
60074: LD_INT 19
60076: DOUBLE
60077: EQUAL
60078: IFTRUE 60118
60080: LD_INT 22
60082: DOUBLE
60083: EQUAL
60084: IFTRUE 60118
60086: LD_INT 20
60088: DOUBLE
60089: EQUAL
60090: IFTRUE 60118
60092: LD_INT 21
60094: DOUBLE
60095: EQUAL
60096: IFTRUE 60118
60098: LD_INT 23
60100: DOUBLE
60101: EQUAL
60102: IFTRUE 60118
60104: LD_INT 24
60106: DOUBLE
60107: EQUAL
60108: IFTRUE 60118
60110: LD_INT 25
60112: DOUBLE
60113: EQUAL
60114: IFTRUE 60118
60116: GO 60174
60118: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60119: LD_ADDR_VAR 0 9
60123: PUSH
60124: LD_VAR 0 35
60128: PUSH
60129: LD_VAR 0 36
60133: PUSH
60134: LD_VAR 0 37
60138: PUSH
60139: LD_VAR 0 38
60143: PUSH
60144: LD_VAR 0 39
60148: PUSH
60149: LD_VAR 0 40
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: PUSH
60162: LD_VAR 0 4
60166: PUSH
60167: LD_INT 1
60169: PLUS
60170: ARRAY
60171: ST_TO_ADDR
60172: GO 60539
60174: LD_INT 6
60176: DOUBLE
60177: EQUAL
60178: IFTRUE 60230
60180: LD_INT 7
60182: DOUBLE
60183: EQUAL
60184: IFTRUE 60230
60186: LD_INT 8
60188: DOUBLE
60189: EQUAL
60190: IFTRUE 60230
60192: LD_INT 13
60194: DOUBLE
60195: EQUAL
60196: IFTRUE 60230
60198: LD_INT 12
60200: DOUBLE
60201: EQUAL
60202: IFTRUE 60230
60204: LD_INT 15
60206: DOUBLE
60207: EQUAL
60208: IFTRUE 60230
60210: LD_INT 11
60212: DOUBLE
60213: EQUAL
60214: IFTRUE 60230
60216: LD_INT 14
60218: DOUBLE
60219: EQUAL
60220: IFTRUE 60230
60222: LD_INT 10
60224: DOUBLE
60225: EQUAL
60226: IFTRUE 60230
60228: GO 60286
60230: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60231: LD_ADDR_VAR 0 9
60235: PUSH
60236: LD_VAR 0 41
60240: PUSH
60241: LD_VAR 0 42
60245: PUSH
60246: LD_VAR 0 43
60250: PUSH
60251: LD_VAR 0 44
60255: PUSH
60256: LD_VAR 0 45
60260: PUSH
60261: LD_VAR 0 46
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: PUSH
60274: LD_VAR 0 4
60278: PUSH
60279: LD_INT 1
60281: PLUS
60282: ARRAY
60283: ST_TO_ADDR
60284: GO 60539
60286: LD_INT 36
60288: DOUBLE
60289: EQUAL
60290: IFTRUE 60294
60292: GO 60350
60294: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60295: LD_ADDR_VAR 0 9
60299: PUSH
60300: LD_VAR 0 47
60304: PUSH
60305: LD_VAR 0 48
60309: PUSH
60310: LD_VAR 0 49
60314: PUSH
60315: LD_VAR 0 50
60319: PUSH
60320: LD_VAR 0 51
60324: PUSH
60325: LD_VAR 0 52
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: PUSH
60338: LD_VAR 0 4
60342: PUSH
60343: LD_INT 1
60345: PLUS
60346: ARRAY
60347: ST_TO_ADDR
60348: GO 60539
60350: LD_INT 4
60352: DOUBLE
60353: EQUAL
60354: IFTRUE 60376
60356: LD_INT 5
60358: DOUBLE
60359: EQUAL
60360: IFTRUE 60376
60362: LD_INT 34
60364: DOUBLE
60365: EQUAL
60366: IFTRUE 60376
60368: LD_INT 37
60370: DOUBLE
60371: EQUAL
60372: IFTRUE 60376
60374: GO 60432
60376: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60377: LD_ADDR_VAR 0 9
60381: PUSH
60382: LD_VAR 0 53
60386: PUSH
60387: LD_VAR 0 54
60391: PUSH
60392: LD_VAR 0 55
60396: PUSH
60397: LD_VAR 0 56
60401: PUSH
60402: LD_VAR 0 57
60406: PUSH
60407: LD_VAR 0 58
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: PUSH
60420: LD_VAR 0 4
60424: PUSH
60425: LD_INT 1
60427: PLUS
60428: ARRAY
60429: ST_TO_ADDR
60430: GO 60539
60432: LD_INT 31
60434: DOUBLE
60435: EQUAL
60436: IFTRUE 60482
60438: LD_INT 32
60440: DOUBLE
60441: EQUAL
60442: IFTRUE 60482
60444: LD_INT 33
60446: DOUBLE
60447: EQUAL
60448: IFTRUE 60482
60450: LD_INT 27
60452: DOUBLE
60453: EQUAL
60454: IFTRUE 60482
60456: LD_INT 26
60458: DOUBLE
60459: EQUAL
60460: IFTRUE 60482
60462: LD_INT 28
60464: DOUBLE
60465: EQUAL
60466: IFTRUE 60482
60468: LD_INT 29
60470: DOUBLE
60471: EQUAL
60472: IFTRUE 60482
60474: LD_INT 30
60476: DOUBLE
60477: EQUAL
60478: IFTRUE 60482
60480: GO 60538
60482: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60483: LD_ADDR_VAR 0 9
60487: PUSH
60488: LD_VAR 0 59
60492: PUSH
60493: LD_VAR 0 60
60497: PUSH
60498: LD_VAR 0 61
60502: PUSH
60503: LD_VAR 0 62
60507: PUSH
60508: LD_VAR 0 63
60512: PUSH
60513: LD_VAR 0 64
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: PUSH
60526: LD_VAR 0 4
60530: PUSH
60531: LD_INT 1
60533: PLUS
60534: ARRAY
60535: ST_TO_ADDR
60536: GO 60539
60538: POP
// temp_list2 = [ ] ;
60539: LD_ADDR_VAR 0 10
60543: PUSH
60544: EMPTY
60545: ST_TO_ADDR
// for i in temp_list do
60546: LD_ADDR_VAR 0 8
60550: PUSH
60551: LD_VAR 0 9
60555: PUSH
60556: FOR_IN
60557: IFFALSE 60609
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60559: LD_ADDR_VAR 0 10
60563: PUSH
60564: LD_VAR 0 10
60568: PUSH
60569: LD_VAR 0 8
60573: PUSH
60574: LD_INT 1
60576: ARRAY
60577: PUSH
60578: LD_VAR 0 2
60582: PLUS
60583: PUSH
60584: LD_VAR 0 8
60588: PUSH
60589: LD_INT 2
60591: ARRAY
60592: PUSH
60593: LD_VAR 0 3
60597: PLUS
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: EMPTY
60604: LIST
60605: ADD
60606: ST_TO_ADDR
60607: GO 60556
60609: POP
60610: POP
// result = temp_list2 ;
60611: LD_ADDR_VAR 0 7
60615: PUSH
60616: LD_VAR 0 10
60620: ST_TO_ADDR
// end ;
60621: LD_VAR 0 7
60625: RET
// export function EnemyInRange ( unit , dist ) ; begin
60626: LD_INT 0
60628: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60629: LD_ADDR_VAR 0 3
60633: PUSH
60634: LD_VAR 0 1
60638: PPUSH
60639: CALL_OW 255
60643: PPUSH
60644: LD_VAR 0 1
60648: PPUSH
60649: CALL_OW 250
60653: PPUSH
60654: LD_VAR 0 1
60658: PPUSH
60659: CALL_OW 251
60663: PPUSH
60664: LD_VAR 0 2
60668: PPUSH
60669: CALL 34028 0 4
60673: PUSH
60674: LD_INT 4
60676: ARRAY
60677: ST_TO_ADDR
// end ;
60678: LD_VAR 0 3
60682: RET
// export function PlayerSeeMe ( unit ) ; begin
60683: LD_INT 0
60685: PPUSH
// result := See ( your_side , unit ) ;
60686: LD_ADDR_VAR 0 2
60690: PUSH
60691: LD_OWVAR 2
60695: PPUSH
60696: LD_VAR 0 1
60700: PPUSH
60701: CALL_OW 292
60705: ST_TO_ADDR
// end ;
60706: LD_VAR 0 2
60710: RET
// export function ReverseDir ( unit ) ; begin
60711: LD_INT 0
60713: PPUSH
// if not unit then
60714: LD_VAR 0 1
60718: NOT
60719: IFFALSE 60723
// exit ;
60721: GO 60746
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60723: LD_ADDR_VAR 0 2
60727: PUSH
60728: LD_VAR 0 1
60732: PPUSH
60733: CALL_OW 254
60737: PUSH
60738: LD_INT 3
60740: PLUS
60741: PUSH
60742: LD_INT 6
60744: MOD
60745: ST_TO_ADDR
// end ;
60746: LD_VAR 0 2
60750: RET
// export function ReverseArray ( array ) ; var i ; begin
60751: LD_INT 0
60753: PPUSH
60754: PPUSH
// if not array then
60755: LD_VAR 0 1
60759: NOT
60760: IFFALSE 60764
// exit ;
60762: GO 60819
// result := [ ] ;
60764: LD_ADDR_VAR 0 2
60768: PUSH
60769: EMPTY
60770: ST_TO_ADDR
// for i := array downto 1 do
60771: LD_ADDR_VAR 0 3
60775: PUSH
60776: DOUBLE
60777: LD_VAR 0 1
60781: INC
60782: ST_TO_ADDR
60783: LD_INT 1
60785: PUSH
60786: FOR_DOWNTO
60787: IFFALSE 60817
// result := Join ( result , array [ i ] ) ;
60789: LD_ADDR_VAR 0 2
60793: PUSH
60794: LD_VAR 0 2
60798: PPUSH
60799: LD_VAR 0 1
60803: PUSH
60804: LD_VAR 0 3
60808: ARRAY
60809: PPUSH
60810: CALL 65463 0 2
60814: ST_TO_ADDR
60815: GO 60786
60817: POP
60818: POP
// end ;
60819: LD_VAR 0 2
60823: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60824: LD_INT 0
60826: PPUSH
60827: PPUSH
60828: PPUSH
60829: PPUSH
60830: PPUSH
60831: PPUSH
// if not unit or not hexes then
60832: LD_VAR 0 1
60836: NOT
60837: PUSH
60838: LD_VAR 0 2
60842: NOT
60843: OR
60844: IFFALSE 60848
// exit ;
60846: GO 60971
// dist := 9999 ;
60848: LD_ADDR_VAR 0 5
60852: PUSH
60853: LD_INT 9999
60855: ST_TO_ADDR
// for i = 1 to hexes do
60856: LD_ADDR_VAR 0 4
60860: PUSH
60861: DOUBLE
60862: LD_INT 1
60864: DEC
60865: ST_TO_ADDR
60866: LD_VAR 0 2
60870: PUSH
60871: FOR_TO
60872: IFFALSE 60959
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60874: LD_ADDR_VAR 0 6
60878: PUSH
60879: LD_VAR 0 1
60883: PPUSH
60884: LD_VAR 0 2
60888: PUSH
60889: LD_VAR 0 4
60893: ARRAY
60894: PUSH
60895: LD_INT 1
60897: ARRAY
60898: PPUSH
60899: LD_VAR 0 2
60903: PUSH
60904: LD_VAR 0 4
60908: ARRAY
60909: PUSH
60910: LD_INT 2
60912: ARRAY
60913: PPUSH
60914: CALL_OW 297
60918: ST_TO_ADDR
// if tdist < dist then
60919: LD_VAR 0 6
60923: PUSH
60924: LD_VAR 0 5
60928: LESS
60929: IFFALSE 60957
// begin hex := hexes [ i ] ;
60931: LD_ADDR_VAR 0 8
60935: PUSH
60936: LD_VAR 0 2
60940: PUSH
60941: LD_VAR 0 4
60945: ARRAY
60946: ST_TO_ADDR
// dist := tdist ;
60947: LD_ADDR_VAR 0 5
60951: PUSH
60952: LD_VAR 0 6
60956: ST_TO_ADDR
// end ; end ;
60957: GO 60871
60959: POP
60960: POP
// result := hex ;
60961: LD_ADDR_VAR 0 3
60965: PUSH
60966: LD_VAR 0 8
60970: ST_TO_ADDR
// end ;
60971: LD_VAR 0 3
60975: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60976: LD_INT 0
60978: PPUSH
60979: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60980: LD_VAR 0 1
60984: NOT
60985: PUSH
60986: LD_VAR 0 1
60990: PUSH
60991: LD_INT 21
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 23
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PPUSH
61015: CALL_OW 69
61019: IN
61020: NOT
61021: OR
61022: IFFALSE 61026
// exit ;
61024: GO 61073
// for i = 1 to 3 do
61026: LD_ADDR_VAR 0 3
61030: PUSH
61031: DOUBLE
61032: LD_INT 1
61034: DEC
61035: ST_TO_ADDR
61036: LD_INT 3
61038: PUSH
61039: FOR_TO
61040: IFFALSE 61071
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61042: LD_VAR 0 1
61046: PPUSH
61047: CALL_OW 250
61051: PPUSH
61052: LD_VAR 0 1
61056: PPUSH
61057: CALL_OW 251
61061: PPUSH
61062: LD_INT 1
61064: PPUSH
61065: CALL_OW 453
61069: GO 61039
61071: POP
61072: POP
// end ;
61073: LD_VAR 0 2
61077: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61078: LD_INT 0
61080: PPUSH
61081: PPUSH
61082: PPUSH
61083: PPUSH
61084: PPUSH
61085: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61086: LD_VAR 0 1
61090: NOT
61091: PUSH
61092: LD_VAR 0 2
61096: NOT
61097: OR
61098: PUSH
61099: LD_VAR 0 1
61103: PPUSH
61104: CALL_OW 314
61108: OR
61109: IFFALSE 61113
// exit ;
61111: GO 61580
// if GetLives ( i ) < 250 then
61113: LD_VAR 0 4
61117: PPUSH
61118: CALL_OW 256
61122: PUSH
61123: LD_INT 250
61125: LESS
61126: IFFALSE 61139
// begin ComAutodestruct ( i ) ;
61128: LD_VAR 0 4
61132: PPUSH
61133: CALL 60976 0 1
// exit ;
61137: GO 61580
// end ; x := GetX ( enemy_unit ) ;
61139: LD_ADDR_VAR 0 7
61143: PUSH
61144: LD_VAR 0 2
61148: PPUSH
61149: CALL_OW 250
61153: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61154: LD_ADDR_VAR 0 8
61158: PUSH
61159: LD_VAR 0 2
61163: PPUSH
61164: CALL_OW 251
61168: ST_TO_ADDR
// if not x or not y then
61169: LD_VAR 0 7
61173: NOT
61174: PUSH
61175: LD_VAR 0 8
61179: NOT
61180: OR
61181: IFFALSE 61185
// exit ;
61183: GO 61580
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61185: LD_ADDR_VAR 0 6
61189: PUSH
61190: LD_VAR 0 7
61194: PPUSH
61195: LD_INT 0
61197: PPUSH
61198: LD_INT 4
61200: PPUSH
61201: CALL_OW 272
61205: PUSH
61206: LD_VAR 0 8
61210: PPUSH
61211: LD_INT 0
61213: PPUSH
61214: LD_INT 4
61216: PPUSH
61217: CALL_OW 273
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_VAR 0 7
61230: PPUSH
61231: LD_INT 1
61233: PPUSH
61234: LD_INT 4
61236: PPUSH
61237: CALL_OW 272
61241: PUSH
61242: LD_VAR 0 8
61246: PPUSH
61247: LD_INT 1
61249: PPUSH
61250: LD_INT 4
61252: PPUSH
61253: CALL_OW 273
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_VAR 0 7
61266: PPUSH
61267: LD_INT 2
61269: PPUSH
61270: LD_INT 4
61272: PPUSH
61273: CALL_OW 272
61277: PUSH
61278: LD_VAR 0 8
61282: PPUSH
61283: LD_INT 2
61285: PPUSH
61286: LD_INT 4
61288: PPUSH
61289: CALL_OW 273
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_VAR 0 7
61302: PPUSH
61303: LD_INT 3
61305: PPUSH
61306: LD_INT 4
61308: PPUSH
61309: CALL_OW 272
61313: PUSH
61314: LD_VAR 0 8
61318: PPUSH
61319: LD_INT 3
61321: PPUSH
61322: LD_INT 4
61324: PPUSH
61325: CALL_OW 273
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_VAR 0 7
61338: PPUSH
61339: LD_INT 4
61341: PPUSH
61342: LD_INT 4
61344: PPUSH
61345: CALL_OW 272
61349: PUSH
61350: LD_VAR 0 8
61354: PPUSH
61355: LD_INT 4
61357: PPUSH
61358: LD_INT 4
61360: PPUSH
61361: CALL_OW 273
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_VAR 0 7
61374: PPUSH
61375: LD_INT 5
61377: PPUSH
61378: LD_INT 4
61380: PPUSH
61381: CALL_OW 272
61385: PUSH
61386: LD_VAR 0 8
61390: PPUSH
61391: LD_INT 5
61393: PPUSH
61394: LD_INT 4
61396: PPUSH
61397: CALL_OW 273
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: ST_TO_ADDR
// for i = tmp downto 1 do
61414: LD_ADDR_VAR 0 4
61418: PUSH
61419: DOUBLE
61420: LD_VAR 0 6
61424: INC
61425: ST_TO_ADDR
61426: LD_INT 1
61428: PUSH
61429: FOR_DOWNTO
61430: IFFALSE 61531
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61432: LD_VAR 0 6
61436: PUSH
61437: LD_VAR 0 4
61441: ARRAY
61442: PUSH
61443: LD_INT 1
61445: ARRAY
61446: PPUSH
61447: LD_VAR 0 6
61451: PUSH
61452: LD_VAR 0 4
61456: ARRAY
61457: PUSH
61458: LD_INT 2
61460: ARRAY
61461: PPUSH
61462: CALL_OW 488
61466: NOT
61467: PUSH
61468: LD_VAR 0 6
61472: PUSH
61473: LD_VAR 0 4
61477: ARRAY
61478: PUSH
61479: LD_INT 1
61481: ARRAY
61482: PPUSH
61483: LD_VAR 0 6
61487: PUSH
61488: LD_VAR 0 4
61492: ARRAY
61493: PUSH
61494: LD_INT 2
61496: ARRAY
61497: PPUSH
61498: CALL_OW 428
61502: PUSH
61503: LD_INT 0
61505: NONEQUAL
61506: OR
61507: IFFALSE 61529
// tmp := Delete ( tmp , i ) ;
61509: LD_ADDR_VAR 0 6
61513: PUSH
61514: LD_VAR 0 6
61518: PPUSH
61519: LD_VAR 0 4
61523: PPUSH
61524: CALL_OW 3
61528: ST_TO_ADDR
61529: GO 61429
61531: POP
61532: POP
// j := GetClosestHex ( unit , tmp ) ;
61533: LD_ADDR_VAR 0 5
61537: PUSH
61538: LD_VAR 0 1
61542: PPUSH
61543: LD_VAR 0 6
61547: PPUSH
61548: CALL 60824 0 2
61552: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61553: LD_VAR 0 1
61557: PPUSH
61558: LD_VAR 0 5
61562: PUSH
61563: LD_INT 1
61565: ARRAY
61566: PPUSH
61567: LD_VAR 0 5
61571: PUSH
61572: LD_INT 2
61574: ARRAY
61575: PPUSH
61576: CALL_OW 111
// end ;
61580: LD_VAR 0 3
61584: RET
// export function PrepareApemanSoldier ( ) ; begin
61585: LD_INT 0
61587: PPUSH
// uc_nation := 0 ;
61588: LD_ADDR_OWVAR 21
61592: PUSH
61593: LD_INT 0
61595: ST_TO_ADDR
// hc_sex := sex_male ;
61596: LD_ADDR_OWVAR 27
61600: PUSH
61601: LD_INT 1
61603: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61604: LD_ADDR_OWVAR 28
61608: PUSH
61609: LD_INT 15
61611: ST_TO_ADDR
// hc_gallery :=  ;
61612: LD_ADDR_OWVAR 33
61616: PUSH
61617: LD_STRING 
61619: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61620: LD_ADDR_OWVAR 31
61624: PUSH
61625: LD_INT 0
61627: PPUSH
61628: LD_INT 3
61630: PPUSH
61631: CALL_OW 12
61635: PUSH
61636: LD_INT 0
61638: PPUSH
61639: LD_INT 3
61641: PPUSH
61642: CALL_OW 12
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: ST_TO_ADDR
// end ;
61659: LD_VAR 0 1
61663: RET
// export function PrepareApemanEngineer ( ) ; begin
61664: LD_INT 0
61666: PPUSH
// uc_nation := 0 ;
61667: LD_ADDR_OWVAR 21
61671: PUSH
61672: LD_INT 0
61674: ST_TO_ADDR
// hc_sex := sex_male ;
61675: LD_ADDR_OWVAR 27
61679: PUSH
61680: LD_INT 1
61682: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61683: LD_ADDR_OWVAR 28
61687: PUSH
61688: LD_INT 16
61690: ST_TO_ADDR
// hc_gallery :=  ;
61691: LD_ADDR_OWVAR 33
61695: PUSH
61696: LD_STRING 
61698: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61699: LD_ADDR_OWVAR 31
61703: PUSH
61704: LD_INT 0
61706: PPUSH
61707: LD_INT 3
61709: PPUSH
61710: CALL_OW 12
61714: PUSH
61715: LD_INT 0
61717: PPUSH
61718: LD_INT 3
61720: PPUSH
61721: CALL_OW 12
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: ST_TO_ADDR
// end ;
61738: LD_VAR 0 1
61742: RET
// export function PrepareApeman ( agressivity ) ; begin
61743: LD_INT 0
61745: PPUSH
// uc_side := 0 ;
61746: LD_ADDR_OWVAR 20
61750: PUSH
61751: LD_INT 0
61753: ST_TO_ADDR
// uc_nation := 0 ;
61754: LD_ADDR_OWVAR 21
61758: PUSH
61759: LD_INT 0
61761: ST_TO_ADDR
// hc_sex := sex_male ;
61762: LD_ADDR_OWVAR 27
61766: PUSH
61767: LD_INT 1
61769: ST_TO_ADDR
// hc_class := class_apeman ;
61770: LD_ADDR_OWVAR 28
61774: PUSH
61775: LD_INT 12
61777: ST_TO_ADDR
// hc_gallery :=  ;
61778: LD_ADDR_OWVAR 33
61782: PUSH
61783: LD_STRING 
61785: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61786: LD_ADDR_OWVAR 35
61790: PUSH
61791: LD_VAR 0 1
61795: NEG
61796: PPUSH
61797: LD_VAR 0 1
61801: PPUSH
61802: CALL_OW 12
61806: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61807: LD_ADDR_OWVAR 31
61811: PUSH
61812: LD_INT 0
61814: PPUSH
61815: LD_INT 3
61817: PPUSH
61818: CALL_OW 12
61822: PUSH
61823: LD_INT 0
61825: PPUSH
61826: LD_INT 3
61828: PPUSH
61829: CALL_OW 12
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: ST_TO_ADDR
// end ;
61846: LD_VAR 0 2
61850: RET
// export function PrepareTiger ( agressivity ) ; begin
61851: LD_INT 0
61853: PPUSH
// uc_side := 0 ;
61854: LD_ADDR_OWVAR 20
61858: PUSH
61859: LD_INT 0
61861: ST_TO_ADDR
// uc_nation := 0 ;
61862: LD_ADDR_OWVAR 21
61866: PUSH
61867: LD_INT 0
61869: ST_TO_ADDR
// hc_class := class_tiger ;
61870: LD_ADDR_OWVAR 28
61874: PUSH
61875: LD_INT 14
61877: ST_TO_ADDR
// hc_gallery :=  ;
61878: LD_ADDR_OWVAR 33
61882: PUSH
61883: LD_STRING 
61885: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61886: LD_ADDR_OWVAR 35
61890: PUSH
61891: LD_VAR 0 1
61895: NEG
61896: PPUSH
61897: LD_VAR 0 1
61901: PPUSH
61902: CALL_OW 12
61906: ST_TO_ADDR
// end ;
61907: LD_VAR 0 2
61911: RET
// export function PrepareEnchidna ( ) ; begin
61912: LD_INT 0
61914: PPUSH
// uc_side := 0 ;
61915: LD_ADDR_OWVAR 20
61919: PUSH
61920: LD_INT 0
61922: ST_TO_ADDR
// uc_nation := 0 ;
61923: LD_ADDR_OWVAR 21
61927: PUSH
61928: LD_INT 0
61930: ST_TO_ADDR
// hc_class := class_baggie ;
61931: LD_ADDR_OWVAR 28
61935: PUSH
61936: LD_INT 13
61938: ST_TO_ADDR
// hc_gallery :=  ;
61939: LD_ADDR_OWVAR 33
61943: PUSH
61944: LD_STRING 
61946: ST_TO_ADDR
// end ;
61947: LD_VAR 0 1
61951: RET
// export function PrepareFrog ( ) ; begin
61952: LD_INT 0
61954: PPUSH
// uc_side := 0 ;
61955: LD_ADDR_OWVAR 20
61959: PUSH
61960: LD_INT 0
61962: ST_TO_ADDR
// uc_nation := 0 ;
61963: LD_ADDR_OWVAR 21
61967: PUSH
61968: LD_INT 0
61970: ST_TO_ADDR
// hc_class := class_frog ;
61971: LD_ADDR_OWVAR 28
61975: PUSH
61976: LD_INT 19
61978: ST_TO_ADDR
// hc_gallery :=  ;
61979: LD_ADDR_OWVAR 33
61983: PUSH
61984: LD_STRING 
61986: ST_TO_ADDR
// end ;
61987: LD_VAR 0 1
61991: RET
// export function PrepareFish ( ) ; begin
61992: LD_INT 0
61994: PPUSH
// uc_side := 0 ;
61995: LD_ADDR_OWVAR 20
61999: PUSH
62000: LD_INT 0
62002: ST_TO_ADDR
// uc_nation := 0 ;
62003: LD_ADDR_OWVAR 21
62007: PUSH
62008: LD_INT 0
62010: ST_TO_ADDR
// hc_class := class_fish ;
62011: LD_ADDR_OWVAR 28
62015: PUSH
62016: LD_INT 20
62018: ST_TO_ADDR
// hc_gallery :=  ;
62019: LD_ADDR_OWVAR 33
62023: PUSH
62024: LD_STRING 
62026: ST_TO_ADDR
// end ;
62027: LD_VAR 0 1
62031: RET
// export function PrepareBird ( ) ; begin
62032: LD_INT 0
62034: PPUSH
// uc_side := 0 ;
62035: LD_ADDR_OWVAR 20
62039: PUSH
62040: LD_INT 0
62042: ST_TO_ADDR
// uc_nation := 0 ;
62043: LD_ADDR_OWVAR 21
62047: PUSH
62048: LD_INT 0
62050: ST_TO_ADDR
// hc_class := class_phororhacos ;
62051: LD_ADDR_OWVAR 28
62055: PUSH
62056: LD_INT 18
62058: ST_TO_ADDR
// hc_gallery :=  ;
62059: LD_ADDR_OWVAR 33
62063: PUSH
62064: LD_STRING 
62066: ST_TO_ADDR
// end ;
62067: LD_VAR 0 1
62071: RET
// export function PrepareHorse ( ) ; begin
62072: LD_INT 0
62074: PPUSH
// uc_side := 0 ;
62075: LD_ADDR_OWVAR 20
62079: PUSH
62080: LD_INT 0
62082: ST_TO_ADDR
// uc_nation := 0 ;
62083: LD_ADDR_OWVAR 21
62087: PUSH
62088: LD_INT 0
62090: ST_TO_ADDR
// hc_class := class_horse ;
62091: LD_ADDR_OWVAR 28
62095: PUSH
62096: LD_INT 21
62098: ST_TO_ADDR
// hc_gallery :=  ;
62099: LD_ADDR_OWVAR 33
62103: PUSH
62104: LD_STRING 
62106: ST_TO_ADDR
// end ;
62107: LD_VAR 0 1
62111: RET
// export function PrepareMastodont ( ) ; begin
62112: LD_INT 0
62114: PPUSH
// uc_side := 0 ;
62115: LD_ADDR_OWVAR 20
62119: PUSH
62120: LD_INT 0
62122: ST_TO_ADDR
// uc_nation := 0 ;
62123: LD_ADDR_OWVAR 21
62127: PUSH
62128: LD_INT 0
62130: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62131: LD_ADDR_OWVAR 37
62135: PUSH
62136: LD_INT 31
62138: ST_TO_ADDR
// vc_control := control_rider ;
62139: LD_ADDR_OWVAR 38
62143: PUSH
62144: LD_INT 4
62146: ST_TO_ADDR
// end ;
62147: LD_VAR 0 1
62151: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62152: LD_INT 0
62154: PPUSH
62155: PPUSH
62156: PPUSH
// uc_side = 0 ;
62157: LD_ADDR_OWVAR 20
62161: PUSH
62162: LD_INT 0
62164: ST_TO_ADDR
// uc_nation = 0 ;
62165: LD_ADDR_OWVAR 21
62169: PUSH
62170: LD_INT 0
62172: ST_TO_ADDR
// InitHc_All ( ) ;
62173: CALL_OW 584
// InitVc ;
62177: CALL_OW 20
// if mastodonts then
62181: LD_VAR 0 6
62185: IFFALSE 62252
// for i = 1 to mastodonts do
62187: LD_ADDR_VAR 0 11
62191: PUSH
62192: DOUBLE
62193: LD_INT 1
62195: DEC
62196: ST_TO_ADDR
62197: LD_VAR 0 6
62201: PUSH
62202: FOR_TO
62203: IFFALSE 62250
// begin vc_chassis := 31 ;
62205: LD_ADDR_OWVAR 37
62209: PUSH
62210: LD_INT 31
62212: ST_TO_ADDR
// vc_control := control_rider ;
62213: LD_ADDR_OWVAR 38
62217: PUSH
62218: LD_INT 4
62220: ST_TO_ADDR
// animal := CreateVehicle ;
62221: LD_ADDR_VAR 0 12
62225: PUSH
62226: CALL_OW 45
62230: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62231: LD_VAR 0 12
62235: PPUSH
62236: LD_VAR 0 8
62240: PPUSH
62241: LD_INT 0
62243: PPUSH
62244: CALL 64380 0 3
// end ;
62248: GO 62202
62250: POP
62251: POP
// if horses then
62252: LD_VAR 0 5
62256: IFFALSE 62323
// for i = 1 to horses do
62258: LD_ADDR_VAR 0 11
62262: PUSH
62263: DOUBLE
62264: LD_INT 1
62266: DEC
62267: ST_TO_ADDR
62268: LD_VAR 0 5
62272: PUSH
62273: FOR_TO
62274: IFFALSE 62321
// begin hc_class := 21 ;
62276: LD_ADDR_OWVAR 28
62280: PUSH
62281: LD_INT 21
62283: ST_TO_ADDR
// hc_gallery :=  ;
62284: LD_ADDR_OWVAR 33
62288: PUSH
62289: LD_STRING 
62291: ST_TO_ADDR
// animal := CreateHuman ;
62292: LD_ADDR_VAR 0 12
62296: PUSH
62297: CALL_OW 44
62301: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62302: LD_VAR 0 12
62306: PPUSH
62307: LD_VAR 0 8
62311: PPUSH
62312: LD_INT 0
62314: PPUSH
62315: CALL 64380 0 3
// end ;
62319: GO 62273
62321: POP
62322: POP
// if birds then
62323: LD_VAR 0 1
62327: IFFALSE 62394
// for i = 1 to birds do
62329: LD_ADDR_VAR 0 11
62333: PUSH
62334: DOUBLE
62335: LD_INT 1
62337: DEC
62338: ST_TO_ADDR
62339: LD_VAR 0 1
62343: PUSH
62344: FOR_TO
62345: IFFALSE 62392
// begin hc_class = 18 ;
62347: LD_ADDR_OWVAR 28
62351: PUSH
62352: LD_INT 18
62354: ST_TO_ADDR
// hc_gallery =  ;
62355: LD_ADDR_OWVAR 33
62359: PUSH
62360: LD_STRING 
62362: ST_TO_ADDR
// animal := CreateHuman ;
62363: LD_ADDR_VAR 0 12
62367: PUSH
62368: CALL_OW 44
62372: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62373: LD_VAR 0 12
62377: PPUSH
62378: LD_VAR 0 8
62382: PPUSH
62383: LD_INT 0
62385: PPUSH
62386: CALL 64380 0 3
// end ;
62390: GO 62344
62392: POP
62393: POP
// if tigers then
62394: LD_VAR 0 2
62398: IFFALSE 62482
// for i = 1 to tigers do
62400: LD_ADDR_VAR 0 11
62404: PUSH
62405: DOUBLE
62406: LD_INT 1
62408: DEC
62409: ST_TO_ADDR
62410: LD_VAR 0 2
62414: PUSH
62415: FOR_TO
62416: IFFALSE 62480
// begin hc_class = class_tiger ;
62418: LD_ADDR_OWVAR 28
62422: PUSH
62423: LD_INT 14
62425: ST_TO_ADDR
// hc_gallery =  ;
62426: LD_ADDR_OWVAR 33
62430: PUSH
62431: LD_STRING 
62433: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62434: LD_ADDR_OWVAR 35
62438: PUSH
62439: LD_INT 7
62441: NEG
62442: PPUSH
62443: LD_INT 7
62445: PPUSH
62446: CALL_OW 12
62450: ST_TO_ADDR
// animal := CreateHuman ;
62451: LD_ADDR_VAR 0 12
62455: PUSH
62456: CALL_OW 44
62460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62461: LD_VAR 0 12
62465: PPUSH
62466: LD_VAR 0 8
62470: PPUSH
62471: LD_INT 0
62473: PPUSH
62474: CALL 64380 0 3
// end ;
62478: GO 62415
62480: POP
62481: POP
// if apemans then
62482: LD_VAR 0 3
62486: IFFALSE 62609
// for i = 1 to apemans do
62488: LD_ADDR_VAR 0 11
62492: PUSH
62493: DOUBLE
62494: LD_INT 1
62496: DEC
62497: ST_TO_ADDR
62498: LD_VAR 0 3
62502: PUSH
62503: FOR_TO
62504: IFFALSE 62607
// begin hc_class = class_apeman ;
62506: LD_ADDR_OWVAR 28
62510: PUSH
62511: LD_INT 12
62513: ST_TO_ADDR
// hc_gallery =  ;
62514: LD_ADDR_OWVAR 33
62518: PUSH
62519: LD_STRING 
62521: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62522: LD_ADDR_OWVAR 35
62526: PUSH
62527: LD_INT 2
62529: NEG
62530: PPUSH
62531: LD_INT 2
62533: PPUSH
62534: CALL_OW 12
62538: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62539: LD_ADDR_OWVAR 31
62543: PUSH
62544: LD_INT 1
62546: PPUSH
62547: LD_INT 3
62549: PPUSH
62550: CALL_OW 12
62554: PUSH
62555: LD_INT 1
62557: PPUSH
62558: LD_INT 3
62560: PPUSH
62561: CALL_OW 12
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: ST_TO_ADDR
// animal := CreateHuman ;
62578: LD_ADDR_VAR 0 12
62582: PUSH
62583: CALL_OW 44
62587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62588: LD_VAR 0 12
62592: PPUSH
62593: LD_VAR 0 8
62597: PPUSH
62598: LD_INT 0
62600: PPUSH
62601: CALL 64380 0 3
// end ;
62605: GO 62503
62607: POP
62608: POP
// if enchidnas then
62609: LD_VAR 0 4
62613: IFFALSE 62680
// for i = 1 to enchidnas do
62615: LD_ADDR_VAR 0 11
62619: PUSH
62620: DOUBLE
62621: LD_INT 1
62623: DEC
62624: ST_TO_ADDR
62625: LD_VAR 0 4
62629: PUSH
62630: FOR_TO
62631: IFFALSE 62678
// begin hc_class = 13 ;
62633: LD_ADDR_OWVAR 28
62637: PUSH
62638: LD_INT 13
62640: ST_TO_ADDR
// hc_gallery =  ;
62641: LD_ADDR_OWVAR 33
62645: PUSH
62646: LD_STRING 
62648: ST_TO_ADDR
// animal := CreateHuman ;
62649: LD_ADDR_VAR 0 12
62653: PUSH
62654: CALL_OW 44
62658: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62659: LD_VAR 0 12
62663: PPUSH
62664: LD_VAR 0 8
62668: PPUSH
62669: LD_INT 0
62671: PPUSH
62672: CALL 64380 0 3
// end ;
62676: GO 62630
62678: POP
62679: POP
// if fishes then
62680: LD_VAR 0 7
62684: IFFALSE 62751
// for i = 1 to fishes do
62686: LD_ADDR_VAR 0 11
62690: PUSH
62691: DOUBLE
62692: LD_INT 1
62694: DEC
62695: ST_TO_ADDR
62696: LD_VAR 0 7
62700: PUSH
62701: FOR_TO
62702: IFFALSE 62749
// begin hc_class = 20 ;
62704: LD_ADDR_OWVAR 28
62708: PUSH
62709: LD_INT 20
62711: ST_TO_ADDR
// hc_gallery =  ;
62712: LD_ADDR_OWVAR 33
62716: PUSH
62717: LD_STRING 
62719: ST_TO_ADDR
// animal := CreateHuman ;
62720: LD_ADDR_VAR 0 12
62724: PUSH
62725: CALL_OW 44
62729: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62730: LD_VAR 0 12
62734: PPUSH
62735: LD_VAR 0 9
62739: PPUSH
62740: LD_INT 0
62742: PPUSH
62743: CALL 64380 0 3
// end ;
62747: GO 62701
62749: POP
62750: POP
// end ;
62751: LD_VAR 0 10
62755: RET
// export function WantHeal ( sci , unit ) ; begin
62756: LD_INT 0
62758: PPUSH
// if GetTaskList ( sci ) > 0 then
62759: LD_VAR 0 1
62763: PPUSH
62764: CALL_OW 437
62768: PUSH
62769: LD_INT 0
62771: GREATER
62772: IFFALSE 62842
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62774: LD_VAR 0 1
62778: PPUSH
62779: CALL_OW 437
62783: PUSH
62784: LD_INT 1
62786: ARRAY
62787: PUSH
62788: LD_INT 1
62790: ARRAY
62791: PUSH
62792: LD_STRING l
62794: EQUAL
62795: PUSH
62796: LD_VAR 0 1
62800: PPUSH
62801: CALL_OW 437
62805: PUSH
62806: LD_INT 1
62808: ARRAY
62809: PUSH
62810: LD_INT 4
62812: ARRAY
62813: PUSH
62814: LD_VAR 0 2
62818: EQUAL
62819: AND
62820: IFFALSE 62832
// result := true else
62822: LD_ADDR_VAR 0 3
62826: PUSH
62827: LD_INT 1
62829: ST_TO_ADDR
62830: GO 62840
// result := false ;
62832: LD_ADDR_VAR 0 3
62836: PUSH
62837: LD_INT 0
62839: ST_TO_ADDR
// end else
62840: GO 62850
// result := false ;
62842: LD_ADDR_VAR 0 3
62846: PUSH
62847: LD_INT 0
62849: ST_TO_ADDR
// end ;
62850: LD_VAR 0 3
62854: RET
// export function HealTarget ( sci ) ; begin
62855: LD_INT 0
62857: PPUSH
// if not sci then
62858: LD_VAR 0 1
62862: NOT
62863: IFFALSE 62867
// exit ;
62865: GO 62932
// result := 0 ;
62867: LD_ADDR_VAR 0 2
62871: PUSH
62872: LD_INT 0
62874: ST_TO_ADDR
// if GetTaskList ( sci ) then
62875: LD_VAR 0 1
62879: PPUSH
62880: CALL_OW 437
62884: IFFALSE 62932
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62886: LD_VAR 0 1
62890: PPUSH
62891: CALL_OW 437
62895: PUSH
62896: LD_INT 1
62898: ARRAY
62899: PUSH
62900: LD_INT 1
62902: ARRAY
62903: PUSH
62904: LD_STRING l
62906: EQUAL
62907: IFFALSE 62932
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62909: LD_ADDR_VAR 0 2
62913: PUSH
62914: LD_VAR 0 1
62918: PPUSH
62919: CALL_OW 437
62923: PUSH
62924: LD_INT 1
62926: ARRAY
62927: PUSH
62928: LD_INT 4
62930: ARRAY
62931: ST_TO_ADDR
// end ;
62932: LD_VAR 0 2
62936: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62937: LD_INT 0
62939: PPUSH
62940: PPUSH
62941: PPUSH
62942: PPUSH
// if not base_units then
62943: LD_VAR 0 1
62947: NOT
62948: IFFALSE 62952
// exit ;
62950: GO 63039
// result := false ;
62952: LD_ADDR_VAR 0 2
62956: PUSH
62957: LD_INT 0
62959: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62960: LD_ADDR_VAR 0 5
62964: PUSH
62965: LD_VAR 0 1
62969: PPUSH
62970: LD_INT 21
62972: PUSH
62973: LD_INT 3
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PPUSH
62980: CALL_OW 72
62984: ST_TO_ADDR
// if not tmp then
62985: LD_VAR 0 5
62989: NOT
62990: IFFALSE 62994
// exit ;
62992: GO 63039
// for i in tmp do
62994: LD_ADDR_VAR 0 3
62998: PUSH
62999: LD_VAR 0 5
63003: PUSH
63004: FOR_IN
63005: IFFALSE 63037
// begin result := EnemyInRange ( i , 22 ) ;
63007: LD_ADDR_VAR 0 2
63011: PUSH
63012: LD_VAR 0 3
63016: PPUSH
63017: LD_INT 22
63019: PPUSH
63020: CALL 60626 0 2
63024: ST_TO_ADDR
// if result then
63025: LD_VAR 0 2
63029: IFFALSE 63035
// exit ;
63031: POP
63032: POP
63033: GO 63039
// end ;
63035: GO 63004
63037: POP
63038: POP
// end ;
63039: LD_VAR 0 2
63043: RET
// export function FilterByTag ( units , tag ) ; begin
63044: LD_INT 0
63046: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63047: LD_ADDR_VAR 0 3
63051: PUSH
63052: LD_VAR 0 1
63056: PPUSH
63057: LD_INT 120
63059: PUSH
63060: LD_VAR 0 2
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PPUSH
63069: CALL_OW 72
63073: ST_TO_ADDR
// end ;
63074: LD_VAR 0 3
63078: RET
// export function IsDriver ( un ) ; begin
63079: LD_INT 0
63081: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63082: LD_ADDR_VAR 0 2
63086: PUSH
63087: LD_VAR 0 1
63091: PUSH
63092: LD_INT 55
63094: PUSH
63095: EMPTY
63096: LIST
63097: PPUSH
63098: CALL_OW 69
63102: IN
63103: ST_TO_ADDR
// end ;
63104: LD_VAR 0 2
63108: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63109: LD_INT 0
63111: PPUSH
63112: PPUSH
// list := [ ] ;
63113: LD_ADDR_VAR 0 5
63117: PUSH
63118: EMPTY
63119: ST_TO_ADDR
// case d of 0 :
63120: LD_VAR 0 3
63124: PUSH
63125: LD_INT 0
63127: DOUBLE
63128: EQUAL
63129: IFTRUE 63133
63131: GO 63266
63133: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63134: LD_ADDR_VAR 0 5
63138: PUSH
63139: LD_VAR 0 1
63143: PUSH
63144: LD_INT 4
63146: MINUS
63147: PUSH
63148: LD_VAR 0 2
63152: PUSH
63153: LD_INT 4
63155: MINUS
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: LIST
63164: PUSH
63165: LD_VAR 0 1
63169: PUSH
63170: LD_INT 3
63172: MINUS
63173: PUSH
63174: LD_VAR 0 2
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: LIST
63186: PUSH
63187: LD_VAR 0 1
63191: PUSH
63192: LD_INT 4
63194: PLUS
63195: PUSH
63196: LD_VAR 0 2
63200: PUSH
63201: LD_INT 4
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: LIST
63208: PUSH
63209: LD_VAR 0 1
63213: PUSH
63214: LD_INT 3
63216: PLUS
63217: PUSH
63218: LD_VAR 0 2
63222: PUSH
63223: LD_INT 3
63225: PLUS
63226: PUSH
63227: LD_INT 5
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: LIST
63234: PUSH
63235: LD_VAR 0 1
63239: PUSH
63240: LD_VAR 0 2
63244: PUSH
63245: LD_INT 4
63247: PLUS
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: ST_TO_ADDR
// end ; 1 :
63264: GO 63964
63266: LD_INT 1
63268: DOUBLE
63269: EQUAL
63270: IFTRUE 63274
63272: GO 63407
63274: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63275: LD_ADDR_VAR 0 5
63279: PUSH
63280: LD_VAR 0 1
63284: PUSH
63285: LD_VAR 0 2
63289: PUSH
63290: LD_INT 4
63292: MINUS
63293: PUSH
63294: LD_INT 3
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: LIST
63301: PUSH
63302: LD_VAR 0 1
63306: PUSH
63307: LD_INT 3
63309: MINUS
63310: PUSH
63311: LD_VAR 0 2
63315: PUSH
63316: LD_INT 3
63318: MINUS
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: LIST
63327: PUSH
63328: LD_VAR 0 1
63332: PUSH
63333: LD_INT 4
63335: MINUS
63336: PUSH
63337: LD_VAR 0 2
63341: PUSH
63342: LD_INT 1
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: LIST
63349: PUSH
63350: LD_VAR 0 1
63354: PUSH
63355: LD_VAR 0 2
63359: PUSH
63360: LD_INT 3
63362: PLUS
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: LIST
63371: PUSH
63372: LD_VAR 0 1
63376: PUSH
63377: LD_INT 4
63379: PLUS
63380: PUSH
63381: LD_VAR 0 2
63385: PUSH
63386: LD_INT 4
63388: PLUS
63389: PUSH
63390: LD_INT 5
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: LIST
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: ST_TO_ADDR
// end ; 2 :
63405: GO 63964
63407: LD_INT 2
63409: DOUBLE
63410: EQUAL
63411: IFTRUE 63415
63413: GO 63544
63415: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63416: LD_ADDR_VAR 0 5
63420: PUSH
63421: LD_VAR 0 1
63425: PUSH
63426: LD_VAR 0 2
63430: PUSH
63431: LD_INT 3
63433: MINUS
63434: PUSH
63435: LD_INT 3
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: LIST
63442: PUSH
63443: LD_VAR 0 1
63447: PUSH
63448: LD_INT 4
63450: PLUS
63451: PUSH
63452: LD_VAR 0 2
63456: PUSH
63457: LD_INT 4
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: LIST
63464: PUSH
63465: LD_VAR 0 1
63469: PUSH
63470: LD_VAR 0 2
63474: PUSH
63475: LD_INT 4
63477: PLUS
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: LIST
63486: PUSH
63487: LD_VAR 0 1
63491: PUSH
63492: LD_INT 3
63494: MINUS
63495: PUSH
63496: LD_VAR 0 2
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: PUSH
63509: LD_VAR 0 1
63513: PUSH
63514: LD_INT 4
63516: MINUS
63517: PUSH
63518: LD_VAR 0 2
63522: PUSH
63523: LD_INT 4
63525: MINUS
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: LIST
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: ST_TO_ADDR
// end ; 3 :
63542: GO 63964
63544: LD_INT 3
63546: DOUBLE
63547: EQUAL
63548: IFTRUE 63552
63550: GO 63685
63552: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63553: LD_ADDR_VAR 0 5
63557: PUSH
63558: LD_VAR 0 1
63562: PUSH
63563: LD_INT 3
63565: PLUS
63566: PUSH
63567: LD_VAR 0 2
63571: PUSH
63572: LD_INT 4
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: LIST
63579: PUSH
63580: LD_VAR 0 1
63584: PUSH
63585: LD_INT 4
63587: PLUS
63588: PUSH
63589: LD_VAR 0 2
63593: PUSH
63594: LD_INT 4
63596: PLUS
63597: PUSH
63598: LD_INT 5
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: LIST
63605: PUSH
63606: LD_VAR 0 1
63610: PUSH
63611: LD_INT 4
63613: MINUS
63614: PUSH
63615: LD_VAR 0 2
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: PUSH
63628: LD_VAR 0 1
63632: PUSH
63633: LD_VAR 0 2
63637: PUSH
63638: LD_INT 4
63640: MINUS
63641: PUSH
63642: LD_INT 3
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: PUSH
63650: LD_VAR 0 1
63654: PUSH
63655: LD_INT 3
63657: MINUS
63658: PUSH
63659: LD_VAR 0 2
63663: PUSH
63664: LD_INT 3
63666: MINUS
63667: PUSH
63668: LD_INT 2
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: LIST
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: ST_TO_ADDR
// end ; 4 :
63683: GO 63964
63685: LD_INT 4
63687: DOUBLE
63688: EQUAL
63689: IFTRUE 63693
63691: GO 63826
63693: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63694: LD_ADDR_VAR 0 5
63698: PUSH
63699: LD_VAR 0 1
63703: PUSH
63704: LD_VAR 0 2
63708: PUSH
63709: LD_INT 4
63711: PLUS
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: LIST
63720: PUSH
63721: LD_VAR 0 1
63725: PUSH
63726: LD_INT 3
63728: PLUS
63729: PUSH
63730: LD_VAR 0 2
63734: PUSH
63735: LD_INT 3
63737: PLUS
63738: PUSH
63739: LD_INT 5
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: LIST
63746: PUSH
63747: LD_VAR 0 1
63751: PUSH
63752: LD_INT 4
63754: PLUS
63755: PUSH
63756: LD_VAR 0 2
63760: PUSH
63761: LD_INT 4
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: LIST
63768: PUSH
63769: LD_VAR 0 1
63773: PUSH
63774: LD_VAR 0 2
63778: PUSH
63779: LD_INT 3
63781: MINUS
63782: PUSH
63783: LD_INT 3
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: LIST
63790: PUSH
63791: LD_VAR 0 1
63795: PUSH
63796: LD_INT 4
63798: MINUS
63799: PUSH
63800: LD_VAR 0 2
63804: PUSH
63805: LD_INT 4
63807: MINUS
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: LIST
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: ST_TO_ADDR
// end ; 5 :
63824: GO 63964
63826: LD_INT 5
63828: DOUBLE
63829: EQUAL
63830: IFTRUE 63834
63832: GO 63963
63834: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63835: LD_ADDR_VAR 0 5
63839: PUSH
63840: LD_VAR 0 1
63844: PUSH
63845: LD_INT 4
63847: MINUS
63848: PUSH
63849: LD_VAR 0 2
63853: PUSH
63854: LD_INT 1
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: LIST
63861: PUSH
63862: LD_VAR 0 1
63866: PUSH
63867: LD_VAR 0 2
63871: PUSH
63872: LD_INT 4
63874: MINUS
63875: PUSH
63876: LD_INT 3
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: LIST
63883: PUSH
63884: LD_VAR 0 1
63888: PUSH
63889: LD_INT 4
63891: PLUS
63892: PUSH
63893: LD_VAR 0 2
63897: PUSH
63898: LD_INT 4
63900: PLUS
63901: PUSH
63902: LD_INT 5
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: LIST
63909: PUSH
63910: LD_VAR 0 1
63914: PUSH
63915: LD_INT 3
63917: PLUS
63918: PUSH
63919: LD_VAR 0 2
63923: PUSH
63924: LD_INT 4
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: LIST
63931: PUSH
63932: LD_VAR 0 1
63936: PUSH
63937: LD_VAR 0 2
63941: PUSH
63942: LD_INT 3
63944: PLUS
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: LIST
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: ST_TO_ADDR
// end ; end ;
63961: GO 63964
63963: POP
// result := list ;
63964: LD_ADDR_VAR 0 4
63968: PUSH
63969: LD_VAR 0 5
63973: ST_TO_ADDR
// end ;
63974: LD_VAR 0 4
63978: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63979: LD_INT 0
63981: PPUSH
63982: PPUSH
63983: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63984: LD_VAR 0 1
63988: NOT
63989: PUSH
63990: LD_VAR 0 2
63994: PUSH
63995: LD_INT 1
63997: PUSH
63998: LD_INT 2
64000: PUSH
64001: LD_INT 3
64003: PUSH
64004: LD_INT 4
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: IN
64013: NOT
64014: OR
64015: IFFALSE 64019
// exit ;
64017: GO 64102
// tmp := [ ] ;
64019: LD_ADDR_VAR 0 5
64023: PUSH
64024: EMPTY
64025: ST_TO_ADDR
// for i in units do
64026: LD_ADDR_VAR 0 4
64030: PUSH
64031: LD_VAR 0 1
64035: PUSH
64036: FOR_IN
64037: IFFALSE 64071
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64039: LD_ADDR_VAR 0 5
64043: PUSH
64044: LD_VAR 0 5
64048: PPUSH
64049: LD_VAR 0 4
64053: PPUSH
64054: LD_VAR 0 2
64058: PPUSH
64059: CALL_OW 259
64063: PPUSH
64064: CALL 65463 0 2
64068: ST_TO_ADDR
64069: GO 64036
64071: POP
64072: POP
// if not tmp then
64073: LD_VAR 0 5
64077: NOT
64078: IFFALSE 64082
// exit ;
64080: GO 64102
// result := SortListByListDesc ( units , tmp ) ;
64082: LD_ADDR_VAR 0 3
64086: PUSH
64087: LD_VAR 0 1
64091: PPUSH
64092: LD_VAR 0 5
64096: PPUSH
64097: CALL_OW 77
64101: ST_TO_ADDR
// end ;
64102: LD_VAR 0 3
64106: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64107: LD_INT 0
64109: PPUSH
64110: PPUSH
64111: PPUSH
// result := false ;
64112: LD_ADDR_VAR 0 3
64116: PUSH
64117: LD_INT 0
64119: ST_TO_ADDR
// if not building then
64120: LD_VAR 0 2
64124: NOT
64125: IFFALSE 64129
// exit ;
64127: GO 64267
// x := GetX ( building ) ;
64129: LD_ADDR_VAR 0 4
64133: PUSH
64134: LD_VAR 0 2
64138: PPUSH
64139: CALL_OW 250
64143: ST_TO_ADDR
// y := GetY ( building ) ;
64144: LD_ADDR_VAR 0 5
64148: PUSH
64149: LD_VAR 0 2
64153: PPUSH
64154: CALL_OW 251
64158: ST_TO_ADDR
// if not x or not y then
64159: LD_VAR 0 4
64163: NOT
64164: PUSH
64165: LD_VAR 0 5
64169: NOT
64170: OR
64171: IFFALSE 64175
// exit ;
64173: GO 64267
// if GetTaskList ( unit ) then
64175: LD_VAR 0 1
64179: PPUSH
64180: CALL_OW 437
64184: IFFALSE 64267
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64186: LD_STRING e
64188: PUSH
64189: LD_VAR 0 1
64193: PPUSH
64194: CALL_OW 437
64198: PUSH
64199: LD_INT 1
64201: ARRAY
64202: PUSH
64203: LD_INT 1
64205: ARRAY
64206: EQUAL
64207: PUSH
64208: LD_VAR 0 4
64212: PUSH
64213: LD_VAR 0 1
64217: PPUSH
64218: CALL_OW 437
64222: PUSH
64223: LD_INT 1
64225: ARRAY
64226: PUSH
64227: LD_INT 2
64229: ARRAY
64230: EQUAL
64231: AND
64232: PUSH
64233: LD_VAR 0 5
64237: PUSH
64238: LD_VAR 0 1
64242: PPUSH
64243: CALL_OW 437
64247: PUSH
64248: LD_INT 1
64250: ARRAY
64251: PUSH
64252: LD_INT 3
64254: ARRAY
64255: EQUAL
64256: AND
64257: IFFALSE 64267
// result := true end ;
64259: LD_ADDR_VAR 0 3
64263: PUSH
64264: LD_INT 1
64266: ST_TO_ADDR
// end ;
64267: LD_VAR 0 3
64271: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64272: LD_INT 0
64274: PPUSH
// result := false ;
64275: LD_ADDR_VAR 0 4
64279: PUSH
64280: LD_INT 0
64282: ST_TO_ADDR
// if GetTaskList ( unit ) then
64283: LD_VAR 0 1
64287: PPUSH
64288: CALL_OW 437
64292: IFFALSE 64375
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64294: LD_STRING M
64296: PUSH
64297: LD_VAR 0 1
64301: PPUSH
64302: CALL_OW 437
64306: PUSH
64307: LD_INT 1
64309: ARRAY
64310: PUSH
64311: LD_INT 1
64313: ARRAY
64314: EQUAL
64315: PUSH
64316: LD_VAR 0 2
64320: PUSH
64321: LD_VAR 0 1
64325: PPUSH
64326: CALL_OW 437
64330: PUSH
64331: LD_INT 1
64333: ARRAY
64334: PUSH
64335: LD_INT 2
64337: ARRAY
64338: EQUAL
64339: AND
64340: PUSH
64341: LD_VAR 0 3
64345: PUSH
64346: LD_VAR 0 1
64350: PPUSH
64351: CALL_OW 437
64355: PUSH
64356: LD_INT 1
64358: ARRAY
64359: PUSH
64360: LD_INT 3
64362: ARRAY
64363: EQUAL
64364: AND
64365: IFFALSE 64375
// result := true ;
64367: LD_ADDR_VAR 0 4
64371: PUSH
64372: LD_INT 1
64374: ST_TO_ADDR
// end ; end ;
64375: LD_VAR 0 4
64379: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64380: LD_INT 0
64382: PPUSH
64383: PPUSH
64384: PPUSH
64385: PPUSH
// if not unit or not area then
64386: LD_VAR 0 1
64390: NOT
64391: PUSH
64392: LD_VAR 0 2
64396: NOT
64397: OR
64398: IFFALSE 64402
// exit ;
64400: GO 64566
// tmp := AreaToList ( area , i ) ;
64402: LD_ADDR_VAR 0 6
64406: PUSH
64407: LD_VAR 0 2
64411: PPUSH
64412: LD_VAR 0 5
64416: PPUSH
64417: CALL_OW 517
64421: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64422: LD_ADDR_VAR 0 5
64426: PUSH
64427: DOUBLE
64428: LD_INT 1
64430: DEC
64431: ST_TO_ADDR
64432: LD_VAR 0 6
64436: PUSH
64437: LD_INT 1
64439: ARRAY
64440: PUSH
64441: FOR_TO
64442: IFFALSE 64564
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64444: LD_ADDR_VAR 0 7
64448: PUSH
64449: LD_VAR 0 6
64453: PUSH
64454: LD_INT 1
64456: ARRAY
64457: PUSH
64458: LD_VAR 0 5
64462: ARRAY
64463: PUSH
64464: LD_VAR 0 6
64468: PUSH
64469: LD_INT 2
64471: ARRAY
64472: PUSH
64473: LD_VAR 0 5
64477: ARRAY
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64483: LD_VAR 0 7
64487: PUSH
64488: LD_INT 1
64490: ARRAY
64491: PPUSH
64492: LD_VAR 0 7
64496: PUSH
64497: LD_INT 2
64499: ARRAY
64500: PPUSH
64501: CALL_OW 428
64505: PUSH
64506: LD_INT 0
64508: EQUAL
64509: IFFALSE 64562
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64511: LD_VAR 0 1
64515: PPUSH
64516: LD_VAR 0 7
64520: PUSH
64521: LD_INT 1
64523: ARRAY
64524: PPUSH
64525: LD_VAR 0 7
64529: PUSH
64530: LD_INT 2
64532: ARRAY
64533: PPUSH
64534: LD_VAR 0 3
64538: PPUSH
64539: CALL_OW 48
// result := IsPlaced ( unit ) ;
64543: LD_ADDR_VAR 0 4
64547: PUSH
64548: LD_VAR 0 1
64552: PPUSH
64553: CALL_OW 305
64557: ST_TO_ADDR
// exit ;
64558: POP
64559: POP
64560: GO 64566
// end ; end ;
64562: GO 64441
64564: POP
64565: POP
// end ;
64566: LD_VAR 0 4
64570: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64571: LD_INT 0
64573: PPUSH
64574: PPUSH
64575: PPUSH
// if not side or side > 8 then
64576: LD_VAR 0 1
64580: NOT
64581: PUSH
64582: LD_VAR 0 1
64586: PUSH
64587: LD_INT 8
64589: GREATER
64590: OR
64591: IFFALSE 64595
// exit ;
64593: GO 64782
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64595: LD_ADDR_VAR 0 4
64599: PUSH
64600: LD_INT 22
64602: PUSH
64603: LD_VAR 0 1
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 21
64614: PUSH
64615: LD_INT 3
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PPUSH
64626: CALL_OW 69
64630: ST_TO_ADDR
// if not tmp then
64631: LD_VAR 0 4
64635: NOT
64636: IFFALSE 64640
// exit ;
64638: GO 64782
// enable_addtolog := true ;
64640: LD_ADDR_OWVAR 81
64644: PUSH
64645: LD_INT 1
64647: ST_TO_ADDR
// AddToLog ( [ ) ;
64648: LD_STRING [
64650: PPUSH
64651: CALL_OW 561
// for i in tmp do
64655: LD_ADDR_VAR 0 3
64659: PUSH
64660: LD_VAR 0 4
64664: PUSH
64665: FOR_IN
64666: IFFALSE 64773
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64668: LD_STRING [
64670: PUSH
64671: LD_VAR 0 3
64675: PPUSH
64676: CALL_OW 266
64680: STR
64681: PUSH
64682: LD_STRING , 
64684: STR
64685: PUSH
64686: LD_VAR 0 3
64690: PPUSH
64691: CALL_OW 250
64695: STR
64696: PUSH
64697: LD_STRING , 
64699: STR
64700: PUSH
64701: LD_VAR 0 3
64705: PPUSH
64706: CALL_OW 251
64710: STR
64711: PUSH
64712: LD_STRING , 
64714: STR
64715: PUSH
64716: LD_VAR 0 3
64720: PPUSH
64721: CALL_OW 254
64725: STR
64726: PUSH
64727: LD_STRING , 
64729: STR
64730: PUSH
64731: LD_VAR 0 3
64735: PPUSH
64736: LD_INT 1
64738: PPUSH
64739: CALL_OW 268
64743: STR
64744: PUSH
64745: LD_STRING , 
64747: STR
64748: PUSH
64749: LD_VAR 0 3
64753: PPUSH
64754: LD_INT 2
64756: PPUSH
64757: CALL_OW 268
64761: STR
64762: PUSH
64763: LD_STRING ],
64765: STR
64766: PPUSH
64767: CALL_OW 561
// end ;
64771: GO 64665
64773: POP
64774: POP
// AddToLog ( ]; ) ;
64775: LD_STRING ];
64777: PPUSH
64778: CALL_OW 561
// end ;
64782: LD_VAR 0 2
64786: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64787: LD_INT 0
64789: PPUSH
64790: PPUSH
64791: PPUSH
64792: PPUSH
64793: PPUSH
// if not area or not rate or not max then
64794: LD_VAR 0 1
64798: NOT
64799: PUSH
64800: LD_VAR 0 2
64804: NOT
64805: OR
64806: PUSH
64807: LD_VAR 0 4
64811: NOT
64812: OR
64813: IFFALSE 64817
// exit ;
64815: GO 65006
// while 1 do
64817: LD_INT 1
64819: IFFALSE 65006
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64821: LD_ADDR_VAR 0 9
64825: PUSH
64826: LD_VAR 0 1
64830: PPUSH
64831: LD_INT 1
64833: PPUSH
64834: CALL_OW 287
64838: PUSH
64839: LD_INT 10
64841: MUL
64842: ST_TO_ADDR
// r := rate / 10 ;
64843: LD_ADDR_VAR 0 7
64847: PUSH
64848: LD_VAR 0 2
64852: PUSH
64853: LD_INT 10
64855: DIVREAL
64856: ST_TO_ADDR
// time := 1 1$00 ;
64857: LD_ADDR_VAR 0 8
64861: PUSH
64862: LD_INT 2100
64864: ST_TO_ADDR
// if amount < min then
64865: LD_VAR 0 9
64869: PUSH
64870: LD_VAR 0 3
64874: LESS
64875: IFFALSE 64893
// r := r * 2 else
64877: LD_ADDR_VAR 0 7
64881: PUSH
64882: LD_VAR 0 7
64886: PUSH
64887: LD_INT 2
64889: MUL
64890: ST_TO_ADDR
64891: GO 64919
// if amount > max then
64893: LD_VAR 0 9
64897: PUSH
64898: LD_VAR 0 4
64902: GREATER
64903: IFFALSE 64919
// r := r / 2 ;
64905: LD_ADDR_VAR 0 7
64909: PUSH
64910: LD_VAR 0 7
64914: PUSH
64915: LD_INT 2
64917: DIVREAL
64918: ST_TO_ADDR
// time := time / r ;
64919: LD_ADDR_VAR 0 8
64923: PUSH
64924: LD_VAR 0 8
64928: PUSH
64929: LD_VAR 0 7
64933: DIVREAL
64934: ST_TO_ADDR
// if time < 0 then
64935: LD_VAR 0 8
64939: PUSH
64940: LD_INT 0
64942: LESS
64943: IFFALSE 64960
// time := time * - 1 ;
64945: LD_ADDR_VAR 0 8
64949: PUSH
64950: LD_VAR 0 8
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: MUL
64959: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64960: LD_VAR 0 8
64964: PUSH
64965: LD_INT 35
64967: PPUSH
64968: LD_INT 875
64970: PPUSH
64971: CALL_OW 12
64975: PLUS
64976: PPUSH
64977: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64981: LD_INT 1
64983: PPUSH
64984: LD_INT 5
64986: PPUSH
64987: CALL_OW 12
64991: PPUSH
64992: LD_VAR 0 1
64996: PPUSH
64997: LD_INT 1
64999: PPUSH
65000: CALL_OW 55
// end ;
65004: GO 64817
// end ;
65006: LD_VAR 0 5
65010: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65011: LD_INT 0
65013: PPUSH
65014: PPUSH
65015: PPUSH
65016: PPUSH
65017: PPUSH
65018: PPUSH
65019: PPUSH
65020: PPUSH
// if not turrets or not factories then
65021: LD_VAR 0 1
65025: NOT
65026: PUSH
65027: LD_VAR 0 2
65031: NOT
65032: OR
65033: IFFALSE 65037
// exit ;
65035: GO 65344
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65037: LD_ADDR_VAR 0 10
65041: PUSH
65042: LD_INT 5
65044: PUSH
65045: LD_INT 6
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 2
65054: PUSH
65055: LD_INT 4
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 3
65064: PUSH
65065: LD_INT 5
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 24
65079: PUSH
65080: LD_INT 25
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 23
65089: PUSH
65090: LD_INT 27
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 42
65103: PUSH
65104: LD_INT 43
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 44
65113: PUSH
65114: LD_INT 46
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 45
65123: PUSH
65124: LD_INT 47
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: ST_TO_ADDR
// result := [ ] ;
65141: LD_ADDR_VAR 0 3
65145: PUSH
65146: EMPTY
65147: ST_TO_ADDR
// for i in turrets do
65148: LD_ADDR_VAR 0 4
65152: PUSH
65153: LD_VAR 0 1
65157: PUSH
65158: FOR_IN
65159: IFFALSE 65342
// begin nat := GetNation ( i ) ;
65161: LD_ADDR_VAR 0 7
65165: PUSH
65166: LD_VAR 0 4
65170: PPUSH
65171: CALL_OW 248
65175: ST_TO_ADDR
// weapon := 0 ;
65176: LD_ADDR_VAR 0 8
65180: PUSH
65181: LD_INT 0
65183: ST_TO_ADDR
// if not nat then
65184: LD_VAR 0 7
65188: NOT
65189: IFFALSE 65193
// continue ;
65191: GO 65158
// for j in list [ nat ] do
65193: LD_ADDR_VAR 0 5
65197: PUSH
65198: LD_VAR 0 10
65202: PUSH
65203: LD_VAR 0 7
65207: ARRAY
65208: PUSH
65209: FOR_IN
65210: IFFALSE 65251
// if GetBWeapon ( i ) = j [ 1 ] then
65212: LD_VAR 0 4
65216: PPUSH
65217: CALL_OW 269
65221: PUSH
65222: LD_VAR 0 5
65226: PUSH
65227: LD_INT 1
65229: ARRAY
65230: EQUAL
65231: IFFALSE 65249
// begin weapon := j [ 2 ] ;
65233: LD_ADDR_VAR 0 8
65237: PUSH
65238: LD_VAR 0 5
65242: PUSH
65243: LD_INT 2
65245: ARRAY
65246: ST_TO_ADDR
// break ;
65247: GO 65251
// end ;
65249: GO 65209
65251: POP
65252: POP
// if not weapon then
65253: LD_VAR 0 8
65257: NOT
65258: IFFALSE 65262
// continue ;
65260: GO 65158
// for k in factories do
65262: LD_ADDR_VAR 0 6
65266: PUSH
65267: LD_VAR 0 2
65271: PUSH
65272: FOR_IN
65273: IFFALSE 65338
// begin weapons := AvailableWeaponList ( k ) ;
65275: LD_ADDR_VAR 0 9
65279: PUSH
65280: LD_VAR 0 6
65284: PPUSH
65285: CALL_OW 478
65289: ST_TO_ADDR
// if not weapons then
65290: LD_VAR 0 9
65294: NOT
65295: IFFALSE 65299
// continue ;
65297: GO 65272
// if weapon in weapons then
65299: LD_VAR 0 8
65303: PUSH
65304: LD_VAR 0 9
65308: IN
65309: IFFALSE 65336
// begin result := [ i , weapon ] ;
65311: LD_ADDR_VAR 0 3
65315: PUSH
65316: LD_VAR 0 4
65320: PUSH
65321: LD_VAR 0 8
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: ST_TO_ADDR
// exit ;
65330: POP
65331: POP
65332: POP
65333: POP
65334: GO 65344
// end ; end ;
65336: GO 65272
65338: POP
65339: POP
// end ;
65340: GO 65158
65342: POP
65343: POP
// end ;
65344: LD_VAR 0 3
65348: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65349: LD_INT 0
65351: PPUSH
// if not side or side > 8 then
65352: LD_VAR 0 3
65356: NOT
65357: PUSH
65358: LD_VAR 0 3
65362: PUSH
65363: LD_INT 8
65365: GREATER
65366: OR
65367: IFFALSE 65371
// exit ;
65369: GO 65430
// if not range then
65371: LD_VAR 0 4
65375: NOT
65376: IFFALSE 65387
// range := - 12 ;
65378: LD_ADDR_VAR 0 4
65382: PUSH
65383: LD_INT 12
65385: NEG
65386: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65387: LD_VAR 0 1
65391: PPUSH
65392: LD_VAR 0 2
65396: PPUSH
65397: LD_VAR 0 3
65401: PPUSH
65402: LD_VAR 0 4
65406: PPUSH
65407: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65411: LD_VAR 0 1
65415: PPUSH
65416: LD_VAR 0 2
65420: PPUSH
65421: LD_VAR 0 3
65425: PPUSH
65426: CALL_OW 331
// end ;
65430: LD_VAR 0 5
65434: RET
// export function Video ( mode ) ; begin
65435: LD_INT 0
65437: PPUSH
// ingame_video = mode ;
65438: LD_ADDR_OWVAR 52
65442: PUSH
65443: LD_VAR 0 1
65447: ST_TO_ADDR
// interface_hidden = mode ;
65448: LD_ADDR_OWVAR 54
65452: PUSH
65453: LD_VAR 0 1
65457: ST_TO_ADDR
// end ;
65458: LD_VAR 0 2
65462: RET
// export function Join ( array , element ) ; begin
65463: LD_INT 0
65465: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65466: LD_ADDR_VAR 0 3
65470: PUSH
65471: LD_VAR 0 1
65475: PPUSH
65476: LD_VAR 0 1
65480: PUSH
65481: LD_INT 1
65483: PLUS
65484: PPUSH
65485: LD_VAR 0 2
65489: PPUSH
65490: CALL_OW 1
65494: ST_TO_ADDR
// end ;
65495: LD_VAR 0 3
65499: RET
// export function JoinUnion ( array , element ) ; begin
65500: LD_INT 0
65502: PPUSH
// result := array union element ;
65503: LD_ADDR_VAR 0 3
65507: PUSH
65508: LD_VAR 0 1
65512: PUSH
65513: LD_VAR 0 2
65517: UNION
65518: ST_TO_ADDR
// end ;
65519: LD_VAR 0 3
65523: RET
// export function GetBehemoths ( side ) ; begin
65524: LD_INT 0
65526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65527: LD_ADDR_VAR 0 2
65531: PUSH
65532: LD_INT 22
65534: PUSH
65535: LD_VAR 0 1
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 31
65546: PUSH
65547: LD_INT 25
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PPUSH
65558: CALL_OW 69
65562: ST_TO_ADDR
// end ;
65563: LD_VAR 0 2
65567: RET
// export function Shuffle ( array ) ; var i , index ; begin
65568: LD_INT 0
65570: PPUSH
65571: PPUSH
65572: PPUSH
// result := [ ] ;
65573: LD_ADDR_VAR 0 2
65577: PUSH
65578: EMPTY
65579: ST_TO_ADDR
// if not array then
65580: LD_VAR 0 1
65584: NOT
65585: IFFALSE 65589
// exit ;
65587: GO 65688
// Randomize ;
65589: CALL_OW 10
// for i = array downto 1 do
65593: LD_ADDR_VAR 0 3
65597: PUSH
65598: DOUBLE
65599: LD_VAR 0 1
65603: INC
65604: ST_TO_ADDR
65605: LD_INT 1
65607: PUSH
65608: FOR_DOWNTO
65609: IFFALSE 65686
// begin index := rand ( 1 , array ) ;
65611: LD_ADDR_VAR 0 4
65615: PUSH
65616: LD_INT 1
65618: PPUSH
65619: LD_VAR 0 1
65623: PPUSH
65624: CALL_OW 12
65628: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65629: LD_ADDR_VAR 0 2
65633: PUSH
65634: LD_VAR 0 2
65638: PPUSH
65639: LD_VAR 0 2
65643: PUSH
65644: LD_INT 1
65646: PLUS
65647: PPUSH
65648: LD_VAR 0 1
65652: PUSH
65653: LD_VAR 0 4
65657: ARRAY
65658: PPUSH
65659: CALL_OW 2
65663: ST_TO_ADDR
// array := Delete ( array , index ) ;
65664: LD_ADDR_VAR 0 1
65668: PUSH
65669: LD_VAR 0 1
65673: PPUSH
65674: LD_VAR 0 4
65678: PPUSH
65679: CALL_OW 3
65683: ST_TO_ADDR
// end ;
65684: GO 65608
65686: POP
65687: POP
// end ;
65688: LD_VAR 0 2
65692: RET
// export function GetBaseMaterials ( base ) ; begin
65693: LD_INT 0
65695: PPUSH
// result := [ 0 , 0 , 0 ] ;
65696: LD_ADDR_VAR 0 2
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: LIST
65714: ST_TO_ADDR
// if not base then
65715: LD_VAR 0 1
65719: NOT
65720: IFFALSE 65724
// exit ;
65722: GO 65773
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65724: LD_ADDR_VAR 0 2
65728: PUSH
65729: LD_VAR 0 1
65733: PPUSH
65734: LD_INT 1
65736: PPUSH
65737: CALL_OW 275
65741: PUSH
65742: LD_VAR 0 1
65746: PPUSH
65747: LD_INT 2
65749: PPUSH
65750: CALL_OW 275
65754: PUSH
65755: LD_VAR 0 1
65759: PPUSH
65760: LD_INT 3
65762: PPUSH
65763: CALL_OW 275
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: LIST
65772: ST_TO_ADDR
// end ;
65773: LD_VAR 0 2
65777: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65778: LD_INT 0
65780: PPUSH
65781: PPUSH
// result := array ;
65782: LD_ADDR_VAR 0 3
65786: PUSH
65787: LD_VAR 0 1
65791: ST_TO_ADDR
// if size >= result then
65792: LD_VAR 0 2
65796: PUSH
65797: LD_VAR 0 3
65801: GREATEREQUAL
65802: IFFALSE 65806
// exit ;
65804: GO 65856
// if size then
65806: LD_VAR 0 2
65810: IFFALSE 65856
// for i := array downto size do
65812: LD_ADDR_VAR 0 4
65816: PUSH
65817: DOUBLE
65818: LD_VAR 0 1
65822: INC
65823: ST_TO_ADDR
65824: LD_VAR 0 2
65828: PUSH
65829: FOR_DOWNTO
65830: IFFALSE 65854
// result := Delete ( result , result ) ;
65832: LD_ADDR_VAR 0 3
65836: PUSH
65837: LD_VAR 0 3
65841: PPUSH
65842: LD_VAR 0 3
65846: PPUSH
65847: CALL_OW 3
65851: ST_TO_ADDR
65852: GO 65829
65854: POP
65855: POP
// end ;
65856: LD_VAR 0 3
65860: RET
// export function ComExit ( unit ) ; var tmp ; begin
65861: LD_INT 0
65863: PPUSH
65864: PPUSH
// if not IsInUnit ( unit ) then
65865: LD_VAR 0 1
65869: PPUSH
65870: CALL_OW 310
65874: NOT
65875: IFFALSE 65879
// exit ;
65877: GO 65939
// tmp := IsInUnit ( unit ) ;
65879: LD_ADDR_VAR 0 3
65883: PUSH
65884: LD_VAR 0 1
65888: PPUSH
65889: CALL_OW 310
65893: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65894: LD_VAR 0 3
65898: PPUSH
65899: CALL_OW 247
65903: PUSH
65904: LD_INT 2
65906: EQUAL
65907: IFFALSE 65920
// ComExitVehicle ( unit ) else
65909: LD_VAR 0 1
65913: PPUSH
65914: CALL_OW 121
65918: GO 65929
// ComExitBuilding ( unit ) ;
65920: LD_VAR 0 1
65924: PPUSH
65925: CALL_OW 122
// result := tmp ;
65929: LD_ADDR_VAR 0 2
65933: PUSH
65934: LD_VAR 0 3
65938: ST_TO_ADDR
// end ;
65939: LD_VAR 0 2
65943: RET
// export function ComExitAll ( units ) ; var i ; begin
65944: LD_INT 0
65946: PPUSH
65947: PPUSH
// if not units then
65948: LD_VAR 0 1
65952: NOT
65953: IFFALSE 65957
// exit ;
65955: GO 65983
// for i in units do
65957: LD_ADDR_VAR 0 3
65961: PUSH
65962: LD_VAR 0 1
65966: PUSH
65967: FOR_IN
65968: IFFALSE 65981
// ComExit ( i ) ;
65970: LD_VAR 0 3
65974: PPUSH
65975: CALL 65861 0 1
65979: GO 65967
65981: POP
65982: POP
// end ;
65983: LD_VAR 0 2
65987: RET
// export function ResetHc ; begin
65988: LD_INT 0
65990: PPUSH
// InitHc ;
65991: CALL_OW 19
// hc_importance := 0 ;
65995: LD_ADDR_OWVAR 32
65999: PUSH
66000: LD_INT 0
66002: ST_TO_ADDR
// end ;
66003: LD_VAR 0 1
66007: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66008: LD_INT 0
66010: PPUSH
66011: PPUSH
66012: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66013: LD_ADDR_VAR 0 6
66017: PUSH
66018: LD_VAR 0 1
66022: PUSH
66023: LD_VAR 0 3
66027: PLUS
66028: PUSH
66029: LD_INT 2
66031: DIV
66032: ST_TO_ADDR
// if _x < 0 then
66033: LD_VAR 0 6
66037: PUSH
66038: LD_INT 0
66040: LESS
66041: IFFALSE 66058
// _x := _x * - 1 ;
66043: LD_ADDR_VAR 0 6
66047: PUSH
66048: LD_VAR 0 6
66052: PUSH
66053: LD_INT 1
66055: NEG
66056: MUL
66057: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66058: LD_ADDR_VAR 0 7
66062: PUSH
66063: LD_VAR 0 2
66067: PUSH
66068: LD_VAR 0 4
66072: PLUS
66073: PUSH
66074: LD_INT 2
66076: DIV
66077: ST_TO_ADDR
// if _y < 0 then
66078: LD_VAR 0 7
66082: PUSH
66083: LD_INT 0
66085: LESS
66086: IFFALSE 66103
// _y := _y * - 1 ;
66088: LD_ADDR_VAR 0 7
66092: PUSH
66093: LD_VAR 0 7
66097: PUSH
66098: LD_INT 1
66100: NEG
66101: MUL
66102: ST_TO_ADDR
// result := [ _x , _y ] ;
66103: LD_ADDR_VAR 0 5
66107: PUSH
66108: LD_VAR 0 6
66112: PUSH
66113: LD_VAR 0 7
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: ST_TO_ADDR
// end ;
66122: LD_VAR 0 5
66126: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66127: LD_INT 0
66129: PPUSH
66130: PPUSH
66131: PPUSH
66132: PPUSH
// task := GetTaskList ( unit ) ;
66133: LD_ADDR_VAR 0 7
66137: PUSH
66138: LD_VAR 0 1
66142: PPUSH
66143: CALL_OW 437
66147: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66148: LD_VAR 0 7
66152: NOT
66153: PUSH
66154: LD_VAR 0 1
66158: PPUSH
66159: LD_VAR 0 2
66163: PPUSH
66164: CALL_OW 308
66168: NOT
66169: AND
66170: IFFALSE 66174
// exit ;
66172: GO 66292
// if IsInArea ( unit , area ) then
66174: LD_VAR 0 1
66178: PPUSH
66179: LD_VAR 0 2
66183: PPUSH
66184: CALL_OW 308
66188: IFFALSE 66206
// begin ComMoveToArea ( unit , goAway ) ;
66190: LD_VAR 0 1
66194: PPUSH
66195: LD_VAR 0 3
66199: PPUSH
66200: CALL_OW 113
// exit ;
66204: GO 66292
// end ; if task [ 1 ] [ 1 ] <> M then
66206: LD_VAR 0 7
66210: PUSH
66211: LD_INT 1
66213: ARRAY
66214: PUSH
66215: LD_INT 1
66217: ARRAY
66218: PUSH
66219: LD_STRING M
66221: NONEQUAL
66222: IFFALSE 66226
// exit ;
66224: GO 66292
// x := task [ 1 ] [ 2 ] ;
66226: LD_ADDR_VAR 0 5
66230: PUSH
66231: LD_VAR 0 7
66235: PUSH
66236: LD_INT 1
66238: ARRAY
66239: PUSH
66240: LD_INT 2
66242: ARRAY
66243: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66244: LD_ADDR_VAR 0 6
66248: PUSH
66249: LD_VAR 0 7
66253: PUSH
66254: LD_INT 1
66256: ARRAY
66257: PUSH
66258: LD_INT 3
66260: ARRAY
66261: ST_TO_ADDR
// if InArea ( x , y , area ) then
66262: LD_VAR 0 5
66266: PPUSH
66267: LD_VAR 0 6
66271: PPUSH
66272: LD_VAR 0 2
66276: PPUSH
66277: CALL_OW 309
66281: IFFALSE 66292
// ComStop ( unit ) ;
66283: LD_VAR 0 1
66287: PPUSH
66288: CALL_OW 141
// end ;
66292: LD_VAR 0 4
66296: RET
// export function Abs ( value ) ; begin
66297: LD_INT 0
66299: PPUSH
// result := value ;
66300: LD_ADDR_VAR 0 2
66304: PUSH
66305: LD_VAR 0 1
66309: ST_TO_ADDR
// if value < 0 then
66310: LD_VAR 0 1
66314: PUSH
66315: LD_INT 0
66317: LESS
66318: IFFALSE 66335
// result := value * - 1 ;
66320: LD_ADDR_VAR 0 2
66324: PUSH
66325: LD_VAR 0 1
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: MUL
66334: ST_TO_ADDR
// end ;
66335: LD_VAR 0 2
66339: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66340: LD_INT 0
66342: PPUSH
66343: PPUSH
66344: PPUSH
66345: PPUSH
66346: PPUSH
66347: PPUSH
66348: PPUSH
66349: PPUSH
// if not unit or not building then
66350: LD_VAR 0 1
66354: NOT
66355: PUSH
66356: LD_VAR 0 2
66360: NOT
66361: OR
66362: IFFALSE 66366
// exit ;
66364: GO 66592
// x := GetX ( building ) ;
66366: LD_ADDR_VAR 0 4
66370: PUSH
66371: LD_VAR 0 2
66375: PPUSH
66376: CALL_OW 250
66380: ST_TO_ADDR
// y := GetY ( building ) ;
66381: LD_ADDR_VAR 0 6
66385: PUSH
66386: LD_VAR 0 2
66390: PPUSH
66391: CALL_OW 251
66395: ST_TO_ADDR
// d := GetDir ( building ) ;
66396: LD_ADDR_VAR 0 8
66400: PUSH
66401: LD_VAR 0 2
66405: PPUSH
66406: CALL_OW 254
66410: ST_TO_ADDR
// r := 4 ;
66411: LD_ADDR_VAR 0 9
66415: PUSH
66416: LD_INT 4
66418: ST_TO_ADDR
// for i := 1 to 5 do
66419: LD_ADDR_VAR 0 10
66423: PUSH
66424: DOUBLE
66425: LD_INT 1
66427: DEC
66428: ST_TO_ADDR
66429: LD_INT 5
66431: PUSH
66432: FOR_TO
66433: IFFALSE 66590
// begin _x := ShiftX ( x , d , r + i ) ;
66435: LD_ADDR_VAR 0 5
66439: PUSH
66440: LD_VAR 0 4
66444: PPUSH
66445: LD_VAR 0 8
66449: PPUSH
66450: LD_VAR 0 9
66454: PUSH
66455: LD_VAR 0 10
66459: PLUS
66460: PPUSH
66461: CALL_OW 272
66465: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66466: LD_ADDR_VAR 0 7
66470: PUSH
66471: LD_VAR 0 6
66475: PPUSH
66476: LD_VAR 0 8
66480: PPUSH
66481: LD_VAR 0 9
66485: PUSH
66486: LD_VAR 0 10
66490: PLUS
66491: PPUSH
66492: CALL_OW 273
66496: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66497: LD_VAR 0 5
66501: PPUSH
66502: LD_VAR 0 7
66506: PPUSH
66507: CALL_OW 488
66511: PUSH
66512: LD_VAR 0 5
66516: PPUSH
66517: LD_VAR 0 7
66521: PPUSH
66522: CALL_OW 428
66526: PPUSH
66527: CALL_OW 247
66531: PUSH
66532: LD_INT 3
66534: PUSH
66535: LD_INT 2
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: IN
66542: NOT
66543: AND
66544: IFFALSE 66588
// begin ComMoveXY ( unit , _x , _y ) ;
66546: LD_VAR 0 1
66550: PPUSH
66551: LD_VAR 0 5
66555: PPUSH
66556: LD_VAR 0 7
66560: PPUSH
66561: CALL_OW 111
// result := [ _x , _y ] ;
66565: LD_ADDR_VAR 0 3
66569: PUSH
66570: LD_VAR 0 5
66574: PUSH
66575: LD_VAR 0 7
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: ST_TO_ADDR
// exit ;
66584: POP
66585: POP
66586: GO 66592
// end ; end ;
66588: GO 66432
66590: POP
66591: POP
// end ;
66592: LD_VAR 0 3
66596: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66597: LD_INT 0
66599: PPUSH
66600: PPUSH
66601: PPUSH
// result := 0 ;
66602: LD_ADDR_VAR 0 3
66606: PUSH
66607: LD_INT 0
66609: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66610: LD_VAR 0 1
66614: PUSH
66615: LD_INT 0
66617: LESS
66618: PUSH
66619: LD_VAR 0 1
66623: PUSH
66624: LD_INT 8
66626: GREATER
66627: OR
66628: PUSH
66629: LD_VAR 0 2
66633: PUSH
66634: LD_INT 0
66636: LESS
66637: OR
66638: PUSH
66639: LD_VAR 0 2
66643: PUSH
66644: LD_INT 8
66646: GREATER
66647: OR
66648: IFFALSE 66652
// exit ;
66650: GO 66727
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66652: LD_ADDR_VAR 0 4
66656: PUSH
66657: LD_INT 22
66659: PUSH
66660: LD_VAR 0 2
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PPUSH
66669: CALL_OW 69
66673: PUSH
66674: FOR_IN
66675: IFFALSE 66725
// begin un := UnitShoot ( i ) ;
66677: LD_ADDR_VAR 0 5
66681: PUSH
66682: LD_VAR 0 4
66686: PPUSH
66687: CALL_OW 504
66691: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66692: LD_VAR 0 5
66696: PPUSH
66697: CALL_OW 255
66701: PUSH
66702: LD_VAR 0 1
66706: EQUAL
66707: IFFALSE 66723
// begin result := un ;
66709: LD_ADDR_VAR 0 3
66713: PUSH
66714: LD_VAR 0 5
66718: ST_TO_ADDR
// exit ;
66719: POP
66720: POP
66721: GO 66727
// end ; end ;
66723: GO 66674
66725: POP
66726: POP
// end ;
66727: LD_VAR 0 3
66731: RET
// export function GetCargoBay ( units ) ; begin
66732: LD_INT 0
66734: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66735: LD_ADDR_VAR 0 2
66739: PUSH
66740: LD_VAR 0 1
66744: PPUSH
66745: LD_INT 2
66747: PUSH
66748: LD_INT 34
66750: PUSH
66751: LD_INT 12
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 34
66760: PUSH
66761: LD_INT 51
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 34
66770: PUSH
66771: LD_INT 32
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 34
66780: PUSH
66781: LD_INT 89
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: PPUSH
66795: CALL_OW 72
66799: ST_TO_ADDR
// end ;
66800: LD_VAR 0 2
66804: RET
// export function Negate ( value ) ; begin
66805: LD_INT 0
66807: PPUSH
// result := not value ;
66808: LD_ADDR_VAR 0 2
66812: PUSH
66813: LD_VAR 0 1
66817: NOT
66818: ST_TO_ADDR
// end ;
66819: LD_VAR 0 2
66823: RET
// export function Inc ( value ) ; begin
66824: LD_INT 0
66826: PPUSH
// result := value + 1 ;
66827: LD_ADDR_VAR 0 2
66831: PUSH
66832: LD_VAR 0 1
66836: PUSH
66837: LD_INT 1
66839: PLUS
66840: ST_TO_ADDR
// end ;
66841: LD_VAR 0 2
66845: RET
// export function Dec ( value ) ; begin
66846: LD_INT 0
66848: PPUSH
// result := value - 1 ;
66849: LD_ADDR_VAR 0 2
66853: PUSH
66854: LD_VAR 0 1
66858: PUSH
66859: LD_INT 1
66861: MINUS
66862: ST_TO_ADDR
// end ;
66863: LD_VAR 0 2
66867: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66868: LD_INT 0
66870: PPUSH
66871: PPUSH
66872: PPUSH
66873: PPUSH
66874: PPUSH
66875: PPUSH
66876: PPUSH
66877: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66878: LD_VAR 0 1
66882: PPUSH
66883: LD_VAR 0 2
66887: PPUSH
66888: CALL_OW 488
66892: NOT
66893: PUSH
66894: LD_VAR 0 3
66898: PPUSH
66899: LD_VAR 0 4
66903: PPUSH
66904: CALL_OW 488
66908: NOT
66909: OR
66910: IFFALSE 66923
// begin result := - 1 ;
66912: LD_ADDR_VAR 0 5
66916: PUSH
66917: LD_INT 1
66919: NEG
66920: ST_TO_ADDR
// exit ;
66921: GO 67158
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66923: LD_ADDR_VAR 0 12
66927: PUSH
66928: LD_VAR 0 1
66932: PPUSH
66933: LD_VAR 0 2
66937: PPUSH
66938: LD_VAR 0 3
66942: PPUSH
66943: LD_VAR 0 4
66947: PPUSH
66948: CALL 66008 0 4
66952: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66953: LD_ADDR_VAR 0 11
66957: PUSH
66958: LD_VAR 0 1
66962: PPUSH
66963: LD_VAR 0 2
66967: PPUSH
66968: LD_VAR 0 12
66972: PUSH
66973: LD_INT 1
66975: ARRAY
66976: PPUSH
66977: LD_VAR 0 12
66981: PUSH
66982: LD_INT 2
66984: ARRAY
66985: PPUSH
66986: CALL_OW 298
66990: ST_TO_ADDR
// distance := 9999 ;
66991: LD_ADDR_VAR 0 10
66995: PUSH
66996: LD_INT 9999
66998: ST_TO_ADDR
// for i := 0 to 5 do
66999: LD_ADDR_VAR 0 6
67003: PUSH
67004: DOUBLE
67005: LD_INT 0
67007: DEC
67008: ST_TO_ADDR
67009: LD_INT 5
67011: PUSH
67012: FOR_TO
67013: IFFALSE 67156
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67015: LD_ADDR_VAR 0 7
67019: PUSH
67020: LD_VAR 0 1
67024: PPUSH
67025: LD_VAR 0 6
67029: PPUSH
67030: LD_VAR 0 11
67034: PPUSH
67035: CALL_OW 272
67039: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67040: LD_ADDR_VAR 0 8
67044: PUSH
67045: LD_VAR 0 2
67049: PPUSH
67050: LD_VAR 0 6
67054: PPUSH
67055: LD_VAR 0 11
67059: PPUSH
67060: CALL_OW 273
67064: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67065: LD_VAR 0 7
67069: PPUSH
67070: LD_VAR 0 8
67074: PPUSH
67075: CALL_OW 488
67079: NOT
67080: IFFALSE 67084
// continue ;
67082: GO 67012
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67084: LD_ADDR_VAR 0 9
67088: PUSH
67089: LD_VAR 0 12
67093: PUSH
67094: LD_INT 1
67096: ARRAY
67097: PPUSH
67098: LD_VAR 0 12
67102: PUSH
67103: LD_INT 2
67105: ARRAY
67106: PPUSH
67107: LD_VAR 0 7
67111: PPUSH
67112: LD_VAR 0 8
67116: PPUSH
67117: CALL_OW 298
67121: ST_TO_ADDR
// if tmp < distance then
67122: LD_VAR 0 9
67126: PUSH
67127: LD_VAR 0 10
67131: LESS
67132: IFFALSE 67154
// begin result := i ;
67134: LD_ADDR_VAR 0 5
67138: PUSH
67139: LD_VAR 0 6
67143: ST_TO_ADDR
// distance := tmp ;
67144: LD_ADDR_VAR 0 10
67148: PUSH
67149: LD_VAR 0 9
67153: ST_TO_ADDR
// end ; end ;
67154: GO 67012
67156: POP
67157: POP
// end ;
67158: LD_VAR 0 5
67162: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67163: LD_INT 0
67165: PPUSH
67166: PPUSH
// if not driver or not IsInUnit ( driver ) then
67167: LD_VAR 0 1
67171: NOT
67172: PUSH
67173: LD_VAR 0 1
67177: PPUSH
67178: CALL_OW 310
67182: NOT
67183: OR
67184: IFFALSE 67188
// exit ;
67186: GO 67278
// vehicle := IsInUnit ( driver ) ;
67188: LD_ADDR_VAR 0 3
67192: PUSH
67193: LD_VAR 0 1
67197: PPUSH
67198: CALL_OW 310
67202: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67203: LD_VAR 0 1
67207: PPUSH
67208: LD_STRING \
67210: PUSH
67211: LD_INT 0
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: LD_INT 0
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: PUSH
67238: LD_STRING E
67240: PUSH
67241: LD_INT 0
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: LD_VAR 0 3
67251: PUSH
67252: LD_INT 0
67254: PUSH
67255: LD_INT 0
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PPUSH
67274: CALL_OW 446
// end ;
67278: LD_VAR 0 2
67282: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67283: LD_INT 0
67285: PPUSH
67286: PPUSH
// if not driver or not IsInUnit ( driver ) then
67287: LD_VAR 0 1
67291: NOT
67292: PUSH
67293: LD_VAR 0 1
67297: PPUSH
67298: CALL_OW 310
67302: NOT
67303: OR
67304: IFFALSE 67308
// exit ;
67306: GO 67398
// vehicle := IsInUnit ( driver ) ;
67308: LD_ADDR_VAR 0 3
67312: PUSH
67313: LD_VAR 0 1
67317: PPUSH
67318: CALL_OW 310
67322: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67323: LD_VAR 0 1
67327: PPUSH
67328: LD_STRING \
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: LD_INT 0
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: LD_INT 0
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: PUSH
67358: LD_STRING E
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: LD_VAR 0 3
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: LD_INT 0
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PPUSH
67394: CALL_OW 447
// end ;
67398: LD_VAR 0 2
67402: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67403: LD_INT 0
67405: PPUSH
67406: PPUSH
67407: PPUSH
// tmp := [ ] ;
67408: LD_ADDR_VAR 0 5
67412: PUSH
67413: EMPTY
67414: ST_TO_ADDR
// for i in units do
67415: LD_ADDR_VAR 0 4
67419: PUSH
67420: LD_VAR 0 1
67424: PUSH
67425: FOR_IN
67426: IFFALSE 67464
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67428: LD_ADDR_VAR 0 5
67432: PUSH
67433: LD_VAR 0 5
67437: PPUSH
67438: LD_VAR 0 5
67442: PUSH
67443: LD_INT 1
67445: PLUS
67446: PPUSH
67447: LD_VAR 0 4
67451: PPUSH
67452: CALL_OW 256
67456: PPUSH
67457: CALL_OW 2
67461: ST_TO_ADDR
67462: GO 67425
67464: POP
67465: POP
// if not tmp then
67466: LD_VAR 0 5
67470: NOT
67471: IFFALSE 67475
// exit ;
67473: GO 67523
// if asc then
67475: LD_VAR 0 2
67479: IFFALSE 67503
// result := SortListByListAsc ( units , tmp ) else
67481: LD_ADDR_VAR 0 3
67485: PUSH
67486: LD_VAR 0 1
67490: PPUSH
67491: LD_VAR 0 5
67495: PPUSH
67496: CALL_OW 76
67500: ST_TO_ADDR
67501: GO 67523
// result := SortListByListDesc ( units , tmp ) ;
67503: LD_ADDR_VAR 0 3
67507: PUSH
67508: LD_VAR 0 1
67512: PPUSH
67513: LD_VAR 0 5
67517: PPUSH
67518: CALL_OW 77
67522: ST_TO_ADDR
// end ;
67523: LD_VAR 0 3
67527: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67528: LD_INT 0
67530: PPUSH
67531: PPUSH
// task := GetTaskList ( mech ) ;
67532: LD_ADDR_VAR 0 4
67536: PUSH
67537: LD_VAR 0 1
67541: PPUSH
67542: CALL_OW 437
67546: ST_TO_ADDR
// if not task then
67547: LD_VAR 0 4
67551: NOT
67552: IFFALSE 67556
// exit ;
67554: GO 67598
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67556: LD_ADDR_VAR 0 3
67560: PUSH
67561: LD_VAR 0 4
67565: PUSH
67566: LD_INT 1
67568: ARRAY
67569: PUSH
67570: LD_INT 1
67572: ARRAY
67573: PUSH
67574: LD_STRING r
67576: EQUAL
67577: PUSH
67578: LD_VAR 0 4
67582: PUSH
67583: LD_INT 1
67585: ARRAY
67586: PUSH
67587: LD_INT 4
67589: ARRAY
67590: PUSH
67591: LD_VAR 0 2
67595: EQUAL
67596: AND
67597: ST_TO_ADDR
// end ;
67598: LD_VAR 0 3
67602: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67603: LD_INT 0
67605: PPUSH
// SetDir ( unit , d ) ;
67606: LD_VAR 0 1
67610: PPUSH
67611: LD_VAR 0 4
67615: PPUSH
67616: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67620: LD_VAR 0 1
67624: PPUSH
67625: LD_VAR 0 2
67629: PPUSH
67630: LD_VAR 0 3
67634: PPUSH
67635: LD_VAR 0 5
67639: PPUSH
67640: CALL_OW 48
// end ;
67644: LD_VAR 0 6
67648: RET
// export function ToNaturalNumber ( number ) ; begin
67649: LD_INT 0
67651: PPUSH
// result := number div 1 ;
67652: LD_ADDR_VAR 0 2
67656: PUSH
67657: LD_VAR 0 1
67661: PUSH
67662: LD_INT 1
67664: DIV
67665: ST_TO_ADDR
// if number < 0 then
67666: LD_VAR 0 1
67670: PUSH
67671: LD_INT 0
67673: LESS
67674: IFFALSE 67684
// result := 0 ;
67676: LD_ADDR_VAR 0 2
67680: PUSH
67681: LD_INT 0
67683: ST_TO_ADDR
// end ;
67684: LD_VAR 0 2
67688: RET
// export function SortByClass ( units , class ) ; var un ; begin
67689: LD_INT 0
67691: PPUSH
67692: PPUSH
// if not units or not class then
67693: LD_VAR 0 1
67697: NOT
67698: PUSH
67699: LD_VAR 0 2
67703: NOT
67704: OR
67705: IFFALSE 67709
// exit ;
67707: GO 67804
// result := [ ] ;
67709: LD_ADDR_VAR 0 3
67713: PUSH
67714: EMPTY
67715: ST_TO_ADDR
// for un in units do
67716: LD_ADDR_VAR 0 4
67720: PUSH
67721: LD_VAR 0 1
67725: PUSH
67726: FOR_IN
67727: IFFALSE 67802
// if GetClass ( un ) = class then
67729: LD_VAR 0 4
67733: PPUSH
67734: CALL_OW 257
67738: PUSH
67739: LD_VAR 0 2
67743: EQUAL
67744: IFFALSE 67771
// result := Insert ( result , 1 , un ) else
67746: LD_ADDR_VAR 0 3
67750: PUSH
67751: LD_VAR 0 3
67755: PPUSH
67756: LD_INT 1
67758: PPUSH
67759: LD_VAR 0 4
67763: PPUSH
67764: CALL_OW 2
67768: ST_TO_ADDR
67769: GO 67800
// result := Replace ( result , result + 1 , un ) ;
67771: LD_ADDR_VAR 0 3
67775: PUSH
67776: LD_VAR 0 3
67780: PPUSH
67781: LD_VAR 0 3
67785: PUSH
67786: LD_INT 1
67788: PLUS
67789: PPUSH
67790: LD_VAR 0 4
67794: PPUSH
67795: CALL_OW 1
67799: ST_TO_ADDR
67800: GO 67726
67802: POP
67803: POP
// end ;
67804: LD_VAR 0 3
67808: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67809: LD_INT 0
67811: PPUSH
67812: PPUSH
67813: PPUSH
67814: PPUSH
67815: PPUSH
67816: PPUSH
67817: PPUSH
// result := [ ] ;
67818: LD_ADDR_VAR 0 4
67822: PUSH
67823: EMPTY
67824: ST_TO_ADDR
// if x - r < 0 then
67825: LD_VAR 0 1
67829: PUSH
67830: LD_VAR 0 3
67834: MINUS
67835: PUSH
67836: LD_INT 0
67838: LESS
67839: IFFALSE 67851
// min_x := 0 else
67841: LD_ADDR_VAR 0 8
67845: PUSH
67846: LD_INT 0
67848: ST_TO_ADDR
67849: GO 67867
// min_x := x - r ;
67851: LD_ADDR_VAR 0 8
67855: PUSH
67856: LD_VAR 0 1
67860: PUSH
67861: LD_VAR 0 3
67865: MINUS
67866: ST_TO_ADDR
// if y - r < 0 then
67867: LD_VAR 0 2
67871: PUSH
67872: LD_VAR 0 3
67876: MINUS
67877: PUSH
67878: LD_INT 0
67880: LESS
67881: IFFALSE 67893
// min_y := 0 else
67883: LD_ADDR_VAR 0 7
67887: PUSH
67888: LD_INT 0
67890: ST_TO_ADDR
67891: GO 67909
// min_y := y - r ;
67893: LD_ADDR_VAR 0 7
67897: PUSH
67898: LD_VAR 0 2
67902: PUSH
67903: LD_VAR 0 3
67907: MINUS
67908: ST_TO_ADDR
// max_x := x + r ;
67909: LD_ADDR_VAR 0 9
67913: PUSH
67914: LD_VAR 0 1
67918: PUSH
67919: LD_VAR 0 3
67923: PLUS
67924: ST_TO_ADDR
// max_y := y + r ;
67925: LD_ADDR_VAR 0 10
67929: PUSH
67930: LD_VAR 0 2
67934: PUSH
67935: LD_VAR 0 3
67939: PLUS
67940: ST_TO_ADDR
// for _x = min_x to max_x do
67941: LD_ADDR_VAR 0 5
67945: PUSH
67946: DOUBLE
67947: LD_VAR 0 8
67951: DEC
67952: ST_TO_ADDR
67953: LD_VAR 0 9
67957: PUSH
67958: FOR_TO
67959: IFFALSE 68060
// for _y = min_y to max_y do
67961: LD_ADDR_VAR 0 6
67965: PUSH
67966: DOUBLE
67967: LD_VAR 0 7
67971: DEC
67972: ST_TO_ADDR
67973: LD_VAR 0 10
67977: PUSH
67978: FOR_TO
67979: IFFALSE 68056
// begin if not ValidHex ( _x , _y ) then
67981: LD_VAR 0 5
67985: PPUSH
67986: LD_VAR 0 6
67990: PPUSH
67991: CALL_OW 488
67995: NOT
67996: IFFALSE 68000
// continue ;
67998: GO 67978
// if GetResourceTypeXY ( _x , _y ) then
68000: LD_VAR 0 5
68004: PPUSH
68005: LD_VAR 0 6
68009: PPUSH
68010: CALL_OW 283
68014: IFFALSE 68054
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68016: LD_ADDR_VAR 0 4
68020: PUSH
68021: LD_VAR 0 4
68025: PPUSH
68026: LD_VAR 0 4
68030: PUSH
68031: LD_INT 1
68033: PLUS
68034: PPUSH
68035: LD_VAR 0 5
68039: PUSH
68040: LD_VAR 0 6
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PPUSH
68049: CALL_OW 1
68053: ST_TO_ADDR
// end ;
68054: GO 67978
68056: POP
68057: POP
68058: GO 67958
68060: POP
68061: POP
// end ;
68062: LD_VAR 0 4
68066: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68067: LD_INT 0
68069: PPUSH
68070: PPUSH
68071: PPUSH
68072: PPUSH
68073: PPUSH
68074: PPUSH
68075: PPUSH
68076: PPUSH
// if not units then
68077: LD_VAR 0 1
68081: NOT
68082: IFFALSE 68086
// exit ;
68084: GO 68610
// result := UnitFilter ( units , [ f_ok ] ) ;
68086: LD_ADDR_VAR 0 3
68090: PUSH
68091: LD_VAR 0 1
68095: PPUSH
68096: LD_INT 50
68098: PUSH
68099: EMPTY
68100: LIST
68101: PPUSH
68102: CALL_OW 72
68106: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68107: LD_ADDR_VAR 0 8
68111: PUSH
68112: LD_VAR 0 1
68116: PUSH
68117: LD_INT 1
68119: ARRAY
68120: PPUSH
68121: CALL_OW 255
68125: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68126: LD_ADDR_VAR 0 10
68130: PUSH
68131: LD_INT 29
68133: PUSH
68134: LD_INT 91
68136: PUSH
68137: LD_INT 49
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: LIST
68144: ST_TO_ADDR
// if not result then
68145: LD_VAR 0 3
68149: NOT
68150: IFFALSE 68154
// exit ;
68152: GO 68610
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68154: LD_ADDR_VAR 0 5
68158: PUSH
68159: LD_INT 81
68161: PUSH
68162: LD_VAR 0 8
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PPUSH
68171: CALL_OW 69
68175: ST_TO_ADDR
// for i in result do
68176: LD_ADDR_VAR 0 4
68180: PUSH
68181: LD_VAR 0 3
68185: PUSH
68186: FOR_IN
68187: IFFALSE 68608
// begin tag := GetTag ( i ) + 1 ;
68189: LD_ADDR_VAR 0 9
68193: PUSH
68194: LD_VAR 0 4
68198: PPUSH
68199: CALL_OW 110
68203: PUSH
68204: LD_INT 1
68206: PLUS
68207: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68208: LD_ADDR_VAR 0 7
68212: PUSH
68213: LD_VAR 0 4
68217: PPUSH
68218: CALL_OW 250
68222: PPUSH
68223: LD_VAR 0 4
68227: PPUSH
68228: CALL_OW 251
68232: PPUSH
68233: LD_INT 6
68235: PPUSH
68236: CALL 67809 0 3
68240: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68241: LD_VAR 0 4
68245: PPUSH
68246: CALL_OW 247
68250: PUSH
68251: LD_INT 2
68253: EQUAL
68254: PUSH
68255: LD_VAR 0 7
68259: AND
68260: PUSH
68261: LD_VAR 0 4
68265: PPUSH
68266: CALL_OW 264
68270: PUSH
68271: LD_VAR 0 10
68275: IN
68276: NOT
68277: AND
68278: IFFALSE 68317
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68280: LD_VAR 0 4
68284: PPUSH
68285: LD_VAR 0 7
68289: PUSH
68290: LD_INT 1
68292: ARRAY
68293: PUSH
68294: LD_INT 1
68296: ARRAY
68297: PPUSH
68298: LD_VAR 0 7
68302: PUSH
68303: LD_INT 1
68305: ARRAY
68306: PUSH
68307: LD_INT 2
68309: ARRAY
68310: PPUSH
68311: CALL_OW 116
68315: GO 68606
// if path > tag then
68317: LD_VAR 0 2
68321: PUSH
68322: LD_VAR 0 9
68326: GREATER
68327: IFFALSE 68535
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68329: LD_ADDR_VAR 0 6
68333: PUSH
68334: LD_VAR 0 5
68338: PPUSH
68339: LD_INT 91
68341: PUSH
68342: LD_VAR 0 4
68346: PUSH
68347: LD_INT 8
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: LIST
68354: PPUSH
68355: CALL_OW 72
68359: ST_TO_ADDR
// if nearEnemy then
68360: LD_VAR 0 6
68364: IFFALSE 68433
// begin if GetWeapon ( i ) = ru_time_lapser then
68366: LD_VAR 0 4
68370: PPUSH
68371: CALL_OW 264
68375: PUSH
68376: LD_INT 49
68378: EQUAL
68379: IFFALSE 68407
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68381: LD_VAR 0 4
68385: PPUSH
68386: LD_VAR 0 6
68390: PPUSH
68391: LD_VAR 0 4
68395: PPUSH
68396: CALL_OW 74
68400: PPUSH
68401: CALL_OW 112
68405: GO 68431
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68407: LD_VAR 0 4
68411: PPUSH
68412: LD_VAR 0 6
68416: PPUSH
68417: LD_VAR 0 4
68421: PPUSH
68422: CALL_OW 74
68426: PPUSH
68427: CALL_OW 115
// end else
68431: GO 68533
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68433: LD_VAR 0 4
68437: PPUSH
68438: LD_VAR 0 2
68442: PUSH
68443: LD_VAR 0 9
68447: ARRAY
68448: PUSH
68449: LD_INT 1
68451: ARRAY
68452: PPUSH
68453: LD_VAR 0 2
68457: PUSH
68458: LD_VAR 0 9
68462: ARRAY
68463: PUSH
68464: LD_INT 2
68466: ARRAY
68467: PPUSH
68468: CALL_OW 297
68472: PUSH
68473: LD_INT 6
68475: GREATER
68476: IFFALSE 68519
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68478: LD_VAR 0 4
68482: PPUSH
68483: LD_VAR 0 2
68487: PUSH
68488: LD_VAR 0 9
68492: ARRAY
68493: PUSH
68494: LD_INT 1
68496: ARRAY
68497: PPUSH
68498: LD_VAR 0 2
68502: PUSH
68503: LD_VAR 0 9
68507: ARRAY
68508: PUSH
68509: LD_INT 2
68511: ARRAY
68512: PPUSH
68513: CALL_OW 114
68517: GO 68533
// SetTag ( i , tag ) ;
68519: LD_VAR 0 4
68523: PPUSH
68524: LD_VAR 0 9
68528: PPUSH
68529: CALL_OW 109
// end else
68533: GO 68606
// if enemy then
68535: LD_VAR 0 5
68539: IFFALSE 68606
// begin if GetWeapon ( i ) = ru_time_lapser then
68541: LD_VAR 0 4
68545: PPUSH
68546: CALL_OW 264
68550: PUSH
68551: LD_INT 49
68553: EQUAL
68554: IFFALSE 68582
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68556: LD_VAR 0 4
68560: PPUSH
68561: LD_VAR 0 5
68565: PPUSH
68566: LD_VAR 0 4
68570: PPUSH
68571: CALL_OW 74
68575: PPUSH
68576: CALL_OW 112
68580: GO 68606
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68582: LD_VAR 0 4
68586: PPUSH
68587: LD_VAR 0 5
68591: PPUSH
68592: LD_VAR 0 4
68596: PPUSH
68597: CALL_OW 74
68601: PPUSH
68602: CALL_OW 115
// end ; end ;
68606: GO 68186
68608: POP
68609: POP
// end ;
68610: LD_VAR 0 3
68614: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68615: LD_INT 0
68617: PPUSH
68618: PPUSH
68619: PPUSH
// if not unit or IsInUnit ( unit ) then
68620: LD_VAR 0 1
68624: NOT
68625: PUSH
68626: LD_VAR 0 1
68630: PPUSH
68631: CALL_OW 310
68635: OR
68636: IFFALSE 68640
// exit ;
68638: GO 68731
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68640: LD_ADDR_VAR 0 4
68644: PUSH
68645: LD_VAR 0 1
68649: PPUSH
68650: CALL_OW 250
68654: PPUSH
68655: LD_VAR 0 2
68659: PPUSH
68660: LD_INT 1
68662: PPUSH
68663: CALL_OW 272
68667: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68668: LD_ADDR_VAR 0 5
68672: PUSH
68673: LD_VAR 0 1
68677: PPUSH
68678: CALL_OW 251
68682: PPUSH
68683: LD_VAR 0 2
68687: PPUSH
68688: LD_INT 1
68690: PPUSH
68691: CALL_OW 273
68695: ST_TO_ADDR
// if ValidHex ( x , y ) then
68696: LD_VAR 0 4
68700: PPUSH
68701: LD_VAR 0 5
68705: PPUSH
68706: CALL_OW 488
68710: IFFALSE 68731
// ComTurnXY ( unit , x , y ) ;
68712: LD_VAR 0 1
68716: PPUSH
68717: LD_VAR 0 4
68721: PPUSH
68722: LD_VAR 0 5
68726: PPUSH
68727: CALL_OW 118
// end ;
68731: LD_VAR 0 3
68735: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68736: LD_INT 0
68738: PPUSH
68739: PPUSH
// result := false ;
68740: LD_ADDR_VAR 0 3
68744: PUSH
68745: LD_INT 0
68747: ST_TO_ADDR
// if not units then
68748: LD_VAR 0 2
68752: NOT
68753: IFFALSE 68757
// exit ;
68755: GO 68802
// for i in units do
68757: LD_ADDR_VAR 0 4
68761: PUSH
68762: LD_VAR 0 2
68766: PUSH
68767: FOR_IN
68768: IFFALSE 68800
// if See ( side , i ) then
68770: LD_VAR 0 1
68774: PPUSH
68775: LD_VAR 0 4
68779: PPUSH
68780: CALL_OW 292
68784: IFFALSE 68798
// begin result := true ;
68786: LD_ADDR_VAR 0 3
68790: PUSH
68791: LD_INT 1
68793: ST_TO_ADDR
// exit ;
68794: POP
68795: POP
68796: GO 68802
// end ;
68798: GO 68767
68800: POP
68801: POP
// end ;
68802: LD_VAR 0 3
68806: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68807: LD_INT 0
68809: PPUSH
68810: PPUSH
68811: PPUSH
68812: PPUSH
// if not unit or not points then
68813: LD_VAR 0 1
68817: NOT
68818: PUSH
68819: LD_VAR 0 2
68823: NOT
68824: OR
68825: IFFALSE 68829
// exit ;
68827: GO 68919
// dist := 99999 ;
68829: LD_ADDR_VAR 0 5
68833: PUSH
68834: LD_INT 99999
68836: ST_TO_ADDR
// for i in points do
68837: LD_ADDR_VAR 0 4
68841: PUSH
68842: LD_VAR 0 2
68846: PUSH
68847: FOR_IN
68848: IFFALSE 68917
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68850: LD_ADDR_VAR 0 6
68854: PUSH
68855: LD_VAR 0 1
68859: PPUSH
68860: LD_VAR 0 4
68864: PUSH
68865: LD_INT 1
68867: ARRAY
68868: PPUSH
68869: LD_VAR 0 4
68873: PUSH
68874: LD_INT 2
68876: ARRAY
68877: PPUSH
68878: CALL_OW 297
68882: ST_TO_ADDR
// if tmpDist < dist then
68883: LD_VAR 0 6
68887: PUSH
68888: LD_VAR 0 5
68892: LESS
68893: IFFALSE 68915
// begin result := i ;
68895: LD_ADDR_VAR 0 3
68899: PUSH
68900: LD_VAR 0 4
68904: ST_TO_ADDR
// dist := tmpDist ;
68905: LD_ADDR_VAR 0 5
68909: PUSH
68910: LD_VAR 0 6
68914: ST_TO_ADDR
// end ; end ;
68915: GO 68847
68917: POP
68918: POP
// end ;
68919: LD_VAR 0 3
68923: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68924: LD_INT 0
68926: PPUSH
// uc_side := side ;
68927: LD_ADDR_OWVAR 20
68931: PUSH
68932: LD_VAR 0 1
68936: ST_TO_ADDR
// uc_nation := 3 ;
68937: LD_ADDR_OWVAR 21
68941: PUSH
68942: LD_INT 3
68944: ST_TO_ADDR
// vc_chassis := 25 ;
68945: LD_ADDR_OWVAR 37
68949: PUSH
68950: LD_INT 25
68952: ST_TO_ADDR
// vc_engine := engine_siberite ;
68953: LD_ADDR_OWVAR 39
68957: PUSH
68958: LD_INT 3
68960: ST_TO_ADDR
// vc_control := control_computer ;
68961: LD_ADDR_OWVAR 38
68965: PUSH
68966: LD_INT 3
68968: ST_TO_ADDR
// vc_weapon := 59 ;
68969: LD_ADDR_OWVAR 40
68973: PUSH
68974: LD_INT 59
68976: ST_TO_ADDR
// result := CreateVehicle ;
68977: LD_ADDR_VAR 0 5
68981: PUSH
68982: CALL_OW 45
68986: ST_TO_ADDR
// SetDir ( result , d ) ;
68987: LD_VAR 0 5
68991: PPUSH
68992: LD_VAR 0 4
68996: PPUSH
68997: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69001: LD_VAR 0 5
69005: PPUSH
69006: LD_VAR 0 2
69010: PPUSH
69011: LD_VAR 0 3
69015: PPUSH
69016: LD_INT 0
69018: PPUSH
69019: CALL_OW 48
// end ;
69023: LD_VAR 0 5
69027: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69028: LD_INT 0
69030: PPUSH
69031: PPUSH
69032: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69033: LD_ADDR_VAR 0 2
69037: PUSH
69038: LD_INT 0
69040: PUSH
69041: LD_INT 0
69043: PUSH
69044: LD_INT 0
69046: PUSH
69047: LD_INT 0
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69056: LD_VAR 0 1
69060: NOT
69061: PUSH
69062: LD_VAR 0 1
69066: PPUSH
69067: CALL_OW 264
69071: PUSH
69072: LD_INT 12
69074: PUSH
69075: LD_INT 51
69077: PUSH
69078: LD_INT 32
69080: PUSH
69081: LD_INT 89
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: IN
69090: NOT
69091: OR
69092: IFFALSE 69096
// exit ;
69094: GO 69194
// for i := 1 to 3 do
69096: LD_ADDR_VAR 0 3
69100: PUSH
69101: DOUBLE
69102: LD_INT 1
69104: DEC
69105: ST_TO_ADDR
69106: LD_INT 3
69108: PUSH
69109: FOR_TO
69110: IFFALSE 69192
// begin tmp := GetCargo ( cargo , i ) ;
69112: LD_ADDR_VAR 0 4
69116: PUSH
69117: LD_VAR 0 1
69121: PPUSH
69122: LD_VAR 0 3
69126: PPUSH
69127: CALL_OW 289
69131: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69132: LD_ADDR_VAR 0 2
69136: PUSH
69137: LD_VAR 0 2
69141: PPUSH
69142: LD_VAR 0 3
69146: PPUSH
69147: LD_VAR 0 4
69151: PPUSH
69152: CALL_OW 1
69156: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69157: LD_ADDR_VAR 0 2
69161: PUSH
69162: LD_VAR 0 2
69166: PPUSH
69167: LD_INT 4
69169: PPUSH
69170: LD_VAR 0 2
69174: PUSH
69175: LD_INT 4
69177: ARRAY
69178: PUSH
69179: LD_VAR 0 4
69183: PLUS
69184: PPUSH
69185: CALL_OW 1
69189: ST_TO_ADDR
// end ;
69190: GO 69109
69192: POP
69193: POP
// end ;
69194: LD_VAR 0 2
69198: RET
// export function Length ( array ) ; begin
69199: LD_INT 0
69201: PPUSH
// result := array + 0 ;
69202: LD_ADDR_VAR 0 2
69206: PUSH
69207: LD_VAR 0 1
69211: PUSH
69212: LD_INT 0
69214: PLUS
69215: ST_TO_ADDR
// end ;
69216: LD_VAR 0 2
69220: RET
// export function PrepareArray ( array ) ; begin
69221: LD_INT 0
69223: PPUSH
// result := array diff 0 ;
69224: LD_ADDR_VAR 0 2
69228: PUSH
69229: LD_VAR 0 1
69233: PUSH
69234: LD_INT 0
69236: DIFF
69237: ST_TO_ADDR
// if not result [ 1 ] then
69238: LD_VAR 0 2
69242: PUSH
69243: LD_INT 1
69245: ARRAY
69246: NOT
69247: IFFALSE 69267
// result := Delete ( result , 1 ) ;
69249: LD_ADDR_VAR 0 2
69253: PUSH
69254: LD_VAR 0 2
69258: PPUSH
69259: LD_INT 1
69261: PPUSH
69262: CALL_OW 3
69266: ST_TO_ADDR
// end ;
69267: LD_VAR 0 2
69271: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69272: LD_INT 0
69274: PPUSH
69275: PPUSH
69276: PPUSH
69277: PPUSH
// sibRocketRange := 25 ;
69278: LD_ADDR_VAR 0 6
69282: PUSH
69283: LD_INT 25
69285: ST_TO_ADDR
// result := false ;
69286: LD_ADDR_VAR 0 4
69290: PUSH
69291: LD_INT 0
69293: ST_TO_ADDR
// for i := 0 to 5 do
69294: LD_ADDR_VAR 0 5
69298: PUSH
69299: DOUBLE
69300: LD_INT 0
69302: DEC
69303: ST_TO_ADDR
69304: LD_INT 5
69306: PUSH
69307: FOR_TO
69308: IFFALSE 69375
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69310: LD_VAR 0 1
69314: PPUSH
69315: LD_VAR 0 5
69319: PPUSH
69320: LD_VAR 0 6
69324: PPUSH
69325: CALL_OW 272
69329: PPUSH
69330: LD_VAR 0 2
69334: PPUSH
69335: LD_VAR 0 5
69339: PPUSH
69340: LD_VAR 0 6
69344: PPUSH
69345: CALL_OW 273
69349: PPUSH
69350: LD_VAR 0 3
69354: PPUSH
69355: CALL_OW 309
69359: IFFALSE 69373
// begin result := true ;
69361: LD_ADDR_VAR 0 4
69365: PUSH
69366: LD_INT 1
69368: ST_TO_ADDR
// exit ;
69369: POP
69370: POP
69371: GO 69377
// end ;
69373: GO 69307
69375: POP
69376: POP
// end ;
69377: LD_VAR 0 4
69381: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69382: LD_INT 0
69384: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69385: LD_VAR 0 1
69389: PPUSH
69390: LD_VAR 0 2
69394: PPUSH
69395: LD_INT 0
69397: PPUSH
69398: LD_INT 0
69400: PPUSH
69401: LD_INT 1
69403: PPUSH
69404: LD_INT 0
69406: PPUSH
69407: CALL_OW 587
// end ; end_of_file
69411: LD_VAR 0 3
69415: RET
// export globalGameSaveCounter ; every 0 0$1 do
69416: GO 69418
69418: DISABLE
// begin enable ;
69419: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
69420: LD_STRING updateTimer(
69422: PUSH
69423: LD_OWVAR 1
69427: STR
69428: PUSH
69429: LD_STRING );
69431: STR
69432: PPUSH
69433: CALL_OW 559
// end ;
69437: END
// every 0 0$1 do
69438: GO 69440
69440: DISABLE
// begin globalGameSaveCounter := 0 ;
69441: LD_ADDR_EXP 71
69445: PUSH
69446: LD_INT 0
69448: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
69449: LD_STRING setGameSaveCounter(0)
69451: PPUSH
69452: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
69456: LD_STRING initStreamRollete();
69458: PPUSH
69459: CALL_OW 559
// InitStreamMode ;
69463: CALL 70789 0 0
// DefineStreamItems ( false ) ;
69467: LD_INT 0
69469: PPUSH
69470: CALL 71253 0 1
// end ;
69474: END
// export function SOS_MapStart ( ) ; begin
69475: LD_INT 0
69477: PPUSH
// if streamModeActive then
69478: LD_EXP 72
69482: IFFALSE 69491
// DefineStreamItems ( true ) ;
69484: LD_INT 1
69486: PPUSH
69487: CALL 71253 0 1
// UpdateLuaVariables ( ) ;
69491: CALL 69508 0 0
// UpdateFactoryWaypoints ( ) ;
69495: CALL 84114 0 0
// UpdateWarehouseGatheringPoints ( ) ;
69499: CALL 84371 0 0
// end ;
69503: LD_VAR 0 1
69507: RET
// function UpdateLuaVariables ( ) ; begin
69508: LD_INT 0
69510: PPUSH
// if globalGameSaveCounter then
69511: LD_EXP 71
69515: IFFALSE 69549
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
69517: LD_ADDR_EXP 71
69521: PUSH
69522: LD_EXP 71
69526: PPUSH
69527: CALL 66824 0 1
69531: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
69532: LD_STRING setGameSaveCounter(
69534: PUSH
69535: LD_EXP 71
69539: STR
69540: PUSH
69541: LD_STRING )
69543: STR
69544: PPUSH
69545: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
69549: LD_STRING setGameDifficulty(
69551: PUSH
69552: LD_OWVAR 67
69556: STR
69557: PUSH
69558: LD_STRING )
69560: STR
69561: PPUSH
69562: CALL_OW 559
// end ;
69566: LD_VAR 0 1
69570: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69571: LD_INT 0
69573: PPUSH
// if p2 = stream_mode then
69574: LD_VAR 0 2
69578: PUSH
69579: LD_INT 100
69581: EQUAL
69582: IFFALSE 70585
// begin if not StreamModeActive then
69584: LD_EXP 72
69588: NOT
69589: IFFALSE 69599
// StreamModeActive := true ;
69591: LD_ADDR_EXP 72
69595: PUSH
69596: LD_INT 1
69598: ST_TO_ADDR
// if p3 = 0 then
69599: LD_VAR 0 3
69603: PUSH
69604: LD_INT 0
69606: EQUAL
69607: IFFALSE 69613
// InitStreamMode ;
69609: CALL 70789 0 0
// if p3 = 1 then
69613: LD_VAR 0 3
69617: PUSH
69618: LD_INT 1
69620: EQUAL
69621: IFFALSE 69631
// sRocket := true ;
69623: LD_ADDR_EXP 77
69627: PUSH
69628: LD_INT 1
69630: ST_TO_ADDR
// if p3 = 2 then
69631: LD_VAR 0 3
69635: PUSH
69636: LD_INT 2
69638: EQUAL
69639: IFFALSE 69649
// sSpeed := true ;
69641: LD_ADDR_EXP 76
69645: PUSH
69646: LD_INT 1
69648: ST_TO_ADDR
// if p3 = 3 then
69649: LD_VAR 0 3
69653: PUSH
69654: LD_INT 3
69656: EQUAL
69657: IFFALSE 69667
// sEngine := true ;
69659: LD_ADDR_EXP 78
69663: PUSH
69664: LD_INT 1
69666: ST_TO_ADDR
// if p3 = 4 then
69667: LD_VAR 0 3
69671: PUSH
69672: LD_INT 4
69674: EQUAL
69675: IFFALSE 69685
// sSpec := true ;
69677: LD_ADDR_EXP 75
69681: PUSH
69682: LD_INT 1
69684: ST_TO_ADDR
// if p3 = 5 then
69685: LD_VAR 0 3
69689: PUSH
69690: LD_INT 5
69692: EQUAL
69693: IFFALSE 69703
// sLevel := true ;
69695: LD_ADDR_EXP 79
69699: PUSH
69700: LD_INT 1
69702: ST_TO_ADDR
// if p3 = 6 then
69703: LD_VAR 0 3
69707: PUSH
69708: LD_INT 6
69710: EQUAL
69711: IFFALSE 69721
// sArmoury := true ;
69713: LD_ADDR_EXP 80
69717: PUSH
69718: LD_INT 1
69720: ST_TO_ADDR
// if p3 = 7 then
69721: LD_VAR 0 3
69725: PUSH
69726: LD_INT 7
69728: EQUAL
69729: IFFALSE 69739
// sRadar := true ;
69731: LD_ADDR_EXP 81
69735: PUSH
69736: LD_INT 1
69738: ST_TO_ADDR
// if p3 = 8 then
69739: LD_VAR 0 3
69743: PUSH
69744: LD_INT 8
69746: EQUAL
69747: IFFALSE 69757
// sBunker := true ;
69749: LD_ADDR_EXP 82
69753: PUSH
69754: LD_INT 1
69756: ST_TO_ADDR
// if p3 = 9 then
69757: LD_VAR 0 3
69761: PUSH
69762: LD_INT 9
69764: EQUAL
69765: IFFALSE 69775
// sHack := true ;
69767: LD_ADDR_EXP 83
69771: PUSH
69772: LD_INT 1
69774: ST_TO_ADDR
// if p3 = 10 then
69775: LD_VAR 0 3
69779: PUSH
69780: LD_INT 10
69782: EQUAL
69783: IFFALSE 69793
// sFire := true ;
69785: LD_ADDR_EXP 84
69789: PUSH
69790: LD_INT 1
69792: ST_TO_ADDR
// if p3 = 11 then
69793: LD_VAR 0 3
69797: PUSH
69798: LD_INT 11
69800: EQUAL
69801: IFFALSE 69811
// sRefresh := true ;
69803: LD_ADDR_EXP 85
69807: PUSH
69808: LD_INT 1
69810: ST_TO_ADDR
// if p3 = 12 then
69811: LD_VAR 0 3
69815: PUSH
69816: LD_INT 12
69818: EQUAL
69819: IFFALSE 69829
// sExp := true ;
69821: LD_ADDR_EXP 86
69825: PUSH
69826: LD_INT 1
69828: ST_TO_ADDR
// if p3 = 13 then
69829: LD_VAR 0 3
69833: PUSH
69834: LD_INT 13
69836: EQUAL
69837: IFFALSE 69847
// sDepot := true ;
69839: LD_ADDR_EXP 87
69843: PUSH
69844: LD_INT 1
69846: ST_TO_ADDR
// if p3 = 14 then
69847: LD_VAR 0 3
69851: PUSH
69852: LD_INT 14
69854: EQUAL
69855: IFFALSE 69865
// sFlag := true ;
69857: LD_ADDR_EXP 88
69861: PUSH
69862: LD_INT 1
69864: ST_TO_ADDR
// if p3 = 15 then
69865: LD_VAR 0 3
69869: PUSH
69870: LD_INT 15
69872: EQUAL
69873: IFFALSE 69883
// sKamikadze := true ;
69875: LD_ADDR_EXP 96
69879: PUSH
69880: LD_INT 1
69882: ST_TO_ADDR
// if p3 = 16 then
69883: LD_VAR 0 3
69887: PUSH
69888: LD_INT 16
69890: EQUAL
69891: IFFALSE 69901
// sTroll := true ;
69893: LD_ADDR_EXP 97
69897: PUSH
69898: LD_INT 1
69900: ST_TO_ADDR
// if p3 = 17 then
69901: LD_VAR 0 3
69905: PUSH
69906: LD_INT 17
69908: EQUAL
69909: IFFALSE 69919
// sSlow := true ;
69911: LD_ADDR_EXP 98
69915: PUSH
69916: LD_INT 1
69918: ST_TO_ADDR
// if p3 = 18 then
69919: LD_VAR 0 3
69923: PUSH
69924: LD_INT 18
69926: EQUAL
69927: IFFALSE 69937
// sLack := true ;
69929: LD_ADDR_EXP 99
69933: PUSH
69934: LD_INT 1
69936: ST_TO_ADDR
// if p3 = 19 then
69937: LD_VAR 0 3
69941: PUSH
69942: LD_INT 19
69944: EQUAL
69945: IFFALSE 69955
// sTank := true ;
69947: LD_ADDR_EXP 101
69951: PUSH
69952: LD_INT 1
69954: ST_TO_ADDR
// if p3 = 20 then
69955: LD_VAR 0 3
69959: PUSH
69960: LD_INT 20
69962: EQUAL
69963: IFFALSE 69973
// sRemote := true ;
69965: LD_ADDR_EXP 102
69969: PUSH
69970: LD_INT 1
69972: ST_TO_ADDR
// if p3 = 21 then
69973: LD_VAR 0 3
69977: PUSH
69978: LD_INT 21
69980: EQUAL
69981: IFFALSE 69991
// sPowell := true ;
69983: LD_ADDR_EXP 103
69987: PUSH
69988: LD_INT 1
69990: ST_TO_ADDR
// if p3 = 22 then
69991: LD_VAR 0 3
69995: PUSH
69996: LD_INT 22
69998: EQUAL
69999: IFFALSE 70009
// sTeleport := true ;
70001: LD_ADDR_EXP 106
70005: PUSH
70006: LD_INT 1
70008: ST_TO_ADDR
// if p3 = 23 then
70009: LD_VAR 0 3
70013: PUSH
70014: LD_INT 23
70016: EQUAL
70017: IFFALSE 70027
// sOilTower := true ;
70019: LD_ADDR_EXP 108
70023: PUSH
70024: LD_INT 1
70026: ST_TO_ADDR
// if p3 = 24 then
70027: LD_VAR 0 3
70031: PUSH
70032: LD_INT 24
70034: EQUAL
70035: IFFALSE 70045
// sShovel := true ;
70037: LD_ADDR_EXP 109
70041: PUSH
70042: LD_INT 1
70044: ST_TO_ADDR
// if p3 = 25 then
70045: LD_VAR 0 3
70049: PUSH
70050: LD_INT 25
70052: EQUAL
70053: IFFALSE 70063
// sSheik := true ;
70055: LD_ADDR_EXP 110
70059: PUSH
70060: LD_INT 1
70062: ST_TO_ADDR
// if p3 = 26 then
70063: LD_VAR 0 3
70067: PUSH
70068: LD_INT 26
70070: EQUAL
70071: IFFALSE 70081
// sEarthquake := true ;
70073: LD_ADDR_EXP 112
70077: PUSH
70078: LD_INT 1
70080: ST_TO_ADDR
// if p3 = 27 then
70081: LD_VAR 0 3
70085: PUSH
70086: LD_INT 27
70088: EQUAL
70089: IFFALSE 70099
// sAI := true ;
70091: LD_ADDR_EXP 113
70095: PUSH
70096: LD_INT 1
70098: ST_TO_ADDR
// if p3 = 28 then
70099: LD_VAR 0 3
70103: PUSH
70104: LD_INT 28
70106: EQUAL
70107: IFFALSE 70117
// sCargo := true ;
70109: LD_ADDR_EXP 116
70113: PUSH
70114: LD_INT 1
70116: ST_TO_ADDR
// if p3 = 29 then
70117: LD_VAR 0 3
70121: PUSH
70122: LD_INT 29
70124: EQUAL
70125: IFFALSE 70135
// sDLaser := true ;
70127: LD_ADDR_EXP 117
70131: PUSH
70132: LD_INT 1
70134: ST_TO_ADDR
// if p3 = 30 then
70135: LD_VAR 0 3
70139: PUSH
70140: LD_INT 30
70142: EQUAL
70143: IFFALSE 70153
// sExchange := true ;
70145: LD_ADDR_EXP 118
70149: PUSH
70150: LD_INT 1
70152: ST_TO_ADDR
// if p3 = 31 then
70153: LD_VAR 0 3
70157: PUSH
70158: LD_INT 31
70160: EQUAL
70161: IFFALSE 70171
// sFac := true ;
70163: LD_ADDR_EXP 119
70167: PUSH
70168: LD_INT 1
70170: ST_TO_ADDR
// if p3 = 32 then
70171: LD_VAR 0 3
70175: PUSH
70176: LD_INT 32
70178: EQUAL
70179: IFFALSE 70189
// sPower := true ;
70181: LD_ADDR_EXP 120
70185: PUSH
70186: LD_INT 1
70188: ST_TO_ADDR
// if p3 = 33 then
70189: LD_VAR 0 3
70193: PUSH
70194: LD_INT 33
70196: EQUAL
70197: IFFALSE 70207
// sRandom := true ;
70199: LD_ADDR_EXP 121
70203: PUSH
70204: LD_INT 1
70206: ST_TO_ADDR
// if p3 = 34 then
70207: LD_VAR 0 3
70211: PUSH
70212: LD_INT 34
70214: EQUAL
70215: IFFALSE 70225
// sShield := true ;
70217: LD_ADDR_EXP 122
70221: PUSH
70222: LD_INT 1
70224: ST_TO_ADDR
// if p3 = 35 then
70225: LD_VAR 0 3
70229: PUSH
70230: LD_INT 35
70232: EQUAL
70233: IFFALSE 70243
// sTime := true ;
70235: LD_ADDR_EXP 123
70239: PUSH
70240: LD_INT 1
70242: ST_TO_ADDR
// if p3 = 36 then
70243: LD_VAR 0 3
70247: PUSH
70248: LD_INT 36
70250: EQUAL
70251: IFFALSE 70261
// sTools := true ;
70253: LD_ADDR_EXP 124
70257: PUSH
70258: LD_INT 1
70260: ST_TO_ADDR
// if p3 = 101 then
70261: LD_VAR 0 3
70265: PUSH
70266: LD_INT 101
70268: EQUAL
70269: IFFALSE 70279
// sSold := true ;
70271: LD_ADDR_EXP 89
70275: PUSH
70276: LD_INT 1
70278: ST_TO_ADDR
// if p3 = 102 then
70279: LD_VAR 0 3
70283: PUSH
70284: LD_INT 102
70286: EQUAL
70287: IFFALSE 70297
// sDiff := true ;
70289: LD_ADDR_EXP 90
70293: PUSH
70294: LD_INT 1
70296: ST_TO_ADDR
// if p3 = 103 then
70297: LD_VAR 0 3
70301: PUSH
70302: LD_INT 103
70304: EQUAL
70305: IFFALSE 70315
// sFog := true ;
70307: LD_ADDR_EXP 93
70311: PUSH
70312: LD_INT 1
70314: ST_TO_ADDR
// if p3 = 104 then
70315: LD_VAR 0 3
70319: PUSH
70320: LD_INT 104
70322: EQUAL
70323: IFFALSE 70333
// sReset := true ;
70325: LD_ADDR_EXP 94
70329: PUSH
70330: LD_INT 1
70332: ST_TO_ADDR
// if p3 = 105 then
70333: LD_VAR 0 3
70337: PUSH
70338: LD_INT 105
70340: EQUAL
70341: IFFALSE 70351
// sSun := true ;
70343: LD_ADDR_EXP 95
70347: PUSH
70348: LD_INT 1
70350: ST_TO_ADDR
// if p3 = 106 then
70351: LD_VAR 0 3
70355: PUSH
70356: LD_INT 106
70358: EQUAL
70359: IFFALSE 70369
// sTiger := true ;
70361: LD_ADDR_EXP 91
70365: PUSH
70366: LD_INT 1
70368: ST_TO_ADDR
// if p3 = 107 then
70369: LD_VAR 0 3
70373: PUSH
70374: LD_INT 107
70376: EQUAL
70377: IFFALSE 70387
// sBomb := true ;
70379: LD_ADDR_EXP 92
70383: PUSH
70384: LD_INT 1
70386: ST_TO_ADDR
// if p3 = 108 then
70387: LD_VAR 0 3
70391: PUSH
70392: LD_INT 108
70394: EQUAL
70395: IFFALSE 70405
// sWound := true ;
70397: LD_ADDR_EXP 100
70401: PUSH
70402: LD_INT 1
70404: ST_TO_ADDR
// if p3 = 109 then
70405: LD_VAR 0 3
70409: PUSH
70410: LD_INT 109
70412: EQUAL
70413: IFFALSE 70423
// sBetray := true ;
70415: LD_ADDR_EXP 104
70419: PUSH
70420: LD_INT 1
70422: ST_TO_ADDR
// if p3 = 110 then
70423: LD_VAR 0 3
70427: PUSH
70428: LD_INT 110
70430: EQUAL
70431: IFFALSE 70441
// sContamin := true ;
70433: LD_ADDR_EXP 105
70437: PUSH
70438: LD_INT 1
70440: ST_TO_ADDR
// if p3 = 111 then
70441: LD_VAR 0 3
70445: PUSH
70446: LD_INT 111
70448: EQUAL
70449: IFFALSE 70459
// sOil := true ;
70451: LD_ADDR_EXP 107
70455: PUSH
70456: LD_INT 1
70458: ST_TO_ADDR
// if p3 = 112 then
70459: LD_VAR 0 3
70463: PUSH
70464: LD_INT 112
70466: EQUAL
70467: IFFALSE 70477
// sStu := true ;
70469: LD_ADDR_EXP 111
70473: PUSH
70474: LD_INT 1
70476: ST_TO_ADDR
// if p3 = 113 then
70477: LD_VAR 0 3
70481: PUSH
70482: LD_INT 113
70484: EQUAL
70485: IFFALSE 70495
// sBazooka := true ;
70487: LD_ADDR_EXP 114
70491: PUSH
70492: LD_INT 1
70494: ST_TO_ADDR
// if p3 = 114 then
70495: LD_VAR 0 3
70499: PUSH
70500: LD_INT 114
70502: EQUAL
70503: IFFALSE 70513
// sMortar := true ;
70505: LD_ADDR_EXP 115
70509: PUSH
70510: LD_INT 1
70512: ST_TO_ADDR
// if p3 = 115 then
70513: LD_VAR 0 3
70517: PUSH
70518: LD_INT 115
70520: EQUAL
70521: IFFALSE 70531
// sRanger := true ;
70523: LD_ADDR_EXP 125
70527: PUSH
70528: LD_INT 1
70530: ST_TO_ADDR
// if p3 = 116 then
70531: LD_VAR 0 3
70535: PUSH
70536: LD_INT 116
70538: EQUAL
70539: IFFALSE 70549
// sComputer := true ;
70541: LD_ADDR_EXP 126
70545: PUSH
70546: LD_INT 1
70548: ST_TO_ADDR
// if p3 = 117 then
70549: LD_VAR 0 3
70553: PUSH
70554: LD_INT 117
70556: EQUAL
70557: IFFALSE 70567
// s30 := true ;
70559: LD_ADDR_EXP 127
70563: PUSH
70564: LD_INT 1
70566: ST_TO_ADDR
// if p3 = 118 then
70567: LD_VAR 0 3
70571: PUSH
70572: LD_INT 118
70574: EQUAL
70575: IFFALSE 70585
// s60 := true ;
70577: LD_ADDR_EXP 128
70581: PUSH
70582: LD_INT 1
70584: ST_TO_ADDR
// end ; if p2 = hack_mode then
70585: LD_VAR 0 2
70589: PUSH
70590: LD_INT 101
70592: EQUAL
70593: IFFALSE 70721
// begin case p3 of 1 :
70595: LD_VAR 0 3
70599: PUSH
70600: LD_INT 1
70602: DOUBLE
70603: EQUAL
70604: IFTRUE 70608
70606: GO 70615
70608: POP
// hHackUnlimitedResources ; 2 :
70609: CALL 82860 0 0
70613: GO 70721
70615: LD_INT 2
70617: DOUBLE
70618: EQUAL
70619: IFTRUE 70623
70621: GO 70630
70623: POP
// hHackSetLevel10 ; 3 :
70624: CALL 82993 0 0
70628: GO 70721
70630: LD_INT 3
70632: DOUBLE
70633: EQUAL
70634: IFTRUE 70638
70636: GO 70645
70638: POP
// hHackSetLevel10YourUnits ; 4 :
70639: CALL 83078 0 0
70643: GO 70721
70645: LD_INT 4
70647: DOUBLE
70648: EQUAL
70649: IFTRUE 70653
70651: GO 70660
70653: POP
// hHackInvincible ; 5 :
70654: CALL 83526 0 0
70658: GO 70721
70660: LD_INT 5
70662: DOUBLE
70663: EQUAL
70664: IFTRUE 70668
70666: GO 70675
70668: POP
// hHackInvisible ; 6 :
70669: CALL 83637 0 0
70673: GO 70721
70675: LD_INT 6
70677: DOUBLE
70678: EQUAL
70679: IFTRUE 70683
70681: GO 70690
70683: POP
// hHackChangeYourSide ; 7 :
70684: CALL 83694 0 0
70688: GO 70721
70690: LD_INT 7
70692: DOUBLE
70693: EQUAL
70694: IFTRUE 70698
70696: GO 70705
70698: POP
// hHackChangeUnitSide ; 8 :
70699: CALL 83736 0 0
70703: GO 70721
70705: LD_INT 8
70707: DOUBLE
70708: EQUAL
70709: IFTRUE 70713
70711: GO 70720
70713: POP
// hHackFog ; end ;
70714: CALL 83837 0 0
70718: GO 70721
70720: POP
// end ; if p2 = game_save_mode then
70721: LD_VAR 0 2
70725: PUSH
70726: LD_INT 102
70728: EQUAL
70729: IFFALSE 70784
// begin if p3 = 1 then
70731: LD_VAR 0 3
70735: PUSH
70736: LD_INT 1
70738: EQUAL
70739: IFFALSE 70751
// globalGameSaveCounter := p4 ;
70741: LD_ADDR_EXP 71
70745: PUSH
70746: LD_VAR 0 4
70750: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
70751: LD_VAR 0 3
70755: PUSH
70756: LD_INT 2
70758: EQUAL
70759: PUSH
70760: LD_EXP 71
70764: AND
70765: IFFALSE 70784
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
70767: LD_STRING setGameSaveCounter(
70769: PUSH
70770: LD_EXP 71
70774: STR
70775: PUSH
70776: LD_STRING )
70778: STR
70779: PPUSH
70780: CALL_OW 559
// end ; end ;
70784: LD_VAR 0 7
70788: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
70789: LD_INT 0
70791: PPUSH
// streamModeActive := false ;
70792: LD_ADDR_EXP 72
70796: PUSH
70797: LD_INT 0
70799: ST_TO_ADDR
// normalCounter := 36 ;
70800: LD_ADDR_EXP 73
70804: PUSH
70805: LD_INT 36
70807: ST_TO_ADDR
// hardcoreCounter := 18 ;
70808: LD_ADDR_EXP 74
70812: PUSH
70813: LD_INT 18
70815: ST_TO_ADDR
// sRocket := false ;
70816: LD_ADDR_EXP 77
70820: PUSH
70821: LD_INT 0
70823: ST_TO_ADDR
// sSpeed := false ;
70824: LD_ADDR_EXP 76
70828: PUSH
70829: LD_INT 0
70831: ST_TO_ADDR
// sEngine := false ;
70832: LD_ADDR_EXP 78
70836: PUSH
70837: LD_INT 0
70839: ST_TO_ADDR
// sSpec := false ;
70840: LD_ADDR_EXP 75
70844: PUSH
70845: LD_INT 0
70847: ST_TO_ADDR
// sLevel := false ;
70848: LD_ADDR_EXP 79
70852: PUSH
70853: LD_INT 0
70855: ST_TO_ADDR
// sArmoury := false ;
70856: LD_ADDR_EXP 80
70860: PUSH
70861: LD_INT 0
70863: ST_TO_ADDR
// sRadar := false ;
70864: LD_ADDR_EXP 81
70868: PUSH
70869: LD_INT 0
70871: ST_TO_ADDR
// sBunker := false ;
70872: LD_ADDR_EXP 82
70876: PUSH
70877: LD_INT 0
70879: ST_TO_ADDR
// sHack := false ;
70880: LD_ADDR_EXP 83
70884: PUSH
70885: LD_INT 0
70887: ST_TO_ADDR
// sFire := false ;
70888: LD_ADDR_EXP 84
70892: PUSH
70893: LD_INT 0
70895: ST_TO_ADDR
// sRefresh := false ;
70896: LD_ADDR_EXP 85
70900: PUSH
70901: LD_INT 0
70903: ST_TO_ADDR
// sExp := false ;
70904: LD_ADDR_EXP 86
70908: PUSH
70909: LD_INT 0
70911: ST_TO_ADDR
// sDepot := false ;
70912: LD_ADDR_EXP 87
70916: PUSH
70917: LD_INT 0
70919: ST_TO_ADDR
// sFlag := false ;
70920: LD_ADDR_EXP 88
70924: PUSH
70925: LD_INT 0
70927: ST_TO_ADDR
// sKamikadze := false ;
70928: LD_ADDR_EXP 96
70932: PUSH
70933: LD_INT 0
70935: ST_TO_ADDR
// sTroll := false ;
70936: LD_ADDR_EXP 97
70940: PUSH
70941: LD_INT 0
70943: ST_TO_ADDR
// sSlow := false ;
70944: LD_ADDR_EXP 98
70948: PUSH
70949: LD_INT 0
70951: ST_TO_ADDR
// sLack := false ;
70952: LD_ADDR_EXP 99
70956: PUSH
70957: LD_INT 0
70959: ST_TO_ADDR
// sTank := false ;
70960: LD_ADDR_EXP 101
70964: PUSH
70965: LD_INT 0
70967: ST_TO_ADDR
// sRemote := false ;
70968: LD_ADDR_EXP 102
70972: PUSH
70973: LD_INT 0
70975: ST_TO_ADDR
// sPowell := false ;
70976: LD_ADDR_EXP 103
70980: PUSH
70981: LD_INT 0
70983: ST_TO_ADDR
// sTeleport := false ;
70984: LD_ADDR_EXP 106
70988: PUSH
70989: LD_INT 0
70991: ST_TO_ADDR
// sOilTower := false ;
70992: LD_ADDR_EXP 108
70996: PUSH
70997: LD_INT 0
70999: ST_TO_ADDR
// sShovel := false ;
71000: LD_ADDR_EXP 109
71004: PUSH
71005: LD_INT 0
71007: ST_TO_ADDR
// sSheik := false ;
71008: LD_ADDR_EXP 110
71012: PUSH
71013: LD_INT 0
71015: ST_TO_ADDR
// sEarthquake := false ;
71016: LD_ADDR_EXP 112
71020: PUSH
71021: LD_INT 0
71023: ST_TO_ADDR
// sAI := false ;
71024: LD_ADDR_EXP 113
71028: PUSH
71029: LD_INT 0
71031: ST_TO_ADDR
// sCargo := false ;
71032: LD_ADDR_EXP 116
71036: PUSH
71037: LD_INT 0
71039: ST_TO_ADDR
// sDLaser := false ;
71040: LD_ADDR_EXP 117
71044: PUSH
71045: LD_INT 0
71047: ST_TO_ADDR
// sExchange := false ;
71048: LD_ADDR_EXP 118
71052: PUSH
71053: LD_INT 0
71055: ST_TO_ADDR
// sFac := false ;
71056: LD_ADDR_EXP 119
71060: PUSH
71061: LD_INT 0
71063: ST_TO_ADDR
// sPower := false ;
71064: LD_ADDR_EXP 120
71068: PUSH
71069: LD_INT 0
71071: ST_TO_ADDR
// sRandom := false ;
71072: LD_ADDR_EXP 121
71076: PUSH
71077: LD_INT 0
71079: ST_TO_ADDR
// sShield := false ;
71080: LD_ADDR_EXP 122
71084: PUSH
71085: LD_INT 0
71087: ST_TO_ADDR
// sTime := false ;
71088: LD_ADDR_EXP 123
71092: PUSH
71093: LD_INT 0
71095: ST_TO_ADDR
// sTools := false ;
71096: LD_ADDR_EXP 124
71100: PUSH
71101: LD_INT 0
71103: ST_TO_ADDR
// sSold := false ;
71104: LD_ADDR_EXP 89
71108: PUSH
71109: LD_INT 0
71111: ST_TO_ADDR
// sDiff := false ;
71112: LD_ADDR_EXP 90
71116: PUSH
71117: LD_INT 0
71119: ST_TO_ADDR
// sFog := false ;
71120: LD_ADDR_EXP 93
71124: PUSH
71125: LD_INT 0
71127: ST_TO_ADDR
// sReset := false ;
71128: LD_ADDR_EXP 94
71132: PUSH
71133: LD_INT 0
71135: ST_TO_ADDR
// sSun := false ;
71136: LD_ADDR_EXP 95
71140: PUSH
71141: LD_INT 0
71143: ST_TO_ADDR
// sTiger := false ;
71144: LD_ADDR_EXP 91
71148: PUSH
71149: LD_INT 0
71151: ST_TO_ADDR
// sBomb := false ;
71152: LD_ADDR_EXP 92
71156: PUSH
71157: LD_INT 0
71159: ST_TO_ADDR
// sWound := false ;
71160: LD_ADDR_EXP 100
71164: PUSH
71165: LD_INT 0
71167: ST_TO_ADDR
// sBetray := false ;
71168: LD_ADDR_EXP 104
71172: PUSH
71173: LD_INT 0
71175: ST_TO_ADDR
// sContamin := false ;
71176: LD_ADDR_EXP 105
71180: PUSH
71181: LD_INT 0
71183: ST_TO_ADDR
// sOil := false ;
71184: LD_ADDR_EXP 107
71188: PUSH
71189: LD_INT 0
71191: ST_TO_ADDR
// sStu := false ;
71192: LD_ADDR_EXP 111
71196: PUSH
71197: LD_INT 0
71199: ST_TO_ADDR
// sBazooka := false ;
71200: LD_ADDR_EXP 114
71204: PUSH
71205: LD_INT 0
71207: ST_TO_ADDR
// sMortar := false ;
71208: LD_ADDR_EXP 115
71212: PUSH
71213: LD_INT 0
71215: ST_TO_ADDR
// sRanger := false ;
71216: LD_ADDR_EXP 125
71220: PUSH
71221: LD_INT 0
71223: ST_TO_ADDR
// sComputer := false ;
71224: LD_ADDR_EXP 126
71228: PUSH
71229: LD_INT 0
71231: ST_TO_ADDR
// s30 := false ;
71232: LD_ADDR_EXP 127
71236: PUSH
71237: LD_INT 0
71239: ST_TO_ADDR
// s60 := false ;
71240: LD_ADDR_EXP 128
71244: PUSH
71245: LD_INT 0
71247: ST_TO_ADDR
// end ;
71248: LD_VAR 0 1
71252: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
71253: LD_INT 0
71255: PPUSH
71256: PPUSH
71257: PPUSH
71258: PPUSH
71259: PPUSH
71260: PPUSH
71261: PPUSH
// result := [ ] ;
71262: LD_ADDR_VAR 0 2
71266: PUSH
71267: EMPTY
71268: ST_TO_ADDR
// if campaign_id = 1 then
71269: LD_OWVAR 69
71273: PUSH
71274: LD_INT 1
71276: EQUAL
71277: IFFALSE 74443
// begin case mission_number of 1 :
71279: LD_OWVAR 70
71283: PUSH
71284: LD_INT 1
71286: DOUBLE
71287: EQUAL
71288: IFTRUE 71292
71290: GO 71368
71292: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
71293: LD_ADDR_VAR 0 2
71297: PUSH
71298: LD_INT 2
71300: PUSH
71301: LD_INT 4
71303: PUSH
71304: LD_INT 11
71306: PUSH
71307: LD_INT 12
71309: PUSH
71310: LD_INT 15
71312: PUSH
71313: LD_INT 16
71315: PUSH
71316: LD_INT 22
71318: PUSH
71319: LD_INT 23
71321: PUSH
71322: LD_INT 26
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 101
71338: PUSH
71339: LD_INT 102
71341: PUSH
71342: LD_INT 106
71344: PUSH
71345: LD_INT 116
71347: PUSH
71348: LD_INT 117
71350: PUSH
71351: LD_INT 118
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: ST_TO_ADDR
71366: GO 74441
71368: LD_INT 2
71370: DOUBLE
71371: EQUAL
71372: IFTRUE 71376
71374: GO 71460
71376: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
71377: LD_ADDR_VAR 0 2
71381: PUSH
71382: LD_INT 2
71384: PUSH
71385: LD_INT 4
71387: PUSH
71388: LD_INT 11
71390: PUSH
71391: LD_INT 12
71393: PUSH
71394: LD_INT 15
71396: PUSH
71397: LD_INT 16
71399: PUSH
71400: LD_INT 22
71402: PUSH
71403: LD_INT 23
71405: PUSH
71406: LD_INT 26
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 101
71422: PUSH
71423: LD_INT 102
71425: PUSH
71426: LD_INT 105
71428: PUSH
71429: LD_INT 106
71431: PUSH
71432: LD_INT 108
71434: PUSH
71435: LD_INT 116
71437: PUSH
71438: LD_INT 117
71440: PUSH
71441: LD_INT 118
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: ST_TO_ADDR
71458: GO 74441
71460: LD_INT 3
71462: DOUBLE
71463: EQUAL
71464: IFTRUE 71468
71466: GO 71556
71468: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
71469: LD_ADDR_VAR 0 2
71473: PUSH
71474: LD_INT 2
71476: PUSH
71477: LD_INT 4
71479: PUSH
71480: LD_INT 5
71482: PUSH
71483: LD_INT 11
71485: PUSH
71486: LD_INT 12
71488: PUSH
71489: LD_INT 15
71491: PUSH
71492: LD_INT 16
71494: PUSH
71495: LD_INT 22
71497: PUSH
71498: LD_INT 26
71500: PUSH
71501: LD_INT 36
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 101
71518: PUSH
71519: LD_INT 102
71521: PUSH
71522: LD_INT 105
71524: PUSH
71525: LD_INT 106
71527: PUSH
71528: LD_INT 108
71530: PUSH
71531: LD_INT 116
71533: PUSH
71534: LD_INT 117
71536: PUSH
71537: LD_INT 118
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: ST_TO_ADDR
71554: GO 74441
71556: LD_INT 4
71558: DOUBLE
71559: EQUAL
71560: IFTRUE 71564
71562: GO 71660
71564: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
71565: LD_ADDR_VAR 0 2
71569: PUSH
71570: LD_INT 2
71572: PUSH
71573: LD_INT 4
71575: PUSH
71576: LD_INT 5
71578: PUSH
71579: LD_INT 8
71581: PUSH
71582: LD_INT 11
71584: PUSH
71585: LD_INT 12
71587: PUSH
71588: LD_INT 15
71590: PUSH
71591: LD_INT 16
71593: PUSH
71594: LD_INT 22
71596: PUSH
71597: LD_INT 23
71599: PUSH
71600: LD_INT 26
71602: PUSH
71603: LD_INT 36
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 101
71622: PUSH
71623: LD_INT 102
71625: PUSH
71626: LD_INT 105
71628: PUSH
71629: LD_INT 106
71631: PUSH
71632: LD_INT 108
71634: PUSH
71635: LD_INT 116
71637: PUSH
71638: LD_INT 117
71640: PUSH
71641: LD_INT 118
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: ST_TO_ADDR
71658: GO 74441
71660: LD_INT 5
71662: DOUBLE
71663: EQUAL
71664: IFTRUE 71668
71666: GO 71780
71668: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
71669: LD_ADDR_VAR 0 2
71673: PUSH
71674: LD_INT 2
71676: PUSH
71677: LD_INT 4
71679: PUSH
71680: LD_INT 5
71682: PUSH
71683: LD_INT 6
71685: PUSH
71686: LD_INT 8
71688: PUSH
71689: LD_INT 11
71691: PUSH
71692: LD_INT 12
71694: PUSH
71695: LD_INT 15
71697: PUSH
71698: LD_INT 16
71700: PUSH
71701: LD_INT 22
71703: PUSH
71704: LD_INT 23
71706: PUSH
71707: LD_INT 25
71709: PUSH
71710: LD_INT 26
71712: PUSH
71713: LD_INT 36
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 101
71734: PUSH
71735: LD_INT 102
71737: PUSH
71738: LD_INT 105
71740: PUSH
71741: LD_INT 106
71743: PUSH
71744: LD_INT 108
71746: PUSH
71747: LD_INT 109
71749: PUSH
71750: LD_INT 112
71752: PUSH
71753: LD_INT 116
71755: PUSH
71756: LD_INT 117
71758: PUSH
71759: LD_INT 118
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: ST_TO_ADDR
71778: GO 74441
71780: LD_INT 6
71782: DOUBLE
71783: EQUAL
71784: IFTRUE 71788
71786: GO 71920
71788: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
71789: LD_ADDR_VAR 0 2
71793: PUSH
71794: LD_INT 2
71796: PUSH
71797: LD_INT 4
71799: PUSH
71800: LD_INT 5
71802: PUSH
71803: LD_INT 6
71805: PUSH
71806: LD_INT 8
71808: PUSH
71809: LD_INT 11
71811: PUSH
71812: LD_INT 12
71814: PUSH
71815: LD_INT 15
71817: PUSH
71818: LD_INT 16
71820: PUSH
71821: LD_INT 20
71823: PUSH
71824: LD_INT 21
71826: PUSH
71827: LD_INT 22
71829: PUSH
71830: LD_INT 23
71832: PUSH
71833: LD_INT 25
71835: PUSH
71836: LD_INT 26
71838: PUSH
71839: LD_INT 30
71841: PUSH
71842: LD_INT 31
71844: PUSH
71845: LD_INT 32
71847: PUSH
71848: LD_INT 36
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 101
71874: PUSH
71875: LD_INT 102
71877: PUSH
71878: LD_INT 105
71880: PUSH
71881: LD_INT 106
71883: PUSH
71884: LD_INT 108
71886: PUSH
71887: LD_INT 109
71889: PUSH
71890: LD_INT 112
71892: PUSH
71893: LD_INT 116
71895: PUSH
71896: LD_INT 117
71898: PUSH
71899: LD_INT 118
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: ST_TO_ADDR
71918: GO 74441
71920: LD_INT 7
71922: DOUBLE
71923: EQUAL
71924: IFTRUE 71928
71926: GO 72040
71928: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
71929: LD_ADDR_VAR 0 2
71933: PUSH
71934: LD_INT 2
71936: PUSH
71937: LD_INT 4
71939: PUSH
71940: LD_INT 5
71942: PUSH
71943: LD_INT 7
71945: PUSH
71946: LD_INT 11
71948: PUSH
71949: LD_INT 12
71951: PUSH
71952: LD_INT 15
71954: PUSH
71955: LD_INT 16
71957: PUSH
71958: LD_INT 20
71960: PUSH
71961: LD_INT 21
71963: PUSH
71964: LD_INT 22
71966: PUSH
71967: LD_INT 23
71969: PUSH
71970: LD_INT 25
71972: PUSH
71973: LD_INT 26
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 101
71994: PUSH
71995: LD_INT 102
71997: PUSH
71998: LD_INT 103
72000: PUSH
72001: LD_INT 105
72003: PUSH
72004: LD_INT 106
72006: PUSH
72007: LD_INT 108
72009: PUSH
72010: LD_INT 112
72012: PUSH
72013: LD_INT 116
72015: PUSH
72016: LD_INT 117
72018: PUSH
72019: LD_INT 118
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: ST_TO_ADDR
72038: GO 74441
72040: LD_INT 8
72042: DOUBLE
72043: EQUAL
72044: IFTRUE 72048
72046: GO 72188
72048: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
72049: LD_ADDR_VAR 0 2
72053: PUSH
72054: LD_INT 2
72056: PUSH
72057: LD_INT 4
72059: PUSH
72060: LD_INT 5
72062: PUSH
72063: LD_INT 6
72065: PUSH
72066: LD_INT 7
72068: PUSH
72069: LD_INT 8
72071: PUSH
72072: LD_INT 11
72074: PUSH
72075: LD_INT 12
72077: PUSH
72078: LD_INT 15
72080: PUSH
72081: LD_INT 16
72083: PUSH
72084: LD_INT 20
72086: PUSH
72087: LD_INT 21
72089: PUSH
72090: LD_INT 22
72092: PUSH
72093: LD_INT 23
72095: PUSH
72096: LD_INT 25
72098: PUSH
72099: LD_INT 26
72101: PUSH
72102: LD_INT 30
72104: PUSH
72105: LD_INT 31
72107: PUSH
72108: LD_INT 32
72110: PUSH
72111: LD_INT 36
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: PUSH
72136: LD_INT 101
72138: PUSH
72139: LD_INT 102
72141: PUSH
72142: LD_INT 103
72144: PUSH
72145: LD_INT 105
72147: PUSH
72148: LD_INT 106
72150: PUSH
72151: LD_INT 108
72153: PUSH
72154: LD_INT 109
72156: PUSH
72157: LD_INT 112
72159: PUSH
72160: LD_INT 116
72162: PUSH
72163: LD_INT 117
72165: PUSH
72166: LD_INT 118
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: ST_TO_ADDR
72186: GO 74441
72188: LD_INT 9
72190: DOUBLE
72191: EQUAL
72192: IFTRUE 72196
72194: GO 72344
72196: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
72197: LD_ADDR_VAR 0 2
72201: PUSH
72202: LD_INT 2
72204: PUSH
72205: LD_INT 4
72207: PUSH
72208: LD_INT 5
72210: PUSH
72211: LD_INT 6
72213: PUSH
72214: LD_INT 7
72216: PUSH
72217: LD_INT 8
72219: PUSH
72220: LD_INT 11
72222: PUSH
72223: LD_INT 12
72225: PUSH
72226: LD_INT 15
72228: PUSH
72229: LD_INT 16
72231: PUSH
72232: LD_INT 20
72234: PUSH
72235: LD_INT 21
72237: PUSH
72238: LD_INT 22
72240: PUSH
72241: LD_INT 23
72243: PUSH
72244: LD_INT 25
72246: PUSH
72247: LD_INT 26
72249: PUSH
72250: LD_INT 28
72252: PUSH
72253: LD_INT 30
72255: PUSH
72256: LD_INT 31
72258: PUSH
72259: LD_INT 32
72261: PUSH
72262: LD_INT 36
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 101
72290: PUSH
72291: LD_INT 102
72293: PUSH
72294: LD_INT 103
72296: PUSH
72297: LD_INT 105
72299: PUSH
72300: LD_INT 106
72302: PUSH
72303: LD_INT 108
72305: PUSH
72306: LD_INT 109
72308: PUSH
72309: LD_INT 112
72311: PUSH
72312: LD_INT 114
72314: PUSH
72315: LD_INT 116
72317: PUSH
72318: LD_INT 117
72320: PUSH
72321: LD_INT 118
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: ST_TO_ADDR
72342: GO 74441
72344: LD_INT 10
72346: DOUBLE
72347: EQUAL
72348: IFTRUE 72352
72350: GO 72548
72352: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
72353: LD_ADDR_VAR 0 2
72357: PUSH
72358: LD_INT 2
72360: PUSH
72361: LD_INT 4
72363: PUSH
72364: LD_INT 5
72366: PUSH
72367: LD_INT 6
72369: PUSH
72370: LD_INT 7
72372: PUSH
72373: LD_INT 8
72375: PUSH
72376: LD_INT 9
72378: PUSH
72379: LD_INT 10
72381: PUSH
72382: LD_INT 11
72384: PUSH
72385: LD_INT 12
72387: PUSH
72388: LD_INT 13
72390: PUSH
72391: LD_INT 14
72393: PUSH
72394: LD_INT 15
72396: PUSH
72397: LD_INT 16
72399: PUSH
72400: LD_INT 17
72402: PUSH
72403: LD_INT 18
72405: PUSH
72406: LD_INT 19
72408: PUSH
72409: LD_INT 20
72411: PUSH
72412: LD_INT 21
72414: PUSH
72415: LD_INT 22
72417: PUSH
72418: LD_INT 23
72420: PUSH
72421: LD_INT 24
72423: PUSH
72424: LD_INT 25
72426: PUSH
72427: LD_INT 26
72429: PUSH
72430: LD_INT 28
72432: PUSH
72433: LD_INT 30
72435: PUSH
72436: LD_INT 31
72438: PUSH
72439: LD_INT 32
72441: PUSH
72442: LD_INT 36
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 101
72478: PUSH
72479: LD_INT 102
72481: PUSH
72482: LD_INT 103
72484: PUSH
72485: LD_INT 104
72487: PUSH
72488: LD_INT 105
72490: PUSH
72491: LD_INT 106
72493: PUSH
72494: LD_INT 107
72496: PUSH
72497: LD_INT 108
72499: PUSH
72500: LD_INT 109
72502: PUSH
72503: LD_INT 110
72505: PUSH
72506: LD_INT 111
72508: PUSH
72509: LD_INT 112
72511: PUSH
72512: LD_INT 114
72514: PUSH
72515: LD_INT 116
72517: PUSH
72518: LD_INT 117
72520: PUSH
72521: LD_INT 118
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: ST_TO_ADDR
72546: GO 74441
72548: LD_INT 11
72550: DOUBLE
72551: EQUAL
72552: IFTRUE 72556
72554: GO 72760
72556: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
72557: LD_ADDR_VAR 0 2
72561: PUSH
72562: LD_INT 2
72564: PUSH
72565: LD_INT 3
72567: PUSH
72568: LD_INT 4
72570: PUSH
72571: LD_INT 5
72573: PUSH
72574: LD_INT 6
72576: PUSH
72577: LD_INT 7
72579: PUSH
72580: LD_INT 8
72582: PUSH
72583: LD_INT 9
72585: PUSH
72586: LD_INT 10
72588: PUSH
72589: LD_INT 11
72591: PUSH
72592: LD_INT 12
72594: PUSH
72595: LD_INT 13
72597: PUSH
72598: LD_INT 14
72600: PUSH
72601: LD_INT 15
72603: PUSH
72604: LD_INT 16
72606: PUSH
72607: LD_INT 17
72609: PUSH
72610: LD_INT 18
72612: PUSH
72613: LD_INT 19
72615: PUSH
72616: LD_INT 20
72618: PUSH
72619: LD_INT 21
72621: PUSH
72622: LD_INT 22
72624: PUSH
72625: LD_INT 23
72627: PUSH
72628: LD_INT 24
72630: PUSH
72631: LD_INT 25
72633: PUSH
72634: LD_INT 26
72636: PUSH
72637: LD_INT 28
72639: PUSH
72640: LD_INT 30
72642: PUSH
72643: LD_INT 31
72645: PUSH
72646: LD_INT 32
72648: PUSH
72649: LD_INT 34
72651: PUSH
72652: LD_INT 36
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 101
72690: PUSH
72691: LD_INT 102
72693: PUSH
72694: LD_INT 103
72696: PUSH
72697: LD_INT 104
72699: PUSH
72700: LD_INT 105
72702: PUSH
72703: LD_INT 106
72705: PUSH
72706: LD_INT 107
72708: PUSH
72709: LD_INT 108
72711: PUSH
72712: LD_INT 109
72714: PUSH
72715: LD_INT 110
72717: PUSH
72718: LD_INT 111
72720: PUSH
72721: LD_INT 112
72723: PUSH
72724: LD_INT 114
72726: PUSH
72727: LD_INT 116
72729: PUSH
72730: LD_INT 117
72732: PUSH
72733: LD_INT 118
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: ST_TO_ADDR
72758: GO 74441
72760: LD_INT 12
72762: DOUBLE
72763: EQUAL
72764: IFTRUE 72768
72766: GO 72988
72768: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
72769: LD_ADDR_VAR 0 2
72773: PUSH
72774: LD_INT 1
72776: PUSH
72777: LD_INT 2
72779: PUSH
72780: LD_INT 3
72782: PUSH
72783: LD_INT 4
72785: PUSH
72786: LD_INT 5
72788: PUSH
72789: LD_INT 6
72791: PUSH
72792: LD_INT 7
72794: PUSH
72795: LD_INT 8
72797: PUSH
72798: LD_INT 9
72800: PUSH
72801: LD_INT 10
72803: PUSH
72804: LD_INT 11
72806: PUSH
72807: LD_INT 12
72809: PUSH
72810: LD_INT 13
72812: PUSH
72813: LD_INT 14
72815: PUSH
72816: LD_INT 15
72818: PUSH
72819: LD_INT 16
72821: PUSH
72822: LD_INT 17
72824: PUSH
72825: LD_INT 18
72827: PUSH
72828: LD_INT 19
72830: PUSH
72831: LD_INT 20
72833: PUSH
72834: LD_INT 21
72836: PUSH
72837: LD_INT 22
72839: PUSH
72840: LD_INT 23
72842: PUSH
72843: LD_INT 24
72845: PUSH
72846: LD_INT 25
72848: PUSH
72849: LD_INT 26
72851: PUSH
72852: LD_INT 27
72854: PUSH
72855: LD_INT 28
72857: PUSH
72858: LD_INT 30
72860: PUSH
72861: LD_INT 31
72863: PUSH
72864: LD_INT 32
72866: PUSH
72867: LD_INT 33
72869: PUSH
72870: LD_INT 34
72872: PUSH
72873: LD_INT 36
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 101
72914: PUSH
72915: LD_INT 102
72917: PUSH
72918: LD_INT 103
72920: PUSH
72921: LD_INT 104
72923: PUSH
72924: LD_INT 105
72926: PUSH
72927: LD_INT 106
72929: PUSH
72930: LD_INT 107
72932: PUSH
72933: LD_INT 108
72935: PUSH
72936: LD_INT 109
72938: PUSH
72939: LD_INT 110
72941: PUSH
72942: LD_INT 111
72944: PUSH
72945: LD_INT 112
72947: PUSH
72948: LD_INT 113
72950: PUSH
72951: LD_INT 114
72953: PUSH
72954: LD_INT 116
72956: PUSH
72957: LD_INT 117
72959: PUSH
72960: LD_INT 118
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: ST_TO_ADDR
72986: GO 74441
72988: LD_INT 13
72990: DOUBLE
72991: EQUAL
72992: IFTRUE 72996
72994: GO 73204
72996: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
72997: LD_ADDR_VAR 0 2
73001: PUSH
73002: LD_INT 1
73004: PUSH
73005: LD_INT 2
73007: PUSH
73008: LD_INT 3
73010: PUSH
73011: LD_INT 4
73013: PUSH
73014: LD_INT 5
73016: PUSH
73017: LD_INT 8
73019: PUSH
73020: LD_INT 9
73022: PUSH
73023: LD_INT 10
73025: PUSH
73026: LD_INT 11
73028: PUSH
73029: LD_INT 12
73031: PUSH
73032: LD_INT 14
73034: PUSH
73035: LD_INT 15
73037: PUSH
73038: LD_INT 16
73040: PUSH
73041: LD_INT 17
73043: PUSH
73044: LD_INT 18
73046: PUSH
73047: LD_INT 19
73049: PUSH
73050: LD_INT 20
73052: PUSH
73053: LD_INT 21
73055: PUSH
73056: LD_INT 22
73058: PUSH
73059: LD_INT 23
73061: PUSH
73062: LD_INT 24
73064: PUSH
73065: LD_INT 25
73067: PUSH
73068: LD_INT 26
73070: PUSH
73071: LD_INT 27
73073: PUSH
73074: LD_INT 28
73076: PUSH
73077: LD_INT 30
73079: PUSH
73080: LD_INT 31
73082: PUSH
73083: LD_INT 32
73085: PUSH
73086: LD_INT 33
73088: PUSH
73089: LD_INT 34
73091: PUSH
73092: LD_INT 36
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: LIST
73102: LIST
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 101
73130: PUSH
73131: LD_INT 102
73133: PUSH
73134: LD_INT 103
73136: PUSH
73137: LD_INT 104
73139: PUSH
73140: LD_INT 105
73142: PUSH
73143: LD_INT 106
73145: PUSH
73146: LD_INT 107
73148: PUSH
73149: LD_INT 108
73151: PUSH
73152: LD_INT 109
73154: PUSH
73155: LD_INT 110
73157: PUSH
73158: LD_INT 111
73160: PUSH
73161: LD_INT 112
73163: PUSH
73164: LD_INT 113
73166: PUSH
73167: LD_INT 114
73169: PUSH
73170: LD_INT 116
73172: PUSH
73173: LD_INT 117
73175: PUSH
73176: LD_INT 118
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: ST_TO_ADDR
73202: GO 74441
73204: LD_INT 14
73206: DOUBLE
73207: EQUAL
73208: IFTRUE 73212
73210: GO 73436
73212: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
73213: LD_ADDR_VAR 0 2
73217: PUSH
73218: LD_INT 1
73220: PUSH
73221: LD_INT 2
73223: PUSH
73224: LD_INT 3
73226: PUSH
73227: LD_INT 4
73229: PUSH
73230: LD_INT 5
73232: PUSH
73233: LD_INT 6
73235: PUSH
73236: LD_INT 7
73238: PUSH
73239: LD_INT 8
73241: PUSH
73242: LD_INT 9
73244: PUSH
73245: LD_INT 10
73247: PUSH
73248: LD_INT 11
73250: PUSH
73251: LD_INT 12
73253: PUSH
73254: LD_INT 13
73256: PUSH
73257: LD_INT 14
73259: PUSH
73260: LD_INT 15
73262: PUSH
73263: LD_INT 16
73265: PUSH
73266: LD_INT 17
73268: PUSH
73269: LD_INT 18
73271: PUSH
73272: LD_INT 19
73274: PUSH
73275: LD_INT 20
73277: PUSH
73278: LD_INT 21
73280: PUSH
73281: LD_INT 22
73283: PUSH
73284: LD_INT 23
73286: PUSH
73287: LD_INT 24
73289: PUSH
73290: LD_INT 25
73292: PUSH
73293: LD_INT 26
73295: PUSH
73296: LD_INT 27
73298: PUSH
73299: LD_INT 28
73301: PUSH
73302: LD_INT 29
73304: PUSH
73305: LD_INT 30
73307: PUSH
73308: LD_INT 31
73310: PUSH
73311: LD_INT 32
73313: PUSH
73314: LD_INT 33
73316: PUSH
73317: LD_INT 34
73319: PUSH
73320: LD_INT 36
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 101
73362: PUSH
73363: LD_INT 102
73365: PUSH
73366: LD_INT 103
73368: PUSH
73369: LD_INT 104
73371: PUSH
73372: LD_INT 105
73374: PUSH
73375: LD_INT 106
73377: PUSH
73378: LD_INT 107
73380: PUSH
73381: LD_INT 108
73383: PUSH
73384: LD_INT 109
73386: PUSH
73387: LD_INT 110
73389: PUSH
73390: LD_INT 111
73392: PUSH
73393: LD_INT 112
73395: PUSH
73396: LD_INT 113
73398: PUSH
73399: LD_INT 114
73401: PUSH
73402: LD_INT 116
73404: PUSH
73405: LD_INT 117
73407: PUSH
73408: LD_INT 118
73410: PUSH
73411: EMPTY
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: ST_TO_ADDR
73434: GO 74441
73436: LD_INT 15
73438: DOUBLE
73439: EQUAL
73440: IFTRUE 73444
73442: GO 73668
73444: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
73445: LD_ADDR_VAR 0 2
73449: PUSH
73450: LD_INT 1
73452: PUSH
73453: LD_INT 2
73455: PUSH
73456: LD_INT 3
73458: PUSH
73459: LD_INT 4
73461: PUSH
73462: LD_INT 5
73464: PUSH
73465: LD_INT 6
73467: PUSH
73468: LD_INT 7
73470: PUSH
73471: LD_INT 8
73473: PUSH
73474: LD_INT 9
73476: PUSH
73477: LD_INT 10
73479: PUSH
73480: LD_INT 11
73482: PUSH
73483: LD_INT 12
73485: PUSH
73486: LD_INT 13
73488: PUSH
73489: LD_INT 14
73491: PUSH
73492: LD_INT 15
73494: PUSH
73495: LD_INT 16
73497: PUSH
73498: LD_INT 17
73500: PUSH
73501: LD_INT 18
73503: PUSH
73504: LD_INT 19
73506: PUSH
73507: LD_INT 20
73509: PUSH
73510: LD_INT 21
73512: PUSH
73513: LD_INT 22
73515: PUSH
73516: LD_INT 23
73518: PUSH
73519: LD_INT 24
73521: PUSH
73522: LD_INT 25
73524: PUSH
73525: LD_INT 26
73527: PUSH
73528: LD_INT 27
73530: PUSH
73531: LD_INT 28
73533: PUSH
73534: LD_INT 29
73536: PUSH
73537: LD_INT 30
73539: PUSH
73540: LD_INT 31
73542: PUSH
73543: LD_INT 32
73545: PUSH
73546: LD_INT 33
73548: PUSH
73549: LD_INT 34
73551: PUSH
73552: LD_INT 36
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: PUSH
73592: LD_INT 101
73594: PUSH
73595: LD_INT 102
73597: PUSH
73598: LD_INT 103
73600: PUSH
73601: LD_INT 104
73603: PUSH
73604: LD_INT 105
73606: PUSH
73607: LD_INT 106
73609: PUSH
73610: LD_INT 107
73612: PUSH
73613: LD_INT 108
73615: PUSH
73616: LD_INT 109
73618: PUSH
73619: LD_INT 110
73621: PUSH
73622: LD_INT 111
73624: PUSH
73625: LD_INT 112
73627: PUSH
73628: LD_INT 113
73630: PUSH
73631: LD_INT 114
73633: PUSH
73634: LD_INT 116
73636: PUSH
73637: LD_INT 117
73639: PUSH
73640: LD_INT 118
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: LIST
73653: LIST
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: ST_TO_ADDR
73666: GO 74441
73668: LD_INT 16
73670: DOUBLE
73671: EQUAL
73672: IFTRUE 73676
73674: GO 73812
73676: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
73677: LD_ADDR_VAR 0 2
73681: PUSH
73682: LD_INT 2
73684: PUSH
73685: LD_INT 4
73687: PUSH
73688: LD_INT 5
73690: PUSH
73691: LD_INT 7
73693: PUSH
73694: LD_INT 11
73696: PUSH
73697: LD_INT 12
73699: PUSH
73700: LD_INT 15
73702: PUSH
73703: LD_INT 16
73705: PUSH
73706: LD_INT 20
73708: PUSH
73709: LD_INT 21
73711: PUSH
73712: LD_INT 22
73714: PUSH
73715: LD_INT 23
73717: PUSH
73718: LD_INT 25
73720: PUSH
73721: LD_INT 26
73723: PUSH
73724: LD_INT 30
73726: PUSH
73727: LD_INT 31
73729: PUSH
73730: LD_INT 32
73732: PUSH
73733: LD_INT 33
73735: PUSH
73736: LD_INT 34
73738: PUSH
73739: EMPTY
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: PUSH
73760: LD_INT 101
73762: PUSH
73763: LD_INT 102
73765: PUSH
73766: LD_INT 103
73768: PUSH
73769: LD_INT 106
73771: PUSH
73772: LD_INT 108
73774: PUSH
73775: LD_INT 112
73777: PUSH
73778: LD_INT 113
73780: PUSH
73781: LD_INT 114
73783: PUSH
73784: LD_INT 116
73786: PUSH
73787: LD_INT 117
73789: PUSH
73790: LD_INT 118
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: PUSH
73806: EMPTY
73807: LIST
73808: LIST
73809: ST_TO_ADDR
73810: GO 74441
73812: LD_INT 17
73814: DOUBLE
73815: EQUAL
73816: IFTRUE 73820
73818: GO 74044
73820: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
73821: LD_ADDR_VAR 0 2
73825: PUSH
73826: LD_INT 1
73828: PUSH
73829: LD_INT 2
73831: PUSH
73832: LD_INT 3
73834: PUSH
73835: LD_INT 4
73837: PUSH
73838: LD_INT 5
73840: PUSH
73841: LD_INT 6
73843: PUSH
73844: LD_INT 7
73846: PUSH
73847: LD_INT 8
73849: PUSH
73850: LD_INT 9
73852: PUSH
73853: LD_INT 10
73855: PUSH
73856: LD_INT 11
73858: PUSH
73859: LD_INT 12
73861: PUSH
73862: LD_INT 13
73864: PUSH
73865: LD_INT 14
73867: PUSH
73868: LD_INT 15
73870: PUSH
73871: LD_INT 16
73873: PUSH
73874: LD_INT 17
73876: PUSH
73877: LD_INT 18
73879: PUSH
73880: LD_INT 19
73882: PUSH
73883: LD_INT 20
73885: PUSH
73886: LD_INT 21
73888: PUSH
73889: LD_INT 22
73891: PUSH
73892: LD_INT 23
73894: PUSH
73895: LD_INT 24
73897: PUSH
73898: LD_INT 25
73900: PUSH
73901: LD_INT 26
73903: PUSH
73904: LD_INT 27
73906: PUSH
73907: LD_INT 28
73909: PUSH
73910: LD_INT 29
73912: PUSH
73913: LD_INT 30
73915: PUSH
73916: LD_INT 31
73918: PUSH
73919: LD_INT 32
73921: PUSH
73922: LD_INT 33
73924: PUSH
73925: LD_INT 34
73927: PUSH
73928: LD_INT 36
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: LIST
73935: LIST
73936: LIST
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: LIST
73944: LIST
73945: LIST
73946: LIST
73947: LIST
73948: LIST
73949: LIST
73950: LIST
73951: LIST
73952: LIST
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 101
73970: PUSH
73971: LD_INT 102
73973: PUSH
73974: LD_INT 103
73976: PUSH
73977: LD_INT 104
73979: PUSH
73980: LD_INT 105
73982: PUSH
73983: LD_INT 106
73985: PUSH
73986: LD_INT 107
73988: PUSH
73989: LD_INT 108
73991: PUSH
73992: LD_INT 109
73994: PUSH
73995: LD_INT 110
73997: PUSH
73998: LD_INT 111
74000: PUSH
74001: LD_INT 112
74003: PUSH
74004: LD_INT 113
74006: PUSH
74007: LD_INT 114
74009: PUSH
74010: LD_INT 116
74012: PUSH
74013: LD_INT 117
74015: PUSH
74016: LD_INT 118
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: ST_TO_ADDR
74042: GO 74441
74044: LD_INT 18
74046: DOUBLE
74047: EQUAL
74048: IFTRUE 74052
74050: GO 74200
74052: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
74053: LD_ADDR_VAR 0 2
74057: PUSH
74058: LD_INT 2
74060: PUSH
74061: LD_INT 4
74063: PUSH
74064: LD_INT 5
74066: PUSH
74067: LD_INT 7
74069: PUSH
74070: LD_INT 11
74072: PUSH
74073: LD_INT 12
74075: PUSH
74076: LD_INT 15
74078: PUSH
74079: LD_INT 16
74081: PUSH
74082: LD_INT 20
74084: PUSH
74085: LD_INT 21
74087: PUSH
74088: LD_INT 22
74090: PUSH
74091: LD_INT 23
74093: PUSH
74094: LD_INT 25
74096: PUSH
74097: LD_INT 26
74099: PUSH
74100: LD_INT 30
74102: PUSH
74103: LD_INT 31
74105: PUSH
74106: LD_INT 32
74108: PUSH
74109: LD_INT 33
74111: PUSH
74112: LD_INT 34
74114: PUSH
74115: LD_INT 35
74117: PUSH
74118: LD_INT 36
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: PUSH
74144: LD_INT 101
74146: PUSH
74147: LD_INT 102
74149: PUSH
74150: LD_INT 103
74152: PUSH
74153: LD_INT 106
74155: PUSH
74156: LD_INT 108
74158: PUSH
74159: LD_INT 112
74161: PUSH
74162: LD_INT 113
74164: PUSH
74165: LD_INT 114
74167: PUSH
74168: LD_INT 115
74170: PUSH
74171: LD_INT 116
74173: PUSH
74174: LD_INT 117
74176: PUSH
74177: LD_INT 118
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: LIST
74184: LIST
74185: LIST
74186: LIST
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: LIST
74192: LIST
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: ST_TO_ADDR
74198: GO 74441
74200: LD_INT 19
74202: DOUBLE
74203: EQUAL
74204: IFTRUE 74208
74206: GO 74440
74208: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
74209: LD_ADDR_VAR 0 2
74213: PUSH
74214: LD_INT 1
74216: PUSH
74217: LD_INT 2
74219: PUSH
74220: LD_INT 3
74222: PUSH
74223: LD_INT 4
74225: PUSH
74226: LD_INT 5
74228: PUSH
74229: LD_INT 6
74231: PUSH
74232: LD_INT 7
74234: PUSH
74235: LD_INT 8
74237: PUSH
74238: LD_INT 9
74240: PUSH
74241: LD_INT 10
74243: PUSH
74244: LD_INT 11
74246: PUSH
74247: LD_INT 12
74249: PUSH
74250: LD_INT 13
74252: PUSH
74253: LD_INT 14
74255: PUSH
74256: LD_INT 15
74258: PUSH
74259: LD_INT 16
74261: PUSH
74262: LD_INT 17
74264: PUSH
74265: LD_INT 18
74267: PUSH
74268: LD_INT 19
74270: PUSH
74271: LD_INT 20
74273: PUSH
74274: LD_INT 21
74276: PUSH
74277: LD_INT 22
74279: PUSH
74280: LD_INT 23
74282: PUSH
74283: LD_INT 24
74285: PUSH
74286: LD_INT 25
74288: PUSH
74289: LD_INT 26
74291: PUSH
74292: LD_INT 27
74294: PUSH
74295: LD_INT 28
74297: PUSH
74298: LD_INT 29
74300: PUSH
74301: LD_INT 30
74303: PUSH
74304: LD_INT 31
74306: PUSH
74307: LD_INT 32
74309: PUSH
74310: LD_INT 33
74312: PUSH
74313: LD_INT 34
74315: PUSH
74316: LD_INT 35
74318: PUSH
74319: LD_INT 36
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: PUSH
74360: LD_INT 101
74362: PUSH
74363: LD_INT 102
74365: PUSH
74366: LD_INT 103
74368: PUSH
74369: LD_INT 104
74371: PUSH
74372: LD_INT 105
74374: PUSH
74375: LD_INT 106
74377: PUSH
74378: LD_INT 107
74380: PUSH
74381: LD_INT 108
74383: PUSH
74384: LD_INT 109
74386: PUSH
74387: LD_INT 110
74389: PUSH
74390: LD_INT 111
74392: PUSH
74393: LD_INT 112
74395: PUSH
74396: LD_INT 113
74398: PUSH
74399: LD_INT 114
74401: PUSH
74402: LD_INT 115
74404: PUSH
74405: LD_INT 116
74407: PUSH
74408: LD_INT 117
74410: PUSH
74411: LD_INT 118
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: ST_TO_ADDR
74438: GO 74441
74440: POP
// end else
74441: GO 74672
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
74443: LD_ADDR_VAR 0 2
74447: PUSH
74448: LD_INT 1
74450: PUSH
74451: LD_INT 2
74453: PUSH
74454: LD_INT 3
74456: PUSH
74457: LD_INT 4
74459: PUSH
74460: LD_INT 5
74462: PUSH
74463: LD_INT 6
74465: PUSH
74466: LD_INT 7
74468: PUSH
74469: LD_INT 8
74471: PUSH
74472: LD_INT 9
74474: PUSH
74475: LD_INT 10
74477: PUSH
74478: LD_INT 11
74480: PUSH
74481: LD_INT 12
74483: PUSH
74484: LD_INT 13
74486: PUSH
74487: LD_INT 14
74489: PUSH
74490: LD_INT 15
74492: PUSH
74493: LD_INT 16
74495: PUSH
74496: LD_INT 17
74498: PUSH
74499: LD_INT 18
74501: PUSH
74502: LD_INT 19
74504: PUSH
74505: LD_INT 20
74507: PUSH
74508: LD_INT 21
74510: PUSH
74511: LD_INT 22
74513: PUSH
74514: LD_INT 23
74516: PUSH
74517: LD_INT 24
74519: PUSH
74520: LD_INT 25
74522: PUSH
74523: LD_INT 26
74525: PUSH
74526: LD_INT 27
74528: PUSH
74529: LD_INT 28
74531: PUSH
74532: LD_INT 29
74534: PUSH
74535: LD_INT 30
74537: PUSH
74538: LD_INT 31
74540: PUSH
74541: LD_INT 32
74543: PUSH
74544: LD_INT 33
74546: PUSH
74547: LD_INT 34
74549: PUSH
74550: LD_INT 35
74552: PUSH
74553: LD_INT 36
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: LIST
74560: LIST
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: LIST
74591: LIST
74592: LIST
74593: PUSH
74594: LD_INT 101
74596: PUSH
74597: LD_INT 102
74599: PUSH
74600: LD_INT 103
74602: PUSH
74603: LD_INT 104
74605: PUSH
74606: LD_INT 105
74608: PUSH
74609: LD_INT 106
74611: PUSH
74612: LD_INT 107
74614: PUSH
74615: LD_INT 108
74617: PUSH
74618: LD_INT 109
74620: PUSH
74621: LD_INT 110
74623: PUSH
74624: LD_INT 111
74626: PUSH
74627: LD_INT 112
74629: PUSH
74630: LD_INT 113
74632: PUSH
74633: LD_INT 114
74635: PUSH
74636: LD_INT 115
74638: PUSH
74639: LD_INT 116
74641: PUSH
74642: LD_INT 117
74644: PUSH
74645: LD_INT 118
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: ST_TO_ADDR
// if result then
74672: LD_VAR 0 2
74676: IFFALSE 75462
// begin normal :=  ;
74678: LD_ADDR_VAR 0 5
74682: PUSH
74683: LD_STRING 
74685: ST_TO_ADDR
// hardcore :=  ;
74686: LD_ADDR_VAR 0 6
74690: PUSH
74691: LD_STRING 
74693: ST_TO_ADDR
// active :=  ;
74694: LD_ADDR_VAR 0 7
74698: PUSH
74699: LD_STRING 
74701: ST_TO_ADDR
// for i = 1 to normalCounter do
74702: LD_ADDR_VAR 0 8
74706: PUSH
74707: DOUBLE
74708: LD_INT 1
74710: DEC
74711: ST_TO_ADDR
74712: LD_EXP 73
74716: PUSH
74717: FOR_TO
74718: IFFALSE 74819
// begin tmp := 0 ;
74720: LD_ADDR_VAR 0 3
74724: PUSH
74725: LD_STRING 0
74727: ST_TO_ADDR
// if result [ 1 ] then
74728: LD_VAR 0 2
74732: PUSH
74733: LD_INT 1
74735: ARRAY
74736: IFFALSE 74801
// if result [ 1 ] [ 1 ] = i then
74738: LD_VAR 0 2
74742: PUSH
74743: LD_INT 1
74745: ARRAY
74746: PUSH
74747: LD_INT 1
74749: ARRAY
74750: PUSH
74751: LD_VAR 0 8
74755: EQUAL
74756: IFFALSE 74801
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
74758: LD_ADDR_VAR 0 2
74762: PUSH
74763: LD_VAR 0 2
74767: PPUSH
74768: LD_INT 1
74770: PPUSH
74771: LD_VAR 0 2
74775: PUSH
74776: LD_INT 1
74778: ARRAY
74779: PPUSH
74780: LD_INT 1
74782: PPUSH
74783: CALL_OW 3
74787: PPUSH
74788: CALL_OW 1
74792: ST_TO_ADDR
// tmp := 1 ;
74793: LD_ADDR_VAR 0 3
74797: PUSH
74798: LD_STRING 1
74800: ST_TO_ADDR
// end ; normal := normal & tmp ;
74801: LD_ADDR_VAR 0 5
74805: PUSH
74806: LD_VAR 0 5
74810: PUSH
74811: LD_VAR 0 3
74815: STR
74816: ST_TO_ADDR
// end ;
74817: GO 74717
74819: POP
74820: POP
// for i = 1 to hardcoreCounter do
74821: LD_ADDR_VAR 0 8
74825: PUSH
74826: DOUBLE
74827: LD_INT 1
74829: DEC
74830: ST_TO_ADDR
74831: LD_EXP 74
74835: PUSH
74836: FOR_TO
74837: IFFALSE 74942
// begin tmp := 0 ;
74839: LD_ADDR_VAR 0 3
74843: PUSH
74844: LD_STRING 0
74846: ST_TO_ADDR
// if result [ 2 ] then
74847: LD_VAR 0 2
74851: PUSH
74852: LD_INT 2
74854: ARRAY
74855: IFFALSE 74924
// if result [ 2 ] [ 1 ] = 100 + i then
74857: LD_VAR 0 2
74861: PUSH
74862: LD_INT 2
74864: ARRAY
74865: PUSH
74866: LD_INT 1
74868: ARRAY
74869: PUSH
74870: LD_INT 100
74872: PUSH
74873: LD_VAR 0 8
74877: PLUS
74878: EQUAL
74879: IFFALSE 74924
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
74881: LD_ADDR_VAR 0 2
74885: PUSH
74886: LD_VAR 0 2
74890: PPUSH
74891: LD_INT 2
74893: PPUSH
74894: LD_VAR 0 2
74898: PUSH
74899: LD_INT 2
74901: ARRAY
74902: PPUSH
74903: LD_INT 1
74905: PPUSH
74906: CALL_OW 3
74910: PPUSH
74911: CALL_OW 1
74915: ST_TO_ADDR
// tmp := 1 ;
74916: LD_ADDR_VAR 0 3
74920: PUSH
74921: LD_STRING 1
74923: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
74924: LD_ADDR_VAR 0 6
74928: PUSH
74929: LD_VAR 0 6
74933: PUSH
74934: LD_VAR 0 3
74938: STR
74939: ST_TO_ADDR
// end ;
74940: GO 74836
74942: POP
74943: POP
// if isGameLoad then
74944: LD_VAR 0 1
74948: IFFALSE 75423
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
74950: LD_ADDR_VAR 0 4
74954: PUSH
74955: LD_EXP 77
74959: PUSH
74960: LD_EXP 76
74964: PUSH
74965: LD_EXP 78
74969: PUSH
74970: LD_EXP 75
74974: PUSH
74975: LD_EXP 79
74979: PUSH
74980: LD_EXP 80
74984: PUSH
74985: LD_EXP 81
74989: PUSH
74990: LD_EXP 82
74994: PUSH
74995: LD_EXP 83
74999: PUSH
75000: LD_EXP 84
75004: PUSH
75005: LD_EXP 85
75009: PUSH
75010: LD_EXP 86
75014: PUSH
75015: LD_EXP 87
75019: PUSH
75020: LD_EXP 88
75024: PUSH
75025: LD_EXP 96
75029: PUSH
75030: LD_EXP 97
75034: PUSH
75035: LD_EXP 98
75039: PUSH
75040: LD_EXP 99
75044: PUSH
75045: LD_EXP 101
75049: PUSH
75050: LD_EXP 102
75054: PUSH
75055: LD_EXP 103
75059: PUSH
75060: LD_EXP 106
75064: PUSH
75065: LD_EXP 108
75069: PUSH
75070: LD_EXP 109
75074: PUSH
75075: LD_EXP 110
75079: PUSH
75080: LD_EXP 112
75084: PUSH
75085: LD_EXP 113
75089: PUSH
75090: LD_EXP 116
75094: PUSH
75095: LD_EXP 117
75099: PUSH
75100: LD_EXP 118
75104: PUSH
75105: LD_EXP 119
75109: PUSH
75110: LD_EXP 120
75114: PUSH
75115: LD_EXP 121
75119: PUSH
75120: LD_EXP 122
75124: PUSH
75125: LD_EXP 123
75129: PUSH
75130: LD_EXP 124
75134: PUSH
75135: LD_EXP 89
75139: PUSH
75140: LD_EXP 90
75144: PUSH
75145: LD_EXP 93
75149: PUSH
75150: LD_EXP 94
75154: PUSH
75155: LD_EXP 95
75159: PUSH
75160: LD_EXP 91
75164: PUSH
75165: LD_EXP 92
75169: PUSH
75170: LD_EXP 100
75174: PUSH
75175: LD_EXP 104
75179: PUSH
75180: LD_EXP 105
75184: PUSH
75185: LD_EXP 107
75189: PUSH
75190: LD_EXP 111
75194: PUSH
75195: LD_EXP 114
75199: PUSH
75200: LD_EXP 115
75204: PUSH
75205: LD_EXP 125
75209: PUSH
75210: LD_EXP 126
75214: PUSH
75215: LD_EXP 127
75219: PUSH
75220: LD_EXP 128
75224: PUSH
75225: EMPTY
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: LIST
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: LIST
75237: LIST
75238: LIST
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: LIST
75244: LIST
75245: LIST
75246: LIST
75247: LIST
75248: LIST
75249: LIST
75250: LIST
75251: LIST
75252: LIST
75253: LIST
75254: LIST
75255: LIST
75256: LIST
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: LIST
75264: LIST
75265: LIST
75266: LIST
75267: LIST
75268: LIST
75269: LIST
75270: LIST
75271: LIST
75272: LIST
75273: LIST
75274: LIST
75275: LIST
75276: LIST
75277: LIST
75278: LIST
75279: LIST
75280: ST_TO_ADDR
// tmp :=  ;
75281: LD_ADDR_VAR 0 3
75285: PUSH
75286: LD_STRING 
75288: ST_TO_ADDR
// for i = 1 to normalCounter do
75289: LD_ADDR_VAR 0 8
75293: PUSH
75294: DOUBLE
75295: LD_INT 1
75297: DEC
75298: ST_TO_ADDR
75299: LD_EXP 73
75303: PUSH
75304: FOR_TO
75305: IFFALSE 75341
// begin if flags [ i ] then
75307: LD_VAR 0 4
75311: PUSH
75312: LD_VAR 0 8
75316: ARRAY
75317: IFFALSE 75339
// tmp := tmp & i & ; ;
75319: LD_ADDR_VAR 0 3
75323: PUSH
75324: LD_VAR 0 3
75328: PUSH
75329: LD_VAR 0 8
75333: STR
75334: PUSH
75335: LD_STRING ;
75337: STR
75338: ST_TO_ADDR
// end ;
75339: GO 75304
75341: POP
75342: POP
// for i = 1 to hardcoreCounter do
75343: LD_ADDR_VAR 0 8
75347: PUSH
75348: DOUBLE
75349: LD_INT 1
75351: DEC
75352: ST_TO_ADDR
75353: LD_EXP 74
75357: PUSH
75358: FOR_TO
75359: IFFALSE 75405
// begin if flags [ normalCounter + i ] then
75361: LD_VAR 0 4
75365: PUSH
75366: LD_EXP 73
75370: PUSH
75371: LD_VAR 0 8
75375: PLUS
75376: ARRAY
75377: IFFALSE 75403
// tmp := tmp & ( 100 + i ) & ; ;
75379: LD_ADDR_VAR 0 3
75383: PUSH
75384: LD_VAR 0 3
75388: PUSH
75389: LD_INT 100
75391: PUSH
75392: LD_VAR 0 8
75396: PLUS
75397: STR
75398: PUSH
75399: LD_STRING ;
75401: STR
75402: ST_TO_ADDR
// end ;
75403: GO 75358
75405: POP
75406: POP
// if tmp then
75407: LD_VAR 0 3
75411: IFFALSE 75423
// active := tmp ;
75413: LD_ADDR_VAR 0 7
75417: PUSH
75418: LD_VAR 0 3
75422: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
75423: LD_STRING getStreamItemsFromMission("
75425: PUSH
75426: LD_VAR 0 5
75430: STR
75431: PUSH
75432: LD_STRING ","
75434: STR
75435: PUSH
75436: LD_VAR 0 6
75440: STR
75441: PUSH
75442: LD_STRING ","
75444: STR
75445: PUSH
75446: LD_VAR 0 7
75450: STR
75451: PUSH
75452: LD_STRING ")
75454: STR
75455: PPUSH
75456: CALL_OW 559
// end else
75460: GO 75469
// ToLua ( getStreamItemsFromMission("","","") ) ;
75462: LD_STRING getStreamItemsFromMission("","","")
75464: PPUSH
75465: CALL_OW 559
// end ;
75469: LD_VAR 0 2
75473: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
75474: LD_EXP 72
75478: PUSH
75479: LD_EXP 77
75483: AND
75484: IFFALSE 75608
75486: GO 75488
75488: DISABLE
75489: LD_INT 0
75491: PPUSH
75492: PPUSH
// begin enable ;
75493: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
75494: LD_ADDR_VAR 0 2
75498: PUSH
75499: LD_INT 22
75501: PUSH
75502: LD_OWVAR 2
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: PUSH
75511: LD_INT 2
75513: PUSH
75514: LD_INT 34
75516: PUSH
75517: LD_INT 7
75519: PUSH
75520: EMPTY
75521: LIST
75522: LIST
75523: PUSH
75524: LD_INT 34
75526: PUSH
75527: LD_INT 45
75529: PUSH
75530: EMPTY
75531: LIST
75532: LIST
75533: PUSH
75534: LD_INT 34
75536: PUSH
75537: LD_INT 28
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: PUSH
75544: LD_INT 34
75546: PUSH
75547: LD_INT 47
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: LIST
75558: LIST
75559: LIST
75560: PUSH
75561: EMPTY
75562: LIST
75563: LIST
75564: PPUSH
75565: CALL_OW 69
75569: ST_TO_ADDR
// if not tmp then
75570: LD_VAR 0 2
75574: NOT
75575: IFFALSE 75579
// exit ;
75577: GO 75608
// for i in tmp do
75579: LD_ADDR_VAR 0 1
75583: PUSH
75584: LD_VAR 0 2
75588: PUSH
75589: FOR_IN
75590: IFFALSE 75606
// begin SetLives ( i , 0 ) ;
75592: LD_VAR 0 1
75596: PPUSH
75597: LD_INT 0
75599: PPUSH
75600: CALL_OW 234
// end ;
75604: GO 75589
75606: POP
75607: POP
// end ;
75608: PPOPN 2
75610: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
75611: LD_EXP 72
75615: PUSH
75616: LD_EXP 78
75620: AND
75621: IFFALSE 75705
75623: GO 75625
75625: DISABLE
75626: LD_INT 0
75628: PPUSH
75629: PPUSH
// begin enable ;
75630: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
75631: LD_ADDR_VAR 0 2
75635: PUSH
75636: LD_INT 22
75638: PUSH
75639: LD_OWVAR 2
75643: PUSH
75644: EMPTY
75645: LIST
75646: LIST
75647: PUSH
75648: LD_INT 32
75650: PUSH
75651: LD_INT 3
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: PPUSH
75662: CALL_OW 69
75666: ST_TO_ADDR
// if not tmp then
75667: LD_VAR 0 2
75671: NOT
75672: IFFALSE 75676
// exit ;
75674: GO 75705
// for i in tmp do
75676: LD_ADDR_VAR 0 1
75680: PUSH
75681: LD_VAR 0 2
75685: PUSH
75686: FOR_IN
75687: IFFALSE 75703
// begin SetLives ( i , 0 ) ;
75689: LD_VAR 0 1
75693: PPUSH
75694: LD_INT 0
75696: PPUSH
75697: CALL_OW 234
// end ;
75701: GO 75686
75703: POP
75704: POP
// end ;
75705: PPOPN 2
75707: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
75708: LD_EXP 72
75712: PUSH
75713: LD_EXP 75
75717: AND
75718: IFFALSE 75811
75720: GO 75722
75722: DISABLE
75723: LD_INT 0
75725: PPUSH
// begin enable ;
75726: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
75727: LD_ADDR_VAR 0 1
75731: PUSH
75732: LD_INT 22
75734: PUSH
75735: LD_OWVAR 2
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: PUSH
75744: LD_INT 2
75746: PUSH
75747: LD_INT 25
75749: PUSH
75750: LD_INT 5
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: PUSH
75757: LD_INT 25
75759: PUSH
75760: LD_INT 9
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PUSH
75767: LD_INT 25
75769: PUSH
75770: LD_INT 8
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: LIST
75781: LIST
75782: PUSH
75783: EMPTY
75784: LIST
75785: LIST
75786: PPUSH
75787: CALL_OW 69
75791: PUSH
75792: FOR_IN
75793: IFFALSE 75809
// begin SetClass ( i , 1 ) ;
75795: LD_VAR 0 1
75799: PPUSH
75800: LD_INT 1
75802: PPUSH
75803: CALL_OW 336
// end ;
75807: GO 75792
75809: POP
75810: POP
// end ;
75811: PPOPN 1
75813: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
75814: LD_EXP 72
75818: PUSH
75819: LD_EXP 76
75823: AND
75824: PUSH
75825: LD_OWVAR 65
75829: PUSH
75830: LD_INT 7
75832: LESS
75833: AND
75834: IFFALSE 75848
75836: GO 75838
75838: DISABLE
// begin enable ;
75839: ENABLE
// game_speed := 7 ;
75840: LD_ADDR_OWVAR 65
75844: PUSH
75845: LD_INT 7
75847: ST_TO_ADDR
// end ;
75848: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
75849: LD_EXP 72
75853: PUSH
75854: LD_EXP 79
75858: AND
75859: IFFALSE 76061
75861: GO 75863
75863: DISABLE
75864: LD_INT 0
75866: PPUSH
75867: PPUSH
75868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
75869: LD_ADDR_VAR 0 3
75873: PUSH
75874: LD_INT 81
75876: PUSH
75877: LD_OWVAR 2
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: PUSH
75886: LD_INT 21
75888: PUSH
75889: LD_INT 1
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: PPUSH
75900: CALL_OW 69
75904: ST_TO_ADDR
// if not tmp then
75905: LD_VAR 0 3
75909: NOT
75910: IFFALSE 75914
// exit ;
75912: GO 76061
// if tmp > 5 then
75914: LD_VAR 0 3
75918: PUSH
75919: LD_INT 5
75921: GREATER
75922: IFFALSE 75934
// k := 5 else
75924: LD_ADDR_VAR 0 2
75928: PUSH
75929: LD_INT 5
75931: ST_TO_ADDR
75932: GO 75944
// k := tmp ;
75934: LD_ADDR_VAR 0 2
75938: PUSH
75939: LD_VAR 0 3
75943: ST_TO_ADDR
// for i := 1 to k do
75944: LD_ADDR_VAR 0 1
75948: PUSH
75949: DOUBLE
75950: LD_INT 1
75952: DEC
75953: ST_TO_ADDR
75954: LD_VAR 0 2
75958: PUSH
75959: FOR_TO
75960: IFFALSE 76059
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
75962: LD_VAR 0 3
75966: PUSH
75967: LD_VAR 0 1
75971: ARRAY
75972: PPUSH
75973: LD_VAR 0 1
75977: PUSH
75978: LD_INT 4
75980: MOD
75981: PUSH
75982: LD_INT 1
75984: PLUS
75985: PPUSH
75986: CALL_OW 259
75990: PUSH
75991: LD_INT 10
75993: LESS
75994: IFFALSE 76057
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
75996: LD_VAR 0 3
76000: PUSH
76001: LD_VAR 0 1
76005: ARRAY
76006: PPUSH
76007: LD_VAR 0 1
76011: PUSH
76012: LD_INT 4
76014: MOD
76015: PUSH
76016: LD_INT 1
76018: PLUS
76019: PPUSH
76020: LD_VAR 0 3
76024: PUSH
76025: LD_VAR 0 1
76029: ARRAY
76030: PPUSH
76031: LD_VAR 0 1
76035: PUSH
76036: LD_INT 4
76038: MOD
76039: PUSH
76040: LD_INT 1
76042: PLUS
76043: PPUSH
76044: CALL_OW 259
76048: PUSH
76049: LD_INT 1
76051: PLUS
76052: PPUSH
76053: CALL_OW 237
76057: GO 75959
76059: POP
76060: POP
// end ;
76061: PPOPN 3
76063: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
76064: LD_EXP 72
76068: PUSH
76069: LD_EXP 80
76073: AND
76074: IFFALSE 76094
76076: GO 76078
76078: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
76079: LD_INT 4
76081: PPUSH
76082: LD_OWVAR 2
76086: PPUSH
76087: LD_INT 0
76089: PPUSH
76090: CALL_OW 324
76094: END
// every 0 0$1 trigger StreamModeActive and sShovel do
76095: LD_EXP 72
76099: PUSH
76100: LD_EXP 109
76104: AND
76105: IFFALSE 76125
76107: GO 76109
76109: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
76110: LD_INT 19
76112: PPUSH
76113: LD_OWVAR 2
76117: PPUSH
76118: LD_INT 0
76120: PPUSH
76121: CALL_OW 324
76125: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
76126: LD_EXP 72
76130: PUSH
76131: LD_EXP 81
76135: AND
76136: IFFALSE 76238
76138: GO 76140
76140: DISABLE
76141: LD_INT 0
76143: PPUSH
76144: PPUSH
// begin enable ;
76145: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
76146: LD_ADDR_VAR 0 2
76150: PUSH
76151: LD_INT 22
76153: PUSH
76154: LD_OWVAR 2
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: PUSH
76163: LD_INT 2
76165: PUSH
76166: LD_INT 34
76168: PUSH
76169: LD_INT 11
76171: PUSH
76172: EMPTY
76173: LIST
76174: LIST
76175: PUSH
76176: LD_INT 34
76178: PUSH
76179: LD_INT 30
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: LIST
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: PPUSH
76195: CALL_OW 69
76199: ST_TO_ADDR
// if not tmp then
76200: LD_VAR 0 2
76204: NOT
76205: IFFALSE 76209
// exit ;
76207: GO 76238
// for i in tmp do
76209: LD_ADDR_VAR 0 1
76213: PUSH
76214: LD_VAR 0 2
76218: PUSH
76219: FOR_IN
76220: IFFALSE 76236
// begin SetLives ( i , 0 ) ;
76222: LD_VAR 0 1
76226: PPUSH
76227: LD_INT 0
76229: PPUSH
76230: CALL_OW 234
// end ;
76234: GO 76219
76236: POP
76237: POP
// end ;
76238: PPOPN 2
76240: END
// every 0 0$1 trigger StreamModeActive and sBunker do
76241: LD_EXP 72
76245: PUSH
76246: LD_EXP 82
76250: AND
76251: IFFALSE 76271
76253: GO 76255
76255: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
76256: LD_INT 32
76258: PPUSH
76259: LD_OWVAR 2
76263: PPUSH
76264: LD_INT 0
76266: PPUSH
76267: CALL_OW 324
76271: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
76272: LD_EXP 72
76276: PUSH
76277: LD_EXP 83
76281: AND
76282: IFFALSE 76463
76284: GO 76286
76286: DISABLE
76287: LD_INT 0
76289: PPUSH
76290: PPUSH
76291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
76292: LD_ADDR_VAR 0 2
76296: PUSH
76297: LD_INT 22
76299: PUSH
76300: LD_OWVAR 2
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: PUSH
76309: LD_INT 33
76311: PUSH
76312: LD_INT 3
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: PPUSH
76323: CALL_OW 69
76327: ST_TO_ADDR
// if not tmp then
76328: LD_VAR 0 2
76332: NOT
76333: IFFALSE 76337
// exit ;
76335: GO 76463
// side := 0 ;
76337: LD_ADDR_VAR 0 3
76341: PUSH
76342: LD_INT 0
76344: ST_TO_ADDR
// for i := 1 to 8 do
76345: LD_ADDR_VAR 0 1
76349: PUSH
76350: DOUBLE
76351: LD_INT 1
76353: DEC
76354: ST_TO_ADDR
76355: LD_INT 8
76357: PUSH
76358: FOR_TO
76359: IFFALSE 76407
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
76361: LD_OWVAR 2
76365: PUSH
76366: LD_VAR 0 1
76370: NONEQUAL
76371: PUSH
76372: LD_OWVAR 2
76376: PPUSH
76377: LD_VAR 0 1
76381: PPUSH
76382: CALL_OW 81
76386: PUSH
76387: LD_INT 2
76389: EQUAL
76390: AND
76391: IFFALSE 76405
// begin side := i ;
76393: LD_ADDR_VAR 0 3
76397: PUSH
76398: LD_VAR 0 1
76402: ST_TO_ADDR
// break ;
76403: GO 76407
// end ;
76405: GO 76358
76407: POP
76408: POP
// if not side then
76409: LD_VAR 0 3
76413: NOT
76414: IFFALSE 76418
// exit ;
76416: GO 76463
// for i := 1 to tmp do
76418: LD_ADDR_VAR 0 1
76422: PUSH
76423: DOUBLE
76424: LD_INT 1
76426: DEC
76427: ST_TO_ADDR
76428: LD_VAR 0 2
76432: PUSH
76433: FOR_TO
76434: IFFALSE 76461
// if Prob ( 60 ) then
76436: LD_INT 60
76438: PPUSH
76439: CALL_OW 13
76443: IFFALSE 76459
// SetSide ( i , side ) ;
76445: LD_VAR 0 1
76449: PPUSH
76450: LD_VAR 0 3
76454: PPUSH
76455: CALL_OW 235
76459: GO 76433
76461: POP
76462: POP
// end ;
76463: PPOPN 3
76465: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
76466: LD_EXP 72
76470: PUSH
76471: LD_EXP 85
76475: AND
76476: IFFALSE 76595
76478: GO 76480
76480: DISABLE
76481: LD_INT 0
76483: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
76484: LD_ADDR_VAR 0 1
76488: PUSH
76489: LD_INT 22
76491: PUSH
76492: LD_OWVAR 2
76496: PUSH
76497: EMPTY
76498: LIST
76499: LIST
76500: PUSH
76501: LD_INT 21
76503: PUSH
76504: LD_INT 1
76506: PUSH
76507: EMPTY
76508: LIST
76509: LIST
76510: PUSH
76511: LD_INT 3
76513: PUSH
76514: LD_INT 23
76516: PUSH
76517: LD_INT 0
76519: PUSH
76520: EMPTY
76521: LIST
76522: LIST
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PUSH
76528: EMPTY
76529: LIST
76530: LIST
76531: LIST
76532: PPUSH
76533: CALL_OW 69
76537: PUSH
76538: FOR_IN
76539: IFFALSE 76593
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
76541: LD_VAR 0 1
76545: PPUSH
76546: CALL_OW 257
76550: PUSH
76551: LD_INT 1
76553: PUSH
76554: LD_INT 2
76556: PUSH
76557: LD_INT 3
76559: PUSH
76560: LD_INT 4
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: LIST
76567: LIST
76568: IN
76569: IFFALSE 76591
// SetClass ( un , rand ( 1 , 4 ) ) ;
76571: LD_VAR 0 1
76575: PPUSH
76576: LD_INT 1
76578: PPUSH
76579: LD_INT 4
76581: PPUSH
76582: CALL_OW 12
76586: PPUSH
76587: CALL_OW 336
76591: GO 76538
76593: POP
76594: POP
// end ;
76595: PPOPN 1
76597: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
76598: LD_EXP 72
76602: PUSH
76603: LD_EXP 84
76607: AND
76608: IFFALSE 76687
76610: GO 76612
76612: DISABLE
76613: LD_INT 0
76615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
76616: LD_ADDR_VAR 0 1
76620: PUSH
76621: LD_INT 22
76623: PUSH
76624: LD_OWVAR 2
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PUSH
76633: LD_INT 21
76635: PUSH
76636: LD_INT 3
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: EMPTY
76644: LIST
76645: LIST
76646: PPUSH
76647: CALL_OW 69
76651: ST_TO_ADDR
// if not tmp then
76652: LD_VAR 0 1
76656: NOT
76657: IFFALSE 76661
// exit ;
76659: GO 76687
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
76661: LD_VAR 0 1
76665: PUSH
76666: LD_INT 1
76668: PPUSH
76669: LD_VAR 0 1
76673: PPUSH
76674: CALL_OW 12
76678: ARRAY
76679: PPUSH
76680: LD_INT 100
76682: PPUSH
76683: CALL_OW 234
// end ;
76687: PPOPN 1
76689: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
76690: LD_EXP 72
76694: PUSH
76695: LD_EXP 86
76699: AND
76700: IFFALSE 76798
76702: GO 76704
76704: DISABLE
76705: LD_INT 0
76707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76708: LD_ADDR_VAR 0 1
76712: PUSH
76713: LD_INT 22
76715: PUSH
76716: LD_OWVAR 2
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: PUSH
76725: LD_INT 21
76727: PUSH
76728: LD_INT 1
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: PUSH
76735: EMPTY
76736: LIST
76737: LIST
76738: PPUSH
76739: CALL_OW 69
76743: ST_TO_ADDR
// if not tmp then
76744: LD_VAR 0 1
76748: NOT
76749: IFFALSE 76753
// exit ;
76751: GO 76798
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
76753: LD_VAR 0 1
76757: PUSH
76758: LD_INT 1
76760: PPUSH
76761: LD_VAR 0 1
76765: PPUSH
76766: CALL_OW 12
76770: ARRAY
76771: PPUSH
76772: LD_INT 1
76774: PPUSH
76775: LD_INT 4
76777: PPUSH
76778: CALL_OW 12
76782: PPUSH
76783: LD_INT 3000
76785: PPUSH
76786: LD_INT 9000
76788: PPUSH
76789: CALL_OW 12
76793: PPUSH
76794: CALL_OW 492
// end ;
76798: PPOPN 1
76800: END
// every 0 0$1 trigger StreamModeActive and sDepot do
76801: LD_EXP 72
76805: PUSH
76806: LD_EXP 87
76810: AND
76811: IFFALSE 76831
76813: GO 76815
76815: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
76816: LD_INT 1
76818: PPUSH
76819: LD_OWVAR 2
76823: PPUSH
76824: LD_INT 0
76826: PPUSH
76827: CALL_OW 324
76831: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
76832: LD_EXP 72
76836: PUSH
76837: LD_EXP 88
76841: AND
76842: IFFALSE 76925
76844: GO 76846
76846: DISABLE
76847: LD_INT 0
76849: PPUSH
76850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
76851: LD_ADDR_VAR 0 2
76855: PUSH
76856: LD_INT 22
76858: PUSH
76859: LD_OWVAR 2
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: PUSH
76868: LD_INT 21
76870: PUSH
76871: LD_INT 3
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: EMPTY
76879: LIST
76880: LIST
76881: PPUSH
76882: CALL_OW 69
76886: ST_TO_ADDR
// if not tmp then
76887: LD_VAR 0 2
76891: NOT
76892: IFFALSE 76896
// exit ;
76894: GO 76925
// for i in tmp do
76896: LD_ADDR_VAR 0 1
76900: PUSH
76901: LD_VAR 0 2
76905: PUSH
76906: FOR_IN
76907: IFFALSE 76923
// SetBLevel ( i , 10 ) ;
76909: LD_VAR 0 1
76913: PPUSH
76914: LD_INT 10
76916: PPUSH
76917: CALL_OW 241
76921: GO 76906
76923: POP
76924: POP
// end ;
76925: PPOPN 2
76927: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
76928: LD_EXP 72
76932: PUSH
76933: LD_EXP 89
76937: AND
76938: IFFALSE 77049
76940: GO 76942
76942: DISABLE
76943: LD_INT 0
76945: PPUSH
76946: PPUSH
76947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76948: LD_ADDR_VAR 0 3
76952: PUSH
76953: LD_INT 22
76955: PUSH
76956: LD_OWVAR 2
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: PUSH
76965: LD_INT 25
76967: PUSH
76968: LD_INT 1
76970: PUSH
76971: EMPTY
76972: LIST
76973: LIST
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PPUSH
76979: CALL_OW 69
76983: ST_TO_ADDR
// if not tmp then
76984: LD_VAR 0 3
76988: NOT
76989: IFFALSE 76993
// exit ;
76991: GO 77049
// un := tmp [ rand ( 1 , tmp ) ] ;
76993: LD_ADDR_VAR 0 2
76997: PUSH
76998: LD_VAR 0 3
77002: PUSH
77003: LD_INT 1
77005: PPUSH
77006: LD_VAR 0 3
77010: PPUSH
77011: CALL_OW 12
77015: ARRAY
77016: ST_TO_ADDR
// if Crawls ( un ) then
77017: LD_VAR 0 2
77021: PPUSH
77022: CALL_OW 318
77026: IFFALSE 77037
// ComWalk ( un ) ;
77028: LD_VAR 0 2
77032: PPUSH
77033: CALL_OW 138
// SetClass ( un , class_sniper ) ;
77037: LD_VAR 0 2
77041: PPUSH
77042: LD_INT 5
77044: PPUSH
77045: CALL_OW 336
// end ;
77049: PPOPN 3
77051: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
77052: LD_EXP 72
77056: PUSH
77057: LD_EXP 90
77061: AND
77062: PUSH
77063: LD_OWVAR 67
77067: PUSH
77068: LD_INT 4
77070: LESS
77071: AND
77072: IFFALSE 77091
77074: GO 77076
77076: DISABLE
// begin Difficulty := Difficulty + 1 ;
77077: LD_ADDR_OWVAR 67
77081: PUSH
77082: LD_OWVAR 67
77086: PUSH
77087: LD_INT 1
77089: PLUS
77090: ST_TO_ADDR
// end ;
77091: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
77092: LD_EXP 72
77096: PUSH
77097: LD_EXP 91
77101: AND
77102: IFFALSE 77205
77104: GO 77106
77106: DISABLE
77107: LD_INT 0
77109: PPUSH
// begin for i := 1 to 5 do
77110: LD_ADDR_VAR 0 1
77114: PUSH
77115: DOUBLE
77116: LD_INT 1
77118: DEC
77119: ST_TO_ADDR
77120: LD_INT 5
77122: PUSH
77123: FOR_TO
77124: IFFALSE 77203
// begin uc_nation := nation_nature ;
77126: LD_ADDR_OWVAR 21
77130: PUSH
77131: LD_INT 0
77133: ST_TO_ADDR
// uc_side := 0 ;
77134: LD_ADDR_OWVAR 20
77138: PUSH
77139: LD_INT 0
77141: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
77142: LD_ADDR_OWVAR 29
77146: PUSH
77147: LD_INT 12
77149: PUSH
77150: LD_INT 12
77152: PUSH
77153: EMPTY
77154: LIST
77155: LIST
77156: ST_TO_ADDR
// hc_agressivity := 20 ;
77157: LD_ADDR_OWVAR 35
77161: PUSH
77162: LD_INT 20
77164: ST_TO_ADDR
// hc_class := class_tiger ;
77165: LD_ADDR_OWVAR 28
77169: PUSH
77170: LD_INT 14
77172: ST_TO_ADDR
// hc_gallery :=  ;
77173: LD_ADDR_OWVAR 33
77177: PUSH
77178: LD_STRING 
77180: ST_TO_ADDR
// hc_name :=  ;
77181: LD_ADDR_OWVAR 26
77185: PUSH
77186: LD_STRING 
77188: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
77189: CALL_OW 44
77193: PPUSH
77194: LD_INT 0
77196: PPUSH
77197: CALL_OW 51
// end ;
77201: GO 77123
77203: POP
77204: POP
// end ;
77205: PPOPN 1
77207: END
// every 0 0$1 trigger StreamModeActive and sBomb do
77208: LD_EXP 72
77212: PUSH
77213: LD_EXP 92
77217: AND
77218: IFFALSE 77227
77220: GO 77222
77222: DISABLE
// StreamSibBomb ;
77223: CALL 77228 0 0
77227: END
// export function StreamSibBomb ; var i , x , y ; begin
77228: LD_INT 0
77230: PPUSH
77231: PPUSH
77232: PPUSH
77233: PPUSH
// result := false ;
77234: LD_ADDR_VAR 0 1
77238: PUSH
77239: LD_INT 0
77241: ST_TO_ADDR
// for i := 1 to 16 do
77242: LD_ADDR_VAR 0 2
77246: PUSH
77247: DOUBLE
77248: LD_INT 1
77250: DEC
77251: ST_TO_ADDR
77252: LD_INT 16
77254: PUSH
77255: FOR_TO
77256: IFFALSE 77455
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
77258: LD_ADDR_VAR 0 3
77262: PUSH
77263: LD_INT 10
77265: PUSH
77266: LD_INT 20
77268: PUSH
77269: LD_INT 30
77271: PUSH
77272: LD_INT 40
77274: PUSH
77275: LD_INT 50
77277: PUSH
77278: LD_INT 60
77280: PUSH
77281: LD_INT 70
77283: PUSH
77284: LD_INT 80
77286: PUSH
77287: LD_INT 90
77289: PUSH
77290: LD_INT 100
77292: PUSH
77293: LD_INT 110
77295: PUSH
77296: LD_INT 120
77298: PUSH
77299: LD_INT 130
77301: PUSH
77302: LD_INT 140
77304: PUSH
77305: LD_INT 150
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: LIST
77318: LIST
77319: LIST
77320: LIST
77321: LIST
77322: LIST
77323: LIST
77324: PUSH
77325: LD_INT 1
77327: PPUSH
77328: LD_INT 15
77330: PPUSH
77331: CALL_OW 12
77335: ARRAY
77336: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
77337: LD_ADDR_VAR 0 4
77341: PUSH
77342: LD_INT 10
77344: PUSH
77345: LD_INT 20
77347: PUSH
77348: LD_INT 30
77350: PUSH
77351: LD_INT 40
77353: PUSH
77354: LD_INT 50
77356: PUSH
77357: LD_INT 60
77359: PUSH
77360: LD_INT 70
77362: PUSH
77363: LD_INT 80
77365: PUSH
77366: LD_INT 90
77368: PUSH
77369: LD_INT 100
77371: PUSH
77372: LD_INT 110
77374: PUSH
77375: LD_INT 120
77377: PUSH
77378: LD_INT 130
77380: PUSH
77381: LD_INT 140
77383: PUSH
77384: LD_INT 150
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: LIST
77391: LIST
77392: LIST
77393: LIST
77394: LIST
77395: LIST
77396: LIST
77397: LIST
77398: LIST
77399: LIST
77400: LIST
77401: LIST
77402: LIST
77403: PUSH
77404: LD_INT 1
77406: PPUSH
77407: LD_INT 15
77409: PPUSH
77410: CALL_OW 12
77414: ARRAY
77415: ST_TO_ADDR
// if ValidHex ( x , y ) then
77416: LD_VAR 0 3
77420: PPUSH
77421: LD_VAR 0 4
77425: PPUSH
77426: CALL_OW 488
77430: IFFALSE 77453
// begin result := [ x , y ] ;
77432: LD_ADDR_VAR 0 1
77436: PUSH
77437: LD_VAR 0 3
77441: PUSH
77442: LD_VAR 0 4
77446: PUSH
77447: EMPTY
77448: LIST
77449: LIST
77450: ST_TO_ADDR
// break ;
77451: GO 77455
// end ; end ;
77453: GO 77255
77455: POP
77456: POP
// if result then
77457: LD_VAR 0 1
77461: IFFALSE 77521
// begin ToLua ( playSibBomb() ) ;
77463: LD_STRING playSibBomb()
77465: PPUSH
77466: CALL_OW 559
// wait ( 0 0$14 ) ;
77470: LD_INT 490
77472: PPUSH
77473: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
77477: LD_VAR 0 1
77481: PUSH
77482: LD_INT 1
77484: ARRAY
77485: PPUSH
77486: LD_VAR 0 1
77490: PUSH
77491: LD_INT 2
77493: ARRAY
77494: PPUSH
77495: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
77499: LD_VAR 0 1
77503: PUSH
77504: LD_INT 1
77506: ARRAY
77507: PPUSH
77508: LD_VAR 0 1
77512: PUSH
77513: LD_INT 2
77515: ARRAY
77516: PPUSH
77517: CALL_OW 429
// end ; end ;
77521: LD_VAR 0 1
77525: RET
// every 0 0$1 trigger StreamModeActive and sReset do
77526: LD_EXP 72
77530: PUSH
77531: LD_EXP 94
77535: AND
77536: IFFALSE 77548
77538: GO 77540
77540: DISABLE
// YouLost (  ) ;
77541: LD_STRING 
77543: PPUSH
77544: CALL_OW 104
77548: END
// every 0 0$1 trigger StreamModeActive and sFog do
77549: LD_EXP 72
77553: PUSH
77554: LD_EXP 93
77558: AND
77559: IFFALSE 77573
77561: GO 77563
77563: DISABLE
// FogOff ( your_side ) ;
77564: LD_OWVAR 2
77568: PPUSH
77569: CALL_OW 344
77573: END
// every 0 0$1 trigger StreamModeActive and sSun do
77574: LD_EXP 72
77578: PUSH
77579: LD_EXP 95
77583: AND
77584: IFFALSE 77612
77586: GO 77588
77588: DISABLE
// begin solar_recharge_percent := 0 ;
77589: LD_ADDR_OWVAR 79
77593: PUSH
77594: LD_INT 0
77596: ST_TO_ADDR
// wait ( 5 5$00 ) ;
77597: LD_INT 10500
77599: PPUSH
77600: CALL_OW 67
// solar_recharge_percent := 100 ;
77604: LD_ADDR_OWVAR 79
77608: PUSH
77609: LD_INT 100
77611: ST_TO_ADDR
// end ;
77612: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
77613: LD_EXP 72
77617: PUSH
77618: LD_EXP 96
77622: AND
77623: IFFALSE 77862
77625: GO 77627
77627: DISABLE
77628: LD_INT 0
77630: PPUSH
77631: PPUSH
77632: PPUSH
// begin tmp := [ ] ;
77633: LD_ADDR_VAR 0 3
77637: PUSH
77638: EMPTY
77639: ST_TO_ADDR
// for i := 1 to 6 do
77640: LD_ADDR_VAR 0 1
77644: PUSH
77645: DOUBLE
77646: LD_INT 1
77648: DEC
77649: ST_TO_ADDR
77650: LD_INT 6
77652: PUSH
77653: FOR_TO
77654: IFFALSE 77759
// begin uc_nation := nation_nature ;
77656: LD_ADDR_OWVAR 21
77660: PUSH
77661: LD_INT 0
77663: ST_TO_ADDR
// uc_side := 0 ;
77664: LD_ADDR_OWVAR 20
77668: PUSH
77669: LD_INT 0
77671: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
77672: LD_ADDR_OWVAR 29
77676: PUSH
77677: LD_INT 12
77679: PUSH
77680: LD_INT 12
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: ST_TO_ADDR
// hc_agressivity := 20 ;
77687: LD_ADDR_OWVAR 35
77691: PUSH
77692: LD_INT 20
77694: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
77695: LD_ADDR_OWVAR 28
77699: PUSH
77700: LD_INT 17
77702: ST_TO_ADDR
// hc_gallery :=  ;
77703: LD_ADDR_OWVAR 33
77707: PUSH
77708: LD_STRING 
77710: ST_TO_ADDR
// hc_name :=  ;
77711: LD_ADDR_OWVAR 26
77715: PUSH
77716: LD_STRING 
77718: ST_TO_ADDR
// un := CreateHuman ;
77719: LD_ADDR_VAR 0 2
77723: PUSH
77724: CALL_OW 44
77728: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
77729: LD_VAR 0 2
77733: PPUSH
77734: LD_INT 1
77736: PPUSH
77737: CALL_OW 51
// tmp := tmp ^ un ;
77741: LD_ADDR_VAR 0 3
77745: PUSH
77746: LD_VAR 0 3
77750: PUSH
77751: LD_VAR 0 2
77755: ADD
77756: ST_TO_ADDR
// end ;
77757: GO 77653
77759: POP
77760: POP
// repeat wait ( 0 0$1 ) ;
77761: LD_INT 35
77763: PPUSH
77764: CALL_OW 67
// for un in tmp do
77768: LD_ADDR_VAR 0 2
77772: PUSH
77773: LD_VAR 0 3
77777: PUSH
77778: FOR_IN
77779: IFFALSE 77853
// begin if IsDead ( un ) then
77781: LD_VAR 0 2
77785: PPUSH
77786: CALL_OW 301
77790: IFFALSE 77810
// begin tmp := tmp diff un ;
77792: LD_ADDR_VAR 0 3
77796: PUSH
77797: LD_VAR 0 3
77801: PUSH
77802: LD_VAR 0 2
77806: DIFF
77807: ST_TO_ADDR
// continue ;
77808: GO 77778
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
77810: LD_VAR 0 2
77814: PPUSH
77815: LD_INT 3
77817: PUSH
77818: LD_INT 22
77820: PUSH
77821: LD_INT 0
77823: PUSH
77824: EMPTY
77825: LIST
77826: LIST
77827: PUSH
77828: EMPTY
77829: LIST
77830: LIST
77831: PPUSH
77832: CALL_OW 69
77836: PPUSH
77837: LD_VAR 0 2
77841: PPUSH
77842: CALL_OW 74
77846: PPUSH
77847: CALL_OW 115
// end ;
77851: GO 77778
77853: POP
77854: POP
// until not tmp ;
77855: LD_VAR 0 3
77859: NOT
77860: IFFALSE 77761
// end ;
77862: PPOPN 3
77864: END
// every 0 0$1 trigger StreamModeActive and sTroll do
77865: LD_EXP 72
77869: PUSH
77870: LD_EXP 97
77874: AND
77875: IFFALSE 77929
77877: GO 77879
77879: DISABLE
// begin ToLua ( displayTroll(); ) ;
77880: LD_STRING displayTroll();
77882: PPUSH
77883: CALL_OW 559
// wait ( 3 3$00 ) ;
77887: LD_INT 6300
77889: PPUSH
77890: CALL_OW 67
// ToLua ( hideTroll(); ) ;
77894: LD_STRING hideTroll();
77896: PPUSH
77897: CALL_OW 559
// wait ( 1 1$00 ) ;
77901: LD_INT 2100
77903: PPUSH
77904: CALL_OW 67
// ToLua ( displayTroll(); ) ;
77908: LD_STRING displayTroll();
77910: PPUSH
77911: CALL_OW 559
// wait ( 1 1$00 ) ;
77915: LD_INT 2100
77917: PPUSH
77918: CALL_OW 67
// ToLua ( hideTroll(); ) ;
77922: LD_STRING hideTroll();
77924: PPUSH
77925: CALL_OW 559
// end ;
77929: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
77930: LD_EXP 72
77934: PUSH
77935: LD_EXP 98
77939: AND
77940: IFFALSE 78003
77942: GO 77944
77944: DISABLE
77945: LD_INT 0
77947: PPUSH
// begin p := 0 ;
77948: LD_ADDR_VAR 0 1
77952: PUSH
77953: LD_INT 0
77955: ST_TO_ADDR
// repeat game_speed := 1 ;
77956: LD_ADDR_OWVAR 65
77960: PUSH
77961: LD_INT 1
77963: ST_TO_ADDR
// wait ( 0 0$1 ) ;
77964: LD_INT 35
77966: PPUSH
77967: CALL_OW 67
// p := p + 1 ;
77971: LD_ADDR_VAR 0 1
77975: PUSH
77976: LD_VAR 0 1
77980: PUSH
77981: LD_INT 1
77983: PLUS
77984: ST_TO_ADDR
// until p >= 60 ;
77985: LD_VAR 0 1
77989: PUSH
77990: LD_INT 60
77992: GREATEREQUAL
77993: IFFALSE 77956
// game_speed := 4 ;
77995: LD_ADDR_OWVAR 65
77999: PUSH
78000: LD_INT 4
78002: ST_TO_ADDR
// end ;
78003: PPOPN 1
78005: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
78006: LD_EXP 72
78010: PUSH
78011: LD_EXP 99
78015: AND
78016: IFFALSE 78162
78018: GO 78020
78020: DISABLE
78021: LD_INT 0
78023: PPUSH
78024: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78025: LD_ADDR_VAR 0 1
78029: PUSH
78030: LD_INT 22
78032: PUSH
78033: LD_OWVAR 2
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: PUSH
78042: LD_INT 2
78044: PUSH
78045: LD_INT 30
78047: PUSH
78048: LD_INT 0
78050: PUSH
78051: EMPTY
78052: LIST
78053: LIST
78054: PUSH
78055: LD_INT 30
78057: PUSH
78058: LD_INT 1
78060: PUSH
78061: EMPTY
78062: LIST
78063: LIST
78064: PUSH
78065: EMPTY
78066: LIST
78067: LIST
78068: LIST
78069: PUSH
78070: EMPTY
78071: LIST
78072: LIST
78073: PPUSH
78074: CALL_OW 69
78078: ST_TO_ADDR
// if not depot then
78079: LD_VAR 0 1
78083: NOT
78084: IFFALSE 78088
// exit ;
78086: GO 78162
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
78088: LD_ADDR_VAR 0 2
78092: PUSH
78093: LD_VAR 0 1
78097: PUSH
78098: LD_INT 1
78100: PPUSH
78101: LD_VAR 0 1
78105: PPUSH
78106: CALL_OW 12
78110: ARRAY
78111: PPUSH
78112: CALL_OW 274
78116: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
78117: LD_VAR 0 2
78121: PPUSH
78122: LD_INT 1
78124: PPUSH
78125: LD_INT 0
78127: PPUSH
78128: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
78132: LD_VAR 0 2
78136: PPUSH
78137: LD_INT 2
78139: PPUSH
78140: LD_INT 0
78142: PPUSH
78143: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
78147: LD_VAR 0 2
78151: PPUSH
78152: LD_INT 3
78154: PPUSH
78155: LD_INT 0
78157: PPUSH
78158: CALL_OW 277
// end ;
78162: PPOPN 2
78164: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
78165: LD_EXP 72
78169: PUSH
78170: LD_EXP 100
78174: AND
78175: IFFALSE 78272
78177: GO 78179
78179: DISABLE
78180: LD_INT 0
78182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78183: LD_ADDR_VAR 0 1
78187: PUSH
78188: LD_INT 22
78190: PUSH
78191: LD_OWVAR 2
78195: PUSH
78196: EMPTY
78197: LIST
78198: LIST
78199: PUSH
78200: LD_INT 21
78202: PUSH
78203: LD_INT 1
78205: PUSH
78206: EMPTY
78207: LIST
78208: LIST
78209: PUSH
78210: LD_INT 3
78212: PUSH
78213: LD_INT 23
78215: PUSH
78216: LD_INT 0
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: PUSH
78223: EMPTY
78224: LIST
78225: LIST
78226: PUSH
78227: EMPTY
78228: LIST
78229: LIST
78230: LIST
78231: PPUSH
78232: CALL_OW 69
78236: ST_TO_ADDR
// if not tmp then
78237: LD_VAR 0 1
78241: NOT
78242: IFFALSE 78246
// exit ;
78244: GO 78272
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
78246: LD_VAR 0 1
78250: PUSH
78251: LD_INT 1
78253: PPUSH
78254: LD_VAR 0 1
78258: PPUSH
78259: CALL_OW 12
78263: ARRAY
78264: PPUSH
78265: LD_INT 200
78267: PPUSH
78268: CALL_OW 234
// end ;
78272: PPOPN 1
78274: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
78275: LD_EXP 72
78279: PUSH
78280: LD_EXP 101
78284: AND
78285: IFFALSE 78364
78287: GO 78289
78289: DISABLE
78290: LD_INT 0
78292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
78293: LD_ADDR_VAR 0 1
78297: PUSH
78298: LD_INT 22
78300: PUSH
78301: LD_OWVAR 2
78305: PUSH
78306: EMPTY
78307: LIST
78308: LIST
78309: PUSH
78310: LD_INT 21
78312: PUSH
78313: LD_INT 2
78315: PUSH
78316: EMPTY
78317: LIST
78318: LIST
78319: PUSH
78320: EMPTY
78321: LIST
78322: LIST
78323: PPUSH
78324: CALL_OW 69
78328: ST_TO_ADDR
// if not tmp then
78329: LD_VAR 0 1
78333: NOT
78334: IFFALSE 78338
// exit ;
78336: GO 78364
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
78338: LD_VAR 0 1
78342: PUSH
78343: LD_INT 1
78345: PPUSH
78346: LD_VAR 0 1
78350: PPUSH
78351: CALL_OW 12
78355: ARRAY
78356: PPUSH
78357: LD_INT 60
78359: PPUSH
78360: CALL_OW 234
// end ;
78364: PPOPN 1
78366: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
78367: LD_EXP 72
78371: PUSH
78372: LD_EXP 102
78376: AND
78377: IFFALSE 78476
78379: GO 78381
78381: DISABLE
78382: LD_INT 0
78384: PPUSH
78385: PPUSH
// begin enable ;
78386: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
78387: LD_ADDR_VAR 0 1
78391: PUSH
78392: LD_INT 22
78394: PUSH
78395: LD_OWVAR 2
78399: PUSH
78400: EMPTY
78401: LIST
78402: LIST
78403: PUSH
78404: LD_INT 61
78406: PUSH
78407: EMPTY
78408: LIST
78409: PUSH
78410: LD_INT 33
78412: PUSH
78413: LD_INT 2
78415: PUSH
78416: EMPTY
78417: LIST
78418: LIST
78419: PUSH
78420: EMPTY
78421: LIST
78422: LIST
78423: LIST
78424: PPUSH
78425: CALL_OW 69
78429: ST_TO_ADDR
// if not tmp then
78430: LD_VAR 0 1
78434: NOT
78435: IFFALSE 78439
// exit ;
78437: GO 78476
// for i in tmp do
78439: LD_ADDR_VAR 0 2
78443: PUSH
78444: LD_VAR 0 1
78448: PUSH
78449: FOR_IN
78450: IFFALSE 78474
// if IsControledBy ( i ) then
78452: LD_VAR 0 2
78456: PPUSH
78457: CALL_OW 312
78461: IFFALSE 78472
// ComUnlink ( i ) ;
78463: LD_VAR 0 2
78467: PPUSH
78468: CALL_OW 136
78472: GO 78449
78474: POP
78475: POP
// end ;
78476: PPOPN 2
78478: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
78479: LD_EXP 72
78483: PUSH
78484: LD_EXP 103
78488: AND
78489: IFFALSE 78629
78491: GO 78493
78493: DISABLE
78494: LD_INT 0
78496: PPUSH
78497: PPUSH
// begin ToLua ( displayPowell(); ) ;
78498: LD_STRING displayPowell();
78500: PPUSH
78501: CALL_OW 559
// uc_side := 0 ;
78505: LD_ADDR_OWVAR 20
78509: PUSH
78510: LD_INT 0
78512: ST_TO_ADDR
// uc_nation := 2 ;
78513: LD_ADDR_OWVAR 21
78517: PUSH
78518: LD_INT 2
78520: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
78521: LD_ADDR_OWVAR 37
78525: PUSH
78526: LD_INT 14
78528: ST_TO_ADDR
// vc_engine := engine_siberite ;
78529: LD_ADDR_OWVAR 39
78533: PUSH
78534: LD_INT 3
78536: ST_TO_ADDR
// vc_control := control_apeman ;
78537: LD_ADDR_OWVAR 38
78541: PUSH
78542: LD_INT 5
78544: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
78545: LD_ADDR_OWVAR 40
78549: PUSH
78550: LD_INT 29
78552: ST_TO_ADDR
// un := CreateVehicle ;
78553: LD_ADDR_VAR 0 2
78557: PUSH
78558: CALL_OW 45
78562: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78563: LD_VAR 0 2
78567: PPUSH
78568: LD_INT 1
78570: PPUSH
78571: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
78575: LD_INT 35
78577: PPUSH
78578: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
78582: LD_VAR 0 2
78586: PPUSH
78587: LD_INT 22
78589: PUSH
78590: LD_OWVAR 2
78594: PUSH
78595: EMPTY
78596: LIST
78597: LIST
78598: PPUSH
78599: CALL_OW 69
78603: PPUSH
78604: LD_VAR 0 2
78608: PPUSH
78609: CALL_OW 74
78613: PPUSH
78614: CALL_OW 115
// until IsDead ( un ) ;
78618: LD_VAR 0 2
78622: PPUSH
78623: CALL_OW 301
78627: IFFALSE 78575
// end ;
78629: PPOPN 2
78631: END
// every 0 0$1 trigger StreamModeActive and sStu do
78632: LD_EXP 72
78636: PUSH
78637: LD_EXP 111
78641: AND
78642: IFFALSE 78658
78644: GO 78646
78646: DISABLE
// begin ToLua ( displayStucuk(); ) ;
78647: LD_STRING displayStucuk();
78649: PPUSH
78650: CALL_OW 559
// ResetFog ;
78654: CALL_OW 335
// end ;
78658: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
78659: LD_EXP 72
78663: PUSH
78664: LD_EXP 104
78668: AND
78669: IFFALSE 78810
78671: GO 78673
78673: DISABLE
78674: LD_INT 0
78676: PPUSH
78677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78678: LD_ADDR_VAR 0 2
78682: PUSH
78683: LD_INT 22
78685: PUSH
78686: LD_OWVAR 2
78690: PUSH
78691: EMPTY
78692: LIST
78693: LIST
78694: PUSH
78695: LD_INT 21
78697: PUSH
78698: LD_INT 1
78700: PUSH
78701: EMPTY
78702: LIST
78703: LIST
78704: PUSH
78705: EMPTY
78706: LIST
78707: LIST
78708: PPUSH
78709: CALL_OW 69
78713: ST_TO_ADDR
// if not tmp then
78714: LD_VAR 0 2
78718: NOT
78719: IFFALSE 78723
// exit ;
78721: GO 78810
// un := tmp [ rand ( 1 , tmp ) ] ;
78723: LD_ADDR_VAR 0 1
78727: PUSH
78728: LD_VAR 0 2
78732: PUSH
78733: LD_INT 1
78735: PPUSH
78736: LD_VAR 0 2
78740: PPUSH
78741: CALL_OW 12
78745: ARRAY
78746: ST_TO_ADDR
// SetSide ( un , 0 ) ;
78747: LD_VAR 0 1
78751: PPUSH
78752: LD_INT 0
78754: PPUSH
78755: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
78759: LD_VAR 0 1
78763: PPUSH
78764: LD_OWVAR 3
78768: PUSH
78769: LD_VAR 0 1
78773: DIFF
78774: PPUSH
78775: LD_VAR 0 1
78779: PPUSH
78780: CALL_OW 74
78784: PPUSH
78785: CALL_OW 115
// wait ( 0 0$20 ) ;
78789: LD_INT 700
78791: PPUSH
78792: CALL_OW 67
// SetSide ( un , your_side ) ;
78796: LD_VAR 0 1
78800: PPUSH
78801: LD_OWVAR 2
78805: PPUSH
78806: CALL_OW 235
// end ;
78810: PPOPN 2
78812: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
78813: LD_EXP 72
78817: PUSH
78818: LD_EXP 105
78822: AND
78823: IFFALSE 78929
78825: GO 78827
78827: DISABLE
78828: LD_INT 0
78830: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78831: LD_ADDR_VAR 0 1
78835: PUSH
78836: LD_INT 22
78838: PUSH
78839: LD_OWVAR 2
78843: PUSH
78844: EMPTY
78845: LIST
78846: LIST
78847: PUSH
78848: LD_INT 2
78850: PUSH
78851: LD_INT 30
78853: PUSH
78854: LD_INT 0
78856: PUSH
78857: EMPTY
78858: LIST
78859: LIST
78860: PUSH
78861: LD_INT 30
78863: PUSH
78864: LD_INT 1
78866: PUSH
78867: EMPTY
78868: LIST
78869: LIST
78870: PUSH
78871: EMPTY
78872: LIST
78873: LIST
78874: LIST
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PPUSH
78880: CALL_OW 69
78884: ST_TO_ADDR
// if not depot then
78885: LD_VAR 0 1
78889: NOT
78890: IFFALSE 78894
// exit ;
78892: GO 78929
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
78894: LD_VAR 0 1
78898: PUSH
78899: LD_INT 1
78901: ARRAY
78902: PPUSH
78903: CALL_OW 250
78907: PPUSH
78908: LD_VAR 0 1
78912: PUSH
78913: LD_INT 1
78915: ARRAY
78916: PPUSH
78917: CALL_OW 251
78921: PPUSH
78922: LD_INT 70
78924: PPUSH
78925: CALL_OW 495
// end ;
78929: PPOPN 1
78931: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
78932: LD_EXP 72
78936: PUSH
78937: LD_EXP 106
78941: AND
78942: IFFALSE 79153
78944: GO 78946
78946: DISABLE
78947: LD_INT 0
78949: PPUSH
78950: PPUSH
78951: PPUSH
78952: PPUSH
78953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78954: LD_ADDR_VAR 0 5
78958: PUSH
78959: LD_INT 22
78961: PUSH
78962: LD_OWVAR 2
78966: PUSH
78967: EMPTY
78968: LIST
78969: LIST
78970: PUSH
78971: LD_INT 21
78973: PUSH
78974: LD_INT 1
78976: PUSH
78977: EMPTY
78978: LIST
78979: LIST
78980: PUSH
78981: EMPTY
78982: LIST
78983: LIST
78984: PPUSH
78985: CALL_OW 69
78989: ST_TO_ADDR
// if not tmp then
78990: LD_VAR 0 5
78994: NOT
78995: IFFALSE 78999
// exit ;
78997: GO 79153
// for i in tmp do
78999: LD_ADDR_VAR 0 1
79003: PUSH
79004: LD_VAR 0 5
79008: PUSH
79009: FOR_IN
79010: IFFALSE 79151
// begin d := rand ( 0 , 5 ) ;
79012: LD_ADDR_VAR 0 4
79016: PUSH
79017: LD_INT 0
79019: PPUSH
79020: LD_INT 5
79022: PPUSH
79023: CALL_OW 12
79027: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
79028: LD_ADDR_VAR 0 2
79032: PUSH
79033: LD_VAR 0 1
79037: PPUSH
79038: CALL_OW 250
79042: PPUSH
79043: LD_VAR 0 4
79047: PPUSH
79048: LD_INT 3
79050: PPUSH
79051: LD_INT 12
79053: PPUSH
79054: CALL_OW 12
79058: PPUSH
79059: CALL_OW 272
79063: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
79064: LD_ADDR_VAR 0 3
79068: PUSH
79069: LD_VAR 0 1
79073: PPUSH
79074: CALL_OW 251
79078: PPUSH
79079: LD_VAR 0 4
79083: PPUSH
79084: LD_INT 3
79086: PPUSH
79087: LD_INT 12
79089: PPUSH
79090: CALL_OW 12
79094: PPUSH
79095: CALL_OW 273
79099: ST_TO_ADDR
// if ValidHex ( x , y ) then
79100: LD_VAR 0 2
79104: PPUSH
79105: LD_VAR 0 3
79109: PPUSH
79110: CALL_OW 488
79114: IFFALSE 79149
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
79116: LD_VAR 0 1
79120: PPUSH
79121: LD_VAR 0 2
79125: PPUSH
79126: LD_VAR 0 3
79130: PPUSH
79131: LD_INT 3
79133: PPUSH
79134: LD_INT 6
79136: PPUSH
79137: CALL_OW 12
79141: PPUSH
79142: LD_INT 1
79144: PPUSH
79145: CALL_OW 483
// end ;
79149: GO 79009
79151: POP
79152: POP
// end ;
79153: PPOPN 5
79155: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
79156: LD_EXP 72
79160: PUSH
79161: LD_EXP 107
79165: AND
79166: IFFALSE 79260
79168: GO 79170
79170: DISABLE
79171: LD_INT 0
79173: PPUSH
79174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
79175: LD_ADDR_VAR 0 2
79179: PUSH
79180: LD_INT 22
79182: PUSH
79183: LD_OWVAR 2
79187: PUSH
79188: EMPTY
79189: LIST
79190: LIST
79191: PUSH
79192: LD_INT 32
79194: PUSH
79195: LD_INT 1
79197: PUSH
79198: EMPTY
79199: LIST
79200: LIST
79201: PUSH
79202: LD_INT 21
79204: PUSH
79205: LD_INT 2
79207: PUSH
79208: EMPTY
79209: LIST
79210: LIST
79211: PUSH
79212: EMPTY
79213: LIST
79214: LIST
79215: LIST
79216: PPUSH
79217: CALL_OW 69
79221: ST_TO_ADDR
// if not tmp then
79222: LD_VAR 0 2
79226: NOT
79227: IFFALSE 79231
// exit ;
79229: GO 79260
// for i in tmp do
79231: LD_ADDR_VAR 0 1
79235: PUSH
79236: LD_VAR 0 2
79240: PUSH
79241: FOR_IN
79242: IFFALSE 79258
// SetFuel ( i , 0 ) ;
79244: LD_VAR 0 1
79248: PPUSH
79249: LD_INT 0
79251: PPUSH
79252: CALL_OW 240
79256: GO 79241
79258: POP
79259: POP
// end ;
79260: PPOPN 2
79262: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
79263: LD_EXP 72
79267: PUSH
79268: LD_EXP 108
79272: AND
79273: IFFALSE 79339
79275: GO 79277
79277: DISABLE
79278: LD_INT 0
79280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79281: LD_ADDR_VAR 0 1
79285: PUSH
79286: LD_INT 22
79288: PUSH
79289: LD_OWVAR 2
79293: PUSH
79294: EMPTY
79295: LIST
79296: LIST
79297: PUSH
79298: LD_INT 30
79300: PUSH
79301: LD_INT 29
79303: PUSH
79304: EMPTY
79305: LIST
79306: LIST
79307: PUSH
79308: EMPTY
79309: LIST
79310: LIST
79311: PPUSH
79312: CALL_OW 69
79316: ST_TO_ADDR
// if not tmp then
79317: LD_VAR 0 1
79321: NOT
79322: IFFALSE 79326
// exit ;
79324: GO 79339
// DestroyUnit ( tmp [ 1 ] ) ;
79326: LD_VAR 0 1
79330: PUSH
79331: LD_INT 1
79333: ARRAY
79334: PPUSH
79335: CALL_OW 65
// end ;
79339: PPOPN 1
79341: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
79342: LD_EXP 72
79346: PUSH
79347: LD_EXP 110
79351: AND
79352: IFFALSE 79481
79354: GO 79356
79356: DISABLE
79357: LD_INT 0
79359: PPUSH
// begin uc_side := 0 ;
79360: LD_ADDR_OWVAR 20
79364: PUSH
79365: LD_INT 0
79367: ST_TO_ADDR
// uc_nation := nation_arabian ;
79368: LD_ADDR_OWVAR 21
79372: PUSH
79373: LD_INT 2
79375: ST_TO_ADDR
// hc_gallery :=  ;
79376: LD_ADDR_OWVAR 33
79380: PUSH
79381: LD_STRING 
79383: ST_TO_ADDR
// hc_name :=  ;
79384: LD_ADDR_OWVAR 26
79388: PUSH
79389: LD_STRING 
79391: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
79392: LD_INT 1
79394: PPUSH
79395: LD_INT 11
79397: PPUSH
79398: LD_INT 10
79400: PPUSH
79401: CALL_OW 380
// un := CreateHuman ;
79405: LD_ADDR_VAR 0 1
79409: PUSH
79410: CALL_OW 44
79414: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79415: LD_VAR 0 1
79419: PPUSH
79420: LD_INT 1
79422: PPUSH
79423: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
79427: LD_INT 35
79429: PPUSH
79430: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
79434: LD_VAR 0 1
79438: PPUSH
79439: LD_INT 22
79441: PUSH
79442: LD_OWVAR 2
79446: PUSH
79447: EMPTY
79448: LIST
79449: LIST
79450: PPUSH
79451: CALL_OW 69
79455: PPUSH
79456: LD_VAR 0 1
79460: PPUSH
79461: CALL_OW 74
79465: PPUSH
79466: CALL_OW 115
// until IsDead ( un ) ;
79470: LD_VAR 0 1
79474: PPUSH
79475: CALL_OW 301
79479: IFFALSE 79427
// end ;
79481: PPOPN 1
79483: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
79484: LD_EXP 72
79488: PUSH
79489: LD_EXP 112
79493: AND
79494: IFFALSE 79506
79496: GO 79498
79498: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
79499: LD_STRING earthquake(getX(game), 0, 32)
79501: PPUSH
79502: CALL_OW 559
79506: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
79507: LD_EXP 72
79511: PUSH
79512: LD_EXP 113
79516: AND
79517: IFFALSE 79608
79519: GO 79521
79521: DISABLE
79522: LD_INT 0
79524: PPUSH
// begin enable ;
79525: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
79526: LD_ADDR_VAR 0 1
79530: PUSH
79531: LD_INT 22
79533: PUSH
79534: LD_OWVAR 2
79538: PUSH
79539: EMPTY
79540: LIST
79541: LIST
79542: PUSH
79543: LD_INT 21
79545: PUSH
79546: LD_INT 2
79548: PUSH
79549: EMPTY
79550: LIST
79551: LIST
79552: PUSH
79553: LD_INT 33
79555: PUSH
79556: LD_INT 3
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PUSH
79563: EMPTY
79564: LIST
79565: LIST
79566: LIST
79567: PPUSH
79568: CALL_OW 69
79572: ST_TO_ADDR
// if not tmp then
79573: LD_VAR 0 1
79577: NOT
79578: IFFALSE 79582
// exit ;
79580: GO 79608
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
79582: LD_VAR 0 1
79586: PUSH
79587: LD_INT 1
79589: PPUSH
79590: LD_VAR 0 1
79594: PPUSH
79595: CALL_OW 12
79599: ARRAY
79600: PPUSH
79601: LD_INT 1
79603: PPUSH
79604: CALL_OW 234
// end ;
79608: PPOPN 1
79610: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
79611: LD_EXP 72
79615: PUSH
79616: LD_EXP 114
79620: AND
79621: IFFALSE 79762
79623: GO 79625
79625: DISABLE
79626: LD_INT 0
79628: PPUSH
79629: PPUSH
79630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79631: LD_ADDR_VAR 0 3
79635: PUSH
79636: LD_INT 22
79638: PUSH
79639: LD_OWVAR 2
79643: PUSH
79644: EMPTY
79645: LIST
79646: LIST
79647: PUSH
79648: LD_INT 25
79650: PUSH
79651: LD_INT 1
79653: PUSH
79654: EMPTY
79655: LIST
79656: LIST
79657: PUSH
79658: EMPTY
79659: LIST
79660: LIST
79661: PPUSH
79662: CALL_OW 69
79666: ST_TO_ADDR
// if not tmp then
79667: LD_VAR 0 3
79671: NOT
79672: IFFALSE 79676
// exit ;
79674: GO 79762
// un := tmp [ rand ( 1 , tmp ) ] ;
79676: LD_ADDR_VAR 0 2
79680: PUSH
79681: LD_VAR 0 3
79685: PUSH
79686: LD_INT 1
79688: PPUSH
79689: LD_VAR 0 3
79693: PPUSH
79694: CALL_OW 12
79698: ARRAY
79699: ST_TO_ADDR
// if Crawls ( un ) then
79700: LD_VAR 0 2
79704: PPUSH
79705: CALL_OW 318
79709: IFFALSE 79720
// ComWalk ( un ) ;
79711: LD_VAR 0 2
79715: PPUSH
79716: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
79720: LD_VAR 0 2
79724: PPUSH
79725: LD_INT 9
79727: PPUSH
79728: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
79732: LD_INT 28
79734: PPUSH
79735: LD_OWVAR 2
79739: PPUSH
79740: LD_INT 2
79742: PPUSH
79743: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
79747: LD_INT 29
79749: PPUSH
79750: LD_OWVAR 2
79754: PPUSH
79755: LD_INT 2
79757: PPUSH
79758: CALL_OW 322
// end ;
79762: PPOPN 3
79764: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
79765: LD_EXP 72
79769: PUSH
79770: LD_EXP 115
79774: AND
79775: IFFALSE 79886
79777: GO 79779
79779: DISABLE
79780: LD_INT 0
79782: PPUSH
79783: PPUSH
79784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79785: LD_ADDR_VAR 0 3
79789: PUSH
79790: LD_INT 22
79792: PUSH
79793: LD_OWVAR 2
79797: PUSH
79798: EMPTY
79799: LIST
79800: LIST
79801: PUSH
79802: LD_INT 25
79804: PUSH
79805: LD_INT 1
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: PUSH
79812: EMPTY
79813: LIST
79814: LIST
79815: PPUSH
79816: CALL_OW 69
79820: ST_TO_ADDR
// if not tmp then
79821: LD_VAR 0 3
79825: NOT
79826: IFFALSE 79830
// exit ;
79828: GO 79886
// un := tmp [ rand ( 1 , tmp ) ] ;
79830: LD_ADDR_VAR 0 2
79834: PUSH
79835: LD_VAR 0 3
79839: PUSH
79840: LD_INT 1
79842: PPUSH
79843: LD_VAR 0 3
79847: PPUSH
79848: CALL_OW 12
79852: ARRAY
79853: ST_TO_ADDR
// if Crawls ( un ) then
79854: LD_VAR 0 2
79858: PPUSH
79859: CALL_OW 318
79863: IFFALSE 79874
// ComWalk ( un ) ;
79865: LD_VAR 0 2
79869: PPUSH
79870: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79874: LD_VAR 0 2
79878: PPUSH
79879: LD_INT 8
79881: PPUSH
79882: CALL_OW 336
// end ;
79886: PPOPN 3
79888: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
79889: LD_EXP 72
79893: PUSH
79894: LD_EXP 116
79898: AND
79899: IFFALSE 80043
79901: GO 79903
79903: DISABLE
79904: LD_INT 0
79906: PPUSH
79907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
79908: LD_ADDR_VAR 0 2
79912: PUSH
79913: LD_INT 22
79915: PUSH
79916: LD_OWVAR 2
79920: PUSH
79921: EMPTY
79922: LIST
79923: LIST
79924: PUSH
79925: LD_INT 21
79927: PUSH
79928: LD_INT 2
79930: PUSH
79931: EMPTY
79932: LIST
79933: LIST
79934: PUSH
79935: LD_INT 2
79937: PUSH
79938: LD_INT 34
79940: PUSH
79941: LD_INT 12
79943: PUSH
79944: EMPTY
79945: LIST
79946: LIST
79947: PUSH
79948: LD_INT 34
79950: PUSH
79951: LD_INT 51
79953: PUSH
79954: EMPTY
79955: LIST
79956: LIST
79957: PUSH
79958: LD_INT 34
79960: PUSH
79961: LD_INT 32
79963: PUSH
79964: EMPTY
79965: LIST
79966: LIST
79967: PUSH
79968: EMPTY
79969: LIST
79970: LIST
79971: LIST
79972: LIST
79973: PUSH
79974: EMPTY
79975: LIST
79976: LIST
79977: LIST
79978: PPUSH
79979: CALL_OW 69
79983: ST_TO_ADDR
// if not tmp then
79984: LD_VAR 0 2
79988: NOT
79989: IFFALSE 79993
// exit ;
79991: GO 80043
// for i in tmp do
79993: LD_ADDR_VAR 0 1
79997: PUSH
79998: LD_VAR 0 2
80002: PUSH
80003: FOR_IN
80004: IFFALSE 80041
// if GetCargo ( i , mat_artifact ) = 0 then
80006: LD_VAR 0 1
80010: PPUSH
80011: LD_INT 4
80013: PPUSH
80014: CALL_OW 289
80018: PUSH
80019: LD_INT 0
80021: EQUAL
80022: IFFALSE 80039
// SetCargo ( i , mat_siberit , 100 ) ;
80024: LD_VAR 0 1
80028: PPUSH
80029: LD_INT 3
80031: PPUSH
80032: LD_INT 100
80034: PPUSH
80035: CALL_OW 290
80039: GO 80003
80041: POP
80042: POP
// end ;
80043: PPOPN 2
80045: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
80046: LD_EXP 72
80050: PUSH
80051: LD_EXP 117
80055: AND
80056: IFFALSE 80239
80058: GO 80060
80060: DISABLE
80061: LD_INT 0
80063: PPUSH
80064: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80065: LD_ADDR_VAR 0 2
80069: PUSH
80070: LD_INT 22
80072: PUSH
80073: LD_OWVAR 2
80077: PUSH
80078: EMPTY
80079: LIST
80080: LIST
80081: PPUSH
80082: CALL_OW 69
80086: ST_TO_ADDR
// if not tmp then
80087: LD_VAR 0 2
80091: NOT
80092: IFFALSE 80096
// exit ;
80094: GO 80239
// for i := 1 to 2 do
80096: LD_ADDR_VAR 0 1
80100: PUSH
80101: DOUBLE
80102: LD_INT 1
80104: DEC
80105: ST_TO_ADDR
80106: LD_INT 2
80108: PUSH
80109: FOR_TO
80110: IFFALSE 80237
// begin uc_side := your_side ;
80112: LD_ADDR_OWVAR 20
80116: PUSH
80117: LD_OWVAR 2
80121: ST_TO_ADDR
// uc_nation := nation_american ;
80122: LD_ADDR_OWVAR 21
80126: PUSH
80127: LD_INT 1
80129: ST_TO_ADDR
// vc_chassis := us_morphling ;
80130: LD_ADDR_OWVAR 37
80134: PUSH
80135: LD_INT 5
80137: ST_TO_ADDR
// vc_engine := engine_siberite ;
80138: LD_ADDR_OWVAR 39
80142: PUSH
80143: LD_INT 3
80145: ST_TO_ADDR
// vc_control := control_computer ;
80146: LD_ADDR_OWVAR 38
80150: PUSH
80151: LD_INT 3
80153: ST_TO_ADDR
// vc_weapon := us_double_laser ;
80154: LD_ADDR_OWVAR 40
80158: PUSH
80159: LD_INT 10
80161: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
80162: LD_VAR 0 2
80166: PUSH
80167: LD_INT 1
80169: ARRAY
80170: PPUSH
80171: CALL_OW 310
80175: NOT
80176: IFFALSE 80223
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
80178: CALL_OW 45
80182: PPUSH
80183: LD_VAR 0 2
80187: PUSH
80188: LD_INT 1
80190: ARRAY
80191: PPUSH
80192: CALL_OW 250
80196: PPUSH
80197: LD_VAR 0 2
80201: PUSH
80202: LD_INT 1
80204: ARRAY
80205: PPUSH
80206: CALL_OW 251
80210: PPUSH
80211: LD_INT 12
80213: PPUSH
80214: LD_INT 1
80216: PPUSH
80217: CALL_OW 50
80221: GO 80235
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
80223: CALL_OW 45
80227: PPUSH
80228: LD_INT 1
80230: PPUSH
80231: CALL_OW 51
// end ;
80235: GO 80109
80237: POP
80238: POP
// end ;
80239: PPOPN 2
80241: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
80242: LD_EXP 72
80246: PUSH
80247: LD_EXP 118
80251: AND
80252: IFFALSE 80474
80254: GO 80256
80256: DISABLE
80257: LD_INT 0
80259: PPUSH
80260: PPUSH
80261: PPUSH
80262: PPUSH
80263: PPUSH
80264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80265: LD_ADDR_VAR 0 6
80269: PUSH
80270: LD_INT 22
80272: PUSH
80273: LD_OWVAR 2
80277: PUSH
80278: EMPTY
80279: LIST
80280: LIST
80281: PUSH
80282: LD_INT 21
80284: PUSH
80285: LD_INT 1
80287: PUSH
80288: EMPTY
80289: LIST
80290: LIST
80291: PUSH
80292: LD_INT 3
80294: PUSH
80295: LD_INT 23
80297: PUSH
80298: LD_INT 0
80300: PUSH
80301: EMPTY
80302: LIST
80303: LIST
80304: PUSH
80305: EMPTY
80306: LIST
80307: LIST
80308: PUSH
80309: EMPTY
80310: LIST
80311: LIST
80312: LIST
80313: PPUSH
80314: CALL_OW 69
80318: ST_TO_ADDR
// if not tmp then
80319: LD_VAR 0 6
80323: NOT
80324: IFFALSE 80328
// exit ;
80326: GO 80474
// s1 := rand ( 1 , 4 ) ;
80328: LD_ADDR_VAR 0 2
80332: PUSH
80333: LD_INT 1
80335: PPUSH
80336: LD_INT 4
80338: PPUSH
80339: CALL_OW 12
80343: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
80344: LD_ADDR_VAR 0 4
80348: PUSH
80349: LD_VAR 0 6
80353: PUSH
80354: LD_INT 1
80356: ARRAY
80357: PPUSH
80358: LD_VAR 0 2
80362: PPUSH
80363: CALL_OW 259
80367: ST_TO_ADDR
// if s1 = 1 then
80368: LD_VAR 0 2
80372: PUSH
80373: LD_INT 1
80375: EQUAL
80376: IFFALSE 80396
// s2 := rand ( 2 , 4 ) else
80378: LD_ADDR_VAR 0 3
80382: PUSH
80383: LD_INT 2
80385: PPUSH
80386: LD_INT 4
80388: PPUSH
80389: CALL_OW 12
80393: ST_TO_ADDR
80394: GO 80404
// s2 := 1 ;
80396: LD_ADDR_VAR 0 3
80400: PUSH
80401: LD_INT 1
80403: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
80404: LD_ADDR_VAR 0 5
80408: PUSH
80409: LD_VAR 0 6
80413: PUSH
80414: LD_INT 1
80416: ARRAY
80417: PPUSH
80418: LD_VAR 0 3
80422: PPUSH
80423: CALL_OW 259
80427: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
80428: LD_VAR 0 6
80432: PUSH
80433: LD_INT 1
80435: ARRAY
80436: PPUSH
80437: LD_VAR 0 2
80441: PPUSH
80442: LD_VAR 0 5
80446: PPUSH
80447: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
80451: LD_VAR 0 6
80455: PUSH
80456: LD_INT 1
80458: ARRAY
80459: PPUSH
80460: LD_VAR 0 3
80464: PPUSH
80465: LD_VAR 0 4
80469: PPUSH
80470: CALL_OW 237
// end ;
80474: PPOPN 6
80476: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
80477: LD_EXP 72
80481: PUSH
80482: LD_EXP 119
80486: AND
80487: IFFALSE 80566
80489: GO 80491
80491: DISABLE
80492: LD_INT 0
80494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
80495: LD_ADDR_VAR 0 1
80499: PUSH
80500: LD_INT 22
80502: PUSH
80503: LD_OWVAR 2
80507: PUSH
80508: EMPTY
80509: LIST
80510: LIST
80511: PUSH
80512: LD_INT 30
80514: PUSH
80515: LD_INT 3
80517: PUSH
80518: EMPTY
80519: LIST
80520: LIST
80521: PUSH
80522: EMPTY
80523: LIST
80524: LIST
80525: PPUSH
80526: CALL_OW 69
80530: ST_TO_ADDR
// if not tmp then
80531: LD_VAR 0 1
80535: NOT
80536: IFFALSE 80540
// exit ;
80538: GO 80566
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80540: LD_VAR 0 1
80544: PUSH
80545: LD_INT 1
80547: PPUSH
80548: LD_VAR 0 1
80552: PPUSH
80553: CALL_OW 12
80557: ARRAY
80558: PPUSH
80559: LD_INT 1
80561: PPUSH
80562: CALL_OW 234
// end ;
80566: PPOPN 1
80568: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
80569: LD_EXP 72
80573: PUSH
80574: LD_EXP 120
80578: AND
80579: IFFALSE 80691
80581: GO 80583
80583: DISABLE
80584: LD_INT 0
80586: PPUSH
80587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
80588: LD_ADDR_VAR 0 2
80592: PUSH
80593: LD_INT 22
80595: PUSH
80596: LD_OWVAR 2
80600: PUSH
80601: EMPTY
80602: LIST
80603: LIST
80604: PUSH
80605: LD_INT 2
80607: PUSH
80608: LD_INT 30
80610: PUSH
80611: LD_INT 27
80613: PUSH
80614: EMPTY
80615: LIST
80616: LIST
80617: PUSH
80618: LD_INT 30
80620: PUSH
80621: LD_INT 26
80623: PUSH
80624: EMPTY
80625: LIST
80626: LIST
80627: PUSH
80628: LD_INT 30
80630: PUSH
80631: LD_INT 28
80633: PUSH
80634: EMPTY
80635: LIST
80636: LIST
80637: PUSH
80638: EMPTY
80639: LIST
80640: LIST
80641: LIST
80642: LIST
80643: PUSH
80644: EMPTY
80645: LIST
80646: LIST
80647: PPUSH
80648: CALL_OW 69
80652: ST_TO_ADDR
// if not tmp then
80653: LD_VAR 0 2
80657: NOT
80658: IFFALSE 80662
// exit ;
80660: GO 80691
// for i in tmp do
80662: LD_ADDR_VAR 0 1
80666: PUSH
80667: LD_VAR 0 2
80671: PUSH
80672: FOR_IN
80673: IFFALSE 80689
// SetLives ( i , 1 ) ;
80675: LD_VAR 0 1
80679: PPUSH
80680: LD_INT 1
80682: PPUSH
80683: CALL_OW 234
80687: GO 80672
80689: POP
80690: POP
// end ;
80691: PPOPN 2
80693: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
80694: LD_EXP 72
80698: PUSH
80699: LD_EXP 121
80703: AND
80704: IFFALSE 80991
80706: GO 80708
80708: DISABLE
80709: LD_INT 0
80711: PPUSH
80712: PPUSH
80713: PPUSH
// begin i := rand ( 1 , 7 ) ;
80714: LD_ADDR_VAR 0 1
80718: PUSH
80719: LD_INT 1
80721: PPUSH
80722: LD_INT 7
80724: PPUSH
80725: CALL_OW 12
80729: ST_TO_ADDR
// case i of 1 :
80730: LD_VAR 0 1
80734: PUSH
80735: LD_INT 1
80737: DOUBLE
80738: EQUAL
80739: IFTRUE 80743
80741: GO 80753
80743: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
80744: LD_STRING earthquake(getX(game), 0, 32)
80746: PPUSH
80747: CALL_OW 559
80751: GO 80991
80753: LD_INT 2
80755: DOUBLE
80756: EQUAL
80757: IFTRUE 80761
80759: GO 80775
80761: POP
// begin ToLua ( displayStucuk(); ) ;
80762: LD_STRING displayStucuk();
80764: PPUSH
80765: CALL_OW 559
// ResetFog ;
80769: CALL_OW 335
// end ; 3 :
80773: GO 80991
80775: LD_INT 3
80777: DOUBLE
80778: EQUAL
80779: IFTRUE 80783
80781: GO 80887
80783: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80784: LD_ADDR_VAR 0 2
80788: PUSH
80789: LD_INT 22
80791: PUSH
80792: LD_OWVAR 2
80796: PUSH
80797: EMPTY
80798: LIST
80799: LIST
80800: PUSH
80801: LD_INT 25
80803: PUSH
80804: LD_INT 1
80806: PUSH
80807: EMPTY
80808: LIST
80809: LIST
80810: PUSH
80811: EMPTY
80812: LIST
80813: LIST
80814: PPUSH
80815: CALL_OW 69
80819: ST_TO_ADDR
// if not tmp then
80820: LD_VAR 0 2
80824: NOT
80825: IFFALSE 80829
// exit ;
80827: GO 80991
// un := tmp [ rand ( 1 , tmp ) ] ;
80829: LD_ADDR_VAR 0 3
80833: PUSH
80834: LD_VAR 0 2
80838: PUSH
80839: LD_INT 1
80841: PPUSH
80842: LD_VAR 0 2
80846: PPUSH
80847: CALL_OW 12
80851: ARRAY
80852: ST_TO_ADDR
// if Crawls ( un ) then
80853: LD_VAR 0 3
80857: PPUSH
80858: CALL_OW 318
80862: IFFALSE 80873
// ComWalk ( un ) ;
80864: LD_VAR 0 3
80868: PPUSH
80869: CALL_OW 138
// SetClass ( un , class_mortar ) ;
80873: LD_VAR 0 3
80877: PPUSH
80878: LD_INT 8
80880: PPUSH
80881: CALL_OW 336
// end ; 4 :
80885: GO 80991
80887: LD_INT 4
80889: DOUBLE
80890: EQUAL
80891: IFTRUE 80895
80893: GO 80969
80895: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80896: LD_ADDR_VAR 0 2
80900: PUSH
80901: LD_INT 22
80903: PUSH
80904: LD_OWVAR 2
80908: PUSH
80909: EMPTY
80910: LIST
80911: LIST
80912: PUSH
80913: LD_INT 30
80915: PUSH
80916: LD_INT 29
80918: PUSH
80919: EMPTY
80920: LIST
80921: LIST
80922: PUSH
80923: EMPTY
80924: LIST
80925: LIST
80926: PPUSH
80927: CALL_OW 69
80931: ST_TO_ADDR
// if not tmp then
80932: LD_VAR 0 2
80936: NOT
80937: IFFALSE 80941
// exit ;
80939: GO 80991
// CenterNowOnUnits ( tmp [ 1 ] ) ;
80941: LD_VAR 0 2
80945: PUSH
80946: LD_INT 1
80948: ARRAY
80949: PPUSH
80950: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
80954: LD_VAR 0 2
80958: PUSH
80959: LD_INT 1
80961: ARRAY
80962: PPUSH
80963: CALL_OW 65
// end ; 5 .. 7 :
80967: GO 80991
80969: LD_INT 5
80971: DOUBLE
80972: GREATEREQUAL
80973: IFFALSE 80981
80975: LD_INT 7
80977: DOUBLE
80978: LESSEQUAL
80979: IFTRUE 80983
80981: GO 80990
80983: POP
// StreamSibBomb ; end ;
80984: CALL 77228 0 0
80988: GO 80991
80990: POP
// end ;
80991: PPOPN 3
80993: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
80994: LD_EXP 72
80998: PUSH
80999: LD_EXP 122
81003: AND
81004: IFFALSE 81160
81006: GO 81008
81008: DISABLE
81009: LD_INT 0
81011: PPUSH
81012: PPUSH
81013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
81014: LD_ADDR_VAR 0 2
81018: PUSH
81019: LD_INT 81
81021: PUSH
81022: LD_OWVAR 2
81026: PUSH
81027: EMPTY
81028: LIST
81029: LIST
81030: PUSH
81031: LD_INT 2
81033: PUSH
81034: LD_INT 21
81036: PUSH
81037: LD_INT 1
81039: PUSH
81040: EMPTY
81041: LIST
81042: LIST
81043: PUSH
81044: LD_INT 21
81046: PUSH
81047: LD_INT 2
81049: PUSH
81050: EMPTY
81051: LIST
81052: LIST
81053: PUSH
81054: EMPTY
81055: LIST
81056: LIST
81057: LIST
81058: PUSH
81059: EMPTY
81060: LIST
81061: LIST
81062: PPUSH
81063: CALL_OW 69
81067: ST_TO_ADDR
// if not tmp then
81068: LD_VAR 0 2
81072: NOT
81073: IFFALSE 81077
// exit ;
81075: GO 81160
// p := 0 ;
81077: LD_ADDR_VAR 0 3
81081: PUSH
81082: LD_INT 0
81084: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81085: LD_INT 35
81087: PPUSH
81088: CALL_OW 67
// p := p + 1 ;
81092: LD_ADDR_VAR 0 3
81096: PUSH
81097: LD_VAR 0 3
81101: PUSH
81102: LD_INT 1
81104: PLUS
81105: ST_TO_ADDR
// for i in tmp do
81106: LD_ADDR_VAR 0 1
81110: PUSH
81111: LD_VAR 0 2
81115: PUSH
81116: FOR_IN
81117: IFFALSE 81148
// if GetLives ( i ) < 1000 then
81119: LD_VAR 0 1
81123: PPUSH
81124: CALL_OW 256
81128: PUSH
81129: LD_INT 1000
81131: LESS
81132: IFFALSE 81146
// SetLives ( i , 1000 ) ;
81134: LD_VAR 0 1
81138: PPUSH
81139: LD_INT 1000
81141: PPUSH
81142: CALL_OW 234
81146: GO 81116
81148: POP
81149: POP
// until p > 20 ;
81150: LD_VAR 0 3
81154: PUSH
81155: LD_INT 20
81157: GREATER
81158: IFFALSE 81085
// end ;
81160: PPOPN 3
81162: END
// every 0 0$1 trigger StreamModeActive and sTime do
81163: LD_EXP 72
81167: PUSH
81168: LD_EXP 123
81172: AND
81173: IFFALSE 81208
81175: GO 81177
81177: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
81178: LD_INT 28
81180: PPUSH
81181: LD_OWVAR 2
81185: PPUSH
81186: LD_INT 2
81188: PPUSH
81189: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
81193: LD_INT 30
81195: PPUSH
81196: LD_OWVAR 2
81200: PPUSH
81201: LD_INT 2
81203: PPUSH
81204: CALL_OW 322
// end ;
81208: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
81209: LD_EXP 72
81213: PUSH
81214: LD_EXP 124
81218: AND
81219: IFFALSE 81340
81221: GO 81223
81223: DISABLE
81224: LD_INT 0
81226: PPUSH
81227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81228: LD_ADDR_VAR 0 2
81232: PUSH
81233: LD_INT 22
81235: PUSH
81236: LD_OWVAR 2
81240: PUSH
81241: EMPTY
81242: LIST
81243: LIST
81244: PUSH
81245: LD_INT 21
81247: PUSH
81248: LD_INT 1
81250: PUSH
81251: EMPTY
81252: LIST
81253: LIST
81254: PUSH
81255: LD_INT 3
81257: PUSH
81258: LD_INT 23
81260: PUSH
81261: LD_INT 0
81263: PUSH
81264: EMPTY
81265: LIST
81266: LIST
81267: PUSH
81268: EMPTY
81269: LIST
81270: LIST
81271: PUSH
81272: EMPTY
81273: LIST
81274: LIST
81275: LIST
81276: PPUSH
81277: CALL_OW 69
81281: ST_TO_ADDR
// if not tmp then
81282: LD_VAR 0 2
81286: NOT
81287: IFFALSE 81291
// exit ;
81289: GO 81340
// for i in tmp do
81291: LD_ADDR_VAR 0 1
81295: PUSH
81296: LD_VAR 0 2
81300: PUSH
81301: FOR_IN
81302: IFFALSE 81338
// begin if Crawls ( i ) then
81304: LD_VAR 0 1
81308: PPUSH
81309: CALL_OW 318
81313: IFFALSE 81324
// ComWalk ( i ) ;
81315: LD_VAR 0 1
81319: PPUSH
81320: CALL_OW 138
// SetClass ( i , 2 ) ;
81324: LD_VAR 0 1
81328: PPUSH
81329: LD_INT 2
81331: PPUSH
81332: CALL_OW 336
// end ;
81336: GO 81301
81338: POP
81339: POP
// end ;
81340: PPOPN 2
81342: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
81343: LD_EXP 72
81347: PUSH
81348: LD_EXP 125
81352: AND
81353: IFFALSE 81641
81355: GO 81357
81357: DISABLE
81358: LD_INT 0
81360: PPUSH
81361: PPUSH
81362: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
81363: LD_OWVAR 2
81367: PPUSH
81368: LD_INT 9
81370: PPUSH
81371: LD_INT 1
81373: PPUSH
81374: LD_INT 1
81376: PPUSH
81377: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
81381: LD_INT 9
81383: PPUSH
81384: LD_OWVAR 2
81388: PPUSH
81389: CALL_OW 343
// uc_side := 9 ;
81393: LD_ADDR_OWVAR 20
81397: PUSH
81398: LD_INT 9
81400: ST_TO_ADDR
// uc_nation := 2 ;
81401: LD_ADDR_OWVAR 21
81405: PUSH
81406: LD_INT 2
81408: ST_TO_ADDR
// hc_name := Dark Warrior ;
81409: LD_ADDR_OWVAR 26
81413: PUSH
81414: LD_STRING Dark Warrior
81416: ST_TO_ADDR
// hc_gallery :=  ;
81417: LD_ADDR_OWVAR 33
81421: PUSH
81422: LD_STRING 
81424: ST_TO_ADDR
// hc_noskilllimit := true ;
81425: LD_ADDR_OWVAR 76
81429: PUSH
81430: LD_INT 1
81432: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
81433: LD_ADDR_OWVAR 31
81437: PUSH
81438: LD_INT 30
81440: PUSH
81441: LD_INT 30
81443: PUSH
81444: LD_INT 30
81446: PUSH
81447: LD_INT 30
81449: PUSH
81450: EMPTY
81451: LIST
81452: LIST
81453: LIST
81454: LIST
81455: ST_TO_ADDR
// un := CreateHuman ;
81456: LD_ADDR_VAR 0 3
81460: PUSH
81461: CALL_OW 44
81465: ST_TO_ADDR
// hc_noskilllimit := false ;
81466: LD_ADDR_OWVAR 76
81470: PUSH
81471: LD_INT 0
81473: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81474: LD_VAR 0 3
81478: PPUSH
81479: LD_INT 1
81481: PPUSH
81482: CALL_OW 51
// ToLua ( playRanger() ) ;
81486: LD_STRING playRanger()
81488: PPUSH
81489: CALL_OW 559
// p := 0 ;
81493: LD_ADDR_VAR 0 2
81497: PUSH
81498: LD_INT 0
81500: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81501: LD_INT 35
81503: PPUSH
81504: CALL_OW 67
// p := p + 1 ;
81508: LD_ADDR_VAR 0 2
81512: PUSH
81513: LD_VAR 0 2
81517: PUSH
81518: LD_INT 1
81520: PLUS
81521: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
81522: LD_VAR 0 3
81526: PPUSH
81527: CALL_OW 256
81531: PUSH
81532: LD_INT 1000
81534: LESS
81535: IFFALSE 81549
// SetLives ( un , 1000 ) ;
81537: LD_VAR 0 3
81541: PPUSH
81542: LD_INT 1000
81544: PPUSH
81545: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
81549: LD_VAR 0 3
81553: PPUSH
81554: LD_INT 81
81556: PUSH
81557: LD_OWVAR 2
81561: PUSH
81562: EMPTY
81563: LIST
81564: LIST
81565: PUSH
81566: LD_INT 91
81568: PUSH
81569: LD_VAR 0 3
81573: PUSH
81574: LD_INT 30
81576: PUSH
81577: EMPTY
81578: LIST
81579: LIST
81580: LIST
81581: PUSH
81582: EMPTY
81583: LIST
81584: LIST
81585: PPUSH
81586: CALL_OW 69
81590: PPUSH
81591: LD_VAR 0 3
81595: PPUSH
81596: CALL_OW 74
81600: PPUSH
81601: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
81605: LD_VAR 0 2
81609: PUSH
81610: LD_INT 80
81612: GREATER
81613: PUSH
81614: LD_VAR 0 3
81618: PPUSH
81619: CALL_OW 301
81623: OR
81624: IFFALSE 81501
// if un then
81626: LD_VAR 0 3
81630: IFFALSE 81641
// RemoveUnit ( un ) ;
81632: LD_VAR 0 3
81636: PPUSH
81637: CALL_OW 64
// end ;
81641: PPOPN 3
81643: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
81644: LD_EXP 126
81648: IFFALSE 81764
81650: GO 81652
81652: DISABLE
81653: LD_INT 0
81655: PPUSH
81656: PPUSH
81657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
81658: LD_ADDR_VAR 0 2
81662: PUSH
81663: LD_INT 81
81665: PUSH
81666: LD_OWVAR 2
81670: PUSH
81671: EMPTY
81672: LIST
81673: LIST
81674: PUSH
81675: LD_INT 21
81677: PUSH
81678: LD_INT 1
81680: PUSH
81681: EMPTY
81682: LIST
81683: LIST
81684: PUSH
81685: EMPTY
81686: LIST
81687: LIST
81688: PPUSH
81689: CALL_OW 69
81693: ST_TO_ADDR
// ToLua ( playComputer() ) ;
81694: LD_STRING playComputer()
81696: PPUSH
81697: CALL_OW 559
// if not tmp then
81701: LD_VAR 0 2
81705: NOT
81706: IFFALSE 81710
// exit ;
81708: GO 81764
// for i in tmp do
81710: LD_ADDR_VAR 0 1
81714: PUSH
81715: LD_VAR 0 2
81719: PUSH
81720: FOR_IN
81721: IFFALSE 81762
// for j := 1 to 4 do
81723: LD_ADDR_VAR 0 3
81727: PUSH
81728: DOUBLE
81729: LD_INT 1
81731: DEC
81732: ST_TO_ADDR
81733: LD_INT 4
81735: PUSH
81736: FOR_TO
81737: IFFALSE 81758
// SetSkill ( i , j , 10 ) ;
81739: LD_VAR 0 1
81743: PPUSH
81744: LD_VAR 0 3
81748: PPUSH
81749: LD_INT 10
81751: PPUSH
81752: CALL_OW 237
81756: GO 81736
81758: POP
81759: POP
81760: GO 81720
81762: POP
81763: POP
// end ;
81764: PPOPN 3
81766: END
// every 0 0$1 trigger s30 do var i , tmp ;
81767: LD_EXP 127
81771: IFFALSE 81840
81773: GO 81775
81775: DISABLE
81776: LD_INT 0
81778: PPUSH
81779: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81780: LD_ADDR_VAR 0 2
81784: PUSH
81785: LD_INT 22
81787: PUSH
81788: LD_OWVAR 2
81792: PUSH
81793: EMPTY
81794: LIST
81795: LIST
81796: PPUSH
81797: CALL_OW 69
81801: ST_TO_ADDR
// if not tmp then
81802: LD_VAR 0 2
81806: NOT
81807: IFFALSE 81811
// exit ;
81809: GO 81840
// for i in tmp do
81811: LD_ADDR_VAR 0 1
81815: PUSH
81816: LD_VAR 0 2
81820: PUSH
81821: FOR_IN
81822: IFFALSE 81838
// SetLives ( i , 300 ) ;
81824: LD_VAR 0 1
81828: PPUSH
81829: LD_INT 300
81831: PPUSH
81832: CALL_OW 234
81836: GO 81821
81838: POP
81839: POP
// end ;
81840: PPOPN 2
81842: END
// every 0 0$1 trigger s60 do var i , tmp ;
81843: LD_EXP 128
81847: IFFALSE 81916
81849: GO 81851
81851: DISABLE
81852: LD_INT 0
81854: PPUSH
81855: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81856: LD_ADDR_VAR 0 2
81860: PUSH
81861: LD_INT 22
81863: PUSH
81864: LD_OWVAR 2
81868: PUSH
81869: EMPTY
81870: LIST
81871: LIST
81872: PPUSH
81873: CALL_OW 69
81877: ST_TO_ADDR
// if not tmp then
81878: LD_VAR 0 2
81882: NOT
81883: IFFALSE 81887
// exit ;
81885: GO 81916
// for i in tmp do
81887: LD_ADDR_VAR 0 1
81891: PUSH
81892: LD_VAR 0 2
81896: PUSH
81897: FOR_IN
81898: IFFALSE 81914
// SetLives ( i , 600 ) ;
81900: LD_VAR 0 1
81904: PPUSH
81905: LD_INT 600
81907: PPUSH
81908: CALL_OW 234
81912: GO 81897
81914: POP
81915: POP
// end ;
81916: PPOPN 2
81918: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
81919: LD_INT 0
81921: PPUSH
// case cmd of 301 :
81922: LD_VAR 0 1
81926: PUSH
81927: LD_INT 301
81929: DOUBLE
81930: EQUAL
81931: IFTRUE 81935
81933: GO 81967
81935: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
81936: LD_VAR 0 6
81940: PPUSH
81941: LD_VAR 0 7
81945: PPUSH
81946: LD_VAR 0 8
81950: PPUSH
81951: LD_VAR 0 4
81955: PPUSH
81956: LD_VAR 0 5
81960: PPUSH
81961: CALL 83168 0 5
81965: GO 82088
81967: LD_INT 302
81969: DOUBLE
81970: EQUAL
81971: IFTRUE 81975
81973: GO 82012
81975: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
81976: LD_VAR 0 6
81980: PPUSH
81981: LD_VAR 0 7
81985: PPUSH
81986: LD_VAR 0 8
81990: PPUSH
81991: LD_VAR 0 9
81995: PPUSH
81996: LD_VAR 0 4
82000: PPUSH
82001: LD_VAR 0 5
82005: PPUSH
82006: CALL 83259 0 6
82010: GO 82088
82012: LD_INT 303
82014: DOUBLE
82015: EQUAL
82016: IFTRUE 82020
82018: GO 82057
82020: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
82021: LD_VAR 0 6
82025: PPUSH
82026: LD_VAR 0 7
82030: PPUSH
82031: LD_VAR 0 8
82035: PPUSH
82036: LD_VAR 0 9
82040: PPUSH
82041: LD_VAR 0 4
82045: PPUSH
82046: LD_VAR 0 5
82050: PPUSH
82051: CALL 82093 0 6
82055: GO 82088
82057: LD_INT 304
82059: DOUBLE
82060: EQUAL
82061: IFTRUE 82065
82063: GO 82087
82065: POP
// hHackTeleport ( unit , x , y ) ; end ;
82066: LD_VAR 0 2
82070: PPUSH
82071: LD_VAR 0 4
82075: PPUSH
82076: LD_VAR 0 5
82080: PPUSH
82081: CALL 83852 0 3
82085: GO 82088
82087: POP
// end ;
82088: LD_VAR 0 12
82092: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
82093: LD_INT 0
82095: PPUSH
82096: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
82097: LD_VAR 0 1
82101: PUSH
82102: LD_INT 1
82104: LESS
82105: PUSH
82106: LD_VAR 0 1
82110: PUSH
82111: LD_INT 3
82113: GREATER
82114: OR
82115: PUSH
82116: LD_VAR 0 5
82120: PPUSH
82121: LD_VAR 0 6
82125: PPUSH
82126: CALL_OW 428
82130: OR
82131: IFFALSE 82135
// exit ;
82133: GO 82855
// uc_side := your_side ;
82135: LD_ADDR_OWVAR 20
82139: PUSH
82140: LD_OWVAR 2
82144: ST_TO_ADDR
// uc_nation := nation ;
82145: LD_ADDR_OWVAR 21
82149: PUSH
82150: LD_VAR 0 1
82154: ST_TO_ADDR
// bc_level = 1 ;
82155: LD_ADDR_OWVAR 43
82159: PUSH
82160: LD_INT 1
82162: ST_TO_ADDR
// case btype of 1 :
82163: LD_VAR 0 2
82167: PUSH
82168: LD_INT 1
82170: DOUBLE
82171: EQUAL
82172: IFTRUE 82176
82174: GO 82187
82176: POP
// bc_type := b_depot ; 2 :
82177: LD_ADDR_OWVAR 42
82181: PUSH
82182: LD_INT 0
82184: ST_TO_ADDR
82185: GO 82799
82187: LD_INT 2
82189: DOUBLE
82190: EQUAL
82191: IFTRUE 82195
82193: GO 82206
82195: POP
// bc_type := b_warehouse ; 3 :
82196: LD_ADDR_OWVAR 42
82200: PUSH
82201: LD_INT 1
82203: ST_TO_ADDR
82204: GO 82799
82206: LD_INT 3
82208: DOUBLE
82209: EQUAL
82210: IFTRUE 82214
82212: GO 82225
82214: POP
// bc_type := b_lab ; 4 .. 9 :
82215: LD_ADDR_OWVAR 42
82219: PUSH
82220: LD_INT 6
82222: ST_TO_ADDR
82223: GO 82799
82225: LD_INT 4
82227: DOUBLE
82228: GREATEREQUAL
82229: IFFALSE 82237
82231: LD_INT 9
82233: DOUBLE
82234: LESSEQUAL
82235: IFTRUE 82239
82237: GO 82291
82239: POP
// begin bc_type := b_lab_half ;
82240: LD_ADDR_OWVAR 42
82244: PUSH
82245: LD_INT 7
82247: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
82248: LD_ADDR_OWVAR 44
82252: PUSH
82253: LD_INT 10
82255: PUSH
82256: LD_INT 11
82258: PUSH
82259: LD_INT 12
82261: PUSH
82262: LD_INT 15
82264: PUSH
82265: LD_INT 14
82267: PUSH
82268: LD_INT 13
82270: PUSH
82271: EMPTY
82272: LIST
82273: LIST
82274: LIST
82275: LIST
82276: LIST
82277: LIST
82278: PUSH
82279: LD_VAR 0 2
82283: PUSH
82284: LD_INT 3
82286: MINUS
82287: ARRAY
82288: ST_TO_ADDR
// end ; 10 .. 13 :
82289: GO 82799
82291: LD_INT 10
82293: DOUBLE
82294: GREATEREQUAL
82295: IFFALSE 82303
82297: LD_INT 13
82299: DOUBLE
82300: LESSEQUAL
82301: IFTRUE 82305
82303: GO 82382
82305: POP
// begin bc_type := b_lab_full ;
82306: LD_ADDR_OWVAR 42
82310: PUSH
82311: LD_INT 8
82313: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
82314: LD_ADDR_OWVAR 44
82318: PUSH
82319: LD_INT 10
82321: PUSH
82322: LD_INT 12
82324: PUSH
82325: LD_INT 14
82327: PUSH
82328: LD_INT 13
82330: PUSH
82331: EMPTY
82332: LIST
82333: LIST
82334: LIST
82335: LIST
82336: PUSH
82337: LD_VAR 0 2
82341: PUSH
82342: LD_INT 9
82344: MINUS
82345: ARRAY
82346: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
82347: LD_ADDR_OWVAR 45
82351: PUSH
82352: LD_INT 11
82354: PUSH
82355: LD_INT 15
82357: PUSH
82358: LD_INT 12
82360: PUSH
82361: LD_INT 15
82363: PUSH
82364: EMPTY
82365: LIST
82366: LIST
82367: LIST
82368: LIST
82369: PUSH
82370: LD_VAR 0 2
82374: PUSH
82375: LD_INT 9
82377: MINUS
82378: ARRAY
82379: ST_TO_ADDR
// end ; 14 :
82380: GO 82799
82382: LD_INT 14
82384: DOUBLE
82385: EQUAL
82386: IFTRUE 82390
82388: GO 82401
82390: POP
// bc_type := b_workshop ; 15 :
82391: LD_ADDR_OWVAR 42
82395: PUSH
82396: LD_INT 2
82398: ST_TO_ADDR
82399: GO 82799
82401: LD_INT 15
82403: DOUBLE
82404: EQUAL
82405: IFTRUE 82409
82407: GO 82420
82409: POP
// bc_type := b_factory ; 16 :
82410: LD_ADDR_OWVAR 42
82414: PUSH
82415: LD_INT 3
82417: ST_TO_ADDR
82418: GO 82799
82420: LD_INT 16
82422: DOUBLE
82423: EQUAL
82424: IFTRUE 82428
82426: GO 82439
82428: POP
// bc_type := b_ext_gun ; 17 :
82429: LD_ADDR_OWVAR 42
82433: PUSH
82434: LD_INT 17
82436: ST_TO_ADDR
82437: GO 82799
82439: LD_INT 17
82441: DOUBLE
82442: EQUAL
82443: IFTRUE 82447
82445: GO 82475
82447: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
82448: LD_ADDR_OWVAR 42
82452: PUSH
82453: LD_INT 19
82455: PUSH
82456: LD_INT 23
82458: PUSH
82459: LD_INT 19
82461: PUSH
82462: EMPTY
82463: LIST
82464: LIST
82465: LIST
82466: PUSH
82467: LD_VAR 0 1
82471: ARRAY
82472: ST_TO_ADDR
82473: GO 82799
82475: LD_INT 18
82477: DOUBLE
82478: EQUAL
82479: IFTRUE 82483
82481: GO 82494
82483: POP
// bc_type := b_ext_radar ; 19 :
82484: LD_ADDR_OWVAR 42
82488: PUSH
82489: LD_INT 20
82491: ST_TO_ADDR
82492: GO 82799
82494: LD_INT 19
82496: DOUBLE
82497: EQUAL
82498: IFTRUE 82502
82500: GO 82513
82502: POP
// bc_type := b_ext_radio ; 20 :
82503: LD_ADDR_OWVAR 42
82507: PUSH
82508: LD_INT 22
82510: ST_TO_ADDR
82511: GO 82799
82513: LD_INT 20
82515: DOUBLE
82516: EQUAL
82517: IFTRUE 82521
82519: GO 82532
82521: POP
// bc_type := b_ext_siberium ; 21 :
82522: LD_ADDR_OWVAR 42
82526: PUSH
82527: LD_INT 21
82529: ST_TO_ADDR
82530: GO 82799
82532: LD_INT 21
82534: DOUBLE
82535: EQUAL
82536: IFTRUE 82540
82538: GO 82551
82540: POP
// bc_type := b_ext_computer ; 22 :
82541: LD_ADDR_OWVAR 42
82545: PUSH
82546: LD_INT 24
82548: ST_TO_ADDR
82549: GO 82799
82551: LD_INT 22
82553: DOUBLE
82554: EQUAL
82555: IFTRUE 82559
82557: GO 82570
82559: POP
// bc_type := b_ext_track ; 23 :
82560: LD_ADDR_OWVAR 42
82564: PUSH
82565: LD_INT 16
82567: ST_TO_ADDR
82568: GO 82799
82570: LD_INT 23
82572: DOUBLE
82573: EQUAL
82574: IFTRUE 82578
82576: GO 82589
82578: POP
// bc_type := b_ext_laser ; 24 :
82579: LD_ADDR_OWVAR 42
82583: PUSH
82584: LD_INT 25
82586: ST_TO_ADDR
82587: GO 82799
82589: LD_INT 24
82591: DOUBLE
82592: EQUAL
82593: IFTRUE 82597
82595: GO 82608
82597: POP
// bc_type := b_control_tower ; 25 :
82598: LD_ADDR_OWVAR 42
82602: PUSH
82603: LD_INT 36
82605: ST_TO_ADDR
82606: GO 82799
82608: LD_INT 25
82610: DOUBLE
82611: EQUAL
82612: IFTRUE 82616
82614: GO 82627
82616: POP
// bc_type := b_breastwork ; 26 :
82617: LD_ADDR_OWVAR 42
82621: PUSH
82622: LD_INT 31
82624: ST_TO_ADDR
82625: GO 82799
82627: LD_INT 26
82629: DOUBLE
82630: EQUAL
82631: IFTRUE 82635
82633: GO 82646
82635: POP
// bc_type := b_bunker ; 27 :
82636: LD_ADDR_OWVAR 42
82640: PUSH
82641: LD_INT 32
82643: ST_TO_ADDR
82644: GO 82799
82646: LD_INT 27
82648: DOUBLE
82649: EQUAL
82650: IFTRUE 82654
82652: GO 82665
82654: POP
// bc_type := b_turret ; 28 :
82655: LD_ADDR_OWVAR 42
82659: PUSH
82660: LD_INT 33
82662: ST_TO_ADDR
82663: GO 82799
82665: LD_INT 28
82667: DOUBLE
82668: EQUAL
82669: IFTRUE 82673
82671: GO 82684
82673: POP
// bc_type := b_armoury ; 29 :
82674: LD_ADDR_OWVAR 42
82678: PUSH
82679: LD_INT 4
82681: ST_TO_ADDR
82682: GO 82799
82684: LD_INT 29
82686: DOUBLE
82687: EQUAL
82688: IFTRUE 82692
82690: GO 82703
82692: POP
// bc_type := b_barracks ; 30 :
82693: LD_ADDR_OWVAR 42
82697: PUSH
82698: LD_INT 5
82700: ST_TO_ADDR
82701: GO 82799
82703: LD_INT 30
82705: DOUBLE
82706: EQUAL
82707: IFTRUE 82711
82709: GO 82722
82711: POP
// bc_type := b_solar_power ; 31 :
82712: LD_ADDR_OWVAR 42
82716: PUSH
82717: LD_INT 27
82719: ST_TO_ADDR
82720: GO 82799
82722: LD_INT 31
82724: DOUBLE
82725: EQUAL
82726: IFTRUE 82730
82728: GO 82741
82730: POP
// bc_type := b_oil_power ; 32 :
82731: LD_ADDR_OWVAR 42
82735: PUSH
82736: LD_INT 26
82738: ST_TO_ADDR
82739: GO 82799
82741: LD_INT 32
82743: DOUBLE
82744: EQUAL
82745: IFTRUE 82749
82747: GO 82760
82749: POP
// bc_type := b_siberite_power ; 33 :
82750: LD_ADDR_OWVAR 42
82754: PUSH
82755: LD_INT 28
82757: ST_TO_ADDR
82758: GO 82799
82760: LD_INT 33
82762: DOUBLE
82763: EQUAL
82764: IFTRUE 82768
82766: GO 82779
82768: POP
// bc_type := b_oil_mine ; 34 :
82769: LD_ADDR_OWVAR 42
82773: PUSH
82774: LD_INT 29
82776: ST_TO_ADDR
82777: GO 82799
82779: LD_INT 34
82781: DOUBLE
82782: EQUAL
82783: IFTRUE 82787
82785: GO 82798
82787: POP
// bc_type := b_siberite_mine ; end ;
82788: LD_ADDR_OWVAR 42
82792: PUSH
82793: LD_INT 30
82795: ST_TO_ADDR
82796: GO 82799
82798: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
82799: LD_ADDR_VAR 0 8
82803: PUSH
82804: LD_VAR 0 5
82808: PPUSH
82809: LD_VAR 0 6
82813: PPUSH
82814: LD_VAR 0 3
82818: PPUSH
82819: CALL_OW 47
82823: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
82824: LD_OWVAR 42
82828: PUSH
82829: LD_INT 32
82831: PUSH
82832: LD_INT 33
82834: PUSH
82835: EMPTY
82836: LIST
82837: LIST
82838: IN
82839: IFFALSE 82855
// PlaceWeaponTurret ( b , weapon ) ;
82841: LD_VAR 0 8
82845: PPUSH
82846: LD_VAR 0 4
82850: PPUSH
82851: CALL_OW 431
// end ;
82855: LD_VAR 0 7
82859: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
82860: LD_INT 0
82862: PPUSH
82863: PPUSH
82864: PPUSH
82865: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
82866: LD_ADDR_VAR 0 4
82870: PUSH
82871: LD_INT 22
82873: PUSH
82874: LD_OWVAR 2
82878: PUSH
82879: EMPTY
82880: LIST
82881: LIST
82882: PUSH
82883: LD_INT 2
82885: PUSH
82886: LD_INT 30
82888: PUSH
82889: LD_INT 0
82891: PUSH
82892: EMPTY
82893: LIST
82894: LIST
82895: PUSH
82896: LD_INT 30
82898: PUSH
82899: LD_INT 1
82901: PUSH
82902: EMPTY
82903: LIST
82904: LIST
82905: PUSH
82906: EMPTY
82907: LIST
82908: LIST
82909: LIST
82910: PUSH
82911: EMPTY
82912: LIST
82913: LIST
82914: PPUSH
82915: CALL_OW 69
82919: ST_TO_ADDR
// if not tmp then
82920: LD_VAR 0 4
82924: NOT
82925: IFFALSE 82929
// exit ;
82927: GO 82988
// for i in tmp do
82929: LD_ADDR_VAR 0 2
82933: PUSH
82934: LD_VAR 0 4
82938: PUSH
82939: FOR_IN
82940: IFFALSE 82986
// for j = 1 to 3 do
82942: LD_ADDR_VAR 0 3
82946: PUSH
82947: DOUBLE
82948: LD_INT 1
82950: DEC
82951: ST_TO_ADDR
82952: LD_INT 3
82954: PUSH
82955: FOR_TO
82956: IFFALSE 82982
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
82958: LD_VAR 0 2
82962: PPUSH
82963: CALL_OW 274
82967: PPUSH
82968: LD_VAR 0 3
82972: PPUSH
82973: LD_INT 99999
82975: PPUSH
82976: CALL_OW 277
82980: GO 82955
82982: POP
82983: POP
82984: GO 82939
82986: POP
82987: POP
// end ;
82988: LD_VAR 0 1
82992: RET
// export function hHackSetLevel10 ; var i , j ; begin
82993: LD_INT 0
82995: PPUSH
82996: PPUSH
82997: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82998: LD_ADDR_VAR 0 2
83002: PUSH
83003: LD_INT 21
83005: PUSH
83006: LD_INT 1
83008: PUSH
83009: EMPTY
83010: LIST
83011: LIST
83012: PPUSH
83013: CALL_OW 69
83017: PUSH
83018: FOR_IN
83019: IFFALSE 83071
// if IsSelected ( i ) then
83021: LD_VAR 0 2
83025: PPUSH
83026: CALL_OW 306
83030: IFFALSE 83069
// begin for j := 1 to 4 do
83032: LD_ADDR_VAR 0 3
83036: PUSH
83037: DOUBLE
83038: LD_INT 1
83040: DEC
83041: ST_TO_ADDR
83042: LD_INT 4
83044: PUSH
83045: FOR_TO
83046: IFFALSE 83067
// SetSkill ( i , j , 10 ) ;
83048: LD_VAR 0 2
83052: PPUSH
83053: LD_VAR 0 3
83057: PPUSH
83058: LD_INT 10
83060: PPUSH
83061: CALL_OW 237
83065: GO 83045
83067: POP
83068: POP
// end ;
83069: GO 83018
83071: POP
83072: POP
// end ;
83073: LD_VAR 0 1
83077: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
83078: LD_INT 0
83080: PPUSH
83081: PPUSH
83082: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
83083: LD_ADDR_VAR 0 2
83087: PUSH
83088: LD_INT 22
83090: PUSH
83091: LD_OWVAR 2
83095: PUSH
83096: EMPTY
83097: LIST
83098: LIST
83099: PUSH
83100: LD_INT 21
83102: PUSH
83103: LD_INT 1
83105: PUSH
83106: EMPTY
83107: LIST
83108: LIST
83109: PUSH
83110: EMPTY
83111: LIST
83112: LIST
83113: PPUSH
83114: CALL_OW 69
83118: PUSH
83119: FOR_IN
83120: IFFALSE 83161
// begin for j := 1 to 4 do
83122: LD_ADDR_VAR 0 3
83126: PUSH
83127: DOUBLE
83128: LD_INT 1
83130: DEC
83131: ST_TO_ADDR
83132: LD_INT 4
83134: PUSH
83135: FOR_TO
83136: IFFALSE 83157
// SetSkill ( i , j , 10 ) ;
83138: LD_VAR 0 2
83142: PPUSH
83143: LD_VAR 0 3
83147: PPUSH
83148: LD_INT 10
83150: PPUSH
83151: CALL_OW 237
83155: GO 83135
83157: POP
83158: POP
// end ;
83159: GO 83119
83161: POP
83162: POP
// end ;
83163: LD_VAR 0 1
83167: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
83168: LD_INT 0
83170: PPUSH
// uc_side := your_side ;
83171: LD_ADDR_OWVAR 20
83175: PUSH
83176: LD_OWVAR 2
83180: ST_TO_ADDR
// uc_nation := nation ;
83181: LD_ADDR_OWVAR 21
83185: PUSH
83186: LD_VAR 0 1
83190: ST_TO_ADDR
// InitHc ;
83191: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
83195: LD_INT 0
83197: PPUSH
83198: LD_VAR 0 2
83202: PPUSH
83203: LD_VAR 0 3
83207: PPUSH
83208: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
83212: LD_VAR 0 4
83216: PPUSH
83217: LD_VAR 0 5
83221: PPUSH
83222: CALL_OW 428
83226: PUSH
83227: LD_INT 0
83229: EQUAL
83230: IFFALSE 83254
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
83232: CALL_OW 44
83236: PPUSH
83237: LD_VAR 0 4
83241: PPUSH
83242: LD_VAR 0 5
83246: PPUSH
83247: LD_INT 1
83249: PPUSH
83250: CALL_OW 48
// end ;
83254: LD_VAR 0 6
83258: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
83259: LD_INT 0
83261: PPUSH
83262: PPUSH
// uc_side := your_side ;
83263: LD_ADDR_OWVAR 20
83267: PUSH
83268: LD_OWVAR 2
83272: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
83273: LD_VAR 0 1
83277: PUSH
83278: LD_INT 1
83280: PUSH
83281: LD_INT 2
83283: PUSH
83284: LD_INT 3
83286: PUSH
83287: LD_INT 4
83289: PUSH
83290: LD_INT 5
83292: PUSH
83293: EMPTY
83294: LIST
83295: LIST
83296: LIST
83297: LIST
83298: LIST
83299: IN
83300: IFFALSE 83312
// uc_nation := nation_american else
83302: LD_ADDR_OWVAR 21
83306: PUSH
83307: LD_INT 1
83309: ST_TO_ADDR
83310: GO 83355
// if chassis in [ 11 , 12 , 13 , 14 ] then
83312: LD_VAR 0 1
83316: PUSH
83317: LD_INT 11
83319: PUSH
83320: LD_INT 12
83322: PUSH
83323: LD_INT 13
83325: PUSH
83326: LD_INT 14
83328: PUSH
83329: EMPTY
83330: LIST
83331: LIST
83332: LIST
83333: LIST
83334: IN
83335: IFFALSE 83347
// uc_nation := nation_arabian else
83337: LD_ADDR_OWVAR 21
83341: PUSH
83342: LD_INT 2
83344: ST_TO_ADDR
83345: GO 83355
// uc_nation := nation_russian ;
83347: LD_ADDR_OWVAR 21
83351: PUSH
83352: LD_INT 3
83354: ST_TO_ADDR
// vc_chassis := chassis ;
83355: LD_ADDR_OWVAR 37
83359: PUSH
83360: LD_VAR 0 1
83364: ST_TO_ADDR
// vc_engine := engine ;
83365: LD_ADDR_OWVAR 39
83369: PUSH
83370: LD_VAR 0 2
83374: ST_TO_ADDR
// vc_control := control ;
83375: LD_ADDR_OWVAR 38
83379: PUSH
83380: LD_VAR 0 3
83384: ST_TO_ADDR
// vc_weapon := weapon ;
83385: LD_ADDR_OWVAR 40
83389: PUSH
83390: LD_VAR 0 4
83394: ST_TO_ADDR
// un := CreateVehicle ;
83395: LD_ADDR_VAR 0 8
83399: PUSH
83400: CALL_OW 45
83404: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
83405: LD_VAR 0 8
83409: PPUSH
83410: LD_INT 0
83412: PPUSH
83413: LD_INT 5
83415: PPUSH
83416: CALL_OW 12
83420: PPUSH
83421: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
83425: LD_VAR 0 8
83429: PPUSH
83430: LD_VAR 0 5
83434: PPUSH
83435: LD_VAR 0 6
83439: PPUSH
83440: LD_INT 1
83442: PPUSH
83443: CALL_OW 48
// end ;
83447: LD_VAR 0 7
83451: RET
// export hInvincible ; every 1 do
83452: GO 83454
83454: DISABLE
// hInvincible := [ ] ;
83455: LD_ADDR_EXP 129
83459: PUSH
83460: EMPTY
83461: ST_TO_ADDR
83462: END
// every 10 do var i ;
83463: GO 83465
83465: DISABLE
83466: LD_INT 0
83468: PPUSH
// begin enable ;
83469: ENABLE
// if not hInvincible then
83470: LD_EXP 129
83474: NOT
83475: IFFALSE 83479
// exit ;
83477: GO 83523
// for i in hInvincible do
83479: LD_ADDR_VAR 0 1
83483: PUSH
83484: LD_EXP 129
83488: PUSH
83489: FOR_IN
83490: IFFALSE 83521
// if GetLives ( i ) < 1000 then
83492: LD_VAR 0 1
83496: PPUSH
83497: CALL_OW 256
83501: PUSH
83502: LD_INT 1000
83504: LESS
83505: IFFALSE 83519
// SetLives ( i , 1000 ) ;
83507: LD_VAR 0 1
83511: PPUSH
83512: LD_INT 1000
83514: PPUSH
83515: CALL_OW 234
83519: GO 83489
83521: POP
83522: POP
// end ;
83523: PPOPN 1
83525: END
// export function hHackInvincible ; var i ; begin
83526: LD_INT 0
83528: PPUSH
83529: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
83530: LD_ADDR_VAR 0 2
83534: PUSH
83535: LD_INT 2
83537: PUSH
83538: LD_INT 21
83540: PUSH
83541: LD_INT 1
83543: PUSH
83544: EMPTY
83545: LIST
83546: LIST
83547: PUSH
83548: LD_INT 21
83550: PUSH
83551: LD_INT 2
83553: PUSH
83554: EMPTY
83555: LIST
83556: LIST
83557: PUSH
83558: EMPTY
83559: LIST
83560: LIST
83561: LIST
83562: PPUSH
83563: CALL_OW 69
83567: PUSH
83568: FOR_IN
83569: IFFALSE 83630
// if IsSelected ( i ) then
83571: LD_VAR 0 2
83575: PPUSH
83576: CALL_OW 306
83580: IFFALSE 83628
// begin if i in hInvincible then
83582: LD_VAR 0 2
83586: PUSH
83587: LD_EXP 129
83591: IN
83592: IFFALSE 83612
// hInvincible := hInvincible diff i else
83594: LD_ADDR_EXP 129
83598: PUSH
83599: LD_EXP 129
83603: PUSH
83604: LD_VAR 0 2
83608: DIFF
83609: ST_TO_ADDR
83610: GO 83628
// hInvincible := hInvincible union i ;
83612: LD_ADDR_EXP 129
83616: PUSH
83617: LD_EXP 129
83621: PUSH
83622: LD_VAR 0 2
83626: UNION
83627: ST_TO_ADDR
// end ;
83628: GO 83568
83630: POP
83631: POP
// end ;
83632: LD_VAR 0 1
83636: RET
// export function hHackInvisible ; var i , j ; begin
83637: LD_INT 0
83639: PPUSH
83640: PPUSH
83641: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
83642: LD_ADDR_VAR 0 2
83646: PUSH
83647: LD_INT 21
83649: PUSH
83650: LD_INT 1
83652: PUSH
83653: EMPTY
83654: LIST
83655: LIST
83656: PPUSH
83657: CALL_OW 69
83661: PUSH
83662: FOR_IN
83663: IFFALSE 83687
// if IsSelected ( i ) then
83665: LD_VAR 0 2
83669: PPUSH
83670: CALL_OW 306
83674: IFFALSE 83685
// ComForceInvisible ( i ) ;
83676: LD_VAR 0 2
83680: PPUSH
83681: CALL_OW 496
83685: GO 83662
83687: POP
83688: POP
// end ;
83689: LD_VAR 0 1
83693: RET
// export function hHackChangeYourSide ; begin
83694: LD_INT 0
83696: PPUSH
// if your_side = 8 then
83697: LD_OWVAR 2
83701: PUSH
83702: LD_INT 8
83704: EQUAL
83705: IFFALSE 83717
// your_side := 0 else
83707: LD_ADDR_OWVAR 2
83711: PUSH
83712: LD_INT 0
83714: ST_TO_ADDR
83715: GO 83731
// your_side := your_side + 1 ;
83717: LD_ADDR_OWVAR 2
83721: PUSH
83722: LD_OWVAR 2
83726: PUSH
83727: LD_INT 1
83729: PLUS
83730: ST_TO_ADDR
// end ;
83731: LD_VAR 0 1
83735: RET
// export function hHackChangeUnitSide ; var i , j ; begin
83736: LD_INT 0
83738: PPUSH
83739: PPUSH
83740: PPUSH
// for i in all_units do
83741: LD_ADDR_VAR 0 2
83745: PUSH
83746: LD_OWVAR 3
83750: PUSH
83751: FOR_IN
83752: IFFALSE 83830
// if IsSelected ( i ) then
83754: LD_VAR 0 2
83758: PPUSH
83759: CALL_OW 306
83763: IFFALSE 83828
// begin j := GetSide ( i ) ;
83765: LD_ADDR_VAR 0 3
83769: PUSH
83770: LD_VAR 0 2
83774: PPUSH
83775: CALL_OW 255
83779: ST_TO_ADDR
// if j = 8 then
83780: LD_VAR 0 3
83784: PUSH
83785: LD_INT 8
83787: EQUAL
83788: IFFALSE 83800
// j := 0 else
83790: LD_ADDR_VAR 0 3
83794: PUSH
83795: LD_INT 0
83797: ST_TO_ADDR
83798: GO 83814
// j := j + 1 ;
83800: LD_ADDR_VAR 0 3
83804: PUSH
83805: LD_VAR 0 3
83809: PUSH
83810: LD_INT 1
83812: PLUS
83813: ST_TO_ADDR
// SetSide ( i , j ) ;
83814: LD_VAR 0 2
83818: PPUSH
83819: LD_VAR 0 3
83823: PPUSH
83824: CALL_OW 235
// end ;
83828: GO 83751
83830: POP
83831: POP
// end ;
83832: LD_VAR 0 1
83836: RET
// export function hHackFog ; begin
83837: LD_INT 0
83839: PPUSH
// FogOff ( true ) ;
83840: LD_INT 1
83842: PPUSH
83843: CALL_OW 344
// end ;
83847: LD_VAR 0 1
83851: RET
// export function hHackTeleport ( unit , x , y ) ; begin
83852: LD_INT 0
83854: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
83855: LD_VAR 0 1
83859: PPUSH
83860: LD_VAR 0 2
83864: PPUSH
83865: LD_VAR 0 3
83869: PPUSH
83870: LD_INT 1
83872: PPUSH
83873: LD_INT 1
83875: PPUSH
83876: CALL_OW 483
// CenterOnXY ( x , y ) ;
83880: LD_VAR 0 2
83884: PPUSH
83885: LD_VAR 0 3
83889: PPUSH
83890: CALL_OW 84
// end ;
83894: LD_VAR 0 4
83898: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
83899: LD_INT 0
83901: PPUSH
83902: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
83903: LD_VAR 0 1
83907: NOT
83908: PUSH
83909: LD_VAR 0 2
83913: PPUSH
83914: LD_VAR 0 3
83918: PPUSH
83919: CALL_OW 488
83923: NOT
83924: OR
83925: PUSH
83926: LD_VAR 0 1
83930: PPUSH
83931: CALL_OW 266
83935: PUSH
83936: LD_INT 3
83938: NONEQUAL
83939: PUSH
83940: LD_VAR 0 1
83944: PPUSH
83945: CALL_OW 247
83949: PUSH
83950: LD_INT 1
83952: EQUAL
83953: NOT
83954: AND
83955: OR
83956: IFFALSE 83960
// exit ;
83958: GO 84109
// if GetType ( factory ) = unit_human then
83960: LD_VAR 0 1
83964: PPUSH
83965: CALL_OW 247
83969: PUSH
83970: LD_INT 1
83972: EQUAL
83973: IFFALSE 83990
// factory := IsInUnit ( factory ) ;
83975: LD_ADDR_VAR 0 1
83979: PUSH
83980: LD_VAR 0 1
83984: PPUSH
83985: CALL_OW 310
83989: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
83990: LD_VAR 0 1
83994: PPUSH
83995: CALL_OW 266
83999: PUSH
84000: LD_INT 3
84002: NONEQUAL
84003: IFFALSE 84007
// exit ;
84005: GO 84109
// if HexInfo ( x , y ) = factory then
84007: LD_VAR 0 2
84011: PPUSH
84012: LD_VAR 0 3
84016: PPUSH
84017: CALL_OW 428
84021: PUSH
84022: LD_VAR 0 1
84026: EQUAL
84027: IFFALSE 84054
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
84029: LD_ADDR_EXP 130
84033: PUSH
84034: LD_EXP 130
84038: PPUSH
84039: LD_VAR 0 1
84043: PPUSH
84044: LD_INT 0
84046: PPUSH
84047: CALL_OW 1
84051: ST_TO_ADDR
84052: GO 84105
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
84054: LD_ADDR_EXP 130
84058: PUSH
84059: LD_EXP 130
84063: PPUSH
84064: LD_VAR 0 1
84068: PPUSH
84069: LD_VAR 0 1
84073: PPUSH
84074: CALL_OW 255
84078: PUSH
84079: LD_VAR 0 1
84083: PUSH
84084: LD_VAR 0 2
84088: PUSH
84089: LD_VAR 0 3
84093: PUSH
84094: EMPTY
84095: LIST
84096: LIST
84097: LIST
84098: LIST
84099: PPUSH
84100: CALL_OW 1
84104: ST_TO_ADDR
// UpdateFactoryWaypoints ;
84105: CALL 84114 0 0
// end ;
84109: LD_VAR 0 4
84113: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
84114: LD_INT 0
84116: PPUSH
84117: PPUSH
84118: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
84119: LD_STRING resetFactoryWaypoint();
84121: PPUSH
84122: CALL_OW 559
// if factoryWaypoints then
84126: LD_EXP 130
84130: IFFALSE 84256
// begin list := PrepareArray ( factoryWaypoints ) ;
84132: LD_ADDR_VAR 0 3
84136: PUSH
84137: LD_EXP 130
84141: PPUSH
84142: CALL 69221 0 1
84146: ST_TO_ADDR
// for i := 1 to list do
84147: LD_ADDR_VAR 0 2
84151: PUSH
84152: DOUBLE
84153: LD_INT 1
84155: DEC
84156: ST_TO_ADDR
84157: LD_VAR 0 3
84161: PUSH
84162: FOR_TO
84163: IFFALSE 84254
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
84165: LD_STRING setFactoryWaypointXY(
84167: PUSH
84168: LD_VAR 0 3
84172: PUSH
84173: LD_VAR 0 2
84177: ARRAY
84178: PUSH
84179: LD_INT 1
84181: ARRAY
84182: STR
84183: PUSH
84184: LD_STRING ,
84186: STR
84187: PUSH
84188: LD_VAR 0 3
84192: PUSH
84193: LD_VAR 0 2
84197: ARRAY
84198: PUSH
84199: LD_INT 2
84201: ARRAY
84202: STR
84203: PUSH
84204: LD_STRING ,
84206: STR
84207: PUSH
84208: LD_VAR 0 3
84212: PUSH
84213: LD_VAR 0 2
84217: ARRAY
84218: PUSH
84219: LD_INT 3
84221: ARRAY
84222: STR
84223: PUSH
84224: LD_STRING ,
84226: STR
84227: PUSH
84228: LD_VAR 0 3
84232: PUSH
84233: LD_VAR 0 2
84237: ARRAY
84238: PUSH
84239: LD_INT 4
84241: ARRAY
84242: STR
84243: PUSH
84244: LD_STRING )
84246: STR
84247: PPUSH
84248: CALL_OW 559
84252: GO 84162
84254: POP
84255: POP
// end ; end ;
84256: LD_VAR 0 1
84260: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
84261: LD_INT 0
84263: PPUSH
// if HexInfo ( x , y ) = warehouse then
84264: LD_VAR 0 2
84268: PPUSH
84269: LD_VAR 0 3
84273: PPUSH
84274: CALL_OW 428
84278: PUSH
84279: LD_VAR 0 1
84283: EQUAL
84284: IFFALSE 84311
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
84286: LD_ADDR_EXP 131
84290: PUSH
84291: LD_EXP 131
84295: PPUSH
84296: LD_VAR 0 1
84300: PPUSH
84301: LD_INT 0
84303: PPUSH
84304: CALL_OW 1
84308: ST_TO_ADDR
84309: GO 84362
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
84311: LD_ADDR_EXP 131
84315: PUSH
84316: LD_EXP 131
84320: PPUSH
84321: LD_VAR 0 1
84325: PPUSH
84326: LD_VAR 0 1
84330: PPUSH
84331: CALL_OW 255
84335: PUSH
84336: LD_VAR 0 1
84340: PUSH
84341: LD_VAR 0 2
84345: PUSH
84346: LD_VAR 0 3
84350: PUSH
84351: EMPTY
84352: LIST
84353: LIST
84354: LIST
84355: LIST
84356: PPUSH
84357: CALL_OW 1
84361: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
84362: CALL 84371 0 0
// end ;
84366: LD_VAR 0 4
84370: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
84371: LD_INT 0
84373: PPUSH
84374: PPUSH
84375: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
84376: LD_STRING resetWarehouseGatheringPoints();
84378: PPUSH
84379: CALL_OW 559
// if warehouseGatheringPoints then
84383: LD_EXP 131
84387: IFFALSE 84513
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
84389: LD_ADDR_VAR 0 3
84393: PUSH
84394: LD_EXP 131
84398: PPUSH
84399: CALL 69221 0 1
84403: ST_TO_ADDR
// for i := 1 to list do
84404: LD_ADDR_VAR 0 2
84408: PUSH
84409: DOUBLE
84410: LD_INT 1
84412: DEC
84413: ST_TO_ADDR
84414: LD_VAR 0 3
84418: PUSH
84419: FOR_TO
84420: IFFALSE 84511
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
84422: LD_STRING setWarehouseGatheringPointXY(
84424: PUSH
84425: LD_VAR 0 3
84429: PUSH
84430: LD_VAR 0 2
84434: ARRAY
84435: PUSH
84436: LD_INT 1
84438: ARRAY
84439: STR
84440: PUSH
84441: LD_STRING ,
84443: STR
84444: PUSH
84445: LD_VAR 0 3
84449: PUSH
84450: LD_VAR 0 2
84454: ARRAY
84455: PUSH
84456: LD_INT 2
84458: ARRAY
84459: STR
84460: PUSH
84461: LD_STRING ,
84463: STR
84464: PUSH
84465: LD_VAR 0 3
84469: PUSH
84470: LD_VAR 0 2
84474: ARRAY
84475: PUSH
84476: LD_INT 3
84478: ARRAY
84479: STR
84480: PUSH
84481: LD_STRING ,
84483: STR
84484: PUSH
84485: LD_VAR 0 3
84489: PUSH
84490: LD_VAR 0 2
84494: ARRAY
84495: PUSH
84496: LD_INT 4
84498: ARRAY
84499: STR
84500: PUSH
84501: LD_STRING )
84503: STR
84504: PPUSH
84505: CALL_OW 559
84509: GO 84419
84511: POP
84512: POP
// end ; end ;
84513: LD_VAR 0 1
84517: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
84518: LD_EXP 131
84522: IFFALSE 85207
84524: GO 84526
84526: DISABLE
84527: LD_INT 0
84529: PPUSH
84530: PPUSH
84531: PPUSH
84532: PPUSH
84533: PPUSH
84534: PPUSH
84535: PPUSH
84536: PPUSH
84537: PPUSH
// begin enable ;
84538: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
84539: LD_ADDR_VAR 0 3
84543: PUSH
84544: LD_EXP 131
84548: PPUSH
84549: CALL 69221 0 1
84553: ST_TO_ADDR
// if not list then
84554: LD_VAR 0 3
84558: NOT
84559: IFFALSE 84563
// exit ;
84561: GO 85207
// for i := 1 to list do
84563: LD_ADDR_VAR 0 1
84567: PUSH
84568: DOUBLE
84569: LD_INT 1
84571: DEC
84572: ST_TO_ADDR
84573: LD_VAR 0 3
84577: PUSH
84578: FOR_TO
84579: IFFALSE 85205
// begin depot := list [ i ] [ 2 ] ;
84581: LD_ADDR_VAR 0 8
84585: PUSH
84586: LD_VAR 0 3
84590: PUSH
84591: LD_VAR 0 1
84595: ARRAY
84596: PUSH
84597: LD_INT 2
84599: ARRAY
84600: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
84601: LD_ADDR_VAR 0 5
84605: PUSH
84606: LD_VAR 0 3
84610: PUSH
84611: LD_VAR 0 1
84615: ARRAY
84616: PUSH
84617: LD_INT 1
84619: ARRAY
84620: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
84621: LD_VAR 0 8
84625: PPUSH
84626: CALL_OW 301
84630: PUSH
84631: LD_VAR 0 5
84635: PUSH
84636: LD_VAR 0 8
84640: PPUSH
84641: CALL_OW 255
84645: NONEQUAL
84646: OR
84647: IFFALSE 84676
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
84649: LD_ADDR_EXP 131
84653: PUSH
84654: LD_EXP 131
84658: PPUSH
84659: LD_VAR 0 8
84663: PPUSH
84664: LD_INT 0
84666: PPUSH
84667: CALL_OW 1
84671: ST_TO_ADDR
// exit ;
84672: POP
84673: POP
84674: GO 85207
// end ; x := list [ i ] [ 3 ] ;
84676: LD_ADDR_VAR 0 6
84680: PUSH
84681: LD_VAR 0 3
84685: PUSH
84686: LD_VAR 0 1
84690: ARRAY
84691: PUSH
84692: LD_INT 3
84694: ARRAY
84695: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
84696: LD_ADDR_VAR 0 7
84700: PUSH
84701: LD_VAR 0 3
84705: PUSH
84706: LD_VAR 0 1
84710: ARRAY
84711: PUSH
84712: LD_INT 4
84714: ARRAY
84715: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
84716: LD_ADDR_VAR 0 9
84720: PUSH
84721: LD_VAR 0 6
84725: PPUSH
84726: LD_VAR 0 7
84730: PPUSH
84731: LD_INT 16
84733: PPUSH
84734: CALL 67809 0 3
84738: ST_TO_ADDR
// if not cratesNearbyPoint then
84739: LD_VAR 0 9
84743: NOT
84744: IFFALSE 84750
// exit ;
84746: POP
84747: POP
84748: GO 85207
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
84750: LD_ADDR_VAR 0 4
84754: PUSH
84755: LD_INT 22
84757: PUSH
84758: LD_VAR 0 5
84762: PUSH
84763: EMPTY
84764: LIST
84765: LIST
84766: PUSH
84767: LD_INT 3
84769: PUSH
84770: LD_INT 60
84772: PUSH
84773: EMPTY
84774: LIST
84775: PUSH
84776: EMPTY
84777: LIST
84778: LIST
84779: PUSH
84780: LD_INT 91
84782: PUSH
84783: LD_VAR 0 8
84787: PUSH
84788: LD_INT 6
84790: PUSH
84791: EMPTY
84792: LIST
84793: LIST
84794: LIST
84795: PUSH
84796: LD_INT 2
84798: PUSH
84799: LD_INT 25
84801: PUSH
84802: LD_INT 2
84804: PUSH
84805: EMPTY
84806: LIST
84807: LIST
84808: PUSH
84809: LD_INT 25
84811: PUSH
84812: LD_INT 16
84814: PUSH
84815: EMPTY
84816: LIST
84817: LIST
84818: PUSH
84819: EMPTY
84820: LIST
84821: LIST
84822: LIST
84823: PUSH
84824: EMPTY
84825: LIST
84826: LIST
84827: LIST
84828: LIST
84829: PPUSH
84830: CALL_OW 69
84834: PUSH
84835: LD_VAR 0 8
84839: PPUSH
84840: CALL_OW 313
84844: PPUSH
84845: LD_INT 3
84847: PUSH
84848: LD_INT 60
84850: PUSH
84851: EMPTY
84852: LIST
84853: PUSH
84854: EMPTY
84855: LIST
84856: LIST
84857: PUSH
84858: LD_INT 2
84860: PUSH
84861: LD_INT 25
84863: PUSH
84864: LD_INT 2
84866: PUSH
84867: EMPTY
84868: LIST
84869: LIST
84870: PUSH
84871: LD_INT 25
84873: PUSH
84874: LD_INT 16
84876: PUSH
84877: EMPTY
84878: LIST
84879: LIST
84880: PUSH
84881: EMPTY
84882: LIST
84883: LIST
84884: LIST
84885: PUSH
84886: EMPTY
84887: LIST
84888: LIST
84889: PPUSH
84890: CALL_OW 72
84894: UNION
84895: ST_TO_ADDR
// if tmp then
84896: LD_VAR 0 4
84900: IFFALSE 84980
// begin tmp := ShrinkArray ( tmp , 3 ) ;
84902: LD_ADDR_VAR 0 4
84906: PUSH
84907: LD_VAR 0 4
84911: PPUSH
84912: LD_INT 3
84914: PPUSH
84915: CALL 65778 0 2
84919: ST_TO_ADDR
// for j in tmp do
84920: LD_ADDR_VAR 0 2
84924: PUSH
84925: LD_VAR 0 4
84929: PUSH
84930: FOR_IN
84931: IFFALSE 84974
// begin if IsInUnit ( j ) then
84933: LD_VAR 0 2
84937: PPUSH
84938: CALL_OW 310
84942: IFFALSE 84953
// ComExit ( j ) ;
84944: LD_VAR 0 2
84948: PPUSH
84949: CALL 65861 0 1
// AddComCollect ( j , x , y ) ;
84953: LD_VAR 0 2
84957: PPUSH
84958: LD_VAR 0 6
84962: PPUSH
84963: LD_VAR 0 7
84967: PPUSH
84968: CALL_OW 177
// end ;
84972: GO 84930
84974: POP
84975: POP
// exit ;
84976: POP
84977: POP
84978: GO 85207
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
84980: LD_ADDR_VAR 0 4
84984: PUSH
84985: LD_INT 22
84987: PUSH
84988: LD_VAR 0 5
84992: PUSH
84993: EMPTY
84994: LIST
84995: LIST
84996: PUSH
84997: LD_INT 91
84999: PUSH
85000: LD_VAR 0 8
85004: PUSH
85005: LD_INT 8
85007: PUSH
85008: EMPTY
85009: LIST
85010: LIST
85011: LIST
85012: PUSH
85013: LD_INT 2
85015: PUSH
85016: LD_INT 34
85018: PUSH
85019: LD_INT 12
85021: PUSH
85022: EMPTY
85023: LIST
85024: LIST
85025: PUSH
85026: LD_INT 34
85028: PUSH
85029: LD_INT 51
85031: PUSH
85032: EMPTY
85033: LIST
85034: LIST
85035: PUSH
85036: LD_INT 34
85038: PUSH
85039: LD_INT 32
85041: PUSH
85042: EMPTY
85043: LIST
85044: LIST
85045: PUSH
85046: LD_INT 34
85048: PUSH
85049: LD_INT 89
85051: PUSH
85052: EMPTY
85053: LIST
85054: LIST
85055: PUSH
85056: EMPTY
85057: LIST
85058: LIST
85059: LIST
85060: LIST
85061: LIST
85062: PUSH
85063: EMPTY
85064: LIST
85065: LIST
85066: LIST
85067: PPUSH
85068: CALL_OW 69
85072: ST_TO_ADDR
// if tmp then
85073: LD_VAR 0 4
85077: IFFALSE 85203
// begin for j in tmp do
85079: LD_ADDR_VAR 0 2
85083: PUSH
85084: LD_VAR 0 4
85088: PUSH
85089: FOR_IN
85090: IFFALSE 85201
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
85092: LD_VAR 0 2
85096: PPUSH
85097: CALL_OW 262
85101: PUSH
85102: LD_INT 3
85104: EQUAL
85105: PUSH
85106: LD_VAR 0 2
85110: PPUSH
85111: CALL_OW 261
85115: PUSH
85116: LD_INT 20
85118: GREATER
85119: OR
85120: PUSH
85121: LD_VAR 0 2
85125: PPUSH
85126: CALL_OW 314
85130: NOT
85131: AND
85132: PUSH
85133: LD_VAR 0 2
85137: PPUSH
85138: CALL_OW 263
85142: PUSH
85143: LD_INT 1
85145: NONEQUAL
85146: PUSH
85147: LD_VAR 0 2
85151: PPUSH
85152: CALL_OW 311
85156: OR
85157: AND
85158: IFFALSE 85199
// begin ComCollect ( j , x , y ) ;
85160: LD_VAR 0 2
85164: PPUSH
85165: LD_VAR 0 6
85169: PPUSH
85170: LD_VAR 0 7
85174: PPUSH
85175: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
85179: LD_VAR 0 2
85183: PPUSH
85184: LD_VAR 0 8
85188: PPUSH
85189: CALL_OW 172
// exit ;
85193: POP
85194: POP
85195: POP
85196: POP
85197: GO 85207
// end ;
85199: GO 85089
85201: POP
85202: POP
// end ; end ;
85203: GO 84578
85205: POP
85206: POP
// end ; end_of_file
85207: PPOPN 9
85209: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85210: LD_VAR 0 1
85214: PUSH
85215: LD_INT 200
85217: DOUBLE
85218: GREATEREQUAL
85219: IFFALSE 85227
85221: LD_INT 299
85223: DOUBLE
85224: LESSEQUAL
85225: IFTRUE 85229
85227: GO 85261
85229: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85230: LD_VAR 0 1
85234: PPUSH
85235: LD_VAR 0 2
85239: PPUSH
85240: LD_VAR 0 3
85244: PPUSH
85245: LD_VAR 0 4
85249: PPUSH
85250: LD_VAR 0 5
85254: PPUSH
85255: CALL 85749 0 5
85259: GO 85338
85261: LD_INT 300
85263: DOUBLE
85264: GREATEREQUAL
85265: IFFALSE 85273
85267: LD_INT 399
85269: DOUBLE
85270: LESSEQUAL
85271: IFTRUE 85275
85273: GO 85337
85275: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85276: LD_VAR 0 1
85280: PPUSH
85281: LD_VAR 0 2
85285: PPUSH
85286: LD_VAR 0 3
85290: PPUSH
85291: LD_VAR 0 4
85295: PPUSH
85296: LD_VAR 0 5
85300: PPUSH
85301: LD_VAR 0 6
85305: PPUSH
85306: LD_VAR 0 7
85310: PPUSH
85311: LD_VAR 0 8
85315: PPUSH
85316: LD_VAR 0 9
85320: PPUSH
85321: LD_VAR 0 10
85325: PPUSH
85326: LD_VAR 0 11
85330: PPUSH
85331: CALL 81919 0 11
85335: GO 85338
85337: POP
// end ;
85338: PPOPN 11
85340: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85341: LD_VAR 0 1
85345: PPUSH
85346: LD_VAR 0 2
85350: PPUSH
85351: LD_VAR 0 3
85355: PPUSH
85356: LD_VAR 0 4
85360: PPUSH
85361: LD_VAR 0 5
85365: PPUSH
85366: CALL 85485 0 5
// end ; end_of_file
85370: PPOPN 5
85372: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
85373: LD_INT 0
85375: PPUSH
85376: PPUSH
85377: PPUSH
85378: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
85379: LD_VAR 0 1
85383: PPUSH
85384: CALL_OW 264
85388: PUSH
85389: LD_INT 91
85391: EQUAL
85392: IFFALSE 85464
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
85394: LD_INT 68
85396: PPUSH
85397: LD_VAR 0 1
85401: PPUSH
85402: CALL_OW 255
85406: PPUSH
85407: CALL_OW 321
85411: PUSH
85412: LD_INT 2
85414: EQUAL
85415: IFFALSE 85427
// eff := 70 else
85417: LD_ADDR_VAR 0 4
85421: PUSH
85422: LD_INT 70
85424: ST_TO_ADDR
85425: GO 85435
// eff := 30 ;
85427: LD_ADDR_VAR 0 4
85431: PUSH
85432: LD_INT 30
85434: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
85435: LD_VAR 0 1
85439: PPUSH
85440: CALL_OW 250
85444: PPUSH
85445: LD_VAR 0 1
85449: PPUSH
85450: CALL_OW 251
85454: PPUSH
85455: LD_VAR 0 4
85459: PPUSH
85460: CALL_OW 495
// end ; end ;
85464: LD_VAR 0 2
85468: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
85469: LD_INT 0
85471: PPUSH
// end ;
85472: LD_VAR 0 4
85476: RET
// export function SOS_Command ( cmd ) ; begin
85477: LD_INT 0
85479: PPUSH
// end ;
85480: LD_VAR 0 2
85484: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
85485: LD_INT 0
85487: PPUSH
// end ;
85488: LD_VAR 0 6
85492: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
85493: LD_INT 0
85495: PPUSH
85496: PPUSH
// if not vehicle or not factory then
85497: LD_VAR 0 1
85501: NOT
85502: PUSH
85503: LD_VAR 0 2
85507: NOT
85508: OR
85509: IFFALSE 85513
// exit ;
85511: GO 85744
// if factoryWaypoints >= factory then
85513: LD_EXP 130
85517: PUSH
85518: LD_VAR 0 2
85522: GREATEREQUAL
85523: IFFALSE 85744
// if factoryWaypoints [ factory ] then
85525: LD_EXP 130
85529: PUSH
85530: LD_VAR 0 2
85534: ARRAY
85535: IFFALSE 85744
// begin if GetControl ( vehicle ) = control_manual then
85537: LD_VAR 0 1
85541: PPUSH
85542: CALL_OW 263
85546: PUSH
85547: LD_INT 1
85549: EQUAL
85550: IFFALSE 85631
// begin driver := IsDrivenBy ( vehicle ) ;
85552: LD_ADDR_VAR 0 4
85556: PUSH
85557: LD_VAR 0 1
85561: PPUSH
85562: CALL_OW 311
85566: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85567: LD_VAR 0 4
85571: PPUSH
85572: LD_EXP 130
85576: PUSH
85577: LD_VAR 0 2
85581: ARRAY
85582: PUSH
85583: LD_INT 3
85585: ARRAY
85586: PPUSH
85587: LD_EXP 130
85591: PUSH
85592: LD_VAR 0 2
85596: ARRAY
85597: PUSH
85598: LD_INT 4
85600: ARRAY
85601: PPUSH
85602: CALL_OW 171
// AddComExitVehicle ( driver ) ;
85606: LD_VAR 0 4
85610: PPUSH
85611: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
85615: LD_VAR 0 4
85619: PPUSH
85620: LD_VAR 0 2
85624: PPUSH
85625: CALL_OW 180
// end else
85629: GO 85744
// if GetControl ( vehicle ) = control_remote then
85631: LD_VAR 0 1
85635: PPUSH
85636: CALL_OW 263
85640: PUSH
85641: LD_INT 2
85643: EQUAL
85644: IFFALSE 85705
// begin wait ( 0 0$2 ) ;
85646: LD_INT 70
85648: PPUSH
85649: CALL_OW 67
// if Connect ( vehicle ) then
85653: LD_VAR 0 1
85657: PPUSH
85658: CALL 36101 0 1
85662: IFFALSE 85703
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85664: LD_VAR 0 1
85668: PPUSH
85669: LD_EXP 130
85673: PUSH
85674: LD_VAR 0 2
85678: ARRAY
85679: PUSH
85680: LD_INT 3
85682: ARRAY
85683: PPUSH
85684: LD_EXP 130
85688: PUSH
85689: LD_VAR 0 2
85693: ARRAY
85694: PUSH
85695: LD_INT 4
85697: ARRAY
85698: PPUSH
85699: CALL_OW 171
// end else
85703: GO 85744
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85705: LD_VAR 0 1
85709: PPUSH
85710: LD_EXP 130
85714: PUSH
85715: LD_VAR 0 2
85719: ARRAY
85720: PUSH
85721: LD_INT 3
85723: ARRAY
85724: PPUSH
85725: LD_EXP 130
85729: PUSH
85730: LD_VAR 0 2
85734: ARRAY
85735: PUSH
85736: LD_INT 4
85738: ARRAY
85739: PPUSH
85740: CALL_OW 171
// end ; end ;
85744: LD_VAR 0 3
85748: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
85749: LD_INT 0
85751: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
85752: LD_VAR 0 1
85756: PUSH
85757: LD_INT 250
85759: EQUAL
85760: PUSH
85761: LD_VAR 0 2
85765: PPUSH
85766: CALL_OW 264
85770: PUSH
85771: LD_INT 81
85773: EQUAL
85774: AND
85775: IFFALSE 85796
// MinerPlaceMine ( unit , x , y ) ;
85777: LD_VAR 0 2
85781: PPUSH
85782: LD_VAR 0 4
85786: PPUSH
85787: LD_VAR 0 5
85791: PPUSH
85792: CALL 88181 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
85796: LD_VAR 0 1
85800: PUSH
85801: LD_INT 251
85803: EQUAL
85804: PUSH
85805: LD_VAR 0 2
85809: PPUSH
85810: CALL_OW 264
85814: PUSH
85815: LD_INT 81
85817: EQUAL
85818: AND
85819: IFFALSE 85840
// MinerDetonateMine ( unit , x , y ) ;
85821: LD_VAR 0 2
85825: PPUSH
85826: LD_VAR 0 4
85830: PPUSH
85831: LD_VAR 0 5
85835: PPUSH
85836: CALL 88456 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
85840: LD_VAR 0 1
85844: PUSH
85845: LD_INT 252
85847: EQUAL
85848: PUSH
85849: LD_VAR 0 2
85853: PPUSH
85854: CALL_OW 264
85858: PUSH
85859: LD_INT 81
85861: EQUAL
85862: AND
85863: IFFALSE 85884
// MinerCreateMinefield ( unit , x , y ) ;
85865: LD_VAR 0 2
85869: PPUSH
85870: LD_VAR 0 4
85874: PPUSH
85875: LD_VAR 0 5
85879: PPUSH
85880: CALL 88873 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
85884: LD_VAR 0 1
85888: PUSH
85889: LD_INT 253
85891: EQUAL
85892: PUSH
85893: LD_VAR 0 2
85897: PPUSH
85898: CALL_OW 257
85902: PUSH
85903: LD_INT 5
85905: EQUAL
85906: AND
85907: IFFALSE 85928
// ComBinocular ( unit , x , y ) ;
85909: LD_VAR 0 2
85913: PPUSH
85914: LD_VAR 0 4
85918: PPUSH
85919: LD_VAR 0 5
85923: PPUSH
85924: CALL 89242 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
85928: LD_VAR 0 1
85932: PUSH
85933: LD_INT 254
85935: EQUAL
85936: PUSH
85937: LD_VAR 0 2
85941: PPUSH
85942: CALL_OW 264
85946: PUSH
85947: LD_INT 99
85949: EQUAL
85950: AND
85951: PUSH
85952: LD_VAR 0 3
85956: PPUSH
85957: CALL_OW 263
85961: PUSH
85962: LD_INT 3
85964: EQUAL
85965: AND
85966: IFFALSE 85982
// HackDestroyVehicle ( unit , selectedUnit ) ;
85968: LD_VAR 0 2
85972: PPUSH
85973: LD_VAR 0 3
85977: PPUSH
85978: CALL 87545 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
85982: LD_VAR 0 1
85986: PUSH
85987: LD_INT 255
85989: EQUAL
85990: PUSH
85991: LD_VAR 0 2
85995: PPUSH
85996: CALL_OW 264
86000: PUSH
86001: LD_INT 14
86003: PUSH
86004: LD_INT 53
86006: PUSH
86007: EMPTY
86008: LIST
86009: LIST
86010: IN
86011: AND
86012: PUSH
86013: LD_VAR 0 4
86017: PPUSH
86018: LD_VAR 0 5
86022: PPUSH
86023: CALL_OW 488
86027: AND
86028: IFFALSE 86052
// CutTreeXYR ( unit , x , y , 12 ) ;
86030: LD_VAR 0 2
86034: PPUSH
86035: LD_VAR 0 4
86039: PPUSH
86040: LD_VAR 0 5
86044: PPUSH
86045: LD_INT 12
86047: PPUSH
86048: CALL 86115 0 4
// if cmd = 256 then
86052: LD_VAR 0 1
86056: PUSH
86057: LD_INT 256
86059: EQUAL
86060: IFFALSE 86081
// SetFactoryWaypoint ( unit , x , y ) ;
86062: LD_VAR 0 2
86066: PPUSH
86067: LD_VAR 0 4
86071: PPUSH
86072: LD_VAR 0 5
86076: PPUSH
86077: CALL 83899 0 3
// if cmd = 257 then
86081: LD_VAR 0 1
86085: PUSH
86086: LD_INT 257
86088: EQUAL
86089: IFFALSE 86110
// SetWarehouseGatheringPoint ( unit , x , y ) ;
86091: LD_VAR 0 2
86095: PPUSH
86096: LD_VAR 0 4
86100: PPUSH
86101: LD_VAR 0 5
86105: PPUSH
86106: CALL 84261 0 3
// end ;
86110: LD_VAR 0 6
86114: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
86115: LD_INT 0
86117: PPUSH
86118: PPUSH
86119: PPUSH
86120: PPUSH
86121: PPUSH
86122: PPUSH
86123: PPUSH
86124: PPUSH
86125: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
86126: LD_VAR 0 1
86130: NOT
86131: PUSH
86132: LD_VAR 0 2
86136: PPUSH
86137: LD_VAR 0 3
86141: PPUSH
86142: CALL_OW 488
86146: NOT
86147: OR
86148: PUSH
86149: LD_VAR 0 4
86153: NOT
86154: OR
86155: IFFALSE 86159
// exit ;
86157: GO 86499
// list := [ ] ;
86159: LD_ADDR_VAR 0 13
86163: PUSH
86164: EMPTY
86165: ST_TO_ADDR
// if x - r < 0 then
86166: LD_VAR 0 2
86170: PUSH
86171: LD_VAR 0 4
86175: MINUS
86176: PUSH
86177: LD_INT 0
86179: LESS
86180: IFFALSE 86192
// min_x := 0 else
86182: LD_ADDR_VAR 0 7
86186: PUSH
86187: LD_INT 0
86189: ST_TO_ADDR
86190: GO 86208
// min_x := x - r ;
86192: LD_ADDR_VAR 0 7
86196: PUSH
86197: LD_VAR 0 2
86201: PUSH
86202: LD_VAR 0 4
86206: MINUS
86207: ST_TO_ADDR
// if y - r < 0 then
86208: LD_VAR 0 3
86212: PUSH
86213: LD_VAR 0 4
86217: MINUS
86218: PUSH
86219: LD_INT 0
86221: LESS
86222: IFFALSE 86234
// min_y := 0 else
86224: LD_ADDR_VAR 0 8
86228: PUSH
86229: LD_INT 0
86231: ST_TO_ADDR
86232: GO 86250
// min_y := y - r ;
86234: LD_ADDR_VAR 0 8
86238: PUSH
86239: LD_VAR 0 3
86243: PUSH
86244: LD_VAR 0 4
86248: MINUS
86249: ST_TO_ADDR
// max_x := x + r ;
86250: LD_ADDR_VAR 0 9
86254: PUSH
86255: LD_VAR 0 2
86259: PUSH
86260: LD_VAR 0 4
86264: PLUS
86265: ST_TO_ADDR
// max_y := y + r ;
86266: LD_ADDR_VAR 0 10
86270: PUSH
86271: LD_VAR 0 3
86275: PUSH
86276: LD_VAR 0 4
86280: PLUS
86281: ST_TO_ADDR
// for _x = min_x to max_x do
86282: LD_ADDR_VAR 0 11
86286: PUSH
86287: DOUBLE
86288: LD_VAR 0 7
86292: DEC
86293: ST_TO_ADDR
86294: LD_VAR 0 9
86298: PUSH
86299: FOR_TO
86300: IFFALSE 86417
// for _y = min_y to max_y do
86302: LD_ADDR_VAR 0 12
86306: PUSH
86307: DOUBLE
86308: LD_VAR 0 8
86312: DEC
86313: ST_TO_ADDR
86314: LD_VAR 0 10
86318: PUSH
86319: FOR_TO
86320: IFFALSE 86413
// begin if not ValidHex ( _x , _y ) then
86322: LD_VAR 0 11
86326: PPUSH
86327: LD_VAR 0 12
86331: PPUSH
86332: CALL_OW 488
86336: NOT
86337: IFFALSE 86341
// continue ;
86339: GO 86319
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
86341: LD_VAR 0 11
86345: PPUSH
86346: LD_VAR 0 12
86350: PPUSH
86351: CALL_OW 351
86355: PUSH
86356: LD_VAR 0 11
86360: PPUSH
86361: LD_VAR 0 12
86365: PPUSH
86366: CALL_OW 554
86370: AND
86371: IFFALSE 86411
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
86373: LD_ADDR_VAR 0 13
86377: PUSH
86378: LD_VAR 0 13
86382: PPUSH
86383: LD_VAR 0 13
86387: PUSH
86388: LD_INT 1
86390: PLUS
86391: PPUSH
86392: LD_VAR 0 11
86396: PUSH
86397: LD_VAR 0 12
86401: PUSH
86402: EMPTY
86403: LIST
86404: LIST
86405: PPUSH
86406: CALL_OW 2
86410: ST_TO_ADDR
// end ;
86411: GO 86319
86413: POP
86414: POP
86415: GO 86299
86417: POP
86418: POP
// if not list then
86419: LD_VAR 0 13
86423: NOT
86424: IFFALSE 86428
// exit ;
86426: GO 86499
// for i in list do
86428: LD_ADDR_VAR 0 6
86432: PUSH
86433: LD_VAR 0 13
86437: PUSH
86438: FOR_IN
86439: IFFALSE 86497
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
86441: LD_VAR 0 1
86445: PPUSH
86446: LD_STRING M
86448: PUSH
86449: LD_VAR 0 6
86453: PUSH
86454: LD_INT 1
86456: ARRAY
86457: PUSH
86458: LD_VAR 0 6
86462: PUSH
86463: LD_INT 2
86465: ARRAY
86466: PUSH
86467: LD_INT 0
86469: PUSH
86470: LD_INT 0
86472: PUSH
86473: LD_INT 0
86475: PUSH
86476: LD_INT 0
86478: PUSH
86479: EMPTY
86480: LIST
86481: LIST
86482: LIST
86483: LIST
86484: LIST
86485: LIST
86486: LIST
86487: PUSH
86488: EMPTY
86489: LIST
86490: PPUSH
86491: CALL_OW 447
86495: GO 86438
86497: POP
86498: POP
// end ;
86499: LD_VAR 0 5
86503: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
86504: LD_EXP 133
86508: NOT
86509: IFFALSE 86559
86511: GO 86513
86513: DISABLE
// begin initHack := true ;
86514: LD_ADDR_EXP 133
86518: PUSH
86519: LD_INT 1
86521: ST_TO_ADDR
// hackTanks := [ ] ;
86522: LD_ADDR_EXP 134
86526: PUSH
86527: EMPTY
86528: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
86529: LD_ADDR_EXP 135
86533: PUSH
86534: EMPTY
86535: ST_TO_ADDR
// hackLimit := 3 ;
86536: LD_ADDR_EXP 136
86540: PUSH
86541: LD_INT 3
86543: ST_TO_ADDR
// hackDist := 12 ;
86544: LD_ADDR_EXP 137
86548: PUSH
86549: LD_INT 12
86551: ST_TO_ADDR
// hackCounter := [ ] ;
86552: LD_ADDR_EXP 138
86556: PUSH
86557: EMPTY
86558: ST_TO_ADDR
// end ;
86559: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
86560: LD_EXP 133
86564: PUSH
86565: LD_INT 34
86567: PUSH
86568: LD_INT 99
86570: PUSH
86571: EMPTY
86572: LIST
86573: LIST
86574: PPUSH
86575: CALL_OW 69
86579: AND
86580: IFFALSE 86833
86582: GO 86584
86584: DISABLE
86585: LD_INT 0
86587: PPUSH
86588: PPUSH
// begin enable ;
86589: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
86590: LD_ADDR_VAR 0 1
86594: PUSH
86595: LD_INT 34
86597: PUSH
86598: LD_INT 99
86600: PUSH
86601: EMPTY
86602: LIST
86603: LIST
86604: PPUSH
86605: CALL_OW 69
86609: PUSH
86610: FOR_IN
86611: IFFALSE 86831
// begin if not i in hackTanks then
86613: LD_VAR 0 1
86617: PUSH
86618: LD_EXP 134
86622: IN
86623: NOT
86624: IFFALSE 86707
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
86626: LD_ADDR_EXP 134
86630: PUSH
86631: LD_EXP 134
86635: PPUSH
86636: LD_EXP 134
86640: PUSH
86641: LD_INT 1
86643: PLUS
86644: PPUSH
86645: LD_VAR 0 1
86649: PPUSH
86650: CALL_OW 1
86654: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
86655: LD_ADDR_EXP 135
86659: PUSH
86660: LD_EXP 135
86664: PPUSH
86665: LD_EXP 135
86669: PUSH
86670: LD_INT 1
86672: PLUS
86673: PPUSH
86674: EMPTY
86675: PPUSH
86676: CALL_OW 1
86680: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
86681: LD_ADDR_EXP 138
86685: PUSH
86686: LD_EXP 138
86690: PPUSH
86691: LD_EXP 138
86695: PUSH
86696: LD_INT 1
86698: PLUS
86699: PPUSH
86700: EMPTY
86701: PPUSH
86702: CALL_OW 1
86706: ST_TO_ADDR
// end ; if not IsOk ( i ) then
86707: LD_VAR 0 1
86711: PPUSH
86712: CALL_OW 302
86716: NOT
86717: IFFALSE 86730
// begin HackUnlinkAll ( i ) ;
86719: LD_VAR 0 1
86723: PPUSH
86724: CALL 86836 0 1
// continue ;
86728: GO 86610
// end ; HackCheckCapturedStatus ( i ) ;
86730: LD_VAR 0 1
86734: PPUSH
86735: CALL 87279 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
86739: LD_ADDR_VAR 0 2
86743: PUSH
86744: LD_INT 81
86746: PUSH
86747: LD_VAR 0 1
86751: PPUSH
86752: CALL_OW 255
86756: PUSH
86757: EMPTY
86758: LIST
86759: LIST
86760: PUSH
86761: LD_INT 33
86763: PUSH
86764: LD_INT 3
86766: PUSH
86767: EMPTY
86768: LIST
86769: LIST
86770: PUSH
86771: LD_INT 91
86773: PUSH
86774: LD_VAR 0 1
86778: PUSH
86779: LD_EXP 137
86783: PUSH
86784: EMPTY
86785: LIST
86786: LIST
86787: LIST
86788: PUSH
86789: LD_INT 50
86791: PUSH
86792: EMPTY
86793: LIST
86794: PUSH
86795: EMPTY
86796: LIST
86797: LIST
86798: LIST
86799: LIST
86800: PPUSH
86801: CALL_OW 69
86805: ST_TO_ADDR
// if not tmp then
86806: LD_VAR 0 2
86810: NOT
86811: IFFALSE 86815
// continue ;
86813: GO 86610
// HackLink ( i , tmp ) ;
86815: LD_VAR 0 1
86819: PPUSH
86820: LD_VAR 0 2
86824: PPUSH
86825: CALL 86972 0 2
// end ;
86829: GO 86610
86831: POP
86832: POP
// end ;
86833: PPOPN 2
86835: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
86836: LD_INT 0
86838: PPUSH
86839: PPUSH
86840: PPUSH
// if not hack in hackTanks then
86841: LD_VAR 0 1
86845: PUSH
86846: LD_EXP 134
86850: IN
86851: NOT
86852: IFFALSE 86856
// exit ;
86854: GO 86967
// index := GetElementIndex ( hackTanks , hack ) ;
86856: LD_ADDR_VAR 0 4
86860: PUSH
86861: LD_EXP 134
86865: PPUSH
86866: LD_VAR 0 1
86870: PPUSH
86871: CALL 32917 0 2
86875: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
86876: LD_EXP 135
86880: PUSH
86881: LD_VAR 0 4
86885: ARRAY
86886: IFFALSE 86967
// begin for i in hackTanksCaptured [ index ] do
86888: LD_ADDR_VAR 0 3
86892: PUSH
86893: LD_EXP 135
86897: PUSH
86898: LD_VAR 0 4
86902: ARRAY
86903: PUSH
86904: FOR_IN
86905: IFFALSE 86931
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
86907: LD_VAR 0 3
86911: PUSH
86912: LD_INT 1
86914: ARRAY
86915: PPUSH
86916: LD_VAR 0 3
86920: PUSH
86921: LD_INT 2
86923: ARRAY
86924: PPUSH
86925: CALL_OW 235
86929: GO 86904
86931: POP
86932: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
86933: LD_ADDR_EXP 135
86937: PUSH
86938: LD_EXP 135
86942: PPUSH
86943: LD_VAR 0 4
86947: PPUSH
86948: EMPTY
86949: PPUSH
86950: CALL_OW 1
86954: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
86955: LD_VAR 0 1
86959: PPUSH
86960: LD_INT 0
86962: PPUSH
86963: CALL_OW 505
// end ; end ;
86967: LD_VAR 0 2
86971: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
86972: LD_INT 0
86974: PPUSH
86975: PPUSH
86976: PPUSH
// if not hack in hackTanks or not vehicles then
86977: LD_VAR 0 1
86981: PUSH
86982: LD_EXP 134
86986: IN
86987: NOT
86988: PUSH
86989: LD_VAR 0 2
86993: NOT
86994: OR
86995: IFFALSE 86999
// exit ;
86997: GO 87274
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
86999: LD_ADDR_VAR 0 2
87003: PUSH
87004: LD_VAR 0 1
87008: PPUSH
87009: LD_VAR 0 2
87013: PPUSH
87014: LD_INT 1
87016: PPUSH
87017: LD_INT 1
87019: PPUSH
87020: CALL 33567 0 4
87024: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
87025: LD_ADDR_VAR 0 5
87029: PUSH
87030: LD_EXP 134
87034: PPUSH
87035: LD_VAR 0 1
87039: PPUSH
87040: CALL 32917 0 2
87044: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
87045: LD_EXP 135
87049: PUSH
87050: LD_VAR 0 5
87054: ARRAY
87055: PUSH
87056: LD_EXP 136
87060: LESS
87061: IFFALSE 87250
// begin for i := 1 to vehicles do
87063: LD_ADDR_VAR 0 4
87067: PUSH
87068: DOUBLE
87069: LD_INT 1
87071: DEC
87072: ST_TO_ADDR
87073: LD_VAR 0 2
87077: PUSH
87078: FOR_TO
87079: IFFALSE 87248
// begin if hackTanksCaptured [ index ] = hackLimit then
87081: LD_EXP 135
87085: PUSH
87086: LD_VAR 0 5
87090: ARRAY
87091: PUSH
87092: LD_EXP 136
87096: EQUAL
87097: IFFALSE 87101
// break ;
87099: GO 87248
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
87101: LD_ADDR_EXP 138
87105: PUSH
87106: LD_EXP 138
87110: PPUSH
87111: LD_VAR 0 5
87115: PPUSH
87116: LD_EXP 138
87120: PUSH
87121: LD_VAR 0 5
87125: ARRAY
87126: PUSH
87127: LD_INT 1
87129: PLUS
87130: PPUSH
87131: CALL_OW 1
87135: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
87136: LD_ADDR_EXP 135
87140: PUSH
87141: LD_EXP 135
87145: PPUSH
87146: LD_VAR 0 5
87150: PUSH
87151: LD_EXP 135
87155: PUSH
87156: LD_VAR 0 5
87160: ARRAY
87161: PUSH
87162: LD_INT 1
87164: PLUS
87165: PUSH
87166: EMPTY
87167: LIST
87168: LIST
87169: PPUSH
87170: LD_VAR 0 2
87174: PUSH
87175: LD_VAR 0 4
87179: ARRAY
87180: PUSH
87181: LD_VAR 0 2
87185: PUSH
87186: LD_VAR 0 4
87190: ARRAY
87191: PPUSH
87192: CALL_OW 255
87196: PUSH
87197: EMPTY
87198: LIST
87199: LIST
87200: PPUSH
87201: CALL 33132 0 3
87205: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
87206: LD_VAR 0 2
87210: PUSH
87211: LD_VAR 0 4
87215: ARRAY
87216: PPUSH
87217: LD_VAR 0 1
87221: PPUSH
87222: CALL_OW 255
87226: PPUSH
87227: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
87231: LD_VAR 0 2
87235: PUSH
87236: LD_VAR 0 4
87240: ARRAY
87241: PPUSH
87242: CALL_OW 141
// end ;
87246: GO 87078
87248: POP
87249: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
87250: LD_VAR 0 1
87254: PPUSH
87255: LD_EXP 135
87259: PUSH
87260: LD_VAR 0 5
87264: ARRAY
87265: PUSH
87266: LD_INT 0
87268: PLUS
87269: PPUSH
87270: CALL_OW 505
// end ;
87274: LD_VAR 0 3
87278: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
87279: LD_INT 0
87281: PPUSH
87282: PPUSH
87283: PPUSH
87284: PPUSH
// if not hack in hackTanks then
87285: LD_VAR 0 1
87289: PUSH
87290: LD_EXP 134
87294: IN
87295: NOT
87296: IFFALSE 87300
// exit ;
87298: GO 87540
// index := GetElementIndex ( hackTanks , hack ) ;
87300: LD_ADDR_VAR 0 4
87304: PUSH
87305: LD_EXP 134
87309: PPUSH
87310: LD_VAR 0 1
87314: PPUSH
87315: CALL 32917 0 2
87319: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
87320: LD_ADDR_VAR 0 3
87324: PUSH
87325: DOUBLE
87326: LD_EXP 135
87330: PUSH
87331: LD_VAR 0 4
87335: ARRAY
87336: INC
87337: ST_TO_ADDR
87338: LD_INT 1
87340: PUSH
87341: FOR_DOWNTO
87342: IFFALSE 87514
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
87344: LD_ADDR_VAR 0 5
87348: PUSH
87349: LD_EXP 135
87353: PUSH
87354: LD_VAR 0 4
87358: ARRAY
87359: PUSH
87360: LD_VAR 0 3
87364: ARRAY
87365: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
87366: LD_VAR 0 5
87370: PUSH
87371: LD_INT 1
87373: ARRAY
87374: PPUSH
87375: CALL_OW 302
87379: NOT
87380: PUSH
87381: LD_VAR 0 5
87385: PUSH
87386: LD_INT 1
87388: ARRAY
87389: PPUSH
87390: CALL_OW 255
87394: PUSH
87395: LD_VAR 0 1
87399: PPUSH
87400: CALL_OW 255
87404: NONEQUAL
87405: OR
87406: IFFALSE 87512
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
87408: LD_VAR 0 5
87412: PUSH
87413: LD_INT 1
87415: ARRAY
87416: PPUSH
87417: CALL_OW 305
87421: PUSH
87422: LD_VAR 0 5
87426: PUSH
87427: LD_INT 1
87429: ARRAY
87430: PPUSH
87431: CALL_OW 255
87435: PUSH
87436: LD_VAR 0 1
87440: PPUSH
87441: CALL_OW 255
87445: EQUAL
87446: AND
87447: IFFALSE 87471
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
87449: LD_VAR 0 5
87453: PUSH
87454: LD_INT 1
87456: ARRAY
87457: PPUSH
87458: LD_VAR 0 5
87462: PUSH
87463: LD_INT 2
87465: ARRAY
87466: PPUSH
87467: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
87471: LD_ADDR_EXP 135
87475: PUSH
87476: LD_EXP 135
87480: PPUSH
87481: LD_VAR 0 4
87485: PPUSH
87486: LD_EXP 135
87490: PUSH
87491: LD_VAR 0 4
87495: ARRAY
87496: PPUSH
87497: LD_VAR 0 3
87501: PPUSH
87502: CALL_OW 3
87506: PPUSH
87507: CALL_OW 1
87511: ST_TO_ADDR
// end ; end ;
87512: GO 87341
87514: POP
87515: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
87516: LD_VAR 0 1
87520: PPUSH
87521: LD_EXP 135
87525: PUSH
87526: LD_VAR 0 4
87530: ARRAY
87531: PUSH
87532: LD_INT 0
87534: PLUS
87535: PPUSH
87536: CALL_OW 505
// end ;
87540: LD_VAR 0 2
87544: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
87545: LD_INT 0
87547: PPUSH
87548: PPUSH
87549: PPUSH
87550: PPUSH
// if not hack in hackTanks then
87551: LD_VAR 0 1
87555: PUSH
87556: LD_EXP 134
87560: IN
87561: NOT
87562: IFFALSE 87566
// exit ;
87564: GO 87651
// index := GetElementIndex ( hackTanks , hack ) ;
87566: LD_ADDR_VAR 0 5
87570: PUSH
87571: LD_EXP 134
87575: PPUSH
87576: LD_VAR 0 1
87580: PPUSH
87581: CALL 32917 0 2
87585: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
87586: LD_ADDR_VAR 0 4
87590: PUSH
87591: DOUBLE
87592: LD_INT 1
87594: DEC
87595: ST_TO_ADDR
87596: LD_EXP 135
87600: PUSH
87601: LD_VAR 0 5
87605: ARRAY
87606: PUSH
87607: FOR_TO
87608: IFFALSE 87649
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
87610: LD_EXP 135
87614: PUSH
87615: LD_VAR 0 5
87619: ARRAY
87620: PUSH
87621: LD_VAR 0 4
87625: ARRAY
87626: PUSH
87627: LD_INT 1
87629: ARRAY
87630: PUSH
87631: LD_VAR 0 2
87635: EQUAL
87636: IFFALSE 87647
// KillUnit ( vehicle ) ;
87638: LD_VAR 0 2
87642: PPUSH
87643: CALL_OW 66
87647: GO 87607
87649: POP
87650: POP
// end ;
87651: LD_VAR 0 3
87655: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
87656: LD_EXP 139
87660: NOT
87661: IFFALSE 87696
87663: GO 87665
87665: DISABLE
// begin initMiner := true ;
87666: LD_ADDR_EXP 139
87670: PUSH
87671: LD_INT 1
87673: ST_TO_ADDR
// minersList := [ ] ;
87674: LD_ADDR_EXP 140
87678: PUSH
87679: EMPTY
87680: ST_TO_ADDR
// minerMinesList := [ ] ;
87681: LD_ADDR_EXP 141
87685: PUSH
87686: EMPTY
87687: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
87688: LD_ADDR_EXP 142
87692: PUSH
87693: LD_INT 5
87695: ST_TO_ADDR
// end ;
87696: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
87697: LD_EXP 139
87701: PUSH
87702: LD_INT 34
87704: PUSH
87705: LD_INT 81
87707: PUSH
87708: EMPTY
87709: LIST
87710: LIST
87711: PPUSH
87712: CALL_OW 69
87716: AND
87717: IFFALSE 88178
87719: GO 87721
87721: DISABLE
87722: LD_INT 0
87724: PPUSH
87725: PPUSH
87726: PPUSH
87727: PPUSH
// begin enable ;
87728: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
87729: LD_ADDR_VAR 0 1
87733: PUSH
87734: LD_INT 34
87736: PUSH
87737: LD_INT 81
87739: PUSH
87740: EMPTY
87741: LIST
87742: LIST
87743: PPUSH
87744: CALL_OW 69
87748: PUSH
87749: FOR_IN
87750: IFFALSE 87822
// begin if not i in minersList then
87752: LD_VAR 0 1
87756: PUSH
87757: LD_EXP 140
87761: IN
87762: NOT
87763: IFFALSE 87820
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
87765: LD_ADDR_EXP 140
87769: PUSH
87770: LD_EXP 140
87774: PPUSH
87775: LD_EXP 140
87779: PUSH
87780: LD_INT 1
87782: PLUS
87783: PPUSH
87784: LD_VAR 0 1
87788: PPUSH
87789: CALL_OW 1
87793: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
87794: LD_ADDR_EXP 141
87798: PUSH
87799: LD_EXP 141
87803: PPUSH
87804: LD_EXP 141
87808: PUSH
87809: LD_INT 1
87811: PLUS
87812: PPUSH
87813: EMPTY
87814: PPUSH
87815: CALL_OW 1
87819: ST_TO_ADDR
// end end ;
87820: GO 87749
87822: POP
87823: POP
// for i := minerMinesList downto 1 do
87824: LD_ADDR_VAR 0 1
87828: PUSH
87829: DOUBLE
87830: LD_EXP 141
87834: INC
87835: ST_TO_ADDR
87836: LD_INT 1
87838: PUSH
87839: FOR_DOWNTO
87840: IFFALSE 88176
// begin if IsLive ( minersList [ i ] ) then
87842: LD_EXP 140
87846: PUSH
87847: LD_VAR 0 1
87851: ARRAY
87852: PPUSH
87853: CALL_OW 300
87857: IFFALSE 87885
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
87859: LD_EXP 140
87863: PUSH
87864: LD_VAR 0 1
87868: ARRAY
87869: PPUSH
87870: LD_EXP 141
87874: PUSH
87875: LD_VAR 0 1
87879: ARRAY
87880: PPUSH
87881: CALL_OW 505
// if not minerMinesList [ i ] then
87885: LD_EXP 141
87889: PUSH
87890: LD_VAR 0 1
87894: ARRAY
87895: NOT
87896: IFFALSE 87900
// continue ;
87898: GO 87839
// for j := minerMinesList [ i ] downto 1 do
87900: LD_ADDR_VAR 0 2
87904: PUSH
87905: DOUBLE
87906: LD_EXP 141
87910: PUSH
87911: LD_VAR 0 1
87915: ARRAY
87916: INC
87917: ST_TO_ADDR
87918: LD_INT 1
87920: PUSH
87921: FOR_DOWNTO
87922: IFFALSE 88172
// begin side := GetSide ( minersList [ i ] ) ;
87924: LD_ADDR_VAR 0 3
87928: PUSH
87929: LD_EXP 140
87933: PUSH
87934: LD_VAR 0 1
87938: ARRAY
87939: PPUSH
87940: CALL_OW 255
87944: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
87945: LD_ADDR_VAR 0 4
87949: PUSH
87950: LD_EXP 141
87954: PUSH
87955: LD_VAR 0 1
87959: ARRAY
87960: PUSH
87961: LD_VAR 0 2
87965: ARRAY
87966: PUSH
87967: LD_INT 1
87969: ARRAY
87970: PPUSH
87971: LD_EXP 141
87975: PUSH
87976: LD_VAR 0 1
87980: ARRAY
87981: PUSH
87982: LD_VAR 0 2
87986: ARRAY
87987: PUSH
87988: LD_INT 2
87990: ARRAY
87991: PPUSH
87992: CALL_OW 428
87996: ST_TO_ADDR
// if not tmp then
87997: LD_VAR 0 4
88001: NOT
88002: IFFALSE 88006
// continue ;
88004: GO 87921
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
88006: LD_VAR 0 4
88010: PUSH
88011: LD_INT 81
88013: PUSH
88014: LD_VAR 0 3
88018: PUSH
88019: EMPTY
88020: LIST
88021: LIST
88022: PPUSH
88023: CALL_OW 69
88027: IN
88028: PUSH
88029: LD_EXP 141
88033: PUSH
88034: LD_VAR 0 1
88038: ARRAY
88039: PUSH
88040: LD_VAR 0 2
88044: ARRAY
88045: PUSH
88046: LD_INT 1
88048: ARRAY
88049: PPUSH
88050: LD_EXP 141
88054: PUSH
88055: LD_VAR 0 1
88059: ARRAY
88060: PUSH
88061: LD_VAR 0 2
88065: ARRAY
88066: PUSH
88067: LD_INT 2
88069: ARRAY
88070: PPUSH
88071: CALL_OW 458
88075: AND
88076: IFFALSE 88170
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
88078: LD_EXP 141
88082: PUSH
88083: LD_VAR 0 1
88087: ARRAY
88088: PUSH
88089: LD_VAR 0 2
88093: ARRAY
88094: PUSH
88095: LD_INT 1
88097: ARRAY
88098: PPUSH
88099: LD_EXP 141
88103: PUSH
88104: LD_VAR 0 1
88108: ARRAY
88109: PUSH
88110: LD_VAR 0 2
88114: ARRAY
88115: PUSH
88116: LD_INT 2
88118: ARRAY
88119: PPUSH
88120: LD_VAR 0 3
88124: PPUSH
88125: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
88129: LD_ADDR_EXP 141
88133: PUSH
88134: LD_EXP 141
88138: PPUSH
88139: LD_VAR 0 1
88143: PPUSH
88144: LD_EXP 141
88148: PUSH
88149: LD_VAR 0 1
88153: ARRAY
88154: PPUSH
88155: LD_VAR 0 2
88159: PPUSH
88160: CALL_OW 3
88164: PPUSH
88165: CALL_OW 1
88169: ST_TO_ADDR
// end ; end ;
88170: GO 87921
88172: POP
88173: POP
// end ;
88174: GO 87839
88176: POP
88177: POP
// end ;
88178: PPOPN 4
88180: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
88181: LD_INT 0
88183: PPUSH
88184: PPUSH
// result := false ;
88185: LD_ADDR_VAR 0 4
88189: PUSH
88190: LD_INT 0
88192: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
88193: LD_VAR 0 1
88197: PPUSH
88198: CALL_OW 264
88202: PUSH
88203: LD_INT 81
88205: EQUAL
88206: NOT
88207: IFFALSE 88211
// exit ;
88209: GO 88451
// index := GetElementIndex ( minersList , unit ) ;
88211: LD_ADDR_VAR 0 5
88215: PUSH
88216: LD_EXP 140
88220: PPUSH
88221: LD_VAR 0 1
88225: PPUSH
88226: CALL 32917 0 2
88230: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
88231: LD_EXP 141
88235: PUSH
88236: LD_VAR 0 5
88240: ARRAY
88241: PUSH
88242: LD_EXP 142
88246: GREATEREQUAL
88247: IFFALSE 88251
// exit ;
88249: GO 88451
// ComMoveXY ( unit , x , y ) ;
88251: LD_VAR 0 1
88255: PPUSH
88256: LD_VAR 0 2
88260: PPUSH
88261: LD_VAR 0 3
88265: PPUSH
88266: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
88270: LD_INT 35
88272: PPUSH
88273: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
88277: LD_VAR 0 1
88281: PPUSH
88282: LD_VAR 0 2
88286: PPUSH
88287: LD_VAR 0 3
88291: PPUSH
88292: CALL 64272 0 3
88296: NOT
88297: PUSH
88298: LD_VAR 0 1
88302: PPUSH
88303: CALL_OW 314
88307: AND
88308: IFFALSE 88312
// exit ;
88310: GO 88451
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
88312: LD_VAR 0 2
88316: PPUSH
88317: LD_VAR 0 3
88321: PPUSH
88322: CALL_OW 428
88326: PUSH
88327: LD_VAR 0 1
88331: EQUAL
88332: PUSH
88333: LD_VAR 0 1
88337: PPUSH
88338: CALL_OW 314
88342: NOT
88343: AND
88344: IFFALSE 88270
// PlaySoundXY ( x , y , PlantMine ) ;
88346: LD_VAR 0 2
88350: PPUSH
88351: LD_VAR 0 3
88355: PPUSH
88356: LD_STRING PlantMine
88358: PPUSH
88359: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
88363: LD_VAR 0 2
88367: PPUSH
88368: LD_VAR 0 3
88372: PPUSH
88373: LD_VAR 0 1
88377: PPUSH
88378: CALL_OW 255
88382: PPUSH
88383: LD_INT 0
88385: PPUSH
88386: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
88390: LD_ADDR_EXP 141
88394: PUSH
88395: LD_EXP 141
88399: PPUSH
88400: LD_VAR 0 5
88404: PUSH
88405: LD_EXP 141
88409: PUSH
88410: LD_VAR 0 5
88414: ARRAY
88415: PUSH
88416: LD_INT 1
88418: PLUS
88419: PUSH
88420: EMPTY
88421: LIST
88422: LIST
88423: PPUSH
88424: LD_VAR 0 2
88428: PUSH
88429: LD_VAR 0 3
88433: PUSH
88434: EMPTY
88435: LIST
88436: LIST
88437: PPUSH
88438: CALL 33132 0 3
88442: ST_TO_ADDR
// result := true ;
88443: LD_ADDR_VAR 0 4
88447: PUSH
88448: LD_INT 1
88450: ST_TO_ADDR
// end ;
88451: LD_VAR 0 4
88455: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
88456: LD_INT 0
88458: PPUSH
88459: PPUSH
88460: PPUSH
// if not unit in minersList then
88461: LD_VAR 0 1
88465: PUSH
88466: LD_EXP 140
88470: IN
88471: NOT
88472: IFFALSE 88476
// exit ;
88474: GO 88868
// index := GetElementIndex ( minersList , unit ) ;
88476: LD_ADDR_VAR 0 6
88480: PUSH
88481: LD_EXP 140
88485: PPUSH
88486: LD_VAR 0 1
88490: PPUSH
88491: CALL 32917 0 2
88495: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
88496: LD_ADDR_VAR 0 5
88500: PUSH
88501: DOUBLE
88502: LD_EXP 141
88506: PUSH
88507: LD_VAR 0 6
88511: ARRAY
88512: INC
88513: ST_TO_ADDR
88514: LD_INT 1
88516: PUSH
88517: FOR_DOWNTO
88518: IFFALSE 88679
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
88520: LD_EXP 141
88524: PUSH
88525: LD_VAR 0 6
88529: ARRAY
88530: PUSH
88531: LD_VAR 0 5
88535: ARRAY
88536: PUSH
88537: LD_INT 1
88539: ARRAY
88540: PUSH
88541: LD_VAR 0 2
88545: EQUAL
88546: PUSH
88547: LD_EXP 141
88551: PUSH
88552: LD_VAR 0 6
88556: ARRAY
88557: PUSH
88558: LD_VAR 0 5
88562: ARRAY
88563: PUSH
88564: LD_INT 2
88566: ARRAY
88567: PUSH
88568: LD_VAR 0 3
88572: EQUAL
88573: AND
88574: IFFALSE 88677
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
88576: LD_EXP 141
88580: PUSH
88581: LD_VAR 0 6
88585: ARRAY
88586: PUSH
88587: LD_VAR 0 5
88591: ARRAY
88592: PUSH
88593: LD_INT 1
88595: ARRAY
88596: PPUSH
88597: LD_EXP 141
88601: PUSH
88602: LD_VAR 0 6
88606: ARRAY
88607: PUSH
88608: LD_VAR 0 5
88612: ARRAY
88613: PUSH
88614: LD_INT 2
88616: ARRAY
88617: PPUSH
88618: LD_VAR 0 1
88622: PPUSH
88623: CALL_OW 255
88627: PPUSH
88628: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88632: LD_ADDR_EXP 141
88636: PUSH
88637: LD_EXP 141
88641: PPUSH
88642: LD_VAR 0 6
88646: PPUSH
88647: LD_EXP 141
88651: PUSH
88652: LD_VAR 0 6
88656: ARRAY
88657: PPUSH
88658: LD_VAR 0 5
88662: PPUSH
88663: CALL_OW 3
88667: PPUSH
88668: CALL_OW 1
88672: ST_TO_ADDR
// exit ;
88673: POP
88674: POP
88675: GO 88868
// end ; end ;
88677: GO 88517
88679: POP
88680: POP
// for i := minerMinesList [ index ] downto 1 do
88681: LD_ADDR_VAR 0 5
88685: PUSH
88686: DOUBLE
88687: LD_EXP 141
88691: PUSH
88692: LD_VAR 0 6
88696: ARRAY
88697: INC
88698: ST_TO_ADDR
88699: LD_INT 1
88701: PUSH
88702: FOR_DOWNTO
88703: IFFALSE 88866
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
88705: LD_EXP 141
88709: PUSH
88710: LD_VAR 0 6
88714: ARRAY
88715: PUSH
88716: LD_VAR 0 5
88720: ARRAY
88721: PUSH
88722: LD_INT 1
88724: ARRAY
88725: PPUSH
88726: LD_EXP 141
88730: PUSH
88731: LD_VAR 0 6
88735: ARRAY
88736: PUSH
88737: LD_VAR 0 5
88741: ARRAY
88742: PUSH
88743: LD_INT 2
88745: ARRAY
88746: PPUSH
88747: LD_VAR 0 2
88751: PPUSH
88752: LD_VAR 0 3
88756: PPUSH
88757: CALL_OW 298
88761: PUSH
88762: LD_INT 6
88764: LESS
88765: IFFALSE 88864
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
88767: LD_EXP 141
88771: PUSH
88772: LD_VAR 0 6
88776: ARRAY
88777: PUSH
88778: LD_VAR 0 5
88782: ARRAY
88783: PUSH
88784: LD_INT 1
88786: ARRAY
88787: PPUSH
88788: LD_EXP 141
88792: PUSH
88793: LD_VAR 0 6
88797: ARRAY
88798: PUSH
88799: LD_VAR 0 5
88803: ARRAY
88804: PUSH
88805: LD_INT 2
88807: ARRAY
88808: PPUSH
88809: LD_VAR 0 1
88813: PPUSH
88814: CALL_OW 255
88818: PPUSH
88819: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88823: LD_ADDR_EXP 141
88827: PUSH
88828: LD_EXP 141
88832: PPUSH
88833: LD_VAR 0 6
88837: PPUSH
88838: LD_EXP 141
88842: PUSH
88843: LD_VAR 0 6
88847: ARRAY
88848: PPUSH
88849: LD_VAR 0 5
88853: PPUSH
88854: CALL_OW 3
88858: PPUSH
88859: CALL_OW 1
88863: ST_TO_ADDR
// end ; end ;
88864: GO 88702
88866: POP
88867: POP
// end ;
88868: LD_VAR 0 4
88872: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
88873: LD_INT 0
88875: PPUSH
88876: PPUSH
88877: PPUSH
88878: PPUSH
88879: PPUSH
88880: PPUSH
88881: PPUSH
88882: PPUSH
88883: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
88884: LD_VAR 0 1
88888: PPUSH
88889: CALL_OW 264
88893: PUSH
88894: LD_INT 81
88896: EQUAL
88897: NOT
88898: PUSH
88899: LD_VAR 0 1
88903: PUSH
88904: LD_EXP 140
88908: IN
88909: NOT
88910: OR
88911: IFFALSE 88915
// exit ;
88913: GO 89237
// index := GetElementIndex ( minersList , unit ) ;
88915: LD_ADDR_VAR 0 6
88919: PUSH
88920: LD_EXP 140
88924: PPUSH
88925: LD_VAR 0 1
88929: PPUSH
88930: CALL 32917 0 2
88934: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
88935: LD_ADDR_VAR 0 8
88939: PUSH
88940: LD_EXP 142
88944: PUSH
88945: LD_EXP 141
88949: PUSH
88950: LD_VAR 0 6
88954: ARRAY
88955: MINUS
88956: ST_TO_ADDR
// if not minesFreeAmount then
88957: LD_VAR 0 8
88961: NOT
88962: IFFALSE 88966
// exit ;
88964: GO 89237
// tmp := [ ] ;
88966: LD_ADDR_VAR 0 7
88970: PUSH
88971: EMPTY
88972: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
88973: LD_ADDR_VAR 0 5
88977: PUSH
88978: DOUBLE
88979: LD_INT 1
88981: DEC
88982: ST_TO_ADDR
88983: LD_VAR 0 8
88987: PUSH
88988: FOR_TO
88989: IFFALSE 89184
// begin _d := rand ( 0 , 5 ) ;
88991: LD_ADDR_VAR 0 11
88995: PUSH
88996: LD_INT 0
88998: PPUSH
88999: LD_INT 5
89001: PPUSH
89002: CALL_OW 12
89006: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
89007: LD_ADDR_VAR 0 12
89011: PUSH
89012: LD_INT 2
89014: PPUSH
89015: LD_INT 6
89017: PPUSH
89018: CALL_OW 12
89022: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
89023: LD_ADDR_VAR 0 9
89027: PUSH
89028: LD_VAR 0 2
89032: PPUSH
89033: LD_VAR 0 11
89037: PPUSH
89038: LD_VAR 0 12
89042: PPUSH
89043: CALL_OW 272
89047: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
89048: LD_ADDR_VAR 0 10
89052: PUSH
89053: LD_VAR 0 3
89057: PPUSH
89058: LD_VAR 0 11
89062: PPUSH
89063: LD_VAR 0 12
89067: PPUSH
89068: CALL_OW 273
89072: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
89073: LD_VAR 0 9
89077: PPUSH
89078: LD_VAR 0 10
89082: PPUSH
89083: CALL_OW 488
89087: PUSH
89088: LD_VAR 0 9
89092: PUSH
89093: LD_VAR 0 10
89097: PUSH
89098: EMPTY
89099: LIST
89100: LIST
89101: PUSH
89102: LD_VAR 0 7
89106: IN
89107: NOT
89108: AND
89109: PUSH
89110: LD_VAR 0 9
89114: PPUSH
89115: LD_VAR 0 10
89119: PPUSH
89120: CALL_OW 458
89124: NOT
89125: AND
89126: IFFALSE 89168
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
89128: LD_ADDR_VAR 0 7
89132: PUSH
89133: LD_VAR 0 7
89137: PPUSH
89138: LD_VAR 0 7
89142: PUSH
89143: LD_INT 1
89145: PLUS
89146: PPUSH
89147: LD_VAR 0 9
89151: PUSH
89152: LD_VAR 0 10
89156: PUSH
89157: EMPTY
89158: LIST
89159: LIST
89160: PPUSH
89161: CALL_OW 1
89165: ST_TO_ADDR
89166: GO 89182
// i := i - 1 ;
89168: LD_ADDR_VAR 0 5
89172: PUSH
89173: LD_VAR 0 5
89177: PUSH
89178: LD_INT 1
89180: MINUS
89181: ST_TO_ADDR
// end ;
89182: GO 88988
89184: POP
89185: POP
// for i in tmp do
89186: LD_ADDR_VAR 0 5
89190: PUSH
89191: LD_VAR 0 7
89195: PUSH
89196: FOR_IN
89197: IFFALSE 89235
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
89199: LD_VAR 0 1
89203: PPUSH
89204: LD_VAR 0 5
89208: PUSH
89209: LD_INT 1
89211: ARRAY
89212: PPUSH
89213: LD_VAR 0 5
89217: PUSH
89218: LD_INT 2
89220: ARRAY
89221: PPUSH
89222: CALL 88181 0 3
89226: NOT
89227: IFFALSE 89233
// exit ;
89229: POP
89230: POP
89231: GO 89237
89233: GO 89196
89235: POP
89236: POP
// end ;
89237: LD_VAR 0 4
89241: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
89242: LD_INT 0
89244: PPUSH
89245: PPUSH
89246: PPUSH
89247: PPUSH
89248: PPUSH
89249: PPUSH
89250: PPUSH
// if not GetClass ( unit ) = class_sniper then
89251: LD_VAR 0 1
89255: PPUSH
89256: CALL_OW 257
89260: PUSH
89261: LD_INT 5
89263: EQUAL
89264: NOT
89265: IFFALSE 89269
// exit ;
89267: GO 89657
// dist := 8 ;
89269: LD_ADDR_VAR 0 5
89273: PUSH
89274: LD_INT 8
89276: ST_TO_ADDR
// viewRange := 12 ;
89277: LD_ADDR_VAR 0 7
89281: PUSH
89282: LD_INT 12
89284: ST_TO_ADDR
// side := GetSide ( unit ) ;
89285: LD_ADDR_VAR 0 6
89289: PUSH
89290: LD_VAR 0 1
89294: PPUSH
89295: CALL_OW 255
89299: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
89300: LD_INT 61
89302: PPUSH
89303: LD_VAR 0 6
89307: PPUSH
89308: CALL_OW 321
89312: PUSH
89313: LD_INT 2
89315: EQUAL
89316: IFFALSE 89326
// viewRange := 16 ;
89318: LD_ADDR_VAR 0 7
89322: PUSH
89323: LD_INT 16
89325: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
89326: LD_VAR 0 1
89330: PPUSH
89331: LD_VAR 0 2
89335: PPUSH
89336: LD_VAR 0 3
89340: PPUSH
89341: CALL_OW 297
89345: PUSH
89346: LD_VAR 0 5
89350: GREATER
89351: IFFALSE 89430
// begin ComMoveXY ( unit , x , y ) ;
89353: LD_VAR 0 1
89357: PPUSH
89358: LD_VAR 0 2
89362: PPUSH
89363: LD_VAR 0 3
89367: PPUSH
89368: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
89372: LD_INT 35
89374: PPUSH
89375: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
89379: LD_VAR 0 1
89383: PPUSH
89384: LD_VAR 0 2
89388: PPUSH
89389: LD_VAR 0 3
89393: PPUSH
89394: CALL 64272 0 3
89398: NOT
89399: IFFALSE 89403
// exit ;
89401: GO 89657
// until GetDistUnitXY ( unit , x , y ) < dist ;
89403: LD_VAR 0 1
89407: PPUSH
89408: LD_VAR 0 2
89412: PPUSH
89413: LD_VAR 0 3
89417: PPUSH
89418: CALL_OW 297
89422: PUSH
89423: LD_VAR 0 5
89427: LESS
89428: IFFALSE 89372
// end ; ComTurnXY ( unit , x , y ) ;
89430: LD_VAR 0 1
89434: PPUSH
89435: LD_VAR 0 2
89439: PPUSH
89440: LD_VAR 0 3
89444: PPUSH
89445: CALL_OW 118
// wait ( 5 ) ;
89449: LD_INT 5
89451: PPUSH
89452: CALL_OW 67
// _d := GetDir ( unit ) ;
89456: LD_ADDR_VAR 0 10
89460: PUSH
89461: LD_VAR 0 1
89465: PPUSH
89466: CALL_OW 254
89470: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
89471: LD_ADDR_VAR 0 8
89475: PUSH
89476: LD_VAR 0 1
89480: PPUSH
89481: CALL_OW 250
89485: PPUSH
89486: LD_VAR 0 10
89490: PPUSH
89491: LD_VAR 0 5
89495: PPUSH
89496: CALL_OW 272
89500: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
89501: LD_ADDR_VAR 0 9
89505: PUSH
89506: LD_VAR 0 1
89510: PPUSH
89511: CALL_OW 251
89515: PPUSH
89516: LD_VAR 0 10
89520: PPUSH
89521: LD_VAR 0 5
89525: PPUSH
89526: CALL_OW 273
89530: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
89531: LD_VAR 0 8
89535: PPUSH
89536: LD_VAR 0 9
89540: PPUSH
89541: CALL_OW 488
89545: NOT
89546: IFFALSE 89550
// exit ;
89548: GO 89657
// ComAnimCustom ( unit , 1 ) ;
89550: LD_VAR 0 1
89554: PPUSH
89555: LD_INT 1
89557: PPUSH
89558: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
89562: LD_VAR 0 8
89566: PPUSH
89567: LD_VAR 0 9
89571: PPUSH
89572: LD_VAR 0 6
89576: PPUSH
89577: LD_VAR 0 7
89581: PPUSH
89582: CALL_OW 330
// repeat wait ( 1 ) ;
89586: LD_INT 1
89588: PPUSH
89589: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
89593: LD_VAR 0 1
89597: PPUSH
89598: CALL_OW 316
89602: PUSH
89603: LD_VAR 0 1
89607: PPUSH
89608: CALL_OW 314
89612: OR
89613: PUSH
89614: LD_VAR 0 1
89618: PPUSH
89619: CALL_OW 302
89623: NOT
89624: OR
89625: PUSH
89626: LD_VAR 0 1
89630: PPUSH
89631: CALL_OW 301
89635: OR
89636: IFFALSE 89586
// RemoveSeeing ( _x , _y , side ) ;
89638: LD_VAR 0 8
89642: PPUSH
89643: LD_VAR 0 9
89647: PPUSH
89648: LD_VAR 0 6
89652: PPUSH
89653: CALL_OW 331
// end ; end_of_file
89657: LD_VAR 0 4
89661: RET
// export function StopOriginalMusic ; begin
89662: LD_INT 0
89664: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
89665: LD_STRING OW_FORCEMUSICDISABLE(true);
89667: PPUSH
89668: CALL_OW 559
// end ;
89672: LD_VAR 0 1
89676: RET
// export function PlayOriginalMusic ; begin
89677: LD_INT 0
89679: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
89680: LD_STRING OW_FORCEMUSICDISABLE(false);
89682: PPUSH
89683: CALL_OW 559
// end ;
89687: LD_VAR 0 1
89691: RET
// export function PlayCustomMusic ( track , callback ) ; begin
89692: LD_INT 0
89694: PPUSH
// StopOriginalMusic ;
89695: CALL 89662 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
89699: LD_STRING playMusic("
89701: PUSH
89702: LD_VAR 0 1
89706: STR
89707: PUSH
89708: LD_STRING ", "
89710: STR
89711: PUSH
89712: LD_VAR 0 2
89716: STR
89717: PUSH
89718: LD_STRING ")
89720: STR
89721: PPUSH
89722: CALL_OW 559
// end ;
89726: LD_VAR 0 3
89730: RET
