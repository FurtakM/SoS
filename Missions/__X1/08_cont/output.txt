// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// InitEvents ;
   8: CALL 203 0 0
// PrepareRussian ;
  12: CALL 860 0 0
// PrepareArabian ;
  16: CALL 227 0 0
// Action ;
  20: CALL 1518 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// end ;
  37: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := true ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 1
  48: ST_TO_ADDR
// hasNormalScene := false ;
  49: LD_ADDR_EXP 5
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// prefix := 07_ ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_STRING 07_
  64: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  65: LD_ADDR_EXP 3
  69: PUSH
  70: LD_STRING 01_JohnnySaved
  72: PPUSH
  73: LD_INT 0
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// hasVodka := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  89: LD_ADDR_EXP 7
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// hasStimDrugs := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// hasExplosions := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanContact := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// hasSniperRifle := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasScout := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// hasMethanol := false ;
 137: LD_ADDR_EXP 12
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// heikeSquad := [ ] ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: EMPTY
 151: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 152: LD_ADDR_EXP 14
 156: PUSH
 157: LD_INT 10
 159: PPUSH
 160: LD_INT 21
 162: PUSH
 163: LD_INT 3
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: PPUSH
 170: CALL_OW 70
 174: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 175: LD_ADDR_EXP 15
 179: PUSH
 180: EMPTY
 181: ST_TO_ADDR
// isAlarm := false ;
 182: LD_ADDR_EXP 16
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 190: LD_ADDR_EXP 17
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// export eventCenterCamOnHeike , eventShowPlace ; function InitEvents ; begin
 203: LD_INT 0
 205: PPUSH
// eventCenterCamOnHeike := 1 ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// eventShowPlace := 1 ;
 214: LD_ADDR_EXP 19
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// end ; end_of_file
 222: LD_VAR 0 1
 226: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i ; begin
 227: LD_INT 0
 229: PPUSH
 230: PPUSH
// uc_side := 8 ;
 231: LD_ADDR_OWVAR 20
 235: PUSH
 236: LD_INT 8
 238: ST_TO_ADDR
// uc_nation := 2 ;
 239: LD_ADDR_OWVAR 21
 243: PUSH
 244: LD_INT 2
 246: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 247: LD_INT 0
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 0
 255: PPUSH
 256: CALL_OW 380
// CreateHuman ;
 260: CALL_OW 44
// uc_side := 4 ;
 264: LD_ADDR_OWVAR 20
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// uc_nation := 1 ;
 272: LD_ADDR_OWVAR 21
 276: PUSH
 277: LD_INT 1
 279: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 280: LD_ADDR_EXP 32
 284: PUSH
 285: LD_STRING 07_Americans
 287: PPUSH
 288: CALL_OW 31
 292: ST_TO_ADDR
// if americanSquad < 5 then
 293: LD_EXP 32
 297: PUSH
 298: LD_INT 5
 300: LESS
 301: IFFALSE 358
// begin for i := americanSquad to 5 do
 303: LD_ADDR_VAR 0 2
 307: PUSH
 308: DOUBLE
 309: LD_EXP 32
 313: DEC
 314: ST_TO_ADDR
 315: LD_INT 5
 317: PUSH
 318: FOR_TO
 319: IFFALSE 356
// begin PrepareHuman ( false , 2 , 6 ) ;
 321: LD_INT 0
 323: PPUSH
 324: LD_INT 2
 326: PPUSH
 327: LD_INT 6
 329: PPUSH
 330: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 334: LD_ADDR_EXP 32
 338: PUSH
 339: LD_EXP 32
 343: PPUSH
 344: CALL_OW 44
 348: PPUSH
 349: CALL 43761 0 2
 353: ST_TO_ADDR
// end ;
 354: GO 318
 356: POP
 357: POP
// end ; Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 358: LD_ADDR_EXP 34
 362: PUSH
 363: LD_STRING UsCommander
 365: PPUSH
 366: LD_EXP 1
 370: NOT
 371: PPUSH
 372: LD_STRING 07_
 374: PPUSH
 375: CALL 6377 0 3
 379: ST_TO_ADDR
// americanSquad := Join ( americanSquad , Doug ) ;
 380: LD_ADDR_EXP 32
 384: PUSH
 385: LD_EXP 32
 389: PPUSH
 390: LD_EXP 34
 394: PPUSH
 395: CALL 43761 0 2
 399: ST_TO_ADDR
// if johnnySaved or debug then
 400: LD_EXP 3
 404: PUSH
 405: LD_EXP 1
 409: OR
 410: IFFALSE 445
// begin Harris := NewCharacter ( Harris ) ;
 412: LD_ADDR_EXP 33
 416: PUSH
 417: LD_STRING Harris
 419: PPUSH
 420: CALL_OW 25
 424: ST_TO_ADDR
// americanSquad := Join ( americanSquad , Harris ) ;
 425: LD_ADDR_EXP 32
 429: PUSH
 430: LD_EXP 32
 434: PPUSH
 435: LD_EXP 33
 439: PPUSH
 440: CALL 43761 0 2
 444: ST_TO_ADDR
// end ; uc_side := 2 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 2
 452: ST_TO_ADDR
// uc_nation := 2 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 2
 460: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 461: LD_ADDR_EXP 20
 465: PUSH
 466: LD_STRING Heike
 468: PPUSH
 469: LD_EXP 1
 473: NOT
 474: PPUSH
 475: LD_EXP 2
 479: PPUSH
 480: CALL 6377 0 3
 484: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 485: LD_ADDR_EXP 23
 489: PUSH
 490: LD_STRING Ibrahim
 492: PPUSH
 493: LD_EXP 1
 497: NOT
 498: PPUSH
 499: LD_EXP 2
 503: PPUSH
 504: CALL 6377 0 3
 508: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 509: LD_ADDR_EXP 21
 513: PUSH
 514: LD_STRING Givi
 516: PPUSH
 517: LD_EXP 1
 521: NOT
 522: PPUSH
 523: LD_EXP 2
 527: PPUSH
 528: CALL 6377 0 3
 532: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 533: LD_ADDR_EXP 24
 537: PUSH
 538: LD_STRING Kamil
 540: PPUSH
 541: LD_EXP 1
 545: NOT
 546: PPUSH
 547: LD_EXP 2
 551: PPUSH
 552: CALL 6377 0 3
 556: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 557: LD_ADDR_EXP 25
 561: PUSH
 562: LD_STRING Kaia
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_EXP 2
 575: PPUSH
 576: CALL 6377 0 3
 580: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 581: LD_ADDR_EXP 26
 585: PUSH
 586: LD_STRING Sophia
 588: PPUSH
 589: LD_EXP 1
 593: NOT
 594: PPUSH
 595: LD_EXP 2
 599: PPUSH
 600: CALL 6377 0 3
 604: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 605: LD_ADDR_EXP 27
 609: PUSH
 610: LD_STRING Markov
 612: PPUSH
 613: LD_EXP 1
 617: NOT
 618: PPUSH
 619: LD_EXP 2
 623: PPUSH
 624: CALL 6377 0 3
 628: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 629: LD_ADDR_EXP 30
 633: PUSH
 634: LD_STRING Aviradze
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 2
 647: PPUSH
 648: CALL 6377 0 3
 652: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 653: LD_ADDR_EXP 29
 657: PUSH
 658: LD_STRING Kurt
 660: PPUSH
 661: LD_EXP 1
 665: NOT
 666: PPUSH
 667: LD_EXP 2
 671: PPUSH
 672: CALL 6377 0 3
 676: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 677: LD_ADDR_EXP 22
 681: PUSH
 682: LD_STRING Mike
 684: PPUSH
 685: LD_EXP 1
 689: NOT
 690: PPUSH
 691: LD_EXP 2
 695: PPUSH
 696: CALL 6377 0 3
 700: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 701: LD_ADDR_EXP 28
 705: PUSH
 706: LD_STRING Olaf
 708: PPUSH
 709: LD_INT 0
 711: PPUSH
 712: LD_STRING 
 714: PPUSH
 715: CALL 6377 0 3
 719: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 720: LD_ADDR_EXP 31
 724: PUSH
 725: LD_STRING 07_others
 727: PPUSH
 728: CALL_OW 31
 732: ST_TO_ADDR
// end ;
 733: LD_VAR 0 1
 737: RET
// export function PrepareGame ; begin
 738: LD_INT 0
 740: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 741: LD_EXP 20
 745: PPUSH
 746: LD_INT 23
 748: PPUSH
 749: CALL_OW 52
// if Givi then
 753: LD_EXP 21
 757: IFFALSE 795
// begin SetSide ( Givi , 5 ) ;
 759: LD_EXP 21
 763: PPUSH
 764: LD_INT 5
 766: PPUSH
 767: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
 771: LD_EXP 21
 775: PPUSH
 776: LD_INT 9
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// ComHold ( Givi ) ;
 786: LD_EXP 21
 790: PPUSH
 791: CALL_OW 140
// end ; if Markov then
 795: LD_EXP 27
 799: IFFALSE 825
// begin SetSide ( Markov , 5 ) ;
 801: LD_EXP 27
 805: PPUSH
 806: LD_INT 5
 808: PPUSH
 809: CALL_OW 235
// PlaceHumanInUnit ( Markov , ruFac ) ;
 813: LD_EXP 27
 817: PPUSH
 818: LD_INT 61
 820: PPUSH
 821: CALL_OW 52
// end ; if Kamil then
 825: LD_EXP 24
 829: IFFALSE 855
// begin SetSide ( Kamil , 5 ) ;
 831: LD_EXP 24
 835: PPUSH
 836: LD_INT 5
 838: PPUSH
 839: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
 843: LD_EXP 24
 847: PPUSH
 848: LD_INT 109
 850: PPUSH
 851: CALL_OW 52
// end ; end ; end_of_file
 855: LD_VAR 0 1
 859: RET
// export russianKillers ; export function PrepareRussian ; var i , tmp ; begin
 860: LD_INT 0
 862: PPUSH
 863: PPUSH
 864: PPUSH
// uc_side := 3 ;
 865: LD_ADDR_OWVAR 20
 869: PUSH
 870: LD_INT 3
 872: ST_TO_ADDR
// uc_nation := 3 ;
 873: LD_ADDR_OWVAR 21
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_INT 21
 888: PUSH
 889: LD_INT 3
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PPUSH
 896: CALL_OW 69
 900: PUSH
 901: FOR_IN
 902: IFFALSE 918
// SetBLevel ( i , 7 ) ;
 904: LD_VAR 0 2
 908: PPUSH
 909: LD_INT 7
 911: PPUSH
 912: CALL_OW 241
 916: GO 901
 918: POP
 919: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 920: LD_ADDR_VAR 0 2
 924: PUSH
 925: LD_INT 22
 927: PUSH
 928: LD_INT 3
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 2
 937: PUSH
 938: LD_INT 30
 940: PUSH
 941: LD_INT 0
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: LD_INT 30
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: LIST
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PPUSH
 967: CALL_OW 69
 971: PUSH
 972: FOR_IN
 973: IFFALSE 1017
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
 975: LD_VAR 0 2
 979: PPUSH
 980: CALL_OW 274
 984: PPUSH
 985: LD_INT 1
 987: PPUSH
 988: LD_INT 1000
 990: PPUSH
 991: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
 995: LD_VAR 0 2
 999: PPUSH
1000: CALL_OW 274
1004: PPUSH
1005: LD_INT 2
1007: PPUSH
1008: LD_INT 1000
1010: PPUSH
1011: CALL_OW 277
// end ;
1015: GO 972
1017: POP
1018: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1019: LD_ADDR_VAR 0 2
1023: PUSH
1024: LD_INT 22
1026: PUSH
1027: LD_INT 3
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: LD_INT 30
1036: PUSH
1037: LD_INT 32
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PPUSH
1048: CALL_OW 69
1052: PUSH
1053: FOR_IN
1054: IFFALSE 1088
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
1056: LD_INT 0
1058: PPUSH
1059: LD_INT 5
1061: PUSH
1062: LD_OWVAR 67
1066: PLUS
1067: PPUSH
1068: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
1072: CALL_OW 44
1076: PPUSH
1077: LD_VAR 0 2
1081: PPUSH
1082: CALL_OW 52
// end ;
1086: GO 1053
1088: POP
1089: POP
// end ;
1090: LD_VAR 0 1
1094: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
1095: LD_INT 0
1097: PPUSH
1098: PPUSH
1099: PPUSH
1100: PPUSH
// uc_side := 3 ;
1101: LD_ADDR_OWVAR 20
1105: PUSH
1106: LD_INT 3
1108: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
1109: LD_ADDR_OWVAR 21
1113: PUSH
1114: LD_INT 1
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 12
1124: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
1125: LD_ADDR_VAR 0 4
1129: PUSH
1130: LD_INT 5
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 517
1140: ST_TO_ADDR
// for i := 1 to 3 do
1141: LD_ADDR_VAR 0 2
1145: PUSH
1146: DOUBLE
1147: LD_INT 1
1149: DEC
1150: ST_TO_ADDR
1151: LD_INT 3
1153: PUSH
1154: FOR_TO
1155: IFFALSE 1224
// begin PrepareHuman ( false , 33 , 0 ) ;
1157: LD_INT 0
1159: PPUSH
1160: LD_INT 33
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 380
// un := CreateHuman ;
1170: LD_ADDR_VAR 0 3
1174: PUSH
1175: CALL_OW 44
1179: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
1180: LD_VAR 0 3
1184: PPUSH
1185: LD_VAR 0 4
1189: PUSH
1190: LD_INT 1
1192: ARRAY
1193: PUSH
1194: LD_VAR 0 2
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 4
1204: PUSH
1205: LD_INT 2
1207: ARRAY
1208: PUSH
1209: LD_VAR 0 2
1213: ARRAY
1214: PPUSH
1215: LD_INT 1
1217: PPUSH
1218: CALL_OW 601
// end ;
1222: GO 1154
1224: POP
1225: POP
// end ;
1226: LD_VAR 0 1
1230: RET
// export function PrepareFirstScene ; var i , un ; begin
1231: LD_INT 0
1233: PPUSH
1234: PPUSH
1235: PPUSH
// uc_side := 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// uc_nation := 1 ;
1244: LD_ADDR_OWVAR 21
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
1252: LD_INT 0
1254: PPUSH
1255: LD_INT 33
1257: PPUSH
1258: LD_INT 0
1260: PPUSH
1261: CALL_OW 380
// for i := 1 to 2 do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: DOUBLE
1271: LD_INT 1
1273: DEC
1274: ST_TO_ADDR
1275: LD_INT 2
1277: PUSH
1278: FOR_TO
1279: IFFALSE 1344
// begin un := CreateHuman ;
1281: LD_ADDR_VAR 0 3
1285: PUSH
1286: CALL_OW 44
1290: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1291: LD_VAR 0 3
1295: PPUSH
1296: LD_INT 1
1298: PPUSH
1299: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
1303: LD_VAR 0 3
1307: PPUSH
1308: LD_INT 6
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
1318: LD_VAR 0 3
1322: PPUSH
1323: LD_INT 1
1325: PPUSH
1326: CALL 46917 0 2
// SetLives ( un , 300 ) ;
1330: LD_VAR 0 3
1334: PPUSH
1335: LD_INT 300
1337: PPUSH
1338: CALL_OW 234
// end ;
1342: GO 1278
1344: POP
1345: POP
// uc_side := 3 ;
1346: LD_ADDR_OWVAR 20
1350: PUSH
1351: LD_INT 3
1353: ST_TO_ADDR
// uc_nation := 3 ;
1354: LD_ADDR_OWVAR 21
1358: PUSH
1359: LD_INT 3
1361: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
1362: LD_INT 1
1364: PPUSH
1365: LD_INT 5
1367: PPUSH
1368: CALL_OW 381
// for i := 1 to 3 do
1372: LD_ADDR_VAR 0 2
1376: PUSH
1377: DOUBLE
1378: LD_INT 1
1380: DEC
1381: ST_TO_ADDR
1382: LD_INT 3
1384: PUSH
1385: FOR_TO
1386: IFFALSE 1459
// begin un := CreateHuman ;
1388: LD_ADDR_VAR 0 3
1392: PUSH
1393: CALL_OW 44
1397: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
1398: LD_ADDR_EXP 35
1402: PUSH
1403: LD_EXP 35
1407: PPUSH
1408: LD_VAR 0 3
1412: PPUSH
1413: CALL 43761 0 2
1417: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1418: LD_VAR 0 3
1422: PPUSH
1423: LD_INT 4
1425: PPUSH
1426: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
1430: LD_VAR 0 3
1434: PPUSH
1435: LD_INT 7
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
1445: LD_VAR 0 3
1449: PPUSH
1450: LD_INT 4
1452: PPUSH
1453: CALL 46917 0 2
// end ;
1457: GO 1385
1459: POP
1460: POP
// un := CreateHuman ;
1461: LD_ADDR_VAR 0 3
1465: PUSH
1466: CALL_OW 44
1470: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 37 , false ) ;
1471: LD_VAR 0 3
1475: PPUSH
1476: LD_INT 124
1478: PPUSH
1479: LD_INT 37
1481: PPUSH
1482: LD_INT 0
1484: PPUSH
1485: CALL_OW 48
// SetDir ( un , 3 ) ;
1489: LD_VAR 0 3
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL_OW 233
// ComLookAtDir ( un , 3 ) ;
1501: LD_VAR 0 3
1505: PPUSH
1506: LD_INT 3
1508: PPUSH
1509: CALL 46917 0 2
// end ; end_of_file
1513: LD_VAR 0 1
1517: RET
// export function Action ; var speaker , i , tmp ; begin
1518: LD_INT 0
1520: PPUSH
1521: PPUSH
1522: PPUSH
1523: PPUSH
// Video ( true ) ;
1524: LD_INT 1
1526: PPUSH
1527: CALL 43733 0 1
// hasNormalScene := Kaia or Givi ;
1531: LD_ADDR_EXP 5
1535: PUSH
1536: LD_EXP 25
1540: PUSH
1541: LD_EXP 21
1545: OR
1546: ST_TO_ADDR
// if hasNormalScene then
1547: LD_EXP 5
1551: IFFALSE 1786
// begin for i in americanSquad do
1553: LD_ADDR_VAR 0 3
1557: PUSH
1558: LD_EXP 32
1562: PUSH
1563: FOR_IN
1564: IFFALSE 1610
// begin SetClass ( i , 33 ) ;
1566: LD_VAR 0 3
1570: PPUSH
1571: LD_INT 33
1573: PPUSH
1574: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: LD_INT 78
1585: PPUSH
1586: LD_INT 16
1588: PPUSH
1589: LD_INT 5
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL_OW 50
// ComHold ( i ) ;
1599: LD_VAR 0 3
1603: PPUSH
1604: CALL_OW 140
// end ;
1608: GO 1563
1610: POP
1611: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi ] union heikeSecondSquad ;
1612: LD_ADDR_VAR 0 4
1616: PUSH
1617: LD_EXP 22
1621: PUSH
1622: LD_EXP 23
1626: PUSH
1627: LD_EXP 24
1631: PUSH
1632: LD_EXP 25
1636: PUSH
1637: LD_EXP 26
1641: PUSH
1642: LD_EXP 27
1646: PUSH
1647: LD_EXP 28
1651: PUSH
1652: LD_EXP 29
1656: PUSH
1657: LD_EXP 21
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_EXP 31
1677: UNION
1678: ST_TO_ADDR
// SetClass ( Heike , 33 ) ;
1679: LD_EXP 20
1683: PPUSH
1684: LD_INT 33
1686: PPUSH
1687: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
1691: LD_EXP 20
1695: PPUSH
1696: LD_INT 117
1698: PPUSH
1699: LD_INT 24
1701: PPUSH
1702: LD_INT 3
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: CALL 45903 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
1712: LD_EXP 20
1716: PPUSH
1717: LD_INT 123
1719: PPUSH
1720: LD_INT 39
1722: PPUSH
1723: CALL_OW 118
// for i in tmp do
1727: LD_ADDR_VAR 0 3
1731: PUSH
1732: LD_VAR 0 4
1736: PUSH
1737: FOR_IN
1738: IFFALSE 1784
// begin SetClass ( i , 33 ) ;
1740: LD_VAR 0 3
1744: PPUSH
1745: LD_INT 33
1747: PPUSH
1748: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
1752: LD_VAR 0 3
1756: PPUSH
1757: LD_INT 3
1759: PPUSH
1760: LD_INT 0
1762: PPUSH
1763: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 113
1774: PPUSH
1775: LD_INT 16
1777: PPUSH
1778: CALL_OW 118
// end ;
1782: GO 1737
1784: POP
1785: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
1786: LD_INT 124
1788: PPUSH
1789: LD_INT 39
1791: PPUSH
1792: CALL_OW 86
// PrepareDeadBodies ;
1796: CALL 1095 0 0
// PrepareFirstScene ;
1800: CALL 1231 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
1804: LD_INT 152
1806: PPUSH
1807: LD_INT 65
1809: PPUSH
1810: LD_INT 2
1812: PPUSH
1813: LD_INT 70
1815: NEG
1816: PPUSH
1817: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
1821: LD_INT 152
1823: PPUSH
1824: LD_INT 65
1826: PPUSH
1827: LD_INT 2
1829: PPUSH
1830: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
1834: LD_INT 122
1836: PPUSH
1837: LD_INT 40
1839: PPUSH
1840: LD_INT 2
1842: PPUSH
1843: LD_INT 8
1845: NEG
1846: PPUSH
1847: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
1851: LD_INT 124
1853: PPUSH
1854: LD_INT 37
1856: PPUSH
1857: CALL_OW 86
// speaker := HexInfo ( 124 , 37 ) ;
1861: LD_ADDR_VAR 0 2
1865: PUSH
1866: LD_INT 124
1868: PPUSH
1869: LD_INT 37
1871: PPUSH
1872: CALL_OW 428
1876: ST_TO_ADDR
// Say ( speaker , DRum-Execution-1 ) ;
1877: LD_VAR 0 2
1881: PPUSH
1882: LD_STRING DRum-Execution-1
1884: PPUSH
1885: CALL_OW 88
// Say ( speaker , DRum-Execution-2 ) ;
1889: LD_VAR 0 2
1893: PPUSH
1894: LD_STRING DRum-Execution-2
1896: PPUSH
1897: CALL_OW 88
// wait ( 0 0$01 ) ;
1901: LD_INT 35
1903: PPUSH
1904: CALL_OW 67
// Say ( speaker , DRum-Execution-3 ) ;
1908: LD_VAR 0 2
1912: PPUSH
1913: LD_STRING DRum-Execution-3
1915: PPUSH
1916: CALL_OW 88
// wait ( 0 0$1 ) ;
1920: LD_INT 35
1922: PPUSH
1923: CALL_OW 67
// Say ( speaker , DRum-Execution-4 ) ;
1927: LD_VAR 0 2
1931: PPUSH
1932: LD_STRING DRum-Execution-4
1934: PPUSH
1935: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
1939: LD_EXP 35
1943: PUSH
1944: LD_INT 1
1946: ARRAY
1947: PPUSH
1948: LD_INT 122
1950: PPUSH
1951: LD_INT 39
1953: PPUSH
1954: CALL_OW 428
1958: PPUSH
1959: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
1963: LD_EXP 35
1967: PUSH
1968: LD_INT 2
1970: ARRAY
1971: PPUSH
1972: LD_INT 123
1974: PPUSH
1975: LD_INT 41
1977: PPUSH
1978: CALL_OW 428
1982: PPUSH
1983: CALL_OW 115
// AddComHold ( russianKillers ) ;
1987: LD_EXP 35
1991: PPUSH
1992: CALL_OW 200
// wait ( 0 0$1 ) ;
1996: LD_INT 35
1998: PPUSH
1999: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
2003: LD_INT 122
2005: PPUSH
2006: LD_INT 40
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: CALL_OW 331
// if hasNormalScene then
2016: LD_EXP 5
2020: IFFALSE 2028
// ActionNormal else
2022: CALL 2037 0 0
2026: GO 2032
// ActionAdditional ;
2028: CALL 3694 0 0
// end ;
2032: LD_VAR 0 1
2036: RET
// function ActionNormal ; var i , tmp ; begin
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
// CenterNowOnUnits ( Heike ) ;
2042: LD_EXP 20
2046: PPUSH
2047: CALL_OW 87
// wait ( 0 0$1 ) ;
2051: LD_INT 35
2053: PPUSH
2054: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
2058: LD_EXP 20
2062: PPUSH
2063: LD_INT 115
2065: PPUSH
2066: LD_INT 19
2068: PPUSH
2069: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
2073: LD_EXP 20
2077: PPUSH
2078: LD_INT 113
2080: PPUSH
2081: LD_INT 16
2083: PPUSH
2084: CALL_OW 178
// wait ( 0 0$2 ) ;
2088: LD_INT 70
2090: PPUSH
2091: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
2095: LD_EXP 20
2099: PPUSH
2100: LD_STRING DH-Conspiracy-1
2102: PPUSH
2103: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
2107: LD_EXP 25
2111: PPUSH
2112: LD_STRING DK-Conspiracy-2
2114: PPUSH
2115: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
2119: LD_EXP 21
2123: PPUSH
2124: LD_STRING DG-Conspiracy-3
2126: PPUSH
2127: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
2131: LD_EXP 21
2135: PPUSH
2136: LD_STRING DG-Conspiracy-4
2138: PPUSH
2139: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
2143: LD_EXP 20
2147: PPUSH
2148: LD_STRING DH-Conspiracy-5
2150: PPUSH
2151: CALL_OW 88
// if IsOk ( Kamil ) then
2155: LD_EXP 24
2159: PPUSH
2160: CALL_OW 302
2164: IFFALSE 2222
// begin hasVodka := true ;
2166: LD_ADDR_EXP 4
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
2174: LD_EXP 24
2178: PPUSH
2179: LD_STRING DKam-Conspiracy-6
2181: PPUSH
2182: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
2186: LD_EXP 24
2190: PPUSH
2191: LD_STRING DKam-Conspiracy-7
2193: PPUSH
2194: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
2198: LD_EXP 24
2202: PPUSH
2203: LD_STRING DKam-Conspiracy-8
2205: PPUSH
2206: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
2210: LD_EXP 24
2214: PPUSH
2215: LD_STRING DKam-Conspiracy-9
2217: PPUSH
2218: CALL_OW 88
// end ; if IsOk ( Sophia ) then
2222: LD_EXP 26
2226: PPUSH
2227: CALL_OW 302
2231: IFFALSE 2405
// begin americanContact := true ;
2233: LD_ADDR_EXP 9
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// Say ( Sophia , DS-Conspiracy-10 ) ;
2241: LD_EXP 26
2245: PPUSH
2246: LD_STRING DS-Conspiracy-10
2248: PPUSH
2249: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
2253: LD_EXP 27
2257: PPUSH
2258: LD_STRING DM-Conspiracy-11
2260: PPUSH
2261: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
2265: LD_EXP 26
2269: PPUSH
2270: LD_STRING DS-Conspiracy-12
2272: PPUSH
2273: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
2277: LD_INT 84
2279: PPUSH
2280: LD_INT 19
2282: PPUSH
2283: LD_INT 105
2285: PPUSH
2286: CALL 5767 0 3
// if johnnySaved then
2290: LD_EXP 3
2294: IFFALSE 2334
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
2296: LD_EXP 26
2300: PPUSH
2301: LD_STRING DS-Conspiracy-13
2303: PPUSH
2304: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
2308: LD_EXP 20
2312: PPUSH
2313: LD_STRING DH-Conspiracy-14
2315: PPUSH
2316: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
2320: LD_EXP 26
2324: PPUSH
2325: LD_STRING DH-Conspiracy-15
2327: PPUSH
2328: CALL_OW 88
// end else
2332: GO 2370
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
2334: LD_EXP 26
2338: PPUSH
2339: LD_STRING DS-Conspiracy-a-13
2341: PPUSH
2342: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
2346: LD_EXP 20
2350: PPUSH
2351: LD_STRING DH-Conspiracy-a-14
2353: PPUSH
2354: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
2358: LD_EXP 26
2362: PPUSH
2363: LD_STRING DH-Conspiracy-a-15
2365: PPUSH
2366: CALL_OW 88
// end ; if IsOk ( Givi ) then
2370: LD_EXP 21
2374: PPUSH
2375: CALL_OW 302
2379: IFFALSE 2405
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
2381: LD_EXP 21
2385: PPUSH
2386: LD_STRING DG-Conspiracy-a-16
2388: PPUSH
2389: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
2393: LD_EXP 20
2397: PPUSH
2398: LD_STRING DH-Conspiracy-a-17
2400: PPUSH
2401: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
2405: LD_EXP 20
2409: PPUSH
2410: LD_STRING DH-Conspiracy-16
2412: PPUSH
2413: CALL_OW 88
// if IsOk ( Givi ) then
2417: LD_EXP 21
2421: PPUSH
2422: CALL_OW 302
2426: IFFALSE 2684
// begin hasStimDrugs := true ;
2428: LD_ADDR_EXP 8
2432: PUSH
2433: LD_INT 1
2435: ST_TO_ADDR
// Say ( Givi , DG-Conspiracy-17 ) ;
2436: LD_EXP 21
2440: PPUSH
2441: LD_STRING DG-Conspiracy-17
2443: PPUSH
2444: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
2448: LD_INT 87
2450: PPUSH
2451: LD_INT 2
2453: PPUSH
2454: CALL_OW 235
// ShowPlace ( 184 , 95 , 0 0$3 ) ;
2458: LD_INT 184
2460: PPUSH
2461: LD_INT 95
2463: PPUSH
2464: LD_INT 105
2466: PPUSH
2467: CALL 5767 0 3
// SetSide ( drugsLab , 3 ) ;
2471: LD_INT 87
2473: PPUSH
2474: LD_INT 3
2476: PPUSH
2477: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
2481: LD_EXP 21
2485: PPUSH
2486: LD_STRING DG-Conspiracy-18
2488: PPUSH
2489: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
2493: LD_EXP 21
2497: PPUSH
2498: LD_STRING DG-Conspiracy-19
2500: PPUSH
2501: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
2505: LD_EXP 21
2509: PPUSH
2510: LD_STRING DG-Conspiracy-20
2512: PPUSH
2513: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
2517: LD_EXP 20
2521: PPUSH
2522: LD_STRING DH-Conspiracy-21
2524: PPUSH
2525: CALL_OW 88
// if IsOk ( Kaia ) then
2529: LD_EXP 25
2533: PPUSH
2534: CALL_OW 302
2538: IFFALSE 2605
// begin hasExplosions := true ;
2540: LD_ADDR_EXP 6
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-22 ) ;
2548: LD_EXP 25
2552: PPUSH
2553: LD_STRING DK-Conspiracy-22
2555: PPUSH
2556: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
2560: LD_INT 73
2562: PPUSH
2563: LD_INT 2
2565: PPUSH
2566: CALL_OW 235
// ShowPlace ( 166 , 104 , 0 0$3 ) ;
2570: LD_INT 166
2572: PPUSH
2573: LD_INT 104
2575: PPUSH
2576: LD_INT 105
2578: PPUSH
2579: CALL 5767 0 3
// SetSide ( barExplosion , 3 ) ;
2583: LD_INT 73
2585: PPUSH
2586: LD_INT 3
2588: PPUSH
2589: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
2593: LD_EXP 25
2597: PPUSH
2598: LD_STRING DK-Conspiracy-23
2600: PPUSH
2601: CALL_OW 88
// end ; if IsOk ( Olaf ) then
2605: LD_EXP 28
2609: PPUSH
2610: CALL_OW 302
2614: IFFALSE 2684
// begin hasExplosionsInFactory := true ;
2616: LD_ADDR_EXP 7
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
2624: LD_EXP 28
2628: PPUSH
2629: LD_STRING DO-Conspiracy-24
2631: PPUSH
2632: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
2636: LD_INT 175
2638: PPUSH
2639: LD_INT 54
2641: PPUSH
2642: LD_INT 70
2644: PPUSH
2645: CALL 5767 0 3
// if IsOk ( Markov ) then
2649: LD_EXP 27
2653: PPUSH
2654: CALL_OW 302
2658: IFFALSE 2684
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
2660: LD_EXP 27
2664: PPUSH
2665: LD_STRING DMar-Conspiracy-25
2667: PPUSH
2668: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
2672: LD_EXP 27
2676: PPUSH
2677: LD_STRING DMar-Conspiracy-26
2679: PPUSH
2680: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
2684: LD_EXP 29
2688: PPUSH
2689: CALL_OW 302
2693: PUSH
2694: LD_EXP 25
2698: PPUSH
2699: CALL_OW 302
2703: AND
2704: IFFALSE 3120
// begin hasSniperRifle := true ;
2706: LD_ADDR_EXP 10
2710: PUSH
2711: LD_INT 1
2713: ST_TO_ADDR
// Say ( Kurt , DKs-Conspiracy-27 ) ;
2714: LD_EXP 29
2718: PPUSH
2719: LD_STRING DKs-Conspiracy-27
2721: PPUSH
2722: CALL_OW 88
// if IsOk ( Givi ) then
2726: LD_EXP 21
2730: PPUSH
2731: CALL_OW 302
2735: IFFALSE 2751
// Say ( Givi , DG-Conspiracy-28 ) else
2737: LD_EXP 21
2741: PPUSH
2742: LD_STRING DG-Conspiracy-28
2744: PPUSH
2745: CALL_OW 88
2749: GO 2816
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
2751: LD_EXP 31
2755: PPUSH
2756: LD_INT 26
2758: PUSH
2759: LD_INT 1
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PPUSH
2766: CALL_OW 72
2770: PUSH
2771: LD_INT 1
2773: ARRAY
2774: PPUSH
2775: LD_STRING DArm-Conspiracy-a-28
2777: PPUSH
2778: CALL_OW 88
2782: NOT
2783: IFFALSE 2816
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
2785: LD_EXP 31
2789: PPUSH
2790: LD_INT 26
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 72
2804: PUSH
2805: LD_INT 1
2807: ARRAY
2808: PPUSH
2809: LD_STRING DArf-Conspiracy-a-28
2811: PPUSH
2812: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
2816: LD_EXP 29
2820: PPUSH
2821: LD_STRING DKs-Conspiracy-29
2823: PPUSH
2824: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-30 ) ;
2828: LD_EXP 29
2832: PPUSH
2833: LD_STRING DKs-Conspiracy-30
2835: PPUSH
2836: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
2840: LD_EXP 25
2844: PPUSH
2845: LD_STRING DK-Conspiracy-31
2847: PPUSH
2848: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
2852: LD_EXP 27
2856: PPUSH
2857: LD_STRING DMar-Conspiracy-33
2859: PPUSH
2860: CALL_OW 88
2864: NOT
2865: PUSH
2866: LD_EXP 31
2870: AND
2871: IFFALSE 2938
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
2873: LD_EXP 31
2877: PPUSH
2878: LD_INT 26
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 72
2892: PUSH
2893: LD_INT 1
2895: ARRAY
2896: PPUSH
2897: LD_STRING DArm-Conspiracy-a-34
2899: PPUSH
2900: CALL_OW 88
2904: NOT
2905: IFFALSE 2938
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
2907: LD_EXP 31
2911: PPUSH
2912: LD_INT 26
2914: PUSH
2915: LD_INT 2
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PPUSH
2922: CALL_OW 72
2926: PUSH
2927: LD_INT 1
2929: ARRAY
2930: PPUSH
2931: LD_STRING DArf-Conspiracy-a-34
2933: PPUSH
2934: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
2938: LD_EXP 25
2942: PPUSH
2943: LD_STRING DK-Conspiracy-34
2945: PPUSH
2946: CALL_OW 88
// if IsOk ( Markov ) then
2950: LD_EXP 27
2954: PPUSH
2955: CALL_OW 302
2959: IFFALSE 3036
// begin Say ( Markov , DMar-Conspiracy-35 ) ;
2961: LD_EXP 27
2965: PPUSH
2966: LD_STRING DMar-Conspiracy-35
2968: PPUSH
2969: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
2973: LD_EXP 25
2977: PPUSH
2978: LD_STRING DK-Conspiracy-36
2980: PPUSH
2981: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
2985: LD_EXP 27
2989: PPUSH
2990: LD_STRING DMar-Conspiracy-37
2992: PPUSH
2993: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
2997: LD_EXP 27
3001: PPUSH
3002: LD_STRING DMar-Conspiracy-38
3004: PPUSH
3005: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
3009: LD_INT 137
3011: PPUSH
3012: LD_INT 98
3014: PPUSH
3015: LD_INT 105
3017: PPUSH
3018: CALL 5767 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
3022: LD_EXP 27
3026: PPUSH
3027: LD_STRING DMar-Conspiracy-39
3029: PPUSH
3030: CALL_OW 88
// end else
3034: GO 3120
// if heikeSecondSquad then
3036: LD_EXP 31
3040: IFFALSE 3120
// begin ShowPlace ( 137 , 98 , 0 0$3 ) ;
3042: LD_INT 137
3044: PPUSH
3045: LD_INT 98
3047: PPUSH
3048: LD_INT 105
3050: PPUSH
3051: CALL 5767 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
3055: LD_EXP 31
3059: PPUSH
3060: LD_INT 26
3062: PUSH
3063: LD_INT 1
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PPUSH
3070: CALL_OW 72
3074: PUSH
3075: LD_INT 1
3077: ARRAY
3078: PPUSH
3079: LD_STRING DArm-Conspiracy-a-35
3081: PPUSH
3082: CALL_OW 88
3086: NOT
3087: IFFALSE 3120
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
3089: LD_EXP 31
3093: PPUSH
3094: LD_INT 26
3096: PUSH
3097: LD_INT 2
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PPUSH
3104: CALL_OW 72
3108: PUSH
3109: LD_INT 1
3111: ARRAY
3112: PPUSH
3113: LD_STRING DArf-Conspiracy-a-35
3115: PPUSH
3116: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
3120: LD_EXP 20
3124: PPUSH
3125: LD_STRING DH-Conspiracy-40
3127: PPUSH
3128: CALL_OW 88
// if IsOk ( Mike ) then
3132: LD_EXP 22
3136: PPUSH
3137: CALL_OW 302
3141: IFFALSE 3200
// begin hasScout := true ;
3143: LD_ADDR_EXP 11
3147: PUSH
3148: LD_INT 1
3150: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
3151: LD_EXP 22
3155: PPUSH
3156: LD_STRING DM-Conspiracy-41
3158: PPUSH
3159: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
3163: LD_EXP 22
3167: PPUSH
3168: LD_STRING DM-Conspiracy-42
3170: PPUSH
3171: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
3175: LD_INT 73
3177: PPUSH
3178: LD_INT 102
3180: PPUSH
3181: LD_INT 105
3183: PPUSH
3184: CALL 5767 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
3188: LD_EXP 22
3192: PPUSH
3193: LD_STRING DM-Conspiracy-43
3195: PPUSH
3196: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
3200: LD_EXP 4
3204: PUSH
3205: LD_EXP 25
3209: PPUSH
3210: CALL_OW 302
3214: AND
3215: PUSH
3216: LD_EXP 29
3220: PPUSH
3221: CALL_OW 302
3225: AND
3226: IFFALSE 3272
// begin hasMethanol := true ;
3228: LD_ADDR_EXP 12
3232: PUSH
3233: LD_INT 1
3235: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
3236: LD_EXP 25
3240: PPUSH
3241: LD_STRING DK-Conspiracy-44
3243: PPUSH
3244: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
3248: LD_EXP 25
3252: PPUSH
3253: LD_STRING DK-Conspiracy-45
3255: PPUSH
3256: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
3260: LD_EXP 24
3264: PPUSH
3265: LD_STRING DKam-Conspiracy-46
3267: PPUSH
3268: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
3272: LD_EXP 20
3276: PPUSH
3277: LD_STRING DH-Conspiracy-47
3279: PPUSH
3280: CALL_OW 88
// wait ( 0 0$1 ) ;
3284: LD_INT 35
3286: PPUSH
3287: CALL_OW 67
// your_side := 8 ;
3291: LD_ADDR_OWVAR 2
3295: PUSH
3296: LD_INT 8
3298: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
3299: LD_INT 1
3301: PPUSH
3302: LD_INT 1
3304: PPUSH
3305: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
3309: LD_ADDR_VAR 0 2
3313: PUSH
3314: LD_INT 22
3316: PUSH
3317: LD_INT 2
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: LD_INT 21
3326: PUSH
3327: LD_INT 1
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PPUSH
3338: CALL_OW 69
3342: PUSH
3343: FOR_IN
3344: IFFALSE 3357
// RemoveUnit ( i ) ;
3346: LD_VAR 0 2
3350: PPUSH
3351: CALL_OW 64
3355: GO 3343
3357: POP
3358: POP
// wait ( 0 0$0.3 ) ;
3359: LD_INT 10
3361: PPUSH
3362: CALL_OW 67
// Query ( StartInfo1 ) ;
3366: LD_STRING StartInfo1
3368: PPUSH
3369: CALL_OW 97
// wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
3380: LD_STRING colors_night.txt
3382: PPUSH
3383: CALL_OW 544
// Query ( StartInfo2 ) ;
3387: LD_STRING StartInfo2
3389: PPUSH
3390: CALL_OW 97
// PrepareGame ;
3394: CALL 738 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3398: LD_INT 152
3400: PPUSH
3401: LD_INT 65
3403: PPUSH
3404: LD_INT 2
3406: PPUSH
3407: LD_INT 70
3409: NEG
3410: PPUSH
3411: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3415: LD_INT 152
3417: PPUSH
3418: LD_INT 65
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
3428: LD_INT 133
3430: PPUSH
3431: LD_INT 76
3433: PPUSH
3434: LD_INT 2
3436: PPUSH
3437: LD_INT 6
3439: NEG
3440: PPUSH
3441: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
3445: LD_INT 152
3447: PPUSH
3448: LD_INT 65
3450: PPUSH
3451: LD_INT 8
3453: PPUSH
3454: LD_INT 70
3456: NEG
3457: PPUSH
3458: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
3462: LD_INT 152
3464: PPUSH
3465: LD_INT 65
3467: PPUSH
3468: LD_INT 8
3470: PPUSH
3471: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
3475: LD_INT 133
3477: PPUSH
3478: LD_INT 76
3480: PPUSH
3481: LD_INT 8
3483: PPUSH
3484: LD_INT 6
3486: NEG
3487: PPUSH
3488: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
3492: LD_INT 23
3494: PPUSH
3495: CALL_OW 87
// dialogue_skipped := false ;
3499: LD_ADDR_OWVAR 59
3503: PUSH
3504: LD_INT 0
3506: ST_TO_ADDR
// StartLockerMinigame ;
3507: CALL 6071 0 0
// wait ( 0 0$3 ) ;
3511: LD_INT 105
3513: PPUSH
3514: CALL_OW 67
// your_side := 2 ;
3518: LD_ADDR_OWVAR 2
3522: PUSH
3523: LD_INT 2
3525: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
3526: LD_EXP 20
3530: PPUSH
3531: CALL_OW 122
// AddComMoveXY ( Heike , 128 , 64 ) ;
3535: LD_EXP 20
3539: PPUSH
3540: LD_INT 128
3542: PPUSH
3543: LD_INT 64
3545: PPUSH
3546: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
3550: LD_INT 35
3552: PPUSH
3553: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
3557: LD_EXP 20
3561: PPUSH
3562: LD_INT 128
3564: PPUSH
3565: LD_INT 64
3567: PPUSH
3568: CALL_OW 307
3572: IFFALSE 3550
// ComHold ( Heike ) ;
3574: LD_EXP 20
3578: PPUSH
3579: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
3583: LD_EXP 20
3587: PPUSH
3588: LD_STRING DH-Start-1
3590: PPUSH
3591: CALL_OW 88
// if not americanContact then
3595: LD_EXP 9
3599: NOT
3600: IFFALSE 3616
// Say ( Heike , DH-Start-c-2 ) else
3602: LD_EXP 20
3606: PPUSH
3607: LD_STRING DH-Start-c-2
3609: PPUSH
3610: CALL_OW 88
3614: GO 3648
// if johnnySaved then
3616: LD_EXP 3
3620: IFFALSE 3636
// Say ( Heike , DH-Start-a-2 ) else
3622: LD_EXP 20
3626: PPUSH
3627: LD_STRING DH-Start-a-2
3629: PPUSH
3630: CALL_OW 88
3634: GO 3648
// Say ( Heike , DH-Start-b-2 ) ;
3636: LD_EXP 20
3640: PPUSH
3641: LD_STRING DH-Start-b-2
3643: PPUSH
3644: CALL_OW 88
// Video ( false ) ;
3648: LD_INT 0
3650: PPUSH
3651: CALL 43733 0 1
// tick := 0 ;
3655: LD_ADDR_OWVAR 1
3659: PUSH
3660: LD_INT 0
3662: ST_TO_ADDR
// if americanContact then
3663: LD_EXP 9
3667: IFFALSE 3678
// ChangeMissionObjectives ( M1a ) else
3669: LD_STRING M1a
3671: PPUSH
3672: CALL_OW 337
3676: GO 3685
// ChangeMissionObjectives ( M1 ) ;
3678: LD_STRING M1
3680: PPUSH
3681: CALL_OW 337
// SaveForQuickRestart ;
3685: CALL_OW 22
// end ;
3689: LD_VAR 0 1
3693: RET
// function ActionAdditional ; var i , un , tmp ; begin
3694: LD_INT 0
3696: PPUSH
3697: PPUSH
3698: PPUSH
3699: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
3700: LD_INT 115
3702: PPUSH
3703: LD_INT 27
3705: PPUSH
3706: LD_INT 2
3708: PPUSH
3709: LD_INT 6
3711: NEG
3712: PPUSH
3713: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
3717: LD_EXP 20
3721: PPUSH
3722: LD_INT 115
3724: PPUSH
3725: LD_INT 27
3727: PPUSH
3728: CALL_OW 428
3732: PPUSH
3733: CALL_OW 52
// SetClass ( Heike , 33 ) ;
3737: LD_EXP 20
3741: PPUSH
3742: LD_INT 33
3744: PPUSH
3745: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
3749: LD_INT 124
3751: PPUSH
3752: LD_INT 39
3754: PPUSH
3755: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
3759: LD_EXP 20
3763: PPUSH
3764: LD_STRING DH-Fail-1
3766: PPUSH
3767: CALL_OW 88
// RaiseSailEvent ( eventCenterCamOnHeike ) ;
3771: LD_EXP 18
3775: PPUSH
3776: CALL_OW 427
// ComExit ( Heike ) ;
3780: LD_EXP 20
3784: PPUSH
3785: CALL 44159 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
3789: LD_EXP 20
3793: PPUSH
3794: LD_INT 109
3796: PPUSH
3797: LD_INT 33
3799: PPUSH
3800: CALL_OW 171
// AddComHold ( Heike ) ;
3804: LD_EXP 20
3808: PPUSH
3809: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
3813: LD_INT 115
3815: PPUSH
3816: LD_INT 27
3818: PPUSH
3819: LD_INT 2
3821: PPUSH
3822: CALL_OW 331
// wait ( 0 0$2 ) ;
3826: LD_INT 70
3828: PPUSH
3829: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
3840: LD_EXP 20
3844: PPUSH
3845: LD_INT 109
3847: PPUSH
3848: LD_INT 33
3850: PPUSH
3851: CALL_OW 307
3855: IFFALSE 3833
// Say ( Heike , DH-Fail-2 ) ;
3857: LD_EXP 20
3861: PPUSH
3862: LD_STRING DH-Fail-2
3864: PPUSH
3865: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
3869: LD_EXP 20
3873: PPUSH
3874: LD_INT 111
3876: PPUSH
3877: LD_INT 48
3879: PPUSH
3880: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3884: LD_INT 35
3886: PPUSH
3887: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
3891: LD_EXP 20
3895: PPUSH
3896: LD_INT 111
3898: PPUSH
3899: LD_INT 48
3901: PPUSH
3902: CALL_OW 297
3906: PUSH
3907: LD_INT 4
3909: LESS
3910: IFFALSE 3884
// AddComMoveXY ( Heike , 106 , 72 ) ;
3912: LD_EXP 20
3916: PPUSH
3917: LD_INT 106
3919: PPUSH
3920: LD_INT 72
3922: PPUSH
3923: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
3927: LD_EXP 20
3931: PPUSH
3932: LD_INT 103
3934: PPUSH
3935: LD_INT 80
3937: PPUSH
3938: CALL_OW 171
// uc_side := 3 ;
3942: LD_ADDR_OWVAR 20
3946: PUSH
3947: LD_INT 3
3949: ST_TO_ADDR
// uc_nation := 3 ;
3950: LD_ADDR_OWVAR 21
3954: PUSH
3955: LD_INT 3
3957: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
3958: LD_INT 1
3960: PPUSH
3961: LD_INT 1
3963: PPUSH
3964: LD_INT 6
3966: PPUSH
3967: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
3971: LD_ADDR_OWVAR 29
3975: PUSH
3976: LD_INT 12
3978: PUSH
3979: LD_INT 12
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: ST_TO_ADDR
// un := CreateHuman ;
3986: LD_ADDR_VAR 0 3
3990: PUSH
3991: CALL_OW 44
3995: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
3996: LD_VAR 0 3
4000: PPUSH
4001: LD_INT 134
4003: PPUSH
4004: LD_INT 52
4006: PPUSH
4007: LD_INT 4
4009: PPUSH
4010: LD_INT 0
4012: PPUSH
4013: CALL 45903 0 5
// ComTurnUnit ( un , Heike ) ;
4017: LD_VAR 0 3
4021: PPUSH
4022: LD_EXP 20
4026: PPUSH
4027: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
4031: LD_VAR 0 3
4035: PPUSH
4036: LD_EXP 20
4040: PPUSH
4041: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
4045: LD_VAR 0 3
4049: PPUSH
4050: LD_STRING DRum-Fail-3
4052: PPUSH
4053: CALL_OW 88
// for i := 1 to 3 do
4057: LD_ADDR_VAR 0 2
4061: PUSH
4062: DOUBLE
4063: LD_INT 1
4065: DEC
4066: ST_TO_ADDR
4067: LD_INT 3
4069: PUSH
4070: FOR_TO
4071: IFFALSE 4144
// begin PrepareSoldier ( false , 10 ) ;
4073: LD_INT 0
4075: PPUSH
4076: LD_INT 10
4078: PPUSH
4079: CALL_OW 381
// un := CreateHuman ;
4083: LD_ADDR_VAR 0 3
4087: PUSH
4088: CALL_OW 44
4092: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
4093: LD_ADDR_VAR 0 4
4097: PUSH
4098: LD_VAR 0 4
4102: PPUSH
4103: LD_VAR 0 3
4107: PPUSH
4108: CALL 43761 0 2
4112: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
4113: LD_VAR 0 3
4117: PPUSH
4118: LD_INT 8
4120: PPUSH
4121: LD_INT 0
4123: PPUSH
4124: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
4128: LD_VAR 0 3
4132: PPUSH
4133: LD_EXP 20
4137: PPUSH
4138: CALL_OW 119
// end ;
4142: GO 4070
4144: POP
4145: POP
// repeat wait ( 0 0$1 ) ;
4146: LD_INT 35
4148: PPUSH
4149: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
4153: LD_VAR 0 4
4157: PPUSH
4158: LD_INT 101
4160: PUSH
4161: LD_INT 2
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 72
4172: PUSH
4173: LD_INT 1
4175: GREATER
4176: IFFALSE 4146
// wait ( 0 0$1 ) ;
4178: LD_INT 35
4180: PPUSH
4181: CALL_OW 67
// DialogueOn ;
4185: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
4189: LD_EXP 20
4193: PPUSH
4194: LD_STRING DH-Fail-4
4196: PPUSH
4197: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
4201: LD_EXP 20
4205: PPUSH
4206: LD_STRING DH-Fail-5
4208: PPUSH
4209: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
4213: LD_EXP 20
4217: PPUSH
4218: LD_STRING DH-Fail-6
4220: PPUSH
4221: CALL_OW 88
// DialogueOff ;
4225: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
4229: LD_VAR 0 4
4233: PPUSH
4234: LD_EXP 20
4238: PPUSH
4239: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
4243: LD_INT 35
4245: PPUSH
4246: CALL_OW 67
// until IsDying ( Heike ) ;
4250: LD_EXP 20
4254: PPUSH
4255: CALL_OW 303
4259: IFFALSE 4243
// KillUnit ( Heike ) ;
4261: LD_EXP 20
4265: PPUSH
4266: CALL_OW 66
// wait ( 0 0$4 ) ;
4270: LD_INT 140
4272: PPUSH
4273: CALL_OW 67
// ResetFog ;
4277: CALL_OW 335
// DialogueOn ;
4281: CALL_OW 6
// dwait ( 0 0$1 ) ;
4285: LD_INT 35
4287: PPUSH
4288: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
4292: LD_ADDR_EXP 20
4296: PUSH
4297: LD_STRING Heike
4299: PPUSH
4300: LD_EXP 1
4304: NOT
4305: PPUSH
4306: LD_EXP 2
4310: PPUSH
4311: CALL 6377 0 3
4315: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
4316: LD_EXP 20
4320: PPUSH
4321: LD_STRING DH-Fail-7
4323: PPUSH
4324: CALL_OW 89
// DialogueOff ;
4328: CALL_OW 7
// YouLost ( Fail ) ;
4332: LD_STRING Fail
4334: PPUSH
4335: CALL_OW 104
// end ;
4339: LD_VAR 0 1
4343: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 do
4344: LD_INT 2
4346: PPUSH
4347: LD_INT 173
4349: PPUSH
4350: LD_INT 29
4352: PPUSH
4353: CALL_OW 293
4357: PUSH
4358: LD_EXP 20
4362: PPUSH
4363: LD_INT 173
4365: PPUSH
4366: LD_INT 29
4368: PPUSH
4369: CALL_OW 297
4373: PUSH
4374: LD_INT 6
4376: LESS
4377: AND
4378: IFFALSE 4395
4380: GO 4382
4382: DISABLE
// Say ( Heike , DH-EastRoad ) ;
4383: LD_EXP 20
4387: PPUSH
4388: LD_STRING DH-EastRoad
4390: PPUSH
4391: CALL_OW 88
4395: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 do
4396: LD_INT 2
4398: PPUSH
4399: LD_INT 217
4401: PPUSH
4402: LD_INT 120
4404: PPUSH
4405: CALL_OW 293
4409: PUSH
4410: LD_EXP 20
4414: PPUSH
4415: LD_INT 217
4417: PPUSH
4418: LD_INT 120
4420: PPUSH
4421: CALL_OW 297
4425: PUSH
4426: LD_INT 6
4428: LESS
4429: AND
4430: IFFALSE 4447
4432: GO 4434
4434: DISABLE
// Say ( Heike , DH-EastEnd ) ;
4435: LD_EXP 20
4439: PPUSH
4440: LD_STRING DH-EastEnd
4442: PPUSH
4443: CALL_OW 88
4447: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) do
4448: LD_EXP 20
4452: PPUSH
4453: LD_INT 11
4455: PPUSH
4456: CALL_OW 308
4460: IFFALSE 4498
4462: GO 4464
4464: DISABLE
// begin if not heikeSquad then
4465: LD_EXP 13
4469: NOT
4470: IFFALSE 4486
// Say ( Heike , DH-Hill ) else
4472: LD_EXP 20
4476: PPUSH
4477: LD_STRING DH-Hill
4479: PPUSH
4480: CALL_OW 88
4484: GO 4498
// Say ( Heike , DH-Hill-a ) ;
4486: LD_EXP 20
4490: PPUSH
4491: LD_STRING DH-Hill-a
4493: PPUSH
4494: CALL_OW 88
// end ;
4498: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) do var x , y , v ;
4499: LD_EXP 20
4503: PPUSH
4504: LD_INT 12
4506: PPUSH
4507: CALL_OW 308
4511: IFFALSE 4693
4513: GO 4515
4515: DISABLE
4516: LD_INT 0
4518: PPUSH
4519: PPUSH
4520: PPUSH
// begin DialogueOn ;
4521: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
4525: LD_EXP 20
4529: PPUSH
4530: CALL_OW 87
// x := GetX ( Heike ) ;
4534: LD_ADDR_VAR 0 1
4538: PUSH
4539: LD_EXP 20
4543: PPUSH
4544: CALL_OW 250
4548: ST_TO_ADDR
// y := GetY ( Heike ) ;
4549: LD_ADDR_VAR 0 2
4553: PUSH
4554: LD_EXP 20
4558: PPUSH
4559: CALL_OW 251
4563: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_VAR 0 2
4573: PPUSH
4574: LD_INT 2
4576: PPUSH
4577: LD_INT 12
4579: NEG
4580: PPUSH
4581: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
4585: LD_VAR 0 1
4589: PPUSH
4590: LD_VAR 0 2
4594: PPUSH
4595: LD_INT 2
4597: PPUSH
4598: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
4602: LD_INT 2
4604: PUSH
4605: LD_INT 30
4607: PUSH
4608: LD_INT 32
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PUSH
4615: LD_INT 30
4617: PUSH
4618: LD_INT 33
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: LIST
4629: PPUSH
4630: CALL_OW 69
4634: IFFALSE 4646
// v := 3 else
4636: LD_ADDR_VAR 0 3
4640: PUSH
4641: LD_INT 3
4643: ST_TO_ADDR
4644: GO 4654
// v := 2 ;
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: LD_INT 2
4653: ST_TO_ADDR
// disable ;
4654: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
4655: LD_EXP 20
4659: PPUSH
4660: LD_STRING DH-Outpost-
4662: PUSH
4663: LD_INT 1
4665: PPUSH
4666: LD_VAR 0 3
4670: PPUSH
4671: CALL_OW 12
4675: STR
4676: PPUSH
4677: CALL_OW 88
// DialogueOff ;
4681: CALL_OW 7
// wait ( 0 0$10 ) ;
4685: LD_INT 350
4687: PPUSH
4688: CALL_OW 67
// enable ;
4692: ENABLE
// end ;
4693: PPOPN 3
4695: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 or AreInTheSameBuilding ( Givi , Heike ) do
4696: LD_INT 2
4698: PPUSH
4699: LD_EXP 21
4703: PPUSH
4704: CALL_OW 292
4708: PUSH
4709: LD_EXP 20
4713: PPUSH
4714: LD_EXP 21
4718: PPUSH
4719: CALL_OW 296
4723: PUSH
4724: LD_INT 6
4726: LESS
4727: AND
4728: PUSH
4729: LD_EXP 21
4733: PPUSH
4734: LD_EXP 20
4738: PPUSH
4739: CALL 5705 0 2
4743: OR
4744: IFFALSE 4822
4746: GO 4748
4748: DISABLE
// begin DialogueOn ;
4749: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
4753: LD_EXP 21
4757: PPUSH
4758: CALL_OW 87
// Say ( Heike , DH-Givi-1 ) ;
4762: LD_EXP 20
4766: PPUSH
4767: LD_STRING DH-Givi-1
4769: PPUSH
4770: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
4774: LD_EXP 21
4778: PPUSH
4779: LD_STRING DG-Givi-2
4781: PPUSH
4782: CALL_OW 88
// DialogueOff ;
4786: CALL_OW 7
// SetSide ( Givi , 2 ) ;
4790: LD_EXP 21
4794: PPUSH
4795: LD_INT 2
4797: PPUSH
4798: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
4802: LD_ADDR_EXP 13
4806: PUSH
4807: LD_EXP 13
4811: PPUSH
4812: LD_EXP 21
4816: PPUSH
4817: CALL 43761 0 2
4821: ST_TO_ADDR
// end ;
4822: END
// function SayHEmpty ( ) ; begin
4823: LD_INT 0
4825: PPUSH
// case rand ( 1 , 3 ) of 1 :
4826: LD_INT 1
4828: PPUSH
4829: LD_INT 3
4831: PPUSH
4832: CALL_OW 12
4836: PUSH
4837: LD_INT 1
4839: DOUBLE
4840: EQUAL
4841: IFTRUE 4845
4843: GO 4860
4845: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
4846: LD_EXP 20
4850: PPUSH
4851: LD_STRING DH-Empty-1
4853: PPUSH
4854: CALL_OW 88
4858: GO 4907
4860: LD_INT 2
4862: DOUBLE
4863: EQUAL
4864: IFTRUE 4868
4866: GO 4883
4868: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
4869: LD_EXP 20
4873: PPUSH
4874: LD_STRING DH-Empty-2
4876: PPUSH
4877: CALL_OW 88
4881: GO 4907
4883: LD_INT 3
4885: DOUBLE
4886: EQUAL
4887: IFTRUE 4891
4889: GO 4906
4891: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
4892: LD_EXP 20
4896: PPUSH
4897: LD_STRING DH-Empty-3
4899: PPUSH
4900: CALL_OW 88
4904: GO 4907
4906: POP
// end ;
4907: LD_VAR 0 1
4911: RET
// function SayHVisited ( ) ; begin
4912: LD_INT 0
4914: PPUSH
// case rand ( 1 , 3 ) of 1 :
4915: LD_INT 1
4917: PPUSH
4918: LD_INT 3
4920: PPUSH
4921: CALL_OW 12
4925: PUSH
4926: LD_INT 1
4928: DOUBLE
4929: EQUAL
4930: IFTRUE 4934
4932: GO 4949
4934: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
4935: LD_EXP 20
4939: PPUSH
4940: LD_STRING DH-Visited-1
4942: PPUSH
4943: CALL_OW 88
4947: GO 4996
4949: LD_INT 2
4951: DOUBLE
4952: EQUAL
4953: IFTRUE 4957
4955: GO 4972
4957: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
4958: LD_EXP 20
4962: PPUSH
4963: LD_STRING DH-Visited-2
4965: PPUSH
4966: CALL_OW 88
4970: GO 4996
4972: LD_INT 3
4974: DOUBLE
4975: EQUAL
4976: IFTRUE 4980
4978: GO 4995
4980: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
4981: LD_EXP 20
4985: PPUSH
4986: LD_STRING DH-Visited-3
4988: PPUSH
4989: CALL_OW 88
4993: GO 4996
4995: POP
// end ;
4996: LD_VAR 0 1
5000: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and IsOk ( Heike ) do var i ;
5001: LD_EXP 16
5005: NOT
5006: PUSH
5007: LD_EXP 14
5011: AND
5012: PUSH
5013: LD_EXP 20
5017: PPUSH
5018: CALL_OW 302
5022: AND
5023: IFFALSE 5076
5025: GO 5027
5027: DISABLE
5028: LD_INT 0
5030: PPUSH
// begin enable ;
5031: ENABLE
// for i in entranceAllowedList do
5032: LD_ADDR_VAR 0 1
5036: PUSH
5037: LD_EXP 14
5041: PUSH
5042: FOR_IN
5043: IFFALSE 5074
// if InEntrance ( Heike , i ) then
5045: LD_EXP 20
5049: PPUSH
5050: LD_VAR 0 1
5054: PPUSH
5055: CALL 5808 0 2
5059: IFFALSE 5072
// begin HeikeEnterBuilding ( i ) ;
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL 5079 0 1
// break ;
5070: GO 5074
// end ;
5072: GO 5042
5074: POP
5075: POP
// end ;
5076: PPOPN 1
5078: END
// function HeikeEnterBuilding ( building ) ; begin
5079: LD_INT 0
5081: PPUSH
// if not building then
5082: LD_VAR 0 1
5086: NOT
5087: IFFALSE 5091
// exit ;
5089: GO 5542
// if building in entranceVisitedList then
5091: LD_VAR 0 1
5095: PUSH
5096: LD_EXP 15
5100: IN
5101: IFFALSE 5109
// begin SayHVisited ( ) ;
5103: CALL 4912 0 0
// exit ;
5107: GO 5542
// end ; case Query ( EnterBuilding ) of 1 :
5109: LD_STRING EnterBuilding
5111: PPUSH
5112: CALL_OW 97
5116: PUSH
5117: LD_INT 1
5119: DOUBLE
5120: EQUAL
5121: IFTRUE 5125
5123: GO 5128
5125: POP
// ; 2 :
5126: GO 5142
5128: LD_INT 2
5130: DOUBLE
5131: EQUAL
5132: IFTRUE 5136
5134: GO 5141
5136: POP
// exit ; end ;
5137: GO 5542
5139: GO 5142
5141: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
5142: LD_ADDR_EXP 15
5146: PUSH
5147: LD_EXP 15
5151: PPUSH
5152: LD_VAR 0 1
5156: PPUSH
5157: CALL 43761 0 2
5161: ST_TO_ADDR
// InGameOn ;
5162: CALL_OW 8
// SetSide ( Heike , 5 ) ;
5166: LD_EXP 20
5170: PPUSH
5171: LD_INT 5
5173: PPUSH
5174: CALL_OW 235
// SetSide ( building , 5 ) ;
5178: LD_VAR 0 1
5182: PPUSH
5183: LD_INT 5
5185: PPUSH
5186: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
5190: LD_EXP 20
5194: PPUSH
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL_OW 120
// wait ( 0 0$3 ) ;
5204: LD_INT 105
5206: PPUSH
5207: CALL_OW 67
// case building of ruFac :
5211: LD_VAR 0 1
5215: PUSH
5216: LD_INT 61
5218: DOUBLE
5219: EQUAL
5220: IFTRUE 5224
5222: GO 5321
5224: POP
// begin if IsOk ( Markov ) then
5225: LD_EXP 27
5229: PPUSH
5230: CALL_OW 302
5234: IFFALSE 5315
// begin Say ( Heike , DH-Krastyo-1 ) ;
5236: LD_EXP 20
5240: PPUSH
5241: LD_STRING DH-Krastyo-1
5243: PPUSH
5244: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
5248: LD_EXP 27
5252: PPUSH
5253: LD_STRING DMar-Krastyo-2
5255: PPUSH
5256: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
5260: LD_EXP 27
5264: PPUSH
5265: LD_STRING DMar-Krastyo-3
5267: PPUSH
5268: CALL_OW 88
// SetSide ( Markov , 2 ) ;
5272: LD_EXP 27
5276: PPUSH
5277: LD_INT 2
5279: PPUSH
5280: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
5284: LD_ADDR_EXP 13
5288: PUSH
5289: LD_EXP 13
5293: PPUSH
5294: LD_EXP 27
5298: PPUSH
5299: CALL 43761 0 2
5303: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
5304: LD_EXP 27
5308: PPUSH
5309: CALL_OW 122
// end else
5313: GO 5319
// SayHEmpty ( ) ;
5315: CALL 4823 0 0
// end ; ruBarKam :
5319: GO 5505
5321: LD_INT 109
5323: DOUBLE
5324: EQUAL
5325: IFTRUE 5329
5327: GO 5422
5329: POP
// begin if IsOk ( Kamil ) then
5330: LD_EXP 24
5334: PPUSH
5335: CALL_OW 302
5339: IFFALSE 5416
// begin Say ( Heike , DH-Kamil-1 ) ;
5341: LD_EXP 20
5345: PPUSH
5346: LD_STRING DH-Kamil-1
5348: PPUSH
5349: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
5353: LD_EXP 24
5357: PPUSH
5358: LD_STRING DKam-Kamil-2
5360: PPUSH
5361: CALL_OW 88
// if IsOk ( Sophia ) then
5365: LD_EXP 26
5369: PPUSH
5370: CALL_OW 302
5374: IFFALSE 5414
// if Sophia in heikeSquad then
5376: LD_EXP 26
5380: PUSH
5381: LD_EXP 13
5385: IN
5386: IFFALSE 5402
// Say ( Kamil , DKam-Kamil-a-3 ) else
5388: LD_EXP 24
5392: PPUSH
5393: LD_STRING DKam-Kamil-a-3
5395: PPUSH
5396: CALL_OW 88
5400: GO 5414
// Say ( Kamil , DKam-Kamil-3 ) ;
5402: LD_EXP 24
5406: PPUSH
5407: LD_STRING DKam-Kamil-3
5409: PPUSH
5410: CALL_OW 88
// end else
5414: GO 5420
// SayHEmpty ( ) ;
5416: CALL 4823 0 0
// end ; ruOutpost1 :
5420: GO 5505
5422: LD_INT 6
5424: DOUBLE
5425: EQUAL
5426: IFTRUE 5430
5428: GO 5450
5430: POP
// begin if IsOk ( Kurt ) then
5431: LD_EXP 29
5435: PPUSH
5436: CALL_OW 302
5440: IFFALSE 5444
// begin end else
5442: GO 5448
// SayHEmpty ( ) ;
5444: CALL 4823 0 0
// end ; ruOutpostBar :
5448: GO 5505
5450: LD_INT 13
5452: DOUBLE
5453: EQUAL
5454: IFTRUE 5458
5456: GO 5504
5458: POP
// begin if not hasGuardPatrolPlan then
5459: LD_EXP 17
5463: NOT
5464: IFFALSE 5498
// begin Say ( Heike , DH-PatrolPlan ) ;
5466: LD_EXP 20
5470: PPUSH
5471: LD_STRING DH-PatrolPlan
5473: PPUSH
5474: CALL_OW 88
// hasGuardPatrolPlan := true ;
5478: LD_ADDR_EXP 17
5482: PUSH
5483: LD_INT 1
5485: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
5486: LD_INT 6
5488: PPUSH
5489: LD_INT 2
5491: PPUSH
5492: CALL_OW 343
// end else
5496: GO 5502
// SayHEmpty ( ) ;
5498: CALL 4823 0 0
// end ; end ;
5502: GO 5505
5504: POP
// ComExitBuilding ( Heike ) ;
5505: LD_EXP 20
5509: PPUSH
5510: CALL_OW 122
// SetSide ( Heike , 2 ) ;
5514: LD_EXP 20
5518: PPUSH
5519: LD_INT 2
5521: PPUSH
5522: CALL_OW 235
// SetSide ( building , 3 ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_INT 3
5533: PPUSH
5534: CALL_OW 235
// InGameOff ;
5538: CALL_OW 9
// end ; end_of_file
5542: LD_VAR 0 2
5546: RET
// on SailEvent ( event ) do begin case event of eventCenterCamOnHeike :
5547: LD_VAR 0 1
5551: PUSH
5552: LD_EXP 18
5556: DOUBLE
5557: EQUAL
5558: IFTRUE 5562
5560: GO 5592
5562: POP
// begin repeat wait ( 0 0$1 ) ;
5563: LD_INT 35
5565: PPUSH
5566: CALL_OW 67
// CenterOnUnits ( Heike ) ;
5570: LD_EXP 20
5574: PPUSH
5575: CALL_OW 85
// until IsDying ( Heike ) ;
5579: LD_EXP 20
5583: PPUSH
5584: CALL_OW 303
5588: IFFALSE 5563
// end ; end ;
5590: GO 5593
5592: POP
// end ;
5593: PPOPN 1
5595: END
// on SaiLEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
5596: LD_OWVAR 59
5600: IFFALSE 5604
// exit ;
5602: GO 5674
// PlaceSeeing ( x , y , 2 , - 12 ) ;
5604: LD_VAR 0 2
5608: PPUSH
5609: LD_VAR 0 3
5613: PPUSH
5614: LD_INT 2
5616: PPUSH
5617: LD_INT 12
5619: NEG
5620: PPUSH
5621: CALL_OW 330
// CenterOnXY ( x , y ) ;
5625: LD_VAR 0 2
5629: PPUSH
5630: LD_VAR 0 3
5634: PPUSH
5635: CALL_OW 84
// wait ( time ) ;
5639: LD_VAR 0 4
5643: PPUSH
5644: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
5648: LD_EXP 20
5652: PPUSH
5653: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
5657: LD_VAR 0 2
5661: PPUSH
5662: LD_VAR 0 3
5666: PPUSH
5667: LD_INT 2
5669: PPUSH
5670: CALL_OW 331
// end ;
5674: PPOPN 7
5676: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
5677: LD_VAR 0 1
5681: PUSH
5682: LD_EXP 20
5686: EQUAL
5687: PUSH
5688: LD_EXP 5
5692: AND
5693: IFFALSE 5702
// YouLost ( Heike ) ;
5695: LD_STRING Heike
5697: PPUSH
5698: CALL_OW 104
// end ; end_of_file
5702: PPOPN 1
5704: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
5709: PPUSH
// u1 := IsInUnit ( unit1 ) ;
5710: LD_ADDR_VAR 0 4
5714: PUSH
5715: LD_VAR 0 1
5719: PPUSH
5720: CALL_OW 310
5724: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
5725: LD_ADDR_VAR 0 5
5729: PUSH
5730: LD_VAR 0 2
5734: PPUSH
5735: CALL_OW 310
5739: ST_TO_ADDR
// result := u1 and u1 = u2 ;
5740: LD_ADDR_VAR 0 3
5744: PUSH
5745: LD_VAR 0 4
5749: PUSH
5750: LD_VAR 0 4
5754: PUSH
5755: LD_VAR 0 5
5759: EQUAL
5760: AND
5761: ST_TO_ADDR
// end ;
5762: LD_VAR 0 3
5766: RET
// export function ShowPlace ( x , y , time ) ; begin
5767: LD_INT 0
5769: PPUSH
// RaiseSailEventCustom ( eventShowPlace , x , y , time , 0 , 0 , 0 ) ;
5770: LD_EXP 19
5774: PPUSH
5775: LD_VAR 0 1
5779: PPUSH
5780: LD_VAR 0 2
5784: PPUSH
5785: LD_VAR 0 3
5789: PPUSH
5790: LD_INT 0
5792: PPUSH
5793: LD_INT 0
5795: PPUSH
5796: LD_INT 0
5798: PPUSH
5799: CALL_OW 595
// end ;
5803: LD_VAR 0 4
5807: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
5808: LD_INT 0
5810: PPUSH
5811: PPUSH
5812: PPUSH
5813: PPUSH
5814: PPUSH
5815: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
5816: LD_VAR 0 1
5820: PPUSH
5821: CALL_OW 302
5825: NOT
5826: PUSH
5827: LD_VAR 0 2
5831: PPUSH
5832: CALL_OW 302
5836: NOT
5837: OR
5838: PUSH
5839: LD_VAR 0 2
5843: PPUSH
5844: CALL_OW 313
5848: PUSH
5849: LD_INT 6
5851: EQUAL
5852: OR
5853: IFFALSE 5857
// exit ;
5855: GO 6066
// btype := GetBType ( building ) ;
5857: LD_ADDR_VAR 0 8
5861: PUSH
5862: LD_VAR 0 2
5866: PPUSH
5867: CALL_OW 266
5871: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_lab , b_lab_half , b_lab_full ] then
5872: LD_VAR 0 8
5876: PUSH
5877: LD_INT 0
5879: PUSH
5880: LD_INT 1
5882: PUSH
5883: LD_INT 4
5885: PUSH
5886: LD_INT 5
5888: PUSH
5889: LD_INT 6
5891: PUSH
5892: LD_INT 7
5894: PUSH
5895: LD_INT 8
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: IN
5907: NOT
5908: IFFALSE 5912
// exit ;
5910: GO 6066
// x := GetX ( building ) ;
5912: LD_ADDR_VAR 0 4
5916: PUSH
5917: LD_VAR 0 2
5921: PPUSH
5922: CALL_OW 250
5926: ST_TO_ADDR
// y := GetY ( building ) ;
5927: LD_ADDR_VAR 0 5
5931: PUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 251
5941: ST_TO_ADDR
// d := GetDir ( building ) ;
5942: LD_ADDR_VAR 0 6
5946: PUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 254
5956: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
5957: LD_ADDR_VAR 0 7
5961: PUSH
5962: LD_VAR 0 4
5966: PPUSH
5967: LD_VAR 0 6
5971: PPUSH
5972: LD_INT 3
5974: PPUSH
5975: CALL_OW 272
5979: PUSH
5980: LD_VAR 0 5
5984: PPUSH
5985: LD_VAR 0 6
5989: PPUSH
5990: LD_INT 3
5992: PPUSH
5993: CALL_OW 273
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
6002: LD_VAR 0 7
6006: PUSH
6007: LD_INT 1
6009: ARRAY
6010: PPUSH
6011: LD_VAR 0 7
6015: PUSH
6016: LD_INT 2
6018: ARRAY
6019: PPUSH
6020: CALL_OW 488
6024: NOT
6025: IFFALSE 6029
// exit ;
6027: GO 6066
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 3 ;
6029: LD_ADDR_VAR 0 3
6033: PUSH
6034: LD_VAR 0 1
6038: PPUSH
6039: LD_VAR 0 7
6043: PUSH
6044: LD_INT 1
6046: ARRAY
6047: PPUSH
6048: LD_VAR 0 7
6052: PUSH
6053: LD_INT 2
6055: ARRAY
6056: PPUSH
6057: CALL_OW 297
6061: PUSH
6062: LD_INT 3
6064: LESS
6065: ST_TO_ADDR
// end ; end_of_file
6066: LD_VAR 0 3
6070: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
6071: LD_INT 0
6073: PPUSH
// if not step then
6074: LD_LOC 1
6078: NOT
6079: IFFALSE 6089
// step := 1 ;
6081: LD_ADDR_LOC 1
6085: PUSH
6086: LD_INT 1
6088: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
6089: LD_STRING HEscape
6091: PUSH
6092: LD_LOC 1
6096: STR
6097: PPUSH
6098: CALL_OW 97
6102: PUSH
6103: LD_INT 1
6105: DOUBLE
6106: EQUAL
6107: IFTRUE 6111
6109: GO 6118
6111: POP
// LockerMinigameSearch ; 2 :
6112: CALL 6151 0 0
6116: GO 6134
6118: LD_INT 2
6120: DOUBLE
6121: EQUAL
6122: IFTRUE 6126
6124: GO 6133
6126: POP
// LockerMinigameSetCode ; end ;
6127: CALL 6225 0 0
6131: GO 6134
6133: POP
// if lockerCodeValid then
6134: LD_EXP 36
6138: IFFALSE 6142
// exit ;
6140: GO 6146
// StartLockerMinigame ;
6142: CALL 6071 0 0
// end ;
6146: LD_VAR 0 1
6150: RET
// function LockerMinigameSearch ; begin
6151: LD_INT 0
6153: PPUSH
// if code then
6154: LD_LOC 2
6158: IFFALSE 6174
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
6160: LD_EXP 20
6164: PPUSH
6165: LD_STRING DH-Escape-3-Hint-0
6167: PPUSH
6168: CALL_OW 88
// exit ;
6172: GO 6220
// end ; Randomize ;
6174: CALL_OW 10
// code := rand ( 1 , 5 ) ;
6178: LD_ADDR_LOC 2
6182: PUSH
6183: LD_INT 1
6185: PPUSH
6186: LD_INT 5
6188: PPUSH
6189: CALL_OW 12
6193: ST_TO_ADDR
// step := 2 ;
6194: LD_ADDR_LOC 1
6198: PUSH
6199: LD_INT 2
6201: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
6202: LD_EXP 20
6206: PPUSH
6207: LD_STRING DH-Escape-3-Hint-
6209: PUSH
6210: LD_LOC 2
6214: STR
6215: PPUSH
6216: CALL_OW 88
// end ;
6220: LD_VAR 0 1
6224: RET
// function LockerMinigameSetCode ; begin
6225: LD_INT 0
6227: PPUSH
// if not code then
6228: LD_LOC 2
6232: NOT
6233: IFFALSE 6243
// code := 0 ;
6235: LD_ADDR_LOC 2
6239: PUSH
6240: LD_INT 0
6242: ST_TO_ADDR
// lockerBusy := true ;
6243: LD_ADDR_EXP 37
6247: PUSH
6248: LD_INT 1
6250: ST_TO_ADDR
// InGameOff ;
6251: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
6255: LD_STRING initLockerMinigame("
6257: PUSH
6258: LD_LOC 2
6262: STR
6263: PUSH
6264: LD_STRING ")
6266: STR
6267: PPUSH
6268: CALL_OW 559
// step := 3 ;
6272: LD_ADDR_LOC 1
6276: PUSH
6277: LD_INT 3
6279: ST_TO_ADDR
// repeat wait ( 1 ) ;
6280: LD_INT 1
6282: PPUSH
6283: CALL_OW 67
// until not lockerBusy ;
6287: LD_EXP 37
6291: NOT
6292: IFFALSE 6280
// InGameOn ;
6294: CALL_OW 8
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
6303: LD_VAR 0 2
6307: PUSH
6308: LD_INT 102
6310: EQUAL
6311: IFFALSE 6333
// begin lockerBusy := false ;
6313: LD_ADDR_EXP 37
6317: PUSH
6318: LD_INT 0
6320: ST_TO_ADDR
// lockerCodeValid := p3 ;
6321: LD_ADDR_EXP 36
6325: PUSH
6326: LD_VAR 0 3
6330: ST_TO_ADDR
// end else
6331: GO 6367
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
6333: LD_VAR 0 1
6337: PPUSH
6338: LD_VAR 0 2
6342: PPUSH
6343: LD_VAR 0 3
6347: PPUSH
6348: LD_VAR 0 4
6352: PPUSH
6353: LD_VAR 0 5
6357: PPUSH
6358: LD_VAR 0 6
6362: PPUSH
6363: CALL 47787 0 6
// end ;
6367: PPOPN 6
6369: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
6370: CALL 47758 0 0
// end ; end_of_file
6374: PPOPN 1
6376: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6377: LD_INT 0
6379: PPUSH
6380: PPUSH
// if exist_mode then
6381: LD_VAR 0 2
6385: IFFALSE 6410
// unit := CreateCharacter ( prefix & ident ) else
6387: LD_ADDR_VAR 0 5
6391: PUSH
6392: LD_VAR 0 3
6396: PUSH
6397: LD_VAR 0 1
6401: STR
6402: PPUSH
6403: CALL_OW 34
6407: ST_TO_ADDR
6408: GO 6425
// unit := NewCharacter ( ident ) ;
6410: LD_ADDR_VAR 0 5
6414: PUSH
6415: LD_VAR 0 1
6419: PPUSH
6420: CALL_OW 25
6424: ST_TO_ADDR
// result := unit ;
6425: LD_ADDR_VAR 0 4
6429: PUSH
6430: LD_VAR 0 5
6434: ST_TO_ADDR
// end ;
6435: LD_VAR 0 4
6439: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6440: LD_INT 0
6442: PPUSH
6443: PPUSH
// if not side or not nation then
6444: LD_VAR 0 1
6448: NOT
6449: PUSH
6450: LD_VAR 0 2
6454: NOT
6455: OR
6456: IFFALSE 6460
// exit ;
6458: GO 7228
// case nation of nation_american :
6460: LD_VAR 0 2
6464: PUSH
6465: LD_INT 1
6467: DOUBLE
6468: EQUAL
6469: IFTRUE 6473
6471: GO 6687
6473: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
6474: LD_ADDR_VAR 0 4
6478: PUSH
6479: LD_INT 35
6481: PUSH
6482: LD_INT 45
6484: PUSH
6485: LD_INT 46
6487: PUSH
6488: LD_INT 47
6490: PUSH
6491: LD_INT 82
6493: PUSH
6494: LD_INT 83
6496: PUSH
6497: LD_INT 84
6499: PUSH
6500: LD_INT 85
6502: PUSH
6503: LD_INT 86
6505: PUSH
6506: LD_INT 1
6508: PUSH
6509: LD_INT 2
6511: PUSH
6512: LD_INT 6
6514: PUSH
6515: LD_INT 15
6517: PUSH
6518: LD_INT 16
6520: PUSH
6521: LD_INT 7
6523: PUSH
6524: LD_INT 12
6526: PUSH
6527: LD_INT 13
6529: PUSH
6530: LD_INT 10
6532: PUSH
6533: LD_INT 14
6535: PUSH
6536: LD_INT 20
6538: PUSH
6539: LD_INT 21
6541: PUSH
6542: LD_INT 22
6544: PUSH
6545: LD_INT 25
6547: PUSH
6548: LD_INT 32
6550: PUSH
6551: LD_INT 27
6553: PUSH
6554: LD_INT 36
6556: PUSH
6557: LD_INT 69
6559: PUSH
6560: LD_INT 39
6562: PUSH
6563: LD_INT 34
6565: PUSH
6566: LD_INT 40
6568: PUSH
6569: LD_INT 48
6571: PUSH
6572: LD_INT 49
6574: PUSH
6575: LD_INT 50
6577: PUSH
6578: LD_INT 51
6580: PUSH
6581: LD_INT 52
6583: PUSH
6584: LD_INT 53
6586: PUSH
6587: LD_INT 54
6589: PUSH
6590: LD_INT 55
6592: PUSH
6593: LD_INT 56
6595: PUSH
6596: LD_INT 57
6598: PUSH
6599: LD_INT 58
6601: PUSH
6602: LD_INT 59
6604: PUSH
6605: LD_INT 60
6607: PUSH
6608: LD_INT 61
6610: PUSH
6611: LD_INT 62
6613: PUSH
6614: LD_INT 80
6616: PUSH
6617: LD_INT 82
6619: PUSH
6620: LD_INT 83
6622: PUSH
6623: LD_INT 84
6625: PUSH
6626: LD_INT 85
6628: PUSH
6629: LD_INT 86
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: ST_TO_ADDR
6685: GO 7152
6687: LD_INT 2
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6695
6693: GO 6921
6695: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
6696: LD_ADDR_VAR 0 4
6700: PUSH
6701: LD_INT 35
6703: PUSH
6704: LD_INT 45
6706: PUSH
6707: LD_INT 46
6709: PUSH
6710: LD_INT 47
6712: PUSH
6713: LD_INT 82
6715: PUSH
6716: LD_INT 83
6718: PUSH
6719: LD_INT 84
6721: PUSH
6722: LD_INT 85
6724: PUSH
6725: LD_INT 87
6727: PUSH
6728: LD_INT 70
6730: PUSH
6731: LD_INT 1
6733: PUSH
6734: LD_INT 11
6736: PUSH
6737: LD_INT 3
6739: PUSH
6740: LD_INT 4
6742: PUSH
6743: LD_INT 5
6745: PUSH
6746: LD_INT 6
6748: PUSH
6749: LD_INT 15
6751: PUSH
6752: LD_INT 18
6754: PUSH
6755: LD_INT 7
6757: PUSH
6758: LD_INT 17
6760: PUSH
6761: LD_INT 8
6763: PUSH
6764: LD_INT 20
6766: PUSH
6767: LD_INT 21
6769: PUSH
6770: LD_INT 22
6772: PUSH
6773: LD_INT 72
6775: PUSH
6776: LD_INT 26
6778: PUSH
6779: LD_INT 69
6781: PUSH
6782: LD_INT 39
6784: PUSH
6785: LD_INT 40
6787: PUSH
6788: LD_INT 41
6790: PUSH
6791: LD_INT 42
6793: PUSH
6794: LD_INT 43
6796: PUSH
6797: LD_INT 48
6799: PUSH
6800: LD_INT 49
6802: PUSH
6803: LD_INT 50
6805: PUSH
6806: LD_INT 51
6808: PUSH
6809: LD_INT 52
6811: PUSH
6812: LD_INT 53
6814: PUSH
6815: LD_INT 54
6817: PUSH
6818: LD_INT 55
6820: PUSH
6821: LD_INT 56
6823: PUSH
6824: LD_INT 60
6826: PUSH
6827: LD_INT 61
6829: PUSH
6830: LD_INT 62
6832: PUSH
6833: LD_INT 66
6835: PUSH
6836: LD_INT 67
6838: PUSH
6839: LD_INT 68
6841: PUSH
6842: LD_INT 81
6844: PUSH
6845: LD_INT 82
6847: PUSH
6848: LD_INT 83
6850: PUSH
6851: LD_INT 84
6853: PUSH
6854: LD_INT 85
6856: PUSH
6857: LD_INT 87
6859: PUSH
6860: LD_INT 88
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: ST_TO_ADDR
6919: GO 7152
6921: LD_INT 3
6923: DOUBLE
6924: EQUAL
6925: IFTRUE 6929
6927: GO 7151
6929: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
6930: LD_ADDR_VAR 0 4
6934: PUSH
6935: LD_INT 46
6937: PUSH
6938: LD_INT 47
6940: PUSH
6941: LD_INT 1
6943: PUSH
6944: LD_INT 2
6946: PUSH
6947: LD_INT 82
6949: PUSH
6950: LD_INT 83
6952: PUSH
6953: LD_INT 84
6955: PUSH
6956: LD_INT 85
6958: PUSH
6959: LD_INT 86
6961: PUSH
6962: LD_INT 11
6964: PUSH
6965: LD_INT 9
6967: PUSH
6968: LD_INT 20
6970: PUSH
6971: LD_INT 19
6973: PUSH
6974: LD_INT 21
6976: PUSH
6977: LD_INT 24
6979: PUSH
6980: LD_INT 22
6982: PUSH
6983: LD_INT 25
6985: PUSH
6986: LD_INT 28
6988: PUSH
6989: LD_INT 29
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 31
6997: PUSH
6998: LD_INT 37
7000: PUSH
7001: LD_INT 38
7003: PUSH
7004: LD_INT 32
7006: PUSH
7007: LD_INT 27
7009: PUSH
7010: LD_INT 33
7012: PUSH
7013: LD_INT 69
7015: PUSH
7016: LD_INT 39
7018: PUSH
7019: LD_INT 34
7021: PUSH
7022: LD_INT 40
7024: PUSH
7025: LD_INT 71
7027: PUSH
7028: LD_INT 23
7030: PUSH
7031: LD_INT 44
7033: PUSH
7034: LD_INT 48
7036: PUSH
7037: LD_INT 49
7039: PUSH
7040: LD_INT 50
7042: PUSH
7043: LD_INT 51
7045: PUSH
7046: LD_INT 52
7048: PUSH
7049: LD_INT 53
7051: PUSH
7052: LD_INT 54
7054: PUSH
7055: LD_INT 55
7057: PUSH
7058: LD_INT 56
7060: PUSH
7061: LD_INT 57
7063: PUSH
7064: LD_INT 58
7066: PUSH
7067: LD_INT 59
7069: PUSH
7070: LD_INT 63
7072: PUSH
7073: LD_INT 64
7075: PUSH
7076: LD_INT 65
7078: PUSH
7079: LD_INT 82
7081: PUSH
7082: LD_INT 83
7084: PUSH
7085: LD_INT 84
7087: PUSH
7088: LD_INT 85
7090: PUSH
7091: LD_INT 86
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: ST_TO_ADDR
7149: GO 7152
7151: POP
// if state > - 1 and state < 3 then
7152: LD_VAR 0 3
7156: PUSH
7157: LD_INT 1
7159: NEG
7160: GREATER
7161: PUSH
7162: LD_VAR 0 3
7166: PUSH
7167: LD_INT 3
7169: LESS
7170: AND
7171: IFFALSE 7228
// for i in result do
7173: LD_ADDR_VAR 0 5
7177: PUSH
7178: LD_VAR 0 4
7182: PUSH
7183: FOR_IN
7184: IFFALSE 7226
// if GetTech ( i , side ) <> state then
7186: LD_VAR 0 5
7190: PPUSH
7191: LD_VAR 0 1
7195: PPUSH
7196: CALL_OW 321
7200: PUSH
7201: LD_VAR 0 3
7205: NONEQUAL
7206: IFFALSE 7224
// result := result diff i ;
7208: LD_ADDR_VAR 0 4
7212: PUSH
7213: LD_VAR 0 4
7217: PUSH
7218: LD_VAR 0 5
7222: DIFF
7223: ST_TO_ADDR
7224: GO 7183
7226: POP
7227: POP
// end ;
7228: LD_VAR 0 4
7232: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7233: LD_INT 0
7235: PPUSH
7236: PPUSH
7237: PPUSH
// result := true ;
7238: LD_ADDR_VAR 0 3
7242: PUSH
7243: LD_INT 1
7245: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7246: LD_ADDR_VAR 0 5
7250: PUSH
7251: LD_VAR 0 2
7255: PPUSH
7256: CALL_OW 480
7260: ST_TO_ADDR
// if not tmp then
7261: LD_VAR 0 5
7265: NOT
7266: IFFALSE 7270
// exit ;
7268: GO 7319
// for i in tmp do
7270: LD_ADDR_VAR 0 4
7274: PUSH
7275: LD_VAR 0 5
7279: PUSH
7280: FOR_IN
7281: IFFALSE 7317
// if GetTech ( i , side ) <> state_researched then
7283: LD_VAR 0 4
7287: PPUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 321
7297: PUSH
7298: LD_INT 2
7300: NONEQUAL
7301: IFFALSE 7315
// begin result := false ;
7303: LD_ADDR_VAR 0 3
7307: PUSH
7308: LD_INT 0
7310: ST_TO_ADDR
// exit ;
7311: POP
7312: POP
7313: GO 7319
// end ;
7315: GO 7280
7317: POP
7318: POP
// end ;
7319: LD_VAR 0 3
7323: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7324: LD_INT 0
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7339: LD_VAR 0 1
7343: NOT
7344: PUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 257
7354: PUSH
7355: LD_INT 9
7357: NONEQUAL
7358: OR
7359: IFFALSE 7363
// exit ;
7361: GO 7936
// side := GetSide ( unit ) ;
7363: LD_ADDR_VAR 0 9
7367: PUSH
7368: LD_VAR 0 1
7372: PPUSH
7373: CALL_OW 255
7377: ST_TO_ADDR
// tech_space := tech_spacanom ;
7378: LD_ADDR_VAR 0 12
7382: PUSH
7383: LD_INT 29
7385: ST_TO_ADDR
// tech_time := tech_taurad ;
7386: LD_ADDR_VAR 0 13
7390: PUSH
7391: LD_INT 28
7393: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7394: LD_ADDR_VAR 0 11
7398: PUSH
7399: LD_VAR 0 1
7403: PPUSH
7404: CALL_OW 310
7408: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7409: LD_VAR 0 11
7413: PPUSH
7414: CALL_OW 247
7418: PUSH
7419: LD_INT 2
7421: EQUAL
7422: IFFALSE 7426
// exit ;
7424: GO 7936
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7426: LD_ADDR_VAR 0 8
7430: PUSH
7431: LD_INT 81
7433: PUSH
7434: LD_VAR 0 9
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: LD_INT 21
7448: PUSH
7449: LD_INT 3
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: ST_TO_ADDR
// if not tmp then
7469: LD_VAR 0 8
7473: NOT
7474: IFFALSE 7478
// exit ;
7476: GO 7936
// if in_unit then
7478: LD_VAR 0 11
7482: IFFALSE 7506
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7484: LD_ADDR_VAR 0 10
7488: PUSH
7489: LD_VAR 0 8
7493: PPUSH
7494: LD_VAR 0 11
7498: PPUSH
7499: CALL_OW 74
7503: ST_TO_ADDR
7504: GO 7526
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7506: LD_ADDR_VAR 0 10
7510: PUSH
7511: LD_VAR 0 8
7515: PPUSH
7516: LD_VAR 0 1
7520: PPUSH
7521: CALL_OW 74
7525: ST_TO_ADDR
// if not enemy then
7526: LD_VAR 0 10
7530: NOT
7531: IFFALSE 7535
// exit ;
7533: GO 7936
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7535: LD_VAR 0 11
7539: PUSH
7540: LD_VAR 0 11
7544: PPUSH
7545: LD_VAR 0 10
7549: PPUSH
7550: CALL_OW 296
7554: PUSH
7555: LD_INT 13
7557: GREATER
7558: AND
7559: PUSH
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_VAR 0 10
7569: PPUSH
7570: CALL_OW 296
7574: PUSH
7575: LD_INT 12
7577: GREATER
7578: OR
7579: IFFALSE 7583
// exit ;
7581: GO 7936
// missile := [ 1 ] ;
7583: LD_ADDR_VAR 0 14
7587: PUSH
7588: LD_INT 1
7590: PUSH
7591: EMPTY
7592: LIST
7593: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7594: LD_VAR 0 9
7598: PPUSH
7599: LD_VAR 0 12
7603: PPUSH
7604: CALL_OW 325
7608: IFFALSE 7637
// missile := Replace ( missile , missile + 1 , 2 ) ;
7610: LD_ADDR_VAR 0 14
7614: PUSH
7615: LD_VAR 0 14
7619: PPUSH
7620: LD_VAR 0 14
7624: PUSH
7625: LD_INT 1
7627: PLUS
7628: PPUSH
7629: LD_INT 2
7631: PPUSH
7632: CALL_OW 1
7636: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7637: LD_VAR 0 9
7641: PPUSH
7642: LD_VAR 0 13
7646: PPUSH
7647: CALL_OW 325
7651: PUSH
7652: LD_VAR 0 10
7656: PPUSH
7657: CALL_OW 255
7661: PPUSH
7662: LD_VAR 0 13
7666: PPUSH
7667: CALL_OW 325
7671: NOT
7672: AND
7673: IFFALSE 7702
// missile := Replace ( missile , missile + 1 , 3 ) ;
7675: LD_ADDR_VAR 0 14
7679: PUSH
7680: LD_VAR 0 14
7684: PPUSH
7685: LD_VAR 0 14
7689: PUSH
7690: LD_INT 1
7692: PLUS
7693: PPUSH
7694: LD_INT 3
7696: PPUSH
7697: CALL_OW 1
7701: ST_TO_ADDR
// if missile < 2 then
7702: LD_VAR 0 14
7706: PUSH
7707: LD_INT 2
7709: LESS
7710: IFFALSE 7714
// exit ;
7712: GO 7936
// x := GetX ( enemy ) ;
7714: LD_ADDR_VAR 0 4
7718: PUSH
7719: LD_VAR 0 10
7723: PPUSH
7724: CALL_OW 250
7728: ST_TO_ADDR
// y := GetY ( enemy ) ;
7729: LD_ADDR_VAR 0 5
7733: PUSH
7734: LD_VAR 0 10
7738: PPUSH
7739: CALL_OW 251
7743: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7744: LD_ADDR_VAR 0 6
7748: PUSH
7749: LD_VAR 0 4
7753: PUSH
7754: LD_INT 1
7756: NEG
7757: PPUSH
7758: LD_INT 1
7760: PPUSH
7761: CALL_OW 12
7765: PLUS
7766: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7767: LD_ADDR_VAR 0 7
7771: PUSH
7772: LD_VAR 0 5
7776: PUSH
7777: LD_INT 1
7779: NEG
7780: PPUSH
7781: LD_INT 1
7783: PPUSH
7784: CALL_OW 12
7788: PLUS
7789: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7790: LD_VAR 0 6
7794: PPUSH
7795: LD_VAR 0 7
7799: PPUSH
7800: CALL_OW 488
7804: NOT
7805: IFFALSE 7827
// begin _x := x ;
7807: LD_ADDR_VAR 0 6
7811: PUSH
7812: LD_VAR 0 4
7816: ST_TO_ADDR
// _y := y ;
7817: LD_ADDR_VAR 0 7
7821: PUSH
7822: LD_VAR 0 5
7826: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
7827: LD_ADDR_VAR 0 3
7831: PUSH
7832: LD_INT 1
7834: PPUSH
7835: LD_VAR 0 14
7839: PPUSH
7840: CALL_OW 12
7844: ST_TO_ADDR
// case i of 1 :
7845: LD_VAR 0 3
7849: PUSH
7850: LD_INT 1
7852: DOUBLE
7853: EQUAL
7854: IFTRUE 7858
7856: GO 7875
7858: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
7859: LD_VAR 0 1
7863: PPUSH
7864: LD_VAR 0 10
7868: PPUSH
7869: CALL_OW 115
7873: GO 7936
7875: LD_INT 2
7877: DOUBLE
7878: EQUAL
7879: IFTRUE 7883
7881: GO 7905
7883: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
7884: LD_VAR 0 1
7888: PPUSH
7889: LD_VAR 0 6
7893: PPUSH
7894: LD_VAR 0 7
7898: PPUSH
7899: CALL_OW 153
7903: GO 7936
7905: LD_INT 3
7907: DOUBLE
7908: EQUAL
7909: IFTRUE 7913
7911: GO 7935
7913: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
7914: LD_VAR 0 1
7918: PPUSH
7919: LD_VAR 0 6
7923: PPUSH
7924: LD_VAR 0 7
7928: PPUSH
7929: CALL_OW 154
7933: GO 7936
7935: POP
// end ;
7936: LD_VAR 0 2
7940: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
7941: LD_INT 0
7943: PPUSH
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// if not unit or not building then
7949: LD_VAR 0 1
7953: NOT
7954: PUSH
7955: LD_VAR 0 2
7959: NOT
7960: OR
7961: IFFALSE 7965
// exit ;
7963: GO 8123
// x := GetX ( building ) ;
7965: LD_ADDR_VAR 0 5
7969: PUSH
7970: LD_VAR 0 2
7974: PPUSH
7975: CALL_OW 250
7979: ST_TO_ADDR
// y := GetY ( building ) ;
7980: LD_ADDR_VAR 0 6
7984: PUSH
7985: LD_VAR 0 2
7989: PPUSH
7990: CALL_OW 251
7994: ST_TO_ADDR
// for i = 0 to 5 do
7995: LD_ADDR_VAR 0 4
7999: PUSH
8000: DOUBLE
8001: LD_INT 0
8003: DEC
8004: ST_TO_ADDR
8005: LD_INT 5
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8121
// begin _x := ShiftX ( x , i , 3 ) ;
8011: LD_ADDR_VAR 0 7
8015: PUSH
8016: LD_VAR 0 5
8020: PPUSH
8021: LD_VAR 0 4
8025: PPUSH
8026: LD_INT 3
8028: PPUSH
8029: CALL_OW 272
8033: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
8034: LD_ADDR_VAR 0 8
8038: PUSH
8039: LD_VAR 0 6
8043: PPUSH
8044: LD_VAR 0 4
8048: PPUSH
8049: LD_INT 3
8051: PPUSH
8052: CALL_OW 273
8056: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8057: LD_VAR 0 7
8061: PPUSH
8062: LD_VAR 0 8
8066: PPUSH
8067: CALL_OW 488
8071: NOT
8072: IFFALSE 8076
// continue ;
8074: GO 8008
// if HexInfo ( _x , _y ) = 0 then
8076: LD_VAR 0 7
8080: PPUSH
8081: LD_VAR 0 8
8085: PPUSH
8086: CALL_OW 428
8090: PUSH
8091: LD_INT 0
8093: EQUAL
8094: IFFALSE 8119
// begin ComMoveXY ( unit , _x , _y ) ;
8096: LD_VAR 0 1
8100: PPUSH
8101: LD_VAR 0 7
8105: PPUSH
8106: LD_VAR 0 8
8110: PPUSH
8111: CALL_OW 111
// exit ;
8115: POP
8116: POP
8117: GO 8123
// end ; end ;
8119: GO 8008
8121: POP
8122: POP
// end ;
8123: LD_VAR 0 3
8127: RET
// export function ScanBase ( side , base_area ) ; begin
8128: LD_INT 0
8130: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8131: LD_ADDR_VAR 0 3
8135: PUSH
8136: LD_VAR 0 2
8140: PPUSH
8141: LD_INT 81
8143: PUSH
8144: LD_VAR 0 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PPUSH
8153: CALL_OW 70
8157: ST_TO_ADDR
// end ;
8158: LD_VAR 0 3
8162: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8163: LD_INT 0
8165: PPUSH
8166: PPUSH
8167: PPUSH
8168: PPUSH
// result := false ;
8169: LD_ADDR_VAR 0 2
8173: PUSH
8174: LD_INT 0
8176: ST_TO_ADDR
// side := GetSide ( unit ) ;
8177: LD_ADDR_VAR 0 3
8181: PUSH
8182: LD_VAR 0 1
8186: PPUSH
8187: CALL_OW 255
8191: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8192: LD_ADDR_VAR 0 4
8196: PUSH
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 248
8206: ST_TO_ADDR
// case nat of 1 :
8207: LD_VAR 0 4
8211: PUSH
8212: LD_INT 1
8214: DOUBLE
8215: EQUAL
8216: IFTRUE 8220
8218: GO 8231
8220: POP
// tech := tech_lassight ; 2 :
8221: LD_ADDR_VAR 0 5
8225: PUSH
8226: LD_INT 12
8228: ST_TO_ADDR
8229: GO 8270
8231: LD_INT 2
8233: DOUBLE
8234: EQUAL
8235: IFTRUE 8239
8237: GO 8250
8239: POP
// tech := tech_mortar ; 3 :
8240: LD_ADDR_VAR 0 5
8244: PUSH
8245: LD_INT 41
8247: ST_TO_ADDR
8248: GO 8270
8250: LD_INT 3
8252: DOUBLE
8253: EQUAL
8254: IFTRUE 8258
8256: GO 8269
8258: POP
// tech := tech_bazooka ; end ;
8259: LD_ADDR_VAR 0 5
8263: PUSH
8264: LD_INT 44
8266: ST_TO_ADDR
8267: GO 8270
8269: POP
// if Researched ( side , tech ) then
8270: LD_VAR 0 3
8274: PPUSH
8275: LD_VAR 0 5
8279: PPUSH
8280: CALL_OW 325
8284: IFFALSE 8311
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8286: LD_ADDR_VAR 0 2
8290: PUSH
8291: LD_INT 5
8293: PUSH
8294: LD_INT 8
8296: PUSH
8297: LD_INT 9
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: PUSH
8305: LD_VAR 0 4
8309: ARRAY
8310: ST_TO_ADDR
// end ;
8311: LD_VAR 0 2
8315: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8316: LD_INT 0
8318: PPUSH
8319: PPUSH
8320: PPUSH
// if not mines then
8321: LD_VAR 0 2
8325: NOT
8326: IFFALSE 8330
// exit ;
8328: GO 8474
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8330: LD_ADDR_VAR 0 5
8334: PUSH
8335: LD_INT 81
8337: PUSH
8338: LD_VAR 0 1
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PUSH
8347: LD_INT 3
8349: PUSH
8350: LD_INT 21
8352: PUSH
8353: LD_INT 3
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PPUSH
8368: CALL_OW 69
8372: ST_TO_ADDR
// for i in mines do
8373: LD_ADDR_VAR 0 4
8377: PUSH
8378: LD_VAR 0 2
8382: PUSH
8383: FOR_IN
8384: IFFALSE 8472
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8386: LD_VAR 0 4
8390: PUSH
8391: LD_INT 1
8393: ARRAY
8394: PPUSH
8395: LD_VAR 0 4
8399: PUSH
8400: LD_INT 2
8402: ARRAY
8403: PPUSH
8404: CALL_OW 458
8408: NOT
8409: IFFALSE 8413
// continue ;
8411: GO 8383
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8413: LD_VAR 0 4
8417: PUSH
8418: LD_INT 1
8420: ARRAY
8421: PPUSH
8422: LD_VAR 0 4
8426: PUSH
8427: LD_INT 2
8429: ARRAY
8430: PPUSH
8431: CALL_OW 428
8435: PUSH
8436: LD_VAR 0 5
8440: IN
8441: IFFALSE 8470
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8443: LD_VAR 0 4
8447: PUSH
8448: LD_INT 1
8450: ARRAY
8451: PPUSH
8452: LD_VAR 0 4
8456: PUSH
8457: LD_INT 2
8459: ARRAY
8460: PPUSH
8461: LD_VAR 0 1
8465: PPUSH
8466: CALL_OW 456
// end ;
8470: GO 8383
8472: POP
8473: POP
// end ;
8474: LD_VAR 0 3
8478: RET
// export function Count ( array ) ; var i ; begin
8479: LD_INT 0
8481: PPUSH
8482: PPUSH
// result := 0 ;
8483: LD_ADDR_VAR 0 2
8487: PUSH
8488: LD_INT 0
8490: ST_TO_ADDR
// for i in array do
8491: LD_ADDR_VAR 0 3
8495: PUSH
8496: LD_VAR 0 1
8500: PUSH
8501: FOR_IN
8502: IFFALSE 8526
// if i then
8504: LD_VAR 0 3
8508: IFFALSE 8524
// result := result + 1 ;
8510: LD_ADDR_VAR 0 2
8514: PUSH
8515: LD_VAR 0 2
8519: PUSH
8520: LD_INT 1
8522: PLUS
8523: ST_TO_ADDR
8524: GO 8501
8526: POP
8527: POP
// end ;
8528: LD_VAR 0 2
8532: RET
// export function IsEmpty ( building ) ; begin
8533: LD_INT 0
8535: PPUSH
// if not building then
8536: LD_VAR 0 1
8540: NOT
8541: IFFALSE 8545
// exit ;
8543: GO 8588
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8545: LD_ADDR_VAR 0 2
8549: PUSH
8550: LD_VAR 0 1
8554: PUSH
8555: LD_INT 22
8557: PUSH
8558: LD_VAR 0 1
8562: PPUSH
8563: CALL_OW 255
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 58
8574: PUSH
8575: EMPTY
8576: LIST
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PPUSH
8582: CALL_OW 69
8586: IN
8587: ST_TO_ADDR
// end ;
8588: LD_VAR 0 2
8592: RET
// export function IsNotFull ( building ) ; var places ; begin
8593: LD_INT 0
8595: PPUSH
8596: PPUSH
// if not building then
8597: LD_VAR 0 1
8601: NOT
8602: IFFALSE 8606
// exit ;
8604: GO 8777
// result := false ;
8606: LD_ADDR_VAR 0 2
8610: PUSH
8611: LD_INT 0
8613: ST_TO_ADDR
// places := 0 ;
8614: LD_ADDR_VAR 0 3
8618: PUSH
8619: LD_INT 0
8621: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
8622: LD_VAR 0 1
8626: PPUSH
8627: CALL_OW 266
8631: PUSH
8632: LD_INT 0
8634: DOUBLE
8635: EQUAL
8636: IFTRUE 8694
8638: LD_INT 1
8640: DOUBLE
8641: EQUAL
8642: IFTRUE 8694
8644: LD_INT 6
8646: DOUBLE
8647: EQUAL
8648: IFTRUE 8694
8650: LD_INT 7
8652: DOUBLE
8653: EQUAL
8654: IFTRUE 8694
8656: LD_INT 8
8658: DOUBLE
8659: EQUAL
8660: IFTRUE 8694
8662: LD_INT 4
8664: DOUBLE
8665: EQUAL
8666: IFTRUE 8694
8668: LD_INT 5
8670: DOUBLE
8671: EQUAL
8672: IFTRUE 8694
8674: LD_INT 2
8676: DOUBLE
8677: EQUAL
8678: IFTRUE 8694
8680: LD_INT 3
8682: DOUBLE
8683: EQUAL
8684: IFTRUE 8694
8686: LD_INT 35
8688: DOUBLE
8689: EQUAL
8690: IFTRUE 8694
8692: GO 8705
8694: POP
// places := 6 ; b_bunker , b_breastwork :
8695: LD_ADDR_VAR 0 3
8699: PUSH
8700: LD_INT 6
8702: ST_TO_ADDR
8703: GO 8750
8705: LD_INT 32
8707: DOUBLE
8708: EQUAL
8709: IFTRUE 8719
8711: LD_INT 31
8713: DOUBLE
8714: EQUAL
8715: IFTRUE 8719
8717: GO 8730
8719: POP
// places := 1 ; b_control_tower :
8720: LD_ADDR_VAR 0 3
8724: PUSH
8725: LD_INT 1
8727: ST_TO_ADDR
8728: GO 8750
8730: LD_INT 36
8732: DOUBLE
8733: EQUAL
8734: IFTRUE 8738
8736: GO 8749
8738: POP
// places := 3 ; end ;
8739: LD_ADDR_VAR 0 3
8743: PUSH
8744: LD_INT 3
8746: ST_TO_ADDR
8747: GO 8750
8749: POP
// if places then
8750: LD_VAR 0 3
8754: IFFALSE 8777
// result := UnitsInside ( building ) < places ;
8756: LD_ADDR_VAR 0 2
8760: PUSH
8761: LD_VAR 0 1
8765: PPUSH
8766: CALL_OW 313
8770: PUSH
8771: LD_VAR 0 3
8775: LESS
8776: ST_TO_ADDR
// end ;
8777: LD_VAR 0 2
8781: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8782: LD_INT 0
8784: PPUSH
8785: PPUSH
8786: PPUSH
8787: PPUSH
// tmp := [ ] ;
8788: LD_ADDR_VAR 0 3
8792: PUSH
8793: EMPTY
8794: ST_TO_ADDR
// list := [ ] ;
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: EMPTY
8801: ST_TO_ADDR
// for i = 16 to 25 do
8802: LD_ADDR_VAR 0 4
8806: PUSH
8807: DOUBLE
8808: LD_INT 16
8810: DEC
8811: ST_TO_ADDR
8812: LD_INT 25
8814: PUSH
8815: FOR_TO
8816: IFFALSE 8889
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8818: LD_ADDR_VAR 0 3
8822: PUSH
8823: LD_VAR 0 3
8827: PUSH
8828: LD_INT 22
8830: PUSH
8831: LD_VAR 0 1
8835: PPUSH
8836: CALL_OW 255
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: LD_INT 91
8847: PUSH
8848: LD_VAR 0 1
8852: PUSH
8853: LD_INT 6
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 30
8863: PUSH
8864: LD_VAR 0 4
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: PUSH
8878: EMPTY
8879: LIST
8880: PPUSH
8881: CALL_OW 69
8885: ADD
8886: ST_TO_ADDR
8887: GO 8815
8889: POP
8890: POP
// for i = 1 to tmp do
8891: LD_ADDR_VAR 0 4
8895: PUSH
8896: DOUBLE
8897: LD_INT 1
8899: DEC
8900: ST_TO_ADDR
8901: LD_VAR 0 3
8905: PUSH
8906: FOR_TO
8907: IFFALSE 8995
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8909: LD_ADDR_VAR 0 5
8913: PUSH
8914: LD_VAR 0 5
8918: PUSH
8919: LD_VAR 0 3
8923: PUSH
8924: LD_VAR 0 4
8928: ARRAY
8929: PPUSH
8930: CALL_OW 266
8934: PUSH
8935: LD_VAR 0 3
8939: PUSH
8940: LD_VAR 0 4
8944: ARRAY
8945: PPUSH
8946: CALL_OW 250
8950: PUSH
8951: LD_VAR 0 3
8955: PUSH
8956: LD_VAR 0 4
8960: ARRAY
8961: PPUSH
8962: CALL_OW 251
8966: PUSH
8967: LD_VAR 0 3
8971: PUSH
8972: LD_VAR 0 4
8976: ARRAY
8977: PPUSH
8978: CALL_OW 254
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: PUSH
8989: EMPTY
8990: LIST
8991: ADD
8992: ST_TO_ADDR
8993: GO 8906
8995: POP
8996: POP
// result := list ;
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: LD_VAR 0 5
9006: ST_TO_ADDR
// end ;
9007: LD_VAR 0 2
9011: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
9012: LD_INT 0
9014: PPUSH
9015: PPUSH
9016: PPUSH
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
// if not factory then
9021: LD_VAR 0 1
9025: NOT
9026: IFFALSE 9030
// exit ;
9028: GO 9623
// if control = control_apeman then
9030: LD_VAR 0 4
9034: PUSH
9035: LD_INT 5
9037: EQUAL
9038: IFFALSE 9147
// begin tmp := UnitsInside ( factory ) ;
9040: LD_ADDR_VAR 0 8
9044: PUSH
9045: LD_VAR 0 1
9049: PPUSH
9050: CALL_OW 313
9054: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
9055: LD_VAR 0 8
9059: PPUSH
9060: LD_INT 25
9062: PUSH
9063: LD_INT 12
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL_OW 72
9074: NOT
9075: IFFALSE 9085
// control := control_manual ;
9077: LD_ADDR_VAR 0 4
9081: PUSH
9082: LD_INT 1
9084: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
9085: LD_ADDR_VAR 0 8
9089: PUSH
9090: LD_VAR 0 1
9094: PPUSH
9095: CALL 8782 0 1
9099: ST_TO_ADDR
// if tmp then
9100: LD_VAR 0 8
9104: IFFALSE 9147
// begin for i in tmp do
9106: LD_ADDR_VAR 0 7
9110: PUSH
9111: LD_VAR 0 8
9115: PUSH
9116: FOR_IN
9117: IFFALSE 9145
// if i [ 1 ] = b_ext_radio then
9119: LD_VAR 0 7
9123: PUSH
9124: LD_INT 1
9126: ARRAY
9127: PUSH
9128: LD_INT 22
9130: EQUAL
9131: IFFALSE 9143
// begin control := control_remote ;
9133: LD_ADDR_VAR 0 4
9137: PUSH
9138: LD_INT 2
9140: ST_TO_ADDR
// break ;
9141: GO 9145
// end ;
9143: GO 9116
9145: POP
9146: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9147: LD_VAR 0 1
9151: PPUSH
9152: LD_VAR 0 2
9156: PPUSH
9157: LD_VAR 0 3
9161: PPUSH
9162: LD_VAR 0 4
9166: PPUSH
9167: LD_VAR 0 5
9171: PPUSH
9172: CALL_OW 448
9176: IFFALSE 9211
// begin result := [ chassis , engine , control , weapon ] ;
9178: LD_ADDR_VAR 0 6
9182: PUSH
9183: LD_VAR 0 2
9187: PUSH
9188: LD_VAR 0 3
9192: PUSH
9193: LD_VAR 0 4
9197: PUSH
9198: LD_VAR 0 5
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: ST_TO_ADDR
// exit ;
9209: GO 9623
// end ; _chassis := AvailableChassisList ( factory ) ;
9211: LD_ADDR_VAR 0 9
9215: PUSH
9216: LD_VAR 0 1
9220: PPUSH
9221: CALL_OW 475
9225: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9226: LD_ADDR_VAR 0 11
9230: PUSH
9231: LD_VAR 0 1
9235: PPUSH
9236: CALL_OW 476
9240: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9241: LD_ADDR_VAR 0 12
9245: PUSH
9246: LD_VAR 0 1
9250: PPUSH
9251: CALL_OW 477
9255: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9256: LD_ADDR_VAR 0 10
9260: PUSH
9261: LD_VAR 0 1
9265: PPUSH
9266: CALL_OW 478
9270: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9271: LD_VAR 0 9
9275: NOT
9276: PUSH
9277: LD_VAR 0 11
9281: NOT
9282: OR
9283: PUSH
9284: LD_VAR 0 12
9288: NOT
9289: OR
9290: PUSH
9291: LD_VAR 0 10
9295: NOT
9296: OR
9297: IFFALSE 9332
// begin result := [ chassis , engine , control , weapon ] ;
9299: LD_ADDR_VAR 0 6
9303: PUSH
9304: LD_VAR 0 2
9308: PUSH
9309: LD_VAR 0 3
9313: PUSH
9314: LD_VAR 0 4
9318: PUSH
9319: LD_VAR 0 5
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: ST_TO_ADDR
// exit ;
9330: GO 9623
// end ; if not chassis in _chassis then
9332: LD_VAR 0 2
9336: PUSH
9337: LD_VAR 0 9
9341: IN
9342: NOT
9343: IFFALSE 9369
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9345: LD_ADDR_VAR 0 2
9349: PUSH
9350: LD_VAR 0 9
9354: PUSH
9355: LD_INT 1
9357: PPUSH
9358: LD_VAR 0 9
9362: PPUSH
9363: CALL_OW 12
9367: ARRAY
9368: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9369: LD_VAR 0 2
9373: PPUSH
9374: LD_VAR 0 3
9378: PPUSH
9379: CALL 9628 0 2
9383: NOT
9384: IFFALSE 9443
// repeat engine := _engine [ 1 ] ;
9386: LD_ADDR_VAR 0 3
9390: PUSH
9391: LD_VAR 0 11
9395: PUSH
9396: LD_INT 1
9398: ARRAY
9399: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9400: LD_ADDR_VAR 0 11
9404: PUSH
9405: LD_VAR 0 11
9409: PPUSH
9410: LD_INT 1
9412: PPUSH
9413: CALL_OW 3
9417: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9418: LD_VAR 0 2
9422: PPUSH
9423: LD_VAR 0 3
9427: PPUSH
9428: CALL 9628 0 2
9432: PUSH
9433: LD_VAR 0 11
9437: PUSH
9438: EMPTY
9439: EQUAL
9440: OR
9441: IFFALSE 9386
// if not control in _control then
9443: LD_VAR 0 4
9447: PUSH
9448: LD_VAR 0 12
9452: IN
9453: NOT
9454: IFFALSE 9480
// control := _control [ rand ( 1 , _control ) ] ;
9456: LD_ADDR_VAR 0 4
9460: PUSH
9461: LD_VAR 0 12
9465: PUSH
9466: LD_INT 1
9468: PPUSH
9469: LD_VAR 0 12
9473: PPUSH
9474: CALL_OW 12
9478: ARRAY
9479: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9480: LD_VAR 0 2
9484: PPUSH
9485: LD_VAR 0 5
9489: PPUSH
9490: CALL 9848 0 2
9494: NOT
9495: IFFALSE 9554
// repeat weapon := _weapon [ 1 ] ;
9497: LD_ADDR_VAR 0 5
9501: PUSH
9502: LD_VAR 0 10
9506: PUSH
9507: LD_INT 1
9509: ARRAY
9510: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9511: LD_ADDR_VAR 0 10
9515: PUSH
9516: LD_VAR 0 10
9520: PPUSH
9521: LD_INT 1
9523: PPUSH
9524: CALL_OW 3
9528: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9529: LD_VAR 0 2
9533: PPUSH
9534: LD_VAR 0 5
9538: PPUSH
9539: CALL 9848 0 2
9543: PUSH
9544: LD_VAR 0 10
9548: PUSH
9549: EMPTY
9550: EQUAL
9551: OR
9552: IFFALSE 9497
// result := [ ] ;
9554: LD_ADDR_VAR 0 6
9558: PUSH
9559: EMPTY
9560: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9561: LD_VAR 0 1
9565: PPUSH
9566: LD_VAR 0 2
9570: PPUSH
9571: LD_VAR 0 3
9575: PPUSH
9576: LD_VAR 0 4
9580: PPUSH
9581: LD_VAR 0 5
9585: PPUSH
9586: CALL_OW 448
9590: IFFALSE 9623
// result := [ chassis , engine , control , weapon ] ;
9592: LD_ADDR_VAR 0 6
9596: PUSH
9597: LD_VAR 0 2
9601: PUSH
9602: LD_VAR 0 3
9606: PUSH
9607: LD_VAR 0 4
9611: PUSH
9612: LD_VAR 0 5
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: ST_TO_ADDR
// end ;
9623: LD_VAR 0 6
9627: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9628: LD_INT 0
9630: PPUSH
// if not chassis or not engine then
9631: LD_VAR 0 1
9635: NOT
9636: PUSH
9637: LD_VAR 0 2
9641: NOT
9642: OR
9643: IFFALSE 9647
// exit ;
9645: GO 9843
// case engine of engine_solar :
9647: LD_VAR 0 2
9651: PUSH
9652: LD_INT 2
9654: DOUBLE
9655: EQUAL
9656: IFTRUE 9660
9658: GO 9698
9660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9661: LD_ADDR_VAR 0 3
9665: PUSH
9666: LD_INT 11
9668: PUSH
9669: LD_INT 12
9671: PUSH
9672: LD_INT 13
9674: PUSH
9675: LD_INT 14
9677: PUSH
9678: LD_INT 1
9680: PUSH
9681: LD_INT 2
9683: PUSH
9684: LD_INT 3
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: ST_TO_ADDR
9696: GO 9827
9698: LD_INT 1
9700: DOUBLE
9701: EQUAL
9702: IFTRUE 9706
9704: GO 9768
9706: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9707: LD_ADDR_VAR 0 3
9711: PUSH
9712: LD_INT 11
9714: PUSH
9715: LD_INT 12
9717: PUSH
9718: LD_INT 13
9720: PUSH
9721: LD_INT 14
9723: PUSH
9724: LD_INT 1
9726: PUSH
9727: LD_INT 2
9729: PUSH
9730: LD_INT 3
9732: PUSH
9733: LD_INT 4
9735: PUSH
9736: LD_INT 5
9738: PUSH
9739: LD_INT 21
9741: PUSH
9742: LD_INT 23
9744: PUSH
9745: LD_INT 22
9747: PUSH
9748: LD_INT 24
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: ST_TO_ADDR
9766: GO 9827
9768: LD_INT 3
9770: DOUBLE
9771: EQUAL
9772: IFTRUE 9776
9774: GO 9826
9776: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9777: LD_ADDR_VAR 0 3
9781: PUSH
9782: LD_INT 13
9784: PUSH
9785: LD_INT 14
9787: PUSH
9788: LD_INT 2
9790: PUSH
9791: LD_INT 3
9793: PUSH
9794: LD_INT 4
9796: PUSH
9797: LD_INT 5
9799: PUSH
9800: LD_INT 21
9802: PUSH
9803: LD_INT 22
9805: PUSH
9806: LD_INT 23
9808: PUSH
9809: LD_INT 24
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: ST_TO_ADDR
9824: GO 9827
9826: POP
// result := ( chassis in result ) ;
9827: LD_ADDR_VAR 0 3
9831: PUSH
9832: LD_VAR 0 1
9836: PUSH
9837: LD_VAR 0 3
9841: IN
9842: ST_TO_ADDR
// end ;
9843: LD_VAR 0 3
9847: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9848: LD_INT 0
9850: PPUSH
// if not chassis or not weapon then
9851: LD_VAR 0 1
9855: NOT
9856: PUSH
9857: LD_VAR 0 2
9861: NOT
9862: OR
9863: IFFALSE 9867
// exit ;
9865: GO 10929
// case weapon of us_machine_gun :
9867: LD_VAR 0 2
9871: PUSH
9872: LD_INT 2
9874: DOUBLE
9875: EQUAL
9876: IFTRUE 9880
9878: GO 9910
9880: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9881: LD_ADDR_VAR 0 3
9885: PUSH
9886: LD_INT 1
9888: PUSH
9889: LD_INT 2
9891: PUSH
9892: LD_INT 3
9894: PUSH
9895: LD_INT 4
9897: PUSH
9898: LD_INT 5
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: ST_TO_ADDR
9908: GO 10913
9910: LD_INT 3
9912: DOUBLE
9913: EQUAL
9914: IFTRUE 9918
9916: GO 9948
9918: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9919: LD_ADDR_VAR 0 3
9923: PUSH
9924: LD_INT 1
9926: PUSH
9927: LD_INT 2
9929: PUSH
9930: LD_INT 3
9932: PUSH
9933: LD_INT 4
9935: PUSH
9936: LD_INT 5
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: ST_TO_ADDR
9946: GO 10913
9948: LD_INT 11
9950: DOUBLE
9951: EQUAL
9952: IFTRUE 9956
9954: GO 9986
9956: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9957: LD_ADDR_VAR 0 3
9961: PUSH
9962: LD_INT 1
9964: PUSH
9965: LD_INT 2
9967: PUSH
9968: LD_INT 3
9970: PUSH
9971: LD_INT 4
9973: PUSH
9974: LD_INT 5
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: ST_TO_ADDR
9984: GO 10913
9986: LD_INT 4
9988: DOUBLE
9989: EQUAL
9990: IFTRUE 9994
9992: GO 10020
9994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
9995: LD_ADDR_VAR 0 3
9999: PUSH
10000: LD_INT 2
10002: PUSH
10003: LD_INT 3
10005: PUSH
10006: LD_INT 4
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: ST_TO_ADDR
10018: GO 10913
10020: LD_INT 5
10022: DOUBLE
10023: EQUAL
10024: IFTRUE 10028
10026: GO 10054
10028: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
10029: LD_ADDR_VAR 0 3
10033: PUSH
10034: LD_INT 2
10036: PUSH
10037: LD_INT 3
10039: PUSH
10040: LD_INT 4
10042: PUSH
10043: LD_INT 5
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: ST_TO_ADDR
10052: GO 10913
10054: LD_INT 9
10056: DOUBLE
10057: EQUAL
10058: IFTRUE 10062
10060: GO 10088
10062: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
10063: LD_ADDR_VAR 0 3
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: LD_INT 3
10073: PUSH
10074: LD_INT 4
10076: PUSH
10077: LD_INT 5
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: ST_TO_ADDR
10086: GO 10913
10088: LD_INT 7
10090: DOUBLE
10091: EQUAL
10092: IFTRUE 10096
10094: GO 10122
10096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
10097: LD_ADDR_VAR 0 3
10101: PUSH
10102: LD_INT 2
10104: PUSH
10105: LD_INT 3
10107: PUSH
10108: LD_INT 4
10110: PUSH
10111: LD_INT 5
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: ST_TO_ADDR
10120: GO 10913
10122: LD_INT 12
10124: DOUBLE
10125: EQUAL
10126: IFTRUE 10130
10128: GO 10156
10130: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
10131: LD_ADDR_VAR 0 3
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: LD_INT 3
10141: PUSH
10142: LD_INT 4
10144: PUSH
10145: LD_INT 5
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: ST_TO_ADDR
10154: GO 10913
10156: LD_INT 13
10158: DOUBLE
10159: EQUAL
10160: IFTRUE 10164
10162: GO 10190
10164: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10165: LD_ADDR_VAR 0 3
10169: PUSH
10170: LD_INT 2
10172: PUSH
10173: LD_INT 3
10175: PUSH
10176: LD_INT 4
10178: PUSH
10179: LD_INT 5
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: ST_TO_ADDR
10188: GO 10913
10190: LD_INT 14
10192: DOUBLE
10193: EQUAL
10194: IFTRUE 10198
10196: GO 10216
10198: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10199: LD_ADDR_VAR 0 3
10203: PUSH
10204: LD_INT 4
10206: PUSH
10207: LD_INT 5
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: ST_TO_ADDR
10214: GO 10913
10216: LD_INT 6
10218: DOUBLE
10219: EQUAL
10220: IFTRUE 10224
10222: GO 10242
10224: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10225: LD_ADDR_VAR 0 3
10229: PUSH
10230: LD_INT 4
10232: PUSH
10233: LD_INT 5
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: ST_TO_ADDR
10240: GO 10913
10242: LD_INT 10
10244: DOUBLE
10245: EQUAL
10246: IFTRUE 10250
10248: GO 10268
10250: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10251: LD_ADDR_VAR 0 3
10255: PUSH
10256: LD_INT 4
10258: PUSH
10259: LD_INT 5
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: ST_TO_ADDR
10266: GO 10913
10268: LD_INT 22
10270: DOUBLE
10271: EQUAL
10272: IFTRUE 10276
10274: GO 10302
10276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10277: LD_ADDR_VAR 0 3
10281: PUSH
10282: LD_INT 11
10284: PUSH
10285: LD_INT 12
10287: PUSH
10288: LD_INT 13
10290: PUSH
10291: LD_INT 14
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: ST_TO_ADDR
10300: GO 10913
10302: LD_INT 23
10304: DOUBLE
10305: EQUAL
10306: IFTRUE 10310
10308: GO 10336
10310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10311: LD_ADDR_VAR 0 3
10315: PUSH
10316: LD_INT 11
10318: PUSH
10319: LD_INT 12
10321: PUSH
10322: LD_INT 13
10324: PUSH
10325: LD_INT 14
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: ST_TO_ADDR
10334: GO 10913
10336: LD_INT 24
10338: DOUBLE
10339: EQUAL
10340: IFTRUE 10344
10342: GO 10370
10344: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10345: LD_ADDR_VAR 0 3
10349: PUSH
10350: LD_INT 11
10352: PUSH
10353: LD_INT 12
10355: PUSH
10356: LD_INT 13
10358: PUSH
10359: LD_INT 14
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: ST_TO_ADDR
10368: GO 10913
10370: LD_INT 30
10372: DOUBLE
10373: EQUAL
10374: IFTRUE 10378
10376: GO 10404
10378: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10379: LD_ADDR_VAR 0 3
10383: PUSH
10384: LD_INT 11
10386: PUSH
10387: LD_INT 12
10389: PUSH
10390: LD_INT 13
10392: PUSH
10393: LD_INT 14
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: ST_TO_ADDR
10402: GO 10913
10404: LD_INT 25
10406: DOUBLE
10407: EQUAL
10408: IFTRUE 10412
10410: GO 10430
10412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10413: LD_ADDR_VAR 0 3
10417: PUSH
10418: LD_INT 13
10420: PUSH
10421: LD_INT 14
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: ST_TO_ADDR
10428: GO 10913
10430: LD_INT 27
10432: DOUBLE
10433: EQUAL
10434: IFTRUE 10438
10436: GO 10456
10438: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10439: LD_ADDR_VAR 0 3
10443: PUSH
10444: LD_INT 13
10446: PUSH
10447: LD_INT 14
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: ST_TO_ADDR
10454: GO 10913
10456: LD_EXP 43
10460: DOUBLE
10461: EQUAL
10462: IFTRUE 10466
10464: GO 10492
10466: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10467: LD_ADDR_VAR 0 3
10471: PUSH
10472: LD_INT 11
10474: PUSH
10475: LD_INT 12
10477: PUSH
10478: LD_INT 13
10480: PUSH
10481: LD_INT 14
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: ST_TO_ADDR
10490: GO 10913
10492: LD_INT 28
10494: DOUBLE
10495: EQUAL
10496: IFTRUE 10500
10498: GO 10518
10500: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_INT 13
10508: PUSH
10509: LD_INT 14
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: ST_TO_ADDR
10516: GO 10913
10518: LD_INT 29
10520: DOUBLE
10521: EQUAL
10522: IFTRUE 10526
10524: GO 10544
10526: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10527: LD_ADDR_VAR 0 3
10531: PUSH
10532: LD_INT 13
10534: PUSH
10535: LD_INT 14
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: ST_TO_ADDR
10542: GO 10913
10544: LD_INT 31
10546: DOUBLE
10547: EQUAL
10548: IFTRUE 10552
10550: GO 10570
10552: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10553: LD_ADDR_VAR 0 3
10557: PUSH
10558: LD_INT 13
10560: PUSH
10561: LD_INT 14
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: ST_TO_ADDR
10568: GO 10913
10570: LD_INT 26
10572: DOUBLE
10573: EQUAL
10574: IFTRUE 10578
10576: GO 10596
10578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10579: LD_ADDR_VAR 0 3
10583: PUSH
10584: LD_INT 13
10586: PUSH
10587: LD_INT 14
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: ST_TO_ADDR
10594: GO 10913
10596: LD_INT 42
10598: DOUBLE
10599: EQUAL
10600: IFTRUE 10604
10602: GO 10630
10604: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10605: LD_ADDR_VAR 0 3
10609: PUSH
10610: LD_INT 21
10612: PUSH
10613: LD_INT 22
10615: PUSH
10616: LD_INT 23
10618: PUSH
10619: LD_INT 24
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: ST_TO_ADDR
10628: GO 10913
10630: LD_INT 43
10632: DOUBLE
10633: EQUAL
10634: IFTRUE 10638
10636: GO 10664
10638: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10639: LD_ADDR_VAR 0 3
10643: PUSH
10644: LD_INT 21
10646: PUSH
10647: LD_INT 22
10649: PUSH
10650: LD_INT 23
10652: PUSH
10653: LD_INT 24
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: ST_TO_ADDR
10662: GO 10913
10664: LD_INT 44
10666: DOUBLE
10667: EQUAL
10668: IFTRUE 10672
10670: GO 10698
10672: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10673: LD_ADDR_VAR 0 3
10677: PUSH
10678: LD_INT 21
10680: PUSH
10681: LD_INT 22
10683: PUSH
10684: LD_INT 23
10686: PUSH
10687: LD_INT 24
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: ST_TO_ADDR
10696: GO 10913
10698: LD_INT 45
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10732
10706: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10707: LD_ADDR_VAR 0 3
10711: PUSH
10712: LD_INT 21
10714: PUSH
10715: LD_INT 22
10717: PUSH
10718: LD_INT 23
10720: PUSH
10721: LD_INT 24
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: ST_TO_ADDR
10730: GO 10913
10732: LD_INT 49
10734: DOUBLE
10735: EQUAL
10736: IFTRUE 10740
10738: GO 10766
10740: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10741: LD_ADDR_VAR 0 3
10745: PUSH
10746: LD_INT 21
10748: PUSH
10749: LD_INT 22
10751: PUSH
10752: LD_INT 23
10754: PUSH
10755: LD_INT 24
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: ST_TO_ADDR
10764: GO 10913
10766: LD_INT 51
10768: DOUBLE
10769: EQUAL
10770: IFTRUE 10774
10772: GO 10800
10774: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10775: LD_ADDR_VAR 0 3
10779: PUSH
10780: LD_INT 21
10782: PUSH
10783: LD_INT 22
10785: PUSH
10786: LD_INT 23
10788: PUSH
10789: LD_INT 24
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: ST_TO_ADDR
10798: GO 10913
10800: LD_INT 52
10802: DOUBLE
10803: EQUAL
10804: IFTRUE 10808
10806: GO 10834
10808: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10809: LD_ADDR_VAR 0 3
10813: PUSH
10814: LD_INT 21
10816: PUSH
10817: LD_INT 22
10819: PUSH
10820: LD_INT 23
10822: PUSH
10823: LD_INT 24
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: ST_TO_ADDR
10832: GO 10913
10834: LD_INT 53
10836: DOUBLE
10837: EQUAL
10838: IFTRUE 10842
10840: GO 10860
10842: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10843: LD_ADDR_VAR 0 3
10847: PUSH
10848: LD_INT 23
10850: PUSH
10851: LD_INT 24
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: ST_TO_ADDR
10858: GO 10913
10860: LD_INT 46
10862: DOUBLE
10863: EQUAL
10864: IFTRUE 10868
10866: GO 10886
10868: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10869: LD_ADDR_VAR 0 3
10873: PUSH
10874: LD_INT 23
10876: PUSH
10877: LD_INT 24
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: ST_TO_ADDR
10884: GO 10913
10886: LD_INT 47
10888: DOUBLE
10889: EQUAL
10890: IFTRUE 10894
10892: GO 10912
10894: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10895: LD_ADDR_VAR 0 3
10899: PUSH
10900: LD_INT 23
10902: PUSH
10903: LD_INT 24
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: ST_TO_ADDR
10910: GO 10913
10912: POP
// result := ( chassis in result ) ;
10913: LD_ADDR_VAR 0 3
10917: PUSH
10918: LD_VAR 0 1
10922: PUSH
10923: LD_VAR 0 3
10927: IN
10928: ST_TO_ADDR
// end ;
10929: LD_VAR 0 3
10933: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10934: LD_INT 0
10936: PPUSH
10937: PPUSH
10938: PPUSH
10939: PPUSH
10940: PPUSH
10941: PPUSH
10942: PPUSH
// result := array ;
10943: LD_ADDR_VAR 0 5
10947: PUSH
10948: LD_VAR 0 1
10952: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10953: LD_VAR 0 1
10957: NOT
10958: PUSH
10959: LD_VAR 0 2
10963: NOT
10964: OR
10965: PUSH
10966: LD_VAR 0 3
10970: NOT
10971: OR
10972: PUSH
10973: LD_VAR 0 2
10977: PUSH
10978: LD_VAR 0 1
10982: GREATER
10983: OR
10984: PUSH
10985: LD_VAR 0 3
10989: PUSH
10990: LD_VAR 0 1
10994: GREATER
10995: OR
10996: IFFALSE 11000
// exit ;
10998: GO 11296
// if direction then
11000: LD_VAR 0 4
11004: IFFALSE 11068
// begin d := 1 ;
11006: LD_ADDR_VAR 0 9
11010: PUSH
11011: LD_INT 1
11013: ST_TO_ADDR
// if i_from > i_to then
11014: LD_VAR 0 2
11018: PUSH
11019: LD_VAR 0 3
11023: GREATER
11024: IFFALSE 11050
// length := ( array - i_from ) + i_to else
11026: LD_ADDR_VAR 0 11
11030: PUSH
11031: LD_VAR 0 1
11035: PUSH
11036: LD_VAR 0 2
11040: MINUS
11041: PUSH
11042: LD_VAR 0 3
11046: PLUS
11047: ST_TO_ADDR
11048: GO 11066
// length := i_to - i_from ;
11050: LD_ADDR_VAR 0 11
11054: PUSH
11055: LD_VAR 0 3
11059: PUSH
11060: LD_VAR 0 2
11064: MINUS
11065: ST_TO_ADDR
// end else
11066: GO 11129
// begin d := - 1 ;
11068: LD_ADDR_VAR 0 9
11072: PUSH
11073: LD_INT 1
11075: NEG
11076: ST_TO_ADDR
// if i_from > i_to then
11077: LD_VAR 0 2
11081: PUSH
11082: LD_VAR 0 3
11086: GREATER
11087: IFFALSE 11107
// length := i_from - i_to else
11089: LD_ADDR_VAR 0 11
11093: PUSH
11094: LD_VAR 0 2
11098: PUSH
11099: LD_VAR 0 3
11103: MINUS
11104: ST_TO_ADDR
11105: GO 11129
// length := ( array - i_to ) + i_from ;
11107: LD_ADDR_VAR 0 11
11111: PUSH
11112: LD_VAR 0 1
11116: PUSH
11117: LD_VAR 0 3
11121: MINUS
11122: PUSH
11123: LD_VAR 0 2
11127: PLUS
11128: ST_TO_ADDR
// end ; if not length then
11129: LD_VAR 0 11
11133: NOT
11134: IFFALSE 11138
// exit ;
11136: GO 11296
// tmp := array ;
11138: LD_ADDR_VAR 0 10
11142: PUSH
11143: LD_VAR 0 1
11147: ST_TO_ADDR
// for i = 1 to length do
11148: LD_ADDR_VAR 0 6
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 11
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11284
// begin for j = 1 to array do
11166: LD_ADDR_VAR 0 7
11170: PUSH
11171: DOUBLE
11172: LD_INT 1
11174: DEC
11175: ST_TO_ADDR
11176: LD_VAR 0 1
11180: PUSH
11181: FOR_TO
11182: IFFALSE 11270
// begin k := j + d ;
11184: LD_ADDR_VAR 0 8
11188: PUSH
11189: LD_VAR 0 7
11193: PUSH
11194: LD_VAR 0 9
11198: PLUS
11199: ST_TO_ADDR
// if k > array then
11200: LD_VAR 0 8
11204: PUSH
11205: LD_VAR 0 1
11209: GREATER
11210: IFFALSE 11220
// k := 1 ;
11212: LD_ADDR_VAR 0 8
11216: PUSH
11217: LD_INT 1
11219: ST_TO_ADDR
// if not k then
11220: LD_VAR 0 8
11224: NOT
11225: IFFALSE 11237
// k := array ;
11227: LD_ADDR_VAR 0 8
11231: PUSH
11232: LD_VAR 0 1
11236: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11237: LD_ADDR_VAR 0 10
11241: PUSH
11242: LD_VAR 0 10
11246: PPUSH
11247: LD_VAR 0 8
11251: PPUSH
11252: LD_VAR 0 1
11256: PUSH
11257: LD_VAR 0 7
11261: ARRAY
11262: PPUSH
11263: CALL_OW 1
11267: ST_TO_ADDR
// end ;
11268: GO 11181
11270: POP
11271: POP
// array := tmp ;
11272: LD_ADDR_VAR 0 1
11276: PUSH
11277: LD_VAR 0 10
11281: ST_TO_ADDR
// end ;
11282: GO 11163
11284: POP
11285: POP
// result := array ;
11286: LD_ADDR_VAR 0 5
11290: PUSH
11291: LD_VAR 0 1
11295: ST_TO_ADDR
// end ;
11296: LD_VAR 0 5
11300: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11301: LD_INT 0
11303: PPUSH
11304: PPUSH
// result := 0 ;
11305: LD_ADDR_VAR 0 3
11309: PUSH
11310: LD_INT 0
11312: ST_TO_ADDR
// if not array or not value in array then
11313: LD_VAR 0 1
11317: NOT
11318: PUSH
11319: LD_VAR 0 2
11323: PUSH
11324: LD_VAR 0 1
11328: IN
11329: NOT
11330: OR
11331: IFFALSE 11335
// exit ;
11333: GO 11389
// for i = 1 to array do
11335: LD_ADDR_VAR 0 4
11339: PUSH
11340: DOUBLE
11341: LD_INT 1
11343: DEC
11344: ST_TO_ADDR
11345: LD_VAR 0 1
11349: PUSH
11350: FOR_TO
11351: IFFALSE 11387
// if value = array [ i ] then
11353: LD_VAR 0 2
11357: PUSH
11358: LD_VAR 0 1
11362: PUSH
11363: LD_VAR 0 4
11367: ARRAY
11368: EQUAL
11369: IFFALSE 11385
// begin result := i ;
11371: LD_ADDR_VAR 0 3
11375: PUSH
11376: LD_VAR 0 4
11380: ST_TO_ADDR
// exit ;
11381: POP
11382: POP
11383: GO 11389
// end ;
11385: GO 11350
11387: POP
11388: POP
// end ;
11389: LD_VAR 0 3
11393: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11394: LD_INT 0
11396: PPUSH
// vc_chassis := chassis ;
11397: LD_ADDR_OWVAR 37
11401: PUSH
11402: LD_VAR 0 1
11406: ST_TO_ADDR
// vc_engine := engine ;
11407: LD_ADDR_OWVAR 39
11411: PUSH
11412: LD_VAR 0 2
11416: ST_TO_ADDR
// vc_control := control ;
11417: LD_ADDR_OWVAR 38
11421: PUSH
11422: LD_VAR 0 3
11426: ST_TO_ADDR
// vc_weapon := weapon ;
11427: LD_ADDR_OWVAR 40
11431: PUSH
11432: LD_VAR 0 4
11436: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11437: LD_ADDR_OWVAR 41
11441: PUSH
11442: LD_VAR 0 5
11446: ST_TO_ADDR
// end ;
11447: LD_VAR 0 6
11451: RET
// export function WantPlant ( unit ) ; var task ; begin
11452: LD_INT 0
11454: PPUSH
11455: PPUSH
// result := false ;
11456: LD_ADDR_VAR 0 2
11460: PUSH
11461: LD_INT 0
11463: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11464: LD_ADDR_VAR 0 3
11468: PUSH
11469: LD_VAR 0 1
11473: PPUSH
11474: CALL_OW 437
11478: ST_TO_ADDR
// if task then
11479: LD_VAR 0 3
11483: IFFALSE 11511
// if task [ 1 ] [ 1 ] = p then
11485: LD_VAR 0 3
11489: PUSH
11490: LD_INT 1
11492: ARRAY
11493: PUSH
11494: LD_INT 1
11496: ARRAY
11497: PUSH
11498: LD_STRING p
11500: EQUAL
11501: IFFALSE 11511
// result := true ;
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: LD_INT 1
11510: ST_TO_ADDR
// end ;
11511: LD_VAR 0 2
11515: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11516: LD_INT 0
11518: PPUSH
11519: PPUSH
11520: PPUSH
11521: PPUSH
// if pos < 1 then
11522: LD_VAR 0 2
11526: PUSH
11527: LD_INT 1
11529: LESS
11530: IFFALSE 11534
// exit ;
11532: GO 11837
// if pos = 1 then
11534: LD_VAR 0 2
11538: PUSH
11539: LD_INT 1
11541: EQUAL
11542: IFFALSE 11575
// result := Replace ( arr , pos [ 1 ] , value ) else
11544: LD_ADDR_VAR 0 4
11548: PUSH
11549: LD_VAR 0 1
11553: PPUSH
11554: LD_VAR 0 2
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PPUSH
11563: LD_VAR 0 3
11567: PPUSH
11568: CALL_OW 1
11572: ST_TO_ADDR
11573: GO 11837
// begin tmp := arr ;
11575: LD_ADDR_VAR 0 6
11579: PUSH
11580: LD_VAR 0 1
11584: ST_TO_ADDR
// s_arr := [ tmp ] ;
11585: LD_ADDR_VAR 0 7
11589: PUSH
11590: LD_VAR 0 6
11594: PUSH
11595: EMPTY
11596: LIST
11597: ST_TO_ADDR
// for i = 1 to pos - 1 do
11598: LD_ADDR_VAR 0 5
11602: PUSH
11603: DOUBLE
11604: LD_INT 1
11606: DEC
11607: ST_TO_ADDR
11608: LD_VAR 0 2
11612: PUSH
11613: LD_INT 1
11615: MINUS
11616: PUSH
11617: FOR_TO
11618: IFFALSE 11663
// begin tmp := tmp [ pos [ i ] ] ;
11620: LD_ADDR_VAR 0 6
11624: PUSH
11625: LD_VAR 0 6
11629: PUSH
11630: LD_VAR 0 2
11634: PUSH
11635: LD_VAR 0 5
11639: ARRAY
11640: ARRAY
11641: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11642: LD_ADDR_VAR 0 7
11646: PUSH
11647: LD_VAR 0 7
11651: PUSH
11652: LD_VAR 0 6
11656: PUSH
11657: EMPTY
11658: LIST
11659: ADD
11660: ST_TO_ADDR
// end ;
11661: GO 11617
11663: POP
11664: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11665: LD_ADDR_VAR 0 6
11669: PUSH
11670: LD_VAR 0 6
11674: PPUSH
11675: LD_VAR 0 2
11679: PUSH
11680: LD_VAR 0 2
11684: ARRAY
11685: PPUSH
11686: LD_VAR 0 3
11690: PPUSH
11691: CALL_OW 1
11695: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11696: LD_ADDR_VAR 0 7
11700: PUSH
11701: LD_VAR 0 7
11705: PPUSH
11706: LD_VAR 0 7
11710: PPUSH
11711: LD_VAR 0 6
11715: PPUSH
11716: CALL_OW 1
11720: ST_TO_ADDR
// for i = s_arr downto 2 do
11721: LD_ADDR_VAR 0 5
11725: PUSH
11726: DOUBLE
11727: LD_VAR 0 7
11731: INC
11732: ST_TO_ADDR
11733: LD_INT 2
11735: PUSH
11736: FOR_DOWNTO
11737: IFFALSE 11821
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11739: LD_ADDR_VAR 0 6
11743: PUSH
11744: LD_VAR 0 7
11748: PUSH
11749: LD_VAR 0 5
11753: PUSH
11754: LD_INT 1
11756: MINUS
11757: ARRAY
11758: PPUSH
11759: LD_VAR 0 2
11763: PUSH
11764: LD_VAR 0 5
11768: PUSH
11769: LD_INT 1
11771: MINUS
11772: ARRAY
11773: PPUSH
11774: LD_VAR 0 7
11778: PUSH
11779: LD_VAR 0 5
11783: ARRAY
11784: PPUSH
11785: CALL_OW 1
11789: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11790: LD_ADDR_VAR 0 7
11794: PUSH
11795: LD_VAR 0 7
11799: PPUSH
11800: LD_VAR 0 5
11804: PUSH
11805: LD_INT 1
11807: MINUS
11808: PPUSH
11809: LD_VAR 0 6
11813: PPUSH
11814: CALL_OW 1
11818: ST_TO_ADDR
// end ;
11819: GO 11736
11821: POP
11822: POP
// result := s_arr [ 1 ] ;
11823: LD_ADDR_VAR 0 4
11827: PUSH
11828: LD_VAR 0 7
11832: PUSH
11833: LD_INT 1
11835: ARRAY
11836: ST_TO_ADDR
// end ; end ;
11837: LD_VAR 0 4
11841: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11842: LD_INT 0
11844: PPUSH
11845: PPUSH
// if not list then
11846: LD_VAR 0 1
11850: NOT
11851: IFFALSE 11855
// exit ;
11853: GO 11946
// i := list [ pos1 ] ;
11855: LD_ADDR_VAR 0 5
11859: PUSH
11860: LD_VAR 0 1
11864: PUSH
11865: LD_VAR 0 2
11869: ARRAY
11870: ST_TO_ADDR
// if not i then
11871: LD_VAR 0 5
11875: NOT
11876: IFFALSE 11880
// exit ;
11878: GO 11946
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11880: LD_ADDR_VAR 0 1
11884: PUSH
11885: LD_VAR 0 1
11889: PPUSH
11890: LD_VAR 0 2
11894: PPUSH
11895: LD_VAR 0 1
11899: PUSH
11900: LD_VAR 0 3
11904: ARRAY
11905: PPUSH
11906: CALL_OW 1
11910: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11911: LD_ADDR_VAR 0 1
11915: PUSH
11916: LD_VAR 0 1
11920: PPUSH
11921: LD_VAR 0 3
11925: PPUSH
11926: LD_VAR 0 5
11930: PPUSH
11931: CALL_OW 1
11935: ST_TO_ADDR
// result := list ;
11936: LD_ADDR_VAR 0 4
11940: PUSH
11941: LD_VAR 0 1
11945: ST_TO_ADDR
// end ;
11946: LD_VAR 0 4
11950: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11951: LD_INT 0
11953: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11954: LD_ADDR_VAR 0 5
11958: PUSH
11959: LD_VAR 0 1
11963: PPUSH
11964: CALL_OW 250
11968: PPUSH
11969: LD_VAR 0 1
11973: PPUSH
11974: CALL_OW 251
11978: PPUSH
11979: LD_VAR 0 2
11983: PPUSH
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_VAR 0 4
11993: PPUSH
11994: CALL 12004 0 5
11998: ST_TO_ADDR
// end ;
11999: LD_VAR 0 5
12003: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
12004: LD_INT 0
12006: PPUSH
12007: PPUSH
12008: PPUSH
12009: PPUSH
// if not list then
12010: LD_VAR 0 3
12014: NOT
12015: IFFALSE 12019
// exit ;
12017: GO 12407
// result := [ ] ;
12019: LD_ADDR_VAR 0 6
12023: PUSH
12024: EMPTY
12025: ST_TO_ADDR
// for i in list do
12026: LD_ADDR_VAR 0 7
12030: PUSH
12031: LD_VAR 0 3
12035: PUSH
12036: FOR_IN
12037: IFFALSE 12239
// begin tmp := GetDistUnitXY ( i , x , y ) ;
12039: LD_ADDR_VAR 0 9
12043: PUSH
12044: LD_VAR 0 7
12048: PPUSH
12049: LD_VAR 0 1
12053: PPUSH
12054: LD_VAR 0 2
12058: PPUSH
12059: CALL_OW 297
12063: ST_TO_ADDR
// if not result then
12064: LD_VAR 0 6
12068: NOT
12069: IFFALSE 12095
// result := [ [ i , tmp ] ] else
12071: LD_ADDR_VAR 0 6
12075: PUSH
12076: LD_VAR 0 7
12080: PUSH
12081: LD_VAR 0 9
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: EMPTY
12091: LIST
12092: ST_TO_ADDR
12093: GO 12237
// begin if result [ result ] [ 2 ] < tmp then
12095: LD_VAR 0 6
12099: PUSH
12100: LD_VAR 0 6
12104: ARRAY
12105: PUSH
12106: LD_INT 2
12108: ARRAY
12109: PUSH
12110: LD_VAR 0 9
12114: LESS
12115: IFFALSE 12157
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
12117: LD_ADDR_VAR 0 6
12121: PUSH
12122: LD_VAR 0 6
12126: PPUSH
12127: LD_VAR 0 6
12131: PUSH
12132: LD_INT 1
12134: PLUS
12135: PPUSH
12136: LD_VAR 0 7
12140: PUSH
12141: LD_VAR 0 9
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PPUSH
12150: CALL_OW 2
12154: ST_TO_ADDR
12155: GO 12237
// for j = 1 to result do
12157: LD_ADDR_VAR 0 8
12161: PUSH
12162: DOUBLE
12163: LD_INT 1
12165: DEC
12166: ST_TO_ADDR
12167: LD_VAR 0 6
12171: PUSH
12172: FOR_TO
12173: IFFALSE 12235
// begin if tmp < result [ j ] [ 2 ] then
12175: LD_VAR 0 9
12179: PUSH
12180: LD_VAR 0 6
12184: PUSH
12185: LD_VAR 0 8
12189: ARRAY
12190: PUSH
12191: LD_INT 2
12193: ARRAY
12194: LESS
12195: IFFALSE 12233
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12197: LD_ADDR_VAR 0 6
12201: PUSH
12202: LD_VAR 0 6
12206: PPUSH
12207: LD_VAR 0 8
12211: PPUSH
12212: LD_VAR 0 7
12216: PUSH
12217: LD_VAR 0 9
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PPUSH
12226: CALL_OW 2
12230: ST_TO_ADDR
// break ;
12231: GO 12235
// end ; end ;
12233: GO 12172
12235: POP
12236: POP
// end ; end ;
12237: GO 12036
12239: POP
12240: POP
// if result and not asc then
12241: LD_VAR 0 6
12245: PUSH
12246: LD_VAR 0 4
12250: NOT
12251: AND
12252: IFFALSE 12327
// begin tmp := result ;
12254: LD_ADDR_VAR 0 9
12258: PUSH
12259: LD_VAR 0 6
12263: ST_TO_ADDR
// for i = tmp downto 1 do
12264: LD_ADDR_VAR 0 7
12268: PUSH
12269: DOUBLE
12270: LD_VAR 0 9
12274: INC
12275: ST_TO_ADDR
12276: LD_INT 1
12278: PUSH
12279: FOR_DOWNTO
12280: IFFALSE 12325
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12282: LD_ADDR_VAR 0 6
12286: PUSH
12287: LD_VAR 0 6
12291: PPUSH
12292: LD_VAR 0 9
12296: PUSH
12297: LD_VAR 0 7
12301: MINUS
12302: PUSH
12303: LD_INT 1
12305: PLUS
12306: PPUSH
12307: LD_VAR 0 9
12311: PUSH
12312: LD_VAR 0 7
12316: ARRAY
12317: PPUSH
12318: CALL_OW 1
12322: ST_TO_ADDR
12323: GO 12279
12325: POP
12326: POP
// end ; tmp := [ ] ;
12327: LD_ADDR_VAR 0 9
12331: PUSH
12332: EMPTY
12333: ST_TO_ADDR
// if mode then
12334: LD_VAR 0 5
12338: IFFALSE 12407
// begin for i = 1 to result do
12340: LD_ADDR_VAR 0 7
12344: PUSH
12345: DOUBLE
12346: LD_INT 1
12348: DEC
12349: ST_TO_ADDR
12350: LD_VAR 0 6
12354: PUSH
12355: FOR_TO
12356: IFFALSE 12395
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12358: LD_ADDR_VAR 0 9
12362: PUSH
12363: LD_VAR 0 9
12367: PPUSH
12368: LD_VAR 0 7
12372: PPUSH
12373: LD_VAR 0 6
12377: PUSH
12378: LD_VAR 0 7
12382: ARRAY
12383: PUSH
12384: LD_INT 1
12386: ARRAY
12387: PPUSH
12388: CALL_OW 1
12392: ST_TO_ADDR
12393: GO 12355
12395: POP
12396: POP
// result := tmp ;
12397: LD_ADDR_VAR 0 6
12401: PUSH
12402: LD_VAR 0 9
12406: ST_TO_ADDR
// end ; end ;
12407: LD_VAR 0 6
12411: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12412: LD_INT 0
12414: PPUSH
12415: PPUSH
12416: PPUSH
12417: PPUSH
12418: PPUSH
12419: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12420: LD_ADDR_VAR 0 5
12424: PUSH
12425: LD_INT 0
12427: PUSH
12428: LD_INT 0
12430: PUSH
12431: LD_INT 0
12433: PUSH
12434: EMPTY
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: ST_TO_ADDR
// if not x or not y then
12442: LD_VAR 0 2
12446: NOT
12447: PUSH
12448: LD_VAR 0 3
12452: NOT
12453: OR
12454: IFFALSE 12458
// exit ;
12456: GO 14110
// if not range then
12458: LD_VAR 0 4
12462: NOT
12463: IFFALSE 12473
// range := 10 ;
12465: LD_ADDR_VAR 0 4
12469: PUSH
12470: LD_INT 10
12472: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12473: LD_ADDR_VAR 0 8
12477: PUSH
12478: LD_INT 81
12480: PUSH
12481: LD_VAR 0 1
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 92
12492: PUSH
12493: LD_VAR 0 2
12497: PUSH
12498: LD_VAR 0 3
12502: PUSH
12503: LD_VAR 0 4
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 3
12516: PUSH
12517: LD_INT 21
12519: PUSH
12520: LD_INT 3
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: ST_TO_ADDR
// if not tmp then
12541: LD_VAR 0 8
12545: NOT
12546: IFFALSE 12550
// exit ;
12548: GO 14110
// for i in tmp do
12550: LD_ADDR_VAR 0 6
12554: PUSH
12555: LD_VAR 0 8
12559: PUSH
12560: FOR_IN
12561: IFFALSE 14085
// begin points := [ 0 , 0 , 0 ] ;
12563: LD_ADDR_VAR 0 9
12567: PUSH
12568: LD_INT 0
12570: PUSH
12571: LD_INT 0
12573: PUSH
12574: LD_INT 0
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: ST_TO_ADDR
// bpoints := 1 ;
12582: LD_ADDR_VAR 0 10
12586: PUSH
12587: LD_INT 1
12589: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12590: LD_VAR 0 6
12594: PPUSH
12595: CALL_OW 247
12599: PUSH
12600: LD_INT 1
12602: DOUBLE
12603: EQUAL
12604: IFTRUE 12608
12606: GO 13186
12608: POP
// begin if GetClass ( i ) = 1 then
12609: LD_VAR 0 6
12613: PPUSH
12614: CALL_OW 257
12618: PUSH
12619: LD_INT 1
12621: EQUAL
12622: IFFALSE 12643
// points := [ 10 , 5 , 3 ] ;
12624: LD_ADDR_VAR 0 9
12628: PUSH
12629: LD_INT 10
12631: PUSH
12632: LD_INT 5
12634: PUSH
12635: LD_INT 3
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: LIST
12642: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
12643: LD_VAR 0 6
12647: PPUSH
12648: CALL_OW 257
12652: PUSH
12653: LD_INT 2
12655: PUSH
12656: LD_INT 3
12658: PUSH
12659: LD_INT 4
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: IN
12667: IFFALSE 12688
// points := [ 3 , 2 , 1 ] ;
12669: LD_ADDR_VAR 0 9
12673: PUSH
12674: LD_INT 3
12676: PUSH
12677: LD_INT 2
12679: PUSH
12680: LD_INT 1
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: LIST
12687: ST_TO_ADDR
// if GetClass ( i ) = 5 then
12688: LD_VAR 0 6
12692: PPUSH
12693: CALL_OW 257
12697: PUSH
12698: LD_INT 5
12700: EQUAL
12701: IFFALSE 12722
// points := [ 130 , 5 , 2 ] ;
12703: LD_ADDR_VAR 0 9
12707: PUSH
12708: LD_INT 130
12710: PUSH
12711: LD_INT 5
12713: PUSH
12714: LD_INT 2
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: ST_TO_ADDR
// if GetClass ( i ) = 8 then
12722: LD_VAR 0 6
12726: PPUSH
12727: CALL_OW 257
12731: PUSH
12732: LD_INT 8
12734: EQUAL
12735: IFFALSE 12756
// points := [ 35 , 35 , 30 ] ;
12737: LD_ADDR_VAR 0 9
12741: PUSH
12742: LD_INT 35
12744: PUSH
12745: LD_INT 35
12747: PUSH
12748: LD_INT 30
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: ST_TO_ADDR
// if GetClass ( i ) = 9 then
12756: LD_VAR 0 6
12760: PPUSH
12761: CALL_OW 257
12765: PUSH
12766: LD_INT 9
12768: EQUAL
12769: IFFALSE 12790
// points := [ 20 , 55 , 40 ] ;
12771: LD_ADDR_VAR 0 9
12775: PUSH
12776: LD_INT 20
12778: PUSH
12779: LD_INT 55
12781: PUSH
12782: LD_INT 40
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
12790: LD_VAR 0 6
12794: PPUSH
12795: CALL_OW 257
12799: PUSH
12800: LD_INT 12
12802: PUSH
12803: LD_INT 16
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: IN
12810: IFFALSE 12831
// points := [ 5 , 3 , 2 ] ;
12812: LD_ADDR_VAR 0 9
12816: PUSH
12817: LD_INT 5
12819: PUSH
12820: LD_INT 3
12822: PUSH
12823: LD_INT 2
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: ST_TO_ADDR
// if GetClass ( i ) = 17 then
12831: LD_VAR 0 6
12835: PPUSH
12836: CALL_OW 257
12840: PUSH
12841: LD_INT 17
12843: EQUAL
12844: IFFALSE 12865
// points := [ 100 , 50 , 75 ] ;
12846: LD_ADDR_VAR 0 9
12850: PUSH
12851: LD_INT 100
12853: PUSH
12854: LD_INT 50
12856: PUSH
12857: LD_INT 75
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: ST_TO_ADDR
// if GetClass ( i ) = 15 then
12865: LD_VAR 0 6
12869: PPUSH
12870: CALL_OW 257
12874: PUSH
12875: LD_INT 15
12877: EQUAL
12878: IFFALSE 12899
// points := [ 10 , 5 , 3 ] ;
12880: LD_ADDR_VAR 0 9
12884: PUSH
12885: LD_INT 10
12887: PUSH
12888: LD_INT 5
12890: PUSH
12891: LD_INT 3
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: LIST
12898: ST_TO_ADDR
// if GetClass ( i ) = 14 then
12899: LD_VAR 0 6
12903: PPUSH
12904: CALL_OW 257
12908: PUSH
12909: LD_INT 14
12911: EQUAL
12912: IFFALSE 12933
// points := [ 10 , 0 , 0 ] ;
12914: LD_ADDR_VAR 0 9
12918: PUSH
12919: LD_INT 10
12921: PUSH
12922: LD_INT 0
12924: PUSH
12925: LD_INT 0
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: ST_TO_ADDR
// if GetClass ( i ) = 11 then
12933: LD_VAR 0 6
12937: PPUSH
12938: CALL_OW 257
12942: PUSH
12943: LD_INT 11
12945: EQUAL
12946: IFFALSE 12967
// points := [ 30 , 10 , 5 ] ;
12948: LD_ADDR_VAR 0 9
12952: PUSH
12953: LD_INT 30
12955: PUSH
12956: LD_INT 10
12958: PUSH
12959: LD_INT 5
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
12967: LD_VAR 0 1
12971: PPUSH
12972: LD_INT 5
12974: PPUSH
12975: CALL_OW 321
12979: PUSH
12980: LD_INT 2
12982: EQUAL
12983: IFFALSE 13000
// bpoints := bpoints * 1.8 ;
12985: LD_ADDR_VAR 0 10
12989: PUSH
12990: LD_VAR 0 10
12994: PUSH
12995: LD_REAL  1.80000000000000E+0000
12998: MUL
12999: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
13000: LD_VAR 0 6
13004: PPUSH
13005: CALL_OW 257
13009: PUSH
13010: LD_INT 1
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: LD_INT 3
13018: PUSH
13019: LD_INT 4
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: IN
13028: PUSH
13029: LD_VAR 0 1
13033: PPUSH
13034: LD_INT 51
13036: PPUSH
13037: CALL_OW 321
13041: PUSH
13042: LD_INT 2
13044: EQUAL
13045: AND
13046: IFFALSE 13063
// bpoints := bpoints * 1.2 ;
13048: LD_ADDR_VAR 0 10
13052: PUSH
13053: LD_VAR 0 10
13057: PUSH
13058: LD_REAL  1.20000000000000E+0000
13061: MUL
13062: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
13063: LD_VAR 0 6
13067: PPUSH
13068: CALL_OW 257
13072: PUSH
13073: LD_INT 5
13075: PUSH
13076: LD_INT 7
13078: PUSH
13079: LD_INT 9
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: IN
13087: PUSH
13088: LD_VAR 0 1
13092: PPUSH
13093: LD_INT 52
13095: PPUSH
13096: CALL_OW 321
13100: PUSH
13101: LD_INT 2
13103: EQUAL
13104: AND
13105: IFFALSE 13122
// bpoints := bpoints * 1.5 ;
13107: LD_ADDR_VAR 0 10
13111: PUSH
13112: LD_VAR 0 10
13116: PUSH
13117: LD_REAL  1.50000000000000E+0000
13120: MUL
13121: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
13122: LD_VAR 0 1
13126: PPUSH
13127: LD_INT 66
13129: PPUSH
13130: CALL_OW 321
13134: PUSH
13135: LD_INT 2
13137: EQUAL
13138: IFFALSE 13155
// bpoints := bpoints * 1.1 ;
13140: LD_ADDR_VAR 0 10
13144: PUSH
13145: LD_VAR 0 10
13149: PUSH
13150: LD_REAL  1.10000000000000E+0000
13153: MUL
13154: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13155: LD_ADDR_VAR 0 10
13159: PUSH
13160: LD_VAR 0 10
13164: PUSH
13165: LD_VAR 0 6
13169: PPUSH
13170: LD_INT 1
13172: PPUSH
13173: CALL_OW 259
13177: PUSH
13178: LD_REAL  1.15000000000000E+0000
13181: MUL
13182: MUL
13183: ST_TO_ADDR
// end ; unit_vehicle :
13184: GO 14014
13186: LD_INT 2
13188: DOUBLE
13189: EQUAL
13190: IFTRUE 13194
13192: GO 14002
13194: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13195: LD_VAR 0 6
13199: PPUSH
13200: CALL_OW 264
13204: PUSH
13205: LD_INT 2
13207: PUSH
13208: LD_INT 42
13210: PUSH
13211: LD_INT 24
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: IN
13219: IFFALSE 13240
// points := [ 25 , 5 , 3 ] ;
13221: LD_ADDR_VAR 0 9
13225: PUSH
13226: LD_INT 25
13228: PUSH
13229: LD_INT 5
13231: PUSH
13232: LD_INT 3
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13240: LD_VAR 0 6
13244: PPUSH
13245: CALL_OW 264
13249: PUSH
13250: LD_INT 4
13252: PUSH
13253: LD_INT 43
13255: PUSH
13256: LD_INT 25
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: LIST
13263: IN
13264: IFFALSE 13285
// points := [ 40 , 15 , 5 ] ;
13266: LD_ADDR_VAR 0 9
13270: PUSH
13271: LD_INT 40
13273: PUSH
13274: LD_INT 15
13276: PUSH
13277: LD_INT 5
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13285: LD_VAR 0 6
13289: PPUSH
13290: CALL_OW 264
13294: PUSH
13295: LD_INT 3
13297: PUSH
13298: LD_INT 23
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: IN
13305: IFFALSE 13326
// points := [ 7 , 25 , 8 ] ;
13307: LD_ADDR_VAR 0 9
13311: PUSH
13312: LD_INT 7
13314: PUSH
13315: LD_INT 25
13317: PUSH
13318: LD_INT 8
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13326: LD_VAR 0 6
13330: PPUSH
13331: CALL_OW 264
13335: PUSH
13336: LD_INT 5
13338: PUSH
13339: LD_INT 27
13341: PUSH
13342: LD_INT 44
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: LIST
13349: IN
13350: IFFALSE 13371
// points := [ 14 , 50 , 16 ] ;
13352: LD_ADDR_VAR 0 9
13356: PUSH
13357: LD_INT 14
13359: PUSH
13360: LD_INT 50
13362: PUSH
13363: LD_INT 16
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13371: LD_VAR 0 6
13375: PPUSH
13376: CALL_OW 264
13380: PUSH
13381: LD_INT 6
13383: PUSH
13384: LD_INT 46
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: IN
13391: IFFALSE 13412
// points := [ 32 , 120 , 70 ] ;
13393: LD_ADDR_VAR 0 9
13397: PUSH
13398: LD_INT 32
13400: PUSH
13401: LD_INT 120
13403: PUSH
13404: LD_INT 70
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13412: LD_VAR 0 6
13416: PPUSH
13417: CALL_OW 264
13421: PUSH
13422: LD_INT 7
13424: PUSH
13425: LD_INT 28
13427: PUSH
13428: LD_INT 45
13430: PUSH
13431: LD_EXP 43
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: IN
13442: IFFALSE 13463
// points := [ 35 , 20 , 45 ] ;
13444: LD_ADDR_VAR 0 9
13448: PUSH
13449: LD_INT 35
13451: PUSH
13452: LD_INT 20
13454: PUSH
13455: LD_INT 45
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13463: LD_VAR 0 6
13467: PPUSH
13468: CALL_OW 264
13472: PUSH
13473: LD_INT 47
13475: PUSH
13476: EMPTY
13477: LIST
13478: IN
13479: IFFALSE 13500
// points := [ 67 , 45 , 75 ] ;
13481: LD_ADDR_VAR 0 9
13485: PUSH
13486: LD_INT 67
13488: PUSH
13489: LD_INT 45
13491: PUSH
13492: LD_INT 75
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13500: LD_VAR 0 6
13504: PPUSH
13505: CALL_OW 264
13509: PUSH
13510: LD_INT 26
13512: PUSH
13513: EMPTY
13514: LIST
13515: IN
13516: IFFALSE 13537
// points := [ 120 , 30 , 80 ] ;
13518: LD_ADDR_VAR 0 9
13522: PUSH
13523: LD_INT 120
13525: PUSH
13526: LD_INT 30
13528: PUSH
13529: LD_INT 80
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13537: LD_VAR 0 6
13541: PPUSH
13542: CALL_OW 264
13546: PUSH
13547: LD_INT 22
13549: PUSH
13550: EMPTY
13551: LIST
13552: IN
13553: IFFALSE 13574
// points := [ 40 , 1 , 1 ] ;
13555: LD_ADDR_VAR 0 9
13559: PUSH
13560: LD_INT 40
13562: PUSH
13563: LD_INT 1
13565: PUSH
13566: LD_INT 1
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13574: LD_VAR 0 6
13578: PPUSH
13579: CALL_OW 264
13583: PUSH
13584: LD_INT 29
13586: PUSH
13587: EMPTY
13588: LIST
13589: IN
13590: IFFALSE 13611
// points := [ 70 , 200 , 400 ] ;
13592: LD_ADDR_VAR 0 9
13596: PUSH
13597: LD_INT 70
13599: PUSH
13600: LD_INT 200
13602: PUSH
13603: LD_INT 400
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
13611: LD_VAR 0 6
13615: PPUSH
13616: CALL_OW 264
13620: PUSH
13621: LD_INT 14
13623: PUSH
13624: LD_INT 53
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: IN
13631: IFFALSE 13652
// points := [ 40 , 10 , 20 ] ;
13633: LD_ADDR_VAR 0 9
13637: PUSH
13638: LD_INT 40
13640: PUSH
13641: LD_INT 10
13643: PUSH
13644: LD_INT 20
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
13652: LD_VAR 0 6
13656: PPUSH
13657: CALL_OW 264
13661: PUSH
13662: LD_INT 9
13664: PUSH
13665: EMPTY
13666: LIST
13667: IN
13668: IFFALSE 13689
// points := [ 5 , 70 , 20 ] ;
13670: LD_ADDR_VAR 0 9
13674: PUSH
13675: LD_INT 5
13677: PUSH
13678: LD_INT 70
13680: PUSH
13681: LD_INT 20
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
13689: LD_VAR 0 6
13693: PPUSH
13694: CALL_OW 264
13698: PUSH
13699: LD_INT 10
13701: PUSH
13702: EMPTY
13703: LIST
13704: IN
13705: IFFALSE 13726
// points := [ 35 , 110 , 70 ] ;
13707: LD_ADDR_VAR 0 9
13711: PUSH
13712: LD_INT 35
13714: PUSH
13715: LD_INT 110
13717: PUSH
13718: LD_INT 70
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: LIST
13725: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
13726: LD_VAR 0 6
13730: PPUSH
13731: CALL_OW 265
13735: PUSH
13736: LD_INT 25
13738: EQUAL
13739: IFFALSE 13760
// points := [ 80 , 65 , 100 ] ;
13741: LD_ADDR_VAR 0 9
13745: PUSH
13746: LD_INT 80
13748: PUSH
13749: LD_INT 65
13751: PUSH
13752: LD_INT 100
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: LIST
13759: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
13760: LD_VAR 0 6
13764: PPUSH
13765: CALL_OW 263
13769: PUSH
13770: LD_INT 1
13772: EQUAL
13773: IFFALSE 13808
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
13775: LD_ADDR_VAR 0 10
13779: PUSH
13780: LD_VAR 0 10
13784: PUSH
13785: LD_VAR 0 6
13789: PPUSH
13790: CALL_OW 311
13794: PPUSH
13795: LD_INT 3
13797: PPUSH
13798: CALL_OW 259
13802: PUSH
13803: LD_INT 4
13805: MUL
13806: MUL
13807: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
13808: LD_VAR 0 6
13812: PPUSH
13813: CALL_OW 263
13817: PUSH
13818: LD_INT 2
13820: EQUAL
13821: IFFALSE 13872
// begin j := IsControledBy ( i ) ;
13823: LD_ADDR_VAR 0 7
13827: PUSH
13828: LD_VAR 0 6
13832: PPUSH
13833: CALL_OW 312
13837: ST_TO_ADDR
// if j then
13838: LD_VAR 0 7
13842: IFFALSE 13872
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
13844: LD_ADDR_VAR 0 10
13848: PUSH
13849: LD_VAR 0 10
13853: PUSH
13854: LD_VAR 0 7
13858: PPUSH
13859: LD_INT 3
13861: PPUSH
13862: CALL_OW 259
13866: PUSH
13867: LD_INT 3
13869: MUL
13870: MUL
13871: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
13872: LD_VAR 0 6
13876: PPUSH
13877: CALL_OW 264
13881: PUSH
13882: LD_INT 5
13884: PUSH
13885: LD_INT 6
13887: PUSH
13888: LD_INT 46
13890: PUSH
13891: LD_INT 44
13893: PUSH
13894: LD_INT 47
13896: PUSH
13897: LD_INT 45
13899: PUSH
13900: LD_INT 28
13902: PUSH
13903: LD_INT 7
13905: PUSH
13906: LD_INT 27
13908: PUSH
13909: LD_INT 29
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: IN
13924: PUSH
13925: LD_VAR 0 1
13929: PPUSH
13930: LD_INT 52
13932: PPUSH
13933: CALL_OW 321
13937: PUSH
13938: LD_INT 2
13940: EQUAL
13941: AND
13942: IFFALSE 13959
// bpoints := bpoints * 1.2 ;
13944: LD_ADDR_VAR 0 10
13948: PUSH
13949: LD_VAR 0 10
13953: PUSH
13954: LD_REAL  1.20000000000000E+0000
13957: MUL
13958: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
13959: LD_VAR 0 6
13963: PPUSH
13964: CALL_OW 264
13968: PUSH
13969: LD_INT 6
13971: PUSH
13972: LD_INT 46
13974: PUSH
13975: LD_INT 47
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: IN
13983: IFFALSE 14000
// bpoints := bpoints * 1.2 ;
13985: LD_ADDR_VAR 0 10
13989: PUSH
13990: LD_VAR 0 10
13994: PUSH
13995: LD_REAL  1.20000000000000E+0000
13998: MUL
13999: ST_TO_ADDR
// end ; unit_building :
14000: GO 14014
14002: LD_INT 3
14004: DOUBLE
14005: EQUAL
14006: IFTRUE 14010
14008: GO 14013
14010: POP
// ; end ;
14011: GO 14014
14013: POP
// for j = 1 to 3 do
14014: LD_ADDR_VAR 0 7
14018: PUSH
14019: DOUBLE
14020: LD_INT 1
14022: DEC
14023: ST_TO_ADDR
14024: LD_INT 3
14026: PUSH
14027: FOR_TO
14028: IFFALSE 14081
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
14030: LD_ADDR_VAR 0 5
14034: PUSH
14035: LD_VAR 0 5
14039: PPUSH
14040: LD_VAR 0 7
14044: PPUSH
14045: LD_VAR 0 5
14049: PUSH
14050: LD_VAR 0 7
14054: ARRAY
14055: PUSH
14056: LD_VAR 0 9
14060: PUSH
14061: LD_VAR 0 7
14065: ARRAY
14066: PUSH
14067: LD_VAR 0 10
14071: MUL
14072: PLUS
14073: PPUSH
14074: CALL_OW 1
14078: ST_TO_ADDR
14079: GO 14027
14081: POP
14082: POP
// end ;
14083: GO 12560
14085: POP
14086: POP
// result := Replace ( result , 4 , tmp ) ;
14087: LD_ADDR_VAR 0 5
14091: PUSH
14092: LD_VAR 0 5
14096: PPUSH
14097: LD_INT 4
14099: PPUSH
14100: LD_VAR 0 8
14104: PPUSH
14105: CALL_OW 1
14109: ST_TO_ADDR
// end ;
14110: LD_VAR 0 5
14114: RET
// export function DangerAtRange ( unit , range ) ; begin
14115: LD_INT 0
14117: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
14118: LD_ADDR_VAR 0 3
14122: PUSH
14123: LD_VAR 0 1
14127: PPUSH
14128: CALL_OW 255
14132: PPUSH
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 250
14142: PPUSH
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 251
14152: PPUSH
14153: LD_VAR 0 2
14157: PPUSH
14158: CALL 12412 0 4
14162: ST_TO_ADDR
// end ;
14163: LD_VAR 0 3
14167: RET
// export function DangerInArea ( side , area ) ; begin
14168: LD_INT 0
14170: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14171: LD_ADDR_VAR 0 3
14175: PUSH
14176: LD_VAR 0 2
14180: PPUSH
14181: LD_INT 81
14183: PUSH
14184: LD_VAR 0 1
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PPUSH
14193: CALL_OW 70
14197: ST_TO_ADDR
// end ;
14198: LD_VAR 0 3
14202: RET
// export function IsExtension ( b ) ; begin
14203: LD_INT 0
14205: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_VAR 0 1
14215: PUSH
14216: LD_INT 23
14218: PUSH
14219: LD_INT 20
14221: PUSH
14222: LD_INT 22
14224: PUSH
14225: LD_INT 17
14227: PUSH
14228: LD_INT 24
14230: PUSH
14231: LD_INT 21
14233: PUSH
14234: LD_INT 19
14236: PUSH
14237: LD_INT 16
14239: PUSH
14240: LD_INT 25
14242: PUSH
14243: LD_INT 18
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: IN
14258: ST_TO_ADDR
// end ;
14259: LD_VAR 0 2
14263: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14264: LD_INT 0
14266: PPUSH
14267: PPUSH
14268: PPUSH
// result := [ ] ;
14269: LD_ADDR_VAR 0 4
14273: PUSH
14274: EMPTY
14275: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14276: LD_ADDR_VAR 0 5
14280: PUSH
14281: LD_VAR 0 2
14285: PPUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 3
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PPUSH
14296: CALL_OW 70
14300: ST_TO_ADDR
// if not tmp then
14301: LD_VAR 0 5
14305: NOT
14306: IFFALSE 14310
// exit ;
14308: GO 14374
// if checkLink then
14310: LD_VAR 0 3
14314: IFFALSE 14364
// begin for i in tmp do
14316: LD_ADDR_VAR 0 6
14320: PUSH
14321: LD_VAR 0 5
14325: PUSH
14326: FOR_IN
14327: IFFALSE 14362
// if GetBase ( i ) <> base then
14329: LD_VAR 0 6
14333: PPUSH
14334: CALL_OW 274
14338: PUSH
14339: LD_VAR 0 1
14343: NONEQUAL
14344: IFFALSE 14360
// ComLinkToBase ( base , i ) ;
14346: LD_VAR 0 1
14350: PPUSH
14351: LD_VAR 0 6
14355: PPUSH
14356: CALL_OW 169
14360: GO 14326
14362: POP
14363: POP
// end ; result := tmp ;
14364: LD_ADDR_VAR 0 4
14368: PUSH
14369: LD_VAR 0 5
14373: ST_TO_ADDR
// end ;
14374: LD_VAR 0 4
14378: RET
// export function ComComplete ( units , b ) ; var i ; begin
14379: LD_INT 0
14381: PPUSH
14382: PPUSH
// if not units then
14383: LD_VAR 0 1
14387: NOT
14388: IFFALSE 14392
// exit ;
14390: GO 14482
// for i in units do
14392: LD_ADDR_VAR 0 4
14396: PUSH
14397: LD_VAR 0 1
14401: PUSH
14402: FOR_IN
14403: IFFALSE 14480
// if BuildingStatus ( b ) = bs_build then
14405: LD_VAR 0 2
14409: PPUSH
14410: CALL_OW 461
14414: PUSH
14415: LD_INT 1
14417: EQUAL
14418: IFFALSE 14478
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14420: LD_VAR 0 4
14424: PPUSH
14425: LD_STRING h
14427: PUSH
14428: LD_VAR 0 2
14432: PPUSH
14433: CALL_OW 250
14437: PUSH
14438: LD_VAR 0 2
14442: PPUSH
14443: CALL_OW 251
14447: PUSH
14448: LD_VAR 0 2
14452: PUSH
14453: LD_INT 0
14455: PUSH
14456: LD_INT 0
14458: PUSH
14459: LD_INT 0
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: PPUSH
14474: CALL_OW 446
14478: GO 14402
14480: POP
14481: POP
// end ;
14482: LD_VAR 0 3
14486: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14487: LD_INT 0
14489: PPUSH
14490: PPUSH
14491: PPUSH
14492: PPUSH
14493: PPUSH
14494: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14495: LD_VAR 0 1
14499: NOT
14500: PUSH
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 263
14510: PUSH
14511: LD_INT 2
14513: NONEQUAL
14514: OR
14515: IFFALSE 14519
// exit ;
14517: GO 14835
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14519: LD_ADDR_VAR 0 6
14523: PUSH
14524: LD_INT 22
14526: PUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: CALL_OW 255
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 2
14543: PUSH
14544: LD_INT 30
14546: PUSH
14547: LD_INT 36
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: LD_INT 34
14556: PUSH
14557: LD_INT 31
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PPUSH
14573: CALL_OW 69
14577: ST_TO_ADDR
// if not tmp then
14578: LD_VAR 0 6
14582: NOT
14583: IFFALSE 14587
// exit ;
14585: GO 14835
// result := [ ] ;
14587: LD_ADDR_VAR 0 2
14591: PUSH
14592: EMPTY
14593: ST_TO_ADDR
// for i in tmp do
14594: LD_ADDR_VAR 0 3
14598: PUSH
14599: LD_VAR 0 6
14603: PUSH
14604: FOR_IN
14605: IFFALSE 14676
// begin t := UnitsInside ( i ) ;
14607: LD_ADDR_VAR 0 4
14611: PUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: CALL_OW 313
14621: ST_TO_ADDR
// if t then
14622: LD_VAR 0 4
14626: IFFALSE 14674
// for j in t do
14628: LD_ADDR_VAR 0 7
14632: PUSH
14633: LD_VAR 0 4
14637: PUSH
14638: FOR_IN
14639: IFFALSE 14672
// result := Replace ( result , result + 1 , j ) ;
14641: LD_ADDR_VAR 0 2
14645: PUSH
14646: LD_VAR 0 2
14650: PPUSH
14651: LD_VAR 0 2
14655: PUSH
14656: LD_INT 1
14658: PLUS
14659: PPUSH
14660: LD_VAR 0 7
14664: PPUSH
14665: CALL_OW 1
14669: ST_TO_ADDR
14670: GO 14638
14672: POP
14673: POP
// end ;
14674: GO 14604
14676: POP
14677: POP
// if not result then
14678: LD_VAR 0 2
14682: NOT
14683: IFFALSE 14687
// exit ;
14685: GO 14835
// mech := result [ 1 ] ;
14687: LD_ADDR_VAR 0 5
14691: PUSH
14692: LD_VAR 0 2
14696: PUSH
14697: LD_INT 1
14699: ARRAY
14700: ST_TO_ADDR
// if result > 1 then
14701: LD_VAR 0 2
14705: PUSH
14706: LD_INT 1
14708: GREATER
14709: IFFALSE 14821
// begin for i = 2 to result do
14711: LD_ADDR_VAR 0 3
14715: PUSH
14716: DOUBLE
14717: LD_INT 2
14719: DEC
14720: ST_TO_ADDR
14721: LD_VAR 0 2
14725: PUSH
14726: FOR_TO
14727: IFFALSE 14819
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
14729: LD_ADDR_VAR 0 4
14733: PUSH
14734: LD_VAR 0 2
14738: PUSH
14739: LD_VAR 0 3
14743: ARRAY
14744: PPUSH
14745: LD_INT 3
14747: PPUSH
14748: CALL_OW 259
14752: PUSH
14753: LD_VAR 0 2
14757: PUSH
14758: LD_VAR 0 3
14762: ARRAY
14763: PPUSH
14764: CALL_OW 432
14768: MINUS
14769: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
14770: LD_VAR 0 4
14774: PUSH
14775: LD_VAR 0 5
14779: PPUSH
14780: LD_INT 3
14782: PPUSH
14783: CALL_OW 259
14787: PUSH
14788: LD_VAR 0 5
14792: PPUSH
14793: CALL_OW 432
14797: MINUS
14798: GREATEREQUAL
14799: IFFALSE 14817
// mech := result [ i ] ;
14801: LD_ADDR_VAR 0 5
14805: PUSH
14806: LD_VAR 0 2
14810: PUSH
14811: LD_VAR 0 3
14815: ARRAY
14816: ST_TO_ADDR
// end ;
14817: GO 14726
14819: POP
14820: POP
// end ; ComLinkTo ( vehicle , mech ) ;
14821: LD_VAR 0 1
14825: PPUSH
14826: LD_VAR 0 5
14830: PPUSH
14831: CALL_OW 135
// end ;
14835: LD_VAR 0 2
14839: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
14840: LD_INT 0
14842: PPUSH
14843: PPUSH
14844: PPUSH
14845: PPUSH
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
14850: PPUSH
14851: PPUSH
14852: PPUSH
14853: PPUSH
14854: PPUSH
// result := [ ] ;
14855: LD_ADDR_VAR 0 7
14859: PUSH
14860: EMPTY
14861: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
14862: LD_VAR 0 1
14866: PPUSH
14867: CALL_OW 266
14871: PUSH
14872: LD_INT 0
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: IN
14882: NOT
14883: IFFALSE 14887
// exit ;
14885: GO 16521
// if name then
14887: LD_VAR 0 3
14891: IFFALSE 14907
// SetBName ( base_dep , name ) ;
14893: LD_VAR 0 1
14897: PPUSH
14898: LD_VAR 0 3
14902: PPUSH
14903: CALL_OW 500
// base := GetBase ( base_dep ) ;
14907: LD_ADDR_VAR 0 15
14911: PUSH
14912: LD_VAR 0 1
14916: PPUSH
14917: CALL_OW 274
14921: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
14922: LD_ADDR_VAR 0 16
14926: PUSH
14927: LD_VAR 0 1
14931: PPUSH
14932: CALL_OW 255
14936: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
14937: LD_ADDR_VAR 0 17
14941: PUSH
14942: LD_VAR 0 1
14946: PPUSH
14947: CALL_OW 248
14951: ST_TO_ADDR
// if sources then
14952: LD_VAR 0 5
14956: IFFALSE 15003
// for i = 1 to 3 do
14958: LD_ADDR_VAR 0 8
14962: PUSH
14963: DOUBLE
14964: LD_INT 1
14966: DEC
14967: ST_TO_ADDR
14968: LD_INT 3
14970: PUSH
14971: FOR_TO
14972: IFFALSE 15001
// AddResourceType ( base , i , sources [ i ] ) ;
14974: LD_VAR 0 15
14978: PPUSH
14979: LD_VAR 0 8
14983: PPUSH
14984: LD_VAR 0 5
14988: PUSH
14989: LD_VAR 0 8
14993: ARRAY
14994: PPUSH
14995: CALL_OW 276
14999: GO 14971
15001: POP
15002: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
15003: LD_ADDR_VAR 0 18
15007: PUSH
15008: LD_VAR 0 15
15012: PPUSH
15013: LD_VAR 0 2
15017: PPUSH
15018: LD_INT 1
15020: PPUSH
15021: CALL 14264 0 3
15025: ST_TO_ADDR
// InitHc ;
15026: CALL_OW 19
// InitUc ;
15030: CALL_OW 18
// uc_side := side ;
15034: LD_ADDR_OWVAR 20
15038: PUSH
15039: LD_VAR 0 16
15043: ST_TO_ADDR
// uc_nation := nation ;
15044: LD_ADDR_OWVAR 21
15048: PUSH
15049: LD_VAR 0 17
15053: ST_TO_ADDR
// if buildings then
15054: LD_VAR 0 18
15058: IFFALSE 16380
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
15060: LD_ADDR_VAR 0 19
15064: PUSH
15065: LD_VAR 0 18
15069: PPUSH
15070: LD_INT 2
15072: PUSH
15073: LD_INT 30
15075: PUSH
15076: LD_INT 29
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 30
15085: PUSH
15086: LD_INT 30
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: LIST
15097: PPUSH
15098: CALL_OW 72
15102: ST_TO_ADDR
// if tmp then
15103: LD_VAR 0 19
15107: IFFALSE 15155
// for i in tmp do
15109: LD_ADDR_VAR 0 8
15113: PUSH
15114: LD_VAR 0 19
15118: PUSH
15119: FOR_IN
15120: IFFALSE 15153
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
15122: LD_VAR 0 8
15126: PPUSH
15127: CALL_OW 250
15131: PPUSH
15132: LD_VAR 0 8
15136: PPUSH
15137: CALL_OW 251
15141: PPUSH
15142: LD_VAR 0 16
15146: PPUSH
15147: CALL_OW 441
15151: GO 15119
15153: POP
15154: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15155: LD_VAR 0 18
15159: PPUSH
15160: LD_INT 2
15162: PUSH
15163: LD_INT 30
15165: PUSH
15166: LD_INT 32
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 30
15175: PUSH
15176: LD_INT 33
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 72
15192: IFFALSE 15280
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15194: LD_ADDR_VAR 0 8
15198: PUSH
15199: LD_VAR 0 18
15203: PPUSH
15204: LD_INT 2
15206: PUSH
15207: LD_INT 30
15209: PUSH
15210: LD_INT 32
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 30
15219: PUSH
15220: LD_INT 33
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: LIST
15231: PPUSH
15232: CALL_OW 72
15236: PUSH
15237: FOR_IN
15238: IFFALSE 15278
// begin if not GetBWeapon ( i ) then
15240: LD_VAR 0 8
15244: PPUSH
15245: CALL_OW 269
15249: NOT
15250: IFFALSE 15276
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15252: LD_VAR 0 8
15256: PPUSH
15257: LD_VAR 0 8
15261: PPUSH
15262: LD_VAR 0 2
15266: PPUSH
15267: CALL 16526 0 2
15271: PPUSH
15272: CALL_OW 431
// end ;
15276: GO 15237
15278: POP
15279: POP
// end ; for i = 1 to personel do
15280: LD_ADDR_VAR 0 8
15284: PUSH
15285: DOUBLE
15286: LD_INT 1
15288: DEC
15289: ST_TO_ADDR
15290: LD_VAR 0 6
15294: PUSH
15295: FOR_TO
15296: IFFALSE 16360
// begin if i > 4 then
15298: LD_VAR 0 8
15302: PUSH
15303: LD_INT 4
15305: GREATER
15306: IFFALSE 15310
// break ;
15308: GO 16360
// case i of 1 :
15310: LD_VAR 0 8
15314: PUSH
15315: LD_INT 1
15317: DOUBLE
15318: EQUAL
15319: IFTRUE 15323
15321: GO 15403
15323: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15324: LD_ADDR_VAR 0 12
15328: PUSH
15329: LD_VAR 0 18
15333: PPUSH
15334: LD_INT 22
15336: PUSH
15337: LD_VAR 0 16
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 58
15348: PUSH
15349: EMPTY
15350: LIST
15351: PUSH
15352: LD_INT 2
15354: PUSH
15355: LD_INT 30
15357: PUSH
15358: LD_INT 32
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 30
15367: PUSH
15368: LD_INT 4
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 30
15377: PUSH
15378: LD_INT 5
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: LIST
15395: PPUSH
15396: CALL_OW 72
15400: ST_TO_ADDR
15401: GO 15625
15403: LD_INT 2
15405: DOUBLE
15406: EQUAL
15407: IFTRUE 15411
15409: GO 15473
15411: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15412: LD_ADDR_VAR 0 12
15416: PUSH
15417: LD_VAR 0 18
15421: PPUSH
15422: LD_INT 22
15424: PUSH
15425: LD_VAR 0 16
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 2
15436: PUSH
15437: LD_INT 30
15439: PUSH
15440: LD_INT 0
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 30
15449: PUSH
15450: LD_INT 1
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 72
15470: ST_TO_ADDR
15471: GO 15625
15473: LD_INT 3
15475: DOUBLE
15476: EQUAL
15477: IFTRUE 15481
15479: GO 15543
15481: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15482: LD_ADDR_VAR 0 12
15486: PUSH
15487: LD_VAR 0 18
15491: PPUSH
15492: LD_INT 22
15494: PUSH
15495: LD_VAR 0 16
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 2
15506: PUSH
15507: LD_INT 30
15509: PUSH
15510: LD_INT 2
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 30
15519: PUSH
15520: LD_INT 3
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PPUSH
15536: CALL_OW 72
15540: ST_TO_ADDR
15541: GO 15625
15543: LD_INT 4
15545: DOUBLE
15546: EQUAL
15547: IFTRUE 15551
15549: GO 15624
15551: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15552: LD_ADDR_VAR 0 12
15556: PUSH
15557: LD_VAR 0 18
15561: PPUSH
15562: LD_INT 22
15564: PUSH
15565: LD_VAR 0 16
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 2
15576: PUSH
15577: LD_INT 30
15579: PUSH
15580: LD_INT 6
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 30
15589: PUSH
15590: LD_INT 7
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 30
15599: PUSH
15600: LD_INT 8
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PPUSH
15617: CALL_OW 72
15621: ST_TO_ADDR
15622: GO 15625
15624: POP
// if i = 1 then
15625: LD_VAR 0 8
15629: PUSH
15630: LD_INT 1
15632: EQUAL
15633: IFFALSE 15744
// begin tmp := [ ] ;
15635: LD_ADDR_VAR 0 19
15639: PUSH
15640: EMPTY
15641: ST_TO_ADDR
// for j in f do
15642: LD_ADDR_VAR 0 9
15646: PUSH
15647: LD_VAR 0 12
15651: PUSH
15652: FOR_IN
15653: IFFALSE 15726
// if GetBType ( j ) = b_bunker then
15655: LD_VAR 0 9
15659: PPUSH
15660: CALL_OW 266
15664: PUSH
15665: LD_INT 32
15667: EQUAL
15668: IFFALSE 15695
// tmp := Insert ( tmp , 1 , j ) else
15670: LD_ADDR_VAR 0 19
15674: PUSH
15675: LD_VAR 0 19
15679: PPUSH
15680: LD_INT 1
15682: PPUSH
15683: LD_VAR 0 9
15687: PPUSH
15688: CALL_OW 2
15692: ST_TO_ADDR
15693: GO 15724
// tmp := Insert ( tmp , tmp + 1 , j ) ;
15695: LD_ADDR_VAR 0 19
15699: PUSH
15700: LD_VAR 0 19
15704: PPUSH
15705: LD_VAR 0 19
15709: PUSH
15710: LD_INT 1
15712: PLUS
15713: PPUSH
15714: LD_VAR 0 9
15718: PPUSH
15719: CALL_OW 2
15723: ST_TO_ADDR
15724: GO 15652
15726: POP
15727: POP
// if tmp then
15728: LD_VAR 0 19
15732: IFFALSE 15744
// f := tmp ;
15734: LD_ADDR_VAR 0 12
15738: PUSH
15739: LD_VAR 0 19
15743: ST_TO_ADDR
// end ; x := personel [ i ] ;
15744: LD_ADDR_VAR 0 13
15748: PUSH
15749: LD_VAR 0 6
15753: PUSH
15754: LD_VAR 0 8
15758: ARRAY
15759: ST_TO_ADDR
// if x = - 1 then
15760: LD_VAR 0 13
15764: PUSH
15765: LD_INT 1
15767: NEG
15768: EQUAL
15769: IFFALSE 15978
// begin for j in f do
15771: LD_ADDR_VAR 0 9
15775: PUSH
15776: LD_VAR 0 12
15780: PUSH
15781: FOR_IN
15782: IFFALSE 15974
// repeat InitHc ;
15784: CALL_OW 19
// if GetBType ( j ) = b_barracks then
15788: LD_VAR 0 9
15792: PPUSH
15793: CALL_OW 266
15797: PUSH
15798: LD_INT 5
15800: EQUAL
15801: IFFALSE 15871
// begin if UnitsInside ( j ) < 3 then
15803: LD_VAR 0 9
15807: PPUSH
15808: CALL_OW 313
15812: PUSH
15813: LD_INT 3
15815: LESS
15816: IFFALSE 15852
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15818: LD_INT 0
15820: PPUSH
15821: LD_INT 5
15823: PUSH
15824: LD_INT 8
15826: PUSH
15827: LD_INT 9
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: PUSH
15835: LD_VAR 0 17
15839: ARRAY
15840: PPUSH
15841: LD_VAR 0 4
15845: PPUSH
15846: CALL_OW 380
15850: GO 15869
// PrepareHuman ( false , i , skill ) ;
15852: LD_INT 0
15854: PPUSH
15855: LD_VAR 0 8
15859: PPUSH
15860: LD_VAR 0 4
15864: PPUSH
15865: CALL_OW 380
// end else
15869: GO 15888
// PrepareHuman ( false , i , skill ) ;
15871: LD_INT 0
15873: PPUSH
15874: LD_VAR 0 8
15878: PPUSH
15879: LD_VAR 0 4
15883: PPUSH
15884: CALL_OW 380
// un := CreateHuman ;
15888: LD_ADDR_VAR 0 14
15892: PUSH
15893: CALL_OW 44
15897: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15898: LD_ADDR_VAR 0 7
15902: PUSH
15903: LD_VAR 0 7
15907: PPUSH
15908: LD_INT 1
15910: PPUSH
15911: LD_VAR 0 14
15915: PPUSH
15916: CALL_OW 2
15920: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
15921: LD_VAR 0 14
15925: PPUSH
15926: LD_VAR 0 9
15930: PPUSH
15931: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
15935: LD_VAR 0 9
15939: PPUSH
15940: CALL_OW 313
15944: PUSH
15945: LD_INT 6
15947: EQUAL
15948: PUSH
15949: LD_VAR 0 9
15953: PPUSH
15954: CALL_OW 266
15958: PUSH
15959: LD_INT 32
15961: PUSH
15962: LD_INT 31
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: IN
15969: OR
15970: IFFALSE 15784
15972: GO 15781
15974: POP
15975: POP
// end else
15976: GO 16358
// for j = 1 to x do
15978: LD_ADDR_VAR 0 9
15982: PUSH
15983: DOUBLE
15984: LD_INT 1
15986: DEC
15987: ST_TO_ADDR
15988: LD_VAR 0 13
15992: PUSH
15993: FOR_TO
15994: IFFALSE 16356
// begin InitHc ;
15996: CALL_OW 19
// if not f then
16000: LD_VAR 0 12
16004: NOT
16005: IFFALSE 16094
// begin PrepareHuman ( false , i , skill ) ;
16007: LD_INT 0
16009: PPUSH
16010: LD_VAR 0 8
16014: PPUSH
16015: LD_VAR 0 4
16019: PPUSH
16020: CALL_OW 380
// un := CreateHuman ;
16024: LD_ADDR_VAR 0 14
16028: PUSH
16029: CALL_OW 44
16033: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16034: LD_ADDR_VAR 0 7
16038: PUSH
16039: LD_VAR 0 7
16043: PPUSH
16044: LD_INT 1
16046: PPUSH
16047: LD_VAR 0 14
16051: PPUSH
16052: CALL_OW 2
16056: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16057: LD_VAR 0 14
16061: PPUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL_OW 250
16071: PPUSH
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 251
16081: PPUSH
16082: LD_INT 10
16084: PPUSH
16085: LD_INT 0
16087: PPUSH
16088: CALL_OW 50
// continue ;
16092: GO 15993
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
16094: LD_VAR 0 12
16098: PUSH
16099: LD_INT 1
16101: ARRAY
16102: PPUSH
16103: CALL_OW 313
16107: PUSH
16108: LD_VAR 0 12
16112: PUSH
16113: LD_INT 1
16115: ARRAY
16116: PPUSH
16117: CALL_OW 266
16121: PUSH
16122: LD_INT 32
16124: PUSH
16125: LD_INT 31
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: IN
16132: AND
16133: PUSH
16134: LD_VAR 0 12
16138: PUSH
16139: LD_INT 1
16141: ARRAY
16142: PPUSH
16143: CALL_OW 313
16147: PUSH
16148: LD_INT 6
16150: EQUAL
16151: OR
16152: IFFALSE 16172
// f := Delete ( f , 1 ) ;
16154: LD_ADDR_VAR 0 12
16158: PUSH
16159: LD_VAR 0 12
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: CALL_OW 3
16171: ST_TO_ADDR
// if not f then
16172: LD_VAR 0 12
16176: NOT
16177: IFFALSE 16195
// begin x := x + 2 ;
16179: LD_ADDR_VAR 0 13
16183: PUSH
16184: LD_VAR 0 13
16188: PUSH
16189: LD_INT 2
16191: PLUS
16192: ST_TO_ADDR
// continue ;
16193: GO 15993
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16195: LD_VAR 0 12
16199: PUSH
16200: LD_INT 1
16202: ARRAY
16203: PPUSH
16204: CALL_OW 266
16208: PUSH
16209: LD_INT 5
16211: EQUAL
16212: IFFALSE 16286
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16214: LD_VAR 0 12
16218: PUSH
16219: LD_INT 1
16221: ARRAY
16222: PPUSH
16223: CALL_OW 313
16227: PUSH
16228: LD_INT 3
16230: LESS
16231: IFFALSE 16267
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16233: LD_INT 0
16235: PPUSH
16236: LD_INT 5
16238: PUSH
16239: LD_INT 8
16241: PUSH
16242: LD_INT 9
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: LIST
16249: PUSH
16250: LD_VAR 0 17
16254: ARRAY
16255: PPUSH
16256: LD_VAR 0 4
16260: PPUSH
16261: CALL_OW 380
16265: GO 16284
// PrepareHuman ( false , i , skill ) ;
16267: LD_INT 0
16269: PPUSH
16270: LD_VAR 0 8
16274: PPUSH
16275: LD_VAR 0 4
16279: PPUSH
16280: CALL_OW 380
// end else
16284: GO 16303
// PrepareHuman ( false , i , skill ) ;
16286: LD_INT 0
16288: PPUSH
16289: LD_VAR 0 8
16293: PPUSH
16294: LD_VAR 0 4
16298: PPUSH
16299: CALL_OW 380
// un := CreateHuman ;
16303: LD_ADDR_VAR 0 14
16307: PUSH
16308: CALL_OW 44
16312: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16313: LD_ADDR_VAR 0 7
16317: PUSH
16318: LD_VAR 0 7
16322: PPUSH
16323: LD_INT 1
16325: PPUSH
16326: LD_VAR 0 14
16330: PPUSH
16331: CALL_OW 2
16335: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16336: LD_VAR 0 14
16340: PPUSH
16341: LD_VAR 0 12
16345: PUSH
16346: LD_INT 1
16348: ARRAY
16349: PPUSH
16350: CALL_OW 52
// end ;
16354: GO 15993
16356: POP
16357: POP
// end ;
16358: GO 15295
16360: POP
16361: POP
// result := result ^ buildings ;
16362: LD_ADDR_VAR 0 7
16366: PUSH
16367: LD_VAR 0 7
16371: PUSH
16372: LD_VAR 0 18
16376: ADD
16377: ST_TO_ADDR
// end else
16378: GO 16521
// begin for i = 1 to personel do
16380: LD_ADDR_VAR 0 8
16384: PUSH
16385: DOUBLE
16386: LD_INT 1
16388: DEC
16389: ST_TO_ADDR
16390: LD_VAR 0 6
16394: PUSH
16395: FOR_TO
16396: IFFALSE 16519
// begin if i > 4 then
16398: LD_VAR 0 8
16402: PUSH
16403: LD_INT 4
16405: GREATER
16406: IFFALSE 16410
// break ;
16408: GO 16519
// x := personel [ i ] ;
16410: LD_ADDR_VAR 0 13
16414: PUSH
16415: LD_VAR 0 6
16419: PUSH
16420: LD_VAR 0 8
16424: ARRAY
16425: ST_TO_ADDR
// if x = - 1 then
16426: LD_VAR 0 13
16430: PUSH
16431: LD_INT 1
16433: NEG
16434: EQUAL
16435: IFFALSE 16439
// continue ;
16437: GO 16395
// PrepareHuman ( false , i , skill ) ;
16439: LD_INT 0
16441: PPUSH
16442: LD_VAR 0 8
16446: PPUSH
16447: LD_VAR 0 4
16451: PPUSH
16452: CALL_OW 380
// un := CreateHuman ;
16456: LD_ADDR_VAR 0 14
16460: PUSH
16461: CALL_OW 44
16465: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16466: LD_VAR 0 14
16470: PPUSH
16471: LD_VAR 0 1
16475: PPUSH
16476: CALL_OW 250
16480: PPUSH
16481: LD_VAR 0 1
16485: PPUSH
16486: CALL_OW 251
16490: PPUSH
16491: LD_INT 10
16493: PPUSH
16494: LD_INT 0
16496: PPUSH
16497: CALL_OW 50
// result := result ^ un ;
16501: LD_ADDR_VAR 0 7
16505: PUSH
16506: LD_VAR 0 7
16510: PUSH
16511: LD_VAR 0 14
16515: ADD
16516: ST_TO_ADDR
// end ;
16517: GO 16395
16519: POP
16520: POP
// end ; end ;
16521: LD_VAR 0 7
16525: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16526: LD_INT 0
16528: PPUSH
16529: PPUSH
16530: PPUSH
16531: PPUSH
16532: PPUSH
16533: PPUSH
16534: PPUSH
16535: PPUSH
16536: PPUSH
16537: PPUSH
16538: PPUSH
16539: PPUSH
16540: PPUSH
16541: PPUSH
16542: PPUSH
16543: PPUSH
// result := false ;
16544: LD_ADDR_VAR 0 3
16548: PUSH
16549: LD_INT 0
16551: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16552: LD_VAR 0 1
16556: NOT
16557: PUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL_OW 266
16567: PUSH
16568: LD_INT 32
16570: PUSH
16571: LD_INT 33
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: IN
16578: NOT
16579: OR
16580: IFFALSE 16584
// exit ;
16582: GO 17693
// nat := GetNation ( tower ) ;
16584: LD_ADDR_VAR 0 12
16588: PUSH
16589: LD_VAR 0 1
16593: PPUSH
16594: CALL_OW 248
16598: ST_TO_ADDR
// side := GetSide ( tower ) ;
16599: LD_ADDR_VAR 0 16
16603: PUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 255
16613: ST_TO_ADDR
// x := GetX ( tower ) ;
16614: LD_ADDR_VAR 0 10
16618: PUSH
16619: LD_VAR 0 1
16623: PPUSH
16624: CALL_OW 250
16628: ST_TO_ADDR
// y := GetY ( tower ) ;
16629: LD_ADDR_VAR 0 11
16633: PUSH
16634: LD_VAR 0 1
16638: PPUSH
16639: CALL_OW 251
16643: ST_TO_ADDR
// if not x or not y then
16644: LD_VAR 0 10
16648: NOT
16649: PUSH
16650: LD_VAR 0 11
16654: NOT
16655: OR
16656: IFFALSE 16660
// exit ;
16658: GO 17693
// weapon := 0 ;
16660: LD_ADDR_VAR 0 18
16664: PUSH
16665: LD_INT 0
16667: ST_TO_ADDR
// fac_list := [ ] ;
16668: LD_ADDR_VAR 0 17
16672: PUSH
16673: EMPTY
16674: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
16675: LD_ADDR_VAR 0 6
16679: PUSH
16680: LD_VAR 0 1
16684: PPUSH
16685: CALL_OW 274
16689: PPUSH
16690: LD_VAR 0 2
16694: PPUSH
16695: LD_INT 0
16697: PPUSH
16698: CALL 14264 0 3
16702: PPUSH
16703: LD_INT 30
16705: PUSH
16706: LD_INT 3
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PPUSH
16713: CALL_OW 72
16717: ST_TO_ADDR
// if not factories then
16718: LD_VAR 0 6
16722: NOT
16723: IFFALSE 16727
// exit ;
16725: GO 17693
// for i in factories do
16727: LD_ADDR_VAR 0 8
16731: PUSH
16732: LD_VAR 0 6
16736: PUSH
16737: FOR_IN
16738: IFFALSE 16763
// fac_list := fac_list union AvailableWeaponList ( i ) ;
16740: LD_ADDR_VAR 0 17
16744: PUSH
16745: LD_VAR 0 17
16749: PUSH
16750: LD_VAR 0 8
16754: PPUSH
16755: CALL_OW 478
16759: UNION
16760: ST_TO_ADDR
16761: GO 16737
16763: POP
16764: POP
// if not fac_list then
16765: LD_VAR 0 17
16769: NOT
16770: IFFALSE 16774
// exit ;
16772: GO 17693
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
16774: LD_ADDR_VAR 0 5
16778: PUSH
16779: LD_INT 4
16781: PUSH
16782: LD_INT 5
16784: PUSH
16785: LD_INT 9
16787: PUSH
16788: LD_INT 10
16790: PUSH
16791: LD_INT 6
16793: PUSH
16794: LD_INT 7
16796: PUSH
16797: LD_INT 11
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 27
16811: PUSH
16812: LD_INT 28
16814: PUSH
16815: LD_INT 26
16817: PUSH
16818: LD_INT 30
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 43
16829: PUSH
16830: LD_INT 44
16832: PUSH
16833: LD_INT 46
16835: PUSH
16836: LD_INT 45
16838: PUSH
16839: LD_INT 47
16841: PUSH
16842: LD_INT 49
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: PUSH
16858: LD_VAR 0 12
16862: ARRAY
16863: ST_TO_ADDR
// list := list isect fac_list ;
16864: LD_ADDR_VAR 0 5
16868: PUSH
16869: LD_VAR 0 5
16873: PUSH
16874: LD_VAR 0 17
16878: ISECT
16879: ST_TO_ADDR
// if not list then
16880: LD_VAR 0 5
16884: NOT
16885: IFFALSE 16889
// exit ;
16887: GO 17693
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
16889: LD_VAR 0 12
16893: PUSH
16894: LD_INT 3
16896: EQUAL
16897: PUSH
16898: LD_INT 49
16900: PUSH
16901: LD_VAR 0 5
16905: IN
16906: AND
16907: PUSH
16908: LD_INT 31
16910: PPUSH
16911: LD_VAR 0 16
16915: PPUSH
16916: CALL_OW 321
16920: PUSH
16921: LD_INT 2
16923: EQUAL
16924: AND
16925: IFFALSE 16985
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
16927: LD_INT 22
16929: PUSH
16930: LD_VAR 0 16
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 35
16941: PUSH
16942: LD_INT 49
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 91
16951: PUSH
16952: LD_VAR 0 1
16956: PUSH
16957: LD_INT 10
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: LIST
16969: PPUSH
16970: CALL_OW 69
16974: NOT
16975: IFFALSE 16985
// weapon := ru_time_lapser ;
16977: LD_ADDR_VAR 0 18
16981: PUSH
16982: LD_INT 49
16984: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
16985: LD_VAR 0 12
16989: PUSH
16990: LD_INT 1
16992: PUSH
16993: LD_INT 2
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: IN
17000: PUSH
17001: LD_INT 11
17003: PUSH
17004: LD_VAR 0 5
17008: IN
17009: PUSH
17010: LD_INT 30
17012: PUSH
17013: LD_VAR 0 5
17017: IN
17018: OR
17019: AND
17020: PUSH
17021: LD_INT 6
17023: PPUSH
17024: LD_VAR 0 16
17028: PPUSH
17029: CALL_OW 321
17033: PUSH
17034: LD_INT 2
17036: EQUAL
17037: AND
17038: IFFALSE 17203
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
17040: LD_INT 22
17042: PUSH
17043: LD_VAR 0 16
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 2
17054: PUSH
17055: LD_INT 35
17057: PUSH
17058: LD_INT 11
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 35
17067: PUSH
17068: LD_INT 30
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 91
17082: PUSH
17083: LD_VAR 0 1
17087: PUSH
17088: LD_INT 18
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: PPUSH
17101: CALL_OW 69
17105: NOT
17106: PUSH
17107: LD_INT 22
17109: PUSH
17110: LD_VAR 0 16
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 2
17121: PUSH
17122: LD_INT 30
17124: PUSH
17125: LD_INT 32
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 30
17134: PUSH
17135: LD_INT 33
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 91
17149: PUSH
17150: LD_VAR 0 1
17154: PUSH
17155: LD_INT 12
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: PPUSH
17171: CALL_OW 69
17175: PUSH
17176: LD_INT 2
17178: GREATER
17179: AND
17180: IFFALSE 17203
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17182: LD_ADDR_VAR 0 18
17186: PUSH
17187: LD_INT 11
17189: PUSH
17190: LD_INT 30
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_VAR 0 12
17201: ARRAY
17202: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17203: LD_VAR 0 18
17207: NOT
17208: PUSH
17209: LD_INT 40
17211: PPUSH
17212: LD_VAR 0 16
17216: PPUSH
17217: CALL_OW 321
17221: PUSH
17222: LD_INT 2
17224: EQUAL
17225: AND
17226: PUSH
17227: LD_INT 7
17229: PUSH
17230: LD_VAR 0 5
17234: IN
17235: PUSH
17236: LD_INT 28
17238: PUSH
17239: LD_VAR 0 5
17243: IN
17244: OR
17245: PUSH
17246: LD_INT 45
17248: PUSH
17249: LD_VAR 0 5
17253: IN
17254: OR
17255: AND
17256: IFFALSE 17510
// begin hex := GetHexInfo ( x , y ) ;
17258: LD_ADDR_VAR 0 4
17262: PUSH
17263: LD_VAR 0 10
17267: PPUSH
17268: LD_VAR 0 11
17272: PPUSH
17273: CALL_OW 546
17277: ST_TO_ADDR
// if hex [ 1 ] then
17278: LD_VAR 0 4
17282: PUSH
17283: LD_INT 1
17285: ARRAY
17286: IFFALSE 17290
// exit ;
17288: GO 17693
// height := hex [ 2 ] ;
17290: LD_ADDR_VAR 0 15
17294: PUSH
17295: LD_VAR 0 4
17299: PUSH
17300: LD_INT 2
17302: ARRAY
17303: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17304: LD_ADDR_VAR 0 14
17308: PUSH
17309: LD_INT 0
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: LD_INT 3
17317: PUSH
17318: LD_INT 5
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: ST_TO_ADDR
// for i in tmp do
17327: LD_ADDR_VAR 0 8
17331: PUSH
17332: LD_VAR 0 14
17336: PUSH
17337: FOR_IN
17338: IFFALSE 17508
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17340: LD_ADDR_VAR 0 9
17344: PUSH
17345: LD_VAR 0 10
17349: PPUSH
17350: LD_VAR 0 8
17354: PPUSH
17355: LD_INT 5
17357: PPUSH
17358: CALL_OW 272
17362: PUSH
17363: LD_VAR 0 11
17367: PPUSH
17368: LD_VAR 0 8
17372: PPUSH
17373: LD_INT 5
17375: PPUSH
17376: CALL_OW 273
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17385: LD_VAR 0 9
17389: PUSH
17390: LD_INT 1
17392: ARRAY
17393: PPUSH
17394: LD_VAR 0 9
17398: PUSH
17399: LD_INT 2
17401: ARRAY
17402: PPUSH
17403: CALL_OW 488
17407: IFFALSE 17506
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17409: LD_ADDR_VAR 0 4
17413: PUSH
17414: LD_VAR 0 9
17418: PUSH
17419: LD_INT 1
17421: ARRAY
17422: PPUSH
17423: LD_VAR 0 9
17427: PUSH
17428: LD_INT 2
17430: ARRAY
17431: PPUSH
17432: CALL_OW 546
17436: ST_TO_ADDR
// if hex [ 1 ] then
17437: LD_VAR 0 4
17441: PUSH
17442: LD_INT 1
17444: ARRAY
17445: IFFALSE 17449
// continue ;
17447: GO 17337
// h := hex [ 2 ] ;
17449: LD_ADDR_VAR 0 13
17453: PUSH
17454: LD_VAR 0 4
17458: PUSH
17459: LD_INT 2
17461: ARRAY
17462: ST_TO_ADDR
// if h + 7 < height then
17463: LD_VAR 0 13
17467: PUSH
17468: LD_INT 7
17470: PLUS
17471: PUSH
17472: LD_VAR 0 15
17476: LESS
17477: IFFALSE 17506
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17479: LD_ADDR_VAR 0 18
17483: PUSH
17484: LD_INT 7
17486: PUSH
17487: LD_INT 28
17489: PUSH
17490: LD_INT 45
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: LIST
17497: PUSH
17498: LD_VAR 0 12
17502: ARRAY
17503: ST_TO_ADDR
// break ;
17504: GO 17508
// end ; end ; end ;
17506: GO 17337
17508: POP
17509: POP
// end ; if not weapon then
17510: LD_VAR 0 18
17514: NOT
17515: IFFALSE 17575
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17517: LD_ADDR_VAR 0 5
17521: PUSH
17522: LD_VAR 0 5
17526: PUSH
17527: LD_INT 11
17529: PUSH
17530: LD_INT 30
17532: PUSH
17533: LD_INT 49
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: DIFF
17541: ST_TO_ADDR
// if not list then
17542: LD_VAR 0 5
17546: NOT
17547: IFFALSE 17551
// exit ;
17549: GO 17693
// weapon := list [ rand ( 1 , list ) ] ;
17551: LD_ADDR_VAR 0 18
17555: PUSH
17556: LD_VAR 0 5
17560: PUSH
17561: LD_INT 1
17563: PPUSH
17564: LD_VAR 0 5
17568: PPUSH
17569: CALL_OW 12
17573: ARRAY
17574: ST_TO_ADDR
// end ; if weapon then
17575: LD_VAR 0 18
17579: IFFALSE 17693
// begin tmp := CostOfWeapon ( weapon ) ;
17581: LD_ADDR_VAR 0 14
17585: PUSH
17586: LD_VAR 0 18
17590: PPUSH
17591: CALL_OW 451
17595: ST_TO_ADDR
// j := GetBase ( tower ) ;
17596: LD_ADDR_VAR 0 9
17600: PUSH
17601: LD_VAR 0 1
17605: PPUSH
17606: CALL_OW 274
17610: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
17611: LD_VAR 0 9
17615: PPUSH
17616: LD_INT 1
17618: PPUSH
17619: CALL_OW 275
17623: PUSH
17624: LD_VAR 0 14
17628: PUSH
17629: LD_INT 1
17631: ARRAY
17632: GREATEREQUAL
17633: PUSH
17634: LD_VAR 0 9
17638: PPUSH
17639: LD_INT 2
17641: PPUSH
17642: CALL_OW 275
17646: PUSH
17647: LD_VAR 0 14
17651: PUSH
17652: LD_INT 2
17654: ARRAY
17655: GREATEREQUAL
17656: AND
17657: PUSH
17658: LD_VAR 0 9
17662: PPUSH
17663: LD_INT 3
17665: PPUSH
17666: CALL_OW 275
17670: PUSH
17671: LD_VAR 0 14
17675: PUSH
17676: LD_INT 3
17678: ARRAY
17679: GREATEREQUAL
17680: AND
17681: IFFALSE 17693
// result := weapon ;
17683: LD_ADDR_VAR 0 3
17687: PUSH
17688: LD_VAR 0 18
17692: ST_TO_ADDR
// end ; end ;
17693: LD_VAR 0 3
17697: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
17698: LD_INT 0
17700: PPUSH
17701: PPUSH
// result := true ;
17702: LD_ADDR_VAR 0 3
17706: PUSH
17707: LD_INT 1
17709: ST_TO_ADDR
// if array1 = array2 then
17710: LD_VAR 0 1
17714: PUSH
17715: LD_VAR 0 2
17719: EQUAL
17720: IFFALSE 17780
// begin for i = 1 to array1 do
17722: LD_ADDR_VAR 0 4
17726: PUSH
17727: DOUBLE
17728: LD_INT 1
17730: DEC
17731: ST_TO_ADDR
17732: LD_VAR 0 1
17736: PUSH
17737: FOR_TO
17738: IFFALSE 17776
// if array1 [ i ] <> array2 [ i ] then
17740: LD_VAR 0 1
17744: PUSH
17745: LD_VAR 0 4
17749: ARRAY
17750: PUSH
17751: LD_VAR 0 2
17755: PUSH
17756: LD_VAR 0 4
17760: ARRAY
17761: NONEQUAL
17762: IFFALSE 17774
// begin result := false ;
17764: LD_ADDR_VAR 0 3
17768: PUSH
17769: LD_INT 0
17771: ST_TO_ADDR
// break ;
17772: GO 17776
// end ;
17774: GO 17737
17776: POP
17777: POP
// end else
17778: GO 17788
// result := false ;
17780: LD_ADDR_VAR 0 3
17784: PUSH
17785: LD_INT 0
17787: ST_TO_ADDR
// end ;
17788: LD_VAR 0 3
17792: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
17793: LD_INT 0
17795: PPUSH
17796: PPUSH
// if not array1 or not array2 then
17797: LD_VAR 0 1
17801: NOT
17802: PUSH
17803: LD_VAR 0 2
17807: NOT
17808: OR
17809: IFFALSE 17813
// exit ;
17811: GO 17877
// result := true ;
17813: LD_ADDR_VAR 0 3
17817: PUSH
17818: LD_INT 1
17820: ST_TO_ADDR
// for i = 1 to array1 do
17821: LD_ADDR_VAR 0 4
17825: PUSH
17826: DOUBLE
17827: LD_INT 1
17829: DEC
17830: ST_TO_ADDR
17831: LD_VAR 0 1
17835: PUSH
17836: FOR_TO
17837: IFFALSE 17875
// if array1 [ i ] <> array2 [ i ] then
17839: LD_VAR 0 1
17843: PUSH
17844: LD_VAR 0 4
17848: ARRAY
17849: PUSH
17850: LD_VAR 0 2
17854: PUSH
17855: LD_VAR 0 4
17859: ARRAY
17860: NONEQUAL
17861: IFFALSE 17873
// begin result := false ;
17863: LD_ADDR_VAR 0 3
17867: PUSH
17868: LD_INT 0
17870: ST_TO_ADDR
// break ;
17871: GO 17875
// end ;
17873: GO 17836
17875: POP
17876: POP
// end ;
17877: LD_VAR 0 3
17881: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
17882: LD_INT 0
17884: PPUSH
17885: PPUSH
17886: PPUSH
// pom := GetBase ( fac ) ;
17887: LD_ADDR_VAR 0 5
17891: PUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 274
17901: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
17902: LD_ADDR_VAR 0 4
17906: PUSH
17907: LD_VAR 0 2
17911: PUSH
17912: LD_INT 1
17914: ARRAY
17915: PPUSH
17916: LD_VAR 0 2
17920: PUSH
17921: LD_INT 2
17923: ARRAY
17924: PPUSH
17925: LD_VAR 0 2
17929: PUSH
17930: LD_INT 3
17932: ARRAY
17933: PPUSH
17934: LD_VAR 0 2
17938: PUSH
17939: LD_INT 4
17941: ARRAY
17942: PPUSH
17943: CALL_OW 449
17947: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17948: LD_ADDR_VAR 0 3
17952: PUSH
17953: LD_VAR 0 5
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: CALL_OW 275
17965: PUSH
17966: LD_VAR 0 4
17970: PUSH
17971: LD_INT 1
17973: ARRAY
17974: GREATEREQUAL
17975: PUSH
17976: LD_VAR 0 5
17980: PPUSH
17981: LD_INT 2
17983: PPUSH
17984: CALL_OW 275
17988: PUSH
17989: LD_VAR 0 4
17993: PUSH
17994: LD_INT 2
17996: ARRAY
17997: GREATEREQUAL
17998: AND
17999: PUSH
18000: LD_VAR 0 5
18004: PPUSH
18005: LD_INT 3
18007: PPUSH
18008: CALL_OW 275
18012: PUSH
18013: LD_VAR 0 4
18017: PUSH
18018: LD_INT 3
18020: ARRAY
18021: GREATEREQUAL
18022: AND
18023: ST_TO_ADDR
// end ;
18024: LD_VAR 0 3
18028: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
18029: LD_INT 0
18031: PPUSH
18032: PPUSH
18033: PPUSH
18034: PPUSH
// pom := GetBase ( building ) ;
18035: LD_ADDR_VAR 0 3
18039: PUSH
18040: LD_VAR 0 1
18044: PPUSH
18045: CALL_OW 274
18049: ST_TO_ADDR
// if not pom then
18050: LD_VAR 0 3
18054: NOT
18055: IFFALSE 18059
// exit ;
18057: GO 18229
// btype := GetBType ( building ) ;
18059: LD_ADDR_VAR 0 5
18063: PUSH
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 266
18073: ST_TO_ADDR
// if btype = b_armoury then
18074: LD_VAR 0 5
18078: PUSH
18079: LD_INT 4
18081: EQUAL
18082: IFFALSE 18092
// btype := b_barracks ;
18084: LD_ADDR_VAR 0 5
18088: PUSH
18089: LD_INT 5
18091: ST_TO_ADDR
// if btype = b_depot then
18092: LD_VAR 0 5
18096: PUSH
18097: LD_INT 0
18099: EQUAL
18100: IFFALSE 18110
// btype := b_warehouse ;
18102: LD_ADDR_VAR 0 5
18106: PUSH
18107: LD_INT 1
18109: ST_TO_ADDR
// if btype = b_workshop then
18110: LD_VAR 0 5
18114: PUSH
18115: LD_INT 2
18117: EQUAL
18118: IFFALSE 18128
// btype := b_factory ;
18120: LD_ADDR_VAR 0 5
18124: PUSH
18125: LD_INT 3
18127: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18128: LD_ADDR_VAR 0 4
18132: PUSH
18133: LD_VAR 0 5
18137: PPUSH
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 248
18147: PPUSH
18148: CALL_OW 450
18152: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18153: LD_ADDR_VAR 0 2
18157: PUSH
18158: LD_VAR 0 3
18162: PPUSH
18163: LD_INT 1
18165: PPUSH
18166: CALL_OW 275
18170: PUSH
18171: LD_VAR 0 4
18175: PUSH
18176: LD_INT 1
18178: ARRAY
18179: GREATEREQUAL
18180: PUSH
18181: LD_VAR 0 3
18185: PPUSH
18186: LD_INT 2
18188: PPUSH
18189: CALL_OW 275
18193: PUSH
18194: LD_VAR 0 4
18198: PUSH
18199: LD_INT 2
18201: ARRAY
18202: GREATEREQUAL
18203: AND
18204: PUSH
18205: LD_VAR 0 3
18209: PPUSH
18210: LD_INT 3
18212: PPUSH
18213: CALL_OW 275
18217: PUSH
18218: LD_VAR 0 4
18222: PUSH
18223: LD_INT 3
18225: ARRAY
18226: GREATEREQUAL
18227: AND
18228: ST_TO_ADDR
// end ;
18229: LD_VAR 0 2
18233: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18234: LD_INT 0
18236: PPUSH
18237: PPUSH
18238: PPUSH
// pom := GetBase ( building ) ;
18239: LD_ADDR_VAR 0 4
18243: PUSH
18244: LD_VAR 0 1
18248: PPUSH
18249: CALL_OW 274
18253: ST_TO_ADDR
// if not pom then
18254: LD_VAR 0 4
18258: NOT
18259: IFFALSE 18263
// exit ;
18261: GO 18364
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18263: LD_ADDR_VAR 0 5
18267: PUSH
18268: LD_VAR 0 2
18272: PPUSH
18273: LD_VAR 0 1
18277: PPUSH
18278: CALL_OW 248
18282: PPUSH
18283: CALL_OW 450
18287: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18288: LD_ADDR_VAR 0 3
18292: PUSH
18293: LD_VAR 0 4
18297: PPUSH
18298: LD_INT 1
18300: PPUSH
18301: CALL_OW 275
18305: PUSH
18306: LD_VAR 0 5
18310: PUSH
18311: LD_INT 1
18313: ARRAY
18314: GREATEREQUAL
18315: PUSH
18316: LD_VAR 0 4
18320: PPUSH
18321: LD_INT 2
18323: PPUSH
18324: CALL_OW 275
18328: PUSH
18329: LD_VAR 0 5
18333: PUSH
18334: LD_INT 2
18336: ARRAY
18337: GREATEREQUAL
18338: AND
18339: PUSH
18340: LD_VAR 0 4
18344: PPUSH
18345: LD_INT 3
18347: PPUSH
18348: CALL_OW 275
18352: PUSH
18353: LD_VAR 0 5
18357: PUSH
18358: LD_INT 3
18360: ARRAY
18361: GREATEREQUAL
18362: AND
18363: ST_TO_ADDR
// end ;
18364: LD_VAR 0 3
18368: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18369: LD_INT 0
18371: PPUSH
18372: PPUSH
18373: PPUSH
18374: PPUSH
18375: PPUSH
18376: PPUSH
18377: PPUSH
18378: PPUSH
18379: PPUSH
18380: PPUSH
18381: PPUSH
// result := false ;
18382: LD_ADDR_VAR 0 8
18386: PUSH
18387: LD_INT 0
18389: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18390: LD_VAR 0 5
18394: NOT
18395: PUSH
18396: LD_VAR 0 1
18400: NOT
18401: OR
18402: PUSH
18403: LD_VAR 0 2
18407: NOT
18408: OR
18409: PUSH
18410: LD_VAR 0 3
18414: NOT
18415: OR
18416: IFFALSE 18420
// exit ;
18418: GO 19234
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18420: LD_ADDR_VAR 0 14
18424: PUSH
18425: LD_VAR 0 1
18429: PPUSH
18430: LD_VAR 0 2
18434: PPUSH
18435: LD_VAR 0 3
18439: PPUSH
18440: LD_VAR 0 4
18444: PPUSH
18445: LD_VAR 0 5
18449: PUSH
18450: LD_INT 1
18452: ARRAY
18453: PPUSH
18454: CALL_OW 248
18458: PPUSH
18459: LD_INT 0
18461: PPUSH
18462: CALL 20471 0 6
18466: ST_TO_ADDR
// if not hexes then
18467: LD_VAR 0 14
18471: NOT
18472: IFFALSE 18476
// exit ;
18474: GO 19234
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18476: LD_ADDR_VAR 0 17
18480: PUSH
18481: LD_VAR 0 5
18485: PPUSH
18486: LD_INT 22
18488: PUSH
18489: LD_VAR 0 13
18493: PPUSH
18494: CALL_OW 255
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: LD_INT 30
18508: PUSH
18509: LD_INT 0
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 30
18518: PUSH
18519: LD_INT 1
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PPUSH
18535: CALL_OW 72
18539: ST_TO_ADDR
// for i = 1 to hexes do
18540: LD_ADDR_VAR 0 9
18544: PUSH
18545: DOUBLE
18546: LD_INT 1
18548: DEC
18549: ST_TO_ADDR
18550: LD_VAR 0 14
18554: PUSH
18555: FOR_TO
18556: IFFALSE 19232
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18558: LD_ADDR_VAR 0 13
18562: PUSH
18563: LD_VAR 0 14
18567: PUSH
18568: LD_VAR 0 9
18572: ARRAY
18573: PUSH
18574: LD_INT 1
18576: ARRAY
18577: PPUSH
18578: LD_VAR 0 14
18582: PUSH
18583: LD_VAR 0 9
18587: ARRAY
18588: PUSH
18589: LD_INT 2
18591: ARRAY
18592: PPUSH
18593: CALL_OW 428
18597: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
18598: LD_VAR 0 14
18602: PUSH
18603: LD_VAR 0 9
18607: ARRAY
18608: PUSH
18609: LD_INT 1
18611: ARRAY
18612: PPUSH
18613: LD_VAR 0 14
18617: PUSH
18618: LD_VAR 0 9
18622: ARRAY
18623: PUSH
18624: LD_INT 2
18626: ARRAY
18627: PPUSH
18628: CALL_OW 351
18632: PUSH
18633: LD_VAR 0 14
18637: PUSH
18638: LD_VAR 0 9
18642: ARRAY
18643: PUSH
18644: LD_INT 1
18646: ARRAY
18647: PPUSH
18648: LD_VAR 0 14
18652: PUSH
18653: LD_VAR 0 9
18657: ARRAY
18658: PUSH
18659: LD_INT 2
18661: ARRAY
18662: PPUSH
18663: CALL_OW 488
18667: NOT
18668: OR
18669: PUSH
18670: LD_VAR 0 13
18674: PPUSH
18675: CALL_OW 247
18679: PUSH
18680: LD_INT 3
18682: EQUAL
18683: OR
18684: IFFALSE 18690
// exit ;
18686: POP
18687: POP
18688: GO 19234
// if not tmp then
18690: LD_VAR 0 13
18694: NOT
18695: IFFALSE 18699
// continue ;
18697: GO 18555
// result := true ;
18699: LD_ADDR_VAR 0 8
18703: PUSH
18704: LD_INT 1
18706: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
18707: LD_VAR 0 6
18711: PUSH
18712: LD_VAR 0 13
18716: PPUSH
18717: CALL_OW 247
18721: PUSH
18722: LD_INT 2
18724: EQUAL
18725: AND
18726: PUSH
18727: LD_VAR 0 13
18731: PPUSH
18732: CALL_OW 263
18736: PUSH
18737: LD_INT 1
18739: EQUAL
18740: AND
18741: IFFALSE 18905
// begin if IsDrivenBy ( tmp ) then
18743: LD_VAR 0 13
18747: PPUSH
18748: CALL_OW 311
18752: IFFALSE 18756
// continue ;
18754: GO 18555
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
18756: LD_VAR 0 6
18760: PPUSH
18761: LD_INT 3
18763: PUSH
18764: LD_INT 60
18766: PUSH
18767: EMPTY
18768: LIST
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 3
18776: PUSH
18777: LD_INT 55
18779: PUSH
18780: EMPTY
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PPUSH
18791: CALL_OW 72
18795: IFFALSE 18903
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
18797: LD_ADDR_VAR 0 18
18801: PUSH
18802: LD_VAR 0 6
18806: PPUSH
18807: LD_INT 3
18809: PUSH
18810: LD_INT 60
18812: PUSH
18813: EMPTY
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 3
18822: PUSH
18823: LD_INT 55
18825: PUSH
18826: EMPTY
18827: LIST
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PPUSH
18837: CALL_OW 72
18841: PUSH
18842: LD_INT 1
18844: ARRAY
18845: ST_TO_ADDR
// if IsInUnit ( driver ) then
18846: LD_VAR 0 18
18850: PPUSH
18851: CALL_OW 310
18855: IFFALSE 18866
// ComExit ( driver ) ;
18857: LD_VAR 0 18
18861: PPUSH
18862: CALL 44159 0 1
// AddComEnterUnit ( driver , tmp ) ;
18866: LD_VAR 0 18
18870: PPUSH
18871: LD_VAR 0 13
18875: PPUSH
18876: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
18880: LD_VAR 0 18
18884: PPUSH
18885: LD_VAR 0 7
18889: PPUSH
18890: CALL_OW 173
// AddComExitVehicle ( driver ) ;
18894: LD_VAR 0 18
18898: PPUSH
18899: CALL_OW 181
// end ; continue ;
18903: GO 18555
// end ; if not cleaners or not tmp in cleaners then
18905: LD_VAR 0 6
18909: NOT
18910: PUSH
18911: LD_VAR 0 13
18915: PUSH
18916: LD_VAR 0 6
18920: IN
18921: NOT
18922: OR
18923: IFFALSE 19230
// begin if dep then
18925: LD_VAR 0 17
18929: IFFALSE 19065
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
18931: LD_ADDR_VAR 0 16
18935: PUSH
18936: LD_VAR 0 17
18940: PUSH
18941: LD_INT 1
18943: ARRAY
18944: PPUSH
18945: CALL_OW 250
18949: PPUSH
18950: LD_VAR 0 17
18954: PUSH
18955: LD_INT 1
18957: ARRAY
18958: PPUSH
18959: CALL_OW 254
18963: PPUSH
18964: LD_INT 5
18966: PPUSH
18967: CALL_OW 272
18971: PUSH
18972: LD_VAR 0 17
18976: PUSH
18977: LD_INT 1
18979: ARRAY
18980: PPUSH
18981: CALL_OW 251
18985: PPUSH
18986: LD_VAR 0 17
18990: PUSH
18991: LD_INT 1
18993: ARRAY
18994: PPUSH
18995: CALL_OW 254
18999: PPUSH
19000: LD_INT 5
19002: PPUSH
19003: CALL_OW 273
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
19012: LD_VAR 0 16
19016: PUSH
19017: LD_INT 1
19019: ARRAY
19020: PPUSH
19021: LD_VAR 0 16
19025: PUSH
19026: LD_INT 2
19028: ARRAY
19029: PPUSH
19030: CALL_OW 488
19034: IFFALSE 19065
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
19036: LD_VAR 0 13
19040: PPUSH
19041: LD_VAR 0 16
19045: PUSH
19046: LD_INT 1
19048: ARRAY
19049: PPUSH
19050: LD_VAR 0 16
19054: PUSH
19055: LD_INT 2
19057: ARRAY
19058: PPUSH
19059: CALL_OW 111
// continue ;
19063: GO 18555
// end ; end ; r := GetDir ( tmp ) ;
19065: LD_ADDR_VAR 0 15
19069: PUSH
19070: LD_VAR 0 13
19074: PPUSH
19075: CALL_OW 254
19079: ST_TO_ADDR
// if r = 5 then
19080: LD_VAR 0 15
19084: PUSH
19085: LD_INT 5
19087: EQUAL
19088: IFFALSE 19098
// r := 0 ;
19090: LD_ADDR_VAR 0 15
19094: PUSH
19095: LD_INT 0
19097: ST_TO_ADDR
// for j = r to 5 do
19098: LD_ADDR_VAR 0 10
19102: PUSH
19103: DOUBLE
19104: LD_VAR 0 15
19108: DEC
19109: ST_TO_ADDR
19110: LD_INT 5
19112: PUSH
19113: FOR_TO
19114: IFFALSE 19228
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
19116: LD_ADDR_VAR 0 11
19120: PUSH
19121: LD_VAR 0 13
19125: PPUSH
19126: CALL_OW 250
19130: PPUSH
19131: LD_VAR 0 10
19135: PPUSH
19136: LD_INT 2
19138: PPUSH
19139: CALL_OW 272
19143: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19144: LD_ADDR_VAR 0 12
19148: PUSH
19149: LD_VAR 0 13
19153: PPUSH
19154: CALL_OW 251
19158: PPUSH
19159: LD_VAR 0 10
19163: PPUSH
19164: LD_INT 2
19166: PPUSH
19167: CALL_OW 273
19171: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19172: LD_VAR 0 11
19176: PPUSH
19177: LD_VAR 0 12
19181: PPUSH
19182: CALL_OW 488
19186: PUSH
19187: LD_VAR 0 11
19191: PPUSH
19192: LD_VAR 0 12
19196: PPUSH
19197: CALL_OW 428
19201: NOT
19202: AND
19203: IFFALSE 19226
// begin ComMoveXY ( tmp , _x , _y ) ;
19205: LD_VAR 0 13
19209: PPUSH
19210: LD_VAR 0 11
19214: PPUSH
19215: LD_VAR 0 12
19219: PPUSH
19220: CALL_OW 111
// break ;
19224: GO 19228
// end ; end ;
19226: GO 19113
19228: POP
19229: POP
// end ; end ;
19230: GO 18555
19232: POP
19233: POP
// end ;
19234: LD_VAR 0 8
19238: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19239: LD_INT 0
19241: PPUSH
// result := true ;
19242: LD_ADDR_VAR 0 3
19246: PUSH
19247: LD_INT 1
19249: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19250: LD_VAR 0 2
19254: PUSH
19255: LD_INT 24
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19269
19261: LD_INT 33
19263: DOUBLE
19264: EQUAL
19265: IFTRUE 19269
19267: GO 19294
19269: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19270: LD_ADDR_VAR 0 3
19274: PUSH
19275: LD_INT 32
19277: PPUSH
19278: LD_VAR 0 1
19282: PPUSH
19283: CALL_OW 321
19287: PUSH
19288: LD_INT 2
19290: EQUAL
19291: ST_TO_ADDR
19292: GO 19614
19294: LD_INT 20
19296: DOUBLE
19297: EQUAL
19298: IFTRUE 19302
19300: GO 19327
19302: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19303: LD_ADDR_VAR 0 3
19307: PUSH
19308: LD_INT 6
19310: PPUSH
19311: LD_VAR 0 1
19315: PPUSH
19316: CALL_OW 321
19320: PUSH
19321: LD_INT 2
19323: EQUAL
19324: ST_TO_ADDR
19325: GO 19614
19327: LD_INT 22
19329: DOUBLE
19330: EQUAL
19331: IFTRUE 19341
19333: LD_INT 36
19335: DOUBLE
19336: EQUAL
19337: IFTRUE 19341
19339: GO 19366
19341: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19342: LD_ADDR_VAR 0 3
19346: PUSH
19347: LD_INT 15
19349: PPUSH
19350: LD_VAR 0 1
19354: PPUSH
19355: CALL_OW 321
19359: PUSH
19360: LD_INT 2
19362: EQUAL
19363: ST_TO_ADDR
19364: GO 19614
19366: LD_INT 30
19368: DOUBLE
19369: EQUAL
19370: IFTRUE 19374
19372: GO 19399
19374: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19375: LD_ADDR_VAR 0 3
19379: PUSH
19380: LD_INT 20
19382: PPUSH
19383: LD_VAR 0 1
19387: PPUSH
19388: CALL_OW 321
19392: PUSH
19393: LD_INT 2
19395: EQUAL
19396: ST_TO_ADDR
19397: GO 19614
19399: LD_INT 28
19401: DOUBLE
19402: EQUAL
19403: IFTRUE 19413
19405: LD_INT 21
19407: DOUBLE
19408: EQUAL
19409: IFTRUE 19413
19411: GO 19438
19413: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19414: LD_ADDR_VAR 0 3
19418: PUSH
19419: LD_INT 21
19421: PPUSH
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL_OW 321
19431: PUSH
19432: LD_INT 2
19434: EQUAL
19435: ST_TO_ADDR
19436: GO 19614
19438: LD_INT 16
19440: DOUBLE
19441: EQUAL
19442: IFTRUE 19446
19444: GO 19473
19446: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19447: LD_ADDR_VAR 0 3
19451: PUSH
19452: LD_EXP 51
19456: PPUSH
19457: LD_VAR 0 1
19461: PPUSH
19462: CALL_OW 321
19466: PUSH
19467: LD_INT 2
19469: EQUAL
19470: ST_TO_ADDR
19471: GO 19614
19473: LD_INT 19
19475: DOUBLE
19476: EQUAL
19477: IFTRUE 19487
19479: LD_INT 23
19481: DOUBLE
19482: EQUAL
19483: IFTRUE 19487
19485: GO 19514
19487: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
19488: LD_ADDR_VAR 0 3
19492: PUSH
19493: LD_EXP 50
19497: PPUSH
19498: LD_VAR 0 1
19502: PPUSH
19503: CALL_OW 321
19507: PUSH
19508: LD_INT 2
19510: EQUAL
19511: ST_TO_ADDR
19512: GO 19614
19514: LD_INT 17
19516: DOUBLE
19517: EQUAL
19518: IFTRUE 19522
19520: GO 19547
19522: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
19523: LD_ADDR_VAR 0 3
19527: PUSH
19528: LD_INT 39
19530: PPUSH
19531: LD_VAR 0 1
19535: PPUSH
19536: CALL_OW 321
19540: PUSH
19541: LD_INT 2
19543: EQUAL
19544: ST_TO_ADDR
19545: GO 19614
19547: LD_INT 18
19549: DOUBLE
19550: EQUAL
19551: IFTRUE 19555
19553: GO 19580
19555: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
19556: LD_ADDR_VAR 0 3
19560: PUSH
19561: LD_INT 40
19563: PPUSH
19564: LD_VAR 0 1
19568: PPUSH
19569: CALL_OW 321
19573: PUSH
19574: LD_INT 2
19576: EQUAL
19577: ST_TO_ADDR
19578: GO 19614
19580: LD_INT 27
19582: DOUBLE
19583: EQUAL
19584: IFTRUE 19588
19586: GO 19613
19588: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
19589: LD_ADDR_VAR 0 3
19593: PUSH
19594: LD_INT 35
19596: PPUSH
19597: LD_VAR 0 1
19601: PPUSH
19602: CALL_OW 321
19606: PUSH
19607: LD_INT 2
19609: EQUAL
19610: ST_TO_ADDR
19611: GO 19614
19613: POP
// end ;
19614: LD_VAR 0 3
19618: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
19619: LD_INT 0
19621: PPUSH
19622: PPUSH
19623: PPUSH
19624: PPUSH
19625: PPUSH
19626: PPUSH
19627: PPUSH
19628: PPUSH
19629: PPUSH
19630: PPUSH
19631: PPUSH
// result := false ;
19632: LD_ADDR_VAR 0 6
19636: PUSH
19637: LD_INT 0
19639: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
19640: LD_VAR 0 1
19644: NOT
19645: PUSH
19646: LD_VAR 0 1
19650: PPUSH
19651: CALL_OW 266
19655: PUSH
19656: LD_INT 0
19658: PUSH
19659: LD_INT 1
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: IN
19666: NOT
19667: OR
19668: PUSH
19669: LD_VAR 0 2
19673: NOT
19674: OR
19675: PUSH
19676: LD_VAR 0 5
19680: PUSH
19681: LD_INT 0
19683: PUSH
19684: LD_INT 1
19686: PUSH
19687: LD_INT 2
19689: PUSH
19690: LD_INT 3
19692: PUSH
19693: LD_INT 4
19695: PUSH
19696: LD_INT 5
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: IN
19707: NOT
19708: OR
19709: PUSH
19710: LD_VAR 0 3
19714: PPUSH
19715: LD_VAR 0 4
19719: PPUSH
19720: CALL_OW 488
19724: NOT
19725: OR
19726: IFFALSE 19730
// exit ;
19728: GO 20466
// side := GetSide ( depot ) ;
19730: LD_ADDR_VAR 0 9
19734: PUSH
19735: LD_VAR 0 1
19739: PPUSH
19740: CALL_OW 255
19744: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
19745: LD_VAR 0 9
19749: PPUSH
19750: LD_VAR 0 2
19754: PPUSH
19755: CALL 19239 0 2
19759: NOT
19760: IFFALSE 19764
// exit ;
19762: GO 20466
// pom := GetBase ( depot ) ;
19764: LD_ADDR_VAR 0 10
19768: PUSH
19769: LD_VAR 0 1
19773: PPUSH
19774: CALL_OW 274
19778: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
19779: LD_ADDR_VAR 0 11
19783: PUSH
19784: LD_VAR 0 2
19788: PPUSH
19789: LD_VAR 0 1
19793: PPUSH
19794: CALL_OW 248
19798: PPUSH
19799: CALL_OW 450
19803: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
19804: LD_VAR 0 10
19808: PPUSH
19809: LD_INT 1
19811: PPUSH
19812: CALL_OW 275
19816: PUSH
19817: LD_VAR 0 11
19821: PUSH
19822: LD_INT 1
19824: ARRAY
19825: GREATEREQUAL
19826: PUSH
19827: LD_VAR 0 10
19831: PPUSH
19832: LD_INT 2
19834: PPUSH
19835: CALL_OW 275
19839: PUSH
19840: LD_VAR 0 11
19844: PUSH
19845: LD_INT 2
19847: ARRAY
19848: GREATEREQUAL
19849: AND
19850: PUSH
19851: LD_VAR 0 10
19855: PPUSH
19856: LD_INT 3
19858: PPUSH
19859: CALL_OW 275
19863: PUSH
19864: LD_VAR 0 11
19868: PUSH
19869: LD_INT 3
19871: ARRAY
19872: GREATEREQUAL
19873: AND
19874: NOT
19875: IFFALSE 19879
// exit ;
19877: GO 20466
// if GetBType ( depot ) = b_depot then
19879: LD_VAR 0 1
19883: PPUSH
19884: CALL_OW 266
19888: PUSH
19889: LD_INT 0
19891: EQUAL
19892: IFFALSE 19904
// dist := 28 else
19894: LD_ADDR_VAR 0 14
19898: PUSH
19899: LD_INT 28
19901: ST_TO_ADDR
19902: GO 19912
// dist := 36 ;
19904: LD_ADDR_VAR 0 14
19908: PUSH
19909: LD_INT 36
19911: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
19912: LD_VAR 0 1
19916: PPUSH
19917: LD_VAR 0 3
19921: PPUSH
19922: LD_VAR 0 4
19926: PPUSH
19927: CALL_OW 297
19931: PUSH
19932: LD_VAR 0 14
19936: GREATER
19937: IFFALSE 19941
// exit ;
19939: GO 20466
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
19941: LD_ADDR_VAR 0 12
19945: PUSH
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: LD_VAR 0 4
19960: PPUSH
19961: LD_VAR 0 5
19965: PPUSH
19966: LD_VAR 0 1
19970: PPUSH
19971: CALL_OW 248
19975: PPUSH
19976: LD_INT 0
19978: PPUSH
19979: CALL 20471 0 6
19983: ST_TO_ADDR
// if not hexes then
19984: LD_VAR 0 12
19988: NOT
19989: IFFALSE 19993
// exit ;
19991: GO 20466
// hex := GetHexInfo ( x , y ) ;
19993: LD_ADDR_VAR 0 15
19997: PUSH
19998: LD_VAR 0 3
20002: PPUSH
20003: LD_VAR 0 4
20007: PPUSH
20008: CALL_OW 546
20012: ST_TO_ADDR
// if hex [ 1 ] then
20013: LD_VAR 0 15
20017: PUSH
20018: LD_INT 1
20020: ARRAY
20021: IFFALSE 20025
// exit ;
20023: GO 20466
// height := hex [ 2 ] ;
20025: LD_ADDR_VAR 0 13
20029: PUSH
20030: LD_VAR 0 15
20034: PUSH
20035: LD_INT 2
20037: ARRAY
20038: ST_TO_ADDR
// for i = 1 to hexes do
20039: LD_ADDR_VAR 0 7
20043: PUSH
20044: DOUBLE
20045: LD_INT 1
20047: DEC
20048: ST_TO_ADDR
20049: LD_VAR 0 12
20053: PUSH
20054: FOR_TO
20055: IFFALSE 20385
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
20057: LD_VAR 0 12
20061: PUSH
20062: LD_VAR 0 7
20066: ARRAY
20067: PUSH
20068: LD_INT 1
20070: ARRAY
20071: PPUSH
20072: LD_VAR 0 12
20076: PUSH
20077: LD_VAR 0 7
20081: ARRAY
20082: PUSH
20083: LD_INT 2
20085: ARRAY
20086: PPUSH
20087: CALL_OW 488
20091: NOT
20092: PUSH
20093: LD_VAR 0 12
20097: PUSH
20098: LD_VAR 0 7
20102: ARRAY
20103: PUSH
20104: LD_INT 1
20106: ARRAY
20107: PPUSH
20108: LD_VAR 0 12
20112: PUSH
20113: LD_VAR 0 7
20117: ARRAY
20118: PUSH
20119: LD_INT 2
20121: ARRAY
20122: PPUSH
20123: CALL_OW 428
20127: PUSH
20128: LD_INT 0
20130: GREATER
20131: OR
20132: PUSH
20133: LD_VAR 0 12
20137: PUSH
20138: LD_VAR 0 7
20142: ARRAY
20143: PUSH
20144: LD_INT 1
20146: ARRAY
20147: PPUSH
20148: LD_VAR 0 12
20152: PUSH
20153: LD_VAR 0 7
20157: ARRAY
20158: PUSH
20159: LD_INT 2
20161: ARRAY
20162: PPUSH
20163: CALL_OW 351
20167: OR
20168: IFFALSE 20174
// exit ;
20170: POP
20171: POP
20172: GO 20466
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20174: LD_ADDR_VAR 0 8
20178: PUSH
20179: LD_VAR 0 12
20183: PUSH
20184: LD_VAR 0 7
20188: ARRAY
20189: PUSH
20190: LD_INT 1
20192: ARRAY
20193: PPUSH
20194: LD_VAR 0 12
20198: PUSH
20199: LD_VAR 0 7
20203: ARRAY
20204: PUSH
20205: LD_INT 2
20207: ARRAY
20208: PPUSH
20209: CALL_OW 546
20213: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20214: LD_VAR 0 8
20218: PUSH
20219: LD_INT 1
20221: ARRAY
20222: PUSH
20223: LD_VAR 0 8
20227: PUSH
20228: LD_INT 2
20230: ARRAY
20231: PUSH
20232: LD_VAR 0 13
20236: PUSH
20237: LD_INT 2
20239: PLUS
20240: GREATER
20241: OR
20242: PUSH
20243: LD_VAR 0 8
20247: PUSH
20248: LD_INT 2
20250: ARRAY
20251: PUSH
20252: LD_VAR 0 13
20256: PUSH
20257: LD_INT 2
20259: MINUS
20260: LESS
20261: OR
20262: PUSH
20263: LD_VAR 0 8
20267: PUSH
20268: LD_INT 3
20270: ARRAY
20271: PUSH
20272: LD_INT 0
20274: PUSH
20275: LD_INT 8
20277: PUSH
20278: LD_INT 9
20280: PUSH
20281: LD_INT 10
20283: PUSH
20284: LD_INT 11
20286: PUSH
20287: LD_INT 12
20289: PUSH
20290: LD_INT 13
20292: PUSH
20293: LD_INT 16
20295: PUSH
20296: LD_INT 17
20298: PUSH
20299: LD_INT 18
20301: PUSH
20302: LD_INT 19
20304: PUSH
20305: LD_INT 20
20307: PUSH
20308: LD_INT 21
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: IN
20326: NOT
20327: OR
20328: PUSH
20329: LD_VAR 0 8
20333: PUSH
20334: LD_INT 5
20336: ARRAY
20337: NOT
20338: OR
20339: PUSH
20340: LD_VAR 0 8
20344: PUSH
20345: LD_INT 6
20347: ARRAY
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: LD_INT 2
20354: PUSH
20355: LD_INT 7
20357: PUSH
20358: LD_INT 9
20360: PUSH
20361: LD_INT 10
20363: PUSH
20364: LD_INT 11
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: IN
20375: NOT
20376: OR
20377: IFFALSE 20383
// exit ;
20379: POP
20380: POP
20381: GO 20466
// end ;
20383: GO 20054
20385: POP
20386: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20387: LD_VAR 0 9
20391: PPUSH
20392: LD_VAR 0 3
20396: PPUSH
20397: LD_VAR 0 4
20401: PPUSH
20402: LD_INT 20
20404: PPUSH
20405: CALL 12412 0 4
20409: PUSH
20410: LD_INT 4
20412: ARRAY
20413: IFFALSE 20417
// exit ;
20415: GO 20466
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20417: LD_VAR 0 2
20421: PUSH
20422: LD_INT 29
20424: PUSH
20425: LD_INT 30
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: IN
20432: PUSH
20433: LD_VAR 0 3
20437: PPUSH
20438: LD_VAR 0 4
20442: PPUSH
20443: LD_VAR 0 9
20447: PPUSH
20448: CALL_OW 440
20452: NOT
20453: AND
20454: IFFALSE 20458
// exit ;
20456: GO 20466
// result := true ;
20458: LD_ADDR_VAR 0 6
20462: PUSH
20463: LD_INT 1
20465: ST_TO_ADDR
// end ;
20466: LD_VAR 0 6
20470: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
20471: LD_INT 0
20473: PPUSH
20474: PPUSH
20475: PPUSH
20476: PPUSH
20477: PPUSH
20478: PPUSH
20479: PPUSH
20480: PPUSH
20481: PPUSH
20482: PPUSH
20483: PPUSH
20484: PPUSH
20485: PPUSH
20486: PPUSH
20487: PPUSH
20488: PPUSH
20489: PPUSH
20490: PPUSH
20491: PPUSH
20492: PPUSH
20493: PPUSH
20494: PPUSH
20495: PPUSH
20496: PPUSH
20497: PPUSH
20498: PPUSH
20499: PPUSH
20500: PPUSH
20501: PPUSH
20502: PPUSH
20503: PPUSH
20504: PPUSH
20505: PPUSH
20506: PPUSH
20507: PPUSH
20508: PPUSH
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
20513: PPUSH
20514: PPUSH
20515: PPUSH
20516: PPUSH
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
20521: PPUSH
20522: PPUSH
20523: PPUSH
20524: PPUSH
20525: PPUSH
20526: PPUSH
20527: PPUSH
20528: PPUSH
20529: PPUSH
20530: PPUSH
// result = [ ] ;
20531: LD_ADDR_VAR 0 7
20535: PUSH
20536: EMPTY
20537: ST_TO_ADDR
// temp_list = [ ] ;
20538: LD_ADDR_VAR 0 9
20542: PUSH
20543: EMPTY
20544: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
20545: LD_VAR 0 4
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: LD_INT 1
20555: PUSH
20556: LD_INT 2
20558: PUSH
20559: LD_INT 3
20561: PUSH
20562: LD_INT 4
20564: PUSH
20565: LD_INT 5
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: IN
20576: NOT
20577: PUSH
20578: LD_VAR 0 1
20582: PUSH
20583: LD_INT 0
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: IN
20593: PUSH
20594: LD_VAR 0 5
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: LD_INT 2
20604: PUSH
20605: LD_INT 3
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: IN
20613: NOT
20614: AND
20615: OR
20616: IFFALSE 20620
// exit ;
20618: GO 39011
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
20620: LD_VAR 0 1
20624: PUSH
20625: LD_INT 6
20627: PUSH
20628: LD_INT 7
20630: PUSH
20631: LD_INT 8
20633: PUSH
20634: LD_INT 13
20636: PUSH
20637: LD_INT 12
20639: PUSH
20640: LD_INT 15
20642: PUSH
20643: LD_INT 11
20645: PUSH
20646: LD_INT 14
20648: PUSH
20649: LD_INT 10
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: IN
20663: IFFALSE 20673
// btype = b_lab ;
20665: LD_ADDR_VAR 0 1
20669: PUSH
20670: LD_INT 6
20672: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
20673: LD_VAR 0 6
20677: PUSH
20678: LD_INT 0
20680: PUSH
20681: LD_INT 1
20683: PUSH
20684: LD_INT 2
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: LIST
20691: IN
20692: NOT
20693: PUSH
20694: LD_VAR 0 1
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: LD_INT 3
20710: PUSH
20711: LD_INT 6
20713: PUSH
20714: LD_INT 36
20716: PUSH
20717: LD_INT 4
20719: PUSH
20720: LD_INT 5
20722: PUSH
20723: LD_INT 31
20725: PUSH
20726: LD_INT 32
20728: PUSH
20729: LD_INT 33
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: IN
20745: NOT
20746: PUSH
20747: LD_VAR 0 6
20751: PUSH
20752: LD_INT 1
20754: EQUAL
20755: AND
20756: OR
20757: PUSH
20758: LD_VAR 0 1
20762: PUSH
20763: LD_INT 2
20765: PUSH
20766: LD_INT 3
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: IN
20773: NOT
20774: PUSH
20775: LD_VAR 0 6
20779: PUSH
20780: LD_INT 2
20782: EQUAL
20783: AND
20784: OR
20785: IFFALSE 20795
// mode = 0 ;
20787: LD_ADDR_VAR 0 6
20791: PUSH
20792: LD_INT 0
20794: ST_TO_ADDR
// case mode of 0 :
20795: LD_VAR 0 6
20799: PUSH
20800: LD_INT 0
20802: DOUBLE
20803: EQUAL
20804: IFTRUE 20808
20806: GO 32261
20808: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
20809: LD_ADDR_VAR 0 11
20813: PUSH
20814: LD_INT 0
20816: PUSH
20817: LD_INT 0
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: LD_INT 0
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: LD_INT 1
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: LD_INT 1
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: NEG
20868: PUSH
20869: LD_INT 0
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 1
20878: NEG
20879: PUSH
20880: LD_INT 1
20882: NEG
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 1
20890: NEG
20891: PUSH
20892: LD_INT 2
20894: NEG
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 0
20902: PUSH
20903: LD_INT 2
20905: NEG
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: LD_INT 1
20916: NEG
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: LD_INT 2
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 0
20934: PUSH
20935: LD_INT 2
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: LD_INT 1
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 1
20955: PUSH
20956: LD_INT 3
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: LD_INT 3
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 1
20975: NEG
20976: PUSH
20977: LD_INT 2
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21002: LD_ADDR_VAR 0 12
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 1
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 0
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 1
21060: NEG
21061: PUSH
21062: LD_INT 0
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 1
21071: NEG
21072: PUSH
21073: LD_INT 1
21075: NEG
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 2
21094: PUSH
21095: LD_INT 0
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 2
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 1
21114: NEG
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 2
21125: NEG
21126: PUSH
21127: LD_INT 0
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 2
21136: NEG
21137: PUSH
21138: LD_INT 1
21140: NEG
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 3
21159: NEG
21160: PUSH
21161: LD_INT 0
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 3
21170: NEG
21171: PUSH
21172: LD_INT 1
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21198: LD_ADDR_VAR 0 13
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: LD_INT 0
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: LD_INT 1
21218: NEG
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: LD_INT 0
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 0
21246: PUSH
21247: LD_INT 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 1
21256: NEG
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 1
21267: NEG
21268: PUSH
21269: LD_INT 1
21271: NEG
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 1
21279: NEG
21280: PUSH
21281: LD_INT 2
21283: NEG
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 2
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 2
21301: PUSH
21302: LD_INT 2
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: LD_INT 2
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 2
21321: NEG
21322: PUSH
21323: LD_INT 1
21325: NEG
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 2
21333: NEG
21334: PUSH
21335: LD_INT 2
21337: NEG
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 2
21345: NEG
21346: PUSH
21347: LD_INT 3
21349: NEG
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 3
21357: NEG
21358: PUSH
21359: LD_INT 2
21361: NEG
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 3
21369: NEG
21370: PUSH
21371: LD_INT 3
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21397: LD_ADDR_VAR 0 14
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 0
21414: PUSH
21415: LD_INT 1
21417: NEG
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: LD_INT 0
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: PUSH
21436: LD_INT 1
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 0
21445: PUSH
21446: LD_INT 1
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 1
21455: NEG
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 1
21466: NEG
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: LD_INT 2
21482: NEG
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: LD_INT 2
21493: NEG
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 0
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 1
21532: NEG
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: LD_INT 3
21547: NEG
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: LD_INT 3
21558: NEG
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 1
21566: PUSH
21567: LD_INT 2
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21593: LD_ADDR_VAR 0 15
21597: PUSH
21598: LD_INT 0
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 0
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 1
21621: PUSH
21622: LD_INT 0
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 1
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 1
21651: NEG
21652: PUSH
21653: LD_INT 0
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 1
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 2
21685: PUSH
21686: LD_INT 0
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 2
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 1
21705: NEG
21706: PUSH
21707: LD_INT 1
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 2
21716: NEG
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 2
21727: NEG
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 2
21739: PUSH
21740: LD_INT 1
21742: NEG
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 3
21750: PUSH
21751: LD_INT 0
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 3
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21786: LD_ADDR_VAR 0 16
21790: PUSH
21791: LD_INT 0
21793: PUSH
21794: LD_INT 0
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 0
21803: PUSH
21804: LD_INT 1
21806: NEG
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: LD_INT 0
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: LD_INT 1
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 0
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 1
21844: NEG
21845: PUSH
21846: LD_INT 0
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 1
21855: NEG
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: LD_INT 2
21871: NEG
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: LD_INT 2
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: LD_INT 2
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 2
21909: NEG
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 2
21921: NEG
21922: PUSH
21923: LD_INT 2
21925: NEG
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 3
21933: PUSH
21934: LD_INT 2
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 3
21943: PUSH
21944: LD_INT 3
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 2
21953: PUSH
21954: LD_INT 3
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21979: LD_ADDR_VAR 0 17
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: LD_INT 1
21999: NEG
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 1
22007: PUSH
22008: LD_INT 0
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 1
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 0
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 1
22037: NEG
22038: PUSH
22039: LD_INT 0
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 1
22048: NEG
22049: PUSH
22050: LD_INT 1
22052: NEG
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 1
22060: NEG
22061: PUSH
22062: LD_INT 2
22064: NEG
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 0
22072: PUSH
22073: LD_INT 2
22075: NEG
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 1
22083: PUSH
22084: LD_INT 1
22086: NEG
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 2
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 2
22114: PUSH
22115: LD_INT 2
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 1
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 0
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 1
22144: NEG
22145: PUSH
22146: LD_INT 1
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 2
22155: NEG
22156: PUSH
22157: LD_INT 0
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 2
22166: NEG
22167: PUSH
22168: LD_INT 1
22170: NEG
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 2
22178: NEG
22179: PUSH
22180: LD_INT 2
22182: NEG
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22209: LD_ADDR_VAR 0 18
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: LD_INT 1
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: LD_INT 0
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 1
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 1
22278: NEG
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: LD_INT 2
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 0
22302: PUSH
22303: LD_INT 2
22305: NEG
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 1
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 2
22324: PUSH
22325: LD_INT 0
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: LD_INT 1
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 2
22344: PUSH
22345: LD_INT 2
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: LD_INT 2
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 0
22364: PUSH
22365: LD_INT 2
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 1
22374: NEG
22375: PUSH
22376: LD_INT 1
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 2
22385: NEG
22386: PUSH
22387: LD_INT 0
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 2
22396: NEG
22397: PUSH
22398: LD_INT 1
22400: NEG
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: NEG
22409: PUSH
22410: LD_INT 2
22412: NEG
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22439: LD_ADDR_VAR 0 19
22443: PUSH
22444: LD_INT 0
22446: PUSH
22447: LD_INT 0
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: LD_INT 1
22459: NEG
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: PUSH
22468: LD_INT 0
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: LD_INT 1
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 0
22487: PUSH
22488: LD_INT 1
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: NEG
22498: PUSH
22499: LD_INT 0
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 1
22508: NEG
22509: PUSH
22510: LD_INT 1
22512: NEG
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 1
22520: NEG
22521: PUSH
22522: LD_INT 2
22524: NEG
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 0
22532: PUSH
22533: LD_INT 2
22535: NEG
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: LD_INT 1
22546: NEG
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 2
22554: PUSH
22555: LD_INT 0
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: LD_INT 1
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 2
22574: PUSH
22575: LD_INT 2
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: LD_INT 2
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 0
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: LD_INT 1
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 2
22615: NEG
22616: PUSH
22617: LD_INT 0
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 2
22626: NEG
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 2
22638: NEG
22639: PUSH
22640: LD_INT 2
22642: NEG
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22669: LD_ADDR_VAR 0 20
22673: PUSH
22674: LD_INT 0
22676: PUSH
22677: LD_INT 0
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 0
22686: PUSH
22687: LD_INT 1
22689: NEG
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 1
22697: PUSH
22698: LD_INT 0
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 1
22707: PUSH
22708: LD_INT 1
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 0
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 1
22727: NEG
22728: PUSH
22729: LD_INT 0
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 1
22738: NEG
22739: PUSH
22740: LD_INT 1
22742: NEG
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 1
22750: NEG
22751: PUSH
22752: LD_INT 2
22754: NEG
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 0
22762: PUSH
22763: LD_INT 2
22765: NEG
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 1
22773: PUSH
22774: LD_INT 1
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 2
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 2
22804: PUSH
22805: LD_INT 2
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 1
22814: PUSH
22815: LD_INT 2
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: LD_INT 2
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: LD_INT 1
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 2
22845: NEG
22846: PUSH
22847: LD_INT 0
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 2
22856: NEG
22857: PUSH
22858: LD_INT 1
22860: NEG
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 2
22868: NEG
22869: PUSH
22870: LD_INT 2
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22899: LD_ADDR_VAR 0 21
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 0
22916: PUSH
22917: LD_INT 1
22919: NEG
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 1
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 1
22937: PUSH
22938: LD_INT 1
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 0
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 1
22957: NEG
22958: PUSH
22959: LD_INT 0
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 1
22968: NEG
22969: PUSH
22970: LD_INT 1
22972: NEG
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 1
22980: NEG
22981: PUSH
22982: LD_INT 2
22984: NEG
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 0
22992: PUSH
22993: LD_INT 2
22995: NEG
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: LD_INT 1
23006: NEG
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 2
23014: PUSH
23015: LD_INT 0
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 2
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: PUSH
23035: LD_INT 2
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: LD_INT 2
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 2
23075: NEG
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 2
23086: NEG
23087: PUSH
23088: LD_INT 1
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 2
23098: NEG
23099: PUSH
23100: LD_INT 2
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23129: LD_ADDR_VAR 0 22
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: LD_INT 0
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: LD_INT 1
23149: NEG
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: LD_INT 0
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 1
23167: PUSH
23168: LD_INT 1
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 1
23187: NEG
23188: PUSH
23189: LD_INT 0
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 1
23198: NEG
23199: PUSH
23200: LD_INT 1
23202: NEG
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 1
23210: NEG
23211: PUSH
23212: LD_INT 2
23214: NEG
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: LD_INT 2
23225: NEG
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: PUSH
23234: LD_INT 1
23236: NEG
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 2
23244: PUSH
23245: LD_INT 0
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: LD_INT 1
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 2
23264: PUSH
23265: LD_INT 2
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 1
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: LD_INT 2
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 1
23294: NEG
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: NEG
23306: PUSH
23307: LD_INT 0
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 2
23316: NEG
23317: PUSH
23318: LD_INT 1
23320: NEG
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 2
23328: NEG
23329: PUSH
23330: LD_INT 2
23332: NEG
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23359: LD_ADDR_VAR 0 23
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: LD_INT 0
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: LD_INT 1
23379: NEG
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: LD_INT 1
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 0
23407: PUSH
23408: LD_INT 1
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 1
23417: NEG
23418: PUSH
23419: LD_INT 0
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: LD_INT 1
23432: NEG
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 1
23440: NEG
23441: PUSH
23442: LD_INT 2
23444: NEG
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 0
23452: PUSH
23453: LD_INT 2
23455: NEG
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: LD_INT 1
23466: NEG
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 2
23474: PUSH
23475: LD_INT 0
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 2
23484: PUSH
23485: LD_INT 1
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 2
23494: PUSH
23495: LD_INT 2
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: LD_INT 2
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 0
23514: PUSH
23515: LD_INT 2
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 2
23535: NEG
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 2
23546: NEG
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 2
23558: NEG
23559: PUSH
23560: LD_INT 2
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 2
23570: NEG
23571: PUSH
23572: LD_INT 3
23574: NEG
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: LD_INT 3
23586: NEG
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: LD_INT 2
23597: NEG
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 2
23605: PUSH
23606: LD_INT 1
23608: NEG
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
23639: LD_ADDR_VAR 0 24
23643: PUSH
23644: LD_INT 0
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: LD_INT 1
23659: NEG
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 1
23667: PUSH
23668: LD_INT 0
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: NEG
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: LD_INT 1
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: NEG
23721: PUSH
23722: LD_INT 2
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: LD_INT 2
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 2
23754: PUSH
23755: LD_INT 0
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 2
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: LD_INT 2
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: NEG
23816: PUSH
23817: LD_INT 0
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 2
23826: NEG
23827: PUSH
23828: LD_INT 1
23830: NEG
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 2
23838: NEG
23839: PUSH
23840: LD_INT 2
23842: NEG
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: LD_INT 2
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 2
23861: PUSH
23862: LD_INT 1
23864: NEG
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 3
23872: PUSH
23873: LD_INT 1
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 3
23882: PUSH
23883: LD_INT 2
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
23915: LD_ADDR_VAR 0 25
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: LD_INT 1
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: NEG
23997: PUSH
23998: LD_INT 2
24000: NEG
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: LD_INT 2
24011: NEG
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: LD_INT 1
24022: NEG
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 2
24040: PUSH
24041: LD_INT 1
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 2
24050: PUSH
24051: LD_INT 2
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: LD_INT 2
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: LD_INT 2
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: NEG
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 2
24091: NEG
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 2
24102: NEG
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 2
24114: NEG
24115: PUSH
24116: LD_INT 2
24118: NEG
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 3
24126: PUSH
24127: LD_INT 1
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 3
24136: PUSH
24137: LD_INT 2
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 2
24146: PUSH
24147: LD_INT 3
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: LD_INT 3
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24189: LD_ADDR_VAR 0 26
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: LD_INT 0
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: LD_INT 1
24209: NEG
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: LD_INT 0
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: LD_INT 1
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: LD_INT 2
24274: NEG
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: LD_INT 2
24285: NEG
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: LD_INT 1
24296: NEG
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 2
24304: PUSH
24305: LD_INT 0
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 2
24314: PUSH
24315: LD_INT 1
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 2
24324: PUSH
24325: LD_INT 2
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 1
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: LD_INT 2
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 1
24354: NEG
24355: PUSH
24356: LD_INT 1
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 2
24365: NEG
24366: PUSH
24367: LD_INT 0
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 2
24376: NEG
24377: PUSH
24378: LD_INT 1
24380: NEG
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 2
24388: NEG
24389: PUSH
24390: LD_INT 2
24392: NEG
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: LD_INT 3
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 1
24410: PUSH
24411: LD_INT 3
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: NEG
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 2
24431: NEG
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24465: LD_ADDR_VAR 0 27
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: LD_INT 1
24485: NEG
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 1
24493: PUSH
24494: LD_INT 0
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: LD_INT 1
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: LD_INT 1
24538: NEG
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 1
24546: NEG
24547: PUSH
24548: LD_INT 2
24550: NEG
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: LD_INT 2
24561: NEG
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 1
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 2
24580: PUSH
24581: LD_INT 0
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 2
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: LD_INT 2
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 1
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: LD_INT 1
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 2
24641: NEG
24642: PUSH
24643: LD_INT 0
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 2
24652: NEG
24653: PUSH
24654: LD_INT 1
24656: NEG
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 2
24664: NEG
24665: PUSH
24666: LD_INT 2
24668: NEG
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: LD_INT 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 2
24687: NEG
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 3
24698: NEG
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 3
24710: NEG
24711: PUSH
24712: LD_INT 2
24714: NEG
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24745: LD_ADDR_VAR 0 28
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: LD_INT 1
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: NEG
24815: PUSH
24816: LD_INT 1
24818: NEG
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 1
24826: NEG
24827: PUSH
24828: LD_INT 2
24830: NEG
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 2
24841: NEG
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: LD_INT 1
24852: NEG
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 2
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 2
24880: PUSH
24881: LD_INT 2
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: LD_INT 2
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: LD_INT 2
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 1
24910: NEG
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 2
24921: NEG
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 2
24932: NEG
24933: PUSH
24934: LD_INT 1
24936: NEG
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 2
24944: NEG
24945: PUSH
24946: LD_INT 2
24948: NEG
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 2
24956: NEG
24957: PUSH
24958: LD_INT 3
24960: NEG
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: NEG
24969: PUSH
24970: LD_INT 3
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 3
24980: NEG
24981: PUSH
24982: LD_INT 1
24984: NEG
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 3
24992: NEG
24993: PUSH
24994: LD_INT 2
24996: NEG
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25027: LD_ADDR_VAR 0 29
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: LD_INT 1
25100: NEG
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: LD_INT 2
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 0
25120: PUSH
25121: LD_INT 2
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 1
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 0
25172: PUSH
25173: LD_INT 2
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: NEG
25183: PUSH
25184: LD_INT 1
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 2
25193: NEG
25194: PUSH
25195: LD_INT 1
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 2
25205: NEG
25206: PUSH
25207: LD_INT 2
25209: NEG
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 2
25217: NEG
25218: PUSH
25219: LD_INT 3
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 3
25240: PUSH
25241: LD_INT 1
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 1
25250: PUSH
25251: LD_INT 3
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: NEG
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 3
25271: NEG
25272: PUSH
25273: LD_INT 2
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25306: LD_ADDR_VAR 0 30
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 1
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: PUSH
25366: LD_INT 0
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: NEG
25376: PUSH
25377: LD_INT 1
25379: NEG
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: LD_INT 2
25391: NEG
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 0
25399: PUSH
25400: LD_INT 2
25402: NEG
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: LD_INT 1
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 2
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 2
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 2
25441: PUSH
25442: LD_INT 2
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 1
25461: NEG
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 2
25472: NEG
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 2
25483: NEG
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: LD_INT 3
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 1
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 3
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 2
25528: PUSH
25529: LD_INT 3
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 2
25538: NEG
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 3
25549: NEG
25550: PUSH
25551: LD_INT 1
25553: NEG
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25584: LD_ADDR_VAR 0 31
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: LD_INT 1
25604: NEG
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: LD_INT 0
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: LD_INT 2
25669: NEG
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 2
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 2
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 2
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: LD_INT 2
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 1
25738: NEG
25739: PUSH
25740: LD_INT 1
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 2
25749: NEG
25750: PUSH
25751: LD_INT 1
25753: NEG
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 2
25761: NEG
25762: PUSH
25763: LD_INT 2
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: NEG
25774: PUSH
25775: LD_INT 3
25777: NEG
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: LD_INT 1
25788: NEG
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 3
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: LD_INT 3
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 1
25816: NEG
25817: PUSH
25818: LD_INT 2
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 3
25827: NEG
25828: PUSH
25829: LD_INT 2
25831: NEG
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25862: LD_ADDR_VAR 0 32
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 1
25920: NEG
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: LD_INT 2
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: LD_INT 2
25958: NEG
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 2
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: LD_INT 2
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 0
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: NEG
26018: PUSH
26019: LD_INT 1
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 2
26028: NEG
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 2
26039: NEG
26040: PUSH
26041: LD_INT 1
26043: NEG
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: NEG
26052: PUSH
26053: LD_INT 3
26055: NEG
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 3
26074: PUSH
26075: LD_INT 2
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 3
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: NEG
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 3
26105: NEG
26106: PUSH
26107: LD_INT 1
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26140: LD_ADDR_VAR 0 33
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 1
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 1
26168: PUSH
26169: LD_INT 0
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: LD_INT 0
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 1
26221: NEG
26222: PUSH
26223: LD_INT 2
26225: NEG
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: LD_INT 1
26236: NEG
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 1
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 2
26295: NEG
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 2
26306: NEG
26307: PUSH
26308: LD_INT 1
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 2
26318: NEG
26319: PUSH
26320: LD_INT 2
26322: NEG
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 2
26330: NEG
26331: PUSH
26332: LD_INT 3
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 2
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 3
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: LD_INT 3
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: LD_INT 2
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 3
26384: NEG
26385: PUSH
26386: LD_INT 2
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26419: LD_ADDR_VAR 0 34
26423: PUSH
26424: LD_INT 0
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: LD_INT 1
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 1
26477: NEG
26478: PUSH
26479: LD_INT 0
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: NEG
26489: PUSH
26490: LD_INT 1
26492: NEG
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: NEG
26501: PUSH
26502: LD_INT 2
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: LD_INT 2
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: LD_INT 1
26526: NEG
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 2
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 2
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 2
26575: NEG
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 2
26586: NEG
26587: PUSH
26588: LD_INT 1
26590: NEG
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 2
26598: NEG
26599: PUSH
26600: LD_INT 2
26602: NEG
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: LD_INT 3
26614: NEG
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: LD_INT 2
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 3
26633: PUSH
26634: LD_INT 2
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 2
26643: PUSH
26644: LD_INT 3
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: LD_INT 1
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 3
26664: NEG
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26699: LD_ADDR_VAR 0 35
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: LD_INT 0
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 0
26716: PUSH
26717: LD_INT 1
26719: NEG
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 1
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: LD_INT 1
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: LD_INT 0
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 1
26768: NEG
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 2
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 2
26790: NEG
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
26811: LD_ADDR_VAR 0 36
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: LD_INT 1
26884: NEG
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 1
26892: NEG
26893: PUSH
26894: LD_INT 2
26896: NEG
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: LD_INT 2
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
26923: LD_ADDR_VAR 0 37
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: LD_INT 1
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: LD_INT 1
26996: NEG
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 1
27004: PUSH
27005: LD_INT 1
27007: NEG
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: LD_INT 1
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27035: LD_ADDR_VAR 0 38
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 0
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: NEG
27105: PUSH
27106: LD_INT 1
27108: NEG
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 2
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 2
27126: NEG
27127: PUSH
27128: LD_INT 1
27130: NEG
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27147: LD_ADDR_VAR 0 39
27151: PUSH
27152: LD_INT 0
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: LD_INT 1
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: LD_INT 1
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PUSH
27218: LD_INT 1
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 1
27228: NEG
27229: PUSH
27230: LD_INT 2
27232: NEG
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27259: LD_ADDR_VAR 0 40
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: LD_INT 1
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: LD_INT 1
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: LD_INT 1
27332: NEG
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: LD_INT 1
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27371: LD_ADDR_VAR 0 41
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: LD_INT 1
27391: NEG
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 1
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: LD_INT 1
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: LD_INT 0
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 1
27440: NEG
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 1
27452: NEG
27453: PUSH
27454: LD_INT 2
27456: NEG
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 2
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 2
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 1
27515: NEG
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 2
27526: NEG
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 2
27537: NEG
27538: PUSH
27539: LD_INT 1
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 2
27549: NEG
27550: PUSH
27551: LD_INT 2
27553: NEG
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 2
27561: NEG
27562: PUSH
27563: LD_INT 3
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: LD_INT 1
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 3
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 3
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 3
27604: PUSH
27605: LD_INT 2
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 3
27614: PUSH
27615: LD_INT 3
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: LD_INT 3
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: NEG
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 3
27645: NEG
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 3
27656: NEG
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 3
27668: NEG
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 3
27680: NEG
27681: PUSH
27682: LD_INT 3
27684: NEG
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27721: LD_ADDR_VAR 0 42
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: LD_INT 1
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: LD_INT 1
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: LD_INT 0
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: NEG
27791: PUSH
27792: LD_INT 1
27794: NEG
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: LD_INT 2
27806: NEG
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: LD_INT 2
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: PUSH
27826: LD_INT 1
27828: NEG
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 2
27846: PUSH
27847: LD_INT 2
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 2
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: NEG
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 2
27899: NEG
27900: PUSH
27901: LD_INT 2
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 2
27911: NEG
27912: PUSH
27913: LD_INT 3
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: LD_INT 3
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: LD_INT 3
27938: NEG
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: LD_INT 2
27949: NEG
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 3
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 3
27967: PUSH
27968: LD_INT 3
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: LD_INT 3
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: LD_INT 3
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: LD_INT 3
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: LD_INT 2
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 3
28018: NEG
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 3
28030: NEG
28031: PUSH
28032: LD_INT 3
28034: NEG
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28071: LD_ADDR_VAR 0 43
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: LD_INT 1
28144: NEG
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: LD_INT 2
28156: NEG
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: LD_INT 2
28167: NEG
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 1
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: LD_INT 2
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: LD_INT 2
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 1
28226: NEG
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 2
28248: NEG
28249: PUSH
28250: LD_INT 1
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 1
28260: NEG
28261: PUSH
28262: LD_INT 3
28264: NEG
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: LD_INT 3
28275: NEG
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: LD_INT 2
28286: NEG
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 2
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 3
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 3
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: LD_INT 3
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 3
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: LD_INT 2
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 2
28356: NEG
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 3
28367: NEG
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 3
28378: NEG
28379: PUSH
28380: LD_INT 1
28382: NEG
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28419: LD_ADDR_VAR 0 44
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: NEG
28501: PUSH
28502: LD_INT 2
28504: NEG
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 2
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: LD_INT 2
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: LD_INT 1
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 2
28574: NEG
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 2
28585: NEG
28586: PUSH
28587: LD_INT 1
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 2
28597: NEG
28598: PUSH
28599: LD_INT 2
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: LD_INT 3
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 2
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 3
28632: PUSH
28633: LD_INT 0
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 3
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 3
28652: PUSH
28653: LD_INT 2
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 3
28662: PUSH
28663: LD_INT 3
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 2
28672: PUSH
28673: LD_INT 3
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 2
28682: NEG
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 3
28693: NEG
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 3
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 3
28716: NEG
28717: PUSH
28718: LD_INT 2
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 3
28728: NEG
28729: PUSH
28730: LD_INT 3
28732: NEG
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28769: LD_ADDR_VAR 0 45
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: LD_INT 0
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 1
28789: NEG
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 1
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: LD_INT 2
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: LD_INT 2
28865: NEG
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 2
28894: PUSH
28895: LD_INT 2
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 2
28935: NEG
28936: PUSH
28937: LD_INT 1
28939: NEG
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 2
28947: NEG
28948: PUSH
28949: LD_INT 2
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 2
28959: NEG
28960: PUSH
28961: LD_INT 3
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: LD_INT 3
28975: NEG
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: LD_INT 3
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 1
28994: PUSH
28995: LD_INT 2
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 3
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 3
29015: PUSH
29016: LD_INT 3
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 2
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: LD_INT 3
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: LD_INT 3
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: LD_INT 2
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 3
29066: NEG
29067: PUSH
29068: LD_INT 2
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 3
29078: NEG
29079: PUSH
29080: LD_INT 3
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29119: LD_ADDR_VAR 0 46
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: LD_INT 1
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: LD_INT 2
29215: NEG
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 2
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: LD_INT 2
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 1
29274: NEG
29275: PUSH
29276: LD_INT 1
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 2
29285: NEG
29286: PUSH
29287: LD_INT 0
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 2
29296: NEG
29297: PUSH
29298: LD_INT 1
29300: NEG
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 3
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: LD_INT 3
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: PUSH
29343: LD_INT 1
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 3
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 3
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: LD_INT 3
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 0
29383: PUSH
29384: LD_INT 3
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 1
29393: NEG
29394: PUSH
29395: LD_INT 2
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 3
29415: NEG
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 3
29426: NEG
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29467: LD_ADDR_VAR 0 47
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: LD_INT 1
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: LD_INT 1
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 1
29525: NEG
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 1
29540: NEG
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 1
29548: NEG
29549: PUSH
29550: LD_INT 2
29552: NEG
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 2
29563: NEG
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 1
29571: PUSH
29572: LD_INT 1
29574: NEG
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 2
29582: NEG
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 2
29594: NEG
29595: PUSH
29596: LD_INT 2
29598: NEG
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29618: LD_ADDR_VAR 0 48
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: LD_INT 1
29638: NEG
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 1
29646: PUSH
29647: LD_INT 0
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: LD_INT 1
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: LD_INT 2
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: LD_INT 2
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: LD_INT 1
29725: NEG
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 2
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 2
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29765: LD_ADDR_VAR 0 49
29769: PUSH
29770: LD_INT 0
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 1
29834: NEG
29835: PUSH
29836: LD_INT 1
29838: NEG
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: LD_INT 1
29849: NEG
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 2
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 2
29877: PUSH
29878: LD_INT 2
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: LD_INT 2
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29909: LD_ADDR_VAR 0 50
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 1
29967: NEG
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 1
29978: NEG
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 2
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 1
30010: PUSH
30011: LD_INT 2
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: LD_INT 2
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30053: LD_ADDR_VAR 0 51
30057: PUSH
30058: LD_INT 0
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 1
30111: NEG
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: NEG
30123: PUSH
30124: LD_INT 1
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: LD_INT 2
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 1
30154: NEG
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 2
30165: NEG
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 2
30176: NEG
30177: PUSH
30178: LD_INT 1
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30200: LD_ADDR_VAR 0 52
30204: PUSH
30205: LD_INT 0
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 0
30217: PUSH
30218: LD_INT 1
30220: NEG
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: LD_INT 0
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: NEG
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: NEG
30282: PUSH
30283: LD_INT 2
30285: NEG
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 2
30304: NEG
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 2
30315: NEG
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 2
30327: NEG
30328: PUSH
30329: LD_INT 2
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30351: LD_ADDR_VAR 0 53
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: LD_INT 1
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 0
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: LD_INT 0
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: LD_INT 1
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: LD_INT 2
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 2
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 2
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 2
30486: PUSH
30487: LD_INT 2
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: LD_INT 2
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 0
30506: PUSH
30507: LD_INT 2
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: LD_INT 1
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 2
30527: NEG
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 2
30550: NEG
30551: PUSH
30552: LD_INT 2
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30581: LD_ADDR_VAR 0 54
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: LD_INT 1
30601: NEG
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: LD_INT 0
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: LD_INT 1
30654: NEG
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 1
30662: NEG
30663: PUSH
30664: LD_INT 2
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: LD_INT 2
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 1
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: LD_INT 2
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 1
30746: NEG
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 2
30757: NEG
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 2
30768: NEG
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 2
30780: NEG
30781: PUSH
30782: LD_INT 2
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30811: LD_ADDR_VAR 0 55
30815: PUSH
30816: LD_INT 0
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: LD_INT 1
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: LD_INT 1
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 1
30880: NEG
30881: PUSH
30882: LD_INT 1
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 1
30892: NEG
30893: PUSH
30894: LD_INT 2
30896: NEG
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 0
30904: PUSH
30905: LD_INT 2
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 2
30946: PUSH
30947: LD_INT 2
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: LD_INT 2
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 2
30987: NEG
30988: PUSH
30989: LD_INT 0
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 2
30998: NEG
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 2
31010: NEG
31011: PUSH
31012: LD_INT 2
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31041: LD_ADDR_VAR 0 56
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: LD_INT 1
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: LD_INT 1
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: LD_INT 0
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: NEG
31123: PUSH
31124: LD_INT 2
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: LD_INT 2
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: LD_INT 1
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: LD_INT 1
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 1
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 0
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 2
31228: NEG
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: LD_INT 2
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31271: LD_ADDR_VAR 0 57
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: LD_INT 0
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 0
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 0
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: NEG
31353: PUSH
31354: LD_INT 2
31356: NEG
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 0
31364: PUSH
31365: LD_INT 2
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 2
31396: PUSH
31397: LD_INT 1
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 2
31406: PUSH
31407: LD_INT 2
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 0
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 2
31470: NEG
31471: PUSH
31472: LD_INT 2
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31501: LD_ADDR_VAR 0 58
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: LD_INT 1
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: LD_INT 1
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: LD_INT 0
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 1
31582: NEG
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 1
31605: PUSH
31606: LD_INT 1
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 2
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 2
31688: NEG
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: NEG
31701: PUSH
31702: LD_INT 2
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31731: LD_ADDR_VAR 0 59
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: LD_INT 1
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 1
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: LD_INT 1
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31819: LD_ADDR_VAR 0 60
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 0
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 1
31877: NEG
31878: PUSH
31879: LD_INT 0
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 1
31888: NEG
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31907: LD_ADDR_VAR 0 61
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 1
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 1
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: NEG
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31995: LD_ADDR_VAR 0 62
31999: PUSH
32000: LD_INT 0
32002: PUSH
32003: LD_INT 0
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 1
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: LD_INT 1
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32083: LD_ADDR_VAR 0 63
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 1
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 0
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 1
32141: NEG
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32171: LD_ADDR_VAR 0 64
32175: PUSH
32176: LD_INT 0
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 1
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 1
32229: NEG
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: ST_TO_ADDR
// end ; 1 :
32259: GO 38156
32261: LD_INT 1
32263: DOUBLE
32264: EQUAL
32265: IFTRUE 32269
32267: GO 34892
32269: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32270: LD_ADDR_VAR 0 11
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: LD_INT 3
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 3
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: LD_INT 2
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: LIST
32313: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32314: LD_ADDR_VAR 0 12
32318: PUSH
32319: LD_INT 2
32321: PUSH
32322: LD_INT 1
32324: NEG
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 3
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 3
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: LIST
32354: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32355: LD_ADDR_VAR 0 13
32359: PUSH
32360: LD_INT 3
32362: PUSH
32363: LD_INT 2
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 3
32372: PUSH
32373: LD_INT 3
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 2
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: LIST
32394: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32395: LD_ADDR_VAR 0 14
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: LD_INT 3
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: LD_INT 2
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32436: LD_ADDR_VAR 0 15
32440: PUSH
32441: LD_INT 2
32443: NEG
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 3
32454: NEG
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 3
32465: NEG
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: LIST
32479: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32480: LD_ADDR_VAR 0 16
32484: PUSH
32485: LD_INT 2
32487: NEG
32488: PUSH
32489: LD_INT 3
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 3
32499: NEG
32500: PUSH
32501: LD_INT 2
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 3
32511: NEG
32512: PUSH
32513: LD_INT 3
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32526: LD_ADDR_VAR 0 17
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: LD_INT 3
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: LD_INT 3
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: LD_INT 2
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: LIST
32569: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32570: LD_ADDR_VAR 0 18
32574: PUSH
32575: LD_INT 2
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 3
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 3
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: LIST
32610: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32611: LD_ADDR_VAR 0 19
32615: PUSH
32616: LD_INT 3
32618: PUSH
32619: LD_INT 2
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 3
32628: PUSH
32629: LD_INT 3
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 2
32638: PUSH
32639: LD_INT 3
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: LIST
32650: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32651: LD_ADDR_VAR 0 20
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: LD_INT 3
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: LD_INT 3
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: NEG
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: LIST
32691: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32692: LD_ADDR_VAR 0 21
32696: PUSH
32697: LD_INT 2
32699: NEG
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 3
32710: NEG
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 3
32721: NEG
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32736: LD_ADDR_VAR 0 22
32740: PUSH
32741: LD_INT 2
32743: NEG
32744: PUSH
32745: LD_INT 3
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 3
32755: NEG
32756: PUSH
32757: LD_INT 2
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 3
32767: NEG
32768: PUSH
32769: LD_INT 3
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: LIST
32781: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
32782: LD_ADDR_VAR 0 23
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: LD_INT 3
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: NEG
32801: PUSH
32802: LD_INT 4
32804: NEG
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: LD_INT 3
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
32826: LD_ADDR_VAR 0 24
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: LD_INT 0
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 3
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 4
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
32867: LD_ADDR_VAR 0 25
32871: PUSH
32872: LD_INT 3
32874: PUSH
32875: LD_INT 3
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 4
32884: PUSH
32885: LD_INT 3
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: LD_INT 4
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
32907: LD_ADDR_VAR 0 26
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 3
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: LD_INT 4
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: LD_INT 3
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: LIST
32947: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
32948: LD_ADDR_VAR 0 27
32952: PUSH
32953: LD_INT 3
32955: NEG
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 3
32966: NEG
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 4
32977: NEG
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: LIST
32991: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
32992: LD_ADDR_VAR 0 28
32996: PUSH
32997: LD_INT 3
32999: NEG
33000: PUSH
33001: LD_INT 3
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 3
33011: NEG
33012: PUSH
33013: LD_INT 4
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 4
33023: NEG
33024: PUSH
33025: LD_INT 3
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: LIST
33037: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
33038: LD_ADDR_VAR 0 29
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: LD_INT 3
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: LD_INT 3
33060: NEG
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: LD_INT 2
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 1
33079: NEG
33080: PUSH
33081: LD_INT 4
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: LD_INT 4
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: LD_INT 3
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: PUSH
33115: LD_INT 5
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 5
33128: NEG
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 4
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: LD_INT 6
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 6
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: LD_INT 5
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33193: LD_ADDR_VAR 0 30
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 3
33211: PUSH
33212: LD_INT 0
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 3
33221: PUSH
33222: LD_INT 1
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 3
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 4
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 4
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: LD_INT 1
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 5
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 5
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 5
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 6
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 6
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33336: LD_ADDR_VAR 0 31
33340: PUSH
33341: LD_INT 3
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 3
33353: PUSH
33354: LD_INT 3
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: LD_INT 3
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 4
33373: PUSH
33374: LD_INT 3
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 4
33383: PUSH
33384: LD_INT 4
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 3
33393: PUSH
33394: LD_INT 4
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 5
33403: PUSH
33404: LD_INT 4
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 5
33413: PUSH
33414: LD_INT 5
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 4
33423: PUSH
33424: LD_INT 5
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 6
33433: PUSH
33434: LD_INT 5
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 6
33443: PUSH
33444: LD_INT 6
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 5
33453: PUSH
33454: LD_INT 6
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
33475: LD_ADDR_VAR 0 32
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: LD_INT 3
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 3
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: PUSH
33514: LD_INT 4
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: LD_INT 4
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 1
33533: NEG
33534: PUSH
33535: LD_INT 3
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: LD_INT 5
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: LD_INT 5
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 1
33564: NEG
33565: PUSH
33566: LD_INT 4
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: LD_INT 6
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 6
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: LD_INT 5
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
33618: LD_ADDR_VAR 0 33
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 3
33636: NEG
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 3
33647: NEG
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 3
33659: NEG
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 4
33670: NEG
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 4
33681: NEG
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 4
33693: NEG
33694: PUSH
33695: LD_INT 1
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 5
33704: NEG
33705: PUSH
33706: LD_INT 0
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 5
33715: NEG
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 5
33727: NEG
33728: PUSH
33729: LD_INT 1
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 6
33738: NEG
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 6
33749: NEG
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
33773: LD_ADDR_VAR 0 34
33777: PUSH
33778: LD_INT 2
33780: NEG
33781: PUSH
33782: LD_INT 3
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: NEG
33793: PUSH
33794: LD_INT 2
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 3
33804: NEG
33805: PUSH
33806: LD_INT 3
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 3
33816: NEG
33817: PUSH
33818: LD_INT 4
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 4
33828: NEG
33829: PUSH
33830: LD_INT 3
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 4
33840: NEG
33841: PUSH
33842: LD_INT 4
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 4
33852: NEG
33853: PUSH
33854: LD_INT 5
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 5
33864: NEG
33865: PUSH
33866: LD_INT 4
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 5
33876: NEG
33877: PUSH
33878: LD_INT 5
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 5
33888: NEG
33889: PUSH
33890: LD_INT 6
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 6
33900: NEG
33901: PUSH
33902: LD_INT 5
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 6
33912: NEG
33913: PUSH
33914: LD_INT 6
33916: NEG
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
33936: LD_ADDR_VAR 0 41
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: LD_INT 2
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: NEG
33955: PUSH
33956: LD_INT 3
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 1
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: LIST
33979: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
33980: LD_ADDR_VAR 0 42
33984: PUSH
33985: LD_INT 2
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 2
33997: PUSH
33998: LD_INT 1
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 3
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
34021: LD_ADDR_VAR 0 43
34025: PUSH
34026: LD_INT 2
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 3
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 2
34048: PUSH
34049: LD_INT 3
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
34061: LD_ADDR_VAR 0 44
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 2
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: LD_INT 3
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34102: LD_ADDR_VAR 0 45
34106: PUSH
34107: LD_INT 2
34109: NEG
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 2
34120: NEG
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 3
34131: NEG
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: LIST
34145: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34146: LD_ADDR_VAR 0 46
34150: PUSH
34151: LD_INT 2
34153: NEG
34154: PUSH
34155: LD_INT 2
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 2
34165: NEG
34166: PUSH
34167: LD_INT 3
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 3
34177: NEG
34178: PUSH
34179: LD_INT 2
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: LIST
34191: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34192: LD_ADDR_VAR 0 47
34196: PUSH
34197: LD_INT 2
34199: NEG
34200: PUSH
34201: LD_INT 3
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PUSH
34213: LD_INT 3
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34225: LD_ADDR_VAR 0 48
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 2
34243: PUSH
34244: LD_INT 1
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34256: LD_ADDR_VAR 0 49
34260: PUSH
34261: LD_INT 3
34263: PUSH
34264: LD_INT 1
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 3
34273: PUSH
34274: LD_INT 2
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34285: LD_ADDR_VAR 0 50
34289: PUSH
34290: LD_INT 2
34292: PUSH
34293: LD_INT 3
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: PUSH
34303: LD_INT 3
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34314: LD_ADDR_VAR 0 51
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 2
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 2
34332: NEG
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34345: LD_ADDR_VAR 0 52
34349: PUSH
34350: LD_INT 3
34352: NEG
34353: PUSH
34354: LD_INT 1
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 3
34364: NEG
34365: PUSH
34366: LD_INT 2
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34378: LD_ADDR_VAR 0 53
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: LD_INT 3
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: LD_INT 3
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34422: LD_ADDR_VAR 0 54
34426: PUSH
34427: LD_INT 2
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 3
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 3
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: LIST
34462: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34463: LD_ADDR_VAR 0 55
34467: PUSH
34468: LD_INT 3
34470: PUSH
34471: LD_INT 2
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 3
34480: PUSH
34481: LD_INT 3
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: LIST
34502: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34503: LD_ADDR_VAR 0 56
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 3
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 0
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: LD_INT 2
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: LIST
34543: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34544: LD_ADDR_VAR 0 57
34548: PUSH
34549: LD_INT 2
34551: NEG
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 3
34562: NEG
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 3
34573: NEG
34574: PUSH
34575: LD_INT 1
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: LIST
34587: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34588: LD_ADDR_VAR 0 58
34592: PUSH
34593: LD_INT 2
34595: NEG
34596: PUSH
34597: LD_INT 3
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 3
34607: NEG
34608: PUSH
34609: LD_INT 2
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 3
34619: NEG
34620: PUSH
34621: LD_INT 3
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
34634: LD_ADDR_VAR 0 59
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: LD_INT 2
34645: NEG
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: LD_INT 2
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34678: LD_ADDR_VAR 0 60
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 2
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34719: LD_ADDR_VAR 0 61
34723: PUSH
34724: LD_INT 2
34726: PUSH
34727: LD_INT 1
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 2
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: LIST
34758: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34759: LD_ADDR_VAR 0 62
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: LD_INT 2
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 1
34786: NEG
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: LIST
34799: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34800: LD_ADDR_VAR 0 63
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 2
34818: NEG
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: NEG
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34844: LD_ADDR_VAR 0 64
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: LD_INT 2
34855: NEG
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 2
34863: NEG
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 2
34875: NEG
34876: PUSH
34877: LD_INT 2
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: ST_TO_ADDR
// end ; 2 :
34890: GO 38156
34892: LD_INT 2
34894: DOUBLE
34895: EQUAL
34896: IFTRUE 34900
34898: GO 38155
34900: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
34901: LD_ADDR_VAR 0 29
34905: PUSH
34906: LD_INT 4
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 4
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 5
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 5
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 4
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 3
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 3
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 3
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 5
34991: PUSH
34992: LD_INT 2
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 3
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 3
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 4
35021: PUSH
35022: LD_INT 3
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 4
35031: PUSH
35032: LD_INT 4
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 3
35041: PUSH
35042: LD_INT 4
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 3
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: LD_INT 2
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 4
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 4
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 0
35091: PUSH
35092: LD_INT 4
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: LD_INT 3
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: PUSH
35112: LD_INT 4
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: LD_INT 5
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: LD_INT 5
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: LD_INT 4
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: LD_INT 3
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: LD_INT 5
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: LD_INT 3
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 3
35184: NEG
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 3
35195: NEG
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 2
35207: NEG
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 2
35218: NEG
35219: PUSH
35220: LD_INT 1
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 3
35229: NEG
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 4
35240: NEG
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 4
35251: NEG
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 4
35263: NEG
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 2
35275: NEG
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 4
35286: NEG
35287: PUSH
35288: LD_INT 4
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 4
35298: NEG
35299: PUSH
35300: LD_INT 5
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 3
35310: NEG
35311: PUSH
35312: LD_INT 4
35314: NEG
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 3
35322: NEG
35323: PUSH
35324: LD_INT 3
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 4
35334: NEG
35335: PUSH
35336: LD_INT 3
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 5
35346: NEG
35347: PUSH
35348: LD_INT 4
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 5
35358: NEG
35359: PUSH
35360: LD_INT 5
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 3
35370: NEG
35371: PUSH
35372: LD_INT 5
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 5
35382: NEG
35383: PUSH
35384: LD_INT 3
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
35439: LD_ADDR_VAR 0 30
35443: PUSH
35444: LD_INT 4
35446: PUSH
35447: LD_INT 4
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 4
35456: PUSH
35457: LD_INT 3
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 5
35466: PUSH
35467: LD_INT 4
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 5
35476: PUSH
35477: LD_INT 5
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 4
35486: PUSH
35487: LD_INT 5
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 3
35496: PUSH
35497: LD_INT 4
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 3
35506: PUSH
35507: LD_INT 3
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 5
35516: PUSH
35517: LD_INT 3
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 3
35526: PUSH
35527: LD_INT 5
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: LD_INT 3
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: LD_INT 2
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: LD_INT 3
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: LD_INT 4
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 4
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: LD_INT 3
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: LD_INT 2
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: LD_INT 4
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 2
35618: NEG
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 4
35629: NEG
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 4
35640: NEG
35641: PUSH
35642: LD_INT 1
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 3
35652: NEG
35653: PUSH
35654: LD_INT 0
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 3
35663: NEG
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 4
35674: NEG
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 5
35685: NEG
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 5
35696: NEG
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 5
35708: NEG
35709: PUSH
35710: LD_INT 2
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 3
35720: NEG
35721: PUSH
35722: LD_INT 2
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 3
35731: NEG
35732: PUSH
35733: LD_INT 3
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 3
35743: NEG
35744: PUSH
35745: LD_INT 4
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: NEG
35756: PUSH
35757: LD_INT 3
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: NEG
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 3
35779: NEG
35780: PUSH
35781: LD_INT 2
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 4
35791: NEG
35792: PUSH
35793: LD_INT 3
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 4
35803: NEG
35804: PUSH
35805: LD_INT 4
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: NEG
35816: PUSH
35817: LD_INT 4
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 4
35827: NEG
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 0
35839: PUSH
35840: LD_INT 4
35842: NEG
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: LD_INT 5
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: LD_INT 4
35864: NEG
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: LD_INT 3
35875: NEG
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: LD_INT 3
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 4
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: LD_INT 5
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: LD_INT 3
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 2
35929: NEG
35930: PUSH
35931: LD_INT 5
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
35986: LD_ADDR_VAR 0 31
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: LD_INT 4
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: LD_INT 3
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: LD_INT 4
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 5
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 5
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 4
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 3
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: LD_INT 5
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 2
36075: NEG
36076: PUSH
36077: LD_INT 3
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 3
36086: NEG
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 3
36097: NEG
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 2
36109: NEG
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: NEG
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 3
36131: NEG
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 4
36142: NEG
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 4
36153: NEG
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 4
36165: NEG
36166: PUSH
36167: LD_INT 2
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 2
36177: NEG
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 4
36188: NEG
36189: PUSH
36190: LD_INT 4
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 4
36200: NEG
36201: PUSH
36202: LD_INT 5
36204: NEG
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 3
36212: NEG
36213: PUSH
36214: LD_INT 4
36216: NEG
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 3
36224: NEG
36225: PUSH
36226: LD_INT 3
36228: NEG
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 4
36236: NEG
36237: PUSH
36238: LD_INT 3
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 5
36248: NEG
36249: PUSH
36250: LD_INT 4
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 5
36260: NEG
36261: PUSH
36262: LD_INT 5
36264: NEG
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 3
36272: NEG
36273: PUSH
36274: LD_INT 5
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 5
36284: NEG
36285: PUSH
36286: LD_INT 3
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: LD_INT 3
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 4
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: LD_INT 3
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: LD_INT 2
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: LD_INT 2
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 1
36351: NEG
36352: PUSH
36353: LD_INT 3
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: LD_INT 4
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 2
36375: PUSH
36376: LD_INT 2
36378: NEG
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 2
36386: NEG
36387: PUSH
36388: LD_INT 4
36390: NEG
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 4
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 4
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 5
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 5
36429: PUSH
36430: LD_INT 1
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 4
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 3
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 3
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 3
36470: PUSH
36471: LD_INT 2
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 5
36481: PUSH
36482: LD_INT 2
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
36536: LD_ADDR_VAR 0 32
36540: PUSH
36541: LD_INT 4
36543: NEG
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 4
36554: NEG
36555: PUSH
36556: LD_INT 1
36558: NEG
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 3
36566: NEG
36567: PUSH
36568: LD_INT 0
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 3
36577: NEG
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 4
36588: NEG
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 5
36599: NEG
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 5
36610: NEG
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 5
36622: NEG
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 3
36634: NEG
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 3
36645: NEG
36646: PUSH
36647: LD_INT 3
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 3
36657: NEG
36658: PUSH
36659: LD_INT 4
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 2
36669: NEG
36670: PUSH
36671: LD_INT 3
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: NEG
36682: PUSH
36683: LD_INT 2
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 3
36693: NEG
36694: PUSH
36695: LD_INT 2
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 4
36705: NEG
36706: PUSH
36707: LD_INT 3
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 4
36717: NEG
36718: PUSH
36719: LD_INT 4
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 2
36729: NEG
36730: PUSH
36731: LD_INT 4
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 4
36741: NEG
36742: PUSH
36743: LD_INT 2
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 0
36753: PUSH
36754: LD_INT 4
36756: NEG
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: LD_INT 5
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: PUSH
36776: LD_INT 4
36778: NEG
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: LD_INT 3
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: LD_INT 3
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: LD_INT 4
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: LD_INT 5
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: LD_INT 3
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 2
36843: NEG
36844: PUSH
36845: LD_INT 5
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 3
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 3
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 4
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 4
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 3
36896: PUSH
36897: LD_INT 1
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: LD_INT 1
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 4
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 4
36948: PUSH
36949: LD_INT 4
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 4
36958: PUSH
36959: LD_INT 3
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 5
36968: PUSH
36969: LD_INT 4
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 5
36978: PUSH
36979: LD_INT 5
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 4
36988: PUSH
36989: LD_INT 5
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 3
36998: PUSH
36999: LD_INT 4
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 3
37008: PUSH
37009: LD_INT 3
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 5
37018: PUSH
37019: LD_INT 3
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 3
37028: PUSH
37029: LD_INT 5
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
37083: LD_ADDR_VAR 0 33
37087: PUSH
37088: LD_INT 4
37090: NEG
37091: PUSH
37092: LD_INT 4
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 4
37102: NEG
37103: PUSH
37104: LD_INT 5
37106: NEG
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 3
37114: NEG
37115: PUSH
37116: LD_INT 4
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 3
37126: NEG
37127: PUSH
37128: LD_INT 3
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 4
37138: NEG
37139: PUSH
37140: LD_INT 3
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 5
37150: NEG
37151: PUSH
37152: LD_INT 4
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 5
37162: NEG
37163: PUSH
37164: LD_INT 5
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 3
37174: NEG
37175: PUSH
37176: LD_INT 5
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 5
37186: NEG
37187: PUSH
37188: LD_INT 3
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: LD_INT 3
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: LD_INT 4
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 3
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: LD_INT 2
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 2
37245: NEG
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: LD_INT 3
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: LD_INT 4
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 2
37277: PUSH
37278: LD_INT 2
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 2
37288: NEG
37289: PUSH
37290: LD_INT 4
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 4
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 4
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 5
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 5
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 4
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 3
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 3
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 3
37372: PUSH
37373: LD_INT 2
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 5
37383: PUSH
37384: LD_INT 2
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 3
37393: PUSH
37394: LD_INT 3
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 3
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 4
37413: PUSH
37414: LD_INT 3
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 4
37423: PUSH
37424: LD_INT 4
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 3
37433: PUSH
37434: LD_INT 4
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: LD_INT 3
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: LD_INT 2
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 4
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: LD_INT 4
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 4
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: LD_INT 3
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 1
37503: PUSH
37504: LD_INT 4
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: LD_INT 5
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: LD_INT 5
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 1
37533: NEG
37534: PUSH
37535: LD_INT 4
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: LD_INT 3
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: LD_INT 5
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 2
37565: NEG
37566: PUSH
37567: LD_INT 3
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
37621: LD_ADDR_VAR 0 34
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 4
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: LD_INT 5
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: LD_INT 4
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: LD_INT 3
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: LD_INT 3
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: LD_INT 4
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: LD_INT 5
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: LD_INT 3
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: LD_INT 5
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 3
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 3
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 4
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 4
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 3
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: LD_INT 1
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: LD_INT 2
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 4
37813: PUSH
37814: LD_INT 2
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 4
37823: PUSH
37824: LD_INT 4
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 4
37833: PUSH
37834: LD_INT 3
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 5
37843: PUSH
37844: LD_INT 4
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 5
37853: PUSH
37854: LD_INT 5
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 4
37863: PUSH
37864: LD_INT 5
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 3
37873: PUSH
37874: LD_INT 4
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 3
37883: PUSH
37884: LD_INT 3
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 5
37893: PUSH
37894: LD_INT 3
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 3
37903: PUSH
37904: LD_INT 5
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 3
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: LD_INT 2
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: LD_INT 3
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: LD_INT 4
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 4
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: LD_INT 3
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: NEG
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 2
37985: PUSH
37986: LD_INT 4
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 2
37995: NEG
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 4
38006: NEG
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 4
38017: NEG
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 3
38029: NEG
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 3
38040: NEG
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 4
38051: NEG
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 5
38062: NEG
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 5
38073: NEG
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 5
38085: NEG
38086: PUSH
38087: LD_INT 2
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 3
38097: NEG
38098: PUSH
38099: LD_INT 2
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: ST_TO_ADDR
// end ; end ;
38153: GO 38156
38155: POP
// case btype of b_depot , b_warehouse :
38156: LD_VAR 0 1
38160: PUSH
38161: LD_INT 0
38163: DOUBLE
38164: EQUAL
38165: IFTRUE 38175
38167: LD_INT 1
38169: DOUBLE
38170: EQUAL
38171: IFTRUE 38175
38173: GO 38376
38175: POP
// case nation of nation_american :
38176: LD_VAR 0 5
38180: PUSH
38181: LD_INT 1
38183: DOUBLE
38184: EQUAL
38185: IFTRUE 38189
38187: GO 38245
38189: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38190: LD_ADDR_VAR 0 9
38194: PUSH
38195: LD_VAR 0 11
38199: PUSH
38200: LD_VAR 0 12
38204: PUSH
38205: LD_VAR 0 13
38209: PUSH
38210: LD_VAR 0 14
38214: PUSH
38215: LD_VAR 0 15
38219: PUSH
38220: LD_VAR 0 16
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: PUSH
38233: LD_VAR 0 4
38237: PUSH
38238: LD_INT 1
38240: PLUS
38241: ARRAY
38242: ST_TO_ADDR
38243: GO 38374
38245: LD_INT 2
38247: DOUBLE
38248: EQUAL
38249: IFTRUE 38253
38251: GO 38309
38253: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38254: LD_ADDR_VAR 0 9
38258: PUSH
38259: LD_VAR 0 17
38263: PUSH
38264: LD_VAR 0 18
38268: PUSH
38269: LD_VAR 0 19
38273: PUSH
38274: LD_VAR 0 20
38278: PUSH
38279: LD_VAR 0 21
38283: PUSH
38284: LD_VAR 0 22
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: PUSH
38297: LD_VAR 0 4
38301: PUSH
38302: LD_INT 1
38304: PLUS
38305: ARRAY
38306: ST_TO_ADDR
38307: GO 38374
38309: LD_INT 3
38311: DOUBLE
38312: EQUAL
38313: IFTRUE 38317
38315: GO 38373
38317: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38318: LD_ADDR_VAR 0 9
38322: PUSH
38323: LD_VAR 0 23
38327: PUSH
38328: LD_VAR 0 24
38332: PUSH
38333: LD_VAR 0 25
38337: PUSH
38338: LD_VAR 0 26
38342: PUSH
38343: LD_VAR 0 27
38347: PUSH
38348: LD_VAR 0 28
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: PUSH
38361: LD_VAR 0 4
38365: PUSH
38366: LD_INT 1
38368: PLUS
38369: ARRAY
38370: ST_TO_ADDR
38371: GO 38374
38373: POP
38374: GO 38929
38376: LD_INT 2
38378: DOUBLE
38379: EQUAL
38380: IFTRUE 38390
38382: LD_INT 3
38384: DOUBLE
38385: EQUAL
38386: IFTRUE 38390
38388: GO 38446
38390: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38391: LD_ADDR_VAR 0 9
38395: PUSH
38396: LD_VAR 0 29
38400: PUSH
38401: LD_VAR 0 30
38405: PUSH
38406: LD_VAR 0 31
38410: PUSH
38411: LD_VAR 0 32
38415: PUSH
38416: LD_VAR 0 33
38420: PUSH
38421: LD_VAR 0 34
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: PUSH
38434: LD_VAR 0 4
38438: PUSH
38439: LD_INT 1
38441: PLUS
38442: ARRAY
38443: ST_TO_ADDR
38444: GO 38929
38446: LD_INT 16
38448: DOUBLE
38449: EQUAL
38450: IFTRUE 38508
38452: LD_INT 17
38454: DOUBLE
38455: EQUAL
38456: IFTRUE 38508
38458: LD_INT 18
38460: DOUBLE
38461: EQUAL
38462: IFTRUE 38508
38464: LD_INT 19
38466: DOUBLE
38467: EQUAL
38468: IFTRUE 38508
38470: LD_INT 22
38472: DOUBLE
38473: EQUAL
38474: IFTRUE 38508
38476: LD_INT 20
38478: DOUBLE
38479: EQUAL
38480: IFTRUE 38508
38482: LD_INT 21
38484: DOUBLE
38485: EQUAL
38486: IFTRUE 38508
38488: LD_INT 23
38490: DOUBLE
38491: EQUAL
38492: IFTRUE 38508
38494: LD_INT 24
38496: DOUBLE
38497: EQUAL
38498: IFTRUE 38508
38500: LD_INT 25
38502: DOUBLE
38503: EQUAL
38504: IFTRUE 38508
38506: GO 38564
38508: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
38509: LD_ADDR_VAR 0 9
38513: PUSH
38514: LD_VAR 0 35
38518: PUSH
38519: LD_VAR 0 36
38523: PUSH
38524: LD_VAR 0 37
38528: PUSH
38529: LD_VAR 0 38
38533: PUSH
38534: LD_VAR 0 39
38538: PUSH
38539: LD_VAR 0 40
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: PUSH
38552: LD_VAR 0 4
38556: PUSH
38557: LD_INT 1
38559: PLUS
38560: ARRAY
38561: ST_TO_ADDR
38562: GO 38929
38564: LD_INT 6
38566: DOUBLE
38567: EQUAL
38568: IFTRUE 38620
38570: LD_INT 7
38572: DOUBLE
38573: EQUAL
38574: IFTRUE 38620
38576: LD_INT 8
38578: DOUBLE
38579: EQUAL
38580: IFTRUE 38620
38582: LD_INT 13
38584: DOUBLE
38585: EQUAL
38586: IFTRUE 38620
38588: LD_INT 12
38590: DOUBLE
38591: EQUAL
38592: IFTRUE 38620
38594: LD_INT 15
38596: DOUBLE
38597: EQUAL
38598: IFTRUE 38620
38600: LD_INT 11
38602: DOUBLE
38603: EQUAL
38604: IFTRUE 38620
38606: LD_INT 14
38608: DOUBLE
38609: EQUAL
38610: IFTRUE 38620
38612: LD_INT 10
38614: DOUBLE
38615: EQUAL
38616: IFTRUE 38620
38618: GO 38676
38620: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
38621: LD_ADDR_VAR 0 9
38625: PUSH
38626: LD_VAR 0 41
38630: PUSH
38631: LD_VAR 0 42
38635: PUSH
38636: LD_VAR 0 43
38640: PUSH
38641: LD_VAR 0 44
38645: PUSH
38646: LD_VAR 0 45
38650: PUSH
38651: LD_VAR 0 46
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: PUSH
38664: LD_VAR 0 4
38668: PUSH
38669: LD_INT 1
38671: PLUS
38672: ARRAY
38673: ST_TO_ADDR
38674: GO 38929
38676: LD_INT 36
38678: DOUBLE
38679: EQUAL
38680: IFTRUE 38684
38682: GO 38740
38684: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
38685: LD_ADDR_VAR 0 9
38689: PUSH
38690: LD_VAR 0 47
38694: PUSH
38695: LD_VAR 0 48
38699: PUSH
38700: LD_VAR 0 49
38704: PUSH
38705: LD_VAR 0 50
38709: PUSH
38710: LD_VAR 0 51
38714: PUSH
38715: LD_VAR 0 52
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: PUSH
38728: LD_VAR 0 4
38732: PUSH
38733: LD_INT 1
38735: PLUS
38736: ARRAY
38737: ST_TO_ADDR
38738: GO 38929
38740: LD_INT 4
38742: DOUBLE
38743: EQUAL
38744: IFTRUE 38766
38746: LD_INT 5
38748: DOUBLE
38749: EQUAL
38750: IFTRUE 38766
38752: LD_INT 34
38754: DOUBLE
38755: EQUAL
38756: IFTRUE 38766
38758: LD_INT 37
38760: DOUBLE
38761: EQUAL
38762: IFTRUE 38766
38764: GO 38822
38766: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
38767: LD_ADDR_VAR 0 9
38771: PUSH
38772: LD_VAR 0 53
38776: PUSH
38777: LD_VAR 0 54
38781: PUSH
38782: LD_VAR 0 55
38786: PUSH
38787: LD_VAR 0 56
38791: PUSH
38792: LD_VAR 0 57
38796: PUSH
38797: LD_VAR 0 58
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: PUSH
38810: LD_VAR 0 4
38814: PUSH
38815: LD_INT 1
38817: PLUS
38818: ARRAY
38819: ST_TO_ADDR
38820: GO 38929
38822: LD_INT 31
38824: DOUBLE
38825: EQUAL
38826: IFTRUE 38872
38828: LD_INT 32
38830: DOUBLE
38831: EQUAL
38832: IFTRUE 38872
38834: LD_INT 33
38836: DOUBLE
38837: EQUAL
38838: IFTRUE 38872
38840: LD_INT 27
38842: DOUBLE
38843: EQUAL
38844: IFTRUE 38872
38846: LD_INT 26
38848: DOUBLE
38849: EQUAL
38850: IFTRUE 38872
38852: LD_INT 28
38854: DOUBLE
38855: EQUAL
38856: IFTRUE 38872
38858: LD_INT 29
38860: DOUBLE
38861: EQUAL
38862: IFTRUE 38872
38864: LD_INT 30
38866: DOUBLE
38867: EQUAL
38868: IFTRUE 38872
38870: GO 38928
38872: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
38873: LD_ADDR_VAR 0 9
38877: PUSH
38878: LD_VAR 0 59
38882: PUSH
38883: LD_VAR 0 60
38887: PUSH
38888: LD_VAR 0 61
38892: PUSH
38893: LD_VAR 0 62
38897: PUSH
38898: LD_VAR 0 63
38902: PUSH
38903: LD_VAR 0 64
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: PUSH
38916: LD_VAR 0 4
38920: PUSH
38921: LD_INT 1
38923: PLUS
38924: ARRAY
38925: ST_TO_ADDR
38926: GO 38929
38928: POP
// temp_list2 = [ ] ;
38929: LD_ADDR_VAR 0 10
38933: PUSH
38934: EMPTY
38935: ST_TO_ADDR
// for i in temp_list do
38936: LD_ADDR_VAR 0 8
38940: PUSH
38941: LD_VAR 0 9
38945: PUSH
38946: FOR_IN
38947: IFFALSE 38999
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
38949: LD_ADDR_VAR 0 10
38953: PUSH
38954: LD_VAR 0 10
38958: PUSH
38959: LD_VAR 0 8
38963: PUSH
38964: LD_INT 1
38966: ARRAY
38967: PUSH
38968: LD_VAR 0 2
38972: PLUS
38973: PUSH
38974: LD_VAR 0 8
38978: PUSH
38979: LD_INT 2
38981: ARRAY
38982: PUSH
38983: LD_VAR 0 3
38987: PLUS
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: EMPTY
38994: LIST
38995: ADD
38996: ST_TO_ADDR
38997: GO 38946
38999: POP
39000: POP
// result = temp_list2 ;
39001: LD_ADDR_VAR 0 7
39005: PUSH
39006: LD_VAR 0 10
39010: ST_TO_ADDR
// end ;
39011: LD_VAR 0 7
39015: RET
// export function EnemyInRange ( unit , dist ) ; begin
39016: LD_INT 0
39018: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
39019: LD_ADDR_VAR 0 3
39023: PUSH
39024: LD_VAR 0 1
39028: PPUSH
39029: CALL_OW 255
39033: PPUSH
39034: LD_VAR 0 1
39038: PPUSH
39039: CALL_OW 250
39043: PPUSH
39044: LD_VAR 0 1
39048: PPUSH
39049: CALL_OW 251
39053: PPUSH
39054: LD_VAR 0 2
39058: PPUSH
39059: CALL 12412 0 4
39063: PUSH
39064: LD_INT 4
39066: ARRAY
39067: ST_TO_ADDR
// end ;
39068: LD_VAR 0 3
39072: RET
// export function PlayerSeeMe ( unit ) ; begin
39073: LD_INT 0
39075: PPUSH
// result := See ( your_side , unit ) ;
39076: LD_ADDR_VAR 0 2
39080: PUSH
39081: LD_OWVAR 2
39085: PPUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: CALL_OW 292
39095: ST_TO_ADDR
// end ;
39096: LD_VAR 0 2
39100: RET
// export function ReverseDir ( unit ) ; begin
39101: LD_INT 0
39103: PPUSH
// if not unit then
39104: LD_VAR 0 1
39108: NOT
39109: IFFALSE 39113
// exit ;
39111: GO 39136
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
39113: LD_ADDR_VAR 0 2
39117: PUSH
39118: LD_VAR 0 1
39122: PPUSH
39123: CALL_OW 254
39127: PUSH
39128: LD_INT 3
39130: PLUS
39131: PUSH
39132: LD_INT 6
39134: MOD
39135: ST_TO_ADDR
// end ;
39136: LD_VAR 0 2
39140: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
39141: LD_INT 0
39143: PPUSH
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
// if not unit or not hexes then
39149: LD_VAR 0 1
39153: NOT
39154: PUSH
39155: LD_VAR 0 2
39159: NOT
39160: OR
39161: IFFALSE 39165
// exit ;
39163: GO 39288
// dist := 9999 ;
39165: LD_ADDR_VAR 0 5
39169: PUSH
39170: LD_INT 9999
39172: ST_TO_ADDR
// for i = 1 to hexes do
39173: LD_ADDR_VAR 0 4
39177: PUSH
39178: DOUBLE
39179: LD_INT 1
39181: DEC
39182: ST_TO_ADDR
39183: LD_VAR 0 2
39187: PUSH
39188: FOR_TO
39189: IFFALSE 39276
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39191: LD_ADDR_VAR 0 6
39195: PUSH
39196: LD_VAR 0 1
39200: PPUSH
39201: LD_VAR 0 2
39205: PUSH
39206: LD_VAR 0 4
39210: ARRAY
39211: PUSH
39212: LD_INT 1
39214: ARRAY
39215: PPUSH
39216: LD_VAR 0 2
39220: PUSH
39221: LD_VAR 0 4
39225: ARRAY
39226: PUSH
39227: LD_INT 2
39229: ARRAY
39230: PPUSH
39231: CALL_OW 297
39235: ST_TO_ADDR
// if tdist < dist then
39236: LD_VAR 0 6
39240: PUSH
39241: LD_VAR 0 5
39245: LESS
39246: IFFALSE 39274
// begin hex := hexes [ i ] ;
39248: LD_ADDR_VAR 0 8
39252: PUSH
39253: LD_VAR 0 2
39257: PUSH
39258: LD_VAR 0 4
39262: ARRAY
39263: ST_TO_ADDR
// dist := tdist ;
39264: LD_ADDR_VAR 0 5
39268: PUSH
39269: LD_VAR 0 6
39273: ST_TO_ADDR
// end ; end ;
39274: GO 39188
39276: POP
39277: POP
// result := hex ;
39278: LD_ADDR_VAR 0 3
39282: PUSH
39283: LD_VAR 0 8
39287: ST_TO_ADDR
// end ;
39288: LD_VAR 0 3
39292: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39293: LD_INT 0
39295: PPUSH
39296: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39297: LD_VAR 0 1
39301: NOT
39302: PUSH
39303: LD_VAR 0 1
39307: PUSH
39308: LD_INT 21
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 23
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PPUSH
39332: CALL_OW 69
39336: IN
39337: NOT
39338: OR
39339: IFFALSE 39343
// exit ;
39341: GO 39390
// for i = 1 to 3 do
39343: LD_ADDR_VAR 0 3
39347: PUSH
39348: DOUBLE
39349: LD_INT 1
39351: DEC
39352: ST_TO_ADDR
39353: LD_INT 3
39355: PUSH
39356: FOR_TO
39357: IFFALSE 39388
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
39359: LD_VAR 0 1
39363: PPUSH
39364: CALL_OW 250
39368: PPUSH
39369: LD_VAR 0 1
39373: PPUSH
39374: CALL_OW 251
39378: PPUSH
39379: LD_INT 1
39381: PPUSH
39382: CALL_OW 453
39386: GO 39356
39388: POP
39389: POP
// end ;
39390: LD_VAR 0 2
39394: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
39395: LD_INT 0
39397: PPUSH
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
39402: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
39403: LD_VAR 0 1
39407: NOT
39408: PUSH
39409: LD_VAR 0 2
39413: NOT
39414: OR
39415: PUSH
39416: LD_VAR 0 1
39420: PPUSH
39421: CALL_OW 314
39425: OR
39426: IFFALSE 39430
// exit ;
39428: GO 39871
// x := GetX ( enemy_unit ) ;
39430: LD_ADDR_VAR 0 7
39434: PUSH
39435: LD_VAR 0 2
39439: PPUSH
39440: CALL_OW 250
39444: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
39445: LD_ADDR_VAR 0 8
39449: PUSH
39450: LD_VAR 0 2
39454: PPUSH
39455: CALL_OW 251
39459: ST_TO_ADDR
// if not x or not y then
39460: LD_VAR 0 7
39464: NOT
39465: PUSH
39466: LD_VAR 0 8
39470: NOT
39471: OR
39472: IFFALSE 39476
// exit ;
39474: GO 39871
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
39476: LD_ADDR_VAR 0 6
39480: PUSH
39481: LD_VAR 0 7
39485: PPUSH
39486: LD_INT 0
39488: PPUSH
39489: LD_INT 4
39491: PPUSH
39492: CALL_OW 272
39496: PUSH
39497: LD_VAR 0 8
39501: PPUSH
39502: LD_INT 0
39504: PPUSH
39505: LD_INT 4
39507: PPUSH
39508: CALL_OW 273
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_VAR 0 7
39521: PPUSH
39522: LD_INT 1
39524: PPUSH
39525: LD_INT 4
39527: PPUSH
39528: CALL_OW 272
39532: PUSH
39533: LD_VAR 0 8
39537: PPUSH
39538: LD_INT 1
39540: PPUSH
39541: LD_INT 4
39543: PPUSH
39544: CALL_OW 273
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_VAR 0 7
39557: PPUSH
39558: LD_INT 2
39560: PPUSH
39561: LD_INT 4
39563: PPUSH
39564: CALL_OW 272
39568: PUSH
39569: LD_VAR 0 8
39573: PPUSH
39574: LD_INT 2
39576: PPUSH
39577: LD_INT 4
39579: PPUSH
39580: CALL_OW 273
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_VAR 0 7
39593: PPUSH
39594: LD_INT 3
39596: PPUSH
39597: LD_INT 4
39599: PPUSH
39600: CALL_OW 272
39604: PUSH
39605: LD_VAR 0 8
39609: PPUSH
39610: LD_INT 3
39612: PPUSH
39613: LD_INT 4
39615: PPUSH
39616: CALL_OW 273
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_VAR 0 7
39629: PPUSH
39630: LD_INT 4
39632: PPUSH
39633: LD_INT 4
39635: PPUSH
39636: CALL_OW 272
39640: PUSH
39641: LD_VAR 0 8
39645: PPUSH
39646: LD_INT 4
39648: PPUSH
39649: LD_INT 4
39651: PPUSH
39652: CALL_OW 273
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_VAR 0 7
39665: PPUSH
39666: LD_INT 5
39668: PPUSH
39669: LD_INT 4
39671: PPUSH
39672: CALL_OW 272
39676: PUSH
39677: LD_VAR 0 8
39681: PPUSH
39682: LD_INT 5
39684: PPUSH
39685: LD_INT 4
39687: PPUSH
39688: CALL_OW 273
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: ST_TO_ADDR
// for i = tmp downto 1 do
39705: LD_ADDR_VAR 0 4
39709: PUSH
39710: DOUBLE
39711: LD_VAR 0 6
39715: INC
39716: ST_TO_ADDR
39717: LD_INT 1
39719: PUSH
39720: FOR_DOWNTO
39721: IFFALSE 39822
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
39723: LD_VAR 0 6
39727: PUSH
39728: LD_VAR 0 4
39732: ARRAY
39733: PUSH
39734: LD_INT 1
39736: ARRAY
39737: PPUSH
39738: LD_VAR 0 6
39742: PUSH
39743: LD_VAR 0 4
39747: ARRAY
39748: PUSH
39749: LD_INT 2
39751: ARRAY
39752: PPUSH
39753: CALL_OW 488
39757: NOT
39758: PUSH
39759: LD_VAR 0 6
39763: PUSH
39764: LD_VAR 0 4
39768: ARRAY
39769: PUSH
39770: LD_INT 1
39772: ARRAY
39773: PPUSH
39774: LD_VAR 0 6
39778: PUSH
39779: LD_VAR 0 4
39783: ARRAY
39784: PUSH
39785: LD_INT 2
39787: ARRAY
39788: PPUSH
39789: CALL_OW 428
39793: PUSH
39794: LD_INT 0
39796: NONEQUAL
39797: OR
39798: IFFALSE 39820
// tmp := Delete ( tmp , i ) ;
39800: LD_ADDR_VAR 0 6
39804: PUSH
39805: LD_VAR 0 6
39809: PPUSH
39810: LD_VAR 0 4
39814: PPUSH
39815: CALL_OW 3
39819: ST_TO_ADDR
39820: GO 39720
39822: POP
39823: POP
// j := GetClosestHex ( unit , tmp ) ;
39824: LD_ADDR_VAR 0 5
39828: PUSH
39829: LD_VAR 0 1
39833: PPUSH
39834: LD_VAR 0 6
39838: PPUSH
39839: CALL 39141 0 2
39843: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
39844: LD_VAR 0 1
39848: PPUSH
39849: LD_VAR 0 5
39853: PUSH
39854: LD_INT 1
39856: ARRAY
39857: PPUSH
39858: LD_VAR 0 5
39862: PUSH
39863: LD_INT 2
39865: ARRAY
39866: PPUSH
39867: CALL_OW 111
// end ;
39871: LD_VAR 0 3
39875: RET
// export function PrepareApemanSoldier ( ) ; begin
39876: LD_INT 0
39878: PPUSH
// uc_nation := 0 ;
39879: LD_ADDR_OWVAR 21
39883: PUSH
39884: LD_INT 0
39886: ST_TO_ADDR
// hc_sex := sex_male ;
39887: LD_ADDR_OWVAR 27
39891: PUSH
39892: LD_INT 1
39894: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
39895: LD_ADDR_OWVAR 28
39899: PUSH
39900: LD_INT 15
39902: ST_TO_ADDR
// hc_gallery :=  ;
39903: LD_ADDR_OWVAR 33
39907: PUSH
39908: LD_STRING 
39910: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
39911: LD_ADDR_OWVAR 31
39915: PUSH
39916: LD_INT 0
39918: PPUSH
39919: LD_INT 3
39921: PPUSH
39922: CALL_OW 12
39926: PUSH
39927: LD_INT 0
39929: PPUSH
39930: LD_INT 3
39932: PPUSH
39933: CALL_OW 12
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: ST_TO_ADDR
// end ;
39950: LD_VAR 0 1
39954: RET
// export function PrepareApemanEngineer ( ) ; begin
39955: LD_INT 0
39957: PPUSH
// uc_nation := 0 ;
39958: LD_ADDR_OWVAR 21
39962: PUSH
39963: LD_INT 0
39965: ST_TO_ADDR
// hc_sex := sex_male ;
39966: LD_ADDR_OWVAR 27
39970: PUSH
39971: LD_INT 1
39973: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
39974: LD_ADDR_OWVAR 28
39978: PUSH
39979: LD_INT 16
39981: ST_TO_ADDR
// hc_gallery :=  ;
39982: LD_ADDR_OWVAR 33
39986: PUSH
39987: LD_STRING 
39989: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
39990: LD_ADDR_OWVAR 31
39994: PUSH
39995: LD_INT 0
39997: PPUSH
39998: LD_INT 3
40000: PPUSH
40001: CALL_OW 12
40005: PUSH
40006: LD_INT 0
40008: PPUSH
40009: LD_INT 3
40011: PPUSH
40012: CALL_OW 12
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: ST_TO_ADDR
// end ;
40029: LD_VAR 0 1
40033: RET
// export function PrepareApeman ( agressivity ) ; begin
40034: LD_INT 0
40036: PPUSH
// uc_side := 0 ;
40037: LD_ADDR_OWVAR 20
40041: PUSH
40042: LD_INT 0
40044: ST_TO_ADDR
// uc_nation := 0 ;
40045: LD_ADDR_OWVAR 21
40049: PUSH
40050: LD_INT 0
40052: ST_TO_ADDR
// hc_sex := sex_male ;
40053: LD_ADDR_OWVAR 27
40057: PUSH
40058: LD_INT 1
40060: ST_TO_ADDR
// hc_class := class_apeman ;
40061: LD_ADDR_OWVAR 28
40065: PUSH
40066: LD_INT 12
40068: ST_TO_ADDR
// hc_gallery :=  ;
40069: LD_ADDR_OWVAR 33
40073: PUSH
40074: LD_STRING 
40076: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40077: LD_ADDR_OWVAR 35
40081: PUSH
40082: LD_VAR 0 1
40086: NEG
40087: PPUSH
40088: LD_VAR 0 1
40092: PPUSH
40093: CALL_OW 12
40097: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40098: LD_ADDR_OWVAR 31
40102: PUSH
40103: LD_INT 0
40105: PPUSH
40106: LD_INT 3
40108: PPUSH
40109: CALL_OW 12
40113: PUSH
40114: LD_INT 0
40116: PPUSH
40117: LD_INT 3
40119: PPUSH
40120: CALL_OW 12
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: ST_TO_ADDR
// end ;
40137: LD_VAR 0 2
40141: RET
// export function PrepareTiger ( agressivity ) ; begin
40142: LD_INT 0
40144: PPUSH
// uc_side := 0 ;
40145: LD_ADDR_OWVAR 20
40149: PUSH
40150: LD_INT 0
40152: ST_TO_ADDR
// uc_nation := 0 ;
40153: LD_ADDR_OWVAR 21
40157: PUSH
40158: LD_INT 0
40160: ST_TO_ADDR
// hc_class := class_tiger ;
40161: LD_ADDR_OWVAR 28
40165: PUSH
40166: LD_INT 14
40168: ST_TO_ADDR
// hc_gallery :=  ;
40169: LD_ADDR_OWVAR 33
40173: PUSH
40174: LD_STRING 
40176: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40177: LD_ADDR_OWVAR 35
40181: PUSH
40182: LD_VAR 0 1
40186: NEG
40187: PPUSH
40188: LD_VAR 0 1
40192: PPUSH
40193: CALL_OW 12
40197: ST_TO_ADDR
// end ;
40198: LD_VAR 0 2
40202: RET
// export function PrepareEnchidna ( ) ; begin
40203: LD_INT 0
40205: PPUSH
// uc_side := 0 ;
40206: LD_ADDR_OWVAR 20
40210: PUSH
40211: LD_INT 0
40213: ST_TO_ADDR
// uc_nation := 0 ;
40214: LD_ADDR_OWVAR 21
40218: PUSH
40219: LD_INT 0
40221: ST_TO_ADDR
// hc_class := class_baggie ;
40222: LD_ADDR_OWVAR 28
40226: PUSH
40227: LD_INT 13
40229: ST_TO_ADDR
// hc_gallery :=  ;
40230: LD_ADDR_OWVAR 33
40234: PUSH
40235: LD_STRING 
40237: ST_TO_ADDR
// end ;
40238: LD_VAR 0 1
40242: RET
// export function PrepareFrog ( ) ; begin
40243: LD_INT 0
40245: PPUSH
// uc_side := 0 ;
40246: LD_ADDR_OWVAR 20
40250: PUSH
40251: LD_INT 0
40253: ST_TO_ADDR
// uc_nation := 0 ;
40254: LD_ADDR_OWVAR 21
40258: PUSH
40259: LD_INT 0
40261: ST_TO_ADDR
// hc_class := class_frog ;
40262: LD_ADDR_OWVAR 28
40266: PUSH
40267: LD_INT 19
40269: ST_TO_ADDR
// hc_gallery :=  ;
40270: LD_ADDR_OWVAR 33
40274: PUSH
40275: LD_STRING 
40277: ST_TO_ADDR
// end ;
40278: LD_VAR 0 1
40282: RET
// export function PrepareFish ( ) ; begin
40283: LD_INT 0
40285: PPUSH
// uc_side := 0 ;
40286: LD_ADDR_OWVAR 20
40290: PUSH
40291: LD_INT 0
40293: ST_TO_ADDR
// uc_nation := 0 ;
40294: LD_ADDR_OWVAR 21
40298: PUSH
40299: LD_INT 0
40301: ST_TO_ADDR
// hc_class := class_fish ;
40302: LD_ADDR_OWVAR 28
40306: PUSH
40307: LD_INT 20
40309: ST_TO_ADDR
// hc_gallery :=  ;
40310: LD_ADDR_OWVAR 33
40314: PUSH
40315: LD_STRING 
40317: ST_TO_ADDR
// end ;
40318: LD_VAR 0 1
40322: RET
// export function PrepareBird ( ) ; begin
40323: LD_INT 0
40325: PPUSH
// uc_side := 0 ;
40326: LD_ADDR_OWVAR 20
40330: PUSH
40331: LD_INT 0
40333: ST_TO_ADDR
// uc_nation := 0 ;
40334: LD_ADDR_OWVAR 21
40338: PUSH
40339: LD_INT 0
40341: ST_TO_ADDR
// hc_class := class_phororhacos ;
40342: LD_ADDR_OWVAR 28
40346: PUSH
40347: LD_INT 18
40349: ST_TO_ADDR
// hc_gallery :=  ;
40350: LD_ADDR_OWVAR 33
40354: PUSH
40355: LD_STRING 
40357: ST_TO_ADDR
// end ;
40358: LD_VAR 0 1
40362: RET
// export function PrepareHorse ( ) ; begin
40363: LD_INT 0
40365: PPUSH
// uc_side := 0 ;
40366: LD_ADDR_OWVAR 20
40370: PUSH
40371: LD_INT 0
40373: ST_TO_ADDR
// uc_nation := 0 ;
40374: LD_ADDR_OWVAR 21
40378: PUSH
40379: LD_INT 0
40381: ST_TO_ADDR
// hc_class := class_horse ;
40382: LD_ADDR_OWVAR 28
40386: PUSH
40387: LD_INT 21
40389: ST_TO_ADDR
// hc_gallery :=  ;
40390: LD_ADDR_OWVAR 33
40394: PUSH
40395: LD_STRING 
40397: ST_TO_ADDR
// end ;
40398: LD_VAR 0 1
40402: RET
// export function PrepareMastodont ( ) ; begin
40403: LD_INT 0
40405: PPUSH
// uc_side := 0 ;
40406: LD_ADDR_OWVAR 20
40410: PUSH
40411: LD_INT 0
40413: ST_TO_ADDR
// uc_nation := 0 ;
40414: LD_ADDR_OWVAR 21
40418: PUSH
40419: LD_INT 0
40421: ST_TO_ADDR
// vc_chassis := class_mastodont ;
40422: LD_ADDR_OWVAR 37
40426: PUSH
40427: LD_INT 31
40429: ST_TO_ADDR
// vc_control := control_rider ;
40430: LD_ADDR_OWVAR 38
40434: PUSH
40435: LD_INT 4
40437: ST_TO_ADDR
// end ;
40438: LD_VAR 0 1
40442: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
40443: LD_INT 0
40445: PPUSH
40446: PPUSH
40447: PPUSH
// uc_side = 0 ;
40448: LD_ADDR_OWVAR 20
40452: PUSH
40453: LD_INT 0
40455: ST_TO_ADDR
// uc_nation = 0 ;
40456: LD_ADDR_OWVAR 21
40460: PUSH
40461: LD_INT 0
40463: ST_TO_ADDR
// InitHc_All ( ) ;
40464: CALL_OW 584
// InitVc ;
40468: CALL_OW 20
// if mastodonts then
40472: LD_VAR 0 6
40476: IFFALSE 40543
// for i = 1 to mastodonts do
40478: LD_ADDR_VAR 0 11
40482: PUSH
40483: DOUBLE
40484: LD_INT 1
40486: DEC
40487: ST_TO_ADDR
40488: LD_VAR 0 6
40492: PUSH
40493: FOR_TO
40494: IFFALSE 40541
// begin vc_chassis := 31 ;
40496: LD_ADDR_OWVAR 37
40500: PUSH
40501: LD_INT 31
40503: ST_TO_ADDR
// vc_control := control_rider ;
40504: LD_ADDR_OWVAR 38
40508: PUSH
40509: LD_INT 4
40511: ST_TO_ADDR
// animal := CreateVehicle ;
40512: LD_ADDR_VAR 0 12
40516: PUSH
40517: CALL_OW 45
40521: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40522: LD_VAR 0 12
40526: PPUSH
40527: LD_VAR 0 8
40531: PPUSH
40532: LD_INT 0
40534: PPUSH
40535: CALL 42678 0 3
// end ;
40539: GO 40493
40541: POP
40542: POP
// if horses then
40543: LD_VAR 0 5
40547: IFFALSE 40614
// for i = 1 to horses do
40549: LD_ADDR_VAR 0 11
40553: PUSH
40554: DOUBLE
40555: LD_INT 1
40557: DEC
40558: ST_TO_ADDR
40559: LD_VAR 0 5
40563: PUSH
40564: FOR_TO
40565: IFFALSE 40612
// begin hc_class := 21 ;
40567: LD_ADDR_OWVAR 28
40571: PUSH
40572: LD_INT 21
40574: ST_TO_ADDR
// hc_gallery :=  ;
40575: LD_ADDR_OWVAR 33
40579: PUSH
40580: LD_STRING 
40582: ST_TO_ADDR
// animal := CreateHuman ;
40583: LD_ADDR_VAR 0 12
40587: PUSH
40588: CALL_OW 44
40592: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40593: LD_VAR 0 12
40597: PPUSH
40598: LD_VAR 0 8
40602: PPUSH
40603: LD_INT 0
40605: PPUSH
40606: CALL 42678 0 3
// end ;
40610: GO 40564
40612: POP
40613: POP
// if birds then
40614: LD_VAR 0 1
40618: IFFALSE 40685
// for i = 1 to birds do
40620: LD_ADDR_VAR 0 11
40624: PUSH
40625: DOUBLE
40626: LD_INT 1
40628: DEC
40629: ST_TO_ADDR
40630: LD_VAR 0 1
40634: PUSH
40635: FOR_TO
40636: IFFALSE 40683
// begin hc_class = 18 ;
40638: LD_ADDR_OWVAR 28
40642: PUSH
40643: LD_INT 18
40645: ST_TO_ADDR
// hc_gallery =  ;
40646: LD_ADDR_OWVAR 33
40650: PUSH
40651: LD_STRING 
40653: ST_TO_ADDR
// animal := CreateHuman ;
40654: LD_ADDR_VAR 0 12
40658: PUSH
40659: CALL_OW 44
40663: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40664: LD_VAR 0 12
40668: PPUSH
40669: LD_VAR 0 8
40673: PPUSH
40674: LD_INT 0
40676: PPUSH
40677: CALL 42678 0 3
// end ;
40681: GO 40635
40683: POP
40684: POP
// if tigers then
40685: LD_VAR 0 2
40689: IFFALSE 40773
// for i = 1 to tigers do
40691: LD_ADDR_VAR 0 11
40695: PUSH
40696: DOUBLE
40697: LD_INT 1
40699: DEC
40700: ST_TO_ADDR
40701: LD_VAR 0 2
40705: PUSH
40706: FOR_TO
40707: IFFALSE 40771
// begin hc_class = class_tiger ;
40709: LD_ADDR_OWVAR 28
40713: PUSH
40714: LD_INT 14
40716: ST_TO_ADDR
// hc_gallery =  ;
40717: LD_ADDR_OWVAR 33
40721: PUSH
40722: LD_STRING 
40724: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
40725: LD_ADDR_OWVAR 35
40729: PUSH
40730: LD_INT 7
40732: NEG
40733: PPUSH
40734: LD_INT 7
40736: PPUSH
40737: CALL_OW 12
40741: ST_TO_ADDR
// animal := CreateHuman ;
40742: LD_ADDR_VAR 0 12
40746: PUSH
40747: CALL_OW 44
40751: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40752: LD_VAR 0 12
40756: PPUSH
40757: LD_VAR 0 8
40761: PPUSH
40762: LD_INT 0
40764: PPUSH
40765: CALL 42678 0 3
// end ;
40769: GO 40706
40771: POP
40772: POP
// if apemans then
40773: LD_VAR 0 3
40777: IFFALSE 40900
// for i = 1 to apemans do
40779: LD_ADDR_VAR 0 11
40783: PUSH
40784: DOUBLE
40785: LD_INT 1
40787: DEC
40788: ST_TO_ADDR
40789: LD_VAR 0 3
40793: PUSH
40794: FOR_TO
40795: IFFALSE 40898
// begin hc_class = class_apeman ;
40797: LD_ADDR_OWVAR 28
40801: PUSH
40802: LD_INT 12
40804: ST_TO_ADDR
// hc_gallery =  ;
40805: LD_ADDR_OWVAR 33
40809: PUSH
40810: LD_STRING 
40812: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
40813: LD_ADDR_OWVAR 35
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PPUSH
40822: LD_INT 2
40824: PPUSH
40825: CALL_OW 12
40829: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
40830: LD_ADDR_OWVAR 31
40834: PUSH
40835: LD_INT 1
40837: PPUSH
40838: LD_INT 3
40840: PPUSH
40841: CALL_OW 12
40845: PUSH
40846: LD_INT 1
40848: PPUSH
40849: LD_INT 3
40851: PPUSH
40852: CALL_OW 12
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: ST_TO_ADDR
// animal := CreateHuman ;
40869: LD_ADDR_VAR 0 12
40873: PUSH
40874: CALL_OW 44
40878: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40879: LD_VAR 0 12
40883: PPUSH
40884: LD_VAR 0 8
40888: PPUSH
40889: LD_INT 0
40891: PPUSH
40892: CALL 42678 0 3
// end ;
40896: GO 40794
40898: POP
40899: POP
// if enchidnas then
40900: LD_VAR 0 4
40904: IFFALSE 40971
// for i = 1 to enchidnas do
40906: LD_ADDR_VAR 0 11
40910: PUSH
40911: DOUBLE
40912: LD_INT 1
40914: DEC
40915: ST_TO_ADDR
40916: LD_VAR 0 4
40920: PUSH
40921: FOR_TO
40922: IFFALSE 40969
// begin hc_class = 13 ;
40924: LD_ADDR_OWVAR 28
40928: PUSH
40929: LD_INT 13
40931: ST_TO_ADDR
// hc_gallery =  ;
40932: LD_ADDR_OWVAR 33
40936: PUSH
40937: LD_STRING 
40939: ST_TO_ADDR
// animal := CreateHuman ;
40940: LD_ADDR_VAR 0 12
40944: PUSH
40945: CALL_OW 44
40949: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40950: LD_VAR 0 12
40954: PPUSH
40955: LD_VAR 0 8
40959: PPUSH
40960: LD_INT 0
40962: PPUSH
40963: CALL 42678 0 3
// end ;
40967: GO 40921
40969: POP
40970: POP
// if fishes then
40971: LD_VAR 0 7
40975: IFFALSE 41042
// for i = 1 to fishes do
40977: LD_ADDR_VAR 0 11
40981: PUSH
40982: DOUBLE
40983: LD_INT 1
40985: DEC
40986: ST_TO_ADDR
40987: LD_VAR 0 7
40991: PUSH
40992: FOR_TO
40993: IFFALSE 41040
// begin hc_class = 20 ;
40995: LD_ADDR_OWVAR 28
40999: PUSH
41000: LD_INT 20
41002: ST_TO_ADDR
// hc_gallery =  ;
41003: LD_ADDR_OWVAR 33
41007: PUSH
41008: LD_STRING 
41010: ST_TO_ADDR
// animal := CreateHuman ;
41011: LD_ADDR_VAR 0 12
41015: PUSH
41016: CALL_OW 44
41020: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41021: LD_VAR 0 12
41025: PPUSH
41026: LD_VAR 0 9
41030: PPUSH
41031: LD_INT 0
41033: PPUSH
41034: CALL 42678 0 3
// end ;
41038: GO 40992
41040: POP
41041: POP
// end ;
41042: LD_VAR 0 10
41046: RET
// export function WantHeal ( sci , unit ) ; begin
41047: LD_INT 0
41049: PPUSH
// if GetTaskList ( sci ) > 0 then
41050: LD_VAR 0 1
41054: PPUSH
41055: CALL_OW 437
41059: PUSH
41060: LD_INT 0
41062: GREATER
41063: IFFALSE 41133
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41065: LD_VAR 0 1
41069: PPUSH
41070: CALL_OW 437
41074: PUSH
41075: LD_INT 1
41077: ARRAY
41078: PUSH
41079: LD_INT 1
41081: ARRAY
41082: PUSH
41083: LD_STRING l
41085: EQUAL
41086: PUSH
41087: LD_VAR 0 1
41091: PPUSH
41092: CALL_OW 437
41096: PUSH
41097: LD_INT 1
41099: ARRAY
41100: PUSH
41101: LD_INT 4
41103: ARRAY
41104: PUSH
41105: LD_VAR 0 2
41109: EQUAL
41110: AND
41111: IFFALSE 41123
// result := true else
41113: LD_ADDR_VAR 0 3
41117: PUSH
41118: LD_INT 1
41120: ST_TO_ADDR
41121: GO 41131
// result := false ;
41123: LD_ADDR_VAR 0 3
41127: PUSH
41128: LD_INT 0
41130: ST_TO_ADDR
// end else
41131: GO 41141
// result := false ;
41133: LD_ADDR_VAR 0 3
41137: PUSH
41138: LD_INT 0
41140: ST_TO_ADDR
// end ;
41141: LD_VAR 0 3
41145: RET
// export function HealTarget ( sci ) ; begin
41146: LD_INT 0
41148: PPUSH
// if not sci then
41149: LD_VAR 0 1
41153: NOT
41154: IFFALSE 41158
// exit ;
41156: GO 41223
// result := 0 ;
41158: LD_ADDR_VAR 0 2
41162: PUSH
41163: LD_INT 0
41165: ST_TO_ADDR
// if GetTaskList ( sci ) then
41166: LD_VAR 0 1
41170: PPUSH
41171: CALL_OW 437
41175: IFFALSE 41223
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41177: LD_VAR 0 1
41181: PPUSH
41182: CALL_OW 437
41186: PUSH
41187: LD_INT 1
41189: ARRAY
41190: PUSH
41191: LD_INT 1
41193: ARRAY
41194: PUSH
41195: LD_STRING l
41197: EQUAL
41198: IFFALSE 41223
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41200: LD_ADDR_VAR 0 2
41204: PUSH
41205: LD_VAR 0 1
41209: PPUSH
41210: CALL_OW 437
41214: PUSH
41215: LD_INT 1
41217: ARRAY
41218: PUSH
41219: LD_INT 4
41221: ARRAY
41222: ST_TO_ADDR
// end ;
41223: LD_VAR 0 2
41227: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41228: LD_INT 0
41230: PPUSH
41231: PPUSH
41232: PPUSH
41233: PPUSH
// if not base_units then
41234: LD_VAR 0 1
41238: NOT
41239: IFFALSE 41243
// exit ;
41241: GO 41330
// result := false ;
41243: LD_ADDR_VAR 0 2
41247: PUSH
41248: LD_INT 0
41250: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41251: LD_ADDR_VAR 0 5
41255: PUSH
41256: LD_VAR 0 1
41260: PPUSH
41261: LD_INT 21
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PPUSH
41271: CALL_OW 72
41275: ST_TO_ADDR
// if not tmp then
41276: LD_VAR 0 5
41280: NOT
41281: IFFALSE 41285
// exit ;
41283: GO 41330
// for i in tmp do
41285: LD_ADDR_VAR 0 3
41289: PUSH
41290: LD_VAR 0 5
41294: PUSH
41295: FOR_IN
41296: IFFALSE 41328
// begin result := EnemyInRange ( i , 22 ) ;
41298: LD_ADDR_VAR 0 2
41302: PUSH
41303: LD_VAR 0 3
41307: PPUSH
41308: LD_INT 22
41310: PPUSH
41311: CALL 39016 0 2
41315: ST_TO_ADDR
// if result then
41316: LD_VAR 0 2
41320: IFFALSE 41326
// exit ;
41322: POP
41323: POP
41324: GO 41330
// end ;
41326: GO 41295
41328: POP
41329: POP
// end ;
41330: LD_VAR 0 2
41334: RET
// export function FilterByTag ( units , tag ) ; begin
41335: LD_INT 0
41337: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
41338: LD_ADDR_VAR 0 3
41342: PUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: LD_INT 120
41350: PUSH
41351: LD_VAR 0 2
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PPUSH
41360: CALL_OW 72
41364: ST_TO_ADDR
// end ;
41365: LD_VAR 0 3
41369: RET
// export function IsDriver ( un ) ; begin
41370: LD_INT 0
41372: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41373: LD_ADDR_VAR 0 2
41377: PUSH
41378: LD_VAR 0 1
41382: PUSH
41383: LD_INT 55
41385: PUSH
41386: EMPTY
41387: LIST
41388: PPUSH
41389: CALL_OW 69
41393: IN
41394: ST_TO_ADDR
// end ;
41395: LD_VAR 0 2
41399: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
41400: LD_INT 0
41402: PPUSH
41403: PPUSH
// list := [ ] ;
41404: LD_ADDR_VAR 0 5
41408: PUSH
41409: EMPTY
41410: ST_TO_ADDR
// case d of 0 :
41411: LD_VAR 0 3
41415: PUSH
41416: LD_INT 0
41418: DOUBLE
41419: EQUAL
41420: IFTRUE 41424
41422: GO 41557
41424: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
41425: LD_ADDR_VAR 0 5
41429: PUSH
41430: LD_VAR 0 1
41434: PUSH
41435: LD_INT 4
41437: MINUS
41438: PUSH
41439: LD_VAR 0 2
41443: PUSH
41444: LD_INT 4
41446: MINUS
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: LIST
41455: PUSH
41456: LD_VAR 0 1
41460: PUSH
41461: LD_INT 3
41463: MINUS
41464: PUSH
41465: LD_VAR 0 2
41469: PUSH
41470: LD_INT 1
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: PUSH
41478: LD_VAR 0 1
41482: PUSH
41483: LD_INT 4
41485: PLUS
41486: PUSH
41487: LD_VAR 0 2
41491: PUSH
41492: LD_INT 4
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: LIST
41499: PUSH
41500: LD_VAR 0 1
41504: PUSH
41505: LD_INT 3
41507: PLUS
41508: PUSH
41509: LD_VAR 0 2
41513: PUSH
41514: LD_INT 3
41516: PLUS
41517: PUSH
41518: LD_INT 5
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: PUSH
41526: LD_VAR 0 1
41530: PUSH
41531: LD_VAR 0 2
41535: PUSH
41536: LD_INT 4
41538: PLUS
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: LIST
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
// end ; 1 :
41555: GO 42255
41557: LD_INT 1
41559: DOUBLE
41560: EQUAL
41561: IFTRUE 41565
41563: GO 41698
41565: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
41566: LD_ADDR_VAR 0 5
41570: PUSH
41571: LD_VAR 0 1
41575: PUSH
41576: LD_VAR 0 2
41580: PUSH
41581: LD_INT 4
41583: MINUS
41584: PUSH
41585: LD_INT 3
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: PUSH
41593: LD_VAR 0 1
41597: PUSH
41598: LD_INT 3
41600: MINUS
41601: PUSH
41602: LD_VAR 0 2
41606: PUSH
41607: LD_INT 3
41609: MINUS
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: LIST
41618: PUSH
41619: LD_VAR 0 1
41623: PUSH
41624: LD_INT 4
41626: MINUS
41627: PUSH
41628: LD_VAR 0 2
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: LIST
41640: PUSH
41641: LD_VAR 0 1
41645: PUSH
41646: LD_VAR 0 2
41650: PUSH
41651: LD_INT 3
41653: PLUS
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: LIST
41662: PUSH
41663: LD_VAR 0 1
41667: PUSH
41668: LD_INT 4
41670: PLUS
41671: PUSH
41672: LD_VAR 0 2
41676: PUSH
41677: LD_INT 4
41679: PLUS
41680: PUSH
41681: LD_INT 5
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: LIST
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: ST_TO_ADDR
// end ; 2 :
41696: GO 42255
41698: LD_INT 2
41700: DOUBLE
41701: EQUAL
41702: IFTRUE 41706
41704: GO 41835
41706: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
41707: LD_ADDR_VAR 0 5
41711: PUSH
41712: LD_VAR 0 1
41716: PUSH
41717: LD_VAR 0 2
41721: PUSH
41722: LD_INT 3
41724: MINUS
41725: PUSH
41726: LD_INT 3
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: LIST
41733: PUSH
41734: LD_VAR 0 1
41738: PUSH
41739: LD_INT 4
41741: PLUS
41742: PUSH
41743: LD_VAR 0 2
41747: PUSH
41748: LD_INT 4
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: LIST
41755: PUSH
41756: LD_VAR 0 1
41760: PUSH
41761: LD_VAR 0 2
41765: PUSH
41766: LD_INT 4
41768: PLUS
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: LIST
41777: PUSH
41778: LD_VAR 0 1
41782: PUSH
41783: LD_INT 3
41785: MINUS
41786: PUSH
41787: LD_VAR 0 2
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: LIST
41799: PUSH
41800: LD_VAR 0 1
41804: PUSH
41805: LD_INT 4
41807: MINUS
41808: PUSH
41809: LD_VAR 0 2
41813: PUSH
41814: LD_INT 4
41816: MINUS
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: ST_TO_ADDR
// end ; 3 :
41833: GO 42255
41835: LD_INT 3
41837: DOUBLE
41838: EQUAL
41839: IFTRUE 41843
41841: GO 41976
41843: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
41844: LD_ADDR_VAR 0 5
41848: PUSH
41849: LD_VAR 0 1
41853: PUSH
41854: LD_INT 3
41856: PLUS
41857: PUSH
41858: LD_VAR 0 2
41862: PUSH
41863: LD_INT 4
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: PUSH
41871: LD_VAR 0 1
41875: PUSH
41876: LD_INT 4
41878: PLUS
41879: PUSH
41880: LD_VAR 0 2
41884: PUSH
41885: LD_INT 4
41887: PLUS
41888: PUSH
41889: LD_INT 5
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: LIST
41896: PUSH
41897: LD_VAR 0 1
41901: PUSH
41902: LD_INT 4
41904: MINUS
41905: PUSH
41906: LD_VAR 0 2
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: LIST
41918: PUSH
41919: LD_VAR 0 1
41923: PUSH
41924: LD_VAR 0 2
41928: PUSH
41929: LD_INT 4
41931: MINUS
41932: PUSH
41933: LD_INT 3
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: LIST
41940: PUSH
41941: LD_VAR 0 1
41945: PUSH
41946: LD_INT 3
41948: MINUS
41949: PUSH
41950: LD_VAR 0 2
41954: PUSH
41955: LD_INT 3
41957: MINUS
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: LIST
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: ST_TO_ADDR
// end ; 4 :
41974: GO 42255
41976: LD_INT 4
41978: DOUBLE
41979: EQUAL
41980: IFTRUE 41984
41982: GO 42117
41984: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
41985: LD_ADDR_VAR 0 5
41989: PUSH
41990: LD_VAR 0 1
41994: PUSH
41995: LD_VAR 0 2
41999: PUSH
42000: LD_INT 4
42002: PLUS
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: LIST
42011: PUSH
42012: LD_VAR 0 1
42016: PUSH
42017: LD_INT 3
42019: PLUS
42020: PUSH
42021: LD_VAR 0 2
42025: PUSH
42026: LD_INT 3
42028: PLUS
42029: PUSH
42030: LD_INT 5
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: LIST
42037: PUSH
42038: LD_VAR 0 1
42042: PUSH
42043: LD_INT 4
42045: PLUS
42046: PUSH
42047: LD_VAR 0 2
42051: PUSH
42052: LD_INT 4
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: LIST
42059: PUSH
42060: LD_VAR 0 1
42064: PUSH
42065: LD_VAR 0 2
42069: PUSH
42070: LD_INT 3
42072: MINUS
42073: PUSH
42074: LD_INT 3
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: PUSH
42082: LD_VAR 0 1
42086: PUSH
42087: LD_INT 4
42089: MINUS
42090: PUSH
42091: LD_VAR 0 2
42095: PUSH
42096: LD_INT 4
42098: MINUS
42099: PUSH
42100: LD_INT 2
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: LIST
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: ST_TO_ADDR
// end ; 5 :
42115: GO 42255
42117: LD_INT 5
42119: DOUBLE
42120: EQUAL
42121: IFTRUE 42125
42123: GO 42254
42125: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42126: LD_ADDR_VAR 0 5
42130: PUSH
42131: LD_VAR 0 1
42135: PUSH
42136: LD_INT 4
42138: MINUS
42139: PUSH
42140: LD_VAR 0 2
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: LIST
42152: PUSH
42153: LD_VAR 0 1
42157: PUSH
42158: LD_VAR 0 2
42162: PUSH
42163: LD_INT 4
42165: MINUS
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: LIST
42174: PUSH
42175: LD_VAR 0 1
42179: PUSH
42180: LD_INT 4
42182: PLUS
42183: PUSH
42184: LD_VAR 0 2
42188: PUSH
42189: LD_INT 4
42191: PLUS
42192: PUSH
42193: LD_INT 5
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: LIST
42200: PUSH
42201: LD_VAR 0 1
42205: PUSH
42206: LD_INT 3
42208: PLUS
42209: PUSH
42210: LD_VAR 0 2
42214: PUSH
42215: LD_INT 4
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: PUSH
42223: LD_VAR 0 1
42227: PUSH
42228: LD_VAR 0 2
42232: PUSH
42233: LD_INT 3
42235: PLUS
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: LIST
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: ST_TO_ADDR
// end ; end ;
42252: GO 42255
42254: POP
// result := list ;
42255: LD_ADDR_VAR 0 4
42259: PUSH
42260: LD_VAR 0 5
42264: ST_TO_ADDR
// end ;
42265: LD_VAR 0 4
42269: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42270: LD_INT 0
42272: PPUSH
42273: PPUSH
42274: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42275: LD_VAR 0 1
42279: NOT
42280: PUSH
42281: LD_VAR 0 2
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: LD_INT 3
42294: PUSH
42295: LD_INT 4
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: IN
42304: NOT
42305: OR
42306: IFFALSE 42310
// exit ;
42308: GO 42402
// tmp := [ ] ;
42310: LD_ADDR_VAR 0 5
42314: PUSH
42315: EMPTY
42316: ST_TO_ADDR
// for i in units do
42317: LD_ADDR_VAR 0 4
42321: PUSH
42322: LD_VAR 0 1
42326: PUSH
42327: FOR_IN
42328: IFFALSE 42371
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
42330: LD_ADDR_VAR 0 5
42334: PUSH
42335: LD_VAR 0 5
42339: PPUSH
42340: LD_VAR 0 5
42344: PUSH
42345: LD_INT 1
42347: PLUS
42348: PPUSH
42349: LD_VAR 0 4
42353: PPUSH
42354: LD_VAR 0 2
42358: PPUSH
42359: CALL_OW 259
42363: PPUSH
42364: CALL_OW 2
42368: ST_TO_ADDR
42369: GO 42327
42371: POP
42372: POP
// if not tmp then
42373: LD_VAR 0 5
42377: NOT
42378: IFFALSE 42382
// exit ;
42380: GO 42402
// result := SortListByListDesc ( units , tmp ) ;
42382: LD_ADDR_VAR 0 3
42386: PUSH
42387: LD_VAR 0 1
42391: PPUSH
42392: LD_VAR 0 5
42396: PPUSH
42397: CALL_OW 77
42401: ST_TO_ADDR
// end ;
42402: LD_VAR 0 3
42406: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
42407: LD_INT 0
42409: PPUSH
42410: PPUSH
42411: PPUSH
// result := false ;
42412: LD_ADDR_VAR 0 3
42416: PUSH
42417: LD_INT 0
42419: ST_TO_ADDR
// x := GetX ( building ) ;
42420: LD_ADDR_VAR 0 4
42424: PUSH
42425: LD_VAR 0 2
42429: PPUSH
42430: CALL_OW 250
42434: ST_TO_ADDR
// y := GetY ( building ) ;
42435: LD_ADDR_VAR 0 5
42439: PUSH
42440: LD_VAR 0 2
42444: PPUSH
42445: CALL_OW 251
42449: ST_TO_ADDR
// if not building or not x or not y then
42450: LD_VAR 0 2
42454: NOT
42455: PUSH
42456: LD_VAR 0 4
42460: NOT
42461: OR
42462: PUSH
42463: LD_VAR 0 5
42467: NOT
42468: OR
42469: IFFALSE 42473
// exit ;
42471: GO 42565
// if GetTaskList ( unit ) then
42473: LD_VAR 0 1
42477: PPUSH
42478: CALL_OW 437
42482: IFFALSE 42565
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42484: LD_STRING e
42486: PUSH
42487: LD_VAR 0 1
42491: PPUSH
42492: CALL_OW 437
42496: PUSH
42497: LD_INT 1
42499: ARRAY
42500: PUSH
42501: LD_INT 1
42503: ARRAY
42504: EQUAL
42505: PUSH
42506: LD_VAR 0 4
42510: PUSH
42511: LD_VAR 0 1
42515: PPUSH
42516: CALL_OW 437
42520: PUSH
42521: LD_INT 1
42523: ARRAY
42524: PUSH
42525: LD_INT 2
42527: ARRAY
42528: EQUAL
42529: AND
42530: PUSH
42531: LD_VAR 0 5
42535: PUSH
42536: LD_VAR 0 1
42540: PPUSH
42541: CALL_OW 437
42545: PUSH
42546: LD_INT 1
42548: ARRAY
42549: PUSH
42550: LD_INT 3
42552: ARRAY
42553: EQUAL
42554: AND
42555: IFFALSE 42565
// result := true end ;
42557: LD_ADDR_VAR 0 3
42561: PUSH
42562: LD_INT 1
42564: ST_TO_ADDR
// end ;
42565: LD_VAR 0 3
42569: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
42570: LD_INT 0
42572: PPUSH
// result := false ;
42573: LD_ADDR_VAR 0 4
42577: PUSH
42578: LD_INT 0
42580: ST_TO_ADDR
// if GetTaskList ( unit ) then
42581: LD_VAR 0 1
42585: PPUSH
42586: CALL_OW 437
42590: IFFALSE 42673
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42592: LD_STRING M
42594: PUSH
42595: LD_VAR 0 1
42599: PPUSH
42600: CALL_OW 437
42604: PUSH
42605: LD_INT 1
42607: ARRAY
42608: PUSH
42609: LD_INT 1
42611: ARRAY
42612: EQUAL
42613: PUSH
42614: LD_VAR 0 2
42618: PUSH
42619: LD_VAR 0 1
42623: PPUSH
42624: CALL_OW 437
42628: PUSH
42629: LD_INT 1
42631: ARRAY
42632: PUSH
42633: LD_INT 2
42635: ARRAY
42636: EQUAL
42637: AND
42638: PUSH
42639: LD_VAR 0 3
42643: PUSH
42644: LD_VAR 0 1
42648: PPUSH
42649: CALL_OW 437
42653: PUSH
42654: LD_INT 1
42656: ARRAY
42657: PUSH
42658: LD_INT 3
42660: ARRAY
42661: EQUAL
42662: AND
42663: IFFALSE 42673
// result := true ;
42665: LD_ADDR_VAR 0 4
42669: PUSH
42670: LD_INT 1
42672: ST_TO_ADDR
// end ; end ;
42673: LD_VAR 0 4
42677: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
42678: LD_INT 0
42680: PPUSH
42681: PPUSH
42682: PPUSH
42683: PPUSH
// if not unit or not area then
42684: LD_VAR 0 1
42688: NOT
42689: PUSH
42690: LD_VAR 0 2
42694: NOT
42695: OR
42696: IFFALSE 42700
// exit ;
42698: GO 42864
// tmp := AreaToList ( area , i ) ;
42700: LD_ADDR_VAR 0 6
42704: PUSH
42705: LD_VAR 0 2
42709: PPUSH
42710: LD_VAR 0 5
42714: PPUSH
42715: CALL_OW 517
42719: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
42720: LD_ADDR_VAR 0 5
42724: PUSH
42725: DOUBLE
42726: LD_INT 1
42728: DEC
42729: ST_TO_ADDR
42730: LD_VAR 0 6
42734: PUSH
42735: LD_INT 1
42737: ARRAY
42738: PUSH
42739: FOR_TO
42740: IFFALSE 42862
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
42742: LD_ADDR_VAR 0 7
42746: PUSH
42747: LD_VAR 0 6
42751: PUSH
42752: LD_INT 1
42754: ARRAY
42755: PUSH
42756: LD_VAR 0 5
42760: ARRAY
42761: PUSH
42762: LD_VAR 0 6
42766: PUSH
42767: LD_INT 2
42769: ARRAY
42770: PUSH
42771: LD_VAR 0 5
42775: ARRAY
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
42781: LD_VAR 0 7
42785: PUSH
42786: LD_INT 1
42788: ARRAY
42789: PPUSH
42790: LD_VAR 0 7
42794: PUSH
42795: LD_INT 2
42797: ARRAY
42798: PPUSH
42799: CALL_OW 428
42803: PUSH
42804: LD_INT 0
42806: EQUAL
42807: IFFALSE 42860
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
42809: LD_VAR 0 1
42813: PPUSH
42814: LD_VAR 0 7
42818: PUSH
42819: LD_INT 1
42821: ARRAY
42822: PPUSH
42823: LD_VAR 0 7
42827: PUSH
42828: LD_INT 2
42830: ARRAY
42831: PPUSH
42832: LD_VAR 0 3
42836: PPUSH
42837: CALL_OW 48
// result := IsPlaced ( unit ) ;
42841: LD_ADDR_VAR 0 4
42845: PUSH
42846: LD_VAR 0 1
42850: PPUSH
42851: CALL_OW 305
42855: ST_TO_ADDR
// exit ;
42856: POP
42857: POP
42858: GO 42864
// end ; end ;
42860: GO 42739
42862: POP
42863: POP
// end ;
42864: LD_VAR 0 4
42868: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
42869: LD_INT 0
42871: PPUSH
42872: PPUSH
42873: PPUSH
// if not side or side > 8 then
42874: LD_VAR 0 1
42878: NOT
42879: PUSH
42880: LD_VAR 0 1
42884: PUSH
42885: LD_INT 8
42887: GREATER
42888: OR
42889: IFFALSE 42893
// exit ;
42891: GO 43080
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
42893: LD_ADDR_VAR 0 4
42897: PUSH
42898: LD_INT 22
42900: PUSH
42901: LD_VAR 0 1
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 21
42912: PUSH
42913: LD_INT 3
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PPUSH
42924: CALL_OW 69
42928: ST_TO_ADDR
// if not tmp then
42929: LD_VAR 0 4
42933: NOT
42934: IFFALSE 42938
// exit ;
42936: GO 43080
// enable_addtolog := true ;
42938: LD_ADDR_OWVAR 81
42942: PUSH
42943: LD_INT 1
42945: ST_TO_ADDR
// AddToLog ( [ ) ;
42946: LD_STRING [
42948: PPUSH
42949: CALL_OW 561
// for i in tmp do
42953: LD_ADDR_VAR 0 3
42957: PUSH
42958: LD_VAR 0 4
42962: PUSH
42963: FOR_IN
42964: IFFALSE 43071
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
42966: LD_STRING [
42968: PUSH
42969: LD_VAR 0 3
42973: PPUSH
42974: CALL_OW 266
42978: STR
42979: PUSH
42980: LD_STRING , 
42982: STR
42983: PUSH
42984: LD_VAR 0 3
42988: PPUSH
42989: CALL_OW 250
42993: STR
42994: PUSH
42995: LD_STRING , 
42997: STR
42998: PUSH
42999: LD_VAR 0 3
43003: PPUSH
43004: CALL_OW 251
43008: STR
43009: PUSH
43010: LD_STRING , 
43012: STR
43013: PUSH
43014: LD_VAR 0 3
43018: PPUSH
43019: CALL_OW 254
43023: STR
43024: PUSH
43025: LD_STRING , 
43027: STR
43028: PUSH
43029: LD_VAR 0 3
43033: PPUSH
43034: LD_INT 1
43036: PPUSH
43037: CALL_OW 268
43041: STR
43042: PUSH
43043: LD_STRING , 
43045: STR
43046: PUSH
43047: LD_VAR 0 3
43051: PPUSH
43052: LD_INT 2
43054: PPUSH
43055: CALL_OW 268
43059: STR
43060: PUSH
43061: LD_STRING ],
43063: STR
43064: PPUSH
43065: CALL_OW 561
// end ;
43069: GO 42963
43071: POP
43072: POP
// AddToLog ( ]; ) ;
43073: LD_STRING ];
43075: PPUSH
43076: CALL_OW 561
// end ;
43080: LD_VAR 0 2
43084: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43085: LD_INT 0
43087: PPUSH
43088: PPUSH
43089: PPUSH
43090: PPUSH
43091: PPUSH
// if not area or not rate or not max then
43092: LD_VAR 0 1
43096: NOT
43097: PUSH
43098: LD_VAR 0 2
43102: NOT
43103: OR
43104: PUSH
43105: LD_VAR 0 4
43109: NOT
43110: OR
43111: IFFALSE 43115
// exit ;
43113: GO 43304
// while 1 do
43115: LD_INT 1
43117: IFFALSE 43304
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43119: LD_ADDR_VAR 0 9
43123: PUSH
43124: LD_VAR 0 1
43128: PPUSH
43129: LD_INT 1
43131: PPUSH
43132: CALL_OW 287
43136: PUSH
43137: LD_INT 10
43139: MUL
43140: ST_TO_ADDR
// r := rate / 10 ;
43141: LD_ADDR_VAR 0 7
43145: PUSH
43146: LD_VAR 0 2
43150: PUSH
43151: LD_INT 10
43153: DIVREAL
43154: ST_TO_ADDR
// time := 1 1$00 ;
43155: LD_ADDR_VAR 0 8
43159: PUSH
43160: LD_INT 2100
43162: ST_TO_ADDR
// if amount < min then
43163: LD_VAR 0 9
43167: PUSH
43168: LD_VAR 0 3
43172: LESS
43173: IFFALSE 43191
// r := r * 2 else
43175: LD_ADDR_VAR 0 7
43179: PUSH
43180: LD_VAR 0 7
43184: PUSH
43185: LD_INT 2
43187: MUL
43188: ST_TO_ADDR
43189: GO 43217
// if amount > max then
43191: LD_VAR 0 9
43195: PUSH
43196: LD_VAR 0 4
43200: GREATER
43201: IFFALSE 43217
// r := r / 2 ;
43203: LD_ADDR_VAR 0 7
43207: PUSH
43208: LD_VAR 0 7
43212: PUSH
43213: LD_INT 2
43215: DIVREAL
43216: ST_TO_ADDR
// time := time / r ;
43217: LD_ADDR_VAR 0 8
43221: PUSH
43222: LD_VAR 0 8
43226: PUSH
43227: LD_VAR 0 7
43231: DIVREAL
43232: ST_TO_ADDR
// if time < 0 then
43233: LD_VAR 0 8
43237: PUSH
43238: LD_INT 0
43240: LESS
43241: IFFALSE 43258
// time := time * - 1 ;
43243: LD_ADDR_VAR 0 8
43247: PUSH
43248: LD_VAR 0 8
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: MUL
43257: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
43258: LD_VAR 0 8
43262: PUSH
43263: LD_INT 35
43265: PPUSH
43266: LD_INT 875
43268: PPUSH
43269: CALL_OW 12
43273: PLUS
43274: PPUSH
43275: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43279: LD_INT 1
43281: PPUSH
43282: LD_INT 5
43284: PPUSH
43285: CALL_OW 12
43289: PPUSH
43290: LD_VAR 0 1
43294: PPUSH
43295: LD_INT 1
43297: PPUSH
43298: CALL_OW 55
// end ;
43302: GO 43115
// end ;
43304: LD_VAR 0 5
43308: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43309: LD_INT 0
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
43315: PPUSH
43316: PPUSH
43317: PPUSH
43318: PPUSH
// if not turrets or not factories then
43319: LD_VAR 0 1
43323: NOT
43324: PUSH
43325: LD_VAR 0 2
43329: NOT
43330: OR
43331: IFFALSE 43335
// exit ;
43333: GO 43642
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43335: LD_ADDR_VAR 0 10
43339: PUSH
43340: LD_INT 5
43342: PUSH
43343: LD_INT 6
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: LD_INT 4
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 3
43362: PUSH
43363: LD_INT 5
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 24
43377: PUSH
43378: LD_INT 25
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 23
43387: PUSH
43388: LD_INT 27
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 42
43401: PUSH
43402: LD_INT 43
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 44
43411: PUSH
43412: LD_INT 46
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 45
43421: PUSH
43422: LD_INT 47
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: LIST
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: LIST
43438: ST_TO_ADDR
// result := [ ] ;
43439: LD_ADDR_VAR 0 3
43443: PUSH
43444: EMPTY
43445: ST_TO_ADDR
// for i in turrets do
43446: LD_ADDR_VAR 0 4
43450: PUSH
43451: LD_VAR 0 1
43455: PUSH
43456: FOR_IN
43457: IFFALSE 43640
// begin nat := GetNation ( i ) ;
43459: LD_ADDR_VAR 0 7
43463: PUSH
43464: LD_VAR 0 4
43468: PPUSH
43469: CALL_OW 248
43473: ST_TO_ADDR
// weapon := 0 ;
43474: LD_ADDR_VAR 0 8
43478: PUSH
43479: LD_INT 0
43481: ST_TO_ADDR
// if not nat then
43482: LD_VAR 0 7
43486: NOT
43487: IFFALSE 43491
// continue ;
43489: GO 43456
// for j in list [ nat ] do
43491: LD_ADDR_VAR 0 5
43495: PUSH
43496: LD_VAR 0 10
43500: PUSH
43501: LD_VAR 0 7
43505: ARRAY
43506: PUSH
43507: FOR_IN
43508: IFFALSE 43549
// if GetBWeapon ( i ) = j [ 1 ] then
43510: LD_VAR 0 4
43514: PPUSH
43515: CALL_OW 269
43519: PUSH
43520: LD_VAR 0 5
43524: PUSH
43525: LD_INT 1
43527: ARRAY
43528: EQUAL
43529: IFFALSE 43547
// begin weapon := j [ 2 ] ;
43531: LD_ADDR_VAR 0 8
43535: PUSH
43536: LD_VAR 0 5
43540: PUSH
43541: LD_INT 2
43543: ARRAY
43544: ST_TO_ADDR
// break ;
43545: GO 43549
// end ;
43547: GO 43507
43549: POP
43550: POP
// if not weapon then
43551: LD_VAR 0 8
43555: NOT
43556: IFFALSE 43560
// continue ;
43558: GO 43456
// for k in factories do
43560: LD_ADDR_VAR 0 6
43564: PUSH
43565: LD_VAR 0 2
43569: PUSH
43570: FOR_IN
43571: IFFALSE 43636
// begin weapons := AvailableWeaponList ( k ) ;
43573: LD_ADDR_VAR 0 9
43577: PUSH
43578: LD_VAR 0 6
43582: PPUSH
43583: CALL_OW 478
43587: ST_TO_ADDR
// if not weapons then
43588: LD_VAR 0 9
43592: NOT
43593: IFFALSE 43597
// continue ;
43595: GO 43570
// if weapon in weapons then
43597: LD_VAR 0 8
43601: PUSH
43602: LD_VAR 0 9
43606: IN
43607: IFFALSE 43634
// begin result := [ i , weapon ] ;
43609: LD_ADDR_VAR 0 3
43613: PUSH
43614: LD_VAR 0 4
43618: PUSH
43619: LD_VAR 0 8
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: ST_TO_ADDR
// exit ;
43628: POP
43629: POP
43630: POP
43631: POP
43632: GO 43642
// end ; end ;
43634: GO 43570
43636: POP
43637: POP
// end ;
43638: GO 43456
43640: POP
43641: POP
// end ;
43642: LD_VAR 0 3
43646: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
43647: LD_INT 0
43649: PPUSH
// if not side or side > 8 then
43650: LD_VAR 0 3
43654: NOT
43655: PUSH
43656: LD_VAR 0 3
43660: PUSH
43661: LD_INT 8
43663: GREATER
43664: OR
43665: IFFALSE 43669
// exit ;
43667: GO 43728
// if not range then
43669: LD_VAR 0 4
43673: NOT
43674: IFFALSE 43685
// range := - 12 ;
43676: LD_ADDR_VAR 0 4
43680: PUSH
43681: LD_INT 12
43683: NEG
43684: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
43685: LD_VAR 0 1
43689: PPUSH
43690: LD_VAR 0 2
43694: PPUSH
43695: LD_VAR 0 3
43699: PPUSH
43700: LD_VAR 0 4
43704: PPUSH
43705: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
43709: LD_VAR 0 1
43713: PPUSH
43714: LD_VAR 0 2
43718: PPUSH
43719: LD_VAR 0 3
43723: PPUSH
43724: CALL_OW 331
// end ;
43728: LD_VAR 0 5
43732: RET
// export function Video ( mode ) ; begin
43733: LD_INT 0
43735: PPUSH
// ingame_video = mode ;
43736: LD_ADDR_OWVAR 52
43740: PUSH
43741: LD_VAR 0 1
43745: ST_TO_ADDR
// interface_hidden = mode ;
43746: LD_ADDR_OWVAR 54
43750: PUSH
43751: LD_VAR 0 1
43755: ST_TO_ADDR
// end ;
43756: LD_VAR 0 2
43760: RET
// export function Join ( array , element ) ; begin
43761: LD_INT 0
43763: PPUSH
// result := Replace ( array , array + 1 , element ) ;
43764: LD_ADDR_VAR 0 3
43768: PUSH
43769: LD_VAR 0 1
43773: PPUSH
43774: LD_VAR 0 1
43778: PUSH
43779: LD_INT 1
43781: PLUS
43782: PPUSH
43783: LD_VAR 0 2
43787: PPUSH
43788: CALL_OW 1
43792: ST_TO_ADDR
// end ;
43793: LD_VAR 0 3
43797: RET
// export function JoinUnion ( array , element ) ; begin
43798: LD_INT 0
43800: PPUSH
// result := array union element ;
43801: LD_ADDR_VAR 0 3
43805: PUSH
43806: LD_VAR 0 1
43810: PUSH
43811: LD_VAR 0 2
43815: UNION
43816: ST_TO_ADDR
// end ;
43817: LD_VAR 0 3
43821: RET
// export function GetBehemoths ( side ) ; begin
43822: LD_INT 0
43824: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
43825: LD_ADDR_VAR 0 2
43829: PUSH
43830: LD_INT 22
43832: PUSH
43833: LD_VAR 0 1
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 31
43844: PUSH
43845: LD_INT 25
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PPUSH
43856: CALL_OW 69
43860: ST_TO_ADDR
// end ;
43861: LD_VAR 0 2
43865: RET
// export function Shuffle ( array ) ; var i , index ; begin
43866: LD_INT 0
43868: PPUSH
43869: PPUSH
43870: PPUSH
// result := [ ] ;
43871: LD_ADDR_VAR 0 2
43875: PUSH
43876: EMPTY
43877: ST_TO_ADDR
// if not array then
43878: LD_VAR 0 1
43882: NOT
43883: IFFALSE 43887
// exit ;
43885: GO 43986
// Randomize ;
43887: CALL_OW 10
// for i = array downto 1 do
43891: LD_ADDR_VAR 0 3
43895: PUSH
43896: DOUBLE
43897: LD_VAR 0 1
43901: INC
43902: ST_TO_ADDR
43903: LD_INT 1
43905: PUSH
43906: FOR_DOWNTO
43907: IFFALSE 43984
// begin index := rand ( 1 , array ) ;
43909: LD_ADDR_VAR 0 4
43913: PUSH
43914: LD_INT 1
43916: PPUSH
43917: LD_VAR 0 1
43921: PPUSH
43922: CALL_OW 12
43926: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
43927: LD_ADDR_VAR 0 2
43931: PUSH
43932: LD_VAR 0 2
43936: PPUSH
43937: LD_VAR 0 2
43941: PUSH
43942: LD_INT 1
43944: PLUS
43945: PPUSH
43946: LD_VAR 0 1
43950: PUSH
43951: LD_VAR 0 4
43955: ARRAY
43956: PPUSH
43957: CALL_OW 2
43961: ST_TO_ADDR
// array := Delete ( array , index ) ;
43962: LD_ADDR_VAR 0 1
43966: PUSH
43967: LD_VAR 0 1
43971: PPUSH
43972: LD_VAR 0 4
43976: PPUSH
43977: CALL_OW 3
43981: ST_TO_ADDR
// end ;
43982: GO 43906
43984: POP
43985: POP
// end ;
43986: LD_VAR 0 2
43990: RET
// export function GetBaseMaterials ( base ) ; begin
43991: LD_INT 0
43993: PPUSH
// result := [ 0 , 0 , 0 ] ;
43994: LD_ADDR_VAR 0 2
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: ST_TO_ADDR
// if not base then
44013: LD_VAR 0 1
44017: NOT
44018: IFFALSE 44022
// exit ;
44020: GO 44071
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44022: LD_ADDR_VAR 0 2
44026: PUSH
44027: LD_VAR 0 1
44031: PPUSH
44032: LD_INT 1
44034: PPUSH
44035: CALL_OW 275
44039: PUSH
44040: LD_VAR 0 1
44044: PPUSH
44045: LD_INT 2
44047: PPUSH
44048: CALL_OW 275
44052: PUSH
44053: LD_VAR 0 1
44057: PPUSH
44058: LD_INT 3
44060: PPUSH
44061: CALL_OW 275
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: ST_TO_ADDR
// end ;
44071: LD_VAR 0 2
44075: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44076: LD_INT 0
44078: PPUSH
44079: PPUSH
// result := array ;
44080: LD_ADDR_VAR 0 3
44084: PUSH
44085: LD_VAR 0 1
44089: ST_TO_ADDR
// if size >= result then
44090: LD_VAR 0 2
44094: PUSH
44095: LD_VAR 0 3
44099: GREATEREQUAL
44100: IFFALSE 44104
// exit ;
44102: GO 44154
// if size then
44104: LD_VAR 0 2
44108: IFFALSE 44154
// for i := array downto size do
44110: LD_ADDR_VAR 0 4
44114: PUSH
44115: DOUBLE
44116: LD_VAR 0 1
44120: INC
44121: ST_TO_ADDR
44122: LD_VAR 0 2
44126: PUSH
44127: FOR_DOWNTO
44128: IFFALSE 44152
// result := Delete ( result , result ) ;
44130: LD_ADDR_VAR 0 3
44134: PUSH
44135: LD_VAR 0 3
44139: PPUSH
44140: LD_VAR 0 3
44144: PPUSH
44145: CALL_OW 3
44149: ST_TO_ADDR
44150: GO 44127
44152: POP
44153: POP
// end ;
44154: LD_VAR 0 3
44158: RET
// export function ComExit ( unit ) ; var tmp ; begin
44159: LD_INT 0
44161: PPUSH
44162: PPUSH
// if not IsInUnit ( unit ) then
44163: LD_VAR 0 1
44167: PPUSH
44168: CALL_OW 310
44172: NOT
44173: IFFALSE 44177
// exit ;
44175: GO 44237
// tmp := IsInUnit ( unit ) ;
44177: LD_ADDR_VAR 0 3
44181: PUSH
44182: LD_VAR 0 1
44186: PPUSH
44187: CALL_OW 310
44191: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44192: LD_VAR 0 3
44196: PPUSH
44197: CALL_OW 247
44201: PUSH
44202: LD_INT 2
44204: EQUAL
44205: IFFALSE 44218
// ComExitVehicle ( unit ) else
44207: LD_VAR 0 1
44211: PPUSH
44212: CALL_OW 121
44216: GO 44227
// ComExitBuilding ( unit ) ;
44218: LD_VAR 0 1
44222: PPUSH
44223: CALL_OW 122
// result := tmp ;
44227: LD_ADDR_VAR 0 2
44231: PUSH
44232: LD_VAR 0 3
44236: ST_TO_ADDR
// end ;
44237: LD_VAR 0 2
44241: RET
// export function ComExitAll ( units ) ; var i ; begin
44242: LD_INT 0
44244: PPUSH
44245: PPUSH
// if not units then
44246: LD_VAR 0 1
44250: NOT
44251: IFFALSE 44255
// exit ;
44253: GO 44281
// for i in units do
44255: LD_ADDR_VAR 0 3
44259: PUSH
44260: LD_VAR 0 1
44264: PUSH
44265: FOR_IN
44266: IFFALSE 44279
// ComExit ( i ) ;
44268: LD_VAR 0 3
44272: PPUSH
44273: CALL 44159 0 1
44277: GO 44265
44279: POP
44280: POP
// end ;
44281: LD_VAR 0 2
44285: RET
// export function ResetHc ; begin
44286: LD_INT 0
44288: PPUSH
// InitHc ;
44289: CALL_OW 19
// hc_importance := 0 ;
44293: LD_ADDR_OWVAR 32
44297: PUSH
44298: LD_INT 0
44300: ST_TO_ADDR
// end ;
44301: LD_VAR 0 1
44305: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44306: LD_INT 0
44308: PPUSH
44309: PPUSH
44310: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44311: LD_ADDR_VAR 0 6
44315: PUSH
44316: LD_VAR 0 1
44320: PUSH
44321: LD_VAR 0 3
44325: PLUS
44326: PUSH
44327: LD_INT 2
44329: DIV
44330: ST_TO_ADDR
// if _x < 0 then
44331: LD_VAR 0 6
44335: PUSH
44336: LD_INT 0
44338: LESS
44339: IFFALSE 44356
// _x := _x * - 1 ;
44341: LD_ADDR_VAR 0 6
44345: PUSH
44346: LD_VAR 0 6
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: MUL
44355: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44356: LD_ADDR_VAR 0 7
44360: PUSH
44361: LD_VAR 0 2
44365: PUSH
44366: LD_VAR 0 4
44370: PLUS
44371: PUSH
44372: LD_INT 2
44374: DIV
44375: ST_TO_ADDR
// if _y < 0 then
44376: LD_VAR 0 7
44380: PUSH
44381: LD_INT 0
44383: LESS
44384: IFFALSE 44401
// _y := _y * - 1 ;
44386: LD_ADDR_VAR 0 7
44390: PUSH
44391: LD_VAR 0 7
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: MUL
44400: ST_TO_ADDR
// result := [ _x , _y ] ;
44401: LD_ADDR_VAR 0 5
44405: PUSH
44406: LD_VAR 0 6
44410: PUSH
44411: LD_VAR 0 7
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: ST_TO_ADDR
// end ;
44420: LD_VAR 0 5
44424: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
44425: LD_INT 0
44427: PPUSH
44428: PPUSH
44429: PPUSH
44430: PPUSH
// task := GetTaskList ( unit ) ;
44431: LD_ADDR_VAR 0 7
44435: PUSH
44436: LD_VAR 0 1
44440: PPUSH
44441: CALL_OW 437
44445: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
44446: LD_VAR 0 7
44450: NOT
44451: PUSH
44452: LD_VAR 0 1
44456: PPUSH
44457: LD_VAR 0 2
44461: PPUSH
44462: CALL_OW 308
44466: NOT
44467: AND
44468: IFFALSE 44472
// exit ;
44470: GO 44590
// if IsInArea ( unit , area ) then
44472: LD_VAR 0 1
44476: PPUSH
44477: LD_VAR 0 2
44481: PPUSH
44482: CALL_OW 308
44486: IFFALSE 44504
// begin ComMoveToArea ( unit , goAway ) ;
44488: LD_VAR 0 1
44492: PPUSH
44493: LD_VAR 0 3
44497: PPUSH
44498: CALL_OW 113
// exit ;
44502: GO 44590
// end ; if task [ 1 ] [ 1 ] <> M then
44504: LD_VAR 0 7
44508: PUSH
44509: LD_INT 1
44511: ARRAY
44512: PUSH
44513: LD_INT 1
44515: ARRAY
44516: PUSH
44517: LD_STRING M
44519: NONEQUAL
44520: IFFALSE 44524
// exit ;
44522: GO 44590
// x := task [ 1 ] [ 2 ] ;
44524: LD_ADDR_VAR 0 5
44528: PUSH
44529: LD_VAR 0 7
44533: PUSH
44534: LD_INT 1
44536: ARRAY
44537: PUSH
44538: LD_INT 2
44540: ARRAY
44541: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
44542: LD_ADDR_VAR 0 6
44546: PUSH
44547: LD_VAR 0 7
44551: PUSH
44552: LD_INT 1
44554: ARRAY
44555: PUSH
44556: LD_INT 3
44558: ARRAY
44559: ST_TO_ADDR
// if InArea ( x , y , area ) then
44560: LD_VAR 0 5
44564: PPUSH
44565: LD_VAR 0 6
44569: PPUSH
44570: LD_VAR 0 2
44574: PPUSH
44575: CALL_OW 309
44579: IFFALSE 44590
// ComStop ( unit ) ;
44581: LD_VAR 0 1
44585: PPUSH
44586: CALL_OW 141
// end ;
44590: LD_VAR 0 4
44594: RET
// export function Abs ( value ) ; begin
44595: LD_INT 0
44597: PPUSH
// result := value ;
44598: LD_ADDR_VAR 0 2
44602: PUSH
44603: LD_VAR 0 1
44607: ST_TO_ADDR
// if value < 0 then
44608: LD_VAR 0 1
44612: PUSH
44613: LD_INT 0
44615: LESS
44616: IFFALSE 44633
// result := value * - 1 ;
44618: LD_ADDR_VAR 0 2
44622: PUSH
44623: LD_VAR 0 1
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: MUL
44632: ST_TO_ADDR
// end ;
44633: LD_VAR 0 2
44637: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
44638: LD_INT 0
44640: PPUSH
44641: PPUSH
44642: PPUSH
44643: PPUSH
44644: PPUSH
44645: PPUSH
44646: PPUSH
44647: PPUSH
// if not unit or not building then
44648: LD_VAR 0 1
44652: NOT
44653: PUSH
44654: LD_VAR 0 2
44658: NOT
44659: OR
44660: IFFALSE 44664
// exit ;
44662: GO 44890
// x := GetX ( building ) ;
44664: LD_ADDR_VAR 0 4
44668: PUSH
44669: LD_VAR 0 2
44673: PPUSH
44674: CALL_OW 250
44678: ST_TO_ADDR
// y := GetY ( building ) ;
44679: LD_ADDR_VAR 0 6
44683: PUSH
44684: LD_VAR 0 2
44688: PPUSH
44689: CALL_OW 251
44693: ST_TO_ADDR
// d := GetDir ( building ) ;
44694: LD_ADDR_VAR 0 8
44698: PUSH
44699: LD_VAR 0 2
44703: PPUSH
44704: CALL_OW 254
44708: ST_TO_ADDR
// r := 4 ;
44709: LD_ADDR_VAR 0 9
44713: PUSH
44714: LD_INT 4
44716: ST_TO_ADDR
// for i := 1 to 5 do
44717: LD_ADDR_VAR 0 10
44721: PUSH
44722: DOUBLE
44723: LD_INT 1
44725: DEC
44726: ST_TO_ADDR
44727: LD_INT 5
44729: PUSH
44730: FOR_TO
44731: IFFALSE 44888
// begin _x := ShiftX ( x , d , r + i ) ;
44733: LD_ADDR_VAR 0 5
44737: PUSH
44738: LD_VAR 0 4
44742: PPUSH
44743: LD_VAR 0 8
44747: PPUSH
44748: LD_VAR 0 9
44752: PUSH
44753: LD_VAR 0 10
44757: PLUS
44758: PPUSH
44759: CALL_OW 272
44763: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
44764: LD_ADDR_VAR 0 7
44768: PUSH
44769: LD_VAR 0 6
44773: PPUSH
44774: LD_VAR 0 8
44778: PPUSH
44779: LD_VAR 0 9
44783: PUSH
44784: LD_VAR 0 10
44788: PLUS
44789: PPUSH
44790: CALL_OW 273
44794: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
44795: LD_VAR 0 5
44799: PPUSH
44800: LD_VAR 0 7
44804: PPUSH
44805: CALL_OW 488
44809: PUSH
44810: LD_VAR 0 5
44814: PPUSH
44815: LD_VAR 0 7
44819: PPUSH
44820: CALL_OW 428
44824: PPUSH
44825: CALL_OW 247
44829: PUSH
44830: LD_INT 3
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: IN
44840: NOT
44841: AND
44842: IFFALSE 44886
// begin ComMoveXY ( unit , _x , _y ) ;
44844: LD_VAR 0 1
44848: PPUSH
44849: LD_VAR 0 5
44853: PPUSH
44854: LD_VAR 0 7
44858: PPUSH
44859: CALL_OW 111
// result := [ _x , _y ] ;
44863: LD_ADDR_VAR 0 3
44867: PUSH
44868: LD_VAR 0 5
44872: PUSH
44873: LD_VAR 0 7
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: ST_TO_ADDR
// exit ;
44882: POP
44883: POP
44884: GO 44890
// end ; end ;
44886: GO 44730
44888: POP
44889: POP
// end ;
44890: LD_VAR 0 3
44894: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
44895: LD_INT 0
44897: PPUSH
44898: PPUSH
44899: PPUSH
// result := 0 ;
44900: LD_ADDR_VAR 0 3
44904: PUSH
44905: LD_INT 0
44907: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
44908: LD_VAR 0 1
44912: PUSH
44913: LD_INT 0
44915: LESS
44916: PUSH
44917: LD_VAR 0 1
44921: PUSH
44922: LD_INT 8
44924: GREATER
44925: OR
44926: PUSH
44927: LD_VAR 0 2
44931: PUSH
44932: LD_INT 0
44934: LESS
44935: OR
44936: PUSH
44937: LD_VAR 0 2
44941: PUSH
44942: LD_INT 8
44944: GREATER
44945: OR
44946: IFFALSE 44950
// exit ;
44948: GO 45025
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
44950: LD_ADDR_VAR 0 4
44954: PUSH
44955: LD_INT 22
44957: PUSH
44958: LD_VAR 0 2
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PPUSH
44967: CALL_OW 69
44971: PUSH
44972: FOR_IN
44973: IFFALSE 45023
// begin un := UnitShoot ( i ) ;
44975: LD_ADDR_VAR 0 5
44979: PUSH
44980: LD_VAR 0 4
44984: PPUSH
44985: CALL_OW 504
44989: ST_TO_ADDR
// if GetSide ( un ) = side1 then
44990: LD_VAR 0 5
44994: PPUSH
44995: CALL_OW 255
44999: PUSH
45000: LD_VAR 0 1
45004: EQUAL
45005: IFFALSE 45021
// begin result := un ;
45007: LD_ADDR_VAR 0 3
45011: PUSH
45012: LD_VAR 0 5
45016: ST_TO_ADDR
// exit ;
45017: POP
45018: POP
45019: GO 45025
// end ; end ;
45021: GO 44972
45023: POP
45024: POP
// end ;
45025: LD_VAR 0 3
45029: RET
// export function GetCargoBay ( units ) ; begin
45030: LD_INT 0
45032: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45033: LD_ADDR_VAR 0 2
45037: PUSH
45038: LD_VAR 0 1
45042: PPUSH
45043: LD_INT 2
45045: PUSH
45046: LD_INT 34
45048: PUSH
45049: LD_INT 12
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 34
45058: PUSH
45059: LD_INT 51
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 34
45068: PUSH
45069: LD_INT 32
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 34
45078: PUSH
45079: LD_EXP 39
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: PPUSH
45095: CALL_OW 72
45099: ST_TO_ADDR
// end ;
45100: LD_VAR 0 2
45104: RET
// export function Negate ( value ) ; begin
45105: LD_INT 0
45107: PPUSH
// result := not value ;
45108: LD_ADDR_VAR 0 2
45112: PUSH
45113: LD_VAR 0 1
45117: NOT
45118: ST_TO_ADDR
// end ;
45119: LD_VAR 0 2
45123: RET
// export function Inc ( value ) ; begin
45124: LD_INT 0
45126: PPUSH
// result := value + 1 ;
45127: LD_ADDR_VAR 0 2
45131: PUSH
45132: LD_VAR 0 1
45136: PUSH
45137: LD_INT 1
45139: PLUS
45140: ST_TO_ADDR
// end ;
45141: LD_VAR 0 2
45145: RET
// export function Dec ( value ) ; begin
45146: LD_INT 0
45148: PPUSH
// result := value - 1 ;
45149: LD_ADDR_VAR 0 2
45153: PUSH
45154: LD_VAR 0 1
45158: PUSH
45159: LD_INT 1
45161: MINUS
45162: ST_TO_ADDR
// end ;
45163: LD_VAR 0 2
45167: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
45168: LD_INT 0
45170: PPUSH
45171: PPUSH
45172: PPUSH
45173: PPUSH
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
45178: LD_VAR 0 1
45182: PPUSH
45183: LD_VAR 0 2
45187: PPUSH
45188: CALL_OW 488
45192: NOT
45193: PUSH
45194: LD_VAR 0 3
45198: PPUSH
45199: LD_VAR 0 4
45203: PPUSH
45204: CALL_OW 488
45208: NOT
45209: OR
45210: IFFALSE 45223
// begin result := - 1 ;
45212: LD_ADDR_VAR 0 5
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: ST_TO_ADDR
// exit ;
45221: GO 45458
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
45223: LD_ADDR_VAR 0 12
45227: PUSH
45228: LD_VAR 0 1
45232: PPUSH
45233: LD_VAR 0 2
45237: PPUSH
45238: LD_VAR 0 3
45242: PPUSH
45243: LD_VAR 0 4
45247: PPUSH
45248: CALL 44306 0 4
45252: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
45253: LD_ADDR_VAR 0 11
45257: PUSH
45258: LD_VAR 0 1
45262: PPUSH
45263: LD_VAR 0 2
45267: PPUSH
45268: LD_VAR 0 12
45272: PUSH
45273: LD_INT 1
45275: ARRAY
45276: PPUSH
45277: LD_VAR 0 12
45281: PUSH
45282: LD_INT 2
45284: ARRAY
45285: PPUSH
45286: CALL_OW 298
45290: ST_TO_ADDR
// distance := 9999 ;
45291: LD_ADDR_VAR 0 10
45295: PUSH
45296: LD_INT 9999
45298: ST_TO_ADDR
// for i := 0 to 5 do
45299: LD_ADDR_VAR 0 6
45303: PUSH
45304: DOUBLE
45305: LD_INT 0
45307: DEC
45308: ST_TO_ADDR
45309: LD_INT 5
45311: PUSH
45312: FOR_TO
45313: IFFALSE 45456
// begin _x := ShiftX ( x1 , i , centerDist ) ;
45315: LD_ADDR_VAR 0 7
45319: PUSH
45320: LD_VAR 0 1
45324: PPUSH
45325: LD_VAR 0 6
45329: PPUSH
45330: LD_VAR 0 11
45334: PPUSH
45335: CALL_OW 272
45339: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
45340: LD_ADDR_VAR 0 8
45344: PUSH
45345: LD_VAR 0 2
45349: PPUSH
45350: LD_VAR 0 6
45354: PPUSH
45355: LD_VAR 0 11
45359: PPUSH
45360: CALL_OW 273
45364: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45365: LD_VAR 0 7
45369: PPUSH
45370: LD_VAR 0 8
45374: PPUSH
45375: CALL_OW 488
45379: NOT
45380: IFFALSE 45384
// continue ;
45382: GO 45312
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
45384: LD_ADDR_VAR 0 9
45388: PUSH
45389: LD_VAR 0 12
45393: PUSH
45394: LD_INT 1
45396: ARRAY
45397: PPUSH
45398: LD_VAR 0 12
45402: PUSH
45403: LD_INT 2
45405: ARRAY
45406: PPUSH
45407: LD_VAR 0 7
45411: PPUSH
45412: LD_VAR 0 8
45416: PPUSH
45417: CALL_OW 298
45421: ST_TO_ADDR
// if tmp < distance then
45422: LD_VAR 0 9
45426: PUSH
45427: LD_VAR 0 10
45431: LESS
45432: IFFALSE 45454
// begin result := i ;
45434: LD_ADDR_VAR 0 5
45438: PUSH
45439: LD_VAR 0 6
45443: ST_TO_ADDR
// distance := tmp ;
45444: LD_ADDR_VAR 0 10
45448: PUSH
45449: LD_VAR 0 9
45453: ST_TO_ADDR
// end ; end ;
45454: GO 45312
45456: POP
45457: POP
// end ;
45458: LD_VAR 0 5
45462: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45463: LD_INT 0
45465: PPUSH
45466: PPUSH
// if not driver or not IsInUnit ( driver ) then
45467: LD_VAR 0 1
45471: NOT
45472: PUSH
45473: LD_VAR 0 1
45477: PPUSH
45478: CALL_OW 310
45482: NOT
45483: OR
45484: IFFALSE 45488
// exit ;
45486: GO 45578
// vehicle := IsInUnit ( driver ) ;
45488: LD_ADDR_VAR 0 3
45492: PUSH
45493: LD_VAR 0 1
45497: PPUSH
45498: CALL_OW 310
45502: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45503: LD_VAR 0 1
45507: PPUSH
45508: LD_STRING \
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: PUSH
45538: LD_STRING E
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_VAR 0 3
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PPUSH
45574: CALL_OW 446
// end ;
45578: LD_VAR 0 2
45582: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45583: LD_INT 0
45585: PPUSH
45586: PPUSH
// if not driver or not IsInUnit ( driver ) then
45587: LD_VAR 0 1
45591: NOT
45592: PUSH
45593: LD_VAR 0 1
45597: PPUSH
45598: CALL_OW 310
45602: NOT
45603: OR
45604: IFFALSE 45608
// exit ;
45606: GO 45698
// vehicle := IsInUnit ( driver ) ;
45608: LD_ADDR_VAR 0 3
45612: PUSH
45613: LD_VAR 0 1
45617: PPUSH
45618: CALL_OW 310
45622: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45623: LD_VAR 0 1
45627: PPUSH
45628: LD_STRING \
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: PUSH
45658: LD_STRING E
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_VAR 0 3
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PPUSH
45694: CALL_OW 447
// end ;
45698: LD_VAR 0 2
45702: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
45703: LD_INT 0
45705: PPUSH
45706: PPUSH
45707: PPUSH
// tmp := [ ] ;
45708: LD_ADDR_VAR 0 5
45712: PUSH
45713: EMPTY
45714: ST_TO_ADDR
// for i in units do
45715: LD_ADDR_VAR 0 4
45719: PUSH
45720: LD_VAR 0 1
45724: PUSH
45725: FOR_IN
45726: IFFALSE 45764
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
45728: LD_ADDR_VAR 0 5
45732: PUSH
45733: LD_VAR 0 5
45737: PPUSH
45738: LD_VAR 0 5
45742: PUSH
45743: LD_INT 1
45745: PLUS
45746: PPUSH
45747: LD_VAR 0 4
45751: PPUSH
45752: CALL_OW 256
45756: PPUSH
45757: CALL_OW 2
45761: ST_TO_ADDR
45762: GO 45725
45764: POP
45765: POP
// if not tmp then
45766: LD_VAR 0 5
45770: NOT
45771: IFFALSE 45775
// exit ;
45773: GO 45823
// if asc then
45775: LD_VAR 0 2
45779: IFFALSE 45803
// result := SortListByListAsc ( units , tmp ) else
45781: LD_ADDR_VAR 0 3
45785: PUSH
45786: LD_VAR 0 1
45790: PPUSH
45791: LD_VAR 0 5
45795: PPUSH
45796: CALL_OW 76
45800: ST_TO_ADDR
45801: GO 45823
// result := SortListByListDesc ( units , tmp ) ;
45803: LD_ADDR_VAR 0 3
45807: PUSH
45808: LD_VAR 0 1
45812: PPUSH
45813: LD_VAR 0 5
45817: PPUSH
45818: CALL_OW 77
45822: ST_TO_ADDR
// end ;
45823: LD_VAR 0 3
45827: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
45828: LD_INT 0
45830: PPUSH
45831: PPUSH
// task := GetTaskList ( mech ) ;
45832: LD_ADDR_VAR 0 4
45836: PUSH
45837: LD_VAR 0 1
45841: PPUSH
45842: CALL_OW 437
45846: ST_TO_ADDR
// if not task then
45847: LD_VAR 0 4
45851: NOT
45852: IFFALSE 45856
// exit ;
45854: GO 45898
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
45856: LD_ADDR_VAR 0 3
45860: PUSH
45861: LD_VAR 0 4
45865: PUSH
45866: LD_INT 1
45868: ARRAY
45869: PUSH
45870: LD_INT 1
45872: ARRAY
45873: PUSH
45874: LD_STRING r
45876: EQUAL
45877: PUSH
45878: LD_VAR 0 4
45882: PUSH
45883: LD_INT 1
45885: ARRAY
45886: PUSH
45887: LD_INT 4
45889: ARRAY
45890: PUSH
45891: LD_VAR 0 2
45895: EQUAL
45896: AND
45897: ST_TO_ADDR
// end ;
45898: LD_VAR 0 3
45902: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
45903: LD_INT 0
45905: PPUSH
// SetDir ( unit , d ) ;
45906: LD_VAR 0 1
45910: PPUSH
45911: LD_VAR 0 4
45915: PPUSH
45916: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
45920: LD_VAR 0 1
45924: PPUSH
45925: LD_VAR 0 2
45929: PPUSH
45930: LD_VAR 0 3
45934: PPUSH
45935: LD_VAR 0 5
45939: PPUSH
45940: CALL_OW 48
// end ;
45944: LD_VAR 0 6
45948: RET
// export function ToNaturalNumber ( number ) ; begin
45949: LD_INT 0
45951: PPUSH
// result := number div 1 ;
45952: LD_ADDR_VAR 0 2
45956: PUSH
45957: LD_VAR 0 1
45961: PUSH
45962: LD_INT 1
45964: DIV
45965: ST_TO_ADDR
// if number < 0 then
45966: LD_VAR 0 1
45970: PUSH
45971: LD_INT 0
45973: LESS
45974: IFFALSE 45984
// result := 0 ;
45976: LD_ADDR_VAR 0 2
45980: PUSH
45981: LD_INT 0
45983: ST_TO_ADDR
// end ;
45984: LD_VAR 0 2
45988: RET
// export function SortByClass ( units , class ) ; var un ; begin
45989: LD_INT 0
45991: PPUSH
45992: PPUSH
// if not units or not class then
45993: LD_VAR 0 1
45997: NOT
45998: PUSH
45999: LD_VAR 0 2
46003: NOT
46004: OR
46005: IFFALSE 46009
// exit ;
46007: GO 46104
// result := [ ] ;
46009: LD_ADDR_VAR 0 3
46013: PUSH
46014: EMPTY
46015: ST_TO_ADDR
// for un in units do
46016: LD_ADDR_VAR 0 4
46020: PUSH
46021: LD_VAR 0 1
46025: PUSH
46026: FOR_IN
46027: IFFALSE 46102
// if GetClass ( un ) = class then
46029: LD_VAR 0 4
46033: PPUSH
46034: CALL_OW 257
46038: PUSH
46039: LD_VAR 0 2
46043: EQUAL
46044: IFFALSE 46071
// result := Insert ( result , 1 , un ) else
46046: LD_ADDR_VAR 0 3
46050: PUSH
46051: LD_VAR 0 3
46055: PPUSH
46056: LD_INT 1
46058: PPUSH
46059: LD_VAR 0 4
46063: PPUSH
46064: CALL_OW 2
46068: ST_TO_ADDR
46069: GO 46100
// result := Replace ( result , result + 1 , un ) ;
46071: LD_ADDR_VAR 0 3
46075: PUSH
46076: LD_VAR 0 3
46080: PPUSH
46081: LD_VAR 0 3
46085: PUSH
46086: LD_INT 1
46088: PLUS
46089: PPUSH
46090: LD_VAR 0 4
46094: PPUSH
46095: CALL_OW 1
46099: ST_TO_ADDR
46100: GO 46026
46102: POP
46103: POP
// end ;
46104: LD_VAR 0 3
46108: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46109: LD_INT 0
46111: PPUSH
46112: PPUSH
46113: PPUSH
46114: PPUSH
46115: PPUSH
46116: PPUSH
46117: PPUSH
// result := [ ] ;
46118: LD_ADDR_VAR 0 4
46122: PUSH
46123: EMPTY
46124: ST_TO_ADDR
// if x - r < 0 then
46125: LD_VAR 0 1
46129: PUSH
46130: LD_VAR 0 3
46134: MINUS
46135: PUSH
46136: LD_INT 0
46138: LESS
46139: IFFALSE 46151
// min_x := 0 else
46141: LD_ADDR_VAR 0 8
46145: PUSH
46146: LD_INT 0
46148: ST_TO_ADDR
46149: GO 46167
// min_x := x - r ;
46151: LD_ADDR_VAR 0 8
46155: PUSH
46156: LD_VAR 0 1
46160: PUSH
46161: LD_VAR 0 3
46165: MINUS
46166: ST_TO_ADDR
// if y - r < 0 then
46167: LD_VAR 0 2
46171: PUSH
46172: LD_VAR 0 3
46176: MINUS
46177: PUSH
46178: LD_INT 0
46180: LESS
46181: IFFALSE 46193
// min_y := 0 else
46183: LD_ADDR_VAR 0 7
46187: PUSH
46188: LD_INT 0
46190: ST_TO_ADDR
46191: GO 46209
// min_y := y - r ;
46193: LD_ADDR_VAR 0 7
46197: PUSH
46198: LD_VAR 0 2
46202: PUSH
46203: LD_VAR 0 3
46207: MINUS
46208: ST_TO_ADDR
// max_x := x + r ;
46209: LD_ADDR_VAR 0 9
46213: PUSH
46214: LD_VAR 0 1
46218: PUSH
46219: LD_VAR 0 3
46223: PLUS
46224: ST_TO_ADDR
// max_y := y + r ;
46225: LD_ADDR_VAR 0 10
46229: PUSH
46230: LD_VAR 0 2
46234: PUSH
46235: LD_VAR 0 3
46239: PLUS
46240: ST_TO_ADDR
// for _x = min_x to max_x do
46241: LD_ADDR_VAR 0 5
46245: PUSH
46246: DOUBLE
46247: LD_VAR 0 8
46251: DEC
46252: ST_TO_ADDR
46253: LD_VAR 0 9
46257: PUSH
46258: FOR_TO
46259: IFFALSE 46360
// for _y = min_y to max_y do
46261: LD_ADDR_VAR 0 6
46265: PUSH
46266: DOUBLE
46267: LD_VAR 0 7
46271: DEC
46272: ST_TO_ADDR
46273: LD_VAR 0 10
46277: PUSH
46278: FOR_TO
46279: IFFALSE 46356
// begin if not ValidHex ( _x , _y ) then
46281: LD_VAR 0 5
46285: PPUSH
46286: LD_VAR 0 6
46290: PPUSH
46291: CALL_OW 488
46295: NOT
46296: IFFALSE 46300
// continue ;
46298: GO 46278
// if GetResourceTypeXY ( _x , _y ) then
46300: LD_VAR 0 5
46304: PPUSH
46305: LD_VAR 0 6
46309: PPUSH
46310: CALL_OW 283
46314: IFFALSE 46354
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
46316: LD_ADDR_VAR 0 4
46320: PUSH
46321: LD_VAR 0 4
46325: PPUSH
46326: LD_VAR 0 4
46330: PUSH
46331: LD_INT 1
46333: PLUS
46334: PPUSH
46335: LD_VAR 0 5
46339: PUSH
46340: LD_VAR 0 6
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PPUSH
46349: CALL_OW 1
46353: ST_TO_ADDR
// end ;
46354: GO 46278
46356: POP
46357: POP
46358: GO 46258
46360: POP
46361: POP
// end ;
46362: LD_VAR 0 4
46366: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
46367: LD_INT 0
46369: PPUSH
46370: PPUSH
46371: PPUSH
46372: PPUSH
46373: PPUSH
46374: PPUSH
46375: PPUSH
46376: PPUSH
// if not units then
46377: LD_VAR 0 1
46381: NOT
46382: IFFALSE 46386
// exit ;
46384: GO 46912
// result := UnitFilter ( units , [ f_ok ] ) ;
46386: LD_ADDR_VAR 0 3
46390: PUSH
46391: LD_VAR 0 1
46395: PPUSH
46396: LD_INT 50
46398: PUSH
46399: EMPTY
46400: LIST
46401: PPUSH
46402: CALL_OW 72
46406: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
46407: LD_ADDR_VAR 0 8
46411: PUSH
46412: LD_VAR 0 1
46416: PUSH
46417: LD_INT 1
46419: ARRAY
46420: PPUSH
46421: CALL_OW 255
46425: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
46426: LD_ADDR_VAR 0 10
46430: PUSH
46431: LD_INT 29
46433: PUSH
46434: LD_EXP 42
46438: PUSH
46439: LD_INT 49
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: LIST
46446: ST_TO_ADDR
// if not result then
46447: LD_VAR 0 3
46451: NOT
46452: IFFALSE 46456
// exit ;
46454: GO 46912
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
46456: LD_ADDR_VAR 0 5
46460: PUSH
46461: LD_INT 81
46463: PUSH
46464: LD_VAR 0 8
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PPUSH
46473: CALL_OW 69
46477: ST_TO_ADDR
// for i in result do
46478: LD_ADDR_VAR 0 4
46482: PUSH
46483: LD_VAR 0 3
46487: PUSH
46488: FOR_IN
46489: IFFALSE 46910
// begin tag := GetTag ( i ) + 1 ;
46491: LD_ADDR_VAR 0 9
46495: PUSH
46496: LD_VAR 0 4
46500: PPUSH
46501: CALL_OW 110
46505: PUSH
46506: LD_INT 1
46508: PLUS
46509: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
46510: LD_ADDR_VAR 0 7
46514: PUSH
46515: LD_VAR 0 4
46519: PPUSH
46520: CALL_OW 250
46524: PPUSH
46525: LD_VAR 0 4
46529: PPUSH
46530: CALL_OW 251
46534: PPUSH
46535: LD_INT 6
46537: PPUSH
46538: CALL 46109 0 3
46542: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
46543: LD_VAR 0 4
46547: PPUSH
46548: CALL_OW 247
46552: PUSH
46553: LD_INT 2
46555: EQUAL
46556: PUSH
46557: LD_VAR 0 7
46561: AND
46562: PUSH
46563: LD_VAR 0 4
46567: PPUSH
46568: CALL_OW 264
46572: PUSH
46573: LD_VAR 0 10
46577: IN
46578: NOT
46579: AND
46580: IFFALSE 46619
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
46582: LD_VAR 0 4
46586: PPUSH
46587: LD_VAR 0 7
46591: PUSH
46592: LD_INT 1
46594: ARRAY
46595: PUSH
46596: LD_INT 1
46598: ARRAY
46599: PPUSH
46600: LD_VAR 0 7
46604: PUSH
46605: LD_INT 1
46607: ARRAY
46608: PUSH
46609: LD_INT 2
46611: ARRAY
46612: PPUSH
46613: CALL_OW 116
46617: GO 46908
// if path > tag then
46619: LD_VAR 0 2
46623: PUSH
46624: LD_VAR 0 9
46628: GREATER
46629: IFFALSE 46837
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
46631: LD_ADDR_VAR 0 6
46635: PUSH
46636: LD_VAR 0 5
46640: PPUSH
46641: LD_INT 91
46643: PUSH
46644: LD_VAR 0 4
46648: PUSH
46649: LD_INT 8
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: LIST
46656: PPUSH
46657: CALL_OW 72
46661: ST_TO_ADDR
// if nearEnemy then
46662: LD_VAR 0 6
46666: IFFALSE 46735
// begin if GetWeapon ( i ) = ru_time_lapser then
46668: LD_VAR 0 4
46672: PPUSH
46673: CALL_OW 264
46677: PUSH
46678: LD_INT 49
46680: EQUAL
46681: IFFALSE 46709
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
46683: LD_VAR 0 4
46687: PPUSH
46688: LD_VAR 0 6
46692: PPUSH
46693: LD_VAR 0 4
46697: PPUSH
46698: CALL_OW 74
46702: PPUSH
46703: CALL_OW 112
46707: GO 46733
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
46709: LD_VAR 0 4
46713: PPUSH
46714: LD_VAR 0 6
46718: PPUSH
46719: LD_VAR 0 4
46723: PPUSH
46724: CALL_OW 74
46728: PPUSH
46729: CALL_OW 115
// end else
46733: GO 46835
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
46735: LD_VAR 0 4
46739: PPUSH
46740: LD_VAR 0 2
46744: PUSH
46745: LD_VAR 0 9
46749: ARRAY
46750: PUSH
46751: LD_INT 1
46753: ARRAY
46754: PPUSH
46755: LD_VAR 0 2
46759: PUSH
46760: LD_VAR 0 9
46764: ARRAY
46765: PUSH
46766: LD_INT 2
46768: ARRAY
46769: PPUSH
46770: CALL_OW 297
46774: PUSH
46775: LD_INT 6
46777: GREATER
46778: IFFALSE 46821
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
46780: LD_VAR 0 4
46784: PPUSH
46785: LD_VAR 0 2
46789: PUSH
46790: LD_VAR 0 9
46794: ARRAY
46795: PUSH
46796: LD_INT 1
46798: ARRAY
46799: PPUSH
46800: LD_VAR 0 2
46804: PUSH
46805: LD_VAR 0 9
46809: ARRAY
46810: PUSH
46811: LD_INT 2
46813: ARRAY
46814: PPUSH
46815: CALL_OW 114
46819: GO 46835
// SetTag ( i , tag ) ;
46821: LD_VAR 0 4
46825: PPUSH
46826: LD_VAR 0 9
46830: PPUSH
46831: CALL_OW 109
// end else
46835: GO 46908
// if enemy then
46837: LD_VAR 0 5
46841: IFFALSE 46908
// begin if GetWeapon ( i ) = ru_time_lapser then
46843: LD_VAR 0 4
46847: PPUSH
46848: CALL_OW 264
46852: PUSH
46853: LD_INT 49
46855: EQUAL
46856: IFFALSE 46884
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46858: LD_VAR 0 4
46862: PPUSH
46863: LD_VAR 0 5
46867: PPUSH
46868: LD_VAR 0 4
46872: PPUSH
46873: CALL_OW 74
46877: PPUSH
46878: CALL_OW 112
46882: GO 46908
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
46884: LD_VAR 0 4
46888: PPUSH
46889: LD_VAR 0 5
46893: PPUSH
46894: LD_VAR 0 4
46898: PPUSH
46899: CALL_OW 74
46903: PPUSH
46904: CALL_OW 115
// end ; end ;
46908: GO 46488
46910: POP
46911: POP
// end ;
46912: LD_VAR 0 3
46916: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
46917: LD_INT 0
46919: PPUSH
46920: PPUSH
46921: PPUSH
// if not unit or IsInUnit ( unit ) then
46922: LD_VAR 0 1
46926: NOT
46927: PUSH
46928: LD_VAR 0 1
46932: PPUSH
46933: CALL_OW 310
46937: OR
46938: IFFALSE 46942
// exit ;
46940: GO 47033
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
46942: LD_ADDR_VAR 0 4
46946: PUSH
46947: LD_VAR 0 1
46951: PPUSH
46952: CALL_OW 250
46956: PPUSH
46957: LD_VAR 0 2
46961: PPUSH
46962: LD_INT 1
46964: PPUSH
46965: CALL_OW 272
46969: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
46970: LD_ADDR_VAR 0 5
46974: PUSH
46975: LD_VAR 0 1
46979: PPUSH
46980: CALL_OW 251
46984: PPUSH
46985: LD_VAR 0 2
46989: PPUSH
46990: LD_INT 1
46992: PPUSH
46993: CALL_OW 273
46997: ST_TO_ADDR
// if ValidHex ( x , y ) then
46998: LD_VAR 0 4
47002: PPUSH
47003: LD_VAR 0 5
47007: PPUSH
47008: CALL_OW 488
47012: IFFALSE 47033
// ComTurnXY ( unit , x , y ) ;
47014: LD_VAR 0 1
47018: PPUSH
47019: LD_VAR 0 4
47023: PPUSH
47024: LD_VAR 0 5
47028: PPUSH
47029: CALL_OW 118
// end ;
47033: LD_VAR 0 3
47037: RET
// export function SeeUnits ( side , units ) ; var i ; begin
47038: LD_INT 0
47040: PPUSH
47041: PPUSH
// result := false ;
47042: LD_ADDR_VAR 0 3
47046: PUSH
47047: LD_INT 0
47049: ST_TO_ADDR
// if not units then
47050: LD_VAR 0 2
47054: NOT
47055: IFFALSE 47059
// exit ;
47057: GO 47104
// for i in units do
47059: LD_ADDR_VAR 0 4
47063: PUSH
47064: LD_VAR 0 2
47068: PUSH
47069: FOR_IN
47070: IFFALSE 47102
// if See ( side , i ) then
47072: LD_VAR 0 1
47076: PPUSH
47077: LD_VAR 0 4
47081: PPUSH
47082: CALL_OW 292
47086: IFFALSE 47100
// begin result := true ;
47088: LD_ADDR_VAR 0 3
47092: PUSH
47093: LD_INT 1
47095: ST_TO_ADDR
// exit ;
47096: POP
47097: POP
47098: GO 47104
// end ;
47100: GO 47069
47102: POP
47103: POP
// end ;
47104: LD_VAR 0 3
47108: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47109: LD_INT 0
47111: PPUSH
47112: PPUSH
47113: PPUSH
47114: PPUSH
// if not unit or not points then
47115: LD_VAR 0 1
47119: NOT
47120: PUSH
47121: LD_VAR 0 2
47125: NOT
47126: OR
47127: IFFALSE 47131
// exit ;
47129: GO 47221
// dist := 99999 ;
47131: LD_ADDR_VAR 0 5
47135: PUSH
47136: LD_INT 99999
47138: ST_TO_ADDR
// for i in points do
47139: LD_ADDR_VAR 0 4
47143: PUSH
47144: LD_VAR 0 2
47148: PUSH
47149: FOR_IN
47150: IFFALSE 47219
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47152: LD_ADDR_VAR 0 6
47156: PUSH
47157: LD_VAR 0 1
47161: PPUSH
47162: LD_VAR 0 4
47166: PUSH
47167: LD_INT 1
47169: ARRAY
47170: PPUSH
47171: LD_VAR 0 4
47175: PUSH
47176: LD_INT 2
47178: ARRAY
47179: PPUSH
47180: CALL_OW 297
47184: ST_TO_ADDR
// if tmpDist < dist then
47185: LD_VAR 0 6
47189: PUSH
47190: LD_VAR 0 5
47194: LESS
47195: IFFALSE 47217
// begin result := i ;
47197: LD_ADDR_VAR 0 3
47201: PUSH
47202: LD_VAR 0 4
47206: ST_TO_ADDR
// dist := tmpDist ;
47207: LD_ADDR_VAR 0 5
47211: PUSH
47212: LD_VAR 0 6
47216: ST_TO_ADDR
// end ; end ;
47217: GO 47149
47219: POP
47220: POP
// end ;
47221: LD_VAR 0 3
47225: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
47226: LD_INT 0
47228: PPUSH
// uc_side := side ;
47229: LD_ADDR_OWVAR 20
47233: PUSH
47234: LD_VAR 0 1
47238: ST_TO_ADDR
// uc_nation := 3 ;
47239: LD_ADDR_OWVAR 21
47243: PUSH
47244: LD_INT 3
47246: ST_TO_ADDR
// vc_chassis := 25 ;
47247: LD_ADDR_OWVAR 37
47251: PUSH
47252: LD_INT 25
47254: ST_TO_ADDR
// vc_engine := engine_siberite ;
47255: LD_ADDR_OWVAR 39
47259: PUSH
47260: LD_INT 3
47262: ST_TO_ADDR
// vc_control := control_computer ;
47263: LD_ADDR_OWVAR 38
47267: PUSH
47268: LD_INT 3
47270: ST_TO_ADDR
// vc_weapon := 59 ;
47271: LD_ADDR_OWVAR 40
47275: PUSH
47276: LD_INT 59
47278: ST_TO_ADDR
// result := CreateVehicle ;
47279: LD_ADDR_VAR 0 5
47283: PUSH
47284: CALL_OW 45
47288: ST_TO_ADDR
// SetDir ( result , d ) ;
47289: LD_VAR 0 5
47293: PPUSH
47294: LD_VAR 0 4
47298: PPUSH
47299: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
47303: LD_VAR 0 5
47307: PPUSH
47308: LD_VAR 0 2
47312: PPUSH
47313: LD_VAR 0 3
47317: PPUSH
47318: LD_INT 0
47320: PPUSH
47321: CALL_OW 48
// end ;
47325: LD_VAR 0 5
47329: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
47330: LD_INT 0
47332: PPUSH
47333: PPUSH
47334: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
47335: LD_ADDR_VAR 0 2
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
47358: LD_VAR 0 1
47362: NOT
47363: PUSH
47364: LD_VAR 0 1
47368: PPUSH
47369: CALL_OW 264
47373: PUSH
47374: LD_INT 12
47376: PUSH
47377: LD_INT 51
47379: PUSH
47380: LD_INT 32
47382: PUSH
47383: LD_EXP 39
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: IN
47394: NOT
47395: OR
47396: IFFALSE 47400
// exit ;
47398: GO 47498
// for i := 1 to 3 do
47400: LD_ADDR_VAR 0 3
47404: PUSH
47405: DOUBLE
47406: LD_INT 1
47408: DEC
47409: ST_TO_ADDR
47410: LD_INT 3
47412: PUSH
47413: FOR_TO
47414: IFFALSE 47496
// begin tmp := GetCargo ( cargo , i ) ;
47416: LD_ADDR_VAR 0 4
47420: PUSH
47421: LD_VAR 0 1
47425: PPUSH
47426: LD_VAR 0 3
47430: PPUSH
47431: CALL_OW 289
47435: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
47436: LD_ADDR_VAR 0 2
47440: PUSH
47441: LD_VAR 0 2
47445: PPUSH
47446: LD_VAR 0 3
47450: PPUSH
47451: LD_VAR 0 4
47455: PPUSH
47456: CALL_OW 1
47460: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
47461: LD_ADDR_VAR 0 2
47465: PUSH
47466: LD_VAR 0 2
47470: PPUSH
47471: LD_INT 4
47473: PPUSH
47474: LD_VAR 0 2
47478: PUSH
47479: LD_INT 4
47481: ARRAY
47482: PUSH
47483: LD_VAR 0 4
47487: PLUS
47488: PPUSH
47489: CALL_OW 1
47493: ST_TO_ADDR
// end ;
47494: GO 47413
47496: POP
47497: POP
// end ;
47498: LD_VAR 0 2
47502: RET
// export function Length ( array ) ; begin
47503: LD_INT 0
47505: PPUSH
// result := array + 0 ;
47506: LD_ADDR_VAR 0 2
47510: PUSH
47511: LD_VAR 0 1
47515: PUSH
47516: LD_INT 0
47518: PLUS
47519: ST_TO_ADDR
// end ;
47520: LD_VAR 0 2
47524: RET
// export function PrepareArray ( array ) ; begin
47525: LD_INT 0
47527: PPUSH
// result := array diff 0 ;
47528: LD_ADDR_VAR 0 2
47532: PUSH
47533: LD_VAR 0 1
47537: PUSH
47538: LD_INT 0
47540: DIFF
47541: ST_TO_ADDR
// if not result [ 1 ] then
47542: LD_VAR 0 2
47546: PUSH
47547: LD_INT 1
47549: ARRAY
47550: NOT
47551: IFFALSE 47571
// result := Delete ( result , 1 ) ;
47553: LD_ADDR_VAR 0 2
47557: PUSH
47558: LD_VAR 0 2
47562: PPUSH
47563: LD_INT 1
47565: PPUSH
47566: CALL_OW 3
47570: ST_TO_ADDR
// end ; end_of_file
47571: LD_VAR 0 2
47575: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
47576: LD_INT 0
47578: PPUSH
// ar_miner := 81 ;
47579: LD_ADDR_EXP 45
47583: PUSH
47584: LD_INT 81
47586: ST_TO_ADDR
// ar_crane := 88 ;
47587: LD_ADDR_EXP 44
47591: PUSH
47592: LD_INT 88
47594: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
47595: LD_ADDR_EXP 39
47599: PUSH
47600: LD_INT 89
47602: ST_TO_ADDR
// us_hack := 99 ;
47603: LD_ADDR_EXP 40
47607: PUSH
47608: LD_INT 99
47610: ST_TO_ADDR
// us_artillery := 97 ;
47611: LD_ADDR_EXP 41
47615: PUSH
47616: LD_INT 97
47618: ST_TO_ADDR
// ar_bio_bomb := 91 ;
47619: LD_ADDR_EXP 42
47623: PUSH
47624: LD_INT 91
47626: ST_TO_ADDR
// ar_mortar := 92 ;
47627: LD_ADDR_EXP 43
47631: PUSH
47632: LD_INT 92
47634: ST_TO_ADDR
// ru_flamethrower := 93 ;
47635: LD_ADDR_EXP 46
47639: PUSH
47640: LD_INT 93
47642: ST_TO_ADDR
// ru_radar := 98 ;
47643: LD_ADDR_EXP 38
47647: PUSH
47648: LD_INT 98
47650: ST_TO_ADDR
// tech_Artillery := 80 ;
47651: LD_ADDR_EXP 47
47655: PUSH
47656: LD_INT 80
47658: ST_TO_ADDR
// tech_RadMat := 81 ;
47659: LD_ADDR_EXP 48
47663: PUSH
47664: LD_INT 81
47666: ST_TO_ADDR
// tech_BasicTools := 82 ;
47667: LD_ADDR_EXP 49
47671: PUSH
47672: LD_INT 82
47674: ST_TO_ADDR
// tech_Cargo := 83 ;
47675: LD_ADDR_EXP 50
47679: PUSH
47680: LD_INT 83
47682: ST_TO_ADDR
// tech_Track := 84 ;
47683: LD_ADDR_EXP 51
47687: PUSH
47688: LD_INT 84
47690: ST_TO_ADDR
// tech_Crane := 85 ;
47691: LD_ADDR_EXP 52
47695: PUSH
47696: LD_INT 85
47698: ST_TO_ADDR
// tech_Bulldozer := 86 ;
47699: LD_ADDR_EXP 53
47703: PUSH
47704: LD_INT 86
47706: ST_TO_ADDR
// tech_Hovercraft := 87 ;
47707: LD_ADDR_EXP 54
47711: PUSH
47712: LD_INT 87
47714: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
47715: LD_ADDR_EXP 55
47719: PUSH
47720: LD_INT 88
47722: ST_TO_ADDR
// end ;
47723: LD_VAR 0 1
47727: RET
// every 1 do
47728: GO 47730
47730: DISABLE
// InitGlobalVariables ; end_of_file
47731: CALL 47576 0 0
47735: END
// every 0 0$1 do
47736: GO 47738
47738: DISABLE
// begin enable ;
47739: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47740: LD_STRING updateTimer(
47742: PUSH
47743: LD_OWVAR 1
47747: STR
47748: PUSH
47749: LD_STRING );
47751: STR
47752: PPUSH
47753: CALL_OW 559
// end ;
47757: END
// export function SOS_MapStart ( ) ; begin
47758: LD_INT 0
47760: PPUSH
// if streamModeActive then
47761: LD_EXP 56
47765: IFFALSE 47774
// DefineStreamItems ( true ) ;
47767: LD_INT 1
47769: PPUSH
47770: CALL 49428 0 1
// UpdateFactoryWaypoints ( ) ;
47774: CALL 62289 0 0
// UpdateWarehouseGatheringPoints ( ) ;
47778: CALL 62546 0 0
// end ;
47782: LD_VAR 0 1
47786: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
47787: LD_INT 0
47789: PPUSH
// if p2 = 100 then
47790: LD_VAR 0 2
47794: PUSH
47795: LD_INT 100
47797: EQUAL
47798: IFFALSE 48801
// begin if not StreamModeActive then
47800: LD_EXP 56
47804: NOT
47805: IFFALSE 47815
// StreamModeActive := true ;
47807: LD_ADDR_EXP 56
47811: PUSH
47812: LD_INT 1
47814: ST_TO_ADDR
// if p3 = 0 then
47815: LD_VAR 0 3
47819: PUSH
47820: LD_INT 0
47822: EQUAL
47823: IFFALSE 47829
// InitStreamMode ;
47825: CALL 48964 0 0
// if p3 = 1 then
47829: LD_VAR 0 3
47833: PUSH
47834: LD_INT 1
47836: EQUAL
47837: IFFALSE 47847
// sRocket := true ;
47839: LD_ADDR_EXP 61
47843: PUSH
47844: LD_INT 1
47846: ST_TO_ADDR
// if p3 = 2 then
47847: LD_VAR 0 3
47851: PUSH
47852: LD_INT 2
47854: EQUAL
47855: IFFALSE 47865
// sSpeed := true ;
47857: LD_ADDR_EXP 60
47861: PUSH
47862: LD_INT 1
47864: ST_TO_ADDR
// if p3 = 3 then
47865: LD_VAR 0 3
47869: PUSH
47870: LD_INT 3
47872: EQUAL
47873: IFFALSE 47883
// sEngine := true ;
47875: LD_ADDR_EXP 62
47879: PUSH
47880: LD_INT 1
47882: ST_TO_ADDR
// if p3 = 4 then
47883: LD_VAR 0 3
47887: PUSH
47888: LD_INT 4
47890: EQUAL
47891: IFFALSE 47901
// sSpec := true ;
47893: LD_ADDR_EXP 59
47897: PUSH
47898: LD_INT 1
47900: ST_TO_ADDR
// if p3 = 5 then
47901: LD_VAR 0 3
47905: PUSH
47906: LD_INT 5
47908: EQUAL
47909: IFFALSE 47919
// sLevel := true ;
47911: LD_ADDR_EXP 63
47915: PUSH
47916: LD_INT 1
47918: ST_TO_ADDR
// if p3 = 6 then
47919: LD_VAR 0 3
47923: PUSH
47924: LD_INT 6
47926: EQUAL
47927: IFFALSE 47937
// sArmoury := true ;
47929: LD_ADDR_EXP 64
47933: PUSH
47934: LD_INT 1
47936: ST_TO_ADDR
// if p3 = 7 then
47937: LD_VAR 0 3
47941: PUSH
47942: LD_INT 7
47944: EQUAL
47945: IFFALSE 47955
// sRadar := true ;
47947: LD_ADDR_EXP 65
47951: PUSH
47952: LD_INT 1
47954: ST_TO_ADDR
// if p3 = 8 then
47955: LD_VAR 0 3
47959: PUSH
47960: LD_INT 8
47962: EQUAL
47963: IFFALSE 47973
// sBunker := true ;
47965: LD_ADDR_EXP 66
47969: PUSH
47970: LD_INT 1
47972: ST_TO_ADDR
// if p3 = 9 then
47973: LD_VAR 0 3
47977: PUSH
47978: LD_INT 9
47980: EQUAL
47981: IFFALSE 47991
// sHack := true ;
47983: LD_ADDR_EXP 67
47987: PUSH
47988: LD_INT 1
47990: ST_TO_ADDR
// if p3 = 10 then
47991: LD_VAR 0 3
47995: PUSH
47996: LD_INT 10
47998: EQUAL
47999: IFFALSE 48009
// sFire := true ;
48001: LD_ADDR_EXP 68
48005: PUSH
48006: LD_INT 1
48008: ST_TO_ADDR
// if p3 = 11 then
48009: LD_VAR 0 3
48013: PUSH
48014: LD_INT 11
48016: EQUAL
48017: IFFALSE 48027
// sRefresh := true ;
48019: LD_ADDR_EXP 69
48023: PUSH
48024: LD_INT 1
48026: ST_TO_ADDR
// if p3 = 12 then
48027: LD_VAR 0 3
48031: PUSH
48032: LD_INT 12
48034: EQUAL
48035: IFFALSE 48045
// sExp := true ;
48037: LD_ADDR_EXP 70
48041: PUSH
48042: LD_INT 1
48044: ST_TO_ADDR
// if p3 = 13 then
48045: LD_VAR 0 3
48049: PUSH
48050: LD_INT 13
48052: EQUAL
48053: IFFALSE 48063
// sDepot := true ;
48055: LD_ADDR_EXP 71
48059: PUSH
48060: LD_INT 1
48062: ST_TO_ADDR
// if p3 = 14 then
48063: LD_VAR 0 3
48067: PUSH
48068: LD_INT 14
48070: EQUAL
48071: IFFALSE 48081
// sFlag := true ;
48073: LD_ADDR_EXP 72
48077: PUSH
48078: LD_INT 1
48080: ST_TO_ADDR
// if p3 = 15 then
48081: LD_VAR 0 3
48085: PUSH
48086: LD_INT 15
48088: EQUAL
48089: IFFALSE 48099
// sKamikadze := true ;
48091: LD_ADDR_EXP 80
48095: PUSH
48096: LD_INT 1
48098: ST_TO_ADDR
// if p3 = 16 then
48099: LD_VAR 0 3
48103: PUSH
48104: LD_INT 16
48106: EQUAL
48107: IFFALSE 48117
// sTroll := true ;
48109: LD_ADDR_EXP 81
48113: PUSH
48114: LD_INT 1
48116: ST_TO_ADDR
// if p3 = 17 then
48117: LD_VAR 0 3
48121: PUSH
48122: LD_INT 17
48124: EQUAL
48125: IFFALSE 48135
// sSlow := true ;
48127: LD_ADDR_EXP 82
48131: PUSH
48132: LD_INT 1
48134: ST_TO_ADDR
// if p3 = 18 then
48135: LD_VAR 0 3
48139: PUSH
48140: LD_INT 18
48142: EQUAL
48143: IFFALSE 48153
// sLack := true ;
48145: LD_ADDR_EXP 83
48149: PUSH
48150: LD_INT 1
48152: ST_TO_ADDR
// if p3 = 19 then
48153: LD_VAR 0 3
48157: PUSH
48158: LD_INT 19
48160: EQUAL
48161: IFFALSE 48171
// sTank := true ;
48163: LD_ADDR_EXP 85
48167: PUSH
48168: LD_INT 1
48170: ST_TO_ADDR
// if p3 = 20 then
48171: LD_VAR 0 3
48175: PUSH
48176: LD_INT 20
48178: EQUAL
48179: IFFALSE 48189
// sRemote := true ;
48181: LD_ADDR_EXP 86
48185: PUSH
48186: LD_INT 1
48188: ST_TO_ADDR
// if p3 = 21 then
48189: LD_VAR 0 3
48193: PUSH
48194: LD_INT 21
48196: EQUAL
48197: IFFALSE 48207
// sPowell := true ;
48199: LD_ADDR_EXP 87
48203: PUSH
48204: LD_INT 1
48206: ST_TO_ADDR
// if p3 = 22 then
48207: LD_VAR 0 3
48211: PUSH
48212: LD_INT 22
48214: EQUAL
48215: IFFALSE 48225
// sTeleport := true ;
48217: LD_ADDR_EXP 90
48221: PUSH
48222: LD_INT 1
48224: ST_TO_ADDR
// if p3 = 23 then
48225: LD_VAR 0 3
48229: PUSH
48230: LD_INT 23
48232: EQUAL
48233: IFFALSE 48243
// sOilTower := true ;
48235: LD_ADDR_EXP 92
48239: PUSH
48240: LD_INT 1
48242: ST_TO_ADDR
// if p3 = 24 then
48243: LD_VAR 0 3
48247: PUSH
48248: LD_INT 24
48250: EQUAL
48251: IFFALSE 48261
// sShovel := true ;
48253: LD_ADDR_EXP 93
48257: PUSH
48258: LD_INT 1
48260: ST_TO_ADDR
// if p3 = 25 then
48261: LD_VAR 0 3
48265: PUSH
48266: LD_INT 25
48268: EQUAL
48269: IFFALSE 48279
// sSheik := true ;
48271: LD_ADDR_EXP 94
48275: PUSH
48276: LD_INT 1
48278: ST_TO_ADDR
// if p3 = 26 then
48279: LD_VAR 0 3
48283: PUSH
48284: LD_INT 26
48286: EQUAL
48287: IFFALSE 48297
// sEarthquake := true ;
48289: LD_ADDR_EXP 96
48293: PUSH
48294: LD_INT 1
48296: ST_TO_ADDR
// if p3 = 27 then
48297: LD_VAR 0 3
48301: PUSH
48302: LD_INT 27
48304: EQUAL
48305: IFFALSE 48315
// sAI := true ;
48307: LD_ADDR_EXP 97
48311: PUSH
48312: LD_INT 1
48314: ST_TO_ADDR
// if p3 = 28 then
48315: LD_VAR 0 3
48319: PUSH
48320: LD_INT 28
48322: EQUAL
48323: IFFALSE 48333
// sCargo := true ;
48325: LD_ADDR_EXP 100
48329: PUSH
48330: LD_INT 1
48332: ST_TO_ADDR
// if p3 = 29 then
48333: LD_VAR 0 3
48337: PUSH
48338: LD_INT 29
48340: EQUAL
48341: IFFALSE 48351
// sDLaser := true ;
48343: LD_ADDR_EXP 101
48347: PUSH
48348: LD_INT 1
48350: ST_TO_ADDR
// if p3 = 30 then
48351: LD_VAR 0 3
48355: PUSH
48356: LD_INT 30
48358: EQUAL
48359: IFFALSE 48369
// sExchange := true ;
48361: LD_ADDR_EXP 102
48365: PUSH
48366: LD_INT 1
48368: ST_TO_ADDR
// if p3 = 31 then
48369: LD_VAR 0 3
48373: PUSH
48374: LD_INT 31
48376: EQUAL
48377: IFFALSE 48387
// sFac := true ;
48379: LD_ADDR_EXP 103
48383: PUSH
48384: LD_INT 1
48386: ST_TO_ADDR
// if p3 = 32 then
48387: LD_VAR 0 3
48391: PUSH
48392: LD_INT 32
48394: EQUAL
48395: IFFALSE 48405
// sPower := true ;
48397: LD_ADDR_EXP 104
48401: PUSH
48402: LD_INT 1
48404: ST_TO_ADDR
// if p3 = 33 then
48405: LD_VAR 0 3
48409: PUSH
48410: LD_INT 33
48412: EQUAL
48413: IFFALSE 48423
// sRandom := true ;
48415: LD_ADDR_EXP 105
48419: PUSH
48420: LD_INT 1
48422: ST_TO_ADDR
// if p3 = 34 then
48423: LD_VAR 0 3
48427: PUSH
48428: LD_INT 34
48430: EQUAL
48431: IFFALSE 48441
// sShield := true ;
48433: LD_ADDR_EXP 106
48437: PUSH
48438: LD_INT 1
48440: ST_TO_ADDR
// if p3 = 35 then
48441: LD_VAR 0 3
48445: PUSH
48446: LD_INT 35
48448: EQUAL
48449: IFFALSE 48459
// sTime := true ;
48451: LD_ADDR_EXP 107
48455: PUSH
48456: LD_INT 1
48458: ST_TO_ADDR
// if p3 = 36 then
48459: LD_VAR 0 3
48463: PUSH
48464: LD_INT 36
48466: EQUAL
48467: IFFALSE 48477
// sTools := true ;
48469: LD_ADDR_EXP 108
48473: PUSH
48474: LD_INT 1
48476: ST_TO_ADDR
// if p3 = 101 then
48477: LD_VAR 0 3
48481: PUSH
48482: LD_INT 101
48484: EQUAL
48485: IFFALSE 48495
// sSold := true ;
48487: LD_ADDR_EXP 73
48491: PUSH
48492: LD_INT 1
48494: ST_TO_ADDR
// if p3 = 102 then
48495: LD_VAR 0 3
48499: PUSH
48500: LD_INT 102
48502: EQUAL
48503: IFFALSE 48513
// sDiff := true ;
48505: LD_ADDR_EXP 74
48509: PUSH
48510: LD_INT 1
48512: ST_TO_ADDR
// if p3 = 103 then
48513: LD_VAR 0 3
48517: PUSH
48518: LD_INT 103
48520: EQUAL
48521: IFFALSE 48531
// sFog := true ;
48523: LD_ADDR_EXP 77
48527: PUSH
48528: LD_INT 1
48530: ST_TO_ADDR
// if p3 = 104 then
48531: LD_VAR 0 3
48535: PUSH
48536: LD_INT 104
48538: EQUAL
48539: IFFALSE 48549
// sReset := true ;
48541: LD_ADDR_EXP 78
48545: PUSH
48546: LD_INT 1
48548: ST_TO_ADDR
// if p3 = 105 then
48549: LD_VAR 0 3
48553: PUSH
48554: LD_INT 105
48556: EQUAL
48557: IFFALSE 48567
// sSun := true ;
48559: LD_ADDR_EXP 79
48563: PUSH
48564: LD_INT 1
48566: ST_TO_ADDR
// if p3 = 106 then
48567: LD_VAR 0 3
48571: PUSH
48572: LD_INT 106
48574: EQUAL
48575: IFFALSE 48585
// sTiger := true ;
48577: LD_ADDR_EXP 75
48581: PUSH
48582: LD_INT 1
48584: ST_TO_ADDR
// if p3 = 107 then
48585: LD_VAR 0 3
48589: PUSH
48590: LD_INT 107
48592: EQUAL
48593: IFFALSE 48603
// sBomb := true ;
48595: LD_ADDR_EXP 76
48599: PUSH
48600: LD_INT 1
48602: ST_TO_ADDR
// if p3 = 108 then
48603: LD_VAR 0 3
48607: PUSH
48608: LD_INT 108
48610: EQUAL
48611: IFFALSE 48621
// sWound := true ;
48613: LD_ADDR_EXP 84
48617: PUSH
48618: LD_INT 1
48620: ST_TO_ADDR
// if p3 = 109 then
48621: LD_VAR 0 3
48625: PUSH
48626: LD_INT 109
48628: EQUAL
48629: IFFALSE 48639
// sBetray := true ;
48631: LD_ADDR_EXP 88
48635: PUSH
48636: LD_INT 1
48638: ST_TO_ADDR
// if p3 = 110 then
48639: LD_VAR 0 3
48643: PUSH
48644: LD_INT 110
48646: EQUAL
48647: IFFALSE 48657
// sContamin := true ;
48649: LD_ADDR_EXP 89
48653: PUSH
48654: LD_INT 1
48656: ST_TO_ADDR
// if p3 = 111 then
48657: LD_VAR 0 3
48661: PUSH
48662: LD_INT 111
48664: EQUAL
48665: IFFALSE 48675
// sOil := true ;
48667: LD_ADDR_EXP 91
48671: PUSH
48672: LD_INT 1
48674: ST_TO_ADDR
// if p3 = 112 then
48675: LD_VAR 0 3
48679: PUSH
48680: LD_INT 112
48682: EQUAL
48683: IFFALSE 48693
// sStu := true ;
48685: LD_ADDR_EXP 95
48689: PUSH
48690: LD_INT 1
48692: ST_TO_ADDR
// if p3 = 113 then
48693: LD_VAR 0 3
48697: PUSH
48698: LD_INT 113
48700: EQUAL
48701: IFFALSE 48711
// sBazooka := true ;
48703: LD_ADDR_EXP 98
48707: PUSH
48708: LD_INT 1
48710: ST_TO_ADDR
// if p3 = 114 then
48711: LD_VAR 0 3
48715: PUSH
48716: LD_INT 114
48718: EQUAL
48719: IFFALSE 48729
// sMortar := true ;
48721: LD_ADDR_EXP 99
48725: PUSH
48726: LD_INT 1
48728: ST_TO_ADDR
// if p3 = 115 then
48729: LD_VAR 0 3
48733: PUSH
48734: LD_INT 115
48736: EQUAL
48737: IFFALSE 48747
// sRanger := true ;
48739: LD_ADDR_EXP 109
48743: PUSH
48744: LD_INT 1
48746: ST_TO_ADDR
// if p3 = 116 then
48747: LD_VAR 0 3
48751: PUSH
48752: LD_INT 116
48754: EQUAL
48755: IFFALSE 48765
// sComputer := true ;
48757: LD_ADDR_EXP 110
48761: PUSH
48762: LD_INT 1
48764: ST_TO_ADDR
// if p3 = 117 then
48765: LD_VAR 0 3
48769: PUSH
48770: LD_INT 117
48772: EQUAL
48773: IFFALSE 48783
// s30 := true ;
48775: LD_ADDR_EXP 111
48779: PUSH
48780: LD_INT 1
48782: ST_TO_ADDR
// if p3 = 118 then
48783: LD_VAR 0 3
48787: PUSH
48788: LD_INT 118
48790: EQUAL
48791: IFFALSE 48801
// s60 := true ;
48793: LD_ADDR_EXP 112
48797: PUSH
48798: LD_INT 1
48800: ST_TO_ADDR
// end ; if p2 = 101 then
48801: LD_VAR 0 2
48805: PUSH
48806: LD_INT 101
48808: EQUAL
48809: IFFALSE 48937
// begin case p3 of 1 :
48811: LD_VAR 0 3
48815: PUSH
48816: LD_INT 1
48818: DOUBLE
48819: EQUAL
48820: IFTRUE 48824
48822: GO 48831
48824: POP
// hHackUnlimitedResources ; 2 :
48825: CALL 61035 0 0
48829: GO 48937
48831: LD_INT 2
48833: DOUBLE
48834: EQUAL
48835: IFTRUE 48839
48837: GO 48846
48839: POP
// hHackSetLevel10 ; 3 :
48840: CALL 61168 0 0
48844: GO 48937
48846: LD_INT 3
48848: DOUBLE
48849: EQUAL
48850: IFTRUE 48854
48852: GO 48861
48854: POP
// hHackSetLevel10YourUnits ; 4 :
48855: CALL 61253 0 0
48859: GO 48937
48861: LD_INT 4
48863: DOUBLE
48864: EQUAL
48865: IFTRUE 48869
48867: GO 48876
48869: POP
// hHackInvincible ; 5 :
48870: CALL 61701 0 0
48874: GO 48937
48876: LD_INT 5
48878: DOUBLE
48879: EQUAL
48880: IFTRUE 48884
48882: GO 48891
48884: POP
// hHackInvisible ; 6 :
48885: CALL 61812 0 0
48889: GO 48937
48891: LD_INT 6
48893: DOUBLE
48894: EQUAL
48895: IFTRUE 48899
48897: GO 48906
48899: POP
// hHackChangeYourSide ; 7 :
48900: CALL 61869 0 0
48904: GO 48937
48906: LD_INT 7
48908: DOUBLE
48909: EQUAL
48910: IFTRUE 48914
48912: GO 48921
48914: POP
// hHackChangeUnitSide ; 8 :
48915: CALL 61911 0 0
48919: GO 48937
48921: LD_INT 8
48923: DOUBLE
48924: EQUAL
48925: IFTRUE 48929
48927: GO 48936
48929: POP
// hHackFog ; end ;
48930: CALL 62012 0 0
48934: GO 48937
48936: POP
// end ; end ;
48937: LD_VAR 0 7
48941: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
48942: GO 48944
48944: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
48945: LD_STRING initStreamRollete();
48947: PPUSH
48948: CALL_OW 559
// InitStreamMode ;
48952: CALL 48964 0 0
// DefineStreamItems ( false ) ;
48956: LD_INT 0
48958: PPUSH
48959: CALL 49428 0 1
// end ;
48963: END
// function InitStreamMode ; begin
48964: LD_INT 0
48966: PPUSH
// streamModeActive := false ;
48967: LD_ADDR_EXP 56
48971: PUSH
48972: LD_INT 0
48974: ST_TO_ADDR
// normalCounter := 36 ;
48975: LD_ADDR_EXP 57
48979: PUSH
48980: LD_INT 36
48982: ST_TO_ADDR
// hardcoreCounter := 18 ;
48983: LD_ADDR_EXP 58
48987: PUSH
48988: LD_INT 18
48990: ST_TO_ADDR
// sRocket := false ;
48991: LD_ADDR_EXP 61
48995: PUSH
48996: LD_INT 0
48998: ST_TO_ADDR
// sSpeed := false ;
48999: LD_ADDR_EXP 60
49003: PUSH
49004: LD_INT 0
49006: ST_TO_ADDR
// sEngine := false ;
49007: LD_ADDR_EXP 62
49011: PUSH
49012: LD_INT 0
49014: ST_TO_ADDR
// sSpec := false ;
49015: LD_ADDR_EXP 59
49019: PUSH
49020: LD_INT 0
49022: ST_TO_ADDR
// sLevel := false ;
49023: LD_ADDR_EXP 63
49027: PUSH
49028: LD_INT 0
49030: ST_TO_ADDR
// sArmoury := false ;
49031: LD_ADDR_EXP 64
49035: PUSH
49036: LD_INT 0
49038: ST_TO_ADDR
// sRadar := false ;
49039: LD_ADDR_EXP 65
49043: PUSH
49044: LD_INT 0
49046: ST_TO_ADDR
// sBunker := false ;
49047: LD_ADDR_EXP 66
49051: PUSH
49052: LD_INT 0
49054: ST_TO_ADDR
// sHack := false ;
49055: LD_ADDR_EXP 67
49059: PUSH
49060: LD_INT 0
49062: ST_TO_ADDR
// sFire := false ;
49063: LD_ADDR_EXP 68
49067: PUSH
49068: LD_INT 0
49070: ST_TO_ADDR
// sRefresh := false ;
49071: LD_ADDR_EXP 69
49075: PUSH
49076: LD_INT 0
49078: ST_TO_ADDR
// sExp := false ;
49079: LD_ADDR_EXP 70
49083: PUSH
49084: LD_INT 0
49086: ST_TO_ADDR
// sDepot := false ;
49087: LD_ADDR_EXP 71
49091: PUSH
49092: LD_INT 0
49094: ST_TO_ADDR
// sFlag := false ;
49095: LD_ADDR_EXP 72
49099: PUSH
49100: LD_INT 0
49102: ST_TO_ADDR
// sKamikadze := false ;
49103: LD_ADDR_EXP 80
49107: PUSH
49108: LD_INT 0
49110: ST_TO_ADDR
// sTroll := false ;
49111: LD_ADDR_EXP 81
49115: PUSH
49116: LD_INT 0
49118: ST_TO_ADDR
// sSlow := false ;
49119: LD_ADDR_EXP 82
49123: PUSH
49124: LD_INT 0
49126: ST_TO_ADDR
// sLack := false ;
49127: LD_ADDR_EXP 83
49131: PUSH
49132: LD_INT 0
49134: ST_TO_ADDR
// sTank := false ;
49135: LD_ADDR_EXP 85
49139: PUSH
49140: LD_INT 0
49142: ST_TO_ADDR
// sRemote := false ;
49143: LD_ADDR_EXP 86
49147: PUSH
49148: LD_INT 0
49150: ST_TO_ADDR
// sPowell := false ;
49151: LD_ADDR_EXP 87
49155: PUSH
49156: LD_INT 0
49158: ST_TO_ADDR
// sTeleport := false ;
49159: LD_ADDR_EXP 90
49163: PUSH
49164: LD_INT 0
49166: ST_TO_ADDR
// sOilTower := false ;
49167: LD_ADDR_EXP 92
49171: PUSH
49172: LD_INT 0
49174: ST_TO_ADDR
// sShovel := false ;
49175: LD_ADDR_EXP 93
49179: PUSH
49180: LD_INT 0
49182: ST_TO_ADDR
// sSheik := false ;
49183: LD_ADDR_EXP 94
49187: PUSH
49188: LD_INT 0
49190: ST_TO_ADDR
// sEarthquake := false ;
49191: LD_ADDR_EXP 96
49195: PUSH
49196: LD_INT 0
49198: ST_TO_ADDR
// sAI := false ;
49199: LD_ADDR_EXP 97
49203: PUSH
49204: LD_INT 0
49206: ST_TO_ADDR
// sCargo := false ;
49207: LD_ADDR_EXP 100
49211: PUSH
49212: LD_INT 0
49214: ST_TO_ADDR
// sDLaser := false ;
49215: LD_ADDR_EXP 101
49219: PUSH
49220: LD_INT 0
49222: ST_TO_ADDR
// sExchange := false ;
49223: LD_ADDR_EXP 102
49227: PUSH
49228: LD_INT 0
49230: ST_TO_ADDR
// sFac := false ;
49231: LD_ADDR_EXP 103
49235: PUSH
49236: LD_INT 0
49238: ST_TO_ADDR
// sPower := false ;
49239: LD_ADDR_EXP 104
49243: PUSH
49244: LD_INT 0
49246: ST_TO_ADDR
// sRandom := false ;
49247: LD_ADDR_EXP 105
49251: PUSH
49252: LD_INT 0
49254: ST_TO_ADDR
// sShield := false ;
49255: LD_ADDR_EXP 106
49259: PUSH
49260: LD_INT 0
49262: ST_TO_ADDR
// sTime := false ;
49263: LD_ADDR_EXP 107
49267: PUSH
49268: LD_INT 0
49270: ST_TO_ADDR
// sTools := false ;
49271: LD_ADDR_EXP 108
49275: PUSH
49276: LD_INT 0
49278: ST_TO_ADDR
// sSold := false ;
49279: LD_ADDR_EXP 73
49283: PUSH
49284: LD_INT 0
49286: ST_TO_ADDR
// sDiff := false ;
49287: LD_ADDR_EXP 74
49291: PUSH
49292: LD_INT 0
49294: ST_TO_ADDR
// sFog := false ;
49295: LD_ADDR_EXP 77
49299: PUSH
49300: LD_INT 0
49302: ST_TO_ADDR
// sReset := false ;
49303: LD_ADDR_EXP 78
49307: PUSH
49308: LD_INT 0
49310: ST_TO_ADDR
// sSun := false ;
49311: LD_ADDR_EXP 79
49315: PUSH
49316: LD_INT 0
49318: ST_TO_ADDR
// sTiger := false ;
49319: LD_ADDR_EXP 75
49323: PUSH
49324: LD_INT 0
49326: ST_TO_ADDR
// sBomb := false ;
49327: LD_ADDR_EXP 76
49331: PUSH
49332: LD_INT 0
49334: ST_TO_ADDR
// sWound := false ;
49335: LD_ADDR_EXP 84
49339: PUSH
49340: LD_INT 0
49342: ST_TO_ADDR
// sBetray := false ;
49343: LD_ADDR_EXP 88
49347: PUSH
49348: LD_INT 0
49350: ST_TO_ADDR
// sContamin := false ;
49351: LD_ADDR_EXP 89
49355: PUSH
49356: LD_INT 0
49358: ST_TO_ADDR
// sOil := false ;
49359: LD_ADDR_EXP 91
49363: PUSH
49364: LD_INT 0
49366: ST_TO_ADDR
// sStu := false ;
49367: LD_ADDR_EXP 95
49371: PUSH
49372: LD_INT 0
49374: ST_TO_ADDR
// sBazooka := false ;
49375: LD_ADDR_EXP 98
49379: PUSH
49380: LD_INT 0
49382: ST_TO_ADDR
// sMortar := false ;
49383: LD_ADDR_EXP 99
49387: PUSH
49388: LD_INT 0
49390: ST_TO_ADDR
// sRanger := false ;
49391: LD_ADDR_EXP 109
49395: PUSH
49396: LD_INT 0
49398: ST_TO_ADDR
// sComputer := false ;
49399: LD_ADDR_EXP 110
49403: PUSH
49404: LD_INT 0
49406: ST_TO_ADDR
// s30 := false ;
49407: LD_ADDR_EXP 111
49411: PUSH
49412: LD_INT 0
49414: ST_TO_ADDR
// s60 := false ;
49415: LD_ADDR_EXP 112
49419: PUSH
49420: LD_INT 0
49422: ST_TO_ADDR
// end ;
49423: LD_VAR 0 1
49427: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49428: LD_INT 0
49430: PPUSH
49431: PPUSH
49432: PPUSH
49433: PPUSH
49434: PPUSH
49435: PPUSH
49436: PPUSH
// result := [ ] ;
49437: LD_ADDR_VAR 0 2
49441: PUSH
49442: EMPTY
49443: ST_TO_ADDR
// if campaign_id = 1 then
49444: LD_OWVAR 69
49448: PUSH
49449: LD_INT 1
49451: EQUAL
49452: IFFALSE 52618
// begin case mission_number of 1 :
49454: LD_OWVAR 70
49458: PUSH
49459: LD_INT 1
49461: DOUBLE
49462: EQUAL
49463: IFTRUE 49467
49465: GO 49543
49467: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49468: LD_ADDR_VAR 0 2
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: LD_INT 4
49478: PUSH
49479: LD_INT 11
49481: PUSH
49482: LD_INT 12
49484: PUSH
49485: LD_INT 15
49487: PUSH
49488: LD_INT 16
49490: PUSH
49491: LD_INT 22
49493: PUSH
49494: LD_INT 23
49496: PUSH
49497: LD_INT 26
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 101
49513: PUSH
49514: LD_INT 102
49516: PUSH
49517: LD_INT 106
49519: PUSH
49520: LD_INT 116
49522: PUSH
49523: LD_INT 117
49525: PUSH
49526: LD_INT 118
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: ST_TO_ADDR
49541: GO 52616
49543: LD_INT 2
49545: DOUBLE
49546: EQUAL
49547: IFTRUE 49551
49549: GO 49635
49551: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49552: LD_ADDR_VAR 0 2
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: LD_INT 4
49562: PUSH
49563: LD_INT 11
49565: PUSH
49566: LD_INT 12
49568: PUSH
49569: LD_INT 15
49571: PUSH
49572: LD_INT 16
49574: PUSH
49575: LD_INT 22
49577: PUSH
49578: LD_INT 23
49580: PUSH
49581: LD_INT 26
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 101
49597: PUSH
49598: LD_INT 102
49600: PUSH
49601: LD_INT 105
49603: PUSH
49604: LD_INT 106
49606: PUSH
49607: LD_INT 108
49609: PUSH
49610: LD_INT 116
49612: PUSH
49613: LD_INT 117
49615: PUSH
49616: LD_INT 118
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: ST_TO_ADDR
49633: GO 52616
49635: LD_INT 3
49637: DOUBLE
49638: EQUAL
49639: IFTRUE 49643
49641: GO 49731
49643: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49644: LD_ADDR_VAR 0 2
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 4
49654: PUSH
49655: LD_INT 5
49657: PUSH
49658: LD_INT 11
49660: PUSH
49661: LD_INT 12
49663: PUSH
49664: LD_INT 15
49666: PUSH
49667: LD_INT 16
49669: PUSH
49670: LD_INT 22
49672: PUSH
49673: LD_INT 26
49675: PUSH
49676: LD_INT 36
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 101
49693: PUSH
49694: LD_INT 102
49696: PUSH
49697: LD_INT 105
49699: PUSH
49700: LD_INT 106
49702: PUSH
49703: LD_INT 108
49705: PUSH
49706: LD_INT 116
49708: PUSH
49709: LD_INT 117
49711: PUSH
49712: LD_INT 118
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: ST_TO_ADDR
49729: GO 52616
49731: LD_INT 4
49733: DOUBLE
49734: EQUAL
49735: IFTRUE 49739
49737: GO 49835
49739: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
49740: LD_ADDR_VAR 0 2
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: LD_INT 4
49750: PUSH
49751: LD_INT 5
49753: PUSH
49754: LD_INT 8
49756: PUSH
49757: LD_INT 11
49759: PUSH
49760: LD_INT 12
49762: PUSH
49763: LD_INT 15
49765: PUSH
49766: LD_INT 16
49768: PUSH
49769: LD_INT 22
49771: PUSH
49772: LD_INT 23
49774: PUSH
49775: LD_INT 26
49777: PUSH
49778: LD_INT 36
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 101
49797: PUSH
49798: LD_INT 102
49800: PUSH
49801: LD_INT 105
49803: PUSH
49804: LD_INT 106
49806: PUSH
49807: LD_INT 108
49809: PUSH
49810: LD_INT 116
49812: PUSH
49813: LD_INT 117
49815: PUSH
49816: LD_INT 118
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: ST_TO_ADDR
49833: GO 52616
49835: LD_INT 5
49837: DOUBLE
49838: EQUAL
49839: IFTRUE 49843
49841: GO 49955
49843: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
49844: LD_ADDR_VAR 0 2
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 4
49854: PUSH
49855: LD_INT 5
49857: PUSH
49858: LD_INT 6
49860: PUSH
49861: LD_INT 8
49863: PUSH
49864: LD_INT 11
49866: PUSH
49867: LD_INT 12
49869: PUSH
49870: LD_INT 15
49872: PUSH
49873: LD_INT 16
49875: PUSH
49876: LD_INT 22
49878: PUSH
49879: LD_INT 23
49881: PUSH
49882: LD_INT 25
49884: PUSH
49885: LD_INT 26
49887: PUSH
49888: LD_INT 36
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 101
49909: PUSH
49910: LD_INT 102
49912: PUSH
49913: LD_INT 105
49915: PUSH
49916: LD_INT 106
49918: PUSH
49919: LD_INT 108
49921: PUSH
49922: LD_INT 109
49924: PUSH
49925: LD_INT 112
49927: PUSH
49928: LD_INT 116
49930: PUSH
49931: LD_INT 117
49933: PUSH
49934: LD_INT 118
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: ST_TO_ADDR
49953: GO 52616
49955: LD_INT 6
49957: DOUBLE
49958: EQUAL
49959: IFTRUE 49963
49961: GO 50095
49963: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49964: LD_ADDR_VAR 0 2
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 4
49974: PUSH
49975: LD_INT 5
49977: PUSH
49978: LD_INT 6
49980: PUSH
49981: LD_INT 8
49983: PUSH
49984: LD_INT 11
49986: PUSH
49987: LD_INT 12
49989: PUSH
49990: LD_INT 15
49992: PUSH
49993: LD_INT 16
49995: PUSH
49996: LD_INT 20
49998: PUSH
49999: LD_INT 21
50001: PUSH
50002: LD_INT 22
50004: PUSH
50005: LD_INT 23
50007: PUSH
50008: LD_INT 25
50010: PUSH
50011: LD_INT 26
50013: PUSH
50014: LD_INT 30
50016: PUSH
50017: LD_INT 31
50019: PUSH
50020: LD_INT 32
50022: PUSH
50023: LD_INT 36
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 101
50049: PUSH
50050: LD_INT 102
50052: PUSH
50053: LD_INT 105
50055: PUSH
50056: LD_INT 106
50058: PUSH
50059: LD_INT 108
50061: PUSH
50062: LD_INT 109
50064: PUSH
50065: LD_INT 112
50067: PUSH
50068: LD_INT 116
50070: PUSH
50071: LD_INT 117
50073: PUSH
50074: LD_INT 118
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: ST_TO_ADDR
50093: GO 52616
50095: LD_INT 7
50097: DOUBLE
50098: EQUAL
50099: IFTRUE 50103
50101: GO 50215
50103: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50104: LD_ADDR_VAR 0 2
50108: PUSH
50109: LD_INT 2
50111: PUSH
50112: LD_INT 4
50114: PUSH
50115: LD_INT 5
50117: PUSH
50118: LD_INT 7
50120: PUSH
50121: LD_INT 11
50123: PUSH
50124: LD_INT 12
50126: PUSH
50127: LD_INT 15
50129: PUSH
50130: LD_INT 16
50132: PUSH
50133: LD_INT 20
50135: PUSH
50136: LD_INT 21
50138: PUSH
50139: LD_INT 22
50141: PUSH
50142: LD_INT 23
50144: PUSH
50145: LD_INT 25
50147: PUSH
50148: LD_INT 26
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 101
50169: PUSH
50170: LD_INT 102
50172: PUSH
50173: LD_INT 103
50175: PUSH
50176: LD_INT 105
50178: PUSH
50179: LD_INT 106
50181: PUSH
50182: LD_INT 108
50184: PUSH
50185: LD_INT 112
50187: PUSH
50188: LD_INT 116
50190: PUSH
50191: LD_INT 117
50193: PUSH
50194: LD_INT 118
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: ST_TO_ADDR
50213: GO 52616
50215: LD_INT 8
50217: DOUBLE
50218: EQUAL
50219: IFTRUE 50223
50221: GO 50363
50223: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50224: LD_ADDR_VAR 0 2
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: LD_INT 4
50234: PUSH
50235: LD_INT 5
50237: PUSH
50238: LD_INT 6
50240: PUSH
50241: LD_INT 7
50243: PUSH
50244: LD_INT 8
50246: PUSH
50247: LD_INT 11
50249: PUSH
50250: LD_INT 12
50252: PUSH
50253: LD_INT 15
50255: PUSH
50256: LD_INT 16
50258: PUSH
50259: LD_INT 20
50261: PUSH
50262: LD_INT 21
50264: PUSH
50265: LD_INT 22
50267: PUSH
50268: LD_INT 23
50270: PUSH
50271: LD_INT 25
50273: PUSH
50274: LD_INT 26
50276: PUSH
50277: LD_INT 30
50279: PUSH
50280: LD_INT 31
50282: PUSH
50283: LD_INT 32
50285: PUSH
50286: LD_INT 36
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 101
50313: PUSH
50314: LD_INT 102
50316: PUSH
50317: LD_INT 103
50319: PUSH
50320: LD_INT 105
50322: PUSH
50323: LD_INT 106
50325: PUSH
50326: LD_INT 108
50328: PUSH
50329: LD_INT 109
50331: PUSH
50332: LD_INT 112
50334: PUSH
50335: LD_INT 116
50337: PUSH
50338: LD_INT 117
50340: PUSH
50341: LD_INT 118
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: ST_TO_ADDR
50361: GO 52616
50363: LD_INT 9
50365: DOUBLE
50366: EQUAL
50367: IFTRUE 50371
50369: GO 50519
50371: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50372: LD_ADDR_VAR 0 2
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 4
50382: PUSH
50383: LD_INT 5
50385: PUSH
50386: LD_INT 6
50388: PUSH
50389: LD_INT 7
50391: PUSH
50392: LD_INT 8
50394: PUSH
50395: LD_INT 11
50397: PUSH
50398: LD_INT 12
50400: PUSH
50401: LD_INT 15
50403: PUSH
50404: LD_INT 16
50406: PUSH
50407: LD_INT 20
50409: PUSH
50410: LD_INT 21
50412: PUSH
50413: LD_INT 22
50415: PUSH
50416: LD_INT 23
50418: PUSH
50419: LD_INT 25
50421: PUSH
50422: LD_INT 26
50424: PUSH
50425: LD_INT 28
50427: PUSH
50428: LD_INT 30
50430: PUSH
50431: LD_INT 31
50433: PUSH
50434: LD_INT 32
50436: PUSH
50437: LD_INT 36
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 101
50465: PUSH
50466: LD_INT 102
50468: PUSH
50469: LD_INT 103
50471: PUSH
50472: LD_INT 105
50474: PUSH
50475: LD_INT 106
50477: PUSH
50478: LD_INT 108
50480: PUSH
50481: LD_INT 109
50483: PUSH
50484: LD_INT 112
50486: PUSH
50487: LD_INT 114
50489: PUSH
50490: LD_INT 116
50492: PUSH
50493: LD_INT 117
50495: PUSH
50496: LD_INT 118
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: ST_TO_ADDR
50517: GO 52616
50519: LD_INT 10
50521: DOUBLE
50522: EQUAL
50523: IFTRUE 50527
50525: GO 50723
50527: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50528: LD_ADDR_VAR 0 2
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 4
50538: PUSH
50539: LD_INT 5
50541: PUSH
50542: LD_INT 6
50544: PUSH
50545: LD_INT 7
50547: PUSH
50548: LD_INT 8
50550: PUSH
50551: LD_INT 9
50553: PUSH
50554: LD_INT 10
50556: PUSH
50557: LD_INT 11
50559: PUSH
50560: LD_INT 12
50562: PUSH
50563: LD_INT 13
50565: PUSH
50566: LD_INT 14
50568: PUSH
50569: LD_INT 15
50571: PUSH
50572: LD_INT 16
50574: PUSH
50575: LD_INT 17
50577: PUSH
50578: LD_INT 18
50580: PUSH
50581: LD_INT 19
50583: PUSH
50584: LD_INT 20
50586: PUSH
50587: LD_INT 21
50589: PUSH
50590: LD_INT 22
50592: PUSH
50593: LD_INT 23
50595: PUSH
50596: LD_INT 24
50598: PUSH
50599: LD_INT 25
50601: PUSH
50602: LD_INT 26
50604: PUSH
50605: LD_INT 28
50607: PUSH
50608: LD_INT 30
50610: PUSH
50611: LD_INT 31
50613: PUSH
50614: LD_INT 32
50616: PUSH
50617: LD_INT 36
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 101
50653: PUSH
50654: LD_INT 102
50656: PUSH
50657: LD_INT 103
50659: PUSH
50660: LD_INT 104
50662: PUSH
50663: LD_INT 105
50665: PUSH
50666: LD_INT 106
50668: PUSH
50669: LD_INT 107
50671: PUSH
50672: LD_INT 108
50674: PUSH
50675: LD_INT 109
50677: PUSH
50678: LD_INT 110
50680: PUSH
50681: LD_INT 111
50683: PUSH
50684: LD_INT 112
50686: PUSH
50687: LD_INT 114
50689: PUSH
50690: LD_INT 116
50692: PUSH
50693: LD_INT 117
50695: PUSH
50696: LD_INT 118
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: ST_TO_ADDR
50721: GO 52616
50723: LD_INT 11
50725: DOUBLE
50726: EQUAL
50727: IFTRUE 50731
50729: GO 50935
50731: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
50732: LD_ADDR_VAR 0 2
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 3
50742: PUSH
50743: LD_INT 4
50745: PUSH
50746: LD_INT 5
50748: PUSH
50749: LD_INT 6
50751: PUSH
50752: LD_INT 7
50754: PUSH
50755: LD_INT 8
50757: PUSH
50758: LD_INT 9
50760: PUSH
50761: LD_INT 10
50763: PUSH
50764: LD_INT 11
50766: PUSH
50767: LD_INT 12
50769: PUSH
50770: LD_INT 13
50772: PUSH
50773: LD_INT 14
50775: PUSH
50776: LD_INT 15
50778: PUSH
50779: LD_INT 16
50781: PUSH
50782: LD_INT 17
50784: PUSH
50785: LD_INT 18
50787: PUSH
50788: LD_INT 19
50790: PUSH
50791: LD_INT 20
50793: PUSH
50794: LD_INT 21
50796: PUSH
50797: LD_INT 22
50799: PUSH
50800: LD_INT 23
50802: PUSH
50803: LD_INT 24
50805: PUSH
50806: LD_INT 25
50808: PUSH
50809: LD_INT 26
50811: PUSH
50812: LD_INT 28
50814: PUSH
50815: LD_INT 30
50817: PUSH
50818: LD_INT 31
50820: PUSH
50821: LD_INT 32
50823: PUSH
50824: LD_INT 34
50826: PUSH
50827: LD_INT 36
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 101
50865: PUSH
50866: LD_INT 102
50868: PUSH
50869: LD_INT 103
50871: PUSH
50872: LD_INT 104
50874: PUSH
50875: LD_INT 105
50877: PUSH
50878: LD_INT 106
50880: PUSH
50881: LD_INT 107
50883: PUSH
50884: LD_INT 108
50886: PUSH
50887: LD_INT 109
50889: PUSH
50890: LD_INT 110
50892: PUSH
50893: LD_INT 111
50895: PUSH
50896: LD_INT 112
50898: PUSH
50899: LD_INT 114
50901: PUSH
50902: LD_INT 116
50904: PUSH
50905: LD_INT 117
50907: PUSH
50908: LD_INT 118
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: ST_TO_ADDR
50933: GO 52616
50935: LD_INT 12
50937: DOUBLE
50938: EQUAL
50939: IFTRUE 50943
50941: GO 51163
50943: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50944: LD_ADDR_VAR 0 2
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: LD_INT 4
50960: PUSH
50961: LD_INT 5
50963: PUSH
50964: LD_INT 6
50966: PUSH
50967: LD_INT 7
50969: PUSH
50970: LD_INT 8
50972: PUSH
50973: LD_INT 9
50975: PUSH
50976: LD_INT 10
50978: PUSH
50979: LD_INT 11
50981: PUSH
50982: LD_INT 12
50984: PUSH
50985: LD_INT 13
50987: PUSH
50988: LD_INT 14
50990: PUSH
50991: LD_INT 15
50993: PUSH
50994: LD_INT 16
50996: PUSH
50997: LD_INT 17
50999: PUSH
51000: LD_INT 18
51002: PUSH
51003: LD_INT 19
51005: PUSH
51006: LD_INT 20
51008: PUSH
51009: LD_INT 21
51011: PUSH
51012: LD_INT 22
51014: PUSH
51015: LD_INT 23
51017: PUSH
51018: LD_INT 24
51020: PUSH
51021: LD_INT 25
51023: PUSH
51024: LD_INT 26
51026: PUSH
51027: LD_INT 27
51029: PUSH
51030: LD_INT 28
51032: PUSH
51033: LD_INT 30
51035: PUSH
51036: LD_INT 31
51038: PUSH
51039: LD_INT 32
51041: PUSH
51042: LD_INT 33
51044: PUSH
51045: LD_INT 34
51047: PUSH
51048: LD_INT 36
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 101
51089: PUSH
51090: LD_INT 102
51092: PUSH
51093: LD_INT 103
51095: PUSH
51096: LD_INT 104
51098: PUSH
51099: LD_INT 105
51101: PUSH
51102: LD_INT 106
51104: PUSH
51105: LD_INT 107
51107: PUSH
51108: LD_INT 108
51110: PUSH
51111: LD_INT 109
51113: PUSH
51114: LD_INT 110
51116: PUSH
51117: LD_INT 111
51119: PUSH
51120: LD_INT 112
51122: PUSH
51123: LD_INT 113
51125: PUSH
51126: LD_INT 114
51128: PUSH
51129: LD_INT 116
51131: PUSH
51132: LD_INT 117
51134: PUSH
51135: LD_INT 118
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: ST_TO_ADDR
51161: GO 52616
51163: LD_INT 13
51165: DOUBLE
51166: EQUAL
51167: IFTRUE 51171
51169: GO 51379
51171: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51172: LD_ADDR_VAR 0 2
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: LD_INT 3
51185: PUSH
51186: LD_INT 4
51188: PUSH
51189: LD_INT 5
51191: PUSH
51192: LD_INT 8
51194: PUSH
51195: LD_INT 9
51197: PUSH
51198: LD_INT 10
51200: PUSH
51201: LD_INT 11
51203: PUSH
51204: LD_INT 12
51206: PUSH
51207: LD_INT 14
51209: PUSH
51210: LD_INT 15
51212: PUSH
51213: LD_INT 16
51215: PUSH
51216: LD_INT 17
51218: PUSH
51219: LD_INT 18
51221: PUSH
51222: LD_INT 19
51224: PUSH
51225: LD_INT 20
51227: PUSH
51228: LD_INT 21
51230: PUSH
51231: LD_INT 22
51233: PUSH
51234: LD_INT 23
51236: PUSH
51237: LD_INT 24
51239: PUSH
51240: LD_INT 25
51242: PUSH
51243: LD_INT 26
51245: PUSH
51246: LD_INT 27
51248: PUSH
51249: LD_INT 28
51251: PUSH
51252: LD_INT 30
51254: PUSH
51255: LD_INT 31
51257: PUSH
51258: LD_INT 32
51260: PUSH
51261: LD_INT 33
51263: PUSH
51264: LD_INT 34
51266: PUSH
51267: LD_INT 36
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 101
51305: PUSH
51306: LD_INT 102
51308: PUSH
51309: LD_INT 103
51311: PUSH
51312: LD_INT 104
51314: PUSH
51315: LD_INT 105
51317: PUSH
51318: LD_INT 106
51320: PUSH
51321: LD_INT 107
51323: PUSH
51324: LD_INT 108
51326: PUSH
51327: LD_INT 109
51329: PUSH
51330: LD_INT 110
51332: PUSH
51333: LD_INT 111
51335: PUSH
51336: LD_INT 112
51338: PUSH
51339: LD_INT 113
51341: PUSH
51342: LD_INT 114
51344: PUSH
51345: LD_INT 116
51347: PUSH
51348: LD_INT 117
51350: PUSH
51351: LD_INT 118
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: ST_TO_ADDR
51377: GO 52616
51379: LD_INT 14
51381: DOUBLE
51382: EQUAL
51383: IFTRUE 51387
51385: GO 51611
51387: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51388: LD_ADDR_VAR 0 2
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: LD_INT 3
51401: PUSH
51402: LD_INT 4
51404: PUSH
51405: LD_INT 5
51407: PUSH
51408: LD_INT 6
51410: PUSH
51411: LD_INT 7
51413: PUSH
51414: LD_INT 8
51416: PUSH
51417: LD_INT 9
51419: PUSH
51420: LD_INT 10
51422: PUSH
51423: LD_INT 11
51425: PUSH
51426: LD_INT 12
51428: PUSH
51429: LD_INT 13
51431: PUSH
51432: LD_INT 14
51434: PUSH
51435: LD_INT 15
51437: PUSH
51438: LD_INT 16
51440: PUSH
51441: LD_INT 17
51443: PUSH
51444: LD_INT 18
51446: PUSH
51447: LD_INT 19
51449: PUSH
51450: LD_INT 20
51452: PUSH
51453: LD_INT 21
51455: PUSH
51456: LD_INT 22
51458: PUSH
51459: LD_INT 23
51461: PUSH
51462: LD_INT 24
51464: PUSH
51465: LD_INT 25
51467: PUSH
51468: LD_INT 26
51470: PUSH
51471: LD_INT 27
51473: PUSH
51474: LD_INT 28
51476: PUSH
51477: LD_INT 29
51479: PUSH
51480: LD_INT 30
51482: PUSH
51483: LD_INT 31
51485: PUSH
51486: LD_INT 32
51488: PUSH
51489: LD_INT 33
51491: PUSH
51492: LD_INT 34
51494: PUSH
51495: LD_INT 36
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 101
51537: PUSH
51538: LD_INT 102
51540: PUSH
51541: LD_INT 103
51543: PUSH
51544: LD_INT 104
51546: PUSH
51547: LD_INT 105
51549: PUSH
51550: LD_INT 106
51552: PUSH
51553: LD_INT 107
51555: PUSH
51556: LD_INT 108
51558: PUSH
51559: LD_INT 109
51561: PUSH
51562: LD_INT 110
51564: PUSH
51565: LD_INT 111
51567: PUSH
51568: LD_INT 112
51570: PUSH
51571: LD_INT 113
51573: PUSH
51574: LD_INT 114
51576: PUSH
51577: LD_INT 116
51579: PUSH
51580: LD_INT 117
51582: PUSH
51583: LD_INT 118
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: ST_TO_ADDR
51609: GO 52616
51611: LD_INT 15
51613: DOUBLE
51614: EQUAL
51615: IFTRUE 51619
51617: GO 51843
51619: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51620: LD_ADDR_VAR 0 2
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: LD_INT 3
51633: PUSH
51634: LD_INT 4
51636: PUSH
51637: LD_INT 5
51639: PUSH
51640: LD_INT 6
51642: PUSH
51643: LD_INT 7
51645: PUSH
51646: LD_INT 8
51648: PUSH
51649: LD_INT 9
51651: PUSH
51652: LD_INT 10
51654: PUSH
51655: LD_INT 11
51657: PUSH
51658: LD_INT 12
51660: PUSH
51661: LD_INT 13
51663: PUSH
51664: LD_INT 14
51666: PUSH
51667: LD_INT 15
51669: PUSH
51670: LD_INT 16
51672: PUSH
51673: LD_INT 17
51675: PUSH
51676: LD_INT 18
51678: PUSH
51679: LD_INT 19
51681: PUSH
51682: LD_INT 20
51684: PUSH
51685: LD_INT 21
51687: PUSH
51688: LD_INT 22
51690: PUSH
51691: LD_INT 23
51693: PUSH
51694: LD_INT 24
51696: PUSH
51697: LD_INT 25
51699: PUSH
51700: LD_INT 26
51702: PUSH
51703: LD_INT 27
51705: PUSH
51706: LD_INT 28
51708: PUSH
51709: LD_INT 29
51711: PUSH
51712: LD_INT 30
51714: PUSH
51715: LD_INT 31
51717: PUSH
51718: LD_INT 32
51720: PUSH
51721: LD_INT 33
51723: PUSH
51724: LD_INT 34
51726: PUSH
51727: LD_INT 36
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 101
51769: PUSH
51770: LD_INT 102
51772: PUSH
51773: LD_INT 103
51775: PUSH
51776: LD_INT 104
51778: PUSH
51779: LD_INT 105
51781: PUSH
51782: LD_INT 106
51784: PUSH
51785: LD_INT 107
51787: PUSH
51788: LD_INT 108
51790: PUSH
51791: LD_INT 109
51793: PUSH
51794: LD_INT 110
51796: PUSH
51797: LD_INT 111
51799: PUSH
51800: LD_INT 112
51802: PUSH
51803: LD_INT 113
51805: PUSH
51806: LD_INT 114
51808: PUSH
51809: LD_INT 116
51811: PUSH
51812: LD_INT 117
51814: PUSH
51815: LD_INT 118
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: ST_TO_ADDR
51841: GO 52616
51843: LD_INT 16
51845: DOUBLE
51846: EQUAL
51847: IFTRUE 51851
51849: GO 51987
51851: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
51852: LD_ADDR_VAR 0 2
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: LD_INT 4
51862: PUSH
51863: LD_INT 5
51865: PUSH
51866: LD_INT 7
51868: PUSH
51869: LD_INT 11
51871: PUSH
51872: LD_INT 12
51874: PUSH
51875: LD_INT 15
51877: PUSH
51878: LD_INT 16
51880: PUSH
51881: LD_INT 20
51883: PUSH
51884: LD_INT 21
51886: PUSH
51887: LD_INT 22
51889: PUSH
51890: LD_INT 23
51892: PUSH
51893: LD_INT 25
51895: PUSH
51896: LD_INT 26
51898: PUSH
51899: LD_INT 30
51901: PUSH
51902: LD_INT 31
51904: PUSH
51905: LD_INT 32
51907: PUSH
51908: LD_INT 33
51910: PUSH
51911: LD_INT 34
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 101
51937: PUSH
51938: LD_INT 102
51940: PUSH
51941: LD_INT 103
51943: PUSH
51944: LD_INT 106
51946: PUSH
51947: LD_INT 108
51949: PUSH
51950: LD_INT 112
51952: PUSH
51953: LD_INT 113
51955: PUSH
51956: LD_INT 114
51958: PUSH
51959: LD_INT 116
51961: PUSH
51962: LD_INT 117
51964: PUSH
51965: LD_INT 118
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: ST_TO_ADDR
51985: GO 52616
51987: LD_INT 17
51989: DOUBLE
51990: EQUAL
51991: IFTRUE 51995
51993: GO 52219
51995: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
51996: LD_ADDR_VAR 0 2
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: LD_INT 3
52009: PUSH
52010: LD_INT 4
52012: PUSH
52013: LD_INT 5
52015: PUSH
52016: LD_INT 6
52018: PUSH
52019: LD_INT 7
52021: PUSH
52022: LD_INT 8
52024: PUSH
52025: LD_INT 9
52027: PUSH
52028: LD_INT 10
52030: PUSH
52031: LD_INT 11
52033: PUSH
52034: LD_INT 12
52036: PUSH
52037: LD_INT 13
52039: PUSH
52040: LD_INT 14
52042: PUSH
52043: LD_INT 15
52045: PUSH
52046: LD_INT 16
52048: PUSH
52049: LD_INT 17
52051: PUSH
52052: LD_INT 18
52054: PUSH
52055: LD_INT 19
52057: PUSH
52058: LD_INT 20
52060: PUSH
52061: LD_INT 21
52063: PUSH
52064: LD_INT 22
52066: PUSH
52067: LD_INT 23
52069: PUSH
52070: LD_INT 24
52072: PUSH
52073: LD_INT 25
52075: PUSH
52076: LD_INT 26
52078: PUSH
52079: LD_INT 27
52081: PUSH
52082: LD_INT 28
52084: PUSH
52085: LD_INT 29
52087: PUSH
52088: LD_INT 30
52090: PUSH
52091: LD_INT 31
52093: PUSH
52094: LD_INT 32
52096: PUSH
52097: LD_INT 33
52099: PUSH
52100: LD_INT 34
52102: PUSH
52103: LD_INT 36
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 101
52145: PUSH
52146: LD_INT 102
52148: PUSH
52149: LD_INT 103
52151: PUSH
52152: LD_INT 104
52154: PUSH
52155: LD_INT 105
52157: PUSH
52158: LD_INT 106
52160: PUSH
52161: LD_INT 107
52163: PUSH
52164: LD_INT 108
52166: PUSH
52167: LD_INT 109
52169: PUSH
52170: LD_INT 110
52172: PUSH
52173: LD_INT 111
52175: PUSH
52176: LD_INT 112
52178: PUSH
52179: LD_INT 113
52181: PUSH
52182: LD_INT 114
52184: PUSH
52185: LD_INT 116
52187: PUSH
52188: LD_INT 117
52190: PUSH
52191: LD_INT 118
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: ST_TO_ADDR
52217: GO 52616
52219: LD_INT 18
52221: DOUBLE
52222: EQUAL
52223: IFTRUE 52227
52225: GO 52375
52227: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52228: LD_ADDR_VAR 0 2
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: LD_INT 4
52238: PUSH
52239: LD_INT 5
52241: PUSH
52242: LD_INT 7
52244: PUSH
52245: LD_INT 11
52247: PUSH
52248: LD_INT 12
52250: PUSH
52251: LD_INT 15
52253: PUSH
52254: LD_INT 16
52256: PUSH
52257: LD_INT 20
52259: PUSH
52260: LD_INT 21
52262: PUSH
52263: LD_INT 22
52265: PUSH
52266: LD_INT 23
52268: PUSH
52269: LD_INT 25
52271: PUSH
52272: LD_INT 26
52274: PUSH
52275: LD_INT 30
52277: PUSH
52278: LD_INT 31
52280: PUSH
52281: LD_INT 32
52283: PUSH
52284: LD_INT 33
52286: PUSH
52287: LD_INT 34
52289: PUSH
52290: LD_INT 35
52292: PUSH
52293: LD_INT 36
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 101
52321: PUSH
52322: LD_INT 102
52324: PUSH
52325: LD_INT 103
52327: PUSH
52328: LD_INT 106
52330: PUSH
52331: LD_INT 108
52333: PUSH
52334: LD_INT 112
52336: PUSH
52337: LD_INT 113
52339: PUSH
52340: LD_INT 114
52342: PUSH
52343: LD_INT 115
52345: PUSH
52346: LD_INT 116
52348: PUSH
52349: LD_INT 117
52351: PUSH
52352: LD_INT 118
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: ST_TO_ADDR
52373: GO 52616
52375: LD_INT 19
52377: DOUBLE
52378: EQUAL
52379: IFTRUE 52383
52381: GO 52615
52383: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52384: LD_ADDR_VAR 0 2
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: LD_INT 3
52397: PUSH
52398: LD_INT 4
52400: PUSH
52401: LD_INT 5
52403: PUSH
52404: LD_INT 6
52406: PUSH
52407: LD_INT 7
52409: PUSH
52410: LD_INT 8
52412: PUSH
52413: LD_INT 9
52415: PUSH
52416: LD_INT 10
52418: PUSH
52419: LD_INT 11
52421: PUSH
52422: LD_INT 12
52424: PUSH
52425: LD_INT 13
52427: PUSH
52428: LD_INT 14
52430: PUSH
52431: LD_INT 15
52433: PUSH
52434: LD_INT 16
52436: PUSH
52437: LD_INT 17
52439: PUSH
52440: LD_INT 18
52442: PUSH
52443: LD_INT 19
52445: PUSH
52446: LD_INT 20
52448: PUSH
52449: LD_INT 21
52451: PUSH
52452: LD_INT 22
52454: PUSH
52455: LD_INT 23
52457: PUSH
52458: LD_INT 24
52460: PUSH
52461: LD_INT 25
52463: PUSH
52464: LD_INT 26
52466: PUSH
52467: LD_INT 27
52469: PUSH
52470: LD_INT 28
52472: PUSH
52473: LD_INT 29
52475: PUSH
52476: LD_INT 30
52478: PUSH
52479: LD_INT 31
52481: PUSH
52482: LD_INT 32
52484: PUSH
52485: LD_INT 33
52487: PUSH
52488: LD_INT 34
52490: PUSH
52491: LD_INT 35
52493: PUSH
52494: LD_INT 36
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 101
52537: PUSH
52538: LD_INT 102
52540: PUSH
52541: LD_INT 103
52543: PUSH
52544: LD_INT 104
52546: PUSH
52547: LD_INT 105
52549: PUSH
52550: LD_INT 106
52552: PUSH
52553: LD_INT 107
52555: PUSH
52556: LD_INT 108
52558: PUSH
52559: LD_INT 109
52561: PUSH
52562: LD_INT 110
52564: PUSH
52565: LD_INT 111
52567: PUSH
52568: LD_INT 112
52570: PUSH
52571: LD_INT 113
52573: PUSH
52574: LD_INT 114
52576: PUSH
52577: LD_INT 115
52579: PUSH
52580: LD_INT 116
52582: PUSH
52583: LD_INT 117
52585: PUSH
52586: LD_INT 118
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: ST_TO_ADDR
52613: GO 52616
52615: POP
// end else
52616: GO 52847
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52618: LD_ADDR_VAR 0 2
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 4
52634: PUSH
52635: LD_INT 5
52637: PUSH
52638: LD_INT 6
52640: PUSH
52641: LD_INT 7
52643: PUSH
52644: LD_INT 8
52646: PUSH
52647: LD_INT 9
52649: PUSH
52650: LD_INT 10
52652: PUSH
52653: LD_INT 11
52655: PUSH
52656: LD_INT 12
52658: PUSH
52659: LD_INT 13
52661: PUSH
52662: LD_INT 14
52664: PUSH
52665: LD_INT 15
52667: PUSH
52668: LD_INT 16
52670: PUSH
52671: LD_INT 17
52673: PUSH
52674: LD_INT 18
52676: PUSH
52677: LD_INT 19
52679: PUSH
52680: LD_INT 20
52682: PUSH
52683: LD_INT 21
52685: PUSH
52686: LD_INT 22
52688: PUSH
52689: LD_INT 23
52691: PUSH
52692: LD_INT 24
52694: PUSH
52695: LD_INT 25
52697: PUSH
52698: LD_INT 26
52700: PUSH
52701: LD_INT 27
52703: PUSH
52704: LD_INT 28
52706: PUSH
52707: LD_INT 29
52709: PUSH
52710: LD_INT 30
52712: PUSH
52713: LD_INT 31
52715: PUSH
52716: LD_INT 32
52718: PUSH
52719: LD_INT 33
52721: PUSH
52722: LD_INT 34
52724: PUSH
52725: LD_INT 35
52727: PUSH
52728: LD_INT 36
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 101
52771: PUSH
52772: LD_INT 102
52774: PUSH
52775: LD_INT 103
52777: PUSH
52778: LD_INT 104
52780: PUSH
52781: LD_INT 105
52783: PUSH
52784: LD_INT 106
52786: PUSH
52787: LD_INT 107
52789: PUSH
52790: LD_INT 108
52792: PUSH
52793: LD_INT 109
52795: PUSH
52796: LD_INT 110
52798: PUSH
52799: LD_INT 111
52801: PUSH
52802: LD_INT 112
52804: PUSH
52805: LD_INT 113
52807: PUSH
52808: LD_INT 114
52810: PUSH
52811: LD_INT 115
52813: PUSH
52814: LD_INT 116
52816: PUSH
52817: LD_INT 117
52819: PUSH
52820: LD_INT 118
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: ST_TO_ADDR
// if result then
52847: LD_VAR 0 2
52851: IFFALSE 53637
// begin normal :=  ;
52853: LD_ADDR_VAR 0 5
52857: PUSH
52858: LD_STRING 
52860: ST_TO_ADDR
// hardcore :=  ;
52861: LD_ADDR_VAR 0 6
52865: PUSH
52866: LD_STRING 
52868: ST_TO_ADDR
// active :=  ;
52869: LD_ADDR_VAR 0 7
52873: PUSH
52874: LD_STRING 
52876: ST_TO_ADDR
// for i = 1 to normalCounter do
52877: LD_ADDR_VAR 0 8
52881: PUSH
52882: DOUBLE
52883: LD_INT 1
52885: DEC
52886: ST_TO_ADDR
52887: LD_EXP 57
52891: PUSH
52892: FOR_TO
52893: IFFALSE 52994
// begin tmp := 0 ;
52895: LD_ADDR_VAR 0 3
52899: PUSH
52900: LD_STRING 0
52902: ST_TO_ADDR
// if result [ 1 ] then
52903: LD_VAR 0 2
52907: PUSH
52908: LD_INT 1
52910: ARRAY
52911: IFFALSE 52976
// if result [ 1 ] [ 1 ] = i then
52913: LD_VAR 0 2
52917: PUSH
52918: LD_INT 1
52920: ARRAY
52921: PUSH
52922: LD_INT 1
52924: ARRAY
52925: PUSH
52926: LD_VAR 0 8
52930: EQUAL
52931: IFFALSE 52976
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52933: LD_ADDR_VAR 0 2
52937: PUSH
52938: LD_VAR 0 2
52942: PPUSH
52943: LD_INT 1
52945: PPUSH
52946: LD_VAR 0 2
52950: PUSH
52951: LD_INT 1
52953: ARRAY
52954: PPUSH
52955: LD_INT 1
52957: PPUSH
52958: CALL_OW 3
52962: PPUSH
52963: CALL_OW 1
52967: ST_TO_ADDR
// tmp := 1 ;
52968: LD_ADDR_VAR 0 3
52972: PUSH
52973: LD_STRING 1
52975: ST_TO_ADDR
// end ; normal := normal & tmp ;
52976: LD_ADDR_VAR 0 5
52980: PUSH
52981: LD_VAR 0 5
52985: PUSH
52986: LD_VAR 0 3
52990: STR
52991: ST_TO_ADDR
// end ;
52992: GO 52892
52994: POP
52995: POP
// for i = 1 to hardcoreCounter do
52996: LD_ADDR_VAR 0 8
53000: PUSH
53001: DOUBLE
53002: LD_INT 1
53004: DEC
53005: ST_TO_ADDR
53006: LD_EXP 58
53010: PUSH
53011: FOR_TO
53012: IFFALSE 53117
// begin tmp := 0 ;
53014: LD_ADDR_VAR 0 3
53018: PUSH
53019: LD_STRING 0
53021: ST_TO_ADDR
// if result [ 2 ] then
53022: LD_VAR 0 2
53026: PUSH
53027: LD_INT 2
53029: ARRAY
53030: IFFALSE 53099
// if result [ 2 ] [ 1 ] = 100 + i then
53032: LD_VAR 0 2
53036: PUSH
53037: LD_INT 2
53039: ARRAY
53040: PUSH
53041: LD_INT 1
53043: ARRAY
53044: PUSH
53045: LD_INT 100
53047: PUSH
53048: LD_VAR 0 8
53052: PLUS
53053: EQUAL
53054: IFFALSE 53099
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53056: LD_ADDR_VAR 0 2
53060: PUSH
53061: LD_VAR 0 2
53065: PPUSH
53066: LD_INT 2
53068: PPUSH
53069: LD_VAR 0 2
53073: PUSH
53074: LD_INT 2
53076: ARRAY
53077: PPUSH
53078: LD_INT 1
53080: PPUSH
53081: CALL_OW 3
53085: PPUSH
53086: CALL_OW 1
53090: ST_TO_ADDR
// tmp := 1 ;
53091: LD_ADDR_VAR 0 3
53095: PUSH
53096: LD_STRING 1
53098: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53099: LD_ADDR_VAR 0 6
53103: PUSH
53104: LD_VAR 0 6
53108: PUSH
53109: LD_VAR 0 3
53113: STR
53114: ST_TO_ADDR
// end ;
53115: GO 53011
53117: POP
53118: POP
// if isGameLoad then
53119: LD_VAR 0 1
53123: IFFALSE 53598
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53125: LD_ADDR_VAR 0 4
53129: PUSH
53130: LD_EXP 61
53134: PUSH
53135: LD_EXP 60
53139: PUSH
53140: LD_EXP 62
53144: PUSH
53145: LD_EXP 59
53149: PUSH
53150: LD_EXP 63
53154: PUSH
53155: LD_EXP 64
53159: PUSH
53160: LD_EXP 65
53164: PUSH
53165: LD_EXP 66
53169: PUSH
53170: LD_EXP 67
53174: PUSH
53175: LD_EXP 68
53179: PUSH
53180: LD_EXP 69
53184: PUSH
53185: LD_EXP 70
53189: PUSH
53190: LD_EXP 71
53194: PUSH
53195: LD_EXP 72
53199: PUSH
53200: LD_EXP 80
53204: PUSH
53205: LD_EXP 81
53209: PUSH
53210: LD_EXP 82
53214: PUSH
53215: LD_EXP 83
53219: PUSH
53220: LD_EXP 85
53224: PUSH
53225: LD_EXP 86
53229: PUSH
53230: LD_EXP 87
53234: PUSH
53235: LD_EXP 90
53239: PUSH
53240: LD_EXP 92
53244: PUSH
53245: LD_EXP 93
53249: PUSH
53250: LD_EXP 94
53254: PUSH
53255: LD_EXP 96
53259: PUSH
53260: LD_EXP 97
53264: PUSH
53265: LD_EXP 100
53269: PUSH
53270: LD_EXP 101
53274: PUSH
53275: LD_EXP 102
53279: PUSH
53280: LD_EXP 103
53284: PUSH
53285: LD_EXP 104
53289: PUSH
53290: LD_EXP 105
53294: PUSH
53295: LD_EXP 106
53299: PUSH
53300: LD_EXP 107
53304: PUSH
53305: LD_EXP 108
53309: PUSH
53310: LD_EXP 73
53314: PUSH
53315: LD_EXP 74
53319: PUSH
53320: LD_EXP 77
53324: PUSH
53325: LD_EXP 78
53329: PUSH
53330: LD_EXP 79
53334: PUSH
53335: LD_EXP 75
53339: PUSH
53340: LD_EXP 76
53344: PUSH
53345: LD_EXP 84
53349: PUSH
53350: LD_EXP 88
53354: PUSH
53355: LD_EXP 89
53359: PUSH
53360: LD_EXP 91
53364: PUSH
53365: LD_EXP 95
53369: PUSH
53370: LD_EXP 98
53374: PUSH
53375: LD_EXP 99
53379: PUSH
53380: LD_EXP 109
53384: PUSH
53385: LD_EXP 110
53389: PUSH
53390: LD_EXP 111
53394: PUSH
53395: LD_EXP 112
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: ST_TO_ADDR
// tmp :=  ;
53456: LD_ADDR_VAR 0 3
53460: PUSH
53461: LD_STRING 
53463: ST_TO_ADDR
// for i = 1 to normalCounter do
53464: LD_ADDR_VAR 0 8
53468: PUSH
53469: DOUBLE
53470: LD_INT 1
53472: DEC
53473: ST_TO_ADDR
53474: LD_EXP 57
53478: PUSH
53479: FOR_TO
53480: IFFALSE 53516
// begin if flags [ i ] then
53482: LD_VAR 0 4
53486: PUSH
53487: LD_VAR 0 8
53491: ARRAY
53492: IFFALSE 53514
// tmp := tmp & i & ; ;
53494: LD_ADDR_VAR 0 3
53498: PUSH
53499: LD_VAR 0 3
53503: PUSH
53504: LD_VAR 0 8
53508: STR
53509: PUSH
53510: LD_STRING ;
53512: STR
53513: ST_TO_ADDR
// end ;
53514: GO 53479
53516: POP
53517: POP
// for i = 1 to hardcoreCounter do
53518: LD_ADDR_VAR 0 8
53522: PUSH
53523: DOUBLE
53524: LD_INT 1
53526: DEC
53527: ST_TO_ADDR
53528: LD_EXP 58
53532: PUSH
53533: FOR_TO
53534: IFFALSE 53580
// begin if flags [ normalCounter + i ] then
53536: LD_VAR 0 4
53540: PUSH
53541: LD_EXP 57
53545: PUSH
53546: LD_VAR 0 8
53550: PLUS
53551: ARRAY
53552: IFFALSE 53578
// tmp := tmp & ( 100 + i ) & ; ;
53554: LD_ADDR_VAR 0 3
53558: PUSH
53559: LD_VAR 0 3
53563: PUSH
53564: LD_INT 100
53566: PUSH
53567: LD_VAR 0 8
53571: PLUS
53572: STR
53573: PUSH
53574: LD_STRING ;
53576: STR
53577: ST_TO_ADDR
// end ;
53578: GO 53533
53580: POP
53581: POP
// if tmp then
53582: LD_VAR 0 3
53586: IFFALSE 53598
// active := tmp ;
53588: LD_ADDR_VAR 0 7
53592: PUSH
53593: LD_VAR 0 3
53597: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53598: LD_STRING getStreamItemsFromMission("
53600: PUSH
53601: LD_VAR 0 5
53605: STR
53606: PUSH
53607: LD_STRING ","
53609: STR
53610: PUSH
53611: LD_VAR 0 6
53615: STR
53616: PUSH
53617: LD_STRING ","
53619: STR
53620: PUSH
53621: LD_VAR 0 7
53625: STR
53626: PUSH
53627: LD_STRING ")
53629: STR
53630: PPUSH
53631: CALL_OW 559
// end else
53635: GO 53644
// ToLua ( getStreamItemsFromMission("","","") ) ;
53637: LD_STRING getStreamItemsFromMission("","","")
53639: PPUSH
53640: CALL_OW 559
// end ;
53644: LD_VAR 0 2
53648: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53649: LD_EXP 56
53653: PUSH
53654: LD_EXP 61
53658: AND
53659: IFFALSE 53783
53661: GO 53663
53663: DISABLE
53664: LD_INT 0
53666: PPUSH
53667: PPUSH
// begin enable ;
53668: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53669: LD_ADDR_VAR 0 2
53673: PUSH
53674: LD_INT 22
53676: PUSH
53677: LD_OWVAR 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 34
53691: PUSH
53692: LD_INT 7
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 34
53701: PUSH
53702: LD_INT 45
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 34
53711: PUSH
53712: LD_INT 28
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 34
53721: PUSH
53722: LD_INT 47
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PPUSH
53740: CALL_OW 69
53744: ST_TO_ADDR
// if not tmp then
53745: LD_VAR 0 2
53749: NOT
53750: IFFALSE 53754
// exit ;
53752: GO 53783
// for i in tmp do
53754: LD_ADDR_VAR 0 1
53758: PUSH
53759: LD_VAR 0 2
53763: PUSH
53764: FOR_IN
53765: IFFALSE 53781
// begin SetLives ( i , 0 ) ;
53767: LD_VAR 0 1
53771: PPUSH
53772: LD_INT 0
53774: PPUSH
53775: CALL_OW 234
// end ;
53779: GO 53764
53781: POP
53782: POP
// end ;
53783: PPOPN 2
53785: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
53786: LD_EXP 56
53790: PUSH
53791: LD_EXP 62
53795: AND
53796: IFFALSE 53880
53798: GO 53800
53800: DISABLE
53801: LD_INT 0
53803: PPUSH
53804: PPUSH
// begin enable ;
53805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
53806: LD_ADDR_VAR 0 2
53810: PUSH
53811: LD_INT 22
53813: PUSH
53814: LD_OWVAR 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 32
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PPUSH
53837: CALL_OW 69
53841: ST_TO_ADDR
// if not tmp then
53842: LD_VAR 0 2
53846: NOT
53847: IFFALSE 53851
// exit ;
53849: GO 53880
// for i in tmp do
53851: LD_ADDR_VAR 0 1
53855: PUSH
53856: LD_VAR 0 2
53860: PUSH
53861: FOR_IN
53862: IFFALSE 53878
// begin SetLives ( i , 0 ) ;
53864: LD_VAR 0 1
53868: PPUSH
53869: LD_INT 0
53871: PPUSH
53872: CALL_OW 234
// end ;
53876: GO 53861
53878: POP
53879: POP
// end ;
53880: PPOPN 2
53882: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
53883: LD_EXP 56
53887: PUSH
53888: LD_EXP 59
53892: AND
53893: IFFALSE 53986
53895: GO 53897
53897: DISABLE
53898: LD_INT 0
53900: PPUSH
// begin enable ;
53901: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
53902: LD_ADDR_VAR 0 1
53906: PUSH
53907: LD_INT 22
53909: PUSH
53910: LD_OWVAR 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: LD_INT 25
53924: PUSH
53925: LD_INT 5
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 25
53934: PUSH
53935: LD_INT 9
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 25
53944: PUSH
53945: LD_INT 8
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PPUSH
53962: CALL_OW 69
53966: PUSH
53967: FOR_IN
53968: IFFALSE 53984
// begin SetClass ( i , 1 ) ;
53970: LD_VAR 0 1
53974: PPUSH
53975: LD_INT 1
53977: PPUSH
53978: CALL_OW 336
// end ;
53982: GO 53967
53984: POP
53985: POP
// end ;
53986: PPOPN 1
53988: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
53989: LD_EXP 56
53993: PUSH
53994: LD_EXP 60
53998: AND
53999: PUSH
54000: LD_OWVAR 65
54004: PUSH
54005: LD_INT 7
54007: LESS
54008: AND
54009: IFFALSE 54023
54011: GO 54013
54013: DISABLE
// begin enable ;
54014: ENABLE
// game_speed := 7 ;
54015: LD_ADDR_OWVAR 65
54019: PUSH
54020: LD_INT 7
54022: ST_TO_ADDR
// end ;
54023: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54024: LD_EXP 56
54028: PUSH
54029: LD_EXP 63
54033: AND
54034: IFFALSE 54236
54036: GO 54038
54038: DISABLE
54039: LD_INT 0
54041: PPUSH
54042: PPUSH
54043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54044: LD_ADDR_VAR 0 3
54048: PUSH
54049: LD_INT 81
54051: PUSH
54052: LD_OWVAR 2
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 21
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PPUSH
54075: CALL_OW 69
54079: ST_TO_ADDR
// if not tmp then
54080: LD_VAR 0 3
54084: NOT
54085: IFFALSE 54089
// exit ;
54087: GO 54236
// if tmp > 5 then
54089: LD_VAR 0 3
54093: PUSH
54094: LD_INT 5
54096: GREATER
54097: IFFALSE 54109
// k := 5 else
54099: LD_ADDR_VAR 0 2
54103: PUSH
54104: LD_INT 5
54106: ST_TO_ADDR
54107: GO 54119
// k := tmp ;
54109: LD_ADDR_VAR 0 2
54113: PUSH
54114: LD_VAR 0 3
54118: ST_TO_ADDR
// for i := 1 to k do
54119: LD_ADDR_VAR 0 1
54123: PUSH
54124: DOUBLE
54125: LD_INT 1
54127: DEC
54128: ST_TO_ADDR
54129: LD_VAR 0 2
54133: PUSH
54134: FOR_TO
54135: IFFALSE 54234
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54137: LD_VAR 0 3
54141: PUSH
54142: LD_VAR 0 1
54146: ARRAY
54147: PPUSH
54148: LD_VAR 0 1
54152: PUSH
54153: LD_INT 4
54155: MOD
54156: PUSH
54157: LD_INT 1
54159: PLUS
54160: PPUSH
54161: CALL_OW 259
54165: PUSH
54166: LD_INT 10
54168: LESS
54169: IFFALSE 54232
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54171: LD_VAR 0 3
54175: PUSH
54176: LD_VAR 0 1
54180: ARRAY
54181: PPUSH
54182: LD_VAR 0 1
54186: PUSH
54187: LD_INT 4
54189: MOD
54190: PUSH
54191: LD_INT 1
54193: PLUS
54194: PPUSH
54195: LD_VAR 0 3
54199: PUSH
54200: LD_VAR 0 1
54204: ARRAY
54205: PPUSH
54206: LD_VAR 0 1
54210: PUSH
54211: LD_INT 4
54213: MOD
54214: PUSH
54215: LD_INT 1
54217: PLUS
54218: PPUSH
54219: CALL_OW 259
54223: PUSH
54224: LD_INT 1
54226: PLUS
54227: PPUSH
54228: CALL_OW 237
54232: GO 54134
54234: POP
54235: POP
// end ;
54236: PPOPN 3
54238: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54239: LD_EXP 56
54243: PUSH
54244: LD_EXP 64
54248: AND
54249: IFFALSE 54269
54251: GO 54253
54253: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54254: LD_INT 4
54256: PPUSH
54257: LD_OWVAR 2
54261: PPUSH
54262: LD_INT 0
54264: PPUSH
54265: CALL_OW 324
54269: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54270: LD_EXP 56
54274: PUSH
54275: LD_EXP 93
54279: AND
54280: IFFALSE 54300
54282: GO 54284
54284: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54285: LD_INT 19
54287: PPUSH
54288: LD_OWVAR 2
54292: PPUSH
54293: LD_INT 0
54295: PPUSH
54296: CALL_OW 324
54300: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54301: LD_EXP 56
54305: PUSH
54306: LD_EXP 65
54310: AND
54311: IFFALSE 54413
54313: GO 54315
54315: DISABLE
54316: LD_INT 0
54318: PPUSH
54319: PPUSH
// begin enable ;
54320: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54321: LD_ADDR_VAR 0 2
54325: PUSH
54326: LD_INT 22
54328: PUSH
54329: LD_OWVAR 2
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: LD_INT 34
54343: PUSH
54344: LD_INT 11
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 34
54353: PUSH
54354: LD_INT 30
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: LIST
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PPUSH
54370: CALL_OW 69
54374: ST_TO_ADDR
// if not tmp then
54375: LD_VAR 0 2
54379: NOT
54380: IFFALSE 54384
// exit ;
54382: GO 54413
// for i in tmp do
54384: LD_ADDR_VAR 0 1
54388: PUSH
54389: LD_VAR 0 2
54393: PUSH
54394: FOR_IN
54395: IFFALSE 54411
// begin SetLives ( i , 0 ) ;
54397: LD_VAR 0 1
54401: PPUSH
54402: LD_INT 0
54404: PPUSH
54405: CALL_OW 234
// end ;
54409: GO 54394
54411: POP
54412: POP
// end ;
54413: PPOPN 2
54415: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54416: LD_EXP 56
54420: PUSH
54421: LD_EXP 66
54425: AND
54426: IFFALSE 54446
54428: GO 54430
54430: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54431: LD_INT 32
54433: PPUSH
54434: LD_OWVAR 2
54438: PPUSH
54439: LD_INT 0
54441: PPUSH
54442: CALL_OW 324
54446: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54447: LD_EXP 56
54451: PUSH
54452: LD_EXP 67
54456: AND
54457: IFFALSE 54638
54459: GO 54461
54461: DISABLE
54462: LD_INT 0
54464: PPUSH
54465: PPUSH
54466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54467: LD_ADDR_VAR 0 2
54471: PUSH
54472: LD_INT 22
54474: PUSH
54475: LD_OWVAR 2
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 33
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PPUSH
54498: CALL_OW 69
54502: ST_TO_ADDR
// if not tmp then
54503: LD_VAR 0 2
54507: NOT
54508: IFFALSE 54512
// exit ;
54510: GO 54638
// side := 0 ;
54512: LD_ADDR_VAR 0 3
54516: PUSH
54517: LD_INT 0
54519: ST_TO_ADDR
// for i := 1 to 8 do
54520: LD_ADDR_VAR 0 1
54524: PUSH
54525: DOUBLE
54526: LD_INT 1
54528: DEC
54529: ST_TO_ADDR
54530: LD_INT 8
54532: PUSH
54533: FOR_TO
54534: IFFALSE 54582
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54536: LD_OWVAR 2
54540: PUSH
54541: LD_VAR 0 1
54545: NONEQUAL
54546: PUSH
54547: LD_OWVAR 2
54551: PPUSH
54552: LD_VAR 0 1
54556: PPUSH
54557: CALL_OW 81
54561: PUSH
54562: LD_INT 2
54564: EQUAL
54565: AND
54566: IFFALSE 54580
// begin side := i ;
54568: LD_ADDR_VAR 0 3
54572: PUSH
54573: LD_VAR 0 1
54577: ST_TO_ADDR
// break ;
54578: GO 54582
// end ;
54580: GO 54533
54582: POP
54583: POP
// if not side then
54584: LD_VAR 0 3
54588: NOT
54589: IFFALSE 54593
// exit ;
54591: GO 54638
// for i := 1 to tmp do
54593: LD_ADDR_VAR 0 1
54597: PUSH
54598: DOUBLE
54599: LD_INT 1
54601: DEC
54602: ST_TO_ADDR
54603: LD_VAR 0 2
54607: PUSH
54608: FOR_TO
54609: IFFALSE 54636
// if Prob ( 60 ) then
54611: LD_INT 60
54613: PPUSH
54614: CALL_OW 13
54618: IFFALSE 54634
// SetSide ( i , side ) ;
54620: LD_VAR 0 1
54624: PPUSH
54625: LD_VAR 0 3
54629: PPUSH
54630: CALL_OW 235
54634: GO 54608
54636: POP
54637: POP
// end ;
54638: PPOPN 3
54640: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54641: LD_EXP 56
54645: PUSH
54646: LD_EXP 69
54650: AND
54651: IFFALSE 54770
54653: GO 54655
54655: DISABLE
54656: LD_INT 0
54658: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54659: LD_ADDR_VAR 0 1
54663: PUSH
54664: LD_INT 22
54666: PUSH
54667: LD_OWVAR 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 21
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 3
54688: PUSH
54689: LD_INT 23
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: LIST
54707: PPUSH
54708: CALL_OW 69
54712: PUSH
54713: FOR_IN
54714: IFFALSE 54768
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54716: LD_VAR 0 1
54720: PPUSH
54721: CALL_OW 257
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: LD_INT 3
54734: PUSH
54735: LD_INT 4
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: IN
54744: IFFALSE 54766
// SetClass ( un , rand ( 1 , 4 ) ) ;
54746: LD_VAR 0 1
54750: PPUSH
54751: LD_INT 1
54753: PPUSH
54754: LD_INT 4
54756: PPUSH
54757: CALL_OW 12
54761: PPUSH
54762: CALL_OW 336
54766: GO 54713
54768: POP
54769: POP
// end ;
54770: PPOPN 1
54772: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
54773: LD_EXP 56
54777: PUSH
54778: LD_EXP 68
54782: AND
54783: IFFALSE 54862
54785: GO 54787
54787: DISABLE
54788: LD_INT 0
54790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54791: LD_ADDR_VAR 0 1
54795: PUSH
54796: LD_INT 22
54798: PUSH
54799: LD_OWVAR 2
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 21
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PPUSH
54822: CALL_OW 69
54826: ST_TO_ADDR
// if not tmp then
54827: LD_VAR 0 1
54831: NOT
54832: IFFALSE 54836
// exit ;
54834: GO 54862
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
54836: LD_VAR 0 1
54840: PUSH
54841: LD_INT 1
54843: PPUSH
54844: LD_VAR 0 1
54848: PPUSH
54849: CALL_OW 12
54853: ARRAY
54854: PPUSH
54855: LD_INT 100
54857: PPUSH
54858: CALL_OW 234
// end ;
54862: PPOPN 1
54864: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
54865: LD_EXP 56
54869: PUSH
54870: LD_EXP 70
54874: AND
54875: IFFALSE 54973
54877: GO 54879
54879: DISABLE
54880: LD_INT 0
54882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54883: LD_ADDR_VAR 0 1
54887: PUSH
54888: LD_INT 22
54890: PUSH
54891: LD_OWVAR 2
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 21
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PPUSH
54914: CALL_OW 69
54918: ST_TO_ADDR
// if not tmp then
54919: LD_VAR 0 1
54923: NOT
54924: IFFALSE 54928
// exit ;
54926: GO 54973
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54928: LD_VAR 0 1
54932: PUSH
54933: LD_INT 1
54935: PPUSH
54936: LD_VAR 0 1
54940: PPUSH
54941: CALL_OW 12
54945: ARRAY
54946: PPUSH
54947: LD_INT 1
54949: PPUSH
54950: LD_INT 4
54952: PPUSH
54953: CALL_OW 12
54957: PPUSH
54958: LD_INT 3000
54960: PPUSH
54961: LD_INT 9000
54963: PPUSH
54964: CALL_OW 12
54968: PPUSH
54969: CALL_OW 492
// end ;
54973: PPOPN 1
54975: END
// every 0 0$1 trigger StreamModeActive and sDepot do
54976: LD_EXP 56
54980: PUSH
54981: LD_EXP 71
54985: AND
54986: IFFALSE 55006
54988: GO 54990
54990: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
54991: LD_INT 1
54993: PPUSH
54994: LD_OWVAR 2
54998: PPUSH
54999: LD_INT 0
55001: PPUSH
55002: CALL_OW 324
55006: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55007: LD_EXP 56
55011: PUSH
55012: LD_EXP 72
55016: AND
55017: IFFALSE 55100
55019: GO 55021
55021: DISABLE
55022: LD_INT 0
55024: PPUSH
55025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55026: LD_ADDR_VAR 0 2
55030: PUSH
55031: LD_INT 22
55033: PUSH
55034: LD_OWVAR 2
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 21
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PPUSH
55057: CALL_OW 69
55061: ST_TO_ADDR
// if not tmp then
55062: LD_VAR 0 2
55066: NOT
55067: IFFALSE 55071
// exit ;
55069: GO 55100
// for i in tmp do
55071: LD_ADDR_VAR 0 1
55075: PUSH
55076: LD_VAR 0 2
55080: PUSH
55081: FOR_IN
55082: IFFALSE 55098
// SetBLevel ( i , 10 ) ;
55084: LD_VAR 0 1
55088: PPUSH
55089: LD_INT 10
55091: PPUSH
55092: CALL_OW 241
55096: GO 55081
55098: POP
55099: POP
// end ;
55100: PPOPN 2
55102: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55103: LD_EXP 56
55107: PUSH
55108: LD_EXP 73
55112: AND
55113: IFFALSE 55224
55115: GO 55117
55117: DISABLE
55118: LD_INT 0
55120: PPUSH
55121: PPUSH
55122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55123: LD_ADDR_VAR 0 3
55127: PUSH
55128: LD_INT 22
55130: PUSH
55131: LD_OWVAR 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 25
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PPUSH
55154: CALL_OW 69
55158: ST_TO_ADDR
// if not tmp then
55159: LD_VAR 0 3
55163: NOT
55164: IFFALSE 55168
// exit ;
55166: GO 55224
// un := tmp [ rand ( 1 , tmp ) ] ;
55168: LD_ADDR_VAR 0 2
55172: PUSH
55173: LD_VAR 0 3
55177: PUSH
55178: LD_INT 1
55180: PPUSH
55181: LD_VAR 0 3
55185: PPUSH
55186: CALL_OW 12
55190: ARRAY
55191: ST_TO_ADDR
// if Crawls ( un ) then
55192: LD_VAR 0 2
55196: PPUSH
55197: CALL_OW 318
55201: IFFALSE 55212
// ComWalk ( un ) ;
55203: LD_VAR 0 2
55207: PPUSH
55208: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55212: LD_VAR 0 2
55216: PPUSH
55217: LD_INT 5
55219: PPUSH
55220: CALL_OW 336
// end ;
55224: PPOPN 3
55226: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55227: LD_EXP 56
55231: PUSH
55232: LD_EXP 74
55236: AND
55237: PUSH
55238: LD_OWVAR 67
55242: PUSH
55243: LD_INT 4
55245: LESS
55246: AND
55247: IFFALSE 55266
55249: GO 55251
55251: DISABLE
// begin Difficulty := Difficulty + 1 ;
55252: LD_ADDR_OWVAR 67
55256: PUSH
55257: LD_OWVAR 67
55261: PUSH
55262: LD_INT 1
55264: PLUS
55265: ST_TO_ADDR
// end ;
55266: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55267: LD_EXP 56
55271: PUSH
55272: LD_EXP 75
55276: AND
55277: IFFALSE 55380
55279: GO 55281
55281: DISABLE
55282: LD_INT 0
55284: PPUSH
// begin for i := 1 to 5 do
55285: LD_ADDR_VAR 0 1
55289: PUSH
55290: DOUBLE
55291: LD_INT 1
55293: DEC
55294: ST_TO_ADDR
55295: LD_INT 5
55297: PUSH
55298: FOR_TO
55299: IFFALSE 55378
// begin uc_nation := nation_nature ;
55301: LD_ADDR_OWVAR 21
55305: PUSH
55306: LD_INT 0
55308: ST_TO_ADDR
// uc_side := 0 ;
55309: LD_ADDR_OWVAR 20
55313: PUSH
55314: LD_INT 0
55316: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55317: LD_ADDR_OWVAR 29
55321: PUSH
55322: LD_INT 12
55324: PUSH
55325: LD_INT 12
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: ST_TO_ADDR
// hc_agressivity := 20 ;
55332: LD_ADDR_OWVAR 35
55336: PUSH
55337: LD_INT 20
55339: ST_TO_ADDR
// hc_class := class_tiger ;
55340: LD_ADDR_OWVAR 28
55344: PUSH
55345: LD_INT 14
55347: ST_TO_ADDR
// hc_gallery :=  ;
55348: LD_ADDR_OWVAR 33
55352: PUSH
55353: LD_STRING 
55355: ST_TO_ADDR
// hc_name :=  ;
55356: LD_ADDR_OWVAR 26
55360: PUSH
55361: LD_STRING 
55363: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55364: CALL_OW 44
55368: PPUSH
55369: LD_INT 0
55371: PPUSH
55372: CALL_OW 51
// end ;
55376: GO 55298
55378: POP
55379: POP
// end ;
55380: PPOPN 1
55382: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55383: LD_EXP 56
55387: PUSH
55388: LD_EXP 76
55392: AND
55393: IFFALSE 55402
55395: GO 55397
55397: DISABLE
// StreamSibBomb ;
55398: CALL 55403 0 0
55402: END
// export function StreamSibBomb ; var i , x , y ; begin
55403: LD_INT 0
55405: PPUSH
55406: PPUSH
55407: PPUSH
55408: PPUSH
// result := false ;
55409: LD_ADDR_VAR 0 1
55413: PUSH
55414: LD_INT 0
55416: ST_TO_ADDR
// for i := 1 to 16 do
55417: LD_ADDR_VAR 0 2
55421: PUSH
55422: DOUBLE
55423: LD_INT 1
55425: DEC
55426: ST_TO_ADDR
55427: LD_INT 16
55429: PUSH
55430: FOR_TO
55431: IFFALSE 55630
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55433: LD_ADDR_VAR 0 3
55437: PUSH
55438: LD_INT 10
55440: PUSH
55441: LD_INT 20
55443: PUSH
55444: LD_INT 30
55446: PUSH
55447: LD_INT 40
55449: PUSH
55450: LD_INT 50
55452: PUSH
55453: LD_INT 60
55455: PUSH
55456: LD_INT 70
55458: PUSH
55459: LD_INT 80
55461: PUSH
55462: LD_INT 90
55464: PUSH
55465: LD_INT 100
55467: PUSH
55468: LD_INT 110
55470: PUSH
55471: LD_INT 120
55473: PUSH
55474: LD_INT 130
55476: PUSH
55477: LD_INT 140
55479: PUSH
55480: LD_INT 150
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PPUSH
55503: LD_INT 15
55505: PPUSH
55506: CALL_OW 12
55510: ARRAY
55511: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55512: LD_ADDR_VAR 0 4
55516: PUSH
55517: LD_INT 10
55519: PUSH
55520: LD_INT 20
55522: PUSH
55523: LD_INT 30
55525: PUSH
55526: LD_INT 40
55528: PUSH
55529: LD_INT 50
55531: PUSH
55532: LD_INT 60
55534: PUSH
55535: LD_INT 70
55537: PUSH
55538: LD_INT 80
55540: PUSH
55541: LD_INT 90
55543: PUSH
55544: LD_INT 100
55546: PUSH
55547: LD_INT 110
55549: PUSH
55550: LD_INT 120
55552: PUSH
55553: LD_INT 130
55555: PUSH
55556: LD_INT 140
55558: PUSH
55559: LD_INT 150
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: PPUSH
55582: LD_INT 15
55584: PPUSH
55585: CALL_OW 12
55589: ARRAY
55590: ST_TO_ADDR
// if ValidHex ( x , y ) then
55591: LD_VAR 0 3
55595: PPUSH
55596: LD_VAR 0 4
55600: PPUSH
55601: CALL_OW 488
55605: IFFALSE 55628
// begin result := [ x , y ] ;
55607: LD_ADDR_VAR 0 1
55611: PUSH
55612: LD_VAR 0 3
55616: PUSH
55617: LD_VAR 0 4
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: ST_TO_ADDR
// break ;
55626: GO 55630
// end ; end ;
55628: GO 55430
55630: POP
55631: POP
// if result then
55632: LD_VAR 0 1
55636: IFFALSE 55696
// begin ToLua ( playSibBomb() ) ;
55638: LD_STRING playSibBomb()
55640: PPUSH
55641: CALL_OW 559
// wait ( 0 0$14 ) ;
55645: LD_INT 490
55647: PPUSH
55648: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55652: LD_VAR 0 1
55656: PUSH
55657: LD_INT 1
55659: ARRAY
55660: PPUSH
55661: LD_VAR 0 1
55665: PUSH
55666: LD_INT 2
55668: ARRAY
55669: PPUSH
55670: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55674: LD_VAR 0 1
55678: PUSH
55679: LD_INT 1
55681: ARRAY
55682: PPUSH
55683: LD_VAR 0 1
55687: PUSH
55688: LD_INT 2
55690: ARRAY
55691: PPUSH
55692: CALL_OW 429
// end ; end ;
55696: LD_VAR 0 1
55700: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55701: LD_EXP 56
55705: PUSH
55706: LD_EXP 78
55710: AND
55711: IFFALSE 55723
55713: GO 55715
55715: DISABLE
// YouLost (  ) ;
55716: LD_STRING 
55718: PPUSH
55719: CALL_OW 104
55723: END
// every 0 0$1 trigger StreamModeActive and sFog do
55724: LD_EXP 56
55728: PUSH
55729: LD_EXP 77
55733: AND
55734: IFFALSE 55748
55736: GO 55738
55738: DISABLE
// FogOff ( your_side ) ;
55739: LD_OWVAR 2
55743: PPUSH
55744: CALL_OW 344
55748: END
// every 0 0$1 trigger StreamModeActive and sSun do
55749: LD_EXP 56
55753: PUSH
55754: LD_EXP 79
55758: AND
55759: IFFALSE 55787
55761: GO 55763
55763: DISABLE
// begin solar_recharge_percent := 0 ;
55764: LD_ADDR_OWVAR 79
55768: PUSH
55769: LD_INT 0
55771: ST_TO_ADDR
// wait ( 5 5$00 ) ;
55772: LD_INT 10500
55774: PPUSH
55775: CALL_OW 67
// solar_recharge_percent := 100 ;
55779: LD_ADDR_OWVAR 79
55783: PUSH
55784: LD_INT 100
55786: ST_TO_ADDR
// end ;
55787: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
55788: LD_EXP 56
55792: PUSH
55793: LD_EXP 80
55797: AND
55798: IFFALSE 56037
55800: GO 55802
55802: DISABLE
55803: LD_INT 0
55805: PPUSH
55806: PPUSH
55807: PPUSH
// begin tmp := [ ] ;
55808: LD_ADDR_VAR 0 3
55812: PUSH
55813: EMPTY
55814: ST_TO_ADDR
// for i := 1 to 6 do
55815: LD_ADDR_VAR 0 1
55819: PUSH
55820: DOUBLE
55821: LD_INT 1
55823: DEC
55824: ST_TO_ADDR
55825: LD_INT 6
55827: PUSH
55828: FOR_TO
55829: IFFALSE 55934
// begin uc_nation := nation_nature ;
55831: LD_ADDR_OWVAR 21
55835: PUSH
55836: LD_INT 0
55838: ST_TO_ADDR
// uc_side := 0 ;
55839: LD_ADDR_OWVAR 20
55843: PUSH
55844: LD_INT 0
55846: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55847: LD_ADDR_OWVAR 29
55851: PUSH
55852: LD_INT 12
55854: PUSH
55855: LD_INT 12
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: ST_TO_ADDR
// hc_agressivity := 20 ;
55862: LD_ADDR_OWVAR 35
55866: PUSH
55867: LD_INT 20
55869: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
55870: LD_ADDR_OWVAR 28
55874: PUSH
55875: LD_INT 17
55877: ST_TO_ADDR
// hc_gallery :=  ;
55878: LD_ADDR_OWVAR 33
55882: PUSH
55883: LD_STRING 
55885: ST_TO_ADDR
// hc_name :=  ;
55886: LD_ADDR_OWVAR 26
55890: PUSH
55891: LD_STRING 
55893: ST_TO_ADDR
// un := CreateHuman ;
55894: LD_ADDR_VAR 0 2
55898: PUSH
55899: CALL_OW 44
55903: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
55904: LD_VAR 0 2
55908: PPUSH
55909: LD_INT 1
55911: PPUSH
55912: CALL_OW 51
// tmp := tmp ^ un ;
55916: LD_ADDR_VAR 0 3
55920: PUSH
55921: LD_VAR 0 3
55925: PUSH
55926: LD_VAR 0 2
55930: ADD
55931: ST_TO_ADDR
// end ;
55932: GO 55828
55934: POP
55935: POP
// repeat wait ( 0 0$1 ) ;
55936: LD_INT 35
55938: PPUSH
55939: CALL_OW 67
// for un in tmp do
55943: LD_ADDR_VAR 0 2
55947: PUSH
55948: LD_VAR 0 3
55952: PUSH
55953: FOR_IN
55954: IFFALSE 56028
// begin if IsDead ( un ) then
55956: LD_VAR 0 2
55960: PPUSH
55961: CALL_OW 301
55965: IFFALSE 55985
// begin tmp := tmp diff un ;
55967: LD_ADDR_VAR 0 3
55971: PUSH
55972: LD_VAR 0 3
55976: PUSH
55977: LD_VAR 0 2
55981: DIFF
55982: ST_TO_ADDR
// continue ;
55983: GO 55953
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
55985: LD_VAR 0 2
55989: PPUSH
55990: LD_INT 3
55992: PUSH
55993: LD_INT 22
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PPUSH
56007: CALL_OW 69
56011: PPUSH
56012: LD_VAR 0 2
56016: PPUSH
56017: CALL_OW 74
56021: PPUSH
56022: CALL_OW 115
// end ;
56026: GO 55953
56028: POP
56029: POP
// until not tmp ;
56030: LD_VAR 0 3
56034: NOT
56035: IFFALSE 55936
// end ;
56037: PPOPN 3
56039: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56040: LD_EXP 56
56044: PUSH
56045: LD_EXP 81
56049: AND
56050: IFFALSE 56104
56052: GO 56054
56054: DISABLE
// begin ToLua ( displayTroll(); ) ;
56055: LD_STRING displayTroll();
56057: PPUSH
56058: CALL_OW 559
// wait ( 3 3$00 ) ;
56062: LD_INT 6300
56064: PPUSH
56065: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56069: LD_STRING hideTroll();
56071: PPUSH
56072: CALL_OW 559
// wait ( 1 1$00 ) ;
56076: LD_INT 2100
56078: PPUSH
56079: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56083: LD_STRING displayTroll();
56085: PPUSH
56086: CALL_OW 559
// wait ( 1 1$00 ) ;
56090: LD_INT 2100
56092: PPUSH
56093: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56097: LD_STRING hideTroll();
56099: PPUSH
56100: CALL_OW 559
// end ;
56104: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56105: LD_EXP 56
56109: PUSH
56110: LD_EXP 82
56114: AND
56115: IFFALSE 56178
56117: GO 56119
56119: DISABLE
56120: LD_INT 0
56122: PPUSH
// begin p := 0 ;
56123: LD_ADDR_VAR 0 1
56127: PUSH
56128: LD_INT 0
56130: ST_TO_ADDR
// repeat game_speed := 1 ;
56131: LD_ADDR_OWVAR 65
56135: PUSH
56136: LD_INT 1
56138: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56139: LD_INT 35
56141: PPUSH
56142: CALL_OW 67
// p := p + 1 ;
56146: LD_ADDR_VAR 0 1
56150: PUSH
56151: LD_VAR 0 1
56155: PUSH
56156: LD_INT 1
56158: PLUS
56159: ST_TO_ADDR
// until p >= 60 ;
56160: LD_VAR 0 1
56164: PUSH
56165: LD_INT 60
56167: GREATEREQUAL
56168: IFFALSE 56131
// game_speed := 4 ;
56170: LD_ADDR_OWVAR 65
56174: PUSH
56175: LD_INT 4
56177: ST_TO_ADDR
// end ;
56178: PPOPN 1
56180: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56181: LD_EXP 56
56185: PUSH
56186: LD_EXP 83
56190: AND
56191: IFFALSE 56337
56193: GO 56195
56195: DISABLE
56196: LD_INT 0
56198: PPUSH
56199: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56200: LD_ADDR_VAR 0 1
56204: PUSH
56205: LD_INT 22
56207: PUSH
56208: LD_OWVAR 2
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: LD_INT 30
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 30
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: LIST
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PPUSH
56249: CALL_OW 69
56253: ST_TO_ADDR
// if not depot then
56254: LD_VAR 0 1
56258: NOT
56259: IFFALSE 56263
// exit ;
56261: GO 56337
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56263: LD_ADDR_VAR 0 2
56267: PUSH
56268: LD_VAR 0 1
56272: PUSH
56273: LD_INT 1
56275: PPUSH
56276: LD_VAR 0 1
56280: PPUSH
56281: CALL_OW 12
56285: ARRAY
56286: PPUSH
56287: CALL_OW 274
56291: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56292: LD_VAR 0 2
56296: PPUSH
56297: LD_INT 1
56299: PPUSH
56300: LD_INT 0
56302: PPUSH
56303: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56307: LD_VAR 0 2
56311: PPUSH
56312: LD_INT 2
56314: PPUSH
56315: LD_INT 0
56317: PPUSH
56318: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56322: LD_VAR 0 2
56326: PPUSH
56327: LD_INT 3
56329: PPUSH
56330: LD_INT 0
56332: PPUSH
56333: CALL_OW 277
// end ;
56337: PPOPN 2
56339: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56340: LD_EXP 56
56344: PUSH
56345: LD_EXP 84
56349: AND
56350: IFFALSE 56447
56352: GO 56354
56354: DISABLE
56355: LD_INT 0
56357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56358: LD_ADDR_VAR 0 1
56362: PUSH
56363: LD_INT 22
56365: PUSH
56366: LD_OWVAR 2
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 21
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: PUSH
56388: LD_INT 23
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: LIST
56406: PPUSH
56407: CALL_OW 69
56411: ST_TO_ADDR
// if not tmp then
56412: LD_VAR 0 1
56416: NOT
56417: IFFALSE 56421
// exit ;
56419: GO 56447
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56421: LD_VAR 0 1
56425: PUSH
56426: LD_INT 1
56428: PPUSH
56429: LD_VAR 0 1
56433: PPUSH
56434: CALL_OW 12
56438: ARRAY
56439: PPUSH
56440: LD_INT 200
56442: PPUSH
56443: CALL_OW 234
// end ;
56447: PPOPN 1
56449: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56450: LD_EXP 56
56454: PUSH
56455: LD_EXP 85
56459: AND
56460: IFFALSE 56539
56462: GO 56464
56464: DISABLE
56465: LD_INT 0
56467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56468: LD_ADDR_VAR 0 1
56472: PUSH
56473: LD_INT 22
56475: PUSH
56476: LD_OWVAR 2
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 21
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PPUSH
56499: CALL_OW 69
56503: ST_TO_ADDR
// if not tmp then
56504: LD_VAR 0 1
56508: NOT
56509: IFFALSE 56513
// exit ;
56511: GO 56539
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56513: LD_VAR 0 1
56517: PUSH
56518: LD_INT 1
56520: PPUSH
56521: LD_VAR 0 1
56525: PPUSH
56526: CALL_OW 12
56530: ARRAY
56531: PPUSH
56532: LD_INT 60
56534: PPUSH
56535: CALL_OW 234
// end ;
56539: PPOPN 1
56541: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56542: LD_EXP 56
56546: PUSH
56547: LD_EXP 86
56551: AND
56552: IFFALSE 56651
56554: GO 56556
56556: DISABLE
56557: LD_INT 0
56559: PPUSH
56560: PPUSH
// begin enable ;
56561: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56562: LD_ADDR_VAR 0 1
56566: PUSH
56567: LD_INT 22
56569: PUSH
56570: LD_OWVAR 2
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 61
56581: PUSH
56582: EMPTY
56583: LIST
56584: PUSH
56585: LD_INT 33
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: LIST
56599: PPUSH
56600: CALL_OW 69
56604: ST_TO_ADDR
// if not tmp then
56605: LD_VAR 0 1
56609: NOT
56610: IFFALSE 56614
// exit ;
56612: GO 56651
// for i in tmp do
56614: LD_ADDR_VAR 0 2
56618: PUSH
56619: LD_VAR 0 1
56623: PUSH
56624: FOR_IN
56625: IFFALSE 56649
// if IsControledBy ( i ) then
56627: LD_VAR 0 2
56631: PPUSH
56632: CALL_OW 312
56636: IFFALSE 56647
// ComUnlink ( i ) ;
56638: LD_VAR 0 2
56642: PPUSH
56643: CALL_OW 136
56647: GO 56624
56649: POP
56650: POP
// end ;
56651: PPOPN 2
56653: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56654: LD_EXP 56
56658: PUSH
56659: LD_EXP 87
56663: AND
56664: IFFALSE 56804
56666: GO 56668
56668: DISABLE
56669: LD_INT 0
56671: PPUSH
56672: PPUSH
// begin ToLua ( displayPowell(); ) ;
56673: LD_STRING displayPowell();
56675: PPUSH
56676: CALL_OW 559
// uc_side := 0 ;
56680: LD_ADDR_OWVAR 20
56684: PUSH
56685: LD_INT 0
56687: ST_TO_ADDR
// uc_nation := 2 ;
56688: LD_ADDR_OWVAR 21
56692: PUSH
56693: LD_INT 2
56695: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56696: LD_ADDR_OWVAR 37
56700: PUSH
56701: LD_INT 14
56703: ST_TO_ADDR
// vc_engine := engine_siberite ;
56704: LD_ADDR_OWVAR 39
56708: PUSH
56709: LD_INT 3
56711: ST_TO_ADDR
// vc_control := control_apeman ;
56712: LD_ADDR_OWVAR 38
56716: PUSH
56717: LD_INT 5
56719: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56720: LD_ADDR_OWVAR 40
56724: PUSH
56725: LD_INT 29
56727: ST_TO_ADDR
// un := CreateVehicle ;
56728: LD_ADDR_VAR 0 2
56732: PUSH
56733: CALL_OW 45
56737: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56738: LD_VAR 0 2
56742: PPUSH
56743: LD_INT 1
56745: PPUSH
56746: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56750: LD_INT 35
56752: PPUSH
56753: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56757: LD_VAR 0 2
56761: PPUSH
56762: LD_INT 22
56764: PUSH
56765: LD_OWVAR 2
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PPUSH
56774: CALL_OW 69
56778: PPUSH
56779: LD_VAR 0 2
56783: PPUSH
56784: CALL_OW 74
56788: PPUSH
56789: CALL_OW 115
// until IsDead ( un ) ;
56793: LD_VAR 0 2
56797: PPUSH
56798: CALL_OW 301
56802: IFFALSE 56750
// end ;
56804: PPOPN 2
56806: END
// every 0 0$1 trigger StreamModeActive and sStu do
56807: LD_EXP 56
56811: PUSH
56812: LD_EXP 95
56816: AND
56817: IFFALSE 56833
56819: GO 56821
56821: DISABLE
// begin ToLua ( displayStucuk(); ) ;
56822: LD_STRING displayStucuk();
56824: PPUSH
56825: CALL_OW 559
// ResetFog ;
56829: CALL_OW 335
// end ;
56833: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
56834: LD_EXP 56
56838: PUSH
56839: LD_EXP 88
56843: AND
56844: IFFALSE 56985
56846: GO 56848
56848: DISABLE
56849: LD_INT 0
56851: PPUSH
56852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56853: LD_ADDR_VAR 0 2
56857: PUSH
56858: LD_INT 22
56860: PUSH
56861: LD_OWVAR 2
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 21
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PPUSH
56884: CALL_OW 69
56888: ST_TO_ADDR
// if not tmp then
56889: LD_VAR 0 2
56893: NOT
56894: IFFALSE 56898
// exit ;
56896: GO 56985
// un := tmp [ rand ( 1 , tmp ) ] ;
56898: LD_ADDR_VAR 0 1
56902: PUSH
56903: LD_VAR 0 2
56907: PUSH
56908: LD_INT 1
56910: PPUSH
56911: LD_VAR 0 2
56915: PPUSH
56916: CALL_OW 12
56920: ARRAY
56921: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56922: LD_VAR 0 1
56926: PPUSH
56927: LD_INT 0
56929: PPUSH
56930: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
56934: LD_VAR 0 1
56938: PPUSH
56939: LD_OWVAR 3
56943: PUSH
56944: LD_VAR 0 1
56948: DIFF
56949: PPUSH
56950: LD_VAR 0 1
56954: PPUSH
56955: CALL_OW 74
56959: PPUSH
56960: CALL_OW 115
// wait ( 0 0$20 ) ;
56964: LD_INT 700
56966: PPUSH
56967: CALL_OW 67
// SetSide ( un , your_side ) ;
56971: LD_VAR 0 1
56975: PPUSH
56976: LD_OWVAR 2
56980: PPUSH
56981: CALL_OW 235
// end ;
56985: PPOPN 2
56987: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
56988: LD_EXP 56
56992: PUSH
56993: LD_EXP 89
56997: AND
56998: IFFALSE 57104
57000: GO 57002
57002: DISABLE
57003: LD_INT 0
57005: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57006: LD_ADDR_VAR 0 1
57010: PUSH
57011: LD_INT 22
57013: PUSH
57014: LD_OWVAR 2
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: LD_INT 30
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 30
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PPUSH
57055: CALL_OW 69
57059: ST_TO_ADDR
// if not depot then
57060: LD_VAR 0 1
57064: NOT
57065: IFFALSE 57069
// exit ;
57067: GO 57104
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57069: LD_VAR 0 1
57073: PUSH
57074: LD_INT 1
57076: ARRAY
57077: PPUSH
57078: CALL_OW 250
57082: PPUSH
57083: LD_VAR 0 1
57087: PUSH
57088: LD_INT 1
57090: ARRAY
57091: PPUSH
57092: CALL_OW 251
57096: PPUSH
57097: LD_INT 70
57099: PPUSH
57100: CALL_OW 495
// end ;
57104: PPOPN 1
57106: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57107: LD_EXP 56
57111: PUSH
57112: LD_EXP 90
57116: AND
57117: IFFALSE 57328
57119: GO 57121
57121: DISABLE
57122: LD_INT 0
57124: PPUSH
57125: PPUSH
57126: PPUSH
57127: PPUSH
57128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57129: LD_ADDR_VAR 0 5
57133: PUSH
57134: LD_INT 22
57136: PUSH
57137: LD_OWVAR 2
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 21
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PPUSH
57160: CALL_OW 69
57164: ST_TO_ADDR
// if not tmp then
57165: LD_VAR 0 5
57169: NOT
57170: IFFALSE 57174
// exit ;
57172: GO 57328
// for i in tmp do
57174: LD_ADDR_VAR 0 1
57178: PUSH
57179: LD_VAR 0 5
57183: PUSH
57184: FOR_IN
57185: IFFALSE 57326
// begin d := rand ( 0 , 5 ) ;
57187: LD_ADDR_VAR 0 4
57191: PUSH
57192: LD_INT 0
57194: PPUSH
57195: LD_INT 5
57197: PPUSH
57198: CALL_OW 12
57202: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57203: LD_ADDR_VAR 0 2
57207: PUSH
57208: LD_VAR 0 1
57212: PPUSH
57213: CALL_OW 250
57217: PPUSH
57218: LD_VAR 0 4
57222: PPUSH
57223: LD_INT 3
57225: PPUSH
57226: LD_INT 12
57228: PPUSH
57229: CALL_OW 12
57233: PPUSH
57234: CALL_OW 272
57238: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57239: LD_ADDR_VAR 0 3
57243: PUSH
57244: LD_VAR 0 1
57248: PPUSH
57249: CALL_OW 251
57253: PPUSH
57254: LD_VAR 0 4
57258: PPUSH
57259: LD_INT 3
57261: PPUSH
57262: LD_INT 12
57264: PPUSH
57265: CALL_OW 12
57269: PPUSH
57270: CALL_OW 273
57274: ST_TO_ADDR
// if ValidHex ( x , y ) then
57275: LD_VAR 0 2
57279: PPUSH
57280: LD_VAR 0 3
57284: PPUSH
57285: CALL_OW 488
57289: IFFALSE 57324
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57291: LD_VAR 0 1
57295: PPUSH
57296: LD_VAR 0 2
57300: PPUSH
57301: LD_VAR 0 3
57305: PPUSH
57306: LD_INT 3
57308: PPUSH
57309: LD_INT 6
57311: PPUSH
57312: CALL_OW 12
57316: PPUSH
57317: LD_INT 1
57319: PPUSH
57320: CALL_OW 483
// end ;
57324: GO 57184
57326: POP
57327: POP
// end ;
57328: PPOPN 5
57330: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57331: LD_EXP 56
57335: PUSH
57336: LD_EXP 91
57340: AND
57341: IFFALSE 57435
57343: GO 57345
57345: DISABLE
57346: LD_INT 0
57348: PPUSH
57349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57350: LD_ADDR_VAR 0 2
57354: PUSH
57355: LD_INT 22
57357: PUSH
57358: LD_OWVAR 2
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 32
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 21
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: PPUSH
57392: CALL_OW 69
57396: ST_TO_ADDR
// if not tmp then
57397: LD_VAR 0 2
57401: NOT
57402: IFFALSE 57406
// exit ;
57404: GO 57435
// for i in tmp do
57406: LD_ADDR_VAR 0 1
57410: PUSH
57411: LD_VAR 0 2
57415: PUSH
57416: FOR_IN
57417: IFFALSE 57433
// SetFuel ( i , 0 ) ;
57419: LD_VAR 0 1
57423: PPUSH
57424: LD_INT 0
57426: PPUSH
57427: CALL_OW 240
57431: GO 57416
57433: POP
57434: POP
// end ;
57435: PPOPN 2
57437: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57438: LD_EXP 56
57442: PUSH
57443: LD_EXP 92
57447: AND
57448: IFFALSE 57514
57450: GO 57452
57452: DISABLE
57453: LD_INT 0
57455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57456: LD_ADDR_VAR 0 1
57460: PUSH
57461: LD_INT 22
57463: PUSH
57464: LD_OWVAR 2
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 30
57475: PUSH
57476: LD_INT 29
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PPUSH
57487: CALL_OW 69
57491: ST_TO_ADDR
// if not tmp then
57492: LD_VAR 0 1
57496: NOT
57497: IFFALSE 57501
// exit ;
57499: GO 57514
// DestroyUnit ( tmp [ 1 ] ) ;
57501: LD_VAR 0 1
57505: PUSH
57506: LD_INT 1
57508: ARRAY
57509: PPUSH
57510: CALL_OW 65
// end ;
57514: PPOPN 1
57516: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57517: LD_EXP 56
57521: PUSH
57522: LD_EXP 94
57526: AND
57527: IFFALSE 57656
57529: GO 57531
57531: DISABLE
57532: LD_INT 0
57534: PPUSH
// begin uc_side := 0 ;
57535: LD_ADDR_OWVAR 20
57539: PUSH
57540: LD_INT 0
57542: ST_TO_ADDR
// uc_nation := nation_arabian ;
57543: LD_ADDR_OWVAR 21
57547: PUSH
57548: LD_INT 2
57550: ST_TO_ADDR
// hc_gallery :=  ;
57551: LD_ADDR_OWVAR 33
57555: PUSH
57556: LD_STRING 
57558: ST_TO_ADDR
// hc_name :=  ;
57559: LD_ADDR_OWVAR 26
57563: PUSH
57564: LD_STRING 
57566: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57567: LD_INT 1
57569: PPUSH
57570: LD_INT 11
57572: PPUSH
57573: LD_INT 10
57575: PPUSH
57576: CALL_OW 380
// un := CreateHuman ;
57580: LD_ADDR_VAR 0 1
57584: PUSH
57585: CALL_OW 44
57589: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57590: LD_VAR 0 1
57594: PPUSH
57595: LD_INT 1
57597: PPUSH
57598: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57602: LD_INT 35
57604: PPUSH
57605: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57609: LD_VAR 0 1
57613: PPUSH
57614: LD_INT 22
57616: PUSH
57617: LD_OWVAR 2
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PPUSH
57626: CALL_OW 69
57630: PPUSH
57631: LD_VAR 0 1
57635: PPUSH
57636: CALL_OW 74
57640: PPUSH
57641: CALL_OW 115
// until IsDead ( un ) ;
57645: LD_VAR 0 1
57649: PPUSH
57650: CALL_OW 301
57654: IFFALSE 57602
// end ;
57656: PPOPN 1
57658: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57659: LD_EXP 56
57663: PUSH
57664: LD_EXP 96
57668: AND
57669: IFFALSE 57681
57671: GO 57673
57673: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57674: LD_STRING earthquake(getX(game), 0, 32)
57676: PPUSH
57677: CALL_OW 559
57681: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57682: LD_EXP 56
57686: PUSH
57687: LD_EXP 97
57691: AND
57692: IFFALSE 57783
57694: GO 57696
57696: DISABLE
57697: LD_INT 0
57699: PPUSH
// begin enable ;
57700: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57701: LD_ADDR_VAR 0 1
57705: PUSH
57706: LD_INT 22
57708: PUSH
57709: LD_OWVAR 2
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 21
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 33
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: LIST
57742: PPUSH
57743: CALL_OW 69
57747: ST_TO_ADDR
// if not tmp then
57748: LD_VAR 0 1
57752: NOT
57753: IFFALSE 57757
// exit ;
57755: GO 57783
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57757: LD_VAR 0 1
57761: PUSH
57762: LD_INT 1
57764: PPUSH
57765: LD_VAR 0 1
57769: PPUSH
57770: CALL_OW 12
57774: ARRAY
57775: PPUSH
57776: LD_INT 1
57778: PPUSH
57779: CALL_OW 234
// end ;
57783: PPOPN 1
57785: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
57786: LD_EXP 56
57790: PUSH
57791: LD_EXP 98
57795: AND
57796: IFFALSE 57937
57798: GO 57800
57800: DISABLE
57801: LD_INT 0
57803: PPUSH
57804: PPUSH
57805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57806: LD_ADDR_VAR 0 3
57810: PUSH
57811: LD_INT 22
57813: PUSH
57814: LD_OWVAR 2
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 25
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PPUSH
57837: CALL_OW 69
57841: ST_TO_ADDR
// if not tmp then
57842: LD_VAR 0 3
57846: NOT
57847: IFFALSE 57851
// exit ;
57849: GO 57937
// un := tmp [ rand ( 1 , tmp ) ] ;
57851: LD_ADDR_VAR 0 2
57855: PUSH
57856: LD_VAR 0 3
57860: PUSH
57861: LD_INT 1
57863: PPUSH
57864: LD_VAR 0 3
57868: PPUSH
57869: CALL_OW 12
57873: ARRAY
57874: ST_TO_ADDR
// if Crawls ( un ) then
57875: LD_VAR 0 2
57879: PPUSH
57880: CALL_OW 318
57884: IFFALSE 57895
// ComWalk ( un ) ;
57886: LD_VAR 0 2
57890: PPUSH
57891: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
57895: LD_VAR 0 2
57899: PPUSH
57900: LD_INT 9
57902: PPUSH
57903: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
57907: LD_INT 28
57909: PPUSH
57910: LD_OWVAR 2
57914: PPUSH
57915: LD_INT 2
57917: PPUSH
57918: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57922: LD_INT 29
57924: PPUSH
57925: LD_OWVAR 2
57929: PPUSH
57930: LD_INT 2
57932: PPUSH
57933: CALL_OW 322
// end ;
57937: PPOPN 3
57939: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
57940: LD_EXP 56
57944: PUSH
57945: LD_EXP 99
57949: AND
57950: IFFALSE 58061
57952: GO 57954
57954: DISABLE
57955: LD_INT 0
57957: PPUSH
57958: PPUSH
57959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57960: LD_ADDR_VAR 0 3
57964: PUSH
57965: LD_INT 22
57967: PUSH
57968: LD_OWVAR 2
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 25
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PPUSH
57991: CALL_OW 69
57995: ST_TO_ADDR
// if not tmp then
57996: LD_VAR 0 3
58000: NOT
58001: IFFALSE 58005
// exit ;
58003: GO 58061
// un := tmp [ rand ( 1 , tmp ) ] ;
58005: LD_ADDR_VAR 0 2
58009: PUSH
58010: LD_VAR 0 3
58014: PUSH
58015: LD_INT 1
58017: PPUSH
58018: LD_VAR 0 3
58022: PPUSH
58023: CALL_OW 12
58027: ARRAY
58028: ST_TO_ADDR
// if Crawls ( un ) then
58029: LD_VAR 0 2
58033: PPUSH
58034: CALL_OW 318
58038: IFFALSE 58049
// ComWalk ( un ) ;
58040: LD_VAR 0 2
58044: PPUSH
58045: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58049: LD_VAR 0 2
58053: PPUSH
58054: LD_INT 8
58056: PPUSH
58057: CALL_OW 336
// end ;
58061: PPOPN 3
58063: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58064: LD_EXP 56
58068: PUSH
58069: LD_EXP 100
58073: AND
58074: IFFALSE 58218
58076: GO 58078
58078: DISABLE
58079: LD_INT 0
58081: PPUSH
58082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58083: LD_ADDR_VAR 0 2
58087: PUSH
58088: LD_INT 22
58090: PUSH
58091: LD_OWVAR 2
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 21
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 2
58112: PUSH
58113: LD_INT 34
58115: PUSH
58116: LD_INT 12
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 34
58125: PUSH
58126: LD_INT 51
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 34
58135: PUSH
58136: LD_INT 32
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: LIST
58153: PPUSH
58154: CALL_OW 69
58158: ST_TO_ADDR
// if not tmp then
58159: LD_VAR 0 2
58163: NOT
58164: IFFALSE 58168
// exit ;
58166: GO 58218
// for i in tmp do
58168: LD_ADDR_VAR 0 1
58172: PUSH
58173: LD_VAR 0 2
58177: PUSH
58178: FOR_IN
58179: IFFALSE 58216
// if GetCargo ( i , mat_artifact ) = 0 then
58181: LD_VAR 0 1
58185: PPUSH
58186: LD_INT 4
58188: PPUSH
58189: CALL_OW 289
58193: PUSH
58194: LD_INT 0
58196: EQUAL
58197: IFFALSE 58214
// SetCargo ( i , mat_siberit , 100 ) ;
58199: LD_VAR 0 1
58203: PPUSH
58204: LD_INT 3
58206: PPUSH
58207: LD_INT 100
58209: PPUSH
58210: CALL_OW 290
58214: GO 58178
58216: POP
58217: POP
// end ;
58218: PPOPN 2
58220: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58221: LD_EXP 56
58225: PUSH
58226: LD_EXP 101
58230: AND
58231: IFFALSE 58414
58233: GO 58235
58235: DISABLE
58236: LD_INT 0
58238: PPUSH
58239: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58240: LD_ADDR_VAR 0 2
58244: PUSH
58245: LD_INT 22
58247: PUSH
58248: LD_OWVAR 2
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PPUSH
58257: CALL_OW 69
58261: ST_TO_ADDR
// if not tmp then
58262: LD_VAR 0 2
58266: NOT
58267: IFFALSE 58271
// exit ;
58269: GO 58414
// for i := 1 to 2 do
58271: LD_ADDR_VAR 0 1
58275: PUSH
58276: DOUBLE
58277: LD_INT 1
58279: DEC
58280: ST_TO_ADDR
58281: LD_INT 2
58283: PUSH
58284: FOR_TO
58285: IFFALSE 58412
// begin uc_side := your_side ;
58287: LD_ADDR_OWVAR 20
58291: PUSH
58292: LD_OWVAR 2
58296: ST_TO_ADDR
// uc_nation := nation_american ;
58297: LD_ADDR_OWVAR 21
58301: PUSH
58302: LD_INT 1
58304: ST_TO_ADDR
// vc_chassis := us_morphling ;
58305: LD_ADDR_OWVAR 37
58309: PUSH
58310: LD_INT 5
58312: ST_TO_ADDR
// vc_engine := engine_siberite ;
58313: LD_ADDR_OWVAR 39
58317: PUSH
58318: LD_INT 3
58320: ST_TO_ADDR
// vc_control := control_computer ;
58321: LD_ADDR_OWVAR 38
58325: PUSH
58326: LD_INT 3
58328: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58329: LD_ADDR_OWVAR 40
58333: PUSH
58334: LD_INT 10
58336: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58337: LD_VAR 0 2
58341: PUSH
58342: LD_INT 1
58344: ARRAY
58345: PPUSH
58346: CALL_OW 310
58350: NOT
58351: IFFALSE 58398
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58353: CALL_OW 45
58357: PPUSH
58358: LD_VAR 0 2
58362: PUSH
58363: LD_INT 1
58365: ARRAY
58366: PPUSH
58367: CALL_OW 250
58371: PPUSH
58372: LD_VAR 0 2
58376: PUSH
58377: LD_INT 1
58379: ARRAY
58380: PPUSH
58381: CALL_OW 251
58385: PPUSH
58386: LD_INT 12
58388: PPUSH
58389: LD_INT 1
58391: PPUSH
58392: CALL_OW 50
58396: GO 58410
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58398: CALL_OW 45
58402: PPUSH
58403: LD_INT 1
58405: PPUSH
58406: CALL_OW 51
// end ;
58410: GO 58284
58412: POP
58413: POP
// end ;
58414: PPOPN 2
58416: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58417: LD_EXP 56
58421: PUSH
58422: LD_EXP 102
58426: AND
58427: IFFALSE 58649
58429: GO 58431
58431: DISABLE
58432: LD_INT 0
58434: PPUSH
58435: PPUSH
58436: PPUSH
58437: PPUSH
58438: PPUSH
58439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58440: LD_ADDR_VAR 0 6
58444: PUSH
58445: LD_INT 22
58447: PUSH
58448: LD_OWVAR 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 21
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: PUSH
58470: LD_INT 23
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: LIST
58488: PPUSH
58489: CALL_OW 69
58493: ST_TO_ADDR
// if not tmp then
58494: LD_VAR 0 6
58498: NOT
58499: IFFALSE 58503
// exit ;
58501: GO 58649
// s1 := rand ( 1 , 4 ) ;
58503: LD_ADDR_VAR 0 2
58507: PUSH
58508: LD_INT 1
58510: PPUSH
58511: LD_INT 4
58513: PPUSH
58514: CALL_OW 12
58518: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58519: LD_ADDR_VAR 0 4
58523: PUSH
58524: LD_VAR 0 6
58528: PUSH
58529: LD_INT 1
58531: ARRAY
58532: PPUSH
58533: LD_VAR 0 2
58537: PPUSH
58538: CALL_OW 259
58542: ST_TO_ADDR
// if s1 = 1 then
58543: LD_VAR 0 2
58547: PUSH
58548: LD_INT 1
58550: EQUAL
58551: IFFALSE 58571
// s2 := rand ( 2 , 4 ) else
58553: LD_ADDR_VAR 0 3
58557: PUSH
58558: LD_INT 2
58560: PPUSH
58561: LD_INT 4
58563: PPUSH
58564: CALL_OW 12
58568: ST_TO_ADDR
58569: GO 58579
// s2 := 1 ;
58571: LD_ADDR_VAR 0 3
58575: PUSH
58576: LD_INT 1
58578: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58579: LD_ADDR_VAR 0 5
58583: PUSH
58584: LD_VAR 0 6
58588: PUSH
58589: LD_INT 1
58591: ARRAY
58592: PPUSH
58593: LD_VAR 0 3
58597: PPUSH
58598: CALL_OW 259
58602: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58603: LD_VAR 0 6
58607: PUSH
58608: LD_INT 1
58610: ARRAY
58611: PPUSH
58612: LD_VAR 0 2
58616: PPUSH
58617: LD_VAR 0 5
58621: PPUSH
58622: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58626: LD_VAR 0 6
58630: PUSH
58631: LD_INT 1
58633: ARRAY
58634: PPUSH
58635: LD_VAR 0 3
58639: PPUSH
58640: LD_VAR 0 4
58644: PPUSH
58645: CALL_OW 237
// end ;
58649: PPOPN 6
58651: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58652: LD_EXP 56
58656: PUSH
58657: LD_EXP 103
58661: AND
58662: IFFALSE 58741
58664: GO 58666
58666: DISABLE
58667: LD_INT 0
58669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58670: LD_ADDR_VAR 0 1
58674: PUSH
58675: LD_INT 22
58677: PUSH
58678: LD_OWVAR 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 30
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PPUSH
58701: CALL_OW 69
58705: ST_TO_ADDR
// if not tmp then
58706: LD_VAR 0 1
58710: NOT
58711: IFFALSE 58715
// exit ;
58713: GO 58741
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58715: LD_VAR 0 1
58719: PUSH
58720: LD_INT 1
58722: PPUSH
58723: LD_VAR 0 1
58727: PPUSH
58728: CALL_OW 12
58732: ARRAY
58733: PPUSH
58734: LD_INT 1
58736: PPUSH
58737: CALL_OW 234
// end ;
58741: PPOPN 1
58743: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
58744: LD_EXP 56
58748: PUSH
58749: LD_EXP 104
58753: AND
58754: IFFALSE 58866
58756: GO 58758
58758: DISABLE
58759: LD_INT 0
58761: PPUSH
58762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
58763: LD_ADDR_VAR 0 2
58767: PUSH
58768: LD_INT 22
58770: PUSH
58771: LD_OWVAR 2
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: LD_INT 30
58785: PUSH
58786: LD_INT 27
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 30
58795: PUSH
58796: LD_INT 26
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 30
58805: PUSH
58806: LD_INT 28
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PPUSH
58823: CALL_OW 69
58827: ST_TO_ADDR
// if not tmp then
58828: LD_VAR 0 2
58832: NOT
58833: IFFALSE 58837
// exit ;
58835: GO 58866
// for i in tmp do
58837: LD_ADDR_VAR 0 1
58841: PUSH
58842: LD_VAR 0 2
58846: PUSH
58847: FOR_IN
58848: IFFALSE 58864
// SetLives ( i , 1 ) ;
58850: LD_VAR 0 1
58854: PPUSH
58855: LD_INT 1
58857: PPUSH
58858: CALL_OW 234
58862: GO 58847
58864: POP
58865: POP
// end ;
58866: PPOPN 2
58868: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
58869: LD_EXP 56
58873: PUSH
58874: LD_EXP 105
58878: AND
58879: IFFALSE 59166
58881: GO 58883
58883: DISABLE
58884: LD_INT 0
58886: PPUSH
58887: PPUSH
58888: PPUSH
// begin i := rand ( 1 , 7 ) ;
58889: LD_ADDR_VAR 0 1
58893: PUSH
58894: LD_INT 1
58896: PPUSH
58897: LD_INT 7
58899: PPUSH
58900: CALL_OW 12
58904: ST_TO_ADDR
// case i of 1 :
58905: LD_VAR 0 1
58909: PUSH
58910: LD_INT 1
58912: DOUBLE
58913: EQUAL
58914: IFTRUE 58918
58916: GO 58928
58918: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
58919: LD_STRING earthquake(getX(game), 0, 32)
58921: PPUSH
58922: CALL_OW 559
58926: GO 59166
58928: LD_INT 2
58930: DOUBLE
58931: EQUAL
58932: IFTRUE 58936
58934: GO 58950
58936: POP
// begin ToLua ( displayStucuk(); ) ;
58937: LD_STRING displayStucuk();
58939: PPUSH
58940: CALL_OW 559
// ResetFog ;
58944: CALL_OW 335
// end ; 3 :
58948: GO 59166
58950: LD_INT 3
58952: DOUBLE
58953: EQUAL
58954: IFTRUE 58958
58956: GO 59062
58958: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58959: LD_ADDR_VAR 0 2
58963: PUSH
58964: LD_INT 22
58966: PUSH
58967: LD_OWVAR 2
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 25
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PPUSH
58990: CALL_OW 69
58994: ST_TO_ADDR
// if not tmp then
58995: LD_VAR 0 2
58999: NOT
59000: IFFALSE 59004
// exit ;
59002: GO 59166
// un := tmp [ rand ( 1 , tmp ) ] ;
59004: LD_ADDR_VAR 0 3
59008: PUSH
59009: LD_VAR 0 2
59013: PUSH
59014: LD_INT 1
59016: PPUSH
59017: LD_VAR 0 2
59021: PPUSH
59022: CALL_OW 12
59026: ARRAY
59027: ST_TO_ADDR
// if Crawls ( un ) then
59028: LD_VAR 0 3
59032: PPUSH
59033: CALL_OW 318
59037: IFFALSE 59048
// ComWalk ( un ) ;
59039: LD_VAR 0 3
59043: PPUSH
59044: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59048: LD_VAR 0 3
59052: PPUSH
59053: LD_INT 8
59055: PPUSH
59056: CALL_OW 336
// end ; 4 :
59060: GO 59166
59062: LD_INT 4
59064: DOUBLE
59065: EQUAL
59066: IFTRUE 59070
59068: GO 59144
59070: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59071: LD_ADDR_VAR 0 2
59075: PUSH
59076: LD_INT 22
59078: PUSH
59079: LD_OWVAR 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 30
59090: PUSH
59091: LD_INT 29
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PPUSH
59102: CALL_OW 69
59106: ST_TO_ADDR
// if not tmp then
59107: LD_VAR 0 2
59111: NOT
59112: IFFALSE 59116
// exit ;
59114: GO 59166
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59116: LD_VAR 0 2
59120: PUSH
59121: LD_INT 1
59123: ARRAY
59124: PPUSH
59125: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59129: LD_VAR 0 2
59133: PUSH
59134: LD_INT 1
59136: ARRAY
59137: PPUSH
59138: CALL_OW 65
// end ; 5 .. 7 :
59142: GO 59166
59144: LD_INT 5
59146: DOUBLE
59147: GREATEREQUAL
59148: IFFALSE 59156
59150: LD_INT 7
59152: DOUBLE
59153: LESSEQUAL
59154: IFTRUE 59158
59156: GO 59165
59158: POP
// StreamSibBomb ; end ;
59159: CALL 55403 0 0
59163: GO 59166
59165: POP
// end ;
59166: PPOPN 3
59168: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59169: LD_EXP 56
59173: PUSH
59174: LD_EXP 106
59178: AND
59179: IFFALSE 59335
59181: GO 59183
59183: DISABLE
59184: LD_INT 0
59186: PPUSH
59187: PPUSH
59188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59189: LD_ADDR_VAR 0 2
59193: PUSH
59194: LD_INT 81
59196: PUSH
59197: LD_OWVAR 2
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 2
59208: PUSH
59209: LD_INT 21
59211: PUSH
59212: LD_INT 1
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 21
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: LIST
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PPUSH
59238: CALL_OW 69
59242: ST_TO_ADDR
// if not tmp then
59243: LD_VAR 0 2
59247: NOT
59248: IFFALSE 59252
// exit ;
59250: GO 59335
// p := 0 ;
59252: LD_ADDR_VAR 0 3
59256: PUSH
59257: LD_INT 0
59259: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59260: LD_INT 35
59262: PPUSH
59263: CALL_OW 67
// p := p + 1 ;
59267: LD_ADDR_VAR 0 3
59271: PUSH
59272: LD_VAR 0 3
59276: PUSH
59277: LD_INT 1
59279: PLUS
59280: ST_TO_ADDR
// for i in tmp do
59281: LD_ADDR_VAR 0 1
59285: PUSH
59286: LD_VAR 0 2
59290: PUSH
59291: FOR_IN
59292: IFFALSE 59323
// if GetLives ( i ) < 1000 then
59294: LD_VAR 0 1
59298: PPUSH
59299: CALL_OW 256
59303: PUSH
59304: LD_INT 1000
59306: LESS
59307: IFFALSE 59321
// SetLives ( i , 1000 ) ;
59309: LD_VAR 0 1
59313: PPUSH
59314: LD_INT 1000
59316: PPUSH
59317: CALL_OW 234
59321: GO 59291
59323: POP
59324: POP
// until p > 20 ;
59325: LD_VAR 0 3
59329: PUSH
59330: LD_INT 20
59332: GREATER
59333: IFFALSE 59260
// end ;
59335: PPOPN 3
59337: END
// every 0 0$1 trigger StreamModeActive and sTime do
59338: LD_EXP 56
59342: PUSH
59343: LD_EXP 107
59347: AND
59348: IFFALSE 59383
59350: GO 59352
59352: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59353: LD_INT 28
59355: PPUSH
59356: LD_OWVAR 2
59360: PPUSH
59361: LD_INT 2
59363: PPUSH
59364: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59368: LD_INT 30
59370: PPUSH
59371: LD_OWVAR 2
59375: PPUSH
59376: LD_INT 2
59378: PPUSH
59379: CALL_OW 322
// end ;
59383: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59384: LD_EXP 56
59388: PUSH
59389: LD_EXP 108
59393: AND
59394: IFFALSE 59515
59396: GO 59398
59398: DISABLE
59399: LD_INT 0
59401: PPUSH
59402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59403: LD_ADDR_VAR 0 2
59407: PUSH
59408: LD_INT 22
59410: PUSH
59411: LD_OWVAR 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 21
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 3
59432: PUSH
59433: LD_INT 23
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: PPUSH
59452: CALL_OW 69
59456: ST_TO_ADDR
// if not tmp then
59457: LD_VAR 0 2
59461: NOT
59462: IFFALSE 59466
// exit ;
59464: GO 59515
// for i in tmp do
59466: LD_ADDR_VAR 0 1
59470: PUSH
59471: LD_VAR 0 2
59475: PUSH
59476: FOR_IN
59477: IFFALSE 59513
// begin if Crawls ( i ) then
59479: LD_VAR 0 1
59483: PPUSH
59484: CALL_OW 318
59488: IFFALSE 59499
// ComWalk ( i ) ;
59490: LD_VAR 0 1
59494: PPUSH
59495: CALL_OW 138
// SetClass ( i , 2 ) ;
59499: LD_VAR 0 1
59503: PPUSH
59504: LD_INT 2
59506: PPUSH
59507: CALL_OW 336
// end ;
59511: GO 59476
59513: POP
59514: POP
// end ;
59515: PPOPN 2
59517: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59518: LD_EXP 56
59522: PUSH
59523: LD_EXP 109
59527: AND
59528: IFFALSE 59816
59530: GO 59532
59532: DISABLE
59533: LD_INT 0
59535: PPUSH
59536: PPUSH
59537: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59538: LD_OWVAR 2
59542: PPUSH
59543: LD_INT 9
59545: PPUSH
59546: LD_INT 1
59548: PPUSH
59549: LD_INT 1
59551: PPUSH
59552: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59556: LD_INT 9
59558: PPUSH
59559: LD_OWVAR 2
59563: PPUSH
59564: CALL_OW 343
// uc_side := 9 ;
59568: LD_ADDR_OWVAR 20
59572: PUSH
59573: LD_INT 9
59575: ST_TO_ADDR
// uc_nation := 2 ;
59576: LD_ADDR_OWVAR 21
59580: PUSH
59581: LD_INT 2
59583: ST_TO_ADDR
// hc_name := Dark Warrior ;
59584: LD_ADDR_OWVAR 26
59588: PUSH
59589: LD_STRING Dark Warrior
59591: ST_TO_ADDR
// hc_gallery :=  ;
59592: LD_ADDR_OWVAR 33
59596: PUSH
59597: LD_STRING 
59599: ST_TO_ADDR
// hc_noskilllimit := true ;
59600: LD_ADDR_OWVAR 76
59604: PUSH
59605: LD_INT 1
59607: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59608: LD_ADDR_OWVAR 31
59612: PUSH
59613: LD_INT 30
59615: PUSH
59616: LD_INT 30
59618: PUSH
59619: LD_INT 30
59621: PUSH
59622: LD_INT 30
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: ST_TO_ADDR
// un := CreateHuman ;
59631: LD_ADDR_VAR 0 3
59635: PUSH
59636: CALL_OW 44
59640: ST_TO_ADDR
// hc_noskilllimit := false ;
59641: LD_ADDR_OWVAR 76
59645: PUSH
59646: LD_INT 0
59648: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59649: LD_VAR 0 3
59653: PPUSH
59654: LD_INT 1
59656: PPUSH
59657: CALL_OW 51
// ToLua ( playRanger() ) ;
59661: LD_STRING playRanger()
59663: PPUSH
59664: CALL_OW 559
// p := 0 ;
59668: LD_ADDR_VAR 0 2
59672: PUSH
59673: LD_INT 0
59675: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59676: LD_INT 35
59678: PPUSH
59679: CALL_OW 67
// p := p + 1 ;
59683: LD_ADDR_VAR 0 2
59687: PUSH
59688: LD_VAR 0 2
59692: PUSH
59693: LD_INT 1
59695: PLUS
59696: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59697: LD_VAR 0 3
59701: PPUSH
59702: CALL_OW 256
59706: PUSH
59707: LD_INT 1000
59709: LESS
59710: IFFALSE 59724
// SetLives ( un , 1000 ) ;
59712: LD_VAR 0 3
59716: PPUSH
59717: LD_INT 1000
59719: PPUSH
59720: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
59724: LD_VAR 0 3
59728: PPUSH
59729: LD_INT 81
59731: PUSH
59732: LD_OWVAR 2
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 91
59743: PUSH
59744: LD_VAR 0 3
59748: PUSH
59749: LD_INT 30
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PPUSH
59761: CALL_OW 69
59765: PPUSH
59766: LD_VAR 0 3
59770: PPUSH
59771: CALL_OW 74
59775: PPUSH
59776: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
59780: LD_VAR 0 2
59784: PUSH
59785: LD_INT 80
59787: GREATER
59788: PUSH
59789: LD_VAR 0 3
59793: PPUSH
59794: CALL_OW 301
59798: OR
59799: IFFALSE 59676
// if un then
59801: LD_VAR 0 3
59805: IFFALSE 59816
// RemoveUnit ( un ) ;
59807: LD_VAR 0 3
59811: PPUSH
59812: CALL_OW 64
// end ;
59816: PPOPN 3
59818: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
59819: LD_EXP 110
59823: IFFALSE 59939
59825: GO 59827
59827: DISABLE
59828: LD_INT 0
59830: PPUSH
59831: PPUSH
59832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59833: LD_ADDR_VAR 0 2
59837: PUSH
59838: LD_INT 81
59840: PUSH
59841: LD_OWVAR 2
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 21
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PPUSH
59864: CALL_OW 69
59868: ST_TO_ADDR
// ToLua ( playComputer() ) ;
59869: LD_STRING playComputer()
59871: PPUSH
59872: CALL_OW 559
// if not tmp then
59876: LD_VAR 0 2
59880: NOT
59881: IFFALSE 59885
// exit ;
59883: GO 59939
// for i in tmp do
59885: LD_ADDR_VAR 0 1
59889: PUSH
59890: LD_VAR 0 2
59894: PUSH
59895: FOR_IN
59896: IFFALSE 59937
// for j := 1 to 4 do
59898: LD_ADDR_VAR 0 3
59902: PUSH
59903: DOUBLE
59904: LD_INT 1
59906: DEC
59907: ST_TO_ADDR
59908: LD_INT 4
59910: PUSH
59911: FOR_TO
59912: IFFALSE 59933
// SetSkill ( i , j , 10 ) ;
59914: LD_VAR 0 1
59918: PPUSH
59919: LD_VAR 0 3
59923: PPUSH
59924: LD_INT 10
59926: PPUSH
59927: CALL_OW 237
59931: GO 59911
59933: POP
59934: POP
59935: GO 59895
59937: POP
59938: POP
// end ;
59939: PPOPN 3
59941: END
// every 0 0$1 trigger s30 do var i , tmp ;
59942: LD_EXP 111
59946: IFFALSE 60015
59948: GO 59950
59950: DISABLE
59951: LD_INT 0
59953: PPUSH
59954: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59955: LD_ADDR_VAR 0 2
59959: PUSH
59960: LD_INT 22
59962: PUSH
59963: LD_OWVAR 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PPUSH
59972: CALL_OW 69
59976: ST_TO_ADDR
// if not tmp then
59977: LD_VAR 0 2
59981: NOT
59982: IFFALSE 59986
// exit ;
59984: GO 60015
// for i in tmp do
59986: LD_ADDR_VAR 0 1
59990: PUSH
59991: LD_VAR 0 2
59995: PUSH
59996: FOR_IN
59997: IFFALSE 60013
// SetLives ( i , 300 ) ;
59999: LD_VAR 0 1
60003: PPUSH
60004: LD_INT 300
60006: PPUSH
60007: CALL_OW 234
60011: GO 59996
60013: POP
60014: POP
// end ;
60015: PPOPN 2
60017: END
// every 0 0$1 trigger s60 do var i , tmp ;
60018: LD_EXP 112
60022: IFFALSE 60091
60024: GO 60026
60026: DISABLE
60027: LD_INT 0
60029: PPUSH
60030: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60031: LD_ADDR_VAR 0 2
60035: PUSH
60036: LD_INT 22
60038: PUSH
60039: LD_OWVAR 2
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PPUSH
60048: CALL_OW 69
60052: ST_TO_ADDR
// if not tmp then
60053: LD_VAR 0 2
60057: NOT
60058: IFFALSE 60062
// exit ;
60060: GO 60091
// for i in tmp do
60062: LD_ADDR_VAR 0 1
60066: PUSH
60067: LD_VAR 0 2
60071: PUSH
60072: FOR_IN
60073: IFFALSE 60089
// SetLives ( i , 600 ) ;
60075: LD_VAR 0 1
60079: PPUSH
60080: LD_INT 600
60082: PPUSH
60083: CALL_OW 234
60087: GO 60072
60089: POP
60090: POP
// end ;
60091: PPOPN 2
60093: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60094: LD_INT 0
60096: PPUSH
// case cmd of 301 :
60097: LD_VAR 0 1
60101: PUSH
60102: LD_INT 301
60104: DOUBLE
60105: EQUAL
60106: IFTRUE 60110
60108: GO 60142
60110: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60111: LD_VAR 0 6
60115: PPUSH
60116: LD_VAR 0 7
60120: PPUSH
60121: LD_VAR 0 8
60125: PPUSH
60126: LD_VAR 0 4
60130: PPUSH
60131: LD_VAR 0 5
60135: PPUSH
60136: CALL 61343 0 5
60140: GO 60263
60142: LD_INT 302
60144: DOUBLE
60145: EQUAL
60146: IFTRUE 60150
60148: GO 60187
60150: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60151: LD_VAR 0 6
60155: PPUSH
60156: LD_VAR 0 7
60160: PPUSH
60161: LD_VAR 0 8
60165: PPUSH
60166: LD_VAR 0 9
60170: PPUSH
60171: LD_VAR 0 4
60175: PPUSH
60176: LD_VAR 0 5
60180: PPUSH
60181: CALL 61434 0 6
60185: GO 60263
60187: LD_INT 303
60189: DOUBLE
60190: EQUAL
60191: IFTRUE 60195
60193: GO 60232
60195: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60196: LD_VAR 0 6
60200: PPUSH
60201: LD_VAR 0 7
60205: PPUSH
60206: LD_VAR 0 8
60210: PPUSH
60211: LD_VAR 0 9
60215: PPUSH
60216: LD_VAR 0 4
60220: PPUSH
60221: LD_VAR 0 5
60225: PPUSH
60226: CALL 60268 0 6
60230: GO 60263
60232: LD_INT 304
60234: DOUBLE
60235: EQUAL
60236: IFTRUE 60240
60238: GO 60262
60240: POP
// hHackTeleport ( unit , x , y ) ; end ;
60241: LD_VAR 0 2
60245: PPUSH
60246: LD_VAR 0 4
60250: PPUSH
60251: LD_VAR 0 5
60255: PPUSH
60256: CALL 62027 0 3
60260: GO 60263
60262: POP
// end ;
60263: LD_VAR 0 12
60267: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60268: LD_INT 0
60270: PPUSH
60271: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60272: LD_VAR 0 1
60276: PUSH
60277: LD_INT 1
60279: LESS
60280: PUSH
60281: LD_VAR 0 1
60285: PUSH
60286: LD_INT 3
60288: GREATER
60289: OR
60290: PUSH
60291: LD_VAR 0 5
60295: PPUSH
60296: LD_VAR 0 6
60300: PPUSH
60301: CALL_OW 428
60305: OR
60306: IFFALSE 60310
// exit ;
60308: GO 61030
// uc_side := your_side ;
60310: LD_ADDR_OWVAR 20
60314: PUSH
60315: LD_OWVAR 2
60319: ST_TO_ADDR
// uc_nation := nation ;
60320: LD_ADDR_OWVAR 21
60324: PUSH
60325: LD_VAR 0 1
60329: ST_TO_ADDR
// bc_level = 1 ;
60330: LD_ADDR_OWVAR 43
60334: PUSH
60335: LD_INT 1
60337: ST_TO_ADDR
// case btype of 1 :
60338: LD_VAR 0 2
60342: PUSH
60343: LD_INT 1
60345: DOUBLE
60346: EQUAL
60347: IFTRUE 60351
60349: GO 60362
60351: POP
// bc_type := b_depot ; 2 :
60352: LD_ADDR_OWVAR 42
60356: PUSH
60357: LD_INT 0
60359: ST_TO_ADDR
60360: GO 60974
60362: LD_INT 2
60364: DOUBLE
60365: EQUAL
60366: IFTRUE 60370
60368: GO 60381
60370: POP
// bc_type := b_warehouse ; 3 :
60371: LD_ADDR_OWVAR 42
60375: PUSH
60376: LD_INT 1
60378: ST_TO_ADDR
60379: GO 60974
60381: LD_INT 3
60383: DOUBLE
60384: EQUAL
60385: IFTRUE 60389
60387: GO 60400
60389: POP
// bc_type := b_lab ; 4 .. 9 :
60390: LD_ADDR_OWVAR 42
60394: PUSH
60395: LD_INT 6
60397: ST_TO_ADDR
60398: GO 60974
60400: LD_INT 4
60402: DOUBLE
60403: GREATEREQUAL
60404: IFFALSE 60412
60406: LD_INT 9
60408: DOUBLE
60409: LESSEQUAL
60410: IFTRUE 60414
60412: GO 60466
60414: POP
// begin bc_type := b_lab_half ;
60415: LD_ADDR_OWVAR 42
60419: PUSH
60420: LD_INT 7
60422: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60423: LD_ADDR_OWVAR 44
60427: PUSH
60428: LD_INT 10
60430: PUSH
60431: LD_INT 11
60433: PUSH
60434: LD_INT 12
60436: PUSH
60437: LD_INT 15
60439: PUSH
60440: LD_INT 14
60442: PUSH
60443: LD_INT 13
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: PUSH
60454: LD_VAR 0 2
60458: PUSH
60459: LD_INT 3
60461: MINUS
60462: ARRAY
60463: ST_TO_ADDR
// end ; 10 .. 13 :
60464: GO 60974
60466: LD_INT 10
60468: DOUBLE
60469: GREATEREQUAL
60470: IFFALSE 60478
60472: LD_INT 13
60474: DOUBLE
60475: LESSEQUAL
60476: IFTRUE 60480
60478: GO 60557
60480: POP
// begin bc_type := b_lab_full ;
60481: LD_ADDR_OWVAR 42
60485: PUSH
60486: LD_INT 8
60488: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60489: LD_ADDR_OWVAR 44
60493: PUSH
60494: LD_INT 10
60496: PUSH
60497: LD_INT 12
60499: PUSH
60500: LD_INT 14
60502: PUSH
60503: LD_INT 13
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: PUSH
60512: LD_VAR 0 2
60516: PUSH
60517: LD_INT 9
60519: MINUS
60520: ARRAY
60521: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60522: LD_ADDR_OWVAR 45
60526: PUSH
60527: LD_INT 11
60529: PUSH
60530: LD_INT 15
60532: PUSH
60533: LD_INT 12
60535: PUSH
60536: LD_INT 15
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: PUSH
60545: LD_VAR 0 2
60549: PUSH
60550: LD_INT 9
60552: MINUS
60553: ARRAY
60554: ST_TO_ADDR
// end ; 14 :
60555: GO 60974
60557: LD_INT 14
60559: DOUBLE
60560: EQUAL
60561: IFTRUE 60565
60563: GO 60576
60565: POP
// bc_type := b_workshop ; 15 :
60566: LD_ADDR_OWVAR 42
60570: PUSH
60571: LD_INT 2
60573: ST_TO_ADDR
60574: GO 60974
60576: LD_INT 15
60578: DOUBLE
60579: EQUAL
60580: IFTRUE 60584
60582: GO 60595
60584: POP
// bc_type := b_factory ; 16 :
60585: LD_ADDR_OWVAR 42
60589: PUSH
60590: LD_INT 3
60592: ST_TO_ADDR
60593: GO 60974
60595: LD_INT 16
60597: DOUBLE
60598: EQUAL
60599: IFTRUE 60603
60601: GO 60614
60603: POP
// bc_type := b_ext_gun ; 17 :
60604: LD_ADDR_OWVAR 42
60608: PUSH
60609: LD_INT 17
60611: ST_TO_ADDR
60612: GO 60974
60614: LD_INT 17
60616: DOUBLE
60617: EQUAL
60618: IFTRUE 60622
60620: GO 60650
60622: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60623: LD_ADDR_OWVAR 42
60627: PUSH
60628: LD_INT 19
60630: PUSH
60631: LD_INT 23
60633: PUSH
60634: LD_INT 19
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: LIST
60641: PUSH
60642: LD_VAR 0 1
60646: ARRAY
60647: ST_TO_ADDR
60648: GO 60974
60650: LD_INT 18
60652: DOUBLE
60653: EQUAL
60654: IFTRUE 60658
60656: GO 60669
60658: POP
// bc_type := b_ext_radar ; 19 :
60659: LD_ADDR_OWVAR 42
60663: PUSH
60664: LD_INT 20
60666: ST_TO_ADDR
60667: GO 60974
60669: LD_INT 19
60671: DOUBLE
60672: EQUAL
60673: IFTRUE 60677
60675: GO 60688
60677: POP
// bc_type := b_ext_radio ; 20 :
60678: LD_ADDR_OWVAR 42
60682: PUSH
60683: LD_INT 22
60685: ST_TO_ADDR
60686: GO 60974
60688: LD_INT 20
60690: DOUBLE
60691: EQUAL
60692: IFTRUE 60696
60694: GO 60707
60696: POP
// bc_type := b_ext_siberium ; 21 :
60697: LD_ADDR_OWVAR 42
60701: PUSH
60702: LD_INT 21
60704: ST_TO_ADDR
60705: GO 60974
60707: LD_INT 21
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60715
60713: GO 60726
60715: POP
// bc_type := b_ext_computer ; 22 :
60716: LD_ADDR_OWVAR 42
60720: PUSH
60721: LD_INT 24
60723: ST_TO_ADDR
60724: GO 60974
60726: LD_INT 22
60728: DOUBLE
60729: EQUAL
60730: IFTRUE 60734
60732: GO 60745
60734: POP
// bc_type := b_ext_track ; 23 :
60735: LD_ADDR_OWVAR 42
60739: PUSH
60740: LD_INT 16
60742: ST_TO_ADDR
60743: GO 60974
60745: LD_INT 23
60747: DOUBLE
60748: EQUAL
60749: IFTRUE 60753
60751: GO 60764
60753: POP
// bc_type := b_ext_laser ; 24 :
60754: LD_ADDR_OWVAR 42
60758: PUSH
60759: LD_INT 25
60761: ST_TO_ADDR
60762: GO 60974
60764: LD_INT 24
60766: DOUBLE
60767: EQUAL
60768: IFTRUE 60772
60770: GO 60783
60772: POP
// bc_type := b_control_tower ; 25 :
60773: LD_ADDR_OWVAR 42
60777: PUSH
60778: LD_INT 36
60780: ST_TO_ADDR
60781: GO 60974
60783: LD_INT 25
60785: DOUBLE
60786: EQUAL
60787: IFTRUE 60791
60789: GO 60802
60791: POP
// bc_type := b_breastwork ; 26 :
60792: LD_ADDR_OWVAR 42
60796: PUSH
60797: LD_INT 31
60799: ST_TO_ADDR
60800: GO 60974
60802: LD_INT 26
60804: DOUBLE
60805: EQUAL
60806: IFTRUE 60810
60808: GO 60821
60810: POP
// bc_type := b_bunker ; 27 :
60811: LD_ADDR_OWVAR 42
60815: PUSH
60816: LD_INT 32
60818: ST_TO_ADDR
60819: GO 60974
60821: LD_INT 27
60823: DOUBLE
60824: EQUAL
60825: IFTRUE 60829
60827: GO 60840
60829: POP
// bc_type := b_turret ; 28 :
60830: LD_ADDR_OWVAR 42
60834: PUSH
60835: LD_INT 33
60837: ST_TO_ADDR
60838: GO 60974
60840: LD_INT 28
60842: DOUBLE
60843: EQUAL
60844: IFTRUE 60848
60846: GO 60859
60848: POP
// bc_type := b_armoury ; 29 :
60849: LD_ADDR_OWVAR 42
60853: PUSH
60854: LD_INT 4
60856: ST_TO_ADDR
60857: GO 60974
60859: LD_INT 29
60861: DOUBLE
60862: EQUAL
60863: IFTRUE 60867
60865: GO 60878
60867: POP
// bc_type := b_barracks ; 30 :
60868: LD_ADDR_OWVAR 42
60872: PUSH
60873: LD_INT 5
60875: ST_TO_ADDR
60876: GO 60974
60878: LD_INT 30
60880: DOUBLE
60881: EQUAL
60882: IFTRUE 60886
60884: GO 60897
60886: POP
// bc_type := b_solar_power ; 31 :
60887: LD_ADDR_OWVAR 42
60891: PUSH
60892: LD_INT 27
60894: ST_TO_ADDR
60895: GO 60974
60897: LD_INT 31
60899: DOUBLE
60900: EQUAL
60901: IFTRUE 60905
60903: GO 60916
60905: POP
// bc_type := b_oil_power ; 32 :
60906: LD_ADDR_OWVAR 42
60910: PUSH
60911: LD_INT 26
60913: ST_TO_ADDR
60914: GO 60974
60916: LD_INT 32
60918: DOUBLE
60919: EQUAL
60920: IFTRUE 60924
60922: GO 60935
60924: POP
// bc_type := b_siberite_power ; 33 :
60925: LD_ADDR_OWVAR 42
60929: PUSH
60930: LD_INT 28
60932: ST_TO_ADDR
60933: GO 60974
60935: LD_INT 33
60937: DOUBLE
60938: EQUAL
60939: IFTRUE 60943
60941: GO 60954
60943: POP
// bc_type := b_oil_mine ; 34 :
60944: LD_ADDR_OWVAR 42
60948: PUSH
60949: LD_INT 29
60951: ST_TO_ADDR
60952: GO 60974
60954: LD_INT 34
60956: DOUBLE
60957: EQUAL
60958: IFTRUE 60962
60960: GO 60973
60962: POP
// bc_type := b_siberite_mine ; end ;
60963: LD_ADDR_OWVAR 42
60967: PUSH
60968: LD_INT 30
60970: ST_TO_ADDR
60971: GO 60974
60973: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
60974: LD_ADDR_VAR 0 8
60978: PUSH
60979: LD_VAR 0 5
60983: PPUSH
60984: LD_VAR 0 6
60988: PPUSH
60989: LD_VAR 0 3
60993: PPUSH
60994: CALL_OW 47
60998: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
60999: LD_OWVAR 42
61003: PUSH
61004: LD_INT 32
61006: PUSH
61007: LD_INT 33
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: IN
61014: IFFALSE 61030
// PlaceWeaponTurret ( b , weapon ) ;
61016: LD_VAR 0 8
61020: PPUSH
61021: LD_VAR 0 4
61025: PPUSH
61026: CALL_OW 431
// end ;
61030: LD_VAR 0 7
61034: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61035: LD_INT 0
61037: PPUSH
61038: PPUSH
61039: PPUSH
61040: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61041: LD_ADDR_VAR 0 4
61045: PUSH
61046: LD_INT 22
61048: PUSH
61049: LD_OWVAR 2
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: PUSH
61061: LD_INT 30
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 30
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PPUSH
61090: CALL_OW 69
61094: ST_TO_ADDR
// if not tmp then
61095: LD_VAR 0 4
61099: NOT
61100: IFFALSE 61104
// exit ;
61102: GO 61163
// for i in tmp do
61104: LD_ADDR_VAR 0 2
61108: PUSH
61109: LD_VAR 0 4
61113: PUSH
61114: FOR_IN
61115: IFFALSE 61161
// for j = 1 to 3 do
61117: LD_ADDR_VAR 0 3
61121: PUSH
61122: DOUBLE
61123: LD_INT 1
61125: DEC
61126: ST_TO_ADDR
61127: LD_INT 3
61129: PUSH
61130: FOR_TO
61131: IFFALSE 61157
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61133: LD_VAR 0 2
61137: PPUSH
61138: CALL_OW 274
61142: PPUSH
61143: LD_VAR 0 3
61147: PPUSH
61148: LD_INT 99999
61150: PPUSH
61151: CALL_OW 277
61155: GO 61130
61157: POP
61158: POP
61159: GO 61114
61161: POP
61162: POP
// end ;
61163: LD_VAR 0 1
61167: RET
// export function hHackSetLevel10 ; var i , j ; begin
61168: LD_INT 0
61170: PPUSH
61171: PPUSH
61172: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61173: LD_ADDR_VAR 0 2
61177: PUSH
61178: LD_INT 21
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PPUSH
61188: CALL_OW 69
61192: PUSH
61193: FOR_IN
61194: IFFALSE 61246
// if IsSelected ( i ) then
61196: LD_VAR 0 2
61200: PPUSH
61201: CALL_OW 306
61205: IFFALSE 61244
// begin for j := 1 to 4 do
61207: LD_ADDR_VAR 0 3
61211: PUSH
61212: DOUBLE
61213: LD_INT 1
61215: DEC
61216: ST_TO_ADDR
61217: LD_INT 4
61219: PUSH
61220: FOR_TO
61221: IFFALSE 61242
// SetSkill ( i , j , 10 ) ;
61223: LD_VAR 0 2
61227: PPUSH
61228: LD_VAR 0 3
61232: PPUSH
61233: LD_INT 10
61235: PPUSH
61236: CALL_OW 237
61240: GO 61220
61242: POP
61243: POP
// end ;
61244: GO 61193
61246: POP
61247: POP
// end ;
61248: LD_VAR 0 1
61252: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61253: LD_INT 0
61255: PPUSH
61256: PPUSH
61257: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61258: LD_ADDR_VAR 0 2
61262: PUSH
61263: LD_INT 22
61265: PUSH
61266: LD_OWVAR 2
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 21
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PPUSH
61289: CALL_OW 69
61293: PUSH
61294: FOR_IN
61295: IFFALSE 61336
// begin for j := 1 to 4 do
61297: LD_ADDR_VAR 0 3
61301: PUSH
61302: DOUBLE
61303: LD_INT 1
61305: DEC
61306: ST_TO_ADDR
61307: LD_INT 4
61309: PUSH
61310: FOR_TO
61311: IFFALSE 61332
// SetSkill ( i , j , 10 ) ;
61313: LD_VAR 0 2
61317: PPUSH
61318: LD_VAR 0 3
61322: PPUSH
61323: LD_INT 10
61325: PPUSH
61326: CALL_OW 237
61330: GO 61310
61332: POP
61333: POP
// end ;
61334: GO 61294
61336: POP
61337: POP
// end ;
61338: LD_VAR 0 1
61342: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61343: LD_INT 0
61345: PPUSH
// uc_side := your_side ;
61346: LD_ADDR_OWVAR 20
61350: PUSH
61351: LD_OWVAR 2
61355: ST_TO_ADDR
// uc_nation := nation ;
61356: LD_ADDR_OWVAR 21
61360: PUSH
61361: LD_VAR 0 1
61365: ST_TO_ADDR
// InitHc ;
61366: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61370: LD_INT 0
61372: PPUSH
61373: LD_VAR 0 2
61377: PPUSH
61378: LD_VAR 0 3
61382: PPUSH
61383: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61387: LD_VAR 0 4
61391: PPUSH
61392: LD_VAR 0 5
61396: PPUSH
61397: CALL_OW 428
61401: PUSH
61402: LD_INT 0
61404: EQUAL
61405: IFFALSE 61429
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61407: CALL_OW 44
61411: PPUSH
61412: LD_VAR 0 4
61416: PPUSH
61417: LD_VAR 0 5
61421: PPUSH
61422: LD_INT 1
61424: PPUSH
61425: CALL_OW 48
// end ;
61429: LD_VAR 0 6
61433: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61434: LD_INT 0
61436: PPUSH
61437: PPUSH
// uc_side := your_side ;
61438: LD_ADDR_OWVAR 20
61442: PUSH
61443: LD_OWVAR 2
61447: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61448: LD_VAR 0 1
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: LD_INT 2
61458: PUSH
61459: LD_INT 3
61461: PUSH
61462: LD_INT 4
61464: PUSH
61465: LD_INT 5
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: IN
61475: IFFALSE 61487
// uc_nation := nation_american else
61477: LD_ADDR_OWVAR 21
61481: PUSH
61482: LD_INT 1
61484: ST_TO_ADDR
61485: GO 61530
// if chassis in [ 11 , 12 , 13 , 14 ] then
61487: LD_VAR 0 1
61491: PUSH
61492: LD_INT 11
61494: PUSH
61495: LD_INT 12
61497: PUSH
61498: LD_INT 13
61500: PUSH
61501: LD_INT 14
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: IN
61510: IFFALSE 61522
// uc_nation := nation_arabian else
61512: LD_ADDR_OWVAR 21
61516: PUSH
61517: LD_INT 2
61519: ST_TO_ADDR
61520: GO 61530
// uc_nation := nation_russian ;
61522: LD_ADDR_OWVAR 21
61526: PUSH
61527: LD_INT 3
61529: ST_TO_ADDR
// vc_chassis := chassis ;
61530: LD_ADDR_OWVAR 37
61534: PUSH
61535: LD_VAR 0 1
61539: ST_TO_ADDR
// vc_engine := engine ;
61540: LD_ADDR_OWVAR 39
61544: PUSH
61545: LD_VAR 0 2
61549: ST_TO_ADDR
// vc_control := control ;
61550: LD_ADDR_OWVAR 38
61554: PUSH
61555: LD_VAR 0 3
61559: ST_TO_ADDR
// vc_weapon := weapon ;
61560: LD_ADDR_OWVAR 40
61564: PUSH
61565: LD_VAR 0 4
61569: ST_TO_ADDR
// un := CreateVehicle ;
61570: LD_ADDR_VAR 0 8
61574: PUSH
61575: CALL_OW 45
61579: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61580: LD_VAR 0 8
61584: PPUSH
61585: LD_INT 0
61587: PPUSH
61588: LD_INT 5
61590: PPUSH
61591: CALL_OW 12
61595: PPUSH
61596: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61600: LD_VAR 0 8
61604: PPUSH
61605: LD_VAR 0 5
61609: PPUSH
61610: LD_VAR 0 6
61614: PPUSH
61615: LD_INT 1
61617: PPUSH
61618: CALL_OW 48
// end ;
61622: LD_VAR 0 7
61626: RET
// export hInvincible ; every 1 do
61627: GO 61629
61629: DISABLE
// hInvincible := [ ] ;
61630: LD_ADDR_EXP 113
61634: PUSH
61635: EMPTY
61636: ST_TO_ADDR
61637: END
// every 10 do var i ;
61638: GO 61640
61640: DISABLE
61641: LD_INT 0
61643: PPUSH
// begin enable ;
61644: ENABLE
// if not hInvincible then
61645: LD_EXP 113
61649: NOT
61650: IFFALSE 61654
// exit ;
61652: GO 61698
// for i in hInvincible do
61654: LD_ADDR_VAR 0 1
61658: PUSH
61659: LD_EXP 113
61663: PUSH
61664: FOR_IN
61665: IFFALSE 61696
// if GetLives ( i ) < 1000 then
61667: LD_VAR 0 1
61671: PPUSH
61672: CALL_OW 256
61676: PUSH
61677: LD_INT 1000
61679: LESS
61680: IFFALSE 61694
// SetLives ( i , 1000 ) ;
61682: LD_VAR 0 1
61686: PPUSH
61687: LD_INT 1000
61689: PPUSH
61690: CALL_OW 234
61694: GO 61664
61696: POP
61697: POP
// end ;
61698: PPOPN 1
61700: END
// export function hHackInvincible ; var i ; begin
61701: LD_INT 0
61703: PPUSH
61704: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61705: LD_ADDR_VAR 0 2
61709: PUSH
61710: LD_INT 2
61712: PUSH
61713: LD_INT 21
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 21
61725: PUSH
61726: LD_INT 2
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: LIST
61737: PPUSH
61738: CALL_OW 69
61742: PUSH
61743: FOR_IN
61744: IFFALSE 61805
// if IsSelected ( i ) then
61746: LD_VAR 0 2
61750: PPUSH
61751: CALL_OW 306
61755: IFFALSE 61803
// begin if i in hInvincible then
61757: LD_VAR 0 2
61761: PUSH
61762: LD_EXP 113
61766: IN
61767: IFFALSE 61787
// hInvincible := hInvincible diff i else
61769: LD_ADDR_EXP 113
61773: PUSH
61774: LD_EXP 113
61778: PUSH
61779: LD_VAR 0 2
61783: DIFF
61784: ST_TO_ADDR
61785: GO 61803
// hInvincible := hInvincible union i ;
61787: LD_ADDR_EXP 113
61791: PUSH
61792: LD_EXP 113
61796: PUSH
61797: LD_VAR 0 2
61801: UNION
61802: ST_TO_ADDR
// end ;
61803: GO 61743
61805: POP
61806: POP
// end ;
61807: LD_VAR 0 1
61811: RET
// export function hHackInvisible ; var i , j ; begin
61812: LD_INT 0
61814: PPUSH
61815: PPUSH
61816: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61817: LD_ADDR_VAR 0 2
61821: PUSH
61822: LD_INT 21
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PPUSH
61832: CALL_OW 69
61836: PUSH
61837: FOR_IN
61838: IFFALSE 61862
// if IsSelected ( i ) then
61840: LD_VAR 0 2
61844: PPUSH
61845: CALL_OW 306
61849: IFFALSE 61860
// ComForceInvisible ( i ) ;
61851: LD_VAR 0 2
61855: PPUSH
61856: CALL_OW 496
61860: GO 61837
61862: POP
61863: POP
// end ;
61864: LD_VAR 0 1
61868: RET
// export function hHackChangeYourSide ; begin
61869: LD_INT 0
61871: PPUSH
// if your_side = 8 then
61872: LD_OWVAR 2
61876: PUSH
61877: LD_INT 8
61879: EQUAL
61880: IFFALSE 61892
// your_side := 0 else
61882: LD_ADDR_OWVAR 2
61886: PUSH
61887: LD_INT 0
61889: ST_TO_ADDR
61890: GO 61906
// your_side := your_side + 1 ;
61892: LD_ADDR_OWVAR 2
61896: PUSH
61897: LD_OWVAR 2
61901: PUSH
61902: LD_INT 1
61904: PLUS
61905: ST_TO_ADDR
// end ;
61906: LD_VAR 0 1
61910: RET
// export function hHackChangeUnitSide ; var i , j ; begin
61911: LD_INT 0
61913: PPUSH
61914: PPUSH
61915: PPUSH
// for i in all_units do
61916: LD_ADDR_VAR 0 2
61920: PUSH
61921: LD_OWVAR 3
61925: PUSH
61926: FOR_IN
61927: IFFALSE 62005
// if IsSelected ( i ) then
61929: LD_VAR 0 2
61933: PPUSH
61934: CALL_OW 306
61938: IFFALSE 62003
// begin j := GetSide ( i ) ;
61940: LD_ADDR_VAR 0 3
61944: PUSH
61945: LD_VAR 0 2
61949: PPUSH
61950: CALL_OW 255
61954: ST_TO_ADDR
// if j = 8 then
61955: LD_VAR 0 3
61959: PUSH
61960: LD_INT 8
61962: EQUAL
61963: IFFALSE 61975
// j := 0 else
61965: LD_ADDR_VAR 0 3
61969: PUSH
61970: LD_INT 0
61972: ST_TO_ADDR
61973: GO 61989
// j := j + 1 ;
61975: LD_ADDR_VAR 0 3
61979: PUSH
61980: LD_VAR 0 3
61984: PUSH
61985: LD_INT 1
61987: PLUS
61988: ST_TO_ADDR
// SetSide ( i , j ) ;
61989: LD_VAR 0 2
61993: PPUSH
61994: LD_VAR 0 3
61998: PPUSH
61999: CALL_OW 235
// end ;
62003: GO 61926
62005: POP
62006: POP
// end ;
62007: LD_VAR 0 1
62011: RET
// export function hHackFog ; begin
62012: LD_INT 0
62014: PPUSH
// FogOff ( true ) ;
62015: LD_INT 1
62017: PPUSH
62018: CALL_OW 344
// end ;
62022: LD_VAR 0 1
62026: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62027: LD_INT 0
62029: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62030: LD_VAR 0 1
62034: PPUSH
62035: LD_VAR 0 2
62039: PPUSH
62040: LD_VAR 0 3
62044: PPUSH
62045: LD_INT 1
62047: PPUSH
62048: LD_INT 1
62050: PPUSH
62051: CALL_OW 483
// CenterOnXY ( x , y ) ;
62055: LD_VAR 0 2
62059: PPUSH
62060: LD_VAR 0 3
62064: PPUSH
62065: CALL_OW 84
// end ;
62069: LD_VAR 0 4
62073: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62074: LD_INT 0
62076: PPUSH
62077: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62078: LD_VAR 0 1
62082: NOT
62083: PUSH
62084: LD_VAR 0 2
62088: PPUSH
62089: LD_VAR 0 3
62093: PPUSH
62094: CALL_OW 488
62098: NOT
62099: OR
62100: PUSH
62101: LD_VAR 0 1
62105: PPUSH
62106: CALL_OW 266
62110: PUSH
62111: LD_INT 3
62113: NONEQUAL
62114: PUSH
62115: LD_VAR 0 1
62119: PPUSH
62120: CALL_OW 247
62124: PUSH
62125: LD_INT 1
62127: EQUAL
62128: NOT
62129: AND
62130: OR
62131: IFFALSE 62135
// exit ;
62133: GO 62284
// if GetType ( factory ) = unit_human then
62135: LD_VAR 0 1
62139: PPUSH
62140: CALL_OW 247
62144: PUSH
62145: LD_INT 1
62147: EQUAL
62148: IFFALSE 62165
// factory := IsInUnit ( factory ) ;
62150: LD_ADDR_VAR 0 1
62154: PUSH
62155: LD_VAR 0 1
62159: PPUSH
62160: CALL_OW 310
62164: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62165: LD_VAR 0 1
62169: PPUSH
62170: CALL_OW 266
62174: PUSH
62175: LD_INT 3
62177: NONEQUAL
62178: IFFALSE 62182
// exit ;
62180: GO 62284
// if HexInfo ( x , y ) = factory then
62182: LD_VAR 0 2
62186: PPUSH
62187: LD_VAR 0 3
62191: PPUSH
62192: CALL_OW 428
62196: PUSH
62197: LD_VAR 0 1
62201: EQUAL
62202: IFFALSE 62229
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
62204: LD_ADDR_EXP 114
62208: PUSH
62209: LD_EXP 114
62213: PPUSH
62214: LD_VAR 0 1
62218: PPUSH
62219: LD_INT 0
62221: PPUSH
62222: CALL_OW 1
62226: ST_TO_ADDR
62227: GO 62280
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
62229: LD_ADDR_EXP 114
62233: PUSH
62234: LD_EXP 114
62238: PPUSH
62239: LD_VAR 0 1
62243: PPUSH
62244: LD_VAR 0 1
62248: PPUSH
62249: CALL_OW 255
62253: PUSH
62254: LD_VAR 0 1
62258: PUSH
62259: LD_VAR 0 2
62263: PUSH
62264: LD_VAR 0 3
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: PPUSH
62275: CALL_OW 1
62279: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62280: CALL 62289 0 0
// end ;
62284: LD_VAR 0 4
62288: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62289: LD_INT 0
62291: PPUSH
62292: PPUSH
62293: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62294: LD_STRING resetFactoryWaypoint();
62296: PPUSH
62297: CALL_OW 559
// if factoryWaypoints then
62301: LD_EXP 114
62305: IFFALSE 62431
// begin list := PrepareArray ( factoryWaypoints ) ;
62307: LD_ADDR_VAR 0 3
62311: PUSH
62312: LD_EXP 114
62316: PPUSH
62317: CALL 47525 0 1
62321: ST_TO_ADDR
// for i := 1 to list do
62322: LD_ADDR_VAR 0 2
62326: PUSH
62327: DOUBLE
62328: LD_INT 1
62330: DEC
62331: ST_TO_ADDR
62332: LD_VAR 0 3
62336: PUSH
62337: FOR_TO
62338: IFFALSE 62429
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62340: LD_STRING setFactoryWaypointXY(
62342: PUSH
62343: LD_VAR 0 3
62347: PUSH
62348: LD_VAR 0 2
62352: ARRAY
62353: PUSH
62354: LD_INT 1
62356: ARRAY
62357: STR
62358: PUSH
62359: LD_STRING ,
62361: STR
62362: PUSH
62363: LD_VAR 0 3
62367: PUSH
62368: LD_VAR 0 2
62372: ARRAY
62373: PUSH
62374: LD_INT 2
62376: ARRAY
62377: STR
62378: PUSH
62379: LD_STRING ,
62381: STR
62382: PUSH
62383: LD_VAR 0 3
62387: PUSH
62388: LD_VAR 0 2
62392: ARRAY
62393: PUSH
62394: LD_INT 3
62396: ARRAY
62397: STR
62398: PUSH
62399: LD_STRING ,
62401: STR
62402: PUSH
62403: LD_VAR 0 3
62407: PUSH
62408: LD_VAR 0 2
62412: ARRAY
62413: PUSH
62414: LD_INT 4
62416: ARRAY
62417: STR
62418: PUSH
62419: LD_STRING )
62421: STR
62422: PPUSH
62423: CALL_OW 559
62427: GO 62337
62429: POP
62430: POP
// end ; end ;
62431: LD_VAR 0 1
62435: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62436: LD_INT 0
62438: PPUSH
// if HexInfo ( x , y ) = warehouse then
62439: LD_VAR 0 2
62443: PPUSH
62444: LD_VAR 0 3
62448: PPUSH
62449: CALL_OW 428
62453: PUSH
62454: LD_VAR 0 1
62458: EQUAL
62459: IFFALSE 62486
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62461: LD_ADDR_EXP 115
62465: PUSH
62466: LD_EXP 115
62470: PPUSH
62471: LD_VAR 0 1
62475: PPUSH
62476: LD_INT 0
62478: PPUSH
62479: CALL_OW 1
62483: ST_TO_ADDR
62484: GO 62537
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62486: LD_ADDR_EXP 115
62490: PUSH
62491: LD_EXP 115
62495: PPUSH
62496: LD_VAR 0 1
62500: PPUSH
62501: LD_VAR 0 1
62505: PPUSH
62506: CALL_OW 255
62510: PUSH
62511: LD_VAR 0 1
62515: PUSH
62516: LD_VAR 0 2
62520: PUSH
62521: LD_VAR 0 3
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: PPUSH
62532: CALL_OW 1
62536: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62537: CALL 62546 0 0
// end ;
62541: LD_VAR 0 4
62545: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62546: LD_INT 0
62548: PPUSH
62549: PPUSH
62550: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62551: LD_STRING resetWarehouseGatheringPoints();
62553: PPUSH
62554: CALL_OW 559
// if warehouseGatheringPoints then
62558: LD_EXP 115
62562: IFFALSE 62688
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62564: LD_ADDR_VAR 0 3
62568: PUSH
62569: LD_EXP 115
62573: PPUSH
62574: CALL 47525 0 1
62578: ST_TO_ADDR
// for i := 1 to list do
62579: LD_ADDR_VAR 0 2
62583: PUSH
62584: DOUBLE
62585: LD_INT 1
62587: DEC
62588: ST_TO_ADDR
62589: LD_VAR 0 3
62593: PUSH
62594: FOR_TO
62595: IFFALSE 62686
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62597: LD_STRING setWarehouseGatheringPointXY(
62599: PUSH
62600: LD_VAR 0 3
62604: PUSH
62605: LD_VAR 0 2
62609: ARRAY
62610: PUSH
62611: LD_INT 1
62613: ARRAY
62614: STR
62615: PUSH
62616: LD_STRING ,
62618: STR
62619: PUSH
62620: LD_VAR 0 3
62624: PUSH
62625: LD_VAR 0 2
62629: ARRAY
62630: PUSH
62631: LD_INT 2
62633: ARRAY
62634: STR
62635: PUSH
62636: LD_STRING ,
62638: STR
62639: PUSH
62640: LD_VAR 0 3
62644: PUSH
62645: LD_VAR 0 2
62649: ARRAY
62650: PUSH
62651: LD_INT 3
62653: ARRAY
62654: STR
62655: PUSH
62656: LD_STRING ,
62658: STR
62659: PUSH
62660: LD_VAR 0 3
62664: PUSH
62665: LD_VAR 0 2
62669: ARRAY
62670: PUSH
62671: LD_INT 4
62673: ARRAY
62674: STR
62675: PUSH
62676: LD_STRING )
62678: STR
62679: PPUSH
62680: CALL_OW 559
62684: GO 62594
62686: POP
62687: POP
// end ; end ;
62688: LD_VAR 0 1
62692: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
62693: LD_EXP 115
62697: IFFALSE 63384
62699: GO 62701
62701: DISABLE
62702: LD_INT 0
62704: PPUSH
62705: PPUSH
62706: PPUSH
62707: PPUSH
62708: PPUSH
62709: PPUSH
62710: PPUSH
62711: PPUSH
62712: PPUSH
// begin enable ;
62713: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
62714: LD_ADDR_VAR 0 3
62718: PUSH
62719: LD_EXP 115
62723: PPUSH
62724: CALL 47525 0 1
62728: ST_TO_ADDR
// if not list then
62729: LD_VAR 0 3
62733: NOT
62734: IFFALSE 62738
// exit ;
62736: GO 63384
// for i := 1 to list do
62738: LD_ADDR_VAR 0 1
62742: PUSH
62743: DOUBLE
62744: LD_INT 1
62746: DEC
62747: ST_TO_ADDR
62748: LD_VAR 0 3
62752: PUSH
62753: FOR_TO
62754: IFFALSE 63382
// begin depot := list [ i ] [ 2 ] ;
62756: LD_ADDR_VAR 0 8
62760: PUSH
62761: LD_VAR 0 3
62765: PUSH
62766: LD_VAR 0 1
62770: ARRAY
62771: PUSH
62772: LD_INT 2
62774: ARRAY
62775: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
62776: LD_ADDR_VAR 0 5
62780: PUSH
62781: LD_VAR 0 3
62785: PUSH
62786: LD_VAR 0 1
62790: ARRAY
62791: PUSH
62792: LD_INT 1
62794: ARRAY
62795: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
62796: LD_VAR 0 8
62800: PPUSH
62801: CALL_OW 301
62805: PUSH
62806: LD_VAR 0 5
62810: PUSH
62811: LD_VAR 0 8
62815: PPUSH
62816: CALL_OW 255
62820: NONEQUAL
62821: OR
62822: IFFALSE 62851
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
62824: LD_ADDR_EXP 115
62828: PUSH
62829: LD_EXP 115
62833: PPUSH
62834: LD_VAR 0 8
62838: PPUSH
62839: LD_INT 0
62841: PPUSH
62842: CALL_OW 1
62846: ST_TO_ADDR
// exit ;
62847: POP
62848: POP
62849: GO 63384
// end ; x := list [ i ] [ 3 ] ;
62851: LD_ADDR_VAR 0 6
62855: PUSH
62856: LD_VAR 0 3
62860: PUSH
62861: LD_VAR 0 1
62865: ARRAY
62866: PUSH
62867: LD_INT 3
62869: ARRAY
62870: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
62871: LD_ADDR_VAR 0 7
62875: PUSH
62876: LD_VAR 0 3
62880: PUSH
62881: LD_VAR 0 1
62885: ARRAY
62886: PUSH
62887: LD_INT 4
62889: ARRAY
62890: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
62891: LD_ADDR_VAR 0 9
62895: PUSH
62896: LD_VAR 0 6
62900: PPUSH
62901: LD_VAR 0 7
62905: PPUSH
62906: LD_INT 16
62908: PPUSH
62909: CALL 46109 0 3
62913: ST_TO_ADDR
// if not cratesNearbyPoint then
62914: LD_VAR 0 9
62918: NOT
62919: IFFALSE 62925
// exit ;
62921: POP
62922: POP
62923: GO 63384
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
62925: LD_ADDR_VAR 0 4
62929: PUSH
62930: LD_INT 22
62932: PUSH
62933: LD_VAR 0 5
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 3
62944: PUSH
62945: LD_INT 60
62947: PUSH
62948: EMPTY
62949: LIST
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 91
62957: PUSH
62958: LD_VAR 0 8
62962: PUSH
62963: LD_INT 6
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: LD_INT 25
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 25
62986: PUSH
62987: LD_INT 16
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: PPUSH
63005: CALL_OW 69
63009: PUSH
63010: LD_VAR 0 8
63014: PPUSH
63015: CALL_OW 313
63019: PPUSH
63020: LD_INT 3
63022: PUSH
63023: LD_INT 60
63025: PUSH
63026: EMPTY
63027: LIST
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: LD_INT 25
63038: PUSH
63039: LD_INT 2
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 25
63048: PUSH
63049: LD_INT 16
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: LIST
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PPUSH
63065: CALL_OW 72
63069: UNION
63070: ST_TO_ADDR
// if tmp then
63071: LD_VAR 0 4
63075: IFFALSE 63155
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63077: LD_ADDR_VAR 0 4
63081: PUSH
63082: LD_VAR 0 4
63086: PPUSH
63087: LD_INT 3
63089: PPUSH
63090: CALL 44076 0 2
63094: ST_TO_ADDR
// for j in tmp do
63095: LD_ADDR_VAR 0 2
63099: PUSH
63100: LD_VAR 0 4
63104: PUSH
63105: FOR_IN
63106: IFFALSE 63149
// begin if IsInUnit ( j ) then
63108: LD_VAR 0 2
63112: PPUSH
63113: CALL_OW 310
63117: IFFALSE 63128
// ComExit ( j ) ;
63119: LD_VAR 0 2
63123: PPUSH
63124: CALL 44159 0 1
// AddComCollect ( j , x , y ) ;
63128: LD_VAR 0 2
63132: PPUSH
63133: LD_VAR 0 6
63137: PPUSH
63138: LD_VAR 0 7
63142: PPUSH
63143: CALL_OW 177
// end ;
63147: GO 63105
63149: POP
63150: POP
// exit ;
63151: POP
63152: POP
63153: GO 63384
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63155: LD_ADDR_VAR 0 4
63159: PUSH
63160: LD_INT 22
63162: PUSH
63163: LD_VAR 0 5
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 91
63174: PUSH
63175: LD_VAR 0 8
63179: PUSH
63180: LD_INT 8
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: LD_INT 34
63193: PUSH
63194: LD_INT 12
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 34
63203: PUSH
63204: LD_INT 51
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 34
63213: PUSH
63214: LD_INT 32
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 34
63223: PUSH
63224: LD_EXP 39
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: LIST
63244: PPUSH
63245: CALL_OW 69
63249: ST_TO_ADDR
// if tmp then
63250: LD_VAR 0 4
63254: IFFALSE 63380
// begin for j in tmp do
63256: LD_ADDR_VAR 0 2
63260: PUSH
63261: LD_VAR 0 4
63265: PUSH
63266: FOR_IN
63267: IFFALSE 63378
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63269: LD_VAR 0 2
63273: PPUSH
63274: CALL_OW 262
63278: PUSH
63279: LD_INT 3
63281: EQUAL
63282: PUSH
63283: LD_VAR 0 2
63287: PPUSH
63288: CALL_OW 261
63292: PUSH
63293: LD_INT 20
63295: GREATER
63296: OR
63297: PUSH
63298: LD_VAR 0 2
63302: PPUSH
63303: CALL_OW 314
63307: NOT
63308: AND
63309: PUSH
63310: LD_VAR 0 2
63314: PPUSH
63315: CALL_OW 263
63319: PUSH
63320: LD_INT 1
63322: NONEQUAL
63323: PUSH
63324: LD_VAR 0 2
63328: PPUSH
63329: CALL_OW 311
63333: OR
63334: AND
63335: IFFALSE 63376
// begin ComCollect ( j , x , y ) ;
63337: LD_VAR 0 2
63341: PPUSH
63342: LD_VAR 0 6
63346: PPUSH
63347: LD_VAR 0 7
63351: PPUSH
63352: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63356: LD_VAR 0 2
63360: PPUSH
63361: LD_VAR 0 8
63365: PPUSH
63366: CALL_OW 172
// exit ;
63370: POP
63371: POP
63372: POP
63373: POP
63374: GO 63384
// end ;
63376: GO 63266
63378: POP
63379: POP
// end ; end ;
63380: GO 62753
63382: POP
63383: POP
// end ; end_of_file
63384: PPOPN 9
63386: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63387: LD_VAR 0 1
63391: PUSH
63392: LD_INT 200
63394: DOUBLE
63395: GREATEREQUAL
63396: IFFALSE 63404
63398: LD_INT 299
63400: DOUBLE
63401: LESSEQUAL
63402: IFTRUE 63406
63404: GO 63438
63406: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63407: LD_VAR 0 1
63411: PPUSH
63412: LD_VAR 0 2
63416: PPUSH
63417: LD_VAR 0 3
63421: PPUSH
63422: LD_VAR 0 4
63426: PPUSH
63427: LD_VAR 0 5
63431: PPUSH
63432: CALL 63928 0 5
63436: GO 63515
63438: LD_INT 300
63440: DOUBLE
63441: GREATEREQUAL
63442: IFFALSE 63450
63444: LD_INT 399
63446: DOUBLE
63447: LESSEQUAL
63448: IFTRUE 63452
63450: GO 63514
63452: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63453: LD_VAR 0 1
63457: PPUSH
63458: LD_VAR 0 2
63462: PPUSH
63463: LD_VAR 0 3
63467: PPUSH
63468: LD_VAR 0 4
63472: PPUSH
63473: LD_VAR 0 5
63477: PPUSH
63478: LD_VAR 0 6
63482: PPUSH
63483: LD_VAR 0 7
63487: PPUSH
63488: LD_VAR 0 8
63492: PPUSH
63493: LD_VAR 0 9
63497: PPUSH
63498: LD_VAR 0 10
63502: PPUSH
63503: LD_VAR 0 11
63507: PPUSH
63508: CALL 60094 0 11
63512: GO 63515
63514: POP
// end ;
63515: PPOPN 11
63517: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63518: LD_VAR 0 1
63522: PPUSH
63523: LD_VAR 0 2
63527: PPUSH
63528: LD_VAR 0 3
63532: PPUSH
63533: LD_VAR 0 4
63537: PPUSH
63538: LD_VAR 0 5
63542: PPUSH
63543: CALL 63664 0 5
// end ; end_of_file
63547: PPOPN 5
63549: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
63550: LD_INT 0
63552: PPUSH
63553: PPUSH
63554: PPUSH
63555: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
63556: LD_VAR 0 1
63560: PPUSH
63561: CALL_OW 264
63565: PUSH
63566: LD_EXP 42
63570: EQUAL
63571: IFFALSE 63643
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
63573: LD_INT 68
63575: PPUSH
63576: LD_VAR 0 1
63580: PPUSH
63581: CALL_OW 255
63585: PPUSH
63586: CALL_OW 321
63590: PUSH
63591: LD_INT 2
63593: EQUAL
63594: IFFALSE 63606
// eff := 70 else
63596: LD_ADDR_VAR 0 4
63600: PUSH
63601: LD_INT 70
63603: ST_TO_ADDR
63604: GO 63614
// eff := 30 ;
63606: LD_ADDR_VAR 0 4
63610: PUSH
63611: LD_INT 30
63613: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
63614: LD_VAR 0 1
63618: PPUSH
63619: CALL_OW 250
63623: PPUSH
63624: LD_VAR 0 1
63628: PPUSH
63629: CALL_OW 251
63633: PPUSH
63634: LD_VAR 0 4
63638: PPUSH
63639: CALL_OW 495
// end ; end ;
63643: LD_VAR 0 2
63647: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63648: LD_INT 0
63650: PPUSH
// end ;
63651: LD_VAR 0 4
63655: RET
// export function SOS_Command ( cmd ) ; begin
63656: LD_INT 0
63658: PPUSH
// end ;
63659: LD_VAR 0 2
63663: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63664: LD_INT 0
63666: PPUSH
// end ;
63667: LD_VAR 0 6
63671: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
63672: LD_INT 0
63674: PPUSH
63675: PPUSH
// if not vehicle or not factory then
63676: LD_VAR 0 1
63680: NOT
63681: PUSH
63682: LD_VAR 0 2
63686: NOT
63687: OR
63688: IFFALSE 63692
// exit ;
63690: GO 63923
// if factoryWaypoints >= factory then
63692: LD_EXP 114
63696: PUSH
63697: LD_VAR 0 2
63701: GREATEREQUAL
63702: IFFALSE 63923
// if factoryWaypoints [ factory ] then
63704: LD_EXP 114
63708: PUSH
63709: LD_VAR 0 2
63713: ARRAY
63714: IFFALSE 63923
// begin if GetControl ( vehicle ) = control_manual then
63716: LD_VAR 0 1
63720: PPUSH
63721: CALL_OW 263
63725: PUSH
63726: LD_INT 1
63728: EQUAL
63729: IFFALSE 63810
// begin driver := IsDrivenBy ( vehicle ) ;
63731: LD_ADDR_VAR 0 4
63735: PUSH
63736: LD_VAR 0 1
63740: PPUSH
63741: CALL_OW 311
63745: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63746: LD_VAR 0 4
63750: PPUSH
63751: LD_EXP 114
63755: PUSH
63756: LD_VAR 0 2
63760: ARRAY
63761: PUSH
63762: LD_INT 3
63764: ARRAY
63765: PPUSH
63766: LD_EXP 114
63770: PUSH
63771: LD_VAR 0 2
63775: ARRAY
63776: PUSH
63777: LD_INT 4
63779: ARRAY
63780: PPUSH
63781: CALL_OW 171
// AddComExitVehicle ( driver ) ;
63785: LD_VAR 0 4
63789: PPUSH
63790: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
63794: LD_VAR 0 4
63798: PPUSH
63799: LD_VAR 0 2
63803: PPUSH
63804: CALL_OW 180
// end else
63808: GO 63923
// if GetControl ( vehicle ) = control_remote then
63810: LD_VAR 0 1
63814: PPUSH
63815: CALL_OW 263
63819: PUSH
63820: LD_INT 2
63822: EQUAL
63823: IFFALSE 63884
// begin wait ( 0 0$2 ) ;
63825: LD_INT 70
63827: PPUSH
63828: CALL_OW 67
// if Connect ( vehicle ) then
63832: LD_VAR 0 1
63836: PPUSH
63837: CALL 14487 0 1
63841: IFFALSE 63882
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63843: LD_VAR 0 1
63847: PPUSH
63848: LD_EXP 114
63852: PUSH
63853: LD_VAR 0 2
63857: ARRAY
63858: PUSH
63859: LD_INT 3
63861: ARRAY
63862: PPUSH
63863: LD_EXP 114
63867: PUSH
63868: LD_VAR 0 2
63872: ARRAY
63873: PUSH
63874: LD_INT 4
63876: ARRAY
63877: PPUSH
63878: CALL_OW 171
// end else
63882: GO 63923
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63884: LD_VAR 0 1
63888: PPUSH
63889: LD_EXP 114
63893: PUSH
63894: LD_VAR 0 2
63898: ARRAY
63899: PUSH
63900: LD_INT 3
63902: ARRAY
63903: PPUSH
63904: LD_EXP 114
63908: PUSH
63909: LD_VAR 0 2
63913: ARRAY
63914: PUSH
63915: LD_INT 4
63917: ARRAY
63918: PPUSH
63919: CALL_OW 171
// end ; end ;
63923: LD_VAR 0 3
63927: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
63928: LD_INT 0
63930: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
63931: LD_VAR 0 1
63935: PUSH
63936: LD_INT 250
63938: EQUAL
63939: PUSH
63940: LD_VAR 0 2
63944: PPUSH
63945: CALL_OW 264
63949: PUSH
63950: LD_EXP 45
63954: EQUAL
63955: AND
63956: IFFALSE 63977
// MinerPlaceMine ( unit , x , y ) ;
63958: LD_VAR 0 2
63962: PPUSH
63963: LD_VAR 0 4
63967: PPUSH
63968: LD_VAR 0 5
63972: PPUSH
63973: CALL 66376 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
63977: LD_VAR 0 1
63981: PUSH
63982: LD_INT 251
63984: EQUAL
63985: PUSH
63986: LD_VAR 0 2
63990: PPUSH
63991: CALL_OW 264
63995: PUSH
63996: LD_EXP 45
64000: EQUAL
64001: AND
64002: IFFALSE 64023
// MinerDetonateMine ( unit , x , y ) ;
64004: LD_VAR 0 2
64008: PPUSH
64009: LD_VAR 0 4
64013: PPUSH
64014: LD_VAR 0 5
64018: PPUSH
64019: CALL 66653 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64023: LD_VAR 0 1
64027: PUSH
64028: LD_INT 252
64030: EQUAL
64031: PUSH
64032: LD_VAR 0 2
64036: PPUSH
64037: CALL_OW 264
64041: PUSH
64042: LD_EXP 45
64046: EQUAL
64047: AND
64048: IFFALSE 64069
// MinerCreateMinefield ( unit , x , y ) ;
64050: LD_VAR 0 2
64054: PPUSH
64055: LD_VAR 0 4
64059: PPUSH
64060: LD_VAR 0 5
64064: PPUSH
64065: CALL 67070 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64069: LD_VAR 0 1
64073: PUSH
64074: LD_INT 253
64076: EQUAL
64077: PUSH
64078: LD_VAR 0 2
64082: PPUSH
64083: CALL_OW 257
64087: PUSH
64088: LD_INT 5
64090: EQUAL
64091: AND
64092: IFFALSE 64113
// ComBinocular ( unit , x , y ) ;
64094: LD_VAR 0 2
64098: PPUSH
64099: LD_VAR 0 4
64103: PPUSH
64104: LD_VAR 0 5
64108: PPUSH
64109: CALL 67441 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64113: LD_VAR 0 1
64117: PUSH
64118: LD_INT 254
64120: EQUAL
64121: PUSH
64122: LD_VAR 0 2
64126: PPUSH
64127: CALL_OW 264
64131: PUSH
64132: LD_EXP 40
64136: EQUAL
64137: AND
64138: PUSH
64139: LD_VAR 0 3
64143: PPUSH
64144: CALL_OW 263
64148: PUSH
64149: LD_INT 3
64151: EQUAL
64152: AND
64153: IFFALSE 64169
// HackDestroyVehicle ( unit , selectedUnit ) ;
64155: LD_VAR 0 2
64159: PPUSH
64160: LD_VAR 0 3
64164: PPUSH
64165: CALL 65736 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64169: LD_VAR 0 1
64173: PUSH
64174: LD_INT 255
64176: EQUAL
64177: PUSH
64178: LD_VAR 0 2
64182: PPUSH
64183: CALL_OW 264
64187: PUSH
64188: LD_INT 14
64190: PUSH
64191: LD_INT 53
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: IN
64198: AND
64199: PUSH
64200: LD_VAR 0 4
64204: PPUSH
64205: LD_VAR 0 5
64209: PPUSH
64210: CALL_OW 488
64214: AND
64215: IFFALSE 64239
// CutTreeXYR ( unit , x , y , 12 ) ;
64217: LD_VAR 0 2
64221: PPUSH
64222: LD_VAR 0 4
64226: PPUSH
64227: LD_VAR 0 5
64231: PPUSH
64232: LD_INT 12
64234: PPUSH
64235: CALL 64302 0 4
// if cmd = 256 then
64239: LD_VAR 0 1
64243: PUSH
64244: LD_INT 256
64246: EQUAL
64247: IFFALSE 64268
// SetFactoryWaypoint ( unit , x , y ) ;
64249: LD_VAR 0 2
64253: PPUSH
64254: LD_VAR 0 4
64258: PPUSH
64259: LD_VAR 0 5
64263: PPUSH
64264: CALL 62074 0 3
// if cmd = 257 then
64268: LD_VAR 0 1
64272: PUSH
64273: LD_INT 257
64275: EQUAL
64276: IFFALSE 64297
// SetWarehouseGatheringPoint ( unit , x , y ) ;
64278: LD_VAR 0 2
64282: PPUSH
64283: LD_VAR 0 4
64287: PPUSH
64288: LD_VAR 0 5
64292: PPUSH
64293: CALL 62436 0 3
// end ;
64297: LD_VAR 0 6
64301: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64302: LD_INT 0
64304: PPUSH
64305: PPUSH
64306: PPUSH
64307: PPUSH
64308: PPUSH
64309: PPUSH
64310: PPUSH
64311: PPUSH
64312: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
64313: LD_VAR 0 1
64317: NOT
64318: PUSH
64319: LD_VAR 0 2
64323: PPUSH
64324: LD_VAR 0 3
64328: PPUSH
64329: CALL_OW 488
64333: NOT
64334: OR
64335: PUSH
64336: LD_VAR 0 4
64340: NOT
64341: OR
64342: IFFALSE 64346
// exit ;
64344: GO 64686
// list := [ ] ;
64346: LD_ADDR_VAR 0 13
64350: PUSH
64351: EMPTY
64352: ST_TO_ADDR
// if x - r < 0 then
64353: LD_VAR 0 2
64357: PUSH
64358: LD_VAR 0 4
64362: MINUS
64363: PUSH
64364: LD_INT 0
64366: LESS
64367: IFFALSE 64379
// min_x := 0 else
64369: LD_ADDR_VAR 0 7
64373: PUSH
64374: LD_INT 0
64376: ST_TO_ADDR
64377: GO 64395
// min_x := x - r ;
64379: LD_ADDR_VAR 0 7
64383: PUSH
64384: LD_VAR 0 2
64388: PUSH
64389: LD_VAR 0 4
64393: MINUS
64394: ST_TO_ADDR
// if y - r < 0 then
64395: LD_VAR 0 3
64399: PUSH
64400: LD_VAR 0 4
64404: MINUS
64405: PUSH
64406: LD_INT 0
64408: LESS
64409: IFFALSE 64421
// min_y := 0 else
64411: LD_ADDR_VAR 0 8
64415: PUSH
64416: LD_INT 0
64418: ST_TO_ADDR
64419: GO 64437
// min_y := y - r ;
64421: LD_ADDR_VAR 0 8
64425: PUSH
64426: LD_VAR 0 3
64430: PUSH
64431: LD_VAR 0 4
64435: MINUS
64436: ST_TO_ADDR
// max_x := x + r ;
64437: LD_ADDR_VAR 0 9
64441: PUSH
64442: LD_VAR 0 2
64446: PUSH
64447: LD_VAR 0 4
64451: PLUS
64452: ST_TO_ADDR
// max_y := y + r ;
64453: LD_ADDR_VAR 0 10
64457: PUSH
64458: LD_VAR 0 3
64462: PUSH
64463: LD_VAR 0 4
64467: PLUS
64468: ST_TO_ADDR
// for _x = min_x to max_x do
64469: LD_ADDR_VAR 0 11
64473: PUSH
64474: DOUBLE
64475: LD_VAR 0 7
64479: DEC
64480: ST_TO_ADDR
64481: LD_VAR 0 9
64485: PUSH
64486: FOR_TO
64487: IFFALSE 64604
// for _y = min_y to max_y do
64489: LD_ADDR_VAR 0 12
64493: PUSH
64494: DOUBLE
64495: LD_VAR 0 8
64499: DEC
64500: ST_TO_ADDR
64501: LD_VAR 0 10
64505: PUSH
64506: FOR_TO
64507: IFFALSE 64600
// begin if not ValidHex ( _x , _y ) then
64509: LD_VAR 0 11
64513: PPUSH
64514: LD_VAR 0 12
64518: PPUSH
64519: CALL_OW 488
64523: NOT
64524: IFFALSE 64528
// continue ;
64526: GO 64506
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64528: LD_VAR 0 11
64532: PPUSH
64533: LD_VAR 0 12
64537: PPUSH
64538: CALL_OW 351
64542: PUSH
64543: LD_VAR 0 11
64547: PPUSH
64548: LD_VAR 0 12
64552: PPUSH
64553: CALL_OW 554
64557: AND
64558: IFFALSE 64598
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64560: LD_ADDR_VAR 0 13
64564: PUSH
64565: LD_VAR 0 13
64569: PPUSH
64570: LD_VAR 0 13
64574: PUSH
64575: LD_INT 1
64577: PLUS
64578: PPUSH
64579: LD_VAR 0 11
64583: PUSH
64584: LD_VAR 0 12
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PPUSH
64593: CALL_OW 2
64597: ST_TO_ADDR
// end ;
64598: GO 64506
64600: POP
64601: POP
64602: GO 64486
64604: POP
64605: POP
// if not list then
64606: LD_VAR 0 13
64610: NOT
64611: IFFALSE 64615
// exit ;
64613: GO 64686
// for i in list do
64615: LD_ADDR_VAR 0 6
64619: PUSH
64620: LD_VAR 0 13
64624: PUSH
64625: FOR_IN
64626: IFFALSE 64684
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
64628: LD_VAR 0 1
64632: PPUSH
64633: LD_STRING M
64635: PUSH
64636: LD_VAR 0 6
64640: PUSH
64641: LD_INT 1
64643: ARRAY
64644: PUSH
64645: LD_VAR 0 6
64649: PUSH
64650: LD_INT 2
64652: ARRAY
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: LD_INT 0
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: PUSH
64675: EMPTY
64676: LIST
64677: PPUSH
64678: CALL_OW 447
64682: GO 64625
64684: POP
64685: POP
// end ;
64686: LD_VAR 0 5
64690: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
64691: LD_EXP 117
64695: NOT
64696: IFFALSE 64746
64698: GO 64700
64700: DISABLE
// begin initHack := true ;
64701: LD_ADDR_EXP 117
64705: PUSH
64706: LD_INT 1
64708: ST_TO_ADDR
// hackTanks := [ ] ;
64709: LD_ADDR_EXP 118
64713: PUSH
64714: EMPTY
64715: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
64716: LD_ADDR_EXP 119
64720: PUSH
64721: EMPTY
64722: ST_TO_ADDR
// hackLimit := 3 ;
64723: LD_ADDR_EXP 120
64727: PUSH
64728: LD_INT 3
64730: ST_TO_ADDR
// hackDist := 12 ;
64731: LD_ADDR_EXP 121
64735: PUSH
64736: LD_INT 12
64738: ST_TO_ADDR
// hackCounter := [ ] ;
64739: LD_ADDR_EXP 122
64743: PUSH
64744: EMPTY
64745: ST_TO_ADDR
// end ;
64746: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
64747: LD_EXP 117
64751: PUSH
64752: LD_INT 34
64754: PUSH
64755: LD_EXP 40
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PPUSH
64764: CALL_OW 69
64768: AND
64769: IFFALSE 65024
64771: GO 64773
64773: DISABLE
64774: LD_INT 0
64776: PPUSH
64777: PPUSH
// begin enable ;
64778: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
64779: LD_ADDR_VAR 0 1
64783: PUSH
64784: LD_INT 34
64786: PUSH
64787: LD_EXP 40
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PPUSH
64796: CALL_OW 69
64800: PUSH
64801: FOR_IN
64802: IFFALSE 65022
// begin if not i in hackTanks then
64804: LD_VAR 0 1
64808: PUSH
64809: LD_EXP 118
64813: IN
64814: NOT
64815: IFFALSE 64898
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
64817: LD_ADDR_EXP 118
64821: PUSH
64822: LD_EXP 118
64826: PPUSH
64827: LD_EXP 118
64831: PUSH
64832: LD_INT 1
64834: PLUS
64835: PPUSH
64836: LD_VAR 0 1
64840: PPUSH
64841: CALL_OW 1
64845: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
64846: LD_ADDR_EXP 119
64850: PUSH
64851: LD_EXP 119
64855: PPUSH
64856: LD_EXP 119
64860: PUSH
64861: LD_INT 1
64863: PLUS
64864: PPUSH
64865: EMPTY
64866: PPUSH
64867: CALL_OW 1
64871: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
64872: LD_ADDR_EXP 122
64876: PUSH
64877: LD_EXP 122
64881: PPUSH
64882: LD_EXP 122
64886: PUSH
64887: LD_INT 1
64889: PLUS
64890: PPUSH
64891: EMPTY
64892: PPUSH
64893: CALL_OW 1
64897: ST_TO_ADDR
// end ; if not IsOk ( i ) then
64898: LD_VAR 0 1
64902: PPUSH
64903: CALL_OW 302
64907: NOT
64908: IFFALSE 64921
// begin HackUnlinkAll ( i ) ;
64910: LD_VAR 0 1
64914: PPUSH
64915: CALL 65027 0 1
// continue ;
64919: GO 64801
// end ; HackCheckCapturedStatus ( i ) ;
64921: LD_VAR 0 1
64925: PPUSH
64926: CALL 65470 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
64930: LD_ADDR_VAR 0 2
64934: PUSH
64935: LD_INT 81
64937: PUSH
64938: LD_VAR 0 1
64942: PPUSH
64943: CALL_OW 255
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 33
64954: PUSH
64955: LD_INT 3
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 91
64964: PUSH
64965: LD_VAR 0 1
64969: PUSH
64970: LD_EXP 121
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 50
64982: PUSH
64983: EMPTY
64984: LIST
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: PPUSH
64992: CALL_OW 69
64996: ST_TO_ADDR
// if not tmp then
64997: LD_VAR 0 2
65001: NOT
65002: IFFALSE 65006
// continue ;
65004: GO 64801
// HackLink ( i , tmp ) ;
65006: LD_VAR 0 1
65010: PPUSH
65011: LD_VAR 0 2
65015: PPUSH
65016: CALL 65163 0 2
// end ;
65020: GO 64801
65022: POP
65023: POP
// end ;
65024: PPOPN 2
65026: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
65027: LD_INT 0
65029: PPUSH
65030: PPUSH
65031: PPUSH
// if not hack in hackTanks then
65032: LD_VAR 0 1
65036: PUSH
65037: LD_EXP 118
65041: IN
65042: NOT
65043: IFFALSE 65047
// exit ;
65045: GO 65158
// index := GetElementIndex ( hackTanks , hack ) ;
65047: LD_ADDR_VAR 0 4
65051: PUSH
65052: LD_EXP 118
65056: PPUSH
65057: LD_VAR 0 1
65061: PPUSH
65062: CALL 11301 0 2
65066: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
65067: LD_EXP 119
65071: PUSH
65072: LD_VAR 0 4
65076: ARRAY
65077: IFFALSE 65158
// begin for i in hackTanksCaptured [ index ] do
65079: LD_ADDR_VAR 0 3
65083: PUSH
65084: LD_EXP 119
65088: PUSH
65089: LD_VAR 0 4
65093: ARRAY
65094: PUSH
65095: FOR_IN
65096: IFFALSE 65122
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
65098: LD_VAR 0 3
65102: PUSH
65103: LD_INT 1
65105: ARRAY
65106: PPUSH
65107: LD_VAR 0 3
65111: PUSH
65112: LD_INT 2
65114: ARRAY
65115: PPUSH
65116: CALL_OW 235
65120: GO 65095
65122: POP
65123: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
65124: LD_ADDR_EXP 119
65128: PUSH
65129: LD_EXP 119
65133: PPUSH
65134: LD_VAR 0 4
65138: PPUSH
65139: EMPTY
65140: PPUSH
65141: CALL_OW 1
65145: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
65146: LD_VAR 0 1
65150: PPUSH
65151: LD_INT 0
65153: PPUSH
65154: CALL_OW 505
// end ; end ;
65158: LD_VAR 0 2
65162: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
65163: LD_INT 0
65165: PPUSH
65166: PPUSH
65167: PPUSH
// if not hack in hackTanks or not vehicles then
65168: LD_VAR 0 1
65172: PUSH
65173: LD_EXP 118
65177: IN
65178: NOT
65179: PUSH
65180: LD_VAR 0 2
65184: NOT
65185: OR
65186: IFFALSE 65190
// exit ;
65188: GO 65465
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
65190: LD_ADDR_VAR 0 2
65194: PUSH
65195: LD_VAR 0 1
65199: PPUSH
65200: LD_VAR 0 2
65204: PPUSH
65205: LD_INT 1
65207: PPUSH
65208: LD_INT 1
65210: PPUSH
65211: CALL 11951 0 4
65215: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
65216: LD_ADDR_VAR 0 5
65220: PUSH
65221: LD_EXP 118
65225: PPUSH
65226: LD_VAR 0 1
65230: PPUSH
65231: CALL 11301 0 2
65235: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
65236: LD_EXP 119
65240: PUSH
65241: LD_VAR 0 5
65245: ARRAY
65246: PUSH
65247: LD_EXP 120
65251: LESS
65252: IFFALSE 65441
// begin for i := 1 to vehicles do
65254: LD_ADDR_VAR 0 4
65258: PUSH
65259: DOUBLE
65260: LD_INT 1
65262: DEC
65263: ST_TO_ADDR
65264: LD_VAR 0 2
65268: PUSH
65269: FOR_TO
65270: IFFALSE 65439
// begin if hackTanksCaptured [ index ] = hackLimit then
65272: LD_EXP 119
65276: PUSH
65277: LD_VAR 0 5
65281: ARRAY
65282: PUSH
65283: LD_EXP 120
65287: EQUAL
65288: IFFALSE 65292
// break ;
65290: GO 65439
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
65292: LD_ADDR_EXP 122
65296: PUSH
65297: LD_EXP 122
65301: PPUSH
65302: LD_VAR 0 5
65306: PPUSH
65307: LD_EXP 122
65311: PUSH
65312: LD_VAR 0 5
65316: ARRAY
65317: PUSH
65318: LD_INT 1
65320: PLUS
65321: PPUSH
65322: CALL_OW 1
65326: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
65327: LD_ADDR_EXP 119
65331: PUSH
65332: LD_EXP 119
65336: PPUSH
65337: LD_VAR 0 5
65341: PUSH
65342: LD_EXP 119
65346: PUSH
65347: LD_VAR 0 5
65351: ARRAY
65352: PUSH
65353: LD_INT 1
65355: PLUS
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PPUSH
65361: LD_VAR 0 2
65365: PUSH
65366: LD_VAR 0 4
65370: ARRAY
65371: PUSH
65372: LD_VAR 0 2
65376: PUSH
65377: LD_VAR 0 4
65381: ARRAY
65382: PPUSH
65383: CALL_OW 255
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PPUSH
65392: CALL 11516 0 3
65396: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
65397: LD_VAR 0 2
65401: PUSH
65402: LD_VAR 0 4
65406: ARRAY
65407: PPUSH
65408: LD_VAR 0 1
65412: PPUSH
65413: CALL_OW 255
65417: PPUSH
65418: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
65422: LD_VAR 0 2
65426: PUSH
65427: LD_VAR 0 4
65431: ARRAY
65432: PPUSH
65433: CALL_OW 141
// end ;
65437: GO 65269
65439: POP
65440: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65441: LD_VAR 0 1
65445: PPUSH
65446: LD_EXP 119
65450: PUSH
65451: LD_VAR 0 5
65455: ARRAY
65456: PUSH
65457: LD_INT 0
65459: PLUS
65460: PPUSH
65461: CALL_OW 505
// end ;
65465: LD_VAR 0 3
65469: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
65470: LD_INT 0
65472: PPUSH
65473: PPUSH
65474: PPUSH
65475: PPUSH
// if not hack in hackTanks then
65476: LD_VAR 0 1
65480: PUSH
65481: LD_EXP 118
65485: IN
65486: NOT
65487: IFFALSE 65491
// exit ;
65489: GO 65731
// index := GetElementIndex ( hackTanks , hack ) ;
65491: LD_ADDR_VAR 0 4
65495: PUSH
65496: LD_EXP 118
65500: PPUSH
65501: LD_VAR 0 1
65505: PPUSH
65506: CALL 11301 0 2
65510: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65511: LD_ADDR_VAR 0 3
65515: PUSH
65516: DOUBLE
65517: LD_EXP 119
65521: PUSH
65522: LD_VAR 0 4
65526: ARRAY
65527: INC
65528: ST_TO_ADDR
65529: LD_INT 1
65531: PUSH
65532: FOR_DOWNTO
65533: IFFALSE 65705
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65535: LD_ADDR_VAR 0 5
65539: PUSH
65540: LD_EXP 119
65544: PUSH
65545: LD_VAR 0 4
65549: ARRAY
65550: PUSH
65551: LD_VAR 0 3
65555: ARRAY
65556: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65557: LD_VAR 0 5
65561: PUSH
65562: LD_INT 1
65564: ARRAY
65565: PPUSH
65566: CALL_OW 302
65570: NOT
65571: PUSH
65572: LD_VAR 0 5
65576: PUSH
65577: LD_INT 1
65579: ARRAY
65580: PPUSH
65581: CALL_OW 255
65585: PUSH
65586: LD_VAR 0 1
65590: PPUSH
65591: CALL_OW 255
65595: NONEQUAL
65596: OR
65597: IFFALSE 65703
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
65599: LD_VAR 0 5
65603: PUSH
65604: LD_INT 1
65606: ARRAY
65607: PPUSH
65608: CALL_OW 305
65612: PUSH
65613: LD_VAR 0 5
65617: PUSH
65618: LD_INT 1
65620: ARRAY
65621: PPUSH
65622: CALL_OW 255
65626: PUSH
65627: LD_VAR 0 1
65631: PPUSH
65632: CALL_OW 255
65636: EQUAL
65637: AND
65638: IFFALSE 65662
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
65640: LD_VAR 0 5
65644: PUSH
65645: LD_INT 1
65647: ARRAY
65648: PPUSH
65649: LD_VAR 0 5
65653: PUSH
65654: LD_INT 2
65656: ARRAY
65657: PPUSH
65658: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
65662: LD_ADDR_EXP 119
65666: PUSH
65667: LD_EXP 119
65671: PPUSH
65672: LD_VAR 0 4
65676: PPUSH
65677: LD_EXP 119
65681: PUSH
65682: LD_VAR 0 4
65686: ARRAY
65687: PPUSH
65688: LD_VAR 0 3
65692: PPUSH
65693: CALL_OW 3
65697: PPUSH
65698: CALL_OW 1
65702: ST_TO_ADDR
// end ; end ;
65703: GO 65532
65705: POP
65706: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65707: LD_VAR 0 1
65711: PPUSH
65712: LD_EXP 119
65716: PUSH
65717: LD_VAR 0 4
65721: ARRAY
65722: PUSH
65723: LD_INT 0
65725: PLUS
65726: PPUSH
65727: CALL_OW 505
// end ;
65731: LD_VAR 0 2
65735: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
65736: LD_INT 0
65738: PPUSH
65739: PPUSH
65740: PPUSH
65741: PPUSH
// if not hack in hackTanks then
65742: LD_VAR 0 1
65746: PUSH
65747: LD_EXP 118
65751: IN
65752: NOT
65753: IFFALSE 65757
// exit ;
65755: GO 65842
// index := GetElementIndex ( hackTanks , hack ) ;
65757: LD_ADDR_VAR 0 5
65761: PUSH
65762: LD_EXP 118
65766: PPUSH
65767: LD_VAR 0 1
65771: PPUSH
65772: CALL 11301 0 2
65776: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
65777: LD_ADDR_VAR 0 4
65781: PUSH
65782: DOUBLE
65783: LD_INT 1
65785: DEC
65786: ST_TO_ADDR
65787: LD_EXP 119
65791: PUSH
65792: LD_VAR 0 5
65796: ARRAY
65797: PUSH
65798: FOR_TO
65799: IFFALSE 65840
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
65801: LD_EXP 119
65805: PUSH
65806: LD_VAR 0 5
65810: ARRAY
65811: PUSH
65812: LD_VAR 0 4
65816: ARRAY
65817: PUSH
65818: LD_INT 1
65820: ARRAY
65821: PUSH
65822: LD_VAR 0 2
65826: EQUAL
65827: IFFALSE 65838
// KillUnit ( vehicle ) ;
65829: LD_VAR 0 2
65833: PPUSH
65834: CALL_OW 66
65838: GO 65798
65840: POP
65841: POP
// end ;
65842: LD_VAR 0 3
65846: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
65847: LD_EXP 123
65851: NOT
65852: IFFALSE 65887
65854: GO 65856
65856: DISABLE
// begin initMiner := true ;
65857: LD_ADDR_EXP 123
65861: PUSH
65862: LD_INT 1
65864: ST_TO_ADDR
// minersList := [ ] ;
65865: LD_ADDR_EXP 124
65869: PUSH
65870: EMPTY
65871: ST_TO_ADDR
// minerMinesList := [ ] ;
65872: LD_ADDR_EXP 125
65876: PUSH
65877: EMPTY
65878: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
65879: LD_ADDR_EXP 126
65883: PUSH
65884: LD_INT 5
65886: ST_TO_ADDR
// end ;
65887: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
65888: LD_EXP 123
65892: PUSH
65893: LD_INT 34
65895: PUSH
65896: LD_EXP 45
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PPUSH
65905: CALL_OW 69
65909: AND
65910: IFFALSE 66373
65912: GO 65914
65914: DISABLE
65915: LD_INT 0
65917: PPUSH
65918: PPUSH
65919: PPUSH
65920: PPUSH
// begin enable ;
65921: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
65922: LD_ADDR_VAR 0 1
65926: PUSH
65927: LD_INT 34
65929: PUSH
65930: LD_EXP 45
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PPUSH
65939: CALL_OW 69
65943: PUSH
65944: FOR_IN
65945: IFFALSE 66017
// begin if not i in minersList then
65947: LD_VAR 0 1
65951: PUSH
65952: LD_EXP 124
65956: IN
65957: NOT
65958: IFFALSE 66015
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
65960: LD_ADDR_EXP 124
65964: PUSH
65965: LD_EXP 124
65969: PPUSH
65970: LD_EXP 124
65974: PUSH
65975: LD_INT 1
65977: PLUS
65978: PPUSH
65979: LD_VAR 0 1
65983: PPUSH
65984: CALL_OW 1
65988: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
65989: LD_ADDR_EXP 125
65993: PUSH
65994: LD_EXP 125
65998: PPUSH
65999: LD_EXP 125
66003: PUSH
66004: LD_INT 1
66006: PLUS
66007: PPUSH
66008: EMPTY
66009: PPUSH
66010: CALL_OW 1
66014: ST_TO_ADDR
// end end ;
66015: GO 65944
66017: POP
66018: POP
// for i := minerMinesList downto 1 do
66019: LD_ADDR_VAR 0 1
66023: PUSH
66024: DOUBLE
66025: LD_EXP 125
66029: INC
66030: ST_TO_ADDR
66031: LD_INT 1
66033: PUSH
66034: FOR_DOWNTO
66035: IFFALSE 66371
// begin if IsLive ( minersList [ i ] ) then
66037: LD_EXP 124
66041: PUSH
66042: LD_VAR 0 1
66046: ARRAY
66047: PPUSH
66048: CALL_OW 300
66052: IFFALSE 66080
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
66054: LD_EXP 124
66058: PUSH
66059: LD_VAR 0 1
66063: ARRAY
66064: PPUSH
66065: LD_EXP 125
66069: PUSH
66070: LD_VAR 0 1
66074: ARRAY
66075: PPUSH
66076: CALL_OW 505
// if not minerMinesList [ i ] then
66080: LD_EXP 125
66084: PUSH
66085: LD_VAR 0 1
66089: ARRAY
66090: NOT
66091: IFFALSE 66095
// continue ;
66093: GO 66034
// for j := minerMinesList [ i ] downto 1 do
66095: LD_ADDR_VAR 0 2
66099: PUSH
66100: DOUBLE
66101: LD_EXP 125
66105: PUSH
66106: LD_VAR 0 1
66110: ARRAY
66111: INC
66112: ST_TO_ADDR
66113: LD_INT 1
66115: PUSH
66116: FOR_DOWNTO
66117: IFFALSE 66367
// begin side := GetSide ( minersList [ i ] ) ;
66119: LD_ADDR_VAR 0 3
66123: PUSH
66124: LD_EXP 124
66128: PUSH
66129: LD_VAR 0 1
66133: ARRAY
66134: PPUSH
66135: CALL_OW 255
66139: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
66140: LD_ADDR_VAR 0 4
66144: PUSH
66145: LD_EXP 125
66149: PUSH
66150: LD_VAR 0 1
66154: ARRAY
66155: PUSH
66156: LD_VAR 0 2
66160: ARRAY
66161: PUSH
66162: LD_INT 1
66164: ARRAY
66165: PPUSH
66166: LD_EXP 125
66170: PUSH
66171: LD_VAR 0 1
66175: ARRAY
66176: PUSH
66177: LD_VAR 0 2
66181: ARRAY
66182: PUSH
66183: LD_INT 2
66185: ARRAY
66186: PPUSH
66187: CALL_OW 428
66191: ST_TO_ADDR
// if not tmp then
66192: LD_VAR 0 4
66196: NOT
66197: IFFALSE 66201
// continue ;
66199: GO 66116
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
66201: LD_VAR 0 4
66205: PUSH
66206: LD_INT 81
66208: PUSH
66209: LD_VAR 0 3
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PPUSH
66218: CALL_OW 69
66222: IN
66223: PUSH
66224: LD_EXP 125
66228: PUSH
66229: LD_VAR 0 1
66233: ARRAY
66234: PUSH
66235: LD_VAR 0 2
66239: ARRAY
66240: PUSH
66241: LD_INT 1
66243: ARRAY
66244: PPUSH
66245: LD_EXP 125
66249: PUSH
66250: LD_VAR 0 1
66254: ARRAY
66255: PUSH
66256: LD_VAR 0 2
66260: ARRAY
66261: PUSH
66262: LD_INT 2
66264: ARRAY
66265: PPUSH
66266: CALL_OW 458
66270: AND
66271: IFFALSE 66365
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
66273: LD_EXP 125
66277: PUSH
66278: LD_VAR 0 1
66282: ARRAY
66283: PUSH
66284: LD_VAR 0 2
66288: ARRAY
66289: PUSH
66290: LD_INT 1
66292: ARRAY
66293: PPUSH
66294: LD_EXP 125
66298: PUSH
66299: LD_VAR 0 1
66303: ARRAY
66304: PUSH
66305: LD_VAR 0 2
66309: ARRAY
66310: PUSH
66311: LD_INT 2
66313: ARRAY
66314: PPUSH
66315: LD_VAR 0 3
66319: PPUSH
66320: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
66324: LD_ADDR_EXP 125
66328: PUSH
66329: LD_EXP 125
66333: PPUSH
66334: LD_VAR 0 1
66338: PPUSH
66339: LD_EXP 125
66343: PUSH
66344: LD_VAR 0 1
66348: ARRAY
66349: PPUSH
66350: LD_VAR 0 2
66354: PPUSH
66355: CALL_OW 3
66359: PPUSH
66360: CALL_OW 1
66364: ST_TO_ADDR
// end ; end ;
66365: GO 66116
66367: POP
66368: POP
// end ;
66369: GO 66034
66371: POP
66372: POP
// end ;
66373: PPOPN 4
66375: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
66376: LD_INT 0
66378: PPUSH
66379: PPUSH
// result := false ;
66380: LD_ADDR_VAR 0 4
66384: PUSH
66385: LD_INT 0
66387: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
66388: LD_VAR 0 1
66392: PPUSH
66393: CALL_OW 264
66397: PUSH
66398: LD_EXP 45
66402: EQUAL
66403: NOT
66404: IFFALSE 66408
// exit ;
66406: GO 66648
// index := GetElementIndex ( minersList , unit ) ;
66408: LD_ADDR_VAR 0 5
66412: PUSH
66413: LD_EXP 124
66417: PPUSH
66418: LD_VAR 0 1
66422: PPUSH
66423: CALL 11301 0 2
66427: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
66428: LD_EXP 125
66432: PUSH
66433: LD_VAR 0 5
66437: ARRAY
66438: PUSH
66439: LD_EXP 126
66443: GREATEREQUAL
66444: IFFALSE 66448
// exit ;
66446: GO 66648
// ComMoveXY ( unit , x , y ) ;
66448: LD_VAR 0 1
66452: PPUSH
66453: LD_VAR 0 2
66457: PPUSH
66458: LD_VAR 0 3
66462: PPUSH
66463: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66467: LD_INT 35
66469: PPUSH
66470: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
66474: LD_VAR 0 1
66478: PPUSH
66479: LD_VAR 0 2
66483: PPUSH
66484: LD_VAR 0 3
66488: PPUSH
66489: CALL 42570 0 3
66493: NOT
66494: PUSH
66495: LD_VAR 0 1
66499: PPUSH
66500: CALL_OW 314
66504: AND
66505: IFFALSE 66509
// exit ;
66507: GO 66648
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66509: LD_VAR 0 2
66513: PPUSH
66514: LD_VAR 0 3
66518: PPUSH
66519: CALL_OW 428
66523: PUSH
66524: LD_VAR 0 1
66528: EQUAL
66529: PUSH
66530: LD_VAR 0 1
66534: PPUSH
66535: CALL_OW 314
66539: NOT
66540: AND
66541: IFFALSE 66467
// PlaySoundXY ( x , y , PlantMine ) ;
66543: LD_VAR 0 2
66547: PPUSH
66548: LD_VAR 0 3
66552: PPUSH
66553: LD_STRING PlantMine
66555: PPUSH
66556: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66560: LD_VAR 0 2
66564: PPUSH
66565: LD_VAR 0 3
66569: PPUSH
66570: LD_VAR 0 1
66574: PPUSH
66575: CALL_OW 255
66579: PPUSH
66580: LD_INT 0
66582: PPUSH
66583: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
66587: LD_ADDR_EXP 125
66591: PUSH
66592: LD_EXP 125
66596: PPUSH
66597: LD_VAR 0 5
66601: PUSH
66602: LD_EXP 125
66606: PUSH
66607: LD_VAR 0 5
66611: ARRAY
66612: PUSH
66613: LD_INT 1
66615: PLUS
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PPUSH
66621: LD_VAR 0 2
66625: PUSH
66626: LD_VAR 0 3
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PPUSH
66635: CALL 11516 0 3
66639: ST_TO_ADDR
// result := true ;
66640: LD_ADDR_VAR 0 4
66644: PUSH
66645: LD_INT 1
66647: ST_TO_ADDR
// end ;
66648: LD_VAR 0 4
66652: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
66653: LD_INT 0
66655: PPUSH
66656: PPUSH
66657: PPUSH
// if not unit in minersList then
66658: LD_VAR 0 1
66662: PUSH
66663: LD_EXP 124
66667: IN
66668: NOT
66669: IFFALSE 66673
// exit ;
66671: GO 67065
// index := GetElementIndex ( minersList , unit ) ;
66673: LD_ADDR_VAR 0 6
66677: PUSH
66678: LD_EXP 124
66682: PPUSH
66683: LD_VAR 0 1
66687: PPUSH
66688: CALL 11301 0 2
66692: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
66693: LD_ADDR_VAR 0 5
66697: PUSH
66698: DOUBLE
66699: LD_EXP 125
66703: PUSH
66704: LD_VAR 0 6
66708: ARRAY
66709: INC
66710: ST_TO_ADDR
66711: LD_INT 1
66713: PUSH
66714: FOR_DOWNTO
66715: IFFALSE 66876
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
66717: LD_EXP 125
66721: PUSH
66722: LD_VAR 0 6
66726: ARRAY
66727: PUSH
66728: LD_VAR 0 5
66732: ARRAY
66733: PUSH
66734: LD_INT 1
66736: ARRAY
66737: PUSH
66738: LD_VAR 0 2
66742: EQUAL
66743: PUSH
66744: LD_EXP 125
66748: PUSH
66749: LD_VAR 0 6
66753: ARRAY
66754: PUSH
66755: LD_VAR 0 5
66759: ARRAY
66760: PUSH
66761: LD_INT 2
66763: ARRAY
66764: PUSH
66765: LD_VAR 0 3
66769: EQUAL
66770: AND
66771: IFFALSE 66874
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66773: LD_EXP 125
66777: PUSH
66778: LD_VAR 0 6
66782: ARRAY
66783: PUSH
66784: LD_VAR 0 5
66788: ARRAY
66789: PUSH
66790: LD_INT 1
66792: ARRAY
66793: PPUSH
66794: LD_EXP 125
66798: PUSH
66799: LD_VAR 0 6
66803: ARRAY
66804: PUSH
66805: LD_VAR 0 5
66809: ARRAY
66810: PUSH
66811: LD_INT 2
66813: ARRAY
66814: PPUSH
66815: LD_VAR 0 1
66819: PPUSH
66820: CALL_OW 255
66824: PPUSH
66825: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66829: LD_ADDR_EXP 125
66833: PUSH
66834: LD_EXP 125
66838: PPUSH
66839: LD_VAR 0 6
66843: PPUSH
66844: LD_EXP 125
66848: PUSH
66849: LD_VAR 0 6
66853: ARRAY
66854: PPUSH
66855: LD_VAR 0 5
66859: PPUSH
66860: CALL_OW 3
66864: PPUSH
66865: CALL_OW 1
66869: ST_TO_ADDR
// exit ;
66870: POP
66871: POP
66872: GO 67065
// end ; end ;
66874: GO 66714
66876: POP
66877: POP
// for i := minerMinesList [ index ] downto 1 do
66878: LD_ADDR_VAR 0 5
66882: PUSH
66883: DOUBLE
66884: LD_EXP 125
66888: PUSH
66889: LD_VAR 0 6
66893: ARRAY
66894: INC
66895: ST_TO_ADDR
66896: LD_INT 1
66898: PUSH
66899: FOR_DOWNTO
66900: IFFALSE 67063
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
66902: LD_EXP 125
66906: PUSH
66907: LD_VAR 0 6
66911: ARRAY
66912: PUSH
66913: LD_VAR 0 5
66917: ARRAY
66918: PUSH
66919: LD_INT 1
66921: ARRAY
66922: PPUSH
66923: LD_EXP 125
66927: PUSH
66928: LD_VAR 0 6
66932: ARRAY
66933: PUSH
66934: LD_VAR 0 5
66938: ARRAY
66939: PUSH
66940: LD_INT 2
66942: ARRAY
66943: PPUSH
66944: LD_VAR 0 2
66948: PPUSH
66949: LD_VAR 0 3
66953: PPUSH
66954: CALL_OW 298
66958: PUSH
66959: LD_INT 6
66961: LESS
66962: IFFALSE 67061
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66964: LD_EXP 125
66968: PUSH
66969: LD_VAR 0 6
66973: ARRAY
66974: PUSH
66975: LD_VAR 0 5
66979: ARRAY
66980: PUSH
66981: LD_INT 1
66983: ARRAY
66984: PPUSH
66985: LD_EXP 125
66989: PUSH
66990: LD_VAR 0 6
66994: ARRAY
66995: PUSH
66996: LD_VAR 0 5
67000: ARRAY
67001: PUSH
67002: LD_INT 2
67004: ARRAY
67005: PPUSH
67006: LD_VAR 0 1
67010: PPUSH
67011: CALL_OW 255
67015: PPUSH
67016: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67020: LD_ADDR_EXP 125
67024: PUSH
67025: LD_EXP 125
67029: PPUSH
67030: LD_VAR 0 6
67034: PPUSH
67035: LD_EXP 125
67039: PUSH
67040: LD_VAR 0 6
67044: ARRAY
67045: PPUSH
67046: LD_VAR 0 5
67050: PPUSH
67051: CALL_OW 3
67055: PPUSH
67056: CALL_OW 1
67060: ST_TO_ADDR
// end ; end ;
67061: GO 66899
67063: POP
67064: POP
// end ;
67065: LD_VAR 0 4
67069: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
67070: LD_INT 0
67072: PPUSH
67073: PPUSH
67074: PPUSH
67075: PPUSH
67076: PPUSH
67077: PPUSH
67078: PPUSH
67079: PPUSH
67080: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
67081: LD_VAR 0 1
67085: PPUSH
67086: CALL_OW 264
67090: PUSH
67091: LD_EXP 45
67095: EQUAL
67096: NOT
67097: PUSH
67098: LD_VAR 0 1
67102: PUSH
67103: LD_EXP 124
67107: IN
67108: NOT
67109: OR
67110: IFFALSE 67114
// exit ;
67112: GO 67436
// index := GetElementIndex ( minersList , unit ) ;
67114: LD_ADDR_VAR 0 6
67118: PUSH
67119: LD_EXP 124
67123: PPUSH
67124: LD_VAR 0 1
67128: PPUSH
67129: CALL 11301 0 2
67133: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
67134: LD_ADDR_VAR 0 8
67138: PUSH
67139: LD_EXP 126
67143: PUSH
67144: LD_EXP 125
67148: PUSH
67149: LD_VAR 0 6
67153: ARRAY
67154: MINUS
67155: ST_TO_ADDR
// if not minesFreeAmount then
67156: LD_VAR 0 8
67160: NOT
67161: IFFALSE 67165
// exit ;
67163: GO 67436
// tmp := [ ] ;
67165: LD_ADDR_VAR 0 7
67169: PUSH
67170: EMPTY
67171: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
67172: LD_ADDR_VAR 0 5
67176: PUSH
67177: DOUBLE
67178: LD_INT 1
67180: DEC
67181: ST_TO_ADDR
67182: LD_VAR 0 8
67186: PUSH
67187: FOR_TO
67188: IFFALSE 67383
// begin _d := rand ( 0 , 5 ) ;
67190: LD_ADDR_VAR 0 11
67194: PUSH
67195: LD_INT 0
67197: PPUSH
67198: LD_INT 5
67200: PPUSH
67201: CALL_OW 12
67205: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
67206: LD_ADDR_VAR 0 12
67210: PUSH
67211: LD_INT 2
67213: PPUSH
67214: LD_INT 6
67216: PPUSH
67217: CALL_OW 12
67221: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
67222: LD_ADDR_VAR 0 9
67226: PUSH
67227: LD_VAR 0 2
67231: PPUSH
67232: LD_VAR 0 11
67236: PPUSH
67237: LD_VAR 0 12
67241: PPUSH
67242: CALL_OW 272
67246: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
67247: LD_ADDR_VAR 0 10
67251: PUSH
67252: LD_VAR 0 3
67256: PPUSH
67257: LD_VAR 0 11
67261: PPUSH
67262: LD_VAR 0 12
67266: PPUSH
67267: CALL_OW 273
67271: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
67272: LD_VAR 0 9
67276: PPUSH
67277: LD_VAR 0 10
67281: PPUSH
67282: CALL_OW 488
67286: PUSH
67287: LD_VAR 0 9
67291: PUSH
67292: LD_VAR 0 10
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_VAR 0 7
67305: IN
67306: NOT
67307: AND
67308: PUSH
67309: LD_VAR 0 9
67313: PPUSH
67314: LD_VAR 0 10
67318: PPUSH
67319: CALL_OW 458
67323: NOT
67324: AND
67325: IFFALSE 67367
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
67327: LD_ADDR_VAR 0 7
67331: PUSH
67332: LD_VAR 0 7
67336: PPUSH
67337: LD_VAR 0 7
67341: PUSH
67342: LD_INT 1
67344: PLUS
67345: PPUSH
67346: LD_VAR 0 9
67350: PUSH
67351: LD_VAR 0 10
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PPUSH
67360: CALL_OW 1
67364: ST_TO_ADDR
67365: GO 67381
// i := i - 1 ;
67367: LD_ADDR_VAR 0 5
67371: PUSH
67372: LD_VAR 0 5
67376: PUSH
67377: LD_INT 1
67379: MINUS
67380: ST_TO_ADDR
// end ;
67381: GO 67187
67383: POP
67384: POP
// for i in tmp do
67385: LD_ADDR_VAR 0 5
67389: PUSH
67390: LD_VAR 0 7
67394: PUSH
67395: FOR_IN
67396: IFFALSE 67434
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
67398: LD_VAR 0 1
67402: PPUSH
67403: LD_VAR 0 5
67407: PUSH
67408: LD_INT 1
67410: ARRAY
67411: PPUSH
67412: LD_VAR 0 5
67416: PUSH
67417: LD_INT 2
67419: ARRAY
67420: PPUSH
67421: CALL 66376 0 3
67425: NOT
67426: IFFALSE 67432
// exit ;
67428: POP
67429: POP
67430: GO 67436
67432: GO 67395
67434: POP
67435: POP
// end ;
67436: LD_VAR 0 4
67440: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
67441: LD_INT 0
67443: PPUSH
67444: PPUSH
67445: PPUSH
67446: PPUSH
67447: PPUSH
67448: PPUSH
67449: PPUSH
// if not GetClass ( unit ) = class_sniper then
67450: LD_VAR 0 1
67454: PPUSH
67455: CALL_OW 257
67459: PUSH
67460: LD_INT 5
67462: EQUAL
67463: NOT
67464: IFFALSE 67468
// exit ;
67466: GO 67856
// dist := 8 ;
67468: LD_ADDR_VAR 0 5
67472: PUSH
67473: LD_INT 8
67475: ST_TO_ADDR
// viewRange := 12 ;
67476: LD_ADDR_VAR 0 7
67480: PUSH
67481: LD_INT 12
67483: ST_TO_ADDR
// side := GetSide ( unit ) ;
67484: LD_ADDR_VAR 0 6
67488: PUSH
67489: LD_VAR 0 1
67493: PPUSH
67494: CALL_OW 255
67498: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67499: LD_INT 61
67501: PPUSH
67502: LD_VAR 0 6
67506: PPUSH
67507: CALL_OW 321
67511: PUSH
67512: LD_INT 2
67514: EQUAL
67515: IFFALSE 67525
// viewRange := 16 ;
67517: LD_ADDR_VAR 0 7
67521: PUSH
67522: LD_INT 16
67524: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67525: LD_VAR 0 1
67529: PPUSH
67530: LD_VAR 0 2
67534: PPUSH
67535: LD_VAR 0 3
67539: PPUSH
67540: CALL_OW 297
67544: PUSH
67545: LD_VAR 0 5
67549: GREATER
67550: IFFALSE 67629
// begin ComMoveXY ( unit , x , y ) ;
67552: LD_VAR 0 1
67556: PPUSH
67557: LD_VAR 0 2
67561: PPUSH
67562: LD_VAR 0 3
67566: PPUSH
67567: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67571: LD_INT 35
67573: PPUSH
67574: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
67578: LD_VAR 0 1
67582: PPUSH
67583: LD_VAR 0 2
67587: PPUSH
67588: LD_VAR 0 3
67592: PPUSH
67593: CALL 42570 0 3
67597: NOT
67598: IFFALSE 67602
// exit ;
67600: GO 67856
// until GetDistUnitXY ( unit , x , y ) < dist ;
67602: LD_VAR 0 1
67606: PPUSH
67607: LD_VAR 0 2
67611: PPUSH
67612: LD_VAR 0 3
67616: PPUSH
67617: CALL_OW 297
67621: PUSH
67622: LD_VAR 0 5
67626: LESS
67627: IFFALSE 67571
// end ; ComTurnXY ( unit , x , y ) ;
67629: LD_VAR 0 1
67633: PPUSH
67634: LD_VAR 0 2
67638: PPUSH
67639: LD_VAR 0 3
67643: PPUSH
67644: CALL_OW 118
// wait ( 5 ) ;
67648: LD_INT 5
67650: PPUSH
67651: CALL_OW 67
// _d := GetDir ( unit ) ;
67655: LD_ADDR_VAR 0 10
67659: PUSH
67660: LD_VAR 0 1
67664: PPUSH
67665: CALL_OW 254
67669: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
67670: LD_ADDR_VAR 0 8
67674: PUSH
67675: LD_VAR 0 1
67679: PPUSH
67680: CALL_OW 250
67684: PPUSH
67685: LD_VAR 0 10
67689: PPUSH
67690: LD_VAR 0 5
67694: PPUSH
67695: CALL_OW 272
67699: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
67700: LD_ADDR_VAR 0 9
67704: PUSH
67705: LD_VAR 0 1
67709: PPUSH
67710: CALL_OW 251
67714: PPUSH
67715: LD_VAR 0 10
67719: PPUSH
67720: LD_VAR 0 5
67724: PPUSH
67725: CALL_OW 273
67729: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67730: LD_VAR 0 8
67734: PPUSH
67735: LD_VAR 0 9
67739: PPUSH
67740: CALL_OW 488
67744: NOT
67745: IFFALSE 67749
// exit ;
67747: GO 67856
// ComAnimCustom ( unit , 1 ) ;
67749: LD_VAR 0 1
67753: PPUSH
67754: LD_INT 1
67756: PPUSH
67757: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
67761: LD_VAR 0 8
67765: PPUSH
67766: LD_VAR 0 9
67770: PPUSH
67771: LD_VAR 0 6
67775: PPUSH
67776: LD_VAR 0 7
67780: PPUSH
67781: CALL_OW 330
// repeat wait ( 1 ) ;
67785: LD_INT 1
67787: PPUSH
67788: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
67792: LD_VAR 0 1
67796: PPUSH
67797: CALL_OW 316
67801: PUSH
67802: LD_VAR 0 1
67806: PPUSH
67807: CALL_OW 314
67811: OR
67812: PUSH
67813: LD_VAR 0 1
67817: PPUSH
67818: CALL_OW 302
67822: NOT
67823: OR
67824: PUSH
67825: LD_VAR 0 1
67829: PPUSH
67830: CALL_OW 301
67834: OR
67835: IFFALSE 67785
// RemoveSeeing ( _x , _y , side ) ;
67837: LD_VAR 0 8
67841: PPUSH
67842: LD_VAR 0 9
67846: PPUSH
67847: LD_VAR 0 6
67851: PPUSH
67852: CALL_OW 331
// end ;
67856: LD_VAR 0 4
67860: RET
