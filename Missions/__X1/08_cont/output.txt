// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 21414 0 0
// PrepareRussian ;
  12: CALL 2056 0 0
// PrepareArabian ;
  16: CALL 446 0 0
// Action ;
  20: CALL 3854 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin , kaiaWeaponHidden ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// kaiaWeaponHidden := 0 ;
 427: LD_ADDR_EXP 45
 431: PUSH
 432: LD_INT 0
 434: ST_TO_ADDR
// enable ( entranceEvent ) ;
 435: LD_INT 1
 437: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 438: LD_INT 2
 440: DISABLE_MARKED
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
// uc_side := 4 ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_INT 4
 457: ST_TO_ADDR
// uc_nation := 1 ;
 458: LD_ADDR_OWVAR 21
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 466: LD_ADDR_EXP 58
 470: PUSH
 471: LD_STRING 07_Americans
 473: PPUSH
 474: CALL_OW 31
 478: ST_TO_ADDR
// if americanSquad < 5 then
 479: LD_EXP 58
 483: PUSH
 484: LD_INT 5
 486: LESS
 487: IFFALSE 581
// begin if not americanSquad then
 489: LD_EXP 58
 493: NOT
 494: IFFALSE 503
// americanSquad := [ ] ;
 496: LD_ADDR_EXP 58
 500: PUSH
 501: EMPTY
 502: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: DOUBLE
 509: LD_EXP 58
 513: DEC
 514: ST_TO_ADDR
 515: LD_INT 2
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 4
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_OWVAR 67
 537: ARRAY
 538: PUSH
 539: FOR_TO
 540: IFFALSE 577
// begin PrepareHuman ( false , 2 , 6 ) ;
 542: LD_INT 0
 544: PPUSH
 545: LD_INT 2
 547: PPUSH
 548: LD_INT 6
 550: PPUSH
 551: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 555: LD_ADDR_EXP 58
 559: PUSH
 560: LD_EXP 58
 564: PPUSH
 565: CALL_OW 44
 569: PPUSH
 570: CALL 68440 0 2
 574: ST_TO_ADDR
// end ;
 575: GO 539
 577: POP
 578: POP
// end else
 579: GO 628
// for i := Count ( americanSquad ) downto 5 do
 581: LD_ADDR_VAR 0 2
 585: PUSH
 586: DOUBLE
 587: LD_EXP 58
 591: PPUSH
 592: CALL 32464 0 1
 596: INC
 597: ST_TO_ADDR
 598: LD_INT 5
 600: PUSH
 601: FOR_DOWNTO
 602: IFFALSE 626
// americanSquad := Delete ( americanSquad , i ) ;
 604: LD_ADDR_EXP 58
 608: PUSH
 609: LD_EXP 58
 613: PPUSH
 614: LD_VAR 0 2
 618: PPUSH
 619: CALL_OW 3
 623: ST_TO_ADDR
 624: GO 601
 626: POP
 627: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 628: LD_ADDR_EXP 60
 632: PUSH
 633: LD_STRING UsCommander
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_STRING 07_
 644: PPUSH
 645: CALL 30240 0 3
 649: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 650: LD_INT 1
 652: PPUSH
 653: LD_INT 6
 655: PPUSH
 656: CALL_OW 381
// Jerry := CreateHuman ;
 660: LD_ADDR_EXP 61
 664: PUSH
 665: CALL_OW 44
 669: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 670: LD_EXP 61
 674: PPUSH
 675: LD_INT 33
 677: PPUSH
 678: CALL_OW 336
// if not Doug then
 682: LD_EXP 60
 686: NOT
 687: IFFALSE 709
// begin PrepareSoldier ( sex_male , 6 ) ;
 689: LD_INT 1
 691: PPUSH
 692: LD_INT 6
 694: PPUSH
 695: CALL_OW 381
// Doug := CreateHuman ;
 699: LD_ADDR_EXP 60
 703: PUSH
 704: CALL_OW 44
 708: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 709: LD_EXP 60
 713: PPUSH
 714: LD_INT 33
 716: PPUSH
 717: CALL_OW 336
// if johnnySaved or debug then
 721: LD_EXP 3
 725: IFTRUE 733
 727: PUSH
 728: LD_EXP 1
 732: OR
 733: IFFALSE 760
// begin Harris := NewCharacter ( Harris ) ;
 735: LD_ADDR_EXP 59
 739: PUSH
 740: LD_STRING Harris
 742: PPUSH
 743: CALL_OW 25
 747: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 748: LD_EXP 59
 752: PPUSH
 753: LD_INT 33
 755: PPUSH
 756: CALL_OW 336
// end ; uc_side := 2 ;
 760: LD_ADDR_OWVAR 20
 764: PUSH
 765: LD_INT 2
 767: ST_TO_ADDR
// uc_nation := 2 ;
 768: LD_ADDR_OWVAR 21
 772: PUSH
 773: LD_INT 2
 775: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 776: LD_ADDR_EXP 46
 780: PUSH
 781: LD_STRING Heike
 783: PPUSH
 784: LD_EXP 1
 788: NOT
 789: PPUSH
 790: LD_EXP 2
 794: PPUSH
 795: CALL 30240 0 3
 799: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 800: LD_ADDR_EXP 49
 804: PUSH
 805: LD_STRING Ibrahim
 807: PPUSH
 808: LD_EXP 1
 812: NOT
 813: PPUSH
 814: LD_EXP 2
 818: PPUSH
 819: CALL 30240 0 3
 823: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 824: LD_ADDR_EXP 47
 828: PUSH
 829: LD_STRING Givi
 831: PPUSH
 832: LD_EXP 1
 836: NOT
 837: PPUSH
 838: LD_EXP 2
 842: PPUSH
 843: CALL 30240 0 3
 847: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 848: LD_ADDR_EXP 50
 852: PUSH
 853: LD_STRING Kamil
 855: PPUSH
 856: LD_EXP 1
 860: NOT
 861: PPUSH
 862: LD_EXP 2
 866: PPUSH
 867: CALL 30240 0 3
 871: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 872: LD_ADDR_EXP 51
 876: PUSH
 877: LD_STRING Kaia
 879: PPUSH
 880: LD_EXP 1
 884: NOT
 885: PPUSH
 886: LD_EXP 2
 890: PPUSH
 891: CALL 30240 0 3
 895: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 896: LD_ADDR_EXP 52
 900: PUSH
 901: LD_STRING Sophia
 903: PPUSH
 904: LD_EXP 1
 908: NOT
 909: PPUSH
 910: LD_EXP 2
 914: PPUSH
 915: CALL 30240 0 3
 919: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 920: LD_ADDR_EXP 53
 924: PUSH
 925: LD_STRING Markov
 927: PPUSH
 928: LD_EXP 1
 932: NOT
 933: PPUSH
 934: LD_EXP 2
 938: PPUSH
 939: CALL 30240 0 3
 943: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 944: LD_ADDR_EXP 56
 948: PUSH
 949: LD_STRING Aviradze
 951: PPUSH
 952: LD_EXP 1
 956: NOT
 957: PPUSH
 958: LD_EXP 2
 962: PPUSH
 963: CALL 30240 0 3
 967: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 968: LD_ADDR_EXP 55
 972: PUSH
 973: LD_STRING Kurt
 975: PPUSH
 976: LD_EXP 1
 980: NOT
 981: PPUSH
 982: LD_EXP 2
 986: PPUSH
 987: CALL 30240 0 3
 991: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 992: LD_ADDR_EXP 48
 996: PUSH
 997: LD_STRING Mike
 999: PPUSH
1000: LD_EXP 1
1004: NOT
1005: PPUSH
1006: LD_EXP 2
1010: PPUSH
1011: CALL 30240 0 3
1015: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1016: LD_ADDR_EXP 54
1020: PUSH
1021: LD_STRING Olaf
1023: PPUSH
1024: LD_EXP 1
1028: NOT
1029: PPUSH
1030: LD_EXP 2
1034: PPUSH
1035: CALL 30240 0 3
1039: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1040: LD_ADDR_EXP 57
1044: PUSH
1045: LD_STRING 07_others
1047: PPUSH
1048: CALL_OW 31
1052: ST_TO_ADDR
// end ;
1053: LD_VAR 0 1
1057: RET
// export function PrepareGame ; var i ; begin
1058: LD_INT 0
1060: PPUSH
1061: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1062: LD_EXP 46
1066: PPUSH
1067: LD_INT 23
1069: PPUSH
1070: CALL_OW 52
// if Givi then
1074: LD_EXP 47
1078: IFFALSE 1116
// begin SetSide ( Givi , 5 ) ;
1080: LD_EXP 47
1084: PPUSH
1085: LD_INT 5
1087: PPUSH
1088: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1092: LD_EXP 47
1096: PPUSH
1097: LD_INT 9
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: CALL_OW 49
// ComHold ( Givi ) ;
1107: LD_EXP 47
1111: PPUSH
1112: CALL_OW 140
// end ; if Markov then
1116: LD_EXP 53
1120: IFFALSE 1158
// begin SetSide ( Markov , 5 ) ;
1122: LD_EXP 53
1126: PPUSH
1127: LD_INT 5
1129: PPUSH
1130: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1134: LD_EXP 53
1138: PPUSH
1139: LD_INT 3
1141: PPUSH
1142: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1146: LD_EXP 53
1150: PPUSH
1151: LD_INT 61
1153: PPUSH
1154: CALL_OW 52
// end ; if Mike then
1158: LD_EXP 48
1162: IFFALSE 1200
// begin SetSide ( Mike , 5 ) ;
1164: LD_EXP 48
1168: PPUSH
1169: LD_INT 5
1171: PPUSH
1172: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1176: LD_EXP 48
1180: PPUSH
1181: LD_INT 17
1183: PPUSH
1184: LD_INT 0
1186: PPUSH
1187: CALL_OW 49
// ComHold ( Mike ) ;
1191: LD_EXP 48
1195: PPUSH
1196: CALL_OW 140
// end ; if Olaf then
1200: LD_EXP 54
1204: IFFALSE 1245
// begin SetSide ( Olaf , 5 ) ;
1206: LD_EXP 54
1210: PPUSH
1211: LD_INT 5
1213: PPUSH
1214: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1218: LD_EXP 54
1222: PPUSH
1223: LD_INT 16
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1233: LD_EXP 54
1237: PPUSH
1238: LD_INT 3
1240: PPUSH
1241: CALL 71762 0 2
// end ; if Kamil then
1245: LD_EXP 50
1249: IFFALSE 1275
// begin SetSide ( Kamil , 5 ) ;
1251: LD_EXP 50
1255: PPUSH
1256: LD_INT 5
1258: PPUSH
1259: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1263: LD_EXP 50
1267: PPUSH
1268: LD_INT 109
1270: PPUSH
1271: CALL_OW 52
// end ; if Kurt then
1275: LD_EXP 55
1279: IFFALSE 1305
// begin SetSide ( Kurt , 5 ) ;
1281: LD_EXP 55
1285: PPUSH
1286: LD_INT 5
1288: PPUSH
1289: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1293: LD_EXP 55
1297: PPUSH
1298: LD_INT 169
1300: PPUSH
1301: CALL_OW 52
// end ; if Kaia then
1305: LD_EXP 51
1309: IFFALSE 1335
// begin SetSide ( Kaia , 5 ) ;
1311: LD_EXP 51
1315: PPUSH
1316: LD_INT 5
1318: PPUSH
1319: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1323: LD_EXP 51
1327: PPUSH
1328: LD_INT 147
1330: PPUSH
1331: CALL_OW 52
// end ; if Sophia then
1335: LD_EXP 52
1339: IFFALSE 1380
// begin SetSide ( Sophia , 5 ) ;
1341: LD_EXP 52
1345: PPUSH
1346: LD_INT 5
1348: PPUSH
1349: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1353: LD_EXP 52
1357: PPUSH
1358: LD_INT 142
1360: PPUSH
1361: LD_INT 96
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL_OW 48
// ComHold ( Sophia ) ;
1371: LD_EXP 52
1375: PPUSH
1376: CALL_OW 140
// end ; if Harris then
1380: LD_EXP 59
1384: IFFALSE 1422
// begin SetSide ( Harris , 4 ) ;
1386: LD_EXP 59
1390: PPUSH
1391: LD_INT 4
1393: PPUSH
1394: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1398: LD_EXP 59
1402: PPUSH
1403: LD_INT 20
1405: PPUSH
1406: LD_INT 0
1408: PPUSH
1409: CALL_OW 49
// ComHold ( i ) ;
1413: LD_VAR 0 2
1417: PPUSH
1418: CALL_OW 140
// end ; if Doug then
1422: LD_EXP 60
1426: IFFALSE 1452
// begin SetSide ( Doug , 4 ) ;
1428: LD_EXP 60
1432: PPUSH
1433: LD_INT 4
1435: PPUSH
1436: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1440: LD_EXP 60
1444: PPUSH
1445: LD_INT 106
1447: PPUSH
1448: CALL_OW 52
// end ; if Aviradze then
1452: LD_EXP 56
1456: IFFALSE 1482
// begin SetSide ( Aviradze , 5 ) ;
1458: LD_EXP 56
1462: PPUSH
1463: LD_INT 5
1465: PPUSH
1466: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1470: LD_EXP 56
1474: PPUSH
1475: LD_INT 119
1477: PPUSH
1478: CALL_OW 52
// end ; if Ibrahim then
1482: LD_EXP 49
1486: IFFALSE 1512
// begin SetSide ( Ibrahim , 5 ) ;
1488: LD_EXP 49
1492: PPUSH
1493: LD_INT 5
1495: PPUSH
1496: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1500: LD_EXP 49
1504: PPUSH
1505: LD_INT 119
1507: PPUSH
1508: CALL_OW 52
// end ; if Jerry then
1512: LD_EXP 61
1516: IFFALSE 1557
// begin SetSide ( Jerry , 4 ) ;
1518: LD_EXP 61
1522: PPUSH
1523: LD_INT 4
1525: PPUSH
1526: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1530: LD_EXP 61
1534: PPUSH
1535: LD_INT 119
1537: PPUSH
1538: LD_INT 59
1540: PPUSH
1541: LD_INT 0
1543: PPUSH
1544: CALL_OW 48
// ComHold ( Jerry ) ;
1548: LD_EXP 61
1552: PPUSH
1553: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1557: LD_EXP 65
1561: PPUSH
1562: LD_INT 119
1564: PPUSH
1565: CALL_OW 52
// for i in americanSquad do
1569: LD_ADDR_VAR 0 2
1573: PUSH
1574: LD_EXP 58
1578: PUSH
1579: FOR_IN
1580: IFFALSE 1608
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1582: LD_VAR 0 2
1586: PPUSH
1587: LD_INT 21
1589: PPUSH
1590: LD_INT 0
1592: PPUSH
1593: CALL_OW 49
// ComHold ( i ) ;
1597: LD_VAR 0 2
1601: PPUSH
1602: CALL_OW 140
// end ;
1606: GO 1579
1608: POP
1609: POP
// for i in heikeSecondSquad do
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: LD_EXP 57
1619: PUSH
1620: FOR_IN
1621: IFFALSE 1661
// begin SetSide ( i , 5 ) ;
1623: LD_VAR 0 2
1627: PPUSH
1628: LD_INT 5
1630: PPUSH
1631: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1635: LD_VAR 0 2
1639: PPUSH
1640: LD_INT 22
1642: PPUSH
1643: LD_INT 0
1645: PPUSH
1646: CALL_OW 49
// ComHold ( i ) ;
1650: LD_VAR 0 2
1654: PPUSH
1655: CALL_OW 140
// end ;
1659: GO 1620
1661: POP
1662: POP
// if not hasVodka then
1663: LD_EXP 4
1667: NOT
1668: IFFALSE 1727
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: LD_INT 22
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 22
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: LIST
1702: PPUSH
1703: CALL_OW 69
1707: PUSH
1708: FOR_IN
1709: IFFALSE 1725
// SetLives ( i , 500 ) ;
1711: LD_VAR 0 2
1715: PPUSH
1716: LD_INT 500
1718: PPUSH
1719: CALL_OW 234
1723: GO 1708
1725: POP
1726: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1727: LD_ADDR_VAR 0 2
1731: PUSH
1732: LD_INT 22
1734: PUSH
1735: LD_INT 4
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PPUSH
1742: CALL_OW 69
1746: PUSH
1747: FOR_IN
1748: IFFALSE 1764
// SetLives ( i , 500 ) ;
1750: LD_VAR 0 2
1754: PPUSH
1755: LD_INT 500
1757: PPUSH
1758: CALL_OW 234
1762: GO 1747
1764: POP
1765: POP
// end ;
1766: LD_VAR 0 1
1770: RET
// export function SetClassKaiaRevolver ; begin
1771: LD_INT 0
1773: PPUSH
// if not IsOk ( Kaia ) then
1774: LD_EXP 51
1778: PPUSH
1779: CALL_OW 302
1783: NOT
1784: IFFALSE 1788
// exit ;
1786: GO 1835
// repeat wait ( 1 ) ;
1788: LD_INT 1
1790: PPUSH
1791: CALL_OW 67
// ComWalk ( Kaia ) ;
1795: LD_EXP 51
1799: PPUSH
1800: CALL_OW 138
// until not Crawls ( Kaia ) ;
1804: LD_EXP 51
1808: PPUSH
1809: CALL_OW 318
1813: NOT
1814: IFFALSE 1788
// SetClass ( Kaia , class_revolver ) ;
1816: LD_EXP 51
1820: PPUSH
1821: LD_INT 34
1823: PPUSH
1824: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1828: LD_STRING ACH_REVOLVER
1830: PPUSH
1831: CALL_OW 543
// end ;
1835: LD_VAR 0 1
1839: RET
// export function SpawnHeikeAsRussian ; begin
1840: LD_INT 0
1842: PPUSH
// RemoveUnit ( Heike ) ;
1843: LD_EXP 46
1847: PPUSH
1848: CALL_OW 64
// heikeTmp := Heike ;
1852: LD_ADDR_EXP 62
1856: PUSH
1857: LD_EXP 46
1861: ST_TO_ADDR
// uc_side := 2 ;
1862: LD_ADDR_OWVAR 20
1866: PUSH
1867: LD_INT 2
1869: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1870: LD_ADDR_EXP 46
1874: PUSH
1875: LD_STRING HeikeRu
1877: PPUSH
1878: CALL_OW 25
1882: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1883: LD_EXP 62
1887: PPUSH
1888: LD_EXP 46
1892: PPUSH
1893: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1897: LD_EXP 46
1901: PPUSH
1902: LD_INT 165
1904: PPUSH
1905: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1909: LD_EXP 46
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: CALL_OW 336
// heikeAsRussian := true ;
1921: LD_ADDR_EXP 27
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1929: LD_STRING M1-laundry-out
1931: PPUSH
1932: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1936: LD_STRING ACH_HEIKERU
1938: PPUSH
1939: CALL_OW 543
// end ;
1943: LD_VAR 0 1
1947: RET
// export function SpawnGiviAsRussian ; begin
1948: LD_INT 0
1950: PPUSH
// RemoveUnit ( Givi ) ;
1951: LD_EXP 47
1955: PPUSH
1956: CALL_OW 64
// giviTmp := Givi ;
1960: LD_ADDR_EXP 63
1964: PUSH
1965: LD_EXP 47
1969: ST_TO_ADDR
// uc_side := 2 ;
1970: LD_ADDR_OWVAR 20
1974: PUSH
1975: LD_INT 2
1977: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1978: LD_ADDR_EXP 47
1982: PUSH
1983: LD_STRING GiviRu
1985: PPUSH
1986: CALL_OW 25
1990: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1991: LD_EXP 63
1995: PPUSH
1996: LD_EXP 47
2000: PPUSH
2001: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
2005: LD_EXP 47
2009: PPUSH
2010: LD_INT 165
2012: PPUSH
2013: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
2017: LD_EXP 47
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL_OW 336
// giviAsRussian := true ;
2029: LD_ADDR_EXP 28
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
2037: LD_STRING M1-laundry-out
2039: PPUSH
2040: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2044: LD_STRING ACH_GIVIRU
2046: PPUSH
2047: CALL_OW 543
// end ; end_of_file
2051: LD_VAR 0 1
2055: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2056: LD_INT 0
2058: PPUSH
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
// uc_side := 3 ;
2063: LD_ADDR_OWVAR 20
2067: PUSH
2068: LD_INT 3
2070: ST_TO_ADDR
// uc_nation := 3 ;
2071: LD_ADDR_OWVAR 21
2075: PUSH
2076: LD_INT 3
2078: ST_TO_ADDR
// SetBName ( ruMainBase , yagoda ) ;
2079: LD_INT 2
2081: PPUSH
2082: LD_STRING yagoda
2084: PPUSH
2085: CALL_OW 500
// SetBName ( ruKitchen , kitchen ) ;
2089: LD_INT 192
2091: PPUSH
2092: LD_STRING kitchen
2094: PPUSH
2095: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2099: LD_INT 165
2101: PPUSH
2102: LD_STRING laundry
2104: PPUSH
2105: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2109: LD_INT 54
2111: PPUSH
2112: LD_STRING adminSection
2114: PPUSH
2115: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2119: LD_ADDR_VAR 0 2
2123: PUSH
2124: LD_INT 21
2126: PUSH
2127: LD_INT 3
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PPUSH
2134: CALL_OW 69
2138: PUSH
2139: FOR_IN
2140: IFFALSE 2156
// SetBLevel ( i , 7 ) ;
2142: LD_VAR 0 2
2146: PPUSH
2147: LD_INT 7
2149: PPUSH
2150: CALL_OW 241
2154: GO 2139
2156: POP
2157: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: LD_INT 22
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 2
2175: PUSH
2176: LD_INT 30
2178: PUSH
2179: LD_INT 0
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 30
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PPUSH
2205: CALL_OW 69
2209: PUSH
2210: FOR_IN
2211: IFFALSE 2275
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2213: LD_VAR 0 2
2217: PPUSH
2218: CALL_OW 274
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: LD_INT 1000
2228: PPUSH
2229: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2233: LD_VAR 0 2
2237: PPUSH
2238: CALL_OW 274
2242: PPUSH
2243: LD_INT 2
2245: PPUSH
2246: LD_INT 1000
2248: PPUSH
2249: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2253: LD_VAR 0 2
2257: PPUSH
2258: CALL_OW 274
2262: PPUSH
2263: LD_INT 3
2265: PPUSH
2266: LD_INT 100
2268: PPUSH
2269: CALL_OW 277
// end ;
2273: GO 2210
2275: POP
2276: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 22
2284: PUSH
2285: LD_INT 3
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 30
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PPUSH
2306: CALL_OW 69
2310: PUSH
2311: FOR_IN
2312: IFFALSE 2346
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2314: LD_INT 0
2316: PPUSH
2317: LD_INT 5
2319: PUSH
2320: LD_OWVAR 67
2324: PLUS
2325: PPUSH
2326: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2330: CALL_OW 44
2334: PPUSH
2335: LD_VAR 0 2
2339: PPUSH
2340: CALL_OW 52
// end ;
2344: GO 2311
2346: POP
2347: POP
// for i := 1 to 2 do
2348: LD_ADDR_VAR 0 2
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_INT 2
2360: PUSH
2361: FOR_TO
2362: IFFALSE 2414
// begin PrepareMechanic ( false , 8 ) ;
2364: LD_INT 0
2366: PPUSH
2367: LD_INT 8
2369: PPUSH
2370: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2374: LD_ADDR_EXP 67
2378: PUSH
2379: LD_EXP 67
2383: PPUSH
2384: CALL_OW 44
2388: PPUSH
2389: CALL 68440 0 2
2393: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2394: LD_EXP 67
2398: PUSH
2399: LD_EXP 67
2403: ARRAY
2404: PPUSH
2405: LD_INT 61
2407: PPUSH
2408: CALL_OW 52
// end ;
2412: GO 2361
2414: POP
2415: POP
// PrepareMechanic ( sex_male , 8 ) ;
2416: LD_INT 1
2418: PPUSH
2419: LD_INT 8
2421: PPUSH
2422: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2426: LD_ADDR_EXP 68
2430: PUSH
2431: LD_EXP 68
2435: PPUSH
2436: CALL_OW 44
2440: PPUSH
2441: CALL 68440 0 2
2445: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2446: LD_EXP 68
2450: PUSH
2451: LD_EXP 68
2455: ARRAY
2456: PPUSH
2457: LD_INT 196
2459: PPUSH
2460: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2464: LD_INT 1
2466: PPUSH
2467: LD_INT 8
2469: PPUSH
2470: CALL_OW 383
// hc_name := Stiepan Simonov ;
2474: LD_ADDR_OWVAR 26
2478: PUSH
2479: LD_STRING Stiepan Simonov
2481: ST_TO_ADDR
// Stiopa := CreateHuman ;
2482: LD_ADDR_EXP 69
2486: PUSH
2487: CALL_OW 44
2491: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2492: LD_INT 2
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 383
// hc_name := Laura Dragunov ;
2502: LD_ADDR_OWVAR 26
2506: PUSH
2507: LD_STRING Laura Dragunov
2509: ST_TO_ADDR
// Laura := CreateHuman ;
2510: LD_ADDR_EXP 70
2514: PUSH
2515: CALL_OW 44
2519: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2520: LD_EXP 70
2524: PPUSH
2525: LD_INT 196
2527: PPUSH
2528: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2532: LD_INT 1
2534: PPUSH
2535: LD_INT 8
2537: PPUSH
2538: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2542: LD_ADDR_EXP 67
2546: PUSH
2547: LD_EXP 67
2551: PPUSH
2552: LD_INT 1
2554: PPUSH
2555: CALL_OW 44
2559: PPUSH
2560: CALL_OW 2
2564: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2565: LD_EXP 67
2569: PUSH
2570: LD_INT 1
2572: ARRAY
2573: PPUSH
2574: LD_INT 61
2576: PPUSH
2577: CALL_OW 52
// hc_sex := sex_male ;
2581: LD_ADDR_OWVAR 27
2585: PUSH
2586: LD_INT 1
2588: ST_TO_ADDR
// hc_name := Muchin ;
2589: LD_ADDR_OWVAR 26
2593: PUSH
2594: LD_STRING Muchin
2596: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2597: LD_ADDR_OWVAR 33
2601: PUSH
2602: LD_STRING SecondCharsGal
2604: ST_TO_ADDR
// hc_face_number := 87 ;
2605: LD_ADDR_OWVAR 34
2609: PUSH
2610: LD_INT 87
2612: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 2 , 6 ] ;
2613: LD_ADDR_OWVAR 31
2617: PUSH
2618: LD_INT 8
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_INT 2
2626: PUSH
2627: LD_INT 6
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2636: LD_ADDR_OWVAR 29
2640: PUSH
2641: LD_INT 13
2643: PUSH
2644: LD_INT 13
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: ST_TO_ADDR
// hc_class := class_soldier ;
2651: LD_ADDR_OWVAR 28
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2659: LD_ADDR_EXP 66
2663: PUSH
2664: CALL_OW 44
2668: ST_TO_ADDR
// InitHC_All ( ) ;
2669: CALL_OW 584
// if Difficulty > 1 then
2673: LD_OWVAR 67
2677: PUSH
2678: LD_INT 1
2680: GREATER
2681: IFFALSE 2801
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2683: LD_ADDR_VAR 0 2
2687: PUSH
2688: DOUBLE
2689: LD_INT 1
2691: DEC
2692: ST_TO_ADDR
2693: LD_INT 3
2695: PUSH
2696: LD_INT 4
2698: PUSH
2699: LD_INT 5
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PUSH
2707: LD_OWVAR 67
2711: PUSH
2712: LD_INT 1
2714: PLUS
2715: ARRAY
2716: PUSH
2717: FOR_TO
2718: IFFALSE 2799
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2720: LD_INT 0
2722: PPUSH
2723: LD_INT 5
2725: PUSH
2726: LD_INT 6
2728: PUSH
2729: LD_INT 7
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: LIST
2736: PUSH
2737: LD_OWVAR 67
2741: PUSH
2742: LD_INT 1
2744: PLUS
2745: ARRAY
2746: PPUSH
2747: CALL_OW 381
// un := CreateHuman ;
2751: LD_ADDR_VAR 0 4
2755: PUSH
2756: CALL_OW 44
2760: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2761: LD_VAR 0 4
2765: PPUSH
2766: LD_INT 62
2768: PUSH
2769: LD_INT 63
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_VAR 0 2
2780: PUSH
2781: LD_INT 2
2783: MOD
2784: PUSH
2785: LD_INT 1
2787: PLUS
2788: ARRAY
2789: PPUSH
2790: LD_INT 0
2792: PPUSH
2793: CALL_OW 49
// end ;
2797: GO 2717
2799: POP
2800: POP
// end ; uc_side := 6 ;
2801: LD_ADDR_OWVAR 20
2805: PUSH
2806: LD_INT 6
2808: ST_TO_ADDR
// uc_nation := 3 ;
2809: LD_ADDR_OWVAR 21
2813: PUSH
2814: LD_INT 3
2816: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2817: LD_ADDR_VAR 0 5
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: LD_INT 15
2827: PUSH
2828: LD_INT 48
2830: PUSH
2831: LD_INT 24
2833: PUSH
2834: LD_INT 149
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: LIST
2843: ST_TO_ADDR
// for i in tmp do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: LD_VAR 0 5
2853: PUSH
2854: FOR_IN
2855: IFFALSE 2903
// begin for j := 1 to 2 do
2857: LD_ADDR_VAR 0 3
2861: PUSH
2862: DOUBLE
2863: LD_INT 1
2865: DEC
2866: ST_TO_ADDR
2867: LD_INT 2
2869: PUSH
2870: FOR_TO
2871: IFFALSE 2899
// begin PrepareSoldier ( false , 7 ) ;
2873: LD_INT 0
2875: PPUSH
2876: LD_INT 7
2878: PPUSH
2879: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2883: CALL_OW 44
2887: PPUSH
2888: LD_VAR 0 2
2892: PPUSH
2893: CALL_OW 52
// end ;
2897: GO 2870
2899: POP
2900: POP
// end ;
2901: GO 2854
2903: POP
2904: POP
// end ;
2905: LD_VAR 0 1
2909: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2910: LD_INT 0
2912: PPUSH
2913: PPUSH
2914: PPUSH
2915: PPUSH
// uc_side := 3 ;
2916: LD_ADDR_OWVAR 20
2920: PUSH
2921: LD_INT 3
2923: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2924: LD_ADDR_OWVAR 21
2928: PUSH
2929: LD_INT 1
2931: PPUSH
2932: LD_INT 3
2934: PPUSH
2935: CALL_OW 12
2939: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2940: LD_ADDR_VAR 0 4
2944: PUSH
2945: LD_INT 5
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 517
2955: ST_TO_ADDR
// for i := 1 to 3 do
2956: LD_ADDR_VAR 0 2
2960: PUSH
2961: DOUBLE
2962: LD_INT 1
2964: DEC
2965: ST_TO_ADDR
2966: LD_INT 3
2968: PUSH
2969: FOR_TO
2970: IFFALSE 3039
// begin PrepareHuman ( false , class_prison , 0 ) ;
2972: LD_INT 0
2974: PPUSH
2975: LD_INT 33
2977: PPUSH
2978: LD_INT 0
2980: PPUSH
2981: CALL_OW 380
// un := CreateHuman ;
2985: LD_ADDR_VAR 0 3
2989: PUSH
2990: CALL_OW 44
2994: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2995: LD_VAR 0 3
2999: PPUSH
3000: LD_VAR 0 4
3004: PUSH
3005: LD_INT 1
3007: ARRAY
3008: PUSH
3009: LD_VAR 0 2
3013: ARRAY
3014: PPUSH
3015: LD_VAR 0 4
3019: PUSH
3020: LD_INT 2
3022: ARRAY
3023: PUSH
3024: LD_VAR 0 2
3028: ARRAY
3029: PPUSH
3030: LD_INT 1
3032: PPUSH
3033: CALL_OW 601
// end ;
3037: GO 2969
3039: POP
3040: POP
// end ;
3041: LD_VAR 0 1
3045: RET
// export function PrepareFirstScene ; var i , un ; begin
3046: LD_INT 0
3048: PPUSH
3049: PPUSH
3050: PPUSH
// uc_side := 4 ;
3051: LD_ADDR_OWVAR 20
3055: PUSH
3056: LD_INT 4
3058: ST_TO_ADDR
// uc_nation := 1 ;
3059: LD_ADDR_OWVAR 21
3063: PUSH
3064: LD_INT 1
3066: ST_TO_ADDR
// PrepareHuman ( false , class_prison , 0 ) ;
3067: LD_INT 0
3069: PPUSH
3070: LD_INT 33
3072: PPUSH
3073: LD_INT 0
3075: PPUSH
3076: CALL_OW 380
// for i := 1 to 2 do
3080: LD_ADDR_VAR 0 2
3084: PUSH
3085: DOUBLE
3086: LD_INT 1
3088: DEC
3089: ST_TO_ADDR
3090: LD_INT 2
3092: PUSH
3093: FOR_TO
3094: IFFALSE 3159
// begin un := CreateHuman ;
3096: LD_ADDR_VAR 0 3
3100: PUSH
3101: CALL_OW 44
3105: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_INT 1
3113: PPUSH
3114: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3118: LD_VAR 0 3
3122: PPUSH
3123: LD_INT 6
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3133: LD_VAR 0 3
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: CALL 71762 0 2
// SetLives ( un , 300 ) ;
3145: LD_VAR 0 3
3149: PPUSH
3150: LD_INT 300
3152: PPUSH
3153: CALL_OW 234
// end ;
3157: GO 3093
3159: POP
3160: POP
// uc_side := 3 ;
3161: LD_ADDR_OWVAR 20
3165: PUSH
3166: LD_INT 3
3168: ST_TO_ADDR
// uc_nation := 3 ;
3169: LD_ADDR_OWVAR 21
3173: PUSH
3174: LD_INT 3
3176: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3177: LD_INT 1
3179: PPUSH
3180: LD_INT 5
3182: PPUSH
3183: CALL_OW 381
// for i := 1 to 3 do
3187: LD_ADDR_VAR 0 2
3191: PUSH
3192: DOUBLE
3193: LD_INT 1
3195: DEC
3196: ST_TO_ADDR
3197: LD_INT 3
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3274
// begin un := CreateHuman ;
3203: LD_ADDR_VAR 0 3
3207: PUSH
3208: CALL_OW 44
3212: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3213: LD_ADDR_EXP 64
3217: PUSH
3218: LD_EXP 64
3222: PPUSH
3223: LD_VAR 0 3
3227: PPUSH
3228: CALL 68440 0 2
3232: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3233: LD_VAR 0 3
3237: PPUSH
3238: LD_INT 4
3240: PPUSH
3241: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3245: LD_VAR 0 3
3249: PPUSH
3250: LD_INT 7
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3260: LD_VAR 0 3
3264: PPUSH
3265: LD_INT 4
3267: PPUSH
3268: CALL 71762 0 2
// end ;
3272: GO 3200
3274: POP
3275: POP
// ruCommisar := CreateHuman ;
3276: LD_ADDR_EXP 65
3280: PUSH
3281: CALL_OW 44
3285: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3286: LD_EXP 65
3290: PPUSH
3291: LD_INT 124
3293: PPUSH
3294: LD_INT 37
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3304: LD_EXP 65
3308: PPUSH
3309: LD_INT 3
3311: PPUSH
3312: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3316: LD_EXP 65
3320: PPUSH
3321: LD_INT 3
3323: PPUSH
3324: CALL 71762 0 2
// end ;
3328: LD_VAR 0 1
3332: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
// uc_side := 6 ;
3339: LD_ADDR_OWVAR 20
3343: PUSH
3344: LD_INT 6
3346: ST_TO_ADDR
// uc_nation := 3 ;
3347: LD_ADDR_OWVAR 21
3351: PUSH
3352: LD_INT 3
3354: ST_TO_ADDR
// ruPatrol := [ ] ;
3355: LD_ADDR_EXP 71
3359: PUSH
3360: EMPTY
3361: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3362: LD_ADDR_VAR 0 4
3366: PUSH
3367: LD_INT 26
3369: PUSH
3370: LD_INT 30
3372: PUSH
3373: LD_INT 39
3375: PUSH
3376: LD_INT 43
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: ST_TO_ADDR
// for i := 1 to spawn do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: DOUBLE
3391: LD_INT 1
3393: DEC
3394: ST_TO_ADDR
3395: LD_VAR 0 4
3399: PUSH
3400: FOR_TO
3401: IFFALSE 3512
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3403: LD_INT 0
3405: PPUSH
3406: LD_INT 4
3408: PUSH
3409: LD_INT 5
3411: PUSH
3412: LD_INT 6
3414: PUSH
3415: LD_INT 7
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: PUSH
3424: LD_OWVAR 67
3428: ARRAY
3429: PPUSH
3430: CALL_OW 381
// un := CreateHuman ;
3434: LD_ADDR_VAR 0 3
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// SetTag ( un , i ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_VAR 0 2
3453: PPUSH
3454: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3458: LD_ADDR_EXP 71
3462: PUSH
3463: LD_EXP 71
3467: PPUSH
3468: LD_VAR 0 3
3472: PPUSH
3473: CALL 68440 0 2
3477: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_VAR 0 4
3487: PUSH
3488: LD_VAR 0 2
3492: ARRAY
3493: PPUSH
3494: LD_INT 0
3496: PPUSH
3497: CALL_OW 49
// ComHold ( un ) ;
3501: LD_VAR 0 3
3505: PPUSH
3506: CALL_OW 140
// end ;
3510: GO 3400
3512: POP
3513: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3514: LD_ADDR_VAR 0 4
3518: PUSH
3519: LD_INT 48
3521: PUSH
3522: LD_INT 49
3524: PUSH
3525: LD_INT 50
3527: PUSH
3528: LD_INT 51
3530: PUSH
3531: LD_INT 52
3533: PUSH
3534: LD_INT 53
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: ST_TO_ADDR
// for i := 1 to spawn do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_VAR 0 4
3559: PUSH
3560: FOR_TO
3561: IFFALSE 3670
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3563: LD_INT 0
3565: PPUSH
3566: LD_INT 4
3568: PUSH
3569: LD_INT 5
3571: PUSH
3572: LD_INT 6
3574: PUSH
3575: LD_INT 7
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: PUSH
3584: LD_OWVAR 67
3588: ARRAY
3589: PPUSH
3590: CALL_OW 381
// un := CreateHuman ;
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: CALL_OW 44
3603: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3604: LD_VAR 0 3
3608: PPUSH
3609: LD_INT 0
3611: PPUSH
3612: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3616: LD_ADDR_EXP 71
3620: PUSH
3621: LD_EXP 71
3625: PPUSH
3626: LD_VAR 0 3
3630: PPUSH
3631: CALL 68440 0 2
3635: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3636: LD_VAR 0 3
3640: PPUSH
3641: LD_VAR 0 4
3645: PUSH
3646: LD_VAR 0 2
3650: ARRAY
3651: PPUSH
3652: LD_INT 0
3654: PPUSH
3655: CALL_OW 49
// ComHold ( un ) ;
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 140
// end ;
3668: GO 3560
3670: POP
3671: POP
// end ;
3672: LD_VAR 0 1
3676: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3677: LD_INT 0
3679: PPUSH
3680: PPUSH
3681: PPUSH
3682: PPUSH
// uc_side := 6 ;
3683: LD_ADDR_OWVAR 20
3687: PUSH
3688: LD_INT 6
3690: ST_TO_ADDR
// uc_nation := nation_russian ;
3691: LD_ADDR_OWVAR 21
3695: PUSH
3696: LD_INT 3
3698: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3699: LD_ADDR_VAR 0 4
3703: PUSH
3704: LD_INT 54
3706: PUSH
3707: LD_INT 55
3709: PUSH
3710: LD_INT 56
3712: PUSH
3713: LD_INT 57
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: ST_TO_ADDR
// for i := 1 to spawn do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 3847
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3740: LD_INT 0
3742: PPUSH
3743: LD_INT 4
3745: PUSH
3746: LD_INT 5
3748: PUSH
3749: LD_INT 6
3751: PUSH
3752: LD_INT 7
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: PUSH
3761: LD_OWVAR 67
3765: ARRAY
3766: PPUSH
3767: CALL_OW 381
// un := CreateHuman ;
3771: LD_ADDR_VAR 0 3
3775: PUSH
3776: CALL_OW 44
3780: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3781: LD_VAR 0 3
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3793: LD_ADDR_EXP 71
3797: PUSH
3798: LD_EXP 71
3802: PPUSH
3803: LD_VAR 0 3
3807: PPUSH
3808: CALL 68440 0 2
3812: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3813: LD_VAR 0 3
3817: PPUSH
3818: LD_VAR 0 4
3822: PUSH
3823: LD_VAR 0 2
3827: ARRAY
3828: PPUSH
3829: LD_INT 0
3831: PPUSH
3832: CALL_OW 49
// ComHold ( un ) ;
3836: LD_VAR 0 3
3840: PPUSH
3841: CALL_OW 140
// end ;
3845: GO 3737
3847: POP
3848: POP
// end ; end_of_file
3849: LD_VAR 0 1
3853: RET
// export function Action ; var speaker , i , tmp ; begin
3854: LD_INT 0
3856: PPUSH
3857: PPUSH
3858: PPUSH
3859: PPUSH
// Video ( true ) ;
3860: LD_INT 1
3862: PPUSH
3863: CALL 68412 0 1
// hasNormalScene := Kaia or Givi ;
3867: LD_ADDR_EXP 5
3871: PUSH
3872: LD_EXP 51
3876: IFTRUE 3884
3878: PUSH
3879: LD_EXP 47
3883: OR
3884: ST_TO_ADDR
// if hasNormalScene then
3885: LD_EXP 5
3889: IFFALSE 4130
// begin for i in americanSquad do
3891: LD_ADDR_VAR 0 3
3895: PUSH
3896: LD_EXP 58
3900: PUSH
3901: FOR_IN
3902: IFFALSE 3948
// begin SetClass ( i , class_prison ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 33
3911: PPUSH
3912: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_INT 78
3923: PPUSH
3924: LD_INT 16
3926: PPUSH
3927: LD_INT 5
3929: PPUSH
3930: LD_INT 0
3932: PPUSH
3933: CALL_OW 50
// ComHold ( i ) ;
3937: LD_VAR 0 3
3941: PPUSH
3942: CALL_OW 140
// end ;
3946: GO 3901
3948: POP
3949: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3950: LD_ADDR_VAR 0 4
3954: PUSH
3955: LD_EXP 48
3959: PUSH
3960: LD_EXP 49
3964: PUSH
3965: LD_EXP 50
3969: PUSH
3970: LD_EXP 51
3974: PUSH
3975: LD_EXP 52
3979: PUSH
3980: LD_EXP 53
3984: PUSH
3985: LD_EXP 54
3989: PUSH
3990: LD_EXP 55
3994: PUSH
3995: LD_EXP 47
3999: PUSH
4000: LD_EXP 56
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: PUSH
4017: LD_EXP 57
4021: UNION
4022: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
4023: LD_EXP 46
4027: PPUSH
4028: LD_INT 33
4030: PPUSH
4031: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
4035: LD_EXP 46
4039: PPUSH
4040: LD_INT 117
4042: PPUSH
4043: LD_INT 24
4045: PPUSH
4046: LD_INT 3
4048: PPUSH
4049: LD_INT 0
4051: PPUSH
4052: CALL 70600 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
4056: LD_EXP 46
4060: PPUSH
4061: LD_INT 123
4063: PPUSH
4064: LD_INT 39
4066: PPUSH
4067: CALL_OW 118
// for i in tmp do
4071: LD_ADDR_VAR 0 3
4075: PUSH
4076: LD_VAR 0 4
4080: PUSH
4081: FOR_IN
4082: IFFALSE 4128
// begin SetClass ( i , class_prison ) ;
4084: LD_VAR 0 3
4088: PPUSH
4089: LD_INT 33
4091: PPUSH
4092: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4096: LD_VAR 0 3
4100: PPUSH
4101: LD_INT 3
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4111: LD_VAR 0 3
4115: PPUSH
4116: LD_INT 113
4118: PPUSH
4119: LD_INT 16
4121: PPUSH
4122: CALL_OW 118
// end ;
4126: GO 4081
4128: POP
4129: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4130: LD_INT 124
4132: PPUSH
4133: LD_INT 39
4135: PPUSH
4136: CALL_OW 86
// PrepareDeadBodies ;
4140: CALL 2910 0 0
// PrepareFirstScene ;
4144: CALL 3046 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4148: LD_INT 152
4150: PPUSH
4151: LD_INT 65
4153: PPUSH
4154: LD_INT 2
4156: PPUSH
4157: LD_INT 70
4159: NEG
4160: PPUSH
4161: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4165: LD_INT 152
4167: PPUSH
4168: LD_INT 65
4170: PPUSH
4171: LD_INT 2
4173: PPUSH
4174: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4178: LD_INT 122
4180: PPUSH
4181: LD_INT 40
4183: PPUSH
4184: LD_INT 2
4186: PPUSH
4187: LD_INT 8
4189: NEG
4190: PPUSH
4191: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4195: LD_INT 124
4197: PPUSH
4198: LD_INT 37
4200: PPUSH
4201: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4205: LD_EXP 65
4209: PPUSH
4210: LD_STRING DRum-Execution-1
4212: PPUSH
4213: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4217: LD_EXP 65
4221: PPUSH
4222: LD_STRING DRum-Execution-2
4224: PPUSH
4225: CALL_OW 88
// wait ( 0 0$01 ) ;
4229: LD_INT 35
4231: PPUSH
4232: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4236: LD_EXP 65
4240: PPUSH
4241: LD_STRING DRum-Execution-3
4243: PPUSH
4244: CALL_OW 88
// wait ( 0 0$1 ) ;
4248: LD_INT 35
4250: PPUSH
4251: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4255: LD_EXP 65
4259: PPUSH
4260: LD_STRING DRum-Execution-4
4262: PPUSH
4263: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4267: LD_EXP 64
4271: PUSH
4272: LD_INT 1
4274: ARRAY
4275: PPUSH
4276: LD_INT 122
4278: PPUSH
4279: LD_INT 39
4281: PPUSH
4282: CALL_OW 428
4286: PPUSH
4287: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4291: LD_EXP 64
4295: PUSH
4296: LD_INT 2
4298: ARRAY
4299: PPUSH
4300: LD_INT 123
4302: PPUSH
4303: LD_INT 41
4305: PPUSH
4306: CALL_OW 428
4310: PPUSH
4311: CALL_OW 115
// AddComHold ( russianKillers ) ;
4315: LD_EXP 64
4319: PPUSH
4320: CALL_OW 200
// wait ( 0 0$1 ) ;
4324: LD_INT 35
4326: PPUSH
4327: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4331: LD_INT 122
4333: PPUSH
4334: LD_INT 40
4336: PPUSH
4337: LD_INT 2
4339: PPUSH
4340: CALL_OW 331
// for i in russianKillers union ruCommisar do
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: LD_EXP 64
4353: PUSH
4354: LD_EXP 65
4358: UNION
4359: PUSH
4360: FOR_IN
4361: IFFALSE 4374
// RemoveUnit ( i ) ;
4363: LD_VAR 0 3
4367: PPUSH
4368: CALL_OW 64
4372: GO 4360
4374: POP
4375: POP
// if hasNormalScene then
4376: LD_EXP 5
4380: IFFALSE 4388
// ActionNormal else
4382: CALL 4397 0 0
4386: GO 4392
// ActionAdditional ;
4388: CALL 6223 0 0
// end ;
4392: LD_VAR 0 1
4396: RET
// function ActionNormal ; var i , tmp ; begin
4397: LD_INT 0
4399: PPUSH
4400: PPUSH
4401: PPUSH
// CenterNowOnUnits ( Heike ) ;
4402: LD_EXP 46
4406: PPUSH
4407: CALL_OW 87
// wait ( 0 0$1 ) ;
4411: LD_INT 35
4413: PPUSH
4414: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4418: LD_EXP 46
4422: PPUSH
4423: LD_INT 115
4425: PPUSH
4426: LD_INT 19
4428: PPUSH
4429: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4433: LD_EXP 46
4437: PPUSH
4438: LD_INT 113
4440: PPUSH
4441: LD_INT 16
4443: PPUSH
4444: CALL_OW 178
// wait ( 0 0$2 ) ;
4448: LD_INT 70
4450: PPUSH
4451: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4455: LD_EXP 46
4459: PPUSH
4460: LD_STRING DH-Conspiracy-1
4462: PPUSH
4463: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4467: LD_EXP 51
4471: PPUSH
4472: LD_STRING DK-Conspiracy-2
4474: PPUSH
4475: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4479: LD_EXP 47
4483: PPUSH
4484: LD_STRING DG-Conspiracy-3
4486: PPUSH
4487: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4491: LD_EXP 47
4495: PPUSH
4496: LD_STRING DG-Conspiracy-4
4498: PPUSH
4499: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4503: LD_EXP 46
4507: PPUSH
4508: LD_STRING DH-Conspiracy-5
4510: PPUSH
4511: CALL_OW 88
// if IsOk ( Kamil ) then
4515: LD_EXP 50
4519: PPUSH
4520: CALL_OW 302
4524: IFFALSE 4582
// begin hasVodka := true ;
4526: LD_ADDR_EXP 4
4530: PUSH
4531: LD_INT 1
4533: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4534: LD_EXP 50
4538: PPUSH
4539: LD_STRING DKam-Conspiracy-6
4541: PPUSH
4542: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4546: LD_EXP 50
4550: PPUSH
4551: LD_STRING DKam-Conspiracy-7
4553: PPUSH
4554: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4558: LD_EXP 50
4562: PPUSH
4563: LD_STRING DKam-Conspiracy-8
4565: PPUSH
4566: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4570: LD_EXP 50
4574: PPUSH
4575: LD_STRING DKam-Conspiracy-9
4577: PPUSH
4578: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4582: LD_EXP 52
4586: PPUSH
4587: CALL_OW 302
4591: IFFALSE 4772
// begin americanContact := true ;
4593: LD_ADDR_EXP 10
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4601: LD_STRING M1-american
4603: PPUSH
4604: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4608: LD_EXP 52
4612: PPUSH
4613: LD_STRING DS-Conspiracy-10
4615: PPUSH
4616: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-11 ) ;
4620: LD_EXP 53
4624: PPUSH
4625: LD_STRING DMar-Conspiracy-11
4627: PPUSH
4628: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4632: LD_EXP 52
4636: PPUSH
4637: LD_STRING DS-Conspiracy-12
4639: PPUSH
4640: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4644: LD_INT 84
4646: PPUSH
4647: LD_INT 19
4649: PPUSH
4650: LD_INT 105
4652: PPUSH
4653: CALL 20771 0 3
// if johnnySaved then
4657: LD_EXP 3
4661: IFFALSE 4701
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4663: LD_EXP 52
4667: PPUSH
4668: LD_STRING DS-Conspiracy-13
4670: PPUSH
4671: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4675: LD_EXP 46
4679: PPUSH
4680: LD_STRING DH-Conspiracy-14
4682: PPUSH
4683: CALL_OW 88
// Say ( Heike , DH-Conspiracy-15 ) ;
4687: LD_EXP 46
4691: PPUSH
4692: LD_STRING DH-Conspiracy-15
4694: PPUSH
4695: CALL_OW 88
// end else
4699: GO 4737
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4701: LD_EXP 52
4705: PPUSH
4706: LD_STRING DS-Conspiracy-a-13
4708: PPUSH
4709: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4713: LD_EXP 46
4717: PPUSH
4718: LD_STRING DH-Conspiracy-a-14
4720: PPUSH
4721: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4725: LD_EXP 46
4729: PPUSH
4730: LD_STRING DH-Conspiracy-a-15
4732: PPUSH
4733: CALL_OW 88
// end ; if IsOk ( Givi ) then
4737: LD_EXP 47
4741: PPUSH
4742: CALL_OW 302
4746: IFFALSE 4772
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4748: LD_EXP 47
4752: PPUSH
4753: LD_STRING DG-Conspiracy-a-16
4755: PPUSH
4756: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4760: LD_EXP 46
4764: PPUSH
4765: LD_STRING DH-Conspiracy-a-17
4767: PPUSH
4768: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4772: LD_EXP 46
4776: PPUSH
4777: LD_STRING DH-Conspiracy-16
4779: PPUSH
4780: CALL_OW 88
// if IsOk ( Givi ) then
4784: LD_EXP 47
4788: PPUSH
4789: CALL_OW 302
4793: IFFALSE 5065
// begin hasStimDrugs := true ;
4795: LD_ADDR_EXP 9
4799: PUSH
4800: LD_INT 1
4802: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4803: LD_STRING M1-drugs
4805: PPUSH
4806: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4810: LD_EXP 47
4814: PPUSH
4815: LD_STRING DG-Conspiracy-17
4817: PPUSH
4818: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4822: LD_INT 162
4824: PPUSH
4825: LD_INT 2
4827: PPUSH
4828: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4832: LD_INT 194
4834: PPUSH
4835: LD_INT 98
4837: PPUSH
4838: LD_INT 105
4840: PPUSH
4841: CALL 20771 0 3
// SetSide ( drugsLab , 3 ) ;
4845: LD_INT 162
4847: PPUSH
4848: LD_INT 3
4850: PPUSH
4851: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4855: LD_EXP 47
4859: PPUSH
4860: LD_STRING DG-Conspiracy-18
4862: PPUSH
4863: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4867: LD_EXP 47
4871: PPUSH
4872: LD_STRING DG-Conspiracy-19
4874: PPUSH
4875: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4879: LD_EXP 47
4883: PPUSH
4884: LD_STRING DG-Conspiracy-20
4886: PPUSH
4887: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4891: LD_EXP 46
4895: PPUSH
4896: LD_STRING DH-Conspiracy-21
4898: PPUSH
4899: CALL_OW 88
// if IsOk ( Kaia ) then
4903: LD_EXP 51
4907: PPUSH
4908: CALL_OW 302
4912: IFFALSE 4986
// begin hasExplosions := true ;
4914: LD_ADDR_EXP 6
4918: PUSH
4919: LD_INT 1
4921: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4922: LD_STRING M1-explosive
4924: PPUSH
4925: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4929: LD_EXP 51
4933: PPUSH
4934: LD_STRING DK-Conspiracy-22
4936: PPUSH
4937: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4941: LD_INT 73
4943: PPUSH
4944: LD_INT 2
4946: PPUSH
4947: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4951: LD_INT 170
4953: PPUSH
4954: LD_INT 104
4956: PPUSH
4957: LD_INT 105
4959: PPUSH
4960: CALL 20771 0 3
// SetSide ( barExplosion , 3 ) ;
4964: LD_INT 73
4966: PPUSH
4967: LD_INT 3
4969: PPUSH
4970: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4974: LD_EXP 51
4978: PPUSH
4979: LD_STRING DK-Conspiracy-23
4981: PPUSH
4982: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4986: LD_EXP 54
4990: PPUSH
4991: CALL_OW 302
4995: IFFALSE 5065
// begin hasExplosionsInFactory := true ;
4997: LD_ADDR_EXP 7
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
5005: LD_EXP 54
5009: PPUSH
5010: LD_STRING DO-Conspiracy-24
5012: PPUSH
5013: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
5017: LD_INT 175
5019: PPUSH
5020: LD_INT 54
5022: PPUSH
5023: LD_INT 70
5025: PPUSH
5026: CALL 20771 0 3
// if IsOk ( Markov ) then
5030: LD_EXP 53
5034: PPUSH
5035: CALL_OW 302
5039: IFFALSE 5065
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
5041: LD_EXP 53
5045: PPUSH
5046: LD_STRING DMar-Conspiracy-25
5048: PPUSH
5049: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
5053: LD_EXP 53
5057: PPUSH
5058: LD_STRING DMar-Conspiracy-26
5060: PPUSH
5061: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
5065: LD_EXP 55
5069: PPUSH
5070: CALL_OW 302
5074: IFFALSE 5087
5076: PUSH
5077: LD_EXP 51
5081: PPUSH
5082: CALL_OW 302
5086: AND
5087: IFFALSE 5549
// begin hasWeapons := true ;
5089: LD_ADDR_EXP 19
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// hasRevolver := true ;
5097: LD_ADDR_EXP 8
5101: PUSH
5102: LD_INT 1
5104: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5105: LD_STRING M1-weapons
5107: PPUSH
5108: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5112: LD_EXP 55
5116: PPUSH
5117: LD_STRING DKs-Conspiracy-27
5119: PPUSH
5120: CALL_OW 88
// if IsOk ( Givi ) then
5124: LD_EXP 47
5128: PPUSH
5129: CALL_OW 302
5133: IFFALSE 5149
// Say ( Givi , DG-Conspiracy-28 ) else
5135: LD_EXP 47
5139: PPUSH
5140: LD_STRING DG-Conspiracy-28
5142: PPUSH
5143: CALL_OW 88
5147: GO 5214
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5149: LD_EXP 57
5153: PPUSH
5154: LD_INT 26
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PPUSH
5164: CALL_OW 72
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: PPUSH
5173: LD_STRING DArm-Conspiracy-a-28
5175: PPUSH
5176: CALL_OW 88
5180: NOT
5181: IFFALSE 5214
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5183: LD_EXP 57
5187: PPUSH
5188: LD_INT 26
5190: PUSH
5191: LD_INT 2
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: CALL_OW 72
5202: PUSH
5203: LD_INT 1
5205: ARRAY
5206: PPUSH
5207: LD_STRING DArf-Conspiracy-a-28
5209: PPUSH
5210: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5214: LD_EXP 55
5218: PPUSH
5219: LD_STRING DKs-Conspiracy-29
5221: PPUSH
5222: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5226: LD_INT 192
5228: PPUSH
5229: LD_INT 122
5231: PPUSH
5232: LD_INT 105
5234: PPUSH
5235: CALL 20771 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5239: LD_EXP 55
5243: PPUSH
5244: LD_STRING DKs-Conspiracy-30
5246: PPUSH
5247: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5251: LD_EXP 51
5255: PPUSH
5256: LD_STRING DK-Conspiracy-31
5258: PPUSH
5259: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5263: LD_EXP 53
5267: PPUSH
5268: LD_STRING DMar-Conspiracy-33
5270: PPUSH
5271: CALL_OW 88
5275: NOT
5276: IFFALSE 5284
5278: PUSH
5279: LD_EXP 57
5283: AND
5284: IFFALSE 5351
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5286: LD_EXP 57
5290: PPUSH
5291: LD_INT 26
5293: PUSH
5294: LD_INT 1
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PPUSH
5301: CALL_OW 72
5305: PUSH
5306: LD_INT 1
5308: ARRAY
5309: PPUSH
5310: LD_STRING DArm-Conspiracy-a-34
5312: PPUSH
5313: CALL_OW 88
5317: NOT
5318: IFFALSE 5351
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5320: LD_EXP 57
5324: PPUSH
5325: LD_INT 26
5327: PUSH
5328: LD_INT 2
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 72
5339: PUSH
5340: LD_INT 1
5342: ARRAY
5343: PPUSH
5344: LD_STRING DArf-Conspiracy-a-34
5346: PPUSH
5347: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5351: LD_EXP 51
5355: PPUSH
5356: LD_STRING DK-Conspiracy-34
5358: PPUSH
5359: CALL_OW 88
// if IsOk ( Markov ) then
5363: LD_EXP 53
5367: PPUSH
5368: CALL_OW 302
5372: IFFALSE 5457
// begin hasSniperRifle := true ;
5374: LD_ADDR_EXP 11
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5382: LD_EXP 53
5386: PPUSH
5387: LD_STRING DMar-Conspiracy-35
5389: PPUSH
5390: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5394: LD_EXP 51
5398: PPUSH
5399: LD_STRING DK-Conspiracy-36
5401: PPUSH
5402: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5406: LD_EXP 53
5410: PPUSH
5411: LD_STRING DMar-Conspiracy-37
5413: PPUSH
5414: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5418: LD_EXP 53
5422: PPUSH
5423: LD_STRING DMar-Conspiracy-38
5425: PPUSH
5426: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5430: LD_INT 137
5432: PPUSH
5433: LD_INT 98
5435: PPUSH
5436: LD_INT 105
5438: PPUSH
5439: CALL 20771 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5443: LD_EXP 53
5447: PPUSH
5448: LD_STRING DMar-Conspiracy-39
5450: PPUSH
5451: CALL_OW 88
// end else
5455: GO 5549
// if heikeSecondSquad then
5457: LD_EXP 57
5461: IFFALSE 5549
// begin hasSniperRifle := true ;
5463: LD_ADDR_EXP 11
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5471: LD_INT 137
5473: PPUSH
5474: LD_INT 98
5476: PPUSH
5477: LD_INT 105
5479: PPUSH
5480: CALL 20771 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5484: LD_EXP 57
5488: PPUSH
5489: LD_INT 26
5491: PUSH
5492: LD_INT 1
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PPUSH
5499: CALL_OW 72
5503: PUSH
5504: LD_INT 1
5506: ARRAY
5507: PPUSH
5508: LD_STRING DArm-Conspiracy-a-35
5510: PPUSH
5511: CALL_OW 88
5515: NOT
5516: IFFALSE 5549
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5518: LD_EXP 57
5522: PPUSH
5523: LD_INT 26
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 72
5537: PUSH
5538: LD_INT 1
5540: ARRAY
5541: PPUSH
5542: LD_STRING DArf-Conspiracy-a-35
5544: PPUSH
5545: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5549: LD_EXP 46
5553: PPUSH
5554: LD_STRING DH-Conspiracy-40
5556: PPUSH
5557: CALL_OW 88
// if IsOk ( Mike ) then
5561: LD_EXP 48
5565: PPUSH
5566: CALL_OW 302
5570: IFFALSE 5629
// begin hasScout := true ;
5572: LD_ADDR_EXP 12
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5580: LD_EXP 48
5584: PPUSH
5585: LD_STRING DM-Conspiracy-41
5587: PPUSH
5588: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5592: LD_EXP 48
5596: PPUSH
5597: LD_STRING DM-Conspiracy-42
5599: PPUSH
5600: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5604: LD_INT 73
5606: PPUSH
5607: LD_INT 102
5609: PPUSH
5610: LD_INT 105
5612: PPUSH
5613: CALL 20771 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5617: LD_EXP 48
5621: PPUSH
5622: LD_STRING DM-Conspiracy-43
5624: PPUSH
5625: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5629: LD_EXP 4
5633: IFFALSE 5646
5635: PUSH
5636: LD_EXP 51
5640: PPUSH
5641: CALL_OW 302
5645: AND
5646: IFFALSE 5659
5648: PUSH
5649: LD_EXP 55
5653: PPUSH
5654: CALL_OW 302
5658: AND
5659: IFFALSE 5705
// begin hasMethanol := true ;
5661: LD_ADDR_EXP 13
5665: PUSH
5666: LD_INT 1
5668: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5669: LD_EXP 51
5673: PPUSH
5674: LD_STRING DK-Conspiracy-44
5676: PPUSH
5677: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5681: LD_EXP 51
5685: PPUSH
5686: LD_STRING DK-Conspiracy-45
5688: PPUSH
5689: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5693: LD_EXP 50
5697: PPUSH
5698: LD_STRING DKam-Conspiracy-46
5700: PPUSH
5701: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5705: LD_EXP 46
5709: PPUSH
5710: LD_STRING DH-Conspiracy-47
5712: PPUSH
5713: CALL_OW 88
// wait ( 0 0$1 ) ;
5717: LD_INT 35
5719: PPUSH
5720: CALL_OW 67
// your_side := 8 ;
5724: LD_ADDR_OWVAR 2
5728: PUSH
5729: LD_INT 8
5731: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5732: LD_INT 1
5734: PPUSH
5735: LD_INT 1
5737: PPUSH
5738: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5742: LD_ADDR_VAR 0 2
5746: PUSH
5747: LD_INT 2
5749: PUSH
5750: LD_INT 22
5752: PUSH
5753: LD_INT 2
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 22
5762: PUSH
5763: LD_INT 4
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 21
5777: PUSH
5778: LD_INT 1
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PPUSH
5789: CALL_OW 69
5793: PUSH
5794: FOR_IN
5795: IFFALSE 5808
// RemoveUnit ( i ) ;
5797: LD_VAR 0 2
5801: PPUSH
5802: CALL_OW 64
5806: GO 5794
5808: POP
5809: POP
// wait ( 0 0$0.3 ) ;
5810: LD_INT 10
5812: PPUSH
5813: CALL_OW 67
// Query ( StartInfo1 ) ;
5817: LD_STRING StartInfo1
5819: PPUSH
5820: CALL_OW 97
// wait ( 0 0$1 ) ;
5824: LD_INT 35
5826: PPUSH
5827: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5831: LD_STRING colors_night.txt
5833: PPUSH
5834: CALL_OW 544
// Query ( StartInfo2 ) ;
5838: LD_STRING StartInfo2
5840: PPUSH
5841: CALL_OW 97
// PrepareGame ;
5845: CALL 1058 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5849: LD_INT 152
5851: PPUSH
5852: LD_INT 65
5854: PPUSH
5855: LD_INT 2
5857: PPUSH
5858: LD_INT 70
5860: NEG
5861: PPUSH
5862: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5866: LD_INT 152
5868: PPUSH
5869: LD_INT 65
5871: PPUSH
5872: LD_INT 2
5874: PPUSH
5875: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5879: LD_INT 133
5881: PPUSH
5882: LD_INT 76
5884: PPUSH
5885: LD_INT 2
5887: PPUSH
5888: LD_INT 6
5890: NEG
5891: PPUSH
5892: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5896: LD_INT 152
5898: PPUSH
5899: LD_INT 65
5901: PPUSH
5902: LD_INT 8
5904: PPUSH
5905: LD_INT 70
5907: NEG
5908: PPUSH
5909: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5913: LD_INT 152
5915: PPUSH
5916: LD_INT 65
5918: PPUSH
5919: LD_INT 8
5921: PPUSH
5922: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5926: LD_INT 133
5928: PPUSH
5929: LD_INT 76
5931: PPUSH
5932: LD_INT 8
5934: PPUSH
5935: LD_INT 6
5937: NEG
5938: PPUSH
5939: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5943: LD_INT 23
5945: PPUSH
5946: CALL_OW 87
// dialogue_skipped := false ;
5950: LD_ADDR_OWVAR 59
5954: PUSH
5955: LD_INT 0
5957: ST_TO_ADDR
// InitRuPatrols ;
5958: CALL 3333 0 0
// Say ( Heike , DH-Escape-1 ) ;
5962: LD_EXP 46
5966: PPUSH
5967: LD_STRING DH-Escape-1
5969: PPUSH
5970: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5974: LD_EXP 46
5978: PPUSH
5979: LD_STRING DH-Escape-2
5981: PPUSH
5982: CALL_OW 88
// StartLockerMinigame ;
5986: CALL 21560 0 0
// wait ( 0 0$1 ) ;
5990: LD_INT 35
5992: PPUSH
5993: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5997: LD_EXP 46
6001: PPUSH
6002: LD_STRING DH-Escape-4
6004: PPUSH
6005: CALL_OW 88
// wait ( 0 0$3 ) ;
6009: LD_INT 105
6011: PPUSH
6012: CALL_OW 67
// your_side := 2 ;
6016: LD_ADDR_OWVAR 2
6020: PUSH
6021: LD_INT 2
6023: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
6024: LD_EXP 46
6028: PPUSH
6029: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
6033: LD_INT 152
6035: PPUSH
6036: LD_INT 65
6038: PPUSH
6039: LD_INT 2
6041: PPUSH
6042: LD_INT 70
6044: NEG
6045: PPUSH
6046: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
6050: LD_INT 152
6052: PPUSH
6053: LD_INT 65
6055: PPUSH
6056: LD_INT 2
6058: PPUSH
6059: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
6063: LD_INT 133
6065: PPUSH
6066: LD_INT 76
6068: PPUSH
6069: LD_INT 8
6071: PPUSH
6072: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
6076: LD_EXP 46
6080: PPUSH
6081: LD_INT 128
6083: PPUSH
6084: LD_INT 64
6086: PPUSH
6087: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6091: LD_INT 35
6093: PPUSH
6094: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
6098: LD_EXP 46
6102: PPUSH
6103: LD_INT 128
6105: PPUSH
6106: LD_INT 64
6108: PPUSH
6109: CALL_OW 307
6113: IFFALSE 6091
// ComHold ( Heike ) ;
6115: LD_EXP 46
6119: PPUSH
6120: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6124: LD_EXP 46
6128: PPUSH
6129: LD_STRING DH-Start-1
6131: PPUSH
6132: CALL_OW 88
// if not americanContact then
6136: LD_EXP 10
6140: NOT
6141: IFFALSE 6157
// Say ( Heike , DH-Start-c-2 ) else
6143: LD_EXP 46
6147: PPUSH
6148: LD_STRING DH-Start-c-2
6150: PPUSH
6151: CALL_OW 88
6155: GO 6189
// if johnnySaved then
6157: LD_EXP 3
6161: IFFALSE 6177
// Say ( Heike , DH-Start-a-2 ) else
6163: LD_EXP 46
6167: PPUSH
6168: LD_STRING DH-Start-a-2
6170: PPUSH
6171: CALL_OW 88
6175: GO 6189
// Say ( Heike , DH-Start-b-2 ) ;
6177: LD_EXP 46
6181: PPUSH
6182: LD_STRING DH-Start-b-2
6184: PPUSH
6185: CALL_OW 88
// Video ( false ) ;
6189: LD_INT 0
6191: PPUSH
6192: CALL 68412 0 1
// tick := 0 ;
6196: LD_ADDR_OWVAR 1
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6204: LD_STRING M1
6206: PPUSH
6207: CALL_OW 337
// enable ( gameStartEvent ) ;
6211: LD_INT 2
6213: ENABLE_MARKED
// SaveForQuickRestart ;
6214: CALL_OW 22
// end ;
6218: LD_VAR 0 1
6222: RET
// function ActionAdditional ; var i , un , tmp ; begin
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6229: LD_INT 115
6231: PPUSH
6232: LD_INT 27
6234: PPUSH
6235: LD_INT 2
6237: PPUSH
6238: LD_INT 6
6240: NEG
6241: PPUSH
6242: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6246: LD_EXP 46
6250: PPUSH
6251: LD_INT 115
6253: PPUSH
6254: LD_INT 27
6256: PPUSH
6257: CALL_OW 428
6261: PPUSH
6262: CALL_OW 52
// SetClass ( Heike , class_prison ) ;
6266: LD_EXP 46
6270: PPUSH
6271: LD_INT 33
6273: PPUSH
6274: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6278: LD_INT 124
6280: PPUSH
6281: LD_INT 39
6283: PPUSH
6284: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6288: LD_EXP 46
6292: PPUSH
6293: LD_STRING DH-Fail-1
6295: PPUSH
6296: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6300: LD_INT 3
6302: PPUSH
6303: CALL_OW 427
// ComExit ( Heike ) ;
6307: LD_EXP 46
6311: PPUSH
6312: CALL 68838 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6316: LD_EXP 46
6320: PPUSH
6321: LD_INT 109
6323: PPUSH
6324: LD_INT 33
6326: PPUSH
6327: CALL_OW 171
// AddComHold ( Heike ) ;
6331: LD_EXP 46
6335: PPUSH
6336: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6340: LD_INT 115
6342: PPUSH
6343: LD_INT 27
6345: PPUSH
6346: LD_INT 2
6348: PPUSH
6349: CALL_OW 331
// wait ( 0 0$2 ) ;
6353: LD_INT 70
6355: PPUSH
6356: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6360: LD_INT 35
6362: PPUSH
6363: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6367: LD_EXP 46
6371: PPUSH
6372: LD_INT 109
6374: PPUSH
6375: LD_INT 33
6377: PPUSH
6378: CALL_OW 307
6382: IFFALSE 6360
// Say ( Heike , DH-Fail-2 ) ;
6384: LD_EXP 46
6388: PPUSH
6389: LD_STRING DH-Fail-2
6391: PPUSH
6392: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6396: LD_EXP 46
6400: PPUSH
6401: LD_INT 111
6403: PPUSH
6404: LD_INT 48
6406: PPUSH
6407: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6411: LD_INT 35
6413: PPUSH
6414: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6418: LD_EXP 46
6422: PPUSH
6423: LD_INT 111
6425: PPUSH
6426: LD_INT 48
6428: PPUSH
6429: CALL_OW 297
6433: PUSH
6434: LD_INT 4
6436: LESS
6437: IFFALSE 6411
// AddComMoveXY ( Heike , 106 , 72 ) ;
6439: LD_EXP 46
6443: PPUSH
6444: LD_INT 106
6446: PPUSH
6447: LD_INT 72
6449: PPUSH
6450: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6454: LD_EXP 46
6458: PPUSH
6459: LD_INT 103
6461: PPUSH
6462: LD_INT 80
6464: PPUSH
6465: CALL_OW 171
// uc_side := 3 ;
6469: LD_ADDR_OWVAR 20
6473: PUSH
6474: LD_INT 3
6476: ST_TO_ADDR
// uc_nation := 3 ;
6477: LD_ADDR_OWVAR 21
6481: PUSH
6482: LD_INT 3
6484: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6485: LD_INT 1
6487: PPUSH
6488: LD_INT 1
6490: PPUSH
6491: LD_INT 6
6493: PPUSH
6494: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6498: LD_ADDR_OWVAR 29
6502: PUSH
6503: LD_INT 12
6505: PUSH
6506: LD_INT 12
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: ST_TO_ADDR
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 3
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6523: LD_VAR 0 3
6527: PPUSH
6528: LD_INT 134
6530: PPUSH
6531: LD_INT 52
6533: PPUSH
6534: LD_INT 4
6536: PPUSH
6537: LD_INT 0
6539: PPUSH
6540: CALL 70600 0 5
// ComTurnUnit ( un , Heike ) ;
6544: LD_VAR 0 3
6548: PPUSH
6549: LD_EXP 46
6553: PPUSH
6554: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6558: LD_VAR 0 3
6562: PPUSH
6563: LD_EXP 46
6567: PPUSH
6568: CALL_OW 112
// if GetSex ( un ) = sex_male then
6572: LD_VAR 0 3
6576: PPUSH
6577: CALL_OW 258
6581: PUSH
6582: LD_INT 1
6584: EQUAL
6585: IFFALSE 6601
// Say ( un , DRum-Fail-3 ) else
6587: LD_VAR 0 3
6591: PPUSH
6592: LD_STRING DRum-Fail-3
6594: PPUSH
6595: CALL_OW 88
6599: GO 6613
// Say ( un , DRuf-Fail-3 ) ;
6601: LD_VAR 0 3
6605: PPUSH
6606: LD_STRING DRuf-Fail-3
6608: PPUSH
6609: CALL_OW 88
// for i := 1 to 3 do
6613: LD_ADDR_VAR 0 2
6617: PUSH
6618: DOUBLE
6619: LD_INT 1
6621: DEC
6622: ST_TO_ADDR
6623: LD_INT 3
6625: PUSH
6626: FOR_TO
6627: IFFALSE 6700
// begin PrepareSoldier ( false , 10 ) ;
6629: LD_INT 0
6631: PPUSH
6632: LD_INT 10
6634: PPUSH
6635: CALL_OW 381
// un := CreateHuman ;
6639: LD_ADDR_VAR 0 3
6643: PUSH
6644: CALL_OW 44
6648: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6649: LD_ADDR_VAR 0 4
6653: PUSH
6654: LD_VAR 0 4
6658: PPUSH
6659: LD_VAR 0 3
6663: PPUSH
6664: CALL 68440 0 2
6668: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6669: LD_VAR 0 3
6673: PPUSH
6674: LD_INT 8
6676: PPUSH
6677: LD_INT 0
6679: PPUSH
6680: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6684: LD_VAR 0 3
6688: PPUSH
6689: LD_EXP 46
6693: PPUSH
6694: CALL_OW 119
// end ;
6698: GO 6626
6700: POP
6701: POP
// repeat wait ( 0 0$1 ) ;
6702: LD_INT 35
6704: PPUSH
6705: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6709: LD_VAR 0 4
6713: PPUSH
6714: LD_INT 101
6716: PUSH
6717: LD_INT 2
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 72
6728: PUSH
6729: LD_INT 1
6731: GREATER
6732: IFFALSE 6702
// wait ( 0 0$1 ) ;
6734: LD_INT 35
6736: PPUSH
6737: CALL_OW 67
// DialogueOn ;
6741: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6745: LD_EXP 46
6749: PPUSH
6750: LD_STRING DH-Fail-4
6752: PPUSH
6753: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6757: LD_EXP 46
6761: PPUSH
6762: LD_STRING DH-Fail-5
6764: PPUSH
6765: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6769: LD_EXP 46
6773: PPUSH
6774: LD_STRING DH-Fail-6
6776: PPUSH
6777: CALL_OW 88
// DialogueOff ;
6781: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6785: LD_VAR 0 4
6789: PPUSH
6790: LD_EXP 46
6794: PPUSH
6795: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6799: LD_INT 35
6801: PPUSH
6802: CALL_OW 67
// until IsDying ( Heike ) ;
6806: LD_EXP 46
6810: PPUSH
6811: CALL_OW 303
6815: IFFALSE 6799
// KillUnit ( Heike ) ;
6817: LD_EXP 46
6821: PPUSH
6822: CALL_OW 66
// wait ( 0 0$4 ) ;
6826: LD_INT 140
6828: PPUSH
6829: CALL_OW 67
// ResetFog ;
6833: CALL_OW 335
// DialogueOn ;
6837: CALL_OW 6
// dwait ( 0 0$1 ) ;
6841: LD_INT 35
6843: PPUSH
6844: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6848: LD_ADDR_EXP 46
6852: PUSH
6853: LD_STRING Heike
6855: PPUSH
6856: LD_EXP 1
6860: NOT
6861: PPUSH
6862: LD_EXP 2
6866: PPUSH
6867: CALL 30240 0 3
6871: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6872: LD_EXP 46
6876: PPUSH
6877: LD_STRING DH-Fail-7
6879: PPUSH
6880: CALL_OW 89
// DialogueOff ;
6884: CALL_OW 7
// YouLost ( Fail ) ;
6888: LD_STRING Fail
6890: PPUSH
6891: CALL_OW 104
// end ;
6895: LD_VAR 0 1
6899: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6900: LD_INT 2
6902: PPUSH
6903: LD_INT 173
6905: PPUSH
6906: LD_INT 29
6908: PPUSH
6909: CALL_OW 293
6913: IFFALSE 6936
6915: PUSH
6916: LD_EXP 46
6920: PPUSH
6921: LD_INT 173
6923: PPUSH
6924: LD_INT 29
6926: PPUSH
6927: CALL_OW 297
6931: PUSH
6932: LD_INT 6
6934: LESS
6935: AND
6936: IFFALSE 6953
6938: GO 6940
6940: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6941: LD_EXP 46
6945: PPUSH
6946: LD_STRING DH-EastRoad
6948: PPUSH
6949: CALL_OW 88
6953: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6954: LD_INT 2
6956: PPUSH
6957: LD_INT 149
6959: PPUSH
6960: LD_INT 3
6962: PPUSH
6963: CALL_OW 293
6967: IFFALSE 6990
6969: PUSH
6970: LD_EXP 46
6974: PPUSH
6975: LD_INT 149
6977: PPUSH
6978: LD_INT 3
6980: PPUSH
6981: CALL_OW 297
6985: PUSH
6986: LD_INT 6
6988: LESS
6989: AND
6990: IFFALSE 7007
6992: GO 6994
6994: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6995: LD_EXP 46
6999: PPUSH
7000: LD_STRING DH-EastRoad
7002: PPUSH
7003: CALL_OW 88
7007: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
7008: LD_INT 2
7010: PPUSH
7011: LD_INT 217
7013: PPUSH
7014: LD_INT 120
7016: PPUSH
7017: CALL_OW 293
7021: IFFALSE 7044
7023: PUSH
7024: LD_EXP 46
7028: PPUSH
7029: LD_INT 217
7031: PPUSH
7032: LD_INT 120
7034: PPUSH
7035: CALL_OW 297
7039: PUSH
7040: LD_INT 6
7042: LESS
7043: AND
7044: IFFALSE 7061
7046: GO 7048
7048: DISABLE
// Say ( Heike , DH-EastEnd ) ;
7049: LD_EXP 46
7053: PPUSH
7054: LD_STRING DH-EastEnd
7056: PPUSH
7057: CALL_OW 88
7061: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
7062: LD_EXP 46
7066: PPUSH
7067: LD_INT 11
7069: PPUSH
7070: CALL_OW 308
7074: IFFALSE 7112
7076: GO 7078
7078: DISABLE
// begin if not heikeSquad then
7079: LD_EXP 14
7083: NOT
7084: IFFALSE 7100
// Say ( Heike , DH-Hill ) else
7086: LD_EXP 46
7090: PPUSH
7091: LD_STRING DH-Hill
7093: PPUSH
7094: CALL_OW 88
7098: GO 7112
// Say ( Heike , DH-Hill-a ) ;
7100: LD_EXP 46
7104: PPUSH
7105: LD_STRING DH-Hill-a
7107: PPUSH
7108: CALL_OW 88
// end ;
7112: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
7113: LD_EXP 46
7117: PPUSH
7118: LD_INT 12
7120: PPUSH
7121: CALL_OW 308
7125: IFFALSE 7312
7127: GO 7129
7129: DISABLE
7130: LD_INT 0
7132: PPUSH
7133: PPUSH
7134: PPUSH
// begin DialogueOn ;
7135: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7139: LD_EXP 46
7143: PPUSH
7144: CALL_OW 87
// x := GetX ( Heike ) ;
7148: LD_ADDR_VAR 0 1
7152: PUSH
7153: LD_EXP 46
7157: PPUSH
7158: CALL_OW 250
7162: ST_TO_ADDR
// y := GetY ( Heike ) ;
7163: LD_ADDR_VAR 0 2
7167: PUSH
7168: LD_EXP 46
7172: PPUSH
7173: CALL_OW 251
7177: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7178: LD_VAR 0 1
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: LD_INT 2
7190: PPUSH
7191: LD_INT 12
7193: NEG
7194: PPUSH
7195: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7199: LD_VAR 0 1
7203: PPUSH
7204: LD_VAR 0 2
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7216: LD_INT 101
7218: PUSH
7219: LD_INT 2
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 2
7228: PUSH
7229: LD_INT 30
7231: PUSH
7232: LD_INT 32
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 30
7241: PUSH
7242: LD_INT 33
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: CALL_OW 69
7262: IFFALSE 7274
// v := 3 else
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: LD_INT 3
7271: ST_TO_ADDR
7272: GO 7282
// v := 2 ;
7274: LD_ADDR_VAR 0 3
7278: PUSH
7279: LD_INT 2
7281: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7282: LD_EXP 46
7286: PPUSH
7287: LD_STRING DH-Outpost-
7289: PUSH
7290: LD_INT 1
7292: PPUSH
7293: LD_VAR 0 3
7297: PPUSH
7298: CALL_OW 12
7302: STR
7303: PPUSH
7304: CALL_OW 88
// DialogueOff ;
7308: CALL_OW 7
// end ;
7312: PPOPN 3
7314: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7315: LD_EXP 46
7319: PPUSH
7320: LD_INT 64
7322: PPUSH
7323: CALL_OW 308
7327: IFFALSE 7514
7329: GO 7331
7331: DISABLE
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
7336: PPUSH
// begin DialogueOn ;
7337: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7341: LD_EXP 46
7345: PPUSH
7346: CALL_OW 87
// x := GetX ( Heike ) ;
7350: LD_ADDR_VAR 0 1
7354: PUSH
7355: LD_EXP 46
7359: PPUSH
7360: CALL_OW 250
7364: ST_TO_ADDR
// y := GetY ( Heike ) ;
7365: LD_ADDR_VAR 0 2
7369: PUSH
7370: LD_EXP 46
7374: PPUSH
7375: CALL_OW 251
7379: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7380: LD_VAR 0 1
7384: PPUSH
7385: LD_VAR 0 2
7389: PPUSH
7390: LD_INT 2
7392: PPUSH
7393: LD_INT 12
7395: NEG
7396: PPUSH
7397: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7401: LD_VAR 0 1
7405: PPUSH
7406: LD_VAR 0 2
7410: PPUSH
7411: LD_INT 2
7413: PPUSH
7414: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7418: LD_INT 101
7420: PUSH
7421: LD_INT 2
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 2
7430: PUSH
7431: LD_INT 30
7433: PUSH
7434: LD_INT 32
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: LD_INT 30
7443: PUSH
7444: LD_INT 33
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PPUSH
7460: CALL_OW 69
7464: IFFALSE 7476
// v := 3 else
7466: LD_ADDR_VAR 0 3
7470: PUSH
7471: LD_INT 3
7473: ST_TO_ADDR
7474: GO 7484
// v := 2 ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: LD_INT 2
7483: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7484: LD_EXP 46
7488: PPUSH
7489: LD_STRING DH-Outpost-
7491: PUSH
7492: LD_INT 1
7494: PPUSH
7495: LD_VAR 0 3
7499: PPUSH
7500: CALL_OW 12
7504: STR
7505: PPUSH
7506: CALL_OW 88
// DialogueOff ;
7510: CALL_OW 7
// end ;
7514: PPOPN 3
7516: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7517: LD_EXP 46
7521: PPUSH
7522: LD_INT 19
7524: PPUSH
7525: CALL_OW 308
7529: IFFALSE 7538
7531: PUSH
7532: LD_EXP 22
7536: NOT
7537: AND
7538: IFFALSE 7547
7540: PUSH
7541: LD_EXP 30
7545: NOT
7546: AND
7547: IFFALSE 7620
7549: GO 7551
7551: DISABLE
// begin DialogueOn ;
7552: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7556: LD_INT 152
7558: PPUSH
7559: LD_INT 115
7561: PPUSH
7562: LD_INT 2
7564: PPUSH
7565: LD_INT 16
7567: NEG
7568: PPUSH
7569: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7573: LD_INT 152
7575: PPUSH
7576: LD_INT 115
7578: PPUSH
7579: LD_INT 2
7581: PPUSH
7582: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7586: LD_INT 152
7588: PPUSH
7589: LD_INT 115
7591: PPUSH
7592: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7596: LD_EXP 46
7600: PPUSH
7601: LD_STRING DH-Stealth-1
7603: PPUSH
7604: CALL_OW 88
// DialogueOff ;
7608: CALL_OW 7
// adminAreaDiscovered := true ;
7612: LD_ADDR_EXP 22
7616: PUSH
7617: LD_INT 1
7619: ST_TO_ADDR
// end ;
7620: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7621: LD_INT 2
7623: PPUSH
7624: LD_EXP 47
7628: PPUSH
7629: CALL_OW 292
7633: IFFALSE 7655
7635: PUSH
7636: LD_EXP 46
7640: PPUSH
7641: LD_EXP 47
7645: PPUSH
7646: CALL_OW 296
7650: PUSH
7651: LD_INT 6
7653: LESS
7654: AND
7655: IFFALSE 7664
7657: PUSH
7658: LD_EXP 17
7662: NOT
7663: AND
7664: IFFALSE 7673
7666: PUSH
7667: LD_EXP 30
7671: NOT
7672: AND
7673: IFFALSE 7779
7675: GO 7677
7677: DISABLE
// begin DialogueOn ;
7678: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7682: LD_EXP 47
7686: PPUSH
7687: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7691: LD_EXP 47
7695: PPUSH
7696: LD_EXP 46
7700: PPUSH
7701: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7705: LD_EXP 46
7709: PPUSH
7710: LD_EXP 47
7714: PPUSH
7715: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7719: LD_EXP 46
7723: PPUSH
7724: LD_STRING DH-Givi-1
7726: PPUSH
7727: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7731: LD_EXP 47
7735: PPUSH
7736: LD_STRING DG-Givi-2
7738: PPUSH
7739: CALL_OW 88
// DialogueOff ;
7743: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7747: LD_EXP 47
7751: PPUSH
7752: LD_INT 2
7754: PPUSH
7755: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7759: LD_ADDR_EXP 14
7763: PUSH
7764: LD_EXP 14
7768: PPUSH
7769: LD_EXP 47
7773: PPUSH
7774: CALL 68440 0 2
7778: ST_TO_ADDR
// end ;
7779: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7780: LD_INT 2
7782: PPUSH
7783: LD_EXP 52
7787: PPUSH
7788: CALL_OW 292
7792: IFFALSE 7814
7794: PUSH
7795: LD_EXP 46
7799: PPUSH
7800: LD_EXP 52
7804: PPUSH
7805: CALL_OW 296
7809: PUSH
7810: LD_INT 6
7812: LESS
7813: AND
7814: IFFALSE 7823
7816: PUSH
7817: LD_EXP 17
7821: NOT
7822: AND
7823: IFFALSE 7832
7825: PUSH
7826: LD_EXP 30
7830: NOT
7831: AND
7832: IFFALSE 7938
7834: GO 7836
7836: DISABLE
// begin DialogueOn ;
7837: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7841: LD_EXP 52
7845: PPUSH
7846: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7850: LD_EXP 52
7854: PPUSH
7855: LD_EXP 46
7859: PPUSH
7860: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7864: LD_EXP 46
7868: PPUSH
7869: LD_EXP 52
7873: PPUSH
7874: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7878: LD_EXP 46
7882: PPUSH
7883: LD_STRING DH-Sophia-1
7885: PPUSH
7886: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7890: LD_EXP 52
7894: PPUSH
7895: LD_STRING DS-Sophia-2
7897: PPUSH
7898: CALL_OW 88
// DialogueOff ;
7902: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7906: LD_EXP 52
7910: PPUSH
7911: LD_INT 2
7913: PPUSH
7914: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7918: LD_ADDR_EXP 14
7922: PUSH
7923: LD_EXP 14
7927: PPUSH
7928: LD_EXP 52
7932: PPUSH
7933: CALL 68440 0 2
7937: ST_TO_ADDR
// end ;
7938: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7939: LD_INT 2
7941: PPUSH
7942: LD_EXP 54
7946: PPUSH
7947: CALL_OW 292
7951: IFFALSE 7973
7953: PUSH
7954: LD_EXP 46
7958: PPUSH
7959: LD_EXP 54
7963: PPUSH
7964: CALL_OW 296
7968: PUSH
7969: LD_INT 6
7971: LESS
7972: AND
7973: IFFALSE 7982
7975: PUSH
7976: LD_EXP 17
7980: NOT
7981: AND
7982: IFFALSE 7991
7984: PUSH
7985: LD_EXP 30
7989: NOT
7990: AND
7991: IFFALSE 8087
7993: GO 7995
7995: DISABLE
// begin DialogueOn ;
7996: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
8000: LD_EXP 54
8004: PPUSH
8005: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
8009: LD_EXP 46
8013: PPUSH
8014: LD_STRING DH-Olaf-1
8016: PPUSH
8017: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
8021: LD_EXP 54
8025: PPUSH
8026: LD_STRING DO-Olaf-2
8028: PPUSH
8029: CALL_OW 88
// if explosionsTakenByRussians then
8033: LD_EXP 21
8037: IFFALSE 8051
// Say ( Olaf , DO-Olaf-a-3 ) ;
8039: LD_EXP 54
8043: PPUSH
8044: LD_STRING DO-Olaf-a-3
8046: PPUSH
8047: CALL_OW 88
// DialogueOff ;
8051: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
8055: LD_EXP 54
8059: PPUSH
8060: LD_INT 2
8062: PPUSH
8063: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
8067: LD_ADDR_EXP 14
8071: PUSH
8072: LD_EXP 14
8076: PPUSH
8077: LD_EXP 54
8081: PPUSH
8082: CALL 68440 0 2
8086: ST_TO_ADDR
// end ;
8087: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
8088: LD_INT 2
8090: PPUSH
8091: LD_EXP 48
8095: PPUSH
8096: CALL_OW 292
8100: IFFALSE 8122
8102: PUSH
8103: LD_EXP 46
8107: PPUSH
8108: LD_EXP 48
8112: PPUSH
8113: CALL_OW 296
8117: PUSH
8118: LD_INT 6
8120: LESS
8121: AND
8122: IFFALSE 8131
8124: PUSH
8125: LD_EXP 17
8129: NOT
8130: AND
8131: IFFALSE 8140
8133: PUSH
8134: LD_EXP 30
8138: NOT
8139: AND
8140: IFFALSE 8368
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
8148: PPUSH
// begin DialogueOn ;
8149: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
8153: LD_EXP 48
8157: PPUSH
8158: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
8162: LD_ADDR_VAR 0 2
8166: PUSH
8167: LD_INT 18
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: CALL_OW 517
8177: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8178: LD_ADDR_VAR 0 1
8182: PUSH
8183: DOUBLE
8184: LD_INT 1
8186: DEC
8187: ST_TO_ADDR
8188: LD_VAR 0 2
8192: PUSH
8193: LD_INT 1
8195: ARRAY
8196: PUSH
8197: FOR_TO
8198: IFFALSE 8280
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8200: LD_VAR 0 2
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: PUSH
8209: LD_VAR 0 1
8213: ARRAY
8214: PPUSH
8215: LD_VAR 0 2
8219: PUSH
8220: LD_INT 2
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 1
8228: ARRAY
8229: PPUSH
8230: LD_INT 2
8232: PPUSH
8233: LD_INT 3
8235: NEG
8236: PPUSH
8237: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8241: LD_VAR 0 2
8245: PUSH
8246: LD_INT 1
8248: ARRAY
8249: PUSH
8250: LD_VAR 0 1
8254: ARRAY
8255: PPUSH
8256: LD_VAR 0 2
8260: PUSH
8261: LD_INT 2
8263: ARRAY
8264: PUSH
8265: LD_VAR 0 1
8269: ARRAY
8270: PPUSH
8271: LD_INT 2
8273: PPUSH
8274: CALL_OW 331
// end ;
8278: GO 8197
8280: POP
8281: POP
// Say ( Mike , DM-Mike-1 ) ;
8282: LD_EXP 48
8286: PPUSH
8287: LD_STRING DM-Mike-1
8289: PPUSH
8290: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8294: LD_EXP 46
8298: PPUSH
8299: LD_STRING DH-Mike-2
8301: PPUSH
8302: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8306: LD_INT 78
8308: PPUSH
8309: LD_INT 104
8311: PPUSH
8312: CALL_OW 84
// dwait ( 0 0$1 ) ;
8316: LD_INT 35
8318: PPUSH
8319: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8323: LD_EXP 46
8327: PPUSH
8328: CALL_OW 87
// DialogueOff ;
8332: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8336: LD_EXP 48
8340: PPUSH
8341: LD_INT 2
8343: PPUSH
8344: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8348: LD_ADDR_EXP 14
8352: PUSH
8353: LD_EXP 14
8357: PPUSH
8358: LD_EXP 48
8362: PPUSH
8363: CALL 68440 0 2
8367: ST_TO_ADDR
// end ;
8368: PPOPN 2
8370: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = class_prison and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8371: LD_EXP 46
8375: PPUSH
8376: LD_EXP 51
8380: PPUSH
8381: CALL_OW 296
8385: PUSH
8386: LD_INT 6
8388: LESS
8389: IFFALSE 8406
8391: PUSH
8392: LD_EXP 51
8396: PPUSH
8397: CALL_OW 257
8401: PUSH
8402: LD_INT 33
8404: EQUAL
8405: AND
8406: IFFALSE 8415
8408: PUSH
8409: LD_EXP 17
8413: NOT
8414: AND
8415: IFFALSE 8424
8417: PUSH
8418: LD_EXP 30
8422: NOT
8423: AND
8424: IFFALSE 8437
8426: PUSH
8427: LD_EXP 51
8431: PPUSH
8432: CALL_OW 302
8436: AND
8437: IFFALSE 8445
8439: PUSH
8440: LD_EXP 20
8444: AND
8445: IFFALSE 8459
8447: PUSH
8448: LD_EXP 51
8452: PUSH
8453: LD_EXP 14
8457: IN
8458: AND
8459: IFFALSE 8476
8461: PUSH
8462: LD_EXP 51
8466: PPUSH
8467: CALL_OW 255
8471: PUSH
8472: LD_INT 2
8474: EQUAL
8475: AND
8476: IFFALSE 8505
8478: GO 8480
8480: DISABLE
// begin DialogueOn ;
8481: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8485: LD_EXP 46
8489: PPUSH
8490: LD_STRING DH-Kaia-Revolver-2
8492: PPUSH
8493: CALL_OW 88
// SetClassKaiaRevolver ;
8497: CALL 1771 0 0
// DialogueOff ;
8501: CALL_OW 7
// end ;
8505: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8506: LD_EXP 49
8510: IFFALSE 8518
8512: PUSH
8513: LD_EXP 56
8517: AND
8518: IFFALSE 8535
8520: PUSH
8521: LD_EXP 56
8525: PPUSH
8526: CALL_OW 255
8530: PUSH
8531: LD_INT 2
8533: NONEQUAL
8534: AND
8535: IFFALSE 8552
8537: PUSH
8538: LD_EXP 49
8542: PPUSH
8543: CALL_OW 255
8547: PUSH
8548: LD_INT 2
8550: NONEQUAL
8551: AND
8552: IFFALSE 8579
8554: PUSH
8555: LD_EXP 14
8559: PPUSH
8560: LD_INT 22
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 72
8574: PUSH
8575: LD_INT 5
8577: GREATER
8578: AND
8579: IFFALSE 8588
8581: PUSH
8582: LD_EXP 17
8586: NOT
8587: AND
8588: IFFALSE 8597
8590: PUSH
8591: LD_EXP 30
8595: NOT
8596: AND
8597: IFFALSE 9334
8599: GO 8601
8601: DISABLE
8602: LD_INT 0
8604: PPUSH
8605: PPUSH
// begin DialogueOn ;
8606: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8610: LD_ADDR_VAR 0 2
8614: PUSH
8615: LD_EXP 47
8619: PPUSH
8620: CALL_OW 302
8624: IFFALSE 8638
8626: PUSH
8627: LD_EXP 47
8631: PUSH
8632: LD_EXP 14
8636: IN
8637: AND
8638: IFFALSE 8655
8640: PUSH
8641: LD_EXP 47
8645: PPUSH
8646: CALL_OW 255
8650: PUSH
8651: LD_INT 2
8653: EQUAL
8654: AND
8655: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8656: LD_EXP 46
8660: PPUSH
8661: LD_STRING DH-Med-1
8663: PPUSH
8664: CALL_OW 88
// if hasGivi then
8668: LD_VAR 0 2
8672: IFFALSE 8688
// Say ( Givi , DG-Med-2 ) else
8674: LD_EXP 47
8678: PPUSH
8679: LD_STRING DG-Med-2
8681: PPUSH
8682: CALL_OW 88
8686: GO 8793
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8688: LD_EXP 14
8692: PUSH
8693: LD_EXP 57
8697: ISECT
8698: PPUSH
8699: LD_INT 22
8701: PUSH
8702: LD_INT 2
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 26
8711: PUSH
8712: LD_INT 1
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PPUSH
8723: CALL_OW 72
8727: PUSH
8728: LD_INT 1
8730: ARRAY
8731: PPUSH
8732: LD_STRING DArm-Med-e-2
8734: PPUSH
8735: CALL_OW 88
8739: NOT
8740: IFFALSE 8793
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8742: LD_EXP 14
8746: PUSH
8747: LD_EXP 57
8751: ISECT
8752: PPUSH
8753: LD_INT 22
8755: PUSH
8756: LD_INT 2
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 26
8765: PUSH
8766: LD_INT 2
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PPUSH
8777: CALL_OW 72
8781: PUSH
8782: LD_INT 1
8784: ARRAY
8785: PPUSH
8786: LD_STRING DArf-Med-e-2
8788: PPUSH
8789: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8793: LD_INT 154
8795: PPUSH
8796: LD_INT 119
8798: PPUSH
8799: LD_INT 70
8801: PPUSH
8802: CALL 20771 0 3
// Say ( Heike , DH-Med-3 ) ;
8806: LD_EXP 46
8810: PPUSH
8811: LD_STRING DH-Med-3
8813: PPUSH
8814: CALL_OW 88
// if hasGivi then
8818: LD_VAR 0 2
8822: IFFALSE 8838
// Say ( Givi , DG-Med-4 ) else
8824: LD_EXP 47
8828: PPUSH
8829: LD_STRING DG-Med-4
8831: PPUSH
8832: CALL_OW 88
8836: GO 8943
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8838: LD_EXP 14
8842: PUSH
8843: LD_EXP 57
8847: ISECT
8848: PPUSH
8849: LD_INT 22
8851: PUSH
8852: LD_INT 2
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: LD_INT 26
8861: PUSH
8862: LD_INT 1
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 72
8877: PUSH
8878: LD_INT 1
8880: ARRAY
8881: PPUSH
8882: LD_STRING DArm-Med-e-4
8884: PPUSH
8885: CALL_OW 88
8889: NOT
8890: IFFALSE 8943
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8892: LD_EXP 14
8896: PUSH
8897: LD_EXP 57
8901: ISECT
8902: PPUSH
8903: LD_INT 22
8905: PUSH
8906: LD_INT 2
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 26
8915: PUSH
8916: LD_INT 2
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 72
8931: PUSH
8932: LD_INT 1
8934: ARRAY
8935: PPUSH
8936: LD_STRING DArf-Med-e-4
8938: PPUSH
8939: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8943: LD_ADDR_VAR 0 1
8947: PUSH
8948: LD_EXP 51
8952: PPUSH
8953: CALL_OW 302
8957: IFFALSE 8971
8959: PUSH
8960: LD_EXP 51
8964: PUSH
8965: LD_EXP 14
8969: IN
8970: AND
8971: IFFALSE 8988
8973: PUSH
8974: LD_EXP 51
8978: PPUSH
8979: CALL_OW 255
8983: PUSH
8984: LD_INT 2
8986: EQUAL
8987: AND
8988: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8989: LD_EXP 48
8993: PPUSH
8994: CALL_OW 302
8998: IFFALSE 9012
9000: PUSH
9001: LD_EXP 48
9005: PUSH
9006: LD_EXP 14
9010: IN
9011: AND
9012: IFFALSE 9029
9014: PUSH
9015: LD_EXP 51
9019: PPUSH
9020: CALL_OW 255
9024: PUSH
9025: LD_INT 2
9027: EQUAL
9028: AND
9029: IFFALSE 9061
// begin Say ( Mike , DM-Med-5 ) ;
9031: LD_EXP 48
9035: PPUSH
9036: LD_STRING DM-Med-5
9038: PPUSH
9039: CALL_OW 88
// if hasKaia then
9043: LD_VAR 0 1
9047: IFFALSE 9061
// Say ( Kaia , DK-Med-6 ) ;
9049: LD_EXP 51
9053: PPUSH
9054: LD_STRING DK-Med-6
9056: PPUSH
9057: CALL_OW 88
// end ; if hasKaia then
9061: LD_VAR 0 1
9065: IFFALSE 9314
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9067: LD_INT 175
9069: PPUSH
9070: LD_INT 123
9072: PPUSH
9073: LD_INT 2
9075: PPUSH
9076: LD_INT 8
9078: NEG
9079: PPUSH
9080: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9084: LD_INT 175
9086: PPUSH
9087: LD_INT 123
9089: PPUSH
9090: LD_INT 2
9092: PPUSH
9093: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9097: LD_INT 175
9099: PPUSH
9100: LD_INT 123
9102: PPUSH
9103: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9107: LD_EXP 51
9111: PPUSH
9112: LD_STRING DK-Med-7
9114: PPUSH
9115: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9119: LD_EXP 51
9123: PPUSH
9124: LD_STRING DK-Med-8
9126: PPUSH
9127: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9131: LD_EXP 53
9135: PPUSH
9136: CALL_OW 302
9140: IFFALSE 9154
9142: PUSH
9143: LD_EXP 53
9147: PUSH
9148: LD_EXP 14
9152: IN
9153: AND
9154: IFFALSE 9171
9156: PUSH
9157: LD_EXP 53
9161: PPUSH
9162: CALL_OW 255
9166: PUSH
9167: LD_INT 2
9169: EQUAL
9170: AND
9171: IFFALSE 9229
// begin Say ( Markov , DMar-Med-9 ) ;
9173: LD_EXP 53
9177: PPUSH
9178: LD_STRING DMar-Med-9
9180: PPUSH
9181: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9185: LD_EXP 51
9189: PPUSH
9190: LD_STRING DK-Med-10
9192: PPUSH
9193: CALL_OW 88
// if hasGivi then
9197: LD_VAR 0 2
9201: IFFALSE 9217
// Say ( Kaia , DK-Med-11 ) else
9203: LD_EXP 51
9207: PPUSH
9208: LD_STRING DK-Med-11
9210: PPUSH
9211: CALL_OW 88
9215: GO 9229
// Say ( Kaia , DK-Med-a-11 ) ;
9217: LD_EXP 51
9221: PPUSH
9222: LD_STRING DK-Med-a-11
9224: PPUSH
9225: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9229: LD_EXP 50
9233: PPUSH
9234: CALL_OW 302
9238: IFFALSE 9252
9240: PUSH
9241: LD_EXP 50
9245: PUSH
9246: LD_EXP 14
9250: IN
9251: AND
9252: IFFALSE 9269
9254: PUSH
9255: LD_EXP 50
9259: PPUSH
9260: CALL_OW 255
9264: PUSH
9265: LD_INT 2
9267: EQUAL
9268: AND
9269: IFFALSE 9314
// begin Say ( Kamil , DKam-Med-12 ) ;
9271: LD_EXP 50
9275: PPUSH
9276: LD_STRING DKam-Med-12
9278: PPUSH
9279: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9283: LD_EXP 50
9287: PPUSH
9288: LD_STRING DKam-Med-13
9290: PPUSH
9291: CALL_OW 88
// if not hasExplosionCollected then
9295: LD_EXP 23
9299: NOT
9300: IFFALSE 9314
// Say ( Heike , DH-Med-d-14 ) ;
9302: LD_EXP 46
9306: PPUSH
9307: LD_STRING DH-Med-d-14
9309: PPUSH
9310: CALL_OW 88
// end ; end ; DialogueOff ;
9314: CALL_OW 7
// adminAreaDiscovered := true ;
9318: LD_ADDR_EXP 22
9322: PUSH
9323: LD_INT 1
9325: ST_TO_ADDR
// laundryAllowed := true ;
9326: LD_ADDR_EXP 26
9330: PUSH
9331: LD_INT 1
9333: ST_TO_ADDR
// end ;
9334: PPOPN 2
9336: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9337: LD_EXP 49
9341: NOT
9342: IFFALSE 9350
9344: PUSH
9345: LD_EXP 56
9349: AND
9350: IFFALSE 9365
9352: PUSH
9353: LD_EXP 56
9357: PUSH
9358: LD_EXP 14
9362: IN
9363: NOT
9364: AND
9365: IFFALSE 9392
9367: PUSH
9368: LD_EXP 14
9372: PPUSH
9373: LD_INT 22
9375: PUSH
9376: LD_INT 2
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 72
9387: PUSH
9388: LD_INT 4
9390: GREATER
9391: AND
9392: IFFALSE 9401
9394: PUSH
9395: LD_EXP 17
9399: NOT
9400: AND
9401: IFFALSE 9410
9403: PUSH
9404: LD_EXP 30
9408: NOT
9409: AND
9410: IFFALSE 10147
9412: GO 9414
9414: DISABLE
9415: LD_INT 0
9417: PPUSH
9418: PPUSH
// begin DialogueOn ;
9419: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9423: LD_ADDR_VAR 0 1
9427: PUSH
9428: LD_EXP 47
9432: PPUSH
9433: CALL_OW 302
9437: IFFALSE 9451
9439: PUSH
9440: LD_EXP 47
9444: PUSH
9445: LD_EXP 14
9449: IN
9450: AND
9451: IFFALSE 9468
9453: PUSH
9454: LD_EXP 47
9458: PPUSH
9459: CALL_OW 255
9463: PUSH
9464: LD_INT 2
9466: EQUAL
9467: AND
9468: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9469: LD_EXP 46
9473: PPUSH
9474: LD_STRING DH-Med-a-1
9476: PPUSH
9477: CALL_OW 88
// if hasGivi then
9481: LD_VAR 0 1
9485: IFFALSE 9501
// Say ( Givi , DG-Med-a-2 ) else
9487: LD_EXP 47
9491: PPUSH
9492: LD_STRING DG-Med-a-2
9494: PPUSH
9495: CALL_OW 88
9499: GO 9606
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9501: LD_EXP 14
9505: PUSH
9506: LD_EXP 57
9510: ISECT
9511: PPUSH
9512: LD_INT 22
9514: PUSH
9515: LD_INT 2
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 26
9524: PUSH
9525: LD_INT 1
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PPUSH
9536: CALL_OW 72
9540: PUSH
9541: LD_INT 1
9543: ARRAY
9544: PPUSH
9545: LD_STRING DArm-Med-f-2
9547: PPUSH
9548: CALL_OW 88
9552: NOT
9553: IFFALSE 9606
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9555: LD_EXP 14
9559: PUSH
9560: LD_EXP 57
9564: ISECT
9565: PPUSH
9566: LD_INT 22
9568: PUSH
9569: LD_INT 2
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 26
9578: PUSH
9579: LD_INT 2
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: CALL_OW 72
9594: PUSH
9595: LD_INT 1
9597: ARRAY
9598: PPUSH
9599: LD_STRING DArf-Med-f-2
9601: PPUSH
9602: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9606: LD_INT 154
9608: PPUSH
9609: LD_INT 119
9611: PPUSH
9612: LD_INT 70
9614: PPUSH
9615: CALL 20771 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9619: LD_EXP 46
9623: PPUSH
9624: LD_STRING DH-Med-a-3
9626: PPUSH
9627: CALL_OW 88
// if hasGivi then
9631: LD_VAR 0 1
9635: IFFALSE 9651
// Say ( Givi , DG-Med-a-4 ) else
9637: LD_EXP 47
9641: PPUSH
9642: LD_STRING DG-Med-a-4
9644: PPUSH
9645: CALL_OW 88
9649: GO 9756
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9651: LD_EXP 14
9655: PUSH
9656: LD_EXP 57
9660: ISECT
9661: PPUSH
9662: LD_INT 22
9664: PUSH
9665: LD_INT 2
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: PUSH
9672: LD_INT 26
9674: PUSH
9675: LD_INT 1
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PPUSH
9686: CALL_OW 72
9690: PUSH
9691: LD_INT 1
9693: ARRAY
9694: PPUSH
9695: LD_STRING DArm-Med-f-4
9697: PPUSH
9698: CALL_OW 88
9702: NOT
9703: IFFALSE 9756
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9705: LD_EXP 14
9709: PUSH
9710: LD_EXP 57
9714: ISECT
9715: PPUSH
9716: LD_INT 22
9718: PUSH
9719: LD_INT 2
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: LD_INT 26
9728: PUSH
9729: LD_INT 2
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: PPUSH
9740: CALL_OW 72
9744: PUSH
9745: LD_INT 1
9747: ARRAY
9748: PPUSH
9749: LD_STRING DArf-Med-f-4
9751: PPUSH
9752: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: LD_EXP 51
9765: PPUSH
9766: CALL_OW 302
9770: IFFALSE 9784
9772: PUSH
9773: LD_EXP 51
9777: PUSH
9778: LD_EXP 14
9782: IN
9783: AND
9784: IFFALSE 9801
9786: PUSH
9787: LD_EXP 51
9791: PPUSH
9792: CALL_OW 255
9796: PUSH
9797: LD_INT 2
9799: EQUAL
9800: AND
9801: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9802: LD_EXP 48
9806: PPUSH
9807: CALL_OW 302
9811: IFFALSE 9825
9813: PUSH
9814: LD_EXP 48
9818: PUSH
9819: LD_EXP 14
9823: IN
9824: AND
9825: IFFALSE 9842
9827: PUSH
9828: LD_EXP 48
9832: PPUSH
9833: CALL_OW 255
9837: PUSH
9838: LD_INT 2
9840: EQUAL
9841: AND
9842: IFFALSE 9874
// begin Say ( Mike , DM-Med-5 ) ;
9844: LD_EXP 48
9848: PPUSH
9849: LD_STRING DM-Med-5
9851: PPUSH
9852: CALL_OW 88
// if hasKaia then
9856: LD_VAR 0 2
9860: IFFALSE 9874
// Say ( Kaia , DK-Med-6 ) ;
9862: LD_EXP 51
9866: PPUSH
9867: LD_STRING DK-Med-6
9869: PPUSH
9870: CALL_OW 88
// end ; if hasKaia then
9874: LD_VAR 0 2
9878: IFFALSE 10127
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9880: LD_INT 175
9882: PPUSH
9883: LD_INT 123
9885: PPUSH
9886: LD_INT 2
9888: PPUSH
9889: LD_INT 8
9891: NEG
9892: PPUSH
9893: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9897: LD_INT 175
9899: PPUSH
9900: LD_INT 123
9902: PPUSH
9903: LD_INT 2
9905: PPUSH
9906: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9910: LD_INT 175
9912: PPUSH
9913: LD_INT 123
9915: PPUSH
9916: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9920: LD_EXP 51
9924: PPUSH
9925: LD_STRING DK-Med-7
9927: PPUSH
9928: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9932: LD_EXP 51
9936: PPUSH
9937: LD_STRING DK-Med-8
9939: PPUSH
9940: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9944: LD_EXP 53
9948: PPUSH
9949: CALL_OW 302
9953: IFFALSE 9967
9955: PUSH
9956: LD_EXP 53
9960: PUSH
9961: LD_EXP 14
9965: IN
9966: AND
9967: IFFALSE 9984
9969: PUSH
9970: LD_EXP 53
9974: PPUSH
9975: CALL_OW 255
9979: PUSH
9980: LD_INT 2
9982: EQUAL
9983: AND
9984: IFFALSE 10042
// begin Say ( Markov , DMar-Med-9 ) ;
9986: LD_EXP 53
9990: PPUSH
9991: LD_STRING DMar-Med-9
9993: PPUSH
9994: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9998: LD_EXP 51
10002: PPUSH
10003: LD_STRING DK-Med-10
10005: PPUSH
10006: CALL_OW 88
// if hasGivi then
10010: LD_VAR 0 1
10014: IFFALSE 10030
// Say ( Kaia , DK-Med-11 ) else
10016: LD_EXP 51
10020: PPUSH
10021: LD_STRING DK-Med-11
10023: PPUSH
10024: CALL_OW 88
10028: GO 10042
// Say ( Kaia , DK-Med-a-11 ) ;
10030: LD_EXP 51
10034: PPUSH
10035: LD_STRING DK-Med-a-11
10037: PPUSH
10038: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10042: LD_EXP 50
10046: PPUSH
10047: CALL_OW 302
10051: IFFALSE 10065
10053: PUSH
10054: LD_EXP 50
10058: PUSH
10059: LD_EXP 14
10063: IN
10064: AND
10065: IFFALSE 10082
10067: PUSH
10068: LD_EXP 50
10072: PPUSH
10073: CALL_OW 255
10077: PUSH
10078: LD_INT 2
10080: EQUAL
10081: AND
10082: IFFALSE 10127
// begin Say ( Kamil , DKam-Med-12 ) ;
10084: LD_EXP 50
10088: PPUSH
10089: LD_STRING DKam-Med-12
10091: PPUSH
10092: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10096: LD_EXP 50
10100: PPUSH
10101: LD_STRING DKam-Med-13
10103: PPUSH
10104: CALL_OW 88
// if not hasExplosionCollected then
10108: LD_EXP 23
10112: NOT
10113: IFFALSE 10127
// Say ( Heike , DH-Med-d-14 ) ;
10115: LD_EXP 46
10119: PPUSH
10120: LD_STRING DH-Med-d-14
10122: PPUSH
10123: CALL_OW 88
// end ; end ; DialogueOff ;
10127: CALL_OW 7
// adminAreaDiscovered := true ;
10131: LD_ADDR_EXP 22
10135: PUSH
10136: LD_INT 1
10138: ST_TO_ADDR
// laundryAllowed := true ;
10139: LD_ADDR_EXP 26
10143: PUSH
10144: LD_INT 1
10146: ST_TO_ADDR
// end ;
10147: PPOPN 2
10149: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
10150: LD_EXP 49
10154: IFFALSE 10163
10156: PUSH
10157: LD_EXP 56
10161: NOT
10162: AND
10163: IFFALSE 10178
10165: PUSH
10166: LD_EXP 49
10170: PUSH
10171: LD_EXP 14
10175: IN
10176: NOT
10177: AND
10178: IFFALSE 10205
10180: PUSH
10181: LD_EXP 14
10185: PPUSH
10186: LD_INT 22
10188: PUSH
10189: LD_INT 2
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PUSH
10201: LD_INT 4
10203: GREATER
10204: AND
10205: IFFALSE 10214
10207: PUSH
10208: LD_EXP 17
10212: NOT
10213: AND
10214: IFFALSE 10223
10216: PUSH
10217: LD_EXP 30
10221: NOT
10222: AND
10223: IFFALSE 10960
10225: GO 10227
10227: DISABLE
10228: LD_INT 0
10230: PPUSH
10231: PPUSH
// begin DialogueOn ;
10232: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
10236: LD_ADDR_VAR 0 1
10240: PUSH
10241: LD_EXP 47
10245: PPUSH
10246: CALL_OW 302
10250: IFFALSE 10264
10252: PUSH
10253: LD_EXP 47
10257: PUSH
10258: LD_EXP 14
10262: IN
10263: AND
10264: IFFALSE 10281
10266: PUSH
10267: LD_EXP 47
10271: PPUSH
10272: CALL_OW 255
10276: PUSH
10277: LD_INT 2
10279: EQUAL
10280: AND
10281: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10282: LD_EXP 46
10286: PPUSH
10287: LD_STRING DH-Med-b-1
10289: PPUSH
10290: CALL_OW 88
// if hasGivi then
10294: LD_VAR 0 1
10298: IFFALSE 10314
// Say ( Givi , DG-Med-a-2 ) else
10300: LD_EXP 47
10304: PPUSH
10305: LD_STRING DG-Med-a-2
10307: PPUSH
10308: CALL_OW 88
10312: GO 10419
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10314: LD_EXP 14
10318: PUSH
10319: LD_EXP 57
10323: ISECT
10324: PPUSH
10325: LD_INT 22
10327: PUSH
10328: LD_INT 2
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 26
10337: PUSH
10338: LD_INT 1
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 72
10353: PUSH
10354: LD_INT 1
10356: ARRAY
10357: PPUSH
10358: LD_STRING DArm-Med-f-2
10360: PPUSH
10361: CALL_OW 88
10365: NOT
10366: IFFALSE 10419
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10368: LD_EXP 14
10372: PUSH
10373: LD_EXP 57
10377: ISECT
10378: PPUSH
10379: LD_INT 22
10381: PUSH
10382: LD_INT 2
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: LD_INT 26
10391: PUSH
10392: LD_INT 2
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 72
10407: PUSH
10408: LD_INT 1
10410: ARRAY
10411: PPUSH
10412: LD_STRING DArf-Med-f-2
10414: PPUSH
10415: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10419: LD_INT 154
10421: PPUSH
10422: LD_INT 119
10424: PPUSH
10425: LD_INT 70
10427: PPUSH
10428: CALL 20771 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10432: LD_EXP 46
10436: PPUSH
10437: LD_STRING DH-Med-a-3
10439: PPUSH
10440: CALL_OW 88
// if hasGivi then
10444: LD_VAR 0 1
10448: IFFALSE 10464
// Say ( Givi , DG-Med-a-4 ) else
10450: LD_EXP 47
10454: PPUSH
10455: LD_STRING DG-Med-a-4
10457: PPUSH
10458: CALL_OW 88
10462: GO 10569
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10464: LD_EXP 14
10468: PUSH
10469: LD_EXP 57
10473: ISECT
10474: PPUSH
10475: LD_INT 22
10477: PUSH
10478: LD_INT 2
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 26
10487: PUSH
10488: LD_INT 1
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PPUSH
10499: CALL_OW 72
10503: PUSH
10504: LD_INT 1
10506: ARRAY
10507: PPUSH
10508: LD_STRING DArm-Med-f-4
10510: PPUSH
10511: CALL_OW 88
10515: NOT
10516: IFFALSE 10569
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10518: LD_EXP 14
10522: PUSH
10523: LD_EXP 57
10527: ISECT
10528: PPUSH
10529: LD_INT 22
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 26
10541: PUSH
10542: LD_INT 2
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PPUSH
10553: CALL_OW 72
10557: PUSH
10558: LD_INT 1
10560: ARRAY
10561: PPUSH
10562: LD_STRING DArf-Med-f-4
10564: PPUSH
10565: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: LD_EXP 51
10578: PPUSH
10579: CALL_OW 302
10583: IFFALSE 10597
10585: PUSH
10586: LD_EXP 51
10590: PUSH
10591: LD_EXP 14
10595: IN
10596: AND
10597: IFFALSE 10614
10599: PUSH
10600: LD_EXP 51
10604: PPUSH
10605: CALL_OW 255
10609: PUSH
10610: LD_INT 2
10612: EQUAL
10613: AND
10614: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10615: LD_EXP 48
10619: PPUSH
10620: CALL_OW 302
10624: IFFALSE 10638
10626: PUSH
10627: LD_EXP 48
10631: PUSH
10632: LD_EXP 14
10636: IN
10637: AND
10638: IFFALSE 10655
10640: PUSH
10641: LD_EXP 48
10645: PPUSH
10646: CALL_OW 255
10650: PUSH
10651: LD_INT 2
10653: EQUAL
10654: AND
10655: IFFALSE 10687
// begin Say ( Mike , DM-Med-5 ) ;
10657: LD_EXP 48
10661: PPUSH
10662: LD_STRING DM-Med-5
10664: PPUSH
10665: CALL_OW 88
// if hasKaia then
10669: LD_VAR 0 2
10673: IFFALSE 10687
// Say ( Kaia , DK-Med-6 ) ;
10675: LD_EXP 51
10679: PPUSH
10680: LD_STRING DK-Med-6
10682: PPUSH
10683: CALL_OW 88
// end ; if hasKaia then
10687: LD_VAR 0 2
10691: IFFALSE 10940
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10693: LD_INT 175
10695: PPUSH
10696: LD_INT 123
10698: PPUSH
10699: LD_INT 2
10701: PPUSH
10702: LD_INT 8
10704: NEG
10705: PPUSH
10706: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10710: LD_INT 175
10712: PPUSH
10713: LD_INT 123
10715: PPUSH
10716: LD_INT 2
10718: PPUSH
10719: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10723: LD_INT 175
10725: PPUSH
10726: LD_INT 123
10728: PPUSH
10729: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10733: LD_EXP 51
10737: PPUSH
10738: LD_STRING DK-Med-7
10740: PPUSH
10741: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10745: LD_EXP 51
10749: PPUSH
10750: LD_STRING DK-Med-8
10752: PPUSH
10753: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10757: LD_EXP 53
10761: PPUSH
10762: CALL_OW 302
10766: IFFALSE 10780
10768: PUSH
10769: LD_EXP 53
10773: PUSH
10774: LD_EXP 14
10778: IN
10779: AND
10780: IFFALSE 10797
10782: PUSH
10783: LD_EXP 53
10787: PPUSH
10788: CALL_OW 255
10792: PUSH
10793: LD_INT 2
10795: EQUAL
10796: AND
10797: IFFALSE 10855
// begin Say ( Markov , DMar-Med-9 ) ;
10799: LD_EXP 53
10803: PPUSH
10804: LD_STRING DMar-Med-9
10806: PPUSH
10807: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10811: LD_EXP 51
10815: PPUSH
10816: LD_STRING DK-Med-10
10818: PPUSH
10819: CALL_OW 88
// if hasGivi then
10823: LD_VAR 0 1
10827: IFFALSE 10843
// Say ( Kaia , DK-Med-11 ) else
10829: LD_EXP 51
10833: PPUSH
10834: LD_STRING DK-Med-11
10836: PPUSH
10837: CALL_OW 88
10841: GO 10855
// Say ( Kaia , DK-Med-a-11 ) ;
10843: LD_EXP 51
10847: PPUSH
10848: LD_STRING DK-Med-a-11
10850: PPUSH
10851: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10855: LD_EXP 50
10859: PPUSH
10860: CALL_OW 302
10864: IFFALSE 10878
10866: PUSH
10867: LD_EXP 50
10871: PUSH
10872: LD_EXP 14
10876: IN
10877: AND
10878: IFFALSE 10895
10880: PUSH
10881: LD_EXP 50
10885: PPUSH
10886: CALL_OW 255
10890: PUSH
10891: LD_INT 2
10893: EQUAL
10894: AND
10895: IFFALSE 10940
// begin Say ( Kamil , DKam-Med-12 ) ;
10897: LD_EXP 50
10901: PPUSH
10902: LD_STRING DKam-Med-12
10904: PPUSH
10905: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10909: LD_EXP 50
10913: PPUSH
10914: LD_STRING DKam-Med-13
10916: PPUSH
10917: CALL_OW 88
// if not hasExplosionCollected then
10921: LD_EXP 23
10925: NOT
10926: IFFALSE 10940
// Say ( Heike , DH-Med-d-14 ) ;
10928: LD_EXP 46
10932: PPUSH
10933: LD_STRING DH-Med-d-14
10935: PPUSH
10936: CALL_OW 88
// end ; end ; DialogueOff ;
10940: CALL_OW 7
// adminAreaDiscovered := true ;
10944: LD_ADDR_EXP 22
10948: PUSH
10949: LD_INT 1
10951: ST_TO_ADDR
// laundryAllowed := true ;
10952: LD_ADDR_EXP 26
10956: PUSH
10957: LD_INT 1
10959: ST_TO_ADDR
// end ;
10960: PPOPN 2
10962: END
// every 0 0$1 trigger laundryAllowed do
10963: LD_EXP 26
10967: IFFALSE 10979
10969: GO 10971
10971: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10972: LD_STRING M1-laundry
10974: PPUSH
10975: CALL_OW 337
10979: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10980: LD_EXP 49
10984: NOT
10985: IFFALSE 10994
10987: PUSH
10988: LD_EXP 56
10992: NOT
10993: AND
10994: IFFALSE 11007
10996: PUSH
10997: LD_EXP 54
11001: PPUSH
11002: CALL_OW 302
11006: AND
11007: IFFALSE 11021
11009: PUSH
11010: LD_EXP 54
11014: PUSH
11015: LD_EXP 14
11019: IN
11020: AND
11021: IFFALSE 11038
11023: PUSH
11024: LD_EXP 54
11028: PPUSH
11029: CALL_OW 255
11033: PUSH
11034: LD_INT 2
11036: EQUAL
11037: AND
11038: IFFALSE 11047
11040: PUSH
11041: LD_EXP 17
11045: NOT
11046: AND
11047: IFFALSE 11056
11049: PUSH
11050: LD_EXP 30
11054: NOT
11055: AND
11056: IFFALSE 11216
11058: GO 11060
11060: DISABLE
// begin DialogueOn ;
11061: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
11065: LD_INT 152
11067: PPUSH
11068: LD_INT 115
11070: PPUSH
11071: LD_INT 2
11073: PPUSH
11074: LD_INT 16
11076: NEG
11077: PPUSH
11078: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
11082: LD_INT 152
11084: PPUSH
11085: LD_INT 115
11087: PPUSH
11088: LD_INT 2
11090: PPUSH
11091: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
11095: LD_INT 152
11097: PPUSH
11098: LD_INT 115
11100: PPUSH
11101: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
11105: LD_EXP 54
11109: PPUSH
11110: LD_STRING DO-Med-c-1
11112: PPUSH
11113: CALL_OW 88
// if not hasExplosionCollected then
11117: LD_EXP 23
11121: NOT
11122: IFFALSE 11138
// Say ( Heike , DH-Med-d-14 ) else
11124: LD_EXP 46
11128: PPUSH
11129: LD_STRING DH-Med-d-14
11131: PPUSH
11132: CALL_OW 88
11136: GO 11204
// begin Say ( Heike , DH-Med-c-2 ) ;
11138: LD_EXP 46
11142: PPUSH
11143: LD_STRING DH-Med-c-2
11145: PPUSH
11146: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
11150: LD_EXP 51
11154: PPUSH
11155: CALL_OW 302
11159: IFFALSE 11173
11161: PUSH
11162: LD_EXP 51
11166: PUSH
11167: LD_EXP 14
11171: IN
11172: AND
11173: IFFALSE 11190
11175: PUSH
11176: LD_EXP 51
11180: PPUSH
11181: CALL_OW 255
11185: PUSH
11186: LD_INT 2
11188: EQUAL
11189: AND
11190: IFFALSE 11204
// Say ( Kaia , DK-Med-c-3 ) ;
11192: LD_EXP 51
11196: PPUSH
11197: LD_STRING DK-Med-c-3
11199: PPUSH
11200: CALL_OW 88
// end ; DialogueOff ;
11204: CALL_OW 7
// adminAreaDiscovered := true ;
11208: LD_ADDR_EXP 22
11212: PUSH
11213: LD_INT 1
11215: ST_TO_ADDR
// end ;
11216: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
11217: LD_EXP 51
11221: PPUSH
11222: CALL_OW 256
11226: PUSH
11227: LD_INT 250
11229: LESS
11230: IFFALSE 11244
11232: PUSH
11233: LD_EXP 51
11237: PUSH
11238: LD_EXP 14
11242: IN
11243: AND
11244: IFFALSE 11252
11246: PUSH
11247: LD_EXP 17
11251: AND
11252: IFFALSE 11260
11254: PUSH
11255: LD_EXP 24
11259: AND
11260: IFFALSE 11389
11262: GO 11264
11264: DISABLE
// begin DialogueOn ;
11265: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
11269: LD_EXP 51
11273: PPUSH
11274: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
11278: LD_EXP 51
11282: PPUSH
11283: LD_STRING DK-death-1
11285: PPUSH
11286: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
11290: LD_EXP 46
11294: PPUSH
11295: LD_STRING DH-death-2
11297: PPUSH
11298: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11302: LD_EXP 51
11306: PPUSH
11307: LD_STRING DK-death-3
11309: PPUSH
11310: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11314: LD_EXP 51
11318: PPUSH
11319: LD_STRING DK-death-4
11321: PPUSH
11322: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11326: LD_EXP 51
11330: PPUSH
11331: LD_INT 8
11333: PPUSH
11334: CALL_OW 235
// ComStop ( Kaia ) ;
11338: LD_EXP 51
11342: PPUSH
11343: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11347: LD_INT 8
11349: PPUSH
11350: LD_INT 2
11352: PPUSH
11353: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11357: LD_ADDR_EXP 14
11361: PUSH
11362: LD_EXP 14
11366: PUSH
11367: LD_EXP 51
11371: DIFF
11372: ST_TO_ADDR
// DialogueOff ;
11373: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11377: LD_EXP 48
11381: PPUSH
11382: LD_STRING DM-death-5
11384: PPUSH
11385: CALL_OW 88
// end ;
11389: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11390: LD_EXP 25
11394: NOT
11395: IFFALSE 11404
11397: PUSH
11398: LD_EXP 30
11402: NOT
11403: AND
11404: IFFALSE 11419
11406: PUSH
11407: LD_EXP 59
11411: PUSH
11412: LD_EXP 14
11416: IN
11417: NOT
11418: AND
11419: IFFALSE 11435
11421: PUSH
11422: LD_INT 2
11424: PPUSH
11425: LD_EXP 59
11429: PPUSH
11430: CALL_OW 292
11434: AND
11435: IFFALSE 11457
11437: PUSH
11438: LD_EXP 46
11442: PPUSH
11443: LD_EXP 59
11447: PPUSH
11448: CALL_OW 296
11452: PUSH
11453: LD_INT 6
11455: LESS
11456: AND
11457: IFFALSE 11466
11459: PUSH
11460: LD_EXP 17
11464: NOT
11465: AND
11466: IFFALSE 11690
11468: GO 11470
11470: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11471: LD_EXP 59
11475: PPUSH
11476: LD_EXP 46
11480: PPUSH
11481: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11485: LD_EXP 46
11489: PPUSH
11490: LD_EXP 59
11494: PPUSH
11495: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11499: LD_INT 10
11501: PPUSH
11502: CALL_OW 67
// DialogueOn ;
11506: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11510: LD_EXP 59
11514: PPUSH
11515: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11519: LD_EXP 46
11523: PPUSH
11524: LD_STRING DH-Deal-1
11526: PPUSH
11527: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11531: LD_EXP 59
11535: PPUSH
11536: LD_STRING DJ-Deal-2
11538: PPUSH
11539: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11543: LD_EXP 46
11547: PPUSH
11548: LD_STRING DH-Deal-3
11550: PPUSH
11551: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11555: LD_EXP 59
11559: PPUSH
11560: LD_STRING DJ-Deal-4
11562: PPUSH
11563: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11567: LD_EXP 59
11571: PPUSH
11572: LD_STRING DJ-Deal-5
11574: PPUSH
11575: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11579: LD_EXP 59
11583: PPUSH
11584: LD_STRING DJ-Deal-6
11586: PPUSH
11587: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11591: LD_EXP 59
11595: PPUSH
11596: LD_STRING DJ-Deal-7
11598: PPUSH
11599: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11603: LD_EXP 46
11607: PPUSH
11608: LD_STRING DH-Deal-8
11610: PPUSH
11611: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11615: LD_EXP 46
11619: PPUSH
11620: LD_STRING DH-Deal-9
11622: PPUSH
11623: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11627: LD_EXP 59
11631: PPUSH
11632: LD_STRING DJ-Deal-10
11634: PPUSH
11635: CALL_OW 88
// DialogueOff ;
11639: CALL_OW 7
// contactWithAmerican := true ;
11643: LD_ADDR_EXP 25
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11651: LD_STRING M1-american-out
11653: PPUSH
11654: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11658: LD_EXP 59
11662: PPUSH
11663: LD_INT 2
11665: PPUSH
11666: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11670: LD_ADDR_EXP 14
11674: PUSH
11675: LD_EXP 14
11679: PPUSH
11680: LD_EXP 59
11684: PPUSH
11685: CALL 68440 0 2
11689: ST_TO_ADDR
// end ;
11690: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11691: LD_EXP 25
11695: IFFALSE 11704
11697: PUSH
11698: LD_EXP 30
11702: NOT
11703: AND
11704: IFFALSE 11719
11706: PUSH
11707: LD_EXP 59
11711: PUSH
11712: LD_EXP 14
11716: IN
11717: NOT
11718: AND
11719: IFFALSE 11735
11721: PUSH
11722: LD_INT 2
11724: PPUSH
11725: LD_EXP 59
11729: PPUSH
11730: CALL_OW 292
11734: AND
11735: IFFALSE 11757
11737: PUSH
11738: LD_EXP 46
11742: PPUSH
11743: LD_EXP 59
11747: PPUSH
11748: CALL_OW 296
11752: PUSH
11753: LD_INT 6
11755: LESS
11756: AND
11757: IFFALSE 11766
11759: PUSH
11760: LD_EXP 17
11764: NOT
11765: AND
11766: IFFALSE 11891
11768: GO 11770
11770: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11771: LD_EXP 59
11775: PPUSH
11776: LD_EXP 46
11780: PPUSH
11781: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11785: LD_EXP 46
11789: PPUSH
11790: LD_EXP 59
11794: PPUSH
11795: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11799: LD_INT 10
11801: PPUSH
11802: CALL_OW 67
// DialogueOn ;
11806: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11810: LD_EXP 59
11814: PPUSH
11815: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11819: LD_EXP 59
11823: PPUSH
11824: LD_STRING DJ-Escort-1
11826: PPUSH
11827: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11831: LD_EXP 46
11835: PPUSH
11836: LD_STRING DH-Escort-2
11838: PPUSH
11839: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11843: LD_EXP 59
11847: PPUSH
11848: LD_STRING DJ-Escort-3
11850: PPUSH
11851: CALL_OW 88
// DialogueOff ;
11855: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11859: LD_EXP 59
11863: PPUSH
11864: LD_INT 2
11866: PPUSH
11867: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11871: LD_ADDR_EXP 14
11875: PUSH
11876: LD_EXP 14
11880: PPUSH
11881: LD_EXP 59
11885: PPUSH
11886: CALL 68440 0 2
11890: ST_TO_ADDR
// end ;
11891: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11892: LD_EXP 25
11896: IFFALSE 11905
11898: PUSH
11899: LD_EXP 30
11903: NOT
11904: AND
11905: IFFALSE 11966
11907: PUSH
11908: LD_EXP 58
11912: PUSH
11913: LD_EXP 14
11917: DIFF
11918: PPUSH
11919: LD_INT 22
11921: PUSH
11922: LD_INT 4
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: LD_INT 3
11931: PUSH
11932: LD_INT 120
11934: PUSH
11935: LD_INT 1
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 101
11948: PUSH
11949: LD_INT 2
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: PPUSH
11961: CALL_OW 72
11965: AND
11966: IFFALSE 11975
11968: PUSH
11969: LD_EXP 17
11973: NOT
11974: AND
11975: IFFALSE 12202
11977: GO 11979
11979: DISABLE
11980: LD_INT 0
11982: PPUSH
// begin enable ;
11983: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11984: LD_ADDR_VAR 0 1
11988: PUSH
11989: LD_EXP 58
11993: PUSH
11994: LD_EXP 14
11998: DIFF
11999: PPUSH
12000: LD_INT 22
12002: PUSH
12003: LD_INT 4
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 91
12012: PUSH
12013: LD_EXP 46
12017: PUSH
12018: LD_INT 6
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 101
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: PPUSH
12041: CALL_OW 72
12045: PPUSH
12046: LD_EXP 46
12050: PPUSH
12051: CALL_OW 74
12055: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12056: LD_VAR 0 1
12060: PPUSH
12061: LD_EXP 46
12065: PPUSH
12066: CALL_OW 296
12070: PUSH
12071: LD_INT 6
12073: LESS
12074: IFFALSE 12202
// begin DialogueOn ;
12076: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12080: LD_VAR 0 1
12084: PPUSH
12085: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12089: LD_EXP 46
12093: PPUSH
12094: LD_STRING DH-USsol-1
12096: PPUSH
12097: CALL_OW 88
// if un <> Jerry then
12101: LD_VAR 0 1
12105: PUSH
12106: LD_EXP 61
12110: NONEQUAL
12111: IFFALSE 12154
// if GetSex ( un ) = sex_male then
12113: LD_VAR 0 1
12117: PPUSH
12118: CALL_OW 258
12122: PUSH
12123: LD_INT 1
12125: EQUAL
12126: IFFALSE 12142
// Say ( un , DUSM-USsol-2 ) else
12128: LD_VAR 0 1
12132: PPUSH
12133: LD_STRING DUSM-USsol-2
12135: PPUSH
12136: CALL_OW 88
12140: GO 12154
// Say ( un , DUSF-USsol-2 ) ;
12142: LD_VAR 0 1
12146: PPUSH
12147: LD_STRING DUSF-USsol-2
12149: PPUSH
12150: CALL_OW 88
// DialogueOff ;
12154: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12158: LD_ADDR_EXP 14
12162: PUSH
12163: LD_EXP 14
12167: PPUSH
12168: LD_VAR 0 1
12172: PPUSH
12173: CALL 68440 0 2
12177: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12178: LD_VAR 0 1
12182: PPUSH
12183: LD_INT 1
12185: PPUSH
12186: CALL_OW 109
// SetSide ( un , 2 ) ;
12190: LD_VAR 0 1
12194: PPUSH
12195: LD_INT 2
12197: PPUSH
12198: CALL_OW 235
// end ; end ;
12202: PPOPN 1
12204: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
12205: LD_EXP 57
12209: IFFALSE 12218
12211: PUSH
12212: LD_EXP 30
12216: NOT
12217: AND
12218: IFFALSE 12285
12220: PUSH
12221: LD_EXP 57
12225: PUSH
12226: LD_EXP 14
12230: DIFF
12231: PPUSH
12232: LD_INT 3
12234: PUSH
12235: LD_INT 120
12237: PUSH
12238: LD_INT 1
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 91
12251: PUSH
12252: LD_EXP 46
12256: PUSH
12257: LD_INT 6
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 101
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: PPUSH
12280: CALL_OW 72
12284: AND
12285: IFFALSE 12294
12287: PUSH
12288: LD_EXP 17
12292: NOT
12293: AND
12294: IFFALSE 12509
12296: GO 12298
12298: DISABLE
12299: LD_INT 0
12301: PPUSH
// begin enable ;
12302: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
12303: LD_ADDR_VAR 0 1
12307: PUSH
12308: LD_EXP 57
12312: PUSH
12313: LD_EXP 14
12317: DIFF
12318: PPUSH
12319: LD_INT 22
12321: PUSH
12322: LD_INT 5
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 91
12331: PUSH
12332: LD_EXP 46
12336: PUSH
12337: LD_INT 6
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 101
12347: PUSH
12348: LD_INT 2
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 72
12364: PPUSH
12365: LD_EXP 46
12369: PPUSH
12370: CALL_OW 74
12374: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12375: LD_VAR 0 1
12379: PPUSH
12380: LD_EXP 46
12384: PPUSH
12385: CALL_OW 296
12389: PUSH
12390: LD_INT 6
12392: LESS
12393: IFFALSE 12509
// begin DialogueOn ;
12395: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12399: LD_VAR 0 1
12403: PPUSH
12404: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12408: LD_EXP 46
12412: PPUSH
12413: LD_STRING DH-USsol-1
12415: PPUSH
12416: CALL_OW 88
// if GetSex ( un ) = sex_male then
12420: LD_VAR 0 1
12424: PPUSH
12425: CALL_OW 258
12429: PUSH
12430: LD_INT 1
12432: EQUAL
12433: IFFALSE 12449
// Say ( un , DArm-USsol-2 ) else
12435: LD_VAR 0 1
12439: PPUSH
12440: LD_STRING DArm-USsol-2
12442: PPUSH
12443: CALL_OW 88
12447: GO 12461
// Say ( un , DArf-USsol-3 ) ;
12449: LD_VAR 0 1
12453: PPUSH
12454: LD_STRING DArf-USsol-3
12456: PPUSH
12457: CALL_OW 88
// DialogueOff ;
12461: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12465: LD_ADDR_EXP 14
12469: PUSH
12470: LD_EXP 14
12474: PPUSH
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL 68440 0 2
12484: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12485: LD_VAR 0 1
12489: PPUSH
12490: LD_INT 1
12492: PPUSH
12493: CALL_OW 109
// SetSide ( un , 2 ) ;
12497: LD_VAR 0 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 235
// end ; end ;
12509: PPOPN 1
12511: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12512: LD_EXP 58
12516: PPUSH
12517: LD_INT 101
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PPUSH
12527: CALL_OW 72
12531: IFFALSE 12558
12533: PUSH
12534: LD_EXP 14
12538: PPUSH
12539: LD_INT 22
12541: PUSH
12542: LD_INT 2
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 72
12553: PUSH
12554: LD_INT 5
12556: GREATER
12557: AND
12558: IFFALSE 12567
12560: PUSH
12561: LD_EXP 10
12565: NOT
12566: AND
12567: IFFALSE 12576
12569: PUSH
12570: LD_EXP 30
12574: NOT
12575: AND
12576: IFFALSE 12585
12578: PUSH
12579: LD_EXP 25
12583: NOT
12584: AND
12585: IFFALSE 12594
12587: PUSH
12588: LD_EXP 17
12592: NOT
12593: AND
12594: IFFALSE 12709
12596: GO 12598
12598: DISABLE
12599: LD_INT 0
12601: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12602: LD_ADDR_VAR 0 1
12606: PUSH
12607: LD_EXP 58
12611: PPUSH
12612: LD_INT 22
12614: PUSH
12615: LD_INT 4
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 101
12624: PUSH
12625: LD_INT 2
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PPUSH
12636: CALL_OW 72
12640: PUSH
12641: LD_INT 1
12643: ARRAY
12644: ST_TO_ADDR
// DialogueOn ;
12645: CALL_OW 6
// if GetSex ( un ) = sex_male then
12649: LD_VAR 0 1
12653: PPUSH
12654: CALL_OW 258
12658: PUSH
12659: LD_INT 1
12661: EQUAL
12662: IFFALSE 12678
// Say ( un , DUSm-USsol-a-2 ) else
12664: LD_VAR 0 1
12668: PPUSH
12669: LD_STRING DUSm-USsol-a-2
12671: PPUSH
12672: CALL_OW 88
12676: GO 12690
// Say ( un , DUSf-USsol-a-2 ) ;
12678: LD_VAR 0 1
12682: PPUSH
12683: LD_STRING DUSf-USsol-a-2
12685: PPUSH
12686: CALL_OW 88
// DialogueOff ;
12690: CALL_OW 7
// wait ( 0 0$2 ) ;
12694: LD_INT 70
12696: PPUSH
12697: CALL_OW 67
// isAlarm := true ;
12701: LD_ADDR_EXP 17
12705: PUSH
12706: LD_INT 1
12708: ST_TO_ADDR
// end ;
12709: PPOPN 1
12711: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12712: LD_EXP 17
12716: NOT
12717: IFFALSE 12730
12719: PUSH
12720: LD_EXP 47
12724: PPUSH
12725: CALL_OW 302
12729: AND
12730: IFFALSE 12747
12732: PUSH
12733: LD_EXP 47
12737: PPUSH
12738: CALL_OW 255
12742: PUSH
12743: LD_INT 2
12745: EQUAL
12746: AND
12747: IFFALSE 12755
12749: PUSH
12750: LD_EXP 26
12754: AND
12755: IFFALSE 12764
12757: PUSH
12758: LD_EXP 28
12762: NOT
12763: AND
12764: IFFALSE 12773
12766: PUSH
12767: LD_EXP 27
12771: NOT
12772: AND
12773: IFFALSE 12782
12775: PUSH
12776: LD_EXP 30
12780: NOT
12781: AND
12782: IFFALSE 12798
12784: PUSH
12785: LD_EXP 47
12789: PPUSH
12790: LD_INT 165
12792: PPUSH
12793: CALL 21084 0 2
12797: AND
12798: IFFALSE 12930
12800: GO 12802
12802: DISABLE
// begin enable ;
12803: ENABLE
// InGameOn ;
12804: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12808: LD_EXP 47
12812: PPUSH
12813: LD_INT 5
12815: PPUSH
12816: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12820: LD_INT 165
12822: PPUSH
12823: LD_INT 5
12825: PPUSH
12826: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12830: LD_EXP 47
12834: PPUSH
12835: LD_INT 165
12837: PPUSH
12838: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12842: LD_INT 35
12844: PPUSH
12845: CALL_OW 67
// until IsInUnit ( Givi ) ;
12849: LD_EXP 47
12853: PPUSH
12854: CALL_OW 310
12858: IFFALSE 12842
// case Query ( GiviInLaundry ) of 1 :
12860: LD_STRING GiviInLaundry
12862: PPUSH
12863: CALL_OW 97
12867: PUSH
12868: LD_INT 1
12870: DOUBLE
12871: EQUAL
12872: IFTRUE 12876
12874: GO 12883
12876: POP
// SpawnGiviAsRussian ; 2 :
12877: CALL 1948 0 0
12881: GO 12895
12883: LD_INT 2
12885: DOUBLE
12886: EQUAL
12887: IFTRUE 12891
12889: GO 12894
12891: POP
// ; end ;
12892: GO 12895
12894: POP
// ComExitBuilding ( Givi ) ;
12895: LD_EXP 47
12899: PPUSH
12900: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12904: LD_EXP 47
12908: PPUSH
12909: LD_INT 2
12911: PPUSH
12912: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12916: LD_INT 165
12918: PPUSH
12919: LD_INT 3
12921: PPUSH
12922: CALL_OW 235
// InGameOff ;
12926: CALL_OW 9
// end ;
12930: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12931: LD_EXP 17
12935: NOT
12936: IFFALSE 12944
12938: PUSH
12939: LD_EXP 28
12943: AND
12944: IFFALSE 12961
12946: PUSH
12947: LD_EXP 47
12951: PPUSH
12952: CALL_OW 255
12956: PUSH
12957: LD_INT 2
12959: EQUAL
12960: AND
12961: IFFALSE 12978
12963: PUSH
12964: LD_EXP 47
12968: PPUSH
12969: CALL_OW 248
12973: PUSH
12974: LD_INT 3
12976: EQUAL
12977: AND
12978: IFFALSE 12994
12980: PUSH
12981: LD_EXP 47
12985: PPUSH
12986: LD_INT 119
12988: PPUSH
12989: CALL 21084 0 2
12993: AND
12994: IFFALSE 13003
12996: PUSH
12997: LD_EXP 30
13001: NOT
13002: AND
13003: IFFALSE 13257
13005: GO 13007
13007: DISABLE
// begin InGameOn ;
13008: CALL_OW 8
// SetSide ( Givi , 3 ) ;
13012: LD_EXP 47
13016: PPUSH
13017: LD_INT 3
13019: PPUSH
13020: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13024: LD_INT 10
13026: PPUSH
13027: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
13031: LD_EXP 47
13035: PPUSH
13036: LD_INT 119
13038: PPUSH
13039: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13043: LD_INT 35
13045: PPUSH
13046: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
13050: LD_EXP 47
13054: PPUSH
13055: LD_INT 119
13057: PPUSH
13058: CALL_OW 120
// until IsInUnit ( Givi ) ;
13062: LD_EXP 47
13066: PPUSH
13067: CALL_OW 310
13071: IFFALSE 13043
// DialogueOn ;
13073: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
13077: LD_EXP 47
13081: PPUSH
13082: LD_STRING DG-Captive-1
13084: PPUSH
13085: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
13089: LD_EXP 65
13093: PPUSH
13094: LD_STRING DCom-Captive-2
13096: PPUSH
13097: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
13101: LD_EXP 47
13105: PPUSH
13106: LD_STRING DG-Captive-3
13108: PPUSH
13109: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
13113: LD_EXP 65
13117: PPUSH
13118: LD_STRING DCom-Captive-4
13120: PPUSH
13121: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13125: LD_EXP 65
13129: PPUSH
13130: CALL_OW 64
// DialogueOff ;
13134: CALL_OW 7
// InGameOff ;
13138: CALL_OW 9
// SetSide ( Givi , 2 ) ;
13142: LD_EXP 47
13146: PPUSH
13147: LD_INT 2
13149: PPUSH
13150: CALL_OW 235
// ComExitBuilding ( Givi ) ;
13154: LD_EXP 47
13158: PPUSH
13159: CALL_OW 122
// if Aviradze then
13163: LD_EXP 56
13167: IFFALSE 13210
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13169: LD_ADDR_EXP 14
13173: PUSH
13174: LD_EXP 14
13178: PPUSH
13179: LD_EXP 56
13183: PPUSH
13184: CALL 68440 0 2
13188: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13189: LD_EXP 56
13193: PPUSH
13194: LD_INT 2
13196: PPUSH
13197: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13201: LD_EXP 56
13205: PPUSH
13206: CALL_OW 122
// end ; if Ibrahim then
13210: LD_EXP 49
13214: IFFALSE 13257
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13216: LD_ADDR_EXP 14
13220: PUSH
13221: LD_EXP 14
13225: PPUSH
13226: LD_EXP 49
13230: PPUSH
13231: CALL 68440 0 2
13235: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13236: LD_EXP 49
13240: PPUSH
13241: LD_INT 2
13243: PPUSH
13244: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13248: LD_EXP 49
13252: PPUSH
13253: CALL_OW 122
// end ; end ;
13257: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
13258: LD_EXP 17
13262: NOT
13263: IFFALSE 13271
13265: PUSH
13266: LD_EXP 27
13270: AND
13271: IFFALSE 13288
13273: PUSH
13274: LD_EXP 46
13278: PPUSH
13279: CALL_OW 248
13283: PUSH
13284: LD_INT 3
13286: EQUAL
13287: AND
13288: IFFALSE 13304
13290: PUSH
13291: LD_EXP 46
13295: PPUSH
13296: LD_INT 119
13298: PPUSH
13299: CALL 21084 0 2
13303: AND
13304: IFFALSE 13313
13306: PUSH
13307: LD_EXP 30
13311: NOT
13312: AND
13313: IFFALSE 13614
13315: GO 13317
13317: DISABLE
// begin InGameOn ;
13318: CALL_OW 8
// SetSide ( Heike , 3 ) ;
13322: LD_EXP 46
13326: PPUSH
13327: LD_INT 3
13329: PPUSH
13330: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13334: LD_INT 10
13336: PPUSH
13337: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13341: LD_EXP 46
13345: PPUSH
13346: LD_INT 119
13348: PPUSH
13349: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13353: LD_INT 35
13355: PPUSH
13356: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13360: LD_EXP 46
13364: PPUSH
13365: LD_INT 119
13367: PPUSH
13368: CALL_OW 120
// until IsInUnit ( Heike ) ;
13372: LD_EXP 46
13376: PPUSH
13377: CALL_OW 310
13381: IFFALSE 13353
// wait ( 0 0$1 ) ;
13383: LD_INT 35
13385: PPUSH
13386: CALL_OW 67
// DialogueOn ;
13390: CALL_OW 6
// if Aviradze and Ibrahim then
13394: LD_EXP 56
13398: IFFALSE 13406
13400: PUSH
13401: LD_EXP 49
13405: AND
13406: IFFALSE 13422
// Say ( Heike , DH-Captive-a-1 ) else
13408: LD_EXP 46
13412: PPUSH
13413: LD_STRING DH-Captive-a-1
13415: PPUSH
13416: CALL_OW 88
13420: GO 13434
// Say ( Heike , DH-Captive-a-b-1 ) ;
13422: LD_EXP 46
13426: PPUSH
13427: LD_STRING DH-Captive-a-b-1
13429: PPUSH
13430: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13434: LD_EXP 65
13438: PPUSH
13439: LD_STRING DCom-Captive-a-2
13441: PPUSH
13442: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13446: LD_EXP 46
13450: PPUSH
13451: LD_STRING DH-Captive-a-3
13453: PPUSH
13454: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13458: LD_EXP 65
13462: PPUSH
13463: LD_STRING DCom-Captive-a-4
13465: PPUSH
13466: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13470: LD_EXP 46
13474: PPUSH
13475: LD_STRING DH-Captive-a-5
13477: PPUSH
13478: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13482: LD_EXP 65
13486: PPUSH
13487: CALL_OW 64
// DialogueOff ;
13491: CALL_OW 7
// InGameOff ;
13495: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13499: LD_EXP 46
13503: PPUSH
13504: LD_INT 2
13506: PPUSH
13507: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13511: LD_EXP 46
13515: PPUSH
13516: CALL_OW 122
// if Aviradze then
13520: LD_EXP 56
13524: IFFALSE 13567
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13526: LD_ADDR_EXP 14
13530: PUSH
13531: LD_EXP 14
13535: PPUSH
13536: LD_EXP 56
13540: PPUSH
13541: CALL 68440 0 2
13545: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13546: LD_EXP 56
13550: PPUSH
13551: LD_INT 2
13553: PPUSH
13554: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13558: LD_EXP 56
13562: PPUSH
13563: CALL_OW 122
// end ; if Ibrahim then
13567: LD_EXP 49
13571: IFFALSE 13614
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13573: LD_ADDR_EXP 14
13577: PUSH
13578: LD_EXP 14
13582: PPUSH
13583: LD_EXP 49
13587: PPUSH
13588: CALL 68440 0 2
13592: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13593: LD_EXP 49
13597: PPUSH
13598: LD_INT 2
13600: PPUSH
13601: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13605: LD_EXP 49
13609: PPUSH
13610: CALL_OW 122
// end ; end ;
13614: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13615: LD_INT 2
13617: PUSH
13618: LD_INT 25
13620: PUSH
13621: LD_INT 32
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 25
13630: PUSH
13631: LD_INT 34
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: IFFALSE 13659
13649: GO 13651
13651: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13652: LD_STRING M1-weapons-out
13654: PPUSH
13655: CALL_OW 604
13659: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13660: LD_INT 2
13662: PPUSH
13663: LD_EXP 61
13667: PPUSH
13668: CALL_OW 292
13672: IFFALSE 13690
13674: PUSH
13675: LD_EXP 46
13679: PPUSH
13680: LD_EXP 61
13684: PPUSH
13685: CALL_OW 296
13689: AND
13690: IFFALSE 13699
13692: PUSH
13693: LD_EXP 17
13697: NOT
13698: AND
13699: IFFALSE 13708
13701: PUSH
13702: LD_EXP 30
13706: NOT
13707: AND
13708: IFFALSE 14566
13710: GO 13712
13712: DISABLE
13713: LD_INT 0
13715: PPUSH
13716: PPUSH
// begin if contactWithAmerican then
13717: LD_EXP 25
13721: IFFALSE 13818
// begin DialogueOn ;
13723: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13727: LD_EXP 61
13731: PPUSH
13732: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13736: LD_EXP 46
13740: PPUSH
13741: LD_STRING DH-USsol-1
13743: PPUSH
13744: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13748: LD_EXP 61
13752: PPUSH
13753: LD_INT 2
13755: PPUSH
13756: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13760: LD_ADDR_EXP 58
13764: PUSH
13765: LD_EXP 58
13769: PPUSH
13770: LD_EXP 61
13774: PPUSH
13775: CALL 68440 0 2
13779: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13780: LD_ADDR_EXP 14
13784: PUSH
13785: LD_EXP 14
13789: PPUSH
13790: LD_EXP 48
13794: PPUSH
13795: CALL 68440 0 2
13799: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13800: LD_EXP 61
13804: PPUSH
13805: LD_INT 1
13807: PPUSH
13808: CALL_OW 109
// DialogueOff ;
13812: CALL_OW 7
// exit ;
13816: GO 14566
// end ; DialogueOn ;
13818: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13822: LD_EXP 61
13826: PPUSH
13827: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13831: LD_EXP 61
13835: PPUSH
13836: LD_STRING DJy-Food-1
13838: PPUSH
13839: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13843: LD_EXP 46
13847: PPUSH
13848: LD_STRING DH-Food-2
13850: PPUSH
13851: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13855: LD_EXP 61
13859: PPUSH
13860: LD_STRING DJy-Food-3
13862: PPUSH
13863: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13867: LD_EXP 61
13871: PPUSH
13872: LD_STRING DJy-Food-4
13874: PPUSH
13875: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13879: LD_EXP 46
13883: PPUSH
13884: LD_STRING DH-Food-5
13886: PPUSH
13887: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13891: LD_EXP 61
13895: PPUSH
13896: LD_STRING DJy-Food-6
13898: PPUSH
13899: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13903: LD_EXP 61
13907: PPUSH
13908: LD_STRING DJy-Food-7
13910: PPUSH
13911: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13915: LD_EXP 61
13919: PPUSH
13920: LD_STRING DJy-Food-8
13922: PPUSH
13923: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13927: LD_EXP 46
13931: PPUSH
13932: LD_STRING DH-Food-9
13934: PPUSH
13935: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13939: LD_EXP 61
13943: PPUSH
13944: LD_STRING DJy-Food-10
13946: PPUSH
13947: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13951: LD_EXP 46
13955: PPUSH
13956: LD_STRING DH-Food-11
13958: PPUSH
13959: CALL_OW 88
// DialogueOff ;
13963: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13967: LD_STRING M3
13969: PPUSH
13970: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13974: LD_INT 5
13976: PPUSH
13977: LD_INT 215
13979: PPUSH
13980: LD_INT 117
13982: PPUSH
13983: LD_INT 0
13985: PPUSH
13986: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13990: LD_INT 215
13992: PPUSH
13993: LD_INT 118
13995: PPUSH
13996: LD_INT 2
13998: PPUSH
13999: LD_INT 6
14001: NEG
14002: PPUSH
14003: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
14007: LD_INT 215
14009: PPUSH
14010: LD_INT 118
14012: PPUSH
14013: LD_INT 2
14015: PPUSH
14016: CALL_OW 331
// foodDelivered := false ;
14020: LD_ADDR_VAR 0 2
14024: PUSH
14025: LD_INT 0
14027: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14028: LD_INT 35
14030: PPUSH
14031: CALL_OW 67
// if hasMuchin then
14035: LD_EXP 30
14039: IFFALSE 14043
// continue ;
14041: GO 14028
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
14043: LD_ADDR_VAR 0 1
14047: PUSH
14048: LD_EXP 14
14052: PUSH
14053: LD_EXP 46
14057: UNION
14058: PPUSH
14059: LD_INT 91
14061: PUSH
14062: LD_EXP 61
14066: PUSH
14067: LD_INT 6
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 25
14077: PUSH
14078: LD_INT 33
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 72
14093: PUSH
14094: FOR_IN
14095: IFFALSE 14295
// if Carry ( i ) then
14097: LD_VAR 0 1
14101: PPUSH
14102: CALL_OW 281
14106: IFFALSE 14293
// begin DialogueOn ;
14108: CALL_OW 6
// foodDelivered := true ;
14112: LD_ADDR_VAR 0 2
14116: PUSH
14117: LD_INT 1
14119: ST_TO_ADDR
// case i of Heike :
14120: LD_VAR 0 1
14124: PUSH
14125: LD_EXP 46
14129: DOUBLE
14130: EQUAL
14131: IFTRUE 14135
14133: GO 14150
14135: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
14136: LD_EXP 46
14140: PPUSH
14141: LD_STRING DH-Food-12
14143: PPUSH
14144: CALL_OW 88
14148: GO 14276
14150: LD_EXP 51
14154: DOUBLE
14155: EQUAL
14156: IFTRUE 14160
14158: GO 14175
14160: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
14161: LD_EXP 51
14165: PPUSH
14166: LD_STRING DK-Food-a-12
14168: PPUSH
14169: CALL_OW 88
14173: GO 14276
14175: LD_EXP 53
14179: DOUBLE
14180: EQUAL
14181: IFTRUE 14185
14183: GO 14200
14185: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
14186: LD_EXP 53
14190: PPUSH
14191: LD_STRING DMar-Food-a-12
14193: PPUSH
14194: CALL_OW 88
14198: GO 14276
14200: LD_EXP 47
14204: DOUBLE
14205: EQUAL
14206: IFTRUE 14210
14208: GO 14225
14210: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
14211: LD_EXP 47
14215: PPUSH
14216: LD_STRING DG-Food-a-14
14218: PPUSH
14219: CALL_OW 88
14223: GO 14276
14225: LD_EXP 48
14229: DOUBLE
14230: EQUAL
14231: IFTRUE 14235
14233: GO 14250
14235: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
14236: LD_EXP 48
14240: PPUSH
14241: LD_STRING DM-Food-a-15
14243: PPUSH
14244: CALL_OW 88
14248: GO 14276
14250: LD_EXP 50
14254: DOUBLE
14255: EQUAL
14256: IFTRUE 14260
14258: GO 14275
14260: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
14261: LD_EXP 50
14265: PPUSH
14266: LD_STRING DKam-Food-a-16
14268: PPUSH
14269: CALL_OW 88
14273: GO 14276
14275: POP
// SetCargo ( i , mat_cans , 0 ) ;
14276: LD_VAR 0 1
14280: PPUSH
14281: LD_INT 1
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 290
// break ;
14291: GO 14295
// end ;
14293: GO 14094
14295: POP
14296: POP
// until foodDelivered ;
14297: LD_VAR 0 2
14301: IFFALSE 14028
// givenFood := true ;
14303: LD_ADDR_EXP 33
14307: PUSH
14308: LD_INT 1
14310: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
14311: LD_EXP 61
14315: PPUSH
14316: LD_STRING DJy-Food-13
14318: PPUSH
14319: CALL_OW 88
// hasVirus := true ;
14323: LD_ADDR_EXP 31
14327: PUSH
14328: LD_INT 1
14330: ST_TO_ADDR
// if not americanContact then
14331: LD_EXP 10
14335: NOT
14336: IFFALSE 14386
// begin Say ( Heike , DH-Food-14 ) ;
14338: LD_EXP 46
14342: PPUSH
14343: LD_STRING DH-Food-14
14345: PPUSH
14346: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
14350: LD_EXP 61
14354: PPUSH
14355: LD_STRING DJy-Food-15
14357: PPUSH
14358: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
14362: LD_EXP 61
14366: PPUSH
14367: LD_STRING DJy-Food-16
14369: PPUSH
14370: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
14374: LD_EXP 61
14378: PPUSH
14379: LD_STRING DJy-Food-17
14381: PPUSH
14382: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14386: LD_STRING M3-out
14388: PPUSH
14389: CALL_OW 337
// DialogueOff ;
14393: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
14397: LD_EXP 61
14401: PPUSH
14402: LD_INT 1
14404: PPUSH
14405: LD_INT 10
14407: PPUSH
14408: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14412: LD_EXP 61
14416: PPUSH
14417: LD_INT 95
14419: PPUSH
14420: LD_INT 17
14422: PPUSH
14423: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14427: LD_INT 35
14429: PPUSH
14430: CALL_OW 67
// if not HasTask ( Jerry ) then
14434: LD_EXP 61
14438: PPUSH
14439: CALL_OW 314
14443: NOT
14444: IFFALSE 14461
// ComMoveXY ( Jerry , 95 , 17 ) ;
14446: LD_EXP 61
14450: PPUSH
14451: LD_INT 95
14453: PPUSH
14454: LD_INT 17
14456: PPUSH
14457: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14461: LD_EXP 61
14465: PPUSH
14466: LD_INT 95
14468: PPUSH
14469: LD_INT 17
14471: PPUSH
14472: CALL_OW 307
14476: IFFALSE 14427
// SetCargo ( Jerry , mat_cans , 0 ) ;
14478: LD_EXP 61
14482: PPUSH
14483: LD_INT 1
14485: PPUSH
14486: LD_INT 0
14488: PPUSH
14489: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14493: LD_ADDR_EXP 58
14497: PUSH
14498: LD_EXP 58
14502: PPUSH
14503: LD_EXP 61
14507: PPUSH
14508: CALL 68440 0 2
14512: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14513: LD_ADDR_VAR 0 1
14517: PUSH
14518: LD_INT 22
14520: PUSH
14521: LD_INT 4
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 23
14530: PUSH
14531: LD_INT 1
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PPUSH
14542: CALL_OW 69
14546: PUSH
14547: FOR_IN
14548: IFFALSE 14564
// SetLives ( i , 1000 ) ;
14550: LD_VAR 0 1
14554: PPUSH
14555: LD_INT 1000
14557: PPUSH
14558: CALL_OW 234
14562: GO 14547
14564: POP
14565: POP
// end ;
14566: PPOPN 2
14568: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14569: LD_EXP 30
14573: NOT
14574: IFFALSE 14582
14576: PUSH
14577: LD_EXP 6
14581: AND
14582: IFFALSE 15010
14584: GO 14586
14586: DISABLE
14587: LD_INT 0
14589: PPUSH
14590: PPUSH
// begin tmp := [ ] ;
14591: LD_ADDR_VAR 0 2
14595: PUSH
14596: EMPTY
14597: ST_TO_ADDR
// uc_side := 3 ;
14598: LD_ADDR_OWVAR 20
14602: PUSH
14603: LD_INT 3
14605: ST_TO_ADDR
// uc_nation := 3 ;
14606: LD_ADDR_OWVAR 21
14610: PUSH
14611: LD_INT 3
14613: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14614: LD_INT 1
14616: PPUSH
14617: LD_INT 8
14619: PPUSH
14620: CALL_OW 381
// un := CreateHuman ;
14624: LD_ADDR_VAR 0 1
14628: PUSH
14629: CALL_OW 44
14633: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14634: LD_VAR 0 1
14638: PPUSH
14639: LD_INT 173
14641: PPUSH
14642: LD_INT 104
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14652: LD_ADDR_VAR 0 2
14656: PUSH
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 1
14666: PPUSH
14667: CALL 68440 0 2
14671: ST_TO_ADDR
// un := CreateHuman ;
14672: LD_ADDR_VAR 0 1
14676: PUSH
14677: CALL_OW 44
14681: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14682: LD_VAR 0 1
14686: PPUSH
14687: LD_INT 73
14689: PPUSH
14690: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14694: LD_ADDR_VAR 0 2
14698: PUSH
14699: LD_VAR 0 2
14703: PPUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL 68440 0 2
14713: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14714: LD_INT 35
14716: PPUSH
14717: CALL_OW 67
// if isAlarm then
14721: LD_EXP 17
14725: IFFALSE 14729
// exit ;
14727: GO 15010
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 12 ;
14729: LD_EXP 51
14733: PPUSH
14734: CALL_OW 255
14738: PUSH
14739: LD_INT 2
14741: EQUAL
14742: IFFALSE 14762
14744: PUSH
14745: LD_EXP 51
14749: PPUSH
14750: LD_INT 73
14752: PPUSH
14753: CALL_OW 296
14757: PUSH
14758: LD_INT 12
14760: LESS
14761: AND
14762: IFFALSE 14714
// InGameOn ;
14764: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14768: LD_INT 73
14770: PPUSH
14771: CALL_OW 250
14775: PPUSH
14776: LD_INT 73
14778: PPUSH
14779: CALL_OW 251
14783: PPUSH
14784: LD_INT 2
14786: PPUSH
14787: LD_INT 9
14789: NEG
14790: PPUSH
14791: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14795: LD_INT 73
14797: PPUSH
14798: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14802: LD_EXP 51
14806: PPUSH
14807: LD_INT 73
14809: PPUSH
14810: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14814: LD_EXP 51
14818: PPUSH
14819: LD_STRING DK-Plastic-1
14821: PPUSH
14822: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14826: LD_EXP 51
14830: PPUSH
14831: LD_STRING DK-Plastic-2
14833: PPUSH
14834: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14838: LD_EXP 51
14842: PPUSH
14843: LD_INT 73
14845: PPUSH
14846: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14850: LD_INT 35
14852: PPUSH
14853: CALL_OW 67
// if isAlarm then
14857: LD_EXP 17
14861: IFFALSE 14865
// exit ;
14863: GO 15010
// until GetDistUnits ( Kaia , barExplosion ) < 8 ;
14865: LD_EXP 51
14869: PPUSH
14870: LD_INT 73
14872: PPUSH
14873: CALL_OW 296
14877: PUSH
14878: LD_INT 8
14880: LESS
14881: IFFALSE 14850
// ComHold ( Kaia ) ;
14883: LD_EXP 51
14887: PPUSH
14888: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14892: LD_VAR 0 2
14896: PUSH
14897: LD_INT 1
14899: ARRAY
14900: PPUSH
14901: LD_STRING DRum-Plastic-3
14903: PPUSH
14904: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14908: LD_VAR 0 2
14912: PUSH
14913: LD_INT 2
14915: ARRAY
14916: PPUSH
14917: LD_STRING DRum2-Plastic-4
14919: PPUSH
14920: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14924: LD_VAR 0 2
14928: PUSH
14929: LD_INT 1
14931: ARRAY
14932: PPUSH
14933: LD_STRING DRum-Plastic-5
14935: PPUSH
14936: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14940: LD_VAR 0 2
14944: PUSH
14945: LD_INT 2
14947: ARRAY
14948: PPUSH
14949: LD_STRING DRum2-Plastic-6
14951: PPUSH
14952: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14956: LD_EXP 51
14960: PPUSH
14961: LD_STRING DK-Plastic-7
14963: PPUSH
14964: CALL_OW 88
// InGameOff ;
14968: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14972: LD_INT 73
14974: PPUSH
14975: CALL_OW 250
14979: PPUSH
14980: LD_INT 73
14982: PPUSH
14983: CALL_OW 251
14987: PPUSH
14988: LD_INT 2
14990: PPUSH
14991: CALL_OW 331
// explosionsTakenByRussians := true ;
14995: LD_ADDR_EXP 21
14999: PUSH
15000: LD_INT 1
15002: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
15003: LD_STRING ExplosivesInfo
15005: PPUSH
15006: CALL_OW 97
// end ;
15010: PPOPN 2
15012: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do var class ;
15013: LD_EXP 21
15017: IFFALSE 15034
15019: PUSH
15020: LD_EXP 51
15024: PPUSH
15025: CALL_OW 255
15029: PUSH
15030: LD_INT 2
15032: EQUAL
15033: AND
15034: IFFALSE 15050
15036: PUSH
15037: LD_EXP 51
15041: PPUSH
15042: LD_INT 61
15044: PPUSH
15045: CALL 21084 0 2
15049: AND
15050: IFFALSE 15059
15052: PUSH
15053: LD_EXP 17
15057: NOT
15058: AND
15059: IFFALSE 15068
15061: PUSH
15062: LD_EXP 30
15066: NOT
15067: AND
15068: IFFALSE 15379
15070: GO 15072
15072: DISABLE
15073: LD_INT 0
15075: PPUSH
// begin class := GetClass ( Kaia ) ;
15076: LD_ADDR_VAR 0 1
15080: PUSH
15081: LD_EXP 51
15085: PPUSH
15086: CALL_OW 257
15090: ST_TO_ADDR
// if class <> class_prison then
15091: LD_VAR 0 1
15095: PUSH
15096: LD_INT 33
15098: NONEQUAL
15099: IFFALSE 15220
// begin Query ( QKaiaWeapon ) ;
15101: LD_STRING QKaiaWeapon
15103: PPUSH
15104: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15108: LD_INT 67
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15118: LD_INT 192
15120: PPUSH
15121: LD_INT 71
15123: PPUSH
15124: CALL_OW 86
// kaiaWeaponHidden := class ;
15128: LD_ADDR_EXP 45
15132: PUSH
15133: LD_VAR 0 1
15137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15138: LD_INT 35
15140: PPUSH
15141: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15145: LD_EXP 51
15149: PPUSH
15150: LD_INT 67
15152: PPUSH
15153: CALL_OW 308
15157: IFFALSE 15138
// repeat wait ( 1 ) ;
15159: LD_INT 1
15161: PPUSH
15162: CALL_OW 67
// ComWalk ( Kaia ) ;
15166: LD_EXP 51
15170: PPUSH
15171: CALL_OW 138
// until not Crawls ( Kaia ) ;
15175: LD_EXP 51
15179: PPUSH
15180: CALL_OW 318
15184: NOT
15185: IFFALSE 15159
// SetClass ( Kaia , class_prison ) ;
15187: LD_EXP 51
15191: PPUSH
15192: LD_INT 33
15194: PPUSH
15195: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15199: LD_INT 35
15201: PPUSH
15202: CALL_OW 67
// until InEntrance ( Kaia , ruFac ) ;
15206: LD_EXP 51
15210: PPUSH
15211: LD_INT 61
15213: PPUSH
15214: CALL 21084 0 2
15218: IFFALSE 15199
// end ; if knowWhereExplosivesAre then
15220: LD_EXP 34
15224: IFFALSE 15228
// exit ;
15226: GO 15379
// InGameOn ;
15228: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
15232: LD_INT 61
15234: PPUSH
15235: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15239: LD_EXP 51
15243: PPUSH
15244: LD_INT 3
15246: PPUSH
15247: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
15251: LD_EXP 51
15255: PPUSH
15256: LD_INT 61
15258: PPUSH
15259: CALL_OW 120
// wait ( 0 0$2 ) ;
15263: LD_INT 70
15265: PPUSH
15266: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15270: LD_EXP 51
15274: PPUSH
15275: LD_STRING DK-Plastic-8
15277: PPUSH
15278: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
15282: LD_EXP 67
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PPUSH
15291: LD_STRING DRuMch-Plastic-9
15293: PPUSH
15294: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15298: LD_EXP 51
15302: PPUSH
15303: LD_STRING DK-Plastic-10
15305: PPUSH
15306: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
15310: LD_EXP 67
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: PPUSH
15319: LD_STRING DRuMch-Plastic-a-11
15321: PPUSH
15322: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
15326: LD_EXP 51
15330: PPUSH
15331: LD_STRING DK-Plastic-a-12
15333: PPUSH
15334: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
15338: LD_EXP 67
15342: PUSH
15343: LD_INT 1
15345: ARRAY
15346: PPUSH
15347: LD_STRING DRuMch-Plastic-a-13
15349: PPUSH
15350: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
15354: LD_EXP 51
15358: PPUSH
15359: LD_INT 2
15361: PPUSH
15362: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15366: LD_EXP 51
15370: PPUSH
15371: CALL_OW 122
// InGameOff ;
15375: CALL_OW 9
// end ;
15379: PPOPN 1
15381: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do var class ;
15382: LD_EXP 21
15386: IFFALSE 15403
15388: PUSH
15389: LD_EXP 51
15393: PPUSH
15394: CALL_OW 255
15398: PUSH
15399: LD_INT 2
15401: EQUAL
15402: AND
15403: IFFALSE 15419
15405: PUSH
15406: LD_EXP 51
15410: PPUSH
15411: LD_INT 196
15413: PPUSH
15414: CALL 21084 0 2
15418: AND
15419: IFFALSE 15428
15421: PUSH
15422: LD_EXP 17
15426: NOT
15427: AND
15428: IFFALSE 15437
15430: PUSH
15431: LD_EXP 30
15435: NOT
15436: AND
15437: IFFALSE 15923
15439: GO 15441
15441: DISABLE
15442: LD_INT 0
15444: PPUSH
// begin class := GetClass ( Kaia ) ;
15445: LD_ADDR_VAR 0 1
15449: PUSH
15450: LD_EXP 51
15454: PPUSH
15455: CALL_OW 257
15459: ST_TO_ADDR
// if class <> class_prison then
15460: LD_VAR 0 1
15464: PUSH
15465: LD_INT 33
15467: NONEQUAL
15468: IFFALSE 15589
// begin Query ( QKaiaWeapon ) ;
15470: LD_STRING QKaiaWeapon
15472: PPUSH
15473: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15477: LD_INT 67
15479: PPUSH
15480: LD_INT 1
15482: PPUSH
15483: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15487: LD_INT 192
15489: PPUSH
15490: LD_INT 71
15492: PPUSH
15493: CALL_OW 86
// kaiaWeaponHidden := class ;
15497: LD_ADDR_EXP 45
15501: PUSH
15502: LD_VAR 0 1
15506: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15507: LD_INT 35
15509: PPUSH
15510: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15514: LD_EXP 51
15518: PPUSH
15519: LD_INT 67
15521: PPUSH
15522: CALL_OW 308
15526: IFFALSE 15507
// repeat wait ( 1 ) ;
15528: LD_INT 1
15530: PPUSH
15531: CALL_OW 67
// ComWalk ( Kaia ) ;
15535: LD_EXP 51
15539: PPUSH
15540: CALL_OW 138
// until not Crawls ( Kaia ) ;
15544: LD_EXP 51
15548: PPUSH
15549: CALL_OW 318
15553: NOT
15554: IFFALSE 15528
// SetClass ( Kaia , class_prison ) ;
15556: LD_EXP 51
15560: PPUSH
15561: LD_INT 33
15563: PPUSH
15564: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15568: LD_INT 35
15570: PPUSH
15571: CALL_OW 67
// until InEntrance ( Kaia , ruWorkshop ) ;
15575: LD_EXP 51
15579: PPUSH
15580: LD_INT 196
15582: PPUSH
15583: CALL 21084 0 2
15587: IFFALSE 15568
// end ; InGameOn ;
15589: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
15593: LD_INT 196
15595: PPUSH
15596: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15600: LD_EXP 51
15604: PPUSH
15605: LD_INT 3
15607: PPUSH
15608: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
15612: LD_EXP 51
15616: PPUSH
15617: LD_INT 196
15619: PPUSH
15620: CALL_OW 120
// wait ( 0 0$2 ) ;
15624: LD_INT 70
15626: PPUSH
15627: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15631: LD_EXP 51
15635: PPUSH
15636: LD_STRING DK-Plastic-8
15638: PPUSH
15639: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
15643: LD_EXP 68
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PPUSH
15652: LD_STRING DRuMch-Plastic-9
15654: PPUSH
15655: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15659: LD_EXP 51
15663: PPUSH
15664: LD_STRING DK-Plastic-10
15666: PPUSH
15667: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
15671: LD_EXP 68
15675: PUSH
15676: LD_INT 1
15678: ARRAY
15679: PPUSH
15680: LD_STRING DRuMch-Plastic-11
15682: PPUSH
15683: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
15687: LD_EXP 51
15691: PPUSH
15692: LD_STRING DK-Plastic-12
15694: PPUSH
15695: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15699: LD_EXP 51
15703: PPUSH
15704: LD_STRING DK-Plastic-13
15706: PPUSH
15707: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15711: LD_EXP 68
15715: PUSH
15716: LD_INT 1
15718: ARRAY
15719: PPUSH
15720: LD_STRING DRuMch-Plastic-14
15722: PPUSH
15723: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15727: LD_EXP 69
15731: PPUSH
15732: LD_INT 167
15734: PPUSH
15735: LD_INT 34
15737: PPUSH
15738: LD_INT 3
15740: PPUSH
15741: LD_INT 0
15743: PPUSH
15744: CALL 70600 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15748: LD_EXP 69
15752: PPUSH
15753: LD_INT 196
15755: PPUSH
15756: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15760: LD_INT 35
15762: PPUSH
15763: CALL_OW 67
// if not HasTask ( Stiopa ) then
15767: LD_EXP 69
15771: PPUSH
15772: CALL_OW 314
15776: NOT
15777: IFFALSE 15791
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15779: LD_EXP 69
15783: PPUSH
15784: LD_INT 196
15786: PPUSH
15787: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15791: LD_EXP 69
15795: PPUSH
15796: CALL_OW 310
15800: IFFALSE 15760
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15802: LD_EXP 69
15806: PPUSH
15807: LD_STRING DSpn-Plastic-15
15809: PPUSH
15810: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15814: LD_EXP 70
15818: PPUSH
15819: LD_STRING DLr-Plastic-16
15821: PPUSH
15822: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15826: LD_EXP 51
15830: PPUSH
15831: LD_STRING DK-Plastic-17
15833: PPUSH
15834: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15838: LD_INT 10
15840: PPUSH
15841: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15845: LD_INT 196
15847: PPUSH
15848: CALL 20810 0 1
// SetSide ( Kaia , 2 ) ;
15852: LD_EXP 51
15856: PPUSH
15857: LD_INT 2
15859: PPUSH
15860: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15864: LD_EXP 51
15868: PPUSH
15869: CALL_OW 122
// InGameOff ;
15873: CALL_OW 9
// explosionsTakenByRussians := false ;
15877: LD_ADDR_EXP 21
15881: PUSH
15882: LD_INT 0
15884: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15885: LD_INT 170
15887: PPUSH
15888: LD_INT 28
15890: PPUSH
15891: LD_INT 2
15893: PPUSH
15894: LD_INT 6
15896: NEG
15897: PPUSH
15898: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15902: LD_INT 170
15904: PPUSH
15905: LD_INT 28
15907: PPUSH
15908: LD_INT 2
15910: PPUSH
15911: CALL_OW 331
// knowWhereExplosivesAre := true ;
15915: LD_ADDR_EXP 34
15919: PUSH
15920: LD_INT 1
15922: ST_TO_ADDR
// end ;
15923: PPOPN 1
15925: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15926: LD_EXP 34
15930: IFFALSE 15947
15932: PUSH
15933: LD_EXP 51
15937: PPUSH
15938: CALL_OW 255
15942: PUSH
15943: LD_INT 2
15945: EQUAL
15946: AND
15947: IFFALSE 15963
15949: PUSH
15950: LD_EXP 51
15954: PPUSH
15955: LD_INT 195
15957: PPUSH
15958: CALL 21084 0 2
15962: AND
15963: IFFALSE 15972
15965: PUSH
15966: LD_EXP 17
15970: NOT
15971: AND
15972: IFFALSE 15981
15974: PUSH
15975: LD_EXP 30
15979: NOT
15980: AND
15981: IFFALSE 16087
15983: GO 15985
15985: DISABLE
// begin InGameOn ;
15986: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15990: LD_EXP 51
15994: PPUSH
15995: LD_INT 3
15997: PPUSH
15998: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
16002: LD_EXP 51
16006: PPUSH
16007: LD_INT 195
16009: PPUSH
16010: CALL_OW 120
// wait ( 0 0$1 ) ;
16014: LD_INT 35
16016: PPUSH
16017: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
16021: LD_EXP 51
16025: PPUSH
16026: LD_STRING DK-Plastic-18
16028: PPUSH
16029: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
16033: LD_STRING ExplosivesInfoUsage
16035: PPUSH
16036: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
16040: LD_INT 195
16042: PPUSH
16043: CALL 20810 0 1
// SetSide ( Kaia , 2 ) ;
16047: LD_EXP 51
16051: PPUSH
16052: LD_INT 2
16054: PPUSH
16055: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
16059: LD_EXP 51
16063: PPUSH
16064: CALL_OW 122
// InGameOff ;
16068: CALL_OW 9
// hasExplosionCollected := true ;
16072: LD_ADDR_EXP 23
16076: PUSH
16077: LD_INT 1
16079: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
16080: LD_STRING M1-explosive-out
16082: PPUSH
16083: CALL_OW 337
// end ;
16087: END
// every 0 0$2 trigger kaiaWeaponHidden marked gameStartEvent do
16088: LD_EXP 45
16092: IFFALSE 16157
16094: GO 16096
16096: DISABLE
// begin enable ;
16097: ENABLE
// if not kaiaWeaponHidden then
16098: LD_EXP 45
16102: NOT
16103: IFFALSE 16107
// exit ;
16105: GO 16157
// repeat wait ( 1 ) ;
16107: LD_INT 1
16109: PPUSH
16110: CALL_OW 67
// ComWalk ( Kaia ) ;
16114: LD_EXP 51
16118: PPUSH
16119: CALL_OW 138
// until not Crawls ( Kaia ) ;
16123: LD_EXP 51
16127: PPUSH
16128: CALL_OW 318
16132: NOT
16133: IFFALSE 16107
// SetClass ( Kaia , kaiaWeaponHidden ) ;
16135: LD_EXP 51
16139: PPUSH
16140: LD_EXP 45
16144: PPUSH
16145: CALL_OW 336
// kaiaWeaponHidden := 0 ;
16149: LD_ADDR_EXP 45
16153: PUSH
16154: LD_INT 0
16156: ST_TO_ADDR
// end ;
16157: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
16158: LD_EXP 23
16162: IFFALSE 16171
16164: PUSH
16165: LD_EXP 17
16169: NOT
16170: AND
16171: IFFALSE 16180
16173: PUSH
16174: LD_EXP 30
16178: NOT
16179: AND
16180: IFFALSE 16355
16182: GO 16184
16184: DISABLE
16185: LD_INT 0
16187: PPUSH
16188: PPUSH
// begin for i in importantBuildingsList do
16189: LD_ADDR_VAR 0 1
16193: PUSH
16194: LD_EXP 35
16198: PUSH
16199: FOR_IN
16200: IFFALSE 16216
// MarkBuilding ( i , true ) ;
16202: LD_VAR 0 1
16206: PPUSH
16207: LD_INT 1
16209: PPUSH
16210: CALL 21462 0 2
16214: GO 16199
16216: POP
16217: POP
// repeat wait ( 0 0$1 ) ;
16218: LD_INT 35
16220: PPUSH
16221: CALL_OW 67
// for i in importantBuildingsList do
16225: LD_ADDR_VAR 0 1
16229: PUSH
16230: LD_EXP 35
16234: PUSH
16235: FOR_IN
16236: IFFALSE 16346
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
16238: LD_EXP 46
16242: PUSH
16243: LD_EXP 14
16247: UNION
16248: PPUSH
16249: LD_INT 22
16251: PUSH
16252: LD_INT 2
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 1
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 91
16271: PUSH
16272: LD_VAR 0 1
16276: PUSH
16277: LD_INT 6
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: LIST
16289: PPUSH
16290: CALL_OW 72
16294: IFFALSE 16344
// begin CenterNowOnUnits ( i ) ;
16296: LD_VAR 0 1
16300: PPUSH
16301: CALL_OW 87
// PlaceExplosives ( i ) ;
16305: LD_VAR 0 1
16309: PPUSH
16310: CALL 21359 0 1
// MarkBuilding ( i , false ) ;
16314: LD_VAR 0 1
16318: PPUSH
16319: LD_INT 0
16321: PPUSH
16322: CALL 21462 0 2
// importantBuildingsList := importantBuildingsList diff i ;
16326: LD_ADDR_EXP 35
16330: PUSH
16331: LD_EXP 35
16335: PUSH
16336: LD_VAR 0 1
16340: DIFF
16341: ST_TO_ADDR
// continue ;
16342: GO 16235
// end ; end ;
16344: GO 16235
16346: POP
16347: POP
// until not importantBuildingsList ;
16348: LD_EXP 35
16352: NOT
16353: IFFALSE 16218
// end ;
16355: PPOPN 2
16357: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
16358: LD_EXP 14
16362: PPUSH
16363: LD_INT 22
16365: PUSH
16366: LD_INT 2
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 95
16375: PUSH
16376: LD_INT 23
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PPUSH
16387: CALL_OW 72
16391: IFFALSE 16404
16393: PUSH
16394: LD_EXP 46
16398: PPUSH
16399: CALL_OW 302
16403: AND
16404: IFFALSE 16413
16406: PUSH
16407: LD_EXP 30
16411: NOT
16412: AND
16413: IFFALSE 16441
16415: GO 16417
16417: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
16418: LD_EXP 46
16422: PPUSH
16423: LD_STRING DH-End-1
16425: PPUSH
16426: CALL_OW 88
// if not activeExplosives then
16430: LD_EXP 36
16434: NOT
16435: IFFALSE 16441
// Explode ;
16437: CALL 24246 0 0
// end ;
16441: END
// function SayHEmpty ( ) ; begin
16442: LD_INT 0
16444: PPUSH
// case rand ( 1 , 3 ) of 1 :
16445: LD_INT 1
16447: PPUSH
16448: LD_INT 3
16450: PPUSH
16451: CALL_OW 12
16455: PUSH
16456: LD_INT 1
16458: DOUBLE
16459: EQUAL
16460: IFTRUE 16464
16462: GO 16479
16464: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
16465: LD_EXP 46
16469: PPUSH
16470: LD_STRING DH-Empty-1
16472: PPUSH
16473: CALL_OW 88
16477: GO 16526
16479: LD_INT 2
16481: DOUBLE
16482: EQUAL
16483: IFTRUE 16487
16485: GO 16502
16487: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
16488: LD_EXP 46
16492: PPUSH
16493: LD_STRING DH-Empty-2
16495: PPUSH
16496: CALL_OW 88
16500: GO 16526
16502: LD_INT 3
16504: DOUBLE
16505: EQUAL
16506: IFTRUE 16510
16508: GO 16525
16510: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
16511: LD_EXP 46
16515: PPUSH
16516: LD_STRING DH-Empty-3
16518: PPUSH
16519: CALL_OW 88
16523: GO 16526
16525: POP
// end ;
16526: LD_VAR 0 1
16530: RET
// function SayHVisited ( ) ; begin
16531: LD_INT 0
16533: PPUSH
// case rand ( 1 , 3 ) of 1 :
16534: LD_INT 1
16536: PPUSH
16537: LD_INT 3
16539: PPUSH
16540: CALL_OW 12
16544: PUSH
16545: LD_INT 1
16547: DOUBLE
16548: EQUAL
16549: IFTRUE 16553
16551: GO 16568
16553: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
16554: LD_EXP 46
16558: PPUSH
16559: LD_STRING DH-Visited-1
16561: PPUSH
16562: CALL_OW 88
16566: GO 16615
16568: LD_INT 2
16570: DOUBLE
16571: EQUAL
16572: IFTRUE 16576
16574: GO 16591
16576: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
16577: LD_EXP 46
16581: PPUSH
16582: LD_STRING DH-Visited-2
16584: PPUSH
16585: CALL_OW 88
16589: GO 16615
16591: LD_INT 3
16593: DOUBLE
16594: EQUAL
16595: IFTRUE 16599
16597: GO 16614
16599: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
16600: LD_EXP 46
16604: PPUSH
16605: LD_STRING DH-Visited-3
16607: PPUSH
16608: CALL_OW 88
16612: GO 16615
16614: POP
// end ;
16615: LD_VAR 0 1
16619: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
16620: LD_EXP 17
16624: NOT
16625: IFFALSE 16633
16627: PUSH
16628: LD_EXP 15
16632: AND
16633: IFFALSE 16650
16635: PUSH
16636: LD_EXP 46
16640: PPUSH
16641: CALL_OW 255
16645: PUSH
16646: LD_INT 2
16648: EQUAL
16649: AND
16650: IFFALSE 16663
16652: PUSH
16653: LD_EXP 46
16657: PPUSH
16658: CALL_OW 302
16662: AND
16663: IFFALSE 16676
16665: PUSH
16666: LD_EXP 46
16670: PPUSH
16671: CALL_OW 316
16675: AND
16676: IFFALSE 16685
16678: PUSH
16679: LD_EXP 30
16683: NOT
16684: AND
16685: IFFALSE 16751
16687: GO 16689
16689: DISABLE
16690: LD_INT 0
16692: PPUSH
// begin enable ;
16693: ENABLE
// for i in entranceAllowedList do
16694: LD_ADDR_VAR 0 1
16698: PUSH
16699: LD_EXP 15
16703: PUSH
16704: FOR_IN
16705: IFFALSE 16749
// if InEntrance ( Heike , i ) then
16707: LD_EXP 46
16711: PPUSH
16712: LD_VAR 0 1
16716: PPUSH
16717: CALL 21084 0 2
16721: IFFALSE 16747
// begin disable ( entranceEvent ) ;
16723: LD_INT 1
16725: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL 16754 0 1
// wait ( 0 0$3 ) ;
16735: LD_INT 105
16737: PPUSH
16738: CALL_OW 67
// enable ( entranceEvent ) ;
16742: LD_INT 1
16744: ENABLE_MARKED
// break ;
16745: GO 16749
// end ;
16747: GO 16704
16749: POP
16750: POP
// end ;
16751: PPOPN 1
16753: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 , someoneTookWeapon ; begin
16754: LD_INT 0
16756: PPUSH
16757: PPUSH
16758: PPUSH
16759: PPUSH
16760: PPUSH
// if not building then
16761: LD_VAR 0 1
16765: NOT
16766: IFFALSE 16770
// exit ;
16768: GO 19502
// if building in entranceVisitedList then
16770: LD_VAR 0 1
16774: PUSH
16775: LD_EXP 16
16779: IN
16780: IFFALSE 16788
// begin SayHVisited ( ) ;
16782: CALL 16531 0 0
// exit ;
16786: GO 19502
// end ; case Query ( EnterBuilding ) of 1 :
16788: LD_STRING EnterBuilding
16790: PPUSH
16791: CALL_OW 97
16795: PUSH
16796: LD_INT 1
16798: DOUBLE
16799: EQUAL
16800: IFTRUE 16804
16802: GO 16807
16804: POP
// ; 2 :
16805: GO 16821
16807: LD_INT 2
16809: DOUBLE
16810: EQUAL
16811: IFTRUE 16815
16813: GO 16820
16815: POP
// exit ; end ;
16816: GO 19502
16818: GO 16821
16820: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16821: LD_ADDR_EXP 16
16825: PUSH
16826: LD_EXP 16
16830: PPUSH
16831: LD_VAR 0 1
16835: PPUSH
16836: CALL 68440 0 2
16840: ST_TO_ADDR
// InGameOn ;
16841: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16845: LD_EXP 46
16849: PPUSH
16850: LD_INT 5
16852: PPUSH
16853: CALL_OW 235
// SetSide ( building , 5 ) ;
16857: LD_VAR 0 1
16861: PPUSH
16862: LD_INT 5
16864: PPUSH
16865: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16869: LD_EXP 46
16873: PPUSH
16874: LD_VAR 0 1
16878: PPUSH
16879: CALL_OW 120
// wait ( 0 0$3 ) ;
16883: LD_INT 105
16885: PPUSH
16886: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16890: LD_ADDR_VAR 0 4
16894: PUSH
16895: LD_INT 165
16897: PUSH
16898: LD_INT 106
16900: PUSH
16901: LD_INT 135
16903: PUSH
16904: LD_INT 162
16906: PUSH
16907: LD_INT 61
16909: PUSH
16910: LD_INT 109
16912: PUSH
16913: LD_INT 169
16915: PUSH
16916: LD_INT 13
16918: PUSH
16919: LD_INT 147
16921: PUSH
16922: LD_INT 137
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: ST_TO_ADDR
// if not building in tmp then
16937: LD_VAR 0 1
16941: PUSH
16942: LD_VAR 0 4
16946: IN
16947: NOT
16948: IFFALSE 16956
// SayHEmpty ( ) else
16950: CALL 16442 0 0
16954: GO 19449
// case building of laundry :
16956: LD_VAR 0 1
16960: PUSH
16961: LD_INT 165
16963: DOUBLE
16964: EQUAL
16965: IFTRUE 16969
16967: GO 17077
16969: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16970: LD_EXP 26
16974: IFFALSE 16983
16976: PUSH
16977: LD_EXP 27
16981: NOT
16982: AND
16983: IFFALSE 16992
16985: PUSH
16986: LD_EXP 28
16990: NOT
16991: AND
16992: IFFALSE 17047
// begin case Query ( HeikeInLaundry ) of 1 :
16994: LD_STRING HeikeInLaundry
16996: PPUSH
16997: CALL_OW 97
17001: PUSH
17002: LD_INT 1
17004: DOUBLE
17005: EQUAL
17006: IFTRUE 17010
17008: GO 17017
17010: POP
// SpawnHeikeAsRussian ; 2 :
17011: CALL 1840 0 0
17015: GO 17045
17017: LD_INT 2
17019: DOUBLE
17020: EQUAL
17021: IFTRUE 17025
17023: GO 17044
17025: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
17026: LD_ADDR_EXP 16
17030: PUSH
17031: LD_EXP 16
17035: PUSH
17036: LD_VAR 0 1
17040: DIFF
17041: ST_TO_ADDR
17042: GO 17045
17044: POP
// end else
17045: GO 17075
// begin entranceVisitedList := entranceVisitedList diff building ;
17047: LD_ADDR_EXP 16
17051: PUSH
17052: LD_EXP 16
17056: PUSH
17057: LD_VAR 0 1
17061: DIFF
17062: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17063: LD_EXP 46
17067: PPUSH
17068: LD_STRING DH-Locked
17070: PPUSH
17071: CALL_OW 88
// end ; end ; dougBar :
17075: GO 19449
17077: LD_INT 106
17079: DOUBLE
17080: EQUAL
17081: IFTRUE 17085
17083: GO 17449
17085: POP
// begin if contactWithAmerican and americanContact then
17086: LD_EXP 25
17090: IFFALSE 17098
17092: PUSH
17093: LD_EXP 10
17097: AND
17098: IFFALSE 17162
// begin Say ( Heike , DH-Escort-a-1 ) ;
17100: LD_EXP 46
17104: PPUSH
17105: LD_STRING DH-Escort-a-1
17107: PPUSH
17108: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
17112: LD_EXP 60
17116: PPUSH
17117: LD_STRING DCa-Escort-a-2
17119: PPUSH
17120: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
17124: LD_EXP 60
17128: PPUSH
17129: LD_STRING DCa-Escort-a-3
17131: PPUSH
17132: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
17136: LD_EXP 46
17140: PPUSH
17141: LD_STRING DH-Escort-a-4
17143: PPUSH
17144: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
17148: LD_EXP 46
17152: PPUSH
17153: LD_STRING DH-Escort-a-5
17155: PPUSH
17156: CALL_OW 88
// end else
17160: GO 17406
// if contactWithAmerican then
17162: LD_EXP 25
17166: IFFALSE 17206
// begin Say ( Heike , DH-Escort-b-1 ) ;
17168: LD_EXP 46
17172: PPUSH
17173: LD_STRING DH-Escort-b-1
17175: PPUSH
17176: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
17180: LD_EXP 60
17184: PPUSH
17185: LD_STRING DCa-Escort-b-2
17187: PPUSH
17188: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
17192: LD_EXP 60
17196: PPUSH
17197: LD_STRING DCa-Escort-b-3
17199: PPUSH
17200: CALL_OW 88
// end else
17204: GO 17406
// begin Say ( Doug , DCa-Deal-a-1 ) ;
17206: LD_EXP 60
17210: PPUSH
17211: LD_STRING DCa-Deal-a-1
17213: PPUSH
17214: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
17218: LD_EXP 60
17222: PPUSH
17223: LD_STRING DCa-Deal-a-2
17225: PPUSH
17226: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
17230: LD_EXP 46
17234: PPUSH
17235: LD_STRING DH-Deal-a-3
17237: PPUSH
17238: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
17242: LD_EXP 60
17246: PPUSH
17247: LD_STRING DCa-Deal-a-4
17249: PPUSH
17250: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
17254: LD_EXP 46
17258: PPUSH
17259: LD_STRING DH-Deal-a-5
17261: PPUSH
17262: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
17266: LD_EXP 60
17270: PPUSH
17271: LD_STRING DCa-Deal-a-6
17273: PPUSH
17274: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
17278: LD_EXP 60
17282: PPUSH
17283: LD_STRING DCa-Deal-a-7
17285: PPUSH
17286: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
17290: LD_EXP 60
17294: PPUSH
17295: LD_STRING DCa-Deal-a-8
17297: PPUSH
17298: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
17302: LD_EXP 60
17306: PPUSH
17307: LD_STRING DCa-Deal-a-9
17309: PPUSH
17310: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
17314: LD_EXP 60
17318: PPUSH
17319: LD_STRING DCa-Deal-a-10
17321: PPUSH
17322: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
17326: LD_EXP 60
17330: PPUSH
17331: LD_STRING DCa-Deal-a-11
17333: PPUSH
17334: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17338: LD_INT 10
17340: PPUSH
17341: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
17345: LD_EXP 60
17349: PPUSH
17350: LD_STRING DCa-Deal-a-12
17352: PPUSH
17353: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
17357: LD_EXP 46
17361: PPUSH
17362: LD_STRING DH-Deal-a-13
17364: PPUSH
17365: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
17369: LD_EXP 46
17373: PPUSH
17374: LD_STRING DH-Deal-a-14
17376: PPUSH
17377: CALL_OW 88
// contactWithAmerican := true ;
17381: LD_ADDR_EXP 25
17385: PUSH
17386: LD_INT 1
17388: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
17389: LD_INT 1
17391: PPUSH
17392: LD_STRING 08_DealWithDoug
17394: PPUSH
17395: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
17399: LD_STRING M1-american-out
17401: PPUSH
17402: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
17406: LD_EXP 60
17410: PPUSH
17411: LD_INT 2
17413: PPUSH
17414: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
17418: LD_ADDR_EXP 14
17422: PUSH
17423: LD_EXP 14
17427: PPUSH
17428: LD_EXP 60
17432: PPUSH
17433: CALL 68440 0 2
17437: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
17438: LD_EXP 60
17442: PPUSH
17443: CALL_OW 122
// end ; usLab :
17447: GO 19449
17449: LD_INT 135
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17814
17457: POP
// begin if hasSniperRifle then
17458: LD_EXP 11
17462: IFFALSE 17812
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
17464: LD_EXP 51
17468: PPUSH
17469: CALL_OW 302
17473: IFFALSE 17487
17475: PUSH
17476: LD_EXP 51
17480: PUSH
17481: LD_EXP 14
17485: IN
17486: AND
17487: IFFALSE 17504
17489: PUSH
17490: LD_EXP 51
17494: PPUSH
17495: CALL_OW 255
17499: PUSH
17500: LD_INT 2
17502: EQUAL
17503: AND
17504: IFFALSE 17786
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
17506: LD_EXP 46
17510: PPUSH
17511: LD_EXP 51
17515: PPUSH
17516: CALL_OW 296
17520: PUSH
17521: LD_INT 10
17523: GREATER
17524: IFFALSE 17549
// begin Query ( KaiaDistance ) ;
17526: LD_STRING KaiaDistance
17528: PPUSH
17529: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
17533: LD_ADDR_EXP 16
17537: PUSH
17538: LD_EXP 16
17542: PUSH
17543: LD_INT 135
17545: DIFF
17546: ST_TO_ADDR
// end else
17547: GO 17784
// begin SetSide ( Kaia , 5 ) ;
17549: LD_EXP 51
17553: PPUSH
17554: LD_INT 5
17556: PPUSH
17557: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
17561: LD_EXP 51
17565: PPUSH
17566: LD_INT 135
17568: PPUSH
17569: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17573: LD_INT 35
17575: PPUSH
17576: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17580: LD_EXP 51
17584: PPUSH
17585: CALL_OW 310
17589: IFFALSE 17573
// Say ( Kaia , DK-Sniper-1 ) ;
17591: LD_EXP 51
17595: PPUSH
17596: LD_STRING DK-Sniper-1
17598: PPUSH
17599: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
17603: LD_EXP 51
17607: PPUSH
17608: CALL_OW 257
17612: PUSH
17613: LD_INT 34
17615: EQUAL
17616: IFFALSE 17630
17618: PUSH
17619: LD_EXP 48
17623: PUSH
17624: LD_EXP 14
17628: IN
17629: AND
17630: IFFALSE 17643
17632: PUSH
17633: LD_EXP 48
17637: PPUSH
17638: CALL_OW 302
17642: AND
17643: IFFALSE 17674
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
17645: LD_EXP 51
17649: PPUSH
17650: LD_STRING DK-Sniper-a-2
17652: PPUSH
17653: CALL_OW 88
// giveSniperRifleToMike := true ;
17657: LD_ADDR_EXP 42
17661: PUSH
17662: LD_INT 1
17664: ST_TO_ADDR
// Query ( QSniperMike ) ;
17665: LD_STRING QSniperMike
17667: PPUSH
17668: CALL_OW 97
// end else
17672: GO 17763
// begin Say ( Kaia , DK-Sniper-2 ) ;
17674: LD_EXP 51
17678: PPUSH
17679: LD_STRING DK-Sniper-2
17681: PPUSH
17682: CALL_OW 88
// repeat wait ( 1 ) ;
17686: LD_INT 1
17688: PPUSH
17689: CALL_OW 67
// ComWalk ( Kaia ) ;
17693: LD_EXP 51
17697: PPUSH
17698: CALL_OW 138
// until not Crawls ( Kaia ) ;
17702: LD_EXP 51
17706: PPUSH
17707: CALL_OW 318
17711: NOT
17712: IFFALSE 17686
// SetClass ( Kaia , class_hunter ) ;
17714: LD_EXP 51
17718: PPUSH
17719: LD_INT 32
17721: PPUSH
17722: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
17726: LD_EXP 53
17730: PPUSH
17731: CALL_OW 302
17735: IFFALSE 17749
17737: PUSH
17738: LD_EXP 53
17742: PUSH
17743: LD_EXP 14
17747: IN
17748: AND
17749: IFFALSE 17763
// Say ( Markov , DMar-Sniper-3 ) ;
17751: LD_EXP 53
17755: PPUSH
17756: LD_STRING DMar-Sniper-3
17758: PPUSH
17759: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
17763: LD_EXP 51
17767: PPUSH
17768: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
17772: LD_EXP 51
17776: PPUSH
17777: LD_INT 2
17779: PPUSH
17780: CALL_OW 235
// end ; end else
17784: GO 17812
// begin entranceVisitedList := entranceVisitedList diff usLab ;
17786: LD_ADDR_EXP 16
17790: PUSH
17791: LD_EXP 16
17795: PUSH
17796: LD_INT 135
17798: DIFF
17799: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17800: LD_EXP 46
17804: PPUSH
17805: LD_STRING DH-Locked
17807: PPUSH
17808: CALL_OW 88
// end ; end ; end ; drugsLab :
17812: GO 19449
17814: LD_INT 162
17816: DOUBLE
17817: EQUAL
17818: IFTRUE 17822
17820: GO 17955
17822: POP
// begin if hasStimDrugs then
17823: LD_EXP 9
17827: IFFALSE 17941
// begin wait ( 0 0$1 ) ;
17829: LD_INT 35
17831: PPUSH
17832: CALL_OW 67
// if not hasStimDrugsCollected then
17836: LD_EXP 24
17840: NOT
17841: IFFALSE 17883
// begin Say ( Heike , DH-Lab-1 ) ;
17843: LD_EXP 46
17847: PPUSH
17848: LD_STRING DH-Lab-1
17850: PPUSH
17851: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17855: LD_INT 5
17857: PPUSH
17858: LD_INT 2
17860: PPUSH
17861: LD_INT 2
17863: PPUSH
17864: CALL_OW 322
// hasStimDrugsCollected := true ;
17868: LD_ADDR_EXP 24
17872: PUSH
17873: LD_INT 1
17875: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17876: LD_STRING M1-drugs-out
17878: PPUSH
17879: CALL_OW 604
// end ; if not hasExplosionCollected then
17883: LD_EXP 23
17887: NOT
17888: IFFALSE 17906
// entranceVisitedList := entranceVisitedList diff drugsLab else
17890: LD_ADDR_EXP 16
17894: PUSH
17895: LD_EXP 16
17899: PUSH
17900: LD_INT 162
17902: DIFF
17903: ST_TO_ADDR
17904: GO 17939
// begin wait ( 0 0$3 ) ;
17906: LD_INT 105
17908: PPUSH
17909: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17913: LD_EXP 46
17917: PPUSH
17918: LD_STRING DH-Lab-2
17920: PPUSH
17921: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17925: LD_STRING M1-drugsLab-out
17927: PPUSH
17928: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17932: LD_INT 162
17934: PPUSH
17935: CALL 21359 0 1
// end ; end else
17939: GO 17953
// Say ( Heike , DH-Locked ) ;
17941: LD_EXP 46
17945: PPUSH
17946: LD_STRING DH-Locked
17948: PPUSH
17949: CALL_OW 88
// end ; ruFac :
17953: GO 19449
17955: LD_INT 61
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 18075
17963: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17964: LD_EXP 53
17968: PPUSH
17969: CALL_OW 302
17973: IFFALSE 17988
17975: PUSH
17976: LD_EXP 53
17980: PUSH
17981: LD_EXP 14
17985: IN
17986: NOT
17987: AND
17988: IFFALSE 18069
// begin Say ( Heike , DH-Krastyo-1 ) ;
17990: LD_EXP 46
17994: PPUSH
17995: LD_STRING DH-Krastyo-1
17997: PPUSH
17998: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
18002: LD_EXP 53
18006: PPUSH
18007: LD_STRING DMar-Krastyo-2
18009: PPUSH
18010: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
18014: LD_EXP 53
18018: PPUSH
18019: LD_STRING DMar-Krastyo-3
18021: PPUSH
18022: CALL_OW 88
// SetSide ( Markov , 2 ) ;
18026: LD_EXP 53
18030: PPUSH
18031: LD_INT 2
18033: PPUSH
18034: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
18038: LD_ADDR_EXP 14
18042: PUSH
18043: LD_EXP 14
18047: PPUSH
18048: LD_EXP 53
18052: PPUSH
18053: CALL 68440 0 2
18057: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
18058: LD_EXP 53
18062: PPUSH
18063: CALL_OW 122
// end else
18067: GO 18073
// SayHEmpty ( ) ;
18069: CALL 16442 0 0
// end ; ruBarKam :
18073: GO 19449
18075: LD_INT 109
18077: DOUBLE
18078: EQUAL
18079: IFTRUE 18083
18081: GO 18232
18083: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
18084: LD_EXP 50
18088: PPUSH
18089: CALL_OW 302
18093: IFFALSE 18108
18095: PUSH
18096: LD_EXP 50
18100: PUSH
18101: LD_EXP 14
18105: IN
18106: NOT
18107: AND
18108: IFFALSE 18226
// begin Say ( Heike , DH-Kamil-1 ) ;
18110: LD_EXP 46
18114: PPUSH
18115: LD_STRING DH-Kamil-1
18117: PPUSH
18118: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
18122: LD_EXP 50
18126: PPUSH
18127: LD_STRING DKam-Kamil-2
18129: PPUSH
18130: CALL_OW 88
// if IsOk ( Sophia ) then
18134: LD_EXP 52
18138: PPUSH
18139: CALL_OW 302
18143: IFFALSE 18183
// if Sophia in heikeSquad then
18145: LD_EXP 52
18149: PUSH
18150: LD_EXP 14
18154: IN
18155: IFFALSE 18171
// Say ( Kamil , DKam-Kamil-a-3 ) else
18157: LD_EXP 50
18161: PPUSH
18162: LD_STRING DKam-Kamil-a-3
18164: PPUSH
18165: CALL_OW 88
18169: GO 18183
// Say ( Kamil , DKam-Kamil-3 ) ;
18171: LD_EXP 50
18175: PPUSH
18176: LD_STRING DKam-Kamil-3
18178: PPUSH
18179: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
18183: LD_EXP 50
18187: PPUSH
18188: LD_INT 2
18190: PPUSH
18191: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
18195: LD_ADDR_EXP 14
18199: PUSH
18200: LD_EXP 14
18204: PPUSH
18205: LD_EXP 50
18209: PPUSH
18210: CALL 68440 0 2
18214: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
18215: LD_EXP 50
18219: PPUSH
18220: CALL_OW 122
// end else
18224: GO 18230
// SayHEmpty ( ) ;
18226: CALL 16442 0 0
// end ; ruOutpost1 :
18230: GO 19449
18232: LD_INT 169
18234: DOUBLE
18235: EQUAL
18236: IFTRUE 18240
18238: GO 18481
18240: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
18241: LD_EXP 55
18245: PPUSH
18246: CALL_OW 302
18250: IFFALSE 18265
18252: PUSH
18253: LD_EXP 55
18257: PUSH
18258: LD_EXP 14
18262: IN
18263: NOT
18264: AND
18265: IFFALSE 18475
// begin if hasMethanol then
18267: LD_EXP 13
18271: IFFALSE 18404
// begin Say ( Heike , DH-Kurt-1 ) ;
18273: LD_EXP 46
18277: PPUSH
18278: LD_STRING DH-Kurt-1
18280: PPUSH
18281: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
18285: LD_EXP 55
18289: PPUSH
18290: LD_STRING DKs-Kurt-2
18292: PPUSH
18293: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
18297: LD_EXP 47
18301: PPUSH
18302: LD_INT 169
18304: PPUSH
18305: CALL_OW 296
18309: PUSH
18310: LD_INT 10
18312: LESS
18313: IFFALSE 18327
18315: PUSH
18316: LD_EXP 47
18320: PUSH
18321: LD_EXP 14
18325: IN
18326: AND
18327: IFFALSE 18402
// begin ComMoveXY ( Givi , 100 , 37 ) ;
18329: LD_EXP 47
18333: PPUSH
18334: LD_INT 100
18336: PPUSH
18337: LD_INT 37
18339: PPUSH
18340: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
18344: LD_EXP 47
18348: PPUSH
18349: LD_INT 169
18351: PPUSH
18352: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
18356: LD_INT 35
18358: PPUSH
18359: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
18363: LD_EXP 47
18367: PPUSH
18368: LD_INT 169
18370: PPUSH
18371: CALL_OW 296
18375: PUSH
18376: LD_INT 7
18378: LESS
18379: IFFALSE 18356
// Say ( Givi , DG-Kurt-3 ) ;
18381: LD_EXP 47
18385: PPUSH
18386: LD_STRING DG-Kurt-3
18388: PPUSH
18389: CALL_OW 88
// ComStop ( Givi ) ;
18393: LD_EXP 47
18397: PPUSH
18398: CALL_OW 141
// end ; end else
18402: GO 18432
// begin Say ( Heike , DH-Kurt-1 ) ;
18404: LD_EXP 46
18408: PPUSH
18409: LD_STRING DH-Kurt-1
18411: PPUSH
18412: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
18416: LD_EXP 55
18420: PPUSH
18421: LD_STRING DKs-Kurt-2
18423: PPUSH
18424: CALL_OW 88
// SpawnAdditionalRuGuards ;
18428: CALL 3677 0 0
// end ; SetSide ( Kurt , 2 ) ;
18432: LD_EXP 55
18436: PPUSH
18437: LD_INT 2
18439: PPUSH
18440: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
18444: LD_ADDR_EXP 14
18448: PUSH
18449: LD_EXP 14
18453: PPUSH
18454: LD_EXP 55
18458: PPUSH
18459: CALL 68440 0 2
18463: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
18464: LD_EXP 55
18468: PPUSH
18469: CALL_OW 122
// end else
18473: GO 18479
// SayHEmpty ( ) ;
18475: CALL 16442 0 0
// end ; ruOutpostBar :
18479: GO 19449
18481: LD_INT 13
18483: DOUBLE
18484: EQUAL
18485: IFTRUE 18489
18487: GO 18535
18489: POP
// begin if not hasGuardPatrolPlan then
18490: LD_EXP 18
18494: NOT
18495: IFFALSE 18529
// begin Say ( Heike , DH-PatrolPlan ) ;
18497: LD_EXP 46
18501: PPUSH
18502: LD_STRING DH-PatrolPlan
18504: PPUSH
18505: CALL_OW 88
// hasGuardPatrolPlan := true ;
18509: LD_ADDR_EXP 18
18513: PUSH
18514: LD_INT 1
18516: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
18517: LD_INT 6
18519: PPUSH
18520: LD_INT 2
18522: PPUSH
18523: CALL_OW 343
// end else
18527: GO 18533
// SayHEmpty ( ) ;
18529: CALL 16442 0 0
// end ; ruKaiaBar :
18533: GO 19449
18535: LD_INT 147
18537: DOUBLE
18538: EQUAL
18539: IFTRUE 18543
18541: GO 18692
18543: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
18544: LD_EXP 51
18548: PPUSH
18549: CALL_OW 302
18553: IFFALSE 18568
18555: PUSH
18556: LD_EXP 51
18560: PUSH
18561: LD_EXP 14
18565: IN
18566: NOT
18567: AND
18568: IFFALSE 18690
// begin Say ( Heike , DH-Kaia-1 ) ;
18570: LD_EXP 46
18574: PPUSH
18575: LD_STRING DH-Kaia-1
18577: PPUSH
18578: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
18582: LD_EXP 51
18586: PPUSH
18587: LD_STRING DK-Kaia-2
18589: PPUSH
18590: CALL_OW 88
// if hasSniperRifle then
18594: LD_EXP 11
18598: IFFALSE 18649
// begin if IsOk ( Markov ) then
18600: LD_EXP 53
18604: PPUSH
18605: CALL_OW 302
18609: IFFALSE 18625
// Say ( Kaia , DK-Kaia-3 ) else
18611: LD_EXP 51
18615: PPUSH
18616: LD_STRING DK-Kaia-3
18618: PPUSH
18619: CALL_OW 88
18623: GO 18637
// Say ( Kaia , DK-Kaia-a-3 ) ;
18625: LD_EXP 51
18629: PPUSH
18630: LD_STRING DK-Kaia-a-3
18632: PPUSH
18633: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
18637: LD_EXP 46
18641: PPUSH
18642: LD_STRING DH-Kaia-4
18644: PPUSH
18645: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
18649: LD_EXP 51
18653: PPUSH
18654: LD_INT 2
18656: PPUSH
18657: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
18661: LD_ADDR_EXP 14
18665: PUSH
18666: LD_EXP 14
18670: PPUSH
18671: LD_EXP 51
18675: PPUSH
18676: CALL 68440 0 2
18680: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
18681: LD_EXP 51
18685: PPUSH
18686: CALL_OW 122
// end ; end ; ruWeaponsBar :
18690: GO 19449
18692: LD_INT 137
18694: DOUBLE
18695: EQUAL
18696: IFTRUE 18700
18698: GO 19448
18700: POP
// begin someoneTookWeapon := false ;
18701: LD_ADDR_VAR 0 6
18705: PUSH
18706: LD_INT 0
18708: ST_TO_ADDR
// if hasWeapons then
18709: LD_EXP 19
18713: IFFALSE 19434
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
18715: LD_ADDR_EXP 16
18719: PUSH
18720: LD_EXP 16
18724: PUSH
18725: LD_INT 137
18727: DIFF
18728: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
18729: LD_ADDR_VAR 0 4
18733: PUSH
18734: LD_EXP 14
18738: PPUSH
18739: LD_INT 91
18741: PUSH
18742: LD_EXP 46
18746: PUSH
18747: LD_INT 8
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: LIST
18754: PPUSH
18755: CALL_OW 72
18759: ST_TO_ADDR
// if not heikeSquad or not tmp then
18760: LD_EXP 14
18764: NOT
18765: IFTRUE 18774
18767: PUSH
18768: LD_VAR 0 4
18772: NOT
18773: OR
18774: IFFALSE 18790
// Say ( Heike , DH-Weapons-Alone ) else
18776: LD_EXP 46
18780: PPUSH
18781: LD_STRING DH-Weapons-Alone
18783: PPUSH
18784: CALL_OW 88
18788: GO 19432
// begin if not firstArmouryDialog then
18790: LD_EXP 39
18794: NOT
18795: IFFALSE 18854
// begin Say ( Heike , DH-Weapons-1 ) ;
18797: LD_EXP 46
18801: PPUSH
18802: LD_STRING DH-Weapons-1
18804: PPUSH
18805: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
18809: LD_EXP 46
18813: PPUSH
18814: LD_STRING DH-Weapons-2
18816: PPUSH
18817: CALL_OW 88
// Query ( Weapons ) ;
18821: LD_STRING Weapons
18823: PPUSH
18824: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
18828: LD_INT 65
18830: PPUSH
18831: LD_INT 1
18833: PPUSH
18834: CALL_OW 424
// canEquipWeapons := true ;
18838: LD_ADDR_EXP 41
18842: PUSH
18843: LD_INT 1
18845: ST_TO_ADDR
// firstArmouryDialog := true ;
18846: LD_ADDR_EXP 39
18850: PUSH
18851: LD_INT 1
18853: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
18854: LD_EXP 8
18858: IFFALSE 18872
18860: PUSH
18861: LD_EXP 51
18865: PUSH
18866: LD_VAR 0 4
18870: IN
18871: AND
18872: IFFALSE 18889
18874: PUSH
18875: LD_EXP 51
18879: PPUSH
18880: CALL_OW 257
18884: PUSH
18885: LD_INT 34
18887: NONEQUAL
18888: AND
18889: IFFALSE 19047
// begin SetSide ( Kaia , 5 ) ;
18891: LD_EXP 51
18895: PPUSH
18896: LD_INT 5
18898: PPUSH
18899: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
18903: LD_EXP 51
18907: PPUSH
18908: LD_INT 137
18910: PPUSH
18911: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18915: LD_INT 35
18917: PPUSH
18918: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18922: LD_EXP 51
18926: PPUSH
18927: CALL_OW 310
18931: IFFALSE 18915
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18933: LD_EXP 46
18937: PPUSH
18938: LD_STRING DH-Kaia-Revolver-2
18940: PPUSH
18941: CALL_OW 88
// someoneTookWeapon := true ;
18945: LD_ADDR_VAR 0 6
18949: PUSH
18950: LD_INT 1
18952: ST_TO_ADDR
// SetClassKaiaRevolver ;
18953: CALL 1771 0 0
// hasRevolver := false ;
18957: LD_ADDR_EXP 8
18961: PUSH
18962: LD_INT 0
18964: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18965: LD_EXP 51
18969: PPUSH
18970: LD_INT 2
18972: PPUSH
18973: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18977: LD_EXP 51
18981: PPUSH
18982: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18986: LD_EXP 51
18990: PPUSH
18991: CALL_OW 257
18995: PUSH
18996: LD_INT 32
18998: EQUAL
18999: IFFALSE 19013
19001: PUSH
19002: LD_EXP 48
19006: PUSH
19007: LD_EXP 14
19011: IN
19012: AND
19013: IFFALSE 19030
19015: PUSH
19016: LD_EXP 48
19020: PPUSH
19021: CALL_OW 255
19025: PUSH
19026: LD_INT 2
19028: EQUAL
19029: AND
19030: IFFALSE 19047
// begin giveSniperRifleToMike := true ;
19032: LD_ADDR_EXP 42
19036: PUSH
19037: LD_INT 1
19039: ST_TO_ADDR
// Query ( QSniperMike ) ;
19040: LD_STRING QSniperMike
19042: PPUSH
19043: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
19047: LD_EXP 47
19051: PUSH
19052: LD_VAR 0 4
19056: IN
19057: IFFALSE 19074
19059: PUSH
19060: LD_EXP 47
19064: PPUSH
19065: CALL_OW 257
19069: PUSH
19070: LD_INT 33
19072: EQUAL
19073: AND
19074: IFFALSE 19223
// begin someoneTookWeapon := true ;
19076: LD_ADDR_VAR 0 6
19080: PUSH
19081: LD_INT 1
19083: ST_TO_ADDR
// SetSide ( Givi , 5 ) ;
19084: LD_EXP 47
19088: PPUSH
19089: LD_INT 5
19091: PPUSH
19092: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
19096: LD_EXP 47
19100: PPUSH
19101: LD_INT 137
19103: PPUSH
19104: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19108: LD_INT 35
19110: PPUSH
19111: CALL_OW 67
// until IsInUnit ( Givi ) ;
19115: LD_EXP 47
19119: PPUSH
19120: CALL_OW 310
19124: IFFALSE 19108
// Say ( Givi , DG-Weapons-3 ) ;
19126: LD_EXP 47
19130: PPUSH
19131: LD_STRING DG-Weapons-3
19133: PPUSH
19134: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
19138: LD_EXP 46
19142: PPUSH
19143: LD_STRING DH-Weapons-4
19145: PPUSH
19146: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
19150: LD_EXP 47
19154: PPUSH
19155: LD_STRING DG-Weapons-5
19157: PPUSH
19158: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
19162: LD_EXP 47
19166: PPUSH
19167: LD_INT 11
19169: PPUSH
19170: CALL_OW 336
// ComExitBuilding ( Givi ) ;
19174: LD_EXP 47
19178: PPUSH
19179: CALL_OW 122
// SetSide ( Givi , 2 ) ;
19183: LD_EXP 47
19187: PPUSH
19188: LD_INT 2
19190: PPUSH
19191: CALL_OW 235
// if hasRevolver then
19195: LD_EXP 8
19199: IFFALSE 19221
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
19201: LD_EXP 46
19205: PPUSH
19206: LD_STRING DH-Kaia-Revolver-1
19208: PPUSH
19209: CALL_OW 88
// heikeHasRevolver := true ;
19213: LD_ADDR_EXP 20
19217: PUSH
19218: LD_INT 1
19220: ST_TO_ADDR
// end ; end else
19221: GO 19432
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
19223: LD_EXP 50
19227: PUSH
19228: LD_VAR 0 4
19232: IN
19233: IFFALSE 19250
19235: PUSH
19236: LD_EXP 50
19240: PPUSH
19241: CALL_OW 257
19245: PUSH
19246: LD_INT 33
19248: EQUAL
19249: AND
19250: IFFALSE 19387
// begin someoneTookWeapon := true ;
19252: LD_ADDR_VAR 0 6
19256: PUSH
19257: LD_INT 1
19259: ST_TO_ADDR
// SetSide ( Kamil , 5 ) ;
19260: LD_EXP 50
19264: PPUSH
19265: LD_INT 5
19267: PPUSH
19268: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
19272: LD_EXP 50
19276: PPUSH
19277: LD_INT 137
19279: PPUSH
19280: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19284: LD_INT 35
19286: PPUSH
19287: CALL_OW 67
// until IsInUnit ( Kamil ) ;
19291: LD_EXP 50
19295: PPUSH
19296: CALL_OW 310
19300: IFFALSE 19284
// Say ( Kamil , DKam-Weapons-a-3 ) ;
19302: LD_EXP 50
19306: PPUSH
19307: LD_STRING DKam-Weapons-a-3
19309: PPUSH
19310: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
19314: LD_EXP 46
19318: PPUSH
19319: LD_STRING DH-Weapons-a-4
19321: PPUSH
19322: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
19326: LD_EXP 50
19330: PPUSH
19331: LD_INT 11
19333: PPUSH
19334: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
19338: LD_EXP 50
19342: PPUSH
19343: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
19347: LD_EXP 50
19351: PPUSH
19352: LD_INT 2
19354: PPUSH
19355: CALL_OW 235
// if hasRevolver then
19359: LD_EXP 8
19363: IFFALSE 19385
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
19365: LD_EXP 46
19369: PPUSH
19370: LD_STRING DH-Kaia-Revolver-1
19372: PPUSH
19373: CALL_OW 88
// heikeHasRevolver := true ;
19377: LD_ADDR_EXP 20
19381: PUSH
19382: LD_INT 1
19384: ST_TO_ADDR
// end ; end else
19385: GO 19432
// begin if not someoneTookWeapon then
19387: LD_VAR 0 6
19391: NOT
19392: IFFALSE 19406
// Say ( Heike , DH-Weapons-Alone-2 ) ;
19394: LD_EXP 46
19398: PPUSH
19399: LD_STRING DH-Weapons-Alone-2
19401: PPUSH
19402: CALL_OW 88
// if hasRevolver then
19406: LD_EXP 8
19410: IFFALSE 19432
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
19412: LD_EXP 46
19416: PPUSH
19417: LD_STRING DH-Kaia-Revolver-1a
19419: PPUSH
19420: CALL_OW 88
// heikeHasRevolver := true ;
19424: LD_ADDR_EXP 20
19428: PUSH
19429: LD_INT 1
19431: ST_TO_ADDR
// end ; end ; end ; end else
19432: GO 19446
// Say ( Heike , DH-Locked ) ;
19434: LD_EXP 46
19438: PPUSH
19439: LD_STRING DH-Locked
19441: PPUSH
19442: CALL_OW 88
// end ; end ;
19446: GO 19449
19448: POP
// SetSide ( building , 3 ) ;
19449: LD_VAR 0 1
19453: PPUSH
19454: LD_INT 3
19456: PPUSH
19457: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
19461: LD_VAR 0 1
19465: PPUSH
19466: CALL 20810 0 1
// wait ( 0 0$0.3 ) ;
19470: LD_INT 10
19472: PPUSH
19473: CALL_OW 67
// ComExitBuilding ( Heike ) ;
19477: LD_EXP 46
19481: PPUSH
19482: CALL_OW 122
// SetSide ( Heike , 2 ) ;
19486: LD_EXP 46
19490: PPUSH
19491: LD_INT 2
19493: PPUSH
19494: CALL_OW 235
// InGameOff ;
19498: CALL_OW 9
// end ;
19502: LD_VAR 0 2
19506: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
19507: LD_EXP 30
19511: NOT
19512: IFFALSE 19521
19514: PUSH
19515: LD_EXP 17
19519: NOT
19520: AND
19521: IFFALSE 19557
19523: PUSH
19524: LD_INT 22
19526: PUSH
19527: LD_INT 5
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 21
19536: PUSH
19537: LD_INT 1
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PPUSH
19548: CALL_OW 69
19552: PUSH
19553: LD_INT 0
19555: EQUAL
19556: AND
19557: IFFALSE 19610
19559: PUSH
19560: LD_INT 22
19562: PUSH
19563: LD_INT 4
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 21
19572: PUSH
19573: LD_INT 1
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PPUSH
19584: CALL_OW 69
19588: PUSH
19589: LD_INT 0
19591: EQUAL
19592: IFFALSE 19600
19594: PUSH
19595: LD_EXP 25
19599: AND
19600: IFTRUE 19609
19602: PUSH
19603: LD_EXP 25
19607: NOT
19608: OR
19609: AND
19610: IFFALSE 19642
19612: GO 19614
19614: DISABLE
// begin DialogueOn ;
19615: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
19619: LD_EXP 46
19623: PPUSH
19624: LD_STRING DH-Alarm-2
19626: PPUSH
19627: CALL_OW 88
// DialogueOff ;
19631: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
19635: LD_STRING M1-people-out
19637: PPUSH
19638: CALL_OW 337
// end ;
19642: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
19643: LD_EXP 48
19647: PPUSH
19648: CALL_OW 255
19652: PUSH
19653: LD_INT 2
19655: EQUAL
19656: IFFALSE 19670
19658: PUSH
19659: LD_EXP 48
19663: PUSH
19664: LD_EXP 14
19668: IN
19669: AND
19670: IFFALSE 19692
19672: PUSH
19673: LD_EXP 46
19677: PPUSH
19678: LD_EXP 48
19682: PPUSH
19683: CALL_OW 296
19687: PUSH
19688: LD_INT 6
19690: LESS
19691: AND
19692: IFFALSE 19701
19694: PUSH
19695: LD_EXP 30
19699: NOT
19700: AND
19701: IFFALSE 19709
19703: PUSH
19704: LD_EXP 42
19708: AND
19709: IFFALSE 19754
19711: GO 19713
19713: DISABLE
// begin repeat wait ( 1 ) ;
19714: LD_INT 1
19716: PPUSH
19717: CALL_OW 67
// ComWalk ( Mike ) ;
19721: LD_EXP 48
19725: PPUSH
19726: CALL_OW 138
// until not Crawls ( Mike ) ;
19730: LD_EXP 48
19734: PPUSH
19735: CALL_OW 318
19739: NOT
19740: IFFALSE 19714
// SetClass ( Mike , class_hunter ) ;
19742: LD_EXP 48
19746: PPUSH
19747: LD_INT 32
19749: PPUSH
19750: CALL_OW 336
// end ;
19754: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
19755: LD_EXP 41
19759: IFFALSE 19767
19761: PUSH
19762: LD_EXP 40
19766: AND
19767: IFFALSE 19782
19769: PUSH
19770: LD_INT 137
19772: PPUSH
19773: CALL_OW 255
19777: PUSH
19778: LD_INT 3
19780: EQUAL
19781: AND
19782: IFFALSE 19830
19784: PUSH
19785: LD_EXP 14
19789: PPUSH
19790: LD_INT 95
19792: PUSH
19793: LD_INT 65
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 22
19802: PUSH
19803: LD_INT 2
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 25
19812: PUSH
19813: LD_INT 33
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: PPUSH
19825: CALL_OW 72
19829: AND
19830: IFFALSE 19849
19832: PUSH
19833: LD_INT 2
19835: PPUSH
19836: LD_INT 3
19838: PPUSH
19839: CALL_OW 81
19843: PUSH
19844: LD_INT 2
19846: EQUAL
19847: NOT
19848: AND
19849: IFFALSE 19870
19851: PUSH
19852: LD_EXP 66
19856: PPUSH
19857: LD_INT 137
19859: PPUSH
19860: CALL_OW 296
19864: PUSH
19865: LD_INT 12
19867: LESS
19868: NOT
19869: AND
19870: IFFALSE 20124
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
19878: PPUSH
// begin enable ;
19879: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
19880: LD_ADDR_VAR 0 2
19884: PUSH
19885: LD_EXP 14
19889: PPUSH
19890: LD_INT 95
19892: PUSH
19893: LD_INT 65
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 22
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 25
19912: PUSH
19913: LD_INT 33
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: LIST
19924: PPUSH
19925: CALL_OW 72
19929: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
19930: LD_STRING QWeapons
19932: PPUSH
19933: CALL_OW 97
19937: PUSH
19938: LD_INT 1
19940: EQUAL
19941: IFFALSE 20124
// begin for i in tmp do
19943: LD_ADDR_VAR 0 1
19947: PUSH
19948: LD_VAR 0 2
19952: PUSH
19953: FOR_IN
19954: IFFALSE 20122
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
19956: LD_INT 137
19958: PPUSH
19959: CALL_OW 313
19963: PUSH
19964: LD_INT 6
19966: EQUAL
19967: IFFALSE 19971
// continue ;
19969: GO 19953
// SetSide ( i , 3 ) ;
19971: LD_VAR 0 1
19975: PPUSH
19976: LD_INT 3
19978: PPUSH
19979: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
19983: LD_VAR 0 1
19987: PPUSH
19988: LD_INT 137
19990: PPUSH
19991: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
19995: LD_ADDR_EXP 40
19999: PUSH
20000: LD_EXP 40
20004: PPUSH
20005: CALL 69835 0 1
20009: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
20010: LD_INT 10
20012: PPUSH
20013: CALL_OW 67
// until IsInUnit ( i ) ;
20017: LD_VAR 0 1
20021: PPUSH
20022: CALL_OW 310
20026: IFFALSE 20010
// SetClass ( i , class_soldier ) ;
20028: LD_VAR 0 1
20032: PPUSH
20033: LD_INT 1
20035: PPUSH
20036: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
20040: LD_VAR 0 1
20044: PPUSH
20045: CALL_OW 122
// wait ( 0 0$1 ) ;
20049: LD_INT 35
20051: PPUSH
20052: CALL_OW 67
// until not IsInUnit ( i ) ;
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL_OW 310
20065: NOT
20066: IFFALSE 20040
// SetSide ( i , 2 ) ;
20068: LD_VAR 0 1
20072: PPUSH
20073: LD_INT 2
20075: PPUSH
20076: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
20080: LD_VAR 0 1
20084: PPUSH
20085: LD_INT 191
20087: PPUSH
20088: LD_INT 126
20090: PPUSH
20091: CALL_OW 171
// if weaponsAmount = 0 then
20095: LD_EXP 40
20099: PUSH
20100: LD_INT 0
20102: EQUAL
20103: IFFALSE 20120
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
20105: LD_INT 65
20107: PPUSH
20108: LD_INT 0
20110: PPUSH
20111: CALL_OW 424
// disable ;
20115: DISABLE
// exit ;
20116: POP
20117: POP
20118: GO 20124
// end ; end ;
20120: GO 19953
20122: POP
20123: POP
// end ; end ; end_of_file
20124: PPOPN 2
20126: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
20127: LD_VAR 0 1
20131: PUSH
20132: LD_INT 3
20134: DOUBLE
20135: EQUAL
20136: IFTRUE 20140
20138: GO 20170
20140: POP
// begin repeat wait ( 0 0$1 ) ;
20141: LD_INT 35
20143: PPUSH
20144: CALL_OW 67
// CenterOnUnits ( Heike ) ;
20148: LD_EXP 46
20152: PPUSH
20153: CALL_OW 85
// until IsDying ( Heike ) ;
20157: LD_EXP 46
20161: PPUSH
20162: CALL_OW 303
20166: IFFALSE 20141
// end ; end ;
20168: GO 20171
20170: POP
// end ;
20171: PPOPN 1
20173: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
20174: LD_OWVAR 59
20178: IFFALSE 20182
// exit ;
20180: GO 20256
// if showPlaceEvent then
20182: LD_INT 4
20184: IFFALSE 20256
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
20186: LD_VAR 0 2
20190: PPUSH
20191: LD_VAR 0 3
20195: PPUSH
20196: LD_INT 2
20198: PPUSH
20199: LD_INT 6
20201: NEG
20202: PPUSH
20203: CALL_OW 330
// CenterOnXY ( x , y ) ;
20207: LD_VAR 0 2
20211: PPUSH
20212: LD_VAR 0 3
20216: PPUSH
20217: CALL_OW 84
// wait ( time ) ;
20221: LD_VAR 0 4
20225: PPUSH
20226: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
20230: LD_EXP 46
20234: PPUSH
20235: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
20239: LD_VAR 0 2
20243: PPUSH
20244: LD_VAR 0 3
20248: PPUSH
20249: LD_INT 2
20251: PPUSH
20252: CALL_OW 331
// end ; end ;
20256: PPOPN 7
20258: END
// on UnitDestroyed ( un ) do var x , y ;
20259: LD_INT 0
20261: PPUSH
20262: PPUSH
// begin if un = Heike and hasNormalScene then
20263: LD_VAR 0 1
20267: PUSH
20268: LD_EXP 46
20272: EQUAL
20273: IFFALSE 20281
20275: PUSH
20276: LD_EXP 5
20280: AND
20281: IFFALSE 20305
// if loseCounter then
20283: LD_EXP 32
20287: IFFALSE 20298
// YouLost ( HeikeNoSurrender ) else
20289: LD_STRING HeikeNoSurrender
20291: PPUSH
20292: CALL_OW 104
20296: GO 20305
// YouLost ( Heike ) ;
20298: LD_STRING Heike
20300: PPUSH
20301: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
20305: LD_VAR 0 1
20309: PPUSH
20310: CALL_OW 255
20314: PUSH
20315: LD_INT 2
20317: EQUAL
20318: IFFALSE 20335
20320: PUSH
20321: LD_VAR 0 1
20325: PPUSH
20326: CALL_OW 247
20330: PUSH
20331: LD_INT 1
20333: EQUAL
20334: AND
20335: IFFALSE 20352
// loseCounter := Inc ( loseCounter ) ;
20337: LD_ADDR_EXP 32
20341: PUSH
20342: LD_EXP 32
20346: PPUSH
20347: CALL 69813 0 1
20351: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
20352: LD_VAR 0 1
20356: PPUSH
20357: CALL_OW 255
20361: PUSH
20362: LD_INT 6
20364: EQUAL
20365: IFFALSE 20374
20367: PUSH
20368: LD_EXP 17
20372: NOT
20373: AND
20374: IFFALSE 20388
20376: PUSH
20377: LD_VAR 0 1
20381: PUSH
20382: LD_EXP 71
20386: IN
20387: AND
20388: IFFALSE 20492
// begin x := GetX ( un ) ;
20390: LD_ADDR_VAR 0 2
20394: PUSH
20395: LD_VAR 0 1
20399: PPUSH
20400: CALL_OW 250
20404: ST_TO_ADDR
// y := GetY ( un ) ;
20405: LD_ADDR_VAR 0 3
20409: PUSH
20410: LD_VAR 0 1
20414: PPUSH
20415: CALL_OW 251
20419: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
20420: LD_ADDR_EXP 43
20424: PUSH
20425: LD_EXP 43
20429: PPUSH
20430: LD_VAR 0 2
20434: PUSH
20435: LD_VAR 0 3
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PPUSH
20444: CALL 68440 0 2
20448: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
20449: LD_ADDR_EXP 71
20453: PUSH
20454: LD_EXP 71
20458: PUSH
20459: LD_VAR 0 1
20463: DIFF
20464: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
20465: LD_INT 3
20467: PPUSH
20468: LD_VAR 0 2
20472: PPUSH
20473: LD_VAR 0 3
20477: PPUSH
20478: CALL_OW 293
20482: IFFALSE 20492
// isAlarm := true ;
20484: LD_ADDR_EXP 17
20488: PUSH
20489: LD_INT 1
20491: ST_TO_ADDR
// end ; end ;
20492: PPOPN 3
20494: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
20495: LD_EXP 44
20499: IFFALSE 20503
// exit ;
20501: GO 20557
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
20503: LD_VAR 0 1
20507: PUSH
20508: LD_INT 2
20510: EQUAL
20511: IFFALSE 20523
20513: PUSH
20514: LD_VAR 0 2
20518: PUSH
20519: LD_INT 3
20521: EQUAL
20522: AND
20523: IFTRUE 20547
20525: PUSH
20526: LD_VAR 0 1
20530: PUSH
20531: LD_INT 3
20533: EQUAL
20534: IFFALSE 20546
20536: PUSH
20537: LD_VAR 0 2
20541: PUSH
20542: LD_INT 2
20544: EQUAL
20545: AND
20546: OR
20547: IFFALSE 20557
// isAlarm := true ;
20549: LD_ADDR_EXP 17
20553: PUSH
20554: LD_INT 1
20556: ST_TO_ADDR
// end ;
20557: PPOPN 2
20559: END
// on DestinationUnreachable ( un ) do var i , units ;
20560: LD_INT 0
20562: PPUSH
20563: PPUSH
// begin if un = ruDisturb and not isAlarm then
20564: LD_VAR 0 1
20568: PUSH
20569: LD_EXP 66
20573: EQUAL
20574: IFFALSE 20583
20576: PUSH
20577: LD_EXP 17
20581: NOT
20582: AND
20583: IFFALSE 20704
// begin units := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff Heike ;
20585: LD_ADDR_VAR 0 3
20589: PUSH
20590: LD_INT 22
20592: PUSH
20593: LD_INT 2
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 21
20602: PUSH
20603: LD_INT 1
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PPUSH
20614: CALL_OW 69
20618: PUSH
20619: LD_EXP 46
20623: DIFF
20624: ST_TO_ADDR
// if not units then
20625: LD_VAR 0 3
20629: NOT
20630: IFFALSE 20634
// exit ;
20632: GO 20704
// for i in units do
20634: LD_ADDR_VAR 0 2
20638: PUSH
20639: LD_VAR 0 3
20643: PUSH
20644: FOR_IN
20645: IFFALSE 20702
// begin if Carry ( i ) then
20647: LD_VAR 0 2
20651: PPUSH
20652: CALL_OW 281
20656: IFFALSE 20673
// SetCargo ( i , mat_cans , 0 ) ;
20658: LD_VAR 0 2
20662: PPUSH
20663: LD_INT 1
20665: PPUSH
20666: LD_INT 0
20668: PPUSH
20669: CALL_OW 290
// SetSide ( i , 5 ) ;
20673: LD_VAR 0 2
20677: PPUSH
20678: LD_INT 5
20680: PPUSH
20681: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
20685: LD_VAR 0 2
20689: PPUSH
20690: LD_INT 113
20692: PPUSH
20693: LD_INT 17
20695: PPUSH
20696: CALL_OW 111
// end ;
20700: GO 20644
20702: POP
20703: POP
// end ; end ; end_of_file
20704: PPOPN 3
20706: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
20707: LD_INT 0
20709: PPUSH
20710: PPUSH
20711: PPUSH
// u1 := IsInUnit ( unit1 ) ;
20712: LD_ADDR_VAR 0 4
20716: PUSH
20717: LD_VAR 0 1
20721: PPUSH
20722: CALL_OW 310
20726: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
20727: LD_ADDR_VAR 0 5
20731: PUSH
20732: LD_VAR 0 2
20736: PPUSH
20737: CALL_OW 310
20741: ST_TO_ADDR
// result := u1 and u1 = u2 ;
20742: LD_ADDR_VAR 0 3
20746: PUSH
20747: LD_VAR 0 4
20751: IFFALSE 20765
20753: PUSH
20754: LD_VAR 0 4
20758: PUSH
20759: LD_VAR 0 5
20763: EQUAL
20764: AND
20765: ST_TO_ADDR
// end ;
20766: LD_VAR 0 3
20770: RET
// export function ShowPlace ( x , y , time ) ; begin
20771: LD_INT 0
20773: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
20774: LD_INT 4
20776: PPUSH
20777: LD_VAR 0 1
20781: PPUSH
20782: LD_VAR 0 2
20786: PPUSH
20787: LD_VAR 0 3
20791: PPUSH
20792: LD_INT 0
20794: PPUSH
20795: LD_INT 0
20797: PPUSH
20798: LD_INT 0
20800: PPUSH
20801: CALL_OW 595
// end ;
20805: LD_VAR 0 4
20809: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
20810: LD_INT 0
20812: PPUSH
20813: PPUSH
20814: PPUSH
20815: PPUSH
20816: PPUSH
20817: PPUSH
// if not IsOk ( building ) then
20818: LD_VAR 0 1
20822: PPUSH
20823: CALL_OW 302
20827: NOT
20828: IFFALSE 20832
// exit ;
20830: GO 21079
// x := GetX ( building ) ;
20832: LD_ADDR_VAR 0 4
20836: PUSH
20837: LD_VAR 0 1
20841: PPUSH
20842: CALL_OW 250
20846: ST_TO_ADDR
// y := GetY ( building ) ;
20847: LD_ADDR_VAR 0 5
20851: PUSH
20852: LD_VAR 0 1
20856: PPUSH
20857: CALL_OW 251
20861: ST_TO_ADDR
// d := GetDir ( building ) ;
20862: LD_ADDR_VAR 0 6
20866: PUSH
20867: LD_VAR 0 1
20871: PPUSH
20872: CALL_OW 254
20876: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20877: LD_ADDR_VAR 0 7
20881: PUSH
20882: LD_VAR 0 4
20886: PPUSH
20887: LD_VAR 0 6
20891: PPUSH
20892: LD_INT 3
20894: PPUSH
20895: CALL_OW 272
20899: PUSH
20900: LD_VAR 0 5
20904: PPUSH
20905: LD_VAR 0 6
20909: PPUSH
20910: LD_INT 3
20912: PPUSH
20913: CALL_OW 273
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20922: LD_VAR 0 7
20926: PUSH
20927: LD_INT 1
20929: ARRAY
20930: PPUSH
20931: LD_VAR 0 7
20935: PUSH
20936: LD_INT 2
20938: ARRAY
20939: PPUSH
20940: CALL_OW 488
20944: NOT
20945: IFFALSE 20949
// exit ;
20947: GO 21079
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
20949: LD_ADDR_VAR 0 2
20953: PUSH
20954: LD_INT 92
20956: PUSH
20957: LD_VAR 0 4
20961: PUSH
20962: LD_VAR 0 5
20966: PUSH
20967: LD_INT 4
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 3
20978: PUSH
20979: LD_INT 54
20981: PUSH
20982: EMPTY
20983: LIST
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PPUSH
20993: CALL_OW 69
20997: ST_TO_ADDR
// if not result then
20998: LD_VAR 0 2
21002: NOT
21003: IFFALSE 21007
// exit ;
21005: GO 21079
// for i in result do
21007: LD_ADDR_VAR 0 3
21011: PUSH
21012: LD_VAR 0 2
21016: PUSH
21017: FOR_IN
21018: IFFALSE 21077
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
21020: LD_VAR 0 3
21024: PPUSH
21025: LD_VAR 0 3
21029: PPUSH
21030: CALL_OW 250
21034: PPUSH
21035: LD_VAR 0 6
21039: PPUSH
21040: LD_INT 3
21042: PPUSH
21043: CALL_OW 272
21047: PPUSH
21048: LD_VAR 0 3
21052: PPUSH
21053: CALL_OW 251
21057: PPUSH
21058: LD_VAR 0 6
21062: PPUSH
21063: LD_INT 3
21065: PPUSH
21066: CALL_OW 273
21070: PPUSH
21071: CALL_OW 111
21075: GO 21017
21077: POP
21078: POP
// end ;
21079: LD_VAR 0 2
21083: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
21084: LD_INT 0
21086: PPUSH
21087: PPUSH
21088: PPUSH
21089: PPUSH
21090: PPUSH
21091: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
21092: LD_VAR 0 1
21096: PPUSH
21097: CALL_OW 302
21101: NOT
21102: IFTRUE 21116
21104: PUSH
21105: LD_VAR 0 2
21109: PPUSH
21110: CALL_OW 302
21114: NOT
21115: OR
21116: IFTRUE 21133
21118: PUSH
21119: LD_VAR 0 2
21123: PPUSH
21124: CALL_OW 313
21128: PUSH
21129: LD_INT 6
21131: EQUAL
21132: OR
21133: IFFALSE 21137
// exit ;
21135: GO 21354
// btype := GetBType ( building ) ;
21137: LD_ADDR_VAR 0 8
21141: PUSH
21142: LD_VAR 0 2
21146: PPUSH
21147: CALL_OW 266
21151: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
21152: LD_VAR 0 8
21156: PUSH
21157: LD_INT 0
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: LD_INT 2
21165: PUSH
21166: LD_INT 4
21168: PUSH
21169: LD_INT 5
21171: PUSH
21172: LD_INT 3
21174: PUSH
21175: LD_INT 6
21177: PUSH
21178: LD_INT 7
21180: PUSH
21181: LD_INT 8
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: IN
21195: NOT
21196: IFFALSE 21200
// exit ;
21198: GO 21354
// x := GetX ( building ) ;
21200: LD_ADDR_VAR 0 4
21204: PUSH
21205: LD_VAR 0 2
21209: PPUSH
21210: CALL_OW 250
21214: ST_TO_ADDR
// y := GetY ( building ) ;
21215: LD_ADDR_VAR 0 5
21219: PUSH
21220: LD_VAR 0 2
21224: PPUSH
21225: CALL_OW 251
21229: ST_TO_ADDR
// d := GetDir ( building ) ;
21230: LD_ADDR_VAR 0 6
21234: PUSH
21235: LD_VAR 0 2
21239: PPUSH
21240: CALL_OW 254
21244: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
21245: LD_ADDR_VAR 0 7
21249: PUSH
21250: LD_VAR 0 4
21254: PPUSH
21255: LD_VAR 0 6
21259: PPUSH
21260: LD_INT 3
21262: PPUSH
21263: CALL_OW 272
21267: PUSH
21268: LD_VAR 0 5
21272: PPUSH
21273: LD_VAR 0 6
21277: PPUSH
21278: LD_INT 3
21280: PPUSH
21281: CALL_OW 273
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
21290: LD_VAR 0 7
21294: PUSH
21295: LD_INT 1
21297: ARRAY
21298: PPUSH
21299: LD_VAR 0 7
21303: PUSH
21304: LD_INT 2
21306: ARRAY
21307: PPUSH
21308: CALL_OW 488
21312: NOT
21313: IFFALSE 21317
// exit ;
21315: GO 21354
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
21317: LD_ADDR_VAR 0 3
21321: PUSH
21322: LD_VAR 0 1
21326: PPUSH
21327: LD_VAR 0 7
21331: PUSH
21332: LD_INT 1
21334: ARRAY
21335: PPUSH
21336: LD_VAR 0 7
21340: PUSH
21341: LD_INT 2
21343: ARRAY
21344: PPUSH
21345: CALL_OW 297
21349: PUSH
21350: LD_INT 4
21352: LESS
21353: ST_TO_ADDR
// end ;
21354: LD_VAR 0 3
21358: RET
// export function PlaceExplosives ( building ) ; begin
21359: LD_INT 0
21361: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
21362: LD_ADDR_EXP 29
21366: PUSH
21367: LD_EXP 29
21371: PPUSH
21372: LD_VAR 0 1
21376: PPUSH
21377: CALL 68440 0 2
21381: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
21382: LD_VAR 0 1
21386: PPUSH
21387: CALL_OW 250
21391: PPUSH
21392: LD_VAR 0 1
21396: PPUSH
21397: CALL_OW 251
21401: PPUSH
21402: LD_STRING PlantBomb
21404: PPUSH
21405: CALL_OW 366
// end ;
21409: LD_VAR 0 2
21413: RET
// export function CreateNature ; var i ; begin
21414: LD_INT 0
21416: PPUSH
21417: PPUSH
// PrepareFrog ;
21418: CALL 64843 0 0
// for i := 1 to 3 do
21422: LD_ADDR_VAR 0 2
21426: PUSH
21427: DOUBLE
21428: LD_INT 1
21430: DEC
21431: ST_TO_ADDR
21432: LD_INT 3
21434: PUSH
21435: FOR_TO
21436: IFFALSE 21455
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
21438: CALL_OW 44
21442: PPUSH
21443: LD_INT 24
21445: PPUSH
21446: LD_INT 0
21448: PPUSH
21449: CALL_OW 49
21453: GO 21435
21455: POP
21456: POP
// end ;
21457: LD_VAR 0 1
21461: RET
// export function MarkBuilding ( building , marker ) ; begin
21462: LD_INT 0
21464: PPUSH
// if marker then
21465: LD_VAR 0 2
21469: IFFALSE 21516
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
21471: LD_VAR 0 1
21475: PPUSH
21476: CALL_OW 250
21480: PPUSH
21481: LD_VAR 0 1
21485: PPUSH
21486: CALL_OW 251
21490: PPUSH
21491: LD_INT 2
21493: PPUSH
21494: LD_INT 3
21496: NEG
21497: PPUSH
21498: CALL_OW 330
// SetBName ( building , target ) ;
21502: LD_VAR 0 1
21506: PPUSH
21507: LD_STRING target
21509: PPUSH
21510: CALL_OW 500
// end else
21514: GO 21555
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
21516: LD_VAR 0 1
21520: PPUSH
21521: CALL_OW 250
21525: PPUSH
21526: LD_VAR 0 1
21530: PPUSH
21531: CALL_OW 251
21535: PPUSH
21536: LD_INT 2
21538: PPUSH
21539: CALL_OW 331
// SetBName ( building ,  ) ;
21543: LD_VAR 0 1
21547: PPUSH
21548: LD_STRING 
21550: PPUSH
21551: CALL_OW 500
// end ; end ; end_of_file
21555: LD_VAR 0 3
21559: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
21560: LD_INT 0
21562: PPUSH
// lockerCodeValid := false ;
21563: LD_ADDR_EXP 72
21567: PUSH
21568: LD_INT 0
21570: ST_TO_ADDR
// if not step then
21571: LD_LOC 1
21575: NOT
21576: IFFALSE 21586
// step := 1 ;
21578: LD_ADDR_LOC 1
21582: PUSH
21583: LD_INT 1
21585: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
21586: LD_STRING HEscape
21588: PUSH
21589: LD_LOC 1
21593: STR
21594: PPUSH
21595: CALL_OW 97
21599: PUSH
21600: LD_INT 1
21602: DOUBLE
21603: EQUAL
21604: IFTRUE 21608
21606: GO 21615
21608: POP
// LockerMinigameSearch ; 2 :
21609: CALL 21648 0 0
21613: GO 21631
21615: LD_INT 2
21617: DOUBLE
21618: EQUAL
21619: IFTRUE 21623
21621: GO 21630
21623: POP
// LockerMinigameSetCode ; end ;
21624: CALL 21722 0 0
21628: GO 21631
21630: POP
// if lockerCodeValid then
21631: LD_EXP 72
21635: IFFALSE 21639
// exit ;
21637: GO 21643
// StartLockerMinigame ;
21639: CALL 21560 0 0
// end ;
21643: LD_VAR 0 1
21647: RET
// function LockerMinigameSearch ; begin
21648: LD_INT 0
21650: PPUSH
// if code then
21651: LD_LOC 2
21655: IFFALSE 21671
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
21657: LD_EXP 46
21661: PPUSH
21662: LD_STRING DH-Escape-3-Hint-0
21664: PPUSH
21665: CALL_OW 88
// exit ;
21669: GO 21717
// end ; Randomize ;
21671: CALL_OW 10
// code := rand ( 1 , 5 ) ;
21675: LD_ADDR_LOC 2
21679: PUSH
21680: LD_INT 1
21682: PPUSH
21683: LD_INT 5
21685: PPUSH
21686: CALL_OW 12
21690: ST_TO_ADDR
// step := 2 ;
21691: LD_ADDR_LOC 1
21695: PUSH
21696: LD_INT 2
21698: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
21699: LD_EXP 46
21703: PPUSH
21704: LD_STRING DH-Escape-3-Hint-
21706: PUSH
21707: LD_LOC 2
21711: STR
21712: PPUSH
21713: CALL_OW 88
// end ;
21717: LD_VAR 0 1
21721: RET
// function LockerMinigameSetCode ; begin
21722: LD_INT 0
21724: PPUSH
// if not code then
21725: LD_LOC 2
21729: NOT
21730: IFFALSE 21740
// code := 0 ;
21732: LD_ADDR_LOC 2
21736: PUSH
21737: LD_INT 0
21739: ST_TO_ADDR
// lockerBusy := true ;
21740: LD_ADDR_EXP 73
21744: PUSH
21745: LD_INT 1
21747: ST_TO_ADDR
// InGameOff ;
21748: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
21752: LD_STRING initLockerMinigame("
21754: PUSH
21755: LD_LOC 2
21759: STR
21760: PUSH
21761: LD_STRING ")
21763: STR
21764: PPUSH
21765: CALL_OW 559
// step := 3 ;
21769: LD_ADDR_LOC 1
21773: PUSH
21774: LD_INT 3
21776: ST_TO_ADDR
// repeat wait ( 1 ) ;
21777: LD_INT 1
21779: PPUSH
21780: CALL_OW 67
// until not lockerBusy ;
21784: LD_EXP 73
21788: NOT
21789: IFFALSE 21777
// InGameOn ;
21791: CALL_OW 8
// if not lockerCodeValid then
21795: LD_EXP 72
21799: NOT
21800: IFFALSE 21826
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
21802: LD_EXP 46
21806: PPUSH
21807: LD_STRING DH-Escape-3-Fail-
21809: PUSH
21810: LD_INT 1
21812: PPUSH
21813: LD_INT 2
21815: PPUSH
21816: CALL_OW 12
21820: STR
21821: PPUSH
21822: CALL_OW 88
// end ; end_of_file
21826: LD_VAR 0 1
21830: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
21831: LD_VAR 0 2
21835: PUSH
21836: LD_INT 102
21838: EQUAL
21839: IFFALSE 21861
// begin lockerBusy := false ;
21841: LD_ADDR_EXP 73
21845: PUSH
21846: LD_INT 0
21848: ST_TO_ADDR
// lockerCodeValid := p3 ;
21849: LD_ADDR_EXP 72
21853: PUSH
21854: LD_VAR 0 3
21858: ST_TO_ADDR
// end else
21859: GO 21915
// if p2 = 103 then
21861: LD_VAR 0 2
21865: PUSH
21866: LD_INT 103
21868: EQUAL
21869: IFFALSE 21881
// begin weatherBusy := false ;
21871: LD_ADDR_EXP 37
21875: PUSH
21876: LD_INT 0
21878: ST_TO_ADDR
// end else
21879: GO 21915
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21881: LD_VAR 0 1
21885: PPUSH
21886: LD_VAR 0 2
21890: PPUSH
21891: LD_VAR 0 3
21895: PPUSH
21896: LD_VAR 0 4
21900: PPUSH
21901: LD_VAR 0 5
21905: PPUSH
21906: LD_VAR 0 6
21910: PPUSH
21911: CALL 73973 0 6
// end ;
21915: PPOPN 6
21917: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
21918: LD_STRING killGameMusic();
21920: PPUSH
21921: CALL_OW 559
// PlayOriginalMusic ;
21925: CALL 96532 0 0
// SOS_MapStart ( ) ;
21929: CALL 73853 0 0
// end ; end_of_file
21933: PPOPN 1
21935: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
21936: LD_EXP 17
21940: NOT
21941: IFFALSE 21949
21943: PUSH
21944: LD_EXP 71
21948: AND
21949: IFFALSE 22535
21951: GO 21953
21953: DISABLE
21954: LD_INT 0
21956: PPUSH
21957: PPUSH
21958: PPUSH
21959: PPUSH
21960: PPUSH
// begin enable ;
21961: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
21962: LD_ADDR_VAR 0 3
21966: PUSH
21967: LD_INT 26
21969: PUSH
21970: LD_INT 27
21972: PUSH
21973: LD_INT 28
21975: PUSH
21976: LD_INT 29
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 30
21987: PUSH
21988: LD_INT 31
21990: PUSH
21991: LD_INT 32
21993: PUSH
21994: LD_INT 33
21996: PUSH
21997: LD_INT 34
21999: PUSH
22000: LD_INT 35
22002: PUSH
22003: LD_INT 36
22005: PUSH
22006: LD_INT 37
22008: PUSH
22009: LD_INT 38
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 39
22025: PUSH
22026: LD_INT 40
22028: PUSH
22029: LD_INT 41
22031: PUSH
22032: LD_INT 42
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 43
22043: PUSH
22044: LD_INT 44
22046: PUSH
22047: LD_INT 45
22049: PUSH
22050: LD_INT 46
22052: PUSH
22053: LD_INT 47
22055: PUSH
22056: LD_INT 46
22058: PUSH
22059: LD_INT 45
22061: PUSH
22062: LD_INT 44
22064: PUSH
22065: LD_INT 43
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: ST_TO_ADDR
// for i in ruPatrol do
22085: LD_ADDR_VAR 0 1
22089: PUSH
22090: LD_EXP 71
22094: PUSH
22095: FOR_IN
22096: IFFALSE 22533
// begin if not IsOk ( i ) then
22098: LD_VAR 0 1
22102: PPUSH
22103: CALL_OW 302
22107: NOT
22108: IFFALSE 22112
// continue ;
22110: GO 22095
// if Count ( ruKilledHex ) then
22112: LD_EXP 43
22116: PPUSH
22117: CALL 32464 0 1
22121: IFFALSE 22194
// for j in ruKilledHex do
22123: LD_ADDR_VAR 0 2
22127: PUSH
22128: LD_EXP 43
22132: PUSH
22133: FOR_IN
22134: IFFALSE 22192
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
22136: LD_VAR 0 1
22140: PPUSH
22141: LD_VAR 0 2
22145: PUSH
22146: LD_INT 1
22148: ARRAY
22149: PPUSH
22150: LD_VAR 0 2
22154: PUSH
22155: LD_INT 2
22157: ARRAY
22158: PPUSH
22159: CALL_OW 297
22163: PUSH
22164: LD_INT 6
22166: LESS
22167: IFFALSE 22190
// begin Query ( QBody ) ;
22169: LD_STRING QBody
22171: PPUSH
22172: CALL_OW 97
// isAlarm := true ;
22176: LD_ADDR_EXP 17
22180: PUSH
22181: LD_INT 1
22183: ST_TO_ADDR
// exit ;
22184: POP
22185: POP
22186: POP
22187: POP
22188: GO 22535
// end ;
22190: GO 22133
22192: POP
22193: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
22194: LD_ADDR_VAR 0 5
22198: PUSH
22199: LD_INT 22
22201: PUSH
22202: LD_INT 2
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 21
22211: PUSH
22212: LD_INT 1
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 91
22221: PUSH
22222: LD_VAR 0 1
22226: PUSH
22227: LD_INT 7
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: PPUSH
22240: CALL_OW 69
22244: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
22245: LD_INT 2
22247: PPUSH
22248: LD_VAR 0 1
22252: PPUSH
22253: CALL_OW 292
22257: IFFALSE 22265
22259: PUSH
22260: LD_VAR 0 5
22264: AND
22265: IFFALSE 22419
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
22267: LD_EXP 30
22271: IFFALSE 22293
22273: PUSH
22274: LD_VAR 0 1
22278: PPUSH
22279: LD_EXP 66
22283: PPUSH
22284: CALL_OW 296
22288: PUSH
22289: LD_INT 16
22291: LESS
22292: AND
22293: IFTRUE 22301
22295: PUSH
22296: LD_EXP 38
22300: OR
22301: IFFALSE 22305
// continue ;
22303: GO 22095
// for j in tmp do
22305: LD_ADDR_VAR 0 2
22309: PUSH
22310: LD_VAR 0 5
22314: PUSH
22315: FOR_IN
22316: IFFALSE 22377
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
22318: LD_ADDR_VAR 0 5
22322: PUSH
22323: LD_VAR 0 5
22327: PUSH
22328: LD_INT 22
22330: PUSH
22331: LD_INT 2
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 21
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 91
22350: PUSH
22351: LD_VAR 0 2
22355: PUSH
22356: LD_INT 4
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: LIST
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: LIST
22368: PPUSH
22369: CALL_OW 69
22373: UNION
22374: ST_TO_ADDR
22375: GO 22315
22377: POP
22378: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
22379: LD_VAR 0 1
22383: PPUSH
22384: LD_VAR 0 5
22388: PPUSH
22389: LD_VAR 0 1
22393: PPUSH
22394: CALL_OW 74
22398: PPUSH
22399: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
22403: LD_VAR 0 1
22407: PPUSH
22408: LD_VAR 0 5
22412: PPUSH
22413: CALL 22538 0 2
// continue ;
22417: GO 22095
// end ; if HasTask ( i ) then
22419: LD_VAR 0 1
22423: PPUSH
22424: CALL_OW 314
22428: IFFALSE 22432
// continue ;
22430: GO 22095
// tag := GetTag ( i ) ;
22432: LD_ADDR_VAR 0 4
22436: PUSH
22437: LD_VAR 0 1
22441: PPUSH
22442: CALL_OW 110
22446: ST_TO_ADDR
// if not tag then
22447: LD_VAR 0 4
22451: NOT
22452: IFFALSE 22465
// begin ComHold ( i ) ;
22454: LD_VAR 0 1
22458: PPUSH
22459: CALL_OW 140
// continue ;
22463: GO 22095
// end ; for j := 1 to points [ tag ] do
22465: LD_ADDR_VAR 0 2
22469: PUSH
22470: DOUBLE
22471: LD_INT 1
22473: DEC
22474: ST_TO_ADDR
22475: LD_VAR 0 3
22479: PUSH
22480: LD_VAR 0 4
22484: ARRAY
22485: PUSH
22486: FOR_TO
22487: IFFALSE 22529
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
22489: LD_VAR 0 1
22493: PPUSH
22494: LD_VAR 0 3
22498: PUSH
22499: LD_VAR 0 4
22503: ARRAY
22504: PUSH
22505: LD_VAR 0 2
22509: ARRAY
22510: PPUSH
22511: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
22515: LD_VAR 0 1
22519: PPUSH
22520: LD_INT 70
22522: PPUSH
22523: CALL_OW 202
// end ;
22527: GO 22486
22529: POP
22530: POP
// end ;
22531: GO 22095
22533: POP
22534: POP
// end ;
22535: PPOPN 5
22537: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
22538: LD_INT 0
22540: PPUSH
22541: PPUSH
22542: PPUSH
// if UnitFilter ( units , [ [ f_nation , nation_arabian ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
22543: LD_VAR 0 2
22547: PPUSH
22548: LD_INT 23
22550: PUSH
22551: LD_INT 2
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 2
22560: PUSH
22561: LD_INT 25
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 25
22573: PUSH
22574: LD_INT 11
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 25
22583: PUSH
22584: LD_INT 34
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 25
22593: PUSH
22594: LD_INT 32
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PPUSH
22612: CALL_OW 72
22616: IFFALSE 22729
// begin blockPatrolThread := true ;
22618: LD_ADDR_EXP 38
22622: PUSH
22623: LD_INT 1
22625: ST_TO_ADDR
// DialogueOn ;
22626: CALL_OW 6
// case GetSex ( guard ) of sex_male :
22630: LD_VAR 0 1
22634: PPUSH
22635: CALL_OW 258
22639: PUSH
22640: LD_INT 1
22642: DOUBLE
22643: EQUAL
22644: IFTRUE 22648
22646: GO 22663
22648: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22649: LD_VAR 0 1
22653: PPUSH
22654: LD_STRING DRum-Fail-3
22656: PPUSH
22657: CALL_OW 88
22661: GO 22687
22663: LD_INT 2
22665: DOUBLE
22666: EQUAL
22667: IFTRUE 22671
22669: GO 22686
22671: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
22672: LD_VAR 0 1
22676: PPUSH
22677: LD_STRING DRuf-Fail-3
22679: PPUSH
22680: CALL_OW 88
22684: GO 22687
22686: POP
// DialogueOff ;
22687: CALL_OW 7
// wait ( 0 0$5 ) ;
22691: LD_INT 175
22693: PPUSH
22694: CALL_OW 67
// if IsOk ( guard ) then
22698: LD_VAR 0 1
22702: PPUSH
22703: CALL_OW 302
22707: IFFALSE 22719
// isAlarm := true else
22709: LD_ADDR_EXP 17
22713: PUSH
22714: LD_INT 1
22716: ST_TO_ADDR
22717: GO 22727
// blockPatrolThread := false ;
22719: LD_ADDR_EXP 38
22723: PUSH
22724: LD_INT 0
22726: ST_TO_ADDR
// exit ;
22727: GO 23732
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
22729: LD_VAR 0 2
22733: PPUSH
22734: LD_INT 23
22736: PUSH
22737: LD_INT 3
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PPUSH
22744: CALL_OW 72
22748: IFTRUE 22771
22750: PUSH
22751: LD_VAR 0 2
22755: PPUSH
22756: LD_INT 95
22758: PUSH
22759: LD_INT 61
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PPUSH
22766: CALL_OW 72
22770: OR
22771: IFFALSE 22775
// exit ;
22773: GO 23732
// DialogueOn ;
22775: CALL_OW 6
// blockPatrolThread := true ;
22779: LD_ADDR_EXP 38
22783: PUSH
22784: LD_INT 1
22786: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
22787: LD_VAR 0 1
22791: PPUSH
22792: CALL_OW 87
// if not Heike in units then
22796: LD_EXP 46
22800: PUSH
22801: LD_VAR 0 2
22805: IN
22806: NOT
22807: IFFALSE 23173
// begin case GetSex ( guard ) of sex_male :
22809: LD_VAR 0 1
22813: PPUSH
22814: CALL_OW 258
22818: PUSH
22819: LD_INT 1
22821: DOUBLE
22822: EQUAL
22823: IFTRUE 22827
22825: GO 22842
22827: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
22828: LD_VAR 0 1
22832: PPUSH
22833: LD_STRING DRum-Guard-1
22835: PPUSH
22836: CALL_OW 88
22840: GO 22866
22842: LD_INT 2
22844: DOUBLE
22845: EQUAL
22846: IFTRUE 22850
22848: GO 22865
22850: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
22851: LD_VAR 0 1
22855: PPUSH
22856: LD_STRING DRuf-Guard-1
22858: PPUSH
22859: CALL_OW 88
22863: GO 22866
22865: POP
// case Query ( SurrenderInfoPeople ) of 1 :
22866: LD_STRING SurrenderInfoPeople
22868: PPUSH
22869: CALL_OW 97
22873: PUSH
22874: LD_INT 1
22876: DOUBLE
22877: EQUAL
22878: IFTRUE 22882
22880: GO 22991
22882: POP
// begin Query ( CaughtSquadInfo ) ;
22883: LD_STRING CaughtSquadInfo
22885: PPUSH
22886: CALL_OW 97
// for i in units do
22890: LD_ADDR_VAR 0 4
22894: PUSH
22895: LD_VAR 0 2
22899: PUSH
22900: FOR_IN
22901: IFFALSE 22958
// begin if Carry ( i ) then
22903: LD_VAR 0 4
22907: PPUSH
22908: CALL_OW 281
22912: IFFALSE 22929
// SetCargo ( i , mat_cans , 0 ) ;
22914: LD_VAR 0 4
22918: PPUSH
22919: LD_INT 1
22921: PPUSH
22922: LD_INT 0
22924: PPUSH
22925: CALL_OW 290
// SetSide ( i , 5 ) ;
22929: LD_VAR 0 4
22933: PPUSH
22934: LD_INT 5
22936: PPUSH
22937: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
22941: LD_VAR 0 4
22945: PPUSH
22946: LD_INT 113
22948: PPUSH
22949: LD_INT 17
22951: PPUSH
22952: CALL_OW 111
// end ;
22956: GO 22900
22958: POP
22959: POP
// ComMoveXY ( guard , 117 , 25 ) ;
22960: LD_VAR 0 1
22964: PPUSH
22965: LD_INT 117
22967: PPUSH
22968: LD_INT 25
22970: PPUSH
22971: CALL_OW 111
// DialogueOff ;
22975: CALL_OW 7
// blockPatrolThread := false ;
22979: LD_ADDR_EXP 38
22983: PUSH
22984: LD_INT 0
22986: ST_TO_ADDR
// exit ;
22987: GO 23732
// end ; 2 :
22989: GO 23173
22991: LD_INT 2
22993: DOUBLE
22994: EQUAL
22995: IFTRUE 22999
22997: GO 23172
22999: POP
// begin DialogueOff ;
23000: CALL_OW 7
// wait ( 0 0$2 ) ;
23004: LD_INT 70
23006: PPUSH
23007: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23011: LD_INT 6
23013: PPUSH
23014: LD_INT 2
23016: PPUSH
23017: LD_INT 2
23019: PPUSH
23020: LD_INT 1
23022: PPUSH
23023: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
23027: LD_VAR 0 1
23031: PPUSH
23032: LD_VAR 0 2
23036: PUSH
23037: LD_INT 1
23039: ARRAY
23040: PPUSH
23041: CALL_OW 115
// case GetSex ( guard ) of sex_male :
23045: LD_VAR 0 1
23049: PPUSH
23050: CALL_OW 258
23054: PUSH
23055: LD_INT 1
23057: DOUBLE
23058: EQUAL
23059: IFTRUE 23063
23061: GO 23078
23063: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
23064: LD_VAR 0 1
23068: PPUSH
23069: LD_STRING DRum-Fail-3
23071: PPUSH
23072: CALL_OW 88
23076: GO 23102
23078: LD_INT 2
23080: DOUBLE
23081: EQUAL
23082: IFTRUE 23086
23084: GO 23101
23086: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
23087: LD_VAR 0 1
23091: PPUSH
23092: LD_STRING DRum-Fail-3
23094: PPUSH
23095: CALL_OW 88
23099: GO 23102
23101: POP
// wait ( 0 0$5 ) ;
23102: LD_INT 175
23104: PPUSH
23105: CALL_OW 67
// if IsOk ( guard ) then
23109: LD_VAR 0 1
23113: PPUSH
23114: CALL_OW 302
23118: IFFALSE 23130
// isAlarm := true else
23120: LD_ADDR_EXP 17
23124: PUSH
23125: LD_INT 1
23127: ST_TO_ADDR
23128: GO 23162
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
23130: LD_INT 6
23132: PPUSH
23133: LD_INT 2
23135: PPUSH
23136: LD_INT 0
23138: PPUSH
23139: LD_INT 1
23141: PPUSH
23142: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
23146: LD_INT 3
23148: PPUSH
23149: LD_INT 2
23151: PPUSH
23152: LD_INT 0
23154: PPUSH
23155: LD_INT 1
23157: PPUSH
23158: CALL_OW 80
// end ; blockPatrolThread := false ;
23162: LD_ADDR_EXP 38
23166: PUSH
23167: LD_INT 0
23169: ST_TO_ADDR
// end ; end ;
23170: GO 23173
23172: POP
// end ; if Carry ( Heike ) then
23173: LD_EXP 46
23177: PPUSH
23178: CALL_OW 281
23182: IFFALSE 23258
// begin case GetSex ( guard ) of sex_male :
23184: LD_VAR 0 1
23188: PPUSH
23189: CALL_OW 258
23193: PUSH
23194: LD_INT 1
23196: DOUBLE
23197: EQUAL
23198: IFTRUE 23202
23200: GO 23217
23202: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
23203: LD_VAR 0 1
23207: PPUSH
23208: LD_STRING DRum-FoodFail-1
23210: PPUSH
23211: CALL_OW 88
23215: GO 23241
23217: LD_INT 2
23219: DOUBLE
23220: EQUAL
23221: IFTRUE 23225
23223: GO 23240
23225: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
23226: LD_VAR 0 1
23230: PPUSH
23231: LD_STRING DRuf-FoodFail-2
23233: PPUSH
23234: CALL_OW 88
23238: GO 23241
23240: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
23241: LD_EXP 46
23245: PPUSH
23246: LD_INT 1
23248: PPUSH
23249: LD_INT 0
23251: PPUSH
23252: CALL_OW 290
// end else
23256: GO 23315
// begin case GetSex ( guard ) of sex_male :
23258: LD_VAR 0 1
23262: PPUSH
23263: CALL_OW 258
23267: PUSH
23268: LD_INT 1
23270: DOUBLE
23271: EQUAL
23272: IFTRUE 23276
23274: GO 23291
23276: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
23277: LD_VAR 0 1
23281: PPUSH
23282: LD_STRING DRum-Seen-1
23284: PPUSH
23285: CALL_OW 88
23289: GO 23315
23291: LD_INT 2
23293: DOUBLE
23294: EQUAL
23295: IFTRUE 23299
23297: GO 23314
23299: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
23300: LD_VAR 0 1
23304: PPUSH
23305: LD_STRING DRuf-Seen-1
23307: PPUSH
23308: CALL_OW 88
23312: GO 23315
23314: POP
// end ; alone := ( units = 1 ) ;
23315: LD_ADDR_VAR 0 5
23319: PUSH
23320: LD_VAR 0 2
23324: PUSH
23325: LD_INT 1
23327: EQUAL
23328: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
23329: LD_STRING SurrenderInfo
23331: PPUSH
23332: CALL_OW 97
23336: PUSH
23337: LD_INT 1
23339: DOUBLE
23340: EQUAL
23341: IFTRUE 23345
23343: GO 23534
23345: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
23346: LD_INT 23
23348: PPUSH
23349: CALL_OW 87
// RemoveUnit ( Heike ) ;
23353: LD_EXP 46
23357: PPUSH
23358: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
23362: LD_EXP 46
23366: PPUSH
23367: LD_INT 23
23369: PPUSH
23370: CALL_OW 52
// if not alone then
23374: LD_VAR 0 5
23378: NOT
23379: IFFALSE 23446
// for i in units diff Heike do
23381: LD_ADDR_VAR 0 4
23385: PUSH
23386: LD_VAR 0 2
23390: PUSH
23391: LD_EXP 46
23395: DIFF
23396: PUSH
23397: FOR_IN
23398: IFFALSE 23444
// begin RemoveUnit ( i ) ;
23400: LD_VAR 0 4
23404: PPUSH
23405: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
23409: LD_VAR 0 4
23413: PPUSH
23414: LD_INT 114
23416: PPUSH
23417: LD_INT 17
23419: PPUSH
23420: LD_INT 10
23422: PPUSH
23423: LD_INT 0
23425: PPUSH
23426: CALL_OW 50
// SetSide ( i , 5 ) ;
23430: LD_VAR 0 4
23434: PPUSH
23435: LD_INT 5
23437: PPUSH
23438: CALL_OW 235
// end ;
23442: GO 23397
23444: POP
23445: POP
// wait ( 0 0$0.3 ) ;
23446: LD_INT 10
23448: PPUSH
23449: CALL_OW 67
// if alone then
23453: LD_VAR 0 5
23457: IFFALSE 23468
// Query ( CaughtInfoAlone ) else
23459: LD_STRING CaughtInfoAlone
23461: PPUSH
23462: CALL_OW 97
23466: GO 23475
// Query ( CaughtInfo ) ;
23468: LD_STRING CaughtInfo
23470: PPUSH
23471: CALL_OW 97
// wait ( 0 0$2 ) ;
23475: LD_INT 70
23477: PPUSH
23478: CALL_OW 67
// StartLockerMinigame ;
23482: CALL 21560 0 0
// Say ( Heike , DH-Reset ) ;
23486: LD_EXP 46
23490: PPUSH
23491: LD_STRING DH-Reset
23493: PPUSH
23494: CALL_OW 88
// DialogueOff ;
23498: CALL_OW 7
// InGameOff ;
23502: CALL_OW 9
// blockPatrolThread := false ;
23506: LD_ADDR_EXP 38
23510: PUSH
23511: LD_INT 0
23513: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
23514: LD_EXP 46
23518: PPUSH
23519: CALL_OW 122
// ComFree ( guard ) ;
23523: LD_VAR 0 1
23527: PPUSH
23528: CALL_OW 139
// end ; 2 :
23532: GO 23724
23534: LD_INT 2
23536: DOUBLE
23537: EQUAL
23538: IFTRUE 23542
23540: GO 23723
23542: POP
// begin Say ( Heike , DH-Guard-2 ) ;
23543: LD_EXP 46
23547: PPUSH
23548: LD_STRING DH-Guard-2
23550: PPUSH
23551: CALL_OW 88
// DialogueOff ;
23555: CALL_OW 7
// wait ( 0 0$2 ) ;
23559: LD_INT 70
23561: PPUSH
23562: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23566: LD_INT 6
23568: PPUSH
23569: LD_INT 2
23571: PPUSH
23572: LD_INT 2
23574: PPUSH
23575: LD_INT 1
23577: PPUSH
23578: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
23582: LD_VAR 0 1
23586: PPUSH
23587: LD_EXP 46
23591: PPUSH
23592: CALL_OW 115
// case GetSex ( guard ) of sex_male :
23596: LD_VAR 0 1
23600: PPUSH
23601: CALL_OW 258
23605: PUSH
23606: LD_INT 1
23608: DOUBLE
23609: EQUAL
23610: IFTRUE 23614
23612: GO 23629
23614: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
23615: LD_VAR 0 1
23619: PPUSH
23620: LD_STRING DRum-Fail-3
23622: PPUSH
23623: CALL_OW 88
23627: GO 23653
23629: LD_INT 2
23631: DOUBLE
23632: EQUAL
23633: IFTRUE 23637
23635: GO 23652
23637: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
23638: LD_VAR 0 1
23642: PPUSH
23643: LD_STRING DRum-Fail-3
23645: PPUSH
23646: CALL_OW 88
23650: GO 23653
23652: POP
// wait ( 0 0$5 ) ;
23653: LD_INT 175
23655: PPUSH
23656: CALL_OW 67
// if IsOk ( guard ) then
23660: LD_VAR 0 1
23664: PPUSH
23665: CALL_OW 302
23669: IFFALSE 23681
// isAlarm := true else
23671: LD_ADDR_EXP 17
23675: PUSH
23676: LD_INT 1
23678: ST_TO_ADDR
23679: GO 23713
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
23681: LD_INT 6
23683: PPUSH
23684: LD_INT 2
23686: PPUSH
23687: LD_INT 0
23689: PPUSH
23690: LD_INT 1
23692: PPUSH
23693: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
23697: LD_INT 3
23699: PPUSH
23700: LD_INT 2
23702: PPUSH
23703: LD_INT 0
23705: PPUSH
23706: LD_INT 1
23708: PPUSH
23709: CALL_OW 80
// end ; blockPatrolThread := false ;
23713: LD_ADDR_EXP 38
23717: PUSH
23718: LD_INT 0
23720: ST_TO_ADDR
// end ; end ;
23721: GO 23724
23723: POP
// blockPatrolThread := false ;
23724: LD_ADDR_EXP 38
23728: PUSH
23729: LD_INT 0
23731: ST_TO_ADDR
// end ;
23732: LD_VAR 0 3
23736: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
23737: LD_EXP 14
23741: PPUSH
23742: LD_INT 22
23744: PUSH
23745: LD_INT 5
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 3
23754: PUSH
23755: LD_INT 101
23757: PUSH
23758: LD_INT 6
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 92
23771: PUSH
23772: LD_INT 113
23774: PUSH
23775: LD_INT 16
23777: PUSH
23778: LD_INT 12
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 91
23789: PUSH
23790: LD_EXP 46
23794: PUSH
23795: LD_INT 6
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: PPUSH
23809: CALL_OW 72
23813: IFFALSE 23822
23815: PUSH
23816: LD_EXP 30
23820: NOT
23821: AND
23822: IFFALSE 23927
23824: GO 23826
23826: DISABLE
23827: LD_INT 0
23829: PPUSH
// begin enable ;
23830: ENABLE
// DialogueOn ;
23831: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
23835: LD_EXP 46
23839: PPUSH
23840: LD_STRING DH-Join-
23842: PUSH
23843: LD_INT 1
23845: PPUSH
23846: LD_INT 3
23848: PPUSH
23849: CALL_OW 12
23853: STR
23854: PPUSH
23855: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
23859: LD_ADDR_VAR 0 1
23863: PUSH
23864: LD_EXP 14
23868: PPUSH
23869: LD_INT 22
23871: PUSH
23872: LD_INT 5
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 91
23881: PUSH
23882: LD_EXP 46
23886: PUSH
23887: LD_INT 10
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: LIST
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PPUSH
23899: CALL_OW 72
23903: PUSH
23904: FOR_IN
23905: IFFALSE 23921
// SetSide ( i , 2 ) ;
23907: LD_VAR 0 1
23911: PPUSH
23912: LD_INT 2
23914: PPUSH
23915: CALL_OW 235
23919: GO 23904
23921: POP
23922: POP
// DialogueOff ;
23923: CALL_OW 7
// end ; end_of_file
23927: PPOPN 1
23929: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
23930: LD_EXP 17
23934: IFFALSE 23942
23936: PUSH
23937: LD_EXP 5
23941: AND
23942: IFFALSE 24243
23944: GO 23946
23946: DISABLE
23947: LD_INT 0
23949: PPUSH
23950: PPUSH
23951: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
23952: LD_INT 1
23954: NEG
23955: PPUSH
23956: LD_INT 1
23958: NEG
23959: PPUSH
23960: LD_STRING alarm
23962: PPUSH
23963: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
23967: LD_INT 3
23969: PPUSH
23970: LD_INT 2
23972: PPUSH
23973: LD_INT 2
23975: PPUSH
23976: LD_INT 1
23978: PPUSH
23979: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23983: LD_INT 6
23985: PPUSH
23986: LD_INT 2
23988: PPUSH
23989: LD_INT 2
23991: PPUSH
23992: LD_INT 1
23994: PPUSH
23995: CALL_OW 80
// DialogueOn ;
23999: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
24003: LD_EXP 46
24007: PPUSH
24008: LD_STRING DH-Alarm-1
24010: PPUSH
24011: CALL_OW 88
// DialogueOff ;
24015: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
24019: LD_ADDR_VAR 0 2
24023: PUSH
24024: LD_INT 107
24026: PUSH
24027: LD_INT 39
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 143
24036: PUSH
24037: LD_INT 33
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 180
24046: PUSH
24047: LD_INT 115
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 96
24056: PUSH
24057: LD_INT 90
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 59
24066: PUSH
24067: LD_INT 52
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 16
24076: PUSH
24077: LD_INT 15
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 90
24086: PUSH
24087: LD_INT 120
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
24103: LD_ADDR_VAR 0 3
24107: PUSH
24108: LD_INT 22
24110: PUSH
24111: LD_INT 6
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 25
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PPUSH
24132: CALL_OW 69
24136: ST_TO_ADDR
// for i in tmp do
24137: LD_ADDR_VAR 0 1
24141: PUSH
24142: LD_VAR 0 3
24146: PUSH
24147: FOR_IN
24148: IFFALSE 24216
// begin ComExit ( i ) ;
24150: LD_VAR 0 1
24154: PPUSH
24155: CALL 68838 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
24159: LD_VAR 0 1
24163: PPUSH
24164: LD_VAR 0 2
24168: PUSH
24169: LD_VAR 0 1
24173: PUSH
24174: LD_INT 7
24176: MOD
24177: PUSH
24178: LD_INT 1
24180: PLUS
24181: ARRAY
24182: PUSH
24183: LD_INT 1
24185: ARRAY
24186: PPUSH
24187: LD_VAR 0 2
24191: PUSH
24192: LD_VAR 0 1
24196: PUSH
24197: LD_INT 7
24199: MOD
24200: PUSH
24201: LD_INT 1
24203: PLUS
24204: ARRAY
24205: PUSH
24206: LD_INT 2
24208: ARRAY
24209: PPUSH
24210: CALL_OW 174
// end ;
24214: GO 24147
24216: POP
24217: POP
// Explode ;
24218: CALL 24246 0 0
// wait ( 0 0$45 ) ;
24222: LD_INT 1575
24224: PPUSH
24225: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
24229: LD_VAR 0 3
24233: PPUSH
24234: LD_EXP 46
24238: PPUSH
24239: CALL_OW 175
// end ;
24243: PPOPN 3
24245: END
// export function Explode ; var i , x , y , j ; begin
24246: LD_INT 0
24248: PPUSH
24249: PPUSH
24250: PPUSH
24251: PPUSH
24252: PPUSH
// if hasExplosionsInFactory then
24253: LD_EXP 7
24257: IFFALSE 24277
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
24259: LD_ADDR_EXP 29
24263: PUSH
24264: LD_EXP 29
24268: PPUSH
24269: LD_INT 61
24271: PPUSH
24272: CALL 68440 0 2
24276: ST_TO_ADDR
// if explosivePlantedList then
24277: LD_EXP 29
24281: IFFALSE 24429
// begin for i in explosivePlantedList do
24283: LD_ADDR_VAR 0 2
24287: PUSH
24288: LD_EXP 29
24292: PUSH
24293: FOR_IN
24294: IFFALSE 24397
// begin x := GetX ( i ) ;
24296: LD_ADDR_VAR 0 3
24300: PUSH
24301: LD_VAR 0 2
24305: PPUSH
24306: CALL_OW 250
24310: ST_TO_ADDR
// y := GetY ( i ) ;
24311: LD_ADDR_VAR 0 4
24315: PUSH
24316: LD_VAR 0 2
24320: PPUSH
24321: CALL_OW 251
24325: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
24326: LD_ADDR_VAR 0 5
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: LD_INT 3
24336: PUSH
24337: LD_INT 5
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: PUSH
24345: FOR_IN
24346: IFFALSE 24393
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
24348: LD_VAR 0 3
24352: PPUSH
24353: LD_VAR 0 5
24357: PPUSH
24358: LD_INT 2
24360: PPUSH
24361: CALL_OW 272
24365: PPUSH
24366: LD_VAR 0 4
24370: PPUSH
24371: LD_VAR 0 5
24375: PPUSH
24376: LD_INT 2
24378: PPUSH
24379: CALL_OW 273
24383: PPUSH
24384: LD_INT 1
24386: PPUSH
24387: CALL_OW 453
24391: GO 24345
24393: POP
24394: POP
// end ;
24395: GO 24293
24397: POP
24398: POP
// Say ( Heike , DH-End-2 ) ;
24399: LD_EXP 46
24403: PPUSH
24404: LD_STRING DH-End-2
24406: PPUSH
24407: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
24411: LD_INT 175
24413: PUSH
24414: LD_EXP 29
24418: PPUSH
24419: CALL 32464 0 1
24423: MUL
24424: PPUSH
24425: CALL_OW 67
// end ; if not isAlarm then
24429: LD_EXP 17
24433: NOT
24434: IFFALSE 24444
// isAlarm := true ;
24436: LD_ADDR_EXP 17
24440: PUSH
24441: LD_INT 1
24443: ST_TO_ADDR
// end ;
24444: LD_VAR 0 1
24448: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
24449: LD_INT 22
24451: PUSH
24452: LD_INT 2
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 21
24461: PUSH
24462: LD_INT 2
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: LD_INT 101
24474: PUSH
24475: LD_INT 3
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 101
24484: PUSH
24485: LD_INT 6
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: LIST
24501: PPUSH
24502: CALL_OW 69
24506: IFFALSE 24519
24508: GO 24510
24510: DISABLE
// isAlarm := true ; end_of_file
24511: LD_ADDR_EXP 17
24515: PUSH
24516: LD_INT 1
24518: ST_TO_ADDR
24519: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
24520: LD_EXP 14
24524: PPUSH
24525: LD_INT 22
24527: PUSH
24528: LD_INT 2
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PPUSH
24535: CALL_OW 72
24539: PUSH
24540: LD_INT 3
24542: GREATER
24543: IFFALSE 24552
24545: PUSH
24546: LD_EXP 17
24550: NOT
24551: AND
24552: IFFALSE 28625
24554: GO 24556
24556: DISABLE
24557: LD_INT 0
24559: PPUSH
24560: PPUSH
24561: PPUSH
24562: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
24563: LD_EXP 66
24567: PPUSH
24568: LD_INT 155
24570: PPUSH
24571: LD_INT 68
24573: PPUSH
24574: LD_INT 0
24576: PPUSH
24577: CALL_OW 48
// wait ( 0 0$1 ) ;
24581: LD_INT 35
24583: PPUSH
24584: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24588: LD_INT 35
24590: PPUSH
24591: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24595: LD_EXP 66
24599: PPUSH
24600: CALL_OW 314
24604: NOT
24605: IFFALSE 24621
// ComMoveUnit ( ruDisturb , Heike ) ;
24607: LD_EXP 66
24611: PPUSH
24612: LD_EXP 46
24616: PPUSH
24617: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24621: LD_EXP 46
24625: PPUSH
24626: LD_EXP 66
24630: PPUSH
24631: CALL_OW 296
24635: PUSH
24636: LD_INT 6
24638: LESS
24639: IFFALSE 24652
24641: PUSH
24642: LD_EXP 66
24646: PPUSH
24647: CALL_OW 302
24651: AND
24652: IFFALSE 24588
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24654: LD_EXP 46
24658: PPUSH
24659: CALL_OW 257
24663: PUSH
24664: LD_INT 33
24666: NONEQUAL
24667: IFTRUE 24761
24669: PUSH
24670: LD_EXP 14
24674: PPUSH
24675: LD_INT 22
24677: PUSH
24678: LD_INT 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 91
24687: PUSH
24688: LD_EXP 66
24692: PUSH
24693: LD_INT 8
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: LD_INT 25
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 25
24716: PUSH
24717: LD_INT 11
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 25
24726: PUSH
24727: LD_INT 32
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 25
24736: PUSH
24737: LD_INT 34
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: LIST
24755: PPUSH
24756: CALL_OW 72
24760: OR
24761: IFFALSE 24771
// isAlarm := true ;
24763: LD_ADDR_EXP 17
24767: PUSH
24768: LD_INT 1
24770: ST_TO_ADDR
// if isAlarm then
24771: LD_EXP 17
24775: IFFALSE 24779
// exit ;
24777: GO 28625
// DialogueOn ;
24779: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24783: LD_EXP 66
24787: PPUSH
24788: LD_STRING DMcn-Interrupt-1
24790: PPUSH
24791: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24795: LD_EXP 66
24799: PPUSH
24800: LD_STRING DMcn-Interrupt-2
24802: PPUSH
24803: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
24807: LD_EXP 66
24811: PPUSH
24812: LD_STRING DMcn-Interrupt-3
24814: PPUSH
24815: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
24819: LD_EXP 46
24823: PPUSH
24824: LD_STRING DH-Interrupt-a-4
24826: PPUSH
24827: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
24831: LD_EXP 66
24835: PPUSH
24836: LD_STRING DMcn-Interrupt-a-5
24838: PPUSH
24839: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
24843: LD_EXP 46
24847: PPUSH
24848: LD_STRING DH-Interrupt-a-6
24850: PPUSH
24851: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
24855: LD_EXP 66
24859: PPUSH
24860: LD_STRING DMcn-Interrupt-a-7
24862: PPUSH
24863: CALL_OW 88
// DialogueOff ;
24867: CALL_OW 7
// hasMuchin := true ;
24871: LD_ADDR_EXP 30
24875: PUSH
24876: LD_INT 1
24878: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24879: LD_STRING MuchinInfo
24881: PPUSH
24882: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
24886: LD_STRING M2a
24888: PPUSH
24889: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
24893: LD_INT 105
24895: PPUSH
24896: LD_INT 55
24898: PPUSH
24899: CALL_OW 428
24903: PPUSH
24904: LD_INT 2
24906: PPUSH
24907: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
24911: LD_INT 115
24913: PPUSH
24914: LD_INT 65
24916: PPUSH
24917: CALL_OW 428
24921: PPUSH
24922: LD_INT 2
24924: PPUSH
24925: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
24929: LD_INT 109
24931: PPUSH
24932: LD_INT 59
24934: PPUSH
24935: LD_INT 2
24937: PPUSH
24938: LD_INT 10
24940: NEG
24941: PPUSH
24942: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
24946: LD_INT 109
24948: PPUSH
24949: LD_INT 59
24951: PPUSH
24952: CALL_OW 84
// wait ( 0 0$2 ) ;
24956: LD_INT 70
24958: PPUSH
24959: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
24963: LD_INT 109
24965: PPUSH
24966: LD_INT 59
24968: PPUSH
24969: LD_INT 2
24971: PPUSH
24972: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
24976: LD_INT 35
24978: PPUSH
24979: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24983: LD_EXP 66
24987: PPUSH
24988: LD_EXP 46
24992: PPUSH
24993: CALL_OW 296
24997: PUSH
24998: LD_INT 6
25000: GREATER
25001: IFFALSE 25017
// ComMoveUnit ( ruDisturb , Heike ) ;
25003: LD_EXP 66
25007: PPUSH
25008: LD_EXP 46
25012: PPUSH
25013: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25017: LD_EXP 46
25021: PPUSH
25022: CALL_OW 257
25026: PUSH
25027: LD_INT 33
25029: NONEQUAL
25030: IFTRUE 25124
25032: PUSH
25033: LD_EXP 14
25037: PPUSH
25038: LD_INT 22
25040: PUSH
25041: LD_INT 2
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 91
25050: PUSH
25051: LD_EXP 66
25055: PUSH
25056: LD_INT 8
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 2
25066: PUSH
25067: LD_INT 25
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 25
25079: PUSH
25080: LD_INT 11
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 25
25089: PUSH
25090: LD_INT 32
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 25
25099: PUSH
25100: LD_INT 34
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: PPUSH
25119: CALL_OW 72
25123: OR
25124: IFFALSE 25136
// begin isAlarm := true ;
25126: LD_ADDR_EXP 17
25130: PUSH
25131: LD_INT 1
25133: ST_TO_ADDR
// exit ;
25134: GO 28625
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
25136: LD_INT 105
25138: PPUSH
25139: LD_INT 55
25141: PPUSH
25142: CALL_OW 428
25146: NOT
25147: IFTRUE 25162
25149: PUSH
25150: LD_INT 115
25152: PPUSH
25153: LD_INT 65
25155: PPUSH
25156: CALL_OW 428
25160: NOT
25161: OR
25162: IFFALSE 25174
// begin isAlarm := true ;
25164: LD_ADDR_EXP 17
25168: PUSH
25169: LD_INT 1
25171: ST_TO_ADDR
// exit ;
25172: GO 28625
// end ; until not BuildingsInProgress ( 2 ) ;
25174: LD_INT 2
25176: PPUSH
25177: CALL_OW 345
25181: NOT
25182: IFFALSE 24976
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
25184: LD_INT 105
25186: PPUSH
25187: LD_INT 55
25189: PPUSH
25190: CALL_OW 428
25194: PPUSH
25195: LD_INT 3
25197: PPUSH
25198: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
25202: LD_INT 115
25204: PPUSH
25205: LD_INT 65
25207: PPUSH
25208: CALL_OW 428
25212: PPUSH
25213: LD_INT 3
25215: PPUSH
25216: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
25220: LD_STRING M2a-out
25222: PPUSH
25223: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
25227: LD_EXP 66
25231: PPUSH
25232: LD_INT 2
25234: PPUSH
25235: CALL_OW 120
// wait ( 0 0$3 ) ;
25239: LD_INT 105
25241: PPUSH
25242: CALL_OW 67
// hasMuchin := false ;
25246: LD_ADDR_EXP 30
25250: PUSH
25251: LD_INT 0
25253: ST_TO_ADDR
// wait ( 2 2$00 ) ;
25254: LD_INT 4200
25256: PPUSH
25257: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25261: LD_INT 35
25263: PPUSH
25264: CALL_OW 67
// if not HasTask ( ruDisturb ) then
25268: LD_EXP 66
25272: PPUSH
25273: CALL_OW 314
25277: NOT
25278: IFFALSE 25294
// ComMoveUnit ( ruDisturb , Heike ) ;
25280: LD_EXP 66
25284: PPUSH
25285: LD_EXP 46
25289: PPUSH
25290: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
25294: LD_EXP 46
25298: PPUSH
25299: LD_EXP 66
25303: PPUSH
25304: CALL_OW 296
25308: PUSH
25309: LD_INT 6
25311: LESS
25312: IFFALSE 25325
25314: PUSH
25315: LD_EXP 66
25319: PPUSH
25320: CALL_OW 302
25324: AND
25325: IFFALSE 25261
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25327: LD_EXP 46
25331: PPUSH
25332: CALL_OW 257
25336: PUSH
25337: LD_INT 33
25339: NONEQUAL
25340: IFTRUE 25434
25342: PUSH
25343: LD_EXP 14
25347: PPUSH
25348: LD_INT 22
25350: PUSH
25351: LD_INT 2
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 91
25360: PUSH
25361: LD_EXP 66
25365: PUSH
25366: LD_INT 8
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 2
25376: PUSH
25377: LD_INT 25
25379: PUSH
25380: LD_INT 1
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 25
25389: PUSH
25390: LD_INT 11
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 25
25399: PUSH
25400: LD_INT 32
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 25
25409: PUSH
25410: LD_INT 34
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: LIST
25428: PPUSH
25429: CALL_OW 72
25433: OR
25434: IFFALSE 25444
// isAlarm := true ;
25436: LD_ADDR_EXP 17
25440: PUSH
25441: LD_INT 1
25443: ST_TO_ADDR
// if isAlarm then
25444: LD_EXP 17
25448: IFFALSE 25452
// exit ;
25450: GO 28625
// DialogueOn ;
25452: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
25456: LD_EXP 66
25460: PPUSH
25461: LD_STRING DMcn-Interrupt-1
25463: PPUSH
25464: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
25468: LD_EXP 66
25472: PPUSH
25473: LD_STRING DMcn-Interrupt-2
25475: PPUSH
25476: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
25480: LD_INT 176
25482: PPUSH
25483: LD_INT 54
25485: PPUSH
25486: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
25490: LD_INT 176
25492: PPUSH
25493: LD_INT 54
25495: PPUSH
25496: LD_INT 2
25498: PPUSH
25499: LD_INT 6
25501: NEG
25502: PPUSH
25503: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
25507: LD_INT 10
25509: PPUSH
25510: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
25514: LD_EXP 66
25518: PPUSH
25519: LD_STRING DMcn-Interrupt-b-3
25521: PPUSH
25522: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
25526: LD_EXP 46
25530: PPUSH
25531: LD_STRING DH-Interrupt-b-4
25533: PPUSH
25534: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
25538: LD_EXP 66
25542: PPUSH
25543: LD_STRING DMcn-Interrupt-b-5
25545: PPUSH
25546: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
25550: LD_EXP 46
25554: PPUSH
25555: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
25559: LD_INT 176
25561: PPUSH
25562: LD_INT 54
25564: PPUSH
25565: LD_INT 2
25567: PPUSH
25568: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
25572: LD_EXP 66
25576: PPUSH
25577: LD_STRING DMcn-Interrupt-b-6
25579: PPUSH
25580: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
25584: LD_EXP 46
25588: PPUSH
25589: LD_STRING DH-Interrupt-b-7
25591: PPUSH
25592: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
25596: LD_EXP 66
25600: PPUSH
25601: LD_STRING DMcn-Interrupt-b-8
25603: PPUSH
25604: CALL_OW 88
// DialogueOff ;
25608: CALL_OW 7
// Query ( MuchinInfo ) ;
25612: LD_STRING MuchinInfo
25614: PPUSH
25615: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
25619: LD_STRING M2b
25621: PPUSH
25622: CALL_OW 337
// hasMuchin := true ;
25626: LD_ADDR_EXP 30
25630: PUSH
25631: LD_INT 1
25633: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25634: LD_INT 35
25636: PPUSH
25637: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
25641: LD_EXP 66
25645: PPUSH
25646: LD_EXP 46
25650: PPUSH
25651: CALL_OW 296
25655: PUSH
25656: LD_INT 6
25658: GREATER
25659: IFFALSE 25675
// ComMoveUnit ( ruDisturb , Heike ) ;
25661: LD_EXP 66
25665: PPUSH
25666: LD_EXP 46
25670: PPUSH
25671: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25675: LD_EXP 46
25679: PPUSH
25680: CALL_OW 257
25684: PUSH
25685: LD_INT 33
25687: NONEQUAL
25688: IFTRUE 25782
25690: PUSH
25691: LD_EXP 14
25695: PPUSH
25696: LD_INT 22
25698: PUSH
25699: LD_INT 2
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 91
25708: PUSH
25709: LD_EXP 66
25713: PUSH
25714: LD_INT 8
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 25
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 25
25737: PUSH
25738: LD_INT 11
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 25
25747: PUSH
25748: LD_INT 32
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 25
25757: PUSH
25758: LD_INT 34
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: LIST
25776: PPUSH
25777: CALL_OW 72
25781: OR
25782: IFFALSE 25794
// begin isAlarm := true ;
25784: LD_ADDR_EXP 17
25788: PUSH
25789: LD_INT 1
25791: ST_TO_ADDR
// exit ;
25792: GO 28625
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
25794: LD_EXP 46
25798: PPUSH
25799: LD_INT 61
25801: PPUSH
25802: CALL_OW 296
25806: PUSH
25807: LD_INT 4
25809: LESS
25810: IFFALSE 25634
// InGameOn ;
25812: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
25816: LD_INT 173
25818: PPUSH
25819: LD_INT 54
25821: PPUSH
25822: LD_INT 2
25824: PPUSH
25825: LD_INT 8
25827: NEG
25828: PPUSH
25829: CALL_OW 330
// SetSide ( Heike , 3 ) ;
25833: LD_EXP 46
25837: PPUSH
25838: LD_INT 3
25840: PPUSH
25841: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
25845: LD_EXP 46
25849: PPUSH
25850: LD_INT 61
25852: PPUSH
25853: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
25857: LD_EXP 66
25861: PPUSH
25862: LD_INT 61
25864: PPUSH
25865: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
25869: LD_EXP 53
25873: PUSH
25874: LD_EXP 14
25878: IN
25879: IFFALSE 25899
25881: PUSH
25882: LD_EXP 53
25886: PPUSH
25887: LD_INT 61
25889: PPUSH
25890: CALL_OW 296
25894: PUSH
25895: LD_INT 12
25897: LESS
25898: AND
25899: IFFALSE 25943
// begin SetSide ( Markov , 3 ) ;
25901: LD_EXP 53
25905: PPUSH
25906: LD_INT 3
25908: PPUSH
25909: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
25913: LD_EXP 53
25917: PPUSH
25918: LD_INT 61
25920: PPUSH
25921: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
25925: LD_INT 35
25927: PPUSH
25928: CALL_OW 67
// until IsInUnit ( Markov ) ;
25932: LD_EXP 53
25936: PPUSH
25937: CALL_OW 310
25941: IFFALSE 25925
// end ; repeat wait ( 0 0$1 ) ;
25943: LD_INT 35
25945: PPUSH
25946: CALL_OW 67
// until IsInUnit ( Heike ) ;
25950: LD_EXP 46
25954: PPUSH
25955: CALL_OW 310
25959: IFFALSE 25943
// SetClass ( Heike , class_mechanic ) ;
25961: LD_EXP 46
25965: PPUSH
25966: LD_INT 3
25968: PPUSH
25969: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
25973: LD_INT 61
25975: PPUSH
25976: LD_INT 21
25978: PPUSH
25979: LD_INT 3
25981: PPUSH
25982: LD_INT 3
25984: PPUSH
25985: LD_INT 43
25987: PPUSH
25988: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
25992: LD_EXP 31
25996: IFFALSE 26027
25998: PUSH
25999: LD_EXP 53
26003: PUSH
26004: LD_EXP 14
26008: IN
26009: IFTRUE 26026
26011: PUSH
26012: LD_EXP 53
26016: PPUSH
26017: CALL_OW 310
26021: PUSH
26022: LD_INT 61
26024: EQUAL
26025: OR
26026: AND
26027: IFFALSE 26517
// begin wait ( 0 0$5 ) ;
26029: LD_INT 175
26031: PPUSH
26032: CALL_OW 67
// SetSide ( Heike , 2 ) ;
26036: LD_EXP 46
26040: PPUSH
26041: LD_INT 2
26043: PPUSH
26044: CALL_OW 235
// SetSide ( Markov , 2 ) ;
26048: LD_EXP 53
26052: PPUSH
26053: LD_INT 2
26055: PPUSH
26056: CALL_OW 235
// if not Markov in heikeSquad then
26060: LD_EXP 53
26064: PUSH
26065: LD_EXP 14
26069: IN
26070: NOT
26071: IFFALSE 26093
// heikeSquad := Join ( heikeSquad , Markov ) ;
26073: LD_ADDR_EXP 14
26077: PUSH
26078: LD_EXP 14
26082: PPUSH
26083: LD_EXP 53
26087: PPUSH
26088: CALL 68440 0 2
26092: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
26093: LD_EXP 53
26097: PPUSH
26098: LD_STRING DMar-Factory-1
26100: PPUSH
26101: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
26105: LD_INT 61
26107: PPUSH
26108: LD_INT 99
26110: PPUSH
26111: CALL_OW 329
// game_speed := 4 ;
26115: LD_ADDR_OWVAR 65
26119: PUSH
26120: LD_INT 4
26122: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
26123: LD_EXP 66
26127: PPUSH
26128: CALL_OW 122
// ComExitBuilding ( Markov ) ;
26132: LD_EXP 53
26136: PPUSH
26137: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
26141: LD_EXP 66
26145: PPUSH
26146: LD_INT 171
26148: PPUSH
26149: LD_INT 51
26151: PPUSH
26152: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
26156: LD_EXP 53
26160: PPUSH
26161: LD_INT 167
26163: PPUSH
26164: LD_INT 50
26166: PPUSH
26167: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
26171: LD_EXP 53
26175: PPUSH
26176: LD_EXP 66
26180: PPUSH
26181: CALL_OW 179
// wait ( 0 0$5 ) ;
26185: LD_INT 175
26187: PPUSH
26188: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
26192: LD_EXP 53
26196: PPUSH
26197: LD_STRING DMar-Factory-2
26199: PPUSH
26200: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
26204: LD_ADDR_VAR 0 2
26208: PUSH
26209: LD_INT 22
26211: PUSH
26212: LD_INT 3
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 33
26221: PUSH
26222: LD_INT 3
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PPUSH
26233: CALL_OW 69
26237: PUSH
26238: LD_INT 1
26240: ARRAY
26241: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
26242: LD_EXP 66
26246: PPUSH
26247: LD_VAR 0 2
26251: PPUSH
26252: CALL_OW 119
// game_speed := 4 ;
26256: LD_ADDR_OWVAR 65
26260: PUSH
26261: LD_INT 4
26263: ST_TO_ADDR
// async ;
26264: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
26265: LD_EXP 66
26269: PPUSH
26270: LD_STRING DMcn-Factory-3
26272: PPUSH
26273: CALL_OW 88
// wait ( 0 0$0.9 ) ;
26277: LD_INT 32
26279: PPUSH
26280: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
26284: LD_VAR 0 2
26288: PPUSH
26289: LD_EXP 66
26293: PPUSH
26294: CALL_OW 115
// sync ;
26298: SYNC
// wait ( 0 0$1 ) ;
26299: LD_INT 35
26301: PPUSH
26302: CALL_OW 67
// KillUnit ( ruDisturb ) ;
26306: LD_EXP 66
26310: PPUSH
26311: CALL_OW 66
// SetSide ( veh , 7 ) ;
26315: LD_VAR 0 2
26319: PPUSH
26320: LD_INT 7
26322: PPUSH
26323: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
26327: LD_VAR 0 2
26331: PPUSH
26332: LD_INT 84
26334: PPUSH
26335: LD_INT 38
26337: PPUSH
26338: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
26342: LD_EXP 67
26346: PUSH
26347: LD_INT 1
26349: ARRAY
26350: PPUSH
26351: CALL_OW 258
26355: PUSH
26356: LD_INT 1
26358: EQUAL
26359: IFFALSE 26379
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
26361: LD_EXP 67
26365: PUSH
26366: LD_INT 1
26368: ARRAY
26369: PPUSH
26370: LD_STRING DRum-Factory-4
26372: PPUSH
26373: CALL_OW 88
26377: GO 26395
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
26379: LD_EXP 67
26383: PUSH
26384: LD_INT 1
26386: ARRAY
26387: PPUSH
26388: LD_STRING DRuf-Factory-4
26390: PPUSH
26391: CALL_OW 88
// wait ( 0 0$1 ) ;
26395: LD_INT 35
26397: PPUSH
26398: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
26402: LD_EXP 67
26406: PPUSH
26407: LD_INT 26
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PPUSH
26417: CALL_OW 72
26421: PUSH
26422: LD_INT 1
26424: ARRAY
26425: PPUSH
26426: LD_STRING DRum-Factory-6
26428: PPUSH
26429: CALL_OW 88
// wait ( 0 0$2 ) ;
26433: LD_INT 70
26435: PPUSH
26436: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
26440: LD_EXP 46
26444: PPUSH
26445: LD_INT 33
26447: PPUSH
26448: CALL_OW 336
// ComExitBuilding ( Heike ) ;
26452: LD_EXP 46
26456: PPUSH
26457: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
26461: LD_EXP 46
26465: PPUSH
26466: LD_INT 168
26468: PPUSH
26469: LD_INT 54
26471: PPUSH
26472: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
26476: LD_INT 173
26478: PPUSH
26479: LD_INT 54
26481: PPUSH
26482: LD_INT 2
26484: PPUSH
26485: CALL_OW 331
// InGameOff ;
26489: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
26493: LD_STRING M2b-out
26495: PPUSH
26496: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
26500: LD_STRING ACH_TOY
26502: PPUSH
26503: CALL_OW 543
// hasMuchin := false ;
26507: LD_ADDR_EXP 30
26511: PUSH
26512: LD_INT 0
26514: ST_TO_ADDR
// exit ;
26515: GO 28625
// end ; wait ( 0 0$5 ) ;
26517: LD_INT 175
26519: PPUSH
26520: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
26524: LD_INT 61
26526: PPUSH
26527: LD_INT 99
26529: PPUSH
26530: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
26534: LD_EXP 53
26538: PUSH
26539: LD_EXP 14
26543: IN
26544: IFFALSE 26561
26546: PUSH
26547: LD_EXP 53
26551: PPUSH
26552: CALL_OW 255
26556: PUSH
26557: LD_INT 3
26559: EQUAL
26560: AND
26561: IFFALSE 26584
// begin SetSide ( Markov , 2 ) ;
26563: LD_EXP 53
26567: PPUSH
26568: LD_INT 2
26570: PPUSH
26571: CALL_OW 235
// ComExitBuilding ( Markov ) ;
26575: LD_EXP 53
26579: PPUSH
26580: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
26584: LD_EXP 46
26588: PPUSH
26589: LD_INT 2
26591: PPUSH
26592: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
26596: LD_EXP 46
26600: PPUSH
26601: LD_INT 33
26603: PPUSH
26604: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
26608: LD_EXP 66
26612: PPUSH
26613: CALL_OW 122
// ComExitBuilding ( Heike ) ;
26617: LD_EXP 46
26621: PPUSH
26622: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
26626: LD_EXP 46
26630: PPUSH
26631: LD_INT 168
26633: PPUSH
26634: LD_INT 54
26636: PPUSH
26637: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
26641: LD_INT 173
26643: PPUSH
26644: LD_INT 54
26646: PPUSH
26647: LD_INT 2
26649: PPUSH
26650: CALL_OW 331
// InGameOff ;
26654: CALL_OW 9
// wait ( 3 ) ;
26658: LD_INT 3
26660: PPUSH
26661: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
26665: LD_EXP 66
26669: PPUSH
26670: LD_INT 2
26672: PPUSH
26673: CALL_OW 120
// wait ( 0 0$3 ) ;
26677: LD_INT 105
26679: PPUSH
26680: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
26684: LD_STRING M2b-out
26686: PPUSH
26687: CALL_OW 337
// hasMuchin := false ;
26691: LD_ADDR_EXP 30
26695: PUSH
26696: LD_INT 0
26698: ST_TO_ADDR
// wait ( 2 2$00 ) ;
26699: LD_INT 4200
26701: PPUSH
26702: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
26706: LD_INT 35
26708: PPUSH
26709: CALL_OW 67
// if not HasTask ( ruDisturb ) then
26713: LD_EXP 66
26717: PPUSH
26718: CALL_OW 314
26722: NOT
26723: IFFALSE 26739
// ComMoveUnit ( ruDisturb , Heike ) ;
26725: LD_EXP 66
26729: PPUSH
26730: LD_EXP 46
26734: PPUSH
26735: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
26739: LD_EXP 46
26743: PPUSH
26744: LD_EXP 66
26748: PPUSH
26749: CALL_OW 296
26753: PUSH
26754: LD_INT 2
26756: LESS
26757: IFFALSE 26770
26759: PUSH
26760: LD_EXP 66
26764: PPUSH
26765: CALL_OW 302
26769: AND
26770: IFFALSE 26706
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26772: LD_EXP 46
26776: PPUSH
26777: CALL_OW 257
26781: PUSH
26782: LD_INT 33
26784: NONEQUAL
26785: IFTRUE 26879
26787: PUSH
26788: LD_EXP 14
26792: PPUSH
26793: LD_INT 22
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 91
26805: PUSH
26806: LD_EXP 66
26810: PUSH
26811: LD_INT 8
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: LD_INT 25
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 25
26834: PUSH
26835: LD_INT 11
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 25
26844: PUSH
26845: LD_INT 32
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 25
26854: PUSH
26855: LD_INT 34
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: LIST
26873: PPUSH
26874: CALL_OW 72
26878: OR
26879: IFFALSE 26889
// isAlarm := true ;
26881: LD_ADDR_EXP 17
26885: PUSH
26886: LD_INT 1
26888: ST_TO_ADDR
// if isAlarm then
26889: LD_EXP 17
26893: IFFALSE 26897
// exit ;
26895: GO 28625
// ComTurnUnit ( Heike , ruDisturb ) ;
26897: LD_EXP 46
26901: PPUSH
26902: LD_EXP 66
26906: PPUSH
26907: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
26911: LD_EXP 66
26915: PPUSH
26916: LD_EXP 46
26920: PPUSH
26921: CALL_OW 119
// wait ( 3 ) ;
26925: LD_INT 3
26927: PPUSH
26928: CALL_OW 67
// for i := 1 to 3 do
26932: LD_ADDR_VAR 0 1
26936: PUSH
26937: DOUBLE
26938: LD_INT 1
26940: DEC
26941: ST_TO_ADDR
26942: LD_INT 3
26944: PUSH
26945: FOR_TO
26946: IFFALSE 26963
// CreateCratesArea ( 5 , cratesArea , false ) ;
26948: LD_INT 5
26950: PPUSH
26951: LD_INT 58
26953: PPUSH
26954: LD_INT 0
26956: PPUSH
26957: CALL_OW 55
26961: GO 26945
26963: POP
26964: POP
// uc_side := 3 ;
26965: LD_ADDR_OWVAR 20
26969: PUSH
26970: LD_INT 3
26972: ST_TO_ADDR
// uc_nation := nation_russian ;
26973: LD_ADDR_OWVAR 21
26977: PUSH
26978: LD_INT 3
26980: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
26981: LD_INT 21
26983: PPUSH
26984: LD_INT 3
26986: PPUSH
26987: LD_INT 1
26989: PPUSH
26990: LD_INT 51
26992: PPUSH
26993: LD_INT 100
26995: PPUSH
26996: CALL 35260 0 5
// veh := CreateVehicle ;
27000: LD_ADDR_VAR 0 2
27004: PUSH
27005: CALL_OW 45
27009: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
27010: LD_VAR 0 2
27014: PPUSH
27015: LD_INT 104
27017: PPUSH
27018: LD_INT 41
27020: PPUSH
27021: LD_INT 3
27023: PPUSH
27024: LD_INT 0
27026: PPUSH
27027: CALL 70600 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
27031: LD_VAR 0 2
27035: PPUSH
27036: LD_INT 1
27038: PPUSH
27039: LD_INT 100
27041: PPUSH
27042: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
27046: CALL_OW 44
27050: PPUSH
27051: LD_VAR 0 2
27055: PPUSH
27056: CALL_OW 52
// DialogueOn ;
27060: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
27064: LD_EXP 66
27068: PPUSH
27069: LD_STRING DMcn-Interrupt-1
27071: PPUSH
27072: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
27076: LD_EXP 66
27080: PPUSH
27081: LD_STRING DMcn-Interrupt-2
27083: PPUSH
27084: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
27088: LD_EXP 66
27092: PPUSH
27093: LD_STRING DMcn-Interrupt-c-3
27095: PPUSH
27096: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
27100: LD_INT 101
27102: PPUSH
27103: LD_INT 38
27105: PPUSH
27106: LD_INT 2
27108: PPUSH
27109: LD_INT 10
27111: NEG
27112: PPUSH
27113: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
27117: LD_INT 101
27119: PPUSH
27120: LD_INT 38
27122: PPUSH
27123: CALL_OW 84
// wait ( 0 0$2 ) ;
27127: LD_INT 70
27129: PPUSH
27130: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
27134: LD_INT 101
27136: PPUSH
27137: LD_INT 38
27139: PPUSH
27140: LD_INT 2
27142: PPUSH
27143: CALL_OW 331
// RemoveUnit ( veh ) ;
27147: LD_VAR 0 2
27151: PPUSH
27152: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
27156: LD_EXP 66
27160: PPUSH
27161: LD_STRING DMcn-Interrupt-c-4
27163: PPUSH
27164: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
27168: LD_EXP 46
27172: PPUSH
27173: LD_STRING DH-Interrupt-c-5
27175: PPUSH
27176: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
27180: LD_EXP 66
27184: PPUSH
27185: LD_STRING DMcn-Interrupt-c-6
27187: PPUSH
27188: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
27192: LD_EXP 46
27196: PPUSH
27197: LD_STRING DH-Interrupt-c-7
27199: PPUSH
27200: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
27204: LD_EXP 66
27208: PPUSH
27209: LD_STRING DMcn-Interrupt-c-8
27211: PPUSH
27212: CALL_OW 88
// DialogueOff ;
27216: CALL_OW 7
// hasMuchin := true ;
27220: LD_ADDR_EXP 30
27224: PUSH
27225: LD_INT 1
27227: ST_TO_ADDR
// Query ( MuchinInfo ) ;
27228: LD_STRING MuchinInfo
27230: PPUSH
27231: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
27235: LD_STRING M2c
27237: PPUSH
27238: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
27242: LD_INT 35
27244: PPUSH
27245: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
27249: LD_EXP 66
27253: PPUSH
27254: LD_EXP 46
27258: PPUSH
27259: CALL_OW 296
27263: PUSH
27264: LD_INT 6
27266: GREATER
27267: IFFALSE 27283
// ComMoveUnit ( ruDisturb , Heike ) ;
27269: LD_EXP 66
27273: PPUSH
27274: LD_EXP 46
27278: PPUSH
27279: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
27283: LD_EXP 46
27287: PPUSH
27288: CALL_OW 257
27292: PUSH
27293: LD_INT 33
27295: NONEQUAL
27296: IFTRUE 27390
27298: PUSH
27299: LD_EXP 14
27303: PPUSH
27304: LD_INT 22
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 91
27316: PUSH
27317: LD_EXP 66
27321: PUSH
27322: LD_INT 8
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 2
27332: PUSH
27333: LD_INT 25
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 25
27345: PUSH
27346: LD_INT 11
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 25
27355: PUSH
27356: LD_INT 32
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 25
27365: PUSH
27366: LD_INT 34
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: LIST
27384: PPUSH
27385: CALL_OW 72
27389: OR
27390: IFFALSE 27402
// begin isAlarm := true ;
27392: LD_ADDR_EXP 17
27396: PUSH
27397: LD_INT 1
27399: ST_TO_ADDR
// exit ;
27400: GO 28625
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
27402: LD_EXP 14
27406: PUSH
27407: LD_EXP 46
27411: UNION
27412: PPUSH
27413: LD_INT 92
27415: PUSH
27416: LD_INT 100
27418: PUSH
27419: LD_INT 37
27421: PUSH
27422: LD_INT 6
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: PPUSH
27431: CALL_OW 72
27435: IFFALSE 27242
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
27437: LD_INT 100
27439: PPUSH
27440: LD_INT 37
27442: PPUSH
27443: LD_INT 3
27445: PPUSH
27446: LD_INT 10
27448: NEG
27449: PPUSH
27450: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
27454: LD_ADDR_VAR 0 3
27458: PUSH
27459: LD_EXP 14
27463: PUSH
27464: LD_EXP 46
27468: UNION
27469: PPUSH
27470: LD_INT 25
27472: PUSH
27473: LD_INT 33
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 91
27482: PUSH
27483: LD_INT 6
27485: PUSH
27486: LD_INT 12
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: LIST
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PPUSH
27498: CALL_OW 72
27502: ST_TO_ADDR
// for i in tmp do
27503: LD_ADDR_VAR 0 1
27507: PUSH
27508: LD_VAR 0 3
27512: PUSH
27513: FOR_IN
27514: IFFALSE 27545
// begin SetSide ( i , 3 ) ;
27516: LD_VAR 0 1
27520: PPUSH
27521: LD_INT 3
27523: PPUSH
27524: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
27528: LD_VAR 0 1
27532: PPUSH
27533: LD_INT 101
27535: PPUSH
27536: LD_INT 38
27538: PPUSH
27539: CALL_OW 111
// end ;
27543: GO 27513
27545: POP
27546: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
27547: LD_EXP 66
27551: PPUSH
27552: LD_INT 104
27554: PPUSH
27555: LD_INT 37
27557: PPUSH
27558: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27562: LD_EXP 66
27566: PPUSH
27567: LD_EXP 46
27571: PPUSH
27572: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
27576: LD_INT 35
27578: PPUSH
27579: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
27583: LD_ADDR_VAR 0 4
27587: PUSH
27588: LD_INT 58
27590: PPUSH
27591: CALL_OW 435
27595: ST_TO_ADDR
// for i in tmp do
27596: LD_ADDR_VAR 0 1
27600: PUSH
27601: LD_VAR 0 3
27605: PUSH
27606: FOR_IN
27607: IFFALSE 27650
// if not HasTask ( i ) then
27609: LD_VAR 0 1
27613: PPUSH
27614: CALL_OW 314
27618: NOT
27619: IFFALSE 27648
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
27621: LD_VAR 0 1
27625: PPUSH
27626: LD_VAR 0 4
27630: PUSH
27631: LD_INT 1
27633: ARRAY
27634: PPUSH
27635: LD_VAR 0 4
27639: PUSH
27640: LD_INT 2
27642: ARRAY
27643: PPUSH
27644: CALL_OW 117
27648: GO 27606
27650: POP
27651: POP
// until not cr ;
27652: LD_VAR 0 4
27656: NOT
27657: IFFALSE 27576
// wait ( 0 0$2 ) ;
27659: LD_INT 70
27661: PPUSH
27662: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
27666: LD_INT 100
27668: PPUSH
27669: LD_INT 37
27671: PPUSH
27672: LD_INT 3
27674: PPUSH
27675: CALL_OW 331
// for i in tmp do
27679: LD_ADDR_VAR 0 1
27683: PUSH
27684: LD_VAR 0 3
27688: PUSH
27689: FOR_IN
27690: IFFALSE 27706
// SetSide ( i , 2 ) ;
27692: LD_VAR 0 1
27696: PPUSH
27697: LD_INT 2
27699: PPUSH
27700: CALL_OW 235
27704: GO 27689
27706: POP
27707: POP
// if Kaia in tmp then
27708: LD_EXP 51
27712: PUSH
27713: LD_VAR 0 3
27717: IN
27718: IFFALSE 28019
// begin InGameOn ;
27720: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
27724: LD_EXP 51
27728: PPUSH
27729: LD_EXP 66
27733: PPUSH
27734: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
27738: LD_EXP 66
27742: PPUSH
27743: LD_EXP 51
27747: PPUSH
27748: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
27752: LD_EXP 51
27756: PPUSH
27757: LD_EXP 66
27761: PPUSH
27762: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
27766: LD_EXP 51
27770: PPUSH
27771: LD_STRING DK-Assassin-1
27773: PPUSH
27774: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
27778: LD_EXP 66
27782: PPUSH
27783: LD_STRING DMcn-Assassin-2
27785: PPUSH
27786: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
27790: LD_EXP 51
27794: PPUSH
27795: LD_STRING DK-Assassin-3
27797: PPUSH
27798: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
27802: LD_EXP 66
27806: PPUSH
27807: LD_STRING DMcn-Assassin-4
27809: PPUSH
27810: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
27814: LD_EXP 51
27818: PPUSH
27819: LD_STRING DK-Assassin-5
27821: PPUSH
27822: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
27826: LD_EXP 66
27830: PPUSH
27831: LD_STRING DMcn-Assassin-6
27833: PPUSH
27834: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
27838: LD_EXP 51
27842: PPUSH
27843: LD_INT 3
27845: PPUSH
27846: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
27850: LD_EXP 51
27854: PUSH
27855: LD_EXP 66
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PPUSH
27864: LD_INT 6
27866: PPUSH
27867: CALL_OW 120
// wait ( 0 0$5 ) ;
27871: LD_INT 175
27873: PPUSH
27874: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
27878: LD_EXP 51
27882: PPUSH
27883: LD_STRING DK-Assassin-7
27885: PPUSH
27886: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
27890: LD_EXP 66
27894: PPUSH
27895: LD_STRING DMcn-Assassin-8
27897: PPUSH
27898: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27902: LD_INT 10
27904: PPUSH
27905: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
27909: LD_EXP 51
27913: PPUSH
27914: LD_STRING DK-Assassin-9
27916: PPUSH
27917: CALL_OW 88
// wait ( 0 0$2 ) ;
27921: LD_INT 70
27923: PPUSH
27924: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
27928: LD_EXP 51
27932: PPUSH
27933: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
27937: LD_EXP 66
27941: PPUSH
27942: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
27946: LD_EXP 51
27950: PPUSH
27951: LD_INT 2
27953: PPUSH
27954: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
27958: LD_EXP 51
27962: PPUSH
27963: LD_EXP 46
27967: PPUSH
27968: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
27972: LD_EXP 51
27976: PPUSH
27977: LD_STRING DK-Assasin-10
27979: PPUSH
27980: CALL_OW 88
// InGameOff ;
27984: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
27988: LD_STRING ACH_POKER
27990: PPUSH
27991: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
27995: LD_STRING M2c-out
27997: PPUSH
27998: CALL_OW 337
// wait ( 0 0$3 ) ;
28002: LD_INT 105
28004: PPUSH
28005: CALL_OW 67
// hasMuchin := false ;
28009: LD_ADDR_EXP 30
28013: PUSH
28014: LD_INT 0
28016: ST_TO_ADDR
// exit ;
28017: GO 28625
// end ; ChangeMissionObjectives ( M2c-out ) ;
28019: LD_STRING M2c-out
28021: PPUSH
28022: CALL_OW 337
// meetWithMuchin := true ;
28026: LD_ADDR_EXP 44
28030: PUSH
28031: LD_INT 1
28033: ST_TO_ADDR
// InGameOn ;
28034: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
28038: LD_EXP 66
28042: PPUSH
28043: LD_STRING DMcn-Fail-1
28045: PPUSH
28046: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
28050: LD_VAR 0 3
28054: PPUSH
28055: LD_INT 114
28057: PPUSH
28058: LD_INT 17
28060: PPUSH
28061: CALL_OW 111
// wait ( 0 0$1 ) ;
28065: LD_INT 35
28067: PPUSH
28068: CALL_OW 67
// async ;
28072: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
28073: LD_EXP 66
28077: PPUSH
28078: LD_EXP 46
28082: PPUSH
28083: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
28087: LD_EXP 66
28091: PPUSH
28092: LD_STRING DMcn-Fail-2
28094: PPUSH
28095: CALL_OW 88
// ComStop ( Heike ) ;
28099: LD_EXP 46
28103: PPUSH
28104: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
28108: LD_EXP 46
28112: PPUSH
28113: LD_EXP 66
28117: PPUSH
28118: CALL_OW 179
// sync ;
28122: SYNC
// Say ( Heike , DH-Fail-3 ) ;
28123: LD_EXP 46
28127: PPUSH
28128: LD_STRING DH-Fail-3
28130: PPUSH
28131: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
28135: LD_EXP 66
28139: PPUSH
28140: LD_STRING DMcn-Fail-4
28142: PPUSH
28143: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
28147: LD_EXP 46
28151: PUSH
28152: LD_EXP 66
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PPUSH
28161: LD_INT 41
28163: PPUSH
28164: LD_INT 19
28166: PPUSH
28167: CALL_OW 111
// wait ( 0 0$2 ) ;
28171: LD_INT 70
28173: PPUSH
28174: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
28178: LD_EXP 66
28182: PPUSH
28183: LD_INT 40
28185: PPUSH
28186: LD_INT 19
28188: PPUSH
28189: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
28193: LD_EXP 46
28197: PPUSH
28198: LD_INT 43
28200: PPUSH
28201: LD_INT 21
28203: PPUSH
28204: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
28208: LD_EXP 66
28212: PPUSH
28213: LD_EXP 46
28217: PPUSH
28218: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
28222: LD_EXP 46
28226: PPUSH
28227: LD_EXP 66
28231: PPUSH
28232: CALL_OW 179
// wait ( 0 0$2 ) ;
28236: LD_INT 70
28238: PPUSH
28239: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
28243: LD_EXP 66
28247: PPUSH
28248: LD_STRING DMcn-Fail-5
28250: PPUSH
28251: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
28255: LD_EXP 46
28259: PPUSH
28260: CALL_OW 87
// wait ( 0 0$2 ) ;
28264: LD_INT 70
28266: PPUSH
28267: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
28271: LD_EXP 66
28275: PPUSH
28276: LD_STRING DMcn-Fail-6
28278: PPUSH
28279: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
28283: LD_EXP 46
28287: PPUSH
28288: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
28292: LD_INT 35
28294: PPUSH
28295: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
28299: LD_EXP 46
28303: PPUSH
28304: LD_INT 43
28306: PPUSH
28307: LD_INT 21
28309: PPUSH
28310: CALL_OW 307
28314: IFFALSE 28292
// CenterNowOnUnits ( Heike ) ;
28316: LD_EXP 46
28320: PPUSH
28321: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
28325: LD_STRING MuchinQuestion
28327: PPUSH
28328: CALL_OW 97
28332: PUSH
28333: LD_INT 1
28335: DOUBLE
28336: EQUAL
28337: IFTRUE 28341
28339: GO 28441
28341: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
28342: LD_EXP 66
28346: PPUSH
28347: LD_STRING DMcn-Fail-7
28349: PPUSH
28350: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
28354: LD_EXP 46
28358: PPUSH
28359: LD_STRING DH-Fail-8
28361: PPUSH
28362: CALL_OW 88
// wait ( 0 0$0.3 ) ;
28366: LD_INT 10
28368: PPUSH
28369: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
28373: LD_EXP 46
28377: PPUSH
28378: LD_STRING DH-Fail-9
28380: PPUSH
28381: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
28385: LD_EXP 46
28389: PPUSH
28390: LD_STRING DH-Fail-10
28392: PPUSH
28393: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
28397: LD_EXP 66
28401: PPUSH
28402: LD_STRING DMcn-Fail-11
28404: PPUSH
28405: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
28409: LD_EXP 66
28413: PPUSH
28414: LD_EXP 46
28418: PPUSH
28419: CALL_OW 115
// wait ( 0 0$2 ) ;
28423: LD_INT 70
28425: PPUSH
28426: CALL_OW 67
// KillUnit ( Heike ) ;
28430: LD_EXP 46
28434: PPUSH
28435: CALL_OW 66
// end ; 2 :
28439: GO 28621
28441: LD_INT 2
28443: DOUBLE
28444: EQUAL
28445: IFTRUE 28449
28447: GO 28620
28449: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
28450: LD_EXP 46
28454: PPUSH
28455: LD_STRING DH-Fail-a-8
28457: PPUSH
28458: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
28462: LD_EXP 46
28466: PPUSH
28467: LD_STRING DH-Fail-a-9
28469: PPUSH
28470: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
28474: LD_EXP 46
28478: PPUSH
28479: LD_STRING DH-Fail-10
28481: PPUSH
28482: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
28486: LD_EXP 46
28490: PPUSH
28491: LD_STRING DH-Fail-a-11
28493: PPUSH
28494: CALL_OW 88
// async ;
28498: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
28499: LD_EXP 66
28503: PPUSH
28504: LD_EXP 46
28508: PPUSH
28509: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
28513: LD_EXP 66
28517: PPUSH
28518: LD_EXP 46
28522: PPUSH
28523: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
28527: LD_EXP 66
28531: PPUSH
28532: LD_STRING DH-Fail-12
28534: PPUSH
28535: CALL_OW 88
// sync ;
28539: SYNC
// wait ( 0 0$1 ) ;
28540: LD_INT 35
28542: PPUSH
28543: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
28547: LD_EXP 46
28551: PPUSH
28552: LD_STRING DH-Fail-a-13
28554: PPUSH
28555: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
28559: LD_EXP 66
28563: PPUSH
28564: LD_INT 100
28566: PPUSH
28567: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
28571: LD_EXP 66
28575: PPUSH
28576: LD_STRING DMcn-Fail-a-14
28578: PPUSH
28579: CALL_OW 91
// KillUnit ( ruDisturb ) ;
28583: LD_EXP 66
28587: PPUSH
28588: CALL_OW 66
// wait ( 0 0$1 ) ;
28592: LD_INT 35
28594: PPUSH
28595: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
28599: LD_EXP 46
28603: PPUSH
28604: LD_STRING DH-Fail-a-15
28606: PPUSH
28607: CALL_OW 88
// YouLost ( FailMuchin ) ;
28611: LD_STRING FailMuchin
28613: PPUSH
28614: CALL_OW 104
// end ; end ;
28618: GO 28621
28620: POP
// InGameOff ;
28621: CALL_OW 9
// end ;
28625: PPOPN 4
28627: END
// every 0 0$1 trigger FilterUnitsInArea ( baseOutsideBorderArea , [ f_side , 2 ] ) and not meetWithMuchin and hasMuchin marked gameStartEvent do
28628: LD_INT 23
28630: PPUSH
28631: LD_INT 22
28633: PUSH
28634: LD_INT 2
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 70
28645: IFFALSE 28654
28647: PUSH
28648: LD_EXP 44
28652: NOT
28653: AND
28654: IFFALSE 28662
28656: PUSH
28657: LD_EXP 30
28661: AND
28662: IFFALSE 28675
28664: GO 28666
28666: DISABLE
// isAlarm := true ; end_of_file
28667: LD_ADDR_EXP 17
28671: PUSH
28672: LD_INT 1
28674: ST_TO_ADDR
28675: END
// every 0 0$1 marked gameStartEvent do
28676: GO 28678
28678: DISABLE
// begin enable ;
28679: ENABLE
// if not contactWithAmerican then
28680: LD_EXP 25
28684: NOT
28685: IFFALSE 28730
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
28687: LD_ADDR_OWVAR 47
28691: PUSH
28692: LD_STRING #X108-1
28694: PUSH
28695: LD_INT 22
28697: PUSH
28698: LD_INT 5
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 21
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PPUSH
28719: CALL_OW 69
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: ST_TO_ADDR
28728: GO 28819
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
28730: LD_ADDR_OWVAR 47
28734: PUSH
28735: LD_STRING #X108-1
28737: PUSH
28738: LD_INT 22
28740: PUSH
28741: LD_INT 5
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 21
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 50
28760: PUSH
28761: EMPTY
28762: LIST
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: LIST
28768: PPUSH
28769: CALL_OW 69
28773: PUSH
28774: LD_STRING #X108-2
28776: PUSH
28777: LD_INT 22
28779: PUSH
28780: LD_INT 4
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 21
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 50
28799: PUSH
28800: EMPTY
28801: LIST
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: LIST
28807: PPUSH
28808: CALL_OW 69
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: ST_TO_ADDR
// end ; end_of_file
28819: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
28820: LD_EXP 46
28824: PPUSH
28825: LD_INT 59
28827: PPUSH
28828: CALL_OW 308
28832: IFFALSE 28954
28834: GO 28836
28836: DISABLE
// begin Query ( FinalInfo ) ;
28837: LD_STRING FinalInfo
28839: PPUSH
28840: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
28844: LD_INT 59
28846: PPUSH
28847: LD_INT 1
28849: PPUSH
28850: CALL_OW 424
// end_the_mission_allowed := true ;
28854: LD_ADDR_OWVAR 57
28858: PUSH
28859: LD_INT 1
28861: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28862: LD_INT 35
28864: PPUSH
28865: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
28869: LD_INT 22
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 21
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 95
28891: PUSH
28892: LD_INT 59
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: PPUSH
28904: CALL_OW 69
28908: PPUSH
28909: CALL 32464 0 1
28913: PUSH
28914: LD_INT 22
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 21
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PPUSH
28938: CALL_OW 69
28942: PPUSH
28943: CALL 32464 0 1
28947: EQUAL
28948: IFFALSE 28862
// EndMission ;
28950: CALL 28962 0 0
// end ;
28954: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
28955: CALL 28962 0 0
// end ;
28959: PPOPN 1
28961: END
// function EndMission ; var tmp , m1 , m2 , m3 ; begin
28962: LD_INT 0
28964: PPUSH
28965: PPUSH
28966: PPUSH
28967: PPUSH
28968: PPUSH
// m1 := false ;
28969: LD_ADDR_VAR 0 3
28973: PUSH
28974: LD_INT 0
28976: ST_TO_ADDR
// m2 := false ;
28977: LD_ADDR_VAR 0 4
28981: PUSH
28982: LD_INT 0
28984: ST_TO_ADDR
// m3 := false ;
28985: LD_ADDR_VAR 0 5
28989: PUSH
28990: LD_INT 0
28992: ST_TO_ADDR
// PlayOriginalMusic ;
28993: CALL 96532 0 0
// if not IsInArea ( Heike , finalArea ) then
28997: LD_EXP 46
29001: PPUSH
29002: LD_INT 59
29004: PPUSH
29005: CALL_OW 308
29009: NOT
29010: IFFALSE 29021
// begin Query ( HeikeOutOfArea ) ;
29012: LD_STRING HeikeOutOfArea
29014: PPUSH
29015: CALL_OW 97
// exit ;
29019: GO 30038
// end ; if not IsOk ( Heike ) then
29021: LD_EXP 46
29025: PPUSH
29026: CALL_OW 302
29030: NOT
29031: IFFALSE 29042
// begin Query ( HeikeIsHurt ) ;
29033: LD_STRING HeikeIsHurt
29035: PPUSH
29036: CALL_OW 97
// exit ;
29040: GO 30038
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
29042: LD_INT 22
29044: PUSH
29045: LD_INT 2
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 21
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 50
29064: PUSH
29065: EMPTY
29066: LIST
29067: PUSH
29068: LD_INT 95
29070: PUSH
29071: LD_INT 59
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: PPUSH
29084: CALL_OW 69
29088: PPUSH
29089: CALL 32464 0 1
29093: PUSH
29094: LD_INT 6
29096: LESS
29097: IFFALSE 29106
// YouLost ( NeedMorePep ) ;
29099: LD_STRING NeedMorePep
29101: PPUSH
29102: CALL_OW 104
// if tick < 20 20$00 then
29106: LD_OWVAR 1
29110: PUSH
29111: LD_INT 42000
29113: LESS
29114: IFFALSE 29123
// SetAchievement ( ACH_HSPEED_8 ) ;
29116: LD_STRING ACH_HSPEED_8
29118: PPUSH
29119: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
29123: LD_INT 22
29125: PUSH
29126: LD_INT 5
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 21
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PPUSH
29147: CALL_OW 69
29151: PUSH
29152: LD_INT 0
29154: EQUAL
29155: IFFALSE 29167
29157: PUSH
29158: LD_EXP 32
29162: PUSH
29163: LD_INT 0
29165: EQUAL
29166: AND
29167: IFFALSE 29189
// begin m1 := true ;
29169: LD_ADDR_VAR 0 3
29173: PUSH
29174: LD_INT 1
29176: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
29177: LD_STRING med1
29179: PPUSH
29180: LD_INT 1
29182: PPUSH
29183: CALL_OW 101
// end else
29187: GO 29200
// AddMedal ( med1 , - 1 ) ;
29189: LD_STRING med1
29191: PPUSH
29192: LD_INT 1
29194: NEG
29195: PPUSH
29196: CALL_OW 101
// if explosivePlantedList >= 3 then
29200: LD_EXP 29
29204: PUSH
29205: LD_INT 3
29207: GREATEREQUAL
29208: IFFALSE 29230
// begin m2 := true ;
29210: LD_ADDR_VAR 0 4
29214: PUSH
29215: LD_INT 1
29217: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
29218: LD_STRING med2
29220: PPUSH
29221: LD_INT 1
29223: PPUSH
29224: CALL_OW 101
// end else
29228: GO 29264
// if explosivePlantedList < 3 then
29230: LD_EXP 29
29234: PUSH
29235: LD_INT 3
29237: LESS
29238: IFFALSE 29253
// AddMedal ( med2 , - 2 ) else
29240: LD_STRING med2
29242: PPUSH
29243: LD_INT 2
29245: NEG
29246: PPUSH
29247: CALL_OW 101
29251: GO 29264
// AddMedal ( med2 , - 1 ) ;
29253: LD_STRING med2
29255: PPUSH
29256: LD_INT 1
29258: NEG
29259: PPUSH
29260: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
29264: LD_INT 5
29266: PPUSH
29267: LD_INT 2
29269: PPUSH
29270: CALL_OW 321
29274: PUSH
29275: LD_INT 2
29277: EQUAL
29278: IFFALSE 29300
// begin m3 := true ;
29280: LD_ADDR_VAR 0 5
29284: PUSH
29285: LD_INT 1
29287: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
29288: LD_STRING med3
29290: PPUSH
29291: LD_INT 1
29293: PPUSH
29294: CALL_OW 101
// end else
29298: GO 29311
// AddMedal ( med3 , - 1 ) ;
29300: LD_STRING med3
29302: PPUSH
29303: LD_INT 1
29305: NEG
29306: PPUSH
29307: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
29311: LD_VAR 0 3
29315: IFFALSE 29323
29317: PUSH
29318: LD_VAR 0 4
29322: AND
29323: IFFALSE 29331
29325: PUSH
29326: LD_VAR 0 5
29330: AND
29331: IFFALSE 29343
29333: PUSH
29334: LD_OWVAR 67
29338: PUSH
29339: LD_INT 3
29341: GREATEREQUAL
29342: AND
29343: IFFALSE 29355
// SetAchievementEX ( ACH_ARES , 8 ) ;
29345: LD_STRING ACH_ARES
29347: PPUSH
29348: LD_INT 8
29350: PPUSH
29351: CALL_OW 564
// GiveMedals ( MAIN ) ;
29355: LD_STRING MAIN
29357: PPUSH
29358: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ;
29362: LD_ADDR_VAR 0 2
29366: PUSH
29367: LD_INT 22
29369: PUSH
29370: LD_INT 2
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 21
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 50
29389: PUSH
29390: EMPTY
29391: LIST
29392: PUSH
29393: LD_INT 95
29395: PUSH
29396: LD_INT 59
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 69
29413: ST_TO_ADDR
// RewardPeople ( UnitFilter ( tmp , [ f_nation , 2 ] ) ) ;
29414: LD_VAR 0 2
29418: PPUSH
29419: LD_INT 23
29421: PUSH
29422: LD_INT 2
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PPUSH
29429: CALL_OW 72
29433: PPUSH
29434: CALL_OW 43
// if Doug and Doug in tmp then
29438: LD_EXP 60
29442: IFFALSE 29456
29444: PUSH
29445: LD_EXP 60
29449: PUSH
29450: LD_VAR 0 2
29454: IN
29455: AND
29456: IFFALSE 29470
// SaveCharacters ( Doug , 08_UsCommander ) ;
29458: LD_EXP 60
29462: PPUSH
29463: LD_STRING 08_UsCommander
29465: PPUSH
29466: CALL_OW 38
// if Harris and Harris in tmp then
29470: LD_EXP 59
29474: IFFALSE 29488
29476: PUSH
29477: LD_EXP 59
29481: PUSH
29482: LD_VAR 0 2
29486: IN
29487: AND
29488: IFFALSE 29502
// SaveCharacters ( Harris , 08_Harris ) ;
29490: LD_EXP 59
29494: PPUSH
29495: LD_STRING 08_Harris
29497: PPUSH
29498: CALL_OW 38
// SaveCharacters ( UnitFilter ( tmp , [ f_nation , 1 ] ) diff [ Doug , Harris ] , 08_Americans ) ;
29502: LD_VAR 0 2
29506: PPUSH
29507: LD_INT 23
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PPUSH
29517: CALL_OW 72
29521: PUSH
29522: LD_EXP 60
29526: PUSH
29527: LD_EXP 59
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: DIFF
29536: PPUSH
29537: LD_STRING 08_Americans
29539: PPUSH
29540: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
29544: LD_EXP 46
29548: PPUSH
29549: CALL_OW 248
29553: PUSH
29554: LD_INT 3
29556: EQUAL
29557: IFFALSE 29587
// begin CopySkills ( Heike , HeikeTmp ) ;
29559: LD_EXP 46
29563: PPUSH
29564: LD_EXP 62
29568: PPUSH
29569: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
29573: LD_EXP 62
29577: PPUSH
29578: LD_STRING 08_Heike
29580: PPUSH
29581: CALL_OW 38
// end else
29585: GO 29599
// SaveCharacters ( Heike , 08_Heike ) ;
29587: LD_EXP 46
29591: PPUSH
29592: LD_STRING 08_Heike
29594: PPUSH
29595: CALL_OW 38
// if Aviradze and Aviradze in tmp then
29599: LD_EXP 56
29603: IFFALSE 29617
29605: PUSH
29606: LD_EXP 56
29610: PUSH
29611: LD_VAR 0 2
29615: IN
29616: AND
29617: IFFALSE 29631
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
29619: LD_EXP 56
29623: PPUSH
29624: LD_STRING 08_Aviradze
29626: PPUSH
29627: CALL_OW 38
// if Ibrahim and Ibrahim in tmp then
29631: LD_EXP 49
29635: IFFALSE 29649
29637: PUSH
29638: LD_EXP 49
29642: PUSH
29643: LD_VAR 0 2
29647: IN
29648: AND
29649: IFFALSE 29663
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
29651: LD_EXP 49
29655: PPUSH
29656: LD_STRING 08_Ibrahim
29658: PPUSH
29659: CALL_OW 38
// if Kamil and Kamil in tmp then
29663: LD_EXP 50
29667: IFFALSE 29681
29669: PUSH
29670: LD_EXP 50
29674: PUSH
29675: LD_VAR 0 2
29679: IN
29680: AND
29681: IFFALSE 29695
// SaveCharacters ( Kamil , 08_Kamil ) ;
29683: LD_EXP 50
29687: PPUSH
29688: LD_STRING 08_Kamil
29690: PPUSH
29691: CALL_OW 38
// if Sophia and Sophia in tmp then
29695: LD_EXP 52
29699: IFFALSE 29713
29701: PUSH
29702: LD_EXP 52
29706: PUSH
29707: LD_VAR 0 2
29711: IN
29712: AND
29713: IFFALSE 29727
// SaveCharacters ( Sophia , 08_Sophia ) ;
29715: LD_EXP 52
29719: PPUSH
29720: LD_STRING 08_Sophia
29722: PPUSH
29723: CALL_OW 38
// if Kaia and Kaia in tmp then
29727: LD_EXP 51
29731: IFFALSE 29745
29733: PUSH
29734: LD_EXP 51
29738: PUSH
29739: LD_VAR 0 2
29743: IN
29744: AND
29745: IFFALSE 29759
// SaveCharacters ( Kaia , 08_Kaia ) ;
29747: LD_EXP 51
29751: PPUSH
29752: LD_STRING 08_Kaia
29754: PPUSH
29755: CALL_OW 38
// if Givi and Givi in tmp then
29759: LD_EXP 47
29763: IFFALSE 29777
29765: PUSH
29766: LD_EXP 47
29770: PUSH
29771: LD_VAR 0 2
29775: IN
29776: AND
29777: IFFALSE 29834
// if GetNation ( Givi ) = nation_russian then
29779: LD_EXP 47
29783: PPUSH
29784: CALL_OW 248
29788: PUSH
29789: LD_INT 3
29791: EQUAL
29792: IFFALSE 29822
// begin CopySkills ( Givi , GiviTmp ) ;
29794: LD_EXP 47
29798: PPUSH
29799: LD_EXP 63
29803: PPUSH
29804: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
29808: LD_EXP 63
29812: PPUSH
29813: LD_STRING 08_Givi
29815: PPUSH
29816: CALL_OW 38
// end else
29820: GO 29834
// SaveCharacters ( Givi , 08_Givi ) ;
29822: LD_EXP 47
29826: PPUSH
29827: LD_STRING 08_Givi
29829: PPUSH
29830: CALL_OW 38
// if Mike and Mike in tmp then
29834: LD_EXP 48
29838: IFFALSE 29852
29840: PUSH
29841: LD_EXP 48
29845: PUSH
29846: LD_VAR 0 2
29850: IN
29851: AND
29852: IFFALSE 29866
// SaveCharacters ( Mike , 08_Mike ) ;
29854: LD_EXP 48
29858: PPUSH
29859: LD_STRING 08_Mike
29861: PPUSH
29862: CALL_OW 38
// if Markov and Markov in tmp then
29866: LD_EXP 53
29870: IFFALSE 29884
29872: PUSH
29873: LD_EXP 53
29877: PUSH
29878: LD_VAR 0 2
29882: IN
29883: AND
29884: IFFALSE 29898
// SaveCharacters ( Markov , 08_Markov ) ;
29886: LD_EXP 53
29890: PPUSH
29891: LD_STRING 08_Markov
29893: PPUSH
29894: CALL_OW 38
// if Kurt and Kurt in tmp then
29898: LD_EXP 55
29902: IFFALSE 29916
29904: PUSH
29905: LD_EXP 55
29909: PUSH
29910: LD_VAR 0 2
29914: IN
29915: AND
29916: IFFALSE 29930
// SaveCharacters ( Kurt , 08_Kurt ) ;
29918: LD_EXP 55
29922: PPUSH
29923: LD_STRING 08_Kurt
29925: PPUSH
29926: CALL_OW 38
// if Olaf and Olaf in tmp then
29930: LD_EXP 54
29934: IFFALSE 29948
29936: PUSH
29937: LD_EXP 54
29941: PUSH
29942: LD_VAR 0 2
29946: IN
29947: AND
29948: IFFALSE 29962
// SaveCharacters ( Olaf , 08_Olaf ) ;
29950: LD_EXP 54
29954: PPUSH
29955: LD_STRING 08_Olaf
29957: PPUSH
29958: CALL_OW 38
// if UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) then
29962: LD_EXP 57
29966: PPUSH
29967: LD_INT 95
29969: PUSH
29970: LD_INT 59
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 50
29979: PUSH
29980: EMPTY
29981: LIST
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PPUSH
29987: CALL_OW 72
29991: IFFALSE 30030
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) , 08_others ) ;
29993: LD_EXP 57
29997: PPUSH
29998: LD_INT 95
30000: PUSH
30001: LD_INT 59
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 50
30010: PUSH
30011: EMPTY
30012: LIST
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PPUSH
30018: CALL_OW 72
30022: PPUSH
30023: LD_STRING 08_others
30025: PPUSH
30026: CALL_OW 38
// YouWin ;
30030: CALL_OW 103
// DialogueOff ;
30034: CALL_OW 7
// end ; end_of_file
30038: LD_VAR 0 1
30042: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
30043: LD_EXP 5
30047: IFFALSE 30237
30049: GO 30051
30051: DISABLE
30052: LD_INT 0
30054: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
30055: LD_INT 35
30057: PPUSH
30058: LD_INT 2100
30060: PPUSH
30061: CALL_OW 12
30065: PPUSH
30066: CALL_OW 67
// StopOriginalMusic ;
30070: CALL 96517 0 0
// weatherBusy := true ;
30074: LD_ADDR_EXP 37
30078: PUSH
30079: LD_INT 1
30081: ST_TO_ADDR
// for i := 1 to 3 do
30082: LD_ADDR_VAR 0 1
30086: PUSH
30087: DOUBLE
30088: LD_INT 1
30090: DEC
30091: ST_TO_ADDR
30092: LD_INT 3
30094: PUSH
30095: FOR_TO
30096: IFFALSE 30130
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
30098: LD_INT 1
30100: PPUSH
30101: LD_INT 100
30103: PUSH
30104: LD_INT 100
30106: PUSH
30107: LD_VAR 0 1
30111: MUL
30112: PLUS
30113: PPUSH
30114: LD_INT 60
30116: PPUSH
30117: CALL_OW 550
// wait ( 0 0$2 ) ;
30121: LD_INT 70
30123: PPUSH
30124: CALL_OW 67
// end ;
30128: GO 30095
30130: POP
30131: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
30132: LD_STRING ArStormRain.wav
30134: PPUSH
30135: LD_STRING OW_CUSTOM_COMMAND(103);
30137: PPUSH
30138: CALL 96547 0 2
// wait ( 0 0$3 ) ;
30142: LD_INT 105
30144: PPUSH
30145: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
30149: LD_INT 1
30151: PPUSH
30152: LD_INT 900
30154: PPUSH
30155: LD_INT 120
30157: PPUSH
30158: CALL_OW 550
// wait ( 0 0$10 ) ;
30162: LD_INT 350
30164: PPUSH
30165: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
30169: LD_INT 1
30171: PPUSH
30172: LD_INT 1500
30174: PPUSH
30175: LD_INT 300
30177: PPUSH
30178: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
30182: LD_INT 35
30184: PPUSH
30185: CALL_OW 67
// until not weatherBusy ;
30189: LD_EXP 37
30193: NOT
30194: IFFALSE 30182
// SetWeather ( 0 , 0 , 0 ) ;
30196: LD_INT 0
30198: PPUSH
30199: LD_INT 0
30201: PPUSH
30202: LD_INT 0
30204: PPUSH
30205: CALL_OW 550
// wait ( 5 5$00 ) ;
30209: LD_INT 10500
30211: PPUSH
30212: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
30216: LD_STRING ArStormNormal.wav
30218: PPUSH
30219: LD_STRING OW_CUSTOM_COMMAND(103);
30221: PPUSH
30222: CALL 96547 0 2
// wait ( 5 5$00 ) ;
30226: LD_INT 10500
30228: PPUSH
30229: CALL_OW 67
// PlayOriginalMusic ;
30233: CALL 96532 0 0
// end ; end_of_file
30237: PPOPN 1
30239: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30240: LD_INT 0
30242: PPUSH
30243: PPUSH
// if exist_mode then
30244: LD_VAR 0 2
30248: IFFALSE 30294
// begin unit := CreateCharacter ( prefix & ident ) ;
30250: LD_ADDR_VAR 0 5
30254: PUSH
30255: LD_VAR 0 3
30259: PUSH
30260: LD_VAR 0 1
30264: STR
30265: PPUSH
30266: CALL_OW 34
30270: ST_TO_ADDR
// if unit then
30271: LD_VAR 0 5
30275: IFFALSE 30292
// DeleteCharacters ( prefix & ident ) ;
30277: LD_VAR 0 3
30281: PUSH
30282: LD_VAR 0 1
30286: STR
30287: PPUSH
30288: CALL_OW 40
// end else
30292: GO 30309
// unit := NewCharacter ( ident ) ;
30294: LD_ADDR_VAR 0 5
30298: PUSH
30299: LD_VAR 0 1
30303: PPUSH
30304: CALL_OW 25
30308: ST_TO_ADDR
// result := unit ;
30309: LD_ADDR_VAR 0 4
30313: PUSH
30314: LD_VAR 0 5
30318: ST_TO_ADDR
// end ;
30319: LD_VAR 0 4
30323: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30324: LD_INT 0
30326: PPUSH
30327: PPUSH
// if exist_mode then
30328: LD_VAR 0 2
30332: IFFALSE 30357
// unit := CreateCharacter ( prefix & ident ) else
30334: LD_ADDR_VAR 0 5
30338: PUSH
30339: LD_VAR 0 3
30343: PUSH
30344: LD_VAR 0 1
30348: STR
30349: PPUSH
30350: CALL_OW 34
30354: ST_TO_ADDR
30355: GO 30372
// unit := NewCharacter ( ident ) ;
30357: LD_ADDR_VAR 0 5
30361: PUSH
30362: LD_VAR 0 1
30366: PPUSH
30367: CALL_OW 25
30371: ST_TO_ADDR
// result := unit ;
30372: LD_ADDR_VAR 0 4
30376: PUSH
30377: LD_VAR 0 5
30381: ST_TO_ADDR
// end ;
30382: LD_VAR 0 4
30386: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30387: LD_INT 0
30389: PPUSH
30390: PPUSH
// if not side or not nation then
30391: LD_VAR 0 1
30395: NOT
30396: IFTRUE 30405
30398: PUSH
30399: LD_VAR 0 2
30403: NOT
30404: OR
30405: IFFALSE 30409
// exit ;
30407: GO 31203
// case nation of nation_american :
30409: LD_VAR 0 2
30413: PUSH
30414: LD_INT 1
30416: DOUBLE
30417: EQUAL
30418: IFTRUE 30422
30420: GO 30644
30422: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
30423: LD_ADDR_VAR 0 4
30427: PUSH
30428: LD_INT 35
30430: PUSH
30431: LD_INT 45
30433: PUSH
30434: LD_INT 46
30436: PUSH
30437: LD_INT 47
30439: PUSH
30440: LD_INT 82
30442: PUSH
30443: LD_INT 83
30445: PUSH
30446: LD_INT 84
30448: PUSH
30449: LD_INT 85
30451: PUSH
30452: LD_INT 86
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: LD_INT 2
30460: PUSH
30461: LD_INT 6
30463: PUSH
30464: LD_INT 15
30466: PUSH
30467: LD_INT 16
30469: PUSH
30470: LD_INT 7
30472: PUSH
30473: LD_INT 12
30475: PUSH
30476: LD_INT 13
30478: PUSH
30479: LD_INT 10
30481: PUSH
30482: LD_INT 14
30484: PUSH
30485: LD_INT 20
30487: PUSH
30488: LD_INT 21
30490: PUSH
30491: LD_INT 22
30493: PUSH
30494: LD_INT 25
30496: PUSH
30497: LD_INT 32
30499: PUSH
30500: LD_INT 27
30502: PUSH
30503: LD_INT 36
30505: PUSH
30506: LD_INT 69
30508: PUSH
30509: LD_INT 39
30511: PUSH
30512: LD_INT 34
30514: PUSH
30515: LD_INT 40
30517: PUSH
30518: LD_INT 48
30520: PUSH
30521: LD_INT 49
30523: PUSH
30524: LD_INT 50
30526: PUSH
30527: LD_INT 51
30529: PUSH
30530: LD_INT 52
30532: PUSH
30533: LD_INT 53
30535: PUSH
30536: LD_INT 54
30538: PUSH
30539: LD_INT 55
30541: PUSH
30542: LD_INT 56
30544: PUSH
30545: LD_INT 57
30547: PUSH
30548: LD_INT 58
30550: PUSH
30551: LD_INT 59
30553: PUSH
30554: LD_INT 60
30556: PUSH
30557: LD_INT 61
30559: PUSH
30560: LD_INT 62
30562: PUSH
30563: LD_INT 80
30565: PUSH
30566: LD_INT 82
30568: PUSH
30569: LD_INT 83
30571: PUSH
30572: LD_INT 84
30574: PUSH
30575: LD_INT 85
30577: PUSH
30578: LD_INT 86
30580: PUSH
30581: LD_INT 90
30583: PUSH
30584: LD_INT 93
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: ST_TO_ADDR
30642: GO 31125
30644: LD_INT 2
30646: DOUBLE
30647: EQUAL
30648: IFTRUE 30652
30650: GO 30886
30652: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30653: LD_ADDR_VAR 0 4
30657: PUSH
30658: LD_INT 35
30660: PUSH
30661: LD_INT 45
30663: PUSH
30664: LD_INT 46
30666: PUSH
30667: LD_INT 47
30669: PUSH
30670: LD_INT 82
30672: PUSH
30673: LD_INT 83
30675: PUSH
30676: LD_INT 84
30678: PUSH
30679: LD_INT 85
30681: PUSH
30682: LD_INT 87
30684: PUSH
30685: LD_INT 70
30687: PUSH
30688: LD_INT 1
30690: PUSH
30691: LD_INT 11
30693: PUSH
30694: LD_INT 3
30696: PUSH
30697: LD_INT 4
30699: PUSH
30700: LD_INT 5
30702: PUSH
30703: LD_INT 6
30705: PUSH
30706: LD_INT 15
30708: PUSH
30709: LD_INT 18
30711: PUSH
30712: LD_INT 7
30714: PUSH
30715: LD_INT 17
30717: PUSH
30718: LD_INT 8
30720: PUSH
30721: LD_INT 20
30723: PUSH
30724: LD_INT 21
30726: PUSH
30727: LD_INT 22
30729: PUSH
30730: LD_INT 72
30732: PUSH
30733: LD_INT 26
30735: PUSH
30736: LD_INT 69
30738: PUSH
30739: LD_INT 39
30741: PUSH
30742: LD_INT 40
30744: PUSH
30745: LD_INT 41
30747: PUSH
30748: LD_INT 42
30750: PUSH
30751: LD_INT 43
30753: PUSH
30754: LD_INT 48
30756: PUSH
30757: LD_INT 49
30759: PUSH
30760: LD_INT 50
30762: PUSH
30763: LD_INT 51
30765: PUSH
30766: LD_INT 52
30768: PUSH
30769: LD_INT 53
30771: PUSH
30772: LD_INT 54
30774: PUSH
30775: LD_INT 55
30777: PUSH
30778: LD_INT 56
30780: PUSH
30781: LD_INT 60
30783: PUSH
30784: LD_INT 61
30786: PUSH
30787: LD_INT 62
30789: PUSH
30790: LD_INT 66
30792: PUSH
30793: LD_INT 67
30795: PUSH
30796: LD_INT 68
30798: PUSH
30799: LD_INT 81
30801: PUSH
30802: LD_INT 82
30804: PUSH
30805: LD_INT 83
30807: PUSH
30808: LD_INT 84
30810: PUSH
30811: LD_INT 85
30813: PUSH
30814: LD_INT 87
30816: PUSH
30817: LD_INT 88
30819: PUSH
30820: LD_INT 92
30822: PUSH
30823: LD_INT 94
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: ST_TO_ADDR
30884: GO 31125
30886: LD_INT 3
30888: DOUBLE
30889: EQUAL
30890: IFTRUE 30894
30892: GO 31124
30894: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30895: LD_ADDR_VAR 0 4
30899: PUSH
30900: LD_INT 46
30902: PUSH
30903: LD_INT 47
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 2
30911: PUSH
30912: LD_INT 82
30914: PUSH
30915: LD_INT 83
30917: PUSH
30918: LD_INT 84
30920: PUSH
30921: LD_INT 85
30923: PUSH
30924: LD_INT 86
30926: PUSH
30927: LD_INT 11
30929: PUSH
30930: LD_INT 9
30932: PUSH
30933: LD_INT 20
30935: PUSH
30936: LD_INT 19
30938: PUSH
30939: LD_INT 21
30941: PUSH
30942: LD_INT 24
30944: PUSH
30945: LD_INT 22
30947: PUSH
30948: LD_INT 25
30950: PUSH
30951: LD_INT 28
30953: PUSH
30954: LD_INT 29
30956: PUSH
30957: LD_INT 30
30959: PUSH
30960: LD_INT 31
30962: PUSH
30963: LD_INT 37
30965: PUSH
30966: LD_INT 38
30968: PUSH
30969: LD_INT 32
30971: PUSH
30972: LD_INT 27
30974: PUSH
30975: LD_INT 33
30977: PUSH
30978: LD_INT 69
30980: PUSH
30981: LD_INT 39
30983: PUSH
30984: LD_INT 34
30986: PUSH
30987: LD_INT 40
30989: PUSH
30990: LD_INT 71
30992: PUSH
30993: LD_INT 23
30995: PUSH
30996: LD_INT 44
30998: PUSH
30999: LD_INT 48
31001: PUSH
31002: LD_INT 49
31004: PUSH
31005: LD_INT 50
31007: PUSH
31008: LD_INT 51
31010: PUSH
31011: LD_INT 52
31013: PUSH
31014: LD_INT 53
31016: PUSH
31017: LD_INT 54
31019: PUSH
31020: LD_INT 55
31022: PUSH
31023: LD_INT 56
31025: PUSH
31026: LD_INT 57
31028: PUSH
31029: LD_INT 58
31031: PUSH
31032: LD_INT 59
31034: PUSH
31035: LD_INT 63
31037: PUSH
31038: LD_INT 64
31040: PUSH
31041: LD_INT 65
31043: PUSH
31044: LD_INT 82
31046: PUSH
31047: LD_INT 83
31049: PUSH
31050: LD_INT 84
31052: PUSH
31053: LD_INT 85
31055: PUSH
31056: LD_INT 86
31058: PUSH
31059: LD_INT 89
31061: PUSH
31062: LD_INT 91
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: ST_TO_ADDR
31122: GO 31125
31124: POP
// if state > - 1 and state < 3 then
31125: LD_VAR 0 3
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: GREATER
31134: IFFALSE 31146
31136: PUSH
31137: LD_VAR 0 3
31141: PUSH
31142: LD_INT 3
31144: LESS
31145: AND
31146: IFFALSE 31203
// for i in result do
31148: LD_ADDR_VAR 0 5
31152: PUSH
31153: LD_VAR 0 4
31157: PUSH
31158: FOR_IN
31159: IFFALSE 31201
// if GetTech ( i , side ) <> state then
31161: LD_VAR 0 5
31165: PPUSH
31166: LD_VAR 0 1
31170: PPUSH
31171: CALL_OW 321
31175: PUSH
31176: LD_VAR 0 3
31180: NONEQUAL
31181: IFFALSE 31199
// result := result diff i ;
31183: LD_ADDR_VAR 0 4
31187: PUSH
31188: LD_VAR 0 4
31192: PUSH
31193: LD_VAR 0 5
31197: DIFF
31198: ST_TO_ADDR
31199: GO 31158
31201: POP
31202: POP
// end ;
31203: LD_VAR 0 4
31207: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31208: LD_INT 0
31210: PPUSH
31211: PPUSH
31212: PPUSH
// result := true ;
31213: LD_ADDR_VAR 0 3
31217: PUSH
31218: LD_INT 1
31220: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31221: LD_ADDR_VAR 0 5
31225: PUSH
31226: LD_VAR 0 2
31230: PPUSH
31231: CALL_OW 480
31235: ST_TO_ADDR
// if not tmp then
31236: LD_VAR 0 5
31240: NOT
31241: IFFALSE 31245
// exit ;
31243: GO 31294
// for i in tmp do
31245: LD_ADDR_VAR 0 4
31249: PUSH
31250: LD_VAR 0 5
31254: PUSH
31255: FOR_IN
31256: IFFALSE 31292
// if GetTech ( i , side ) <> state_researched then
31258: LD_VAR 0 4
31262: PPUSH
31263: LD_VAR 0 1
31267: PPUSH
31268: CALL_OW 321
31272: PUSH
31273: LD_INT 2
31275: NONEQUAL
31276: IFFALSE 31290
// begin result := false ;
31278: LD_ADDR_VAR 0 3
31282: PUSH
31283: LD_INT 0
31285: ST_TO_ADDR
// exit ;
31286: POP
31287: POP
31288: GO 31294
// end ;
31290: GO 31255
31292: POP
31293: POP
// end ;
31294: LD_VAR 0 3
31298: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31299: LD_INT 0
31301: PPUSH
31302: PPUSH
31303: PPUSH
31304: PPUSH
31305: PPUSH
31306: PPUSH
31307: PPUSH
31308: PPUSH
31309: PPUSH
31310: PPUSH
31311: PPUSH
31312: PPUSH
31313: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31314: LD_VAR 0 1
31318: NOT
31319: IFTRUE 31336
31321: PUSH
31322: LD_VAR 0 1
31326: PPUSH
31327: CALL_OW 257
31331: PUSH
31332: LD_INT 9
31334: NONEQUAL
31335: OR
31336: IFFALSE 31340
// exit ;
31338: GO 31919
// side := GetSide ( unit ) ;
31340: LD_ADDR_VAR 0 9
31344: PUSH
31345: LD_VAR 0 1
31349: PPUSH
31350: CALL_OW 255
31354: ST_TO_ADDR
// tech_space := tech_spacanom ;
31355: LD_ADDR_VAR 0 12
31359: PUSH
31360: LD_INT 29
31362: ST_TO_ADDR
// tech_time := tech_taurad ;
31363: LD_ADDR_VAR 0 13
31367: PUSH
31368: LD_INT 28
31370: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31371: LD_ADDR_VAR 0 11
31375: PUSH
31376: LD_VAR 0 1
31380: PPUSH
31381: CALL_OW 310
31385: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31386: LD_VAR 0 11
31390: PPUSH
31391: CALL_OW 247
31395: PUSH
31396: LD_INT 2
31398: EQUAL
31399: IFFALSE 31403
// exit ;
31401: GO 31919
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31403: LD_ADDR_VAR 0 8
31407: PUSH
31408: LD_INT 81
31410: PUSH
31411: LD_VAR 0 9
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 3
31422: PUSH
31423: LD_INT 21
31425: PUSH
31426: LD_INT 3
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PPUSH
31441: CALL_OW 69
31445: ST_TO_ADDR
// if not tmp then
31446: LD_VAR 0 8
31450: NOT
31451: IFFALSE 31455
// exit ;
31453: GO 31919
// if in_unit then
31455: LD_VAR 0 11
31459: IFFALSE 31483
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31461: LD_ADDR_VAR 0 10
31465: PUSH
31466: LD_VAR 0 8
31470: PPUSH
31471: LD_VAR 0 11
31475: PPUSH
31476: CALL_OW 74
31480: ST_TO_ADDR
31481: GO 31503
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31483: LD_ADDR_VAR 0 10
31487: PUSH
31488: LD_VAR 0 8
31492: PPUSH
31493: LD_VAR 0 1
31497: PPUSH
31498: CALL_OW 74
31502: ST_TO_ADDR
// if not enemy then
31503: LD_VAR 0 10
31507: NOT
31508: IFFALSE 31512
// exit ;
31510: GO 31919
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31512: LD_VAR 0 11
31516: IFFALSE 31538
31518: PUSH
31519: LD_VAR 0 11
31523: PPUSH
31524: LD_VAR 0 10
31528: PPUSH
31529: CALL_OW 296
31533: PUSH
31534: LD_INT 13
31536: GREATER
31537: AND
31538: IFTRUE 31560
31540: PUSH
31541: LD_VAR 0 1
31545: PPUSH
31546: LD_VAR 0 10
31550: PPUSH
31551: CALL_OW 296
31555: PUSH
31556: LD_INT 12
31558: GREATER
31559: OR
31560: IFFALSE 31564
// exit ;
31562: GO 31919
// missile := [ 1 ] ;
31564: LD_ADDR_VAR 0 14
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: EMPTY
31573: LIST
31574: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31575: LD_VAR 0 9
31579: PPUSH
31580: LD_VAR 0 12
31584: PPUSH
31585: CALL_OW 325
31589: IFFALSE 31618
// missile := Replace ( missile , missile + 1 , 2 ) ;
31591: LD_ADDR_VAR 0 14
31595: PUSH
31596: LD_VAR 0 14
31600: PPUSH
31601: LD_VAR 0 14
31605: PUSH
31606: LD_INT 1
31608: PLUS
31609: PPUSH
31610: LD_INT 2
31612: PPUSH
31613: CALL_OW 1
31617: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31618: LD_VAR 0 9
31622: PPUSH
31623: LD_VAR 0 13
31627: PPUSH
31628: CALL_OW 325
31632: IFFALSE 31656
31634: PUSH
31635: LD_VAR 0 10
31639: PPUSH
31640: CALL_OW 255
31644: PPUSH
31645: LD_VAR 0 13
31649: PPUSH
31650: CALL_OW 325
31654: NOT
31655: AND
31656: IFFALSE 31685
// missile := Replace ( missile , missile + 1 , 3 ) ;
31658: LD_ADDR_VAR 0 14
31662: PUSH
31663: LD_VAR 0 14
31667: PPUSH
31668: LD_VAR 0 14
31672: PUSH
31673: LD_INT 1
31675: PLUS
31676: PPUSH
31677: LD_INT 3
31679: PPUSH
31680: CALL_OW 1
31684: ST_TO_ADDR
// if missile < 2 then
31685: LD_VAR 0 14
31689: PUSH
31690: LD_INT 2
31692: LESS
31693: IFFALSE 31697
// exit ;
31695: GO 31919
// x := GetX ( enemy ) ;
31697: LD_ADDR_VAR 0 4
31701: PUSH
31702: LD_VAR 0 10
31706: PPUSH
31707: CALL_OW 250
31711: ST_TO_ADDR
// y := GetY ( enemy ) ;
31712: LD_ADDR_VAR 0 5
31716: PUSH
31717: LD_VAR 0 10
31721: PPUSH
31722: CALL_OW 251
31726: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31727: LD_ADDR_VAR 0 6
31731: PUSH
31732: LD_VAR 0 4
31736: PUSH
31737: LD_INT 1
31739: NEG
31740: PPUSH
31741: LD_INT 1
31743: PPUSH
31744: CALL_OW 12
31748: PLUS
31749: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31750: LD_ADDR_VAR 0 7
31754: PUSH
31755: LD_VAR 0 5
31759: PUSH
31760: LD_INT 1
31762: NEG
31763: PPUSH
31764: LD_INT 1
31766: PPUSH
31767: CALL_OW 12
31771: PLUS
31772: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31773: LD_VAR 0 6
31777: PPUSH
31778: LD_VAR 0 7
31782: PPUSH
31783: CALL_OW 488
31787: NOT
31788: IFFALSE 31810
// begin _x := x ;
31790: LD_ADDR_VAR 0 6
31794: PUSH
31795: LD_VAR 0 4
31799: ST_TO_ADDR
// _y := y ;
31800: LD_ADDR_VAR 0 7
31804: PUSH
31805: LD_VAR 0 5
31809: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31810: LD_ADDR_VAR 0 3
31814: PUSH
31815: LD_INT 1
31817: PPUSH
31818: LD_VAR 0 14
31822: PPUSH
31823: CALL_OW 12
31827: ST_TO_ADDR
// case i of 1 :
31828: LD_VAR 0 3
31832: PUSH
31833: LD_INT 1
31835: DOUBLE
31836: EQUAL
31837: IFTRUE 31841
31839: GO 31858
31841: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31842: LD_VAR 0 1
31846: PPUSH
31847: LD_VAR 0 10
31851: PPUSH
31852: CALL_OW 115
31856: GO 31919
31858: LD_INT 2
31860: DOUBLE
31861: EQUAL
31862: IFTRUE 31866
31864: GO 31888
31866: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31867: LD_VAR 0 1
31871: PPUSH
31872: LD_VAR 0 6
31876: PPUSH
31877: LD_VAR 0 7
31881: PPUSH
31882: CALL_OW 153
31886: GO 31919
31888: LD_INT 3
31890: DOUBLE
31891: EQUAL
31892: IFTRUE 31896
31894: GO 31918
31896: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31897: LD_VAR 0 1
31901: PPUSH
31902: LD_VAR 0 6
31906: PPUSH
31907: LD_VAR 0 7
31911: PPUSH
31912: CALL_OW 154
31916: GO 31919
31918: POP
// end ;
31919: LD_VAR 0 2
31923: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31924: LD_INT 0
31926: PPUSH
31927: PPUSH
31928: PPUSH
31929: PPUSH
31930: PPUSH
31931: PPUSH
// if not unit or not building then
31932: LD_VAR 0 1
31936: NOT
31937: IFTRUE 31946
31939: PUSH
31940: LD_VAR 0 2
31944: NOT
31945: OR
31946: IFFALSE 31950
// exit ;
31948: GO 32108
// x := GetX ( building ) ;
31950: LD_ADDR_VAR 0 5
31954: PUSH
31955: LD_VAR 0 2
31959: PPUSH
31960: CALL_OW 250
31964: ST_TO_ADDR
// y := GetY ( building ) ;
31965: LD_ADDR_VAR 0 6
31969: PUSH
31970: LD_VAR 0 2
31974: PPUSH
31975: CALL_OW 251
31979: ST_TO_ADDR
// for i := 0 to 5 do
31980: LD_ADDR_VAR 0 4
31984: PUSH
31985: DOUBLE
31986: LD_INT 0
31988: DEC
31989: ST_TO_ADDR
31990: LD_INT 5
31992: PUSH
31993: FOR_TO
31994: IFFALSE 32106
// begin _x := ShiftX ( x , i , 3 ) ;
31996: LD_ADDR_VAR 0 7
32000: PUSH
32001: LD_VAR 0 5
32005: PPUSH
32006: LD_VAR 0 4
32010: PPUSH
32011: LD_INT 3
32013: PPUSH
32014: CALL_OW 272
32018: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32019: LD_ADDR_VAR 0 8
32023: PUSH
32024: LD_VAR 0 6
32028: PPUSH
32029: LD_VAR 0 4
32033: PPUSH
32034: LD_INT 3
32036: PPUSH
32037: CALL_OW 273
32041: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32042: LD_VAR 0 7
32046: PPUSH
32047: LD_VAR 0 8
32051: PPUSH
32052: CALL_OW 488
32056: NOT
32057: IFFALSE 32061
// continue ;
32059: GO 31993
// if HexInfo ( _x , _y ) = 0 then
32061: LD_VAR 0 7
32065: PPUSH
32066: LD_VAR 0 8
32070: PPUSH
32071: CALL_OW 428
32075: PUSH
32076: LD_INT 0
32078: EQUAL
32079: IFFALSE 32104
// begin ComMoveXY ( unit , _x , _y ) ;
32081: LD_VAR 0 1
32085: PPUSH
32086: LD_VAR 0 7
32090: PPUSH
32091: LD_VAR 0 8
32095: PPUSH
32096: CALL_OW 111
// exit ;
32100: POP
32101: POP
32102: GO 32108
// end ; end ;
32104: GO 31993
32106: POP
32107: POP
// end ;
32108: LD_VAR 0 3
32112: RET
// export function ScanBase ( side , base_area ) ; begin
32113: LD_INT 0
32115: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32116: LD_ADDR_VAR 0 3
32120: PUSH
32121: LD_VAR 0 2
32125: PPUSH
32126: LD_INT 81
32128: PUSH
32129: LD_VAR 0 1
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PPUSH
32138: CALL_OW 70
32142: ST_TO_ADDR
// end ;
32143: LD_VAR 0 3
32147: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32148: LD_INT 0
32150: PPUSH
32151: PPUSH
32152: PPUSH
32153: PPUSH
// result := false ;
32154: LD_ADDR_VAR 0 2
32158: PUSH
32159: LD_INT 0
32161: ST_TO_ADDR
// side := GetSide ( unit ) ;
32162: LD_ADDR_VAR 0 3
32166: PUSH
32167: LD_VAR 0 1
32171: PPUSH
32172: CALL_OW 255
32176: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32177: LD_ADDR_VAR 0 4
32181: PUSH
32182: LD_VAR 0 1
32186: PPUSH
32187: CALL_OW 248
32191: ST_TO_ADDR
// case nat of 1 :
32192: LD_VAR 0 4
32196: PUSH
32197: LD_INT 1
32199: DOUBLE
32200: EQUAL
32201: IFTRUE 32205
32203: GO 32216
32205: POP
// tech := tech_lassight ; 2 :
32206: LD_ADDR_VAR 0 5
32210: PUSH
32211: LD_INT 12
32213: ST_TO_ADDR
32214: GO 32255
32216: LD_INT 2
32218: DOUBLE
32219: EQUAL
32220: IFTRUE 32224
32222: GO 32235
32224: POP
// tech := tech_mortar ; 3 :
32225: LD_ADDR_VAR 0 5
32229: PUSH
32230: LD_INT 41
32232: ST_TO_ADDR
32233: GO 32255
32235: LD_INT 3
32237: DOUBLE
32238: EQUAL
32239: IFTRUE 32243
32241: GO 32254
32243: POP
// tech := tech_bazooka ; end ;
32244: LD_ADDR_VAR 0 5
32248: PUSH
32249: LD_INT 44
32251: ST_TO_ADDR
32252: GO 32255
32254: POP
// if Researched ( side , tech ) then
32255: LD_VAR 0 3
32259: PPUSH
32260: LD_VAR 0 5
32264: PPUSH
32265: CALL_OW 325
32269: IFFALSE 32296
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32271: LD_ADDR_VAR 0 2
32275: PUSH
32276: LD_INT 5
32278: PUSH
32279: LD_INT 8
32281: PUSH
32282: LD_INT 9
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: PUSH
32290: LD_VAR 0 4
32294: ARRAY
32295: ST_TO_ADDR
// end ;
32296: LD_VAR 0 2
32300: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32301: LD_INT 0
32303: PPUSH
32304: PPUSH
32305: PPUSH
// if not mines then
32306: LD_VAR 0 2
32310: NOT
32311: IFFALSE 32315
// exit ;
32313: GO 32459
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32315: LD_ADDR_VAR 0 5
32319: PUSH
32320: LD_INT 81
32322: PUSH
32323: LD_VAR 0 1
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 3
32334: PUSH
32335: LD_INT 21
32337: PUSH
32338: LD_INT 3
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PPUSH
32353: CALL_OW 69
32357: ST_TO_ADDR
// for i in mines do
32358: LD_ADDR_VAR 0 4
32362: PUSH
32363: LD_VAR 0 2
32367: PUSH
32368: FOR_IN
32369: IFFALSE 32457
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32371: LD_VAR 0 4
32375: PUSH
32376: LD_INT 1
32378: ARRAY
32379: PPUSH
32380: LD_VAR 0 4
32384: PUSH
32385: LD_INT 2
32387: ARRAY
32388: PPUSH
32389: CALL_OW 458
32393: NOT
32394: IFFALSE 32398
// continue ;
32396: GO 32368
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32398: LD_VAR 0 4
32402: PUSH
32403: LD_INT 1
32405: ARRAY
32406: PPUSH
32407: LD_VAR 0 4
32411: PUSH
32412: LD_INT 2
32414: ARRAY
32415: PPUSH
32416: CALL_OW 428
32420: PUSH
32421: LD_VAR 0 5
32425: IN
32426: IFFALSE 32455
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32428: LD_VAR 0 4
32432: PUSH
32433: LD_INT 1
32435: ARRAY
32436: PPUSH
32437: LD_VAR 0 4
32441: PUSH
32442: LD_INT 2
32444: ARRAY
32445: PPUSH
32446: LD_VAR 0 1
32450: PPUSH
32451: CALL_OW 456
// end ;
32455: GO 32368
32457: POP
32458: POP
// end ;
32459: LD_VAR 0 3
32463: RET
// export function Count ( array ) ; begin
32464: LD_INT 0
32466: PPUSH
// result := array + 0 ;
32467: LD_ADDR_VAR 0 2
32471: PUSH
32472: LD_VAR 0 1
32476: PUSH
32477: LD_INT 0
32479: PLUS
32480: ST_TO_ADDR
// end ;
32481: LD_VAR 0 2
32485: RET
// export function IsEmpty ( building ) ; begin
32486: LD_INT 0
32488: PPUSH
// if not building then
32489: LD_VAR 0 1
32493: NOT
32494: IFFALSE 32498
// exit ;
32496: GO 32541
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32498: LD_ADDR_VAR 0 2
32502: PUSH
32503: LD_VAR 0 1
32507: PUSH
32508: LD_INT 22
32510: PUSH
32511: LD_VAR 0 1
32515: PPUSH
32516: CALL_OW 255
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 58
32527: PUSH
32528: EMPTY
32529: LIST
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PPUSH
32535: CALL_OW 69
32539: IN
32540: ST_TO_ADDR
// end ;
32541: LD_VAR 0 2
32545: RET
// export function IsNotFull ( building ) ; var places ; begin
32546: LD_INT 0
32548: PPUSH
32549: PPUSH
// if not building then
32550: LD_VAR 0 1
32554: NOT
32555: IFFALSE 32559
// exit ;
32557: GO 32587
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32559: LD_ADDR_VAR 0 2
32563: PUSH
32564: LD_VAR 0 1
32568: PPUSH
32569: LD_INT 3
32571: PUSH
32572: LD_INT 62
32574: PUSH
32575: EMPTY
32576: LIST
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PPUSH
32582: CALL_OW 72
32586: ST_TO_ADDR
// end ;
32587: LD_VAR 0 2
32591: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32592: LD_INT 0
32594: PPUSH
32595: PPUSH
32596: PPUSH
32597: PPUSH
// tmp := [ ] ;
32598: LD_ADDR_VAR 0 3
32602: PUSH
32603: EMPTY
32604: ST_TO_ADDR
// list := [ ] ;
32605: LD_ADDR_VAR 0 5
32609: PUSH
32610: EMPTY
32611: ST_TO_ADDR
// for i = 16 to 25 do
32612: LD_ADDR_VAR 0 4
32616: PUSH
32617: DOUBLE
32618: LD_INT 16
32620: DEC
32621: ST_TO_ADDR
32622: LD_INT 25
32624: PUSH
32625: FOR_TO
32626: IFFALSE 32699
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32628: LD_ADDR_VAR 0 3
32632: PUSH
32633: LD_VAR 0 3
32637: PUSH
32638: LD_INT 22
32640: PUSH
32641: LD_VAR 0 1
32645: PPUSH
32646: CALL_OW 255
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 91
32657: PUSH
32658: LD_VAR 0 1
32662: PUSH
32663: LD_INT 6
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 30
32673: PUSH
32674: LD_VAR 0 4
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: LIST
32687: PUSH
32688: EMPTY
32689: LIST
32690: PPUSH
32691: CALL_OW 69
32695: ADD
32696: ST_TO_ADDR
32697: GO 32625
32699: POP
32700: POP
// for i = 1 to tmp do
32701: LD_ADDR_VAR 0 4
32705: PUSH
32706: DOUBLE
32707: LD_INT 1
32709: DEC
32710: ST_TO_ADDR
32711: LD_VAR 0 3
32715: PUSH
32716: FOR_TO
32717: IFFALSE 32805
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32719: LD_ADDR_VAR 0 5
32723: PUSH
32724: LD_VAR 0 5
32728: PUSH
32729: LD_VAR 0 3
32733: PUSH
32734: LD_VAR 0 4
32738: ARRAY
32739: PPUSH
32740: CALL_OW 266
32744: PUSH
32745: LD_VAR 0 3
32749: PUSH
32750: LD_VAR 0 4
32754: ARRAY
32755: PPUSH
32756: CALL_OW 250
32760: PUSH
32761: LD_VAR 0 3
32765: PUSH
32766: LD_VAR 0 4
32770: ARRAY
32771: PPUSH
32772: CALL_OW 251
32776: PUSH
32777: LD_VAR 0 3
32781: PUSH
32782: LD_VAR 0 4
32786: ARRAY
32787: PPUSH
32788: CALL_OW 254
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: PUSH
32799: EMPTY
32800: LIST
32801: ADD
32802: ST_TO_ADDR
32803: GO 32716
32805: POP
32806: POP
// result := list ;
32807: LD_ADDR_VAR 0 2
32811: PUSH
32812: LD_VAR 0 5
32816: ST_TO_ADDR
// end ;
32817: LD_VAR 0 2
32821: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32822: LD_INT 0
32824: PPUSH
32825: PPUSH
32826: PPUSH
32827: PPUSH
32828: PPUSH
32829: PPUSH
32830: PPUSH
// if not factory then
32831: LD_VAR 0 1
32835: NOT
32836: IFFALSE 32840
// exit ;
32838: GO 33443
// if control = control_apeman then
32840: LD_VAR 0 4
32844: PUSH
32845: LD_INT 5
32847: EQUAL
32848: IFFALSE 32957
// begin tmp := UnitsInside ( factory ) ;
32850: LD_ADDR_VAR 0 8
32854: PUSH
32855: LD_VAR 0 1
32859: PPUSH
32860: CALL_OW 313
32864: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32865: LD_VAR 0 8
32869: PPUSH
32870: LD_INT 25
32872: PUSH
32873: LD_INT 12
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PPUSH
32880: CALL_OW 72
32884: NOT
32885: IFFALSE 32895
// control := control_manual ;
32887: LD_ADDR_VAR 0 4
32891: PUSH
32892: LD_INT 1
32894: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32895: LD_ADDR_VAR 0 8
32899: PUSH
32900: LD_VAR 0 1
32904: PPUSH
32905: CALL 32592 0 1
32909: ST_TO_ADDR
// if tmp then
32910: LD_VAR 0 8
32914: IFFALSE 32957
// begin for i in tmp do
32916: LD_ADDR_VAR 0 7
32920: PUSH
32921: LD_VAR 0 8
32925: PUSH
32926: FOR_IN
32927: IFFALSE 32955
// if i [ 1 ] = b_ext_radio then
32929: LD_VAR 0 7
32933: PUSH
32934: LD_INT 1
32936: ARRAY
32937: PUSH
32938: LD_INT 22
32940: EQUAL
32941: IFFALSE 32953
// begin control := control_remote ;
32943: LD_ADDR_VAR 0 4
32947: PUSH
32948: LD_INT 2
32950: ST_TO_ADDR
// break ;
32951: GO 32955
// end ;
32953: GO 32926
32955: POP
32956: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32957: LD_VAR 0 1
32961: PPUSH
32962: LD_VAR 0 2
32966: PPUSH
32967: LD_VAR 0 3
32971: PPUSH
32972: LD_VAR 0 4
32976: PPUSH
32977: LD_VAR 0 5
32981: PPUSH
32982: CALL_OW 448
32986: IFFALSE 33021
// begin result := [ chassis , engine , control , weapon ] ;
32988: LD_ADDR_VAR 0 6
32992: PUSH
32993: LD_VAR 0 2
32997: PUSH
32998: LD_VAR 0 3
33002: PUSH
33003: LD_VAR 0 4
33007: PUSH
33008: LD_VAR 0 5
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: ST_TO_ADDR
// exit ;
33019: GO 33443
// end ; _chassis := AvailableChassisList ( factory ) ;
33021: LD_ADDR_VAR 0 9
33025: PUSH
33026: LD_VAR 0 1
33030: PPUSH
33031: CALL_OW 475
33035: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33036: LD_ADDR_VAR 0 11
33040: PUSH
33041: LD_VAR 0 1
33045: PPUSH
33046: CALL_OW 476
33050: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33051: LD_ADDR_VAR 0 12
33055: PUSH
33056: LD_VAR 0 1
33060: PPUSH
33061: CALL_OW 477
33065: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33066: LD_ADDR_VAR 0 10
33070: PUSH
33071: LD_VAR 0 1
33075: PPUSH
33076: CALL_OW 478
33080: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33081: LD_VAR 0 9
33085: NOT
33086: IFTRUE 33095
33088: PUSH
33089: LD_VAR 0 11
33093: NOT
33094: OR
33095: IFTRUE 33104
33097: PUSH
33098: LD_VAR 0 12
33102: NOT
33103: OR
33104: IFTRUE 33113
33106: PUSH
33107: LD_VAR 0 10
33111: NOT
33112: OR
33113: IFFALSE 33148
// begin result := [ chassis , engine , control , weapon ] ;
33115: LD_ADDR_VAR 0 6
33119: PUSH
33120: LD_VAR 0 2
33124: PUSH
33125: LD_VAR 0 3
33129: PUSH
33130: LD_VAR 0 4
33134: PUSH
33135: LD_VAR 0 5
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: ST_TO_ADDR
// exit ;
33146: GO 33443
// end ; if not chassis in _chassis then
33148: LD_VAR 0 2
33152: PUSH
33153: LD_VAR 0 9
33157: IN
33158: NOT
33159: IFFALSE 33185
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33161: LD_ADDR_VAR 0 2
33165: PUSH
33166: LD_VAR 0 9
33170: PUSH
33171: LD_INT 1
33173: PPUSH
33174: LD_VAR 0 9
33178: PPUSH
33179: CALL_OW 12
33183: ARRAY
33184: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33185: LD_VAR 0 2
33189: PPUSH
33190: LD_VAR 0 3
33194: PPUSH
33195: CALL 33448 0 2
33199: NOT
33200: IFFALSE 33261
// repeat engine := _engine [ 1 ] ;
33202: LD_ADDR_VAR 0 3
33206: PUSH
33207: LD_VAR 0 11
33211: PUSH
33212: LD_INT 1
33214: ARRAY
33215: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33216: LD_ADDR_VAR 0 11
33220: PUSH
33221: LD_VAR 0 11
33225: PPUSH
33226: LD_INT 1
33228: PPUSH
33229: CALL_OW 3
33233: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33234: LD_VAR 0 2
33238: PPUSH
33239: LD_VAR 0 3
33243: PPUSH
33244: CALL 33448 0 2
33248: IFTRUE 33259
33250: PUSH
33251: LD_VAR 0 11
33255: PUSH
33256: EMPTY
33257: EQUAL
33258: OR
33259: IFFALSE 33202
// if not control in _control then
33261: LD_VAR 0 4
33265: PUSH
33266: LD_VAR 0 12
33270: IN
33271: NOT
33272: IFFALSE 33298
// control := _control [ rand ( 1 , _control ) ] ;
33274: LD_ADDR_VAR 0 4
33278: PUSH
33279: LD_VAR 0 12
33283: PUSH
33284: LD_INT 1
33286: PPUSH
33287: LD_VAR 0 12
33291: PPUSH
33292: CALL_OW 12
33296: ARRAY
33297: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33298: LD_VAR 0 2
33302: PPUSH
33303: LD_VAR 0 5
33307: PPUSH
33308: CALL 33670 0 2
33312: NOT
33313: IFFALSE 33374
// repeat weapon := _weapon [ 1 ] ;
33315: LD_ADDR_VAR 0 5
33319: PUSH
33320: LD_VAR 0 10
33324: PUSH
33325: LD_INT 1
33327: ARRAY
33328: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33329: LD_ADDR_VAR 0 10
33333: PUSH
33334: LD_VAR 0 10
33338: PPUSH
33339: LD_INT 1
33341: PPUSH
33342: CALL_OW 3
33346: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33347: LD_VAR 0 2
33351: PPUSH
33352: LD_VAR 0 5
33356: PPUSH
33357: CALL 33670 0 2
33361: IFTRUE 33372
33363: PUSH
33364: LD_VAR 0 10
33368: PUSH
33369: EMPTY
33370: EQUAL
33371: OR
33372: IFFALSE 33315
// result := [ ] ;
33374: LD_ADDR_VAR 0 6
33378: PUSH
33379: EMPTY
33380: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33381: LD_VAR 0 1
33385: PPUSH
33386: LD_VAR 0 2
33390: PPUSH
33391: LD_VAR 0 3
33395: PPUSH
33396: LD_VAR 0 4
33400: PPUSH
33401: LD_VAR 0 5
33405: PPUSH
33406: CALL_OW 448
33410: IFFALSE 33443
// result := [ chassis , engine , control , weapon ] ;
33412: LD_ADDR_VAR 0 6
33416: PUSH
33417: LD_VAR 0 2
33421: PUSH
33422: LD_VAR 0 3
33426: PUSH
33427: LD_VAR 0 4
33431: PUSH
33432: LD_VAR 0 5
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: ST_TO_ADDR
// end ;
33443: LD_VAR 0 6
33447: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33448: LD_INT 0
33450: PPUSH
// if not chassis or not engine then
33451: LD_VAR 0 1
33455: NOT
33456: IFTRUE 33465
33458: PUSH
33459: LD_VAR 0 2
33463: NOT
33464: OR
33465: IFFALSE 33469
// exit ;
33467: GO 33665
// case engine of engine_solar :
33469: LD_VAR 0 2
33473: PUSH
33474: LD_INT 2
33476: DOUBLE
33477: EQUAL
33478: IFTRUE 33482
33480: GO 33520
33482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33483: LD_ADDR_VAR 0 3
33487: PUSH
33488: LD_INT 11
33490: PUSH
33491: LD_INT 12
33493: PUSH
33494: LD_INT 13
33496: PUSH
33497: LD_INT 14
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 2
33505: PUSH
33506: LD_INT 3
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
33518: GO 33649
33520: LD_INT 1
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33528
33526: GO 33590
33528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33529: LD_ADDR_VAR 0 3
33533: PUSH
33534: LD_INT 11
33536: PUSH
33537: LD_INT 12
33539: PUSH
33540: LD_INT 13
33542: PUSH
33543: LD_INT 14
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: LD_INT 4
33557: PUSH
33558: LD_INT 5
33560: PUSH
33561: LD_INT 21
33563: PUSH
33564: LD_INT 23
33566: PUSH
33567: LD_INT 22
33569: PUSH
33570: LD_INT 24
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: ST_TO_ADDR
33588: GO 33649
33590: LD_INT 3
33592: DOUBLE
33593: EQUAL
33594: IFTRUE 33598
33596: GO 33648
33598: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33599: LD_ADDR_VAR 0 3
33603: PUSH
33604: LD_INT 13
33606: PUSH
33607: LD_INT 14
33609: PUSH
33610: LD_INT 2
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: LD_INT 4
33618: PUSH
33619: LD_INT 5
33621: PUSH
33622: LD_INT 21
33624: PUSH
33625: LD_INT 22
33627: PUSH
33628: LD_INT 23
33630: PUSH
33631: LD_INT 24
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: ST_TO_ADDR
33646: GO 33649
33648: POP
// result := ( chassis in result ) ;
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: LD_VAR 0 1
33658: PUSH
33659: LD_VAR 0 3
33663: IN
33664: ST_TO_ADDR
// end ;
33665: LD_VAR 0 3
33669: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33670: LD_INT 0
33672: PPUSH
// if not chassis or not weapon then
33673: LD_VAR 0 1
33677: NOT
33678: IFTRUE 33687
33680: PUSH
33681: LD_VAR 0 2
33685: NOT
33686: OR
33687: IFFALSE 33691
// exit ;
33689: GO 34785
// case weapon of us_machine_gun :
33691: LD_VAR 0 2
33695: PUSH
33696: LD_INT 2
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33704
33702: GO 33734
33704: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33705: LD_ADDR_VAR 0 3
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: LD_INT 2
33715: PUSH
33716: LD_INT 3
33718: PUSH
33719: LD_INT 4
33721: PUSH
33722: LD_INT 5
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: ST_TO_ADDR
33732: GO 34769
33734: LD_INT 3
33736: DOUBLE
33737: EQUAL
33738: IFTRUE 33742
33740: GO 33772
33742: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33743: LD_ADDR_VAR 0 3
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: LD_INT 2
33753: PUSH
33754: LD_INT 3
33756: PUSH
33757: LD_INT 4
33759: PUSH
33760: LD_INT 5
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: ST_TO_ADDR
33770: GO 34769
33772: LD_INT 11
33774: DOUBLE
33775: EQUAL
33776: IFTRUE 33780
33778: GO 33810
33780: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33781: LD_ADDR_VAR 0 3
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: LD_INT 2
33791: PUSH
33792: LD_INT 3
33794: PUSH
33795: LD_INT 4
33797: PUSH
33798: LD_INT 5
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: ST_TO_ADDR
33808: GO 34769
33810: LD_INT 4
33812: DOUBLE
33813: EQUAL
33814: IFTRUE 33818
33816: GO 33844
33818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33819: LD_ADDR_VAR 0 3
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: LD_INT 3
33829: PUSH
33830: LD_INT 4
33832: PUSH
33833: LD_INT 5
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: ST_TO_ADDR
33842: GO 34769
33844: LD_INT 5
33846: DOUBLE
33847: EQUAL
33848: IFTRUE 33852
33850: GO 33878
33852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33853: LD_ADDR_VAR 0 3
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: LD_INT 3
33863: PUSH
33864: LD_INT 4
33866: PUSH
33867: LD_INT 5
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: ST_TO_ADDR
33876: GO 34769
33878: LD_INT 9
33880: DOUBLE
33881: EQUAL
33882: IFTRUE 33886
33884: GO 33912
33886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33887: LD_ADDR_VAR 0 3
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: LD_INT 3
33897: PUSH
33898: LD_INT 4
33900: PUSH
33901: LD_INT 5
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
33910: GO 34769
33912: LD_INT 7
33914: DOUBLE
33915: EQUAL
33916: IFTRUE 33920
33918: GO 33946
33920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33921: LD_ADDR_VAR 0 3
33925: PUSH
33926: LD_INT 2
33928: PUSH
33929: LD_INT 3
33931: PUSH
33932: LD_INT 4
33934: PUSH
33935: LD_INT 5
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: ST_TO_ADDR
33944: GO 34769
33946: LD_INT 12
33948: DOUBLE
33949: EQUAL
33950: IFTRUE 33954
33952: GO 33980
33954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33955: LD_ADDR_VAR 0 3
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: LD_INT 3
33965: PUSH
33966: LD_INT 4
33968: PUSH
33969: LD_INT 5
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: ST_TO_ADDR
33978: GO 34769
33980: LD_INT 13
33982: DOUBLE
33983: EQUAL
33984: IFTRUE 33988
33986: GO 34014
33988: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33989: LD_ADDR_VAR 0 3
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: LD_INT 3
33999: PUSH
34000: LD_INT 4
34002: PUSH
34003: LD_INT 5
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: ST_TO_ADDR
34012: GO 34769
34014: LD_INT 14
34016: DOUBLE
34017: EQUAL
34018: IFTRUE 34022
34020: GO 34040
34022: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34023: LD_ADDR_VAR 0 3
34027: PUSH
34028: LD_INT 4
34030: PUSH
34031: LD_INT 5
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: ST_TO_ADDR
34038: GO 34769
34040: LD_INT 6
34042: DOUBLE
34043: EQUAL
34044: IFTRUE 34048
34046: GO 34066
34048: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34049: LD_ADDR_VAR 0 3
34053: PUSH
34054: LD_INT 4
34056: PUSH
34057: LD_INT 5
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: ST_TO_ADDR
34064: GO 34769
34066: LD_INT 10
34068: DOUBLE
34069: EQUAL
34070: IFTRUE 34074
34072: GO 34092
34074: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34075: LD_ADDR_VAR 0 3
34079: PUSH
34080: LD_INT 4
34082: PUSH
34083: LD_INT 5
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: ST_TO_ADDR
34090: GO 34769
34092: LD_INT 22
34094: DOUBLE
34095: EQUAL
34096: IFTRUE 34100
34098: GO 34126
34100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34101: LD_ADDR_VAR 0 3
34105: PUSH
34106: LD_INT 11
34108: PUSH
34109: LD_INT 12
34111: PUSH
34112: LD_INT 13
34114: PUSH
34115: LD_INT 14
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: ST_TO_ADDR
34124: GO 34769
34126: LD_INT 23
34128: DOUBLE
34129: EQUAL
34130: IFTRUE 34134
34132: GO 34160
34134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34135: LD_ADDR_VAR 0 3
34139: PUSH
34140: LD_INT 11
34142: PUSH
34143: LD_INT 12
34145: PUSH
34146: LD_INT 13
34148: PUSH
34149: LD_INT 14
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: ST_TO_ADDR
34158: GO 34769
34160: LD_INT 24
34162: DOUBLE
34163: EQUAL
34164: IFTRUE 34168
34166: GO 34194
34168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34169: LD_ADDR_VAR 0 3
34173: PUSH
34174: LD_INT 11
34176: PUSH
34177: LD_INT 12
34179: PUSH
34180: LD_INT 13
34182: PUSH
34183: LD_INT 14
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: ST_TO_ADDR
34192: GO 34769
34194: LD_INT 30
34196: DOUBLE
34197: EQUAL
34198: IFTRUE 34202
34200: GO 34228
34202: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34203: LD_ADDR_VAR 0 3
34207: PUSH
34208: LD_INT 11
34210: PUSH
34211: LD_INT 12
34213: PUSH
34214: LD_INT 13
34216: PUSH
34217: LD_INT 14
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: ST_TO_ADDR
34226: GO 34769
34228: LD_INT 25
34230: DOUBLE
34231: EQUAL
34232: IFTRUE 34236
34234: GO 34254
34236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34237: LD_ADDR_VAR 0 3
34241: PUSH
34242: LD_INT 13
34244: PUSH
34245: LD_INT 14
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: ST_TO_ADDR
34252: GO 34769
34254: LD_INT 27
34256: DOUBLE
34257: EQUAL
34258: IFTRUE 34262
34260: GO 34280
34262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34263: LD_ADDR_VAR 0 3
34267: PUSH
34268: LD_INT 13
34270: PUSH
34271: LD_INT 14
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: ST_TO_ADDR
34278: GO 34769
34280: LD_INT 92
34282: DOUBLE
34283: EQUAL
34284: IFTRUE 34288
34286: GO 34314
34288: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34289: LD_ADDR_VAR 0 3
34293: PUSH
34294: LD_INT 11
34296: PUSH
34297: LD_INT 12
34299: PUSH
34300: LD_INT 13
34302: PUSH
34303: LD_INT 14
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: ST_TO_ADDR
34312: GO 34769
34314: LD_INT 28
34316: DOUBLE
34317: EQUAL
34318: IFTRUE 34322
34320: GO 34340
34322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34323: LD_ADDR_VAR 0 3
34327: PUSH
34328: LD_INT 13
34330: PUSH
34331: LD_INT 14
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: ST_TO_ADDR
34338: GO 34769
34340: LD_INT 29
34342: DOUBLE
34343: EQUAL
34344: IFTRUE 34348
34346: GO 34366
34348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34349: LD_ADDR_VAR 0 3
34353: PUSH
34354: LD_INT 13
34356: PUSH
34357: LD_INT 14
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: ST_TO_ADDR
34364: GO 34769
34366: LD_INT 31
34368: DOUBLE
34369: EQUAL
34370: IFTRUE 34374
34372: GO 34392
34374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34375: LD_ADDR_VAR 0 3
34379: PUSH
34380: LD_INT 13
34382: PUSH
34383: LD_INT 14
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: ST_TO_ADDR
34390: GO 34769
34392: LD_INT 26
34394: DOUBLE
34395: EQUAL
34396: IFTRUE 34400
34398: GO 34418
34400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34401: LD_ADDR_VAR 0 3
34405: PUSH
34406: LD_INT 13
34408: PUSH
34409: LD_INT 14
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: ST_TO_ADDR
34416: GO 34769
34418: LD_INT 42
34420: DOUBLE
34421: EQUAL
34422: IFTRUE 34426
34424: GO 34452
34426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34427: LD_ADDR_VAR 0 3
34431: PUSH
34432: LD_INT 21
34434: PUSH
34435: LD_INT 22
34437: PUSH
34438: LD_INT 23
34440: PUSH
34441: LD_INT 24
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: ST_TO_ADDR
34450: GO 34769
34452: LD_INT 43
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34460
34458: GO 34486
34460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_INT 21
34468: PUSH
34469: LD_INT 22
34471: PUSH
34472: LD_INT 23
34474: PUSH
34475: LD_INT 24
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: ST_TO_ADDR
34484: GO 34769
34486: LD_INT 44
34488: DOUBLE
34489: EQUAL
34490: IFTRUE 34494
34492: GO 34520
34494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34495: LD_ADDR_VAR 0 3
34499: PUSH
34500: LD_INT 21
34502: PUSH
34503: LD_INT 22
34505: PUSH
34506: LD_INT 23
34508: PUSH
34509: LD_INT 24
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: ST_TO_ADDR
34518: GO 34769
34520: LD_INT 45
34522: DOUBLE
34523: EQUAL
34524: IFTRUE 34528
34526: GO 34554
34528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34529: LD_ADDR_VAR 0 3
34533: PUSH
34534: LD_INT 21
34536: PUSH
34537: LD_INT 22
34539: PUSH
34540: LD_INT 23
34542: PUSH
34543: LD_INT 24
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: ST_TO_ADDR
34552: GO 34769
34554: LD_INT 49
34556: DOUBLE
34557: EQUAL
34558: IFTRUE 34562
34560: GO 34588
34562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34563: LD_ADDR_VAR 0 3
34567: PUSH
34568: LD_INT 21
34570: PUSH
34571: LD_INT 22
34573: PUSH
34574: LD_INT 23
34576: PUSH
34577: LD_INT 24
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: ST_TO_ADDR
34586: GO 34769
34588: LD_INT 51
34590: DOUBLE
34591: EQUAL
34592: IFTRUE 34596
34594: GO 34622
34596: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34597: LD_ADDR_VAR 0 3
34601: PUSH
34602: LD_INT 21
34604: PUSH
34605: LD_INT 22
34607: PUSH
34608: LD_INT 23
34610: PUSH
34611: LD_INT 24
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: ST_TO_ADDR
34620: GO 34769
34622: LD_INT 52
34624: DOUBLE
34625: EQUAL
34626: IFTRUE 34630
34628: GO 34656
34630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34631: LD_ADDR_VAR 0 3
34635: PUSH
34636: LD_INT 21
34638: PUSH
34639: LD_INT 22
34641: PUSH
34642: LD_INT 23
34644: PUSH
34645: LD_INT 24
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: ST_TO_ADDR
34654: GO 34769
34656: LD_INT 53
34658: DOUBLE
34659: EQUAL
34660: IFTRUE 34664
34662: GO 34682
34664: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34665: LD_ADDR_VAR 0 3
34669: PUSH
34670: LD_INT 23
34672: PUSH
34673: LD_INT 24
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: ST_TO_ADDR
34680: GO 34769
34682: LD_INT 46
34684: DOUBLE
34685: EQUAL
34686: IFTRUE 34690
34688: GO 34708
34690: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34691: LD_ADDR_VAR 0 3
34695: PUSH
34696: LD_INT 23
34698: PUSH
34699: LD_INT 24
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: ST_TO_ADDR
34706: GO 34769
34708: LD_INT 47
34710: DOUBLE
34711: EQUAL
34712: IFTRUE 34716
34714: GO 34734
34716: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
34717: LD_ADDR_VAR 0 3
34721: PUSH
34722: LD_INT 23
34724: PUSH
34725: LD_INT 24
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: ST_TO_ADDR
34732: GO 34769
34734: LD_INT 98
34736: DOUBLE
34737: EQUAL
34738: IFTRUE 34742
34740: GO 34768
34742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34743: LD_ADDR_VAR 0 3
34747: PUSH
34748: LD_INT 21
34750: PUSH
34751: LD_INT 22
34753: PUSH
34754: LD_INT 23
34756: PUSH
34757: LD_INT 24
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: ST_TO_ADDR
34766: GO 34769
34768: POP
// result := ( chassis in result ) ;
34769: LD_ADDR_VAR 0 3
34773: PUSH
34774: LD_VAR 0 1
34778: PUSH
34779: LD_VAR 0 3
34783: IN
34784: ST_TO_ADDR
// end ;
34785: LD_VAR 0 3
34789: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34790: LD_INT 0
34792: PPUSH
34793: PPUSH
34794: PPUSH
34795: PPUSH
34796: PPUSH
34797: PPUSH
34798: PPUSH
// result := array ;
34799: LD_ADDR_VAR 0 5
34803: PUSH
34804: LD_VAR 0 1
34808: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34809: LD_VAR 0 1
34813: NOT
34814: IFTRUE 34823
34816: PUSH
34817: LD_VAR 0 2
34821: NOT
34822: OR
34823: IFTRUE 34832
34825: PUSH
34826: LD_VAR 0 3
34830: NOT
34831: OR
34832: IFTRUE 34846
34834: PUSH
34835: LD_VAR 0 2
34839: PUSH
34840: LD_VAR 0 1
34844: GREATER
34845: OR
34846: IFTRUE 34860
34848: PUSH
34849: LD_VAR 0 3
34853: PUSH
34854: LD_VAR 0 1
34858: GREATER
34859: OR
34860: IFFALSE 34864
// exit ;
34862: GO 35160
// if direction then
34864: LD_VAR 0 4
34868: IFFALSE 34932
// begin d := 1 ;
34870: LD_ADDR_VAR 0 9
34874: PUSH
34875: LD_INT 1
34877: ST_TO_ADDR
// if i_from > i_to then
34878: LD_VAR 0 2
34882: PUSH
34883: LD_VAR 0 3
34887: GREATER
34888: IFFALSE 34914
// length := ( array - i_from ) + i_to else
34890: LD_ADDR_VAR 0 11
34894: PUSH
34895: LD_VAR 0 1
34899: PUSH
34900: LD_VAR 0 2
34904: MINUS
34905: PUSH
34906: LD_VAR 0 3
34910: PLUS
34911: ST_TO_ADDR
34912: GO 34930
// length := i_to - i_from ;
34914: LD_ADDR_VAR 0 11
34918: PUSH
34919: LD_VAR 0 3
34923: PUSH
34924: LD_VAR 0 2
34928: MINUS
34929: ST_TO_ADDR
// end else
34930: GO 34993
// begin d := - 1 ;
34932: LD_ADDR_VAR 0 9
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: ST_TO_ADDR
// if i_from > i_to then
34941: LD_VAR 0 2
34945: PUSH
34946: LD_VAR 0 3
34950: GREATER
34951: IFFALSE 34971
// length := i_from - i_to else
34953: LD_ADDR_VAR 0 11
34957: PUSH
34958: LD_VAR 0 2
34962: PUSH
34963: LD_VAR 0 3
34967: MINUS
34968: ST_TO_ADDR
34969: GO 34993
// length := ( array - i_to ) + i_from ;
34971: LD_ADDR_VAR 0 11
34975: PUSH
34976: LD_VAR 0 1
34980: PUSH
34981: LD_VAR 0 3
34985: MINUS
34986: PUSH
34987: LD_VAR 0 2
34991: PLUS
34992: ST_TO_ADDR
// end ; if not length then
34993: LD_VAR 0 11
34997: NOT
34998: IFFALSE 35002
// exit ;
35000: GO 35160
// tmp := array ;
35002: LD_ADDR_VAR 0 10
35006: PUSH
35007: LD_VAR 0 1
35011: ST_TO_ADDR
// for i = 1 to length do
35012: LD_ADDR_VAR 0 6
35016: PUSH
35017: DOUBLE
35018: LD_INT 1
35020: DEC
35021: ST_TO_ADDR
35022: LD_VAR 0 11
35026: PUSH
35027: FOR_TO
35028: IFFALSE 35148
// begin for j = 1 to array do
35030: LD_ADDR_VAR 0 7
35034: PUSH
35035: DOUBLE
35036: LD_INT 1
35038: DEC
35039: ST_TO_ADDR
35040: LD_VAR 0 1
35044: PUSH
35045: FOR_TO
35046: IFFALSE 35134
// begin k := j + d ;
35048: LD_ADDR_VAR 0 8
35052: PUSH
35053: LD_VAR 0 7
35057: PUSH
35058: LD_VAR 0 9
35062: PLUS
35063: ST_TO_ADDR
// if k > array then
35064: LD_VAR 0 8
35068: PUSH
35069: LD_VAR 0 1
35073: GREATER
35074: IFFALSE 35084
// k := 1 ;
35076: LD_ADDR_VAR 0 8
35080: PUSH
35081: LD_INT 1
35083: ST_TO_ADDR
// if not k then
35084: LD_VAR 0 8
35088: NOT
35089: IFFALSE 35101
// k := array ;
35091: LD_ADDR_VAR 0 8
35095: PUSH
35096: LD_VAR 0 1
35100: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35101: LD_ADDR_VAR 0 10
35105: PUSH
35106: LD_VAR 0 10
35110: PPUSH
35111: LD_VAR 0 8
35115: PPUSH
35116: LD_VAR 0 1
35120: PUSH
35121: LD_VAR 0 7
35125: ARRAY
35126: PPUSH
35127: CALL_OW 1
35131: ST_TO_ADDR
// end ;
35132: GO 35045
35134: POP
35135: POP
// array := tmp ;
35136: LD_ADDR_VAR 0 1
35140: PUSH
35141: LD_VAR 0 10
35145: ST_TO_ADDR
// end ;
35146: GO 35027
35148: POP
35149: POP
// result := array ;
35150: LD_ADDR_VAR 0 5
35154: PUSH
35155: LD_VAR 0 1
35159: ST_TO_ADDR
// end ;
35160: LD_VAR 0 5
35164: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35165: LD_INT 0
35167: PPUSH
35168: PPUSH
// result := 0 ;
35169: LD_ADDR_VAR 0 3
35173: PUSH
35174: LD_INT 0
35176: ST_TO_ADDR
// if not array or not value in array then
35177: LD_VAR 0 1
35181: NOT
35182: IFTRUE 35197
35184: PUSH
35185: LD_VAR 0 2
35189: PUSH
35190: LD_VAR 0 1
35194: IN
35195: NOT
35196: OR
35197: IFFALSE 35201
// exit ;
35199: GO 35255
// for i = 1 to array do
35201: LD_ADDR_VAR 0 4
35205: PUSH
35206: DOUBLE
35207: LD_INT 1
35209: DEC
35210: ST_TO_ADDR
35211: LD_VAR 0 1
35215: PUSH
35216: FOR_TO
35217: IFFALSE 35253
// if value = array [ i ] then
35219: LD_VAR 0 2
35223: PUSH
35224: LD_VAR 0 1
35228: PUSH
35229: LD_VAR 0 4
35233: ARRAY
35234: EQUAL
35235: IFFALSE 35251
// begin result := i ;
35237: LD_ADDR_VAR 0 3
35241: PUSH
35242: LD_VAR 0 4
35246: ST_TO_ADDR
// exit ;
35247: POP
35248: POP
35249: GO 35255
// end ;
35251: GO 35216
35253: POP
35254: POP
// end ;
35255: LD_VAR 0 3
35259: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35260: LD_INT 0
35262: PPUSH
// vc_chassis := chassis ;
35263: LD_ADDR_OWVAR 37
35267: PUSH
35268: LD_VAR 0 1
35272: ST_TO_ADDR
// vc_engine := engine ;
35273: LD_ADDR_OWVAR 39
35277: PUSH
35278: LD_VAR 0 2
35282: ST_TO_ADDR
// vc_control := control ;
35283: LD_ADDR_OWVAR 38
35287: PUSH
35288: LD_VAR 0 3
35292: ST_TO_ADDR
// vc_weapon := weapon ;
35293: LD_ADDR_OWVAR 40
35297: PUSH
35298: LD_VAR 0 4
35302: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35303: LD_ADDR_OWVAR 41
35307: PUSH
35308: LD_VAR 0 5
35312: ST_TO_ADDR
// end ;
35313: LD_VAR 0 6
35317: RET
// export function WantPlant ( unit ) ; var task ; begin
35318: LD_INT 0
35320: PPUSH
35321: PPUSH
// result := false ;
35322: LD_ADDR_VAR 0 2
35326: PUSH
35327: LD_INT 0
35329: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35330: LD_ADDR_VAR 0 3
35334: PUSH
35335: LD_VAR 0 1
35339: PPUSH
35340: CALL_OW 437
35344: ST_TO_ADDR
// if task then
35345: LD_VAR 0 3
35349: IFFALSE 35377
// if task [ 1 ] [ 1 ] = p then
35351: LD_VAR 0 3
35355: PUSH
35356: LD_INT 1
35358: ARRAY
35359: PUSH
35360: LD_INT 1
35362: ARRAY
35363: PUSH
35364: LD_STRING p
35366: EQUAL
35367: IFFALSE 35377
// result := true ;
35369: LD_ADDR_VAR 0 2
35373: PUSH
35374: LD_INT 1
35376: ST_TO_ADDR
// end ;
35377: LD_VAR 0 2
35381: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35382: LD_INT 0
35384: PPUSH
35385: PPUSH
35386: PPUSH
35387: PPUSH
// if pos < 1 then
35388: LD_VAR 0 2
35392: PUSH
35393: LD_INT 1
35395: LESS
35396: IFFALSE 35400
// exit ;
35398: GO 35703
// if pos = 1 then
35400: LD_VAR 0 2
35404: PUSH
35405: LD_INT 1
35407: EQUAL
35408: IFFALSE 35441
// result := Replace ( arr , pos [ 1 ] , value ) else
35410: LD_ADDR_VAR 0 4
35414: PUSH
35415: LD_VAR 0 1
35419: PPUSH
35420: LD_VAR 0 2
35424: PUSH
35425: LD_INT 1
35427: ARRAY
35428: PPUSH
35429: LD_VAR 0 3
35433: PPUSH
35434: CALL_OW 1
35438: ST_TO_ADDR
35439: GO 35703
// begin tmp := arr ;
35441: LD_ADDR_VAR 0 6
35445: PUSH
35446: LD_VAR 0 1
35450: ST_TO_ADDR
// s_arr := [ tmp ] ;
35451: LD_ADDR_VAR 0 7
35455: PUSH
35456: LD_VAR 0 6
35460: PUSH
35461: EMPTY
35462: LIST
35463: ST_TO_ADDR
// for i = 1 to pos - 1 do
35464: LD_ADDR_VAR 0 5
35468: PUSH
35469: DOUBLE
35470: LD_INT 1
35472: DEC
35473: ST_TO_ADDR
35474: LD_VAR 0 2
35478: PUSH
35479: LD_INT 1
35481: MINUS
35482: PUSH
35483: FOR_TO
35484: IFFALSE 35529
// begin tmp := tmp [ pos [ i ] ] ;
35486: LD_ADDR_VAR 0 6
35490: PUSH
35491: LD_VAR 0 6
35495: PUSH
35496: LD_VAR 0 2
35500: PUSH
35501: LD_VAR 0 5
35505: ARRAY
35506: ARRAY
35507: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35508: LD_ADDR_VAR 0 7
35512: PUSH
35513: LD_VAR 0 7
35517: PUSH
35518: LD_VAR 0 6
35522: PUSH
35523: EMPTY
35524: LIST
35525: ADD
35526: ST_TO_ADDR
// end ;
35527: GO 35483
35529: POP
35530: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35531: LD_ADDR_VAR 0 6
35535: PUSH
35536: LD_VAR 0 6
35540: PPUSH
35541: LD_VAR 0 2
35545: PUSH
35546: LD_VAR 0 2
35550: ARRAY
35551: PPUSH
35552: LD_VAR 0 3
35556: PPUSH
35557: CALL_OW 1
35561: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35562: LD_ADDR_VAR 0 7
35566: PUSH
35567: LD_VAR 0 7
35571: PPUSH
35572: LD_VAR 0 7
35576: PPUSH
35577: LD_VAR 0 6
35581: PPUSH
35582: CALL_OW 1
35586: ST_TO_ADDR
// for i = s_arr downto 2 do
35587: LD_ADDR_VAR 0 5
35591: PUSH
35592: DOUBLE
35593: LD_VAR 0 7
35597: INC
35598: ST_TO_ADDR
35599: LD_INT 2
35601: PUSH
35602: FOR_DOWNTO
35603: IFFALSE 35687
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35605: LD_ADDR_VAR 0 6
35609: PUSH
35610: LD_VAR 0 7
35614: PUSH
35615: LD_VAR 0 5
35619: PUSH
35620: LD_INT 1
35622: MINUS
35623: ARRAY
35624: PPUSH
35625: LD_VAR 0 2
35629: PUSH
35630: LD_VAR 0 5
35634: PUSH
35635: LD_INT 1
35637: MINUS
35638: ARRAY
35639: PPUSH
35640: LD_VAR 0 7
35644: PUSH
35645: LD_VAR 0 5
35649: ARRAY
35650: PPUSH
35651: CALL_OW 1
35655: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35656: LD_ADDR_VAR 0 7
35660: PUSH
35661: LD_VAR 0 7
35665: PPUSH
35666: LD_VAR 0 5
35670: PUSH
35671: LD_INT 1
35673: MINUS
35674: PPUSH
35675: LD_VAR 0 6
35679: PPUSH
35680: CALL_OW 1
35684: ST_TO_ADDR
// end ;
35685: GO 35602
35687: POP
35688: POP
// result := s_arr [ 1 ] ;
35689: LD_ADDR_VAR 0 4
35693: PUSH
35694: LD_VAR 0 7
35698: PUSH
35699: LD_INT 1
35701: ARRAY
35702: ST_TO_ADDR
// end ; end ;
35703: LD_VAR 0 4
35707: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35708: LD_INT 0
35710: PPUSH
35711: PPUSH
// if not list then
35712: LD_VAR 0 1
35716: NOT
35717: IFFALSE 35721
// exit ;
35719: GO 35812
// i := list [ pos1 ] ;
35721: LD_ADDR_VAR 0 5
35725: PUSH
35726: LD_VAR 0 1
35730: PUSH
35731: LD_VAR 0 2
35735: ARRAY
35736: ST_TO_ADDR
// if not i then
35737: LD_VAR 0 5
35741: NOT
35742: IFFALSE 35746
// exit ;
35744: GO 35812
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35746: LD_ADDR_VAR 0 1
35750: PUSH
35751: LD_VAR 0 1
35755: PPUSH
35756: LD_VAR 0 2
35760: PPUSH
35761: LD_VAR 0 1
35765: PUSH
35766: LD_VAR 0 3
35770: ARRAY
35771: PPUSH
35772: CALL_OW 1
35776: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35777: LD_ADDR_VAR 0 1
35781: PUSH
35782: LD_VAR 0 1
35786: PPUSH
35787: LD_VAR 0 3
35791: PPUSH
35792: LD_VAR 0 5
35796: PPUSH
35797: CALL_OW 1
35801: ST_TO_ADDR
// result := list ;
35802: LD_ADDR_VAR 0 4
35806: PUSH
35807: LD_VAR 0 1
35811: ST_TO_ADDR
// end ;
35812: LD_VAR 0 4
35816: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35817: LD_INT 0
35819: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35820: LD_ADDR_VAR 0 5
35824: PUSH
35825: LD_VAR 0 1
35829: PPUSH
35830: CALL_OW 250
35834: PPUSH
35835: LD_VAR 0 1
35839: PPUSH
35840: CALL_OW 251
35844: PPUSH
35845: LD_VAR 0 2
35849: PPUSH
35850: LD_VAR 0 3
35854: PPUSH
35855: LD_VAR 0 4
35859: PPUSH
35860: CALL 36242 0 5
35864: ST_TO_ADDR
// end ;
35865: LD_VAR 0 5
35869: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35870: LD_INT 0
35872: PPUSH
35873: PPUSH
35874: PPUSH
35875: PPUSH
// if not list or not unit then
35876: LD_VAR 0 2
35880: NOT
35881: IFTRUE 35890
35883: PUSH
35884: LD_VAR 0 1
35888: NOT
35889: OR
35890: IFFALSE 35894
// exit ;
35892: GO 36237
// result := [ ] ;
35894: LD_ADDR_VAR 0 5
35898: PUSH
35899: EMPTY
35900: ST_TO_ADDR
// for i in list do
35901: LD_ADDR_VAR 0 6
35905: PUSH
35906: LD_VAR 0 2
35910: PUSH
35911: FOR_IN
35912: IFFALSE 36130
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35914: LD_ADDR_VAR 0 8
35918: PUSH
35919: LD_VAR 0 1
35923: PPUSH
35924: LD_VAR 0 6
35928: PUSH
35929: LD_INT 1
35931: ARRAY
35932: PPUSH
35933: LD_VAR 0 6
35937: PUSH
35938: LD_INT 2
35940: ARRAY
35941: PPUSH
35942: CALL_OW 297
35946: ST_TO_ADDR
// if not Count ( result ) then
35947: LD_VAR 0 5
35951: PPUSH
35952: CALL 32464 0 1
35956: NOT
35957: IFFALSE 35990
// begin result := Join ( result , [ i , tmp ] ) ;
35959: LD_ADDR_VAR 0 5
35963: PUSH
35964: LD_VAR 0 5
35968: PPUSH
35969: LD_VAR 0 6
35973: PUSH
35974: LD_VAR 0 8
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PPUSH
35983: CALL 68440 0 2
35987: ST_TO_ADDR
// continue ;
35988: GO 35911
// end ; if result [ result ] [ 2 ] <= tmp then
35990: LD_VAR 0 5
35994: PUSH
35995: LD_VAR 0 5
35999: ARRAY
36000: PUSH
36001: LD_INT 2
36003: ARRAY
36004: PUSH
36005: LD_VAR 0 8
36009: LESSEQUAL
36010: IFFALSE 36043
// result := Join ( result , [ i , tmp ] ) else
36012: LD_ADDR_VAR 0 5
36016: PUSH
36017: LD_VAR 0 5
36021: PPUSH
36022: LD_VAR 0 6
36026: PUSH
36027: LD_VAR 0 8
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PPUSH
36036: CALL 68440 0 2
36040: ST_TO_ADDR
36041: GO 36128
// begin for j := 1 to Count ( result ) do
36043: LD_ADDR_VAR 0 7
36047: PUSH
36048: DOUBLE
36049: LD_INT 1
36051: DEC
36052: ST_TO_ADDR
36053: LD_VAR 0 5
36057: PPUSH
36058: CALL 32464 0 1
36062: PUSH
36063: FOR_TO
36064: IFFALSE 36126
// begin if tmp < result [ j ] [ 2 ] then
36066: LD_VAR 0 8
36070: PUSH
36071: LD_VAR 0 5
36075: PUSH
36076: LD_VAR 0 7
36080: ARRAY
36081: PUSH
36082: LD_INT 2
36084: ARRAY
36085: LESS
36086: IFFALSE 36124
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36088: LD_ADDR_VAR 0 5
36092: PUSH
36093: LD_VAR 0 5
36097: PPUSH
36098: LD_VAR 0 7
36102: PPUSH
36103: LD_VAR 0 6
36107: PUSH
36108: LD_VAR 0 8
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PPUSH
36117: CALL_OW 2
36121: ST_TO_ADDR
// break ;
36122: GO 36126
// end ; end ;
36124: GO 36063
36126: POP
36127: POP
// end ; end ;
36128: GO 35911
36130: POP
36131: POP
// if result and not asc then
36132: LD_VAR 0 5
36136: IFFALSE 36145
36138: PUSH
36139: LD_VAR 0 3
36143: NOT
36144: AND
36145: IFFALSE 36162
// result := ReverseArray ( result ) ;
36147: LD_ADDR_VAR 0 5
36151: PUSH
36152: LD_VAR 0 5
36156: PPUSH
36157: CALL 63520 0 1
36161: ST_TO_ADDR
// tmp := [ ] ;
36162: LD_ADDR_VAR 0 8
36166: PUSH
36167: EMPTY
36168: ST_TO_ADDR
// if mode then
36169: LD_VAR 0 4
36173: IFFALSE 36237
// begin for i := 1 to result do
36175: LD_ADDR_VAR 0 6
36179: PUSH
36180: DOUBLE
36181: LD_INT 1
36183: DEC
36184: ST_TO_ADDR
36185: LD_VAR 0 5
36189: PUSH
36190: FOR_TO
36191: IFFALSE 36225
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36193: LD_ADDR_VAR 0 8
36197: PUSH
36198: LD_VAR 0 8
36202: PPUSH
36203: LD_VAR 0 5
36207: PUSH
36208: LD_VAR 0 6
36212: ARRAY
36213: PUSH
36214: LD_INT 1
36216: ARRAY
36217: PPUSH
36218: CALL 68440 0 2
36222: ST_TO_ADDR
36223: GO 36190
36225: POP
36226: POP
// result := tmp ;
36227: LD_ADDR_VAR 0 5
36231: PUSH
36232: LD_VAR 0 8
36236: ST_TO_ADDR
// end ; end ;
36237: LD_VAR 0 5
36241: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36242: LD_INT 0
36244: PPUSH
36245: PPUSH
36246: PPUSH
36247: PPUSH
// if not list then
36248: LD_VAR 0 3
36252: NOT
36253: IFFALSE 36257
// exit ;
36255: GO 36647
// result := [ ] ;
36257: LD_ADDR_VAR 0 6
36261: PUSH
36262: EMPTY
36263: ST_TO_ADDR
// for i in list do
36264: LD_ADDR_VAR 0 7
36268: PUSH
36269: LD_VAR 0 3
36273: PUSH
36274: FOR_IN
36275: IFFALSE 36477
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36277: LD_ADDR_VAR 0 9
36281: PUSH
36282: LD_VAR 0 7
36286: PPUSH
36287: LD_VAR 0 1
36291: PPUSH
36292: LD_VAR 0 2
36296: PPUSH
36297: CALL_OW 297
36301: ST_TO_ADDR
// if not result then
36302: LD_VAR 0 6
36306: NOT
36307: IFFALSE 36333
// result := [ [ i , tmp ] ] else
36309: LD_ADDR_VAR 0 6
36313: PUSH
36314: LD_VAR 0 7
36318: PUSH
36319: LD_VAR 0 9
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: EMPTY
36329: LIST
36330: ST_TO_ADDR
36331: GO 36475
// begin if result [ result ] [ 2 ] <= tmp then
36333: LD_VAR 0 6
36337: PUSH
36338: LD_VAR 0 6
36342: ARRAY
36343: PUSH
36344: LD_INT 2
36346: ARRAY
36347: PUSH
36348: LD_VAR 0 9
36352: LESSEQUAL
36353: IFFALSE 36395
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36355: LD_ADDR_VAR 0 6
36359: PUSH
36360: LD_VAR 0 6
36364: PPUSH
36365: LD_VAR 0 6
36369: PUSH
36370: LD_INT 1
36372: PLUS
36373: PPUSH
36374: LD_VAR 0 7
36378: PUSH
36379: LD_VAR 0 9
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PPUSH
36388: CALL_OW 2
36392: ST_TO_ADDR
36393: GO 36475
// for j := 1 to result do
36395: LD_ADDR_VAR 0 8
36399: PUSH
36400: DOUBLE
36401: LD_INT 1
36403: DEC
36404: ST_TO_ADDR
36405: LD_VAR 0 6
36409: PUSH
36410: FOR_TO
36411: IFFALSE 36473
// begin if tmp < result [ j ] [ 2 ] then
36413: LD_VAR 0 9
36417: PUSH
36418: LD_VAR 0 6
36422: PUSH
36423: LD_VAR 0 8
36427: ARRAY
36428: PUSH
36429: LD_INT 2
36431: ARRAY
36432: LESS
36433: IFFALSE 36471
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36435: LD_ADDR_VAR 0 6
36439: PUSH
36440: LD_VAR 0 6
36444: PPUSH
36445: LD_VAR 0 8
36449: PPUSH
36450: LD_VAR 0 7
36454: PUSH
36455: LD_VAR 0 9
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PPUSH
36464: CALL_OW 2
36468: ST_TO_ADDR
// break ;
36469: GO 36473
// end ; end ;
36471: GO 36410
36473: POP
36474: POP
// end ; end ;
36475: GO 36274
36477: POP
36478: POP
// if result and not asc then
36479: LD_VAR 0 6
36483: IFFALSE 36492
36485: PUSH
36486: LD_VAR 0 4
36490: NOT
36491: AND
36492: IFFALSE 36567
// begin tmp := result ;
36494: LD_ADDR_VAR 0 9
36498: PUSH
36499: LD_VAR 0 6
36503: ST_TO_ADDR
// for i = tmp downto 1 do
36504: LD_ADDR_VAR 0 7
36508: PUSH
36509: DOUBLE
36510: LD_VAR 0 9
36514: INC
36515: ST_TO_ADDR
36516: LD_INT 1
36518: PUSH
36519: FOR_DOWNTO
36520: IFFALSE 36565
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36522: LD_ADDR_VAR 0 6
36526: PUSH
36527: LD_VAR 0 6
36531: PPUSH
36532: LD_VAR 0 9
36536: PUSH
36537: LD_VAR 0 7
36541: MINUS
36542: PUSH
36543: LD_INT 1
36545: PLUS
36546: PPUSH
36547: LD_VAR 0 9
36551: PUSH
36552: LD_VAR 0 7
36556: ARRAY
36557: PPUSH
36558: CALL_OW 1
36562: ST_TO_ADDR
36563: GO 36519
36565: POP
36566: POP
// end ; tmp := [ ] ;
36567: LD_ADDR_VAR 0 9
36571: PUSH
36572: EMPTY
36573: ST_TO_ADDR
// if mode then
36574: LD_VAR 0 5
36578: IFFALSE 36647
// begin for i = 1 to result do
36580: LD_ADDR_VAR 0 7
36584: PUSH
36585: DOUBLE
36586: LD_INT 1
36588: DEC
36589: ST_TO_ADDR
36590: LD_VAR 0 6
36594: PUSH
36595: FOR_TO
36596: IFFALSE 36635
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36598: LD_ADDR_VAR 0 9
36602: PUSH
36603: LD_VAR 0 9
36607: PPUSH
36608: LD_VAR 0 7
36612: PPUSH
36613: LD_VAR 0 6
36617: PUSH
36618: LD_VAR 0 7
36622: ARRAY
36623: PUSH
36624: LD_INT 1
36626: ARRAY
36627: PPUSH
36628: CALL_OW 1
36632: ST_TO_ADDR
36633: GO 36595
36635: POP
36636: POP
// result := tmp ;
36637: LD_ADDR_VAR 0 6
36641: PUSH
36642: LD_VAR 0 9
36646: ST_TO_ADDR
// end ; end ;
36647: LD_VAR 0 6
36651: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36652: LD_INT 0
36654: PPUSH
36655: PPUSH
36656: PPUSH
36657: PPUSH
36658: PPUSH
36659: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36660: LD_ADDR_VAR 0 5
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: EMPTY
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: ST_TO_ADDR
// if not x or not y then
36682: LD_VAR 0 2
36686: NOT
36687: IFTRUE 36696
36689: PUSH
36690: LD_VAR 0 3
36694: NOT
36695: OR
36696: IFFALSE 36700
// exit ;
36698: GO 38356
// if not range then
36700: LD_VAR 0 4
36704: NOT
36705: IFFALSE 36715
// range := 10 ;
36707: LD_ADDR_VAR 0 4
36711: PUSH
36712: LD_INT 10
36714: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36715: LD_ADDR_VAR 0 8
36719: PUSH
36720: LD_INT 81
36722: PUSH
36723: LD_VAR 0 1
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 92
36734: PUSH
36735: LD_VAR 0 2
36739: PUSH
36740: LD_VAR 0 3
36744: PUSH
36745: LD_VAR 0 4
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 3
36758: PUSH
36759: LD_INT 21
36761: PUSH
36762: LD_INT 3
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: PPUSH
36778: CALL_OW 69
36782: ST_TO_ADDR
// if not tmp then
36783: LD_VAR 0 8
36787: NOT
36788: IFFALSE 36792
// exit ;
36790: GO 38356
// for i in tmp do
36792: LD_ADDR_VAR 0 6
36796: PUSH
36797: LD_VAR 0 8
36801: PUSH
36802: FOR_IN
36803: IFFALSE 38331
// begin points := [ 0 , 0 , 0 ] ;
36805: LD_ADDR_VAR 0 9
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: LIST
36823: ST_TO_ADDR
// bpoints := 1 ;
36824: LD_ADDR_VAR 0 10
36828: PUSH
36829: LD_INT 1
36831: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36832: LD_VAR 0 6
36836: PPUSH
36837: CALL_OW 247
36841: PUSH
36842: LD_INT 1
36844: DOUBLE
36845: EQUAL
36846: IFTRUE 36850
36848: GO 37432
36850: POP
// begin if GetClass ( i ) = 1 then
36851: LD_VAR 0 6
36855: PPUSH
36856: CALL_OW 257
36860: PUSH
36861: LD_INT 1
36863: EQUAL
36864: IFFALSE 36885
// points := [ 10 , 5 , 3 ] ;
36866: LD_ADDR_VAR 0 9
36870: PUSH
36871: LD_INT 10
36873: PUSH
36874: LD_INT 5
36876: PUSH
36877: LD_INT 3
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36885: LD_VAR 0 6
36889: PPUSH
36890: CALL_OW 257
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: LD_INT 3
36900: PUSH
36901: LD_INT 4
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: LIST
36908: IN
36909: IFFALSE 36930
// points := [ 3 , 2 , 1 ] ;
36911: LD_ADDR_VAR 0 9
36915: PUSH
36916: LD_INT 3
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36930: LD_VAR 0 6
36934: PPUSH
36935: CALL_OW 257
36939: PUSH
36940: LD_INT 5
36942: EQUAL
36943: IFFALSE 36964
// points := [ 130 , 5 , 2 ] ;
36945: LD_ADDR_VAR 0 9
36949: PUSH
36950: LD_INT 130
36952: PUSH
36953: LD_INT 5
36955: PUSH
36956: LD_INT 2
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: LIST
36963: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36964: LD_VAR 0 6
36968: PPUSH
36969: CALL_OW 257
36973: PUSH
36974: LD_INT 8
36976: EQUAL
36977: IFFALSE 36998
// points := [ 35 , 35 , 30 ] ;
36979: LD_ADDR_VAR 0 9
36983: PUSH
36984: LD_INT 35
36986: PUSH
36987: LD_INT 35
36989: PUSH
36990: LD_INT 30
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36998: LD_VAR 0 6
37002: PPUSH
37003: CALL_OW 257
37007: PUSH
37008: LD_INT 9
37010: EQUAL
37011: IFFALSE 37032
// points := [ 20 , 55 , 40 ] ;
37013: LD_ADDR_VAR 0 9
37017: PUSH
37018: LD_INT 20
37020: PUSH
37021: LD_INT 55
37023: PUSH
37024: LD_INT 40
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37032: LD_VAR 0 6
37036: PPUSH
37037: CALL_OW 257
37041: PUSH
37042: LD_INT 12
37044: PUSH
37045: LD_INT 16
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: IN
37052: IFFALSE 37073
// points := [ 5 , 3 , 2 ] ;
37054: LD_ADDR_VAR 0 9
37058: PUSH
37059: LD_INT 5
37061: PUSH
37062: LD_INT 3
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: LIST
37072: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37073: LD_VAR 0 6
37077: PPUSH
37078: CALL_OW 257
37082: PUSH
37083: LD_INT 17
37085: EQUAL
37086: IFFALSE 37107
// points := [ 100 , 50 , 75 ] ;
37088: LD_ADDR_VAR 0 9
37092: PUSH
37093: LD_INT 100
37095: PUSH
37096: LD_INT 50
37098: PUSH
37099: LD_INT 75
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37107: LD_VAR 0 6
37111: PPUSH
37112: CALL_OW 257
37116: PUSH
37117: LD_INT 15
37119: EQUAL
37120: IFFALSE 37141
// points := [ 10 , 5 , 3 ] ;
37122: LD_ADDR_VAR 0 9
37126: PUSH
37127: LD_INT 10
37129: PUSH
37130: LD_INT 5
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37141: LD_VAR 0 6
37145: PPUSH
37146: CALL_OW 257
37150: PUSH
37151: LD_INT 14
37153: EQUAL
37154: IFFALSE 37175
// points := [ 10 , 0 , 0 ] ;
37156: LD_ADDR_VAR 0 9
37160: PUSH
37161: LD_INT 10
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: LIST
37174: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37175: LD_VAR 0 6
37179: PPUSH
37180: CALL_OW 257
37184: PUSH
37185: LD_INT 11
37187: EQUAL
37188: IFFALSE 37209
// points := [ 30 , 10 , 5 ] ;
37190: LD_ADDR_VAR 0 9
37194: PUSH
37195: LD_INT 30
37197: PUSH
37198: LD_INT 10
37200: PUSH
37201: LD_INT 5
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: LIST
37208: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37209: LD_VAR 0 1
37213: PPUSH
37214: LD_INT 5
37216: PPUSH
37217: CALL_OW 321
37221: PUSH
37222: LD_INT 2
37224: EQUAL
37225: IFFALSE 37242
// bpoints := bpoints * 1.8 ;
37227: LD_ADDR_VAR 0 10
37231: PUSH
37232: LD_VAR 0 10
37236: PUSH
37237: LD_REAL  1.80000000000000E+0000
37240: MUL
37241: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37242: LD_VAR 0 6
37246: PPUSH
37247: CALL_OW 257
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: LD_INT 4
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: IN
37270: IFFALSE 37290
37272: PUSH
37273: LD_VAR 0 1
37277: PPUSH
37278: LD_INT 51
37280: PPUSH
37281: CALL_OW 321
37285: PUSH
37286: LD_INT 2
37288: EQUAL
37289: AND
37290: IFFALSE 37307
// bpoints := bpoints * 1.2 ;
37292: LD_ADDR_VAR 0 10
37296: PUSH
37297: LD_VAR 0 10
37301: PUSH
37302: LD_REAL  1.20000000000000E+0000
37305: MUL
37306: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37307: LD_VAR 0 6
37311: PPUSH
37312: CALL_OW 257
37316: PUSH
37317: LD_INT 5
37319: PUSH
37320: LD_INT 7
37322: PUSH
37323: LD_INT 9
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: LIST
37330: IN
37331: IFFALSE 37351
37333: PUSH
37334: LD_VAR 0 1
37338: PPUSH
37339: LD_INT 52
37341: PPUSH
37342: CALL_OW 321
37346: PUSH
37347: LD_INT 2
37349: EQUAL
37350: AND
37351: IFFALSE 37368
// bpoints := bpoints * 1.5 ;
37353: LD_ADDR_VAR 0 10
37357: PUSH
37358: LD_VAR 0 10
37362: PUSH
37363: LD_REAL  1.50000000000000E+0000
37366: MUL
37367: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37368: LD_VAR 0 1
37372: PPUSH
37373: LD_INT 66
37375: PPUSH
37376: CALL_OW 321
37380: PUSH
37381: LD_INT 2
37383: EQUAL
37384: IFFALSE 37401
// bpoints := bpoints * 1.1 ;
37386: LD_ADDR_VAR 0 10
37390: PUSH
37391: LD_VAR 0 10
37395: PUSH
37396: LD_REAL  1.10000000000000E+0000
37399: MUL
37400: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37401: LD_ADDR_VAR 0 10
37405: PUSH
37406: LD_VAR 0 10
37410: PUSH
37411: LD_VAR 0 6
37415: PPUSH
37416: LD_INT 1
37418: PPUSH
37419: CALL_OW 259
37423: PUSH
37424: LD_REAL  1.15000000000000E+0000
37427: MUL
37428: MUL
37429: ST_TO_ADDR
// end ; unit_vehicle :
37430: GO 38260
37432: LD_INT 2
37434: DOUBLE
37435: EQUAL
37436: IFTRUE 37440
37438: GO 38248
37440: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37441: LD_VAR 0 6
37445: PPUSH
37446: CALL_OW 264
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: LD_INT 42
37456: PUSH
37457: LD_INT 24
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: IN
37465: IFFALSE 37486
// points := [ 25 , 5 , 3 ] ;
37467: LD_ADDR_VAR 0 9
37471: PUSH
37472: LD_INT 25
37474: PUSH
37475: LD_INT 5
37477: PUSH
37478: LD_INT 3
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37486: LD_VAR 0 6
37490: PPUSH
37491: CALL_OW 264
37495: PUSH
37496: LD_INT 4
37498: PUSH
37499: LD_INT 43
37501: PUSH
37502: LD_INT 25
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: IN
37510: IFFALSE 37531
// points := [ 40 , 15 , 5 ] ;
37512: LD_ADDR_VAR 0 9
37516: PUSH
37517: LD_INT 40
37519: PUSH
37520: LD_INT 15
37522: PUSH
37523: LD_INT 5
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: LIST
37530: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37531: LD_VAR 0 6
37535: PPUSH
37536: CALL_OW 264
37540: PUSH
37541: LD_INT 3
37543: PUSH
37544: LD_INT 23
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: IN
37551: IFFALSE 37572
// points := [ 7 , 25 , 8 ] ;
37553: LD_ADDR_VAR 0 9
37557: PUSH
37558: LD_INT 7
37560: PUSH
37561: LD_INT 25
37563: PUSH
37564: LD_INT 8
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: LIST
37571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37572: LD_VAR 0 6
37576: PPUSH
37577: CALL_OW 264
37581: PUSH
37582: LD_INT 5
37584: PUSH
37585: LD_INT 27
37587: PUSH
37588: LD_INT 44
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: LIST
37595: IN
37596: IFFALSE 37617
// points := [ 14 , 50 , 16 ] ;
37598: LD_ADDR_VAR 0 9
37602: PUSH
37603: LD_INT 14
37605: PUSH
37606: LD_INT 50
37608: PUSH
37609: LD_INT 16
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37617: LD_VAR 0 6
37621: PPUSH
37622: CALL_OW 264
37626: PUSH
37627: LD_INT 6
37629: PUSH
37630: LD_INT 46
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: IN
37637: IFFALSE 37658
// points := [ 32 , 120 , 70 ] ;
37639: LD_ADDR_VAR 0 9
37643: PUSH
37644: LD_INT 32
37646: PUSH
37647: LD_INT 120
37649: PUSH
37650: LD_INT 70
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37658: LD_VAR 0 6
37662: PPUSH
37663: CALL_OW 264
37667: PUSH
37668: LD_INT 7
37670: PUSH
37671: LD_INT 28
37673: PUSH
37674: LD_INT 45
37676: PUSH
37677: LD_INT 92
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: IN
37686: IFFALSE 37707
// points := [ 35 , 20 , 45 ] ;
37688: LD_ADDR_VAR 0 9
37692: PUSH
37693: LD_INT 35
37695: PUSH
37696: LD_INT 20
37698: PUSH
37699: LD_INT 45
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: LIST
37706: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37707: LD_VAR 0 6
37711: PPUSH
37712: CALL_OW 264
37716: PUSH
37717: LD_INT 47
37719: PUSH
37720: EMPTY
37721: LIST
37722: IN
37723: IFFALSE 37744
// points := [ 67 , 45 , 75 ] ;
37725: LD_ADDR_VAR 0 9
37729: PUSH
37730: LD_INT 67
37732: PUSH
37733: LD_INT 45
37735: PUSH
37736: LD_INT 75
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37744: LD_VAR 0 6
37748: PPUSH
37749: CALL_OW 264
37753: PUSH
37754: LD_INT 26
37756: PUSH
37757: EMPTY
37758: LIST
37759: IN
37760: IFFALSE 37781
// points := [ 120 , 30 , 80 ] ;
37762: LD_ADDR_VAR 0 9
37766: PUSH
37767: LD_INT 120
37769: PUSH
37770: LD_INT 30
37772: PUSH
37773: LD_INT 80
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37781: LD_VAR 0 6
37785: PPUSH
37786: CALL_OW 264
37790: PUSH
37791: LD_INT 22
37793: PUSH
37794: EMPTY
37795: LIST
37796: IN
37797: IFFALSE 37818
// points := [ 40 , 1 , 1 ] ;
37799: LD_ADDR_VAR 0 9
37803: PUSH
37804: LD_INT 40
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37818: LD_VAR 0 6
37822: PPUSH
37823: CALL_OW 264
37827: PUSH
37828: LD_INT 29
37830: PUSH
37831: EMPTY
37832: LIST
37833: IN
37834: IFFALSE 37855
// points := [ 70 , 200 , 400 ] ;
37836: LD_ADDR_VAR 0 9
37840: PUSH
37841: LD_INT 70
37843: PUSH
37844: LD_INT 200
37846: PUSH
37847: LD_INT 400
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37855: LD_VAR 0 6
37859: PPUSH
37860: CALL_OW 264
37864: PUSH
37865: LD_INT 14
37867: PUSH
37868: LD_INT 53
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: IN
37875: IFFALSE 37896
// points := [ 40 , 10 , 20 ] ;
37877: LD_ADDR_VAR 0 9
37881: PUSH
37882: LD_INT 40
37884: PUSH
37885: LD_INT 10
37887: PUSH
37888: LD_INT 20
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37896: LD_VAR 0 6
37900: PPUSH
37901: CALL_OW 264
37905: PUSH
37906: LD_INT 9
37908: PUSH
37909: EMPTY
37910: LIST
37911: IN
37912: IFFALSE 37933
// points := [ 5 , 70 , 20 ] ;
37914: LD_ADDR_VAR 0 9
37918: PUSH
37919: LD_INT 5
37921: PUSH
37922: LD_INT 70
37924: PUSH
37925: LD_INT 20
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37933: LD_VAR 0 6
37937: PPUSH
37938: CALL_OW 264
37942: PUSH
37943: LD_INT 10
37945: PUSH
37946: EMPTY
37947: LIST
37948: IN
37949: IFFALSE 37970
// points := [ 35 , 110 , 70 ] ;
37951: LD_ADDR_VAR 0 9
37955: PUSH
37956: LD_INT 35
37958: PUSH
37959: LD_INT 110
37961: PUSH
37962: LD_INT 70
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: LIST
37969: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37970: LD_VAR 0 6
37974: PPUSH
37975: CALL_OW 265
37979: PUSH
37980: LD_INT 25
37982: EQUAL
37983: IFFALSE 38004
// points := [ 80 , 65 , 100 ] ;
37985: LD_ADDR_VAR 0 9
37989: PUSH
37990: LD_INT 80
37992: PUSH
37993: LD_INT 65
37995: PUSH
37996: LD_INT 100
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: LIST
38003: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38004: LD_VAR 0 6
38008: PPUSH
38009: CALL_OW 263
38013: PUSH
38014: LD_INT 1
38016: EQUAL
38017: IFFALSE 38052
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38019: LD_ADDR_VAR 0 10
38023: PUSH
38024: LD_VAR 0 10
38028: PUSH
38029: LD_VAR 0 6
38033: PPUSH
38034: CALL_OW 311
38038: PPUSH
38039: LD_INT 3
38041: PPUSH
38042: CALL_OW 259
38046: PUSH
38047: LD_INT 4
38049: MUL
38050: MUL
38051: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38052: LD_VAR 0 6
38056: PPUSH
38057: CALL_OW 263
38061: PUSH
38062: LD_INT 2
38064: EQUAL
38065: IFFALSE 38116
// begin j := IsControledBy ( i ) ;
38067: LD_ADDR_VAR 0 7
38071: PUSH
38072: LD_VAR 0 6
38076: PPUSH
38077: CALL_OW 312
38081: ST_TO_ADDR
// if j then
38082: LD_VAR 0 7
38086: IFFALSE 38116
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38088: LD_ADDR_VAR 0 10
38092: PUSH
38093: LD_VAR 0 10
38097: PUSH
38098: LD_VAR 0 7
38102: PPUSH
38103: LD_INT 3
38105: PPUSH
38106: CALL_OW 259
38110: PUSH
38111: LD_INT 3
38113: MUL
38114: MUL
38115: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38116: LD_VAR 0 6
38120: PPUSH
38121: CALL_OW 264
38125: PUSH
38126: LD_INT 5
38128: PUSH
38129: LD_INT 6
38131: PUSH
38132: LD_INT 46
38134: PUSH
38135: LD_INT 44
38137: PUSH
38138: LD_INT 47
38140: PUSH
38141: LD_INT 45
38143: PUSH
38144: LD_INT 28
38146: PUSH
38147: LD_INT 7
38149: PUSH
38150: LD_INT 27
38152: PUSH
38153: LD_INT 29
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: IN
38168: IFFALSE 38188
38170: PUSH
38171: LD_VAR 0 1
38175: PPUSH
38176: LD_INT 52
38178: PPUSH
38179: CALL_OW 321
38183: PUSH
38184: LD_INT 2
38186: EQUAL
38187: AND
38188: IFFALSE 38205
// bpoints := bpoints * 1.2 ;
38190: LD_ADDR_VAR 0 10
38194: PUSH
38195: LD_VAR 0 10
38199: PUSH
38200: LD_REAL  1.20000000000000E+0000
38203: MUL
38204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38205: LD_VAR 0 6
38209: PPUSH
38210: CALL_OW 264
38214: PUSH
38215: LD_INT 6
38217: PUSH
38218: LD_INT 46
38220: PUSH
38221: LD_INT 47
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: IN
38229: IFFALSE 38246
// bpoints := bpoints * 1.2 ;
38231: LD_ADDR_VAR 0 10
38235: PUSH
38236: LD_VAR 0 10
38240: PUSH
38241: LD_REAL  1.20000000000000E+0000
38244: MUL
38245: ST_TO_ADDR
// end ; unit_building :
38246: GO 38260
38248: LD_INT 3
38250: DOUBLE
38251: EQUAL
38252: IFTRUE 38256
38254: GO 38259
38256: POP
// ; end ;
38257: GO 38260
38259: POP
// for j = 1 to 3 do
38260: LD_ADDR_VAR 0 7
38264: PUSH
38265: DOUBLE
38266: LD_INT 1
38268: DEC
38269: ST_TO_ADDR
38270: LD_INT 3
38272: PUSH
38273: FOR_TO
38274: IFFALSE 38327
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38276: LD_ADDR_VAR 0 5
38280: PUSH
38281: LD_VAR 0 5
38285: PPUSH
38286: LD_VAR 0 7
38290: PPUSH
38291: LD_VAR 0 5
38295: PUSH
38296: LD_VAR 0 7
38300: ARRAY
38301: PUSH
38302: LD_VAR 0 9
38306: PUSH
38307: LD_VAR 0 7
38311: ARRAY
38312: PUSH
38313: LD_VAR 0 10
38317: MUL
38318: PLUS
38319: PPUSH
38320: CALL_OW 1
38324: ST_TO_ADDR
38325: GO 38273
38327: POP
38328: POP
// end ;
38329: GO 36802
38331: POP
38332: POP
// result := Replace ( result , 4 , tmp ) ;
38333: LD_ADDR_VAR 0 5
38337: PUSH
38338: LD_VAR 0 5
38342: PPUSH
38343: LD_INT 4
38345: PPUSH
38346: LD_VAR 0 8
38350: PPUSH
38351: CALL_OW 1
38355: ST_TO_ADDR
// end ;
38356: LD_VAR 0 5
38360: RET
// export function DangerAtRange ( unit , range ) ; begin
38361: LD_INT 0
38363: PPUSH
// if not unit then
38364: LD_VAR 0 1
38368: NOT
38369: IFFALSE 38373
// exit ;
38371: GO 38418
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38373: LD_ADDR_VAR 0 3
38377: PUSH
38378: LD_VAR 0 1
38382: PPUSH
38383: CALL_OW 255
38387: PPUSH
38388: LD_VAR 0 1
38392: PPUSH
38393: CALL_OW 250
38397: PPUSH
38398: LD_VAR 0 1
38402: PPUSH
38403: CALL_OW 251
38407: PPUSH
38408: LD_VAR 0 2
38412: PPUSH
38413: CALL 36652 0 4
38417: ST_TO_ADDR
// end ;
38418: LD_VAR 0 3
38422: RET
// export function DangerInArea ( side , area ) ; begin
38423: LD_INT 0
38425: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38426: LD_ADDR_VAR 0 3
38430: PUSH
38431: LD_VAR 0 2
38435: PPUSH
38436: LD_INT 81
38438: PUSH
38439: LD_VAR 0 1
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PPUSH
38448: CALL_OW 70
38452: ST_TO_ADDR
// end ;
38453: LD_VAR 0 3
38457: RET
// export function IsExtension ( b ) ; begin
38458: LD_INT 0
38460: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38461: LD_ADDR_VAR 0 2
38465: PUSH
38466: LD_VAR 0 1
38470: PUSH
38471: LD_INT 23
38473: PUSH
38474: LD_INT 20
38476: PUSH
38477: LD_INT 22
38479: PUSH
38480: LD_INT 17
38482: PUSH
38483: LD_INT 24
38485: PUSH
38486: LD_INT 21
38488: PUSH
38489: LD_INT 19
38491: PUSH
38492: LD_INT 16
38494: PUSH
38495: LD_INT 25
38497: PUSH
38498: LD_INT 18
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: IN
38513: ST_TO_ADDR
// end ;
38514: LD_VAR 0 2
38518: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38519: LD_INT 0
38521: PPUSH
38522: PPUSH
38523: PPUSH
// result := [ ] ;
38524: LD_ADDR_VAR 0 4
38528: PUSH
38529: EMPTY
38530: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38531: LD_ADDR_VAR 0 5
38535: PUSH
38536: LD_VAR 0 2
38540: PPUSH
38541: LD_INT 21
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 70
38555: ST_TO_ADDR
// if not tmp then
38556: LD_VAR 0 5
38560: NOT
38561: IFFALSE 38565
// exit ;
38563: GO 38629
// if checkLink then
38565: LD_VAR 0 3
38569: IFFALSE 38619
// begin for i in tmp do
38571: LD_ADDR_VAR 0 6
38575: PUSH
38576: LD_VAR 0 5
38580: PUSH
38581: FOR_IN
38582: IFFALSE 38617
// if GetBase ( i ) <> base then
38584: LD_VAR 0 6
38588: PPUSH
38589: CALL_OW 274
38593: PUSH
38594: LD_VAR 0 1
38598: NONEQUAL
38599: IFFALSE 38615
// ComLinkToBase ( base , i ) ;
38601: LD_VAR 0 1
38605: PPUSH
38606: LD_VAR 0 6
38610: PPUSH
38611: CALL_OW 169
38615: GO 38581
38617: POP
38618: POP
// end ; result := tmp ;
38619: LD_ADDR_VAR 0 4
38623: PUSH
38624: LD_VAR 0 5
38628: ST_TO_ADDR
// end ;
38629: LD_VAR 0 4
38633: RET
// export function ComComplete ( units , b ) ; var i ; begin
38634: LD_INT 0
38636: PPUSH
38637: PPUSH
// if not units then
38638: LD_VAR 0 1
38642: NOT
38643: IFFALSE 38647
// exit ;
38645: GO 38737
// for i in units do
38647: LD_ADDR_VAR 0 4
38651: PUSH
38652: LD_VAR 0 1
38656: PUSH
38657: FOR_IN
38658: IFFALSE 38735
// if BuildingStatus ( b ) = bs_build then
38660: LD_VAR 0 2
38664: PPUSH
38665: CALL_OW 461
38669: PUSH
38670: LD_INT 1
38672: EQUAL
38673: IFFALSE 38733
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38675: LD_VAR 0 4
38679: PPUSH
38680: LD_STRING h
38682: PUSH
38683: LD_VAR 0 2
38687: PPUSH
38688: CALL_OW 250
38692: PUSH
38693: LD_VAR 0 2
38697: PPUSH
38698: CALL_OW 251
38702: PUSH
38703: LD_VAR 0 2
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: PUSH
38726: EMPTY
38727: LIST
38728: PPUSH
38729: CALL_OW 446
38733: GO 38657
38735: POP
38736: POP
// end ;
38737: LD_VAR 0 3
38741: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38742: LD_INT 0
38744: PPUSH
38745: PPUSH
38746: PPUSH
38747: PPUSH
38748: PPUSH
38749: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38750: LD_VAR 0 1
38754: NOT
38755: IFTRUE 38772
38757: PUSH
38758: LD_VAR 0 1
38762: PPUSH
38763: CALL_OW 263
38767: PUSH
38768: LD_INT 2
38770: NONEQUAL
38771: OR
38772: IFFALSE 38776
// exit ;
38774: GO 39092
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38776: LD_ADDR_VAR 0 6
38780: PUSH
38781: LD_INT 22
38783: PUSH
38784: LD_VAR 0 1
38788: PPUSH
38789: CALL_OW 255
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: LD_INT 30
38803: PUSH
38804: LD_INT 36
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 34
38813: PUSH
38814: LD_INT 31
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PPUSH
38830: CALL_OW 69
38834: ST_TO_ADDR
// if not tmp then
38835: LD_VAR 0 6
38839: NOT
38840: IFFALSE 38844
// exit ;
38842: GO 39092
// result := [ ] ;
38844: LD_ADDR_VAR 0 2
38848: PUSH
38849: EMPTY
38850: ST_TO_ADDR
// for i in tmp do
38851: LD_ADDR_VAR 0 3
38855: PUSH
38856: LD_VAR 0 6
38860: PUSH
38861: FOR_IN
38862: IFFALSE 38933
// begin t := UnitsInside ( i ) ;
38864: LD_ADDR_VAR 0 4
38868: PUSH
38869: LD_VAR 0 3
38873: PPUSH
38874: CALL_OW 313
38878: ST_TO_ADDR
// if t then
38879: LD_VAR 0 4
38883: IFFALSE 38931
// for j in t do
38885: LD_ADDR_VAR 0 7
38889: PUSH
38890: LD_VAR 0 4
38894: PUSH
38895: FOR_IN
38896: IFFALSE 38929
// result := Replace ( result , result + 1 , j ) ;
38898: LD_ADDR_VAR 0 2
38902: PUSH
38903: LD_VAR 0 2
38907: PPUSH
38908: LD_VAR 0 2
38912: PUSH
38913: LD_INT 1
38915: PLUS
38916: PPUSH
38917: LD_VAR 0 7
38921: PPUSH
38922: CALL_OW 1
38926: ST_TO_ADDR
38927: GO 38895
38929: POP
38930: POP
// end ;
38931: GO 38861
38933: POP
38934: POP
// if not result then
38935: LD_VAR 0 2
38939: NOT
38940: IFFALSE 38944
// exit ;
38942: GO 39092
// mech := result [ 1 ] ;
38944: LD_ADDR_VAR 0 5
38948: PUSH
38949: LD_VAR 0 2
38953: PUSH
38954: LD_INT 1
38956: ARRAY
38957: ST_TO_ADDR
// if result > 1 then
38958: LD_VAR 0 2
38962: PUSH
38963: LD_INT 1
38965: GREATER
38966: IFFALSE 39078
// begin for i = 2 to result do
38968: LD_ADDR_VAR 0 3
38972: PUSH
38973: DOUBLE
38974: LD_INT 2
38976: DEC
38977: ST_TO_ADDR
38978: LD_VAR 0 2
38982: PUSH
38983: FOR_TO
38984: IFFALSE 39076
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38986: LD_ADDR_VAR 0 4
38990: PUSH
38991: LD_VAR 0 2
38995: PUSH
38996: LD_VAR 0 3
39000: ARRAY
39001: PPUSH
39002: LD_INT 3
39004: PPUSH
39005: CALL_OW 259
39009: PUSH
39010: LD_VAR 0 2
39014: PUSH
39015: LD_VAR 0 3
39019: ARRAY
39020: PPUSH
39021: CALL_OW 432
39025: MINUS
39026: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39027: LD_VAR 0 4
39031: PUSH
39032: LD_VAR 0 5
39036: PPUSH
39037: LD_INT 3
39039: PPUSH
39040: CALL_OW 259
39044: PUSH
39045: LD_VAR 0 5
39049: PPUSH
39050: CALL_OW 432
39054: MINUS
39055: GREATEREQUAL
39056: IFFALSE 39074
// mech := result [ i ] ;
39058: LD_ADDR_VAR 0 5
39062: PUSH
39063: LD_VAR 0 2
39067: PUSH
39068: LD_VAR 0 3
39072: ARRAY
39073: ST_TO_ADDR
// end ;
39074: GO 38983
39076: POP
39077: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39078: LD_VAR 0 1
39082: PPUSH
39083: LD_VAR 0 5
39087: PPUSH
39088: CALL_OW 135
// end ;
39092: LD_VAR 0 2
39096: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39097: LD_INT 0
39099: PPUSH
39100: PPUSH
39101: PPUSH
39102: PPUSH
39103: PPUSH
39104: PPUSH
39105: PPUSH
39106: PPUSH
39107: PPUSH
39108: PPUSH
39109: PPUSH
39110: PPUSH
39111: PPUSH
// result := [ ] ;
39112: LD_ADDR_VAR 0 7
39116: PUSH
39117: EMPTY
39118: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39119: LD_VAR 0 1
39123: PPUSH
39124: CALL_OW 266
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: IN
39139: NOT
39140: IFFALSE 39144
// exit ;
39142: GO 40784
// if name then
39144: LD_VAR 0 3
39148: IFFALSE 39164
// SetBName ( base_dep , name ) ;
39150: LD_VAR 0 1
39154: PPUSH
39155: LD_VAR 0 3
39159: PPUSH
39160: CALL_OW 500
// base := GetBase ( base_dep ) ;
39164: LD_ADDR_VAR 0 15
39168: PUSH
39169: LD_VAR 0 1
39173: PPUSH
39174: CALL_OW 274
39178: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39179: LD_ADDR_VAR 0 16
39183: PUSH
39184: LD_VAR 0 1
39188: PPUSH
39189: CALL_OW 255
39193: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39194: LD_ADDR_VAR 0 17
39198: PUSH
39199: LD_VAR 0 1
39203: PPUSH
39204: CALL_OW 248
39208: ST_TO_ADDR
// if sources then
39209: LD_VAR 0 5
39213: IFFALSE 39260
// for i = 1 to 3 do
39215: LD_ADDR_VAR 0 8
39219: PUSH
39220: DOUBLE
39221: LD_INT 1
39223: DEC
39224: ST_TO_ADDR
39225: LD_INT 3
39227: PUSH
39228: FOR_TO
39229: IFFALSE 39258
// AddResourceType ( base , i , sources [ i ] ) ;
39231: LD_VAR 0 15
39235: PPUSH
39236: LD_VAR 0 8
39240: PPUSH
39241: LD_VAR 0 5
39245: PUSH
39246: LD_VAR 0 8
39250: ARRAY
39251: PPUSH
39252: CALL_OW 276
39256: GO 39228
39258: POP
39259: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39260: LD_ADDR_VAR 0 18
39264: PUSH
39265: LD_VAR 0 15
39269: PPUSH
39270: LD_VAR 0 2
39274: PPUSH
39275: LD_INT 1
39277: PPUSH
39278: CALL 38519 0 3
39282: ST_TO_ADDR
// InitHc ;
39283: CALL_OW 19
// InitUc ;
39287: CALL_OW 18
// uc_side := side ;
39291: LD_ADDR_OWVAR 20
39295: PUSH
39296: LD_VAR 0 16
39300: ST_TO_ADDR
// uc_nation := nation ;
39301: LD_ADDR_OWVAR 21
39305: PUSH
39306: LD_VAR 0 17
39310: ST_TO_ADDR
// if buildings then
39311: LD_VAR 0 18
39315: IFFALSE 40643
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39317: LD_ADDR_VAR 0 19
39321: PUSH
39322: LD_VAR 0 18
39326: PPUSH
39327: LD_INT 2
39329: PUSH
39330: LD_INT 30
39332: PUSH
39333: LD_INT 29
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 30
39342: PUSH
39343: LD_INT 30
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: PPUSH
39355: CALL_OW 72
39359: ST_TO_ADDR
// if tmp then
39360: LD_VAR 0 19
39364: IFFALSE 39412
// for i in tmp do
39366: LD_ADDR_VAR 0 8
39370: PUSH
39371: LD_VAR 0 19
39375: PUSH
39376: FOR_IN
39377: IFFALSE 39410
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39379: LD_VAR 0 8
39383: PPUSH
39384: CALL_OW 250
39388: PPUSH
39389: LD_VAR 0 8
39393: PPUSH
39394: CALL_OW 251
39398: PPUSH
39399: LD_VAR 0 16
39403: PPUSH
39404: CALL_OW 441
39408: GO 39376
39410: POP
39411: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39412: LD_VAR 0 18
39416: PPUSH
39417: LD_INT 2
39419: PUSH
39420: LD_INT 30
39422: PUSH
39423: LD_INT 32
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 30
39432: PUSH
39433: LD_INT 33
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: PPUSH
39445: CALL_OW 72
39449: IFFALSE 39537
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39451: LD_ADDR_VAR 0 8
39455: PUSH
39456: LD_VAR 0 18
39460: PPUSH
39461: LD_INT 2
39463: PUSH
39464: LD_INT 30
39466: PUSH
39467: LD_INT 32
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 30
39476: PUSH
39477: LD_INT 33
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: LIST
39488: PPUSH
39489: CALL_OW 72
39493: PUSH
39494: FOR_IN
39495: IFFALSE 39535
// begin if not GetBWeapon ( i ) then
39497: LD_VAR 0 8
39501: PPUSH
39502: CALL_OW 269
39506: NOT
39507: IFFALSE 39533
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39509: LD_VAR 0 8
39513: PPUSH
39514: LD_VAR 0 8
39518: PPUSH
39519: LD_VAR 0 2
39523: PPUSH
39524: CALL 40789 0 2
39528: PPUSH
39529: CALL_OW 431
// end ;
39533: GO 39494
39535: POP
39536: POP
// end ; for i = 1 to personel do
39537: LD_ADDR_VAR 0 8
39541: PUSH
39542: DOUBLE
39543: LD_INT 1
39545: DEC
39546: ST_TO_ADDR
39547: LD_VAR 0 6
39551: PUSH
39552: FOR_TO
39553: IFFALSE 40623
// begin if i > 4 then
39555: LD_VAR 0 8
39559: PUSH
39560: LD_INT 4
39562: GREATER
39563: IFFALSE 39567
// break ;
39565: GO 40623
// case i of 1 :
39567: LD_VAR 0 8
39571: PUSH
39572: LD_INT 1
39574: DOUBLE
39575: EQUAL
39576: IFTRUE 39580
39578: GO 39660
39580: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39581: LD_ADDR_VAR 0 12
39585: PUSH
39586: LD_VAR 0 18
39590: PPUSH
39591: LD_INT 22
39593: PUSH
39594: LD_VAR 0 16
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 58
39605: PUSH
39606: EMPTY
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: LD_INT 30
39614: PUSH
39615: LD_INT 32
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 30
39624: PUSH
39625: LD_INT 4
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 30
39634: PUSH
39635: LD_INT 5
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: LIST
39652: PPUSH
39653: CALL_OW 72
39657: ST_TO_ADDR
39658: GO 39882
39660: LD_INT 2
39662: DOUBLE
39663: EQUAL
39664: IFTRUE 39668
39666: GO 39730
39668: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39669: LD_ADDR_VAR 0 12
39673: PUSH
39674: LD_VAR 0 18
39678: PPUSH
39679: LD_INT 22
39681: PUSH
39682: LD_VAR 0 16
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: LD_INT 30
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 30
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: LIST
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PPUSH
39723: CALL_OW 72
39727: ST_TO_ADDR
39728: GO 39882
39730: LD_INT 3
39732: DOUBLE
39733: EQUAL
39734: IFTRUE 39738
39736: GO 39800
39738: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39739: LD_ADDR_VAR 0 12
39743: PUSH
39744: LD_VAR 0 18
39748: PPUSH
39749: LD_INT 22
39751: PUSH
39752: LD_VAR 0 16
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: LD_INT 30
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 30
39776: PUSH
39777: LD_INT 3
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: LIST
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PPUSH
39793: CALL_OW 72
39797: ST_TO_ADDR
39798: GO 39882
39800: LD_INT 4
39802: DOUBLE
39803: EQUAL
39804: IFTRUE 39808
39806: GO 39881
39808: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39809: LD_ADDR_VAR 0 12
39813: PUSH
39814: LD_VAR 0 18
39818: PPUSH
39819: LD_INT 22
39821: PUSH
39822: LD_VAR 0 16
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 2
39833: PUSH
39834: LD_INT 30
39836: PUSH
39837: LD_INT 6
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 30
39846: PUSH
39847: LD_INT 7
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 30
39856: PUSH
39857: LD_INT 8
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PPUSH
39874: CALL_OW 72
39878: ST_TO_ADDR
39879: GO 39882
39881: POP
// if i = 1 then
39882: LD_VAR 0 8
39886: PUSH
39887: LD_INT 1
39889: EQUAL
39890: IFFALSE 40001
// begin tmp := [ ] ;
39892: LD_ADDR_VAR 0 19
39896: PUSH
39897: EMPTY
39898: ST_TO_ADDR
// for j in f do
39899: LD_ADDR_VAR 0 9
39903: PUSH
39904: LD_VAR 0 12
39908: PUSH
39909: FOR_IN
39910: IFFALSE 39983
// if GetBType ( j ) = b_bunker then
39912: LD_VAR 0 9
39916: PPUSH
39917: CALL_OW 266
39921: PUSH
39922: LD_INT 32
39924: EQUAL
39925: IFFALSE 39952
// tmp := Insert ( tmp , 1 , j ) else
39927: LD_ADDR_VAR 0 19
39931: PUSH
39932: LD_VAR 0 19
39936: PPUSH
39937: LD_INT 1
39939: PPUSH
39940: LD_VAR 0 9
39944: PPUSH
39945: CALL_OW 2
39949: ST_TO_ADDR
39950: GO 39981
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39952: LD_ADDR_VAR 0 19
39956: PUSH
39957: LD_VAR 0 19
39961: PPUSH
39962: LD_VAR 0 19
39966: PUSH
39967: LD_INT 1
39969: PLUS
39970: PPUSH
39971: LD_VAR 0 9
39975: PPUSH
39976: CALL_OW 2
39980: ST_TO_ADDR
39981: GO 39909
39983: POP
39984: POP
// if tmp then
39985: LD_VAR 0 19
39989: IFFALSE 40001
// f := tmp ;
39991: LD_ADDR_VAR 0 12
39995: PUSH
39996: LD_VAR 0 19
40000: ST_TO_ADDR
// end ; x := personel [ i ] ;
40001: LD_ADDR_VAR 0 13
40005: PUSH
40006: LD_VAR 0 6
40010: PUSH
40011: LD_VAR 0 8
40015: ARRAY
40016: ST_TO_ADDR
// if x = - 1 then
40017: LD_VAR 0 13
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: EQUAL
40026: IFFALSE 40237
// begin for j in f do
40028: LD_ADDR_VAR 0 9
40032: PUSH
40033: LD_VAR 0 12
40037: PUSH
40038: FOR_IN
40039: IFFALSE 40233
// repeat InitHc ;
40041: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40045: LD_VAR 0 9
40049: PPUSH
40050: CALL_OW 266
40054: PUSH
40055: LD_INT 5
40057: EQUAL
40058: IFFALSE 40128
// begin if UnitsInside ( j ) < 3 then
40060: LD_VAR 0 9
40064: PPUSH
40065: CALL_OW 313
40069: PUSH
40070: LD_INT 3
40072: LESS
40073: IFFALSE 40109
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40075: LD_INT 0
40077: PPUSH
40078: LD_INT 5
40080: PUSH
40081: LD_INT 8
40083: PUSH
40084: LD_INT 9
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: PUSH
40092: LD_VAR 0 17
40096: ARRAY
40097: PPUSH
40098: LD_VAR 0 4
40102: PPUSH
40103: CALL_OW 380
40107: GO 40126
// PrepareHuman ( false , i , skill ) ;
40109: LD_INT 0
40111: PPUSH
40112: LD_VAR 0 8
40116: PPUSH
40117: LD_VAR 0 4
40121: PPUSH
40122: CALL_OW 380
// end else
40126: GO 40145
// PrepareHuman ( false , i , skill ) ;
40128: LD_INT 0
40130: PPUSH
40131: LD_VAR 0 8
40135: PPUSH
40136: LD_VAR 0 4
40140: PPUSH
40141: CALL_OW 380
// un := CreateHuman ;
40145: LD_ADDR_VAR 0 14
40149: PUSH
40150: CALL_OW 44
40154: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40155: LD_ADDR_VAR 0 7
40159: PUSH
40160: LD_VAR 0 7
40164: PPUSH
40165: LD_INT 1
40167: PPUSH
40168: LD_VAR 0 14
40172: PPUSH
40173: CALL_OW 2
40177: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40178: LD_VAR 0 14
40182: PPUSH
40183: LD_VAR 0 9
40187: PPUSH
40188: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40192: LD_VAR 0 9
40196: PPUSH
40197: CALL_OW 313
40201: PUSH
40202: LD_INT 6
40204: EQUAL
40205: IFTRUE 40229
40207: PUSH
40208: LD_VAR 0 9
40212: PPUSH
40213: CALL_OW 266
40217: PUSH
40218: LD_INT 32
40220: PUSH
40221: LD_INT 31
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: IN
40228: OR
40229: IFFALSE 40041
40231: GO 40038
40233: POP
40234: POP
// end else
40235: GO 40621
// for j = 1 to x do
40237: LD_ADDR_VAR 0 9
40241: PUSH
40242: DOUBLE
40243: LD_INT 1
40245: DEC
40246: ST_TO_ADDR
40247: LD_VAR 0 13
40251: PUSH
40252: FOR_TO
40253: IFFALSE 40619
// begin InitHc ;
40255: CALL_OW 19
// if not f then
40259: LD_VAR 0 12
40263: NOT
40264: IFFALSE 40353
// begin PrepareHuman ( false , i , skill ) ;
40266: LD_INT 0
40268: PPUSH
40269: LD_VAR 0 8
40273: PPUSH
40274: LD_VAR 0 4
40278: PPUSH
40279: CALL_OW 380
// un := CreateHuman ;
40283: LD_ADDR_VAR 0 14
40287: PUSH
40288: CALL_OW 44
40292: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40293: LD_ADDR_VAR 0 7
40297: PUSH
40298: LD_VAR 0 7
40302: PPUSH
40303: LD_INT 1
40305: PPUSH
40306: LD_VAR 0 14
40310: PPUSH
40311: CALL_OW 2
40315: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40316: LD_VAR 0 14
40320: PPUSH
40321: LD_VAR 0 1
40325: PPUSH
40326: CALL_OW 250
40330: PPUSH
40331: LD_VAR 0 1
40335: PPUSH
40336: CALL_OW 251
40340: PPUSH
40341: LD_INT 10
40343: PPUSH
40344: LD_INT 0
40346: PPUSH
40347: CALL_OW 50
// continue ;
40351: GO 40252
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40353: LD_VAR 0 12
40357: PUSH
40358: LD_INT 1
40360: ARRAY
40361: PPUSH
40362: CALL_OW 313
40366: IFFALSE 40394
40368: PUSH
40369: LD_VAR 0 12
40373: PUSH
40374: LD_INT 1
40376: ARRAY
40377: PPUSH
40378: CALL_OW 266
40382: PUSH
40383: LD_INT 32
40385: PUSH
40386: LD_INT 31
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: IN
40393: AND
40394: IFTRUE 40415
40396: PUSH
40397: LD_VAR 0 12
40401: PUSH
40402: LD_INT 1
40404: ARRAY
40405: PPUSH
40406: CALL_OW 313
40410: PUSH
40411: LD_INT 6
40413: EQUAL
40414: OR
40415: IFFALSE 40435
// f := Delete ( f , 1 ) ;
40417: LD_ADDR_VAR 0 12
40421: PUSH
40422: LD_VAR 0 12
40426: PPUSH
40427: LD_INT 1
40429: PPUSH
40430: CALL_OW 3
40434: ST_TO_ADDR
// if not f then
40435: LD_VAR 0 12
40439: NOT
40440: IFFALSE 40458
// begin x := x + 2 ;
40442: LD_ADDR_VAR 0 13
40446: PUSH
40447: LD_VAR 0 13
40451: PUSH
40452: LD_INT 2
40454: PLUS
40455: ST_TO_ADDR
// continue ;
40456: GO 40252
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40458: LD_VAR 0 12
40462: PUSH
40463: LD_INT 1
40465: ARRAY
40466: PPUSH
40467: CALL_OW 266
40471: PUSH
40472: LD_INT 5
40474: EQUAL
40475: IFFALSE 40549
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40477: LD_VAR 0 12
40481: PUSH
40482: LD_INT 1
40484: ARRAY
40485: PPUSH
40486: CALL_OW 313
40490: PUSH
40491: LD_INT 3
40493: LESS
40494: IFFALSE 40530
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40496: LD_INT 0
40498: PPUSH
40499: LD_INT 5
40501: PUSH
40502: LD_INT 8
40504: PUSH
40505: LD_INT 9
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: LIST
40512: PUSH
40513: LD_VAR 0 17
40517: ARRAY
40518: PPUSH
40519: LD_VAR 0 4
40523: PPUSH
40524: CALL_OW 380
40528: GO 40547
// PrepareHuman ( false , i , skill ) ;
40530: LD_INT 0
40532: PPUSH
40533: LD_VAR 0 8
40537: PPUSH
40538: LD_VAR 0 4
40542: PPUSH
40543: CALL_OW 380
// end else
40547: GO 40566
// PrepareHuman ( false , i , skill ) ;
40549: LD_INT 0
40551: PPUSH
40552: LD_VAR 0 8
40556: PPUSH
40557: LD_VAR 0 4
40561: PPUSH
40562: CALL_OW 380
// un := CreateHuman ;
40566: LD_ADDR_VAR 0 14
40570: PUSH
40571: CALL_OW 44
40575: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40576: LD_ADDR_VAR 0 7
40580: PUSH
40581: LD_VAR 0 7
40585: PPUSH
40586: LD_INT 1
40588: PPUSH
40589: LD_VAR 0 14
40593: PPUSH
40594: CALL_OW 2
40598: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40599: LD_VAR 0 14
40603: PPUSH
40604: LD_VAR 0 12
40608: PUSH
40609: LD_INT 1
40611: ARRAY
40612: PPUSH
40613: CALL_OW 52
// end ;
40617: GO 40252
40619: POP
40620: POP
// end ;
40621: GO 39552
40623: POP
40624: POP
// result := result ^ buildings ;
40625: LD_ADDR_VAR 0 7
40629: PUSH
40630: LD_VAR 0 7
40634: PUSH
40635: LD_VAR 0 18
40639: ADD
40640: ST_TO_ADDR
// end else
40641: GO 40784
// begin for i = 1 to personel do
40643: LD_ADDR_VAR 0 8
40647: PUSH
40648: DOUBLE
40649: LD_INT 1
40651: DEC
40652: ST_TO_ADDR
40653: LD_VAR 0 6
40657: PUSH
40658: FOR_TO
40659: IFFALSE 40782
// begin if i > 4 then
40661: LD_VAR 0 8
40665: PUSH
40666: LD_INT 4
40668: GREATER
40669: IFFALSE 40673
// break ;
40671: GO 40782
// x := personel [ i ] ;
40673: LD_ADDR_VAR 0 13
40677: PUSH
40678: LD_VAR 0 6
40682: PUSH
40683: LD_VAR 0 8
40687: ARRAY
40688: ST_TO_ADDR
// if x = - 1 then
40689: LD_VAR 0 13
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: EQUAL
40698: IFFALSE 40702
// continue ;
40700: GO 40658
// PrepareHuman ( false , i , skill ) ;
40702: LD_INT 0
40704: PPUSH
40705: LD_VAR 0 8
40709: PPUSH
40710: LD_VAR 0 4
40714: PPUSH
40715: CALL_OW 380
// un := CreateHuman ;
40719: LD_ADDR_VAR 0 14
40723: PUSH
40724: CALL_OW 44
40728: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40729: LD_VAR 0 14
40733: PPUSH
40734: LD_VAR 0 1
40738: PPUSH
40739: CALL_OW 250
40743: PPUSH
40744: LD_VAR 0 1
40748: PPUSH
40749: CALL_OW 251
40753: PPUSH
40754: LD_INT 10
40756: PPUSH
40757: LD_INT 0
40759: PPUSH
40760: CALL_OW 50
// result := result ^ un ;
40764: LD_ADDR_VAR 0 7
40768: PUSH
40769: LD_VAR 0 7
40773: PUSH
40774: LD_VAR 0 14
40778: ADD
40779: ST_TO_ADDR
// end ;
40780: GO 40658
40782: POP
40783: POP
// end ; end ;
40784: LD_VAR 0 7
40788: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40789: LD_INT 0
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
40805: PPUSH
40806: PPUSH
// result := false ;
40807: LD_ADDR_VAR 0 3
40811: PUSH
40812: LD_INT 0
40814: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40815: LD_VAR 0 1
40819: NOT
40820: IFTRUE 40845
40822: PUSH
40823: LD_VAR 0 1
40827: PPUSH
40828: CALL_OW 266
40832: PUSH
40833: LD_INT 32
40835: PUSH
40836: LD_INT 33
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: IN
40843: NOT
40844: OR
40845: IFFALSE 40849
// exit ;
40847: GO 41984
// nat := GetNation ( tower ) ;
40849: LD_ADDR_VAR 0 12
40853: PUSH
40854: LD_VAR 0 1
40858: PPUSH
40859: CALL_OW 248
40863: ST_TO_ADDR
// side := GetSide ( tower ) ;
40864: LD_ADDR_VAR 0 16
40868: PUSH
40869: LD_VAR 0 1
40873: PPUSH
40874: CALL_OW 255
40878: ST_TO_ADDR
// x := GetX ( tower ) ;
40879: LD_ADDR_VAR 0 10
40883: PUSH
40884: LD_VAR 0 1
40888: PPUSH
40889: CALL_OW 250
40893: ST_TO_ADDR
// y := GetY ( tower ) ;
40894: LD_ADDR_VAR 0 11
40898: PUSH
40899: LD_VAR 0 1
40903: PPUSH
40904: CALL_OW 251
40908: ST_TO_ADDR
// if not x or not y then
40909: LD_VAR 0 10
40913: NOT
40914: IFTRUE 40923
40916: PUSH
40917: LD_VAR 0 11
40921: NOT
40922: OR
40923: IFFALSE 40927
// exit ;
40925: GO 41984
// weapon := 0 ;
40927: LD_ADDR_VAR 0 18
40931: PUSH
40932: LD_INT 0
40934: ST_TO_ADDR
// fac_list := [ ] ;
40935: LD_ADDR_VAR 0 17
40939: PUSH
40940: EMPTY
40941: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40942: LD_ADDR_VAR 0 6
40946: PUSH
40947: LD_VAR 0 1
40951: PPUSH
40952: CALL_OW 274
40956: PPUSH
40957: LD_VAR 0 2
40961: PPUSH
40962: LD_INT 0
40964: PPUSH
40965: CALL 38519 0 3
40969: PPUSH
40970: LD_INT 30
40972: PUSH
40973: LD_INT 3
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PPUSH
40980: CALL_OW 72
40984: ST_TO_ADDR
// if not factories then
40985: LD_VAR 0 6
40989: NOT
40990: IFFALSE 40994
// exit ;
40992: GO 41984
// for i in factories do
40994: LD_ADDR_VAR 0 8
40998: PUSH
40999: LD_VAR 0 6
41003: PUSH
41004: FOR_IN
41005: IFFALSE 41030
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41007: LD_ADDR_VAR 0 17
41011: PUSH
41012: LD_VAR 0 17
41016: PUSH
41017: LD_VAR 0 8
41021: PPUSH
41022: CALL_OW 478
41026: UNION
41027: ST_TO_ADDR
41028: GO 41004
41030: POP
41031: POP
// if not fac_list then
41032: LD_VAR 0 17
41036: NOT
41037: IFFALSE 41041
// exit ;
41039: GO 41984
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41041: LD_ADDR_VAR 0 5
41045: PUSH
41046: LD_INT 4
41048: PUSH
41049: LD_INT 5
41051: PUSH
41052: LD_INT 9
41054: PUSH
41055: LD_INT 10
41057: PUSH
41058: LD_INT 6
41060: PUSH
41061: LD_INT 7
41063: PUSH
41064: LD_INT 11
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 27
41078: PUSH
41079: LD_INT 28
41081: PUSH
41082: LD_INT 26
41084: PUSH
41085: LD_INT 30
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 43
41096: PUSH
41097: LD_INT 44
41099: PUSH
41100: LD_INT 46
41102: PUSH
41103: LD_INT 45
41105: PUSH
41106: LD_INT 47
41108: PUSH
41109: LD_INT 49
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: LIST
41124: PUSH
41125: LD_VAR 0 12
41129: ARRAY
41130: ST_TO_ADDR
// list := list isect fac_list ;
41131: LD_ADDR_VAR 0 5
41135: PUSH
41136: LD_VAR 0 5
41140: PUSH
41141: LD_VAR 0 17
41145: ISECT
41146: ST_TO_ADDR
// if not list then
41147: LD_VAR 0 5
41151: NOT
41152: IFFALSE 41156
// exit ;
41154: GO 41984
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41156: LD_VAR 0 12
41160: PUSH
41161: LD_INT 3
41163: EQUAL
41164: IFFALSE 41176
41166: PUSH
41167: LD_INT 49
41169: PUSH
41170: LD_VAR 0 5
41174: IN
41175: AND
41176: IFFALSE 41196
41178: PUSH
41179: LD_INT 31
41181: PPUSH
41182: LD_VAR 0 16
41186: PPUSH
41187: CALL_OW 321
41191: PUSH
41192: LD_INT 2
41194: EQUAL
41195: AND
41196: IFFALSE 41256
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41198: LD_INT 22
41200: PUSH
41201: LD_VAR 0 16
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 35
41212: PUSH
41213: LD_INT 49
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 91
41222: PUSH
41223: LD_VAR 0 1
41227: PUSH
41228: LD_INT 10
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: LIST
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: LIST
41240: PPUSH
41241: CALL_OW 69
41245: NOT
41246: IFFALSE 41256
// weapon := ru_time_lapser ;
41248: LD_ADDR_VAR 0 18
41252: PUSH
41253: LD_INT 49
41255: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41256: LD_VAR 0 12
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: IN
41271: IFFALSE 41295
41273: PUSH
41274: LD_INT 11
41276: PUSH
41277: LD_VAR 0 5
41281: IN
41282: IFTRUE 41294
41284: PUSH
41285: LD_INT 30
41287: PUSH
41288: LD_VAR 0 5
41292: IN
41293: OR
41294: AND
41295: IFFALSE 41315
41297: PUSH
41298: LD_INT 6
41300: PPUSH
41301: LD_VAR 0 16
41305: PPUSH
41306: CALL_OW 321
41310: PUSH
41311: LD_INT 2
41313: EQUAL
41314: AND
41315: IFFALSE 41482
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41317: LD_INT 22
41319: PUSH
41320: LD_VAR 0 16
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 35
41334: PUSH
41335: LD_INT 11
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 35
41344: PUSH
41345: LD_INT 30
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 91
41359: PUSH
41360: LD_VAR 0 1
41364: PUSH
41365: LD_INT 18
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: LIST
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: LIST
41377: PPUSH
41378: CALL_OW 69
41382: NOT
41383: IFFALSE 41459
41385: PUSH
41386: LD_INT 22
41388: PUSH
41389: LD_VAR 0 16
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: LD_INT 30
41403: PUSH
41404: LD_INT 32
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 30
41413: PUSH
41414: LD_INT 33
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 91
41428: PUSH
41429: LD_VAR 0 1
41433: PUSH
41434: LD_INT 12
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: LIST
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: LIST
41446: PUSH
41447: EMPTY
41448: LIST
41449: PPUSH
41450: CALL_OW 69
41454: PUSH
41455: LD_INT 2
41457: GREATER
41458: AND
41459: IFFALSE 41482
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41461: LD_ADDR_VAR 0 18
41465: PUSH
41466: LD_INT 11
41468: PUSH
41469: LD_INT 30
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_VAR 0 12
41480: ARRAY
41481: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41482: LD_VAR 0 18
41486: NOT
41487: IFFALSE 41507
41489: PUSH
41490: LD_INT 40
41492: PPUSH
41493: LD_VAR 0 16
41497: PPUSH
41498: CALL_OW 321
41502: PUSH
41503: LD_INT 2
41505: EQUAL
41506: AND
41507: IFFALSE 41543
41509: PUSH
41510: LD_INT 7
41512: PUSH
41513: LD_VAR 0 5
41517: IN
41518: IFTRUE 41530
41520: PUSH
41521: LD_INT 28
41523: PUSH
41524: LD_VAR 0 5
41528: IN
41529: OR
41530: IFTRUE 41542
41532: PUSH
41533: LD_INT 45
41535: PUSH
41536: LD_VAR 0 5
41540: IN
41541: OR
41542: AND
41543: IFFALSE 41797
// begin hex := GetHexInfo ( x , y ) ;
41545: LD_ADDR_VAR 0 4
41549: PUSH
41550: LD_VAR 0 10
41554: PPUSH
41555: LD_VAR 0 11
41559: PPUSH
41560: CALL_OW 546
41564: ST_TO_ADDR
// if hex [ 1 ] then
41565: LD_VAR 0 4
41569: PUSH
41570: LD_INT 1
41572: ARRAY
41573: IFFALSE 41577
// exit ;
41575: GO 41984
// height := hex [ 2 ] ;
41577: LD_ADDR_VAR 0 15
41581: PUSH
41582: LD_VAR 0 4
41586: PUSH
41587: LD_INT 2
41589: ARRAY
41590: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41591: LD_ADDR_VAR 0 14
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: LD_INT 3
41604: PUSH
41605: LD_INT 5
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: ST_TO_ADDR
// for i in tmp do
41614: LD_ADDR_VAR 0 8
41618: PUSH
41619: LD_VAR 0 14
41623: PUSH
41624: FOR_IN
41625: IFFALSE 41795
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41627: LD_ADDR_VAR 0 9
41631: PUSH
41632: LD_VAR 0 10
41636: PPUSH
41637: LD_VAR 0 8
41641: PPUSH
41642: LD_INT 5
41644: PPUSH
41645: CALL_OW 272
41649: PUSH
41650: LD_VAR 0 11
41654: PPUSH
41655: LD_VAR 0 8
41659: PPUSH
41660: LD_INT 5
41662: PPUSH
41663: CALL_OW 273
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41672: LD_VAR 0 9
41676: PUSH
41677: LD_INT 1
41679: ARRAY
41680: PPUSH
41681: LD_VAR 0 9
41685: PUSH
41686: LD_INT 2
41688: ARRAY
41689: PPUSH
41690: CALL_OW 488
41694: IFFALSE 41793
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41696: LD_ADDR_VAR 0 4
41700: PUSH
41701: LD_VAR 0 9
41705: PUSH
41706: LD_INT 1
41708: ARRAY
41709: PPUSH
41710: LD_VAR 0 9
41714: PUSH
41715: LD_INT 2
41717: ARRAY
41718: PPUSH
41719: CALL_OW 546
41723: ST_TO_ADDR
// if hex [ 1 ] then
41724: LD_VAR 0 4
41728: PUSH
41729: LD_INT 1
41731: ARRAY
41732: IFFALSE 41736
// continue ;
41734: GO 41624
// h := hex [ 2 ] ;
41736: LD_ADDR_VAR 0 13
41740: PUSH
41741: LD_VAR 0 4
41745: PUSH
41746: LD_INT 2
41748: ARRAY
41749: ST_TO_ADDR
// if h + 7 < height then
41750: LD_VAR 0 13
41754: PUSH
41755: LD_INT 7
41757: PLUS
41758: PUSH
41759: LD_VAR 0 15
41763: LESS
41764: IFFALSE 41793
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41766: LD_ADDR_VAR 0 18
41770: PUSH
41771: LD_INT 7
41773: PUSH
41774: LD_INT 28
41776: PUSH
41777: LD_INT 45
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: PUSH
41785: LD_VAR 0 12
41789: ARRAY
41790: ST_TO_ADDR
// break ;
41791: GO 41795
// end ; end ; end ;
41793: GO 41624
41795: POP
41796: POP
// end ; if not weapon then
41797: LD_VAR 0 18
41801: NOT
41802: IFFALSE 41862
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41804: LD_ADDR_VAR 0 5
41808: PUSH
41809: LD_VAR 0 5
41813: PUSH
41814: LD_INT 11
41816: PUSH
41817: LD_INT 30
41819: PUSH
41820: LD_INT 49
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: DIFF
41828: ST_TO_ADDR
// if not list then
41829: LD_VAR 0 5
41833: NOT
41834: IFFALSE 41838
// exit ;
41836: GO 41984
// weapon := list [ rand ( 1 , list ) ] ;
41838: LD_ADDR_VAR 0 18
41842: PUSH
41843: LD_VAR 0 5
41847: PUSH
41848: LD_INT 1
41850: PPUSH
41851: LD_VAR 0 5
41855: PPUSH
41856: CALL_OW 12
41860: ARRAY
41861: ST_TO_ADDR
// end ; if weapon then
41862: LD_VAR 0 18
41866: IFFALSE 41984
// begin tmp := CostOfWeapon ( weapon ) ;
41868: LD_ADDR_VAR 0 14
41872: PUSH
41873: LD_VAR 0 18
41877: PPUSH
41878: CALL_OW 451
41882: ST_TO_ADDR
// j := GetBase ( tower ) ;
41883: LD_ADDR_VAR 0 9
41887: PUSH
41888: LD_VAR 0 1
41892: PPUSH
41893: CALL_OW 274
41897: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41898: LD_VAR 0 9
41902: PPUSH
41903: LD_INT 1
41905: PPUSH
41906: CALL_OW 275
41910: PUSH
41911: LD_VAR 0 14
41915: PUSH
41916: LD_INT 1
41918: ARRAY
41919: GREATEREQUAL
41920: IFFALSE 41946
41922: PUSH
41923: LD_VAR 0 9
41927: PPUSH
41928: LD_INT 2
41930: PPUSH
41931: CALL_OW 275
41935: PUSH
41936: LD_VAR 0 14
41940: PUSH
41941: LD_INT 2
41943: ARRAY
41944: GREATEREQUAL
41945: AND
41946: IFFALSE 41972
41948: PUSH
41949: LD_VAR 0 9
41953: PPUSH
41954: LD_INT 3
41956: PPUSH
41957: CALL_OW 275
41961: PUSH
41962: LD_VAR 0 14
41966: PUSH
41967: LD_INT 3
41969: ARRAY
41970: GREATEREQUAL
41971: AND
41972: IFFALSE 41984
// result := weapon ;
41974: LD_ADDR_VAR 0 3
41978: PUSH
41979: LD_VAR 0 18
41983: ST_TO_ADDR
// end ; end ;
41984: LD_VAR 0 3
41988: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41989: LD_INT 0
41991: PPUSH
41992: PPUSH
// result := true ;
41993: LD_ADDR_VAR 0 3
41997: PUSH
41998: LD_INT 1
42000: ST_TO_ADDR
// if array1 = array2 then
42001: LD_VAR 0 1
42005: PUSH
42006: LD_VAR 0 2
42010: EQUAL
42011: IFFALSE 42071
// begin for i = 1 to array1 do
42013: LD_ADDR_VAR 0 4
42017: PUSH
42018: DOUBLE
42019: LD_INT 1
42021: DEC
42022: ST_TO_ADDR
42023: LD_VAR 0 1
42027: PUSH
42028: FOR_TO
42029: IFFALSE 42067
// if array1 [ i ] <> array2 [ i ] then
42031: LD_VAR 0 1
42035: PUSH
42036: LD_VAR 0 4
42040: ARRAY
42041: PUSH
42042: LD_VAR 0 2
42046: PUSH
42047: LD_VAR 0 4
42051: ARRAY
42052: NONEQUAL
42053: IFFALSE 42065
// begin result := false ;
42055: LD_ADDR_VAR 0 3
42059: PUSH
42060: LD_INT 0
42062: ST_TO_ADDR
// break ;
42063: GO 42067
// end ;
42065: GO 42028
42067: POP
42068: POP
// end else
42069: GO 42079
// result := false ;
42071: LD_ADDR_VAR 0 3
42075: PUSH
42076: LD_INT 0
42078: ST_TO_ADDR
// end ;
42079: LD_VAR 0 3
42083: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42084: LD_INT 0
42086: PPUSH
42087: PPUSH
// if not array1 or not array2 then
42088: LD_VAR 0 1
42092: NOT
42093: IFTRUE 42102
42095: PUSH
42096: LD_VAR 0 2
42100: NOT
42101: OR
42102: IFFALSE 42106
// exit ;
42104: GO 42170
// result := true ;
42106: LD_ADDR_VAR 0 3
42110: PUSH
42111: LD_INT 1
42113: ST_TO_ADDR
// for i = 1 to array1 do
42114: LD_ADDR_VAR 0 4
42118: PUSH
42119: DOUBLE
42120: LD_INT 1
42122: DEC
42123: ST_TO_ADDR
42124: LD_VAR 0 1
42128: PUSH
42129: FOR_TO
42130: IFFALSE 42168
// if array1 [ i ] <> array2 [ i ] then
42132: LD_VAR 0 1
42136: PUSH
42137: LD_VAR 0 4
42141: ARRAY
42142: PUSH
42143: LD_VAR 0 2
42147: PUSH
42148: LD_VAR 0 4
42152: ARRAY
42153: NONEQUAL
42154: IFFALSE 42166
// begin result := false ;
42156: LD_ADDR_VAR 0 3
42160: PUSH
42161: LD_INT 0
42163: ST_TO_ADDR
// break ;
42164: GO 42168
// end ;
42166: GO 42129
42168: POP
42169: POP
// end ;
42170: LD_VAR 0 3
42174: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42175: LD_INT 0
42177: PPUSH
42178: PPUSH
42179: PPUSH
// pom := GetBase ( fac ) ;
42180: LD_ADDR_VAR 0 5
42184: PUSH
42185: LD_VAR 0 1
42189: PPUSH
42190: CALL_OW 274
42194: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42195: LD_ADDR_VAR 0 4
42199: PUSH
42200: LD_VAR 0 2
42204: PUSH
42205: LD_INT 1
42207: ARRAY
42208: PPUSH
42209: LD_VAR 0 2
42213: PUSH
42214: LD_INT 2
42216: ARRAY
42217: PPUSH
42218: LD_VAR 0 2
42222: PUSH
42223: LD_INT 3
42225: ARRAY
42226: PPUSH
42227: LD_VAR 0 2
42231: PUSH
42232: LD_INT 4
42234: ARRAY
42235: PPUSH
42236: CALL_OW 449
42240: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42241: LD_ADDR_VAR 0 3
42245: PUSH
42246: LD_VAR 0 5
42250: PPUSH
42251: LD_INT 1
42253: PPUSH
42254: CALL_OW 275
42258: PUSH
42259: LD_VAR 0 4
42263: PUSH
42264: LD_INT 1
42266: ARRAY
42267: GREATEREQUAL
42268: IFFALSE 42294
42270: PUSH
42271: LD_VAR 0 5
42275: PPUSH
42276: LD_INT 2
42278: PPUSH
42279: CALL_OW 275
42283: PUSH
42284: LD_VAR 0 4
42288: PUSH
42289: LD_INT 2
42291: ARRAY
42292: GREATEREQUAL
42293: AND
42294: IFFALSE 42320
42296: PUSH
42297: LD_VAR 0 5
42301: PPUSH
42302: LD_INT 3
42304: PPUSH
42305: CALL_OW 275
42309: PUSH
42310: LD_VAR 0 4
42314: PUSH
42315: LD_INT 3
42317: ARRAY
42318: GREATEREQUAL
42319: AND
42320: ST_TO_ADDR
// end ;
42321: LD_VAR 0 3
42325: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42326: LD_INT 0
42328: PPUSH
42329: PPUSH
42330: PPUSH
42331: PPUSH
// pom := GetBase ( building ) ;
42332: LD_ADDR_VAR 0 3
42336: PUSH
42337: LD_VAR 0 1
42341: PPUSH
42342: CALL_OW 274
42346: ST_TO_ADDR
// if not pom then
42347: LD_VAR 0 3
42351: NOT
42352: IFFALSE 42356
// exit ;
42354: GO 42530
// btype := GetBType ( building ) ;
42356: LD_ADDR_VAR 0 5
42360: PUSH
42361: LD_VAR 0 1
42365: PPUSH
42366: CALL_OW 266
42370: ST_TO_ADDR
// if btype = b_armoury then
42371: LD_VAR 0 5
42375: PUSH
42376: LD_INT 4
42378: EQUAL
42379: IFFALSE 42389
// btype := b_barracks ;
42381: LD_ADDR_VAR 0 5
42385: PUSH
42386: LD_INT 5
42388: ST_TO_ADDR
// if btype = b_depot then
42389: LD_VAR 0 5
42393: PUSH
42394: LD_INT 0
42396: EQUAL
42397: IFFALSE 42407
// btype := b_warehouse ;
42399: LD_ADDR_VAR 0 5
42403: PUSH
42404: LD_INT 1
42406: ST_TO_ADDR
// if btype = b_workshop then
42407: LD_VAR 0 5
42411: PUSH
42412: LD_INT 2
42414: EQUAL
42415: IFFALSE 42425
// btype := b_factory ;
42417: LD_ADDR_VAR 0 5
42421: PUSH
42422: LD_INT 3
42424: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42425: LD_ADDR_VAR 0 4
42429: PUSH
42430: LD_VAR 0 5
42434: PPUSH
42435: LD_VAR 0 1
42439: PPUSH
42440: CALL_OW 248
42444: PPUSH
42445: CALL_OW 450
42449: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42450: LD_ADDR_VAR 0 2
42454: PUSH
42455: LD_VAR 0 3
42459: PPUSH
42460: LD_INT 1
42462: PPUSH
42463: CALL_OW 275
42467: PUSH
42468: LD_VAR 0 4
42472: PUSH
42473: LD_INT 1
42475: ARRAY
42476: GREATEREQUAL
42477: IFFALSE 42503
42479: PUSH
42480: LD_VAR 0 3
42484: PPUSH
42485: LD_INT 2
42487: PPUSH
42488: CALL_OW 275
42492: PUSH
42493: LD_VAR 0 4
42497: PUSH
42498: LD_INT 2
42500: ARRAY
42501: GREATEREQUAL
42502: AND
42503: IFFALSE 42529
42505: PUSH
42506: LD_VAR 0 3
42510: PPUSH
42511: LD_INT 3
42513: PPUSH
42514: CALL_OW 275
42518: PUSH
42519: LD_VAR 0 4
42523: PUSH
42524: LD_INT 3
42526: ARRAY
42527: GREATEREQUAL
42528: AND
42529: ST_TO_ADDR
// end ;
42530: LD_VAR 0 2
42534: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42535: LD_INT 0
42537: PPUSH
42538: PPUSH
42539: PPUSH
// pom := GetBase ( building ) ;
42540: LD_ADDR_VAR 0 4
42544: PUSH
42545: LD_VAR 0 1
42549: PPUSH
42550: CALL_OW 274
42554: ST_TO_ADDR
// if not pom then
42555: LD_VAR 0 4
42559: NOT
42560: IFFALSE 42564
// exit ;
42562: GO 42669
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42564: LD_ADDR_VAR 0 5
42568: PUSH
42569: LD_VAR 0 2
42573: PPUSH
42574: LD_VAR 0 1
42578: PPUSH
42579: CALL_OW 248
42583: PPUSH
42584: CALL_OW 450
42588: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42589: LD_ADDR_VAR 0 3
42593: PUSH
42594: LD_VAR 0 4
42598: PPUSH
42599: LD_INT 1
42601: PPUSH
42602: CALL_OW 275
42606: PUSH
42607: LD_VAR 0 5
42611: PUSH
42612: LD_INT 1
42614: ARRAY
42615: GREATEREQUAL
42616: IFFALSE 42642
42618: PUSH
42619: LD_VAR 0 4
42623: PPUSH
42624: LD_INT 2
42626: PPUSH
42627: CALL_OW 275
42631: PUSH
42632: LD_VAR 0 5
42636: PUSH
42637: LD_INT 2
42639: ARRAY
42640: GREATEREQUAL
42641: AND
42642: IFFALSE 42668
42644: PUSH
42645: LD_VAR 0 4
42649: PPUSH
42650: LD_INT 3
42652: PPUSH
42653: CALL_OW 275
42657: PUSH
42658: LD_VAR 0 5
42662: PUSH
42663: LD_INT 3
42665: ARRAY
42666: GREATEREQUAL
42667: AND
42668: ST_TO_ADDR
// end ;
42669: LD_VAR 0 3
42673: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42674: LD_INT 0
42676: PPUSH
42677: PPUSH
42678: PPUSH
42679: PPUSH
42680: PPUSH
42681: PPUSH
42682: PPUSH
42683: PPUSH
42684: PPUSH
42685: PPUSH
42686: PPUSH
// result := false ;
42687: LD_ADDR_VAR 0 8
42691: PUSH
42692: LD_INT 0
42694: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42695: LD_VAR 0 5
42699: NOT
42700: IFTRUE 42709
42702: PUSH
42703: LD_VAR 0 1
42707: NOT
42708: OR
42709: IFTRUE 42718
42711: PUSH
42712: LD_VAR 0 2
42716: NOT
42717: OR
42718: IFTRUE 42727
42720: PUSH
42721: LD_VAR 0 3
42725: NOT
42726: OR
42727: IFFALSE 42731
// exit ;
42729: GO 43557
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42731: LD_ADDR_VAR 0 14
42735: PUSH
42736: LD_VAR 0 1
42740: PPUSH
42741: LD_VAR 0 2
42745: PPUSH
42746: LD_VAR 0 3
42750: PPUSH
42751: LD_VAR 0 4
42755: PPUSH
42756: LD_VAR 0 5
42760: PUSH
42761: LD_INT 1
42763: ARRAY
42764: PPUSH
42765: CALL_OW 248
42769: PPUSH
42770: LD_INT 0
42772: PPUSH
42773: CALL 44838 0 6
42777: ST_TO_ADDR
// if not hexes then
42778: LD_VAR 0 14
42782: NOT
42783: IFFALSE 42787
// exit ;
42785: GO 43557
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42787: LD_ADDR_VAR 0 17
42791: PUSH
42792: LD_VAR 0 5
42796: PPUSH
42797: LD_INT 22
42799: PUSH
42800: LD_VAR 0 13
42804: PPUSH
42805: CALL_OW 255
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: LD_INT 30
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 30
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PPUSH
42846: CALL_OW 72
42850: ST_TO_ADDR
// for i = 1 to hexes do
42851: LD_ADDR_VAR 0 9
42855: PUSH
42856: DOUBLE
42857: LD_INT 1
42859: DEC
42860: ST_TO_ADDR
42861: LD_VAR 0 14
42865: PUSH
42866: FOR_TO
42867: IFFALSE 43555
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42869: LD_ADDR_VAR 0 13
42873: PUSH
42874: LD_VAR 0 14
42878: PUSH
42879: LD_VAR 0 9
42883: ARRAY
42884: PUSH
42885: LD_INT 1
42887: ARRAY
42888: PPUSH
42889: LD_VAR 0 14
42893: PUSH
42894: LD_VAR 0 9
42898: ARRAY
42899: PUSH
42900: LD_INT 2
42902: ARRAY
42903: PPUSH
42904: CALL_OW 428
42908: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42909: LD_VAR 0 14
42913: PUSH
42914: LD_VAR 0 9
42918: ARRAY
42919: PUSH
42920: LD_INT 1
42922: ARRAY
42923: PPUSH
42924: LD_VAR 0 14
42928: PUSH
42929: LD_VAR 0 9
42933: ARRAY
42934: PUSH
42935: LD_INT 2
42937: ARRAY
42938: PPUSH
42939: CALL_OW 351
42943: IFTRUE 42982
42945: PUSH
42946: LD_VAR 0 14
42950: PUSH
42951: LD_VAR 0 9
42955: ARRAY
42956: PUSH
42957: LD_INT 1
42959: ARRAY
42960: PPUSH
42961: LD_VAR 0 14
42965: PUSH
42966: LD_VAR 0 9
42970: ARRAY
42971: PUSH
42972: LD_INT 2
42974: ARRAY
42975: PPUSH
42976: CALL_OW 488
42980: NOT
42981: OR
42982: IFTRUE 42999
42984: PUSH
42985: LD_VAR 0 13
42989: PPUSH
42990: CALL_OW 247
42994: PUSH
42995: LD_INT 3
42997: EQUAL
42998: OR
42999: IFFALSE 43005
// exit ;
43001: POP
43002: POP
43003: GO 43557
// if not tmp then
43005: LD_VAR 0 13
43009: NOT
43010: IFFALSE 43014
// continue ;
43012: GO 42866
// result := true ;
43014: LD_ADDR_VAR 0 8
43018: PUSH
43019: LD_INT 1
43021: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43022: LD_VAR 0 6
43026: IFFALSE 43043
43028: PUSH
43029: LD_VAR 0 13
43033: PPUSH
43034: CALL_OW 247
43038: PUSH
43039: LD_INT 2
43041: EQUAL
43042: AND
43043: IFFALSE 43060
43045: PUSH
43046: LD_VAR 0 13
43050: PPUSH
43051: CALL_OW 263
43055: PUSH
43056: LD_INT 1
43058: EQUAL
43059: AND
43060: IFFALSE 43224
// begin if IsDrivenBy ( tmp ) then
43062: LD_VAR 0 13
43066: PPUSH
43067: CALL_OW 311
43071: IFFALSE 43075
// continue ;
43073: GO 42866
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43075: LD_VAR 0 6
43079: PPUSH
43080: LD_INT 3
43082: PUSH
43083: LD_INT 60
43085: PUSH
43086: EMPTY
43087: LIST
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 3
43095: PUSH
43096: LD_INT 55
43098: PUSH
43099: EMPTY
43100: LIST
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PPUSH
43110: CALL_OW 72
43114: IFFALSE 43222
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43116: LD_ADDR_VAR 0 18
43120: PUSH
43121: LD_VAR 0 6
43125: PPUSH
43126: LD_INT 3
43128: PUSH
43129: LD_INT 60
43131: PUSH
43132: EMPTY
43133: LIST
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: LD_INT 55
43144: PUSH
43145: EMPTY
43146: LIST
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PPUSH
43156: CALL_OW 72
43160: PUSH
43161: LD_INT 1
43163: ARRAY
43164: ST_TO_ADDR
// if IsInUnit ( driver ) then
43165: LD_VAR 0 18
43169: PPUSH
43170: CALL_OW 310
43174: IFFALSE 43185
// ComExit ( driver ) ;
43176: LD_VAR 0 18
43180: PPUSH
43181: CALL 68838 0 1
// AddComEnterUnit ( driver , tmp ) ;
43185: LD_VAR 0 18
43189: PPUSH
43190: LD_VAR 0 13
43194: PPUSH
43195: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43199: LD_VAR 0 18
43203: PPUSH
43204: LD_VAR 0 7
43208: PPUSH
43209: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43213: LD_VAR 0 18
43217: PPUSH
43218: CALL_OW 181
// end ; continue ;
43222: GO 42866
// end ; if not cleaners or not tmp in cleaners then
43224: LD_VAR 0 6
43228: NOT
43229: IFTRUE 43244
43231: PUSH
43232: LD_VAR 0 13
43236: PUSH
43237: LD_VAR 0 6
43241: IN
43242: NOT
43243: OR
43244: IFFALSE 43553
// begin if dep then
43246: LD_VAR 0 17
43250: IFFALSE 43386
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43252: LD_ADDR_VAR 0 16
43256: PUSH
43257: LD_VAR 0 17
43261: PUSH
43262: LD_INT 1
43264: ARRAY
43265: PPUSH
43266: CALL_OW 250
43270: PPUSH
43271: LD_VAR 0 17
43275: PUSH
43276: LD_INT 1
43278: ARRAY
43279: PPUSH
43280: CALL_OW 254
43284: PPUSH
43285: LD_INT 5
43287: PPUSH
43288: CALL_OW 272
43292: PUSH
43293: LD_VAR 0 17
43297: PUSH
43298: LD_INT 1
43300: ARRAY
43301: PPUSH
43302: CALL_OW 251
43306: PPUSH
43307: LD_VAR 0 17
43311: PUSH
43312: LD_INT 1
43314: ARRAY
43315: PPUSH
43316: CALL_OW 254
43320: PPUSH
43321: LD_INT 5
43323: PPUSH
43324: CALL_OW 273
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43333: LD_VAR 0 16
43337: PUSH
43338: LD_INT 1
43340: ARRAY
43341: PPUSH
43342: LD_VAR 0 16
43346: PUSH
43347: LD_INT 2
43349: ARRAY
43350: PPUSH
43351: CALL_OW 488
43355: IFFALSE 43386
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43357: LD_VAR 0 13
43361: PPUSH
43362: LD_VAR 0 16
43366: PUSH
43367: LD_INT 1
43369: ARRAY
43370: PPUSH
43371: LD_VAR 0 16
43375: PUSH
43376: LD_INT 2
43378: ARRAY
43379: PPUSH
43380: CALL_OW 111
// continue ;
43384: GO 42866
// end ; end ; r := GetDir ( tmp ) ;
43386: LD_ADDR_VAR 0 15
43390: PUSH
43391: LD_VAR 0 13
43395: PPUSH
43396: CALL_OW 254
43400: ST_TO_ADDR
// if r = 5 then
43401: LD_VAR 0 15
43405: PUSH
43406: LD_INT 5
43408: EQUAL
43409: IFFALSE 43419
// r := 0 ;
43411: LD_ADDR_VAR 0 15
43415: PUSH
43416: LD_INT 0
43418: ST_TO_ADDR
// for j = r to 5 do
43419: LD_ADDR_VAR 0 10
43423: PUSH
43424: DOUBLE
43425: LD_VAR 0 15
43429: DEC
43430: ST_TO_ADDR
43431: LD_INT 5
43433: PUSH
43434: FOR_TO
43435: IFFALSE 43551
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43437: LD_ADDR_VAR 0 11
43441: PUSH
43442: LD_VAR 0 13
43446: PPUSH
43447: CALL_OW 250
43451: PPUSH
43452: LD_VAR 0 10
43456: PPUSH
43457: LD_INT 2
43459: PPUSH
43460: CALL_OW 272
43464: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43465: LD_ADDR_VAR 0 12
43469: PUSH
43470: LD_VAR 0 13
43474: PPUSH
43475: CALL_OW 251
43479: PPUSH
43480: LD_VAR 0 10
43484: PPUSH
43485: LD_INT 2
43487: PPUSH
43488: CALL_OW 273
43492: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43493: LD_VAR 0 11
43497: PPUSH
43498: LD_VAR 0 12
43502: PPUSH
43503: CALL_OW 488
43507: IFFALSE 43526
43509: PUSH
43510: LD_VAR 0 11
43514: PPUSH
43515: LD_VAR 0 12
43519: PPUSH
43520: CALL_OW 428
43524: NOT
43525: AND
43526: IFFALSE 43549
// begin ComMoveXY ( tmp , _x , _y ) ;
43528: LD_VAR 0 13
43532: PPUSH
43533: LD_VAR 0 11
43537: PPUSH
43538: LD_VAR 0 12
43542: PPUSH
43543: CALL_OW 111
// break ;
43547: GO 43551
// end ; end ;
43549: GO 43434
43551: POP
43552: POP
// end ; end ;
43553: GO 42866
43555: POP
43556: POP
// end ;
43557: LD_VAR 0 8
43561: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43562: LD_INT 0
43564: PPUSH
// result := true ;
43565: LD_ADDR_VAR 0 3
43569: PUSH
43570: LD_INT 1
43572: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43573: LD_VAR 0 2
43577: PUSH
43578: LD_INT 24
43580: DOUBLE
43581: EQUAL
43582: IFTRUE 43592
43584: LD_INT 33
43586: DOUBLE
43587: EQUAL
43588: IFTRUE 43592
43590: GO 43617
43592: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43593: LD_ADDR_VAR 0 3
43597: PUSH
43598: LD_INT 32
43600: PPUSH
43601: LD_VAR 0 1
43605: PPUSH
43606: CALL_OW 321
43610: PUSH
43611: LD_INT 2
43613: EQUAL
43614: ST_TO_ADDR
43615: GO 43933
43617: LD_INT 20
43619: DOUBLE
43620: EQUAL
43621: IFTRUE 43625
43623: GO 43650
43625: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43626: LD_ADDR_VAR 0 3
43630: PUSH
43631: LD_INT 6
43633: PPUSH
43634: LD_VAR 0 1
43638: PPUSH
43639: CALL_OW 321
43643: PUSH
43644: LD_INT 2
43646: EQUAL
43647: ST_TO_ADDR
43648: GO 43933
43650: LD_INT 22
43652: DOUBLE
43653: EQUAL
43654: IFTRUE 43664
43656: LD_INT 36
43658: DOUBLE
43659: EQUAL
43660: IFTRUE 43664
43662: GO 43689
43664: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43665: LD_ADDR_VAR 0 3
43669: PUSH
43670: LD_INT 15
43672: PPUSH
43673: LD_VAR 0 1
43677: PPUSH
43678: CALL_OW 321
43682: PUSH
43683: LD_INT 2
43685: EQUAL
43686: ST_TO_ADDR
43687: GO 43933
43689: LD_INT 30
43691: DOUBLE
43692: EQUAL
43693: IFTRUE 43697
43695: GO 43722
43697: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43698: LD_ADDR_VAR 0 3
43702: PUSH
43703: LD_INT 20
43705: PPUSH
43706: LD_VAR 0 1
43710: PPUSH
43711: CALL_OW 321
43715: PUSH
43716: LD_INT 2
43718: EQUAL
43719: ST_TO_ADDR
43720: GO 43933
43722: LD_INT 28
43724: DOUBLE
43725: EQUAL
43726: IFTRUE 43736
43728: LD_INT 21
43730: DOUBLE
43731: EQUAL
43732: IFTRUE 43736
43734: GO 43761
43736: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43737: LD_ADDR_VAR 0 3
43741: PUSH
43742: LD_INT 21
43744: PPUSH
43745: LD_VAR 0 1
43749: PPUSH
43750: CALL_OW 321
43754: PUSH
43755: LD_INT 2
43757: EQUAL
43758: ST_TO_ADDR
43759: GO 43933
43761: LD_INT 16
43763: DOUBLE
43764: EQUAL
43765: IFTRUE 43769
43767: GO 43794
43769: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43770: LD_ADDR_VAR 0 3
43774: PUSH
43775: LD_INT 84
43777: PPUSH
43778: LD_VAR 0 1
43782: PPUSH
43783: CALL_OW 321
43787: PUSH
43788: LD_INT 2
43790: EQUAL
43791: ST_TO_ADDR
43792: GO 43933
43794: LD_INT 19
43796: DOUBLE
43797: EQUAL
43798: IFTRUE 43808
43800: LD_INT 23
43802: DOUBLE
43803: EQUAL
43804: IFTRUE 43808
43806: GO 43833
43808: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43809: LD_ADDR_VAR 0 3
43813: PUSH
43814: LD_INT 83
43816: PPUSH
43817: LD_VAR 0 1
43821: PPUSH
43822: CALL_OW 321
43826: PUSH
43827: LD_INT 2
43829: EQUAL
43830: ST_TO_ADDR
43831: GO 43933
43833: LD_INT 17
43835: DOUBLE
43836: EQUAL
43837: IFTRUE 43841
43839: GO 43866
43841: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43842: LD_ADDR_VAR 0 3
43846: PUSH
43847: LD_INT 39
43849: PPUSH
43850: LD_VAR 0 1
43854: PPUSH
43855: CALL_OW 321
43859: PUSH
43860: LD_INT 2
43862: EQUAL
43863: ST_TO_ADDR
43864: GO 43933
43866: LD_INT 18
43868: DOUBLE
43869: EQUAL
43870: IFTRUE 43874
43872: GO 43899
43874: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43875: LD_ADDR_VAR 0 3
43879: PUSH
43880: LD_INT 40
43882: PPUSH
43883: LD_VAR 0 1
43887: PPUSH
43888: CALL_OW 321
43892: PUSH
43893: LD_INT 2
43895: EQUAL
43896: ST_TO_ADDR
43897: GO 43933
43899: LD_INT 27
43901: DOUBLE
43902: EQUAL
43903: IFTRUE 43907
43905: GO 43932
43907: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43908: LD_ADDR_VAR 0 3
43912: PUSH
43913: LD_INT 35
43915: PPUSH
43916: LD_VAR 0 1
43920: PPUSH
43921: CALL_OW 321
43925: PUSH
43926: LD_INT 2
43928: EQUAL
43929: ST_TO_ADDR
43930: GO 43933
43932: POP
// end ;
43933: LD_VAR 0 3
43937: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43938: LD_INT 0
43940: PPUSH
43941: PPUSH
43942: PPUSH
43943: PPUSH
43944: PPUSH
43945: PPUSH
43946: PPUSH
43947: PPUSH
43948: PPUSH
43949: PPUSH
43950: PPUSH
// result := false ;
43951: LD_ADDR_VAR 0 6
43955: PUSH
43956: LD_INT 0
43958: ST_TO_ADDR
// if btype = b_depot then
43959: LD_VAR 0 2
43963: PUSH
43964: LD_INT 0
43966: EQUAL
43967: IFFALSE 43979
// begin result := true ;
43969: LD_ADDR_VAR 0 6
43973: PUSH
43974: LD_INT 1
43976: ST_TO_ADDR
// exit ;
43977: GO 44833
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43979: LD_VAR 0 1
43983: NOT
43984: IFTRUE 44009
43986: PUSH
43987: LD_VAR 0 1
43991: PPUSH
43992: CALL_OW 266
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: IN
44007: NOT
44008: OR
44009: IFTRUE 44018
44011: PUSH
44012: LD_VAR 0 2
44016: NOT
44017: OR
44018: IFTRUE 44054
44020: PUSH
44021: LD_VAR 0 5
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: LD_INT 2
44034: PUSH
44035: LD_INT 3
44037: PUSH
44038: LD_INT 4
44040: PUSH
44041: LD_INT 5
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: IN
44052: NOT
44053: OR
44054: IFTRUE 44073
44056: PUSH
44057: LD_VAR 0 3
44061: PPUSH
44062: LD_VAR 0 4
44066: PPUSH
44067: CALL_OW 488
44071: NOT
44072: OR
44073: IFFALSE 44077
// exit ;
44075: GO 44833
// side := GetSide ( depot ) ;
44077: LD_ADDR_VAR 0 9
44081: PUSH
44082: LD_VAR 0 1
44086: PPUSH
44087: CALL_OW 255
44091: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44092: LD_VAR 0 9
44096: PPUSH
44097: LD_VAR 0 2
44101: PPUSH
44102: CALL 43562 0 2
44106: NOT
44107: IFFALSE 44111
// exit ;
44109: GO 44833
// pom := GetBase ( depot ) ;
44111: LD_ADDR_VAR 0 10
44115: PUSH
44116: LD_VAR 0 1
44120: PPUSH
44121: CALL_OW 274
44125: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44126: LD_ADDR_VAR 0 11
44130: PUSH
44131: LD_VAR 0 2
44135: PPUSH
44136: LD_VAR 0 1
44140: PPUSH
44141: CALL_OW 248
44145: PPUSH
44146: CALL_OW 450
44150: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44151: LD_VAR 0 10
44155: PPUSH
44156: LD_INT 1
44158: PPUSH
44159: CALL_OW 275
44163: PUSH
44164: LD_VAR 0 11
44168: PUSH
44169: LD_INT 1
44171: ARRAY
44172: GREATEREQUAL
44173: IFFALSE 44199
44175: PUSH
44176: LD_VAR 0 10
44180: PPUSH
44181: LD_INT 2
44183: PPUSH
44184: CALL_OW 275
44188: PUSH
44189: LD_VAR 0 11
44193: PUSH
44194: LD_INT 2
44196: ARRAY
44197: GREATEREQUAL
44198: AND
44199: IFFALSE 44225
44201: PUSH
44202: LD_VAR 0 10
44206: PPUSH
44207: LD_INT 3
44209: PPUSH
44210: CALL_OW 275
44214: PUSH
44215: LD_VAR 0 11
44219: PUSH
44220: LD_INT 3
44222: ARRAY
44223: GREATEREQUAL
44224: AND
44225: NOT
44226: IFFALSE 44230
// exit ;
44228: GO 44833
// if GetBType ( depot ) = b_depot then
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 266
44239: PUSH
44240: LD_INT 0
44242: EQUAL
44243: IFFALSE 44255
// dist := 28 else
44245: LD_ADDR_VAR 0 14
44249: PUSH
44250: LD_INT 28
44252: ST_TO_ADDR
44253: GO 44263
// dist := 36 ;
44255: LD_ADDR_VAR 0 14
44259: PUSH
44260: LD_INT 36
44262: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44263: LD_VAR 0 1
44267: PPUSH
44268: LD_VAR 0 3
44272: PPUSH
44273: LD_VAR 0 4
44277: PPUSH
44278: CALL_OW 297
44282: PUSH
44283: LD_VAR 0 14
44287: GREATER
44288: IFFALSE 44292
// exit ;
44290: GO 44833
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44292: LD_ADDR_VAR 0 12
44296: PUSH
44297: LD_VAR 0 2
44301: PPUSH
44302: LD_VAR 0 3
44306: PPUSH
44307: LD_VAR 0 4
44311: PPUSH
44312: LD_VAR 0 5
44316: PPUSH
44317: LD_VAR 0 1
44321: PPUSH
44322: CALL_OW 248
44326: PPUSH
44327: LD_INT 0
44329: PPUSH
44330: CALL 44838 0 6
44334: ST_TO_ADDR
// if not hexes then
44335: LD_VAR 0 12
44339: NOT
44340: IFFALSE 44344
// exit ;
44342: GO 44833
// hex := GetHexInfo ( x , y ) ;
44344: LD_ADDR_VAR 0 15
44348: PUSH
44349: LD_VAR 0 3
44353: PPUSH
44354: LD_VAR 0 4
44358: PPUSH
44359: CALL_OW 546
44363: ST_TO_ADDR
// if hex [ 1 ] then
44364: LD_VAR 0 15
44368: PUSH
44369: LD_INT 1
44371: ARRAY
44372: IFFALSE 44376
// exit ;
44374: GO 44833
// height := hex [ 2 ] ;
44376: LD_ADDR_VAR 0 13
44380: PUSH
44381: LD_VAR 0 15
44385: PUSH
44386: LD_INT 2
44388: ARRAY
44389: ST_TO_ADDR
// for i = 1 to hexes do
44390: LD_ADDR_VAR 0 7
44394: PUSH
44395: DOUBLE
44396: LD_INT 1
44398: DEC
44399: ST_TO_ADDR
44400: LD_VAR 0 12
44404: PUSH
44405: FOR_TO
44406: IFFALSE 44750
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44408: LD_VAR 0 12
44412: PUSH
44413: LD_VAR 0 7
44417: ARRAY
44418: PUSH
44419: LD_INT 1
44421: ARRAY
44422: PPUSH
44423: LD_VAR 0 12
44427: PUSH
44428: LD_VAR 0 7
44432: ARRAY
44433: PUSH
44434: LD_INT 2
44436: ARRAY
44437: PPUSH
44438: CALL_OW 488
44442: NOT
44443: IFTRUE 44485
44445: PUSH
44446: LD_VAR 0 12
44450: PUSH
44451: LD_VAR 0 7
44455: ARRAY
44456: PUSH
44457: LD_INT 1
44459: ARRAY
44460: PPUSH
44461: LD_VAR 0 12
44465: PUSH
44466: LD_VAR 0 7
44470: ARRAY
44471: PUSH
44472: LD_INT 2
44474: ARRAY
44475: PPUSH
44476: CALL_OW 428
44480: PUSH
44481: LD_INT 0
44483: GREATER
44484: OR
44485: IFTRUE 44523
44487: PUSH
44488: LD_VAR 0 12
44492: PUSH
44493: LD_VAR 0 7
44497: ARRAY
44498: PUSH
44499: LD_INT 1
44501: ARRAY
44502: PPUSH
44503: LD_VAR 0 12
44507: PUSH
44508: LD_VAR 0 7
44512: ARRAY
44513: PUSH
44514: LD_INT 2
44516: ARRAY
44517: PPUSH
44518: CALL_OW 351
44522: OR
44523: IFFALSE 44529
// exit ;
44525: POP
44526: POP
44527: GO 44833
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44529: LD_ADDR_VAR 0 8
44533: PUSH
44534: LD_VAR 0 12
44538: PUSH
44539: LD_VAR 0 7
44543: ARRAY
44544: PUSH
44545: LD_INT 1
44547: ARRAY
44548: PPUSH
44549: LD_VAR 0 12
44553: PUSH
44554: LD_VAR 0 7
44558: ARRAY
44559: PUSH
44560: LD_INT 2
44562: ARRAY
44563: PPUSH
44564: CALL_OW 546
44568: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44569: LD_VAR 0 8
44573: PUSH
44574: LD_INT 1
44576: ARRAY
44577: IFTRUE 44599
44579: PUSH
44580: LD_VAR 0 8
44584: PUSH
44585: LD_INT 2
44587: ARRAY
44588: PUSH
44589: LD_VAR 0 13
44593: PUSH
44594: LD_INT 2
44596: PLUS
44597: GREATER
44598: OR
44599: IFTRUE 44621
44601: PUSH
44602: LD_VAR 0 8
44606: PUSH
44607: LD_INT 2
44609: ARRAY
44610: PUSH
44611: LD_VAR 0 13
44615: PUSH
44616: LD_INT 2
44618: MINUS
44619: LESS
44620: OR
44621: IFTRUE 44689
44623: PUSH
44624: LD_VAR 0 8
44628: PUSH
44629: LD_INT 3
44631: ARRAY
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 8
44638: PUSH
44639: LD_INT 9
44641: PUSH
44642: LD_INT 10
44644: PUSH
44645: LD_INT 11
44647: PUSH
44648: LD_INT 12
44650: PUSH
44651: LD_INT 13
44653: PUSH
44654: LD_INT 16
44656: PUSH
44657: LD_INT 17
44659: PUSH
44660: LD_INT 18
44662: PUSH
44663: LD_INT 19
44665: PUSH
44666: LD_INT 20
44668: PUSH
44669: LD_INT 21
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: IN
44687: NOT
44688: OR
44689: IFTRUE 44702
44691: PUSH
44692: LD_VAR 0 8
44696: PUSH
44697: LD_INT 5
44699: ARRAY
44700: NOT
44701: OR
44702: IFTRUE 44742
44704: PUSH
44705: LD_VAR 0 8
44709: PUSH
44710: LD_INT 6
44712: ARRAY
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: LD_INT 7
44722: PUSH
44723: LD_INT 9
44725: PUSH
44726: LD_INT 10
44728: PUSH
44729: LD_INT 11
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: IN
44740: NOT
44741: OR
44742: IFFALSE 44748
// exit ;
44744: POP
44745: POP
44746: GO 44833
// end ;
44748: GO 44405
44750: POP
44751: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44752: LD_VAR 0 9
44756: PPUSH
44757: LD_VAR 0 3
44761: PPUSH
44762: LD_VAR 0 4
44766: PPUSH
44767: LD_INT 20
44769: PPUSH
44770: CALL 36652 0 4
44774: PUSH
44775: LD_INT 4
44777: ARRAY
44778: IFFALSE 44782
// exit ;
44780: GO 44833
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44782: LD_VAR 0 2
44786: PUSH
44787: LD_INT 29
44789: PUSH
44790: LD_INT 30
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: IN
44797: IFFALSE 44821
44799: PUSH
44800: LD_VAR 0 3
44804: PPUSH
44805: LD_VAR 0 4
44809: PPUSH
44810: LD_VAR 0 9
44814: PPUSH
44815: CALL_OW 440
44819: NOT
44820: AND
44821: IFFALSE 44825
// exit ;
44823: GO 44833
// result := true ;
44825: LD_ADDR_VAR 0 6
44829: PUSH
44830: LD_INT 1
44832: ST_TO_ADDR
// end ;
44833: LD_VAR 0 6
44837: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44838: LD_INT 0
44840: PPUSH
44841: PPUSH
44842: PPUSH
44843: PPUSH
44844: PPUSH
44845: PPUSH
44846: PPUSH
44847: PPUSH
44848: PPUSH
44849: PPUSH
44850: PPUSH
44851: PPUSH
44852: PPUSH
44853: PPUSH
44854: PPUSH
44855: PPUSH
44856: PPUSH
44857: PPUSH
44858: PPUSH
44859: PPUSH
44860: PPUSH
44861: PPUSH
44862: PPUSH
44863: PPUSH
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
44869: PPUSH
44870: PPUSH
44871: PPUSH
44872: PPUSH
44873: PPUSH
44874: PPUSH
44875: PPUSH
44876: PPUSH
44877: PPUSH
44878: PPUSH
44879: PPUSH
44880: PPUSH
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
44887: PPUSH
44888: PPUSH
44889: PPUSH
44890: PPUSH
44891: PPUSH
44892: PPUSH
44893: PPUSH
44894: PPUSH
44895: PPUSH
44896: PPUSH
44897: PPUSH
// result = [ ] ;
44898: LD_ADDR_VAR 0 7
44902: PUSH
44903: EMPTY
44904: ST_TO_ADDR
// temp_list = [ ] ;
44905: LD_ADDR_VAR 0 9
44909: PUSH
44910: EMPTY
44911: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44912: LD_VAR 0 4
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 3
44928: PUSH
44929: LD_INT 4
44931: PUSH
44932: LD_INT 5
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: IN
44943: NOT
44944: IFTRUE 44987
44946: PUSH
44947: LD_VAR 0 1
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: IN
44962: IFFALSE 44986
44964: PUSH
44965: LD_VAR 0 5
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: LD_INT 3
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: IN
44984: NOT
44985: AND
44986: OR
44987: IFFALSE 44991
// exit ;
44989: GO 63390
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44991: LD_VAR 0 1
44995: PUSH
44996: LD_INT 6
44998: PUSH
44999: LD_INT 7
45001: PUSH
45002: LD_INT 8
45004: PUSH
45005: LD_INT 13
45007: PUSH
45008: LD_INT 12
45010: PUSH
45011: LD_INT 15
45013: PUSH
45014: LD_INT 11
45016: PUSH
45017: LD_INT 14
45019: PUSH
45020: LD_INT 10
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: IN
45034: IFFALSE 45044
// btype = b_lab ;
45036: LD_ADDR_VAR 0 1
45040: PUSH
45041: LD_INT 6
45043: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45044: LD_VAR 0 6
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: IN
45063: NOT
45064: IFTRUE 45132
45066: PUSH
45067: LD_VAR 0 1
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: LD_INT 3
45083: PUSH
45084: LD_INT 6
45086: PUSH
45087: LD_INT 36
45089: PUSH
45090: LD_INT 4
45092: PUSH
45093: LD_INT 5
45095: PUSH
45096: LD_INT 31
45098: PUSH
45099: LD_INT 32
45101: PUSH
45102: LD_INT 33
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: IN
45118: NOT
45119: IFFALSE 45131
45121: PUSH
45122: LD_VAR 0 6
45126: PUSH
45127: LD_INT 1
45129: EQUAL
45130: AND
45131: OR
45132: IFTRUE 45164
45134: PUSH
45135: LD_VAR 0 1
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 3
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: IN
45150: NOT
45151: IFFALSE 45163
45153: PUSH
45154: LD_VAR 0 6
45158: PUSH
45159: LD_INT 2
45161: EQUAL
45162: AND
45163: OR
45164: IFFALSE 45174
// mode = 0 ;
45166: LD_ADDR_VAR 0 6
45170: PUSH
45171: LD_INT 0
45173: ST_TO_ADDR
// case mode of 0 :
45174: LD_VAR 0 6
45178: PUSH
45179: LD_INT 0
45181: DOUBLE
45182: EQUAL
45183: IFTRUE 45187
45185: GO 56640
45187: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45188: LD_ADDR_VAR 0 11
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: LD_INT 3
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 3
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45381: LD_ADDR_VAR 0 12
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 3
45538: NEG
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 3
45549: NEG
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45577: LD_ADDR_VAR 0 13
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: LD_INT 3
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: NEG
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 3
45748: NEG
45749: PUSH
45750: LD_INT 3
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45776: LD_ADDR_VAR 0 14
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 3
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 3
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45972: LD_ADDR_VAR 0 15
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 3
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46165: LD_ADDR_VAR 0 16
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 3
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 3
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: LD_INT 3
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46358: LD_ADDR_VAR 0 17
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46588: LD_ADDR_VAR 0 18
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: LD_INT 2
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46818: LD_ADDR_VAR 0 19
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 2
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47048: LD_ADDR_VAR 0 20
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 2
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47278: LD_ADDR_VAR 0 21
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47508: LD_ADDR_VAR 0 22
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47738: LD_ADDR_VAR 0 23
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 3
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 3
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48018: LD_ADDR_VAR 0 24
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 3
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48294: LD_ADDR_VAR 0 25
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 2
48481: NEG
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: LD_INT 3
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 3
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48568: LD_ADDR_VAR 0 26
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: LD_INT 3
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 3
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48844: LD_ADDR_VAR 0 27
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 2
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 3
49089: NEG
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49124: LD_ADDR_VAR 0 28
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: LD_INT 2
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 2
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 3
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: LD_INT 3
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 3
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 3
49371: NEG
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49406: LD_ADDR_VAR 0 29
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: LD_INT 3
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 3
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 3
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 3
49650: NEG
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49685: LD_ADDR_VAR 0 30
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 3
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: LD_INT 3
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 3
49928: NEG
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49963: LD_ADDR_VAR 0 31
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 3
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50241: LD_ADDR_VAR 0 32
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: NEG
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: LD_INT 3
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 3
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 3
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50519: LD_ADDR_VAR 0 33
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 3
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 3
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 3
50763: NEG
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50798: LD_ADDR_VAR 0 34
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 3
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: LD_INT 3
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 3
51043: NEG
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51078: LD_ADDR_VAR 0 35
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51190: LD_ADDR_VAR 0 36
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51302: LD_ADDR_VAR 0 37
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51414: LD_ADDR_VAR 0 38
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51526: LD_ADDR_VAR 0 39
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51638: LD_ADDR_VAR 0 40
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51750: LD_ADDR_VAR 0 41
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 3
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 3
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 3
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 3
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: LD_INT 3
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 3
52024: NEG
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 3
52047: NEG
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 3
52059: NEG
52060: PUSH
52061: LD_INT 3
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52100: LD_ADDR_VAR 0 42
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 3
52336: PUSH
52337: LD_INT 2
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 3
52346: PUSH
52347: LD_INT 3
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: LD_INT 3
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 3
52397: NEG
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52450: LD_ADDR_VAR 0 43
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 3
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: LD_INT 3
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: LD_INT 2
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 3
52746: NEG
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 3
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52798: LD_ADDR_VAR 0 44
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: NEG
52989: PUSH
52990: LD_INT 3
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 3
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 3
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 3
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 3
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 3
53072: NEG
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 3
53083: NEG
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 3
53095: NEG
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 3
53107: NEG
53108: PUSH
53109: LD_INT 3
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53148: LD_ADDR_VAR 0 45
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 3
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: NEG
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: NEG
53458: PUSH
53459: LD_INT 3
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53498: LD_ADDR_VAR 0 46
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 3
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 3
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 3
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 3
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 3
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 3
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 3
53794: NEG
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 3
53805: NEG
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53846: LD_ADDR_VAR 0 47
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53997: LD_ADDR_VAR 0 48
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54144: LD_ADDR_VAR 0 49
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54288: LD_ADDR_VAR 0 50
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54432: LD_ADDR_VAR 0 51
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 2
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54579: LD_ADDR_VAR 0 52
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54730: LD_ADDR_VAR 0 53
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 2
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54960: LD_ADDR_VAR 0 54
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: LD_INT 2
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55190: LD_ADDR_VAR 0 55
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: LD_INT 2
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55420: LD_ADDR_VAR 0 56
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: LD_INT 2
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55650: LD_ADDR_VAR 0 57
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: LD_INT 2
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 2
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: LD_INT 2
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55880: LD_ADDR_VAR 0 58
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56110: LD_ADDR_VAR 0 59
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56198: LD_ADDR_VAR 0 60
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56286: LD_ADDR_VAR 0 61
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56374: LD_ADDR_VAR 0 62
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56462: LD_ADDR_VAR 0 63
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56550: LD_ADDR_VAR 0 64
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: ST_TO_ADDR
// end ; 1 :
56638: GO 62535
56640: LD_INT 1
56642: DOUBLE
56643: EQUAL
56644: IFTRUE 56648
56646: GO 59271
56648: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56649: LD_ADDR_VAR 0 11
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: LIST
56692: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56693: LD_ADDR_VAR 0 12
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56734: LD_ADDR_VAR 0 13
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: LIST
56773: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56774: LD_ADDR_VAR 0 14
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 3
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56815: LD_ADDR_VAR 0 15
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 3
56833: NEG
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 3
56844: NEG
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: LIST
56858: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56859: LD_ADDR_VAR 0 16
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: LD_INT 3
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 3
56878: NEG
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 3
56890: NEG
56891: PUSH
56892: LD_INT 3
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56905: LD_ADDR_VAR 0 17
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 3
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56949: LD_ADDR_VAR 0 18
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 3
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 3
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: LIST
56989: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56990: LD_ADDR_VAR 0 19
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 3
57007: PUSH
57008: LD_INT 3
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: LD_INT 3
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: LIST
57029: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57030: LD_ADDR_VAR 0 20
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 2
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: LIST
57070: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57071: LD_ADDR_VAR 0 21
57075: PUSH
57076: LD_INT 2
57078: NEG
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 3
57100: NEG
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57115: LD_ADDR_VAR 0 22
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: LD_INT 3
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: NEG
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 3
57146: NEG
57147: PUSH
57148: LD_INT 3
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57161: LD_ADDR_VAR 0 23
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 3
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: LD_INT 4
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: LD_INT 3
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57205: LD_ADDR_VAR 0 24
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 3
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: LIST
57245: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57246: LD_ADDR_VAR 0 25
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: LD_INT 3
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: LD_INT 4
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: LIST
57285: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57286: LD_ADDR_VAR 0 26
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: LD_INT 4
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: LIST
57326: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57327: LD_ADDR_VAR 0 27
57331: PUSH
57332: LD_INT 3
57334: NEG
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 3
57345: NEG
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 4
57356: NEG
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57371: LD_ADDR_VAR 0 28
57375: PUSH
57376: LD_INT 3
57378: NEG
57379: PUSH
57380: LD_INT 3
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 3
57390: NEG
57391: PUSH
57392: LD_INT 4
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 4
57402: NEG
57403: PUSH
57404: LD_INT 3
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57417: LD_ADDR_VAR 0 29
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: LD_INT 3
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: LD_INT 4
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 4
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 5
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 5
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: LD_INT 4
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: LD_INT 6
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 6
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: LD_INT 5
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57572: LD_ADDR_VAR 0 30
57576: PUSH
57577: LD_INT 2
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 3
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 4
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 4
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 4
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 5
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 5
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 5
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 6
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 6
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57715: LD_ADDR_VAR 0 31
57719: PUSH
57720: LD_INT 3
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 3
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: LD_INT 3
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 4
57752: PUSH
57753: LD_INT 3
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 4
57762: PUSH
57763: LD_INT 4
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 3
57772: PUSH
57773: LD_INT 4
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 5
57782: PUSH
57783: LD_INT 4
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 5
57792: PUSH
57793: LD_INT 5
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 4
57802: PUSH
57803: LD_INT 5
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 6
57812: PUSH
57813: LD_INT 5
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 6
57822: PUSH
57823: LD_INT 6
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 5
57832: PUSH
57833: LD_INT 6
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57854: LD_ADDR_VAR 0 32
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 3
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 3
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: LD_INT 2
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 4
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 4
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 5
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 5
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 4
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 6
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 6
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 5
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57997: LD_ADDR_VAR 0 33
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 3
58038: NEG
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 4
58049: NEG
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 4
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 4
58072: NEG
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 5
58083: NEG
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 5
58094: NEG
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 5
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 6
58117: NEG
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 6
58128: NEG
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58152: LD_ADDR_VAR 0 34
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 3
58171: NEG
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 3
58183: NEG
58184: PUSH
58185: LD_INT 3
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 3
58195: NEG
58196: PUSH
58197: LD_INT 4
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 4
58207: NEG
58208: PUSH
58209: LD_INT 3
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 4
58219: NEG
58220: PUSH
58221: LD_INT 4
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 4
58231: NEG
58232: PUSH
58233: LD_INT 5
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 5
58243: NEG
58244: PUSH
58245: LD_INT 4
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 5
58255: NEG
58256: PUSH
58257: LD_INT 5
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 5
58267: NEG
58268: PUSH
58269: LD_INT 6
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 6
58279: NEG
58280: PUSH
58281: LD_INT 5
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 6
58291: NEG
58292: PUSH
58293: LD_INT 6
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58315: LD_ADDR_VAR 0 41
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: LIST
58358: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58359: LD_ADDR_VAR 0 42
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: LIST
58399: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58400: LD_ADDR_VAR 0 43
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: LD_INT 3
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: LIST
58439: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58440: LD_ADDR_VAR 0 44
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: LIST
58480: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58481: LD_ADDR_VAR 0 45
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 2
58499: NEG
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: LD_INT 1
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: LIST
58524: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58525: LD_ADDR_VAR 0 46
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: LIST
58570: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58571: LD_ADDR_VAR 0 47
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: LD_INT 3
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 3
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58604: LD_ADDR_VAR 0 48
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58635: LD_ADDR_VAR 0 49
58639: PUSH
58640: LD_INT 3
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 3
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58664: LD_ADDR_VAR 0 50
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: LD_INT 3
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 3
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58693: LD_ADDR_VAR 0 51
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58724: LD_ADDR_VAR 0 52
58728: PUSH
58729: LD_INT 3
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 3
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58757: LD_ADDR_VAR 0 53
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 3
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: LIST
58800: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58801: LD_ADDR_VAR 0 54
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58842: LD_ADDR_VAR 0 55
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 3
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58882: LD_ADDR_VAR 0 56
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: LD_INT 3
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: LIST
58922: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58923: LD_ADDR_VAR 0 57
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 3
58941: NEG
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 3
58952: NEG
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: LIST
58966: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58967: LD_ADDR_VAR 0 58
58971: PUSH
58972: LD_INT 2
58974: NEG
58975: PUSH
58976: LD_INT 3
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 3
58986: NEG
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 3
58998: NEG
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: LIST
59012: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59013: LD_ADDR_VAR 0 59
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59057: LD_ADDR_VAR 0 60
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: LIST
59097: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59098: LD_ADDR_VAR 0 61
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: LIST
59137: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59138: LD_ADDR_VAR 0 62
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: LD_INT 2
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: LIST
59178: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59179: LD_ADDR_VAR 0 63
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59223: LD_ADDR_VAR 0 64
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: LIST
59268: ST_TO_ADDR
// end ; 2 :
59269: GO 62535
59271: LD_INT 2
59273: DOUBLE
59274: EQUAL
59275: IFTRUE 59279
59277: GO 62534
59279: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59280: LD_ADDR_VAR 0 29
59284: PUSH
59285: LD_INT 4
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 4
59297: PUSH
59298: LD_INT 1
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 5
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 5
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 4
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 3
59359: PUSH
59360: LD_INT 2
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 5
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 3
59390: PUSH
59391: LD_INT 2
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 4
59400: PUSH
59401: LD_INT 3
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 4
59410: PUSH
59411: LD_INT 4
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 3
59420: PUSH
59421: LD_INT 4
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 2
59430: PUSH
59431: LD_INT 3
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 2
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 4
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: LD_INT 4
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 4
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 4
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: LD_INT 5
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 5
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 4
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 3
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 5
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 3
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 3
59574: NEG
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 2
59597: NEG
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 3
59608: NEG
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 4
59619: NEG
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 4
59630: NEG
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 4
59642: NEG
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 2
59654: NEG
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 4
59665: NEG
59666: PUSH
59667: LD_INT 4
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 4
59677: NEG
59678: PUSH
59679: LD_INT 5
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 3
59689: NEG
59690: PUSH
59691: LD_INT 4
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 3
59701: NEG
59702: PUSH
59703: LD_INT 3
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 4
59713: NEG
59714: PUSH
59715: LD_INT 3
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 5
59725: NEG
59726: PUSH
59727: LD_INT 4
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 5
59737: NEG
59738: PUSH
59739: LD_INT 5
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: NEG
59750: PUSH
59751: LD_INT 5
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 5
59761: NEG
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59818: LD_ADDR_VAR 0 30
59822: PUSH
59823: LD_INT 4
59825: PUSH
59826: LD_INT 4
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 4
59835: PUSH
59836: LD_INT 3
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 5
59845: PUSH
59846: LD_INT 4
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 5
59855: PUSH
59856: LD_INT 5
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 4
59865: PUSH
59866: LD_INT 5
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 3
59875: PUSH
59876: LD_INT 4
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 3
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 5
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 3
59905: PUSH
59906: LD_INT 5
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: LD_INT 3
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: LD_INT 4
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 4
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: LD_INT 3
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 4
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: NEG
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 4
60008: NEG
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 4
60019: NEG
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 3
60031: NEG
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 3
60042: NEG
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 4
60053: NEG
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 5
60064: NEG
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 5
60075: NEG
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 5
60087: NEG
60088: PUSH
60089: LD_INT 2
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: LD_INT 3
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 3
60122: NEG
60123: PUSH
60124: LD_INT 4
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: LD_INT 3
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 3
60158: NEG
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 4
60170: NEG
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 4
60182: NEG
60183: PUSH
60184: LD_INT 4
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 4
60206: NEG
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 4
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: LD_INT 5
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 4
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: LD_INT 3
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: LD_INT 3
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 4
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 5
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: LD_INT 3
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: LD_INT 5
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60365: LD_ADDR_VAR 0 31
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: LD_INT 4
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: LD_INT 4
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: LD_INT 5
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 5
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: LD_INT 4
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: NEG
60434: PUSH
60435: LD_INT 3
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: LD_INT 5
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 3
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 3
60465: NEG
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 3
60476: NEG
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 2
60499: NEG
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 3
60510: NEG
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 4
60521: NEG
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 4
60532: NEG
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 4
60544: NEG
60545: PUSH
60546: LD_INT 2
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 4
60567: NEG
60568: PUSH
60569: LD_INT 4
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 4
60579: NEG
60580: PUSH
60581: LD_INT 5
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 3
60591: NEG
60592: PUSH
60593: LD_INT 4
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 3
60603: NEG
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 4
60615: NEG
60616: PUSH
60617: LD_INT 3
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 5
60627: NEG
60628: PUSH
60629: LD_INT 4
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 5
60639: NEG
60640: PUSH
60641: LD_INT 5
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: LD_INT 5
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 5
60663: NEG
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 3
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 4
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 3
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: LD_INT 2
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: LD_INT 3
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: LD_INT 4
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 2
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 4
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 4
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 4
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 5
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 5
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 4
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 3
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 5
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60915: LD_ADDR_VAR 0 32
60919: PUSH
60920: LD_INT 4
60922: NEG
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 4
60933: NEG
60934: PUSH
60935: LD_INT 1
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 3
60945: NEG
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 3
60956: NEG
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 4
60967: NEG
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 5
60978: NEG
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 5
60989: NEG
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 5
61001: NEG
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 3
61013: NEG
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 3
61024: NEG
61025: PUSH
61026: LD_INT 3
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 3
61036: NEG
61037: PUSH
61038: LD_INT 4
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: LD_INT 3
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 3
61072: NEG
61073: PUSH
61074: LD_INT 2
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 4
61084: NEG
61085: PUSH
61086: LD_INT 3
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 4
61096: NEG
61097: PUSH
61098: LD_INT 4
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: LD_INT 4
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 4
61120: NEG
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 4
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 5
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: LD_INT 4
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: LD_INT 3
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: LD_INT 3
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: LD_INT 4
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: LD_INT 5
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: LD_INT 3
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 2
61222: NEG
61223: PUSH
61224: LD_INT 5
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 3
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 3
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 4
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 4
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 3
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 4
61317: PUSH
61318: LD_INT 2
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 4
61327: PUSH
61328: LD_INT 4
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 4
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 5
61347: PUSH
61348: LD_INT 4
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 5
61357: PUSH
61358: LD_INT 5
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 4
61367: PUSH
61368: LD_INT 5
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: LD_INT 4
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: LD_INT 3
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 5
61397: PUSH
61398: LD_INT 3
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 3
61407: PUSH
61408: LD_INT 5
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61462: LD_ADDR_VAR 0 33
61466: PUSH
61467: LD_INT 4
61469: NEG
61470: PUSH
61471: LD_INT 4
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 4
61481: NEG
61482: PUSH
61483: LD_INT 5
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 3
61493: NEG
61494: PUSH
61495: LD_INT 4
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 3
61505: NEG
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 4
61517: NEG
61518: PUSH
61519: LD_INT 3
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 5
61529: NEG
61530: PUSH
61531: LD_INT 4
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 5
61541: NEG
61542: PUSH
61543: LD_INT 5
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 3
61553: NEG
61554: PUSH
61555: LD_INT 5
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 5
61565: NEG
61566: PUSH
61567: LD_INT 3
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: LD_INT 3
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: LD_INT 4
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: LD_INT 3
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: LD_INT 2
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: LD_INT 2
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 1
61632: NEG
61633: PUSH
61634: LD_INT 3
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: LD_INT 4
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: LD_INT 4
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 4
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 4
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 5
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 5
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 4
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 3
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 3
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 5
61762: PUSH
61763: LD_INT 2
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 3
61772: PUSH
61773: LD_INT 3
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 3
61782: PUSH
61783: LD_INT 2
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 4
61792: PUSH
61793: LD_INT 3
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 4
61802: PUSH
61803: LD_INT 4
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 3
61812: PUSH
61813: LD_INT 4
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 2
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 2
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 4
61842: PUSH
61843: LD_INT 2
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: PUSH
61853: LD_INT 4
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: LD_INT 4
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: LD_INT 4
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: LD_INT 5
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: LD_INT 5
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 1
61912: NEG
61913: PUSH
61914: LD_INT 4
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: NEG
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: LD_INT 5
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: NEG
61945: PUSH
61946: LD_INT 3
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62000: LD_ADDR_VAR 0 34
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: LD_INT 4
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: LD_INT 5
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: LD_INT 4
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: LD_INT 3
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 3
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: LD_INT 4
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: LD_INT 5
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: LD_INT 3
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 2
62097: NEG
62098: PUSH
62099: LD_INT 5
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 3
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 4
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 4
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 3
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 2
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 4
62192: PUSH
62193: LD_INT 2
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 4
62202: PUSH
62203: LD_INT 4
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 4
62212: PUSH
62213: LD_INT 3
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 5
62222: PUSH
62223: LD_INT 4
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 5
62232: PUSH
62233: LD_INT 5
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 4
62242: PUSH
62243: LD_INT 5
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 3
62252: PUSH
62253: LD_INT 4
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 3
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 5
62272: PUSH
62273: LD_INT 3
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 3
62282: PUSH
62283: LD_INT 5
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: LD_INT 3
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: LD_INT 3
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: LD_INT 4
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: LD_INT 4
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: LD_INT 3
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: LD_INT 4
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 2
62374: NEG
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 4
62385: NEG
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 4
62396: NEG
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 3
62408: NEG
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 3
62419: NEG
62420: PUSH
62421: LD_INT 1
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 4
62430: NEG
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 5
62441: NEG
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 5
62452: NEG
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 5
62464: NEG
62465: PUSH
62466: LD_INT 2
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: NEG
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: ST_TO_ADDR
// end ; end ;
62532: GO 62535
62534: POP
// case btype of b_depot , b_warehouse :
62535: LD_VAR 0 1
62539: PUSH
62540: LD_INT 0
62542: DOUBLE
62543: EQUAL
62544: IFTRUE 62554
62546: LD_INT 1
62548: DOUBLE
62549: EQUAL
62550: IFTRUE 62554
62552: GO 62755
62554: POP
// case nation of nation_american :
62555: LD_VAR 0 5
62559: PUSH
62560: LD_INT 1
62562: DOUBLE
62563: EQUAL
62564: IFTRUE 62568
62566: GO 62624
62568: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62569: LD_ADDR_VAR 0 9
62573: PUSH
62574: LD_VAR 0 11
62578: PUSH
62579: LD_VAR 0 12
62583: PUSH
62584: LD_VAR 0 13
62588: PUSH
62589: LD_VAR 0 14
62593: PUSH
62594: LD_VAR 0 15
62598: PUSH
62599: LD_VAR 0 16
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: PUSH
62612: LD_VAR 0 4
62616: PUSH
62617: LD_INT 1
62619: PLUS
62620: ARRAY
62621: ST_TO_ADDR
62622: GO 62753
62624: LD_INT 2
62626: DOUBLE
62627: EQUAL
62628: IFTRUE 62632
62630: GO 62688
62632: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62633: LD_ADDR_VAR 0 9
62637: PUSH
62638: LD_VAR 0 17
62642: PUSH
62643: LD_VAR 0 18
62647: PUSH
62648: LD_VAR 0 19
62652: PUSH
62653: LD_VAR 0 20
62657: PUSH
62658: LD_VAR 0 21
62662: PUSH
62663: LD_VAR 0 22
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: PUSH
62676: LD_VAR 0 4
62680: PUSH
62681: LD_INT 1
62683: PLUS
62684: ARRAY
62685: ST_TO_ADDR
62686: GO 62753
62688: LD_INT 3
62690: DOUBLE
62691: EQUAL
62692: IFTRUE 62696
62694: GO 62752
62696: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62697: LD_ADDR_VAR 0 9
62701: PUSH
62702: LD_VAR 0 23
62706: PUSH
62707: LD_VAR 0 24
62711: PUSH
62712: LD_VAR 0 25
62716: PUSH
62717: LD_VAR 0 26
62721: PUSH
62722: LD_VAR 0 27
62726: PUSH
62727: LD_VAR 0 28
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: PUSH
62740: LD_VAR 0 4
62744: PUSH
62745: LD_INT 1
62747: PLUS
62748: ARRAY
62749: ST_TO_ADDR
62750: GO 62753
62752: POP
62753: GO 63308
62755: LD_INT 2
62757: DOUBLE
62758: EQUAL
62759: IFTRUE 62769
62761: LD_INT 3
62763: DOUBLE
62764: EQUAL
62765: IFTRUE 62769
62767: GO 62825
62769: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62770: LD_ADDR_VAR 0 9
62774: PUSH
62775: LD_VAR 0 29
62779: PUSH
62780: LD_VAR 0 30
62784: PUSH
62785: LD_VAR 0 31
62789: PUSH
62790: LD_VAR 0 32
62794: PUSH
62795: LD_VAR 0 33
62799: PUSH
62800: LD_VAR 0 34
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: PUSH
62813: LD_VAR 0 4
62817: PUSH
62818: LD_INT 1
62820: PLUS
62821: ARRAY
62822: ST_TO_ADDR
62823: GO 63308
62825: LD_INT 16
62827: DOUBLE
62828: EQUAL
62829: IFTRUE 62887
62831: LD_INT 17
62833: DOUBLE
62834: EQUAL
62835: IFTRUE 62887
62837: LD_INT 18
62839: DOUBLE
62840: EQUAL
62841: IFTRUE 62887
62843: LD_INT 19
62845: DOUBLE
62846: EQUAL
62847: IFTRUE 62887
62849: LD_INT 22
62851: DOUBLE
62852: EQUAL
62853: IFTRUE 62887
62855: LD_INT 20
62857: DOUBLE
62858: EQUAL
62859: IFTRUE 62887
62861: LD_INT 21
62863: DOUBLE
62864: EQUAL
62865: IFTRUE 62887
62867: LD_INT 23
62869: DOUBLE
62870: EQUAL
62871: IFTRUE 62887
62873: LD_INT 24
62875: DOUBLE
62876: EQUAL
62877: IFTRUE 62887
62879: LD_INT 25
62881: DOUBLE
62882: EQUAL
62883: IFTRUE 62887
62885: GO 62943
62887: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62888: LD_ADDR_VAR 0 9
62892: PUSH
62893: LD_VAR 0 35
62897: PUSH
62898: LD_VAR 0 36
62902: PUSH
62903: LD_VAR 0 37
62907: PUSH
62908: LD_VAR 0 38
62912: PUSH
62913: LD_VAR 0 39
62917: PUSH
62918: LD_VAR 0 40
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: PUSH
62931: LD_VAR 0 4
62935: PUSH
62936: LD_INT 1
62938: PLUS
62939: ARRAY
62940: ST_TO_ADDR
62941: GO 63308
62943: LD_INT 6
62945: DOUBLE
62946: EQUAL
62947: IFTRUE 62999
62949: LD_INT 7
62951: DOUBLE
62952: EQUAL
62953: IFTRUE 62999
62955: LD_INT 8
62957: DOUBLE
62958: EQUAL
62959: IFTRUE 62999
62961: LD_INT 13
62963: DOUBLE
62964: EQUAL
62965: IFTRUE 62999
62967: LD_INT 12
62969: DOUBLE
62970: EQUAL
62971: IFTRUE 62999
62973: LD_INT 15
62975: DOUBLE
62976: EQUAL
62977: IFTRUE 62999
62979: LD_INT 11
62981: DOUBLE
62982: EQUAL
62983: IFTRUE 62999
62985: LD_INT 14
62987: DOUBLE
62988: EQUAL
62989: IFTRUE 62999
62991: LD_INT 10
62993: DOUBLE
62994: EQUAL
62995: IFTRUE 62999
62997: GO 63055
62999: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63000: LD_ADDR_VAR 0 9
63004: PUSH
63005: LD_VAR 0 41
63009: PUSH
63010: LD_VAR 0 42
63014: PUSH
63015: LD_VAR 0 43
63019: PUSH
63020: LD_VAR 0 44
63024: PUSH
63025: LD_VAR 0 45
63029: PUSH
63030: LD_VAR 0 46
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: PUSH
63043: LD_VAR 0 4
63047: PUSH
63048: LD_INT 1
63050: PLUS
63051: ARRAY
63052: ST_TO_ADDR
63053: GO 63308
63055: LD_INT 36
63057: DOUBLE
63058: EQUAL
63059: IFTRUE 63063
63061: GO 63119
63063: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63064: LD_ADDR_VAR 0 9
63068: PUSH
63069: LD_VAR 0 47
63073: PUSH
63074: LD_VAR 0 48
63078: PUSH
63079: LD_VAR 0 49
63083: PUSH
63084: LD_VAR 0 50
63088: PUSH
63089: LD_VAR 0 51
63093: PUSH
63094: LD_VAR 0 52
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: PUSH
63107: LD_VAR 0 4
63111: PUSH
63112: LD_INT 1
63114: PLUS
63115: ARRAY
63116: ST_TO_ADDR
63117: GO 63308
63119: LD_INT 4
63121: DOUBLE
63122: EQUAL
63123: IFTRUE 63145
63125: LD_INT 5
63127: DOUBLE
63128: EQUAL
63129: IFTRUE 63145
63131: LD_INT 34
63133: DOUBLE
63134: EQUAL
63135: IFTRUE 63145
63137: LD_INT 37
63139: DOUBLE
63140: EQUAL
63141: IFTRUE 63145
63143: GO 63201
63145: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63146: LD_ADDR_VAR 0 9
63150: PUSH
63151: LD_VAR 0 53
63155: PUSH
63156: LD_VAR 0 54
63160: PUSH
63161: LD_VAR 0 55
63165: PUSH
63166: LD_VAR 0 56
63170: PUSH
63171: LD_VAR 0 57
63175: PUSH
63176: LD_VAR 0 58
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: PUSH
63189: LD_VAR 0 4
63193: PUSH
63194: LD_INT 1
63196: PLUS
63197: ARRAY
63198: ST_TO_ADDR
63199: GO 63308
63201: LD_INT 31
63203: DOUBLE
63204: EQUAL
63205: IFTRUE 63251
63207: LD_INT 32
63209: DOUBLE
63210: EQUAL
63211: IFTRUE 63251
63213: LD_INT 33
63215: DOUBLE
63216: EQUAL
63217: IFTRUE 63251
63219: LD_INT 27
63221: DOUBLE
63222: EQUAL
63223: IFTRUE 63251
63225: LD_INT 26
63227: DOUBLE
63228: EQUAL
63229: IFTRUE 63251
63231: LD_INT 28
63233: DOUBLE
63234: EQUAL
63235: IFTRUE 63251
63237: LD_INT 29
63239: DOUBLE
63240: EQUAL
63241: IFTRUE 63251
63243: LD_INT 30
63245: DOUBLE
63246: EQUAL
63247: IFTRUE 63251
63249: GO 63307
63251: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63252: LD_ADDR_VAR 0 9
63256: PUSH
63257: LD_VAR 0 59
63261: PUSH
63262: LD_VAR 0 60
63266: PUSH
63267: LD_VAR 0 61
63271: PUSH
63272: LD_VAR 0 62
63276: PUSH
63277: LD_VAR 0 63
63281: PUSH
63282: LD_VAR 0 64
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: PUSH
63295: LD_VAR 0 4
63299: PUSH
63300: LD_INT 1
63302: PLUS
63303: ARRAY
63304: ST_TO_ADDR
63305: GO 63308
63307: POP
// temp_list2 = [ ] ;
63308: LD_ADDR_VAR 0 10
63312: PUSH
63313: EMPTY
63314: ST_TO_ADDR
// for i in temp_list do
63315: LD_ADDR_VAR 0 8
63319: PUSH
63320: LD_VAR 0 9
63324: PUSH
63325: FOR_IN
63326: IFFALSE 63378
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63328: LD_ADDR_VAR 0 10
63332: PUSH
63333: LD_VAR 0 10
63337: PUSH
63338: LD_VAR 0 8
63342: PUSH
63343: LD_INT 1
63345: ARRAY
63346: PUSH
63347: LD_VAR 0 2
63351: PLUS
63352: PUSH
63353: LD_VAR 0 8
63357: PUSH
63358: LD_INT 2
63360: ARRAY
63361: PUSH
63362: LD_VAR 0 3
63366: PLUS
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: EMPTY
63373: LIST
63374: ADD
63375: ST_TO_ADDR
63376: GO 63325
63378: POP
63379: POP
// result = temp_list2 ;
63380: LD_ADDR_VAR 0 7
63384: PUSH
63385: LD_VAR 0 10
63389: ST_TO_ADDR
// end ;
63390: LD_VAR 0 7
63394: RET
// export function EnemyInRange ( unit , dist ) ; begin
63395: LD_INT 0
63397: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63398: LD_ADDR_VAR 0 3
63402: PUSH
63403: LD_VAR 0 1
63407: PPUSH
63408: CALL_OW 255
63412: PPUSH
63413: LD_VAR 0 1
63417: PPUSH
63418: CALL_OW 250
63422: PPUSH
63423: LD_VAR 0 1
63427: PPUSH
63428: CALL_OW 251
63432: PPUSH
63433: LD_VAR 0 2
63437: PPUSH
63438: CALL 36652 0 4
63442: PUSH
63443: LD_INT 4
63445: ARRAY
63446: ST_TO_ADDR
// end ;
63447: LD_VAR 0 3
63451: RET
// export function PlayerSeeMe ( unit ) ; begin
63452: LD_INT 0
63454: PPUSH
// result := See ( your_side , unit ) ;
63455: LD_ADDR_VAR 0 2
63459: PUSH
63460: LD_OWVAR 2
63464: PPUSH
63465: LD_VAR 0 1
63469: PPUSH
63470: CALL_OW 292
63474: ST_TO_ADDR
// end ;
63475: LD_VAR 0 2
63479: RET
// export function ReverseDir ( unit ) ; begin
63480: LD_INT 0
63482: PPUSH
// if not unit then
63483: LD_VAR 0 1
63487: NOT
63488: IFFALSE 63492
// exit ;
63490: GO 63515
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63492: LD_ADDR_VAR 0 2
63496: PUSH
63497: LD_VAR 0 1
63501: PPUSH
63502: CALL_OW 254
63506: PUSH
63507: LD_INT 3
63509: PLUS
63510: PUSH
63511: LD_INT 6
63513: MOD
63514: ST_TO_ADDR
// end ;
63515: LD_VAR 0 2
63519: RET
// export function ReverseArray ( array ) ; var i ; begin
63520: LD_INT 0
63522: PPUSH
63523: PPUSH
// if not array then
63524: LD_VAR 0 1
63528: NOT
63529: IFFALSE 63533
// exit ;
63531: GO 63588
// result := [ ] ;
63533: LD_ADDR_VAR 0 2
63537: PUSH
63538: EMPTY
63539: ST_TO_ADDR
// for i := array downto 1 do
63540: LD_ADDR_VAR 0 3
63544: PUSH
63545: DOUBLE
63546: LD_VAR 0 1
63550: INC
63551: ST_TO_ADDR
63552: LD_INT 1
63554: PUSH
63555: FOR_DOWNTO
63556: IFFALSE 63586
// result := Join ( result , array [ i ] ) ;
63558: LD_ADDR_VAR 0 2
63562: PUSH
63563: LD_VAR 0 2
63567: PPUSH
63568: LD_VAR 0 1
63572: PUSH
63573: LD_VAR 0 3
63577: ARRAY
63578: PPUSH
63579: CALL 68440 0 2
63583: ST_TO_ADDR
63584: GO 63555
63586: POP
63587: POP
// end ;
63588: LD_VAR 0 2
63592: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63593: LD_INT 0
63595: PPUSH
63596: PPUSH
63597: PPUSH
63598: PPUSH
63599: PPUSH
63600: PPUSH
// if not unit or not hexes then
63601: LD_VAR 0 1
63605: NOT
63606: IFTRUE 63615
63608: PUSH
63609: LD_VAR 0 2
63613: NOT
63614: OR
63615: IFFALSE 63619
// exit ;
63617: GO 63742
// dist := 9999 ;
63619: LD_ADDR_VAR 0 5
63623: PUSH
63624: LD_INT 9999
63626: ST_TO_ADDR
// for i = 1 to hexes do
63627: LD_ADDR_VAR 0 4
63631: PUSH
63632: DOUBLE
63633: LD_INT 1
63635: DEC
63636: ST_TO_ADDR
63637: LD_VAR 0 2
63641: PUSH
63642: FOR_TO
63643: IFFALSE 63730
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63645: LD_ADDR_VAR 0 6
63649: PUSH
63650: LD_VAR 0 1
63654: PPUSH
63655: LD_VAR 0 2
63659: PUSH
63660: LD_VAR 0 4
63664: ARRAY
63665: PUSH
63666: LD_INT 1
63668: ARRAY
63669: PPUSH
63670: LD_VAR 0 2
63674: PUSH
63675: LD_VAR 0 4
63679: ARRAY
63680: PUSH
63681: LD_INT 2
63683: ARRAY
63684: PPUSH
63685: CALL_OW 297
63689: ST_TO_ADDR
// if tdist < dist then
63690: LD_VAR 0 6
63694: PUSH
63695: LD_VAR 0 5
63699: LESS
63700: IFFALSE 63728
// begin hex := hexes [ i ] ;
63702: LD_ADDR_VAR 0 8
63706: PUSH
63707: LD_VAR 0 2
63711: PUSH
63712: LD_VAR 0 4
63716: ARRAY
63717: ST_TO_ADDR
// dist := tdist ;
63718: LD_ADDR_VAR 0 5
63722: PUSH
63723: LD_VAR 0 6
63727: ST_TO_ADDR
// end ; end ;
63728: GO 63642
63730: POP
63731: POP
// result := hex ;
63732: LD_ADDR_VAR 0 3
63736: PUSH
63737: LD_VAR 0 8
63741: ST_TO_ADDR
// end ;
63742: LD_VAR 0 3
63746: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63747: LD_INT 0
63749: PPUSH
63750: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63751: LD_VAR 0 1
63755: NOT
63756: IFTRUE 63795
63758: PUSH
63759: LD_VAR 0 1
63763: PUSH
63764: LD_INT 21
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 23
63776: PUSH
63777: LD_INT 2
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PPUSH
63788: CALL_OW 69
63792: IN
63793: NOT
63794: OR
63795: IFFALSE 63799
// exit ;
63797: GO 63846
// for i = 1 to 3 do
63799: LD_ADDR_VAR 0 3
63803: PUSH
63804: DOUBLE
63805: LD_INT 1
63807: DEC
63808: ST_TO_ADDR
63809: LD_INT 3
63811: PUSH
63812: FOR_TO
63813: IFFALSE 63844
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63815: LD_VAR 0 1
63819: PPUSH
63820: CALL_OW 250
63824: PPUSH
63825: LD_VAR 0 1
63829: PPUSH
63830: CALL_OW 251
63834: PPUSH
63835: LD_INT 1
63837: PPUSH
63838: CALL_OW 453
63842: GO 63812
63844: POP
63845: POP
// end ;
63846: LD_VAR 0 2
63850: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63851: LD_INT 0
63853: PPUSH
63854: PPUSH
63855: PPUSH
63856: PPUSH
63857: PPUSH
63858: PPUSH
// if not unit or not enemy_unit then
63859: LD_VAR 0 1
63863: NOT
63864: IFTRUE 63873
63866: PUSH
63867: LD_VAR 0 2
63871: NOT
63872: OR
63873: IFFALSE 63877
// exit ;
63875: GO 64358
// if GetLives ( i ) < 250 then
63877: LD_VAR 0 4
63881: PPUSH
63882: CALL_OW 256
63886: PUSH
63887: LD_INT 250
63889: LESS
63890: IFFALSE 63903
// begin ComAutodestruct ( i ) ;
63892: LD_VAR 0 4
63896: PPUSH
63897: CALL 63747 0 1
// exit ;
63901: GO 64358
// end ; x := GetX ( enemy_unit ) ;
63903: LD_ADDR_VAR 0 7
63907: PUSH
63908: LD_VAR 0 2
63912: PPUSH
63913: CALL_OW 250
63917: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63918: LD_ADDR_VAR 0 8
63922: PUSH
63923: LD_VAR 0 2
63927: PPUSH
63928: CALL_OW 251
63932: ST_TO_ADDR
// if not x or not y then
63933: LD_VAR 0 7
63937: NOT
63938: IFTRUE 63947
63940: PUSH
63941: LD_VAR 0 8
63945: NOT
63946: OR
63947: IFFALSE 63951
// exit ;
63949: GO 64358
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63951: LD_ADDR_VAR 0 6
63955: PUSH
63956: LD_VAR 0 7
63960: PPUSH
63961: LD_INT 0
63963: PPUSH
63964: LD_INT 4
63966: PPUSH
63967: CALL_OW 272
63971: PUSH
63972: LD_VAR 0 8
63976: PPUSH
63977: LD_INT 0
63979: PPUSH
63980: LD_INT 4
63982: PPUSH
63983: CALL_OW 273
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_VAR 0 7
63996: PPUSH
63997: LD_INT 1
63999: PPUSH
64000: LD_INT 4
64002: PPUSH
64003: CALL_OW 272
64007: PUSH
64008: LD_VAR 0 8
64012: PPUSH
64013: LD_INT 1
64015: PPUSH
64016: LD_INT 4
64018: PPUSH
64019: CALL_OW 273
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_VAR 0 7
64032: PPUSH
64033: LD_INT 2
64035: PPUSH
64036: LD_INT 4
64038: PPUSH
64039: CALL_OW 272
64043: PUSH
64044: LD_VAR 0 8
64048: PPUSH
64049: LD_INT 2
64051: PPUSH
64052: LD_INT 4
64054: PPUSH
64055: CALL_OW 273
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_VAR 0 7
64068: PPUSH
64069: LD_INT 3
64071: PPUSH
64072: LD_INT 4
64074: PPUSH
64075: CALL_OW 272
64079: PUSH
64080: LD_VAR 0 8
64084: PPUSH
64085: LD_INT 3
64087: PPUSH
64088: LD_INT 4
64090: PPUSH
64091: CALL_OW 273
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_VAR 0 7
64104: PPUSH
64105: LD_INT 4
64107: PPUSH
64108: LD_INT 4
64110: PPUSH
64111: CALL_OW 272
64115: PUSH
64116: LD_VAR 0 8
64120: PPUSH
64121: LD_INT 4
64123: PPUSH
64124: LD_INT 4
64126: PPUSH
64127: CALL_OW 273
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_VAR 0 7
64140: PPUSH
64141: LD_INT 5
64143: PPUSH
64144: LD_INT 4
64146: PPUSH
64147: CALL_OW 272
64151: PUSH
64152: LD_VAR 0 8
64156: PPUSH
64157: LD_INT 5
64159: PPUSH
64160: LD_INT 4
64162: PPUSH
64163: CALL_OW 273
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: ST_TO_ADDR
// for i = tmp downto 1 do
64180: LD_ADDR_VAR 0 4
64184: PUSH
64185: DOUBLE
64186: LD_VAR 0 6
64190: INC
64191: ST_TO_ADDR
64192: LD_INT 1
64194: PUSH
64195: FOR_DOWNTO
64196: IFFALSE 64299
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64198: LD_VAR 0 6
64202: PUSH
64203: LD_VAR 0 4
64207: ARRAY
64208: PUSH
64209: LD_INT 1
64211: ARRAY
64212: PPUSH
64213: LD_VAR 0 6
64217: PUSH
64218: LD_VAR 0 4
64222: ARRAY
64223: PUSH
64224: LD_INT 2
64226: ARRAY
64227: PPUSH
64228: CALL_OW 488
64232: NOT
64233: IFTRUE 64275
64235: PUSH
64236: LD_VAR 0 6
64240: PUSH
64241: LD_VAR 0 4
64245: ARRAY
64246: PUSH
64247: LD_INT 1
64249: ARRAY
64250: PPUSH
64251: LD_VAR 0 6
64255: PUSH
64256: LD_VAR 0 4
64260: ARRAY
64261: PUSH
64262: LD_INT 2
64264: ARRAY
64265: PPUSH
64266: CALL_OW 428
64270: PUSH
64271: LD_INT 0
64273: NONEQUAL
64274: OR
64275: IFFALSE 64297
// tmp := Delete ( tmp , i ) ;
64277: LD_ADDR_VAR 0 6
64281: PUSH
64282: LD_VAR 0 6
64286: PPUSH
64287: LD_VAR 0 4
64291: PPUSH
64292: CALL_OW 3
64296: ST_TO_ADDR
64297: GO 64195
64299: POP
64300: POP
// j := GetClosestHex ( unit , tmp ) ;
64301: LD_ADDR_VAR 0 5
64305: PUSH
64306: LD_VAR 0 1
64310: PPUSH
64311: LD_VAR 0 6
64315: PPUSH
64316: CALL 63593 0 2
64320: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64321: LD_VAR 0 1
64325: PPUSH
64326: LD_VAR 0 5
64330: PUSH
64331: LD_INT 1
64333: ARRAY
64334: PPUSH
64335: LD_VAR 0 5
64339: PUSH
64340: LD_INT 2
64342: ARRAY
64343: PPUSH
64344: CALL_OW 111
// result := j ;
64348: LD_ADDR_VAR 0 3
64352: PUSH
64353: LD_VAR 0 5
64357: ST_TO_ADDR
// end ;
64358: LD_VAR 0 3
64362: RET
// export function PrepareApemanSoldier ( ) ; begin
64363: LD_INT 0
64365: PPUSH
// uc_nation := 0 ;
64366: LD_ADDR_OWVAR 21
64370: PUSH
64371: LD_INT 0
64373: ST_TO_ADDR
// hc_sex := sex_male ;
64374: LD_ADDR_OWVAR 27
64378: PUSH
64379: LD_INT 1
64381: ST_TO_ADDR
// hc_name :=  ;
64382: LD_ADDR_OWVAR 26
64386: PUSH
64387: LD_STRING 
64389: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64390: LD_ADDR_OWVAR 28
64394: PUSH
64395: LD_INT 15
64397: ST_TO_ADDR
// hc_gallery :=  ;
64398: LD_ADDR_OWVAR 33
64402: PUSH
64403: LD_STRING 
64405: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64406: LD_ADDR_OWVAR 31
64410: PUSH
64411: LD_INT 0
64413: PPUSH
64414: LD_INT 3
64416: PPUSH
64417: CALL_OW 12
64421: PUSH
64422: LD_INT 0
64424: PPUSH
64425: LD_INT 3
64427: PPUSH
64428: CALL_OW 12
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 0
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64445: LD_ADDR_OWVAR 29
64449: PUSH
64450: LD_INT 10
64452: PUSH
64453: LD_INT 12
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: ST_TO_ADDR
// end ;
64460: LD_VAR 0 1
64464: RET
// export function PrepareApemanEngineer ( ) ; begin
64465: LD_INT 0
64467: PPUSH
// uc_nation := 0 ;
64468: LD_ADDR_OWVAR 21
64472: PUSH
64473: LD_INT 0
64475: ST_TO_ADDR
// hc_sex := sex_male ;
64476: LD_ADDR_OWVAR 27
64480: PUSH
64481: LD_INT 1
64483: ST_TO_ADDR
// hc_name :=  ;
64484: LD_ADDR_OWVAR 26
64488: PUSH
64489: LD_STRING 
64491: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64492: LD_ADDR_OWVAR 28
64496: PUSH
64497: LD_INT 16
64499: ST_TO_ADDR
// hc_gallery :=  ;
64500: LD_ADDR_OWVAR 33
64504: PUSH
64505: LD_STRING 
64507: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64508: LD_ADDR_OWVAR 31
64512: PUSH
64513: LD_INT 0
64515: PPUSH
64516: LD_INT 3
64518: PPUSH
64519: CALL_OW 12
64523: PUSH
64524: LD_INT 0
64526: PPUSH
64527: LD_INT 3
64529: PPUSH
64530: CALL_OW 12
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 0
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64547: LD_ADDR_OWVAR 29
64551: PUSH
64552: LD_INT 10
64554: PUSH
64555: LD_INT 12
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: ST_TO_ADDR
// end ;
64562: LD_VAR 0 1
64566: RET
// export function PrepareApeman ( agressivity ) ; begin
64567: LD_INT 0
64569: PPUSH
// uc_side := 0 ;
64570: LD_ADDR_OWVAR 20
64574: PUSH
64575: LD_INT 0
64577: ST_TO_ADDR
// uc_nation := 0 ;
64578: LD_ADDR_OWVAR 21
64582: PUSH
64583: LD_INT 0
64585: ST_TO_ADDR
// hc_sex := sex_male ;
64586: LD_ADDR_OWVAR 27
64590: PUSH
64591: LD_INT 1
64593: ST_TO_ADDR
// hc_class := class_apeman ;
64594: LD_ADDR_OWVAR 28
64598: PUSH
64599: LD_INT 12
64601: ST_TO_ADDR
// hc_gallery :=  ;
64602: LD_ADDR_OWVAR 33
64606: PUSH
64607: LD_STRING 
64609: ST_TO_ADDR
// hc_name :=  ;
64610: LD_ADDR_OWVAR 26
64614: PUSH
64615: LD_STRING 
64617: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64618: LD_ADDR_OWVAR 29
64622: PUSH
64623: LD_INT 10
64625: PUSH
64626: LD_INT 12
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: ST_TO_ADDR
// if agressivity = 0 then
64633: LD_VAR 0 1
64637: PUSH
64638: LD_INT 0
64640: EQUAL
64641: IFFALSE 64653
// hc_agressivity := 0 else
64643: LD_ADDR_OWVAR 35
64647: PUSH
64648: LD_INT 0
64650: ST_TO_ADDR
64651: GO 64674
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64653: LD_ADDR_OWVAR 35
64657: PUSH
64658: LD_VAR 0 1
64662: NEG
64663: PPUSH
64664: LD_VAR 0 1
64668: PPUSH
64669: CALL_OW 12
64673: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64674: LD_ADDR_OWVAR 31
64678: PUSH
64679: LD_INT 0
64681: PPUSH
64682: LD_INT 3
64684: PPUSH
64685: CALL_OW 12
64689: PUSH
64690: LD_INT 0
64692: PPUSH
64693: LD_INT 3
64695: PPUSH
64696: CALL_OW 12
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: ST_TO_ADDR
// end ;
64713: LD_VAR 0 2
64717: RET
// export function PrepareTiger ( agressivity ) ; begin
64718: LD_INT 0
64720: PPUSH
// uc_side := 0 ;
64721: LD_ADDR_OWVAR 20
64725: PUSH
64726: LD_INT 0
64728: ST_TO_ADDR
// uc_nation := 0 ;
64729: LD_ADDR_OWVAR 21
64733: PUSH
64734: LD_INT 0
64736: ST_TO_ADDR
// InitHc ;
64737: CALL_OW 19
// hc_class := class_tiger ;
64741: LD_ADDR_OWVAR 28
64745: PUSH
64746: LD_INT 14
64748: ST_TO_ADDR
// hc_gallery :=  ;
64749: LD_ADDR_OWVAR 33
64753: PUSH
64754: LD_STRING 
64756: ST_TO_ADDR
// hc_name :=  ;
64757: LD_ADDR_OWVAR 26
64761: PUSH
64762: LD_STRING 
64764: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64765: LD_ADDR_OWVAR 35
64769: PUSH
64770: LD_VAR 0 1
64774: NEG
64775: PPUSH
64776: LD_VAR 0 1
64780: PPUSH
64781: CALL_OW 12
64785: ST_TO_ADDR
// end ;
64786: LD_VAR 0 2
64790: RET
// export function PrepareEnchidna ( ) ; begin
64791: LD_INT 0
64793: PPUSH
// uc_side := 0 ;
64794: LD_ADDR_OWVAR 20
64798: PUSH
64799: LD_INT 0
64801: ST_TO_ADDR
// uc_nation := 0 ;
64802: LD_ADDR_OWVAR 21
64806: PUSH
64807: LD_INT 0
64809: ST_TO_ADDR
// InitHc ;
64810: CALL_OW 19
// hc_class := class_baggie ;
64814: LD_ADDR_OWVAR 28
64818: PUSH
64819: LD_INT 13
64821: ST_TO_ADDR
// hc_gallery :=  ;
64822: LD_ADDR_OWVAR 33
64826: PUSH
64827: LD_STRING 
64829: ST_TO_ADDR
// hc_name :=  ;
64830: LD_ADDR_OWVAR 26
64834: PUSH
64835: LD_STRING 
64837: ST_TO_ADDR
// end ;
64838: LD_VAR 0 1
64842: RET
// export function PrepareFrog ( ) ; begin
64843: LD_INT 0
64845: PPUSH
// uc_side := 0 ;
64846: LD_ADDR_OWVAR 20
64850: PUSH
64851: LD_INT 0
64853: ST_TO_ADDR
// uc_nation := 0 ;
64854: LD_ADDR_OWVAR 21
64858: PUSH
64859: LD_INT 0
64861: ST_TO_ADDR
// InitHc ;
64862: CALL_OW 19
// hc_class := class_frog ;
64866: LD_ADDR_OWVAR 28
64870: PUSH
64871: LD_INT 19
64873: ST_TO_ADDR
// hc_gallery :=  ;
64874: LD_ADDR_OWVAR 33
64878: PUSH
64879: LD_STRING 
64881: ST_TO_ADDR
// hc_name :=  ;
64882: LD_ADDR_OWVAR 26
64886: PUSH
64887: LD_STRING 
64889: ST_TO_ADDR
// end ;
64890: LD_VAR 0 1
64894: RET
// export function PrepareFish ( ) ; begin
64895: LD_INT 0
64897: PPUSH
// uc_side := 0 ;
64898: LD_ADDR_OWVAR 20
64902: PUSH
64903: LD_INT 0
64905: ST_TO_ADDR
// uc_nation := 0 ;
64906: LD_ADDR_OWVAR 21
64910: PUSH
64911: LD_INT 0
64913: ST_TO_ADDR
// InitHc ;
64914: CALL_OW 19
// hc_class := class_fish ;
64918: LD_ADDR_OWVAR 28
64922: PUSH
64923: LD_INT 20
64925: ST_TO_ADDR
// hc_gallery :=  ;
64926: LD_ADDR_OWVAR 33
64930: PUSH
64931: LD_STRING 
64933: ST_TO_ADDR
// hc_name :=  ;
64934: LD_ADDR_OWVAR 26
64938: PUSH
64939: LD_STRING 
64941: ST_TO_ADDR
// end ;
64942: LD_VAR 0 1
64946: RET
// export function PrepareBird ( ) ; begin
64947: LD_INT 0
64949: PPUSH
// uc_side := 0 ;
64950: LD_ADDR_OWVAR 20
64954: PUSH
64955: LD_INT 0
64957: ST_TO_ADDR
// uc_nation := 0 ;
64958: LD_ADDR_OWVAR 21
64962: PUSH
64963: LD_INT 0
64965: ST_TO_ADDR
// InitHc ;
64966: CALL_OW 19
// hc_class := class_phororhacos ;
64970: LD_ADDR_OWVAR 28
64974: PUSH
64975: LD_INT 18
64977: ST_TO_ADDR
// hc_gallery :=  ;
64978: LD_ADDR_OWVAR 33
64982: PUSH
64983: LD_STRING 
64985: ST_TO_ADDR
// hc_name :=  ;
64986: LD_ADDR_OWVAR 26
64990: PUSH
64991: LD_STRING 
64993: ST_TO_ADDR
// end ;
64994: LD_VAR 0 1
64998: RET
// export function PrepareHorse ( ) ; begin
64999: LD_INT 0
65001: PPUSH
// uc_side := 0 ;
65002: LD_ADDR_OWVAR 20
65006: PUSH
65007: LD_INT 0
65009: ST_TO_ADDR
// uc_nation := 0 ;
65010: LD_ADDR_OWVAR 21
65014: PUSH
65015: LD_INT 0
65017: ST_TO_ADDR
// InitHc ;
65018: CALL_OW 19
// hc_class := class_horse ;
65022: LD_ADDR_OWVAR 28
65026: PUSH
65027: LD_INT 21
65029: ST_TO_ADDR
// hc_gallery :=  ;
65030: LD_ADDR_OWVAR 33
65034: PUSH
65035: LD_STRING 
65037: ST_TO_ADDR
// hc_name :=  ;
65038: LD_ADDR_OWVAR 26
65042: PUSH
65043: LD_STRING 
65045: ST_TO_ADDR
// end ;
65046: LD_VAR 0 1
65050: RET
// export function PrepareMastodont ( ) ; begin
65051: LD_INT 0
65053: PPUSH
// uc_side := 0 ;
65054: LD_ADDR_OWVAR 20
65058: PUSH
65059: LD_INT 0
65061: ST_TO_ADDR
// uc_nation := 0 ;
65062: LD_ADDR_OWVAR 21
65066: PUSH
65067: LD_INT 0
65069: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65070: LD_ADDR_OWVAR 37
65074: PUSH
65075: LD_INT 31
65077: ST_TO_ADDR
// vc_control := control_rider ;
65078: LD_ADDR_OWVAR 38
65082: PUSH
65083: LD_INT 4
65085: ST_TO_ADDR
// end ;
65086: LD_VAR 0 1
65090: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65091: LD_INT 0
65093: PPUSH
65094: PPUSH
65095: PPUSH
// uc_side = 0 ;
65096: LD_ADDR_OWVAR 20
65100: PUSH
65101: LD_INT 0
65103: ST_TO_ADDR
// uc_nation = 0 ;
65104: LD_ADDR_OWVAR 21
65108: PUSH
65109: LD_INT 0
65111: ST_TO_ADDR
// InitHc_All ( ) ;
65112: CALL_OW 584
// InitVc ;
65116: CALL_OW 20
// if mastodonts then
65120: LD_VAR 0 6
65124: IFFALSE 65191
// for i = 1 to mastodonts do
65126: LD_ADDR_VAR 0 11
65130: PUSH
65131: DOUBLE
65132: LD_INT 1
65134: DEC
65135: ST_TO_ADDR
65136: LD_VAR 0 6
65140: PUSH
65141: FOR_TO
65142: IFFALSE 65189
// begin vc_chassis := 31 ;
65144: LD_ADDR_OWVAR 37
65148: PUSH
65149: LD_INT 31
65151: ST_TO_ADDR
// vc_control := control_rider ;
65152: LD_ADDR_OWVAR 38
65156: PUSH
65157: LD_INT 4
65159: ST_TO_ADDR
// animal := CreateVehicle ;
65160: LD_ADDR_VAR 0 12
65164: PUSH
65165: CALL_OW 45
65169: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65170: LD_VAR 0 12
65174: PPUSH
65175: LD_VAR 0 8
65179: PPUSH
65180: LD_INT 0
65182: PPUSH
65183: CALL 67333 0 3
// end ;
65187: GO 65141
65189: POP
65190: POP
// if horses then
65191: LD_VAR 0 5
65195: IFFALSE 65262
// for i = 1 to horses do
65197: LD_ADDR_VAR 0 11
65201: PUSH
65202: DOUBLE
65203: LD_INT 1
65205: DEC
65206: ST_TO_ADDR
65207: LD_VAR 0 5
65211: PUSH
65212: FOR_TO
65213: IFFALSE 65260
// begin hc_class := 21 ;
65215: LD_ADDR_OWVAR 28
65219: PUSH
65220: LD_INT 21
65222: ST_TO_ADDR
// hc_gallery :=  ;
65223: LD_ADDR_OWVAR 33
65227: PUSH
65228: LD_STRING 
65230: ST_TO_ADDR
// animal := CreateHuman ;
65231: LD_ADDR_VAR 0 12
65235: PUSH
65236: CALL_OW 44
65240: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65241: LD_VAR 0 12
65245: PPUSH
65246: LD_VAR 0 8
65250: PPUSH
65251: LD_INT 0
65253: PPUSH
65254: CALL 67333 0 3
// end ;
65258: GO 65212
65260: POP
65261: POP
// if birds then
65262: LD_VAR 0 1
65266: IFFALSE 65333
// for i = 1 to birds do
65268: LD_ADDR_VAR 0 11
65272: PUSH
65273: DOUBLE
65274: LD_INT 1
65276: DEC
65277: ST_TO_ADDR
65278: LD_VAR 0 1
65282: PUSH
65283: FOR_TO
65284: IFFALSE 65331
// begin hc_class := 18 ;
65286: LD_ADDR_OWVAR 28
65290: PUSH
65291: LD_INT 18
65293: ST_TO_ADDR
// hc_gallery =  ;
65294: LD_ADDR_OWVAR 33
65298: PUSH
65299: LD_STRING 
65301: ST_TO_ADDR
// animal := CreateHuman ;
65302: LD_ADDR_VAR 0 12
65306: PUSH
65307: CALL_OW 44
65311: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65312: LD_VAR 0 12
65316: PPUSH
65317: LD_VAR 0 8
65321: PPUSH
65322: LD_INT 0
65324: PPUSH
65325: CALL 67333 0 3
// end ;
65329: GO 65283
65331: POP
65332: POP
// if tigers then
65333: LD_VAR 0 2
65337: IFFALSE 65421
// for i = 1 to tigers do
65339: LD_ADDR_VAR 0 11
65343: PUSH
65344: DOUBLE
65345: LD_INT 1
65347: DEC
65348: ST_TO_ADDR
65349: LD_VAR 0 2
65353: PUSH
65354: FOR_TO
65355: IFFALSE 65419
// begin hc_class = class_tiger ;
65357: LD_ADDR_OWVAR 28
65361: PUSH
65362: LD_INT 14
65364: ST_TO_ADDR
// hc_gallery =  ;
65365: LD_ADDR_OWVAR 33
65369: PUSH
65370: LD_STRING 
65372: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65373: LD_ADDR_OWVAR 35
65377: PUSH
65378: LD_INT 7
65380: NEG
65381: PPUSH
65382: LD_INT 7
65384: PPUSH
65385: CALL_OW 12
65389: ST_TO_ADDR
// animal := CreateHuman ;
65390: LD_ADDR_VAR 0 12
65394: PUSH
65395: CALL_OW 44
65399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65400: LD_VAR 0 12
65404: PPUSH
65405: LD_VAR 0 8
65409: PPUSH
65410: LD_INT 0
65412: PPUSH
65413: CALL 67333 0 3
// end ;
65417: GO 65354
65419: POP
65420: POP
// if apemans then
65421: LD_VAR 0 3
65425: IFFALSE 65548
// for i = 1 to apemans do
65427: LD_ADDR_VAR 0 11
65431: PUSH
65432: DOUBLE
65433: LD_INT 1
65435: DEC
65436: ST_TO_ADDR
65437: LD_VAR 0 3
65441: PUSH
65442: FOR_TO
65443: IFFALSE 65546
// begin hc_class = class_apeman ;
65445: LD_ADDR_OWVAR 28
65449: PUSH
65450: LD_INT 12
65452: ST_TO_ADDR
// hc_gallery =  ;
65453: LD_ADDR_OWVAR 33
65457: PUSH
65458: LD_STRING 
65460: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65461: LD_ADDR_OWVAR 35
65465: PUSH
65466: LD_INT 2
65468: NEG
65469: PPUSH
65470: LD_INT 2
65472: PPUSH
65473: CALL_OW 12
65477: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65478: LD_ADDR_OWVAR 31
65482: PUSH
65483: LD_INT 1
65485: PPUSH
65486: LD_INT 3
65488: PPUSH
65489: CALL_OW 12
65493: PUSH
65494: LD_INT 1
65496: PPUSH
65497: LD_INT 3
65499: PPUSH
65500: CALL_OW 12
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: ST_TO_ADDR
// animal := CreateHuman ;
65517: LD_ADDR_VAR 0 12
65521: PUSH
65522: CALL_OW 44
65526: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65527: LD_VAR 0 12
65531: PPUSH
65532: LD_VAR 0 8
65536: PPUSH
65537: LD_INT 0
65539: PPUSH
65540: CALL 67333 0 3
// end ;
65544: GO 65442
65546: POP
65547: POP
// if enchidnas then
65548: LD_VAR 0 4
65552: IFFALSE 65619
// for i = 1 to enchidnas do
65554: LD_ADDR_VAR 0 11
65558: PUSH
65559: DOUBLE
65560: LD_INT 1
65562: DEC
65563: ST_TO_ADDR
65564: LD_VAR 0 4
65568: PUSH
65569: FOR_TO
65570: IFFALSE 65617
// begin hc_class = 13 ;
65572: LD_ADDR_OWVAR 28
65576: PUSH
65577: LD_INT 13
65579: ST_TO_ADDR
// hc_gallery =  ;
65580: LD_ADDR_OWVAR 33
65584: PUSH
65585: LD_STRING 
65587: ST_TO_ADDR
// animal := CreateHuman ;
65588: LD_ADDR_VAR 0 12
65592: PUSH
65593: CALL_OW 44
65597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65598: LD_VAR 0 12
65602: PPUSH
65603: LD_VAR 0 8
65607: PPUSH
65608: LD_INT 0
65610: PPUSH
65611: CALL 67333 0 3
// end ;
65615: GO 65569
65617: POP
65618: POP
// if fishes then
65619: LD_VAR 0 7
65623: IFFALSE 65690
// for i = 1 to fishes do
65625: LD_ADDR_VAR 0 11
65629: PUSH
65630: DOUBLE
65631: LD_INT 1
65633: DEC
65634: ST_TO_ADDR
65635: LD_VAR 0 7
65639: PUSH
65640: FOR_TO
65641: IFFALSE 65688
// begin hc_class = 20 ;
65643: LD_ADDR_OWVAR 28
65647: PUSH
65648: LD_INT 20
65650: ST_TO_ADDR
// hc_gallery =  ;
65651: LD_ADDR_OWVAR 33
65655: PUSH
65656: LD_STRING 
65658: ST_TO_ADDR
// animal := CreateHuman ;
65659: LD_ADDR_VAR 0 12
65663: PUSH
65664: CALL_OW 44
65668: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65669: LD_VAR 0 12
65673: PPUSH
65674: LD_VAR 0 9
65678: PPUSH
65679: LD_INT 0
65681: PPUSH
65682: CALL 67333 0 3
// end ;
65686: GO 65640
65688: POP
65689: POP
// end ;
65690: LD_VAR 0 10
65694: RET
// export function WantHeal ( sci , unit ) ; begin
65695: LD_INT 0
65697: PPUSH
// if GetTaskList ( sci ) > 0 then
65698: LD_VAR 0 1
65702: PPUSH
65703: CALL_OW 437
65707: PUSH
65708: LD_INT 0
65710: GREATER
65711: IFFALSE 65783
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65713: LD_VAR 0 1
65717: PPUSH
65718: CALL_OW 437
65722: PUSH
65723: LD_INT 1
65725: ARRAY
65726: PUSH
65727: LD_INT 1
65729: ARRAY
65730: PUSH
65731: LD_STRING l
65733: EQUAL
65734: IFFALSE 65761
65736: PUSH
65737: LD_VAR 0 1
65741: PPUSH
65742: CALL_OW 437
65746: PUSH
65747: LD_INT 1
65749: ARRAY
65750: PUSH
65751: LD_INT 4
65753: ARRAY
65754: PUSH
65755: LD_VAR 0 2
65759: EQUAL
65760: AND
65761: IFFALSE 65773
// result := true else
65763: LD_ADDR_VAR 0 3
65767: PUSH
65768: LD_INT 1
65770: ST_TO_ADDR
65771: GO 65781
// result := false ;
65773: LD_ADDR_VAR 0 3
65777: PUSH
65778: LD_INT 0
65780: ST_TO_ADDR
// end else
65781: GO 65791
// result := false ;
65783: LD_ADDR_VAR 0 3
65787: PUSH
65788: LD_INT 0
65790: ST_TO_ADDR
// end ;
65791: LD_VAR 0 3
65795: RET
// export function HealTarget ( sci ) ; begin
65796: LD_INT 0
65798: PPUSH
// if not sci then
65799: LD_VAR 0 1
65803: NOT
65804: IFFALSE 65808
// exit ;
65806: GO 65873
// result := 0 ;
65808: LD_ADDR_VAR 0 2
65812: PUSH
65813: LD_INT 0
65815: ST_TO_ADDR
// if GetTaskList ( sci ) then
65816: LD_VAR 0 1
65820: PPUSH
65821: CALL_OW 437
65825: IFFALSE 65873
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65827: LD_VAR 0 1
65831: PPUSH
65832: CALL_OW 437
65836: PUSH
65837: LD_INT 1
65839: ARRAY
65840: PUSH
65841: LD_INT 1
65843: ARRAY
65844: PUSH
65845: LD_STRING l
65847: EQUAL
65848: IFFALSE 65873
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65850: LD_ADDR_VAR 0 2
65854: PUSH
65855: LD_VAR 0 1
65859: PPUSH
65860: CALL_OW 437
65864: PUSH
65865: LD_INT 1
65867: ARRAY
65868: PUSH
65869: LD_INT 4
65871: ARRAY
65872: ST_TO_ADDR
// end ;
65873: LD_VAR 0 2
65877: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65878: LD_INT 0
65880: PPUSH
65881: PPUSH
65882: PPUSH
65883: PPUSH
// if not base_units then
65884: LD_VAR 0 1
65888: NOT
65889: IFFALSE 65893
// exit ;
65891: GO 65980
// result := false ;
65893: LD_ADDR_VAR 0 2
65897: PUSH
65898: LD_INT 0
65900: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65901: LD_ADDR_VAR 0 5
65905: PUSH
65906: LD_VAR 0 1
65910: PPUSH
65911: LD_INT 21
65913: PUSH
65914: LD_INT 3
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PPUSH
65921: CALL_OW 72
65925: ST_TO_ADDR
// if not tmp then
65926: LD_VAR 0 5
65930: NOT
65931: IFFALSE 65935
// exit ;
65933: GO 65980
// for i in tmp do
65935: LD_ADDR_VAR 0 3
65939: PUSH
65940: LD_VAR 0 5
65944: PUSH
65945: FOR_IN
65946: IFFALSE 65978
// begin result := EnemyInRange ( i , 22 ) ;
65948: LD_ADDR_VAR 0 2
65952: PUSH
65953: LD_VAR 0 3
65957: PPUSH
65958: LD_INT 22
65960: PPUSH
65961: CALL 63395 0 2
65965: ST_TO_ADDR
// if result then
65966: LD_VAR 0 2
65970: IFFALSE 65976
// exit ;
65972: POP
65973: POP
65974: GO 65980
// end ;
65976: GO 65945
65978: POP
65979: POP
// end ;
65980: LD_VAR 0 2
65984: RET
// export function FilterByTag ( units , tag ) ; begin
65985: LD_INT 0
65987: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65988: LD_ADDR_VAR 0 3
65992: PUSH
65993: LD_VAR 0 1
65997: PPUSH
65998: LD_INT 120
66000: PUSH
66001: LD_VAR 0 2
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PPUSH
66010: CALL_OW 72
66014: ST_TO_ADDR
// end ;
66015: LD_VAR 0 3
66019: RET
// export function IsDriver ( un ) ; begin
66020: LD_INT 0
66022: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66023: LD_ADDR_VAR 0 2
66027: PUSH
66028: LD_VAR 0 1
66032: PUSH
66033: LD_INT 55
66035: PUSH
66036: EMPTY
66037: LIST
66038: PPUSH
66039: CALL_OW 69
66043: IN
66044: ST_TO_ADDR
// end ;
66045: LD_VAR 0 2
66049: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66050: LD_INT 0
66052: PPUSH
66053: PPUSH
// list := [ ] ;
66054: LD_ADDR_VAR 0 5
66058: PUSH
66059: EMPTY
66060: ST_TO_ADDR
// case d of 0 :
66061: LD_VAR 0 3
66065: PUSH
66066: LD_INT 0
66068: DOUBLE
66069: EQUAL
66070: IFTRUE 66074
66072: GO 66207
66074: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66075: LD_ADDR_VAR 0 5
66079: PUSH
66080: LD_VAR 0 1
66084: PUSH
66085: LD_INT 4
66087: MINUS
66088: PUSH
66089: LD_VAR 0 2
66093: PUSH
66094: LD_INT 4
66096: MINUS
66097: PUSH
66098: LD_INT 2
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: LIST
66105: PUSH
66106: LD_VAR 0 1
66110: PUSH
66111: LD_INT 3
66113: MINUS
66114: PUSH
66115: LD_VAR 0 2
66119: PUSH
66120: LD_INT 1
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: LIST
66127: PUSH
66128: LD_VAR 0 1
66132: PUSH
66133: LD_INT 4
66135: PLUS
66136: PUSH
66137: LD_VAR 0 2
66141: PUSH
66142: LD_INT 4
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: LIST
66149: PUSH
66150: LD_VAR 0 1
66154: PUSH
66155: LD_INT 3
66157: PLUS
66158: PUSH
66159: LD_VAR 0 2
66163: PUSH
66164: LD_INT 3
66166: PLUS
66167: PUSH
66168: LD_INT 5
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: LIST
66175: PUSH
66176: LD_VAR 0 1
66180: PUSH
66181: LD_VAR 0 2
66185: PUSH
66186: LD_INT 4
66188: PLUS
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: LIST
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: ST_TO_ADDR
// end ; 1 :
66205: GO 66905
66207: LD_INT 1
66209: DOUBLE
66210: EQUAL
66211: IFTRUE 66215
66213: GO 66348
66215: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66216: LD_ADDR_VAR 0 5
66220: PUSH
66221: LD_VAR 0 1
66225: PUSH
66226: LD_VAR 0 2
66230: PUSH
66231: LD_INT 4
66233: MINUS
66234: PUSH
66235: LD_INT 3
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: LIST
66242: PUSH
66243: LD_VAR 0 1
66247: PUSH
66248: LD_INT 3
66250: MINUS
66251: PUSH
66252: LD_VAR 0 2
66256: PUSH
66257: LD_INT 3
66259: MINUS
66260: PUSH
66261: LD_INT 2
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: LIST
66268: PUSH
66269: LD_VAR 0 1
66273: PUSH
66274: LD_INT 4
66276: MINUS
66277: PUSH
66278: LD_VAR 0 2
66282: PUSH
66283: LD_INT 1
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: LIST
66290: PUSH
66291: LD_VAR 0 1
66295: PUSH
66296: LD_VAR 0 2
66300: PUSH
66301: LD_INT 3
66303: PLUS
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: PUSH
66313: LD_VAR 0 1
66317: PUSH
66318: LD_INT 4
66320: PLUS
66321: PUSH
66322: LD_VAR 0 2
66326: PUSH
66327: LD_INT 4
66329: PLUS
66330: PUSH
66331: LD_INT 5
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: LIST
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: ST_TO_ADDR
// end ; 2 :
66346: GO 66905
66348: LD_INT 2
66350: DOUBLE
66351: EQUAL
66352: IFTRUE 66356
66354: GO 66485
66356: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66357: LD_ADDR_VAR 0 5
66361: PUSH
66362: LD_VAR 0 1
66366: PUSH
66367: LD_VAR 0 2
66371: PUSH
66372: LD_INT 3
66374: MINUS
66375: PUSH
66376: LD_INT 3
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: PUSH
66384: LD_VAR 0 1
66388: PUSH
66389: LD_INT 4
66391: PLUS
66392: PUSH
66393: LD_VAR 0 2
66397: PUSH
66398: LD_INT 4
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: LIST
66405: PUSH
66406: LD_VAR 0 1
66410: PUSH
66411: LD_VAR 0 2
66415: PUSH
66416: LD_INT 4
66418: PLUS
66419: PUSH
66420: LD_INT 0
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: LIST
66427: PUSH
66428: LD_VAR 0 1
66432: PUSH
66433: LD_INT 3
66435: MINUS
66436: PUSH
66437: LD_VAR 0 2
66441: PUSH
66442: LD_INT 1
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: LIST
66449: PUSH
66450: LD_VAR 0 1
66454: PUSH
66455: LD_INT 4
66457: MINUS
66458: PUSH
66459: LD_VAR 0 2
66463: PUSH
66464: LD_INT 4
66466: MINUS
66467: PUSH
66468: LD_INT 2
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: LIST
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: ST_TO_ADDR
// end ; 3 :
66483: GO 66905
66485: LD_INT 3
66487: DOUBLE
66488: EQUAL
66489: IFTRUE 66493
66491: GO 66626
66493: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66494: LD_ADDR_VAR 0 5
66498: PUSH
66499: LD_VAR 0 1
66503: PUSH
66504: LD_INT 3
66506: PLUS
66507: PUSH
66508: LD_VAR 0 2
66512: PUSH
66513: LD_INT 4
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: LIST
66520: PUSH
66521: LD_VAR 0 1
66525: PUSH
66526: LD_INT 4
66528: PLUS
66529: PUSH
66530: LD_VAR 0 2
66534: PUSH
66535: LD_INT 4
66537: PLUS
66538: PUSH
66539: LD_INT 5
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: LIST
66546: PUSH
66547: LD_VAR 0 1
66551: PUSH
66552: LD_INT 4
66554: MINUS
66555: PUSH
66556: LD_VAR 0 2
66560: PUSH
66561: LD_INT 1
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: LIST
66568: PUSH
66569: LD_VAR 0 1
66573: PUSH
66574: LD_VAR 0 2
66578: PUSH
66579: LD_INT 4
66581: MINUS
66582: PUSH
66583: LD_INT 3
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: LIST
66590: PUSH
66591: LD_VAR 0 1
66595: PUSH
66596: LD_INT 3
66598: MINUS
66599: PUSH
66600: LD_VAR 0 2
66604: PUSH
66605: LD_INT 3
66607: MINUS
66608: PUSH
66609: LD_INT 2
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: LIST
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: ST_TO_ADDR
// end ; 4 :
66624: GO 66905
66626: LD_INT 4
66628: DOUBLE
66629: EQUAL
66630: IFTRUE 66634
66632: GO 66767
66634: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66635: LD_ADDR_VAR 0 5
66639: PUSH
66640: LD_VAR 0 1
66644: PUSH
66645: LD_VAR 0 2
66649: PUSH
66650: LD_INT 4
66652: PLUS
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: LIST
66661: PUSH
66662: LD_VAR 0 1
66666: PUSH
66667: LD_INT 3
66669: PLUS
66670: PUSH
66671: LD_VAR 0 2
66675: PUSH
66676: LD_INT 3
66678: PLUS
66679: PUSH
66680: LD_INT 5
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: LIST
66687: PUSH
66688: LD_VAR 0 1
66692: PUSH
66693: LD_INT 4
66695: PLUS
66696: PUSH
66697: LD_VAR 0 2
66701: PUSH
66702: LD_INT 4
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: LIST
66709: PUSH
66710: LD_VAR 0 1
66714: PUSH
66715: LD_VAR 0 2
66719: PUSH
66720: LD_INT 3
66722: MINUS
66723: PUSH
66724: LD_INT 3
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: LIST
66731: PUSH
66732: LD_VAR 0 1
66736: PUSH
66737: LD_INT 4
66739: MINUS
66740: PUSH
66741: LD_VAR 0 2
66745: PUSH
66746: LD_INT 4
66748: MINUS
66749: PUSH
66750: LD_INT 2
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: ST_TO_ADDR
// end ; 5 :
66765: GO 66905
66767: LD_INT 5
66769: DOUBLE
66770: EQUAL
66771: IFTRUE 66775
66773: GO 66904
66775: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66776: LD_ADDR_VAR 0 5
66780: PUSH
66781: LD_VAR 0 1
66785: PUSH
66786: LD_INT 4
66788: MINUS
66789: PUSH
66790: LD_VAR 0 2
66794: PUSH
66795: LD_INT 1
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: LIST
66802: PUSH
66803: LD_VAR 0 1
66807: PUSH
66808: LD_VAR 0 2
66812: PUSH
66813: LD_INT 4
66815: MINUS
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: LIST
66824: PUSH
66825: LD_VAR 0 1
66829: PUSH
66830: LD_INT 4
66832: PLUS
66833: PUSH
66834: LD_VAR 0 2
66838: PUSH
66839: LD_INT 4
66841: PLUS
66842: PUSH
66843: LD_INT 5
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: LIST
66850: PUSH
66851: LD_VAR 0 1
66855: PUSH
66856: LD_INT 3
66858: PLUS
66859: PUSH
66860: LD_VAR 0 2
66864: PUSH
66865: LD_INT 4
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: LIST
66872: PUSH
66873: LD_VAR 0 1
66877: PUSH
66878: LD_VAR 0 2
66882: PUSH
66883: LD_INT 3
66885: PLUS
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: LIST
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: ST_TO_ADDR
// end ; end ;
66902: GO 66905
66904: POP
// result := list ;
66905: LD_ADDR_VAR 0 4
66909: PUSH
66910: LD_VAR 0 5
66914: ST_TO_ADDR
// end ;
66915: LD_VAR 0 4
66919: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66920: LD_INT 0
66922: PPUSH
66923: PPUSH
66924: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66925: LD_VAR 0 1
66929: NOT
66930: IFTRUE 66958
66932: PUSH
66933: LD_VAR 0 2
66937: PUSH
66938: LD_INT 1
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: LD_INT 3
66946: PUSH
66947: LD_INT 4
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: IN
66956: NOT
66957: OR
66958: IFFALSE 66962
// exit ;
66960: GO 67045
// tmp := [ ] ;
66962: LD_ADDR_VAR 0 5
66966: PUSH
66967: EMPTY
66968: ST_TO_ADDR
// for i in units do
66969: LD_ADDR_VAR 0 4
66973: PUSH
66974: LD_VAR 0 1
66978: PUSH
66979: FOR_IN
66980: IFFALSE 67014
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66982: LD_ADDR_VAR 0 5
66986: PUSH
66987: LD_VAR 0 5
66991: PPUSH
66992: LD_VAR 0 4
66996: PPUSH
66997: LD_VAR 0 2
67001: PPUSH
67002: CALL_OW 259
67006: PPUSH
67007: CALL 68440 0 2
67011: ST_TO_ADDR
67012: GO 66979
67014: POP
67015: POP
// if not tmp then
67016: LD_VAR 0 5
67020: NOT
67021: IFFALSE 67025
// exit ;
67023: GO 67045
// result := SortListByListDesc ( units , tmp ) ;
67025: LD_ADDR_VAR 0 3
67029: PUSH
67030: LD_VAR 0 1
67034: PPUSH
67035: LD_VAR 0 5
67039: PPUSH
67040: CALL_OW 77
67044: ST_TO_ADDR
// end ;
67045: LD_VAR 0 3
67049: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67050: LD_INT 0
67052: PPUSH
67053: PPUSH
67054: PPUSH
// result := false ;
67055: LD_ADDR_VAR 0 3
67059: PUSH
67060: LD_INT 0
67062: ST_TO_ADDR
// if not building then
67063: LD_VAR 0 2
67067: NOT
67068: IFFALSE 67072
// exit ;
67070: GO 67216
// x := GetX ( building ) ;
67072: LD_ADDR_VAR 0 4
67076: PUSH
67077: LD_VAR 0 2
67081: PPUSH
67082: CALL_OW 250
67086: ST_TO_ADDR
// y := GetY ( building ) ;
67087: LD_ADDR_VAR 0 5
67091: PUSH
67092: LD_VAR 0 2
67096: PPUSH
67097: CALL_OW 251
67101: ST_TO_ADDR
// if not x or not y then
67102: LD_VAR 0 4
67106: NOT
67107: IFTRUE 67116
67109: PUSH
67110: LD_VAR 0 5
67114: NOT
67115: OR
67116: IFFALSE 67120
// exit ;
67118: GO 67216
// if GetTaskList ( unit ) then
67120: LD_VAR 0 1
67124: PPUSH
67125: CALL_OW 437
67129: IFFALSE 67216
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67131: LD_STRING e
67133: PUSH
67134: LD_VAR 0 1
67138: PPUSH
67139: CALL_OW 437
67143: PUSH
67144: LD_INT 1
67146: ARRAY
67147: PUSH
67148: LD_INT 1
67150: ARRAY
67151: EQUAL
67152: IFFALSE 67179
67154: PUSH
67155: LD_VAR 0 4
67159: PUSH
67160: LD_VAR 0 1
67164: PPUSH
67165: CALL_OW 437
67169: PUSH
67170: LD_INT 1
67172: ARRAY
67173: PUSH
67174: LD_INT 2
67176: ARRAY
67177: EQUAL
67178: AND
67179: IFFALSE 67206
67181: PUSH
67182: LD_VAR 0 5
67186: PUSH
67187: LD_VAR 0 1
67191: PPUSH
67192: CALL_OW 437
67196: PUSH
67197: LD_INT 1
67199: ARRAY
67200: PUSH
67201: LD_INT 3
67203: ARRAY
67204: EQUAL
67205: AND
67206: IFFALSE 67216
// result := true end ;
67208: LD_ADDR_VAR 0 3
67212: PUSH
67213: LD_INT 1
67215: ST_TO_ADDR
// end ;
67216: LD_VAR 0 3
67220: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67221: LD_INT 0
67223: PPUSH
// result := false ;
67224: LD_ADDR_VAR 0 4
67228: PUSH
67229: LD_INT 0
67231: ST_TO_ADDR
// if GetTaskList ( unit ) then
67232: LD_VAR 0 1
67236: PPUSH
67237: CALL_OW 437
67241: IFFALSE 67328
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67243: LD_STRING M
67245: PUSH
67246: LD_VAR 0 1
67250: PPUSH
67251: CALL_OW 437
67255: PUSH
67256: LD_INT 1
67258: ARRAY
67259: PUSH
67260: LD_INT 1
67262: ARRAY
67263: EQUAL
67264: IFFALSE 67291
67266: PUSH
67267: LD_VAR 0 2
67271: PUSH
67272: LD_VAR 0 1
67276: PPUSH
67277: CALL_OW 437
67281: PUSH
67282: LD_INT 1
67284: ARRAY
67285: PUSH
67286: LD_INT 2
67288: ARRAY
67289: EQUAL
67290: AND
67291: IFFALSE 67318
67293: PUSH
67294: LD_VAR 0 3
67298: PUSH
67299: LD_VAR 0 1
67303: PPUSH
67304: CALL_OW 437
67308: PUSH
67309: LD_INT 1
67311: ARRAY
67312: PUSH
67313: LD_INT 3
67315: ARRAY
67316: EQUAL
67317: AND
67318: IFFALSE 67328
// result := true ;
67320: LD_ADDR_VAR 0 4
67324: PUSH
67325: LD_INT 1
67327: ST_TO_ADDR
// end ; end ;
67328: LD_VAR 0 4
67332: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67333: LD_INT 0
67335: PPUSH
67336: PPUSH
67337: PPUSH
67338: PPUSH
// if not unit or not area then
67339: LD_VAR 0 1
67343: NOT
67344: IFTRUE 67353
67346: PUSH
67347: LD_VAR 0 2
67351: NOT
67352: OR
67353: IFFALSE 67357
// exit ;
67355: GO 67533
// tmp := AreaToList ( area , i ) ;
67357: LD_ADDR_VAR 0 6
67361: PUSH
67362: LD_VAR 0 2
67366: PPUSH
67367: LD_VAR 0 5
67371: PPUSH
67372: CALL_OW 517
67376: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67377: LD_ADDR_VAR 0 5
67381: PUSH
67382: DOUBLE
67383: LD_INT 1
67385: DEC
67386: ST_TO_ADDR
67387: LD_VAR 0 6
67391: PUSH
67392: LD_INT 1
67394: ARRAY
67395: PUSH
67396: FOR_TO
67397: IFFALSE 67531
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67399: LD_ADDR_VAR 0 7
67403: PUSH
67404: LD_VAR 0 6
67408: PUSH
67409: LD_INT 1
67411: ARRAY
67412: PUSH
67413: LD_VAR 0 5
67417: ARRAY
67418: PUSH
67419: LD_VAR 0 6
67423: PUSH
67424: LD_INT 2
67426: ARRAY
67427: PUSH
67428: LD_VAR 0 5
67432: ARRAY
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67438: LD_INT 92
67440: PUSH
67441: LD_VAR 0 7
67445: PUSH
67446: LD_INT 1
67448: ARRAY
67449: PUSH
67450: LD_VAR 0 7
67454: PUSH
67455: LD_INT 2
67457: ARRAY
67458: PUSH
67459: LD_INT 2
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: PPUSH
67468: CALL_OW 69
67472: PUSH
67473: LD_INT 0
67475: EQUAL
67476: IFFALSE 67529
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67478: LD_VAR 0 1
67482: PPUSH
67483: LD_VAR 0 7
67487: PUSH
67488: LD_INT 1
67490: ARRAY
67491: PPUSH
67492: LD_VAR 0 7
67496: PUSH
67497: LD_INT 2
67499: ARRAY
67500: PPUSH
67501: LD_VAR 0 3
67505: PPUSH
67506: CALL_OW 48
// result := IsPlaced ( unit ) ;
67510: LD_ADDR_VAR 0 4
67514: PUSH
67515: LD_VAR 0 1
67519: PPUSH
67520: CALL_OW 305
67524: ST_TO_ADDR
// exit ;
67525: POP
67526: POP
67527: GO 67533
// end ; end ;
67529: GO 67396
67531: POP
67532: POP
// end ;
67533: LD_VAR 0 4
67537: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67538: LD_INT 0
67540: PPUSH
67541: PPUSH
67542: PPUSH
// if not side or side > 8 then
67543: LD_VAR 0 1
67547: NOT
67548: IFTRUE 67560
67550: PUSH
67551: LD_VAR 0 1
67555: PUSH
67556: LD_INT 8
67558: GREATER
67559: OR
67560: IFFALSE 67564
// exit ;
67562: GO 67751
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67564: LD_ADDR_VAR 0 4
67568: PUSH
67569: LD_INT 22
67571: PUSH
67572: LD_VAR 0 1
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 21
67583: PUSH
67584: LD_INT 3
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PPUSH
67595: CALL_OW 69
67599: ST_TO_ADDR
// if not tmp then
67600: LD_VAR 0 4
67604: NOT
67605: IFFALSE 67609
// exit ;
67607: GO 67751
// enable_addtolog := true ;
67609: LD_ADDR_OWVAR 81
67613: PUSH
67614: LD_INT 1
67616: ST_TO_ADDR
// AddToLog ( [ ) ;
67617: LD_STRING [
67619: PPUSH
67620: CALL_OW 561
// for i in tmp do
67624: LD_ADDR_VAR 0 3
67628: PUSH
67629: LD_VAR 0 4
67633: PUSH
67634: FOR_IN
67635: IFFALSE 67742
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67637: LD_STRING [
67639: PUSH
67640: LD_VAR 0 3
67644: PPUSH
67645: CALL_OW 266
67649: STR
67650: PUSH
67651: LD_STRING , 
67653: STR
67654: PUSH
67655: LD_VAR 0 3
67659: PPUSH
67660: CALL_OW 250
67664: STR
67665: PUSH
67666: LD_STRING , 
67668: STR
67669: PUSH
67670: LD_VAR 0 3
67674: PPUSH
67675: CALL_OW 251
67679: STR
67680: PUSH
67681: LD_STRING , 
67683: STR
67684: PUSH
67685: LD_VAR 0 3
67689: PPUSH
67690: CALL_OW 254
67694: STR
67695: PUSH
67696: LD_STRING , 
67698: STR
67699: PUSH
67700: LD_VAR 0 3
67704: PPUSH
67705: LD_INT 1
67707: PPUSH
67708: CALL_OW 268
67712: STR
67713: PUSH
67714: LD_STRING , 
67716: STR
67717: PUSH
67718: LD_VAR 0 3
67722: PPUSH
67723: LD_INT 2
67725: PPUSH
67726: CALL_OW 268
67730: STR
67731: PUSH
67732: LD_STRING ],
67734: STR
67735: PPUSH
67736: CALL_OW 561
// end ;
67740: GO 67634
67742: POP
67743: POP
// AddToLog ( ]; ) ;
67744: LD_STRING ];
67746: PPUSH
67747: CALL_OW 561
// end ;
67751: LD_VAR 0 2
67755: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67756: LD_INT 0
67758: PPUSH
67759: PPUSH
67760: PPUSH
67761: PPUSH
67762: PPUSH
// if not area or not rate or not max then
67763: LD_VAR 0 1
67767: NOT
67768: IFTRUE 67777
67770: PUSH
67771: LD_VAR 0 2
67775: NOT
67776: OR
67777: IFTRUE 67786
67779: PUSH
67780: LD_VAR 0 4
67784: NOT
67785: OR
67786: IFFALSE 67790
// exit ;
67788: GO 67979
// while 1 do
67790: LD_INT 1
67792: IFFALSE 67979
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67794: LD_ADDR_VAR 0 9
67798: PUSH
67799: LD_VAR 0 1
67803: PPUSH
67804: LD_INT 1
67806: PPUSH
67807: CALL_OW 287
67811: PUSH
67812: LD_INT 10
67814: MUL
67815: ST_TO_ADDR
// r := rate / 10 ;
67816: LD_ADDR_VAR 0 7
67820: PUSH
67821: LD_VAR 0 2
67825: PUSH
67826: LD_INT 10
67828: DIVREAL
67829: ST_TO_ADDR
// time := 1 1$00 ;
67830: LD_ADDR_VAR 0 8
67834: PUSH
67835: LD_INT 2100
67837: ST_TO_ADDR
// if amount < min then
67838: LD_VAR 0 9
67842: PUSH
67843: LD_VAR 0 3
67847: LESS
67848: IFFALSE 67866
// r := r * 2 else
67850: LD_ADDR_VAR 0 7
67854: PUSH
67855: LD_VAR 0 7
67859: PUSH
67860: LD_INT 2
67862: MUL
67863: ST_TO_ADDR
67864: GO 67892
// if amount > max then
67866: LD_VAR 0 9
67870: PUSH
67871: LD_VAR 0 4
67875: GREATER
67876: IFFALSE 67892
// r := r / 2 ;
67878: LD_ADDR_VAR 0 7
67882: PUSH
67883: LD_VAR 0 7
67887: PUSH
67888: LD_INT 2
67890: DIVREAL
67891: ST_TO_ADDR
// time := time / r ;
67892: LD_ADDR_VAR 0 8
67896: PUSH
67897: LD_VAR 0 8
67901: PUSH
67902: LD_VAR 0 7
67906: DIVREAL
67907: ST_TO_ADDR
// if time < 0 then
67908: LD_VAR 0 8
67912: PUSH
67913: LD_INT 0
67915: LESS
67916: IFFALSE 67933
// time := time * - 1 ;
67918: LD_ADDR_VAR 0 8
67922: PUSH
67923: LD_VAR 0 8
67927: PUSH
67928: LD_INT 1
67930: NEG
67931: MUL
67932: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67933: LD_VAR 0 8
67937: PUSH
67938: LD_INT 35
67940: PPUSH
67941: LD_INT 875
67943: PPUSH
67944: CALL_OW 12
67948: PLUS
67949: PPUSH
67950: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67954: LD_INT 1
67956: PPUSH
67957: LD_INT 5
67959: PPUSH
67960: CALL_OW 12
67964: PPUSH
67965: LD_VAR 0 1
67969: PPUSH
67970: LD_INT 1
67972: PPUSH
67973: CALL_OW 55
// end ;
67977: GO 67790
// end ;
67979: LD_VAR 0 5
67983: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67984: LD_INT 0
67986: PPUSH
67987: PPUSH
67988: PPUSH
67989: PPUSH
67990: PPUSH
67991: PPUSH
67992: PPUSH
67993: PPUSH
// if not turrets or not factories then
67994: LD_VAR 0 1
67998: NOT
67999: IFTRUE 68008
68001: PUSH
68002: LD_VAR 0 2
68006: NOT
68007: OR
68008: IFFALSE 68012
// exit ;
68010: GO 68319
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68012: LD_ADDR_VAR 0 10
68016: PUSH
68017: LD_INT 5
68019: PUSH
68020: LD_INT 6
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 2
68029: PUSH
68030: LD_INT 4
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 3
68039: PUSH
68040: LD_INT 5
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 24
68054: PUSH
68055: LD_INT 25
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 23
68064: PUSH
68065: LD_INT 27
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 42
68078: PUSH
68079: LD_INT 43
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 44
68088: PUSH
68089: LD_INT 46
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 45
68098: PUSH
68099: LD_INT 47
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: LIST
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: LIST
68115: ST_TO_ADDR
// result := [ ] ;
68116: LD_ADDR_VAR 0 3
68120: PUSH
68121: EMPTY
68122: ST_TO_ADDR
// for i in turrets do
68123: LD_ADDR_VAR 0 4
68127: PUSH
68128: LD_VAR 0 1
68132: PUSH
68133: FOR_IN
68134: IFFALSE 68317
// begin nat := GetNation ( i ) ;
68136: LD_ADDR_VAR 0 7
68140: PUSH
68141: LD_VAR 0 4
68145: PPUSH
68146: CALL_OW 248
68150: ST_TO_ADDR
// weapon := 0 ;
68151: LD_ADDR_VAR 0 8
68155: PUSH
68156: LD_INT 0
68158: ST_TO_ADDR
// if not nat then
68159: LD_VAR 0 7
68163: NOT
68164: IFFALSE 68168
// continue ;
68166: GO 68133
// for j in list [ nat ] do
68168: LD_ADDR_VAR 0 5
68172: PUSH
68173: LD_VAR 0 10
68177: PUSH
68178: LD_VAR 0 7
68182: ARRAY
68183: PUSH
68184: FOR_IN
68185: IFFALSE 68226
// if GetBWeapon ( i ) = j [ 1 ] then
68187: LD_VAR 0 4
68191: PPUSH
68192: CALL_OW 269
68196: PUSH
68197: LD_VAR 0 5
68201: PUSH
68202: LD_INT 1
68204: ARRAY
68205: EQUAL
68206: IFFALSE 68224
// begin weapon := j [ 2 ] ;
68208: LD_ADDR_VAR 0 8
68212: PUSH
68213: LD_VAR 0 5
68217: PUSH
68218: LD_INT 2
68220: ARRAY
68221: ST_TO_ADDR
// break ;
68222: GO 68226
// end ;
68224: GO 68184
68226: POP
68227: POP
// if not weapon then
68228: LD_VAR 0 8
68232: NOT
68233: IFFALSE 68237
// continue ;
68235: GO 68133
// for k in factories do
68237: LD_ADDR_VAR 0 6
68241: PUSH
68242: LD_VAR 0 2
68246: PUSH
68247: FOR_IN
68248: IFFALSE 68313
// begin weapons := AvailableWeaponList ( k ) ;
68250: LD_ADDR_VAR 0 9
68254: PUSH
68255: LD_VAR 0 6
68259: PPUSH
68260: CALL_OW 478
68264: ST_TO_ADDR
// if not weapons then
68265: LD_VAR 0 9
68269: NOT
68270: IFFALSE 68274
// continue ;
68272: GO 68247
// if weapon in weapons then
68274: LD_VAR 0 8
68278: PUSH
68279: LD_VAR 0 9
68283: IN
68284: IFFALSE 68311
// begin result := [ i , weapon ] ;
68286: LD_ADDR_VAR 0 3
68290: PUSH
68291: LD_VAR 0 4
68295: PUSH
68296: LD_VAR 0 8
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: ST_TO_ADDR
// exit ;
68305: POP
68306: POP
68307: POP
68308: POP
68309: GO 68319
// end ; end ;
68311: GO 68247
68313: POP
68314: POP
// end ;
68315: GO 68133
68317: POP
68318: POP
// end ;
68319: LD_VAR 0 3
68323: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68324: LD_INT 0
68326: PPUSH
// if not side or side > 8 then
68327: LD_VAR 0 3
68331: NOT
68332: IFTRUE 68344
68334: PUSH
68335: LD_VAR 0 3
68339: PUSH
68340: LD_INT 8
68342: GREATER
68343: OR
68344: IFFALSE 68348
// exit ;
68346: GO 68407
// if not range then
68348: LD_VAR 0 4
68352: NOT
68353: IFFALSE 68364
// range := - 12 ;
68355: LD_ADDR_VAR 0 4
68359: PUSH
68360: LD_INT 12
68362: NEG
68363: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68364: LD_VAR 0 1
68368: PPUSH
68369: LD_VAR 0 2
68373: PPUSH
68374: LD_VAR 0 3
68378: PPUSH
68379: LD_VAR 0 4
68383: PPUSH
68384: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68388: LD_VAR 0 1
68392: PPUSH
68393: LD_VAR 0 2
68397: PPUSH
68398: LD_VAR 0 3
68402: PPUSH
68403: CALL_OW 331
// end ;
68407: LD_VAR 0 5
68411: RET
// export function Video ( mode ) ; begin
68412: LD_INT 0
68414: PPUSH
// ingame_video = mode ;
68415: LD_ADDR_OWVAR 52
68419: PUSH
68420: LD_VAR 0 1
68424: ST_TO_ADDR
// interface_hidden = mode ;
68425: LD_ADDR_OWVAR 54
68429: PUSH
68430: LD_VAR 0 1
68434: ST_TO_ADDR
// end ;
68435: LD_VAR 0 2
68439: RET
// export function Join ( array , element ) ; begin
68440: LD_INT 0
68442: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68443: LD_ADDR_VAR 0 3
68447: PUSH
68448: LD_VAR 0 1
68452: PPUSH
68453: LD_VAR 0 1
68457: PUSH
68458: LD_INT 1
68460: PLUS
68461: PPUSH
68462: LD_VAR 0 2
68466: PPUSH
68467: CALL_OW 1
68471: ST_TO_ADDR
// end ;
68472: LD_VAR 0 3
68476: RET
// export function JoinUnion ( array , element ) ; begin
68477: LD_INT 0
68479: PPUSH
// result := array union element ;
68480: LD_ADDR_VAR 0 3
68484: PUSH
68485: LD_VAR 0 1
68489: PUSH
68490: LD_VAR 0 2
68494: UNION
68495: ST_TO_ADDR
// end ;
68496: LD_VAR 0 3
68500: RET
// export function GetBehemoths ( side ) ; begin
68501: LD_INT 0
68503: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68504: LD_ADDR_VAR 0 2
68508: PUSH
68509: LD_INT 22
68511: PUSH
68512: LD_VAR 0 1
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 31
68523: PUSH
68524: LD_INT 25
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PPUSH
68535: CALL_OW 69
68539: ST_TO_ADDR
// end ;
68540: LD_VAR 0 2
68544: RET
// export function Shuffle ( array ) ; var i , index ; begin
68545: LD_INT 0
68547: PPUSH
68548: PPUSH
68549: PPUSH
// result := [ ] ;
68550: LD_ADDR_VAR 0 2
68554: PUSH
68555: EMPTY
68556: ST_TO_ADDR
// if not array then
68557: LD_VAR 0 1
68561: NOT
68562: IFFALSE 68566
// exit ;
68564: GO 68665
// Randomize ;
68566: CALL_OW 10
// for i = array downto 1 do
68570: LD_ADDR_VAR 0 3
68574: PUSH
68575: DOUBLE
68576: LD_VAR 0 1
68580: INC
68581: ST_TO_ADDR
68582: LD_INT 1
68584: PUSH
68585: FOR_DOWNTO
68586: IFFALSE 68663
// begin index := rand ( 1 , array ) ;
68588: LD_ADDR_VAR 0 4
68592: PUSH
68593: LD_INT 1
68595: PPUSH
68596: LD_VAR 0 1
68600: PPUSH
68601: CALL_OW 12
68605: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68606: LD_ADDR_VAR 0 2
68610: PUSH
68611: LD_VAR 0 2
68615: PPUSH
68616: LD_VAR 0 2
68620: PUSH
68621: LD_INT 1
68623: PLUS
68624: PPUSH
68625: LD_VAR 0 1
68629: PUSH
68630: LD_VAR 0 4
68634: ARRAY
68635: PPUSH
68636: CALL_OW 2
68640: ST_TO_ADDR
// array := Delete ( array , index ) ;
68641: LD_ADDR_VAR 0 1
68645: PUSH
68646: LD_VAR 0 1
68650: PPUSH
68651: LD_VAR 0 4
68655: PPUSH
68656: CALL_OW 3
68660: ST_TO_ADDR
// end ;
68661: GO 68585
68663: POP
68664: POP
// end ;
68665: LD_VAR 0 2
68669: RET
// export function GetBaseMaterials ( base ) ; begin
68670: LD_INT 0
68672: PPUSH
// result := [ 0 , 0 , 0 ] ;
68673: LD_ADDR_VAR 0 2
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: LD_INT 0
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: LIST
68691: ST_TO_ADDR
// if not base then
68692: LD_VAR 0 1
68696: NOT
68697: IFFALSE 68701
// exit ;
68699: GO 68750
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68701: LD_ADDR_VAR 0 2
68705: PUSH
68706: LD_VAR 0 1
68710: PPUSH
68711: LD_INT 1
68713: PPUSH
68714: CALL_OW 275
68718: PUSH
68719: LD_VAR 0 1
68723: PPUSH
68724: LD_INT 2
68726: PPUSH
68727: CALL_OW 275
68731: PUSH
68732: LD_VAR 0 1
68736: PPUSH
68737: LD_INT 3
68739: PPUSH
68740: CALL_OW 275
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: LIST
68749: ST_TO_ADDR
// end ;
68750: LD_VAR 0 2
68754: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68755: LD_INT 0
68757: PPUSH
68758: PPUSH
// result := array ;
68759: LD_ADDR_VAR 0 3
68763: PUSH
68764: LD_VAR 0 1
68768: ST_TO_ADDR
// if size >= result then
68769: LD_VAR 0 2
68773: PUSH
68774: LD_VAR 0 3
68778: GREATEREQUAL
68779: IFFALSE 68783
// exit ;
68781: GO 68833
// if size then
68783: LD_VAR 0 2
68787: IFFALSE 68833
// for i := array downto size do
68789: LD_ADDR_VAR 0 4
68793: PUSH
68794: DOUBLE
68795: LD_VAR 0 1
68799: INC
68800: ST_TO_ADDR
68801: LD_VAR 0 2
68805: PUSH
68806: FOR_DOWNTO
68807: IFFALSE 68831
// result := Delete ( result , result ) ;
68809: LD_ADDR_VAR 0 3
68813: PUSH
68814: LD_VAR 0 3
68818: PPUSH
68819: LD_VAR 0 3
68823: PPUSH
68824: CALL_OW 3
68828: ST_TO_ADDR
68829: GO 68806
68831: POP
68832: POP
// end ;
68833: LD_VAR 0 3
68837: RET
// export function ComExit ( unit ) ; var tmp ; begin
68838: LD_INT 0
68840: PPUSH
68841: PPUSH
// if not IsInUnit ( unit ) then
68842: LD_VAR 0 1
68846: PPUSH
68847: CALL_OW 310
68851: NOT
68852: IFFALSE 68856
// exit ;
68854: GO 68916
// tmp := IsInUnit ( unit ) ;
68856: LD_ADDR_VAR 0 3
68860: PUSH
68861: LD_VAR 0 1
68865: PPUSH
68866: CALL_OW 310
68870: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68871: LD_VAR 0 3
68875: PPUSH
68876: CALL_OW 247
68880: PUSH
68881: LD_INT 2
68883: EQUAL
68884: IFFALSE 68897
// ComExitVehicle ( unit ) else
68886: LD_VAR 0 1
68890: PPUSH
68891: CALL_OW 121
68895: GO 68906
// ComExitBuilding ( unit ) ;
68897: LD_VAR 0 1
68901: PPUSH
68902: CALL_OW 122
// result := tmp ;
68906: LD_ADDR_VAR 0 2
68910: PUSH
68911: LD_VAR 0 3
68915: ST_TO_ADDR
// end ;
68916: LD_VAR 0 2
68920: RET
// export function ComExitAll ( units ) ; var i ; begin
68921: LD_INT 0
68923: PPUSH
68924: PPUSH
// if not units then
68925: LD_VAR 0 1
68929: NOT
68930: IFFALSE 68934
// exit ;
68932: GO 68960
// for i in units do
68934: LD_ADDR_VAR 0 3
68938: PUSH
68939: LD_VAR 0 1
68943: PUSH
68944: FOR_IN
68945: IFFALSE 68958
// ComExit ( i ) ;
68947: LD_VAR 0 3
68951: PPUSH
68952: CALL 68838 0 1
68956: GO 68944
68958: POP
68959: POP
// end ;
68960: LD_VAR 0 2
68964: RET
// export function ResetHc ; begin
68965: LD_INT 0
68967: PPUSH
// InitHc ;
68968: CALL_OW 19
// hc_importance := 0 ;
68972: LD_ADDR_OWVAR 32
68976: PUSH
68977: LD_INT 0
68979: ST_TO_ADDR
// end ;
68980: LD_VAR 0 1
68984: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68985: LD_INT 0
68987: PPUSH
68988: PPUSH
68989: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68990: LD_ADDR_VAR 0 6
68994: PUSH
68995: LD_VAR 0 1
68999: PUSH
69000: LD_VAR 0 3
69004: PLUS
69005: PUSH
69006: LD_INT 2
69008: DIV
69009: ST_TO_ADDR
// if _x < 0 then
69010: LD_VAR 0 6
69014: PUSH
69015: LD_INT 0
69017: LESS
69018: IFFALSE 69035
// _x := _x * - 1 ;
69020: LD_ADDR_VAR 0 6
69024: PUSH
69025: LD_VAR 0 6
69029: PUSH
69030: LD_INT 1
69032: NEG
69033: MUL
69034: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69035: LD_ADDR_VAR 0 7
69039: PUSH
69040: LD_VAR 0 2
69044: PUSH
69045: LD_VAR 0 4
69049: PLUS
69050: PUSH
69051: LD_INT 2
69053: DIV
69054: ST_TO_ADDR
// if _y < 0 then
69055: LD_VAR 0 7
69059: PUSH
69060: LD_INT 0
69062: LESS
69063: IFFALSE 69080
// _y := _y * - 1 ;
69065: LD_ADDR_VAR 0 7
69069: PUSH
69070: LD_VAR 0 7
69074: PUSH
69075: LD_INT 1
69077: NEG
69078: MUL
69079: ST_TO_ADDR
// result := [ _x , _y ] ;
69080: LD_ADDR_VAR 0 5
69084: PUSH
69085: LD_VAR 0 6
69089: PUSH
69090: LD_VAR 0 7
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: ST_TO_ADDR
// end ;
69099: LD_VAR 0 5
69103: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69104: LD_INT 0
69106: PPUSH
69107: PPUSH
69108: PPUSH
69109: PPUSH
// task := GetTaskList ( unit ) ;
69110: LD_ADDR_VAR 0 7
69114: PUSH
69115: LD_VAR 0 1
69119: PPUSH
69120: CALL_OW 437
69124: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69125: LD_VAR 0 7
69129: NOT
69130: IFFALSE 69149
69132: PUSH
69133: LD_VAR 0 1
69137: PPUSH
69138: LD_VAR 0 2
69142: PPUSH
69143: CALL_OW 308
69147: NOT
69148: AND
69149: IFFALSE 69153
// exit ;
69151: GO 69271
// if IsInArea ( unit , area ) then
69153: LD_VAR 0 1
69157: PPUSH
69158: LD_VAR 0 2
69162: PPUSH
69163: CALL_OW 308
69167: IFFALSE 69185
// begin ComMoveToArea ( unit , goAway ) ;
69169: LD_VAR 0 1
69173: PPUSH
69174: LD_VAR 0 3
69178: PPUSH
69179: CALL_OW 113
// exit ;
69183: GO 69271
// end ; if task [ 1 ] [ 1 ] <> M then
69185: LD_VAR 0 7
69189: PUSH
69190: LD_INT 1
69192: ARRAY
69193: PUSH
69194: LD_INT 1
69196: ARRAY
69197: PUSH
69198: LD_STRING M
69200: NONEQUAL
69201: IFFALSE 69205
// exit ;
69203: GO 69271
// x := task [ 1 ] [ 2 ] ;
69205: LD_ADDR_VAR 0 5
69209: PUSH
69210: LD_VAR 0 7
69214: PUSH
69215: LD_INT 1
69217: ARRAY
69218: PUSH
69219: LD_INT 2
69221: ARRAY
69222: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69223: LD_ADDR_VAR 0 6
69227: PUSH
69228: LD_VAR 0 7
69232: PUSH
69233: LD_INT 1
69235: ARRAY
69236: PUSH
69237: LD_INT 3
69239: ARRAY
69240: ST_TO_ADDR
// if InArea ( x , y , area ) then
69241: LD_VAR 0 5
69245: PPUSH
69246: LD_VAR 0 6
69250: PPUSH
69251: LD_VAR 0 2
69255: PPUSH
69256: CALL_OW 309
69260: IFFALSE 69271
// ComStop ( unit ) ;
69262: LD_VAR 0 1
69266: PPUSH
69267: CALL_OW 141
// end ;
69271: LD_VAR 0 4
69275: RET
// export function Abs ( value ) ; begin
69276: LD_INT 0
69278: PPUSH
// result := value ;
69279: LD_ADDR_VAR 0 2
69283: PUSH
69284: LD_VAR 0 1
69288: ST_TO_ADDR
// if value < 0 then
69289: LD_VAR 0 1
69293: PUSH
69294: LD_INT 0
69296: LESS
69297: IFFALSE 69314
// result := value * - 1 ;
69299: LD_ADDR_VAR 0 2
69303: PUSH
69304: LD_VAR 0 1
69308: PUSH
69309: LD_INT 1
69311: NEG
69312: MUL
69313: ST_TO_ADDR
// end ;
69314: LD_VAR 0 2
69318: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69319: LD_INT 0
69321: PPUSH
69322: PPUSH
69323: PPUSH
69324: PPUSH
69325: PPUSH
69326: PPUSH
69327: PPUSH
69328: PPUSH
// if not unit or not building then
69329: LD_VAR 0 1
69333: NOT
69334: IFTRUE 69343
69336: PUSH
69337: LD_VAR 0 2
69341: NOT
69342: OR
69343: IFFALSE 69347
// exit ;
69345: GO 69575
// x := GetX ( building ) ;
69347: LD_ADDR_VAR 0 4
69351: PUSH
69352: LD_VAR 0 2
69356: PPUSH
69357: CALL_OW 250
69361: ST_TO_ADDR
// y := GetY ( building ) ;
69362: LD_ADDR_VAR 0 6
69366: PUSH
69367: LD_VAR 0 2
69371: PPUSH
69372: CALL_OW 251
69376: ST_TO_ADDR
// d := GetDir ( building ) ;
69377: LD_ADDR_VAR 0 8
69381: PUSH
69382: LD_VAR 0 2
69386: PPUSH
69387: CALL_OW 254
69391: ST_TO_ADDR
// r := 4 ;
69392: LD_ADDR_VAR 0 9
69396: PUSH
69397: LD_INT 4
69399: ST_TO_ADDR
// for i := 1 to 5 do
69400: LD_ADDR_VAR 0 10
69404: PUSH
69405: DOUBLE
69406: LD_INT 1
69408: DEC
69409: ST_TO_ADDR
69410: LD_INT 5
69412: PUSH
69413: FOR_TO
69414: IFFALSE 69573
// begin _x := ShiftX ( x , d , r + i ) ;
69416: LD_ADDR_VAR 0 5
69420: PUSH
69421: LD_VAR 0 4
69425: PPUSH
69426: LD_VAR 0 8
69430: PPUSH
69431: LD_VAR 0 9
69435: PUSH
69436: LD_VAR 0 10
69440: PLUS
69441: PPUSH
69442: CALL_OW 272
69446: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69447: LD_ADDR_VAR 0 7
69451: PUSH
69452: LD_VAR 0 6
69456: PPUSH
69457: LD_VAR 0 8
69461: PPUSH
69462: LD_VAR 0 9
69466: PUSH
69467: LD_VAR 0 10
69471: PLUS
69472: PPUSH
69473: CALL_OW 273
69477: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69478: LD_VAR 0 5
69482: PPUSH
69483: LD_VAR 0 7
69487: PPUSH
69488: CALL_OW 488
69492: IFFALSE 69527
69494: PUSH
69495: LD_VAR 0 5
69499: PPUSH
69500: LD_VAR 0 7
69504: PPUSH
69505: CALL_OW 428
69509: PPUSH
69510: CALL_OW 247
69514: PUSH
69515: LD_INT 3
69517: PUSH
69518: LD_INT 2
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: IN
69525: NOT
69526: AND
69527: IFFALSE 69571
// begin ComMoveXY ( unit , _x , _y ) ;
69529: LD_VAR 0 1
69533: PPUSH
69534: LD_VAR 0 5
69538: PPUSH
69539: LD_VAR 0 7
69543: PPUSH
69544: CALL_OW 111
// result := [ _x , _y ] ;
69548: LD_ADDR_VAR 0 3
69552: PUSH
69553: LD_VAR 0 5
69557: PUSH
69558: LD_VAR 0 7
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: ST_TO_ADDR
// exit ;
69567: POP
69568: POP
69569: GO 69575
// end ; end ;
69571: GO 69413
69573: POP
69574: POP
// end ;
69575: LD_VAR 0 3
69579: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69580: LD_INT 0
69582: PPUSH
69583: PPUSH
69584: PPUSH
// result := 0 ;
69585: LD_ADDR_VAR 0 3
69589: PUSH
69590: LD_INT 0
69592: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69593: LD_VAR 0 1
69597: PUSH
69598: LD_INT 0
69600: LESS
69601: IFTRUE 69613
69603: PUSH
69604: LD_VAR 0 1
69608: PUSH
69609: LD_INT 8
69611: GREATER
69612: OR
69613: IFTRUE 69625
69615: PUSH
69616: LD_VAR 0 2
69620: PUSH
69621: LD_INT 0
69623: LESS
69624: OR
69625: IFTRUE 69637
69627: PUSH
69628: LD_VAR 0 2
69632: PUSH
69633: LD_INT 8
69635: GREATER
69636: OR
69637: IFFALSE 69641
// exit ;
69639: GO 69716
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69641: LD_ADDR_VAR 0 4
69645: PUSH
69646: LD_INT 22
69648: PUSH
69649: LD_VAR 0 2
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PPUSH
69658: CALL_OW 69
69662: PUSH
69663: FOR_IN
69664: IFFALSE 69714
// begin un := UnitShoot ( i ) ;
69666: LD_ADDR_VAR 0 5
69670: PUSH
69671: LD_VAR 0 4
69675: PPUSH
69676: CALL_OW 504
69680: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69681: LD_VAR 0 5
69685: PPUSH
69686: CALL_OW 255
69690: PUSH
69691: LD_VAR 0 1
69695: EQUAL
69696: IFFALSE 69712
// begin result := un ;
69698: LD_ADDR_VAR 0 3
69702: PUSH
69703: LD_VAR 0 5
69707: ST_TO_ADDR
// exit ;
69708: POP
69709: POP
69710: GO 69716
// end ; end ;
69712: GO 69663
69714: POP
69715: POP
// end ;
69716: LD_VAR 0 3
69720: RET
// export function GetCargoBay ( units ) ; begin
69721: LD_INT 0
69723: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69724: LD_ADDR_VAR 0 2
69728: PUSH
69729: LD_VAR 0 1
69733: PPUSH
69734: LD_INT 2
69736: PUSH
69737: LD_INT 34
69739: PUSH
69740: LD_INT 12
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 34
69749: PUSH
69750: LD_INT 51
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 34
69759: PUSH
69760: LD_INT 32
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 34
69769: PUSH
69770: LD_INT 89
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: PPUSH
69784: CALL_OW 72
69788: ST_TO_ADDR
// end ;
69789: LD_VAR 0 2
69793: RET
// export function Negate ( value ) ; begin
69794: LD_INT 0
69796: PPUSH
// result := not value ;
69797: LD_ADDR_VAR 0 2
69801: PUSH
69802: LD_VAR 0 1
69806: NOT
69807: ST_TO_ADDR
// end ;
69808: LD_VAR 0 2
69812: RET
// export function Inc ( value ) ; begin
69813: LD_INT 0
69815: PPUSH
// result := value + 1 ;
69816: LD_ADDR_VAR 0 2
69820: PUSH
69821: LD_VAR 0 1
69825: PUSH
69826: LD_INT 1
69828: PLUS
69829: ST_TO_ADDR
// end ;
69830: LD_VAR 0 2
69834: RET
// export function Dec ( value ) ; begin
69835: LD_INT 0
69837: PPUSH
// result := value - 1 ;
69838: LD_ADDR_VAR 0 2
69842: PUSH
69843: LD_VAR 0 1
69847: PUSH
69848: LD_INT 1
69850: MINUS
69851: ST_TO_ADDR
// end ;
69852: LD_VAR 0 2
69856: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69857: LD_INT 0
69859: PPUSH
69860: PPUSH
69861: PPUSH
69862: PPUSH
69863: PPUSH
69864: PPUSH
69865: PPUSH
69866: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69867: LD_VAR 0 1
69871: PPUSH
69872: LD_VAR 0 2
69876: PPUSH
69877: CALL_OW 488
69881: NOT
69882: IFTRUE 69901
69884: PUSH
69885: LD_VAR 0 3
69889: PPUSH
69890: LD_VAR 0 4
69894: PPUSH
69895: CALL_OW 488
69899: NOT
69900: OR
69901: IFFALSE 69914
// begin result := - 1 ;
69903: LD_ADDR_VAR 0 5
69907: PUSH
69908: LD_INT 1
69910: NEG
69911: ST_TO_ADDR
// exit ;
69912: GO 70149
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69914: LD_ADDR_VAR 0 12
69918: PUSH
69919: LD_VAR 0 1
69923: PPUSH
69924: LD_VAR 0 2
69928: PPUSH
69929: LD_VAR 0 3
69933: PPUSH
69934: LD_VAR 0 4
69938: PPUSH
69939: CALL 68985 0 4
69943: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69944: LD_ADDR_VAR 0 11
69948: PUSH
69949: LD_VAR 0 1
69953: PPUSH
69954: LD_VAR 0 2
69958: PPUSH
69959: LD_VAR 0 12
69963: PUSH
69964: LD_INT 1
69966: ARRAY
69967: PPUSH
69968: LD_VAR 0 12
69972: PUSH
69973: LD_INT 2
69975: ARRAY
69976: PPUSH
69977: CALL_OW 298
69981: ST_TO_ADDR
// distance := 9999 ;
69982: LD_ADDR_VAR 0 10
69986: PUSH
69987: LD_INT 9999
69989: ST_TO_ADDR
// for i := 0 to 5 do
69990: LD_ADDR_VAR 0 6
69994: PUSH
69995: DOUBLE
69996: LD_INT 0
69998: DEC
69999: ST_TO_ADDR
70000: LD_INT 5
70002: PUSH
70003: FOR_TO
70004: IFFALSE 70147
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70006: LD_ADDR_VAR 0 7
70010: PUSH
70011: LD_VAR 0 1
70015: PPUSH
70016: LD_VAR 0 6
70020: PPUSH
70021: LD_VAR 0 11
70025: PPUSH
70026: CALL_OW 272
70030: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70031: LD_ADDR_VAR 0 8
70035: PUSH
70036: LD_VAR 0 2
70040: PPUSH
70041: LD_VAR 0 6
70045: PPUSH
70046: LD_VAR 0 11
70050: PPUSH
70051: CALL_OW 273
70055: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70056: LD_VAR 0 7
70060: PPUSH
70061: LD_VAR 0 8
70065: PPUSH
70066: CALL_OW 488
70070: NOT
70071: IFFALSE 70075
// continue ;
70073: GO 70003
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70075: LD_ADDR_VAR 0 9
70079: PUSH
70080: LD_VAR 0 12
70084: PUSH
70085: LD_INT 1
70087: ARRAY
70088: PPUSH
70089: LD_VAR 0 12
70093: PUSH
70094: LD_INT 2
70096: ARRAY
70097: PPUSH
70098: LD_VAR 0 7
70102: PPUSH
70103: LD_VAR 0 8
70107: PPUSH
70108: CALL_OW 298
70112: ST_TO_ADDR
// if tmp < distance then
70113: LD_VAR 0 9
70117: PUSH
70118: LD_VAR 0 10
70122: LESS
70123: IFFALSE 70145
// begin result := i ;
70125: LD_ADDR_VAR 0 5
70129: PUSH
70130: LD_VAR 0 6
70134: ST_TO_ADDR
// distance := tmp ;
70135: LD_ADDR_VAR 0 10
70139: PUSH
70140: LD_VAR 0 9
70144: ST_TO_ADDR
// end ; end ;
70145: GO 70003
70147: POP
70148: POP
// end ;
70149: LD_VAR 0 5
70153: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70154: LD_INT 0
70156: PPUSH
70157: PPUSH
// if not driver or not IsInUnit ( driver ) then
70158: LD_VAR 0 1
70162: NOT
70163: IFTRUE 70177
70165: PUSH
70166: LD_VAR 0 1
70170: PPUSH
70171: CALL_OW 310
70175: NOT
70176: OR
70177: IFFALSE 70181
// exit ;
70179: GO 70271
// vehicle := IsInUnit ( driver ) ;
70181: LD_ADDR_VAR 0 3
70185: PUSH
70186: LD_VAR 0 1
70190: PPUSH
70191: CALL_OW 310
70195: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70196: LD_VAR 0 1
70200: PPUSH
70201: LD_STRING \
70203: PUSH
70204: LD_INT 0
70206: PUSH
70207: LD_INT 0
70209: PUSH
70210: LD_INT 0
70212: PUSH
70213: LD_INT 0
70215: PUSH
70216: LD_INT 0
70218: PUSH
70219: LD_INT 0
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: PUSH
70231: LD_STRING E
70233: PUSH
70234: LD_INT 0
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: LD_VAR 0 3
70244: PUSH
70245: LD_INT 0
70247: PUSH
70248: LD_INT 0
70250: PUSH
70251: LD_INT 0
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PPUSH
70267: CALL_OW 446
// end ;
70271: LD_VAR 0 2
70275: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70276: LD_INT 0
70278: PPUSH
70279: PPUSH
// if not driver or not IsInUnit ( driver ) then
70280: LD_VAR 0 1
70284: NOT
70285: IFTRUE 70299
70287: PUSH
70288: LD_VAR 0 1
70292: PPUSH
70293: CALL_OW 310
70297: NOT
70298: OR
70299: IFFALSE 70303
// exit ;
70301: GO 70393
// vehicle := IsInUnit ( driver ) ;
70303: LD_ADDR_VAR 0 3
70307: PUSH
70308: LD_VAR 0 1
70312: PPUSH
70313: CALL_OW 310
70317: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70318: LD_VAR 0 1
70322: PPUSH
70323: LD_STRING \
70325: PUSH
70326: LD_INT 0
70328: PUSH
70329: LD_INT 0
70331: PUSH
70332: LD_INT 0
70334: PUSH
70335: LD_INT 0
70337: PUSH
70338: LD_INT 0
70340: PUSH
70341: LD_INT 0
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: PUSH
70353: LD_STRING E
70355: PUSH
70356: LD_INT 0
70358: PUSH
70359: LD_INT 0
70361: PUSH
70362: LD_VAR 0 3
70366: PUSH
70367: LD_INT 0
70369: PUSH
70370: LD_INT 0
70372: PUSH
70373: LD_INT 0
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PPUSH
70389: CALL_OW 447
// end ;
70393: LD_VAR 0 2
70397: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70398: LD_INT 0
70400: PPUSH
70401: PPUSH
70402: PPUSH
// tmp := [ ] ;
70403: LD_ADDR_VAR 0 5
70407: PUSH
70408: EMPTY
70409: ST_TO_ADDR
// for i in units do
70410: LD_ADDR_VAR 0 4
70414: PUSH
70415: LD_VAR 0 1
70419: PUSH
70420: FOR_IN
70421: IFFALSE 70459
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70423: LD_ADDR_VAR 0 5
70427: PUSH
70428: LD_VAR 0 5
70432: PPUSH
70433: LD_VAR 0 5
70437: PUSH
70438: LD_INT 1
70440: PLUS
70441: PPUSH
70442: LD_VAR 0 4
70446: PPUSH
70447: CALL_OW 256
70451: PPUSH
70452: CALL_OW 2
70456: ST_TO_ADDR
70457: GO 70420
70459: POP
70460: POP
// if not tmp then
70461: LD_VAR 0 5
70465: NOT
70466: IFFALSE 70470
// exit ;
70468: GO 70518
// if asc then
70470: LD_VAR 0 2
70474: IFFALSE 70498
// result := SortListByListAsc ( units , tmp ) else
70476: LD_ADDR_VAR 0 3
70480: PUSH
70481: LD_VAR 0 1
70485: PPUSH
70486: LD_VAR 0 5
70490: PPUSH
70491: CALL_OW 76
70495: ST_TO_ADDR
70496: GO 70518
// result := SortListByListDesc ( units , tmp ) ;
70498: LD_ADDR_VAR 0 3
70502: PUSH
70503: LD_VAR 0 1
70507: PPUSH
70508: LD_VAR 0 5
70512: PPUSH
70513: CALL_OW 77
70517: ST_TO_ADDR
// end ;
70518: LD_VAR 0 3
70522: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70523: LD_INT 0
70525: PPUSH
70526: PPUSH
// task := GetTaskList ( mech ) ;
70527: LD_ADDR_VAR 0 4
70531: PUSH
70532: LD_VAR 0 1
70536: PPUSH
70537: CALL_OW 437
70541: ST_TO_ADDR
// if not task then
70542: LD_VAR 0 4
70546: NOT
70547: IFFALSE 70551
// exit ;
70549: GO 70595
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70551: LD_ADDR_VAR 0 3
70555: PUSH
70556: LD_VAR 0 4
70560: PUSH
70561: LD_INT 1
70563: ARRAY
70564: PUSH
70565: LD_INT 1
70567: ARRAY
70568: PUSH
70569: LD_STRING r
70571: EQUAL
70572: IFFALSE 70594
70574: PUSH
70575: LD_VAR 0 4
70579: PUSH
70580: LD_INT 1
70582: ARRAY
70583: PUSH
70584: LD_INT 4
70586: ARRAY
70587: PUSH
70588: LD_VAR 0 2
70592: EQUAL
70593: AND
70594: ST_TO_ADDR
// end ;
70595: LD_VAR 0 3
70599: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70600: LD_INT 0
70602: PPUSH
// SetDir ( unit , d ) ;
70603: LD_VAR 0 1
70607: PPUSH
70608: LD_VAR 0 4
70612: PPUSH
70613: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70617: LD_ADDR_VAR 0 6
70621: PUSH
70622: LD_VAR 0 1
70626: PPUSH
70627: LD_VAR 0 2
70631: PPUSH
70632: LD_VAR 0 3
70636: PPUSH
70637: LD_VAR 0 5
70641: PPUSH
70642: CALL_OW 48
70646: ST_TO_ADDR
// end ;
70647: LD_VAR 0 6
70651: RET
// export function ToNaturalNumber ( number ) ; begin
70652: LD_INT 0
70654: PPUSH
// result := number div 1 ;
70655: LD_ADDR_VAR 0 2
70659: PUSH
70660: LD_VAR 0 1
70664: PUSH
70665: LD_INT 1
70667: DIV
70668: ST_TO_ADDR
// if number < 0 then
70669: LD_VAR 0 1
70673: PUSH
70674: LD_INT 0
70676: LESS
70677: IFFALSE 70687
// result := 0 ;
70679: LD_ADDR_VAR 0 2
70683: PUSH
70684: LD_INT 0
70686: ST_TO_ADDR
// end ;
70687: LD_VAR 0 2
70691: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70692: LD_INT 0
70694: PPUSH
70695: PPUSH
70696: PPUSH
// if not buildings then
70697: LD_VAR 0 1
70701: NOT
70702: IFFALSE 70706
// exit ;
70704: GO 70821
// tmp := [ ] ;
70706: LD_ADDR_VAR 0 5
70710: PUSH
70711: EMPTY
70712: ST_TO_ADDR
// for b in buildings do
70713: LD_ADDR_VAR 0 4
70717: PUSH
70718: LD_VAR 0 1
70722: PUSH
70723: FOR_IN
70724: IFFALSE 70762
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70726: LD_ADDR_VAR 0 5
70730: PUSH
70731: LD_VAR 0 5
70735: PPUSH
70736: LD_VAR 0 5
70740: PUSH
70741: LD_INT 1
70743: PLUS
70744: PPUSH
70745: LD_VAR 0 4
70749: PPUSH
70750: CALL_OW 266
70754: PPUSH
70755: CALL_OW 1
70759: ST_TO_ADDR
70760: GO 70723
70762: POP
70763: POP
// if not tmp then
70764: LD_VAR 0 5
70768: NOT
70769: IFFALSE 70773
// exit ;
70771: GO 70821
// if asc then
70773: LD_VAR 0 2
70777: IFFALSE 70801
// result := SortListByListAsc ( buildings , tmp ) else
70779: LD_ADDR_VAR 0 3
70783: PUSH
70784: LD_VAR 0 1
70788: PPUSH
70789: LD_VAR 0 5
70793: PPUSH
70794: CALL_OW 76
70798: ST_TO_ADDR
70799: GO 70821
// result := SortListByListDesc ( buildings , tmp ) ;
70801: LD_ADDR_VAR 0 3
70805: PUSH
70806: LD_VAR 0 1
70810: PPUSH
70811: LD_VAR 0 5
70815: PPUSH
70816: CALL_OW 77
70820: ST_TO_ADDR
// end ;
70821: LD_VAR 0 3
70825: RET
// export function SortByClass ( units , class ) ; var un ; begin
70826: LD_INT 0
70828: PPUSH
70829: PPUSH
// if not units or not class then
70830: LD_VAR 0 1
70834: NOT
70835: IFTRUE 70844
70837: PUSH
70838: LD_VAR 0 2
70842: NOT
70843: OR
70844: IFFALSE 70848
// exit ;
70846: GO 70943
// result := [ ] ;
70848: LD_ADDR_VAR 0 3
70852: PUSH
70853: EMPTY
70854: ST_TO_ADDR
// for un in units do
70855: LD_ADDR_VAR 0 4
70859: PUSH
70860: LD_VAR 0 1
70864: PUSH
70865: FOR_IN
70866: IFFALSE 70941
// if GetClass ( un ) = class then
70868: LD_VAR 0 4
70872: PPUSH
70873: CALL_OW 257
70877: PUSH
70878: LD_VAR 0 2
70882: EQUAL
70883: IFFALSE 70910
// result := Insert ( result , 1 , un ) else
70885: LD_ADDR_VAR 0 3
70889: PUSH
70890: LD_VAR 0 3
70894: PPUSH
70895: LD_INT 1
70897: PPUSH
70898: LD_VAR 0 4
70902: PPUSH
70903: CALL_OW 2
70907: ST_TO_ADDR
70908: GO 70939
// result := Replace ( result , result + 1 , un ) ;
70910: LD_ADDR_VAR 0 3
70914: PUSH
70915: LD_VAR 0 3
70919: PPUSH
70920: LD_VAR 0 3
70924: PUSH
70925: LD_INT 1
70927: PLUS
70928: PPUSH
70929: LD_VAR 0 4
70933: PPUSH
70934: CALL_OW 1
70938: ST_TO_ADDR
70939: GO 70865
70941: POP
70942: POP
// end ;
70943: LD_VAR 0 3
70947: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70948: LD_INT 0
70950: PPUSH
70951: PPUSH
70952: PPUSH
70953: PPUSH
70954: PPUSH
70955: PPUSH
70956: PPUSH
// result := [ ] ;
70957: LD_ADDR_VAR 0 4
70961: PUSH
70962: EMPTY
70963: ST_TO_ADDR
// if x - r < 0 then
70964: LD_VAR 0 1
70968: PUSH
70969: LD_VAR 0 3
70973: MINUS
70974: PUSH
70975: LD_INT 0
70977: LESS
70978: IFFALSE 70990
// min_x := 0 else
70980: LD_ADDR_VAR 0 8
70984: PUSH
70985: LD_INT 0
70987: ST_TO_ADDR
70988: GO 71006
// min_x := x - r ;
70990: LD_ADDR_VAR 0 8
70994: PUSH
70995: LD_VAR 0 1
70999: PUSH
71000: LD_VAR 0 3
71004: MINUS
71005: ST_TO_ADDR
// if y - r < 0 then
71006: LD_VAR 0 2
71010: PUSH
71011: LD_VAR 0 3
71015: MINUS
71016: PUSH
71017: LD_INT 0
71019: LESS
71020: IFFALSE 71032
// min_y := 0 else
71022: LD_ADDR_VAR 0 7
71026: PUSH
71027: LD_INT 0
71029: ST_TO_ADDR
71030: GO 71048
// min_y := y - r ;
71032: LD_ADDR_VAR 0 7
71036: PUSH
71037: LD_VAR 0 2
71041: PUSH
71042: LD_VAR 0 3
71046: MINUS
71047: ST_TO_ADDR
// max_x := x + r ;
71048: LD_ADDR_VAR 0 9
71052: PUSH
71053: LD_VAR 0 1
71057: PUSH
71058: LD_VAR 0 3
71062: PLUS
71063: ST_TO_ADDR
// max_y := y + r ;
71064: LD_ADDR_VAR 0 10
71068: PUSH
71069: LD_VAR 0 2
71073: PUSH
71074: LD_VAR 0 3
71078: PLUS
71079: ST_TO_ADDR
// for _x = min_x to max_x do
71080: LD_ADDR_VAR 0 5
71084: PUSH
71085: DOUBLE
71086: LD_VAR 0 8
71090: DEC
71091: ST_TO_ADDR
71092: LD_VAR 0 9
71096: PUSH
71097: FOR_TO
71098: IFFALSE 71199
// for _y = min_y to max_y do
71100: LD_ADDR_VAR 0 6
71104: PUSH
71105: DOUBLE
71106: LD_VAR 0 7
71110: DEC
71111: ST_TO_ADDR
71112: LD_VAR 0 10
71116: PUSH
71117: FOR_TO
71118: IFFALSE 71195
// begin if not ValidHex ( _x , _y ) then
71120: LD_VAR 0 5
71124: PPUSH
71125: LD_VAR 0 6
71129: PPUSH
71130: CALL_OW 488
71134: NOT
71135: IFFALSE 71139
// continue ;
71137: GO 71117
// if GetResourceTypeXY ( _x , _y ) then
71139: LD_VAR 0 5
71143: PPUSH
71144: LD_VAR 0 6
71148: PPUSH
71149: CALL_OW 283
71153: IFFALSE 71193
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71155: LD_ADDR_VAR 0 4
71159: PUSH
71160: LD_VAR 0 4
71164: PPUSH
71165: LD_VAR 0 4
71169: PUSH
71170: LD_INT 1
71172: PLUS
71173: PPUSH
71174: LD_VAR 0 5
71178: PUSH
71179: LD_VAR 0 6
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PPUSH
71188: CALL_OW 1
71192: ST_TO_ADDR
// end ;
71193: GO 71117
71195: POP
71196: POP
71197: GO 71097
71199: POP
71200: POP
// end ;
71201: LD_VAR 0 4
71205: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71206: LD_INT 0
71208: PPUSH
71209: PPUSH
71210: PPUSH
71211: PPUSH
71212: PPUSH
71213: PPUSH
71214: PPUSH
71215: PPUSH
// if not units then
71216: LD_VAR 0 1
71220: NOT
71221: IFFALSE 71225
// exit ;
71223: GO 71757
// result := UnitFilter ( units , [ f_ok ] ) ;
71225: LD_ADDR_VAR 0 3
71229: PUSH
71230: LD_VAR 0 1
71234: PPUSH
71235: LD_INT 50
71237: PUSH
71238: EMPTY
71239: LIST
71240: PPUSH
71241: CALL_OW 72
71245: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71246: LD_ADDR_VAR 0 8
71250: PUSH
71251: LD_VAR 0 1
71255: PUSH
71256: LD_INT 1
71258: ARRAY
71259: PPUSH
71260: CALL_OW 255
71264: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71265: LD_ADDR_VAR 0 10
71269: PUSH
71270: LD_INT 29
71272: PUSH
71273: LD_INT 91
71275: PUSH
71276: LD_INT 49
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: LIST
71283: ST_TO_ADDR
// if not result then
71284: LD_VAR 0 3
71288: NOT
71289: IFFALSE 71293
// exit ;
71291: GO 71757
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71293: LD_ADDR_VAR 0 5
71297: PUSH
71298: LD_INT 81
71300: PUSH
71301: LD_VAR 0 8
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PPUSH
71310: CALL_OW 69
71314: ST_TO_ADDR
// for i in result do
71315: LD_ADDR_VAR 0 4
71319: PUSH
71320: LD_VAR 0 3
71324: PUSH
71325: FOR_IN
71326: IFFALSE 71755
// begin tag := GetTag ( i ) + 1 ;
71328: LD_ADDR_VAR 0 9
71332: PUSH
71333: LD_VAR 0 4
71337: PPUSH
71338: CALL_OW 110
71342: PUSH
71343: LD_INT 1
71345: PLUS
71346: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71347: LD_ADDR_VAR 0 7
71351: PUSH
71352: LD_VAR 0 4
71356: PPUSH
71357: CALL_OW 250
71361: PPUSH
71362: LD_VAR 0 4
71366: PPUSH
71367: CALL_OW 251
71371: PPUSH
71372: LD_INT 4
71374: PPUSH
71375: CALL 70948 0 3
71379: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71380: LD_VAR 0 4
71384: PPUSH
71385: CALL_OW 247
71389: PUSH
71390: LD_INT 2
71392: EQUAL
71393: IFFALSE 71405
71395: PUSH
71396: LD_VAR 0 7
71400: PUSH
71401: LD_INT 2
71403: GREATER
71404: AND
71405: IFFALSE 71425
71407: PUSH
71408: LD_VAR 0 4
71412: PPUSH
71413: CALL_OW 264
71417: PUSH
71418: LD_VAR 0 10
71422: IN
71423: NOT
71424: AND
71425: IFFALSE 71464
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71427: LD_VAR 0 4
71431: PPUSH
71432: LD_VAR 0 7
71436: PUSH
71437: LD_INT 1
71439: ARRAY
71440: PUSH
71441: LD_INT 1
71443: ARRAY
71444: PPUSH
71445: LD_VAR 0 7
71449: PUSH
71450: LD_INT 1
71452: ARRAY
71453: PUSH
71454: LD_INT 2
71456: ARRAY
71457: PPUSH
71458: CALL_OW 116
71462: GO 71753
// if path > tag then
71464: LD_VAR 0 2
71468: PUSH
71469: LD_VAR 0 9
71473: GREATER
71474: IFFALSE 71682
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71476: LD_ADDR_VAR 0 6
71480: PUSH
71481: LD_VAR 0 5
71485: PPUSH
71486: LD_INT 91
71488: PUSH
71489: LD_VAR 0 4
71493: PUSH
71494: LD_INT 8
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: LIST
71501: PPUSH
71502: CALL_OW 72
71506: ST_TO_ADDR
// if nearEnemy then
71507: LD_VAR 0 6
71511: IFFALSE 71580
// begin if GetWeapon ( i ) = ru_time_lapser then
71513: LD_VAR 0 4
71517: PPUSH
71518: CALL_OW 264
71522: PUSH
71523: LD_INT 49
71525: EQUAL
71526: IFFALSE 71554
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71528: LD_VAR 0 4
71532: PPUSH
71533: LD_VAR 0 6
71537: PPUSH
71538: LD_VAR 0 4
71542: PPUSH
71543: CALL_OW 74
71547: PPUSH
71548: CALL_OW 112
71552: GO 71578
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71554: LD_VAR 0 4
71558: PPUSH
71559: LD_VAR 0 6
71563: PPUSH
71564: LD_VAR 0 4
71568: PPUSH
71569: CALL_OW 74
71573: PPUSH
71574: CALL 72838 0 2
// end else
71578: GO 71680
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71580: LD_VAR 0 4
71584: PPUSH
71585: LD_VAR 0 2
71589: PUSH
71590: LD_VAR 0 9
71594: ARRAY
71595: PUSH
71596: LD_INT 1
71598: ARRAY
71599: PPUSH
71600: LD_VAR 0 2
71604: PUSH
71605: LD_VAR 0 9
71609: ARRAY
71610: PUSH
71611: LD_INT 2
71613: ARRAY
71614: PPUSH
71615: CALL_OW 297
71619: PUSH
71620: LD_INT 6
71622: GREATER
71623: IFFALSE 71666
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71625: LD_VAR 0 4
71629: PPUSH
71630: LD_VAR 0 2
71634: PUSH
71635: LD_VAR 0 9
71639: ARRAY
71640: PUSH
71641: LD_INT 1
71643: ARRAY
71644: PPUSH
71645: LD_VAR 0 2
71649: PUSH
71650: LD_VAR 0 9
71654: ARRAY
71655: PUSH
71656: LD_INT 2
71658: ARRAY
71659: PPUSH
71660: CALL_OW 114
71664: GO 71680
// SetTag ( i , tag ) ;
71666: LD_VAR 0 4
71670: PPUSH
71671: LD_VAR 0 9
71675: PPUSH
71676: CALL_OW 109
// end else
71680: GO 71753
// if enemy then
71682: LD_VAR 0 5
71686: IFFALSE 71753
// begin if GetWeapon ( i ) = ru_time_lapser then
71688: LD_VAR 0 4
71692: PPUSH
71693: CALL_OW 264
71697: PUSH
71698: LD_INT 49
71700: EQUAL
71701: IFFALSE 71729
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71703: LD_VAR 0 4
71707: PPUSH
71708: LD_VAR 0 5
71712: PPUSH
71713: LD_VAR 0 4
71717: PPUSH
71718: CALL_OW 74
71722: PPUSH
71723: CALL_OW 112
71727: GO 71753
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71729: LD_VAR 0 4
71733: PPUSH
71734: LD_VAR 0 5
71738: PPUSH
71739: LD_VAR 0 4
71743: PPUSH
71744: CALL_OW 74
71748: PPUSH
71749: CALL 72838 0 2
// end ; end ;
71753: GO 71325
71755: POP
71756: POP
// end ;
71757: LD_VAR 0 3
71761: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71762: LD_INT 0
71764: PPUSH
71765: PPUSH
71766: PPUSH
// if not unit or IsInUnit ( unit ) then
71767: LD_VAR 0 1
71771: NOT
71772: IFTRUE 71785
71774: PUSH
71775: LD_VAR 0 1
71779: PPUSH
71780: CALL_OW 310
71784: OR
71785: IFFALSE 71789
// exit ;
71787: GO 71880
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71789: LD_ADDR_VAR 0 4
71793: PUSH
71794: LD_VAR 0 1
71798: PPUSH
71799: CALL_OW 250
71803: PPUSH
71804: LD_VAR 0 2
71808: PPUSH
71809: LD_INT 1
71811: PPUSH
71812: CALL_OW 272
71816: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71817: LD_ADDR_VAR 0 5
71821: PUSH
71822: LD_VAR 0 1
71826: PPUSH
71827: CALL_OW 251
71831: PPUSH
71832: LD_VAR 0 2
71836: PPUSH
71837: LD_INT 1
71839: PPUSH
71840: CALL_OW 273
71844: ST_TO_ADDR
// if ValidHex ( x , y ) then
71845: LD_VAR 0 4
71849: PPUSH
71850: LD_VAR 0 5
71854: PPUSH
71855: CALL_OW 488
71859: IFFALSE 71880
// ComTurnXY ( unit , x , y ) ;
71861: LD_VAR 0 1
71865: PPUSH
71866: LD_VAR 0 4
71870: PPUSH
71871: LD_VAR 0 5
71875: PPUSH
71876: CALL_OW 118
// end ;
71880: LD_VAR 0 3
71884: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71885: LD_INT 0
71887: PPUSH
71888: PPUSH
// result := false ;
71889: LD_ADDR_VAR 0 3
71893: PUSH
71894: LD_INT 0
71896: ST_TO_ADDR
// if not units then
71897: LD_VAR 0 2
71901: NOT
71902: IFFALSE 71906
// exit ;
71904: GO 71951
// for i in units do
71906: LD_ADDR_VAR 0 4
71910: PUSH
71911: LD_VAR 0 2
71915: PUSH
71916: FOR_IN
71917: IFFALSE 71949
// if See ( side , i ) then
71919: LD_VAR 0 1
71923: PPUSH
71924: LD_VAR 0 4
71928: PPUSH
71929: CALL_OW 292
71933: IFFALSE 71947
// begin result := true ;
71935: LD_ADDR_VAR 0 3
71939: PUSH
71940: LD_INT 1
71942: ST_TO_ADDR
// exit ;
71943: POP
71944: POP
71945: GO 71951
// end ;
71947: GO 71916
71949: POP
71950: POP
// end ;
71951: LD_VAR 0 3
71955: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71956: LD_INT 0
71958: PPUSH
71959: PPUSH
71960: PPUSH
71961: PPUSH
// if not unit or not points then
71962: LD_VAR 0 1
71966: NOT
71967: IFTRUE 71976
71969: PUSH
71970: LD_VAR 0 2
71974: NOT
71975: OR
71976: IFFALSE 71980
// exit ;
71978: GO 72070
// dist := 99999 ;
71980: LD_ADDR_VAR 0 5
71984: PUSH
71985: LD_INT 99999
71987: ST_TO_ADDR
// for i in points do
71988: LD_ADDR_VAR 0 4
71992: PUSH
71993: LD_VAR 0 2
71997: PUSH
71998: FOR_IN
71999: IFFALSE 72068
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72001: LD_ADDR_VAR 0 6
72005: PUSH
72006: LD_VAR 0 1
72010: PPUSH
72011: LD_VAR 0 4
72015: PUSH
72016: LD_INT 1
72018: ARRAY
72019: PPUSH
72020: LD_VAR 0 4
72024: PUSH
72025: LD_INT 2
72027: ARRAY
72028: PPUSH
72029: CALL_OW 297
72033: ST_TO_ADDR
// if tmpDist < dist then
72034: LD_VAR 0 6
72038: PUSH
72039: LD_VAR 0 5
72043: LESS
72044: IFFALSE 72066
// begin result := i ;
72046: LD_ADDR_VAR 0 3
72050: PUSH
72051: LD_VAR 0 4
72055: ST_TO_ADDR
// dist := tmpDist ;
72056: LD_ADDR_VAR 0 5
72060: PUSH
72061: LD_VAR 0 6
72065: ST_TO_ADDR
// end ; end ;
72066: GO 71998
72068: POP
72069: POP
// end ;
72070: LD_VAR 0 3
72074: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72075: LD_INT 0
72077: PPUSH
// uc_side := side ;
72078: LD_ADDR_OWVAR 20
72082: PUSH
72083: LD_VAR 0 1
72087: ST_TO_ADDR
// uc_nation := 3 ;
72088: LD_ADDR_OWVAR 21
72092: PUSH
72093: LD_INT 3
72095: ST_TO_ADDR
// vc_chassis := 25 ;
72096: LD_ADDR_OWVAR 37
72100: PUSH
72101: LD_INT 25
72103: ST_TO_ADDR
// vc_engine := engine_siberite ;
72104: LD_ADDR_OWVAR 39
72108: PUSH
72109: LD_INT 3
72111: ST_TO_ADDR
// vc_control := control_computer ;
72112: LD_ADDR_OWVAR 38
72116: PUSH
72117: LD_INT 3
72119: ST_TO_ADDR
// vc_weapon := 59 ;
72120: LD_ADDR_OWVAR 40
72124: PUSH
72125: LD_INT 59
72127: ST_TO_ADDR
// result := CreateVehicle ;
72128: LD_ADDR_VAR 0 5
72132: PUSH
72133: CALL_OW 45
72137: ST_TO_ADDR
// SetDir ( result , d ) ;
72138: LD_VAR 0 5
72142: PPUSH
72143: LD_VAR 0 4
72147: PPUSH
72148: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72152: LD_VAR 0 5
72156: PPUSH
72157: LD_VAR 0 2
72161: PPUSH
72162: LD_VAR 0 3
72166: PPUSH
72167: LD_INT 0
72169: PPUSH
72170: CALL_OW 48
// end ;
72174: LD_VAR 0 5
72178: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72179: LD_INT 0
72181: PPUSH
72182: PPUSH
72183: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72184: LD_ADDR_VAR 0 2
72188: PUSH
72189: LD_INT 0
72191: PUSH
72192: LD_INT 0
72194: PUSH
72195: LD_INT 0
72197: PUSH
72198: LD_INT 0
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72207: LD_VAR 0 1
72211: NOT
72212: IFTRUE 72245
72214: PUSH
72215: LD_VAR 0 1
72219: PPUSH
72220: CALL_OW 264
72224: PUSH
72225: LD_INT 12
72227: PUSH
72228: LD_INT 51
72230: PUSH
72231: LD_INT 32
72233: PUSH
72234: LD_INT 89
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: IN
72243: NOT
72244: OR
72245: IFFALSE 72249
// exit ;
72247: GO 72347
// for i := 1 to 3 do
72249: LD_ADDR_VAR 0 3
72253: PUSH
72254: DOUBLE
72255: LD_INT 1
72257: DEC
72258: ST_TO_ADDR
72259: LD_INT 3
72261: PUSH
72262: FOR_TO
72263: IFFALSE 72345
// begin tmp := GetCargo ( cargo , i ) ;
72265: LD_ADDR_VAR 0 4
72269: PUSH
72270: LD_VAR 0 1
72274: PPUSH
72275: LD_VAR 0 3
72279: PPUSH
72280: CALL_OW 289
72284: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72285: LD_ADDR_VAR 0 2
72289: PUSH
72290: LD_VAR 0 2
72294: PPUSH
72295: LD_VAR 0 3
72299: PPUSH
72300: LD_VAR 0 4
72304: PPUSH
72305: CALL_OW 1
72309: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72310: LD_ADDR_VAR 0 2
72314: PUSH
72315: LD_VAR 0 2
72319: PPUSH
72320: LD_INT 4
72322: PPUSH
72323: LD_VAR 0 2
72327: PUSH
72328: LD_INT 4
72330: ARRAY
72331: PUSH
72332: LD_VAR 0 4
72336: PLUS
72337: PPUSH
72338: CALL_OW 1
72342: ST_TO_ADDR
// end ;
72343: GO 72262
72345: POP
72346: POP
// end ;
72347: LD_VAR 0 2
72351: RET
// export function Length ( array ) ; begin
72352: LD_INT 0
72354: PPUSH
// result := array + 0 ;
72355: LD_ADDR_VAR 0 2
72359: PUSH
72360: LD_VAR 0 1
72364: PUSH
72365: LD_INT 0
72367: PLUS
72368: ST_TO_ADDR
// end ;
72369: LD_VAR 0 2
72373: RET
// export function PrepareArray ( array ) ; begin
72374: LD_INT 0
72376: PPUSH
// result := array diff 0 ;
72377: LD_ADDR_VAR 0 2
72381: PUSH
72382: LD_VAR 0 1
72386: PUSH
72387: LD_INT 0
72389: DIFF
72390: ST_TO_ADDR
// if not result [ 1 ] then
72391: LD_VAR 0 2
72395: PUSH
72396: LD_INT 1
72398: ARRAY
72399: NOT
72400: IFFALSE 72420
// result := Delete ( result , 1 ) ;
72402: LD_ADDR_VAR 0 2
72406: PUSH
72407: LD_VAR 0 2
72411: PPUSH
72412: LD_INT 1
72414: PPUSH
72415: CALL_OW 3
72419: ST_TO_ADDR
// end ;
72420: LD_VAR 0 2
72424: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72425: LD_INT 0
72427: PPUSH
72428: PPUSH
72429: PPUSH
72430: PPUSH
// sibRocketRange := 25 ;
72431: LD_ADDR_VAR 0 6
72435: PUSH
72436: LD_INT 25
72438: ST_TO_ADDR
// result := false ;
72439: LD_ADDR_VAR 0 4
72443: PUSH
72444: LD_INT 0
72446: ST_TO_ADDR
// for i := 0 to 5 do
72447: LD_ADDR_VAR 0 5
72451: PUSH
72452: DOUBLE
72453: LD_INT 0
72455: DEC
72456: ST_TO_ADDR
72457: LD_INT 5
72459: PUSH
72460: FOR_TO
72461: IFFALSE 72528
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72463: LD_VAR 0 1
72467: PPUSH
72468: LD_VAR 0 5
72472: PPUSH
72473: LD_VAR 0 6
72477: PPUSH
72478: CALL_OW 272
72482: PPUSH
72483: LD_VAR 0 2
72487: PPUSH
72488: LD_VAR 0 5
72492: PPUSH
72493: LD_VAR 0 6
72497: PPUSH
72498: CALL_OW 273
72502: PPUSH
72503: LD_VAR 0 3
72507: PPUSH
72508: CALL_OW 309
72512: IFFALSE 72526
// begin result := true ;
72514: LD_ADDR_VAR 0 4
72518: PUSH
72519: LD_INT 1
72521: ST_TO_ADDR
// exit ;
72522: POP
72523: POP
72524: GO 72530
// end ;
72526: GO 72460
72528: POP
72529: POP
// end ;
72530: LD_VAR 0 4
72534: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72535: LD_INT 0
72537: PPUSH
72538: PPUSH
72539: PPUSH
// if btype = b_depot then
72540: LD_VAR 0 2
72544: PUSH
72545: LD_INT 0
72547: EQUAL
72548: IFFALSE 72560
// begin result := true ;
72550: LD_ADDR_VAR 0 3
72554: PUSH
72555: LD_INT 1
72557: ST_TO_ADDR
// exit ;
72558: GO 72680
// end ; pom := GetBase ( depot ) ;
72560: LD_ADDR_VAR 0 4
72564: PUSH
72565: LD_VAR 0 1
72569: PPUSH
72570: CALL_OW 274
72574: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72575: LD_ADDR_VAR 0 5
72579: PUSH
72580: LD_VAR 0 2
72584: PPUSH
72585: LD_VAR 0 1
72589: PPUSH
72590: CALL_OW 248
72594: PPUSH
72595: CALL_OW 450
72599: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72600: LD_ADDR_VAR 0 3
72604: PUSH
72605: LD_VAR 0 4
72609: PPUSH
72610: LD_INT 1
72612: PPUSH
72613: CALL_OW 275
72617: PUSH
72618: LD_VAR 0 5
72622: PUSH
72623: LD_INT 1
72625: ARRAY
72626: GREATEREQUAL
72627: IFFALSE 72653
72629: PUSH
72630: LD_VAR 0 4
72634: PPUSH
72635: LD_INT 2
72637: PPUSH
72638: CALL_OW 275
72642: PUSH
72643: LD_VAR 0 5
72647: PUSH
72648: LD_INT 2
72650: ARRAY
72651: GREATEREQUAL
72652: AND
72653: IFFALSE 72679
72655: PUSH
72656: LD_VAR 0 4
72660: PPUSH
72661: LD_INT 3
72663: PPUSH
72664: CALL_OW 275
72668: PUSH
72669: LD_VAR 0 5
72673: PUSH
72674: LD_INT 3
72676: ARRAY
72677: GREATEREQUAL
72678: AND
72679: ST_TO_ADDR
// end ;
72680: LD_VAR 0 3
72684: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72685: LD_INT 0
72687: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72688: LD_VAR 0 1
72692: PPUSH
72693: LD_VAR 0 2
72697: PPUSH
72698: LD_INT 0
72700: PPUSH
72701: LD_INT 0
72703: PPUSH
72704: LD_INT 1
72706: PPUSH
72707: LD_INT 0
72709: PPUSH
72710: CALL_OW 587
// end ;
72714: LD_VAR 0 3
72718: RET
// export function CenterOnNow ( unit ) ; begin
72719: LD_INT 0
72721: PPUSH
// result := IsInUnit ( unit ) ;
72722: LD_ADDR_VAR 0 2
72726: PUSH
72727: LD_VAR 0 1
72731: PPUSH
72732: CALL_OW 310
72736: ST_TO_ADDR
// if not result then
72737: LD_VAR 0 2
72741: NOT
72742: IFFALSE 72754
// result := unit ;
72744: LD_ADDR_VAR 0 2
72748: PUSH
72749: LD_VAR 0 1
72753: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72754: LD_VAR 0 1
72758: PPUSH
72759: CALL_OW 87
// end ;
72763: LD_VAR 0 2
72767: RET
// export function ComMoveHex ( unit , hex ) ; begin
72768: LD_INT 0
72770: PPUSH
// if not hex then
72771: LD_VAR 0 2
72775: NOT
72776: IFFALSE 72780
// exit ;
72778: GO 72833
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72780: LD_VAR 0 2
72784: PUSH
72785: LD_INT 1
72787: ARRAY
72788: PPUSH
72789: LD_VAR 0 2
72793: PUSH
72794: LD_INT 2
72796: ARRAY
72797: PPUSH
72798: CALL_OW 428
72802: IFFALSE 72806
// exit ;
72804: GO 72833
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72806: LD_VAR 0 1
72810: PPUSH
72811: LD_VAR 0 2
72815: PUSH
72816: LD_INT 1
72818: ARRAY
72819: PPUSH
72820: LD_VAR 0 2
72824: PUSH
72825: LD_INT 2
72827: ARRAY
72828: PPUSH
72829: CALL_OW 111
// end ;
72833: LD_VAR 0 3
72837: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72838: LD_INT 0
72840: PPUSH
72841: PPUSH
72842: PPUSH
// if not unit or not enemy then
72843: LD_VAR 0 1
72847: NOT
72848: IFTRUE 72857
72850: PUSH
72851: LD_VAR 0 2
72855: NOT
72856: OR
72857: IFFALSE 72861
// exit ;
72859: GO 72987
// x := GetX ( enemy ) ;
72861: LD_ADDR_VAR 0 4
72865: PUSH
72866: LD_VAR 0 2
72870: PPUSH
72871: CALL_OW 250
72875: ST_TO_ADDR
// y := GetY ( enemy ) ;
72876: LD_ADDR_VAR 0 5
72880: PUSH
72881: LD_VAR 0 2
72885: PPUSH
72886: CALL_OW 251
72890: ST_TO_ADDR
// if ValidHex ( x , y ) then
72891: LD_VAR 0 4
72895: PPUSH
72896: LD_VAR 0 5
72900: PPUSH
72901: CALL_OW 488
72905: IFFALSE 72987
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72907: LD_VAR 0 2
72911: PPUSH
72912: CALL_OW 247
72916: PUSH
72917: LD_INT 3
72919: PUSH
72920: LD_INT 2
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: IN
72927: IFTRUE 72950
72929: PUSH
72930: LD_VAR 0 1
72934: PPUSH
72935: CALL_OW 255
72939: PPUSH
72940: LD_VAR 0 2
72944: PPUSH
72945: CALL_OW 292
72949: OR
72950: IFFALSE 72968
// ComAttackUnit ( unit , enemy ) else
72952: LD_VAR 0 1
72956: PPUSH
72957: LD_VAR 0 2
72961: PPUSH
72962: CALL_OW 115
72966: GO 72987
// ComAgressiveMove ( unit , x , y ) ;
72968: LD_VAR 0 1
72972: PPUSH
72973: LD_VAR 0 4
72977: PPUSH
72978: LD_VAR 0 5
72982: PPUSH
72983: CALL_OW 114
// end ;
72987: LD_VAR 0 3
72991: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72992: LD_INT 0
72994: PPUSH
72995: PPUSH
72996: PPUSH
// list := AreaToList ( area , 0 ) ;
72997: LD_ADDR_VAR 0 5
73001: PUSH
73002: LD_VAR 0 1
73006: PPUSH
73007: LD_INT 0
73009: PPUSH
73010: CALL_OW 517
73014: ST_TO_ADDR
// if not list then
73015: LD_VAR 0 5
73019: NOT
73020: IFFALSE 73024
// exit ;
73022: GO 73154
// if all then
73024: LD_VAR 0 2
73028: IFFALSE 73116
// begin for i := 1 to list [ 1 ] do
73030: LD_ADDR_VAR 0 4
73034: PUSH
73035: DOUBLE
73036: LD_INT 1
73038: DEC
73039: ST_TO_ADDR
73040: LD_VAR 0 5
73044: PUSH
73045: LD_INT 1
73047: ARRAY
73048: PUSH
73049: FOR_TO
73050: IFFALSE 73112
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73052: LD_ADDR_VAR 0 3
73056: PUSH
73057: LD_VAR 0 3
73061: PPUSH
73062: LD_VAR 0 3
73066: PUSH
73067: LD_INT 1
73069: PLUS
73070: PPUSH
73071: LD_VAR 0 5
73075: PUSH
73076: LD_INT 1
73078: ARRAY
73079: PUSH
73080: LD_VAR 0 4
73084: ARRAY
73085: PUSH
73086: LD_VAR 0 5
73090: PUSH
73091: LD_INT 2
73093: ARRAY
73094: PUSH
73095: LD_VAR 0 4
73099: ARRAY
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PPUSH
73105: CALL_OW 1
73109: ST_TO_ADDR
73110: GO 73049
73112: POP
73113: POP
// exit ;
73114: GO 73154
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73116: LD_ADDR_VAR 0 3
73120: PUSH
73121: LD_VAR 0 5
73125: PUSH
73126: LD_INT 1
73128: ARRAY
73129: PUSH
73130: LD_INT 1
73132: ARRAY
73133: PUSH
73134: LD_VAR 0 5
73138: PUSH
73139: LD_INT 2
73141: ARRAY
73142: PUSH
73143: LD_INT 1
73145: ARRAY
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: EMPTY
73152: LIST
73153: ST_TO_ADDR
// end ;
73154: LD_VAR 0 3
73158: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73159: LD_INT 0
73161: PPUSH
73162: PPUSH
// list := AreaToList ( area , 0 ) ;
73163: LD_ADDR_VAR 0 4
73167: PUSH
73168: LD_VAR 0 1
73172: PPUSH
73173: LD_INT 0
73175: PPUSH
73176: CALL_OW 517
73180: ST_TO_ADDR
// if not list then
73181: LD_VAR 0 4
73185: NOT
73186: IFFALSE 73190
// exit ;
73188: GO 73231
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73190: LD_ADDR_VAR 0 3
73194: PUSH
73195: LD_VAR 0 4
73199: PUSH
73200: LD_INT 1
73202: ARRAY
73203: PUSH
73204: LD_INT 1
73206: ARRAY
73207: PUSH
73208: LD_VAR 0 4
73212: PUSH
73213: LD_INT 2
73215: ARRAY
73216: PUSH
73217: LD_INT 1
73219: ARRAY
73220: PUSH
73221: LD_VAR 0 2
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: LIST
73230: ST_TO_ADDR
// end ;
73231: LD_VAR 0 3
73235: RET
// export function First ( array ) ; begin
73236: LD_INT 0
73238: PPUSH
// if not array then
73239: LD_VAR 0 1
73243: NOT
73244: IFFALSE 73248
// exit ;
73246: GO 73262
// result := array [ 1 ] ;
73248: LD_ADDR_VAR 0 2
73252: PUSH
73253: LD_VAR 0 1
73257: PUSH
73258: LD_INT 1
73260: ARRAY
73261: ST_TO_ADDR
// end ;
73262: LD_VAR 0 2
73266: RET
// export function Last ( array ) ; begin
73267: LD_INT 0
73269: PPUSH
// if not array then
73270: LD_VAR 0 1
73274: NOT
73275: IFFALSE 73279
// exit ;
73277: GO 73295
// result := array [ array ] ;
73279: LD_ADDR_VAR 0 2
73283: PUSH
73284: LD_VAR 0 1
73288: PUSH
73289: LD_VAR 0 1
73293: ARRAY
73294: ST_TO_ADDR
// end ;
73295: LD_VAR 0 2
73299: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73300: LD_INT 0
73302: PPUSH
73303: PPUSH
// result := [ ] ;
73304: LD_ADDR_VAR 0 5
73308: PUSH
73309: EMPTY
73310: ST_TO_ADDR
// if not array then
73311: LD_VAR 0 1
73315: NOT
73316: IFFALSE 73320
// exit ;
73318: GO 73432
// for i := 1 to array do
73320: LD_ADDR_VAR 0 6
73324: PUSH
73325: DOUBLE
73326: LD_INT 1
73328: DEC
73329: ST_TO_ADDR
73330: LD_VAR 0 1
73334: PUSH
73335: FOR_TO
73336: IFFALSE 73430
// if array [ i ] [ index ] = value then
73338: LD_VAR 0 1
73342: PUSH
73343: LD_VAR 0 6
73347: ARRAY
73348: PUSH
73349: LD_VAR 0 2
73353: ARRAY
73354: PUSH
73355: LD_VAR 0 3
73359: EQUAL
73360: IFFALSE 73428
// begin if indexColumn then
73362: LD_VAR 0 4
73366: IFFALSE 73402
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73368: LD_ADDR_VAR 0 5
73372: PUSH
73373: LD_VAR 0 5
73377: PPUSH
73378: LD_VAR 0 1
73382: PUSH
73383: LD_VAR 0 6
73387: ARRAY
73388: PUSH
73389: LD_VAR 0 4
73393: ARRAY
73394: PPUSH
73395: CALL 68440 0 2
73399: ST_TO_ADDR
73400: GO 73428
// result := Join ( result , array [ i ] ) ;
73402: LD_ADDR_VAR 0 5
73406: PUSH
73407: LD_VAR 0 5
73411: PPUSH
73412: LD_VAR 0 1
73416: PUSH
73417: LD_VAR 0 6
73421: ARRAY
73422: PPUSH
73423: CALL 68440 0 2
73427: ST_TO_ADDR
// end ;
73428: GO 73335
73430: POP
73431: POP
// end ;
73432: LD_VAR 0 5
73436: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73437: LD_INT 0
73439: PPUSH
// if not vehicles or not parkingPoint then
73440: LD_VAR 0 1
73444: NOT
73445: IFTRUE 73454
73447: PUSH
73448: LD_VAR 0 2
73452: NOT
73453: OR
73454: IFFALSE 73458
// exit ;
73456: GO 73556
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73458: LD_ADDR_VAR 0 1
73462: PUSH
73463: LD_VAR 0 1
73467: PPUSH
73468: LD_INT 50
73470: PUSH
73471: EMPTY
73472: LIST
73473: PUSH
73474: LD_INT 3
73476: PUSH
73477: LD_INT 92
73479: PUSH
73480: LD_VAR 0 2
73484: PUSH
73485: LD_INT 1
73487: ARRAY
73488: PUSH
73489: LD_VAR 0 2
73493: PUSH
73494: LD_INT 2
73496: ARRAY
73497: PUSH
73498: LD_INT 8
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: LIST
73505: LIST
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PPUSH
73515: CALL_OW 72
73519: ST_TO_ADDR
// if not vehicles then
73520: LD_VAR 0 1
73524: NOT
73525: IFFALSE 73529
// exit ;
73527: GO 73556
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73529: LD_VAR 0 1
73533: PPUSH
73534: LD_VAR 0 2
73538: PUSH
73539: LD_INT 1
73541: ARRAY
73542: PPUSH
73543: LD_VAR 0 2
73547: PUSH
73548: LD_INT 2
73550: ARRAY
73551: PPUSH
73552: CALL_OW 111
// end ;
73556: LD_VAR 0 3
73560: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73561: LD_INT 0
73563: PPUSH
73564: PPUSH
73565: PPUSH
// if not side or not area then
73566: LD_VAR 0 1
73570: NOT
73571: IFTRUE 73580
73573: PUSH
73574: LD_VAR 0 2
73578: NOT
73579: OR
73580: IFFALSE 73584
// exit ;
73582: GO 73703
// tmp := AreaToList ( area , 0 ) ;
73584: LD_ADDR_VAR 0 5
73588: PUSH
73589: LD_VAR 0 2
73593: PPUSH
73594: LD_INT 0
73596: PPUSH
73597: CALL_OW 517
73601: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73602: LD_ADDR_VAR 0 4
73606: PUSH
73607: DOUBLE
73608: LD_INT 1
73610: DEC
73611: ST_TO_ADDR
73612: LD_VAR 0 5
73616: PUSH
73617: LD_INT 1
73619: ARRAY
73620: PUSH
73621: FOR_TO
73622: IFFALSE 73701
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73624: LD_VAR 0 5
73628: PUSH
73629: LD_INT 1
73631: ARRAY
73632: PUSH
73633: LD_VAR 0 4
73637: ARRAY
73638: PPUSH
73639: LD_VAR 0 5
73643: PUSH
73644: LD_INT 2
73646: ARRAY
73647: PUSH
73648: LD_VAR 0 4
73652: ARRAY
73653: PPUSH
73654: CALL_OW 351
73658: IFFALSE 73699
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73660: LD_VAR 0 5
73664: PUSH
73665: LD_INT 1
73667: ARRAY
73668: PUSH
73669: LD_VAR 0 4
73673: ARRAY
73674: PPUSH
73675: LD_VAR 0 5
73679: PUSH
73680: LD_INT 2
73682: ARRAY
73683: PUSH
73684: LD_VAR 0 4
73688: ARRAY
73689: PPUSH
73690: LD_VAR 0 1
73694: PPUSH
73695: CALL_OW 244
// end ;
73699: GO 73621
73701: POP
73702: POP
// end ;
73703: LD_VAR 0 3
73707: RET
// export function UniqueArray ( array ) ; var i ; begin
73708: LD_INT 0
73710: PPUSH
73711: PPUSH
// result := [ ] ;
73712: LD_ADDR_VAR 0 2
73716: PUSH
73717: EMPTY
73718: ST_TO_ADDR
// if not array then
73719: LD_VAR 0 1
73723: NOT
73724: IFFALSE 73728
// exit ;
73726: GO 73789
// for i := 1 to array do
73728: LD_ADDR_VAR 0 3
73732: PUSH
73733: DOUBLE
73734: LD_INT 1
73736: DEC
73737: ST_TO_ADDR
73738: LD_VAR 0 1
73742: PUSH
73743: FOR_TO
73744: IFFALSE 73787
// if not array [ i ] in result then
73746: LD_VAR 0 1
73750: PUSH
73751: LD_VAR 0 3
73755: ARRAY
73756: PUSH
73757: LD_VAR 0 2
73761: IN
73762: NOT
73763: IFFALSE 73785
// result := Join ( result , i ) ;
73765: LD_ADDR_VAR 0 2
73769: PUSH
73770: LD_VAR 0 2
73774: PPUSH
73775: LD_VAR 0 3
73779: PPUSH
73780: CALL 68440 0 2
73784: ST_TO_ADDR
73785: GO 73743
73787: POP
73788: POP
// end ; end_of_file
73789: LD_VAR 0 2
73793: RET
// export globalGameSaveCounter ; every 0 0$1 do
73794: GO 73796
73796: DISABLE
// begin enable ;
73797: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
73798: LD_STRING updateTimer(
73800: PUSH
73801: LD_OWVAR 1
73805: STR
73806: PUSH
73807: LD_STRING );
73809: STR
73810: PPUSH
73811: CALL_OW 559
// end ;
73815: END
// every 0 0$1 do
73816: GO 73818
73818: DISABLE
// begin globalGameSaveCounter := 0 ;
73819: LD_ADDR_EXP 74
73823: PUSH
73824: LD_INT 0
73826: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
73827: LD_STRING setGameSaveCounter(0)
73829: PPUSH
73830: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
73834: LD_STRING initStreamRollete();
73836: PPUSH
73837: CALL_OW 559
// InitStreamMode ;
73841: CALL 75193 0 0
// DefineStreamItems ( false ) ;
73845: LD_INT 0
73847: PPUSH
73848: CALL 75657 0 1
// end ;
73852: END
// export function SOS_MapStart ( ) ; begin
73853: LD_INT 0
73855: PPUSH
// if streamModeActive then
73856: LD_EXP 75
73860: IFFALSE 73869
// DefineStreamItems ( true ) ;
73862: LD_INT 1
73864: PPUSH
73865: CALL 75657 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
73869: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
73871: PPUSH
73872: CALL_OW 559
// UpdateLuaVariables ( ) ;
73876: CALL 73893 0 0
// UpdateFactoryWaypoints ( ) ;
73880: CALL 88779 0 0
// UpdateWarehouseGatheringPoints ( ) ;
73884: CALL 89031 0 0
// end ;
73888: LD_VAR 0 1
73892: RET
// function UpdateLuaVariables ( ) ; begin
73893: LD_INT 0
73895: PPUSH
// if globalGameSaveCounter then
73896: LD_EXP 74
73900: IFFALSE 73934
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
73902: LD_ADDR_EXP 74
73906: PUSH
73907: LD_EXP 74
73911: PPUSH
73912: CALL 69813 0 1
73916: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73917: LD_STRING setGameSaveCounter(
73919: PUSH
73920: LD_EXP 74
73924: STR
73925: PUSH
73926: LD_STRING )
73928: STR
73929: PPUSH
73930: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
73934: LD_STRING setGameDifficulty(
73936: PUSH
73937: LD_OWVAR 67
73941: STR
73942: PUSH
73943: LD_STRING )
73945: STR
73946: PPUSH
73947: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
73951: LD_STRING displayDifficulty(
73953: PUSH
73954: LD_OWVAR 67
73958: STR
73959: PUSH
73960: LD_STRING )
73962: STR
73963: PPUSH
73964: CALL_OW 559
// end ;
73968: LD_VAR 0 1
73972: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73973: LD_INT 0
73975: PPUSH
// if p2 = stream_mode then
73976: LD_VAR 0 2
73980: PUSH
73981: LD_INT 100
73983: EQUAL
73984: IFFALSE 74987
// begin if not StreamModeActive then
73986: LD_EXP 75
73990: NOT
73991: IFFALSE 74001
// StreamModeActive := true ;
73993: LD_ADDR_EXP 75
73997: PUSH
73998: LD_INT 1
74000: ST_TO_ADDR
// if p3 = 0 then
74001: LD_VAR 0 3
74005: PUSH
74006: LD_INT 0
74008: EQUAL
74009: IFFALSE 74015
// InitStreamMode ;
74011: CALL 75193 0 0
// if p3 = 1 then
74015: LD_VAR 0 3
74019: PUSH
74020: LD_INT 1
74022: EQUAL
74023: IFFALSE 74033
// sRocket := true ;
74025: LD_ADDR_EXP 80
74029: PUSH
74030: LD_INT 1
74032: ST_TO_ADDR
// if p3 = 2 then
74033: LD_VAR 0 3
74037: PUSH
74038: LD_INT 2
74040: EQUAL
74041: IFFALSE 74051
// sSpeed := true ;
74043: LD_ADDR_EXP 79
74047: PUSH
74048: LD_INT 1
74050: ST_TO_ADDR
// if p3 = 3 then
74051: LD_VAR 0 3
74055: PUSH
74056: LD_INT 3
74058: EQUAL
74059: IFFALSE 74069
// sEngine := true ;
74061: LD_ADDR_EXP 81
74065: PUSH
74066: LD_INT 1
74068: ST_TO_ADDR
// if p3 = 4 then
74069: LD_VAR 0 3
74073: PUSH
74074: LD_INT 4
74076: EQUAL
74077: IFFALSE 74087
// sSpec := true ;
74079: LD_ADDR_EXP 78
74083: PUSH
74084: LD_INT 1
74086: ST_TO_ADDR
// if p3 = 5 then
74087: LD_VAR 0 3
74091: PUSH
74092: LD_INT 5
74094: EQUAL
74095: IFFALSE 74105
// sLevel := true ;
74097: LD_ADDR_EXP 82
74101: PUSH
74102: LD_INT 1
74104: ST_TO_ADDR
// if p3 = 6 then
74105: LD_VAR 0 3
74109: PUSH
74110: LD_INT 6
74112: EQUAL
74113: IFFALSE 74123
// sArmoury := true ;
74115: LD_ADDR_EXP 83
74119: PUSH
74120: LD_INT 1
74122: ST_TO_ADDR
// if p3 = 7 then
74123: LD_VAR 0 3
74127: PUSH
74128: LD_INT 7
74130: EQUAL
74131: IFFALSE 74141
// sRadar := true ;
74133: LD_ADDR_EXP 84
74137: PUSH
74138: LD_INT 1
74140: ST_TO_ADDR
// if p3 = 8 then
74141: LD_VAR 0 3
74145: PUSH
74146: LD_INT 8
74148: EQUAL
74149: IFFALSE 74159
// sBunker := true ;
74151: LD_ADDR_EXP 85
74155: PUSH
74156: LD_INT 1
74158: ST_TO_ADDR
// if p3 = 9 then
74159: LD_VAR 0 3
74163: PUSH
74164: LD_INT 9
74166: EQUAL
74167: IFFALSE 74177
// sHack := true ;
74169: LD_ADDR_EXP 86
74173: PUSH
74174: LD_INT 1
74176: ST_TO_ADDR
// if p3 = 10 then
74177: LD_VAR 0 3
74181: PUSH
74182: LD_INT 10
74184: EQUAL
74185: IFFALSE 74195
// sFire := true ;
74187: LD_ADDR_EXP 87
74191: PUSH
74192: LD_INT 1
74194: ST_TO_ADDR
// if p3 = 11 then
74195: LD_VAR 0 3
74199: PUSH
74200: LD_INT 11
74202: EQUAL
74203: IFFALSE 74213
// sRefresh := true ;
74205: LD_ADDR_EXP 88
74209: PUSH
74210: LD_INT 1
74212: ST_TO_ADDR
// if p3 = 12 then
74213: LD_VAR 0 3
74217: PUSH
74218: LD_INT 12
74220: EQUAL
74221: IFFALSE 74231
// sExp := true ;
74223: LD_ADDR_EXP 89
74227: PUSH
74228: LD_INT 1
74230: ST_TO_ADDR
// if p3 = 13 then
74231: LD_VAR 0 3
74235: PUSH
74236: LD_INT 13
74238: EQUAL
74239: IFFALSE 74249
// sDepot := true ;
74241: LD_ADDR_EXP 90
74245: PUSH
74246: LD_INT 1
74248: ST_TO_ADDR
// if p3 = 14 then
74249: LD_VAR 0 3
74253: PUSH
74254: LD_INT 14
74256: EQUAL
74257: IFFALSE 74267
// sFlag := true ;
74259: LD_ADDR_EXP 91
74263: PUSH
74264: LD_INT 1
74266: ST_TO_ADDR
// if p3 = 15 then
74267: LD_VAR 0 3
74271: PUSH
74272: LD_INT 15
74274: EQUAL
74275: IFFALSE 74285
// sKamikadze := true ;
74277: LD_ADDR_EXP 99
74281: PUSH
74282: LD_INT 1
74284: ST_TO_ADDR
// if p3 = 16 then
74285: LD_VAR 0 3
74289: PUSH
74290: LD_INT 16
74292: EQUAL
74293: IFFALSE 74303
// sTroll := true ;
74295: LD_ADDR_EXP 100
74299: PUSH
74300: LD_INT 1
74302: ST_TO_ADDR
// if p3 = 17 then
74303: LD_VAR 0 3
74307: PUSH
74308: LD_INT 17
74310: EQUAL
74311: IFFALSE 74321
// sSlow := true ;
74313: LD_ADDR_EXP 101
74317: PUSH
74318: LD_INT 1
74320: ST_TO_ADDR
// if p3 = 18 then
74321: LD_VAR 0 3
74325: PUSH
74326: LD_INT 18
74328: EQUAL
74329: IFFALSE 74339
// sLack := true ;
74331: LD_ADDR_EXP 102
74335: PUSH
74336: LD_INT 1
74338: ST_TO_ADDR
// if p3 = 19 then
74339: LD_VAR 0 3
74343: PUSH
74344: LD_INT 19
74346: EQUAL
74347: IFFALSE 74357
// sTank := true ;
74349: LD_ADDR_EXP 104
74353: PUSH
74354: LD_INT 1
74356: ST_TO_ADDR
// if p3 = 20 then
74357: LD_VAR 0 3
74361: PUSH
74362: LD_INT 20
74364: EQUAL
74365: IFFALSE 74375
// sRemote := true ;
74367: LD_ADDR_EXP 105
74371: PUSH
74372: LD_INT 1
74374: ST_TO_ADDR
// if p3 = 21 then
74375: LD_VAR 0 3
74379: PUSH
74380: LD_INT 21
74382: EQUAL
74383: IFFALSE 74393
// sPowell := true ;
74385: LD_ADDR_EXP 106
74389: PUSH
74390: LD_INT 1
74392: ST_TO_ADDR
// if p3 = 22 then
74393: LD_VAR 0 3
74397: PUSH
74398: LD_INT 22
74400: EQUAL
74401: IFFALSE 74411
// sTeleport := true ;
74403: LD_ADDR_EXP 109
74407: PUSH
74408: LD_INT 1
74410: ST_TO_ADDR
// if p3 = 23 then
74411: LD_VAR 0 3
74415: PUSH
74416: LD_INT 23
74418: EQUAL
74419: IFFALSE 74429
// sOilTower := true ;
74421: LD_ADDR_EXP 111
74425: PUSH
74426: LD_INT 1
74428: ST_TO_ADDR
// if p3 = 24 then
74429: LD_VAR 0 3
74433: PUSH
74434: LD_INT 24
74436: EQUAL
74437: IFFALSE 74447
// sShovel := true ;
74439: LD_ADDR_EXP 112
74443: PUSH
74444: LD_INT 1
74446: ST_TO_ADDR
// if p3 = 25 then
74447: LD_VAR 0 3
74451: PUSH
74452: LD_INT 25
74454: EQUAL
74455: IFFALSE 74465
// sSheik := true ;
74457: LD_ADDR_EXP 113
74461: PUSH
74462: LD_INT 1
74464: ST_TO_ADDR
// if p3 = 26 then
74465: LD_VAR 0 3
74469: PUSH
74470: LD_INT 26
74472: EQUAL
74473: IFFALSE 74483
// sEarthquake := true ;
74475: LD_ADDR_EXP 115
74479: PUSH
74480: LD_INT 1
74482: ST_TO_ADDR
// if p3 = 27 then
74483: LD_VAR 0 3
74487: PUSH
74488: LD_INT 27
74490: EQUAL
74491: IFFALSE 74501
// sAI := true ;
74493: LD_ADDR_EXP 116
74497: PUSH
74498: LD_INT 1
74500: ST_TO_ADDR
// if p3 = 28 then
74501: LD_VAR 0 3
74505: PUSH
74506: LD_INT 28
74508: EQUAL
74509: IFFALSE 74519
// sCargo := true ;
74511: LD_ADDR_EXP 119
74515: PUSH
74516: LD_INT 1
74518: ST_TO_ADDR
// if p3 = 29 then
74519: LD_VAR 0 3
74523: PUSH
74524: LD_INT 29
74526: EQUAL
74527: IFFALSE 74537
// sDLaser := true ;
74529: LD_ADDR_EXP 120
74533: PUSH
74534: LD_INT 1
74536: ST_TO_ADDR
// if p3 = 30 then
74537: LD_VAR 0 3
74541: PUSH
74542: LD_INT 30
74544: EQUAL
74545: IFFALSE 74555
// sExchange := true ;
74547: LD_ADDR_EXP 121
74551: PUSH
74552: LD_INT 1
74554: ST_TO_ADDR
// if p3 = 31 then
74555: LD_VAR 0 3
74559: PUSH
74560: LD_INT 31
74562: EQUAL
74563: IFFALSE 74573
// sFac := true ;
74565: LD_ADDR_EXP 122
74569: PUSH
74570: LD_INT 1
74572: ST_TO_ADDR
// if p3 = 32 then
74573: LD_VAR 0 3
74577: PUSH
74578: LD_INT 32
74580: EQUAL
74581: IFFALSE 74591
// sPower := true ;
74583: LD_ADDR_EXP 123
74587: PUSH
74588: LD_INT 1
74590: ST_TO_ADDR
// if p3 = 33 then
74591: LD_VAR 0 3
74595: PUSH
74596: LD_INT 33
74598: EQUAL
74599: IFFALSE 74609
// sRandom := true ;
74601: LD_ADDR_EXP 124
74605: PUSH
74606: LD_INT 1
74608: ST_TO_ADDR
// if p3 = 34 then
74609: LD_VAR 0 3
74613: PUSH
74614: LD_INT 34
74616: EQUAL
74617: IFFALSE 74627
// sShield := true ;
74619: LD_ADDR_EXP 125
74623: PUSH
74624: LD_INT 1
74626: ST_TO_ADDR
// if p3 = 35 then
74627: LD_VAR 0 3
74631: PUSH
74632: LD_INT 35
74634: EQUAL
74635: IFFALSE 74645
// sTime := true ;
74637: LD_ADDR_EXP 126
74641: PUSH
74642: LD_INT 1
74644: ST_TO_ADDR
// if p3 = 36 then
74645: LD_VAR 0 3
74649: PUSH
74650: LD_INT 36
74652: EQUAL
74653: IFFALSE 74663
// sTools := true ;
74655: LD_ADDR_EXP 127
74659: PUSH
74660: LD_INT 1
74662: ST_TO_ADDR
// if p3 = 101 then
74663: LD_VAR 0 3
74667: PUSH
74668: LD_INT 101
74670: EQUAL
74671: IFFALSE 74681
// sSold := true ;
74673: LD_ADDR_EXP 92
74677: PUSH
74678: LD_INT 1
74680: ST_TO_ADDR
// if p3 = 102 then
74681: LD_VAR 0 3
74685: PUSH
74686: LD_INT 102
74688: EQUAL
74689: IFFALSE 74699
// sDiff := true ;
74691: LD_ADDR_EXP 93
74695: PUSH
74696: LD_INT 1
74698: ST_TO_ADDR
// if p3 = 103 then
74699: LD_VAR 0 3
74703: PUSH
74704: LD_INT 103
74706: EQUAL
74707: IFFALSE 74717
// sFog := true ;
74709: LD_ADDR_EXP 96
74713: PUSH
74714: LD_INT 1
74716: ST_TO_ADDR
// if p3 = 104 then
74717: LD_VAR 0 3
74721: PUSH
74722: LD_INT 104
74724: EQUAL
74725: IFFALSE 74735
// sReset := true ;
74727: LD_ADDR_EXP 97
74731: PUSH
74732: LD_INT 1
74734: ST_TO_ADDR
// if p3 = 105 then
74735: LD_VAR 0 3
74739: PUSH
74740: LD_INT 105
74742: EQUAL
74743: IFFALSE 74753
// sSun := true ;
74745: LD_ADDR_EXP 98
74749: PUSH
74750: LD_INT 1
74752: ST_TO_ADDR
// if p3 = 106 then
74753: LD_VAR 0 3
74757: PUSH
74758: LD_INT 106
74760: EQUAL
74761: IFFALSE 74771
// sTiger := true ;
74763: LD_ADDR_EXP 94
74767: PUSH
74768: LD_INT 1
74770: ST_TO_ADDR
// if p3 = 107 then
74771: LD_VAR 0 3
74775: PUSH
74776: LD_INT 107
74778: EQUAL
74779: IFFALSE 74789
// sBomb := true ;
74781: LD_ADDR_EXP 95
74785: PUSH
74786: LD_INT 1
74788: ST_TO_ADDR
// if p3 = 108 then
74789: LD_VAR 0 3
74793: PUSH
74794: LD_INT 108
74796: EQUAL
74797: IFFALSE 74807
// sWound := true ;
74799: LD_ADDR_EXP 103
74803: PUSH
74804: LD_INT 1
74806: ST_TO_ADDR
// if p3 = 109 then
74807: LD_VAR 0 3
74811: PUSH
74812: LD_INT 109
74814: EQUAL
74815: IFFALSE 74825
// sBetray := true ;
74817: LD_ADDR_EXP 107
74821: PUSH
74822: LD_INT 1
74824: ST_TO_ADDR
// if p3 = 110 then
74825: LD_VAR 0 3
74829: PUSH
74830: LD_INT 110
74832: EQUAL
74833: IFFALSE 74843
// sContamin := true ;
74835: LD_ADDR_EXP 108
74839: PUSH
74840: LD_INT 1
74842: ST_TO_ADDR
// if p3 = 111 then
74843: LD_VAR 0 3
74847: PUSH
74848: LD_INT 111
74850: EQUAL
74851: IFFALSE 74861
// sOil := true ;
74853: LD_ADDR_EXP 110
74857: PUSH
74858: LD_INT 1
74860: ST_TO_ADDR
// if p3 = 112 then
74861: LD_VAR 0 3
74865: PUSH
74866: LD_INT 112
74868: EQUAL
74869: IFFALSE 74879
// sStu := true ;
74871: LD_ADDR_EXP 114
74875: PUSH
74876: LD_INT 1
74878: ST_TO_ADDR
// if p3 = 113 then
74879: LD_VAR 0 3
74883: PUSH
74884: LD_INT 113
74886: EQUAL
74887: IFFALSE 74897
// sBazooka := true ;
74889: LD_ADDR_EXP 117
74893: PUSH
74894: LD_INT 1
74896: ST_TO_ADDR
// if p3 = 114 then
74897: LD_VAR 0 3
74901: PUSH
74902: LD_INT 114
74904: EQUAL
74905: IFFALSE 74915
// sMortar := true ;
74907: LD_ADDR_EXP 118
74911: PUSH
74912: LD_INT 1
74914: ST_TO_ADDR
// if p3 = 115 then
74915: LD_VAR 0 3
74919: PUSH
74920: LD_INT 115
74922: EQUAL
74923: IFFALSE 74933
// sRanger := true ;
74925: LD_ADDR_EXP 128
74929: PUSH
74930: LD_INT 1
74932: ST_TO_ADDR
// if p3 = 116 then
74933: LD_VAR 0 3
74937: PUSH
74938: LD_INT 116
74940: EQUAL
74941: IFFALSE 74951
// sComputer := true ;
74943: LD_ADDR_EXP 129
74947: PUSH
74948: LD_INT 1
74950: ST_TO_ADDR
// if p3 = 117 then
74951: LD_VAR 0 3
74955: PUSH
74956: LD_INT 117
74958: EQUAL
74959: IFFALSE 74969
// s30 := true ;
74961: LD_ADDR_EXP 130
74965: PUSH
74966: LD_INT 1
74968: ST_TO_ADDR
// if p3 = 118 then
74969: LD_VAR 0 3
74973: PUSH
74974: LD_INT 118
74976: EQUAL
74977: IFFALSE 74987
// s60 := true ;
74979: LD_ADDR_EXP 131
74983: PUSH
74984: LD_INT 1
74986: ST_TO_ADDR
// end ; if p2 = hack_mode then
74987: LD_VAR 0 2
74991: PUSH
74992: LD_INT 101
74994: EQUAL
74995: IFFALSE 75123
// begin case p3 of 1 :
74997: LD_VAR 0 3
75001: PUSH
75002: LD_INT 1
75004: DOUBLE
75005: EQUAL
75006: IFTRUE 75010
75008: GO 75017
75010: POP
// hHackUnlimitedResources ; 2 :
75011: CALL 87386 0 0
75015: GO 75123
75017: LD_INT 2
75019: DOUBLE
75020: EQUAL
75021: IFTRUE 75025
75023: GO 75032
75025: POP
// hHackSetLevel10 ; 3 :
75026: CALL 87519 0 0
75030: GO 75123
75032: LD_INT 3
75034: DOUBLE
75035: EQUAL
75036: IFTRUE 75040
75038: GO 75047
75040: POP
// hHackSetLevel10YourUnits ; 4 :
75041: CALL 87604 0 0
75045: GO 75123
75047: LD_INT 4
75049: DOUBLE
75050: EQUAL
75051: IFTRUE 75055
75053: GO 75062
75055: POP
// hHackInvincible ; 5 :
75056: CALL 88052 0 0
75060: GO 75123
75062: LD_INT 5
75064: DOUBLE
75065: EQUAL
75066: IFTRUE 75070
75068: GO 75077
75070: POP
// hHackInvisible ; 6 :
75071: CALL 88163 0 0
75075: GO 75123
75077: LD_INT 6
75079: DOUBLE
75080: EQUAL
75081: IFTRUE 75085
75083: GO 75092
75085: POP
// hHackChangeYourSide ; 7 :
75086: CALL 88220 0 0
75090: GO 75123
75092: LD_INT 7
75094: DOUBLE
75095: EQUAL
75096: IFTRUE 75100
75098: GO 75107
75100: POP
// hHackChangeUnitSide ; 8 :
75101: CALL 88262 0 0
75105: GO 75123
75107: LD_INT 8
75109: DOUBLE
75110: EQUAL
75111: IFTRUE 75115
75113: GO 75122
75115: POP
// hHackFog ; end ;
75116: CALL 88363 0 0
75120: GO 75123
75122: POP
// end ; if p2 = game_save_mode then
75123: LD_VAR 0 2
75127: PUSH
75128: LD_INT 102
75130: EQUAL
75131: IFFALSE 75188
// begin if p3 = 1 then
75133: LD_VAR 0 3
75137: PUSH
75138: LD_INT 1
75140: EQUAL
75141: IFFALSE 75153
// globalGameSaveCounter := p4 ;
75143: LD_ADDR_EXP 74
75147: PUSH
75148: LD_VAR 0 4
75152: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
75153: LD_VAR 0 3
75157: PUSH
75158: LD_INT 2
75160: EQUAL
75161: IFFALSE 75169
75163: PUSH
75164: LD_EXP 74
75168: AND
75169: IFFALSE 75188
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
75171: LD_STRING setGameSaveCounter(
75173: PUSH
75174: LD_EXP 74
75178: STR
75179: PUSH
75180: LD_STRING )
75182: STR
75183: PPUSH
75184: CALL_OW 559
// end ; end ;
75188: LD_VAR 0 7
75192: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
75193: LD_INT 0
75195: PPUSH
// streamModeActive := false ;
75196: LD_ADDR_EXP 75
75200: PUSH
75201: LD_INT 0
75203: ST_TO_ADDR
// normalCounter := 36 ;
75204: LD_ADDR_EXP 76
75208: PUSH
75209: LD_INT 36
75211: ST_TO_ADDR
// hardcoreCounter := 18 ;
75212: LD_ADDR_EXP 77
75216: PUSH
75217: LD_INT 18
75219: ST_TO_ADDR
// sRocket := false ;
75220: LD_ADDR_EXP 80
75224: PUSH
75225: LD_INT 0
75227: ST_TO_ADDR
// sSpeed := false ;
75228: LD_ADDR_EXP 79
75232: PUSH
75233: LD_INT 0
75235: ST_TO_ADDR
// sEngine := false ;
75236: LD_ADDR_EXP 81
75240: PUSH
75241: LD_INT 0
75243: ST_TO_ADDR
// sSpec := false ;
75244: LD_ADDR_EXP 78
75248: PUSH
75249: LD_INT 0
75251: ST_TO_ADDR
// sLevel := false ;
75252: LD_ADDR_EXP 82
75256: PUSH
75257: LD_INT 0
75259: ST_TO_ADDR
// sArmoury := false ;
75260: LD_ADDR_EXP 83
75264: PUSH
75265: LD_INT 0
75267: ST_TO_ADDR
// sRadar := false ;
75268: LD_ADDR_EXP 84
75272: PUSH
75273: LD_INT 0
75275: ST_TO_ADDR
// sBunker := false ;
75276: LD_ADDR_EXP 85
75280: PUSH
75281: LD_INT 0
75283: ST_TO_ADDR
// sHack := false ;
75284: LD_ADDR_EXP 86
75288: PUSH
75289: LD_INT 0
75291: ST_TO_ADDR
// sFire := false ;
75292: LD_ADDR_EXP 87
75296: PUSH
75297: LD_INT 0
75299: ST_TO_ADDR
// sRefresh := false ;
75300: LD_ADDR_EXP 88
75304: PUSH
75305: LD_INT 0
75307: ST_TO_ADDR
// sExp := false ;
75308: LD_ADDR_EXP 89
75312: PUSH
75313: LD_INT 0
75315: ST_TO_ADDR
// sDepot := false ;
75316: LD_ADDR_EXP 90
75320: PUSH
75321: LD_INT 0
75323: ST_TO_ADDR
// sFlag := false ;
75324: LD_ADDR_EXP 91
75328: PUSH
75329: LD_INT 0
75331: ST_TO_ADDR
// sKamikadze := false ;
75332: LD_ADDR_EXP 99
75336: PUSH
75337: LD_INT 0
75339: ST_TO_ADDR
// sTroll := false ;
75340: LD_ADDR_EXP 100
75344: PUSH
75345: LD_INT 0
75347: ST_TO_ADDR
// sSlow := false ;
75348: LD_ADDR_EXP 101
75352: PUSH
75353: LD_INT 0
75355: ST_TO_ADDR
// sLack := false ;
75356: LD_ADDR_EXP 102
75360: PUSH
75361: LD_INT 0
75363: ST_TO_ADDR
// sTank := false ;
75364: LD_ADDR_EXP 104
75368: PUSH
75369: LD_INT 0
75371: ST_TO_ADDR
// sRemote := false ;
75372: LD_ADDR_EXP 105
75376: PUSH
75377: LD_INT 0
75379: ST_TO_ADDR
// sPowell := false ;
75380: LD_ADDR_EXP 106
75384: PUSH
75385: LD_INT 0
75387: ST_TO_ADDR
// sTeleport := false ;
75388: LD_ADDR_EXP 109
75392: PUSH
75393: LD_INT 0
75395: ST_TO_ADDR
// sOilTower := false ;
75396: LD_ADDR_EXP 111
75400: PUSH
75401: LD_INT 0
75403: ST_TO_ADDR
// sShovel := false ;
75404: LD_ADDR_EXP 112
75408: PUSH
75409: LD_INT 0
75411: ST_TO_ADDR
// sSheik := false ;
75412: LD_ADDR_EXP 113
75416: PUSH
75417: LD_INT 0
75419: ST_TO_ADDR
// sEarthquake := false ;
75420: LD_ADDR_EXP 115
75424: PUSH
75425: LD_INT 0
75427: ST_TO_ADDR
// sAI := false ;
75428: LD_ADDR_EXP 116
75432: PUSH
75433: LD_INT 0
75435: ST_TO_ADDR
// sCargo := false ;
75436: LD_ADDR_EXP 119
75440: PUSH
75441: LD_INT 0
75443: ST_TO_ADDR
// sDLaser := false ;
75444: LD_ADDR_EXP 120
75448: PUSH
75449: LD_INT 0
75451: ST_TO_ADDR
// sExchange := false ;
75452: LD_ADDR_EXP 121
75456: PUSH
75457: LD_INT 0
75459: ST_TO_ADDR
// sFac := false ;
75460: LD_ADDR_EXP 122
75464: PUSH
75465: LD_INT 0
75467: ST_TO_ADDR
// sPower := false ;
75468: LD_ADDR_EXP 123
75472: PUSH
75473: LD_INT 0
75475: ST_TO_ADDR
// sRandom := false ;
75476: LD_ADDR_EXP 124
75480: PUSH
75481: LD_INT 0
75483: ST_TO_ADDR
// sShield := false ;
75484: LD_ADDR_EXP 125
75488: PUSH
75489: LD_INT 0
75491: ST_TO_ADDR
// sTime := false ;
75492: LD_ADDR_EXP 126
75496: PUSH
75497: LD_INT 0
75499: ST_TO_ADDR
// sTools := false ;
75500: LD_ADDR_EXP 127
75504: PUSH
75505: LD_INT 0
75507: ST_TO_ADDR
// sSold := false ;
75508: LD_ADDR_EXP 92
75512: PUSH
75513: LD_INT 0
75515: ST_TO_ADDR
// sDiff := false ;
75516: LD_ADDR_EXP 93
75520: PUSH
75521: LD_INT 0
75523: ST_TO_ADDR
// sFog := false ;
75524: LD_ADDR_EXP 96
75528: PUSH
75529: LD_INT 0
75531: ST_TO_ADDR
// sReset := false ;
75532: LD_ADDR_EXP 97
75536: PUSH
75537: LD_INT 0
75539: ST_TO_ADDR
// sSun := false ;
75540: LD_ADDR_EXP 98
75544: PUSH
75545: LD_INT 0
75547: ST_TO_ADDR
// sTiger := false ;
75548: LD_ADDR_EXP 94
75552: PUSH
75553: LD_INT 0
75555: ST_TO_ADDR
// sBomb := false ;
75556: LD_ADDR_EXP 95
75560: PUSH
75561: LD_INT 0
75563: ST_TO_ADDR
// sWound := false ;
75564: LD_ADDR_EXP 103
75568: PUSH
75569: LD_INT 0
75571: ST_TO_ADDR
// sBetray := false ;
75572: LD_ADDR_EXP 107
75576: PUSH
75577: LD_INT 0
75579: ST_TO_ADDR
// sContamin := false ;
75580: LD_ADDR_EXP 108
75584: PUSH
75585: LD_INT 0
75587: ST_TO_ADDR
// sOil := false ;
75588: LD_ADDR_EXP 110
75592: PUSH
75593: LD_INT 0
75595: ST_TO_ADDR
// sStu := false ;
75596: LD_ADDR_EXP 114
75600: PUSH
75601: LD_INT 0
75603: ST_TO_ADDR
// sBazooka := false ;
75604: LD_ADDR_EXP 117
75608: PUSH
75609: LD_INT 0
75611: ST_TO_ADDR
// sMortar := false ;
75612: LD_ADDR_EXP 118
75616: PUSH
75617: LD_INT 0
75619: ST_TO_ADDR
// sRanger := false ;
75620: LD_ADDR_EXP 128
75624: PUSH
75625: LD_INT 0
75627: ST_TO_ADDR
// sComputer := false ;
75628: LD_ADDR_EXP 129
75632: PUSH
75633: LD_INT 0
75635: ST_TO_ADDR
// s30 := false ;
75636: LD_ADDR_EXP 130
75640: PUSH
75641: LD_INT 0
75643: ST_TO_ADDR
// s60 := false ;
75644: LD_ADDR_EXP 131
75648: PUSH
75649: LD_INT 0
75651: ST_TO_ADDR
// end ;
75652: LD_VAR 0 1
75656: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
75657: LD_INT 0
75659: PPUSH
75660: PPUSH
75661: PPUSH
75662: PPUSH
75663: PPUSH
75664: PPUSH
75665: PPUSH
// result := [ ] ;
75666: LD_ADDR_VAR 0 2
75670: PUSH
75671: EMPTY
75672: ST_TO_ADDR
// if campaign_id = 1 then
75673: LD_OWVAR 69
75677: PUSH
75678: LD_INT 1
75680: EQUAL
75681: IFFALSE 78847
// begin case mission_number of 1 :
75683: LD_OWVAR 70
75687: PUSH
75688: LD_INT 1
75690: DOUBLE
75691: EQUAL
75692: IFTRUE 75696
75694: GO 75772
75696: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
75697: LD_ADDR_VAR 0 2
75701: PUSH
75702: LD_INT 2
75704: PUSH
75705: LD_INT 4
75707: PUSH
75708: LD_INT 11
75710: PUSH
75711: LD_INT 12
75713: PUSH
75714: LD_INT 15
75716: PUSH
75717: LD_INT 16
75719: PUSH
75720: LD_INT 22
75722: PUSH
75723: LD_INT 23
75725: PUSH
75726: LD_INT 26
75728: PUSH
75729: EMPTY
75730: LIST
75731: LIST
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: PUSH
75740: LD_INT 101
75742: PUSH
75743: LD_INT 102
75745: PUSH
75746: LD_INT 106
75748: PUSH
75749: LD_INT 116
75751: PUSH
75752: LD_INT 117
75754: PUSH
75755: LD_INT 118
75757: PUSH
75758: EMPTY
75759: LIST
75760: LIST
75761: LIST
75762: LIST
75763: LIST
75764: LIST
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: ST_TO_ADDR
75770: GO 78845
75772: LD_INT 2
75774: DOUBLE
75775: EQUAL
75776: IFTRUE 75780
75778: GO 75864
75780: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
75781: LD_ADDR_VAR 0 2
75785: PUSH
75786: LD_INT 2
75788: PUSH
75789: LD_INT 4
75791: PUSH
75792: LD_INT 11
75794: PUSH
75795: LD_INT 12
75797: PUSH
75798: LD_INT 15
75800: PUSH
75801: LD_INT 16
75803: PUSH
75804: LD_INT 22
75806: PUSH
75807: LD_INT 23
75809: PUSH
75810: LD_INT 26
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: LIST
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: LIST
75823: PUSH
75824: LD_INT 101
75826: PUSH
75827: LD_INT 102
75829: PUSH
75830: LD_INT 105
75832: PUSH
75833: LD_INT 106
75835: PUSH
75836: LD_INT 108
75838: PUSH
75839: LD_INT 116
75841: PUSH
75842: LD_INT 117
75844: PUSH
75845: LD_INT 118
75847: PUSH
75848: EMPTY
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: LIST
75854: LIST
75855: LIST
75856: LIST
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: ST_TO_ADDR
75862: GO 78845
75864: LD_INT 3
75866: DOUBLE
75867: EQUAL
75868: IFTRUE 75872
75870: GO 75960
75872: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
75873: LD_ADDR_VAR 0 2
75877: PUSH
75878: LD_INT 2
75880: PUSH
75881: LD_INT 4
75883: PUSH
75884: LD_INT 5
75886: PUSH
75887: LD_INT 11
75889: PUSH
75890: LD_INT 12
75892: PUSH
75893: LD_INT 15
75895: PUSH
75896: LD_INT 16
75898: PUSH
75899: LD_INT 22
75901: PUSH
75902: LD_INT 26
75904: PUSH
75905: LD_INT 36
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: PUSH
75920: LD_INT 101
75922: PUSH
75923: LD_INT 102
75925: PUSH
75926: LD_INT 105
75928: PUSH
75929: LD_INT 106
75931: PUSH
75932: LD_INT 108
75934: PUSH
75935: LD_INT 116
75937: PUSH
75938: LD_INT 117
75940: PUSH
75941: LD_INT 118
75943: PUSH
75944: EMPTY
75945: LIST
75946: LIST
75947: LIST
75948: LIST
75949: LIST
75950: LIST
75951: LIST
75952: LIST
75953: PUSH
75954: EMPTY
75955: LIST
75956: LIST
75957: ST_TO_ADDR
75958: GO 78845
75960: LD_INT 4
75962: DOUBLE
75963: EQUAL
75964: IFTRUE 75968
75966: GO 76064
75968: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
75969: LD_ADDR_VAR 0 2
75973: PUSH
75974: LD_INT 2
75976: PUSH
75977: LD_INT 4
75979: PUSH
75980: LD_INT 5
75982: PUSH
75983: LD_INT 8
75985: PUSH
75986: LD_INT 11
75988: PUSH
75989: LD_INT 12
75991: PUSH
75992: LD_INT 15
75994: PUSH
75995: LD_INT 16
75997: PUSH
75998: LD_INT 22
76000: PUSH
76001: LD_INT 23
76003: PUSH
76004: LD_INT 26
76006: PUSH
76007: LD_INT 36
76009: PUSH
76010: EMPTY
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: PUSH
76024: LD_INT 101
76026: PUSH
76027: LD_INT 102
76029: PUSH
76030: LD_INT 105
76032: PUSH
76033: LD_INT 106
76035: PUSH
76036: LD_INT 108
76038: PUSH
76039: LD_INT 116
76041: PUSH
76042: LD_INT 117
76044: PUSH
76045: LD_INT 118
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: LIST
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: ST_TO_ADDR
76062: GO 78845
76064: LD_INT 5
76066: DOUBLE
76067: EQUAL
76068: IFTRUE 76072
76070: GO 76184
76072: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
76073: LD_ADDR_VAR 0 2
76077: PUSH
76078: LD_INT 2
76080: PUSH
76081: LD_INT 4
76083: PUSH
76084: LD_INT 5
76086: PUSH
76087: LD_INT 6
76089: PUSH
76090: LD_INT 8
76092: PUSH
76093: LD_INT 11
76095: PUSH
76096: LD_INT 12
76098: PUSH
76099: LD_INT 15
76101: PUSH
76102: LD_INT 16
76104: PUSH
76105: LD_INT 22
76107: PUSH
76108: LD_INT 23
76110: PUSH
76111: LD_INT 25
76113: PUSH
76114: LD_INT 26
76116: PUSH
76117: LD_INT 36
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: LIST
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: LIST
76129: LIST
76130: LIST
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: PUSH
76136: LD_INT 101
76138: PUSH
76139: LD_INT 102
76141: PUSH
76142: LD_INT 105
76144: PUSH
76145: LD_INT 106
76147: PUSH
76148: LD_INT 108
76150: PUSH
76151: LD_INT 109
76153: PUSH
76154: LD_INT 112
76156: PUSH
76157: LD_INT 116
76159: PUSH
76160: LD_INT 117
76162: PUSH
76163: LD_INT 118
76165: PUSH
76166: EMPTY
76167: LIST
76168: LIST
76169: LIST
76170: LIST
76171: LIST
76172: LIST
76173: LIST
76174: LIST
76175: LIST
76176: LIST
76177: PUSH
76178: EMPTY
76179: LIST
76180: LIST
76181: ST_TO_ADDR
76182: GO 78845
76184: LD_INT 6
76186: DOUBLE
76187: EQUAL
76188: IFTRUE 76192
76190: GO 76324
76192: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
76193: LD_ADDR_VAR 0 2
76197: PUSH
76198: LD_INT 2
76200: PUSH
76201: LD_INT 4
76203: PUSH
76204: LD_INT 5
76206: PUSH
76207: LD_INT 6
76209: PUSH
76210: LD_INT 8
76212: PUSH
76213: LD_INT 11
76215: PUSH
76216: LD_INT 12
76218: PUSH
76219: LD_INT 15
76221: PUSH
76222: LD_INT 16
76224: PUSH
76225: LD_INT 20
76227: PUSH
76228: LD_INT 21
76230: PUSH
76231: LD_INT 22
76233: PUSH
76234: LD_INT 23
76236: PUSH
76237: LD_INT 25
76239: PUSH
76240: LD_INT 26
76242: PUSH
76243: LD_INT 30
76245: PUSH
76246: LD_INT 31
76248: PUSH
76249: LD_INT 32
76251: PUSH
76252: LD_INT 36
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: LIST
76259: LIST
76260: LIST
76261: LIST
76262: LIST
76263: LIST
76264: LIST
76265: LIST
76266: LIST
76267: LIST
76268: LIST
76269: LIST
76270: LIST
76271: LIST
76272: LIST
76273: LIST
76274: LIST
76275: PUSH
76276: LD_INT 101
76278: PUSH
76279: LD_INT 102
76281: PUSH
76282: LD_INT 105
76284: PUSH
76285: LD_INT 106
76287: PUSH
76288: LD_INT 108
76290: PUSH
76291: LD_INT 109
76293: PUSH
76294: LD_INT 112
76296: PUSH
76297: LD_INT 116
76299: PUSH
76300: LD_INT 117
76302: PUSH
76303: LD_INT 118
76305: PUSH
76306: EMPTY
76307: LIST
76308: LIST
76309: LIST
76310: LIST
76311: LIST
76312: LIST
76313: LIST
76314: LIST
76315: LIST
76316: LIST
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: ST_TO_ADDR
76322: GO 78845
76324: LD_INT 7
76326: DOUBLE
76327: EQUAL
76328: IFTRUE 76332
76330: GO 76444
76332: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
76333: LD_ADDR_VAR 0 2
76337: PUSH
76338: LD_INT 2
76340: PUSH
76341: LD_INT 4
76343: PUSH
76344: LD_INT 5
76346: PUSH
76347: LD_INT 7
76349: PUSH
76350: LD_INT 11
76352: PUSH
76353: LD_INT 12
76355: PUSH
76356: LD_INT 15
76358: PUSH
76359: LD_INT 16
76361: PUSH
76362: LD_INT 20
76364: PUSH
76365: LD_INT 21
76367: PUSH
76368: LD_INT 22
76370: PUSH
76371: LD_INT 23
76373: PUSH
76374: LD_INT 25
76376: PUSH
76377: LD_INT 26
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: LIST
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: LIST
76393: LIST
76394: LIST
76395: PUSH
76396: LD_INT 101
76398: PUSH
76399: LD_INT 102
76401: PUSH
76402: LD_INT 103
76404: PUSH
76405: LD_INT 105
76407: PUSH
76408: LD_INT 106
76410: PUSH
76411: LD_INT 108
76413: PUSH
76414: LD_INT 112
76416: PUSH
76417: LD_INT 116
76419: PUSH
76420: LD_INT 117
76422: PUSH
76423: LD_INT 118
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: LIST
76430: LIST
76431: LIST
76432: LIST
76433: LIST
76434: LIST
76435: LIST
76436: LIST
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: ST_TO_ADDR
76442: GO 78845
76444: LD_INT 8
76446: DOUBLE
76447: EQUAL
76448: IFTRUE 76452
76450: GO 76592
76452: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
76453: LD_ADDR_VAR 0 2
76457: PUSH
76458: LD_INT 2
76460: PUSH
76461: LD_INT 4
76463: PUSH
76464: LD_INT 5
76466: PUSH
76467: LD_INT 6
76469: PUSH
76470: LD_INT 7
76472: PUSH
76473: LD_INT 8
76475: PUSH
76476: LD_INT 11
76478: PUSH
76479: LD_INT 12
76481: PUSH
76482: LD_INT 15
76484: PUSH
76485: LD_INT 16
76487: PUSH
76488: LD_INT 20
76490: PUSH
76491: LD_INT 21
76493: PUSH
76494: LD_INT 22
76496: PUSH
76497: LD_INT 23
76499: PUSH
76500: LD_INT 25
76502: PUSH
76503: LD_INT 26
76505: PUSH
76506: LD_INT 30
76508: PUSH
76509: LD_INT 31
76511: PUSH
76512: LD_INT 32
76514: PUSH
76515: LD_INT 36
76517: PUSH
76518: EMPTY
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: LIST
76538: LIST
76539: PUSH
76540: LD_INT 101
76542: PUSH
76543: LD_INT 102
76545: PUSH
76546: LD_INT 103
76548: PUSH
76549: LD_INT 105
76551: PUSH
76552: LD_INT 106
76554: PUSH
76555: LD_INT 108
76557: PUSH
76558: LD_INT 109
76560: PUSH
76561: LD_INT 112
76563: PUSH
76564: LD_INT 116
76566: PUSH
76567: LD_INT 117
76569: PUSH
76570: LD_INT 118
76572: PUSH
76573: EMPTY
76574: LIST
76575: LIST
76576: LIST
76577: LIST
76578: LIST
76579: LIST
76580: LIST
76581: LIST
76582: LIST
76583: LIST
76584: LIST
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: ST_TO_ADDR
76590: GO 78845
76592: LD_INT 9
76594: DOUBLE
76595: EQUAL
76596: IFTRUE 76600
76598: GO 76748
76600: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
76601: LD_ADDR_VAR 0 2
76605: PUSH
76606: LD_INT 2
76608: PUSH
76609: LD_INT 4
76611: PUSH
76612: LD_INT 5
76614: PUSH
76615: LD_INT 6
76617: PUSH
76618: LD_INT 7
76620: PUSH
76621: LD_INT 8
76623: PUSH
76624: LD_INT 11
76626: PUSH
76627: LD_INT 12
76629: PUSH
76630: LD_INT 15
76632: PUSH
76633: LD_INT 16
76635: PUSH
76636: LD_INT 20
76638: PUSH
76639: LD_INT 21
76641: PUSH
76642: LD_INT 22
76644: PUSH
76645: LD_INT 23
76647: PUSH
76648: LD_INT 25
76650: PUSH
76651: LD_INT 26
76653: PUSH
76654: LD_INT 28
76656: PUSH
76657: LD_INT 30
76659: PUSH
76660: LD_INT 31
76662: PUSH
76663: LD_INT 32
76665: PUSH
76666: LD_INT 36
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: LIST
76676: LIST
76677: LIST
76678: LIST
76679: LIST
76680: LIST
76681: LIST
76682: LIST
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: LIST
76690: LIST
76691: PUSH
76692: LD_INT 101
76694: PUSH
76695: LD_INT 102
76697: PUSH
76698: LD_INT 103
76700: PUSH
76701: LD_INT 105
76703: PUSH
76704: LD_INT 106
76706: PUSH
76707: LD_INT 108
76709: PUSH
76710: LD_INT 109
76712: PUSH
76713: LD_INT 112
76715: PUSH
76716: LD_INT 114
76718: PUSH
76719: LD_INT 116
76721: PUSH
76722: LD_INT 117
76724: PUSH
76725: LD_INT 118
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: LIST
76732: LIST
76733: LIST
76734: LIST
76735: LIST
76736: LIST
76737: LIST
76738: LIST
76739: LIST
76740: LIST
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: ST_TO_ADDR
76746: GO 78845
76748: LD_INT 10
76750: DOUBLE
76751: EQUAL
76752: IFTRUE 76756
76754: GO 76952
76756: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
76757: LD_ADDR_VAR 0 2
76761: PUSH
76762: LD_INT 2
76764: PUSH
76765: LD_INT 4
76767: PUSH
76768: LD_INT 5
76770: PUSH
76771: LD_INT 6
76773: PUSH
76774: LD_INT 7
76776: PUSH
76777: LD_INT 8
76779: PUSH
76780: LD_INT 9
76782: PUSH
76783: LD_INT 10
76785: PUSH
76786: LD_INT 11
76788: PUSH
76789: LD_INT 12
76791: PUSH
76792: LD_INT 13
76794: PUSH
76795: LD_INT 14
76797: PUSH
76798: LD_INT 15
76800: PUSH
76801: LD_INT 16
76803: PUSH
76804: LD_INT 17
76806: PUSH
76807: LD_INT 18
76809: PUSH
76810: LD_INT 19
76812: PUSH
76813: LD_INT 20
76815: PUSH
76816: LD_INT 21
76818: PUSH
76819: LD_INT 22
76821: PUSH
76822: LD_INT 23
76824: PUSH
76825: LD_INT 24
76827: PUSH
76828: LD_INT 25
76830: PUSH
76831: LD_INT 26
76833: PUSH
76834: LD_INT 28
76836: PUSH
76837: LD_INT 30
76839: PUSH
76840: LD_INT 31
76842: PUSH
76843: LD_INT 32
76845: PUSH
76846: LD_INT 36
76848: PUSH
76849: EMPTY
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: LIST
76856: LIST
76857: LIST
76858: LIST
76859: LIST
76860: LIST
76861: LIST
76862: LIST
76863: LIST
76864: LIST
76865: LIST
76866: LIST
76867: LIST
76868: LIST
76869: LIST
76870: LIST
76871: LIST
76872: LIST
76873: LIST
76874: LIST
76875: LIST
76876: LIST
76877: LIST
76878: LIST
76879: PUSH
76880: LD_INT 101
76882: PUSH
76883: LD_INT 102
76885: PUSH
76886: LD_INT 103
76888: PUSH
76889: LD_INT 104
76891: PUSH
76892: LD_INT 105
76894: PUSH
76895: LD_INT 106
76897: PUSH
76898: LD_INT 107
76900: PUSH
76901: LD_INT 108
76903: PUSH
76904: LD_INT 109
76906: PUSH
76907: LD_INT 110
76909: PUSH
76910: LD_INT 111
76912: PUSH
76913: LD_INT 112
76915: PUSH
76916: LD_INT 114
76918: PUSH
76919: LD_INT 116
76921: PUSH
76922: LD_INT 117
76924: PUSH
76925: LD_INT 118
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: LIST
76932: LIST
76933: LIST
76934: LIST
76935: LIST
76936: LIST
76937: LIST
76938: LIST
76939: LIST
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: PUSH
76946: EMPTY
76947: LIST
76948: LIST
76949: ST_TO_ADDR
76950: GO 78845
76952: LD_INT 11
76954: DOUBLE
76955: EQUAL
76956: IFTRUE 76960
76958: GO 77164
76960: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
76961: LD_ADDR_VAR 0 2
76965: PUSH
76966: LD_INT 2
76968: PUSH
76969: LD_INT 3
76971: PUSH
76972: LD_INT 4
76974: PUSH
76975: LD_INT 5
76977: PUSH
76978: LD_INT 6
76980: PUSH
76981: LD_INT 7
76983: PUSH
76984: LD_INT 8
76986: PUSH
76987: LD_INT 9
76989: PUSH
76990: LD_INT 10
76992: PUSH
76993: LD_INT 11
76995: PUSH
76996: LD_INT 12
76998: PUSH
76999: LD_INT 13
77001: PUSH
77002: LD_INT 14
77004: PUSH
77005: LD_INT 15
77007: PUSH
77008: LD_INT 16
77010: PUSH
77011: LD_INT 17
77013: PUSH
77014: LD_INT 18
77016: PUSH
77017: LD_INT 19
77019: PUSH
77020: LD_INT 20
77022: PUSH
77023: LD_INT 21
77025: PUSH
77026: LD_INT 22
77028: PUSH
77029: LD_INT 23
77031: PUSH
77032: LD_INT 24
77034: PUSH
77035: LD_INT 25
77037: PUSH
77038: LD_INT 26
77040: PUSH
77041: LD_INT 28
77043: PUSH
77044: LD_INT 30
77046: PUSH
77047: LD_INT 31
77049: PUSH
77050: LD_INT 32
77052: PUSH
77053: LD_INT 34
77055: PUSH
77056: LD_INT 36
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: LIST
77063: LIST
77064: LIST
77065: LIST
77066: LIST
77067: LIST
77068: LIST
77069: LIST
77070: LIST
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: LIST
77076: LIST
77077: LIST
77078: LIST
77079: LIST
77080: LIST
77081: LIST
77082: LIST
77083: LIST
77084: LIST
77085: LIST
77086: LIST
77087: LIST
77088: LIST
77089: LIST
77090: LIST
77091: PUSH
77092: LD_INT 101
77094: PUSH
77095: LD_INT 102
77097: PUSH
77098: LD_INT 103
77100: PUSH
77101: LD_INT 104
77103: PUSH
77104: LD_INT 105
77106: PUSH
77107: LD_INT 106
77109: PUSH
77110: LD_INT 107
77112: PUSH
77113: LD_INT 108
77115: PUSH
77116: LD_INT 109
77118: PUSH
77119: LD_INT 110
77121: PUSH
77122: LD_INT 111
77124: PUSH
77125: LD_INT 112
77127: PUSH
77128: LD_INT 114
77130: PUSH
77131: LD_INT 116
77133: PUSH
77134: LD_INT 117
77136: PUSH
77137: LD_INT 118
77139: PUSH
77140: EMPTY
77141: LIST
77142: LIST
77143: LIST
77144: LIST
77145: LIST
77146: LIST
77147: LIST
77148: LIST
77149: LIST
77150: LIST
77151: LIST
77152: LIST
77153: LIST
77154: LIST
77155: LIST
77156: LIST
77157: PUSH
77158: EMPTY
77159: LIST
77160: LIST
77161: ST_TO_ADDR
77162: GO 78845
77164: LD_INT 12
77166: DOUBLE
77167: EQUAL
77168: IFTRUE 77172
77170: GO 77392
77172: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
77173: LD_ADDR_VAR 0 2
77177: PUSH
77178: LD_INT 1
77180: PUSH
77181: LD_INT 2
77183: PUSH
77184: LD_INT 3
77186: PUSH
77187: LD_INT 4
77189: PUSH
77190: LD_INT 5
77192: PUSH
77193: LD_INT 6
77195: PUSH
77196: LD_INT 7
77198: PUSH
77199: LD_INT 8
77201: PUSH
77202: LD_INT 9
77204: PUSH
77205: LD_INT 10
77207: PUSH
77208: LD_INT 11
77210: PUSH
77211: LD_INT 12
77213: PUSH
77214: LD_INT 13
77216: PUSH
77217: LD_INT 14
77219: PUSH
77220: LD_INT 15
77222: PUSH
77223: LD_INT 16
77225: PUSH
77226: LD_INT 17
77228: PUSH
77229: LD_INT 18
77231: PUSH
77232: LD_INT 19
77234: PUSH
77235: LD_INT 20
77237: PUSH
77238: LD_INT 21
77240: PUSH
77241: LD_INT 22
77243: PUSH
77244: LD_INT 23
77246: PUSH
77247: LD_INT 24
77249: PUSH
77250: LD_INT 25
77252: PUSH
77253: LD_INT 26
77255: PUSH
77256: LD_INT 27
77258: PUSH
77259: LD_INT 28
77261: PUSH
77262: LD_INT 30
77264: PUSH
77265: LD_INT 31
77267: PUSH
77268: LD_INT 32
77270: PUSH
77271: LD_INT 33
77273: PUSH
77274: LD_INT 34
77276: PUSH
77277: LD_INT 36
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: LIST
77284: LIST
77285: LIST
77286: LIST
77287: LIST
77288: LIST
77289: LIST
77290: LIST
77291: LIST
77292: LIST
77293: LIST
77294: LIST
77295: LIST
77296: LIST
77297: LIST
77298: LIST
77299: LIST
77300: LIST
77301: LIST
77302: LIST
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: PUSH
77316: LD_INT 101
77318: PUSH
77319: LD_INT 102
77321: PUSH
77322: LD_INT 103
77324: PUSH
77325: LD_INT 104
77327: PUSH
77328: LD_INT 105
77330: PUSH
77331: LD_INT 106
77333: PUSH
77334: LD_INT 107
77336: PUSH
77337: LD_INT 108
77339: PUSH
77340: LD_INT 109
77342: PUSH
77343: LD_INT 110
77345: PUSH
77346: LD_INT 111
77348: PUSH
77349: LD_INT 112
77351: PUSH
77352: LD_INT 113
77354: PUSH
77355: LD_INT 114
77357: PUSH
77358: LD_INT 116
77360: PUSH
77361: LD_INT 117
77363: PUSH
77364: LD_INT 118
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: LIST
77371: LIST
77372: LIST
77373: LIST
77374: LIST
77375: LIST
77376: LIST
77377: LIST
77378: LIST
77379: LIST
77380: LIST
77381: LIST
77382: LIST
77383: LIST
77384: LIST
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: ST_TO_ADDR
77390: GO 78845
77392: LD_INT 13
77394: DOUBLE
77395: EQUAL
77396: IFTRUE 77400
77398: GO 77608
77400: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
77401: LD_ADDR_VAR 0 2
77405: PUSH
77406: LD_INT 1
77408: PUSH
77409: LD_INT 2
77411: PUSH
77412: LD_INT 3
77414: PUSH
77415: LD_INT 4
77417: PUSH
77418: LD_INT 5
77420: PUSH
77421: LD_INT 8
77423: PUSH
77424: LD_INT 9
77426: PUSH
77427: LD_INT 10
77429: PUSH
77430: LD_INT 11
77432: PUSH
77433: LD_INT 12
77435: PUSH
77436: LD_INT 14
77438: PUSH
77439: LD_INT 15
77441: PUSH
77442: LD_INT 16
77444: PUSH
77445: LD_INT 17
77447: PUSH
77448: LD_INT 18
77450: PUSH
77451: LD_INT 19
77453: PUSH
77454: LD_INT 20
77456: PUSH
77457: LD_INT 21
77459: PUSH
77460: LD_INT 22
77462: PUSH
77463: LD_INT 23
77465: PUSH
77466: LD_INT 24
77468: PUSH
77469: LD_INT 25
77471: PUSH
77472: LD_INT 26
77474: PUSH
77475: LD_INT 27
77477: PUSH
77478: LD_INT 28
77480: PUSH
77481: LD_INT 30
77483: PUSH
77484: LD_INT 31
77486: PUSH
77487: LD_INT 32
77489: PUSH
77490: LD_INT 33
77492: PUSH
77493: LD_INT 34
77495: PUSH
77496: LD_INT 36
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: LIST
77503: LIST
77504: LIST
77505: LIST
77506: LIST
77507: LIST
77508: LIST
77509: LIST
77510: LIST
77511: LIST
77512: LIST
77513: LIST
77514: LIST
77515: LIST
77516: LIST
77517: LIST
77518: LIST
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: LIST
77525: LIST
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: PUSH
77532: LD_INT 101
77534: PUSH
77535: LD_INT 102
77537: PUSH
77538: LD_INT 103
77540: PUSH
77541: LD_INT 104
77543: PUSH
77544: LD_INT 105
77546: PUSH
77547: LD_INT 106
77549: PUSH
77550: LD_INT 107
77552: PUSH
77553: LD_INT 108
77555: PUSH
77556: LD_INT 109
77558: PUSH
77559: LD_INT 110
77561: PUSH
77562: LD_INT 111
77564: PUSH
77565: LD_INT 112
77567: PUSH
77568: LD_INT 113
77570: PUSH
77571: LD_INT 114
77573: PUSH
77574: LD_INT 116
77576: PUSH
77577: LD_INT 117
77579: PUSH
77580: LD_INT 118
77582: PUSH
77583: EMPTY
77584: LIST
77585: LIST
77586: LIST
77587: LIST
77588: LIST
77589: LIST
77590: LIST
77591: LIST
77592: LIST
77593: LIST
77594: LIST
77595: LIST
77596: LIST
77597: LIST
77598: LIST
77599: LIST
77600: LIST
77601: PUSH
77602: EMPTY
77603: LIST
77604: LIST
77605: ST_TO_ADDR
77606: GO 78845
77608: LD_INT 14
77610: DOUBLE
77611: EQUAL
77612: IFTRUE 77616
77614: GO 77840
77616: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
77617: LD_ADDR_VAR 0 2
77621: PUSH
77622: LD_INT 1
77624: PUSH
77625: LD_INT 2
77627: PUSH
77628: LD_INT 3
77630: PUSH
77631: LD_INT 4
77633: PUSH
77634: LD_INT 5
77636: PUSH
77637: LD_INT 6
77639: PUSH
77640: LD_INT 7
77642: PUSH
77643: LD_INT 8
77645: PUSH
77646: LD_INT 9
77648: PUSH
77649: LD_INT 10
77651: PUSH
77652: LD_INT 11
77654: PUSH
77655: LD_INT 12
77657: PUSH
77658: LD_INT 13
77660: PUSH
77661: LD_INT 14
77663: PUSH
77664: LD_INT 15
77666: PUSH
77667: LD_INT 16
77669: PUSH
77670: LD_INT 17
77672: PUSH
77673: LD_INT 18
77675: PUSH
77676: LD_INT 19
77678: PUSH
77679: LD_INT 20
77681: PUSH
77682: LD_INT 21
77684: PUSH
77685: LD_INT 22
77687: PUSH
77688: LD_INT 23
77690: PUSH
77691: LD_INT 24
77693: PUSH
77694: LD_INT 25
77696: PUSH
77697: LD_INT 26
77699: PUSH
77700: LD_INT 27
77702: PUSH
77703: LD_INT 28
77705: PUSH
77706: LD_INT 29
77708: PUSH
77709: LD_INT 30
77711: PUSH
77712: LD_INT 31
77714: PUSH
77715: LD_INT 32
77717: PUSH
77718: LD_INT 33
77720: PUSH
77721: LD_INT 34
77723: PUSH
77724: LD_INT 36
77726: PUSH
77727: EMPTY
77728: LIST
77729: LIST
77730: LIST
77731: LIST
77732: LIST
77733: LIST
77734: LIST
77735: LIST
77736: LIST
77737: LIST
77738: LIST
77739: LIST
77740: LIST
77741: LIST
77742: LIST
77743: LIST
77744: LIST
77745: LIST
77746: LIST
77747: LIST
77748: LIST
77749: LIST
77750: LIST
77751: LIST
77752: LIST
77753: LIST
77754: LIST
77755: LIST
77756: LIST
77757: LIST
77758: LIST
77759: LIST
77760: LIST
77761: LIST
77762: LIST
77763: PUSH
77764: LD_INT 101
77766: PUSH
77767: LD_INT 102
77769: PUSH
77770: LD_INT 103
77772: PUSH
77773: LD_INT 104
77775: PUSH
77776: LD_INT 105
77778: PUSH
77779: LD_INT 106
77781: PUSH
77782: LD_INT 107
77784: PUSH
77785: LD_INT 108
77787: PUSH
77788: LD_INT 109
77790: PUSH
77791: LD_INT 110
77793: PUSH
77794: LD_INT 111
77796: PUSH
77797: LD_INT 112
77799: PUSH
77800: LD_INT 113
77802: PUSH
77803: LD_INT 114
77805: PUSH
77806: LD_INT 116
77808: PUSH
77809: LD_INT 117
77811: PUSH
77812: LD_INT 118
77814: PUSH
77815: EMPTY
77816: LIST
77817: LIST
77818: LIST
77819: LIST
77820: LIST
77821: LIST
77822: LIST
77823: LIST
77824: LIST
77825: LIST
77826: LIST
77827: LIST
77828: LIST
77829: LIST
77830: LIST
77831: LIST
77832: LIST
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: ST_TO_ADDR
77838: GO 78845
77840: LD_INT 15
77842: DOUBLE
77843: EQUAL
77844: IFTRUE 77848
77846: GO 78072
77848: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
77849: LD_ADDR_VAR 0 2
77853: PUSH
77854: LD_INT 1
77856: PUSH
77857: LD_INT 2
77859: PUSH
77860: LD_INT 3
77862: PUSH
77863: LD_INT 4
77865: PUSH
77866: LD_INT 5
77868: PUSH
77869: LD_INT 6
77871: PUSH
77872: LD_INT 7
77874: PUSH
77875: LD_INT 8
77877: PUSH
77878: LD_INT 9
77880: PUSH
77881: LD_INT 10
77883: PUSH
77884: LD_INT 11
77886: PUSH
77887: LD_INT 12
77889: PUSH
77890: LD_INT 13
77892: PUSH
77893: LD_INT 14
77895: PUSH
77896: LD_INT 15
77898: PUSH
77899: LD_INT 16
77901: PUSH
77902: LD_INT 17
77904: PUSH
77905: LD_INT 18
77907: PUSH
77908: LD_INT 19
77910: PUSH
77911: LD_INT 20
77913: PUSH
77914: LD_INT 21
77916: PUSH
77917: LD_INT 22
77919: PUSH
77920: LD_INT 23
77922: PUSH
77923: LD_INT 24
77925: PUSH
77926: LD_INT 25
77928: PUSH
77929: LD_INT 26
77931: PUSH
77932: LD_INT 27
77934: PUSH
77935: LD_INT 28
77937: PUSH
77938: LD_INT 29
77940: PUSH
77941: LD_INT 30
77943: PUSH
77944: LD_INT 31
77946: PUSH
77947: LD_INT 32
77949: PUSH
77950: LD_INT 33
77952: PUSH
77953: LD_INT 34
77955: PUSH
77956: LD_INT 36
77958: PUSH
77959: EMPTY
77960: LIST
77961: LIST
77962: LIST
77963: LIST
77964: LIST
77965: LIST
77966: LIST
77967: LIST
77968: LIST
77969: LIST
77970: LIST
77971: LIST
77972: LIST
77973: LIST
77974: LIST
77975: LIST
77976: LIST
77977: LIST
77978: LIST
77979: LIST
77980: LIST
77981: LIST
77982: LIST
77983: LIST
77984: LIST
77985: LIST
77986: LIST
77987: LIST
77988: LIST
77989: LIST
77990: LIST
77991: LIST
77992: LIST
77993: LIST
77994: LIST
77995: PUSH
77996: LD_INT 101
77998: PUSH
77999: LD_INT 102
78001: PUSH
78002: LD_INT 103
78004: PUSH
78005: LD_INT 104
78007: PUSH
78008: LD_INT 105
78010: PUSH
78011: LD_INT 106
78013: PUSH
78014: LD_INT 107
78016: PUSH
78017: LD_INT 108
78019: PUSH
78020: LD_INT 109
78022: PUSH
78023: LD_INT 110
78025: PUSH
78026: LD_INT 111
78028: PUSH
78029: LD_INT 112
78031: PUSH
78032: LD_INT 113
78034: PUSH
78035: LD_INT 114
78037: PUSH
78038: LD_INT 116
78040: PUSH
78041: LD_INT 117
78043: PUSH
78044: LD_INT 118
78046: PUSH
78047: EMPTY
78048: LIST
78049: LIST
78050: LIST
78051: LIST
78052: LIST
78053: LIST
78054: LIST
78055: LIST
78056: LIST
78057: LIST
78058: LIST
78059: LIST
78060: LIST
78061: LIST
78062: LIST
78063: LIST
78064: LIST
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: ST_TO_ADDR
78070: GO 78845
78072: LD_INT 16
78074: DOUBLE
78075: EQUAL
78076: IFTRUE 78080
78078: GO 78216
78080: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
78081: LD_ADDR_VAR 0 2
78085: PUSH
78086: LD_INT 2
78088: PUSH
78089: LD_INT 4
78091: PUSH
78092: LD_INT 5
78094: PUSH
78095: LD_INT 7
78097: PUSH
78098: LD_INT 11
78100: PUSH
78101: LD_INT 12
78103: PUSH
78104: LD_INT 15
78106: PUSH
78107: LD_INT 16
78109: PUSH
78110: LD_INT 20
78112: PUSH
78113: LD_INT 21
78115: PUSH
78116: LD_INT 22
78118: PUSH
78119: LD_INT 23
78121: PUSH
78122: LD_INT 25
78124: PUSH
78125: LD_INT 26
78127: PUSH
78128: LD_INT 30
78130: PUSH
78131: LD_INT 31
78133: PUSH
78134: LD_INT 32
78136: PUSH
78137: LD_INT 33
78139: PUSH
78140: LD_INT 34
78142: PUSH
78143: EMPTY
78144: LIST
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: LIST
78157: LIST
78158: LIST
78159: LIST
78160: LIST
78161: LIST
78162: LIST
78163: PUSH
78164: LD_INT 101
78166: PUSH
78167: LD_INT 102
78169: PUSH
78170: LD_INT 103
78172: PUSH
78173: LD_INT 106
78175: PUSH
78176: LD_INT 108
78178: PUSH
78179: LD_INT 112
78181: PUSH
78182: LD_INT 113
78184: PUSH
78185: LD_INT 114
78187: PUSH
78188: LD_INT 116
78190: PUSH
78191: LD_INT 117
78193: PUSH
78194: LD_INT 118
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: LIST
78201: LIST
78202: LIST
78203: LIST
78204: LIST
78205: LIST
78206: LIST
78207: LIST
78208: LIST
78209: PUSH
78210: EMPTY
78211: LIST
78212: LIST
78213: ST_TO_ADDR
78214: GO 78845
78216: LD_INT 17
78218: DOUBLE
78219: EQUAL
78220: IFTRUE 78224
78222: GO 78448
78224: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
78225: LD_ADDR_VAR 0 2
78229: PUSH
78230: LD_INT 1
78232: PUSH
78233: LD_INT 2
78235: PUSH
78236: LD_INT 3
78238: PUSH
78239: LD_INT 4
78241: PUSH
78242: LD_INT 5
78244: PUSH
78245: LD_INT 6
78247: PUSH
78248: LD_INT 7
78250: PUSH
78251: LD_INT 8
78253: PUSH
78254: LD_INT 9
78256: PUSH
78257: LD_INT 10
78259: PUSH
78260: LD_INT 11
78262: PUSH
78263: LD_INT 12
78265: PUSH
78266: LD_INT 13
78268: PUSH
78269: LD_INT 14
78271: PUSH
78272: LD_INT 15
78274: PUSH
78275: LD_INT 16
78277: PUSH
78278: LD_INT 17
78280: PUSH
78281: LD_INT 18
78283: PUSH
78284: LD_INT 19
78286: PUSH
78287: LD_INT 20
78289: PUSH
78290: LD_INT 21
78292: PUSH
78293: LD_INT 22
78295: PUSH
78296: LD_INT 23
78298: PUSH
78299: LD_INT 24
78301: PUSH
78302: LD_INT 25
78304: PUSH
78305: LD_INT 26
78307: PUSH
78308: LD_INT 27
78310: PUSH
78311: LD_INT 28
78313: PUSH
78314: LD_INT 29
78316: PUSH
78317: LD_INT 30
78319: PUSH
78320: LD_INT 31
78322: PUSH
78323: LD_INT 32
78325: PUSH
78326: LD_INT 33
78328: PUSH
78329: LD_INT 34
78331: PUSH
78332: LD_INT 36
78334: PUSH
78335: EMPTY
78336: LIST
78337: LIST
78338: LIST
78339: LIST
78340: LIST
78341: LIST
78342: LIST
78343: LIST
78344: LIST
78345: LIST
78346: LIST
78347: LIST
78348: LIST
78349: LIST
78350: LIST
78351: LIST
78352: LIST
78353: LIST
78354: LIST
78355: LIST
78356: LIST
78357: LIST
78358: LIST
78359: LIST
78360: LIST
78361: LIST
78362: LIST
78363: LIST
78364: LIST
78365: LIST
78366: LIST
78367: LIST
78368: LIST
78369: LIST
78370: LIST
78371: PUSH
78372: LD_INT 101
78374: PUSH
78375: LD_INT 102
78377: PUSH
78378: LD_INT 103
78380: PUSH
78381: LD_INT 104
78383: PUSH
78384: LD_INT 105
78386: PUSH
78387: LD_INT 106
78389: PUSH
78390: LD_INT 107
78392: PUSH
78393: LD_INT 108
78395: PUSH
78396: LD_INT 109
78398: PUSH
78399: LD_INT 110
78401: PUSH
78402: LD_INT 111
78404: PUSH
78405: LD_INT 112
78407: PUSH
78408: LD_INT 113
78410: PUSH
78411: LD_INT 114
78413: PUSH
78414: LD_INT 116
78416: PUSH
78417: LD_INT 117
78419: PUSH
78420: LD_INT 118
78422: PUSH
78423: EMPTY
78424: LIST
78425: LIST
78426: LIST
78427: LIST
78428: LIST
78429: LIST
78430: LIST
78431: LIST
78432: LIST
78433: LIST
78434: LIST
78435: LIST
78436: LIST
78437: LIST
78438: LIST
78439: LIST
78440: LIST
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: ST_TO_ADDR
78446: GO 78845
78448: LD_INT 18
78450: DOUBLE
78451: EQUAL
78452: IFTRUE 78456
78454: GO 78604
78456: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
78457: LD_ADDR_VAR 0 2
78461: PUSH
78462: LD_INT 2
78464: PUSH
78465: LD_INT 4
78467: PUSH
78468: LD_INT 5
78470: PUSH
78471: LD_INT 7
78473: PUSH
78474: LD_INT 11
78476: PUSH
78477: LD_INT 12
78479: PUSH
78480: LD_INT 15
78482: PUSH
78483: LD_INT 16
78485: PUSH
78486: LD_INT 20
78488: PUSH
78489: LD_INT 21
78491: PUSH
78492: LD_INT 22
78494: PUSH
78495: LD_INT 23
78497: PUSH
78498: LD_INT 25
78500: PUSH
78501: LD_INT 26
78503: PUSH
78504: LD_INT 30
78506: PUSH
78507: LD_INT 31
78509: PUSH
78510: LD_INT 32
78512: PUSH
78513: LD_INT 33
78515: PUSH
78516: LD_INT 34
78518: PUSH
78519: LD_INT 35
78521: PUSH
78522: LD_INT 36
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: LIST
78529: LIST
78530: LIST
78531: LIST
78532: LIST
78533: LIST
78534: LIST
78535: LIST
78536: LIST
78537: LIST
78538: LIST
78539: LIST
78540: LIST
78541: LIST
78542: LIST
78543: LIST
78544: LIST
78545: LIST
78546: LIST
78547: PUSH
78548: LD_INT 101
78550: PUSH
78551: LD_INT 102
78553: PUSH
78554: LD_INT 103
78556: PUSH
78557: LD_INT 106
78559: PUSH
78560: LD_INT 108
78562: PUSH
78563: LD_INT 112
78565: PUSH
78566: LD_INT 113
78568: PUSH
78569: LD_INT 114
78571: PUSH
78572: LD_INT 115
78574: PUSH
78575: LD_INT 116
78577: PUSH
78578: LD_INT 117
78580: PUSH
78581: LD_INT 118
78583: PUSH
78584: EMPTY
78585: LIST
78586: LIST
78587: LIST
78588: LIST
78589: LIST
78590: LIST
78591: LIST
78592: LIST
78593: LIST
78594: LIST
78595: LIST
78596: LIST
78597: PUSH
78598: EMPTY
78599: LIST
78600: LIST
78601: ST_TO_ADDR
78602: GO 78845
78604: LD_INT 19
78606: DOUBLE
78607: EQUAL
78608: IFTRUE 78612
78610: GO 78844
78612: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
78613: LD_ADDR_VAR 0 2
78617: PUSH
78618: LD_INT 1
78620: PUSH
78621: LD_INT 2
78623: PUSH
78624: LD_INT 3
78626: PUSH
78627: LD_INT 4
78629: PUSH
78630: LD_INT 5
78632: PUSH
78633: LD_INT 6
78635: PUSH
78636: LD_INT 7
78638: PUSH
78639: LD_INT 8
78641: PUSH
78642: LD_INT 9
78644: PUSH
78645: LD_INT 10
78647: PUSH
78648: LD_INT 11
78650: PUSH
78651: LD_INT 12
78653: PUSH
78654: LD_INT 13
78656: PUSH
78657: LD_INT 14
78659: PUSH
78660: LD_INT 15
78662: PUSH
78663: LD_INT 16
78665: PUSH
78666: LD_INT 17
78668: PUSH
78669: LD_INT 18
78671: PUSH
78672: LD_INT 19
78674: PUSH
78675: LD_INT 20
78677: PUSH
78678: LD_INT 21
78680: PUSH
78681: LD_INT 22
78683: PUSH
78684: LD_INT 23
78686: PUSH
78687: LD_INT 24
78689: PUSH
78690: LD_INT 25
78692: PUSH
78693: LD_INT 26
78695: PUSH
78696: LD_INT 27
78698: PUSH
78699: LD_INT 28
78701: PUSH
78702: LD_INT 29
78704: PUSH
78705: LD_INT 30
78707: PUSH
78708: LD_INT 31
78710: PUSH
78711: LD_INT 32
78713: PUSH
78714: LD_INT 33
78716: PUSH
78717: LD_INT 34
78719: PUSH
78720: LD_INT 35
78722: PUSH
78723: LD_INT 36
78725: PUSH
78726: EMPTY
78727: LIST
78728: LIST
78729: LIST
78730: LIST
78731: LIST
78732: LIST
78733: LIST
78734: LIST
78735: LIST
78736: LIST
78737: LIST
78738: LIST
78739: LIST
78740: LIST
78741: LIST
78742: LIST
78743: LIST
78744: LIST
78745: LIST
78746: LIST
78747: LIST
78748: LIST
78749: LIST
78750: LIST
78751: LIST
78752: LIST
78753: LIST
78754: LIST
78755: LIST
78756: LIST
78757: LIST
78758: LIST
78759: LIST
78760: LIST
78761: LIST
78762: LIST
78763: PUSH
78764: LD_INT 101
78766: PUSH
78767: LD_INT 102
78769: PUSH
78770: LD_INT 103
78772: PUSH
78773: LD_INT 104
78775: PUSH
78776: LD_INT 105
78778: PUSH
78779: LD_INT 106
78781: PUSH
78782: LD_INT 107
78784: PUSH
78785: LD_INT 108
78787: PUSH
78788: LD_INT 109
78790: PUSH
78791: LD_INT 110
78793: PUSH
78794: LD_INT 111
78796: PUSH
78797: LD_INT 112
78799: PUSH
78800: LD_INT 113
78802: PUSH
78803: LD_INT 114
78805: PUSH
78806: LD_INT 115
78808: PUSH
78809: LD_INT 116
78811: PUSH
78812: LD_INT 117
78814: PUSH
78815: LD_INT 118
78817: PUSH
78818: EMPTY
78819: LIST
78820: LIST
78821: LIST
78822: LIST
78823: LIST
78824: LIST
78825: LIST
78826: LIST
78827: LIST
78828: LIST
78829: LIST
78830: LIST
78831: LIST
78832: LIST
78833: LIST
78834: LIST
78835: LIST
78836: LIST
78837: PUSH
78838: EMPTY
78839: LIST
78840: LIST
78841: ST_TO_ADDR
78842: GO 78845
78844: POP
// end else
78845: GO 79076
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
78847: LD_ADDR_VAR 0 2
78851: PUSH
78852: LD_INT 1
78854: PUSH
78855: LD_INT 2
78857: PUSH
78858: LD_INT 3
78860: PUSH
78861: LD_INT 4
78863: PUSH
78864: LD_INT 5
78866: PUSH
78867: LD_INT 6
78869: PUSH
78870: LD_INT 7
78872: PUSH
78873: LD_INT 8
78875: PUSH
78876: LD_INT 9
78878: PUSH
78879: LD_INT 10
78881: PUSH
78882: LD_INT 11
78884: PUSH
78885: LD_INT 12
78887: PUSH
78888: LD_INT 13
78890: PUSH
78891: LD_INT 14
78893: PUSH
78894: LD_INT 15
78896: PUSH
78897: LD_INT 16
78899: PUSH
78900: LD_INT 17
78902: PUSH
78903: LD_INT 18
78905: PUSH
78906: LD_INT 19
78908: PUSH
78909: LD_INT 20
78911: PUSH
78912: LD_INT 21
78914: PUSH
78915: LD_INT 22
78917: PUSH
78918: LD_INT 23
78920: PUSH
78921: LD_INT 24
78923: PUSH
78924: LD_INT 25
78926: PUSH
78927: LD_INT 26
78929: PUSH
78930: LD_INT 27
78932: PUSH
78933: LD_INT 28
78935: PUSH
78936: LD_INT 29
78938: PUSH
78939: LD_INT 30
78941: PUSH
78942: LD_INT 31
78944: PUSH
78945: LD_INT 32
78947: PUSH
78948: LD_INT 33
78950: PUSH
78951: LD_INT 34
78953: PUSH
78954: LD_INT 35
78956: PUSH
78957: LD_INT 36
78959: PUSH
78960: EMPTY
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: LIST
78966: LIST
78967: LIST
78968: LIST
78969: LIST
78970: LIST
78971: LIST
78972: LIST
78973: LIST
78974: LIST
78975: LIST
78976: LIST
78977: LIST
78978: LIST
78979: LIST
78980: LIST
78981: LIST
78982: LIST
78983: LIST
78984: LIST
78985: LIST
78986: LIST
78987: LIST
78988: LIST
78989: LIST
78990: LIST
78991: LIST
78992: LIST
78993: LIST
78994: LIST
78995: LIST
78996: LIST
78997: PUSH
78998: LD_INT 101
79000: PUSH
79001: LD_INT 102
79003: PUSH
79004: LD_INT 103
79006: PUSH
79007: LD_INT 104
79009: PUSH
79010: LD_INT 105
79012: PUSH
79013: LD_INT 106
79015: PUSH
79016: LD_INT 107
79018: PUSH
79019: LD_INT 108
79021: PUSH
79022: LD_INT 109
79024: PUSH
79025: LD_INT 110
79027: PUSH
79028: LD_INT 111
79030: PUSH
79031: LD_INT 112
79033: PUSH
79034: LD_INT 113
79036: PUSH
79037: LD_INT 114
79039: PUSH
79040: LD_INT 115
79042: PUSH
79043: LD_INT 116
79045: PUSH
79046: LD_INT 117
79048: PUSH
79049: LD_INT 118
79051: PUSH
79052: EMPTY
79053: LIST
79054: LIST
79055: LIST
79056: LIST
79057: LIST
79058: LIST
79059: LIST
79060: LIST
79061: LIST
79062: LIST
79063: LIST
79064: LIST
79065: LIST
79066: LIST
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: PUSH
79072: EMPTY
79073: LIST
79074: LIST
79075: ST_TO_ADDR
// if result then
79076: LD_VAR 0 2
79080: IFFALSE 79866
// begin normal :=  ;
79082: LD_ADDR_VAR 0 5
79086: PUSH
79087: LD_STRING 
79089: ST_TO_ADDR
// hardcore :=  ;
79090: LD_ADDR_VAR 0 6
79094: PUSH
79095: LD_STRING 
79097: ST_TO_ADDR
// active :=  ;
79098: LD_ADDR_VAR 0 7
79102: PUSH
79103: LD_STRING 
79105: ST_TO_ADDR
// for i = 1 to normalCounter do
79106: LD_ADDR_VAR 0 8
79110: PUSH
79111: DOUBLE
79112: LD_INT 1
79114: DEC
79115: ST_TO_ADDR
79116: LD_EXP 76
79120: PUSH
79121: FOR_TO
79122: IFFALSE 79223
// begin tmp := 0 ;
79124: LD_ADDR_VAR 0 3
79128: PUSH
79129: LD_STRING 0
79131: ST_TO_ADDR
// if result [ 1 ] then
79132: LD_VAR 0 2
79136: PUSH
79137: LD_INT 1
79139: ARRAY
79140: IFFALSE 79205
// if result [ 1 ] [ 1 ] = i then
79142: LD_VAR 0 2
79146: PUSH
79147: LD_INT 1
79149: ARRAY
79150: PUSH
79151: LD_INT 1
79153: ARRAY
79154: PUSH
79155: LD_VAR 0 8
79159: EQUAL
79160: IFFALSE 79205
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
79162: LD_ADDR_VAR 0 2
79166: PUSH
79167: LD_VAR 0 2
79171: PPUSH
79172: LD_INT 1
79174: PPUSH
79175: LD_VAR 0 2
79179: PUSH
79180: LD_INT 1
79182: ARRAY
79183: PPUSH
79184: LD_INT 1
79186: PPUSH
79187: CALL_OW 3
79191: PPUSH
79192: CALL_OW 1
79196: ST_TO_ADDR
// tmp := 1 ;
79197: LD_ADDR_VAR 0 3
79201: PUSH
79202: LD_STRING 1
79204: ST_TO_ADDR
// end ; normal := normal & tmp ;
79205: LD_ADDR_VAR 0 5
79209: PUSH
79210: LD_VAR 0 5
79214: PUSH
79215: LD_VAR 0 3
79219: STR
79220: ST_TO_ADDR
// end ;
79221: GO 79121
79223: POP
79224: POP
// for i = 1 to hardcoreCounter do
79225: LD_ADDR_VAR 0 8
79229: PUSH
79230: DOUBLE
79231: LD_INT 1
79233: DEC
79234: ST_TO_ADDR
79235: LD_EXP 77
79239: PUSH
79240: FOR_TO
79241: IFFALSE 79346
// begin tmp := 0 ;
79243: LD_ADDR_VAR 0 3
79247: PUSH
79248: LD_STRING 0
79250: ST_TO_ADDR
// if result [ 2 ] then
79251: LD_VAR 0 2
79255: PUSH
79256: LD_INT 2
79258: ARRAY
79259: IFFALSE 79328
// if result [ 2 ] [ 1 ] = 100 + i then
79261: LD_VAR 0 2
79265: PUSH
79266: LD_INT 2
79268: ARRAY
79269: PUSH
79270: LD_INT 1
79272: ARRAY
79273: PUSH
79274: LD_INT 100
79276: PUSH
79277: LD_VAR 0 8
79281: PLUS
79282: EQUAL
79283: IFFALSE 79328
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
79285: LD_ADDR_VAR 0 2
79289: PUSH
79290: LD_VAR 0 2
79294: PPUSH
79295: LD_INT 2
79297: PPUSH
79298: LD_VAR 0 2
79302: PUSH
79303: LD_INT 2
79305: ARRAY
79306: PPUSH
79307: LD_INT 1
79309: PPUSH
79310: CALL_OW 3
79314: PPUSH
79315: CALL_OW 1
79319: ST_TO_ADDR
// tmp := 1 ;
79320: LD_ADDR_VAR 0 3
79324: PUSH
79325: LD_STRING 1
79327: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
79328: LD_ADDR_VAR 0 6
79332: PUSH
79333: LD_VAR 0 6
79337: PUSH
79338: LD_VAR 0 3
79342: STR
79343: ST_TO_ADDR
// end ;
79344: GO 79240
79346: POP
79347: POP
// if isGameLoad then
79348: LD_VAR 0 1
79352: IFFALSE 79827
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
79354: LD_ADDR_VAR 0 4
79358: PUSH
79359: LD_EXP 80
79363: PUSH
79364: LD_EXP 79
79368: PUSH
79369: LD_EXP 81
79373: PUSH
79374: LD_EXP 78
79378: PUSH
79379: LD_EXP 82
79383: PUSH
79384: LD_EXP 83
79388: PUSH
79389: LD_EXP 84
79393: PUSH
79394: LD_EXP 85
79398: PUSH
79399: LD_EXP 86
79403: PUSH
79404: LD_EXP 87
79408: PUSH
79409: LD_EXP 88
79413: PUSH
79414: LD_EXP 89
79418: PUSH
79419: LD_EXP 90
79423: PUSH
79424: LD_EXP 91
79428: PUSH
79429: LD_EXP 99
79433: PUSH
79434: LD_EXP 100
79438: PUSH
79439: LD_EXP 101
79443: PUSH
79444: LD_EXP 102
79448: PUSH
79449: LD_EXP 104
79453: PUSH
79454: LD_EXP 105
79458: PUSH
79459: LD_EXP 106
79463: PUSH
79464: LD_EXP 109
79468: PUSH
79469: LD_EXP 111
79473: PUSH
79474: LD_EXP 112
79478: PUSH
79479: LD_EXP 113
79483: PUSH
79484: LD_EXP 115
79488: PUSH
79489: LD_EXP 116
79493: PUSH
79494: LD_EXP 119
79498: PUSH
79499: LD_EXP 120
79503: PUSH
79504: LD_EXP 121
79508: PUSH
79509: LD_EXP 122
79513: PUSH
79514: LD_EXP 123
79518: PUSH
79519: LD_EXP 124
79523: PUSH
79524: LD_EXP 125
79528: PUSH
79529: LD_EXP 126
79533: PUSH
79534: LD_EXP 127
79538: PUSH
79539: LD_EXP 92
79543: PUSH
79544: LD_EXP 93
79548: PUSH
79549: LD_EXP 96
79553: PUSH
79554: LD_EXP 97
79558: PUSH
79559: LD_EXP 98
79563: PUSH
79564: LD_EXP 94
79568: PUSH
79569: LD_EXP 95
79573: PUSH
79574: LD_EXP 103
79578: PUSH
79579: LD_EXP 107
79583: PUSH
79584: LD_EXP 108
79588: PUSH
79589: LD_EXP 110
79593: PUSH
79594: LD_EXP 114
79598: PUSH
79599: LD_EXP 117
79603: PUSH
79604: LD_EXP 118
79608: PUSH
79609: LD_EXP 128
79613: PUSH
79614: LD_EXP 129
79618: PUSH
79619: LD_EXP 130
79623: PUSH
79624: LD_EXP 131
79628: PUSH
79629: EMPTY
79630: LIST
79631: LIST
79632: LIST
79633: LIST
79634: LIST
79635: LIST
79636: LIST
79637: LIST
79638: LIST
79639: LIST
79640: LIST
79641: LIST
79642: LIST
79643: LIST
79644: LIST
79645: LIST
79646: LIST
79647: LIST
79648: LIST
79649: LIST
79650: LIST
79651: LIST
79652: LIST
79653: LIST
79654: LIST
79655: LIST
79656: LIST
79657: LIST
79658: LIST
79659: LIST
79660: LIST
79661: LIST
79662: LIST
79663: LIST
79664: LIST
79665: LIST
79666: LIST
79667: LIST
79668: LIST
79669: LIST
79670: LIST
79671: LIST
79672: LIST
79673: LIST
79674: LIST
79675: LIST
79676: LIST
79677: LIST
79678: LIST
79679: LIST
79680: LIST
79681: LIST
79682: LIST
79683: LIST
79684: ST_TO_ADDR
// tmp :=  ;
79685: LD_ADDR_VAR 0 3
79689: PUSH
79690: LD_STRING 
79692: ST_TO_ADDR
// for i = 1 to normalCounter do
79693: LD_ADDR_VAR 0 8
79697: PUSH
79698: DOUBLE
79699: LD_INT 1
79701: DEC
79702: ST_TO_ADDR
79703: LD_EXP 76
79707: PUSH
79708: FOR_TO
79709: IFFALSE 79745
// begin if flags [ i ] then
79711: LD_VAR 0 4
79715: PUSH
79716: LD_VAR 0 8
79720: ARRAY
79721: IFFALSE 79743
// tmp := tmp & i & ; ;
79723: LD_ADDR_VAR 0 3
79727: PUSH
79728: LD_VAR 0 3
79732: PUSH
79733: LD_VAR 0 8
79737: STR
79738: PUSH
79739: LD_STRING ;
79741: STR
79742: ST_TO_ADDR
// end ;
79743: GO 79708
79745: POP
79746: POP
// for i = 1 to hardcoreCounter do
79747: LD_ADDR_VAR 0 8
79751: PUSH
79752: DOUBLE
79753: LD_INT 1
79755: DEC
79756: ST_TO_ADDR
79757: LD_EXP 77
79761: PUSH
79762: FOR_TO
79763: IFFALSE 79809
// begin if flags [ normalCounter + i ] then
79765: LD_VAR 0 4
79769: PUSH
79770: LD_EXP 76
79774: PUSH
79775: LD_VAR 0 8
79779: PLUS
79780: ARRAY
79781: IFFALSE 79807
// tmp := tmp & ( 100 + i ) & ; ;
79783: LD_ADDR_VAR 0 3
79787: PUSH
79788: LD_VAR 0 3
79792: PUSH
79793: LD_INT 100
79795: PUSH
79796: LD_VAR 0 8
79800: PLUS
79801: STR
79802: PUSH
79803: LD_STRING ;
79805: STR
79806: ST_TO_ADDR
// end ;
79807: GO 79762
79809: POP
79810: POP
// if tmp then
79811: LD_VAR 0 3
79815: IFFALSE 79827
// active := tmp ;
79817: LD_ADDR_VAR 0 7
79821: PUSH
79822: LD_VAR 0 3
79826: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
79827: LD_STRING getStreamItemsFromMission("
79829: PUSH
79830: LD_VAR 0 5
79834: STR
79835: PUSH
79836: LD_STRING ","
79838: STR
79839: PUSH
79840: LD_VAR 0 6
79844: STR
79845: PUSH
79846: LD_STRING ","
79848: STR
79849: PUSH
79850: LD_VAR 0 7
79854: STR
79855: PUSH
79856: LD_STRING ")
79858: STR
79859: PPUSH
79860: CALL_OW 559
// end else
79864: GO 79873
// ToLua ( getStreamItemsFromMission("","","") ) ;
79866: LD_STRING getStreamItemsFromMission("","","")
79868: PPUSH
79869: CALL_OW 559
// end ;
79873: LD_VAR 0 2
79877: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
79878: LD_EXP 75
79882: IFFALSE 79890
79884: PUSH
79885: LD_EXP 80
79889: AND
79890: IFFALSE 80014
79892: GO 79894
79894: DISABLE
79895: LD_INT 0
79897: PPUSH
79898: PPUSH
// begin enable ;
79899: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
79900: LD_ADDR_VAR 0 2
79904: PUSH
79905: LD_INT 22
79907: PUSH
79908: LD_OWVAR 2
79912: PUSH
79913: EMPTY
79914: LIST
79915: LIST
79916: PUSH
79917: LD_INT 2
79919: PUSH
79920: LD_INT 34
79922: PUSH
79923: LD_INT 7
79925: PUSH
79926: EMPTY
79927: LIST
79928: LIST
79929: PUSH
79930: LD_INT 34
79932: PUSH
79933: LD_INT 45
79935: PUSH
79936: EMPTY
79937: LIST
79938: LIST
79939: PUSH
79940: LD_INT 34
79942: PUSH
79943: LD_INT 28
79945: PUSH
79946: EMPTY
79947: LIST
79948: LIST
79949: PUSH
79950: LD_INT 34
79952: PUSH
79953: LD_INT 47
79955: PUSH
79956: EMPTY
79957: LIST
79958: LIST
79959: PUSH
79960: EMPTY
79961: LIST
79962: LIST
79963: LIST
79964: LIST
79965: LIST
79966: PUSH
79967: EMPTY
79968: LIST
79969: LIST
79970: PPUSH
79971: CALL_OW 69
79975: ST_TO_ADDR
// if not tmp then
79976: LD_VAR 0 2
79980: NOT
79981: IFFALSE 79985
// exit ;
79983: GO 80014
// for i in tmp do
79985: LD_ADDR_VAR 0 1
79989: PUSH
79990: LD_VAR 0 2
79994: PUSH
79995: FOR_IN
79996: IFFALSE 80012
// begin SetLives ( i , 0 ) ;
79998: LD_VAR 0 1
80002: PPUSH
80003: LD_INT 0
80005: PPUSH
80006: CALL_OW 234
// end ;
80010: GO 79995
80012: POP
80013: POP
// end ;
80014: PPOPN 2
80016: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
80017: LD_EXP 75
80021: IFFALSE 80029
80023: PUSH
80024: LD_EXP 81
80028: AND
80029: IFFALSE 80113
80031: GO 80033
80033: DISABLE
80034: LD_INT 0
80036: PPUSH
80037: PPUSH
// begin enable ;
80038: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
80039: LD_ADDR_VAR 0 2
80043: PUSH
80044: LD_INT 22
80046: PUSH
80047: LD_OWVAR 2
80051: PUSH
80052: EMPTY
80053: LIST
80054: LIST
80055: PUSH
80056: LD_INT 32
80058: PUSH
80059: LD_INT 3
80061: PUSH
80062: EMPTY
80063: LIST
80064: LIST
80065: PUSH
80066: EMPTY
80067: LIST
80068: LIST
80069: PPUSH
80070: CALL_OW 69
80074: ST_TO_ADDR
// if not tmp then
80075: LD_VAR 0 2
80079: NOT
80080: IFFALSE 80084
// exit ;
80082: GO 80113
// for i in tmp do
80084: LD_ADDR_VAR 0 1
80088: PUSH
80089: LD_VAR 0 2
80093: PUSH
80094: FOR_IN
80095: IFFALSE 80111
// begin SetLives ( i , 0 ) ;
80097: LD_VAR 0 1
80101: PPUSH
80102: LD_INT 0
80104: PPUSH
80105: CALL_OW 234
// end ;
80109: GO 80094
80111: POP
80112: POP
// end ;
80113: PPOPN 2
80115: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
80116: LD_EXP 75
80120: IFFALSE 80128
80122: PUSH
80123: LD_EXP 78
80127: AND
80128: IFFALSE 80221
80130: GO 80132
80132: DISABLE
80133: LD_INT 0
80135: PPUSH
// begin enable ;
80136: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
80137: LD_ADDR_VAR 0 1
80141: PUSH
80142: LD_INT 22
80144: PUSH
80145: LD_OWVAR 2
80149: PUSH
80150: EMPTY
80151: LIST
80152: LIST
80153: PUSH
80154: LD_INT 2
80156: PUSH
80157: LD_INT 25
80159: PUSH
80160: LD_INT 5
80162: PUSH
80163: EMPTY
80164: LIST
80165: LIST
80166: PUSH
80167: LD_INT 25
80169: PUSH
80170: LD_INT 9
80172: PUSH
80173: EMPTY
80174: LIST
80175: LIST
80176: PUSH
80177: LD_INT 25
80179: PUSH
80180: LD_INT 8
80182: PUSH
80183: EMPTY
80184: LIST
80185: LIST
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: LIST
80191: LIST
80192: PUSH
80193: EMPTY
80194: LIST
80195: LIST
80196: PPUSH
80197: CALL_OW 69
80201: PUSH
80202: FOR_IN
80203: IFFALSE 80219
// begin SetClass ( i , 1 ) ;
80205: LD_VAR 0 1
80209: PPUSH
80210: LD_INT 1
80212: PPUSH
80213: CALL_OW 336
// end ;
80217: GO 80202
80219: POP
80220: POP
// end ;
80221: PPOPN 1
80223: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
80224: LD_EXP 75
80228: IFFALSE 80236
80230: PUSH
80231: LD_EXP 79
80235: AND
80236: IFFALSE 80248
80238: PUSH
80239: LD_OWVAR 65
80243: PUSH
80244: LD_INT 7
80246: LESS
80247: AND
80248: IFFALSE 80262
80250: GO 80252
80252: DISABLE
// begin enable ;
80253: ENABLE
// game_speed := 7 ;
80254: LD_ADDR_OWVAR 65
80258: PUSH
80259: LD_INT 7
80261: ST_TO_ADDR
// end ;
80262: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
80263: LD_EXP 75
80267: IFFALSE 80275
80269: PUSH
80270: LD_EXP 82
80274: AND
80275: IFFALSE 80477
80277: GO 80279
80279: DISABLE
80280: LD_INT 0
80282: PPUSH
80283: PPUSH
80284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80285: LD_ADDR_VAR 0 3
80289: PUSH
80290: LD_INT 81
80292: PUSH
80293: LD_OWVAR 2
80297: PUSH
80298: EMPTY
80299: LIST
80300: LIST
80301: PUSH
80302: LD_INT 21
80304: PUSH
80305: LD_INT 1
80307: PUSH
80308: EMPTY
80309: LIST
80310: LIST
80311: PUSH
80312: EMPTY
80313: LIST
80314: LIST
80315: PPUSH
80316: CALL_OW 69
80320: ST_TO_ADDR
// if not tmp then
80321: LD_VAR 0 3
80325: NOT
80326: IFFALSE 80330
// exit ;
80328: GO 80477
// if tmp > 5 then
80330: LD_VAR 0 3
80334: PUSH
80335: LD_INT 5
80337: GREATER
80338: IFFALSE 80350
// k := 5 else
80340: LD_ADDR_VAR 0 2
80344: PUSH
80345: LD_INT 5
80347: ST_TO_ADDR
80348: GO 80360
// k := tmp ;
80350: LD_ADDR_VAR 0 2
80354: PUSH
80355: LD_VAR 0 3
80359: ST_TO_ADDR
// for i := 1 to k do
80360: LD_ADDR_VAR 0 1
80364: PUSH
80365: DOUBLE
80366: LD_INT 1
80368: DEC
80369: ST_TO_ADDR
80370: LD_VAR 0 2
80374: PUSH
80375: FOR_TO
80376: IFFALSE 80475
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
80378: LD_VAR 0 3
80382: PUSH
80383: LD_VAR 0 1
80387: ARRAY
80388: PPUSH
80389: LD_VAR 0 1
80393: PUSH
80394: LD_INT 4
80396: MOD
80397: PUSH
80398: LD_INT 1
80400: PLUS
80401: PPUSH
80402: CALL_OW 259
80406: PUSH
80407: LD_INT 10
80409: LESS
80410: IFFALSE 80473
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
80412: LD_VAR 0 3
80416: PUSH
80417: LD_VAR 0 1
80421: ARRAY
80422: PPUSH
80423: LD_VAR 0 1
80427: PUSH
80428: LD_INT 4
80430: MOD
80431: PUSH
80432: LD_INT 1
80434: PLUS
80435: PPUSH
80436: LD_VAR 0 3
80440: PUSH
80441: LD_VAR 0 1
80445: ARRAY
80446: PPUSH
80447: LD_VAR 0 1
80451: PUSH
80452: LD_INT 4
80454: MOD
80455: PUSH
80456: LD_INT 1
80458: PLUS
80459: PPUSH
80460: CALL_OW 259
80464: PUSH
80465: LD_INT 1
80467: PLUS
80468: PPUSH
80469: CALL_OW 237
80473: GO 80375
80475: POP
80476: POP
// end ;
80477: PPOPN 3
80479: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
80480: LD_EXP 75
80484: IFFALSE 80492
80486: PUSH
80487: LD_EXP 83
80491: AND
80492: IFFALSE 80512
80494: GO 80496
80496: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
80497: LD_INT 4
80499: PPUSH
80500: LD_OWVAR 2
80504: PPUSH
80505: LD_INT 0
80507: PPUSH
80508: CALL_OW 324
80512: END
// every 0 0$1 trigger StreamModeActive and sShovel do
80513: LD_EXP 75
80517: IFFALSE 80525
80519: PUSH
80520: LD_EXP 112
80524: AND
80525: IFFALSE 80545
80527: GO 80529
80529: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
80530: LD_INT 19
80532: PPUSH
80533: LD_OWVAR 2
80537: PPUSH
80538: LD_INT 0
80540: PPUSH
80541: CALL_OW 324
80545: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
80546: LD_EXP 75
80550: IFFALSE 80558
80552: PUSH
80553: LD_EXP 84
80557: AND
80558: IFFALSE 80660
80560: GO 80562
80562: DISABLE
80563: LD_INT 0
80565: PPUSH
80566: PPUSH
// begin enable ;
80567: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
80568: LD_ADDR_VAR 0 2
80572: PUSH
80573: LD_INT 22
80575: PUSH
80576: LD_OWVAR 2
80580: PUSH
80581: EMPTY
80582: LIST
80583: LIST
80584: PUSH
80585: LD_INT 2
80587: PUSH
80588: LD_INT 34
80590: PUSH
80591: LD_INT 11
80593: PUSH
80594: EMPTY
80595: LIST
80596: LIST
80597: PUSH
80598: LD_INT 34
80600: PUSH
80601: LD_INT 30
80603: PUSH
80604: EMPTY
80605: LIST
80606: LIST
80607: PUSH
80608: EMPTY
80609: LIST
80610: LIST
80611: LIST
80612: PUSH
80613: EMPTY
80614: LIST
80615: LIST
80616: PPUSH
80617: CALL_OW 69
80621: ST_TO_ADDR
// if not tmp then
80622: LD_VAR 0 2
80626: NOT
80627: IFFALSE 80631
// exit ;
80629: GO 80660
// for i in tmp do
80631: LD_ADDR_VAR 0 1
80635: PUSH
80636: LD_VAR 0 2
80640: PUSH
80641: FOR_IN
80642: IFFALSE 80658
// begin SetLives ( i , 0 ) ;
80644: LD_VAR 0 1
80648: PPUSH
80649: LD_INT 0
80651: PPUSH
80652: CALL_OW 234
// end ;
80656: GO 80641
80658: POP
80659: POP
// end ;
80660: PPOPN 2
80662: END
// every 0 0$1 trigger StreamModeActive and sBunker do
80663: LD_EXP 75
80667: IFFALSE 80675
80669: PUSH
80670: LD_EXP 85
80674: AND
80675: IFFALSE 80695
80677: GO 80679
80679: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
80680: LD_INT 32
80682: PPUSH
80683: LD_OWVAR 2
80687: PPUSH
80688: LD_INT 0
80690: PPUSH
80691: CALL_OW 324
80695: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
80696: LD_EXP 75
80700: IFFALSE 80708
80702: PUSH
80703: LD_EXP 86
80707: AND
80708: IFFALSE 80891
80710: GO 80712
80712: DISABLE
80713: LD_INT 0
80715: PPUSH
80716: PPUSH
80717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
80718: LD_ADDR_VAR 0 2
80722: PUSH
80723: LD_INT 22
80725: PUSH
80726: LD_OWVAR 2
80730: PUSH
80731: EMPTY
80732: LIST
80733: LIST
80734: PUSH
80735: LD_INT 33
80737: PUSH
80738: LD_INT 3
80740: PUSH
80741: EMPTY
80742: LIST
80743: LIST
80744: PUSH
80745: EMPTY
80746: LIST
80747: LIST
80748: PPUSH
80749: CALL_OW 69
80753: ST_TO_ADDR
// if not tmp then
80754: LD_VAR 0 2
80758: NOT
80759: IFFALSE 80763
// exit ;
80761: GO 80891
// side := 0 ;
80763: LD_ADDR_VAR 0 3
80767: PUSH
80768: LD_INT 0
80770: ST_TO_ADDR
// for i := 1 to 8 do
80771: LD_ADDR_VAR 0 1
80775: PUSH
80776: DOUBLE
80777: LD_INT 1
80779: DEC
80780: ST_TO_ADDR
80781: LD_INT 8
80783: PUSH
80784: FOR_TO
80785: IFFALSE 80835
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
80787: LD_OWVAR 2
80791: PUSH
80792: LD_VAR 0 1
80796: NONEQUAL
80797: IFFALSE 80819
80799: PUSH
80800: LD_OWVAR 2
80804: PPUSH
80805: LD_VAR 0 1
80809: PPUSH
80810: CALL_OW 81
80814: PUSH
80815: LD_INT 2
80817: EQUAL
80818: AND
80819: IFFALSE 80833
// begin side := i ;
80821: LD_ADDR_VAR 0 3
80825: PUSH
80826: LD_VAR 0 1
80830: ST_TO_ADDR
// break ;
80831: GO 80835
// end ;
80833: GO 80784
80835: POP
80836: POP
// if not side then
80837: LD_VAR 0 3
80841: NOT
80842: IFFALSE 80846
// exit ;
80844: GO 80891
// for i := 1 to tmp do
80846: LD_ADDR_VAR 0 1
80850: PUSH
80851: DOUBLE
80852: LD_INT 1
80854: DEC
80855: ST_TO_ADDR
80856: LD_VAR 0 2
80860: PUSH
80861: FOR_TO
80862: IFFALSE 80889
// if Prob ( 60 ) then
80864: LD_INT 60
80866: PPUSH
80867: CALL_OW 13
80871: IFFALSE 80887
// SetSide ( i , side ) ;
80873: LD_VAR 0 1
80877: PPUSH
80878: LD_VAR 0 3
80882: PPUSH
80883: CALL_OW 235
80887: GO 80861
80889: POP
80890: POP
// end ;
80891: PPOPN 3
80893: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
80894: LD_EXP 75
80898: IFFALSE 80906
80900: PUSH
80901: LD_EXP 88
80905: AND
80906: IFFALSE 81025
80908: GO 80910
80910: DISABLE
80911: LD_INT 0
80913: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
80914: LD_ADDR_VAR 0 1
80918: PUSH
80919: LD_INT 22
80921: PUSH
80922: LD_OWVAR 2
80926: PUSH
80927: EMPTY
80928: LIST
80929: LIST
80930: PUSH
80931: LD_INT 21
80933: PUSH
80934: LD_INT 1
80936: PUSH
80937: EMPTY
80938: LIST
80939: LIST
80940: PUSH
80941: LD_INT 3
80943: PUSH
80944: LD_INT 23
80946: PUSH
80947: LD_INT 0
80949: PUSH
80950: EMPTY
80951: LIST
80952: LIST
80953: PUSH
80954: EMPTY
80955: LIST
80956: LIST
80957: PUSH
80958: EMPTY
80959: LIST
80960: LIST
80961: LIST
80962: PPUSH
80963: CALL_OW 69
80967: PUSH
80968: FOR_IN
80969: IFFALSE 81023
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
80971: LD_VAR 0 1
80975: PPUSH
80976: CALL_OW 257
80980: PUSH
80981: LD_INT 1
80983: PUSH
80984: LD_INT 2
80986: PUSH
80987: LD_INT 3
80989: PUSH
80990: LD_INT 4
80992: PUSH
80993: EMPTY
80994: LIST
80995: LIST
80996: LIST
80997: LIST
80998: IN
80999: IFFALSE 81021
// SetClass ( un , rand ( 1 , 4 ) ) ;
81001: LD_VAR 0 1
81005: PPUSH
81006: LD_INT 1
81008: PPUSH
81009: LD_INT 4
81011: PPUSH
81012: CALL_OW 12
81016: PPUSH
81017: CALL_OW 336
81021: GO 80968
81023: POP
81024: POP
// end ;
81025: PPOPN 1
81027: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
81028: LD_EXP 75
81032: IFFALSE 81040
81034: PUSH
81035: LD_EXP 87
81039: AND
81040: IFFALSE 81119
81042: GO 81044
81044: DISABLE
81045: LD_INT 0
81047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
81048: LD_ADDR_VAR 0 1
81052: PUSH
81053: LD_INT 22
81055: PUSH
81056: LD_OWVAR 2
81060: PUSH
81061: EMPTY
81062: LIST
81063: LIST
81064: PUSH
81065: LD_INT 21
81067: PUSH
81068: LD_INT 3
81070: PUSH
81071: EMPTY
81072: LIST
81073: LIST
81074: PUSH
81075: EMPTY
81076: LIST
81077: LIST
81078: PPUSH
81079: CALL_OW 69
81083: ST_TO_ADDR
// if not tmp then
81084: LD_VAR 0 1
81088: NOT
81089: IFFALSE 81093
// exit ;
81091: GO 81119
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
81093: LD_VAR 0 1
81097: PUSH
81098: LD_INT 1
81100: PPUSH
81101: LD_VAR 0 1
81105: PPUSH
81106: CALL_OW 12
81110: ARRAY
81111: PPUSH
81112: LD_INT 100
81114: PPUSH
81115: CALL_OW 234
// end ;
81119: PPOPN 1
81121: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
81122: LD_EXP 75
81126: IFFALSE 81134
81128: PUSH
81129: LD_EXP 89
81133: AND
81134: IFFALSE 81232
81136: GO 81138
81138: DISABLE
81139: LD_INT 0
81141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81142: LD_ADDR_VAR 0 1
81146: PUSH
81147: LD_INT 22
81149: PUSH
81150: LD_OWVAR 2
81154: PUSH
81155: EMPTY
81156: LIST
81157: LIST
81158: PUSH
81159: LD_INT 21
81161: PUSH
81162: LD_INT 1
81164: PUSH
81165: EMPTY
81166: LIST
81167: LIST
81168: PUSH
81169: EMPTY
81170: LIST
81171: LIST
81172: PPUSH
81173: CALL_OW 69
81177: ST_TO_ADDR
// if not tmp then
81178: LD_VAR 0 1
81182: NOT
81183: IFFALSE 81187
// exit ;
81185: GO 81232
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
81187: LD_VAR 0 1
81191: PUSH
81192: LD_INT 1
81194: PPUSH
81195: LD_VAR 0 1
81199: PPUSH
81200: CALL_OW 12
81204: ARRAY
81205: PPUSH
81206: LD_INT 1
81208: PPUSH
81209: LD_INT 4
81211: PPUSH
81212: CALL_OW 12
81216: PPUSH
81217: LD_INT 3000
81219: PPUSH
81220: LD_INT 9000
81222: PPUSH
81223: CALL_OW 12
81227: PPUSH
81228: CALL_OW 492
// end ;
81232: PPOPN 1
81234: END
// every 0 0$1 trigger StreamModeActive and sDepot do
81235: LD_EXP 75
81239: IFFALSE 81247
81241: PUSH
81242: LD_EXP 90
81246: AND
81247: IFFALSE 81267
81249: GO 81251
81251: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
81252: LD_INT 1
81254: PPUSH
81255: LD_OWVAR 2
81259: PPUSH
81260: LD_INT 0
81262: PPUSH
81263: CALL_OW 324
81267: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
81268: LD_EXP 75
81272: IFFALSE 81280
81274: PUSH
81275: LD_EXP 91
81279: AND
81280: IFFALSE 81363
81282: GO 81284
81284: DISABLE
81285: LD_INT 0
81287: PPUSH
81288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
81289: LD_ADDR_VAR 0 2
81293: PUSH
81294: LD_INT 22
81296: PUSH
81297: LD_OWVAR 2
81301: PUSH
81302: EMPTY
81303: LIST
81304: LIST
81305: PUSH
81306: LD_INT 21
81308: PUSH
81309: LD_INT 3
81311: PUSH
81312: EMPTY
81313: LIST
81314: LIST
81315: PUSH
81316: EMPTY
81317: LIST
81318: LIST
81319: PPUSH
81320: CALL_OW 69
81324: ST_TO_ADDR
// if not tmp then
81325: LD_VAR 0 2
81329: NOT
81330: IFFALSE 81334
// exit ;
81332: GO 81363
// for i in tmp do
81334: LD_ADDR_VAR 0 1
81338: PUSH
81339: LD_VAR 0 2
81343: PUSH
81344: FOR_IN
81345: IFFALSE 81361
// SetBLevel ( i , 10 ) ;
81347: LD_VAR 0 1
81351: PPUSH
81352: LD_INT 10
81354: PPUSH
81355: CALL_OW 241
81359: GO 81344
81361: POP
81362: POP
// end ;
81363: PPOPN 2
81365: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
81366: LD_EXP 75
81370: IFFALSE 81378
81372: PUSH
81373: LD_EXP 92
81377: AND
81378: IFFALSE 81489
81380: GO 81382
81382: DISABLE
81383: LD_INT 0
81385: PPUSH
81386: PPUSH
81387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81388: LD_ADDR_VAR 0 3
81392: PUSH
81393: LD_INT 22
81395: PUSH
81396: LD_OWVAR 2
81400: PUSH
81401: EMPTY
81402: LIST
81403: LIST
81404: PUSH
81405: LD_INT 25
81407: PUSH
81408: LD_INT 1
81410: PUSH
81411: EMPTY
81412: LIST
81413: LIST
81414: PUSH
81415: EMPTY
81416: LIST
81417: LIST
81418: PPUSH
81419: CALL_OW 69
81423: ST_TO_ADDR
// if not tmp then
81424: LD_VAR 0 3
81428: NOT
81429: IFFALSE 81433
// exit ;
81431: GO 81489
// un := tmp [ rand ( 1 , tmp ) ] ;
81433: LD_ADDR_VAR 0 2
81437: PUSH
81438: LD_VAR 0 3
81442: PUSH
81443: LD_INT 1
81445: PPUSH
81446: LD_VAR 0 3
81450: PPUSH
81451: CALL_OW 12
81455: ARRAY
81456: ST_TO_ADDR
// if Crawls ( un ) then
81457: LD_VAR 0 2
81461: PPUSH
81462: CALL_OW 318
81466: IFFALSE 81477
// ComWalk ( un ) ;
81468: LD_VAR 0 2
81472: PPUSH
81473: CALL_OW 138
// SetClass ( un , class_sniper ) ;
81477: LD_VAR 0 2
81481: PPUSH
81482: LD_INT 5
81484: PPUSH
81485: CALL_OW 336
// end ;
81489: PPOPN 3
81491: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
81492: LD_EXP 75
81496: IFFALSE 81504
81498: PUSH
81499: LD_EXP 93
81503: AND
81504: IFFALSE 81516
81506: PUSH
81507: LD_OWVAR 67
81511: PUSH
81512: LD_INT 4
81514: LESS
81515: AND
81516: IFFALSE 81535
81518: GO 81520
81520: DISABLE
// begin Difficulty := Difficulty + 1 ;
81521: LD_ADDR_OWVAR 67
81525: PUSH
81526: LD_OWVAR 67
81530: PUSH
81531: LD_INT 1
81533: PLUS
81534: ST_TO_ADDR
// end ;
81535: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
81536: LD_EXP 75
81540: IFFALSE 81548
81542: PUSH
81543: LD_EXP 94
81547: AND
81548: IFFALSE 81651
81550: GO 81552
81552: DISABLE
81553: LD_INT 0
81555: PPUSH
// begin for i := 1 to 5 do
81556: LD_ADDR_VAR 0 1
81560: PUSH
81561: DOUBLE
81562: LD_INT 1
81564: DEC
81565: ST_TO_ADDR
81566: LD_INT 5
81568: PUSH
81569: FOR_TO
81570: IFFALSE 81649
// begin uc_nation := nation_nature ;
81572: LD_ADDR_OWVAR 21
81576: PUSH
81577: LD_INT 0
81579: ST_TO_ADDR
// uc_side := 0 ;
81580: LD_ADDR_OWVAR 20
81584: PUSH
81585: LD_INT 0
81587: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
81588: LD_ADDR_OWVAR 29
81592: PUSH
81593: LD_INT 12
81595: PUSH
81596: LD_INT 12
81598: PUSH
81599: EMPTY
81600: LIST
81601: LIST
81602: ST_TO_ADDR
// hc_agressivity := 20 ;
81603: LD_ADDR_OWVAR 35
81607: PUSH
81608: LD_INT 20
81610: ST_TO_ADDR
// hc_class := class_tiger ;
81611: LD_ADDR_OWVAR 28
81615: PUSH
81616: LD_INT 14
81618: ST_TO_ADDR
// hc_gallery :=  ;
81619: LD_ADDR_OWVAR 33
81623: PUSH
81624: LD_STRING 
81626: ST_TO_ADDR
// hc_name :=  ;
81627: LD_ADDR_OWVAR 26
81631: PUSH
81632: LD_STRING 
81634: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
81635: CALL_OW 44
81639: PPUSH
81640: LD_INT 0
81642: PPUSH
81643: CALL_OW 51
// end ;
81647: GO 81569
81649: POP
81650: POP
// end ;
81651: PPOPN 1
81653: END
// every 0 0$1 trigger StreamModeActive and sBomb do
81654: LD_EXP 75
81658: IFFALSE 81666
81660: PUSH
81661: LD_EXP 95
81665: AND
81666: IFFALSE 81675
81668: GO 81670
81670: DISABLE
// StreamSibBomb ;
81671: CALL 81676 0 0
81675: END
// export function StreamSibBomb ; var i , x , y ; begin
81676: LD_INT 0
81678: PPUSH
81679: PPUSH
81680: PPUSH
81681: PPUSH
// result := false ;
81682: LD_ADDR_VAR 0 1
81686: PUSH
81687: LD_INT 0
81689: ST_TO_ADDR
// for i := 1 to 16 do
81690: LD_ADDR_VAR 0 2
81694: PUSH
81695: DOUBLE
81696: LD_INT 1
81698: DEC
81699: ST_TO_ADDR
81700: LD_INT 16
81702: PUSH
81703: FOR_TO
81704: IFFALSE 81903
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
81706: LD_ADDR_VAR 0 3
81710: PUSH
81711: LD_INT 10
81713: PUSH
81714: LD_INT 20
81716: PUSH
81717: LD_INT 30
81719: PUSH
81720: LD_INT 40
81722: PUSH
81723: LD_INT 50
81725: PUSH
81726: LD_INT 60
81728: PUSH
81729: LD_INT 70
81731: PUSH
81732: LD_INT 80
81734: PUSH
81735: LD_INT 90
81737: PUSH
81738: LD_INT 100
81740: PUSH
81741: LD_INT 110
81743: PUSH
81744: LD_INT 120
81746: PUSH
81747: LD_INT 130
81749: PUSH
81750: LD_INT 140
81752: PUSH
81753: LD_INT 150
81755: PUSH
81756: EMPTY
81757: LIST
81758: LIST
81759: LIST
81760: LIST
81761: LIST
81762: LIST
81763: LIST
81764: LIST
81765: LIST
81766: LIST
81767: LIST
81768: LIST
81769: LIST
81770: LIST
81771: LIST
81772: PUSH
81773: LD_INT 1
81775: PPUSH
81776: LD_INT 15
81778: PPUSH
81779: CALL_OW 12
81783: ARRAY
81784: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
81785: LD_ADDR_VAR 0 4
81789: PUSH
81790: LD_INT 10
81792: PUSH
81793: LD_INT 20
81795: PUSH
81796: LD_INT 30
81798: PUSH
81799: LD_INT 40
81801: PUSH
81802: LD_INT 50
81804: PUSH
81805: LD_INT 60
81807: PUSH
81808: LD_INT 70
81810: PUSH
81811: LD_INT 80
81813: PUSH
81814: LD_INT 90
81816: PUSH
81817: LD_INT 100
81819: PUSH
81820: LD_INT 110
81822: PUSH
81823: LD_INT 120
81825: PUSH
81826: LD_INT 130
81828: PUSH
81829: LD_INT 140
81831: PUSH
81832: LD_INT 150
81834: PUSH
81835: EMPTY
81836: LIST
81837: LIST
81838: LIST
81839: LIST
81840: LIST
81841: LIST
81842: LIST
81843: LIST
81844: LIST
81845: LIST
81846: LIST
81847: LIST
81848: LIST
81849: LIST
81850: LIST
81851: PUSH
81852: LD_INT 1
81854: PPUSH
81855: LD_INT 15
81857: PPUSH
81858: CALL_OW 12
81862: ARRAY
81863: ST_TO_ADDR
// if ValidHex ( x , y ) then
81864: LD_VAR 0 3
81868: PPUSH
81869: LD_VAR 0 4
81873: PPUSH
81874: CALL_OW 488
81878: IFFALSE 81901
// begin result := [ x , y ] ;
81880: LD_ADDR_VAR 0 1
81884: PUSH
81885: LD_VAR 0 3
81889: PUSH
81890: LD_VAR 0 4
81894: PUSH
81895: EMPTY
81896: LIST
81897: LIST
81898: ST_TO_ADDR
// break ;
81899: GO 81903
// end ; end ;
81901: GO 81703
81903: POP
81904: POP
// if result then
81905: LD_VAR 0 1
81909: IFFALSE 81969
// begin ToLua ( playSibBomb() ) ;
81911: LD_STRING playSibBomb()
81913: PPUSH
81914: CALL_OW 559
// wait ( 0 0$14 ) ;
81918: LD_INT 490
81920: PPUSH
81921: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
81925: LD_VAR 0 1
81929: PUSH
81930: LD_INT 1
81932: ARRAY
81933: PPUSH
81934: LD_VAR 0 1
81938: PUSH
81939: LD_INT 2
81941: ARRAY
81942: PPUSH
81943: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
81947: LD_VAR 0 1
81951: PUSH
81952: LD_INT 1
81954: ARRAY
81955: PPUSH
81956: LD_VAR 0 1
81960: PUSH
81961: LD_INT 2
81963: ARRAY
81964: PPUSH
81965: CALL_OW 429
// end ; end ;
81969: LD_VAR 0 1
81973: RET
// every 0 0$1 trigger StreamModeActive and sReset do
81974: LD_EXP 75
81978: IFFALSE 81986
81980: PUSH
81981: LD_EXP 97
81985: AND
81986: IFFALSE 81998
81988: GO 81990
81990: DISABLE
// YouLost (  ) ;
81991: LD_STRING 
81993: PPUSH
81994: CALL_OW 104
81998: END
// every 0 0$1 trigger StreamModeActive and sFog do
81999: LD_EXP 75
82003: IFFALSE 82011
82005: PUSH
82006: LD_EXP 96
82010: AND
82011: IFFALSE 82025
82013: GO 82015
82015: DISABLE
// FogOff ( your_side ) ;
82016: LD_OWVAR 2
82020: PPUSH
82021: CALL_OW 344
82025: END
// every 0 0$1 trigger StreamModeActive and sSun do
82026: LD_EXP 75
82030: IFFALSE 82038
82032: PUSH
82033: LD_EXP 98
82037: AND
82038: IFFALSE 82066
82040: GO 82042
82042: DISABLE
// begin solar_recharge_percent := 0 ;
82043: LD_ADDR_OWVAR 79
82047: PUSH
82048: LD_INT 0
82050: ST_TO_ADDR
// wait ( 5 5$00 ) ;
82051: LD_INT 10500
82053: PPUSH
82054: CALL_OW 67
// solar_recharge_percent := 100 ;
82058: LD_ADDR_OWVAR 79
82062: PUSH
82063: LD_INT 100
82065: ST_TO_ADDR
// end ;
82066: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
82067: LD_EXP 75
82071: IFFALSE 82079
82073: PUSH
82074: LD_EXP 99
82078: AND
82079: IFFALSE 82318
82081: GO 82083
82083: DISABLE
82084: LD_INT 0
82086: PPUSH
82087: PPUSH
82088: PPUSH
// begin tmp := [ ] ;
82089: LD_ADDR_VAR 0 3
82093: PUSH
82094: EMPTY
82095: ST_TO_ADDR
// for i := 1 to 6 do
82096: LD_ADDR_VAR 0 1
82100: PUSH
82101: DOUBLE
82102: LD_INT 1
82104: DEC
82105: ST_TO_ADDR
82106: LD_INT 6
82108: PUSH
82109: FOR_TO
82110: IFFALSE 82215
// begin uc_nation := nation_nature ;
82112: LD_ADDR_OWVAR 21
82116: PUSH
82117: LD_INT 0
82119: ST_TO_ADDR
// uc_side := 0 ;
82120: LD_ADDR_OWVAR 20
82124: PUSH
82125: LD_INT 0
82127: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
82128: LD_ADDR_OWVAR 29
82132: PUSH
82133: LD_INT 12
82135: PUSH
82136: LD_INT 12
82138: PUSH
82139: EMPTY
82140: LIST
82141: LIST
82142: ST_TO_ADDR
// hc_agressivity := 20 ;
82143: LD_ADDR_OWVAR 35
82147: PUSH
82148: LD_INT 20
82150: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
82151: LD_ADDR_OWVAR 28
82155: PUSH
82156: LD_INT 17
82158: ST_TO_ADDR
// hc_gallery :=  ;
82159: LD_ADDR_OWVAR 33
82163: PUSH
82164: LD_STRING 
82166: ST_TO_ADDR
// hc_name :=  ;
82167: LD_ADDR_OWVAR 26
82171: PUSH
82172: LD_STRING 
82174: ST_TO_ADDR
// un := CreateHuman ;
82175: LD_ADDR_VAR 0 2
82179: PUSH
82180: CALL_OW 44
82184: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
82185: LD_VAR 0 2
82189: PPUSH
82190: LD_INT 1
82192: PPUSH
82193: CALL_OW 51
// tmp := tmp ^ un ;
82197: LD_ADDR_VAR 0 3
82201: PUSH
82202: LD_VAR 0 3
82206: PUSH
82207: LD_VAR 0 2
82211: ADD
82212: ST_TO_ADDR
// end ;
82213: GO 82109
82215: POP
82216: POP
// repeat wait ( 0 0$1 ) ;
82217: LD_INT 35
82219: PPUSH
82220: CALL_OW 67
// for un in tmp do
82224: LD_ADDR_VAR 0 2
82228: PUSH
82229: LD_VAR 0 3
82233: PUSH
82234: FOR_IN
82235: IFFALSE 82309
// begin if IsDead ( un ) then
82237: LD_VAR 0 2
82241: PPUSH
82242: CALL_OW 301
82246: IFFALSE 82266
// begin tmp := tmp diff un ;
82248: LD_ADDR_VAR 0 3
82252: PUSH
82253: LD_VAR 0 3
82257: PUSH
82258: LD_VAR 0 2
82262: DIFF
82263: ST_TO_ADDR
// continue ;
82264: GO 82234
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
82266: LD_VAR 0 2
82270: PPUSH
82271: LD_INT 3
82273: PUSH
82274: LD_INT 22
82276: PUSH
82277: LD_INT 0
82279: PUSH
82280: EMPTY
82281: LIST
82282: LIST
82283: PUSH
82284: EMPTY
82285: LIST
82286: LIST
82287: PPUSH
82288: CALL_OW 69
82292: PPUSH
82293: LD_VAR 0 2
82297: PPUSH
82298: CALL_OW 74
82302: PPUSH
82303: CALL_OW 115
// end ;
82307: GO 82234
82309: POP
82310: POP
// until not tmp ;
82311: LD_VAR 0 3
82315: NOT
82316: IFFALSE 82217
// end ;
82318: PPOPN 3
82320: END
// every 0 0$1 trigger StreamModeActive and sTroll do
82321: LD_EXP 75
82325: IFFALSE 82333
82327: PUSH
82328: LD_EXP 100
82332: AND
82333: IFFALSE 82387
82335: GO 82337
82337: DISABLE
// begin ToLua ( displayTroll(); ) ;
82338: LD_STRING displayTroll();
82340: PPUSH
82341: CALL_OW 559
// wait ( 3 3$00 ) ;
82345: LD_INT 6300
82347: PPUSH
82348: CALL_OW 67
// ToLua ( hideTroll(); ) ;
82352: LD_STRING hideTroll();
82354: PPUSH
82355: CALL_OW 559
// wait ( 1 1$00 ) ;
82359: LD_INT 2100
82361: PPUSH
82362: CALL_OW 67
// ToLua ( displayTroll(); ) ;
82366: LD_STRING displayTroll();
82368: PPUSH
82369: CALL_OW 559
// wait ( 1 1$00 ) ;
82373: LD_INT 2100
82375: PPUSH
82376: CALL_OW 67
// ToLua ( hideTroll(); ) ;
82380: LD_STRING hideTroll();
82382: PPUSH
82383: CALL_OW 559
// end ;
82387: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
82388: LD_EXP 75
82392: IFFALSE 82400
82394: PUSH
82395: LD_EXP 101
82399: AND
82400: IFFALSE 82463
82402: GO 82404
82404: DISABLE
82405: LD_INT 0
82407: PPUSH
// begin p := 0 ;
82408: LD_ADDR_VAR 0 1
82412: PUSH
82413: LD_INT 0
82415: ST_TO_ADDR
// repeat game_speed := 1 ;
82416: LD_ADDR_OWVAR 65
82420: PUSH
82421: LD_INT 1
82423: ST_TO_ADDR
// wait ( 0 0$1 ) ;
82424: LD_INT 35
82426: PPUSH
82427: CALL_OW 67
// p := p + 1 ;
82431: LD_ADDR_VAR 0 1
82435: PUSH
82436: LD_VAR 0 1
82440: PUSH
82441: LD_INT 1
82443: PLUS
82444: ST_TO_ADDR
// until p >= 60 ;
82445: LD_VAR 0 1
82449: PUSH
82450: LD_INT 60
82452: GREATEREQUAL
82453: IFFALSE 82416
// game_speed := 4 ;
82455: LD_ADDR_OWVAR 65
82459: PUSH
82460: LD_INT 4
82462: ST_TO_ADDR
// end ;
82463: PPOPN 1
82465: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
82466: LD_EXP 75
82470: IFFALSE 82478
82472: PUSH
82473: LD_EXP 102
82477: AND
82478: IFFALSE 82624
82480: GO 82482
82482: DISABLE
82483: LD_INT 0
82485: PPUSH
82486: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
82487: LD_ADDR_VAR 0 1
82491: PUSH
82492: LD_INT 22
82494: PUSH
82495: LD_OWVAR 2
82499: PUSH
82500: EMPTY
82501: LIST
82502: LIST
82503: PUSH
82504: LD_INT 2
82506: PUSH
82507: LD_INT 30
82509: PUSH
82510: LD_INT 0
82512: PUSH
82513: EMPTY
82514: LIST
82515: LIST
82516: PUSH
82517: LD_INT 30
82519: PUSH
82520: LD_INT 1
82522: PUSH
82523: EMPTY
82524: LIST
82525: LIST
82526: PUSH
82527: EMPTY
82528: LIST
82529: LIST
82530: LIST
82531: PUSH
82532: EMPTY
82533: LIST
82534: LIST
82535: PPUSH
82536: CALL_OW 69
82540: ST_TO_ADDR
// if not depot then
82541: LD_VAR 0 1
82545: NOT
82546: IFFALSE 82550
// exit ;
82548: GO 82624
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
82550: LD_ADDR_VAR 0 2
82554: PUSH
82555: LD_VAR 0 1
82559: PUSH
82560: LD_INT 1
82562: PPUSH
82563: LD_VAR 0 1
82567: PPUSH
82568: CALL_OW 12
82572: ARRAY
82573: PPUSH
82574: CALL_OW 274
82578: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
82579: LD_VAR 0 2
82583: PPUSH
82584: LD_INT 1
82586: PPUSH
82587: LD_INT 0
82589: PPUSH
82590: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
82594: LD_VAR 0 2
82598: PPUSH
82599: LD_INT 2
82601: PPUSH
82602: LD_INT 0
82604: PPUSH
82605: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
82609: LD_VAR 0 2
82613: PPUSH
82614: LD_INT 3
82616: PPUSH
82617: LD_INT 0
82619: PPUSH
82620: CALL_OW 277
// end ;
82624: PPOPN 2
82626: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
82627: LD_EXP 75
82631: IFFALSE 82639
82633: PUSH
82634: LD_EXP 103
82638: AND
82639: IFFALSE 82736
82641: GO 82643
82643: DISABLE
82644: LD_INT 0
82646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82647: LD_ADDR_VAR 0 1
82651: PUSH
82652: LD_INT 22
82654: PUSH
82655: LD_OWVAR 2
82659: PUSH
82660: EMPTY
82661: LIST
82662: LIST
82663: PUSH
82664: LD_INT 21
82666: PUSH
82667: LD_INT 1
82669: PUSH
82670: EMPTY
82671: LIST
82672: LIST
82673: PUSH
82674: LD_INT 3
82676: PUSH
82677: LD_INT 23
82679: PUSH
82680: LD_INT 0
82682: PUSH
82683: EMPTY
82684: LIST
82685: LIST
82686: PUSH
82687: EMPTY
82688: LIST
82689: LIST
82690: PUSH
82691: EMPTY
82692: LIST
82693: LIST
82694: LIST
82695: PPUSH
82696: CALL_OW 69
82700: ST_TO_ADDR
// if not tmp then
82701: LD_VAR 0 1
82705: NOT
82706: IFFALSE 82710
// exit ;
82708: GO 82736
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
82710: LD_VAR 0 1
82714: PUSH
82715: LD_INT 1
82717: PPUSH
82718: LD_VAR 0 1
82722: PPUSH
82723: CALL_OW 12
82727: ARRAY
82728: PPUSH
82729: LD_INT 200
82731: PPUSH
82732: CALL_OW 234
// end ;
82736: PPOPN 1
82738: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
82739: LD_EXP 75
82743: IFFALSE 82751
82745: PUSH
82746: LD_EXP 104
82750: AND
82751: IFFALSE 82830
82753: GO 82755
82755: DISABLE
82756: LD_INT 0
82758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
82759: LD_ADDR_VAR 0 1
82763: PUSH
82764: LD_INT 22
82766: PUSH
82767: LD_OWVAR 2
82771: PUSH
82772: EMPTY
82773: LIST
82774: LIST
82775: PUSH
82776: LD_INT 21
82778: PUSH
82779: LD_INT 2
82781: PUSH
82782: EMPTY
82783: LIST
82784: LIST
82785: PUSH
82786: EMPTY
82787: LIST
82788: LIST
82789: PPUSH
82790: CALL_OW 69
82794: ST_TO_ADDR
// if not tmp then
82795: LD_VAR 0 1
82799: NOT
82800: IFFALSE 82804
// exit ;
82802: GO 82830
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
82804: LD_VAR 0 1
82808: PUSH
82809: LD_INT 1
82811: PPUSH
82812: LD_VAR 0 1
82816: PPUSH
82817: CALL_OW 12
82821: ARRAY
82822: PPUSH
82823: LD_INT 60
82825: PPUSH
82826: CALL_OW 234
// end ;
82830: PPOPN 1
82832: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
82833: LD_EXP 75
82837: IFFALSE 82845
82839: PUSH
82840: LD_EXP 105
82844: AND
82845: IFFALSE 82944
82847: GO 82849
82849: DISABLE
82850: LD_INT 0
82852: PPUSH
82853: PPUSH
// begin enable ;
82854: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
82855: LD_ADDR_VAR 0 1
82859: PUSH
82860: LD_INT 22
82862: PUSH
82863: LD_OWVAR 2
82867: PUSH
82868: EMPTY
82869: LIST
82870: LIST
82871: PUSH
82872: LD_INT 61
82874: PUSH
82875: EMPTY
82876: LIST
82877: PUSH
82878: LD_INT 33
82880: PUSH
82881: LD_INT 2
82883: PUSH
82884: EMPTY
82885: LIST
82886: LIST
82887: PUSH
82888: EMPTY
82889: LIST
82890: LIST
82891: LIST
82892: PPUSH
82893: CALL_OW 69
82897: ST_TO_ADDR
// if not tmp then
82898: LD_VAR 0 1
82902: NOT
82903: IFFALSE 82907
// exit ;
82905: GO 82944
// for i in tmp do
82907: LD_ADDR_VAR 0 2
82911: PUSH
82912: LD_VAR 0 1
82916: PUSH
82917: FOR_IN
82918: IFFALSE 82942
// if IsControledBy ( i ) then
82920: LD_VAR 0 2
82924: PPUSH
82925: CALL_OW 312
82929: IFFALSE 82940
// ComUnlink ( i ) ;
82931: LD_VAR 0 2
82935: PPUSH
82936: CALL_OW 136
82940: GO 82917
82942: POP
82943: POP
// end ;
82944: PPOPN 2
82946: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
82947: LD_EXP 75
82951: IFFALSE 82959
82953: PUSH
82954: LD_EXP 106
82958: AND
82959: IFFALSE 83099
82961: GO 82963
82963: DISABLE
82964: LD_INT 0
82966: PPUSH
82967: PPUSH
// begin ToLua ( displayPowell(); ) ;
82968: LD_STRING displayPowell();
82970: PPUSH
82971: CALL_OW 559
// uc_side := 0 ;
82975: LD_ADDR_OWVAR 20
82979: PUSH
82980: LD_INT 0
82982: ST_TO_ADDR
// uc_nation := 2 ;
82983: LD_ADDR_OWVAR 21
82987: PUSH
82988: LD_INT 2
82990: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
82991: LD_ADDR_OWVAR 37
82995: PUSH
82996: LD_INT 14
82998: ST_TO_ADDR
// vc_engine := engine_siberite ;
82999: LD_ADDR_OWVAR 39
83003: PUSH
83004: LD_INT 3
83006: ST_TO_ADDR
// vc_control := control_apeman ;
83007: LD_ADDR_OWVAR 38
83011: PUSH
83012: LD_INT 5
83014: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
83015: LD_ADDR_OWVAR 40
83019: PUSH
83020: LD_INT 29
83022: ST_TO_ADDR
// un := CreateVehicle ;
83023: LD_ADDR_VAR 0 2
83027: PUSH
83028: CALL_OW 45
83032: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83033: LD_VAR 0 2
83037: PPUSH
83038: LD_INT 1
83040: PPUSH
83041: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
83045: LD_INT 35
83047: PPUSH
83048: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
83052: LD_VAR 0 2
83056: PPUSH
83057: LD_INT 22
83059: PUSH
83060: LD_OWVAR 2
83064: PUSH
83065: EMPTY
83066: LIST
83067: LIST
83068: PPUSH
83069: CALL_OW 69
83073: PPUSH
83074: LD_VAR 0 2
83078: PPUSH
83079: CALL_OW 74
83083: PPUSH
83084: CALL_OW 115
// until IsDead ( un ) ;
83088: LD_VAR 0 2
83092: PPUSH
83093: CALL_OW 301
83097: IFFALSE 83045
// end ;
83099: PPOPN 2
83101: END
// every 0 0$1 trigger StreamModeActive and sStu do
83102: LD_EXP 75
83106: IFFALSE 83114
83108: PUSH
83109: LD_EXP 114
83113: AND
83114: IFFALSE 83130
83116: GO 83118
83118: DISABLE
// begin ToLua ( displayStucuk(); ) ;
83119: LD_STRING displayStucuk();
83121: PPUSH
83122: CALL_OW 559
// ResetFog ;
83126: CALL_OW 335
// end ;
83130: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
83131: LD_EXP 75
83135: IFFALSE 83143
83137: PUSH
83138: LD_EXP 107
83142: AND
83143: IFFALSE 83284
83145: GO 83147
83147: DISABLE
83148: LD_INT 0
83150: PPUSH
83151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
83152: LD_ADDR_VAR 0 2
83156: PUSH
83157: LD_INT 22
83159: PUSH
83160: LD_OWVAR 2
83164: PUSH
83165: EMPTY
83166: LIST
83167: LIST
83168: PUSH
83169: LD_INT 21
83171: PUSH
83172: LD_INT 1
83174: PUSH
83175: EMPTY
83176: LIST
83177: LIST
83178: PUSH
83179: EMPTY
83180: LIST
83181: LIST
83182: PPUSH
83183: CALL_OW 69
83187: ST_TO_ADDR
// if not tmp then
83188: LD_VAR 0 2
83192: NOT
83193: IFFALSE 83197
// exit ;
83195: GO 83284
// un := tmp [ rand ( 1 , tmp ) ] ;
83197: LD_ADDR_VAR 0 1
83201: PUSH
83202: LD_VAR 0 2
83206: PUSH
83207: LD_INT 1
83209: PPUSH
83210: LD_VAR 0 2
83214: PPUSH
83215: CALL_OW 12
83219: ARRAY
83220: ST_TO_ADDR
// SetSide ( un , 0 ) ;
83221: LD_VAR 0 1
83225: PPUSH
83226: LD_INT 0
83228: PPUSH
83229: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
83233: LD_VAR 0 1
83237: PPUSH
83238: LD_OWVAR 3
83242: PUSH
83243: LD_VAR 0 1
83247: DIFF
83248: PPUSH
83249: LD_VAR 0 1
83253: PPUSH
83254: CALL_OW 74
83258: PPUSH
83259: CALL_OW 115
// wait ( 0 0$20 ) ;
83263: LD_INT 700
83265: PPUSH
83266: CALL_OW 67
// SetSide ( un , your_side ) ;
83270: LD_VAR 0 1
83274: PPUSH
83275: LD_OWVAR 2
83279: PPUSH
83280: CALL_OW 235
// end ;
83284: PPOPN 2
83286: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
83287: LD_EXP 75
83291: IFFALSE 83299
83293: PUSH
83294: LD_EXP 108
83298: AND
83299: IFFALSE 83405
83301: GO 83303
83303: DISABLE
83304: LD_INT 0
83306: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
83307: LD_ADDR_VAR 0 1
83311: PUSH
83312: LD_INT 22
83314: PUSH
83315: LD_OWVAR 2
83319: PUSH
83320: EMPTY
83321: LIST
83322: LIST
83323: PUSH
83324: LD_INT 2
83326: PUSH
83327: LD_INT 30
83329: PUSH
83330: LD_INT 0
83332: PUSH
83333: EMPTY
83334: LIST
83335: LIST
83336: PUSH
83337: LD_INT 30
83339: PUSH
83340: LD_INT 1
83342: PUSH
83343: EMPTY
83344: LIST
83345: LIST
83346: PUSH
83347: EMPTY
83348: LIST
83349: LIST
83350: LIST
83351: PUSH
83352: EMPTY
83353: LIST
83354: LIST
83355: PPUSH
83356: CALL_OW 69
83360: ST_TO_ADDR
// if not depot then
83361: LD_VAR 0 1
83365: NOT
83366: IFFALSE 83370
// exit ;
83368: GO 83405
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
83370: LD_VAR 0 1
83374: PUSH
83375: LD_INT 1
83377: ARRAY
83378: PPUSH
83379: CALL_OW 250
83383: PPUSH
83384: LD_VAR 0 1
83388: PUSH
83389: LD_INT 1
83391: ARRAY
83392: PPUSH
83393: CALL_OW 251
83397: PPUSH
83398: LD_INT 70
83400: PPUSH
83401: CALL_OW 495
// end ;
83405: PPOPN 1
83407: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
83408: LD_EXP 75
83412: IFFALSE 83420
83414: PUSH
83415: LD_EXP 109
83419: AND
83420: IFFALSE 83631
83422: GO 83424
83424: DISABLE
83425: LD_INT 0
83427: PPUSH
83428: PPUSH
83429: PPUSH
83430: PPUSH
83431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
83432: LD_ADDR_VAR 0 5
83436: PUSH
83437: LD_INT 22
83439: PUSH
83440: LD_OWVAR 2
83444: PUSH
83445: EMPTY
83446: LIST
83447: LIST
83448: PUSH
83449: LD_INT 21
83451: PUSH
83452: LD_INT 1
83454: PUSH
83455: EMPTY
83456: LIST
83457: LIST
83458: PUSH
83459: EMPTY
83460: LIST
83461: LIST
83462: PPUSH
83463: CALL_OW 69
83467: ST_TO_ADDR
// if not tmp then
83468: LD_VAR 0 5
83472: NOT
83473: IFFALSE 83477
// exit ;
83475: GO 83631
// for i in tmp do
83477: LD_ADDR_VAR 0 1
83481: PUSH
83482: LD_VAR 0 5
83486: PUSH
83487: FOR_IN
83488: IFFALSE 83629
// begin d := rand ( 0 , 5 ) ;
83490: LD_ADDR_VAR 0 4
83494: PUSH
83495: LD_INT 0
83497: PPUSH
83498: LD_INT 5
83500: PPUSH
83501: CALL_OW 12
83505: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
83506: LD_ADDR_VAR 0 2
83510: PUSH
83511: LD_VAR 0 1
83515: PPUSH
83516: CALL_OW 250
83520: PPUSH
83521: LD_VAR 0 4
83525: PPUSH
83526: LD_INT 3
83528: PPUSH
83529: LD_INT 12
83531: PPUSH
83532: CALL_OW 12
83536: PPUSH
83537: CALL_OW 272
83541: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
83542: LD_ADDR_VAR 0 3
83546: PUSH
83547: LD_VAR 0 1
83551: PPUSH
83552: CALL_OW 251
83556: PPUSH
83557: LD_VAR 0 4
83561: PPUSH
83562: LD_INT 3
83564: PPUSH
83565: LD_INT 12
83567: PPUSH
83568: CALL_OW 12
83572: PPUSH
83573: CALL_OW 273
83577: ST_TO_ADDR
// if ValidHex ( x , y ) then
83578: LD_VAR 0 2
83582: PPUSH
83583: LD_VAR 0 3
83587: PPUSH
83588: CALL_OW 488
83592: IFFALSE 83627
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
83594: LD_VAR 0 1
83598: PPUSH
83599: LD_VAR 0 2
83603: PPUSH
83604: LD_VAR 0 3
83608: PPUSH
83609: LD_INT 3
83611: PPUSH
83612: LD_INT 6
83614: PPUSH
83615: CALL_OW 12
83619: PPUSH
83620: LD_INT 1
83622: PPUSH
83623: CALL_OW 483
// end ;
83627: GO 83487
83629: POP
83630: POP
// end ;
83631: PPOPN 5
83633: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
83634: LD_EXP 75
83638: IFFALSE 83646
83640: PUSH
83641: LD_EXP 110
83645: AND
83646: IFFALSE 83740
83648: GO 83650
83650: DISABLE
83651: LD_INT 0
83653: PPUSH
83654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
83655: LD_ADDR_VAR 0 2
83659: PUSH
83660: LD_INT 22
83662: PUSH
83663: LD_OWVAR 2
83667: PUSH
83668: EMPTY
83669: LIST
83670: LIST
83671: PUSH
83672: LD_INT 32
83674: PUSH
83675: LD_INT 1
83677: PUSH
83678: EMPTY
83679: LIST
83680: LIST
83681: PUSH
83682: LD_INT 21
83684: PUSH
83685: LD_INT 2
83687: PUSH
83688: EMPTY
83689: LIST
83690: LIST
83691: PUSH
83692: EMPTY
83693: LIST
83694: LIST
83695: LIST
83696: PPUSH
83697: CALL_OW 69
83701: ST_TO_ADDR
// if not tmp then
83702: LD_VAR 0 2
83706: NOT
83707: IFFALSE 83711
// exit ;
83709: GO 83740
// for i in tmp do
83711: LD_ADDR_VAR 0 1
83715: PUSH
83716: LD_VAR 0 2
83720: PUSH
83721: FOR_IN
83722: IFFALSE 83738
// SetFuel ( i , 0 ) ;
83724: LD_VAR 0 1
83728: PPUSH
83729: LD_INT 0
83731: PPUSH
83732: CALL_OW 240
83736: GO 83721
83738: POP
83739: POP
// end ;
83740: PPOPN 2
83742: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
83743: LD_EXP 75
83747: IFFALSE 83755
83749: PUSH
83750: LD_EXP 111
83754: AND
83755: IFFALSE 83821
83757: GO 83759
83759: DISABLE
83760: LD_INT 0
83762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83763: LD_ADDR_VAR 0 1
83767: PUSH
83768: LD_INT 22
83770: PUSH
83771: LD_OWVAR 2
83775: PUSH
83776: EMPTY
83777: LIST
83778: LIST
83779: PUSH
83780: LD_INT 30
83782: PUSH
83783: LD_INT 29
83785: PUSH
83786: EMPTY
83787: LIST
83788: LIST
83789: PUSH
83790: EMPTY
83791: LIST
83792: LIST
83793: PPUSH
83794: CALL_OW 69
83798: ST_TO_ADDR
// if not tmp then
83799: LD_VAR 0 1
83803: NOT
83804: IFFALSE 83808
// exit ;
83806: GO 83821
// DestroyUnit ( tmp [ 1 ] ) ;
83808: LD_VAR 0 1
83812: PUSH
83813: LD_INT 1
83815: ARRAY
83816: PPUSH
83817: CALL_OW 65
// end ;
83821: PPOPN 1
83823: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
83824: LD_EXP 75
83828: IFFALSE 83836
83830: PUSH
83831: LD_EXP 113
83835: AND
83836: IFFALSE 83965
83838: GO 83840
83840: DISABLE
83841: LD_INT 0
83843: PPUSH
// begin uc_side := 0 ;
83844: LD_ADDR_OWVAR 20
83848: PUSH
83849: LD_INT 0
83851: ST_TO_ADDR
// uc_nation := nation_arabian ;
83852: LD_ADDR_OWVAR 21
83856: PUSH
83857: LD_INT 2
83859: ST_TO_ADDR
// hc_gallery :=  ;
83860: LD_ADDR_OWVAR 33
83864: PUSH
83865: LD_STRING 
83867: ST_TO_ADDR
// hc_name :=  ;
83868: LD_ADDR_OWVAR 26
83872: PUSH
83873: LD_STRING 
83875: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
83876: LD_INT 1
83878: PPUSH
83879: LD_INT 11
83881: PPUSH
83882: LD_INT 10
83884: PPUSH
83885: CALL_OW 380
// un := CreateHuman ;
83889: LD_ADDR_VAR 0 1
83893: PUSH
83894: CALL_OW 44
83898: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83899: LD_VAR 0 1
83903: PPUSH
83904: LD_INT 1
83906: PPUSH
83907: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
83911: LD_INT 35
83913: PPUSH
83914: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
83918: LD_VAR 0 1
83922: PPUSH
83923: LD_INT 22
83925: PUSH
83926: LD_OWVAR 2
83930: PUSH
83931: EMPTY
83932: LIST
83933: LIST
83934: PPUSH
83935: CALL_OW 69
83939: PPUSH
83940: LD_VAR 0 1
83944: PPUSH
83945: CALL_OW 74
83949: PPUSH
83950: CALL_OW 115
// until IsDead ( un ) ;
83954: LD_VAR 0 1
83958: PPUSH
83959: CALL_OW 301
83963: IFFALSE 83911
// end ;
83965: PPOPN 1
83967: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
83968: LD_EXP 75
83972: IFFALSE 83980
83974: PUSH
83975: LD_EXP 115
83979: AND
83980: IFFALSE 83992
83982: GO 83984
83984: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
83985: LD_STRING earthquake(getX(game), 0, 32)
83987: PPUSH
83988: CALL_OW 559
83992: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
83993: LD_EXP 75
83997: IFFALSE 84005
83999: PUSH
84000: LD_EXP 116
84004: AND
84005: IFFALSE 84096
84007: GO 84009
84009: DISABLE
84010: LD_INT 0
84012: PPUSH
// begin enable ;
84013: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
84014: LD_ADDR_VAR 0 1
84018: PUSH
84019: LD_INT 22
84021: PUSH
84022: LD_OWVAR 2
84026: PUSH
84027: EMPTY
84028: LIST
84029: LIST
84030: PUSH
84031: LD_INT 21
84033: PUSH
84034: LD_INT 2
84036: PUSH
84037: EMPTY
84038: LIST
84039: LIST
84040: PUSH
84041: LD_INT 33
84043: PUSH
84044: LD_INT 3
84046: PUSH
84047: EMPTY
84048: LIST
84049: LIST
84050: PUSH
84051: EMPTY
84052: LIST
84053: LIST
84054: LIST
84055: PPUSH
84056: CALL_OW 69
84060: ST_TO_ADDR
// if not tmp then
84061: LD_VAR 0 1
84065: NOT
84066: IFFALSE 84070
// exit ;
84068: GO 84096
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
84070: LD_VAR 0 1
84074: PUSH
84075: LD_INT 1
84077: PPUSH
84078: LD_VAR 0 1
84082: PPUSH
84083: CALL_OW 12
84087: ARRAY
84088: PPUSH
84089: LD_INT 1
84091: PPUSH
84092: CALL_OW 234
// end ;
84096: PPOPN 1
84098: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
84099: LD_EXP 75
84103: IFFALSE 84111
84105: PUSH
84106: LD_EXP 117
84110: AND
84111: IFFALSE 84252
84113: GO 84115
84115: DISABLE
84116: LD_INT 0
84118: PPUSH
84119: PPUSH
84120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
84121: LD_ADDR_VAR 0 3
84125: PUSH
84126: LD_INT 22
84128: PUSH
84129: LD_OWVAR 2
84133: PUSH
84134: EMPTY
84135: LIST
84136: LIST
84137: PUSH
84138: LD_INT 25
84140: PUSH
84141: LD_INT 1
84143: PUSH
84144: EMPTY
84145: LIST
84146: LIST
84147: PUSH
84148: EMPTY
84149: LIST
84150: LIST
84151: PPUSH
84152: CALL_OW 69
84156: ST_TO_ADDR
// if not tmp then
84157: LD_VAR 0 3
84161: NOT
84162: IFFALSE 84166
// exit ;
84164: GO 84252
// un := tmp [ rand ( 1 , tmp ) ] ;
84166: LD_ADDR_VAR 0 2
84170: PUSH
84171: LD_VAR 0 3
84175: PUSH
84176: LD_INT 1
84178: PPUSH
84179: LD_VAR 0 3
84183: PPUSH
84184: CALL_OW 12
84188: ARRAY
84189: ST_TO_ADDR
// if Crawls ( un ) then
84190: LD_VAR 0 2
84194: PPUSH
84195: CALL_OW 318
84199: IFFALSE 84210
// ComWalk ( un ) ;
84201: LD_VAR 0 2
84205: PPUSH
84206: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
84210: LD_VAR 0 2
84214: PPUSH
84215: LD_INT 9
84217: PPUSH
84218: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
84222: LD_INT 28
84224: PPUSH
84225: LD_OWVAR 2
84229: PPUSH
84230: LD_INT 2
84232: PPUSH
84233: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
84237: LD_INT 29
84239: PPUSH
84240: LD_OWVAR 2
84244: PPUSH
84245: LD_INT 2
84247: PPUSH
84248: CALL_OW 322
// end ;
84252: PPOPN 3
84254: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
84255: LD_EXP 75
84259: IFFALSE 84267
84261: PUSH
84262: LD_EXP 118
84266: AND
84267: IFFALSE 84378
84269: GO 84271
84271: DISABLE
84272: LD_INT 0
84274: PPUSH
84275: PPUSH
84276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
84277: LD_ADDR_VAR 0 3
84281: PUSH
84282: LD_INT 22
84284: PUSH
84285: LD_OWVAR 2
84289: PUSH
84290: EMPTY
84291: LIST
84292: LIST
84293: PUSH
84294: LD_INT 25
84296: PUSH
84297: LD_INT 1
84299: PUSH
84300: EMPTY
84301: LIST
84302: LIST
84303: PUSH
84304: EMPTY
84305: LIST
84306: LIST
84307: PPUSH
84308: CALL_OW 69
84312: ST_TO_ADDR
// if not tmp then
84313: LD_VAR 0 3
84317: NOT
84318: IFFALSE 84322
// exit ;
84320: GO 84378
// un := tmp [ rand ( 1 , tmp ) ] ;
84322: LD_ADDR_VAR 0 2
84326: PUSH
84327: LD_VAR 0 3
84331: PUSH
84332: LD_INT 1
84334: PPUSH
84335: LD_VAR 0 3
84339: PPUSH
84340: CALL_OW 12
84344: ARRAY
84345: ST_TO_ADDR
// if Crawls ( un ) then
84346: LD_VAR 0 2
84350: PPUSH
84351: CALL_OW 318
84355: IFFALSE 84366
// ComWalk ( un ) ;
84357: LD_VAR 0 2
84361: PPUSH
84362: CALL_OW 138
// SetClass ( un , class_mortar ) ;
84366: LD_VAR 0 2
84370: PPUSH
84371: LD_INT 8
84373: PPUSH
84374: CALL_OW 336
// end ;
84378: PPOPN 3
84380: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
84381: LD_EXP 75
84385: IFFALSE 84393
84387: PUSH
84388: LD_EXP 119
84392: AND
84393: IFFALSE 84537
84395: GO 84397
84397: DISABLE
84398: LD_INT 0
84400: PPUSH
84401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
84402: LD_ADDR_VAR 0 2
84406: PUSH
84407: LD_INT 22
84409: PUSH
84410: LD_OWVAR 2
84414: PUSH
84415: EMPTY
84416: LIST
84417: LIST
84418: PUSH
84419: LD_INT 21
84421: PUSH
84422: LD_INT 2
84424: PUSH
84425: EMPTY
84426: LIST
84427: LIST
84428: PUSH
84429: LD_INT 2
84431: PUSH
84432: LD_INT 34
84434: PUSH
84435: LD_INT 12
84437: PUSH
84438: EMPTY
84439: LIST
84440: LIST
84441: PUSH
84442: LD_INT 34
84444: PUSH
84445: LD_INT 51
84447: PUSH
84448: EMPTY
84449: LIST
84450: LIST
84451: PUSH
84452: LD_INT 34
84454: PUSH
84455: LD_INT 32
84457: PUSH
84458: EMPTY
84459: LIST
84460: LIST
84461: PUSH
84462: EMPTY
84463: LIST
84464: LIST
84465: LIST
84466: LIST
84467: PUSH
84468: EMPTY
84469: LIST
84470: LIST
84471: LIST
84472: PPUSH
84473: CALL_OW 69
84477: ST_TO_ADDR
// if not tmp then
84478: LD_VAR 0 2
84482: NOT
84483: IFFALSE 84487
// exit ;
84485: GO 84537
// for i in tmp do
84487: LD_ADDR_VAR 0 1
84491: PUSH
84492: LD_VAR 0 2
84496: PUSH
84497: FOR_IN
84498: IFFALSE 84535
// if GetCargo ( i , mat_artifact ) = 0 then
84500: LD_VAR 0 1
84504: PPUSH
84505: LD_INT 4
84507: PPUSH
84508: CALL_OW 289
84512: PUSH
84513: LD_INT 0
84515: EQUAL
84516: IFFALSE 84533
// SetCargo ( i , mat_siberit , 100 ) ;
84518: LD_VAR 0 1
84522: PPUSH
84523: LD_INT 3
84525: PPUSH
84526: LD_INT 100
84528: PPUSH
84529: CALL_OW 290
84533: GO 84497
84535: POP
84536: POP
// end ;
84537: PPOPN 2
84539: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
84540: LD_EXP 75
84544: IFFALSE 84552
84546: PUSH
84547: LD_EXP 120
84551: AND
84552: IFFALSE 84735
84554: GO 84556
84556: DISABLE
84557: LD_INT 0
84559: PPUSH
84560: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84561: LD_ADDR_VAR 0 2
84565: PUSH
84566: LD_INT 22
84568: PUSH
84569: LD_OWVAR 2
84573: PUSH
84574: EMPTY
84575: LIST
84576: LIST
84577: PPUSH
84578: CALL_OW 69
84582: ST_TO_ADDR
// if not tmp then
84583: LD_VAR 0 2
84587: NOT
84588: IFFALSE 84592
// exit ;
84590: GO 84735
// for i := 1 to 2 do
84592: LD_ADDR_VAR 0 1
84596: PUSH
84597: DOUBLE
84598: LD_INT 1
84600: DEC
84601: ST_TO_ADDR
84602: LD_INT 2
84604: PUSH
84605: FOR_TO
84606: IFFALSE 84733
// begin uc_side := your_side ;
84608: LD_ADDR_OWVAR 20
84612: PUSH
84613: LD_OWVAR 2
84617: ST_TO_ADDR
// uc_nation := nation_american ;
84618: LD_ADDR_OWVAR 21
84622: PUSH
84623: LD_INT 1
84625: ST_TO_ADDR
// vc_chassis := us_morphling ;
84626: LD_ADDR_OWVAR 37
84630: PUSH
84631: LD_INT 5
84633: ST_TO_ADDR
// vc_engine := engine_siberite ;
84634: LD_ADDR_OWVAR 39
84638: PUSH
84639: LD_INT 3
84641: ST_TO_ADDR
// vc_control := control_computer ;
84642: LD_ADDR_OWVAR 38
84646: PUSH
84647: LD_INT 3
84649: ST_TO_ADDR
// vc_weapon := us_double_laser ;
84650: LD_ADDR_OWVAR 40
84654: PUSH
84655: LD_INT 10
84657: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
84658: LD_VAR 0 2
84662: PUSH
84663: LD_INT 1
84665: ARRAY
84666: PPUSH
84667: CALL_OW 310
84671: NOT
84672: IFFALSE 84719
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
84674: CALL_OW 45
84678: PPUSH
84679: LD_VAR 0 2
84683: PUSH
84684: LD_INT 1
84686: ARRAY
84687: PPUSH
84688: CALL_OW 250
84692: PPUSH
84693: LD_VAR 0 2
84697: PUSH
84698: LD_INT 1
84700: ARRAY
84701: PPUSH
84702: CALL_OW 251
84706: PPUSH
84707: LD_INT 12
84709: PPUSH
84710: LD_INT 1
84712: PPUSH
84713: CALL_OW 50
84717: GO 84731
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
84719: CALL_OW 45
84723: PPUSH
84724: LD_INT 1
84726: PPUSH
84727: CALL_OW 51
// end ;
84731: GO 84605
84733: POP
84734: POP
// end ;
84735: PPOPN 2
84737: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
84738: LD_EXP 75
84742: IFFALSE 84750
84744: PUSH
84745: LD_EXP 121
84749: AND
84750: IFFALSE 84972
84752: GO 84754
84754: DISABLE
84755: LD_INT 0
84757: PPUSH
84758: PPUSH
84759: PPUSH
84760: PPUSH
84761: PPUSH
84762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
84763: LD_ADDR_VAR 0 6
84767: PUSH
84768: LD_INT 22
84770: PUSH
84771: LD_OWVAR 2
84775: PUSH
84776: EMPTY
84777: LIST
84778: LIST
84779: PUSH
84780: LD_INT 21
84782: PUSH
84783: LD_INT 1
84785: PUSH
84786: EMPTY
84787: LIST
84788: LIST
84789: PUSH
84790: LD_INT 3
84792: PUSH
84793: LD_INT 23
84795: PUSH
84796: LD_INT 0
84798: PUSH
84799: EMPTY
84800: LIST
84801: LIST
84802: PUSH
84803: EMPTY
84804: LIST
84805: LIST
84806: PUSH
84807: EMPTY
84808: LIST
84809: LIST
84810: LIST
84811: PPUSH
84812: CALL_OW 69
84816: ST_TO_ADDR
// if not tmp then
84817: LD_VAR 0 6
84821: NOT
84822: IFFALSE 84826
// exit ;
84824: GO 84972
// s1 := rand ( 1 , 4 ) ;
84826: LD_ADDR_VAR 0 2
84830: PUSH
84831: LD_INT 1
84833: PPUSH
84834: LD_INT 4
84836: PPUSH
84837: CALL_OW 12
84841: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
84842: LD_ADDR_VAR 0 4
84846: PUSH
84847: LD_VAR 0 6
84851: PUSH
84852: LD_INT 1
84854: ARRAY
84855: PPUSH
84856: LD_VAR 0 2
84860: PPUSH
84861: CALL_OW 259
84865: ST_TO_ADDR
// if s1 = 1 then
84866: LD_VAR 0 2
84870: PUSH
84871: LD_INT 1
84873: EQUAL
84874: IFFALSE 84894
// s2 := rand ( 2 , 4 ) else
84876: LD_ADDR_VAR 0 3
84880: PUSH
84881: LD_INT 2
84883: PPUSH
84884: LD_INT 4
84886: PPUSH
84887: CALL_OW 12
84891: ST_TO_ADDR
84892: GO 84902
// s2 := 1 ;
84894: LD_ADDR_VAR 0 3
84898: PUSH
84899: LD_INT 1
84901: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
84902: LD_ADDR_VAR 0 5
84906: PUSH
84907: LD_VAR 0 6
84911: PUSH
84912: LD_INT 1
84914: ARRAY
84915: PPUSH
84916: LD_VAR 0 3
84920: PPUSH
84921: CALL_OW 259
84925: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
84926: LD_VAR 0 6
84930: PUSH
84931: LD_INT 1
84933: ARRAY
84934: PPUSH
84935: LD_VAR 0 2
84939: PPUSH
84940: LD_VAR 0 5
84944: PPUSH
84945: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
84949: LD_VAR 0 6
84953: PUSH
84954: LD_INT 1
84956: ARRAY
84957: PPUSH
84958: LD_VAR 0 3
84962: PPUSH
84963: LD_VAR 0 4
84967: PPUSH
84968: CALL_OW 237
// end ;
84972: PPOPN 6
84974: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
84975: LD_EXP 75
84979: IFFALSE 84987
84981: PUSH
84982: LD_EXP 122
84986: AND
84987: IFFALSE 85066
84989: GO 84991
84991: DISABLE
84992: LD_INT 0
84994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
84995: LD_ADDR_VAR 0 1
84999: PUSH
85000: LD_INT 22
85002: PUSH
85003: LD_OWVAR 2
85007: PUSH
85008: EMPTY
85009: LIST
85010: LIST
85011: PUSH
85012: LD_INT 30
85014: PUSH
85015: LD_INT 3
85017: PUSH
85018: EMPTY
85019: LIST
85020: LIST
85021: PUSH
85022: EMPTY
85023: LIST
85024: LIST
85025: PPUSH
85026: CALL_OW 69
85030: ST_TO_ADDR
// if not tmp then
85031: LD_VAR 0 1
85035: NOT
85036: IFFALSE 85040
// exit ;
85038: GO 85066
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
85040: LD_VAR 0 1
85044: PUSH
85045: LD_INT 1
85047: PPUSH
85048: LD_VAR 0 1
85052: PPUSH
85053: CALL_OW 12
85057: ARRAY
85058: PPUSH
85059: LD_INT 1
85061: PPUSH
85062: CALL_OW 234
// end ;
85066: PPOPN 1
85068: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
85069: LD_EXP 75
85073: IFFALSE 85081
85075: PUSH
85076: LD_EXP 123
85080: AND
85081: IFFALSE 85193
85083: GO 85085
85085: DISABLE
85086: LD_INT 0
85088: PPUSH
85089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
85090: LD_ADDR_VAR 0 2
85094: PUSH
85095: LD_INT 22
85097: PUSH
85098: LD_OWVAR 2
85102: PUSH
85103: EMPTY
85104: LIST
85105: LIST
85106: PUSH
85107: LD_INT 2
85109: PUSH
85110: LD_INT 30
85112: PUSH
85113: LD_INT 27
85115: PUSH
85116: EMPTY
85117: LIST
85118: LIST
85119: PUSH
85120: LD_INT 30
85122: PUSH
85123: LD_INT 26
85125: PUSH
85126: EMPTY
85127: LIST
85128: LIST
85129: PUSH
85130: LD_INT 30
85132: PUSH
85133: LD_INT 28
85135: PUSH
85136: EMPTY
85137: LIST
85138: LIST
85139: PUSH
85140: EMPTY
85141: LIST
85142: LIST
85143: LIST
85144: LIST
85145: PUSH
85146: EMPTY
85147: LIST
85148: LIST
85149: PPUSH
85150: CALL_OW 69
85154: ST_TO_ADDR
// if not tmp then
85155: LD_VAR 0 2
85159: NOT
85160: IFFALSE 85164
// exit ;
85162: GO 85193
// for i in tmp do
85164: LD_ADDR_VAR 0 1
85168: PUSH
85169: LD_VAR 0 2
85173: PUSH
85174: FOR_IN
85175: IFFALSE 85191
// SetLives ( i , 1 ) ;
85177: LD_VAR 0 1
85181: PPUSH
85182: LD_INT 1
85184: PPUSH
85185: CALL_OW 234
85189: GO 85174
85191: POP
85192: POP
// end ;
85193: PPOPN 2
85195: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
85196: LD_EXP 75
85200: IFFALSE 85208
85202: PUSH
85203: LD_EXP 124
85207: AND
85208: IFFALSE 85495
85210: GO 85212
85212: DISABLE
85213: LD_INT 0
85215: PPUSH
85216: PPUSH
85217: PPUSH
// begin i := rand ( 1 , 7 ) ;
85218: LD_ADDR_VAR 0 1
85222: PUSH
85223: LD_INT 1
85225: PPUSH
85226: LD_INT 7
85228: PPUSH
85229: CALL_OW 12
85233: ST_TO_ADDR
// case i of 1 :
85234: LD_VAR 0 1
85238: PUSH
85239: LD_INT 1
85241: DOUBLE
85242: EQUAL
85243: IFTRUE 85247
85245: GO 85257
85247: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
85248: LD_STRING earthquake(getX(game), 0, 32)
85250: PPUSH
85251: CALL_OW 559
85255: GO 85495
85257: LD_INT 2
85259: DOUBLE
85260: EQUAL
85261: IFTRUE 85265
85263: GO 85279
85265: POP
// begin ToLua ( displayStucuk(); ) ;
85266: LD_STRING displayStucuk();
85268: PPUSH
85269: CALL_OW 559
// ResetFog ;
85273: CALL_OW 335
// end ; 3 :
85277: GO 85495
85279: LD_INT 3
85281: DOUBLE
85282: EQUAL
85283: IFTRUE 85287
85285: GO 85391
85287: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
85288: LD_ADDR_VAR 0 2
85292: PUSH
85293: LD_INT 22
85295: PUSH
85296: LD_OWVAR 2
85300: PUSH
85301: EMPTY
85302: LIST
85303: LIST
85304: PUSH
85305: LD_INT 25
85307: PUSH
85308: LD_INT 1
85310: PUSH
85311: EMPTY
85312: LIST
85313: LIST
85314: PUSH
85315: EMPTY
85316: LIST
85317: LIST
85318: PPUSH
85319: CALL_OW 69
85323: ST_TO_ADDR
// if not tmp then
85324: LD_VAR 0 2
85328: NOT
85329: IFFALSE 85333
// exit ;
85331: GO 85495
// un := tmp [ rand ( 1 , tmp ) ] ;
85333: LD_ADDR_VAR 0 3
85337: PUSH
85338: LD_VAR 0 2
85342: PUSH
85343: LD_INT 1
85345: PPUSH
85346: LD_VAR 0 2
85350: PPUSH
85351: CALL_OW 12
85355: ARRAY
85356: ST_TO_ADDR
// if Crawls ( un ) then
85357: LD_VAR 0 3
85361: PPUSH
85362: CALL_OW 318
85366: IFFALSE 85377
// ComWalk ( un ) ;
85368: LD_VAR 0 3
85372: PPUSH
85373: CALL_OW 138
// SetClass ( un , class_mortar ) ;
85377: LD_VAR 0 3
85381: PPUSH
85382: LD_INT 8
85384: PPUSH
85385: CALL_OW 336
// end ; 4 :
85389: GO 85495
85391: LD_INT 4
85393: DOUBLE
85394: EQUAL
85395: IFTRUE 85399
85397: GO 85473
85399: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
85400: LD_ADDR_VAR 0 2
85404: PUSH
85405: LD_INT 22
85407: PUSH
85408: LD_OWVAR 2
85412: PUSH
85413: EMPTY
85414: LIST
85415: LIST
85416: PUSH
85417: LD_INT 30
85419: PUSH
85420: LD_INT 29
85422: PUSH
85423: EMPTY
85424: LIST
85425: LIST
85426: PUSH
85427: EMPTY
85428: LIST
85429: LIST
85430: PPUSH
85431: CALL_OW 69
85435: ST_TO_ADDR
// if not tmp then
85436: LD_VAR 0 2
85440: NOT
85441: IFFALSE 85445
// exit ;
85443: GO 85495
// CenterNowOnUnits ( tmp [ 1 ] ) ;
85445: LD_VAR 0 2
85449: PUSH
85450: LD_INT 1
85452: ARRAY
85453: PPUSH
85454: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
85458: LD_VAR 0 2
85462: PUSH
85463: LD_INT 1
85465: ARRAY
85466: PPUSH
85467: CALL_OW 65
// end ; 5 .. 7 :
85471: GO 85495
85473: LD_INT 5
85475: DOUBLE
85476: GREATEREQUAL
85477: IFFALSE 85485
85479: LD_INT 7
85481: DOUBLE
85482: LESSEQUAL
85483: IFTRUE 85487
85485: GO 85494
85487: POP
// StreamSibBomb ; end ;
85488: CALL 81676 0 0
85492: GO 85495
85494: POP
// end ;
85495: PPOPN 3
85497: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
85498: LD_EXP 75
85502: IFFALSE 85510
85504: PUSH
85505: LD_EXP 125
85509: AND
85510: IFFALSE 85666
85512: GO 85514
85514: DISABLE
85515: LD_INT 0
85517: PPUSH
85518: PPUSH
85519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
85520: LD_ADDR_VAR 0 2
85524: PUSH
85525: LD_INT 81
85527: PUSH
85528: LD_OWVAR 2
85532: PUSH
85533: EMPTY
85534: LIST
85535: LIST
85536: PUSH
85537: LD_INT 2
85539: PUSH
85540: LD_INT 21
85542: PUSH
85543: LD_INT 1
85545: PUSH
85546: EMPTY
85547: LIST
85548: LIST
85549: PUSH
85550: LD_INT 21
85552: PUSH
85553: LD_INT 2
85555: PUSH
85556: EMPTY
85557: LIST
85558: LIST
85559: PUSH
85560: EMPTY
85561: LIST
85562: LIST
85563: LIST
85564: PUSH
85565: EMPTY
85566: LIST
85567: LIST
85568: PPUSH
85569: CALL_OW 69
85573: ST_TO_ADDR
// if not tmp then
85574: LD_VAR 0 2
85578: NOT
85579: IFFALSE 85583
// exit ;
85581: GO 85666
// p := 0 ;
85583: LD_ADDR_VAR 0 3
85587: PUSH
85588: LD_INT 0
85590: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
85591: LD_INT 35
85593: PPUSH
85594: CALL_OW 67
// p := p + 1 ;
85598: LD_ADDR_VAR 0 3
85602: PUSH
85603: LD_VAR 0 3
85607: PUSH
85608: LD_INT 1
85610: PLUS
85611: ST_TO_ADDR
// for i in tmp do
85612: LD_ADDR_VAR 0 1
85616: PUSH
85617: LD_VAR 0 2
85621: PUSH
85622: FOR_IN
85623: IFFALSE 85654
// if GetLives ( i ) < 1000 then
85625: LD_VAR 0 1
85629: PPUSH
85630: CALL_OW 256
85634: PUSH
85635: LD_INT 1000
85637: LESS
85638: IFFALSE 85652
// SetLives ( i , 1000 ) ;
85640: LD_VAR 0 1
85644: PPUSH
85645: LD_INT 1000
85647: PPUSH
85648: CALL_OW 234
85652: GO 85622
85654: POP
85655: POP
// until p > 20 ;
85656: LD_VAR 0 3
85660: PUSH
85661: LD_INT 20
85663: GREATER
85664: IFFALSE 85591
// end ;
85666: PPOPN 3
85668: END
// every 0 0$1 trigger StreamModeActive and sTime do
85669: LD_EXP 75
85673: IFFALSE 85681
85675: PUSH
85676: LD_EXP 126
85680: AND
85681: IFFALSE 85716
85683: GO 85685
85685: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
85686: LD_INT 28
85688: PPUSH
85689: LD_OWVAR 2
85693: PPUSH
85694: LD_INT 2
85696: PPUSH
85697: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
85701: LD_INT 30
85703: PPUSH
85704: LD_OWVAR 2
85708: PPUSH
85709: LD_INT 2
85711: PPUSH
85712: CALL_OW 322
// end ;
85716: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
85717: LD_EXP 75
85721: IFFALSE 85729
85723: PUSH
85724: LD_EXP 127
85728: AND
85729: IFFALSE 85850
85731: GO 85733
85733: DISABLE
85734: LD_INT 0
85736: PPUSH
85737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
85738: LD_ADDR_VAR 0 2
85742: PUSH
85743: LD_INT 22
85745: PUSH
85746: LD_OWVAR 2
85750: PUSH
85751: EMPTY
85752: LIST
85753: LIST
85754: PUSH
85755: LD_INT 21
85757: PUSH
85758: LD_INT 1
85760: PUSH
85761: EMPTY
85762: LIST
85763: LIST
85764: PUSH
85765: LD_INT 3
85767: PUSH
85768: LD_INT 23
85770: PUSH
85771: LD_INT 0
85773: PUSH
85774: EMPTY
85775: LIST
85776: LIST
85777: PUSH
85778: EMPTY
85779: LIST
85780: LIST
85781: PUSH
85782: EMPTY
85783: LIST
85784: LIST
85785: LIST
85786: PPUSH
85787: CALL_OW 69
85791: ST_TO_ADDR
// if not tmp then
85792: LD_VAR 0 2
85796: NOT
85797: IFFALSE 85801
// exit ;
85799: GO 85850
// for i in tmp do
85801: LD_ADDR_VAR 0 1
85805: PUSH
85806: LD_VAR 0 2
85810: PUSH
85811: FOR_IN
85812: IFFALSE 85848
// begin if Crawls ( i ) then
85814: LD_VAR 0 1
85818: PPUSH
85819: CALL_OW 318
85823: IFFALSE 85834
// ComWalk ( i ) ;
85825: LD_VAR 0 1
85829: PPUSH
85830: CALL_OW 138
// SetClass ( i , 2 ) ;
85834: LD_VAR 0 1
85838: PPUSH
85839: LD_INT 2
85841: PPUSH
85842: CALL_OW 336
// end ;
85846: GO 85811
85848: POP
85849: POP
// end ;
85850: PPOPN 2
85852: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
85853: LD_EXP 75
85857: IFFALSE 85865
85859: PUSH
85860: LD_EXP 128
85864: AND
85865: IFFALSE 86155
85867: GO 85869
85869: DISABLE
85870: LD_INT 0
85872: PPUSH
85873: PPUSH
85874: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
85875: LD_OWVAR 2
85879: PPUSH
85880: LD_INT 9
85882: PPUSH
85883: LD_INT 1
85885: PPUSH
85886: LD_INT 1
85888: PPUSH
85889: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
85893: LD_INT 9
85895: PPUSH
85896: LD_OWVAR 2
85900: PPUSH
85901: CALL_OW 343
// uc_side := 9 ;
85905: LD_ADDR_OWVAR 20
85909: PUSH
85910: LD_INT 9
85912: ST_TO_ADDR
// uc_nation := 2 ;
85913: LD_ADDR_OWVAR 21
85917: PUSH
85918: LD_INT 2
85920: ST_TO_ADDR
// hc_name := Dark Warrior ;
85921: LD_ADDR_OWVAR 26
85925: PUSH
85926: LD_STRING Dark Warrior
85928: ST_TO_ADDR
// hc_gallery :=  ;
85929: LD_ADDR_OWVAR 33
85933: PUSH
85934: LD_STRING 
85936: ST_TO_ADDR
// hc_noskilllimit := true ;
85937: LD_ADDR_OWVAR 76
85941: PUSH
85942: LD_INT 1
85944: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
85945: LD_ADDR_OWVAR 31
85949: PUSH
85950: LD_INT 30
85952: PUSH
85953: LD_INT 30
85955: PUSH
85956: LD_INT 30
85958: PUSH
85959: LD_INT 30
85961: PUSH
85962: EMPTY
85963: LIST
85964: LIST
85965: LIST
85966: LIST
85967: ST_TO_ADDR
// un := CreateHuman ;
85968: LD_ADDR_VAR 0 3
85972: PUSH
85973: CALL_OW 44
85977: ST_TO_ADDR
// hc_noskilllimit := false ;
85978: LD_ADDR_OWVAR 76
85982: PUSH
85983: LD_INT 0
85985: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
85986: LD_VAR 0 3
85990: PPUSH
85991: LD_INT 1
85993: PPUSH
85994: CALL_OW 51
// ToLua ( playRanger() ) ;
85998: LD_STRING playRanger()
86000: PPUSH
86001: CALL_OW 559
// p := 0 ;
86005: LD_ADDR_VAR 0 2
86009: PUSH
86010: LD_INT 0
86012: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
86013: LD_INT 35
86015: PPUSH
86016: CALL_OW 67
// p := p + 1 ;
86020: LD_ADDR_VAR 0 2
86024: PUSH
86025: LD_VAR 0 2
86029: PUSH
86030: LD_INT 1
86032: PLUS
86033: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
86034: LD_VAR 0 3
86038: PPUSH
86039: CALL_OW 256
86043: PUSH
86044: LD_INT 1000
86046: LESS
86047: IFFALSE 86061
// SetLives ( un , 1000 ) ;
86049: LD_VAR 0 3
86053: PPUSH
86054: LD_INT 1000
86056: PPUSH
86057: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
86061: LD_VAR 0 3
86065: PPUSH
86066: LD_INT 81
86068: PUSH
86069: LD_OWVAR 2
86073: PUSH
86074: EMPTY
86075: LIST
86076: LIST
86077: PUSH
86078: LD_INT 91
86080: PUSH
86081: LD_VAR 0 3
86085: PUSH
86086: LD_INT 30
86088: PUSH
86089: EMPTY
86090: LIST
86091: LIST
86092: LIST
86093: PUSH
86094: EMPTY
86095: LIST
86096: LIST
86097: PPUSH
86098: CALL_OW 69
86102: PPUSH
86103: LD_VAR 0 3
86107: PPUSH
86108: CALL_OW 74
86112: PPUSH
86113: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
86117: LD_VAR 0 2
86121: PUSH
86122: LD_INT 80
86124: GREATER
86125: IFTRUE 86138
86127: PUSH
86128: LD_VAR 0 3
86132: PPUSH
86133: CALL_OW 301
86137: OR
86138: IFFALSE 86013
// if un then
86140: LD_VAR 0 3
86144: IFFALSE 86155
// RemoveUnit ( un ) ;
86146: LD_VAR 0 3
86150: PPUSH
86151: CALL_OW 64
// end ;
86155: PPOPN 3
86157: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
86158: LD_EXP 129
86162: IFFALSE 86278
86164: GO 86166
86166: DISABLE
86167: LD_INT 0
86169: PPUSH
86170: PPUSH
86171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
86172: LD_ADDR_VAR 0 2
86176: PUSH
86177: LD_INT 81
86179: PUSH
86180: LD_OWVAR 2
86184: PUSH
86185: EMPTY
86186: LIST
86187: LIST
86188: PUSH
86189: LD_INT 21
86191: PUSH
86192: LD_INT 1
86194: PUSH
86195: EMPTY
86196: LIST
86197: LIST
86198: PUSH
86199: EMPTY
86200: LIST
86201: LIST
86202: PPUSH
86203: CALL_OW 69
86207: ST_TO_ADDR
// ToLua ( playComputer() ) ;
86208: LD_STRING playComputer()
86210: PPUSH
86211: CALL_OW 559
// if not tmp then
86215: LD_VAR 0 2
86219: NOT
86220: IFFALSE 86224
// exit ;
86222: GO 86278
// for i in tmp do
86224: LD_ADDR_VAR 0 1
86228: PUSH
86229: LD_VAR 0 2
86233: PUSH
86234: FOR_IN
86235: IFFALSE 86276
// for j := 1 to 4 do
86237: LD_ADDR_VAR 0 3
86241: PUSH
86242: DOUBLE
86243: LD_INT 1
86245: DEC
86246: ST_TO_ADDR
86247: LD_INT 4
86249: PUSH
86250: FOR_TO
86251: IFFALSE 86272
// SetSkill ( i , j , 10 ) ;
86253: LD_VAR 0 1
86257: PPUSH
86258: LD_VAR 0 3
86262: PPUSH
86263: LD_INT 10
86265: PPUSH
86266: CALL_OW 237
86270: GO 86250
86272: POP
86273: POP
86274: GO 86234
86276: POP
86277: POP
// end ;
86278: PPOPN 3
86280: END
// every 0 0$1 trigger s30 do var i , tmp ;
86281: LD_EXP 130
86285: IFFALSE 86354
86287: GO 86289
86289: DISABLE
86290: LD_INT 0
86292: PPUSH
86293: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
86294: LD_ADDR_VAR 0 2
86298: PUSH
86299: LD_INT 22
86301: PUSH
86302: LD_OWVAR 2
86306: PUSH
86307: EMPTY
86308: LIST
86309: LIST
86310: PPUSH
86311: CALL_OW 69
86315: ST_TO_ADDR
// if not tmp then
86316: LD_VAR 0 2
86320: NOT
86321: IFFALSE 86325
// exit ;
86323: GO 86354
// for i in tmp do
86325: LD_ADDR_VAR 0 1
86329: PUSH
86330: LD_VAR 0 2
86334: PUSH
86335: FOR_IN
86336: IFFALSE 86352
// SetLives ( i , 300 ) ;
86338: LD_VAR 0 1
86342: PPUSH
86343: LD_INT 300
86345: PPUSH
86346: CALL_OW 234
86350: GO 86335
86352: POP
86353: POP
// end ;
86354: PPOPN 2
86356: END
// every 0 0$1 trigger s60 do var i , tmp ;
86357: LD_EXP 131
86361: IFFALSE 86430
86363: GO 86365
86365: DISABLE
86366: LD_INT 0
86368: PPUSH
86369: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
86370: LD_ADDR_VAR 0 2
86374: PUSH
86375: LD_INT 22
86377: PUSH
86378: LD_OWVAR 2
86382: PUSH
86383: EMPTY
86384: LIST
86385: LIST
86386: PPUSH
86387: CALL_OW 69
86391: ST_TO_ADDR
// if not tmp then
86392: LD_VAR 0 2
86396: NOT
86397: IFFALSE 86401
// exit ;
86399: GO 86430
// for i in tmp do
86401: LD_ADDR_VAR 0 1
86405: PUSH
86406: LD_VAR 0 2
86410: PUSH
86411: FOR_IN
86412: IFFALSE 86428
// SetLives ( i , 600 ) ;
86414: LD_VAR 0 1
86418: PPUSH
86419: LD_INT 600
86421: PPUSH
86422: CALL_OW 234
86426: GO 86411
86428: POP
86429: POP
// end ;
86430: PPOPN 2
86432: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
86433: LD_INT 0
86435: PPUSH
// case cmd of 301 :
86436: LD_VAR 0 1
86440: PUSH
86441: LD_INT 301
86443: DOUBLE
86444: EQUAL
86445: IFTRUE 86449
86447: GO 86481
86449: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
86450: LD_VAR 0 6
86454: PPUSH
86455: LD_VAR 0 7
86459: PPUSH
86460: LD_VAR 0 8
86464: PPUSH
86465: LD_VAR 0 4
86469: PPUSH
86470: LD_VAR 0 5
86474: PPUSH
86475: CALL 87694 0 5
86479: GO 86602
86481: LD_INT 302
86483: DOUBLE
86484: EQUAL
86485: IFTRUE 86489
86487: GO 86526
86489: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
86490: LD_VAR 0 6
86494: PPUSH
86495: LD_VAR 0 7
86499: PPUSH
86500: LD_VAR 0 8
86504: PPUSH
86505: LD_VAR 0 9
86509: PPUSH
86510: LD_VAR 0 4
86514: PPUSH
86515: LD_VAR 0 5
86519: PPUSH
86520: CALL 87785 0 6
86524: GO 86602
86526: LD_INT 303
86528: DOUBLE
86529: EQUAL
86530: IFTRUE 86534
86532: GO 86571
86534: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
86535: LD_VAR 0 6
86539: PPUSH
86540: LD_VAR 0 7
86544: PPUSH
86545: LD_VAR 0 8
86549: PPUSH
86550: LD_VAR 0 9
86554: PPUSH
86555: LD_VAR 0 4
86559: PPUSH
86560: LD_VAR 0 5
86564: PPUSH
86565: CALL 86607 0 6
86569: GO 86602
86571: LD_INT 304
86573: DOUBLE
86574: EQUAL
86575: IFTRUE 86579
86577: GO 86601
86579: POP
// hHackTeleport ( unit , x , y ) ; end ;
86580: LD_VAR 0 2
86584: PPUSH
86585: LD_VAR 0 4
86589: PPUSH
86590: LD_VAR 0 5
86594: PPUSH
86595: CALL 88378 0 3
86599: GO 86602
86601: POP
// end ;
86602: LD_VAR 0 12
86606: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
86607: LD_INT 0
86609: PPUSH
86610: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
86611: LD_VAR 0 1
86615: PUSH
86616: LD_INT 1
86618: LESS
86619: IFTRUE 86631
86621: PUSH
86622: LD_VAR 0 1
86626: PUSH
86627: LD_INT 3
86629: GREATER
86630: OR
86631: IFTRUE 86649
86633: PUSH
86634: LD_VAR 0 5
86638: PPUSH
86639: LD_VAR 0 6
86643: PPUSH
86644: CALL_OW 428
86648: OR
86649: IFFALSE 86653
// exit ;
86651: GO 87381
// uc_side := your_side ;
86653: LD_ADDR_OWVAR 20
86657: PUSH
86658: LD_OWVAR 2
86662: ST_TO_ADDR
// uc_nation := nation ;
86663: LD_ADDR_OWVAR 21
86667: PUSH
86668: LD_VAR 0 1
86672: ST_TO_ADDR
// bc_level = 1 ;
86673: LD_ADDR_OWVAR 43
86677: PUSH
86678: LD_INT 1
86680: ST_TO_ADDR
// case btype of 1 :
86681: LD_VAR 0 2
86685: PUSH
86686: LD_INT 1
86688: DOUBLE
86689: EQUAL
86690: IFTRUE 86694
86692: GO 86705
86694: POP
// bc_type := b_depot ; 2 :
86695: LD_ADDR_OWVAR 42
86699: PUSH
86700: LD_INT 0
86702: ST_TO_ADDR
86703: GO 87325
86705: LD_INT 2
86707: DOUBLE
86708: EQUAL
86709: IFTRUE 86713
86711: GO 86724
86713: POP
// bc_type := b_warehouse ; 3 :
86714: LD_ADDR_OWVAR 42
86718: PUSH
86719: LD_INT 1
86721: ST_TO_ADDR
86722: GO 87325
86724: LD_INT 3
86726: DOUBLE
86727: EQUAL
86728: IFTRUE 86732
86730: GO 86743
86732: POP
// bc_type := b_lab ; 4 .. 9 :
86733: LD_ADDR_OWVAR 42
86737: PUSH
86738: LD_INT 6
86740: ST_TO_ADDR
86741: GO 87325
86743: LD_INT 4
86745: DOUBLE
86746: GREATEREQUAL
86747: IFFALSE 86755
86749: LD_INT 9
86751: DOUBLE
86752: LESSEQUAL
86753: IFTRUE 86757
86755: GO 86817
86757: POP
// begin bc_type := b_lab_half ;
86758: LD_ADDR_OWVAR 42
86762: PUSH
86763: LD_INT 7
86765: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
86766: LD_ADDR_OWVAR 44
86770: PUSH
86771: LD_INT 10
86773: PUSH
86774: LD_INT 11
86776: PUSH
86777: LD_INT 12
86779: PUSH
86780: LD_INT 15
86782: PUSH
86783: LD_INT 14
86785: PUSH
86786: LD_INT 13
86788: PUSH
86789: EMPTY
86790: LIST
86791: LIST
86792: LIST
86793: LIST
86794: LIST
86795: LIST
86796: PUSH
86797: LD_VAR 0 2
86801: PUSH
86802: LD_INT 3
86804: MINUS
86805: ARRAY
86806: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
86807: LD_ADDR_OWVAR 45
86811: PUSH
86812: LD_INT 9
86814: ST_TO_ADDR
// end ; 10 .. 13 :
86815: GO 87325
86817: LD_INT 10
86819: DOUBLE
86820: GREATEREQUAL
86821: IFFALSE 86829
86823: LD_INT 13
86825: DOUBLE
86826: LESSEQUAL
86827: IFTRUE 86831
86829: GO 86908
86831: POP
// begin bc_type := b_lab_full ;
86832: LD_ADDR_OWVAR 42
86836: PUSH
86837: LD_INT 8
86839: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
86840: LD_ADDR_OWVAR 44
86844: PUSH
86845: LD_INT 10
86847: PUSH
86848: LD_INT 12
86850: PUSH
86851: LD_INT 14
86853: PUSH
86854: LD_INT 13
86856: PUSH
86857: EMPTY
86858: LIST
86859: LIST
86860: LIST
86861: LIST
86862: PUSH
86863: LD_VAR 0 2
86867: PUSH
86868: LD_INT 9
86870: MINUS
86871: ARRAY
86872: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
86873: LD_ADDR_OWVAR 45
86877: PUSH
86878: LD_INT 11
86880: PUSH
86881: LD_INT 15
86883: PUSH
86884: LD_INT 12
86886: PUSH
86887: LD_INT 15
86889: PUSH
86890: EMPTY
86891: LIST
86892: LIST
86893: LIST
86894: LIST
86895: PUSH
86896: LD_VAR 0 2
86900: PUSH
86901: LD_INT 9
86903: MINUS
86904: ARRAY
86905: ST_TO_ADDR
// end ; 14 :
86906: GO 87325
86908: LD_INT 14
86910: DOUBLE
86911: EQUAL
86912: IFTRUE 86916
86914: GO 86927
86916: POP
// bc_type := b_workshop ; 15 :
86917: LD_ADDR_OWVAR 42
86921: PUSH
86922: LD_INT 2
86924: ST_TO_ADDR
86925: GO 87325
86927: LD_INT 15
86929: DOUBLE
86930: EQUAL
86931: IFTRUE 86935
86933: GO 86946
86935: POP
// bc_type := b_factory ; 16 :
86936: LD_ADDR_OWVAR 42
86940: PUSH
86941: LD_INT 3
86943: ST_TO_ADDR
86944: GO 87325
86946: LD_INT 16
86948: DOUBLE
86949: EQUAL
86950: IFTRUE 86954
86952: GO 86965
86954: POP
// bc_type := b_ext_gun ; 17 :
86955: LD_ADDR_OWVAR 42
86959: PUSH
86960: LD_INT 17
86962: ST_TO_ADDR
86963: GO 87325
86965: LD_INT 17
86967: DOUBLE
86968: EQUAL
86969: IFTRUE 86973
86971: GO 87001
86973: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
86974: LD_ADDR_OWVAR 42
86978: PUSH
86979: LD_INT 19
86981: PUSH
86982: LD_INT 23
86984: PUSH
86985: LD_INT 19
86987: PUSH
86988: EMPTY
86989: LIST
86990: LIST
86991: LIST
86992: PUSH
86993: LD_VAR 0 1
86997: ARRAY
86998: ST_TO_ADDR
86999: GO 87325
87001: LD_INT 18
87003: DOUBLE
87004: EQUAL
87005: IFTRUE 87009
87007: GO 87020
87009: POP
// bc_type := b_ext_radar ; 19 :
87010: LD_ADDR_OWVAR 42
87014: PUSH
87015: LD_INT 20
87017: ST_TO_ADDR
87018: GO 87325
87020: LD_INT 19
87022: DOUBLE
87023: EQUAL
87024: IFTRUE 87028
87026: GO 87039
87028: POP
// bc_type := b_ext_radio ; 20 :
87029: LD_ADDR_OWVAR 42
87033: PUSH
87034: LD_INT 22
87036: ST_TO_ADDR
87037: GO 87325
87039: LD_INT 20
87041: DOUBLE
87042: EQUAL
87043: IFTRUE 87047
87045: GO 87058
87047: POP
// bc_type := b_ext_siberium ; 21 :
87048: LD_ADDR_OWVAR 42
87052: PUSH
87053: LD_INT 21
87055: ST_TO_ADDR
87056: GO 87325
87058: LD_INT 21
87060: DOUBLE
87061: EQUAL
87062: IFTRUE 87066
87064: GO 87077
87066: POP
// bc_type := b_ext_computer ; 22 :
87067: LD_ADDR_OWVAR 42
87071: PUSH
87072: LD_INT 24
87074: ST_TO_ADDR
87075: GO 87325
87077: LD_INT 22
87079: DOUBLE
87080: EQUAL
87081: IFTRUE 87085
87083: GO 87096
87085: POP
// bc_type := b_ext_track ; 23 :
87086: LD_ADDR_OWVAR 42
87090: PUSH
87091: LD_INT 16
87093: ST_TO_ADDR
87094: GO 87325
87096: LD_INT 23
87098: DOUBLE
87099: EQUAL
87100: IFTRUE 87104
87102: GO 87115
87104: POP
// bc_type := b_ext_laser ; 24 :
87105: LD_ADDR_OWVAR 42
87109: PUSH
87110: LD_INT 25
87112: ST_TO_ADDR
87113: GO 87325
87115: LD_INT 24
87117: DOUBLE
87118: EQUAL
87119: IFTRUE 87123
87121: GO 87134
87123: POP
// bc_type := b_control_tower ; 25 :
87124: LD_ADDR_OWVAR 42
87128: PUSH
87129: LD_INT 36
87131: ST_TO_ADDR
87132: GO 87325
87134: LD_INT 25
87136: DOUBLE
87137: EQUAL
87138: IFTRUE 87142
87140: GO 87153
87142: POP
// bc_type := b_breastwork ; 26 :
87143: LD_ADDR_OWVAR 42
87147: PUSH
87148: LD_INT 31
87150: ST_TO_ADDR
87151: GO 87325
87153: LD_INT 26
87155: DOUBLE
87156: EQUAL
87157: IFTRUE 87161
87159: GO 87172
87161: POP
// bc_type := b_bunker ; 27 :
87162: LD_ADDR_OWVAR 42
87166: PUSH
87167: LD_INT 32
87169: ST_TO_ADDR
87170: GO 87325
87172: LD_INT 27
87174: DOUBLE
87175: EQUAL
87176: IFTRUE 87180
87178: GO 87191
87180: POP
// bc_type := b_turret ; 28 :
87181: LD_ADDR_OWVAR 42
87185: PUSH
87186: LD_INT 33
87188: ST_TO_ADDR
87189: GO 87325
87191: LD_INT 28
87193: DOUBLE
87194: EQUAL
87195: IFTRUE 87199
87197: GO 87210
87199: POP
// bc_type := b_armoury ; 29 :
87200: LD_ADDR_OWVAR 42
87204: PUSH
87205: LD_INT 4
87207: ST_TO_ADDR
87208: GO 87325
87210: LD_INT 29
87212: DOUBLE
87213: EQUAL
87214: IFTRUE 87218
87216: GO 87229
87218: POP
// bc_type := b_barracks ; 30 :
87219: LD_ADDR_OWVAR 42
87223: PUSH
87224: LD_INT 5
87226: ST_TO_ADDR
87227: GO 87325
87229: LD_INT 30
87231: DOUBLE
87232: EQUAL
87233: IFTRUE 87237
87235: GO 87248
87237: POP
// bc_type := b_solar_power ; 31 :
87238: LD_ADDR_OWVAR 42
87242: PUSH
87243: LD_INT 27
87245: ST_TO_ADDR
87246: GO 87325
87248: LD_INT 31
87250: DOUBLE
87251: EQUAL
87252: IFTRUE 87256
87254: GO 87267
87256: POP
// bc_type := b_oil_power ; 32 :
87257: LD_ADDR_OWVAR 42
87261: PUSH
87262: LD_INT 26
87264: ST_TO_ADDR
87265: GO 87325
87267: LD_INT 32
87269: DOUBLE
87270: EQUAL
87271: IFTRUE 87275
87273: GO 87286
87275: POP
// bc_type := b_siberite_power ; 33 :
87276: LD_ADDR_OWVAR 42
87280: PUSH
87281: LD_INT 28
87283: ST_TO_ADDR
87284: GO 87325
87286: LD_INT 33
87288: DOUBLE
87289: EQUAL
87290: IFTRUE 87294
87292: GO 87305
87294: POP
// bc_type := b_oil_mine ; 34 :
87295: LD_ADDR_OWVAR 42
87299: PUSH
87300: LD_INT 29
87302: ST_TO_ADDR
87303: GO 87325
87305: LD_INT 34
87307: DOUBLE
87308: EQUAL
87309: IFTRUE 87313
87311: GO 87324
87313: POP
// bc_type := b_siberite_mine ; end ;
87314: LD_ADDR_OWVAR 42
87318: PUSH
87319: LD_INT 30
87321: ST_TO_ADDR
87322: GO 87325
87324: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
87325: LD_ADDR_VAR 0 8
87329: PUSH
87330: LD_VAR 0 5
87334: PPUSH
87335: LD_VAR 0 6
87339: PPUSH
87340: LD_VAR 0 3
87344: PPUSH
87345: CALL_OW 47
87349: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
87350: LD_OWVAR 42
87354: PUSH
87355: LD_INT 32
87357: PUSH
87358: LD_INT 33
87360: PUSH
87361: EMPTY
87362: LIST
87363: LIST
87364: IN
87365: IFFALSE 87381
// PlaceWeaponTurret ( b , weapon ) ;
87367: LD_VAR 0 8
87371: PPUSH
87372: LD_VAR 0 4
87376: PPUSH
87377: CALL_OW 431
// end ;
87381: LD_VAR 0 7
87385: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
87386: LD_INT 0
87388: PPUSH
87389: PPUSH
87390: PPUSH
87391: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
87392: LD_ADDR_VAR 0 4
87396: PUSH
87397: LD_INT 22
87399: PUSH
87400: LD_OWVAR 2
87404: PUSH
87405: EMPTY
87406: LIST
87407: LIST
87408: PUSH
87409: LD_INT 2
87411: PUSH
87412: LD_INT 30
87414: PUSH
87415: LD_INT 0
87417: PUSH
87418: EMPTY
87419: LIST
87420: LIST
87421: PUSH
87422: LD_INT 30
87424: PUSH
87425: LD_INT 1
87427: PUSH
87428: EMPTY
87429: LIST
87430: LIST
87431: PUSH
87432: EMPTY
87433: LIST
87434: LIST
87435: LIST
87436: PUSH
87437: EMPTY
87438: LIST
87439: LIST
87440: PPUSH
87441: CALL_OW 69
87445: ST_TO_ADDR
// if not tmp then
87446: LD_VAR 0 4
87450: NOT
87451: IFFALSE 87455
// exit ;
87453: GO 87514
// for i in tmp do
87455: LD_ADDR_VAR 0 2
87459: PUSH
87460: LD_VAR 0 4
87464: PUSH
87465: FOR_IN
87466: IFFALSE 87512
// for j = 1 to 3 do
87468: LD_ADDR_VAR 0 3
87472: PUSH
87473: DOUBLE
87474: LD_INT 1
87476: DEC
87477: ST_TO_ADDR
87478: LD_INT 3
87480: PUSH
87481: FOR_TO
87482: IFFALSE 87508
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
87484: LD_VAR 0 2
87488: PPUSH
87489: CALL_OW 274
87493: PPUSH
87494: LD_VAR 0 3
87498: PPUSH
87499: LD_INT 99999
87501: PPUSH
87502: CALL_OW 277
87506: GO 87481
87508: POP
87509: POP
87510: GO 87465
87512: POP
87513: POP
// end ;
87514: LD_VAR 0 1
87518: RET
// export function hHackSetLevel10 ; var i , j ; begin
87519: LD_INT 0
87521: PPUSH
87522: PPUSH
87523: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
87524: LD_ADDR_VAR 0 2
87528: PUSH
87529: LD_INT 21
87531: PUSH
87532: LD_INT 1
87534: PUSH
87535: EMPTY
87536: LIST
87537: LIST
87538: PPUSH
87539: CALL_OW 69
87543: PUSH
87544: FOR_IN
87545: IFFALSE 87597
// if IsSelected ( i ) then
87547: LD_VAR 0 2
87551: PPUSH
87552: CALL_OW 306
87556: IFFALSE 87595
// begin for j := 1 to 4 do
87558: LD_ADDR_VAR 0 3
87562: PUSH
87563: DOUBLE
87564: LD_INT 1
87566: DEC
87567: ST_TO_ADDR
87568: LD_INT 4
87570: PUSH
87571: FOR_TO
87572: IFFALSE 87593
// SetSkill ( i , j , 10 ) ;
87574: LD_VAR 0 2
87578: PPUSH
87579: LD_VAR 0 3
87583: PPUSH
87584: LD_INT 10
87586: PPUSH
87587: CALL_OW 237
87591: GO 87571
87593: POP
87594: POP
// end ;
87595: GO 87544
87597: POP
87598: POP
// end ;
87599: LD_VAR 0 1
87603: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
87604: LD_INT 0
87606: PPUSH
87607: PPUSH
87608: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
87609: LD_ADDR_VAR 0 2
87613: PUSH
87614: LD_INT 22
87616: PUSH
87617: LD_OWVAR 2
87621: PUSH
87622: EMPTY
87623: LIST
87624: LIST
87625: PUSH
87626: LD_INT 21
87628: PUSH
87629: LD_INT 1
87631: PUSH
87632: EMPTY
87633: LIST
87634: LIST
87635: PUSH
87636: EMPTY
87637: LIST
87638: LIST
87639: PPUSH
87640: CALL_OW 69
87644: PUSH
87645: FOR_IN
87646: IFFALSE 87687
// begin for j := 1 to 4 do
87648: LD_ADDR_VAR 0 3
87652: PUSH
87653: DOUBLE
87654: LD_INT 1
87656: DEC
87657: ST_TO_ADDR
87658: LD_INT 4
87660: PUSH
87661: FOR_TO
87662: IFFALSE 87683
// SetSkill ( i , j , 10 ) ;
87664: LD_VAR 0 2
87668: PPUSH
87669: LD_VAR 0 3
87673: PPUSH
87674: LD_INT 10
87676: PPUSH
87677: CALL_OW 237
87681: GO 87661
87683: POP
87684: POP
// end ;
87685: GO 87645
87687: POP
87688: POP
// end ;
87689: LD_VAR 0 1
87693: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
87694: LD_INT 0
87696: PPUSH
// uc_side := your_side ;
87697: LD_ADDR_OWVAR 20
87701: PUSH
87702: LD_OWVAR 2
87706: ST_TO_ADDR
// uc_nation := nation ;
87707: LD_ADDR_OWVAR 21
87711: PUSH
87712: LD_VAR 0 1
87716: ST_TO_ADDR
// InitHc ;
87717: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
87721: LD_INT 0
87723: PPUSH
87724: LD_VAR 0 2
87728: PPUSH
87729: LD_VAR 0 3
87733: PPUSH
87734: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
87738: LD_VAR 0 4
87742: PPUSH
87743: LD_VAR 0 5
87747: PPUSH
87748: CALL_OW 428
87752: PUSH
87753: LD_INT 0
87755: EQUAL
87756: IFFALSE 87780
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
87758: CALL_OW 44
87762: PPUSH
87763: LD_VAR 0 4
87767: PPUSH
87768: LD_VAR 0 5
87772: PPUSH
87773: LD_INT 1
87775: PPUSH
87776: CALL_OW 48
// end ;
87780: LD_VAR 0 6
87784: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
87785: LD_INT 0
87787: PPUSH
87788: PPUSH
// uc_side := your_side ;
87789: LD_ADDR_OWVAR 20
87793: PUSH
87794: LD_OWVAR 2
87798: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
87799: LD_VAR 0 1
87803: PUSH
87804: LD_INT 1
87806: PUSH
87807: LD_INT 2
87809: PUSH
87810: LD_INT 3
87812: PUSH
87813: LD_INT 4
87815: PUSH
87816: LD_INT 5
87818: PUSH
87819: EMPTY
87820: LIST
87821: LIST
87822: LIST
87823: LIST
87824: LIST
87825: IN
87826: IFFALSE 87838
// uc_nation := nation_american else
87828: LD_ADDR_OWVAR 21
87832: PUSH
87833: LD_INT 1
87835: ST_TO_ADDR
87836: GO 87881
// if chassis in [ 11 , 12 , 13 , 14 ] then
87838: LD_VAR 0 1
87842: PUSH
87843: LD_INT 11
87845: PUSH
87846: LD_INT 12
87848: PUSH
87849: LD_INT 13
87851: PUSH
87852: LD_INT 14
87854: PUSH
87855: EMPTY
87856: LIST
87857: LIST
87858: LIST
87859: LIST
87860: IN
87861: IFFALSE 87873
// uc_nation := nation_arabian else
87863: LD_ADDR_OWVAR 21
87867: PUSH
87868: LD_INT 2
87870: ST_TO_ADDR
87871: GO 87881
// uc_nation := nation_russian ;
87873: LD_ADDR_OWVAR 21
87877: PUSH
87878: LD_INT 3
87880: ST_TO_ADDR
// vc_chassis := chassis ;
87881: LD_ADDR_OWVAR 37
87885: PUSH
87886: LD_VAR 0 1
87890: ST_TO_ADDR
// vc_engine := engine ;
87891: LD_ADDR_OWVAR 39
87895: PUSH
87896: LD_VAR 0 2
87900: ST_TO_ADDR
// vc_control := control ;
87901: LD_ADDR_OWVAR 38
87905: PUSH
87906: LD_VAR 0 3
87910: ST_TO_ADDR
// vc_weapon := weapon ;
87911: LD_ADDR_OWVAR 40
87915: PUSH
87916: LD_VAR 0 4
87920: ST_TO_ADDR
// un := CreateVehicle ;
87921: LD_ADDR_VAR 0 8
87925: PUSH
87926: CALL_OW 45
87930: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
87931: LD_VAR 0 8
87935: PPUSH
87936: LD_INT 0
87938: PPUSH
87939: LD_INT 5
87941: PPUSH
87942: CALL_OW 12
87946: PPUSH
87947: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
87951: LD_VAR 0 8
87955: PPUSH
87956: LD_VAR 0 5
87960: PPUSH
87961: LD_VAR 0 6
87965: PPUSH
87966: LD_INT 1
87968: PPUSH
87969: CALL_OW 48
// end ;
87973: LD_VAR 0 7
87977: RET
// export hInvincible ; every 1 do
87978: GO 87980
87980: DISABLE
// hInvincible := [ ] ;
87981: LD_ADDR_EXP 132
87985: PUSH
87986: EMPTY
87987: ST_TO_ADDR
87988: END
// every 10 do var i ;
87989: GO 87991
87991: DISABLE
87992: LD_INT 0
87994: PPUSH
// begin enable ;
87995: ENABLE
// if not hInvincible then
87996: LD_EXP 132
88000: NOT
88001: IFFALSE 88005
// exit ;
88003: GO 88049
// for i in hInvincible do
88005: LD_ADDR_VAR 0 1
88009: PUSH
88010: LD_EXP 132
88014: PUSH
88015: FOR_IN
88016: IFFALSE 88047
// if GetLives ( i ) < 1000 then
88018: LD_VAR 0 1
88022: PPUSH
88023: CALL_OW 256
88027: PUSH
88028: LD_INT 1000
88030: LESS
88031: IFFALSE 88045
// SetLives ( i , 1000 ) ;
88033: LD_VAR 0 1
88037: PPUSH
88038: LD_INT 1000
88040: PPUSH
88041: CALL_OW 234
88045: GO 88015
88047: POP
88048: POP
// end ;
88049: PPOPN 1
88051: END
// export function hHackInvincible ; var i ; begin
88052: LD_INT 0
88054: PPUSH
88055: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
88056: LD_ADDR_VAR 0 2
88060: PUSH
88061: LD_INT 2
88063: PUSH
88064: LD_INT 21
88066: PUSH
88067: LD_INT 1
88069: PUSH
88070: EMPTY
88071: LIST
88072: LIST
88073: PUSH
88074: LD_INT 21
88076: PUSH
88077: LD_INT 2
88079: PUSH
88080: EMPTY
88081: LIST
88082: LIST
88083: PUSH
88084: EMPTY
88085: LIST
88086: LIST
88087: LIST
88088: PPUSH
88089: CALL_OW 69
88093: PUSH
88094: FOR_IN
88095: IFFALSE 88156
// if IsSelected ( i ) then
88097: LD_VAR 0 2
88101: PPUSH
88102: CALL_OW 306
88106: IFFALSE 88154
// begin if i in hInvincible then
88108: LD_VAR 0 2
88112: PUSH
88113: LD_EXP 132
88117: IN
88118: IFFALSE 88138
// hInvincible := hInvincible diff i else
88120: LD_ADDR_EXP 132
88124: PUSH
88125: LD_EXP 132
88129: PUSH
88130: LD_VAR 0 2
88134: DIFF
88135: ST_TO_ADDR
88136: GO 88154
// hInvincible := hInvincible union i ;
88138: LD_ADDR_EXP 132
88142: PUSH
88143: LD_EXP 132
88147: PUSH
88148: LD_VAR 0 2
88152: UNION
88153: ST_TO_ADDR
// end ;
88154: GO 88094
88156: POP
88157: POP
// end ;
88158: LD_VAR 0 1
88162: RET
// export function hHackInvisible ; var i , j ; begin
88163: LD_INT 0
88165: PPUSH
88166: PPUSH
88167: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
88168: LD_ADDR_VAR 0 2
88172: PUSH
88173: LD_INT 21
88175: PUSH
88176: LD_INT 1
88178: PUSH
88179: EMPTY
88180: LIST
88181: LIST
88182: PPUSH
88183: CALL_OW 69
88187: PUSH
88188: FOR_IN
88189: IFFALSE 88213
// if IsSelected ( i ) then
88191: LD_VAR 0 2
88195: PPUSH
88196: CALL_OW 306
88200: IFFALSE 88211
// ComForceInvisible ( i ) ;
88202: LD_VAR 0 2
88206: PPUSH
88207: CALL_OW 496
88211: GO 88188
88213: POP
88214: POP
// end ;
88215: LD_VAR 0 1
88219: RET
// export function hHackChangeYourSide ; begin
88220: LD_INT 0
88222: PPUSH
// if your_side = 8 then
88223: LD_OWVAR 2
88227: PUSH
88228: LD_INT 8
88230: EQUAL
88231: IFFALSE 88243
// your_side := 0 else
88233: LD_ADDR_OWVAR 2
88237: PUSH
88238: LD_INT 0
88240: ST_TO_ADDR
88241: GO 88257
// your_side := your_side + 1 ;
88243: LD_ADDR_OWVAR 2
88247: PUSH
88248: LD_OWVAR 2
88252: PUSH
88253: LD_INT 1
88255: PLUS
88256: ST_TO_ADDR
// end ;
88257: LD_VAR 0 1
88261: RET
// export function hHackChangeUnitSide ; var i , j ; begin
88262: LD_INT 0
88264: PPUSH
88265: PPUSH
88266: PPUSH
// for i in all_units do
88267: LD_ADDR_VAR 0 2
88271: PUSH
88272: LD_OWVAR 3
88276: PUSH
88277: FOR_IN
88278: IFFALSE 88356
// if IsSelected ( i ) then
88280: LD_VAR 0 2
88284: PPUSH
88285: CALL_OW 306
88289: IFFALSE 88354
// begin j := GetSide ( i ) ;
88291: LD_ADDR_VAR 0 3
88295: PUSH
88296: LD_VAR 0 2
88300: PPUSH
88301: CALL_OW 255
88305: ST_TO_ADDR
// if j = 8 then
88306: LD_VAR 0 3
88310: PUSH
88311: LD_INT 8
88313: EQUAL
88314: IFFALSE 88326
// j := 0 else
88316: LD_ADDR_VAR 0 3
88320: PUSH
88321: LD_INT 0
88323: ST_TO_ADDR
88324: GO 88340
// j := j + 1 ;
88326: LD_ADDR_VAR 0 3
88330: PUSH
88331: LD_VAR 0 3
88335: PUSH
88336: LD_INT 1
88338: PLUS
88339: ST_TO_ADDR
// SetSide ( i , j ) ;
88340: LD_VAR 0 2
88344: PPUSH
88345: LD_VAR 0 3
88349: PPUSH
88350: CALL_OW 235
// end ;
88354: GO 88277
88356: POP
88357: POP
// end ;
88358: LD_VAR 0 1
88362: RET
// export function hHackFog ; begin
88363: LD_INT 0
88365: PPUSH
// FogOff ( true ) ;
88366: LD_INT 1
88368: PPUSH
88369: CALL_OW 344
// end ;
88373: LD_VAR 0 1
88377: RET
// export function hHackTeleport ( unit , x , y ) ; begin
88378: LD_INT 0
88380: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
88381: LD_VAR 0 1
88385: PPUSH
88386: LD_VAR 0 2
88390: PPUSH
88391: LD_VAR 0 3
88395: PPUSH
88396: LD_INT 1
88398: PPUSH
88399: LD_INT 1
88401: PPUSH
88402: CALL_OW 483
// CenterOnXY ( x , y ) ;
88406: LD_VAR 0 2
88410: PPUSH
88411: LD_VAR 0 3
88415: PPUSH
88416: CALL_OW 84
// end ;
88420: LD_VAR 0 4
88424: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
88425: LD_INT 0
88427: PPUSH
88428: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
88429: LD_VAR 0 1
88433: NOT
88434: IFTRUE 88453
88436: PUSH
88437: LD_VAR 0 2
88441: PPUSH
88442: LD_VAR 0 3
88446: PPUSH
88447: CALL_OW 488
88451: NOT
88452: OR
88453: IFTRUE 88488
88455: PUSH
88456: LD_VAR 0 1
88460: PPUSH
88461: CALL_OW 266
88465: PUSH
88466: LD_INT 3
88468: NONEQUAL
88469: IFFALSE 88487
88471: PUSH
88472: LD_VAR 0 1
88476: PPUSH
88477: CALL_OW 247
88481: PUSH
88482: LD_INT 1
88484: EQUAL
88485: NOT
88486: AND
88487: OR
88488: IFFALSE 88492
// exit ;
88490: GO 88774
// if GetType ( factory ) = unit_human then
88492: LD_VAR 0 1
88496: PPUSH
88497: CALL_OW 247
88501: PUSH
88502: LD_INT 1
88504: EQUAL
88505: IFFALSE 88522
// factory := IsInUnit ( factory ) ;
88507: LD_ADDR_VAR 0 1
88511: PUSH
88512: LD_VAR 0 1
88516: PPUSH
88517: CALL_OW 310
88521: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
88522: LD_VAR 0 1
88526: PPUSH
88527: CALL_OW 266
88531: PUSH
88532: LD_INT 3
88534: NONEQUAL
88535: IFFALSE 88539
// exit ;
88537: GO 88774
// for i := 1 to Count ( factoryWaypoints ) do
88539: LD_ADDR_VAR 0 5
88543: PUSH
88544: DOUBLE
88545: LD_INT 1
88547: DEC
88548: ST_TO_ADDR
88549: LD_EXP 133
88553: PPUSH
88554: CALL 32464 0 1
88558: PUSH
88559: FOR_TO
88560: IFFALSE 88722
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
88562: LD_VAR 0 2
88566: PPUSH
88567: LD_VAR 0 3
88571: PPUSH
88572: CALL_OW 428
88576: PUSH
88577: LD_EXP 133
88581: PUSH
88582: LD_VAR 0 5
88586: ARRAY
88587: PUSH
88588: LD_INT 2
88590: ARRAY
88591: EQUAL
88592: IFFALSE 88624
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88594: LD_ADDR_EXP 133
88598: PUSH
88599: LD_EXP 133
88603: PPUSH
88604: LD_VAR 0 5
88608: PPUSH
88609: CALL_OW 3
88613: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88614: CALL 88779 0 0
// exit ;
88618: POP
88619: POP
88620: GO 88774
// end else
88622: GO 88720
// if factory = factoryWaypoints [ i ] [ 2 ] then
88624: LD_VAR 0 1
88628: PUSH
88629: LD_EXP 133
88633: PUSH
88634: LD_VAR 0 5
88638: ARRAY
88639: PUSH
88640: LD_INT 2
88642: ARRAY
88643: EQUAL
88644: IFFALSE 88720
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88646: LD_ADDR_EXP 133
88650: PUSH
88651: LD_EXP 133
88655: PPUSH
88656: LD_VAR 0 5
88660: PPUSH
88661: CALL_OW 3
88665: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88666: LD_ADDR_EXP 133
88670: PUSH
88671: LD_EXP 133
88675: PPUSH
88676: LD_VAR 0 1
88680: PPUSH
88681: CALL_OW 255
88685: PUSH
88686: LD_VAR 0 1
88690: PUSH
88691: LD_VAR 0 2
88695: PUSH
88696: LD_VAR 0 3
88700: PUSH
88701: EMPTY
88702: LIST
88703: LIST
88704: LIST
88705: LIST
88706: PPUSH
88707: CALL 68440 0 2
88711: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88712: CALL 88779 0 0
// exit ;
88716: POP
88717: POP
88718: GO 88774
// end ; end ;
88720: GO 88559
88722: POP
88723: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88724: LD_ADDR_EXP 133
88728: PUSH
88729: LD_EXP 133
88733: PPUSH
88734: LD_VAR 0 1
88738: PPUSH
88739: CALL_OW 255
88743: PUSH
88744: LD_VAR 0 1
88748: PUSH
88749: LD_VAR 0 2
88753: PUSH
88754: LD_VAR 0 3
88758: PUSH
88759: EMPTY
88760: LIST
88761: LIST
88762: LIST
88763: LIST
88764: PPUSH
88765: CALL 68440 0 2
88769: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88770: CALL 88779 0 0
// end ;
88774: LD_VAR 0 4
88778: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
88779: LD_INT 0
88781: PPUSH
88782: PPUSH
88783: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
88784: LD_STRING resetFactoryWaypoint();
88786: PPUSH
88787: CALL_OW 559
// if factoryWaypoints then
88791: LD_EXP 133
88795: IFFALSE 88916
// begin list := factoryWaypoints ;
88797: LD_ADDR_VAR 0 3
88801: PUSH
88802: LD_EXP 133
88806: ST_TO_ADDR
// for i := 1 to list do
88807: LD_ADDR_VAR 0 2
88811: PUSH
88812: DOUBLE
88813: LD_INT 1
88815: DEC
88816: ST_TO_ADDR
88817: LD_VAR 0 3
88821: PUSH
88822: FOR_TO
88823: IFFALSE 88914
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
88825: LD_STRING setFactoryWaypointXY(
88827: PUSH
88828: LD_VAR 0 3
88832: PUSH
88833: LD_VAR 0 2
88837: ARRAY
88838: PUSH
88839: LD_INT 1
88841: ARRAY
88842: STR
88843: PUSH
88844: LD_STRING ,
88846: STR
88847: PUSH
88848: LD_VAR 0 3
88852: PUSH
88853: LD_VAR 0 2
88857: ARRAY
88858: PUSH
88859: LD_INT 2
88861: ARRAY
88862: STR
88863: PUSH
88864: LD_STRING ,
88866: STR
88867: PUSH
88868: LD_VAR 0 3
88872: PUSH
88873: LD_VAR 0 2
88877: ARRAY
88878: PUSH
88879: LD_INT 3
88881: ARRAY
88882: STR
88883: PUSH
88884: LD_STRING ,
88886: STR
88887: PUSH
88888: LD_VAR 0 3
88892: PUSH
88893: LD_VAR 0 2
88897: ARRAY
88898: PUSH
88899: LD_INT 4
88901: ARRAY
88902: STR
88903: PUSH
88904: LD_STRING )
88906: STR
88907: PPUSH
88908: CALL_OW 559
88912: GO 88822
88914: POP
88915: POP
// end ; end ;
88916: LD_VAR 0 1
88920: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
88921: LD_INT 0
88923: PPUSH
// if HexInfo ( x , y ) = warehouse then
88924: LD_VAR 0 2
88928: PPUSH
88929: LD_VAR 0 3
88933: PPUSH
88934: CALL_OW 428
88938: PUSH
88939: LD_VAR 0 1
88943: EQUAL
88944: IFFALSE 88971
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
88946: LD_ADDR_EXP 135
88950: PUSH
88951: LD_EXP 135
88955: PPUSH
88956: LD_VAR 0 1
88960: PPUSH
88961: LD_INT 0
88963: PPUSH
88964: CALL_OW 1
88968: ST_TO_ADDR
88969: GO 89022
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
88971: LD_ADDR_EXP 135
88975: PUSH
88976: LD_EXP 135
88980: PPUSH
88981: LD_VAR 0 1
88985: PPUSH
88986: LD_VAR 0 1
88990: PPUSH
88991: CALL_OW 255
88995: PUSH
88996: LD_VAR 0 1
89000: PUSH
89001: LD_VAR 0 2
89005: PUSH
89006: LD_VAR 0 3
89010: PUSH
89011: EMPTY
89012: LIST
89013: LIST
89014: LIST
89015: LIST
89016: PPUSH
89017: CALL_OW 1
89021: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
89022: CALL 89031 0 0
// end ;
89026: LD_VAR 0 4
89030: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
89031: LD_INT 0
89033: PPUSH
89034: PPUSH
89035: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
89036: LD_STRING resetWarehouseGatheringPoints();
89038: PPUSH
89039: CALL_OW 559
// if warehouseGatheringPoints then
89043: LD_EXP 135
89047: IFFALSE 89173
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
89049: LD_ADDR_VAR 0 3
89053: PUSH
89054: LD_EXP 135
89058: PPUSH
89059: CALL 72374 0 1
89063: ST_TO_ADDR
// for i := 1 to list do
89064: LD_ADDR_VAR 0 2
89068: PUSH
89069: DOUBLE
89070: LD_INT 1
89072: DEC
89073: ST_TO_ADDR
89074: LD_VAR 0 3
89078: PUSH
89079: FOR_TO
89080: IFFALSE 89171
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
89082: LD_STRING setWarehouseGatheringPointXY(
89084: PUSH
89085: LD_VAR 0 3
89089: PUSH
89090: LD_VAR 0 2
89094: ARRAY
89095: PUSH
89096: LD_INT 1
89098: ARRAY
89099: STR
89100: PUSH
89101: LD_STRING ,
89103: STR
89104: PUSH
89105: LD_VAR 0 3
89109: PUSH
89110: LD_VAR 0 2
89114: ARRAY
89115: PUSH
89116: LD_INT 2
89118: ARRAY
89119: STR
89120: PUSH
89121: LD_STRING ,
89123: STR
89124: PUSH
89125: LD_VAR 0 3
89129: PUSH
89130: LD_VAR 0 2
89134: ARRAY
89135: PUSH
89136: LD_INT 3
89138: ARRAY
89139: STR
89140: PUSH
89141: LD_STRING ,
89143: STR
89144: PUSH
89145: LD_VAR 0 3
89149: PUSH
89150: LD_VAR 0 2
89154: ARRAY
89155: PUSH
89156: LD_INT 4
89158: ARRAY
89159: STR
89160: PUSH
89161: LD_STRING )
89163: STR
89164: PPUSH
89165: CALL_OW 559
89169: GO 89079
89171: POP
89172: POP
// end ; end ;
89173: LD_VAR 0 1
89177: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
89178: LD_EXP 135
89182: IFFALSE 89877
89184: GO 89186
89186: DISABLE
89187: LD_INT 0
89189: PPUSH
89190: PPUSH
89191: PPUSH
89192: PPUSH
89193: PPUSH
89194: PPUSH
89195: PPUSH
89196: PPUSH
89197: PPUSH
// begin enable ;
89198: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
89199: LD_ADDR_VAR 0 3
89203: PUSH
89204: LD_EXP 135
89208: PPUSH
89209: CALL 72374 0 1
89213: ST_TO_ADDR
// if not list then
89214: LD_VAR 0 3
89218: NOT
89219: IFFALSE 89223
// exit ;
89221: GO 89877
// for i := 1 to list do
89223: LD_ADDR_VAR 0 1
89227: PUSH
89228: DOUBLE
89229: LD_INT 1
89231: DEC
89232: ST_TO_ADDR
89233: LD_VAR 0 3
89237: PUSH
89238: FOR_TO
89239: IFFALSE 89875
// begin depot := list [ i ] [ 2 ] ;
89241: LD_ADDR_VAR 0 8
89245: PUSH
89246: LD_VAR 0 3
89250: PUSH
89251: LD_VAR 0 1
89255: ARRAY
89256: PUSH
89257: LD_INT 2
89259: ARRAY
89260: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
89261: LD_ADDR_VAR 0 5
89265: PUSH
89266: LD_VAR 0 3
89270: PUSH
89271: LD_VAR 0 1
89275: ARRAY
89276: PUSH
89277: LD_INT 1
89279: ARRAY
89280: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
89281: LD_VAR 0 8
89285: PPUSH
89286: CALL_OW 301
89290: IFTRUE 89309
89292: PUSH
89293: LD_VAR 0 5
89297: PUSH
89298: LD_VAR 0 8
89302: PPUSH
89303: CALL_OW 255
89307: NONEQUAL
89308: OR
89309: IFFALSE 89338
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
89311: LD_ADDR_EXP 135
89315: PUSH
89316: LD_EXP 135
89320: PPUSH
89321: LD_VAR 0 8
89325: PPUSH
89326: LD_INT 0
89328: PPUSH
89329: CALL_OW 1
89333: ST_TO_ADDR
// exit ;
89334: POP
89335: POP
89336: GO 89877
// end ; x := list [ i ] [ 3 ] ;
89338: LD_ADDR_VAR 0 6
89342: PUSH
89343: LD_VAR 0 3
89347: PUSH
89348: LD_VAR 0 1
89352: ARRAY
89353: PUSH
89354: LD_INT 3
89356: ARRAY
89357: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
89358: LD_ADDR_VAR 0 7
89362: PUSH
89363: LD_VAR 0 3
89367: PUSH
89368: LD_VAR 0 1
89372: ARRAY
89373: PUSH
89374: LD_INT 4
89376: ARRAY
89377: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
89378: LD_ADDR_VAR 0 9
89382: PUSH
89383: LD_VAR 0 6
89387: PPUSH
89388: LD_VAR 0 7
89392: PPUSH
89393: LD_INT 16
89395: PPUSH
89396: CALL 70948 0 3
89400: ST_TO_ADDR
// if not cratesNearbyPoint then
89401: LD_VAR 0 9
89405: NOT
89406: IFFALSE 89412
// exit ;
89408: POP
89409: POP
89410: GO 89877
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
89412: LD_ADDR_VAR 0 4
89416: PUSH
89417: LD_INT 22
89419: PUSH
89420: LD_VAR 0 5
89424: PUSH
89425: EMPTY
89426: LIST
89427: LIST
89428: PUSH
89429: LD_INT 3
89431: PUSH
89432: LD_INT 60
89434: PUSH
89435: EMPTY
89436: LIST
89437: PUSH
89438: EMPTY
89439: LIST
89440: LIST
89441: PUSH
89442: LD_INT 91
89444: PUSH
89445: LD_VAR 0 8
89449: PUSH
89450: LD_INT 6
89452: PUSH
89453: EMPTY
89454: LIST
89455: LIST
89456: LIST
89457: PUSH
89458: LD_INT 2
89460: PUSH
89461: LD_INT 25
89463: PUSH
89464: LD_INT 2
89466: PUSH
89467: EMPTY
89468: LIST
89469: LIST
89470: PUSH
89471: LD_INT 25
89473: PUSH
89474: LD_INT 16
89476: PUSH
89477: EMPTY
89478: LIST
89479: LIST
89480: PUSH
89481: EMPTY
89482: LIST
89483: LIST
89484: LIST
89485: PUSH
89486: EMPTY
89487: LIST
89488: LIST
89489: LIST
89490: LIST
89491: PPUSH
89492: CALL_OW 69
89496: PUSH
89497: LD_VAR 0 8
89501: PPUSH
89502: CALL_OW 313
89506: PPUSH
89507: LD_INT 3
89509: PUSH
89510: LD_INT 60
89512: PUSH
89513: EMPTY
89514: LIST
89515: PUSH
89516: EMPTY
89517: LIST
89518: LIST
89519: PUSH
89520: LD_INT 2
89522: PUSH
89523: LD_INT 25
89525: PUSH
89526: LD_INT 2
89528: PUSH
89529: EMPTY
89530: LIST
89531: LIST
89532: PUSH
89533: LD_INT 25
89535: PUSH
89536: LD_INT 16
89538: PUSH
89539: EMPTY
89540: LIST
89541: LIST
89542: PUSH
89543: EMPTY
89544: LIST
89545: LIST
89546: LIST
89547: PUSH
89548: EMPTY
89549: LIST
89550: LIST
89551: PPUSH
89552: CALL_OW 72
89556: UNION
89557: ST_TO_ADDR
// if tmp then
89558: LD_VAR 0 4
89562: IFFALSE 89642
// begin tmp := ShrinkArray ( tmp , 3 ) ;
89564: LD_ADDR_VAR 0 4
89568: PUSH
89569: LD_VAR 0 4
89573: PPUSH
89574: LD_INT 3
89576: PPUSH
89577: CALL 68755 0 2
89581: ST_TO_ADDR
// for j in tmp do
89582: LD_ADDR_VAR 0 2
89586: PUSH
89587: LD_VAR 0 4
89591: PUSH
89592: FOR_IN
89593: IFFALSE 89636
// begin if IsInUnit ( j ) then
89595: LD_VAR 0 2
89599: PPUSH
89600: CALL_OW 310
89604: IFFALSE 89615
// ComExit ( j ) ;
89606: LD_VAR 0 2
89610: PPUSH
89611: CALL 68838 0 1
// AddComCollect ( j , x , y ) ;
89615: LD_VAR 0 2
89619: PPUSH
89620: LD_VAR 0 6
89624: PPUSH
89625: LD_VAR 0 7
89629: PPUSH
89630: CALL_OW 177
// end ;
89634: GO 89592
89636: POP
89637: POP
// exit ;
89638: POP
89639: POP
89640: GO 89877
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
89642: LD_ADDR_VAR 0 4
89646: PUSH
89647: LD_INT 22
89649: PUSH
89650: LD_VAR 0 5
89654: PUSH
89655: EMPTY
89656: LIST
89657: LIST
89658: PUSH
89659: LD_INT 91
89661: PUSH
89662: LD_VAR 0 8
89666: PUSH
89667: LD_INT 8
89669: PUSH
89670: EMPTY
89671: LIST
89672: LIST
89673: LIST
89674: PUSH
89675: LD_INT 2
89677: PUSH
89678: LD_INT 34
89680: PUSH
89681: LD_INT 12
89683: PUSH
89684: EMPTY
89685: LIST
89686: LIST
89687: PUSH
89688: LD_INT 34
89690: PUSH
89691: LD_INT 51
89693: PUSH
89694: EMPTY
89695: LIST
89696: LIST
89697: PUSH
89698: LD_INT 34
89700: PUSH
89701: LD_INT 32
89703: PUSH
89704: EMPTY
89705: LIST
89706: LIST
89707: PUSH
89708: LD_INT 34
89710: PUSH
89711: LD_INT 89
89713: PUSH
89714: EMPTY
89715: LIST
89716: LIST
89717: PUSH
89718: EMPTY
89719: LIST
89720: LIST
89721: LIST
89722: LIST
89723: LIST
89724: PUSH
89725: EMPTY
89726: LIST
89727: LIST
89728: LIST
89729: PPUSH
89730: CALL_OW 69
89734: ST_TO_ADDR
// if tmp then
89735: LD_VAR 0 4
89739: IFFALSE 89873
// begin for j in tmp do
89741: LD_ADDR_VAR 0 2
89745: PUSH
89746: LD_VAR 0 4
89750: PUSH
89751: FOR_IN
89752: IFFALSE 89871
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
89754: LD_VAR 0 2
89758: PPUSH
89759: CALL_OW 262
89763: PUSH
89764: LD_INT 3
89766: EQUAL
89767: IFTRUE 89784
89769: PUSH
89770: LD_VAR 0 2
89774: PPUSH
89775: CALL_OW 261
89779: PUSH
89780: LD_INT 20
89782: GREATER
89783: OR
89784: IFFALSE 89798
89786: PUSH
89787: LD_VAR 0 2
89791: PPUSH
89792: CALL_OW 314
89796: NOT
89797: AND
89798: IFFALSE 89828
89800: PUSH
89801: LD_VAR 0 2
89805: PPUSH
89806: CALL_OW 263
89810: PUSH
89811: LD_INT 1
89813: NONEQUAL
89814: IFTRUE 89827
89816: PUSH
89817: LD_VAR 0 2
89821: PPUSH
89822: CALL_OW 311
89826: OR
89827: AND
89828: IFFALSE 89869
// begin ComCollect ( j , x , y ) ;
89830: LD_VAR 0 2
89834: PPUSH
89835: LD_VAR 0 6
89839: PPUSH
89840: LD_VAR 0 7
89844: PPUSH
89845: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
89849: LD_VAR 0 2
89853: PPUSH
89854: LD_VAR 0 8
89858: PPUSH
89859: CALL_OW 172
// exit ;
89863: POP
89864: POP
89865: POP
89866: POP
89867: GO 89877
// end ;
89869: GO 89751
89871: POP
89872: POP
// end ; end ;
89873: GO 89238
89875: POP
89876: POP
// end ; end_of_file
89877: PPOPN 9
89879: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
89880: LD_VAR 0 1
89884: PUSH
89885: LD_INT 200
89887: DOUBLE
89888: GREATEREQUAL
89889: IFFALSE 89897
89891: LD_INT 299
89893: DOUBLE
89894: LESSEQUAL
89895: IFTRUE 89899
89897: GO 89931
89899: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
89900: LD_VAR 0 1
89904: PPUSH
89905: LD_VAR 0 2
89909: PPUSH
89910: LD_VAR 0 3
89914: PPUSH
89915: LD_VAR 0 4
89919: PPUSH
89920: LD_VAR 0 5
89924: PPUSH
89925: CALL 90793 0 5
89929: GO 90008
89931: LD_INT 300
89933: DOUBLE
89934: GREATEREQUAL
89935: IFFALSE 89943
89937: LD_INT 399
89939: DOUBLE
89940: LESSEQUAL
89941: IFTRUE 89945
89943: GO 90007
89945: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
89946: LD_VAR 0 1
89950: PPUSH
89951: LD_VAR 0 2
89955: PPUSH
89956: LD_VAR 0 3
89960: PPUSH
89961: LD_VAR 0 4
89965: PPUSH
89966: LD_VAR 0 5
89970: PPUSH
89971: LD_VAR 0 6
89975: PPUSH
89976: LD_VAR 0 7
89980: PPUSH
89981: LD_VAR 0 8
89985: PPUSH
89986: LD_VAR 0 9
89990: PPUSH
89991: LD_VAR 0 10
89995: PPUSH
89996: LD_VAR 0 11
90000: PPUSH
90001: CALL 86433 0 11
90005: GO 90008
90007: POP
// end ;
90008: PPOPN 11
90010: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
90011: LD_VAR 0 1
90015: PPUSH
90016: LD_VAR 0 2
90020: PPUSH
90021: LD_VAR 0 3
90025: PPUSH
90026: LD_VAR 0 4
90030: PPUSH
90031: LD_VAR 0 5
90035: PPUSH
90036: CALL 90093 0 5
// end ; end_of_file
90040: PPOPN 5
90042: END
// export function SOS_UnitDestroyed ( un ) ; begin
90043: LD_INT 0
90045: PPUSH
// ComRadiation ( un ) ;
90046: LD_VAR 0 1
90050: PPUSH
90051: CALL 91213 0 1
// end ;
90055: LD_VAR 0 2
90059: RET
// export function SOS_UnitKamikazed ( un ) ; begin
90060: LD_INT 0
90062: PPUSH
// ComRadiation ( un ) ;
90063: LD_VAR 0 1
90067: PPUSH
90068: CALL 91213 0 1
// end ;
90072: LD_VAR 0 2
90076: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
90077: LD_INT 0
90079: PPUSH
// end ;
90080: LD_VAR 0 4
90084: RET
// export function SOS_Command ( cmd ) ; begin
90085: LD_INT 0
90087: PPUSH
// end ;
90088: LD_VAR 0 2
90092: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
90093: LD_INT 0
90095: PPUSH
// end ;
90096: LD_VAR 0 6
90100: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
90101: LD_INT 0
90103: PPUSH
90104: PPUSH
90105: PPUSH
90106: PPUSH
90107: PPUSH
// if not vehicle or not factory then
90108: LD_VAR 0 1
90112: NOT
90113: IFTRUE 90122
90115: PUSH
90116: LD_VAR 0 2
90120: NOT
90121: OR
90122: IFFALSE 90126
// exit ;
90124: GO 90788
// weapon := GetWeapon ( vehicle ) ;
90126: LD_ADDR_VAR 0 7
90130: PUSH
90131: LD_VAR 0 1
90135: PPUSH
90136: CALL_OW 264
90140: ST_TO_ADDR
// if weapon = ar_miner then
90141: LD_VAR 0 7
90145: PUSH
90146: LD_INT 81
90148: EQUAL
90149: IFFALSE 90206
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
90151: LD_ADDR_EXP 144
90155: PUSH
90156: LD_EXP 144
90160: PPUSH
90161: LD_EXP 144
90165: PUSH
90166: LD_INT 1
90168: PLUS
90169: PPUSH
90170: LD_VAR 0 1
90174: PPUSH
90175: CALL_OW 1
90179: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
90180: LD_ADDR_EXP 145
90184: PUSH
90185: LD_EXP 145
90189: PPUSH
90190: LD_EXP 145
90194: PUSH
90195: LD_INT 1
90197: PLUS
90198: PPUSH
90199: EMPTY
90200: PPUSH
90201: CALL_OW 1
90205: ST_TO_ADDR
// end ; if not factoryWaypoints then
90206: LD_EXP 133
90210: NOT
90211: IFFALSE 90215
// exit ;
90213: GO 90788
// for i := 1 to Count ( factoryWaypoints ) do
90215: LD_ADDR_VAR 0 4
90219: PUSH
90220: DOUBLE
90221: LD_INT 1
90223: DEC
90224: ST_TO_ADDR
90225: LD_EXP 133
90229: PPUSH
90230: CALL 32464 0 1
90234: PUSH
90235: FOR_TO
90236: IFFALSE 90786
// if factoryWaypoints [ i ] [ 2 ] = factory then
90238: LD_EXP 133
90242: PUSH
90243: LD_VAR 0 4
90247: ARRAY
90248: PUSH
90249: LD_INT 2
90251: ARRAY
90252: PUSH
90253: LD_VAR 0 2
90257: EQUAL
90258: IFFALSE 90784
// begin if GetControl ( vehicle ) = control_manual then
90260: LD_VAR 0 1
90264: PPUSH
90265: CALL_OW 263
90269: PUSH
90270: LD_INT 1
90272: EQUAL
90273: IFFALSE 90637
// begin driver := IsDrivenBy ( vehicle ) ;
90275: LD_ADDR_VAR 0 5
90279: PUSH
90280: LD_VAR 0 1
90284: PPUSH
90285: CALL_OW 311
90289: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
90290: LD_VAR 0 5
90294: PUSH
90295: LD_EXP 134
90299: IN
90300: IFTRUE 90314
90302: PUSH
90303: LD_VAR 0 1
90307: PUSH
90308: LD_EXP 134
90312: IN
90313: OR
90314: IFFALSE 90320
// exit ;
90316: POP
90317: POP
90318: GO 90788
// if not HasTask ( driver ) then
90320: LD_VAR 0 5
90324: PPUSH
90325: CALL_OW 314
90329: NOT
90330: IFFALSE 90635
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
90332: LD_ADDR_EXP 134
90336: PUSH
90337: LD_EXP 134
90341: PPUSH
90342: LD_VAR 0 5
90346: PPUSH
90347: CALL 68440 0 2
90351: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
90352: LD_ADDR_EXP 134
90356: PUSH
90357: LD_EXP 134
90361: PPUSH
90362: LD_VAR 0 1
90366: PPUSH
90367: CALL 68440 0 2
90371: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90372: LD_ADDR_VAR 0 6
90376: PUSH
90377: LD_EXP 133
90381: PUSH
90382: LD_VAR 0 4
90386: ARRAY
90387: PUSH
90388: LD_INT 3
90390: ARRAY
90391: PPUSH
90392: LD_EXP 133
90396: PUSH
90397: LD_VAR 0 4
90401: ARRAY
90402: PUSH
90403: LD_INT 4
90405: ARRAY
90406: PPUSH
90407: CALL_OW 428
90411: ST_TO_ADDR
// if hex then
90412: LD_VAR 0 6
90416: IFFALSE 90434
// ComMoveUnit ( driver , hex ) else
90418: LD_VAR 0 5
90422: PPUSH
90423: LD_VAR 0 6
90427: PPUSH
90428: CALL_OW 112
90432: GO 90518
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
90434: LD_VAR 0 1
90438: PPUSH
90439: LD_EXP 133
90443: PUSH
90444: LD_VAR 0 4
90448: ARRAY
90449: PUSH
90450: LD_INT 3
90452: ARRAY
90453: PPUSH
90454: LD_EXP 133
90458: PUSH
90459: LD_VAR 0 4
90463: ARRAY
90464: PUSH
90465: LD_INT 4
90467: ARRAY
90468: PPUSH
90469: CALL_OW 297
90473: PUSH
90474: LD_INT 0
90476: GREATER
90477: IFFALSE 90518
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90479: LD_VAR 0 5
90483: PPUSH
90484: LD_EXP 133
90488: PUSH
90489: LD_VAR 0 4
90493: ARRAY
90494: PUSH
90495: LD_INT 3
90497: ARRAY
90498: PPUSH
90499: LD_EXP 133
90503: PUSH
90504: LD_VAR 0 4
90508: ARRAY
90509: PUSH
90510: LD_INT 4
90512: ARRAY
90513: PPUSH
90514: CALL_OW 111
// AddComExitVehicle ( driver ) ;
90518: LD_VAR 0 5
90522: PPUSH
90523: CALL_OW 181
// if Multiplayer then
90527: LD_OWVAR 4
90531: IFFALSE 90580
// begin repeat wait ( 10 ) ;
90533: LD_INT 10
90535: PPUSH
90536: CALL_OW 67
// until not IsInUnit ( driver ) ;
90540: LD_VAR 0 5
90544: PPUSH
90545: CALL_OW 310
90549: NOT
90550: IFFALSE 90533
// if not HasTask ( driver ) then
90552: LD_VAR 0 5
90556: PPUSH
90557: CALL_OW 314
90561: NOT
90562: IFFALSE 90578
// ComEnterUnit ( driver , factory ) ;
90564: LD_VAR 0 5
90568: PPUSH
90569: LD_VAR 0 2
90573: PPUSH
90574: CALL_OW 120
// end else
90578: GO 90594
// AddComEnterUnit ( driver , factory ) ;
90580: LD_VAR 0 5
90584: PPUSH
90585: LD_VAR 0 2
90589: PPUSH
90590: CALL_OW 180
// wait ( 0 0$1 ) ;
90594: LD_INT 35
90596: PPUSH
90597: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
90601: LD_ADDR_EXP 134
90605: PUSH
90606: LD_EXP 134
90610: PUSH
90611: LD_VAR 0 5
90615: DIFF
90616: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
90617: LD_ADDR_EXP 134
90621: PUSH
90622: LD_EXP 134
90626: PUSH
90627: LD_VAR 0 1
90631: DIFF
90632: ST_TO_ADDR
// break ;
90633: GO 90786
// end ; end else
90635: GO 90784
// if GetControl ( vehicle ) = control_remote then
90637: LD_VAR 0 1
90641: PPUSH
90642: CALL_OW 263
90646: PUSH
90647: LD_INT 2
90649: EQUAL
90650: IFFALSE 90736
// begin wait ( 0 0$2 ) ;
90652: LD_INT 70
90654: PPUSH
90655: CALL_OW 67
// repeat wait ( 10 ) ;
90659: LD_INT 10
90661: PPUSH
90662: CALL_OW 67
// Connect ( vehicle ) ;
90666: LD_VAR 0 1
90670: PPUSH
90671: CALL 38742 0 1
// until IsControledBy ( vehicle ) ;
90675: LD_VAR 0 1
90679: PPUSH
90680: CALL_OW 312
90684: IFFALSE 90659
// wait ( 10 ) ;
90686: LD_INT 10
90688: PPUSH
90689: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90693: LD_VAR 0 1
90697: PPUSH
90698: LD_EXP 133
90702: PUSH
90703: LD_VAR 0 4
90707: ARRAY
90708: PUSH
90709: LD_INT 3
90711: ARRAY
90712: PPUSH
90713: LD_EXP 133
90717: PUSH
90718: LD_VAR 0 4
90722: ARRAY
90723: PUSH
90724: LD_INT 4
90726: ARRAY
90727: PPUSH
90728: CALL_OW 111
// break ;
90732: GO 90786
// end else
90734: GO 90784
// begin wait ( 0 0$3 ) ;
90736: LD_INT 105
90738: PPUSH
90739: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90743: LD_VAR 0 1
90747: PPUSH
90748: LD_EXP 133
90752: PUSH
90753: LD_VAR 0 4
90757: ARRAY
90758: PUSH
90759: LD_INT 3
90761: ARRAY
90762: PPUSH
90763: LD_EXP 133
90767: PUSH
90768: LD_VAR 0 4
90772: ARRAY
90773: PUSH
90774: LD_INT 4
90776: ARRAY
90777: PPUSH
90778: CALL_OW 111
// break ;
90782: GO 90786
// end ; end ;
90784: GO 90235
90786: POP
90787: POP
// end ;
90788: LD_VAR 0 3
90792: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
90793: LD_INT 0
90795: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
90796: LD_VAR 0 1
90800: PUSH
90801: LD_INT 250
90803: EQUAL
90804: IFFALSE 90821
90806: PUSH
90807: LD_VAR 0 2
90811: PPUSH
90812: CALL_OW 264
90816: PUSH
90817: LD_INT 81
90819: EQUAL
90820: AND
90821: IFFALSE 90842
// MinerPlaceMine ( unit , x , y ) ;
90823: LD_VAR 0 2
90827: PPUSH
90828: LD_VAR 0 4
90832: PPUSH
90833: LD_VAR 0 5
90837: PPUSH
90838: CALL 94188 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
90842: LD_VAR 0 1
90846: PUSH
90847: LD_INT 251
90849: EQUAL
90850: IFFALSE 90867
90852: PUSH
90853: LD_VAR 0 2
90857: PPUSH
90858: CALL_OW 264
90862: PUSH
90863: LD_INT 81
90865: EQUAL
90866: AND
90867: IFFALSE 90888
// MinerDetonateMine ( unit , x , y ) ;
90869: LD_VAR 0 2
90873: PPUSH
90874: LD_VAR 0 4
90878: PPUSH
90879: LD_VAR 0 5
90883: PPUSH
90884: CALL 94595 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
90888: LD_VAR 0 1
90892: PUSH
90893: LD_INT 252
90895: EQUAL
90896: IFFALSE 90913
90898: PUSH
90899: LD_VAR 0 2
90903: PPUSH
90904: CALL_OW 264
90908: PUSH
90909: LD_INT 81
90911: EQUAL
90912: AND
90913: IFFALSE 90934
// MinerCreateMinefield ( unit , x , y ) ;
90915: LD_VAR 0 2
90919: PPUSH
90920: LD_VAR 0 4
90924: PPUSH
90925: LD_VAR 0 5
90929: PPUSH
90930: CALL 94827 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
90934: LD_VAR 0 1
90938: PUSH
90939: LD_INT 253
90941: EQUAL
90942: IFFALSE 90959
90944: PUSH
90945: LD_VAR 0 2
90949: PPUSH
90950: CALL_OW 257
90954: PUSH
90955: LD_INT 5
90957: EQUAL
90958: AND
90959: IFFALSE 90980
// ComBinocular ( unit , x , y ) ;
90961: LD_VAR 0 2
90965: PPUSH
90966: LD_VAR 0 4
90970: PPUSH
90971: LD_VAR 0 5
90975: PPUSH
90976: CALL 95202 0 3
// if selectedUnit then
90980: LD_VAR 0 3
90984: IFFALSE 91044
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
90986: LD_VAR 0 1
90990: PUSH
90991: LD_INT 254
90993: EQUAL
90994: IFFALSE 91011
90996: PUSH
90997: LD_VAR 0 2
91001: PPUSH
91002: CALL_OW 264
91006: PUSH
91007: LD_INT 99
91009: EQUAL
91010: AND
91011: IFFALSE 91028
91013: PUSH
91014: LD_VAR 0 3
91018: PPUSH
91019: CALL_OW 263
91023: PUSH
91024: LD_INT 3
91026: EQUAL
91027: AND
91028: IFFALSE 91044
// HackDestroyVehicle ( unit , selectedUnit ) ;
91030: LD_VAR 0 2
91034: PPUSH
91035: LD_VAR 0 3
91039: PPUSH
91040: CALL 93378 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
91044: LD_VAR 0 1
91048: PUSH
91049: LD_INT 255
91051: EQUAL
91052: IFFALSE 91076
91054: PUSH
91055: LD_VAR 0 2
91059: PPUSH
91060: CALL_OW 264
91064: PUSH
91065: LD_INT 14
91067: PUSH
91068: LD_INT 53
91070: PUSH
91071: EMPTY
91072: LIST
91073: LIST
91074: IN
91075: AND
91076: IFFALSE 91094
91078: PUSH
91079: LD_VAR 0 4
91083: PPUSH
91084: LD_VAR 0 5
91088: PPUSH
91089: CALL_OW 488
91093: AND
91094: IFFALSE 91118
// CutTreeXYR ( unit , x , y , 12 ) ;
91096: LD_VAR 0 2
91100: PPUSH
91101: LD_VAR 0 4
91105: PPUSH
91106: LD_VAR 0 5
91110: PPUSH
91111: LD_INT 12
91113: PPUSH
91114: CALL 91309 0 4
// if cmd = 256 then
91118: LD_VAR 0 1
91122: PUSH
91123: LD_INT 256
91125: EQUAL
91126: IFFALSE 91147
// SetFactoryWaypoint ( unit , x , y ) ;
91128: LD_VAR 0 2
91132: PPUSH
91133: LD_VAR 0 4
91137: PPUSH
91138: LD_VAR 0 5
91142: PPUSH
91143: CALL 88425 0 3
// if cmd = 257 then
91147: LD_VAR 0 1
91151: PUSH
91152: LD_INT 257
91154: EQUAL
91155: IFFALSE 91176
// SetWarehouseGatheringPoint ( unit , x , y ) ;
91157: LD_VAR 0 2
91161: PPUSH
91162: LD_VAR 0 4
91166: PPUSH
91167: LD_VAR 0 5
91171: PPUSH
91172: CALL 88921 0 3
// if cmd = 258 then
91176: LD_VAR 0 1
91180: PUSH
91181: LD_INT 258
91183: EQUAL
91184: IFFALSE 91208
// BurnTreeXYR ( unit , x , y , 8 ) ;
91186: LD_VAR 0 2
91190: PPUSH
91191: LD_VAR 0 4
91195: PPUSH
91196: LD_VAR 0 5
91200: PPUSH
91201: LD_INT 8
91203: PPUSH
91204: CALL 91731 0 4
// end ;
91208: LD_VAR 0 6
91212: RET
// export function ComRadiation ( un ) ; var eff ; begin
91213: LD_INT 0
91215: PPUSH
91216: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
91217: LD_VAR 0 1
91221: PPUSH
91222: CALL_OW 264
91226: PUSH
91227: LD_INT 91
91229: NONEQUAL
91230: IFFALSE 91234
// exit ;
91232: GO 91304
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
91234: LD_INT 68
91236: PPUSH
91237: LD_VAR 0 1
91241: PPUSH
91242: CALL_OW 255
91246: PPUSH
91247: CALL_OW 321
91251: PUSH
91252: LD_INT 2
91254: EQUAL
91255: IFFALSE 91267
// eff := 50 else
91257: LD_ADDR_VAR 0 3
91261: PUSH
91262: LD_INT 50
91264: ST_TO_ADDR
91265: GO 91275
// eff := 25 ;
91267: LD_ADDR_VAR 0 3
91271: PUSH
91272: LD_INT 25
91274: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
91275: LD_VAR 0 1
91279: PPUSH
91280: CALL_OW 250
91284: PPUSH
91285: LD_VAR 0 1
91289: PPUSH
91290: CALL_OW 251
91294: PPUSH
91295: LD_VAR 0 3
91299: PPUSH
91300: CALL_OW 495
// end ;
91304: LD_VAR 0 2
91308: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
91309: LD_INT 0
91311: PPUSH
91312: PPUSH
91313: PPUSH
91314: PPUSH
91315: PPUSH
91316: PPUSH
91317: PPUSH
91318: PPUSH
91319: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
91320: LD_VAR 0 1
91324: PPUSH
91325: CALL_OW 302
91329: NOT
91330: IFTRUE 91349
91332: PUSH
91333: LD_VAR 0 2
91337: PPUSH
91338: LD_VAR 0 3
91342: PPUSH
91343: CALL_OW 488
91347: NOT
91348: OR
91349: IFTRUE 91358
91351: PUSH
91352: LD_VAR 0 4
91356: NOT
91357: OR
91358: IFFALSE 91362
// exit ;
91360: GO 91726
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
91362: LD_VAR 0 1
91366: PPUSH
91367: CALL_OW 437
91371: PPUSH
91372: CALL 32464 0 1
91376: PUSH
91377: LD_INT 10
91379: GREATER
91380: IFFALSE 91384
// exit ;
91382: GO 91726
// list := [ ] ;
91384: LD_ADDR_VAR 0 13
91388: PUSH
91389: EMPTY
91390: ST_TO_ADDR
// if x - r < 0 then
91391: LD_VAR 0 2
91395: PUSH
91396: LD_VAR 0 4
91400: MINUS
91401: PUSH
91402: LD_INT 0
91404: LESS
91405: IFFALSE 91417
// min_x := 0 else
91407: LD_ADDR_VAR 0 7
91411: PUSH
91412: LD_INT 0
91414: ST_TO_ADDR
91415: GO 91433
// min_x := x - r ;
91417: LD_ADDR_VAR 0 7
91421: PUSH
91422: LD_VAR 0 2
91426: PUSH
91427: LD_VAR 0 4
91431: MINUS
91432: ST_TO_ADDR
// if y - r < 0 then
91433: LD_VAR 0 3
91437: PUSH
91438: LD_VAR 0 4
91442: MINUS
91443: PUSH
91444: LD_INT 0
91446: LESS
91447: IFFALSE 91459
// min_y := 0 else
91449: LD_ADDR_VAR 0 8
91453: PUSH
91454: LD_INT 0
91456: ST_TO_ADDR
91457: GO 91475
// min_y := y - r ;
91459: LD_ADDR_VAR 0 8
91463: PUSH
91464: LD_VAR 0 3
91468: PUSH
91469: LD_VAR 0 4
91473: MINUS
91474: ST_TO_ADDR
// max_x := x + r ;
91475: LD_ADDR_VAR 0 9
91479: PUSH
91480: LD_VAR 0 2
91484: PUSH
91485: LD_VAR 0 4
91489: PLUS
91490: ST_TO_ADDR
// max_y := y + r ;
91491: LD_ADDR_VAR 0 10
91495: PUSH
91496: LD_VAR 0 3
91500: PUSH
91501: LD_VAR 0 4
91505: PLUS
91506: ST_TO_ADDR
// for _x = min_x to max_x do
91507: LD_ADDR_VAR 0 11
91511: PUSH
91512: DOUBLE
91513: LD_VAR 0 7
91517: DEC
91518: ST_TO_ADDR
91519: LD_VAR 0 9
91523: PUSH
91524: FOR_TO
91525: IFFALSE 91644
// for _y = min_y to max_y do
91527: LD_ADDR_VAR 0 12
91531: PUSH
91532: DOUBLE
91533: LD_VAR 0 8
91537: DEC
91538: ST_TO_ADDR
91539: LD_VAR 0 10
91543: PUSH
91544: FOR_TO
91545: IFFALSE 91640
// begin if not ValidHex ( _x , _y ) then
91547: LD_VAR 0 11
91551: PPUSH
91552: LD_VAR 0 12
91556: PPUSH
91557: CALL_OW 488
91561: NOT
91562: IFFALSE 91566
// continue ;
91564: GO 91544
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91566: LD_VAR 0 11
91570: PPUSH
91571: LD_VAR 0 12
91575: PPUSH
91576: CALL_OW 351
91580: IFFALSE 91598
91582: PUSH
91583: LD_VAR 0 11
91587: PPUSH
91588: LD_VAR 0 12
91592: PPUSH
91593: CALL_OW 554
91597: AND
91598: IFFALSE 91638
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91600: LD_ADDR_VAR 0 13
91604: PUSH
91605: LD_VAR 0 13
91609: PPUSH
91610: LD_VAR 0 13
91614: PUSH
91615: LD_INT 1
91617: PLUS
91618: PPUSH
91619: LD_VAR 0 11
91623: PUSH
91624: LD_VAR 0 12
91628: PUSH
91629: EMPTY
91630: LIST
91631: LIST
91632: PPUSH
91633: CALL_OW 2
91637: ST_TO_ADDR
// end ;
91638: GO 91544
91640: POP
91641: POP
91642: GO 91524
91644: POP
91645: POP
// if not list then
91646: LD_VAR 0 13
91650: NOT
91651: IFFALSE 91655
// exit ;
91653: GO 91726
// for i in list do
91655: LD_ADDR_VAR 0 6
91659: PUSH
91660: LD_VAR 0 13
91664: PUSH
91665: FOR_IN
91666: IFFALSE 91724
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
91668: LD_VAR 0 1
91672: PPUSH
91673: LD_STRING M
91675: PUSH
91676: LD_VAR 0 6
91680: PUSH
91681: LD_INT 1
91683: ARRAY
91684: PUSH
91685: LD_VAR 0 6
91689: PUSH
91690: LD_INT 2
91692: ARRAY
91693: PUSH
91694: LD_INT 0
91696: PUSH
91697: LD_INT 0
91699: PUSH
91700: LD_INT 0
91702: PUSH
91703: LD_INT 0
91705: PUSH
91706: EMPTY
91707: LIST
91708: LIST
91709: LIST
91710: LIST
91711: LIST
91712: LIST
91713: LIST
91714: PUSH
91715: EMPTY
91716: LIST
91717: PPUSH
91718: CALL_OW 447
91722: GO 91665
91724: POP
91725: POP
// end ;
91726: LD_VAR 0 5
91730: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
91731: LD_INT 0
91733: PPUSH
91734: PPUSH
91735: PPUSH
91736: PPUSH
91737: PPUSH
91738: PPUSH
91739: PPUSH
91740: PPUSH
91741: PPUSH
91742: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
91743: LD_VAR 0 1
91747: PPUSH
91748: CALL_OW 302
91752: NOT
91753: IFTRUE 91772
91755: PUSH
91756: LD_VAR 0 2
91760: PPUSH
91761: LD_VAR 0 3
91765: PPUSH
91766: CALL_OW 488
91770: NOT
91771: OR
91772: IFTRUE 91781
91774: PUSH
91775: LD_VAR 0 4
91779: NOT
91780: OR
91781: IFFALSE 91785
// exit ;
91783: GO 92324
// if Count ( GetTaskList ( flame ) ) > 10 then
91785: LD_VAR 0 1
91789: PPUSH
91790: CALL_OW 437
91794: PPUSH
91795: CALL 32464 0 1
91799: PUSH
91800: LD_INT 10
91802: GREATER
91803: IFFALSE 91807
// exit ;
91805: GO 92324
// list := [ ] ;
91807: LD_ADDR_VAR 0 13
91811: PUSH
91812: EMPTY
91813: ST_TO_ADDR
// if x - r < 0 then
91814: LD_VAR 0 2
91818: PUSH
91819: LD_VAR 0 4
91823: MINUS
91824: PUSH
91825: LD_INT 0
91827: LESS
91828: IFFALSE 91840
// min_x := 0 else
91830: LD_ADDR_VAR 0 7
91834: PUSH
91835: LD_INT 0
91837: ST_TO_ADDR
91838: GO 91856
// min_x := x - r ;
91840: LD_ADDR_VAR 0 7
91844: PUSH
91845: LD_VAR 0 2
91849: PUSH
91850: LD_VAR 0 4
91854: MINUS
91855: ST_TO_ADDR
// if y - r < 0 then
91856: LD_VAR 0 3
91860: PUSH
91861: LD_VAR 0 4
91865: MINUS
91866: PUSH
91867: LD_INT 0
91869: LESS
91870: IFFALSE 91882
// min_y := 0 else
91872: LD_ADDR_VAR 0 8
91876: PUSH
91877: LD_INT 0
91879: ST_TO_ADDR
91880: GO 91898
// min_y := y - r ;
91882: LD_ADDR_VAR 0 8
91886: PUSH
91887: LD_VAR 0 3
91891: PUSH
91892: LD_VAR 0 4
91896: MINUS
91897: ST_TO_ADDR
// max_x := x + r ;
91898: LD_ADDR_VAR 0 9
91902: PUSH
91903: LD_VAR 0 2
91907: PUSH
91908: LD_VAR 0 4
91912: PLUS
91913: ST_TO_ADDR
// max_y := y + r ;
91914: LD_ADDR_VAR 0 10
91918: PUSH
91919: LD_VAR 0 3
91923: PUSH
91924: LD_VAR 0 4
91928: PLUS
91929: ST_TO_ADDR
// for _x = min_x to max_x do
91930: LD_ADDR_VAR 0 11
91934: PUSH
91935: DOUBLE
91936: LD_VAR 0 7
91940: DEC
91941: ST_TO_ADDR
91942: LD_VAR 0 9
91946: PUSH
91947: FOR_TO
91948: IFFALSE 92067
// for _y = min_y to max_y do
91950: LD_ADDR_VAR 0 12
91954: PUSH
91955: DOUBLE
91956: LD_VAR 0 8
91960: DEC
91961: ST_TO_ADDR
91962: LD_VAR 0 10
91966: PUSH
91967: FOR_TO
91968: IFFALSE 92063
// begin if not ValidHex ( _x , _y ) then
91970: LD_VAR 0 11
91974: PPUSH
91975: LD_VAR 0 12
91979: PPUSH
91980: CALL_OW 488
91984: NOT
91985: IFFALSE 91989
// continue ;
91987: GO 91967
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91989: LD_VAR 0 11
91993: PPUSH
91994: LD_VAR 0 12
91998: PPUSH
91999: CALL_OW 351
92003: IFFALSE 92021
92005: PUSH
92006: LD_VAR 0 11
92010: PPUSH
92011: LD_VAR 0 12
92015: PPUSH
92016: CALL_OW 554
92020: AND
92021: IFFALSE 92061
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
92023: LD_ADDR_VAR 0 13
92027: PUSH
92028: LD_VAR 0 13
92032: PPUSH
92033: LD_VAR 0 13
92037: PUSH
92038: LD_INT 1
92040: PLUS
92041: PPUSH
92042: LD_VAR 0 11
92046: PUSH
92047: LD_VAR 0 12
92051: PUSH
92052: EMPTY
92053: LIST
92054: LIST
92055: PPUSH
92056: CALL_OW 2
92060: ST_TO_ADDR
// end ;
92061: GO 91967
92063: POP
92064: POP
92065: GO 91947
92067: POP
92068: POP
// if not list then
92069: LD_VAR 0 13
92073: NOT
92074: IFFALSE 92078
// exit ;
92076: GO 92324
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
92078: LD_ADDR_VAR 0 13
92082: PUSH
92083: LD_VAR 0 1
92087: PPUSH
92088: LD_VAR 0 13
92092: PPUSH
92093: LD_INT 1
92095: PPUSH
92096: LD_INT 1
92098: PPUSH
92099: CALL 35870 0 4
92103: ST_TO_ADDR
// ComStop ( flame ) ;
92104: LD_VAR 0 1
92108: PPUSH
92109: CALL_OW 141
// for i in list do
92113: LD_ADDR_VAR 0 6
92117: PUSH
92118: LD_VAR 0 13
92122: PUSH
92123: FOR_IN
92124: IFFALSE 92155
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
92126: LD_VAR 0 1
92130: PPUSH
92131: LD_VAR 0 6
92135: PUSH
92136: LD_INT 1
92138: ARRAY
92139: PPUSH
92140: LD_VAR 0 6
92144: PUSH
92145: LD_INT 2
92147: ARRAY
92148: PPUSH
92149: CALL_OW 176
92153: GO 92123
92155: POP
92156: POP
// repeat wait ( 0 0$1 ) ;
92157: LD_INT 35
92159: PPUSH
92160: CALL_OW 67
// task := GetTaskList ( flame ) ;
92164: LD_ADDR_VAR 0 14
92168: PUSH
92169: LD_VAR 0 1
92173: PPUSH
92174: CALL_OW 437
92178: ST_TO_ADDR
// if not task then
92179: LD_VAR 0 14
92183: NOT
92184: IFFALSE 92188
// exit ;
92186: GO 92324
// if task [ 1 ] [ 1 ] <> | then
92188: LD_VAR 0 14
92192: PUSH
92193: LD_INT 1
92195: ARRAY
92196: PUSH
92197: LD_INT 1
92199: ARRAY
92200: PUSH
92201: LD_STRING |
92203: NONEQUAL
92204: IFFALSE 92208
// exit ;
92206: GO 92324
// _x := task [ 1 ] [ 2 ] ;
92208: LD_ADDR_VAR 0 11
92212: PUSH
92213: LD_VAR 0 14
92217: PUSH
92218: LD_INT 1
92220: ARRAY
92221: PUSH
92222: LD_INT 2
92224: ARRAY
92225: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
92226: LD_ADDR_VAR 0 12
92230: PUSH
92231: LD_VAR 0 14
92235: PUSH
92236: LD_INT 1
92238: ARRAY
92239: PUSH
92240: LD_INT 3
92242: ARRAY
92243: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
92244: LD_VAR 0 11
92248: PPUSH
92249: LD_VAR 0 12
92253: PPUSH
92254: CALL_OW 351
92258: NOT
92259: IFTRUE 92278
92261: PUSH
92262: LD_VAR 0 11
92266: PPUSH
92267: LD_VAR 0 12
92271: PPUSH
92272: CALL_OW 554
92276: NOT
92277: OR
92278: IFFALSE 92312
// begin task := Delete ( task , 1 ) ;
92280: LD_ADDR_VAR 0 14
92284: PUSH
92285: LD_VAR 0 14
92289: PPUSH
92290: LD_INT 1
92292: PPUSH
92293: CALL_OW 3
92297: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
92298: LD_VAR 0 1
92302: PPUSH
92303: LD_VAR 0 14
92307: PPUSH
92308: CALL_OW 446
// end ; until not HasTask ( flame ) ;
92312: LD_VAR 0 1
92316: PPUSH
92317: CALL_OW 314
92321: NOT
92322: IFFALSE 92157
// end ;
92324: LD_VAR 0 5
92328: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
92329: LD_EXP 137
92333: NOT
92334: IFFALSE 92384
92336: GO 92338
92338: DISABLE
// begin initHack := true ;
92339: LD_ADDR_EXP 137
92343: PUSH
92344: LD_INT 1
92346: ST_TO_ADDR
// hackTanks := [ ] ;
92347: LD_ADDR_EXP 138
92351: PUSH
92352: EMPTY
92353: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
92354: LD_ADDR_EXP 139
92358: PUSH
92359: EMPTY
92360: ST_TO_ADDR
// hackLimit := 3 ;
92361: LD_ADDR_EXP 140
92365: PUSH
92366: LD_INT 3
92368: ST_TO_ADDR
// hackDist := 12 ;
92369: LD_ADDR_EXP 141
92373: PUSH
92374: LD_INT 12
92376: ST_TO_ADDR
// hackCounter := [ ] ;
92377: LD_ADDR_EXP 142
92381: PUSH
92382: EMPTY
92383: ST_TO_ADDR
// end ;
92384: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
92385: LD_EXP 137
92389: IFFALSE 92407
92391: PUSH
92392: LD_INT 34
92394: PUSH
92395: LD_INT 99
92397: PUSH
92398: EMPTY
92399: LIST
92400: LIST
92401: PPUSH
92402: CALL_OW 69
92406: AND
92407: IFFALSE 92660
92409: GO 92411
92411: DISABLE
92412: LD_INT 0
92414: PPUSH
92415: PPUSH
// begin enable ;
92416: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
92417: LD_ADDR_VAR 0 1
92421: PUSH
92422: LD_INT 34
92424: PUSH
92425: LD_INT 99
92427: PUSH
92428: EMPTY
92429: LIST
92430: LIST
92431: PPUSH
92432: CALL_OW 69
92436: PUSH
92437: FOR_IN
92438: IFFALSE 92658
// begin if not i in hackTanks then
92440: LD_VAR 0 1
92444: PUSH
92445: LD_EXP 138
92449: IN
92450: NOT
92451: IFFALSE 92534
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
92453: LD_ADDR_EXP 138
92457: PUSH
92458: LD_EXP 138
92462: PPUSH
92463: LD_EXP 138
92467: PUSH
92468: LD_INT 1
92470: PLUS
92471: PPUSH
92472: LD_VAR 0 1
92476: PPUSH
92477: CALL_OW 1
92481: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
92482: LD_ADDR_EXP 139
92486: PUSH
92487: LD_EXP 139
92491: PPUSH
92492: LD_EXP 139
92496: PUSH
92497: LD_INT 1
92499: PLUS
92500: PPUSH
92501: EMPTY
92502: PPUSH
92503: CALL_OW 1
92507: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
92508: LD_ADDR_EXP 142
92512: PUSH
92513: LD_EXP 142
92517: PPUSH
92518: LD_EXP 142
92522: PUSH
92523: LD_INT 1
92525: PLUS
92526: PPUSH
92527: EMPTY
92528: PPUSH
92529: CALL_OW 1
92533: ST_TO_ADDR
// end ; if not IsOk ( i ) then
92534: LD_VAR 0 1
92538: PPUSH
92539: CALL_OW 302
92543: NOT
92544: IFFALSE 92557
// begin HackUnlinkAll ( i ) ;
92546: LD_VAR 0 1
92550: PPUSH
92551: CALL 92663 0 1
// continue ;
92555: GO 92437
// end ; HackCheckCapturedStatus ( i ) ;
92557: LD_VAR 0 1
92561: PPUSH
92562: CALL 93108 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
92566: LD_ADDR_VAR 0 2
92570: PUSH
92571: LD_INT 81
92573: PUSH
92574: LD_VAR 0 1
92578: PPUSH
92579: CALL_OW 255
92583: PUSH
92584: EMPTY
92585: LIST
92586: LIST
92587: PUSH
92588: LD_INT 33
92590: PUSH
92591: LD_INT 3
92593: PUSH
92594: EMPTY
92595: LIST
92596: LIST
92597: PUSH
92598: LD_INT 91
92600: PUSH
92601: LD_VAR 0 1
92605: PUSH
92606: LD_EXP 141
92610: PUSH
92611: EMPTY
92612: LIST
92613: LIST
92614: LIST
92615: PUSH
92616: LD_INT 50
92618: PUSH
92619: EMPTY
92620: LIST
92621: PUSH
92622: EMPTY
92623: LIST
92624: LIST
92625: LIST
92626: LIST
92627: PPUSH
92628: CALL_OW 69
92632: ST_TO_ADDR
// if not tmp then
92633: LD_VAR 0 2
92637: NOT
92638: IFFALSE 92642
// continue ;
92640: GO 92437
// HackLink ( i , tmp ) ;
92642: LD_VAR 0 1
92646: PPUSH
92647: LD_VAR 0 2
92651: PPUSH
92652: CALL 92799 0 2
// end ;
92656: GO 92437
92658: POP
92659: POP
// end ;
92660: PPOPN 2
92662: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
92663: LD_INT 0
92665: PPUSH
92666: PPUSH
92667: PPUSH
// if not hack in hackTanks then
92668: LD_VAR 0 1
92672: PUSH
92673: LD_EXP 138
92677: IN
92678: NOT
92679: IFFALSE 92683
// exit ;
92681: GO 92794
// index := GetElementIndex ( hackTanks , hack ) ;
92683: LD_ADDR_VAR 0 4
92687: PUSH
92688: LD_EXP 138
92692: PPUSH
92693: LD_VAR 0 1
92697: PPUSH
92698: CALL 35165 0 2
92702: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
92703: LD_EXP 139
92707: PUSH
92708: LD_VAR 0 4
92712: ARRAY
92713: IFFALSE 92794
// begin for i in hackTanksCaptured [ index ] do
92715: LD_ADDR_VAR 0 3
92719: PUSH
92720: LD_EXP 139
92724: PUSH
92725: LD_VAR 0 4
92729: ARRAY
92730: PUSH
92731: FOR_IN
92732: IFFALSE 92758
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
92734: LD_VAR 0 3
92738: PUSH
92739: LD_INT 1
92741: ARRAY
92742: PPUSH
92743: LD_VAR 0 3
92747: PUSH
92748: LD_INT 2
92750: ARRAY
92751: PPUSH
92752: CALL_OW 235
92756: GO 92731
92758: POP
92759: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
92760: LD_ADDR_EXP 139
92764: PUSH
92765: LD_EXP 139
92769: PPUSH
92770: LD_VAR 0 4
92774: PPUSH
92775: EMPTY
92776: PPUSH
92777: CALL_OW 1
92781: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
92782: LD_VAR 0 1
92786: PPUSH
92787: LD_INT 0
92789: PPUSH
92790: CALL_OW 505
// end ; end ;
92794: LD_VAR 0 2
92798: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
92799: LD_INT 0
92801: PPUSH
92802: PPUSH
92803: PPUSH
// if not hack in hackTanks or not vehicles then
92804: LD_VAR 0 1
92808: PUSH
92809: LD_EXP 138
92813: IN
92814: NOT
92815: IFTRUE 92824
92817: PUSH
92818: LD_VAR 0 2
92822: NOT
92823: OR
92824: IFFALSE 92828
// exit ;
92826: GO 93103
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
92828: LD_ADDR_VAR 0 2
92832: PUSH
92833: LD_VAR 0 1
92837: PPUSH
92838: LD_VAR 0 2
92842: PPUSH
92843: LD_INT 1
92845: PPUSH
92846: LD_INT 1
92848: PPUSH
92849: CALL 35817 0 4
92853: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
92854: LD_ADDR_VAR 0 5
92858: PUSH
92859: LD_EXP 138
92863: PPUSH
92864: LD_VAR 0 1
92868: PPUSH
92869: CALL 35165 0 2
92873: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
92874: LD_EXP 139
92878: PUSH
92879: LD_VAR 0 5
92883: ARRAY
92884: PUSH
92885: LD_EXP 140
92889: LESS
92890: IFFALSE 93079
// begin for i := 1 to vehicles do
92892: LD_ADDR_VAR 0 4
92896: PUSH
92897: DOUBLE
92898: LD_INT 1
92900: DEC
92901: ST_TO_ADDR
92902: LD_VAR 0 2
92906: PUSH
92907: FOR_TO
92908: IFFALSE 93077
// begin if hackTanksCaptured [ index ] = hackLimit then
92910: LD_EXP 139
92914: PUSH
92915: LD_VAR 0 5
92919: ARRAY
92920: PUSH
92921: LD_EXP 140
92925: EQUAL
92926: IFFALSE 92930
// break ;
92928: GO 93077
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
92930: LD_ADDR_EXP 142
92934: PUSH
92935: LD_EXP 142
92939: PPUSH
92940: LD_VAR 0 5
92944: PPUSH
92945: LD_EXP 142
92949: PUSH
92950: LD_VAR 0 5
92954: ARRAY
92955: PUSH
92956: LD_INT 1
92958: PLUS
92959: PPUSH
92960: CALL_OW 1
92964: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
92965: LD_ADDR_EXP 139
92969: PUSH
92970: LD_EXP 139
92974: PPUSH
92975: LD_VAR 0 5
92979: PUSH
92980: LD_EXP 139
92984: PUSH
92985: LD_VAR 0 5
92989: ARRAY
92990: PUSH
92991: LD_INT 1
92993: PLUS
92994: PUSH
92995: EMPTY
92996: LIST
92997: LIST
92998: PPUSH
92999: LD_VAR 0 2
93003: PUSH
93004: LD_VAR 0 4
93008: ARRAY
93009: PUSH
93010: LD_VAR 0 2
93014: PUSH
93015: LD_VAR 0 4
93019: ARRAY
93020: PPUSH
93021: CALL_OW 255
93025: PUSH
93026: EMPTY
93027: LIST
93028: LIST
93029: PPUSH
93030: CALL 35382 0 3
93034: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
93035: LD_VAR 0 2
93039: PUSH
93040: LD_VAR 0 4
93044: ARRAY
93045: PPUSH
93046: LD_VAR 0 1
93050: PPUSH
93051: CALL_OW 255
93055: PPUSH
93056: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
93060: LD_VAR 0 2
93064: PUSH
93065: LD_VAR 0 4
93069: ARRAY
93070: PPUSH
93071: CALL_OW 141
// end ;
93075: GO 92907
93077: POP
93078: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
93079: LD_VAR 0 1
93083: PPUSH
93084: LD_EXP 139
93088: PUSH
93089: LD_VAR 0 5
93093: ARRAY
93094: PUSH
93095: LD_INT 0
93097: PLUS
93098: PPUSH
93099: CALL_OW 505
// end ;
93103: LD_VAR 0 3
93107: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
93108: LD_INT 0
93110: PPUSH
93111: PPUSH
93112: PPUSH
93113: PPUSH
// if not hack in hackTanks then
93114: LD_VAR 0 1
93118: PUSH
93119: LD_EXP 138
93123: IN
93124: NOT
93125: IFFALSE 93129
// exit ;
93127: GO 93373
// index := GetElementIndex ( hackTanks , hack ) ;
93129: LD_ADDR_VAR 0 4
93133: PUSH
93134: LD_EXP 138
93138: PPUSH
93139: LD_VAR 0 1
93143: PPUSH
93144: CALL 35165 0 2
93148: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
93149: LD_ADDR_VAR 0 3
93153: PUSH
93154: DOUBLE
93155: LD_EXP 139
93159: PUSH
93160: LD_VAR 0 4
93164: ARRAY
93165: INC
93166: ST_TO_ADDR
93167: LD_INT 1
93169: PUSH
93170: FOR_DOWNTO
93171: IFFALSE 93347
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
93173: LD_ADDR_VAR 0 5
93177: PUSH
93178: LD_EXP 139
93182: PUSH
93183: LD_VAR 0 4
93187: ARRAY
93188: PUSH
93189: LD_VAR 0 3
93193: ARRAY
93194: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
93195: LD_VAR 0 5
93199: PUSH
93200: LD_INT 1
93202: ARRAY
93203: PPUSH
93204: CALL_OW 302
93208: NOT
93209: IFTRUE 93237
93211: PUSH
93212: LD_VAR 0 5
93216: PUSH
93217: LD_INT 1
93219: ARRAY
93220: PPUSH
93221: CALL_OW 255
93225: PUSH
93226: LD_VAR 0 1
93230: PPUSH
93231: CALL_OW 255
93235: NONEQUAL
93236: OR
93237: IFFALSE 93345
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
93239: LD_VAR 0 5
93243: PUSH
93244: LD_INT 1
93246: ARRAY
93247: PPUSH
93248: CALL_OW 305
93252: IFFALSE 93280
93254: PUSH
93255: LD_VAR 0 5
93259: PUSH
93260: LD_INT 1
93262: ARRAY
93263: PPUSH
93264: CALL_OW 255
93268: PUSH
93269: LD_VAR 0 1
93273: PPUSH
93274: CALL_OW 255
93278: EQUAL
93279: AND
93280: IFFALSE 93304
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
93282: LD_VAR 0 5
93286: PUSH
93287: LD_INT 1
93289: ARRAY
93290: PPUSH
93291: LD_VAR 0 5
93295: PUSH
93296: LD_INT 2
93298: ARRAY
93299: PPUSH
93300: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
93304: LD_ADDR_EXP 139
93308: PUSH
93309: LD_EXP 139
93313: PPUSH
93314: LD_VAR 0 4
93318: PPUSH
93319: LD_EXP 139
93323: PUSH
93324: LD_VAR 0 4
93328: ARRAY
93329: PPUSH
93330: LD_VAR 0 3
93334: PPUSH
93335: CALL_OW 3
93339: PPUSH
93340: CALL_OW 1
93344: ST_TO_ADDR
// end ; end ;
93345: GO 93170
93347: POP
93348: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
93349: LD_VAR 0 1
93353: PPUSH
93354: LD_EXP 139
93358: PUSH
93359: LD_VAR 0 4
93363: ARRAY
93364: PUSH
93365: LD_INT 0
93367: PLUS
93368: PPUSH
93369: CALL_OW 505
// end ;
93373: LD_VAR 0 2
93377: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
93378: LD_INT 0
93380: PPUSH
93381: PPUSH
93382: PPUSH
93383: PPUSH
// if not hack in hackTanks then
93384: LD_VAR 0 1
93388: PUSH
93389: LD_EXP 138
93393: IN
93394: NOT
93395: IFFALSE 93399
// exit ;
93397: GO 93484
// index := GetElementIndex ( hackTanks , hack ) ;
93399: LD_ADDR_VAR 0 5
93403: PUSH
93404: LD_EXP 138
93408: PPUSH
93409: LD_VAR 0 1
93413: PPUSH
93414: CALL 35165 0 2
93418: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
93419: LD_ADDR_VAR 0 4
93423: PUSH
93424: DOUBLE
93425: LD_INT 1
93427: DEC
93428: ST_TO_ADDR
93429: LD_EXP 139
93433: PUSH
93434: LD_VAR 0 5
93438: ARRAY
93439: PUSH
93440: FOR_TO
93441: IFFALSE 93482
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
93443: LD_EXP 139
93447: PUSH
93448: LD_VAR 0 5
93452: ARRAY
93453: PUSH
93454: LD_VAR 0 4
93458: ARRAY
93459: PUSH
93460: LD_INT 1
93462: ARRAY
93463: PUSH
93464: LD_VAR 0 2
93468: EQUAL
93469: IFFALSE 93480
// KillUnit ( vehicle ) ;
93471: LD_VAR 0 2
93475: PPUSH
93476: CALL_OW 66
93480: GO 93440
93482: POP
93483: POP
// end ;
93484: LD_VAR 0 3
93488: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
93489: LD_EXP 143
93493: NOT
93494: IFFALSE 93627
93496: GO 93498
93498: DISABLE
93499: LD_INT 0
93501: PPUSH
// begin initMiner := true ;
93502: LD_ADDR_EXP 143
93506: PUSH
93507: LD_INT 1
93509: ST_TO_ADDR
// minersList := [ ] ;
93510: LD_ADDR_EXP 144
93514: PUSH
93515: EMPTY
93516: ST_TO_ADDR
// minerMinesList := [ ] ;
93517: LD_ADDR_EXP 145
93521: PUSH
93522: EMPTY
93523: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
93524: LD_ADDR_EXP 146
93528: PUSH
93529: LD_INT 10
93531: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
93532: LD_ADDR_VAR 0 1
93536: PUSH
93537: LD_INT 34
93539: PUSH
93540: LD_INT 81
93542: PUSH
93543: EMPTY
93544: LIST
93545: LIST
93546: PPUSH
93547: CALL_OW 69
93551: PUSH
93552: FOR_IN
93553: IFFALSE 93625
// begin if not i in minersList then
93555: LD_VAR 0 1
93559: PUSH
93560: LD_EXP 144
93564: IN
93565: NOT
93566: IFFALSE 93623
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
93568: LD_ADDR_EXP 144
93572: PUSH
93573: LD_EXP 144
93577: PPUSH
93578: LD_EXP 144
93582: PUSH
93583: LD_INT 1
93585: PLUS
93586: PPUSH
93587: LD_VAR 0 1
93591: PPUSH
93592: CALL_OW 1
93596: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
93597: LD_ADDR_EXP 145
93601: PUSH
93602: LD_EXP 145
93606: PPUSH
93607: LD_EXP 145
93611: PUSH
93612: LD_INT 1
93614: PLUS
93615: PPUSH
93616: EMPTY
93617: PPUSH
93618: CALL_OW 1
93622: ST_TO_ADDR
// end end ;
93623: GO 93552
93625: POP
93626: POP
// end ;
93627: PPOPN 1
93629: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
93630: LD_EXP 143
93634: IFFALSE 93665
93636: PUSH
93637: LD_EXP 145
93641: PPUSH
93642: CALL 32464 0 1
93646: IFTRUE 93664
93648: PUSH
93649: LD_INT 34
93651: PUSH
93652: LD_INT 81
93654: PUSH
93655: EMPTY
93656: LIST
93657: LIST
93658: PPUSH
93659: CALL_OW 69
93663: OR
93664: AND
93665: IFFALSE 94185
93667: GO 93669
93669: DISABLE
93670: LD_INT 0
93672: PPUSH
93673: PPUSH
93674: PPUSH
93675: PPUSH
// begin enable ;
93676: ENABLE
// for i := minerMinesList downto 1 do
93677: LD_ADDR_VAR 0 1
93681: PUSH
93682: DOUBLE
93683: LD_EXP 145
93687: INC
93688: ST_TO_ADDR
93689: LD_INT 1
93691: PUSH
93692: FOR_DOWNTO
93693: IFFALSE 94183
// begin side := GetSide ( minersList [ i ] ) ;
93695: LD_ADDR_VAR 0 3
93699: PUSH
93700: LD_EXP 144
93704: PUSH
93705: LD_VAR 0 1
93709: ARRAY
93710: PPUSH
93711: CALL_OW 255
93715: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
93716: LD_EXP 144
93720: PUSH
93721: LD_VAR 0 1
93725: ARRAY
93726: PPUSH
93727: CALL_OW 300
93731: IFFALSE 93752
93733: PUSH
93734: LD_VAR 0 3
93738: PUSH
93739: LD_OWVAR 2
93743: PUSH
93744: LD_INT 9
93746: PUSH
93747: EMPTY
93748: LIST
93749: LIST
93750: IN
93751: AND
93752: IFFALSE 93785
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
93754: LD_EXP 144
93758: PUSH
93759: LD_VAR 0 1
93763: ARRAY
93764: PPUSH
93765: LD_EXP 145
93769: PUSH
93770: LD_VAR 0 1
93774: ARRAY
93775: PPUSH
93776: CALL 32464 0 1
93780: PPUSH
93781: CALL_OW 505
// if not minerMinesList [ i ] then
93785: LD_EXP 145
93789: PUSH
93790: LD_VAR 0 1
93794: ARRAY
93795: NOT
93796: IFFALSE 93800
// continue ;
93798: GO 93692
// for j := minerMinesList [ i ] downto 1 do
93800: LD_ADDR_VAR 0 2
93804: PUSH
93805: DOUBLE
93806: LD_EXP 145
93810: PUSH
93811: LD_VAR 0 1
93815: ARRAY
93816: INC
93817: ST_TO_ADDR
93818: LD_INT 1
93820: PUSH
93821: FOR_DOWNTO
93822: IFFALSE 94179
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
93824: LD_EXP 144
93828: PUSH
93829: LD_VAR 0 1
93833: ARRAY
93834: PPUSH
93835: CALL_OW 301
93839: IFTRUE 93859
93841: PUSH
93842: LD_EXP 144
93846: PUSH
93847: LD_VAR 0 1
93851: ARRAY
93852: PPUSH
93853: CALL_OW 305
93857: NOT
93858: OR
93859: IFFALSE 93950
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
93861: LD_EXP 145
93865: PUSH
93866: LD_VAR 0 1
93870: ARRAY
93871: PUSH
93872: LD_VAR 0 2
93876: ARRAY
93877: PUSH
93878: LD_INT 1
93880: ARRAY
93881: PPUSH
93882: LD_EXP 145
93886: PUSH
93887: LD_VAR 0 1
93891: ARRAY
93892: PUSH
93893: LD_VAR 0 2
93897: ARRAY
93898: PUSH
93899: LD_INT 2
93901: ARRAY
93902: PPUSH
93903: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
93907: LD_ADDR_EXP 145
93911: PUSH
93912: LD_EXP 145
93916: PPUSH
93917: LD_VAR 0 1
93921: PPUSH
93922: LD_EXP 145
93926: PUSH
93927: LD_VAR 0 1
93931: ARRAY
93932: PPUSH
93933: LD_VAR 0 2
93937: PPUSH
93938: CALL_OW 3
93942: PPUSH
93943: CALL_OW 1
93947: ST_TO_ADDR
// continue ;
93948: GO 93821
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
93950: LD_ADDR_VAR 0 4
93954: PUSH
93955: LD_EXP 145
93959: PUSH
93960: LD_VAR 0 1
93964: ARRAY
93965: PUSH
93966: LD_VAR 0 2
93970: ARRAY
93971: PUSH
93972: LD_INT 1
93974: ARRAY
93975: PPUSH
93976: LD_EXP 145
93980: PUSH
93981: LD_VAR 0 1
93985: ARRAY
93986: PUSH
93987: LD_VAR 0 2
93991: ARRAY
93992: PUSH
93993: LD_INT 2
93995: ARRAY
93996: PPUSH
93997: CALL_OW 428
94001: ST_TO_ADDR
// if not tmp then
94002: LD_VAR 0 4
94006: NOT
94007: IFFALSE 94011
// continue ;
94009: GO 93821
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
94011: LD_VAR 0 4
94015: PUSH
94016: LD_INT 81
94018: PUSH
94019: LD_VAR 0 3
94023: PUSH
94024: EMPTY
94025: LIST
94026: LIST
94027: PPUSH
94028: CALL_OW 69
94032: IN
94033: IFFALSE 94083
94035: PUSH
94036: LD_EXP 145
94040: PUSH
94041: LD_VAR 0 1
94045: ARRAY
94046: PUSH
94047: LD_VAR 0 2
94051: ARRAY
94052: PUSH
94053: LD_INT 1
94055: ARRAY
94056: PPUSH
94057: LD_EXP 145
94061: PUSH
94062: LD_VAR 0 1
94066: ARRAY
94067: PUSH
94068: LD_VAR 0 2
94072: ARRAY
94073: PUSH
94074: LD_INT 2
94076: ARRAY
94077: PPUSH
94078: CALL_OW 458
94082: AND
94083: IFFALSE 94177
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
94085: LD_EXP 145
94089: PUSH
94090: LD_VAR 0 1
94094: ARRAY
94095: PUSH
94096: LD_VAR 0 2
94100: ARRAY
94101: PUSH
94102: LD_INT 1
94104: ARRAY
94105: PPUSH
94106: LD_EXP 145
94110: PUSH
94111: LD_VAR 0 1
94115: ARRAY
94116: PUSH
94117: LD_VAR 0 2
94121: ARRAY
94122: PUSH
94123: LD_INT 2
94125: ARRAY
94126: PPUSH
94127: LD_VAR 0 3
94131: PPUSH
94132: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
94136: LD_ADDR_EXP 145
94140: PUSH
94141: LD_EXP 145
94145: PPUSH
94146: LD_VAR 0 1
94150: PPUSH
94151: LD_EXP 145
94155: PUSH
94156: LD_VAR 0 1
94160: ARRAY
94161: PPUSH
94162: LD_VAR 0 2
94166: PPUSH
94167: CALL_OW 3
94171: PPUSH
94172: CALL_OW 1
94176: ST_TO_ADDR
// end ; end ;
94177: GO 93821
94179: POP
94180: POP
// end ;
94181: GO 93692
94183: POP
94184: POP
// end ;
94185: PPOPN 4
94187: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
94188: LD_INT 0
94190: PPUSH
94191: PPUSH
94192: PPUSH
94193: PPUSH
// result := false ;
94194: LD_ADDR_VAR 0 4
94198: PUSH
94199: LD_INT 0
94201: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
94202: LD_VAR 0 1
94206: PPUSH
94207: CALL_OW 264
94211: PUSH
94212: LD_INT 81
94214: EQUAL
94215: NOT
94216: IFFALSE 94220
// exit ;
94218: GO 94590
// side := GetSide ( unit ) ;
94220: LD_ADDR_VAR 0 6
94224: PUSH
94225: LD_VAR 0 1
94229: PPUSH
94230: CALL_OW 255
94234: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
94235: LD_ADDR_VAR 0 5
94239: PUSH
94240: LD_EXP 144
94244: PPUSH
94245: LD_VAR 0 1
94249: PPUSH
94250: CALL 35165 0 2
94254: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
94255: LD_EXP 145
94259: PUSH
94260: LD_VAR 0 5
94264: ARRAY
94265: PUSH
94266: LD_EXP 146
94270: GREATEREQUAL
94271: IFFALSE 94275
// exit ;
94273: GO 94590
// ComMoveXY ( unit , x , y ) ;
94275: LD_VAR 0 1
94279: PPUSH
94280: LD_VAR 0 2
94284: PPUSH
94285: LD_VAR 0 3
94289: PPUSH
94290: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
94294: LD_INT 35
94296: PPUSH
94297: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
94301: LD_VAR 0 1
94305: PPUSH
94306: LD_VAR 0 2
94310: PPUSH
94311: LD_VAR 0 3
94315: PPUSH
94316: CALL 67221 0 3
94320: NOT
94321: IFFALSE 94334
94323: PUSH
94324: LD_VAR 0 1
94328: PPUSH
94329: CALL_OW 314
94333: AND
94334: IFFALSE 94338
// exit ;
94336: GO 94590
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
94338: LD_VAR 0 2
94342: PPUSH
94343: LD_VAR 0 3
94347: PPUSH
94348: CALL_OW 428
94352: PUSH
94353: LD_VAR 0 1
94357: EQUAL
94358: IFFALSE 94372
94360: PUSH
94361: LD_VAR 0 1
94365: PPUSH
94366: CALL_OW 314
94370: NOT
94371: AND
94372: IFFALSE 94294
// if MineAtPos ( x , y ) then
94374: LD_VAR 0 2
94378: PPUSH
94379: LD_VAR 0 3
94383: PPUSH
94384: CALL_OW 458
94388: IFFALSE 94392
// exit ;
94390: GO 94590
// if your_side = side then
94392: LD_OWVAR 2
94396: PUSH
94397: LD_VAR 0 6
94401: EQUAL
94402: IFFALSE 94421
// PlaySoundXY ( x , y , PlantMine ) ;
94404: LD_VAR 0 2
94408: PPUSH
94409: LD_VAR 0 3
94413: PPUSH
94414: LD_STRING PlantMine
94416: PPUSH
94417: CALL_OW 366
// repeat wait ( 1 ) ;
94421: LD_INT 1
94423: PPUSH
94424: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
94428: LD_VAR 0 2
94432: PPUSH
94433: LD_VAR 0 3
94437: PPUSH
94438: LD_VAR 0 6
94442: PPUSH
94443: LD_INT 0
94445: PPUSH
94446: CALL_OW 454
94450: IFFALSE 94421
// if MineAtPos ( x , y ) then
94452: LD_VAR 0 2
94456: PPUSH
94457: LD_VAR 0 3
94461: PPUSH
94462: CALL_OW 458
94466: IFFALSE 94582
// begin for i in minerMinesList [ index ] do
94468: LD_ADDR_VAR 0 7
94472: PUSH
94473: LD_EXP 145
94477: PUSH
94478: LD_VAR 0 5
94482: ARRAY
94483: PUSH
94484: FOR_IN
94485: IFFALSE 94527
// if i [ 1 ] = x and i [ 2 ] = y then
94487: LD_VAR 0 7
94491: PUSH
94492: LD_INT 1
94494: ARRAY
94495: PUSH
94496: LD_VAR 0 2
94500: EQUAL
94501: IFFALSE 94519
94503: PUSH
94504: LD_VAR 0 7
94508: PUSH
94509: LD_INT 2
94511: ARRAY
94512: PUSH
94513: LD_VAR 0 3
94517: EQUAL
94518: AND
94519: IFFALSE 94525
// exit ;
94521: POP
94522: POP
94523: GO 94590
94525: GO 94484
94527: POP
94528: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
94529: LD_ADDR_EXP 145
94533: PUSH
94534: LD_EXP 145
94538: PPUSH
94539: LD_VAR 0 5
94543: PUSH
94544: LD_EXP 145
94548: PUSH
94549: LD_VAR 0 5
94553: ARRAY
94554: PUSH
94555: LD_INT 1
94557: PLUS
94558: PUSH
94559: EMPTY
94560: LIST
94561: LIST
94562: PPUSH
94563: LD_VAR 0 2
94567: PUSH
94568: LD_VAR 0 3
94572: PUSH
94573: EMPTY
94574: LIST
94575: LIST
94576: PPUSH
94577: CALL 35382 0 3
94581: ST_TO_ADDR
// end ; result := true ;
94582: LD_ADDR_VAR 0 4
94586: PUSH
94587: LD_INT 1
94589: ST_TO_ADDR
// end ;
94590: LD_VAR 0 4
94594: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
94595: LD_INT 0
94597: PPUSH
94598: PPUSH
94599: PPUSH
// if not unit in minersList then
94600: LD_VAR 0 1
94604: PUSH
94605: LD_EXP 144
94609: IN
94610: NOT
94611: IFFALSE 94615
// exit ;
94613: GO 94822
// index := GetElementIndex ( minersList , unit ) ;
94615: LD_ADDR_VAR 0 6
94619: PUSH
94620: LD_EXP 144
94624: PPUSH
94625: LD_VAR 0 1
94629: PPUSH
94630: CALL 35165 0 2
94634: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
94635: LD_ADDR_VAR 0 5
94639: PUSH
94640: DOUBLE
94641: LD_EXP 145
94645: PUSH
94646: LD_VAR 0 6
94650: ARRAY
94651: INC
94652: ST_TO_ADDR
94653: LD_INT 1
94655: PUSH
94656: FOR_DOWNTO
94657: IFFALSE 94820
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
94659: LD_EXP 145
94663: PUSH
94664: LD_VAR 0 6
94668: ARRAY
94669: PUSH
94670: LD_VAR 0 5
94674: ARRAY
94675: PUSH
94676: LD_INT 1
94678: ARRAY
94679: PPUSH
94680: LD_EXP 145
94684: PUSH
94685: LD_VAR 0 6
94689: ARRAY
94690: PUSH
94691: LD_VAR 0 5
94695: ARRAY
94696: PUSH
94697: LD_INT 2
94699: ARRAY
94700: PPUSH
94701: LD_VAR 0 2
94705: PPUSH
94706: LD_VAR 0 3
94710: PPUSH
94711: CALL_OW 298
94715: PUSH
94716: LD_INT 6
94718: LESS
94719: IFFALSE 94818
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
94721: LD_EXP 145
94725: PUSH
94726: LD_VAR 0 6
94730: ARRAY
94731: PUSH
94732: LD_VAR 0 5
94736: ARRAY
94737: PUSH
94738: LD_INT 1
94740: ARRAY
94741: PPUSH
94742: LD_EXP 145
94746: PUSH
94747: LD_VAR 0 6
94751: ARRAY
94752: PUSH
94753: LD_VAR 0 5
94757: ARRAY
94758: PUSH
94759: LD_INT 2
94761: ARRAY
94762: PPUSH
94763: LD_VAR 0 1
94767: PPUSH
94768: CALL_OW 255
94772: PPUSH
94773: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
94777: LD_ADDR_EXP 145
94781: PUSH
94782: LD_EXP 145
94786: PPUSH
94787: LD_VAR 0 6
94791: PPUSH
94792: LD_EXP 145
94796: PUSH
94797: LD_VAR 0 6
94801: ARRAY
94802: PPUSH
94803: LD_VAR 0 5
94807: PPUSH
94808: CALL_OW 3
94812: PPUSH
94813: CALL_OW 1
94817: ST_TO_ADDR
// end ; end ;
94818: GO 94656
94820: POP
94821: POP
// end ;
94822: LD_VAR 0 4
94826: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
94827: LD_INT 0
94829: PPUSH
94830: PPUSH
94831: PPUSH
94832: PPUSH
94833: PPUSH
94834: PPUSH
94835: PPUSH
94836: PPUSH
94837: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
94838: LD_VAR 0 1
94842: PPUSH
94843: CALL_OW 264
94847: PUSH
94848: LD_INT 81
94850: EQUAL
94851: NOT
94852: IFTRUE 94867
94854: PUSH
94855: LD_VAR 0 1
94859: PUSH
94860: LD_EXP 144
94864: IN
94865: NOT
94866: OR
94867: IFFALSE 94871
// exit ;
94869: GO 95197
// index := GetElementIndex ( minersList , unit ) ;
94871: LD_ADDR_VAR 0 6
94875: PUSH
94876: LD_EXP 144
94880: PPUSH
94881: LD_VAR 0 1
94885: PPUSH
94886: CALL 35165 0 2
94890: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
94891: LD_ADDR_VAR 0 8
94895: PUSH
94896: LD_EXP 146
94900: PUSH
94901: LD_EXP 145
94905: PUSH
94906: LD_VAR 0 6
94910: ARRAY
94911: MINUS
94912: ST_TO_ADDR
// if not minesFreeAmount then
94913: LD_VAR 0 8
94917: NOT
94918: IFFALSE 94922
// exit ;
94920: GO 95197
// tmp := [ ] ;
94922: LD_ADDR_VAR 0 7
94926: PUSH
94927: EMPTY
94928: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
94929: LD_ADDR_VAR 0 5
94933: PUSH
94934: DOUBLE
94935: LD_INT 1
94937: DEC
94938: ST_TO_ADDR
94939: LD_VAR 0 8
94943: PUSH
94944: FOR_TO
94945: IFFALSE 95144
// begin _d := rand ( 0 , 5 ) ;
94947: LD_ADDR_VAR 0 11
94951: PUSH
94952: LD_INT 0
94954: PPUSH
94955: LD_INT 5
94957: PPUSH
94958: CALL_OW 12
94962: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
94963: LD_ADDR_VAR 0 12
94967: PUSH
94968: LD_INT 2
94970: PPUSH
94971: LD_INT 6
94973: PPUSH
94974: CALL_OW 12
94978: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
94979: LD_ADDR_VAR 0 9
94983: PUSH
94984: LD_VAR 0 2
94988: PPUSH
94989: LD_VAR 0 11
94993: PPUSH
94994: LD_VAR 0 12
94998: PPUSH
94999: CALL_OW 272
95003: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
95004: LD_ADDR_VAR 0 10
95008: PUSH
95009: LD_VAR 0 3
95013: PPUSH
95014: LD_VAR 0 11
95018: PPUSH
95019: LD_VAR 0 12
95023: PPUSH
95024: CALL_OW 273
95028: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
95029: LD_VAR 0 9
95033: PPUSH
95034: LD_VAR 0 10
95038: PPUSH
95039: CALL_OW 488
95043: IFFALSE 95067
95045: PUSH
95046: LD_VAR 0 9
95050: PUSH
95051: LD_VAR 0 10
95055: PUSH
95056: EMPTY
95057: LIST
95058: LIST
95059: PUSH
95060: LD_VAR 0 7
95064: IN
95065: NOT
95066: AND
95067: IFFALSE 95086
95069: PUSH
95070: LD_VAR 0 9
95074: PPUSH
95075: LD_VAR 0 10
95079: PPUSH
95080: CALL_OW 458
95084: NOT
95085: AND
95086: IFFALSE 95128
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
95088: LD_ADDR_VAR 0 7
95092: PUSH
95093: LD_VAR 0 7
95097: PPUSH
95098: LD_VAR 0 7
95102: PUSH
95103: LD_INT 1
95105: PLUS
95106: PPUSH
95107: LD_VAR 0 9
95111: PUSH
95112: LD_VAR 0 10
95116: PUSH
95117: EMPTY
95118: LIST
95119: LIST
95120: PPUSH
95121: CALL_OW 1
95125: ST_TO_ADDR
95126: GO 95142
// i := i - 1 ;
95128: LD_ADDR_VAR 0 5
95132: PUSH
95133: LD_VAR 0 5
95137: PUSH
95138: LD_INT 1
95140: MINUS
95141: ST_TO_ADDR
// end ;
95142: GO 94944
95144: POP
95145: POP
// for i in tmp do
95146: LD_ADDR_VAR 0 5
95150: PUSH
95151: LD_VAR 0 7
95155: PUSH
95156: FOR_IN
95157: IFFALSE 95195
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
95159: LD_VAR 0 1
95163: PPUSH
95164: LD_VAR 0 5
95168: PUSH
95169: LD_INT 1
95171: ARRAY
95172: PPUSH
95173: LD_VAR 0 5
95177: PUSH
95178: LD_INT 2
95180: ARRAY
95181: PPUSH
95182: CALL 94188 0 3
95186: NOT
95187: IFFALSE 95193
// exit ;
95189: POP
95190: POP
95191: GO 95197
95193: GO 95156
95195: POP
95196: POP
// end ;
95197: LD_VAR 0 4
95201: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
95202: LD_INT 0
95204: PPUSH
95205: PPUSH
95206: PPUSH
95207: PPUSH
95208: PPUSH
95209: PPUSH
95210: PPUSH
95211: PPUSH
95212: PPUSH
// if GetClass ( unit ) <> class_sniper then
95213: LD_VAR 0 1
95217: PPUSH
95218: CALL_OW 257
95222: PUSH
95223: LD_INT 5
95225: NONEQUAL
95226: IFFALSE 95230
// exit ;
95228: GO 95700
// dist := 8 ;
95230: LD_ADDR_VAR 0 5
95234: PUSH
95235: LD_INT 8
95237: ST_TO_ADDR
// viewRange := 12 ;
95238: LD_ADDR_VAR 0 8
95242: PUSH
95243: LD_INT 12
95245: ST_TO_ADDR
// side := GetSide ( unit ) ;
95246: LD_ADDR_VAR 0 6
95250: PUSH
95251: LD_VAR 0 1
95255: PPUSH
95256: CALL_OW 255
95260: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
95261: LD_INT 61
95263: PPUSH
95264: LD_VAR 0 6
95268: PPUSH
95269: CALL_OW 321
95273: PUSH
95274: LD_INT 2
95276: EQUAL
95277: IFFALSE 95287
// viewRange := 16 ;
95279: LD_ADDR_VAR 0 8
95283: PUSH
95284: LD_INT 16
95286: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
95287: LD_VAR 0 1
95291: PPUSH
95292: LD_VAR 0 2
95296: PPUSH
95297: LD_VAR 0 3
95301: PPUSH
95302: CALL_OW 297
95306: PUSH
95307: LD_VAR 0 5
95311: GREATER
95312: IFFALSE 95391
// begin ComMoveXY ( unit , x , y ) ;
95314: LD_VAR 0 1
95318: PPUSH
95319: LD_VAR 0 2
95323: PPUSH
95324: LD_VAR 0 3
95328: PPUSH
95329: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
95333: LD_INT 35
95335: PPUSH
95336: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
95340: LD_VAR 0 1
95344: PPUSH
95345: LD_VAR 0 2
95349: PPUSH
95350: LD_VAR 0 3
95354: PPUSH
95355: CALL 67221 0 3
95359: NOT
95360: IFFALSE 95364
// exit ;
95362: GO 95700
// until GetDistUnitXY ( unit , x , y ) < dist ;
95364: LD_VAR 0 1
95368: PPUSH
95369: LD_VAR 0 2
95373: PPUSH
95374: LD_VAR 0 3
95378: PPUSH
95379: CALL_OW 297
95383: PUSH
95384: LD_VAR 0 5
95388: LESS
95389: IFFALSE 95333
// end ; ComTurnXY ( unit , x , y ) ;
95391: LD_VAR 0 1
95395: PPUSH
95396: LD_VAR 0 2
95400: PPUSH
95401: LD_VAR 0 3
95405: PPUSH
95406: CALL_OW 118
// repeat if Multiplayer then
95410: LD_OWVAR 4
95414: IFFALSE 95425
// wait ( 35 ) else
95416: LD_INT 35
95418: PPUSH
95419: CALL_OW 67
95423: GO 95432
// wait ( 5 ) ;
95425: LD_INT 5
95427: PPUSH
95428: CALL_OW 67
// _d := GetDir ( unit ) ;
95432: LD_ADDR_VAR 0 11
95436: PUSH
95437: LD_VAR 0 1
95441: PPUSH
95442: CALL_OW 254
95446: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
95447: LD_ADDR_VAR 0 7
95451: PUSH
95452: LD_VAR 0 1
95456: PPUSH
95457: CALL_OW 250
95461: PPUSH
95462: LD_VAR 0 1
95466: PPUSH
95467: CALL_OW 251
95471: PPUSH
95472: LD_VAR 0 2
95476: PPUSH
95477: LD_VAR 0 3
95481: PPUSH
95482: CALL 69857 0 4
95486: ST_TO_ADDR
// until dir = _d ;
95487: LD_VAR 0 7
95491: PUSH
95492: LD_VAR 0 11
95496: EQUAL
95497: IFFALSE 95410
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
95499: LD_ADDR_VAR 0 9
95503: PUSH
95504: LD_VAR 0 1
95508: PPUSH
95509: CALL_OW 250
95513: PPUSH
95514: LD_VAR 0 7
95518: PPUSH
95519: LD_VAR 0 5
95523: PPUSH
95524: CALL_OW 272
95528: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
95529: LD_ADDR_VAR 0 10
95533: PUSH
95534: LD_VAR 0 1
95538: PPUSH
95539: CALL_OW 251
95543: PPUSH
95544: LD_VAR 0 7
95548: PPUSH
95549: LD_VAR 0 5
95553: PPUSH
95554: CALL_OW 273
95558: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
95559: LD_VAR 0 9
95563: PPUSH
95564: LD_VAR 0 10
95568: PPUSH
95569: CALL_OW 488
95573: NOT
95574: IFFALSE 95578
// exit ;
95576: GO 95700
// ComAnimCustom ( unit , 1 ) ;
95578: LD_VAR 0 1
95582: PPUSH
95583: LD_INT 1
95585: PPUSH
95586: CALL_OW 592
// p := 0 ;
95590: LD_ADDR_VAR 0 12
95594: PUSH
95595: LD_INT 0
95597: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
95598: LD_VAR 0 9
95602: PPUSH
95603: LD_VAR 0 10
95607: PPUSH
95608: LD_VAR 0 6
95612: PPUSH
95613: LD_VAR 0 8
95617: PPUSH
95618: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
95622: LD_INT 35
95624: PPUSH
95625: CALL_OW 67
// p := Inc ( p ) ;
95629: LD_ADDR_VAR 0 12
95633: PUSH
95634: LD_VAR 0 12
95638: PPUSH
95639: CALL 69813 0 1
95643: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
95644: LD_VAR 0 12
95648: PUSH
95649: LD_INT 3
95651: EQUAL
95652: IFTRUE 95666
95654: PUSH
95655: LD_VAR 0 1
95659: PPUSH
95660: CALL_OW 302
95664: NOT
95665: OR
95666: IFTRUE 95679
95668: PUSH
95669: LD_VAR 0 1
95673: PPUSH
95674: CALL_OW 301
95678: OR
95679: IFFALSE 95622
// RemoveSeeing ( _x , _y , side ) ;
95681: LD_VAR 0 9
95685: PPUSH
95686: LD_VAR 0 10
95690: PPUSH
95691: LD_VAR 0 6
95695: PPUSH
95696: CALL_OW 331
// end ;
95700: LD_VAR 0 4
95704: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
95705: LD_INT 0
95707: PPUSH
95708: PPUSH
95709: PPUSH
95710: PPUSH
95711: PPUSH
95712: PPUSH
95713: PPUSH
95714: PPUSH
95715: PPUSH
95716: PPUSH
95717: PPUSH
// if not unit then
95718: LD_VAR 0 1
95722: NOT
95723: IFFALSE 95727
// exit ;
95725: GO 95998
// side := GetSide ( unit ) ;
95727: LD_ADDR_VAR 0 3
95731: PUSH
95732: LD_VAR 0 1
95736: PPUSH
95737: CALL_OW 255
95741: ST_TO_ADDR
// x := GetX ( unit ) ;
95742: LD_ADDR_VAR 0 5
95746: PUSH
95747: LD_VAR 0 1
95751: PPUSH
95752: CALL_OW 250
95756: ST_TO_ADDR
// y := GetY ( unit ) ;
95757: LD_ADDR_VAR 0 6
95761: PUSH
95762: LD_VAR 0 1
95766: PPUSH
95767: CALL_OW 251
95771: ST_TO_ADDR
// r := 8 ;
95772: LD_ADDR_VAR 0 4
95776: PUSH
95777: LD_INT 8
95779: ST_TO_ADDR
// if x - r < 0 then
95780: LD_VAR 0 5
95784: PUSH
95785: LD_VAR 0 4
95789: MINUS
95790: PUSH
95791: LD_INT 0
95793: LESS
95794: IFFALSE 95806
// min_x := 0 else
95796: LD_ADDR_VAR 0 7
95800: PUSH
95801: LD_INT 0
95803: ST_TO_ADDR
95804: GO 95822
// min_x := x - r ;
95806: LD_ADDR_VAR 0 7
95810: PUSH
95811: LD_VAR 0 5
95815: PUSH
95816: LD_VAR 0 4
95820: MINUS
95821: ST_TO_ADDR
// if y - r < 0 then
95822: LD_VAR 0 6
95826: PUSH
95827: LD_VAR 0 4
95831: MINUS
95832: PUSH
95833: LD_INT 0
95835: LESS
95836: IFFALSE 95848
// min_y := 0 else
95838: LD_ADDR_VAR 0 8
95842: PUSH
95843: LD_INT 0
95845: ST_TO_ADDR
95846: GO 95864
// min_y := y - r ;
95848: LD_ADDR_VAR 0 8
95852: PUSH
95853: LD_VAR 0 6
95857: PUSH
95858: LD_VAR 0 4
95862: MINUS
95863: ST_TO_ADDR
// max_x := x + r ;
95864: LD_ADDR_VAR 0 9
95868: PUSH
95869: LD_VAR 0 5
95873: PUSH
95874: LD_VAR 0 4
95878: PLUS
95879: ST_TO_ADDR
// max_y := y + r ;
95880: LD_ADDR_VAR 0 10
95884: PUSH
95885: LD_VAR 0 6
95889: PUSH
95890: LD_VAR 0 4
95894: PLUS
95895: ST_TO_ADDR
// for _x = min_x to max_x do
95896: LD_ADDR_VAR 0 11
95900: PUSH
95901: DOUBLE
95902: LD_VAR 0 7
95906: DEC
95907: ST_TO_ADDR
95908: LD_VAR 0 9
95912: PUSH
95913: FOR_TO
95914: IFFALSE 95996
// for _y = min_y to max_y do
95916: LD_ADDR_VAR 0 12
95920: PUSH
95921: DOUBLE
95922: LD_VAR 0 8
95926: DEC
95927: ST_TO_ADDR
95928: LD_VAR 0 10
95932: PUSH
95933: FOR_TO
95934: IFFALSE 95992
// begin if not ValidHex ( _x , _y ) then
95936: LD_VAR 0 11
95940: PPUSH
95941: LD_VAR 0 12
95945: PPUSH
95946: CALL_OW 488
95950: NOT
95951: IFFALSE 95955
// continue ;
95953: GO 95933
// if MineAtPos ( _x , _y ) then
95955: LD_VAR 0 11
95959: PPUSH
95960: LD_VAR 0 12
95964: PPUSH
95965: CALL_OW 458
95969: IFFALSE 95990
// ViewMineAtPos ( _x , _y , side ) ;
95971: LD_VAR 0 11
95975: PPUSH
95976: LD_VAR 0 12
95980: PPUSH
95981: LD_VAR 0 3
95985: PPUSH
95986: CALL_OW 457
// end ;
95990: GO 95933
95992: POP
95993: POP
95994: GO 95913
95996: POP
95997: POP
// end ;
95998: LD_VAR 0 2
96002: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
96003: LD_INT 0
96005: PPUSH
96006: PPUSH
96007: PPUSH
96008: PPUSH
96009: PPUSH
96010: PPUSH
96011: PPUSH
// if not units then
96012: LD_VAR 0 1
96016: NOT
96017: IFFALSE 96021
// exit ;
96019: GO 96485
// scaners := [ ] ;
96021: LD_ADDR_VAR 0 6
96025: PUSH
96026: EMPTY
96027: ST_TO_ADDR
// for i in units do
96028: LD_ADDR_VAR 0 3
96032: PUSH
96033: LD_VAR 0 1
96037: PUSH
96038: FOR_IN
96039: IFFALSE 96196
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
96041: LD_VAR 0 3
96045: PPUSH
96046: CALL_OW 264
96050: PUSH
96051: LD_INT 11
96053: NONEQUAL
96054: IFTRUE 96068
96056: PUSH
96057: LD_VAR 0 3
96061: PPUSH
96062: CALL_OW 302
96066: NOT
96067: OR
96068: IFTRUE 96085
96070: PUSH
96071: LD_VAR 0 3
96075: PPUSH
96076: CALL_OW 110
96080: PUSH
96081: LD_INT 502
96083: EQUAL
96084: OR
96085: IFFALSE 96089
// continue ;
96087: GO 96038
// ComStop ( i ) ;
96089: LD_VAR 0 3
96093: PPUSH
96094: CALL_OW 141
// x := GetX ( i ) ;
96098: LD_ADDR_VAR 0 4
96102: PUSH
96103: LD_VAR 0 3
96107: PPUSH
96108: CALL_OW 250
96112: ST_TO_ADDR
// y := GetY ( i ) ;
96113: LD_ADDR_VAR 0 5
96117: PUSH
96118: LD_VAR 0 3
96122: PPUSH
96123: CALL_OW 251
96127: ST_TO_ADDR
// if GetSide ( i ) = your_side then
96128: LD_VAR 0 3
96132: PPUSH
96133: CALL_OW 255
96137: PUSH
96138: LD_OWVAR 2
96142: EQUAL
96143: IFFALSE 96162
// PlaySoundXY ( x , y , mineDetector ) ;
96145: LD_VAR 0 4
96149: PPUSH
96150: LD_VAR 0 5
96154: PPUSH
96155: LD_STRING mineDetector
96157: PPUSH
96158: CALL_OW 366
// scaners := Join ( scaners , i ) ;
96162: LD_ADDR_VAR 0 6
96166: PUSH
96167: LD_VAR 0 6
96171: PPUSH
96172: LD_VAR 0 3
96176: PPUSH
96177: CALL 68440 0 2
96181: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
96182: LD_VAR 0 3
96186: PPUSH
96187: LD_INT 502
96189: PPUSH
96190: CALL_OW 109
// end ;
96194: GO 96038
96196: POP
96197: POP
// if not scaners then
96198: LD_VAR 0 6
96202: NOT
96203: IFFALSE 96207
// exit ;
96205: GO 96485
// wait ( 3 ) ;
96207: LD_INT 3
96209: PPUSH
96210: CALL_OW 67
// timer := 6 ;
96214: LD_ADDR_VAR 0 7
96218: PUSH
96219: LD_INT 6
96221: ST_TO_ADDR
// repeat for i in scaners do
96222: LD_ADDR_VAR 0 3
96226: PUSH
96227: LD_VAR 0 6
96231: PUSH
96232: FOR_IN
96233: IFFALSE 96383
// begin side := GetSide ( i ) ;
96235: LD_ADDR_VAR 0 8
96239: PUSH
96240: LD_VAR 0 3
96244: PPUSH
96245: CALL_OW 255
96249: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
96250: LD_VAR 0 3
96254: PPUSH
96255: CALL_OW 302
96259: NOT
96260: IFTRUE 96273
96262: PUSH
96263: LD_VAR 0 3
96267: PPUSH
96268: CALL_OW 314
96272: OR
96273: IFTRUE 96304
96275: PUSH
96276: LD_VAR 0 3
96280: PPUSH
96281: CALL_OW 263
96285: PUSH
96286: LD_INT 1
96288: EQUAL
96289: IFFALSE 96303
96291: PUSH
96292: LD_VAR 0 3
96296: PPUSH
96297: CALL_OW 311
96301: NOT
96302: AND
96303: OR
96304: IFFALSE 96348
// begin SetUnitDisplayNumber ( i , 0 ) ;
96306: LD_VAR 0 3
96310: PPUSH
96311: LD_INT 0
96313: PPUSH
96314: CALL_OW 505
// SetTag ( i , 0 ) ;
96318: LD_VAR 0 3
96322: PPUSH
96323: LD_INT 0
96325: PPUSH
96326: CALL_OW 109
// scaners := scaners diff i ;
96330: LD_ADDR_VAR 0 6
96334: PUSH
96335: LD_VAR 0 6
96339: PUSH
96340: LD_VAR 0 3
96344: DIFF
96345: ST_TO_ADDR
// continue ;
96346: GO 96232
// end ; if side in [ your_side , 9 ] then
96348: LD_VAR 0 8
96352: PUSH
96353: LD_OWVAR 2
96357: PUSH
96358: LD_INT 9
96360: PUSH
96361: EMPTY
96362: LIST
96363: LIST
96364: IN
96365: IFFALSE 96381
// SetUnitDisplayNumber ( i , timer ) ;
96367: LD_VAR 0 3
96371: PPUSH
96372: LD_VAR 0 7
96376: PPUSH
96377: CALL_OW 505
// end ;
96381: GO 96232
96383: POP
96384: POP
// if not scaners then
96385: LD_VAR 0 6
96389: NOT
96390: IFFALSE 96394
// exit ;
96392: GO 96485
// timer := Dec ( timer ) ;
96394: LD_ADDR_VAR 0 7
96398: PUSH
96399: LD_VAR 0 7
96403: PPUSH
96404: CALL 69835 0 1
96408: ST_TO_ADDR
// wait ( 0 0$1 ) ;
96409: LD_INT 35
96411: PPUSH
96412: CALL_OW 67
// until timer = 0 ;
96416: LD_VAR 0 7
96420: PUSH
96421: LD_INT 0
96423: EQUAL
96424: IFFALSE 96222
// if not scaners then
96426: LD_VAR 0 6
96430: NOT
96431: IFFALSE 96435
// exit ;
96433: GO 96485
// for i in scaners do
96435: LD_ADDR_VAR 0 3
96439: PUSH
96440: LD_VAR 0 6
96444: PUSH
96445: FOR_IN
96446: IFFALSE 96483
// begin SetUnitDisplayNumber ( i , 0 ) ;
96448: LD_VAR 0 3
96452: PPUSH
96453: LD_INT 0
96455: PPUSH
96456: CALL_OW 505
// SetTag ( i , 0 ) ;
96460: LD_VAR 0 3
96464: PPUSH
96465: LD_INT 0
96467: PPUSH
96468: CALL_OW 109
// RevealDetectorMine ( i ) ;
96472: LD_VAR 0 3
96476: PPUSH
96477: CALL 95705 0 1
// end ;
96481: GO 96445
96483: POP
96484: POP
// end ;
96485: LD_VAR 0 2
96489: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
96490: LD_INT 0
96492: PPUSH
// if p1 = mine_detector_mode then
96493: LD_VAR 0 2
96497: PUSH
96498: LD_INT 103
96500: EQUAL
96501: IFFALSE 96512
// DetectMine ( units ) ;
96503: LD_VAR 0 1
96507: PPUSH
96508: CALL 96003 0 1
// end ; end_of_file
96512: LD_VAR 0 7
96516: RET
// export function StopOriginalMusic ; begin
96517: LD_INT 0
96519: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
96520: LD_STRING OW_FORCEMUSICDISABLE(true);
96522: PPUSH
96523: CALL_OW 559
// end ;
96527: LD_VAR 0 1
96531: RET
// export function PlayOriginalMusic ; begin
96532: LD_INT 0
96534: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
96535: LD_STRING OW_FORCEMUSICDISABLE(false);
96537: PPUSH
96538: CALL_OW 559
// end ;
96542: LD_VAR 0 1
96546: RET
// export function PlayCustomMusic ( track , callback ) ; begin
96547: LD_INT 0
96549: PPUSH
// StopOriginalMusic ;
96550: CALL 96517 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
96554: LD_STRING playMusic("
96556: PUSH
96557: LD_VAR 0 1
96561: STR
96562: PUSH
96563: LD_STRING ", "
96565: STR
96566: PUSH
96567: LD_VAR 0 2
96571: STR
96572: PUSH
96573: LD_STRING ")
96575: STR
96576: PPUSH
96577: CALL_OW 559
// end ;
96581: LD_VAR 0 3
96585: RET
