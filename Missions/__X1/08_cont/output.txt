// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 18989 0 0
// PrepareRussian ;
  12: CALL 1934 0 0
// PrepareArabian ;
  16: CALL 378 0 0
// Action ;
  20: CALL 3677 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// enable ( entranceEvent ) ;
 367: LD_INT 1
 369: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 370: LD_INT 2
 372: DISABLE_MARKED
// end ; end_of_file
 373: LD_VAR 0 1
 377: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 378: LD_INT 0
 380: PPUSH
 381: PPUSH
// uc_side := 4 ;
 382: LD_ADDR_OWVAR 20
 386: PUSH
 387: LD_INT 4
 389: ST_TO_ADDR
// uc_nation := 1 ;
 390: LD_ADDR_OWVAR 21
 394: PUSH
 395: LD_INT 1
 397: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 398: LD_ADDR_EXP 51
 402: PUSH
 403: LD_STRING 07_Americans
 405: PPUSH
 406: CALL_OW 31
 410: ST_TO_ADDR
// if americanSquad < 5 then
 411: LD_EXP 51
 415: PUSH
 416: LD_INT 5
 418: LESS
 419: IFFALSE 513
// begin if not americanSquad then
 421: LD_EXP 51
 425: NOT
 426: IFFALSE 435
// americanSquad := [ ] ;
 428: LD_ADDR_EXP 51
 432: PUSH
 433: EMPTY
 434: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 435: LD_ADDR_VAR 0 2
 439: PUSH
 440: DOUBLE
 441: LD_EXP 51
 445: DEC
 446: ST_TO_ADDR
 447: LD_INT 2
 449: PUSH
 450: LD_INT 3
 452: PUSH
 453: LD_INT 4
 455: PUSH
 456: LD_INT 4
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: PUSH
 465: LD_OWVAR 67
 469: ARRAY
 470: PUSH
 471: FOR_TO
 472: IFFALSE 509
// begin PrepareHuman ( false , 2 , 6 ) ;
 474: LD_INT 0
 476: PPUSH
 477: LD_INT 2
 479: PPUSH
 480: LD_INT 6
 482: PPUSH
 483: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 487: LD_ADDR_EXP 51
 491: PUSH
 492: LD_EXP 51
 496: PPUSH
 497: CALL_OW 44
 501: PPUSH
 502: CALL 64437 0 2
 506: ST_TO_ADDR
// end ;
 507: GO 471
 509: POP
 510: POP
// end else
 511: GO 560
// for i := Count ( americanSquad ) downto 5 do
 513: LD_ADDR_VAR 0 2
 517: PUSH
 518: DOUBLE
 519: LD_EXP 51
 523: PPUSH
 524: CALL 29090 0 1
 528: INC
 529: ST_TO_ADDR
 530: LD_INT 5
 532: PUSH
 533: FOR_DOWNTO
 534: IFFALSE 558
// americanSquad := Delete ( americanSquad , i ) ;
 536: LD_ADDR_EXP 51
 540: PUSH
 541: LD_EXP 51
 545: PPUSH
 546: LD_VAR 0 2
 550: PPUSH
 551: CALL_OW 3
 555: ST_TO_ADDR
 556: GO 533
 558: POP
 559: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 560: LD_ADDR_EXP 53
 564: PUSH
 565: LD_STRING UsCommander
 567: PPUSH
 568: LD_EXP 1
 572: NOT
 573: PPUSH
 574: LD_STRING 07_
 576: PPUSH
 577: CALL 26988 0 3
 581: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 582: LD_INT 1
 584: PPUSH
 585: LD_INT 6
 587: PPUSH
 588: CALL_OW 381
// Jerry := CreateHuman ;
 592: LD_ADDR_EXP 54
 596: PUSH
 597: CALL_OW 44
 601: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 602: LD_EXP 54
 606: PPUSH
 607: LD_INT 33
 609: PPUSH
 610: CALL_OW 336
// if not Doug then
 614: LD_EXP 53
 618: NOT
 619: IFFALSE 641
// begin PrepareSoldier ( sex_male , 6 ) ;
 621: LD_INT 1
 623: PPUSH
 624: LD_INT 6
 626: PPUSH
 627: CALL_OW 381
// Doug := CreateHuman ;
 631: LD_ADDR_EXP 53
 635: PUSH
 636: CALL_OW 44
 640: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 641: LD_EXP 53
 645: PPUSH
 646: LD_INT 33
 648: PPUSH
 649: CALL_OW 336
// if johnnySaved or debug then
 653: LD_EXP 3
 657: PUSH
 658: LD_EXP 1
 662: OR
 663: IFFALSE 690
// begin Harris := NewCharacter ( Harris ) ;
 665: LD_ADDR_EXP 52
 669: PUSH
 670: LD_STRING Harris
 672: PPUSH
 673: CALL_OW 25
 677: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 678: LD_EXP 52
 682: PPUSH
 683: LD_INT 33
 685: PPUSH
 686: CALL_OW 336
// end ; uc_side := 2 ;
 690: LD_ADDR_OWVAR 20
 694: PUSH
 695: LD_INT 2
 697: ST_TO_ADDR
// uc_nation := 2 ;
 698: LD_ADDR_OWVAR 21
 702: PUSH
 703: LD_INT 2
 705: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 706: LD_ADDR_EXP 39
 710: PUSH
 711: LD_STRING Heike
 713: PPUSH
 714: LD_EXP 1
 718: NOT
 719: PPUSH
 720: LD_EXP 2
 724: PPUSH
 725: CALL 26988 0 3
 729: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 730: LD_ADDR_EXP 42
 734: PUSH
 735: LD_STRING Ibrahim
 737: PPUSH
 738: LD_EXP 1
 742: NOT
 743: PPUSH
 744: LD_EXP 2
 748: PPUSH
 749: CALL 26988 0 3
 753: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 754: LD_ADDR_EXP 40
 758: PUSH
 759: LD_STRING Givi
 761: PPUSH
 762: LD_EXP 1
 766: NOT
 767: PPUSH
 768: LD_EXP 2
 772: PPUSH
 773: CALL 26988 0 3
 777: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 778: LD_ADDR_EXP 43
 782: PUSH
 783: LD_STRING Kamil
 785: PPUSH
 786: LD_EXP 1
 790: NOT
 791: PPUSH
 792: LD_EXP 2
 796: PPUSH
 797: CALL 26988 0 3
 801: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 802: LD_ADDR_EXP 44
 806: PUSH
 807: LD_STRING Kaia
 809: PPUSH
 810: LD_EXP 1
 814: NOT
 815: PPUSH
 816: LD_EXP 2
 820: PPUSH
 821: CALL 26988 0 3
 825: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 826: LD_ADDR_EXP 45
 830: PUSH
 831: LD_STRING Sophia
 833: PPUSH
 834: LD_EXP 1
 838: NOT
 839: PPUSH
 840: LD_EXP 2
 844: PPUSH
 845: CALL 26988 0 3
 849: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 850: LD_ADDR_EXP 46
 854: PUSH
 855: LD_STRING Markov
 857: PPUSH
 858: LD_EXP 1
 862: NOT
 863: PPUSH
 864: LD_EXP 2
 868: PPUSH
 869: CALL 26988 0 3
 873: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 874: LD_ADDR_EXP 49
 878: PUSH
 879: LD_STRING Aviradze
 881: PPUSH
 882: LD_EXP 1
 886: NOT
 887: PPUSH
 888: LD_EXP 2
 892: PPUSH
 893: CALL 26988 0 3
 897: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 898: LD_ADDR_EXP 48
 902: PUSH
 903: LD_STRING Kurt
 905: PPUSH
 906: LD_EXP 1
 910: NOT
 911: PPUSH
 912: LD_EXP 2
 916: PPUSH
 917: CALL 26988 0 3
 921: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 922: LD_ADDR_EXP 41
 926: PUSH
 927: LD_STRING Mike
 929: PPUSH
 930: LD_EXP 1
 934: NOT
 935: PPUSH
 936: LD_EXP 2
 940: PPUSH
 941: CALL 26988 0 3
 945: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 946: LD_ADDR_EXP 47
 950: PUSH
 951: LD_STRING Olaf
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_EXP 2
 964: PPUSH
 965: CALL 26988 0 3
 969: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 970: LD_ADDR_EXP 50
 974: PUSH
 975: LD_STRING 07_others
 977: PPUSH
 978: CALL_OW 31
 982: ST_TO_ADDR
// end ;
 983: LD_VAR 0 1
 987: RET
// export function PrepareGame ; var i ; begin
 988: LD_INT 0
 990: PPUSH
 991: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 992: LD_EXP 39
 996: PPUSH
 997: LD_INT 23
 999: PPUSH
1000: CALL_OW 52
// if Givi then
1004: LD_EXP 40
1008: IFFALSE 1046
// begin SetSide ( Givi , 5 ) ;
1010: LD_EXP 40
1014: PPUSH
1015: LD_INT 5
1017: PPUSH
1018: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1022: LD_EXP 40
1026: PPUSH
1027: LD_INT 9
1029: PPUSH
1030: LD_INT 0
1032: PPUSH
1033: CALL_OW 49
// ComHold ( Givi ) ;
1037: LD_EXP 40
1041: PPUSH
1042: CALL_OW 140
// end ; if Markov then
1046: LD_EXP 46
1050: IFFALSE 1088
// begin SetSide ( Markov , 5 ) ;
1052: LD_EXP 46
1056: PPUSH
1057: LD_INT 5
1059: PPUSH
1060: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1064: LD_EXP 46
1068: PPUSH
1069: LD_INT 3
1071: PPUSH
1072: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1076: LD_EXP 46
1080: PPUSH
1081: LD_INT 61
1083: PPUSH
1084: CALL_OW 52
// end ; if Mike then
1088: LD_EXP 41
1092: IFFALSE 1130
// begin SetSide ( Mike , 5 ) ;
1094: LD_EXP 41
1098: PPUSH
1099: LD_INT 5
1101: PPUSH
1102: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1106: LD_EXP 41
1110: PPUSH
1111: LD_INT 17
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: CALL_OW 49
// ComHold ( Mike ) ;
1121: LD_EXP 41
1125: PPUSH
1126: CALL_OW 140
// end ; if Olaf then
1130: LD_EXP 47
1134: IFFALSE 1175
// begin SetSide ( Olaf , 5 ) ;
1136: LD_EXP 47
1140: PPUSH
1141: LD_INT 5
1143: PPUSH
1144: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1148: LD_EXP 47
1152: PPUSH
1153: LD_INT 16
1155: PPUSH
1156: LD_INT 0
1158: PPUSH
1159: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1163: LD_EXP 47
1167: PPUSH
1168: LD_INT 3
1170: PPUSH
1171: CALL 67589 0 2
// end ; if Kamil then
1175: LD_EXP 43
1179: IFFALSE 1205
// begin SetSide ( Kamil , 5 ) ;
1181: LD_EXP 43
1185: PPUSH
1186: LD_INT 5
1188: PPUSH
1189: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1193: LD_EXP 43
1197: PPUSH
1198: LD_INT 109
1200: PPUSH
1201: CALL_OW 52
// end ; if Kurt then
1205: LD_EXP 48
1209: IFFALSE 1235
// begin SetSide ( Kurt , 5 ) ;
1211: LD_EXP 48
1215: PPUSH
1216: LD_INT 5
1218: PPUSH
1219: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1223: LD_EXP 48
1227: PPUSH
1228: LD_INT 169
1230: PPUSH
1231: CALL_OW 52
// end ; if Kaia then
1235: LD_EXP 44
1239: IFFALSE 1265
// begin SetSide ( Kaia , 5 ) ;
1241: LD_EXP 44
1245: PPUSH
1246: LD_INT 5
1248: PPUSH
1249: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1253: LD_EXP 44
1257: PPUSH
1258: LD_INT 147
1260: PPUSH
1261: CALL_OW 52
// end ; if Sophia then
1265: LD_EXP 45
1269: IFFALSE 1310
// begin SetSide ( Sophia , 5 ) ;
1271: LD_EXP 45
1275: PPUSH
1276: LD_INT 5
1278: PPUSH
1279: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1283: LD_EXP 45
1287: PPUSH
1288: LD_INT 142
1290: PPUSH
1291: LD_INT 96
1293: PPUSH
1294: LD_INT 0
1296: PPUSH
1297: CALL_OW 48
// ComHold ( Sophia ) ;
1301: LD_EXP 45
1305: PPUSH
1306: CALL_OW 140
// end ; if Harris then
1310: LD_EXP 52
1314: IFFALSE 1352
// begin SetSide ( Harris , 4 ) ;
1316: LD_EXP 52
1320: PPUSH
1321: LD_INT 4
1323: PPUSH
1324: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1328: LD_EXP 52
1332: PPUSH
1333: LD_INT 20
1335: PPUSH
1336: LD_INT 0
1338: PPUSH
1339: CALL_OW 49
// ComHold ( i ) ;
1343: LD_VAR 0 2
1347: PPUSH
1348: CALL_OW 140
// end ; if Doug then
1352: LD_EXP 53
1356: IFFALSE 1382
// begin SetSide ( Doug , 4 ) ;
1358: LD_EXP 53
1362: PPUSH
1363: LD_INT 4
1365: PPUSH
1366: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1370: LD_EXP 53
1374: PPUSH
1375: LD_INT 106
1377: PPUSH
1378: CALL_OW 52
// end ; if Aviradze then
1382: LD_EXP 49
1386: IFFALSE 1412
// begin SetSide ( Aviradze , 5 ) ;
1388: LD_EXP 49
1392: PPUSH
1393: LD_INT 5
1395: PPUSH
1396: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1400: LD_EXP 49
1404: PPUSH
1405: LD_INT 119
1407: PPUSH
1408: CALL_OW 52
// end ; if Ibrahim then
1412: LD_EXP 42
1416: IFFALSE 1442
// begin SetSide ( Ibrahim , 5 ) ;
1418: LD_EXP 42
1422: PPUSH
1423: LD_INT 5
1425: PPUSH
1426: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1430: LD_EXP 42
1434: PPUSH
1435: LD_INT 119
1437: PPUSH
1438: CALL_OW 52
// end ; if Jerry then
1442: LD_EXP 54
1446: IFFALSE 1487
// begin SetSide ( Jerry , 4 ) ;
1448: LD_EXP 54
1452: PPUSH
1453: LD_INT 4
1455: PPUSH
1456: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1460: LD_EXP 54
1464: PPUSH
1465: LD_INT 119
1467: PPUSH
1468: LD_INT 59
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: CALL_OW 48
// ComHold ( Jerry ) ;
1478: LD_EXP 54
1482: PPUSH
1483: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1487: LD_EXP 58
1491: PPUSH
1492: LD_INT 119
1494: PPUSH
1495: CALL_OW 52
// for i in americanSquad do
1499: LD_ADDR_VAR 0 2
1503: PUSH
1504: LD_EXP 51
1508: PUSH
1509: FOR_IN
1510: IFFALSE 1538
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1512: LD_VAR 0 2
1516: PPUSH
1517: LD_INT 21
1519: PPUSH
1520: LD_INT 0
1522: PPUSH
1523: CALL_OW 49
// ComHold ( i ) ;
1527: LD_VAR 0 2
1531: PPUSH
1532: CALL_OW 140
// end ;
1536: GO 1509
1538: POP
1539: POP
// for i in heikeSecondSquad do
1540: LD_ADDR_VAR 0 2
1544: PUSH
1545: LD_EXP 50
1549: PUSH
1550: FOR_IN
1551: IFFALSE 1591
// begin SetSide ( i , 5 ) ;
1553: LD_VAR 0 2
1557: PPUSH
1558: LD_INT 5
1560: PPUSH
1561: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1565: LD_VAR 0 2
1569: PPUSH
1570: LD_INT 22
1572: PPUSH
1573: LD_INT 0
1575: PPUSH
1576: CALL_OW 49
// ComHold ( i ) ;
1580: LD_VAR 0 2
1584: PPUSH
1585: CALL_OW 140
// end ;
1589: GO 1550
1591: POP
1592: POP
// if not hasVodka then
1593: LD_EXP 4
1597: NOT
1598: IFFALSE 1657
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1600: LD_ADDR_VAR 0 2
1604: PUSH
1605: LD_INT 2
1607: PUSH
1608: LD_INT 22
1610: PUSH
1611: LD_INT 2
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 5
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: PPUSH
1633: CALL_OW 69
1637: PUSH
1638: FOR_IN
1639: IFFALSE 1655
// SetLives ( i , 500 ) ;
1641: LD_VAR 0 2
1645: PPUSH
1646: LD_INT 500
1648: PPUSH
1649: CALL_OW 234
1653: GO 1638
1655: POP
1656: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1657: LD_ADDR_VAR 0 2
1661: PUSH
1662: LD_INT 22
1664: PUSH
1665: LD_INT 4
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL_OW 69
1676: PUSH
1677: FOR_IN
1678: IFFALSE 1694
// SetLives ( i , 500 ) ;
1680: LD_VAR 0 2
1684: PPUSH
1685: LD_INT 500
1687: PPUSH
1688: CALL_OW 234
1692: GO 1677
1694: POP
1695: POP
// end ;
1696: LD_VAR 0 1
1700: RET
// export function SetClassKaiaRevolver ; begin
1701: LD_INT 0
1703: PPUSH
// if IsOk ( Kaia ) then
1704: LD_EXP 44
1708: PPUSH
1709: CALL_OW 302
1713: IFFALSE 1727
// SetClass ( Kaia , class_revolver ) ;
1715: LD_EXP 44
1719: PPUSH
1720: LD_INT 34
1722: PPUSH
1723: CALL_OW 336
// end ;
1727: LD_VAR 0 1
1731: RET
// export function SpawnHeikeAsRussian ; begin
1732: LD_INT 0
1734: PPUSH
// RemoveUnit ( Heike ) ;
1735: LD_EXP 39
1739: PPUSH
1740: CALL_OW 64
// heikeTmp := Heike ;
1744: LD_ADDR_EXP 55
1748: PUSH
1749: LD_EXP 39
1753: ST_TO_ADDR
// uc_side := 2 ;
1754: LD_ADDR_OWVAR 20
1758: PUSH
1759: LD_INT 2
1761: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1762: LD_ADDR_EXP 39
1766: PUSH
1767: LD_STRING HeikeRu
1769: PPUSH
1770: CALL_OW 25
1774: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1775: LD_EXP 55
1779: PPUSH
1780: LD_EXP 39
1784: PPUSH
1785: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1789: LD_EXP 39
1793: PPUSH
1794: LD_INT 165
1796: PPUSH
1797: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1801: LD_EXP 39
1805: PPUSH
1806: LD_INT 1
1808: PPUSH
1809: CALL_OW 336
// heikeAsRussian := true ;
1813: LD_ADDR_EXP 27
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1821: LD_STRING M1-laundry-out
1823: PPUSH
1824: CALL_OW 604
// end ;
1828: LD_VAR 0 1
1832: RET
// export function SpawnGiviAsRussian ; begin
1833: LD_INT 0
1835: PPUSH
// RemoveUnit ( Givi ) ;
1836: LD_EXP 40
1840: PPUSH
1841: CALL_OW 64
// giviTmp := Givi ;
1845: LD_ADDR_EXP 56
1849: PUSH
1850: LD_EXP 40
1854: ST_TO_ADDR
// uc_side := 2 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 2
1862: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1863: LD_ADDR_EXP 40
1867: PUSH
1868: LD_STRING GiviRu
1870: PPUSH
1871: CALL_OW 25
1875: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1876: LD_EXP 56
1880: PPUSH
1881: LD_EXP 40
1885: PPUSH
1886: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1890: LD_EXP 40
1894: PPUSH
1895: LD_INT 165
1897: PPUSH
1898: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1902: LD_EXP 40
1906: PPUSH
1907: LD_INT 1
1909: PPUSH
1910: CALL_OW 336
// giviAsRussian := true ;
1914: LD_ADDR_EXP 28
1918: PUSH
1919: LD_INT 1
1921: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1922: LD_STRING M1-laundry-out
1924: PPUSH
1925: CALL_OW 604
// end ; end_of_file
1929: LD_VAR 0 1
1933: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
1934: LD_INT 0
1936: PPUSH
1937: PPUSH
1938: PPUSH
1939: PPUSH
1940: PPUSH
// uc_side := 3 ;
1941: LD_ADDR_OWVAR 20
1945: PUSH
1946: LD_INT 3
1948: ST_TO_ADDR
// uc_nation := 3 ;
1949: LD_ADDR_OWVAR 21
1953: PUSH
1954: LD_INT 3
1956: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
1957: LD_INT 192
1959: PPUSH
1960: LD_STRING kitchen
1962: PPUSH
1963: CALL_OW 500
// SetBName ( laundry , laundry ) ;
1967: LD_INT 165
1969: PPUSH
1970: LD_STRING laundry
1972: PPUSH
1973: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
1977: LD_INT 54
1979: PPUSH
1980: LD_STRING adminSection
1982: PPUSH
1983: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1987: LD_ADDR_VAR 0 2
1991: PUSH
1992: LD_INT 21
1994: PUSH
1995: LD_INT 3
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PPUSH
2002: CALL_OW 69
2006: PUSH
2007: FOR_IN
2008: IFFALSE 2024
// SetBLevel ( i , 7 ) ;
2010: LD_VAR 0 2
2014: PPUSH
2015: LD_INT 7
2017: PPUSH
2018: CALL_OW 241
2022: GO 2007
2024: POP
2025: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2026: LD_ADDR_VAR 0 2
2030: PUSH
2031: LD_INT 22
2033: PUSH
2034: LD_INT 3
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 2
2043: PUSH
2044: LD_INT 30
2046: PUSH
2047: LD_INT 0
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 30
2056: PUSH
2057: LD_INT 1
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL_OW 69
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2143
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: CALL_OW 274
2090: PPUSH
2091: LD_INT 1
2093: PPUSH
2094: LD_INT 1000
2096: PPUSH
2097: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2101: LD_VAR 0 2
2105: PPUSH
2106: CALL_OW 274
2110: PPUSH
2111: LD_INT 2
2113: PPUSH
2114: LD_INT 1000
2116: PPUSH
2117: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2121: LD_VAR 0 2
2125: PPUSH
2126: CALL_OW 274
2130: PPUSH
2131: LD_INT 3
2133: PPUSH
2134: LD_INT 100
2136: PPUSH
2137: CALL_OW 277
// end ;
2141: GO 2078
2143: POP
2144: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2145: LD_ADDR_VAR 0 2
2149: PUSH
2150: LD_INT 22
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: PUSH
2160: LD_INT 30
2162: PUSH
2163: LD_INT 32
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: FOR_IN
2180: IFFALSE 2214
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2182: LD_INT 0
2184: PPUSH
2185: LD_INT 5
2187: PUSH
2188: LD_OWVAR 67
2192: PLUS
2193: PPUSH
2194: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2198: CALL_OW 44
2202: PPUSH
2203: LD_VAR 0 2
2207: PPUSH
2208: CALL_OW 52
// end ;
2212: GO 2179
2214: POP
2215: POP
// for i := 1 to 2 do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_INT 2
2228: PUSH
2229: FOR_TO
2230: IFFALSE 2282
// begin PrepareMechanic ( false , 8 ) ;
2232: LD_INT 0
2234: PPUSH
2235: LD_INT 8
2237: PPUSH
2238: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2242: LD_ADDR_EXP 60
2246: PUSH
2247: LD_EXP 60
2251: PPUSH
2252: CALL_OW 44
2256: PPUSH
2257: CALL 64437 0 2
2261: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2262: LD_EXP 60
2266: PUSH
2267: LD_EXP 60
2271: ARRAY
2272: PPUSH
2273: LD_INT 61
2275: PPUSH
2276: CALL_OW 52
// end ;
2280: GO 2229
2282: POP
2283: POP
// PrepareMechanic ( sex_male , 8 ) ;
2284: LD_INT 1
2286: PPUSH
2287: LD_INT 8
2289: PPUSH
2290: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2294: LD_ADDR_EXP 61
2298: PUSH
2299: LD_EXP 61
2303: PPUSH
2304: CALL_OW 44
2308: PPUSH
2309: CALL 64437 0 2
2313: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2314: LD_EXP 61
2318: PUSH
2319: LD_EXP 61
2323: ARRAY
2324: PPUSH
2325: LD_INT 196
2327: PPUSH
2328: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2332: LD_INT 1
2334: PPUSH
2335: LD_INT 8
2337: PPUSH
2338: CALL_OW 383
// hc_name := Stiepan Simonov ;
2342: LD_ADDR_OWVAR 26
2346: PUSH
2347: LD_STRING Stiepan Simonov
2349: ST_TO_ADDR
// Stiopa := CreateHuman ;
2350: LD_ADDR_EXP 62
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2360: LD_INT 2
2362: PPUSH
2363: LD_INT 8
2365: PPUSH
2366: CALL_OW 383
// hc_name := Laura Dragunov ;
2370: LD_ADDR_OWVAR 26
2374: PUSH
2375: LD_STRING Laura Dragunov
2377: ST_TO_ADDR
// Laura := CreateHuman ;
2378: LD_ADDR_EXP 63
2382: PUSH
2383: CALL_OW 44
2387: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2388: LD_EXP 63
2392: PPUSH
2393: LD_INT 196
2395: PPUSH
2396: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2400: LD_INT 1
2402: PPUSH
2403: LD_INT 8
2405: PPUSH
2406: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2410: LD_ADDR_EXP 60
2414: PUSH
2415: LD_EXP 60
2419: PPUSH
2420: LD_INT 1
2422: PPUSH
2423: CALL_OW 44
2427: PPUSH
2428: CALL_OW 2
2432: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2433: LD_EXP 60
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: PPUSH
2442: LD_INT 61
2444: PPUSH
2445: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2449: LD_INT 1
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 381
// hc_name := Pavel Muchin ;
2459: LD_ADDR_OWVAR 26
2463: PUSH
2464: LD_STRING Pavel Muchin
2466: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2467: LD_ADDR_OWVAR 29
2471: PUSH
2472: LD_INT 13
2474: PUSH
2475: LD_INT 13
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2482: LD_ADDR_EXP 59
2486: PUSH
2487: CALL_OW 44
2491: ST_TO_ADDR
// InitHC_All ( ) ;
2492: CALL_OW 584
// if Difficulty > 1 then
2496: LD_OWVAR 67
2500: PUSH
2501: LD_INT 1
2503: GREATER
2504: IFFALSE 2624
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2506: LD_ADDR_VAR 0 2
2510: PUSH
2511: DOUBLE
2512: LD_INT 1
2514: DEC
2515: ST_TO_ADDR
2516: LD_INT 3
2518: PUSH
2519: LD_INT 4
2521: PUSH
2522: LD_INT 5
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: LIST
2529: PUSH
2530: LD_OWVAR 67
2534: PUSH
2535: LD_INT 1
2537: PLUS
2538: ARRAY
2539: PUSH
2540: FOR_TO
2541: IFFALSE 2622
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2543: LD_INT 0
2545: PPUSH
2546: LD_INT 5
2548: PUSH
2549: LD_INT 6
2551: PUSH
2552: LD_INT 7
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: LIST
2559: PUSH
2560: LD_OWVAR 67
2564: PUSH
2565: LD_INT 1
2567: PLUS
2568: ARRAY
2569: PPUSH
2570: CALL_OW 381
// un := CreateHuman ;
2574: LD_ADDR_VAR 0 4
2578: PUSH
2579: CALL_OW 44
2583: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2584: LD_VAR 0 4
2588: PPUSH
2589: LD_INT 62
2591: PUSH
2592: LD_INT 63
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PUSH
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 2
2606: MOD
2607: PUSH
2608: LD_INT 1
2610: PLUS
2611: ARRAY
2612: PPUSH
2613: LD_INT 0
2615: PPUSH
2616: CALL_OW 49
// end ;
2620: GO 2540
2622: POP
2623: POP
// end ; uc_side := 6 ;
2624: LD_ADDR_OWVAR 20
2628: PUSH
2629: LD_INT 6
2631: ST_TO_ADDR
// uc_nation := 3 ;
2632: LD_ADDR_OWVAR 21
2636: PUSH
2637: LD_INT 3
2639: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2640: LD_ADDR_VAR 0 5
2644: PUSH
2645: LD_INT 14
2647: PUSH
2648: LD_INT 15
2650: PUSH
2651: LD_INT 48
2653: PUSH
2654: LD_INT 24
2656: PUSH
2657: LD_INT 149
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: ST_TO_ADDR
// for i in tmp do
2667: LD_ADDR_VAR 0 2
2671: PUSH
2672: LD_VAR 0 5
2676: PUSH
2677: FOR_IN
2678: IFFALSE 2726
// begin for j := 1 to 2 do
2680: LD_ADDR_VAR 0 3
2684: PUSH
2685: DOUBLE
2686: LD_INT 1
2688: DEC
2689: ST_TO_ADDR
2690: LD_INT 2
2692: PUSH
2693: FOR_TO
2694: IFFALSE 2722
// begin PrepareSoldier ( false , 7 ) ;
2696: LD_INT 0
2698: PPUSH
2699: LD_INT 7
2701: PPUSH
2702: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2706: CALL_OW 44
2710: PPUSH
2711: LD_VAR 0 2
2715: PPUSH
2716: CALL_OW 52
// end ;
2720: GO 2693
2722: POP
2723: POP
// end ;
2724: GO 2677
2726: POP
2727: POP
// end ;
2728: LD_VAR 0 1
2732: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2733: LD_INT 0
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
// uc_side := 3 ;
2739: LD_ADDR_OWVAR 20
2743: PUSH
2744: LD_INT 3
2746: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2747: LD_ADDR_OWVAR 21
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 3
2757: PPUSH
2758: CALL_OW 12
2762: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2763: LD_ADDR_VAR 0 4
2767: PUSH
2768: LD_INT 5
2770: PPUSH
2771: LD_INT 0
2773: PPUSH
2774: CALL_OW 517
2778: ST_TO_ADDR
// for i := 1 to 3 do
2779: LD_ADDR_VAR 0 2
2783: PUSH
2784: DOUBLE
2785: LD_INT 1
2787: DEC
2788: ST_TO_ADDR
2789: LD_INT 3
2791: PUSH
2792: FOR_TO
2793: IFFALSE 2862
// begin PrepareHuman ( false , 33 , 0 ) ;
2795: LD_INT 0
2797: PPUSH
2798: LD_INT 33
2800: PPUSH
2801: LD_INT 0
2803: PPUSH
2804: CALL_OW 380
// un := CreateHuman ;
2808: LD_ADDR_VAR 0 3
2812: PUSH
2813: CALL_OW 44
2817: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2818: LD_VAR 0 3
2822: PPUSH
2823: LD_VAR 0 4
2827: PUSH
2828: LD_INT 1
2830: ARRAY
2831: PUSH
2832: LD_VAR 0 2
2836: ARRAY
2837: PPUSH
2838: LD_VAR 0 4
2842: PUSH
2843: LD_INT 2
2845: ARRAY
2846: PUSH
2847: LD_VAR 0 2
2851: ARRAY
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: CALL_OW 601
// end ;
2860: GO 2792
2862: POP
2863: POP
// end ;
2864: LD_VAR 0 1
2868: RET
// export function PrepareFirstScene ; var i , un ; begin
2869: LD_INT 0
2871: PPUSH
2872: PPUSH
2873: PPUSH
// uc_side := 4 ;
2874: LD_ADDR_OWVAR 20
2878: PUSH
2879: LD_INT 4
2881: ST_TO_ADDR
// uc_nation := 1 ;
2882: LD_ADDR_OWVAR 21
2886: PUSH
2887: LD_INT 1
2889: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2890: LD_INT 0
2892: PPUSH
2893: LD_INT 33
2895: PPUSH
2896: LD_INT 0
2898: PPUSH
2899: CALL_OW 380
// for i := 1 to 2 do
2903: LD_ADDR_VAR 0 2
2907: PUSH
2908: DOUBLE
2909: LD_INT 1
2911: DEC
2912: ST_TO_ADDR
2913: LD_INT 2
2915: PUSH
2916: FOR_TO
2917: IFFALSE 2982
// begin un := CreateHuman ;
2919: LD_ADDR_VAR 0 3
2923: PUSH
2924: CALL_OW 44
2928: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2929: LD_VAR 0 3
2933: PPUSH
2934: LD_INT 1
2936: PPUSH
2937: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
2941: LD_VAR 0 3
2945: PPUSH
2946: LD_INT 6
2948: PPUSH
2949: LD_INT 0
2951: PPUSH
2952: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
2956: LD_VAR 0 3
2960: PPUSH
2961: LD_INT 1
2963: PPUSH
2964: CALL 67589 0 2
// SetLives ( un , 300 ) ;
2968: LD_VAR 0 3
2972: PPUSH
2973: LD_INT 300
2975: PPUSH
2976: CALL_OW 234
// end ;
2980: GO 2916
2982: POP
2983: POP
// uc_side := 3 ;
2984: LD_ADDR_OWVAR 20
2988: PUSH
2989: LD_INT 3
2991: ST_TO_ADDR
// uc_nation := 3 ;
2992: LD_ADDR_OWVAR 21
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3000: LD_INT 1
3002: PPUSH
3003: LD_INT 5
3005: PPUSH
3006: CALL_OW 381
// for i := 1 to 3 do
3010: LD_ADDR_VAR 0 2
3014: PUSH
3015: DOUBLE
3016: LD_INT 1
3018: DEC
3019: ST_TO_ADDR
3020: LD_INT 3
3022: PUSH
3023: FOR_TO
3024: IFFALSE 3097
// begin un := CreateHuman ;
3026: LD_ADDR_VAR 0 3
3030: PUSH
3031: CALL_OW 44
3035: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3036: LD_ADDR_EXP 57
3040: PUSH
3041: LD_EXP 57
3045: PPUSH
3046: LD_VAR 0 3
3050: PPUSH
3051: CALL 64437 0 2
3055: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3056: LD_VAR 0 3
3060: PPUSH
3061: LD_INT 4
3063: PPUSH
3064: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3068: LD_VAR 0 3
3072: PPUSH
3073: LD_INT 7
3075: PPUSH
3076: LD_INT 0
3078: PPUSH
3079: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3083: LD_VAR 0 3
3087: PPUSH
3088: LD_INT 4
3090: PPUSH
3091: CALL 67589 0 2
// end ;
3095: GO 3023
3097: POP
3098: POP
// ruCommisar := CreateHuman ;
3099: LD_ADDR_EXP 58
3103: PUSH
3104: CALL_OW 44
3108: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3109: LD_EXP 58
3113: PPUSH
3114: LD_INT 124
3116: PPUSH
3117: LD_INT 37
3119: PPUSH
3120: LD_INT 0
3122: PPUSH
3123: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3127: LD_EXP 58
3131: PPUSH
3132: LD_INT 3
3134: PPUSH
3135: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3139: LD_EXP 58
3143: PPUSH
3144: LD_INT 3
3146: PPUSH
3147: CALL 67589 0 2
// end ;
3151: LD_VAR 0 1
3155: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
// uc_side := 6 ;
3162: LD_ADDR_OWVAR 20
3166: PUSH
3167: LD_INT 6
3169: ST_TO_ADDR
// uc_nation := 3 ;
3170: LD_ADDR_OWVAR 21
3174: PUSH
3175: LD_INT 3
3177: ST_TO_ADDR
// ruPatrol := [ ] ;
3178: LD_ADDR_EXP 64
3182: PUSH
3183: EMPTY
3184: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3185: LD_ADDR_VAR 0 4
3189: PUSH
3190: LD_INT 26
3192: PUSH
3193: LD_INT 30
3195: PUSH
3196: LD_INT 39
3198: PUSH
3199: LD_INT 43
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: ST_TO_ADDR
// for i := 1 to spawn do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_VAR 0 4
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3335
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3226: LD_INT 0
3228: PPUSH
3229: LD_INT 4
3231: PUSH
3232: LD_INT 5
3234: PUSH
3235: LD_INT 6
3237: PUSH
3238: LD_INT 7
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: PUSH
3247: LD_OWVAR 67
3251: ARRAY
3252: PPUSH
3253: CALL_OW 381
// un := CreateHuman ;
3257: LD_ADDR_VAR 0 3
3261: PUSH
3262: CALL_OW 44
3266: ST_TO_ADDR
// SetTag ( un , i ) ;
3267: LD_VAR 0 3
3271: PPUSH
3272: LD_VAR 0 2
3276: PPUSH
3277: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3281: LD_ADDR_EXP 64
3285: PUSH
3286: LD_EXP 64
3290: PPUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: CALL 64437 0 2
3300: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3301: LD_VAR 0 3
3305: PPUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_VAR 0 2
3315: ARRAY
3316: PPUSH
3317: LD_INT 0
3319: PPUSH
3320: CALL_OW 49
// ComHold ( un ) ;
3324: LD_VAR 0 3
3328: PPUSH
3329: CALL_OW 140
// end ;
3333: GO 3223
3335: POP
3336: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3337: LD_ADDR_VAR 0 4
3341: PUSH
3342: LD_INT 48
3344: PUSH
3345: LD_INT 49
3347: PUSH
3348: LD_INT 50
3350: PUSH
3351: LD_INT 51
3353: PUSH
3354: LD_INT 52
3356: PUSH
3357: LD_INT 53
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: ST_TO_ADDR
// for i := 1 to spawn do
3368: LD_ADDR_VAR 0 2
3372: PUSH
3373: DOUBLE
3374: LD_INT 1
3376: DEC
3377: ST_TO_ADDR
3378: LD_VAR 0 4
3382: PUSH
3383: FOR_TO
3384: IFFALSE 3493
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3386: LD_INT 0
3388: PPUSH
3389: LD_INT 4
3391: PUSH
3392: LD_INT 5
3394: PUSH
3395: LD_INT 6
3397: PUSH
3398: LD_INT 7
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: LD_OWVAR 67
3411: ARRAY
3412: PPUSH
3413: CALL_OW 381
// un := CreateHuman ;
3417: LD_ADDR_VAR 0 3
3421: PUSH
3422: CALL_OW 44
3426: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3427: LD_VAR 0 3
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3439: LD_ADDR_EXP 64
3443: PUSH
3444: LD_EXP 64
3448: PPUSH
3449: LD_VAR 0 3
3453: PPUSH
3454: CALL 64437 0 2
3458: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3459: LD_VAR 0 3
3463: PPUSH
3464: LD_VAR 0 4
3468: PUSH
3469: LD_VAR 0 2
3473: ARRAY
3474: PPUSH
3475: LD_INT 0
3477: PPUSH
3478: CALL_OW 49
// ComHold ( un ) ;
3482: LD_VAR 0 3
3486: PPUSH
3487: CALL_OW 140
// end ;
3491: GO 3383
3493: POP
3494: POP
// end ;
3495: LD_VAR 0 1
3499: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3500: LD_INT 0
3502: PPUSH
3503: PPUSH
3504: PPUSH
3505: PPUSH
// uc_side := 6 ;
3506: LD_ADDR_OWVAR 20
3510: PUSH
3511: LD_INT 6
3513: ST_TO_ADDR
// uc_nation := nation_russian ;
3514: LD_ADDR_OWVAR 21
3518: PUSH
3519: LD_INT 3
3521: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3522: LD_ADDR_VAR 0 4
3526: PUSH
3527: LD_INT 54
3529: PUSH
3530: LD_INT 55
3532: PUSH
3533: LD_INT 56
3535: PUSH
3536: LD_INT 57
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: ST_TO_ADDR
// for i := 1 to spawn do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_VAR 0 4
3559: PUSH
3560: FOR_TO
3561: IFFALSE 3670
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3563: LD_INT 0
3565: PPUSH
3566: LD_INT 4
3568: PUSH
3569: LD_INT 5
3571: PUSH
3572: LD_INT 6
3574: PUSH
3575: LD_INT 7
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: PUSH
3584: LD_OWVAR 67
3588: ARRAY
3589: PPUSH
3590: CALL_OW 381
// un := CreateHuman ;
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: CALL_OW 44
3603: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3604: LD_VAR 0 3
3608: PPUSH
3609: LD_INT 0
3611: PPUSH
3612: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3616: LD_ADDR_EXP 64
3620: PUSH
3621: LD_EXP 64
3625: PPUSH
3626: LD_VAR 0 3
3630: PPUSH
3631: CALL 64437 0 2
3635: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3636: LD_VAR 0 3
3640: PPUSH
3641: LD_VAR 0 4
3645: PUSH
3646: LD_VAR 0 2
3650: ARRAY
3651: PPUSH
3652: LD_INT 0
3654: PPUSH
3655: CALL_OW 49
// ComHold ( un ) ;
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 140
// end ;
3668: GO 3560
3670: POP
3671: POP
// end ; end_of_file
3672: LD_VAR 0 1
3676: RET
// export function Action ; var speaker , i , tmp ; begin
3677: LD_INT 0
3679: PPUSH
3680: PPUSH
3681: PPUSH
3682: PPUSH
// Video ( true ) ;
3683: LD_INT 1
3685: PPUSH
3686: CALL 64409 0 1
// hasNormalScene := Kaia or Givi ;
3690: LD_ADDR_EXP 5
3694: PUSH
3695: LD_EXP 44
3699: PUSH
3700: LD_EXP 40
3704: OR
3705: ST_TO_ADDR
// if hasNormalScene then
3706: LD_EXP 5
3710: IFFALSE 3951
// begin for i in americanSquad do
3712: LD_ADDR_VAR 0 3
3716: PUSH
3717: LD_EXP 51
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3769
// begin SetClass ( i , class_prison ) ;
3725: LD_VAR 0 3
3729: PPUSH
3730: LD_INT 33
3732: PPUSH
3733: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3737: LD_VAR 0 3
3741: PPUSH
3742: LD_INT 78
3744: PPUSH
3745: LD_INT 16
3747: PPUSH
3748: LD_INT 5
3750: PPUSH
3751: LD_INT 0
3753: PPUSH
3754: CALL_OW 50
// ComHold ( i ) ;
3758: LD_VAR 0 3
3762: PPUSH
3763: CALL_OW 140
// end ;
3767: GO 3722
3769: POP
3770: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3771: LD_ADDR_VAR 0 4
3775: PUSH
3776: LD_EXP 41
3780: PUSH
3781: LD_EXP 42
3785: PUSH
3786: LD_EXP 43
3790: PUSH
3791: LD_EXP 44
3795: PUSH
3796: LD_EXP 45
3800: PUSH
3801: LD_EXP 46
3805: PUSH
3806: LD_EXP 47
3810: PUSH
3811: LD_EXP 48
3815: PUSH
3816: LD_EXP 40
3820: PUSH
3821: LD_EXP 49
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: PUSH
3838: LD_EXP 50
3842: UNION
3843: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3844: LD_EXP 39
3848: PPUSH
3849: LD_INT 33
3851: PPUSH
3852: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3856: LD_EXP 39
3860: PPUSH
3861: LD_INT 117
3863: PPUSH
3864: LD_INT 24
3866: PPUSH
3867: LD_INT 3
3869: PPUSH
3870: LD_INT 0
3872: PPUSH
3873: CALL 66577 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3877: LD_EXP 39
3881: PPUSH
3882: LD_INT 123
3884: PPUSH
3885: LD_INT 39
3887: PPUSH
3888: CALL_OW 118
// for i in tmp do
3892: LD_ADDR_VAR 0 3
3896: PUSH
3897: LD_VAR 0 4
3901: PUSH
3902: FOR_IN
3903: IFFALSE 3949
// begin SetClass ( i , class_prison ) ;
3905: LD_VAR 0 3
3909: PPUSH
3910: LD_INT 33
3912: PPUSH
3913: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
3917: LD_VAR 0 3
3921: PPUSH
3922: LD_INT 3
3924: PPUSH
3925: LD_INT 0
3927: PPUSH
3928: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
3932: LD_VAR 0 3
3936: PPUSH
3937: LD_INT 113
3939: PPUSH
3940: LD_INT 16
3942: PPUSH
3943: CALL_OW 118
// end ;
3947: GO 3902
3949: POP
3950: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
3951: LD_INT 124
3953: PPUSH
3954: LD_INT 39
3956: PPUSH
3957: CALL_OW 86
// PrepareDeadBodies ;
3961: CALL 2733 0 0
// PrepareFirstScene ;
3965: CALL 2869 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3969: LD_INT 152
3971: PPUSH
3972: LD_INT 65
3974: PPUSH
3975: LD_INT 2
3977: PPUSH
3978: LD_INT 70
3980: NEG
3981: PPUSH
3982: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3986: LD_INT 152
3988: PPUSH
3989: LD_INT 65
3991: PPUSH
3992: LD_INT 2
3994: PPUSH
3995: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
3999: LD_INT 122
4001: PPUSH
4002: LD_INT 40
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: LD_INT 8
4010: NEG
4011: PPUSH
4012: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4016: LD_INT 124
4018: PPUSH
4019: LD_INT 37
4021: PPUSH
4022: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4026: LD_EXP 58
4030: PPUSH
4031: LD_STRING DRum-Execution-1
4033: PPUSH
4034: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4038: LD_EXP 58
4042: PPUSH
4043: LD_STRING DRum-Execution-2
4045: PPUSH
4046: CALL_OW 88
// wait ( 0 0$01 ) ;
4050: LD_INT 35
4052: PPUSH
4053: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4057: LD_EXP 58
4061: PPUSH
4062: LD_STRING DRum-Execution-3
4064: PPUSH
4065: CALL_OW 88
// wait ( 0 0$1 ) ;
4069: LD_INT 35
4071: PPUSH
4072: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4076: LD_EXP 58
4080: PPUSH
4081: LD_STRING DRum-Execution-4
4083: PPUSH
4084: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4088: LD_EXP 57
4092: PUSH
4093: LD_INT 1
4095: ARRAY
4096: PPUSH
4097: LD_INT 122
4099: PPUSH
4100: LD_INT 39
4102: PPUSH
4103: CALL_OW 428
4107: PPUSH
4108: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4112: LD_EXP 57
4116: PUSH
4117: LD_INT 2
4119: ARRAY
4120: PPUSH
4121: LD_INT 123
4123: PPUSH
4124: LD_INT 41
4126: PPUSH
4127: CALL_OW 428
4131: PPUSH
4132: CALL_OW 115
// AddComHold ( russianKillers ) ;
4136: LD_EXP 57
4140: PPUSH
4141: CALL_OW 200
// wait ( 0 0$1 ) ;
4145: LD_INT 35
4147: PPUSH
4148: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4152: LD_INT 122
4154: PPUSH
4155: LD_INT 40
4157: PPUSH
4158: LD_INT 2
4160: PPUSH
4161: CALL_OW 331
// for i in russianKillers union ruCommisar do
4165: LD_ADDR_VAR 0 3
4169: PUSH
4170: LD_EXP 57
4174: PUSH
4175: LD_EXP 58
4179: UNION
4180: PUSH
4181: FOR_IN
4182: IFFALSE 4195
// RemoveUnit ( i ) ;
4184: LD_VAR 0 3
4188: PPUSH
4189: CALL_OW 64
4193: GO 4181
4195: POP
4196: POP
// if hasNormalScene then
4197: LD_EXP 5
4201: IFFALSE 4209
// ActionNormal else
4203: CALL 4218 0 0
4207: GO 4213
// ActionAdditional ;
4209: CALL 6043 0 0
// end ;
4213: LD_VAR 0 1
4217: RET
// function ActionNormal ; var i , tmp ; begin
4218: LD_INT 0
4220: PPUSH
4221: PPUSH
4222: PPUSH
// CenterNowOnUnits ( Heike ) ;
4223: LD_EXP 39
4227: PPUSH
4228: CALL_OW 87
// wait ( 0 0$1 ) ;
4232: LD_INT 35
4234: PPUSH
4235: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4239: LD_EXP 39
4243: PPUSH
4244: LD_INT 115
4246: PPUSH
4247: LD_INT 19
4249: PPUSH
4250: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4254: LD_EXP 39
4258: PPUSH
4259: LD_INT 113
4261: PPUSH
4262: LD_INT 16
4264: PPUSH
4265: CALL_OW 178
// wait ( 0 0$2 ) ;
4269: LD_INT 70
4271: PPUSH
4272: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4276: LD_EXP 39
4280: PPUSH
4281: LD_STRING DH-Conspiracy-1
4283: PPUSH
4284: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4288: LD_EXP 44
4292: PPUSH
4293: LD_STRING DK-Conspiracy-2
4295: PPUSH
4296: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4300: LD_EXP 40
4304: PPUSH
4305: LD_STRING DG-Conspiracy-3
4307: PPUSH
4308: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4312: LD_EXP 40
4316: PPUSH
4317: LD_STRING DG-Conspiracy-4
4319: PPUSH
4320: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4324: LD_EXP 39
4328: PPUSH
4329: LD_STRING DH-Conspiracy-5
4331: PPUSH
4332: CALL_OW 88
// if IsOk ( Kamil ) then
4336: LD_EXP 43
4340: PPUSH
4341: CALL_OW 302
4345: IFFALSE 4403
// begin hasVodka := true ;
4347: LD_ADDR_EXP 4
4351: PUSH
4352: LD_INT 1
4354: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4355: LD_EXP 43
4359: PPUSH
4360: LD_STRING DKam-Conspiracy-6
4362: PPUSH
4363: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4367: LD_EXP 43
4371: PPUSH
4372: LD_STRING DKam-Conspiracy-7
4374: PPUSH
4375: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4379: LD_EXP 43
4383: PPUSH
4384: LD_STRING DKam-Conspiracy-8
4386: PPUSH
4387: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4391: LD_EXP 43
4395: PPUSH
4396: LD_STRING DKam-Conspiracy-9
4398: PPUSH
4399: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4403: LD_EXP 45
4407: PPUSH
4408: CALL_OW 302
4412: IFFALSE 4593
// begin americanContact := true ;
4414: LD_ADDR_EXP 10
4418: PUSH
4419: LD_INT 1
4421: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4422: LD_STRING M1-american
4424: PPUSH
4425: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4429: LD_EXP 45
4433: PPUSH
4434: LD_STRING DS-Conspiracy-10
4436: PPUSH
4437: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4441: LD_EXP 46
4445: PPUSH
4446: LD_STRING DM-Conspiracy-11
4448: PPUSH
4449: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4453: LD_EXP 45
4457: PPUSH
4458: LD_STRING DS-Conspiracy-12
4460: PPUSH
4461: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4465: LD_INT 84
4467: PPUSH
4468: LD_INT 19
4470: PPUSH
4471: LD_INT 105
4473: PPUSH
4474: CALL 18624 0 3
// if johnnySaved then
4478: LD_EXP 3
4482: IFFALSE 4522
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4484: LD_EXP 45
4488: PPUSH
4489: LD_STRING DS-Conspiracy-13
4491: PPUSH
4492: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4496: LD_EXP 39
4500: PPUSH
4501: LD_STRING DH-Conspiracy-14
4503: PPUSH
4504: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4508: LD_EXP 45
4512: PPUSH
4513: LD_STRING DH-Conspiracy-15
4515: PPUSH
4516: CALL_OW 88
// end else
4520: GO 4558
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4522: LD_EXP 45
4526: PPUSH
4527: LD_STRING DS-Conspiracy-a-13
4529: PPUSH
4530: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4534: LD_EXP 39
4538: PPUSH
4539: LD_STRING DH-Conspiracy-a-14
4541: PPUSH
4542: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
4546: LD_EXP 45
4550: PPUSH
4551: LD_STRING DH-Conspiracy-a-15
4553: PPUSH
4554: CALL_OW 88
// end ; if IsOk ( Givi ) then
4558: LD_EXP 40
4562: PPUSH
4563: CALL_OW 302
4567: IFFALSE 4593
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4569: LD_EXP 40
4573: PPUSH
4574: LD_STRING DG-Conspiracy-a-16
4576: PPUSH
4577: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4581: LD_EXP 39
4585: PPUSH
4586: LD_STRING DH-Conspiracy-a-17
4588: PPUSH
4589: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4593: LD_EXP 39
4597: PPUSH
4598: LD_STRING DH-Conspiracy-16
4600: PPUSH
4601: CALL_OW 88
// if IsOk ( Givi ) then
4605: LD_EXP 40
4609: PPUSH
4610: CALL_OW 302
4614: IFFALSE 4886
// begin hasStimDrugs := true ;
4616: LD_ADDR_EXP 9
4620: PUSH
4621: LD_INT 1
4623: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4624: LD_STRING M1-drugs
4626: PPUSH
4627: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4631: LD_EXP 40
4635: PPUSH
4636: LD_STRING DG-Conspiracy-17
4638: PPUSH
4639: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4643: LD_INT 162
4645: PPUSH
4646: LD_INT 2
4648: PPUSH
4649: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4653: LD_INT 194
4655: PPUSH
4656: LD_INT 98
4658: PPUSH
4659: LD_INT 105
4661: PPUSH
4662: CALL 18624 0 3
// SetSide ( drugsLab , 3 ) ;
4666: LD_INT 162
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4676: LD_EXP 40
4680: PPUSH
4681: LD_STRING DG-Conspiracy-18
4683: PPUSH
4684: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4688: LD_EXP 40
4692: PPUSH
4693: LD_STRING DG-Conspiracy-19
4695: PPUSH
4696: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4700: LD_EXP 40
4704: PPUSH
4705: LD_STRING DG-Conspiracy-20
4707: PPUSH
4708: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4712: LD_EXP 39
4716: PPUSH
4717: LD_STRING DH-Conspiracy-21
4719: PPUSH
4720: CALL_OW 88
// if IsOk ( Kaia ) then
4724: LD_EXP 44
4728: PPUSH
4729: CALL_OW 302
4733: IFFALSE 4807
// begin hasExplosions := true ;
4735: LD_ADDR_EXP 6
4739: PUSH
4740: LD_INT 1
4742: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4743: LD_STRING M1-explosive
4745: PPUSH
4746: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4750: LD_EXP 44
4754: PPUSH
4755: LD_STRING DK-Conspiracy-22
4757: PPUSH
4758: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4762: LD_INT 73
4764: PPUSH
4765: LD_INT 2
4767: PPUSH
4768: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4772: LD_INT 170
4774: PPUSH
4775: LD_INT 104
4777: PPUSH
4778: LD_INT 105
4780: PPUSH
4781: CALL 18624 0 3
// SetSide ( barExplosion , 3 ) ;
4785: LD_INT 73
4787: PPUSH
4788: LD_INT 3
4790: PPUSH
4791: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4795: LD_EXP 44
4799: PPUSH
4800: LD_STRING DK-Conspiracy-23
4802: PPUSH
4803: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4807: LD_EXP 47
4811: PPUSH
4812: CALL_OW 302
4816: IFFALSE 4886
// begin hasExplosionsInFactory := true ;
4818: LD_ADDR_EXP 7
4822: PUSH
4823: LD_INT 1
4825: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4826: LD_EXP 47
4830: PPUSH
4831: LD_STRING DO-Conspiracy-24
4833: PPUSH
4834: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4838: LD_INT 175
4840: PPUSH
4841: LD_INT 54
4843: PPUSH
4844: LD_INT 70
4846: PPUSH
4847: CALL 18624 0 3
// if IsOk ( Markov ) then
4851: LD_EXP 46
4855: PPUSH
4856: CALL_OW 302
4860: IFFALSE 4886
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4862: LD_EXP 46
4866: PPUSH
4867: LD_STRING DMar-Conspiracy-25
4869: PPUSH
4870: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4874: LD_EXP 46
4878: PPUSH
4879: LD_STRING DMar-Conspiracy-26
4881: PPUSH
4882: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4886: LD_EXP 48
4890: PPUSH
4891: CALL_OW 302
4895: PUSH
4896: LD_EXP 44
4900: PPUSH
4901: CALL_OW 302
4905: AND
4906: IFFALSE 5366
// begin hasWeapons := true ;
4908: LD_ADDR_EXP 19
4912: PUSH
4913: LD_INT 1
4915: ST_TO_ADDR
// hasRevolver := true ;
4916: LD_ADDR_EXP 8
4920: PUSH
4921: LD_INT 1
4923: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
4924: LD_STRING M1-weapons
4926: PPUSH
4927: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
4931: LD_EXP 48
4935: PPUSH
4936: LD_STRING DKs-Conspiracy-27
4938: PPUSH
4939: CALL_OW 88
// if IsOk ( Givi ) then
4943: LD_EXP 40
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4968
// Say ( Givi , DG-Conspiracy-28 ) else
4954: LD_EXP 40
4958: PPUSH
4959: LD_STRING DG-Conspiracy-28
4961: PPUSH
4962: CALL_OW 88
4966: GO 5033
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
4968: LD_EXP 50
4972: PPUSH
4973: LD_INT 26
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PPUSH
4983: CALL_OW 72
4987: PUSH
4988: LD_INT 1
4990: ARRAY
4991: PPUSH
4992: LD_STRING DArm-Conspiracy-a-28
4994: PPUSH
4995: CALL_OW 88
4999: NOT
5000: IFFALSE 5033
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5002: LD_EXP 50
5006: PPUSH
5007: LD_INT 26
5009: PUSH
5010: LD_INT 2
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PPUSH
5017: CALL_OW 72
5021: PUSH
5022: LD_INT 1
5024: ARRAY
5025: PPUSH
5026: LD_STRING DArf-Conspiracy-a-28
5028: PPUSH
5029: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5033: LD_EXP 48
5037: PPUSH
5038: LD_STRING DKs-Conspiracy-29
5040: PPUSH
5041: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5045: LD_INT 192
5047: PPUSH
5048: LD_INT 122
5050: PPUSH
5051: LD_INT 105
5053: PPUSH
5054: CALL 18624 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5058: LD_EXP 48
5062: PPUSH
5063: LD_STRING DKs-Conspiracy-30
5065: PPUSH
5066: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5070: LD_EXP 44
5074: PPUSH
5075: LD_STRING DK-Conspiracy-31
5077: PPUSH
5078: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5082: LD_EXP 46
5086: PPUSH
5087: LD_STRING DMar-Conspiracy-33
5089: PPUSH
5090: CALL_OW 88
5094: NOT
5095: PUSH
5096: LD_EXP 50
5100: AND
5101: IFFALSE 5168
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5103: LD_EXP 50
5107: PPUSH
5108: LD_INT 26
5110: PUSH
5111: LD_INT 1
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 72
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PPUSH
5127: LD_STRING DArm-Conspiracy-a-34
5129: PPUSH
5130: CALL_OW 88
5134: NOT
5135: IFFALSE 5168
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5137: LD_EXP 50
5141: PPUSH
5142: LD_INT 26
5144: PUSH
5145: LD_INT 2
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 72
5156: PUSH
5157: LD_INT 1
5159: ARRAY
5160: PPUSH
5161: LD_STRING DArf-Conspiracy-a-34
5163: PPUSH
5164: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5168: LD_EXP 44
5172: PPUSH
5173: LD_STRING DK-Conspiracy-34
5175: PPUSH
5176: CALL_OW 88
// if IsOk ( Markov ) then
5180: LD_EXP 46
5184: PPUSH
5185: CALL_OW 302
5189: IFFALSE 5274
// begin hasSniperRifle := true ;
5191: LD_ADDR_EXP 11
5195: PUSH
5196: LD_INT 1
5198: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5199: LD_EXP 46
5203: PPUSH
5204: LD_STRING DMar-Conspiracy-35
5206: PPUSH
5207: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5211: LD_EXP 44
5215: PPUSH
5216: LD_STRING DK-Conspiracy-36
5218: PPUSH
5219: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5223: LD_EXP 46
5227: PPUSH
5228: LD_STRING DMar-Conspiracy-37
5230: PPUSH
5231: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5235: LD_EXP 46
5239: PPUSH
5240: LD_STRING DMar-Conspiracy-38
5242: PPUSH
5243: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5247: LD_INT 137
5249: PPUSH
5250: LD_INT 98
5252: PPUSH
5253: LD_INT 105
5255: PPUSH
5256: CALL 18624 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5260: LD_EXP 46
5264: PPUSH
5265: LD_STRING DMar-Conspiracy-39
5267: PPUSH
5268: CALL_OW 88
// end else
5272: GO 5366
// if heikeSecondSquad then
5274: LD_EXP 50
5278: IFFALSE 5366
// begin hasSniperRifle := true ;
5280: LD_ADDR_EXP 11
5284: PUSH
5285: LD_INT 1
5287: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5288: LD_INT 137
5290: PPUSH
5291: LD_INT 98
5293: PPUSH
5294: LD_INT 105
5296: PPUSH
5297: CALL 18624 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5301: LD_EXP 50
5305: PPUSH
5306: LD_INT 26
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: CALL_OW 72
5320: PUSH
5321: LD_INT 1
5323: ARRAY
5324: PPUSH
5325: LD_STRING DArm-Conspiracy-a-35
5327: PPUSH
5328: CALL_OW 88
5332: NOT
5333: IFFALSE 5366
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5335: LD_EXP 50
5339: PPUSH
5340: LD_INT 26
5342: PUSH
5343: LD_INT 2
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PPUSH
5350: CALL_OW 72
5354: PUSH
5355: LD_INT 1
5357: ARRAY
5358: PPUSH
5359: LD_STRING DArf-Conspiracy-a-35
5361: PPUSH
5362: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5366: LD_EXP 39
5370: PPUSH
5371: LD_STRING DH-Conspiracy-40
5373: PPUSH
5374: CALL_OW 88
// if IsOk ( Mike ) then
5378: LD_EXP 41
5382: PPUSH
5383: CALL_OW 302
5387: IFFALSE 5446
// begin hasScout := true ;
5389: LD_ADDR_EXP 12
5393: PUSH
5394: LD_INT 1
5396: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5397: LD_EXP 41
5401: PPUSH
5402: LD_STRING DM-Conspiracy-41
5404: PPUSH
5405: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5409: LD_EXP 41
5413: PPUSH
5414: LD_STRING DM-Conspiracy-42
5416: PPUSH
5417: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5421: LD_INT 73
5423: PPUSH
5424: LD_INT 102
5426: PPUSH
5427: LD_INT 105
5429: PPUSH
5430: CALL 18624 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5434: LD_EXP 41
5438: PPUSH
5439: LD_STRING DM-Conspiracy-43
5441: PPUSH
5442: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5446: LD_EXP 4
5450: PUSH
5451: LD_EXP 44
5455: PPUSH
5456: CALL_OW 302
5460: AND
5461: PUSH
5462: LD_EXP 48
5466: PPUSH
5467: CALL_OW 302
5471: AND
5472: IFFALSE 5518
// begin hasMethanol := true ;
5474: LD_ADDR_EXP 13
5478: PUSH
5479: LD_INT 1
5481: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5482: LD_EXP 44
5486: PPUSH
5487: LD_STRING DK-Conspiracy-44
5489: PPUSH
5490: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5494: LD_EXP 44
5498: PPUSH
5499: LD_STRING DK-Conspiracy-45
5501: PPUSH
5502: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5506: LD_EXP 43
5510: PPUSH
5511: LD_STRING DKam-Conspiracy-46
5513: PPUSH
5514: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5518: LD_EXP 39
5522: PPUSH
5523: LD_STRING DH-Conspiracy-47
5525: PPUSH
5526: CALL_OW 88
// wait ( 0 0$1 ) ;
5530: LD_INT 35
5532: PPUSH
5533: CALL_OW 67
// your_side := 8 ;
5537: LD_ADDR_OWVAR 2
5541: PUSH
5542: LD_INT 8
5544: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5545: LD_INT 1
5547: PPUSH
5548: LD_INT 1
5550: PPUSH
5551: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_INT 2
5562: PUSH
5563: LD_INT 22
5565: PUSH
5566: LD_INT 2
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: LD_INT 22
5575: PUSH
5576: LD_INT 4
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: PUSH
5588: LD_INT 21
5590: PUSH
5591: LD_INT 1
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PPUSH
5602: CALL_OW 69
5606: PUSH
5607: FOR_IN
5608: IFFALSE 5621
// RemoveUnit ( i ) ;
5610: LD_VAR 0 2
5614: PPUSH
5615: CALL_OW 64
5619: GO 5607
5621: POP
5622: POP
// wait ( 0 0$0.3 ) ;
5623: LD_INT 10
5625: PPUSH
5626: CALL_OW 67
// Query ( StartInfo1 ) ;
5630: LD_STRING StartInfo1
5632: PPUSH
5633: CALL_OW 97
// wait ( 0 0$1 ) ;
5637: LD_INT 35
5639: PPUSH
5640: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5644: LD_STRING colors_night.txt
5646: PPUSH
5647: CALL_OW 544
// Query ( StartInfo2 ) ;
5651: LD_STRING StartInfo2
5653: PPUSH
5654: CALL_OW 97
// PrepareGame ;
5658: CALL 988 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5662: LD_INT 152
5664: PPUSH
5665: LD_INT 65
5667: PPUSH
5668: LD_INT 2
5670: PPUSH
5671: LD_INT 70
5673: NEG
5674: PPUSH
5675: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5679: LD_INT 152
5681: PPUSH
5682: LD_INT 65
5684: PPUSH
5685: LD_INT 2
5687: PPUSH
5688: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5692: LD_INT 133
5694: PPUSH
5695: LD_INT 76
5697: PPUSH
5698: LD_INT 2
5700: PPUSH
5701: LD_INT 6
5703: NEG
5704: PPUSH
5705: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5709: LD_INT 152
5711: PPUSH
5712: LD_INT 65
5714: PPUSH
5715: LD_INT 8
5717: PPUSH
5718: LD_INT 70
5720: NEG
5721: PPUSH
5722: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5726: LD_INT 152
5728: PPUSH
5729: LD_INT 65
5731: PPUSH
5732: LD_INT 8
5734: PPUSH
5735: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5739: LD_INT 133
5741: PPUSH
5742: LD_INT 76
5744: PPUSH
5745: LD_INT 8
5747: PPUSH
5748: LD_INT 6
5750: NEG
5751: PPUSH
5752: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5756: LD_INT 23
5758: PPUSH
5759: CALL_OW 87
// dialogue_skipped := false ;
5763: LD_ADDR_OWVAR 59
5767: PUSH
5768: LD_INT 0
5770: ST_TO_ADDR
// InitRuPatrols ;
5771: CALL 3156 0 0
// Say ( Heike , DH-Escape-1 ) ;
5775: LD_EXP 39
5779: PPUSH
5780: LD_STRING DH-Escape-1
5782: PPUSH
5783: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5787: LD_EXP 39
5791: PPUSH
5792: LD_STRING DH-Escape-2
5794: PPUSH
5795: CALL_OW 88
// if not debug then
5799: LD_EXP 1
5803: NOT
5804: IFFALSE 5810
// StartLockerMinigame ;
5806: CALL 19135 0 0
// wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5817: LD_EXP 39
5821: PPUSH
5822: LD_STRING DH-Escape-4
5824: PPUSH
5825: CALL_OW 88
// wait ( 0 0$3 ) ;
5829: LD_INT 105
5831: PPUSH
5832: CALL_OW 67
// your_side := 2 ;
5836: LD_ADDR_OWVAR 2
5840: PUSH
5841: LD_INT 2
5843: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5844: LD_EXP 39
5848: PPUSH
5849: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5853: LD_INT 152
5855: PPUSH
5856: LD_INT 65
5858: PPUSH
5859: LD_INT 2
5861: PPUSH
5862: LD_INT 70
5864: NEG
5865: PPUSH
5866: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5870: LD_INT 152
5872: PPUSH
5873: LD_INT 65
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5883: LD_INT 133
5885: PPUSH
5886: LD_INT 76
5888: PPUSH
5889: LD_INT 8
5891: PPUSH
5892: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5896: LD_EXP 39
5900: PPUSH
5901: LD_INT 128
5903: PPUSH
5904: LD_INT 64
5906: PPUSH
5907: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5911: LD_INT 35
5913: PPUSH
5914: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5918: LD_EXP 39
5922: PPUSH
5923: LD_INT 128
5925: PPUSH
5926: LD_INT 64
5928: PPUSH
5929: CALL_OW 307
5933: IFFALSE 5911
// ComHold ( Heike ) ;
5935: LD_EXP 39
5939: PPUSH
5940: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
5944: LD_EXP 39
5948: PPUSH
5949: LD_STRING DH-Start-1
5951: PPUSH
5952: CALL_OW 88
// if not americanContact then
5956: LD_EXP 10
5960: NOT
5961: IFFALSE 5977
// Say ( Heike , DH-Start-c-2 ) else
5963: LD_EXP 39
5967: PPUSH
5968: LD_STRING DH-Start-c-2
5970: PPUSH
5971: CALL_OW 88
5975: GO 6009
// if johnnySaved then
5977: LD_EXP 3
5981: IFFALSE 5997
// Say ( Heike , DH-Start-a-2 ) else
5983: LD_EXP 39
5987: PPUSH
5988: LD_STRING DH-Start-a-2
5990: PPUSH
5991: CALL_OW 88
5995: GO 6009
// Say ( Heike , DH-Start-b-2 ) ;
5997: LD_EXP 39
6001: PPUSH
6002: LD_STRING DH-Start-b-2
6004: PPUSH
6005: CALL_OW 88
// Video ( false ) ;
6009: LD_INT 0
6011: PPUSH
6012: CALL 64409 0 1
// tick := 0 ;
6016: LD_ADDR_OWVAR 1
6020: PUSH
6021: LD_INT 0
6023: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6024: LD_STRING M1
6026: PPUSH
6027: CALL_OW 337
// enable ( gameStartEvent ) ;
6031: LD_INT 2
6033: ENABLE_MARKED
// SaveForQuickRestart ;
6034: CALL_OW 22
// end ;
6038: LD_VAR 0 1
6042: RET
// function ActionAdditional ; var i , un , tmp ; begin
6043: LD_INT 0
6045: PPUSH
6046: PPUSH
6047: PPUSH
6048: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6049: LD_INT 115
6051: PPUSH
6052: LD_INT 27
6054: PPUSH
6055: LD_INT 2
6057: PPUSH
6058: LD_INT 6
6060: NEG
6061: PPUSH
6062: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6066: LD_EXP 39
6070: PPUSH
6071: LD_INT 115
6073: PPUSH
6074: LD_INT 27
6076: PPUSH
6077: CALL_OW 428
6081: PPUSH
6082: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6086: LD_EXP 39
6090: PPUSH
6091: LD_INT 33
6093: PPUSH
6094: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6098: LD_INT 124
6100: PPUSH
6101: LD_INT 39
6103: PPUSH
6104: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6108: LD_EXP 39
6112: PPUSH
6113: LD_STRING DH-Fail-1
6115: PPUSH
6116: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6120: LD_INT 3
6122: PPUSH
6123: CALL_OW 427
// ComExit ( Heike ) ;
6127: LD_EXP 39
6131: PPUSH
6132: CALL 64835 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6136: LD_EXP 39
6140: PPUSH
6141: LD_INT 109
6143: PPUSH
6144: LD_INT 33
6146: PPUSH
6147: CALL_OW 171
// AddComHold ( Heike ) ;
6151: LD_EXP 39
6155: PPUSH
6156: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6160: LD_INT 115
6162: PPUSH
6163: LD_INT 27
6165: PPUSH
6166: LD_INT 2
6168: PPUSH
6169: CALL_OW 331
// wait ( 0 0$2 ) ;
6173: LD_INT 70
6175: PPUSH
6176: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6180: LD_INT 35
6182: PPUSH
6183: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6187: LD_EXP 39
6191: PPUSH
6192: LD_INT 109
6194: PPUSH
6195: LD_INT 33
6197: PPUSH
6198: CALL_OW 307
6202: IFFALSE 6180
// Say ( Heike , DH-Fail-2 ) ;
6204: LD_EXP 39
6208: PPUSH
6209: LD_STRING DH-Fail-2
6211: PPUSH
6212: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6216: LD_EXP 39
6220: PPUSH
6221: LD_INT 111
6223: PPUSH
6224: LD_INT 48
6226: PPUSH
6227: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6231: LD_INT 35
6233: PPUSH
6234: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6238: LD_EXP 39
6242: PPUSH
6243: LD_INT 111
6245: PPUSH
6246: LD_INT 48
6248: PPUSH
6249: CALL_OW 297
6253: PUSH
6254: LD_INT 4
6256: LESS
6257: IFFALSE 6231
// AddComMoveXY ( Heike , 106 , 72 ) ;
6259: LD_EXP 39
6263: PPUSH
6264: LD_INT 106
6266: PPUSH
6267: LD_INT 72
6269: PPUSH
6270: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6274: LD_EXP 39
6278: PPUSH
6279: LD_INT 103
6281: PPUSH
6282: LD_INT 80
6284: PPUSH
6285: CALL_OW 171
// uc_side := 3 ;
6289: LD_ADDR_OWVAR 20
6293: PUSH
6294: LD_INT 3
6296: ST_TO_ADDR
// uc_nation := 3 ;
6297: LD_ADDR_OWVAR 21
6301: PUSH
6302: LD_INT 3
6304: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6305: LD_INT 1
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: LD_INT 6
6313: PPUSH
6314: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6318: LD_ADDR_OWVAR 29
6322: PUSH
6323: LD_INT 12
6325: PUSH
6326: LD_INT 12
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: ST_TO_ADDR
// un := CreateHuman ;
6333: LD_ADDR_VAR 0 3
6337: PUSH
6338: CALL_OW 44
6342: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6343: LD_VAR 0 3
6347: PPUSH
6348: LD_INT 134
6350: PPUSH
6351: LD_INT 52
6353: PPUSH
6354: LD_INT 4
6356: PPUSH
6357: LD_INT 0
6359: PPUSH
6360: CALL 66577 0 5
// ComTurnUnit ( un , Heike ) ;
6364: LD_VAR 0 3
6368: PPUSH
6369: LD_EXP 39
6373: PPUSH
6374: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6378: LD_VAR 0 3
6382: PPUSH
6383: LD_EXP 39
6387: PPUSH
6388: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6392: LD_VAR 0 3
6396: PPUSH
6397: LD_STRING DRum-Fail-3
6399: PPUSH
6400: CALL_OW 88
// for i := 1 to 3 do
6404: LD_ADDR_VAR 0 2
6408: PUSH
6409: DOUBLE
6410: LD_INT 1
6412: DEC
6413: ST_TO_ADDR
6414: LD_INT 3
6416: PUSH
6417: FOR_TO
6418: IFFALSE 6491
// begin PrepareSoldier ( false , 10 ) ;
6420: LD_INT 0
6422: PPUSH
6423: LD_INT 10
6425: PPUSH
6426: CALL_OW 381
// un := CreateHuman ;
6430: LD_ADDR_VAR 0 3
6434: PUSH
6435: CALL_OW 44
6439: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6440: LD_ADDR_VAR 0 4
6444: PUSH
6445: LD_VAR 0 4
6449: PPUSH
6450: LD_VAR 0 3
6454: PPUSH
6455: CALL 64437 0 2
6459: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6460: LD_VAR 0 3
6464: PPUSH
6465: LD_INT 8
6467: PPUSH
6468: LD_INT 0
6470: PPUSH
6471: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6475: LD_VAR 0 3
6479: PPUSH
6480: LD_EXP 39
6484: PPUSH
6485: CALL_OW 119
// end ;
6489: GO 6417
6491: POP
6492: POP
// repeat wait ( 0 0$1 ) ;
6493: LD_INT 35
6495: PPUSH
6496: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6500: LD_VAR 0 4
6504: PPUSH
6505: LD_INT 101
6507: PUSH
6508: LD_INT 2
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PPUSH
6515: CALL_OW 72
6519: PUSH
6520: LD_INT 1
6522: GREATER
6523: IFFALSE 6493
// wait ( 0 0$1 ) ;
6525: LD_INT 35
6527: PPUSH
6528: CALL_OW 67
// DialogueOn ;
6532: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6536: LD_EXP 39
6540: PPUSH
6541: LD_STRING DH-Fail-4
6543: PPUSH
6544: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6548: LD_EXP 39
6552: PPUSH
6553: LD_STRING DH-Fail-5
6555: PPUSH
6556: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6560: LD_EXP 39
6564: PPUSH
6565: LD_STRING DH-Fail-6
6567: PPUSH
6568: CALL_OW 88
// DialogueOff ;
6572: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6576: LD_VAR 0 4
6580: PPUSH
6581: LD_EXP 39
6585: PPUSH
6586: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6590: LD_INT 35
6592: PPUSH
6593: CALL_OW 67
// until IsDying ( Heike ) ;
6597: LD_EXP 39
6601: PPUSH
6602: CALL_OW 303
6606: IFFALSE 6590
// KillUnit ( Heike ) ;
6608: LD_EXP 39
6612: PPUSH
6613: CALL_OW 66
// wait ( 0 0$4 ) ;
6617: LD_INT 140
6619: PPUSH
6620: CALL_OW 67
// ResetFog ;
6624: CALL_OW 335
// DialogueOn ;
6628: CALL_OW 6
// dwait ( 0 0$1 ) ;
6632: LD_INT 35
6634: PPUSH
6635: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6639: LD_ADDR_EXP 39
6643: PUSH
6644: LD_STRING Heike
6646: PPUSH
6647: LD_EXP 1
6651: NOT
6652: PPUSH
6653: LD_EXP 2
6657: PPUSH
6658: CALL 26988 0 3
6662: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6663: LD_EXP 39
6667: PPUSH
6668: LD_STRING DH-Fail-7
6670: PPUSH
6671: CALL_OW 89
// DialogueOff ;
6675: CALL_OW 7
// YouLost ( Fail ) ;
6679: LD_STRING Fail
6681: PPUSH
6682: CALL_OW 104
// end ;
6686: LD_VAR 0 1
6690: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6691: LD_INT 2
6693: PPUSH
6694: LD_INT 173
6696: PPUSH
6697: LD_INT 29
6699: PPUSH
6700: CALL_OW 293
6704: PUSH
6705: LD_EXP 39
6709: PPUSH
6710: LD_INT 173
6712: PPUSH
6713: LD_INT 29
6715: PPUSH
6716: CALL_OW 297
6720: PUSH
6721: LD_INT 6
6723: LESS
6724: AND
6725: IFFALSE 6742
6727: GO 6729
6729: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6730: LD_EXP 39
6734: PPUSH
6735: LD_STRING DH-EastRoad
6737: PPUSH
6738: CALL_OW 88
6742: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6743: LD_INT 2
6745: PPUSH
6746: LD_INT 149
6748: PPUSH
6749: LD_INT 3
6751: PPUSH
6752: CALL_OW 293
6756: PUSH
6757: LD_EXP 39
6761: PPUSH
6762: LD_INT 149
6764: PPUSH
6765: LD_INT 3
6767: PPUSH
6768: CALL_OW 297
6772: PUSH
6773: LD_INT 6
6775: LESS
6776: AND
6777: IFFALSE 6794
6779: GO 6781
6781: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6782: LD_EXP 39
6786: PPUSH
6787: LD_STRING DH-EastRoad
6789: PPUSH
6790: CALL_OW 88
6794: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6795: LD_INT 2
6797: PPUSH
6798: LD_INT 217
6800: PPUSH
6801: LD_INT 120
6803: PPUSH
6804: CALL_OW 293
6808: PUSH
6809: LD_EXP 39
6813: PPUSH
6814: LD_INT 217
6816: PPUSH
6817: LD_INT 120
6819: PPUSH
6820: CALL_OW 297
6824: PUSH
6825: LD_INT 6
6827: LESS
6828: AND
6829: IFFALSE 6846
6831: GO 6833
6833: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6834: LD_EXP 39
6838: PPUSH
6839: LD_STRING DH-EastEnd
6841: PPUSH
6842: CALL_OW 88
6846: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6847: LD_EXP 39
6851: PPUSH
6852: LD_INT 11
6854: PPUSH
6855: CALL_OW 308
6859: IFFALSE 6897
6861: GO 6863
6863: DISABLE
// begin if not heikeSquad then
6864: LD_EXP 14
6868: NOT
6869: IFFALSE 6885
// Say ( Heike , DH-Hill ) else
6871: LD_EXP 39
6875: PPUSH
6876: LD_STRING DH-Hill
6878: PPUSH
6879: CALL_OW 88
6883: GO 6897
// Say ( Heike , DH-Hill-a ) ;
6885: LD_EXP 39
6889: PPUSH
6890: LD_STRING DH-Hill-a
6892: PPUSH
6893: CALL_OW 88
// end ;
6897: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6898: LD_EXP 39
6902: PPUSH
6903: LD_INT 12
6905: PPUSH
6906: CALL_OW 308
6910: IFFALSE 7097
6912: GO 6914
6914: DISABLE
6915: LD_INT 0
6917: PPUSH
6918: PPUSH
6919: PPUSH
// begin DialogueOn ;
6920: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
6924: LD_EXP 39
6928: PPUSH
6929: CALL_OW 87
// x := GetX ( Heike ) ;
6933: LD_ADDR_VAR 0 1
6937: PUSH
6938: LD_EXP 39
6942: PPUSH
6943: CALL_OW 250
6947: ST_TO_ADDR
// y := GetY ( Heike ) ;
6948: LD_ADDR_VAR 0 2
6952: PUSH
6953: LD_EXP 39
6957: PPUSH
6958: CALL_OW 251
6962: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
6963: LD_VAR 0 1
6967: PPUSH
6968: LD_VAR 0 2
6972: PPUSH
6973: LD_INT 2
6975: PPUSH
6976: LD_INT 12
6978: NEG
6979: PPUSH
6980: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
6984: LD_VAR 0 1
6988: PPUSH
6989: LD_VAR 0 2
6993: PPUSH
6994: LD_INT 2
6996: PPUSH
6997: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7001: LD_INT 101
7003: PUSH
7004: LD_INT 2
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 2
7013: PUSH
7014: LD_INT 30
7016: PUSH
7017: LD_INT 32
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 30
7026: PUSH
7027: LD_INT 33
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PPUSH
7043: CALL_OW 69
7047: IFFALSE 7059
// v := 3 else
7049: LD_ADDR_VAR 0 3
7053: PUSH
7054: LD_INT 3
7056: ST_TO_ADDR
7057: GO 7067
// v := 2 ;
7059: LD_ADDR_VAR 0 3
7063: PUSH
7064: LD_INT 2
7066: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7067: LD_EXP 39
7071: PPUSH
7072: LD_STRING DH-Outpost-
7074: PUSH
7075: LD_INT 1
7077: PPUSH
7078: LD_VAR 0 3
7082: PPUSH
7083: CALL_OW 12
7087: STR
7088: PPUSH
7089: CALL_OW 88
// DialogueOff ;
7093: CALL_OW 7
// end ;
7097: PPOPN 3
7099: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7100: LD_EXP 39
7104: PPUSH
7105: LD_INT 64
7107: PPUSH
7108: CALL_OW 308
7112: IFFALSE 7299
7114: GO 7116
7116: DISABLE
7117: LD_INT 0
7119: PPUSH
7120: PPUSH
7121: PPUSH
// begin DialogueOn ;
7122: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7126: LD_EXP 39
7130: PPUSH
7131: CALL_OW 87
// x := GetX ( Heike ) ;
7135: LD_ADDR_VAR 0 1
7139: PUSH
7140: LD_EXP 39
7144: PPUSH
7145: CALL_OW 250
7149: ST_TO_ADDR
// y := GetY ( Heike ) ;
7150: LD_ADDR_VAR 0 2
7154: PUSH
7155: LD_EXP 39
7159: PPUSH
7160: CALL_OW 251
7164: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7165: LD_VAR 0 1
7169: PPUSH
7170: LD_VAR 0 2
7174: PPUSH
7175: LD_INT 2
7177: PPUSH
7178: LD_INT 12
7180: NEG
7181: PPUSH
7182: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7186: LD_VAR 0 1
7190: PPUSH
7191: LD_VAR 0 2
7195: PPUSH
7196: LD_INT 2
7198: PPUSH
7199: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7203: LD_INT 101
7205: PUSH
7206: LD_INT 2
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 2
7215: PUSH
7216: LD_INT 30
7218: PUSH
7219: LD_INT 32
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 30
7228: PUSH
7229: LD_INT 33
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PPUSH
7245: CALL_OW 69
7249: IFFALSE 7261
// v := 3 else
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_INT 3
7258: ST_TO_ADDR
7259: GO 7269
// v := 2 ;
7261: LD_ADDR_VAR 0 3
7265: PUSH
7266: LD_INT 2
7268: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7269: LD_EXP 39
7273: PPUSH
7274: LD_STRING DH-Outpost-
7276: PUSH
7277: LD_INT 1
7279: PPUSH
7280: LD_VAR 0 3
7284: PPUSH
7285: CALL_OW 12
7289: STR
7290: PPUSH
7291: CALL_OW 88
// DialogueOff ;
7295: CALL_OW 7
// end ;
7299: PPOPN 3
7301: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7302: LD_EXP 39
7306: PPUSH
7307: LD_INT 19
7309: PPUSH
7310: CALL_OW 308
7314: PUSH
7315: LD_EXP 22
7319: NOT
7320: AND
7321: PUSH
7322: LD_EXP 30
7326: NOT
7327: AND
7328: IFFALSE 7401
7330: GO 7332
7332: DISABLE
// begin DialogueOn ;
7333: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7337: LD_INT 152
7339: PPUSH
7340: LD_INT 115
7342: PPUSH
7343: LD_INT 2
7345: PPUSH
7346: LD_INT 16
7348: NEG
7349: PPUSH
7350: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7354: LD_INT 152
7356: PPUSH
7357: LD_INT 115
7359: PPUSH
7360: LD_INT 2
7362: PPUSH
7363: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7367: LD_INT 152
7369: PPUSH
7370: LD_INT 115
7372: PPUSH
7373: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7377: LD_EXP 39
7381: PPUSH
7382: LD_STRING DH-Stealth-1
7384: PPUSH
7385: CALL_OW 88
// DialogueOff ;
7389: CALL_OW 7
// adminAreaDiscovered := true ;
7393: LD_ADDR_EXP 22
7397: PUSH
7398: LD_INT 1
7400: ST_TO_ADDR
// end ;
7401: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7402: LD_INT 2
7404: PPUSH
7405: LD_EXP 40
7409: PPUSH
7410: CALL_OW 292
7414: PUSH
7415: LD_EXP 39
7419: PPUSH
7420: LD_EXP 40
7424: PPUSH
7425: CALL_OW 296
7429: PUSH
7430: LD_INT 6
7432: LESS
7433: AND
7434: PUSH
7435: LD_EXP 17
7439: NOT
7440: AND
7441: PUSH
7442: LD_EXP 30
7446: NOT
7447: AND
7448: IFFALSE 7554
7450: GO 7452
7452: DISABLE
// begin DialogueOn ;
7453: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7457: LD_EXP 40
7461: PPUSH
7462: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7466: LD_EXP 40
7470: PPUSH
7471: LD_EXP 39
7475: PPUSH
7476: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7480: LD_EXP 39
7484: PPUSH
7485: LD_EXP 40
7489: PPUSH
7490: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7494: LD_EXP 39
7498: PPUSH
7499: LD_STRING DH-Givi-1
7501: PPUSH
7502: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7506: LD_EXP 40
7510: PPUSH
7511: LD_STRING DG-Givi-2
7513: PPUSH
7514: CALL_OW 88
// DialogueOff ;
7518: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7522: LD_EXP 40
7526: PPUSH
7527: LD_INT 2
7529: PPUSH
7530: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7534: LD_ADDR_EXP 14
7538: PUSH
7539: LD_EXP 14
7543: PPUSH
7544: LD_EXP 40
7548: PPUSH
7549: CALL 64437 0 2
7553: ST_TO_ADDR
// end ;
7554: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7555: LD_INT 2
7557: PPUSH
7558: LD_EXP 45
7562: PPUSH
7563: CALL_OW 292
7567: PUSH
7568: LD_EXP 39
7572: PPUSH
7573: LD_EXP 45
7577: PPUSH
7578: CALL_OW 296
7582: PUSH
7583: LD_INT 6
7585: LESS
7586: AND
7587: PUSH
7588: LD_EXP 17
7592: NOT
7593: AND
7594: PUSH
7595: LD_EXP 30
7599: NOT
7600: AND
7601: IFFALSE 7707
7603: GO 7605
7605: DISABLE
// begin DialogueOn ;
7606: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7610: LD_EXP 45
7614: PPUSH
7615: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7619: LD_EXP 45
7623: PPUSH
7624: LD_EXP 39
7628: PPUSH
7629: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7633: LD_EXP 39
7637: PPUSH
7638: LD_EXP 45
7642: PPUSH
7643: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7647: LD_EXP 39
7651: PPUSH
7652: LD_STRING DH-Sophia-1
7654: PPUSH
7655: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7659: LD_EXP 45
7663: PPUSH
7664: LD_STRING DS-Sophia-2
7666: PPUSH
7667: CALL_OW 88
// DialogueOff ;
7671: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7675: LD_EXP 45
7679: PPUSH
7680: LD_INT 2
7682: PPUSH
7683: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7687: LD_ADDR_EXP 14
7691: PUSH
7692: LD_EXP 14
7696: PPUSH
7697: LD_EXP 45
7701: PPUSH
7702: CALL 64437 0 2
7706: ST_TO_ADDR
// end ;
7707: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7708: LD_INT 2
7710: PPUSH
7711: LD_EXP 47
7715: PPUSH
7716: CALL_OW 292
7720: PUSH
7721: LD_EXP 39
7725: PPUSH
7726: LD_EXP 47
7730: PPUSH
7731: CALL_OW 296
7735: PUSH
7736: LD_INT 6
7738: LESS
7739: AND
7740: PUSH
7741: LD_EXP 17
7745: NOT
7746: AND
7747: PUSH
7748: LD_EXP 30
7752: NOT
7753: AND
7754: IFFALSE 7850
7756: GO 7758
7758: DISABLE
// begin DialogueOn ;
7759: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7763: LD_EXP 47
7767: PPUSH
7768: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7772: LD_EXP 39
7776: PPUSH
7777: LD_STRING DH-Olaf-1
7779: PPUSH
7780: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7784: LD_EXP 47
7788: PPUSH
7789: LD_STRING DO-Olaf-2
7791: PPUSH
7792: CALL_OW 88
// if explosionsTakenByRussians then
7796: LD_EXP 21
7800: IFFALSE 7814
// Say ( Olaf , DO-Olaf-a-3 ) ;
7802: LD_EXP 47
7806: PPUSH
7807: LD_STRING DO-Olaf-a-3
7809: PPUSH
7810: CALL_OW 88
// DialogueOff ;
7814: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7818: LD_EXP 47
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7830: LD_ADDR_EXP 14
7834: PUSH
7835: LD_EXP 14
7839: PPUSH
7840: LD_EXP 47
7844: PPUSH
7845: CALL 64437 0 2
7849: ST_TO_ADDR
// end ;
7850: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7851: LD_INT 2
7853: PPUSH
7854: LD_EXP 41
7858: PPUSH
7859: CALL_OW 292
7863: PUSH
7864: LD_EXP 39
7868: PPUSH
7869: LD_EXP 41
7873: PPUSH
7874: CALL_OW 296
7878: PUSH
7879: LD_INT 6
7881: LESS
7882: AND
7883: PUSH
7884: LD_EXP 17
7888: NOT
7889: AND
7890: PUSH
7891: LD_EXP 30
7895: NOT
7896: AND
7897: IFFALSE 8125
7899: GO 7901
7901: DISABLE
7902: LD_INT 0
7904: PPUSH
7905: PPUSH
// begin DialogueOn ;
7906: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7910: LD_EXP 41
7914: PPUSH
7915: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7919: LD_ADDR_VAR 0 2
7923: PUSH
7924: LD_INT 18
7926: PPUSH
7927: LD_INT 0
7929: PPUSH
7930: CALL_OW 517
7934: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
7935: LD_ADDR_VAR 0 1
7939: PUSH
7940: DOUBLE
7941: LD_INT 1
7943: DEC
7944: ST_TO_ADDR
7945: LD_VAR 0 2
7949: PUSH
7950: LD_INT 1
7952: ARRAY
7953: PUSH
7954: FOR_TO
7955: IFFALSE 8037
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
7957: LD_VAR 0 2
7961: PUSH
7962: LD_INT 1
7964: ARRAY
7965: PUSH
7966: LD_VAR 0 1
7970: ARRAY
7971: PPUSH
7972: LD_VAR 0 2
7976: PUSH
7977: LD_INT 2
7979: ARRAY
7980: PUSH
7981: LD_VAR 0 1
7985: ARRAY
7986: PPUSH
7987: LD_INT 2
7989: PPUSH
7990: LD_INT 3
7992: NEG
7993: PPUSH
7994: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
7998: LD_VAR 0 2
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PUSH
8007: LD_VAR 0 1
8011: ARRAY
8012: PPUSH
8013: LD_VAR 0 2
8017: PUSH
8018: LD_INT 2
8020: ARRAY
8021: PUSH
8022: LD_VAR 0 1
8026: ARRAY
8027: PPUSH
8028: LD_INT 2
8030: PPUSH
8031: CALL_OW 331
// end ;
8035: GO 7954
8037: POP
8038: POP
// Say ( Mike , DM-Mike-1 ) ;
8039: LD_EXP 41
8043: PPUSH
8044: LD_STRING DM-Mike-1
8046: PPUSH
8047: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8051: LD_EXP 39
8055: PPUSH
8056: LD_STRING DH-Mike-2
8058: PPUSH
8059: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8063: LD_INT 78
8065: PPUSH
8066: LD_INT 104
8068: PPUSH
8069: CALL_OW 84
// dwait ( 0 0$1 ) ;
8073: LD_INT 35
8075: PPUSH
8076: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8080: LD_EXP 39
8084: PPUSH
8085: CALL_OW 87
// DialogueOff ;
8089: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8093: LD_EXP 41
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8105: LD_ADDR_EXP 14
8109: PUSH
8110: LD_EXP 14
8114: PPUSH
8115: LD_EXP 41
8119: PPUSH
8120: CALL 64437 0 2
8124: ST_TO_ADDR
// end ;
8125: PPOPN 2
8127: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8128: LD_EXP 39
8132: PPUSH
8133: LD_EXP 44
8137: PPUSH
8138: CALL_OW 296
8142: PUSH
8143: LD_INT 6
8145: LESS
8146: PUSH
8147: LD_EXP 44
8151: PPUSH
8152: CALL_OW 257
8156: PUSH
8157: LD_INT 33
8159: EQUAL
8160: AND
8161: PUSH
8162: LD_EXP 17
8166: NOT
8167: AND
8168: PUSH
8169: LD_EXP 44
8173: PPUSH
8174: CALL_OW 302
8178: AND
8179: PUSH
8180: LD_EXP 20
8184: AND
8185: PUSH
8186: LD_EXP 44
8190: PUSH
8191: LD_EXP 14
8195: IN
8196: AND
8197: PUSH
8198: LD_EXP 44
8202: PPUSH
8203: CALL_OW 255
8207: PUSH
8208: LD_INT 2
8210: EQUAL
8211: AND
8212: IFFALSE 8241
8214: GO 8216
8216: DISABLE
// begin DialogueOn ;
8217: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8221: LD_EXP 39
8225: PPUSH
8226: LD_STRING DH-Kaia-Revolver-2
8228: PPUSH
8229: CALL_OW 88
// SetClassKaiaRevolver ;
8233: CALL 1701 0 0
// DialogueOff ;
8237: CALL_OW 7
// end ;
8241: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8242: LD_EXP 42
8246: PUSH
8247: LD_EXP 49
8251: AND
8252: PUSH
8253: LD_EXP 49
8257: PPUSH
8258: CALL_OW 255
8262: PUSH
8263: LD_INT 2
8265: NONEQUAL
8266: AND
8267: PUSH
8268: LD_EXP 42
8272: PPUSH
8273: CALL_OW 255
8277: PUSH
8278: LD_INT 2
8280: NONEQUAL
8281: AND
8282: PUSH
8283: LD_EXP 14
8287: PPUSH
8288: LD_INT 22
8290: PUSH
8291: LD_INT 2
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PPUSH
8298: CALL_OW 72
8302: PUSH
8303: LD_INT 5
8305: GREATER
8306: AND
8307: PUSH
8308: LD_EXP 17
8312: NOT
8313: AND
8314: PUSH
8315: LD_EXP 30
8319: NOT
8320: AND
8321: IFFALSE 9038
8323: GO 8325
8325: DISABLE
8326: LD_INT 0
8328: PPUSH
8329: PPUSH
// begin DialogueOn ;
8330: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8334: LD_ADDR_VAR 0 2
8338: PUSH
8339: LD_EXP 40
8343: PPUSH
8344: CALL_OW 302
8348: PUSH
8349: LD_EXP 40
8353: PUSH
8354: LD_EXP 14
8358: IN
8359: AND
8360: PUSH
8361: LD_EXP 40
8365: PPUSH
8366: CALL_OW 255
8370: PUSH
8371: LD_INT 2
8373: EQUAL
8374: AND
8375: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8376: LD_EXP 39
8380: PPUSH
8381: LD_STRING DH-Med-1
8383: PPUSH
8384: CALL_OW 88
// if hasGivi then
8388: LD_VAR 0 2
8392: IFFALSE 8408
// Say ( Givi , DG-Med-2 ) else
8394: LD_EXP 40
8398: PPUSH
8399: LD_STRING DG-Med-2
8401: PPUSH
8402: CALL_OW 88
8406: GO 8513
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8408: LD_EXP 14
8412: PUSH
8413: LD_EXP 50
8417: ISECT
8418: PPUSH
8419: LD_INT 22
8421: PUSH
8422: LD_INT 2
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PUSH
8429: LD_INT 26
8431: PUSH
8432: LD_INT 1
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PPUSH
8443: CALL_OW 72
8447: PUSH
8448: LD_INT 1
8450: ARRAY
8451: PPUSH
8452: LD_STRING DArm-Med-e-2
8454: PPUSH
8455: CALL_OW 88
8459: NOT
8460: IFFALSE 8513
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8462: LD_EXP 14
8466: PUSH
8467: LD_EXP 50
8471: ISECT
8472: PPUSH
8473: LD_INT 22
8475: PUSH
8476: LD_INT 2
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PUSH
8483: LD_INT 26
8485: PUSH
8486: LD_INT 2
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PPUSH
8497: CALL_OW 72
8501: PUSH
8502: LD_INT 1
8504: ARRAY
8505: PPUSH
8506: LD_STRING DArf-Med-e-2
8508: PPUSH
8509: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8513: LD_INT 154
8515: PPUSH
8516: LD_INT 119
8518: PPUSH
8519: LD_INT 70
8521: PPUSH
8522: CALL 18624 0 3
// Say ( Heike , DH-Med-3 ) ;
8526: LD_EXP 39
8530: PPUSH
8531: LD_STRING DH-Med-3
8533: PPUSH
8534: CALL_OW 88
// if hasGivi then
8538: LD_VAR 0 2
8542: IFFALSE 8558
// Say ( Givi , DG-Med-4 ) else
8544: LD_EXP 40
8548: PPUSH
8549: LD_STRING DG-Med-4
8551: PPUSH
8552: CALL_OW 88
8556: GO 8663
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8558: LD_EXP 14
8562: PUSH
8563: LD_EXP 50
8567: ISECT
8568: PPUSH
8569: LD_INT 22
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 26
8581: PUSH
8582: LD_INT 1
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PPUSH
8593: CALL_OW 72
8597: PUSH
8598: LD_INT 1
8600: ARRAY
8601: PPUSH
8602: LD_STRING DArm-Med-e-4
8604: PPUSH
8605: CALL_OW 88
8609: NOT
8610: IFFALSE 8663
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8612: LD_EXP 14
8616: PUSH
8617: LD_EXP 50
8621: ISECT
8622: PPUSH
8623: LD_INT 22
8625: PUSH
8626: LD_INT 2
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PUSH
8633: LD_INT 26
8635: PUSH
8636: LD_INT 2
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PPUSH
8647: CALL_OW 72
8651: PUSH
8652: LD_INT 1
8654: ARRAY
8655: PPUSH
8656: LD_STRING DArf-Med-e-4
8658: PPUSH
8659: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8663: LD_ADDR_VAR 0 1
8667: PUSH
8668: LD_EXP 44
8672: PPUSH
8673: CALL_OW 302
8677: PUSH
8678: LD_EXP 44
8682: PUSH
8683: LD_EXP 14
8687: IN
8688: AND
8689: PUSH
8690: LD_EXP 44
8694: PPUSH
8695: CALL_OW 255
8699: PUSH
8700: LD_INT 2
8702: EQUAL
8703: AND
8704: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8705: LD_EXP 41
8709: PPUSH
8710: CALL_OW 302
8714: PUSH
8715: LD_EXP 41
8719: PUSH
8720: LD_EXP 14
8724: IN
8725: AND
8726: PUSH
8727: LD_EXP 44
8731: PPUSH
8732: CALL_OW 255
8736: PUSH
8737: LD_INT 2
8739: EQUAL
8740: AND
8741: IFFALSE 8773
// begin Say ( Mike , DM-Med-5 ) ;
8743: LD_EXP 41
8747: PPUSH
8748: LD_STRING DM-Med-5
8750: PPUSH
8751: CALL_OW 88
// if hasKaia then
8755: LD_VAR 0 1
8759: IFFALSE 8773
// Say ( Kaia , DK-Med-6 ) ;
8761: LD_EXP 44
8765: PPUSH
8766: LD_STRING DK-Med-6
8768: PPUSH
8769: CALL_OW 88
// end ; if hasKaia then
8773: LD_VAR 0 1
8777: IFFALSE 9018
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8779: LD_INT 175
8781: PPUSH
8782: LD_INT 123
8784: PPUSH
8785: LD_INT 2
8787: PPUSH
8788: LD_INT 8
8790: NEG
8791: PPUSH
8792: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8796: LD_INT 175
8798: PPUSH
8799: LD_INT 123
8801: PPUSH
8802: LD_INT 2
8804: PPUSH
8805: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8809: LD_INT 175
8811: PPUSH
8812: LD_INT 123
8814: PPUSH
8815: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8819: LD_EXP 44
8823: PPUSH
8824: LD_STRING DK-Med-7
8826: PPUSH
8827: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8831: LD_EXP 44
8835: PPUSH
8836: LD_STRING DK-Med-8
8838: PPUSH
8839: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8843: LD_EXP 46
8847: PPUSH
8848: CALL_OW 302
8852: PUSH
8853: LD_EXP 46
8857: PUSH
8858: LD_EXP 14
8862: IN
8863: AND
8864: PUSH
8865: LD_EXP 46
8869: PPUSH
8870: CALL_OW 255
8874: PUSH
8875: LD_INT 2
8877: EQUAL
8878: AND
8879: IFFALSE 8937
// begin Say ( Markov , DMar-Med-9 ) ;
8881: LD_EXP 46
8885: PPUSH
8886: LD_STRING DMar-Med-9
8888: PPUSH
8889: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8893: LD_EXP 44
8897: PPUSH
8898: LD_STRING DK-Med-10
8900: PPUSH
8901: CALL_OW 88
// if hasGivi then
8905: LD_VAR 0 2
8909: IFFALSE 8925
// Say ( Kaia , DK-Med-11 ) else
8911: LD_EXP 44
8915: PPUSH
8916: LD_STRING DK-Med-11
8918: PPUSH
8919: CALL_OW 88
8923: GO 8937
// Say ( Kaia , DK-Med-a-11 ) ;
8925: LD_EXP 44
8929: PPUSH
8930: LD_STRING DK-Med-a-11
8932: PPUSH
8933: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
8937: LD_EXP 43
8941: PPUSH
8942: CALL_OW 302
8946: PUSH
8947: LD_EXP 43
8951: PUSH
8952: LD_EXP 14
8956: IN
8957: AND
8958: PUSH
8959: LD_EXP 43
8963: PPUSH
8964: CALL_OW 255
8968: PUSH
8969: LD_INT 2
8971: EQUAL
8972: AND
8973: IFFALSE 9018
// begin Say ( Kamil , DKam-Med-12 ) ;
8975: LD_EXP 43
8979: PPUSH
8980: LD_STRING DKam-Med-12
8982: PPUSH
8983: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
8987: LD_EXP 43
8991: PPUSH
8992: LD_STRING DKam-Med-13
8994: PPUSH
8995: CALL_OW 88
// if not hasExplosionCollected then
8999: LD_EXP 23
9003: NOT
9004: IFFALSE 9018
// Say ( Heike , DH-Med-d-14 ) ;
9006: LD_EXP 39
9010: PPUSH
9011: LD_STRING DH-Med-d-14
9013: PPUSH
9014: CALL_OW 88
// end ; end ; DialogueOff ;
9018: CALL_OW 7
// adminAreaDiscovered := true ;
9022: LD_ADDR_EXP 22
9026: PUSH
9027: LD_INT 1
9029: ST_TO_ADDR
// laundryAllowed := true ;
9030: LD_ADDR_EXP 26
9034: PUSH
9035: LD_INT 1
9037: ST_TO_ADDR
// end ;
9038: PPOPN 2
9040: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9041: LD_EXP 42
9045: NOT
9046: PUSH
9047: LD_EXP 49
9051: AND
9052: PUSH
9053: LD_EXP 49
9057: PUSH
9058: LD_EXP 14
9062: IN
9063: NOT
9064: AND
9065: PUSH
9066: LD_EXP 14
9070: PPUSH
9071: LD_INT 22
9073: PUSH
9074: LD_INT 2
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PPUSH
9081: CALL_OW 72
9085: PUSH
9086: LD_INT 4
9088: GREATER
9089: AND
9090: PUSH
9091: LD_EXP 17
9095: NOT
9096: AND
9097: PUSH
9098: LD_EXP 30
9102: NOT
9103: AND
9104: IFFALSE 9821
9106: GO 9108
9108: DISABLE
9109: LD_INT 0
9111: PPUSH
9112: PPUSH
// begin DialogueOn ;
9113: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9117: LD_ADDR_VAR 0 1
9121: PUSH
9122: LD_EXP 40
9126: PPUSH
9127: CALL_OW 302
9131: PUSH
9132: LD_EXP 40
9136: PUSH
9137: LD_EXP 14
9141: IN
9142: AND
9143: PUSH
9144: LD_EXP 40
9148: PPUSH
9149: CALL_OW 255
9153: PUSH
9154: LD_INT 2
9156: EQUAL
9157: AND
9158: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9159: LD_EXP 39
9163: PPUSH
9164: LD_STRING DH-Med-a-1
9166: PPUSH
9167: CALL_OW 88
// if hasGivi then
9171: LD_VAR 0 1
9175: IFFALSE 9191
// Say ( Givi , DG-Med-a-2 ) else
9177: LD_EXP 40
9181: PPUSH
9182: LD_STRING DG-Med-a-2
9184: PPUSH
9185: CALL_OW 88
9189: GO 9296
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9191: LD_EXP 14
9195: PUSH
9196: LD_EXP 50
9200: ISECT
9201: PPUSH
9202: LD_INT 22
9204: PUSH
9205: LD_INT 2
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 26
9214: PUSH
9215: LD_INT 1
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PPUSH
9226: CALL_OW 72
9230: PUSH
9231: LD_INT 1
9233: ARRAY
9234: PPUSH
9235: LD_STRING DArm-Med-f-2
9237: PPUSH
9238: CALL_OW 88
9242: NOT
9243: IFFALSE 9296
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9245: LD_EXP 14
9249: PUSH
9250: LD_EXP 50
9254: ISECT
9255: PPUSH
9256: LD_INT 22
9258: PUSH
9259: LD_INT 2
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: LD_INT 26
9268: PUSH
9269: LD_INT 2
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PPUSH
9280: CALL_OW 72
9284: PUSH
9285: LD_INT 1
9287: ARRAY
9288: PPUSH
9289: LD_STRING DArf-Med-f-2
9291: PPUSH
9292: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9296: LD_INT 154
9298: PPUSH
9299: LD_INT 119
9301: PPUSH
9302: LD_INT 70
9304: PPUSH
9305: CALL 18624 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9309: LD_EXP 39
9313: PPUSH
9314: LD_STRING DH-Med-a-3
9316: PPUSH
9317: CALL_OW 88
// if hasGivi then
9321: LD_VAR 0 1
9325: IFFALSE 9341
// Say ( Givi , DG-Med-a-4 ) else
9327: LD_EXP 40
9331: PPUSH
9332: LD_STRING DG-Med-a-4
9334: PPUSH
9335: CALL_OW 88
9339: GO 9446
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9341: LD_EXP 14
9345: PUSH
9346: LD_EXP 50
9350: ISECT
9351: PPUSH
9352: LD_INT 22
9354: PUSH
9355: LD_INT 2
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: LD_INT 26
9364: PUSH
9365: LD_INT 1
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PPUSH
9376: CALL_OW 72
9380: PUSH
9381: LD_INT 1
9383: ARRAY
9384: PPUSH
9385: LD_STRING DArm-Med-f-4
9387: PPUSH
9388: CALL_OW 88
9392: NOT
9393: IFFALSE 9446
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9395: LD_EXP 14
9399: PUSH
9400: LD_EXP 50
9404: ISECT
9405: PPUSH
9406: LD_INT 22
9408: PUSH
9409: LD_INT 2
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 26
9418: PUSH
9419: LD_INT 2
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PPUSH
9430: CALL_OW 72
9434: PUSH
9435: LD_INT 1
9437: ARRAY
9438: PPUSH
9439: LD_STRING DArf-Med-f-4
9441: PPUSH
9442: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9446: LD_ADDR_VAR 0 2
9450: PUSH
9451: LD_EXP 44
9455: PPUSH
9456: CALL_OW 302
9460: PUSH
9461: LD_EXP 44
9465: PUSH
9466: LD_EXP 14
9470: IN
9471: AND
9472: PUSH
9473: LD_EXP 44
9477: PPUSH
9478: CALL_OW 255
9482: PUSH
9483: LD_INT 2
9485: EQUAL
9486: AND
9487: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9488: LD_EXP 41
9492: PPUSH
9493: CALL_OW 302
9497: PUSH
9498: LD_EXP 41
9502: PUSH
9503: LD_EXP 14
9507: IN
9508: AND
9509: PUSH
9510: LD_EXP 41
9514: PPUSH
9515: CALL_OW 255
9519: PUSH
9520: LD_INT 2
9522: EQUAL
9523: AND
9524: IFFALSE 9556
// begin Say ( Mike , DM-Med-5 ) ;
9526: LD_EXP 41
9530: PPUSH
9531: LD_STRING DM-Med-5
9533: PPUSH
9534: CALL_OW 88
// if hasKaia then
9538: LD_VAR 0 2
9542: IFFALSE 9556
// Say ( Kaia , DK-Med-6 ) ;
9544: LD_EXP 44
9548: PPUSH
9549: LD_STRING DK-Med-6
9551: PPUSH
9552: CALL_OW 88
// end ; if hasKaia then
9556: LD_VAR 0 2
9560: IFFALSE 9801
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9562: LD_INT 175
9564: PPUSH
9565: LD_INT 123
9567: PPUSH
9568: LD_INT 2
9570: PPUSH
9571: LD_INT 8
9573: NEG
9574: PPUSH
9575: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9579: LD_INT 175
9581: PPUSH
9582: LD_INT 123
9584: PPUSH
9585: LD_INT 2
9587: PPUSH
9588: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9592: LD_INT 175
9594: PPUSH
9595: LD_INT 123
9597: PPUSH
9598: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9602: LD_EXP 44
9606: PPUSH
9607: LD_STRING DK-Med-7
9609: PPUSH
9610: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9614: LD_EXP 44
9618: PPUSH
9619: LD_STRING DK-Med-8
9621: PPUSH
9622: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9626: LD_EXP 46
9630: PPUSH
9631: CALL_OW 302
9635: PUSH
9636: LD_EXP 46
9640: PUSH
9641: LD_EXP 14
9645: IN
9646: AND
9647: PUSH
9648: LD_EXP 46
9652: PPUSH
9653: CALL_OW 255
9657: PUSH
9658: LD_INT 2
9660: EQUAL
9661: AND
9662: IFFALSE 9720
// begin Say ( Markov , DMar-Med-9 ) ;
9664: LD_EXP 46
9668: PPUSH
9669: LD_STRING DMar-Med-9
9671: PPUSH
9672: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9676: LD_EXP 44
9680: PPUSH
9681: LD_STRING DK-Med-10
9683: PPUSH
9684: CALL_OW 88
// if hasGivi then
9688: LD_VAR 0 1
9692: IFFALSE 9708
// Say ( Kaia , DK-Med-11 ) else
9694: LD_EXP 44
9698: PPUSH
9699: LD_STRING DK-Med-11
9701: PPUSH
9702: CALL_OW 88
9706: GO 9720
// Say ( Kaia , DK-Med-a-11 ) ;
9708: LD_EXP 44
9712: PPUSH
9713: LD_STRING DK-Med-a-11
9715: PPUSH
9716: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9720: LD_EXP 43
9724: PPUSH
9725: CALL_OW 302
9729: PUSH
9730: LD_EXP 43
9734: PUSH
9735: LD_EXP 14
9739: IN
9740: AND
9741: PUSH
9742: LD_EXP 43
9746: PPUSH
9747: CALL_OW 255
9751: PUSH
9752: LD_INT 2
9754: EQUAL
9755: AND
9756: IFFALSE 9801
// begin Say ( Kamil , DKam-Med-12 ) ;
9758: LD_EXP 43
9762: PPUSH
9763: LD_STRING DKam-Med-12
9765: PPUSH
9766: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9770: LD_EXP 43
9774: PPUSH
9775: LD_STRING DKam-Med-13
9777: PPUSH
9778: CALL_OW 88
// if not hasExplosionCollected then
9782: LD_EXP 23
9786: NOT
9787: IFFALSE 9801
// Say ( Heike , DH-Med-d-14 ) ;
9789: LD_EXP 39
9793: PPUSH
9794: LD_STRING DH-Med-d-14
9796: PPUSH
9797: CALL_OW 88
// end ; end ; DialogueOff ;
9801: CALL_OW 7
// adminAreaDiscovered := true ;
9805: LD_ADDR_EXP 22
9809: PUSH
9810: LD_INT 1
9812: ST_TO_ADDR
// laundryAllowed := true ;
9813: LD_ADDR_EXP 26
9817: PUSH
9818: LD_INT 1
9820: ST_TO_ADDR
// end ;
9821: PPOPN 2
9823: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9824: LD_EXP 42
9828: PUSH
9829: LD_EXP 49
9833: NOT
9834: AND
9835: PUSH
9836: LD_EXP 42
9840: PUSH
9841: LD_EXP 14
9845: IN
9846: NOT
9847: AND
9848: PUSH
9849: LD_EXP 14
9853: PPUSH
9854: LD_INT 22
9856: PUSH
9857: LD_INT 2
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: PPUSH
9864: CALL_OW 72
9868: PUSH
9869: LD_INT 4
9871: GREATER
9872: AND
9873: PUSH
9874: LD_EXP 17
9878: NOT
9879: AND
9880: PUSH
9881: LD_EXP 30
9885: NOT
9886: AND
9887: IFFALSE 10604
9889: GO 9891
9891: DISABLE
9892: LD_INT 0
9894: PPUSH
9895: PPUSH
// begin DialogueOn ;
9896: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9900: LD_ADDR_VAR 0 1
9904: PUSH
9905: LD_EXP 40
9909: PPUSH
9910: CALL_OW 302
9914: PUSH
9915: LD_EXP 40
9919: PUSH
9920: LD_EXP 14
9924: IN
9925: AND
9926: PUSH
9927: LD_EXP 40
9931: PPUSH
9932: CALL_OW 255
9936: PUSH
9937: LD_INT 2
9939: EQUAL
9940: AND
9941: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
9942: LD_EXP 39
9946: PPUSH
9947: LD_STRING DH-Med-b-1
9949: PPUSH
9950: CALL_OW 88
// if hasGivi then
9954: LD_VAR 0 1
9958: IFFALSE 9974
// Say ( Givi , DG-Med-a-2 ) else
9960: LD_EXP 40
9964: PPUSH
9965: LD_STRING DG-Med-a-2
9967: PPUSH
9968: CALL_OW 88
9972: GO 10079
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9974: LD_EXP 14
9978: PUSH
9979: LD_EXP 50
9983: ISECT
9984: PPUSH
9985: LD_INT 22
9987: PUSH
9988: LD_INT 2
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 26
9997: PUSH
9998: LD_INT 1
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PPUSH
10009: CALL_OW 72
10013: PUSH
10014: LD_INT 1
10016: ARRAY
10017: PPUSH
10018: LD_STRING DArm-Med-f-2
10020: PPUSH
10021: CALL_OW 88
10025: NOT
10026: IFFALSE 10079
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10028: LD_EXP 14
10032: PUSH
10033: LD_EXP 50
10037: ISECT
10038: PPUSH
10039: LD_INT 22
10041: PUSH
10042: LD_INT 2
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: LD_INT 26
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PPUSH
10063: CALL_OW 72
10067: PUSH
10068: LD_INT 1
10070: ARRAY
10071: PPUSH
10072: LD_STRING DArf-Med-f-2
10074: PPUSH
10075: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10079: LD_INT 154
10081: PPUSH
10082: LD_INT 119
10084: PPUSH
10085: LD_INT 70
10087: PPUSH
10088: CALL 18624 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10092: LD_EXP 39
10096: PPUSH
10097: LD_STRING DH-Med-a-3
10099: PPUSH
10100: CALL_OW 88
// if hasGivi then
10104: LD_VAR 0 1
10108: IFFALSE 10124
// Say ( Givi , DG-Med-a-4 ) else
10110: LD_EXP 40
10114: PPUSH
10115: LD_STRING DG-Med-a-4
10117: PPUSH
10118: CALL_OW 88
10122: GO 10229
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10124: LD_EXP 14
10128: PUSH
10129: LD_EXP 50
10133: ISECT
10134: PPUSH
10135: LD_INT 22
10137: PUSH
10138: LD_INT 2
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PUSH
10145: LD_INT 26
10147: PUSH
10148: LD_INT 1
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PPUSH
10159: CALL_OW 72
10163: PUSH
10164: LD_INT 1
10166: ARRAY
10167: PPUSH
10168: LD_STRING DArm-Med-f-4
10170: PPUSH
10171: CALL_OW 88
10175: NOT
10176: IFFALSE 10229
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10178: LD_EXP 14
10182: PUSH
10183: LD_EXP 50
10187: ISECT
10188: PPUSH
10189: LD_INT 22
10191: PUSH
10192: LD_INT 2
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 26
10201: PUSH
10202: LD_INT 2
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PPUSH
10213: CALL_OW 72
10217: PUSH
10218: LD_INT 1
10220: ARRAY
10221: PPUSH
10222: LD_STRING DArf-Med-f-4
10224: PPUSH
10225: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10229: LD_ADDR_VAR 0 2
10233: PUSH
10234: LD_EXP 44
10238: PPUSH
10239: CALL_OW 302
10243: PUSH
10244: LD_EXP 44
10248: PUSH
10249: LD_EXP 14
10253: IN
10254: AND
10255: PUSH
10256: LD_EXP 44
10260: PPUSH
10261: CALL_OW 255
10265: PUSH
10266: LD_INT 2
10268: EQUAL
10269: AND
10270: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10271: LD_EXP 41
10275: PPUSH
10276: CALL_OW 302
10280: PUSH
10281: LD_EXP 41
10285: PUSH
10286: LD_EXP 14
10290: IN
10291: AND
10292: PUSH
10293: LD_EXP 41
10297: PPUSH
10298: CALL_OW 255
10302: PUSH
10303: LD_INT 2
10305: EQUAL
10306: AND
10307: IFFALSE 10339
// begin Say ( Mike , DM-Med-5 ) ;
10309: LD_EXP 41
10313: PPUSH
10314: LD_STRING DM-Med-5
10316: PPUSH
10317: CALL_OW 88
// if hasKaia then
10321: LD_VAR 0 2
10325: IFFALSE 10339
// Say ( Kaia , DK-Med-6 ) ;
10327: LD_EXP 44
10331: PPUSH
10332: LD_STRING DK-Med-6
10334: PPUSH
10335: CALL_OW 88
// end ; if hasKaia then
10339: LD_VAR 0 2
10343: IFFALSE 10584
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10345: LD_INT 175
10347: PPUSH
10348: LD_INT 123
10350: PPUSH
10351: LD_INT 2
10353: PPUSH
10354: LD_INT 8
10356: NEG
10357: PPUSH
10358: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10362: LD_INT 175
10364: PPUSH
10365: LD_INT 123
10367: PPUSH
10368: LD_INT 2
10370: PPUSH
10371: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10375: LD_INT 175
10377: PPUSH
10378: LD_INT 123
10380: PPUSH
10381: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10385: LD_EXP 44
10389: PPUSH
10390: LD_STRING DK-Med-7
10392: PPUSH
10393: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10397: LD_EXP 44
10401: PPUSH
10402: LD_STRING DK-Med-8
10404: PPUSH
10405: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10409: LD_EXP 46
10413: PPUSH
10414: CALL_OW 302
10418: PUSH
10419: LD_EXP 46
10423: PUSH
10424: LD_EXP 14
10428: IN
10429: AND
10430: PUSH
10431: LD_EXP 46
10435: PPUSH
10436: CALL_OW 255
10440: PUSH
10441: LD_INT 2
10443: EQUAL
10444: AND
10445: IFFALSE 10503
// begin Say ( Markov , DMar-Med-9 ) ;
10447: LD_EXP 46
10451: PPUSH
10452: LD_STRING DMar-Med-9
10454: PPUSH
10455: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10459: LD_EXP 44
10463: PPUSH
10464: LD_STRING DK-Med-10
10466: PPUSH
10467: CALL_OW 88
// if hasGivi then
10471: LD_VAR 0 1
10475: IFFALSE 10491
// Say ( Kaia , DK-Med-11 ) else
10477: LD_EXP 44
10481: PPUSH
10482: LD_STRING DK-Med-11
10484: PPUSH
10485: CALL_OW 88
10489: GO 10503
// Say ( Kaia , DK-Med-a-11 ) ;
10491: LD_EXP 44
10495: PPUSH
10496: LD_STRING DK-Med-a-11
10498: PPUSH
10499: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10503: LD_EXP 43
10507: PPUSH
10508: CALL_OW 302
10512: PUSH
10513: LD_EXP 43
10517: PUSH
10518: LD_EXP 14
10522: IN
10523: AND
10524: PUSH
10525: LD_EXP 43
10529: PPUSH
10530: CALL_OW 255
10534: PUSH
10535: LD_INT 2
10537: EQUAL
10538: AND
10539: IFFALSE 10584
// begin Say ( Kamil , DKam-Med-12 ) ;
10541: LD_EXP 43
10545: PPUSH
10546: LD_STRING DKam-Med-12
10548: PPUSH
10549: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10553: LD_EXP 43
10557: PPUSH
10558: LD_STRING DKam-Med-13
10560: PPUSH
10561: CALL_OW 88
// if not hasExplosionCollected then
10565: LD_EXP 23
10569: NOT
10570: IFFALSE 10584
// Say ( Heike , DH-Med-d-14 ) ;
10572: LD_EXP 39
10576: PPUSH
10577: LD_STRING DH-Med-d-14
10579: PPUSH
10580: CALL_OW 88
// end ; end ; DialogueOff ;
10584: CALL_OW 7
// adminAreaDiscovered := true ;
10588: LD_ADDR_EXP 22
10592: PUSH
10593: LD_INT 1
10595: ST_TO_ADDR
// laundryAllowed := true ;
10596: LD_ADDR_EXP 26
10600: PUSH
10601: LD_INT 1
10603: ST_TO_ADDR
// end ;
10604: PPOPN 2
10606: END
// every 0 0$1 trigger laundryAllowed do
10607: LD_EXP 26
10611: IFFALSE 10623
10613: GO 10615
10615: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10616: LD_STRING M1-laundry
10618: PPUSH
10619: CALL_OW 337
10623: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10624: LD_EXP 42
10628: NOT
10629: PUSH
10630: LD_EXP 49
10634: NOT
10635: AND
10636: PUSH
10637: LD_EXP 47
10641: PPUSH
10642: CALL_OW 302
10646: AND
10647: PUSH
10648: LD_EXP 47
10652: PUSH
10653: LD_EXP 14
10657: IN
10658: AND
10659: PUSH
10660: LD_EXP 47
10664: PPUSH
10665: CALL_OW 255
10669: PUSH
10670: LD_INT 2
10672: EQUAL
10673: AND
10674: PUSH
10675: LD_EXP 17
10679: NOT
10680: AND
10681: PUSH
10682: LD_EXP 30
10686: NOT
10687: AND
10688: IFFALSE 10844
10690: GO 10692
10692: DISABLE
// begin DialogueOn ;
10693: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10697: LD_INT 152
10699: PPUSH
10700: LD_INT 115
10702: PPUSH
10703: LD_INT 2
10705: PPUSH
10706: LD_INT 16
10708: NEG
10709: PPUSH
10710: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10714: LD_INT 152
10716: PPUSH
10717: LD_INT 115
10719: PPUSH
10720: LD_INT 2
10722: PPUSH
10723: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10727: LD_INT 152
10729: PPUSH
10730: LD_INT 115
10732: PPUSH
10733: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10737: LD_EXP 47
10741: PPUSH
10742: LD_STRING DO-Med-c-1
10744: PPUSH
10745: CALL_OW 88
// if not hasExplosionCollected then
10749: LD_EXP 23
10753: NOT
10754: IFFALSE 10770
// Say ( Heike , DH-Med-d-14 ) else
10756: LD_EXP 39
10760: PPUSH
10761: LD_STRING DH-Med-d-14
10763: PPUSH
10764: CALL_OW 88
10768: GO 10832
// begin Say ( Heike , DH-Med-c-2 ) ;
10770: LD_EXP 39
10774: PPUSH
10775: LD_STRING DH-Med-c-2
10777: PPUSH
10778: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10782: LD_EXP 44
10786: PPUSH
10787: CALL_OW 302
10791: PUSH
10792: LD_EXP 44
10796: PUSH
10797: LD_EXP 14
10801: IN
10802: AND
10803: PUSH
10804: LD_EXP 44
10808: PPUSH
10809: CALL_OW 255
10813: PUSH
10814: LD_INT 2
10816: EQUAL
10817: AND
10818: IFFALSE 10832
// Say ( Kaia , DK-Med-c-3 ) ;
10820: LD_EXP 44
10824: PPUSH
10825: LD_STRING DK-Med-c-3
10827: PPUSH
10828: CALL_OW 88
// end ; DialogueOff ;
10832: CALL_OW 7
// adminAreaDiscovered := true ;
10836: LD_ADDR_EXP 22
10840: PUSH
10841: LD_INT 1
10843: ST_TO_ADDR
// end ;
10844: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10845: LD_EXP 44
10849: PPUSH
10850: CALL_OW 256
10854: PUSH
10855: LD_INT 250
10857: LESS
10858: PUSH
10859: LD_EXP 44
10863: PUSH
10864: LD_EXP 14
10868: IN
10869: AND
10870: PUSH
10871: LD_EXP 17
10875: AND
10876: PUSH
10877: LD_EXP 24
10881: AND
10882: IFFALSE 11011
10884: GO 10886
10886: DISABLE
// begin DialogueOn ;
10887: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10891: LD_EXP 44
10895: PPUSH
10896: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10900: LD_EXP 44
10904: PPUSH
10905: LD_STRING DK-death-1
10907: PPUSH
10908: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10912: LD_EXP 39
10916: PPUSH
10917: LD_STRING DH-death-2
10919: PPUSH
10920: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
10924: LD_EXP 44
10928: PPUSH
10929: LD_STRING DK-death-3
10931: PPUSH
10932: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
10936: LD_EXP 44
10940: PPUSH
10941: LD_STRING DK-death-4
10943: PPUSH
10944: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
10948: LD_EXP 44
10952: PPUSH
10953: LD_INT 8
10955: PPUSH
10956: CALL_OW 235
// ComStop ( Kaia ) ;
10960: LD_EXP 44
10964: PPUSH
10965: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
10969: LD_INT 8
10971: PPUSH
10972: LD_INT 2
10974: PPUSH
10975: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
10979: LD_ADDR_EXP 14
10983: PUSH
10984: LD_EXP 14
10988: PUSH
10989: LD_EXP 44
10993: DIFF
10994: ST_TO_ADDR
// DialogueOff ;
10995: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
10999: LD_EXP 41
11003: PPUSH
11004: LD_STRING DM-death-5
11006: PPUSH
11007: CALL_OW 88
// end ;
11011: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11012: LD_EXP 25
11016: NOT
11017: PUSH
11018: LD_EXP 30
11022: NOT
11023: AND
11024: PUSH
11025: LD_EXP 52
11029: PUSH
11030: LD_EXP 14
11034: IN
11035: NOT
11036: AND
11037: PUSH
11038: LD_INT 2
11040: PPUSH
11041: LD_EXP 52
11045: PPUSH
11046: CALL_OW 292
11050: AND
11051: PUSH
11052: LD_EXP 39
11056: PPUSH
11057: LD_EXP 52
11061: PPUSH
11062: CALL_OW 296
11066: PUSH
11067: LD_INT 6
11069: LESS
11070: AND
11071: PUSH
11072: LD_EXP 17
11076: NOT
11077: AND
11078: IFFALSE 11302
11080: GO 11082
11082: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11083: LD_EXP 52
11087: PPUSH
11088: LD_EXP 39
11092: PPUSH
11093: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11097: LD_EXP 39
11101: PPUSH
11102: LD_EXP 52
11106: PPUSH
11107: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11111: LD_INT 10
11113: PPUSH
11114: CALL_OW 67
// DialogueOn ;
11118: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11122: LD_EXP 52
11126: PPUSH
11127: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11131: LD_EXP 39
11135: PPUSH
11136: LD_STRING DH-Deal-1
11138: PPUSH
11139: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11143: LD_EXP 52
11147: PPUSH
11148: LD_STRING DJ-Deal-2
11150: PPUSH
11151: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11155: LD_EXP 39
11159: PPUSH
11160: LD_STRING DH-Deal-3
11162: PPUSH
11163: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11167: LD_EXP 52
11171: PPUSH
11172: LD_STRING DJ-Deal-4
11174: PPUSH
11175: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11179: LD_EXP 52
11183: PPUSH
11184: LD_STRING DJ-Deal-5
11186: PPUSH
11187: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11191: LD_EXP 52
11195: PPUSH
11196: LD_STRING DJ-Deal-6
11198: PPUSH
11199: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11203: LD_EXP 52
11207: PPUSH
11208: LD_STRING DJ-Deal-7
11210: PPUSH
11211: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11215: LD_EXP 39
11219: PPUSH
11220: LD_STRING DH-Deal-8
11222: PPUSH
11223: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11227: LD_EXP 39
11231: PPUSH
11232: LD_STRING DH-Deal-9
11234: PPUSH
11235: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11239: LD_EXP 52
11243: PPUSH
11244: LD_STRING DJ-Deal-10
11246: PPUSH
11247: CALL_OW 88
// DialogueOff ;
11251: CALL_OW 7
// contactWithAmerican := true ;
11255: LD_ADDR_EXP 25
11259: PUSH
11260: LD_INT 1
11262: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11263: LD_STRING M1-american-out
11265: PPUSH
11266: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11270: LD_EXP 52
11274: PPUSH
11275: LD_INT 2
11277: PPUSH
11278: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11282: LD_ADDR_EXP 14
11286: PUSH
11287: LD_EXP 14
11291: PPUSH
11292: LD_EXP 52
11296: PPUSH
11297: CALL 64437 0 2
11301: ST_TO_ADDR
// end ;
11302: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11303: LD_EXP 25
11307: PUSH
11308: LD_EXP 30
11312: NOT
11313: AND
11314: PUSH
11315: LD_EXP 52
11319: PUSH
11320: LD_EXP 14
11324: IN
11325: NOT
11326: AND
11327: PUSH
11328: LD_INT 2
11330: PPUSH
11331: LD_EXP 52
11335: PPUSH
11336: CALL_OW 292
11340: AND
11341: PUSH
11342: LD_EXP 39
11346: PPUSH
11347: LD_EXP 52
11351: PPUSH
11352: CALL_OW 296
11356: PUSH
11357: LD_INT 6
11359: LESS
11360: AND
11361: PUSH
11362: LD_EXP 17
11366: NOT
11367: AND
11368: IFFALSE 11493
11370: GO 11372
11372: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11373: LD_EXP 52
11377: PPUSH
11378: LD_EXP 39
11382: PPUSH
11383: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11387: LD_EXP 39
11391: PPUSH
11392: LD_EXP 52
11396: PPUSH
11397: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11401: LD_INT 10
11403: PPUSH
11404: CALL_OW 67
// DialogueOn ;
11408: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11412: LD_EXP 52
11416: PPUSH
11417: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11421: LD_EXP 52
11425: PPUSH
11426: LD_STRING DJ-Escort-1
11428: PPUSH
11429: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11433: LD_EXP 39
11437: PPUSH
11438: LD_STRING DH-Escort-2
11440: PPUSH
11441: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11445: LD_EXP 52
11449: PPUSH
11450: LD_STRING DJ-Escort-3
11452: PPUSH
11453: CALL_OW 88
// DialogueOff ;
11457: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11461: LD_EXP 52
11465: PPUSH
11466: LD_INT 2
11468: PPUSH
11469: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11473: LD_ADDR_EXP 14
11477: PUSH
11478: LD_EXP 14
11482: PPUSH
11483: LD_EXP 52
11487: PPUSH
11488: CALL 64437 0 2
11492: ST_TO_ADDR
// end ;
11493: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11494: LD_EXP 25
11498: PUSH
11499: LD_EXP 30
11503: NOT
11504: AND
11505: PUSH
11506: LD_EXP 51
11510: PUSH
11511: LD_EXP 14
11515: DIFF
11516: PPUSH
11517: LD_INT 22
11519: PUSH
11520: LD_INT 4
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PUSH
11527: LD_INT 3
11529: PUSH
11530: LD_INT 120
11532: PUSH
11533: LD_INT 1
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 101
11546: PUSH
11547: LD_INT 2
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: PPUSH
11559: CALL_OW 72
11563: AND
11564: PUSH
11565: LD_EXP 17
11569: NOT
11570: AND
11571: IFFALSE 11786
11573: GO 11575
11575: DISABLE
11576: LD_INT 0
11578: PPUSH
// begin enable ;
11579: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11580: LD_ADDR_VAR 0 1
11584: PUSH
11585: LD_EXP 51
11589: PUSH
11590: LD_EXP 14
11594: DIFF
11595: PPUSH
11596: LD_INT 22
11598: PUSH
11599: LD_INT 4
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 91
11608: PUSH
11609: LD_EXP 39
11613: PUSH
11614: LD_INT 6
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 101
11624: PUSH
11625: LD_INT 2
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: LIST
11636: PPUSH
11637: CALL_OW 72
11641: PPUSH
11642: LD_EXP 39
11646: PPUSH
11647: CALL_OW 74
11651: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_EXP 39
11661: PPUSH
11662: CALL_OW 296
11666: PUSH
11667: LD_INT 6
11669: LESS
11670: IFFALSE 11786
// begin DialogueOn ;
11672: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11676: LD_VAR 0 1
11680: PPUSH
11681: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11685: LD_EXP 39
11689: PPUSH
11690: LD_STRING DH-USsol-1
11692: PPUSH
11693: CALL_OW 88
// if GetSex ( un ) = sex_male then
11697: LD_VAR 0 1
11701: PPUSH
11702: CALL_OW 258
11706: PUSH
11707: LD_INT 1
11709: EQUAL
11710: IFFALSE 11726
// Say ( un , DUSM-USsol-2 ) else
11712: LD_VAR 0 1
11716: PPUSH
11717: LD_STRING DUSM-USsol-2
11719: PPUSH
11720: CALL_OW 88
11724: GO 11738
// Say ( un , DUSF-USsol-2 ) ;
11726: LD_VAR 0 1
11730: PPUSH
11731: LD_STRING DUSF-USsol-2
11733: PPUSH
11734: CALL_OW 88
// DialogueOff ;
11738: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11742: LD_ADDR_EXP 14
11746: PUSH
11747: LD_EXP 14
11751: PPUSH
11752: LD_VAR 0 1
11756: PPUSH
11757: CALL 64437 0 2
11761: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11762: LD_VAR 0 1
11766: PPUSH
11767: LD_INT 1
11769: PPUSH
11770: CALL_OW 109
// SetSide ( un , 2 ) ;
11774: LD_VAR 0 1
11778: PPUSH
11779: LD_INT 2
11781: PPUSH
11782: CALL_OW 235
// end ; end ;
11786: PPOPN 1
11788: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11789: LD_EXP 50
11793: PUSH
11794: LD_EXP 30
11798: NOT
11799: AND
11800: PUSH
11801: LD_EXP 50
11805: PUSH
11806: LD_EXP 14
11810: DIFF
11811: PPUSH
11812: LD_INT 3
11814: PUSH
11815: LD_INT 120
11817: PUSH
11818: LD_INT 1
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: LD_INT 91
11831: PUSH
11832: LD_EXP 39
11836: PUSH
11837: LD_INT 6
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: PUSH
11845: LD_INT 101
11847: PUSH
11848: LD_INT 2
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: LIST
11859: PPUSH
11860: CALL_OW 72
11864: AND
11865: PUSH
11866: LD_EXP 17
11870: NOT
11871: AND
11872: IFFALSE 12087
11874: GO 11876
11876: DISABLE
11877: LD_INT 0
11879: PPUSH
// begin enable ;
11880: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11881: LD_ADDR_VAR 0 1
11885: PUSH
11886: LD_EXP 50
11890: PUSH
11891: LD_EXP 14
11895: DIFF
11896: PPUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 5
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 91
11909: PUSH
11910: LD_EXP 39
11914: PUSH
11915: LD_INT 6
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 101
11925: PUSH
11926: LD_INT 2
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: PPUSH
11938: CALL_OW 72
11942: PPUSH
11943: LD_EXP 39
11947: PPUSH
11948: CALL_OW 74
11952: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11953: LD_VAR 0 1
11957: PPUSH
11958: LD_EXP 39
11962: PPUSH
11963: CALL_OW 296
11967: PUSH
11968: LD_INT 6
11970: LESS
11971: IFFALSE 12087
// begin DialogueOn ;
11973: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11977: LD_VAR 0 1
11981: PPUSH
11982: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11986: LD_EXP 39
11990: PPUSH
11991: LD_STRING DH-USsol-1
11993: PPUSH
11994: CALL_OW 88
// if GetSex ( un ) = sex_male then
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 258
12007: PUSH
12008: LD_INT 1
12010: EQUAL
12011: IFFALSE 12027
// Say ( un , DArm-USsol-2 ) else
12013: LD_VAR 0 1
12017: PPUSH
12018: LD_STRING DArm-USsol-2
12020: PPUSH
12021: CALL_OW 88
12025: GO 12039
// Say ( un , DArf-USsol-3 ) ;
12027: LD_VAR 0 1
12031: PPUSH
12032: LD_STRING DArf-USsol-3
12034: PPUSH
12035: CALL_OW 88
// DialogueOff ;
12039: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12043: LD_ADDR_EXP 14
12047: PUSH
12048: LD_EXP 14
12052: PPUSH
12053: LD_VAR 0 1
12057: PPUSH
12058: CALL 64437 0 2
12062: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12063: LD_VAR 0 1
12067: PPUSH
12068: LD_INT 1
12070: PPUSH
12071: CALL_OW 109
// SetSide ( un , 2 ) ;
12075: LD_VAR 0 1
12079: PPUSH
12080: LD_INT 2
12082: PPUSH
12083: CALL_OW 235
// end ; end ;
12087: PPOPN 1
12089: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12090: LD_EXP 51
12094: PPUSH
12095: LD_INT 101
12097: PUSH
12098: LD_INT 2
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PPUSH
12105: CALL_OW 72
12109: PUSH
12110: LD_EXP 14
12114: PPUSH
12115: LD_INT 22
12117: PUSH
12118: LD_INT 2
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PPUSH
12125: CALL_OW 72
12129: PUSH
12130: LD_INT 5
12132: GREATER
12133: AND
12134: PUSH
12135: LD_EXP 10
12139: NOT
12140: AND
12141: PUSH
12142: LD_EXP 30
12146: NOT
12147: AND
12148: PUSH
12149: LD_EXP 25
12153: NOT
12154: AND
12155: PUSH
12156: LD_EXP 17
12160: NOT
12161: AND
12162: IFFALSE 12277
12164: GO 12166
12166: DISABLE
12167: LD_INT 0
12169: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12170: LD_ADDR_VAR 0 1
12174: PUSH
12175: LD_EXP 51
12179: PPUSH
12180: LD_INT 22
12182: PUSH
12183: LD_INT 4
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 101
12192: PUSH
12193: LD_INT 2
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PPUSH
12204: CALL_OW 72
12208: PUSH
12209: LD_INT 1
12211: ARRAY
12212: ST_TO_ADDR
// DialogueOn ;
12213: CALL_OW 6
// if GetSex ( un ) = sex_male then
12217: LD_VAR 0 1
12221: PPUSH
12222: CALL_OW 258
12226: PUSH
12227: LD_INT 1
12229: EQUAL
12230: IFFALSE 12246
// Say ( un , DUSm-USsol-a-2 ) else
12232: LD_VAR 0 1
12236: PPUSH
12237: LD_STRING DUSm-USsol-a-2
12239: PPUSH
12240: CALL_OW 88
12244: GO 12258
// Say ( un , DUSf-USsol-a-2 ) ;
12246: LD_VAR 0 1
12250: PPUSH
12251: LD_STRING DUSf-USsol-a-2
12253: PPUSH
12254: CALL_OW 88
// DialogueOff ;
12258: CALL_OW 7
// wait ( 0 0$2 ) ;
12262: LD_INT 70
12264: PPUSH
12265: CALL_OW 67
// isAlarm := true ;
12269: LD_ADDR_EXP 17
12273: PUSH
12274: LD_INT 1
12276: ST_TO_ADDR
// end ;
12277: PPOPN 1
12279: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12280: LD_EXP 17
12284: NOT
12285: PUSH
12286: LD_EXP 40
12290: PPUSH
12291: CALL_OW 302
12295: AND
12296: PUSH
12297: LD_EXP 40
12301: PPUSH
12302: CALL_OW 255
12306: PUSH
12307: LD_INT 2
12309: EQUAL
12310: AND
12311: PUSH
12312: LD_EXP 26
12316: AND
12317: PUSH
12318: LD_EXP 28
12322: NOT
12323: AND
12324: PUSH
12325: LD_EXP 27
12329: NOT
12330: AND
12331: PUSH
12332: LD_EXP 30
12336: NOT
12337: AND
12338: PUSH
12339: LD_EXP 40
12343: PPUSH
12344: LD_INT 165
12346: PPUSH
12347: CALL 18663 0 2
12351: AND
12352: IFFALSE 12484
12354: GO 12356
12356: DISABLE
// begin enable ;
12357: ENABLE
// InGameOn ;
12358: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12362: LD_EXP 40
12366: PPUSH
12367: LD_INT 5
12369: PPUSH
12370: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12374: LD_INT 165
12376: PPUSH
12377: LD_INT 5
12379: PPUSH
12380: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12384: LD_EXP 40
12388: PPUSH
12389: LD_INT 165
12391: PPUSH
12392: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12396: LD_INT 35
12398: PPUSH
12399: CALL_OW 67
// until IsInUnit ( Givi ) ;
12403: LD_EXP 40
12407: PPUSH
12408: CALL_OW 310
12412: IFFALSE 12396
// case Query ( GiviInLaundry ) of 1 :
12414: LD_STRING GiviInLaundry
12416: PPUSH
12417: CALL_OW 97
12421: PUSH
12422: LD_INT 1
12424: DOUBLE
12425: EQUAL
12426: IFTRUE 12430
12428: GO 12437
12430: POP
// SpawnGiviAsRussian ; 2 :
12431: CALL 1833 0 0
12435: GO 12449
12437: LD_INT 2
12439: DOUBLE
12440: EQUAL
12441: IFTRUE 12445
12443: GO 12448
12445: POP
// ; end ;
12446: GO 12449
12448: POP
// ComExitBuilding ( Givi ) ;
12449: LD_EXP 40
12453: PPUSH
12454: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12458: LD_EXP 40
12462: PPUSH
12463: LD_INT 2
12465: PPUSH
12466: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12470: LD_INT 165
12472: PPUSH
12473: LD_INT 3
12475: PPUSH
12476: CALL_OW 235
// InGameOff ;
12480: CALL_OW 9
// end ;
12484: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12485: LD_EXP 17
12489: NOT
12490: PUSH
12491: LD_EXP 28
12495: AND
12496: PUSH
12497: LD_EXP 40
12501: PPUSH
12502: CALL_OW 255
12506: PUSH
12507: LD_INT 2
12509: EQUAL
12510: AND
12511: PUSH
12512: LD_EXP 40
12516: PPUSH
12517: CALL_OW 248
12521: PUSH
12522: LD_INT 3
12524: EQUAL
12525: AND
12526: PUSH
12527: LD_EXP 40
12531: PPUSH
12532: LD_INT 119
12534: PPUSH
12535: CALL 18663 0 2
12539: AND
12540: PUSH
12541: LD_EXP 30
12545: NOT
12546: AND
12547: IFFALSE 12771
12549: GO 12551
12551: DISABLE
// begin InGameOn ;
12552: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12556: LD_EXP 40
12560: PPUSH
12561: LD_INT 3
12563: PPUSH
12564: CALL_OW 235
// ComEnterUnit ( Givi , ruLab ) ;
12568: LD_EXP 40
12572: PPUSH
12573: LD_INT 119
12575: PPUSH
12576: CALL_OW 120
// wait ( 0 0$1 ) ;
12580: LD_INT 35
12582: PPUSH
12583: CALL_OW 67
// DialogueOn ;
12587: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12591: LD_EXP 40
12595: PPUSH
12596: LD_STRING DG-Captive-1
12598: PPUSH
12599: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12603: LD_EXP 58
12607: PPUSH
12608: LD_STRING DCom-Captive-2
12610: PPUSH
12611: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12615: LD_EXP 40
12619: PPUSH
12620: LD_STRING DG-Captive-3
12622: PPUSH
12623: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12627: LD_EXP 58
12631: PPUSH
12632: LD_STRING DCom-Captive-4
12634: PPUSH
12635: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12639: LD_EXP 58
12643: PPUSH
12644: CALL_OW 64
// DialogueOff ;
12648: CALL_OW 7
// InGameOff ;
12652: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12656: LD_EXP 40
12660: PPUSH
12661: LD_INT 2
12663: PPUSH
12664: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12668: LD_EXP 40
12672: PPUSH
12673: CALL_OW 122
// if Aviradze then
12677: LD_EXP 49
12681: IFFALSE 12724
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12683: LD_ADDR_EXP 14
12687: PUSH
12688: LD_EXP 14
12692: PPUSH
12693: LD_EXP 49
12697: PPUSH
12698: CALL 64437 0 2
12702: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12703: LD_EXP 49
12707: PPUSH
12708: LD_INT 2
12710: PPUSH
12711: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12715: LD_EXP 49
12719: PPUSH
12720: CALL_OW 122
// end ; if Ibrahim then
12724: LD_EXP 42
12728: IFFALSE 12771
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12730: LD_ADDR_EXP 14
12734: PUSH
12735: LD_EXP 14
12739: PPUSH
12740: LD_EXP 42
12744: PPUSH
12745: CALL 64437 0 2
12749: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12750: LD_EXP 42
12754: PPUSH
12755: LD_INT 2
12757: PPUSH
12758: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12762: LD_EXP 42
12766: PPUSH
12767: CALL_OW 122
// end ; end ;
12771: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12772: LD_EXP 17
12776: NOT
12777: PUSH
12778: LD_EXP 27
12782: AND
12783: PUSH
12784: LD_EXP 39
12788: PPUSH
12789: CALL_OW 248
12793: PUSH
12794: LD_INT 3
12796: EQUAL
12797: AND
12798: PUSH
12799: LD_EXP 39
12803: PPUSH
12804: LD_INT 119
12806: PPUSH
12807: CALL 18663 0 2
12811: AND
12812: PUSH
12813: LD_EXP 30
12817: NOT
12818: AND
12819: IFFALSE 13081
12821: GO 12823
12823: DISABLE
// begin InGameOn ;
12824: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12828: LD_EXP 39
12832: PPUSH
12833: LD_INT 3
12835: PPUSH
12836: CALL_OW 235
// ComEnterUnit ( Heike , ruLab ) ;
12840: LD_EXP 39
12844: PPUSH
12845: LD_INT 119
12847: PPUSH
12848: CALL_OW 120
// wait ( 0 0$1 ) ;
12852: LD_INT 35
12854: PPUSH
12855: CALL_OW 67
// DialogueOn ;
12859: CALL_OW 6
// if Aviradze and Ibrahim then
12863: LD_EXP 49
12867: PUSH
12868: LD_EXP 42
12872: AND
12873: IFFALSE 12889
// Say ( Heike , DH-Captive-a-1 ) else
12875: LD_EXP 39
12879: PPUSH
12880: LD_STRING DH-Captive-a-1
12882: PPUSH
12883: CALL_OW 88
12887: GO 12901
// Say ( Heike , DH-Captive-a-b-1 ) ;
12889: LD_EXP 39
12893: PPUSH
12894: LD_STRING DH-Captive-a-b-1
12896: PPUSH
12897: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
12901: LD_EXP 58
12905: PPUSH
12906: LD_STRING DCom-Captive-a-2
12908: PPUSH
12909: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
12913: LD_EXP 39
12917: PPUSH
12918: LD_STRING DH-Captive-a-3
12920: PPUSH
12921: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
12925: LD_EXP 58
12929: PPUSH
12930: LD_STRING DCom-Captive-a-4
12932: PPUSH
12933: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
12937: LD_EXP 39
12941: PPUSH
12942: LD_STRING DH-Captive-a-5
12944: PPUSH
12945: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12949: LD_EXP 58
12953: PPUSH
12954: CALL_OW 64
// DialogueOff ;
12958: CALL_OW 7
// InGameOff ;
12962: CALL_OW 9
// SetSide ( Heike , 2 ) ;
12966: LD_EXP 39
12970: PPUSH
12971: LD_INT 2
12973: PPUSH
12974: CALL_OW 235
// ComExitBuilding ( Heike ) ;
12978: LD_EXP 39
12982: PPUSH
12983: CALL_OW 122
// if Aviradze then
12987: LD_EXP 49
12991: IFFALSE 13034
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12993: LD_ADDR_EXP 14
12997: PUSH
12998: LD_EXP 14
13002: PPUSH
13003: LD_EXP 49
13007: PPUSH
13008: CALL 64437 0 2
13012: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13013: LD_EXP 49
13017: PPUSH
13018: LD_INT 2
13020: PPUSH
13021: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13025: LD_EXP 49
13029: PPUSH
13030: CALL_OW 122
// end ; if Ibrahim then
13034: LD_EXP 42
13038: IFFALSE 13081
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13040: LD_ADDR_EXP 14
13044: PUSH
13045: LD_EXP 14
13049: PPUSH
13050: LD_EXP 42
13054: PPUSH
13055: CALL 64437 0 2
13059: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13060: LD_EXP 42
13064: PPUSH
13065: LD_INT 2
13067: PPUSH
13068: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13072: LD_EXP 42
13076: PPUSH
13077: CALL_OW 122
// end ; end ;
13081: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13082: LD_INT 2
13084: PUSH
13085: LD_INT 25
13087: PUSH
13088: LD_INT 32
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 25
13097: PUSH
13098: LD_INT 34
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: PPUSH
13110: CALL_OW 69
13114: IFFALSE 13126
13116: GO 13118
13118: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13119: LD_STRING M1-weapons-out
13121: PPUSH
13122: CALL_OW 604
13126: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not contactWithAmerican and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13127: LD_INT 2
13129: PPUSH
13130: LD_EXP 54
13134: PPUSH
13135: CALL_OW 292
13139: PUSH
13140: LD_EXP 39
13144: PPUSH
13145: LD_EXP 54
13149: PPUSH
13150: CALL_OW 296
13154: AND
13155: PUSH
13156: LD_EXP 25
13160: NOT
13161: AND
13162: PUSH
13163: LD_EXP 17
13167: NOT
13168: AND
13169: PUSH
13170: LD_EXP 30
13174: NOT
13175: AND
13176: IFFALSE 13925
13178: GO 13180
13180: DISABLE
13181: LD_INT 0
13183: PPUSH
13184: PPUSH
// begin DialogueOn ;
13185: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13189: LD_EXP 54
13193: PPUSH
13194: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13198: LD_EXP 54
13202: PPUSH
13203: LD_STRING DJy-Food-1
13205: PPUSH
13206: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13210: LD_EXP 39
13214: PPUSH
13215: LD_STRING DH-Food-2
13217: PPUSH
13218: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13222: LD_EXP 54
13226: PPUSH
13227: LD_STRING DJy-Food-3
13229: PPUSH
13230: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13234: LD_EXP 54
13238: PPUSH
13239: LD_STRING DJy-Food-4
13241: PPUSH
13242: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13246: LD_EXP 39
13250: PPUSH
13251: LD_STRING DH-Food-5
13253: PPUSH
13254: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13258: LD_EXP 54
13262: PPUSH
13263: LD_STRING DJy-Food-6
13265: PPUSH
13266: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13270: LD_EXP 54
13274: PPUSH
13275: LD_STRING DJy-Food-7
13277: PPUSH
13278: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13282: LD_EXP 54
13286: PPUSH
13287: LD_STRING DJy-Food-8
13289: PPUSH
13290: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13294: LD_EXP 39
13298: PPUSH
13299: LD_STRING DH-Food-9
13301: PPUSH
13302: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13306: LD_EXP 54
13310: PPUSH
13311: LD_STRING DJy-Food-10
13313: PPUSH
13314: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13318: LD_EXP 39
13322: PPUSH
13323: LD_STRING DH-Food-11
13325: PPUSH
13326: CALL_OW 88
// DialogueOff ;
13330: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13334: LD_STRING M3
13336: PPUSH
13337: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13341: LD_INT 5
13343: PPUSH
13344: LD_INT 215
13346: PPUSH
13347: LD_INT 117
13349: PPUSH
13350: LD_INT 0
13352: PPUSH
13353: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13357: LD_INT 215
13359: PPUSH
13360: LD_INT 118
13362: PPUSH
13363: LD_INT 2
13365: PPUSH
13366: LD_INT 6
13368: NEG
13369: PPUSH
13370: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13374: LD_INT 215
13376: PPUSH
13377: LD_INT 118
13379: PPUSH
13380: LD_INT 2
13382: PPUSH
13383: CALL_OW 331
// foodDelivered := false ;
13387: LD_ADDR_VAR 0 2
13391: PUSH
13392: LD_INT 0
13394: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13395: LD_INT 35
13397: PPUSH
13398: CALL_OW 67
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13402: LD_ADDR_VAR 0 1
13406: PUSH
13407: LD_EXP 14
13411: PUSH
13412: LD_EXP 39
13416: UNION
13417: PPUSH
13418: LD_INT 91
13420: PUSH
13421: LD_EXP 54
13425: PUSH
13426: LD_INT 6
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 25
13436: PUSH
13437: LD_INT 33
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 72
13452: PUSH
13453: FOR_IN
13454: IFFALSE 13654
// if Carry ( i ) then
13456: LD_VAR 0 1
13460: PPUSH
13461: CALL_OW 281
13465: IFFALSE 13652
// begin DialogueOn ;
13467: CALL_OW 6
// foodDelivered := true ;
13471: LD_ADDR_VAR 0 2
13475: PUSH
13476: LD_INT 1
13478: ST_TO_ADDR
// case i of Heike :
13479: LD_VAR 0 1
13483: PUSH
13484: LD_EXP 39
13488: DOUBLE
13489: EQUAL
13490: IFTRUE 13494
13492: GO 13509
13494: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13495: LD_EXP 39
13499: PPUSH
13500: LD_STRING DH-Food-12
13502: PPUSH
13503: CALL_OW 88
13507: GO 13635
13509: LD_EXP 44
13513: DOUBLE
13514: EQUAL
13515: IFTRUE 13519
13517: GO 13534
13519: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13520: LD_EXP 44
13524: PPUSH
13525: LD_STRING DK-Food-a-12
13527: PPUSH
13528: CALL_OW 88
13532: GO 13635
13534: LD_EXP 46
13538: DOUBLE
13539: EQUAL
13540: IFTRUE 13544
13542: GO 13559
13544: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13545: LD_EXP 46
13549: PPUSH
13550: LD_STRING DMar-Food-a-12
13552: PPUSH
13553: CALL_OW 88
13557: GO 13635
13559: LD_EXP 40
13563: DOUBLE
13564: EQUAL
13565: IFTRUE 13569
13567: GO 13584
13569: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13570: LD_EXP 40
13574: PPUSH
13575: LD_STRING DG-Food-a-14
13577: PPUSH
13578: CALL_OW 88
13582: GO 13635
13584: LD_EXP 41
13588: DOUBLE
13589: EQUAL
13590: IFTRUE 13594
13592: GO 13609
13594: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13595: LD_EXP 41
13599: PPUSH
13600: LD_STRING DM-Food-a-15
13602: PPUSH
13603: CALL_OW 88
13607: GO 13635
13609: LD_EXP 43
13613: DOUBLE
13614: EQUAL
13615: IFTRUE 13619
13617: GO 13634
13619: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13620: LD_EXP 43
13624: PPUSH
13625: LD_STRING DKam-Food-a-16
13627: PPUSH
13628: CALL_OW 88
13632: GO 13635
13634: POP
// SetCargo ( i , mat_cans , 0 ) ;
13635: LD_VAR 0 1
13639: PPUSH
13640: LD_INT 1
13642: PPUSH
13643: LD_INT 0
13645: PPUSH
13646: CALL_OW 290
// break ;
13650: GO 13654
// end ;
13652: GO 13453
13654: POP
13655: POP
// until foodDelivered ;
13656: LD_VAR 0 2
13660: IFFALSE 13395
// givenFood := true ;
13662: LD_ADDR_EXP 33
13666: PUSH
13667: LD_INT 1
13669: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13670: LD_EXP 54
13674: PPUSH
13675: LD_STRING DJy-Food-13
13677: PPUSH
13678: CALL_OW 88
// hasVirus := true ;
13682: LD_ADDR_EXP 31
13686: PUSH
13687: LD_INT 1
13689: ST_TO_ADDR
// if not americanContact then
13690: LD_EXP 10
13694: NOT
13695: IFFALSE 13745
// begin Say ( Heike , DH-Food-14 ) ;
13697: LD_EXP 39
13701: PPUSH
13702: LD_STRING DH-Food-14
13704: PPUSH
13705: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13709: LD_EXP 54
13713: PPUSH
13714: LD_STRING DJy-Food-15
13716: PPUSH
13717: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13721: LD_EXP 54
13725: PPUSH
13726: LD_STRING DJy-Food-16
13728: PPUSH
13729: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13733: LD_EXP 54
13737: PPUSH
13738: LD_STRING DJy-Food-17
13740: PPUSH
13741: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
13745: LD_STRING M3-out
13747: PPUSH
13748: CALL_OW 337
// DialogueOff ;
13752: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
13756: LD_EXP 54
13760: PPUSH
13761: LD_INT 1
13763: PPUSH
13764: LD_INT 10
13766: PPUSH
13767: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
13771: LD_EXP 54
13775: PPUSH
13776: LD_INT 95
13778: PPUSH
13779: LD_INT 17
13781: PPUSH
13782: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13786: LD_INT 35
13788: PPUSH
13789: CALL_OW 67
// if not HasTask ( Jerry ) then
13793: LD_EXP 54
13797: PPUSH
13798: CALL_OW 314
13802: NOT
13803: IFFALSE 13820
// ComMoveXY ( Jerry , 95 , 17 ) ;
13805: LD_EXP 54
13809: PPUSH
13810: LD_INT 95
13812: PPUSH
13813: LD_INT 17
13815: PPUSH
13816: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
13820: LD_EXP 54
13824: PPUSH
13825: LD_INT 95
13827: PPUSH
13828: LD_INT 17
13830: PPUSH
13831: CALL_OW 307
13835: IFFALSE 13786
// SetCargo ( Jerry , mat_cans , 0 ) ;
13837: LD_EXP 54
13841: PPUSH
13842: LD_INT 1
13844: PPUSH
13845: LD_INT 0
13847: PPUSH
13848: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
13852: LD_ADDR_EXP 51
13856: PUSH
13857: LD_EXP 51
13861: PPUSH
13862: LD_EXP 54
13866: PPUSH
13867: CALL 64437 0 2
13871: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
13872: LD_ADDR_VAR 0 1
13876: PUSH
13877: LD_INT 22
13879: PUSH
13880: LD_INT 4
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 23
13889: PUSH
13890: LD_INT 1
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PPUSH
13901: CALL_OW 69
13905: PUSH
13906: FOR_IN
13907: IFFALSE 13923
// SetLives ( i , 1000 ) ;
13909: LD_VAR 0 1
13913: PPUSH
13914: LD_INT 1000
13916: PPUSH
13917: CALL_OW 234
13921: GO 13906
13923: POP
13924: POP
// end ;
13925: PPOPN 2
13927: END
// every 0 0$2 trigger hasExplosions marked gameStartEvent do var un , tmp ;
13928: LD_EXP 6
13932: IFFALSE 14363
13934: GO 13936
13936: DISABLE
13937: LD_INT 0
13939: PPUSH
13940: PPUSH
// begin tmp := [ ] ;
13941: LD_ADDR_VAR 0 2
13945: PUSH
13946: EMPTY
13947: ST_TO_ADDR
// uc_side := 3 ;
13948: LD_ADDR_OWVAR 20
13952: PUSH
13953: LD_INT 3
13955: ST_TO_ADDR
// uc_nation := 3 ;
13956: LD_ADDR_OWVAR 21
13960: PUSH
13961: LD_INT 3
13963: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
13964: LD_INT 1
13966: PPUSH
13967: LD_INT 8
13969: PPUSH
13970: CALL_OW 381
// un := CreateHuman ;
13974: LD_ADDR_VAR 0 1
13978: PUSH
13979: CALL_OW 44
13983: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
13984: LD_VAR 0 1
13988: PPUSH
13989: LD_INT 173
13991: PPUSH
13992: LD_INT 104
13994: PPUSH
13995: LD_INT 0
13997: PPUSH
13998: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14002: LD_ADDR_VAR 0 2
14006: PUSH
14007: LD_VAR 0 2
14011: PPUSH
14012: LD_VAR 0 1
14016: PPUSH
14017: CALL 64437 0 2
14021: ST_TO_ADDR
// un := CreateHuman ;
14022: LD_ADDR_VAR 0 1
14026: PUSH
14027: CALL_OW 44
14031: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14032: LD_VAR 0 1
14036: PPUSH
14037: LD_INT 73
14039: PPUSH
14040: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14044: LD_ADDR_VAR 0 2
14048: PUSH
14049: LD_VAR 0 2
14053: PPUSH
14054: LD_VAR 0 1
14058: PPUSH
14059: CALL 64437 0 2
14063: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14064: LD_INT 35
14066: PPUSH
14067: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
14071: LD_EXP 44
14075: PPUSH
14076: CALL_OW 255
14080: PUSH
14081: LD_INT 2
14083: EQUAL
14084: PUSH
14085: LD_EXP 44
14089: PPUSH
14090: LD_INT 73
14092: PPUSH
14093: CALL_OW 296
14097: PUSH
14098: LD_INT 8
14100: LESS
14101: AND
14102: PUSH
14103: LD_VAR 0 2
14107: PPUSH
14108: LD_INT 101
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PPUSH
14118: CALL_OW 72
14122: AND
14123: IFFALSE 14064
// InGameOn ;
14125: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14129: LD_INT 73
14131: PPUSH
14132: CALL_OW 250
14136: PPUSH
14137: LD_INT 73
14139: PPUSH
14140: CALL_OW 251
14144: PPUSH
14145: LD_INT 2
14147: PPUSH
14148: LD_INT 9
14150: NEG
14151: PPUSH
14152: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14156: LD_INT 73
14158: PPUSH
14159: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14163: LD_EXP 44
14167: PPUSH
14168: LD_INT 73
14170: PPUSH
14171: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14175: LD_EXP 44
14179: PPUSH
14180: LD_STRING DK-Plastic-1
14182: PPUSH
14183: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14187: LD_EXP 44
14191: PPUSH
14192: LD_STRING DK-Plastic-2
14194: PPUSH
14195: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14199: LD_EXP 44
14203: PPUSH
14204: LD_INT 73
14206: PPUSH
14207: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14211: LD_INT 35
14213: PPUSH
14214: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
14218: LD_EXP 44
14222: PPUSH
14223: LD_INT 73
14225: PPUSH
14226: CALL_OW 296
14230: PUSH
14231: LD_INT 6
14233: LESS
14234: IFFALSE 14211
// ComHold ( Kaia ) ;
14236: LD_EXP 44
14240: PPUSH
14241: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14245: LD_VAR 0 2
14249: PUSH
14250: LD_INT 1
14252: ARRAY
14253: PPUSH
14254: LD_STRING DRum-Plastic-3
14256: PPUSH
14257: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14261: LD_VAR 0 2
14265: PUSH
14266: LD_INT 2
14268: ARRAY
14269: PPUSH
14270: LD_STRING DRum2-Plastic-4
14272: PPUSH
14273: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14277: LD_VAR 0 2
14281: PUSH
14282: LD_INT 1
14284: ARRAY
14285: PPUSH
14286: LD_STRING DRum-Plastic-5
14288: PPUSH
14289: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14293: LD_VAR 0 2
14297: PUSH
14298: LD_INT 2
14300: ARRAY
14301: PPUSH
14302: LD_STRING DRum2-Plastic-6
14304: PPUSH
14305: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14309: LD_EXP 44
14313: PPUSH
14314: LD_STRING DK-Plastic-7
14316: PPUSH
14317: CALL_OW 88
// InGameOff ;
14321: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14325: LD_INT 73
14327: PPUSH
14328: CALL_OW 250
14332: PPUSH
14333: LD_INT 73
14335: PPUSH
14336: CALL_OW 251
14340: PPUSH
14341: LD_INT 2
14343: PPUSH
14344: CALL_OW 331
// explosionsTakenByRussians := true ;
14348: LD_ADDR_EXP 21
14352: PUSH
14353: LD_INT 1
14355: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14356: LD_STRING ExplosivesInfo
14358: PPUSH
14359: CALL_OW 97
// end ;
14363: PPOPN 2
14365: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14366: LD_EXP 21
14370: PUSH
14371: LD_EXP 44
14375: PPUSH
14376: CALL_OW 255
14380: PUSH
14381: LD_INT 2
14383: EQUAL
14384: AND
14385: PUSH
14386: LD_EXP 44
14390: PPUSH
14391: LD_INT 61
14393: PPUSH
14394: CALL 18663 0 2
14398: AND
14399: PUSH
14400: LD_EXP 17
14404: NOT
14405: AND
14406: PUSH
14407: LD_EXP 30
14411: NOT
14412: AND
14413: IFFALSE 14569
14415: GO 14417
14417: DISABLE
// begin InGameOn ;
14418: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14422: LD_INT 61
14424: PPUSH
14425: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14429: LD_EXP 44
14433: PPUSH
14434: LD_INT 3
14436: PPUSH
14437: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14441: LD_EXP 44
14445: PPUSH
14446: LD_INT 61
14448: PPUSH
14449: CALL_OW 120
// wait ( 0 0$2 ) ;
14453: LD_INT 70
14455: PPUSH
14456: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14460: LD_EXP 44
14464: PPUSH
14465: LD_STRING DK-Plastic-8
14467: PPUSH
14468: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14472: LD_EXP 60
14476: PUSH
14477: LD_INT 1
14479: ARRAY
14480: PPUSH
14481: LD_STRING DRuMch-Plastic-9
14483: PPUSH
14484: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14488: LD_EXP 44
14492: PPUSH
14493: LD_STRING DK-Plastic-10
14495: PPUSH
14496: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14500: LD_EXP 60
14504: PUSH
14505: LD_INT 1
14507: ARRAY
14508: PPUSH
14509: LD_STRING DRuMch-Plastic-a-11
14511: PPUSH
14512: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14516: LD_EXP 44
14520: PPUSH
14521: LD_STRING DK-Plastic-a-12
14523: PPUSH
14524: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14528: LD_EXP 60
14532: PUSH
14533: LD_INT 1
14535: ARRAY
14536: PPUSH
14537: LD_STRING DRuMch-Plastic-a-13
14539: PPUSH
14540: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14544: LD_EXP 44
14548: PPUSH
14549: LD_INT 2
14551: PPUSH
14552: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14556: LD_EXP 44
14560: PPUSH
14561: CALL_OW 122
// InGameOff ;
14565: CALL_OW 9
// end ;
14569: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14570: LD_EXP 21
14574: PUSH
14575: LD_EXP 44
14579: PPUSH
14580: CALL_OW 255
14584: PUSH
14585: LD_INT 2
14587: EQUAL
14588: AND
14589: PUSH
14590: LD_EXP 44
14594: PPUSH
14595: LD_INT 196
14597: PPUSH
14598: CALL 18663 0 2
14602: AND
14603: PUSH
14604: LD_EXP 17
14608: NOT
14609: AND
14610: PUSH
14611: LD_EXP 30
14615: NOT
14616: AND
14617: IFFALSE 14949
14619: GO 14621
14621: DISABLE
// begin InGameOn ;
14622: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14626: LD_INT 196
14628: PPUSH
14629: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14633: LD_EXP 44
14637: PPUSH
14638: LD_INT 3
14640: PPUSH
14641: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14645: LD_EXP 44
14649: PPUSH
14650: LD_INT 196
14652: PPUSH
14653: CALL_OW 120
// wait ( 0 0$2 ) ;
14657: LD_INT 70
14659: PPUSH
14660: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14664: LD_EXP 44
14668: PPUSH
14669: LD_STRING DK-Plastic-8
14671: PPUSH
14672: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14676: LD_EXP 61
14680: PUSH
14681: LD_INT 1
14683: ARRAY
14684: PPUSH
14685: LD_STRING DRuMch-Plastic-9
14687: PPUSH
14688: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14692: LD_EXP 44
14696: PPUSH
14697: LD_STRING DK-Plastic-10
14699: PPUSH
14700: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14704: LD_EXP 61
14708: PUSH
14709: LD_INT 1
14711: ARRAY
14712: PPUSH
14713: LD_STRING DRuMch-Plastic-11
14715: PPUSH
14716: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14720: LD_EXP 44
14724: PPUSH
14725: LD_STRING DK-Plastic-12
14727: PPUSH
14728: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
14732: LD_EXP 44
14736: PPUSH
14737: LD_STRING DK-Plastic-13
14739: PPUSH
14740: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
14744: LD_EXP 61
14748: PUSH
14749: LD_INT 1
14751: ARRAY
14752: PPUSH
14753: LD_STRING DRuMch-Plastic-14
14755: PPUSH
14756: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
14760: LD_EXP 62
14764: PPUSH
14765: LD_INT 167
14767: PPUSH
14768: LD_INT 34
14770: PPUSH
14771: LD_INT 3
14773: PPUSH
14774: LD_INT 0
14776: PPUSH
14777: CALL 66577 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14781: LD_EXP 62
14785: PPUSH
14786: LD_INT 196
14788: PPUSH
14789: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14793: LD_INT 35
14795: PPUSH
14796: CALL_OW 67
// if not HasTask ( Stiopa ) then
14800: LD_EXP 62
14804: PPUSH
14805: CALL_OW 314
14809: NOT
14810: IFFALSE 14824
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14812: LD_EXP 62
14816: PPUSH
14817: LD_INT 196
14819: PPUSH
14820: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
14824: LD_EXP 62
14828: PPUSH
14829: CALL_OW 310
14833: IFFALSE 14793
// Say ( Stiopa , DSpn-Plastic-15 ) ;
14835: LD_EXP 62
14839: PPUSH
14840: LD_STRING DSpn-Plastic-15
14842: PPUSH
14843: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
14847: LD_EXP 63
14851: PPUSH
14852: LD_STRING DLr-Plastic-16
14854: PPUSH
14855: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
14859: LD_EXP 44
14863: PPUSH
14864: LD_STRING DK-Plastic-17
14866: PPUSH
14867: CALL_OW 88
// wait ( 0 0$0.3 ) ;
14871: LD_INT 10
14873: PPUSH
14874: CALL_OW 67
// SetSide ( Kaia , 2 ) ;
14878: LD_EXP 44
14882: PPUSH
14883: LD_INT 2
14885: PPUSH
14886: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14890: LD_EXP 44
14894: PPUSH
14895: CALL_OW 122
// InGameOff ;
14899: CALL_OW 9
// explosionsTakenByRussians := false ;
14903: LD_ADDR_EXP 21
14907: PUSH
14908: LD_INT 0
14910: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
14911: LD_INT 170
14913: PPUSH
14914: LD_INT 28
14916: PPUSH
14917: LD_INT 2
14919: PPUSH
14920: LD_INT 6
14922: NEG
14923: PPUSH
14924: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
14928: LD_INT 170
14930: PPUSH
14931: LD_INT 28
14933: PPUSH
14934: LD_INT 2
14936: PPUSH
14937: CALL_OW 331
// knowWhereExplosivesAre := true ;
14941: LD_ADDR_EXP 34
14945: PUSH
14946: LD_INT 1
14948: ST_TO_ADDR
// end ;
14949: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
14950: LD_EXP 34
14954: PUSH
14955: LD_EXP 44
14959: PPUSH
14960: CALL_OW 255
14964: PUSH
14965: LD_INT 2
14967: EQUAL
14968: AND
14969: PUSH
14970: LD_EXP 44
14974: PPUSH
14975: LD_INT 195
14977: PPUSH
14978: CALL 18663 0 2
14982: AND
14983: PUSH
14984: LD_EXP 17
14988: NOT
14989: AND
14990: PUSH
14991: LD_EXP 30
14995: NOT
14996: AND
14997: IFFALSE 15096
14999: GO 15001
15001: DISABLE
// begin InGameOn ;
15002: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15006: LD_EXP 44
15010: PPUSH
15011: LD_INT 3
15013: PPUSH
15014: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15018: LD_EXP 44
15022: PPUSH
15023: LD_INT 195
15025: PPUSH
15026: CALL_OW 120
// wait ( 0 0$1 ) ;
15030: LD_INT 35
15032: PPUSH
15033: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15037: LD_EXP 44
15041: PPUSH
15042: LD_STRING DK-Plastic-18
15044: PPUSH
15045: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15049: LD_STRING ExplosivesInfoUsage
15051: PPUSH
15052: CALL_OW 97
// SetSide ( Kaia , 2 ) ;
15056: LD_EXP 44
15060: PPUSH
15061: LD_INT 2
15063: PPUSH
15064: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15068: LD_EXP 44
15072: PPUSH
15073: CALL_OW 122
// InGameOff ;
15077: CALL_OW 9
// hasExplosionCollected := true ;
15081: LD_ADDR_EXP 23
15085: PUSH
15086: LD_INT 1
15088: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15089: LD_STRING M1-explosive-out
15091: PPUSH
15092: CALL_OW 337
// end ;
15096: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15097: LD_EXP 23
15101: PUSH
15102: LD_EXP 17
15106: NOT
15107: AND
15108: PUSH
15109: LD_EXP 30
15113: NOT
15114: AND
15115: IFFALSE 15290
15117: GO 15119
15119: DISABLE
15120: LD_INT 0
15122: PPUSH
15123: PPUSH
// begin for i in importantBuildingsList do
15124: LD_ADDR_VAR 0 1
15128: PUSH
15129: LD_EXP 35
15133: PUSH
15134: FOR_IN
15135: IFFALSE 15151
// MarkBuilding ( i , true ) ;
15137: LD_VAR 0 1
15141: PPUSH
15142: LD_INT 1
15144: PPUSH
15145: CALL 19037 0 2
15149: GO 15134
15151: POP
15152: POP
// repeat wait ( 0 0$1 ) ;
15153: LD_INT 35
15155: PPUSH
15156: CALL_OW 67
// for i in importantBuildingsList do
15160: LD_ADDR_VAR 0 1
15164: PUSH
15165: LD_EXP 35
15169: PUSH
15170: FOR_IN
15171: IFFALSE 15281
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15173: LD_EXP 39
15177: PUSH
15178: LD_EXP 14
15182: UNION
15183: PPUSH
15184: LD_INT 22
15186: PUSH
15187: LD_INT 2
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 21
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 91
15206: PUSH
15207: LD_VAR 0 1
15211: PUSH
15212: LD_INT 6
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: LIST
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: LIST
15224: PPUSH
15225: CALL_OW 72
15229: IFFALSE 15279
// begin CenterNowOnUnits ( i ) ;
15231: LD_VAR 0 1
15235: PPUSH
15236: CALL_OW 87
// PlaceExplosives ( i ) ;
15240: LD_VAR 0 1
15244: PPUSH
15245: CALL 18934 0 1
// MarkBuilding ( i , false ) ;
15249: LD_VAR 0 1
15253: PPUSH
15254: LD_INT 0
15256: PPUSH
15257: CALL 19037 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15261: LD_ADDR_EXP 35
15265: PUSH
15266: LD_EXP 35
15270: PUSH
15271: LD_VAR 0 1
15275: DIFF
15276: ST_TO_ADDR
// continue ;
15277: GO 15170
// end ; end ;
15279: GO 15170
15281: POP
15282: POP
// until not importantBuildingsList ;
15283: LD_EXP 35
15287: NOT
15288: IFFALSE 15153
// end ;
15290: PPOPN 2
15292: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15293: LD_EXP 14
15297: PPUSH
15298: LD_INT 22
15300: PUSH
15301: LD_INT 2
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 95
15310: PUSH
15311: LD_INT 23
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PPUSH
15322: CALL_OW 72
15326: PUSH
15327: LD_EXP 39
15331: PPUSH
15332: CALL_OW 302
15336: AND
15337: PUSH
15338: LD_EXP 30
15342: NOT
15343: AND
15344: IFFALSE 15372
15346: GO 15348
15348: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15349: LD_EXP 39
15353: PPUSH
15354: LD_STRING DH-End-1
15356: PPUSH
15357: CALL_OW 88
// if not activeExplosives then
15361: LD_EXP 36
15365: NOT
15366: IFFALSE 15372
// Explode ;
15368: CALL 21551 0 0
// end ;
15372: END
// function SayHEmpty ( ) ; begin
15373: LD_INT 0
15375: PPUSH
// case rand ( 1 , 3 ) of 1 :
15376: LD_INT 1
15378: PPUSH
15379: LD_INT 3
15381: PPUSH
15382: CALL_OW 12
15386: PUSH
15387: LD_INT 1
15389: DOUBLE
15390: EQUAL
15391: IFTRUE 15395
15393: GO 15410
15395: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15396: LD_EXP 39
15400: PPUSH
15401: LD_STRING DH-Empty-1
15403: PPUSH
15404: CALL_OW 88
15408: GO 15457
15410: LD_INT 2
15412: DOUBLE
15413: EQUAL
15414: IFTRUE 15418
15416: GO 15433
15418: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15419: LD_EXP 39
15423: PPUSH
15424: LD_STRING DH-Empty-2
15426: PPUSH
15427: CALL_OW 88
15431: GO 15457
15433: LD_INT 3
15435: DOUBLE
15436: EQUAL
15437: IFTRUE 15441
15439: GO 15456
15441: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15442: LD_EXP 39
15446: PPUSH
15447: LD_STRING DH-Empty-3
15449: PPUSH
15450: CALL_OW 88
15454: GO 15457
15456: POP
// end ;
15457: LD_VAR 0 1
15461: RET
// function SayHVisited ( ) ; begin
15462: LD_INT 0
15464: PPUSH
// case rand ( 1 , 3 ) of 1 :
15465: LD_INT 1
15467: PPUSH
15468: LD_INT 3
15470: PPUSH
15471: CALL_OW 12
15475: PUSH
15476: LD_INT 1
15478: DOUBLE
15479: EQUAL
15480: IFTRUE 15484
15482: GO 15499
15484: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15485: LD_EXP 39
15489: PPUSH
15490: LD_STRING DH-Visited-1
15492: PPUSH
15493: CALL_OW 88
15497: GO 15546
15499: LD_INT 2
15501: DOUBLE
15502: EQUAL
15503: IFTRUE 15507
15505: GO 15522
15507: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15508: LD_EXP 39
15512: PPUSH
15513: LD_STRING DH-Visited-2
15515: PPUSH
15516: CALL_OW 88
15520: GO 15546
15522: LD_INT 3
15524: DOUBLE
15525: EQUAL
15526: IFTRUE 15530
15528: GO 15545
15530: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15531: LD_EXP 39
15535: PPUSH
15536: LD_STRING DH-Visited-3
15538: PPUSH
15539: CALL_OW 88
15543: GO 15546
15545: POP
// end ;
15546: LD_VAR 0 1
15550: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15551: LD_EXP 17
15555: NOT
15556: PUSH
15557: LD_EXP 15
15561: AND
15562: PUSH
15563: LD_EXP 39
15567: PPUSH
15568: CALL_OW 255
15572: PUSH
15573: LD_INT 2
15575: EQUAL
15576: AND
15577: PUSH
15578: LD_EXP 39
15582: PPUSH
15583: CALL_OW 302
15587: AND
15588: PUSH
15589: LD_EXP 39
15593: PPUSH
15594: CALL_OW 316
15598: AND
15599: PUSH
15600: LD_EXP 30
15604: NOT
15605: AND
15606: IFFALSE 15672
15608: GO 15610
15610: DISABLE
15611: LD_INT 0
15613: PPUSH
// begin enable ;
15614: ENABLE
// for i in entranceAllowedList do
15615: LD_ADDR_VAR 0 1
15619: PUSH
15620: LD_EXP 15
15624: PUSH
15625: FOR_IN
15626: IFFALSE 15670
// if InEntrance ( Heike , i ) then
15628: LD_EXP 39
15632: PPUSH
15633: LD_VAR 0 1
15637: PPUSH
15638: CALL 18663 0 2
15642: IFFALSE 15668
// begin disable ( entranceEvent ) ;
15644: LD_INT 1
15646: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15647: LD_VAR 0 1
15651: PPUSH
15652: CALL 15675 0 1
// wait ( 0 0$3 ) ;
15656: LD_INT 105
15658: PPUSH
15659: CALL_OW 67
// enable ( entranceEvent ) ;
15663: LD_INT 1
15665: ENABLE_MARKED
// break ;
15666: GO 15670
// end ;
15668: GO 15625
15670: POP
15671: POP
// end ;
15672: PPOPN 1
15674: END
// function HeikeEnterBuilding ( building ) ; var tmp ; begin
15675: LD_INT 0
15677: PPUSH
15678: PPUSH
// if not building then
15679: LD_VAR 0 1
15683: NOT
15684: IFFALSE 15688
// exit ;
15686: GO 18160
// if building in entranceVisitedList then
15688: LD_VAR 0 1
15692: PUSH
15693: LD_EXP 16
15697: IN
15698: IFFALSE 15706
// begin SayHVisited ( ) ;
15700: CALL 15462 0 0
// exit ;
15704: GO 18160
// end ; case Query ( EnterBuilding ) of 1 :
15706: LD_STRING EnterBuilding
15708: PPUSH
15709: CALL_OW 97
15713: PUSH
15714: LD_INT 1
15716: DOUBLE
15717: EQUAL
15718: IFTRUE 15722
15720: GO 15725
15722: POP
// ; 2 :
15723: GO 15739
15725: LD_INT 2
15727: DOUBLE
15728: EQUAL
15729: IFTRUE 15733
15731: GO 15738
15733: POP
// exit ; end ;
15734: GO 18160
15736: GO 15739
15738: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
15739: LD_ADDR_EXP 16
15743: PUSH
15744: LD_EXP 16
15748: PPUSH
15749: LD_VAR 0 1
15753: PPUSH
15754: CALL 64437 0 2
15758: ST_TO_ADDR
// InGameOn ;
15759: CALL_OW 8
// SetSide ( Heike , 5 ) ;
15763: LD_EXP 39
15767: PPUSH
15768: LD_INT 5
15770: PPUSH
15771: CALL_OW 235
// SetSide ( building , 5 ) ;
15775: LD_VAR 0 1
15779: PPUSH
15780: LD_INT 5
15782: PPUSH
15783: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
15787: LD_EXP 39
15791: PPUSH
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 120
// wait ( 0 0$3 ) ;
15801: LD_INT 105
15803: PPUSH
15804: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
15808: LD_ADDR_VAR 0 3
15812: PUSH
15813: LD_INT 165
15815: PUSH
15816: LD_INT 106
15818: PUSH
15819: LD_INT 135
15821: PUSH
15822: LD_INT 162
15824: PUSH
15825: LD_INT 61
15827: PUSH
15828: LD_INT 109
15830: PUSH
15831: LD_INT 169
15833: PUSH
15834: LD_INT 13
15836: PUSH
15837: LD_INT 147
15839: PUSH
15840: LD_INT 137
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: ST_TO_ADDR
// if not building in tmp then
15855: LD_VAR 0 1
15859: PUSH
15860: LD_VAR 0 3
15864: IN
15865: NOT
15866: IFFALSE 15874
// SayHEmpty ( ) else
15868: CALL 15373 0 0
15872: GO 18123
// case building of laundry :
15874: LD_VAR 0 1
15878: PUSH
15879: LD_INT 165
15881: DOUBLE
15882: EQUAL
15883: IFTRUE 15887
15885: GO 15991
15887: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
15888: LD_EXP 26
15892: PUSH
15893: LD_EXP 27
15897: NOT
15898: AND
15899: PUSH
15900: LD_EXP 28
15904: NOT
15905: AND
15906: IFFALSE 15961
// begin case Query ( HeikeInLaundry ) of 1 :
15908: LD_STRING HeikeInLaundry
15910: PPUSH
15911: CALL_OW 97
15915: PUSH
15916: LD_INT 1
15918: DOUBLE
15919: EQUAL
15920: IFTRUE 15924
15922: GO 15931
15924: POP
// SpawnHeikeAsRussian ; 2 :
15925: CALL 1732 0 0
15929: GO 15959
15931: LD_INT 2
15933: DOUBLE
15934: EQUAL
15935: IFTRUE 15939
15937: GO 15958
15939: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
15940: LD_ADDR_EXP 16
15944: PUSH
15945: LD_EXP 16
15949: PUSH
15950: LD_VAR 0 1
15954: DIFF
15955: ST_TO_ADDR
15956: GO 15959
15958: POP
// end else
15959: GO 15989
// begin entranceVisitedList := entranceVisitedList diff building ;
15961: LD_ADDR_EXP 16
15965: PUSH
15966: LD_EXP 16
15970: PUSH
15971: LD_VAR 0 1
15975: DIFF
15976: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
15977: LD_EXP 39
15981: PPUSH
15982: LD_STRING DH-Locked
15984: PPUSH
15985: CALL_OW 88
// end ; end ; dougBar :
15989: GO 18123
15991: LD_INT 106
15993: DOUBLE
15994: EQUAL
15995: IFTRUE 15999
15997: GO 16351
15999: POP
// begin if contactWithAmerican and americanContact then
16000: LD_EXP 25
16004: PUSH
16005: LD_EXP 10
16009: AND
16010: IFFALSE 16074
// begin Say ( Heike , DH-Escort-a-1 ) ;
16012: LD_EXP 39
16016: PPUSH
16017: LD_STRING DH-Escort-a-1
16019: PPUSH
16020: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16024: LD_EXP 53
16028: PPUSH
16029: LD_STRING DCa-Escort-a-2
16031: PPUSH
16032: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16036: LD_EXP 53
16040: PPUSH
16041: LD_STRING DCa-Escort-a-3
16043: PPUSH
16044: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16048: LD_EXP 39
16052: PPUSH
16053: LD_STRING DH-Escort-a-4
16055: PPUSH
16056: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16060: LD_EXP 39
16064: PPUSH
16065: LD_STRING DH-Escort-a-5
16067: PPUSH
16068: CALL_OW 88
// end else
16072: GO 16308
// if contactWithAmerican then
16074: LD_EXP 25
16078: IFFALSE 16118
// begin Say ( Heike , DH-Escort-b-1 ) ;
16080: LD_EXP 39
16084: PPUSH
16085: LD_STRING DH-Escort-b-1
16087: PPUSH
16088: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16092: LD_EXP 53
16096: PPUSH
16097: LD_STRING DCa-Escort-b-2
16099: PPUSH
16100: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16104: LD_EXP 53
16108: PPUSH
16109: LD_STRING DCa-Escort-b-3
16111: PPUSH
16112: CALL_OW 88
// end else
16116: GO 16308
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16118: LD_EXP 53
16122: PPUSH
16123: LD_STRING DCa-Deal-a-1
16125: PPUSH
16126: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16130: LD_EXP 53
16134: PPUSH
16135: LD_STRING DCa-Deal-a-2
16137: PPUSH
16138: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16142: LD_EXP 39
16146: PPUSH
16147: LD_STRING DH-Deal-a-3
16149: PPUSH
16150: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16154: LD_EXP 53
16158: PPUSH
16159: LD_STRING DCa-Deal-a-4
16161: PPUSH
16162: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16166: LD_EXP 39
16170: PPUSH
16171: LD_STRING DH-Deal-a-5
16173: PPUSH
16174: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16178: LD_EXP 53
16182: PPUSH
16183: LD_STRING DCa-Deal-a-6
16185: PPUSH
16186: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16190: LD_EXP 53
16194: PPUSH
16195: LD_STRING DCa-Deal-a-7
16197: PPUSH
16198: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16202: LD_EXP 53
16206: PPUSH
16207: LD_STRING DCa-Deal-a-8
16209: PPUSH
16210: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16214: LD_EXP 53
16218: PPUSH
16219: LD_STRING DCa-Deal-a-9
16221: PPUSH
16222: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16226: LD_EXP 53
16230: PPUSH
16231: LD_STRING DCa-Deal-a-10
16233: PPUSH
16234: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16238: LD_EXP 53
16242: PPUSH
16243: LD_STRING DCa-Deal-a-11
16245: PPUSH
16246: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16250: LD_INT 10
16252: PPUSH
16253: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16257: LD_EXP 53
16261: PPUSH
16262: LD_STRING DCa-Deal-a-12
16264: PPUSH
16265: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16269: LD_EXP 39
16273: PPUSH
16274: LD_STRING DH-Deal-a-13
16276: PPUSH
16277: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16281: LD_EXP 39
16285: PPUSH
16286: LD_STRING DH-Deal-a-14
16288: PPUSH
16289: CALL_OW 88
// contactWithAmerican := true ;
16293: LD_ADDR_EXP 25
16297: PUSH
16298: LD_INT 1
16300: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16301: LD_STRING M1-american-out
16303: PPUSH
16304: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16308: LD_EXP 53
16312: PPUSH
16313: LD_INT 2
16315: PPUSH
16316: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16320: LD_ADDR_EXP 14
16324: PUSH
16325: LD_EXP 14
16329: PPUSH
16330: LD_EXP 53
16334: PPUSH
16335: CALL 64437 0 2
16339: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16340: LD_EXP 53
16344: PPUSH
16345: CALL_OW 122
// end ; usLab :
16349: GO 18123
16351: LD_INT 135
16353: DOUBLE
16354: EQUAL
16355: IFTRUE 16359
16357: GO 16675
16359: POP
// begin if hasSniperRifle then
16360: LD_EXP 11
16364: IFFALSE 16673
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16366: LD_EXP 44
16370: PPUSH
16371: CALL_OW 302
16375: PUSH
16376: LD_EXP 44
16380: PUSH
16381: LD_EXP 14
16385: IN
16386: AND
16387: PUSH
16388: LD_EXP 44
16392: PPUSH
16393: CALL_OW 255
16397: PUSH
16398: LD_INT 2
16400: EQUAL
16401: AND
16402: IFFALSE 16647
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16404: LD_EXP 39
16408: PPUSH
16409: LD_EXP 44
16413: PPUSH
16414: CALL_OW 296
16418: PUSH
16419: LD_INT 10
16421: GREATER
16422: IFFALSE 16447
// begin Query ( KaiaDistance ) ;
16424: LD_STRING KaiaDistance
16426: PPUSH
16427: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16431: LD_ADDR_EXP 16
16435: PUSH
16436: LD_EXP 16
16440: PUSH
16441: LD_INT 135
16443: DIFF
16444: ST_TO_ADDR
// end else
16445: GO 16645
// begin SetSide ( Kaia , 5 ) ;
16447: LD_EXP 44
16451: PPUSH
16452: LD_INT 5
16454: PPUSH
16455: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16459: LD_EXP 44
16463: PPUSH
16464: LD_INT 135
16466: PPUSH
16467: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16471: LD_INT 35
16473: PPUSH
16474: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16478: LD_EXP 44
16482: PPUSH
16483: CALL_OW 310
16487: IFFALSE 16471
// Say ( Kaia , DK-Sniper-1 ) ;
16489: LD_EXP 44
16493: PPUSH
16494: LD_STRING DK-Sniper-1
16496: PPUSH
16497: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16501: LD_EXP 44
16505: PPUSH
16506: CALL_OW 257
16510: PUSH
16511: LD_INT 34
16513: EQUAL
16514: PUSH
16515: LD_EXP 41
16519: PUSH
16520: LD_EXP 14
16524: IN
16525: AND
16526: PUSH
16527: LD_EXP 41
16531: PPUSH
16532: CALL_OW 302
16536: AND
16537: IFFALSE 16565
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16539: LD_EXP 44
16543: PPUSH
16544: LD_STRING DK-Sniper-a-2
16546: PPUSH
16547: CALL_OW 88
// SetClass ( Mike , class_hunter ) ;
16551: LD_EXP 41
16555: PPUSH
16556: LD_INT 32
16558: PPUSH
16559: CALL_OW 336
// end else
16563: GO 16624
// begin Say ( Kaia , DK-Sniper-2 ) ;
16565: LD_EXP 44
16569: PPUSH
16570: LD_STRING DK-Sniper-2
16572: PPUSH
16573: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16577: LD_EXP 44
16581: PPUSH
16582: LD_INT 32
16584: PPUSH
16585: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16589: LD_EXP 46
16593: PPUSH
16594: CALL_OW 302
16598: PUSH
16599: LD_EXP 46
16603: PUSH
16604: LD_EXP 14
16608: IN
16609: AND
16610: IFFALSE 16624
// Say ( Markov , DMar-Sniper-3 ) ;
16612: LD_EXP 46
16616: PPUSH
16617: LD_STRING DMar-Sniper-3
16619: PPUSH
16620: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16624: LD_EXP 44
16628: PPUSH
16629: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16633: LD_EXP 44
16637: PPUSH
16638: LD_INT 2
16640: PPUSH
16641: CALL_OW 235
// end ; end else
16645: GO 16673
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16647: LD_ADDR_EXP 16
16651: PUSH
16652: LD_EXP 16
16656: PUSH
16657: LD_INT 135
16659: DIFF
16660: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16661: LD_EXP 39
16665: PPUSH
16666: LD_STRING DH-Locked
16668: PPUSH
16669: CALL_OW 88
// end ; end ; end ; drugsLab :
16673: GO 18123
16675: LD_INT 162
16677: DOUBLE
16678: EQUAL
16679: IFTRUE 16683
16681: GO 16816
16683: POP
// begin if hasStimDrugs then
16684: LD_EXP 9
16688: IFFALSE 16802
// begin wait ( 0 0$1 ) ;
16690: LD_INT 35
16692: PPUSH
16693: CALL_OW 67
// if not hasStimDrugsCollected then
16697: LD_EXP 24
16701: NOT
16702: IFFALSE 16744
// begin Say ( Heike , DH-Lab-1 ) ;
16704: LD_EXP 39
16708: PPUSH
16709: LD_STRING DH-Lab-1
16711: PPUSH
16712: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
16716: LD_INT 5
16718: PPUSH
16719: LD_INT 2
16721: PPUSH
16722: LD_INT 2
16724: PPUSH
16725: CALL_OW 322
// hasStimDrugsCollected := true ;
16729: LD_ADDR_EXP 24
16733: PUSH
16734: LD_INT 1
16736: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
16737: LD_STRING M1-drugs-out
16739: PPUSH
16740: CALL_OW 604
// end ; if not hasExplosionCollected then
16744: LD_EXP 23
16748: NOT
16749: IFFALSE 16767
// entranceVisitedList := entranceVisitedList diff drugsLab else
16751: LD_ADDR_EXP 16
16755: PUSH
16756: LD_EXP 16
16760: PUSH
16761: LD_INT 162
16763: DIFF
16764: ST_TO_ADDR
16765: GO 16800
// begin wait ( 0 0$3 ) ;
16767: LD_INT 105
16769: PPUSH
16770: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
16774: LD_EXP 39
16778: PPUSH
16779: LD_STRING DH-Lab-2
16781: PPUSH
16782: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
16786: LD_STRING M1-drugsLab-out
16788: PPUSH
16789: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
16793: LD_INT 162
16795: PPUSH
16796: CALL 18934 0 1
// end ; end else
16800: GO 16814
// Say ( Heike , DH-Locked ) ;
16802: LD_EXP 39
16806: PPUSH
16807: LD_STRING DH-Locked
16809: PPUSH
16810: CALL_OW 88
// end ; ruFac :
16814: GO 18123
16816: LD_INT 61
16818: DOUBLE
16819: EQUAL
16820: IFTRUE 16824
16822: GO 16934
16824: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
16825: LD_EXP 46
16829: PPUSH
16830: CALL_OW 302
16834: PUSH
16835: LD_EXP 46
16839: PUSH
16840: LD_EXP 14
16844: IN
16845: NOT
16846: AND
16847: IFFALSE 16928
// begin Say ( Heike , DH-Krastyo-1 ) ;
16849: LD_EXP 39
16853: PPUSH
16854: LD_STRING DH-Krastyo-1
16856: PPUSH
16857: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
16861: LD_EXP 46
16865: PPUSH
16866: LD_STRING DMar-Krastyo-2
16868: PPUSH
16869: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
16873: LD_EXP 46
16877: PPUSH
16878: LD_STRING DMar-Krastyo-3
16880: PPUSH
16881: CALL_OW 88
// SetSide ( Markov , 2 ) ;
16885: LD_EXP 46
16889: PPUSH
16890: LD_INT 2
16892: PPUSH
16893: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
16897: LD_ADDR_EXP 14
16901: PUSH
16902: LD_EXP 14
16906: PPUSH
16907: LD_EXP 46
16911: PPUSH
16912: CALL 64437 0 2
16916: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
16917: LD_EXP 46
16921: PPUSH
16922: CALL_OW 122
// end else
16926: GO 16932
// SayHEmpty ( ) ;
16928: CALL 15373 0 0
// end ; ruBarKam :
16932: GO 18123
16934: LD_INT 109
16936: DOUBLE
16937: EQUAL
16938: IFTRUE 16942
16940: GO 17089
16942: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
16943: LD_EXP 43
16947: PPUSH
16948: CALL_OW 302
16952: PUSH
16953: LD_EXP 43
16957: PUSH
16958: LD_EXP 14
16962: IN
16963: NOT
16964: AND
16965: IFFALSE 17083
// begin Say ( Heike , DH-Kamil-1 ) ;
16967: LD_EXP 39
16971: PPUSH
16972: LD_STRING DH-Kamil-1
16974: PPUSH
16975: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
16979: LD_EXP 43
16983: PPUSH
16984: LD_STRING DKam-Kamil-2
16986: PPUSH
16987: CALL_OW 88
// if IsOk ( Sophia ) then
16991: LD_EXP 45
16995: PPUSH
16996: CALL_OW 302
17000: IFFALSE 17040
// if Sophia in heikeSquad then
17002: LD_EXP 45
17006: PUSH
17007: LD_EXP 14
17011: IN
17012: IFFALSE 17028
// Say ( Kamil , DKam-Kamil-a-3 ) else
17014: LD_EXP 43
17018: PPUSH
17019: LD_STRING DKam-Kamil-a-3
17021: PPUSH
17022: CALL_OW 88
17026: GO 17040
// Say ( Kamil , DKam-Kamil-3 ) ;
17028: LD_EXP 43
17032: PPUSH
17033: LD_STRING DKam-Kamil-3
17035: PPUSH
17036: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17040: LD_EXP 43
17044: PPUSH
17045: LD_INT 2
17047: PPUSH
17048: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17052: LD_ADDR_EXP 14
17056: PUSH
17057: LD_EXP 14
17061: PPUSH
17062: LD_EXP 43
17066: PPUSH
17067: CALL 64437 0 2
17071: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17072: LD_EXP 43
17076: PPUSH
17077: CALL_OW 122
// end else
17081: GO 17087
// SayHEmpty ( ) ;
17083: CALL 15373 0 0
// end ; ruOutpost1 :
17087: GO 18123
17089: LD_INT 169
17091: DOUBLE
17092: EQUAL
17093: IFTRUE 17097
17095: GO 17334
17097: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17098: LD_EXP 48
17102: PPUSH
17103: CALL_OW 302
17107: PUSH
17108: LD_EXP 48
17112: PUSH
17113: LD_EXP 14
17117: IN
17118: NOT
17119: AND
17120: IFFALSE 17328
// begin if hasMethanol then
17122: LD_EXP 13
17126: IFFALSE 17257
// begin Say ( Heike , DH-Kurt-1 ) ;
17128: LD_EXP 39
17132: PPUSH
17133: LD_STRING DH-Kurt-1
17135: PPUSH
17136: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17140: LD_EXP 48
17144: PPUSH
17145: LD_STRING DKs-Kurt-2
17147: PPUSH
17148: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17152: LD_EXP 40
17156: PPUSH
17157: LD_INT 169
17159: PPUSH
17160: CALL_OW 296
17164: PUSH
17165: LD_INT 10
17167: LESS
17168: PUSH
17169: LD_EXP 40
17173: PUSH
17174: LD_EXP 14
17178: IN
17179: AND
17180: IFFALSE 17255
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17182: LD_EXP 40
17186: PPUSH
17187: LD_INT 100
17189: PPUSH
17190: LD_INT 37
17192: PPUSH
17193: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17197: LD_EXP 40
17201: PPUSH
17202: LD_INT 169
17204: PPUSH
17205: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17209: LD_INT 35
17211: PPUSH
17212: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17216: LD_EXP 40
17220: PPUSH
17221: LD_INT 169
17223: PPUSH
17224: CALL_OW 296
17228: PUSH
17229: LD_INT 7
17231: LESS
17232: IFFALSE 17209
// Say ( Givi , DG-Kurt-3 ) ;
17234: LD_EXP 40
17238: PPUSH
17239: LD_STRING DG-Kurt-3
17241: PPUSH
17242: CALL_OW 88
// ComStop ( Givi ) ;
17246: LD_EXP 40
17250: PPUSH
17251: CALL_OW 141
// end ; end else
17255: GO 17285
// begin Say ( Heike , DH-Kurt-1 ) ;
17257: LD_EXP 39
17261: PPUSH
17262: LD_STRING DH-Kurt-1
17264: PPUSH
17265: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17269: LD_EXP 48
17273: PPUSH
17274: LD_STRING DKs-Kurt-2
17276: PPUSH
17277: CALL_OW 88
// SpawnAdditionalRuGuards ;
17281: CALL 3500 0 0
// end ; SetSide ( Kurt , 2 ) ;
17285: LD_EXP 48
17289: PPUSH
17290: LD_INT 2
17292: PPUSH
17293: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17297: LD_ADDR_EXP 14
17301: PUSH
17302: LD_EXP 14
17306: PPUSH
17307: LD_EXP 48
17311: PPUSH
17312: CALL 64437 0 2
17316: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17317: LD_EXP 48
17321: PPUSH
17322: CALL_OW 122
// end else
17326: GO 17332
// SayHEmpty ( ) ;
17328: CALL 15373 0 0
// end ; ruOutpostBar :
17332: GO 18123
17334: LD_INT 13
17336: DOUBLE
17337: EQUAL
17338: IFTRUE 17342
17340: GO 17388
17342: POP
// begin if not hasGuardPatrolPlan then
17343: LD_EXP 18
17347: NOT
17348: IFFALSE 17382
// begin Say ( Heike , DH-PatrolPlan ) ;
17350: LD_EXP 39
17354: PPUSH
17355: LD_STRING DH-PatrolPlan
17357: PPUSH
17358: CALL_OW 88
// hasGuardPatrolPlan := true ;
17362: LD_ADDR_EXP 18
17366: PUSH
17367: LD_INT 1
17369: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17370: LD_INT 6
17372: PPUSH
17373: LD_INT 2
17375: PPUSH
17376: CALL_OW 343
// end else
17380: GO 17386
// SayHEmpty ( ) ;
17382: CALL 15373 0 0
// end ; ruKaiaBar :
17386: GO 18123
17388: LD_INT 147
17390: DOUBLE
17391: EQUAL
17392: IFTRUE 17396
17394: GO 17543
17396: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17397: LD_EXP 44
17401: PPUSH
17402: CALL_OW 302
17406: PUSH
17407: LD_EXP 44
17411: PUSH
17412: LD_EXP 14
17416: IN
17417: NOT
17418: AND
17419: IFFALSE 17541
// begin Say ( Heike , DH-Kaia-1 ) ;
17421: LD_EXP 39
17425: PPUSH
17426: LD_STRING DH-Kaia-1
17428: PPUSH
17429: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17433: LD_EXP 44
17437: PPUSH
17438: LD_STRING DK-Kaia-2
17440: PPUSH
17441: CALL_OW 88
// if hasSniperRifle then
17445: LD_EXP 11
17449: IFFALSE 17500
// begin if IsOk ( Markov ) then
17451: LD_EXP 46
17455: PPUSH
17456: CALL_OW 302
17460: IFFALSE 17476
// Say ( Kaia , DK-Kaia-3 ) else
17462: LD_EXP 44
17466: PPUSH
17467: LD_STRING DK-Kaia-3
17469: PPUSH
17470: CALL_OW 88
17474: GO 17488
// Say ( Kaia , DK-Kaia-a-3 ) ;
17476: LD_EXP 44
17480: PPUSH
17481: LD_STRING DK-Kaia-a-3
17483: PPUSH
17484: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17488: LD_EXP 39
17492: PPUSH
17493: LD_STRING DH-Kaia-4
17495: PPUSH
17496: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17500: LD_EXP 44
17504: PPUSH
17505: LD_INT 2
17507: PPUSH
17508: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17512: LD_ADDR_EXP 14
17516: PUSH
17517: LD_EXP 14
17521: PPUSH
17522: LD_EXP 44
17526: PPUSH
17527: CALL 64437 0 2
17531: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17532: LD_EXP 44
17536: PPUSH
17537: CALL_OW 122
// end ; end ; ruWeaponsBar :
17541: GO 18123
17543: LD_INT 137
17545: DOUBLE
17546: EQUAL
17547: IFTRUE 17551
17549: GO 18122
17551: POP
// begin if hasWeapons then
17552: LD_EXP 19
17556: IFFALSE 18108
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17558: LD_ADDR_EXP 16
17562: PUSH
17563: LD_EXP 16
17567: PUSH
17568: LD_INT 137
17570: DIFF
17571: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17572: LD_ADDR_VAR 0 3
17576: PUSH
17577: LD_EXP 14
17581: PPUSH
17582: LD_INT 91
17584: PUSH
17585: LD_EXP 39
17589: PUSH
17590: LD_INT 8
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: LIST
17597: PPUSH
17598: CALL_OW 72
17602: ST_TO_ADDR
// if not heikeSquad or not tmp then
17603: LD_EXP 14
17607: NOT
17608: PUSH
17609: LD_VAR 0 3
17613: NOT
17614: OR
17615: IFFALSE 17631
// Say ( Heike , DH-Weapons-Alone ) else
17617: LD_EXP 39
17621: PPUSH
17622: LD_STRING DH-Weapons-Alone
17624: PPUSH
17625: CALL_OW 88
17629: GO 18106
// begin entranceVisitedList := Join ( entranceVisitedList , ruWeaponsBar ) ;
17631: LD_ADDR_EXP 16
17635: PUSH
17636: LD_EXP 16
17640: PPUSH
17641: LD_INT 137
17643: PPUSH
17644: CALL 64437 0 2
17648: ST_TO_ADDR
// Say ( Heike , DH-Weapons-1 ) ;
17649: LD_EXP 39
17653: PPUSH
17654: LD_STRING DH-Weapons-1
17656: PPUSH
17657: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17661: LD_EXP 39
17665: PPUSH
17666: LD_STRING DH-Weapons-2
17668: PPUSH
17669: CALL_OW 88
// if hasRevolver and Kaia in tmp then
17673: LD_EXP 8
17677: PUSH
17678: LD_EXP 44
17682: PUSH
17683: LD_VAR 0 3
17687: IN
17688: AND
17689: IFFALSE 17778
// begin SetSide ( Kaia , 5 ) ;
17691: LD_EXP 44
17695: PPUSH
17696: LD_INT 5
17698: PPUSH
17699: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
17703: LD_EXP 44
17707: PPUSH
17708: LD_INT 137
17710: PPUSH
17711: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17715: LD_INT 35
17717: PPUSH
17718: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17722: LD_EXP 44
17726: PPUSH
17727: CALL_OW 310
17731: IFFALSE 17715
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
17733: LD_EXP 39
17737: PPUSH
17738: LD_STRING DH-Kaia-Revolver-2
17740: PPUSH
17741: CALL_OW 88
// SetClassKaiaRevolver ;
17745: CALL 1701 0 0
// hasRevolver := false ;
17749: LD_ADDR_EXP 8
17753: PUSH
17754: LD_INT 0
17756: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
17757: LD_EXP 44
17761: PPUSH
17762: LD_INT 2
17764: PPUSH
17765: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
17769: LD_EXP 44
17773: PPUSH
17774: CALL_OW 122
// end ; if Givi in tmp then
17778: LD_EXP 40
17782: PUSH
17783: LD_VAR 0 3
17787: IN
17788: IFFALSE 17929
// begin SetSide ( Givi , 5 ) ;
17790: LD_EXP 40
17794: PPUSH
17795: LD_INT 5
17797: PPUSH
17798: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
17802: LD_EXP 40
17806: PPUSH
17807: LD_INT 137
17809: PPUSH
17810: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17814: LD_INT 35
17816: PPUSH
17817: CALL_OW 67
// until IsInUnit ( Givi ) ;
17821: LD_EXP 40
17825: PPUSH
17826: CALL_OW 310
17830: IFFALSE 17814
// Say ( Givi , DG-Weapons-3 ) ;
17832: LD_EXP 40
17836: PPUSH
17837: LD_STRING DG-Weapons-3
17839: PPUSH
17840: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
17844: LD_EXP 39
17848: PPUSH
17849: LD_STRING DH-Weapons-4
17851: PPUSH
17852: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
17856: LD_EXP 40
17860: PPUSH
17861: LD_STRING DG-Weapons-5
17863: PPUSH
17864: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
17868: LD_EXP 40
17872: PPUSH
17873: LD_INT 11
17875: PPUSH
17876: CALL_OW 336
// ComExitBuilding ( Givi ) ;
17880: LD_EXP 40
17884: PPUSH
17885: CALL_OW 122
// SetSide ( Givi , 2 ) ;
17889: LD_EXP 40
17893: PPUSH
17894: LD_INT 2
17896: PPUSH
17897: CALL_OW 235
// if hasRevolver then
17901: LD_EXP 8
17905: IFFALSE 17927
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17907: LD_EXP 39
17911: PPUSH
17912: LD_STRING DH-Kaia-Revolver-1
17914: PPUSH
17915: CALL_OW 88
// heikeHasRevolver := true ;
17919: LD_ADDR_EXP 20
17923: PUSH
17924: LD_INT 1
17926: ST_TO_ADDR
// end ; end else
17927: GO 18106
// if Kamil in tmp then
17929: LD_EXP 43
17933: PUSH
17934: LD_VAR 0 3
17938: IN
17939: IFFALSE 18068
// begin SetSide ( Kamil , 5 ) ;
17941: LD_EXP 43
17945: PPUSH
17946: LD_INT 5
17948: PPUSH
17949: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
17953: LD_EXP 43
17957: PPUSH
17958: LD_INT 137
17960: PPUSH
17961: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17965: LD_INT 35
17967: PPUSH
17968: CALL_OW 67
// until IsInUnit ( Kamil ) ;
17972: LD_EXP 43
17976: PPUSH
17977: CALL_OW 310
17981: IFFALSE 17965
// Say ( Kamil , DKam-Weapons-a-3 ) ;
17983: LD_EXP 43
17987: PPUSH
17988: LD_STRING DKam-Weapons-a-3
17990: PPUSH
17991: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
17995: LD_EXP 39
17999: PPUSH
18000: LD_STRING DH-Weapons-a-4
18002: PPUSH
18003: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18007: LD_EXP 43
18011: PPUSH
18012: LD_INT 11
18014: PPUSH
18015: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18019: LD_EXP 43
18023: PPUSH
18024: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18028: LD_EXP 43
18032: PPUSH
18033: LD_INT 2
18035: PPUSH
18036: CALL_OW 235
// if hasRevolver then
18040: LD_EXP 8
18044: IFFALSE 18066
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18046: LD_EXP 39
18050: PPUSH
18051: LD_STRING DH-Kaia-Revolver-1
18053: PPUSH
18054: CALL_OW 88
// heikeHasRevolver := true ;
18058: LD_ADDR_EXP 20
18062: PUSH
18063: LD_INT 1
18065: ST_TO_ADDR
// end ; end else
18066: GO 18106
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18068: LD_EXP 39
18072: PPUSH
18073: LD_STRING DH-Weapons-Alone-2
18075: PPUSH
18076: CALL_OW 88
// if hasRevolver then
18080: LD_EXP 8
18084: IFFALSE 18106
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18086: LD_EXP 39
18090: PPUSH
18091: LD_STRING DH-Kaia-Revolver-1a
18093: PPUSH
18094: CALL_OW 88
// heikeHasRevolver := true ;
18098: LD_ADDR_EXP 20
18102: PUSH
18103: LD_INT 1
18105: ST_TO_ADDR
// end ; end ; end ; end else
18106: GO 18120
// Say ( Heike , DH-Locked ) ;
18108: LD_EXP 39
18112: PPUSH
18113: LD_STRING DH-Locked
18115: PPUSH
18116: CALL_OW 88
// end ; end ;
18120: GO 18123
18122: POP
// ComExitBuilding ( Heike ) ;
18123: LD_EXP 39
18127: PPUSH
18128: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18132: LD_EXP 39
18136: PPUSH
18137: LD_INT 2
18139: PPUSH
18140: CALL_OW 235
// SetSide ( building , 3 ) ;
18144: LD_VAR 0 1
18148: PPUSH
18149: LD_INT 3
18151: PPUSH
18152: CALL_OW 235
// InGameOff ;
18156: CALL_OW 9
// end ;
18160: LD_VAR 0 2
18164: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18165: LD_EXP 30
18169: NOT
18170: PUSH
18171: LD_EXP 17
18175: NOT
18176: AND
18177: PUSH
18178: LD_INT 22
18180: PUSH
18181: LD_INT 5
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 21
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PPUSH
18202: CALL_OW 69
18206: PUSH
18207: LD_INT 0
18209: EQUAL
18210: AND
18211: PUSH
18212: LD_INT 22
18214: PUSH
18215: LD_INT 4
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 21
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PPUSH
18236: CALL_OW 69
18240: PUSH
18241: LD_INT 0
18243: EQUAL
18244: PUSH
18245: LD_EXP 25
18249: AND
18250: PUSH
18251: LD_EXP 25
18255: NOT
18256: OR
18257: AND
18258: IFFALSE 18290
18260: GO 18262
18262: DISABLE
// begin DialogueOn ;
18263: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18267: LD_EXP 39
18271: PPUSH
18272: LD_STRING DH-Alarm-2
18274: PPUSH
18275: CALL_OW 88
// DialogueOff ;
18279: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18283: LD_STRING M1-people-out
18285: PPUSH
18286: CALL_OW 337
// end ; end_of_file
18290: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
18291: LD_VAR 0 1
18295: PUSH
18296: LD_INT 3
18298: DOUBLE
18299: EQUAL
18300: IFTRUE 18304
18302: GO 18334
18304: POP
// begin repeat wait ( 0 0$1 ) ;
18305: LD_INT 35
18307: PPUSH
18308: CALL_OW 67
// CenterOnUnits ( Heike ) ;
18312: LD_EXP 39
18316: PPUSH
18317: CALL_OW 85
// until IsDying ( Heike ) ;
18321: LD_EXP 39
18325: PPUSH
18326: CALL_OW 303
18330: IFFALSE 18305
// end ; end ;
18332: GO 18335
18334: POP
// end ;
18335: PPOPN 1
18337: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
18338: LD_OWVAR 59
18342: IFFALSE 18346
// exit ;
18344: GO 18420
// if showPlaceEvent then
18346: LD_INT 4
18348: IFFALSE 18420
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
18350: LD_VAR 0 2
18354: PPUSH
18355: LD_VAR 0 3
18359: PPUSH
18360: LD_INT 2
18362: PPUSH
18363: LD_INT 6
18365: NEG
18366: PPUSH
18367: CALL_OW 330
// CenterOnXY ( x , y ) ;
18371: LD_VAR 0 2
18375: PPUSH
18376: LD_VAR 0 3
18380: PPUSH
18381: CALL_OW 84
// wait ( time ) ;
18385: LD_VAR 0 4
18389: PPUSH
18390: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
18394: LD_EXP 39
18398: PPUSH
18399: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
18403: LD_VAR 0 2
18407: PPUSH
18408: LD_VAR 0 3
18412: PPUSH
18413: LD_INT 2
18415: PPUSH
18416: CALL_OW 331
// end ; end ;
18420: PPOPN 7
18422: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
18423: LD_VAR 0 1
18427: PUSH
18428: LD_EXP 39
18432: EQUAL
18433: PUSH
18434: LD_EXP 5
18438: AND
18439: IFFALSE 18463
// if loseCounter then
18441: LD_EXP 32
18445: IFFALSE 18456
// YouLost ( HeikeNoSurrender ) else
18447: LD_STRING HeikeNoSurrender
18449: PPUSH
18450: CALL_OW 104
18454: GO 18463
// YouLost ( Heike ) ;
18456: LD_STRING Heike
18458: PPUSH
18459: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
18463: LD_VAR 0 1
18467: PPUSH
18468: CALL_OW 255
18472: PUSH
18473: LD_INT 2
18475: EQUAL
18476: PUSH
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 247
18486: PUSH
18487: LD_INT 1
18489: EQUAL
18490: AND
18491: IFFALSE 18508
// loseCounter := Inc ( loseCounter ) ;
18493: LD_ADDR_EXP 32
18497: PUSH
18498: LD_EXP 32
18502: PPUSH
18503: CALL 65798 0 1
18507: ST_TO_ADDR
// end ;
18508: PPOPN 1
18510: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
18511: LD_VAR 0 1
18515: PUSH
18516: LD_INT 2
18518: EQUAL
18519: PUSH
18520: LD_VAR 0 2
18524: PUSH
18525: LD_INT 3
18527: EQUAL
18528: AND
18529: PUSH
18530: LD_VAR 0 1
18534: PUSH
18535: LD_INT 3
18537: EQUAL
18538: PUSH
18539: LD_VAR 0 2
18543: PUSH
18544: LD_INT 2
18546: EQUAL
18547: AND
18548: OR
18549: IFFALSE 18559
// isAlarm := true ;
18551: LD_ADDR_EXP 17
18555: PUSH
18556: LD_INT 1
18558: ST_TO_ADDR
// end ; end_of_file
18559: PPOPN 2
18561: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
18562: LD_INT 0
18564: PPUSH
18565: PPUSH
18566: PPUSH
// u1 := IsInUnit ( unit1 ) ;
18567: LD_ADDR_VAR 0 4
18571: PUSH
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL_OW 310
18581: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
18582: LD_ADDR_VAR 0 5
18586: PUSH
18587: LD_VAR 0 2
18591: PPUSH
18592: CALL_OW 310
18596: ST_TO_ADDR
// result := u1 and u1 = u2 ;
18597: LD_ADDR_VAR 0 3
18601: PUSH
18602: LD_VAR 0 4
18606: PUSH
18607: LD_VAR 0 4
18611: PUSH
18612: LD_VAR 0 5
18616: EQUAL
18617: AND
18618: ST_TO_ADDR
// end ;
18619: LD_VAR 0 3
18623: RET
// export function ShowPlace ( x , y , time ) ; begin
18624: LD_INT 0
18626: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
18627: LD_INT 4
18629: PPUSH
18630: LD_VAR 0 1
18634: PPUSH
18635: LD_VAR 0 2
18639: PPUSH
18640: LD_VAR 0 3
18644: PPUSH
18645: LD_INT 0
18647: PPUSH
18648: LD_INT 0
18650: PPUSH
18651: LD_INT 0
18653: PPUSH
18654: CALL_OW 595
// end ;
18658: LD_VAR 0 4
18662: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
18663: LD_INT 0
18665: PPUSH
18666: PPUSH
18667: PPUSH
18668: PPUSH
18669: PPUSH
18670: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
18671: LD_VAR 0 1
18675: PPUSH
18676: CALL_OW 302
18680: NOT
18681: PUSH
18682: LD_VAR 0 2
18686: PPUSH
18687: CALL_OW 302
18691: NOT
18692: OR
18693: PUSH
18694: LD_VAR 0 2
18698: PPUSH
18699: CALL_OW 313
18703: PUSH
18704: LD_INT 6
18706: EQUAL
18707: OR
18708: IFFALSE 18712
// exit ;
18710: GO 18929
// btype := GetBType ( building ) ;
18712: LD_ADDR_VAR 0 8
18716: PUSH
18717: LD_VAR 0 2
18721: PPUSH
18722: CALL_OW 266
18726: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
18727: LD_VAR 0 8
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: LD_INT 1
18737: PUSH
18738: LD_INT 2
18740: PUSH
18741: LD_INT 4
18743: PUSH
18744: LD_INT 5
18746: PUSH
18747: LD_INT 3
18749: PUSH
18750: LD_INT 6
18752: PUSH
18753: LD_INT 7
18755: PUSH
18756: LD_INT 8
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: IN
18770: NOT
18771: IFFALSE 18775
// exit ;
18773: GO 18929
// x := GetX ( building ) ;
18775: LD_ADDR_VAR 0 4
18779: PUSH
18780: LD_VAR 0 2
18784: PPUSH
18785: CALL_OW 250
18789: ST_TO_ADDR
// y := GetY ( building ) ;
18790: LD_ADDR_VAR 0 5
18794: PUSH
18795: LD_VAR 0 2
18799: PPUSH
18800: CALL_OW 251
18804: ST_TO_ADDR
// d := GetDir ( building ) ;
18805: LD_ADDR_VAR 0 6
18809: PUSH
18810: LD_VAR 0 2
18814: PPUSH
18815: CALL_OW 254
18819: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
18820: LD_ADDR_VAR 0 7
18824: PUSH
18825: LD_VAR 0 4
18829: PPUSH
18830: LD_VAR 0 6
18834: PPUSH
18835: LD_INT 3
18837: PPUSH
18838: CALL_OW 272
18842: PUSH
18843: LD_VAR 0 5
18847: PPUSH
18848: LD_VAR 0 6
18852: PPUSH
18853: LD_INT 3
18855: PPUSH
18856: CALL_OW 273
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
18865: LD_VAR 0 7
18869: PUSH
18870: LD_INT 1
18872: ARRAY
18873: PPUSH
18874: LD_VAR 0 7
18878: PUSH
18879: LD_INT 2
18881: ARRAY
18882: PPUSH
18883: CALL_OW 488
18887: NOT
18888: IFFALSE 18892
// exit ;
18890: GO 18929
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
18892: LD_ADDR_VAR 0 3
18896: PUSH
18897: LD_VAR 0 1
18901: PPUSH
18902: LD_VAR 0 7
18906: PUSH
18907: LD_INT 1
18909: ARRAY
18910: PPUSH
18911: LD_VAR 0 7
18915: PUSH
18916: LD_INT 2
18918: ARRAY
18919: PPUSH
18920: CALL_OW 297
18924: PUSH
18925: LD_INT 4
18927: LESS
18928: ST_TO_ADDR
// end ;
18929: LD_VAR 0 3
18933: RET
// export function PlaceExplosives ( building ) ; begin
18934: LD_INT 0
18936: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
18937: LD_ADDR_EXP 29
18941: PUSH
18942: LD_EXP 29
18946: PPUSH
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL 64437 0 2
18956: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
18957: LD_VAR 0 1
18961: PPUSH
18962: CALL_OW 250
18966: PPUSH
18967: LD_VAR 0 1
18971: PPUSH
18972: CALL_OW 251
18976: PPUSH
18977: LD_STRING PlantBomb
18979: PPUSH
18980: CALL_OW 366
// end ;
18984: LD_VAR 0 2
18988: RET
// export function CreateNature ; var i ; begin
18989: LD_INT 0
18991: PPUSH
18992: PPUSH
// PrepareFrog ;
18993: CALL 60919 0 0
// for i := 1 to 3 do
18997: LD_ADDR_VAR 0 2
19001: PUSH
19002: DOUBLE
19003: LD_INT 1
19005: DEC
19006: ST_TO_ADDR
19007: LD_INT 3
19009: PUSH
19010: FOR_TO
19011: IFFALSE 19030
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
19013: CALL_OW 44
19017: PPUSH
19018: LD_INT 24
19020: PPUSH
19021: LD_INT 0
19023: PPUSH
19024: CALL_OW 49
19028: GO 19010
19030: POP
19031: POP
// end ;
19032: LD_VAR 0 1
19036: RET
// export function MarkBuilding ( building , marker ) ; begin
19037: LD_INT 0
19039: PPUSH
// if marker then
19040: LD_VAR 0 2
19044: IFFALSE 19091
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
19046: LD_VAR 0 1
19050: PPUSH
19051: CALL_OW 250
19055: PPUSH
19056: LD_VAR 0 1
19060: PPUSH
19061: CALL_OW 251
19065: PPUSH
19066: LD_INT 2
19068: PPUSH
19069: LD_INT 3
19071: NEG
19072: PPUSH
19073: CALL_OW 330
// SetBName ( building , target ) ;
19077: LD_VAR 0 1
19081: PPUSH
19082: LD_STRING target
19084: PPUSH
19085: CALL_OW 500
// end else
19089: GO 19130
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
19091: LD_VAR 0 1
19095: PPUSH
19096: CALL_OW 250
19100: PPUSH
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL_OW 251
19110: PPUSH
19111: LD_INT 2
19113: PPUSH
19114: CALL_OW 331
// SetBName ( building ,  ) ;
19118: LD_VAR 0 1
19122: PPUSH
19123: LD_STRING 
19125: PPUSH
19126: CALL_OW 500
// end ; end ; end_of_file
19130: LD_VAR 0 3
19134: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
19135: LD_INT 0
19137: PPUSH
// lockerCodeValid := false ;
19138: LD_ADDR_EXP 65
19142: PUSH
19143: LD_INT 0
19145: ST_TO_ADDR
// if not step then
19146: LD_LOC 1
19150: NOT
19151: IFFALSE 19161
// step := 1 ;
19153: LD_ADDR_LOC 1
19157: PUSH
19158: LD_INT 1
19160: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
19161: LD_STRING HEscape
19163: PUSH
19164: LD_LOC 1
19168: STR
19169: PPUSH
19170: CALL_OW 97
19174: PUSH
19175: LD_INT 1
19177: DOUBLE
19178: EQUAL
19179: IFTRUE 19183
19181: GO 19190
19183: POP
// LockerMinigameSearch ; 2 :
19184: CALL 19223 0 0
19188: GO 19206
19190: LD_INT 2
19192: DOUBLE
19193: EQUAL
19194: IFTRUE 19198
19196: GO 19205
19198: POP
// LockerMinigameSetCode ; end ;
19199: CALL 19297 0 0
19203: GO 19206
19205: POP
// if lockerCodeValid then
19206: LD_EXP 65
19210: IFFALSE 19214
// exit ;
19212: GO 19218
// StartLockerMinigame ;
19214: CALL 19135 0 0
// end ;
19218: LD_VAR 0 1
19222: RET
// function LockerMinigameSearch ; begin
19223: LD_INT 0
19225: PPUSH
// if code then
19226: LD_LOC 2
19230: IFFALSE 19246
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
19232: LD_EXP 39
19236: PPUSH
19237: LD_STRING DH-Escape-3-Hint-0
19239: PPUSH
19240: CALL_OW 88
// exit ;
19244: GO 19292
// end ; Randomize ;
19246: CALL_OW 10
// code := rand ( 1 , 5 ) ;
19250: LD_ADDR_LOC 2
19254: PUSH
19255: LD_INT 1
19257: PPUSH
19258: LD_INT 5
19260: PPUSH
19261: CALL_OW 12
19265: ST_TO_ADDR
// step := 2 ;
19266: LD_ADDR_LOC 1
19270: PUSH
19271: LD_INT 2
19273: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
19274: LD_EXP 39
19278: PPUSH
19279: LD_STRING DH-Escape-3-Hint-
19281: PUSH
19282: LD_LOC 2
19286: STR
19287: PPUSH
19288: CALL_OW 88
// end ;
19292: LD_VAR 0 1
19296: RET
// function LockerMinigameSetCode ; begin
19297: LD_INT 0
19299: PPUSH
// if not code then
19300: LD_LOC 2
19304: NOT
19305: IFFALSE 19315
// code := 0 ;
19307: LD_ADDR_LOC 2
19311: PUSH
19312: LD_INT 0
19314: ST_TO_ADDR
// lockerBusy := true ;
19315: LD_ADDR_EXP 66
19319: PUSH
19320: LD_INT 1
19322: ST_TO_ADDR
// InGameOff ;
19323: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
19327: LD_STRING initLockerMinigame("
19329: PUSH
19330: LD_LOC 2
19334: STR
19335: PUSH
19336: LD_STRING ")
19338: STR
19339: PPUSH
19340: CALL_OW 559
// step := 3 ;
19344: LD_ADDR_LOC 1
19348: PUSH
19349: LD_INT 3
19351: ST_TO_ADDR
// repeat wait ( 1 ) ;
19352: LD_INT 1
19354: PPUSH
19355: CALL_OW 67
// until not lockerBusy ;
19359: LD_EXP 66
19363: NOT
19364: IFFALSE 19352
// InGameOn ;
19366: CALL_OW 8
// if not lockerCodeValid then
19370: LD_EXP 65
19374: NOT
19375: IFFALSE 19401
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
19377: LD_EXP 39
19381: PPUSH
19382: LD_STRING DH-Escape-3-Fail-
19384: PUSH
19385: LD_INT 1
19387: PPUSH
19388: LD_INT 2
19390: PPUSH
19391: CALL_OW 12
19395: STR
19396: PPUSH
19397: CALL_OW 88
// end ; end_of_file
19401: LD_VAR 0 1
19405: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
19406: LD_VAR 0 2
19410: PUSH
19411: LD_INT 102
19413: EQUAL
19414: IFFALSE 19436
// begin lockerBusy := false ;
19416: LD_ADDR_EXP 66
19420: PUSH
19421: LD_INT 0
19423: ST_TO_ADDR
// lockerCodeValid := p3 ;
19424: LD_ADDR_EXP 65
19428: PUSH
19429: LD_VAR 0 3
19433: ST_TO_ADDR
// end else
19434: GO 19490
// if p2 = 103 then
19436: LD_VAR 0 2
19440: PUSH
19441: LD_INT 103
19443: EQUAL
19444: IFFALSE 19456
// begin weatherBusy := false ;
19446: LD_ADDR_EXP 37
19450: PUSH
19451: LD_INT 0
19453: ST_TO_ADDR
// end else
19454: GO 19490
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
19456: LD_VAR 0 1
19460: PPUSH
19461: LD_VAR 0 2
19465: PPUSH
19466: LD_VAR 0 3
19470: PPUSH
19471: LD_VAR 0 4
19475: PPUSH
19476: LD_VAR 0 5
19480: PPUSH
19481: LD_VAR 0 6
19485: PPUSH
19486: CALL 68441 0 6
// end ;
19490: PPOPN 6
19492: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
19493: LD_STRING killGameMusic();
19495: PPUSH
19496: CALL_OW 559
// SOS_MapStart ( ) ;
19500: CALL 68412 0 0
// end ; end_of_file
19504: PPOPN 1
19506: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
19507: LD_EXP 17
19511: NOT
19512: PUSH
19513: LD_EXP 64
19517: AND
19518: IFFALSE 19928
19520: GO 19522
19522: DISABLE
19523: LD_INT 0
19525: PPUSH
19526: PPUSH
19527: PPUSH
19528: PPUSH
19529: PPUSH
// begin enable ;
19530: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
19531: LD_ADDR_VAR 0 3
19535: PUSH
19536: LD_INT 26
19538: PUSH
19539: LD_INT 27
19541: PUSH
19542: LD_INT 28
19544: PUSH
19545: LD_INT 29
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 30
19556: PUSH
19557: LD_INT 31
19559: PUSH
19560: LD_INT 32
19562: PUSH
19563: LD_INT 33
19565: PUSH
19566: LD_INT 34
19568: PUSH
19569: LD_INT 35
19571: PUSH
19572: LD_INT 36
19574: PUSH
19575: LD_INT 37
19577: PUSH
19578: LD_INT 38
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 39
19594: PUSH
19595: LD_INT 40
19597: PUSH
19598: LD_INT 41
19600: PUSH
19601: LD_INT 42
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 43
19612: PUSH
19613: LD_INT 44
19615: PUSH
19616: LD_INT 45
19618: PUSH
19619: LD_INT 46
19621: PUSH
19622: LD_INT 47
19624: PUSH
19625: LD_INT 46
19627: PUSH
19628: LD_INT 45
19630: PUSH
19631: LD_INT 44
19633: PUSH
19634: LD_INT 43
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: ST_TO_ADDR
// for i in ruPatrol do
19654: LD_ADDR_VAR 0 1
19658: PUSH
19659: LD_EXP 64
19663: PUSH
19664: FOR_IN
19665: IFFALSE 19926
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
19667: LD_ADDR_VAR 0 5
19671: PUSH
19672: LD_INT 22
19674: PUSH
19675: LD_INT 2
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 21
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 91
19694: PUSH
19695: LD_VAR 0 1
19699: PUSH
19700: LD_INT 7
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: LIST
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: PPUSH
19713: CALL_OW 69
19717: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
19718: LD_INT 2
19720: PPUSH
19721: LD_VAR 0 1
19725: PPUSH
19726: CALL_OW 292
19730: PUSH
19731: LD_VAR 0 5
19735: AND
19736: IFFALSE 19812
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
19738: LD_EXP 30
19742: PUSH
19743: LD_VAR 0 1
19747: PPUSH
19748: LD_EXP 59
19752: PPUSH
19753: CALL_OW 296
19757: PUSH
19758: LD_INT 16
19760: LESS
19761: AND
19762: PUSH
19763: LD_EXP 38
19767: OR
19768: IFFALSE 19772
// continue ;
19770: GO 19664
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
19772: LD_VAR 0 1
19776: PPUSH
19777: LD_VAR 0 5
19781: PPUSH
19782: LD_VAR 0 1
19786: PPUSH
19787: CALL_OW 74
19791: PPUSH
19792: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
19796: LD_VAR 0 1
19800: PPUSH
19801: LD_VAR 0 5
19805: PPUSH
19806: CALL 19931 0 2
// continue ;
19810: GO 19664
// end ; if HasTask ( i ) then
19812: LD_VAR 0 1
19816: PPUSH
19817: CALL_OW 314
19821: IFFALSE 19825
// continue ;
19823: GO 19664
// tag := GetTag ( i ) ;
19825: LD_ADDR_VAR 0 4
19829: PUSH
19830: LD_VAR 0 1
19834: PPUSH
19835: CALL_OW 110
19839: ST_TO_ADDR
// if not tag then
19840: LD_VAR 0 4
19844: NOT
19845: IFFALSE 19858
// begin ComHold ( i ) ;
19847: LD_VAR 0 1
19851: PPUSH
19852: CALL_OW 140
// continue ;
19856: GO 19664
// end ; for j := 1 to points [ tag ] do
19858: LD_ADDR_VAR 0 2
19862: PUSH
19863: DOUBLE
19864: LD_INT 1
19866: DEC
19867: ST_TO_ADDR
19868: LD_VAR 0 3
19872: PUSH
19873: LD_VAR 0 4
19877: ARRAY
19878: PUSH
19879: FOR_TO
19880: IFFALSE 19922
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
19882: LD_VAR 0 1
19886: PPUSH
19887: LD_VAR 0 3
19891: PUSH
19892: LD_VAR 0 4
19896: ARRAY
19897: PUSH
19898: LD_VAR 0 2
19902: ARRAY
19903: PPUSH
19904: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
19908: LD_VAR 0 1
19912: PPUSH
19913: LD_INT 70
19915: PPUSH
19916: CALL_OW 202
// end ;
19920: GO 19879
19922: POP
19923: POP
// end ;
19924: GO 19664
19926: POP
19927: POP
// end ;
19928: PPOPN 5
19930: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
19931: LD_INT 0
19933: PPUSH
19934: PPUSH
19935: PPUSH
// if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
19936: LD_VAR 0 2
19940: PPUSH
19941: LD_INT 23
19943: PUSH
19944: LD_INT 3
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PPUSH
19951: CALL_OW 72
19955: PUSH
19956: LD_VAR 0 2
19960: PPUSH
19961: LD_INT 95
19963: PUSH
19964: LD_INT 61
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PPUSH
19971: CALL_OW 72
19975: OR
19976: IFFALSE 19980
// exit ;
19978: GO 21047
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
19980: LD_VAR 0 2
19984: PPUSH
19985: LD_INT 2
19987: PUSH
19988: LD_INT 25
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 25
20000: PUSH
20001: LD_INT 11
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 25
20010: PUSH
20011: LD_INT 34
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 25
20020: PUSH
20021: LD_INT 32
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: PUSH
20035: EMPTY
20036: LIST
20037: PPUSH
20038: CALL_OW 72
20042: IFFALSE 20134
// begin blockPatrolThread := true ;
20044: LD_ADDR_EXP 38
20048: PUSH
20049: LD_INT 1
20051: ST_TO_ADDR
// DialogueOn ;
20052: CALL_OW 6
// case GetSex ( guard ) of sex_male :
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL_OW 258
20065: PUSH
20066: LD_INT 1
20068: DOUBLE
20069: EQUAL
20070: IFTRUE 20074
20072: GO 20089
20074: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20075: LD_VAR 0 1
20079: PPUSH
20080: LD_STRING DRum-Fail-3
20082: PPUSH
20083: CALL_OW 88
20087: GO 20113
20089: LD_INT 2
20091: DOUBLE
20092: EQUAL
20093: IFTRUE 20097
20095: GO 20112
20097: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20098: LD_VAR 0 1
20102: PPUSH
20103: LD_STRING DRum-Fail-3
20105: PPUSH
20106: CALL_OW 88
20110: GO 20113
20112: POP
// DialogueOff ;
20113: CALL_OW 7
// wait ( 0 0$5 ) ;
20117: LD_INT 175
20119: PPUSH
20120: CALL_OW 67
// isAlarm := true ;
20124: LD_ADDR_EXP 17
20128: PUSH
20129: LD_INT 1
20131: ST_TO_ADDR
// exit ;
20132: GO 21047
// end ; DialogueOn ;
20134: CALL_OW 6
// blockPatrolThread := true ;
20138: LD_ADDR_EXP 38
20142: PUSH
20143: LD_INT 1
20145: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
20146: LD_VAR 0 1
20150: PPUSH
20151: CALL_OW 87
// if not Heike in units then
20155: LD_EXP 39
20159: PUSH
20160: LD_VAR 0 2
20164: IN
20165: NOT
20166: IFFALSE 20516
// begin case GetSex ( guard ) of sex_male :
20168: LD_VAR 0 1
20172: PPUSH
20173: CALL_OW 258
20177: PUSH
20178: LD_INT 1
20180: DOUBLE
20181: EQUAL
20182: IFTRUE 20186
20184: GO 20201
20186: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
20187: LD_VAR 0 1
20191: PPUSH
20192: LD_STRING DRum-Guard-1
20194: PPUSH
20195: CALL_OW 88
20199: GO 20225
20201: LD_INT 2
20203: DOUBLE
20204: EQUAL
20205: IFTRUE 20209
20207: GO 20224
20209: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
20210: LD_VAR 0 1
20214: PPUSH
20215: LD_STRING DRuf-Guard-1
20217: PPUSH
20218: CALL_OW 88
20222: GO 20225
20224: POP
// case Query ( SurrenderInfoPeople ) of 1 :
20225: LD_STRING SurrenderInfoPeople
20227: PPUSH
20228: CALL_OW 97
20232: PUSH
20233: LD_INT 1
20235: DOUBLE
20236: EQUAL
20237: IFTRUE 20241
20239: GO 20342
20241: POP
// begin Query ( CaughtSquadInfo ) ;
20242: LD_STRING CaughtSquadInfo
20244: PPUSH
20245: CALL_OW 97
// for i in units do
20249: LD_ADDR_VAR 0 4
20253: PUSH
20254: LD_VAR 0 2
20258: PUSH
20259: FOR_IN
20260: IFFALSE 20317
// begin if Carry ( i ) then
20262: LD_VAR 0 4
20266: PPUSH
20267: CALL_OW 281
20271: IFFALSE 20288
// SetCargo ( i , mat_cans , 0 ) ;
20273: LD_VAR 0 4
20277: PPUSH
20278: LD_INT 1
20280: PPUSH
20281: LD_INT 0
20283: PPUSH
20284: CALL_OW 290
// SetSide ( i , 5 ) ;
20288: LD_VAR 0 4
20292: PPUSH
20293: LD_INT 5
20295: PPUSH
20296: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
20300: LD_VAR 0 4
20304: PPUSH
20305: LD_INT 113
20307: PPUSH
20308: LD_INT 17
20310: PPUSH
20311: CALL_OW 111
// end ;
20315: GO 20259
20317: POP
20318: POP
// ComMoveXY ( guard , 113 , 17 ) ;
20319: LD_VAR 0 1
20323: PPUSH
20324: LD_INT 113
20326: PPUSH
20327: LD_INT 17
20329: PPUSH
20330: CALL_OW 111
// DialogueOff ;
20334: CALL_OW 7
// exit ;
20338: GO 21047
// end ; 2 :
20340: GO 20516
20342: LD_INT 2
20344: DOUBLE
20345: EQUAL
20346: IFTRUE 20350
20348: GO 20515
20350: POP
// begin DialogueOff ;
20351: CALL_OW 7
// wait ( 0 0$2 ) ;
20355: LD_INT 70
20357: PPUSH
20358: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20362: LD_INT 6
20364: PPUSH
20365: LD_INT 2
20367: PPUSH
20368: LD_INT 2
20370: PPUSH
20371: LD_INT 1
20373: PPUSH
20374: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
20378: LD_VAR 0 1
20382: PPUSH
20383: LD_VAR 0 2
20387: PUSH
20388: LD_INT 1
20390: ARRAY
20391: PPUSH
20392: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20396: LD_VAR 0 1
20400: PPUSH
20401: CALL_OW 258
20405: PUSH
20406: LD_INT 1
20408: DOUBLE
20409: EQUAL
20410: IFTRUE 20414
20412: GO 20429
20414: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20415: LD_VAR 0 1
20419: PPUSH
20420: LD_STRING DRum-Fail-3
20422: PPUSH
20423: CALL_OW 88
20427: GO 20453
20429: LD_INT 2
20431: DOUBLE
20432: EQUAL
20433: IFTRUE 20437
20435: GO 20452
20437: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20438: LD_VAR 0 1
20442: PPUSH
20443: LD_STRING DRum-Fail-3
20445: PPUSH
20446: CALL_OW 88
20450: GO 20453
20452: POP
// wait ( 0 0$5 ) ;
20453: LD_INT 175
20455: PPUSH
20456: CALL_OW 67
// if IsOk ( guard ) then
20460: LD_VAR 0 1
20464: PPUSH
20465: CALL_OW 302
20469: IFFALSE 20481
// isAlarm := true else
20471: LD_ADDR_EXP 17
20475: PUSH
20476: LD_INT 1
20478: ST_TO_ADDR
20479: GO 20513
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20481: LD_INT 6
20483: PPUSH
20484: LD_INT 2
20486: PPUSH
20487: LD_INT 0
20489: PPUSH
20490: LD_INT 1
20492: PPUSH
20493: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20497: LD_INT 3
20499: PPUSH
20500: LD_INT 2
20502: PPUSH
20503: LD_INT 0
20505: PPUSH
20506: LD_INT 1
20508: PPUSH
20509: CALL_OW 80
// end ; end ; end ;
20513: GO 20516
20515: POP
// end ; if Carry ( Heike ) then
20516: LD_EXP 39
20520: PPUSH
20521: CALL_OW 281
20525: IFFALSE 20601
// begin case GetSex ( guard ) of sex_male :
20527: LD_VAR 0 1
20531: PPUSH
20532: CALL_OW 258
20536: PUSH
20537: LD_INT 1
20539: DOUBLE
20540: EQUAL
20541: IFTRUE 20545
20543: GO 20560
20545: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
20546: LD_VAR 0 1
20550: PPUSH
20551: LD_STRING DRum-FoodFail-1
20553: PPUSH
20554: CALL_OW 88
20558: GO 20584
20560: LD_INT 2
20562: DOUBLE
20563: EQUAL
20564: IFTRUE 20568
20566: GO 20583
20568: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
20569: LD_VAR 0 1
20573: PPUSH
20574: LD_STRING DRuf-FoodFail-2
20576: PPUSH
20577: CALL_OW 88
20581: GO 20584
20583: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
20584: LD_EXP 39
20588: PPUSH
20589: LD_INT 1
20591: PPUSH
20592: LD_INT 0
20594: PPUSH
20595: CALL_OW 290
// end else
20599: GO 20658
// begin case GetSex ( guard ) of sex_male :
20601: LD_VAR 0 1
20605: PPUSH
20606: CALL_OW 258
20610: PUSH
20611: LD_INT 1
20613: DOUBLE
20614: EQUAL
20615: IFTRUE 20619
20617: GO 20634
20619: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
20620: LD_VAR 0 1
20624: PPUSH
20625: LD_STRING DRum-Seen-1
20627: PPUSH
20628: CALL_OW 88
20632: GO 20658
20634: LD_INT 2
20636: DOUBLE
20637: EQUAL
20638: IFTRUE 20642
20640: GO 20657
20642: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
20643: LD_VAR 0 1
20647: PPUSH
20648: LD_STRING DRuf-Seen-1
20650: PPUSH
20651: CALL_OW 88
20655: GO 20658
20657: POP
// end ; alone := ( units = 1 ) ;
20658: LD_ADDR_VAR 0 5
20662: PUSH
20663: LD_VAR 0 2
20667: PUSH
20668: LD_INT 1
20670: EQUAL
20671: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
20672: LD_STRING SurrenderInfo
20674: PPUSH
20675: CALL_OW 97
20679: PUSH
20680: LD_INT 1
20682: DOUBLE
20683: EQUAL
20684: IFTRUE 20688
20686: GO 20857
20688: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
20689: LD_INT 23
20691: PPUSH
20692: CALL_OW 87
// RemoveUnit ( Heike ) ;
20696: LD_EXP 39
20700: PPUSH
20701: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
20705: LD_EXP 39
20709: PPUSH
20710: LD_INT 23
20712: PPUSH
20713: CALL_OW 52
// if not alone then
20717: LD_VAR 0 5
20721: NOT
20722: IFFALSE 20777
// for i in units diff Heike do
20724: LD_ADDR_VAR 0 4
20728: PUSH
20729: LD_VAR 0 2
20733: PUSH
20734: LD_EXP 39
20738: DIFF
20739: PUSH
20740: FOR_IN
20741: IFFALSE 20775
// begin RemoveUnit ( i ) ;
20743: LD_VAR 0 4
20747: PPUSH
20748: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
20752: LD_VAR 0 4
20756: PPUSH
20757: LD_INT 114
20759: PPUSH
20760: LD_INT 17
20762: PPUSH
20763: LD_INT 10
20765: PPUSH
20766: LD_INT 0
20768: PPUSH
20769: CALL_OW 50
// end ;
20773: GO 20740
20775: POP
20776: POP
// wait ( 0 0$0.3 ) ;
20777: LD_INT 10
20779: PPUSH
20780: CALL_OW 67
// if alone then
20784: LD_VAR 0 5
20788: IFFALSE 20799
// Query ( CaughtInfoAlone ) else
20790: LD_STRING CaughtInfoAlone
20792: PPUSH
20793: CALL_OW 97
20797: GO 20806
// Query ( CaughtInfo ) ;
20799: LD_STRING CaughtInfo
20801: PPUSH
20802: CALL_OW 97
// wait ( 0 0$1 ) ;
20806: LD_INT 35
20808: PPUSH
20809: CALL_OW 67
// StartLockerMinigame ;
20813: CALL 19135 0 0
// Say ( Heike , DH-Reset ) ;
20817: LD_EXP 39
20821: PPUSH
20822: LD_STRING DH-Reset
20824: PPUSH
20825: CALL_OW 88
// DialogueOff ;
20829: CALL_OW 7
// InGameOff ;
20833: CALL_OW 9
// ComExitBuilding ( Heike ) ;
20837: LD_EXP 39
20841: PPUSH
20842: CALL_OW 122
// ComFree ( guard ) ;
20846: LD_VAR 0 1
20850: PPUSH
20851: CALL_OW 139
// end ; 2 :
20855: GO 21039
20857: LD_INT 2
20859: DOUBLE
20860: EQUAL
20861: IFTRUE 20865
20863: GO 21038
20865: POP
// begin Say ( Heike , DH-Guard-2 ) ;
20866: LD_EXP 39
20870: PPUSH
20871: LD_STRING DH-Guard-2
20873: PPUSH
20874: CALL_OW 88
// DialogueOff ;
20878: CALL_OW 7
// wait ( 0 0$2 ) ;
20882: LD_INT 70
20884: PPUSH
20885: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20889: LD_INT 6
20891: PPUSH
20892: LD_INT 2
20894: PPUSH
20895: LD_INT 2
20897: PPUSH
20898: LD_INT 1
20900: PPUSH
20901: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
20905: LD_VAR 0 1
20909: PPUSH
20910: LD_EXP 39
20914: PPUSH
20915: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20919: LD_VAR 0 1
20923: PPUSH
20924: CALL_OW 258
20928: PUSH
20929: LD_INT 1
20931: DOUBLE
20932: EQUAL
20933: IFTRUE 20937
20935: GO 20952
20937: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20938: LD_VAR 0 1
20942: PPUSH
20943: LD_STRING DRum-Fail-3
20945: PPUSH
20946: CALL_OW 88
20950: GO 20976
20952: LD_INT 2
20954: DOUBLE
20955: EQUAL
20956: IFTRUE 20960
20958: GO 20975
20960: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20961: LD_VAR 0 1
20965: PPUSH
20966: LD_STRING DRum-Fail-3
20968: PPUSH
20969: CALL_OW 88
20973: GO 20976
20975: POP
// wait ( 0 0$5 ) ;
20976: LD_INT 175
20978: PPUSH
20979: CALL_OW 67
// if IsOk ( guard ) then
20983: LD_VAR 0 1
20987: PPUSH
20988: CALL_OW 302
20992: IFFALSE 21004
// isAlarm := true else
20994: LD_ADDR_EXP 17
20998: PUSH
20999: LD_INT 1
21001: ST_TO_ADDR
21002: GO 21036
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
21004: LD_INT 6
21006: PPUSH
21007: LD_INT 2
21009: PPUSH
21010: LD_INT 0
21012: PPUSH
21013: LD_INT 1
21015: PPUSH
21016: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
21020: LD_INT 3
21022: PPUSH
21023: LD_INT 2
21025: PPUSH
21026: LD_INT 0
21028: PPUSH
21029: LD_INT 1
21031: PPUSH
21032: CALL_OW 80
// end ; end ; end ;
21036: GO 21039
21038: POP
// blockPatrolThread := false ;
21039: LD_ADDR_EXP 38
21043: PUSH
21044: LD_INT 0
21046: ST_TO_ADDR
// end ;
21047: LD_VAR 0 3
21051: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
21052: LD_EXP 14
21056: PPUSH
21057: LD_INT 22
21059: PUSH
21060: LD_INT 5
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 3
21069: PUSH
21070: LD_INT 101
21072: PUSH
21073: LD_INT 6
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 92
21086: PUSH
21087: LD_INT 113
21089: PUSH
21090: LD_INT 16
21092: PUSH
21093: LD_INT 12
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 91
21104: PUSH
21105: LD_EXP 39
21109: PUSH
21110: LD_INT 6
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: LIST
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: PPUSH
21124: CALL_OW 72
21128: PUSH
21129: LD_EXP 30
21133: NOT
21134: AND
21135: IFFALSE 21240
21137: GO 21139
21139: DISABLE
21140: LD_INT 0
21142: PPUSH
// begin enable ;
21143: ENABLE
// DialogueOn ;
21144: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
21148: LD_EXP 39
21152: PPUSH
21153: LD_STRING DH-Join-
21155: PUSH
21156: LD_INT 1
21158: PPUSH
21159: LD_INT 3
21161: PPUSH
21162: CALL_OW 12
21166: STR
21167: PPUSH
21168: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
21172: LD_ADDR_VAR 0 1
21176: PUSH
21177: LD_EXP 14
21181: PPUSH
21182: LD_INT 22
21184: PUSH
21185: LD_INT 5
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 91
21194: PUSH
21195: LD_EXP 39
21199: PUSH
21200: LD_INT 10
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PPUSH
21212: CALL_OW 72
21216: PUSH
21217: FOR_IN
21218: IFFALSE 21234
// SetSide ( i , 2 ) ;
21220: LD_VAR 0 1
21224: PPUSH
21225: LD_INT 2
21227: PPUSH
21228: CALL_OW 235
21232: GO 21217
21234: POP
21235: POP
// DialogueOff ;
21236: CALL_OW 7
// end ; end_of_file
21240: PPOPN 1
21242: END
// every 0 0$2 trigger isAlarm do var i , points , tmp ;
21243: LD_EXP 17
21247: IFFALSE 21548
21249: GO 21251
21251: DISABLE
21252: LD_INT 0
21254: PPUSH
21255: PPUSH
21256: PPUSH
// begin DialogueOn ;
21257: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
21261: LD_EXP 39
21265: PPUSH
21266: LD_STRING DH-Alarm-1
21268: PPUSH
21269: CALL_OW 88
// DialogueOff ;
21273: CALL_OW 7
// PlaySoundXY ( - 1 , - 1 , alarm ) ;
21277: LD_INT 1
21279: NEG
21280: PPUSH
21281: LD_INT 1
21283: NEG
21284: PPUSH
21285: LD_STRING alarm
21287: PPUSH
21288: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
21292: LD_INT 3
21294: PPUSH
21295: LD_INT 2
21297: PPUSH
21298: LD_INT 2
21300: PPUSH
21301: LD_INT 1
21303: PPUSH
21304: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21308: LD_INT 6
21310: PPUSH
21311: LD_INT 2
21313: PPUSH
21314: LD_INT 2
21316: PPUSH
21317: LD_INT 1
21319: PPUSH
21320: CALL_OW 80
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
21324: LD_ADDR_VAR 0 2
21328: PUSH
21329: LD_INT 107
21331: PUSH
21332: LD_INT 39
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 143
21341: PUSH
21342: LD_INT 33
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 180
21351: PUSH
21352: LD_INT 115
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 96
21361: PUSH
21362: LD_INT 90
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 59
21371: PUSH
21372: LD_INT 52
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 16
21381: PUSH
21382: LD_INT 15
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 90
21391: PUSH
21392: LD_INT 120
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
21408: LD_ADDR_VAR 0 3
21412: PUSH
21413: LD_INT 22
21415: PUSH
21416: LD_INT 6
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 25
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PPUSH
21437: CALL_OW 69
21441: ST_TO_ADDR
// for i in tmp do
21442: LD_ADDR_VAR 0 1
21446: PUSH
21447: LD_VAR 0 3
21451: PUSH
21452: FOR_IN
21453: IFFALSE 21521
// begin ComExit ( i ) ;
21455: LD_VAR 0 1
21459: PPUSH
21460: CALL 64835 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
21464: LD_VAR 0 1
21468: PPUSH
21469: LD_VAR 0 2
21473: PUSH
21474: LD_VAR 0 1
21478: PUSH
21479: LD_INT 7
21481: MOD
21482: PUSH
21483: LD_INT 1
21485: PLUS
21486: ARRAY
21487: PUSH
21488: LD_INT 1
21490: ARRAY
21491: PPUSH
21492: LD_VAR 0 2
21496: PUSH
21497: LD_VAR 0 1
21501: PUSH
21502: LD_INT 7
21504: MOD
21505: PUSH
21506: LD_INT 1
21508: PLUS
21509: ARRAY
21510: PUSH
21511: LD_INT 2
21513: ARRAY
21514: PPUSH
21515: CALL_OW 174
// end ;
21519: GO 21452
21521: POP
21522: POP
// Explode ;
21523: CALL 21551 0 0
// wait ( 0 0$45 ) ;
21527: LD_INT 1575
21529: PPUSH
21530: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
21534: LD_VAR 0 3
21538: PPUSH
21539: LD_EXP 39
21543: PPUSH
21544: CALL_OW 175
// end ;
21548: PPOPN 3
21550: END
// export function Explode ; var i , x , y , j ; begin
21551: LD_INT 0
21553: PPUSH
21554: PPUSH
21555: PPUSH
21556: PPUSH
21557: PPUSH
// if hasExplosionsInFactory then
21558: LD_EXP 7
21562: IFFALSE 21582
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
21564: LD_ADDR_EXP 29
21568: PUSH
21569: LD_EXP 29
21573: PPUSH
21574: LD_INT 61
21576: PPUSH
21577: CALL 64437 0 2
21581: ST_TO_ADDR
// if explosivePlantedList then
21582: LD_EXP 29
21586: IFFALSE 21734
// begin for i in explosivePlantedList do
21588: LD_ADDR_VAR 0 2
21592: PUSH
21593: LD_EXP 29
21597: PUSH
21598: FOR_IN
21599: IFFALSE 21702
// begin x := GetX ( i ) ;
21601: LD_ADDR_VAR 0 3
21605: PUSH
21606: LD_VAR 0 2
21610: PPUSH
21611: CALL_OW 250
21615: ST_TO_ADDR
// y := GetY ( i ) ;
21616: LD_ADDR_VAR 0 4
21620: PUSH
21621: LD_VAR 0 2
21625: PPUSH
21626: CALL_OW 251
21630: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
21631: LD_ADDR_VAR 0 5
21635: PUSH
21636: LD_INT 1
21638: PUSH
21639: LD_INT 3
21641: PUSH
21642: LD_INT 5
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: PUSH
21650: FOR_IN
21651: IFFALSE 21698
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
21653: LD_VAR 0 3
21657: PPUSH
21658: LD_VAR 0 5
21662: PPUSH
21663: LD_INT 2
21665: PPUSH
21666: CALL_OW 272
21670: PPUSH
21671: LD_VAR 0 4
21675: PPUSH
21676: LD_VAR 0 5
21680: PPUSH
21681: LD_INT 2
21683: PPUSH
21684: CALL_OW 273
21688: PPUSH
21689: LD_INT 1
21691: PPUSH
21692: CALL_OW 453
21696: GO 21650
21698: POP
21699: POP
// end ;
21700: GO 21598
21702: POP
21703: POP
// Say ( Heike , DH-End-2 ) ;
21704: LD_EXP 39
21708: PPUSH
21709: LD_STRING DH-End-2
21711: PPUSH
21712: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
21716: LD_INT 175
21718: PUSH
21719: LD_EXP 29
21723: PPUSH
21724: CALL 29090 0 1
21728: MUL
21729: PPUSH
21730: CALL_OW 67
// end ; if not isAlarm then
21734: LD_EXP 17
21738: NOT
21739: IFFALSE 21749
// isAlarm := true ;
21741: LD_ADDR_EXP 17
21745: PUSH
21746: LD_INT 1
21748: ST_TO_ADDR
// end ;
21749: LD_VAR 0 1
21753: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
21754: LD_INT 22
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 21
21766: PUSH
21767: LD_INT 2
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 2
21776: PUSH
21777: LD_INT 101
21779: PUSH
21780: LD_INT 3
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 101
21789: PUSH
21790: LD_INT 6
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: PPUSH
21807: CALL_OW 69
21811: IFFALSE 21824
21813: GO 21815
21815: DISABLE
// isAlarm := true ; end_of_file
21816: LD_ADDR_EXP 17
21820: PUSH
21821: LD_INT 1
21823: ST_TO_ADDR
21824: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
21825: LD_EXP 14
21829: PPUSH
21830: LD_INT 22
21832: PUSH
21833: LD_INT 2
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PPUSH
21840: CALL_OW 72
21844: PUSH
21845: LD_INT 3
21847: GREATER
21848: PUSH
21849: LD_EXP 17
21853: NOT
21854: AND
21855: IFFALSE 25707
21857: GO 21859
21859: DISABLE
21860: LD_INT 0
21862: PPUSH
21863: PPUSH
21864: PPUSH
21865: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
21866: LD_EXP 59
21870: PPUSH
21871: LD_INT 155
21873: PPUSH
21874: LD_INT 68
21876: PPUSH
21877: LD_INT 0
21879: PPUSH
21880: CALL_OW 48
// wait ( 0 0$1 ) ;
21884: LD_INT 35
21886: PPUSH
21887: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21891: LD_INT 35
21893: PPUSH
21894: CALL_OW 67
// if not HasTask ( ruDisturb ) then
21898: LD_EXP 59
21902: PPUSH
21903: CALL_OW 314
21907: NOT
21908: IFFALSE 21924
// ComMoveUnit ( ruDisturb , Heike ) ;
21910: LD_EXP 59
21914: PPUSH
21915: LD_EXP 39
21919: PPUSH
21920: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
21924: LD_EXP 39
21928: PPUSH
21929: LD_EXP 59
21933: PPUSH
21934: CALL_OW 296
21938: PUSH
21939: LD_INT 6
21941: LESS
21942: PUSH
21943: LD_EXP 59
21947: PPUSH
21948: CALL_OW 302
21952: AND
21953: IFFALSE 21891
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
21955: LD_EXP 14
21959: PPUSH
21960: LD_INT 22
21962: PUSH
21963: LD_INT 2
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 91
21972: PUSH
21973: LD_EXP 59
21977: PUSH
21978: LD_INT 8
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 2
21988: PUSH
21989: LD_INT 25
21991: PUSH
21992: LD_INT 1
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 25
22001: PUSH
22002: LD_INT 11
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 25
22011: PUSH
22012: LD_INT 32
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 25
22021: PUSH
22022: LD_INT 34
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 72
22045: IFFALSE 22055
// isAlarm := true ;
22047: LD_ADDR_EXP 17
22051: PUSH
22052: LD_INT 1
22054: ST_TO_ADDR
// if isAlarm then
22055: LD_EXP 17
22059: IFFALSE 22063
// exit ;
22061: GO 25707
// DialogueOn ;
22063: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
22067: LD_EXP 59
22071: PPUSH
22072: LD_STRING DMcn-Interrupt-1
22074: PPUSH
22075: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
22079: LD_EXP 59
22083: PPUSH
22084: LD_STRING DMcn-Interrupt-2
22086: PPUSH
22087: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
22091: LD_EXP 59
22095: PPUSH
22096: LD_STRING DMcn-Interrupt-3
22098: PPUSH
22099: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
22103: LD_EXP 39
22107: PPUSH
22108: LD_STRING DH-Interrupt-a-4
22110: PPUSH
22111: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
22115: LD_EXP 59
22119: PPUSH
22120: LD_STRING DMcn-Interrupt-a-5
22122: PPUSH
22123: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
22127: LD_EXP 39
22131: PPUSH
22132: LD_STRING DH-Interrupt-a-6
22134: PPUSH
22135: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
22139: LD_EXP 59
22143: PPUSH
22144: LD_STRING DMcn-Interrupt-a-7
22146: PPUSH
22147: CALL_OW 88
// DialogueOff ;
22151: CALL_OW 7
// hasMuchin := true ;
22155: LD_ADDR_EXP 30
22159: PUSH
22160: LD_INT 1
22162: ST_TO_ADDR
// Query ( MuchinInfo ) ;
22163: LD_STRING MuchinInfo
22165: PPUSH
22166: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
22170: LD_STRING M2a
22172: PPUSH
22173: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
22177: LD_INT 105
22179: PPUSH
22180: LD_INT 55
22182: PPUSH
22183: CALL_OW 428
22187: PPUSH
22188: LD_INT 2
22190: PPUSH
22191: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
22195: LD_INT 115
22197: PPUSH
22198: LD_INT 65
22200: PPUSH
22201: CALL_OW 428
22205: PPUSH
22206: LD_INT 2
22208: PPUSH
22209: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
22213: LD_INT 109
22215: PPUSH
22216: LD_INT 59
22218: PPUSH
22219: LD_INT 2
22221: PPUSH
22222: LD_INT 10
22224: NEG
22225: PPUSH
22226: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
22230: LD_INT 109
22232: PPUSH
22233: LD_INT 59
22235: PPUSH
22236: CALL_OW 84
// wait ( 0 0$2 ) ;
22240: LD_INT 70
22242: PPUSH
22243: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
22247: LD_INT 109
22249: PPUSH
22250: LD_INT 59
22252: PPUSH
22253: LD_INT 2
22255: PPUSH
22256: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
22260: LD_INT 35
22262: PPUSH
22263: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
22267: LD_EXP 59
22271: PPUSH
22272: LD_EXP 39
22276: PPUSH
22277: CALL_OW 296
22281: PUSH
22282: LD_INT 6
22284: GREATER
22285: IFFALSE 22301
// ComMoveUnit ( ruDisturb , Heike ) ;
22287: LD_EXP 59
22291: PPUSH
22292: LD_EXP 39
22296: PPUSH
22297: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22301: LD_EXP 14
22305: PPUSH
22306: LD_INT 22
22308: PUSH
22309: LD_INT 2
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 91
22318: PUSH
22319: LD_EXP 59
22323: PUSH
22324: LD_INT 8
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: LD_INT 25
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 25
22347: PUSH
22348: LD_INT 11
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 25
22357: PUSH
22358: LD_INT 32
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 25
22367: PUSH
22368: LD_INT 34
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: LIST
22386: PPUSH
22387: CALL_OW 72
22391: IFFALSE 22403
// begin isAlarm := true ;
22393: LD_ADDR_EXP 17
22397: PUSH
22398: LD_INT 1
22400: ST_TO_ADDR
// exit ;
22401: GO 25707
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
22403: LD_INT 105
22405: PPUSH
22406: LD_INT 55
22408: PPUSH
22409: CALL_OW 428
22413: NOT
22414: PUSH
22415: LD_INT 115
22417: PPUSH
22418: LD_INT 65
22420: PPUSH
22421: CALL_OW 428
22425: NOT
22426: OR
22427: IFFALSE 22439
// begin isAlarm := true ;
22429: LD_ADDR_EXP 17
22433: PUSH
22434: LD_INT 1
22436: ST_TO_ADDR
// exit ;
22437: GO 25707
// end ; until not BuildingsInProgress ( 2 ) ;
22439: LD_INT 2
22441: PPUSH
22442: CALL_OW 345
22446: NOT
22447: IFFALSE 22260
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
22449: LD_INT 105
22451: PPUSH
22452: LD_INT 55
22454: PPUSH
22455: CALL_OW 428
22459: PPUSH
22460: LD_INT 3
22462: PPUSH
22463: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
22467: LD_INT 115
22469: PPUSH
22470: LD_INT 65
22472: PPUSH
22473: CALL_OW 428
22477: PPUSH
22478: LD_INT 3
22480: PPUSH
22481: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
22485: LD_STRING M2a-out
22487: PPUSH
22488: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
22492: LD_EXP 59
22496: PPUSH
22497: LD_INT 2
22499: PPUSH
22500: CALL_OW 120
// wait ( 0 0$3 ) ;
22504: LD_INT 105
22506: PPUSH
22507: CALL_OW 67
// hasMuchin := false ;
22511: LD_ADDR_EXP 30
22515: PUSH
22516: LD_INT 0
22518: ST_TO_ADDR
// wait ( 2 2$00 ) ;
22519: LD_INT 4200
22521: PPUSH
22522: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22526: LD_INT 35
22528: PPUSH
22529: CALL_OW 67
// if not HasTask ( ruDisturb ) then
22533: LD_EXP 59
22537: PPUSH
22538: CALL_OW 314
22542: NOT
22543: IFFALSE 22559
// ComMoveUnit ( ruDisturb , Heike ) ;
22545: LD_EXP 59
22549: PPUSH
22550: LD_EXP 39
22554: PPUSH
22555: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
22559: LD_EXP 39
22563: PPUSH
22564: LD_EXP 59
22568: PPUSH
22569: CALL_OW 296
22573: PUSH
22574: LD_INT 6
22576: LESS
22577: PUSH
22578: LD_EXP 59
22582: PPUSH
22583: CALL_OW 302
22587: AND
22588: IFFALSE 22526
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22590: LD_EXP 14
22594: PPUSH
22595: LD_INT 22
22597: PUSH
22598: LD_INT 2
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 91
22607: PUSH
22608: LD_EXP 59
22612: PUSH
22613: LD_INT 8
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 2
22623: PUSH
22624: LD_INT 25
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 25
22636: PUSH
22637: LD_INT 11
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 25
22646: PUSH
22647: LD_INT 32
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 25
22656: PUSH
22657: LD_INT 34
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: LIST
22675: PPUSH
22676: CALL_OW 72
22680: IFFALSE 22690
// isAlarm := true ;
22682: LD_ADDR_EXP 17
22686: PUSH
22687: LD_INT 1
22689: ST_TO_ADDR
// if isAlarm then
22690: LD_EXP 17
22694: IFFALSE 22698
// exit ;
22696: GO 25707
// DialogueOn ;
22698: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
22702: LD_EXP 59
22706: PPUSH
22707: LD_STRING DMcn-Interrupt-1
22709: PPUSH
22710: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
22714: LD_EXP 59
22718: PPUSH
22719: LD_STRING DMcn-Interrupt-2
22721: PPUSH
22722: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
22726: LD_INT 176
22728: PPUSH
22729: LD_INT 54
22731: PPUSH
22732: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
22736: LD_INT 176
22738: PPUSH
22739: LD_INT 54
22741: PPUSH
22742: LD_INT 2
22744: PPUSH
22745: LD_INT 6
22747: NEG
22748: PPUSH
22749: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
22753: LD_INT 10
22755: PPUSH
22756: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
22760: LD_EXP 59
22764: PPUSH
22765: LD_STRING DMcn-Interrupt-b-3
22767: PPUSH
22768: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
22772: LD_EXP 39
22776: PPUSH
22777: LD_STRING DH-Interrupt-b-4
22779: PPUSH
22780: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
22784: LD_EXP 59
22788: PPUSH
22789: LD_STRING DMcn-Interrupt-b-5
22791: PPUSH
22792: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
22796: LD_EXP 39
22800: PPUSH
22801: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
22805: LD_INT 176
22807: PPUSH
22808: LD_INT 54
22810: PPUSH
22811: LD_INT 2
22813: PPUSH
22814: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
22818: LD_EXP 59
22822: PPUSH
22823: LD_STRING DMcn-Interrupt-b-6
22825: PPUSH
22826: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
22830: LD_EXP 39
22834: PPUSH
22835: LD_STRING DH-Interrupt-b-7
22837: PPUSH
22838: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
22842: LD_EXP 59
22846: PPUSH
22847: LD_STRING DMcn-Interrupt-b-8
22849: PPUSH
22850: CALL_OW 88
// DialogueOff ;
22854: CALL_OW 7
// Query ( MuchinInfo ) ;
22858: LD_STRING MuchinInfo
22860: PPUSH
22861: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
22865: LD_STRING M2b
22867: PPUSH
22868: CALL_OW 337
// hasMuchin := true ;
22872: LD_ADDR_EXP 30
22876: PUSH
22877: LD_INT 1
22879: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22880: LD_INT 35
22882: PPUSH
22883: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
22887: LD_EXP 59
22891: PPUSH
22892: LD_EXP 39
22896: PPUSH
22897: CALL_OW 296
22901: PUSH
22902: LD_INT 6
22904: GREATER
22905: IFFALSE 22921
// ComMoveUnit ( ruDisturb , Heike ) ;
22907: LD_EXP 59
22911: PPUSH
22912: LD_EXP 39
22916: PPUSH
22917: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22921: LD_EXP 14
22925: PPUSH
22926: LD_INT 22
22928: PUSH
22929: LD_INT 2
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 91
22938: PUSH
22939: LD_EXP 59
22943: PUSH
22944: LD_INT 8
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 2
22954: PUSH
22955: LD_INT 25
22957: PUSH
22958: LD_INT 1
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 25
22967: PUSH
22968: LD_INT 11
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 25
22977: PUSH
22978: LD_INT 32
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 25
22987: PUSH
22988: LD_INT 34
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: PPUSH
23007: CALL_OW 72
23011: IFFALSE 23023
// begin isAlarm := true ;
23013: LD_ADDR_EXP 17
23017: PUSH
23018: LD_INT 1
23020: ST_TO_ADDR
// exit ;
23021: GO 25707
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
23023: LD_EXP 39
23027: PPUSH
23028: LD_INT 61
23030: PPUSH
23031: CALL_OW 296
23035: PUSH
23036: LD_INT 4
23038: LESS
23039: IFFALSE 22880
// InGameOn ;
23041: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
23045: LD_INT 173
23047: PPUSH
23048: LD_INT 54
23050: PPUSH
23051: LD_INT 2
23053: PPUSH
23054: LD_INT 8
23056: NEG
23057: PPUSH
23058: CALL_OW 330
// SetSide ( Heike , 3 ) ;
23062: LD_EXP 39
23066: PPUSH
23067: LD_INT 3
23069: PPUSH
23070: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
23074: LD_EXP 39
23078: PPUSH
23079: LD_INT 61
23081: PPUSH
23082: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
23086: LD_EXP 59
23090: PPUSH
23091: LD_INT 61
23093: PPUSH
23094: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
23098: LD_EXP 46
23102: PUSH
23103: LD_EXP 14
23107: IN
23108: PUSH
23109: LD_EXP 46
23113: PPUSH
23114: LD_INT 61
23116: PPUSH
23117: CALL_OW 296
23121: PUSH
23122: LD_INT 12
23124: LESS
23125: AND
23126: IFFALSE 23170
// begin SetSide ( Markov , 3 ) ;
23128: LD_EXP 46
23132: PPUSH
23133: LD_INT 3
23135: PPUSH
23136: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
23140: LD_EXP 46
23144: PPUSH
23145: LD_INT 61
23147: PPUSH
23148: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
23152: LD_INT 35
23154: PPUSH
23155: CALL_OW 67
// until IsInUnit ( Markov ) ;
23159: LD_EXP 46
23163: PPUSH
23164: CALL_OW 310
23168: IFFALSE 23152
// end ; repeat wait ( 0 0$1 ) ;
23170: LD_INT 35
23172: PPUSH
23173: CALL_OW 67
// until IsInUnit ( Heike ) ;
23177: LD_EXP 39
23181: PPUSH
23182: CALL_OW 310
23186: IFFALSE 23170
// SetClass ( Heike , class_mechanic ) ;
23188: LD_EXP 39
23192: PPUSH
23193: LD_INT 3
23195: PPUSH
23196: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
23200: LD_INT 61
23202: PPUSH
23203: LD_INT 21
23205: PPUSH
23206: LD_INT 3
23208: PPUSH
23209: LD_INT 3
23211: PPUSH
23212: LD_INT 43
23214: PPUSH
23215: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
23219: LD_EXP 31
23223: PUSH
23224: LD_EXP 46
23228: PUSH
23229: LD_EXP 14
23233: IN
23234: PUSH
23235: LD_EXP 46
23239: PPUSH
23240: CALL_OW 310
23244: PUSH
23245: LD_INT 61
23247: EQUAL
23248: OR
23249: AND
23250: IFFALSE 23718
// begin wait ( 0 0$5 ) ;
23252: LD_INT 175
23254: PPUSH
23255: CALL_OW 67
// SetSide ( Heike , 2 ) ;
23259: LD_EXP 39
23263: PPUSH
23264: LD_INT 2
23266: PPUSH
23267: CALL_OW 235
// SetSide ( Markov , 2 ) ;
23271: LD_EXP 46
23275: PPUSH
23276: LD_INT 2
23278: PPUSH
23279: CALL_OW 235
// if not Markov in heikeSquad then
23283: LD_EXP 46
23287: PUSH
23288: LD_EXP 14
23292: IN
23293: NOT
23294: IFFALSE 23316
// heikeSquad := Join ( heikeSquad , Markov ) ;
23296: LD_ADDR_EXP 14
23300: PUSH
23301: LD_EXP 14
23305: PPUSH
23306: LD_EXP 46
23310: PPUSH
23311: CALL 64437 0 2
23315: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
23316: LD_EXP 46
23320: PPUSH
23321: LD_STRING DMar-Factory-1
23323: PPUSH
23324: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
23328: LD_INT 61
23330: PPUSH
23331: LD_INT 99
23333: PPUSH
23334: CALL_OW 329
// game_speed := 4 ;
23338: LD_ADDR_OWVAR 65
23342: PUSH
23343: LD_INT 4
23345: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
23346: LD_EXP 59
23350: PPUSH
23351: CALL_OW 122
// ComExitBuilding ( Markov ) ;
23355: LD_EXP 46
23359: PPUSH
23360: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
23364: LD_EXP 59
23368: PPUSH
23369: LD_INT 171
23371: PPUSH
23372: LD_INT 51
23374: PPUSH
23375: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
23379: LD_EXP 46
23383: PPUSH
23384: LD_INT 167
23386: PPUSH
23387: LD_INT 50
23389: PPUSH
23390: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
23394: LD_EXP 46
23398: PPUSH
23399: LD_EXP 59
23403: PPUSH
23404: CALL_OW 179
// wait ( 0 0$5 ) ;
23408: LD_INT 175
23410: PPUSH
23411: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
23415: LD_EXP 46
23419: PPUSH
23420: LD_STRING DMar-Factory-2
23422: PPUSH
23423: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
23427: LD_ADDR_VAR 0 2
23431: PUSH
23432: LD_INT 22
23434: PUSH
23435: LD_INT 3
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 33
23444: PUSH
23445: LD_INT 3
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PPUSH
23456: CALL_OW 69
23460: PUSH
23461: LD_INT 1
23463: ARRAY
23464: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
23465: LD_EXP 59
23469: PPUSH
23470: LD_VAR 0 2
23474: PPUSH
23475: CALL_OW 119
// async ;
23479: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
23480: LD_EXP 59
23484: PPUSH
23485: LD_STRING DMcn-Factory-3
23487: PPUSH
23488: CALL_OW 88
// ComAttackUnit ( veh , ruDisturb ) ;
23492: LD_VAR 0 2
23496: PPUSH
23497: LD_EXP 59
23501: PPUSH
23502: CALL_OW 115
// sync ;
23506: SYNC
// wait ( 0 0$1 ) ;
23507: LD_INT 35
23509: PPUSH
23510: CALL_OW 67
// KillUnit ( ruDisturb ) ;
23514: LD_EXP 59
23518: PPUSH
23519: CALL_OW 66
// SetSide ( veh , 7 ) ;
23523: LD_VAR 0 2
23527: PPUSH
23528: LD_INT 7
23530: PPUSH
23531: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
23535: LD_VAR 0 2
23539: PPUSH
23540: LD_INT 84
23542: PPUSH
23543: LD_INT 38
23545: PPUSH
23546: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
23550: LD_EXP 60
23554: PUSH
23555: LD_INT 1
23557: ARRAY
23558: PPUSH
23559: CALL_OW 258
23563: PUSH
23564: LD_INT 1
23566: EQUAL
23567: IFFALSE 23587
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
23569: LD_EXP 60
23573: PUSH
23574: LD_INT 1
23576: ARRAY
23577: PPUSH
23578: LD_STRING DRum-Factory-4
23580: PPUSH
23581: CALL_OW 88
23585: GO 23603
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
23587: LD_EXP 60
23591: PUSH
23592: LD_INT 1
23594: ARRAY
23595: PPUSH
23596: LD_STRING DRuf-Factory-4
23598: PPUSH
23599: CALL_OW 88
// wait ( 0 0$1 ) ;
23603: LD_INT 35
23605: PPUSH
23606: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
23610: LD_EXP 60
23614: PPUSH
23615: LD_INT 26
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PPUSH
23625: CALL_OW 72
23629: PUSH
23630: LD_INT 1
23632: ARRAY
23633: PPUSH
23634: LD_STRING DRum-Factory-6
23636: PPUSH
23637: CALL_OW 88
// wait ( 0 0$2 ) ;
23641: LD_INT 70
23643: PPUSH
23644: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
23648: LD_EXP 39
23652: PPUSH
23653: LD_INT 33
23655: PPUSH
23656: CALL_OW 336
// ComExitBuilding ( Heike ) ;
23660: LD_EXP 39
23664: PPUSH
23665: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
23669: LD_EXP 39
23673: PPUSH
23674: LD_INT 168
23676: PPUSH
23677: LD_INT 54
23679: PPUSH
23680: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
23684: LD_INT 173
23686: PPUSH
23687: LD_INT 54
23689: PPUSH
23690: LD_INT 2
23692: PPUSH
23693: CALL_OW 331
// InGameOff ;
23697: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
23701: LD_STRING M2b-out
23703: PPUSH
23704: CALL_OW 337
// hasMuchin := false ;
23708: LD_ADDR_EXP 30
23712: PUSH
23713: LD_INT 0
23715: ST_TO_ADDR
// exit ;
23716: GO 25707
// end ; wait ( 0 0$5 ) ;
23718: LD_INT 175
23720: PPUSH
23721: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
23725: LD_INT 61
23727: PPUSH
23728: LD_INT 99
23730: PPUSH
23731: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
23735: LD_EXP 46
23739: PUSH
23740: LD_EXP 14
23744: IN
23745: PUSH
23746: LD_EXP 46
23750: PPUSH
23751: CALL_OW 255
23755: PUSH
23756: LD_INT 3
23758: EQUAL
23759: AND
23760: IFFALSE 23783
// begin SetSide ( Markov , 2 ) ;
23762: LD_EXP 46
23766: PPUSH
23767: LD_INT 2
23769: PPUSH
23770: CALL_OW 235
// ComExitBuilding ( Markov ) ;
23774: LD_EXP 46
23778: PPUSH
23779: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
23783: LD_EXP 39
23787: PPUSH
23788: LD_INT 2
23790: PPUSH
23791: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
23795: LD_EXP 39
23799: PPUSH
23800: LD_INT 33
23802: PPUSH
23803: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
23807: LD_EXP 59
23811: PPUSH
23812: CALL_OW 122
// ComExitBuilding ( Heike ) ;
23816: LD_EXP 39
23820: PPUSH
23821: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
23825: LD_EXP 39
23829: PPUSH
23830: LD_INT 168
23832: PPUSH
23833: LD_INT 54
23835: PPUSH
23836: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
23840: LD_INT 173
23842: PPUSH
23843: LD_INT 54
23845: PPUSH
23846: LD_INT 2
23848: PPUSH
23849: CALL_OW 331
// InGameOff ;
23853: CALL_OW 9
// wait ( 3 ) ;
23857: LD_INT 3
23859: PPUSH
23860: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
23864: LD_EXP 59
23868: PPUSH
23869: LD_INT 2
23871: PPUSH
23872: CALL_OW 120
// wait ( 0 0$3 ) ;
23876: LD_INT 105
23878: PPUSH
23879: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
23883: LD_STRING M2b-out
23885: PPUSH
23886: CALL_OW 337
// hasMuchin := false ;
23890: LD_ADDR_EXP 30
23894: PUSH
23895: LD_INT 0
23897: ST_TO_ADDR
// wait ( 2 2$00 ) ;
23898: LD_INT 4200
23900: PPUSH
23901: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23905: LD_INT 35
23907: PPUSH
23908: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23912: LD_EXP 59
23916: PPUSH
23917: CALL_OW 314
23921: NOT
23922: IFFALSE 23938
// ComMoveUnit ( ruDisturb , Heike ) ;
23924: LD_EXP 59
23928: PPUSH
23929: LD_EXP 39
23933: PPUSH
23934: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
23938: LD_EXP 39
23942: PPUSH
23943: LD_EXP 59
23947: PPUSH
23948: CALL_OW 296
23952: PUSH
23953: LD_INT 2
23955: LESS
23956: PUSH
23957: LD_EXP 59
23961: PPUSH
23962: CALL_OW 302
23966: AND
23967: IFFALSE 23905
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23969: LD_EXP 14
23973: PPUSH
23974: LD_INT 22
23976: PUSH
23977: LD_INT 2
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 91
23986: PUSH
23987: LD_EXP 59
23991: PUSH
23992: LD_INT 8
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 2
24002: PUSH
24003: LD_INT 25
24005: PUSH
24006: LD_INT 1
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 25
24015: PUSH
24016: LD_INT 11
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 25
24025: PUSH
24026: LD_INT 32
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 25
24035: PUSH
24036: LD_INT 34
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: LIST
24054: PPUSH
24055: CALL_OW 72
24059: IFFALSE 24069
// isAlarm := true ;
24061: LD_ADDR_EXP 17
24065: PUSH
24066: LD_INT 1
24068: ST_TO_ADDR
// if isAlarm then
24069: LD_EXP 17
24073: IFFALSE 24077
// exit ;
24075: GO 25707
// ComTurnUnit ( Heike , ruDisturb ) ;
24077: LD_EXP 39
24081: PPUSH
24082: LD_EXP 59
24086: PPUSH
24087: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
24091: LD_EXP 59
24095: PPUSH
24096: LD_EXP 39
24100: PPUSH
24101: CALL_OW 119
// wait ( 3 ) ;
24105: LD_INT 3
24107: PPUSH
24108: CALL_OW 67
// for i := 1 to 3 do
24112: LD_ADDR_VAR 0 1
24116: PUSH
24117: DOUBLE
24118: LD_INT 1
24120: DEC
24121: ST_TO_ADDR
24122: LD_INT 3
24124: PUSH
24125: FOR_TO
24126: IFFALSE 24143
// CreateCratesArea ( 5 , cratesArea , false ) ;
24128: LD_INT 5
24130: PPUSH
24131: LD_INT 58
24133: PPUSH
24134: LD_INT 0
24136: PPUSH
24137: CALL_OW 55
24141: GO 24125
24143: POP
24144: POP
// uc_side := 3 ;
24145: LD_ADDR_OWVAR 20
24149: PUSH
24150: LD_INT 3
24152: ST_TO_ADDR
// uc_nation := nation_russian ;
24153: LD_ADDR_OWVAR 21
24157: PUSH
24158: LD_INT 3
24160: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
24161: LD_INT 21
24163: PPUSH
24164: LD_INT 3
24166: PPUSH
24167: LD_INT 1
24169: PPUSH
24170: LD_INT 51
24172: PPUSH
24173: LD_INT 100
24175: PPUSH
24176: CALL 32003 0 5
// veh := CreateVehicle ;
24180: LD_ADDR_VAR 0 2
24184: PUSH
24185: CALL_OW 45
24189: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
24190: LD_VAR 0 2
24194: PPUSH
24195: LD_INT 104
24197: PPUSH
24198: LD_INT 41
24200: PPUSH
24201: LD_INT 3
24203: PPUSH
24204: LD_INT 0
24206: PPUSH
24207: CALL 66577 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
24211: LD_VAR 0 2
24215: PPUSH
24216: LD_INT 1
24218: PPUSH
24219: LD_INT 100
24221: PPUSH
24222: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
24226: CALL_OW 44
24230: PPUSH
24231: LD_VAR 0 2
24235: PPUSH
24236: CALL_OW 52
// DialogueOn ;
24240: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24244: LD_EXP 59
24248: PPUSH
24249: LD_STRING DMcn-Interrupt-1
24251: PPUSH
24252: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24256: LD_EXP 59
24260: PPUSH
24261: LD_STRING DMcn-Interrupt-2
24263: PPUSH
24264: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
24268: LD_EXP 59
24272: PPUSH
24273: LD_STRING DMcn-Interrupt-c-3
24275: PPUSH
24276: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
24280: LD_INT 101
24282: PPUSH
24283: LD_INT 38
24285: PPUSH
24286: LD_INT 2
24288: PPUSH
24289: LD_INT 10
24291: NEG
24292: PPUSH
24293: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
24297: LD_INT 101
24299: PPUSH
24300: LD_INT 38
24302: PPUSH
24303: CALL_OW 84
// wait ( 0 0$2 ) ;
24307: LD_INT 70
24309: PPUSH
24310: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
24314: LD_INT 101
24316: PPUSH
24317: LD_INT 38
24319: PPUSH
24320: LD_INT 2
24322: PPUSH
24323: CALL_OW 331
// RemoveUnit ( veh ) ;
24327: LD_VAR 0 2
24331: PPUSH
24332: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
24336: LD_EXP 59
24340: PPUSH
24341: LD_STRING DMcn-Interrupt-c-4
24343: PPUSH
24344: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
24348: LD_EXP 39
24352: PPUSH
24353: LD_STRING DH-Interrupt-c-5
24355: PPUSH
24356: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
24360: LD_EXP 59
24364: PPUSH
24365: LD_STRING DMcn-Interrupt-c-6
24367: PPUSH
24368: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
24372: LD_EXP 39
24376: PPUSH
24377: LD_STRING DH-Interrupt-c-7
24379: PPUSH
24380: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
24384: LD_EXP 59
24388: PPUSH
24389: LD_STRING DMcn-Interrupt-c-8
24391: PPUSH
24392: CALL_OW 88
// DialogueOff ;
24396: CALL_OW 7
// hasMuchin := true ;
24400: LD_ADDR_EXP 30
24404: PUSH
24405: LD_INT 1
24407: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24408: LD_STRING MuchinInfo
24410: PPUSH
24411: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
24415: LD_STRING M2c
24417: PPUSH
24418: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
24422: LD_INT 35
24424: PPUSH
24425: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24429: LD_EXP 59
24433: PPUSH
24434: LD_EXP 39
24438: PPUSH
24439: CALL_OW 296
24443: PUSH
24444: LD_INT 6
24446: GREATER
24447: IFFALSE 24463
// ComMoveUnit ( ruDisturb , Heike ) ;
24449: LD_EXP 59
24453: PPUSH
24454: LD_EXP 39
24458: PPUSH
24459: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24463: LD_EXP 14
24467: PPUSH
24468: LD_INT 22
24470: PUSH
24471: LD_INT 2
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 91
24480: PUSH
24481: LD_EXP 59
24485: PUSH
24486: LD_INT 8
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 2
24496: PUSH
24497: LD_INT 25
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 25
24509: PUSH
24510: LD_INT 11
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 25
24519: PUSH
24520: LD_INT 32
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 25
24529: PUSH
24530: LD_INT 34
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: LIST
24548: PPUSH
24549: CALL_OW 72
24553: IFFALSE 24565
// begin isAlarm := true ;
24555: LD_ADDR_EXP 17
24559: PUSH
24560: LD_INT 1
24562: ST_TO_ADDR
// exit ;
24563: GO 25707
// end ; until UnitFilter ( heikeSquad , [ f_dist , ruOutpost0 , 6 ] ) and GetDistUnits ( Heike , ruOutpost0 ) < 6 ;
24565: LD_EXP 14
24569: PPUSH
24570: LD_INT 91
24572: PUSH
24573: LD_INT 6
24575: PUSH
24576: LD_INT 6
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: LIST
24583: PPUSH
24584: CALL_OW 72
24588: PUSH
24589: LD_EXP 39
24593: PPUSH
24594: LD_INT 6
24596: PPUSH
24597: CALL_OW 296
24601: PUSH
24602: LD_INT 6
24604: LESS
24605: AND
24606: IFFALSE 24422
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
24608: LD_ADDR_VAR 0 3
24612: PUSH
24613: LD_EXP 14
24617: PUSH
24618: LD_EXP 39
24622: UNION
24623: PPUSH
24624: LD_INT 25
24626: PUSH
24627: LD_INT 33
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 91
24636: PUSH
24637: LD_INT 6
24639: PUSH
24640: LD_INT 12
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: LIST
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PPUSH
24652: CALL_OW 72
24656: ST_TO_ADDR
// for i in tmp do
24657: LD_ADDR_VAR 0 1
24661: PUSH
24662: LD_VAR 0 3
24666: PUSH
24667: FOR_IN
24668: IFFALSE 24699
// begin SetSide ( i , 3 ) ;
24670: LD_VAR 0 1
24674: PPUSH
24675: LD_INT 3
24677: PPUSH
24678: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
24682: LD_VAR 0 1
24686: PPUSH
24687: LD_INT 101
24689: PPUSH
24690: LD_INT 38
24692: PPUSH
24693: CALL_OW 111
// end ;
24697: GO 24667
24699: POP
24700: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
24701: LD_EXP 59
24705: PPUSH
24706: LD_INT 104
24708: PPUSH
24709: LD_INT 37
24711: PPUSH
24712: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
24716: LD_EXP 59
24720: PPUSH
24721: LD_EXP 39
24725: PPUSH
24726: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
24730: LD_INT 35
24732: PPUSH
24733: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
24737: LD_ADDR_VAR 0 4
24741: PUSH
24742: LD_INT 58
24744: PPUSH
24745: CALL_OW 435
24749: ST_TO_ADDR
// for i in tmp do
24750: LD_ADDR_VAR 0 1
24754: PUSH
24755: LD_VAR 0 3
24759: PUSH
24760: FOR_IN
24761: IFFALSE 24804
// if not HasTask ( i ) then
24763: LD_VAR 0 1
24767: PPUSH
24768: CALL_OW 314
24772: NOT
24773: IFFALSE 24802
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
24775: LD_VAR 0 1
24779: PPUSH
24780: LD_VAR 0 4
24784: PUSH
24785: LD_INT 1
24787: ARRAY
24788: PPUSH
24789: LD_VAR 0 4
24793: PUSH
24794: LD_INT 2
24796: ARRAY
24797: PPUSH
24798: CALL_OW 117
24802: GO 24760
24804: POP
24805: POP
// until not cr ;
24806: LD_VAR 0 4
24810: NOT
24811: IFFALSE 24730
// wait ( 0 0$2 ) ;
24813: LD_INT 70
24815: PPUSH
24816: CALL_OW 67
// for i in tmp do
24820: LD_ADDR_VAR 0 1
24824: PUSH
24825: LD_VAR 0 3
24829: PUSH
24830: FOR_IN
24831: IFFALSE 24847
// SetSide ( i , 2 ) ;
24833: LD_VAR 0 1
24837: PPUSH
24838: LD_INT 2
24840: PPUSH
24841: CALL_OW 235
24845: GO 24830
24847: POP
24848: POP
// if Kaia in tmp then
24849: LD_EXP 44
24853: PUSH
24854: LD_VAR 0 3
24858: IN
24859: IFFALSE 25129
// begin InGameOn ;
24861: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
24865: LD_EXP 44
24869: PPUSH
24870: LD_EXP 59
24874: PPUSH
24875: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
24879: LD_EXP 59
24883: PPUSH
24884: LD_EXP 44
24888: PPUSH
24889: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
24893: LD_EXP 44
24897: PPUSH
24898: LD_EXP 59
24902: PPUSH
24903: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
24907: LD_EXP 44
24911: PPUSH
24912: LD_STRING DK-Assassin-1
24914: PPUSH
24915: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
24919: LD_EXP 59
24923: PPUSH
24924: LD_STRING DMcn-Assassin-2
24926: PPUSH
24927: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
24931: LD_EXP 44
24935: PPUSH
24936: LD_STRING DK-Assassin-3
24938: PPUSH
24939: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
24943: LD_EXP 59
24947: PPUSH
24948: LD_STRING DMcn-Assassin-4
24950: PPUSH
24951: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
24955: LD_EXP 44
24959: PPUSH
24960: LD_STRING DK-Assassin-5
24962: PPUSH
24963: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
24967: LD_EXP 59
24971: PPUSH
24972: LD_STRING DMcn-Assassin-6
24974: PPUSH
24975: CALL_OW 88
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
24979: LD_EXP 44
24983: PUSH
24984: LD_EXP 59
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PPUSH
24993: LD_INT 6
24995: PPUSH
24996: CALL_OW 120
// wait ( 0 0$5 ) ;
25000: LD_INT 175
25002: PPUSH
25003: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
25007: LD_EXP 44
25011: PPUSH
25012: LD_STRING DK-Assassin-7
25014: PPUSH
25015: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
25019: LD_EXP 59
25023: PPUSH
25024: LD_STRING DMcn-Assassin-8
25026: PPUSH
25027: CALL_OW 88
// wait ( 0 0$0.3 ) ;
25031: LD_INT 10
25033: PPUSH
25034: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
25038: LD_EXP 44
25042: PPUSH
25043: LD_STRING DK-Assassin-9
25045: PPUSH
25046: CALL_OW 88
// wait ( 0 0$2 ) ;
25050: LD_INT 70
25052: PPUSH
25053: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
25057: LD_EXP 44
25061: PPUSH
25062: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
25066: LD_EXP 59
25070: PPUSH
25071: CALL_OW 64
// AddComMoveUnit ( Kaia , Heike ) ;
25075: LD_EXP 44
25079: PPUSH
25080: LD_EXP 39
25084: PPUSH
25085: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
25089: LD_EXP 44
25093: PPUSH
25094: LD_STRING DK-Assasin-10
25096: PPUSH
25097: CALL_OW 88
// InGameOff ;
25101: CALL_OW 9
// ChangeMissionObjectives ( M2c-out ) ;
25105: LD_STRING M2c-out
25107: PPUSH
25108: CALL_OW 337
// wait ( 0 0$3 ) ;
25112: LD_INT 105
25114: PPUSH
25115: CALL_OW 67
// hasMuchin := false ;
25119: LD_ADDR_EXP 30
25123: PUSH
25124: LD_INT 0
25126: ST_TO_ADDR
// exit ;
25127: GO 25707
// end ; ChangeMissionObjectives ( M2c-out ) ;
25129: LD_STRING M2c-out
25131: PPUSH
25132: CALL_OW 337
// InGameOn ;
25136: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
25140: LD_EXP 59
25144: PPUSH
25145: LD_STRING DMcn-Fail-1
25147: PPUSH
25148: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
25152: LD_VAR 0 3
25156: PPUSH
25157: LD_INT 114
25159: PPUSH
25160: LD_INT 17
25162: PPUSH
25163: CALL_OW 111
// wait ( 0 0$1 ) ;
25167: LD_INT 35
25169: PPUSH
25170: CALL_OW 67
// async ;
25174: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
25175: LD_EXP 59
25179: PPUSH
25180: LD_EXP 39
25184: PPUSH
25185: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
25189: LD_EXP 59
25193: PPUSH
25194: LD_STRING DMcn-Fail-2
25196: PPUSH
25197: CALL_OW 88
// ComStop ( Heike ) ;
25201: LD_EXP 39
25205: PPUSH
25206: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
25210: LD_EXP 39
25214: PPUSH
25215: LD_EXP 59
25219: PPUSH
25220: CALL_OW 179
// sync ;
25224: SYNC
// Say ( Heike , DH-Fail-3 ) ;
25225: LD_EXP 39
25229: PPUSH
25230: LD_STRING DH-Fail-3
25232: PPUSH
25233: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
25237: LD_EXP 59
25241: PPUSH
25242: LD_STRING DMcn-Fail-4
25244: PPUSH
25245: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
25249: LD_EXP 39
25253: PUSH
25254: LD_EXP 59
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PPUSH
25263: LD_INT 41
25265: PPUSH
25266: LD_INT 19
25268: PPUSH
25269: CALL_OW 111
// wait ( 0 0$2 ) ;
25273: LD_INT 70
25275: PPUSH
25276: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
25280: LD_EXP 59
25284: PPUSH
25285: LD_INT 40
25287: PPUSH
25288: LD_INT 19
25290: PPUSH
25291: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
25295: LD_EXP 39
25299: PPUSH
25300: LD_INT 43
25302: PPUSH
25303: LD_INT 21
25305: PPUSH
25306: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
25310: LD_EXP 59
25314: PPUSH
25315: LD_EXP 39
25319: PPUSH
25320: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
25324: LD_EXP 39
25328: PPUSH
25329: LD_EXP 59
25333: PPUSH
25334: CALL_OW 179
// RaiseSailEvent ( centerCamEvent ) ;
25338: LD_INT 3
25340: PPUSH
25341: CALL_OW 427
// wait ( 0 0$2 ) ;
25345: LD_INT 70
25347: PPUSH
25348: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
25352: LD_EXP 59
25356: PPUSH
25357: LD_STRING DMcn-Fail-5
25359: PPUSH
25360: CALL_OW 88
// wait ( 0 0$2 ) ;
25364: LD_INT 70
25366: PPUSH
25367: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
25371: LD_EXP 59
25375: PPUSH
25376: LD_STRING DMcn-Fail-6
25378: PPUSH
25379: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
25383: LD_INT 35
25385: PPUSH
25386: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
25390: LD_EXP 39
25394: PPUSH
25395: LD_INT 43
25397: PPUSH
25398: LD_INT 21
25400: PPUSH
25401: CALL_OW 307
25405: IFFALSE 25383
// case Query ( MuchinQuestion ) of 1 :
25407: LD_STRING MuchinQuestion
25409: PPUSH
25410: CALL_OW 97
25414: PUSH
25415: LD_INT 1
25417: DOUBLE
25418: EQUAL
25419: IFTRUE 25423
25421: GO 25523
25423: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
25424: LD_EXP 59
25428: PPUSH
25429: LD_STRING DMcn-Fail-7
25431: PPUSH
25432: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
25436: LD_EXP 39
25440: PPUSH
25441: LD_STRING DH-Fail-8
25443: PPUSH
25444: CALL_OW 88
// wait ( 0 0$0.3 ) ;
25448: LD_INT 10
25450: PPUSH
25451: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
25455: LD_EXP 39
25459: PPUSH
25460: LD_STRING DH-Fail-9
25462: PPUSH
25463: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
25467: LD_EXP 39
25471: PPUSH
25472: LD_STRING DH-Fail-10
25474: PPUSH
25475: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
25479: LD_EXP 59
25483: PPUSH
25484: LD_STRING DMcn-Fail-11
25486: PPUSH
25487: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
25491: LD_EXP 59
25495: PPUSH
25496: LD_EXP 39
25500: PPUSH
25501: CALL_OW 115
// wait ( 0 0$2 ) ;
25505: LD_INT 70
25507: PPUSH
25508: CALL_OW 67
// KillUnit ( Heike ) ;
25512: LD_EXP 39
25516: PPUSH
25517: CALL_OW 66
// end ; 2 :
25521: GO 25703
25523: LD_INT 2
25525: DOUBLE
25526: EQUAL
25527: IFTRUE 25531
25529: GO 25702
25531: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
25532: LD_EXP 39
25536: PPUSH
25537: LD_STRING DH-Fail-a-8
25539: PPUSH
25540: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
25544: LD_EXP 39
25548: PPUSH
25549: LD_STRING DH-Fail-a-9
25551: PPUSH
25552: CALL_OW 88
// Say ( ruDisturb , DH-Fail-10 ) ;
25556: LD_EXP 59
25560: PPUSH
25561: LD_STRING DH-Fail-10
25563: PPUSH
25564: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
25568: LD_EXP 39
25572: PPUSH
25573: LD_STRING DH-Fail-a-11
25575: PPUSH
25576: CALL_OW 88
// async ;
25580: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
25581: LD_EXP 59
25585: PPUSH
25586: LD_EXP 39
25590: PPUSH
25591: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
25595: LD_EXP 59
25599: PPUSH
25600: LD_EXP 39
25604: PPUSH
25605: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
25609: LD_EXP 59
25613: PPUSH
25614: LD_STRING DH-Fail-12
25616: PPUSH
25617: CALL_OW 88
// sync ;
25621: SYNC
// wait ( 0 0$1 ) ;
25622: LD_INT 35
25624: PPUSH
25625: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
25629: LD_EXP 39
25633: PPUSH
25634: LD_STRING DH-Fail-a-13
25636: PPUSH
25637: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
25641: LD_EXP 59
25645: PPUSH
25646: LD_INT 100
25648: PPUSH
25649: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
25653: LD_EXP 59
25657: PPUSH
25658: LD_STRING DMcn-Fail-a-14
25660: PPUSH
25661: CALL_OW 91
// KillUnit ( ruDisturb ) ;
25665: LD_EXP 59
25669: PPUSH
25670: CALL_OW 66
// wait ( 0 0$1 ) ;
25674: LD_INT 35
25676: PPUSH
25677: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
25681: LD_EXP 39
25685: PPUSH
25686: LD_STRING DH-Fail-a-15
25688: PPUSH
25689: CALL_OW 88
// YouLost ( FailMuchin ) ;
25693: LD_STRING FailMuchin
25695: PPUSH
25696: CALL_OW 104
// end ; end ;
25700: GO 25703
25702: POP
// InGameOff ;
25703: CALL_OW 9
// end ; end_of_file
25707: PPOPN 4
25709: END
// every 0 0$1 marked gameStartEvent do
25710: GO 25712
25712: DISABLE
// begin enable ;
25713: ENABLE
// if not contactWithAmerican then
25714: LD_EXP 25
25718: NOT
25719: IFFALSE 25764
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
25721: LD_ADDR_OWVAR 47
25725: PUSH
25726: LD_STRING #X108-1
25728: PUSH
25729: LD_INT 22
25731: PUSH
25732: LD_INT 5
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 21
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PPUSH
25753: CALL_OW 69
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: ST_TO_ADDR
25762: GO 25844
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , #X108-2 , UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ] ;
25764: LD_ADDR_OWVAR 47
25768: PUSH
25769: LD_STRING #X108-1
25771: PUSH
25772: LD_INT 22
25774: PUSH
25775: LD_INT 5
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 21
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PPUSH
25796: CALL_OW 69
25800: PUSH
25801: LD_STRING #X108-2
25803: PUSH
25804: LD_EXP 51
25808: PPUSH
25809: LD_INT 22
25811: PUSH
25812: LD_INT 4
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 21
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PPUSH
25833: CALL_OW 72
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: ST_TO_ADDR
// end ; end_of_file
25844: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
25845: LD_EXP 39
25849: PPUSH
25850: LD_INT 59
25852: PPUSH
25853: CALL_OW 308
25857: IFFALSE 25979
25859: GO 25861
25861: DISABLE
// begin Query ( FinalInfo ) ;
25862: LD_STRING FinalInfo
25864: PPUSH
25865: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
25869: LD_INT 59
25871: PPUSH
25872: LD_INT 1
25874: PPUSH
25875: CALL_OW 424
// end_the_mission_allowed := true ;
25879: LD_ADDR_OWVAR 57
25883: PUSH
25884: LD_INT 1
25886: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25887: LD_INT 35
25889: PPUSH
25890: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
25894: LD_INT 22
25896: PUSH
25897: LD_INT 2
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 21
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 95
25916: PUSH
25917: LD_INT 59
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: LIST
25928: PPUSH
25929: CALL_OW 69
25933: PPUSH
25934: CALL 29090 0 1
25938: PUSH
25939: LD_INT 22
25941: PUSH
25942: LD_INT 2
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 21
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PPUSH
25963: CALL_OW 69
25967: PPUSH
25968: CALL 29090 0 1
25972: EQUAL
25973: IFFALSE 25887
// EndMission ;
25975: CALL 25987 0 0
// end ;
25979: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
25980: CALL 25987 0 0
// end ;
25984: PPOPN 1
25986: END
// function EndMission ; begin
25987: LD_INT 0
25989: PPUSH
// if not IsInArea ( Heike , finalArea ) then
25990: LD_EXP 39
25994: PPUSH
25995: LD_INT 59
25997: PPUSH
25998: CALL_OW 308
26002: NOT
26003: IFFALSE 26014
// begin Query ( HeikeOutOfArea ) ;
26005: LD_STRING HeikeOutOfArea
26007: PPUSH
26008: CALL_OW 97
// exit ;
26012: GO 26797
// end ; if not IsOk ( Heike ) then
26014: LD_EXP 39
26018: PPUSH
26019: CALL_OW 302
26023: NOT
26024: IFFALSE 26035
// begin Query ( HeikeIsHurt ) ;
26026: LD_STRING HeikeIsHurt
26028: PPUSH
26029: CALL_OW 97
// exit ;
26033: GO 26797
// end ; if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
26035: LD_INT 22
26037: PUSH
26038: LD_INT 5
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 21
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PPUSH
26059: CALL_OW 69
26063: PUSH
26064: LD_INT 0
26066: EQUAL
26067: PUSH
26068: LD_EXP 32
26072: PUSH
26073: LD_INT 0
26075: EQUAL
26076: AND
26077: IFFALSE 26091
// AddMedal ( med1 , 1 ) else
26079: LD_STRING med1
26081: PPUSH
26082: LD_INT 1
26084: PPUSH
26085: CALL_OW 101
26089: GO 26102
// AddMedal ( med1 , - 1 ) ;
26091: LD_STRING med1
26093: PPUSH
26094: LD_INT 1
26096: NEG
26097: PPUSH
26098: CALL_OW 101
// if explosivePlantedList >= 3 then
26102: LD_EXP 29
26106: PUSH
26107: LD_INT 3
26109: GREATEREQUAL
26110: IFFALSE 26124
// AddMedal ( med2 , 1 ) else
26112: LD_STRING med2
26114: PPUSH
26115: LD_INT 1
26117: PPUSH
26118: CALL_OW 101
26122: GO 26158
// if explosivePlantedList < 3 then
26124: LD_EXP 29
26128: PUSH
26129: LD_INT 3
26131: LESS
26132: IFFALSE 26147
// AddMedal ( med2 , - 2 ) else
26134: LD_STRING med2
26136: PPUSH
26137: LD_INT 2
26139: NEG
26140: PPUSH
26141: CALL_OW 101
26145: GO 26158
// AddMedal ( med2 , - 1 ) ;
26147: LD_STRING med2
26149: PPUSH
26150: LD_INT 1
26152: NEG
26153: PPUSH
26154: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
26158: LD_INT 5
26160: PPUSH
26161: LD_INT 2
26163: PPUSH
26164: CALL_OW 321
26168: PUSH
26169: LD_INT 2
26171: EQUAL
26172: IFFALSE 26186
// AddMedal ( med3 , 1 ) else
26174: LD_STRING med3
26176: PPUSH
26177: LD_INT 1
26179: PPUSH
26180: CALL_OW 101
26184: GO 26197
// AddMedal ( med3 , - 1 ) ;
26186: LD_STRING med3
26188: PPUSH
26189: LD_INT 1
26191: NEG
26192: PPUSH
26193: CALL_OW 101
// GiveMedals ( MAIN ) ;
26197: LD_STRING MAIN
26199: PPUSH
26200: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26204: LD_INT 22
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 23
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 21
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: LIST
26238: PPUSH
26239: CALL_OW 69
26243: PPUSH
26244: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
26248: LD_EXP 53
26252: PUSH
26253: LD_EXP 53
26257: PPUSH
26258: CALL_OW 255
26262: PUSH
26263: LD_INT 2
26265: EQUAL
26266: AND
26267: IFFALSE 26281
// SaveCharacters ( Doug , 08_UsCommander ) ;
26269: LD_EXP 53
26273: PPUSH
26274: LD_STRING 08_UsCommander
26276: PPUSH
26277: CALL_OW 38
// if Harris and GetSide ( Harris ) = 2 then
26281: LD_EXP 52
26285: PUSH
26286: LD_EXP 52
26290: PPUSH
26291: CALL_OW 255
26295: PUSH
26296: LD_INT 2
26298: EQUAL
26299: AND
26300: IFFALSE 26314
// SaveCharacters ( Harris , 08_Harris ) ;
26302: LD_EXP 52
26306: PPUSH
26307: LD_STRING 08_Harris
26309: PPUSH
26310: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff [ Doug , Harris ] , 08_Americans ) ;
26314: LD_INT 22
26316: PUSH
26317: LD_INT 2
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 23
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 21
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: LIST
26348: PPUSH
26349: CALL_OW 69
26353: PUSH
26354: LD_EXP 53
26358: PUSH
26359: LD_EXP 52
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: DIFF
26368: PPUSH
26369: LD_STRING 08_Americans
26371: PPUSH
26372: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
26376: LD_EXP 39
26380: PPUSH
26381: CALL_OW 248
26385: PUSH
26386: LD_INT 3
26388: EQUAL
26389: IFFALSE 26419
// begin CopySkills ( Heike , HeikeTmp ) ;
26391: LD_EXP 39
26395: PPUSH
26396: LD_EXP 55
26400: PPUSH
26401: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
26405: LD_EXP 55
26409: PPUSH
26410: LD_STRING 08_Heike
26412: PPUSH
26413: CALL_OW 38
// end else
26417: GO 26431
// SaveCharacters ( Heike , 08_Heike ) ;
26419: LD_EXP 39
26423: PPUSH
26424: LD_STRING 08_Heike
26426: PPUSH
26427: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
26431: LD_EXP 49
26435: PUSH
26436: LD_EXP 49
26440: PPUSH
26441: CALL_OW 255
26445: PUSH
26446: LD_INT 2
26448: EQUAL
26449: AND
26450: IFFALSE 26464
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
26452: LD_EXP 49
26456: PPUSH
26457: LD_STRING 08_Aviradze
26459: PPUSH
26460: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
26464: LD_EXP 42
26468: PUSH
26469: LD_EXP 42
26473: PPUSH
26474: CALL_OW 255
26478: PUSH
26479: LD_INT 2
26481: EQUAL
26482: AND
26483: IFFALSE 26497
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
26485: LD_EXP 42
26489: PPUSH
26490: LD_STRING 08_Ibrahim
26492: PPUSH
26493: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
26497: LD_EXP 43
26501: PUSH
26502: LD_EXP 43
26506: PPUSH
26507: CALL_OW 255
26511: PUSH
26512: LD_INT 2
26514: EQUAL
26515: AND
26516: IFFALSE 26530
// SaveCharacters ( Kamil , 08_Kamil ) ;
26518: LD_EXP 43
26522: PPUSH
26523: LD_STRING 08_Kamil
26525: PPUSH
26526: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
26530: LD_EXP 45
26534: PUSH
26535: LD_EXP 45
26539: PPUSH
26540: CALL_OW 255
26544: PUSH
26545: LD_INT 2
26547: EQUAL
26548: AND
26549: IFFALSE 26563
// SaveCharacters ( Sophia , 08_Sophia ) ;
26551: LD_EXP 45
26555: PPUSH
26556: LD_STRING 08_Sophia
26558: PPUSH
26559: CALL_OW 38
// if Kaia and GetSide ( Aviradze ) = 2 then
26563: LD_EXP 44
26567: PUSH
26568: LD_EXP 49
26572: PPUSH
26573: CALL_OW 255
26577: PUSH
26578: LD_INT 2
26580: EQUAL
26581: AND
26582: IFFALSE 26596
// SaveCharacters ( Kaia , 08_Kaia ) ;
26584: LD_EXP 44
26588: PPUSH
26589: LD_STRING 08_Kaia
26591: PPUSH
26592: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
26596: LD_EXP 40
26600: PUSH
26601: LD_EXP 40
26605: PPUSH
26606: CALL_OW 255
26610: PUSH
26611: LD_INT 2
26613: EQUAL
26614: AND
26615: IFFALSE 26672
// if GetNation ( Givi ) = nation_russian then
26617: LD_EXP 40
26621: PPUSH
26622: CALL_OW 248
26626: PUSH
26627: LD_INT 3
26629: EQUAL
26630: IFFALSE 26660
// begin CopySkills ( Givi , GiviTmp ) ;
26632: LD_EXP 40
26636: PPUSH
26637: LD_EXP 56
26641: PPUSH
26642: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
26646: LD_EXP 56
26650: PPUSH
26651: LD_STRING 08_Givi
26653: PPUSH
26654: CALL_OW 38
// end else
26658: GO 26672
// SaveCharacters ( Givi , 08_Givi ) ;
26660: LD_EXP 40
26664: PPUSH
26665: LD_STRING 08_Givi
26667: PPUSH
26668: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
26672: LD_EXP 41
26676: PUSH
26677: LD_EXP 41
26681: PPUSH
26682: CALL_OW 255
26686: PUSH
26687: LD_INT 2
26689: EQUAL
26690: AND
26691: IFFALSE 26705
// SaveCharacters ( Mike , 08_Mike ) ;
26693: LD_EXP 41
26697: PPUSH
26698: LD_STRING 08_Mike
26700: PPUSH
26701: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
26705: LD_EXP 46
26709: PUSH
26710: LD_EXP 46
26714: PPUSH
26715: CALL_OW 255
26719: PUSH
26720: LD_INT 2
26722: EQUAL
26723: AND
26724: IFFALSE 26738
// SaveCharacters ( Markov , 08_Markov ) ;
26726: LD_EXP 46
26730: PPUSH
26731: LD_STRING 08_Markov
26733: PPUSH
26734: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
26738: LD_EXP 48
26742: PUSH
26743: LD_EXP 48
26747: PPUSH
26748: CALL_OW 255
26752: PUSH
26753: LD_INT 2
26755: EQUAL
26756: AND
26757: IFFALSE 26771
// SaveCharacters ( Kurt , 08_Kurt ) ;
26759: LD_EXP 48
26763: PPUSH
26764: LD_STRING 08_Kurt
26766: PPUSH
26767: CALL_OW 38
// if heikeSecondSquad then
26771: LD_EXP 50
26775: IFFALSE 26789
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
26777: LD_EXP 50
26781: PPUSH
26782: LD_STRING 08_others
26784: PPUSH
26785: CALL_OW 38
// YouWin ;
26789: CALL_OW 103
// DialogueOff ;
26793: CALL_OW 7
// end ; end_of_file
26797: LD_VAR 0 1
26801: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
26802: LD_EXP 5
26806: IFFALSE 26985
26808: GO 26810
26810: DISABLE
26811: LD_INT 0
26813: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
26814: LD_INT 35
26816: PPUSH
26817: LD_INT 2100
26819: PPUSH
26820: CALL_OW 12
26824: PPUSH
26825: CALL_OW 67
// StopOriginalMusic ;
26829: CALL 88491 0 0
// weatherBusy := true ;
26833: LD_ADDR_EXP 37
26837: PUSH
26838: LD_INT 1
26840: ST_TO_ADDR
// for i := 1 to 3 do
26841: LD_ADDR_VAR 0 1
26845: PUSH
26846: DOUBLE
26847: LD_INT 1
26849: DEC
26850: ST_TO_ADDR
26851: LD_INT 3
26853: PUSH
26854: FOR_TO
26855: IFFALSE 26889
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
26857: LD_INT 1
26859: PPUSH
26860: LD_INT 100
26862: PUSH
26863: LD_INT 100
26865: PUSH
26866: LD_VAR 0 1
26870: MUL
26871: PLUS
26872: PPUSH
26873: LD_INT 60
26875: PPUSH
26876: CALL_OW 550
// wait ( 0 0$2 ) ;
26880: LD_INT 70
26882: PPUSH
26883: CALL_OW 67
// end ;
26887: GO 26854
26889: POP
26890: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
26891: LD_STRING ArStormRain.wav
26893: PPUSH
26894: LD_STRING OW_CUSTOM_COMMAND(103);
26896: PPUSH
26897: CALL 88521 0 2
// wait ( 0 0$3 ) ;
26901: LD_INT 105
26903: PPUSH
26904: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
26908: LD_INT 1
26910: PPUSH
26911: LD_INT 900
26913: PPUSH
26914: LD_INT 120
26916: PPUSH
26917: CALL_OW 550
// wait ( 0 0$10 ) ;
26921: LD_INT 350
26923: PPUSH
26924: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
26928: LD_INT 1
26930: PPUSH
26931: LD_INT 1500
26933: PPUSH
26934: LD_INT 300
26936: PPUSH
26937: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
26941: LD_INT 35
26943: PPUSH
26944: CALL_OW 67
// until not weatherBusy ;
26948: LD_EXP 37
26952: NOT
26953: IFFALSE 26941
// SetWeather ( 0 , 0 , 0 ) ;
26955: LD_INT 0
26957: PPUSH
26958: LD_INT 0
26960: PPUSH
26961: LD_INT 0
26963: PPUSH
26964: CALL_OW 550
// wait ( 5 5$00 ) ;
26968: LD_INT 10500
26970: PPUSH
26971: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
26975: LD_STRING ArStormNormal.wav
26977: PPUSH
26978: LD_STRING OW_CUSTOM_COMMAND(103);
26980: PPUSH
26981: CALL 88521 0 2
// end ; end_of_file
26985: PPOPN 1
26987: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26988: LD_INT 0
26990: PPUSH
26991: PPUSH
// if exist_mode then
26992: LD_VAR 0 2
26996: IFFALSE 27021
// unit := CreateCharacter ( prefix & ident ) else
26998: LD_ADDR_VAR 0 5
27002: PUSH
27003: LD_VAR 0 3
27007: PUSH
27008: LD_VAR 0 1
27012: STR
27013: PPUSH
27014: CALL_OW 34
27018: ST_TO_ADDR
27019: GO 27036
// unit := NewCharacter ( ident ) ;
27021: LD_ADDR_VAR 0 5
27025: PUSH
27026: LD_VAR 0 1
27030: PPUSH
27031: CALL_OW 25
27035: ST_TO_ADDR
// result := unit ;
27036: LD_ADDR_VAR 0 4
27040: PUSH
27041: LD_VAR 0 5
27045: ST_TO_ADDR
// end ;
27046: LD_VAR 0 4
27050: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27051: LD_INT 0
27053: PPUSH
27054: PPUSH
// if not side or not nation then
27055: LD_VAR 0 1
27059: NOT
27060: PUSH
27061: LD_VAR 0 2
27065: NOT
27066: OR
27067: IFFALSE 27071
// exit ;
27069: GO 27839
// case nation of nation_american :
27071: LD_VAR 0 2
27075: PUSH
27076: LD_INT 1
27078: DOUBLE
27079: EQUAL
27080: IFTRUE 27084
27082: GO 27298
27084: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27085: LD_ADDR_VAR 0 4
27089: PUSH
27090: LD_INT 35
27092: PUSH
27093: LD_INT 45
27095: PUSH
27096: LD_INT 46
27098: PUSH
27099: LD_INT 47
27101: PUSH
27102: LD_INT 82
27104: PUSH
27105: LD_INT 83
27107: PUSH
27108: LD_INT 84
27110: PUSH
27111: LD_INT 85
27113: PUSH
27114: LD_INT 86
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: LD_INT 6
27125: PUSH
27126: LD_INT 15
27128: PUSH
27129: LD_INT 16
27131: PUSH
27132: LD_INT 7
27134: PUSH
27135: LD_INT 12
27137: PUSH
27138: LD_INT 13
27140: PUSH
27141: LD_INT 10
27143: PUSH
27144: LD_INT 14
27146: PUSH
27147: LD_INT 20
27149: PUSH
27150: LD_INT 21
27152: PUSH
27153: LD_INT 22
27155: PUSH
27156: LD_INT 25
27158: PUSH
27159: LD_INT 32
27161: PUSH
27162: LD_INT 27
27164: PUSH
27165: LD_INT 36
27167: PUSH
27168: LD_INT 69
27170: PUSH
27171: LD_INT 39
27173: PUSH
27174: LD_INT 34
27176: PUSH
27177: LD_INT 40
27179: PUSH
27180: LD_INT 48
27182: PUSH
27183: LD_INT 49
27185: PUSH
27186: LD_INT 50
27188: PUSH
27189: LD_INT 51
27191: PUSH
27192: LD_INT 52
27194: PUSH
27195: LD_INT 53
27197: PUSH
27198: LD_INT 54
27200: PUSH
27201: LD_INT 55
27203: PUSH
27204: LD_INT 56
27206: PUSH
27207: LD_INT 57
27209: PUSH
27210: LD_INT 58
27212: PUSH
27213: LD_INT 59
27215: PUSH
27216: LD_INT 60
27218: PUSH
27219: LD_INT 61
27221: PUSH
27222: LD_INT 62
27224: PUSH
27225: LD_INT 80
27227: PUSH
27228: LD_INT 82
27230: PUSH
27231: LD_INT 83
27233: PUSH
27234: LD_INT 84
27236: PUSH
27237: LD_INT 85
27239: PUSH
27240: LD_INT 86
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: ST_TO_ADDR
27296: GO 27763
27298: LD_INT 2
27300: DOUBLE
27301: EQUAL
27302: IFTRUE 27306
27304: GO 27532
27306: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27307: LD_ADDR_VAR 0 4
27311: PUSH
27312: LD_INT 35
27314: PUSH
27315: LD_INT 45
27317: PUSH
27318: LD_INT 46
27320: PUSH
27321: LD_INT 47
27323: PUSH
27324: LD_INT 82
27326: PUSH
27327: LD_INT 83
27329: PUSH
27330: LD_INT 84
27332: PUSH
27333: LD_INT 85
27335: PUSH
27336: LD_INT 87
27338: PUSH
27339: LD_INT 70
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: LD_INT 11
27347: PUSH
27348: LD_INT 3
27350: PUSH
27351: LD_INT 4
27353: PUSH
27354: LD_INT 5
27356: PUSH
27357: LD_INT 6
27359: PUSH
27360: LD_INT 15
27362: PUSH
27363: LD_INT 18
27365: PUSH
27366: LD_INT 7
27368: PUSH
27369: LD_INT 17
27371: PUSH
27372: LD_INT 8
27374: PUSH
27375: LD_INT 20
27377: PUSH
27378: LD_INT 21
27380: PUSH
27381: LD_INT 22
27383: PUSH
27384: LD_INT 72
27386: PUSH
27387: LD_INT 26
27389: PUSH
27390: LD_INT 69
27392: PUSH
27393: LD_INT 39
27395: PUSH
27396: LD_INT 40
27398: PUSH
27399: LD_INT 41
27401: PUSH
27402: LD_INT 42
27404: PUSH
27405: LD_INT 43
27407: PUSH
27408: LD_INT 48
27410: PUSH
27411: LD_INT 49
27413: PUSH
27414: LD_INT 50
27416: PUSH
27417: LD_INT 51
27419: PUSH
27420: LD_INT 52
27422: PUSH
27423: LD_INT 53
27425: PUSH
27426: LD_INT 54
27428: PUSH
27429: LD_INT 55
27431: PUSH
27432: LD_INT 56
27434: PUSH
27435: LD_INT 60
27437: PUSH
27438: LD_INT 61
27440: PUSH
27441: LD_INT 62
27443: PUSH
27444: LD_INT 66
27446: PUSH
27447: LD_INT 67
27449: PUSH
27450: LD_INT 68
27452: PUSH
27453: LD_INT 81
27455: PUSH
27456: LD_INT 82
27458: PUSH
27459: LD_INT 83
27461: PUSH
27462: LD_INT 84
27464: PUSH
27465: LD_INT 85
27467: PUSH
27468: LD_INT 87
27470: PUSH
27471: LD_INT 88
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: ST_TO_ADDR
27530: GO 27763
27532: LD_INT 3
27534: DOUBLE
27535: EQUAL
27536: IFTRUE 27540
27538: GO 27762
27540: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27541: LD_ADDR_VAR 0 4
27545: PUSH
27546: LD_INT 46
27548: PUSH
27549: LD_INT 47
27551: PUSH
27552: LD_INT 1
27554: PUSH
27555: LD_INT 2
27557: PUSH
27558: LD_INT 82
27560: PUSH
27561: LD_INT 83
27563: PUSH
27564: LD_INT 84
27566: PUSH
27567: LD_INT 85
27569: PUSH
27570: LD_INT 86
27572: PUSH
27573: LD_INT 11
27575: PUSH
27576: LD_INT 9
27578: PUSH
27579: LD_INT 20
27581: PUSH
27582: LD_INT 19
27584: PUSH
27585: LD_INT 21
27587: PUSH
27588: LD_INT 24
27590: PUSH
27591: LD_INT 22
27593: PUSH
27594: LD_INT 25
27596: PUSH
27597: LD_INT 28
27599: PUSH
27600: LD_INT 29
27602: PUSH
27603: LD_INT 30
27605: PUSH
27606: LD_INT 31
27608: PUSH
27609: LD_INT 37
27611: PUSH
27612: LD_INT 38
27614: PUSH
27615: LD_INT 32
27617: PUSH
27618: LD_INT 27
27620: PUSH
27621: LD_INT 33
27623: PUSH
27624: LD_INT 69
27626: PUSH
27627: LD_INT 39
27629: PUSH
27630: LD_INT 34
27632: PUSH
27633: LD_INT 40
27635: PUSH
27636: LD_INT 71
27638: PUSH
27639: LD_INT 23
27641: PUSH
27642: LD_INT 44
27644: PUSH
27645: LD_INT 48
27647: PUSH
27648: LD_INT 49
27650: PUSH
27651: LD_INT 50
27653: PUSH
27654: LD_INT 51
27656: PUSH
27657: LD_INT 52
27659: PUSH
27660: LD_INT 53
27662: PUSH
27663: LD_INT 54
27665: PUSH
27666: LD_INT 55
27668: PUSH
27669: LD_INT 56
27671: PUSH
27672: LD_INT 57
27674: PUSH
27675: LD_INT 58
27677: PUSH
27678: LD_INT 59
27680: PUSH
27681: LD_INT 63
27683: PUSH
27684: LD_INT 64
27686: PUSH
27687: LD_INT 65
27689: PUSH
27690: LD_INT 82
27692: PUSH
27693: LD_INT 83
27695: PUSH
27696: LD_INT 84
27698: PUSH
27699: LD_INT 85
27701: PUSH
27702: LD_INT 86
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: ST_TO_ADDR
27760: GO 27763
27762: POP
// if state > - 1 and state < 3 then
27763: LD_VAR 0 3
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: GREATER
27772: PUSH
27773: LD_VAR 0 3
27777: PUSH
27778: LD_INT 3
27780: LESS
27781: AND
27782: IFFALSE 27839
// for i in result do
27784: LD_ADDR_VAR 0 5
27788: PUSH
27789: LD_VAR 0 4
27793: PUSH
27794: FOR_IN
27795: IFFALSE 27837
// if GetTech ( i , side ) <> state then
27797: LD_VAR 0 5
27801: PPUSH
27802: LD_VAR 0 1
27806: PPUSH
27807: CALL_OW 321
27811: PUSH
27812: LD_VAR 0 3
27816: NONEQUAL
27817: IFFALSE 27835
// result := result diff i ;
27819: LD_ADDR_VAR 0 4
27823: PUSH
27824: LD_VAR 0 4
27828: PUSH
27829: LD_VAR 0 5
27833: DIFF
27834: ST_TO_ADDR
27835: GO 27794
27837: POP
27838: POP
// end ;
27839: LD_VAR 0 4
27843: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27844: LD_INT 0
27846: PPUSH
27847: PPUSH
27848: PPUSH
// result := true ;
27849: LD_ADDR_VAR 0 3
27853: PUSH
27854: LD_INT 1
27856: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27857: LD_ADDR_VAR 0 5
27861: PUSH
27862: LD_VAR 0 2
27866: PPUSH
27867: CALL_OW 480
27871: ST_TO_ADDR
// if not tmp then
27872: LD_VAR 0 5
27876: NOT
27877: IFFALSE 27881
// exit ;
27879: GO 27930
// for i in tmp do
27881: LD_ADDR_VAR 0 4
27885: PUSH
27886: LD_VAR 0 5
27890: PUSH
27891: FOR_IN
27892: IFFALSE 27928
// if GetTech ( i , side ) <> state_researched then
27894: LD_VAR 0 4
27898: PPUSH
27899: LD_VAR 0 1
27903: PPUSH
27904: CALL_OW 321
27908: PUSH
27909: LD_INT 2
27911: NONEQUAL
27912: IFFALSE 27926
// begin result := false ;
27914: LD_ADDR_VAR 0 3
27918: PUSH
27919: LD_INT 0
27921: ST_TO_ADDR
// exit ;
27922: POP
27923: POP
27924: GO 27930
// end ;
27926: GO 27891
27928: POP
27929: POP
// end ;
27930: LD_VAR 0 3
27934: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27935: LD_INT 0
27937: PPUSH
27938: PPUSH
27939: PPUSH
27940: PPUSH
27941: PPUSH
27942: PPUSH
27943: PPUSH
27944: PPUSH
27945: PPUSH
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27950: LD_VAR 0 1
27954: NOT
27955: PUSH
27956: LD_VAR 0 1
27960: PPUSH
27961: CALL_OW 257
27965: PUSH
27966: LD_INT 9
27968: NONEQUAL
27969: OR
27970: IFFALSE 27974
// exit ;
27972: GO 28547
// side := GetSide ( unit ) ;
27974: LD_ADDR_VAR 0 9
27978: PUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: CALL_OW 255
27988: ST_TO_ADDR
// tech_space := tech_spacanom ;
27989: LD_ADDR_VAR 0 12
27993: PUSH
27994: LD_INT 29
27996: ST_TO_ADDR
// tech_time := tech_taurad ;
27997: LD_ADDR_VAR 0 13
28001: PUSH
28002: LD_INT 28
28004: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28005: LD_ADDR_VAR 0 11
28009: PUSH
28010: LD_VAR 0 1
28014: PPUSH
28015: CALL_OW 310
28019: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28020: LD_VAR 0 11
28024: PPUSH
28025: CALL_OW 247
28029: PUSH
28030: LD_INT 2
28032: EQUAL
28033: IFFALSE 28037
// exit ;
28035: GO 28547
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28037: LD_ADDR_VAR 0 8
28041: PUSH
28042: LD_INT 81
28044: PUSH
28045: LD_VAR 0 9
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 3
28056: PUSH
28057: LD_INT 21
28059: PUSH
28060: LD_INT 3
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PPUSH
28075: CALL_OW 69
28079: ST_TO_ADDR
// if not tmp then
28080: LD_VAR 0 8
28084: NOT
28085: IFFALSE 28089
// exit ;
28087: GO 28547
// if in_unit then
28089: LD_VAR 0 11
28093: IFFALSE 28117
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28095: LD_ADDR_VAR 0 10
28099: PUSH
28100: LD_VAR 0 8
28104: PPUSH
28105: LD_VAR 0 11
28109: PPUSH
28110: CALL_OW 74
28114: ST_TO_ADDR
28115: GO 28137
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28117: LD_ADDR_VAR 0 10
28121: PUSH
28122: LD_VAR 0 8
28126: PPUSH
28127: LD_VAR 0 1
28131: PPUSH
28132: CALL_OW 74
28136: ST_TO_ADDR
// if not enemy then
28137: LD_VAR 0 10
28141: NOT
28142: IFFALSE 28146
// exit ;
28144: GO 28547
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28146: LD_VAR 0 11
28150: PUSH
28151: LD_VAR 0 11
28155: PPUSH
28156: LD_VAR 0 10
28160: PPUSH
28161: CALL_OW 296
28165: PUSH
28166: LD_INT 13
28168: GREATER
28169: AND
28170: PUSH
28171: LD_VAR 0 1
28175: PPUSH
28176: LD_VAR 0 10
28180: PPUSH
28181: CALL_OW 296
28185: PUSH
28186: LD_INT 12
28188: GREATER
28189: OR
28190: IFFALSE 28194
// exit ;
28192: GO 28547
// missile := [ 1 ] ;
28194: LD_ADDR_VAR 0 14
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28205: LD_VAR 0 9
28209: PPUSH
28210: LD_VAR 0 12
28214: PPUSH
28215: CALL_OW 325
28219: IFFALSE 28248
// missile := Replace ( missile , missile + 1 , 2 ) ;
28221: LD_ADDR_VAR 0 14
28225: PUSH
28226: LD_VAR 0 14
28230: PPUSH
28231: LD_VAR 0 14
28235: PUSH
28236: LD_INT 1
28238: PLUS
28239: PPUSH
28240: LD_INT 2
28242: PPUSH
28243: CALL_OW 1
28247: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28248: LD_VAR 0 9
28252: PPUSH
28253: LD_VAR 0 13
28257: PPUSH
28258: CALL_OW 325
28262: PUSH
28263: LD_VAR 0 10
28267: PPUSH
28268: CALL_OW 255
28272: PPUSH
28273: LD_VAR 0 13
28277: PPUSH
28278: CALL_OW 325
28282: NOT
28283: AND
28284: IFFALSE 28313
// missile := Replace ( missile , missile + 1 , 3 ) ;
28286: LD_ADDR_VAR 0 14
28290: PUSH
28291: LD_VAR 0 14
28295: PPUSH
28296: LD_VAR 0 14
28300: PUSH
28301: LD_INT 1
28303: PLUS
28304: PPUSH
28305: LD_INT 3
28307: PPUSH
28308: CALL_OW 1
28312: ST_TO_ADDR
// if missile < 2 then
28313: LD_VAR 0 14
28317: PUSH
28318: LD_INT 2
28320: LESS
28321: IFFALSE 28325
// exit ;
28323: GO 28547
// x := GetX ( enemy ) ;
28325: LD_ADDR_VAR 0 4
28329: PUSH
28330: LD_VAR 0 10
28334: PPUSH
28335: CALL_OW 250
28339: ST_TO_ADDR
// y := GetY ( enemy ) ;
28340: LD_ADDR_VAR 0 5
28344: PUSH
28345: LD_VAR 0 10
28349: PPUSH
28350: CALL_OW 251
28354: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28355: LD_ADDR_VAR 0 6
28359: PUSH
28360: LD_VAR 0 4
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PPUSH
28369: LD_INT 1
28371: PPUSH
28372: CALL_OW 12
28376: PLUS
28377: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28378: LD_ADDR_VAR 0 7
28382: PUSH
28383: LD_VAR 0 5
28387: PUSH
28388: LD_INT 1
28390: NEG
28391: PPUSH
28392: LD_INT 1
28394: PPUSH
28395: CALL_OW 12
28399: PLUS
28400: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28401: LD_VAR 0 6
28405: PPUSH
28406: LD_VAR 0 7
28410: PPUSH
28411: CALL_OW 488
28415: NOT
28416: IFFALSE 28438
// begin _x := x ;
28418: LD_ADDR_VAR 0 6
28422: PUSH
28423: LD_VAR 0 4
28427: ST_TO_ADDR
// _y := y ;
28428: LD_ADDR_VAR 0 7
28432: PUSH
28433: LD_VAR 0 5
28437: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28438: LD_ADDR_VAR 0 3
28442: PUSH
28443: LD_INT 1
28445: PPUSH
28446: LD_VAR 0 14
28450: PPUSH
28451: CALL_OW 12
28455: ST_TO_ADDR
// case i of 1 :
28456: LD_VAR 0 3
28460: PUSH
28461: LD_INT 1
28463: DOUBLE
28464: EQUAL
28465: IFTRUE 28469
28467: GO 28486
28469: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28470: LD_VAR 0 1
28474: PPUSH
28475: LD_VAR 0 10
28479: PPUSH
28480: CALL_OW 115
28484: GO 28547
28486: LD_INT 2
28488: DOUBLE
28489: EQUAL
28490: IFTRUE 28494
28492: GO 28516
28494: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28495: LD_VAR 0 1
28499: PPUSH
28500: LD_VAR 0 6
28504: PPUSH
28505: LD_VAR 0 7
28509: PPUSH
28510: CALL_OW 153
28514: GO 28547
28516: LD_INT 3
28518: DOUBLE
28519: EQUAL
28520: IFTRUE 28524
28522: GO 28546
28524: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28525: LD_VAR 0 1
28529: PPUSH
28530: LD_VAR 0 6
28534: PPUSH
28535: LD_VAR 0 7
28539: PPUSH
28540: CALL_OW 154
28544: GO 28547
28546: POP
// end ;
28547: LD_VAR 0 2
28551: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28552: LD_INT 0
28554: PPUSH
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
28559: PPUSH
// if not unit or not building then
28560: LD_VAR 0 1
28564: NOT
28565: PUSH
28566: LD_VAR 0 2
28570: NOT
28571: OR
28572: IFFALSE 28576
// exit ;
28574: GO 28734
// x := GetX ( building ) ;
28576: LD_ADDR_VAR 0 5
28580: PUSH
28581: LD_VAR 0 2
28585: PPUSH
28586: CALL_OW 250
28590: ST_TO_ADDR
// y := GetY ( building ) ;
28591: LD_ADDR_VAR 0 6
28595: PUSH
28596: LD_VAR 0 2
28600: PPUSH
28601: CALL_OW 251
28605: ST_TO_ADDR
// for i = 0 to 5 do
28606: LD_ADDR_VAR 0 4
28610: PUSH
28611: DOUBLE
28612: LD_INT 0
28614: DEC
28615: ST_TO_ADDR
28616: LD_INT 5
28618: PUSH
28619: FOR_TO
28620: IFFALSE 28732
// begin _x := ShiftX ( x , i , 3 ) ;
28622: LD_ADDR_VAR 0 7
28626: PUSH
28627: LD_VAR 0 5
28631: PPUSH
28632: LD_VAR 0 4
28636: PPUSH
28637: LD_INT 3
28639: PPUSH
28640: CALL_OW 272
28644: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28645: LD_ADDR_VAR 0 8
28649: PUSH
28650: LD_VAR 0 6
28654: PPUSH
28655: LD_VAR 0 4
28659: PPUSH
28660: LD_INT 3
28662: PPUSH
28663: CALL_OW 273
28667: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28668: LD_VAR 0 7
28672: PPUSH
28673: LD_VAR 0 8
28677: PPUSH
28678: CALL_OW 488
28682: NOT
28683: IFFALSE 28687
// continue ;
28685: GO 28619
// if HexInfo ( _x , _y ) = 0 then
28687: LD_VAR 0 7
28691: PPUSH
28692: LD_VAR 0 8
28696: PPUSH
28697: CALL_OW 428
28701: PUSH
28702: LD_INT 0
28704: EQUAL
28705: IFFALSE 28730
// begin ComMoveXY ( unit , _x , _y ) ;
28707: LD_VAR 0 1
28711: PPUSH
28712: LD_VAR 0 7
28716: PPUSH
28717: LD_VAR 0 8
28721: PPUSH
28722: CALL_OW 111
// exit ;
28726: POP
28727: POP
28728: GO 28734
// end ; end ;
28730: GO 28619
28732: POP
28733: POP
// end ;
28734: LD_VAR 0 3
28738: RET
// export function ScanBase ( side , base_area ) ; begin
28739: LD_INT 0
28741: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28742: LD_ADDR_VAR 0 3
28746: PUSH
28747: LD_VAR 0 2
28751: PPUSH
28752: LD_INT 81
28754: PUSH
28755: LD_VAR 0 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PPUSH
28764: CALL_OW 70
28768: ST_TO_ADDR
// end ;
28769: LD_VAR 0 3
28773: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28774: LD_INT 0
28776: PPUSH
28777: PPUSH
28778: PPUSH
28779: PPUSH
// result := false ;
28780: LD_ADDR_VAR 0 2
28784: PUSH
28785: LD_INT 0
28787: ST_TO_ADDR
// side := GetSide ( unit ) ;
28788: LD_ADDR_VAR 0 3
28792: PUSH
28793: LD_VAR 0 1
28797: PPUSH
28798: CALL_OW 255
28802: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28803: LD_ADDR_VAR 0 4
28807: PUSH
28808: LD_VAR 0 1
28812: PPUSH
28813: CALL_OW 248
28817: ST_TO_ADDR
// case nat of 1 :
28818: LD_VAR 0 4
28822: PUSH
28823: LD_INT 1
28825: DOUBLE
28826: EQUAL
28827: IFTRUE 28831
28829: GO 28842
28831: POP
// tech := tech_lassight ; 2 :
28832: LD_ADDR_VAR 0 5
28836: PUSH
28837: LD_INT 12
28839: ST_TO_ADDR
28840: GO 28881
28842: LD_INT 2
28844: DOUBLE
28845: EQUAL
28846: IFTRUE 28850
28848: GO 28861
28850: POP
// tech := tech_mortar ; 3 :
28851: LD_ADDR_VAR 0 5
28855: PUSH
28856: LD_INT 41
28858: ST_TO_ADDR
28859: GO 28881
28861: LD_INT 3
28863: DOUBLE
28864: EQUAL
28865: IFTRUE 28869
28867: GO 28880
28869: POP
// tech := tech_bazooka ; end ;
28870: LD_ADDR_VAR 0 5
28874: PUSH
28875: LD_INT 44
28877: ST_TO_ADDR
28878: GO 28881
28880: POP
// if Researched ( side , tech ) then
28881: LD_VAR 0 3
28885: PPUSH
28886: LD_VAR 0 5
28890: PPUSH
28891: CALL_OW 325
28895: IFFALSE 28922
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28897: LD_ADDR_VAR 0 2
28901: PUSH
28902: LD_INT 5
28904: PUSH
28905: LD_INT 8
28907: PUSH
28908: LD_INT 9
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: PUSH
28916: LD_VAR 0 4
28920: ARRAY
28921: ST_TO_ADDR
// end ;
28922: LD_VAR 0 2
28926: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28927: LD_INT 0
28929: PPUSH
28930: PPUSH
28931: PPUSH
// if not mines then
28932: LD_VAR 0 2
28936: NOT
28937: IFFALSE 28941
// exit ;
28939: GO 29085
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28941: LD_ADDR_VAR 0 5
28945: PUSH
28946: LD_INT 81
28948: PUSH
28949: LD_VAR 0 1
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 3
28960: PUSH
28961: LD_INT 21
28963: PUSH
28964: LD_INT 3
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PPUSH
28979: CALL_OW 69
28983: ST_TO_ADDR
// for i in mines do
28984: LD_ADDR_VAR 0 4
28988: PUSH
28989: LD_VAR 0 2
28993: PUSH
28994: FOR_IN
28995: IFFALSE 29083
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28997: LD_VAR 0 4
29001: PUSH
29002: LD_INT 1
29004: ARRAY
29005: PPUSH
29006: LD_VAR 0 4
29010: PUSH
29011: LD_INT 2
29013: ARRAY
29014: PPUSH
29015: CALL_OW 458
29019: NOT
29020: IFFALSE 29024
// continue ;
29022: GO 28994
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29024: LD_VAR 0 4
29028: PUSH
29029: LD_INT 1
29031: ARRAY
29032: PPUSH
29033: LD_VAR 0 4
29037: PUSH
29038: LD_INT 2
29040: ARRAY
29041: PPUSH
29042: CALL_OW 428
29046: PUSH
29047: LD_VAR 0 5
29051: IN
29052: IFFALSE 29081
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29054: LD_VAR 0 4
29058: PUSH
29059: LD_INT 1
29061: ARRAY
29062: PPUSH
29063: LD_VAR 0 4
29067: PUSH
29068: LD_INT 2
29070: ARRAY
29071: PPUSH
29072: LD_VAR 0 1
29076: PPUSH
29077: CALL_OW 456
// end ;
29081: GO 28994
29083: POP
29084: POP
// end ;
29085: LD_VAR 0 3
29089: RET
// export function Count ( array ) ; var i ; begin
29090: LD_INT 0
29092: PPUSH
29093: PPUSH
// result := 0 ;
29094: LD_ADDR_VAR 0 2
29098: PUSH
29099: LD_INT 0
29101: ST_TO_ADDR
// for i in array do
29102: LD_ADDR_VAR 0 3
29106: PUSH
29107: LD_VAR 0 1
29111: PUSH
29112: FOR_IN
29113: IFFALSE 29137
// if i then
29115: LD_VAR 0 3
29119: IFFALSE 29135
// result := result + 1 ;
29121: LD_ADDR_VAR 0 2
29125: PUSH
29126: LD_VAR 0 2
29130: PUSH
29131: LD_INT 1
29133: PLUS
29134: ST_TO_ADDR
29135: GO 29112
29137: POP
29138: POP
// end ;
29139: LD_VAR 0 2
29143: RET
// export function IsEmpty ( building ) ; begin
29144: LD_INT 0
29146: PPUSH
// if not building then
29147: LD_VAR 0 1
29151: NOT
29152: IFFALSE 29156
// exit ;
29154: GO 29199
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29156: LD_ADDR_VAR 0 2
29160: PUSH
29161: LD_VAR 0 1
29165: PUSH
29166: LD_INT 22
29168: PUSH
29169: LD_VAR 0 1
29173: PPUSH
29174: CALL_OW 255
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 58
29185: PUSH
29186: EMPTY
29187: LIST
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PPUSH
29193: CALL_OW 69
29197: IN
29198: ST_TO_ADDR
// end ;
29199: LD_VAR 0 2
29203: RET
// export function IsNotFull ( building ) ; var places ; begin
29204: LD_INT 0
29206: PPUSH
29207: PPUSH
// if not building then
29208: LD_VAR 0 1
29212: NOT
29213: IFFALSE 29217
// exit ;
29215: GO 29388
// result := false ;
29217: LD_ADDR_VAR 0 2
29221: PUSH
29222: LD_INT 0
29224: ST_TO_ADDR
// places := 0 ;
29225: LD_ADDR_VAR 0 3
29229: PUSH
29230: LD_INT 0
29232: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29233: LD_VAR 0 1
29237: PPUSH
29238: CALL_OW 266
29242: PUSH
29243: LD_INT 0
29245: DOUBLE
29246: EQUAL
29247: IFTRUE 29305
29249: LD_INT 1
29251: DOUBLE
29252: EQUAL
29253: IFTRUE 29305
29255: LD_INT 6
29257: DOUBLE
29258: EQUAL
29259: IFTRUE 29305
29261: LD_INT 7
29263: DOUBLE
29264: EQUAL
29265: IFTRUE 29305
29267: LD_INT 8
29269: DOUBLE
29270: EQUAL
29271: IFTRUE 29305
29273: LD_INT 4
29275: DOUBLE
29276: EQUAL
29277: IFTRUE 29305
29279: LD_INT 5
29281: DOUBLE
29282: EQUAL
29283: IFTRUE 29305
29285: LD_INT 2
29287: DOUBLE
29288: EQUAL
29289: IFTRUE 29305
29291: LD_INT 3
29293: DOUBLE
29294: EQUAL
29295: IFTRUE 29305
29297: LD_INT 35
29299: DOUBLE
29300: EQUAL
29301: IFTRUE 29305
29303: GO 29316
29305: POP
// places := 6 ; b_bunker , b_breastwork :
29306: LD_ADDR_VAR 0 3
29310: PUSH
29311: LD_INT 6
29313: ST_TO_ADDR
29314: GO 29361
29316: LD_INT 32
29318: DOUBLE
29319: EQUAL
29320: IFTRUE 29330
29322: LD_INT 31
29324: DOUBLE
29325: EQUAL
29326: IFTRUE 29330
29328: GO 29341
29330: POP
// places := 1 ; b_control_tower :
29331: LD_ADDR_VAR 0 3
29335: PUSH
29336: LD_INT 1
29338: ST_TO_ADDR
29339: GO 29361
29341: LD_INT 36
29343: DOUBLE
29344: EQUAL
29345: IFTRUE 29349
29347: GO 29360
29349: POP
// places := 3 ; end ;
29350: LD_ADDR_VAR 0 3
29354: PUSH
29355: LD_INT 3
29357: ST_TO_ADDR
29358: GO 29361
29360: POP
// if places then
29361: LD_VAR 0 3
29365: IFFALSE 29388
// result := UnitsInside ( building ) < places ;
29367: LD_ADDR_VAR 0 2
29371: PUSH
29372: LD_VAR 0 1
29376: PPUSH
29377: CALL_OW 313
29381: PUSH
29382: LD_VAR 0 3
29386: LESS
29387: ST_TO_ADDR
// end ;
29388: LD_VAR 0 2
29392: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29393: LD_INT 0
29395: PPUSH
29396: PPUSH
29397: PPUSH
29398: PPUSH
// tmp := [ ] ;
29399: LD_ADDR_VAR 0 3
29403: PUSH
29404: EMPTY
29405: ST_TO_ADDR
// list := [ ] ;
29406: LD_ADDR_VAR 0 5
29410: PUSH
29411: EMPTY
29412: ST_TO_ADDR
// for i = 16 to 25 do
29413: LD_ADDR_VAR 0 4
29417: PUSH
29418: DOUBLE
29419: LD_INT 16
29421: DEC
29422: ST_TO_ADDR
29423: LD_INT 25
29425: PUSH
29426: FOR_TO
29427: IFFALSE 29500
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29429: LD_ADDR_VAR 0 3
29433: PUSH
29434: LD_VAR 0 3
29438: PUSH
29439: LD_INT 22
29441: PUSH
29442: LD_VAR 0 1
29446: PPUSH
29447: CALL_OW 255
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 91
29458: PUSH
29459: LD_VAR 0 1
29463: PUSH
29464: LD_INT 6
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 30
29474: PUSH
29475: LD_VAR 0 4
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: PUSH
29489: EMPTY
29490: LIST
29491: PPUSH
29492: CALL_OW 69
29496: ADD
29497: ST_TO_ADDR
29498: GO 29426
29500: POP
29501: POP
// for i = 1 to tmp do
29502: LD_ADDR_VAR 0 4
29506: PUSH
29507: DOUBLE
29508: LD_INT 1
29510: DEC
29511: ST_TO_ADDR
29512: LD_VAR 0 3
29516: PUSH
29517: FOR_TO
29518: IFFALSE 29606
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29520: LD_ADDR_VAR 0 5
29524: PUSH
29525: LD_VAR 0 5
29529: PUSH
29530: LD_VAR 0 3
29534: PUSH
29535: LD_VAR 0 4
29539: ARRAY
29540: PPUSH
29541: CALL_OW 266
29545: PUSH
29546: LD_VAR 0 3
29550: PUSH
29551: LD_VAR 0 4
29555: ARRAY
29556: PPUSH
29557: CALL_OW 250
29561: PUSH
29562: LD_VAR 0 3
29566: PUSH
29567: LD_VAR 0 4
29571: ARRAY
29572: PPUSH
29573: CALL_OW 251
29577: PUSH
29578: LD_VAR 0 3
29582: PUSH
29583: LD_VAR 0 4
29587: ARRAY
29588: PPUSH
29589: CALL_OW 254
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: PUSH
29600: EMPTY
29601: LIST
29602: ADD
29603: ST_TO_ADDR
29604: GO 29517
29606: POP
29607: POP
// result := list ;
29608: LD_ADDR_VAR 0 2
29612: PUSH
29613: LD_VAR 0 5
29617: ST_TO_ADDR
// end ;
29618: LD_VAR 0 2
29622: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29623: LD_INT 0
29625: PPUSH
29626: PPUSH
29627: PPUSH
29628: PPUSH
29629: PPUSH
29630: PPUSH
29631: PPUSH
// if not factory then
29632: LD_VAR 0 1
29636: NOT
29637: IFFALSE 29641
// exit ;
29639: GO 30234
// if control = control_apeman then
29641: LD_VAR 0 4
29645: PUSH
29646: LD_INT 5
29648: EQUAL
29649: IFFALSE 29758
// begin tmp := UnitsInside ( factory ) ;
29651: LD_ADDR_VAR 0 8
29655: PUSH
29656: LD_VAR 0 1
29660: PPUSH
29661: CALL_OW 313
29665: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29666: LD_VAR 0 8
29670: PPUSH
29671: LD_INT 25
29673: PUSH
29674: LD_INT 12
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PPUSH
29681: CALL_OW 72
29685: NOT
29686: IFFALSE 29696
// control := control_manual ;
29688: LD_ADDR_VAR 0 4
29692: PUSH
29693: LD_INT 1
29695: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29696: LD_ADDR_VAR 0 8
29700: PUSH
29701: LD_VAR 0 1
29705: PPUSH
29706: CALL 29393 0 1
29710: ST_TO_ADDR
// if tmp then
29711: LD_VAR 0 8
29715: IFFALSE 29758
// begin for i in tmp do
29717: LD_ADDR_VAR 0 7
29721: PUSH
29722: LD_VAR 0 8
29726: PUSH
29727: FOR_IN
29728: IFFALSE 29756
// if i [ 1 ] = b_ext_radio then
29730: LD_VAR 0 7
29734: PUSH
29735: LD_INT 1
29737: ARRAY
29738: PUSH
29739: LD_INT 22
29741: EQUAL
29742: IFFALSE 29754
// begin control := control_remote ;
29744: LD_ADDR_VAR 0 4
29748: PUSH
29749: LD_INT 2
29751: ST_TO_ADDR
// break ;
29752: GO 29756
// end ;
29754: GO 29727
29756: POP
29757: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29758: LD_VAR 0 1
29762: PPUSH
29763: LD_VAR 0 2
29767: PPUSH
29768: LD_VAR 0 3
29772: PPUSH
29773: LD_VAR 0 4
29777: PPUSH
29778: LD_VAR 0 5
29782: PPUSH
29783: CALL_OW 448
29787: IFFALSE 29822
// begin result := [ chassis , engine , control , weapon ] ;
29789: LD_ADDR_VAR 0 6
29793: PUSH
29794: LD_VAR 0 2
29798: PUSH
29799: LD_VAR 0 3
29803: PUSH
29804: LD_VAR 0 4
29808: PUSH
29809: LD_VAR 0 5
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: ST_TO_ADDR
// exit ;
29820: GO 30234
// end ; _chassis := AvailableChassisList ( factory ) ;
29822: LD_ADDR_VAR 0 9
29826: PUSH
29827: LD_VAR 0 1
29831: PPUSH
29832: CALL_OW 475
29836: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29837: LD_ADDR_VAR 0 11
29841: PUSH
29842: LD_VAR 0 1
29846: PPUSH
29847: CALL_OW 476
29851: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29852: LD_ADDR_VAR 0 12
29856: PUSH
29857: LD_VAR 0 1
29861: PPUSH
29862: CALL_OW 477
29866: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29867: LD_ADDR_VAR 0 10
29871: PUSH
29872: LD_VAR 0 1
29876: PPUSH
29877: CALL_OW 478
29881: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29882: LD_VAR 0 9
29886: NOT
29887: PUSH
29888: LD_VAR 0 11
29892: NOT
29893: OR
29894: PUSH
29895: LD_VAR 0 12
29899: NOT
29900: OR
29901: PUSH
29902: LD_VAR 0 10
29906: NOT
29907: OR
29908: IFFALSE 29943
// begin result := [ chassis , engine , control , weapon ] ;
29910: LD_ADDR_VAR 0 6
29914: PUSH
29915: LD_VAR 0 2
29919: PUSH
29920: LD_VAR 0 3
29924: PUSH
29925: LD_VAR 0 4
29929: PUSH
29930: LD_VAR 0 5
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: ST_TO_ADDR
// exit ;
29941: GO 30234
// end ; if not chassis in _chassis then
29943: LD_VAR 0 2
29947: PUSH
29948: LD_VAR 0 9
29952: IN
29953: NOT
29954: IFFALSE 29980
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29956: LD_ADDR_VAR 0 2
29960: PUSH
29961: LD_VAR 0 9
29965: PUSH
29966: LD_INT 1
29968: PPUSH
29969: LD_VAR 0 9
29973: PPUSH
29974: CALL_OW 12
29978: ARRAY
29979: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29980: LD_VAR 0 2
29984: PPUSH
29985: LD_VAR 0 3
29989: PPUSH
29990: CALL 30239 0 2
29994: NOT
29995: IFFALSE 30054
// repeat engine := _engine [ 1 ] ;
29997: LD_ADDR_VAR 0 3
30001: PUSH
30002: LD_VAR 0 11
30006: PUSH
30007: LD_INT 1
30009: ARRAY
30010: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30011: LD_ADDR_VAR 0 11
30015: PUSH
30016: LD_VAR 0 11
30020: PPUSH
30021: LD_INT 1
30023: PPUSH
30024: CALL_OW 3
30028: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30029: LD_VAR 0 2
30033: PPUSH
30034: LD_VAR 0 3
30038: PPUSH
30039: CALL 30239 0 2
30043: PUSH
30044: LD_VAR 0 11
30048: PUSH
30049: EMPTY
30050: EQUAL
30051: OR
30052: IFFALSE 29997
// if not control in _control then
30054: LD_VAR 0 4
30058: PUSH
30059: LD_VAR 0 12
30063: IN
30064: NOT
30065: IFFALSE 30091
// control := _control [ rand ( 1 , _control ) ] ;
30067: LD_ADDR_VAR 0 4
30071: PUSH
30072: LD_VAR 0 12
30076: PUSH
30077: LD_INT 1
30079: PPUSH
30080: LD_VAR 0 12
30084: PPUSH
30085: CALL_OW 12
30089: ARRAY
30090: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30091: LD_VAR 0 2
30095: PPUSH
30096: LD_VAR 0 5
30100: PPUSH
30101: CALL 30459 0 2
30105: NOT
30106: IFFALSE 30165
// repeat weapon := _weapon [ 1 ] ;
30108: LD_ADDR_VAR 0 5
30112: PUSH
30113: LD_VAR 0 10
30117: PUSH
30118: LD_INT 1
30120: ARRAY
30121: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30122: LD_ADDR_VAR 0 10
30126: PUSH
30127: LD_VAR 0 10
30131: PPUSH
30132: LD_INT 1
30134: PPUSH
30135: CALL_OW 3
30139: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30140: LD_VAR 0 2
30144: PPUSH
30145: LD_VAR 0 5
30149: PPUSH
30150: CALL 30459 0 2
30154: PUSH
30155: LD_VAR 0 10
30159: PUSH
30160: EMPTY
30161: EQUAL
30162: OR
30163: IFFALSE 30108
// result := [ ] ;
30165: LD_ADDR_VAR 0 6
30169: PUSH
30170: EMPTY
30171: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30172: LD_VAR 0 1
30176: PPUSH
30177: LD_VAR 0 2
30181: PPUSH
30182: LD_VAR 0 3
30186: PPUSH
30187: LD_VAR 0 4
30191: PPUSH
30192: LD_VAR 0 5
30196: PPUSH
30197: CALL_OW 448
30201: IFFALSE 30234
// result := [ chassis , engine , control , weapon ] ;
30203: LD_ADDR_VAR 0 6
30207: PUSH
30208: LD_VAR 0 2
30212: PUSH
30213: LD_VAR 0 3
30217: PUSH
30218: LD_VAR 0 4
30222: PUSH
30223: LD_VAR 0 5
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: ST_TO_ADDR
// end ;
30234: LD_VAR 0 6
30238: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30239: LD_INT 0
30241: PPUSH
// if not chassis or not engine then
30242: LD_VAR 0 1
30246: NOT
30247: PUSH
30248: LD_VAR 0 2
30252: NOT
30253: OR
30254: IFFALSE 30258
// exit ;
30256: GO 30454
// case engine of engine_solar :
30258: LD_VAR 0 2
30262: PUSH
30263: LD_INT 2
30265: DOUBLE
30266: EQUAL
30267: IFTRUE 30271
30269: GO 30309
30271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30272: LD_ADDR_VAR 0 3
30276: PUSH
30277: LD_INT 11
30279: PUSH
30280: LD_INT 12
30282: PUSH
30283: LD_INT 13
30285: PUSH
30286: LD_INT 14
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 3
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: ST_TO_ADDR
30307: GO 30438
30309: LD_INT 1
30311: DOUBLE
30312: EQUAL
30313: IFTRUE 30317
30315: GO 30379
30317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30318: LD_ADDR_VAR 0 3
30322: PUSH
30323: LD_INT 11
30325: PUSH
30326: LD_INT 12
30328: PUSH
30329: LD_INT 13
30331: PUSH
30332: LD_INT 14
30334: PUSH
30335: LD_INT 1
30337: PUSH
30338: LD_INT 2
30340: PUSH
30341: LD_INT 3
30343: PUSH
30344: LD_INT 4
30346: PUSH
30347: LD_INT 5
30349: PUSH
30350: LD_INT 21
30352: PUSH
30353: LD_INT 23
30355: PUSH
30356: LD_INT 22
30358: PUSH
30359: LD_INT 24
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: ST_TO_ADDR
30377: GO 30438
30379: LD_INT 3
30381: DOUBLE
30382: EQUAL
30383: IFTRUE 30387
30385: GO 30437
30387: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30388: LD_ADDR_VAR 0 3
30392: PUSH
30393: LD_INT 13
30395: PUSH
30396: LD_INT 14
30398: PUSH
30399: LD_INT 2
30401: PUSH
30402: LD_INT 3
30404: PUSH
30405: LD_INT 4
30407: PUSH
30408: LD_INT 5
30410: PUSH
30411: LD_INT 21
30413: PUSH
30414: LD_INT 22
30416: PUSH
30417: LD_INT 23
30419: PUSH
30420: LD_INT 24
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: ST_TO_ADDR
30435: GO 30438
30437: POP
// result := ( chassis in result ) ;
30438: LD_ADDR_VAR 0 3
30442: PUSH
30443: LD_VAR 0 1
30447: PUSH
30448: LD_VAR 0 3
30452: IN
30453: ST_TO_ADDR
// end ;
30454: LD_VAR 0 3
30458: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30459: LD_INT 0
30461: PPUSH
// if not chassis or not weapon then
30462: LD_VAR 0 1
30466: NOT
30467: PUSH
30468: LD_VAR 0 2
30472: NOT
30473: OR
30474: IFFALSE 30478
// exit ;
30476: GO 31538
// case weapon of us_machine_gun :
30478: LD_VAR 0 2
30482: PUSH
30483: LD_INT 2
30485: DOUBLE
30486: EQUAL
30487: IFTRUE 30491
30489: GO 30521
30491: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30492: LD_ADDR_VAR 0 3
30496: PUSH
30497: LD_INT 1
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: LD_INT 3
30505: PUSH
30506: LD_INT 4
30508: PUSH
30509: LD_INT 5
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: ST_TO_ADDR
30519: GO 31522
30521: LD_INT 3
30523: DOUBLE
30524: EQUAL
30525: IFTRUE 30529
30527: GO 30559
30529: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30530: LD_ADDR_VAR 0 3
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: LD_INT 3
30543: PUSH
30544: LD_INT 4
30546: PUSH
30547: LD_INT 5
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: ST_TO_ADDR
30557: GO 31522
30559: LD_INT 11
30561: DOUBLE
30562: EQUAL
30563: IFTRUE 30567
30565: GO 30597
30567: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30568: LD_ADDR_VAR 0 3
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: LD_INT 2
30578: PUSH
30579: LD_INT 3
30581: PUSH
30582: LD_INT 4
30584: PUSH
30585: LD_INT 5
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: ST_TO_ADDR
30595: GO 31522
30597: LD_INT 4
30599: DOUBLE
30600: EQUAL
30601: IFTRUE 30605
30603: GO 30631
30605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30606: LD_ADDR_VAR 0 3
30610: PUSH
30611: LD_INT 2
30613: PUSH
30614: LD_INT 3
30616: PUSH
30617: LD_INT 4
30619: PUSH
30620: LD_INT 5
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: ST_TO_ADDR
30629: GO 31522
30631: LD_INT 5
30633: DOUBLE
30634: EQUAL
30635: IFTRUE 30639
30637: GO 30665
30639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30640: LD_ADDR_VAR 0 3
30644: PUSH
30645: LD_INT 2
30647: PUSH
30648: LD_INT 3
30650: PUSH
30651: LD_INT 4
30653: PUSH
30654: LD_INT 5
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: ST_TO_ADDR
30663: GO 31522
30665: LD_INT 9
30667: DOUBLE
30668: EQUAL
30669: IFTRUE 30673
30671: GO 30699
30673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30674: LD_ADDR_VAR 0 3
30678: PUSH
30679: LD_INT 2
30681: PUSH
30682: LD_INT 3
30684: PUSH
30685: LD_INT 4
30687: PUSH
30688: LD_INT 5
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: ST_TO_ADDR
30697: GO 31522
30699: LD_INT 7
30701: DOUBLE
30702: EQUAL
30703: IFTRUE 30707
30705: GO 30733
30707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30708: LD_ADDR_VAR 0 3
30712: PUSH
30713: LD_INT 2
30715: PUSH
30716: LD_INT 3
30718: PUSH
30719: LD_INT 4
30721: PUSH
30722: LD_INT 5
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: ST_TO_ADDR
30731: GO 31522
30733: LD_INT 12
30735: DOUBLE
30736: EQUAL
30737: IFTRUE 30741
30739: GO 30767
30741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30742: LD_ADDR_VAR 0 3
30746: PUSH
30747: LD_INT 2
30749: PUSH
30750: LD_INT 3
30752: PUSH
30753: LD_INT 4
30755: PUSH
30756: LD_INT 5
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: ST_TO_ADDR
30765: GO 31522
30767: LD_INT 13
30769: DOUBLE
30770: EQUAL
30771: IFTRUE 30775
30773: GO 30801
30775: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30776: LD_ADDR_VAR 0 3
30780: PUSH
30781: LD_INT 2
30783: PUSH
30784: LD_INT 3
30786: PUSH
30787: LD_INT 4
30789: PUSH
30790: LD_INT 5
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
30799: GO 31522
30801: LD_INT 14
30803: DOUBLE
30804: EQUAL
30805: IFTRUE 30809
30807: GO 30827
30809: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30810: LD_ADDR_VAR 0 3
30814: PUSH
30815: LD_INT 4
30817: PUSH
30818: LD_INT 5
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: ST_TO_ADDR
30825: GO 31522
30827: LD_INT 6
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 30853
30835: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30836: LD_ADDR_VAR 0 3
30840: PUSH
30841: LD_INT 4
30843: PUSH
30844: LD_INT 5
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: ST_TO_ADDR
30851: GO 31522
30853: LD_INT 10
30855: DOUBLE
30856: EQUAL
30857: IFTRUE 30861
30859: GO 30879
30861: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30862: LD_ADDR_VAR 0 3
30866: PUSH
30867: LD_INT 4
30869: PUSH
30870: LD_INT 5
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: ST_TO_ADDR
30877: GO 31522
30879: LD_INT 22
30881: DOUBLE
30882: EQUAL
30883: IFTRUE 30887
30885: GO 30913
30887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30888: LD_ADDR_VAR 0 3
30892: PUSH
30893: LD_INT 11
30895: PUSH
30896: LD_INT 12
30898: PUSH
30899: LD_INT 13
30901: PUSH
30902: LD_INT 14
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: ST_TO_ADDR
30911: GO 31522
30913: LD_INT 23
30915: DOUBLE
30916: EQUAL
30917: IFTRUE 30921
30919: GO 30947
30921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30922: LD_ADDR_VAR 0 3
30926: PUSH
30927: LD_INT 11
30929: PUSH
30930: LD_INT 12
30932: PUSH
30933: LD_INT 13
30935: PUSH
30936: LD_INT 14
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: ST_TO_ADDR
30945: GO 31522
30947: LD_INT 24
30949: DOUBLE
30950: EQUAL
30951: IFTRUE 30955
30953: GO 30981
30955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30956: LD_ADDR_VAR 0 3
30960: PUSH
30961: LD_INT 11
30963: PUSH
30964: LD_INT 12
30966: PUSH
30967: LD_INT 13
30969: PUSH
30970: LD_INT 14
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: ST_TO_ADDR
30979: GO 31522
30981: LD_INT 30
30983: DOUBLE
30984: EQUAL
30985: IFTRUE 30989
30987: GO 31015
30989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30990: LD_ADDR_VAR 0 3
30994: PUSH
30995: LD_INT 11
30997: PUSH
30998: LD_INT 12
31000: PUSH
31001: LD_INT 13
31003: PUSH
31004: LD_INT 14
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: ST_TO_ADDR
31013: GO 31522
31015: LD_INT 25
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31041
31023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31024: LD_ADDR_VAR 0 3
31028: PUSH
31029: LD_INT 13
31031: PUSH
31032: LD_INT 14
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: ST_TO_ADDR
31039: GO 31522
31041: LD_INT 27
31043: DOUBLE
31044: EQUAL
31045: IFTRUE 31049
31047: GO 31067
31049: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31050: LD_ADDR_VAR 0 3
31054: PUSH
31055: LD_INT 13
31057: PUSH
31058: LD_INT 14
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: ST_TO_ADDR
31065: GO 31522
31067: LD_INT 92
31069: DOUBLE
31070: EQUAL
31071: IFTRUE 31075
31073: GO 31101
31075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31076: LD_ADDR_VAR 0 3
31080: PUSH
31081: LD_INT 11
31083: PUSH
31084: LD_INT 12
31086: PUSH
31087: LD_INT 13
31089: PUSH
31090: LD_INT 14
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: ST_TO_ADDR
31099: GO 31522
31101: LD_INT 28
31103: DOUBLE
31104: EQUAL
31105: IFTRUE 31109
31107: GO 31127
31109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31110: LD_ADDR_VAR 0 3
31114: PUSH
31115: LD_INT 13
31117: PUSH
31118: LD_INT 14
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: ST_TO_ADDR
31125: GO 31522
31127: LD_INT 29
31129: DOUBLE
31130: EQUAL
31131: IFTRUE 31135
31133: GO 31153
31135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31136: LD_ADDR_VAR 0 3
31140: PUSH
31141: LD_INT 13
31143: PUSH
31144: LD_INT 14
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: ST_TO_ADDR
31151: GO 31522
31153: LD_INT 31
31155: DOUBLE
31156: EQUAL
31157: IFTRUE 31161
31159: GO 31179
31161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31162: LD_ADDR_VAR 0 3
31166: PUSH
31167: LD_INT 13
31169: PUSH
31170: LD_INT 14
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: ST_TO_ADDR
31177: GO 31522
31179: LD_INT 26
31181: DOUBLE
31182: EQUAL
31183: IFTRUE 31187
31185: GO 31205
31187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31188: LD_ADDR_VAR 0 3
31192: PUSH
31193: LD_INT 13
31195: PUSH
31196: LD_INT 14
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: ST_TO_ADDR
31203: GO 31522
31205: LD_INT 42
31207: DOUBLE
31208: EQUAL
31209: IFTRUE 31213
31211: GO 31239
31213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31214: LD_ADDR_VAR 0 3
31218: PUSH
31219: LD_INT 21
31221: PUSH
31222: LD_INT 22
31224: PUSH
31225: LD_INT 23
31227: PUSH
31228: LD_INT 24
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: ST_TO_ADDR
31237: GO 31522
31239: LD_INT 43
31241: DOUBLE
31242: EQUAL
31243: IFTRUE 31247
31245: GO 31273
31247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31248: LD_ADDR_VAR 0 3
31252: PUSH
31253: LD_INT 21
31255: PUSH
31256: LD_INT 22
31258: PUSH
31259: LD_INT 23
31261: PUSH
31262: LD_INT 24
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: ST_TO_ADDR
31271: GO 31522
31273: LD_INT 44
31275: DOUBLE
31276: EQUAL
31277: IFTRUE 31281
31279: GO 31307
31281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31282: LD_ADDR_VAR 0 3
31286: PUSH
31287: LD_INT 21
31289: PUSH
31290: LD_INT 22
31292: PUSH
31293: LD_INT 23
31295: PUSH
31296: LD_INT 24
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: ST_TO_ADDR
31305: GO 31522
31307: LD_INT 45
31309: DOUBLE
31310: EQUAL
31311: IFTRUE 31315
31313: GO 31341
31315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31316: LD_ADDR_VAR 0 3
31320: PUSH
31321: LD_INT 21
31323: PUSH
31324: LD_INT 22
31326: PUSH
31327: LD_INT 23
31329: PUSH
31330: LD_INT 24
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: ST_TO_ADDR
31339: GO 31522
31341: LD_INT 49
31343: DOUBLE
31344: EQUAL
31345: IFTRUE 31349
31347: GO 31375
31349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31350: LD_ADDR_VAR 0 3
31354: PUSH
31355: LD_INT 21
31357: PUSH
31358: LD_INT 22
31360: PUSH
31361: LD_INT 23
31363: PUSH
31364: LD_INT 24
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: ST_TO_ADDR
31373: GO 31522
31375: LD_INT 51
31377: DOUBLE
31378: EQUAL
31379: IFTRUE 31383
31381: GO 31409
31383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31384: LD_ADDR_VAR 0 3
31388: PUSH
31389: LD_INT 21
31391: PUSH
31392: LD_INT 22
31394: PUSH
31395: LD_INT 23
31397: PUSH
31398: LD_INT 24
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
31407: GO 31522
31409: LD_INT 52
31411: DOUBLE
31412: EQUAL
31413: IFTRUE 31417
31415: GO 31443
31417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31418: LD_ADDR_VAR 0 3
31422: PUSH
31423: LD_INT 21
31425: PUSH
31426: LD_INT 22
31428: PUSH
31429: LD_INT 23
31431: PUSH
31432: LD_INT 24
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: ST_TO_ADDR
31441: GO 31522
31443: LD_INT 53
31445: DOUBLE
31446: EQUAL
31447: IFTRUE 31451
31449: GO 31469
31451: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31452: LD_ADDR_VAR 0 3
31456: PUSH
31457: LD_INT 23
31459: PUSH
31460: LD_INT 24
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: ST_TO_ADDR
31467: GO 31522
31469: LD_INT 46
31471: DOUBLE
31472: EQUAL
31473: IFTRUE 31477
31475: GO 31495
31477: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31478: LD_ADDR_VAR 0 3
31482: PUSH
31483: LD_INT 23
31485: PUSH
31486: LD_INT 24
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: ST_TO_ADDR
31493: GO 31522
31495: LD_INT 47
31497: DOUBLE
31498: EQUAL
31499: IFTRUE 31503
31501: GO 31521
31503: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31504: LD_ADDR_VAR 0 3
31508: PUSH
31509: LD_INT 23
31511: PUSH
31512: LD_INT 24
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: ST_TO_ADDR
31519: GO 31522
31521: POP
// result := ( chassis in result ) ;
31522: LD_ADDR_VAR 0 3
31526: PUSH
31527: LD_VAR 0 1
31531: PUSH
31532: LD_VAR 0 3
31536: IN
31537: ST_TO_ADDR
// end ;
31538: LD_VAR 0 3
31542: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31543: LD_INT 0
31545: PPUSH
31546: PPUSH
31547: PPUSH
31548: PPUSH
31549: PPUSH
31550: PPUSH
31551: PPUSH
// result := array ;
31552: LD_ADDR_VAR 0 5
31556: PUSH
31557: LD_VAR 0 1
31561: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31562: LD_VAR 0 1
31566: NOT
31567: PUSH
31568: LD_VAR 0 2
31572: NOT
31573: OR
31574: PUSH
31575: LD_VAR 0 3
31579: NOT
31580: OR
31581: PUSH
31582: LD_VAR 0 2
31586: PUSH
31587: LD_VAR 0 1
31591: GREATER
31592: OR
31593: PUSH
31594: LD_VAR 0 3
31598: PUSH
31599: LD_VAR 0 1
31603: GREATER
31604: OR
31605: IFFALSE 31609
// exit ;
31607: GO 31905
// if direction then
31609: LD_VAR 0 4
31613: IFFALSE 31677
// begin d := 1 ;
31615: LD_ADDR_VAR 0 9
31619: PUSH
31620: LD_INT 1
31622: ST_TO_ADDR
// if i_from > i_to then
31623: LD_VAR 0 2
31627: PUSH
31628: LD_VAR 0 3
31632: GREATER
31633: IFFALSE 31659
// length := ( array - i_from ) + i_to else
31635: LD_ADDR_VAR 0 11
31639: PUSH
31640: LD_VAR 0 1
31644: PUSH
31645: LD_VAR 0 2
31649: MINUS
31650: PUSH
31651: LD_VAR 0 3
31655: PLUS
31656: ST_TO_ADDR
31657: GO 31675
// length := i_to - i_from ;
31659: LD_ADDR_VAR 0 11
31663: PUSH
31664: LD_VAR 0 3
31668: PUSH
31669: LD_VAR 0 2
31673: MINUS
31674: ST_TO_ADDR
// end else
31675: GO 31738
// begin d := - 1 ;
31677: LD_ADDR_VAR 0 9
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: ST_TO_ADDR
// if i_from > i_to then
31686: LD_VAR 0 2
31690: PUSH
31691: LD_VAR 0 3
31695: GREATER
31696: IFFALSE 31716
// length := i_from - i_to else
31698: LD_ADDR_VAR 0 11
31702: PUSH
31703: LD_VAR 0 2
31707: PUSH
31708: LD_VAR 0 3
31712: MINUS
31713: ST_TO_ADDR
31714: GO 31738
// length := ( array - i_to ) + i_from ;
31716: LD_ADDR_VAR 0 11
31720: PUSH
31721: LD_VAR 0 1
31725: PUSH
31726: LD_VAR 0 3
31730: MINUS
31731: PUSH
31732: LD_VAR 0 2
31736: PLUS
31737: ST_TO_ADDR
// end ; if not length then
31738: LD_VAR 0 11
31742: NOT
31743: IFFALSE 31747
// exit ;
31745: GO 31905
// tmp := array ;
31747: LD_ADDR_VAR 0 10
31751: PUSH
31752: LD_VAR 0 1
31756: ST_TO_ADDR
// for i = 1 to length do
31757: LD_ADDR_VAR 0 6
31761: PUSH
31762: DOUBLE
31763: LD_INT 1
31765: DEC
31766: ST_TO_ADDR
31767: LD_VAR 0 11
31771: PUSH
31772: FOR_TO
31773: IFFALSE 31893
// begin for j = 1 to array do
31775: LD_ADDR_VAR 0 7
31779: PUSH
31780: DOUBLE
31781: LD_INT 1
31783: DEC
31784: ST_TO_ADDR
31785: LD_VAR 0 1
31789: PUSH
31790: FOR_TO
31791: IFFALSE 31879
// begin k := j + d ;
31793: LD_ADDR_VAR 0 8
31797: PUSH
31798: LD_VAR 0 7
31802: PUSH
31803: LD_VAR 0 9
31807: PLUS
31808: ST_TO_ADDR
// if k > array then
31809: LD_VAR 0 8
31813: PUSH
31814: LD_VAR 0 1
31818: GREATER
31819: IFFALSE 31829
// k := 1 ;
31821: LD_ADDR_VAR 0 8
31825: PUSH
31826: LD_INT 1
31828: ST_TO_ADDR
// if not k then
31829: LD_VAR 0 8
31833: NOT
31834: IFFALSE 31846
// k := array ;
31836: LD_ADDR_VAR 0 8
31840: PUSH
31841: LD_VAR 0 1
31845: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31846: LD_ADDR_VAR 0 10
31850: PUSH
31851: LD_VAR 0 10
31855: PPUSH
31856: LD_VAR 0 8
31860: PPUSH
31861: LD_VAR 0 1
31865: PUSH
31866: LD_VAR 0 7
31870: ARRAY
31871: PPUSH
31872: CALL_OW 1
31876: ST_TO_ADDR
// end ;
31877: GO 31790
31879: POP
31880: POP
// array := tmp ;
31881: LD_ADDR_VAR 0 1
31885: PUSH
31886: LD_VAR 0 10
31890: ST_TO_ADDR
// end ;
31891: GO 31772
31893: POP
31894: POP
// result := array ;
31895: LD_ADDR_VAR 0 5
31899: PUSH
31900: LD_VAR 0 1
31904: ST_TO_ADDR
// end ;
31905: LD_VAR 0 5
31909: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31910: LD_INT 0
31912: PPUSH
31913: PPUSH
// result := 0 ;
31914: LD_ADDR_VAR 0 3
31918: PUSH
31919: LD_INT 0
31921: ST_TO_ADDR
// if not array or not value in array then
31922: LD_VAR 0 1
31926: NOT
31927: PUSH
31928: LD_VAR 0 2
31932: PUSH
31933: LD_VAR 0 1
31937: IN
31938: NOT
31939: OR
31940: IFFALSE 31944
// exit ;
31942: GO 31998
// for i = 1 to array do
31944: LD_ADDR_VAR 0 4
31948: PUSH
31949: DOUBLE
31950: LD_INT 1
31952: DEC
31953: ST_TO_ADDR
31954: LD_VAR 0 1
31958: PUSH
31959: FOR_TO
31960: IFFALSE 31996
// if value = array [ i ] then
31962: LD_VAR 0 2
31966: PUSH
31967: LD_VAR 0 1
31971: PUSH
31972: LD_VAR 0 4
31976: ARRAY
31977: EQUAL
31978: IFFALSE 31994
// begin result := i ;
31980: LD_ADDR_VAR 0 3
31984: PUSH
31985: LD_VAR 0 4
31989: ST_TO_ADDR
// exit ;
31990: POP
31991: POP
31992: GO 31998
// end ;
31994: GO 31959
31996: POP
31997: POP
// end ;
31998: LD_VAR 0 3
32002: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32003: LD_INT 0
32005: PPUSH
// vc_chassis := chassis ;
32006: LD_ADDR_OWVAR 37
32010: PUSH
32011: LD_VAR 0 1
32015: ST_TO_ADDR
// vc_engine := engine ;
32016: LD_ADDR_OWVAR 39
32020: PUSH
32021: LD_VAR 0 2
32025: ST_TO_ADDR
// vc_control := control ;
32026: LD_ADDR_OWVAR 38
32030: PUSH
32031: LD_VAR 0 3
32035: ST_TO_ADDR
// vc_weapon := weapon ;
32036: LD_ADDR_OWVAR 40
32040: PUSH
32041: LD_VAR 0 4
32045: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32046: LD_ADDR_OWVAR 41
32050: PUSH
32051: LD_VAR 0 5
32055: ST_TO_ADDR
// end ;
32056: LD_VAR 0 6
32060: RET
// export function WantPlant ( unit ) ; var task ; begin
32061: LD_INT 0
32063: PPUSH
32064: PPUSH
// result := false ;
32065: LD_ADDR_VAR 0 2
32069: PUSH
32070: LD_INT 0
32072: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32073: LD_ADDR_VAR 0 3
32077: PUSH
32078: LD_VAR 0 1
32082: PPUSH
32083: CALL_OW 437
32087: ST_TO_ADDR
// if task then
32088: LD_VAR 0 3
32092: IFFALSE 32120
// if task [ 1 ] [ 1 ] = p then
32094: LD_VAR 0 3
32098: PUSH
32099: LD_INT 1
32101: ARRAY
32102: PUSH
32103: LD_INT 1
32105: ARRAY
32106: PUSH
32107: LD_STRING p
32109: EQUAL
32110: IFFALSE 32120
// result := true ;
32112: LD_ADDR_VAR 0 2
32116: PUSH
32117: LD_INT 1
32119: ST_TO_ADDR
// end ;
32120: LD_VAR 0 2
32124: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32125: LD_INT 0
32127: PPUSH
32128: PPUSH
32129: PPUSH
32130: PPUSH
// if pos < 1 then
32131: LD_VAR 0 2
32135: PUSH
32136: LD_INT 1
32138: LESS
32139: IFFALSE 32143
// exit ;
32141: GO 32446
// if pos = 1 then
32143: LD_VAR 0 2
32147: PUSH
32148: LD_INT 1
32150: EQUAL
32151: IFFALSE 32184
// result := Replace ( arr , pos [ 1 ] , value ) else
32153: LD_ADDR_VAR 0 4
32157: PUSH
32158: LD_VAR 0 1
32162: PPUSH
32163: LD_VAR 0 2
32167: PUSH
32168: LD_INT 1
32170: ARRAY
32171: PPUSH
32172: LD_VAR 0 3
32176: PPUSH
32177: CALL_OW 1
32181: ST_TO_ADDR
32182: GO 32446
// begin tmp := arr ;
32184: LD_ADDR_VAR 0 6
32188: PUSH
32189: LD_VAR 0 1
32193: ST_TO_ADDR
// s_arr := [ tmp ] ;
32194: LD_ADDR_VAR 0 7
32198: PUSH
32199: LD_VAR 0 6
32203: PUSH
32204: EMPTY
32205: LIST
32206: ST_TO_ADDR
// for i = 1 to pos - 1 do
32207: LD_ADDR_VAR 0 5
32211: PUSH
32212: DOUBLE
32213: LD_INT 1
32215: DEC
32216: ST_TO_ADDR
32217: LD_VAR 0 2
32221: PUSH
32222: LD_INT 1
32224: MINUS
32225: PUSH
32226: FOR_TO
32227: IFFALSE 32272
// begin tmp := tmp [ pos [ i ] ] ;
32229: LD_ADDR_VAR 0 6
32233: PUSH
32234: LD_VAR 0 6
32238: PUSH
32239: LD_VAR 0 2
32243: PUSH
32244: LD_VAR 0 5
32248: ARRAY
32249: ARRAY
32250: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32251: LD_ADDR_VAR 0 7
32255: PUSH
32256: LD_VAR 0 7
32260: PUSH
32261: LD_VAR 0 6
32265: PUSH
32266: EMPTY
32267: LIST
32268: ADD
32269: ST_TO_ADDR
// end ;
32270: GO 32226
32272: POP
32273: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32274: LD_ADDR_VAR 0 6
32278: PUSH
32279: LD_VAR 0 6
32283: PPUSH
32284: LD_VAR 0 2
32288: PUSH
32289: LD_VAR 0 2
32293: ARRAY
32294: PPUSH
32295: LD_VAR 0 3
32299: PPUSH
32300: CALL_OW 1
32304: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32305: LD_ADDR_VAR 0 7
32309: PUSH
32310: LD_VAR 0 7
32314: PPUSH
32315: LD_VAR 0 7
32319: PPUSH
32320: LD_VAR 0 6
32324: PPUSH
32325: CALL_OW 1
32329: ST_TO_ADDR
// for i = s_arr downto 2 do
32330: LD_ADDR_VAR 0 5
32334: PUSH
32335: DOUBLE
32336: LD_VAR 0 7
32340: INC
32341: ST_TO_ADDR
32342: LD_INT 2
32344: PUSH
32345: FOR_DOWNTO
32346: IFFALSE 32430
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32348: LD_ADDR_VAR 0 6
32352: PUSH
32353: LD_VAR 0 7
32357: PUSH
32358: LD_VAR 0 5
32362: PUSH
32363: LD_INT 1
32365: MINUS
32366: ARRAY
32367: PPUSH
32368: LD_VAR 0 2
32372: PUSH
32373: LD_VAR 0 5
32377: PUSH
32378: LD_INT 1
32380: MINUS
32381: ARRAY
32382: PPUSH
32383: LD_VAR 0 7
32387: PUSH
32388: LD_VAR 0 5
32392: ARRAY
32393: PPUSH
32394: CALL_OW 1
32398: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32399: LD_ADDR_VAR 0 7
32403: PUSH
32404: LD_VAR 0 7
32408: PPUSH
32409: LD_VAR 0 5
32413: PUSH
32414: LD_INT 1
32416: MINUS
32417: PPUSH
32418: LD_VAR 0 6
32422: PPUSH
32423: CALL_OW 1
32427: ST_TO_ADDR
// end ;
32428: GO 32345
32430: POP
32431: POP
// result := s_arr [ 1 ] ;
32432: LD_ADDR_VAR 0 4
32436: PUSH
32437: LD_VAR 0 7
32441: PUSH
32442: LD_INT 1
32444: ARRAY
32445: ST_TO_ADDR
// end ; end ;
32446: LD_VAR 0 4
32450: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32451: LD_INT 0
32453: PPUSH
32454: PPUSH
// if not list then
32455: LD_VAR 0 1
32459: NOT
32460: IFFALSE 32464
// exit ;
32462: GO 32555
// i := list [ pos1 ] ;
32464: LD_ADDR_VAR 0 5
32468: PUSH
32469: LD_VAR 0 1
32473: PUSH
32474: LD_VAR 0 2
32478: ARRAY
32479: ST_TO_ADDR
// if not i then
32480: LD_VAR 0 5
32484: NOT
32485: IFFALSE 32489
// exit ;
32487: GO 32555
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32489: LD_ADDR_VAR 0 1
32493: PUSH
32494: LD_VAR 0 1
32498: PPUSH
32499: LD_VAR 0 2
32503: PPUSH
32504: LD_VAR 0 1
32508: PUSH
32509: LD_VAR 0 3
32513: ARRAY
32514: PPUSH
32515: CALL_OW 1
32519: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32520: LD_ADDR_VAR 0 1
32524: PUSH
32525: LD_VAR 0 1
32529: PPUSH
32530: LD_VAR 0 3
32534: PPUSH
32535: LD_VAR 0 5
32539: PPUSH
32540: CALL_OW 1
32544: ST_TO_ADDR
// result := list ;
32545: LD_ADDR_VAR 0 4
32549: PUSH
32550: LD_VAR 0 1
32554: ST_TO_ADDR
// end ;
32555: LD_VAR 0 4
32559: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32560: LD_INT 0
32562: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32563: LD_ADDR_VAR 0 5
32567: PUSH
32568: LD_VAR 0 1
32572: PPUSH
32573: CALL_OW 250
32577: PPUSH
32578: LD_VAR 0 1
32582: PPUSH
32583: CALL_OW 251
32587: PPUSH
32588: LD_VAR 0 2
32592: PPUSH
32593: LD_VAR 0 3
32597: PPUSH
32598: LD_VAR 0 4
32602: PPUSH
32603: CALL 32613 0 5
32607: ST_TO_ADDR
// end ;
32608: LD_VAR 0 5
32612: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32613: LD_INT 0
32615: PPUSH
32616: PPUSH
32617: PPUSH
32618: PPUSH
// if not list then
32619: LD_VAR 0 3
32623: NOT
32624: IFFALSE 32628
// exit ;
32626: GO 33016
// result := [ ] ;
32628: LD_ADDR_VAR 0 6
32632: PUSH
32633: EMPTY
32634: ST_TO_ADDR
// for i in list do
32635: LD_ADDR_VAR 0 7
32639: PUSH
32640: LD_VAR 0 3
32644: PUSH
32645: FOR_IN
32646: IFFALSE 32848
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32648: LD_ADDR_VAR 0 9
32652: PUSH
32653: LD_VAR 0 7
32657: PPUSH
32658: LD_VAR 0 1
32662: PPUSH
32663: LD_VAR 0 2
32667: PPUSH
32668: CALL_OW 297
32672: ST_TO_ADDR
// if not result then
32673: LD_VAR 0 6
32677: NOT
32678: IFFALSE 32704
// result := [ [ i , tmp ] ] else
32680: LD_ADDR_VAR 0 6
32684: PUSH
32685: LD_VAR 0 7
32689: PUSH
32690: LD_VAR 0 9
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: EMPTY
32700: LIST
32701: ST_TO_ADDR
32702: GO 32846
// begin if result [ result ] [ 2 ] < tmp then
32704: LD_VAR 0 6
32708: PUSH
32709: LD_VAR 0 6
32713: ARRAY
32714: PUSH
32715: LD_INT 2
32717: ARRAY
32718: PUSH
32719: LD_VAR 0 9
32723: LESS
32724: IFFALSE 32766
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32726: LD_ADDR_VAR 0 6
32730: PUSH
32731: LD_VAR 0 6
32735: PPUSH
32736: LD_VAR 0 6
32740: PUSH
32741: LD_INT 1
32743: PLUS
32744: PPUSH
32745: LD_VAR 0 7
32749: PUSH
32750: LD_VAR 0 9
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PPUSH
32759: CALL_OW 2
32763: ST_TO_ADDR
32764: GO 32846
// for j = 1 to result do
32766: LD_ADDR_VAR 0 8
32770: PUSH
32771: DOUBLE
32772: LD_INT 1
32774: DEC
32775: ST_TO_ADDR
32776: LD_VAR 0 6
32780: PUSH
32781: FOR_TO
32782: IFFALSE 32844
// begin if tmp < result [ j ] [ 2 ] then
32784: LD_VAR 0 9
32788: PUSH
32789: LD_VAR 0 6
32793: PUSH
32794: LD_VAR 0 8
32798: ARRAY
32799: PUSH
32800: LD_INT 2
32802: ARRAY
32803: LESS
32804: IFFALSE 32842
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32806: LD_ADDR_VAR 0 6
32810: PUSH
32811: LD_VAR 0 6
32815: PPUSH
32816: LD_VAR 0 8
32820: PPUSH
32821: LD_VAR 0 7
32825: PUSH
32826: LD_VAR 0 9
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PPUSH
32835: CALL_OW 2
32839: ST_TO_ADDR
// break ;
32840: GO 32844
// end ; end ;
32842: GO 32781
32844: POP
32845: POP
// end ; end ;
32846: GO 32645
32848: POP
32849: POP
// if result and not asc then
32850: LD_VAR 0 6
32854: PUSH
32855: LD_VAR 0 4
32859: NOT
32860: AND
32861: IFFALSE 32936
// begin tmp := result ;
32863: LD_ADDR_VAR 0 9
32867: PUSH
32868: LD_VAR 0 6
32872: ST_TO_ADDR
// for i = tmp downto 1 do
32873: LD_ADDR_VAR 0 7
32877: PUSH
32878: DOUBLE
32879: LD_VAR 0 9
32883: INC
32884: ST_TO_ADDR
32885: LD_INT 1
32887: PUSH
32888: FOR_DOWNTO
32889: IFFALSE 32934
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32891: LD_ADDR_VAR 0 6
32895: PUSH
32896: LD_VAR 0 6
32900: PPUSH
32901: LD_VAR 0 9
32905: PUSH
32906: LD_VAR 0 7
32910: MINUS
32911: PUSH
32912: LD_INT 1
32914: PLUS
32915: PPUSH
32916: LD_VAR 0 9
32920: PUSH
32921: LD_VAR 0 7
32925: ARRAY
32926: PPUSH
32927: CALL_OW 1
32931: ST_TO_ADDR
32932: GO 32888
32934: POP
32935: POP
// end ; tmp := [ ] ;
32936: LD_ADDR_VAR 0 9
32940: PUSH
32941: EMPTY
32942: ST_TO_ADDR
// if mode then
32943: LD_VAR 0 5
32947: IFFALSE 33016
// begin for i = 1 to result do
32949: LD_ADDR_VAR 0 7
32953: PUSH
32954: DOUBLE
32955: LD_INT 1
32957: DEC
32958: ST_TO_ADDR
32959: LD_VAR 0 6
32963: PUSH
32964: FOR_TO
32965: IFFALSE 33004
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32967: LD_ADDR_VAR 0 9
32971: PUSH
32972: LD_VAR 0 9
32976: PPUSH
32977: LD_VAR 0 7
32981: PPUSH
32982: LD_VAR 0 6
32986: PUSH
32987: LD_VAR 0 7
32991: ARRAY
32992: PUSH
32993: LD_INT 1
32995: ARRAY
32996: PPUSH
32997: CALL_OW 1
33001: ST_TO_ADDR
33002: GO 32964
33004: POP
33005: POP
// result := tmp ;
33006: LD_ADDR_VAR 0 6
33010: PUSH
33011: LD_VAR 0 9
33015: ST_TO_ADDR
// end ; end ;
33016: LD_VAR 0 6
33020: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33021: LD_INT 0
33023: PPUSH
33024: PPUSH
33025: PPUSH
33026: PPUSH
33027: PPUSH
33028: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33029: LD_ADDR_VAR 0 5
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: EMPTY
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: ST_TO_ADDR
// if not x or not y then
33051: LD_VAR 0 2
33055: NOT
33056: PUSH
33057: LD_VAR 0 3
33061: NOT
33062: OR
33063: IFFALSE 33067
// exit ;
33065: GO 34717
// if not range then
33067: LD_VAR 0 4
33071: NOT
33072: IFFALSE 33082
// range := 10 ;
33074: LD_ADDR_VAR 0 4
33078: PUSH
33079: LD_INT 10
33081: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33082: LD_ADDR_VAR 0 8
33086: PUSH
33087: LD_INT 81
33089: PUSH
33090: LD_VAR 0 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 92
33101: PUSH
33102: LD_VAR 0 2
33106: PUSH
33107: LD_VAR 0 3
33111: PUSH
33112: LD_VAR 0 4
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: LD_INT 21
33128: PUSH
33129: LD_INT 3
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: LIST
33144: PPUSH
33145: CALL_OW 69
33149: ST_TO_ADDR
// if not tmp then
33150: LD_VAR 0 8
33154: NOT
33155: IFFALSE 33159
// exit ;
33157: GO 34717
// for i in tmp do
33159: LD_ADDR_VAR 0 6
33163: PUSH
33164: LD_VAR 0 8
33168: PUSH
33169: FOR_IN
33170: IFFALSE 34692
// begin points := [ 0 , 0 , 0 ] ;
33172: LD_ADDR_VAR 0 9
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: LIST
33190: ST_TO_ADDR
// bpoints := 1 ;
33191: LD_ADDR_VAR 0 10
33195: PUSH
33196: LD_INT 1
33198: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33199: LD_VAR 0 6
33203: PPUSH
33204: CALL_OW 247
33208: PUSH
33209: LD_INT 1
33211: DOUBLE
33212: EQUAL
33213: IFTRUE 33217
33215: GO 33795
33217: POP
// begin if GetClass ( i ) = 1 then
33218: LD_VAR 0 6
33222: PPUSH
33223: CALL_OW 257
33227: PUSH
33228: LD_INT 1
33230: EQUAL
33231: IFFALSE 33252
// points := [ 10 , 5 , 3 ] ;
33233: LD_ADDR_VAR 0 9
33237: PUSH
33238: LD_INT 10
33240: PUSH
33241: LD_INT 5
33243: PUSH
33244: LD_INT 3
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33252: LD_VAR 0 6
33256: PPUSH
33257: CALL_OW 257
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: LD_INT 3
33267: PUSH
33268: LD_INT 4
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: IN
33276: IFFALSE 33297
// points := [ 3 , 2 , 1 ] ;
33278: LD_ADDR_VAR 0 9
33282: PUSH
33283: LD_INT 3
33285: PUSH
33286: LD_INT 2
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33297: LD_VAR 0 6
33301: PPUSH
33302: CALL_OW 257
33306: PUSH
33307: LD_INT 5
33309: EQUAL
33310: IFFALSE 33331
// points := [ 130 , 5 , 2 ] ;
33312: LD_ADDR_VAR 0 9
33316: PUSH
33317: LD_INT 130
33319: PUSH
33320: LD_INT 5
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: LIST
33330: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33331: LD_VAR 0 6
33335: PPUSH
33336: CALL_OW 257
33340: PUSH
33341: LD_INT 8
33343: EQUAL
33344: IFFALSE 33365
// points := [ 35 , 35 , 30 ] ;
33346: LD_ADDR_VAR 0 9
33350: PUSH
33351: LD_INT 35
33353: PUSH
33354: LD_INT 35
33356: PUSH
33357: LD_INT 30
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: LIST
33364: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33365: LD_VAR 0 6
33369: PPUSH
33370: CALL_OW 257
33374: PUSH
33375: LD_INT 9
33377: EQUAL
33378: IFFALSE 33399
// points := [ 20 , 55 , 40 ] ;
33380: LD_ADDR_VAR 0 9
33384: PUSH
33385: LD_INT 20
33387: PUSH
33388: LD_INT 55
33390: PUSH
33391: LD_INT 40
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: LIST
33398: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33399: LD_VAR 0 6
33403: PPUSH
33404: CALL_OW 257
33408: PUSH
33409: LD_INT 12
33411: PUSH
33412: LD_INT 16
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: IN
33419: IFFALSE 33440
// points := [ 5 , 3 , 2 ] ;
33421: LD_ADDR_VAR 0 9
33425: PUSH
33426: LD_INT 5
33428: PUSH
33429: LD_INT 3
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: LIST
33439: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33440: LD_VAR 0 6
33444: PPUSH
33445: CALL_OW 257
33449: PUSH
33450: LD_INT 17
33452: EQUAL
33453: IFFALSE 33474
// points := [ 100 , 50 , 75 ] ;
33455: LD_ADDR_VAR 0 9
33459: PUSH
33460: LD_INT 100
33462: PUSH
33463: LD_INT 50
33465: PUSH
33466: LD_INT 75
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33474: LD_VAR 0 6
33478: PPUSH
33479: CALL_OW 257
33483: PUSH
33484: LD_INT 15
33486: EQUAL
33487: IFFALSE 33508
// points := [ 10 , 5 , 3 ] ;
33489: LD_ADDR_VAR 0 9
33493: PUSH
33494: LD_INT 10
33496: PUSH
33497: LD_INT 5
33499: PUSH
33500: LD_INT 3
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33508: LD_VAR 0 6
33512: PPUSH
33513: CALL_OW 257
33517: PUSH
33518: LD_INT 14
33520: EQUAL
33521: IFFALSE 33542
// points := [ 10 , 0 , 0 ] ;
33523: LD_ADDR_VAR 0 9
33527: PUSH
33528: LD_INT 10
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33542: LD_VAR 0 6
33546: PPUSH
33547: CALL_OW 257
33551: PUSH
33552: LD_INT 11
33554: EQUAL
33555: IFFALSE 33576
// points := [ 30 , 10 , 5 ] ;
33557: LD_ADDR_VAR 0 9
33561: PUSH
33562: LD_INT 30
33564: PUSH
33565: LD_INT 10
33567: PUSH
33568: LD_INT 5
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33576: LD_VAR 0 1
33580: PPUSH
33581: LD_INT 5
33583: PPUSH
33584: CALL_OW 321
33588: PUSH
33589: LD_INT 2
33591: EQUAL
33592: IFFALSE 33609
// bpoints := bpoints * 1.8 ;
33594: LD_ADDR_VAR 0 10
33598: PUSH
33599: LD_VAR 0 10
33603: PUSH
33604: LD_REAL  1.80000000000000E+0000
33607: MUL
33608: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33609: LD_VAR 0 6
33613: PPUSH
33614: CALL_OW 257
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: LD_INT 3
33627: PUSH
33628: LD_INT 4
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: IN
33637: PUSH
33638: LD_VAR 0 1
33642: PPUSH
33643: LD_INT 51
33645: PPUSH
33646: CALL_OW 321
33650: PUSH
33651: LD_INT 2
33653: EQUAL
33654: AND
33655: IFFALSE 33672
// bpoints := bpoints * 1.2 ;
33657: LD_ADDR_VAR 0 10
33661: PUSH
33662: LD_VAR 0 10
33666: PUSH
33667: LD_REAL  1.20000000000000E+0000
33670: MUL
33671: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33672: LD_VAR 0 6
33676: PPUSH
33677: CALL_OW 257
33681: PUSH
33682: LD_INT 5
33684: PUSH
33685: LD_INT 7
33687: PUSH
33688: LD_INT 9
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: LIST
33695: IN
33696: PUSH
33697: LD_VAR 0 1
33701: PPUSH
33702: LD_INT 52
33704: PPUSH
33705: CALL_OW 321
33709: PUSH
33710: LD_INT 2
33712: EQUAL
33713: AND
33714: IFFALSE 33731
// bpoints := bpoints * 1.5 ;
33716: LD_ADDR_VAR 0 10
33720: PUSH
33721: LD_VAR 0 10
33725: PUSH
33726: LD_REAL  1.50000000000000E+0000
33729: MUL
33730: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33731: LD_VAR 0 1
33735: PPUSH
33736: LD_INT 66
33738: PPUSH
33739: CALL_OW 321
33743: PUSH
33744: LD_INT 2
33746: EQUAL
33747: IFFALSE 33764
// bpoints := bpoints * 1.1 ;
33749: LD_ADDR_VAR 0 10
33753: PUSH
33754: LD_VAR 0 10
33758: PUSH
33759: LD_REAL  1.10000000000000E+0000
33762: MUL
33763: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33764: LD_ADDR_VAR 0 10
33768: PUSH
33769: LD_VAR 0 10
33773: PUSH
33774: LD_VAR 0 6
33778: PPUSH
33779: LD_INT 1
33781: PPUSH
33782: CALL_OW 259
33786: PUSH
33787: LD_REAL  1.15000000000000E+0000
33790: MUL
33791: MUL
33792: ST_TO_ADDR
// end ; unit_vehicle :
33793: GO 34621
33795: LD_INT 2
33797: DOUBLE
33798: EQUAL
33799: IFTRUE 33803
33801: GO 34609
33803: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33804: LD_VAR 0 6
33808: PPUSH
33809: CALL_OW 264
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 42
33819: PUSH
33820: LD_INT 24
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: LIST
33827: IN
33828: IFFALSE 33849
// points := [ 25 , 5 , 3 ] ;
33830: LD_ADDR_VAR 0 9
33834: PUSH
33835: LD_INT 25
33837: PUSH
33838: LD_INT 5
33840: PUSH
33841: LD_INT 3
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: LIST
33848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33849: LD_VAR 0 6
33853: PPUSH
33854: CALL_OW 264
33858: PUSH
33859: LD_INT 4
33861: PUSH
33862: LD_INT 43
33864: PUSH
33865: LD_INT 25
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: IN
33873: IFFALSE 33894
// points := [ 40 , 15 , 5 ] ;
33875: LD_ADDR_VAR 0 9
33879: PUSH
33880: LD_INT 40
33882: PUSH
33883: LD_INT 15
33885: PUSH
33886: LD_INT 5
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33894: LD_VAR 0 6
33898: PPUSH
33899: CALL_OW 264
33903: PUSH
33904: LD_INT 3
33906: PUSH
33907: LD_INT 23
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: IN
33914: IFFALSE 33935
// points := [ 7 , 25 , 8 ] ;
33916: LD_ADDR_VAR 0 9
33920: PUSH
33921: LD_INT 7
33923: PUSH
33924: LD_INT 25
33926: PUSH
33927: LD_INT 8
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33935: LD_VAR 0 6
33939: PPUSH
33940: CALL_OW 264
33944: PUSH
33945: LD_INT 5
33947: PUSH
33948: LD_INT 27
33950: PUSH
33951: LD_INT 44
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: LIST
33958: IN
33959: IFFALSE 33980
// points := [ 14 , 50 , 16 ] ;
33961: LD_ADDR_VAR 0 9
33965: PUSH
33966: LD_INT 14
33968: PUSH
33969: LD_INT 50
33971: PUSH
33972: LD_INT 16
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: LIST
33979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33980: LD_VAR 0 6
33984: PPUSH
33985: CALL_OW 264
33989: PUSH
33990: LD_INT 6
33992: PUSH
33993: LD_INT 46
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: IN
34000: IFFALSE 34021
// points := [ 32 , 120 , 70 ] ;
34002: LD_ADDR_VAR 0 9
34006: PUSH
34007: LD_INT 32
34009: PUSH
34010: LD_INT 120
34012: PUSH
34013: LD_INT 70
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34021: LD_VAR 0 6
34025: PPUSH
34026: CALL_OW 264
34030: PUSH
34031: LD_INT 7
34033: PUSH
34034: LD_INT 28
34036: PUSH
34037: LD_INT 45
34039: PUSH
34040: LD_INT 92
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: IN
34049: IFFALSE 34070
// points := [ 35 , 20 , 45 ] ;
34051: LD_ADDR_VAR 0 9
34055: PUSH
34056: LD_INT 35
34058: PUSH
34059: LD_INT 20
34061: PUSH
34062: LD_INT 45
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34070: LD_VAR 0 6
34074: PPUSH
34075: CALL_OW 264
34079: PUSH
34080: LD_INT 47
34082: PUSH
34083: EMPTY
34084: LIST
34085: IN
34086: IFFALSE 34107
// points := [ 67 , 45 , 75 ] ;
34088: LD_ADDR_VAR 0 9
34092: PUSH
34093: LD_INT 67
34095: PUSH
34096: LD_INT 45
34098: PUSH
34099: LD_INT 75
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: LIST
34106: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34107: LD_VAR 0 6
34111: PPUSH
34112: CALL_OW 264
34116: PUSH
34117: LD_INT 26
34119: PUSH
34120: EMPTY
34121: LIST
34122: IN
34123: IFFALSE 34144
// points := [ 120 , 30 , 80 ] ;
34125: LD_ADDR_VAR 0 9
34129: PUSH
34130: LD_INT 120
34132: PUSH
34133: LD_INT 30
34135: PUSH
34136: LD_INT 80
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: LIST
34143: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34144: LD_VAR 0 6
34148: PPUSH
34149: CALL_OW 264
34153: PUSH
34154: LD_INT 22
34156: PUSH
34157: EMPTY
34158: LIST
34159: IN
34160: IFFALSE 34181
// points := [ 40 , 1 , 1 ] ;
34162: LD_ADDR_VAR 0 9
34166: PUSH
34167: LD_INT 40
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34181: LD_VAR 0 6
34185: PPUSH
34186: CALL_OW 264
34190: PUSH
34191: LD_INT 29
34193: PUSH
34194: EMPTY
34195: LIST
34196: IN
34197: IFFALSE 34218
// points := [ 70 , 200 , 400 ] ;
34199: LD_ADDR_VAR 0 9
34203: PUSH
34204: LD_INT 70
34206: PUSH
34207: LD_INT 200
34209: PUSH
34210: LD_INT 400
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: LIST
34217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34218: LD_VAR 0 6
34222: PPUSH
34223: CALL_OW 264
34227: PUSH
34228: LD_INT 14
34230: PUSH
34231: LD_INT 53
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: IN
34238: IFFALSE 34259
// points := [ 40 , 10 , 20 ] ;
34240: LD_ADDR_VAR 0 9
34244: PUSH
34245: LD_INT 40
34247: PUSH
34248: LD_INT 10
34250: PUSH
34251: LD_INT 20
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: LIST
34258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34259: LD_VAR 0 6
34263: PPUSH
34264: CALL_OW 264
34268: PUSH
34269: LD_INT 9
34271: PUSH
34272: EMPTY
34273: LIST
34274: IN
34275: IFFALSE 34296
// points := [ 5 , 70 , 20 ] ;
34277: LD_ADDR_VAR 0 9
34281: PUSH
34282: LD_INT 5
34284: PUSH
34285: LD_INT 70
34287: PUSH
34288: LD_INT 20
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: LIST
34295: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34296: LD_VAR 0 6
34300: PPUSH
34301: CALL_OW 264
34305: PUSH
34306: LD_INT 10
34308: PUSH
34309: EMPTY
34310: LIST
34311: IN
34312: IFFALSE 34333
// points := [ 35 , 110 , 70 ] ;
34314: LD_ADDR_VAR 0 9
34318: PUSH
34319: LD_INT 35
34321: PUSH
34322: LD_INT 110
34324: PUSH
34325: LD_INT 70
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34333: LD_VAR 0 6
34337: PPUSH
34338: CALL_OW 265
34342: PUSH
34343: LD_INT 25
34345: EQUAL
34346: IFFALSE 34367
// points := [ 80 , 65 , 100 ] ;
34348: LD_ADDR_VAR 0 9
34352: PUSH
34353: LD_INT 80
34355: PUSH
34356: LD_INT 65
34358: PUSH
34359: LD_INT 100
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: LIST
34366: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34367: LD_VAR 0 6
34371: PPUSH
34372: CALL_OW 263
34376: PUSH
34377: LD_INT 1
34379: EQUAL
34380: IFFALSE 34415
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34382: LD_ADDR_VAR 0 10
34386: PUSH
34387: LD_VAR 0 10
34391: PUSH
34392: LD_VAR 0 6
34396: PPUSH
34397: CALL_OW 311
34401: PPUSH
34402: LD_INT 3
34404: PPUSH
34405: CALL_OW 259
34409: PUSH
34410: LD_INT 4
34412: MUL
34413: MUL
34414: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34415: LD_VAR 0 6
34419: PPUSH
34420: CALL_OW 263
34424: PUSH
34425: LD_INT 2
34427: EQUAL
34428: IFFALSE 34479
// begin j := IsControledBy ( i ) ;
34430: LD_ADDR_VAR 0 7
34434: PUSH
34435: LD_VAR 0 6
34439: PPUSH
34440: CALL_OW 312
34444: ST_TO_ADDR
// if j then
34445: LD_VAR 0 7
34449: IFFALSE 34479
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34451: LD_ADDR_VAR 0 10
34455: PUSH
34456: LD_VAR 0 10
34460: PUSH
34461: LD_VAR 0 7
34465: PPUSH
34466: LD_INT 3
34468: PPUSH
34469: CALL_OW 259
34473: PUSH
34474: LD_INT 3
34476: MUL
34477: MUL
34478: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34479: LD_VAR 0 6
34483: PPUSH
34484: CALL_OW 264
34488: PUSH
34489: LD_INT 5
34491: PUSH
34492: LD_INT 6
34494: PUSH
34495: LD_INT 46
34497: PUSH
34498: LD_INT 44
34500: PUSH
34501: LD_INT 47
34503: PUSH
34504: LD_INT 45
34506: PUSH
34507: LD_INT 28
34509: PUSH
34510: LD_INT 7
34512: PUSH
34513: LD_INT 27
34515: PUSH
34516: LD_INT 29
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: IN
34531: PUSH
34532: LD_VAR 0 1
34536: PPUSH
34537: LD_INT 52
34539: PPUSH
34540: CALL_OW 321
34544: PUSH
34545: LD_INT 2
34547: EQUAL
34548: AND
34549: IFFALSE 34566
// bpoints := bpoints * 1.2 ;
34551: LD_ADDR_VAR 0 10
34555: PUSH
34556: LD_VAR 0 10
34560: PUSH
34561: LD_REAL  1.20000000000000E+0000
34564: MUL
34565: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34566: LD_VAR 0 6
34570: PPUSH
34571: CALL_OW 264
34575: PUSH
34576: LD_INT 6
34578: PUSH
34579: LD_INT 46
34581: PUSH
34582: LD_INT 47
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: LIST
34589: IN
34590: IFFALSE 34607
// bpoints := bpoints * 1.2 ;
34592: LD_ADDR_VAR 0 10
34596: PUSH
34597: LD_VAR 0 10
34601: PUSH
34602: LD_REAL  1.20000000000000E+0000
34605: MUL
34606: ST_TO_ADDR
// end ; unit_building :
34607: GO 34621
34609: LD_INT 3
34611: DOUBLE
34612: EQUAL
34613: IFTRUE 34617
34615: GO 34620
34617: POP
// ; end ;
34618: GO 34621
34620: POP
// for j = 1 to 3 do
34621: LD_ADDR_VAR 0 7
34625: PUSH
34626: DOUBLE
34627: LD_INT 1
34629: DEC
34630: ST_TO_ADDR
34631: LD_INT 3
34633: PUSH
34634: FOR_TO
34635: IFFALSE 34688
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34637: LD_ADDR_VAR 0 5
34641: PUSH
34642: LD_VAR 0 5
34646: PPUSH
34647: LD_VAR 0 7
34651: PPUSH
34652: LD_VAR 0 5
34656: PUSH
34657: LD_VAR 0 7
34661: ARRAY
34662: PUSH
34663: LD_VAR 0 9
34667: PUSH
34668: LD_VAR 0 7
34672: ARRAY
34673: PUSH
34674: LD_VAR 0 10
34678: MUL
34679: PLUS
34680: PPUSH
34681: CALL_OW 1
34685: ST_TO_ADDR
34686: GO 34634
34688: POP
34689: POP
// end ;
34690: GO 33169
34692: POP
34693: POP
// result := Replace ( result , 4 , tmp ) ;
34694: LD_ADDR_VAR 0 5
34698: PUSH
34699: LD_VAR 0 5
34703: PPUSH
34704: LD_INT 4
34706: PPUSH
34707: LD_VAR 0 8
34711: PPUSH
34712: CALL_OW 1
34716: ST_TO_ADDR
// end ;
34717: LD_VAR 0 5
34721: RET
// export function DangerAtRange ( unit , range ) ; begin
34722: LD_INT 0
34724: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34725: LD_ADDR_VAR 0 3
34729: PUSH
34730: LD_VAR 0 1
34734: PPUSH
34735: CALL_OW 255
34739: PPUSH
34740: LD_VAR 0 1
34744: PPUSH
34745: CALL_OW 250
34749: PPUSH
34750: LD_VAR 0 1
34754: PPUSH
34755: CALL_OW 251
34759: PPUSH
34760: LD_VAR 0 2
34764: PPUSH
34765: CALL 33021 0 4
34769: ST_TO_ADDR
// end ;
34770: LD_VAR 0 3
34774: RET
// export function DangerInArea ( side , area ) ; begin
34775: LD_INT 0
34777: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34778: LD_ADDR_VAR 0 3
34782: PUSH
34783: LD_VAR 0 2
34787: PPUSH
34788: LD_INT 81
34790: PUSH
34791: LD_VAR 0 1
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PPUSH
34800: CALL_OW 70
34804: ST_TO_ADDR
// end ;
34805: LD_VAR 0 3
34809: RET
// export function IsExtension ( b ) ; begin
34810: LD_INT 0
34812: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34813: LD_ADDR_VAR 0 2
34817: PUSH
34818: LD_VAR 0 1
34822: PUSH
34823: LD_INT 23
34825: PUSH
34826: LD_INT 20
34828: PUSH
34829: LD_INT 22
34831: PUSH
34832: LD_INT 17
34834: PUSH
34835: LD_INT 24
34837: PUSH
34838: LD_INT 21
34840: PUSH
34841: LD_INT 19
34843: PUSH
34844: LD_INT 16
34846: PUSH
34847: LD_INT 25
34849: PUSH
34850: LD_INT 18
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: IN
34865: ST_TO_ADDR
// end ;
34866: LD_VAR 0 2
34870: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34871: LD_INT 0
34873: PPUSH
34874: PPUSH
34875: PPUSH
// result := [ ] ;
34876: LD_ADDR_VAR 0 4
34880: PUSH
34881: EMPTY
34882: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34883: LD_ADDR_VAR 0 5
34887: PUSH
34888: LD_VAR 0 2
34892: PPUSH
34893: LD_INT 21
34895: PUSH
34896: LD_INT 3
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PPUSH
34903: CALL_OW 70
34907: ST_TO_ADDR
// if not tmp then
34908: LD_VAR 0 5
34912: NOT
34913: IFFALSE 34917
// exit ;
34915: GO 34981
// if checkLink then
34917: LD_VAR 0 3
34921: IFFALSE 34971
// begin for i in tmp do
34923: LD_ADDR_VAR 0 6
34927: PUSH
34928: LD_VAR 0 5
34932: PUSH
34933: FOR_IN
34934: IFFALSE 34969
// if GetBase ( i ) <> base then
34936: LD_VAR 0 6
34940: PPUSH
34941: CALL_OW 274
34945: PUSH
34946: LD_VAR 0 1
34950: NONEQUAL
34951: IFFALSE 34967
// ComLinkToBase ( base , i ) ;
34953: LD_VAR 0 1
34957: PPUSH
34958: LD_VAR 0 6
34962: PPUSH
34963: CALL_OW 169
34967: GO 34933
34969: POP
34970: POP
// end ; result := tmp ;
34971: LD_ADDR_VAR 0 4
34975: PUSH
34976: LD_VAR 0 5
34980: ST_TO_ADDR
// end ;
34981: LD_VAR 0 4
34985: RET
// export function ComComplete ( units , b ) ; var i ; begin
34986: LD_INT 0
34988: PPUSH
34989: PPUSH
// if not units then
34990: LD_VAR 0 1
34994: NOT
34995: IFFALSE 34999
// exit ;
34997: GO 35089
// for i in units do
34999: LD_ADDR_VAR 0 4
35003: PUSH
35004: LD_VAR 0 1
35008: PUSH
35009: FOR_IN
35010: IFFALSE 35087
// if BuildingStatus ( b ) = bs_build then
35012: LD_VAR 0 2
35016: PPUSH
35017: CALL_OW 461
35021: PUSH
35022: LD_INT 1
35024: EQUAL
35025: IFFALSE 35085
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35027: LD_VAR 0 4
35031: PPUSH
35032: LD_STRING h
35034: PUSH
35035: LD_VAR 0 2
35039: PPUSH
35040: CALL_OW 250
35044: PUSH
35045: LD_VAR 0 2
35049: PPUSH
35050: CALL_OW 251
35054: PUSH
35055: LD_VAR 0 2
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: LD_INT 0
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: PUSH
35078: EMPTY
35079: LIST
35080: PPUSH
35081: CALL_OW 446
35085: GO 35009
35087: POP
35088: POP
// end ;
35089: LD_VAR 0 3
35093: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35094: LD_INT 0
35096: PPUSH
35097: PPUSH
35098: PPUSH
35099: PPUSH
35100: PPUSH
35101: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35102: LD_VAR 0 1
35106: NOT
35107: PUSH
35108: LD_VAR 0 1
35112: PPUSH
35113: CALL_OW 263
35117: PUSH
35118: LD_INT 2
35120: NONEQUAL
35121: OR
35122: IFFALSE 35126
// exit ;
35124: GO 35442
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35126: LD_ADDR_VAR 0 6
35130: PUSH
35131: LD_INT 22
35133: PUSH
35134: LD_VAR 0 1
35138: PPUSH
35139: CALL_OW 255
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 30
35153: PUSH
35154: LD_INT 36
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 34
35163: PUSH
35164: LD_INT 31
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PPUSH
35180: CALL_OW 69
35184: ST_TO_ADDR
// if not tmp then
35185: LD_VAR 0 6
35189: NOT
35190: IFFALSE 35194
// exit ;
35192: GO 35442
// result := [ ] ;
35194: LD_ADDR_VAR 0 2
35198: PUSH
35199: EMPTY
35200: ST_TO_ADDR
// for i in tmp do
35201: LD_ADDR_VAR 0 3
35205: PUSH
35206: LD_VAR 0 6
35210: PUSH
35211: FOR_IN
35212: IFFALSE 35283
// begin t := UnitsInside ( i ) ;
35214: LD_ADDR_VAR 0 4
35218: PUSH
35219: LD_VAR 0 3
35223: PPUSH
35224: CALL_OW 313
35228: ST_TO_ADDR
// if t then
35229: LD_VAR 0 4
35233: IFFALSE 35281
// for j in t do
35235: LD_ADDR_VAR 0 7
35239: PUSH
35240: LD_VAR 0 4
35244: PUSH
35245: FOR_IN
35246: IFFALSE 35279
// result := Replace ( result , result + 1 , j ) ;
35248: LD_ADDR_VAR 0 2
35252: PUSH
35253: LD_VAR 0 2
35257: PPUSH
35258: LD_VAR 0 2
35262: PUSH
35263: LD_INT 1
35265: PLUS
35266: PPUSH
35267: LD_VAR 0 7
35271: PPUSH
35272: CALL_OW 1
35276: ST_TO_ADDR
35277: GO 35245
35279: POP
35280: POP
// end ;
35281: GO 35211
35283: POP
35284: POP
// if not result then
35285: LD_VAR 0 2
35289: NOT
35290: IFFALSE 35294
// exit ;
35292: GO 35442
// mech := result [ 1 ] ;
35294: LD_ADDR_VAR 0 5
35298: PUSH
35299: LD_VAR 0 2
35303: PUSH
35304: LD_INT 1
35306: ARRAY
35307: ST_TO_ADDR
// if result > 1 then
35308: LD_VAR 0 2
35312: PUSH
35313: LD_INT 1
35315: GREATER
35316: IFFALSE 35428
// begin for i = 2 to result do
35318: LD_ADDR_VAR 0 3
35322: PUSH
35323: DOUBLE
35324: LD_INT 2
35326: DEC
35327: ST_TO_ADDR
35328: LD_VAR 0 2
35332: PUSH
35333: FOR_TO
35334: IFFALSE 35426
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35336: LD_ADDR_VAR 0 4
35340: PUSH
35341: LD_VAR 0 2
35345: PUSH
35346: LD_VAR 0 3
35350: ARRAY
35351: PPUSH
35352: LD_INT 3
35354: PPUSH
35355: CALL_OW 259
35359: PUSH
35360: LD_VAR 0 2
35364: PUSH
35365: LD_VAR 0 3
35369: ARRAY
35370: PPUSH
35371: CALL_OW 432
35375: MINUS
35376: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35377: LD_VAR 0 4
35381: PUSH
35382: LD_VAR 0 5
35386: PPUSH
35387: LD_INT 3
35389: PPUSH
35390: CALL_OW 259
35394: PUSH
35395: LD_VAR 0 5
35399: PPUSH
35400: CALL_OW 432
35404: MINUS
35405: GREATEREQUAL
35406: IFFALSE 35424
// mech := result [ i ] ;
35408: LD_ADDR_VAR 0 5
35412: PUSH
35413: LD_VAR 0 2
35417: PUSH
35418: LD_VAR 0 3
35422: ARRAY
35423: ST_TO_ADDR
// end ;
35424: GO 35333
35426: POP
35427: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35428: LD_VAR 0 1
35432: PPUSH
35433: LD_VAR 0 5
35437: PPUSH
35438: CALL_OW 135
// end ;
35442: LD_VAR 0 2
35446: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35447: LD_INT 0
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
35460: PPUSH
35461: PPUSH
// result := [ ] ;
35462: LD_ADDR_VAR 0 7
35466: PUSH
35467: EMPTY
35468: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35469: LD_VAR 0 1
35473: PPUSH
35474: CALL_OW 266
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: IN
35489: NOT
35490: IFFALSE 35494
// exit ;
35492: GO 37128
// if name then
35494: LD_VAR 0 3
35498: IFFALSE 35514
// SetBName ( base_dep , name ) ;
35500: LD_VAR 0 1
35504: PPUSH
35505: LD_VAR 0 3
35509: PPUSH
35510: CALL_OW 500
// base := GetBase ( base_dep ) ;
35514: LD_ADDR_VAR 0 15
35518: PUSH
35519: LD_VAR 0 1
35523: PPUSH
35524: CALL_OW 274
35528: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35529: LD_ADDR_VAR 0 16
35533: PUSH
35534: LD_VAR 0 1
35538: PPUSH
35539: CALL_OW 255
35543: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35544: LD_ADDR_VAR 0 17
35548: PUSH
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL_OW 248
35558: ST_TO_ADDR
// if sources then
35559: LD_VAR 0 5
35563: IFFALSE 35610
// for i = 1 to 3 do
35565: LD_ADDR_VAR 0 8
35569: PUSH
35570: DOUBLE
35571: LD_INT 1
35573: DEC
35574: ST_TO_ADDR
35575: LD_INT 3
35577: PUSH
35578: FOR_TO
35579: IFFALSE 35608
// AddResourceType ( base , i , sources [ i ] ) ;
35581: LD_VAR 0 15
35585: PPUSH
35586: LD_VAR 0 8
35590: PPUSH
35591: LD_VAR 0 5
35595: PUSH
35596: LD_VAR 0 8
35600: ARRAY
35601: PPUSH
35602: CALL_OW 276
35606: GO 35578
35608: POP
35609: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35610: LD_ADDR_VAR 0 18
35614: PUSH
35615: LD_VAR 0 15
35619: PPUSH
35620: LD_VAR 0 2
35624: PPUSH
35625: LD_INT 1
35627: PPUSH
35628: CALL 34871 0 3
35632: ST_TO_ADDR
// InitHc ;
35633: CALL_OW 19
// InitUc ;
35637: CALL_OW 18
// uc_side := side ;
35641: LD_ADDR_OWVAR 20
35645: PUSH
35646: LD_VAR 0 16
35650: ST_TO_ADDR
// uc_nation := nation ;
35651: LD_ADDR_OWVAR 21
35655: PUSH
35656: LD_VAR 0 17
35660: ST_TO_ADDR
// if buildings then
35661: LD_VAR 0 18
35665: IFFALSE 36987
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35667: LD_ADDR_VAR 0 19
35671: PUSH
35672: LD_VAR 0 18
35676: PPUSH
35677: LD_INT 2
35679: PUSH
35680: LD_INT 30
35682: PUSH
35683: LD_INT 29
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 30
35692: PUSH
35693: LD_INT 30
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: LIST
35704: PPUSH
35705: CALL_OW 72
35709: ST_TO_ADDR
// if tmp then
35710: LD_VAR 0 19
35714: IFFALSE 35762
// for i in tmp do
35716: LD_ADDR_VAR 0 8
35720: PUSH
35721: LD_VAR 0 19
35725: PUSH
35726: FOR_IN
35727: IFFALSE 35760
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35729: LD_VAR 0 8
35733: PPUSH
35734: CALL_OW 250
35738: PPUSH
35739: LD_VAR 0 8
35743: PPUSH
35744: CALL_OW 251
35748: PPUSH
35749: LD_VAR 0 16
35753: PPUSH
35754: CALL_OW 441
35758: GO 35726
35760: POP
35761: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35762: LD_VAR 0 18
35766: PPUSH
35767: LD_INT 2
35769: PUSH
35770: LD_INT 30
35772: PUSH
35773: LD_INT 32
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 30
35782: PUSH
35783: LD_INT 33
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: LIST
35794: PPUSH
35795: CALL_OW 72
35799: IFFALSE 35887
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35801: LD_ADDR_VAR 0 8
35805: PUSH
35806: LD_VAR 0 18
35810: PPUSH
35811: LD_INT 2
35813: PUSH
35814: LD_INT 30
35816: PUSH
35817: LD_INT 32
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 30
35826: PUSH
35827: LD_INT 33
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: LIST
35838: PPUSH
35839: CALL_OW 72
35843: PUSH
35844: FOR_IN
35845: IFFALSE 35885
// begin if not GetBWeapon ( i ) then
35847: LD_VAR 0 8
35851: PPUSH
35852: CALL_OW 269
35856: NOT
35857: IFFALSE 35883
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35859: LD_VAR 0 8
35863: PPUSH
35864: LD_VAR 0 8
35868: PPUSH
35869: LD_VAR 0 2
35873: PPUSH
35874: CALL 37133 0 2
35878: PPUSH
35879: CALL_OW 431
// end ;
35883: GO 35844
35885: POP
35886: POP
// end ; for i = 1 to personel do
35887: LD_ADDR_VAR 0 8
35891: PUSH
35892: DOUBLE
35893: LD_INT 1
35895: DEC
35896: ST_TO_ADDR
35897: LD_VAR 0 6
35901: PUSH
35902: FOR_TO
35903: IFFALSE 36967
// begin if i > 4 then
35905: LD_VAR 0 8
35909: PUSH
35910: LD_INT 4
35912: GREATER
35913: IFFALSE 35917
// break ;
35915: GO 36967
// case i of 1 :
35917: LD_VAR 0 8
35921: PUSH
35922: LD_INT 1
35924: DOUBLE
35925: EQUAL
35926: IFTRUE 35930
35928: GO 36010
35930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35931: LD_ADDR_VAR 0 12
35935: PUSH
35936: LD_VAR 0 18
35940: PPUSH
35941: LD_INT 22
35943: PUSH
35944: LD_VAR 0 16
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 58
35955: PUSH
35956: EMPTY
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: LD_INT 30
35964: PUSH
35965: LD_INT 32
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 30
35974: PUSH
35975: LD_INT 4
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 30
35984: PUSH
35985: LD_INT 5
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: PPUSH
36003: CALL_OW 72
36007: ST_TO_ADDR
36008: GO 36232
36010: LD_INT 2
36012: DOUBLE
36013: EQUAL
36014: IFTRUE 36018
36016: GO 36080
36018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36019: LD_ADDR_VAR 0 12
36023: PUSH
36024: LD_VAR 0 18
36028: PPUSH
36029: LD_INT 22
36031: PUSH
36032: LD_VAR 0 16
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: LD_INT 30
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 30
36056: PUSH
36057: LD_INT 1
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: LIST
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PPUSH
36073: CALL_OW 72
36077: ST_TO_ADDR
36078: GO 36232
36080: LD_INT 3
36082: DOUBLE
36083: EQUAL
36084: IFTRUE 36088
36086: GO 36150
36088: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36089: LD_ADDR_VAR 0 12
36093: PUSH
36094: LD_VAR 0 18
36098: PPUSH
36099: LD_INT 22
36101: PUSH
36102: LD_VAR 0 16
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: LD_INT 30
36116: PUSH
36117: LD_INT 2
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 30
36126: PUSH
36127: LD_INT 3
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PPUSH
36143: CALL_OW 72
36147: ST_TO_ADDR
36148: GO 36232
36150: LD_INT 4
36152: DOUBLE
36153: EQUAL
36154: IFTRUE 36158
36156: GO 36231
36158: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36159: LD_ADDR_VAR 0 12
36163: PUSH
36164: LD_VAR 0 18
36168: PPUSH
36169: LD_INT 22
36171: PUSH
36172: LD_VAR 0 16
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: LD_INT 30
36186: PUSH
36187: LD_INT 6
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 30
36196: PUSH
36197: LD_INT 7
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 30
36206: PUSH
36207: LD_INT 8
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PPUSH
36224: CALL_OW 72
36228: ST_TO_ADDR
36229: GO 36232
36231: POP
// if i = 1 then
36232: LD_VAR 0 8
36236: PUSH
36237: LD_INT 1
36239: EQUAL
36240: IFFALSE 36351
// begin tmp := [ ] ;
36242: LD_ADDR_VAR 0 19
36246: PUSH
36247: EMPTY
36248: ST_TO_ADDR
// for j in f do
36249: LD_ADDR_VAR 0 9
36253: PUSH
36254: LD_VAR 0 12
36258: PUSH
36259: FOR_IN
36260: IFFALSE 36333
// if GetBType ( j ) = b_bunker then
36262: LD_VAR 0 9
36266: PPUSH
36267: CALL_OW 266
36271: PUSH
36272: LD_INT 32
36274: EQUAL
36275: IFFALSE 36302
// tmp := Insert ( tmp , 1 , j ) else
36277: LD_ADDR_VAR 0 19
36281: PUSH
36282: LD_VAR 0 19
36286: PPUSH
36287: LD_INT 1
36289: PPUSH
36290: LD_VAR 0 9
36294: PPUSH
36295: CALL_OW 2
36299: ST_TO_ADDR
36300: GO 36331
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36302: LD_ADDR_VAR 0 19
36306: PUSH
36307: LD_VAR 0 19
36311: PPUSH
36312: LD_VAR 0 19
36316: PUSH
36317: LD_INT 1
36319: PLUS
36320: PPUSH
36321: LD_VAR 0 9
36325: PPUSH
36326: CALL_OW 2
36330: ST_TO_ADDR
36331: GO 36259
36333: POP
36334: POP
// if tmp then
36335: LD_VAR 0 19
36339: IFFALSE 36351
// f := tmp ;
36341: LD_ADDR_VAR 0 12
36345: PUSH
36346: LD_VAR 0 19
36350: ST_TO_ADDR
// end ; x := personel [ i ] ;
36351: LD_ADDR_VAR 0 13
36355: PUSH
36356: LD_VAR 0 6
36360: PUSH
36361: LD_VAR 0 8
36365: ARRAY
36366: ST_TO_ADDR
// if x = - 1 then
36367: LD_VAR 0 13
36371: PUSH
36372: LD_INT 1
36374: NEG
36375: EQUAL
36376: IFFALSE 36585
// begin for j in f do
36378: LD_ADDR_VAR 0 9
36382: PUSH
36383: LD_VAR 0 12
36387: PUSH
36388: FOR_IN
36389: IFFALSE 36581
// repeat InitHc ;
36391: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36395: LD_VAR 0 9
36399: PPUSH
36400: CALL_OW 266
36404: PUSH
36405: LD_INT 5
36407: EQUAL
36408: IFFALSE 36478
// begin if UnitsInside ( j ) < 3 then
36410: LD_VAR 0 9
36414: PPUSH
36415: CALL_OW 313
36419: PUSH
36420: LD_INT 3
36422: LESS
36423: IFFALSE 36459
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36425: LD_INT 0
36427: PPUSH
36428: LD_INT 5
36430: PUSH
36431: LD_INT 8
36433: PUSH
36434: LD_INT 9
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: PUSH
36442: LD_VAR 0 17
36446: ARRAY
36447: PPUSH
36448: LD_VAR 0 4
36452: PPUSH
36453: CALL_OW 380
36457: GO 36476
// PrepareHuman ( false , i , skill ) ;
36459: LD_INT 0
36461: PPUSH
36462: LD_VAR 0 8
36466: PPUSH
36467: LD_VAR 0 4
36471: PPUSH
36472: CALL_OW 380
// end else
36476: GO 36495
// PrepareHuman ( false , i , skill ) ;
36478: LD_INT 0
36480: PPUSH
36481: LD_VAR 0 8
36485: PPUSH
36486: LD_VAR 0 4
36490: PPUSH
36491: CALL_OW 380
// un := CreateHuman ;
36495: LD_ADDR_VAR 0 14
36499: PUSH
36500: CALL_OW 44
36504: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36505: LD_ADDR_VAR 0 7
36509: PUSH
36510: LD_VAR 0 7
36514: PPUSH
36515: LD_INT 1
36517: PPUSH
36518: LD_VAR 0 14
36522: PPUSH
36523: CALL_OW 2
36527: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36528: LD_VAR 0 14
36532: PPUSH
36533: LD_VAR 0 9
36537: PPUSH
36538: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36542: LD_VAR 0 9
36546: PPUSH
36547: CALL_OW 313
36551: PUSH
36552: LD_INT 6
36554: EQUAL
36555: PUSH
36556: LD_VAR 0 9
36560: PPUSH
36561: CALL_OW 266
36565: PUSH
36566: LD_INT 32
36568: PUSH
36569: LD_INT 31
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: IN
36576: OR
36577: IFFALSE 36391
36579: GO 36388
36581: POP
36582: POP
// end else
36583: GO 36965
// for j = 1 to x do
36585: LD_ADDR_VAR 0 9
36589: PUSH
36590: DOUBLE
36591: LD_INT 1
36593: DEC
36594: ST_TO_ADDR
36595: LD_VAR 0 13
36599: PUSH
36600: FOR_TO
36601: IFFALSE 36963
// begin InitHc ;
36603: CALL_OW 19
// if not f then
36607: LD_VAR 0 12
36611: NOT
36612: IFFALSE 36701
// begin PrepareHuman ( false , i , skill ) ;
36614: LD_INT 0
36616: PPUSH
36617: LD_VAR 0 8
36621: PPUSH
36622: LD_VAR 0 4
36626: PPUSH
36627: CALL_OW 380
// un := CreateHuman ;
36631: LD_ADDR_VAR 0 14
36635: PUSH
36636: CALL_OW 44
36640: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36641: LD_ADDR_VAR 0 7
36645: PUSH
36646: LD_VAR 0 7
36650: PPUSH
36651: LD_INT 1
36653: PPUSH
36654: LD_VAR 0 14
36658: PPUSH
36659: CALL_OW 2
36663: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36664: LD_VAR 0 14
36668: PPUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 250
36678: PPUSH
36679: LD_VAR 0 1
36683: PPUSH
36684: CALL_OW 251
36688: PPUSH
36689: LD_INT 10
36691: PPUSH
36692: LD_INT 0
36694: PPUSH
36695: CALL_OW 50
// continue ;
36699: GO 36600
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36701: LD_VAR 0 12
36705: PUSH
36706: LD_INT 1
36708: ARRAY
36709: PPUSH
36710: CALL_OW 313
36714: PUSH
36715: LD_VAR 0 12
36719: PUSH
36720: LD_INT 1
36722: ARRAY
36723: PPUSH
36724: CALL_OW 266
36728: PUSH
36729: LD_INT 32
36731: PUSH
36732: LD_INT 31
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: IN
36739: AND
36740: PUSH
36741: LD_VAR 0 12
36745: PUSH
36746: LD_INT 1
36748: ARRAY
36749: PPUSH
36750: CALL_OW 313
36754: PUSH
36755: LD_INT 6
36757: EQUAL
36758: OR
36759: IFFALSE 36779
// f := Delete ( f , 1 ) ;
36761: LD_ADDR_VAR 0 12
36765: PUSH
36766: LD_VAR 0 12
36770: PPUSH
36771: LD_INT 1
36773: PPUSH
36774: CALL_OW 3
36778: ST_TO_ADDR
// if not f then
36779: LD_VAR 0 12
36783: NOT
36784: IFFALSE 36802
// begin x := x + 2 ;
36786: LD_ADDR_VAR 0 13
36790: PUSH
36791: LD_VAR 0 13
36795: PUSH
36796: LD_INT 2
36798: PLUS
36799: ST_TO_ADDR
// continue ;
36800: GO 36600
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36802: LD_VAR 0 12
36806: PUSH
36807: LD_INT 1
36809: ARRAY
36810: PPUSH
36811: CALL_OW 266
36815: PUSH
36816: LD_INT 5
36818: EQUAL
36819: IFFALSE 36893
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36821: LD_VAR 0 12
36825: PUSH
36826: LD_INT 1
36828: ARRAY
36829: PPUSH
36830: CALL_OW 313
36834: PUSH
36835: LD_INT 3
36837: LESS
36838: IFFALSE 36874
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36840: LD_INT 0
36842: PPUSH
36843: LD_INT 5
36845: PUSH
36846: LD_INT 8
36848: PUSH
36849: LD_INT 9
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: LIST
36856: PUSH
36857: LD_VAR 0 17
36861: ARRAY
36862: PPUSH
36863: LD_VAR 0 4
36867: PPUSH
36868: CALL_OW 380
36872: GO 36891
// PrepareHuman ( false , i , skill ) ;
36874: LD_INT 0
36876: PPUSH
36877: LD_VAR 0 8
36881: PPUSH
36882: LD_VAR 0 4
36886: PPUSH
36887: CALL_OW 380
// end else
36891: GO 36910
// PrepareHuman ( false , i , skill ) ;
36893: LD_INT 0
36895: PPUSH
36896: LD_VAR 0 8
36900: PPUSH
36901: LD_VAR 0 4
36905: PPUSH
36906: CALL_OW 380
// un := CreateHuman ;
36910: LD_ADDR_VAR 0 14
36914: PUSH
36915: CALL_OW 44
36919: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36920: LD_ADDR_VAR 0 7
36924: PUSH
36925: LD_VAR 0 7
36929: PPUSH
36930: LD_INT 1
36932: PPUSH
36933: LD_VAR 0 14
36937: PPUSH
36938: CALL_OW 2
36942: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36943: LD_VAR 0 14
36947: PPUSH
36948: LD_VAR 0 12
36952: PUSH
36953: LD_INT 1
36955: ARRAY
36956: PPUSH
36957: CALL_OW 52
// end ;
36961: GO 36600
36963: POP
36964: POP
// end ;
36965: GO 35902
36967: POP
36968: POP
// result := result ^ buildings ;
36969: LD_ADDR_VAR 0 7
36973: PUSH
36974: LD_VAR 0 7
36978: PUSH
36979: LD_VAR 0 18
36983: ADD
36984: ST_TO_ADDR
// end else
36985: GO 37128
// begin for i = 1 to personel do
36987: LD_ADDR_VAR 0 8
36991: PUSH
36992: DOUBLE
36993: LD_INT 1
36995: DEC
36996: ST_TO_ADDR
36997: LD_VAR 0 6
37001: PUSH
37002: FOR_TO
37003: IFFALSE 37126
// begin if i > 4 then
37005: LD_VAR 0 8
37009: PUSH
37010: LD_INT 4
37012: GREATER
37013: IFFALSE 37017
// break ;
37015: GO 37126
// x := personel [ i ] ;
37017: LD_ADDR_VAR 0 13
37021: PUSH
37022: LD_VAR 0 6
37026: PUSH
37027: LD_VAR 0 8
37031: ARRAY
37032: ST_TO_ADDR
// if x = - 1 then
37033: LD_VAR 0 13
37037: PUSH
37038: LD_INT 1
37040: NEG
37041: EQUAL
37042: IFFALSE 37046
// continue ;
37044: GO 37002
// PrepareHuman ( false , i , skill ) ;
37046: LD_INT 0
37048: PPUSH
37049: LD_VAR 0 8
37053: PPUSH
37054: LD_VAR 0 4
37058: PPUSH
37059: CALL_OW 380
// un := CreateHuman ;
37063: LD_ADDR_VAR 0 14
37067: PUSH
37068: CALL_OW 44
37072: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37073: LD_VAR 0 14
37077: PPUSH
37078: LD_VAR 0 1
37082: PPUSH
37083: CALL_OW 250
37087: PPUSH
37088: LD_VAR 0 1
37092: PPUSH
37093: CALL_OW 251
37097: PPUSH
37098: LD_INT 10
37100: PPUSH
37101: LD_INT 0
37103: PPUSH
37104: CALL_OW 50
// result := result ^ un ;
37108: LD_ADDR_VAR 0 7
37112: PUSH
37113: LD_VAR 0 7
37117: PUSH
37118: LD_VAR 0 14
37122: ADD
37123: ST_TO_ADDR
// end ;
37124: GO 37002
37126: POP
37127: POP
// end ; end ;
37128: LD_VAR 0 7
37132: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37133: LD_INT 0
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
37139: PPUSH
37140: PPUSH
37141: PPUSH
37142: PPUSH
37143: PPUSH
37144: PPUSH
37145: PPUSH
37146: PPUSH
37147: PPUSH
37148: PPUSH
37149: PPUSH
37150: PPUSH
// result := false ;
37151: LD_ADDR_VAR 0 3
37155: PUSH
37156: LD_INT 0
37158: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37159: LD_VAR 0 1
37163: NOT
37164: PUSH
37165: LD_VAR 0 1
37169: PPUSH
37170: CALL_OW 266
37174: PUSH
37175: LD_INT 32
37177: PUSH
37178: LD_INT 33
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: IN
37185: NOT
37186: OR
37187: IFFALSE 37191
// exit ;
37189: GO 38300
// nat := GetNation ( tower ) ;
37191: LD_ADDR_VAR 0 12
37195: PUSH
37196: LD_VAR 0 1
37200: PPUSH
37201: CALL_OW 248
37205: ST_TO_ADDR
// side := GetSide ( tower ) ;
37206: LD_ADDR_VAR 0 16
37210: PUSH
37211: LD_VAR 0 1
37215: PPUSH
37216: CALL_OW 255
37220: ST_TO_ADDR
// x := GetX ( tower ) ;
37221: LD_ADDR_VAR 0 10
37225: PUSH
37226: LD_VAR 0 1
37230: PPUSH
37231: CALL_OW 250
37235: ST_TO_ADDR
// y := GetY ( tower ) ;
37236: LD_ADDR_VAR 0 11
37240: PUSH
37241: LD_VAR 0 1
37245: PPUSH
37246: CALL_OW 251
37250: ST_TO_ADDR
// if not x or not y then
37251: LD_VAR 0 10
37255: NOT
37256: PUSH
37257: LD_VAR 0 11
37261: NOT
37262: OR
37263: IFFALSE 37267
// exit ;
37265: GO 38300
// weapon := 0 ;
37267: LD_ADDR_VAR 0 18
37271: PUSH
37272: LD_INT 0
37274: ST_TO_ADDR
// fac_list := [ ] ;
37275: LD_ADDR_VAR 0 17
37279: PUSH
37280: EMPTY
37281: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37282: LD_ADDR_VAR 0 6
37286: PUSH
37287: LD_VAR 0 1
37291: PPUSH
37292: CALL_OW 274
37296: PPUSH
37297: LD_VAR 0 2
37301: PPUSH
37302: LD_INT 0
37304: PPUSH
37305: CALL 34871 0 3
37309: PPUSH
37310: LD_INT 30
37312: PUSH
37313: LD_INT 3
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PPUSH
37320: CALL_OW 72
37324: ST_TO_ADDR
// if not factories then
37325: LD_VAR 0 6
37329: NOT
37330: IFFALSE 37334
// exit ;
37332: GO 38300
// for i in factories do
37334: LD_ADDR_VAR 0 8
37338: PUSH
37339: LD_VAR 0 6
37343: PUSH
37344: FOR_IN
37345: IFFALSE 37370
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37347: LD_ADDR_VAR 0 17
37351: PUSH
37352: LD_VAR 0 17
37356: PUSH
37357: LD_VAR 0 8
37361: PPUSH
37362: CALL_OW 478
37366: UNION
37367: ST_TO_ADDR
37368: GO 37344
37370: POP
37371: POP
// if not fac_list then
37372: LD_VAR 0 17
37376: NOT
37377: IFFALSE 37381
// exit ;
37379: GO 38300
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37381: LD_ADDR_VAR 0 5
37385: PUSH
37386: LD_INT 4
37388: PUSH
37389: LD_INT 5
37391: PUSH
37392: LD_INT 9
37394: PUSH
37395: LD_INT 10
37397: PUSH
37398: LD_INT 6
37400: PUSH
37401: LD_INT 7
37403: PUSH
37404: LD_INT 11
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 27
37418: PUSH
37419: LD_INT 28
37421: PUSH
37422: LD_INT 26
37424: PUSH
37425: LD_INT 30
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 43
37436: PUSH
37437: LD_INT 44
37439: PUSH
37440: LD_INT 46
37442: PUSH
37443: LD_INT 45
37445: PUSH
37446: LD_INT 47
37448: PUSH
37449: LD_INT 49
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: PUSH
37465: LD_VAR 0 12
37469: ARRAY
37470: ST_TO_ADDR
// list := list isect fac_list ;
37471: LD_ADDR_VAR 0 5
37475: PUSH
37476: LD_VAR 0 5
37480: PUSH
37481: LD_VAR 0 17
37485: ISECT
37486: ST_TO_ADDR
// if not list then
37487: LD_VAR 0 5
37491: NOT
37492: IFFALSE 37496
// exit ;
37494: GO 38300
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37496: LD_VAR 0 12
37500: PUSH
37501: LD_INT 3
37503: EQUAL
37504: PUSH
37505: LD_INT 49
37507: PUSH
37508: LD_VAR 0 5
37512: IN
37513: AND
37514: PUSH
37515: LD_INT 31
37517: PPUSH
37518: LD_VAR 0 16
37522: PPUSH
37523: CALL_OW 321
37527: PUSH
37528: LD_INT 2
37530: EQUAL
37531: AND
37532: IFFALSE 37592
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37534: LD_INT 22
37536: PUSH
37537: LD_VAR 0 16
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 35
37548: PUSH
37549: LD_INT 49
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 91
37558: PUSH
37559: LD_VAR 0 1
37563: PUSH
37564: LD_INT 10
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: LIST
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: PPUSH
37577: CALL_OW 69
37581: NOT
37582: IFFALSE 37592
// weapon := ru_time_lapser ;
37584: LD_ADDR_VAR 0 18
37588: PUSH
37589: LD_INT 49
37591: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37592: LD_VAR 0 12
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: LD_INT 2
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: IN
37607: PUSH
37608: LD_INT 11
37610: PUSH
37611: LD_VAR 0 5
37615: IN
37616: PUSH
37617: LD_INT 30
37619: PUSH
37620: LD_VAR 0 5
37624: IN
37625: OR
37626: AND
37627: PUSH
37628: LD_INT 6
37630: PPUSH
37631: LD_VAR 0 16
37635: PPUSH
37636: CALL_OW 321
37640: PUSH
37641: LD_INT 2
37643: EQUAL
37644: AND
37645: IFFALSE 37810
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37647: LD_INT 22
37649: PUSH
37650: LD_VAR 0 16
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 2
37661: PUSH
37662: LD_INT 35
37664: PUSH
37665: LD_INT 11
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 35
37674: PUSH
37675: LD_INT 30
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 91
37689: PUSH
37690: LD_VAR 0 1
37694: PUSH
37695: LD_INT 18
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: LIST
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: PPUSH
37708: CALL_OW 69
37712: NOT
37713: PUSH
37714: LD_INT 22
37716: PUSH
37717: LD_VAR 0 16
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: LD_INT 30
37731: PUSH
37732: LD_INT 32
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 30
37741: PUSH
37742: LD_INT 33
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 91
37756: PUSH
37757: LD_VAR 0 1
37761: PUSH
37762: LD_INT 12
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: LIST
37774: PUSH
37775: EMPTY
37776: LIST
37777: PPUSH
37778: CALL_OW 69
37782: PUSH
37783: LD_INT 2
37785: GREATER
37786: AND
37787: IFFALSE 37810
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37789: LD_ADDR_VAR 0 18
37793: PUSH
37794: LD_INT 11
37796: PUSH
37797: LD_INT 30
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_VAR 0 12
37808: ARRAY
37809: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37810: LD_VAR 0 18
37814: NOT
37815: PUSH
37816: LD_INT 40
37818: PPUSH
37819: LD_VAR 0 16
37823: PPUSH
37824: CALL_OW 321
37828: PUSH
37829: LD_INT 2
37831: EQUAL
37832: AND
37833: PUSH
37834: LD_INT 7
37836: PUSH
37837: LD_VAR 0 5
37841: IN
37842: PUSH
37843: LD_INT 28
37845: PUSH
37846: LD_VAR 0 5
37850: IN
37851: OR
37852: PUSH
37853: LD_INT 45
37855: PUSH
37856: LD_VAR 0 5
37860: IN
37861: OR
37862: AND
37863: IFFALSE 38117
// begin hex := GetHexInfo ( x , y ) ;
37865: LD_ADDR_VAR 0 4
37869: PUSH
37870: LD_VAR 0 10
37874: PPUSH
37875: LD_VAR 0 11
37879: PPUSH
37880: CALL_OW 546
37884: ST_TO_ADDR
// if hex [ 1 ] then
37885: LD_VAR 0 4
37889: PUSH
37890: LD_INT 1
37892: ARRAY
37893: IFFALSE 37897
// exit ;
37895: GO 38300
// height := hex [ 2 ] ;
37897: LD_ADDR_VAR 0 15
37901: PUSH
37902: LD_VAR 0 4
37906: PUSH
37907: LD_INT 2
37909: ARRAY
37910: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37911: LD_ADDR_VAR 0 14
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: LD_INT 2
37921: PUSH
37922: LD_INT 3
37924: PUSH
37925: LD_INT 5
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: ST_TO_ADDR
// for i in tmp do
37934: LD_ADDR_VAR 0 8
37938: PUSH
37939: LD_VAR 0 14
37943: PUSH
37944: FOR_IN
37945: IFFALSE 38115
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37947: LD_ADDR_VAR 0 9
37951: PUSH
37952: LD_VAR 0 10
37956: PPUSH
37957: LD_VAR 0 8
37961: PPUSH
37962: LD_INT 5
37964: PPUSH
37965: CALL_OW 272
37969: PUSH
37970: LD_VAR 0 11
37974: PPUSH
37975: LD_VAR 0 8
37979: PPUSH
37980: LD_INT 5
37982: PPUSH
37983: CALL_OW 273
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37992: LD_VAR 0 9
37996: PUSH
37997: LD_INT 1
37999: ARRAY
38000: PPUSH
38001: LD_VAR 0 9
38005: PUSH
38006: LD_INT 2
38008: ARRAY
38009: PPUSH
38010: CALL_OW 488
38014: IFFALSE 38113
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38016: LD_ADDR_VAR 0 4
38020: PUSH
38021: LD_VAR 0 9
38025: PUSH
38026: LD_INT 1
38028: ARRAY
38029: PPUSH
38030: LD_VAR 0 9
38034: PUSH
38035: LD_INT 2
38037: ARRAY
38038: PPUSH
38039: CALL_OW 546
38043: ST_TO_ADDR
// if hex [ 1 ] then
38044: LD_VAR 0 4
38048: PUSH
38049: LD_INT 1
38051: ARRAY
38052: IFFALSE 38056
// continue ;
38054: GO 37944
// h := hex [ 2 ] ;
38056: LD_ADDR_VAR 0 13
38060: PUSH
38061: LD_VAR 0 4
38065: PUSH
38066: LD_INT 2
38068: ARRAY
38069: ST_TO_ADDR
// if h + 7 < height then
38070: LD_VAR 0 13
38074: PUSH
38075: LD_INT 7
38077: PLUS
38078: PUSH
38079: LD_VAR 0 15
38083: LESS
38084: IFFALSE 38113
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38086: LD_ADDR_VAR 0 18
38090: PUSH
38091: LD_INT 7
38093: PUSH
38094: LD_INT 28
38096: PUSH
38097: LD_INT 45
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: PUSH
38105: LD_VAR 0 12
38109: ARRAY
38110: ST_TO_ADDR
// break ;
38111: GO 38115
// end ; end ; end ;
38113: GO 37944
38115: POP
38116: POP
// end ; if not weapon then
38117: LD_VAR 0 18
38121: NOT
38122: IFFALSE 38182
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38124: LD_ADDR_VAR 0 5
38128: PUSH
38129: LD_VAR 0 5
38133: PUSH
38134: LD_INT 11
38136: PUSH
38137: LD_INT 30
38139: PUSH
38140: LD_INT 49
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: DIFF
38148: ST_TO_ADDR
// if not list then
38149: LD_VAR 0 5
38153: NOT
38154: IFFALSE 38158
// exit ;
38156: GO 38300
// weapon := list [ rand ( 1 , list ) ] ;
38158: LD_ADDR_VAR 0 18
38162: PUSH
38163: LD_VAR 0 5
38167: PUSH
38168: LD_INT 1
38170: PPUSH
38171: LD_VAR 0 5
38175: PPUSH
38176: CALL_OW 12
38180: ARRAY
38181: ST_TO_ADDR
// end ; if weapon then
38182: LD_VAR 0 18
38186: IFFALSE 38300
// begin tmp := CostOfWeapon ( weapon ) ;
38188: LD_ADDR_VAR 0 14
38192: PUSH
38193: LD_VAR 0 18
38197: PPUSH
38198: CALL_OW 451
38202: ST_TO_ADDR
// j := GetBase ( tower ) ;
38203: LD_ADDR_VAR 0 9
38207: PUSH
38208: LD_VAR 0 1
38212: PPUSH
38213: CALL_OW 274
38217: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38218: LD_VAR 0 9
38222: PPUSH
38223: LD_INT 1
38225: PPUSH
38226: CALL_OW 275
38230: PUSH
38231: LD_VAR 0 14
38235: PUSH
38236: LD_INT 1
38238: ARRAY
38239: GREATEREQUAL
38240: PUSH
38241: LD_VAR 0 9
38245: PPUSH
38246: LD_INT 2
38248: PPUSH
38249: CALL_OW 275
38253: PUSH
38254: LD_VAR 0 14
38258: PUSH
38259: LD_INT 2
38261: ARRAY
38262: GREATEREQUAL
38263: AND
38264: PUSH
38265: LD_VAR 0 9
38269: PPUSH
38270: LD_INT 3
38272: PPUSH
38273: CALL_OW 275
38277: PUSH
38278: LD_VAR 0 14
38282: PUSH
38283: LD_INT 3
38285: ARRAY
38286: GREATEREQUAL
38287: AND
38288: IFFALSE 38300
// result := weapon ;
38290: LD_ADDR_VAR 0 3
38294: PUSH
38295: LD_VAR 0 18
38299: ST_TO_ADDR
// end ; end ;
38300: LD_VAR 0 3
38304: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38305: LD_INT 0
38307: PPUSH
38308: PPUSH
// result := true ;
38309: LD_ADDR_VAR 0 3
38313: PUSH
38314: LD_INT 1
38316: ST_TO_ADDR
// if array1 = array2 then
38317: LD_VAR 0 1
38321: PUSH
38322: LD_VAR 0 2
38326: EQUAL
38327: IFFALSE 38387
// begin for i = 1 to array1 do
38329: LD_ADDR_VAR 0 4
38333: PUSH
38334: DOUBLE
38335: LD_INT 1
38337: DEC
38338: ST_TO_ADDR
38339: LD_VAR 0 1
38343: PUSH
38344: FOR_TO
38345: IFFALSE 38383
// if array1 [ i ] <> array2 [ i ] then
38347: LD_VAR 0 1
38351: PUSH
38352: LD_VAR 0 4
38356: ARRAY
38357: PUSH
38358: LD_VAR 0 2
38362: PUSH
38363: LD_VAR 0 4
38367: ARRAY
38368: NONEQUAL
38369: IFFALSE 38381
// begin result := false ;
38371: LD_ADDR_VAR 0 3
38375: PUSH
38376: LD_INT 0
38378: ST_TO_ADDR
// break ;
38379: GO 38383
// end ;
38381: GO 38344
38383: POP
38384: POP
// end else
38385: GO 38395
// result := false ;
38387: LD_ADDR_VAR 0 3
38391: PUSH
38392: LD_INT 0
38394: ST_TO_ADDR
// end ;
38395: LD_VAR 0 3
38399: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38400: LD_INT 0
38402: PPUSH
38403: PPUSH
// if not array1 or not array2 then
38404: LD_VAR 0 1
38408: NOT
38409: PUSH
38410: LD_VAR 0 2
38414: NOT
38415: OR
38416: IFFALSE 38420
// exit ;
38418: GO 38484
// result := true ;
38420: LD_ADDR_VAR 0 3
38424: PUSH
38425: LD_INT 1
38427: ST_TO_ADDR
// for i = 1 to array1 do
38428: LD_ADDR_VAR 0 4
38432: PUSH
38433: DOUBLE
38434: LD_INT 1
38436: DEC
38437: ST_TO_ADDR
38438: LD_VAR 0 1
38442: PUSH
38443: FOR_TO
38444: IFFALSE 38482
// if array1 [ i ] <> array2 [ i ] then
38446: LD_VAR 0 1
38450: PUSH
38451: LD_VAR 0 4
38455: ARRAY
38456: PUSH
38457: LD_VAR 0 2
38461: PUSH
38462: LD_VAR 0 4
38466: ARRAY
38467: NONEQUAL
38468: IFFALSE 38480
// begin result := false ;
38470: LD_ADDR_VAR 0 3
38474: PUSH
38475: LD_INT 0
38477: ST_TO_ADDR
// break ;
38478: GO 38482
// end ;
38480: GO 38443
38482: POP
38483: POP
// end ;
38484: LD_VAR 0 3
38488: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38489: LD_INT 0
38491: PPUSH
38492: PPUSH
38493: PPUSH
// pom := GetBase ( fac ) ;
38494: LD_ADDR_VAR 0 5
38498: PUSH
38499: LD_VAR 0 1
38503: PPUSH
38504: CALL_OW 274
38508: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38509: LD_ADDR_VAR 0 4
38513: PUSH
38514: LD_VAR 0 2
38518: PUSH
38519: LD_INT 1
38521: ARRAY
38522: PPUSH
38523: LD_VAR 0 2
38527: PUSH
38528: LD_INT 2
38530: ARRAY
38531: PPUSH
38532: LD_VAR 0 2
38536: PUSH
38537: LD_INT 3
38539: ARRAY
38540: PPUSH
38541: LD_VAR 0 2
38545: PUSH
38546: LD_INT 4
38548: ARRAY
38549: PPUSH
38550: CALL_OW 449
38554: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38555: LD_ADDR_VAR 0 3
38559: PUSH
38560: LD_VAR 0 5
38564: PPUSH
38565: LD_INT 1
38567: PPUSH
38568: CALL_OW 275
38572: PUSH
38573: LD_VAR 0 4
38577: PUSH
38578: LD_INT 1
38580: ARRAY
38581: GREATEREQUAL
38582: PUSH
38583: LD_VAR 0 5
38587: PPUSH
38588: LD_INT 2
38590: PPUSH
38591: CALL_OW 275
38595: PUSH
38596: LD_VAR 0 4
38600: PUSH
38601: LD_INT 2
38603: ARRAY
38604: GREATEREQUAL
38605: AND
38606: PUSH
38607: LD_VAR 0 5
38611: PPUSH
38612: LD_INT 3
38614: PPUSH
38615: CALL_OW 275
38619: PUSH
38620: LD_VAR 0 4
38624: PUSH
38625: LD_INT 3
38627: ARRAY
38628: GREATEREQUAL
38629: AND
38630: ST_TO_ADDR
// end ;
38631: LD_VAR 0 3
38635: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38636: LD_INT 0
38638: PPUSH
38639: PPUSH
38640: PPUSH
38641: PPUSH
// pom := GetBase ( building ) ;
38642: LD_ADDR_VAR 0 3
38646: PUSH
38647: LD_VAR 0 1
38651: PPUSH
38652: CALL_OW 274
38656: ST_TO_ADDR
// if not pom then
38657: LD_VAR 0 3
38661: NOT
38662: IFFALSE 38666
// exit ;
38664: GO 38836
// btype := GetBType ( building ) ;
38666: LD_ADDR_VAR 0 5
38670: PUSH
38671: LD_VAR 0 1
38675: PPUSH
38676: CALL_OW 266
38680: ST_TO_ADDR
// if btype = b_armoury then
38681: LD_VAR 0 5
38685: PUSH
38686: LD_INT 4
38688: EQUAL
38689: IFFALSE 38699
// btype := b_barracks ;
38691: LD_ADDR_VAR 0 5
38695: PUSH
38696: LD_INT 5
38698: ST_TO_ADDR
// if btype = b_depot then
38699: LD_VAR 0 5
38703: PUSH
38704: LD_INT 0
38706: EQUAL
38707: IFFALSE 38717
// btype := b_warehouse ;
38709: LD_ADDR_VAR 0 5
38713: PUSH
38714: LD_INT 1
38716: ST_TO_ADDR
// if btype = b_workshop then
38717: LD_VAR 0 5
38721: PUSH
38722: LD_INT 2
38724: EQUAL
38725: IFFALSE 38735
// btype := b_factory ;
38727: LD_ADDR_VAR 0 5
38731: PUSH
38732: LD_INT 3
38734: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38735: LD_ADDR_VAR 0 4
38739: PUSH
38740: LD_VAR 0 5
38744: PPUSH
38745: LD_VAR 0 1
38749: PPUSH
38750: CALL_OW 248
38754: PPUSH
38755: CALL_OW 450
38759: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38760: LD_ADDR_VAR 0 2
38764: PUSH
38765: LD_VAR 0 3
38769: PPUSH
38770: LD_INT 1
38772: PPUSH
38773: CALL_OW 275
38777: PUSH
38778: LD_VAR 0 4
38782: PUSH
38783: LD_INT 1
38785: ARRAY
38786: GREATEREQUAL
38787: PUSH
38788: LD_VAR 0 3
38792: PPUSH
38793: LD_INT 2
38795: PPUSH
38796: CALL_OW 275
38800: PUSH
38801: LD_VAR 0 4
38805: PUSH
38806: LD_INT 2
38808: ARRAY
38809: GREATEREQUAL
38810: AND
38811: PUSH
38812: LD_VAR 0 3
38816: PPUSH
38817: LD_INT 3
38819: PPUSH
38820: CALL_OW 275
38824: PUSH
38825: LD_VAR 0 4
38829: PUSH
38830: LD_INT 3
38832: ARRAY
38833: GREATEREQUAL
38834: AND
38835: ST_TO_ADDR
// end ;
38836: LD_VAR 0 2
38840: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38841: LD_INT 0
38843: PPUSH
38844: PPUSH
38845: PPUSH
// pom := GetBase ( building ) ;
38846: LD_ADDR_VAR 0 4
38850: PUSH
38851: LD_VAR 0 1
38855: PPUSH
38856: CALL_OW 274
38860: ST_TO_ADDR
// if not pom then
38861: LD_VAR 0 4
38865: NOT
38866: IFFALSE 38870
// exit ;
38868: GO 38971
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38870: LD_ADDR_VAR 0 5
38874: PUSH
38875: LD_VAR 0 2
38879: PPUSH
38880: LD_VAR 0 1
38884: PPUSH
38885: CALL_OW 248
38889: PPUSH
38890: CALL_OW 450
38894: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38895: LD_ADDR_VAR 0 3
38899: PUSH
38900: LD_VAR 0 4
38904: PPUSH
38905: LD_INT 1
38907: PPUSH
38908: CALL_OW 275
38912: PUSH
38913: LD_VAR 0 5
38917: PUSH
38918: LD_INT 1
38920: ARRAY
38921: GREATEREQUAL
38922: PUSH
38923: LD_VAR 0 4
38927: PPUSH
38928: LD_INT 2
38930: PPUSH
38931: CALL_OW 275
38935: PUSH
38936: LD_VAR 0 5
38940: PUSH
38941: LD_INT 2
38943: ARRAY
38944: GREATEREQUAL
38945: AND
38946: PUSH
38947: LD_VAR 0 4
38951: PPUSH
38952: LD_INT 3
38954: PPUSH
38955: CALL_OW 275
38959: PUSH
38960: LD_VAR 0 5
38964: PUSH
38965: LD_INT 3
38967: ARRAY
38968: GREATEREQUAL
38969: AND
38970: ST_TO_ADDR
// end ;
38971: LD_VAR 0 3
38975: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38976: LD_INT 0
38978: PPUSH
38979: PPUSH
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
// result := false ;
38989: LD_ADDR_VAR 0 8
38993: PUSH
38994: LD_INT 0
38996: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38997: LD_VAR 0 5
39001: NOT
39002: PUSH
39003: LD_VAR 0 1
39007: NOT
39008: OR
39009: PUSH
39010: LD_VAR 0 2
39014: NOT
39015: OR
39016: PUSH
39017: LD_VAR 0 3
39021: NOT
39022: OR
39023: IFFALSE 39027
// exit ;
39025: GO 39841
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39027: LD_ADDR_VAR 0 14
39031: PUSH
39032: LD_VAR 0 1
39036: PPUSH
39037: LD_VAR 0 2
39041: PPUSH
39042: LD_VAR 0 3
39046: PPUSH
39047: LD_VAR 0 4
39051: PPUSH
39052: LD_VAR 0 5
39056: PUSH
39057: LD_INT 1
39059: ARRAY
39060: PPUSH
39061: CALL_OW 248
39065: PPUSH
39066: LD_INT 0
39068: PPUSH
39069: CALL 41074 0 6
39073: ST_TO_ADDR
// if not hexes then
39074: LD_VAR 0 14
39078: NOT
39079: IFFALSE 39083
// exit ;
39081: GO 39841
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39083: LD_ADDR_VAR 0 17
39087: PUSH
39088: LD_VAR 0 5
39092: PPUSH
39093: LD_INT 22
39095: PUSH
39096: LD_VAR 0 13
39100: PPUSH
39101: CALL_OW 255
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: LD_INT 30
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 30
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PPUSH
39142: CALL_OW 72
39146: ST_TO_ADDR
// for i = 1 to hexes do
39147: LD_ADDR_VAR 0 9
39151: PUSH
39152: DOUBLE
39153: LD_INT 1
39155: DEC
39156: ST_TO_ADDR
39157: LD_VAR 0 14
39161: PUSH
39162: FOR_TO
39163: IFFALSE 39839
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39165: LD_ADDR_VAR 0 13
39169: PUSH
39170: LD_VAR 0 14
39174: PUSH
39175: LD_VAR 0 9
39179: ARRAY
39180: PUSH
39181: LD_INT 1
39183: ARRAY
39184: PPUSH
39185: LD_VAR 0 14
39189: PUSH
39190: LD_VAR 0 9
39194: ARRAY
39195: PUSH
39196: LD_INT 2
39198: ARRAY
39199: PPUSH
39200: CALL_OW 428
39204: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39205: LD_VAR 0 14
39209: PUSH
39210: LD_VAR 0 9
39214: ARRAY
39215: PUSH
39216: LD_INT 1
39218: ARRAY
39219: PPUSH
39220: LD_VAR 0 14
39224: PUSH
39225: LD_VAR 0 9
39229: ARRAY
39230: PUSH
39231: LD_INT 2
39233: ARRAY
39234: PPUSH
39235: CALL_OW 351
39239: PUSH
39240: LD_VAR 0 14
39244: PUSH
39245: LD_VAR 0 9
39249: ARRAY
39250: PUSH
39251: LD_INT 1
39253: ARRAY
39254: PPUSH
39255: LD_VAR 0 14
39259: PUSH
39260: LD_VAR 0 9
39264: ARRAY
39265: PUSH
39266: LD_INT 2
39268: ARRAY
39269: PPUSH
39270: CALL_OW 488
39274: NOT
39275: OR
39276: PUSH
39277: LD_VAR 0 13
39281: PPUSH
39282: CALL_OW 247
39286: PUSH
39287: LD_INT 3
39289: EQUAL
39290: OR
39291: IFFALSE 39297
// exit ;
39293: POP
39294: POP
39295: GO 39841
// if not tmp then
39297: LD_VAR 0 13
39301: NOT
39302: IFFALSE 39306
// continue ;
39304: GO 39162
// result := true ;
39306: LD_ADDR_VAR 0 8
39310: PUSH
39311: LD_INT 1
39313: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39314: LD_VAR 0 6
39318: PUSH
39319: LD_VAR 0 13
39323: PPUSH
39324: CALL_OW 247
39328: PUSH
39329: LD_INT 2
39331: EQUAL
39332: AND
39333: PUSH
39334: LD_VAR 0 13
39338: PPUSH
39339: CALL_OW 263
39343: PUSH
39344: LD_INT 1
39346: EQUAL
39347: AND
39348: IFFALSE 39512
// begin if IsDrivenBy ( tmp ) then
39350: LD_VAR 0 13
39354: PPUSH
39355: CALL_OW 311
39359: IFFALSE 39363
// continue ;
39361: GO 39162
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39363: LD_VAR 0 6
39367: PPUSH
39368: LD_INT 3
39370: PUSH
39371: LD_INT 60
39373: PUSH
39374: EMPTY
39375: LIST
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 3
39383: PUSH
39384: LD_INT 55
39386: PUSH
39387: EMPTY
39388: LIST
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PPUSH
39398: CALL_OW 72
39402: IFFALSE 39510
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39404: LD_ADDR_VAR 0 18
39408: PUSH
39409: LD_VAR 0 6
39413: PPUSH
39414: LD_INT 3
39416: PUSH
39417: LD_INT 60
39419: PUSH
39420: EMPTY
39421: LIST
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: LD_INT 55
39432: PUSH
39433: EMPTY
39434: LIST
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PPUSH
39444: CALL_OW 72
39448: PUSH
39449: LD_INT 1
39451: ARRAY
39452: ST_TO_ADDR
// if IsInUnit ( driver ) then
39453: LD_VAR 0 18
39457: PPUSH
39458: CALL_OW 310
39462: IFFALSE 39473
// ComExit ( driver ) ;
39464: LD_VAR 0 18
39468: PPUSH
39469: CALL 64835 0 1
// AddComEnterUnit ( driver , tmp ) ;
39473: LD_VAR 0 18
39477: PPUSH
39478: LD_VAR 0 13
39482: PPUSH
39483: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39487: LD_VAR 0 18
39491: PPUSH
39492: LD_VAR 0 7
39496: PPUSH
39497: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39501: LD_VAR 0 18
39505: PPUSH
39506: CALL_OW 181
// end ; continue ;
39510: GO 39162
// end ; if not cleaners or not tmp in cleaners then
39512: LD_VAR 0 6
39516: NOT
39517: PUSH
39518: LD_VAR 0 13
39522: PUSH
39523: LD_VAR 0 6
39527: IN
39528: NOT
39529: OR
39530: IFFALSE 39837
// begin if dep then
39532: LD_VAR 0 17
39536: IFFALSE 39672
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39538: LD_ADDR_VAR 0 16
39542: PUSH
39543: LD_VAR 0 17
39547: PUSH
39548: LD_INT 1
39550: ARRAY
39551: PPUSH
39552: CALL_OW 250
39556: PPUSH
39557: LD_VAR 0 17
39561: PUSH
39562: LD_INT 1
39564: ARRAY
39565: PPUSH
39566: CALL_OW 254
39570: PPUSH
39571: LD_INT 5
39573: PPUSH
39574: CALL_OW 272
39578: PUSH
39579: LD_VAR 0 17
39583: PUSH
39584: LD_INT 1
39586: ARRAY
39587: PPUSH
39588: CALL_OW 251
39592: PPUSH
39593: LD_VAR 0 17
39597: PUSH
39598: LD_INT 1
39600: ARRAY
39601: PPUSH
39602: CALL_OW 254
39606: PPUSH
39607: LD_INT 5
39609: PPUSH
39610: CALL_OW 273
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39619: LD_VAR 0 16
39623: PUSH
39624: LD_INT 1
39626: ARRAY
39627: PPUSH
39628: LD_VAR 0 16
39632: PUSH
39633: LD_INT 2
39635: ARRAY
39636: PPUSH
39637: CALL_OW 488
39641: IFFALSE 39672
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39643: LD_VAR 0 13
39647: PPUSH
39648: LD_VAR 0 16
39652: PUSH
39653: LD_INT 1
39655: ARRAY
39656: PPUSH
39657: LD_VAR 0 16
39661: PUSH
39662: LD_INT 2
39664: ARRAY
39665: PPUSH
39666: CALL_OW 111
// continue ;
39670: GO 39162
// end ; end ; r := GetDir ( tmp ) ;
39672: LD_ADDR_VAR 0 15
39676: PUSH
39677: LD_VAR 0 13
39681: PPUSH
39682: CALL_OW 254
39686: ST_TO_ADDR
// if r = 5 then
39687: LD_VAR 0 15
39691: PUSH
39692: LD_INT 5
39694: EQUAL
39695: IFFALSE 39705
// r := 0 ;
39697: LD_ADDR_VAR 0 15
39701: PUSH
39702: LD_INT 0
39704: ST_TO_ADDR
// for j = r to 5 do
39705: LD_ADDR_VAR 0 10
39709: PUSH
39710: DOUBLE
39711: LD_VAR 0 15
39715: DEC
39716: ST_TO_ADDR
39717: LD_INT 5
39719: PUSH
39720: FOR_TO
39721: IFFALSE 39835
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39723: LD_ADDR_VAR 0 11
39727: PUSH
39728: LD_VAR 0 13
39732: PPUSH
39733: CALL_OW 250
39737: PPUSH
39738: LD_VAR 0 10
39742: PPUSH
39743: LD_INT 2
39745: PPUSH
39746: CALL_OW 272
39750: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39751: LD_ADDR_VAR 0 12
39755: PUSH
39756: LD_VAR 0 13
39760: PPUSH
39761: CALL_OW 251
39765: PPUSH
39766: LD_VAR 0 10
39770: PPUSH
39771: LD_INT 2
39773: PPUSH
39774: CALL_OW 273
39778: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39779: LD_VAR 0 11
39783: PPUSH
39784: LD_VAR 0 12
39788: PPUSH
39789: CALL_OW 488
39793: PUSH
39794: LD_VAR 0 11
39798: PPUSH
39799: LD_VAR 0 12
39803: PPUSH
39804: CALL_OW 428
39808: NOT
39809: AND
39810: IFFALSE 39833
// begin ComMoveXY ( tmp , _x , _y ) ;
39812: LD_VAR 0 13
39816: PPUSH
39817: LD_VAR 0 11
39821: PPUSH
39822: LD_VAR 0 12
39826: PPUSH
39827: CALL_OW 111
// break ;
39831: GO 39835
// end ; end ;
39833: GO 39720
39835: POP
39836: POP
// end ; end ;
39837: GO 39162
39839: POP
39840: POP
// end ;
39841: LD_VAR 0 8
39845: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39846: LD_INT 0
39848: PPUSH
// result := true ;
39849: LD_ADDR_VAR 0 3
39853: PUSH
39854: LD_INT 1
39856: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39857: LD_VAR 0 2
39861: PUSH
39862: LD_INT 24
39864: DOUBLE
39865: EQUAL
39866: IFTRUE 39876
39868: LD_INT 33
39870: DOUBLE
39871: EQUAL
39872: IFTRUE 39876
39874: GO 39901
39876: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39877: LD_ADDR_VAR 0 3
39881: PUSH
39882: LD_INT 32
39884: PPUSH
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL_OW 321
39894: PUSH
39895: LD_INT 2
39897: EQUAL
39898: ST_TO_ADDR
39899: GO 40217
39901: LD_INT 20
39903: DOUBLE
39904: EQUAL
39905: IFTRUE 39909
39907: GO 39934
39909: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39910: LD_ADDR_VAR 0 3
39914: PUSH
39915: LD_INT 6
39917: PPUSH
39918: LD_VAR 0 1
39922: PPUSH
39923: CALL_OW 321
39927: PUSH
39928: LD_INT 2
39930: EQUAL
39931: ST_TO_ADDR
39932: GO 40217
39934: LD_INT 22
39936: DOUBLE
39937: EQUAL
39938: IFTRUE 39948
39940: LD_INT 36
39942: DOUBLE
39943: EQUAL
39944: IFTRUE 39948
39946: GO 39973
39948: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39949: LD_ADDR_VAR 0 3
39953: PUSH
39954: LD_INT 15
39956: PPUSH
39957: LD_VAR 0 1
39961: PPUSH
39962: CALL_OW 321
39966: PUSH
39967: LD_INT 2
39969: EQUAL
39970: ST_TO_ADDR
39971: GO 40217
39973: LD_INT 30
39975: DOUBLE
39976: EQUAL
39977: IFTRUE 39981
39979: GO 40006
39981: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39982: LD_ADDR_VAR 0 3
39986: PUSH
39987: LD_INT 20
39989: PPUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: CALL_OW 321
39999: PUSH
40000: LD_INT 2
40002: EQUAL
40003: ST_TO_ADDR
40004: GO 40217
40006: LD_INT 28
40008: DOUBLE
40009: EQUAL
40010: IFTRUE 40020
40012: LD_INT 21
40014: DOUBLE
40015: EQUAL
40016: IFTRUE 40020
40018: GO 40045
40020: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40021: LD_ADDR_VAR 0 3
40025: PUSH
40026: LD_INT 21
40028: PPUSH
40029: LD_VAR 0 1
40033: PPUSH
40034: CALL_OW 321
40038: PUSH
40039: LD_INT 2
40041: EQUAL
40042: ST_TO_ADDR
40043: GO 40217
40045: LD_INT 16
40047: DOUBLE
40048: EQUAL
40049: IFTRUE 40053
40051: GO 40078
40053: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40054: LD_ADDR_VAR 0 3
40058: PUSH
40059: LD_INT 84
40061: PPUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL_OW 321
40071: PUSH
40072: LD_INT 2
40074: EQUAL
40075: ST_TO_ADDR
40076: GO 40217
40078: LD_INT 19
40080: DOUBLE
40081: EQUAL
40082: IFTRUE 40092
40084: LD_INT 23
40086: DOUBLE
40087: EQUAL
40088: IFTRUE 40092
40090: GO 40117
40092: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40093: LD_ADDR_VAR 0 3
40097: PUSH
40098: LD_INT 83
40100: PPUSH
40101: LD_VAR 0 1
40105: PPUSH
40106: CALL_OW 321
40110: PUSH
40111: LD_INT 2
40113: EQUAL
40114: ST_TO_ADDR
40115: GO 40217
40117: LD_INT 17
40119: DOUBLE
40120: EQUAL
40121: IFTRUE 40125
40123: GO 40150
40125: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40126: LD_ADDR_VAR 0 3
40130: PUSH
40131: LD_INT 39
40133: PPUSH
40134: LD_VAR 0 1
40138: PPUSH
40139: CALL_OW 321
40143: PUSH
40144: LD_INT 2
40146: EQUAL
40147: ST_TO_ADDR
40148: GO 40217
40150: LD_INT 18
40152: DOUBLE
40153: EQUAL
40154: IFTRUE 40158
40156: GO 40183
40158: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40159: LD_ADDR_VAR 0 3
40163: PUSH
40164: LD_INT 40
40166: PPUSH
40167: LD_VAR 0 1
40171: PPUSH
40172: CALL_OW 321
40176: PUSH
40177: LD_INT 2
40179: EQUAL
40180: ST_TO_ADDR
40181: GO 40217
40183: LD_INT 27
40185: DOUBLE
40186: EQUAL
40187: IFTRUE 40191
40189: GO 40216
40191: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40192: LD_ADDR_VAR 0 3
40196: PUSH
40197: LD_INT 35
40199: PPUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL_OW 321
40209: PUSH
40210: LD_INT 2
40212: EQUAL
40213: ST_TO_ADDR
40214: GO 40217
40216: POP
// end ;
40217: LD_VAR 0 3
40221: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40222: LD_INT 0
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
40228: PPUSH
40229: PPUSH
40230: PPUSH
40231: PPUSH
40232: PPUSH
40233: PPUSH
40234: PPUSH
// result := false ;
40235: LD_ADDR_VAR 0 6
40239: PUSH
40240: LD_INT 0
40242: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40243: LD_VAR 0 1
40247: NOT
40248: PUSH
40249: LD_VAR 0 1
40253: PPUSH
40254: CALL_OW 266
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: IN
40269: NOT
40270: OR
40271: PUSH
40272: LD_VAR 0 2
40276: NOT
40277: OR
40278: PUSH
40279: LD_VAR 0 5
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: LD_INT 3
40295: PUSH
40296: LD_INT 4
40298: PUSH
40299: LD_INT 5
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: IN
40310: NOT
40311: OR
40312: PUSH
40313: LD_VAR 0 3
40317: PPUSH
40318: LD_VAR 0 4
40322: PPUSH
40323: CALL_OW 488
40327: NOT
40328: OR
40329: IFFALSE 40333
// exit ;
40331: GO 41069
// side := GetSide ( depot ) ;
40333: LD_ADDR_VAR 0 9
40337: PUSH
40338: LD_VAR 0 1
40342: PPUSH
40343: CALL_OW 255
40347: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40348: LD_VAR 0 9
40352: PPUSH
40353: LD_VAR 0 2
40357: PPUSH
40358: CALL 39846 0 2
40362: NOT
40363: IFFALSE 40367
// exit ;
40365: GO 41069
// pom := GetBase ( depot ) ;
40367: LD_ADDR_VAR 0 10
40371: PUSH
40372: LD_VAR 0 1
40376: PPUSH
40377: CALL_OW 274
40381: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40382: LD_ADDR_VAR 0 11
40386: PUSH
40387: LD_VAR 0 2
40391: PPUSH
40392: LD_VAR 0 1
40396: PPUSH
40397: CALL_OW 248
40401: PPUSH
40402: CALL_OW 450
40406: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40407: LD_VAR 0 10
40411: PPUSH
40412: LD_INT 1
40414: PPUSH
40415: CALL_OW 275
40419: PUSH
40420: LD_VAR 0 11
40424: PUSH
40425: LD_INT 1
40427: ARRAY
40428: GREATEREQUAL
40429: PUSH
40430: LD_VAR 0 10
40434: PPUSH
40435: LD_INT 2
40437: PPUSH
40438: CALL_OW 275
40442: PUSH
40443: LD_VAR 0 11
40447: PUSH
40448: LD_INT 2
40450: ARRAY
40451: GREATEREQUAL
40452: AND
40453: PUSH
40454: LD_VAR 0 10
40458: PPUSH
40459: LD_INT 3
40461: PPUSH
40462: CALL_OW 275
40466: PUSH
40467: LD_VAR 0 11
40471: PUSH
40472: LD_INT 3
40474: ARRAY
40475: GREATEREQUAL
40476: AND
40477: NOT
40478: IFFALSE 40482
// exit ;
40480: GO 41069
// if GetBType ( depot ) = b_depot then
40482: LD_VAR 0 1
40486: PPUSH
40487: CALL_OW 266
40491: PUSH
40492: LD_INT 0
40494: EQUAL
40495: IFFALSE 40507
// dist := 28 else
40497: LD_ADDR_VAR 0 14
40501: PUSH
40502: LD_INT 28
40504: ST_TO_ADDR
40505: GO 40515
// dist := 36 ;
40507: LD_ADDR_VAR 0 14
40511: PUSH
40512: LD_INT 36
40514: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40515: LD_VAR 0 1
40519: PPUSH
40520: LD_VAR 0 3
40524: PPUSH
40525: LD_VAR 0 4
40529: PPUSH
40530: CALL_OW 297
40534: PUSH
40535: LD_VAR 0 14
40539: GREATER
40540: IFFALSE 40544
// exit ;
40542: GO 41069
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40544: LD_ADDR_VAR 0 12
40548: PUSH
40549: LD_VAR 0 2
40553: PPUSH
40554: LD_VAR 0 3
40558: PPUSH
40559: LD_VAR 0 4
40563: PPUSH
40564: LD_VAR 0 5
40568: PPUSH
40569: LD_VAR 0 1
40573: PPUSH
40574: CALL_OW 248
40578: PPUSH
40579: LD_INT 0
40581: PPUSH
40582: CALL 41074 0 6
40586: ST_TO_ADDR
// if not hexes then
40587: LD_VAR 0 12
40591: NOT
40592: IFFALSE 40596
// exit ;
40594: GO 41069
// hex := GetHexInfo ( x , y ) ;
40596: LD_ADDR_VAR 0 15
40600: PUSH
40601: LD_VAR 0 3
40605: PPUSH
40606: LD_VAR 0 4
40610: PPUSH
40611: CALL_OW 546
40615: ST_TO_ADDR
// if hex [ 1 ] then
40616: LD_VAR 0 15
40620: PUSH
40621: LD_INT 1
40623: ARRAY
40624: IFFALSE 40628
// exit ;
40626: GO 41069
// height := hex [ 2 ] ;
40628: LD_ADDR_VAR 0 13
40632: PUSH
40633: LD_VAR 0 15
40637: PUSH
40638: LD_INT 2
40640: ARRAY
40641: ST_TO_ADDR
// for i = 1 to hexes do
40642: LD_ADDR_VAR 0 7
40646: PUSH
40647: DOUBLE
40648: LD_INT 1
40650: DEC
40651: ST_TO_ADDR
40652: LD_VAR 0 12
40656: PUSH
40657: FOR_TO
40658: IFFALSE 40988
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40660: LD_VAR 0 12
40664: PUSH
40665: LD_VAR 0 7
40669: ARRAY
40670: PUSH
40671: LD_INT 1
40673: ARRAY
40674: PPUSH
40675: LD_VAR 0 12
40679: PUSH
40680: LD_VAR 0 7
40684: ARRAY
40685: PUSH
40686: LD_INT 2
40688: ARRAY
40689: PPUSH
40690: CALL_OW 488
40694: NOT
40695: PUSH
40696: LD_VAR 0 12
40700: PUSH
40701: LD_VAR 0 7
40705: ARRAY
40706: PUSH
40707: LD_INT 1
40709: ARRAY
40710: PPUSH
40711: LD_VAR 0 12
40715: PUSH
40716: LD_VAR 0 7
40720: ARRAY
40721: PUSH
40722: LD_INT 2
40724: ARRAY
40725: PPUSH
40726: CALL_OW 428
40730: PUSH
40731: LD_INT 0
40733: GREATER
40734: OR
40735: PUSH
40736: LD_VAR 0 12
40740: PUSH
40741: LD_VAR 0 7
40745: ARRAY
40746: PUSH
40747: LD_INT 1
40749: ARRAY
40750: PPUSH
40751: LD_VAR 0 12
40755: PUSH
40756: LD_VAR 0 7
40760: ARRAY
40761: PUSH
40762: LD_INT 2
40764: ARRAY
40765: PPUSH
40766: CALL_OW 351
40770: OR
40771: IFFALSE 40777
// exit ;
40773: POP
40774: POP
40775: GO 41069
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40777: LD_ADDR_VAR 0 8
40781: PUSH
40782: LD_VAR 0 12
40786: PUSH
40787: LD_VAR 0 7
40791: ARRAY
40792: PUSH
40793: LD_INT 1
40795: ARRAY
40796: PPUSH
40797: LD_VAR 0 12
40801: PUSH
40802: LD_VAR 0 7
40806: ARRAY
40807: PUSH
40808: LD_INT 2
40810: ARRAY
40811: PPUSH
40812: CALL_OW 546
40816: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40817: LD_VAR 0 8
40821: PUSH
40822: LD_INT 1
40824: ARRAY
40825: PUSH
40826: LD_VAR 0 8
40830: PUSH
40831: LD_INT 2
40833: ARRAY
40834: PUSH
40835: LD_VAR 0 13
40839: PUSH
40840: LD_INT 2
40842: PLUS
40843: GREATER
40844: OR
40845: PUSH
40846: LD_VAR 0 8
40850: PUSH
40851: LD_INT 2
40853: ARRAY
40854: PUSH
40855: LD_VAR 0 13
40859: PUSH
40860: LD_INT 2
40862: MINUS
40863: LESS
40864: OR
40865: PUSH
40866: LD_VAR 0 8
40870: PUSH
40871: LD_INT 3
40873: ARRAY
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 8
40880: PUSH
40881: LD_INT 9
40883: PUSH
40884: LD_INT 10
40886: PUSH
40887: LD_INT 11
40889: PUSH
40890: LD_INT 12
40892: PUSH
40893: LD_INT 13
40895: PUSH
40896: LD_INT 16
40898: PUSH
40899: LD_INT 17
40901: PUSH
40902: LD_INT 18
40904: PUSH
40905: LD_INT 19
40907: PUSH
40908: LD_INT 20
40910: PUSH
40911: LD_INT 21
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: IN
40929: NOT
40930: OR
40931: PUSH
40932: LD_VAR 0 8
40936: PUSH
40937: LD_INT 5
40939: ARRAY
40940: NOT
40941: OR
40942: PUSH
40943: LD_VAR 0 8
40947: PUSH
40948: LD_INT 6
40950: ARRAY
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: LD_INT 7
40960: PUSH
40961: LD_INT 9
40963: PUSH
40964: LD_INT 10
40966: PUSH
40967: LD_INT 11
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: IN
40978: NOT
40979: OR
40980: IFFALSE 40986
// exit ;
40982: POP
40983: POP
40984: GO 41069
// end ;
40986: GO 40657
40988: POP
40989: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40990: LD_VAR 0 9
40994: PPUSH
40995: LD_VAR 0 3
40999: PPUSH
41000: LD_VAR 0 4
41004: PPUSH
41005: LD_INT 20
41007: PPUSH
41008: CALL 33021 0 4
41012: PUSH
41013: LD_INT 4
41015: ARRAY
41016: IFFALSE 41020
// exit ;
41018: GO 41069
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41020: LD_VAR 0 2
41024: PUSH
41025: LD_INT 29
41027: PUSH
41028: LD_INT 30
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: IN
41035: PUSH
41036: LD_VAR 0 3
41040: PPUSH
41041: LD_VAR 0 4
41045: PPUSH
41046: LD_VAR 0 9
41050: PPUSH
41051: CALL_OW 440
41055: NOT
41056: AND
41057: IFFALSE 41061
// exit ;
41059: GO 41069
// result := true ;
41061: LD_ADDR_VAR 0 6
41065: PUSH
41066: LD_INT 1
41068: ST_TO_ADDR
// end ;
41069: LD_VAR 0 6
41073: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41074: LD_INT 0
41076: PPUSH
41077: PPUSH
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
41082: PPUSH
41083: PPUSH
41084: PPUSH
41085: PPUSH
41086: PPUSH
41087: PPUSH
41088: PPUSH
41089: PPUSH
41090: PPUSH
41091: PPUSH
41092: PPUSH
41093: PPUSH
41094: PPUSH
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
41100: PPUSH
41101: PPUSH
41102: PPUSH
41103: PPUSH
41104: PPUSH
41105: PPUSH
41106: PPUSH
41107: PPUSH
41108: PPUSH
41109: PPUSH
41110: PPUSH
41111: PPUSH
41112: PPUSH
41113: PPUSH
41114: PPUSH
41115: PPUSH
41116: PPUSH
41117: PPUSH
41118: PPUSH
41119: PPUSH
41120: PPUSH
41121: PPUSH
41122: PPUSH
41123: PPUSH
41124: PPUSH
41125: PPUSH
41126: PPUSH
41127: PPUSH
41128: PPUSH
41129: PPUSH
41130: PPUSH
41131: PPUSH
41132: PPUSH
41133: PPUSH
// result = [ ] ;
41134: LD_ADDR_VAR 0 7
41138: PUSH
41139: EMPTY
41140: ST_TO_ADDR
// temp_list = [ ] ;
41141: LD_ADDR_VAR 0 9
41145: PUSH
41146: EMPTY
41147: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41148: LD_VAR 0 4
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: LD_INT 3
41164: PUSH
41165: LD_INT 4
41167: PUSH
41168: LD_INT 5
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: IN
41179: NOT
41180: PUSH
41181: LD_VAR 0 1
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: IN
41196: PUSH
41197: LD_VAR 0 5
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 3
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: LIST
41215: IN
41216: NOT
41217: AND
41218: OR
41219: IFFALSE 41223
// exit ;
41221: GO 59614
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41223: LD_VAR 0 1
41227: PUSH
41228: LD_INT 6
41230: PUSH
41231: LD_INT 7
41233: PUSH
41234: LD_INT 8
41236: PUSH
41237: LD_INT 13
41239: PUSH
41240: LD_INT 12
41242: PUSH
41243: LD_INT 15
41245: PUSH
41246: LD_INT 11
41248: PUSH
41249: LD_INT 14
41251: PUSH
41252: LD_INT 10
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: IN
41266: IFFALSE 41276
// btype = b_lab ;
41268: LD_ADDR_VAR 0 1
41272: PUSH
41273: LD_INT 6
41275: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41276: LD_VAR 0 6
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: LD_INT 1
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: LIST
41294: IN
41295: NOT
41296: PUSH
41297: LD_VAR 0 1
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: LD_INT 3
41313: PUSH
41314: LD_INT 6
41316: PUSH
41317: LD_INT 36
41319: PUSH
41320: LD_INT 4
41322: PUSH
41323: LD_INT 5
41325: PUSH
41326: LD_INT 31
41328: PUSH
41329: LD_INT 32
41331: PUSH
41332: LD_INT 33
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: IN
41348: NOT
41349: PUSH
41350: LD_VAR 0 6
41354: PUSH
41355: LD_INT 1
41357: EQUAL
41358: AND
41359: OR
41360: PUSH
41361: LD_VAR 0 1
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: LD_INT 3
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: IN
41376: NOT
41377: PUSH
41378: LD_VAR 0 6
41382: PUSH
41383: LD_INT 2
41385: EQUAL
41386: AND
41387: OR
41388: IFFALSE 41398
// mode = 0 ;
41390: LD_ADDR_VAR 0 6
41394: PUSH
41395: LD_INT 0
41397: ST_TO_ADDR
// case mode of 0 :
41398: LD_VAR 0 6
41402: PUSH
41403: LD_INT 0
41405: DOUBLE
41406: EQUAL
41407: IFTRUE 41411
41409: GO 52864
41411: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41412: LD_ADDR_VAR 0 11
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 2
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: LD_INT 3
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 3
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41605: LD_ADDR_VAR 0 12
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 2
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 2
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 3
41762: NEG
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 3
41773: NEG
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41801: LD_ADDR_VAR 0 13
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 2
41924: NEG
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: LD_INT 2
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 3
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 3
41960: NEG
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 3
41972: NEG
41973: PUSH
41974: LD_INT 3
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42000: LD_ADDR_VAR 0 14
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: LD_INT 2
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 3
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 3
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 2
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42196: LD_ADDR_VAR 0 15
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 2
42319: NEG
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 2
42330: NEG
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 3
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 3
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42389: LD_ADDR_VAR 0 16
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 2
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 3
42536: PUSH
42537: LD_INT 2
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 3
42546: PUSH
42547: LD_INT 3
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: LD_INT 3
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42582: LD_ADDR_VAR 0 17
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: LD_INT 2
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42812: LD_ADDR_VAR 0 18
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 2
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: NEG
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43042: LD_ADDR_VAR 0 19
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: NEG
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: NEG
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43272: LD_ADDR_VAR 0 20
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43502: LD_ADDR_VAR 0 21
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: LD_INT 2
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 2
43689: NEG
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43732: LD_ADDR_VAR 0 22
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 2
43908: NEG
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 2
43919: NEG
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 2
43931: NEG
43932: PUSH
43933: LD_INT 2
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43962: LD_ADDR_VAR 0 23
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 3
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 3
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44242: LD_ADDR_VAR 0 24
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 3
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 3
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44518: LD_ADDR_VAR 0 25
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: LD_INT 2
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: NEG
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: LD_INT 2
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: LD_INT 3
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 3
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44792: LD_ADDR_VAR 0 26
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 2
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: NEG
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 3
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45068: LD_ADDR_VAR 0 27
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 3
45301: NEG
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 3
45313: NEG
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45348: LD_ADDR_VAR 0 28
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: LD_INT 3
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 3
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 3
45583: NEG
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 3
45595: NEG
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45630: LD_ADDR_VAR 0 29
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 2
45796: NEG
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: LD_INT 3
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 3
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 3
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 3
45874: NEG
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45909: LD_ADDR_VAR 0 30
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 3
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: NEG
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46187: LD_ADDR_VAR 0 31
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 3
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 3
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: LD_INT 3
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 3
46430: NEG
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46465: LD_ADDR_VAR 0 32
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 3
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: LD_INT 3
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 3
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46743: LD_ADDR_VAR 0 33
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 3
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 3
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47022: LD_ADDR_VAR 0 34
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 3
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: LD_INT 3
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 3
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47302: LD_ADDR_VAR 0 35
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47414: LD_ADDR_VAR 0 36
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47526: LD_ADDR_VAR 0 37
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47638: LD_ADDR_VAR 0 38
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47750: LD_ADDR_VAR 0 39
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47862: LD_ADDR_VAR 0 40
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47974: LD_ADDR_VAR 0 41
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 3
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 3
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 3
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 3
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 3
48217: PUSH
48218: LD_INT 3
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: LD_INT 3
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 3
48248: NEG
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 3
48259: NEG
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 3
48271: NEG
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 3
48283: NEG
48284: PUSH
48285: LD_INT 3
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48324: LD_ADDR_VAR 0 42
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: LD_INT 2
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: LD_INT 3
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: LD_INT 3
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 3
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: LD_INT 2
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 3
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 3
48570: PUSH
48571: LD_INT 3
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: LD_INT 3
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 3
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: LD_INT 3
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 3
48621: NEG
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: LD_INT 3
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48674: LD_ADDR_VAR 0 43
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 3
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 3
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 3
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 3
48970: NEG
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 3
48981: NEG
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49022: LD_ADDR_VAR 0 44
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 2
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: NEG
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: LD_INT 3
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 3
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 3
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 3
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 3
49265: PUSH
49266: LD_INT 3
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: LD_INT 3
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 3
49296: NEG
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 3
49307: NEG
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 3
49319: NEG
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 3
49331: NEG
49332: PUSH
49333: LD_INT 3
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49372: LD_ADDR_VAR 0 45
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: LD_INT 2
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 3
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 3
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 3
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 3
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: LD_INT 3
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: LD_INT 3
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 3
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 3
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 3
49669: NEG
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49722: LD_ADDR_VAR 0 46
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 2
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 2
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 3
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 3
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 3
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 3
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 3
50018: NEG
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 3
50029: NEG
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50070: LD_ADDR_VAR 0 47
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50221: LD_ADDR_VAR 0 48
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50368: LD_ADDR_VAR 0 49
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50512: LD_ADDR_VAR 0 50
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50656: LD_ADDR_VAR 0 51
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50803: LD_ADDR_VAR 0 52
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 2
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50954: LD_ADDR_VAR 0 53
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51184: LD_ADDR_VAR 0 54
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51414: LD_ADDR_VAR 0 55
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: NEG
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51644: LD_ADDR_VAR 0 56
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: NEG
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51874: LD_ADDR_VAR 0 57
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52104: LD_ADDR_VAR 0 58
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: NEG
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: NEG
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52334: LD_ADDR_VAR 0 59
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52422: LD_ADDR_VAR 0 60
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52510: LD_ADDR_VAR 0 61
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52598: LD_ADDR_VAR 0 62
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52686: LD_ADDR_VAR 0 63
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52774: LD_ADDR_VAR 0 64
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: ST_TO_ADDR
// end ; 1 :
52862: GO 58759
52864: LD_INT 1
52866: DOUBLE
52867: EQUAL
52868: IFTRUE 52872
52870: GO 55495
52872: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52873: LD_ADDR_VAR 0 11
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 3
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: LIST
52916: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52917: LD_ADDR_VAR 0 12
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52958: LD_ADDR_VAR 0 13
52962: PUSH
52963: LD_INT 3
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 3
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: LIST
52997: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52998: LD_ADDR_VAR 0 14
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 3
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: LIST
53038: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53039: LD_ADDR_VAR 0 15
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 3
53057: NEG
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: LIST
53082: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53083: LD_ADDR_VAR 0 16
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: LD_INT 3
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: NEG
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: NEG
53115: PUSH
53116: LD_INT 3
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53129: LD_ADDR_VAR 0 17
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: LD_INT 3
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 3
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53173: LD_ADDR_VAR 0 18
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53214: LD_ADDR_VAR 0 19
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 3
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: LD_INT 3
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53254: LD_ADDR_VAR 0 20
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 3
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53295: LD_ADDR_VAR 0 21
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: NEG
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 3
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: LIST
53338: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53339: LD_ADDR_VAR 0 22
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: LD_INT 3
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 3
53358: NEG
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 3
53370: NEG
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53385: LD_ADDR_VAR 0 23
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: LD_INT 4
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53429: LD_ADDR_VAR 0 24
53433: PUSH
53434: LD_INT 3
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 3
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 4
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: LIST
53469: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53470: LD_ADDR_VAR 0 25
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: LD_INT 3
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 4
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: PUSH
53498: LD_INT 4
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53510: LD_ADDR_VAR 0 26
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 4
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: LD_INT 3
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53551: LD_ADDR_VAR 0 27
53555: PUSH
53556: LD_INT 3
53558: NEG
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 3
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 4
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53595: LD_ADDR_VAR 0 28
53599: PUSH
53600: LD_INT 3
53602: NEG
53603: PUSH
53604: LD_INT 3
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: LD_INT 4
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 4
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53641: LD_ADDR_VAR 0 29
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: LD_INT 3
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 3
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: LD_INT 4
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 4
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 5
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 5
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: LD_INT 4
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 6
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 6
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 5
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53796: LD_ADDR_VAR 0 30
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 3
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 3
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 4
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 4
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 4
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 5
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 5
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 5
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 6
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 6
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53939: LD_ADDR_VAR 0 31
53943: PUSH
53944: LD_INT 3
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 3
53956: PUSH
53957: LD_INT 3
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: LD_INT 3
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 4
53976: PUSH
53977: LD_INT 3
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 4
53986: PUSH
53987: LD_INT 4
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: PUSH
53997: LD_INT 4
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 5
54006: PUSH
54007: LD_INT 4
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 5
54016: PUSH
54017: LD_INT 5
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 4
54026: PUSH
54027: LD_INT 5
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 6
54036: PUSH
54037: LD_INT 5
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 6
54046: PUSH
54047: LD_INT 6
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 5
54056: PUSH
54057: LD_INT 6
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54078: LD_ADDR_VAR 0 32
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 3
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 3
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 4
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 4
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: LD_INT 3
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 5
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 5
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 4
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 6
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 6
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 5
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54221: LD_ADDR_VAR 0 33
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 3
54239: NEG
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 3
54250: NEG
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 4
54273: NEG
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 4
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 4
54296: NEG
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 5
54307: NEG
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 5
54318: NEG
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 5
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 6
54341: NEG
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 6
54352: NEG
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54376: LD_ADDR_VAR 0 34
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 3
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 3
54395: NEG
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 3
54407: NEG
54408: PUSH
54409: LD_INT 3
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: NEG
54420: PUSH
54421: LD_INT 4
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 4
54431: NEG
54432: PUSH
54433: LD_INT 3
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 4
54443: NEG
54444: PUSH
54445: LD_INT 4
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 4
54455: NEG
54456: PUSH
54457: LD_INT 5
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 5
54467: NEG
54468: PUSH
54469: LD_INT 4
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 5
54479: NEG
54480: PUSH
54481: LD_INT 5
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 5
54491: NEG
54492: PUSH
54493: LD_INT 6
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 6
54503: NEG
54504: PUSH
54505: LD_INT 5
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 6
54515: NEG
54516: PUSH
54517: LD_INT 6
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54539: LD_ADDR_VAR 0 41
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: LIST
54582: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54583: LD_ADDR_VAR 0 42
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 3
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: LIST
54623: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54624: LD_ADDR_VAR 0 43
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 3
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: LD_INT 3
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: LIST
54663: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54664: LD_ADDR_VAR 0 44
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 3
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54705: LD_ADDR_VAR 0 45
54709: PUSH
54710: LD_INT 2
54712: NEG
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: LIST
54748: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54749: LD_ADDR_VAR 0 46
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: LD_INT 3
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: LIST
54794: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54795: LD_ADDR_VAR 0 47
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: LD_INT 3
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54828: LD_ADDR_VAR 0 48
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54859: LD_ADDR_VAR 0 49
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 3
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54888: LD_ADDR_VAR 0 50
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 3
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54917: LD_ADDR_VAR 0 51
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54948: LD_ADDR_VAR 0 52
54952: PUSH
54953: LD_INT 3
54955: NEG
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54981: LD_ADDR_VAR 0 53
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 3
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 3
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: LIST
55024: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55025: LD_ADDR_VAR 0 54
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 3
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55066: LD_ADDR_VAR 0 55
55070: PUSH
55071: LD_INT 3
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 3
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: PUSH
55094: LD_INT 3
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55106: LD_ADDR_VAR 0 56
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 3
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55147: LD_ADDR_VAR 0 57
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 3
55165: NEG
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 3
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55191: LD_ADDR_VAR 0 58
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: LD_INT 3
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 3
55222: NEG
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: LIST
55236: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55237: LD_ADDR_VAR 0 59
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: LIST
55280: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55281: LD_ADDR_VAR 0 60
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: LIST
55321: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55322: LD_ADDR_VAR 0 61
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55362: LD_ADDR_VAR 0 62
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: LIST
55402: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55403: LD_ADDR_VAR 0 63
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 2
55421: NEG
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: LIST
55446: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55447: LD_ADDR_VAR 0 64
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: LD_INT 2
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: LIST
55492: ST_TO_ADDR
// end ; 2 :
55493: GO 58759
55495: LD_INT 2
55497: DOUBLE
55498: EQUAL
55499: IFTRUE 55503
55501: GO 58758
55503: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55504: LD_ADDR_VAR 0 29
55508: PUSH
55509: LD_INT 4
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 4
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 5
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 5
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 4
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 3
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 5
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: LD_INT 3
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 3
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 4
55624: PUSH
55625: LD_INT 3
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 4
55634: PUSH
55635: LD_INT 4
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 3
55644: PUSH
55645: LD_INT 4
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 4
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: LD_INT 4
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 4
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 3
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 4
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 5
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 5
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 4
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 3
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: LD_INT 5
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: LD_INT 3
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 3
55787: NEG
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 3
55798: NEG
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 3
55832: NEG
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 4
55843: NEG
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 4
55854: NEG
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 4
55866: NEG
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 2
55878: NEG
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 4
55889: NEG
55890: PUSH
55891: LD_INT 4
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 4
55901: NEG
55902: PUSH
55903: LD_INT 5
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: LD_INT 4
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 3
55925: NEG
55926: PUSH
55927: LD_INT 3
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 4
55937: NEG
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 5
55949: NEG
55950: PUSH
55951: LD_INT 4
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 5
55961: NEG
55962: PUSH
55963: LD_INT 5
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 3
55973: NEG
55974: PUSH
55975: LD_INT 5
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 5
55985: NEG
55986: PUSH
55987: LD_INT 3
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56042: LD_ADDR_VAR 0 30
56046: PUSH
56047: LD_INT 4
56049: PUSH
56050: LD_INT 4
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 4
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 5
56069: PUSH
56070: LD_INT 4
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 5
56079: PUSH
56080: LD_INT 5
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 4
56089: PUSH
56090: LD_INT 5
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 3
56099: PUSH
56100: LD_INT 4
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 3
56109: PUSH
56110: LD_INT 3
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 5
56119: PUSH
56120: LD_INT 3
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 3
56129: PUSH
56130: LD_INT 5
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: LD_INT 3
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 4
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 4
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: LD_INT 3
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: LD_INT 4
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 4
56232: NEG
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 4
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 4
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 5
56288: NEG
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 5
56299: NEG
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 5
56311: NEG
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 3
56323: NEG
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 3
56334: NEG
56335: PUSH
56336: LD_INT 3
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 3
56346: NEG
56347: PUSH
56348: LD_INT 4
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: LD_INT 3
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 2
56370: NEG
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 3
56382: NEG
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 4
56394: NEG
56395: PUSH
56396: LD_INT 3
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 4
56406: NEG
56407: PUSH
56408: LD_INT 4
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 2
56418: NEG
56419: PUSH
56420: LD_INT 4
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 4
56430: NEG
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 4
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 5
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: LD_INT 4
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: LD_INT 4
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: LD_INT 5
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: LD_INT 3
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: LD_INT 5
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56589: LD_ADDR_VAR 0 31
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 4
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 4
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: LD_INT 5
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 5
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 4
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 5
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 3
56689: NEG
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: NEG
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 4
56745: NEG
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 4
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 4
56768: NEG
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 4
56791: NEG
56792: PUSH
56793: LD_INT 4
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 4
56803: NEG
56804: PUSH
56805: LD_INT 5
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 3
56815: NEG
56816: PUSH
56817: LD_INT 4
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 3
56827: NEG
56828: PUSH
56829: LD_INT 3
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 4
56839: NEG
56840: PUSH
56841: LD_INT 3
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 5
56851: NEG
56852: PUSH
56853: LD_INT 4
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 5
56863: NEG
56864: PUSH
56865: LD_INT 5
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 3
56875: NEG
56876: PUSH
56877: LD_INT 5
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 5
56887: NEG
56888: PUSH
56889: LD_INT 3
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 3
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 4
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: LD_INT 3
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 4
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: LD_INT 2
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: LD_INT 4
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 4
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 4
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 5
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 5
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 4
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 3
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 5
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57139: LD_ADDR_VAR 0 32
57143: PUSH
57144: LD_INT 4
57146: NEG
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 4
57157: NEG
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 3
57169: NEG
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: NEG
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 4
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 5
57202: NEG
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 5
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 5
57225: NEG
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 3
57248: NEG
57249: PUSH
57250: LD_INT 3
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: LD_INT 4
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: LD_INT 3
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 3
57296: NEG
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 4
57308: NEG
57309: PUSH
57310: LD_INT 3
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 4
57320: NEG
57321: PUSH
57322: LD_INT 4
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: NEG
57333: PUSH
57334: LD_INT 4
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 4
57344: NEG
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 4
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 5
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 4
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: LD_INT 3
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 4
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 5
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: LD_INT 3
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: LD_INT 5
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 3
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 4
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 4
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 4
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 4
57551: PUSH
57552: LD_INT 4
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 4
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 5
57571: PUSH
57572: LD_INT 4
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 5
57581: PUSH
57582: LD_INT 5
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 4
57591: PUSH
57592: LD_INT 5
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: LD_INT 4
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 3
57611: PUSH
57612: LD_INT 3
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 5
57621: PUSH
57622: LD_INT 3
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: LD_INT 5
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57686: LD_ADDR_VAR 0 33
57690: PUSH
57691: LD_INT 4
57693: NEG
57694: PUSH
57695: LD_INT 4
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 4
57705: NEG
57706: PUSH
57707: LD_INT 5
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 3
57717: NEG
57718: PUSH
57719: LD_INT 4
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: LD_INT 3
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 4
57741: NEG
57742: PUSH
57743: LD_INT 3
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 5
57753: NEG
57754: PUSH
57755: LD_INT 4
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 5
57765: NEG
57766: PUSH
57767: LD_INT 5
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 3
57777: NEG
57778: PUSH
57779: LD_INT 5
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 5
57789: NEG
57790: PUSH
57791: LD_INT 3
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 4
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 3
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 3
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: LD_INT 4
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: LD_INT 4
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 4
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 4
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 5
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 5
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 4
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 3
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 3
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 3
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 5
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 3
57996: PUSH
57997: LD_INT 3
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 3
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 4
58016: PUSH
58017: LD_INT 3
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 4
58026: PUSH
58027: LD_INT 4
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 3
58036: PUSH
58037: LD_INT 4
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 4
58066: PUSH
58067: LD_INT 2
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: LD_INT 4
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: LD_INT 4
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: LD_INT 3
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: LD_INT 4
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: LD_INT 5
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 5
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 4
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: LD_INT 5
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: LD_INT 3
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58224: LD_ADDR_VAR 0 34
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 4
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 5
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: LD_INT 4
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 4
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 5
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: LD_INT 5
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 4
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 4
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 4
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 4
58426: PUSH
58427: LD_INT 4
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 4
58436: PUSH
58437: LD_INT 3
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 5
58446: PUSH
58447: LD_INT 4
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 5
58456: PUSH
58457: LD_INT 5
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 4
58466: PUSH
58467: LD_INT 5
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 3
58476: PUSH
58477: LD_INT 4
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: LD_INT 3
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 5
58496: PUSH
58497: LD_INT 3
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: LD_INT 5
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 3
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 2
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: LD_INT 4
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: LD_INT 4
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: LD_INT 3
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: LD_INT 4
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 4
58609: NEG
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 4
58620: NEG
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 3
58632: NEG
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 3
58643: NEG
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 4
58654: NEG
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 5
58665: NEG
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 5
58676: NEG
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 5
58688: NEG
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 3
58700: NEG
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: ST_TO_ADDR
// end ; end ;
58756: GO 58759
58758: POP
// case btype of b_depot , b_warehouse :
58759: LD_VAR 0 1
58763: PUSH
58764: LD_INT 0
58766: DOUBLE
58767: EQUAL
58768: IFTRUE 58778
58770: LD_INT 1
58772: DOUBLE
58773: EQUAL
58774: IFTRUE 58778
58776: GO 58979
58778: POP
// case nation of nation_american :
58779: LD_VAR 0 5
58783: PUSH
58784: LD_INT 1
58786: DOUBLE
58787: EQUAL
58788: IFTRUE 58792
58790: GO 58848
58792: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58793: LD_ADDR_VAR 0 9
58797: PUSH
58798: LD_VAR 0 11
58802: PUSH
58803: LD_VAR 0 12
58807: PUSH
58808: LD_VAR 0 13
58812: PUSH
58813: LD_VAR 0 14
58817: PUSH
58818: LD_VAR 0 15
58822: PUSH
58823: LD_VAR 0 16
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: PUSH
58836: LD_VAR 0 4
58840: PUSH
58841: LD_INT 1
58843: PLUS
58844: ARRAY
58845: ST_TO_ADDR
58846: GO 58977
58848: LD_INT 2
58850: DOUBLE
58851: EQUAL
58852: IFTRUE 58856
58854: GO 58912
58856: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58857: LD_ADDR_VAR 0 9
58861: PUSH
58862: LD_VAR 0 17
58866: PUSH
58867: LD_VAR 0 18
58871: PUSH
58872: LD_VAR 0 19
58876: PUSH
58877: LD_VAR 0 20
58881: PUSH
58882: LD_VAR 0 21
58886: PUSH
58887: LD_VAR 0 22
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: PUSH
58900: LD_VAR 0 4
58904: PUSH
58905: LD_INT 1
58907: PLUS
58908: ARRAY
58909: ST_TO_ADDR
58910: GO 58977
58912: LD_INT 3
58914: DOUBLE
58915: EQUAL
58916: IFTRUE 58920
58918: GO 58976
58920: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58921: LD_ADDR_VAR 0 9
58925: PUSH
58926: LD_VAR 0 23
58930: PUSH
58931: LD_VAR 0 24
58935: PUSH
58936: LD_VAR 0 25
58940: PUSH
58941: LD_VAR 0 26
58945: PUSH
58946: LD_VAR 0 27
58950: PUSH
58951: LD_VAR 0 28
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: PUSH
58964: LD_VAR 0 4
58968: PUSH
58969: LD_INT 1
58971: PLUS
58972: ARRAY
58973: ST_TO_ADDR
58974: GO 58977
58976: POP
58977: GO 59532
58979: LD_INT 2
58981: DOUBLE
58982: EQUAL
58983: IFTRUE 58993
58985: LD_INT 3
58987: DOUBLE
58988: EQUAL
58989: IFTRUE 58993
58991: GO 59049
58993: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58994: LD_ADDR_VAR 0 9
58998: PUSH
58999: LD_VAR 0 29
59003: PUSH
59004: LD_VAR 0 30
59008: PUSH
59009: LD_VAR 0 31
59013: PUSH
59014: LD_VAR 0 32
59018: PUSH
59019: LD_VAR 0 33
59023: PUSH
59024: LD_VAR 0 34
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: PUSH
59037: LD_VAR 0 4
59041: PUSH
59042: LD_INT 1
59044: PLUS
59045: ARRAY
59046: ST_TO_ADDR
59047: GO 59532
59049: LD_INT 16
59051: DOUBLE
59052: EQUAL
59053: IFTRUE 59111
59055: LD_INT 17
59057: DOUBLE
59058: EQUAL
59059: IFTRUE 59111
59061: LD_INT 18
59063: DOUBLE
59064: EQUAL
59065: IFTRUE 59111
59067: LD_INT 19
59069: DOUBLE
59070: EQUAL
59071: IFTRUE 59111
59073: LD_INT 22
59075: DOUBLE
59076: EQUAL
59077: IFTRUE 59111
59079: LD_INT 20
59081: DOUBLE
59082: EQUAL
59083: IFTRUE 59111
59085: LD_INT 21
59087: DOUBLE
59088: EQUAL
59089: IFTRUE 59111
59091: LD_INT 23
59093: DOUBLE
59094: EQUAL
59095: IFTRUE 59111
59097: LD_INT 24
59099: DOUBLE
59100: EQUAL
59101: IFTRUE 59111
59103: LD_INT 25
59105: DOUBLE
59106: EQUAL
59107: IFTRUE 59111
59109: GO 59167
59111: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59112: LD_ADDR_VAR 0 9
59116: PUSH
59117: LD_VAR 0 35
59121: PUSH
59122: LD_VAR 0 36
59126: PUSH
59127: LD_VAR 0 37
59131: PUSH
59132: LD_VAR 0 38
59136: PUSH
59137: LD_VAR 0 39
59141: PUSH
59142: LD_VAR 0 40
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: PUSH
59155: LD_VAR 0 4
59159: PUSH
59160: LD_INT 1
59162: PLUS
59163: ARRAY
59164: ST_TO_ADDR
59165: GO 59532
59167: LD_INT 6
59169: DOUBLE
59170: EQUAL
59171: IFTRUE 59223
59173: LD_INT 7
59175: DOUBLE
59176: EQUAL
59177: IFTRUE 59223
59179: LD_INT 8
59181: DOUBLE
59182: EQUAL
59183: IFTRUE 59223
59185: LD_INT 13
59187: DOUBLE
59188: EQUAL
59189: IFTRUE 59223
59191: LD_INT 12
59193: DOUBLE
59194: EQUAL
59195: IFTRUE 59223
59197: LD_INT 15
59199: DOUBLE
59200: EQUAL
59201: IFTRUE 59223
59203: LD_INT 11
59205: DOUBLE
59206: EQUAL
59207: IFTRUE 59223
59209: LD_INT 14
59211: DOUBLE
59212: EQUAL
59213: IFTRUE 59223
59215: LD_INT 10
59217: DOUBLE
59218: EQUAL
59219: IFTRUE 59223
59221: GO 59279
59223: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59224: LD_ADDR_VAR 0 9
59228: PUSH
59229: LD_VAR 0 41
59233: PUSH
59234: LD_VAR 0 42
59238: PUSH
59239: LD_VAR 0 43
59243: PUSH
59244: LD_VAR 0 44
59248: PUSH
59249: LD_VAR 0 45
59253: PUSH
59254: LD_VAR 0 46
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: PUSH
59267: LD_VAR 0 4
59271: PUSH
59272: LD_INT 1
59274: PLUS
59275: ARRAY
59276: ST_TO_ADDR
59277: GO 59532
59279: LD_INT 36
59281: DOUBLE
59282: EQUAL
59283: IFTRUE 59287
59285: GO 59343
59287: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59288: LD_ADDR_VAR 0 9
59292: PUSH
59293: LD_VAR 0 47
59297: PUSH
59298: LD_VAR 0 48
59302: PUSH
59303: LD_VAR 0 49
59307: PUSH
59308: LD_VAR 0 50
59312: PUSH
59313: LD_VAR 0 51
59317: PUSH
59318: LD_VAR 0 52
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: PUSH
59331: LD_VAR 0 4
59335: PUSH
59336: LD_INT 1
59338: PLUS
59339: ARRAY
59340: ST_TO_ADDR
59341: GO 59532
59343: LD_INT 4
59345: DOUBLE
59346: EQUAL
59347: IFTRUE 59369
59349: LD_INT 5
59351: DOUBLE
59352: EQUAL
59353: IFTRUE 59369
59355: LD_INT 34
59357: DOUBLE
59358: EQUAL
59359: IFTRUE 59369
59361: LD_INT 37
59363: DOUBLE
59364: EQUAL
59365: IFTRUE 59369
59367: GO 59425
59369: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59370: LD_ADDR_VAR 0 9
59374: PUSH
59375: LD_VAR 0 53
59379: PUSH
59380: LD_VAR 0 54
59384: PUSH
59385: LD_VAR 0 55
59389: PUSH
59390: LD_VAR 0 56
59394: PUSH
59395: LD_VAR 0 57
59399: PUSH
59400: LD_VAR 0 58
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: PUSH
59413: LD_VAR 0 4
59417: PUSH
59418: LD_INT 1
59420: PLUS
59421: ARRAY
59422: ST_TO_ADDR
59423: GO 59532
59425: LD_INT 31
59427: DOUBLE
59428: EQUAL
59429: IFTRUE 59475
59431: LD_INT 32
59433: DOUBLE
59434: EQUAL
59435: IFTRUE 59475
59437: LD_INT 33
59439: DOUBLE
59440: EQUAL
59441: IFTRUE 59475
59443: LD_INT 27
59445: DOUBLE
59446: EQUAL
59447: IFTRUE 59475
59449: LD_INT 26
59451: DOUBLE
59452: EQUAL
59453: IFTRUE 59475
59455: LD_INT 28
59457: DOUBLE
59458: EQUAL
59459: IFTRUE 59475
59461: LD_INT 29
59463: DOUBLE
59464: EQUAL
59465: IFTRUE 59475
59467: LD_INT 30
59469: DOUBLE
59470: EQUAL
59471: IFTRUE 59475
59473: GO 59531
59475: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59476: LD_ADDR_VAR 0 9
59480: PUSH
59481: LD_VAR 0 59
59485: PUSH
59486: LD_VAR 0 60
59490: PUSH
59491: LD_VAR 0 61
59495: PUSH
59496: LD_VAR 0 62
59500: PUSH
59501: LD_VAR 0 63
59505: PUSH
59506: LD_VAR 0 64
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: PUSH
59519: LD_VAR 0 4
59523: PUSH
59524: LD_INT 1
59526: PLUS
59527: ARRAY
59528: ST_TO_ADDR
59529: GO 59532
59531: POP
// temp_list2 = [ ] ;
59532: LD_ADDR_VAR 0 10
59536: PUSH
59537: EMPTY
59538: ST_TO_ADDR
// for i in temp_list do
59539: LD_ADDR_VAR 0 8
59543: PUSH
59544: LD_VAR 0 9
59548: PUSH
59549: FOR_IN
59550: IFFALSE 59602
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59552: LD_ADDR_VAR 0 10
59556: PUSH
59557: LD_VAR 0 10
59561: PUSH
59562: LD_VAR 0 8
59566: PUSH
59567: LD_INT 1
59569: ARRAY
59570: PUSH
59571: LD_VAR 0 2
59575: PLUS
59576: PUSH
59577: LD_VAR 0 8
59581: PUSH
59582: LD_INT 2
59584: ARRAY
59585: PUSH
59586: LD_VAR 0 3
59590: PLUS
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: EMPTY
59597: LIST
59598: ADD
59599: ST_TO_ADDR
59600: GO 59549
59602: POP
59603: POP
// result = temp_list2 ;
59604: LD_ADDR_VAR 0 7
59608: PUSH
59609: LD_VAR 0 10
59613: ST_TO_ADDR
// end ;
59614: LD_VAR 0 7
59618: RET
// export function EnemyInRange ( unit , dist ) ; begin
59619: LD_INT 0
59621: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59622: LD_ADDR_VAR 0 3
59626: PUSH
59627: LD_VAR 0 1
59631: PPUSH
59632: CALL_OW 255
59636: PPUSH
59637: LD_VAR 0 1
59641: PPUSH
59642: CALL_OW 250
59646: PPUSH
59647: LD_VAR 0 1
59651: PPUSH
59652: CALL_OW 251
59656: PPUSH
59657: LD_VAR 0 2
59661: PPUSH
59662: CALL 33021 0 4
59666: PUSH
59667: LD_INT 4
59669: ARRAY
59670: ST_TO_ADDR
// end ;
59671: LD_VAR 0 3
59675: RET
// export function PlayerSeeMe ( unit ) ; begin
59676: LD_INT 0
59678: PPUSH
// result := See ( your_side , unit ) ;
59679: LD_ADDR_VAR 0 2
59683: PUSH
59684: LD_OWVAR 2
59688: PPUSH
59689: LD_VAR 0 1
59693: PPUSH
59694: CALL_OW 292
59698: ST_TO_ADDR
// end ;
59699: LD_VAR 0 2
59703: RET
// export function ReverseDir ( unit ) ; begin
59704: LD_INT 0
59706: PPUSH
// if not unit then
59707: LD_VAR 0 1
59711: NOT
59712: IFFALSE 59716
// exit ;
59714: GO 59739
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59716: LD_ADDR_VAR 0 2
59720: PUSH
59721: LD_VAR 0 1
59725: PPUSH
59726: CALL_OW 254
59730: PUSH
59731: LD_INT 3
59733: PLUS
59734: PUSH
59735: LD_INT 6
59737: MOD
59738: ST_TO_ADDR
// end ;
59739: LD_VAR 0 2
59743: RET
// export function ReverseArray ( array ) ; var i ; begin
59744: LD_INT 0
59746: PPUSH
59747: PPUSH
// if not array then
59748: LD_VAR 0 1
59752: NOT
59753: IFFALSE 59757
// exit ;
59755: GO 59812
// result := [ ] ;
59757: LD_ADDR_VAR 0 2
59761: PUSH
59762: EMPTY
59763: ST_TO_ADDR
// for i := array downto 1 do
59764: LD_ADDR_VAR 0 3
59768: PUSH
59769: DOUBLE
59770: LD_VAR 0 1
59774: INC
59775: ST_TO_ADDR
59776: LD_INT 1
59778: PUSH
59779: FOR_DOWNTO
59780: IFFALSE 59810
// result := Join ( result , array [ i ] ) ;
59782: LD_ADDR_VAR 0 2
59786: PUSH
59787: LD_VAR 0 2
59791: PPUSH
59792: LD_VAR 0 1
59796: PUSH
59797: LD_VAR 0 3
59801: ARRAY
59802: PPUSH
59803: CALL 64437 0 2
59807: ST_TO_ADDR
59808: GO 59779
59810: POP
59811: POP
// end ;
59812: LD_VAR 0 2
59816: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59817: LD_INT 0
59819: PPUSH
59820: PPUSH
59821: PPUSH
59822: PPUSH
59823: PPUSH
59824: PPUSH
// if not unit or not hexes then
59825: LD_VAR 0 1
59829: NOT
59830: PUSH
59831: LD_VAR 0 2
59835: NOT
59836: OR
59837: IFFALSE 59841
// exit ;
59839: GO 59964
// dist := 9999 ;
59841: LD_ADDR_VAR 0 5
59845: PUSH
59846: LD_INT 9999
59848: ST_TO_ADDR
// for i = 1 to hexes do
59849: LD_ADDR_VAR 0 4
59853: PUSH
59854: DOUBLE
59855: LD_INT 1
59857: DEC
59858: ST_TO_ADDR
59859: LD_VAR 0 2
59863: PUSH
59864: FOR_TO
59865: IFFALSE 59952
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59867: LD_ADDR_VAR 0 6
59871: PUSH
59872: LD_VAR 0 1
59876: PPUSH
59877: LD_VAR 0 2
59881: PUSH
59882: LD_VAR 0 4
59886: ARRAY
59887: PUSH
59888: LD_INT 1
59890: ARRAY
59891: PPUSH
59892: LD_VAR 0 2
59896: PUSH
59897: LD_VAR 0 4
59901: ARRAY
59902: PUSH
59903: LD_INT 2
59905: ARRAY
59906: PPUSH
59907: CALL_OW 297
59911: ST_TO_ADDR
// if tdist < dist then
59912: LD_VAR 0 6
59916: PUSH
59917: LD_VAR 0 5
59921: LESS
59922: IFFALSE 59950
// begin hex := hexes [ i ] ;
59924: LD_ADDR_VAR 0 8
59928: PUSH
59929: LD_VAR 0 2
59933: PUSH
59934: LD_VAR 0 4
59938: ARRAY
59939: ST_TO_ADDR
// dist := tdist ;
59940: LD_ADDR_VAR 0 5
59944: PUSH
59945: LD_VAR 0 6
59949: ST_TO_ADDR
// end ; end ;
59950: GO 59864
59952: POP
59953: POP
// result := hex ;
59954: LD_ADDR_VAR 0 3
59958: PUSH
59959: LD_VAR 0 8
59963: ST_TO_ADDR
// end ;
59964: LD_VAR 0 3
59968: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59969: LD_INT 0
59971: PPUSH
59972: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59973: LD_VAR 0 1
59977: NOT
59978: PUSH
59979: LD_VAR 0 1
59983: PUSH
59984: LD_INT 21
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 23
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PPUSH
60008: CALL_OW 69
60012: IN
60013: NOT
60014: OR
60015: IFFALSE 60019
// exit ;
60017: GO 60066
// for i = 1 to 3 do
60019: LD_ADDR_VAR 0 3
60023: PUSH
60024: DOUBLE
60025: LD_INT 1
60027: DEC
60028: ST_TO_ADDR
60029: LD_INT 3
60031: PUSH
60032: FOR_TO
60033: IFFALSE 60064
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60035: LD_VAR 0 1
60039: PPUSH
60040: CALL_OW 250
60044: PPUSH
60045: LD_VAR 0 1
60049: PPUSH
60050: CALL_OW 251
60054: PPUSH
60055: LD_INT 1
60057: PPUSH
60058: CALL_OW 453
60062: GO 60032
60064: POP
60065: POP
// end ;
60066: LD_VAR 0 2
60070: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60071: LD_INT 0
60073: PPUSH
60074: PPUSH
60075: PPUSH
60076: PPUSH
60077: PPUSH
60078: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60079: LD_VAR 0 1
60083: NOT
60084: PUSH
60085: LD_VAR 0 2
60089: NOT
60090: OR
60091: PUSH
60092: LD_VAR 0 1
60096: PPUSH
60097: CALL_OW 314
60101: OR
60102: IFFALSE 60106
// exit ;
60104: GO 60547
// x := GetX ( enemy_unit ) ;
60106: LD_ADDR_VAR 0 7
60110: PUSH
60111: LD_VAR 0 2
60115: PPUSH
60116: CALL_OW 250
60120: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60121: LD_ADDR_VAR 0 8
60125: PUSH
60126: LD_VAR 0 2
60130: PPUSH
60131: CALL_OW 251
60135: ST_TO_ADDR
// if not x or not y then
60136: LD_VAR 0 7
60140: NOT
60141: PUSH
60142: LD_VAR 0 8
60146: NOT
60147: OR
60148: IFFALSE 60152
// exit ;
60150: GO 60547
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60152: LD_ADDR_VAR 0 6
60156: PUSH
60157: LD_VAR 0 7
60161: PPUSH
60162: LD_INT 0
60164: PPUSH
60165: LD_INT 4
60167: PPUSH
60168: CALL_OW 272
60172: PUSH
60173: LD_VAR 0 8
60177: PPUSH
60178: LD_INT 0
60180: PPUSH
60181: LD_INT 4
60183: PPUSH
60184: CALL_OW 273
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_VAR 0 7
60197: PPUSH
60198: LD_INT 1
60200: PPUSH
60201: LD_INT 4
60203: PPUSH
60204: CALL_OW 272
60208: PUSH
60209: LD_VAR 0 8
60213: PPUSH
60214: LD_INT 1
60216: PPUSH
60217: LD_INT 4
60219: PPUSH
60220: CALL_OW 273
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_VAR 0 7
60233: PPUSH
60234: LD_INT 2
60236: PPUSH
60237: LD_INT 4
60239: PPUSH
60240: CALL_OW 272
60244: PUSH
60245: LD_VAR 0 8
60249: PPUSH
60250: LD_INT 2
60252: PPUSH
60253: LD_INT 4
60255: PPUSH
60256: CALL_OW 273
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_VAR 0 7
60269: PPUSH
60270: LD_INT 3
60272: PPUSH
60273: LD_INT 4
60275: PPUSH
60276: CALL_OW 272
60280: PUSH
60281: LD_VAR 0 8
60285: PPUSH
60286: LD_INT 3
60288: PPUSH
60289: LD_INT 4
60291: PPUSH
60292: CALL_OW 273
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_VAR 0 7
60305: PPUSH
60306: LD_INT 4
60308: PPUSH
60309: LD_INT 4
60311: PPUSH
60312: CALL_OW 272
60316: PUSH
60317: LD_VAR 0 8
60321: PPUSH
60322: LD_INT 4
60324: PPUSH
60325: LD_INT 4
60327: PPUSH
60328: CALL_OW 273
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_VAR 0 7
60341: PPUSH
60342: LD_INT 5
60344: PPUSH
60345: LD_INT 4
60347: PPUSH
60348: CALL_OW 272
60352: PUSH
60353: LD_VAR 0 8
60357: PPUSH
60358: LD_INT 5
60360: PPUSH
60361: LD_INT 4
60363: PPUSH
60364: CALL_OW 273
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: ST_TO_ADDR
// for i = tmp downto 1 do
60381: LD_ADDR_VAR 0 4
60385: PUSH
60386: DOUBLE
60387: LD_VAR 0 6
60391: INC
60392: ST_TO_ADDR
60393: LD_INT 1
60395: PUSH
60396: FOR_DOWNTO
60397: IFFALSE 60498
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60399: LD_VAR 0 6
60403: PUSH
60404: LD_VAR 0 4
60408: ARRAY
60409: PUSH
60410: LD_INT 1
60412: ARRAY
60413: PPUSH
60414: LD_VAR 0 6
60418: PUSH
60419: LD_VAR 0 4
60423: ARRAY
60424: PUSH
60425: LD_INT 2
60427: ARRAY
60428: PPUSH
60429: CALL_OW 488
60433: NOT
60434: PUSH
60435: LD_VAR 0 6
60439: PUSH
60440: LD_VAR 0 4
60444: ARRAY
60445: PUSH
60446: LD_INT 1
60448: ARRAY
60449: PPUSH
60450: LD_VAR 0 6
60454: PUSH
60455: LD_VAR 0 4
60459: ARRAY
60460: PUSH
60461: LD_INT 2
60463: ARRAY
60464: PPUSH
60465: CALL_OW 428
60469: PUSH
60470: LD_INT 0
60472: NONEQUAL
60473: OR
60474: IFFALSE 60496
// tmp := Delete ( tmp , i ) ;
60476: LD_ADDR_VAR 0 6
60480: PUSH
60481: LD_VAR 0 6
60485: PPUSH
60486: LD_VAR 0 4
60490: PPUSH
60491: CALL_OW 3
60495: ST_TO_ADDR
60496: GO 60396
60498: POP
60499: POP
// j := GetClosestHex ( unit , tmp ) ;
60500: LD_ADDR_VAR 0 5
60504: PUSH
60505: LD_VAR 0 1
60509: PPUSH
60510: LD_VAR 0 6
60514: PPUSH
60515: CALL 59817 0 2
60519: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60520: LD_VAR 0 1
60524: PPUSH
60525: LD_VAR 0 5
60529: PUSH
60530: LD_INT 1
60532: ARRAY
60533: PPUSH
60534: LD_VAR 0 5
60538: PUSH
60539: LD_INT 2
60541: ARRAY
60542: PPUSH
60543: CALL_OW 111
// end ;
60547: LD_VAR 0 3
60551: RET
// export function PrepareApemanSoldier ( ) ; begin
60552: LD_INT 0
60554: PPUSH
// uc_nation := 0 ;
60555: LD_ADDR_OWVAR 21
60559: PUSH
60560: LD_INT 0
60562: ST_TO_ADDR
// hc_sex := sex_male ;
60563: LD_ADDR_OWVAR 27
60567: PUSH
60568: LD_INT 1
60570: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60571: LD_ADDR_OWVAR 28
60575: PUSH
60576: LD_INT 15
60578: ST_TO_ADDR
// hc_gallery :=  ;
60579: LD_ADDR_OWVAR 33
60583: PUSH
60584: LD_STRING 
60586: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60587: LD_ADDR_OWVAR 31
60591: PUSH
60592: LD_INT 0
60594: PPUSH
60595: LD_INT 3
60597: PPUSH
60598: CALL_OW 12
60602: PUSH
60603: LD_INT 0
60605: PPUSH
60606: LD_INT 3
60608: PPUSH
60609: CALL_OW 12
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: ST_TO_ADDR
// end ;
60626: LD_VAR 0 1
60630: RET
// export function PrepareApemanEngineer ( ) ; begin
60631: LD_INT 0
60633: PPUSH
// uc_nation := 0 ;
60634: LD_ADDR_OWVAR 21
60638: PUSH
60639: LD_INT 0
60641: ST_TO_ADDR
// hc_sex := sex_male ;
60642: LD_ADDR_OWVAR 27
60646: PUSH
60647: LD_INT 1
60649: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60650: LD_ADDR_OWVAR 28
60654: PUSH
60655: LD_INT 16
60657: ST_TO_ADDR
// hc_gallery :=  ;
60658: LD_ADDR_OWVAR 33
60662: PUSH
60663: LD_STRING 
60665: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60666: LD_ADDR_OWVAR 31
60670: PUSH
60671: LD_INT 0
60673: PPUSH
60674: LD_INT 3
60676: PPUSH
60677: CALL_OW 12
60681: PUSH
60682: LD_INT 0
60684: PPUSH
60685: LD_INT 3
60687: PPUSH
60688: CALL_OW 12
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: ST_TO_ADDR
// end ;
60705: LD_VAR 0 1
60709: RET
// export function PrepareApeman ( agressivity ) ; begin
60710: LD_INT 0
60712: PPUSH
// uc_side := 0 ;
60713: LD_ADDR_OWVAR 20
60717: PUSH
60718: LD_INT 0
60720: ST_TO_ADDR
// uc_nation := 0 ;
60721: LD_ADDR_OWVAR 21
60725: PUSH
60726: LD_INT 0
60728: ST_TO_ADDR
// hc_sex := sex_male ;
60729: LD_ADDR_OWVAR 27
60733: PUSH
60734: LD_INT 1
60736: ST_TO_ADDR
// hc_class := class_apeman ;
60737: LD_ADDR_OWVAR 28
60741: PUSH
60742: LD_INT 12
60744: ST_TO_ADDR
// hc_gallery :=  ;
60745: LD_ADDR_OWVAR 33
60749: PUSH
60750: LD_STRING 
60752: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60753: LD_ADDR_OWVAR 35
60757: PUSH
60758: LD_VAR 0 1
60762: NEG
60763: PPUSH
60764: LD_VAR 0 1
60768: PPUSH
60769: CALL_OW 12
60773: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60774: LD_ADDR_OWVAR 31
60778: PUSH
60779: LD_INT 0
60781: PPUSH
60782: LD_INT 3
60784: PPUSH
60785: CALL_OW 12
60789: PUSH
60790: LD_INT 0
60792: PPUSH
60793: LD_INT 3
60795: PPUSH
60796: CALL_OW 12
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: ST_TO_ADDR
// end ;
60813: LD_VAR 0 2
60817: RET
// export function PrepareTiger ( agressivity ) ; begin
60818: LD_INT 0
60820: PPUSH
// uc_side := 0 ;
60821: LD_ADDR_OWVAR 20
60825: PUSH
60826: LD_INT 0
60828: ST_TO_ADDR
// uc_nation := 0 ;
60829: LD_ADDR_OWVAR 21
60833: PUSH
60834: LD_INT 0
60836: ST_TO_ADDR
// hc_class := class_tiger ;
60837: LD_ADDR_OWVAR 28
60841: PUSH
60842: LD_INT 14
60844: ST_TO_ADDR
// hc_gallery :=  ;
60845: LD_ADDR_OWVAR 33
60849: PUSH
60850: LD_STRING 
60852: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60853: LD_ADDR_OWVAR 35
60857: PUSH
60858: LD_VAR 0 1
60862: NEG
60863: PPUSH
60864: LD_VAR 0 1
60868: PPUSH
60869: CALL_OW 12
60873: ST_TO_ADDR
// end ;
60874: LD_VAR 0 2
60878: RET
// export function PrepareEnchidna ( ) ; begin
60879: LD_INT 0
60881: PPUSH
// uc_side := 0 ;
60882: LD_ADDR_OWVAR 20
60886: PUSH
60887: LD_INT 0
60889: ST_TO_ADDR
// uc_nation := 0 ;
60890: LD_ADDR_OWVAR 21
60894: PUSH
60895: LD_INT 0
60897: ST_TO_ADDR
// hc_class := class_baggie ;
60898: LD_ADDR_OWVAR 28
60902: PUSH
60903: LD_INT 13
60905: ST_TO_ADDR
// hc_gallery :=  ;
60906: LD_ADDR_OWVAR 33
60910: PUSH
60911: LD_STRING 
60913: ST_TO_ADDR
// end ;
60914: LD_VAR 0 1
60918: RET
// export function PrepareFrog ( ) ; begin
60919: LD_INT 0
60921: PPUSH
// uc_side := 0 ;
60922: LD_ADDR_OWVAR 20
60926: PUSH
60927: LD_INT 0
60929: ST_TO_ADDR
// uc_nation := 0 ;
60930: LD_ADDR_OWVAR 21
60934: PUSH
60935: LD_INT 0
60937: ST_TO_ADDR
// hc_class := class_frog ;
60938: LD_ADDR_OWVAR 28
60942: PUSH
60943: LD_INT 19
60945: ST_TO_ADDR
// hc_gallery :=  ;
60946: LD_ADDR_OWVAR 33
60950: PUSH
60951: LD_STRING 
60953: ST_TO_ADDR
// end ;
60954: LD_VAR 0 1
60958: RET
// export function PrepareFish ( ) ; begin
60959: LD_INT 0
60961: PPUSH
// uc_side := 0 ;
60962: LD_ADDR_OWVAR 20
60966: PUSH
60967: LD_INT 0
60969: ST_TO_ADDR
// uc_nation := 0 ;
60970: LD_ADDR_OWVAR 21
60974: PUSH
60975: LD_INT 0
60977: ST_TO_ADDR
// hc_class := class_fish ;
60978: LD_ADDR_OWVAR 28
60982: PUSH
60983: LD_INT 20
60985: ST_TO_ADDR
// hc_gallery :=  ;
60986: LD_ADDR_OWVAR 33
60990: PUSH
60991: LD_STRING 
60993: ST_TO_ADDR
// end ;
60994: LD_VAR 0 1
60998: RET
// export function PrepareBird ( ) ; begin
60999: LD_INT 0
61001: PPUSH
// uc_side := 0 ;
61002: LD_ADDR_OWVAR 20
61006: PUSH
61007: LD_INT 0
61009: ST_TO_ADDR
// uc_nation := 0 ;
61010: LD_ADDR_OWVAR 21
61014: PUSH
61015: LD_INT 0
61017: ST_TO_ADDR
// hc_class := class_phororhacos ;
61018: LD_ADDR_OWVAR 28
61022: PUSH
61023: LD_INT 18
61025: ST_TO_ADDR
// hc_gallery :=  ;
61026: LD_ADDR_OWVAR 33
61030: PUSH
61031: LD_STRING 
61033: ST_TO_ADDR
// end ;
61034: LD_VAR 0 1
61038: RET
// export function PrepareHorse ( ) ; begin
61039: LD_INT 0
61041: PPUSH
// uc_side := 0 ;
61042: LD_ADDR_OWVAR 20
61046: PUSH
61047: LD_INT 0
61049: ST_TO_ADDR
// uc_nation := 0 ;
61050: LD_ADDR_OWVAR 21
61054: PUSH
61055: LD_INT 0
61057: ST_TO_ADDR
// hc_class := class_horse ;
61058: LD_ADDR_OWVAR 28
61062: PUSH
61063: LD_INT 21
61065: ST_TO_ADDR
// hc_gallery :=  ;
61066: LD_ADDR_OWVAR 33
61070: PUSH
61071: LD_STRING 
61073: ST_TO_ADDR
// end ;
61074: LD_VAR 0 1
61078: RET
// export function PrepareMastodont ( ) ; begin
61079: LD_INT 0
61081: PPUSH
// uc_side := 0 ;
61082: LD_ADDR_OWVAR 20
61086: PUSH
61087: LD_INT 0
61089: ST_TO_ADDR
// uc_nation := 0 ;
61090: LD_ADDR_OWVAR 21
61094: PUSH
61095: LD_INT 0
61097: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61098: LD_ADDR_OWVAR 37
61102: PUSH
61103: LD_INT 31
61105: ST_TO_ADDR
// vc_control := control_rider ;
61106: LD_ADDR_OWVAR 38
61110: PUSH
61111: LD_INT 4
61113: ST_TO_ADDR
// end ;
61114: LD_VAR 0 1
61118: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61119: LD_INT 0
61121: PPUSH
61122: PPUSH
61123: PPUSH
// uc_side = 0 ;
61124: LD_ADDR_OWVAR 20
61128: PUSH
61129: LD_INT 0
61131: ST_TO_ADDR
// uc_nation = 0 ;
61132: LD_ADDR_OWVAR 21
61136: PUSH
61137: LD_INT 0
61139: ST_TO_ADDR
// InitHc_All ( ) ;
61140: CALL_OW 584
// InitVc ;
61144: CALL_OW 20
// if mastodonts then
61148: LD_VAR 0 6
61152: IFFALSE 61219
// for i = 1 to mastodonts do
61154: LD_ADDR_VAR 0 11
61158: PUSH
61159: DOUBLE
61160: LD_INT 1
61162: DEC
61163: ST_TO_ADDR
61164: LD_VAR 0 6
61168: PUSH
61169: FOR_TO
61170: IFFALSE 61217
// begin vc_chassis := 31 ;
61172: LD_ADDR_OWVAR 37
61176: PUSH
61177: LD_INT 31
61179: ST_TO_ADDR
// vc_control := control_rider ;
61180: LD_ADDR_OWVAR 38
61184: PUSH
61185: LD_INT 4
61187: ST_TO_ADDR
// animal := CreateVehicle ;
61188: LD_ADDR_VAR 0 12
61192: PUSH
61193: CALL_OW 45
61197: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61198: LD_VAR 0 12
61202: PPUSH
61203: LD_VAR 0 8
61207: PPUSH
61208: LD_INT 0
61210: PPUSH
61211: CALL 63354 0 3
// end ;
61215: GO 61169
61217: POP
61218: POP
// if horses then
61219: LD_VAR 0 5
61223: IFFALSE 61290
// for i = 1 to horses do
61225: LD_ADDR_VAR 0 11
61229: PUSH
61230: DOUBLE
61231: LD_INT 1
61233: DEC
61234: ST_TO_ADDR
61235: LD_VAR 0 5
61239: PUSH
61240: FOR_TO
61241: IFFALSE 61288
// begin hc_class := 21 ;
61243: LD_ADDR_OWVAR 28
61247: PUSH
61248: LD_INT 21
61250: ST_TO_ADDR
// hc_gallery :=  ;
61251: LD_ADDR_OWVAR 33
61255: PUSH
61256: LD_STRING 
61258: ST_TO_ADDR
// animal := CreateHuman ;
61259: LD_ADDR_VAR 0 12
61263: PUSH
61264: CALL_OW 44
61268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61269: LD_VAR 0 12
61273: PPUSH
61274: LD_VAR 0 8
61278: PPUSH
61279: LD_INT 0
61281: PPUSH
61282: CALL 63354 0 3
// end ;
61286: GO 61240
61288: POP
61289: POP
// if birds then
61290: LD_VAR 0 1
61294: IFFALSE 61361
// for i = 1 to birds do
61296: LD_ADDR_VAR 0 11
61300: PUSH
61301: DOUBLE
61302: LD_INT 1
61304: DEC
61305: ST_TO_ADDR
61306: LD_VAR 0 1
61310: PUSH
61311: FOR_TO
61312: IFFALSE 61359
// begin hc_class = 18 ;
61314: LD_ADDR_OWVAR 28
61318: PUSH
61319: LD_INT 18
61321: ST_TO_ADDR
// hc_gallery =  ;
61322: LD_ADDR_OWVAR 33
61326: PUSH
61327: LD_STRING 
61329: ST_TO_ADDR
// animal := CreateHuman ;
61330: LD_ADDR_VAR 0 12
61334: PUSH
61335: CALL_OW 44
61339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61340: LD_VAR 0 12
61344: PPUSH
61345: LD_VAR 0 8
61349: PPUSH
61350: LD_INT 0
61352: PPUSH
61353: CALL 63354 0 3
// end ;
61357: GO 61311
61359: POP
61360: POP
// if tigers then
61361: LD_VAR 0 2
61365: IFFALSE 61449
// for i = 1 to tigers do
61367: LD_ADDR_VAR 0 11
61371: PUSH
61372: DOUBLE
61373: LD_INT 1
61375: DEC
61376: ST_TO_ADDR
61377: LD_VAR 0 2
61381: PUSH
61382: FOR_TO
61383: IFFALSE 61447
// begin hc_class = class_tiger ;
61385: LD_ADDR_OWVAR 28
61389: PUSH
61390: LD_INT 14
61392: ST_TO_ADDR
// hc_gallery =  ;
61393: LD_ADDR_OWVAR 33
61397: PUSH
61398: LD_STRING 
61400: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61401: LD_ADDR_OWVAR 35
61405: PUSH
61406: LD_INT 7
61408: NEG
61409: PPUSH
61410: LD_INT 7
61412: PPUSH
61413: CALL_OW 12
61417: ST_TO_ADDR
// animal := CreateHuman ;
61418: LD_ADDR_VAR 0 12
61422: PUSH
61423: CALL_OW 44
61427: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61428: LD_VAR 0 12
61432: PPUSH
61433: LD_VAR 0 8
61437: PPUSH
61438: LD_INT 0
61440: PPUSH
61441: CALL 63354 0 3
// end ;
61445: GO 61382
61447: POP
61448: POP
// if apemans then
61449: LD_VAR 0 3
61453: IFFALSE 61576
// for i = 1 to apemans do
61455: LD_ADDR_VAR 0 11
61459: PUSH
61460: DOUBLE
61461: LD_INT 1
61463: DEC
61464: ST_TO_ADDR
61465: LD_VAR 0 3
61469: PUSH
61470: FOR_TO
61471: IFFALSE 61574
// begin hc_class = class_apeman ;
61473: LD_ADDR_OWVAR 28
61477: PUSH
61478: LD_INT 12
61480: ST_TO_ADDR
// hc_gallery =  ;
61481: LD_ADDR_OWVAR 33
61485: PUSH
61486: LD_STRING 
61488: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61489: LD_ADDR_OWVAR 35
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PPUSH
61498: LD_INT 2
61500: PPUSH
61501: CALL_OW 12
61505: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61506: LD_ADDR_OWVAR 31
61510: PUSH
61511: LD_INT 1
61513: PPUSH
61514: LD_INT 3
61516: PPUSH
61517: CALL_OW 12
61521: PUSH
61522: LD_INT 1
61524: PPUSH
61525: LD_INT 3
61527: PPUSH
61528: CALL_OW 12
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: ST_TO_ADDR
// animal := CreateHuman ;
61545: LD_ADDR_VAR 0 12
61549: PUSH
61550: CALL_OW 44
61554: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61555: LD_VAR 0 12
61559: PPUSH
61560: LD_VAR 0 8
61564: PPUSH
61565: LD_INT 0
61567: PPUSH
61568: CALL 63354 0 3
// end ;
61572: GO 61470
61574: POP
61575: POP
// if enchidnas then
61576: LD_VAR 0 4
61580: IFFALSE 61647
// for i = 1 to enchidnas do
61582: LD_ADDR_VAR 0 11
61586: PUSH
61587: DOUBLE
61588: LD_INT 1
61590: DEC
61591: ST_TO_ADDR
61592: LD_VAR 0 4
61596: PUSH
61597: FOR_TO
61598: IFFALSE 61645
// begin hc_class = 13 ;
61600: LD_ADDR_OWVAR 28
61604: PUSH
61605: LD_INT 13
61607: ST_TO_ADDR
// hc_gallery =  ;
61608: LD_ADDR_OWVAR 33
61612: PUSH
61613: LD_STRING 
61615: ST_TO_ADDR
// animal := CreateHuman ;
61616: LD_ADDR_VAR 0 12
61620: PUSH
61621: CALL_OW 44
61625: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61626: LD_VAR 0 12
61630: PPUSH
61631: LD_VAR 0 8
61635: PPUSH
61636: LD_INT 0
61638: PPUSH
61639: CALL 63354 0 3
// end ;
61643: GO 61597
61645: POP
61646: POP
// if fishes then
61647: LD_VAR 0 7
61651: IFFALSE 61718
// for i = 1 to fishes do
61653: LD_ADDR_VAR 0 11
61657: PUSH
61658: DOUBLE
61659: LD_INT 1
61661: DEC
61662: ST_TO_ADDR
61663: LD_VAR 0 7
61667: PUSH
61668: FOR_TO
61669: IFFALSE 61716
// begin hc_class = 20 ;
61671: LD_ADDR_OWVAR 28
61675: PUSH
61676: LD_INT 20
61678: ST_TO_ADDR
// hc_gallery =  ;
61679: LD_ADDR_OWVAR 33
61683: PUSH
61684: LD_STRING 
61686: ST_TO_ADDR
// animal := CreateHuman ;
61687: LD_ADDR_VAR 0 12
61691: PUSH
61692: CALL_OW 44
61696: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61697: LD_VAR 0 12
61701: PPUSH
61702: LD_VAR 0 9
61706: PPUSH
61707: LD_INT 0
61709: PPUSH
61710: CALL 63354 0 3
// end ;
61714: GO 61668
61716: POP
61717: POP
// end ;
61718: LD_VAR 0 10
61722: RET
// export function WantHeal ( sci , unit ) ; begin
61723: LD_INT 0
61725: PPUSH
// if GetTaskList ( sci ) > 0 then
61726: LD_VAR 0 1
61730: PPUSH
61731: CALL_OW 437
61735: PUSH
61736: LD_INT 0
61738: GREATER
61739: IFFALSE 61809
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61741: LD_VAR 0 1
61745: PPUSH
61746: CALL_OW 437
61750: PUSH
61751: LD_INT 1
61753: ARRAY
61754: PUSH
61755: LD_INT 1
61757: ARRAY
61758: PUSH
61759: LD_STRING l
61761: EQUAL
61762: PUSH
61763: LD_VAR 0 1
61767: PPUSH
61768: CALL_OW 437
61772: PUSH
61773: LD_INT 1
61775: ARRAY
61776: PUSH
61777: LD_INT 4
61779: ARRAY
61780: PUSH
61781: LD_VAR 0 2
61785: EQUAL
61786: AND
61787: IFFALSE 61799
// result := true else
61789: LD_ADDR_VAR 0 3
61793: PUSH
61794: LD_INT 1
61796: ST_TO_ADDR
61797: GO 61807
// result := false ;
61799: LD_ADDR_VAR 0 3
61803: PUSH
61804: LD_INT 0
61806: ST_TO_ADDR
// end else
61807: GO 61817
// result := false ;
61809: LD_ADDR_VAR 0 3
61813: PUSH
61814: LD_INT 0
61816: ST_TO_ADDR
// end ;
61817: LD_VAR 0 3
61821: RET
// export function HealTarget ( sci ) ; begin
61822: LD_INT 0
61824: PPUSH
// if not sci then
61825: LD_VAR 0 1
61829: NOT
61830: IFFALSE 61834
// exit ;
61832: GO 61899
// result := 0 ;
61834: LD_ADDR_VAR 0 2
61838: PUSH
61839: LD_INT 0
61841: ST_TO_ADDR
// if GetTaskList ( sci ) then
61842: LD_VAR 0 1
61846: PPUSH
61847: CALL_OW 437
61851: IFFALSE 61899
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61853: LD_VAR 0 1
61857: PPUSH
61858: CALL_OW 437
61862: PUSH
61863: LD_INT 1
61865: ARRAY
61866: PUSH
61867: LD_INT 1
61869: ARRAY
61870: PUSH
61871: LD_STRING l
61873: EQUAL
61874: IFFALSE 61899
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61876: LD_ADDR_VAR 0 2
61880: PUSH
61881: LD_VAR 0 1
61885: PPUSH
61886: CALL_OW 437
61890: PUSH
61891: LD_INT 1
61893: ARRAY
61894: PUSH
61895: LD_INT 4
61897: ARRAY
61898: ST_TO_ADDR
// end ;
61899: LD_VAR 0 2
61903: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61904: LD_INT 0
61906: PPUSH
61907: PPUSH
61908: PPUSH
61909: PPUSH
// if not base_units then
61910: LD_VAR 0 1
61914: NOT
61915: IFFALSE 61919
// exit ;
61917: GO 62006
// result := false ;
61919: LD_ADDR_VAR 0 2
61923: PUSH
61924: LD_INT 0
61926: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61927: LD_ADDR_VAR 0 5
61931: PUSH
61932: LD_VAR 0 1
61936: PPUSH
61937: LD_INT 21
61939: PUSH
61940: LD_INT 3
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PPUSH
61947: CALL_OW 72
61951: ST_TO_ADDR
// if not tmp then
61952: LD_VAR 0 5
61956: NOT
61957: IFFALSE 61961
// exit ;
61959: GO 62006
// for i in tmp do
61961: LD_ADDR_VAR 0 3
61965: PUSH
61966: LD_VAR 0 5
61970: PUSH
61971: FOR_IN
61972: IFFALSE 62004
// begin result := EnemyInRange ( i , 22 ) ;
61974: LD_ADDR_VAR 0 2
61978: PUSH
61979: LD_VAR 0 3
61983: PPUSH
61984: LD_INT 22
61986: PPUSH
61987: CALL 59619 0 2
61991: ST_TO_ADDR
// if result then
61992: LD_VAR 0 2
61996: IFFALSE 62002
// exit ;
61998: POP
61999: POP
62000: GO 62006
// end ;
62002: GO 61971
62004: POP
62005: POP
// end ;
62006: LD_VAR 0 2
62010: RET
// export function FilterByTag ( units , tag ) ; begin
62011: LD_INT 0
62013: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62014: LD_ADDR_VAR 0 3
62018: PUSH
62019: LD_VAR 0 1
62023: PPUSH
62024: LD_INT 120
62026: PUSH
62027: LD_VAR 0 2
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PPUSH
62036: CALL_OW 72
62040: ST_TO_ADDR
// end ;
62041: LD_VAR 0 3
62045: RET
// export function IsDriver ( un ) ; begin
62046: LD_INT 0
62048: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62049: LD_ADDR_VAR 0 2
62053: PUSH
62054: LD_VAR 0 1
62058: PUSH
62059: LD_INT 55
62061: PUSH
62062: EMPTY
62063: LIST
62064: PPUSH
62065: CALL_OW 69
62069: IN
62070: ST_TO_ADDR
// end ;
62071: LD_VAR 0 2
62075: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62076: LD_INT 0
62078: PPUSH
62079: PPUSH
// list := [ ] ;
62080: LD_ADDR_VAR 0 5
62084: PUSH
62085: EMPTY
62086: ST_TO_ADDR
// case d of 0 :
62087: LD_VAR 0 3
62091: PUSH
62092: LD_INT 0
62094: DOUBLE
62095: EQUAL
62096: IFTRUE 62100
62098: GO 62233
62100: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62101: LD_ADDR_VAR 0 5
62105: PUSH
62106: LD_VAR 0 1
62110: PUSH
62111: LD_INT 4
62113: MINUS
62114: PUSH
62115: LD_VAR 0 2
62119: PUSH
62120: LD_INT 4
62122: MINUS
62123: PUSH
62124: LD_INT 2
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: LIST
62131: PUSH
62132: LD_VAR 0 1
62136: PUSH
62137: LD_INT 3
62139: MINUS
62140: PUSH
62141: LD_VAR 0 2
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: LIST
62153: PUSH
62154: LD_VAR 0 1
62158: PUSH
62159: LD_INT 4
62161: PLUS
62162: PUSH
62163: LD_VAR 0 2
62167: PUSH
62168: LD_INT 4
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: PUSH
62176: LD_VAR 0 1
62180: PUSH
62181: LD_INT 3
62183: PLUS
62184: PUSH
62185: LD_VAR 0 2
62189: PUSH
62190: LD_INT 3
62192: PLUS
62193: PUSH
62194: LD_INT 5
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: LIST
62201: PUSH
62202: LD_VAR 0 1
62206: PUSH
62207: LD_VAR 0 2
62211: PUSH
62212: LD_INT 4
62214: PLUS
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: LIST
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: ST_TO_ADDR
// end ; 1 :
62231: GO 62931
62233: LD_INT 1
62235: DOUBLE
62236: EQUAL
62237: IFTRUE 62241
62239: GO 62374
62241: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62242: LD_ADDR_VAR 0 5
62246: PUSH
62247: LD_VAR 0 1
62251: PUSH
62252: LD_VAR 0 2
62256: PUSH
62257: LD_INT 4
62259: MINUS
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: LIST
62268: PUSH
62269: LD_VAR 0 1
62273: PUSH
62274: LD_INT 3
62276: MINUS
62277: PUSH
62278: LD_VAR 0 2
62282: PUSH
62283: LD_INT 3
62285: MINUS
62286: PUSH
62287: LD_INT 2
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: LIST
62294: PUSH
62295: LD_VAR 0 1
62299: PUSH
62300: LD_INT 4
62302: MINUS
62303: PUSH
62304: LD_VAR 0 2
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: LIST
62316: PUSH
62317: LD_VAR 0 1
62321: PUSH
62322: LD_VAR 0 2
62326: PUSH
62327: LD_INT 3
62329: PLUS
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: LIST
62338: PUSH
62339: LD_VAR 0 1
62343: PUSH
62344: LD_INT 4
62346: PLUS
62347: PUSH
62348: LD_VAR 0 2
62352: PUSH
62353: LD_INT 4
62355: PLUS
62356: PUSH
62357: LD_INT 5
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: LIST
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: ST_TO_ADDR
// end ; 2 :
62372: GO 62931
62374: LD_INT 2
62376: DOUBLE
62377: EQUAL
62378: IFTRUE 62382
62380: GO 62511
62382: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62383: LD_ADDR_VAR 0 5
62387: PUSH
62388: LD_VAR 0 1
62392: PUSH
62393: LD_VAR 0 2
62397: PUSH
62398: LD_INT 3
62400: MINUS
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: LIST
62409: PUSH
62410: LD_VAR 0 1
62414: PUSH
62415: LD_INT 4
62417: PLUS
62418: PUSH
62419: LD_VAR 0 2
62423: PUSH
62424: LD_INT 4
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: PUSH
62432: LD_VAR 0 1
62436: PUSH
62437: LD_VAR 0 2
62441: PUSH
62442: LD_INT 4
62444: PLUS
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: LIST
62453: PUSH
62454: LD_VAR 0 1
62458: PUSH
62459: LD_INT 3
62461: MINUS
62462: PUSH
62463: LD_VAR 0 2
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: PUSH
62476: LD_VAR 0 1
62480: PUSH
62481: LD_INT 4
62483: MINUS
62484: PUSH
62485: LD_VAR 0 2
62489: PUSH
62490: LD_INT 4
62492: MINUS
62493: PUSH
62494: LD_INT 2
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: LIST
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: ST_TO_ADDR
// end ; 3 :
62509: GO 62931
62511: LD_INT 3
62513: DOUBLE
62514: EQUAL
62515: IFTRUE 62519
62517: GO 62652
62519: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62520: LD_ADDR_VAR 0 5
62524: PUSH
62525: LD_VAR 0 1
62529: PUSH
62530: LD_INT 3
62532: PLUS
62533: PUSH
62534: LD_VAR 0 2
62538: PUSH
62539: LD_INT 4
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: LIST
62546: PUSH
62547: LD_VAR 0 1
62551: PUSH
62552: LD_INT 4
62554: PLUS
62555: PUSH
62556: LD_VAR 0 2
62560: PUSH
62561: LD_INT 4
62563: PLUS
62564: PUSH
62565: LD_INT 5
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: LIST
62572: PUSH
62573: LD_VAR 0 1
62577: PUSH
62578: LD_INT 4
62580: MINUS
62581: PUSH
62582: LD_VAR 0 2
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: LIST
62594: PUSH
62595: LD_VAR 0 1
62599: PUSH
62600: LD_VAR 0 2
62604: PUSH
62605: LD_INT 4
62607: MINUS
62608: PUSH
62609: LD_INT 3
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: PUSH
62617: LD_VAR 0 1
62621: PUSH
62622: LD_INT 3
62624: MINUS
62625: PUSH
62626: LD_VAR 0 2
62630: PUSH
62631: LD_INT 3
62633: MINUS
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: LIST
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: ST_TO_ADDR
// end ; 4 :
62650: GO 62931
62652: LD_INT 4
62654: DOUBLE
62655: EQUAL
62656: IFTRUE 62660
62658: GO 62793
62660: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62661: LD_ADDR_VAR 0 5
62665: PUSH
62666: LD_VAR 0 1
62670: PUSH
62671: LD_VAR 0 2
62675: PUSH
62676: LD_INT 4
62678: PLUS
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: LIST
62687: PUSH
62688: LD_VAR 0 1
62692: PUSH
62693: LD_INT 3
62695: PLUS
62696: PUSH
62697: LD_VAR 0 2
62701: PUSH
62702: LD_INT 3
62704: PLUS
62705: PUSH
62706: LD_INT 5
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: LIST
62713: PUSH
62714: LD_VAR 0 1
62718: PUSH
62719: LD_INT 4
62721: PLUS
62722: PUSH
62723: LD_VAR 0 2
62727: PUSH
62728: LD_INT 4
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: LIST
62735: PUSH
62736: LD_VAR 0 1
62740: PUSH
62741: LD_VAR 0 2
62745: PUSH
62746: LD_INT 3
62748: MINUS
62749: PUSH
62750: LD_INT 3
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: LIST
62757: PUSH
62758: LD_VAR 0 1
62762: PUSH
62763: LD_INT 4
62765: MINUS
62766: PUSH
62767: LD_VAR 0 2
62771: PUSH
62772: LD_INT 4
62774: MINUS
62775: PUSH
62776: LD_INT 2
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: ST_TO_ADDR
// end ; 5 :
62791: GO 62931
62793: LD_INT 5
62795: DOUBLE
62796: EQUAL
62797: IFTRUE 62801
62799: GO 62930
62801: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62802: LD_ADDR_VAR 0 5
62806: PUSH
62807: LD_VAR 0 1
62811: PUSH
62812: LD_INT 4
62814: MINUS
62815: PUSH
62816: LD_VAR 0 2
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: LIST
62828: PUSH
62829: LD_VAR 0 1
62833: PUSH
62834: LD_VAR 0 2
62838: PUSH
62839: LD_INT 4
62841: MINUS
62842: PUSH
62843: LD_INT 3
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: LIST
62850: PUSH
62851: LD_VAR 0 1
62855: PUSH
62856: LD_INT 4
62858: PLUS
62859: PUSH
62860: LD_VAR 0 2
62864: PUSH
62865: LD_INT 4
62867: PLUS
62868: PUSH
62869: LD_INT 5
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: LIST
62876: PUSH
62877: LD_VAR 0 1
62881: PUSH
62882: LD_INT 3
62884: PLUS
62885: PUSH
62886: LD_VAR 0 2
62890: PUSH
62891: LD_INT 4
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: LIST
62898: PUSH
62899: LD_VAR 0 1
62903: PUSH
62904: LD_VAR 0 2
62908: PUSH
62909: LD_INT 3
62911: PLUS
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: LIST
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: ST_TO_ADDR
// end ; end ;
62928: GO 62931
62930: POP
// result := list ;
62931: LD_ADDR_VAR 0 4
62935: PUSH
62936: LD_VAR 0 5
62940: ST_TO_ADDR
// end ;
62941: LD_VAR 0 4
62945: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62946: LD_INT 0
62948: PPUSH
62949: PPUSH
62950: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62951: LD_VAR 0 1
62955: NOT
62956: PUSH
62957: LD_VAR 0 2
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: LD_INT 2
62967: PUSH
62968: LD_INT 3
62970: PUSH
62971: LD_INT 4
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: IN
62980: NOT
62981: OR
62982: IFFALSE 62986
// exit ;
62984: GO 63078
// tmp := [ ] ;
62986: LD_ADDR_VAR 0 5
62990: PUSH
62991: EMPTY
62992: ST_TO_ADDR
// for i in units do
62993: LD_ADDR_VAR 0 4
62997: PUSH
62998: LD_VAR 0 1
63002: PUSH
63003: FOR_IN
63004: IFFALSE 63047
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63006: LD_ADDR_VAR 0 5
63010: PUSH
63011: LD_VAR 0 5
63015: PPUSH
63016: LD_VAR 0 5
63020: PUSH
63021: LD_INT 1
63023: PLUS
63024: PPUSH
63025: LD_VAR 0 4
63029: PPUSH
63030: LD_VAR 0 2
63034: PPUSH
63035: CALL_OW 259
63039: PPUSH
63040: CALL_OW 2
63044: ST_TO_ADDR
63045: GO 63003
63047: POP
63048: POP
// if not tmp then
63049: LD_VAR 0 5
63053: NOT
63054: IFFALSE 63058
// exit ;
63056: GO 63078
// result := SortListByListDesc ( units , tmp ) ;
63058: LD_ADDR_VAR 0 3
63062: PUSH
63063: LD_VAR 0 1
63067: PPUSH
63068: LD_VAR 0 5
63072: PPUSH
63073: CALL_OW 77
63077: ST_TO_ADDR
// end ;
63078: LD_VAR 0 3
63082: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63083: LD_INT 0
63085: PPUSH
63086: PPUSH
63087: PPUSH
// result := false ;
63088: LD_ADDR_VAR 0 3
63092: PUSH
63093: LD_INT 0
63095: ST_TO_ADDR
// x := GetX ( building ) ;
63096: LD_ADDR_VAR 0 4
63100: PUSH
63101: LD_VAR 0 2
63105: PPUSH
63106: CALL_OW 250
63110: ST_TO_ADDR
// y := GetY ( building ) ;
63111: LD_ADDR_VAR 0 5
63115: PUSH
63116: LD_VAR 0 2
63120: PPUSH
63121: CALL_OW 251
63125: ST_TO_ADDR
// if not building or not x or not y then
63126: LD_VAR 0 2
63130: NOT
63131: PUSH
63132: LD_VAR 0 4
63136: NOT
63137: OR
63138: PUSH
63139: LD_VAR 0 5
63143: NOT
63144: OR
63145: IFFALSE 63149
// exit ;
63147: GO 63241
// if GetTaskList ( unit ) then
63149: LD_VAR 0 1
63153: PPUSH
63154: CALL_OW 437
63158: IFFALSE 63241
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63160: LD_STRING e
63162: PUSH
63163: LD_VAR 0 1
63167: PPUSH
63168: CALL_OW 437
63172: PUSH
63173: LD_INT 1
63175: ARRAY
63176: PUSH
63177: LD_INT 1
63179: ARRAY
63180: EQUAL
63181: PUSH
63182: LD_VAR 0 4
63186: PUSH
63187: LD_VAR 0 1
63191: PPUSH
63192: CALL_OW 437
63196: PUSH
63197: LD_INT 1
63199: ARRAY
63200: PUSH
63201: LD_INT 2
63203: ARRAY
63204: EQUAL
63205: AND
63206: PUSH
63207: LD_VAR 0 5
63211: PUSH
63212: LD_VAR 0 1
63216: PPUSH
63217: CALL_OW 437
63221: PUSH
63222: LD_INT 1
63224: ARRAY
63225: PUSH
63226: LD_INT 3
63228: ARRAY
63229: EQUAL
63230: AND
63231: IFFALSE 63241
// result := true end ;
63233: LD_ADDR_VAR 0 3
63237: PUSH
63238: LD_INT 1
63240: ST_TO_ADDR
// end ;
63241: LD_VAR 0 3
63245: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63246: LD_INT 0
63248: PPUSH
// result := false ;
63249: LD_ADDR_VAR 0 4
63253: PUSH
63254: LD_INT 0
63256: ST_TO_ADDR
// if GetTaskList ( unit ) then
63257: LD_VAR 0 1
63261: PPUSH
63262: CALL_OW 437
63266: IFFALSE 63349
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63268: LD_STRING M
63270: PUSH
63271: LD_VAR 0 1
63275: PPUSH
63276: CALL_OW 437
63280: PUSH
63281: LD_INT 1
63283: ARRAY
63284: PUSH
63285: LD_INT 1
63287: ARRAY
63288: EQUAL
63289: PUSH
63290: LD_VAR 0 2
63294: PUSH
63295: LD_VAR 0 1
63299: PPUSH
63300: CALL_OW 437
63304: PUSH
63305: LD_INT 1
63307: ARRAY
63308: PUSH
63309: LD_INT 2
63311: ARRAY
63312: EQUAL
63313: AND
63314: PUSH
63315: LD_VAR 0 3
63319: PUSH
63320: LD_VAR 0 1
63324: PPUSH
63325: CALL_OW 437
63329: PUSH
63330: LD_INT 1
63332: ARRAY
63333: PUSH
63334: LD_INT 3
63336: ARRAY
63337: EQUAL
63338: AND
63339: IFFALSE 63349
// result := true ;
63341: LD_ADDR_VAR 0 4
63345: PUSH
63346: LD_INT 1
63348: ST_TO_ADDR
// end ; end ;
63349: LD_VAR 0 4
63353: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63354: LD_INT 0
63356: PPUSH
63357: PPUSH
63358: PPUSH
63359: PPUSH
// if not unit or not area then
63360: LD_VAR 0 1
63364: NOT
63365: PUSH
63366: LD_VAR 0 2
63370: NOT
63371: OR
63372: IFFALSE 63376
// exit ;
63374: GO 63540
// tmp := AreaToList ( area , i ) ;
63376: LD_ADDR_VAR 0 6
63380: PUSH
63381: LD_VAR 0 2
63385: PPUSH
63386: LD_VAR 0 5
63390: PPUSH
63391: CALL_OW 517
63395: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63396: LD_ADDR_VAR 0 5
63400: PUSH
63401: DOUBLE
63402: LD_INT 1
63404: DEC
63405: ST_TO_ADDR
63406: LD_VAR 0 6
63410: PUSH
63411: LD_INT 1
63413: ARRAY
63414: PUSH
63415: FOR_TO
63416: IFFALSE 63538
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63418: LD_ADDR_VAR 0 7
63422: PUSH
63423: LD_VAR 0 6
63427: PUSH
63428: LD_INT 1
63430: ARRAY
63431: PUSH
63432: LD_VAR 0 5
63436: ARRAY
63437: PUSH
63438: LD_VAR 0 6
63442: PUSH
63443: LD_INT 2
63445: ARRAY
63446: PUSH
63447: LD_VAR 0 5
63451: ARRAY
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63457: LD_VAR 0 7
63461: PUSH
63462: LD_INT 1
63464: ARRAY
63465: PPUSH
63466: LD_VAR 0 7
63470: PUSH
63471: LD_INT 2
63473: ARRAY
63474: PPUSH
63475: CALL_OW 428
63479: PUSH
63480: LD_INT 0
63482: EQUAL
63483: IFFALSE 63536
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63485: LD_VAR 0 1
63489: PPUSH
63490: LD_VAR 0 7
63494: PUSH
63495: LD_INT 1
63497: ARRAY
63498: PPUSH
63499: LD_VAR 0 7
63503: PUSH
63504: LD_INT 2
63506: ARRAY
63507: PPUSH
63508: LD_VAR 0 3
63512: PPUSH
63513: CALL_OW 48
// result := IsPlaced ( unit ) ;
63517: LD_ADDR_VAR 0 4
63521: PUSH
63522: LD_VAR 0 1
63526: PPUSH
63527: CALL_OW 305
63531: ST_TO_ADDR
// exit ;
63532: POP
63533: POP
63534: GO 63540
// end ; end ;
63536: GO 63415
63538: POP
63539: POP
// end ;
63540: LD_VAR 0 4
63544: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63545: LD_INT 0
63547: PPUSH
63548: PPUSH
63549: PPUSH
// if not side or side > 8 then
63550: LD_VAR 0 1
63554: NOT
63555: PUSH
63556: LD_VAR 0 1
63560: PUSH
63561: LD_INT 8
63563: GREATER
63564: OR
63565: IFFALSE 63569
// exit ;
63567: GO 63756
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63569: LD_ADDR_VAR 0 4
63573: PUSH
63574: LD_INT 22
63576: PUSH
63577: LD_VAR 0 1
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 21
63588: PUSH
63589: LD_INT 3
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PPUSH
63600: CALL_OW 69
63604: ST_TO_ADDR
// if not tmp then
63605: LD_VAR 0 4
63609: NOT
63610: IFFALSE 63614
// exit ;
63612: GO 63756
// enable_addtolog := true ;
63614: LD_ADDR_OWVAR 81
63618: PUSH
63619: LD_INT 1
63621: ST_TO_ADDR
// AddToLog ( [ ) ;
63622: LD_STRING [
63624: PPUSH
63625: CALL_OW 561
// for i in tmp do
63629: LD_ADDR_VAR 0 3
63633: PUSH
63634: LD_VAR 0 4
63638: PUSH
63639: FOR_IN
63640: IFFALSE 63747
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63642: LD_STRING [
63644: PUSH
63645: LD_VAR 0 3
63649: PPUSH
63650: CALL_OW 266
63654: STR
63655: PUSH
63656: LD_STRING , 
63658: STR
63659: PUSH
63660: LD_VAR 0 3
63664: PPUSH
63665: CALL_OW 250
63669: STR
63670: PUSH
63671: LD_STRING , 
63673: STR
63674: PUSH
63675: LD_VAR 0 3
63679: PPUSH
63680: CALL_OW 251
63684: STR
63685: PUSH
63686: LD_STRING , 
63688: STR
63689: PUSH
63690: LD_VAR 0 3
63694: PPUSH
63695: CALL_OW 254
63699: STR
63700: PUSH
63701: LD_STRING , 
63703: STR
63704: PUSH
63705: LD_VAR 0 3
63709: PPUSH
63710: LD_INT 1
63712: PPUSH
63713: CALL_OW 268
63717: STR
63718: PUSH
63719: LD_STRING , 
63721: STR
63722: PUSH
63723: LD_VAR 0 3
63727: PPUSH
63728: LD_INT 2
63730: PPUSH
63731: CALL_OW 268
63735: STR
63736: PUSH
63737: LD_STRING ],
63739: STR
63740: PPUSH
63741: CALL_OW 561
// end ;
63745: GO 63639
63747: POP
63748: POP
// AddToLog ( ]; ) ;
63749: LD_STRING ];
63751: PPUSH
63752: CALL_OW 561
// end ;
63756: LD_VAR 0 2
63760: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63761: LD_INT 0
63763: PPUSH
63764: PPUSH
63765: PPUSH
63766: PPUSH
63767: PPUSH
// if not area or not rate or not max then
63768: LD_VAR 0 1
63772: NOT
63773: PUSH
63774: LD_VAR 0 2
63778: NOT
63779: OR
63780: PUSH
63781: LD_VAR 0 4
63785: NOT
63786: OR
63787: IFFALSE 63791
// exit ;
63789: GO 63980
// while 1 do
63791: LD_INT 1
63793: IFFALSE 63980
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63795: LD_ADDR_VAR 0 9
63799: PUSH
63800: LD_VAR 0 1
63804: PPUSH
63805: LD_INT 1
63807: PPUSH
63808: CALL_OW 287
63812: PUSH
63813: LD_INT 10
63815: MUL
63816: ST_TO_ADDR
// r := rate / 10 ;
63817: LD_ADDR_VAR 0 7
63821: PUSH
63822: LD_VAR 0 2
63826: PUSH
63827: LD_INT 10
63829: DIVREAL
63830: ST_TO_ADDR
// time := 1 1$00 ;
63831: LD_ADDR_VAR 0 8
63835: PUSH
63836: LD_INT 2100
63838: ST_TO_ADDR
// if amount < min then
63839: LD_VAR 0 9
63843: PUSH
63844: LD_VAR 0 3
63848: LESS
63849: IFFALSE 63867
// r := r * 2 else
63851: LD_ADDR_VAR 0 7
63855: PUSH
63856: LD_VAR 0 7
63860: PUSH
63861: LD_INT 2
63863: MUL
63864: ST_TO_ADDR
63865: GO 63893
// if amount > max then
63867: LD_VAR 0 9
63871: PUSH
63872: LD_VAR 0 4
63876: GREATER
63877: IFFALSE 63893
// r := r / 2 ;
63879: LD_ADDR_VAR 0 7
63883: PUSH
63884: LD_VAR 0 7
63888: PUSH
63889: LD_INT 2
63891: DIVREAL
63892: ST_TO_ADDR
// time := time / r ;
63893: LD_ADDR_VAR 0 8
63897: PUSH
63898: LD_VAR 0 8
63902: PUSH
63903: LD_VAR 0 7
63907: DIVREAL
63908: ST_TO_ADDR
// if time < 0 then
63909: LD_VAR 0 8
63913: PUSH
63914: LD_INT 0
63916: LESS
63917: IFFALSE 63934
// time := time * - 1 ;
63919: LD_ADDR_VAR 0 8
63923: PUSH
63924: LD_VAR 0 8
63928: PUSH
63929: LD_INT 1
63931: NEG
63932: MUL
63933: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63934: LD_VAR 0 8
63938: PUSH
63939: LD_INT 35
63941: PPUSH
63942: LD_INT 875
63944: PPUSH
63945: CALL_OW 12
63949: PLUS
63950: PPUSH
63951: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63955: LD_INT 1
63957: PPUSH
63958: LD_INT 5
63960: PPUSH
63961: CALL_OW 12
63965: PPUSH
63966: LD_VAR 0 1
63970: PPUSH
63971: LD_INT 1
63973: PPUSH
63974: CALL_OW 55
// end ;
63978: GO 63791
// end ;
63980: LD_VAR 0 5
63984: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63985: LD_INT 0
63987: PPUSH
63988: PPUSH
63989: PPUSH
63990: PPUSH
63991: PPUSH
63992: PPUSH
63993: PPUSH
63994: PPUSH
// if not turrets or not factories then
63995: LD_VAR 0 1
63999: NOT
64000: PUSH
64001: LD_VAR 0 2
64005: NOT
64006: OR
64007: IFFALSE 64011
// exit ;
64009: GO 64318
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64011: LD_ADDR_VAR 0 10
64015: PUSH
64016: LD_INT 5
64018: PUSH
64019: LD_INT 6
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 2
64028: PUSH
64029: LD_INT 4
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 3
64038: PUSH
64039: LD_INT 5
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 24
64053: PUSH
64054: LD_INT 25
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 23
64063: PUSH
64064: LD_INT 27
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 42
64077: PUSH
64078: LD_INT 43
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 44
64087: PUSH
64088: LD_INT 46
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 45
64097: PUSH
64098: LD_INT 47
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: LIST
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: ST_TO_ADDR
// result := [ ] ;
64115: LD_ADDR_VAR 0 3
64119: PUSH
64120: EMPTY
64121: ST_TO_ADDR
// for i in turrets do
64122: LD_ADDR_VAR 0 4
64126: PUSH
64127: LD_VAR 0 1
64131: PUSH
64132: FOR_IN
64133: IFFALSE 64316
// begin nat := GetNation ( i ) ;
64135: LD_ADDR_VAR 0 7
64139: PUSH
64140: LD_VAR 0 4
64144: PPUSH
64145: CALL_OW 248
64149: ST_TO_ADDR
// weapon := 0 ;
64150: LD_ADDR_VAR 0 8
64154: PUSH
64155: LD_INT 0
64157: ST_TO_ADDR
// if not nat then
64158: LD_VAR 0 7
64162: NOT
64163: IFFALSE 64167
// continue ;
64165: GO 64132
// for j in list [ nat ] do
64167: LD_ADDR_VAR 0 5
64171: PUSH
64172: LD_VAR 0 10
64176: PUSH
64177: LD_VAR 0 7
64181: ARRAY
64182: PUSH
64183: FOR_IN
64184: IFFALSE 64225
// if GetBWeapon ( i ) = j [ 1 ] then
64186: LD_VAR 0 4
64190: PPUSH
64191: CALL_OW 269
64195: PUSH
64196: LD_VAR 0 5
64200: PUSH
64201: LD_INT 1
64203: ARRAY
64204: EQUAL
64205: IFFALSE 64223
// begin weapon := j [ 2 ] ;
64207: LD_ADDR_VAR 0 8
64211: PUSH
64212: LD_VAR 0 5
64216: PUSH
64217: LD_INT 2
64219: ARRAY
64220: ST_TO_ADDR
// break ;
64221: GO 64225
// end ;
64223: GO 64183
64225: POP
64226: POP
// if not weapon then
64227: LD_VAR 0 8
64231: NOT
64232: IFFALSE 64236
// continue ;
64234: GO 64132
// for k in factories do
64236: LD_ADDR_VAR 0 6
64240: PUSH
64241: LD_VAR 0 2
64245: PUSH
64246: FOR_IN
64247: IFFALSE 64312
// begin weapons := AvailableWeaponList ( k ) ;
64249: LD_ADDR_VAR 0 9
64253: PUSH
64254: LD_VAR 0 6
64258: PPUSH
64259: CALL_OW 478
64263: ST_TO_ADDR
// if not weapons then
64264: LD_VAR 0 9
64268: NOT
64269: IFFALSE 64273
// continue ;
64271: GO 64246
// if weapon in weapons then
64273: LD_VAR 0 8
64277: PUSH
64278: LD_VAR 0 9
64282: IN
64283: IFFALSE 64310
// begin result := [ i , weapon ] ;
64285: LD_ADDR_VAR 0 3
64289: PUSH
64290: LD_VAR 0 4
64294: PUSH
64295: LD_VAR 0 8
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: ST_TO_ADDR
// exit ;
64304: POP
64305: POP
64306: POP
64307: POP
64308: GO 64318
// end ; end ;
64310: GO 64246
64312: POP
64313: POP
// end ;
64314: GO 64132
64316: POP
64317: POP
// end ;
64318: LD_VAR 0 3
64322: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64323: LD_INT 0
64325: PPUSH
// if not side or side > 8 then
64326: LD_VAR 0 3
64330: NOT
64331: PUSH
64332: LD_VAR 0 3
64336: PUSH
64337: LD_INT 8
64339: GREATER
64340: OR
64341: IFFALSE 64345
// exit ;
64343: GO 64404
// if not range then
64345: LD_VAR 0 4
64349: NOT
64350: IFFALSE 64361
// range := - 12 ;
64352: LD_ADDR_VAR 0 4
64356: PUSH
64357: LD_INT 12
64359: NEG
64360: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64361: LD_VAR 0 1
64365: PPUSH
64366: LD_VAR 0 2
64370: PPUSH
64371: LD_VAR 0 3
64375: PPUSH
64376: LD_VAR 0 4
64380: PPUSH
64381: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64385: LD_VAR 0 1
64389: PPUSH
64390: LD_VAR 0 2
64394: PPUSH
64395: LD_VAR 0 3
64399: PPUSH
64400: CALL_OW 331
// end ;
64404: LD_VAR 0 5
64408: RET
// export function Video ( mode ) ; begin
64409: LD_INT 0
64411: PPUSH
// ingame_video = mode ;
64412: LD_ADDR_OWVAR 52
64416: PUSH
64417: LD_VAR 0 1
64421: ST_TO_ADDR
// interface_hidden = mode ;
64422: LD_ADDR_OWVAR 54
64426: PUSH
64427: LD_VAR 0 1
64431: ST_TO_ADDR
// end ;
64432: LD_VAR 0 2
64436: RET
// export function Join ( array , element ) ; begin
64437: LD_INT 0
64439: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64440: LD_ADDR_VAR 0 3
64444: PUSH
64445: LD_VAR 0 1
64449: PPUSH
64450: LD_VAR 0 1
64454: PUSH
64455: LD_INT 1
64457: PLUS
64458: PPUSH
64459: LD_VAR 0 2
64463: PPUSH
64464: CALL_OW 1
64468: ST_TO_ADDR
// end ;
64469: LD_VAR 0 3
64473: RET
// export function JoinUnion ( array , element ) ; begin
64474: LD_INT 0
64476: PPUSH
// result := array union element ;
64477: LD_ADDR_VAR 0 3
64481: PUSH
64482: LD_VAR 0 1
64486: PUSH
64487: LD_VAR 0 2
64491: UNION
64492: ST_TO_ADDR
// end ;
64493: LD_VAR 0 3
64497: RET
// export function GetBehemoths ( side ) ; begin
64498: LD_INT 0
64500: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64501: LD_ADDR_VAR 0 2
64505: PUSH
64506: LD_INT 22
64508: PUSH
64509: LD_VAR 0 1
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 31
64520: PUSH
64521: LD_INT 25
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PPUSH
64532: CALL_OW 69
64536: ST_TO_ADDR
// end ;
64537: LD_VAR 0 2
64541: RET
// export function Shuffle ( array ) ; var i , index ; begin
64542: LD_INT 0
64544: PPUSH
64545: PPUSH
64546: PPUSH
// result := [ ] ;
64547: LD_ADDR_VAR 0 2
64551: PUSH
64552: EMPTY
64553: ST_TO_ADDR
// if not array then
64554: LD_VAR 0 1
64558: NOT
64559: IFFALSE 64563
// exit ;
64561: GO 64662
// Randomize ;
64563: CALL_OW 10
// for i = array downto 1 do
64567: LD_ADDR_VAR 0 3
64571: PUSH
64572: DOUBLE
64573: LD_VAR 0 1
64577: INC
64578: ST_TO_ADDR
64579: LD_INT 1
64581: PUSH
64582: FOR_DOWNTO
64583: IFFALSE 64660
// begin index := rand ( 1 , array ) ;
64585: LD_ADDR_VAR 0 4
64589: PUSH
64590: LD_INT 1
64592: PPUSH
64593: LD_VAR 0 1
64597: PPUSH
64598: CALL_OW 12
64602: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64603: LD_ADDR_VAR 0 2
64607: PUSH
64608: LD_VAR 0 2
64612: PPUSH
64613: LD_VAR 0 2
64617: PUSH
64618: LD_INT 1
64620: PLUS
64621: PPUSH
64622: LD_VAR 0 1
64626: PUSH
64627: LD_VAR 0 4
64631: ARRAY
64632: PPUSH
64633: CALL_OW 2
64637: ST_TO_ADDR
// array := Delete ( array , index ) ;
64638: LD_ADDR_VAR 0 1
64642: PUSH
64643: LD_VAR 0 1
64647: PPUSH
64648: LD_VAR 0 4
64652: PPUSH
64653: CALL_OW 3
64657: ST_TO_ADDR
// end ;
64658: GO 64582
64660: POP
64661: POP
// end ;
64662: LD_VAR 0 2
64666: RET
// export function GetBaseMaterials ( base ) ; begin
64667: LD_INT 0
64669: PPUSH
// result := [ 0 , 0 , 0 ] ;
64670: LD_ADDR_VAR 0 2
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: LIST
64688: ST_TO_ADDR
// if not base then
64689: LD_VAR 0 1
64693: NOT
64694: IFFALSE 64698
// exit ;
64696: GO 64747
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64698: LD_ADDR_VAR 0 2
64702: PUSH
64703: LD_VAR 0 1
64707: PPUSH
64708: LD_INT 1
64710: PPUSH
64711: CALL_OW 275
64715: PUSH
64716: LD_VAR 0 1
64720: PPUSH
64721: LD_INT 2
64723: PPUSH
64724: CALL_OW 275
64728: PUSH
64729: LD_VAR 0 1
64733: PPUSH
64734: LD_INT 3
64736: PPUSH
64737: CALL_OW 275
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: LIST
64746: ST_TO_ADDR
// end ;
64747: LD_VAR 0 2
64751: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64752: LD_INT 0
64754: PPUSH
64755: PPUSH
// result := array ;
64756: LD_ADDR_VAR 0 3
64760: PUSH
64761: LD_VAR 0 1
64765: ST_TO_ADDR
// if size >= result then
64766: LD_VAR 0 2
64770: PUSH
64771: LD_VAR 0 3
64775: GREATEREQUAL
64776: IFFALSE 64780
// exit ;
64778: GO 64830
// if size then
64780: LD_VAR 0 2
64784: IFFALSE 64830
// for i := array downto size do
64786: LD_ADDR_VAR 0 4
64790: PUSH
64791: DOUBLE
64792: LD_VAR 0 1
64796: INC
64797: ST_TO_ADDR
64798: LD_VAR 0 2
64802: PUSH
64803: FOR_DOWNTO
64804: IFFALSE 64828
// result := Delete ( result , result ) ;
64806: LD_ADDR_VAR 0 3
64810: PUSH
64811: LD_VAR 0 3
64815: PPUSH
64816: LD_VAR 0 3
64820: PPUSH
64821: CALL_OW 3
64825: ST_TO_ADDR
64826: GO 64803
64828: POP
64829: POP
// end ;
64830: LD_VAR 0 3
64834: RET
// export function ComExit ( unit ) ; var tmp ; begin
64835: LD_INT 0
64837: PPUSH
64838: PPUSH
// if not IsInUnit ( unit ) then
64839: LD_VAR 0 1
64843: PPUSH
64844: CALL_OW 310
64848: NOT
64849: IFFALSE 64853
// exit ;
64851: GO 64913
// tmp := IsInUnit ( unit ) ;
64853: LD_ADDR_VAR 0 3
64857: PUSH
64858: LD_VAR 0 1
64862: PPUSH
64863: CALL_OW 310
64867: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64868: LD_VAR 0 3
64872: PPUSH
64873: CALL_OW 247
64877: PUSH
64878: LD_INT 2
64880: EQUAL
64881: IFFALSE 64894
// ComExitVehicle ( unit ) else
64883: LD_VAR 0 1
64887: PPUSH
64888: CALL_OW 121
64892: GO 64903
// ComExitBuilding ( unit ) ;
64894: LD_VAR 0 1
64898: PPUSH
64899: CALL_OW 122
// result := tmp ;
64903: LD_ADDR_VAR 0 2
64907: PUSH
64908: LD_VAR 0 3
64912: ST_TO_ADDR
// end ;
64913: LD_VAR 0 2
64917: RET
// export function ComExitAll ( units ) ; var i ; begin
64918: LD_INT 0
64920: PPUSH
64921: PPUSH
// if not units then
64922: LD_VAR 0 1
64926: NOT
64927: IFFALSE 64931
// exit ;
64929: GO 64957
// for i in units do
64931: LD_ADDR_VAR 0 3
64935: PUSH
64936: LD_VAR 0 1
64940: PUSH
64941: FOR_IN
64942: IFFALSE 64955
// ComExit ( i ) ;
64944: LD_VAR 0 3
64948: PPUSH
64949: CALL 64835 0 1
64953: GO 64941
64955: POP
64956: POP
// end ;
64957: LD_VAR 0 2
64961: RET
// export function ResetHc ; begin
64962: LD_INT 0
64964: PPUSH
// InitHc ;
64965: CALL_OW 19
// hc_importance := 0 ;
64969: LD_ADDR_OWVAR 32
64973: PUSH
64974: LD_INT 0
64976: ST_TO_ADDR
// end ;
64977: LD_VAR 0 1
64981: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64982: LD_INT 0
64984: PPUSH
64985: PPUSH
64986: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64987: LD_ADDR_VAR 0 6
64991: PUSH
64992: LD_VAR 0 1
64996: PUSH
64997: LD_VAR 0 3
65001: PLUS
65002: PUSH
65003: LD_INT 2
65005: DIV
65006: ST_TO_ADDR
// if _x < 0 then
65007: LD_VAR 0 6
65011: PUSH
65012: LD_INT 0
65014: LESS
65015: IFFALSE 65032
// _x := _x * - 1 ;
65017: LD_ADDR_VAR 0 6
65021: PUSH
65022: LD_VAR 0 6
65026: PUSH
65027: LD_INT 1
65029: NEG
65030: MUL
65031: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65032: LD_ADDR_VAR 0 7
65036: PUSH
65037: LD_VAR 0 2
65041: PUSH
65042: LD_VAR 0 4
65046: PLUS
65047: PUSH
65048: LD_INT 2
65050: DIV
65051: ST_TO_ADDR
// if _y < 0 then
65052: LD_VAR 0 7
65056: PUSH
65057: LD_INT 0
65059: LESS
65060: IFFALSE 65077
// _y := _y * - 1 ;
65062: LD_ADDR_VAR 0 7
65066: PUSH
65067: LD_VAR 0 7
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: MUL
65076: ST_TO_ADDR
// result := [ _x , _y ] ;
65077: LD_ADDR_VAR 0 5
65081: PUSH
65082: LD_VAR 0 6
65086: PUSH
65087: LD_VAR 0 7
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: ST_TO_ADDR
// end ;
65096: LD_VAR 0 5
65100: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65101: LD_INT 0
65103: PPUSH
65104: PPUSH
65105: PPUSH
65106: PPUSH
// task := GetTaskList ( unit ) ;
65107: LD_ADDR_VAR 0 7
65111: PUSH
65112: LD_VAR 0 1
65116: PPUSH
65117: CALL_OW 437
65121: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65122: LD_VAR 0 7
65126: NOT
65127: PUSH
65128: LD_VAR 0 1
65132: PPUSH
65133: LD_VAR 0 2
65137: PPUSH
65138: CALL_OW 308
65142: NOT
65143: AND
65144: IFFALSE 65148
// exit ;
65146: GO 65266
// if IsInArea ( unit , area ) then
65148: LD_VAR 0 1
65152: PPUSH
65153: LD_VAR 0 2
65157: PPUSH
65158: CALL_OW 308
65162: IFFALSE 65180
// begin ComMoveToArea ( unit , goAway ) ;
65164: LD_VAR 0 1
65168: PPUSH
65169: LD_VAR 0 3
65173: PPUSH
65174: CALL_OW 113
// exit ;
65178: GO 65266
// end ; if task [ 1 ] [ 1 ] <> M then
65180: LD_VAR 0 7
65184: PUSH
65185: LD_INT 1
65187: ARRAY
65188: PUSH
65189: LD_INT 1
65191: ARRAY
65192: PUSH
65193: LD_STRING M
65195: NONEQUAL
65196: IFFALSE 65200
// exit ;
65198: GO 65266
// x := task [ 1 ] [ 2 ] ;
65200: LD_ADDR_VAR 0 5
65204: PUSH
65205: LD_VAR 0 7
65209: PUSH
65210: LD_INT 1
65212: ARRAY
65213: PUSH
65214: LD_INT 2
65216: ARRAY
65217: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65218: LD_ADDR_VAR 0 6
65222: PUSH
65223: LD_VAR 0 7
65227: PUSH
65228: LD_INT 1
65230: ARRAY
65231: PUSH
65232: LD_INT 3
65234: ARRAY
65235: ST_TO_ADDR
// if InArea ( x , y , area ) then
65236: LD_VAR 0 5
65240: PPUSH
65241: LD_VAR 0 6
65245: PPUSH
65246: LD_VAR 0 2
65250: PPUSH
65251: CALL_OW 309
65255: IFFALSE 65266
// ComStop ( unit ) ;
65257: LD_VAR 0 1
65261: PPUSH
65262: CALL_OW 141
// end ;
65266: LD_VAR 0 4
65270: RET
// export function Abs ( value ) ; begin
65271: LD_INT 0
65273: PPUSH
// result := value ;
65274: LD_ADDR_VAR 0 2
65278: PUSH
65279: LD_VAR 0 1
65283: ST_TO_ADDR
// if value < 0 then
65284: LD_VAR 0 1
65288: PUSH
65289: LD_INT 0
65291: LESS
65292: IFFALSE 65309
// result := value * - 1 ;
65294: LD_ADDR_VAR 0 2
65298: PUSH
65299: LD_VAR 0 1
65303: PUSH
65304: LD_INT 1
65306: NEG
65307: MUL
65308: ST_TO_ADDR
// end ;
65309: LD_VAR 0 2
65313: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65314: LD_INT 0
65316: PPUSH
65317: PPUSH
65318: PPUSH
65319: PPUSH
65320: PPUSH
65321: PPUSH
65322: PPUSH
65323: PPUSH
// if not unit or not building then
65324: LD_VAR 0 1
65328: NOT
65329: PUSH
65330: LD_VAR 0 2
65334: NOT
65335: OR
65336: IFFALSE 65340
// exit ;
65338: GO 65566
// x := GetX ( building ) ;
65340: LD_ADDR_VAR 0 4
65344: PUSH
65345: LD_VAR 0 2
65349: PPUSH
65350: CALL_OW 250
65354: ST_TO_ADDR
// y := GetY ( building ) ;
65355: LD_ADDR_VAR 0 6
65359: PUSH
65360: LD_VAR 0 2
65364: PPUSH
65365: CALL_OW 251
65369: ST_TO_ADDR
// d := GetDir ( building ) ;
65370: LD_ADDR_VAR 0 8
65374: PUSH
65375: LD_VAR 0 2
65379: PPUSH
65380: CALL_OW 254
65384: ST_TO_ADDR
// r := 4 ;
65385: LD_ADDR_VAR 0 9
65389: PUSH
65390: LD_INT 4
65392: ST_TO_ADDR
// for i := 1 to 5 do
65393: LD_ADDR_VAR 0 10
65397: PUSH
65398: DOUBLE
65399: LD_INT 1
65401: DEC
65402: ST_TO_ADDR
65403: LD_INT 5
65405: PUSH
65406: FOR_TO
65407: IFFALSE 65564
// begin _x := ShiftX ( x , d , r + i ) ;
65409: LD_ADDR_VAR 0 5
65413: PUSH
65414: LD_VAR 0 4
65418: PPUSH
65419: LD_VAR 0 8
65423: PPUSH
65424: LD_VAR 0 9
65428: PUSH
65429: LD_VAR 0 10
65433: PLUS
65434: PPUSH
65435: CALL_OW 272
65439: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65440: LD_ADDR_VAR 0 7
65444: PUSH
65445: LD_VAR 0 6
65449: PPUSH
65450: LD_VAR 0 8
65454: PPUSH
65455: LD_VAR 0 9
65459: PUSH
65460: LD_VAR 0 10
65464: PLUS
65465: PPUSH
65466: CALL_OW 273
65470: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65471: LD_VAR 0 5
65475: PPUSH
65476: LD_VAR 0 7
65480: PPUSH
65481: CALL_OW 488
65485: PUSH
65486: LD_VAR 0 5
65490: PPUSH
65491: LD_VAR 0 7
65495: PPUSH
65496: CALL_OW 428
65500: PPUSH
65501: CALL_OW 247
65505: PUSH
65506: LD_INT 3
65508: PUSH
65509: LD_INT 2
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: IN
65516: NOT
65517: AND
65518: IFFALSE 65562
// begin ComMoveXY ( unit , _x , _y ) ;
65520: LD_VAR 0 1
65524: PPUSH
65525: LD_VAR 0 5
65529: PPUSH
65530: LD_VAR 0 7
65534: PPUSH
65535: CALL_OW 111
// result := [ _x , _y ] ;
65539: LD_ADDR_VAR 0 3
65543: PUSH
65544: LD_VAR 0 5
65548: PUSH
65549: LD_VAR 0 7
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: ST_TO_ADDR
// exit ;
65558: POP
65559: POP
65560: GO 65566
// end ; end ;
65562: GO 65406
65564: POP
65565: POP
// end ;
65566: LD_VAR 0 3
65570: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65571: LD_INT 0
65573: PPUSH
65574: PPUSH
65575: PPUSH
// result := 0 ;
65576: LD_ADDR_VAR 0 3
65580: PUSH
65581: LD_INT 0
65583: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65584: LD_VAR 0 1
65588: PUSH
65589: LD_INT 0
65591: LESS
65592: PUSH
65593: LD_VAR 0 1
65597: PUSH
65598: LD_INT 8
65600: GREATER
65601: OR
65602: PUSH
65603: LD_VAR 0 2
65607: PUSH
65608: LD_INT 0
65610: LESS
65611: OR
65612: PUSH
65613: LD_VAR 0 2
65617: PUSH
65618: LD_INT 8
65620: GREATER
65621: OR
65622: IFFALSE 65626
// exit ;
65624: GO 65701
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65626: LD_ADDR_VAR 0 4
65630: PUSH
65631: LD_INT 22
65633: PUSH
65634: LD_VAR 0 2
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PPUSH
65643: CALL_OW 69
65647: PUSH
65648: FOR_IN
65649: IFFALSE 65699
// begin un := UnitShoot ( i ) ;
65651: LD_ADDR_VAR 0 5
65655: PUSH
65656: LD_VAR 0 4
65660: PPUSH
65661: CALL_OW 504
65665: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65666: LD_VAR 0 5
65670: PPUSH
65671: CALL_OW 255
65675: PUSH
65676: LD_VAR 0 1
65680: EQUAL
65681: IFFALSE 65697
// begin result := un ;
65683: LD_ADDR_VAR 0 3
65687: PUSH
65688: LD_VAR 0 5
65692: ST_TO_ADDR
// exit ;
65693: POP
65694: POP
65695: GO 65701
// end ; end ;
65697: GO 65648
65699: POP
65700: POP
// end ;
65701: LD_VAR 0 3
65705: RET
// export function GetCargoBay ( units ) ; begin
65706: LD_INT 0
65708: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65709: LD_ADDR_VAR 0 2
65713: PUSH
65714: LD_VAR 0 1
65718: PPUSH
65719: LD_INT 2
65721: PUSH
65722: LD_INT 34
65724: PUSH
65725: LD_INT 12
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 34
65734: PUSH
65735: LD_INT 51
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 34
65744: PUSH
65745: LD_INT 32
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 34
65754: PUSH
65755: LD_INT 89
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: PPUSH
65769: CALL_OW 72
65773: ST_TO_ADDR
// end ;
65774: LD_VAR 0 2
65778: RET
// export function Negate ( value ) ; begin
65779: LD_INT 0
65781: PPUSH
// result := not value ;
65782: LD_ADDR_VAR 0 2
65786: PUSH
65787: LD_VAR 0 1
65791: NOT
65792: ST_TO_ADDR
// end ;
65793: LD_VAR 0 2
65797: RET
// export function Inc ( value ) ; begin
65798: LD_INT 0
65800: PPUSH
// result := value + 1 ;
65801: LD_ADDR_VAR 0 2
65805: PUSH
65806: LD_VAR 0 1
65810: PUSH
65811: LD_INT 1
65813: PLUS
65814: ST_TO_ADDR
// end ;
65815: LD_VAR 0 2
65819: RET
// export function Dec ( value ) ; begin
65820: LD_INT 0
65822: PPUSH
// result := value - 1 ;
65823: LD_ADDR_VAR 0 2
65827: PUSH
65828: LD_VAR 0 1
65832: PUSH
65833: LD_INT 1
65835: MINUS
65836: ST_TO_ADDR
// end ;
65837: LD_VAR 0 2
65841: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65842: LD_INT 0
65844: PPUSH
65845: PPUSH
65846: PPUSH
65847: PPUSH
65848: PPUSH
65849: PPUSH
65850: PPUSH
65851: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65852: LD_VAR 0 1
65856: PPUSH
65857: LD_VAR 0 2
65861: PPUSH
65862: CALL_OW 488
65866: NOT
65867: PUSH
65868: LD_VAR 0 3
65872: PPUSH
65873: LD_VAR 0 4
65877: PPUSH
65878: CALL_OW 488
65882: NOT
65883: OR
65884: IFFALSE 65897
// begin result := - 1 ;
65886: LD_ADDR_VAR 0 5
65890: PUSH
65891: LD_INT 1
65893: NEG
65894: ST_TO_ADDR
// exit ;
65895: GO 66132
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65897: LD_ADDR_VAR 0 12
65901: PUSH
65902: LD_VAR 0 1
65906: PPUSH
65907: LD_VAR 0 2
65911: PPUSH
65912: LD_VAR 0 3
65916: PPUSH
65917: LD_VAR 0 4
65921: PPUSH
65922: CALL 64982 0 4
65926: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65927: LD_ADDR_VAR 0 11
65931: PUSH
65932: LD_VAR 0 1
65936: PPUSH
65937: LD_VAR 0 2
65941: PPUSH
65942: LD_VAR 0 12
65946: PUSH
65947: LD_INT 1
65949: ARRAY
65950: PPUSH
65951: LD_VAR 0 12
65955: PUSH
65956: LD_INT 2
65958: ARRAY
65959: PPUSH
65960: CALL_OW 298
65964: ST_TO_ADDR
// distance := 9999 ;
65965: LD_ADDR_VAR 0 10
65969: PUSH
65970: LD_INT 9999
65972: ST_TO_ADDR
// for i := 0 to 5 do
65973: LD_ADDR_VAR 0 6
65977: PUSH
65978: DOUBLE
65979: LD_INT 0
65981: DEC
65982: ST_TO_ADDR
65983: LD_INT 5
65985: PUSH
65986: FOR_TO
65987: IFFALSE 66130
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65989: LD_ADDR_VAR 0 7
65993: PUSH
65994: LD_VAR 0 1
65998: PPUSH
65999: LD_VAR 0 6
66003: PPUSH
66004: LD_VAR 0 11
66008: PPUSH
66009: CALL_OW 272
66013: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66014: LD_ADDR_VAR 0 8
66018: PUSH
66019: LD_VAR 0 2
66023: PPUSH
66024: LD_VAR 0 6
66028: PPUSH
66029: LD_VAR 0 11
66033: PPUSH
66034: CALL_OW 273
66038: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66039: LD_VAR 0 7
66043: PPUSH
66044: LD_VAR 0 8
66048: PPUSH
66049: CALL_OW 488
66053: NOT
66054: IFFALSE 66058
// continue ;
66056: GO 65986
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66058: LD_ADDR_VAR 0 9
66062: PUSH
66063: LD_VAR 0 12
66067: PUSH
66068: LD_INT 1
66070: ARRAY
66071: PPUSH
66072: LD_VAR 0 12
66076: PUSH
66077: LD_INT 2
66079: ARRAY
66080: PPUSH
66081: LD_VAR 0 7
66085: PPUSH
66086: LD_VAR 0 8
66090: PPUSH
66091: CALL_OW 298
66095: ST_TO_ADDR
// if tmp < distance then
66096: LD_VAR 0 9
66100: PUSH
66101: LD_VAR 0 10
66105: LESS
66106: IFFALSE 66128
// begin result := i ;
66108: LD_ADDR_VAR 0 5
66112: PUSH
66113: LD_VAR 0 6
66117: ST_TO_ADDR
// distance := tmp ;
66118: LD_ADDR_VAR 0 10
66122: PUSH
66123: LD_VAR 0 9
66127: ST_TO_ADDR
// end ; end ;
66128: GO 65986
66130: POP
66131: POP
// end ;
66132: LD_VAR 0 5
66136: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66137: LD_INT 0
66139: PPUSH
66140: PPUSH
// if not driver or not IsInUnit ( driver ) then
66141: LD_VAR 0 1
66145: NOT
66146: PUSH
66147: LD_VAR 0 1
66151: PPUSH
66152: CALL_OW 310
66156: NOT
66157: OR
66158: IFFALSE 66162
// exit ;
66160: GO 66252
// vehicle := IsInUnit ( driver ) ;
66162: LD_ADDR_VAR 0 3
66166: PUSH
66167: LD_VAR 0 1
66171: PPUSH
66172: CALL_OW 310
66176: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66177: LD_VAR 0 1
66181: PPUSH
66182: LD_STRING \
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 0
66193: PUSH
66194: LD_INT 0
66196: PUSH
66197: LD_INT 0
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: PUSH
66212: LD_STRING E
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_VAR 0 3
66225: PUSH
66226: LD_INT 0
66228: PUSH
66229: LD_INT 0
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PPUSH
66248: CALL_OW 446
// end ;
66252: LD_VAR 0 2
66256: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66257: LD_INT 0
66259: PPUSH
66260: PPUSH
// if not driver or not IsInUnit ( driver ) then
66261: LD_VAR 0 1
66265: NOT
66266: PUSH
66267: LD_VAR 0 1
66271: PPUSH
66272: CALL_OW 310
66276: NOT
66277: OR
66278: IFFALSE 66282
// exit ;
66280: GO 66372
// vehicle := IsInUnit ( driver ) ;
66282: LD_ADDR_VAR 0 3
66286: PUSH
66287: LD_VAR 0 1
66291: PPUSH
66292: CALL_OW 310
66296: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66297: LD_VAR 0 1
66301: PPUSH
66302: LD_STRING \
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: LD_INT 0
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: PUSH
66332: LD_STRING E
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: LD_VAR 0 3
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PPUSH
66368: CALL_OW 447
// end ;
66372: LD_VAR 0 2
66376: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66377: LD_INT 0
66379: PPUSH
66380: PPUSH
66381: PPUSH
// tmp := [ ] ;
66382: LD_ADDR_VAR 0 5
66386: PUSH
66387: EMPTY
66388: ST_TO_ADDR
// for i in units do
66389: LD_ADDR_VAR 0 4
66393: PUSH
66394: LD_VAR 0 1
66398: PUSH
66399: FOR_IN
66400: IFFALSE 66438
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66402: LD_ADDR_VAR 0 5
66406: PUSH
66407: LD_VAR 0 5
66411: PPUSH
66412: LD_VAR 0 5
66416: PUSH
66417: LD_INT 1
66419: PLUS
66420: PPUSH
66421: LD_VAR 0 4
66425: PPUSH
66426: CALL_OW 256
66430: PPUSH
66431: CALL_OW 2
66435: ST_TO_ADDR
66436: GO 66399
66438: POP
66439: POP
// if not tmp then
66440: LD_VAR 0 5
66444: NOT
66445: IFFALSE 66449
// exit ;
66447: GO 66497
// if asc then
66449: LD_VAR 0 2
66453: IFFALSE 66477
// result := SortListByListAsc ( units , tmp ) else
66455: LD_ADDR_VAR 0 3
66459: PUSH
66460: LD_VAR 0 1
66464: PPUSH
66465: LD_VAR 0 5
66469: PPUSH
66470: CALL_OW 76
66474: ST_TO_ADDR
66475: GO 66497
// result := SortListByListDesc ( units , tmp ) ;
66477: LD_ADDR_VAR 0 3
66481: PUSH
66482: LD_VAR 0 1
66486: PPUSH
66487: LD_VAR 0 5
66491: PPUSH
66492: CALL_OW 77
66496: ST_TO_ADDR
// end ;
66497: LD_VAR 0 3
66501: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66502: LD_INT 0
66504: PPUSH
66505: PPUSH
// task := GetTaskList ( mech ) ;
66506: LD_ADDR_VAR 0 4
66510: PUSH
66511: LD_VAR 0 1
66515: PPUSH
66516: CALL_OW 437
66520: ST_TO_ADDR
// if not task then
66521: LD_VAR 0 4
66525: NOT
66526: IFFALSE 66530
// exit ;
66528: GO 66572
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66530: LD_ADDR_VAR 0 3
66534: PUSH
66535: LD_VAR 0 4
66539: PUSH
66540: LD_INT 1
66542: ARRAY
66543: PUSH
66544: LD_INT 1
66546: ARRAY
66547: PUSH
66548: LD_STRING r
66550: EQUAL
66551: PUSH
66552: LD_VAR 0 4
66556: PUSH
66557: LD_INT 1
66559: ARRAY
66560: PUSH
66561: LD_INT 4
66563: ARRAY
66564: PUSH
66565: LD_VAR 0 2
66569: EQUAL
66570: AND
66571: ST_TO_ADDR
// end ;
66572: LD_VAR 0 3
66576: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66577: LD_INT 0
66579: PPUSH
// SetDir ( unit , d ) ;
66580: LD_VAR 0 1
66584: PPUSH
66585: LD_VAR 0 4
66589: PPUSH
66590: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66594: LD_VAR 0 1
66598: PPUSH
66599: LD_VAR 0 2
66603: PPUSH
66604: LD_VAR 0 3
66608: PPUSH
66609: LD_VAR 0 5
66613: PPUSH
66614: CALL_OW 48
// end ;
66618: LD_VAR 0 6
66622: RET
// export function ToNaturalNumber ( number ) ; begin
66623: LD_INT 0
66625: PPUSH
// result := number div 1 ;
66626: LD_ADDR_VAR 0 2
66630: PUSH
66631: LD_VAR 0 1
66635: PUSH
66636: LD_INT 1
66638: DIV
66639: ST_TO_ADDR
// if number < 0 then
66640: LD_VAR 0 1
66644: PUSH
66645: LD_INT 0
66647: LESS
66648: IFFALSE 66658
// result := 0 ;
66650: LD_ADDR_VAR 0 2
66654: PUSH
66655: LD_INT 0
66657: ST_TO_ADDR
// end ;
66658: LD_VAR 0 2
66662: RET
// export function SortByClass ( units , class ) ; var un ; begin
66663: LD_INT 0
66665: PPUSH
66666: PPUSH
// if not units or not class then
66667: LD_VAR 0 1
66671: NOT
66672: PUSH
66673: LD_VAR 0 2
66677: NOT
66678: OR
66679: IFFALSE 66683
// exit ;
66681: GO 66778
// result := [ ] ;
66683: LD_ADDR_VAR 0 3
66687: PUSH
66688: EMPTY
66689: ST_TO_ADDR
// for un in units do
66690: LD_ADDR_VAR 0 4
66694: PUSH
66695: LD_VAR 0 1
66699: PUSH
66700: FOR_IN
66701: IFFALSE 66776
// if GetClass ( un ) = class then
66703: LD_VAR 0 4
66707: PPUSH
66708: CALL_OW 257
66712: PUSH
66713: LD_VAR 0 2
66717: EQUAL
66718: IFFALSE 66745
// result := Insert ( result , 1 , un ) else
66720: LD_ADDR_VAR 0 3
66724: PUSH
66725: LD_VAR 0 3
66729: PPUSH
66730: LD_INT 1
66732: PPUSH
66733: LD_VAR 0 4
66737: PPUSH
66738: CALL_OW 2
66742: ST_TO_ADDR
66743: GO 66774
// result := Replace ( result , result + 1 , un ) ;
66745: LD_ADDR_VAR 0 3
66749: PUSH
66750: LD_VAR 0 3
66754: PPUSH
66755: LD_VAR 0 3
66759: PUSH
66760: LD_INT 1
66762: PLUS
66763: PPUSH
66764: LD_VAR 0 4
66768: PPUSH
66769: CALL_OW 1
66773: ST_TO_ADDR
66774: GO 66700
66776: POP
66777: POP
// end ;
66778: LD_VAR 0 3
66782: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66783: LD_INT 0
66785: PPUSH
66786: PPUSH
66787: PPUSH
66788: PPUSH
66789: PPUSH
66790: PPUSH
66791: PPUSH
// result := [ ] ;
66792: LD_ADDR_VAR 0 4
66796: PUSH
66797: EMPTY
66798: ST_TO_ADDR
// if x - r < 0 then
66799: LD_VAR 0 1
66803: PUSH
66804: LD_VAR 0 3
66808: MINUS
66809: PUSH
66810: LD_INT 0
66812: LESS
66813: IFFALSE 66825
// min_x := 0 else
66815: LD_ADDR_VAR 0 8
66819: PUSH
66820: LD_INT 0
66822: ST_TO_ADDR
66823: GO 66841
// min_x := x - r ;
66825: LD_ADDR_VAR 0 8
66829: PUSH
66830: LD_VAR 0 1
66834: PUSH
66835: LD_VAR 0 3
66839: MINUS
66840: ST_TO_ADDR
// if y - r < 0 then
66841: LD_VAR 0 2
66845: PUSH
66846: LD_VAR 0 3
66850: MINUS
66851: PUSH
66852: LD_INT 0
66854: LESS
66855: IFFALSE 66867
// min_y := 0 else
66857: LD_ADDR_VAR 0 7
66861: PUSH
66862: LD_INT 0
66864: ST_TO_ADDR
66865: GO 66883
// min_y := y - r ;
66867: LD_ADDR_VAR 0 7
66871: PUSH
66872: LD_VAR 0 2
66876: PUSH
66877: LD_VAR 0 3
66881: MINUS
66882: ST_TO_ADDR
// max_x := x + r ;
66883: LD_ADDR_VAR 0 9
66887: PUSH
66888: LD_VAR 0 1
66892: PUSH
66893: LD_VAR 0 3
66897: PLUS
66898: ST_TO_ADDR
// max_y := y + r ;
66899: LD_ADDR_VAR 0 10
66903: PUSH
66904: LD_VAR 0 2
66908: PUSH
66909: LD_VAR 0 3
66913: PLUS
66914: ST_TO_ADDR
// for _x = min_x to max_x do
66915: LD_ADDR_VAR 0 5
66919: PUSH
66920: DOUBLE
66921: LD_VAR 0 8
66925: DEC
66926: ST_TO_ADDR
66927: LD_VAR 0 9
66931: PUSH
66932: FOR_TO
66933: IFFALSE 67034
// for _y = min_y to max_y do
66935: LD_ADDR_VAR 0 6
66939: PUSH
66940: DOUBLE
66941: LD_VAR 0 7
66945: DEC
66946: ST_TO_ADDR
66947: LD_VAR 0 10
66951: PUSH
66952: FOR_TO
66953: IFFALSE 67030
// begin if not ValidHex ( _x , _y ) then
66955: LD_VAR 0 5
66959: PPUSH
66960: LD_VAR 0 6
66964: PPUSH
66965: CALL_OW 488
66969: NOT
66970: IFFALSE 66974
// continue ;
66972: GO 66952
// if GetResourceTypeXY ( _x , _y ) then
66974: LD_VAR 0 5
66978: PPUSH
66979: LD_VAR 0 6
66983: PPUSH
66984: CALL_OW 283
66988: IFFALSE 67028
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66990: LD_ADDR_VAR 0 4
66994: PUSH
66995: LD_VAR 0 4
66999: PPUSH
67000: LD_VAR 0 4
67004: PUSH
67005: LD_INT 1
67007: PLUS
67008: PPUSH
67009: LD_VAR 0 5
67013: PUSH
67014: LD_VAR 0 6
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PPUSH
67023: CALL_OW 1
67027: ST_TO_ADDR
// end ;
67028: GO 66952
67030: POP
67031: POP
67032: GO 66932
67034: POP
67035: POP
// end ;
67036: LD_VAR 0 4
67040: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67041: LD_INT 0
67043: PPUSH
67044: PPUSH
67045: PPUSH
67046: PPUSH
67047: PPUSH
67048: PPUSH
67049: PPUSH
67050: PPUSH
// if not units then
67051: LD_VAR 0 1
67055: NOT
67056: IFFALSE 67060
// exit ;
67058: GO 67584
// result := UnitFilter ( units , [ f_ok ] ) ;
67060: LD_ADDR_VAR 0 3
67064: PUSH
67065: LD_VAR 0 1
67069: PPUSH
67070: LD_INT 50
67072: PUSH
67073: EMPTY
67074: LIST
67075: PPUSH
67076: CALL_OW 72
67080: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67081: LD_ADDR_VAR 0 8
67085: PUSH
67086: LD_VAR 0 1
67090: PUSH
67091: LD_INT 1
67093: ARRAY
67094: PPUSH
67095: CALL_OW 255
67099: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67100: LD_ADDR_VAR 0 10
67104: PUSH
67105: LD_INT 29
67107: PUSH
67108: LD_INT 91
67110: PUSH
67111: LD_INT 49
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: LIST
67118: ST_TO_ADDR
// if not result then
67119: LD_VAR 0 3
67123: NOT
67124: IFFALSE 67128
// exit ;
67126: GO 67584
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67128: LD_ADDR_VAR 0 5
67132: PUSH
67133: LD_INT 81
67135: PUSH
67136: LD_VAR 0 8
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PPUSH
67145: CALL_OW 69
67149: ST_TO_ADDR
// for i in result do
67150: LD_ADDR_VAR 0 4
67154: PUSH
67155: LD_VAR 0 3
67159: PUSH
67160: FOR_IN
67161: IFFALSE 67582
// begin tag := GetTag ( i ) + 1 ;
67163: LD_ADDR_VAR 0 9
67167: PUSH
67168: LD_VAR 0 4
67172: PPUSH
67173: CALL_OW 110
67177: PUSH
67178: LD_INT 1
67180: PLUS
67181: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67182: LD_ADDR_VAR 0 7
67186: PUSH
67187: LD_VAR 0 4
67191: PPUSH
67192: CALL_OW 250
67196: PPUSH
67197: LD_VAR 0 4
67201: PPUSH
67202: CALL_OW 251
67206: PPUSH
67207: LD_INT 6
67209: PPUSH
67210: CALL 66783 0 3
67214: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67215: LD_VAR 0 4
67219: PPUSH
67220: CALL_OW 247
67224: PUSH
67225: LD_INT 2
67227: EQUAL
67228: PUSH
67229: LD_VAR 0 7
67233: AND
67234: PUSH
67235: LD_VAR 0 4
67239: PPUSH
67240: CALL_OW 264
67244: PUSH
67245: LD_VAR 0 10
67249: IN
67250: NOT
67251: AND
67252: IFFALSE 67291
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67254: LD_VAR 0 4
67258: PPUSH
67259: LD_VAR 0 7
67263: PUSH
67264: LD_INT 1
67266: ARRAY
67267: PUSH
67268: LD_INT 1
67270: ARRAY
67271: PPUSH
67272: LD_VAR 0 7
67276: PUSH
67277: LD_INT 1
67279: ARRAY
67280: PUSH
67281: LD_INT 2
67283: ARRAY
67284: PPUSH
67285: CALL_OW 116
67289: GO 67580
// if path > tag then
67291: LD_VAR 0 2
67295: PUSH
67296: LD_VAR 0 9
67300: GREATER
67301: IFFALSE 67509
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67303: LD_ADDR_VAR 0 6
67307: PUSH
67308: LD_VAR 0 5
67312: PPUSH
67313: LD_INT 91
67315: PUSH
67316: LD_VAR 0 4
67320: PUSH
67321: LD_INT 8
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: LIST
67328: PPUSH
67329: CALL_OW 72
67333: ST_TO_ADDR
// if nearEnemy then
67334: LD_VAR 0 6
67338: IFFALSE 67407
// begin if GetWeapon ( i ) = ru_time_lapser then
67340: LD_VAR 0 4
67344: PPUSH
67345: CALL_OW 264
67349: PUSH
67350: LD_INT 49
67352: EQUAL
67353: IFFALSE 67381
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67355: LD_VAR 0 4
67359: PPUSH
67360: LD_VAR 0 6
67364: PPUSH
67365: LD_VAR 0 4
67369: PPUSH
67370: CALL_OW 74
67374: PPUSH
67375: CALL_OW 112
67379: GO 67405
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67381: LD_VAR 0 4
67385: PPUSH
67386: LD_VAR 0 6
67390: PPUSH
67391: LD_VAR 0 4
67395: PPUSH
67396: CALL_OW 74
67400: PPUSH
67401: CALL_OW 115
// end else
67405: GO 67507
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67407: LD_VAR 0 4
67411: PPUSH
67412: LD_VAR 0 2
67416: PUSH
67417: LD_VAR 0 9
67421: ARRAY
67422: PUSH
67423: LD_INT 1
67425: ARRAY
67426: PPUSH
67427: LD_VAR 0 2
67431: PUSH
67432: LD_VAR 0 9
67436: ARRAY
67437: PUSH
67438: LD_INT 2
67440: ARRAY
67441: PPUSH
67442: CALL_OW 297
67446: PUSH
67447: LD_INT 6
67449: GREATER
67450: IFFALSE 67493
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67452: LD_VAR 0 4
67456: PPUSH
67457: LD_VAR 0 2
67461: PUSH
67462: LD_VAR 0 9
67466: ARRAY
67467: PUSH
67468: LD_INT 1
67470: ARRAY
67471: PPUSH
67472: LD_VAR 0 2
67476: PUSH
67477: LD_VAR 0 9
67481: ARRAY
67482: PUSH
67483: LD_INT 2
67485: ARRAY
67486: PPUSH
67487: CALL_OW 114
67491: GO 67507
// SetTag ( i , tag ) ;
67493: LD_VAR 0 4
67497: PPUSH
67498: LD_VAR 0 9
67502: PPUSH
67503: CALL_OW 109
// end else
67507: GO 67580
// if enemy then
67509: LD_VAR 0 5
67513: IFFALSE 67580
// begin if GetWeapon ( i ) = ru_time_lapser then
67515: LD_VAR 0 4
67519: PPUSH
67520: CALL_OW 264
67524: PUSH
67525: LD_INT 49
67527: EQUAL
67528: IFFALSE 67556
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67530: LD_VAR 0 4
67534: PPUSH
67535: LD_VAR 0 5
67539: PPUSH
67540: LD_VAR 0 4
67544: PPUSH
67545: CALL_OW 74
67549: PPUSH
67550: CALL_OW 112
67554: GO 67580
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67556: LD_VAR 0 4
67560: PPUSH
67561: LD_VAR 0 5
67565: PPUSH
67566: LD_VAR 0 4
67570: PPUSH
67571: CALL_OW 74
67575: PPUSH
67576: CALL_OW 115
// end ; end ;
67580: GO 67160
67582: POP
67583: POP
// end ;
67584: LD_VAR 0 3
67588: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67589: LD_INT 0
67591: PPUSH
67592: PPUSH
67593: PPUSH
// if not unit or IsInUnit ( unit ) then
67594: LD_VAR 0 1
67598: NOT
67599: PUSH
67600: LD_VAR 0 1
67604: PPUSH
67605: CALL_OW 310
67609: OR
67610: IFFALSE 67614
// exit ;
67612: GO 67705
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67614: LD_ADDR_VAR 0 4
67618: PUSH
67619: LD_VAR 0 1
67623: PPUSH
67624: CALL_OW 250
67628: PPUSH
67629: LD_VAR 0 2
67633: PPUSH
67634: LD_INT 1
67636: PPUSH
67637: CALL_OW 272
67641: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67642: LD_ADDR_VAR 0 5
67646: PUSH
67647: LD_VAR 0 1
67651: PPUSH
67652: CALL_OW 251
67656: PPUSH
67657: LD_VAR 0 2
67661: PPUSH
67662: LD_INT 1
67664: PPUSH
67665: CALL_OW 273
67669: ST_TO_ADDR
// if ValidHex ( x , y ) then
67670: LD_VAR 0 4
67674: PPUSH
67675: LD_VAR 0 5
67679: PPUSH
67680: CALL_OW 488
67684: IFFALSE 67705
// ComTurnXY ( unit , x , y ) ;
67686: LD_VAR 0 1
67690: PPUSH
67691: LD_VAR 0 4
67695: PPUSH
67696: LD_VAR 0 5
67700: PPUSH
67701: CALL_OW 118
// end ;
67705: LD_VAR 0 3
67709: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67710: LD_INT 0
67712: PPUSH
67713: PPUSH
// result := false ;
67714: LD_ADDR_VAR 0 3
67718: PUSH
67719: LD_INT 0
67721: ST_TO_ADDR
// if not units then
67722: LD_VAR 0 2
67726: NOT
67727: IFFALSE 67731
// exit ;
67729: GO 67776
// for i in units do
67731: LD_ADDR_VAR 0 4
67735: PUSH
67736: LD_VAR 0 2
67740: PUSH
67741: FOR_IN
67742: IFFALSE 67774
// if See ( side , i ) then
67744: LD_VAR 0 1
67748: PPUSH
67749: LD_VAR 0 4
67753: PPUSH
67754: CALL_OW 292
67758: IFFALSE 67772
// begin result := true ;
67760: LD_ADDR_VAR 0 3
67764: PUSH
67765: LD_INT 1
67767: ST_TO_ADDR
// exit ;
67768: POP
67769: POP
67770: GO 67776
// end ;
67772: GO 67741
67774: POP
67775: POP
// end ;
67776: LD_VAR 0 3
67780: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67781: LD_INT 0
67783: PPUSH
67784: PPUSH
67785: PPUSH
67786: PPUSH
// if not unit or not points then
67787: LD_VAR 0 1
67791: NOT
67792: PUSH
67793: LD_VAR 0 2
67797: NOT
67798: OR
67799: IFFALSE 67803
// exit ;
67801: GO 67893
// dist := 99999 ;
67803: LD_ADDR_VAR 0 5
67807: PUSH
67808: LD_INT 99999
67810: ST_TO_ADDR
// for i in points do
67811: LD_ADDR_VAR 0 4
67815: PUSH
67816: LD_VAR 0 2
67820: PUSH
67821: FOR_IN
67822: IFFALSE 67891
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67824: LD_ADDR_VAR 0 6
67828: PUSH
67829: LD_VAR 0 1
67833: PPUSH
67834: LD_VAR 0 4
67838: PUSH
67839: LD_INT 1
67841: ARRAY
67842: PPUSH
67843: LD_VAR 0 4
67847: PUSH
67848: LD_INT 2
67850: ARRAY
67851: PPUSH
67852: CALL_OW 297
67856: ST_TO_ADDR
// if tmpDist < dist then
67857: LD_VAR 0 6
67861: PUSH
67862: LD_VAR 0 5
67866: LESS
67867: IFFALSE 67889
// begin result := i ;
67869: LD_ADDR_VAR 0 3
67873: PUSH
67874: LD_VAR 0 4
67878: ST_TO_ADDR
// dist := tmpDist ;
67879: LD_ADDR_VAR 0 5
67883: PUSH
67884: LD_VAR 0 6
67888: ST_TO_ADDR
// end ; end ;
67889: GO 67821
67891: POP
67892: POP
// end ;
67893: LD_VAR 0 3
67897: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67898: LD_INT 0
67900: PPUSH
// uc_side := side ;
67901: LD_ADDR_OWVAR 20
67905: PUSH
67906: LD_VAR 0 1
67910: ST_TO_ADDR
// uc_nation := 3 ;
67911: LD_ADDR_OWVAR 21
67915: PUSH
67916: LD_INT 3
67918: ST_TO_ADDR
// vc_chassis := 25 ;
67919: LD_ADDR_OWVAR 37
67923: PUSH
67924: LD_INT 25
67926: ST_TO_ADDR
// vc_engine := engine_siberite ;
67927: LD_ADDR_OWVAR 39
67931: PUSH
67932: LD_INT 3
67934: ST_TO_ADDR
// vc_control := control_computer ;
67935: LD_ADDR_OWVAR 38
67939: PUSH
67940: LD_INT 3
67942: ST_TO_ADDR
// vc_weapon := 59 ;
67943: LD_ADDR_OWVAR 40
67947: PUSH
67948: LD_INT 59
67950: ST_TO_ADDR
// result := CreateVehicle ;
67951: LD_ADDR_VAR 0 5
67955: PUSH
67956: CALL_OW 45
67960: ST_TO_ADDR
// SetDir ( result , d ) ;
67961: LD_VAR 0 5
67965: PPUSH
67966: LD_VAR 0 4
67970: PPUSH
67971: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67975: LD_VAR 0 5
67979: PPUSH
67980: LD_VAR 0 2
67984: PPUSH
67985: LD_VAR 0 3
67989: PPUSH
67990: LD_INT 0
67992: PPUSH
67993: CALL_OW 48
// end ;
67997: LD_VAR 0 5
68001: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68002: LD_INT 0
68004: PPUSH
68005: PPUSH
68006: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68007: LD_ADDR_VAR 0 2
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: LD_INT 0
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68030: LD_VAR 0 1
68034: NOT
68035: PUSH
68036: LD_VAR 0 1
68040: PPUSH
68041: CALL_OW 264
68045: PUSH
68046: LD_INT 12
68048: PUSH
68049: LD_INT 51
68051: PUSH
68052: LD_INT 32
68054: PUSH
68055: LD_INT 89
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: IN
68064: NOT
68065: OR
68066: IFFALSE 68070
// exit ;
68068: GO 68168
// for i := 1 to 3 do
68070: LD_ADDR_VAR 0 3
68074: PUSH
68075: DOUBLE
68076: LD_INT 1
68078: DEC
68079: ST_TO_ADDR
68080: LD_INT 3
68082: PUSH
68083: FOR_TO
68084: IFFALSE 68166
// begin tmp := GetCargo ( cargo , i ) ;
68086: LD_ADDR_VAR 0 4
68090: PUSH
68091: LD_VAR 0 1
68095: PPUSH
68096: LD_VAR 0 3
68100: PPUSH
68101: CALL_OW 289
68105: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68106: LD_ADDR_VAR 0 2
68110: PUSH
68111: LD_VAR 0 2
68115: PPUSH
68116: LD_VAR 0 3
68120: PPUSH
68121: LD_VAR 0 4
68125: PPUSH
68126: CALL_OW 1
68130: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68131: LD_ADDR_VAR 0 2
68135: PUSH
68136: LD_VAR 0 2
68140: PPUSH
68141: LD_INT 4
68143: PPUSH
68144: LD_VAR 0 2
68148: PUSH
68149: LD_INT 4
68151: ARRAY
68152: PUSH
68153: LD_VAR 0 4
68157: PLUS
68158: PPUSH
68159: CALL_OW 1
68163: ST_TO_ADDR
// end ;
68164: GO 68083
68166: POP
68167: POP
// end ;
68168: LD_VAR 0 2
68172: RET
// export function Length ( array ) ; begin
68173: LD_INT 0
68175: PPUSH
// result := array + 0 ;
68176: LD_ADDR_VAR 0 2
68180: PUSH
68181: LD_VAR 0 1
68185: PUSH
68186: LD_INT 0
68188: PLUS
68189: ST_TO_ADDR
// end ;
68190: LD_VAR 0 2
68194: RET
// export function PrepareArray ( array ) ; begin
68195: LD_INT 0
68197: PPUSH
// result := array diff 0 ;
68198: LD_ADDR_VAR 0 2
68202: PUSH
68203: LD_VAR 0 1
68207: PUSH
68208: LD_INT 0
68210: DIFF
68211: ST_TO_ADDR
// if not result [ 1 ] then
68212: LD_VAR 0 2
68216: PUSH
68217: LD_INT 1
68219: ARRAY
68220: NOT
68221: IFFALSE 68241
// result := Delete ( result , 1 ) ;
68223: LD_ADDR_VAR 0 2
68227: PUSH
68228: LD_VAR 0 2
68232: PPUSH
68233: LD_INT 1
68235: PPUSH
68236: CALL_OW 3
68240: ST_TO_ADDR
// end ;
68241: LD_VAR 0 2
68245: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68246: LD_INT 0
68248: PPUSH
68249: PPUSH
68250: PPUSH
68251: PPUSH
// sibRocketRange := 25 ;
68252: LD_ADDR_VAR 0 6
68256: PUSH
68257: LD_INT 25
68259: ST_TO_ADDR
// result := false ;
68260: LD_ADDR_VAR 0 4
68264: PUSH
68265: LD_INT 0
68267: ST_TO_ADDR
// for i := 0 to 5 do
68268: LD_ADDR_VAR 0 5
68272: PUSH
68273: DOUBLE
68274: LD_INT 0
68276: DEC
68277: ST_TO_ADDR
68278: LD_INT 5
68280: PUSH
68281: FOR_TO
68282: IFFALSE 68349
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68284: LD_VAR 0 1
68288: PPUSH
68289: LD_VAR 0 5
68293: PPUSH
68294: LD_VAR 0 6
68298: PPUSH
68299: CALL_OW 272
68303: PPUSH
68304: LD_VAR 0 2
68308: PPUSH
68309: LD_VAR 0 5
68313: PPUSH
68314: LD_VAR 0 6
68318: PPUSH
68319: CALL_OW 273
68323: PPUSH
68324: LD_VAR 0 3
68328: PPUSH
68329: CALL_OW 309
68333: IFFALSE 68347
// begin result := true ;
68335: LD_ADDR_VAR 0 4
68339: PUSH
68340: LD_INT 1
68342: ST_TO_ADDR
// exit ;
68343: POP
68344: POP
68345: GO 68351
// end ;
68347: GO 68281
68349: POP
68350: POP
// end ;
68351: LD_VAR 0 4
68355: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68356: LD_INT 0
68358: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68359: LD_VAR 0 1
68363: PPUSH
68364: LD_VAR 0 2
68368: PPUSH
68369: LD_INT 0
68371: PPUSH
68372: LD_INT 0
68374: PPUSH
68375: LD_INT 1
68377: PPUSH
68378: LD_INT 0
68380: PPUSH
68381: CALL_OW 587
// end ; end_of_file
68385: LD_VAR 0 3
68389: RET
// every 0 0$1 do
68390: GO 68392
68392: DISABLE
// begin enable ;
68393: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
68394: LD_STRING updateTimer(
68396: PUSH
68397: LD_OWVAR 1
68401: STR
68402: PUSH
68403: LD_STRING );
68405: STR
68406: PPUSH
68407: CALL_OW 559
// end ;
68411: END
// export function SOS_MapStart ( ) ; begin
68412: LD_INT 0
68414: PPUSH
// if streamModeActive then
68415: LD_EXP 67
68419: IFFALSE 68428
// DefineStreamItems ( true ) ;
68421: LD_INT 1
68423: PPUSH
68424: CALL 70082 0 1
// UpdateFactoryWaypoints ( ) ;
68428: CALL 82943 0 0
// UpdateWarehouseGatheringPoints ( ) ;
68432: CALL 83200 0 0
// end ;
68436: LD_VAR 0 1
68440: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
68441: LD_INT 0
68443: PPUSH
// if p2 = hack_mode then
68444: LD_VAR 0 2
68448: PUSH
68449: LD_INT 100
68451: EQUAL
68452: IFFALSE 69455
// begin if not StreamModeActive then
68454: LD_EXP 67
68458: NOT
68459: IFFALSE 68469
// StreamModeActive := true ;
68461: LD_ADDR_EXP 67
68465: PUSH
68466: LD_INT 1
68468: ST_TO_ADDR
// if p3 = 0 then
68469: LD_VAR 0 3
68473: PUSH
68474: LD_INT 0
68476: EQUAL
68477: IFFALSE 68483
// InitStreamMode ;
68479: CALL 69618 0 0
// if p3 = 1 then
68483: LD_VAR 0 3
68487: PUSH
68488: LD_INT 1
68490: EQUAL
68491: IFFALSE 68501
// sRocket := true ;
68493: LD_ADDR_EXP 72
68497: PUSH
68498: LD_INT 1
68500: ST_TO_ADDR
// if p3 = 2 then
68501: LD_VAR 0 3
68505: PUSH
68506: LD_INT 2
68508: EQUAL
68509: IFFALSE 68519
// sSpeed := true ;
68511: LD_ADDR_EXP 71
68515: PUSH
68516: LD_INT 1
68518: ST_TO_ADDR
// if p3 = 3 then
68519: LD_VAR 0 3
68523: PUSH
68524: LD_INT 3
68526: EQUAL
68527: IFFALSE 68537
// sEngine := true ;
68529: LD_ADDR_EXP 73
68533: PUSH
68534: LD_INT 1
68536: ST_TO_ADDR
// if p3 = 4 then
68537: LD_VAR 0 3
68541: PUSH
68542: LD_INT 4
68544: EQUAL
68545: IFFALSE 68555
// sSpec := true ;
68547: LD_ADDR_EXP 70
68551: PUSH
68552: LD_INT 1
68554: ST_TO_ADDR
// if p3 = 5 then
68555: LD_VAR 0 3
68559: PUSH
68560: LD_INT 5
68562: EQUAL
68563: IFFALSE 68573
// sLevel := true ;
68565: LD_ADDR_EXP 74
68569: PUSH
68570: LD_INT 1
68572: ST_TO_ADDR
// if p3 = 6 then
68573: LD_VAR 0 3
68577: PUSH
68578: LD_INT 6
68580: EQUAL
68581: IFFALSE 68591
// sArmoury := true ;
68583: LD_ADDR_EXP 75
68587: PUSH
68588: LD_INT 1
68590: ST_TO_ADDR
// if p3 = 7 then
68591: LD_VAR 0 3
68595: PUSH
68596: LD_INT 7
68598: EQUAL
68599: IFFALSE 68609
// sRadar := true ;
68601: LD_ADDR_EXP 76
68605: PUSH
68606: LD_INT 1
68608: ST_TO_ADDR
// if p3 = 8 then
68609: LD_VAR 0 3
68613: PUSH
68614: LD_INT 8
68616: EQUAL
68617: IFFALSE 68627
// sBunker := true ;
68619: LD_ADDR_EXP 77
68623: PUSH
68624: LD_INT 1
68626: ST_TO_ADDR
// if p3 = 9 then
68627: LD_VAR 0 3
68631: PUSH
68632: LD_INT 9
68634: EQUAL
68635: IFFALSE 68645
// sHack := true ;
68637: LD_ADDR_EXP 78
68641: PUSH
68642: LD_INT 1
68644: ST_TO_ADDR
// if p3 = 10 then
68645: LD_VAR 0 3
68649: PUSH
68650: LD_INT 10
68652: EQUAL
68653: IFFALSE 68663
// sFire := true ;
68655: LD_ADDR_EXP 79
68659: PUSH
68660: LD_INT 1
68662: ST_TO_ADDR
// if p3 = 11 then
68663: LD_VAR 0 3
68667: PUSH
68668: LD_INT 11
68670: EQUAL
68671: IFFALSE 68681
// sRefresh := true ;
68673: LD_ADDR_EXP 80
68677: PUSH
68678: LD_INT 1
68680: ST_TO_ADDR
// if p3 = 12 then
68681: LD_VAR 0 3
68685: PUSH
68686: LD_INT 12
68688: EQUAL
68689: IFFALSE 68699
// sExp := true ;
68691: LD_ADDR_EXP 81
68695: PUSH
68696: LD_INT 1
68698: ST_TO_ADDR
// if p3 = 13 then
68699: LD_VAR 0 3
68703: PUSH
68704: LD_INT 13
68706: EQUAL
68707: IFFALSE 68717
// sDepot := true ;
68709: LD_ADDR_EXP 82
68713: PUSH
68714: LD_INT 1
68716: ST_TO_ADDR
// if p3 = 14 then
68717: LD_VAR 0 3
68721: PUSH
68722: LD_INT 14
68724: EQUAL
68725: IFFALSE 68735
// sFlag := true ;
68727: LD_ADDR_EXP 83
68731: PUSH
68732: LD_INT 1
68734: ST_TO_ADDR
// if p3 = 15 then
68735: LD_VAR 0 3
68739: PUSH
68740: LD_INT 15
68742: EQUAL
68743: IFFALSE 68753
// sKamikadze := true ;
68745: LD_ADDR_EXP 91
68749: PUSH
68750: LD_INT 1
68752: ST_TO_ADDR
// if p3 = 16 then
68753: LD_VAR 0 3
68757: PUSH
68758: LD_INT 16
68760: EQUAL
68761: IFFALSE 68771
// sTroll := true ;
68763: LD_ADDR_EXP 92
68767: PUSH
68768: LD_INT 1
68770: ST_TO_ADDR
// if p3 = 17 then
68771: LD_VAR 0 3
68775: PUSH
68776: LD_INT 17
68778: EQUAL
68779: IFFALSE 68789
// sSlow := true ;
68781: LD_ADDR_EXP 93
68785: PUSH
68786: LD_INT 1
68788: ST_TO_ADDR
// if p3 = 18 then
68789: LD_VAR 0 3
68793: PUSH
68794: LD_INT 18
68796: EQUAL
68797: IFFALSE 68807
// sLack := true ;
68799: LD_ADDR_EXP 94
68803: PUSH
68804: LD_INT 1
68806: ST_TO_ADDR
// if p3 = 19 then
68807: LD_VAR 0 3
68811: PUSH
68812: LD_INT 19
68814: EQUAL
68815: IFFALSE 68825
// sTank := true ;
68817: LD_ADDR_EXP 96
68821: PUSH
68822: LD_INT 1
68824: ST_TO_ADDR
// if p3 = 20 then
68825: LD_VAR 0 3
68829: PUSH
68830: LD_INT 20
68832: EQUAL
68833: IFFALSE 68843
// sRemote := true ;
68835: LD_ADDR_EXP 97
68839: PUSH
68840: LD_INT 1
68842: ST_TO_ADDR
// if p3 = 21 then
68843: LD_VAR 0 3
68847: PUSH
68848: LD_INT 21
68850: EQUAL
68851: IFFALSE 68861
// sPowell := true ;
68853: LD_ADDR_EXP 98
68857: PUSH
68858: LD_INT 1
68860: ST_TO_ADDR
// if p3 = 22 then
68861: LD_VAR 0 3
68865: PUSH
68866: LD_INT 22
68868: EQUAL
68869: IFFALSE 68879
// sTeleport := true ;
68871: LD_ADDR_EXP 101
68875: PUSH
68876: LD_INT 1
68878: ST_TO_ADDR
// if p3 = 23 then
68879: LD_VAR 0 3
68883: PUSH
68884: LD_INT 23
68886: EQUAL
68887: IFFALSE 68897
// sOilTower := true ;
68889: LD_ADDR_EXP 103
68893: PUSH
68894: LD_INT 1
68896: ST_TO_ADDR
// if p3 = 24 then
68897: LD_VAR 0 3
68901: PUSH
68902: LD_INT 24
68904: EQUAL
68905: IFFALSE 68915
// sShovel := true ;
68907: LD_ADDR_EXP 104
68911: PUSH
68912: LD_INT 1
68914: ST_TO_ADDR
// if p3 = 25 then
68915: LD_VAR 0 3
68919: PUSH
68920: LD_INT 25
68922: EQUAL
68923: IFFALSE 68933
// sSheik := true ;
68925: LD_ADDR_EXP 105
68929: PUSH
68930: LD_INT 1
68932: ST_TO_ADDR
// if p3 = 26 then
68933: LD_VAR 0 3
68937: PUSH
68938: LD_INT 26
68940: EQUAL
68941: IFFALSE 68951
// sEarthquake := true ;
68943: LD_ADDR_EXP 107
68947: PUSH
68948: LD_INT 1
68950: ST_TO_ADDR
// if p3 = 27 then
68951: LD_VAR 0 3
68955: PUSH
68956: LD_INT 27
68958: EQUAL
68959: IFFALSE 68969
// sAI := true ;
68961: LD_ADDR_EXP 108
68965: PUSH
68966: LD_INT 1
68968: ST_TO_ADDR
// if p3 = 28 then
68969: LD_VAR 0 3
68973: PUSH
68974: LD_INT 28
68976: EQUAL
68977: IFFALSE 68987
// sCargo := true ;
68979: LD_ADDR_EXP 111
68983: PUSH
68984: LD_INT 1
68986: ST_TO_ADDR
// if p3 = 29 then
68987: LD_VAR 0 3
68991: PUSH
68992: LD_INT 29
68994: EQUAL
68995: IFFALSE 69005
// sDLaser := true ;
68997: LD_ADDR_EXP 112
69001: PUSH
69002: LD_INT 1
69004: ST_TO_ADDR
// if p3 = 30 then
69005: LD_VAR 0 3
69009: PUSH
69010: LD_INT 30
69012: EQUAL
69013: IFFALSE 69023
// sExchange := true ;
69015: LD_ADDR_EXP 113
69019: PUSH
69020: LD_INT 1
69022: ST_TO_ADDR
// if p3 = 31 then
69023: LD_VAR 0 3
69027: PUSH
69028: LD_INT 31
69030: EQUAL
69031: IFFALSE 69041
// sFac := true ;
69033: LD_ADDR_EXP 114
69037: PUSH
69038: LD_INT 1
69040: ST_TO_ADDR
// if p3 = 32 then
69041: LD_VAR 0 3
69045: PUSH
69046: LD_INT 32
69048: EQUAL
69049: IFFALSE 69059
// sPower := true ;
69051: LD_ADDR_EXP 115
69055: PUSH
69056: LD_INT 1
69058: ST_TO_ADDR
// if p3 = 33 then
69059: LD_VAR 0 3
69063: PUSH
69064: LD_INT 33
69066: EQUAL
69067: IFFALSE 69077
// sRandom := true ;
69069: LD_ADDR_EXP 116
69073: PUSH
69074: LD_INT 1
69076: ST_TO_ADDR
// if p3 = 34 then
69077: LD_VAR 0 3
69081: PUSH
69082: LD_INT 34
69084: EQUAL
69085: IFFALSE 69095
// sShield := true ;
69087: LD_ADDR_EXP 117
69091: PUSH
69092: LD_INT 1
69094: ST_TO_ADDR
// if p3 = 35 then
69095: LD_VAR 0 3
69099: PUSH
69100: LD_INT 35
69102: EQUAL
69103: IFFALSE 69113
// sTime := true ;
69105: LD_ADDR_EXP 118
69109: PUSH
69110: LD_INT 1
69112: ST_TO_ADDR
// if p3 = 36 then
69113: LD_VAR 0 3
69117: PUSH
69118: LD_INT 36
69120: EQUAL
69121: IFFALSE 69131
// sTools := true ;
69123: LD_ADDR_EXP 119
69127: PUSH
69128: LD_INT 1
69130: ST_TO_ADDR
// if p3 = 101 then
69131: LD_VAR 0 3
69135: PUSH
69136: LD_INT 101
69138: EQUAL
69139: IFFALSE 69149
// sSold := true ;
69141: LD_ADDR_EXP 84
69145: PUSH
69146: LD_INT 1
69148: ST_TO_ADDR
// if p3 = 102 then
69149: LD_VAR 0 3
69153: PUSH
69154: LD_INT 102
69156: EQUAL
69157: IFFALSE 69167
// sDiff := true ;
69159: LD_ADDR_EXP 85
69163: PUSH
69164: LD_INT 1
69166: ST_TO_ADDR
// if p3 = 103 then
69167: LD_VAR 0 3
69171: PUSH
69172: LD_INT 103
69174: EQUAL
69175: IFFALSE 69185
// sFog := true ;
69177: LD_ADDR_EXP 88
69181: PUSH
69182: LD_INT 1
69184: ST_TO_ADDR
// if p3 = 104 then
69185: LD_VAR 0 3
69189: PUSH
69190: LD_INT 104
69192: EQUAL
69193: IFFALSE 69203
// sReset := true ;
69195: LD_ADDR_EXP 89
69199: PUSH
69200: LD_INT 1
69202: ST_TO_ADDR
// if p3 = 105 then
69203: LD_VAR 0 3
69207: PUSH
69208: LD_INT 105
69210: EQUAL
69211: IFFALSE 69221
// sSun := true ;
69213: LD_ADDR_EXP 90
69217: PUSH
69218: LD_INT 1
69220: ST_TO_ADDR
// if p3 = 106 then
69221: LD_VAR 0 3
69225: PUSH
69226: LD_INT 106
69228: EQUAL
69229: IFFALSE 69239
// sTiger := true ;
69231: LD_ADDR_EXP 86
69235: PUSH
69236: LD_INT 1
69238: ST_TO_ADDR
// if p3 = 107 then
69239: LD_VAR 0 3
69243: PUSH
69244: LD_INT 107
69246: EQUAL
69247: IFFALSE 69257
// sBomb := true ;
69249: LD_ADDR_EXP 87
69253: PUSH
69254: LD_INT 1
69256: ST_TO_ADDR
// if p3 = 108 then
69257: LD_VAR 0 3
69261: PUSH
69262: LD_INT 108
69264: EQUAL
69265: IFFALSE 69275
// sWound := true ;
69267: LD_ADDR_EXP 95
69271: PUSH
69272: LD_INT 1
69274: ST_TO_ADDR
// if p3 = 109 then
69275: LD_VAR 0 3
69279: PUSH
69280: LD_INT 109
69282: EQUAL
69283: IFFALSE 69293
// sBetray := true ;
69285: LD_ADDR_EXP 99
69289: PUSH
69290: LD_INT 1
69292: ST_TO_ADDR
// if p3 = 110 then
69293: LD_VAR 0 3
69297: PUSH
69298: LD_INT 110
69300: EQUAL
69301: IFFALSE 69311
// sContamin := true ;
69303: LD_ADDR_EXP 100
69307: PUSH
69308: LD_INT 1
69310: ST_TO_ADDR
// if p3 = 111 then
69311: LD_VAR 0 3
69315: PUSH
69316: LD_INT 111
69318: EQUAL
69319: IFFALSE 69329
// sOil := true ;
69321: LD_ADDR_EXP 102
69325: PUSH
69326: LD_INT 1
69328: ST_TO_ADDR
// if p3 = 112 then
69329: LD_VAR 0 3
69333: PUSH
69334: LD_INT 112
69336: EQUAL
69337: IFFALSE 69347
// sStu := true ;
69339: LD_ADDR_EXP 106
69343: PUSH
69344: LD_INT 1
69346: ST_TO_ADDR
// if p3 = 113 then
69347: LD_VAR 0 3
69351: PUSH
69352: LD_INT 113
69354: EQUAL
69355: IFFALSE 69365
// sBazooka := true ;
69357: LD_ADDR_EXP 109
69361: PUSH
69362: LD_INT 1
69364: ST_TO_ADDR
// if p3 = 114 then
69365: LD_VAR 0 3
69369: PUSH
69370: LD_INT 114
69372: EQUAL
69373: IFFALSE 69383
// sMortar := true ;
69375: LD_ADDR_EXP 110
69379: PUSH
69380: LD_INT 1
69382: ST_TO_ADDR
// if p3 = 115 then
69383: LD_VAR 0 3
69387: PUSH
69388: LD_INT 115
69390: EQUAL
69391: IFFALSE 69401
// sRanger := true ;
69393: LD_ADDR_EXP 120
69397: PUSH
69398: LD_INT 1
69400: ST_TO_ADDR
// if p3 = 116 then
69401: LD_VAR 0 3
69405: PUSH
69406: LD_INT 116
69408: EQUAL
69409: IFFALSE 69419
// sComputer := true ;
69411: LD_ADDR_EXP 121
69415: PUSH
69416: LD_INT 1
69418: ST_TO_ADDR
// if p3 = 117 then
69419: LD_VAR 0 3
69423: PUSH
69424: LD_INT 117
69426: EQUAL
69427: IFFALSE 69437
// s30 := true ;
69429: LD_ADDR_EXP 122
69433: PUSH
69434: LD_INT 1
69436: ST_TO_ADDR
// if p3 = 118 then
69437: LD_VAR 0 3
69441: PUSH
69442: LD_INT 118
69444: EQUAL
69445: IFFALSE 69455
// s60 := true ;
69447: LD_ADDR_EXP 123
69451: PUSH
69452: LD_INT 1
69454: ST_TO_ADDR
// end ; if p2 = stream_mode then
69455: LD_VAR 0 2
69459: PUSH
69460: LD_INT 101
69462: EQUAL
69463: IFFALSE 69591
// begin case p3 of 1 :
69465: LD_VAR 0 3
69469: PUSH
69470: LD_INT 1
69472: DOUBLE
69473: EQUAL
69474: IFTRUE 69478
69476: GO 69485
69478: POP
// hHackUnlimitedResources ; 2 :
69479: CALL 81689 0 0
69483: GO 69591
69485: LD_INT 2
69487: DOUBLE
69488: EQUAL
69489: IFTRUE 69493
69491: GO 69500
69493: POP
// hHackSetLevel10 ; 3 :
69494: CALL 81822 0 0
69498: GO 69591
69500: LD_INT 3
69502: DOUBLE
69503: EQUAL
69504: IFTRUE 69508
69506: GO 69515
69508: POP
// hHackSetLevel10YourUnits ; 4 :
69509: CALL 81907 0 0
69513: GO 69591
69515: LD_INT 4
69517: DOUBLE
69518: EQUAL
69519: IFTRUE 69523
69521: GO 69530
69523: POP
// hHackInvincible ; 5 :
69524: CALL 82355 0 0
69528: GO 69591
69530: LD_INT 5
69532: DOUBLE
69533: EQUAL
69534: IFTRUE 69538
69536: GO 69545
69538: POP
// hHackInvisible ; 6 :
69539: CALL 82466 0 0
69543: GO 69591
69545: LD_INT 6
69547: DOUBLE
69548: EQUAL
69549: IFTRUE 69553
69551: GO 69560
69553: POP
// hHackChangeYourSide ; 7 :
69554: CALL 82523 0 0
69558: GO 69591
69560: LD_INT 7
69562: DOUBLE
69563: EQUAL
69564: IFTRUE 69568
69566: GO 69575
69568: POP
// hHackChangeUnitSide ; 8 :
69569: CALL 82565 0 0
69573: GO 69591
69575: LD_INT 8
69577: DOUBLE
69578: EQUAL
69579: IFTRUE 69583
69581: GO 69590
69583: POP
// hHackFog ; end ;
69584: CALL 82666 0 0
69588: GO 69591
69590: POP
// end ; end ;
69591: LD_VAR 0 7
69595: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
69596: GO 69598
69598: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
69599: LD_STRING initStreamRollete();
69601: PPUSH
69602: CALL_OW 559
// InitStreamMode ;
69606: CALL 69618 0 0
// DefineStreamItems ( false ) ;
69610: LD_INT 0
69612: PPUSH
69613: CALL 70082 0 1
// end ;
69617: END
// function InitStreamMode ; begin
69618: LD_INT 0
69620: PPUSH
// streamModeActive := false ;
69621: LD_ADDR_EXP 67
69625: PUSH
69626: LD_INT 0
69628: ST_TO_ADDR
// normalCounter := 36 ;
69629: LD_ADDR_EXP 68
69633: PUSH
69634: LD_INT 36
69636: ST_TO_ADDR
// hardcoreCounter := 18 ;
69637: LD_ADDR_EXP 69
69641: PUSH
69642: LD_INT 18
69644: ST_TO_ADDR
// sRocket := false ;
69645: LD_ADDR_EXP 72
69649: PUSH
69650: LD_INT 0
69652: ST_TO_ADDR
// sSpeed := false ;
69653: LD_ADDR_EXP 71
69657: PUSH
69658: LD_INT 0
69660: ST_TO_ADDR
// sEngine := false ;
69661: LD_ADDR_EXP 73
69665: PUSH
69666: LD_INT 0
69668: ST_TO_ADDR
// sSpec := false ;
69669: LD_ADDR_EXP 70
69673: PUSH
69674: LD_INT 0
69676: ST_TO_ADDR
// sLevel := false ;
69677: LD_ADDR_EXP 74
69681: PUSH
69682: LD_INT 0
69684: ST_TO_ADDR
// sArmoury := false ;
69685: LD_ADDR_EXP 75
69689: PUSH
69690: LD_INT 0
69692: ST_TO_ADDR
// sRadar := false ;
69693: LD_ADDR_EXP 76
69697: PUSH
69698: LD_INT 0
69700: ST_TO_ADDR
// sBunker := false ;
69701: LD_ADDR_EXP 77
69705: PUSH
69706: LD_INT 0
69708: ST_TO_ADDR
// sHack := false ;
69709: LD_ADDR_EXP 78
69713: PUSH
69714: LD_INT 0
69716: ST_TO_ADDR
// sFire := false ;
69717: LD_ADDR_EXP 79
69721: PUSH
69722: LD_INT 0
69724: ST_TO_ADDR
// sRefresh := false ;
69725: LD_ADDR_EXP 80
69729: PUSH
69730: LD_INT 0
69732: ST_TO_ADDR
// sExp := false ;
69733: LD_ADDR_EXP 81
69737: PUSH
69738: LD_INT 0
69740: ST_TO_ADDR
// sDepot := false ;
69741: LD_ADDR_EXP 82
69745: PUSH
69746: LD_INT 0
69748: ST_TO_ADDR
// sFlag := false ;
69749: LD_ADDR_EXP 83
69753: PUSH
69754: LD_INT 0
69756: ST_TO_ADDR
// sKamikadze := false ;
69757: LD_ADDR_EXP 91
69761: PUSH
69762: LD_INT 0
69764: ST_TO_ADDR
// sTroll := false ;
69765: LD_ADDR_EXP 92
69769: PUSH
69770: LD_INT 0
69772: ST_TO_ADDR
// sSlow := false ;
69773: LD_ADDR_EXP 93
69777: PUSH
69778: LD_INT 0
69780: ST_TO_ADDR
// sLack := false ;
69781: LD_ADDR_EXP 94
69785: PUSH
69786: LD_INT 0
69788: ST_TO_ADDR
// sTank := false ;
69789: LD_ADDR_EXP 96
69793: PUSH
69794: LD_INT 0
69796: ST_TO_ADDR
// sRemote := false ;
69797: LD_ADDR_EXP 97
69801: PUSH
69802: LD_INT 0
69804: ST_TO_ADDR
// sPowell := false ;
69805: LD_ADDR_EXP 98
69809: PUSH
69810: LD_INT 0
69812: ST_TO_ADDR
// sTeleport := false ;
69813: LD_ADDR_EXP 101
69817: PUSH
69818: LD_INT 0
69820: ST_TO_ADDR
// sOilTower := false ;
69821: LD_ADDR_EXP 103
69825: PUSH
69826: LD_INT 0
69828: ST_TO_ADDR
// sShovel := false ;
69829: LD_ADDR_EXP 104
69833: PUSH
69834: LD_INT 0
69836: ST_TO_ADDR
// sSheik := false ;
69837: LD_ADDR_EXP 105
69841: PUSH
69842: LD_INT 0
69844: ST_TO_ADDR
// sEarthquake := false ;
69845: LD_ADDR_EXP 107
69849: PUSH
69850: LD_INT 0
69852: ST_TO_ADDR
// sAI := false ;
69853: LD_ADDR_EXP 108
69857: PUSH
69858: LD_INT 0
69860: ST_TO_ADDR
// sCargo := false ;
69861: LD_ADDR_EXP 111
69865: PUSH
69866: LD_INT 0
69868: ST_TO_ADDR
// sDLaser := false ;
69869: LD_ADDR_EXP 112
69873: PUSH
69874: LD_INT 0
69876: ST_TO_ADDR
// sExchange := false ;
69877: LD_ADDR_EXP 113
69881: PUSH
69882: LD_INT 0
69884: ST_TO_ADDR
// sFac := false ;
69885: LD_ADDR_EXP 114
69889: PUSH
69890: LD_INT 0
69892: ST_TO_ADDR
// sPower := false ;
69893: LD_ADDR_EXP 115
69897: PUSH
69898: LD_INT 0
69900: ST_TO_ADDR
// sRandom := false ;
69901: LD_ADDR_EXP 116
69905: PUSH
69906: LD_INT 0
69908: ST_TO_ADDR
// sShield := false ;
69909: LD_ADDR_EXP 117
69913: PUSH
69914: LD_INT 0
69916: ST_TO_ADDR
// sTime := false ;
69917: LD_ADDR_EXP 118
69921: PUSH
69922: LD_INT 0
69924: ST_TO_ADDR
// sTools := false ;
69925: LD_ADDR_EXP 119
69929: PUSH
69930: LD_INT 0
69932: ST_TO_ADDR
// sSold := false ;
69933: LD_ADDR_EXP 84
69937: PUSH
69938: LD_INT 0
69940: ST_TO_ADDR
// sDiff := false ;
69941: LD_ADDR_EXP 85
69945: PUSH
69946: LD_INT 0
69948: ST_TO_ADDR
// sFog := false ;
69949: LD_ADDR_EXP 88
69953: PUSH
69954: LD_INT 0
69956: ST_TO_ADDR
// sReset := false ;
69957: LD_ADDR_EXP 89
69961: PUSH
69962: LD_INT 0
69964: ST_TO_ADDR
// sSun := false ;
69965: LD_ADDR_EXP 90
69969: PUSH
69970: LD_INT 0
69972: ST_TO_ADDR
// sTiger := false ;
69973: LD_ADDR_EXP 86
69977: PUSH
69978: LD_INT 0
69980: ST_TO_ADDR
// sBomb := false ;
69981: LD_ADDR_EXP 87
69985: PUSH
69986: LD_INT 0
69988: ST_TO_ADDR
// sWound := false ;
69989: LD_ADDR_EXP 95
69993: PUSH
69994: LD_INT 0
69996: ST_TO_ADDR
// sBetray := false ;
69997: LD_ADDR_EXP 99
70001: PUSH
70002: LD_INT 0
70004: ST_TO_ADDR
// sContamin := false ;
70005: LD_ADDR_EXP 100
70009: PUSH
70010: LD_INT 0
70012: ST_TO_ADDR
// sOil := false ;
70013: LD_ADDR_EXP 102
70017: PUSH
70018: LD_INT 0
70020: ST_TO_ADDR
// sStu := false ;
70021: LD_ADDR_EXP 106
70025: PUSH
70026: LD_INT 0
70028: ST_TO_ADDR
// sBazooka := false ;
70029: LD_ADDR_EXP 109
70033: PUSH
70034: LD_INT 0
70036: ST_TO_ADDR
// sMortar := false ;
70037: LD_ADDR_EXP 110
70041: PUSH
70042: LD_INT 0
70044: ST_TO_ADDR
// sRanger := false ;
70045: LD_ADDR_EXP 120
70049: PUSH
70050: LD_INT 0
70052: ST_TO_ADDR
// sComputer := false ;
70053: LD_ADDR_EXP 121
70057: PUSH
70058: LD_INT 0
70060: ST_TO_ADDR
// s30 := false ;
70061: LD_ADDR_EXP 122
70065: PUSH
70066: LD_INT 0
70068: ST_TO_ADDR
// s60 := false ;
70069: LD_ADDR_EXP 123
70073: PUSH
70074: LD_INT 0
70076: ST_TO_ADDR
// end ;
70077: LD_VAR 0 1
70081: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
70082: LD_INT 0
70084: PPUSH
70085: PPUSH
70086: PPUSH
70087: PPUSH
70088: PPUSH
70089: PPUSH
70090: PPUSH
// result := [ ] ;
70091: LD_ADDR_VAR 0 2
70095: PUSH
70096: EMPTY
70097: ST_TO_ADDR
// if campaign_id = 1 then
70098: LD_OWVAR 69
70102: PUSH
70103: LD_INT 1
70105: EQUAL
70106: IFFALSE 73272
// begin case mission_number of 1 :
70108: LD_OWVAR 70
70112: PUSH
70113: LD_INT 1
70115: DOUBLE
70116: EQUAL
70117: IFTRUE 70121
70119: GO 70197
70121: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
70122: LD_ADDR_VAR 0 2
70126: PUSH
70127: LD_INT 2
70129: PUSH
70130: LD_INT 4
70132: PUSH
70133: LD_INT 11
70135: PUSH
70136: LD_INT 12
70138: PUSH
70139: LD_INT 15
70141: PUSH
70142: LD_INT 16
70144: PUSH
70145: LD_INT 22
70147: PUSH
70148: LD_INT 23
70150: PUSH
70151: LD_INT 26
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 101
70167: PUSH
70168: LD_INT 102
70170: PUSH
70171: LD_INT 106
70173: PUSH
70174: LD_INT 116
70176: PUSH
70177: LD_INT 117
70179: PUSH
70180: LD_INT 118
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: ST_TO_ADDR
70195: GO 73270
70197: LD_INT 2
70199: DOUBLE
70200: EQUAL
70201: IFTRUE 70205
70203: GO 70289
70205: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
70206: LD_ADDR_VAR 0 2
70210: PUSH
70211: LD_INT 2
70213: PUSH
70214: LD_INT 4
70216: PUSH
70217: LD_INT 11
70219: PUSH
70220: LD_INT 12
70222: PUSH
70223: LD_INT 15
70225: PUSH
70226: LD_INT 16
70228: PUSH
70229: LD_INT 22
70231: PUSH
70232: LD_INT 23
70234: PUSH
70235: LD_INT 26
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 101
70251: PUSH
70252: LD_INT 102
70254: PUSH
70255: LD_INT 105
70257: PUSH
70258: LD_INT 106
70260: PUSH
70261: LD_INT 108
70263: PUSH
70264: LD_INT 116
70266: PUSH
70267: LD_INT 117
70269: PUSH
70270: LD_INT 118
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: ST_TO_ADDR
70287: GO 73270
70289: LD_INT 3
70291: DOUBLE
70292: EQUAL
70293: IFTRUE 70297
70295: GO 70385
70297: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
70298: LD_ADDR_VAR 0 2
70302: PUSH
70303: LD_INT 2
70305: PUSH
70306: LD_INT 4
70308: PUSH
70309: LD_INT 5
70311: PUSH
70312: LD_INT 11
70314: PUSH
70315: LD_INT 12
70317: PUSH
70318: LD_INT 15
70320: PUSH
70321: LD_INT 16
70323: PUSH
70324: LD_INT 22
70326: PUSH
70327: LD_INT 26
70329: PUSH
70330: LD_INT 36
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 101
70347: PUSH
70348: LD_INT 102
70350: PUSH
70351: LD_INT 105
70353: PUSH
70354: LD_INT 106
70356: PUSH
70357: LD_INT 108
70359: PUSH
70360: LD_INT 116
70362: PUSH
70363: LD_INT 117
70365: PUSH
70366: LD_INT 118
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: ST_TO_ADDR
70383: GO 73270
70385: LD_INT 4
70387: DOUBLE
70388: EQUAL
70389: IFTRUE 70393
70391: GO 70489
70393: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
70394: LD_ADDR_VAR 0 2
70398: PUSH
70399: LD_INT 2
70401: PUSH
70402: LD_INT 4
70404: PUSH
70405: LD_INT 5
70407: PUSH
70408: LD_INT 8
70410: PUSH
70411: LD_INT 11
70413: PUSH
70414: LD_INT 12
70416: PUSH
70417: LD_INT 15
70419: PUSH
70420: LD_INT 16
70422: PUSH
70423: LD_INT 22
70425: PUSH
70426: LD_INT 23
70428: PUSH
70429: LD_INT 26
70431: PUSH
70432: LD_INT 36
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 101
70451: PUSH
70452: LD_INT 102
70454: PUSH
70455: LD_INT 105
70457: PUSH
70458: LD_INT 106
70460: PUSH
70461: LD_INT 108
70463: PUSH
70464: LD_INT 116
70466: PUSH
70467: LD_INT 117
70469: PUSH
70470: LD_INT 118
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: ST_TO_ADDR
70487: GO 73270
70489: LD_INT 5
70491: DOUBLE
70492: EQUAL
70493: IFTRUE 70497
70495: GO 70609
70497: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
70498: LD_ADDR_VAR 0 2
70502: PUSH
70503: LD_INT 2
70505: PUSH
70506: LD_INT 4
70508: PUSH
70509: LD_INT 5
70511: PUSH
70512: LD_INT 6
70514: PUSH
70515: LD_INT 8
70517: PUSH
70518: LD_INT 11
70520: PUSH
70521: LD_INT 12
70523: PUSH
70524: LD_INT 15
70526: PUSH
70527: LD_INT 16
70529: PUSH
70530: LD_INT 22
70532: PUSH
70533: LD_INT 23
70535: PUSH
70536: LD_INT 25
70538: PUSH
70539: LD_INT 26
70541: PUSH
70542: LD_INT 36
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 101
70563: PUSH
70564: LD_INT 102
70566: PUSH
70567: LD_INT 105
70569: PUSH
70570: LD_INT 106
70572: PUSH
70573: LD_INT 108
70575: PUSH
70576: LD_INT 109
70578: PUSH
70579: LD_INT 112
70581: PUSH
70582: LD_INT 116
70584: PUSH
70585: LD_INT 117
70587: PUSH
70588: LD_INT 118
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: ST_TO_ADDR
70607: GO 73270
70609: LD_INT 6
70611: DOUBLE
70612: EQUAL
70613: IFTRUE 70617
70615: GO 70749
70617: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
70618: LD_ADDR_VAR 0 2
70622: PUSH
70623: LD_INT 2
70625: PUSH
70626: LD_INT 4
70628: PUSH
70629: LD_INT 5
70631: PUSH
70632: LD_INT 6
70634: PUSH
70635: LD_INT 8
70637: PUSH
70638: LD_INT 11
70640: PUSH
70641: LD_INT 12
70643: PUSH
70644: LD_INT 15
70646: PUSH
70647: LD_INT 16
70649: PUSH
70650: LD_INT 20
70652: PUSH
70653: LD_INT 21
70655: PUSH
70656: LD_INT 22
70658: PUSH
70659: LD_INT 23
70661: PUSH
70662: LD_INT 25
70664: PUSH
70665: LD_INT 26
70667: PUSH
70668: LD_INT 30
70670: PUSH
70671: LD_INT 31
70673: PUSH
70674: LD_INT 32
70676: PUSH
70677: LD_INT 36
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 101
70703: PUSH
70704: LD_INT 102
70706: PUSH
70707: LD_INT 105
70709: PUSH
70710: LD_INT 106
70712: PUSH
70713: LD_INT 108
70715: PUSH
70716: LD_INT 109
70718: PUSH
70719: LD_INT 112
70721: PUSH
70722: LD_INT 116
70724: PUSH
70725: LD_INT 117
70727: PUSH
70728: LD_INT 118
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: ST_TO_ADDR
70747: GO 73270
70749: LD_INT 7
70751: DOUBLE
70752: EQUAL
70753: IFTRUE 70757
70755: GO 70869
70757: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
70758: LD_ADDR_VAR 0 2
70762: PUSH
70763: LD_INT 2
70765: PUSH
70766: LD_INT 4
70768: PUSH
70769: LD_INT 5
70771: PUSH
70772: LD_INT 7
70774: PUSH
70775: LD_INT 11
70777: PUSH
70778: LD_INT 12
70780: PUSH
70781: LD_INT 15
70783: PUSH
70784: LD_INT 16
70786: PUSH
70787: LD_INT 20
70789: PUSH
70790: LD_INT 21
70792: PUSH
70793: LD_INT 22
70795: PUSH
70796: LD_INT 23
70798: PUSH
70799: LD_INT 25
70801: PUSH
70802: LD_INT 26
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 101
70823: PUSH
70824: LD_INT 102
70826: PUSH
70827: LD_INT 103
70829: PUSH
70830: LD_INT 105
70832: PUSH
70833: LD_INT 106
70835: PUSH
70836: LD_INT 108
70838: PUSH
70839: LD_INT 112
70841: PUSH
70842: LD_INT 116
70844: PUSH
70845: LD_INT 117
70847: PUSH
70848: LD_INT 118
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: ST_TO_ADDR
70867: GO 73270
70869: LD_INT 8
70871: DOUBLE
70872: EQUAL
70873: IFTRUE 70877
70875: GO 71017
70877: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
70878: LD_ADDR_VAR 0 2
70882: PUSH
70883: LD_INT 2
70885: PUSH
70886: LD_INT 4
70888: PUSH
70889: LD_INT 5
70891: PUSH
70892: LD_INT 6
70894: PUSH
70895: LD_INT 7
70897: PUSH
70898: LD_INT 8
70900: PUSH
70901: LD_INT 11
70903: PUSH
70904: LD_INT 12
70906: PUSH
70907: LD_INT 15
70909: PUSH
70910: LD_INT 16
70912: PUSH
70913: LD_INT 20
70915: PUSH
70916: LD_INT 21
70918: PUSH
70919: LD_INT 22
70921: PUSH
70922: LD_INT 23
70924: PUSH
70925: LD_INT 25
70927: PUSH
70928: LD_INT 26
70930: PUSH
70931: LD_INT 30
70933: PUSH
70934: LD_INT 31
70936: PUSH
70937: LD_INT 32
70939: PUSH
70940: LD_INT 36
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 101
70967: PUSH
70968: LD_INT 102
70970: PUSH
70971: LD_INT 103
70973: PUSH
70974: LD_INT 105
70976: PUSH
70977: LD_INT 106
70979: PUSH
70980: LD_INT 108
70982: PUSH
70983: LD_INT 109
70985: PUSH
70986: LD_INT 112
70988: PUSH
70989: LD_INT 116
70991: PUSH
70992: LD_INT 117
70994: PUSH
70995: LD_INT 118
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: ST_TO_ADDR
71015: GO 73270
71017: LD_INT 9
71019: DOUBLE
71020: EQUAL
71021: IFTRUE 71025
71023: GO 71173
71025: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
71026: LD_ADDR_VAR 0 2
71030: PUSH
71031: LD_INT 2
71033: PUSH
71034: LD_INT 4
71036: PUSH
71037: LD_INT 5
71039: PUSH
71040: LD_INT 6
71042: PUSH
71043: LD_INT 7
71045: PUSH
71046: LD_INT 8
71048: PUSH
71049: LD_INT 11
71051: PUSH
71052: LD_INT 12
71054: PUSH
71055: LD_INT 15
71057: PUSH
71058: LD_INT 16
71060: PUSH
71061: LD_INT 20
71063: PUSH
71064: LD_INT 21
71066: PUSH
71067: LD_INT 22
71069: PUSH
71070: LD_INT 23
71072: PUSH
71073: LD_INT 25
71075: PUSH
71076: LD_INT 26
71078: PUSH
71079: LD_INT 28
71081: PUSH
71082: LD_INT 30
71084: PUSH
71085: LD_INT 31
71087: PUSH
71088: LD_INT 32
71090: PUSH
71091: LD_INT 36
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 101
71119: PUSH
71120: LD_INT 102
71122: PUSH
71123: LD_INT 103
71125: PUSH
71126: LD_INT 105
71128: PUSH
71129: LD_INT 106
71131: PUSH
71132: LD_INT 108
71134: PUSH
71135: LD_INT 109
71137: PUSH
71138: LD_INT 112
71140: PUSH
71141: LD_INT 114
71143: PUSH
71144: LD_INT 116
71146: PUSH
71147: LD_INT 117
71149: PUSH
71150: LD_INT 118
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: ST_TO_ADDR
71171: GO 73270
71173: LD_INT 10
71175: DOUBLE
71176: EQUAL
71177: IFTRUE 71181
71179: GO 71377
71181: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
71182: LD_ADDR_VAR 0 2
71186: PUSH
71187: LD_INT 2
71189: PUSH
71190: LD_INT 4
71192: PUSH
71193: LD_INT 5
71195: PUSH
71196: LD_INT 6
71198: PUSH
71199: LD_INT 7
71201: PUSH
71202: LD_INT 8
71204: PUSH
71205: LD_INT 9
71207: PUSH
71208: LD_INT 10
71210: PUSH
71211: LD_INT 11
71213: PUSH
71214: LD_INT 12
71216: PUSH
71217: LD_INT 13
71219: PUSH
71220: LD_INT 14
71222: PUSH
71223: LD_INT 15
71225: PUSH
71226: LD_INT 16
71228: PUSH
71229: LD_INT 17
71231: PUSH
71232: LD_INT 18
71234: PUSH
71235: LD_INT 19
71237: PUSH
71238: LD_INT 20
71240: PUSH
71241: LD_INT 21
71243: PUSH
71244: LD_INT 22
71246: PUSH
71247: LD_INT 23
71249: PUSH
71250: LD_INT 24
71252: PUSH
71253: LD_INT 25
71255: PUSH
71256: LD_INT 26
71258: PUSH
71259: LD_INT 28
71261: PUSH
71262: LD_INT 30
71264: PUSH
71265: LD_INT 31
71267: PUSH
71268: LD_INT 32
71270: PUSH
71271: LD_INT 36
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 101
71307: PUSH
71308: LD_INT 102
71310: PUSH
71311: LD_INT 103
71313: PUSH
71314: LD_INT 104
71316: PUSH
71317: LD_INT 105
71319: PUSH
71320: LD_INT 106
71322: PUSH
71323: LD_INT 107
71325: PUSH
71326: LD_INT 108
71328: PUSH
71329: LD_INT 109
71331: PUSH
71332: LD_INT 110
71334: PUSH
71335: LD_INT 111
71337: PUSH
71338: LD_INT 112
71340: PUSH
71341: LD_INT 114
71343: PUSH
71344: LD_INT 116
71346: PUSH
71347: LD_INT 117
71349: PUSH
71350: LD_INT 118
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: ST_TO_ADDR
71375: GO 73270
71377: LD_INT 11
71379: DOUBLE
71380: EQUAL
71381: IFTRUE 71385
71383: GO 71589
71385: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
71386: LD_ADDR_VAR 0 2
71390: PUSH
71391: LD_INT 2
71393: PUSH
71394: LD_INT 3
71396: PUSH
71397: LD_INT 4
71399: PUSH
71400: LD_INT 5
71402: PUSH
71403: LD_INT 6
71405: PUSH
71406: LD_INT 7
71408: PUSH
71409: LD_INT 8
71411: PUSH
71412: LD_INT 9
71414: PUSH
71415: LD_INT 10
71417: PUSH
71418: LD_INT 11
71420: PUSH
71421: LD_INT 12
71423: PUSH
71424: LD_INT 13
71426: PUSH
71427: LD_INT 14
71429: PUSH
71430: LD_INT 15
71432: PUSH
71433: LD_INT 16
71435: PUSH
71436: LD_INT 17
71438: PUSH
71439: LD_INT 18
71441: PUSH
71442: LD_INT 19
71444: PUSH
71445: LD_INT 20
71447: PUSH
71448: LD_INT 21
71450: PUSH
71451: LD_INT 22
71453: PUSH
71454: LD_INT 23
71456: PUSH
71457: LD_INT 24
71459: PUSH
71460: LD_INT 25
71462: PUSH
71463: LD_INT 26
71465: PUSH
71466: LD_INT 28
71468: PUSH
71469: LD_INT 30
71471: PUSH
71472: LD_INT 31
71474: PUSH
71475: LD_INT 32
71477: PUSH
71478: LD_INT 34
71480: PUSH
71481: LD_INT 36
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 101
71519: PUSH
71520: LD_INT 102
71522: PUSH
71523: LD_INT 103
71525: PUSH
71526: LD_INT 104
71528: PUSH
71529: LD_INT 105
71531: PUSH
71532: LD_INT 106
71534: PUSH
71535: LD_INT 107
71537: PUSH
71538: LD_INT 108
71540: PUSH
71541: LD_INT 109
71543: PUSH
71544: LD_INT 110
71546: PUSH
71547: LD_INT 111
71549: PUSH
71550: LD_INT 112
71552: PUSH
71553: LD_INT 114
71555: PUSH
71556: LD_INT 116
71558: PUSH
71559: LD_INT 117
71561: PUSH
71562: LD_INT 118
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: ST_TO_ADDR
71587: GO 73270
71589: LD_INT 12
71591: DOUBLE
71592: EQUAL
71593: IFTRUE 71597
71595: GO 71817
71597: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
71598: LD_ADDR_VAR 0 2
71602: PUSH
71603: LD_INT 1
71605: PUSH
71606: LD_INT 2
71608: PUSH
71609: LD_INT 3
71611: PUSH
71612: LD_INT 4
71614: PUSH
71615: LD_INT 5
71617: PUSH
71618: LD_INT 6
71620: PUSH
71621: LD_INT 7
71623: PUSH
71624: LD_INT 8
71626: PUSH
71627: LD_INT 9
71629: PUSH
71630: LD_INT 10
71632: PUSH
71633: LD_INT 11
71635: PUSH
71636: LD_INT 12
71638: PUSH
71639: LD_INT 13
71641: PUSH
71642: LD_INT 14
71644: PUSH
71645: LD_INT 15
71647: PUSH
71648: LD_INT 16
71650: PUSH
71651: LD_INT 17
71653: PUSH
71654: LD_INT 18
71656: PUSH
71657: LD_INT 19
71659: PUSH
71660: LD_INT 20
71662: PUSH
71663: LD_INT 21
71665: PUSH
71666: LD_INT 22
71668: PUSH
71669: LD_INT 23
71671: PUSH
71672: LD_INT 24
71674: PUSH
71675: LD_INT 25
71677: PUSH
71678: LD_INT 26
71680: PUSH
71681: LD_INT 27
71683: PUSH
71684: LD_INT 28
71686: PUSH
71687: LD_INT 30
71689: PUSH
71690: LD_INT 31
71692: PUSH
71693: LD_INT 32
71695: PUSH
71696: LD_INT 33
71698: PUSH
71699: LD_INT 34
71701: PUSH
71702: LD_INT 36
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 101
71743: PUSH
71744: LD_INT 102
71746: PUSH
71747: LD_INT 103
71749: PUSH
71750: LD_INT 104
71752: PUSH
71753: LD_INT 105
71755: PUSH
71756: LD_INT 106
71758: PUSH
71759: LD_INT 107
71761: PUSH
71762: LD_INT 108
71764: PUSH
71765: LD_INT 109
71767: PUSH
71768: LD_INT 110
71770: PUSH
71771: LD_INT 111
71773: PUSH
71774: LD_INT 112
71776: PUSH
71777: LD_INT 113
71779: PUSH
71780: LD_INT 114
71782: PUSH
71783: LD_INT 116
71785: PUSH
71786: LD_INT 117
71788: PUSH
71789: LD_INT 118
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: ST_TO_ADDR
71815: GO 73270
71817: LD_INT 13
71819: DOUBLE
71820: EQUAL
71821: IFTRUE 71825
71823: GO 72033
71825: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
71826: LD_ADDR_VAR 0 2
71830: PUSH
71831: LD_INT 1
71833: PUSH
71834: LD_INT 2
71836: PUSH
71837: LD_INT 3
71839: PUSH
71840: LD_INT 4
71842: PUSH
71843: LD_INT 5
71845: PUSH
71846: LD_INT 8
71848: PUSH
71849: LD_INT 9
71851: PUSH
71852: LD_INT 10
71854: PUSH
71855: LD_INT 11
71857: PUSH
71858: LD_INT 12
71860: PUSH
71861: LD_INT 14
71863: PUSH
71864: LD_INT 15
71866: PUSH
71867: LD_INT 16
71869: PUSH
71870: LD_INT 17
71872: PUSH
71873: LD_INT 18
71875: PUSH
71876: LD_INT 19
71878: PUSH
71879: LD_INT 20
71881: PUSH
71882: LD_INT 21
71884: PUSH
71885: LD_INT 22
71887: PUSH
71888: LD_INT 23
71890: PUSH
71891: LD_INT 24
71893: PUSH
71894: LD_INT 25
71896: PUSH
71897: LD_INT 26
71899: PUSH
71900: LD_INT 27
71902: PUSH
71903: LD_INT 28
71905: PUSH
71906: LD_INT 30
71908: PUSH
71909: LD_INT 31
71911: PUSH
71912: LD_INT 32
71914: PUSH
71915: LD_INT 33
71917: PUSH
71918: LD_INT 34
71920: PUSH
71921: LD_INT 36
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 101
71959: PUSH
71960: LD_INT 102
71962: PUSH
71963: LD_INT 103
71965: PUSH
71966: LD_INT 104
71968: PUSH
71969: LD_INT 105
71971: PUSH
71972: LD_INT 106
71974: PUSH
71975: LD_INT 107
71977: PUSH
71978: LD_INT 108
71980: PUSH
71981: LD_INT 109
71983: PUSH
71984: LD_INT 110
71986: PUSH
71987: LD_INT 111
71989: PUSH
71990: LD_INT 112
71992: PUSH
71993: LD_INT 113
71995: PUSH
71996: LD_INT 114
71998: PUSH
71999: LD_INT 116
72001: PUSH
72002: LD_INT 117
72004: PUSH
72005: LD_INT 118
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: ST_TO_ADDR
72031: GO 73270
72033: LD_INT 14
72035: DOUBLE
72036: EQUAL
72037: IFTRUE 72041
72039: GO 72265
72041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
72042: LD_ADDR_VAR 0 2
72046: PUSH
72047: LD_INT 1
72049: PUSH
72050: LD_INT 2
72052: PUSH
72053: LD_INT 3
72055: PUSH
72056: LD_INT 4
72058: PUSH
72059: LD_INT 5
72061: PUSH
72062: LD_INT 6
72064: PUSH
72065: LD_INT 7
72067: PUSH
72068: LD_INT 8
72070: PUSH
72071: LD_INT 9
72073: PUSH
72074: LD_INT 10
72076: PUSH
72077: LD_INT 11
72079: PUSH
72080: LD_INT 12
72082: PUSH
72083: LD_INT 13
72085: PUSH
72086: LD_INT 14
72088: PUSH
72089: LD_INT 15
72091: PUSH
72092: LD_INT 16
72094: PUSH
72095: LD_INT 17
72097: PUSH
72098: LD_INT 18
72100: PUSH
72101: LD_INT 19
72103: PUSH
72104: LD_INT 20
72106: PUSH
72107: LD_INT 21
72109: PUSH
72110: LD_INT 22
72112: PUSH
72113: LD_INT 23
72115: PUSH
72116: LD_INT 24
72118: PUSH
72119: LD_INT 25
72121: PUSH
72122: LD_INT 26
72124: PUSH
72125: LD_INT 27
72127: PUSH
72128: LD_INT 28
72130: PUSH
72131: LD_INT 29
72133: PUSH
72134: LD_INT 30
72136: PUSH
72137: LD_INT 31
72139: PUSH
72140: LD_INT 32
72142: PUSH
72143: LD_INT 33
72145: PUSH
72146: LD_INT 34
72148: PUSH
72149: LD_INT 36
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: PUSH
72189: LD_INT 101
72191: PUSH
72192: LD_INT 102
72194: PUSH
72195: LD_INT 103
72197: PUSH
72198: LD_INT 104
72200: PUSH
72201: LD_INT 105
72203: PUSH
72204: LD_INT 106
72206: PUSH
72207: LD_INT 107
72209: PUSH
72210: LD_INT 108
72212: PUSH
72213: LD_INT 109
72215: PUSH
72216: LD_INT 110
72218: PUSH
72219: LD_INT 111
72221: PUSH
72222: LD_INT 112
72224: PUSH
72225: LD_INT 113
72227: PUSH
72228: LD_INT 114
72230: PUSH
72231: LD_INT 116
72233: PUSH
72234: LD_INT 117
72236: PUSH
72237: LD_INT 118
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: ST_TO_ADDR
72263: GO 73270
72265: LD_INT 15
72267: DOUBLE
72268: EQUAL
72269: IFTRUE 72273
72271: GO 72497
72273: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
72274: LD_ADDR_VAR 0 2
72278: PUSH
72279: LD_INT 1
72281: PUSH
72282: LD_INT 2
72284: PUSH
72285: LD_INT 3
72287: PUSH
72288: LD_INT 4
72290: PUSH
72291: LD_INT 5
72293: PUSH
72294: LD_INT 6
72296: PUSH
72297: LD_INT 7
72299: PUSH
72300: LD_INT 8
72302: PUSH
72303: LD_INT 9
72305: PUSH
72306: LD_INT 10
72308: PUSH
72309: LD_INT 11
72311: PUSH
72312: LD_INT 12
72314: PUSH
72315: LD_INT 13
72317: PUSH
72318: LD_INT 14
72320: PUSH
72321: LD_INT 15
72323: PUSH
72324: LD_INT 16
72326: PUSH
72327: LD_INT 17
72329: PUSH
72330: LD_INT 18
72332: PUSH
72333: LD_INT 19
72335: PUSH
72336: LD_INT 20
72338: PUSH
72339: LD_INT 21
72341: PUSH
72342: LD_INT 22
72344: PUSH
72345: LD_INT 23
72347: PUSH
72348: LD_INT 24
72350: PUSH
72351: LD_INT 25
72353: PUSH
72354: LD_INT 26
72356: PUSH
72357: LD_INT 27
72359: PUSH
72360: LD_INT 28
72362: PUSH
72363: LD_INT 29
72365: PUSH
72366: LD_INT 30
72368: PUSH
72369: LD_INT 31
72371: PUSH
72372: LD_INT 32
72374: PUSH
72375: LD_INT 33
72377: PUSH
72378: LD_INT 34
72380: PUSH
72381: LD_INT 36
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 101
72423: PUSH
72424: LD_INT 102
72426: PUSH
72427: LD_INT 103
72429: PUSH
72430: LD_INT 104
72432: PUSH
72433: LD_INT 105
72435: PUSH
72436: LD_INT 106
72438: PUSH
72439: LD_INT 107
72441: PUSH
72442: LD_INT 108
72444: PUSH
72445: LD_INT 109
72447: PUSH
72448: LD_INT 110
72450: PUSH
72451: LD_INT 111
72453: PUSH
72454: LD_INT 112
72456: PUSH
72457: LD_INT 113
72459: PUSH
72460: LD_INT 114
72462: PUSH
72463: LD_INT 116
72465: PUSH
72466: LD_INT 117
72468: PUSH
72469: LD_INT 118
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: ST_TO_ADDR
72495: GO 73270
72497: LD_INT 16
72499: DOUBLE
72500: EQUAL
72501: IFTRUE 72505
72503: GO 72641
72505: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
72506: LD_ADDR_VAR 0 2
72510: PUSH
72511: LD_INT 2
72513: PUSH
72514: LD_INT 4
72516: PUSH
72517: LD_INT 5
72519: PUSH
72520: LD_INT 7
72522: PUSH
72523: LD_INT 11
72525: PUSH
72526: LD_INT 12
72528: PUSH
72529: LD_INT 15
72531: PUSH
72532: LD_INT 16
72534: PUSH
72535: LD_INT 20
72537: PUSH
72538: LD_INT 21
72540: PUSH
72541: LD_INT 22
72543: PUSH
72544: LD_INT 23
72546: PUSH
72547: LD_INT 25
72549: PUSH
72550: LD_INT 26
72552: PUSH
72553: LD_INT 30
72555: PUSH
72556: LD_INT 31
72558: PUSH
72559: LD_INT 32
72561: PUSH
72562: LD_INT 33
72564: PUSH
72565: LD_INT 34
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 101
72591: PUSH
72592: LD_INT 102
72594: PUSH
72595: LD_INT 103
72597: PUSH
72598: LD_INT 106
72600: PUSH
72601: LD_INT 108
72603: PUSH
72604: LD_INT 112
72606: PUSH
72607: LD_INT 113
72609: PUSH
72610: LD_INT 114
72612: PUSH
72613: LD_INT 116
72615: PUSH
72616: LD_INT 117
72618: PUSH
72619: LD_INT 118
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: ST_TO_ADDR
72639: GO 73270
72641: LD_INT 17
72643: DOUBLE
72644: EQUAL
72645: IFTRUE 72649
72647: GO 72873
72649: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
72650: LD_ADDR_VAR 0 2
72654: PUSH
72655: LD_INT 1
72657: PUSH
72658: LD_INT 2
72660: PUSH
72661: LD_INT 3
72663: PUSH
72664: LD_INT 4
72666: PUSH
72667: LD_INT 5
72669: PUSH
72670: LD_INT 6
72672: PUSH
72673: LD_INT 7
72675: PUSH
72676: LD_INT 8
72678: PUSH
72679: LD_INT 9
72681: PUSH
72682: LD_INT 10
72684: PUSH
72685: LD_INT 11
72687: PUSH
72688: LD_INT 12
72690: PUSH
72691: LD_INT 13
72693: PUSH
72694: LD_INT 14
72696: PUSH
72697: LD_INT 15
72699: PUSH
72700: LD_INT 16
72702: PUSH
72703: LD_INT 17
72705: PUSH
72706: LD_INT 18
72708: PUSH
72709: LD_INT 19
72711: PUSH
72712: LD_INT 20
72714: PUSH
72715: LD_INT 21
72717: PUSH
72718: LD_INT 22
72720: PUSH
72721: LD_INT 23
72723: PUSH
72724: LD_INT 24
72726: PUSH
72727: LD_INT 25
72729: PUSH
72730: LD_INT 26
72732: PUSH
72733: LD_INT 27
72735: PUSH
72736: LD_INT 28
72738: PUSH
72739: LD_INT 29
72741: PUSH
72742: LD_INT 30
72744: PUSH
72745: LD_INT 31
72747: PUSH
72748: LD_INT 32
72750: PUSH
72751: LD_INT 33
72753: PUSH
72754: LD_INT 34
72756: PUSH
72757: LD_INT 36
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 101
72799: PUSH
72800: LD_INT 102
72802: PUSH
72803: LD_INT 103
72805: PUSH
72806: LD_INT 104
72808: PUSH
72809: LD_INT 105
72811: PUSH
72812: LD_INT 106
72814: PUSH
72815: LD_INT 107
72817: PUSH
72818: LD_INT 108
72820: PUSH
72821: LD_INT 109
72823: PUSH
72824: LD_INT 110
72826: PUSH
72827: LD_INT 111
72829: PUSH
72830: LD_INT 112
72832: PUSH
72833: LD_INT 113
72835: PUSH
72836: LD_INT 114
72838: PUSH
72839: LD_INT 116
72841: PUSH
72842: LD_INT 117
72844: PUSH
72845: LD_INT 118
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: ST_TO_ADDR
72871: GO 73270
72873: LD_INT 18
72875: DOUBLE
72876: EQUAL
72877: IFTRUE 72881
72879: GO 73029
72881: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
72882: LD_ADDR_VAR 0 2
72886: PUSH
72887: LD_INT 2
72889: PUSH
72890: LD_INT 4
72892: PUSH
72893: LD_INT 5
72895: PUSH
72896: LD_INT 7
72898: PUSH
72899: LD_INT 11
72901: PUSH
72902: LD_INT 12
72904: PUSH
72905: LD_INT 15
72907: PUSH
72908: LD_INT 16
72910: PUSH
72911: LD_INT 20
72913: PUSH
72914: LD_INT 21
72916: PUSH
72917: LD_INT 22
72919: PUSH
72920: LD_INT 23
72922: PUSH
72923: LD_INT 25
72925: PUSH
72926: LD_INT 26
72928: PUSH
72929: LD_INT 30
72931: PUSH
72932: LD_INT 31
72934: PUSH
72935: LD_INT 32
72937: PUSH
72938: LD_INT 33
72940: PUSH
72941: LD_INT 34
72943: PUSH
72944: LD_INT 35
72946: PUSH
72947: LD_INT 36
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: LIST
72964: LIST
72965: LIST
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: PUSH
72973: LD_INT 101
72975: PUSH
72976: LD_INT 102
72978: PUSH
72979: LD_INT 103
72981: PUSH
72982: LD_INT 106
72984: PUSH
72985: LD_INT 108
72987: PUSH
72988: LD_INT 112
72990: PUSH
72991: LD_INT 113
72993: PUSH
72994: LD_INT 114
72996: PUSH
72997: LD_INT 115
72999: PUSH
73000: LD_INT 116
73002: PUSH
73003: LD_INT 117
73005: PUSH
73006: LD_INT 118
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: ST_TO_ADDR
73027: GO 73270
73029: LD_INT 19
73031: DOUBLE
73032: EQUAL
73033: IFTRUE 73037
73035: GO 73269
73037: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
73038: LD_ADDR_VAR 0 2
73042: PUSH
73043: LD_INT 1
73045: PUSH
73046: LD_INT 2
73048: PUSH
73049: LD_INT 3
73051: PUSH
73052: LD_INT 4
73054: PUSH
73055: LD_INT 5
73057: PUSH
73058: LD_INT 6
73060: PUSH
73061: LD_INT 7
73063: PUSH
73064: LD_INT 8
73066: PUSH
73067: LD_INT 9
73069: PUSH
73070: LD_INT 10
73072: PUSH
73073: LD_INT 11
73075: PUSH
73076: LD_INT 12
73078: PUSH
73079: LD_INT 13
73081: PUSH
73082: LD_INT 14
73084: PUSH
73085: LD_INT 15
73087: PUSH
73088: LD_INT 16
73090: PUSH
73091: LD_INT 17
73093: PUSH
73094: LD_INT 18
73096: PUSH
73097: LD_INT 19
73099: PUSH
73100: LD_INT 20
73102: PUSH
73103: LD_INT 21
73105: PUSH
73106: LD_INT 22
73108: PUSH
73109: LD_INT 23
73111: PUSH
73112: LD_INT 24
73114: PUSH
73115: LD_INT 25
73117: PUSH
73118: LD_INT 26
73120: PUSH
73121: LD_INT 27
73123: PUSH
73124: LD_INT 28
73126: PUSH
73127: LD_INT 29
73129: PUSH
73130: LD_INT 30
73132: PUSH
73133: LD_INT 31
73135: PUSH
73136: LD_INT 32
73138: PUSH
73139: LD_INT 33
73141: PUSH
73142: LD_INT 34
73144: PUSH
73145: LD_INT 35
73147: PUSH
73148: LD_INT 36
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: PUSH
73189: LD_INT 101
73191: PUSH
73192: LD_INT 102
73194: PUSH
73195: LD_INT 103
73197: PUSH
73198: LD_INT 104
73200: PUSH
73201: LD_INT 105
73203: PUSH
73204: LD_INT 106
73206: PUSH
73207: LD_INT 107
73209: PUSH
73210: LD_INT 108
73212: PUSH
73213: LD_INT 109
73215: PUSH
73216: LD_INT 110
73218: PUSH
73219: LD_INT 111
73221: PUSH
73222: LD_INT 112
73224: PUSH
73225: LD_INT 113
73227: PUSH
73228: LD_INT 114
73230: PUSH
73231: LD_INT 115
73233: PUSH
73234: LD_INT 116
73236: PUSH
73237: LD_INT 117
73239: PUSH
73240: LD_INT 118
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: ST_TO_ADDR
73267: GO 73270
73269: POP
// end else
73270: GO 73501
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
73272: LD_ADDR_VAR 0 2
73276: PUSH
73277: LD_INT 1
73279: PUSH
73280: LD_INT 2
73282: PUSH
73283: LD_INT 3
73285: PUSH
73286: LD_INT 4
73288: PUSH
73289: LD_INT 5
73291: PUSH
73292: LD_INT 6
73294: PUSH
73295: LD_INT 7
73297: PUSH
73298: LD_INT 8
73300: PUSH
73301: LD_INT 9
73303: PUSH
73304: LD_INT 10
73306: PUSH
73307: LD_INT 11
73309: PUSH
73310: LD_INT 12
73312: PUSH
73313: LD_INT 13
73315: PUSH
73316: LD_INT 14
73318: PUSH
73319: LD_INT 15
73321: PUSH
73322: LD_INT 16
73324: PUSH
73325: LD_INT 17
73327: PUSH
73328: LD_INT 18
73330: PUSH
73331: LD_INT 19
73333: PUSH
73334: LD_INT 20
73336: PUSH
73337: LD_INT 21
73339: PUSH
73340: LD_INT 22
73342: PUSH
73343: LD_INT 23
73345: PUSH
73346: LD_INT 24
73348: PUSH
73349: LD_INT 25
73351: PUSH
73352: LD_INT 26
73354: PUSH
73355: LD_INT 27
73357: PUSH
73358: LD_INT 28
73360: PUSH
73361: LD_INT 29
73363: PUSH
73364: LD_INT 30
73366: PUSH
73367: LD_INT 31
73369: PUSH
73370: LD_INT 32
73372: PUSH
73373: LD_INT 33
73375: PUSH
73376: LD_INT 34
73378: PUSH
73379: LD_INT 35
73381: PUSH
73382: LD_INT 36
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: LIST
73391: LIST
73392: LIST
73393: LIST
73394: LIST
73395: LIST
73396: LIST
73397: LIST
73398: LIST
73399: LIST
73400: LIST
73401: LIST
73402: LIST
73403: LIST
73404: LIST
73405: LIST
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 101
73425: PUSH
73426: LD_INT 102
73428: PUSH
73429: LD_INT 103
73431: PUSH
73432: LD_INT 104
73434: PUSH
73435: LD_INT 105
73437: PUSH
73438: LD_INT 106
73440: PUSH
73441: LD_INT 107
73443: PUSH
73444: LD_INT 108
73446: PUSH
73447: LD_INT 109
73449: PUSH
73450: LD_INT 110
73452: PUSH
73453: LD_INT 111
73455: PUSH
73456: LD_INT 112
73458: PUSH
73459: LD_INT 113
73461: PUSH
73462: LD_INT 114
73464: PUSH
73465: LD_INT 115
73467: PUSH
73468: LD_INT 116
73470: PUSH
73471: LD_INT 117
73473: PUSH
73474: LD_INT 118
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: LIST
73481: LIST
73482: LIST
73483: LIST
73484: LIST
73485: LIST
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: LIST
73493: LIST
73494: LIST
73495: LIST
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: ST_TO_ADDR
// if result then
73501: LD_VAR 0 2
73505: IFFALSE 74291
// begin normal :=  ;
73507: LD_ADDR_VAR 0 5
73511: PUSH
73512: LD_STRING 
73514: ST_TO_ADDR
// hardcore :=  ;
73515: LD_ADDR_VAR 0 6
73519: PUSH
73520: LD_STRING 
73522: ST_TO_ADDR
// active :=  ;
73523: LD_ADDR_VAR 0 7
73527: PUSH
73528: LD_STRING 
73530: ST_TO_ADDR
// for i = 1 to normalCounter do
73531: LD_ADDR_VAR 0 8
73535: PUSH
73536: DOUBLE
73537: LD_INT 1
73539: DEC
73540: ST_TO_ADDR
73541: LD_EXP 68
73545: PUSH
73546: FOR_TO
73547: IFFALSE 73648
// begin tmp := 0 ;
73549: LD_ADDR_VAR 0 3
73553: PUSH
73554: LD_STRING 0
73556: ST_TO_ADDR
// if result [ 1 ] then
73557: LD_VAR 0 2
73561: PUSH
73562: LD_INT 1
73564: ARRAY
73565: IFFALSE 73630
// if result [ 1 ] [ 1 ] = i then
73567: LD_VAR 0 2
73571: PUSH
73572: LD_INT 1
73574: ARRAY
73575: PUSH
73576: LD_INT 1
73578: ARRAY
73579: PUSH
73580: LD_VAR 0 8
73584: EQUAL
73585: IFFALSE 73630
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
73587: LD_ADDR_VAR 0 2
73591: PUSH
73592: LD_VAR 0 2
73596: PPUSH
73597: LD_INT 1
73599: PPUSH
73600: LD_VAR 0 2
73604: PUSH
73605: LD_INT 1
73607: ARRAY
73608: PPUSH
73609: LD_INT 1
73611: PPUSH
73612: CALL_OW 3
73616: PPUSH
73617: CALL_OW 1
73621: ST_TO_ADDR
// tmp := 1 ;
73622: LD_ADDR_VAR 0 3
73626: PUSH
73627: LD_STRING 1
73629: ST_TO_ADDR
// end ; normal := normal & tmp ;
73630: LD_ADDR_VAR 0 5
73634: PUSH
73635: LD_VAR 0 5
73639: PUSH
73640: LD_VAR 0 3
73644: STR
73645: ST_TO_ADDR
// end ;
73646: GO 73546
73648: POP
73649: POP
// for i = 1 to hardcoreCounter do
73650: LD_ADDR_VAR 0 8
73654: PUSH
73655: DOUBLE
73656: LD_INT 1
73658: DEC
73659: ST_TO_ADDR
73660: LD_EXP 69
73664: PUSH
73665: FOR_TO
73666: IFFALSE 73771
// begin tmp := 0 ;
73668: LD_ADDR_VAR 0 3
73672: PUSH
73673: LD_STRING 0
73675: ST_TO_ADDR
// if result [ 2 ] then
73676: LD_VAR 0 2
73680: PUSH
73681: LD_INT 2
73683: ARRAY
73684: IFFALSE 73753
// if result [ 2 ] [ 1 ] = 100 + i then
73686: LD_VAR 0 2
73690: PUSH
73691: LD_INT 2
73693: ARRAY
73694: PUSH
73695: LD_INT 1
73697: ARRAY
73698: PUSH
73699: LD_INT 100
73701: PUSH
73702: LD_VAR 0 8
73706: PLUS
73707: EQUAL
73708: IFFALSE 73753
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
73710: LD_ADDR_VAR 0 2
73714: PUSH
73715: LD_VAR 0 2
73719: PPUSH
73720: LD_INT 2
73722: PPUSH
73723: LD_VAR 0 2
73727: PUSH
73728: LD_INT 2
73730: ARRAY
73731: PPUSH
73732: LD_INT 1
73734: PPUSH
73735: CALL_OW 3
73739: PPUSH
73740: CALL_OW 1
73744: ST_TO_ADDR
// tmp := 1 ;
73745: LD_ADDR_VAR 0 3
73749: PUSH
73750: LD_STRING 1
73752: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
73753: LD_ADDR_VAR 0 6
73757: PUSH
73758: LD_VAR 0 6
73762: PUSH
73763: LD_VAR 0 3
73767: STR
73768: ST_TO_ADDR
// end ;
73769: GO 73665
73771: POP
73772: POP
// if isGameLoad then
73773: LD_VAR 0 1
73777: IFFALSE 74252
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
73779: LD_ADDR_VAR 0 4
73783: PUSH
73784: LD_EXP 72
73788: PUSH
73789: LD_EXP 71
73793: PUSH
73794: LD_EXP 73
73798: PUSH
73799: LD_EXP 70
73803: PUSH
73804: LD_EXP 74
73808: PUSH
73809: LD_EXP 75
73813: PUSH
73814: LD_EXP 76
73818: PUSH
73819: LD_EXP 77
73823: PUSH
73824: LD_EXP 78
73828: PUSH
73829: LD_EXP 79
73833: PUSH
73834: LD_EXP 80
73838: PUSH
73839: LD_EXP 81
73843: PUSH
73844: LD_EXP 82
73848: PUSH
73849: LD_EXP 83
73853: PUSH
73854: LD_EXP 91
73858: PUSH
73859: LD_EXP 92
73863: PUSH
73864: LD_EXP 93
73868: PUSH
73869: LD_EXP 94
73873: PUSH
73874: LD_EXP 96
73878: PUSH
73879: LD_EXP 97
73883: PUSH
73884: LD_EXP 98
73888: PUSH
73889: LD_EXP 101
73893: PUSH
73894: LD_EXP 103
73898: PUSH
73899: LD_EXP 104
73903: PUSH
73904: LD_EXP 105
73908: PUSH
73909: LD_EXP 107
73913: PUSH
73914: LD_EXP 108
73918: PUSH
73919: LD_EXP 111
73923: PUSH
73924: LD_EXP 112
73928: PUSH
73929: LD_EXP 113
73933: PUSH
73934: LD_EXP 114
73938: PUSH
73939: LD_EXP 115
73943: PUSH
73944: LD_EXP 116
73948: PUSH
73949: LD_EXP 117
73953: PUSH
73954: LD_EXP 118
73958: PUSH
73959: LD_EXP 119
73963: PUSH
73964: LD_EXP 84
73968: PUSH
73969: LD_EXP 85
73973: PUSH
73974: LD_EXP 88
73978: PUSH
73979: LD_EXP 89
73983: PUSH
73984: LD_EXP 90
73988: PUSH
73989: LD_EXP 86
73993: PUSH
73994: LD_EXP 87
73998: PUSH
73999: LD_EXP 95
74003: PUSH
74004: LD_EXP 99
74008: PUSH
74009: LD_EXP 100
74013: PUSH
74014: LD_EXP 102
74018: PUSH
74019: LD_EXP 106
74023: PUSH
74024: LD_EXP 109
74028: PUSH
74029: LD_EXP 110
74033: PUSH
74034: LD_EXP 120
74038: PUSH
74039: LD_EXP 121
74043: PUSH
74044: LD_EXP 122
74048: PUSH
74049: LD_EXP 123
74053: PUSH
74054: EMPTY
74055: LIST
74056: LIST
74057: LIST
74058: LIST
74059: LIST
74060: LIST
74061: LIST
74062: LIST
74063: LIST
74064: LIST
74065: LIST
74066: LIST
74067: LIST
74068: LIST
74069: LIST
74070: LIST
74071: LIST
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: LIST
74080: LIST
74081: LIST
74082: LIST
74083: LIST
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: LIST
74089: LIST
74090: LIST
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: ST_TO_ADDR
// tmp :=  ;
74110: LD_ADDR_VAR 0 3
74114: PUSH
74115: LD_STRING 
74117: ST_TO_ADDR
// for i = 1 to normalCounter do
74118: LD_ADDR_VAR 0 8
74122: PUSH
74123: DOUBLE
74124: LD_INT 1
74126: DEC
74127: ST_TO_ADDR
74128: LD_EXP 68
74132: PUSH
74133: FOR_TO
74134: IFFALSE 74170
// begin if flags [ i ] then
74136: LD_VAR 0 4
74140: PUSH
74141: LD_VAR 0 8
74145: ARRAY
74146: IFFALSE 74168
// tmp := tmp & i & ; ;
74148: LD_ADDR_VAR 0 3
74152: PUSH
74153: LD_VAR 0 3
74157: PUSH
74158: LD_VAR 0 8
74162: STR
74163: PUSH
74164: LD_STRING ;
74166: STR
74167: ST_TO_ADDR
// end ;
74168: GO 74133
74170: POP
74171: POP
// for i = 1 to hardcoreCounter do
74172: LD_ADDR_VAR 0 8
74176: PUSH
74177: DOUBLE
74178: LD_INT 1
74180: DEC
74181: ST_TO_ADDR
74182: LD_EXP 69
74186: PUSH
74187: FOR_TO
74188: IFFALSE 74234
// begin if flags [ normalCounter + i ] then
74190: LD_VAR 0 4
74194: PUSH
74195: LD_EXP 68
74199: PUSH
74200: LD_VAR 0 8
74204: PLUS
74205: ARRAY
74206: IFFALSE 74232
// tmp := tmp & ( 100 + i ) & ; ;
74208: LD_ADDR_VAR 0 3
74212: PUSH
74213: LD_VAR 0 3
74217: PUSH
74218: LD_INT 100
74220: PUSH
74221: LD_VAR 0 8
74225: PLUS
74226: STR
74227: PUSH
74228: LD_STRING ;
74230: STR
74231: ST_TO_ADDR
// end ;
74232: GO 74187
74234: POP
74235: POP
// if tmp then
74236: LD_VAR 0 3
74240: IFFALSE 74252
// active := tmp ;
74242: LD_ADDR_VAR 0 7
74246: PUSH
74247: LD_VAR 0 3
74251: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
74252: LD_STRING getStreamItemsFromMission("
74254: PUSH
74255: LD_VAR 0 5
74259: STR
74260: PUSH
74261: LD_STRING ","
74263: STR
74264: PUSH
74265: LD_VAR 0 6
74269: STR
74270: PUSH
74271: LD_STRING ","
74273: STR
74274: PUSH
74275: LD_VAR 0 7
74279: STR
74280: PUSH
74281: LD_STRING ")
74283: STR
74284: PPUSH
74285: CALL_OW 559
// end else
74289: GO 74298
// ToLua ( getStreamItemsFromMission("","","") ) ;
74291: LD_STRING getStreamItemsFromMission("","","")
74293: PPUSH
74294: CALL_OW 559
// end ;
74298: LD_VAR 0 2
74302: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
74303: LD_EXP 67
74307: PUSH
74308: LD_EXP 72
74312: AND
74313: IFFALSE 74437
74315: GO 74317
74317: DISABLE
74318: LD_INT 0
74320: PPUSH
74321: PPUSH
// begin enable ;
74322: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
74323: LD_ADDR_VAR 0 2
74327: PUSH
74328: LD_INT 22
74330: PUSH
74331: LD_OWVAR 2
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: PUSH
74340: LD_INT 2
74342: PUSH
74343: LD_INT 34
74345: PUSH
74346: LD_INT 7
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: PUSH
74353: LD_INT 34
74355: PUSH
74356: LD_INT 45
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: PUSH
74363: LD_INT 34
74365: PUSH
74366: LD_INT 28
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: PUSH
74373: LD_INT 34
74375: PUSH
74376: LD_INT 47
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: PUSH
74390: EMPTY
74391: LIST
74392: LIST
74393: PPUSH
74394: CALL_OW 69
74398: ST_TO_ADDR
// if not tmp then
74399: LD_VAR 0 2
74403: NOT
74404: IFFALSE 74408
// exit ;
74406: GO 74437
// for i in tmp do
74408: LD_ADDR_VAR 0 1
74412: PUSH
74413: LD_VAR 0 2
74417: PUSH
74418: FOR_IN
74419: IFFALSE 74435
// begin SetLives ( i , 0 ) ;
74421: LD_VAR 0 1
74425: PPUSH
74426: LD_INT 0
74428: PPUSH
74429: CALL_OW 234
// end ;
74433: GO 74418
74435: POP
74436: POP
// end ;
74437: PPOPN 2
74439: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
74440: LD_EXP 67
74444: PUSH
74445: LD_EXP 73
74449: AND
74450: IFFALSE 74534
74452: GO 74454
74454: DISABLE
74455: LD_INT 0
74457: PPUSH
74458: PPUSH
// begin enable ;
74459: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
74460: LD_ADDR_VAR 0 2
74464: PUSH
74465: LD_INT 22
74467: PUSH
74468: LD_OWVAR 2
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: PUSH
74477: LD_INT 32
74479: PUSH
74480: LD_INT 3
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: PUSH
74487: EMPTY
74488: LIST
74489: LIST
74490: PPUSH
74491: CALL_OW 69
74495: ST_TO_ADDR
// if not tmp then
74496: LD_VAR 0 2
74500: NOT
74501: IFFALSE 74505
// exit ;
74503: GO 74534
// for i in tmp do
74505: LD_ADDR_VAR 0 1
74509: PUSH
74510: LD_VAR 0 2
74514: PUSH
74515: FOR_IN
74516: IFFALSE 74532
// begin SetLives ( i , 0 ) ;
74518: LD_VAR 0 1
74522: PPUSH
74523: LD_INT 0
74525: PPUSH
74526: CALL_OW 234
// end ;
74530: GO 74515
74532: POP
74533: POP
// end ;
74534: PPOPN 2
74536: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
74537: LD_EXP 67
74541: PUSH
74542: LD_EXP 70
74546: AND
74547: IFFALSE 74640
74549: GO 74551
74551: DISABLE
74552: LD_INT 0
74554: PPUSH
// begin enable ;
74555: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
74556: LD_ADDR_VAR 0 1
74560: PUSH
74561: LD_INT 22
74563: PUSH
74564: LD_OWVAR 2
74568: PUSH
74569: EMPTY
74570: LIST
74571: LIST
74572: PUSH
74573: LD_INT 2
74575: PUSH
74576: LD_INT 25
74578: PUSH
74579: LD_INT 5
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: PUSH
74586: LD_INT 25
74588: PUSH
74589: LD_INT 9
74591: PUSH
74592: EMPTY
74593: LIST
74594: LIST
74595: PUSH
74596: LD_INT 25
74598: PUSH
74599: LD_INT 8
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: LIST
74610: LIST
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: PPUSH
74616: CALL_OW 69
74620: PUSH
74621: FOR_IN
74622: IFFALSE 74638
// begin SetClass ( i , 1 ) ;
74624: LD_VAR 0 1
74628: PPUSH
74629: LD_INT 1
74631: PPUSH
74632: CALL_OW 336
// end ;
74636: GO 74621
74638: POP
74639: POP
// end ;
74640: PPOPN 1
74642: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
74643: LD_EXP 67
74647: PUSH
74648: LD_EXP 71
74652: AND
74653: PUSH
74654: LD_OWVAR 65
74658: PUSH
74659: LD_INT 7
74661: LESS
74662: AND
74663: IFFALSE 74677
74665: GO 74667
74667: DISABLE
// begin enable ;
74668: ENABLE
// game_speed := 7 ;
74669: LD_ADDR_OWVAR 65
74673: PUSH
74674: LD_INT 7
74676: ST_TO_ADDR
// end ;
74677: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
74678: LD_EXP 67
74682: PUSH
74683: LD_EXP 74
74687: AND
74688: IFFALSE 74890
74690: GO 74692
74692: DISABLE
74693: LD_INT 0
74695: PPUSH
74696: PPUSH
74697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74698: LD_ADDR_VAR 0 3
74702: PUSH
74703: LD_INT 81
74705: PUSH
74706: LD_OWVAR 2
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 21
74717: PUSH
74718: LD_INT 1
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: PPUSH
74729: CALL_OW 69
74733: ST_TO_ADDR
// if not tmp then
74734: LD_VAR 0 3
74738: NOT
74739: IFFALSE 74743
// exit ;
74741: GO 74890
// if tmp > 5 then
74743: LD_VAR 0 3
74747: PUSH
74748: LD_INT 5
74750: GREATER
74751: IFFALSE 74763
// k := 5 else
74753: LD_ADDR_VAR 0 2
74757: PUSH
74758: LD_INT 5
74760: ST_TO_ADDR
74761: GO 74773
// k := tmp ;
74763: LD_ADDR_VAR 0 2
74767: PUSH
74768: LD_VAR 0 3
74772: ST_TO_ADDR
// for i := 1 to k do
74773: LD_ADDR_VAR 0 1
74777: PUSH
74778: DOUBLE
74779: LD_INT 1
74781: DEC
74782: ST_TO_ADDR
74783: LD_VAR 0 2
74787: PUSH
74788: FOR_TO
74789: IFFALSE 74888
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
74791: LD_VAR 0 3
74795: PUSH
74796: LD_VAR 0 1
74800: ARRAY
74801: PPUSH
74802: LD_VAR 0 1
74806: PUSH
74807: LD_INT 4
74809: MOD
74810: PUSH
74811: LD_INT 1
74813: PLUS
74814: PPUSH
74815: CALL_OW 259
74819: PUSH
74820: LD_INT 10
74822: LESS
74823: IFFALSE 74886
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
74825: LD_VAR 0 3
74829: PUSH
74830: LD_VAR 0 1
74834: ARRAY
74835: PPUSH
74836: LD_VAR 0 1
74840: PUSH
74841: LD_INT 4
74843: MOD
74844: PUSH
74845: LD_INT 1
74847: PLUS
74848: PPUSH
74849: LD_VAR 0 3
74853: PUSH
74854: LD_VAR 0 1
74858: ARRAY
74859: PPUSH
74860: LD_VAR 0 1
74864: PUSH
74865: LD_INT 4
74867: MOD
74868: PUSH
74869: LD_INT 1
74871: PLUS
74872: PPUSH
74873: CALL_OW 259
74877: PUSH
74878: LD_INT 1
74880: PLUS
74881: PPUSH
74882: CALL_OW 237
74886: GO 74788
74888: POP
74889: POP
// end ;
74890: PPOPN 3
74892: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
74893: LD_EXP 67
74897: PUSH
74898: LD_EXP 75
74902: AND
74903: IFFALSE 74923
74905: GO 74907
74907: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
74908: LD_INT 4
74910: PPUSH
74911: LD_OWVAR 2
74915: PPUSH
74916: LD_INT 0
74918: PPUSH
74919: CALL_OW 324
74923: END
// every 0 0$1 trigger StreamModeActive and sShovel do
74924: LD_EXP 67
74928: PUSH
74929: LD_EXP 104
74933: AND
74934: IFFALSE 74954
74936: GO 74938
74938: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
74939: LD_INT 19
74941: PPUSH
74942: LD_OWVAR 2
74946: PPUSH
74947: LD_INT 0
74949: PPUSH
74950: CALL_OW 324
74954: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
74955: LD_EXP 67
74959: PUSH
74960: LD_EXP 76
74964: AND
74965: IFFALSE 75067
74967: GO 74969
74969: DISABLE
74970: LD_INT 0
74972: PPUSH
74973: PPUSH
// begin enable ;
74974: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
74975: LD_ADDR_VAR 0 2
74979: PUSH
74980: LD_INT 22
74982: PUSH
74983: LD_OWVAR 2
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: PUSH
74992: LD_INT 2
74994: PUSH
74995: LD_INT 34
74997: PUSH
74998: LD_INT 11
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: PUSH
75005: LD_INT 34
75007: PUSH
75008: LD_INT 30
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: LIST
75019: PUSH
75020: EMPTY
75021: LIST
75022: LIST
75023: PPUSH
75024: CALL_OW 69
75028: ST_TO_ADDR
// if not tmp then
75029: LD_VAR 0 2
75033: NOT
75034: IFFALSE 75038
// exit ;
75036: GO 75067
// for i in tmp do
75038: LD_ADDR_VAR 0 1
75042: PUSH
75043: LD_VAR 0 2
75047: PUSH
75048: FOR_IN
75049: IFFALSE 75065
// begin SetLives ( i , 0 ) ;
75051: LD_VAR 0 1
75055: PPUSH
75056: LD_INT 0
75058: PPUSH
75059: CALL_OW 234
// end ;
75063: GO 75048
75065: POP
75066: POP
// end ;
75067: PPOPN 2
75069: END
// every 0 0$1 trigger StreamModeActive and sBunker do
75070: LD_EXP 67
75074: PUSH
75075: LD_EXP 77
75079: AND
75080: IFFALSE 75100
75082: GO 75084
75084: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
75085: LD_INT 32
75087: PPUSH
75088: LD_OWVAR 2
75092: PPUSH
75093: LD_INT 0
75095: PPUSH
75096: CALL_OW 324
75100: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
75101: LD_EXP 67
75105: PUSH
75106: LD_EXP 78
75110: AND
75111: IFFALSE 75292
75113: GO 75115
75115: DISABLE
75116: LD_INT 0
75118: PPUSH
75119: PPUSH
75120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
75121: LD_ADDR_VAR 0 2
75125: PUSH
75126: LD_INT 22
75128: PUSH
75129: LD_OWVAR 2
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: PUSH
75138: LD_INT 33
75140: PUSH
75141: LD_INT 3
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: PUSH
75148: EMPTY
75149: LIST
75150: LIST
75151: PPUSH
75152: CALL_OW 69
75156: ST_TO_ADDR
// if not tmp then
75157: LD_VAR 0 2
75161: NOT
75162: IFFALSE 75166
// exit ;
75164: GO 75292
// side := 0 ;
75166: LD_ADDR_VAR 0 3
75170: PUSH
75171: LD_INT 0
75173: ST_TO_ADDR
// for i := 1 to 8 do
75174: LD_ADDR_VAR 0 1
75178: PUSH
75179: DOUBLE
75180: LD_INT 1
75182: DEC
75183: ST_TO_ADDR
75184: LD_INT 8
75186: PUSH
75187: FOR_TO
75188: IFFALSE 75236
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
75190: LD_OWVAR 2
75194: PUSH
75195: LD_VAR 0 1
75199: NONEQUAL
75200: PUSH
75201: LD_OWVAR 2
75205: PPUSH
75206: LD_VAR 0 1
75210: PPUSH
75211: CALL_OW 81
75215: PUSH
75216: LD_INT 2
75218: EQUAL
75219: AND
75220: IFFALSE 75234
// begin side := i ;
75222: LD_ADDR_VAR 0 3
75226: PUSH
75227: LD_VAR 0 1
75231: ST_TO_ADDR
// break ;
75232: GO 75236
// end ;
75234: GO 75187
75236: POP
75237: POP
// if not side then
75238: LD_VAR 0 3
75242: NOT
75243: IFFALSE 75247
// exit ;
75245: GO 75292
// for i := 1 to tmp do
75247: LD_ADDR_VAR 0 1
75251: PUSH
75252: DOUBLE
75253: LD_INT 1
75255: DEC
75256: ST_TO_ADDR
75257: LD_VAR 0 2
75261: PUSH
75262: FOR_TO
75263: IFFALSE 75290
// if Prob ( 60 ) then
75265: LD_INT 60
75267: PPUSH
75268: CALL_OW 13
75272: IFFALSE 75288
// SetSide ( i , side ) ;
75274: LD_VAR 0 1
75278: PPUSH
75279: LD_VAR 0 3
75283: PPUSH
75284: CALL_OW 235
75288: GO 75262
75290: POP
75291: POP
// end ;
75292: PPOPN 3
75294: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
75295: LD_EXP 67
75299: PUSH
75300: LD_EXP 80
75304: AND
75305: IFFALSE 75424
75307: GO 75309
75309: DISABLE
75310: LD_INT 0
75312: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
75313: LD_ADDR_VAR 0 1
75317: PUSH
75318: LD_INT 22
75320: PUSH
75321: LD_OWVAR 2
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: PUSH
75330: LD_INT 21
75332: PUSH
75333: LD_INT 1
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: PUSH
75340: LD_INT 3
75342: PUSH
75343: LD_INT 23
75345: PUSH
75346: LD_INT 0
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: PUSH
75353: EMPTY
75354: LIST
75355: LIST
75356: PUSH
75357: EMPTY
75358: LIST
75359: LIST
75360: LIST
75361: PPUSH
75362: CALL_OW 69
75366: PUSH
75367: FOR_IN
75368: IFFALSE 75422
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
75370: LD_VAR 0 1
75374: PPUSH
75375: CALL_OW 257
75379: PUSH
75380: LD_INT 1
75382: PUSH
75383: LD_INT 2
75385: PUSH
75386: LD_INT 3
75388: PUSH
75389: LD_INT 4
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: IN
75398: IFFALSE 75420
// SetClass ( un , rand ( 1 , 4 ) ) ;
75400: LD_VAR 0 1
75404: PPUSH
75405: LD_INT 1
75407: PPUSH
75408: LD_INT 4
75410: PPUSH
75411: CALL_OW 12
75415: PPUSH
75416: CALL_OW 336
75420: GO 75367
75422: POP
75423: POP
// end ;
75424: PPOPN 1
75426: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
75427: LD_EXP 67
75431: PUSH
75432: LD_EXP 79
75436: AND
75437: IFFALSE 75516
75439: GO 75441
75441: DISABLE
75442: LD_INT 0
75444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75445: LD_ADDR_VAR 0 1
75449: PUSH
75450: LD_INT 22
75452: PUSH
75453: LD_OWVAR 2
75457: PUSH
75458: EMPTY
75459: LIST
75460: LIST
75461: PUSH
75462: LD_INT 21
75464: PUSH
75465: LD_INT 3
75467: PUSH
75468: EMPTY
75469: LIST
75470: LIST
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: PPUSH
75476: CALL_OW 69
75480: ST_TO_ADDR
// if not tmp then
75481: LD_VAR 0 1
75485: NOT
75486: IFFALSE 75490
// exit ;
75488: GO 75516
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
75490: LD_VAR 0 1
75494: PUSH
75495: LD_INT 1
75497: PPUSH
75498: LD_VAR 0 1
75502: PPUSH
75503: CALL_OW 12
75507: ARRAY
75508: PPUSH
75509: LD_INT 100
75511: PPUSH
75512: CALL_OW 234
// end ;
75516: PPOPN 1
75518: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
75519: LD_EXP 67
75523: PUSH
75524: LD_EXP 81
75528: AND
75529: IFFALSE 75627
75531: GO 75533
75533: DISABLE
75534: LD_INT 0
75536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75537: LD_ADDR_VAR 0 1
75541: PUSH
75542: LD_INT 22
75544: PUSH
75545: LD_OWVAR 2
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: PUSH
75554: LD_INT 21
75556: PUSH
75557: LD_INT 1
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: PPUSH
75568: CALL_OW 69
75572: ST_TO_ADDR
// if not tmp then
75573: LD_VAR 0 1
75577: NOT
75578: IFFALSE 75582
// exit ;
75580: GO 75627
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
75582: LD_VAR 0 1
75586: PUSH
75587: LD_INT 1
75589: PPUSH
75590: LD_VAR 0 1
75594: PPUSH
75595: CALL_OW 12
75599: ARRAY
75600: PPUSH
75601: LD_INT 1
75603: PPUSH
75604: LD_INT 4
75606: PPUSH
75607: CALL_OW 12
75611: PPUSH
75612: LD_INT 3000
75614: PPUSH
75615: LD_INT 9000
75617: PPUSH
75618: CALL_OW 12
75622: PPUSH
75623: CALL_OW 492
// end ;
75627: PPOPN 1
75629: END
// every 0 0$1 trigger StreamModeActive and sDepot do
75630: LD_EXP 67
75634: PUSH
75635: LD_EXP 82
75639: AND
75640: IFFALSE 75660
75642: GO 75644
75644: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
75645: LD_INT 1
75647: PPUSH
75648: LD_OWVAR 2
75652: PPUSH
75653: LD_INT 0
75655: PPUSH
75656: CALL_OW 324
75660: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
75661: LD_EXP 67
75665: PUSH
75666: LD_EXP 83
75670: AND
75671: IFFALSE 75754
75673: GO 75675
75675: DISABLE
75676: LD_INT 0
75678: PPUSH
75679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75680: LD_ADDR_VAR 0 2
75684: PUSH
75685: LD_INT 22
75687: PUSH
75688: LD_OWVAR 2
75692: PUSH
75693: EMPTY
75694: LIST
75695: LIST
75696: PUSH
75697: LD_INT 21
75699: PUSH
75700: LD_INT 3
75702: PUSH
75703: EMPTY
75704: LIST
75705: LIST
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PPUSH
75711: CALL_OW 69
75715: ST_TO_ADDR
// if not tmp then
75716: LD_VAR 0 2
75720: NOT
75721: IFFALSE 75725
// exit ;
75723: GO 75754
// for i in tmp do
75725: LD_ADDR_VAR 0 1
75729: PUSH
75730: LD_VAR 0 2
75734: PUSH
75735: FOR_IN
75736: IFFALSE 75752
// SetBLevel ( i , 10 ) ;
75738: LD_VAR 0 1
75742: PPUSH
75743: LD_INT 10
75745: PPUSH
75746: CALL_OW 241
75750: GO 75735
75752: POP
75753: POP
// end ;
75754: PPOPN 2
75756: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
75757: LD_EXP 67
75761: PUSH
75762: LD_EXP 84
75766: AND
75767: IFFALSE 75878
75769: GO 75771
75771: DISABLE
75772: LD_INT 0
75774: PPUSH
75775: PPUSH
75776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75777: LD_ADDR_VAR 0 3
75781: PUSH
75782: LD_INT 22
75784: PUSH
75785: LD_OWVAR 2
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 25
75796: PUSH
75797: LD_INT 1
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: PPUSH
75808: CALL_OW 69
75812: ST_TO_ADDR
// if not tmp then
75813: LD_VAR 0 3
75817: NOT
75818: IFFALSE 75822
// exit ;
75820: GO 75878
// un := tmp [ rand ( 1 , tmp ) ] ;
75822: LD_ADDR_VAR 0 2
75826: PUSH
75827: LD_VAR 0 3
75831: PUSH
75832: LD_INT 1
75834: PPUSH
75835: LD_VAR 0 3
75839: PPUSH
75840: CALL_OW 12
75844: ARRAY
75845: ST_TO_ADDR
// if Crawls ( un ) then
75846: LD_VAR 0 2
75850: PPUSH
75851: CALL_OW 318
75855: IFFALSE 75866
// ComWalk ( un ) ;
75857: LD_VAR 0 2
75861: PPUSH
75862: CALL_OW 138
// SetClass ( un , class_sniper ) ;
75866: LD_VAR 0 2
75870: PPUSH
75871: LD_INT 5
75873: PPUSH
75874: CALL_OW 336
// end ;
75878: PPOPN 3
75880: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
75881: LD_EXP 67
75885: PUSH
75886: LD_EXP 85
75890: AND
75891: PUSH
75892: LD_OWVAR 67
75896: PUSH
75897: LD_INT 4
75899: LESS
75900: AND
75901: IFFALSE 75920
75903: GO 75905
75905: DISABLE
// begin Difficulty := Difficulty + 1 ;
75906: LD_ADDR_OWVAR 67
75910: PUSH
75911: LD_OWVAR 67
75915: PUSH
75916: LD_INT 1
75918: PLUS
75919: ST_TO_ADDR
// end ;
75920: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
75921: LD_EXP 67
75925: PUSH
75926: LD_EXP 86
75930: AND
75931: IFFALSE 76034
75933: GO 75935
75935: DISABLE
75936: LD_INT 0
75938: PPUSH
// begin for i := 1 to 5 do
75939: LD_ADDR_VAR 0 1
75943: PUSH
75944: DOUBLE
75945: LD_INT 1
75947: DEC
75948: ST_TO_ADDR
75949: LD_INT 5
75951: PUSH
75952: FOR_TO
75953: IFFALSE 76032
// begin uc_nation := nation_nature ;
75955: LD_ADDR_OWVAR 21
75959: PUSH
75960: LD_INT 0
75962: ST_TO_ADDR
// uc_side := 0 ;
75963: LD_ADDR_OWVAR 20
75967: PUSH
75968: LD_INT 0
75970: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75971: LD_ADDR_OWVAR 29
75975: PUSH
75976: LD_INT 12
75978: PUSH
75979: LD_INT 12
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: ST_TO_ADDR
// hc_agressivity := 20 ;
75986: LD_ADDR_OWVAR 35
75990: PUSH
75991: LD_INT 20
75993: ST_TO_ADDR
// hc_class := class_tiger ;
75994: LD_ADDR_OWVAR 28
75998: PUSH
75999: LD_INT 14
76001: ST_TO_ADDR
// hc_gallery :=  ;
76002: LD_ADDR_OWVAR 33
76006: PUSH
76007: LD_STRING 
76009: ST_TO_ADDR
// hc_name :=  ;
76010: LD_ADDR_OWVAR 26
76014: PUSH
76015: LD_STRING 
76017: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
76018: CALL_OW 44
76022: PPUSH
76023: LD_INT 0
76025: PPUSH
76026: CALL_OW 51
// end ;
76030: GO 75952
76032: POP
76033: POP
// end ;
76034: PPOPN 1
76036: END
// every 0 0$1 trigger StreamModeActive and sBomb do
76037: LD_EXP 67
76041: PUSH
76042: LD_EXP 87
76046: AND
76047: IFFALSE 76056
76049: GO 76051
76051: DISABLE
// StreamSibBomb ;
76052: CALL 76057 0 0
76056: END
// export function StreamSibBomb ; var i , x , y ; begin
76057: LD_INT 0
76059: PPUSH
76060: PPUSH
76061: PPUSH
76062: PPUSH
// result := false ;
76063: LD_ADDR_VAR 0 1
76067: PUSH
76068: LD_INT 0
76070: ST_TO_ADDR
// for i := 1 to 16 do
76071: LD_ADDR_VAR 0 2
76075: PUSH
76076: DOUBLE
76077: LD_INT 1
76079: DEC
76080: ST_TO_ADDR
76081: LD_INT 16
76083: PUSH
76084: FOR_TO
76085: IFFALSE 76284
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76087: LD_ADDR_VAR 0 3
76091: PUSH
76092: LD_INT 10
76094: PUSH
76095: LD_INT 20
76097: PUSH
76098: LD_INT 30
76100: PUSH
76101: LD_INT 40
76103: PUSH
76104: LD_INT 50
76106: PUSH
76107: LD_INT 60
76109: PUSH
76110: LD_INT 70
76112: PUSH
76113: LD_INT 80
76115: PUSH
76116: LD_INT 90
76118: PUSH
76119: LD_INT 100
76121: PUSH
76122: LD_INT 110
76124: PUSH
76125: LD_INT 120
76127: PUSH
76128: LD_INT 130
76130: PUSH
76131: LD_INT 140
76133: PUSH
76134: LD_INT 150
76136: PUSH
76137: EMPTY
76138: LIST
76139: LIST
76140: LIST
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: LIST
76153: PUSH
76154: LD_INT 1
76156: PPUSH
76157: LD_INT 15
76159: PPUSH
76160: CALL_OW 12
76164: ARRAY
76165: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76166: LD_ADDR_VAR 0 4
76170: PUSH
76171: LD_INT 10
76173: PUSH
76174: LD_INT 20
76176: PUSH
76177: LD_INT 30
76179: PUSH
76180: LD_INT 40
76182: PUSH
76183: LD_INT 50
76185: PUSH
76186: LD_INT 60
76188: PUSH
76189: LD_INT 70
76191: PUSH
76192: LD_INT 80
76194: PUSH
76195: LD_INT 90
76197: PUSH
76198: LD_INT 100
76200: PUSH
76201: LD_INT 110
76203: PUSH
76204: LD_INT 120
76206: PUSH
76207: LD_INT 130
76209: PUSH
76210: LD_INT 140
76212: PUSH
76213: LD_INT 150
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: PUSH
76233: LD_INT 1
76235: PPUSH
76236: LD_INT 15
76238: PPUSH
76239: CALL_OW 12
76243: ARRAY
76244: ST_TO_ADDR
// if ValidHex ( x , y ) then
76245: LD_VAR 0 3
76249: PPUSH
76250: LD_VAR 0 4
76254: PPUSH
76255: CALL_OW 488
76259: IFFALSE 76282
// begin result := [ x , y ] ;
76261: LD_ADDR_VAR 0 1
76265: PUSH
76266: LD_VAR 0 3
76270: PUSH
76271: LD_VAR 0 4
76275: PUSH
76276: EMPTY
76277: LIST
76278: LIST
76279: ST_TO_ADDR
// break ;
76280: GO 76284
// end ; end ;
76282: GO 76084
76284: POP
76285: POP
// if result then
76286: LD_VAR 0 1
76290: IFFALSE 76350
// begin ToLua ( playSibBomb() ) ;
76292: LD_STRING playSibBomb()
76294: PPUSH
76295: CALL_OW 559
// wait ( 0 0$14 ) ;
76299: LD_INT 490
76301: PPUSH
76302: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
76306: LD_VAR 0 1
76310: PUSH
76311: LD_INT 1
76313: ARRAY
76314: PPUSH
76315: LD_VAR 0 1
76319: PUSH
76320: LD_INT 2
76322: ARRAY
76323: PPUSH
76324: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
76328: LD_VAR 0 1
76332: PUSH
76333: LD_INT 1
76335: ARRAY
76336: PPUSH
76337: LD_VAR 0 1
76341: PUSH
76342: LD_INT 2
76344: ARRAY
76345: PPUSH
76346: CALL_OW 429
// end ; end ;
76350: LD_VAR 0 1
76354: RET
// every 0 0$1 trigger StreamModeActive and sReset do
76355: LD_EXP 67
76359: PUSH
76360: LD_EXP 89
76364: AND
76365: IFFALSE 76377
76367: GO 76369
76369: DISABLE
// YouLost (  ) ;
76370: LD_STRING 
76372: PPUSH
76373: CALL_OW 104
76377: END
// every 0 0$1 trigger StreamModeActive and sFog do
76378: LD_EXP 67
76382: PUSH
76383: LD_EXP 88
76387: AND
76388: IFFALSE 76402
76390: GO 76392
76392: DISABLE
// FogOff ( your_side ) ;
76393: LD_OWVAR 2
76397: PPUSH
76398: CALL_OW 344
76402: END
// every 0 0$1 trigger StreamModeActive and sSun do
76403: LD_EXP 67
76407: PUSH
76408: LD_EXP 90
76412: AND
76413: IFFALSE 76441
76415: GO 76417
76417: DISABLE
// begin solar_recharge_percent := 0 ;
76418: LD_ADDR_OWVAR 79
76422: PUSH
76423: LD_INT 0
76425: ST_TO_ADDR
// wait ( 5 5$00 ) ;
76426: LD_INT 10500
76428: PPUSH
76429: CALL_OW 67
// solar_recharge_percent := 100 ;
76433: LD_ADDR_OWVAR 79
76437: PUSH
76438: LD_INT 100
76440: ST_TO_ADDR
// end ;
76441: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
76442: LD_EXP 67
76446: PUSH
76447: LD_EXP 91
76451: AND
76452: IFFALSE 76691
76454: GO 76456
76456: DISABLE
76457: LD_INT 0
76459: PPUSH
76460: PPUSH
76461: PPUSH
// begin tmp := [ ] ;
76462: LD_ADDR_VAR 0 3
76466: PUSH
76467: EMPTY
76468: ST_TO_ADDR
// for i := 1 to 6 do
76469: LD_ADDR_VAR 0 1
76473: PUSH
76474: DOUBLE
76475: LD_INT 1
76477: DEC
76478: ST_TO_ADDR
76479: LD_INT 6
76481: PUSH
76482: FOR_TO
76483: IFFALSE 76588
// begin uc_nation := nation_nature ;
76485: LD_ADDR_OWVAR 21
76489: PUSH
76490: LD_INT 0
76492: ST_TO_ADDR
// uc_side := 0 ;
76493: LD_ADDR_OWVAR 20
76497: PUSH
76498: LD_INT 0
76500: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76501: LD_ADDR_OWVAR 29
76505: PUSH
76506: LD_INT 12
76508: PUSH
76509: LD_INT 12
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: ST_TO_ADDR
// hc_agressivity := 20 ;
76516: LD_ADDR_OWVAR 35
76520: PUSH
76521: LD_INT 20
76523: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
76524: LD_ADDR_OWVAR 28
76528: PUSH
76529: LD_INT 17
76531: ST_TO_ADDR
// hc_gallery :=  ;
76532: LD_ADDR_OWVAR 33
76536: PUSH
76537: LD_STRING 
76539: ST_TO_ADDR
// hc_name :=  ;
76540: LD_ADDR_OWVAR 26
76544: PUSH
76545: LD_STRING 
76547: ST_TO_ADDR
// un := CreateHuman ;
76548: LD_ADDR_VAR 0 2
76552: PUSH
76553: CALL_OW 44
76557: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
76558: LD_VAR 0 2
76562: PPUSH
76563: LD_INT 1
76565: PPUSH
76566: CALL_OW 51
// tmp := tmp ^ un ;
76570: LD_ADDR_VAR 0 3
76574: PUSH
76575: LD_VAR 0 3
76579: PUSH
76580: LD_VAR 0 2
76584: ADD
76585: ST_TO_ADDR
// end ;
76586: GO 76482
76588: POP
76589: POP
// repeat wait ( 0 0$1 ) ;
76590: LD_INT 35
76592: PPUSH
76593: CALL_OW 67
// for un in tmp do
76597: LD_ADDR_VAR 0 2
76601: PUSH
76602: LD_VAR 0 3
76606: PUSH
76607: FOR_IN
76608: IFFALSE 76682
// begin if IsDead ( un ) then
76610: LD_VAR 0 2
76614: PPUSH
76615: CALL_OW 301
76619: IFFALSE 76639
// begin tmp := tmp diff un ;
76621: LD_ADDR_VAR 0 3
76625: PUSH
76626: LD_VAR 0 3
76630: PUSH
76631: LD_VAR 0 2
76635: DIFF
76636: ST_TO_ADDR
// continue ;
76637: GO 76607
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
76639: LD_VAR 0 2
76643: PPUSH
76644: LD_INT 3
76646: PUSH
76647: LD_INT 22
76649: PUSH
76650: LD_INT 0
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PPUSH
76661: CALL_OW 69
76665: PPUSH
76666: LD_VAR 0 2
76670: PPUSH
76671: CALL_OW 74
76675: PPUSH
76676: CALL_OW 115
// end ;
76680: GO 76607
76682: POP
76683: POP
// until not tmp ;
76684: LD_VAR 0 3
76688: NOT
76689: IFFALSE 76590
// end ;
76691: PPOPN 3
76693: END
// every 0 0$1 trigger StreamModeActive and sTroll do
76694: LD_EXP 67
76698: PUSH
76699: LD_EXP 92
76703: AND
76704: IFFALSE 76758
76706: GO 76708
76708: DISABLE
// begin ToLua ( displayTroll(); ) ;
76709: LD_STRING displayTroll();
76711: PPUSH
76712: CALL_OW 559
// wait ( 3 3$00 ) ;
76716: LD_INT 6300
76718: PPUSH
76719: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76723: LD_STRING hideTroll();
76725: PPUSH
76726: CALL_OW 559
// wait ( 1 1$00 ) ;
76730: LD_INT 2100
76732: PPUSH
76733: CALL_OW 67
// ToLua ( displayTroll(); ) ;
76737: LD_STRING displayTroll();
76739: PPUSH
76740: CALL_OW 559
// wait ( 1 1$00 ) ;
76744: LD_INT 2100
76746: PPUSH
76747: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76751: LD_STRING hideTroll();
76753: PPUSH
76754: CALL_OW 559
// end ;
76758: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
76759: LD_EXP 67
76763: PUSH
76764: LD_EXP 93
76768: AND
76769: IFFALSE 76832
76771: GO 76773
76773: DISABLE
76774: LD_INT 0
76776: PPUSH
// begin p := 0 ;
76777: LD_ADDR_VAR 0 1
76781: PUSH
76782: LD_INT 0
76784: ST_TO_ADDR
// repeat game_speed := 1 ;
76785: LD_ADDR_OWVAR 65
76789: PUSH
76790: LD_INT 1
76792: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76793: LD_INT 35
76795: PPUSH
76796: CALL_OW 67
// p := p + 1 ;
76800: LD_ADDR_VAR 0 1
76804: PUSH
76805: LD_VAR 0 1
76809: PUSH
76810: LD_INT 1
76812: PLUS
76813: ST_TO_ADDR
// until p >= 60 ;
76814: LD_VAR 0 1
76818: PUSH
76819: LD_INT 60
76821: GREATEREQUAL
76822: IFFALSE 76785
// game_speed := 4 ;
76824: LD_ADDR_OWVAR 65
76828: PUSH
76829: LD_INT 4
76831: ST_TO_ADDR
// end ;
76832: PPOPN 1
76834: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
76835: LD_EXP 67
76839: PUSH
76840: LD_EXP 94
76844: AND
76845: IFFALSE 76991
76847: GO 76849
76849: DISABLE
76850: LD_INT 0
76852: PPUSH
76853: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76854: LD_ADDR_VAR 0 1
76858: PUSH
76859: LD_INT 22
76861: PUSH
76862: LD_OWVAR 2
76866: PUSH
76867: EMPTY
76868: LIST
76869: LIST
76870: PUSH
76871: LD_INT 2
76873: PUSH
76874: LD_INT 30
76876: PUSH
76877: LD_INT 0
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: PUSH
76884: LD_INT 30
76886: PUSH
76887: LD_INT 1
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: LIST
76898: PUSH
76899: EMPTY
76900: LIST
76901: LIST
76902: PPUSH
76903: CALL_OW 69
76907: ST_TO_ADDR
// if not depot then
76908: LD_VAR 0 1
76912: NOT
76913: IFFALSE 76917
// exit ;
76915: GO 76991
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
76917: LD_ADDR_VAR 0 2
76921: PUSH
76922: LD_VAR 0 1
76926: PUSH
76927: LD_INT 1
76929: PPUSH
76930: LD_VAR 0 1
76934: PPUSH
76935: CALL_OW 12
76939: ARRAY
76940: PPUSH
76941: CALL_OW 274
76945: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
76946: LD_VAR 0 2
76950: PPUSH
76951: LD_INT 1
76953: PPUSH
76954: LD_INT 0
76956: PPUSH
76957: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
76961: LD_VAR 0 2
76965: PPUSH
76966: LD_INT 2
76968: PPUSH
76969: LD_INT 0
76971: PPUSH
76972: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
76976: LD_VAR 0 2
76980: PPUSH
76981: LD_INT 3
76983: PPUSH
76984: LD_INT 0
76986: PPUSH
76987: CALL_OW 277
// end ;
76991: PPOPN 2
76993: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
76994: LD_EXP 67
76998: PUSH
76999: LD_EXP 95
77003: AND
77004: IFFALSE 77101
77006: GO 77008
77008: DISABLE
77009: LD_INT 0
77011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77012: LD_ADDR_VAR 0 1
77016: PUSH
77017: LD_INT 22
77019: PUSH
77020: LD_OWVAR 2
77024: PUSH
77025: EMPTY
77026: LIST
77027: LIST
77028: PUSH
77029: LD_INT 21
77031: PUSH
77032: LD_INT 1
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: PUSH
77039: LD_INT 3
77041: PUSH
77042: LD_INT 23
77044: PUSH
77045: LD_INT 0
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PUSH
77052: EMPTY
77053: LIST
77054: LIST
77055: PUSH
77056: EMPTY
77057: LIST
77058: LIST
77059: LIST
77060: PPUSH
77061: CALL_OW 69
77065: ST_TO_ADDR
// if not tmp then
77066: LD_VAR 0 1
77070: NOT
77071: IFFALSE 77075
// exit ;
77073: GO 77101
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
77075: LD_VAR 0 1
77079: PUSH
77080: LD_INT 1
77082: PPUSH
77083: LD_VAR 0 1
77087: PPUSH
77088: CALL_OW 12
77092: ARRAY
77093: PPUSH
77094: LD_INT 200
77096: PPUSH
77097: CALL_OW 234
// end ;
77101: PPOPN 1
77103: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
77104: LD_EXP 67
77108: PUSH
77109: LD_EXP 96
77113: AND
77114: IFFALSE 77193
77116: GO 77118
77118: DISABLE
77119: LD_INT 0
77121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
77122: LD_ADDR_VAR 0 1
77126: PUSH
77127: LD_INT 22
77129: PUSH
77130: LD_OWVAR 2
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PUSH
77139: LD_INT 21
77141: PUSH
77142: LD_INT 2
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: PPUSH
77153: CALL_OW 69
77157: ST_TO_ADDR
// if not tmp then
77158: LD_VAR 0 1
77162: NOT
77163: IFFALSE 77167
// exit ;
77165: GO 77193
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
77167: LD_VAR 0 1
77171: PUSH
77172: LD_INT 1
77174: PPUSH
77175: LD_VAR 0 1
77179: PPUSH
77180: CALL_OW 12
77184: ARRAY
77185: PPUSH
77186: LD_INT 60
77188: PPUSH
77189: CALL_OW 234
// end ;
77193: PPOPN 1
77195: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
77196: LD_EXP 67
77200: PUSH
77201: LD_EXP 97
77205: AND
77206: IFFALSE 77305
77208: GO 77210
77210: DISABLE
77211: LD_INT 0
77213: PPUSH
77214: PPUSH
// begin enable ;
77215: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
77216: LD_ADDR_VAR 0 1
77220: PUSH
77221: LD_INT 22
77223: PUSH
77224: LD_OWVAR 2
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: PUSH
77233: LD_INT 61
77235: PUSH
77236: EMPTY
77237: LIST
77238: PUSH
77239: LD_INT 33
77241: PUSH
77242: LD_INT 2
77244: PUSH
77245: EMPTY
77246: LIST
77247: LIST
77248: PUSH
77249: EMPTY
77250: LIST
77251: LIST
77252: LIST
77253: PPUSH
77254: CALL_OW 69
77258: ST_TO_ADDR
// if not tmp then
77259: LD_VAR 0 1
77263: NOT
77264: IFFALSE 77268
// exit ;
77266: GO 77305
// for i in tmp do
77268: LD_ADDR_VAR 0 2
77272: PUSH
77273: LD_VAR 0 1
77277: PUSH
77278: FOR_IN
77279: IFFALSE 77303
// if IsControledBy ( i ) then
77281: LD_VAR 0 2
77285: PPUSH
77286: CALL_OW 312
77290: IFFALSE 77301
// ComUnlink ( i ) ;
77292: LD_VAR 0 2
77296: PPUSH
77297: CALL_OW 136
77301: GO 77278
77303: POP
77304: POP
// end ;
77305: PPOPN 2
77307: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
77308: LD_EXP 67
77312: PUSH
77313: LD_EXP 98
77317: AND
77318: IFFALSE 77458
77320: GO 77322
77322: DISABLE
77323: LD_INT 0
77325: PPUSH
77326: PPUSH
// begin ToLua ( displayPowell(); ) ;
77327: LD_STRING displayPowell();
77329: PPUSH
77330: CALL_OW 559
// uc_side := 0 ;
77334: LD_ADDR_OWVAR 20
77338: PUSH
77339: LD_INT 0
77341: ST_TO_ADDR
// uc_nation := 2 ;
77342: LD_ADDR_OWVAR 21
77346: PUSH
77347: LD_INT 2
77349: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
77350: LD_ADDR_OWVAR 37
77354: PUSH
77355: LD_INT 14
77357: ST_TO_ADDR
// vc_engine := engine_siberite ;
77358: LD_ADDR_OWVAR 39
77362: PUSH
77363: LD_INT 3
77365: ST_TO_ADDR
// vc_control := control_apeman ;
77366: LD_ADDR_OWVAR 38
77370: PUSH
77371: LD_INT 5
77373: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
77374: LD_ADDR_OWVAR 40
77378: PUSH
77379: LD_INT 29
77381: ST_TO_ADDR
// un := CreateVehicle ;
77382: LD_ADDR_VAR 0 2
77386: PUSH
77387: CALL_OW 45
77391: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77392: LD_VAR 0 2
77396: PPUSH
77397: LD_INT 1
77399: PPUSH
77400: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77404: LD_INT 35
77406: PPUSH
77407: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77411: LD_VAR 0 2
77415: PPUSH
77416: LD_INT 22
77418: PUSH
77419: LD_OWVAR 2
77423: PUSH
77424: EMPTY
77425: LIST
77426: LIST
77427: PPUSH
77428: CALL_OW 69
77432: PPUSH
77433: LD_VAR 0 2
77437: PPUSH
77438: CALL_OW 74
77442: PPUSH
77443: CALL_OW 115
// until IsDead ( un ) ;
77447: LD_VAR 0 2
77451: PPUSH
77452: CALL_OW 301
77456: IFFALSE 77404
// end ;
77458: PPOPN 2
77460: END
// every 0 0$1 trigger StreamModeActive and sStu do
77461: LD_EXP 67
77465: PUSH
77466: LD_EXP 106
77470: AND
77471: IFFALSE 77487
77473: GO 77475
77475: DISABLE
// begin ToLua ( displayStucuk(); ) ;
77476: LD_STRING displayStucuk();
77478: PPUSH
77479: CALL_OW 559
// ResetFog ;
77483: CALL_OW 335
// end ;
77487: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
77488: LD_EXP 67
77492: PUSH
77493: LD_EXP 99
77497: AND
77498: IFFALSE 77639
77500: GO 77502
77502: DISABLE
77503: LD_INT 0
77505: PPUSH
77506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77507: LD_ADDR_VAR 0 2
77511: PUSH
77512: LD_INT 22
77514: PUSH
77515: LD_OWVAR 2
77519: PUSH
77520: EMPTY
77521: LIST
77522: LIST
77523: PUSH
77524: LD_INT 21
77526: PUSH
77527: LD_INT 1
77529: PUSH
77530: EMPTY
77531: LIST
77532: LIST
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: PPUSH
77538: CALL_OW 69
77542: ST_TO_ADDR
// if not tmp then
77543: LD_VAR 0 2
77547: NOT
77548: IFFALSE 77552
// exit ;
77550: GO 77639
// un := tmp [ rand ( 1 , tmp ) ] ;
77552: LD_ADDR_VAR 0 1
77556: PUSH
77557: LD_VAR 0 2
77561: PUSH
77562: LD_INT 1
77564: PPUSH
77565: LD_VAR 0 2
77569: PPUSH
77570: CALL_OW 12
77574: ARRAY
77575: ST_TO_ADDR
// SetSide ( un , 0 ) ;
77576: LD_VAR 0 1
77580: PPUSH
77581: LD_INT 0
77583: PPUSH
77584: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
77588: LD_VAR 0 1
77592: PPUSH
77593: LD_OWVAR 3
77597: PUSH
77598: LD_VAR 0 1
77602: DIFF
77603: PPUSH
77604: LD_VAR 0 1
77608: PPUSH
77609: CALL_OW 74
77613: PPUSH
77614: CALL_OW 115
// wait ( 0 0$20 ) ;
77618: LD_INT 700
77620: PPUSH
77621: CALL_OW 67
// SetSide ( un , your_side ) ;
77625: LD_VAR 0 1
77629: PPUSH
77630: LD_OWVAR 2
77634: PPUSH
77635: CALL_OW 235
// end ;
77639: PPOPN 2
77641: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
77642: LD_EXP 67
77646: PUSH
77647: LD_EXP 100
77651: AND
77652: IFFALSE 77758
77654: GO 77656
77656: DISABLE
77657: LD_INT 0
77659: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77660: LD_ADDR_VAR 0 1
77664: PUSH
77665: LD_INT 22
77667: PUSH
77668: LD_OWVAR 2
77672: PUSH
77673: EMPTY
77674: LIST
77675: LIST
77676: PUSH
77677: LD_INT 2
77679: PUSH
77680: LD_INT 30
77682: PUSH
77683: LD_INT 0
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: PUSH
77690: LD_INT 30
77692: PUSH
77693: LD_INT 1
77695: PUSH
77696: EMPTY
77697: LIST
77698: LIST
77699: PUSH
77700: EMPTY
77701: LIST
77702: LIST
77703: LIST
77704: PUSH
77705: EMPTY
77706: LIST
77707: LIST
77708: PPUSH
77709: CALL_OW 69
77713: ST_TO_ADDR
// if not depot then
77714: LD_VAR 0 1
77718: NOT
77719: IFFALSE 77723
// exit ;
77721: GO 77758
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
77723: LD_VAR 0 1
77727: PUSH
77728: LD_INT 1
77730: ARRAY
77731: PPUSH
77732: CALL_OW 250
77736: PPUSH
77737: LD_VAR 0 1
77741: PUSH
77742: LD_INT 1
77744: ARRAY
77745: PPUSH
77746: CALL_OW 251
77750: PPUSH
77751: LD_INT 70
77753: PPUSH
77754: CALL_OW 495
// end ;
77758: PPOPN 1
77760: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
77761: LD_EXP 67
77765: PUSH
77766: LD_EXP 101
77770: AND
77771: IFFALSE 77982
77773: GO 77775
77775: DISABLE
77776: LD_INT 0
77778: PPUSH
77779: PPUSH
77780: PPUSH
77781: PPUSH
77782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77783: LD_ADDR_VAR 0 5
77787: PUSH
77788: LD_INT 22
77790: PUSH
77791: LD_OWVAR 2
77795: PUSH
77796: EMPTY
77797: LIST
77798: LIST
77799: PUSH
77800: LD_INT 21
77802: PUSH
77803: LD_INT 1
77805: PUSH
77806: EMPTY
77807: LIST
77808: LIST
77809: PUSH
77810: EMPTY
77811: LIST
77812: LIST
77813: PPUSH
77814: CALL_OW 69
77818: ST_TO_ADDR
// if not tmp then
77819: LD_VAR 0 5
77823: NOT
77824: IFFALSE 77828
// exit ;
77826: GO 77982
// for i in tmp do
77828: LD_ADDR_VAR 0 1
77832: PUSH
77833: LD_VAR 0 5
77837: PUSH
77838: FOR_IN
77839: IFFALSE 77980
// begin d := rand ( 0 , 5 ) ;
77841: LD_ADDR_VAR 0 4
77845: PUSH
77846: LD_INT 0
77848: PPUSH
77849: LD_INT 5
77851: PPUSH
77852: CALL_OW 12
77856: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
77857: LD_ADDR_VAR 0 2
77861: PUSH
77862: LD_VAR 0 1
77866: PPUSH
77867: CALL_OW 250
77871: PPUSH
77872: LD_VAR 0 4
77876: PPUSH
77877: LD_INT 3
77879: PPUSH
77880: LD_INT 12
77882: PPUSH
77883: CALL_OW 12
77887: PPUSH
77888: CALL_OW 272
77892: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
77893: LD_ADDR_VAR 0 3
77897: PUSH
77898: LD_VAR 0 1
77902: PPUSH
77903: CALL_OW 251
77907: PPUSH
77908: LD_VAR 0 4
77912: PPUSH
77913: LD_INT 3
77915: PPUSH
77916: LD_INT 12
77918: PPUSH
77919: CALL_OW 12
77923: PPUSH
77924: CALL_OW 273
77928: ST_TO_ADDR
// if ValidHex ( x , y ) then
77929: LD_VAR 0 2
77933: PPUSH
77934: LD_VAR 0 3
77938: PPUSH
77939: CALL_OW 488
77943: IFFALSE 77978
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
77945: LD_VAR 0 1
77949: PPUSH
77950: LD_VAR 0 2
77954: PPUSH
77955: LD_VAR 0 3
77959: PPUSH
77960: LD_INT 3
77962: PPUSH
77963: LD_INT 6
77965: PPUSH
77966: CALL_OW 12
77970: PPUSH
77971: LD_INT 1
77973: PPUSH
77974: CALL_OW 483
// end ;
77978: GO 77838
77980: POP
77981: POP
// end ;
77982: PPOPN 5
77984: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
77985: LD_EXP 67
77989: PUSH
77990: LD_EXP 102
77994: AND
77995: IFFALSE 78089
77997: GO 77999
77999: DISABLE
78000: LD_INT 0
78002: PPUSH
78003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
78004: LD_ADDR_VAR 0 2
78008: PUSH
78009: LD_INT 22
78011: PUSH
78012: LD_OWVAR 2
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: PUSH
78021: LD_INT 32
78023: PUSH
78024: LD_INT 1
78026: PUSH
78027: EMPTY
78028: LIST
78029: LIST
78030: PUSH
78031: LD_INT 21
78033: PUSH
78034: LD_INT 2
78036: PUSH
78037: EMPTY
78038: LIST
78039: LIST
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: LIST
78045: PPUSH
78046: CALL_OW 69
78050: ST_TO_ADDR
// if not tmp then
78051: LD_VAR 0 2
78055: NOT
78056: IFFALSE 78060
// exit ;
78058: GO 78089
// for i in tmp do
78060: LD_ADDR_VAR 0 1
78064: PUSH
78065: LD_VAR 0 2
78069: PUSH
78070: FOR_IN
78071: IFFALSE 78087
// SetFuel ( i , 0 ) ;
78073: LD_VAR 0 1
78077: PPUSH
78078: LD_INT 0
78080: PPUSH
78081: CALL_OW 240
78085: GO 78070
78087: POP
78088: POP
// end ;
78089: PPOPN 2
78091: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
78092: LD_EXP 67
78096: PUSH
78097: LD_EXP 103
78101: AND
78102: IFFALSE 78168
78104: GO 78106
78106: DISABLE
78107: LD_INT 0
78109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78110: LD_ADDR_VAR 0 1
78114: PUSH
78115: LD_INT 22
78117: PUSH
78118: LD_OWVAR 2
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: PUSH
78127: LD_INT 30
78129: PUSH
78130: LD_INT 29
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: PUSH
78137: EMPTY
78138: LIST
78139: LIST
78140: PPUSH
78141: CALL_OW 69
78145: ST_TO_ADDR
// if not tmp then
78146: LD_VAR 0 1
78150: NOT
78151: IFFALSE 78155
// exit ;
78153: GO 78168
// DestroyUnit ( tmp [ 1 ] ) ;
78155: LD_VAR 0 1
78159: PUSH
78160: LD_INT 1
78162: ARRAY
78163: PPUSH
78164: CALL_OW 65
// end ;
78168: PPOPN 1
78170: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
78171: LD_EXP 67
78175: PUSH
78176: LD_EXP 105
78180: AND
78181: IFFALSE 78310
78183: GO 78185
78185: DISABLE
78186: LD_INT 0
78188: PPUSH
// begin uc_side := 0 ;
78189: LD_ADDR_OWVAR 20
78193: PUSH
78194: LD_INT 0
78196: ST_TO_ADDR
// uc_nation := nation_arabian ;
78197: LD_ADDR_OWVAR 21
78201: PUSH
78202: LD_INT 2
78204: ST_TO_ADDR
// hc_gallery :=  ;
78205: LD_ADDR_OWVAR 33
78209: PUSH
78210: LD_STRING 
78212: ST_TO_ADDR
// hc_name :=  ;
78213: LD_ADDR_OWVAR 26
78217: PUSH
78218: LD_STRING 
78220: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
78221: LD_INT 1
78223: PPUSH
78224: LD_INT 11
78226: PPUSH
78227: LD_INT 10
78229: PPUSH
78230: CALL_OW 380
// un := CreateHuman ;
78234: LD_ADDR_VAR 0 1
78238: PUSH
78239: CALL_OW 44
78243: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78244: LD_VAR 0 1
78248: PPUSH
78249: LD_INT 1
78251: PPUSH
78252: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
78256: LD_INT 35
78258: PPUSH
78259: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
78263: LD_VAR 0 1
78267: PPUSH
78268: LD_INT 22
78270: PUSH
78271: LD_OWVAR 2
78275: PUSH
78276: EMPTY
78277: LIST
78278: LIST
78279: PPUSH
78280: CALL_OW 69
78284: PPUSH
78285: LD_VAR 0 1
78289: PPUSH
78290: CALL_OW 74
78294: PPUSH
78295: CALL_OW 115
// until IsDead ( un ) ;
78299: LD_VAR 0 1
78303: PPUSH
78304: CALL_OW 301
78308: IFFALSE 78256
// end ;
78310: PPOPN 1
78312: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
78313: LD_EXP 67
78317: PUSH
78318: LD_EXP 107
78322: AND
78323: IFFALSE 78335
78325: GO 78327
78327: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
78328: LD_STRING earthquake(getX(game), 0, 32)
78330: PPUSH
78331: CALL_OW 559
78335: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
78336: LD_EXP 67
78340: PUSH
78341: LD_EXP 108
78345: AND
78346: IFFALSE 78437
78348: GO 78350
78350: DISABLE
78351: LD_INT 0
78353: PPUSH
// begin enable ;
78354: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
78355: LD_ADDR_VAR 0 1
78359: PUSH
78360: LD_INT 22
78362: PUSH
78363: LD_OWVAR 2
78367: PUSH
78368: EMPTY
78369: LIST
78370: LIST
78371: PUSH
78372: LD_INT 21
78374: PUSH
78375: LD_INT 2
78377: PUSH
78378: EMPTY
78379: LIST
78380: LIST
78381: PUSH
78382: LD_INT 33
78384: PUSH
78385: LD_INT 3
78387: PUSH
78388: EMPTY
78389: LIST
78390: LIST
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: LIST
78396: PPUSH
78397: CALL_OW 69
78401: ST_TO_ADDR
// if not tmp then
78402: LD_VAR 0 1
78406: NOT
78407: IFFALSE 78411
// exit ;
78409: GO 78437
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78411: LD_VAR 0 1
78415: PUSH
78416: LD_INT 1
78418: PPUSH
78419: LD_VAR 0 1
78423: PPUSH
78424: CALL_OW 12
78428: ARRAY
78429: PPUSH
78430: LD_INT 1
78432: PPUSH
78433: CALL_OW 234
// end ;
78437: PPOPN 1
78439: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
78440: LD_EXP 67
78444: PUSH
78445: LD_EXP 109
78449: AND
78450: IFFALSE 78591
78452: GO 78454
78454: DISABLE
78455: LD_INT 0
78457: PPUSH
78458: PPUSH
78459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78460: LD_ADDR_VAR 0 3
78464: PUSH
78465: LD_INT 22
78467: PUSH
78468: LD_OWVAR 2
78472: PUSH
78473: EMPTY
78474: LIST
78475: LIST
78476: PUSH
78477: LD_INT 25
78479: PUSH
78480: LD_INT 1
78482: PUSH
78483: EMPTY
78484: LIST
78485: LIST
78486: PUSH
78487: EMPTY
78488: LIST
78489: LIST
78490: PPUSH
78491: CALL_OW 69
78495: ST_TO_ADDR
// if not tmp then
78496: LD_VAR 0 3
78500: NOT
78501: IFFALSE 78505
// exit ;
78503: GO 78591
// un := tmp [ rand ( 1 , tmp ) ] ;
78505: LD_ADDR_VAR 0 2
78509: PUSH
78510: LD_VAR 0 3
78514: PUSH
78515: LD_INT 1
78517: PPUSH
78518: LD_VAR 0 3
78522: PPUSH
78523: CALL_OW 12
78527: ARRAY
78528: ST_TO_ADDR
// if Crawls ( un ) then
78529: LD_VAR 0 2
78533: PPUSH
78534: CALL_OW 318
78538: IFFALSE 78549
// ComWalk ( un ) ;
78540: LD_VAR 0 2
78544: PPUSH
78545: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
78549: LD_VAR 0 2
78553: PPUSH
78554: LD_INT 9
78556: PPUSH
78557: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
78561: LD_INT 28
78563: PPUSH
78564: LD_OWVAR 2
78568: PPUSH
78569: LD_INT 2
78571: PPUSH
78572: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
78576: LD_INT 29
78578: PPUSH
78579: LD_OWVAR 2
78583: PPUSH
78584: LD_INT 2
78586: PPUSH
78587: CALL_OW 322
// end ;
78591: PPOPN 3
78593: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
78594: LD_EXP 67
78598: PUSH
78599: LD_EXP 110
78603: AND
78604: IFFALSE 78715
78606: GO 78608
78608: DISABLE
78609: LD_INT 0
78611: PPUSH
78612: PPUSH
78613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78614: LD_ADDR_VAR 0 3
78618: PUSH
78619: LD_INT 22
78621: PUSH
78622: LD_OWVAR 2
78626: PUSH
78627: EMPTY
78628: LIST
78629: LIST
78630: PUSH
78631: LD_INT 25
78633: PUSH
78634: LD_INT 1
78636: PUSH
78637: EMPTY
78638: LIST
78639: LIST
78640: PUSH
78641: EMPTY
78642: LIST
78643: LIST
78644: PPUSH
78645: CALL_OW 69
78649: ST_TO_ADDR
// if not tmp then
78650: LD_VAR 0 3
78654: NOT
78655: IFFALSE 78659
// exit ;
78657: GO 78715
// un := tmp [ rand ( 1 , tmp ) ] ;
78659: LD_ADDR_VAR 0 2
78663: PUSH
78664: LD_VAR 0 3
78668: PUSH
78669: LD_INT 1
78671: PPUSH
78672: LD_VAR 0 3
78676: PPUSH
78677: CALL_OW 12
78681: ARRAY
78682: ST_TO_ADDR
// if Crawls ( un ) then
78683: LD_VAR 0 2
78687: PPUSH
78688: CALL_OW 318
78692: IFFALSE 78703
// ComWalk ( un ) ;
78694: LD_VAR 0 2
78698: PPUSH
78699: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78703: LD_VAR 0 2
78707: PPUSH
78708: LD_INT 8
78710: PPUSH
78711: CALL_OW 336
// end ;
78715: PPOPN 3
78717: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
78718: LD_EXP 67
78722: PUSH
78723: LD_EXP 111
78727: AND
78728: IFFALSE 78872
78730: GO 78732
78732: DISABLE
78733: LD_INT 0
78735: PPUSH
78736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
78737: LD_ADDR_VAR 0 2
78741: PUSH
78742: LD_INT 22
78744: PUSH
78745: LD_OWVAR 2
78749: PUSH
78750: EMPTY
78751: LIST
78752: LIST
78753: PUSH
78754: LD_INT 21
78756: PUSH
78757: LD_INT 2
78759: PUSH
78760: EMPTY
78761: LIST
78762: LIST
78763: PUSH
78764: LD_INT 2
78766: PUSH
78767: LD_INT 34
78769: PUSH
78770: LD_INT 12
78772: PUSH
78773: EMPTY
78774: LIST
78775: LIST
78776: PUSH
78777: LD_INT 34
78779: PUSH
78780: LD_INT 51
78782: PUSH
78783: EMPTY
78784: LIST
78785: LIST
78786: PUSH
78787: LD_INT 34
78789: PUSH
78790: LD_INT 32
78792: PUSH
78793: EMPTY
78794: LIST
78795: LIST
78796: PUSH
78797: EMPTY
78798: LIST
78799: LIST
78800: LIST
78801: LIST
78802: PUSH
78803: EMPTY
78804: LIST
78805: LIST
78806: LIST
78807: PPUSH
78808: CALL_OW 69
78812: ST_TO_ADDR
// if not tmp then
78813: LD_VAR 0 2
78817: NOT
78818: IFFALSE 78822
// exit ;
78820: GO 78872
// for i in tmp do
78822: LD_ADDR_VAR 0 1
78826: PUSH
78827: LD_VAR 0 2
78831: PUSH
78832: FOR_IN
78833: IFFALSE 78870
// if GetCargo ( i , mat_artifact ) = 0 then
78835: LD_VAR 0 1
78839: PPUSH
78840: LD_INT 4
78842: PPUSH
78843: CALL_OW 289
78847: PUSH
78848: LD_INT 0
78850: EQUAL
78851: IFFALSE 78868
// SetCargo ( i , mat_siberit , 100 ) ;
78853: LD_VAR 0 1
78857: PPUSH
78858: LD_INT 3
78860: PPUSH
78861: LD_INT 100
78863: PPUSH
78864: CALL_OW 290
78868: GO 78832
78870: POP
78871: POP
// end ;
78872: PPOPN 2
78874: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
78875: LD_EXP 67
78879: PUSH
78880: LD_EXP 112
78884: AND
78885: IFFALSE 79068
78887: GO 78889
78889: DISABLE
78890: LD_INT 0
78892: PPUSH
78893: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78894: LD_ADDR_VAR 0 2
78898: PUSH
78899: LD_INT 22
78901: PUSH
78902: LD_OWVAR 2
78906: PUSH
78907: EMPTY
78908: LIST
78909: LIST
78910: PPUSH
78911: CALL_OW 69
78915: ST_TO_ADDR
// if not tmp then
78916: LD_VAR 0 2
78920: NOT
78921: IFFALSE 78925
// exit ;
78923: GO 79068
// for i := 1 to 2 do
78925: LD_ADDR_VAR 0 1
78929: PUSH
78930: DOUBLE
78931: LD_INT 1
78933: DEC
78934: ST_TO_ADDR
78935: LD_INT 2
78937: PUSH
78938: FOR_TO
78939: IFFALSE 79066
// begin uc_side := your_side ;
78941: LD_ADDR_OWVAR 20
78945: PUSH
78946: LD_OWVAR 2
78950: ST_TO_ADDR
// uc_nation := nation_american ;
78951: LD_ADDR_OWVAR 21
78955: PUSH
78956: LD_INT 1
78958: ST_TO_ADDR
// vc_chassis := us_morphling ;
78959: LD_ADDR_OWVAR 37
78963: PUSH
78964: LD_INT 5
78966: ST_TO_ADDR
// vc_engine := engine_siberite ;
78967: LD_ADDR_OWVAR 39
78971: PUSH
78972: LD_INT 3
78974: ST_TO_ADDR
// vc_control := control_computer ;
78975: LD_ADDR_OWVAR 38
78979: PUSH
78980: LD_INT 3
78982: ST_TO_ADDR
// vc_weapon := us_double_laser ;
78983: LD_ADDR_OWVAR 40
78987: PUSH
78988: LD_INT 10
78990: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
78991: LD_VAR 0 2
78995: PUSH
78996: LD_INT 1
78998: ARRAY
78999: PPUSH
79000: CALL_OW 310
79004: NOT
79005: IFFALSE 79052
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
79007: CALL_OW 45
79011: PPUSH
79012: LD_VAR 0 2
79016: PUSH
79017: LD_INT 1
79019: ARRAY
79020: PPUSH
79021: CALL_OW 250
79025: PPUSH
79026: LD_VAR 0 2
79030: PUSH
79031: LD_INT 1
79033: ARRAY
79034: PPUSH
79035: CALL_OW 251
79039: PPUSH
79040: LD_INT 12
79042: PPUSH
79043: LD_INT 1
79045: PPUSH
79046: CALL_OW 50
79050: GO 79064
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
79052: CALL_OW 45
79056: PPUSH
79057: LD_INT 1
79059: PPUSH
79060: CALL_OW 51
// end ;
79064: GO 78938
79066: POP
79067: POP
// end ;
79068: PPOPN 2
79070: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
79071: LD_EXP 67
79075: PUSH
79076: LD_EXP 113
79080: AND
79081: IFFALSE 79303
79083: GO 79085
79085: DISABLE
79086: LD_INT 0
79088: PPUSH
79089: PPUSH
79090: PPUSH
79091: PPUSH
79092: PPUSH
79093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79094: LD_ADDR_VAR 0 6
79098: PUSH
79099: LD_INT 22
79101: PUSH
79102: LD_OWVAR 2
79106: PUSH
79107: EMPTY
79108: LIST
79109: LIST
79110: PUSH
79111: LD_INT 21
79113: PUSH
79114: LD_INT 1
79116: PUSH
79117: EMPTY
79118: LIST
79119: LIST
79120: PUSH
79121: LD_INT 3
79123: PUSH
79124: LD_INT 23
79126: PUSH
79127: LD_INT 0
79129: PUSH
79130: EMPTY
79131: LIST
79132: LIST
79133: PUSH
79134: EMPTY
79135: LIST
79136: LIST
79137: PUSH
79138: EMPTY
79139: LIST
79140: LIST
79141: LIST
79142: PPUSH
79143: CALL_OW 69
79147: ST_TO_ADDR
// if not tmp then
79148: LD_VAR 0 6
79152: NOT
79153: IFFALSE 79157
// exit ;
79155: GO 79303
// s1 := rand ( 1 , 4 ) ;
79157: LD_ADDR_VAR 0 2
79161: PUSH
79162: LD_INT 1
79164: PPUSH
79165: LD_INT 4
79167: PPUSH
79168: CALL_OW 12
79172: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
79173: LD_ADDR_VAR 0 4
79177: PUSH
79178: LD_VAR 0 6
79182: PUSH
79183: LD_INT 1
79185: ARRAY
79186: PPUSH
79187: LD_VAR 0 2
79191: PPUSH
79192: CALL_OW 259
79196: ST_TO_ADDR
// if s1 = 1 then
79197: LD_VAR 0 2
79201: PUSH
79202: LD_INT 1
79204: EQUAL
79205: IFFALSE 79225
// s2 := rand ( 2 , 4 ) else
79207: LD_ADDR_VAR 0 3
79211: PUSH
79212: LD_INT 2
79214: PPUSH
79215: LD_INT 4
79217: PPUSH
79218: CALL_OW 12
79222: ST_TO_ADDR
79223: GO 79233
// s2 := 1 ;
79225: LD_ADDR_VAR 0 3
79229: PUSH
79230: LD_INT 1
79232: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
79233: LD_ADDR_VAR 0 5
79237: PUSH
79238: LD_VAR 0 6
79242: PUSH
79243: LD_INT 1
79245: ARRAY
79246: PPUSH
79247: LD_VAR 0 3
79251: PPUSH
79252: CALL_OW 259
79256: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
79257: LD_VAR 0 6
79261: PUSH
79262: LD_INT 1
79264: ARRAY
79265: PPUSH
79266: LD_VAR 0 2
79270: PPUSH
79271: LD_VAR 0 5
79275: PPUSH
79276: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
79280: LD_VAR 0 6
79284: PUSH
79285: LD_INT 1
79287: ARRAY
79288: PPUSH
79289: LD_VAR 0 3
79293: PPUSH
79294: LD_VAR 0 4
79298: PPUSH
79299: CALL_OW 237
// end ;
79303: PPOPN 6
79305: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
79306: LD_EXP 67
79310: PUSH
79311: LD_EXP 114
79315: AND
79316: IFFALSE 79395
79318: GO 79320
79320: DISABLE
79321: LD_INT 0
79323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
79324: LD_ADDR_VAR 0 1
79328: PUSH
79329: LD_INT 22
79331: PUSH
79332: LD_OWVAR 2
79336: PUSH
79337: EMPTY
79338: LIST
79339: LIST
79340: PUSH
79341: LD_INT 30
79343: PUSH
79344: LD_INT 3
79346: PUSH
79347: EMPTY
79348: LIST
79349: LIST
79350: PUSH
79351: EMPTY
79352: LIST
79353: LIST
79354: PPUSH
79355: CALL_OW 69
79359: ST_TO_ADDR
// if not tmp then
79360: LD_VAR 0 1
79364: NOT
79365: IFFALSE 79369
// exit ;
79367: GO 79395
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
79369: LD_VAR 0 1
79373: PUSH
79374: LD_INT 1
79376: PPUSH
79377: LD_VAR 0 1
79381: PPUSH
79382: CALL_OW 12
79386: ARRAY
79387: PPUSH
79388: LD_INT 1
79390: PPUSH
79391: CALL_OW 234
// end ;
79395: PPOPN 1
79397: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
79398: LD_EXP 67
79402: PUSH
79403: LD_EXP 115
79407: AND
79408: IFFALSE 79520
79410: GO 79412
79412: DISABLE
79413: LD_INT 0
79415: PPUSH
79416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
79417: LD_ADDR_VAR 0 2
79421: PUSH
79422: LD_INT 22
79424: PUSH
79425: LD_OWVAR 2
79429: PUSH
79430: EMPTY
79431: LIST
79432: LIST
79433: PUSH
79434: LD_INT 2
79436: PUSH
79437: LD_INT 30
79439: PUSH
79440: LD_INT 27
79442: PUSH
79443: EMPTY
79444: LIST
79445: LIST
79446: PUSH
79447: LD_INT 30
79449: PUSH
79450: LD_INT 26
79452: PUSH
79453: EMPTY
79454: LIST
79455: LIST
79456: PUSH
79457: LD_INT 30
79459: PUSH
79460: LD_INT 28
79462: PUSH
79463: EMPTY
79464: LIST
79465: LIST
79466: PUSH
79467: EMPTY
79468: LIST
79469: LIST
79470: LIST
79471: LIST
79472: PUSH
79473: EMPTY
79474: LIST
79475: LIST
79476: PPUSH
79477: CALL_OW 69
79481: ST_TO_ADDR
// if not tmp then
79482: LD_VAR 0 2
79486: NOT
79487: IFFALSE 79491
// exit ;
79489: GO 79520
// for i in tmp do
79491: LD_ADDR_VAR 0 1
79495: PUSH
79496: LD_VAR 0 2
79500: PUSH
79501: FOR_IN
79502: IFFALSE 79518
// SetLives ( i , 1 ) ;
79504: LD_VAR 0 1
79508: PPUSH
79509: LD_INT 1
79511: PPUSH
79512: CALL_OW 234
79516: GO 79501
79518: POP
79519: POP
// end ;
79520: PPOPN 2
79522: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
79523: LD_EXP 67
79527: PUSH
79528: LD_EXP 116
79532: AND
79533: IFFALSE 79820
79535: GO 79537
79537: DISABLE
79538: LD_INT 0
79540: PPUSH
79541: PPUSH
79542: PPUSH
// begin i := rand ( 1 , 7 ) ;
79543: LD_ADDR_VAR 0 1
79547: PUSH
79548: LD_INT 1
79550: PPUSH
79551: LD_INT 7
79553: PPUSH
79554: CALL_OW 12
79558: ST_TO_ADDR
// case i of 1 :
79559: LD_VAR 0 1
79563: PUSH
79564: LD_INT 1
79566: DOUBLE
79567: EQUAL
79568: IFTRUE 79572
79570: GO 79582
79572: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
79573: LD_STRING earthquake(getX(game), 0, 32)
79575: PPUSH
79576: CALL_OW 559
79580: GO 79820
79582: LD_INT 2
79584: DOUBLE
79585: EQUAL
79586: IFTRUE 79590
79588: GO 79604
79590: POP
// begin ToLua ( displayStucuk(); ) ;
79591: LD_STRING displayStucuk();
79593: PPUSH
79594: CALL_OW 559
// ResetFog ;
79598: CALL_OW 335
// end ; 3 :
79602: GO 79820
79604: LD_INT 3
79606: DOUBLE
79607: EQUAL
79608: IFTRUE 79612
79610: GO 79716
79612: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79613: LD_ADDR_VAR 0 2
79617: PUSH
79618: LD_INT 22
79620: PUSH
79621: LD_OWVAR 2
79625: PUSH
79626: EMPTY
79627: LIST
79628: LIST
79629: PUSH
79630: LD_INT 25
79632: PUSH
79633: LD_INT 1
79635: PUSH
79636: EMPTY
79637: LIST
79638: LIST
79639: PUSH
79640: EMPTY
79641: LIST
79642: LIST
79643: PPUSH
79644: CALL_OW 69
79648: ST_TO_ADDR
// if not tmp then
79649: LD_VAR 0 2
79653: NOT
79654: IFFALSE 79658
// exit ;
79656: GO 79820
// un := tmp [ rand ( 1 , tmp ) ] ;
79658: LD_ADDR_VAR 0 3
79662: PUSH
79663: LD_VAR 0 2
79667: PUSH
79668: LD_INT 1
79670: PPUSH
79671: LD_VAR 0 2
79675: PPUSH
79676: CALL_OW 12
79680: ARRAY
79681: ST_TO_ADDR
// if Crawls ( un ) then
79682: LD_VAR 0 3
79686: PPUSH
79687: CALL_OW 318
79691: IFFALSE 79702
// ComWalk ( un ) ;
79693: LD_VAR 0 3
79697: PPUSH
79698: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79702: LD_VAR 0 3
79706: PPUSH
79707: LD_INT 8
79709: PPUSH
79710: CALL_OW 336
// end ; 4 :
79714: GO 79820
79716: LD_INT 4
79718: DOUBLE
79719: EQUAL
79720: IFTRUE 79724
79722: GO 79798
79724: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79725: LD_ADDR_VAR 0 2
79729: PUSH
79730: LD_INT 22
79732: PUSH
79733: LD_OWVAR 2
79737: PUSH
79738: EMPTY
79739: LIST
79740: LIST
79741: PUSH
79742: LD_INT 30
79744: PUSH
79745: LD_INT 29
79747: PUSH
79748: EMPTY
79749: LIST
79750: LIST
79751: PUSH
79752: EMPTY
79753: LIST
79754: LIST
79755: PPUSH
79756: CALL_OW 69
79760: ST_TO_ADDR
// if not tmp then
79761: LD_VAR 0 2
79765: NOT
79766: IFFALSE 79770
// exit ;
79768: GO 79820
// CenterNowOnUnits ( tmp [ 1 ] ) ;
79770: LD_VAR 0 2
79774: PUSH
79775: LD_INT 1
79777: ARRAY
79778: PPUSH
79779: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
79783: LD_VAR 0 2
79787: PUSH
79788: LD_INT 1
79790: ARRAY
79791: PPUSH
79792: CALL_OW 65
// end ; 5 .. 7 :
79796: GO 79820
79798: LD_INT 5
79800: DOUBLE
79801: GREATEREQUAL
79802: IFFALSE 79810
79804: LD_INT 7
79806: DOUBLE
79807: LESSEQUAL
79808: IFTRUE 79812
79810: GO 79819
79812: POP
// StreamSibBomb ; end ;
79813: CALL 76057 0 0
79817: GO 79820
79819: POP
// end ;
79820: PPOPN 3
79822: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
79823: LD_EXP 67
79827: PUSH
79828: LD_EXP 117
79832: AND
79833: IFFALSE 79989
79835: GO 79837
79837: DISABLE
79838: LD_INT 0
79840: PPUSH
79841: PPUSH
79842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
79843: LD_ADDR_VAR 0 2
79847: PUSH
79848: LD_INT 81
79850: PUSH
79851: LD_OWVAR 2
79855: PUSH
79856: EMPTY
79857: LIST
79858: LIST
79859: PUSH
79860: LD_INT 2
79862: PUSH
79863: LD_INT 21
79865: PUSH
79866: LD_INT 1
79868: PUSH
79869: EMPTY
79870: LIST
79871: LIST
79872: PUSH
79873: LD_INT 21
79875: PUSH
79876: LD_INT 2
79878: PUSH
79879: EMPTY
79880: LIST
79881: LIST
79882: PUSH
79883: EMPTY
79884: LIST
79885: LIST
79886: LIST
79887: PUSH
79888: EMPTY
79889: LIST
79890: LIST
79891: PPUSH
79892: CALL_OW 69
79896: ST_TO_ADDR
// if not tmp then
79897: LD_VAR 0 2
79901: NOT
79902: IFFALSE 79906
// exit ;
79904: GO 79989
// p := 0 ;
79906: LD_ADDR_VAR 0 3
79910: PUSH
79911: LD_INT 0
79913: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79914: LD_INT 35
79916: PPUSH
79917: CALL_OW 67
// p := p + 1 ;
79921: LD_ADDR_VAR 0 3
79925: PUSH
79926: LD_VAR 0 3
79930: PUSH
79931: LD_INT 1
79933: PLUS
79934: ST_TO_ADDR
// for i in tmp do
79935: LD_ADDR_VAR 0 1
79939: PUSH
79940: LD_VAR 0 2
79944: PUSH
79945: FOR_IN
79946: IFFALSE 79977
// if GetLives ( i ) < 1000 then
79948: LD_VAR 0 1
79952: PPUSH
79953: CALL_OW 256
79957: PUSH
79958: LD_INT 1000
79960: LESS
79961: IFFALSE 79975
// SetLives ( i , 1000 ) ;
79963: LD_VAR 0 1
79967: PPUSH
79968: LD_INT 1000
79970: PPUSH
79971: CALL_OW 234
79975: GO 79945
79977: POP
79978: POP
// until p > 20 ;
79979: LD_VAR 0 3
79983: PUSH
79984: LD_INT 20
79986: GREATER
79987: IFFALSE 79914
// end ;
79989: PPOPN 3
79991: END
// every 0 0$1 trigger StreamModeActive and sTime do
79992: LD_EXP 67
79996: PUSH
79997: LD_EXP 118
80001: AND
80002: IFFALSE 80037
80004: GO 80006
80006: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
80007: LD_INT 28
80009: PPUSH
80010: LD_OWVAR 2
80014: PPUSH
80015: LD_INT 2
80017: PPUSH
80018: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
80022: LD_INT 30
80024: PPUSH
80025: LD_OWVAR 2
80029: PPUSH
80030: LD_INT 2
80032: PPUSH
80033: CALL_OW 322
// end ;
80037: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
80038: LD_EXP 67
80042: PUSH
80043: LD_EXP 119
80047: AND
80048: IFFALSE 80169
80050: GO 80052
80052: DISABLE
80053: LD_INT 0
80055: PPUSH
80056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80057: LD_ADDR_VAR 0 2
80061: PUSH
80062: LD_INT 22
80064: PUSH
80065: LD_OWVAR 2
80069: PUSH
80070: EMPTY
80071: LIST
80072: LIST
80073: PUSH
80074: LD_INT 21
80076: PUSH
80077: LD_INT 1
80079: PUSH
80080: EMPTY
80081: LIST
80082: LIST
80083: PUSH
80084: LD_INT 3
80086: PUSH
80087: LD_INT 23
80089: PUSH
80090: LD_INT 0
80092: PUSH
80093: EMPTY
80094: LIST
80095: LIST
80096: PUSH
80097: EMPTY
80098: LIST
80099: LIST
80100: PUSH
80101: EMPTY
80102: LIST
80103: LIST
80104: LIST
80105: PPUSH
80106: CALL_OW 69
80110: ST_TO_ADDR
// if not tmp then
80111: LD_VAR 0 2
80115: NOT
80116: IFFALSE 80120
// exit ;
80118: GO 80169
// for i in tmp do
80120: LD_ADDR_VAR 0 1
80124: PUSH
80125: LD_VAR 0 2
80129: PUSH
80130: FOR_IN
80131: IFFALSE 80167
// begin if Crawls ( i ) then
80133: LD_VAR 0 1
80137: PPUSH
80138: CALL_OW 318
80142: IFFALSE 80153
// ComWalk ( i ) ;
80144: LD_VAR 0 1
80148: PPUSH
80149: CALL_OW 138
// SetClass ( i , 2 ) ;
80153: LD_VAR 0 1
80157: PPUSH
80158: LD_INT 2
80160: PPUSH
80161: CALL_OW 336
// end ;
80165: GO 80130
80167: POP
80168: POP
// end ;
80169: PPOPN 2
80171: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
80172: LD_EXP 67
80176: PUSH
80177: LD_EXP 120
80181: AND
80182: IFFALSE 80470
80184: GO 80186
80186: DISABLE
80187: LD_INT 0
80189: PPUSH
80190: PPUSH
80191: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
80192: LD_OWVAR 2
80196: PPUSH
80197: LD_INT 9
80199: PPUSH
80200: LD_INT 1
80202: PPUSH
80203: LD_INT 1
80205: PPUSH
80206: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
80210: LD_INT 9
80212: PPUSH
80213: LD_OWVAR 2
80217: PPUSH
80218: CALL_OW 343
// uc_side := 9 ;
80222: LD_ADDR_OWVAR 20
80226: PUSH
80227: LD_INT 9
80229: ST_TO_ADDR
// uc_nation := 2 ;
80230: LD_ADDR_OWVAR 21
80234: PUSH
80235: LD_INT 2
80237: ST_TO_ADDR
// hc_name := Dark Warrior ;
80238: LD_ADDR_OWVAR 26
80242: PUSH
80243: LD_STRING Dark Warrior
80245: ST_TO_ADDR
// hc_gallery :=  ;
80246: LD_ADDR_OWVAR 33
80250: PUSH
80251: LD_STRING 
80253: ST_TO_ADDR
// hc_noskilllimit := true ;
80254: LD_ADDR_OWVAR 76
80258: PUSH
80259: LD_INT 1
80261: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
80262: LD_ADDR_OWVAR 31
80266: PUSH
80267: LD_INT 30
80269: PUSH
80270: LD_INT 30
80272: PUSH
80273: LD_INT 30
80275: PUSH
80276: LD_INT 30
80278: PUSH
80279: EMPTY
80280: LIST
80281: LIST
80282: LIST
80283: LIST
80284: ST_TO_ADDR
// un := CreateHuman ;
80285: LD_ADDR_VAR 0 3
80289: PUSH
80290: CALL_OW 44
80294: ST_TO_ADDR
// hc_noskilllimit := false ;
80295: LD_ADDR_OWVAR 76
80299: PUSH
80300: LD_INT 0
80302: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80303: LD_VAR 0 3
80307: PPUSH
80308: LD_INT 1
80310: PPUSH
80311: CALL_OW 51
// ToLua ( playRanger() ) ;
80315: LD_STRING playRanger()
80317: PPUSH
80318: CALL_OW 559
// p := 0 ;
80322: LD_ADDR_VAR 0 2
80326: PUSH
80327: LD_INT 0
80329: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80330: LD_INT 35
80332: PPUSH
80333: CALL_OW 67
// p := p + 1 ;
80337: LD_ADDR_VAR 0 2
80341: PUSH
80342: LD_VAR 0 2
80346: PUSH
80347: LD_INT 1
80349: PLUS
80350: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
80351: LD_VAR 0 3
80355: PPUSH
80356: CALL_OW 256
80360: PUSH
80361: LD_INT 1000
80363: LESS
80364: IFFALSE 80378
// SetLives ( un , 1000 ) ;
80366: LD_VAR 0 3
80370: PPUSH
80371: LD_INT 1000
80373: PPUSH
80374: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
80378: LD_VAR 0 3
80382: PPUSH
80383: LD_INT 81
80385: PUSH
80386: LD_OWVAR 2
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: LD_INT 91
80397: PUSH
80398: LD_VAR 0 3
80402: PUSH
80403: LD_INT 30
80405: PUSH
80406: EMPTY
80407: LIST
80408: LIST
80409: LIST
80410: PUSH
80411: EMPTY
80412: LIST
80413: LIST
80414: PPUSH
80415: CALL_OW 69
80419: PPUSH
80420: LD_VAR 0 3
80424: PPUSH
80425: CALL_OW 74
80429: PPUSH
80430: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
80434: LD_VAR 0 2
80438: PUSH
80439: LD_INT 80
80441: GREATER
80442: PUSH
80443: LD_VAR 0 3
80447: PPUSH
80448: CALL_OW 301
80452: OR
80453: IFFALSE 80330
// if un then
80455: LD_VAR 0 3
80459: IFFALSE 80470
// RemoveUnit ( un ) ;
80461: LD_VAR 0 3
80465: PPUSH
80466: CALL_OW 64
// end ;
80470: PPOPN 3
80472: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
80473: LD_EXP 121
80477: IFFALSE 80593
80479: GO 80481
80481: DISABLE
80482: LD_INT 0
80484: PPUSH
80485: PPUSH
80486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80487: LD_ADDR_VAR 0 2
80491: PUSH
80492: LD_INT 81
80494: PUSH
80495: LD_OWVAR 2
80499: PUSH
80500: EMPTY
80501: LIST
80502: LIST
80503: PUSH
80504: LD_INT 21
80506: PUSH
80507: LD_INT 1
80509: PUSH
80510: EMPTY
80511: LIST
80512: LIST
80513: PUSH
80514: EMPTY
80515: LIST
80516: LIST
80517: PPUSH
80518: CALL_OW 69
80522: ST_TO_ADDR
// ToLua ( playComputer() ) ;
80523: LD_STRING playComputer()
80525: PPUSH
80526: CALL_OW 559
// if not tmp then
80530: LD_VAR 0 2
80534: NOT
80535: IFFALSE 80539
// exit ;
80537: GO 80593
// for i in tmp do
80539: LD_ADDR_VAR 0 1
80543: PUSH
80544: LD_VAR 0 2
80548: PUSH
80549: FOR_IN
80550: IFFALSE 80591
// for j := 1 to 4 do
80552: LD_ADDR_VAR 0 3
80556: PUSH
80557: DOUBLE
80558: LD_INT 1
80560: DEC
80561: ST_TO_ADDR
80562: LD_INT 4
80564: PUSH
80565: FOR_TO
80566: IFFALSE 80587
// SetSkill ( i , j , 10 ) ;
80568: LD_VAR 0 1
80572: PPUSH
80573: LD_VAR 0 3
80577: PPUSH
80578: LD_INT 10
80580: PPUSH
80581: CALL_OW 237
80585: GO 80565
80587: POP
80588: POP
80589: GO 80549
80591: POP
80592: POP
// end ;
80593: PPOPN 3
80595: END
// every 0 0$1 trigger s30 do var i , tmp ;
80596: LD_EXP 122
80600: IFFALSE 80669
80602: GO 80604
80604: DISABLE
80605: LD_INT 0
80607: PPUSH
80608: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80609: LD_ADDR_VAR 0 2
80613: PUSH
80614: LD_INT 22
80616: PUSH
80617: LD_OWVAR 2
80621: PUSH
80622: EMPTY
80623: LIST
80624: LIST
80625: PPUSH
80626: CALL_OW 69
80630: ST_TO_ADDR
// if not tmp then
80631: LD_VAR 0 2
80635: NOT
80636: IFFALSE 80640
// exit ;
80638: GO 80669
// for i in tmp do
80640: LD_ADDR_VAR 0 1
80644: PUSH
80645: LD_VAR 0 2
80649: PUSH
80650: FOR_IN
80651: IFFALSE 80667
// SetLives ( i , 300 ) ;
80653: LD_VAR 0 1
80657: PPUSH
80658: LD_INT 300
80660: PPUSH
80661: CALL_OW 234
80665: GO 80650
80667: POP
80668: POP
// end ;
80669: PPOPN 2
80671: END
// every 0 0$1 trigger s60 do var i , tmp ;
80672: LD_EXP 123
80676: IFFALSE 80745
80678: GO 80680
80680: DISABLE
80681: LD_INT 0
80683: PPUSH
80684: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80685: LD_ADDR_VAR 0 2
80689: PUSH
80690: LD_INT 22
80692: PUSH
80693: LD_OWVAR 2
80697: PUSH
80698: EMPTY
80699: LIST
80700: LIST
80701: PPUSH
80702: CALL_OW 69
80706: ST_TO_ADDR
// if not tmp then
80707: LD_VAR 0 2
80711: NOT
80712: IFFALSE 80716
// exit ;
80714: GO 80745
// for i in tmp do
80716: LD_ADDR_VAR 0 1
80720: PUSH
80721: LD_VAR 0 2
80725: PUSH
80726: FOR_IN
80727: IFFALSE 80743
// SetLives ( i , 600 ) ;
80729: LD_VAR 0 1
80733: PPUSH
80734: LD_INT 600
80736: PPUSH
80737: CALL_OW 234
80741: GO 80726
80743: POP
80744: POP
// end ;
80745: PPOPN 2
80747: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
80748: LD_INT 0
80750: PPUSH
// case cmd of 301 :
80751: LD_VAR 0 1
80755: PUSH
80756: LD_INT 301
80758: DOUBLE
80759: EQUAL
80760: IFTRUE 80764
80762: GO 80796
80764: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
80765: LD_VAR 0 6
80769: PPUSH
80770: LD_VAR 0 7
80774: PPUSH
80775: LD_VAR 0 8
80779: PPUSH
80780: LD_VAR 0 4
80784: PPUSH
80785: LD_VAR 0 5
80789: PPUSH
80790: CALL 81997 0 5
80794: GO 80917
80796: LD_INT 302
80798: DOUBLE
80799: EQUAL
80800: IFTRUE 80804
80802: GO 80841
80804: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
80805: LD_VAR 0 6
80809: PPUSH
80810: LD_VAR 0 7
80814: PPUSH
80815: LD_VAR 0 8
80819: PPUSH
80820: LD_VAR 0 9
80824: PPUSH
80825: LD_VAR 0 4
80829: PPUSH
80830: LD_VAR 0 5
80834: PPUSH
80835: CALL 82088 0 6
80839: GO 80917
80841: LD_INT 303
80843: DOUBLE
80844: EQUAL
80845: IFTRUE 80849
80847: GO 80886
80849: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
80850: LD_VAR 0 6
80854: PPUSH
80855: LD_VAR 0 7
80859: PPUSH
80860: LD_VAR 0 8
80864: PPUSH
80865: LD_VAR 0 9
80869: PPUSH
80870: LD_VAR 0 4
80874: PPUSH
80875: LD_VAR 0 5
80879: PPUSH
80880: CALL 80922 0 6
80884: GO 80917
80886: LD_INT 304
80888: DOUBLE
80889: EQUAL
80890: IFTRUE 80894
80892: GO 80916
80894: POP
// hHackTeleport ( unit , x , y ) ; end ;
80895: LD_VAR 0 2
80899: PPUSH
80900: LD_VAR 0 4
80904: PPUSH
80905: LD_VAR 0 5
80909: PPUSH
80910: CALL 82681 0 3
80914: GO 80917
80916: POP
// end ;
80917: LD_VAR 0 12
80921: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
80922: LD_INT 0
80924: PPUSH
80925: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
80926: LD_VAR 0 1
80930: PUSH
80931: LD_INT 1
80933: LESS
80934: PUSH
80935: LD_VAR 0 1
80939: PUSH
80940: LD_INT 3
80942: GREATER
80943: OR
80944: PUSH
80945: LD_VAR 0 5
80949: PPUSH
80950: LD_VAR 0 6
80954: PPUSH
80955: CALL_OW 428
80959: OR
80960: IFFALSE 80964
// exit ;
80962: GO 81684
// uc_side := your_side ;
80964: LD_ADDR_OWVAR 20
80968: PUSH
80969: LD_OWVAR 2
80973: ST_TO_ADDR
// uc_nation := nation ;
80974: LD_ADDR_OWVAR 21
80978: PUSH
80979: LD_VAR 0 1
80983: ST_TO_ADDR
// bc_level = 1 ;
80984: LD_ADDR_OWVAR 43
80988: PUSH
80989: LD_INT 1
80991: ST_TO_ADDR
// case btype of 1 :
80992: LD_VAR 0 2
80996: PUSH
80997: LD_INT 1
80999: DOUBLE
81000: EQUAL
81001: IFTRUE 81005
81003: GO 81016
81005: POP
// bc_type := b_depot ; 2 :
81006: LD_ADDR_OWVAR 42
81010: PUSH
81011: LD_INT 0
81013: ST_TO_ADDR
81014: GO 81628
81016: LD_INT 2
81018: DOUBLE
81019: EQUAL
81020: IFTRUE 81024
81022: GO 81035
81024: POP
// bc_type := b_warehouse ; 3 :
81025: LD_ADDR_OWVAR 42
81029: PUSH
81030: LD_INT 1
81032: ST_TO_ADDR
81033: GO 81628
81035: LD_INT 3
81037: DOUBLE
81038: EQUAL
81039: IFTRUE 81043
81041: GO 81054
81043: POP
// bc_type := b_lab ; 4 .. 9 :
81044: LD_ADDR_OWVAR 42
81048: PUSH
81049: LD_INT 6
81051: ST_TO_ADDR
81052: GO 81628
81054: LD_INT 4
81056: DOUBLE
81057: GREATEREQUAL
81058: IFFALSE 81066
81060: LD_INT 9
81062: DOUBLE
81063: LESSEQUAL
81064: IFTRUE 81068
81066: GO 81120
81068: POP
// begin bc_type := b_lab_half ;
81069: LD_ADDR_OWVAR 42
81073: PUSH
81074: LD_INT 7
81076: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
81077: LD_ADDR_OWVAR 44
81081: PUSH
81082: LD_INT 10
81084: PUSH
81085: LD_INT 11
81087: PUSH
81088: LD_INT 12
81090: PUSH
81091: LD_INT 15
81093: PUSH
81094: LD_INT 14
81096: PUSH
81097: LD_INT 13
81099: PUSH
81100: EMPTY
81101: LIST
81102: LIST
81103: LIST
81104: LIST
81105: LIST
81106: LIST
81107: PUSH
81108: LD_VAR 0 2
81112: PUSH
81113: LD_INT 3
81115: MINUS
81116: ARRAY
81117: ST_TO_ADDR
// end ; 10 .. 13 :
81118: GO 81628
81120: LD_INT 10
81122: DOUBLE
81123: GREATEREQUAL
81124: IFFALSE 81132
81126: LD_INT 13
81128: DOUBLE
81129: LESSEQUAL
81130: IFTRUE 81134
81132: GO 81211
81134: POP
// begin bc_type := b_lab_full ;
81135: LD_ADDR_OWVAR 42
81139: PUSH
81140: LD_INT 8
81142: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
81143: LD_ADDR_OWVAR 44
81147: PUSH
81148: LD_INT 10
81150: PUSH
81151: LD_INT 12
81153: PUSH
81154: LD_INT 14
81156: PUSH
81157: LD_INT 13
81159: PUSH
81160: EMPTY
81161: LIST
81162: LIST
81163: LIST
81164: LIST
81165: PUSH
81166: LD_VAR 0 2
81170: PUSH
81171: LD_INT 9
81173: MINUS
81174: ARRAY
81175: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
81176: LD_ADDR_OWVAR 45
81180: PUSH
81181: LD_INT 11
81183: PUSH
81184: LD_INT 15
81186: PUSH
81187: LD_INT 12
81189: PUSH
81190: LD_INT 15
81192: PUSH
81193: EMPTY
81194: LIST
81195: LIST
81196: LIST
81197: LIST
81198: PUSH
81199: LD_VAR 0 2
81203: PUSH
81204: LD_INT 9
81206: MINUS
81207: ARRAY
81208: ST_TO_ADDR
// end ; 14 :
81209: GO 81628
81211: LD_INT 14
81213: DOUBLE
81214: EQUAL
81215: IFTRUE 81219
81217: GO 81230
81219: POP
// bc_type := b_workshop ; 15 :
81220: LD_ADDR_OWVAR 42
81224: PUSH
81225: LD_INT 2
81227: ST_TO_ADDR
81228: GO 81628
81230: LD_INT 15
81232: DOUBLE
81233: EQUAL
81234: IFTRUE 81238
81236: GO 81249
81238: POP
// bc_type := b_factory ; 16 :
81239: LD_ADDR_OWVAR 42
81243: PUSH
81244: LD_INT 3
81246: ST_TO_ADDR
81247: GO 81628
81249: LD_INT 16
81251: DOUBLE
81252: EQUAL
81253: IFTRUE 81257
81255: GO 81268
81257: POP
// bc_type := b_ext_gun ; 17 :
81258: LD_ADDR_OWVAR 42
81262: PUSH
81263: LD_INT 17
81265: ST_TO_ADDR
81266: GO 81628
81268: LD_INT 17
81270: DOUBLE
81271: EQUAL
81272: IFTRUE 81276
81274: GO 81304
81276: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
81277: LD_ADDR_OWVAR 42
81281: PUSH
81282: LD_INT 19
81284: PUSH
81285: LD_INT 23
81287: PUSH
81288: LD_INT 19
81290: PUSH
81291: EMPTY
81292: LIST
81293: LIST
81294: LIST
81295: PUSH
81296: LD_VAR 0 1
81300: ARRAY
81301: ST_TO_ADDR
81302: GO 81628
81304: LD_INT 18
81306: DOUBLE
81307: EQUAL
81308: IFTRUE 81312
81310: GO 81323
81312: POP
// bc_type := b_ext_radar ; 19 :
81313: LD_ADDR_OWVAR 42
81317: PUSH
81318: LD_INT 20
81320: ST_TO_ADDR
81321: GO 81628
81323: LD_INT 19
81325: DOUBLE
81326: EQUAL
81327: IFTRUE 81331
81329: GO 81342
81331: POP
// bc_type := b_ext_radio ; 20 :
81332: LD_ADDR_OWVAR 42
81336: PUSH
81337: LD_INT 22
81339: ST_TO_ADDR
81340: GO 81628
81342: LD_INT 20
81344: DOUBLE
81345: EQUAL
81346: IFTRUE 81350
81348: GO 81361
81350: POP
// bc_type := b_ext_siberium ; 21 :
81351: LD_ADDR_OWVAR 42
81355: PUSH
81356: LD_INT 21
81358: ST_TO_ADDR
81359: GO 81628
81361: LD_INT 21
81363: DOUBLE
81364: EQUAL
81365: IFTRUE 81369
81367: GO 81380
81369: POP
// bc_type := b_ext_computer ; 22 :
81370: LD_ADDR_OWVAR 42
81374: PUSH
81375: LD_INT 24
81377: ST_TO_ADDR
81378: GO 81628
81380: LD_INT 22
81382: DOUBLE
81383: EQUAL
81384: IFTRUE 81388
81386: GO 81399
81388: POP
// bc_type := b_ext_track ; 23 :
81389: LD_ADDR_OWVAR 42
81393: PUSH
81394: LD_INT 16
81396: ST_TO_ADDR
81397: GO 81628
81399: LD_INT 23
81401: DOUBLE
81402: EQUAL
81403: IFTRUE 81407
81405: GO 81418
81407: POP
// bc_type := b_ext_laser ; 24 :
81408: LD_ADDR_OWVAR 42
81412: PUSH
81413: LD_INT 25
81415: ST_TO_ADDR
81416: GO 81628
81418: LD_INT 24
81420: DOUBLE
81421: EQUAL
81422: IFTRUE 81426
81424: GO 81437
81426: POP
// bc_type := b_control_tower ; 25 :
81427: LD_ADDR_OWVAR 42
81431: PUSH
81432: LD_INT 36
81434: ST_TO_ADDR
81435: GO 81628
81437: LD_INT 25
81439: DOUBLE
81440: EQUAL
81441: IFTRUE 81445
81443: GO 81456
81445: POP
// bc_type := b_breastwork ; 26 :
81446: LD_ADDR_OWVAR 42
81450: PUSH
81451: LD_INT 31
81453: ST_TO_ADDR
81454: GO 81628
81456: LD_INT 26
81458: DOUBLE
81459: EQUAL
81460: IFTRUE 81464
81462: GO 81475
81464: POP
// bc_type := b_bunker ; 27 :
81465: LD_ADDR_OWVAR 42
81469: PUSH
81470: LD_INT 32
81472: ST_TO_ADDR
81473: GO 81628
81475: LD_INT 27
81477: DOUBLE
81478: EQUAL
81479: IFTRUE 81483
81481: GO 81494
81483: POP
// bc_type := b_turret ; 28 :
81484: LD_ADDR_OWVAR 42
81488: PUSH
81489: LD_INT 33
81491: ST_TO_ADDR
81492: GO 81628
81494: LD_INT 28
81496: DOUBLE
81497: EQUAL
81498: IFTRUE 81502
81500: GO 81513
81502: POP
// bc_type := b_armoury ; 29 :
81503: LD_ADDR_OWVAR 42
81507: PUSH
81508: LD_INT 4
81510: ST_TO_ADDR
81511: GO 81628
81513: LD_INT 29
81515: DOUBLE
81516: EQUAL
81517: IFTRUE 81521
81519: GO 81532
81521: POP
// bc_type := b_barracks ; 30 :
81522: LD_ADDR_OWVAR 42
81526: PUSH
81527: LD_INT 5
81529: ST_TO_ADDR
81530: GO 81628
81532: LD_INT 30
81534: DOUBLE
81535: EQUAL
81536: IFTRUE 81540
81538: GO 81551
81540: POP
// bc_type := b_solar_power ; 31 :
81541: LD_ADDR_OWVAR 42
81545: PUSH
81546: LD_INT 27
81548: ST_TO_ADDR
81549: GO 81628
81551: LD_INT 31
81553: DOUBLE
81554: EQUAL
81555: IFTRUE 81559
81557: GO 81570
81559: POP
// bc_type := b_oil_power ; 32 :
81560: LD_ADDR_OWVAR 42
81564: PUSH
81565: LD_INT 26
81567: ST_TO_ADDR
81568: GO 81628
81570: LD_INT 32
81572: DOUBLE
81573: EQUAL
81574: IFTRUE 81578
81576: GO 81589
81578: POP
// bc_type := b_siberite_power ; 33 :
81579: LD_ADDR_OWVAR 42
81583: PUSH
81584: LD_INT 28
81586: ST_TO_ADDR
81587: GO 81628
81589: LD_INT 33
81591: DOUBLE
81592: EQUAL
81593: IFTRUE 81597
81595: GO 81608
81597: POP
// bc_type := b_oil_mine ; 34 :
81598: LD_ADDR_OWVAR 42
81602: PUSH
81603: LD_INT 29
81605: ST_TO_ADDR
81606: GO 81628
81608: LD_INT 34
81610: DOUBLE
81611: EQUAL
81612: IFTRUE 81616
81614: GO 81627
81616: POP
// bc_type := b_siberite_mine ; end ;
81617: LD_ADDR_OWVAR 42
81621: PUSH
81622: LD_INT 30
81624: ST_TO_ADDR
81625: GO 81628
81627: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
81628: LD_ADDR_VAR 0 8
81632: PUSH
81633: LD_VAR 0 5
81637: PPUSH
81638: LD_VAR 0 6
81642: PPUSH
81643: LD_VAR 0 3
81647: PPUSH
81648: CALL_OW 47
81652: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
81653: LD_OWVAR 42
81657: PUSH
81658: LD_INT 32
81660: PUSH
81661: LD_INT 33
81663: PUSH
81664: EMPTY
81665: LIST
81666: LIST
81667: IN
81668: IFFALSE 81684
// PlaceWeaponTurret ( b , weapon ) ;
81670: LD_VAR 0 8
81674: PPUSH
81675: LD_VAR 0 4
81679: PPUSH
81680: CALL_OW 431
// end ;
81684: LD_VAR 0 7
81688: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
81689: LD_INT 0
81691: PPUSH
81692: PPUSH
81693: PPUSH
81694: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81695: LD_ADDR_VAR 0 4
81699: PUSH
81700: LD_INT 22
81702: PUSH
81703: LD_OWVAR 2
81707: PUSH
81708: EMPTY
81709: LIST
81710: LIST
81711: PUSH
81712: LD_INT 2
81714: PUSH
81715: LD_INT 30
81717: PUSH
81718: LD_INT 0
81720: PUSH
81721: EMPTY
81722: LIST
81723: LIST
81724: PUSH
81725: LD_INT 30
81727: PUSH
81728: LD_INT 1
81730: PUSH
81731: EMPTY
81732: LIST
81733: LIST
81734: PUSH
81735: EMPTY
81736: LIST
81737: LIST
81738: LIST
81739: PUSH
81740: EMPTY
81741: LIST
81742: LIST
81743: PPUSH
81744: CALL_OW 69
81748: ST_TO_ADDR
// if not tmp then
81749: LD_VAR 0 4
81753: NOT
81754: IFFALSE 81758
// exit ;
81756: GO 81817
// for i in tmp do
81758: LD_ADDR_VAR 0 2
81762: PUSH
81763: LD_VAR 0 4
81767: PUSH
81768: FOR_IN
81769: IFFALSE 81815
// for j = 1 to 3 do
81771: LD_ADDR_VAR 0 3
81775: PUSH
81776: DOUBLE
81777: LD_INT 1
81779: DEC
81780: ST_TO_ADDR
81781: LD_INT 3
81783: PUSH
81784: FOR_TO
81785: IFFALSE 81811
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
81787: LD_VAR 0 2
81791: PPUSH
81792: CALL_OW 274
81796: PPUSH
81797: LD_VAR 0 3
81801: PPUSH
81802: LD_INT 99999
81804: PPUSH
81805: CALL_OW 277
81809: GO 81784
81811: POP
81812: POP
81813: GO 81768
81815: POP
81816: POP
// end ;
81817: LD_VAR 0 1
81821: RET
// export function hHackSetLevel10 ; var i , j ; begin
81822: LD_INT 0
81824: PPUSH
81825: PPUSH
81826: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81827: LD_ADDR_VAR 0 2
81831: PUSH
81832: LD_INT 21
81834: PUSH
81835: LD_INT 1
81837: PUSH
81838: EMPTY
81839: LIST
81840: LIST
81841: PPUSH
81842: CALL_OW 69
81846: PUSH
81847: FOR_IN
81848: IFFALSE 81900
// if IsSelected ( i ) then
81850: LD_VAR 0 2
81854: PPUSH
81855: CALL_OW 306
81859: IFFALSE 81898
// begin for j := 1 to 4 do
81861: LD_ADDR_VAR 0 3
81865: PUSH
81866: DOUBLE
81867: LD_INT 1
81869: DEC
81870: ST_TO_ADDR
81871: LD_INT 4
81873: PUSH
81874: FOR_TO
81875: IFFALSE 81896
// SetSkill ( i , j , 10 ) ;
81877: LD_VAR 0 2
81881: PPUSH
81882: LD_VAR 0 3
81886: PPUSH
81887: LD_INT 10
81889: PPUSH
81890: CALL_OW 237
81894: GO 81874
81896: POP
81897: POP
// end ;
81898: GO 81847
81900: POP
81901: POP
// end ;
81902: LD_VAR 0 1
81906: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
81907: LD_INT 0
81909: PPUSH
81910: PPUSH
81911: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
81912: LD_ADDR_VAR 0 2
81916: PUSH
81917: LD_INT 22
81919: PUSH
81920: LD_OWVAR 2
81924: PUSH
81925: EMPTY
81926: LIST
81927: LIST
81928: PUSH
81929: LD_INT 21
81931: PUSH
81932: LD_INT 1
81934: PUSH
81935: EMPTY
81936: LIST
81937: LIST
81938: PUSH
81939: EMPTY
81940: LIST
81941: LIST
81942: PPUSH
81943: CALL_OW 69
81947: PUSH
81948: FOR_IN
81949: IFFALSE 81990
// begin for j := 1 to 4 do
81951: LD_ADDR_VAR 0 3
81955: PUSH
81956: DOUBLE
81957: LD_INT 1
81959: DEC
81960: ST_TO_ADDR
81961: LD_INT 4
81963: PUSH
81964: FOR_TO
81965: IFFALSE 81986
// SetSkill ( i , j , 10 ) ;
81967: LD_VAR 0 2
81971: PPUSH
81972: LD_VAR 0 3
81976: PPUSH
81977: LD_INT 10
81979: PPUSH
81980: CALL_OW 237
81984: GO 81964
81986: POP
81987: POP
// end ;
81988: GO 81948
81990: POP
81991: POP
// end ;
81992: LD_VAR 0 1
81996: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
81997: LD_INT 0
81999: PPUSH
// uc_side := your_side ;
82000: LD_ADDR_OWVAR 20
82004: PUSH
82005: LD_OWVAR 2
82009: ST_TO_ADDR
// uc_nation := nation ;
82010: LD_ADDR_OWVAR 21
82014: PUSH
82015: LD_VAR 0 1
82019: ST_TO_ADDR
// InitHc ;
82020: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
82024: LD_INT 0
82026: PPUSH
82027: LD_VAR 0 2
82031: PPUSH
82032: LD_VAR 0 3
82036: PPUSH
82037: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
82041: LD_VAR 0 4
82045: PPUSH
82046: LD_VAR 0 5
82050: PPUSH
82051: CALL_OW 428
82055: PUSH
82056: LD_INT 0
82058: EQUAL
82059: IFFALSE 82083
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
82061: CALL_OW 44
82065: PPUSH
82066: LD_VAR 0 4
82070: PPUSH
82071: LD_VAR 0 5
82075: PPUSH
82076: LD_INT 1
82078: PPUSH
82079: CALL_OW 48
// end ;
82083: LD_VAR 0 6
82087: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
82088: LD_INT 0
82090: PPUSH
82091: PPUSH
// uc_side := your_side ;
82092: LD_ADDR_OWVAR 20
82096: PUSH
82097: LD_OWVAR 2
82101: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
82102: LD_VAR 0 1
82106: PUSH
82107: LD_INT 1
82109: PUSH
82110: LD_INT 2
82112: PUSH
82113: LD_INT 3
82115: PUSH
82116: LD_INT 4
82118: PUSH
82119: LD_INT 5
82121: PUSH
82122: EMPTY
82123: LIST
82124: LIST
82125: LIST
82126: LIST
82127: LIST
82128: IN
82129: IFFALSE 82141
// uc_nation := nation_american else
82131: LD_ADDR_OWVAR 21
82135: PUSH
82136: LD_INT 1
82138: ST_TO_ADDR
82139: GO 82184
// if chassis in [ 11 , 12 , 13 , 14 ] then
82141: LD_VAR 0 1
82145: PUSH
82146: LD_INT 11
82148: PUSH
82149: LD_INT 12
82151: PUSH
82152: LD_INT 13
82154: PUSH
82155: LD_INT 14
82157: PUSH
82158: EMPTY
82159: LIST
82160: LIST
82161: LIST
82162: LIST
82163: IN
82164: IFFALSE 82176
// uc_nation := nation_arabian else
82166: LD_ADDR_OWVAR 21
82170: PUSH
82171: LD_INT 2
82173: ST_TO_ADDR
82174: GO 82184
// uc_nation := nation_russian ;
82176: LD_ADDR_OWVAR 21
82180: PUSH
82181: LD_INT 3
82183: ST_TO_ADDR
// vc_chassis := chassis ;
82184: LD_ADDR_OWVAR 37
82188: PUSH
82189: LD_VAR 0 1
82193: ST_TO_ADDR
// vc_engine := engine ;
82194: LD_ADDR_OWVAR 39
82198: PUSH
82199: LD_VAR 0 2
82203: ST_TO_ADDR
// vc_control := control ;
82204: LD_ADDR_OWVAR 38
82208: PUSH
82209: LD_VAR 0 3
82213: ST_TO_ADDR
// vc_weapon := weapon ;
82214: LD_ADDR_OWVAR 40
82218: PUSH
82219: LD_VAR 0 4
82223: ST_TO_ADDR
// un := CreateVehicle ;
82224: LD_ADDR_VAR 0 8
82228: PUSH
82229: CALL_OW 45
82233: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
82234: LD_VAR 0 8
82238: PPUSH
82239: LD_INT 0
82241: PPUSH
82242: LD_INT 5
82244: PPUSH
82245: CALL_OW 12
82249: PPUSH
82250: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
82254: LD_VAR 0 8
82258: PPUSH
82259: LD_VAR 0 5
82263: PPUSH
82264: LD_VAR 0 6
82268: PPUSH
82269: LD_INT 1
82271: PPUSH
82272: CALL_OW 48
// end ;
82276: LD_VAR 0 7
82280: RET
// export hInvincible ; every 1 do
82281: GO 82283
82283: DISABLE
// hInvincible := [ ] ;
82284: LD_ADDR_EXP 124
82288: PUSH
82289: EMPTY
82290: ST_TO_ADDR
82291: END
// every 10 do var i ;
82292: GO 82294
82294: DISABLE
82295: LD_INT 0
82297: PPUSH
// begin enable ;
82298: ENABLE
// if not hInvincible then
82299: LD_EXP 124
82303: NOT
82304: IFFALSE 82308
// exit ;
82306: GO 82352
// for i in hInvincible do
82308: LD_ADDR_VAR 0 1
82312: PUSH
82313: LD_EXP 124
82317: PUSH
82318: FOR_IN
82319: IFFALSE 82350
// if GetLives ( i ) < 1000 then
82321: LD_VAR 0 1
82325: PPUSH
82326: CALL_OW 256
82330: PUSH
82331: LD_INT 1000
82333: LESS
82334: IFFALSE 82348
// SetLives ( i , 1000 ) ;
82336: LD_VAR 0 1
82340: PPUSH
82341: LD_INT 1000
82343: PPUSH
82344: CALL_OW 234
82348: GO 82318
82350: POP
82351: POP
// end ;
82352: PPOPN 1
82354: END
// export function hHackInvincible ; var i ; begin
82355: LD_INT 0
82357: PPUSH
82358: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
82359: LD_ADDR_VAR 0 2
82363: PUSH
82364: LD_INT 2
82366: PUSH
82367: LD_INT 21
82369: PUSH
82370: LD_INT 1
82372: PUSH
82373: EMPTY
82374: LIST
82375: LIST
82376: PUSH
82377: LD_INT 21
82379: PUSH
82380: LD_INT 2
82382: PUSH
82383: EMPTY
82384: LIST
82385: LIST
82386: PUSH
82387: EMPTY
82388: LIST
82389: LIST
82390: LIST
82391: PPUSH
82392: CALL_OW 69
82396: PUSH
82397: FOR_IN
82398: IFFALSE 82459
// if IsSelected ( i ) then
82400: LD_VAR 0 2
82404: PPUSH
82405: CALL_OW 306
82409: IFFALSE 82457
// begin if i in hInvincible then
82411: LD_VAR 0 2
82415: PUSH
82416: LD_EXP 124
82420: IN
82421: IFFALSE 82441
// hInvincible := hInvincible diff i else
82423: LD_ADDR_EXP 124
82427: PUSH
82428: LD_EXP 124
82432: PUSH
82433: LD_VAR 0 2
82437: DIFF
82438: ST_TO_ADDR
82439: GO 82457
// hInvincible := hInvincible union i ;
82441: LD_ADDR_EXP 124
82445: PUSH
82446: LD_EXP 124
82450: PUSH
82451: LD_VAR 0 2
82455: UNION
82456: ST_TO_ADDR
// end ;
82457: GO 82397
82459: POP
82460: POP
// end ;
82461: LD_VAR 0 1
82465: RET
// export function hHackInvisible ; var i , j ; begin
82466: LD_INT 0
82468: PPUSH
82469: PPUSH
82470: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82471: LD_ADDR_VAR 0 2
82475: PUSH
82476: LD_INT 21
82478: PUSH
82479: LD_INT 1
82481: PUSH
82482: EMPTY
82483: LIST
82484: LIST
82485: PPUSH
82486: CALL_OW 69
82490: PUSH
82491: FOR_IN
82492: IFFALSE 82516
// if IsSelected ( i ) then
82494: LD_VAR 0 2
82498: PPUSH
82499: CALL_OW 306
82503: IFFALSE 82514
// ComForceInvisible ( i ) ;
82505: LD_VAR 0 2
82509: PPUSH
82510: CALL_OW 496
82514: GO 82491
82516: POP
82517: POP
// end ;
82518: LD_VAR 0 1
82522: RET
// export function hHackChangeYourSide ; begin
82523: LD_INT 0
82525: PPUSH
// if your_side = 8 then
82526: LD_OWVAR 2
82530: PUSH
82531: LD_INT 8
82533: EQUAL
82534: IFFALSE 82546
// your_side := 0 else
82536: LD_ADDR_OWVAR 2
82540: PUSH
82541: LD_INT 0
82543: ST_TO_ADDR
82544: GO 82560
// your_side := your_side + 1 ;
82546: LD_ADDR_OWVAR 2
82550: PUSH
82551: LD_OWVAR 2
82555: PUSH
82556: LD_INT 1
82558: PLUS
82559: ST_TO_ADDR
// end ;
82560: LD_VAR 0 1
82564: RET
// export function hHackChangeUnitSide ; var i , j ; begin
82565: LD_INT 0
82567: PPUSH
82568: PPUSH
82569: PPUSH
// for i in all_units do
82570: LD_ADDR_VAR 0 2
82574: PUSH
82575: LD_OWVAR 3
82579: PUSH
82580: FOR_IN
82581: IFFALSE 82659
// if IsSelected ( i ) then
82583: LD_VAR 0 2
82587: PPUSH
82588: CALL_OW 306
82592: IFFALSE 82657
// begin j := GetSide ( i ) ;
82594: LD_ADDR_VAR 0 3
82598: PUSH
82599: LD_VAR 0 2
82603: PPUSH
82604: CALL_OW 255
82608: ST_TO_ADDR
// if j = 8 then
82609: LD_VAR 0 3
82613: PUSH
82614: LD_INT 8
82616: EQUAL
82617: IFFALSE 82629
// j := 0 else
82619: LD_ADDR_VAR 0 3
82623: PUSH
82624: LD_INT 0
82626: ST_TO_ADDR
82627: GO 82643
// j := j + 1 ;
82629: LD_ADDR_VAR 0 3
82633: PUSH
82634: LD_VAR 0 3
82638: PUSH
82639: LD_INT 1
82641: PLUS
82642: ST_TO_ADDR
// SetSide ( i , j ) ;
82643: LD_VAR 0 2
82647: PPUSH
82648: LD_VAR 0 3
82652: PPUSH
82653: CALL_OW 235
// end ;
82657: GO 82580
82659: POP
82660: POP
// end ;
82661: LD_VAR 0 1
82665: RET
// export function hHackFog ; begin
82666: LD_INT 0
82668: PPUSH
// FogOff ( true ) ;
82669: LD_INT 1
82671: PPUSH
82672: CALL_OW 344
// end ;
82676: LD_VAR 0 1
82680: RET
// export function hHackTeleport ( unit , x , y ) ; begin
82681: LD_INT 0
82683: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
82684: LD_VAR 0 1
82688: PPUSH
82689: LD_VAR 0 2
82693: PPUSH
82694: LD_VAR 0 3
82698: PPUSH
82699: LD_INT 1
82701: PPUSH
82702: LD_INT 1
82704: PPUSH
82705: CALL_OW 483
// CenterOnXY ( x , y ) ;
82709: LD_VAR 0 2
82713: PPUSH
82714: LD_VAR 0 3
82718: PPUSH
82719: CALL_OW 84
// end ;
82723: LD_VAR 0 4
82727: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
82728: LD_INT 0
82730: PPUSH
82731: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
82732: LD_VAR 0 1
82736: NOT
82737: PUSH
82738: LD_VAR 0 2
82742: PPUSH
82743: LD_VAR 0 3
82747: PPUSH
82748: CALL_OW 488
82752: NOT
82753: OR
82754: PUSH
82755: LD_VAR 0 1
82759: PPUSH
82760: CALL_OW 266
82764: PUSH
82765: LD_INT 3
82767: NONEQUAL
82768: PUSH
82769: LD_VAR 0 1
82773: PPUSH
82774: CALL_OW 247
82778: PUSH
82779: LD_INT 1
82781: EQUAL
82782: NOT
82783: AND
82784: OR
82785: IFFALSE 82789
// exit ;
82787: GO 82938
// if GetType ( factory ) = unit_human then
82789: LD_VAR 0 1
82793: PPUSH
82794: CALL_OW 247
82798: PUSH
82799: LD_INT 1
82801: EQUAL
82802: IFFALSE 82819
// factory := IsInUnit ( factory ) ;
82804: LD_ADDR_VAR 0 1
82808: PUSH
82809: LD_VAR 0 1
82813: PPUSH
82814: CALL_OW 310
82818: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
82819: LD_VAR 0 1
82823: PPUSH
82824: CALL_OW 266
82828: PUSH
82829: LD_INT 3
82831: NONEQUAL
82832: IFFALSE 82836
// exit ;
82834: GO 82938
// if HexInfo ( x , y ) = factory then
82836: LD_VAR 0 2
82840: PPUSH
82841: LD_VAR 0 3
82845: PPUSH
82846: CALL_OW 428
82850: PUSH
82851: LD_VAR 0 1
82855: EQUAL
82856: IFFALSE 82883
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
82858: LD_ADDR_EXP 125
82862: PUSH
82863: LD_EXP 125
82867: PPUSH
82868: LD_VAR 0 1
82872: PPUSH
82873: LD_INT 0
82875: PPUSH
82876: CALL_OW 1
82880: ST_TO_ADDR
82881: GO 82934
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
82883: LD_ADDR_EXP 125
82887: PUSH
82888: LD_EXP 125
82892: PPUSH
82893: LD_VAR 0 1
82897: PPUSH
82898: LD_VAR 0 1
82902: PPUSH
82903: CALL_OW 255
82907: PUSH
82908: LD_VAR 0 1
82912: PUSH
82913: LD_VAR 0 2
82917: PUSH
82918: LD_VAR 0 3
82922: PUSH
82923: EMPTY
82924: LIST
82925: LIST
82926: LIST
82927: LIST
82928: PPUSH
82929: CALL_OW 1
82933: ST_TO_ADDR
// UpdateFactoryWaypoints ;
82934: CALL 82943 0 0
// end ;
82938: LD_VAR 0 4
82942: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
82943: LD_INT 0
82945: PPUSH
82946: PPUSH
82947: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
82948: LD_STRING resetFactoryWaypoint();
82950: PPUSH
82951: CALL_OW 559
// if factoryWaypoints then
82955: LD_EXP 125
82959: IFFALSE 83085
// begin list := PrepareArray ( factoryWaypoints ) ;
82961: LD_ADDR_VAR 0 3
82965: PUSH
82966: LD_EXP 125
82970: PPUSH
82971: CALL 68195 0 1
82975: ST_TO_ADDR
// for i := 1 to list do
82976: LD_ADDR_VAR 0 2
82980: PUSH
82981: DOUBLE
82982: LD_INT 1
82984: DEC
82985: ST_TO_ADDR
82986: LD_VAR 0 3
82990: PUSH
82991: FOR_TO
82992: IFFALSE 83083
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82994: LD_STRING setFactoryWaypointXY(
82996: PUSH
82997: LD_VAR 0 3
83001: PUSH
83002: LD_VAR 0 2
83006: ARRAY
83007: PUSH
83008: LD_INT 1
83010: ARRAY
83011: STR
83012: PUSH
83013: LD_STRING ,
83015: STR
83016: PUSH
83017: LD_VAR 0 3
83021: PUSH
83022: LD_VAR 0 2
83026: ARRAY
83027: PUSH
83028: LD_INT 2
83030: ARRAY
83031: STR
83032: PUSH
83033: LD_STRING ,
83035: STR
83036: PUSH
83037: LD_VAR 0 3
83041: PUSH
83042: LD_VAR 0 2
83046: ARRAY
83047: PUSH
83048: LD_INT 3
83050: ARRAY
83051: STR
83052: PUSH
83053: LD_STRING ,
83055: STR
83056: PUSH
83057: LD_VAR 0 3
83061: PUSH
83062: LD_VAR 0 2
83066: ARRAY
83067: PUSH
83068: LD_INT 4
83070: ARRAY
83071: STR
83072: PUSH
83073: LD_STRING )
83075: STR
83076: PPUSH
83077: CALL_OW 559
83081: GO 82991
83083: POP
83084: POP
// end ; end ;
83085: LD_VAR 0 1
83089: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
83090: LD_INT 0
83092: PPUSH
// if HexInfo ( x , y ) = warehouse then
83093: LD_VAR 0 2
83097: PPUSH
83098: LD_VAR 0 3
83102: PPUSH
83103: CALL_OW 428
83107: PUSH
83108: LD_VAR 0 1
83112: EQUAL
83113: IFFALSE 83140
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
83115: LD_ADDR_EXP 126
83119: PUSH
83120: LD_EXP 126
83124: PPUSH
83125: LD_VAR 0 1
83129: PPUSH
83130: LD_INT 0
83132: PPUSH
83133: CALL_OW 1
83137: ST_TO_ADDR
83138: GO 83191
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
83140: LD_ADDR_EXP 126
83144: PUSH
83145: LD_EXP 126
83149: PPUSH
83150: LD_VAR 0 1
83154: PPUSH
83155: LD_VAR 0 1
83159: PPUSH
83160: CALL_OW 255
83164: PUSH
83165: LD_VAR 0 1
83169: PUSH
83170: LD_VAR 0 2
83174: PUSH
83175: LD_VAR 0 3
83179: PUSH
83180: EMPTY
83181: LIST
83182: LIST
83183: LIST
83184: LIST
83185: PPUSH
83186: CALL_OW 1
83190: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
83191: CALL 83200 0 0
// end ;
83195: LD_VAR 0 4
83199: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
83200: LD_INT 0
83202: PPUSH
83203: PPUSH
83204: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
83205: LD_STRING resetWarehouseGatheringPoints();
83207: PPUSH
83208: CALL_OW 559
// if warehouseGatheringPoints then
83212: LD_EXP 126
83216: IFFALSE 83342
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
83218: LD_ADDR_VAR 0 3
83222: PUSH
83223: LD_EXP 126
83227: PPUSH
83228: CALL 68195 0 1
83232: ST_TO_ADDR
// for i := 1 to list do
83233: LD_ADDR_VAR 0 2
83237: PUSH
83238: DOUBLE
83239: LD_INT 1
83241: DEC
83242: ST_TO_ADDR
83243: LD_VAR 0 3
83247: PUSH
83248: FOR_TO
83249: IFFALSE 83340
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
83251: LD_STRING setWarehouseGatheringPointXY(
83253: PUSH
83254: LD_VAR 0 3
83258: PUSH
83259: LD_VAR 0 2
83263: ARRAY
83264: PUSH
83265: LD_INT 1
83267: ARRAY
83268: STR
83269: PUSH
83270: LD_STRING ,
83272: STR
83273: PUSH
83274: LD_VAR 0 3
83278: PUSH
83279: LD_VAR 0 2
83283: ARRAY
83284: PUSH
83285: LD_INT 2
83287: ARRAY
83288: STR
83289: PUSH
83290: LD_STRING ,
83292: STR
83293: PUSH
83294: LD_VAR 0 3
83298: PUSH
83299: LD_VAR 0 2
83303: ARRAY
83304: PUSH
83305: LD_INT 3
83307: ARRAY
83308: STR
83309: PUSH
83310: LD_STRING ,
83312: STR
83313: PUSH
83314: LD_VAR 0 3
83318: PUSH
83319: LD_VAR 0 2
83323: ARRAY
83324: PUSH
83325: LD_INT 4
83327: ARRAY
83328: STR
83329: PUSH
83330: LD_STRING )
83332: STR
83333: PPUSH
83334: CALL_OW 559
83338: GO 83248
83340: POP
83341: POP
// end ; end ;
83342: LD_VAR 0 1
83346: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
83347: LD_EXP 126
83351: IFFALSE 84036
83353: GO 83355
83355: DISABLE
83356: LD_INT 0
83358: PPUSH
83359: PPUSH
83360: PPUSH
83361: PPUSH
83362: PPUSH
83363: PPUSH
83364: PPUSH
83365: PPUSH
83366: PPUSH
// begin enable ;
83367: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
83368: LD_ADDR_VAR 0 3
83372: PUSH
83373: LD_EXP 126
83377: PPUSH
83378: CALL 68195 0 1
83382: ST_TO_ADDR
// if not list then
83383: LD_VAR 0 3
83387: NOT
83388: IFFALSE 83392
// exit ;
83390: GO 84036
// for i := 1 to list do
83392: LD_ADDR_VAR 0 1
83396: PUSH
83397: DOUBLE
83398: LD_INT 1
83400: DEC
83401: ST_TO_ADDR
83402: LD_VAR 0 3
83406: PUSH
83407: FOR_TO
83408: IFFALSE 84034
// begin depot := list [ i ] [ 2 ] ;
83410: LD_ADDR_VAR 0 8
83414: PUSH
83415: LD_VAR 0 3
83419: PUSH
83420: LD_VAR 0 1
83424: ARRAY
83425: PUSH
83426: LD_INT 2
83428: ARRAY
83429: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
83430: LD_ADDR_VAR 0 5
83434: PUSH
83435: LD_VAR 0 3
83439: PUSH
83440: LD_VAR 0 1
83444: ARRAY
83445: PUSH
83446: LD_INT 1
83448: ARRAY
83449: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
83450: LD_VAR 0 8
83454: PPUSH
83455: CALL_OW 301
83459: PUSH
83460: LD_VAR 0 5
83464: PUSH
83465: LD_VAR 0 8
83469: PPUSH
83470: CALL_OW 255
83474: NONEQUAL
83475: OR
83476: IFFALSE 83505
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
83478: LD_ADDR_EXP 126
83482: PUSH
83483: LD_EXP 126
83487: PPUSH
83488: LD_VAR 0 8
83492: PPUSH
83493: LD_INT 0
83495: PPUSH
83496: CALL_OW 1
83500: ST_TO_ADDR
// exit ;
83501: POP
83502: POP
83503: GO 84036
// end ; x := list [ i ] [ 3 ] ;
83505: LD_ADDR_VAR 0 6
83509: PUSH
83510: LD_VAR 0 3
83514: PUSH
83515: LD_VAR 0 1
83519: ARRAY
83520: PUSH
83521: LD_INT 3
83523: ARRAY
83524: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
83525: LD_ADDR_VAR 0 7
83529: PUSH
83530: LD_VAR 0 3
83534: PUSH
83535: LD_VAR 0 1
83539: ARRAY
83540: PUSH
83541: LD_INT 4
83543: ARRAY
83544: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
83545: LD_ADDR_VAR 0 9
83549: PUSH
83550: LD_VAR 0 6
83554: PPUSH
83555: LD_VAR 0 7
83559: PPUSH
83560: LD_INT 16
83562: PPUSH
83563: CALL 66783 0 3
83567: ST_TO_ADDR
// if not cratesNearbyPoint then
83568: LD_VAR 0 9
83572: NOT
83573: IFFALSE 83579
// exit ;
83575: POP
83576: POP
83577: GO 84036
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
83579: LD_ADDR_VAR 0 4
83583: PUSH
83584: LD_INT 22
83586: PUSH
83587: LD_VAR 0 5
83591: PUSH
83592: EMPTY
83593: LIST
83594: LIST
83595: PUSH
83596: LD_INT 3
83598: PUSH
83599: LD_INT 60
83601: PUSH
83602: EMPTY
83603: LIST
83604: PUSH
83605: EMPTY
83606: LIST
83607: LIST
83608: PUSH
83609: LD_INT 91
83611: PUSH
83612: LD_VAR 0 8
83616: PUSH
83617: LD_INT 6
83619: PUSH
83620: EMPTY
83621: LIST
83622: LIST
83623: LIST
83624: PUSH
83625: LD_INT 2
83627: PUSH
83628: LD_INT 25
83630: PUSH
83631: LD_INT 2
83633: PUSH
83634: EMPTY
83635: LIST
83636: LIST
83637: PUSH
83638: LD_INT 25
83640: PUSH
83641: LD_INT 16
83643: PUSH
83644: EMPTY
83645: LIST
83646: LIST
83647: PUSH
83648: EMPTY
83649: LIST
83650: LIST
83651: LIST
83652: PUSH
83653: EMPTY
83654: LIST
83655: LIST
83656: LIST
83657: LIST
83658: PPUSH
83659: CALL_OW 69
83663: PUSH
83664: LD_VAR 0 8
83668: PPUSH
83669: CALL_OW 313
83673: PPUSH
83674: LD_INT 3
83676: PUSH
83677: LD_INT 60
83679: PUSH
83680: EMPTY
83681: LIST
83682: PUSH
83683: EMPTY
83684: LIST
83685: LIST
83686: PUSH
83687: LD_INT 2
83689: PUSH
83690: LD_INT 25
83692: PUSH
83693: LD_INT 2
83695: PUSH
83696: EMPTY
83697: LIST
83698: LIST
83699: PUSH
83700: LD_INT 25
83702: PUSH
83703: LD_INT 16
83705: PUSH
83706: EMPTY
83707: LIST
83708: LIST
83709: PUSH
83710: EMPTY
83711: LIST
83712: LIST
83713: LIST
83714: PUSH
83715: EMPTY
83716: LIST
83717: LIST
83718: PPUSH
83719: CALL_OW 72
83723: UNION
83724: ST_TO_ADDR
// if tmp then
83725: LD_VAR 0 4
83729: IFFALSE 83809
// begin tmp := ShrinkArray ( tmp , 3 ) ;
83731: LD_ADDR_VAR 0 4
83735: PUSH
83736: LD_VAR 0 4
83740: PPUSH
83741: LD_INT 3
83743: PPUSH
83744: CALL 64752 0 2
83748: ST_TO_ADDR
// for j in tmp do
83749: LD_ADDR_VAR 0 2
83753: PUSH
83754: LD_VAR 0 4
83758: PUSH
83759: FOR_IN
83760: IFFALSE 83803
// begin if IsInUnit ( j ) then
83762: LD_VAR 0 2
83766: PPUSH
83767: CALL_OW 310
83771: IFFALSE 83782
// ComExit ( j ) ;
83773: LD_VAR 0 2
83777: PPUSH
83778: CALL 64835 0 1
// AddComCollect ( j , x , y ) ;
83782: LD_VAR 0 2
83786: PPUSH
83787: LD_VAR 0 6
83791: PPUSH
83792: LD_VAR 0 7
83796: PPUSH
83797: CALL_OW 177
// end ;
83801: GO 83759
83803: POP
83804: POP
// exit ;
83805: POP
83806: POP
83807: GO 84036
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
83809: LD_ADDR_VAR 0 4
83813: PUSH
83814: LD_INT 22
83816: PUSH
83817: LD_VAR 0 5
83821: PUSH
83822: EMPTY
83823: LIST
83824: LIST
83825: PUSH
83826: LD_INT 91
83828: PUSH
83829: LD_VAR 0 8
83833: PUSH
83834: LD_INT 8
83836: PUSH
83837: EMPTY
83838: LIST
83839: LIST
83840: LIST
83841: PUSH
83842: LD_INT 2
83844: PUSH
83845: LD_INT 34
83847: PUSH
83848: LD_INT 12
83850: PUSH
83851: EMPTY
83852: LIST
83853: LIST
83854: PUSH
83855: LD_INT 34
83857: PUSH
83858: LD_INT 51
83860: PUSH
83861: EMPTY
83862: LIST
83863: LIST
83864: PUSH
83865: LD_INT 34
83867: PUSH
83868: LD_INT 32
83870: PUSH
83871: EMPTY
83872: LIST
83873: LIST
83874: PUSH
83875: LD_INT 34
83877: PUSH
83878: LD_INT 89
83880: PUSH
83881: EMPTY
83882: LIST
83883: LIST
83884: PUSH
83885: EMPTY
83886: LIST
83887: LIST
83888: LIST
83889: LIST
83890: LIST
83891: PUSH
83892: EMPTY
83893: LIST
83894: LIST
83895: LIST
83896: PPUSH
83897: CALL_OW 69
83901: ST_TO_ADDR
// if tmp then
83902: LD_VAR 0 4
83906: IFFALSE 84032
// begin for j in tmp do
83908: LD_ADDR_VAR 0 2
83912: PUSH
83913: LD_VAR 0 4
83917: PUSH
83918: FOR_IN
83919: IFFALSE 84030
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
83921: LD_VAR 0 2
83925: PPUSH
83926: CALL_OW 262
83930: PUSH
83931: LD_INT 3
83933: EQUAL
83934: PUSH
83935: LD_VAR 0 2
83939: PPUSH
83940: CALL_OW 261
83944: PUSH
83945: LD_INT 20
83947: GREATER
83948: OR
83949: PUSH
83950: LD_VAR 0 2
83954: PPUSH
83955: CALL_OW 314
83959: NOT
83960: AND
83961: PUSH
83962: LD_VAR 0 2
83966: PPUSH
83967: CALL_OW 263
83971: PUSH
83972: LD_INT 1
83974: NONEQUAL
83975: PUSH
83976: LD_VAR 0 2
83980: PPUSH
83981: CALL_OW 311
83985: OR
83986: AND
83987: IFFALSE 84028
// begin ComCollect ( j , x , y ) ;
83989: LD_VAR 0 2
83993: PPUSH
83994: LD_VAR 0 6
83998: PPUSH
83999: LD_VAR 0 7
84003: PPUSH
84004: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
84008: LD_VAR 0 2
84012: PPUSH
84013: LD_VAR 0 8
84017: PPUSH
84018: CALL_OW 172
// exit ;
84022: POP
84023: POP
84024: POP
84025: POP
84026: GO 84036
// end ;
84028: GO 83918
84030: POP
84031: POP
// end ; end ;
84032: GO 83407
84034: POP
84035: POP
// end ; end_of_file
84036: PPOPN 9
84038: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84039: LD_VAR 0 1
84043: PUSH
84044: LD_INT 200
84046: DOUBLE
84047: GREATEREQUAL
84048: IFFALSE 84056
84050: LD_INT 299
84052: DOUBLE
84053: LESSEQUAL
84054: IFTRUE 84058
84056: GO 84090
84058: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84059: LD_VAR 0 1
84063: PPUSH
84064: LD_VAR 0 2
84068: PPUSH
84069: LD_VAR 0 3
84073: PPUSH
84074: LD_VAR 0 4
84078: PPUSH
84079: LD_VAR 0 5
84083: PPUSH
84084: CALL 84578 0 5
84088: GO 84167
84090: LD_INT 300
84092: DOUBLE
84093: GREATEREQUAL
84094: IFFALSE 84102
84096: LD_INT 399
84098: DOUBLE
84099: LESSEQUAL
84100: IFTRUE 84104
84102: GO 84166
84104: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84105: LD_VAR 0 1
84109: PPUSH
84110: LD_VAR 0 2
84114: PPUSH
84115: LD_VAR 0 3
84119: PPUSH
84120: LD_VAR 0 4
84124: PPUSH
84125: LD_VAR 0 5
84129: PPUSH
84130: LD_VAR 0 6
84134: PPUSH
84135: LD_VAR 0 7
84139: PPUSH
84140: LD_VAR 0 8
84144: PPUSH
84145: LD_VAR 0 9
84149: PPUSH
84150: LD_VAR 0 10
84154: PPUSH
84155: LD_VAR 0 11
84159: PPUSH
84160: CALL 80748 0 11
84164: GO 84167
84166: POP
// end ;
84167: PPOPN 11
84169: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84170: LD_VAR 0 1
84174: PPUSH
84175: LD_VAR 0 2
84179: PPUSH
84180: LD_VAR 0 3
84184: PPUSH
84185: LD_VAR 0 4
84189: PPUSH
84190: LD_VAR 0 5
84194: PPUSH
84195: CALL 84314 0 5
// end ; end_of_file
84199: PPOPN 5
84201: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
84202: LD_INT 0
84204: PPUSH
84205: PPUSH
84206: PPUSH
84207: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
84208: LD_VAR 0 1
84212: PPUSH
84213: CALL_OW 264
84217: PUSH
84218: LD_INT 91
84220: EQUAL
84221: IFFALSE 84293
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
84223: LD_INT 68
84225: PPUSH
84226: LD_VAR 0 1
84230: PPUSH
84231: CALL_OW 255
84235: PPUSH
84236: CALL_OW 321
84240: PUSH
84241: LD_INT 2
84243: EQUAL
84244: IFFALSE 84256
// eff := 70 else
84246: LD_ADDR_VAR 0 4
84250: PUSH
84251: LD_INT 70
84253: ST_TO_ADDR
84254: GO 84264
// eff := 30 ;
84256: LD_ADDR_VAR 0 4
84260: PUSH
84261: LD_INT 30
84263: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
84264: LD_VAR 0 1
84268: PPUSH
84269: CALL_OW 250
84273: PPUSH
84274: LD_VAR 0 1
84278: PPUSH
84279: CALL_OW 251
84283: PPUSH
84284: LD_VAR 0 4
84288: PPUSH
84289: CALL_OW 495
// end ; end ;
84293: LD_VAR 0 2
84297: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
84298: LD_INT 0
84300: PPUSH
// end ;
84301: LD_VAR 0 4
84305: RET
// export function SOS_Command ( cmd ) ; begin
84306: LD_INT 0
84308: PPUSH
// end ;
84309: LD_VAR 0 2
84313: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
84314: LD_INT 0
84316: PPUSH
// end ;
84317: LD_VAR 0 6
84321: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
84322: LD_INT 0
84324: PPUSH
84325: PPUSH
// if not vehicle or not factory then
84326: LD_VAR 0 1
84330: NOT
84331: PUSH
84332: LD_VAR 0 2
84336: NOT
84337: OR
84338: IFFALSE 84342
// exit ;
84340: GO 84573
// if factoryWaypoints >= factory then
84342: LD_EXP 125
84346: PUSH
84347: LD_VAR 0 2
84351: GREATEREQUAL
84352: IFFALSE 84573
// if factoryWaypoints [ factory ] then
84354: LD_EXP 125
84358: PUSH
84359: LD_VAR 0 2
84363: ARRAY
84364: IFFALSE 84573
// begin if GetControl ( vehicle ) = control_manual then
84366: LD_VAR 0 1
84370: PPUSH
84371: CALL_OW 263
84375: PUSH
84376: LD_INT 1
84378: EQUAL
84379: IFFALSE 84460
// begin driver := IsDrivenBy ( vehicle ) ;
84381: LD_ADDR_VAR 0 4
84385: PUSH
84386: LD_VAR 0 1
84390: PPUSH
84391: CALL_OW 311
84395: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84396: LD_VAR 0 4
84400: PPUSH
84401: LD_EXP 125
84405: PUSH
84406: LD_VAR 0 2
84410: ARRAY
84411: PUSH
84412: LD_INT 3
84414: ARRAY
84415: PPUSH
84416: LD_EXP 125
84420: PUSH
84421: LD_VAR 0 2
84425: ARRAY
84426: PUSH
84427: LD_INT 4
84429: ARRAY
84430: PPUSH
84431: CALL_OW 171
// AddComExitVehicle ( driver ) ;
84435: LD_VAR 0 4
84439: PPUSH
84440: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
84444: LD_VAR 0 4
84448: PPUSH
84449: LD_VAR 0 2
84453: PPUSH
84454: CALL_OW 180
// end else
84458: GO 84573
// if GetControl ( vehicle ) = control_remote then
84460: LD_VAR 0 1
84464: PPUSH
84465: CALL_OW 263
84469: PUSH
84470: LD_INT 2
84472: EQUAL
84473: IFFALSE 84534
// begin wait ( 0 0$2 ) ;
84475: LD_INT 70
84477: PPUSH
84478: CALL_OW 67
// if Connect ( vehicle ) then
84482: LD_VAR 0 1
84486: PPUSH
84487: CALL 35094 0 1
84491: IFFALSE 84532
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84493: LD_VAR 0 1
84497: PPUSH
84498: LD_EXP 125
84502: PUSH
84503: LD_VAR 0 2
84507: ARRAY
84508: PUSH
84509: LD_INT 3
84511: ARRAY
84512: PPUSH
84513: LD_EXP 125
84517: PUSH
84518: LD_VAR 0 2
84522: ARRAY
84523: PUSH
84524: LD_INT 4
84526: ARRAY
84527: PPUSH
84528: CALL_OW 171
// end else
84532: GO 84573
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84534: LD_VAR 0 1
84538: PPUSH
84539: LD_EXP 125
84543: PUSH
84544: LD_VAR 0 2
84548: ARRAY
84549: PUSH
84550: LD_INT 3
84552: ARRAY
84553: PPUSH
84554: LD_EXP 125
84558: PUSH
84559: LD_VAR 0 2
84563: ARRAY
84564: PUSH
84565: LD_INT 4
84567: ARRAY
84568: PPUSH
84569: CALL_OW 171
// end ; end ;
84573: LD_VAR 0 3
84577: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
84578: LD_INT 0
84580: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
84581: LD_VAR 0 1
84585: PUSH
84586: LD_INT 250
84588: EQUAL
84589: PUSH
84590: LD_VAR 0 2
84594: PPUSH
84595: CALL_OW 264
84599: PUSH
84600: LD_INT 81
84602: EQUAL
84603: AND
84604: IFFALSE 84625
// MinerPlaceMine ( unit , x , y ) ;
84606: LD_VAR 0 2
84610: PPUSH
84611: LD_VAR 0 4
84615: PPUSH
84616: LD_VAR 0 5
84620: PPUSH
84621: CALL 87010 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
84625: LD_VAR 0 1
84629: PUSH
84630: LD_INT 251
84632: EQUAL
84633: PUSH
84634: LD_VAR 0 2
84638: PPUSH
84639: CALL_OW 264
84643: PUSH
84644: LD_INT 81
84646: EQUAL
84647: AND
84648: IFFALSE 84669
// MinerDetonateMine ( unit , x , y ) ;
84650: LD_VAR 0 2
84654: PPUSH
84655: LD_VAR 0 4
84659: PPUSH
84660: LD_VAR 0 5
84664: PPUSH
84665: CALL 87285 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
84669: LD_VAR 0 1
84673: PUSH
84674: LD_INT 252
84676: EQUAL
84677: PUSH
84678: LD_VAR 0 2
84682: PPUSH
84683: CALL_OW 264
84687: PUSH
84688: LD_INT 81
84690: EQUAL
84691: AND
84692: IFFALSE 84713
// MinerCreateMinefield ( unit , x , y ) ;
84694: LD_VAR 0 2
84698: PPUSH
84699: LD_VAR 0 4
84703: PPUSH
84704: LD_VAR 0 5
84708: PPUSH
84709: CALL 87702 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
84713: LD_VAR 0 1
84717: PUSH
84718: LD_INT 253
84720: EQUAL
84721: PUSH
84722: LD_VAR 0 2
84726: PPUSH
84727: CALL_OW 257
84731: PUSH
84732: LD_INT 5
84734: EQUAL
84735: AND
84736: IFFALSE 84757
// ComBinocular ( unit , x , y ) ;
84738: LD_VAR 0 2
84742: PPUSH
84743: LD_VAR 0 4
84747: PPUSH
84748: LD_VAR 0 5
84752: PPUSH
84753: CALL 88071 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
84757: LD_VAR 0 1
84761: PUSH
84762: LD_INT 254
84764: EQUAL
84765: PUSH
84766: LD_VAR 0 2
84770: PPUSH
84771: CALL_OW 264
84775: PUSH
84776: LD_INT 99
84778: EQUAL
84779: AND
84780: PUSH
84781: LD_VAR 0 3
84785: PPUSH
84786: CALL_OW 263
84790: PUSH
84791: LD_INT 3
84793: EQUAL
84794: AND
84795: IFFALSE 84811
// HackDestroyVehicle ( unit , selectedUnit ) ;
84797: LD_VAR 0 2
84801: PPUSH
84802: LD_VAR 0 3
84806: PPUSH
84807: CALL 86374 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
84811: LD_VAR 0 1
84815: PUSH
84816: LD_INT 255
84818: EQUAL
84819: PUSH
84820: LD_VAR 0 2
84824: PPUSH
84825: CALL_OW 264
84829: PUSH
84830: LD_INT 14
84832: PUSH
84833: LD_INT 53
84835: PUSH
84836: EMPTY
84837: LIST
84838: LIST
84839: IN
84840: AND
84841: PUSH
84842: LD_VAR 0 4
84846: PPUSH
84847: LD_VAR 0 5
84851: PPUSH
84852: CALL_OW 488
84856: AND
84857: IFFALSE 84881
// CutTreeXYR ( unit , x , y , 12 ) ;
84859: LD_VAR 0 2
84863: PPUSH
84864: LD_VAR 0 4
84868: PPUSH
84869: LD_VAR 0 5
84873: PPUSH
84874: LD_INT 12
84876: PPUSH
84877: CALL 84944 0 4
// if cmd = 256 then
84881: LD_VAR 0 1
84885: PUSH
84886: LD_INT 256
84888: EQUAL
84889: IFFALSE 84910
// SetFactoryWaypoint ( unit , x , y ) ;
84891: LD_VAR 0 2
84895: PPUSH
84896: LD_VAR 0 4
84900: PPUSH
84901: LD_VAR 0 5
84905: PPUSH
84906: CALL 82728 0 3
// if cmd = 257 then
84910: LD_VAR 0 1
84914: PUSH
84915: LD_INT 257
84917: EQUAL
84918: IFFALSE 84939
// SetWarehouseGatheringPoint ( unit , x , y ) ;
84920: LD_VAR 0 2
84924: PPUSH
84925: LD_VAR 0 4
84929: PPUSH
84930: LD_VAR 0 5
84934: PPUSH
84935: CALL 83090 0 3
// end ;
84939: LD_VAR 0 6
84943: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
84944: LD_INT 0
84946: PPUSH
84947: PPUSH
84948: PPUSH
84949: PPUSH
84950: PPUSH
84951: PPUSH
84952: PPUSH
84953: PPUSH
84954: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
84955: LD_VAR 0 1
84959: NOT
84960: PUSH
84961: LD_VAR 0 2
84965: PPUSH
84966: LD_VAR 0 3
84970: PPUSH
84971: CALL_OW 488
84975: NOT
84976: OR
84977: PUSH
84978: LD_VAR 0 4
84982: NOT
84983: OR
84984: IFFALSE 84988
// exit ;
84986: GO 85328
// list := [ ] ;
84988: LD_ADDR_VAR 0 13
84992: PUSH
84993: EMPTY
84994: ST_TO_ADDR
// if x - r < 0 then
84995: LD_VAR 0 2
84999: PUSH
85000: LD_VAR 0 4
85004: MINUS
85005: PUSH
85006: LD_INT 0
85008: LESS
85009: IFFALSE 85021
// min_x := 0 else
85011: LD_ADDR_VAR 0 7
85015: PUSH
85016: LD_INT 0
85018: ST_TO_ADDR
85019: GO 85037
// min_x := x - r ;
85021: LD_ADDR_VAR 0 7
85025: PUSH
85026: LD_VAR 0 2
85030: PUSH
85031: LD_VAR 0 4
85035: MINUS
85036: ST_TO_ADDR
// if y - r < 0 then
85037: LD_VAR 0 3
85041: PUSH
85042: LD_VAR 0 4
85046: MINUS
85047: PUSH
85048: LD_INT 0
85050: LESS
85051: IFFALSE 85063
// min_y := 0 else
85053: LD_ADDR_VAR 0 8
85057: PUSH
85058: LD_INT 0
85060: ST_TO_ADDR
85061: GO 85079
// min_y := y - r ;
85063: LD_ADDR_VAR 0 8
85067: PUSH
85068: LD_VAR 0 3
85072: PUSH
85073: LD_VAR 0 4
85077: MINUS
85078: ST_TO_ADDR
// max_x := x + r ;
85079: LD_ADDR_VAR 0 9
85083: PUSH
85084: LD_VAR 0 2
85088: PUSH
85089: LD_VAR 0 4
85093: PLUS
85094: ST_TO_ADDR
// max_y := y + r ;
85095: LD_ADDR_VAR 0 10
85099: PUSH
85100: LD_VAR 0 3
85104: PUSH
85105: LD_VAR 0 4
85109: PLUS
85110: ST_TO_ADDR
// for _x = min_x to max_x do
85111: LD_ADDR_VAR 0 11
85115: PUSH
85116: DOUBLE
85117: LD_VAR 0 7
85121: DEC
85122: ST_TO_ADDR
85123: LD_VAR 0 9
85127: PUSH
85128: FOR_TO
85129: IFFALSE 85246
// for _y = min_y to max_y do
85131: LD_ADDR_VAR 0 12
85135: PUSH
85136: DOUBLE
85137: LD_VAR 0 8
85141: DEC
85142: ST_TO_ADDR
85143: LD_VAR 0 10
85147: PUSH
85148: FOR_TO
85149: IFFALSE 85242
// begin if not ValidHex ( _x , _y ) then
85151: LD_VAR 0 11
85155: PPUSH
85156: LD_VAR 0 12
85160: PPUSH
85161: CALL_OW 488
85165: NOT
85166: IFFALSE 85170
// continue ;
85168: GO 85148
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
85170: LD_VAR 0 11
85174: PPUSH
85175: LD_VAR 0 12
85179: PPUSH
85180: CALL_OW 351
85184: PUSH
85185: LD_VAR 0 11
85189: PPUSH
85190: LD_VAR 0 12
85194: PPUSH
85195: CALL_OW 554
85199: AND
85200: IFFALSE 85240
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
85202: LD_ADDR_VAR 0 13
85206: PUSH
85207: LD_VAR 0 13
85211: PPUSH
85212: LD_VAR 0 13
85216: PUSH
85217: LD_INT 1
85219: PLUS
85220: PPUSH
85221: LD_VAR 0 11
85225: PUSH
85226: LD_VAR 0 12
85230: PUSH
85231: EMPTY
85232: LIST
85233: LIST
85234: PPUSH
85235: CALL_OW 2
85239: ST_TO_ADDR
// end ;
85240: GO 85148
85242: POP
85243: POP
85244: GO 85128
85246: POP
85247: POP
// if not list then
85248: LD_VAR 0 13
85252: NOT
85253: IFFALSE 85257
// exit ;
85255: GO 85328
// for i in list do
85257: LD_ADDR_VAR 0 6
85261: PUSH
85262: LD_VAR 0 13
85266: PUSH
85267: FOR_IN
85268: IFFALSE 85326
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
85270: LD_VAR 0 1
85274: PPUSH
85275: LD_STRING M
85277: PUSH
85278: LD_VAR 0 6
85282: PUSH
85283: LD_INT 1
85285: ARRAY
85286: PUSH
85287: LD_VAR 0 6
85291: PUSH
85292: LD_INT 2
85294: ARRAY
85295: PUSH
85296: LD_INT 0
85298: PUSH
85299: LD_INT 0
85301: PUSH
85302: LD_INT 0
85304: PUSH
85305: LD_INT 0
85307: PUSH
85308: EMPTY
85309: LIST
85310: LIST
85311: LIST
85312: LIST
85313: LIST
85314: LIST
85315: LIST
85316: PUSH
85317: EMPTY
85318: LIST
85319: PPUSH
85320: CALL_OW 447
85324: GO 85267
85326: POP
85327: POP
// end ;
85328: LD_VAR 0 5
85332: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
85333: LD_EXP 128
85337: NOT
85338: IFFALSE 85388
85340: GO 85342
85342: DISABLE
// begin initHack := true ;
85343: LD_ADDR_EXP 128
85347: PUSH
85348: LD_INT 1
85350: ST_TO_ADDR
// hackTanks := [ ] ;
85351: LD_ADDR_EXP 129
85355: PUSH
85356: EMPTY
85357: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
85358: LD_ADDR_EXP 130
85362: PUSH
85363: EMPTY
85364: ST_TO_ADDR
// hackLimit := 3 ;
85365: LD_ADDR_EXP 131
85369: PUSH
85370: LD_INT 3
85372: ST_TO_ADDR
// hackDist := 12 ;
85373: LD_ADDR_EXP 132
85377: PUSH
85378: LD_INT 12
85380: ST_TO_ADDR
// hackCounter := [ ] ;
85381: LD_ADDR_EXP 133
85385: PUSH
85386: EMPTY
85387: ST_TO_ADDR
// end ;
85388: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
85389: LD_EXP 128
85393: PUSH
85394: LD_INT 34
85396: PUSH
85397: LD_INT 99
85399: PUSH
85400: EMPTY
85401: LIST
85402: LIST
85403: PPUSH
85404: CALL_OW 69
85408: AND
85409: IFFALSE 85662
85411: GO 85413
85413: DISABLE
85414: LD_INT 0
85416: PPUSH
85417: PPUSH
// begin enable ;
85418: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
85419: LD_ADDR_VAR 0 1
85423: PUSH
85424: LD_INT 34
85426: PUSH
85427: LD_INT 99
85429: PUSH
85430: EMPTY
85431: LIST
85432: LIST
85433: PPUSH
85434: CALL_OW 69
85438: PUSH
85439: FOR_IN
85440: IFFALSE 85660
// begin if not i in hackTanks then
85442: LD_VAR 0 1
85446: PUSH
85447: LD_EXP 129
85451: IN
85452: NOT
85453: IFFALSE 85536
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
85455: LD_ADDR_EXP 129
85459: PUSH
85460: LD_EXP 129
85464: PPUSH
85465: LD_EXP 129
85469: PUSH
85470: LD_INT 1
85472: PLUS
85473: PPUSH
85474: LD_VAR 0 1
85478: PPUSH
85479: CALL_OW 1
85483: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
85484: LD_ADDR_EXP 130
85488: PUSH
85489: LD_EXP 130
85493: PPUSH
85494: LD_EXP 130
85498: PUSH
85499: LD_INT 1
85501: PLUS
85502: PPUSH
85503: EMPTY
85504: PPUSH
85505: CALL_OW 1
85509: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
85510: LD_ADDR_EXP 133
85514: PUSH
85515: LD_EXP 133
85519: PPUSH
85520: LD_EXP 133
85524: PUSH
85525: LD_INT 1
85527: PLUS
85528: PPUSH
85529: EMPTY
85530: PPUSH
85531: CALL_OW 1
85535: ST_TO_ADDR
// end ; if not IsOk ( i ) then
85536: LD_VAR 0 1
85540: PPUSH
85541: CALL_OW 302
85545: NOT
85546: IFFALSE 85559
// begin HackUnlinkAll ( i ) ;
85548: LD_VAR 0 1
85552: PPUSH
85553: CALL 85665 0 1
// continue ;
85557: GO 85439
// end ; HackCheckCapturedStatus ( i ) ;
85559: LD_VAR 0 1
85563: PPUSH
85564: CALL 86108 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
85568: LD_ADDR_VAR 0 2
85572: PUSH
85573: LD_INT 81
85575: PUSH
85576: LD_VAR 0 1
85580: PPUSH
85581: CALL_OW 255
85585: PUSH
85586: EMPTY
85587: LIST
85588: LIST
85589: PUSH
85590: LD_INT 33
85592: PUSH
85593: LD_INT 3
85595: PUSH
85596: EMPTY
85597: LIST
85598: LIST
85599: PUSH
85600: LD_INT 91
85602: PUSH
85603: LD_VAR 0 1
85607: PUSH
85608: LD_EXP 132
85612: PUSH
85613: EMPTY
85614: LIST
85615: LIST
85616: LIST
85617: PUSH
85618: LD_INT 50
85620: PUSH
85621: EMPTY
85622: LIST
85623: PUSH
85624: EMPTY
85625: LIST
85626: LIST
85627: LIST
85628: LIST
85629: PPUSH
85630: CALL_OW 69
85634: ST_TO_ADDR
// if not tmp then
85635: LD_VAR 0 2
85639: NOT
85640: IFFALSE 85644
// continue ;
85642: GO 85439
// HackLink ( i , tmp ) ;
85644: LD_VAR 0 1
85648: PPUSH
85649: LD_VAR 0 2
85653: PPUSH
85654: CALL 85801 0 2
// end ;
85658: GO 85439
85660: POP
85661: POP
// end ;
85662: PPOPN 2
85664: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
85665: LD_INT 0
85667: PPUSH
85668: PPUSH
85669: PPUSH
// if not hack in hackTanks then
85670: LD_VAR 0 1
85674: PUSH
85675: LD_EXP 129
85679: IN
85680: NOT
85681: IFFALSE 85685
// exit ;
85683: GO 85796
// index := GetElementIndex ( hackTanks , hack ) ;
85685: LD_ADDR_VAR 0 4
85689: PUSH
85690: LD_EXP 129
85694: PPUSH
85695: LD_VAR 0 1
85699: PPUSH
85700: CALL 31910 0 2
85704: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
85705: LD_EXP 130
85709: PUSH
85710: LD_VAR 0 4
85714: ARRAY
85715: IFFALSE 85796
// begin for i in hackTanksCaptured [ index ] do
85717: LD_ADDR_VAR 0 3
85721: PUSH
85722: LD_EXP 130
85726: PUSH
85727: LD_VAR 0 4
85731: ARRAY
85732: PUSH
85733: FOR_IN
85734: IFFALSE 85760
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
85736: LD_VAR 0 3
85740: PUSH
85741: LD_INT 1
85743: ARRAY
85744: PPUSH
85745: LD_VAR 0 3
85749: PUSH
85750: LD_INT 2
85752: ARRAY
85753: PPUSH
85754: CALL_OW 235
85758: GO 85733
85760: POP
85761: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
85762: LD_ADDR_EXP 130
85766: PUSH
85767: LD_EXP 130
85771: PPUSH
85772: LD_VAR 0 4
85776: PPUSH
85777: EMPTY
85778: PPUSH
85779: CALL_OW 1
85783: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
85784: LD_VAR 0 1
85788: PPUSH
85789: LD_INT 0
85791: PPUSH
85792: CALL_OW 505
// end ; end ;
85796: LD_VAR 0 2
85800: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
85801: LD_INT 0
85803: PPUSH
85804: PPUSH
85805: PPUSH
// if not hack in hackTanks or not vehicles then
85806: LD_VAR 0 1
85810: PUSH
85811: LD_EXP 129
85815: IN
85816: NOT
85817: PUSH
85818: LD_VAR 0 2
85822: NOT
85823: OR
85824: IFFALSE 85828
// exit ;
85826: GO 86103
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
85828: LD_ADDR_VAR 0 2
85832: PUSH
85833: LD_VAR 0 1
85837: PPUSH
85838: LD_VAR 0 2
85842: PPUSH
85843: LD_INT 1
85845: PPUSH
85846: LD_INT 1
85848: PPUSH
85849: CALL 32560 0 4
85853: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
85854: LD_ADDR_VAR 0 5
85858: PUSH
85859: LD_EXP 129
85863: PPUSH
85864: LD_VAR 0 1
85868: PPUSH
85869: CALL 31910 0 2
85873: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
85874: LD_EXP 130
85878: PUSH
85879: LD_VAR 0 5
85883: ARRAY
85884: PUSH
85885: LD_EXP 131
85889: LESS
85890: IFFALSE 86079
// begin for i := 1 to vehicles do
85892: LD_ADDR_VAR 0 4
85896: PUSH
85897: DOUBLE
85898: LD_INT 1
85900: DEC
85901: ST_TO_ADDR
85902: LD_VAR 0 2
85906: PUSH
85907: FOR_TO
85908: IFFALSE 86077
// begin if hackTanksCaptured [ index ] = hackLimit then
85910: LD_EXP 130
85914: PUSH
85915: LD_VAR 0 5
85919: ARRAY
85920: PUSH
85921: LD_EXP 131
85925: EQUAL
85926: IFFALSE 85930
// break ;
85928: GO 86077
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
85930: LD_ADDR_EXP 133
85934: PUSH
85935: LD_EXP 133
85939: PPUSH
85940: LD_VAR 0 5
85944: PPUSH
85945: LD_EXP 133
85949: PUSH
85950: LD_VAR 0 5
85954: ARRAY
85955: PUSH
85956: LD_INT 1
85958: PLUS
85959: PPUSH
85960: CALL_OW 1
85964: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
85965: LD_ADDR_EXP 130
85969: PUSH
85970: LD_EXP 130
85974: PPUSH
85975: LD_VAR 0 5
85979: PUSH
85980: LD_EXP 130
85984: PUSH
85985: LD_VAR 0 5
85989: ARRAY
85990: PUSH
85991: LD_INT 1
85993: PLUS
85994: PUSH
85995: EMPTY
85996: LIST
85997: LIST
85998: PPUSH
85999: LD_VAR 0 2
86003: PUSH
86004: LD_VAR 0 4
86008: ARRAY
86009: PUSH
86010: LD_VAR 0 2
86014: PUSH
86015: LD_VAR 0 4
86019: ARRAY
86020: PPUSH
86021: CALL_OW 255
86025: PUSH
86026: EMPTY
86027: LIST
86028: LIST
86029: PPUSH
86030: CALL 32125 0 3
86034: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
86035: LD_VAR 0 2
86039: PUSH
86040: LD_VAR 0 4
86044: ARRAY
86045: PPUSH
86046: LD_VAR 0 1
86050: PPUSH
86051: CALL_OW 255
86055: PPUSH
86056: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
86060: LD_VAR 0 2
86064: PUSH
86065: LD_VAR 0 4
86069: ARRAY
86070: PPUSH
86071: CALL_OW 141
// end ;
86075: GO 85907
86077: POP
86078: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86079: LD_VAR 0 1
86083: PPUSH
86084: LD_EXP 130
86088: PUSH
86089: LD_VAR 0 5
86093: ARRAY
86094: PUSH
86095: LD_INT 0
86097: PLUS
86098: PPUSH
86099: CALL_OW 505
// end ;
86103: LD_VAR 0 3
86107: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
86108: LD_INT 0
86110: PPUSH
86111: PPUSH
86112: PPUSH
86113: PPUSH
// if not hack in hackTanks then
86114: LD_VAR 0 1
86118: PUSH
86119: LD_EXP 129
86123: IN
86124: NOT
86125: IFFALSE 86129
// exit ;
86127: GO 86369
// index := GetElementIndex ( hackTanks , hack ) ;
86129: LD_ADDR_VAR 0 4
86133: PUSH
86134: LD_EXP 129
86138: PPUSH
86139: LD_VAR 0 1
86143: PPUSH
86144: CALL 31910 0 2
86148: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
86149: LD_ADDR_VAR 0 3
86153: PUSH
86154: DOUBLE
86155: LD_EXP 130
86159: PUSH
86160: LD_VAR 0 4
86164: ARRAY
86165: INC
86166: ST_TO_ADDR
86167: LD_INT 1
86169: PUSH
86170: FOR_DOWNTO
86171: IFFALSE 86343
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
86173: LD_ADDR_VAR 0 5
86177: PUSH
86178: LD_EXP 130
86182: PUSH
86183: LD_VAR 0 4
86187: ARRAY
86188: PUSH
86189: LD_VAR 0 3
86193: ARRAY
86194: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
86195: LD_VAR 0 5
86199: PUSH
86200: LD_INT 1
86202: ARRAY
86203: PPUSH
86204: CALL_OW 302
86208: NOT
86209: PUSH
86210: LD_VAR 0 5
86214: PUSH
86215: LD_INT 1
86217: ARRAY
86218: PPUSH
86219: CALL_OW 255
86223: PUSH
86224: LD_VAR 0 1
86228: PPUSH
86229: CALL_OW 255
86233: NONEQUAL
86234: OR
86235: IFFALSE 86341
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
86237: LD_VAR 0 5
86241: PUSH
86242: LD_INT 1
86244: ARRAY
86245: PPUSH
86246: CALL_OW 305
86250: PUSH
86251: LD_VAR 0 5
86255: PUSH
86256: LD_INT 1
86258: ARRAY
86259: PPUSH
86260: CALL_OW 255
86264: PUSH
86265: LD_VAR 0 1
86269: PPUSH
86270: CALL_OW 255
86274: EQUAL
86275: AND
86276: IFFALSE 86300
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
86278: LD_VAR 0 5
86282: PUSH
86283: LD_INT 1
86285: ARRAY
86286: PPUSH
86287: LD_VAR 0 5
86291: PUSH
86292: LD_INT 2
86294: ARRAY
86295: PPUSH
86296: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
86300: LD_ADDR_EXP 130
86304: PUSH
86305: LD_EXP 130
86309: PPUSH
86310: LD_VAR 0 4
86314: PPUSH
86315: LD_EXP 130
86319: PUSH
86320: LD_VAR 0 4
86324: ARRAY
86325: PPUSH
86326: LD_VAR 0 3
86330: PPUSH
86331: CALL_OW 3
86335: PPUSH
86336: CALL_OW 1
86340: ST_TO_ADDR
// end ; end ;
86341: GO 86170
86343: POP
86344: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86345: LD_VAR 0 1
86349: PPUSH
86350: LD_EXP 130
86354: PUSH
86355: LD_VAR 0 4
86359: ARRAY
86360: PUSH
86361: LD_INT 0
86363: PLUS
86364: PPUSH
86365: CALL_OW 505
// end ;
86369: LD_VAR 0 2
86373: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
86374: LD_INT 0
86376: PPUSH
86377: PPUSH
86378: PPUSH
86379: PPUSH
// if not hack in hackTanks then
86380: LD_VAR 0 1
86384: PUSH
86385: LD_EXP 129
86389: IN
86390: NOT
86391: IFFALSE 86395
// exit ;
86393: GO 86480
// index := GetElementIndex ( hackTanks , hack ) ;
86395: LD_ADDR_VAR 0 5
86399: PUSH
86400: LD_EXP 129
86404: PPUSH
86405: LD_VAR 0 1
86409: PPUSH
86410: CALL 31910 0 2
86414: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
86415: LD_ADDR_VAR 0 4
86419: PUSH
86420: DOUBLE
86421: LD_INT 1
86423: DEC
86424: ST_TO_ADDR
86425: LD_EXP 130
86429: PUSH
86430: LD_VAR 0 5
86434: ARRAY
86435: PUSH
86436: FOR_TO
86437: IFFALSE 86478
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
86439: LD_EXP 130
86443: PUSH
86444: LD_VAR 0 5
86448: ARRAY
86449: PUSH
86450: LD_VAR 0 4
86454: ARRAY
86455: PUSH
86456: LD_INT 1
86458: ARRAY
86459: PUSH
86460: LD_VAR 0 2
86464: EQUAL
86465: IFFALSE 86476
// KillUnit ( vehicle ) ;
86467: LD_VAR 0 2
86471: PPUSH
86472: CALL_OW 66
86476: GO 86436
86478: POP
86479: POP
// end ;
86480: LD_VAR 0 3
86484: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
86485: LD_EXP 134
86489: NOT
86490: IFFALSE 86525
86492: GO 86494
86494: DISABLE
// begin initMiner := true ;
86495: LD_ADDR_EXP 134
86499: PUSH
86500: LD_INT 1
86502: ST_TO_ADDR
// minersList := [ ] ;
86503: LD_ADDR_EXP 135
86507: PUSH
86508: EMPTY
86509: ST_TO_ADDR
// minerMinesList := [ ] ;
86510: LD_ADDR_EXP 136
86514: PUSH
86515: EMPTY
86516: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
86517: LD_ADDR_EXP 137
86521: PUSH
86522: LD_INT 5
86524: ST_TO_ADDR
// end ;
86525: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
86526: LD_EXP 134
86530: PUSH
86531: LD_INT 34
86533: PUSH
86534: LD_INT 81
86536: PUSH
86537: EMPTY
86538: LIST
86539: LIST
86540: PPUSH
86541: CALL_OW 69
86545: AND
86546: IFFALSE 87007
86548: GO 86550
86550: DISABLE
86551: LD_INT 0
86553: PPUSH
86554: PPUSH
86555: PPUSH
86556: PPUSH
// begin enable ;
86557: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
86558: LD_ADDR_VAR 0 1
86562: PUSH
86563: LD_INT 34
86565: PUSH
86566: LD_INT 81
86568: PUSH
86569: EMPTY
86570: LIST
86571: LIST
86572: PPUSH
86573: CALL_OW 69
86577: PUSH
86578: FOR_IN
86579: IFFALSE 86651
// begin if not i in minersList then
86581: LD_VAR 0 1
86585: PUSH
86586: LD_EXP 135
86590: IN
86591: NOT
86592: IFFALSE 86649
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
86594: LD_ADDR_EXP 135
86598: PUSH
86599: LD_EXP 135
86603: PPUSH
86604: LD_EXP 135
86608: PUSH
86609: LD_INT 1
86611: PLUS
86612: PPUSH
86613: LD_VAR 0 1
86617: PPUSH
86618: CALL_OW 1
86622: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
86623: LD_ADDR_EXP 136
86627: PUSH
86628: LD_EXP 136
86632: PPUSH
86633: LD_EXP 136
86637: PUSH
86638: LD_INT 1
86640: PLUS
86641: PPUSH
86642: EMPTY
86643: PPUSH
86644: CALL_OW 1
86648: ST_TO_ADDR
// end end ;
86649: GO 86578
86651: POP
86652: POP
// for i := minerMinesList downto 1 do
86653: LD_ADDR_VAR 0 1
86657: PUSH
86658: DOUBLE
86659: LD_EXP 136
86663: INC
86664: ST_TO_ADDR
86665: LD_INT 1
86667: PUSH
86668: FOR_DOWNTO
86669: IFFALSE 87005
// begin if IsLive ( minersList [ i ] ) then
86671: LD_EXP 135
86675: PUSH
86676: LD_VAR 0 1
86680: ARRAY
86681: PPUSH
86682: CALL_OW 300
86686: IFFALSE 86714
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
86688: LD_EXP 135
86692: PUSH
86693: LD_VAR 0 1
86697: ARRAY
86698: PPUSH
86699: LD_EXP 136
86703: PUSH
86704: LD_VAR 0 1
86708: ARRAY
86709: PPUSH
86710: CALL_OW 505
// if not minerMinesList [ i ] then
86714: LD_EXP 136
86718: PUSH
86719: LD_VAR 0 1
86723: ARRAY
86724: NOT
86725: IFFALSE 86729
// continue ;
86727: GO 86668
// for j := minerMinesList [ i ] downto 1 do
86729: LD_ADDR_VAR 0 2
86733: PUSH
86734: DOUBLE
86735: LD_EXP 136
86739: PUSH
86740: LD_VAR 0 1
86744: ARRAY
86745: INC
86746: ST_TO_ADDR
86747: LD_INT 1
86749: PUSH
86750: FOR_DOWNTO
86751: IFFALSE 87001
// begin side := GetSide ( minersList [ i ] ) ;
86753: LD_ADDR_VAR 0 3
86757: PUSH
86758: LD_EXP 135
86762: PUSH
86763: LD_VAR 0 1
86767: ARRAY
86768: PPUSH
86769: CALL_OW 255
86773: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
86774: LD_ADDR_VAR 0 4
86778: PUSH
86779: LD_EXP 136
86783: PUSH
86784: LD_VAR 0 1
86788: ARRAY
86789: PUSH
86790: LD_VAR 0 2
86794: ARRAY
86795: PUSH
86796: LD_INT 1
86798: ARRAY
86799: PPUSH
86800: LD_EXP 136
86804: PUSH
86805: LD_VAR 0 1
86809: ARRAY
86810: PUSH
86811: LD_VAR 0 2
86815: ARRAY
86816: PUSH
86817: LD_INT 2
86819: ARRAY
86820: PPUSH
86821: CALL_OW 428
86825: ST_TO_ADDR
// if not tmp then
86826: LD_VAR 0 4
86830: NOT
86831: IFFALSE 86835
// continue ;
86833: GO 86750
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
86835: LD_VAR 0 4
86839: PUSH
86840: LD_INT 81
86842: PUSH
86843: LD_VAR 0 3
86847: PUSH
86848: EMPTY
86849: LIST
86850: LIST
86851: PPUSH
86852: CALL_OW 69
86856: IN
86857: PUSH
86858: LD_EXP 136
86862: PUSH
86863: LD_VAR 0 1
86867: ARRAY
86868: PUSH
86869: LD_VAR 0 2
86873: ARRAY
86874: PUSH
86875: LD_INT 1
86877: ARRAY
86878: PPUSH
86879: LD_EXP 136
86883: PUSH
86884: LD_VAR 0 1
86888: ARRAY
86889: PUSH
86890: LD_VAR 0 2
86894: ARRAY
86895: PUSH
86896: LD_INT 2
86898: ARRAY
86899: PPUSH
86900: CALL_OW 458
86904: AND
86905: IFFALSE 86999
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
86907: LD_EXP 136
86911: PUSH
86912: LD_VAR 0 1
86916: ARRAY
86917: PUSH
86918: LD_VAR 0 2
86922: ARRAY
86923: PUSH
86924: LD_INT 1
86926: ARRAY
86927: PPUSH
86928: LD_EXP 136
86932: PUSH
86933: LD_VAR 0 1
86937: ARRAY
86938: PUSH
86939: LD_VAR 0 2
86943: ARRAY
86944: PUSH
86945: LD_INT 2
86947: ARRAY
86948: PPUSH
86949: LD_VAR 0 3
86953: PPUSH
86954: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
86958: LD_ADDR_EXP 136
86962: PUSH
86963: LD_EXP 136
86967: PPUSH
86968: LD_VAR 0 1
86972: PPUSH
86973: LD_EXP 136
86977: PUSH
86978: LD_VAR 0 1
86982: ARRAY
86983: PPUSH
86984: LD_VAR 0 2
86988: PPUSH
86989: CALL_OW 3
86993: PPUSH
86994: CALL_OW 1
86998: ST_TO_ADDR
// end ; end ;
86999: GO 86750
87001: POP
87002: POP
// end ;
87003: GO 86668
87005: POP
87006: POP
// end ;
87007: PPOPN 4
87009: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
87010: LD_INT 0
87012: PPUSH
87013: PPUSH
// result := false ;
87014: LD_ADDR_VAR 0 4
87018: PUSH
87019: LD_INT 0
87021: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
87022: LD_VAR 0 1
87026: PPUSH
87027: CALL_OW 264
87031: PUSH
87032: LD_INT 81
87034: EQUAL
87035: NOT
87036: IFFALSE 87040
// exit ;
87038: GO 87280
// index := GetElementIndex ( minersList , unit ) ;
87040: LD_ADDR_VAR 0 5
87044: PUSH
87045: LD_EXP 135
87049: PPUSH
87050: LD_VAR 0 1
87054: PPUSH
87055: CALL 31910 0 2
87059: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
87060: LD_EXP 136
87064: PUSH
87065: LD_VAR 0 5
87069: ARRAY
87070: PUSH
87071: LD_EXP 137
87075: GREATEREQUAL
87076: IFFALSE 87080
// exit ;
87078: GO 87280
// ComMoveXY ( unit , x , y ) ;
87080: LD_VAR 0 1
87084: PPUSH
87085: LD_VAR 0 2
87089: PPUSH
87090: LD_VAR 0 3
87094: PPUSH
87095: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87099: LD_INT 35
87101: PPUSH
87102: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
87106: LD_VAR 0 1
87110: PPUSH
87111: LD_VAR 0 2
87115: PPUSH
87116: LD_VAR 0 3
87120: PPUSH
87121: CALL 63246 0 3
87125: NOT
87126: PUSH
87127: LD_VAR 0 1
87131: PPUSH
87132: CALL_OW 314
87136: AND
87137: IFFALSE 87141
// exit ;
87139: GO 87280
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
87141: LD_VAR 0 2
87145: PPUSH
87146: LD_VAR 0 3
87150: PPUSH
87151: CALL_OW 428
87155: PUSH
87156: LD_VAR 0 1
87160: EQUAL
87161: PUSH
87162: LD_VAR 0 1
87166: PPUSH
87167: CALL_OW 314
87171: NOT
87172: AND
87173: IFFALSE 87099
// PlaySoundXY ( x , y , PlantMine ) ;
87175: LD_VAR 0 2
87179: PPUSH
87180: LD_VAR 0 3
87184: PPUSH
87185: LD_STRING PlantMine
87187: PPUSH
87188: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
87192: LD_VAR 0 2
87196: PPUSH
87197: LD_VAR 0 3
87201: PPUSH
87202: LD_VAR 0 1
87206: PPUSH
87207: CALL_OW 255
87211: PPUSH
87212: LD_INT 0
87214: PPUSH
87215: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
87219: LD_ADDR_EXP 136
87223: PUSH
87224: LD_EXP 136
87228: PPUSH
87229: LD_VAR 0 5
87233: PUSH
87234: LD_EXP 136
87238: PUSH
87239: LD_VAR 0 5
87243: ARRAY
87244: PUSH
87245: LD_INT 1
87247: PLUS
87248: PUSH
87249: EMPTY
87250: LIST
87251: LIST
87252: PPUSH
87253: LD_VAR 0 2
87257: PUSH
87258: LD_VAR 0 3
87262: PUSH
87263: EMPTY
87264: LIST
87265: LIST
87266: PPUSH
87267: CALL 32125 0 3
87271: ST_TO_ADDR
// result := true ;
87272: LD_ADDR_VAR 0 4
87276: PUSH
87277: LD_INT 1
87279: ST_TO_ADDR
// end ;
87280: LD_VAR 0 4
87284: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
87285: LD_INT 0
87287: PPUSH
87288: PPUSH
87289: PPUSH
// if not unit in minersList then
87290: LD_VAR 0 1
87294: PUSH
87295: LD_EXP 135
87299: IN
87300: NOT
87301: IFFALSE 87305
// exit ;
87303: GO 87697
// index := GetElementIndex ( minersList , unit ) ;
87305: LD_ADDR_VAR 0 6
87309: PUSH
87310: LD_EXP 135
87314: PPUSH
87315: LD_VAR 0 1
87319: PPUSH
87320: CALL 31910 0 2
87324: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
87325: LD_ADDR_VAR 0 5
87329: PUSH
87330: DOUBLE
87331: LD_EXP 136
87335: PUSH
87336: LD_VAR 0 6
87340: ARRAY
87341: INC
87342: ST_TO_ADDR
87343: LD_INT 1
87345: PUSH
87346: FOR_DOWNTO
87347: IFFALSE 87508
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
87349: LD_EXP 136
87353: PUSH
87354: LD_VAR 0 6
87358: ARRAY
87359: PUSH
87360: LD_VAR 0 5
87364: ARRAY
87365: PUSH
87366: LD_INT 1
87368: ARRAY
87369: PUSH
87370: LD_VAR 0 2
87374: EQUAL
87375: PUSH
87376: LD_EXP 136
87380: PUSH
87381: LD_VAR 0 6
87385: ARRAY
87386: PUSH
87387: LD_VAR 0 5
87391: ARRAY
87392: PUSH
87393: LD_INT 2
87395: ARRAY
87396: PUSH
87397: LD_VAR 0 3
87401: EQUAL
87402: AND
87403: IFFALSE 87506
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87405: LD_EXP 136
87409: PUSH
87410: LD_VAR 0 6
87414: ARRAY
87415: PUSH
87416: LD_VAR 0 5
87420: ARRAY
87421: PUSH
87422: LD_INT 1
87424: ARRAY
87425: PPUSH
87426: LD_EXP 136
87430: PUSH
87431: LD_VAR 0 6
87435: ARRAY
87436: PUSH
87437: LD_VAR 0 5
87441: ARRAY
87442: PUSH
87443: LD_INT 2
87445: ARRAY
87446: PPUSH
87447: LD_VAR 0 1
87451: PPUSH
87452: CALL_OW 255
87456: PPUSH
87457: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87461: LD_ADDR_EXP 136
87465: PUSH
87466: LD_EXP 136
87470: PPUSH
87471: LD_VAR 0 6
87475: PPUSH
87476: LD_EXP 136
87480: PUSH
87481: LD_VAR 0 6
87485: ARRAY
87486: PPUSH
87487: LD_VAR 0 5
87491: PPUSH
87492: CALL_OW 3
87496: PPUSH
87497: CALL_OW 1
87501: ST_TO_ADDR
// exit ;
87502: POP
87503: POP
87504: GO 87697
// end ; end ;
87506: GO 87346
87508: POP
87509: POP
// for i := minerMinesList [ index ] downto 1 do
87510: LD_ADDR_VAR 0 5
87514: PUSH
87515: DOUBLE
87516: LD_EXP 136
87520: PUSH
87521: LD_VAR 0 6
87525: ARRAY
87526: INC
87527: ST_TO_ADDR
87528: LD_INT 1
87530: PUSH
87531: FOR_DOWNTO
87532: IFFALSE 87695
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
87534: LD_EXP 136
87538: PUSH
87539: LD_VAR 0 6
87543: ARRAY
87544: PUSH
87545: LD_VAR 0 5
87549: ARRAY
87550: PUSH
87551: LD_INT 1
87553: ARRAY
87554: PPUSH
87555: LD_EXP 136
87559: PUSH
87560: LD_VAR 0 6
87564: ARRAY
87565: PUSH
87566: LD_VAR 0 5
87570: ARRAY
87571: PUSH
87572: LD_INT 2
87574: ARRAY
87575: PPUSH
87576: LD_VAR 0 2
87580: PPUSH
87581: LD_VAR 0 3
87585: PPUSH
87586: CALL_OW 298
87590: PUSH
87591: LD_INT 6
87593: LESS
87594: IFFALSE 87693
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87596: LD_EXP 136
87600: PUSH
87601: LD_VAR 0 6
87605: ARRAY
87606: PUSH
87607: LD_VAR 0 5
87611: ARRAY
87612: PUSH
87613: LD_INT 1
87615: ARRAY
87616: PPUSH
87617: LD_EXP 136
87621: PUSH
87622: LD_VAR 0 6
87626: ARRAY
87627: PUSH
87628: LD_VAR 0 5
87632: ARRAY
87633: PUSH
87634: LD_INT 2
87636: ARRAY
87637: PPUSH
87638: LD_VAR 0 1
87642: PPUSH
87643: CALL_OW 255
87647: PPUSH
87648: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87652: LD_ADDR_EXP 136
87656: PUSH
87657: LD_EXP 136
87661: PPUSH
87662: LD_VAR 0 6
87666: PPUSH
87667: LD_EXP 136
87671: PUSH
87672: LD_VAR 0 6
87676: ARRAY
87677: PPUSH
87678: LD_VAR 0 5
87682: PPUSH
87683: CALL_OW 3
87687: PPUSH
87688: CALL_OW 1
87692: ST_TO_ADDR
// end ; end ;
87693: GO 87531
87695: POP
87696: POP
// end ;
87697: LD_VAR 0 4
87701: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
87702: LD_INT 0
87704: PPUSH
87705: PPUSH
87706: PPUSH
87707: PPUSH
87708: PPUSH
87709: PPUSH
87710: PPUSH
87711: PPUSH
87712: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
87713: LD_VAR 0 1
87717: PPUSH
87718: CALL_OW 264
87722: PUSH
87723: LD_INT 81
87725: EQUAL
87726: NOT
87727: PUSH
87728: LD_VAR 0 1
87732: PUSH
87733: LD_EXP 135
87737: IN
87738: NOT
87739: OR
87740: IFFALSE 87744
// exit ;
87742: GO 88066
// index := GetElementIndex ( minersList , unit ) ;
87744: LD_ADDR_VAR 0 6
87748: PUSH
87749: LD_EXP 135
87753: PPUSH
87754: LD_VAR 0 1
87758: PPUSH
87759: CALL 31910 0 2
87763: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
87764: LD_ADDR_VAR 0 8
87768: PUSH
87769: LD_EXP 137
87773: PUSH
87774: LD_EXP 136
87778: PUSH
87779: LD_VAR 0 6
87783: ARRAY
87784: MINUS
87785: ST_TO_ADDR
// if not minesFreeAmount then
87786: LD_VAR 0 8
87790: NOT
87791: IFFALSE 87795
// exit ;
87793: GO 88066
// tmp := [ ] ;
87795: LD_ADDR_VAR 0 7
87799: PUSH
87800: EMPTY
87801: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
87802: LD_ADDR_VAR 0 5
87806: PUSH
87807: DOUBLE
87808: LD_INT 1
87810: DEC
87811: ST_TO_ADDR
87812: LD_VAR 0 8
87816: PUSH
87817: FOR_TO
87818: IFFALSE 88013
// begin _d := rand ( 0 , 5 ) ;
87820: LD_ADDR_VAR 0 11
87824: PUSH
87825: LD_INT 0
87827: PPUSH
87828: LD_INT 5
87830: PPUSH
87831: CALL_OW 12
87835: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
87836: LD_ADDR_VAR 0 12
87840: PUSH
87841: LD_INT 2
87843: PPUSH
87844: LD_INT 6
87846: PPUSH
87847: CALL_OW 12
87851: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
87852: LD_ADDR_VAR 0 9
87856: PUSH
87857: LD_VAR 0 2
87861: PPUSH
87862: LD_VAR 0 11
87866: PPUSH
87867: LD_VAR 0 12
87871: PPUSH
87872: CALL_OW 272
87876: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
87877: LD_ADDR_VAR 0 10
87881: PUSH
87882: LD_VAR 0 3
87886: PPUSH
87887: LD_VAR 0 11
87891: PPUSH
87892: LD_VAR 0 12
87896: PPUSH
87897: CALL_OW 273
87901: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
87902: LD_VAR 0 9
87906: PPUSH
87907: LD_VAR 0 10
87911: PPUSH
87912: CALL_OW 488
87916: PUSH
87917: LD_VAR 0 9
87921: PUSH
87922: LD_VAR 0 10
87926: PUSH
87927: EMPTY
87928: LIST
87929: LIST
87930: PUSH
87931: LD_VAR 0 7
87935: IN
87936: NOT
87937: AND
87938: PUSH
87939: LD_VAR 0 9
87943: PPUSH
87944: LD_VAR 0 10
87948: PPUSH
87949: CALL_OW 458
87953: NOT
87954: AND
87955: IFFALSE 87997
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
87957: LD_ADDR_VAR 0 7
87961: PUSH
87962: LD_VAR 0 7
87966: PPUSH
87967: LD_VAR 0 7
87971: PUSH
87972: LD_INT 1
87974: PLUS
87975: PPUSH
87976: LD_VAR 0 9
87980: PUSH
87981: LD_VAR 0 10
87985: PUSH
87986: EMPTY
87987: LIST
87988: LIST
87989: PPUSH
87990: CALL_OW 1
87994: ST_TO_ADDR
87995: GO 88011
// i := i - 1 ;
87997: LD_ADDR_VAR 0 5
88001: PUSH
88002: LD_VAR 0 5
88006: PUSH
88007: LD_INT 1
88009: MINUS
88010: ST_TO_ADDR
// end ;
88011: GO 87817
88013: POP
88014: POP
// for i in tmp do
88015: LD_ADDR_VAR 0 5
88019: PUSH
88020: LD_VAR 0 7
88024: PUSH
88025: FOR_IN
88026: IFFALSE 88064
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
88028: LD_VAR 0 1
88032: PPUSH
88033: LD_VAR 0 5
88037: PUSH
88038: LD_INT 1
88040: ARRAY
88041: PPUSH
88042: LD_VAR 0 5
88046: PUSH
88047: LD_INT 2
88049: ARRAY
88050: PPUSH
88051: CALL 87010 0 3
88055: NOT
88056: IFFALSE 88062
// exit ;
88058: POP
88059: POP
88060: GO 88066
88062: GO 88025
88064: POP
88065: POP
// end ;
88066: LD_VAR 0 4
88070: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
88071: LD_INT 0
88073: PPUSH
88074: PPUSH
88075: PPUSH
88076: PPUSH
88077: PPUSH
88078: PPUSH
88079: PPUSH
// if not GetClass ( unit ) = class_sniper then
88080: LD_VAR 0 1
88084: PPUSH
88085: CALL_OW 257
88089: PUSH
88090: LD_INT 5
88092: EQUAL
88093: NOT
88094: IFFALSE 88098
// exit ;
88096: GO 88486
// dist := 8 ;
88098: LD_ADDR_VAR 0 5
88102: PUSH
88103: LD_INT 8
88105: ST_TO_ADDR
// viewRange := 12 ;
88106: LD_ADDR_VAR 0 7
88110: PUSH
88111: LD_INT 12
88113: ST_TO_ADDR
// side := GetSide ( unit ) ;
88114: LD_ADDR_VAR 0 6
88118: PUSH
88119: LD_VAR 0 1
88123: PPUSH
88124: CALL_OW 255
88128: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
88129: LD_INT 61
88131: PPUSH
88132: LD_VAR 0 6
88136: PPUSH
88137: CALL_OW 321
88141: PUSH
88142: LD_INT 2
88144: EQUAL
88145: IFFALSE 88155
// viewRange := 16 ;
88147: LD_ADDR_VAR 0 7
88151: PUSH
88152: LD_INT 16
88154: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
88155: LD_VAR 0 1
88159: PPUSH
88160: LD_VAR 0 2
88164: PPUSH
88165: LD_VAR 0 3
88169: PPUSH
88170: CALL_OW 297
88174: PUSH
88175: LD_VAR 0 5
88179: GREATER
88180: IFFALSE 88259
// begin ComMoveXY ( unit , x , y ) ;
88182: LD_VAR 0 1
88186: PPUSH
88187: LD_VAR 0 2
88191: PPUSH
88192: LD_VAR 0 3
88196: PPUSH
88197: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
88201: LD_INT 35
88203: PPUSH
88204: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
88208: LD_VAR 0 1
88212: PPUSH
88213: LD_VAR 0 2
88217: PPUSH
88218: LD_VAR 0 3
88222: PPUSH
88223: CALL 63246 0 3
88227: NOT
88228: IFFALSE 88232
// exit ;
88230: GO 88486
// until GetDistUnitXY ( unit , x , y ) < dist ;
88232: LD_VAR 0 1
88236: PPUSH
88237: LD_VAR 0 2
88241: PPUSH
88242: LD_VAR 0 3
88246: PPUSH
88247: CALL_OW 297
88251: PUSH
88252: LD_VAR 0 5
88256: LESS
88257: IFFALSE 88201
// end ; ComTurnXY ( unit , x , y ) ;
88259: LD_VAR 0 1
88263: PPUSH
88264: LD_VAR 0 2
88268: PPUSH
88269: LD_VAR 0 3
88273: PPUSH
88274: CALL_OW 118
// wait ( 5 ) ;
88278: LD_INT 5
88280: PPUSH
88281: CALL_OW 67
// _d := GetDir ( unit ) ;
88285: LD_ADDR_VAR 0 10
88289: PUSH
88290: LD_VAR 0 1
88294: PPUSH
88295: CALL_OW 254
88299: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
88300: LD_ADDR_VAR 0 8
88304: PUSH
88305: LD_VAR 0 1
88309: PPUSH
88310: CALL_OW 250
88314: PPUSH
88315: LD_VAR 0 10
88319: PPUSH
88320: LD_VAR 0 5
88324: PPUSH
88325: CALL_OW 272
88329: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
88330: LD_ADDR_VAR 0 9
88334: PUSH
88335: LD_VAR 0 1
88339: PPUSH
88340: CALL_OW 251
88344: PPUSH
88345: LD_VAR 0 10
88349: PPUSH
88350: LD_VAR 0 5
88354: PPUSH
88355: CALL_OW 273
88359: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
88360: LD_VAR 0 8
88364: PPUSH
88365: LD_VAR 0 9
88369: PPUSH
88370: CALL_OW 488
88374: NOT
88375: IFFALSE 88379
// exit ;
88377: GO 88486
// ComAnimCustom ( unit , 1 ) ;
88379: LD_VAR 0 1
88383: PPUSH
88384: LD_INT 1
88386: PPUSH
88387: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
88391: LD_VAR 0 8
88395: PPUSH
88396: LD_VAR 0 9
88400: PPUSH
88401: LD_VAR 0 6
88405: PPUSH
88406: LD_VAR 0 7
88410: PPUSH
88411: CALL_OW 330
// repeat wait ( 1 ) ;
88415: LD_INT 1
88417: PPUSH
88418: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
88422: LD_VAR 0 1
88426: PPUSH
88427: CALL_OW 316
88431: PUSH
88432: LD_VAR 0 1
88436: PPUSH
88437: CALL_OW 314
88441: OR
88442: PUSH
88443: LD_VAR 0 1
88447: PPUSH
88448: CALL_OW 302
88452: NOT
88453: OR
88454: PUSH
88455: LD_VAR 0 1
88459: PPUSH
88460: CALL_OW 301
88464: OR
88465: IFFALSE 88415
// RemoveSeeing ( _x , _y , side ) ;
88467: LD_VAR 0 8
88471: PPUSH
88472: LD_VAR 0 9
88476: PPUSH
88477: LD_VAR 0 6
88481: PPUSH
88482: CALL_OW 331
// end ; end_of_file
88486: LD_VAR 0 4
88490: RET
// export function StopOriginalMusic ; begin
88491: LD_INT 0
88493: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
88494: LD_STRING OW_FORCEMUSICDISABLE(true);
88496: PPUSH
88497: CALL_OW 559
// end ;
88501: LD_VAR 0 1
88505: RET
// export function PlayOriginalMusic ; begin
88506: LD_INT 0
88508: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
88509: LD_STRING OW_FORCEMUSICDISABLE(false);
88511: PPUSH
88512: CALL_OW 559
// end ;
88516: LD_VAR 0 1
88520: RET
// export function PlayCustomMusic ( track , callback ) ; begin
88521: LD_INT 0
88523: PPUSH
// StopOriginalMusic ;
88524: CALL 88491 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
88528: LD_STRING playMusic("
88530: PUSH
88531: LD_VAR 0 1
88535: STR
88536: PUSH
88537: LD_STRING ", "
88539: STR
88540: PUSH
88541: LD_VAR 0 2
88545: STR
88546: PUSH
88547: LD_STRING ")
88549: STR
88550: PPUSH
88551: CALL_OW 559
// end ;
88555: LD_VAR 0 3
88559: RET
