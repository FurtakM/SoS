// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// InitEvents ;
   8: CALL 203 0 0
// PrepareRussian ;
  12: CALL 860 0 0
// PrepareArabian ;
  16: CALL 227 0 0
// Action ;
  20: CALL 1518 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// end ;
  37: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := true ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 1
  48: ST_TO_ADDR
// hasNormalScene := false ;
  49: LD_ADDR_EXP 5
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// prefix := 07_ ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_STRING 07_
  64: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  65: LD_ADDR_EXP 3
  69: PUSH
  70: LD_STRING 01_JohnnySaved
  72: PPUSH
  73: LD_INT 0
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// hasVodka := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  89: LD_ADDR_EXP 7
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// hasStimDrugs := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// hasExplosions := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanContact := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// hasSniperRifle := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasScout := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// hasMethanol := false ;
 137: LD_ADDR_EXP 12
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// heikeSquad := [ ] ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: EMPTY
 151: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 152: LD_ADDR_EXP 14
 156: PUSH
 157: LD_INT 10
 159: PPUSH
 160: LD_INT 21
 162: PUSH
 163: LD_INT 3
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: PPUSH
 170: CALL_OW 70
 174: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 175: LD_ADDR_EXP 15
 179: PUSH
 180: EMPTY
 181: ST_TO_ADDR
// isAlarm := false ;
 182: LD_ADDR_EXP 16
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 190: LD_ADDR_EXP 17
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// export eventCenterCamOnHeike , eventShowPlace ; function InitEvents ; begin
 203: LD_INT 0
 205: PPUSH
// eventCenterCamOnHeike := 1 ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// eventShowPlace := 1 ;
 214: LD_ADDR_EXP 19
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// end ; end_of_file
 222: LD_VAR 0 1
 226: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i ; begin
 227: LD_INT 0
 229: PPUSH
 230: PPUSH
// uc_side := 8 ;
 231: LD_ADDR_OWVAR 20
 235: PUSH
 236: LD_INT 8
 238: ST_TO_ADDR
// uc_nation := 2 ;
 239: LD_ADDR_OWVAR 21
 243: PUSH
 244: LD_INT 2
 246: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 247: LD_INT 0
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 0
 255: PPUSH
 256: CALL_OW 380
// CreateHuman ;
 260: CALL_OW 44
// uc_side := 4 ;
 264: LD_ADDR_OWVAR 20
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// uc_nation := 1 ;
 272: LD_ADDR_OWVAR 21
 276: PUSH
 277: LD_INT 1
 279: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 280: LD_ADDR_EXP 32
 284: PUSH
 285: LD_STRING 07_Americans
 287: PPUSH
 288: CALL_OW 31
 292: ST_TO_ADDR
// if americanSquad < 5 then
 293: LD_EXP 32
 297: PUSH
 298: LD_INT 5
 300: LESS
 301: IFFALSE 358
// begin for i := americanSquad to 5 do
 303: LD_ADDR_VAR 0 2
 307: PUSH
 308: DOUBLE
 309: LD_EXP 32
 313: DEC
 314: ST_TO_ADDR
 315: LD_INT 5
 317: PUSH
 318: FOR_TO
 319: IFFALSE 356
// begin PrepareHuman ( false , 2 , 6 ) ;
 321: LD_INT 0
 323: PPUSH
 324: LD_INT 2
 326: PPUSH
 327: LD_INT 6
 329: PPUSH
 330: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 334: LD_ADDR_EXP 32
 338: PUSH
 339: LD_EXP 32
 343: PPUSH
 344: CALL_OW 44
 348: PPUSH
 349: CALL 43828 0 2
 353: ST_TO_ADDR
// end ;
 354: GO 318
 356: POP
 357: POP
// end ; Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 358: LD_ADDR_EXP 34
 362: PUSH
 363: LD_STRING UsCommander
 365: PPUSH
 366: LD_EXP 1
 370: NOT
 371: PPUSH
 372: LD_STRING 07_
 374: PPUSH
 375: CALL 6444 0 3
 379: ST_TO_ADDR
// americanSquad := Join ( americanSquad , Doug ) ;
 380: LD_ADDR_EXP 32
 384: PUSH
 385: LD_EXP 32
 389: PPUSH
 390: LD_EXP 34
 394: PPUSH
 395: CALL 43828 0 2
 399: ST_TO_ADDR
// if johnnySaved or debug then
 400: LD_EXP 3
 404: PUSH
 405: LD_EXP 1
 409: OR
 410: IFFALSE 445
// begin Harris := NewCharacter ( Harris ) ;
 412: LD_ADDR_EXP 33
 416: PUSH
 417: LD_STRING Harris
 419: PPUSH
 420: CALL_OW 25
 424: ST_TO_ADDR
// americanSquad := Join ( americanSquad , Harris ) ;
 425: LD_ADDR_EXP 32
 429: PUSH
 430: LD_EXP 32
 434: PPUSH
 435: LD_EXP 33
 439: PPUSH
 440: CALL 43828 0 2
 444: ST_TO_ADDR
// end ; uc_side := 2 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 2
 452: ST_TO_ADDR
// uc_nation := 2 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 2
 460: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 461: LD_ADDR_EXP 20
 465: PUSH
 466: LD_STRING Heike
 468: PPUSH
 469: LD_EXP 1
 473: NOT
 474: PPUSH
 475: LD_EXP 2
 479: PPUSH
 480: CALL 6444 0 3
 484: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 485: LD_ADDR_EXP 23
 489: PUSH
 490: LD_STRING Ibrahim
 492: PPUSH
 493: LD_EXP 1
 497: NOT
 498: PPUSH
 499: LD_EXP 2
 503: PPUSH
 504: CALL 6444 0 3
 508: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 509: LD_ADDR_EXP 21
 513: PUSH
 514: LD_STRING Givi
 516: PPUSH
 517: LD_EXP 1
 521: NOT
 522: PPUSH
 523: LD_EXP 2
 527: PPUSH
 528: CALL 6444 0 3
 532: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 533: LD_ADDR_EXP 24
 537: PUSH
 538: LD_STRING Kamil
 540: PPUSH
 541: LD_EXP 1
 545: NOT
 546: PPUSH
 547: LD_EXP 2
 551: PPUSH
 552: CALL 6444 0 3
 556: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 557: LD_ADDR_EXP 25
 561: PUSH
 562: LD_STRING Kaia
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_EXP 2
 575: PPUSH
 576: CALL 6444 0 3
 580: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 581: LD_ADDR_EXP 26
 585: PUSH
 586: LD_STRING Sophia
 588: PPUSH
 589: LD_EXP 1
 593: NOT
 594: PPUSH
 595: LD_EXP 2
 599: PPUSH
 600: CALL 6444 0 3
 604: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 605: LD_ADDR_EXP 27
 609: PUSH
 610: LD_STRING Markov
 612: PPUSH
 613: LD_EXP 1
 617: NOT
 618: PPUSH
 619: LD_EXP 2
 623: PPUSH
 624: CALL 6444 0 3
 628: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 629: LD_ADDR_EXP 30
 633: PUSH
 634: LD_STRING Aviradze
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 2
 647: PPUSH
 648: CALL 6444 0 3
 652: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 653: LD_ADDR_EXP 29
 657: PUSH
 658: LD_STRING Kurt
 660: PPUSH
 661: LD_EXP 1
 665: NOT
 666: PPUSH
 667: LD_EXP 2
 671: PPUSH
 672: CALL 6444 0 3
 676: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 677: LD_ADDR_EXP 22
 681: PUSH
 682: LD_STRING Mike
 684: PPUSH
 685: LD_EXP 1
 689: NOT
 690: PPUSH
 691: LD_EXP 2
 695: PPUSH
 696: CALL 6444 0 3
 700: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 701: LD_ADDR_EXP 28
 705: PUSH
 706: LD_STRING Olaf
 708: PPUSH
 709: LD_INT 0
 711: PPUSH
 712: LD_STRING 
 714: PPUSH
 715: CALL 6444 0 3
 719: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 720: LD_ADDR_EXP 31
 724: PUSH
 725: LD_STRING 07_others
 727: PPUSH
 728: CALL_OW 31
 732: ST_TO_ADDR
// end ;
 733: LD_VAR 0 1
 737: RET
// export function PrepareGame ; begin
 738: LD_INT 0
 740: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 741: LD_EXP 20
 745: PPUSH
 746: LD_INT 23
 748: PPUSH
 749: CALL_OW 52
// if Givi then
 753: LD_EXP 21
 757: IFFALSE 795
// begin SetSide ( Givi , 5 ) ;
 759: LD_EXP 21
 763: PPUSH
 764: LD_INT 5
 766: PPUSH
 767: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
 771: LD_EXP 21
 775: PPUSH
 776: LD_INT 9
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// ComHold ( Givi ) ;
 786: LD_EXP 21
 790: PPUSH
 791: CALL_OW 140
// end ; if Markov then
 795: LD_EXP 27
 799: IFFALSE 825
// begin SetSide ( Markov , 5 ) ;
 801: LD_EXP 27
 805: PPUSH
 806: LD_INT 5
 808: PPUSH
 809: CALL_OW 235
// PlaceHumanInUnit ( Markov , ruFac ) ;
 813: LD_EXP 27
 817: PPUSH
 818: LD_INT 61
 820: PPUSH
 821: CALL_OW 52
// end ; if Kamil then
 825: LD_EXP 24
 829: IFFALSE 855
// begin SetSide ( Kamil , 5 ) ;
 831: LD_EXP 24
 835: PPUSH
 836: LD_INT 5
 838: PPUSH
 839: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
 843: LD_EXP 24
 847: PPUSH
 848: LD_INT 109
 850: PPUSH
 851: CALL_OW 52
// end ; end ; end_of_file
 855: LD_VAR 0 1
 859: RET
// export russianKillers ; export function PrepareRussian ; var i , tmp ; begin
 860: LD_INT 0
 862: PPUSH
 863: PPUSH
 864: PPUSH
// uc_side := 3 ;
 865: LD_ADDR_OWVAR 20
 869: PUSH
 870: LD_INT 3
 872: ST_TO_ADDR
// uc_nation := 3 ;
 873: LD_ADDR_OWVAR 21
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_INT 21
 888: PUSH
 889: LD_INT 3
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PPUSH
 896: CALL_OW 69
 900: PUSH
 901: FOR_IN
 902: IFFALSE 918
// SetBLevel ( i , 7 ) ;
 904: LD_VAR 0 2
 908: PPUSH
 909: LD_INT 7
 911: PPUSH
 912: CALL_OW 241
 916: GO 901
 918: POP
 919: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 920: LD_ADDR_VAR 0 2
 924: PUSH
 925: LD_INT 22
 927: PUSH
 928: LD_INT 3
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 2
 937: PUSH
 938: LD_INT 30
 940: PUSH
 941: LD_INT 0
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: LD_INT 30
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: LIST
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PPUSH
 967: CALL_OW 69
 971: PUSH
 972: FOR_IN
 973: IFFALSE 1017
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
 975: LD_VAR 0 2
 979: PPUSH
 980: CALL_OW 274
 984: PPUSH
 985: LD_INT 1
 987: PPUSH
 988: LD_INT 1000
 990: PPUSH
 991: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
 995: LD_VAR 0 2
 999: PPUSH
1000: CALL_OW 274
1004: PPUSH
1005: LD_INT 2
1007: PPUSH
1008: LD_INT 1000
1010: PPUSH
1011: CALL_OW 277
// end ;
1015: GO 972
1017: POP
1018: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1019: LD_ADDR_VAR 0 2
1023: PUSH
1024: LD_INT 22
1026: PUSH
1027: LD_INT 3
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: LD_INT 30
1036: PUSH
1037: LD_INT 32
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PPUSH
1048: CALL_OW 69
1052: PUSH
1053: FOR_IN
1054: IFFALSE 1088
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
1056: LD_INT 0
1058: PPUSH
1059: LD_INT 5
1061: PUSH
1062: LD_OWVAR 67
1066: PLUS
1067: PPUSH
1068: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
1072: CALL_OW 44
1076: PPUSH
1077: LD_VAR 0 2
1081: PPUSH
1082: CALL_OW 52
// end ;
1086: GO 1053
1088: POP
1089: POP
// end ;
1090: LD_VAR 0 1
1094: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
1095: LD_INT 0
1097: PPUSH
1098: PPUSH
1099: PPUSH
1100: PPUSH
// uc_side := 3 ;
1101: LD_ADDR_OWVAR 20
1105: PUSH
1106: LD_INT 3
1108: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
1109: LD_ADDR_OWVAR 21
1113: PUSH
1114: LD_INT 1
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 12
1124: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
1125: LD_ADDR_VAR 0 4
1129: PUSH
1130: LD_INT 5
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 517
1140: ST_TO_ADDR
// for i := 1 to 3 do
1141: LD_ADDR_VAR 0 2
1145: PUSH
1146: DOUBLE
1147: LD_INT 1
1149: DEC
1150: ST_TO_ADDR
1151: LD_INT 3
1153: PUSH
1154: FOR_TO
1155: IFFALSE 1224
// begin PrepareHuman ( false , 33 , 0 ) ;
1157: LD_INT 0
1159: PPUSH
1160: LD_INT 33
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 380
// un := CreateHuman ;
1170: LD_ADDR_VAR 0 3
1174: PUSH
1175: CALL_OW 44
1179: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
1180: LD_VAR 0 3
1184: PPUSH
1185: LD_VAR 0 4
1189: PUSH
1190: LD_INT 1
1192: ARRAY
1193: PUSH
1194: LD_VAR 0 2
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 4
1204: PUSH
1205: LD_INT 2
1207: ARRAY
1208: PUSH
1209: LD_VAR 0 2
1213: ARRAY
1214: PPUSH
1215: LD_INT 1
1217: PPUSH
1218: CALL_OW 601
// end ;
1222: GO 1154
1224: POP
1225: POP
// end ;
1226: LD_VAR 0 1
1230: RET
// export function PrepareFirstScene ; var i , un ; begin
1231: LD_INT 0
1233: PPUSH
1234: PPUSH
1235: PPUSH
// uc_side := 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// uc_nation := 1 ;
1244: LD_ADDR_OWVAR 21
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
1252: LD_INT 0
1254: PPUSH
1255: LD_INT 33
1257: PPUSH
1258: LD_INT 0
1260: PPUSH
1261: CALL_OW 380
// for i := 1 to 2 do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: DOUBLE
1271: LD_INT 1
1273: DEC
1274: ST_TO_ADDR
1275: LD_INT 2
1277: PUSH
1278: FOR_TO
1279: IFFALSE 1344
// begin un := CreateHuman ;
1281: LD_ADDR_VAR 0 3
1285: PUSH
1286: CALL_OW 44
1290: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1291: LD_VAR 0 3
1295: PPUSH
1296: LD_INT 1
1298: PPUSH
1299: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
1303: LD_VAR 0 3
1307: PPUSH
1308: LD_INT 6
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
1318: LD_VAR 0 3
1322: PPUSH
1323: LD_INT 1
1325: PPUSH
1326: CALL 46984 0 2
// SetLives ( un , 300 ) ;
1330: LD_VAR 0 3
1334: PPUSH
1335: LD_INT 300
1337: PPUSH
1338: CALL_OW 234
// end ;
1342: GO 1278
1344: POP
1345: POP
// uc_side := 3 ;
1346: LD_ADDR_OWVAR 20
1350: PUSH
1351: LD_INT 3
1353: ST_TO_ADDR
// uc_nation := 3 ;
1354: LD_ADDR_OWVAR 21
1358: PUSH
1359: LD_INT 3
1361: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
1362: LD_INT 1
1364: PPUSH
1365: LD_INT 5
1367: PPUSH
1368: CALL_OW 381
// for i := 1 to 3 do
1372: LD_ADDR_VAR 0 2
1376: PUSH
1377: DOUBLE
1378: LD_INT 1
1380: DEC
1381: ST_TO_ADDR
1382: LD_INT 3
1384: PUSH
1385: FOR_TO
1386: IFFALSE 1459
// begin un := CreateHuman ;
1388: LD_ADDR_VAR 0 3
1392: PUSH
1393: CALL_OW 44
1397: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
1398: LD_ADDR_EXP 35
1402: PUSH
1403: LD_EXP 35
1407: PPUSH
1408: LD_VAR 0 3
1412: PPUSH
1413: CALL 43828 0 2
1417: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1418: LD_VAR 0 3
1422: PPUSH
1423: LD_INT 4
1425: PPUSH
1426: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
1430: LD_VAR 0 3
1434: PPUSH
1435: LD_INT 7
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
1445: LD_VAR 0 3
1449: PPUSH
1450: LD_INT 4
1452: PPUSH
1453: CALL 46984 0 2
// end ;
1457: GO 1385
1459: POP
1460: POP
// un := CreateHuman ;
1461: LD_ADDR_VAR 0 3
1465: PUSH
1466: CALL_OW 44
1470: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 37 , false ) ;
1471: LD_VAR 0 3
1475: PPUSH
1476: LD_INT 124
1478: PPUSH
1479: LD_INT 37
1481: PPUSH
1482: LD_INT 0
1484: PPUSH
1485: CALL_OW 48
// SetDir ( un , 3 ) ;
1489: LD_VAR 0 3
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL_OW 233
// ComLookAtDir ( un , 3 ) ;
1501: LD_VAR 0 3
1505: PPUSH
1506: LD_INT 3
1508: PPUSH
1509: CALL 46984 0 2
// end ; end_of_file
1513: LD_VAR 0 1
1517: RET
// export function Action ; var speaker , i , tmp ; begin
1518: LD_INT 0
1520: PPUSH
1521: PPUSH
1522: PPUSH
1523: PPUSH
// Video ( true ) ;
1524: LD_INT 1
1526: PPUSH
1527: CALL 43800 0 1
// hasNormalScene := Kaia or Givi ;
1531: LD_ADDR_EXP 5
1535: PUSH
1536: LD_EXP 25
1540: PUSH
1541: LD_EXP 21
1545: OR
1546: ST_TO_ADDR
// if hasNormalScene then
1547: LD_EXP 5
1551: IFFALSE 1786
// begin for i in americanSquad do
1553: LD_ADDR_VAR 0 3
1557: PUSH
1558: LD_EXP 32
1562: PUSH
1563: FOR_IN
1564: IFFALSE 1610
// begin SetClass ( i , 33 ) ;
1566: LD_VAR 0 3
1570: PPUSH
1571: LD_INT 33
1573: PPUSH
1574: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: LD_INT 78
1585: PPUSH
1586: LD_INT 16
1588: PPUSH
1589: LD_INT 5
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL_OW 50
// ComHold ( i ) ;
1599: LD_VAR 0 3
1603: PPUSH
1604: CALL_OW 140
// end ;
1608: GO 1563
1610: POP
1611: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi ] union heikeSecondSquad ;
1612: LD_ADDR_VAR 0 4
1616: PUSH
1617: LD_EXP 22
1621: PUSH
1622: LD_EXP 23
1626: PUSH
1627: LD_EXP 24
1631: PUSH
1632: LD_EXP 25
1636: PUSH
1637: LD_EXP 26
1641: PUSH
1642: LD_EXP 27
1646: PUSH
1647: LD_EXP 28
1651: PUSH
1652: LD_EXP 29
1656: PUSH
1657: LD_EXP 21
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_EXP 31
1677: UNION
1678: ST_TO_ADDR
// SetClass ( Heike , 33 ) ;
1679: LD_EXP 20
1683: PPUSH
1684: LD_INT 33
1686: PPUSH
1687: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
1691: LD_EXP 20
1695: PPUSH
1696: LD_INT 117
1698: PPUSH
1699: LD_INT 24
1701: PPUSH
1702: LD_INT 3
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: CALL 45970 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
1712: LD_EXP 20
1716: PPUSH
1717: LD_INT 123
1719: PPUSH
1720: LD_INT 39
1722: PPUSH
1723: CALL_OW 118
// for i in tmp do
1727: LD_ADDR_VAR 0 3
1731: PUSH
1732: LD_VAR 0 4
1736: PUSH
1737: FOR_IN
1738: IFFALSE 1784
// begin SetClass ( i , 33 ) ;
1740: LD_VAR 0 3
1744: PPUSH
1745: LD_INT 33
1747: PPUSH
1748: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
1752: LD_VAR 0 3
1756: PPUSH
1757: LD_INT 3
1759: PPUSH
1760: LD_INT 0
1762: PPUSH
1763: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 113
1774: PPUSH
1775: LD_INT 16
1777: PPUSH
1778: CALL_OW 118
// end ;
1782: GO 1737
1784: POP
1785: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
1786: LD_INT 124
1788: PPUSH
1789: LD_INT 39
1791: PPUSH
1792: CALL_OW 86
// PrepareDeadBodies ;
1796: CALL 1095 0 0
// PrepareFirstScene ;
1800: CALL 1231 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
1804: LD_INT 152
1806: PPUSH
1807: LD_INT 65
1809: PPUSH
1810: LD_INT 2
1812: PPUSH
1813: LD_INT 70
1815: NEG
1816: PPUSH
1817: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
1821: LD_INT 152
1823: PPUSH
1824: LD_INT 65
1826: PPUSH
1827: LD_INT 2
1829: PPUSH
1830: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
1834: LD_INT 122
1836: PPUSH
1837: LD_INT 40
1839: PPUSH
1840: LD_INT 2
1842: PPUSH
1843: LD_INT 8
1845: NEG
1846: PPUSH
1847: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
1851: LD_INT 124
1853: PPUSH
1854: LD_INT 37
1856: PPUSH
1857: CALL_OW 86
// speaker := HexInfo ( 124 , 37 ) ;
1861: LD_ADDR_VAR 0 2
1865: PUSH
1866: LD_INT 124
1868: PPUSH
1869: LD_INT 37
1871: PPUSH
1872: CALL_OW 428
1876: ST_TO_ADDR
// Say ( speaker , DRum-Execution-1 ) ;
1877: LD_VAR 0 2
1881: PPUSH
1882: LD_STRING DRum-Execution-1
1884: PPUSH
1885: CALL_OW 88
// Say ( speaker , DRum-Execution-2 ) ;
1889: LD_VAR 0 2
1893: PPUSH
1894: LD_STRING DRum-Execution-2
1896: PPUSH
1897: CALL_OW 88
// wait ( 0 0$01 ) ;
1901: LD_INT 35
1903: PPUSH
1904: CALL_OW 67
// Say ( speaker , DRum-Execution-3 ) ;
1908: LD_VAR 0 2
1912: PPUSH
1913: LD_STRING DRum-Execution-3
1915: PPUSH
1916: CALL_OW 88
// wait ( 0 0$1 ) ;
1920: LD_INT 35
1922: PPUSH
1923: CALL_OW 67
// Say ( speaker , DRum-Execution-4 ) ;
1927: LD_VAR 0 2
1931: PPUSH
1932: LD_STRING DRum-Execution-4
1934: PPUSH
1935: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
1939: LD_EXP 35
1943: PUSH
1944: LD_INT 1
1946: ARRAY
1947: PPUSH
1948: LD_INT 122
1950: PPUSH
1951: LD_INT 39
1953: PPUSH
1954: CALL_OW 428
1958: PPUSH
1959: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
1963: LD_EXP 35
1967: PUSH
1968: LD_INT 2
1970: ARRAY
1971: PPUSH
1972: LD_INT 123
1974: PPUSH
1975: LD_INT 41
1977: PPUSH
1978: CALL_OW 428
1982: PPUSH
1983: CALL_OW 115
// AddComHold ( russianKillers ) ;
1987: LD_EXP 35
1991: PPUSH
1992: CALL_OW 200
// wait ( 0 0$1 ) ;
1996: LD_INT 35
1998: PPUSH
1999: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
2003: LD_INT 122
2005: PPUSH
2006: LD_INT 40
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: CALL_OW 331
// if hasNormalScene then
2016: LD_EXP 5
2020: IFFALSE 2028
// ActionNormal else
2022: CALL 2037 0 0
2026: GO 2032
// ActionAdditional ;
2028: CALL 3730 0 0
// end ;
2032: LD_VAR 0 1
2036: RET
// function ActionNormal ; var i , tmp ; begin
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
// CenterNowOnUnits ( Heike ) ;
2042: LD_EXP 20
2046: PPUSH
2047: CALL_OW 87
// wait ( 0 0$1 ) ;
2051: LD_INT 35
2053: PPUSH
2054: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
2058: LD_EXP 20
2062: PPUSH
2063: LD_INT 115
2065: PPUSH
2066: LD_INT 19
2068: PPUSH
2069: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
2073: LD_EXP 20
2077: PPUSH
2078: LD_INT 113
2080: PPUSH
2081: LD_INT 16
2083: PPUSH
2084: CALL_OW 178
// wait ( 0 0$2 ) ;
2088: LD_INT 70
2090: PPUSH
2091: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
2095: LD_EXP 20
2099: PPUSH
2100: LD_STRING DH-Conspiracy-1
2102: PPUSH
2103: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
2107: LD_EXP 25
2111: PPUSH
2112: LD_STRING DK-Conspiracy-2
2114: PPUSH
2115: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
2119: LD_EXP 21
2123: PPUSH
2124: LD_STRING DG-Conspiracy-3
2126: PPUSH
2127: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
2131: LD_EXP 21
2135: PPUSH
2136: LD_STRING DG-Conspiracy-4
2138: PPUSH
2139: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
2143: LD_EXP 20
2147: PPUSH
2148: LD_STRING DH-Conspiracy-5
2150: PPUSH
2151: CALL_OW 88
// if IsOk ( Kamil ) then
2155: LD_EXP 24
2159: PPUSH
2160: CALL_OW 302
2164: IFFALSE 2222
// begin hasVodka := true ;
2166: LD_ADDR_EXP 4
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
2174: LD_EXP 24
2178: PPUSH
2179: LD_STRING DKam-Conspiracy-6
2181: PPUSH
2182: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
2186: LD_EXP 24
2190: PPUSH
2191: LD_STRING DKam-Conspiracy-7
2193: PPUSH
2194: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
2198: LD_EXP 24
2202: PPUSH
2203: LD_STRING DKam-Conspiracy-8
2205: PPUSH
2206: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
2210: LD_EXP 24
2214: PPUSH
2215: LD_STRING DKam-Conspiracy-9
2217: PPUSH
2218: CALL_OW 88
// end ; if IsOk ( Sophia ) then
2222: LD_EXP 26
2226: PPUSH
2227: CALL_OW 302
2231: IFFALSE 2405
// begin americanContact := true ;
2233: LD_ADDR_EXP 9
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// Say ( Sophia , DS-Conspiracy-10 ) ;
2241: LD_EXP 26
2245: PPUSH
2246: LD_STRING DS-Conspiracy-10
2248: PPUSH
2249: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
2253: LD_EXP 27
2257: PPUSH
2258: LD_STRING DM-Conspiracy-11
2260: PPUSH
2261: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
2265: LD_EXP 26
2269: PPUSH
2270: LD_STRING DS-Conspiracy-12
2272: PPUSH
2273: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
2277: LD_INT 84
2279: PPUSH
2280: LD_INT 19
2282: PPUSH
2283: LD_INT 105
2285: PPUSH
2286: CALL 5803 0 3
// if johnnySaved then
2290: LD_EXP 3
2294: IFFALSE 2334
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
2296: LD_EXP 26
2300: PPUSH
2301: LD_STRING DS-Conspiracy-13
2303: PPUSH
2304: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
2308: LD_EXP 20
2312: PPUSH
2313: LD_STRING DH-Conspiracy-14
2315: PPUSH
2316: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
2320: LD_EXP 26
2324: PPUSH
2325: LD_STRING DH-Conspiracy-15
2327: PPUSH
2328: CALL_OW 88
// end else
2332: GO 2370
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
2334: LD_EXP 26
2338: PPUSH
2339: LD_STRING DS-Conspiracy-a-13
2341: PPUSH
2342: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
2346: LD_EXP 20
2350: PPUSH
2351: LD_STRING DH-Conspiracy-a-14
2353: PPUSH
2354: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
2358: LD_EXP 26
2362: PPUSH
2363: LD_STRING DH-Conspiracy-a-15
2365: PPUSH
2366: CALL_OW 88
// end ; if IsOk ( Givi ) then
2370: LD_EXP 21
2374: PPUSH
2375: CALL_OW 302
2379: IFFALSE 2405
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
2381: LD_EXP 21
2385: PPUSH
2386: LD_STRING DG-Conspiracy-a-16
2388: PPUSH
2389: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
2393: LD_EXP 20
2397: PPUSH
2398: LD_STRING DH-Conspiracy-a-17
2400: PPUSH
2401: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
2405: LD_EXP 20
2409: PPUSH
2410: LD_STRING DH-Conspiracy-16
2412: PPUSH
2413: CALL_OW 88
// if IsOk ( Givi ) then
2417: LD_EXP 21
2421: PPUSH
2422: CALL_OW 302
2426: IFFALSE 2684
// begin hasStimDrugs := true ;
2428: LD_ADDR_EXP 8
2432: PUSH
2433: LD_INT 1
2435: ST_TO_ADDR
// Say ( Givi , DG-Conspiracy-17 ) ;
2436: LD_EXP 21
2440: PPUSH
2441: LD_STRING DG-Conspiracy-17
2443: PPUSH
2444: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
2448: LD_INT 87
2450: PPUSH
2451: LD_INT 2
2453: PPUSH
2454: CALL_OW 235
// ShowPlace ( 184 , 95 , 0 0$3 ) ;
2458: LD_INT 184
2460: PPUSH
2461: LD_INT 95
2463: PPUSH
2464: LD_INT 105
2466: PPUSH
2467: CALL 5803 0 3
// SetSide ( drugsLab , 3 ) ;
2471: LD_INT 87
2473: PPUSH
2474: LD_INT 3
2476: PPUSH
2477: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
2481: LD_EXP 21
2485: PPUSH
2486: LD_STRING DG-Conspiracy-18
2488: PPUSH
2489: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
2493: LD_EXP 21
2497: PPUSH
2498: LD_STRING DG-Conspiracy-19
2500: PPUSH
2501: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
2505: LD_EXP 21
2509: PPUSH
2510: LD_STRING DG-Conspiracy-20
2512: PPUSH
2513: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
2517: LD_EXP 20
2521: PPUSH
2522: LD_STRING DH-Conspiracy-21
2524: PPUSH
2525: CALL_OW 88
// if IsOk ( Kaia ) then
2529: LD_EXP 25
2533: PPUSH
2534: CALL_OW 302
2538: IFFALSE 2605
// begin hasExplosions := true ;
2540: LD_ADDR_EXP 6
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-22 ) ;
2548: LD_EXP 25
2552: PPUSH
2553: LD_STRING DK-Conspiracy-22
2555: PPUSH
2556: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
2560: LD_INT 73
2562: PPUSH
2563: LD_INT 2
2565: PPUSH
2566: CALL_OW 235
// ShowPlace ( 166 , 104 , 0 0$3 ) ;
2570: LD_INT 166
2572: PPUSH
2573: LD_INT 104
2575: PPUSH
2576: LD_INT 105
2578: PPUSH
2579: CALL 5803 0 3
// SetSide ( barExplosion , 3 ) ;
2583: LD_INT 73
2585: PPUSH
2586: LD_INT 3
2588: PPUSH
2589: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
2593: LD_EXP 25
2597: PPUSH
2598: LD_STRING DK-Conspiracy-23
2600: PPUSH
2601: CALL_OW 88
// end ; if IsOk ( Olaf ) then
2605: LD_EXP 28
2609: PPUSH
2610: CALL_OW 302
2614: IFFALSE 2684
// begin hasExplosionsInFactory := true ;
2616: LD_ADDR_EXP 7
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
2624: LD_EXP 28
2628: PPUSH
2629: LD_STRING DO-Conspiracy-24
2631: PPUSH
2632: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
2636: LD_INT 175
2638: PPUSH
2639: LD_INT 54
2641: PPUSH
2642: LD_INT 70
2644: PPUSH
2645: CALL 5803 0 3
// if IsOk ( Markov ) then
2649: LD_EXP 27
2653: PPUSH
2654: CALL_OW 302
2658: IFFALSE 2684
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
2660: LD_EXP 27
2664: PPUSH
2665: LD_STRING DMar-Conspiracy-25
2667: PPUSH
2668: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
2672: LD_EXP 27
2676: PPUSH
2677: LD_STRING DMar-Conspiracy-26
2679: PPUSH
2680: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
2684: LD_EXP 29
2688: PPUSH
2689: CALL_OW 302
2693: PUSH
2694: LD_EXP 25
2698: PPUSH
2699: CALL_OW 302
2703: AND
2704: IFFALSE 3120
// begin hasSniperRifle := true ;
2706: LD_ADDR_EXP 10
2710: PUSH
2711: LD_INT 1
2713: ST_TO_ADDR
// Say ( Kurt , DKs-Conspiracy-27 ) ;
2714: LD_EXP 29
2718: PPUSH
2719: LD_STRING DKs-Conspiracy-27
2721: PPUSH
2722: CALL_OW 88
// if IsOk ( Givi ) then
2726: LD_EXP 21
2730: PPUSH
2731: CALL_OW 302
2735: IFFALSE 2751
// Say ( Givi , DG-Conspiracy-28 ) else
2737: LD_EXP 21
2741: PPUSH
2742: LD_STRING DG-Conspiracy-28
2744: PPUSH
2745: CALL_OW 88
2749: GO 2816
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
2751: LD_EXP 31
2755: PPUSH
2756: LD_INT 26
2758: PUSH
2759: LD_INT 1
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PPUSH
2766: CALL_OW 72
2770: PUSH
2771: LD_INT 1
2773: ARRAY
2774: PPUSH
2775: LD_STRING DArm-Conspiracy-a-28
2777: PPUSH
2778: CALL_OW 88
2782: NOT
2783: IFFALSE 2816
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
2785: LD_EXP 31
2789: PPUSH
2790: LD_INT 26
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 72
2804: PUSH
2805: LD_INT 1
2807: ARRAY
2808: PPUSH
2809: LD_STRING DArf-Conspiracy-a-28
2811: PPUSH
2812: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
2816: LD_EXP 29
2820: PPUSH
2821: LD_STRING DKs-Conspiracy-29
2823: PPUSH
2824: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-30 ) ;
2828: LD_EXP 29
2832: PPUSH
2833: LD_STRING DKs-Conspiracy-30
2835: PPUSH
2836: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
2840: LD_EXP 25
2844: PPUSH
2845: LD_STRING DK-Conspiracy-31
2847: PPUSH
2848: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
2852: LD_EXP 27
2856: PPUSH
2857: LD_STRING DMar-Conspiracy-33
2859: PPUSH
2860: CALL_OW 88
2864: NOT
2865: PUSH
2866: LD_EXP 31
2870: AND
2871: IFFALSE 2938
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
2873: LD_EXP 31
2877: PPUSH
2878: LD_INT 26
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 72
2892: PUSH
2893: LD_INT 1
2895: ARRAY
2896: PPUSH
2897: LD_STRING DArm-Conspiracy-a-34
2899: PPUSH
2900: CALL_OW 88
2904: NOT
2905: IFFALSE 2938
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
2907: LD_EXP 31
2911: PPUSH
2912: LD_INT 26
2914: PUSH
2915: LD_INT 2
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PPUSH
2922: CALL_OW 72
2926: PUSH
2927: LD_INT 1
2929: ARRAY
2930: PPUSH
2931: LD_STRING DArf-Conspiracy-a-34
2933: PPUSH
2934: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
2938: LD_EXP 25
2942: PPUSH
2943: LD_STRING DK-Conspiracy-34
2945: PPUSH
2946: CALL_OW 88
// if IsOk ( Markov ) then
2950: LD_EXP 27
2954: PPUSH
2955: CALL_OW 302
2959: IFFALSE 3036
// begin Say ( Markov , DMar-Conspiracy-35 ) ;
2961: LD_EXP 27
2965: PPUSH
2966: LD_STRING DMar-Conspiracy-35
2968: PPUSH
2969: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
2973: LD_EXP 25
2977: PPUSH
2978: LD_STRING DK-Conspiracy-36
2980: PPUSH
2981: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
2985: LD_EXP 27
2989: PPUSH
2990: LD_STRING DMar-Conspiracy-37
2992: PPUSH
2993: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
2997: LD_EXP 27
3001: PPUSH
3002: LD_STRING DMar-Conspiracy-38
3004: PPUSH
3005: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
3009: LD_INT 137
3011: PPUSH
3012: LD_INT 98
3014: PPUSH
3015: LD_INT 105
3017: PPUSH
3018: CALL 5803 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
3022: LD_EXP 27
3026: PPUSH
3027: LD_STRING DMar-Conspiracy-39
3029: PPUSH
3030: CALL_OW 88
// end else
3034: GO 3120
// if heikeSecondSquad then
3036: LD_EXP 31
3040: IFFALSE 3120
// begin ShowPlace ( 137 , 98 , 0 0$3 ) ;
3042: LD_INT 137
3044: PPUSH
3045: LD_INT 98
3047: PPUSH
3048: LD_INT 105
3050: PPUSH
3051: CALL 5803 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
3055: LD_EXP 31
3059: PPUSH
3060: LD_INT 26
3062: PUSH
3063: LD_INT 1
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PPUSH
3070: CALL_OW 72
3074: PUSH
3075: LD_INT 1
3077: ARRAY
3078: PPUSH
3079: LD_STRING DArm-Conspiracy-a-35
3081: PPUSH
3082: CALL_OW 88
3086: NOT
3087: IFFALSE 3120
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
3089: LD_EXP 31
3093: PPUSH
3094: LD_INT 26
3096: PUSH
3097: LD_INT 2
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PPUSH
3104: CALL_OW 72
3108: PUSH
3109: LD_INT 1
3111: ARRAY
3112: PPUSH
3113: LD_STRING DArf-Conspiracy-a-35
3115: PPUSH
3116: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
3120: LD_EXP 20
3124: PPUSH
3125: LD_STRING DH-Conspiracy-40
3127: PPUSH
3128: CALL_OW 88
// if IsOk ( Mike ) then
3132: LD_EXP 22
3136: PPUSH
3137: CALL_OW 302
3141: IFFALSE 3200
// begin hasScout := true ;
3143: LD_ADDR_EXP 11
3147: PUSH
3148: LD_INT 1
3150: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
3151: LD_EXP 22
3155: PPUSH
3156: LD_STRING DM-Conspiracy-41
3158: PPUSH
3159: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
3163: LD_EXP 22
3167: PPUSH
3168: LD_STRING DM-Conspiracy-42
3170: PPUSH
3171: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
3175: LD_INT 73
3177: PPUSH
3178: LD_INT 102
3180: PPUSH
3181: LD_INT 105
3183: PPUSH
3184: CALL 5803 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
3188: LD_EXP 22
3192: PPUSH
3193: LD_STRING DM-Conspiracy-43
3195: PPUSH
3196: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
3200: LD_EXP 4
3204: PUSH
3205: LD_EXP 25
3209: PPUSH
3210: CALL_OW 302
3214: AND
3215: PUSH
3216: LD_EXP 29
3220: PPUSH
3221: CALL_OW 302
3225: AND
3226: IFFALSE 3272
// begin hasMethanol := true ;
3228: LD_ADDR_EXP 12
3232: PUSH
3233: LD_INT 1
3235: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
3236: LD_EXP 25
3240: PPUSH
3241: LD_STRING DK-Conspiracy-44
3243: PPUSH
3244: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
3248: LD_EXP 25
3252: PPUSH
3253: LD_STRING DK-Conspiracy-45
3255: PPUSH
3256: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
3260: LD_EXP 24
3264: PPUSH
3265: LD_STRING DKam-Conspiracy-46
3267: PPUSH
3268: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
3272: LD_EXP 20
3276: PPUSH
3277: LD_STRING DH-Conspiracy-47
3279: PPUSH
3280: CALL_OW 88
// wait ( 0 0$1 ) ;
3284: LD_INT 35
3286: PPUSH
3287: CALL_OW 67
// your_side := 8 ;
3291: LD_ADDR_OWVAR 2
3295: PUSH
3296: LD_INT 8
3298: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
3299: LD_INT 1
3301: PPUSH
3302: LD_INT 1
3304: PPUSH
3305: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
3309: LD_ADDR_VAR 0 2
3313: PUSH
3314: LD_INT 22
3316: PUSH
3317: LD_INT 2
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: LD_INT 21
3326: PUSH
3327: LD_INT 1
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PPUSH
3338: CALL_OW 69
3342: PUSH
3343: FOR_IN
3344: IFFALSE 3357
// RemoveUnit ( i ) ;
3346: LD_VAR 0 2
3350: PPUSH
3351: CALL_OW 64
3355: GO 3343
3357: POP
3358: POP
// wait ( 0 0$0.3 ) ;
3359: LD_INT 10
3361: PPUSH
3362: CALL_OW 67
// Query ( StartInfo1 ) ;
3366: LD_STRING StartInfo1
3368: PPUSH
3369: CALL_OW 97
// wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
3380: LD_STRING colors_night.txt
3382: PPUSH
3383: CALL_OW 544
// Query ( StartInfo2 ) ;
3387: LD_STRING StartInfo2
3389: PPUSH
3390: CALL_OW 97
// PrepareGame ;
3394: CALL 738 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3398: LD_INT 152
3400: PPUSH
3401: LD_INT 65
3403: PPUSH
3404: LD_INT 2
3406: PPUSH
3407: LD_INT 70
3409: NEG
3410: PPUSH
3411: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3415: LD_INT 152
3417: PPUSH
3418: LD_INT 65
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
3428: LD_INT 133
3430: PPUSH
3431: LD_INT 76
3433: PPUSH
3434: LD_INT 2
3436: PPUSH
3437: LD_INT 6
3439: NEG
3440: PPUSH
3441: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
3445: LD_INT 152
3447: PPUSH
3448: LD_INT 65
3450: PPUSH
3451: LD_INT 8
3453: PPUSH
3454: LD_INT 70
3456: NEG
3457: PPUSH
3458: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
3462: LD_INT 152
3464: PPUSH
3465: LD_INT 65
3467: PPUSH
3468: LD_INT 8
3470: PPUSH
3471: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
3475: LD_INT 133
3477: PPUSH
3478: LD_INT 76
3480: PPUSH
3481: LD_INT 8
3483: PPUSH
3484: LD_INT 6
3486: NEG
3487: PPUSH
3488: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
3492: LD_INT 23
3494: PPUSH
3495: CALL_OW 87
// dialogue_skipped := false ;
3499: LD_ADDR_OWVAR 59
3503: PUSH
3504: LD_INT 0
3506: ST_TO_ADDR
// Say ( Heike , DH-Escape-1 ) ;
3507: LD_EXP 20
3511: PPUSH
3512: LD_STRING DH-Escape-1
3514: PPUSH
3515: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
3519: LD_EXP 20
3523: PPUSH
3524: LD_STRING DH-Escape-2
3526: PPUSH
3527: CALL_OW 88
// StartLockerMinigame ;
3531: CALL 6107 0 0
// Say ( Heike , DH-Escape-4 ) ;
3535: LD_EXP 20
3539: PPUSH
3540: LD_STRING DH-Escape-4
3542: PPUSH
3543: CALL_OW 88
// wait ( 0 0$3 ) ;
3547: LD_INT 105
3549: PPUSH
3550: CALL_OW 67
// your_side := 2 ;
3554: LD_ADDR_OWVAR 2
3558: PUSH
3559: LD_INT 2
3561: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
3562: LD_EXP 20
3566: PPUSH
3567: CALL_OW 122
// AddComMoveXY ( Heike , 128 , 64 ) ;
3571: LD_EXP 20
3575: PPUSH
3576: LD_INT 128
3578: PPUSH
3579: LD_INT 64
3581: PPUSH
3582: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
3593: LD_EXP 20
3597: PPUSH
3598: LD_INT 128
3600: PPUSH
3601: LD_INT 64
3603: PPUSH
3604: CALL_OW 307
3608: IFFALSE 3586
// ComHold ( Heike ) ;
3610: LD_EXP 20
3614: PPUSH
3615: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
3619: LD_EXP 20
3623: PPUSH
3624: LD_STRING DH-Start-1
3626: PPUSH
3627: CALL_OW 88
// if not americanContact then
3631: LD_EXP 9
3635: NOT
3636: IFFALSE 3652
// Say ( Heike , DH-Start-c-2 ) else
3638: LD_EXP 20
3642: PPUSH
3643: LD_STRING DH-Start-c-2
3645: PPUSH
3646: CALL_OW 88
3650: GO 3684
// if johnnySaved then
3652: LD_EXP 3
3656: IFFALSE 3672
// Say ( Heike , DH-Start-a-2 ) else
3658: LD_EXP 20
3662: PPUSH
3663: LD_STRING DH-Start-a-2
3665: PPUSH
3666: CALL_OW 88
3670: GO 3684
// Say ( Heike , DH-Start-b-2 ) ;
3672: LD_EXP 20
3676: PPUSH
3677: LD_STRING DH-Start-b-2
3679: PPUSH
3680: CALL_OW 88
// Video ( false ) ;
3684: LD_INT 0
3686: PPUSH
3687: CALL 43800 0 1
// tick := 0 ;
3691: LD_ADDR_OWVAR 1
3695: PUSH
3696: LD_INT 0
3698: ST_TO_ADDR
// if americanContact then
3699: LD_EXP 9
3703: IFFALSE 3714
// ChangeMissionObjectives ( M1a ) else
3705: LD_STRING M1a
3707: PPUSH
3708: CALL_OW 337
3712: GO 3721
// ChangeMissionObjectives ( M1 ) ;
3714: LD_STRING M1
3716: PPUSH
3717: CALL_OW 337
// SaveForQuickRestart ;
3721: CALL_OW 22
// end ;
3725: LD_VAR 0 1
3729: RET
// function ActionAdditional ; var i , un , tmp ; begin
3730: LD_INT 0
3732: PPUSH
3733: PPUSH
3734: PPUSH
3735: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
3736: LD_INT 115
3738: PPUSH
3739: LD_INT 27
3741: PPUSH
3742: LD_INT 2
3744: PPUSH
3745: LD_INT 6
3747: NEG
3748: PPUSH
3749: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
3753: LD_EXP 20
3757: PPUSH
3758: LD_INT 115
3760: PPUSH
3761: LD_INT 27
3763: PPUSH
3764: CALL_OW 428
3768: PPUSH
3769: CALL_OW 52
// SetClass ( Heike , 33 ) ;
3773: LD_EXP 20
3777: PPUSH
3778: LD_INT 33
3780: PPUSH
3781: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
3785: LD_INT 124
3787: PPUSH
3788: LD_INT 39
3790: PPUSH
3791: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
3795: LD_EXP 20
3799: PPUSH
3800: LD_STRING DH-Fail-1
3802: PPUSH
3803: CALL_OW 88
// RaiseSailEvent ( eventCenterCamOnHeike ) ;
3807: LD_EXP 18
3811: PPUSH
3812: CALL_OW 427
// ComExit ( Heike ) ;
3816: LD_EXP 20
3820: PPUSH
3821: CALL 44226 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
3825: LD_EXP 20
3829: PPUSH
3830: LD_INT 109
3832: PPUSH
3833: LD_INT 33
3835: PPUSH
3836: CALL_OW 171
// AddComHold ( Heike ) ;
3840: LD_EXP 20
3844: PPUSH
3845: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
3849: LD_INT 115
3851: PPUSH
3852: LD_INT 27
3854: PPUSH
3855: LD_INT 2
3857: PPUSH
3858: CALL_OW 331
// wait ( 0 0$2 ) ;
3862: LD_INT 70
3864: PPUSH
3865: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
3876: LD_EXP 20
3880: PPUSH
3881: LD_INT 109
3883: PPUSH
3884: LD_INT 33
3886: PPUSH
3887: CALL_OW 307
3891: IFFALSE 3869
// Say ( Heike , DH-Fail-2 ) ;
3893: LD_EXP 20
3897: PPUSH
3898: LD_STRING DH-Fail-2
3900: PPUSH
3901: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
3905: LD_EXP 20
3909: PPUSH
3910: LD_INT 111
3912: PPUSH
3913: LD_INT 48
3915: PPUSH
3916: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3920: LD_INT 35
3922: PPUSH
3923: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
3927: LD_EXP 20
3931: PPUSH
3932: LD_INT 111
3934: PPUSH
3935: LD_INT 48
3937: PPUSH
3938: CALL_OW 297
3942: PUSH
3943: LD_INT 4
3945: LESS
3946: IFFALSE 3920
// AddComMoveXY ( Heike , 106 , 72 ) ;
3948: LD_EXP 20
3952: PPUSH
3953: LD_INT 106
3955: PPUSH
3956: LD_INT 72
3958: PPUSH
3959: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
3963: LD_EXP 20
3967: PPUSH
3968: LD_INT 103
3970: PPUSH
3971: LD_INT 80
3973: PPUSH
3974: CALL_OW 171
// uc_side := 3 ;
3978: LD_ADDR_OWVAR 20
3982: PUSH
3983: LD_INT 3
3985: ST_TO_ADDR
// uc_nation := 3 ;
3986: LD_ADDR_OWVAR 21
3990: PUSH
3991: LD_INT 3
3993: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
3994: LD_INT 1
3996: PPUSH
3997: LD_INT 1
3999: PPUSH
4000: LD_INT 6
4002: PPUSH
4003: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
4007: LD_ADDR_OWVAR 29
4011: PUSH
4012: LD_INT 12
4014: PUSH
4015: LD_INT 12
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: ST_TO_ADDR
// un := CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: CALL_OW 44
4031: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 134
4039: PPUSH
4040: LD_INT 52
4042: PPUSH
4043: LD_INT 4
4045: PPUSH
4046: LD_INT 0
4048: PPUSH
4049: CALL 45970 0 5
// ComTurnUnit ( un , Heike ) ;
4053: LD_VAR 0 3
4057: PPUSH
4058: LD_EXP 20
4062: PPUSH
4063: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
4067: LD_VAR 0 3
4071: PPUSH
4072: LD_EXP 20
4076: PPUSH
4077: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
4081: LD_VAR 0 3
4085: PPUSH
4086: LD_STRING DRum-Fail-3
4088: PPUSH
4089: CALL_OW 88
// for i := 1 to 3 do
4093: LD_ADDR_VAR 0 2
4097: PUSH
4098: DOUBLE
4099: LD_INT 1
4101: DEC
4102: ST_TO_ADDR
4103: LD_INT 3
4105: PUSH
4106: FOR_TO
4107: IFFALSE 4180
// begin PrepareSoldier ( false , 10 ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_INT 10
4114: PPUSH
4115: CALL_OW 381
// un := CreateHuman ;
4119: LD_ADDR_VAR 0 3
4123: PUSH
4124: CALL_OW 44
4128: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
4129: LD_ADDR_VAR 0 4
4133: PUSH
4134: LD_VAR 0 4
4138: PPUSH
4139: LD_VAR 0 3
4143: PPUSH
4144: CALL 43828 0 2
4148: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
4149: LD_VAR 0 3
4153: PPUSH
4154: LD_INT 8
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
4164: LD_VAR 0 3
4168: PPUSH
4169: LD_EXP 20
4173: PPUSH
4174: CALL_OW 119
// end ;
4178: GO 4106
4180: POP
4181: POP
// repeat wait ( 0 0$1 ) ;
4182: LD_INT 35
4184: PPUSH
4185: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
4189: LD_VAR 0 4
4193: PPUSH
4194: LD_INT 101
4196: PUSH
4197: LD_INT 2
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 72
4208: PUSH
4209: LD_INT 1
4211: GREATER
4212: IFFALSE 4182
// wait ( 0 0$1 ) ;
4214: LD_INT 35
4216: PPUSH
4217: CALL_OW 67
// DialogueOn ;
4221: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
4225: LD_EXP 20
4229: PPUSH
4230: LD_STRING DH-Fail-4
4232: PPUSH
4233: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
4237: LD_EXP 20
4241: PPUSH
4242: LD_STRING DH-Fail-5
4244: PPUSH
4245: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
4249: LD_EXP 20
4253: PPUSH
4254: LD_STRING DH-Fail-6
4256: PPUSH
4257: CALL_OW 88
// DialogueOff ;
4261: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
4265: LD_VAR 0 4
4269: PPUSH
4270: LD_EXP 20
4274: PPUSH
4275: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
4279: LD_INT 35
4281: PPUSH
4282: CALL_OW 67
// until IsDying ( Heike ) ;
4286: LD_EXP 20
4290: PPUSH
4291: CALL_OW 303
4295: IFFALSE 4279
// KillUnit ( Heike ) ;
4297: LD_EXP 20
4301: PPUSH
4302: CALL_OW 66
// wait ( 0 0$4 ) ;
4306: LD_INT 140
4308: PPUSH
4309: CALL_OW 67
// ResetFog ;
4313: CALL_OW 335
// DialogueOn ;
4317: CALL_OW 6
// dwait ( 0 0$1 ) ;
4321: LD_INT 35
4323: PPUSH
4324: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
4328: LD_ADDR_EXP 20
4332: PUSH
4333: LD_STRING Heike
4335: PPUSH
4336: LD_EXP 1
4340: NOT
4341: PPUSH
4342: LD_EXP 2
4346: PPUSH
4347: CALL 6444 0 3
4351: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
4352: LD_EXP 20
4356: PPUSH
4357: LD_STRING DH-Fail-7
4359: PPUSH
4360: CALL_OW 89
// DialogueOff ;
4364: CALL_OW 7
// YouLost ( Fail ) ;
4368: LD_STRING Fail
4370: PPUSH
4371: CALL_OW 104
// end ;
4375: LD_VAR 0 1
4379: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 do
4380: LD_INT 2
4382: PPUSH
4383: LD_INT 173
4385: PPUSH
4386: LD_INT 29
4388: PPUSH
4389: CALL_OW 293
4393: PUSH
4394: LD_EXP 20
4398: PPUSH
4399: LD_INT 173
4401: PPUSH
4402: LD_INT 29
4404: PPUSH
4405: CALL_OW 297
4409: PUSH
4410: LD_INT 6
4412: LESS
4413: AND
4414: IFFALSE 4431
4416: GO 4418
4418: DISABLE
// Say ( Heike , DH-EastRoad ) ;
4419: LD_EXP 20
4423: PPUSH
4424: LD_STRING DH-EastRoad
4426: PPUSH
4427: CALL_OW 88
4431: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 do
4432: LD_INT 2
4434: PPUSH
4435: LD_INT 217
4437: PPUSH
4438: LD_INT 120
4440: PPUSH
4441: CALL_OW 293
4445: PUSH
4446: LD_EXP 20
4450: PPUSH
4451: LD_INT 217
4453: PPUSH
4454: LD_INT 120
4456: PPUSH
4457: CALL_OW 297
4461: PUSH
4462: LD_INT 6
4464: LESS
4465: AND
4466: IFFALSE 4483
4468: GO 4470
4470: DISABLE
// Say ( Heike , DH-EastEnd ) ;
4471: LD_EXP 20
4475: PPUSH
4476: LD_STRING DH-EastEnd
4478: PPUSH
4479: CALL_OW 88
4483: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) do
4484: LD_EXP 20
4488: PPUSH
4489: LD_INT 11
4491: PPUSH
4492: CALL_OW 308
4496: IFFALSE 4534
4498: GO 4500
4500: DISABLE
// begin if not heikeSquad then
4501: LD_EXP 13
4505: NOT
4506: IFFALSE 4522
// Say ( Heike , DH-Hill ) else
4508: LD_EXP 20
4512: PPUSH
4513: LD_STRING DH-Hill
4515: PPUSH
4516: CALL_OW 88
4520: GO 4534
// Say ( Heike , DH-Hill-a ) ;
4522: LD_EXP 20
4526: PPUSH
4527: LD_STRING DH-Hill-a
4529: PPUSH
4530: CALL_OW 88
// end ;
4534: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) do var x , y , v ;
4535: LD_EXP 20
4539: PPUSH
4540: LD_INT 12
4542: PPUSH
4543: CALL_OW 308
4547: IFFALSE 4729
4549: GO 4551
4551: DISABLE
4552: LD_INT 0
4554: PPUSH
4555: PPUSH
4556: PPUSH
// begin DialogueOn ;
4557: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
4561: LD_EXP 20
4565: PPUSH
4566: CALL_OW 87
// x := GetX ( Heike ) ;
4570: LD_ADDR_VAR 0 1
4574: PUSH
4575: LD_EXP 20
4579: PPUSH
4580: CALL_OW 250
4584: ST_TO_ADDR
// y := GetY ( Heike ) ;
4585: LD_ADDR_VAR 0 2
4589: PUSH
4590: LD_EXP 20
4594: PPUSH
4595: CALL_OW 251
4599: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
4600: LD_VAR 0 1
4604: PPUSH
4605: LD_VAR 0 2
4609: PPUSH
4610: LD_INT 2
4612: PPUSH
4613: LD_INT 12
4615: NEG
4616: PPUSH
4617: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
4621: LD_VAR 0 1
4625: PPUSH
4626: LD_VAR 0 2
4630: PPUSH
4631: LD_INT 2
4633: PPUSH
4634: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
4638: LD_INT 2
4640: PUSH
4641: LD_INT 30
4643: PUSH
4644: LD_INT 32
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 30
4653: PUSH
4654: LD_INT 33
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: LIST
4665: PPUSH
4666: CALL_OW 69
4670: IFFALSE 4682
// v := 3 else
4672: LD_ADDR_VAR 0 3
4676: PUSH
4677: LD_INT 3
4679: ST_TO_ADDR
4680: GO 4690
// v := 2 ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_INT 2
4689: ST_TO_ADDR
// disable ;
4690: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
4691: LD_EXP 20
4695: PPUSH
4696: LD_STRING DH-Outpost-
4698: PUSH
4699: LD_INT 1
4701: PPUSH
4702: LD_VAR 0 3
4706: PPUSH
4707: CALL_OW 12
4711: STR
4712: PPUSH
4713: CALL_OW 88
// DialogueOff ;
4717: CALL_OW 7
// wait ( 0 0$10 ) ;
4721: LD_INT 350
4723: PPUSH
4724: CALL_OW 67
// enable ;
4728: ENABLE
// end ;
4729: PPOPN 3
4731: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 or AreInTheSameBuilding ( Givi , Heike ) do
4732: LD_INT 2
4734: PPUSH
4735: LD_EXP 21
4739: PPUSH
4740: CALL_OW 292
4744: PUSH
4745: LD_EXP 20
4749: PPUSH
4750: LD_EXP 21
4754: PPUSH
4755: CALL_OW 296
4759: PUSH
4760: LD_INT 6
4762: LESS
4763: AND
4764: PUSH
4765: LD_EXP 21
4769: PPUSH
4770: LD_EXP 20
4774: PPUSH
4775: CALL 5741 0 2
4779: OR
4780: IFFALSE 4858
4782: GO 4784
4784: DISABLE
// begin DialogueOn ;
4785: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
4789: LD_EXP 21
4793: PPUSH
4794: CALL_OW 87
// Say ( Heike , DH-Givi-1 ) ;
4798: LD_EXP 20
4802: PPUSH
4803: LD_STRING DH-Givi-1
4805: PPUSH
4806: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
4810: LD_EXP 21
4814: PPUSH
4815: LD_STRING DG-Givi-2
4817: PPUSH
4818: CALL_OW 88
// DialogueOff ;
4822: CALL_OW 7
// SetSide ( Givi , 2 ) ;
4826: LD_EXP 21
4830: PPUSH
4831: LD_INT 2
4833: PPUSH
4834: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
4838: LD_ADDR_EXP 13
4842: PUSH
4843: LD_EXP 13
4847: PPUSH
4848: LD_EXP 21
4852: PPUSH
4853: CALL 43828 0 2
4857: ST_TO_ADDR
// end ;
4858: END
// function SayHEmpty ( ) ; begin
4859: LD_INT 0
4861: PPUSH
// case rand ( 1 , 3 ) of 1 :
4862: LD_INT 1
4864: PPUSH
4865: LD_INT 3
4867: PPUSH
4868: CALL_OW 12
4872: PUSH
4873: LD_INT 1
4875: DOUBLE
4876: EQUAL
4877: IFTRUE 4881
4879: GO 4896
4881: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
4882: LD_EXP 20
4886: PPUSH
4887: LD_STRING DH-Empty-1
4889: PPUSH
4890: CALL_OW 88
4894: GO 4943
4896: LD_INT 2
4898: DOUBLE
4899: EQUAL
4900: IFTRUE 4904
4902: GO 4919
4904: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
4905: LD_EXP 20
4909: PPUSH
4910: LD_STRING DH-Empty-2
4912: PPUSH
4913: CALL_OW 88
4917: GO 4943
4919: LD_INT 3
4921: DOUBLE
4922: EQUAL
4923: IFTRUE 4927
4925: GO 4942
4927: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
4928: LD_EXP 20
4932: PPUSH
4933: LD_STRING DH-Empty-3
4935: PPUSH
4936: CALL_OW 88
4940: GO 4943
4942: POP
// end ;
4943: LD_VAR 0 1
4947: RET
// function SayHVisited ( ) ; begin
4948: LD_INT 0
4950: PPUSH
// case rand ( 1 , 3 ) of 1 :
4951: LD_INT 1
4953: PPUSH
4954: LD_INT 3
4956: PPUSH
4957: CALL_OW 12
4961: PUSH
4962: LD_INT 1
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 4970
4968: GO 4985
4970: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
4971: LD_EXP 20
4975: PPUSH
4976: LD_STRING DH-Visited-1
4978: PPUSH
4979: CALL_OW 88
4983: GO 5032
4985: LD_INT 2
4987: DOUBLE
4988: EQUAL
4989: IFTRUE 4993
4991: GO 5008
4993: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
4994: LD_EXP 20
4998: PPUSH
4999: LD_STRING DH-Visited-2
5001: PPUSH
5002: CALL_OW 88
5006: GO 5032
5008: LD_INT 3
5010: DOUBLE
5011: EQUAL
5012: IFTRUE 5016
5014: GO 5031
5016: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
5017: LD_EXP 20
5021: PPUSH
5022: LD_STRING DH-Visited-3
5024: PPUSH
5025: CALL_OW 88
5029: GO 5032
5031: POP
// end ;
5032: LD_VAR 0 1
5036: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and IsOk ( Heike ) do var i ;
5037: LD_EXP 16
5041: NOT
5042: PUSH
5043: LD_EXP 14
5047: AND
5048: PUSH
5049: LD_EXP 20
5053: PPUSH
5054: CALL_OW 302
5058: AND
5059: IFFALSE 5112
5061: GO 5063
5063: DISABLE
5064: LD_INT 0
5066: PPUSH
// begin enable ;
5067: ENABLE
// for i in entranceAllowedList do
5068: LD_ADDR_VAR 0 1
5072: PUSH
5073: LD_EXP 14
5077: PUSH
5078: FOR_IN
5079: IFFALSE 5110
// if InEntrance ( Heike , i ) then
5081: LD_EXP 20
5085: PPUSH
5086: LD_VAR 0 1
5090: PPUSH
5091: CALL 5844 0 2
5095: IFFALSE 5108
// begin HeikeEnterBuilding ( i ) ;
5097: LD_VAR 0 1
5101: PPUSH
5102: CALL 5115 0 1
// break ;
5106: GO 5110
// end ;
5108: GO 5078
5110: POP
5111: POP
// end ;
5112: PPOPN 1
5114: END
// function HeikeEnterBuilding ( building ) ; begin
5115: LD_INT 0
5117: PPUSH
// if not building then
5118: LD_VAR 0 1
5122: NOT
5123: IFFALSE 5127
// exit ;
5125: GO 5578
// if building in entranceVisitedList then
5127: LD_VAR 0 1
5131: PUSH
5132: LD_EXP 15
5136: IN
5137: IFFALSE 5145
// begin SayHVisited ( ) ;
5139: CALL 4948 0 0
// exit ;
5143: GO 5578
// end ; case Query ( EnterBuilding ) of 1 :
5145: LD_STRING EnterBuilding
5147: PPUSH
5148: CALL_OW 97
5152: PUSH
5153: LD_INT 1
5155: DOUBLE
5156: EQUAL
5157: IFTRUE 5161
5159: GO 5164
5161: POP
// ; 2 :
5162: GO 5178
5164: LD_INT 2
5166: DOUBLE
5167: EQUAL
5168: IFTRUE 5172
5170: GO 5177
5172: POP
// exit ; end ;
5173: GO 5578
5175: GO 5178
5177: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
5178: LD_ADDR_EXP 15
5182: PUSH
5183: LD_EXP 15
5187: PPUSH
5188: LD_VAR 0 1
5192: PPUSH
5193: CALL 43828 0 2
5197: ST_TO_ADDR
// InGameOn ;
5198: CALL_OW 8
// SetSide ( Heike , 5 ) ;
5202: LD_EXP 20
5206: PPUSH
5207: LD_INT 5
5209: PPUSH
5210: CALL_OW 235
// SetSide ( building , 5 ) ;
5214: LD_VAR 0 1
5218: PPUSH
5219: LD_INT 5
5221: PPUSH
5222: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
5226: LD_EXP 20
5230: PPUSH
5231: LD_VAR 0 1
5235: PPUSH
5236: CALL_OW 120
// wait ( 0 0$3 ) ;
5240: LD_INT 105
5242: PPUSH
5243: CALL_OW 67
// case building of ruFac :
5247: LD_VAR 0 1
5251: PUSH
5252: LD_INT 61
5254: DOUBLE
5255: EQUAL
5256: IFTRUE 5260
5258: GO 5357
5260: POP
// begin if IsOk ( Markov ) then
5261: LD_EXP 27
5265: PPUSH
5266: CALL_OW 302
5270: IFFALSE 5351
// begin Say ( Heike , DH-Krastyo-1 ) ;
5272: LD_EXP 20
5276: PPUSH
5277: LD_STRING DH-Krastyo-1
5279: PPUSH
5280: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
5284: LD_EXP 27
5288: PPUSH
5289: LD_STRING DMar-Krastyo-2
5291: PPUSH
5292: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
5296: LD_EXP 27
5300: PPUSH
5301: LD_STRING DMar-Krastyo-3
5303: PPUSH
5304: CALL_OW 88
// SetSide ( Markov , 2 ) ;
5308: LD_EXP 27
5312: PPUSH
5313: LD_INT 2
5315: PPUSH
5316: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
5320: LD_ADDR_EXP 13
5324: PUSH
5325: LD_EXP 13
5329: PPUSH
5330: LD_EXP 27
5334: PPUSH
5335: CALL 43828 0 2
5339: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
5340: LD_EXP 27
5344: PPUSH
5345: CALL_OW 122
// end else
5349: GO 5355
// SayHEmpty ( ) ;
5351: CALL 4859 0 0
// end ; ruBarKam :
5355: GO 5541
5357: LD_INT 109
5359: DOUBLE
5360: EQUAL
5361: IFTRUE 5365
5363: GO 5458
5365: POP
// begin if IsOk ( Kamil ) then
5366: LD_EXP 24
5370: PPUSH
5371: CALL_OW 302
5375: IFFALSE 5452
// begin Say ( Heike , DH-Kamil-1 ) ;
5377: LD_EXP 20
5381: PPUSH
5382: LD_STRING DH-Kamil-1
5384: PPUSH
5385: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
5389: LD_EXP 24
5393: PPUSH
5394: LD_STRING DKam-Kamil-2
5396: PPUSH
5397: CALL_OW 88
// if IsOk ( Sophia ) then
5401: LD_EXP 26
5405: PPUSH
5406: CALL_OW 302
5410: IFFALSE 5450
// if Sophia in heikeSquad then
5412: LD_EXP 26
5416: PUSH
5417: LD_EXP 13
5421: IN
5422: IFFALSE 5438
// Say ( Kamil , DKam-Kamil-a-3 ) else
5424: LD_EXP 24
5428: PPUSH
5429: LD_STRING DKam-Kamil-a-3
5431: PPUSH
5432: CALL_OW 88
5436: GO 5450
// Say ( Kamil , DKam-Kamil-3 ) ;
5438: LD_EXP 24
5442: PPUSH
5443: LD_STRING DKam-Kamil-3
5445: PPUSH
5446: CALL_OW 88
// end else
5450: GO 5456
// SayHEmpty ( ) ;
5452: CALL 4859 0 0
// end ; ruOutpost1 :
5456: GO 5541
5458: LD_INT 6
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5466
5464: GO 5486
5466: POP
// begin if IsOk ( Kurt ) then
5467: LD_EXP 29
5471: PPUSH
5472: CALL_OW 302
5476: IFFALSE 5480
// begin end else
5478: GO 5484
// SayHEmpty ( ) ;
5480: CALL 4859 0 0
// end ; ruOutpostBar :
5484: GO 5541
5486: LD_INT 13
5488: DOUBLE
5489: EQUAL
5490: IFTRUE 5494
5492: GO 5540
5494: POP
// begin if not hasGuardPatrolPlan then
5495: LD_EXP 17
5499: NOT
5500: IFFALSE 5534
// begin Say ( Heike , DH-PatrolPlan ) ;
5502: LD_EXP 20
5506: PPUSH
5507: LD_STRING DH-PatrolPlan
5509: PPUSH
5510: CALL_OW 88
// hasGuardPatrolPlan := true ;
5514: LD_ADDR_EXP 17
5518: PUSH
5519: LD_INT 1
5521: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
5522: LD_INT 6
5524: PPUSH
5525: LD_INT 2
5527: PPUSH
5528: CALL_OW 343
// end else
5532: GO 5538
// SayHEmpty ( ) ;
5534: CALL 4859 0 0
// end ; end ;
5538: GO 5541
5540: POP
// ComExitBuilding ( Heike ) ;
5541: LD_EXP 20
5545: PPUSH
5546: CALL_OW 122
// SetSide ( Heike , 2 ) ;
5550: LD_EXP 20
5554: PPUSH
5555: LD_INT 2
5557: PPUSH
5558: CALL_OW 235
// SetSide ( building , 3 ) ;
5562: LD_VAR 0 1
5566: PPUSH
5567: LD_INT 3
5569: PPUSH
5570: CALL_OW 235
// InGameOff ;
5574: CALL_OW 9
// end ; end_of_file
5578: LD_VAR 0 2
5582: RET
// on SailEvent ( event ) do begin case event of eventCenterCamOnHeike :
5583: LD_VAR 0 1
5587: PUSH
5588: LD_EXP 18
5592: DOUBLE
5593: EQUAL
5594: IFTRUE 5598
5596: GO 5628
5598: POP
// begin repeat wait ( 0 0$1 ) ;
5599: LD_INT 35
5601: PPUSH
5602: CALL_OW 67
// CenterOnUnits ( Heike ) ;
5606: LD_EXP 20
5610: PPUSH
5611: CALL_OW 85
// until IsDying ( Heike ) ;
5615: LD_EXP 20
5619: PPUSH
5620: CALL_OW 303
5624: IFFALSE 5599
// end ; end ;
5626: GO 5629
5628: POP
// end ;
5629: PPOPN 1
5631: END
// on SaiLEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
5632: LD_OWVAR 59
5636: IFFALSE 5640
// exit ;
5638: GO 5710
// PlaceSeeing ( x , y , 2 , - 12 ) ;
5640: LD_VAR 0 2
5644: PPUSH
5645: LD_VAR 0 3
5649: PPUSH
5650: LD_INT 2
5652: PPUSH
5653: LD_INT 12
5655: NEG
5656: PPUSH
5657: CALL_OW 330
// CenterOnXY ( x , y ) ;
5661: LD_VAR 0 2
5665: PPUSH
5666: LD_VAR 0 3
5670: PPUSH
5671: CALL_OW 84
// wait ( time ) ;
5675: LD_VAR 0 4
5679: PPUSH
5680: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
5684: LD_EXP 20
5688: PPUSH
5689: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
5693: LD_VAR 0 2
5697: PPUSH
5698: LD_VAR 0 3
5702: PPUSH
5703: LD_INT 2
5705: PPUSH
5706: CALL_OW 331
// end ;
5710: PPOPN 7
5712: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
5713: LD_VAR 0 1
5717: PUSH
5718: LD_EXP 20
5722: EQUAL
5723: PUSH
5724: LD_EXP 5
5728: AND
5729: IFFALSE 5738
// YouLost ( Heike ) ;
5731: LD_STRING Heike
5733: PPUSH
5734: CALL_OW 104
// end ; end_of_file
5738: PPOPN 1
5740: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
5741: LD_INT 0
5743: PPUSH
5744: PPUSH
5745: PPUSH
// u1 := IsInUnit ( unit1 ) ;
5746: LD_ADDR_VAR 0 4
5750: PUSH
5751: LD_VAR 0 1
5755: PPUSH
5756: CALL_OW 310
5760: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
5761: LD_ADDR_VAR 0 5
5765: PUSH
5766: LD_VAR 0 2
5770: PPUSH
5771: CALL_OW 310
5775: ST_TO_ADDR
// result := u1 and u1 = u2 ;
5776: LD_ADDR_VAR 0 3
5780: PUSH
5781: LD_VAR 0 4
5785: PUSH
5786: LD_VAR 0 4
5790: PUSH
5791: LD_VAR 0 5
5795: EQUAL
5796: AND
5797: ST_TO_ADDR
// end ;
5798: LD_VAR 0 3
5802: RET
// export function ShowPlace ( x , y , time ) ; begin
5803: LD_INT 0
5805: PPUSH
// RaiseSailEventCustom ( eventShowPlace , x , y , time , 0 , 0 , 0 ) ;
5806: LD_EXP 19
5810: PPUSH
5811: LD_VAR 0 1
5815: PPUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: LD_VAR 0 3
5825: PPUSH
5826: LD_INT 0
5828: PPUSH
5829: LD_INT 0
5831: PPUSH
5832: LD_INT 0
5834: PPUSH
5835: CALL_OW 595
// end ;
5839: LD_VAR 0 4
5843: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
5844: LD_INT 0
5846: PPUSH
5847: PPUSH
5848: PPUSH
5849: PPUSH
5850: PPUSH
5851: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
5852: LD_VAR 0 1
5856: PPUSH
5857: CALL_OW 302
5861: NOT
5862: PUSH
5863: LD_VAR 0 2
5867: PPUSH
5868: CALL_OW 302
5872: NOT
5873: OR
5874: PUSH
5875: LD_VAR 0 2
5879: PPUSH
5880: CALL_OW 313
5884: PUSH
5885: LD_INT 6
5887: EQUAL
5888: OR
5889: IFFALSE 5893
// exit ;
5891: GO 6102
// btype := GetBType ( building ) ;
5893: LD_ADDR_VAR 0 8
5897: PUSH
5898: LD_VAR 0 2
5902: PPUSH
5903: CALL_OW 266
5907: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_lab , b_lab_half , b_lab_full ] then
5908: LD_VAR 0 8
5912: PUSH
5913: LD_INT 0
5915: PUSH
5916: LD_INT 1
5918: PUSH
5919: LD_INT 4
5921: PUSH
5922: LD_INT 5
5924: PUSH
5925: LD_INT 6
5927: PUSH
5928: LD_INT 7
5930: PUSH
5931: LD_INT 8
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: IN
5943: NOT
5944: IFFALSE 5948
// exit ;
5946: GO 6102
// x := GetX ( building ) ;
5948: LD_ADDR_VAR 0 4
5952: PUSH
5953: LD_VAR 0 2
5957: PPUSH
5958: CALL_OW 250
5962: ST_TO_ADDR
// y := GetY ( building ) ;
5963: LD_ADDR_VAR 0 5
5967: PUSH
5968: LD_VAR 0 2
5972: PPUSH
5973: CALL_OW 251
5977: ST_TO_ADDR
// d := GetDir ( building ) ;
5978: LD_ADDR_VAR 0 6
5982: PUSH
5983: LD_VAR 0 2
5987: PPUSH
5988: CALL_OW 254
5992: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
5993: LD_ADDR_VAR 0 7
5997: PUSH
5998: LD_VAR 0 4
6002: PPUSH
6003: LD_VAR 0 6
6007: PPUSH
6008: LD_INT 3
6010: PPUSH
6011: CALL_OW 272
6015: PUSH
6016: LD_VAR 0 5
6020: PPUSH
6021: LD_VAR 0 6
6025: PPUSH
6026: LD_INT 3
6028: PPUSH
6029: CALL_OW 273
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
6038: LD_VAR 0 7
6042: PUSH
6043: LD_INT 1
6045: ARRAY
6046: PPUSH
6047: LD_VAR 0 7
6051: PUSH
6052: LD_INT 2
6054: ARRAY
6055: PPUSH
6056: CALL_OW 488
6060: NOT
6061: IFFALSE 6065
// exit ;
6063: GO 6102
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 3 ;
6065: LD_ADDR_VAR 0 3
6069: PUSH
6070: LD_VAR 0 1
6074: PPUSH
6075: LD_VAR 0 7
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PPUSH
6084: LD_VAR 0 7
6088: PUSH
6089: LD_INT 2
6091: ARRAY
6092: PPUSH
6093: CALL_OW 297
6097: PUSH
6098: LD_INT 3
6100: LESS
6101: ST_TO_ADDR
// end ; end_of_file
6102: LD_VAR 0 3
6106: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
6107: LD_INT 0
6109: PPUSH
// if not step then
6110: LD_LOC 1
6114: NOT
6115: IFFALSE 6125
// step := 1 ;
6117: LD_ADDR_LOC 1
6121: PUSH
6122: LD_INT 1
6124: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
6125: LD_STRING HEscape
6127: PUSH
6128: LD_LOC 1
6132: STR
6133: PPUSH
6134: CALL_OW 97
6138: PUSH
6139: LD_INT 1
6141: DOUBLE
6142: EQUAL
6143: IFTRUE 6147
6145: GO 6154
6147: POP
// LockerMinigameSearch ; 2 :
6148: CALL 6187 0 0
6152: GO 6170
6154: LD_INT 2
6156: DOUBLE
6157: EQUAL
6158: IFTRUE 6162
6160: GO 6169
6162: POP
// LockerMinigameSetCode ; end ;
6163: CALL 6261 0 0
6167: GO 6170
6169: POP
// if lockerCodeValid then
6170: LD_EXP 36
6174: IFFALSE 6178
// exit ;
6176: GO 6182
// StartLockerMinigame ;
6178: CALL 6107 0 0
// end ;
6182: LD_VAR 0 1
6186: RET
// function LockerMinigameSearch ; begin
6187: LD_INT 0
6189: PPUSH
// if code then
6190: LD_LOC 2
6194: IFFALSE 6210
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
6196: LD_EXP 20
6200: PPUSH
6201: LD_STRING DH-Escape-3-Hint-0
6203: PPUSH
6204: CALL_OW 88
// exit ;
6208: GO 6256
// end ; Randomize ;
6210: CALL_OW 10
// code := rand ( 1 , 5 ) ;
6214: LD_ADDR_LOC 2
6218: PUSH
6219: LD_INT 1
6221: PPUSH
6222: LD_INT 5
6224: PPUSH
6225: CALL_OW 12
6229: ST_TO_ADDR
// step := 2 ;
6230: LD_ADDR_LOC 1
6234: PUSH
6235: LD_INT 2
6237: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
6238: LD_EXP 20
6242: PPUSH
6243: LD_STRING DH-Escape-3-Hint-
6245: PUSH
6246: LD_LOC 2
6250: STR
6251: PPUSH
6252: CALL_OW 88
// end ;
6256: LD_VAR 0 1
6260: RET
// function LockerMinigameSetCode ; begin
6261: LD_INT 0
6263: PPUSH
// if not code then
6264: LD_LOC 2
6268: NOT
6269: IFFALSE 6279
// code := 0 ;
6271: LD_ADDR_LOC 2
6275: PUSH
6276: LD_INT 0
6278: ST_TO_ADDR
// lockerBusy := true ;
6279: LD_ADDR_EXP 37
6283: PUSH
6284: LD_INT 1
6286: ST_TO_ADDR
// InGameOff ;
6287: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
6291: LD_STRING initLockerMinigame("
6293: PUSH
6294: LD_LOC 2
6298: STR
6299: PUSH
6300: LD_STRING ")
6302: STR
6303: PPUSH
6304: CALL_OW 559
// step := 3 ;
6308: LD_ADDR_LOC 1
6312: PUSH
6313: LD_INT 3
6315: ST_TO_ADDR
// repeat wait ( 1 ) ;
6316: LD_INT 1
6318: PPUSH
6319: CALL_OW 67
// until not lockerBusy ;
6323: LD_EXP 37
6327: NOT
6328: IFFALSE 6316
// InGameOn ;
6330: CALL_OW 8
// if not lockerCodeValid then
6334: LD_EXP 36
6338: NOT
6339: IFFALSE 6365
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
6341: LD_EXP 20
6345: PPUSH
6346: LD_STRING DH-Escape-3-Fail-
6348: PUSH
6349: LD_INT 1
6351: PPUSH
6352: LD_INT 2
6354: PPUSH
6355: CALL_OW 12
6359: STR
6360: PPUSH
6361: CALL_OW 88
// end ; end_of_file
6365: LD_VAR 0 1
6369: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
6370: LD_VAR 0 2
6374: PUSH
6375: LD_INT 102
6377: EQUAL
6378: IFFALSE 6400
// begin lockerBusy := false ;
6380: LD_ADDR_EXP 37
6384: PUSH
6385: LD_INT 0
6387: ST_TO_ADDR
// lockerCodeValid := p3 ;
6388: LD_ADDR_EXP 36
6392: PUSH
6393: LD_VAR 0 3
6397: ST_TO_ADDR
// end else
6398: GO 6434
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
6400: LD_VAR 0 1
6404: PPUSH
6405: LD_VAR 0 2
6409: PPUSH
6410: LD_VAR 0 3
6414: PPUSH
6415: LD_VAR 0 4
6419: PPUSH
6420: LD_VAR 0 5
6424: PPUSH
6425: LD_VAR 0 6
6429: PPUSH
6430: CALL 47854 0 6
// end ;
6434: PPOPN 6
6436: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
6437: CALL 47825 0 0
// end ; end_of_file
6441: PPOPN 1
6443: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6444: LD_INT 0
6446: PPUSH
6447: PPUSH
// if exist_mode then
6448: LD_VAR 0 2
6452: IFFALSE 6477
// unit := CreateCharacter ( prefix & ident ) else
6454: LD_ADDR_VAR 0 5
6458: PUSH
6459: LD_VAR 0 3
6463: PUSH
6464: LD_VAR 0 1
6468: STR
6469: PPUSH
6470: CALL_OW 34
6474: ST_TO_ADDR
6475: GO 6492
// unit := NewCharacter ( ident ) ;
6477: LD_ADDR_VAR 0 5
6481: PUSH
6482: LD_VAR 0 1
6486: PPUSH
6487: CALL_OW 25
6491: ST_TO_ADDR
// result := unit ;
6492: LD_ADDR_VAR 0 4
6496: PUSH
6497: LD_VAR 0 5
6501: ST_TO_ADDR
// end ;
6502: LD_VAR 0 4
6506: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6507: LD_INT 0
6509: PPUSH
6510: PPUSH
// if not side or not nation then
6511: LD_VAR 0 1
6515: NOT
6516: PUSH
6517: LD_VAR 0 2
6521: NOT
6522: OR
6523: IFFALSE 6527
// exit ;
6525: GO 7295
// case nation of nation_american :
6527: LD_VAR 0 2
6531: PUSH
6532: LD_INT 1
6534: DOUBLE
6535: EQUAL
6536: IFTRUE 6540
6538: GO 6754
6540: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
6541: LD_ADDR_VAR 0 4
6545: PUSH
6546: LD_INT 35
6548: PUSH
6549: LD_INT 45
6551: PUSH
6552: LD_INT 46
6554: PUSH
6555: LD_INT 47
6557: PUSH
6558: LD_INT 82
6560: PUSH
6561: LD_INT 83
6563: PUSH
6564: LD_INT 84
6566: PUSH
6567: LD_INT 85
6569: PUSH
6570: LD_INT 86
6572: PUSH
6573: LD_INT 1
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 6
6581: PUSH
6582: LD_INT 15
6584: PUSH
6585: LD_INT 16
6587: PUSH
6588: LD_INT 7
6590: PUSH
6591: LD_INT 12
6593: PUSH
6594: LD_INT 13
6596: PUSH
6597: LD_INT 10
6599: PUSH
6600: LD_INT 14
6602: PUSH
6603: LD_INT 20
6605: PUSH
6606: LD_INT 21
6608: PUSH
6609: LD_INT 22
6611: PUSH
6612: LD_INT 25
6614: PUSH
6615: LD_INT 32
6617: PUSH
6618: LD_INT 27
6620: PUSH
6621: LD_INT 36
6623: PUSH
6624: LD_INT 69
6626: PUSH
6627: LD_INT 39
6629: PUSH
6630: LD_INT 34
6632: PUSH
6633: LD_INT 40
6635: PUSH
6636: LD_INT 48
6638: PUSH
6639: LD_INT 49
6641: PUSH
6642: LD_INT 50
6644: PUSH
6645: LD_INT 51
6647: PUSH
6648: LD_INT 52
6650: PUSH
6651: LD_INT 53
6653: PUSH
6654: LD_INT 54
6656: PUSH
6657: LD_INT 55
6659: PUSH
6660: LD_INT 56
6662: PUSH
6663: LD_INT 57
6665: PUSH
6666: LD_INT 58
6668: PUSH
6669: LD_INT 59
6671: PUSH
6672: LD_INT 60
6674: PUSH
6675: LD_INT 61
6677: PUSH
6678: LD_INT 62
6680: PUSH
6681: LD_INT 80
6683: PUSH
6684: LD_INT 82
6686: PUSH
6687: LD_INT 83
6689: PUSH
6690: LD_INT 84
6692: PUSH
6693: LD_INT 85
6695: PUSH
6696: LD_INT 86
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: ST_TO_ADDR
6752: GO 7219
6754: LD_INT 2
6756: DOUBLE
6757: EQUAL
6758: IFTRUE 6762
6760: GO 6988
6762: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
6763: LD_ADDR_VAR 0 4
6767: PUSH
6768: LD_INT 35
6770: PUSH
6771: LD_INT 45
6773: PUSH
6774: LD_INT 46
6776: PUSH
6777: LD_INT 47
6779: PUSH
6780: LD_INT 82
6782: PUSH
6783: LD_INT 83
6785: PUSH
6786: LD_INT 84
6788: PUSH
6789: LD_INT 85
6791: PUSH
6792: LD_INT 87
6794: PUSH
6795: LD_INT 70
6797: PUSH
6798: LD_INT 1
6800: PUSH
6801: LD_INT 11
6803: PUSH
6804: LD_INT 3
6806: PUSH
6807: LD_INT 4
6809: PUSH
6810: LD_INT 5
6812: PUSH
6813: LD_INT 6
6815: PUSH
6816: LD_INT 15
6818: PUSH
6819: LD_INT 18
6821: PUSH
6822: LD_INT 7
6824: PUSH
6825: LD_INT 17
6827: PUSH
6828: LD_INT 8
6830: PUSH
6831: LD_INT 20
6833: PUSH
6834: LD_INT 21
6836: PUSH
6837: LD_INT 22
6839: PUSH
6840: LD_INT 72
6842: PUSH
6843: LD_INT 26
6845: PUSH
6846: LD_INT 69
6848: PUSH
6849: LD_INT 39
6851: PUSH
6852: LD_INT 40
6854: PUSH
6855: LD_INT 41
6857: PUSH
6858: LD_INT 42
6860: PUSH
6861: LD_INT 43
6863: PUSH
6864: LD_INT 48
6866: PUSH
6867: LD_INT 49
6869: PUSH
6870: LD_INT 50
6872: PUSH
6873: LD_INT 51
6875: PUSH
6876: LD_INT 52
6878: PUSH
6879: LD_INT 53
6881: PUSH
6882: LD_INT 54
6884: PUSH
6885: LD_INT 55
6887: PUSH
6888: LD_INT 56
6890: PUSH
6891: LD_INT 60
6893: PUSH
6894: LD_INT 61
6896: PUSH
6897: LD_INT 62
6899: PUSH
6900: LD_INT 66
6902: PUSH
6903: LD_INT 67
6905: PUSH
6906: LD_INT 68
6908: PUSH
6909: LD_INT 81
6911: PUSH
6912: LD_INT 82
6914: PUSH
6915: LD_INT 83
6917: PUSH
6918: LD_INT 84
6920: PUSH
6921: LD_INT 85
6923: PUSH
6924: LD_INT 87
6926: PUSH
6927: LD_INT 88
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: ST_TO_ADDR
6986: GO 7219
6988: LD_INT 3
6990: DOUBLE
6991: EQUAL
6992: IFTRUE 6996
6994: GO 7218
6996: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
6997: LD_ADDR_VAR 0 4
7001: PUSH
7002: LD_INT 46
7004: PUSH
7005: LD_INT 47
7007: PUSH
7008: LD_INT 1
7010: PUSH
7011: LD_INT 2
7013: PUSH
7014: LD_INT 82
7016: PUSH
7017: LD_INT 83
7019: PUSH
7020: LD_INT 84
7022: PUSH
7023: LD_INT 85
7025: PUSH
7026: LD_INT 86
7028: PUSH
7029: LD_INT 11
7031: PUSH
7032: LD_INT 9
7034: PUSH
7035: LD_INT 20
7037: PUSH
7038: LD_INT 19
7040: PUSH
7041: LD_INT 21
7043: PUSH
7044: LD_INT 24
7046: PUSH
7047: LD_INT 22
7049: PUSH
7050: LD_INT 25
7052: PUSH
7053: LD_INT 28
7055: PUSH
7056: LD_INT 29
7058: PUSH
7059: LD_INT 30
7061: PUSH
7062: LD_INT 31
7064: PUSH
7065: LD_INT 37
7067: PUSH
7068: LD_INT 38
7070: PUSH
7071: LD_INT 32
7073: PUSH
7074: LD_INT 27
7076: PUSH
7077: LD_INT 33
7079: PUSH
7080: LD_INT 69
7082: PUSH
7083: LD_INT 39
7085: PUSH
7086: LD_INT 34
7088: PUSH
7089: LD_INT 40
7091: PUSH
7092: LD_INT 71
7094: PUSH
7095: LD_INT 23
7097: PUSH
7098: LD_INT 44
7100: PUSH
7101: LD_INT 48
7103: PUSH
7104: LD_INT 49
7106: PUSH
7107: LD_INT 50
7109: PUSH
7110: LD_INT 51
7112: PUSH
7113: LD_INT 52
7115: PUSH
7116: LD_INT 53
7118: PUSH
7119: LD_INT 54
7121: PUSH
7122: LD_INT 55
7124: PUSH
7125: LD_INT 56
7127: PUSH
7128: LD_INT 57
7130: PUSH
7131: LD_INT 58
7133: PUSH
7134: LD_INT 59
7136: PUSH
7137: LD_INT 63
7139: PUSH
7140: LD_INT 64
7142: PUSH
7143: LD_INT 65
7145: PUSH
7146: LD_INT 82
7148: PUSH
7149: LD_INT 83
7151: PUSH
7152: LD_INT 84
7154: PUSH
7155: LD_INT 85
7157: PUSH
7158: LD_INT 86
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: ST_TO_ADDR
7216: GO 7219
7218: POP
// if state > - 1 and state < 3 then
7219: LD_VAR 0 3
7223: PUSH
7224: LD_INT 1
7226: NEG
7227: GREATER
7228: PUSH
7229: LD_VAR 0 3
7233: PUSH
7234: LD_INT 3
7236: LESS
7237: AND
7238: IFFALSE 7295
// for i in result do
7240: LD_ADDR_VAR 0 5
7244: PUSH
7245: LD_VAR 0 4
7249: PUSH
7250: FOR_IN
7251: IFFALSE 7293
// if GetTech ( i , side ) <> state then
7253: LD_VAR 0 5
7257: PPUSH
7258: LD_VAR 0 1
7262: PPUSH
7263: CALL_OW 321
7267: PUSH
7268: LD_VAR 0 3
7272: NONEQUAL
7273: IFFALSE 7291
// result := result diff i ;
7275: LD_ADDR_VAR 0 4
7279: PUSH
7280: LD_VAR 0 4
7284: PUSH
7285: LD_VAR 0 5
7289: DIFF
7290: ST_TO_ADDR
7291: GO 7250
7293: POP
7294: POP
// end ;
7295: LD_VAR 0 4
7299: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
// result := true ;
7305: LD_ADDR_VAR 0 3
7309: PUSH
7310: LD_INT 1
7312: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7313: LD_ADDR_VAR 0 5
7317: PUSH
7318: LD_VAR 0 2
7322: PPUSH
7323: CALL_OW 480
7327: ST_TO_ADDR
// if not tmp then
7328: LD_VAR 0 5
7332: NOT
7333: IFFALSE 7337
// exit ;
7335: GO 7386
// for i in tmp do
7337: LD_ADDR_VAR 0 4
7341: PUSH
7342: LD_VAR 0 5
7346: PUSH
7347: FOR_IN
7348: IFFALSE 7384
// if GetTech ( i , side ) <> state_researched then
7350: LD_VAR 0 4
7354: PPUSH
7355: LD_VAR 0 1
7359: PPUSH
7360: CALL_OW 321
7364: PUSH
7365: LD_INT 2
7367: NONEQUAL
7368: IFFALSE 7382
// begin result := false ;
7370: LD_ADDR_VAR 0 3
7374: PUSH
7375: LD_INT 0
7377: ST_TO_ADDR
// exit ;
7378: POP
7379: POP
7380: GO 7386
// end ;
7382: GO 7347
7384: POP
7385: POP
// end ;
7386: LD_VAR 0 3
7390: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7391: LD_INT 0
7393: PPUSH
7394: PPUSH
7395: PPUSH
7396: PPUSH
7397: PPUSH
7398: PPUSH
7399: PPUSH
7400: PPUSH
7401: PPUSH
7402: PPUSH
7403: PPUSH
7404: PPUSH
7405: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7406: LD_VAR 0 1
7410: NOT
7411: PUSH
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 257
7421: PUSH
7422: LD_INT 9
7424: NONEQUAL
7425: OR
7426: IFFALSE 7430
// exit ;
7428: GO 8003
// side := GetSide ( unit ) ;
7430: LD_ADDR_VAR 0 9
7434: PUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: CALL_OW 255
7444: ST_TO_ADDR
// tech_space := tech_spacanom ;
7445: LD_ADDR_VAR 0 12
7449: PUSH
7450: LD_INT 29
7452: ST_TO_ADDR
// tech_time := tech_taurad ;
7453: LD_ADDR_VAR 0 13
7457: PUSH
7458: LD_INT 28
7460: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7461: LD_ADDR_VAR 0 11
7465: PUSH
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 310
7475: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7476: LD_VAR 0 11
7480: PPUSH
7481: CALL_OW 247
7485: PUSH
7486: LD_INT 2
7488: EQUAL
7489: IFFALSE 7493
// exit ;
7491: GO 8003
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7493: LD_ADDR_VAR 0 8
7497: PUSH
7498: LD_INT 81
7500: PUSH
7501: LD_VAR 0 9
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 3
7512: PUSH
7513: LD_INT 21
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PPUSH
7531: CALL_OW 69
7535: ST_TO_ADDR
// if not tmp then
7536: LD_VAR 0 8
7540: NOT
7541: IFFALSE 7545
// exit ;
7543: GO 8003
// if in_unit then
7545: LD_VAR 0 11
7549: IFFALSE 7573
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7551: LD_ADDR_VAR 0 10
7555: PUSH
7556: LD_VAR 0 8
7560: PPUSH
7561: LD_VAR 0 11
7565: PPUSH
7566: CALL_OW 74
7570: ST_TO_ADDR
7571: GO 7593
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7573: LD_ADDR_VAR 0 10
7577: PUSH
7578: LD_VAR 0 8
7582: PPUSH
7583: LD_VAR 0 1
7587: PPUSH
7588: CALL_OW 74
7592: ST_TO_ADDR
// if not enemy then
7593: LD_VAR 0 10
7597: NOT
7598: IFFALSE 7602
// exit ;
7600: GO 8003
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7602: LD_VAR 0 11
7606: PUSH
7607: LD_VAR 0 11
7611: PPUSH
7612: LD_VAR 0 10
7616: PPUSH
7617: CALL_OW 296
7621: PUSH
7622: LD_INT 13
7624: GREATER
7625: AND
7626: PUSH
7627: LD_VAR 0 1
7631: PPUSH
7632: LD_VAR 0 10
7636: PPUSH
7637: CALL_OW 296
7641: PUSH
7642: LD_INT 12
7644: GREATER
7645: OR
7646: IFFALSE 7650
// exit ;
7648: GO 8003
// missile := [ 1 ] ;
7650: LD_ADDR_VAR 0 14
7654: PUSH
7655: LD_INT 1
7657: PUSH
7658: EMPTY
7659: LIST
7660: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7661: LD_VAR 0 9
7665: PPUSH
7666: LD_VAR 0 12
7670: PPUSH
7671: CALL_OW 325
7675: IFFALSE 7704
// missile := Replace ( missile , missile + 1 , 2 ) ;
7677: LD_ADDR_VAR 0 14
7681: PUSH
7682: LD_VAR 0 14
7686: PPUSH
7687: LD_VAR 0 14
7691: PUSH
7692: LD_INT 1
7694: PLUS
7695: PPUSH
7696: LD_INT 2
7698: PPUSH
7699: CALL_OW 1
7703: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7704: LD_VAR 0 9
7708: PPUSH
7709: LD_VAR 0 13
7713: PPUSH
7714: CALL_OW 325
7718: PUSH
7719: LD_VAR 0 10
7723: PPUSH
7724: CALL_OW 255
7728: PPUSH
7729: LD_VAR 0 13
7733: PPUSH
7734: CALL_OW 325
7738: NOT
7739: AND
7740: IFFALSE 7769
// missile := Replace ( missile , missile + 1 , 3 ) ;
7742: LD_ADDR_VAR 0 14
7746: PUSH
7747: LD_VAR 0 14
7751: PPUSH
7752: LD_VAR 0 14
7756: PUSH
7757: LD_INT 1
7759: PLUS
7760: PPUSH
7761: LD_INT 3
7763: PPUSH
7764: CALL_OW 1
7768: ST_TO_ADDR
// if missile < 2 then
7769: LD_VAR 0 14
7773: PUSH
7774: LD_INT 2
7776: LESS
7777: IFFALSE 7781
// exit ;
7779: GO 8003
// x := GetX ( enemy ) ;
7781: LD_ADDR_VAR 0 4
7785: PUSH
7786: LD_VAR 0 10
7790: PPUSH
7791: CALL_OW 250
7795: ST_TO_ADDR
// y := GetY ( enemy ) ;
7796: LD_ADDR_VAR 0 5
7800: PUSH
7801: LD_VAR 0 10
7805: PPUSH
7806: CALL_OW 251
7810: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7811: LD_ADDR_VAR 0 6
7815: PUSH
7816: LD_VAR 0 4
7820: PUSH
7821: LD_INT 1
7823: NEG
7824: PPUSH
7825: LD_INT 1
7827: PPUSH
7828: CALL_OW 12
7832: PLUS
7833: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7834: LD_ADDR_VAR 0 7
7838: PUSH
7839: LD_VAR 0 5
7843: PUSH
7844: LD_INT 1
7846: NEG
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: CALL_OW 12
7855: PLUS
7856: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7857: LD_VAR 0 6
7861: PPUSH
7862: LD_VAR 0 7
7866: PPUSH
7867: CALL_OW 488
7871: NOT
7872: IFFALSE 7894
// begin _x := x ;
7874: LD_ADDR_VAR 0 6
7878: PUSH
7879: LD_VAR 0 4
7883: ST_TO_ADDR
// _y := y ;
7884: LD_ADDR_VAR 0 7
7888: PUSH
7889: LD_VAR 0 5
7893: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
7894: LD_ADDR_VAR 0 3
7898: PUSH
7899: LD_INT 1
7901: PPUSH
7902: LD_VAR 0 14
7906: PPUSH
7907: CALL_OW 12
7911: ST_TO_ADDR
// case i of 1 :
7912: LD_VAR 0 3
7916: PUSH
7917: LD_INT 1
7919: DOUBLE
7920: EQUAL
7921: IFTRUE 7925
7923: GO 7942
7925: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
7926: LD_VAR 0 1
7930: PPUSH
7931: LD_VAR 0 10
7935: PPUSH
7936: CALL_OW 115
7940: GO 8003
7942: LD_INT 2
7944: DOUBLE
7945: EQUAL
7946: IFTRUE 7950
7948: GO 7972
7950: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
7951: LD_VAR 0 1
7955: PPUSH
7956: LD_VAR 0 6
7960: PPUSH
7961: LD_VAR 0 7
7965: PPUSH
7966: CALL_OW 153
7970: GO 8003
7972: LD_INT 3
7974: DOUBLE
7975: EQUAL
7976: IFTRUE 7980
7978: GO 8002
7980: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
7981: LD_VAR 0 1
7985: PPUSH
7986: LD_VAR 0 6
7990: PPUSH
7991: LD_VAR 0 7
7995: PPUSH
7996: CALL_OW 154
8000: GO 8003
8002: POP
// end ;
8003: LD_VAR 0 2
8007: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
8008: LD_INT 0
8010: PPUSH
8011: PPUSH
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
// if not unit or not building then
8016: LD_VAR 0 1
8020: NOT
8021: PUSH
8022: LD_VAR 0 2
8026: NOT
8027: OR
8028: IFFALSE 8032
// exit ;
8030: GO 8190
// x := GetX ( building ) ;
8032: LD_ADDR_VAR 0 5
8036: PUSH
8037: LD_VAR 0 2
8041: PPUSH
8042: CALL_OW 250
8046: ST_TO_ADDR
// y := GetY ( building ) ;
8047: LD_ADDR_VAR 0 6
8051: PUSH
8052: LD_VAR 0 2
8056: PPUSH
8057: CALL_OW 251
8061: ST_TO_ADDR
// for i = 0 to 5 do
8062: LD_ADDR_VAR 0 4
8066: PUSH
8067: DOUBLE
8068: LD_INT 0
8070: DEC
8071: ST_TO_ADDR
8072: LD_INT 5
8074: PUSH
8075: FOR_TO
8076: IFFALSE 8188
// begin _x := ShiftX ( x , i , 3 ) ;
8078: LD_ADDR_VAR 0 7
8082: PUSH
8083: LD_VAR 0 5
8087: PPUSH
8088: LD_VAR 0 4
8092: PPUSH
8093: LD_INT 3
8095: PPUSH
8096: CALL_OW 272
8100: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
8101: LD_ADDR_VAR 0 8
8105: PUSH
8106: LD_VAR 0 6
8110: PPUSH
8111: LD_VAR 0 4
8115: PPUSH
8116: LD_INT 3
8118: PPUSH
8119: CALL_OW 273
8123: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8124: LD_VAR 0 7
8128: PPUSH
8129: LD_VAR 0 8
8133: PPUSH
8134: CALL_OW 488
8138: NOT
8139: IFFALSE 8143
// continue ;
8141: GO 8075
// if HexInfo ( _x , _y ) = 0 then
8143: LD_VAR 0 7
8147: PPUSH
8148: LD_VAR 0 8
8152: PPUSH
8153: CALL_OW 428
8157: PUSH
8158: LD_INT 0
8160: EQUAL
8161: IFFALSE 8186
// begin ComMoveXY ( unit , _x , _y ) ;
8163: LD_VAR 0 1
8167: PPUSH
8168: LD_VAR 0 7
8172: PPUSH
8173: LD_VAR 0 8
8177: PPUSH
8178: CALL_OW 111
// exit ;
8182: POP
8183: POP
8184: GO 8190
// end ; end ;
8186: GO 8075
8188: POP
8189: POP
// end ;
8190: LD_VAR 0 3
8194: RET
// export function ScanBase ( side , base_area ) ; begin
8195: LD_INT 0
8197: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8198: LD_ADDR_VAR 0 3
8202: PUSH
8203: LD_VAR 0 2
8207: PPUSH
8208: LD_INT 81
8210: PUSH
8211: LD_VAR 0 1
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PPUSH
8220: CALL_OW 70
8224: ST_TO_ADDR
// end ;
8225: LD_VAR 0 3
8229: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8230: LD_INT 0
8232: PPUSH
8233: PPUSH
8234: PPUSH
8235: PPUSH
// result := false ;
8236: LD_ADDR_VAR 0 2
8240: PUSH
8241: LD_INT 0
8243: ST_TO_ADDR
// side := GetSide ( unit ) ;
8244: LD_ADDR_VAR 0 3
8248: PUSH
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 255
8258: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8259: LD_ADDR_VAR 0 4
8263: PUSH
8264: LD_VAR 0 1
8268: PPUSH
8269: CALL_OW 248
8273: ST_TO_ADDR
// case nat of 1 :
8274: LD_VAR 0 4
8278: PUSH
8279: LD_INT 1
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8298
8287: POP
// tech := tech_lassight ; 2 :
8288: LD_ADDR_VAR 0 5
8292: PUSH
8293: LD_INT 12
8295: ST_TO_ADDR
8296: GO 8337
8298: LD_INT 2
8300: DOUBLE
8301: EQUAL
8302: IFTRUE 8306
8304: GO 8317
8306: POP
// tech := tech_mortar ; 3 :
8307: LD_ADDR_VAR 0 5
8311: PUSH
8312: LD_INT 41
8314: ST_TO_ADDR
8315: GO 8337
8317: LD_INT 3
8319: DOUBLE
8320: EQUAL
8321: IFTRUE 8325
8323: GO 8336
8325: POP
// tech := tech_bazooka ; end ;
8326: LD_ADDR_VAR 0 5
8330: PUSH
8331: LD_INT 44
8333: ST_TO_ADDR
8334: GO 8337
8336: POP
// if Researched ( side , tech ) then
8337: LD_VAR 0 3
8341: PPUSH
8342: LD_VAR 0 5
8346: PPUSH
8347: CALL_OW 325
8351: IFFALSE 8378
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8353: LD_ADDR_VAR 0 2
8357: PUSH
8358: LD_INT 5
8360: PUSH
8361: LD_INT 8
8363: PUSH
8364: LD_INT 9
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: LIST
8371: PUSH
8372: LD_VAR 0 4
8376: ARRAY
8377: ST_TO_ADDR
// end ;
8378: LD_VAR 0 2
8382: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8383: LD_INT 0
8385: PPUSH
8386: PPUSH
8387: PPUSH
// if not mines then
8388: LD_VAR 0 2
8392: NOT
8393: IFFALSE 8397
// exit ;
8395: GO 8541
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8397: LD_ADDR_VAR 0 5
8401: PUSH
8402: LD_INT 81
8404: PUSH
8405: LD_VAR 0 1
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 3
8416: PUSH
8417: LD_INT 21
8419: PUSH
8420: LD_INT 3
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PPUSH
8435: CALL_OW 69
8439: ST_TO_ADDR
// for i in mines do
8440: LD_ADDR_VAR 0 4
8444: PUSH
8445: LD_VAR 0 2
8449: PUSH
8450: FOR_IN
8451: IFFALSE 8539
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8453: LD_VAR 0 4
8457: PUSH
8458: LD_INT 1
8460: ARRAY
8461: PPUSH
8462: LD_VAR 0 4
8466: PUSH
8467: LD_INT 2
8469: ARRAY
8470: PPUSH
8471: CALL_OW 458
8475: NOT
8476: IFFALSE 8480
// continue ;
8478: GO 8450
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8480: LD_VAR 0 4
8484: PUSH
8485: LD_INT 1
8487: ARRAY
8488: PPUSH
8489: LD_VAR 0 4
8493: PUSH
8494: LD_INT 2
8496: ARRAY
8497: PPUSH
8498: CALL_OW 428
8502: PUSH
8503: LD_VAR 0 5
8507: IN
8508: IFFALSE 8537
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8510: LD_VAR 0 4
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 4
8523: PUSH
8524: LD_INT 2
8526: ARRAY
8527: PPUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 456
// end ;
8537: GO 8450
8539: POP
8540: POP
// end ;
8541: LD_VAR 0 3
8545: RET
// export function Count ( array ) ; var i ; begin
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
// result := 0 ;
8550: LD_ADDR_VAR 0 2
8554: PUSH
8555: LD_INT 0
8557: ST_TO_ADDR
// for i in array do
8558: LD_ADDR_VAR 0 3
8562: PUSH
8563: LD_VAR 0 1
8567: PUSH
8568: FOR_IN
8569: IFFALSE 8593
// if i then
8571: LD_VAR 0 3
8575: IFFALSE 8591
// result := result + 1 ;
8577: LD_ADDR_VAR 0 2
8581: PUSH
8582: LD_VAR 0 2
8586: PUSH
8587: LD_INT 1
8589: PLUS
8590: ST_TO_ADDR
8591: GO 8568
8593: POP
8594: POP
// end ;
8595: LD_VAR 0 2
8599: RET
// export function IsEmpty ( building ) ; begin
8600: LD_INT 0
8602: PPUSH
// if not building then
8603: LD_VAR 0 1
8607: NOT
8608: IFFALSE 8612
// exit ;
8610: GO 8655
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8612: LD_ADDR_VAR 0 2
8616: PUSH
8617: LD_VAR 0 1
8621: PUSH
8622: LD_INT 22
8624: PUSH
8625: LD_VAR 0 1
8629: PPUSH
8630: CALL_OW 255
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: LD_INT 58
8641: PUSH
8642: EMPTY
8643: LIST
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PPUSH
8649: CALL_OW 69
8653: IN
8654: ST_TO_ADDR
// end ;
8655: LD_VAR 0 2
8659: RET
// export function IsNotFull ( building ) ; var places ; begin
8660: LD_INT 0
8662: PPUSH
8663: PPUSH
// if not building then
8664: LD_VAR 0 1
8668: NOT
8669: IFFALSE 8673
// exit ;
8671: GO 8844
// result := false ;
8673: LD_ADDR_VAR 0 2
8677: PUSH
8678: LD_INT 0
8680: ST_TO_ADDR
// places := 0 ;
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: LD_INT 0
8688: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
8689: LD_VAR 0 1
8693: PPUSH
8694: CALL_OW 266
8698: PUSH
8699: LD_INT 0
8701: DOUBLE
8702: EQUAL
8703: IFTRUE 8761
8705: LD_INT 1
8707: DOUBLE
8708: EQUAL
8709: IFTRUE 8761
8711: LD_INT 6
8713: DOUBLE
8714: EQUAL
8715: IFTRUE 8761
8717: LD_INT 7
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8761
8723: LD_INT 8
8725: DOUBLE
8726: EQUAL
8727: IFTRUE 8761
8729: LD_INT 4
8731: DOUBLE
8732: EQUAL
8733: IFTRUE 8761
8735: LD_INT 5
8737: DOUBLE
8738: EQUAL
8739: IFTRUE 8761
8741: LD_INT 2
8743: DOUBLE
8744: EQUAL
8745: IFTRUE 8761
8747: LD_INT 3
8749: DOUBLE
8750: EQUAL
8751: IFTRUE 8761
8753: LD_INT 35
8755: DOUBLE
8756: EQUAL
8757: IFTRUE 8761
8759: GO 8772
8761: POP
// places := 6 ; b_bunker , b_breastwork :
8762: LD_ADDR_VAR 0 3
8766: PUSH
8767: LD_INT 6
8769: ST_TO_ADDR
8770: GO 8817
8772: LD_INT 32
8774: DOUBLE
8775: EQUAL
8776: IFTRUE 8786
8778: LD_INT 31
8780: DOUBLE
8781: EQUAL
8782: IFTRUE 8786
8784: GO 8797
8786: POP
// places := 1 ; b_control_tower :
8787: LD_ADDR_VAR 0 3
8791: PUSH
8792: LD_INT 1
8794: ST_TO_ADDR
8795: GO 8817
8797: LD_INT 36
8799: DOUBLE
8800: EQUAL
8801: IFTRUE 8805
8803: GO 8816
8805: POP
// places := 3 ; end ;
8806: LD_ADDR_VAR 0 3
8810: PUSH
8811: LD_INT 3
8813: ST_TO_ADDR
8814: GO 8817
8816: POP
// if places then
8817: LD_VAR 0 3
8821: IFFALSE 8844
// result := UnitsInside ( building ) < places ;
8823: LD_ADDR_VAR 0 2
8827: PUSH
8828: LD_VAR 0 1
8832: PPUSH
8833: CALL_OW 313
8837: PUSH
8838: LD_VAR 0 3
8842: LESS
8843: ST_TO_ADDR
// end ;
8844: LD_VAR 0 2
8848: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
// tmp := [ ] ;
8855: LD_ADDR_VAR 0 3
8859: PUSH
8860: EMPTY
8861: ST_TO_ADDR
// list := [ ] ;
8862: LD_ADDR_VAR 0 5
8866: PUSH
8867: EMPTY
8868: ST_TO_ADDR
// for i = 16 to 25 do
8869: LD_ADDR_VAR 0 4
8873: PUSH
8874: DOUBLE
8875: LD_INT 16
8877: DEC
8878: ST_TO_ADDR
8879: LD_INT 25
8881: PUSH
8882: FOR_TO
8883: IFFALSE 8956
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8885: LD_ADDR_VAR 0 3
8889: PUSH
8890: LD_VAR 0 3
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_VAR 0 1
8902: PPUSH
8903: CALL_OW 255
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 91
8914: PUSH
8915: LD_VAR 0 1
8919: PUSH
8920: LD_INT 6
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 30
8930: PUSH
8931: LD_VAR 0 4
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: EMPTY
8946: LIST
8947: PPUSH
8948: CALL_OW 69
8952: ADD
8953: ST_TO_ADDR
8954: GO 8882
8956: POP
8957: POP
// for i = 1 to tmp do
8958: LD_ADDR_VAR 0 4
8962: PUSH
8963: DOUBLE
8964: LD_INT 1
8966: DEC
8967: ST_TO_ADDR
8968: LD_VAR 0 3
8972: PUSH
8973: FOR_TO
8974: IFFALSE 9062
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8976: LD_ADDR_VAR 0 5
8980: PUSH
8981: LD_VAR 0 5
8985: PUSH
8986: LD_VAR 0 3
8990: PUSH
8991: LD_VAR 0 4
8995: ARRAY
8996: PPUSH
8997: CALL_OW 266
9001: PUSH
9002: LD_VAR 0 3
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PPUSH
9013: CALL_OW 250
9017: PUSH
9018: LD_VAR 0 3
9022: PUSH
9023: LD_VAR 0 4
9027: ARRAY
9028: PPUSH
9029: CALL_OW 251
9033: PUSH
9034: LD_VAR 0 3
9038: PUSH
9039: LD_VAR 0 4
9043: ARRAY
9044: PPUSH
9045: CALL_OW 254
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: ADD
9059: ST_TO_ADDR
9060: GO 8973
9062: POP
9063: POP
// result := list ;
9064: LD_ADDR_VAR 0 2
9068: PUSH
9069: LD_VAR 0 5
9073: ST_TO_ADDR
// end ;
9074: LD_VAR 0 2
9078: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
9079: LD_INT 0
9081: PPUSH
9082: PPUSH
9083: PPUSH
9084: PPUSH
9085: PPUSH
9086: PPUSH
9087: PPUSH
// if not factory then
9088: LD_VAR 0 1
9092: NOT
9093: IFFALSE 9097
// exit ;
9095: GO 9690
// if control = control_apeman then
9097: LD_VAR 0 4
9101: PUSH
9102: LD_INT 5
9104: EQUAL
9105: IFFALSE 9214
// begin tmp := UnitsInside ( factory ) ;
9107: LD_ADDR_VAR 0 8
9111: PUSH
9112: LD_VAR 0 1
9116: PPUSH
9117: CALL_OW 313
9121: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
9122: LD_VAR 0 8
9126: PPUSH
9127: LD_INT 25
9129: PUSH
9130: LD_INT 12
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PPUSH
9137: CALL_OW 72
9141: NOT
9142: IFFALSE 9152
// control := control_manual ;
9144: LD_ADDR_VAR 0 4
9148: PUSH
9149: LD_INT 1
9151: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
9152: LD_ADDR_VAR 0 8
9156: PUSH
9157: LD_VAR 0 1
9161: PPUSH
9162: CALL 8849 0 1
9166: ST_TO_ADDR
// if tmp then
9167: LD_VAR 0 8
9171: IFFALSE 9214
// begin for i in tmp do
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 8
9182: PUSH
9183: FOR_IN
9184: IFFALSE 9212
// if i [ 1 ] = b_ext_radio then
9186: LD_VAR 0 7
9190: PUSH
9191: LD_INT 1
9193: ARRAY
9194: PUSH
9195: LD_INT 22
9197: EQUAL
9198: IFFALSE 9210
// begin control := control_remote ;
9200: LD_ADDR_VAR 0 4
9204: PUSH
9205: LD_INT 2
9207: ST_TO_ADDR
// break ;
9208: GO 9212
// end ;
9210: GO 9183
9212: POP
9213: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9214: LD_VAR 0 1
9218: PPUSH
9219: LD_VAR 0 2
9223: PPUSH
9224: LD_VAR 0 3
9228: PPUSH
9229: LD_VAR 0 4
9233: PPUSH
9234: LD_VAR 0 5
9238: PPUSH
9239: CALL_OW 448
9243: IFFALSE 9278
// begin result := [ chassis , engine , control , weapon ] ;
9245: LD_ADDR_VAR 0 6
9249: PUSH
9250: LD_VAR 0 2
9254: PUSH
9255: LD_VAR 0 3
9259: PUSH
9260: LD_VAR 0 4
9264: PUSH
9265: LD_VAR 0 5
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: ST_TO_ADDR
// exit ;
9276: GO 9690
// end ; _chassis := AvailableChassisList ( factory ) ;
9278: LD_ADDR_VAR 0 9
9282: PUSH
9283: LD_VAR 0 1
9287: PPUSH
9288: CALL_OW 475
9292: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9293: LD_ADDR_VAR 0 11
9297: PUSH
9298: LD_VAR 0 1
9302: PPUSH
9303: CALL_OW 476
9307: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9308: LD_ADDR_VAR 0 12
9312: PUSH
9313: LD_VAR 0 1
9317: PPUSH
9318: CALL_OW 477
9322: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9323: LD_ADDR_VAR 0 10
9327: PUSH
9328: LD_VAR 0 1
9332: PPUSH
9333: CALL_OW 478
9337: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9338: LD_VAR 0 9
9342: NOT
9343: PUSH
9344: LD_VAR 0 11
9348: NOT
9349: OR
9350: PUSH
9351: LD_VAR 0 12
9355: NOT
9356: OR
9357: PUSH
9358: LD_VAR 0 10
9362: NOT
9363: OR
9364: IFFALSE 9399
// begin result := [ chassis , engine , control , weapon ] ;
9366: LD_ADDR_VAR 0 6
9370: PUSH
9371: LD_VAR 0 2
9375: PUSH
9376: LD_VAR 0 3
9380: PUSH
9381: LD_VAR 0 4
9385: PUSH
9386: LD_VAR 0 5
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: ST_TO_ADDR
// exit ;
9397: GO 9690
// end ; if not chassis in _chassis then
9399: LD_VAR 0 2
9403: PUSH
9404: LD_VAR 0 9
9408: IN
9409: NOT
9410: IFFALSE 9436
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9412: LD_ADDR_VAR 0 2
9416: PUSH
9417: LD_VAR 0 9
9421: PUSH
9422: LD_INT 1
9424: PPUSH
9425: LD_VAR 0 9
9429: PPUSH
9430: CALL_OW 12
9434: ARRAY
9435: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9436: LD_VAR 0 2
9440: PPUSH
9441: LD_VAR 0 3
9445: PPUSH
9446: CALL 9695 0 2
9450: NOT
9451: IFFALSE 9510
// repeat engine := _engine [ 1 ] ;
9453: LD_ADDR_VAR 0 3
9457: PUSH
9458: LD_VAR 0 11
9462: PUSH
9463: LD_INT 1
9465: ARRAY
9466: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9467: LD_ADDR_VAR 0 11
9471: PUSH
9472: LD_VAR 0 11
9476: PPUSH
9477: LD_INT 1
9479: PPUSH
9480: CALL_OW 3
9484: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9485: LD_VAR 0 2
9489: PPUSH
9490: LD_VAR 0 3
9494: PPUSH
9495: CALL 9695 0 2
9499: PUSH
9500: LD_VAR 0 11
9504: PUSH
9505: EMPTY
9506: EQUAL
9507: OR
9508: IFFALSE 9453
// if not control in _control then
9510: LD_VAR 0 4
9514: PUSH
9515: LD_VAR 0 12
9519: IN
9520: NOT
9521: IFFALSE 9547
// control := _control [ rand ( 1 , _control ) ] ;
9523: LD_ADDR_VAR 0 4
9527: PUSH
9528: LD_VAR 0 12
9532: PUSH
9533: LD_INT 1
9535: PPUSH
9536: LD_VAR 0 12
9540: PPUSH
9541: CALL_OW 12
9545: ARRAY
9546: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9547: LD_VAR 0 2
9551: PPUSH
9552: LD_VAR 0 5
9556: PPUSH
9557: CALL 9915 0 2
9561: NOT
9562: IFFALSE 9621
// repeat weapon := _weapon [ 1 ] ;
9564: LD_ADDR_VAR 0 5
9568: PUSH
9569: LD_VAR 0 10
9573: PUSH
9574: LD_INT 1
9576: ARRAY
9577: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9578: LD_ADDR_VAR 0 10
9582: PUSH
9583: LD_VAR 0 10
9587: PPUSH
9588: LD_INT 1
9590: PPUSH
9591: CALL_OW 3
9595: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9596: LD_VAR 0 2
9600: PPUSH
9601: LD_VAR 0 5
9605: PPUSH
9606: CALL 9915 0 2
9610: PUSH
9611: LD_VAR 0 10
9615: PUSH
9616: EMPTY
9617: EQUAL
9618: OR
9619: IFFALSE 9564
// result := [ ] ;
9621: LD_ADDR_VAR 0 6
9625: PUSH
9626: EMPTY
9627: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9628: LD_VAR 0 1
9632: PPUSH
9633: LD_VAR 0 2
9637: PPUSH
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: LD_VAR 0 5
9652: PPUSH
9653: CALL_OW 448
9657: IFFALSE 9690
// result := [ chassis , engine , control , weapon ] ;
9659: LD_ADDR_VAR 0 6
9663: PUSH
9664: LD_VAR 0 2
9668: PUSH
9669: LD_VAR 0 3
9673: PUSH
9674: LD_VAR 0 4
9678: PUSH
9679: LD_VAR 0 5
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: ST_TO_ADDR
// end ;
9690: LD_VAR 0 6
9694: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9695: LD_INT 0
9697: PPUSH
// if not chassis or not engine then
9698: LD_VAR 0 1
9702: NOT
9703: PUSH
9704: LD_VAR 0 2
9708: NOT
9709: OR
9710: IFFALSE 9714
// exit ;
9712: GO 9910
// case engine of engine_solar :
9714: LD_VAR 0 2
9718: PUSH
9719: LD_INT 2
9721: DOUBLE
9722: EQUAL
9723: IFTRUE 9727
9725: GO 9765
9727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9728: LD_ADDR_VAR 0 3
9732: PUSH
9733: LD_INT 11
9735: PUSH
9736: LD_INT 12
9738: PUSH
9739: LD_INT 13
9741: PUSH
9742: LD_INT 14
9744: PUSH
9745: LD_INT 1
9747: PUSH
9748: LD_INT 2
9750: PUSH
9751: LD_INT 3
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: ST_TO_ADDR
9763: GO 9894
9765: LD_INT 1
9767: DOUBLE
9768: EQUAL
9769: IFTRUE 9773
9771: GO 9835
9773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9774: LD_ADDR_VAR 0 3
9778: PUSH
9779: LD_INT 11
9781: PUSH
9782: LD_INT 12
9784: PUSH
9785: LD_INT 13
9787: PUSH
9788: LD_INT 14
9790: PUSH
9791: LD_INT 1
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: LD_INT 3
9799: PUSH
9800: LD_INT 4
9802: PUSH
9803: LD_INT 5
9805: PUSH
9806: LD_INT 21
9808: PUSH
9809: LD_INT 23
9811: PUSH
9812: LD_INT 22
9814: PUSH
9815: LD_INT 24
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: ST_TO_ADDR
9833: GO 9894
9835: LD_INT 3
9837: DOUBLE
9838: EQUAL
9839: IFTRUE 9843
9841: GO 9893
9843: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9844: LD_ADDR_VAR 0 3
9848: PUSH
9849: LD_INT 13
9851: PUSH
9852: LD_INT 14
9854: PUSH
9855: LD_INT 2
9857: PUSH
9858: LD_INT 3
9860: PUSH
9861: LD_INT 4
9863: PUSH
9864: LD_INT 5
9866: PUSH
9867: LD_INT 21
9869: PUSH
9870: LD_INT 22
9872: PUSH
9873: LD_INT 23
9875: PUSH
9876: LD_INT 24
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: ST_TO_ADDR
9891: GO 9894
9893: POP
// result := ( chassis in result ) ;
9894: LD_ADDR_VAR 0 3
9898: PUSH
9899: LD_VAR 0 1
9903: PUSH
9904: LD_VAR 0 3
9908: IN
9909: ST_TO_ADDR
// end ;
9910: LD_VAR 0 3
9914: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9915: LD_INT 0
9917: PPUSH
// if not chassis or not weapon then
9918: LD_VAR 0 1
9922: NOT
9923: PUSH
9924: LD_VAR 0 2
9928: NOT
9929: OR
9930: IFFALSE 9934
// exit ;
9932: GO 10996
// case weapon of us_machine_gun :
9934: LD_VAR 0 2
9938: PUSH
9939: LD_INT 2
9941: DOUBLE
9942: EQUAL
9943: IFTRUE 9947
9945: GO 9977
9947: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9948: LD_ADDR_VAR 0 3
9952: PUSH
9953: LD_INT 1
9955: PUSH
9956: LD_INT 2
9958: PUSH
9959: LD_INT 3
9961: PUSH
9962: LD_INT 4
9964: PUSH
9965: LD_INT 5
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: ST_TO_ADDR
9975: GO 10980
9977: LD_INT 3
9979: DOUBLE
9980: EQUAL
9981: IFTRUE 9985
9983: GO 10015
9985: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9986: LD_ADDR_VAR 0 3
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: LD_INT 2
9996: PUSH
9997: LD_INT 3
9999: PUSH
10000: LD_INT 4
10002: PUSH
10003: LD_INT 5
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: ST_TO_ADDR
10013: GO 10980
10015: LD_INT 11
10017: DOUBLE
10018: EQUAL
10019: IFTRUE 10023
10021: GO 10053
10023: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
10024: LD_ADDR_VAR 0 3
10028: PUSH
10029: LD_INT 1
10031: PUSH
10032: LD_INT 2
10034: PUSH
10035: LD_INT 3
10037: PUSH
10038: LD_INT 4
10040: PUSH
10041: LD_INT 5
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: ST_TO_ADDR
10051: GO 10980
10053: LD_INT 4
10055: DOUBLE
10056: EQUAL
10057: IFTRUE 10061
10059: GO 10087
10061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
10062: LD_ADDR_VAR 0 3
10066: PUSH
10067: LD_INT 2
10069: PUSH
10070: LD_INT 3
10072: PUSH
10073: LD_INT 4
10075: PUSH
10076: LD_INT 5
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: ST_TO_ADDR
10085: GO 10980
10087: LD_INT 5
10089: DOUBLE
10090: EQUAL
10091: IFTRUE 10095
10093: GO 10121
10095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
10096: LD_ADDR_VAR 0 3
10100: PUSH
10101: LD_INT 2
10103: PUSH
10104: LD_INT 3
10106: PUSH
10107: LD_INT 4
10109: PUSH
10110: LD_INT 5
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: ST_TO_ADDR
10119: GO 10980
10121: LD_INT 9
10123: DOUBLE
10124: EQUAL
10125: IFTRUE 10129
10127: GO 10155
10129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
10130: LD_ADDR_VAR 0 3
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: LD_INT 3
10140: PUSH
10141: LD_INT 4
10143: PUSH
10144: LD_INT 5
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: ST_TO_ADDR
10153: GO 10980
10155: LD_INT 7
10157: DOUBLE
10158: EQUAL
10159: IFTRUE 10163
10161: GO 10189
10163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
10164: LD_ADDR_VAR 0 3
10168: PUSH
10169: LD_INT 2
10171: PUSH
10172: LD_INT 3
10174: PUSH
10175: LD_INT 4
10177: PUSH
10178: LD_INT 5
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: ST_TO_ADDR
10187: GO 10980
10189: LD_INT 12
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 10223
10197: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
10198: LD_ADDR_VAR 0 3
10202: PUSH
10203: LD_INT 2
10205: PUSH
10206: LD_INT 3
10208: PUSH
10209: LD_INT 4
10211: PUSH
10212: LD_INT 5
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: ST_TO_ADDR
10221: GO 10980
10223: LD_INT 13
10225: DOUBLE
10226: EQUAL
10227: IFTRUE 10231
10229: GO 10257
10231: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10232: LD_ADDR_VAR 0 3
10236: PUSH
10237: LD_INT 2
10239: PUSH
10240: LD_INT 3
10242: PUSH
10243: LD_INT 4
10245: PUSH
10246: LD_INT 5
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: ST_TO_ADDR
10255: GO 10980
10257: LD_INT 14
10259: DOUBLE
10260: EQUAL
10261: IFTRUE 10265
10263: GO 10283
10265: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10266: LD_ADDR_VAR 0 3
10270: PUSH
10271: LD_INT 4
10273: PUSH
10274: LD_INT 5
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: ST_TO_ADDR
10281: GO 10980
10283: LD_INT 6
10285: DOUBLE
10286: EQUAL
10287: IFTRUE 10291
10289: GO 10309
10291: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10292: LD_ADDR_VAR 0 3
10296: PUSH
10297: LD_INT 4
10299: PUSH
10300: LD_INT 5
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: ST_TO_ADDR
10307: GO 10980
10309: LD_INT 10
10311: DOUBLE
10312: EQUAL
10313: IFTRUE 10317
10315: GO 10335
10317: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10318: LD_ADDR_VAR 0 3
10322: PUSH
10323: LD_INT 4
10325: PUSH
10326: LD_INT 5
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: ST_TO_ADDR
10333: GO 10980
10335: LD_INT 22
10337: DOUBLE
10338: EQUAL
10339: IFTRUE 10343
10341: GO 10369
10343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10344: LD_ADDR_VAR 0 3
10348: PUSH
10349: LD_INT 11
10351: PUSH
10352: LD_INT 12
10354: PUSH
10355: LD_INT 13
10357: PUSH
10358: LD_INT 14
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: ST_TO_ADDR
10367: GO 10980
10369: LD_INT 23
10371: DOUBLE
10372: EQUAL
10373: IFTRUE 10377
10375: GO 10403
10377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10378: LD_ADDR_VAR 0 3
10382: PUSH
10383: LD_INT 11
10385: PUSH
10386: LD_INT 12
10388: PUSH
10389: LD_INT 13
10391: PUSH
10392: LD_INT 14
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: ST_TO_ADDR
10401: GO 10980
10403: LD_INT 24
10405: DOUBLE
10406: EQUAL
10407: IFTRUE 10411
10409: GO 10437
10411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10412: LD_ADDR_VAR 0 3
10416: PUSH
10417: LD_INT 11
10419: PUSH
10420: LD_INT 12
10422: PUSH
10423: LD_INT 13
10425: PUSH
10426: LD_INT 14
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: ST_TO_ADDR
10435: GO 10980
10437: LD_INT 30
10439: DOUBLE
10440: EQUAL
10441: IFTRUE 10445
10443: GO 10471
10445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10446: LD_ADDR_VAR 0 3
10450: PUSH
10451: LD_INT 11
10453: PUSH
10454: LD_INT 12
10456: PUSH
10457: LD_INT 13
10459: PUSH
10460: LD_INT 14
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: ST_TO_ADDR
10469: GO 10980
10471: LD_INT 25
10473: DOUBLE
10474: EQUAL
10475: IFTRUE 10479
10477: GO 10497
10479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10480: LD_ADDR_VAR 0 3
10484: PUSH
10485: LD_INT 13
10487: PUSH
10488: LD_INT 14
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: ST_TO_ADDR
10495: GO 10980
10497: LD_INT 27
10499: DOUBLE
10500: EQUAL
10501: IFTRUE 10505
10503: GO 10523
10505: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10506: LD_ADDR_VAR 0 3
10510: PUSH
10511: LD_INT 13
10513: PUSH
10514: LD_INT 14
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: ST_TO_ADDR
10521: GO 10980
10523: LD_EXP 43
10527: DOUBLE
10528: EQUAL
10529: IFTRUE 10533
10531: GO 10559
10533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10534: LD_ADDR_VAR 0 3
10538: PUSH
10539: LD_INT 11
10541: PUSH
10542: LD_INT 12
10544: PUSH
10545: LD_INT 13
10547: PUSH
10548: LD_INT 14
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: ST_TO_ADDR
10557: GO 10980
10559: LD_INT 28
10561: DOUBLE
10562: EQUAL
10563: IFTRUE 10567
10565: GO 10585
10567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10568: LD_ADDR_VAR 0 3
10572: PUSH
10573: LD_INT 13
10575: PUSH
10576: LD_INT 14
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: ST_TO_ADDR
10583: GO 10980
10585: LD_INT 29
10587: DOUBLE
10588: EQUAL
10589: IFTRUE 10593
10591: GO 10611
10593: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10594: LD_ADDR_VAR 0 3
10598: PUSH
10599: LD_INT 13
10601: PUSH
10602: LD_INT 14
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: ST_TO_ADDR
10609: GO 10980
10611: LD_INT 31
10613: DOUBLE
10614: EQUAL
10615: IFTRUE 10619
10617: GO 10637
10619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10620: LD_ADDR_VAR 0 3
10624: PUSH
10625: LD_INT 13
10627: PUSH
10628: LD_INT 14
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: ST_TO_ADDR
10635: GO 10980
10637: LD_INT 26
10639: DOUBLE
10640: EQUAL
10641: IFTRUE 10645
10643: GO 10663
10645: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10646: LD_ADDR_VAR 0 3
10650: PUSH
10651: LD_INT 13
10653: PUSH
10654: LD_INT 14
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: ST_TO_ADDR
10661: GO 10980
10663: LD_INT 42
10665: DOUBLE
10666: EQUAL
10667: IFTRUE 10671
10669: GO 10697
10671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10672: LD_ADDR_VAR 0 3
10676: PUSH
10677: LD_INT 21
10679: PUSH
10680: LD_INT 22
10682: PUSH
10683: LD_INT 23
10685: PUSH
10686: LD_INT 24
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: ST_TO_ADDR
10695: GO 10980
10697: LD_INT 43
10699: DOUBLE
10700: EQUAL
10701: IFTRUE 10705
10703: GO 10731
10705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10706: LD_ADDR_VAR 0 3
10710: PUSH
10711: LD_INT 21
10713: PUSH
10714: LD_INT 22
10716: PUSH
10717: LD_INT 23
10719: PUSH
10720: LD_INT 24
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: ST_TO_ADDR
10729: GO 10980
10731: LD_INT 44
10733: DOUBLE
10734: EQUAL
10735: IFTRUE 10739
10737: GO 10765
10739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10740: LD_ADDR_VAR 0 3
10744: PUSH
10745: LD_INT 21
10747: PUSH
10748: LD_INT 22
10750: PUSH
10751: LD_INT 23
10753: PUSH
10754: LD_INT 24
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: ST_TO_ADDR
10763: GO 10980
10765: LD_INT 45
10767: DOUBLE
10768: EQUAL
10769: IFTRUE 10773
10771: GO 10799
10773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10774: LD_ADDR_VAR 0 3
10778: PUSH
10779: LD_INT 21
10781: PUSH
10782: LD_INT 22
10784: PUSH
10785: LD_INT 23
10787: PUSH
10788: LD_INT 24
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: ST_TO_ADDR
10797: GO 10980
10799: LD_INT 49
10801: DOUBLE
10802: EQUAL
10803: IFTRUE 10807
10805: GO 10833
10807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10808: LD_ADDR_VAR 0 3
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 22
10818: PUSH
10819: LD_INT 23
10821: PUSH
10822: LD_INT 24
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: ST_TO_ADDR
10831: GO 10980
10833: LD_INT 51
10835: DOUBLE
10836: EQUAL
10837: IFTRUE 10841
10839: GO 10867
10841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_INT 21
10849: PUSH
10850: LD_INT 22
10852: PUSH
10853: LD_INT 23
10855: PUSH
10856: LD_INT 24
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: ST_TO_ADDR
10865: GO 10980
10867: LD_INT 52
10869: DOUBLE
10870: EQUAL
10871: IFTRUE 10875
10873: GO 10901
10875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10876: LD_ADDR_VAR 0 3
10880: PUSH
10881: LD_INT 21
10883: PUSH
10884: LD_INT 22
10886: PUSH
10887: LD_INT 23
10889: PUSH
10890: LD_INT 24
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: ST_TO_ADDR
10899: GO 10980
10901: LD_INT 53
10903: DOUBLE
10904: EQUAL
10905: IFTRUE 10909
10907: GO 10927
10909: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10910: LD_ADDR_VAR 0 3
10914: PUSH
10915: LD_INT 23
10917: PUSH
10918: LD_INT 24
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: ST_TO_ADDR
10925: GO 10980
10927: LD_INT 46
10929: DOUBLE
10930: EQUAL
10931: IFTRUE 10935
10933: GO 10953
10935: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10936: LD_ADDR_VAR 0 3
10940: PUSH
10941: LD_INT 23
10943: PUSH
10944: LD_INT 24
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: ST_TO_ADDR
10951: GO 10980
10953: LD_INT 47
10955: DOUBLE
10956: EQUAL
10957: IFTRUE 10961
10959: GO 10979
10961: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10962: LD_ADDR_VAR 0 3
10966: PUSH
10967: LD_INT 23
10969: PUSH
10970: LD_INT 24
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: ST_TO_ADDR
10977: GO 10980
10979: POP
// result := ( chassis in result ) ;
10980: LD_ADDR_VAR 0 3
10984: PUSH
10985: LD_VAR 0 1
10989: PUSH
10990: LD_VAR 0 3
10994: IN
10995: ST_TO_ADDR
// end ;
10996: LD_VAR 0 3
11000: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
11001: LD_INT 0
11003: PPUSH
11004: PPUSH
11005: PPUSH
11006: PPUSH
11007: PPUSH
11008: PPUSH
11009: PPUSH
// result := array ;
11010: LD_ADDR_VAR 0 5
11014: PUSH
11015: LD_VAR 0 1
11019: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
11020: LD_VAR 0 1
11024: NOT
11025: PUSH
11026: LD_VAR 0 2
11030: NOT
11031: OR
11032: PUSH
11033: LD_VAR 0 3
11037: NOT
11038: OR
11039: PUSH
11040: LD_VAR 0 2
11044: PUSH
11045: LD_VAR 0 1
11049: GREATER
11050: OR
11051: PUSH
11052: LD_VAR 0 3
11056: PUSH
11057: LD_VAR 0 1
11061: GREATER
11062: OR
11063: IFFALSE 11067
// exit ;
11065: GO 11363
// if direction then
11067: LD_VAR 0 4
11071: IFFALSE 11135
// begin d := 1 ;
11073: LD_ADDR_VAR 0 9
11077: PUSH
11078: LD_INT 1
11080: ST_TO_ADDR
// if i_from > i_to then
11081: LD_VAR 0 2
11085: PUSH
11086: LD_VAR 0 3
11090: GREATER
11091: IFFALSE 11117
// length := ( array - i_from ) + i_to else
11093: LD_ADDR_VAR 0 11
11097: PUSH
11098: LD_VAR 0 1
11102: PUSH
11103: LD_VAR 0 2
11107: MINUS
11108: PUSH
11109: LD_VAR 0 3
11113: PLUS
11114: ST_TO_ADDR
11115: GO 11133
// length := i_to - i_from ;
11117: LD_ADDR_VAR 0 11
11121: PUSH
11122: LD_VAR 0 3
11126: PUSH
11127: LD_VAR 0 2
11131: MINUS
11132: ST_TO_ADDR
// end else
11133: GO 11196
// begin d := - 1 ;
11135: LD_ADDR_VAR 0 9
11139: PUSH
11140: LD_INT 1
11142: NEG
11143: ST_TO_ADDR
// if i_from > i_to then
11144: LD_VAR 0 2
11148: PUSH
11149: LD_VAR 0 3
11153: GREATER
11154: IFFALSE 11174
// length := i_from - i_to else
11156: LD_ADDR_VAR 0 11
11160: PUSH
11161: LD_VAR 0 2
11165: PUSH
11166: LD_VAR 0 3
11170: MINUS
11171: ST_TO_ADDR
11172: GO 11196
// length := ( array - i_to ) + i_from ;
11174: LD_ADDR_VAR 0 11
11178: PUSH
11179: LD_VAR 0 1
11183: PUSH
11184: LD_VAR 0 3
11188: MINUS
11189: PUSH
11190: LD_VAR 0 2
11194: PLUS
11195: ST_TO_ADDR
// end ; if not length then
11196: LD_VAR 0 11
11200: NOT
11201: IFFALSE 11205
// exit ;
11203: GO 11363
// tmp := array ;
11205: LD_ADDR_VAR 0 10
11209: PUSH
11210: LD_VAR 0 1
11214: ST_TO_ADDR
// for i = 1 to length do
11215: LD_ADDR_VAR 0 6
11219: PUSH
11220: DOUBLE
11221: LD_INT 1
11223: DEC
11224: ST_TO_ADDR
11225: LD_VAR 0 11
11229: PUSH
11230: FOR_TO
11231: IFFALSE 11351
// begin for j = 1 to array do
11233: LD_ADDR_VAR 0 7
11237: PUSH
11238: DOUBLE
11239: LD_INT 1
11241: DEC
11242: ST_TO_ADDR
11243: LD_VAR 0 1
11247: PUSH
11248: FOR_TO
11249: IFFALSE 11337
// begin k := j + d ;
11251: LD_ADDR_VAR 0 8
11255: PUSH
11256: LD_VAR 0 7
11260: PUSH
11261: LD_VAR 0 9
11265: PLUS
11266: ST_TO_ADDR
// if k > array then
11267: LD_VAR 0 8
11271: PUSH
11272: LD_VAR 0 1
11276: GREATER
11277: IFFALSE 11287
// k := 1 ;
11279: LD_ADDR_VAR 0 8
11283: PUSH
11284: LD_INT 1
11286: ST_TO_ADDR
// if not k then
11287: LD_VAR 0 8
11291: NOT
11292: IFFALSE 11304
// k := array ;
11294: LD_ADDR_VAR 0 8
11298: PUSH
11299: LD_VAR 0 1
11303: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11304: LD_ADDR_VAR 0 10
11308: PUSH
11309: LD_VAR 0 10
11313: PPUSH
11314: LD_VAR 0 8
11318: PPUSH
11319: LD_VAR 0 1
11323: PUSH
11324: LD_VAR 0 7
11328: ARRAY
11329: PPUSH
11330: CALL_OW 1
11334: ST_TO_ADDR
// end ;
11335: GO 11248
11337: POP
11338: POP
// array := tmp ;
11339: LD_ADDR_VAR 0 1
11343: PUSH
11344: LD_VAR 0 10
11348: ST_TO_ADDR
// end ;
11349: GO 11230
11351: POP
11352: POP
// result := array ;
11353: LD_ADDR_VAR 0 5
11357: PUSH
11358: LD_VAR 0 1
11362: ST_TO_ADDR
// end ;
11363: LD_VAR 0 5
11367: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11368: LD_INT 0
11370: PPUSH
11371: PPUSH
// result := 0 ;
11372: LD_ADDR_VAR 0 3
11376: PUSH
11377: LD_INT 0
11379: ST_TO_ADDR
// if not array or not value in array then
11380: LD_VAR 0 1
11384: NOT
11385: PUSH
11386: LD_VAR 0 2
11390: PUSH
11391: LD_VAR 0 1
11395: IN
11396: NOT
11397: OR
11398: IFFALSE 11402
// exit ;
11400: GO 11456
// for i = 1 to array do
11402: LD_ADDR_VAR 0 4
11406: PUSH
11407: DOUBLE
11408: LD_INT 1
11410: DEC
11411: ST_TO_ADDR
11412: LD_VAR 0 1
11416: PUSH
11417: FOR_TO
11418: IFFALSE 11454
// if value = array [ i ] then
11420: LD_VAR 0 2
11424: PUSH
11425: LD_VAR 0 1
11429: PUSH
11430: LD_VAR 0 4
11434: ARRAY
11435: EQUAL
11436: IFFALSE 11452
// begin result := i ;
11438: LD_ADDR_VAR 0 3
11442: PUSH
11443: LD_VAR 0 4
11447: ST_TO_ADDR
// exit ;
11448: POP
11449: POP
11450: GO 11456
// end ;
11452: GO 11417
11454: POP
11455: POP
// end ;
11456: LD_VAR 0 3
11460: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11461: LD_INT 0
11463: PPUSH
// vc_chassis := chassis ;
11464: LD_ADDR_OWVAR 37
11468: PUSH
11469: LD_VAR 0 1
11473: ST_TO_ADDR
// vc_engine := engine ;
11474: LD_ADDR_OWVAR 39
11478: PUSH
11479: LD_VAR 0 2
11483: ST_TO_ADDR
// vc_control := control ;
11484: LD_ADDR_OWVAR 38
11488: PUSH
11489: LD_VAR 0 3
11493: ST_TO_ADDR
// vc_weapon := weapon ;
11494: LD_ADDR_OWVAR 40
11498: PUSH
11499: LD_VAR 0 4
11503: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11504: LD_ADDR_OWVAR 41
11508: PUSH
11509: LD_VAR 0 5
11513: ST_TO_ADDR
// end ;
11514: LD_VAR 0 6
11518: RET
// export function WantPlant ( unit ) ; var task ; begin
11519: LD_INT 0
11521: PPUSH
11522: PPUSH
// result := false ;
11523: LD_ADDR_VAR 0 2
11527: PUSH
11528: LD_INT 0
11530: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11531: LD_ADDR_VAR 0 3
11535: PUSH
11536: LD_VAR 0 1
11540: PPUSH
11541: CALL_OW 437
11545: ST_TO_ADDR
// if task then
11546: LD_VAR 0 3
11550: IFFALSE 11578
// if task [ 1 ] [ 1 ] = p then
11552: LD_VAR 0 3
11556: PUSH
11557: LD_INT 1
11559: ARRAY
11560: PUSH
11561: LD_INT 1
11563: ARRAY
11564: PUSH
11565: LD_STRING p
11567: EQUAL
11568: IFFALSE 11578
// result := true ;
11570: LD_ADDR_VAR 0 2
11574: PUSH
11575: LD_INT 1
11577: ST_TO_ADDR
// end ;
11578: LD_VAR 0 2
11582: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11583: LD_INT 0
11585: PPUSH
11586: PPUSH
11587: PPUSH
11588: PPUSH
// if pos < 1 then
11589: LD_VAR 0 2
11593: PUSH
11594: LD_INT 1
11596: LESS
11597: IFFALSE 11601
// exit ;
11599: GO 11904
// if pos = 1 then
11601: LD_VAR 0 2
11605: PUSH
11606: LD_INT 1
11608: EQUAL
11609: IFFALSE 11642
// result := Replace ( arr , pos [ 1 ] , value ) else
11611: LD_ADDR_VAR 0 4
11615: PUSH
11616: LD_VAR 0 1
11620: PPUSH
11621: LD_VAR 0 2
11625: PUSH
11626: LD_INT 1
11628: ARRAY
11629: PPUSH
11630: LD_VAR 0 3
11634: PPUSH
11635: CALL_OW 1
11639: ST_TO_ADDR
11640: GO 11904
// begin tmp := arr ;
11642: LD_ADDR_VAR 0 6
11646: PUSH
11647: LD_VAR 0 1
11651: ST_TO_ADDR
// s_arr := [ tmp ] ;
11652: LD_ADDR_VAR 0 7
11656: PUSH
11657: LD_VAR 0 6
11661: PUSH
11662: EMPTY
11663: LIST
11664: ST_TO_ADDR
// for i = 1 to pos - 1 do
11665: LD_ADDR_VAR 0 5
11669: PUSH
11670: DOUBLE
11671: LD_INT 1
11673: DEC
11674: ST_TO_ADDR
11675: LD_VAR 0 2
11679: PUSH
11680: LD_INT 1
11682: MINUS
11683: PUSH
11684: FOR_TO
11685: IFFALSE 11730
// begin tmp := tmp [ pos [ i ] ] ;
11687: LD_ADDR_VAR 0 6
11691: PUSH
11692: LD_VAR 0 6
11696: PUSH
11697: LD_VAR 0 2
11701: PUSH
11702: LD_VAR 0 5
11706: ARRAY
11707: ARRAY
11708: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11709: LD_ADDR_VAR 0 7
11713: PUSH
11714: LD_VAR 0 7
11718: PUSH
11719: LD_VAR 0 6
11723: PUSH
11724: EMPTY
11725: LIST
11726: ADD
11727: ST_TO_ADDR
// end ;
11728: GO 11684
11730: POP
11731: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11732: LD_ADDR_VAR 0 6
11736: PUSH
11737: LD_VAR 0 6
11741: PPUSH
11742: LD_VAR 0 2
11746: PUSH
11747: LD_VAR 0 2
11751: ARRAY
11752: PPUSH
11753: LD_VAR 0 3
11757: PPUSH
11758: CALL_OW 1
11762: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11763: LD_ADDR_VAR 0 7
11767: PUSH
11768: LD_VAR 0 7
11772: PPUSH
11773: LD_VAR 0 7
11777: PPUSH
11778: LD_VAR 0 6
11782: PPUSH
11783: CALL_OW 1
11787: ST_TO_ADDR
// for i = s_arr downto 2 do
11788: LD_ADDR_VAR 0 5
11792: PUSH
11793: DOUBLE
11794: LD_VAR 0 7
11798: INC
11799: ST_TO_ADDR
11800: LD_INT 2
11802: PUSH
11803: FOR_DOWNTO
11804: IFFALSE 11888
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11806: LD_ADDR_VAR 0 6
11810: PUSH
11811: LD_VAR 0 7
11815: PUSH
11816: LD_VAR 0 5
11820: PUSH
11821: LD_INT 1
11823: MINUS
11824: ARRAY
11825: PPUSH
11826: LD_VAR 0 2
11830: PUSH
11831: LD_VAR 0 5
11835: PUSH
11836: LD_INT 1
11838: MINUS
11839: ARRAY
11840: PPUSH
11841: LD_VAR 0 7
11845: PUSH
11846: LD_VAR 0 5
11850: ARRAY
11851: PPUSH
11852: CALL_OW 1
11856: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11857: LD_ADDR_VAR 0 7
11861: PUSH
11862: LD_VAR 0 7
11866: PPUSH
11867: LD_VAR 0 5
11871: PUSH
11872: LD_INT 1
11874: MINUS
11875: PPUSH
11876: LD_VAR 0 6
11880: PPUSH
11881: CALL_OW 1
11885: ST_TO_ADDR
// end ;
11886: GO 11803
11888: POP
11889: POP
// result := s_arr [ 1 ] ;
11890: LD_ADDR_VAR 0 4
11894: PUSH
11895: LD_VAR 0 7
11899: PUSH
11900: LD_INT 1
11902: ARRAY
11903: ST_TO_ADDR
// end ; end ;
11904: LD_VAR 0 4
11908: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11909: LD_INT 0
11911: PPUSH
11912: PPUSH
// if not list then
11913: LD_VAR 0 1
11917: NOT
11918: IFFALSE 11922
// exit ;
11920: GO 12013
// i := list [ pos1 ] ;
11922: LD_ADDR_VAR 0 5
11926: PUSH
11927: LD_VAR 0 1
11931: PUSH
11932: LD_VAR 0 2
11936: ARRAY
11937: ST_TO_ADDR
// if not i then
11938: LD_VAR 0 5
11942: NOT
11943: IFFALSE 11947
// exit ;
11945: GO 12013
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11947: LD_ADDR_VAR 0 1
11951: PUSH
11952: LD_VAR 0 1
11956: PPUSH
11957: LD_VAR 0 2
11961: PPUSH
11962: LD_VAR 0 1
11966: PUSH
11967: LD_VAR 0 3
11971: ARRAY
11972: PPUSH
11973: CALL_OW 1
11977: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11978: LD_ADDR_VAR 0 1
11982: PUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: LD_VAR 0 3
11992: PPUSH
11993: LD_VAR 0 5
11997: PPUSH
11998: CALL_OW 1
12002: ST_TO_ADDR
// result := list ;
12003: LD_ADDR_VAR 0 4
12007: PUSH
12008: LD_VAR 0 1
12012: ST_TO_ADDR
// end ;
12013: LD_VAR 0 4
12017: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
12018: LD_INT 0
12020: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
12021: LD_ADDR_VAR 0 5
12025: PUSH
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 250
12035: PPUSH
12036: LD_VAR 0 1
12040: PPUSH
12041: CALL_OW 251
12045: PPUSH
12046: LD_VAR 0 2
12050: PPUSH
12051: LD_VAR 0 3
12055: PPUSH
12056: LD_VAR 0 4
12060: PPUSH
12061: CALL 12071 0 5
12065: ST_TO_ADDR
// end ;
12066: LD_VAR 0 5
12070: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
12071: LD_INT 0
12073: PPUSH
12074: PPUSH
12075: PPUSH
12076: PPUSH
// if not list then
12077: LD_VAR 0 3
12081: NOT
12082: IFFALSE 12086
// exit ;
12084: GO 12474
// result := [ ] ;
12086: LD_ADDR_VAR 0 6
12090: PUSH
12091: EMPTY
12092: ST_TO_ADDR
// for i in list do
12093: LD_ADDR_VAR 0 7
12097: PUSH
12098: LD_VAR 0 3
12102: PUSH
12103: FOR_IN
12104: IFFALSE 12306
// begin tmp := GetDistUnitXY ( i , x , y ) ;
12106: LD_ADDR_VAR 0 9
12110: PUSH
12111: LD_VAR 0 7
12115: PPUSH
12116: LD_VAR 0 1
12120: PPUSH
12121: LD_VAR 0 2
12125: PPUSH
12126: CALL_OW 297
12130: ST_TO_ADDR
// if not result then
12131: LD_VAR 0 6
12135: NOT
12136: IFFALSE 12162
// result := [ [ i , tmp ] ] else
12138: LD_ADDR_VAR 0 6
12142: PUSH
12143: LD_VAR 0 7
12147: PUSH
12148: LD_VAR 0 9
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: ST_TO_ADDR
12160: GO 12304
// begin if result [ result ] [ 2 ] < tmp then
12162: LD_VAR 0 6
12166: PUSH
12167: LD_VAR 0 6
12171: ARRAY
12172: PUSH
12173: LD_INT 2
12175: ARRAY
12176: PUSH
12177: LD_VAR 0 9
12181: LESS
12182: IFFALSE 12224
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
12184: LD_ADDR_VAR 0 6
12188: PUSH
12189: LD_VAR 0 6
12193: PPUSH
12194: LD_VAR 0 6
12198: PUSH
12199: LD_INT 1
12201: PLUS
12202: PPUSH
12203: LD_VAR 0 7
12207: PUSH
12208: LD_VAR 0 9
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PPUSH
12217: CALL_OW 2
12221: ST_TO_ADDR
12222: GO 12304
// for j = 1 to result do
12224: LD_ADDR_VAR 0 8
12228: PUSH
12229: DOUBLE
12230: LD_INT 1
12232: DEC
12233: ST_TO_ADDR
12234: LD_VAR 0 6
12238: PUSH
12239: FOR_TO
12240: IFFALSE 12302
// begin if tmp < result [ j ] [ 2 ] then
12242: LD_VAR 0 9
12246: PUSH
12247: LD_VAR 0 6
12251: PUSH
12252: LD_VAR 0 8
12256: ARRAY
12257: PUSH
12258: LD_INT 2
12260: ARRAY
12261: LESS
12262: IFFALSE 12300
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12264: LD_ADDR_VAR 0 6
12268: PUSH
12269: LD_VAR 0 6
12273: PPUSH
12274: LD_VAR 0 8
12278: PPUSH
12279: LD_VAR 0 7
12283: PUSH
12284: LD_VAR 0 9
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PPUSH
12293: CALL_OW 2
12297: ST_TO_ADDR
// break ;
12298: GO 12302
// end ; end ;
12300: GO 12239
12302: POP
12303: POP
// end ; end ;
12304: GO 12103
12306: POP
12307: POP
// if result and not asc then
12308: LD_VAR 0 6
12312: PUSH
12313: LD_VAR 0 4
12317: NOT
12318: AND
12319: IFFALSE 12394
// begin tmp := result ;
12321: LD_ADDR_VAR 0 9
12325: PUSH
12326: LD_VAR 0 6
12330: ST_TO_ADDR
// for i = tmp downto 1 do
12331: LD_ADDR_VAR 0 7
12335: PUSH
12336: DOUBLE
12337: LD_VAR 0 9
12341: INC
12342: ST_TO_ADDR
12343: LD_INT 1
12345: PUSH
12346: FOR_DOWNTO
12347: IFFALSE 12392
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12349: LD_ADDR_VAR 0 6
12353: PUSH
12354: LD_VAR 0 6
12358: PPUSH
12359: LD_VAR 0 9
12363: PUSH
12364: LD_VAR 0 7
12368: MINUS
12369: PUSH
12370: LD_INT 1
12372: PLUS
12373: PPUSH
12374: LD_VAR 0 9
12378: PUSH
12379: LD_VAR 0 7
12383: ARRAY
12384: PPUSH
12385: CALL_OW 1
12389: ST_TO_ADDR
12390: GO 12346
12392: POP
12393: POP
// end ; tmp := [ ] ;
12394: LD_ADDR_VAR 0 9
12398: PUSH
12399: EMPTY
12400: ST_TO_ADDR
// if mode then
12401: LD_VAR 0 5
12405: IFFALSE 12474
// begin for i = 1 to result do
12407: LD_ADDR_VAR 0 7
12411: PUSH
12412: DOUBLE
12413: LD_INT 1
12415: DEC
12416: ST_TO_ADDR
12417: LD_VAR 0 6
12421: PUSH
12422: FOR_TO
12423: IFFALSE 12462
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12425: LD_ADDR_VAR 0 9
12429: PUSH
12430: LD_VAR 0 9
12434: PPUSH
12435: LD_VAR 0 7
12439: PPUSH
12440: LD_VAR 0 6
12444: PUSH
12445: LD_VAR 0 7
12449: ARRAY
12450: PUSH
12451: LD_INT 1
12453: ARRAY
12454: PPUSH
12455: CALL_OW 1
12459: ST_TO_ADDR
12460: GO 12422
12462: POP
12463: POP
// result := tmp ;
12464: LD_ADDR_VAR 0 6
12468: PUSH
12469: LD_VAR 0 9
12473: ST_TO_ADDR
// end ; end ;
12474: LD_VAR 0 6
12478: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12479: LD_INT 0
12481: PPUSH
12482: PPUSH
12483: PPUSH
12484: PPUSH
12485: PPUSH
12486: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12487: LD_ADDR_VAR 0 5
12491: PUSH
12492: LD_INT 0
12494: PUSH
12495: LD_INT 0
12497: PUSH
12498: LD_INT 0
12500: PUSH
12501: EMPTY
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: ST_TO_ADDR
// if not x or not y then
12509: LD_VAR 0 2
12513: NOT
12514: PUSH
12515: LD_VAR 0 3
12519: NOT
12520: OR
12521: IFFALSE 12525
// exit ;
12523: GO 14177
// if not range then
12525: LD_VAR 0 4
12529: NOT
12530: IFFALSE 12540
// range := 10 ;
12532: LD_ADDR_VAR 0 4
12536: PUSH
12537: LD_INT 10
12539: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12540: LD_ADDR_VAR 0 8
12544: PUSH
12545: LD_INT 81
12547: PUSH
12548: LD_VAR 0 1
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: LD_INT 92
12559: PUSH
12560: LD_VAR 0 2
12564: PUSH
12565: LD_VAR 0 3
12569: PUSH
12570: LD_VAR 0 4
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 3
12583: PUSH
12584: LD_INT 21
12586: PUSH
12587: LD_INT 3
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: LIST
12602: PPUSH
12603: CALL_OW 69
12607: ST_TO_ADDR
// if not tmp then
12608: LD_VAR 0 8
12612: NOT
12613: IFFALSE 12617
// exit ;
12615: GO 14177
// for i in tmp do
12617: LD_ADDR_VAR 0 6
12621: PUSH
12622: LD_VAR 0 8
12626: PUSH
12627: FOR_IN
12628: IFFALSE 14152
// begin points := [ 0 , 0 , 0 ] ;
12630: LD_ADDR_VAR 0 9
12634: PUSH
12635: LD_INT 0
12637: PUSH
12638: LD_INT 0
12640: PUSH
12641: LD_INT 0
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: LIST
12648: ST_TO_ADDR
// bpoints := 1 ;
12649: LD_ADDR_VAR 0 10
12653: PUSH
12654: LD_INT 1
12656: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12657: LD_VAR 0 6
12661: PPUSH
12662: CALL_OW 247
12666: PUSH
12667: LD_INT 1
12669: DOUBLE
12670: EQUAL
12671: IFTRUE 12675
12673: GO 13253
12675: POP
// begin if GetClass ( i ) = 1 then
12676: LD_VAR 0 6
12680: PPUSH
12681: CALL_OW 257
12685: PUSH
12686: LD_INT 1
12688: EQUAL
12689: IFFALSE 12710
// points := [ 10 , 5 , 3 ] ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 10
12698: PUSH
12699: LD_INT 5
12701: PUSH
12702: LD_INT 3
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: LIST
12709: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
12710: LD_VAR 0 6
12714: PPUSH
12715: CALL_OW 257
12719: PUSH
12720: LD_INT 2
12722: PUSH
12723: LD_INT 3
12725: PUSH
12726: LD_INT 4
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: IN
12734: IFFALSE 12755
// points := [ 3 , 2 , 1 ] ;
12736: LD_ADDR_VAR 0 9
12740: PUSH
12741: LD_INT 3
12743: PUSH
12744: LD_INT 2
12746: PUSH
12747: LD_INT 1
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: LIST
12754: ST_TO_ADDR
// if GetClass ( i ) = 5 then
12755: LD_VAR 0 6
12759: PPUSH
12760: CALL_OW 257
12764: PUSH
12765: LD_INT 5
12767: EQUAL
12768: IFFALSE 12789
// points := [ 130 , 5 , 2 ] ;
12770: LD_ADDR_VAR 0 9
12774: PUSH
12775: LD_INT 130
12777: PUSH
12778: LD_INT 5
12780: PUSH
12781: LD_INT 2
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: ST_TO_ADDR
// if GetClass ( i ) = 8 then
12789: LD_VAR 0 6
12793: PPUSH
12794: CALL_OW 257
12798: PUSH
12799: LD_INT 8
12801: EQUAL
12802: IFFALSE 12823
// points := [ 35 , 35 , 30 ] ;
12804: LD_ADDR_VAR 0 9
12808: PUSH
12809: LD_INT 35
12811: PUSH
12812: LD_INT 35
12814: PUSH
12815: LD_INT 30
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: LIST
12822: ST_TO_ADDR
// if GetClass ( i ) = 9 then
12823: LD_VAR 0 6
12827: PPUSH
12828: CALL_OW 257
12832: PUSH
12833: LD_INT 9
12835: EQUAL
12836: IFFALSE 12857
// points := [ 20 , 55 , 40 ] ;
12838: LD_ADDR_VAR 0 9
12842: PUSH
12843: LD_INT 20
12845: PUSH
12846: LD_INT 55
12848: PUSH
12849: LD_INT 40
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: LIST
12856: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
12857: LD_VAR 0 6
12861: PPUSH
12862: CALL_OW 257
12866: PUSH
12867: LD_INT 12
12869: PUSH
12870: LD_INT 16
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: IN
12877: IFFALSE 12898
// points := [ 5 , 3 , 2 ] ;
12879: LD_ADDR_VAR 0 9
12883: PUSH
12884: LD_INT 5
12886: PUSH
12887: LD_INT 3
12889: PUSH
12890: LD_INT 2
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: ST_TO_ADDR
// if GetClass ( i ) = 17 then
12898: LD_VAR 0 6
12902: PPUSH
12903: CALL_OW 257
12907: PUSH
12908: LD_INT 17
12910: EQUAL
12911: IFFALSE 12932
// points := [ 100 , 50 , 75 ] ;
12913: LD_ADDR_VAR 0 9
12917: PUSH
12918: LD_INT 100
12920: PUSH
12921: LD_INT 50
12923: PUSH
12924: LD_INT 75
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: ST_TO_ADDR
// if GetClass ( i ) = 15 then
12932: LD_VAR 0 6
12936: PPUSH
12937: CALL_OW 257
12941: PUSH
12942: LD_INT 15
12944: EQUAL
12945: IFFALSE 12966
// points := [ 10 , 5 , 3 ] ;
12947: LD_ADDR_VAR 0 9
12951: PUSH
12952: LD_INT 10
12954: PUSH
12955: LD_INT 5
12957: PUSH
12958: LD_INT 3
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: LIST
12965: ST_TO_ADDR
// if GetClass ( i ) = 14 then
12966: LD_VAR 0 6
12970: PPUSH
12971: CALL_OW 257
12975: PUSH
12976: LD_INT 14
12978: EQUAL
12979: IFFALSE 13000
// points := [ 10 , 0 , 0 ] ;
12981: LD_ADDR_VAR 0 9
12985: PUSH
12986: LD_INT 10
12988: PUSH
12989: LD_INT 0
12991: PUSH
12992: LD_INT 0
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: LIST
12999: ST_TO_ADDR
// if GetClass ( i ) = 11 then
13000: LD_VAR 0 6
13004: PPUSH
13005: CALL_OW 257
13009: PUSH
13010: LD_INT 11
13012: EQUAL
13013: IFFALSE 13034
// points := [ 30 , 10 , 5 ] ;
13015: LD_ADDR_VAR 0 9
13019: PUSH
13020: LD_INT 30
13022: PUSH
13023: LD_INT 10
13025: PUSH
13026: LD_INT 5
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
13034: LD_VAR 0 1
13038: PPUSH
13039: LD_INT 5
13041: PPUSH
13042: CALL_OW 321
13046: PUSH
13047: LD_INT 2
13049: EQUAL
13050: IFFALSE 13067
// bpoints := bpoints * 1.8 ;
13052: LD_ADDR_VAR 0 10
13056: PUSH
13057: LD_VAR 0 10
13061: PUSH
13062: LD_REAL  1.80000000000000E+0000
13065: MUL
13066: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
13067: LD_VAR 0 6
13071: PPUSH
13072: CALL_OW 257
13076: PUSH
13077: LD_INT 1
13079: PUSH
13080: LD_INT 2
13082: PUSH
13083: LD_INT 3
13085: PUSH
13086: LD_INT 4
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: IN
13095: PUSH
13096: LD_VAR 0 1
13100: PPUSH
13101: LD_INT 51
13103: PPUSH
13104: CALL_OW 321
13108: PUSH
13109: LD_INT 2
13111: EQUAL
13112: AND
13113: IFFALSE 13130
// bpoints := bpoints * 1.2 ;
13115: LD_ADDR_VAR 0 10
13119: PUSH
13120: LD_VAR 0 10
13124: PUSH
13125: LD_REAL  1.20000000000000E+0000
13128: MUL
13129: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
13130: LD_VAR 0 6
13134: PPUSH
13135: CALL_OW 257
13139: PUSH
13140: LD_INT 5
13142: PUSH
13143: LD_INT 7
13145: PUSH
13146: LD_INT 9
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: LIST
13153: IN
13154: PUSH
13155: LD_VAR 0 1
13159: PPUSH
13160: LD_INT 52
13162: PPUSH
13163: CALL_OW 321
13167: PUSH
13168: LD_INT 2
13170: EQUAL
13171: AND
13172: IFFALSE 13189
// bpoints := bpoints * 1.5 ;
13174: LD_ADDR_VAR 0 10
13178: PUSH
13179: LD_VAR 0 10
13183: PUSH
13184: LD_REAL  1.50000000000000E+0000
13187: MUL
13188: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
13189: LD_VAR 0 1
13193: PPUSH
13194: LD_INT 66
13196: PPUSH
13197: CALL_OW 321
13201: PUSH
13202: LD_INT 2
13204: EQUAL
13205: IFFALSE 13222
// bpoints := bpoints * 1.1 ;
13207: LD_ADDR_VAR 0 10
13211: PUSH
13212: LD_VAR 0 10
13216: PUSH
13217: LD_REAL  1.10000000000000E+0000
13220: MUL
13221: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13222: LD_ADDR_VAR 0 10
13226: PUSH
13227: LD_VAR 0 10
13231: PUSH
13232: LD_VAR 0 6
13236: PPUSH
13237: LD_INT 1
13239: PPUSH
13240: CALL_OW 259
13244: PUSH
13245: LD_REAL  1.15000000000000E+0000
13248: MUL
13249: MUL
13250: ST_TO_ADDR
// end ; unit_vehicle :
13251: GO 14081
13253: LD_INT 2
13255: DOUBLE
13256: EQUAL
13257: IFTRUE 13261
13259: GO 14069
13261: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13262: LD_VAR 0 6
13266: PPUSH
13267: CALL_OW 264
13271: PUSH
13272: LD_INT 2
13274: PUSH
13275: LD_INT 42
13277: PUSH
13278: LD_INT 24
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: LIST
13285: IN
13286: IFFALSE 13307
// points := [ 25 , 5 , 3 ] ;
13288: LD_ADDR_VAR 0 9
13292: PUSH
13293: LD_INT 25
13295: PUSH
13296: LD_INT 5
13298: PUSH
13299: LD_INT 3
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13307: LD_VAR 0 6
13311: PPUSH
13312: CALL_OW 264
13316: PUSH
13317: LD_INT 4
13319: PUSH
13320: LD_INT 43
13322: PUSH
13323: LD_INT 25
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: LIST
13330: IN
13331: IFFALSE 13352
// points := [ 40 , 15 , 5 ] ;
13333: LD_ADDR_VAR 0 9
13337: PUSH
13338: LD_INT 40
13340: PUSH
13341: LD_INT 15
13343: PUSH
13344: LD_INT 5
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13352: LD_VAR 0 6
13356: PPUSH
13357: CALL_OW 264
13361: PUSH
13362: LD_INT 3
13364: PUSH
13365: LD_INT 23
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: IN
13372: IFFALSE 13393
// points := [ 7 , 25 , 8 ] ;
13374: LD_ADDR_VAR 0 9
13378: PUSH
13379: LD_INT 7
13381: PUSH
13382: LD_INT 25
13384: PUSH
13385: LD_INT 8
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13393: LD_VAR 0 6
13397: PPUSH
13398: CALL_OW 264
13402: PUSH
13403: LD_INT 5
13405: PUSH
13406: LD_INT 27
13408: PUSH
13409: LD_INT 44
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: IN
13417: IFFALSE 13438
// points := [ 14 , 50 , 16 ] ;
13419: LD_ADDR_VAR 0 9
13423: PUSH
13424: LD_INT 14
13426: PUSH
13427: LD_INT 50
13429: PUSH
13430: LD_INT 16
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: LIST
13437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13438: LD_VAR 0 6
13442: PPUSH
13443: CALL_OW 264
13447: PUSH
13448: LD_INT 6
13450: PUSH
13451: LD_INT 46
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: IN
13458: IFFALSE 13479
// points := [ 32 , 120 , 70 ] ;
13460: LD_ADDR_VAR 0 9
13464: PUSH
13465: LD_INT 32
13467: PUSH
13468: LD_INT 120
13470: PUSH
13471: LD_INT 70
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13479: LD_VAR 0 6
13483: PPUSH
13484: CALL_OW 264
13488: PUSH
13489: LD_INT 7
13491: PUSH
13492: LD_INT 28
13494: PUSH
13495: LD_INT 45
13497: PUSH
13498: LD_EXP 43
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: IN
13509: IFFALSE 13530
// points := [ 35 , 20 , 45 ] ;
13511: LD_ADDR_VAR 0 9
13515: PUSH
13516: LD_INT 35
13518: PUSH
13519: LD_INT 20
13521: PUSH
13522: LD_INT 45
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13530: LD_VAR 0 6
13534: PPUSH
13535: CALL_OW 264
13539: PUSH
13540: LD_INT 47
13542: PUSH
13543: EMPTY
13544: LIST
13545: IN
13546: IFFALSE 13567
// points := [ 67 , 45 , 75 ] ;
13548: LD_ADDR_VAR 0 9
13552: PUSH
13553: LD_INT 67
13555: PUSH
13556: LD_INT 45
13558: PUSH
13559: LD_INT 75
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: LIST
13566: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13567: LD_VAR 0 6
13571: PPUSH
13572: CALL_OW 264
13576: PUSH
13577: LD_INT 26
13579: PUSH
13580: EMPTY
13581: LIST
13582: IN
13583: IFFALSE 13604
// points := [ 120 , 30 , 80 ] ;
13585: LD_ADDR_VAR 0 9
13589: PUSH
13590: LD_INT 120
13592: PUSH
13593: LD_INT 30
13595: PUSH
13596: LD_INT 80
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: LIST
13603: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13604: LD_VAR 0 6
13608: PPUSH
13609: CALL_OW 264
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: EMPTY
13618: LIST
13619: IN
13620: IFFALSE 13641
// points := [ 40 , 1 , 1 ] ;
13622: LD_ADDR_VAR 0 9
13626: PUSH
13627: LD_INT 40
13629: PUSH
13630: LD_INT 1
13632: PUSH
13633: LD_INT 1
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: LIST
13640: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13641: LD_VAR 0 6
13645: PPUSH
13646: CALL_OW 264
13650: PUSH
13651: LD_INT 29
13653: PUSH
13654: EMPTY
13655: LIST
13656: IN
13657: IFFALSE 13678
// points := [ 70 , 200 , 400 ] ;
13659: LD_ADDR_VAR 0 9
13663: PUSH
13664: LD_INT 70
13666: PUSH
13667: LD_INT 200
13669: PUSH
13670: LD_INT 400
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
13678: LD_VAR 0 6
13682: PPUSH
13683: CALL_OW 264
13687: PUSH
13688: LD_INT 14
13690: PUSH
13691: LD_INT 53
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: IN
13698: IFFALSE 13719
// points := [ 40 , 10 , 20 ] ;
13700: LD_ADDR_VAR 0 9
13704: PUSH
13705: LD_INT 40
13707: PUSH
13708: LD_INT 10
13710: PUSH
13711: LD_INT 20
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: LIST
13718: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
13719: LD_VAR 0 6
13723: PPUSH
13724: CALL_OW 264
13728: PUSH
13729: LD_INT 9
13731: PUSH
13732: EMPTY
13733: LIST
13734: IN
13735: IFFALSE 13756
// points := [ 5 , 70 , 20 ] ;
13737: LD_ADDR_VAR 0 9
13741: PUSH
13742: LD_INT 5
13744: PUSH
13745: LD_INT 70
13747: PUSH
13748: LD_INT 20
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: LIST
13755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
13756: LD_VAR 0 6
13760: PPUSH
13761: CALL_OW 264
13765: PUSH
13766: LD_INT 10
13768: PUSH
13769: EMPTY
13770: LIST
13771: IN
13772: IFFALSE 13793
// points := [ 35 , 110 , 70 ] ;
13774: LD_ADDR_VAR 0 9
13778: PUSH
13779: LD_INT 35
13781: PUSH
13782: LD_INT 110
13784: PUSH
13785: LD_INT 70
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: LIST
13792: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
13793: LD_VAR 0 6
13797: PPUSH
13798: CALL_OW 265
13802: PUSH
13803: LD_INT 25
13805: EQUAL
13806: IFFALSE 13827
// points := [ 80 , 65 , 100 ] ;
13808: LD_ADDR_VAR 0 9
13812: PUSH
13813: LD_INT 80
13815: PUSH
13816: LD_INT 65
13818: PUSH
13819: LD_INT 100
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
13827: LD_VAR 0 6
13831: PPUSH
13832: CALL_OW 263
13836: PUSH
13837: LD_INT 1
13839: EQUAL
13840: IFFALSE 13875
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
13842: LD_ADDR_VAR 0 10
13846: PUSH
13847: LD_VAR 0 10
13851: PUSH
13852: LD_VAR 0 6
13856: PPUSH
13857: CALL_OW 311
13861: PPUSH
13862: LD_INT 3
13864: PPUSH
13865: CALL_OW 259
13869: PUSH
13870: LD_INT 4
13872: MUL
13873: MUL
13874: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
13875: LD_VAR 0 6
13879: PPUSH
13880: CALL_OW 263
13884: PUSH
13885: LD_INT 2
13887: EQUAL
13888: IFFALSE 13939
// begin j := IsControledBy ( i ) ;
13890: LD_ADDR_VAR 0 7
13894: PUSH
13895: LD_VAR 0 6
13899: PPUSH
13900: CALL_OW 312
13904: ST_TO_ADDR
// if j then
13905: LD_VAR 0 7
13909: IFFALSE 13939
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
13911: LD_ADDR_VAR 0 10
13915: PUSH
13916: LD_VAR 0 10
13920: PUSH
13921: LD_VAR 0 7
13925: PPUSH
13926: LD_INT 3
13928: PPUSH
13929: CALL_OW 259
13933: PUSH
13934: LD_INT 3
13936: MUL
13937: MUL
13938: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
13939: LD_VAR 0 6
13943: PPUSH
13944: CALL_OW 264
13948: PUSH
13949: LD_INT 5
13951: PUSH
13952: LD_INT 6
13954: PUSH
13955: LD_INT 46
13957: PUSH
13958: LD_INT 44
13960: PUSH
13961: LD_INT 47
13963: PUSH
13964: LD_INT 45
13966: PUSH
13967: LD_INT 28
13969: PUSH
13970: LD_INT 7
13972: PUSH
13973: LD_INT 27
13975: PUSH
13976: LD_INT 29
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: IN
13991: PUSH
13992: LD_VAR 0 1
13996: PPUSH
13997: LD_INT 52
13999: PPUSH
14000: CALL_OW 321
14004: PUSH
14005: LD_INT 2
14007: EQUAL
14008: AND
14009: IFFALSE 14026
// bpoints := bpoints * 1.2 ;
14011: LD_ADDR_VAR 0 10
14015: PUSH
14016: LD_VAR 0 10
14020: PUSH
14021: LD_REAL  1.20000000000000E+0000
14024: MUL
14025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
14026: LD_VAR 0 6
14030: PPUSH
14031: CALL_OW 264
14035: PUSH
14036: LD_INT 6
14038: PUSH
14039: LD_INT 46
14041: PUSH
14042: LD_INT 47
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: IN
14050: IFFALSE 14067
// bpoints := bpoints * 1.2 ;
14052: LD_ADDR_VAR 0 10
14056: PUSH
14057: LD_VAR 0 10
14061: PUSH
14062: LD_REAL  1.20000000000000E+0000
14065: MUL
14066: ST_TO_ADDR
// end ; unit_building :
14067: GO 14081
14069: LD_INT 3
14071: DOUBLE
14072: EQUAL
14073: IFTRUE 14077
14075: GO 14080
14077: POP
// ; end ;
14078: GO 14081
14080: POP
// for j = 1 to 3 do
14081: LD_ADDR_VAR 0 7
14085: PUSH
14086: DOUBLE
14087: LD_INT 1
14089: DEC
14090: ST_TO_ADDR
14091: LD_INT 3
14093: PUSH
14094: FOR_TO
14095: IFFALSE 14148
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
14097: LD_ADDR_VAR 0 5
14101: PUSH
14102: LD_VAR 0 5
14106: PPUSH
14107: LD_VAR 0 7
14111: PPUSH
14112: LD_VAR 0 5
14116: PUSH
14117: LD_VAR 0 7
14121: ARRAY
14122: PUSH
14123: LD_VAR 0 9
14127: PUSH
14128: LD_VAR 0 7
14132: ARRAY
14133: PUSH
14134: LD_VAR 0 10
14138: MUL
14139: PLUS
14140: PPUSH
14141: CALL_OW 1
14145: ST_TO_ADDR
14146: GO 14094
14148: POP
14149: POP
// end ;
14150: GO 12627
14152: POP
14153: POP
// result := Replace ( result , 4 , tmp ) ;
14154: LD_ADDR_VAR 0 5
14158: PUSH
14159: LD_VAR 0 5
14163: PPUSH
14164: LD_INT 4
14166: PPUSH
14167: LD_VAR 0 8
14171: PPUSH
14172: CALL_OW 1
14176: ST_TO_ADDR
// end ;
14177: LD_VAR 0 5
14181: RET
// export function DangerAtRange ( unit , range ) ; begin
14182: LD_INT 0
14184: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
14185: LD_ADDR_VAR 0 3
14189: PUSH
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 255
14199: PPUSH
14200: LD_VAR 0 1
14204: PPUSH
14205: CALL_OW 250
14209: PPUSH
14210: LD_VAR 0 1
14214: PPUSH
14215: CALL_OW 251
14219: PPUSH
14220: LD_VAR 0 2
14224: PPUSH
14225: CALL 12479 0 4
14229: ST_TO_ADDR
// end ;
14230: LD_VAR 0 3
14234: RET
// export function DangerInArea ( side , area ) ; begin
14235: LD_INT 0
14237: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14238: LD_ADDR_VAR 0 3
14242: PUSH
14243: LD_VAR 0 2
14247: PPUSH
14248: LD_INT 81
14250: PUSH
14251: LD_VAR 0 1
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PPUSH
14260: CALL_OW 70
14264: ST_TO_ADDR
// end ;
14265: LD_VAR 0 3
14269: RET
// export function IsExtension ( b ) ; begin
14270: LD_INT 0
14272: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14273: LD_ADDR_VAR 0 2
14277: PUSH
14278: LD_VAR 0 1
14282: PUSH
14283: LD_INT 23
14285: PUSH
14286: LD_INT 20
14288: PUSH
14289: LD_INT 22
14291: PUSH
14292: LD_INT 17
14294: PUSH
14295: LD_INT 24
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 19
14303: PUSH
14304: LD_INT 16
14306: PUSH
14307: LD_INT 25
14309: PUSH
14310: LD_INT 18
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: IN
14325: ST_TO_ADDR
// end ;
14326: LD_VAR 0 2
14330: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14331: LD_INT 0
14333: PPUSH
14334: PPUSH
14335: PPUSH
// result := [ ] ;
14336: LD_ADDR_VAR 0 4
14340: PUSH
14341: EMPTY
14342: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14343: LD_ADDR_VAR 0 5
14347: PUSH
14348: LD_VAR 0 2
14352: PPUSH
14353: LD_INT 21
14355: PUSH
14356: LD_INT 3
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PPUSH
14363: CALL_OW 70
14367: ST_TO_ADDR
// if not tmp then
14368: LD_VAR 0 5
14372: NOT
14373: IFFALSE 14377
// exit ;
14375: GO 14441
// if checkLink then
14377: LD_VAR 0 3
14381: IFFALSE 14431
// begin for i in tmp do
14383: LD_ADDR_VAR 0 6
14387: PUSH
14388: LD_VAR 0 5
14392: PUSH
14393: FOR_IN
14394: IFFALSE 14429
// if GetBase ( i ) <> base then
14396: LD_VAR 0 6
14400: PPUSH
14401: CALL_OW 274
14405: PUSH
14406: LD_VAR 0 1
14410: NONEQUAL
14411: IFFALSE 14427
// ComLinkToBase ( base , i ) ;
14413: LD_VAR 0 1
14417: PPUSH
14418: LD_VAR 0 6
14422: PPUSH
14423: CALL_OW 169
14427: GO 14393
14429: POP
14430: POP
// end ; result := tmp ;
14431: LD_ADDR_VAR 0 4
14435: PUSH
14436: LD_VAR 0 5
14440: ST_TO_ADDR
// end ;
14441: LD_VAR 0 4
14445: RET
// export function ComComplete ( units , b ) ; var i ; begin
14446: LD_INT 0
14448: PPUSH
14449: PPUSH
// if not units then
14450: LD_VAR 0 1
14454: NOT
14455: IFFALSE 14459
// exit ;
14457: GO 14549
// for i in units do
14459: LD_ADDR_VAR 0 4
14463: PUSH
14464: LD_VAR 0 1
14468: PUSH
14469: FOR_IN
14470: IFFALSE 14547
// if BuildingStatus ( b ) = bs_build then
14472: LD_VAR 0 2
14476: PPUSH
14477: CALL_OW 461
14481: PUSH
14482: LD_INT 1
14484: EQUAL
14485: IFFALSE 14545
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14487: LD_VAR 0 4
14491: PPUSH
14492: LD_STRING h
14494: PUSH
14495: LD_VAR 0 2
14499: PPUSH
14500: CALL_OW 250
14504: PUSH
14505: LD_VAR 0 2
14509: PPUSH
14510: CALL_OW 251
14514: PUSH
14515: LD_VAR 0 2
14519: PUSH
14520: LD_INT 0
14522: PUSH
14523: LD_INT 0
14525: PUSH
14526: LD_INT 0
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: PPUSH
14541: CALL_OW 446
14545: GO 14469
14547: POP
14548: POP
// end ;
14549: LD_VAR 0 3
14553: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14554: LD_INT 0
14556: PPUSH
14557: PPUSH
14558: PPUSH
14559: PPUSH
14560: PPUSH
14561: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14562: LD_VAR 0 1
14566: NOT
14567: PUSH
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL_OW 263
14577: PUSH
14578: LD_INT 2
14580: NONEQUAL
14581: OR
14582: IFFALSE 14586
// exit ;
14584: GO 14902
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14586: LD_ADDR_VAR 0 6
14590: PUSH
14591: LD_INT 22
14593: PUSH
14594: LD_VAR 0 1
14598: PPUSH
14599: CALL_OW 255
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 2
14610: PUSH
14611: LD_INT 30
14613: PUSH
14614: LD_INT 36
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 34
14623: PUSH
14624: LD_INT 31
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: LIST
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PPUSH
14640: CALL_OW 69
14644: ST_TO_ADDR
// if not tmp then
14645: LD_VAR 0 6
14649: NOT
14650: IFFALSE 14654
// exit ;
14652: GO 14902
// result := [ ] ;
14654: LD_ADDR_VAR 0 2
14658: PUSH
14659: EMPTY
14660: ST_TO_ADDR
// for i in tmp do
14661: LD_ADDR_VAR 0 3
14665: PUSH
14666: LD_VAR 0 6
14670: PUSH
14671: FOR_IN
14672: IFFALSE 14743
// begin t := UnitsInside ( i ) ;
14674: LD_ADDR_VAR 0 4
14678: PUSH
14679: LD_VAR 0 3
14683: PPUSH
14684: CALL_OW 313
14688: ST_TO_ADDR
// if t then
14689: LD_VAR 0 4
14693: IFFALSE 14741
// for j in t do
14695: LD_ADDR_VAR 0 7
14699: PUSH
14700: LD_VAR 0 4
14704: PUSH
14705: FOR_IN
14706: IFFALSE 14739
// result := Replace ( result , result + 1 , j ) ;
14708: LD_ADDR_VAR 0 2
14712: PUSH
14713: LD_VAR 0 2
14717: PPUSH
14718: LD_VAR 0 2
14722: PUSH
14723: LD_INT 1
14725: PLUS
14726: PPUSH
14727: LD_VAR 0 7
14731: PPUSH
14732: CALL_OW 1
14736: ST_TO_ADDR
14737: GO 14705
14739: POP
14740: POP
// end ;
14741: GO 14671
14743: POP
14744: POP
// if not result then
14745: LD_VAR 0 2
14749: NOT
14750: IFFALSE 14754
// exit ;
14752: GO 14902
// mech := result [ 1 ] ;
14754: LD_ADDR_VAR 0 5
14758: PUSH
14759: LD_VAR 0 2
14763: PUSH
14764: LD_INT 1
14766: ARRAY
14767: ST_TO_ADDR
// if result > 1 then
14768: LD_VAR 0 2
14772: PUSH
14773: LD_INT 1
14775: GREATER
14776: IFFALSE 14888
// begin for i = 2 to result do
14778: LD_ADDR_VAR 0 3
14782: PUSH
14783: DOUBLE
14784: LD_INT 2
14786: DEC
14787: ST_TO_ADDR
14788: LD_VAR 0 2
14792: PUSH
14793: FOR_TO
14794: IFFALSE 14886
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
14796: LD_ADDR_VAR 0 4
14800: PUSH
14801: LD_VAR 0 2
14805: PUSH
14806: LD_VAR 0 3
14810: ARRAY
14811: PPUSH
14812: LD_INT 3
14814: PPUSH
14815: CALL_OW 259
14819: PUSH
14820: LD_VAR 0 2
14824: PUSH
14825: LD_VAR 0 3
14829: ARRAY
14830: PPUSH
14831: CALL_OW 432
14835: MINUS
14836: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
14837: LD_VAR 0 4
14841: PUSH
14842: LD_VAR 0 5
14846: PPUSH
14847: LD_INT 3
14849: PPUSH
14850: CALL_OW 259
14854: PUSH
14855: LD_VAR 0 5
14859: PPUSH
14860: CALL_OW 432
14864: MINUS
14865: GREATEREQUAL
14866: IFFALSE 14884
// mech := result [ i ] ;
14868: LD_ADDR_VAR 0 5
14872: PUSH
14873: LD_VAR 0 2
14877: PUSH
14878: LD_VAR 0 3
14882: ARRAY
14883: ST_TO_ADDR
// end ;
14884: GO 14793
14886: POP
14887: POP
// end ; ComLinkTo ( vehicle , mech ) ;
14888: LD_VAR 0 1
14892: PPUSH
14893: LD_VAR 0 5
14897: PPUSH
14898: CALL_OW 135
// end ;
14902: LD_VAR 0 2
14906: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
14907: LD_INT 0
14909: PPUSH
14910: PPUSH
14911: PPUSH
14912: PPUSH
14913: PPUSH
14914: PPUSH
14915: PPUSH
14916: PPUSH
14917: PPUSH
14918: PPUSH
14919: PPUSH
14920: PPUSH
14921: PPUSH
// result := [ ] ;
14922: LD_ADDR_VAR 0 7
14926: PUSH
14927: EMPTY
14928: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 266
14938: PUSH
14939: LD_INT 0
14941: PUSH
14942: LD_INT 1
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: IN
14949: NOT
14950: IFFALSE 14954
// exit ;
14952: GO 16588
// if name then
14954: LD_VAR 0 3
14958: IFFALSE 14974
// SetBName ( base_dep , name ) ;
14960: LD_VAR 0 1
14964: PPUSH
14965: LD_VAR 0 3
14969: PPUSH
14970: CALL_OW 500
// base := GetBase ( base_dep ) ;
14974: LD_ADDR_VAR 0 15
14978: PUSH
14979: LD_VAR 0 1
14983: PPUSH
14984: CALL_OW 274
14988: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
14989: LD_ADDR_VAR 0 16
14993: PUSH
14994: LD_VAR 0 1
14998: PPUSH
14999: CALL_OW 255
15003: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
15004: LD_ADDR_VAR 0 17
15008: PUSH
15009: LD_VAR 0 1
15013: PPUSH
15014: CALL_OW 248
15018: ST_TO_ADDR
// if sources then
15019: LD_VAR 0 5
15023: IFFALSE 15070
// for i = 1 to 3 do
15025: LD_ADDR_VAR 0 8
15029: PUSH
15030: DOUBLE
15031: LD_INT 1
15033: DEC
15034: ST_TO_ADDR
15035: LD_INT 3
15037: PUSH
15038: FOR_TO
15039: IFFALSE 15068
// AddResourceType ( base , i , sources [ i ] ) ;
15041: LD_VAR 0 15
15045: PPUSH
15046: LD_VAR 0 8
15050: PPUSH
15051: LD_VAR 0 5
15055: PUSH
15056: LD_VAR 0 8
15060: ARRAY
15061: PPUSH
15062: CALL_OW 276
15066: GO 15038
15068: POP
15069: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
15070: LD_ADDR_VAR 0 18
15074: PUSH
15075: LD_VAR 0 15
15079: PPUSH
15080: LD_VAR 0 2
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL 14331 0 3
15092: ST_TO_ADDR
// InitHc ;
15093: CALL_OW 19
// InitUc ;
15097: CALL_OW 18
// uc_side := side ;
15101: LD_ADDR_OWVAR 20
15105: PUSH
15106: LD_VAR 0 16
15110: ST_TO_ADDR
// uc_nation := nation ;
15111: LD_ADDR_OWVAR 21
15115: PUSH
15116: LD_VAR 0 17
15120: ST_TO_ADDR
// if buildings then
15121: LD_VAR 0 18
15125: IFFALSE 16447
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
15127: LD_ADDR_VAR 0 19
15131: PUSH
15132: LD_VAR 0 18
15136: PPUSH
15137: LD_INT 2
15139: PUSH
15140: LD_INT 30
15142: PUSH
15143: LD_INT 29
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 30
15152: PUSH
15153: LD_INT 30
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: LIST
15164: PPUSH
15165: CALL_OW 72
15169: ST_TO_ADDR
// if tmp then
15170: LD_VAR 0 19
15174: IFFALSE 15222
// for i in tmp do
15176: LD_ADDR_VAR 0 8
15180: PUSH
15181: LD_VAR 0 19
15185: PUSH
15186: FOR_IN
15187: IFFALSE 15220
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
15189: LD_VAR 0 8
15193: PPUSH
15194: CALL_OW 250
15198: PPUSH
15199: LD_VAR 0 8
15203: PPUSH
15204: CALL_OW 251
15208: PPUSH
15209: LD_VAR 0 16
15213: PPUSH
15214: CALL_OW 441
15218: GO 15186
15220: POP
15221: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15222: LD_VAR 0 18
15226: PPUSH
15227: LD_INT 2
15229: PUSH
15230: LD_INT 30
15232: PUSH
15233: LD_INT 32
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 30
15242: PUSH
15243: LD_INT 33
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: LIST
15254: PPUSH
15255: CALL_OW 72
15259: IFFALSE 15347
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15261: LD_ADDR_VAR 0 8
15265: PUSH
15266: LD_VAR 0 18
15270: PPUSH
15271: LD_INT 2
15273: PUSH
15274: LD_INT 30
15276: PUSH
15277: LD_INT 32
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 30
15286: PUSH
15287: LD_INT 33
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: LIST
15298: PPUSH
15299: CALL_OW 72
15303: PUSH
15304: FOR_IN
15305: IFFALSE 15345
// begin if not GetBWeapon ( i ) then
15307: LD_VAR 0 8
15311: PPUSH
15312: CALL_OW 269
15316: NOT
15317: IFFALSE 15343
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15319: LD_VAR 0 8
15323: PPUSH
15324: LD_VAR 0 8
15328: PPUSH
15329: LD_VAR 0 2
15333: PPUSH
15334: CALL 16593 0 2
15338: PPUSH
15339: CALL_OW 431
// end ;
15343: GO 15304
15345: POP
15346: POP
// end ; for i = 1 to personel do
15347: LD_ADDR_VAR 0 8
15351: PUSH
15352: DOUBLE
15353: LD_INT 1
15355: DEC
15356: ST_TO_ADDR
15357: LD_VAR 0 6
15361: PUSH
15362: FOR_TO
15363: IFFALSE 16427
// begin if i > 4 then
15365: LD_VAR 0 8
15369: PUSH
15370: LD_INT 4
15372: GREATER
15373: IFFALSE 15377
// break ;
15375: GO 16427
// case i of 1 :
15377: LD_VAR 0 8
15381: PUSH
15382: LD_INT 1
15384: DOUBLE
15385: EQUAL
15386: IFTRUE 15390
15388: GO 15470
15390: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15391: LD_ADDR_VAR 0 12
15395: PUSH
15396: LD_VAR 0 18
15400: PPUSH
15401: LD_INT 22
15403: PUSH
15404: LD_VAR 0 16
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 58
15415: PUSH
15416: EMPTY
15417: LIST
15418: PUSH
15419: LD_INT 2
15421: PUSH
15422: LD_INT 30
15424: PUSH
15425: LD_INT 32
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 30
15434: PUSH
15435: LD_INT 4
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 30
15444: PUSH
15445: LD_INT 5
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: LIST
15462: PPUSH
15463: CALL_OW 72
15467: ST_TO_ADDR
15468: GO 15692
15470: LD_INT 2
15472: DOUBLE
15473: EQUAL
15474: IFTRUE 15478
15476: GO 15540
15478: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15479: LD_ADDR_VAR 0 12
15483: PUSH
15484: LD_VAR 0 18
15488: PPUSH
15489: LD_INT 22
15491: PUSH
15492: LD_VAR 0 16
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 2
15503: PUSH
15504: LD_INT 30
15506: PUSH
15507: LD_INT 0
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 30
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: LIST
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PPUSH
15533: CALL_OW 72
15537: ST_TO_ADDR
15538: GO 15692
15540: LD_INT 3
15542: DOUBLE
15543: EQUAL
15544: IFTRUE 15548
15546: GO 15610
15548: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15549: LD_ADDR_VAR 0 12
15553: PUSH
15554: LD_VAR 0 18
15558: PPUSH
15559: LD_INT 22
15561: PUSH
15562: LD_VAR 0 16
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: LD_INT 30
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 30
15586: PUSH
15587: LD_INT 3
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: LIST
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PPUSH
15603: CALL_OW 72
15607: ST_TO_ADDR
15608: GO 15692
15610: LD_INT 4
15612: DOUBLE
15613: EQUAL
15614: IFTRUE 15618
15616: GO 15691
15618: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15619: LD_ADDR_VAR 0 12
15623: PUSH
15624: LD_VAR 0 18
15628: PPUSH
15629: LD_INT 22
15631: PUSH
15632: LD_VAR 0 16
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 2
15643: PUSH
15644: LD_INT 30
15646: PUSH
15647: LD_INT 6
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 30
15656: PUSH
15657: LD_INT 7
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 30
15666: PUSH
15667: LD_INT 8
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 72
15688: ST_TO_ADDR
15689: GO 15692
15691: POP
// if i = 1 then
15692: LD_VAR 0 8
15696: PUSH
15697: LD_INT 1
15699: EQUAL
15700: IFFALSE 15811
// begin tmp := [ ] ;
15702: LD_ADDR_VAR 0 19
15706: PUSH
15707: EMPTY
15708: ST_TO_ADDR
// for j in f do
15709: LD_ADDR_VAR 0 9
15713: PUSH
15714: LD_VAR 0 12
15718: PUSH
15719: FOR_IN
15720: IFFALSE 15793
// if GetBType ( j ) = b_bunker then
15722: LD_VAR 0 9
15726: PPUSH
15727: CALL_OW 266
15731: PUSH
15732: LD_INT 32
15734: EQUAL
15735: IFFALSE 15762
// tmp := Insert ( tmp , 1 , j ) else
15737: LD_ADDR_VAR 0 19
15741: PUSH
15742: LD_VAR 0 19
15746: PPUSH
15747: LD_INT 1
15749: PPUSH
15750: LD_VAR 0 9
15754: PPUSH
15755: CALL_OW 2
15759: ST_TO_ADDR
15760: GO 15791
// tmp := Insert ( tmp , tmp + 1 , j ) ;
15762: LD_ADDR_VAR 0 19
15766: PUSH
15767: LD_VAR 0 19
15771: PPUSH
15772: LD_VAR 0 19
15776: PUSH
15777: LD_INT 1
15779: PLUS
15780: PPUSH
15781: LD_VAR 0 9
15785: PPUSH
15786: CALL_OW 2
15790: ST_TO_ADDR
15791: GO 15719
15793: POP
15794: POP
// if tmp then
15795: LD_VAR 0 19
15799: IFFALSE 15811
// f := tmp ;
15801: LD_ADDR_VAR 0 12
15805: PUSH
15806: LD_VAR 0 19
15810: ST_TO_ADDR
// end ; x := personel [ i ] ;
15811: LD_ADDR_VAR 0 13
15815: PUSH
15816: LD_VAR 0 6
15820: PUSH
15821: LD_VAR 0 8
15825: ARRAY
15826: ST_TO_ADDR
// if x = - 1 then
15827: LD_VAR 0 13
15831: PUSH
15832: LD_INT 1
15834: NEG
15835: EQUAL
15836: IFFALSE 16045
// begin for j in f do
15838: LD_ADDR_VAR 0 9
15842: PUSH
15843: LD_VAR 0 12
15847: PUSH
15848: FOR_IN
15849: IFFALSE 16041
// repeat InitHc ;
15851: CALL_OW 19
// if GetBType ( j ) = b_barracks then
15855: LD_VAR 0 9
15859: PPUSH
15860: CALL_OW 266
15864: PUSH
15865: LD_INT 5
15867: EQUAL
15868: IFFALSE 15938
// begin if UnitsInside ( j ) < 3 then
15870: LD_VAR 0 9
15874: PPUSH
15875: CALL_OW 313
15879: PUSH
15880: LD_INT 3
15882: LESS
15883: IFFALSE 15919
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15885: LD_INT 0
15887: PPUSH
15888: LD_INT 5
15890: PUSH
15891: LD_INT 8
15893: PUSH
15894: LD_INT 9
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: LIST
15901: PUSH
15902: LD_VAR 0 17
15906: ARRAY
15907: PPUSH
15908: LD_VAR 0 4
15912: PPUSH
15913: CALL_OW 380
15917: GO 15936
// PrepareHuman ( false , i , skill ) ;
15919: LD_INT 0
15921: PPUSH
15922: LD_VAR 0 8
15926: PPUSH
15927: LD_VAR 0 4
15931: PPUSH
15932: CALL_OW 380
// end else
15936: GO 15955
// PrepareHuman ( false , i , skill ) ;
15938: LD_INT 0
15940: PPUSH
15941: LD_VAR 0 8
15945: PPUSH
15946: LD_VAR 0 4
15950: PPUSH
15951: CALL_OW 380
// un := CreateHuman ;
15955: LD_ADDR_VAR 0 14
15959: PUSH
15960: CALL_OW 44
15964: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15965: LD_ADDR_VAR 0 7
15969: PUSH
15970: LD_VAR 0 7
15974: PPUSH
15975: LD_INT 1
15977: PPUSH
15978: LD_VAR 0 14
15982: PPUSH
15983: CALL_OW 2
15987: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
15988: LD_VAR 0 14
15992: PPUSH
15993: LD_VAR 0 9
15997: PPUSH
15998: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
16002: LD_VAR 0 9
16006: PPUSH
16007: CALL_OW 313
16011: PUSH
16012: LD_INT 6
16014: EQUAL
16015: PUSH
16016: LD_VAR 0 9
16020: PPUSH
16021: CALL_OW 266
16025: PUSH
16026: LD_INT 32
16028: PUSH
16029: LD_INT 31
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: IN
16036: OR
16037: IFFALSE 15851
16039: GO 15848
16041: POP
16042: POP
// end else
16043: GO 16425
// for j = 1 to x do
16045: LD_ADDR_VAR 0 9
16049: PUSH
16050: DOUBLE
16051: LD_INT 1
16053: DEC
16054: ST_TO_ADDR
16055: LD_VAR 0 13
16059: PUSH
16060: FOR_TO
16061: IFFALSE 16423
// begin InitHc ;
16063: CALL_OW 19
// if not f then
16067: LD_VAR 0 12
16071: NOT
16072: IFFALSE 16161
// begin PrepareHuman ( false , i , skill ) ;
16074: LD_INT 0
16076: PPUSH
16077: LD_VAR 0 8
16081: PPUSH
16082: LD_VAR 0 4
16086: PPUSH
16087: CALL_OW 380
// un := CreateHuman ;
16091: LD_ADDR_VAR 0 14
16095: PUSH
16096: CALL_OW 44
16100: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16101: LD_ADDR_VAR 0 7
16105: PUSH
16106: LD_VAR 0 7
16110: PPUSH
16111: LD_INT 1
16113: PPUSH
16114: LD_VAR 0 14
16118: PPUSH
16119: CALL_OW 2
16123: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16124: LD_VAR 0 14
16128: PPUSH
16129: LD_VAR 0 1
16133: PPUSH
16134: CALL_OW 250
16138: PPUSH
16139: LD_VAR 0 1
16143: PPUSH
16144: CALL_OW 251
16148: PPUSH
16149: LD_INT 10
16151: PPUSH
16152: LD_INT 0
16154: PPUSH
16155: CALL_OW 50
// continue ;
16159: GO 16060
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
16161: LD_VAR 0 12
16165: PUSH
16166: LD_INT 1
16168: ARRAY
16169: PPUSH
16170: CALL_OW 313
16174: PUSH
16175: LD_VAR 0 12
16179: PUSH
16180: LD_INT 1
16182: ARRAY
16183: PPUSH
16184: CALL_OW 266
16188: PUSH
16189: LD_INT 32
16191: PUSH
16192: LD_INT 31
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: IN
16199: AND
16200: PUSH
16201: LD_VAR 0 12
16205: PUSH
16206: LD_INT 1
16208: ARRAY
16209: PPUSH
16210: CALL_OW 313
16214: PUSH
16215: LD_INT 6
16217: EQUAL
16218: OR
16219: IFFALSE 16239
// f := Delete ( f , 1 ) ;
16221: LD_ADDR_VAR 0 12
16225: PUSH
16226: LD_VAR 0 12
16230: PPUSH
16231: LD_INT 1
16233: PPUSH
16234: CALL_OW 3
16238: ST_TO_ADDR
// if not f then
16239: LD_VAR 0 12
16243: NOT
16244: IFFALSE 16262
// begin x := x + 2 ;
16246: LD_ADDR_VAR 0 13
16250: PUSH
16251: LD_VAR 0 13
16255: PUSH
16256: LD_INT 2
16258: PLUS
16259: ST_TO_ADDR
// continue ;
16260: GO 16060
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16262: LD_VAR 0 12
16266: PUSH
16267: LD_INT 1
16269: ARRAY
16270: PPUSH
16271: CALL_OW 266
16275: PUSH
16276: LD_INT 5
16278: EQUAL
16279: IFFALSE 16353
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16281: LD_VAR 0 12
16285: PUSH
16286: LD_INT 1
16288: ARRAY
16289: PPUSH
16290: CALL_OW 313
16294: PUSH
16295: LD_INT 3
16297: LESS
16298: IFFALSE 16334
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16300: LD_INT 0
16302: PPUSH
16303: LD_INT 5
16305: PUSH
16306: LD_INT 8
16308: PUSH
16309: LD_INT 9
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: LD_VAR 0 17
16321: ARRAY
16322: PPUSH
16323: LD_VAR 0 4
16327: PPUSH
16328: CALL_OW 380
16332: GO 16351
// PrepareHuman ( false , i , skill ) ;
16334: LD_INT 0
16336: PPUSH
16337: LD_VAR 0 8
16341: PPUSH
16342: LD_VAR 0 4
16346: PPUSH
16347: CALL_OW 380
// end else
16351: GO 16370
// PrepareHuman ( false , i , skill ) ;
16353: LD_INT 0
16355: PPUSH
16356: LD_VAR 0 8
16360: PPUSH
16361: LD_VAR 0 4
16365: PPUSH
16366: CALL_OW 380
// un := CreateHuman ;
16370: LD_ADDR_VAR 0 14
16374: PUSH
16375: CALL_OW 44
16379: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16380: LD_ADDR_VAR 0 7
16384: PUSH
16385: LD_VAR 0 7
16389: PPUSH
16390: LD_INT 1
16392: PPUSH
16393: LD_VAR 0 14
16397: PPUSH
16398: CALL_OW 2
16402: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16403: LD_VAR 0 14
16407: PPUSH
16408: LD_VAR 0 12
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: CALL_OW 52
// end ;
16421: GO 16060
16423: POP
16424: POP
// end ;
16425: GO 15362
16427: POP
16428: POP
// result := result ^ buildings ;
16429: LD_ADDR_VAR 0 7
16433: PUSH
16434: LD_VAR 0 7
16438: PUSH
16439: LD_VAR 0 18
16443: ADD
16444: ST_TO_ADDR
// end else
16445: GO 16588
// begin for i = 1 to personel do
16447: LD_ADDR_VAR 0 8
16451: PUSH
16452: DOUBLE
16453: LD_INT 1
16455: DEC
16456: ST_TO_ADDR
16457: LD_VAR 0 6
16461: PUSH
16462: FOR_TO
16463: IFFALSE 16586
// begin if i > 4 then
16465: LD_VAR 0 8
16469: PUSH
16470: LD_INT 4
16472: GREATER
16473: IFFALSE 16477
// break ;
16475: GO 16586
// x := personel [ i ] ;
16477: LD_ADDR_VAR 0 13
16481: PUSH
16482: LD_VAR 0 6
16486: PUSH
16487: LD_VAR 0 8
16491: ARRAY
16492: ST_TO_ADDR
// if x = - 1 then
16493: LD_VAR 0 13
16497: PUSH
16498: LD_INT 1
16500: NEG
16501: EQUAL
16502: IFFALSE 16506
// continue ;
16504: GO 16462
// PrepareHuman ( false , i , skill ) ;
16506: LD_INT 0
16508: PPUSH
16509: LD_VAR 0 8
16513: PPUSH
16514: LD_VAR 0 4
16518: PPUSH
16519: CALL_OW 380
// un := CreateHuman ;
16523: LD_ADDR_VAR 0 14
16527: PUSH
16528: CALL_OW 44
16532: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16533: LD_VAR 0 14
16537: PPUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 250
16547: PPUSH
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 251
16557: PPUSH
16558: LD_INT 10
16560: PPUSH
16561: LD_INT 0
16563: PPUSH
16564: CALL_OW 50
// result := result ^ un ;
16568: LD_ADDR_VAR 0 7
16572: PUSH
16573: LD_VAR 0 7
16577: PUSH
16578: LD_VAR 0 14
16582: ADD
16583: ST_TO_ADDR
// end ;
16584: GO 16462
16586: POP
16587: POP
// end ; end ;
16588: LD_VAR 0 7
16592: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16593: LD_INT 0
16595: PPUSH
16596: PPUSH
16597: PPUSH
16598: PPUSH
16599: PPUSH
16600: PPUSH
16601: PPUSH
16602: PPUSH
16603: PPUSH
16604: PPUSH
16605: PPUSH
16606: PPUSH
16607: PPUSH
16608: PPUSH
16609: PPUSH
16610: PPUSH
// result := false ;
16611: LD_ADDR_VAR 0 3
16615: PUSH
16616: LD_INT 0
16618: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16619: LD_VAR 0 1
16623: NOT
16624: PUSH
16625: LD_VAR 0 1
16629: PPUSH
16630: CALL_OW 266
16634: PUSH
16635: LD_INT 32
16637: PUSH
16638: LD_INT 33
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: IN
16645: NOT
16646: OR
16647: IFFALSE 16651
// exit ;
16649: GO 17760
// nat := GetNation ( tower ) ;
16651: LD_ADDR_VAR 0 12
16655: PUSH
16656: LD_VAR 0 1
16660: PPUSH
16661: CALL_OW 248
16665: ST_TO_ADDR
// side := GetSide ( tower ) ;
16666: LD_ADDR_VAR 0 16
16670: PUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL_OW 255
16680: ST_TO_ADDR
// x := GetX ( tower ) ;
16681: LD_ADDR_VAR 0 10
16685: PUSH
16686: LD_VAR 0 1
16690: PPUSH
16691: CALL_OW 250
16695: ST_TO_ADDR
// y := GetY ( tower ) ;
16696: LD_ADDR_VAR 0 11
16700: PUSH
16701: LD_VAR 0 1
16705: PPUSH
16706: CALL_OW 251
16710: ST_TO_ADDR
// if not x or not y then
16711: LD_VAR 0 10
16715: NOT
16716: PUSH
16717: LD_VAR 0 11
16721: NOT
16722: OR
16723: IFFALSE 16727
// exit ;
16725: GO 17760
// weapon := 0 ;
16727: LD_ADDR_VAR 0 18
16731: PUSH
16732: LD_INT 0
16734: ST_TO_ADDR
// fac_list := [ ] ;
16735: LD_ADDR_VAR 0 17
16739: PUSH
16740: EMPTY
16741: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
16742: LD_ADDR_VAR 0 6
16746: PUSH
16747: LD_VAR 0 1
16751: PPUSH
16752: CALL_OW 274
16756: PPUSH
16757: LD_VAR 0 2
16761: PPUSH
16762: LD_INT 0
16764: PPUSH
16765: CALL 14331 0 3
16769: PPUSH
16770: LD_INT 30
16772: PUSH
16773: LD_INT 3
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PPUSH
16780: CALL_OW 72
16784: ST_TO_ADDR
// if not factories then
16785: LD_VAR 0 6
16789: NOT
16790: IFFALSE 16794
// exit ;
16792: GO 17760
// for i in factories do
16794: LD_ADDR_VAR 0 8
16798: PUSH
16799: LD_VAR 0 6
16803: PUSH
16804: FOR_IN
16805: IFFALSE 16830
// fac_list := fac_list union AvailableWeaponList ( i ) ;
16807: LD_ADDR_VAR 0 17
16811: PUSH
16812: LD_VAR 0 17
16816: PUSH
16817: LD_VAR 0 8
16821: PPUSH
16822: CALL_OW 478
16826: UNION
16827: ST_TO_ADDR
16828: GO 16804
16830: POP
16831: POP
// if not fac_list then
16832: LD_VAR 0 17
16836: NOT
16837: IFFALSE 16841
// exit ;
16839: GO 17760
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
16841: LD_ADDR_VAR 0 5
16845: PUSH
16846: LD_INT 4
16848: PUSH
16849: LD_INT 5
16851: PUSH
16852: LD_INT 9
16854: PUSH
16855: LD_INT 10
16857: PUSH
16858: LD_INT 6
16860: PUSH
16861: LD_INT 7
16863: PUSH
16864: LD_INT 11
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 27
16878: PUSH
16879: LD_INT 28
16881: PUSH
16882: LD_INT 26
16884: PUSH
16885: LD_INT 30
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 43
16896: PUSH
16897: LD_INT 44
16899: PUSH
16900: LD_INT 46
16902: PUSH
16903: LD_INT 45
16905: PUSH
16906: LD_INT 47
16908: PUSH
16909: LD_INT 49
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: LD_VAR 0 12
16929: ARRAY
16930: ST_TO_ADDR
// list := list isect fac_list ;
16931: LD_ADDR_VAR 0 5
16935: PUSH
16936: LD_VAR 0 5
16940: PUSH
16941: LD_VAR 0 17
16945: ISECT
16946: ST_TO_ADDR
// if not list then
16947: LD_VAR 0 5
16951: NOT
16952: IFFALSE 16956
// exit ;
16954: GO 17760
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
16956: LD_VAR 0 12
16960: PUSH
16961: LD_INT 3
16963: EQUAL
16964: PUSH
16965: LD_INT 49
16967: PUSH
16968: LD_VAR 0 5
16972: IN
16973: AND
16974: PUSH
16975: LD_INT 31
16977: PPUSH
16978: LD_VAR 0 16
16982: PPUSH
16983: CALL_OW 321
16987: PUSH
16988: LD_INT 2
16990: EQUAL
16991: AND
16992: IFFALSE 17052
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
16994: LD_INT 22
16996: PUSH
16997: LD_VAR 0 16
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 35
17008: PUSH
17009: LD_INT 49
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 91
17018: PUSH
17019: LD_VAR 0 1
17023: PUSH
17024: LD_INT 10
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: PPUSH
17037: CALL_OW 69
17041: NOT
17042: IFFALSE 17052
// weapon := ru_time_lapser ;
17044: LD_ADDR_VAR 0 18
17048: PUSH
17049: LD_INT 49
17051: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
17052: LD_VAR 0 12
17056: PUSH
17057: LD_INT 1
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: IN
17067: PUSH
17068: LD_INT 11
17070: PUSH
17071: LD_VAR 0 5
17075: IN
17076: PUSH
17077: LD_INT 30
17079: PUSH
17080: LD_VAR 0 5
17084: IN
17085: OR
17086: AND
17087: PUSH
17088: LD_INT 6
17090: PPUSH
17091: LD_VAR 0 16
17095: PPUSH
17096: CALL_OW 321
17100: PUSH
17101: LD_INT 2
17103: EQUAL
17104: AND
17105: IFFALSE 17270
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
17107: LD_INT 22
17109: PUSH
17110: LD_VAR 0 16
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 2
17121: PUSH
17122: LD_INT 35
17124: PUSH
17125: LD_INT 11
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 35
17134: PUSH
17135: LD_INT 30
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 91
17149: PUSH
17150: LD_VAR 0 1
17154: PUSH
17155: LD_INT 18
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: PPUSH
17168: CALL_OW 69
17172: NOT
17173: PUSH
17174: LD_INT 22
17176: PUSH
17177: LD_VAR 0 16
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 2
17188: PUSH
17189: LD_INT 30
17191: PUSH
17192: LD_INT 32
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 30
17201: PUSH
17202: LD_INT 33
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 91
17216: PUSH
17217: LD_VAR 0 1
17221: PUSH
17222: LD_INT 12
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: PPUSH
17238: CALL_OW 69
17242: PUSH
17243: LD_INT 2
17245: GREATER
17246: AND
17247: IFFALSE 17270
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17249: LD_ADDR_VAR 0 18
17253: PUSH
17254: LD_INT 11
17256: PUSH
17257: LD_INT 30
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_VAR 0 12
17268: ARRAY
17269: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17270: LD_VAR 0 18
17274: NOT
17275: PUSH
17276: LD_INT 40
17278: PPUSH
17279: LD_VAR 0 16
17283: PPUSH
17284: CALL_OW 321
17288: PUSH
17289: LD_INT 2
17291: EQUAL
17292: AND
17293: PUSH
17294: LD_INT 7
17296: PUSH
17297: LD_VAR 0 5
17301: IN
17302: PUSH
17303: LD_INT 28
17305: PUSH
17306: LD_VAR 0 5
17310: IN
17311: OR
17312: PUSH
17313: LD_INT 45
17315: PUSH
17316: LD_VAR 0 5
17320: IN
17321: OR
17322: AND
17323: IFFALSE 17577
// begin hex := GetHexInfo ( x , y ) ;
17325: LD_ADDR_VAR 0 4
17329: PUSH
17330: LD_VAR 0 10
17334: PPUSH
17335: LD_VAR 0 11
17339: PPUSH
17340: CALL_OW 546
17344: ST_TO_ADDR
// if hex [ 1 ] then
17345: LD_VAR 0 4
17349: PUSH
17350: LD_INT 1
17352: ARRAY
17353: IFFALSE 17357
// exit ;
17355: GO 17760
// height := hex [ 2 ] ;
17357: LD_ADDR_VAR 0 15
17361: PUSH
17362: LD_VAR 0 4
17366: PUSH
17367: LD_INT 2
17369: ARRAY
17370: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17371: LD_ADDR_VAR 0 14
17375: PUSH
17376: LD_INT 0
17378: PUSH
17379: LD_INT 2
17381: PUSH
17382: LD_INT 3
17384: PUSH
17385: LD_INT 5
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: ST_TO_ADDR
// for i in tmp do
17394: LD_ADDR_VAR 0 8
17398: PUSH
17399: LD_VAR 0 14
17403: PUSH
17404: FOR_IN
17405: IFFALSE 17575
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17407: LD_ADDR_VAR 0 9
17411: PUSH
17412: LD_VAR 0 10
17416: PPUSH
17417: LD_VAR 0 8
17421: PPUSH
17422: LD_INT 5
17424: PPUSH
17425: CALL_OW 272
17429: PUSH
17430: LD_VAR 0 11
17434: PPUSH
17435: LD_VAR 0 8
17439: PPUSH
17440: LD_INT 5
17442: PPUSH
17443: CALL_OW 273
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17452: LD_VAR 0 9
17456: PUSH
17457: LD_INT 1
17459: ARRAY
17460: PPUSH
17461: LD_VAR 0 9
17465: PUSH
17466: LD_INT 2
17468: ARRAY
17469: PPUSH
17470: CALL_OW 488
17474: IFFALSE 17573
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17476: LD_ADDR_VAR 0 4
17480: PUSH
17481: LD_VAR 0 9
17485: PUSH
17486: LD_INT 1
17488: ARRAY
17489: PPUSH
17490: LD_VAR 0 9
17494: PUSH
17495: LD_INT 2
17497: ARRAY
17498: PPUSH
17499: CALL_OW 546
17503: ST_TO_ADDR
// if hex [ 1 ] then
17504: LD_VAR 0 4
17508: PUSH
17509: LD_INT 1
17511: ARRAY
17512: IFFALSE 17516
// continue ;
17514: GO 17404
// h := hex [ 2 ] ;
17516: LD_ADDR_VAR 0 13
17520: PUSH
17521: LD_VAR 0 4
17525: PUSH
17526: LD_INT 2
17528: ARRAY
17529: ST_TO_ADDR
// if h + 7 < height then
17530: LD_VAR 0 13
17534: PUSH
17535: LD_INT 7
17537: PLUS
17538: PUSH
17539: LD_VAR 0 15
17543: LESS
17544: IFFALSE 17573
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17546: LD_ADDR_VAR 0 18
17550: PUSH
17551: LD_INT 7
17553: PUSH
17554: LD_INT 28
17556: PUSH
17557: LD_INT 45
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: PUSH
17565: LD_VAR 0 12
17569: ARRAY
17570: ST_TO_ADDR
// break ;
17571: GO 17575
// end ; end ; end ;
17573: GO 17404
17575: POP
17576: POP
// end ; if not weapon then
17577: LD_VAR 0 18
17581: NOT
17582: IFFALSE 17642
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17584: LD_ADDR_VAR 0 5
17588: PUSH
17589: LD_VAR 0 5
17593: PUSH
17594: LD_INT 11
17596: PUSH
17597: LD_INT 30
17599: PUSH
17600: LD_INT 49
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: LIST
17607: DIFF
17608: ST_TO_ADDR
// if not list then
17609: LD_VAR 0 5
17613: NOT
17614: IFFALSE 17618
// exit ;
17616: GO 17760
// weapon := list [ rand ( 1 , list ) ] ;
17618: LD_ADDR_VAR 0 18
17622: PUSH
17623: LD_VAR 0 5
17627: PUSH
17628: LD_INT 1
17630: PPUSH
17631: LD_VAR 0 5
17635: PPUSH
17636: CALL_OW 12
17640: ARRAY
17641: ST_TO_ADDR
// end ; if weapon then
17642: LD_VAR 0 18
17646: IFFALSE 17760
// begin tmp := CostOfWeapon ( weapon ) ;
17648: LD_ADDR_VAR 0 14
17652: PUSH
17653: LD_VAR 0 18
17657: PPUSH
17658: CALL_OW 451
17662: ST_TO_ADDR
// j := GetBase ( tower ) ;
17663: LD_ADDR_VAR 0 9
17667: PUSH
17668: LD_VAR 0 1
17672: PPUSH
17673: CALL_OW 274
17677: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
17678: LD_VAR 0 9
17682: PPUSH
17683: LD_INT 1
17685: PPUSH
17686: CALL_OW 275
17690: PUSH
17691: LD_VAR 0 14
17695: PUSH
17696: LD_INT 1
17698: ARRAY
17699: GREATEREQUAL
17700: PUSH
17701: LD_VAR 0 9
17705: PPUSH
17706: LD_INT 2
17708: PPUSH
17709: CALL_OW 275
17713: PUSH
17714: LD_VAR 0 14
17718: PUSH
17719: LD_INT 2
17721: ARRAY
17722: GREATEREQUAL
17723: AND
17724: PUSH
17725: LD_VAR 0 9
17729: PPUSH
17730: LD_INT 3
17732: PPUSH
17733: CALL_OW 275
17737: PUSH
17738: LD_VAR 0 14
17742: PUSH
17743: LD_INT 3
17745: ARRAY
17746: GREATEREQUAL
17747: AND
17748: IFFALSE 17760
// result := weapon ;
17750: LD_ADDR_VAR 0 3
17754: PUSH
17755: LD_VAR 0 18
17759: ST_TO_ADDR
// end ; end ;
17760: LD_VAR 0 3
17764: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
17765: LD_INT 0
17767: PPUSH
17768: PPUSH
// result := true ;
17769: LD_ADDR_VAR 0 3
17773: PUSH
17774: LD_INT 1
17776: ST_TO_ADDR
// if array1 = array2 then
17777: LD_VAR 0 1
17781: PUSH
17782: LD_VAR 0 2
17786: EQUAL
17787: IFFALSE 17847
// begin for i = 1 to array1 do
17789: LD_ADDR_VAR 0 4
17793: PUSH
17794: DOUBLE
17795: LD_INT 1
17797: DEC
17798: ST_TO_ADDR
17799: LD_VAR 0 1
17803: PUSH
17804: FOR_TO
17805: IFFALSE 17843
// if array1 [ i ] <> array2 [ i ] then
17807: LD_VAR 0 1
17811: PUSH
17812: LD_VAR 0 4
17816: ARRAY
17817: PUSH
17818: LD_VAR 0 2
17822: PUSH
17823: LD_VAR 0 4
17827: ARRAY
17828: NONEQUAL
17829: IFFALSE 17841
// begin result := false ;
17831: LD_ADDR_VAR 0 3
17835: PUSH
17836: LD_INT 0
17838: ST_TO_ADDR
// break ;
17839: GO 17843
// end ;
17841: GO 17804
17843: POP
17844: POP
// end else
17845: GO 17855
// result := false ;
17847: LD_ADDR_VAR 0 3
17851: PUSH
17852: LD_INT 0
17854: ST_TO_ADDR
// end ;
17855: LD_VAR 0 3
17859: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
17860: LD_INT 0
17862: PPUSH
17863: PPUSH
// if not array1 or not array2 then
17864: LD_VAR 0 1
17868: NOT
17869: PUSH
17870: LD_VAR 0 2
17874: NOT
17875: OR
17876: IFFALSE 17880
// exit ;
17878: GO 17944
// result := true ;
17880: LD_ADDR_VAR 0 3
17884: PUSH
17885: LD_INT 1
17887: ST_TO_ADDR
// for i = 1 to array1 do
17888: LD_ADDR_VAR 0 4
17892: PUSH
17893: DOUBLE
17894: LD_INT 1
17896: DEC
17897: ST_TO_ADDR
17898: LD_VAR 0 1
17902: PUSH
17903: FOR_TO
17904: IFFALSE 17942
// if array1 [ i ] <> array2 [ i ] then
17906: LD_VAR 0 1
17910: PUSH
17911: LD_VAR 0 4
17915: ARRAY
17916: PUSH
17917: LD_VAR 0 2
17921: PUSH
17922: LD_VAR 0 4
17926: ARRAY
17927: NONEQUAL
17928: IFFALSE 17940
// begin result := false ;
17930: LD_ADDR_VAR 0 3
17934: PUSH
17935: LD_INT 0
17937: ST_TO_ADDR
// break ;
17938: GO 17942
// end ;
17940: GO 17903
17942: POP
17943: POP
// end ;
17944: LD_VAR 0 3
17948: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
17949: LD_INT 0
17951: PPUSH
17952: PPUSH
17953: PPUSH
// pom := GetBase ( fac ) ;
17954: LD_ADDR_VAR 0 5
17958: PUSH
17959: LD_VAR 0 1
17963: PPUSH
17964: CALL_OW 274
17968: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
17969: LD_ADDR_VAR 0 4
17973: PUSH
17974: LD_VAR 0 2
17978: PUSH
17979: LD_INT 1
17981: ARRAY
17982: PPUSH
17983: LD_VAR 0 2
17987: PUSH
17988: LD_INT 2
17990: ARRAY
17991: PPUSH
17992: LD_VAR 0 2
17996: PUSH
17997: LD_INT 3
17999: ARRAY
18000: PPUSH
18001: LD_VAR 0 2
18005: PUSH
18006: LD_INT 4
18008: ARRAY
18009: PPUSH
18010: CALL_OW 449
18014: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18015: LD_ADDR_VAR 0 3
18019: PUSH
18020: LD_VAR 0 5
18024: PPUSH
18025: LD_INT 1
18027: PPUSH
18028: CALL_OW 275
18032: PUSH
18033: LD_VAR 0 4
18037: PUSH
18038: LD_INT 1
18040: ARRAY
18041: GREATEREQUAL
18042: PUSH
18043: LD_VAR 0 5
18047: PPUSH
18048: LD_INT 2
18050: PPUSH
18051: CALL_OW 275
18055: PUSH
18056: LD_VAR 0 4
18060: PUSH
18061: LD_INT 2
18063: ARRAY
18064: GREATEREQUAL
18065: AND
18066: PUSH
18067: LD_VAR 0 5
18071: PPUSH
18072: LD_INT 3
18074: PPUSH
18075: CALL_OW 275
18079: PUSH
18080: LD_VAR 0 4
18084: PUSH
18085: LD_INT 3
18087: ARRAY
18088: GREATEREQUAL
18089: AND
18090: ST_TO_ADDR
// end ;
18091: LD_VAR 0 3
18095: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
18096: LD_INT 0
18098: PPUSH
18099: PPUSH
18100: PPUSH
18101: PPUSH
// pom := GetBase ( building ) ;
18102: LD_ADDR_VAR 0 3
18106: PUSH
18107: LD_VAR 0 1
18111: PPUSH
18112: CALL_OW 274
18116: ST_TO_ADDR
// if not pom then
18117: LD_VAR 0 3
18121: NOT
18122: IFFALSE 18126
// exit ;
18124: GO 18296
// btype := GetBType ( building ) ;
18126: LD_ADDR_VAR 0 5
18130: PUSH
18131: LD_VAR 0 1
18135: PPUSH
18136: CALL_OW 266
18140: ST_TO_ADDR
// if btype = b_armoury then
18141: LD_VAR 0 5
18145: PUSH
18146: LD_INT 4
18148: EQUAL
18149: IFFALSE 18159
// btype := b_barracks ;
18151: LD_ADDR_VAR 0 5
18155: PUSH
18156: LD_INT 5
18158: ST_TO_ADDR
// if btype = b_depot then
18159: LD_VAR 0 5
18163: PUSH
18164: LD_INT 0
18166: EQUAL
18167: IFFALSE 18177
// btype := b_warehouse ;
18169: LD_ADDR_VAR 0 5
18173: PUSH
18174: LD_INT 1
18176: ST_TO_ADDR
// if btype = b_workshop then
18177: LD_VAR 0 5
18181: PUSH
18182: LD_INT 2
18184: EQUAL
18185: IFFALSE 18195
// btype := b_factory ;
18187: LD_ADDR_VAR 0 5
18191: PUSH
18192: LD_INT 3
18194: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18195: LD_ADDR_VAR 0 4
18199: PUSH
18200: LD_VAR 0 5
18204: PPUSH
18205: LD_VAR 0 1
18209: PPUSH
18210: CALL_OW 248
18214: PPUSH
18215: CALL_OW 450
18219: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: LD_VAR 0 3
18229: PPUSH
18230: LD_INT 1
18232: PPUSH
18233: CALL_OW 275
18237: PUSH
18238: LD_VAR 0 4
18242: PUSH
18243: LD_INT 1
18245: ARRAY
18246: GREATEREQUAL
18247: PUSH
18248: LD_VAR 0 3
18252: PPUSH
18253: LD_INT 2
18255: PPUSH
18256: CALL_OW 275
18260: PUSH
18261: LD_VAR 0 4
18265: PUSH
18266: LD_INT 2
18268: ARRAY
18269: GREATEREQUAL
18270: AND
18271: PUSH
18272: LD_VAR 0 3
18276: PPUSH
18277: LD_INT 3
18279: PPUSH
18280: CALL_OW 275
18284: PUSH
18285: LD_VAR 0 4
18289: PUSH
18290: LD_INT 3
18292: ARRAY
18293: GREATEREQUAL
18294: AND
18295: ST_TO_ADDR
// end ;
18296: LD_VAR 0 2
18300: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18301: LD_INT 0
18303: PPUSH
18304: PPUSH
18305: PPUSH
// pom := GetBase ( building ) ;
18306: LD_ADDR_VAR 0 4
18310: PUSH
18311: LD_VAR 0 1
18315: PPUSH
18316: CALL_OW 274
18320: ST_TO_ADDR
// if not pom then
18321: LD_VAR 0 4
18325: NOT
18326: IFFALSE 18330
// exit ;
18328: GO 18431
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18330: LD_ADDR_VAR 0 5
18334: PUSH
18335: LD_VAR 0 2
18339: PPUSH
18340: LD_VAR 0 1
18344: PPUSH
18345: CALL_OW 248
18349: PPUSH
18350: CALL_OW 450
18354: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18355: LD_ADDR_VAR 0 3
18359: PUSH
18360: LD_VAR 0 4
18364: PPUSH
18365: LD_INT 1
18367: PPUSH
18368: CALL_OW 275
18372: PUSH
18373: LD_VAR 0 5
18377: PUSH
18378: LD_INT 1
18380: ARRAY
18381: GREATEREQUAL
18382: PUSH
18383: LD_VAR 0 4
18387: PPUSH
18388: LD_INT 2
18390: PPUSH
18391: CALL_OW 275
18395: PUSH
18396: LD_VAR 0 5
18400: PUSH
18401: LD_INT 2
18403: ARRAY
18404: GREATEREQUAL
18405: AND
18406: PUSH
18407: LD_VAR 0 4
18411: PPUSH
18412: LD_INT 3
18414: PPUSH
18415: CALL_OW 275
18419: PUSH
18420: LD_VAR 0 5
18424: PUSH
18425: LD_INT 3
18427: ARRAY
18428: GREATEREQUAL
18429: AND
18430: ST_TO_ADDR
// end ;
18431: LD_VAR 0 3
18435: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18436: LD_INT 0
18438: PPUSH
18439: PPUSH
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
18444: PPUSH
18445: PPUSH
18446: PPUSH
18447: PPUSH
18448: PPUSH
// result := false ;
18449: LD_ADDR_VAR 0 8
18453: PUSH
18454: LD_INT 0
18456: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18457: LD_VAR 0 5
18461: NOT
18462: PUSH
18463: LD_VAR 0 1
18467: NOT
18468: OR
18469: PUSH
18470: LD_VAR 0 2
18474: NOT
18475: OR
18476: PUSH
18477: LD_VAR 0 3
18481: NOT
18482: OR
18483: IFFALSE 18487
// exit ;
18485: GO 19301
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18487: LD_ADDR_VAR 0 14
18491: PUSH
18492: LD_VAR 0 1
18496: PPUSH
18497: LD_VAR 0 2
18501: PPUSH
18502: LD_VAR 0 3
18506: PPUSH
18507: LD_VAR 0 4
18511: PPUSH
18512: LD_VAR 0 5
18516: PUSH
18517: LD_INT 1
18519: ARRAY
18520: PPUSH
18521: CALL_OW 248
18525: PPUSH
18526: LD_INT 0
18528: PPUSH
18529: CALL 20538 0 6
18533: ST_TO_ADDR
// if not hexes then
18534: LD_VAR 0 14
18538: NOT
18539: IFFALSE 18543
// exit ;
18541: GO 19301
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18543: LD_ADDR_VAR 0 17
18547: PUSH
18548: LD_VAR 0 5
18552: PPUSH
18553: LD_INT 22
18555: PUSH
18556: LD_VAR 0 13
18560: PPUSH
18561: CALL_OW 255
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 30
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 30
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: LIST
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PPUSH
18602: CALL_OW 72
18606: ST_TO_ADDR
// for i = 1 to hexes do
18607: LD_ADDR_VAR 0 9
18611: PUSH
18612: DOUBLE
18613: LD_INT 1
18615: DEC
18616: ST_TO_ADDR
18617: LD_VAR 0 14
18621: PUSH
18622: FOR_TO
18623: IFFALSE 19299
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18625: LD_ADDR_VAR 0 13
18629: PUSH
18630: LD_VAR 0 14
18634: PUSH
18635: LD_VAR 0 9
18639: ARRAY
18640: PUSH
18641: LD_INT 1
18643: ARRAY
18644: PPUSH
18645: LD_VAR 0 14
18649: PUSH
18650: LD_VAR 0 9
18654: ARRAY
18655: PUSH
18656: LD_INT 2
18658: ARRAY
18659: PPUSH
18660: CALL_OW 428
18664: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
18665: LD_VAR 0 14
18669: PUSH
18670: LD_VAR 0 9
18674: ARRAY
18675: PUSH
18676: LD_INT 1
18678: ARRAY
18679: PPUSH
18680: LD_VAR 0 14
18684: PUSH
18685: LD_VAR 0 9
18689: ARRAY
18690: PUSH
18691: LD_INT 2
18693: ARRAY
18694: PPUSH
18695: CALL_OW 351
18699: PUSH
18700: LD_VAR 0 14
18704: PUSH
18705: LD_VAR 0 9
18709: ARRAY
18710: PUSH
18711: LD_INT 1
18713: ARRAY
18714: PPUSH
18715: LD_VAR 0 14
18719: PUSH
18720: LD_VAR 0 9
18724: ARRAY
18725: PUSH
18726: LD_INT 2
18728: ARRAY
18729: PPUSH
18730: CALL_OW 488
18734: NOT
18735: OR
18736: PUSH
18737: LD_VAR 0 13
18741: PPUSH
18742: CALL_OW 247
18746: PUSH
18747: LD_INT 3
18749: EQUAL
18750: OR
18751: IFFALSE 18757
// exit ;
18753: POP
18754: POP
18755: GO 19301
// if not tmp then
18757: LD_VAR 0 13
18761: NOT
18762: IFFALSE 18766
// continue ;
18764: GO 18622
// result := true ;
18766: LD_ADDR_VAR 0 8
18770: PUSH
18771: LD_INT 1
18773: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
18774: LD_VAR 0 6
18778: PUSH
18779: LD_VAR 0 13
18783: PPUSH
18784: CALL_OW 247
18788: PUSH
18789: LD_INT 2
18791: EQUAL
18792: AND
18793: PUSH
18794: LD_VAR 0 13
18798: PPUSH
18799: CALL_OW 263
18803: PUSH
18804: LD_INT 1
18806: EQUAL
18807: AND
18808: IFFALSE 18972
// begin if IsDrivenBy ( tmp ) then
18810: LD_VAR 0 13
18814: PPUSH
18815: CALL_OW 311
18819: IFFALSE 18823
// continue ;
18821: GO 18622
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
18823: LD_VAR 0 6
18827: PPUSH
18828: LD_INT 3
18830: PUSH
18831: LD_INT 60
18833: PUSH
18834: EMPTY
18835: LIST
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 3
18843: PUSH
18844: LD_INT 55
18846: PUSH
18847: EMPTY
18848: LIST
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PPUSH
18858: CALL_OW 72
18862: IFFALSE 18970
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
18864: LD_ADDR_VAR 0 18
18868: PUSH
18869: LD_VAR 0 6
18873: PPUSH
18874: LD_INT 3
18876: PUSH
18877: LD_INT 60
18879: PUSH
18880: EMPTY
18881: LIST
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 3
18889: PUSH
18890: LD_INT 55
18892: PUSH
18893: EMPTY
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PPUSH
18904: CALL_OW 72
18908: PUSH
18909: LD_INT 1
18911: ARRAY
18912: ST_TO_ADDR
// if IsInUnit ( driver ) then
18913: LD_VAR 0 18
18917: PPUSH
18918: CALL_OW 310
18922: IFFALSE 18933
// ComExit ( driver ) ;
18924: LD_VAR 0 18
18928: PPUSH
18929: CALL 44226 0 1
// AddComEnterUnit ( driver , tmp ) ;
18933: LD_VAR 0 18
18937: PPUSH
18938: LD_VAR 0 13
18942: PPUSH
18943: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
18947: LD_VAR 0 18
18951: PPUSH
18952: LD_VAR 0 7
18956: PPUSH
18957: CALL_OW 173
// AddComExitVehicle ( driver ) ;
18961: LD_VAR 0 18
18965: PPUSH
18966: CALL_OW 181
// end ; continue ;
18970: GO 18622
// end ; if not cleaners or not tmp in cleaners then
18972: LD_VAR 0 6
18976: NOT
18977: PUSH
18978: LD_VAR 0 13
18982: PUSH
18983: LD_VAR 0 6
18987: IN
18988: NOT
18989: OR
18990: IFFALSE 19297
// begin if dep then
18992: LD_VAR 0 17
18996: IFFALSE 19132
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
18998: LD_ADDR_VAR 0 16
19002: PUSH
19003: LD_VAR 0 17
19007: PUSH
19008: LD_INT 1
19010: ARRAY
19011: PPUSH
19012: CALL_OW 250
19016: PPUSH
19017: LD_VAR 0 17
19021: PUSH
19022: LD_INT 1
19024: ARRAY
19025: PPUSH
19026: CALL_OW 254
19030: PPUSH
19031: LD_INT 5
19033: PPUSH
19034: CALL_OW 272
19038: PUSH
19039: LD_VAR 0 17
19043: PUSH
19044: LD_INT 1
19046: ARRAY
19047: PPUSH
19048: CALL_OW 251
19052: PPUSH
19053: LD_VAR 0 17
19057: PUSH
19058: LD_INT 1
19060: ARRAY
19061: PPUSH
19062: CALL_OW 254
19066: PPUSH
19067: LD_INT 5
19069: PPUSH
19070: CALL_OW 273
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
19079: LD_VAR 0 16
19083: PUSH
19084: LD_INT 1
19086: ARRAY
19087: PPUSH
19088: LD_VAR 0 16
19092: PUSH
19093: LD_INT 2
19095: ARRAY
19096: PPUSH
19097: CALL_OW 488
19101: IFFALSE 19132
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
19103: LD_VAR 0 13
19107: PPUSH
19108: LD_VAR 0 16
19112: PUSH
19113: LD_INT 1
19115: ARRAY
19116: PPUSH
19117: LD_VAR 0 16
19121: PUSH
19122: LD_INT 2
19124: ARRAY
19125: PPUSH
19126: CALL_OW 111
// continue ;
19130: GO 18622
// end ; end ; r := GetDir ( tmp ) ;
19132: LD_ADDR_VAR 0 15
19136: PUSH
19137: LD_VAR 0 13
19141: PPUSH
19142: CALL_OW 254
19146: ST_TO_ADDR
// if r = 5 then
19147: LD_VAR 0 15
19151: PUSH
19152: LD_INT 5
19154: EQUAL
19155: IFFALSE 19165
// r := 0 ;
19157: LD_ADDR_VAR 0 15
19161: PUSH
19162: LD_INT 0
19164: ST_TO_ADDR
// for j = r to 5 do
19165: LD_ADDR_VAR 0 10
19169: PUSH
19170: DOUBLE
19171: LD_VAR 0 15
19175: DEC
19176: ST_TO_ADDR
19177: LD_INT 5
19179: PUSH
19180: FOR_TO
19181: IFFALSE 19295
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
19183: LD_ADDR_VAR 0 11
19187: PUSH
19188: LD_VAR 0 13
19192: PPUSH
19193: CALL_OW 250
19197: PPUSH
19198: LD_VAR 0 10
19202: PPUSH
19203: LD_INT 2
19205: PPUSH
19206: CALL_OW 272
19210: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19211: LD_ADDR_VAR 0 12
19215: PUSH
19216: LD_VAR 0 13
19220: PPUSH
19221: CALL_OW 251
19225: PPUSH
19226: LD_VAR 0 10
19230: PPUSH
19231: LD_INT 2
19233: PPUSH
19234: CALL_OW 273
19238: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19239: LD_VAR 0 11
19243: PPUSH
19244: LD_VAR 0 12
19248: PPUSH
19249: CALL_OW 488
19253: PUSH
19254: LD_VAR 0 11
19258: PPUSH
19259: LD_VAR 0 12
19263: PPUSH
19264: CALL_OW 428
19268: NOT
19269: AND
19270: IFFALSE 19293
// begin ComMoveXY ( tmp , _x , _y ) ;
19272: LD_VAR 0 13
19276: PPUSH
19277: LD_VAR 0 11
19281: PPUSH
19282: LD_VAR 0 12
19286: PPUSH
19287: CALL_OW 111
// break ;
19291: GO 19295
// end ; end ;
19293: GO 19180
19295: POP
19296: POP
// end ; end ;
19297: GO 18622
19299: POP
19300: POP
// end ;
19301: LD_VAR 0 8
19305: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19306: LD_INT 0
19308: PPUSH
// result := true ;
19309: LD_ADDR_VAR 0 3
19313: PUSH
19314: LD_INT 1
19316: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19317: LD_VAR 0 2
19321: PUSH
19322: LD_INT 24
19324: DOUBLE
19325: EQUAL
19326: IFTRUE 19336
19328: LD_INT 33
19330: DOUBLE
19331: EQUAL
19332: IFTRUE 19336
19334: GO 19361
19336: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19337: LD_ADDR_VAR 0 3
19341: PUSH
19342: LD_INT 32
19344: PPUSH
19345: LD_VAR 0 1
19349: PPUSH
19350: CALL_OW 321
19354: PUSH
19355: LD_INT 2
19357: EQUAL
19358: ST_TO_ADDR
19359: GO 19681
19361: LD_INT 20
19363: DOUBLE
19364: EQUAL
19365: IFTRUE 19369
19367: GO 19394
19369: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19370: LD_ADDR_VAR 0 3
19374: PUSH
19375: LD_INT 6
19377: PPUSH
19378: LD_VAR 0 1
19382: PPUSH
19383: CALL_OW 321
19387: PUSH
19388: LD_INT 2
19390: EQUAL
19391: ST_TO_ADDR
19392: GO 19681
19394: LD_INT 22
19396: DOUBLE
19397: EQUAL
19398: IFTRUE 19408
19400: LD_INT 36
19402: DOUBLE
19403: EQUAL
19404: IFTRUE 19408
19406: GO 19433
19408: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19409: LD_ADDR_VAR 0 3
19413: PUSH
19414: LD_INT 15
19416: PPUSH
19417: LD_VAR 0 1
19421: PPUSH
19422: CALL_OW 321
19426: PUSH
19427: LD_INT 2
19429: EQUAL
19430: ST_TO_ADDR
19431: GO 19681
19433: LD_INT 30
19435: DOUBLE
19436: EQUAL
19437: IFTRUE 19441
19439: GO 19466
19441: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19442: LD_ADDR_VAR 0 3
19446: PUSH
19447: LD_INT 20
19449: PPUSH
19450: LD_VAR 0 1
19454: PPUSH
19455: CALL_OW 321
19459: PUSH
19460: LD_INT 2
19462: EQUAL
19463: ST_TO_ADDR
19464: GO 19681
19466: LD_INT 28
19468: DOUBLE
19469: EQUAL
19470: IFTRUE 19480
19472: LD_INT 21
19474: DOUBLE
19475: EQUAL
19476: IFTRUE 19480
19478: GO 19505
19480: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19481: LD_ADDR_VAR 0 3
19485: PUSH
19486: LD_INT 21
19488: PPUSH
19489: LD_VAR 0 1
19493: PPUSH
19494: CALL_OW 321
19498: PUSH
19499: LD_INT 2
19501: EQUAL
19502: ST_TO_ADDR
19503: GO 19681
19505: LD_INT 16
19507: DOUBLE
19508: EQUAL
19509: IFTRUE 19513
19511: GO 19540
19513: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19514: LD_ADDR_VAR 0 3
19518: PUSH
19519: LD_EXP 51
19523: PPUSH
19524: LD_VAR 0 1
19528: PPUSH
19529: CALL_OW 321
19533: PUSH
19534: LD_INT 2
19536: EQUAL
19537: ST_TO_ADDR
19538: GO 19681
19540: LD_INT 19
19542: DOUBLE
19543: EQUAL
19544: IFTRUE 19554
19546: LD_INT 23
19548: DOUBLE
19549: EQUAL
19550: IFTRUE 19554
19552: GO 19581
19554: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
19555: LD_ADDR_VAR 0 3
19559: PUSH
19560: LD_EXP 50
19564: PPUSH
19565: LD_VAR 0 1
19569: PPUSH
19570: CALL_OW 321
19574: PUSH
19575: LD_INT 2
19577: EQUAL
19578: ST_TO_ADDR
19579: GO 19681
19581: LD_INT 17
19583: DOUBLE
19584: EQUAL
19585: IFTRUE 19589
19587: GO 19614
19589: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
19590: LD_ADDR_VAR 0 3
19594: PUSH
19595: LD_INT 39
19597: PPUSH
19598: LD_VAR 0 1
19602: PPUSH
19603: CALL_OW 321
19607: PUSH
19608: LD_INT 2
19610: EQUAL
19611: ST_TO_ADDR
19612: GO 19681
19614: LD_INT 18
19616: DOUBLE
19617: EQUAL
19618: IFTRUE 19622
19620: GO 19647
19622: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
19623: LD_ADDR_VAR 0 3
19627: PUSH
19628: LD_INT 40
19630: PPUSH
19631: LD_VAR 0 1
19635: PPUSH
19636: CALL_OW 321
19640: PUSH
19641: LD_INT 2
19643: EQUAL
19644: ST_TO_ADDR
19645: GO 19681
19647: LD_INT 27
19649: DOUBLE
19650: EQUAL
19651: IFTRUE 19655
19653: GO 19680
19655: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
19656: LD_ADDR_VAR 0 3
19660: PUSH
19661: LD_INT 35
19663: PPUSH
19664: LD_VAR 0 1
19668: PPUSH
19669: CALL_OW 321
19673: PUSH
19674: LD_INT 2
19676: EQUAL
19677: ST_TO_ADDR
19678: GO 19681
19680: POP
// end ;
19681: LD_VAR 0 3
19685: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
19686: LD_INT 0
19688: PPUSH
19689: PPUSH
19690: PPUSH
19691: PPUSH
19692: PPUSH
19693: PPUSH
19694: PPUSH
19695: PPUSH
19696: PPUSH
19697: PPUSH
19698: PPUSH
// result := false ;
19699: LD_ADDR_VAR 0 6
19703: PUSH
19704: LD_INT 0
19706: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
19707: LD_VAR 0 1
19711: NOT
19712: PUSH
19713: LD_VAR 0 1
19717: PPUSH
19718: CALL_OW 266
19722: PUSH
19723: LD_INT 0
19725: PUSH
19726: LD_INT 1
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: IN
19733: NOT
19734: OR
19735: PUSH
19736: LD_VAR 0 2
19740: NOT
19741: OR
19742: PUSH
19743: LD_VAR 0 5
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: LD_INT 2
19756: PUSH
19757: LD_INT 3
19759: PUSH
19760: LD_INT 4
19762: PUSH
19763: LD_INT 5
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: IN
19774: NOT
19775: OR
19776: PUSH
19777: LD_VAR 0 3
19781: PPUSH
19782: LD_VAR 0 4
19786: PPUSH
19787: CALL_OW 488
19791: NOT
19792: OR
19793: IFFALSE 19797
// exit ;
19795: GO 20533
// side := GetSide ( depot ) ;
19797: LD_ADDR_VAR 0 9
19801: PUSH
19802: LD_VAR 0 1
19806: PPUSH
19807: CALL_OW 255
19811: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
19812: LD_VAR 0 9
19816: PPUSH
19817: LD_VAR 0 2
19821: PPUSH
19822: CALL 19306 0 2
19826: NOT
19827: IFFALSE 19831
// exit ;
19829: GO 20533
// pom := GetBase ( depot ) ;
19831: LD_ADDR_VAR 0 10
19835: PUSH
19836: LD_VAR 0 1
19840: PPUSH
19841: CALL_OW 274
19845: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
19846: LD_ADDR_VAR 0 11
19850: PUSH
19851: LD_VAR 0 2
19855: PPUSH
19856: LD_VAR 0 1
19860: PPUSH
19861: CALL_OW 248
19865: PPUSH
19866: CALL_OW 450
19870: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
19871: LD_VAR 0 10
19875: PPUSH
19876: LD_INT 1
19878: PPUSH
19879: CALL_OW 275
19883: PUSH
19884: LD_VAR 0 11
19888: PUSH
19889: LD_INT 1
19891: ARRAY
19892: GREATEREQUAL
19893: PUSH
19894: LD_VAR 0 10
19898: PPUSH
19899: LD_INT 2
19901: PPUSH
19902: CALL_OW 275
19906: PUSH
19907: LD_VAR 0 11
19911: PUSH
19912: LD_INT 2
19914: ARRAY
19915: GREATEREQUAL
19916: AND
19917: PUSH
19918: LD_VAR 0 10
19922: PPUSH
19923: LD_INT 3
19925: PPUSH
19926: CALL_OW 275
19930: PUSH
19931: LD_VAR 0 11
19935: PUSH
19936: LD_INT 3
19938: ARRAY
19939: GREATEREQUAL
19940: AND
19941: NOT
19942: IFFALSE 19946
// exit ;
19944: GO 20533
// if GetBType ( depot ) = b_depot then
19946: LD_VAR 0 1
19950: PPUSH
19951: CALL_OW 266
19955: PUSH
19956: LD_INT 0
19958: EQUAL
19959: IFFALSE 19971
// dist := 28 else
19961: LD_ADDR_VAR 0 14
19965: PUSH
19966: LD_INT 28
19968: ST_TO_ADDR
19969: GO 19979
// dist := 36 ;
19971: LD_ADDR_VAR 0 14
19975: PUSH
19976: LD_INT 36
19978: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
19979: LD_VAR 0 1
19983: PPUSH
19984: LD_VAR 0 3
19988: PPUSH
19989: LD_VAR 0 4
19993: PPUSH
19994: CALL_OW 297
19998: PUSH
19999: LD_VAR 0 14
20003: GREATER
20004: IFFALSE 20008
// exit ;
20006: GO 20533
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
20008: LD_ADDR_VAR 0 12
20012: PUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: LD_VAR 0 3
20022: PPUSH
20023: LD_VAR 0 4
20027: PPUSH
20028: LD_VAR 0 5
20032: PPUSH
20033: LD_VAR 0 1
20037: PPUSH
20038: CALL_OW 248
20042: PPUSH
20043: LD_INT 0
20045: PPUSH
20046: CALL 20538 0 6
20050: ST_TO_ADDR
// if not hexes then
20051: LD_VAR 0 12
20055: NOT
20056: IFFALSE 20060
// exit ;
20058: GO 20533
// hex := GetHexInfo ( x , y ) ;
20060: LD_ADDR_VAR 0 15
20064: PUSH
20065: LD_VAR 0 3
20069: PPUSH
20070: LD_VAR 0 4
20074: PPUSH
20075: CALL_OW 546
20079: ST_TO_ADDR
// if hex [ 1 ] then
20080: LD_VAR 0 15
20084: PUSH
20085: LD_INT 1
20087: ARRAY
20088: IFFALSE 20092
// exit ;
20090: GO 20533
// height := hex [ 2 ] ;
20092: LD_ADDR_VAR 0 13
20096: PUSH
20097: LD_VAR 0 15
20101: PUSH
20102: LD_INT 2
20104: ARRAY
20105: ST_TO_ADDR
// for i = 1 to hexes do
20106: LD_ADDR_VAR 0 7
20110: PUSH
20111: DOUBLE
20112: LD_INT 1
20114: DEC
20115: ST_TO_ADDR
20116: LD_VAR 0 12
20120: PUSH
20121: FOR_TO
20122: IFFALSE 20452
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
20124: LD_VAR 0 12
20128: PUSH
20129: LD_VAR 0 7
20133: ARRAY
20134: PUSH
20135: LD_INT 1
20137: ARRAY
20138: PPUSH
20139: LD_VAR 0 12
20143: PUSH
20144: LD_VAR 0 7
20148: ARRAY
20149: PUSH
20150: LD_INT 2
20152: ARRAY
20153: PPUSH
20154: CALL_OW 488
20158: NOT
20159: PUSH
20160: LD_VAR 0 12
20164: PUSH
20165: LD_VAR 0 7
20169: ARRAY
20170: PUSH
20171: LD_INT 1
20173: ARRAY
20174: PPUSH
20175: LD_VAR 0 12
20179: PUSH
20180: LD_VAR 0 7
20184: ARRAY
20185: PUSH
20186: LD_INT 2
20188: ARRAY
20189: PPUSH
20190: CALL_OW 428
20194: PUSH
20195: LD_INT 0
20197: GREATER
20198: OR
20199: PUSH
20200: LD_VAR 0 12
20204: PUSH
20205: LD_VAR 0 7
20209: ARRAY
20210: PUSH
20211: LD_INT 1
20213: ARRAY
20214: PPUSH
20215: LD_VAR 0 12
20219: PUSH
20220: LD_VAR 0 7
20224: ARRAY
20225: PUSH
20226: LD_INT 2
20228: ARRAY
20229: PPUSH
20230: CALL_OW 351
20234: OR
20235: IFFALSE 20241
// exit ;
20237: POP
20238: POP
20239: GO 20533
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20241: LD_ADDR_VAR 0 8
20245: PUSH
20246: LD_VAR 0 12
20250: PUSH
20251: LD_VAR 0 7
20255: ARRAY
20256: PUSH
20257: LD_INT 1
20259: ARRAY
20260: PPUSH
20261: LD_VAR 0 12
20265: PUSH
20266: LD_VAR 0 7
20270: ARRAY
20271: PUSH
20272: LD_INT 2
20274: ARRAY
20275: PPUSH
20276: CALL_OW 546
20280: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20281: LD_VAR 0 8
20285: PUSH
20286: LD_INT 1
20288: ARRAY
20289: PUSH
20290: LD_VAR 0 8
20294: PUSH
20295: LD_INT 2
20297: ARRAY
20298: PUSH
20299: LD_VAR 0 13
20303: PUSH
20304: LD_INT 2
20306: PLUS
20307: GREATER
20308: OR
20309: PUSH
20310: LD_VAR 0 8
20314: PUSH
20315: LD_INT 2
20317: ARRAY
20318: PUSH
20319: LD_VAR 0 13
20323: PUSH
20324: LD_INT 2
20326: MINUS
20327: LESS
20328: OR
20329: PUSH
20330: LD_VAR 0 8
20334: PUSH
20335: LD_INT 3
20337: ARRAY
20338: PUSH
20339: LD_INT 0
20341: PUSH
20342: LD_INT 8
20344: PUSH
20345: LD_INT 9
20347: PUSH
20348: LD_INT 10
20350: PUSH
20351: LD_INT 11
20353: PUSH
20354: LD_INT 12
20356: PUSH
20357: LD_INT 13
20359: PUSH
20360: LD_INT 16
20362: PUSH
20363: LD_INT 17
20365: PUSH
20366: LD_INT 18
20368: PUSH
20369: LD_INT 19
20371: PUSH
20372: LD_INT 20
20374: PUSH
20375: LD_INT 21
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: IN
20393: NOT
20394: OR
20395: PUSH
20396: LD_VAR 0 8
20400: PUSH
20401: LD_INT 5
20403: ARRAY
20404: NOT
20405: OR
20406: PUSH
20407: LD_VAR 0 8
20411: PUSH
20412: LD_INT 6
20414: ARRAY
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: LD_INT 7
20424: PUSH
20425: LD_INT 9
20427: PUSH
20428: LD_INT 10
20430: PUSH
20431: LD_INT 11
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: IN
20442: NOT
20443: OR
20444: IFFALSE 20450
// exit ;
20446: POP
20447: POP
20448: GO 20533
// end ;
20450: GO 20121
20452: POP
20453: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20454: LD_VAR 0 9
20458: PPUSH
20459: LD_VAR 0 3
20463: PPUSH
20464: LD_VAR 0 4
20468: PPUSH
20469: LD_INT 20
20471: PPUSH
20472: CALL 12479 0 4
20476: PUSH
20477: LD_INT 4
20479: ARRAY
20480: IFFALSE 20484
// exit ;
20482: GO 20533
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20484: LD_VAR 0 2
20488: PUSH
20489: LD_INT 29
20491: PUSH
20492: LD_INT 30
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: IN
20499: PUSH
20500: LD_VAR 0 3
20504: PPUSH
20505: LD_VAR 0 4
20509: PPUSH
20510: LD_VAR 0 9
20514: PPUSH
20515: CALL_OW 440
20519: NOT
20520: AND
20521: IFFALSE 20525
// exit ;
20523: GO 20533
// result := true ;
20525: LD_ADDR_VAR 0 6
20529: PUSH
20530: LD_INT 1
20532: ST_TO_ADDR
// end ;
20533: LD_VAR 0 6
20537: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
20538: LD_INT 0
20540: PPUSH
20541: PPUSH
20542: PPUSH
20543: PPUSH
20544: PPUSH
20545: PPUSH
20546: PPUSH
20547: PPUSH
20548: PPUSH
20549: PPUSH
20550: PPUSH
20551: PPUSH
20552: PPUSH
20553: PPUSH
20554: PPUSH
20555: PPUSH
20556: PPUSH
20557: PPUSH
20558: PPUSH
20559: PPUSH
20560: PPUSH
20561: PPUSH
20562: PPUSH
20563: PPUSH
20564: PPUSH
20565: PPUSH
20566: PPUSH
20567: PPUSH
20568: PPUSH
20569: PPUSH
20570: PPUSH
20571: PPUSH
20572: PPUSH
20573: PPUSH
20574: PPUSH
20575: PPUSH
20576: PPUSH
20577: PPUSH
20578: PPUSH
20579: PPUSH
20580: PPUSH
20581: PPUSH
20582: PPUSH
20583: PPUSH
20584: PPUSH
20585: PPUSH
20586: PPUSH
20587: PPUSH
20588: PPUSH
20589: PPUSH
20590: PPUSH
20591: PPUSH
20592: PPUSH
20593: PPUSH
20594: PPUSH
20595: PPUSH
20596: PPUSH
20597: PPUSH
// result = [ ] ;
20598: LD_ADDR_VAR 0 7
20602: PUSH
20603: EMPTY
20604: ST_TO_ADDR
// temp_list = [ ] ;
20605: LD_ADDR_VAR 0 9
20609: PUSH
20610: EMPTY
20611: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
20612: LD_VAR 0 4
20616: PUSH
20617: LD_INT 0
20619: PUSH
20620: LD_INT 1
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: LD_INT 3
20628: PUSH
20629: LD_INT 4
20631: PUSH
20632: LD_INT 5
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: IN
20643: NOT
20644: PUSH
20645: LD_VAR 0 1
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: IN
20660: PUSH
20661: LD_VAR 0 5
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: LD_INT 2
20671: PUSH
20672: LD_INT 3
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: LIST
20679: IN
20680: NOT
20681: AND
20682: OR
20683: IFFALSE 20687
// exit ;
20685: GO 39078
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
20687: LD_VAR 0 1
20691: PUSH
20692: LD_INT 6
20694: PUSH
20695: LD_INT 7
20697: PUSH
20698: LD_INT 8
20700: PUSH
20701: LD_INT 13
20703: PUSH
20704: LD_INT 12
20706: PUSH
20707: LD_INT 15
20709: PUSH
20710: LD_INT 11
20712: PUSH
20713: LD_INT 14
20715: PUSH
20716: LD_INT 10
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: IN
20730: IFFALSE 20740
// btype = b_lab ;
20732: LD_ADDR_VAR 0 1
20736: PUSH
20737: LD_INT 6
20739: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
20740: LD_VAR 0 6
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: LD_INT 1
20750: PUSH
20751: LD_INT 2
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: IN
20759: NOT
20760: PUSH
20761: LD_VAR 0 1
20765: PUSH
20766: LD_INT 0
20768: PUSH
20769: LD_INT 1
20771: PUSH
20772: LD_INT 2
20774: PUSH
20775: LD_INT 3
20777: PUSH
20778: LD_INT 6
20780: PUSH
20781: LD_INT 36
20783: PUSH
20784: LD_INT 4
20786: PUSH
20787: LD_INT 5
20789: PUSH
20790: LD_INT 31
20792: PUSH
20793: LD_INT 32
20795: PUSH
20796: LD_INT 33
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: IN
20812: NOT
20813: PUSH
20814: LD_VAR 0 6
20818: PUSH
20819: LD_INT 1
20821: EQUAL
20822: AND
20823: OR
20824: PUSH
20825: LD_VAR 0 1
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: LD_INT 3
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: IN
20840: NOT
20841: PUSH
20842: LD_VAR 0 6
20846: PUSH
20847: LD_INT 2
20849: EQUAL
20850: AND
20851: OR
20852: IFFALSE 20862
// mode = 0 ;
20854: LD_ADDR_VAR 0 6
20858: PUSH
20859: LD_INT 0
20861: ST_TO_ADDR
// case mode of 0 :
20862: LD_VAR 0 6
20866: PUSH
20867: LD_INT 0
20869: DOUBLE
20870: EQUAL
20871: IFTRUE 20875
20873: GO 32328
20875: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
20876: LD_ADDR_VAR 0 11
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: LD_INT 0
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 0
20893: PUSH
20894: LD_INT 1
20896: NEG
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 1
20914: PUSH
20915: LD_INT 1
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 0
20924: PUSH
20925: LD_INT 1
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 1
20934: NEG
20935: PUSH
20936: LD_INT 0
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: LD_INT 1
20949: NEG
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 1
20957: NEG
20958: PUSH
20959: LD_INT 2
20961: NEG
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: LD_INT 1
20983: NEG
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 1
20991: PUSH
20992: LD_INT 2
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: LD_INT 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 1
21011: NEG
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: LD_INT 3
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: LD_INT 3
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: NEG
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21069: LD_ADDR_VAR 0 12
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: LD_INT 0
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 0
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 1
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 0
21117: PUSH
21118: LD_INT 1
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 1
21127: NEG
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: NEG
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 1
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 2
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 2
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 1
21181: NEG
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 2
21192: NEG
21193: PUSH
21194: LD_INT 0
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 2
21203: NEG
21204: PUSH
21205: LD_INT 1
21207: NEG
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 2
21215: NEG
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 3
21226: NEG
21227: PUSH
21228: LD_INT 0
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 3
21237: NEG
21238: PUSH
21239: LD_INT 1
21241: NEG
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21265: LD_ADDR_VAR 0 13
21269: PUSH
21270: LD_INT 0
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: LD_INT 1
21285: NEG
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 1
21323: NEG
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 1
21334: NEG
21335: PUSH
21336: LD_INT 1
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 1
21346: NEG
21347: PUSH
21348: LD_INT 2
21350: NEG
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 2
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 2
21368: PUSH
21369: LD_INT 2
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 1
21378: PUSH
21379: LD_INT 2
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 2
21388: NEG
21389: PUSH
21390: LD_INT 1
21392: NEG
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 2
21400: NEG
21401: PUSH
21402: LD_INT 2
21404: NEG
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 2
21412: NEG
21413: PUSH
21414: LD_INT 3
21416: NEG
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 3
21424: NEG
21425: PUSH
21426: LD_INT 2
21428: NEG
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 3
21436: NEG
21437: PUSH
21438: LD_INT 3
21440: NEG
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21464: LD_ADDR_VAR 0 14
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: LD_INT 1
21484: NEG
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 1
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 1
21522: NEG
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: PUSH
21535: LD_INT 1
21537: NEG
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: LD_INT 2
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 0
21557: PUSH
21558: LD_INT 2
21560: NEG
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: LD_INT 1
21571: NEG
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 1
21579: PUSH
21580: LD_INT 2
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: LD_INT 2
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 1
21599: NEG
21600: PUSH
21601: LD_INT 1
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: NEG
21611: PUSH
21612: LD_INT 3
21614: NEG
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: LD_INT 3
21625: NEG
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: LD_INT 2
21636: NEG
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21660: LD_ADDR_VAR 0 15
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: LD_INT 0
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 0
21677: PUSH
21678: LD_INT 1
21680: NEG
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: LD_INT 0
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: LD_INT 1
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: LD_INT 0
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 1
21729: NEG
21730: PUSH
21731: LD_INT 1
21733: NEG
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: LD_INT 1
21744: NEG
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 1
21772: NEG
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 2
21783: NEG
21784: PUSH
21785: LD_INT 0
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 2
21794: NEG
21795: PUSH
21796: LD_INT 1
21798: NEG
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 2
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 3
21817: PUSH
21818: LD_INT 0
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 3
21827: PUSH
21828: LD_INT 1
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21853: LD_ADDR_VAR 0 16
21857: PUSH
21858: LD_INT 0
21860: PUSH
21861: LD_INT 0
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: LD_INT 1
21873: NEG
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: LD_INT 0
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 0
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 1
21911: NEG
21912: PUSH
21913: LD_INT 0
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: LD_INT 1
21926: NEG
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: NEG
21935: PUSH
21936: LD_INT 2
21938: NEG
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 2
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 2
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 1
21966: PUSH
21967: LD_INT 2
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 2
21976: NEG
21977: PUSH
21978: LD_INT 1
21980: NEG
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 2
21988: NEG
21989: PUSH
21990: LD_INT 2
21992: NEG
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 3
22000: PUSH
22001: LD_INT 2
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 3
22010: PUSH
22011: LD_INT 3
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 2
22020: PUSH
22021: LD_INT 3
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22046: LD_ADDR_VAR 0 17
22050: PUSH
22051: LD_INT 0
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 0
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: NEG
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: LD_INT 2
22131: NEG
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 0
22139: PUSH
22140: LD_INT 2
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 1
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: LD_INT 2
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 1
22211: NEG
22212: PUSH
22213: LD_INT 1
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 2
22222: NEG
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 2
22233: NEG
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 2
22245: NEG
22246: PUSH
22247: LD_INT 2
22249: NEG
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22276: LD_ADDR_VAR 0 18
22280: PUSH
22281: LD_INT 0
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 0
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: LD_INT 0
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 1
22357: NEG
22358: PUSH
22359: LD_INT 2
22361: NEG
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 0
22369: PUSH
22370: LD_INT 2
22372: NEG
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 1
22380: PUSH
22381: LD_INT 1
22383: NEG
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: LD_INT 0
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 2
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 1
22421: PUSH
22422: LD_INT 2
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 0
22431: PUSH
22432: LD_INT 2
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 1
22441: NEG
22442: PUSH
22443: LD_INT 1
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 2
22452: NEG
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 2
22463: NEG
22464: PUSH
22465: LD_INT 1
22467: NEG
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 2
22475: NEG
22476: PUSH
22477: LD_INT 2
22479: NEG
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22506: LD_ADDR_VAR 0 19
22510: PUSH
22511: LD_INT 0
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 0
22523: PUSH
22524: LD_INT 1
22526: NEG
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: LD_INT 0
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: LD_INT 1
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: LD_INT 1
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 1
22564: NEG
22565: PUSH
22566: LD_INT 0
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: NEG
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: NEG
22588: PUSH
22589: LD_INT 2
22591: NEG
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 0
22599: PUSH
22600: LD_INT 2
22602: NEG
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: LD_INT 2
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 1
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: LD_INT 2
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: LD_INT 1
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 2
22682: NEG
22683: PUSH
22684: LD_INT 0
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 2
22693: NEG
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 2
22705: NEG
22706: PUSH
22707: LD_INT 2
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22736: LD_ADDR_VAR 0 20
22740: PUSH
22741: LD_INT 0
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: LD_INT 0
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 1
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 0
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: NEG
22795: PUSH
22796: LD_INT 0
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: LD_INT 1
22809: NEG
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 1
22817: NEG
22818: PUSH
22819: LD_INT 2
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 0
22829: PUSH
22830: LD_INT 2
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 2
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 0
22891: PUSH
22892: LD_INT 2
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: LD_INT 1
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 2
22912: NEG
22913: PUSH
22914: LD_INT 0
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 2
22923: NEG
22924: PUSH
22925: LD_INT 1
22927: NEG
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 2
22935: NEG
22936: PUSH
22937: LD_INT 2
22939: NEG
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22966: LD_ADDR_VAR 0 21
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 0
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: LD_INT 0
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: LD_INT 1
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: LD_INT 0
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 1
23035: NEG
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: LD_INT 2
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 0
23059: PUSH
23060: LD_INT 2
23062: NEG
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 2
23081: PUSH
23082: LD_INT 0
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 1
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 2
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: LD_INT 2
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: LD_INT 2
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: NEG
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 2
23153: NEG
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 2
23165: NEG
23166: PUSH
23167: LD_INT 2
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23196: LD_ADDR_VAR 0 22
23200: PUSH
23201: LD_INT 0
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 0
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 1
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: LD_INT 1
23269: NEG
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 0
23289: PUSH
23290: LD_INT 2
23292: NEG
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: LD_INT 1
23303: NEG
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 2
23311: PUSH
23312: LD_INT 0
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: LD_INT 1
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: LD_INT 2
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 1
23361: NEG
23362: PUSH
23363: LD_INT 1
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 2
23372: NEG
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 2
23383: NEG
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 2
23395: NEG
23396: PUSH
23397: LD_INT 2
23399: NEG
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23426: LD_ADDR_VAR 0 23
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 1
23454: PUSH
23455: LD_INT 0
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 1
23507: NEG
23508: PUSH
23509: LD_INT 2
23511: NEG
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 2
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 2
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: LD_INT 2
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: LD_INT 2
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 1
23591: NEG
23592: PUSH
23593: LD_INT 1
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: NEG
23603: PUSH
23604: LD_INT 0
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 2
23613: NEG
23614: PUSH
23615: LD_INT 1
23617: NEG
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 2
23625: NEG
23626: PUSH
23627: LD_INT 2
23629: NEG
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 2
23637: NEG
23638: PUSH
23639: LD_INT 3
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: LD_INT 3
23653: NEG
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: LD_INT 2
23664: NEG
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
23706: LD_ADDR_VAR 0 24
23710: PUSH
23711: LD_INT 0
23713: PUSH
23714: LD_INT 0
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 1
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 1
23764: NEG
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: LD_INT 1
23779: NEG
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: LD_INT 2
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: LD_INT 2
23802: NEG
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: LD_INT 1
23813: NEG
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 2
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 2
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 2
23841: PUSH
23842: LD_INT 2
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 0
23861: PUSH
23862: LD_INT 2
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: LD_INT 1
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 2
23882: NEG
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 2
23893: NEG
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 2
23905: NEG
23906: PUSH
23907: LD_INT 2
23909: NEG
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: LD_INT 2
23920: NEG
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 1
23931: NEG
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 3
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 3
23949: PUSH
23950: LD_INT 2
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
23982: LD_ADDR_VAR 0 25
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: LD_INT 1
24055: NEG
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 1
24063: NEG
24064: PUSH
24065: LD_INT 2
24067: NEG
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: LD_INT 2
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: LD_INT 1
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 2
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 2
24107: PUSH
24108: LD_INT 1
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 2
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 1
24147: NEG
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 2
24158: NEG
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 2
24169: NEG
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 2
24181: NEG
24182: PUSH
24183: LD_INT 2
24185: NEG
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 3
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 3
24203: PUSH
24204: LD_INT 2
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 3
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 1
24223: PUSH
24224: LD_INT 3
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24256: LD_ADDR_VAR 0 26
24260: PUSH
24261: LD_INT 0
24263: PUSH
24264: LD_INT 0
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: LD_INT 1
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 1
24337: NEG
24338: PUSH
24339: LD_INT 2
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 0
24349: PUSH
24350: LD_INT 2
24352: NEG
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 2
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: LD_INT 2
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: LD_INT 2
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: LD_INT 2
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 1
24421: NEG
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 2
24432: NEG
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 2
24443: NEG
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 2
24455: NEG
24456: PUSH
24457: LD_INT 2
24459: NEG
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 2
24467: PUSH
24468: LD_INT 3
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: LD_INT 3
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: NEG
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 2
24498: NEG
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24532: LD_ADDR_VAR 0 27
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: LD_INT 1
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: LD_INT 1
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: NEG
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: NEG
24614: PUSH
24615: LD_INT 2
24617: NEG
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: LD_INT 2
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 2
24667: PUSH
24668: LD_INT 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: LD_INT 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: NEG
24698: PUSH
24699: LD_INT 1
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 2
24708: NEG
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 2
24719: NEG
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 2
24731: NEG
24732: PUSH
24733: LD_INT 2
24735: NEG
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 1
24743: NEG
24744: PUSH
24745: LD_INT 2
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 2
24754: NEG
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 3
24765: NEG
24766: PUSH
24767: LD_INT 1
24769: NEG
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 3
24777: NEG
24778: PUSH
24779: LD_INT 2
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24812: LD_ADDR_VAR 0 28
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: LD_INT 1
24832: NEG
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 1
24840: PUSH
24841: LD_INT 0
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: LD_INT 1
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: LD_INT 0
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 1
24893: NEG
24894: PUSH
24895: LD_INT 2
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 0
24905: PUSH
24906: LD_INT 2
24908: NEG
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 1
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 2
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 2
24947: PUSH
24948: LD_INT 2
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: LD_INT 2
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: LD_INT 2
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 1
24977: NEG
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 2
24988: NEG
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 2
24999: NEG
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 2
25011: NEG
25012: PUSH
25013: LD_INT 2
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 2
25023: NEG
25024: PUSH
25025: LD_INT 3
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 1
25035: NEG
25036: PUSH
25037: LD_INT 3
25039: NEG
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 3
25047: NEG
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 3
25059: NEG
25060: PUSH
25061: LD_INT 2
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25094: LD_ADDR_VAR 0 29
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: LD_INT 1
25114: NEG
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 1
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 0
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: NEG
25153: PUSH
25154: LD_INT 0
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: LD_INT 2
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: LD_INT 2
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: LD_INT 2
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 2
25272: NEG
25273: PUSH
25274: LD_INT 2
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 2
25284: NEG
25285: PUSH
25286: LD_INT 3
25288: NEG
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 2
25296: PUSH
25297: LD_INT 1
25299: NEG
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 3
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: LD_INT 3
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: NEG
25328: PUSH
25329: LD_INT 2
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 3
25338: NEG
25339: PUSH
25340: LD_INT 2
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25373: LD_ADDR_VAR 0 30
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 1
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 1
25431: NEG
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: LD_INT 2
25458: NEG
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 0
25466: PUSH
25467: LD_INT 2
25469: NEG
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 2
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 2
25508: PUSH
25509: LD_INT 2
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 1
25528: NEG
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 2
25539: NEG
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 2
25550: NEG
25551: PUSH
25552: LD_INT 1
25554: NEG
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: LD_INT 3
25566: NEG
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: LD_INT 2
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 3
25585: PUSH
25586: LD_INT 2
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 2
25595: PUSH
25596: LD_INT 3
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 2
25605: NEG
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 3
25616: NEG
25617: PUSH
25618: LD_INT 1
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25651: LD_ADDR_VAR 0 31
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: LD_INT 1
25671: NEG
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 0
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: NEG
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 1
25732: NEG
25733: PUSH
25734: LD_INT 2
25736: NEG
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 1
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 2
25755: PUSH
25756: LD_INT 0
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 2
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 2
25816: NEG
25817: PUSH
25818: LD_INT 1
25820: NEG
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 2
25828: NEG
25829: PUSH
25830: LD_INT 2
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: LD_INT 3
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 3
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: LD_INT 3
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 3
25894: NEG
25895: PUSH
25896: LD_INT 2
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25929: LD_ADDR_VAR 0 32
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: NEG
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: LD_INT 1
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: LD_INT 2
26014: NEG
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: LD_INT 2
26025: NEG
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 2
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 2
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: LD_INT 2
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: LD_INT 1
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 2
26095: NEG
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 2
26106: NEG
26107: PUSH
26108: LD_INT 1
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: NEG
26119: PUSH
26120: LD_INT 3
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: LD_INT 2
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 3
26141: PUSH
26142: LD_INT 2
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 2
26151: PUSH
26152: LD_INT 3
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 2
26161: NEG
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 3
26172: NEG
26173: PUSH
26174: LD_INT 1
26176: NEG
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26207: LD_ADDR_VAR 0 33
26211: PUSH
26212: LD_INT 0
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: NEG
26289: PUSH
26290: LD_INT 2
26292: NEG
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 2
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 2
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: LD_INT 2
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: LD_INT 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 1
26351: NEG
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 2
26362: NEG
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: NEG
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 2
26385: NEG
26386: PUSH
26387: LD_INT 2
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 2
26397: NEG
26398: PUSH
26399: LD_INT 3
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 3
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: LD_INT 3
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: NEG
26441: PUSH
26442: LD_INT 2
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 3
26451: NEG
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26486: LD_ADDR_VAR 0 34
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 0
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: NEG
26568: PUSH
26569: LD_INT 2
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: LD_INT 2
26582: NEG
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 2
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 2
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 2
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 1
26631: NEG
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 2
26642: NEG
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 2
26665: NEG
26666: PUSH
26667: LD_INT 2
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: LD_INT 3
26681: NEG
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: LD_INT 2
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 3
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 2
26710: PUSH
26711: LD_INT 3
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 2
26720: NEG
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 3
26731: NEG
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26766: LD_ADDR_VAR 0 35
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: LD_INT 1
26786: NEG
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 1
26835: NEG
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 2
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 2
26857: NEG
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
26878: LD_ADDR_VAR 0 36
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: LD_INT 1
26898: NEG
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 1
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: LD_INT 2
26963: NEG
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
26990: LD_ADDR_VAR 0 37
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 1
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: LD_INT 1
27074: NEG
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27102: LD_ADDR_VAR 0 38
27106: PUSH
27107: LD_INT 0
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: LD_INT 0
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: LD_INT 1
27175: NEG
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 2
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 2
27193: NEG
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27214: LD_ADDR_VAR 0 39
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 0
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: LD_INT 2
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: LD_INT 2
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27326: LD_ADDR_VAR 0 40
27330: PUSH
27331: LD_INT 0
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: NEG
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: NEG
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: LD_INT 1
27410: NEG
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: LD_INT 1
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27438: LD_ADDR_VAR 0 41
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: LD_INT 1
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: NEG
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: NEG
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: LD_INT 2
27523: NEG
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: LD_INT 1
27534: NEG
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 2
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 2
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 2
27562: PUSH
27563: LD_INT 2
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: LD_INT 2
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 1
27582: NEG
27583: PUSH
27584: LD_INT 1
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: NEG
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 2
27604: NEG
27605: PUSH
27606: LD_INT 1
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 2
27616: NEG
27617: PUSH
27618: LD_INT 2
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 2
27628: NEG
27629: PUSH
27630: LD_INT 3
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 2
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 3
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 3
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 3
27671: PUSH
27672: LD_INT 2
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 3
27681: PUSH
27682: LD_INT 3
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 2
27691: PUSH
27692: LD_INT 3
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 2
27701: NEG
27702: PUSH
27703: LD_INT 1
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 3
27712: NEG
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 3
27723: NEG
27724: PUSH
27725: LD_INT 1
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 3
27735: NEG
27736: PUSH
27737: LD_INT 2
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 3
27747: NEG
27748: PUSH
27749: LD_INT 3
27751: NEG
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27788: LD_ADDR_VAR 0 42
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 0
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: LD_INT 2
27884: NEG
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: LD_INT 1
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: LD_INT 2
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 2
27954: NEG
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 2
27966: NEG
27967: PUSH
27968: LD_INT 2
27970: NEG
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 2
27978: NEG
27979: PUSH
27980: LD_INT 3
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 3
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 0
28002: PUSH
28003: LD_INT 3
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: PUSH
28014: LD_INT 2
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 3
28024: PUSH
28025: LD_INT 2
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 3
28034: PUSH
28035: LD_INT 3
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 2
28044: PUSH
28045: LD_INT 3
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: LD_INT 3
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: LD_INT 3
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: LD_INT 2
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 3
28085: NEG
28086: PUSH
28087: LD_INT 2
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 3
28097: NEG
28098: PUSH
28099: LD_INT 3
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28138: LD_ADDR_VAR 0 43
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: LD_INT 1
28158: NEG
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: LD_INT 0
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 0
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: LD_INT 2
28223: NEG
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: LD_INT 2
28234: NEG
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 2
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 2
28263: PUSH
28264: LD_INT 1
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 1
28273: PUSH
28274: LD_INT 2
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: NEG
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 2
28304: NEG
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 2
28315: NEG
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: LD_INT 3
28331: NEG
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: LD_INT 3
28342: NEG
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: LD_INT 2
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 3
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 3
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: LD_INT 3
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: LD_INT 3
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: NEG
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 2
28423: NEG
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 3
28434: NEG
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 3
28445: NEG
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28486: LD_ADDR_VAR 0 44
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: LD_INT 0
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: LD_INT 1
28506: NEG
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 1
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: LD_INT 2
28571: NEG
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: LD_INT 1
28582: NEG
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 2
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: LD_INT 2
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 2
28641: NEG
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 2
28652: NEG
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 2
28664: NEG
28665: PUSH
28666: LD_INT 2
28668: NEG
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 2
28676: NEG
28677: PUSH
28678: LD_INT 3
28680: NEG
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 2
28688: PUSH
28689: LD_INT 1
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 3
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 3
28709: PUSH
28710: LD_INT 1
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 3
28719: PUSH
28720: LD_INT 2
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 3
28729: PUSH
28730: LD_INT 3
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 2
28739: PUSH
28740: LD_INT 3
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 2
28749: NEG
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 3
28760: NEG
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 3
28771: NEG
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 3
28783: NEG
28784: PUSH
28785: LD_INT 2
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 3
28795: NEG
28796: PUSH
28797: LD_INT 3
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28836: LD_ADDR_VAR 0 45
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 1
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: LD_INT 2
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: LD_INT 2
28932: NEG
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 2
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 2
29002: NEG
29003: PUSH
29004: LD_INT 1
29006: NEG
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 2
29014: NEG
29015: PUSH
29016: LD_INT 2
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 2
29026: NEG
29027: PUSH
29028: LD_INT 3
29030: NEG
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 1
29038: NEG
29039: PUSH
29040: LD_INT 3
29042: NEG
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: LD_INT 3
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 1
29061: PUSH
29062: LD_INT 2
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 3
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 3
29082: PUSH
29083: LD_INT 3
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: LD_INT 3
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: LD_INT 3
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: LD_INT 3
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 3
29133: NEG
29134: PUSH
29135: LD_INT 2
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 3
29145: NEG
29146: PUSH
29147: LD_INT 3
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29186: LD_ADDR_VAR 0 46
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: LD_INT 1
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 1
29255: NEG
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: LD_INT 2
29282: NEG
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: LD_INT 0
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 2
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: LD_INT 2
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: LD_INT 2
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: NEG
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 2
29352: NEG
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 2
29363: NEG
29364: PUSH
29365: LD_INT 1
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: LD_INT 3
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: LD_INT 3
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: LD_INT 2
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 2
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 3
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 3
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: LD_INT 3
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: LD_INT 3
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: NEG
29461: PUSH
29462: LD_INT 2
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: NEG
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 3
29482: NEG
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 3
29493: NEG
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29534: LD_ADDR_VAR 0 47
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 1
29592: NEG
29593: PUSH
29594: LD_INT 0
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 1
29603: NEG
29604: PUSH
29605: LD_INT 1
29607: NEG
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 1
29615: NEG
29616: PUSH
29617: LD_INT 2
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 0
29627: PUSH
29628: LD_INT 2
29630: NEG
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 2
29649: NEG
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 2
29661: NEG
29662: PUSH
29663: LD_INT 2
29665: NEG
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29685: LD_ADDR_VAR 0 48
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: NEG
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: LD_INT 2
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 0
29778: PUSH
29779: LD_INT 2
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: LD_INT 1
29792: NEG
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 2
29800: PUSH
29801: LD_INT 0
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 2
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29832: LD_ADDR_VAR 0 49
29836: PUSH
29837: LD_INT 0
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 0
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: LD_INT 1
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 0
29880: PUSH
29881: LD_INT 1
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: LD_INT 0
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 1
29901: NEG
29902: PUSH
29903: LD_INT 1
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 2
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 2
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 2
29944: PUSH
29945: LD_INT 2
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29976: LD_ADDR_VAR 0 50
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: LD_INT 1
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 1
30045: NEG
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 2
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 2
30067: PUSH
30068: LD_INT 2
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 0
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30120: LD_ADDR_VAR 0 51
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: LD_INT 1
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: LD_INT 2
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: NEG
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 2
30232: NEG
30233: PUSH
30234: LD_INT 0
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 2
30243: NEG
30244: PUSH
30245: LD_INT 1
30247: NEG
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30267: LD_ADDR_VAR 0 52
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: LD_INT 0
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: LD_INT 1
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: LD_INT 0
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 1
30336: NEG
30337: PUSH
30338: LD_INT 1
30340: NEG
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 1
30348: NEG
30349: PUSH
30350: LD_INT 2
30352: NEG
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 1
30360: NEG
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: NEG
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 2
30382: NEG
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 2
30394: NEG
30395: PUSH
30396: LD_INT 2
30398: NEG
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30418: LD_ADDR_VAR 0 53
30422: PUSH
30423: LD_INT 0
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 0
30435: PUSH
30436: LD_INT 1
30438: NEG
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: LD_INT 1
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 0
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 1
30476: NEG
30477: PUSH
30478: LD_INT 0
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 1
30487: NEG
30488: PUSH
30489: LD_INT 1
30491: NEG
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 1
30499: NEG
30500: PUSH
30501: LD_INT 2
30503: NEG
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 0
30511: PUSH
30512: LD_INT 2
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 1
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 2
30533: PUSH
30534: LD_INT 0
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 2
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 2
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: LD_INT 2
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 1
30583: NEG
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 2
30594: NEG
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 2
30605: NEG
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 2
30617: NEG
30618: PUSH
30619: LD_INT 2
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30648: LD_ADDR_VAR 0 54
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: LD_INT 0
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: LD_INT 1
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: PUSH
30719: LD_INT 1
30721: NEG
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: NEG
30730: PUSH
30731: LD_INT 2
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: LD_INT 2
30744: NEG
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: LD_INT 1
30755: NEG
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 2
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: LD_INT 1
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 2
30783: PUSH
30784: LD_INT 2
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: LD_INT 2
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 2
30824: NEG
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 2
30835: NEG
30836: PUSH
30837: LD_INT 1
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: LD_INT 2
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30878: LD_ADDR_VAR 0 55
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: LD_INT 0
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: LD_INT 1
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 1
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 1
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 1
30936: NEG
30937: PUSH
30938: LD_INT 0
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: NEG
30948: PUSH
30949: LD_INT 1
30951: NEG
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: LD_INT 2
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: LD_INT 2
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: LD_INT 1
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 2
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 2
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 2
31013: PUSH
31014: LD_INT 2
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: LD_INT 2
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 1
31043: NEG
31044: PUSH
31045: LD_INT 1
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 2
31054: NEG
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 2
31065: NEG
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 2
31077: NEG
31078: PUSH
31079: LD_INT 2
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31108: LD_ADDR_VAR 0 56
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: LD_INT 1
31128: NEG
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: NEG
31178: PUSH
31179: LD_INT 1
31181: NEG
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 1
31189: NEG
31190: PUSH
31191: LD_INT 2
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 2
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: LD_INT 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 2
31243: PUSH
31244: LD_INT 2
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: LD_INT 2
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 2
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 2
31284: NEG
31285: PUSH
31286: LD_INT 0
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 2
31295: NEG
31296: PUSH
31297: LD_INT 1
31299: NEG
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 2
31307: NEG
31308: PUSH
31309: LD_INT 2
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31338: LD_ADDR_VAR 0 57
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: LD_INT 1
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: LD_INT 2
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 0
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 1
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 2
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 1
31483: PUSH
31484: LD_INT 2
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 1
31503: NEG
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 2
31514: NEG
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 2
31525: NEG
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: NEG
31538: PUSH
31539: LD_INT 2
31541: NEG
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31568: LD_ADDR_VAR 0 58
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: LD_INT 1
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: NEG
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: NEG
31638: PUSH
31639: LD_INT 1
31641: NEG
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: LD_INT 2
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: LD_INT 2
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 2
31683: PUSH
31684: LD_INT 0
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 2
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 2
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: LD_INT 2
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: NEG
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 2
31755: NEG
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: LD_INT 2
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31798: LD_ADDR_VAR 0 59
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: LD_INT 1
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31886: LD_ADDR_VAR 0 60
31890: PUSH
31891: LD_INT 0
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: LD_INT 1
31906: NEG
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: LD_INT 1
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31974: LD_ADDR_VAR 0 61
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: LD_INT 1
31994: NEG
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: LD_INT 0
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: NEG
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32062: LD_ADDR_VAR 0 62
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 0
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: LD_INT 1
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32150: LD_ADDR_VAR 0 63
32154: PUSH
32155: LD_INT 0
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 1
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 1
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 1
32219: NEG
32220: PUSH
32221: LD_INT 1
32223: NEG
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32238: LD_ADDR_VAR 0 64
32242: PUSH
32243: LD_INT 0
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 1
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: LD_INT 1
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: LD_INT 1
32311: NEG
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: ST_TO_ADDR
// end ; 1 :
32326: GO 38223
32328: LD_INT 1
32330: DOUBLE
32331: EQUAL
32332: IFTRUE 32336
32334: GO 34959
32336: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32337: LD_ADDR_VAR 0 11
32341: PUSH
32342: LD_INT 1
32344: NEG
32345: PUSH
32346: LD_INT 3
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: LD_INT 3
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: LIST
32380: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32381: LD_ADDR_VAR 0 12
32385: PUSH
32386: LD_INT 2
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 3
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 3
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32422: LD_ADDR_VAR 0 13
32426: PUSH
32427: LD_INT 3
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 3
32439: PUSH
32440: LD_INT 3
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 2
32449: PUSH
32450: LD_INT 3
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: LIST
32461: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32462: LD_ADDR_VAR 0 14
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: LD_INT 3
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 3
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: LD_INT 2
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: LIST
32502: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32503: LD_ADDR_VAR 0 15
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 3
32521: NEG
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 3
32532: NEG
32533: PUSH
32534: LD_INT 1
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: LIST
32546: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32547: LD_ADDR_VAR 0 16
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 3
32566: NEG
32567: PUSH
32568: LD_INT 2
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 3
32578: NEG
32579: PUSH
32580: LD_INT 3
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: LIST
32592: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32593: LD_ADDR_VAR 0 17
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: LD_INT 3
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: LD_INT 3
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: LD_INT 2
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32637: LD_ADDR_VAR 0 18
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: LD_INT 1
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 3
32655: PUSH
32656: LD_INT 0
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 3
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: LIST
32677: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32678: LD_ADDR_VAR 0 19
32682: PUSH
32683: LD_INT 3
32685: PUSH
32686: LD_INT 2
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 3
32695: PUSH
32696: LD_INT 3
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: LD_INT 3
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: LIST
32717: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32718: LD_ADDR_VAR 0 20
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: LD_INT 3
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 0
32735: PUSH
32736: LD_INT 3
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: LIST
32758: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32759: LD_ADDR_VAR 0 21
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 3
32777: NEG
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 3
32788: NEG
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: LIST
32802: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32803: LD_ADDR_VAR 0 22
32807: PUSH
32808: LD_INT 2
32810: NEG
32811: PUSH
32812: LD_INT 3
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 3
32822: NEG
32823: PUSH
32824: LD_INT 2
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 3
32834: NEG
32835: PUSH
32836: LD_INT 3
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
32849: LD_ADDR_VAR 0 23
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 3
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: NEG
32868: PUSH
32869: LD_INT 4
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: LD_INT 3
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
32893: LD_ADDR_VAR 0 24
32897: PUSH
32898: LD_INT 3
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 3
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 4
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
32934: LD_ADDR_VAR 0 25
32938: PUSH
32939: LD_INT 3
32941: PUSH
32942: LD_INT 3
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 4
32951: PUSH
32952: LD_INT 3
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 3
32961: PUSH
32962: LD_INT 4
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: LIST
32973: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
32974: LD_ADDR_VAR 0 26
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: LD_INT 3
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: LD_INT 4
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: NEG
33002: PUSH
33003: LD_INT 3
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: LIST
33014: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
33015: LD_ADDR_VAR 0 27
33019: PUSH
33020: LD_INT 3
33022: NEG
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 3
33033: NEG
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 4
33044: NEG
33045: PUSH
33046: LD_INT 1
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
33059: LD_ADDR_VAR 0 28
33063: PUSH
33064: LD_INT 3
33066: NEG
33067: PUSH
33068: LD_INT 3
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 3
33078: NEG
33079: PUSH
33080: LD_INT 4
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 4
33090: NEG
33091: PUSH
33092: LD_INT 3
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: LIST
33104: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
33105: LD_ADDR_VAR 0 29
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: PUSH
33114: LD_INT 3
33116: NEG
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 3
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: LD_INT 2
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: NEG
33147: PUSH
33148: LD_INT 4
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: LD_INT 4
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: LD_INT 3
33172: NEG
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PUSH
33182: LD_INT 5
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: LD_INT 5
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: LD_INT 4
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 1
33214: NEG
33215: PUSH
33216: LD_INT 6
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: LD_INT 6
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: LD_INT 5
33240: NEG
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33260: LD_ADDR_VAR 0 30
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 3
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 3
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 3
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 4
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 4
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 4
33329: PUSH
33330: LD_INT 1
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 5
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 5
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 5
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 6
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 6
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33403: LD_ADDR_VAR 0 31
33407: PUSH
33408: LD_INT 3
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 3
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 4
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 3
33460: PUSH
33461: LD_INT 4
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 5
33470: PUSH
33471: LD_INT 4
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 5
33480: PUSH
33481: LD_INT 5
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 4
33490: PUSH
33491: LD_INT 5
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 6
33500: PUSH
33501: LD_INT 5
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 6
33510: PUSH
33511: LD_INT 6
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 5
33520: PUSH
33521: LD_INT 6
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
33542: LD_ADDR_VAR 0 32
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: LD_INT 3
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: LD_INT 3
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 1
33569: NEG
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: LD_INT 4
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: LD_INT 4
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: LD_INT 3
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: LD_INT 5
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: LD_INT 5
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: LD_INT 4
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: LD_INT 6
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: LD_INT 6
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: LD_INT 5
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
33685: LD_ADDR_VAR 0 33
33689: PUSH
33690: LD_INT 2
33692: NEG
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 3
33703: NEG
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 3
33714: NEG
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 3
33726: NEG
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 4
33737: NEG
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 4
33748: NEG
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 4
33760: NEG
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 5
33771: NEG
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 5
33782: NEG
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 5
33794: NEG
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 6
33805: NEG
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 6
33816: NEG
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
33840: LD_ADDR_VAR 0 34
33844: PUSH
33845: LD_INT 2
33847: NEG
33848: PUSH
33849: LD_INT 3
33851: NEG
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 3
33859: NEG
33860: PUSH
33861: LD_INT 2
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 3
33871: NEG
33872: PUSH
33873: LD_INT 3
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 3
33883: NEG
33884: PUSH
33885: LD_INT 4
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 4
33895: NEG
33896: PUSH
33897: LD_INT 3
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 4
33907: NEG
33908: PUSH
33909: LD_INT 4
33911: NEG
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 4
33919: NEG
33920: PUSH
33921: LD_INT 5
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 5
33931: NEG
33932: PUSH
33933: LD_INT 4
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 5
33943: NEG
33944: PUSH
33945: LD_INT 5
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 5
33955: NEG
33956: PUSH
33957: LD_INT 6
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 6
33967: NEG
33968: PUSH
33969: LD_INT 5
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 6
33979: NEG
33980: PUSH
33981: LD_INT 6
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
34003: LD_ADDR_VAR 0 41
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: LD_INT 2
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 1
34021: NEG
34022: PUSH
34023: LD_INT 3
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: PUSH
34034: LD_INT 2
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
34047: LD_ADDR_VAR 0 42
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 3
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: LIST
34087: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
34088: LD_ADDR_VAR 0 43
34092: PUSH
34093: LD_INT 2
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 3
34105: PUSH
34106: LD_INT 2
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: LD_INT 3
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: LIST
34127: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
34128: LD_ADDR_VAR 0 44
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: LD_INT 2
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 1
34145: PUSH
34146: LD_INT 3
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: LIST
34168: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34169: LD_ADDR_VAR 0 45
34173: PUSH
34174: LD_INT 2
34176: NEG
34177: PUSH
34178: LD_INT 0
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 2
34187: NEG
34188: PUSH
34189: LD_INT 1
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 3
34198: NEG
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: LIST
34212: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34213: LD_ADDR_VAR 0 46
34217: PUSH
34218: LD_INT 2
34220: NEG
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 2
34232: NEG
34233: PUSH
34234: LD_INT 3
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 3
34244: NEG
34245: PUSH
34246: LD_INT 2
34248: NEG
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: LIST
34258: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34259: LD_ADDR_VAR 0 47
34263: PUSH
34264: LD_INT 2
34266: NEG
34267: PUSH
34268: LD_INT 3
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: LD_INT 3
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34292: LD_ADDR_VAR 0 48
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: LD_INT 2
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34323: LD_ADDR_VAR 0 49
34327: PUSH
34328: LD_INT 3
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 3
34340: PUSH
34341: LD_INT 2
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34352: LD_ADDR_VAR 0 50
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: LD_INT 3
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: LD_INT 3
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34381: LD_ADDR_VAR 0 51
34385: PUSH
34386: LD_INT 1
34388: NEG
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 2
34399: NEG
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34412: LD_ADDR_VAR 0 52
34416: PUSH
34417: LD_INT 3
34419: NEG
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 3
34431: NEG
34432: PUSH
34433: LD_INT 2
34435: NEG
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34445: LD_ADDR_VAR 0 53
34449: PUSH
34450: LD_INT 1
34452: NEG
34453: PUSH
34454: LD_INT 3
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: LD_INT 3
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 1
34475: PUSH
34476: LD_INT 2
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34489: LD_ADDR_VAR 0 54
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: LD_INT 1
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 3
34507: PUSH
34508: LD_INT 0
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 3
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: LIST
34529: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34530: LD_ADDR_VAR 0 55
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: LD_INT 2
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 3
34547: PUSH
34548: LD_INT 3
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 2
34557: PUSH
34558: LD_INT 3
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34570: LD_ADDR_VAR 0 56
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: LD_INT 3
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34611: LD_ADDR_VAR 0 57
34615: PUSH
34616: LD_INT 2
34618: NEG
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 3
34629: NEG
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 3
34640: NEG
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34655: LD_ADDR_VAR 0 58
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: LD_INT 3
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 3
34674: NEG
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 3
34686: NEG
34687: PUSH
34688: LD_INT 3
34690: NEG
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
34701: LD_ADDR_VAR 0 59
34705: PUSH
34706: LD_INT 1
34708: NEG
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34745: LD_ADDR_VAR 0 60
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: LD_INT 1
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34786: LD_ADDR_VAR 0 61
34790: PUSH
34791: LD_INT 2
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 2
34803: PUSH
34804: LD_INT 2
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: LIST
34825: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34826: LD_ADDR_VAR 0 62
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34867: LD_ADDR_VAR 0 63
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 2
34885: NEG
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 2
34896: NEG
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: LIST
34910: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34911: LD_ADDR_VAR 0 64
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: LD_INT 2
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 2
34930: NEG
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: LD_INT 2
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: LIST
34956: ST_TO_ADDR
// end ; 2 :
34957: GO 38223
34959: LD_INT 2
34961: DOUBLE
34962: EQUAL
34963: IFTRUE 34967
34965: GO 38222
34967: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
34968: LD_ADDR_VAR 0 29
34972: PUSH
34973: LD_INT 4
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 4
34985: PUSH
34986: LD_INT 1
34988: NEG
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 5
34996: PUSH
34997: LD_INT 0
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 5
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 4
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 3
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 3
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 3
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 5
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: LD_INT 3
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 3
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 4
35088: PUSH
35089: LD_INT 3
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 4
35098: PUSH
35099: LD_INT 4
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 3
35108: PUSH
35109: LD_INT 4
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 2
35118: PUSH
35119: LD_INT 3
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 2
35128: PUSH
35129: LD_INT 2
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 4
35138: PUSH
35139: LD_INT 2
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: LD_INT 4
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: LD_INT 4
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: LD_INT 3
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: LD_INT 4
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: LD_INT 5
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: LD_INT 5
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: NEG
35209: PUSH
35210: LD_INT 4
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: LD_INT 3
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: LD_INT 5
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: NEG
35241: PUSH
35242: LD_INT 3
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 3
35251: NEG
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 3
35262: NEG
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 2
35274: NEG
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 2
35285: NEG
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 3
35296: NEG
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 4
35307: NEG
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 4
35318: NEG
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 4
35330: NEG
35331: PUSH
35332: LD_INT 2
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 2
35342: NEG
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 4
35353: NEG
35354: PUSH
35355: LD_INT 4
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 4
35365: NEG
35366: PUSH
35367: LD_INT 5
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 3
35377: NEG
35378: PUSH
35379: LD_INT 4
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 3
35389: NEG
35390: PUSH
35391: LD_INT 3
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 4
35401: NEG
35402: PUSH
35403: LD_INT 3
35405: NEG
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 5
35413: NEG
35414: PUSH
35415: LD_INT 4
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 5
35425: NEG
35426: PUSH
35427: LD_INT 5
35429: NEG
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 3
35437: NEG
35438: PUSH
35439: LD_INT 5
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 5
35449: NEG
35450: PUSH
35451: LD_INT 3
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
35506: LD_ADDR_VAR 0 30
35510: PUSH
35511: LD_INT 4
35513: PUSH
35514: LD_INT 4
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 4
35523: PUSH
35524: LD_INT 3
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 5
35533: PUSH
35534: LD_INT 4
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 5
35543: PUSH
35544: LD_INT 5
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 4
35553: PUSH
35554: LD_INT 5
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 3
35563: PUSH
35564: LD_INT 4
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 3
35573: PUSH
35574: LD_INT 3
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 5
35583: PUSH
35584: LD_INT 3
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: LD_INT 5
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 3
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: LD_INT 3
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 1
35633: PUSH
35634: LD_INT 4
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: LD_INT 4
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: LD_INT 3
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: LD_INT 4
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 2
35685: NEG
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 4
35696: NEG
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 4
35707: NEG
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 3
35719: NEG
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 3
35730: NEG
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 4
35741: NEG
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 5
35752: NEG
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 5
35763: NEG
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 5
35775: NEG
35776: PUSH
35777: LD_INT 2
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 3
35787: NEG
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 3
35798: NEG
35799: PUSH
35800: LD_INT 3
35802: NEG
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 3
35810: NEG
35811: PUSH
35812: LD_INT 4
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: NEG
35823: PUSH
35824: LD_INT 3
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 2
35834: NEG
35835: PUSH
35836: LD_INT 2
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 3
35846: NEG
35847: PUSH
35848: LD_INT 2
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 4
35858: NEG
35859: PUSH
35860: LD_INT 3
35862: NEG
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 4
35870: NEG
35871: PUSH
35872: LD_INT 4
35874: NEG
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 2
35882: NEG
35883: PUSH
35884: LD_INT 4
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 4
35894: NEG
35895: PUSH
35896: LD_INT 2
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: LD_INT 4
35909: NEG
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: LD_INT 5
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: LD_INT 4
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: LD_INT 3
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 3
35953: NEG
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 1
35961: NEG
35962: PUSH
35963: LD_INT 4
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: LD_INT 5
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 3
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 2
35996: NEG
35997: PUSH
35998: LD_INT 5
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
36053: LD_ADDR_VAR 0 31
36057: PUSH
36058: LD_INT 0
36060: PUSH
36061: LD_INT 4
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 3
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: LD_INT 4
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: LD_INT 5
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: LD_INT 5
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: LD_INT 4
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: LD_INT 3
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: LD_INT 5
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: NEG
36143: PUSH
36144: LD_INT 3
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 3
36153: NEG
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 3
36164: NEG
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 2
36176: NEG
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 2
36187: NEG
36188: PUSH
36189: LD_INT 1
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 3
36198: NEG
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 4
36209: NEG
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 4
36220: NEG
36221: PUSH
36222: LD_INT 1
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 4
36232: NEG
36233: PUSH
36234: LD_INT 2
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 2
36244: NEG
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 4
36255: NEG
36256: PUSH
36257: LD_INT 4
36259: NEG
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 4
36267: NEG
36268: PUSH
36269: LD_INT 5
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 3
36279: NEG
36280: PUSH
36281: LD_INT 4
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 3
36291: NEG
36292: PUSH
36293: LD_INT 3
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 4
36303: NEG
36304: PUSH
36305: LD_INT 3
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 5
36315: NEG
36316: PUSH
36317: LD_INT 4
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 5
36327: NEG
36328: PUSH
36329: LD_INT 5
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 3
36339: NEG
36340: PUSH
36341: LD_INT 5
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 5
36351: NEG
36352: PUSH
36353: LD_INT 3
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: LD_INT 3
36366: NEG
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: LD_INT 4
36377: NEG
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: LD_INT 3
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: LD_INT 2
36399: NEG
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: LD_INT 2
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: LD_INT 3
36422: NEG
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 1
36430: NEG
36431: PUSH
36432: LD_INT 4
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 2
36442: PUSH
36443: LD_INT 2
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 4
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 4
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 4
36475: PUSH
36476: LD_INT 1
36478: NEG
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 5
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 5
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 4
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 3
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 3
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 3
36537: PUSH
36538: LD_INT 2
36540: NEG
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 5
36548: PUSH
36549: LD_INT 2
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
36603: LD_ADDR_VAR 0 32
36607: PUSH
36608: LD_INT 4
36610: NEG
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 4
36621: NEG
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 3
36633: NEG
36634: PUSH
36635: LD_INT 0
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 3
36644: NEG
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 4
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 5
36666: NEG
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 5
36677: NEG
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 5
36689: NEG
36690: PUSH
36691: LD_INT 2
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 3
36701: NEG
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 3
36712: NEG
36713: PUSH
36714: LD_INT 3
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 3
36724: NEG
36725: PUSH
36726: LD_INT 4
36728: NEG
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 2
36736: NEG
36737: PUSH
36738: LD_INT 3
36740: NEG
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 2
36748: NEG
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 3
36760: NEG
36761: PUSH
36762: LD_INT 2
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 4
36772: NEG
36773: PUSH
36774: LD_INT 3
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 4
36784: NEG
36785: PUSH
36786: LD_INT 4
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 2
36796: NEG
36797: PUSH
36798: LD_INT 4
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 4
36808: NEG
36809: PUSH
36810: LD_INT 2
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 0
36820: PUSH
36821: LD_INT 4
36823: NEG
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: LD_INT 5
36834: NEG
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: LD_INT 4
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 1
36853: PUSH
36854: LD_INT 3
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: LD_INT 3
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 1
36875: NEG
36876: PUSH
36877: LD_INT 4
36879: NEG
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: LD_INT 5
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: LD_INT 3
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 2
36910: NEG
36911: PUSH
36912: LD_INT 5
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 3
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 3
36932: PUSH
36933: LD_INT 1
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 4
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 4
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 3
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 2
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 2
36994: PUSH
36995: LD_INT 2
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 4
37005: PUSH
37006: LD_INT 2
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 4
37015: PUSH
37016: LD_INT 4
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 4
37025: PUSH
37026: LD_INT 3
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 5
37035: PUSH
37036: LD_INT 4
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 5
37045: PUSH
37046: LD_INT 5
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 4
37055: PUSH
37056: LD_INT 5
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 3
37065: PUSH
37066: LD_INT 4
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 3
37075: PUSH
37076: LD_INT 3
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 5
37085: PUSH
37086: LD_INT 3
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 3
37095: PUSH
37096: LD_INT 5
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
37150: LD_ADDR_VAR 0 33
37154: PUSH
37155: LD_INT 4
37157: NEG
37158: PUSH
37159: LD_INT 4
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 4
37169: NEG
37170: PUSH
37171: LD_INT 5
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 3
37181: NEG
37182: PUSH
37183: LD_INT 4
37185: NEG
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 3
37193: NEG
37194: PUSH
37195: LD_INT 3
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 4
37205: NEG
37206: PUSH
37207: LD_INT 3
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 5
37217: NEG
37218: PUSH
37219: LD_INT 4
37221: NEG
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 5
37229: NEG
37230: PUSH
37231: LD_INT 5
37233: NEG
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 3
37241: NEG
37242: PUSH
37243: LD_INT 5
37245: NEG
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 5
37253: NEG
37254: PUSH
37255: LD_INT 3
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: LD_INT 3
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: LD_INT 4
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: LD_INT 3
37290: NEG
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 1
37298: PUSH
37299: LD_INT 2
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: LD_INT 2
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 1
37320: NEG
37321: PUSH
37322: LD_INT 3
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: LD_INT 4
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: LD_INT 2
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 2
37355: NEG
37356: PUSH
37357: LD_INT 4
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 4
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 4
37377: PUSH
37378: LD_INT 1
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 5
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 5
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 4
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 3
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 3
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 3
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 5
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 3
37460: PUSH
37461: LD_INT 3
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 4
37480: PUSH
37481: LD_INT 3
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 4
37490: PUSH
37491: LD_INT 4
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 3
37500: PUSH
37501: LD_INT 4
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 3
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 2
37520: PUSH
37521: LD_INT 2
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 4
37530: PUSH
37531: LD_INT 2
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 2
37540: PUSH
37541: LD_INT 4
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: LD_INT 4
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: LD_INT 3
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 4
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: LD_INT 5
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 5
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: LD_INT 4
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: LD_INT 3
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: LD_INT 5
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 2
37632: NEG
37633: PUSH
37634: LD_INT 3
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
37688: LD_ADDR_VAR 0 34
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 4
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 5
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: LD_INT 4
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: LD_INT 3
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: LD_INT 3
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: LD_INT 4
37754: NEG
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: LD_INT 5
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: LD_INT 3
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 2
37785: NEG
37786: PUSH
37787: LD_INT 5
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 3
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 3
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 4
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 4
37828: PUSH
37829: LD_INT 1
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 3
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 2
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: LD_INT 2
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 4
37880: PUSH
37881: LD_INT 2
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 4
37890: PUSH
37891: LD_INT 4
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 4
37900: PUSH
37901: LD_INT 3
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 5
37910: PUSH
37911: LD_INT 4
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 5
37920: PUSH
37921: LD_INT 5
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 4
37930: PUSH
37931: LD_INT 5
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 3
37940: PUSH
37941: LD_INT 4
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 3
37950: PUSH
37951: LD_INT 3
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 5
37960: PUSH
37961: LD_INT 3
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: LD_INT 5
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: LD_INT 3
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: LD_INT 2
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: LD_INT 3
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: LD_INT 4
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: LD_INT 4
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: LD_INT 3
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 2
38052: PUSH
38053: LD_INT 4
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 2
38062: NEG
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 4
38073: NEG
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 4
38084: NEG
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 3
38096: NEG
38097: PUSH
38098: LD_INT 0
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 3
38107: NEG
38108: PUSH
38109: LD_INT 1
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 4
38118: NEG
38119: PUSH
38120: LD_INT 1
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 5
38129: NEG
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 5
38140: NEG
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 5
38152: NEG
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 3
38164: NEG
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: ST_TO_ADDR
// end ; end ;
38220: GO 38223
38222: POP
// case btype of b_depot , b_warehouse :
38223: LD_VAR 0 1
38227: PUSH
38228: LD_INT 0
38230: DOUBLE
38231: EQUAL
38232: IFTRUE 38242
38234: LD_INT 1
38236: DOUBLE
38237: EQUAL
38238: IFTRUE 38242
38240: GO 38443
38242: POP
// case nation of nation_american :
38243: LD_VAR 0 5
38247: PUSH
38248: LD_INT 1
38250: DOUBLE
38251: EQUAL
38252: IFTRUE 38256
38254: GO 38312
38256: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38257: LD_ADDR_VAR 0 9
38261: PUSH
38262: LD_VAR 0 11
38266: PUSH
38267: LD_VAR 0 12
38271: PUSH
38272: LD_VAR 0 13
38276: PUSH
38277: LD_VAR 0 14
38281: PUSH
38282: LD_VAR 0 15
38286: PUSH
38287: LD_VAR 0 16
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: PUSH
38300: LD_VAR 0 4
38304: PUSH
38305: LD_INT 1
38307: PLUS
38308: ARRAY
38309: ST_TO_ADDR
38310: GO 38441
38312: LD_INT 2
38314: DOUBLE
38315: EQUAL
38316: IFTRUE 38320
38318: GO 38376
38320: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38321: LD_ADDR_VAR 0 9
38325: PUSH
38326: LD_VAR 0 17
38330: PUSH
38331: LD_VAR 0 18
38335: PUSH
38336: LD_VAR 0 19
38340: PUSH
38341: LD_VAR 0 20
38345: PUSH
38346: LD_VAR 0 21
38350: PUSH
38351: LD_VAR 0 22
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: PUSH
38364: LD_VAR 0 4
38368: PUSH
38369: LD_INT 1
38371: PLUS
38372: ARRAY
38373: ST_TO_ADDR
38374: GO 38441
38376: LD_INT 3
38378: DOUBLE
38379: EQUAL
38380: IFTRUE 38384
38382: GO 38440
38384: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38385: LD_ADDR_VAR 0 9
38389: PUSH
38390: LD_VAR 0 23
38394: PUSH
38395: LD_VAR 0 24
38399: PUSH
38400: LD_VAR 0 25
38404: PUSH
38405: LD_VAR 0 26
38409: PUSH
38410: LD_VAR 0 27
38414: PUSH
38415: LD_VAR 0 28
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: PUSH
38428: LD_VAR 0 4
38432: PUSH
38433: LD_INT 1
38435: PLUS
38436: ARRAY
38437: ST_TO_ADDR
38438: GO 38441
38440: POP
38441: GO 38996
38443: LD_INT 2
38445: DOUBLE
38446: EQUAL
38447: IFTRUE 38457
38449: LD_INT 3
38451: DOUBLE
38452: EQUAL
38453: IFTRUE 38457
38455: GO 38513
38457: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38458: LD_ADDR_VAR 0 9
38462: PUSH
38463: LD_VAR 0 29
38467: PUSH
38468: LD_VAR 0 30
38472: PUSH
38473: LD_VAR 0 31
38477: PUSH
38478: LD_VAR 0 32
38482: PUSH
38483: LD_VAR 0 33
38487: PUSH
38488: LD_VAR 0 34
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: PUSH
38501: LD_VAR 0 4
38505: PUSH
38506: LD_INT 1
38508: PLUS
38509: ARRAY
38510: ST_TO_ADDR
38511: GO 38996
38513: LD_INT 16
38515: DOUBLE
38516: EQUAL
38517: IFTRUE 38575
38519: LD_INT 17
38521: DOUBLE
38522: EQUAL
38523: IFTRUE 38575
38525: LD_INT 18
38527: DOUBLE
38528: EQUAL
38529: IFTRUE 38575
38531: LD_INT 19
38533: DOUBLE
38534: EQUAL
38535: IFTRUE 38575
38537: LD_INT 22
38539: DOUBLE
38540: EQUAL
38541: IFTRUE 38575
38543: LD_INT 20
38545: DOUBLE
38546: EQUAL
38547: IFTRUE 38575
38549: LD_INT 21
38551: DOUBLE
38552: EQUAL
38553: IFTRUE 38575
38555: LD_INT 23
38557: DOUBLE
38558: EQUAL
38559: IFTRUE 38575
38561: LD_INT 24
38563: DOUBLE
38564: EQUAL
38565: IFTRUE 38575
38567: LD_INT 25
38569: DOUBLE
38570: EQUAL
38571: IFTRUE 38575
38573: GO 38631
38575: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
38576: LD_ADDR_VAR 0 9
38580: PUSH
38581: LD_VAR 0 35
38585: PUSH
38586: LD_VAR 0 36
38590: PUSH
38591: LD_VAR 0 37
38595: PUSH
38596: LD_VAR 0 38
38600: PUSH
38601: LD_VAR 0 39
38605: PUSH
38606: LD_VAR 0 40
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: PUSH
38619: LD_VAR 0 4
38623: PUSH
38624: LD_INT 1
38626: PLUS
38627: ARRAY
38628: ST_TO_ADDR
38629: GO 38996
38631: LD_INT 6
38633: DOUBLE
38634: EQUAL
38635: IFTRUE 38687
38637: LD_INT 7
38639: DOUBLE
38640: EQUAL
38641: IFTRUE 38687
38643: LD_INT 8
38645: DOUBLE
38646: EQUAL
38647: IFTRUE 38687
38649: LD_INT 13
38651: DOUBLE
38652: EQUAL
38653: IFTRUE 38687
38655: LD_INT 12
38657: DOUBLE
38658: EQUAL
38659: IFTRUE 38687
38661: LD_INT 15
38663: DOUBLE
38664: EQUAL
38665: IFTRUE 38687
38667: LD_INT 11
38669: DOUBLE
38670: EQUAL
38671: IFTRUE 38687
38673: LD_INT 14
38675: DOUBLE
38676: EQUAL
38677: IFTRUE 38687
38679: LD_INT 10
38681: DOUBLE
38682: EQUAL
38683: IFTRUE 38687
38685: GO 38743
38687: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
38688: LD_ADDR_VAR 0 9
38692: PUSH
38693: LD_VAR 0 41
38697: PUSH
38698: LD_VAR 0 42
38702: PUSH
38703: LD_VAR 0 43
38707: PUSH
38708: LD_VAR 0 44
38712: PUSH
38713: LD_VAR 0 45
38717: PUSH
38718: LD_VAR 0 46
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: PUSH
38731: LD_VAR 0 4
38735: PUSH
38736: LD_INT 1
38738: PLUS
38739: ARRAY
38740: ST_TO_ADDR
38741: GO 38996
38743: LD_INT 36
38745: DOUBLE
38746: EQUAL
38747: IFTRUE 38751
38749: GO 38807
38751: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
38752: LD_ADDR_VAR 0 9
38756: PUSH
38757: LD_VAR 0 47
38761: PUSH
38762: LD_VAR 0 48
38766: PUSH
38767: LD_VAR 0 49
38771: PUSH
38772: LD_VAR 0 50
38776: PUSH
38777: LD_VAR 0 51
38781: PUSH
38782: LD_VAR 0 52
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: PUSH
38795: LD_VAR 0 4
38799: PUSH
38800: LD_INT 1
38802: PLUS
38803: ARRAY
38804: ST_TO_ADDR
38805: GO 38996
38807: LD_INT 4
38809: DOUBLE
38810: EQUAL
38811: IFTRUE 38833
38813: LD_INT 5
38815: DOUBLE
38816: EQUAL
38817: IFTRUE 38833
38819: LD_INT 34
38821: DOUBLE
38822: EQUAL
38823: IFTRUE 38833
38825: LD_INT 37
38827: DOUBLE
38828: EQUAL
38829: IFTRUE 38833
38831: GO 38889
38833: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
38834: LD_ADDR_VAR 0 9
38838: PUSH
38839: LD_VAR 0 53
38843: PUSH
38844: LD_VAR 0 54
38848: PUSH
38849: LD_VAR 0 55
38853: PUSH
38854: LD_VAR 0 56
38858: PUSH
38859: LD_VAR 0 57
38863: PUSH
38864: LD_VAR 0 58
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: PUSH
38877: LD_VAR 0 4
38881: PUSH
38882: LD_INT 1
38884: PLUS
38885: ARRAY
38886: ST_TO_ADDR
38887: GO 38996
38889: LD_INT 31
38891: DOUBLE
38892: EQUAL
38893: IFTRUE 38939
38895: LD_INT 32
38897: DOUBLE
38898: EQUAL
38899: IFTRUE 38939
38901: LD_INT 33
38903: DOUBLE
38904: EQUAL
38905: IFTRUE 38939
38907: LD_INT 27
38909: DOUBLE
38910: EQUAL
38911: IFTRUE 38939
38913: LD_INT 26
38915: DOUBLE
38916: EQUAL
38917: IFTRUE 38939
38919: LD_INT 28
38921: DOUBLE
38922: EQUAL
38923: IFTRUE 38939
38925: LD_INT 29
38927: DOUBLE
38928: EQUAL
38929: IFTRUE 38939
38931: LD_INT 30
38933: DOUBLE
38934: EQUAL
38935: IFTRUE 38939
38937: GO 38995
38939: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
38940: LD_ADDR_VAR 0 9
38944: PUSH
38945: LD_VAR 0 59
38949: PUSH
38950: LD_VAR 0 60
38954: PUSH
38955: LD_VAR 0 61
38959: PUSH
38960: LD_VAR 0 62
38964: PUSH
38965: LD_VAR 0 63
38969: PUSH
38970: LD_VAR 0 64
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: PUSH
38983: LD_VAR 0 4
38987: PUSH
38988: LD_INT 1
38990: PLUS
38991: ARRAY
38992: ST_TO_ADDR
38993: GO 38996
38995: POP
// temp_list2 = [ ] ;
38996: LD_ADDR_VAR 0 10
39000: PUSH
39001: EMPTY
39002: ST_TO_ADDR
// for i in temp_list do
39003: LD_ADDR_VAR 0 8
39007: PUSH
39008: LD_VAR 0 9
39012: PUSH
39013: FOR_IN
39014: IFFALSE 39066
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
39016: LD_ADDR_VAR 0 10
39020: PUSH
39021: LD_VAR 0 10
39025: PUSH
39026: LD_VAR 0 8
39030: PUSH
39031: LD_INT 1
39033: ARRAY
39034: PUSH
39035: LD_VAR 0 2
39039: PLUS
39040: PUSH
39041: LD_VAR 0 8
39045: PUSH
39046: LD_INT 2
39048: ARRAY
39049: PUSH
39050: LD_VAR 0 3
39054: PLUS
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: EMPTY
39061: LIST
39062: ADD
39063: ST_TO_ADDR
39064: GO 39013
39066: POP
39067: POP
// result = temp_list2 ;
39068: LD_ADDR_VAR 0 7
39072: PUSH
39073: LD_VAR 0 10
39077: ST_TO_ADDR
// end ;
39078: LD_VAR 0 7
39082: RET
// export function EnemyInRange ( unit , dist ) ; begin
39083: LD_INT 0
39085: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
39086: LD_ADDR_VAR 0 3
39090: PUSH
39091: LD_VAR 0 1
39095: PPUSH
39096: CALL_OW 255
39100: PPUSH
39101: LD_VAR 0 1
39105: PPUSH
39106: CALL_OW 250
39110: PPUSH
39111: LD_VAR 0 1
39115: PPUSH
39116: CALL_OW 251
39120: PPUSH
39121: LD_VAR 0 2
39125: PPUSH
39126: CALL 12479 0 4
39130: PUSH
39131: LD_INT 4
39133: ARRAY
39134: ST_TO_ADDR
// end ;
39135: LD_VAR 0 3
39139: RET
// export function PlayerSeeMe ( unit ) ; begin
39140: LD_INT 0
39142: PPUSH
// result := See ( your_side , unit ) ;
39143: LD_ADDR_VAR 0 2
39147: PUSH
39148: LD_OWVAR 2
39152: PPUSH
39153: LD_VAR 0 1
39157: PPUSH
39158: CALL_OW 292
39162: ST_TO_ADDR
// end ;
39163: LD_VAR 0 2
39167: RET
// export function ReverseDir ( unit ) ; begin
39168: LD_INT 0
39170: PPUSH
// if not unit then
39171: LD_VAR 0 1
39175: NOT
39176: IFFALSE 39180
// exit ;
39178: GO 39203
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
39180: LD_ADDR_VAR 0 2
39184: PUSH
39185: LD_VAR 0 1
39189: PPUSH
39190: CALL_OW 254
39194: PUSH
39195: LD_INT 3
39197: PLUS
39198: PUSH
39199: LD_INT 6
39201: MOD
39202: ST_TO_ADDR
// end ;
39203: LD_VAR 0 2
39207: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
39208: LD_INT 0
39210: PPUSH
39211: PPUSH
39212: PPUSH
39213: PPUSH
39214: PPUSH
39215: PPUSH
// if not unit or not hexes then
39216: LD_VAR 0 1
39220: NOT
39221: PUSH
39222: LD_VAR 0 2
39226: NOT
39227: OR
39228: IFFALSE 39232
// exit ;
39230: GO 39355
// dist := 9999 ;
39232: LD_ADDR_VAR 0 5
39236: PUSH
39237: LD_INT 9999
39239: ST_TO_ADDR
// for i = 1 to hexes do
39240: LD_ADDR_VAR 0 4
39244: PUSH
39245: DOUBLE
39246: LD_INT 1
39248: DEC
39249: ST_TO_ADDR
39250: LD_VAR 0 2
39254: PUSH
39255: FOR_TO
39256: IFFALSE 39343
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39258: LD_ADDR_VAR 0 6
39262: PUSH
39263: LD_VAR 0 1
39267: PPUSH
39268: LD_VAR 0 2
39272: PUSH
39273: LD_VAR 0 4
39277: ARRAY
39278: PUSH
39279: LD_INT 1
39281: ARRAY
39282: PPUSH
39283: LD_VAR 0 2
39287: PUSH
39288: LD_VAR 0 4
39292: ARRAY
39293: PUSH
39294: LD_INT 2
39296: ARRAY
39297: PPUSH
39298: CALL_OW 297
39302: ST_TO_ADDR
// if tdist < dist then
39303: LD_VAR 0 6
39307: PUSH
39308: LD_VAR 0 5
39312: LESS
39313: IFFALSE 39341
// begin hex := hexes [ i ] ;
39315: LD_ADDR_VAR 0 8
39319: PUSH
39320: LD_VAR 0 2
39324: PUSH
39325: LD_VAR 0 4
39329: ARRAY
39330: ST_TO_ADDR
// dist := tdist ;
39331: LD_ADDR_VAR 0 5
39335: PUSH
39336: LD_VAR 0 6
39340: ST_TO_ADDR
// end ; end ;
39341: GO 39255
39343: POP
39344: POP
// result := hex ;
39345: LD_ADDR_VAR 0 3
39349: PUSH
39350: LD_VAR 0 8
39354: ST_TO_ADDR
// end ;
39355: LD_VAR 0 3
39359: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39360: LD_INT 0
39362: PPUSH
39363: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39364: LD_VAR 0 1
39368: NOT
39369: PUSH
39370: LD_VAR 0 1
39374: PUSH
39375: LD_INT 21
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 23
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PPUSH
39399: CALL_OW 69
39403: IN
39404: NOT
39405: OR
39406: IFFALSE 39410
// exit ;
39408: GO 39457
// for i = 1 to 3 do
39410: LD_ADDR_VAR 0 3
39414: PUSH
39415: DOUBLE
39416: LD_INT 1
39418: DEC
39419: ST_TO_ADDR
39420: LD_INT 3
39422: PUSH
39423: FOR_TO
39424: IFFALSE 39455
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
39426: LD_VAR 0 1
39430: PPUSH
39431: CALL_OW 250
39435: PPUSH
39436: LD_VAR 0 1
39440: PPUSH
39441: CALL_OW 251
39445: PPUSH
39446: LD_INT 1
39448: PPUSH
39449: CALL_OW 453
39453: GO 39423
39455: POP
39456: POP
// end ;
39457: LD_VAR 0 2
39461: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
39462: LD_INT 0
39464: PPUSH
39465: PPUSH
39466: PPUSH
39467: PPUSH
39468: PPUSH
39469: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
39470: LD_VAR 0 1
39474: NOT
39475: PUSH
39476: LD_VAR 0 2
39480: NOT
39481: OR
39482: PUSH
39483: LD_VAR 0 1
39487: PPUSH
39488: CALL_OW 314
39492: OR
39493: IFFALSE 39497
// exit ;
39495: GO 39938
// x := GetX ( enemy_unit ) ;
39497: LD_ADDR_VAR 0 7
39501: PUSH
39502: LD_VAR 0 2
39506: PPUSH
39507: CALL_OW 250
39511: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
39512: LD_ADDR_VAR 0 8
39516: PUSH
39517: LD_VAR 0 2
39521: PPUSH
39522: CALL_OW 251
39526: ST_TO_ADDR
// if not x or not y then
39527: LD_VAR 0 7
39531: NOT
39532: PUSH
39533: LD_VAR 0 8
39537: NOT
39538: OR
39539: IFFALSE 39543
// exit ;
39541: GO 39938
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
39543: LD_ADDR_VAR 0 6
39547: PUSH
39548: LD_VAR 0 7
39552: PPUSH
39553: LD_INT 0
39555: PPUSH
39556: LD_INT 4
39558: PPUSH
39559: CALL_OW 272
39563: PUSH
39564: LD_VAR 0 8
39568: PPUSH
39569: LD_INT 0
39571: PPUSH
39572: LD_INT 4
39574: PPUSH
39575: CALL_OW 273
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_VAR 0 7
39588: PPUSH
39589: LD_INT 1
39591: PPUSH
39592: LD_INT 4
39594: PPUSH
39595: CALL_OW 272
39599: PUSH
39600: LD_VAR 0 8
39604: PPUSH
39605: LD_INT 1
39607: PPUSH
39608: LD_INT 4
39610: PPUSH
39611: CALL_OW 273
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_VAR 0 7
39624: PPUSH
39625: LD_INT 2
39627: PPUSH
39628: LD_INT 4
39630: PPUSH
39631: CALL_OW 272
39635: PUSH
39636: LD_VAR 0 8
39640: PPUSH
39641: LD_INT 2
39643: PPUSH
39644: LD_INT 4
39646: PPUSH
39647: CALL_OW 273
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_VAR 0 7
39660: PPUSH
39661: LD_INT 3
39663: PPUSH
39664: LD_INT 4
39666: PPUSH
39667: CALL_OW 272
39671: PUSH
39672: LD_VAR 0 8
39676: PPUSH
39677: LD_INT 3
39679: PPUSH
39680: LD_INT 4
39682: PPUSH
39683: CALL_OW 273
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_VAR 0 7
39696: PPUSH
39697: LD_INT 4
39699: PPUSH
39700: LD_INT 4
39702: PPUSH
39703: CALL_OW 272
39707: PUSH
39708: LD_VAR 0 8
39712: PPUSH
39713: LD_INT 4
39715: PPUSH
39716: LD_INT 4
39718: PPUSH
39719: CALL_OW 273
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_VAR 0 7
39732: PPUSH
39733: LD_INT 5
39735: PPUSH
39736: LD_INT 4
39738: PPUSH
39739: CALL_OW 272
39743: PUSH
39744: LD_VAR 0 8
39748: PPUSH
39749: LD_INT 5
39751: PPUSH
39752: LD_INT 4
39754: PPUSH
39755: CALL_OW 273
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: ST_TO_ADDR
// for i = tmp downto 1 do
39772: LD_ADDR_VAR 0 4
39776: PUSH
39777: DOUBLE
39778: LD_VAR 0 6
39782: INC
39783: ST_TO_ADDR
39784: LD_INT 1
39786: PUSH
39787: FOR_DOWNTO
39788: IFFALSE 39889
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
39790: LD_VAR 0 6
39794: PUSH
39795: LD_VAR 0 4
39799: ARRAY
39800: PUSH
39801: LD_INT 1
39803: ARRAY
39804: PPUSH
39805: LD_VAR 0 6
39809: PUSH
39810: LD_VAR 0 4
39814: ARRAY
39815: PUSH
39816: LD_INT 2
39818: ARRAY
39819: PPUSH
39820: CALL_OW 488
39824: NOT
39825: PUSH
39826: LD_VAR 0 6
39830: PUSH
39831: LD_VAR 0 4
39835: ARRAY
39836: PUSH
39837: LD_INT 1
39839: ARRAY
39840: PPUSH
39841: LD_VAR 0 6
39845: PUSH
39846: LD_VAR 0 4
39850: ARRAY
39851: PUSH
39852: LD_INT 2
39854: ARRAY
39855: PPUSH
39856: CALL_OW 428
39860: PUSH
39861: LD_INT 0
39863: NONEQUAL
39864: OR
39865: IFFALSE 39887
// tmp := Delete ( tmp , i ) ;
39867: LD_ADDR_VAR 0 6
39871: PUSH
39872: LD_VAR 0 6
39876: PPUSH
39877: LD_VAR 0 4
39881: PPUSH
39882: CALL_OW 3
39886: ST_TO_ADDR
39887: GO 39787
39889: POP
39890: POP
// j := GetClosestHex ( unit , tmp ) ;
39891: LD_ADDR_VAR 0 5
39895: PUSH
39896: LD_VAR 0 1
39900: PPUSH
39901: LD_VAR 0 6
39905: PPUSH
39906: CALL 39208 0 2
39910: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
39911: LD_VAR 0 1
39915: PPUSH
39916: LD_VAR 0 5
39920: PUSH
39921: LD_INT 1
39923: ARRAY
39924: PPUSH
39925: LD_VAR 0 5
39929: PUSH
39930: LD_INT 2
39932: ARRAY
39933: PPUSH
39934: CALL_OW 111
// end ;
39938: LD_VAR 0 3
39942: RET
// export function PrepareApemanSoldier ( ) ; begin
39943: LD_INT 0
39945: PPUSH
// uc_nation := 0 ;
39946: LD_ADDR_OWVAR 21
39950: PUSH
39951: LD_INT 0
39953: ST_TO_ADDR
// hc_sex := sex_male ;
39954: LD_ADDR_OWVAR 27
39958: PUSH
39959: LD_INT 1
39961: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
39962: LD_ADDR_OWVAR 28
39966: PUSH
39967: LD_INT 15
39969: ST_TO_ADDR
// hc_gallery :=  ;
39970: LD_ADDR_OWVAR 33
39974: PUSH
39975: LD_STRING 
39977: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
39978: LD_ADDR_OWVAR 31
39982: PUSH
39983: LD_INT 0
39985: PPUSH
39986: LD_INT 3
39988: PPUSH
39989: CALL_OW 12
39993: PUSH
39994: LD_INT 0
39996: PPUSH
39997: LD_INT 3
39999: PPUSH
40000: CALL_OW 12
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// end ;
40017: LD_VAR 0 1
40021: RET
// export function PrepareApemanEngineer ( ) ; begin
40022: LD_INT 0
40024: PPUSH
// uc_nation := 0 ;
40025: LD_ADDR_OWVAR 21
40029: PUSH
40030: LD_INT 0
40032: ST_TO_ADDR
// hc_sex := sex_male ;
40033: LD_ADDR_OWVAR 27
40037: PUSH
40038: LD_INT 1
40040: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
40041: LD_ADDR_OWVAR 28
40045: PUSH
40046: LD_INT 16
40048: ST_TO_ADDR
// hc_gallery :=  ;
40049: LD_ADDR_OWVAR 33
40053: PUSH
40054: LD_STRING 
40056: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40057: LD_ADDR_OWVAR 31
40061: PUSH
40062: LD_INT 0
40064: PPUSH
40065: LD_INT 3
40067: PPUSH
40068: CALL_OW 12
40072: PUSH
40073: LD_INT 0
40075: PPUSH
40076: LD_INT 3
40078: PPUSH
40079: CALL_OW 12
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: ST_TO_ADDR
// end ;
40096: LD_VAR 0 1
40100: RET
// export function PrepareApeman ( agressivity ) ; begin
40101: LD_INT 0
40103: PPUSH
// uc_side := 0 ;
40104: LD_ADDR_OWVAR 20
40108: PUSH
40109: LD_INT 0
40111: ST_TO_ADDR
// uc_nation := 0 ;
40112: LD_ADDR_OWVAR 21
40116: PUSH
40117: LD_INT 0
40119: ST_TO_ADDR
// hc_sex := sex_male ;
40120: LD_ADDR_OWVAR 27
40124: PUSH
40125: LD_INT 1
40127: ST_TO_ADDR
// hc_class := class_apeman ;
40128: LD_ADDR_OWVAR 28
40132: PUSH
40133: LD_INT 12
40135: ST_TO_ADDR
// hc_gallery :=  ;
40136: LD_ADDR_OWVAR 33
40140: PUSH
40141: LD_STRING 
40143: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40144: LD_ADDR_OWVAR 35
40148: PUSH
40149: LD_VAR 0 1
40153: NEG
40154: PPUSH
40155: LD_VAR 0 1
40159: PPUSH
40160: CALL_OW 12
40164: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40165: LD_ADDR_OWVAR 31
40169: PUSH
40170: LD_INT 0
40172: PPUSH
40173: LD_INT 3
40175: PPUSH
40176: CALL_OW 12
40180: PUSH
40181: LD_INT 0
40183: PPUSH
40184: LD_INT 3
40186: PPUSH
40187: CALL_OW 12
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: ST_TO_ADDR
// end ;
40204: LD_VAR 0 2
40208: RET
// export function PrepareTiger ( agressivity ) ; begin
40209: LD_INT 0
40211: PPUSH
// uc_side := 0 ;
40212: LD_ADDR_OWVAR 20
40216: PUSH
40217: LD_INT 0
40219: ST_TO_ADDR
// uc_nation := 0 ;
40220: LD_ADDR_OWVAR 21
40224: PUSH
40225: LD_INT 0
40227: ST_TO_ADDR
// hc_class := class_tiger ;
40228: LD_ADDR_OWVAR 28
40232: PUSH
40233: LD_INT 14
40235: ST_TO_ADDR
// hc_gallery :=  ;
40236: LD_ADDR_OWVAR 33
40240: PUSH
40241: LD_STRING 
40243: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40244: LD_ADDR_OWVAR 35
40248: PUSH
40249: LD_VAR 0 1
40253: NEG
40254: PPUSH
40255: LD_VAR 0 1
40259: PPUSH
40260: CALL_OW 12
40264: ST_TO_ADDR
// end ;
40265: LD_VAR 0 2
40269: RET
// export function PrepareEnchidna ( ) ; begin
40270: LD_INT 0
40272: PPUSH
// uc_side := 0 ;
40273: LD_ADDR_OWVAR 20
40277: PUSH
40278: LD_INT 0
40280: ST_TO_ADDR
// uc_nation := 0 ;
40281: LD_ADDR_OWVAR 21
40285: PUSH
40286: LD_INT 0
40288: ST_TO_ADDR
// hc_class := class_baggie ;
40289: LD_ADDR_OWVAR 28
40293: PUSH
40294: LD_INT 13
40296: ST_TO_ADDR
// hc_gallery :=  ;
40297: LD_ADDR_OWVAR 33
40301: PUSH
40302: LD_STRING 
40304: ST_TO_ADDR
// end ;
40305: LD_VAR 0 1
40309: RET
// export function PrepareFrog ( ) ; begin
40310: LD_INT 0
40312: PPUSH
// uc_side := 0 ;
40313: LD_ADDR_OWVAR 20
40317: PUSH
40318: LD_INT 0
40320: ST_TO_ADDR
// uc_nation := 0 ;
40321: LD_ADDR_OWVAR 21
40325: PUSH
40326: LD_INT 0
40328: ST_TO_ADDR
// hc_class := class_frog ;
40329: LD_ADDR_OWVAR 28
40333: PUSH
40334: LD_INT 19
40336: ST_TO_ADDR
// hc_gallery :=  ;
40337: LD_ADDR_OWVAR 33
40341: PUSH
40342: LD_STRING 
40344: ST_TO_ADDR
// end ;
40345: LD_VAR 0 1
40349: RET
// export function PrepareFish ( ) ; begin
40350: LD_INT 0
40352: PPUSH
// uc_side := 0 ;
40353: LD_ADDR_OWVAR 20
40357: PUSH
40358: LD_INT 0
40360: ST_TO_ADDR
// uc_nation := 0 ;
40361: LD_ADDR_OWVAR 21
40365: PUSH
40366: LD_INT 0
40368: ST_TO_ADDR
// hc_class := class_fish ;
40369: LD_ADDR_OWVAR 28
40373: PUSH
40374: LD_INT 20
40376: ST_TO_ADDR
// hc_gallery :=  ;
40377: LD_ADDR_OWVAR 33
40381: PUSH
40382: LD_STRING 
40384: ST_TO_ADDR
// end ;
40385: LD_VAR 0 1
40389: RET
// export function PrepareBird ( ) ; begin
40390: LD_INT 0
40392: PPUSH
// uc_side := 0 ;
40393: LD_ADDR_OWVAR 20
40397: PUSH
40398: LD_INT 0
40400: ST_TO_ADDR
// uc_nation := 0 ;
40401: LD_ADDR_OWVAR 21
40405: PUSH
40406: LD_INT 0
40408: ST_TO_ADDR
// hc_class := class_phororhacos ;
40409: LD_ADDR_OWVAR 28
40413: PUSH
40414: LD_INT 18
40416: ST_TO_ADDR
// hc_gallery :=  ;
40417: LD_ADDR_OWVAR 33
40421: PUSH
40422: LD_STRING 
40424: ST_TO_ADDR
// end ;
40425: LD_VAR 0 1
40429: RET
// export function PrepareHorse ( ) ; begin
40430: LD_INT 0
40432: PPUSH
// uc_side := 0 ;
40433: LD_ADDR_OWVAR 20
40437: PUSH
40438: LD_INT 0
40440: ST_TO_ADDR
// uc_nation := 0 ;
40441: LD_ADDR_OWVAR 21
40445: PUSH
40446: LD_INT 0
40448: ST_TO_ADDR
// hc_class := class_horse ;
40449: LD_ADDR_OWVAR 28
40453: PUSH
40454: LD_INT 21
40456: ST_TO_ADDR
// hc_gallery :=  ;
40457: LD_ADDR_OWVAR 33
40461: PUSH
40462: LD_STRING 
40464: ST_TO_ADDR
// end ;
40465: LD_VAR 0 1
40469: RET
// export function PrepareMastodont ( ) ; begin
40470: LD_INT 0
40472: PPUSH
// uc_side := 0 ;
40473: LD_ADDR_OWVAR 20
40477: PUSH
40478: LD_INT 0
40480: ST_TO_ADDR
// uc_nation := 0 ;
40481: LD_ADDR_OWVAR 21
40485: PUSH
40486: LD_INT 0
40488: ST_TO_ADDR
// vc_chassis := class_mastodont ;
40489: LD_ADDR_OWVAR 37
40493: PUSH
40494: LD_INT 31
40496: ST_TO_ADDR
// vc_control := control_rider ;
40497: LD_ADDR_OWVAR 38
40501: PUSH
40502: LD_INT 4
40504: ST_TO_ADDR
// end ;
40505: LD_VAR 0 1
40509: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
40510: LD_INT 0
40512: PPUSH
40513: PPUSH
40514: PPUSH
// uc_side = 0 ;
40515: LD_ADDR_OWVAR 20
40519: PUSH
40520: LD_INT 0
40522: ST_TO_ADDR
// uc_nation = 0 ;
40523: LD_ADDR_OWVAR 21
40527: PUSH
40528: LD_INT 0
40530: ST_TO_ADDR
// InitHc_All ( ) ;
40531: CALL_OW 584
// InitVc ;
40535: CALL_OW 20
// if mastodonts then
40539: LD_VAR 0 6
40543: IFFALSE 40610
// for i = 1 to mastodonts do
40545: LD_ADDR_VAR 0 11
40549: PUSH
40550: DOUBLE
40551: LD_INT 1
40553: DEC
40554: ST_TO_ADDR
40555: LD_VAR 0 6
40559: PUSH
40560: FOR_TO
40561: IFFALSE 40608
// begin vc_chassis := 31 ;
40563: LD_ADDR_OWVAR 37
40567: PUSH
40568: LD_INT 31
40570: ST_TO_ADDR
// vc_control := control_rider ;
40571: LD_ADDR_OWVAR 38
40575: PUSH
40576: LD_INT 4
40578: ST_TO_ADDR
// animal := CreateVehicle ;
40579: LD_ADDR_VAR 0 12
40583: PUSH
40584: CALL_OW 45
40588: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40589: LD_VAR 0 12
40593: PPUSH
40594: LD_VAR 0 8
40598: PPUSH
40599: LD_INT 0
40601: PPUSH
40602: CALL 42745 0 3
// end ;
40606: GO 40560
40608: POP
40609: POP
// if horses then
40610: LD_VAR 0 5
40614: IFFALSE 40681
// for i = 1 to horses do
40616: LD_ADDR_VAR 0 11
40620: PUSH
40621: DOUBLE
40622: LD_INT 1
40624: DEC
40625: ST_TO_ADDR
40626: LD_VAR 0 5
40630: PUSH
40631: FOR_TO
40632: IFFALSE 40679
// begin hc_class := 21 ;
40634: LD_ADDR_OWVAR 28
40638: PUSH
40639: LD_INT 21
40641: ST_TO_ADDR
// hc_gallery :=  ;
40642: LD_ADDR_OWVAR 33
40646: PUSH
40647: LD_STRING 
40649: ST_TO_ADDR
// animal := CreateHuman ;
40650: LD_ADDR_VAR 0 12
40654: PUSH
40655: CALL_OW 44
40659: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40660: LD_VAR 0 12
40664: PPUSH
40665: LD_VAR 0 8
40669: PPUSH
40670: LD_INT 0
40672: PPUSH
40673: CALL 42745 0 3
// end ;
40677: GO 40631
40679: POP
40680: POP
// if birds then
40681: LD_VAR 0 1
40685: IFFALSE 40752
// for i = 1 to birds do
40687: LD_ADDR_VAR 0 11
40691: PUSH
40692: DOUBLE
40693: LD_INT 1
40695: DEC
40696: ST_TO_ADDR
40697: LD_VAR 0 1
40701: PUSH
40702: FOR_TO
40703: IFFALSE 40750
// begin hc_class = 18 ;
40705: LD_ADDR_OWVAR 28
40709: PUSH
40710: LD_INT 18
40712: ST_TO_ADDR
// hc_gallery =  ;
40713: LD_ADDR_OWVAR 33
40717: PUSH
40718: LD_STRING 
40720: ST_TO_ADDR
// animal := CreateHuman ;
40721: LD_ADDR_VAR 0 12
40725: PUSH
40726: CALL_OW 44
40730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40731: LD_VAR 0 12
40735: PPUSH
40736: LD_VAR 0 8
40740: PPUSH
40741: LD_INT 0
40743: PPUSH
40744: CALL 42745 0 3
// end ;
40748: GO 40702
40750: POP
40751: POP
// if tigers then
40752: LD_VAR 0 2
40756: IFFALSE 40840
// for i = 1 to tigers do
40758: LD_ADDR_VAR 0 11
40762: PUSH
40763: DOUBLE
40764: LD_INT 1
40766: DEC
40767: ST_TO_ADDR
40768: LD_VAR 0 2
40772: PUSH
40773: FOR_TO
40774: IFFALSE 40838
// begin hc_class = class_tiger ;
40776: LD_ADDR_OWVAR 28
40780: PUSH
40781: LD_INT 14
40783: ST_TO_ADDR
// hc_gallery =  ;
40784: LD_ADDR_OWVAR 33
40788: PUSH
40789: LD_STRING 
40791: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
40792: LD_ADDR_OWVAR 35
40796: PUSH
40797: LD_INT 7
40799: NEG
40800: PPUSH
40801: LD_INT 7
40803: PPUSH
40804: CALL_OW 12
40808: ST_TO_ADDR
// animal := CreateHuman ;
40809: LD_ADDR_VAR 0 12
40813: PUSH
40814: CALL_OW 44
40818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40819: LD_VAR 0 12
40823: PPUSH
40824: LD_VAR 0 8
40828: PPUSH
40829: LD_INT 0
40831: PPUSH
40832: CALL 42745 0 3
// end ;
40836: GO 40773
40838: POP
40839: POP
// if apemans then
40840: LD_VAR 0 3
40844: IFFALSE 40967
// for i = 1 to apemans do
40846: LD_ADDR_VAR 0 11
40850: PUSH
40851: DOUBLE
40852: LD_INT 1
40854: DEC
40855: ST_TO_ADDR
40856: LD_VAR 0 3
40860: PUSH
40861: FOR_TO
40862: IFFALSE 40965
// begin hc_class = class_apeman ;
40864: LD_ADDR_OWVAR 28
40868: PUSH
40869: LD_INT 12
40871: ST_TO_ADDR
// hc_gallery =  ;
40872: LD_ADDR_OWVAR 33
40876: PUSH
40877: LD_STRING 
40879: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
40880: LD_ADDR_OWVAR 35
40884: PUSH
40885: LD_INT 2
40887: NEG
40888: PPUSH
40889: LD_INT 2
40891: PPUSH
40892: CALL_OW 12
40896: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
40897: LD_ADDR_OWVAR 31
40901: PUSH
40902: LD_INT 1
40904: PPUSH
40905: LD_INT 3
40907: PPUSH
40908: CALL_OW 12
40912: PUSH
40913: LD_INT 1
40915: PPUSH
40916: LD_INT 3
40918: PPUSH
40919: CALL_OW 12
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: ST_TO_ADDR
// animal := CreateHuman ;
40936: LD_ADDR_VAR 0 12
40940: PUSH
40941: CALL_OW 44
40945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40946: LD_VAR 0 12
40950: PPUSH
40951: LD_VAR 0 8
40955: PPUSH
40956: LD_INT 0
40958: PPUSH
40959: CALL 42745 0 3
// end ;
40963: GO 40861
40965: POP
40966: POP
// if enchidnas then
40967: LD_VAR 0 4
40971: IFFALSE 41038
// for i = 1 to enchidnas do
40973: LD_ADDR_VAR 0 11
40977: PUSH
40978: DOUBLE
40979: LD_INT 1
40981: DEC
40982: ST_TO_ADDR
40983: LD_VAR 0 4
40987: PUSH
40988: FOR_TO
40989: IFFALSE 41036
// begin hc_class = 13 ;
40991: LD_ADDR_OWVAR 28
40995: PUSH
40996: LD_INT 13
40998: ST_TO_ADDR
// hc_gallery =  ;
40999: LD_ADDR_OWVAR 33
41003: PUSH
41004: LD_STRING 
41006: ST_TO_ADDR
// animal := CreateHuman ;
41007: LD_ADDR_VAR 0 12
41011: PUSH
41012: CALL_OW 44
41016: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41017: LD_VAR 0 12
41021: PPUSH
41022: LD_VAR 0 8
41026: PPUSH
41027: LD_INT 0
41029: PPUSH
41030: CALL 42745 0 3
// end ;
41034: GO 40988
41036: POP
41037: POP
// if fishes then
41038: LD_VAR 0 7
41042: IFFALSE 41109
// for i = 1 to fishes do
41044: LD_ADDR_VAR 0 11
41048: PUSH
41049: DOUBLE
41050: LD_INT 1
41052: DEC
41053: ST_TO_ADDR
41054: LD_VAR 0 7
41058: PUSH
41059: FOR_TO
41060: IFFALSE 41107
// begin hc_class = 20 ;
41062: LD_ADDR_OWVAR 28
41066: PUSH
41067: LD_INT 20
41069: ST_TO_ADDR
// hc_gallery =  ;
41070: LD_ADDR_OWVAR 33
41074: PUSH
41075: LD_STRING 
41077: ST_TO_ADDR
// animal := CreateHuman ;
41078: LD_ADDR_VAR 0 12
41082: PUSH
41083: CALL_OW 44
41087: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41088: LD_VAR 0 12
41092: PPUSH
41093: LD_VAR 0 9
41097: PPUSH
41098: LD_INT 0
41100: PPUSH
41101: CALL 42745 0 3
// end ;
41105: GO 41059
41107: POP
41108: POP
// end ;
41109: LD_VAR 0 10
41113: RET
// export function WantHeal ( sci , unit ) ; begin
41114: LD_INT 0
41116: PPUSH
// if GetTaskList ( sci ) > 0 then
41117: LD_VAR 0 1
41121: PPUSH
41122: CALL_OW 437
41126: PUSH
41127: LD_INT 0
41129: GREATER
41130: IFFALSE 41200
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41132: LD_VAR 0 1
41136: PPUSH
41137: CALL_OW 437
41141: PUSH
41142: LD_INT 1
41144: ARRAY
41145: PUSH
41146: LD_INT 1
41148: ARRAY
41149: PUSH
41150: LD_STRING l
41152: EQUAL
41153: PUSH
41154: LD_VAR 0 1
41158: PPUSH
41159: CALL_OW 437
41163: PUSH
41164: LD_INT 1
41166: ARRAY
41167: PUSH
41168: LD_INT 4
41170: ARRAY
41171: PUSH
41172: LD_VAR 0 2
41176: EQUAL
41177: AND
41178: IFFALSE 41190
// result := true else
41180: LD_ADDR_VAR 0 3
41184: PUSH
41185: LD_INT 1
41187: ST_TO_ADDR
41188: GO 41198
// result := false ;
41190: LD_ADDR_VAR 0 3
41194: PUSH
41195: LD_INT 0
41197: ST_TO_ADDR
// end else
41198: GO 41208
// result := false ;
41200: LD_ADDR_VAR 0 3
41204: PUSH
41205: LD_INT 0
41207: ST_TO_ADDR
// end ;
41208: LD_VAR 0 3
41212: RET
// export function HealTarget ( sci ) ; begin
41213: LD_INT 0
41215: PPUSH
// if not sci then
41216: LD_VAR 0 1
41220: NOT
41221: IFFALSE 41225
// exit ;
41223: GO 41290
// result := 0 ;
41225: LD_ADDR_VAR 0 2
41229: PUSH
41230: LD_INT 0
41232: ST_TO_ADDR
// if GetTaskList ( sci ) then
41233: LD_VAR 0 1
41237: PPUSH
41238: CALL_OW 437
41242: IFFALSE 41290
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41244: LD_VAR 0 1
41248: PPUSH
41249: CALL_OW 437
41253: PUSH
41254: LD_INT 1
41256: ARRAY
41257: PUSH
41258: LD_INT 1
41260: ARRAY
41261: PUSH
41262: LD_STRING l
41264: EQUAL
41265: IFFALSE 41290
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41267: LD_ADDR_VAR 0 2
41271: PUSH
41272: LD_VAR 0 1
41276: PPUSH
41277: CALL_OW 437
41281: PUSH
41282: LD_INT 1
41284: ARRAY
41285: PUSH
41286: LD_INT 4
41288: ARRAY
41289: ST_TO_ADDR
// end ;
41290: LD_VAR 0 2
41294: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41295: LD_INT 0
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
// if not base_units then
41301: LD_VAR 0 1
41305: NOT
41306: IFFALSE 41310
// exit ;
41308: GO 41397
// result := false ;
41310: LD_ADDR_VAR 0 2
41314: PUSH
41315: LD_INT 0
41317: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41318: LD_ADDR_VAR 0 5
41322: PUSH
41323: LD_VAR 0 1
41327: PPUSH
41328: LD_INT 21
41330: PUSH
41331: LD_INT 3
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PPUSH
41338: CALL_OW 72
41342: ST_TO_ADDR
// if not tmp then
41343: LD_VAR 0 5
41347: NOT
41348: IFFALSE 41352
// exit ;
41350: GO 41397
// for i in tmp do
41352: LD_ADDR_VAR 0 3
41356: PUSH
41357: LD_VAR 0 5
41361: PUSH
41362: FOR_IN
41363: IFFALSE 41395
// begin result := EnemyInRange ( i , 22 ) ;
41365: LD_ADDR_VAR 0 2
41369: PUSH
41370: LD_VAR 0 3
41374: PPUSH
41375: LD_INT 22
41377: PPUSH
41378: CALL 39083 0 2
41382: ST_TO_ADDR
// if result then
41383: LD_VAR 0 2
41387: IFFALSE 41393
// exit ;
41389: POP
41390: POP
41391: GO 41397
// end ;
41393: GO 41362
41395: POP
41396: POP
// end ;
41397: LD_VAR 0 2
41401: RET
// export function FilterByTag ( units , tag ) ; begin
41402: LD_INT 0
41404: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
41405: LD_ADDR_VAR 0 3
41409: PUSH
41410: LD_VAR 0 1
41414: PPUSH
41415: LD_INT 120
41417: PUSH
41418: LD_VAR 0 2
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PPUSH
41427: CALL_OW 72
41431: ST_TO_ADDR
// end ;
41432: LD_VAR 0 3
41436: RET
// export function IsDriver ( un ) ; begin
41437: LD_INT 0
41439: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41440: LD_ADDR_VAR 0 2
41444: PUSH
41445: LD_VAR 0 1
41449: PUSH
41450: LD_INT 55
41452: PUSH
41453: EMPTY
41454: LIST
41455: PPUSH
41456: CALL_OW 69
41460: IN
41461: ST_TO_ADDR
// end ;
41462: LD_VAR 0 2
41466: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
41467: LD_INT 0
41469: PPUSH
41470: PPUSH
// list := [ ] ;
41471: LD_ADDR_VAR 0 5
41475: PUSH
41476: EMPTY
41477: ST_TO_ADDR
// case d of 0 :
41478: LD_VAR 0 3
41482: PUSH
41483: LD_INT 0
41485: DOUBLE
41486: EQUAL
41487: IFTRUE 41491
41489: GO 41624
41491: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
41492: LD_ADDR_VAR 0 5
41496: PUSH
41497: LD_VAR 0 1
41501: PUSH
41502: LD_INT 4
41504: MINUS
41505: PUSH
41506: LD_VAR 0 2
41510: PUSH
41511: LD_INT 4
41513: MINUS
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: PUSH
41523: LD_VAR 0 1
41527: PUSH
41528: LD_INT 3
41530: MINUS
41531: PUSH
41532: LD_VAR 0 2
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: LIST
41544: PUSH
41545: LD_VAR 0 1
41549: PUSH
41550: LD_INT 4
41552: PLUS
41553: PUSH
41554: LD_VAR 0 2
41558: PUSH
41559: LD_INT 4
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: LIST
41566: PUSH
41567: LD_VAR 0 1
41571: PUSH
41572: LD_INT 3
41574: PLUS
41575: PUSH
41576: LD_VAR 0 2
41580: PUSH
41581: LD_INT 3
41583: PLUS
41584: PUSH
41585: LD_INT 5
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: PUSH
41593: LD_VAR 0 1
41597: PUSH
41598: LD_VAR 0 2
41602: PUSH
41603: LD_INT 4
41605: PLUS
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: LIST
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: ST_TO_ADDR
// end ; 1 :
41622: GO 42322
41624: LD_INT 1
41626: DOUBLE
41627: EQUAL
41628: IFTRUE 41632
41630: GO 41765
41632: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
41633: LD_ADDR_VAR 0 5
41637: PUSH
41638: LD_VAR 0 1
41642: PUSH
41643: LD_VAR 0 2
41647: PUSH
41648: LD_INT 4
41650: MINUS
41651: PUSH
41652: LD_INT 3
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: PUSH
41660: LD_VAR 0 1
41664: PUSH
41665: LD_INT 3
41667: MINUS
41668: PUSH
41669: LD_VAR 0 2
41673: PUSH
41674: LD_INT 3
41676: MINUS
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: PUSH
41686: LD_VAR 0 1
41690: PUSH
41691: LD_INT 4
41693: MINUS
41694: PUSH
41695: LD_VAR 0 2
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: PUSH
41708: LD_VAR 0 1
41712: PUSH
41713: LD_VAR 0 2
41717: PUSH
41718: LD_INT 3
41720: PLUS
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: LIST
41729: PUSH
41730: LD_VAR 0 1
41734: PUSH
41735: LD_INT 4
41737: PLUS
41738: PUSH
41739: LD_VAR 0 2
41743: PUSH
41744: LD_INT 4
41746: PLUS
41747: PUSH
41748: LD_INT 5
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: LIST
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: ST_TO_ADDR
// end ; 2 :
41763: GO 42322
41765: LD_INT 2
41767: DOUBLE
41768: EQUAL
41769: IFTRUE 41773
41771: GO 41902
41773: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
41774: LD_ADDR_VAR 0 5
41778: PUSH
41779: LD_VAR 0 1
41783: PUSH
41784: LD_VAR 0 2
41788: PUSH
41789: LD_INT 3
41791: MINUS
41792: PUSH
41793: LD_INT 3
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: LIST
41800: PUSH
41801: LD_VAR 0 1
41805: PUSH
41806: LD_INT 4
41808: PLUS
41809: PUSH
41810: LD_VAR 0 2
41814: PUSH
41815: LD_INT 4
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: PUSH
41823: LD_VAR 0 1
41827: PUSH
41828: LD_VAR 0 2
41832: PUSH
41833: LD_INT 4
41835: PLUS
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: PUSH
41845: LD_VAR 0 1
41849: PUSH
41850: LD_INT 3
41852: MINUS
41853: PUSH
41854: LD_VAR 0 2
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: LIST
41866: PUSH
41867: LD_VAR 0 1
41871: PUSH
41872: LD_INT 4
41874: MINUS
41875: PUSH
41876: LD_VAR 0 2
41880: PUSH
41881: LD_INT 4
41883: MINUS
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: LIST
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: ST_TO_ADDR
// end ; 3 :
41900: GO 42322
41902: LD_INT 3
41904: DOUBLE
41905: EQUAL
41906: IFTRUE 41910
41908: GO 42043
41910: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
41911: LD_ADDR_VAR 0 5
41915: PUSH
41916: LD_VAR 0 1
41920: PUSH
41921: LD_INT 3
41923: PLUS
41924: PUSH
41925: LD_VAR 0 2
41929: PUSH
41930: LD_INT 4
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: LIST
41937: PUSH
41938: LD_VAR 0 1
41942: PUSH
41943: LD_INT 4
41945: PLUS
41946: PUSH
41947: LD_VAR 0 2
41951: PUSH
41952: LD_INT 4
41954: PLUS
41955: PUSH
41956: LD_INT 5
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: PUSH
41964: LD_VAR 0 1
41968: PUSH
41969: LD_INT 4
41971: MINUS
41972: PUSH
41973: LD_VAR 0 2
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: LIST
41985: PUSH
41986: LD_VAR 0 1
41990: PUSH
41991: LD_VAR 0 2
41995: PUSH
41996: LD_INT 4
41998: MINUS
41999: PUSH
42000: LD_INT 3
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: LIST
42007: PUSH
42008: LD_VAR 0 1
42012: PUSH
42013: LD_INT 3
42015: MINUS
42016: PUSH
42017: LD_VAR 0 2
42021: PUSH
42022: LD_INT 3
42024: MINUS
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: LIST
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: ST_TO_ADDR
// end ; 4 :
42041: GO 42322
42043: LD_INT 4
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42051
42049: GO 42184
42051: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42052: LD_ADDR_VAR 0 5
42056: PUSH
42057: LD_VAR 0 1
42061: PUSH
42062: LD_VAR 0 2
42066: PUSH
42067: LD_INT 4
42069: PLUS
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: LIST
42078: PUSH
42079: LD_VAR 0 1
42083: PUSH
42084: LD_INT 3
42086: PLUS
42087: PUSH
42088: LD_VAR 0 2
42092: PUSH
42093: LD_INT 3
42095: PLUS
42096: PUSH
42097: LD_INT 5
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: LIST
42104: PUSH
42105: LD_VAR 0 1
42109: PUSH
42110: LD_INT 4
42112: PLUS
42113: PUSH
42114: LD_VAR 0 2
42118: PUSH
42119: LD_INT 4
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: LIST
42126: PUSH
42127: LD_VAR 0 1
42131: PUSH
42132: LD_VAR 0 2
42136: PUSH
42137: LD_INT 3
42139: MINUS
42140: PUSH
42141: LD_INT 3
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: LIST
42148: PUSH
42149: LD_VAR 0 1
42153: PUSH
42154: LD_INT 4
42156: MINUS
42157: PUSH
42158: LD_VAR 0 2
42162: PUSH
42163: LD_INT 4
42165: MINUS
42166: PUSH
42167: LD_INT 2
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: LIST
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: ST_TO_ADDR
// end ; 5 :
42182: GO 42322
42184: LD_INT 5
42186: DOUBLE
42187: EQUAL
42188: IFTRUE 42192
42190: GO 42321
42192: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42193: LD_ADDR_VAR 0 5
42197: PUSH
42198: LD_VAR 0 1
42202: PUSH
42203: LD_INT 4
42205: MINUS
42206: PUSH
42207: LD_VAR 0 2
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: PUSH
42220: LD_VAR 0 1
42224: PUSH
42225: LD_VAR 0 2
42229: PUSH
42230: LD_INT 4
42232: MINUS
42233: PUSH
42234: LD_INT 3
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: LIST
42241: PUSH
42242: LD_VAR 0 1
42246: PUSH
42247: LD_INT 4
42249: PLUS
42250: PUSH
42251: LD_VAR 0 2
42255: PUSH
42256: LD_INT 4
42258: PLUS
42259: PUSH
42260: LD_INT 5
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: PUSH
42268: LD_VAR 0 1
42272: PUSH
42273: LD_INT 3
42275: PLUS
42276: PUSH
42277: LD_VAR 0 2
42281: PUSH
42282: LD_INT 4
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: LIST
42289: PUSH
42290: LD_VAR 0 1
42294: PUSH
42295: LD_VAR 0 2
42299: PUSH
42300: LD_INT 3
42302: PLUS
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: LIST
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: ST_TO_ADDR
// end ; end ;
42319: GO 42322
42321: POP
// result := list ;
42322: LD_ADDR_VAR 0 4
42326: PUSH
42327: LD_VAR 0 5
42331: ST_TO_ADDR
// end ;
42332: LD_VAR 0 4
42336: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42337: LD_INT 0
42339: PPUSH
42340: PPUSH
42341: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42342: LD_VAR 0 1
42346: NOT
42347: PUSH
42348: LD_VAR 0 2
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: LD_INT 3
42361: PUSH
42362: LD_INT 4
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: IN
42371: NOT
42372: OR
42373: IFFALSE 42377
// exit ;
42375: GO 42469
// tmp := [ ] ;
42377: LD_ADDR_VAR 0 5
42381: PUSH
42382: EMPTY
42383: ST_TO_ADDR
// for i in units do
42384: LD_ADDR_VAR 0 4
42388: PUSH
42389: LD_VAR 0 1
42393: PUSH
42394: FOR_IN
42395: IFFALSE 42438
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
42397: LD_ADDR_VAR 0 5
42401: PUSH
42402: LD_VAR 0 5
42406: PPUSH
42407: LD_VAR 0 5
42411: PUSH
42412: LD_INT 1
42414: PLUS
42415: PPUSH
42416: LD_VAR 0 4
42420: PPUSH
42421: LD_VAR 0 2
42425: PPUSH
42426: CALL_OW 259
42430: PPUSH
42431: CALL_OW 2
42435: ST_TO_ADDR
42436: GO 42394
42438: POP
42439: POP
// if not tmp then
42440: LD_VAR 0 5
42444: NOT
42445: IFFALSE 42449
// exit ;
42447: GO 42469
// result := SortListByListDesc ( units , tmp ) ;
42449: LD_ADDR_VAR 0 3
42453: PUSH
42454: LD_VAR 0 1
42458: PPUSH
42459: LD_VAR 0 5
42463: PPUSH
42464: CALL_OW 77
42468: ST_TO_ADDR
// end ;
42469: LD_VAR 0 3
42473: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
42474: LD_INT 0
42476: PPUSH
42477: PPUSH
42478: PPUSH
// result := false ;
42479: LD_ADDR_VAR 0 3
42483: PUSH
42484: LD_INT 0
42486: ST_TO_ADDR
// x := GetX ( building ) ;
42487: LD_ADDR_VAR 0 4
42491: PUSH
42492: LD_VAR 0 2
42496: PPUSH
42497: CALL_OW 250
42501: ST_TO_ADDR
// y := GetY ( building ) ;
42502: LD_ADDR_VAR 0 5
42506: PUSH
42507: LD_VAR 0 2
42511: PPUSH
42512: CALL_OW 251
42516: ST_TO_ADDR
// if not building or not x or not y then
42517: LD_VAR 0 2
42521: NOT
42522: PUSH
42523: LD_VAR 0 4
42527: NOT
42528: OR
42529: PUSH
42530: LD_VAR 0 5
42534: NOT
42535: OR
42536: IFFALSE 42540
// exit ;
42538: GO 42632
// if GetTaskList ( unit ) then
42540: LD_VAR 0 1
42544: PPUSH
42545: CALL_OW 437
42549: IFFALSE 42632
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42551: LD_STRING e
42553: PUSH
42554: LD_VAR 0 1
42558: PPUSH
42559: CALL_OW 437
42563: PUSH
42564: LD_INT 1
42566: ARRAY
42567: PUSH
42568: LD_INT 1
42570: ARRAY
42571: EQUAL
42572: PUSH
42573: LD_VAR 0 4
42577: PUSH
42578: LD_VAR 0 1
42582: PPUSH
42583: CALL_OW 437
42587: PUSH
42588: LD_INT 1
42590: ARRAY
42591: PUSH
42592: LD_INT 2
42594: ARRAY
42595: EQUAL
42596: AND
42597: PUSH
42598: LD_VAR 0 5
42602: PUSH
42603: LD_VAR 0 1
42607: PPUSH
42608: CALL_OW 437
42612: PUSH
42613: LD_INT 1
42615: ARRAY
42616: PUSH
42617: LD_INT 3
42619: ARRAY
42620: EQUAL
42621: AND
42622: IFFALSE 42632
// result := true end ;
42624: LD_ADDR_VAR 0 3
42628: PUSH
42629: LD_INT 1
42631: ST_TO_ADDR
// end ;
42632: LD_VAR 0 3
42636: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
42637: LD_INT 0
42639: PPUSH
// result := false ;
42640: LD_ADDR_VAR 0 4
42644: PUSH
42645: LD_INT 0
42647: ST_TO_ADDR
// if GetTaskList ( unit ) then
42648: LD_VAR 0 1
42652: PPUSH
42653: CALL_OW 437
42657: IFFALSE 42740
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42659: LD_STRING M
42661: PUSH
42662: LD_VAR 0 1
42666: PPUSH
42667: CALL_OW 437
42671: PUSH
42672: LD_INT 1
42674: ARRAY
42675: PUSH
42676: LD_INT 1
42678: ARRAY
42679: EQUAL
42680: PUSH
42681: LD_VAR 0 2
42685: PUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: CALL_OW 437
42695: PUSH
42696: LD_INT 1
42698: ARRAY
42699: PUSH
42700: LD_INT 2
42702: ARRAY
42703: EQUAL
42704: AND
42705: PUSH
42706: LD_VAR 0 3
42710: PUSH
42711: LD_VAR 0 1
42715: PPUSH
42716: CALL_OW 437
42720: PUSH
42721: LD_INT 1
42723: ARRAY
42724: PUSH
42725: LD_INT 3
42727: ARRAY
42728: EQUAL
42729: AND
42730: IFFALSE 42740
// result := true ;
42732: LD_ADDR_VAR 0 4
42736: PUSH
42737: LD_INT 1
42739: ST_TO_ADDR
// end ; end ;
42740: LD_VAR 0 4
42744: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
42745: LD_INT 0
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
// if not unit or not area then
42751: LD_VAR 0 1
42755: NOT
42756: PUSH
42757: LD_VAR 0 2
42761: NOT
42762: OR
42763: IFFALSE 42767
// exit ;
42765: GO 42931
// tmp := AreaToList ( area , i ) ;
42767: LD_ADDR_VAR 0 6
42771: PUSH
42772: LD_VAR 0 2
42776: PPUSH
42777: LD_VAR 0 5
42781: PPUSH
42782: CALL_OW 517
42786: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
42787: LD_ADDR_VAR 0 5
42791: PUSH
42792: DOUBLE
42793: LD_INT 1
42795: DEC
42796: ST_TO_ADDR
42797: LD_VAR 0 6
42801: PUSH
42802: LD_INT 1
42804: ARRAY
42805: PUSH
42806: FOR_TO
42807: IFFALSE 42929
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
42809: LD_ADDR_VAR 0 7
42813: PUSH
42814: LD_VAR 0 6
42818: PUSH
42819: LD_INT 1
42821: ARRAY
42822: PUSH
42823: LD_VAR 0 5
42827: ARRAY
42828: PUSH
42829: LD_VAR 0 6
42833: PUSH
42834: LD_INT 2
42836: ARRAY
42837: PUSH
42838: LD_VAR 0 5
42842: ARRAY
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
42848: LD_VAR 0 7
42852: PUSH
42853: LD_INT 1
42855: ARRAY
42856: PPUSH
42857: LD_VAR 0 7
42861: PUSH
42862: LD_INT 2
42864: ARRAY
42865: PPUSH
42866: CALL_OW 428
42870: PUSH
42871: LD_INT 0
42873: EQUAL
42874: IFFALSE 42927
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
42876: LD_VAR 0 1
42880: PPUSH
42881: LD_VAR 0 7
42885: PUSH
42886: LD_INT 1
42888: ARRAY
42889: PPUSH
42890: LD_VAR 0 7
42894: PUSH
42895: LD_INT 2
42897: ARRAY
42898: PPUSH
42899: LD_VAR 0 3
42903: PPUSH
42904: CALL_OW 48
// result := IsPlaced ( unit ) ;
42908: LD_ADDR_VAR 0 4
42912: PUSH
42913: LD_VAR 0 1
42917: PPUSH
42918: CALL_OW 305
42922: ST_TO_ADDR
// exit ;
42923: POP
42924: POP
42925: GO 42931
// end ; end ;
42927: GO 42806
42929: POP
42930: POP
// end ;
42931: LD_VAR 0 4
42935: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
42936: LD_INT 0
42938: PPUSH
42939: PPUSH
42940: PPUSH
// if not side or side > 8 then
42941: LD_VAR 0 1
42945: NOT
42946: PUSH
42947: LD_VAR 0 1
42951: PUSH
42952: LD_INT 8
42954: GREATER
42955: OR
42956: IFFALSE 42960
// exit ;
42958: GO 43147
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
42960: LD_ADDR_VAR 0 4
42964: PUSH
42965: LD_INT 22
42967: PUSH
42968: LD_VAR 0 1
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 21
42979: PUSH
42980: LD_INT 3
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PPUSH
42991: CALL_OW 69
42995: ST_TO_ADDR
// if not tmp then
42996: LD_VAR 0 4
43000: NOT
43001: IFFALSE 43005
// exit ;
43003: GO 43147
// enable_addtolog := true ;
43005: LD_ADDR_OWVAR 81
43009: PUSH
43010: LD_INT 1
43012: ST_TO_ADDR
// AddToLog ( [ ) ;
43013: LD_STRING [
43015: PPUSH
43016: CALL_OW 561
// for i in tmp do
43020: LD_ADDR_VAR 0 3
43024: PUSH
43025: LD_VAR 0 4
43029: PUSH
43030: FOR_IN
43031: IFFALSE 43138
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43033: LD_STRING [
43035: PUSH
43036: LD_VAR 0 3
43040: PPUSH
43041: CALL_OW 266
43045: STR
43046: PUSH
43047: LD_STRING , 
43049: STR
43050: PUSH
43051: LD_VAR 0 3
43055: PPUSH
43056: CALL_OW 250
43060: STR
43061: PUSH
43062: LD_STRING , 
43064: STR
43065: PUSH
43066: LD_VAR 0 3
43070: PPUSH
43071: CALL_OW 251
43075: STR
43076: PUSH
43077: LD_STRING , 
43079: STR
43080: PUSH
43081: LD_VAR 0 3
43085: PPUSH
43086: CALL_OW 254
43090: STR
43091: PUSH
43092: LD_STRING , 
43094: STR
43095: PUSH
43096: LD_VAR 0 3
43100: PPUSH
43101: LD_INT 1
43103: PPUSH
43104: CALL_OW 268
43108: STR
43109: PUSH
43110: LD_STRING , 
43112: STR
43113: PUSH
43114: LD_VAR 0 3
43118: PPUSH
43119: LD_INT 2
43121: PPUSH
43122: CALL_OW 268
43126: STR
43127: PUSH
43128: LD_STRING ],
43130: STR
43131: PPUSH
43132: CALL_OW 561
// end ;
43136: GO 43030
43138: POP
43139: POP
// AddToLog ( ]; ) ;
43140: LD_STRING ];
43142: PPUSH
43143: CALL_OW 561
// end ;
43147: LD_VAR 0 2
43151: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43152: LD_INT 0
43154: PPUSH
43155: PPUSH
43156: PPUSH
43157: PPUSH
43158: PPUSH
// if not area or not rate or not max then
43159: LD_VAR 0 1
43163: NOT
43164: PUSH
43165: LD_VAR 0 2
43169: NOT
43170: OR
43171: PUSH
43172: LD_VAR 0 4
43176: NOT
43177: OR
43178: IFFALSE 43182
// exit ;
43180: GO 43371
// while 1 do
43182: LD_INT 1
43184: IFFALSE 43371
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43186: LD_ADDR_VAR 0 9
43190: PUSH
43191: LD_VAR 0 1
43195: PPUSH
43196: LD_INT 1
43198: PPUSH
43199: CALL_OW 287
43203: PUSH
43204: LD_INT 10
43206: MUL
43207: ST_TO_ADDR
// r := rate / 10 ;
43208: LD_ADDR_VAR 0 7
43212: PUSH
43213: LD_VAR 0 2
43217: PUSH
43218: LD_INT 10
43220: DIVREAL
43221: ST_TO_ADDR
// time := 1 1$00 ;
43222: LD_ADDR_VAR 0 8
43226: PUSH
43227: LD_INT 2100
43229: ST_TO_ADDR
// if amount < min then
43230: LD_VAR 0 9
43234: PUSH
43235: LD_VAR 0 3
43239: LESS
43240: IFFALSE 43258
// r := r * 2 else
43242: LD_ADDR_VAR 0 7
43246: PUSH
43247: LD_VAR 0 7
43251: PUSH
43252: LD_INT 2
43254: MUL
43255: ST_TO_ADDR
43256: GO 43284
// if amount > max then
43258: LD_VAR 0 9
43262: PUSH
43263: LD_VAR 0 4
43267: GREATER
43268: IFFALSE 43284
// r := r / 2 ;
43270: LD_ADDR_VAR 0 7
43274: PUSH
43275: LD_VAR 0 7
43279: PUSH
43280: LD_INT 2
43282: DIVREAL
43283: ST_TO_ADDR
// time := time / r ;
43284: LD_ADDR_VAR 0 8
43288: PUSH
43289: LD_VAR 0 8
43293: PUSH
43294: LD_VAR 0 7
43298: DIVREAL
43299: ST_TO_ADDR
// if time < 0 then
43300: LD_VAR 0 8
43304: PUSH
43305: LD_INT 0
43307: LESS
43308: IFFALSE 43325
// time := time * - 1 ;
43310: LD_ADDR_VAR 0 8
43314: PUSH
43315: LD_VAR 0 8
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: MUL
43324: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
43325: LD_VAR 0 8
43329: PUSH
43330: LD_INT 35
43332: PPUSH
43333: LD_INT 875
43335: PPUSH
43336: CALL_OW 12
43340: PLUS
43341: PPUSH
43342: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43346: LD_INT 1
43348: PPUSH
43349: LD_INT 5
43351: PPUSH
43352: CALL_OW 12
43356: PPUSH
43357: LD_VAR 0 1
43361: PPUSH
43362: LD_INT 1
43364: PPUSH
43365: CALL_OW 55
// end ;
43369: GO 43182
// end ;
43371: LD_VAR 0 5
43375: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43376: LD_INT 0
43378: PPUSH
43379: PPUSH
43380: PPUSH
43381: PPUSH
43382: PPUSH
43383: PPUSH
43384: PPUSH
43385: PPUSH
// if not turrets or not factories then
43386: LD_VAR 0 1
43390: NOT
43391: PUSH
43392: LD_VAR 0 2
43396: NOT
43397: OR
43398: IFFALSE 43402
// exit ;
43400: GO 43709
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43402: LD_ADDR_VAR 0 10
43406: PUSH
43407: LD_INT 5
43409: PUSH
43410: LD_INT 6
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: LD_INT 4
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 3
43429: PUSH
43430: LD_INT 5
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 24
43444: PUSH
43445: LD_INT 25
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 23
43454: PUSH
43455: LD_INT 27
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 42
43468: PUSH
43469: LD_INT 43
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 44
43478: PUSH
43479: LD_INT 46
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 45
43488: PUSH
43489: LD_INT 47
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: LIST
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: ST_TO_ADDR
// result := [ ] ;
43506: LD_ADDR_VAR 0 3
43510: PUSH
43511: EMPTY
43512: ST_TO_ADDR
// for i in turrets do
43513: LD_ADDR_VAR 0 4
43517: PUSH
43518: LD_VAR 0 1
43522: PUSH
43523: FOR_IN
43524: IFFALSE 43707
// begin nat := GetNation ( i ) ;
43526: LD_ADDR_VAR 0 7
43530: PUSH
43531: LD_VAR 0 4
43535: PPUSH
43536: CALL_OW 248
43540: ST_TO_ADDR
// weapon := 0 ;
43541: LD_ADDR_VAR 0 8
43545: PUSH
43546: LD_INT 0
43548: ST_TO_ADDR
// if not nat then
43549: LD_VAR 0 7
43553: NOT
43554: IFFALSE 43558
// continue ;
43556: GO 43523
// for j in list [ nat ] do
43558: LD_ADDR_VAR 0 5
43562: PUSH
43563: LD_VAR 0 10
43567: PUSH
43568: LD_VAR 0 7
43572: ARRAY
43573: PUSH
43574: FOR_IN
43575: IFFALSE 43616
// if GetBWeapon ( i ) = j [ 1 ] then
43577: LD_VAR 0 4
43581: PPUSH
43582: CALL_OW 269
43586: PUSH
43587: LD_VAR 0 5
43591: PUSH
43592: LD_INT 1
43594: ARRAY
43595: EQUAL
43596: IFFALSE 43614
// begin weapon := j [ 2 ] ;
43598: LD_ADDR_VAR 0 8
43602: PUSH
43603: LD_VAR 0 5
43607: PUSH
43608: LD_INT 2
43610: ARRAY
43611: ST_TO_ADDR
// break ;
43612: GO 43616
// end ;
43614: GO 43574
43616: POP
43617: POP
// if not weapon then
43618: LD_VAR 0 8
43622: NOT
43623: IFFALSE 43627
// continue ;
43625: GO 43523
// for k in factories do
43627: LD_ADDR_VAR 0 6
43631: PUSH
43632: LD_VAR 0 2
43636: PUSH
43637: FOR_IN
43638: IFFALSE 43703
// begin weapons := AvailableWeaponList ( k ) ;
43640: LD_ADDR_VAR 0 9
43644: PUSH
43645: LD_VAR 0 6
43649: PPUSH
43650: CALL_OW 478
43654: ST_TO_ADDR
// if not weapons then
43655: LD_VAR 0 9
43659: NOT
43660: IFFALSE 43664
// continue ;
43662: GO 43637
// if weapon in weapons then
43664: LD_VAR 0 8
43668: PUSH
43669: LD_VAR 0 9
43673: IN
43674: IFFALSE 43701
// begin result := [ i , weapon ] ;
43676: LD_ADDR_VAR 0 3
43680: PUSH
43681: LD_VAR 0 4
43685: PUSH
43686: LD_VAR 0 8
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: ST_TO_ADDR
// exit ;
43695: POP
43696: POP
43697: POP
43698: POP
43699: GO 43709
// end ; end ;
43701: GO 43637
43703: POP
43704: POP
// end ;
43705: GO 43523
43707: POP
43708: POP
// end ;
43709: LD_VAR 0 3
43713: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
43714: LD_INT 0
43716: PPUSH
// if not side or side > 8 then
43717: LD_VAR 0 3
43721: NOT
43722: PUSH
43723: LD_VAR 0 3
43727: PUSH
43728: LD_INT 8
43730: GREATER
43731: OR
43732: IFFALSE 43736
// exit ;
43734: GO 43795
// if not range then
43736: LD_VAR 0 4
43740: NOT
43741: IFFALSE 43752
// range := - 12 ;
43743: LD_ADDR_VAR 0 4
43747: PUSH
43748: LD_INT 12
43750: NEG
43751: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
43752: LD_VAR 0 1
43756: PPUSH
43757: LD_VAR 0 2
43761: PPUSH
43762: LD_VAR 0 3
43766: PPUSH
43767: LD_VAR 0 4
43771: PPUSH
43772: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
43776: LD_VAR 0 1
43780: PPUSH
43781: LD_VAR 0 2
43785: PPUSH
43786: LD_VAR 0 3
43790: PPUSH
43791: CALL_OW 331
// end ;
43795: LD_VAR 0 5
43799: RET
// export function Video ( mode ) ; begin
43800: LD_INT 0
43802: PPUSH
// ingame_video = mode ;
43803: LD_ADDR_OWVAR 52
43807: PUSH
43808: LD_VAR 0 1
43812: ST_TO_ADDR
// interface_hidden = mode ;
43813: LD_ADDR_OWVAR 54
43817: PUSH
43818: LD_VAR 0 1
43822: ST_TO_ADDR
// end ;
43823: LD_VAR 0 2
43827: RET
// export function Join ( array , element ) ; begin
43828: LD_INT 0
43830: PPUSH
// result := Replace ( array , array + 1 , element ) ;
43831: LD_ADDR_VAR 0 3
43835: PUSH
43836: LD_VAR 0 1
43840: PPUSH
43841: LD_VAR 0 1
43845: PUSH
43846: LD_INT 1
43848: PLUS
43849: PPUSH
43850: LD_VAR 0 2
43854: PPUSH
43855: CALL_OW 1
43859: ST_TO_ADDR
// end ;
43860: LD_VAR 0 3
43864: RET
// export function JoinUnion ( array , element ) ; begin
43865: LD_INT 0
43867: PPUSH
// result := array union element ;
43868: LD_ADDR_VAR 0 3
43872: PUSH
43873: LD_VAR 0 1
43877: PUSH
43878: LD_VAR 0 2
43882: UNION
43883: ST_TO_ADDR
// end ;
43884: LD_VAR 0 3
43888: RET
// export function GetBehemoths ( side ) ; begin
43889: LD_INT 0
43891: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
43892: LD_ADDR_VAR 0 2
43896: PUSH
43897: LD_INT 22
43899: PUSH
43900: LD_VAR 0 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 31
43911: PUSH
43912: LD_INT 25
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PPUSH
43923: CALL_OW 69
43927: ST_TO_ADDR
// end ;
43928: LD_VAR 0 2
43932: RET
// export function Shuffle ( array ) ; var i , index ; begin
43933: LD_INT 0
43935: PPUSH
43936: PPUSH
43937: PPUSH
// result := [ ] ;
43938: LD_ADDR_VAR 0 2
43942: PUSH
43943: EMPTY
43944: ST_TO_ADDR
// if not array then
43945: LD_VAR 0 1
43949: NOT
43950: IFFALSE 43954
// exit ;
43952: GO 44053
// Randomize ;
43954: CALL_OW 10
// for i = array downto 1 do
43958: LD_ADDR_VAR 0 3
43962: PUSH
43963: DOUBLE
43964: LD_VAR 0 1
43968: INC
43969: ST_TO_ADDR
43970: LD_INT 1
43972: PUSH
43973: FOR_DOWNTO
43974: IFFALSE 44051
// begin index := rand ( 1 , array ) ;
43976: LD_ADDR_VAR 0 4
43980: PUSH
43981: LD_INT 1
43983: PPUSH
43984: LD_VAR 0 1
43988: PPUSH
43989: CALL_OW 12
43993: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
43994: LD_ADDR_VAR 0 2
43998: PUSH
43999: LD_VAR 0 2
44003: PPUSH
44004: LD_VAR 0 2
44008: PUSH
44009: LD_INT 1
44011: PLUS
44012: PPUSH
44013: LD_VAR 0 1
44017: PUSH
44018: LD_VAR 0 4
44022: ARRAY
44023: PPUSH
44024: CALL_OW 2
44028: ST_TO_ADDR
// array := Delete ( array , index ) ;
44029: LD_ADDR_VAR 0 1
44033: PUSH
44034: LD_VAR 0 1
44038: PPUSH
44039: LD_VAR 0 4
44043: PPUSH
44044: CALL_OW 3
44048: ST_TO_ADDR
// end ;
44049: GO 43973
44051: POP
44052: POP
// end ;
44053: LD_VAR 0 2
44057: RET
// export function GetBaseMaterials ( base ) ; begin
44058: LD_INT 0
44060: PPUSH
// result := [ 0 , 0 , 0 ] ;
44061: LD_ADDR_VAR 0 2
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: LIST
44079: ST_TO_ADDR
// if not base then
44080: LD_VAR 0 1
44084: NOT
44085: IFFALSE 44089
// exit ;
44087: GO 44138
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44089: LD_ADDR_VAR 0 2
44093: PUSH
44094: LD_VAR 0 1
44098: PPUSH
44099: LD_INT 1
44101: PPUSH
44102: CALL_OW 275
44106: PUSH
44107: LD_VAR 0 1
44111: PPUSH
44112: LD_INT 2
44114: PPUSH
44115: CALL_OW 275
44119: PUSH
44120: LD_VAR 0 1
44124: PPUSH
44125: LD_INT 3
44127: PPUSH
44128: CALL_OW 275
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: ST_TO_ADDR
// end ;
44138: LD_VAR 0 2
44142: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44143: LD_INT 0
44145: PPUSH
44146: PPUSH
// result := array ;
44147: LD_ADDR_VAR 0 3
44151: PUSH
44152: LD_VAR 0 1
44156: ST_TO_ADDR
// if size >= result then
44157: LD_VAR 0 2
44161: PUSH
44162: LD_VAR 0 3
44166: GREATEREQUAL
44167: IFFALSE 44171
// exit ;
44169: GO 44221
// if size then
44171: LD_VAR 0 2
44175: IFFALSE 44221
// for i := array downto size do
44177: LD_ADDR_VAR 0 4
44181: PUSH
44182: DOUBLE
44183: LD_VAR 0 1
44187: INC
44188: ST_TO_ADDR
44189: LD_VAR 0 2
44193: PUSH
44194: FOR_DOWNTO
44195: IFFALSE 44219
// result := Delete ( result , result ) ;
44197: LD_ADDR_VAR 0 3
44201: PUSH
44202: LD_VAR 0 3
44206: PPUSH
44207: LD_VAR 0 3
44211: PPUSH
44212: CALL_OW 3
44216: ST_TO_ADDR
44217: GO 44194
44219: POP
44220: POP
// end ;
44221: LD_VAR 0 3
44225: RET
// export function ComExit ( unit ) ; var tmp ; begin
44226: LD_INT 0
44228: PPUSH
44229: PPUSH
// if not IsInUnit ( unit ) then
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 310
44239: NOT
44240: IFFALSE 44244
// exit ;
44242: GO 44304
// tmp := IsInUnit ( unit ) ;
44244: LD_ADDR_VAR 0 3
44248: PUSH
44249: LD_VAR 0 1
44253: PPUSH
44254: CALL_OW 310
44258: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44259: LD_VAR 0 3
44263: PPUSH
44264: CALL_OW 247
44268: PUSH
44269: LD_INT 2
44271: EQUAL
44272: IFFALSE 44285
// ComExitVehicle ( unit ) else
44274: LD_VAR 0 1
44278: PPUSH
44279: CALL_OW 121
44283: GO 44294
// ComExitBuilding ( unit ) ;
44285: LD_VAR 0 1
44289: PPUSH
44290: CALL_OW 122
// result := tmp ;
44294: LD_ADDR_VAR 0 2
44298: PUSH
44299: LD_VAR 0 3
44303: ST_TO_ADDR
// end ;
44304: LD_VAR 0 2
44308: RET
// export function ComExitAll ( units ) ; var i ; begin
44309: LD_INT 0
44311: PPUSH
44312: PPUSH
// if not units then
44313: LD_VAR 0 1
44317: NOT
44318: IFFALSE 44322
// exit ;
44320: GO 44348
// for i in units do
44322: LD_ADDR_VAR 0 3
44326: PUSH
44327: LD_VAR 0 1
44331: PUSH
44332: FOR_IN
44333: IFFALSE 44346
// ComExit ( i ) ;
44335: LD_VAR 0 3
44339: PPUSH
44340: CALL 44226 0 1
44344: GO 44332
44346: POP
44347: POP
// end ;
44348: LD_VAR 0 2
44352: RET
// export function ResetHc ; begin
44353: LD_INT 0
44355: PPUSH
// InitHc ;
44356: CALL_OW 19
// hc_importance := 0 ;
44360: LD_ADDR_OWVAR 32
44364: PUSH
44365: LD_INT 0
44367: ST_TO_ADDR
// end ;
44368: LD_VAR 0 1
44372: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44373: LD_INT 0
44375: PPUSH
44376: PPUSH
44377: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44378: LD_ADDR_VAR 0 6
44382: PUSH
44383: LD_VAR 0 1
44387: PUSH
44388: LD_VAR 0 3
44392: PLUS
44393: PUSH
44394: LD_INT 2
44396: DIV
44397: ST_TO_ADDR
// if _x < 0 then
44398: LD_VAR 0 6
44402: PUSH
44403: LD_INT 0
44405: LESS
44406: IFFALSE 44423
// _x := _x * - 1 ;
44408: LD_ADDR_VAR 0 6
44412: PUSH
44413: LD_VAR 0 6
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: MUL
44422: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44423: LD_ADDR_VAR 0 7
44427: PUSH
44428: LD_VAR 0 2
44432: PUSH
44433: LD_VAR 0 4
44437: PLUS
44438: PUSH
44439: LD_INT 2
44441: DIV
44442: ST_TO_ADDR
// if _y < 0 then
44443: LD_VAR 0 7
44447: PUSH
44448: LD_INT 0
44450: LESS
44451: IFFALSE 44468
// _y := _y * - 1 ;
44453: LD_ADDR_VAR 0 7
44457: PUSH
44458: LD_VAR 0 7
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: MUL
44467: ST_TO_ADDR
// result := [ _x , _y ] ;
44468: LD_ADDR_VAR 0 5
44472: PUSH
44473: LD_VAR 0 6
44477: PUSH
44478: LD_VAR 0 7
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: ST_TO_ADDR
// end ;
44487: LD_VAR 0 5
44491: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
44492: LD_INT 0
44494: PPUSH
44495: PPUSH
44496: PPUSH
44497: PPUSH
// task := GetTaskList ( unit ) ;
44498: LD_ADDR_VAR 0 7
44502: PUSH
44503: LD_VAR 0 1
44507: PPUSH
44508: CALL_OW 437
44512: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
44513: LD_VAR 0 7
44517: NOT
44518: PUSH
44519: LD_VAR 0 1
44523: PPUSH
44524: LD_VAR 0 2
44528: PPUSH
44529: CALL_OW 308
44533: NOT
44534: AND
44535: IFFALSE 44539
// exit ;
44537: GO 44657
// if IsInArea ( unit , area ) then
44539: LD_VAR 0 1
44543: PPUSH
44544: LD_VAR 0 2
44548: PPUSH
44549: CALL_OW 308
44553: IFFALSE 44571
// begin ComMoveToArea ( unit , goAway ) ;
44555: LD_VAR 0 1
44559: PPUSH
44560: LD_VAR 0 3
44564: PPUSH
44565: CALL_OW 113
// exit ;
44569: GO 44657
// end ; if task [ 1 ] [ 1 ] <> M then
44571: LD_VAR 0 7
44575: PUSH
44576: LD_INT 1
44578: ARRAY
44579: PUSH
44580: LD_INT 1
44582: ARRAY
44583: PUSH
44584: LD_STRING M
44586: NONEQUAL
44587: IFFALSE 44591
// exit ;
44589: GO 44657
// x := task [ 1 ] [ 2 ] ;
44591: LD_ADDR_VAR 0 5
44595: PUSH
44596: LD_VAR 0 7
44600: PUSH
44601: LD_INT 1
44603: ARRAY
44604: PUSH
44605: LD_INT 2
44607: ARRAY
44608: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
44609: LD_ADDR_VAR 0 6
44613: PUSH
44614: LD_VAR 0 7
44618: PUSH
44619: LD_INT 1
44621: ARRAY
44622: PUSH
44623: LD_INT 3
44625: ARRAY
44626: ST_TO_ADDR
// if InArea ( x , y , area ) then
44627: LD_VAR 0 5
44631: PPUSH
44632: LD_VAR 0 6
44636: PPUSH
44637: LD_VAR 0 2
44641: PPUSH
44642: CALL_OW 309
44646: IFFALSE 44657
// ComStop ( unit ) ;
44648: LD_VAR 0 1
44652: PPUSH
44653: CALL_OW 141
// end ;
44657: LD_VAR 0 4
44661: RET
// export function Abs ( value ) ; begin
44662: LD_INT 0
44664: PPUSH
// result := value ;
44665: LD_ADDR_VAR 0 2
44669: PUSH
44670: LD_VAR 0 1
44674: ST_TO_ADDR
// if value < 0 then
44675: LD_VAR 0 1
44679: PUSH
44680: LD_INT 0
44682: LESS
44683: IFFALSE 44700
// result := value * - 1 ;
44685: LD_ADDR_VAR 0 2
44689: PUSH
44690: LD_VAR 0 1
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: MUL
44699: ST_TO_ADDR
// end ;
44700: LD_VAR 0 2
44704: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
44705: LD_INT 0
44707: PPUSH
44708: PPUSH
44709: PPUSH
44710: PPUSH
44711: PPUSH
44712: PPUSH
44713: PPUSH
44714: PPUSH
// if not unit or not building then
44715: LD_VAR 0 1
44719: NOT
44720: PUSH
44721: LD_VAR 0 2
44725: NOT
44726: OR
44727: IFFALSE 44731
// exit ;
44729: GO 44957
// x := GetX ( building ) ;
44731: LD_ADDR_VAR 0 4
44735: PUSH
44736: LD_VAR 0 2
44740: PPUSH
44741: CALL_OW 250
44745: ST_TO_ADDR
// y := GetY ( building ) ;
44746: LD_ADDR_VAR 0 6
44750: PUSH
44751: LD_VAR 0 2
44755: PPUSH
44756: CALL_OW 251
44760: ST_TO_ADDR
// d := GetDir ( building ) ;
44761: LD_ADDR_VAR 0 8
44765: PUSH
44766: LD_VAR 0 2
44770: PPUSH
44771: CALL_OW 254
44775: ST_TO_ADDR
// r := 4 ;
44776: LD_ADDR_VAR 0 9
44780: PUSH
44781: LD_INT 4
44783: ST_TO_ADDR
// for i := 1 to 5 do
44784: LD_ADDR_VAR 0 10
44788: PUSH
44789: DOUBLE
44790: LD_INT 1
44792: DEC
44793: ST_TO_ADDR
44794: LD_INT 5
44796: PUSH
44797: FOR_TO
44798: IFFALSE 44955
// begin _x := ShiftX ( x , d , r + i ) ;
44800: LD_ADDR_VAR 0 5
44804: PUSH
44805: LD_VAR 0 4
44809: PPUSH
44810: LD_VAR 0 8
44814: PPUSH
44815: LD_VAR 0 9
44819: PUSH
44820: LD_VAR 0 10
44824: PLUS
44825: PPUSH
44826: CALL_OW 272
44830: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
44831: LD_ADDR_VAR 0 7
44835: PUSH
44836: LD_VAR 0 6
44840: PPUSH
44841: LD_VAR 0 8
44845: PPUSH
44846: LD_VAR 0 9
44850: PUSH
44851: LD_VAR 0 10
44855: PLUS
44856: PPUSH
44857: CALL_OW 273
44861: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
44862: LD_VAR 0 5
44866: PPUSH
44867: LD_VAR 0 7
44871: PPUSH
44872: CALL_OW 488
44876: PUSH
44877: LD_VAR 0 5
44881: PPUSH
44882: LD_VAR 0 7
44886: PPUSH
44887: CALL_OW 428
44891: PPUSH
44892: CALL_OW 247
44896: PUSH
44897: LD_INT 3
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: IN
44907: NOT
44908: AND
44909: IFFALSE 44953
// begin ComMoveXY ( unit , _x , _y ) ;
44911: LD_VAR 0 1
44915: PPUSH
44916: LD_VAR 0 5
44920: PPUSH
44921: LD_VAR 0 7
44925: PPUSH
44926: CALL_OW 111
// result := [ _x , _y ] ;
44930: LD_ADDR_VAR 0 3
44934: PUSH
44935: LD_VAR 0 5
44939: PUSH
44940: LD_VAR 0 7
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: ST_TO_ADDR
// exit ;
44949: POP
44950: POP
44951: GO 44957
// end ; end ;
44953: GO 44797
44955: POP
44956: POP
// end ;
44957: LD_VAR 0 3
44961: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
44962: LD_INT 0
44964: PPUSH
44965: PPUSH
44966: PPUSH
// result := 0 ;
44967: LD_ADDR_VAR 0 3
44971: PUSH
44972: LD_INT 0
44974: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
44975: LD_VAR 0 1
44979: PUSH
44980: LD_INT 0
44982: LESS
44983: PUSH
44984: LD_VAR 0 1
44988: PUSH
44989: LD_INT 8
44991: GREATER
44992: OR
44993: PUSH
44994: LD_VAR 0 2
44998: PUSH
44999: LD_INT 0
45001: LESS
45002: OR
45003: PUSH
45004: LD_VAR 0 2
45008: PUSH
45009: LD_INT 8
45011: GREATER
45012: OR
45013: IFFALSE 45017
// exit ;
45015: GO 45092
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45017: LD_ADDR_VAR 0 4
45021: PUSH
45022: LD_INT 22
45024: PUSH
45025: LD_VAR 0 2
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PPUSH
45034: CALL_OW 69
45038: PUSH
45039: FOR_IN
45040: IFFALSE 45090
// begin un := UnitShoot ( i ) ;
45042: LD_ADDR_VAR 0 5
45046: PUSH
45047: LD_VAR 0 4
45051: PPUSH
45052: CALL_OW 504
45056: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45057: LD_VAR 0 5
45061: PPUSH
45062: CALL_OW 255
45066: PUSH
45067: LD_VAR 0 1
45071: EQUAL
45072: IFFALSE 45088
// begin result := un ;
45074: LD_ADDR_VAR 0 3
45078: PUSH
45079: LD_VAR 0 5
45083: ST_TO_ADDR
// exit ;
45084: POP
45085: POP
45086: GO 45092
// end ; end ;
45088: GO 45039
45090: POP
45091: POP
// end ;
45092: LD_VAR 0 3
45096: RET
// export function GetCargoBay ( units ) ; begin
45097: LD_INT 0
45099: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45100: LD_ADDR_VAR 0 2
45104: PUSH
45105: LD_VAR 0 1
45109: PPUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 34
45115: PUSH
45116: LD_INT 12
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 34
45125: PUSH
45126: LD_INT 51
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 34
45135: PUSH
45136: LD_INT 32
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 34
45145: PUSH
45146: LD_EXP 39
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: PPUSH
45162: CALL_OW 72
45166: ST_TO_ADDR
// end ;
45167: LD_VAR 0 2
45171: RET
// export function Negate ( value ) ; begin
45172: LD_INT 0
45174: PPUSH
// result := not value ;
45175: LD_ADDR_VAR 0 2
45179: PUSH
45180: LD_VAR 0 1
45184: NOT
45185: ST_TO_ADDR
// end ;
45186: LD_VAR 0 2
45190: RET
// export function Inc ( value ) ; begin
45191: LD_INT 0
45193: PPUSH
// result := value + 1 ;
45194: LD_ADDR_VAR 0 2
45198: PUSH
45199: LD_VAR 0 1
45203: PUSH
45204: LD_INT 1
45206: PLUS
45207: ST_TO_ADDR
// end ;
45208: LD_VAR 0 2
45212: RET
// export function Dec ( value ) ; begin
45213: LD_INT 0
45215: PPUSH
// result := value - 1 ;
45216: LD_ADDR_VAR 0 2
45220: PUSH
45221: LD_VAR 0 1
45225: PUSH
45226: LD_INT 1
45228: MINUS
45229: ST_TO_ADDR
// end ;
45230: LD_VAR 0 2
45234: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
45235: LD_INT 0
45237: PPUSH
45238: PPUSH
45239: PPUSH
45240: PPUSH
45241: PPUSH
45242: PPUSH
45243: PPUSH
45244: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
45245: LD_VAR 0 1
45249: PPUSH
45250: LD_VAR 0 2
45254: PPUSH
45255: CALL_OW 488
45259: NOT
45260: PUSH
45261: LD_VAR 0 3
45265: PPUSH
45266: LD_VAR 0 4
45270: PPUSH
45271: CALL_OW 488
45275: NOT
45276: OR
45277: IFFALSE 45290
// begin result := - 1 ;
45279: LD_ADDR_VAR 0 5
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: ST_TO_ADDR
// exit ;
45288: GO 45525
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
45290: LD_ADDR_VAR 0 12
45294: PUSH
45295: LD_VAR 0 1
45299: PPUSH
45300: LD_VAR 0 2
45304: PPUSH
45305: LD_VAR 0 3
45309: PPUSH
45310: LD_VAR 0 4
45314: PPUSH
45315: CALL 44373 0 4
45319: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
45320: LD_ADDR_VAR 0 11
45324: PUSH
45325: LD_VAR 0 1
45329: PPUSH
45330: LD_VAR 0 2
45334: PPUSH
45335: LD_VAR 0 12
45339: PUSH
45340: LD_INT 1
45342: ARRAY
45343: PPUSH
45344: LD_VAR 0 12
45348: PUSH
45349: LD_INT 2
45351: ARRAY
45352: PPUSH
45353: CALL_OW 298
45357: ST_TO_ADDR
// distance := 9999 ;
45358: LD_ADDR_VAR 0 10
45362: PUSH
45363: LD_INT 9999
45365: ST_TO_ADDR
// for i := 0 to 5 do
45366: LD_ADDR_VAR 0 6
45370: PUSH
45371: DOUBLE
45372: LD_INT 0
45374: DEC
45375: ST_TO_ADDR
45376: LD_INT 5
45378: PUSH
45379: FOR_TO
45380: IFFALSE 45523
// begin _x := ShiftX ( x1 , i , centerDist ) ;
45382: LD_ADDR_VAR 0 7
45386: PUSH
45387: LD_VAR 0 1
45391: PPUSH
45392: LD_VAR 0 6
45396: PPUSH
45397: LD_VAR 0 11
45401: PPUSH
45402: CALL_OW 272
45406: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
45407: LD_ADDR_VAR 0 8
45411: PUSH
45412: LD_VAR 0 2
45416: PPUSH
45417: LD_VAR 0 6
45421: PPUSH
45422: LD_VAR 0 11
45426: PPUSH
45427: CALL_OW 273
45431: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45432: LD_VAR 0 7
45436: PPUSH
45437: LD_VAR 0 8
45441: PPUSH
45442: CALL_OW 488
45446: NOT
45447: IFFALSE 45451
// continue ;
45449: GO 45379
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
45451: LD_ADDR_VAR 0 9
45455: PUSH
45456: LD_VAR 0 12
45460: PUSH
45461: LD_INT 1
45463: ARRAY
45464: PPUSH
45465: LD_VAR 0 12
45469: PUSH
45470: LD_INT 2
45472: ARRAY
45473: PPUSH
45474: LD_VAR 0 7
45478: PPUSH
45479: LD_VAR 0 8
45483: PPUSH
45484: CALL_OW 298
45488: ST_TO_ADDR
// if tmp < distance then
45489: LD_VAR 0 9
45493: PUSH
45494: LD_VAR 0 10
45498: LESS
45499: IFFALSE 45521
// begin result := i ;
45501: LD_ADDR_VAR 0 5
45505: PUSH
45506: LD_VAR 0 6
45510: ST_TO_ADDR
// distance := tmp ;
45511: LD_ADDR_VAR 0 10
45515: PUSH
45516: LD_VAR 0 9
45520: ST_TO_ADDR
// end ; end ;
45521: GO 45379
45523: POP
45524: POP
// end ;
45525: LD_VAR 0 5
45529: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45530: LD_INT 0
45532: PPUSH
45533: PPUSH
// if not driver or not IsInUnit ( driver ) then
45534: LD_VAR 0 1
45538: NOT
45539: PUSH
45540: LD_VAR 0 1
45544: PPUSH
45545: CALL_OW 310
45549: NOT
45550: OR
45551: IFFALSE 45555
// exit ;
45553: GO 45645
// vehicle := IsInUnit ( driver ) ;
45555: LD_ADDR_VAR 0 3
45559: PUSH
45560: LD_VAR 0 1
45564: PPUSH
45565: CALL_OW 310
45569: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45570: LD_VAR 0 1
45574: PPUSH
45575: LD_STRING \
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: PUSH
45605: LD_STRING E
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_VAR 0 3
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PPUSH
45641: CALL_OW 446
// end ;
45645: LD_VAR 0 2
45649: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45650: LD_INT 0
45652: PPUSH
45653: PPUSH
// if not driver or not IsInUnit ( driver ) then
45654: LD_VAR 0 1
45658: NOT
45659: PUSH
45660: LD_VAR 0 1
45664: PPUSH
45665: CALL_OW 310
45669: NOT
45670: OR
45671: IFFALSE 45675
// exit ;
45673: GO 45765
// vehicle := IsInUnit ( driver ) ;
45675: LD_ADDR_VAR 0 3
45679: PUSH
45680: LD_VAR 0 1
45684: PPUSH
45685: CALL_OW 310
45689: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45690: LD_VAR 0 1
45694: PPUSH
45695: LD_STRING \
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: PUSH
45725: LD_STRING E
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_VAR 0 3
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PPUSH
45761: CALL_OW 447
// end ;
45765: LD_VAR 0 2
45769: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
45770: LD_INT 0
45772: PPUSH
45773: PPUSH
45774: PPUSH
// tmp := [ ] ;
45775: LD_ADDR_VAR 0 5
45779: PUSH
45780: EMPTY
45781: ST_TO_ADDR
// for i in units do
45782: LD_ADDR_VAR 0 4
45786: PUSH
45787: LD_VAR 0 1
45791: PUSH
45792: FOR_IN
45793: IFFALSE 45831
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
45795: LD_ADDR_VAR 0 5
45799: PUSH
45800: LD_VAR 0 5
45804: PPUSH
45805: LD_VAR 0 5
45809: PUSH
45810: LD_INT 1
45812: PLUS
45813: PPUSH
45814: LD_VAR 0 4
45818: PPUSH
45819: CALL_OW 256
45823: PPUSH
45824: CALL_OW 2
45828: ST_TO_ADDR
45829: GO 45792
45831: POP
45832: POP
// if not tmp then
45833: LD_VAR 0 5
45837: NOT
45838: IFFALSE 45842
// exit ;
45840: GO 45890
// if asc then
45842: LD_VAR 0 2
45846: IFFALSE 45870
// result := SortListByListAsc ( units , tmp ) else
45848: LD_ADDR_VAR 0 3
45852: PUSH
45853: LD_VAR 0 1
45857: PPUSH
45858: LD_VAR 0 5
45862: PPUSH
45863: CALL_OW 76
45867: ST_TO_ADDR
45868: GO 45890
// result := SortListByListDesc ( units , tmp ) ;
45870: LD_ADDR_VAR 0 3
45874: PUSH
45875: LD_VAR 0 1
45879: PPUSH
45880: LD_VAR 0 5
45884: PPUSH
45885: CALL_OW 77
45889: ST_TO_ADDR
// end ;
45890: LD_VAR 0 3
45894: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
45895: LD_INT 0
45897: PPUSH
45898: PPUSH
// task := GetTaskList ( mech ) ;
45899: LD_ADDR_VAR 0 4
45903: PUSH
45904: LD_VAR 0 1
45908: PPUSH
45909: CALL_OW 437
45913: ST_TO_ADDR
// if not task then
45914: LD_VAR 0 4
45918: NOT
45919: IFFALSE 45923
// exit ;
45921: GO 45965
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
45923: LD_ADDR_VAR 0 3
45927: PUSH
45928: LD_VAR 0 4
45932: PUSH
45933: LD_INT 1
45935: ARRAY
45936: PUSH
45937: LD_INT 1
45939: ARRAY
45940: PUSH
45941: LD_STRING r
45943: EQUAL
45944: PUSH
45945: LD_VAR 0 4
45949: PUSH
45950: LD_INT 1
45952: ARRAY
45953: PUSH
45954: LD_INT 4
45956: ARRAY
45957: PUSH
45958: LD_VAR 0 2
45962: EQUAL
45963: AND
45964: ST_TO_ADDR
// end ;
45965: LD_VAR 0 3
45969: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
45970: LD_INT 0
45972: PPUSH
// SetDir ( unit , d ) ;
45973: LD_VAR 0 1
45977: PPUSH
45978: LD_VAR 0 4
45982: PPUSH
45983: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
45987: LD_VAR 0 1
45991: PPUSH
45992: LD_VAR 0 2
45996: PPUSH
45997: LD_VAR 0 3
46001: PPUSH
46002: LD_VAR 0 5
46006: PPUSH
46007: CALL_OW 48
// end ;
46011: LD_VAR 0 6
46015: RET
// export function ToNaturalNumber ( number ) ; begin
46016: LD_INT 0
46018: PPUSH
// result := number div 1 ;
46019: LD_ADDR_VAR 0 2
46023: PUSH
46024: LD_VAR 0 1
46028: PUSH
46029: LD_INT 1
46031: DIV
46032: ST_TO_ADDR
// if number < 0 then
46033: LD_VAR 0 1
46037: PUSH
46038: LD_INT 0
46040: LESS
46041: IFFALSE 46051
// result := 0 ;
46043: LD_ADDR_VAR 0 2
46047: PUSH
46048: LD_INT 0
46050: ST_TO_ADDR
// end ;
46051: LD_VAR 0 2
46055: RET
// export function SortByClass ( units , class ) ; var un ; begin
46056: LD_INT 0
46058: PPUSH
46059: PPUSH
// if not units or not class then
46060: LD_VAR 0 1
46064: NOT
46065: PUSH
46066: LD_VAR 0 2
46070: NOT
46071: OR
46072: IFFALSE 46076
// exit ;
46074: GO 46171
// result := [ ] ;
46076: LD_ADDR_VAR 0 3
46080: PUSH
46081: EMPTY
46082: ST_TO_ADDR
// for un in units do
46083: LD_ADDR_VAR 0 4
46087: PUSH
46088: LD_VAR 0 1
46092: PUSH
46093: FOR_IN
46094: IFFALSE 46169
// if GetClass ( un ) = class then
46096: LD_VAR 0 4
46100: PPUSH
46101: CALL_OW 257
46105: PUSH
46106: LD_VAR 0 2
46110: EQUAL
46111: IFFALSE 46138
// result := Insert ( result , 1 , un ) else
46113: LD_ADDR_VAR 0 3
46117: PUSH
46118: LD_VAR 0 3
46122: PPUSH
46123: LD_INT 1
46125: PPUSH
46126: LD_VAR 0 4
46130: PPUSH
46131: CALL_OW 2
46135: ST_TO_ADDR
46136: GO 46167
// result := Replace ( result , result + 1 , un ) ;
46138: LD_ADDR_VAR 0 3
46142: PUSH
46143: LD_VAR 0 3
46147: PPUSH
46148: LD_VAR 0 3
46152: PUSH
46153: LD_INT 1
46155: PLUS
46156: PPUSH
46157: LD_VAR 0 4
46161: PPUSH
46162: CALL_OW 1
46166: ST_TO_ADDR
46167: GO 46093
46169: POP
46170: POP
// end ;
46171: LD_VAR 0 3
46175: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46176: LD_INT 0
46178: PPUSH
46179: PPUSH
46180: PPUSH
46181: PPUSH
46182: PPUSH
46183: PPUSH
46184: PPUSH
// result := [ ] ;
46185: LD_ADDR_VAR 0 4
46189: PUSH
46190: EMPTY
46191: ST_TO_ADDR
// if x - r < 0 then
46192: LD_VAR 0 1
46196: PUSH
46197: LD_VAR 0 3
46201: MINUS
46202: PUSH
46203: LD_INT 0
46205: LESS
46206: IFFALSE 46218
// min_x := 0 else
46208: LD_ADDR_VAR 0 8
46212: PUSH
46213: LD_INT 0
46215: ST_TO_ADDR
46216: GO 46234
// min_x := x - r ;
46218: LD_ADDR_VAR 0 8
46222: PUSH
46223: LD_VAR 0 1
46227: PUSH
46228: LD_VAR 0 3
46232: MINUS
46233: ST_TO_ADDR
// if y - r < 0 then
46234: LD_VAR 0 2
46238: PUSH
46239: LD_VAR 0 3
46243: MINUS
46244: PUSH
46245: LD_INT 0
46247: LESS
46248: IFFALSE 46260
// min_y := 0 else
46250: LD_ADDR_VAR 0 7
46254: PUSH
46255: LD_INT 0
46257: ST_TO_ADDR
46258: GO 46276
// min_y := y - r ;
46260: LD_ADDR_VAR 0 7
46264: PUSH
46265: LD_VAR 0 2
46269: PUSH
46270: LD_VAR 0 3
46274: MINUS
46275: ST_TO_ADDR
// max_x := x + r ;
46276: LD_ADDR_VAR 0 9
46280: PUSH
46281: LD_VAR 0 1
46285: PUSH
46286: LD_VAR 0 3
46290: PLUS
46291: ST_TO_ADDR
// max_y := y + r ;
46292: LD_ADDR_VAR 0 10
46296: PUSH
46297: LD_VAR 0 2
46301: PUSH
46302: LD_VAR 0 3
46306: PLUS
46307: ST_TO_ADDR
// for _x = min_x to max_x do
46308: LD_ADDR_VAR 0 5
46312: PUSH
46313: DOUBLE
46314: LD_VAR 0 8
46318: DEC
46319: ST_TO_ADDR
46320: LD_VAR 0 9
46324: PUSH
46325: FOR_TO
46326: IFFALSE 46427
// for _y = min_y to max_y do
46328: LD_ADDR_VAR 0 6
46332: PUSH
46333: DOUBLE
46334: LD_VAR 0 7
46338: DEC
46339: ST_TO_ADDR
46340: LD_VAR 0 10
46344: PUSH
46345: FOR_TO
46346: IFFALSE 46423
// begin if not ValidHex ( _x , _y ) then
46348: LD_VAR 0 5
46352: PPUSH
46353: LD_VAR 0 6
46357: PPUSH
46358: CALL_OW 488
46362: NOT
46363: IFFALSE 46367
// continue ;
46365: GO 46345
// if GetResourceTypeXY ( _x , _y ) then
46367: LD_VAR 0 5
46371: PPUSH
46372: LD_VAR 0 6
46376: PPUSH
46377: CALL_OW 283
46381: IFFALSE 46421
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
46383: LD_ADDR_VAR 0 4
46387: PUSH
46388: LD_VAR 0 4
46392: PPUSH
46393: LD_VAR 0 4
46397: PUSH
46398: LD_INT 1
46400: PLUS
46401: PPUSH
46402: LD_VAR 0 5
46406: PUSH
46407: LD_VAR 0 6
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PPUSH
46416: CALL_OW 1
46420: ST_TO_ADDR
// end ;
46421: GO 46345
46423: POP
46424: POP
46425: GO 46325
46427: POP
46428: POP
// end ;
46429: LD_VAR 0 4
46433: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
46434: LD_INT 0
46436: PPUSH
46437: PPUSH
46438: PPUSH
46439: PPUSH
46440: PPUSH
46441: PPUSH
46442: PPUSH
46443: PPUSH
// if not units then
46444: LD_VAR 0 1
46448: NOT
46449: IFFALSE 46453
// exit ;
46451: GO 46979
// result := UnitFilter ( units , [ f_ok ] ) ;
46453: LD_ADDR_VAR 0 3
46457: PUSH
46458: LD_VAR 0 1
46462: PPUSH
46463: LD_INT 50
46465: PUSH
46466: EMPTY
46467: LIST
46468: PPUSH
46469: CALL_OW 72
46473: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
46474: LD_ADDR_VAR 0 8
46478: PUSH
46479: LD_VAR 0 1
46483: PUSH
46484: LD_INT 1
46486: ARRAY
46487: PPUSH
46488: CALL_OW 255
46492: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
46493: LD_ADDR_VAR 0 10
46497: PUSH
46498: LD_INT 29
46500: PUSH
46501: LD_EXP 42
46505: PUSH
46506: LD_INT 49
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
// if not result then
46514: LD_VAR 0 3
46518: NOT
46519: IFFALSE 46523
// exit ;
46521: GO 46979
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
46523: LD_ADDR_VAR 0 5
46527: PUSH
46528: LD_INT 81
46530: PUSH
46531: LD_VAR 0 8
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PPUSH
46540: CALL_OW 69
46544: ST_TO_ADDR
// for i in result do
46545: LD_ADDR_VAR 0 4
46549: PUSH
46550: LD_VAR 0 3
46554: PUSH
46555: FOR_IN
46556: IFFALSE 46977
// begin tag := GetTag ( i ) + 1 ;
46558: LD_ADDR_VAR 0 9
46562: PUSH
46563: LD_VAR 0 4
46567: PPUSH
46568: CALL_OW 110
46572: PUSH
46573: LD_INT 1
46575: PLUS
46576: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
46577: LD_ADDR_VAR 0 7
46581: PUSH
46582: LD_VAR 0 4
46586: PPUSH
46587: CALL_OW 250
46591: PPUSH
46592: LD_VAR 0 4
46596: PPUSH
46597: CALL_OW 251
46601: PPUSH
46602: LD_INT 6
46604: PPUSH
46605: CALL 46176 0 3
46609: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
46610: LD_VAR 0 4
46614: PPUSH
46615: CALL_OW 247
46619: PUSH
46620: LD_INT 2
46622: EQUAL
46623: PUSH
46624: LD_VAR 0 7
46628: AND
46629: PUSH
46630: LD_VAR 0 4
46634: PPUSH
46635: CALL_OW 264
46639: PUSH
46640: LD_VAR 0 10
46644: IN
46645: NOT
46646: AND
46647: IFFALSE 46686
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
46649: LD_VAR 0 4
46653: PPUSH
46654: LD_VAR 0 7
46658: PUSH
46659: LD_INT 1
46661: ARRAY
46662: PUSH
46663: LD_INT 1
46665: ARRAY
46666: PPUSH
46667: LD_VAR 0 7
46671: PUSH
46672: LD_INT 1
46674: ARRAY
46675: PUSH
46676: LD_INT 2
46678: ARRAY
46679: PPUSH
46680: CALL_OW 116
46684: GO 46975
// if path > tag then
46686: LD_VAR 0 2
46690: PUSH
46691: LD_VAR 0 9
46695: GREATER
46696: IFFALSE 46904
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
46698: LD_ADDR_VAR 0 6
46702: PUSH
46703: LD_VAR 0 5
46707: PPUSH
46708: LD_INT 91
46710: PUSH
46711: LD_VAR 0 4
46715: PUSH
46716: LD_INT 8
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: PPUSH
46724: CALL_OW 72
46728: ST_TO_ADDR
// if nearEnemy then
46729: LD_VAR 0 6
46733: IFFALSE 46802
// begin if GetWeapon ( i ) = ru_time_lapser then
46735: LD_VAR 0 4
46739: PPUSH
46740: CALL_OW 264
46744: PUSH
46745: LD_INT 49
46747: EQUAL
46748: IFFALSE 46776
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
46750: LD_VAR 0 4
46754: PPUSH
46755: LD_VAR 0 6
46759: PPUSH
46760: LD_VAR 0 4
46764: PPUSH
46765: CALL_OW 74
46769: PPUSH
46770: CALL_OW 112
46774: GO 46800
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
46776: LD_VAR 0 4
46780: PPUSH
46781: LD_VAR 0 6
46785: PPUSH
46786: LD_VAR 0 4
46790: PPUSH
46791: CALL_OW 74
46795: PPUSH
46796: CALL_OW 115
// end else
46800: GO 46902
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
46802: LD_VAR 0 4
46806: PPUSH
46807: LD_VAR 0 2
46811: PUSH
46812: LD_VAR 0 9
46816: ARRAY
46817: PUSH
46818: LD_INT 1
46820: ARRAY
46821: PPUSH
46822: LD_VAR 0 2
46826: PUSH
46827: LD_VAR 0 9
46831: ARRAY
46832: PUSH
46833: LD_INT 2
46835: ARRAY
46836: PPUSH
46837: CALL_OW 297
46841: PUSH
46842: LD_INT 6
46844: GREATER
46845: IFFALSE 46888
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
46847: LD_VAR 0 4
46851: PPUSH
46852: LD_VAR 0 2
46856: PUSH
46857: LD_VAR 0 9
46861: ARRAY
46862: PUSH
46863: LD_INT 1
46865: ARRAY
46866: PPUSH
46867: LD_VAR 0 2
46871: PUSH
46872: LD_VAR 0 9
46876: ARRAY
46877: PUSH
46878: LD_INT 2
46880: ARRAY
46881: PPUSH
46882: CALL_OW 114
46886: GO 46902
// SetTag ( i , tag ) ;
46888: LD_VAR 0 4
46892: PPUSH
46893: LD_VAR 0 9
46897: PPUSH
46898: CALL_OW 109
// end else
46902: GO 46975
// if enemy then
46904: LD_VAR 0 5
46908: IFFALSE 46975
// begin if GetWeapon ( i ) = ru_time_lapser then
46910: LD_VAR 0 4
46914: PPUSH
46915: CALL_OW 264
46919: PUSH
46920: LD_INT 49
46922: EQUAL
46923: IFFALSE 46951
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46925: LD_VAR 0 4
46929: PPUSH
46930: LD_VAR 0 5
46934: PPUSH
46935: LD_VAR 0 4
46939: PPUSH
46940: CALL_OW 74
46944: PPUSH
46945: CALL_OW 112
46949: GO 46975
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
46951: LD_VAR 0 4
46955: PPUSH
46956: LD_VAR 0 5
46960: PPUSH
46961: LD_VAR 0 4
46965: PPUSH
46966: CALL_OW 74
46970: PPUSH
46971: CALL_OW 115
// end ; end ;
46975: GO 46555
46977: POP
46978: POP
// end ;
46979: LD_VAR 0 3
46983: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
46984: LD_INT 0
46986: PPUSH
46987: PPUSH
46988: PPUSH
// if not unit or IsInUnit ( unit ) then
46989: LD_VAR 0 1
46993: NOT
46994: PUSH
46995: LD_VAR 0 1
46999: PPUSH
47000: CALL_OW 310
47004: OR
47005: IFFALSE 47009
// exit ;
47007: GO 47100
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
47009: LD_ADDR_VAR 0 4
47013: PUSH
47014: LD_VAR 0 1
47018: PPUSH
47019: CALL_OW 250
47023: PPUSH
47024: LD_VAR 0 2
47028: PPUSH
47029: LD_INT 1
47031: PPUSH
47032: CALL_OW 272
47036: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
47037: LD_ADDR_VAR 0 5
47041: PUSH
47042: LD_VAR 0 1
47046: PPUSH
47047: CALL_OW 251
47051: PPUSH
47052: LD_VAR 0 2
47056: PPUSH
47057: LD_INT 1
47059: PPUSH
47060: CALL_OW 273
47064: ST_TO_ADDR
// if ValidHex ( x , y ) then
47065: LD_VAR 0 4
47069: PPUSH
47070: LD_VAR 0 5
47074: PPUSH
47075: CALL_OW 488
47079: IFFALSE 47100
// ComTurnXY ( unit , x , y ) ;
47081: LD_VAR 0 1
47085: PPUSH
47086: LD_VAR 0 4
47090: PPUSH
47091: LD_VAR 0 5
47095: PPUSH
47096: CALL_OW 118
// end ;
47100: LD_VAR 0 3
47104: RET
// export function SeeUnits ( side , units ) ; var i ; begin
47105: LD_INT 0
47107: PPUSH
47108: PPUSH
// result := false ;
47109: LD_ADDR_VAR 0 3
47113: PUSH
47114: LD_INT 0
47116: ST_TO_ADDR
// if not units then
47117: LD_VAR 0 2
47121: NOT
47122: IFFALSE 47126
// exit ;
47124: GO 47171
// for i in units do
47126: LD_ADDR_VAR 0 4
47130: PUSH
47131: LD_VAR 0 2
47135: PUSH
47136: FOR_IN
47137: IFFALSE 47169
// if See ( side , i ) then
47139: LD_VAR 0 1
47143: PPUSH
47144: LD_VAR 0 4
47148: PPUSH
47149: CALL_OW 292
47153: IFFALSE 47167
// begin result := true ;
47155: LD_ADDR_VAR 0 3
47159: PUSH
47160: LD_INT 1
47162: ST_TO_ADDR
// exit ;
47163: POP
47164: POP
47165: GO 47171
// end ;
47167: GO 47136
47169: POP
47170: POP
// end ;
47171: LD_VAR 0 3
47175: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47176: LD_INT 0
47178: PPUSH
47179: PPUSH
47180: PPUSH
47181: PPUSH
// if not unit or not points then
47182: LD_VAR 0 1
47186: NOT
47187: PUSH
47188: LD_VAR 0 2
47192: NOT
47193: OR
47194: IFFALSE 47198
// exit ;
47196: GO 47288
// dist := 99999 ;
47198: LD_ADDR_VAR 0 5
47202: PUSH
47203: LD_INT 99999
47205: ST_TO_ADDR
// for i in points do
47206: LD_ADDR_VAR 0 4
47210: PUSH
47211: LD_VAR 0 2
47215: PUSH
47216: FOR_IN
47217: IFFALSE 47286
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47219: LD_ADDR_VAR 0 6
47223: PUSH
47224: LD_VAR 0 1
47228: PPUSH
47229: LD_VAR 0 4
47233: PUSH
47234: LD_INT 1
47236: ARRAY
47237: PPUSH
47238: LD_VAR 0 4
47242: PUSH
47243: LD_INT 2
47245: ARRAY
47246: PPUSH
47247: CALL_OW 297
47251: ST_TO_ADDR
// if tmpDist < dist then
47252: LD_VAR 0 6
47256: PUSH
47257: LD_VAR 0 5
47261: LESS
47262: IFFALSE 47284
// begin result := i ;
47264: LD_ADDR_VAR 0 3
47268: PUSH
47269: LD_VAR 0 4
47273: ST_TO_ADDR
// dist := tmpDist ;
47274: LD_ADDR_VAR 0 5
47278: PUSH
47279: LD_VAR 0 6
47283: ST_TO_ADDR
// end ; end ;
47284: GO 47216
47286: POP
47287: POP
// end ;
47288: LD_VAR 0 3
47292: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
47293: LD_INT 0
47295: PPUSH
// uc_side := side ;
47296: LD_ADDR_OWVAR 20
47300: PUSH
47301: LD_VAR 0 1
47305: ST_TO_ADDR
// uc_nation := 3 ;
47306: LD_ADDR_OWVAR 21
47310: PUSH
47311: LD_INT 3
47313: ST_TO_ADDR
// vc_chassis := 25 ;
47314: LD_ADDR_OWVAR 37
47318: PUSH
47319: LD_INT 25
47321: ST_TO_ADDR
// vc_engine := engine_siberite ;
47322: LD_ADDR_OWVAR 39
47326: PUSH
47327: LD_INT 3
47329: ST_TO_ADDR
// vc_control := control_computer ;
47330: LD_ADDR_OWVAR 38
47334: PUSH
47335: LD_INT 3
47337: ST_TO_ADDR
// vc_weapon := 59 ;
47338: LD_ADDR_OWVAR 40
47342: PUSH
47343: LD_INT 59
47345: ST_TO_ADDR
// result := CreateVehicle ;
47346: LD_ADDR_VAR 0 5
47350: PUSH
47351: CALL_OW 45
47355: ST_TO_ADDR
// SetDir ( result , d ) ;
47356: LD_VAR 0 5
47360: PPUSH
47361: LD_VAR 0 4
47365: PPUSH
47366: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
47370: LD_VAR 0 5
47374: PPUSH
47375: LD_VAR 0 2
47379: PPUSH
47380: LD_VAR 0 3
47384: PPUSH
47385: LD_INT 0
47387: PPUSH
47388: CALL_OW 48
// end ;
47392: LD_VAR 0 5
47396: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
47397: LD_INT 0
47399: PPUSH
47400: PPUSH
47401: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
47402: LD_ADDR_VAR 0 2
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
47425: LD_VAR 0 1
47429: NOT
47430: PUSH
47431: LD_VAR 0 1
47435: PPUSH
47436: CALL_OW 264
47440: PUSH
47441: LD_INT 12
47443: PUSH
47444: LD_INT 51
47446: PUSH
47447: LD_INT 32
47449: PUSH
47450: LD_EXP 39
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: IN
47461: NOT
47462: OR
47463: IFFALSE 47467
// exit ;
47465: GO 47565
// for i := 1 to 3 do
47467: LD_ADDR_VAR 0 3
47471: PUSH
47472: DOUBLE
47473: LD_INT 1
47475: DEC
47476: ST_TO_ADDR
47477: LD_INT 3
47479: PUSH
47480: FOR_TO
47481: IFFALSE 47563
// begin tmp := GetCargo ( cargo , i ) ;
47483: LD_ADDR_VAR 0 4
47487: PUSH
47488: LD_VAR 0 1
47492: PPUSH
47493: LD_VAR 0 3
47497: PPUSH
47498: CALL_OW 289
47502: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
47503: LD_ADDR_VAR 0 2
47507: PUSH
47508: LD_VAR 0 2
47512: PPUSH
47513: LD_VAR 0 3
47517: PPUSH
47518: LD_VAR 0 4
47522: PPUSH
47523: CALL_OW 1
47527: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
47528: LD_ADDR_VAR 0 2
47532: PUSH
47533: LD_VAR 0 2
47537: PPUSH
47538: LD_INT 4
47540: PPUSH
47541: LD_VAR 0 2
47545: PUSH
47546: LD_INT 4
47548: ARRAY
47549: PUSH
47550: LD_VAR 0 4
47554: PLUS
47555: PPUSH
47556: CALL_OW 1
47560: ST_TO_ADDR
// end ;
47561: GO 47480
47563: POP
47564: POP
// end ;
47565: LD_VAR 0 2
47569: RET
// export function Length ( array ) ; begin
47570: LD_INT 0
47572: PPUSH
// result := array + 0 ;
47573: LD_ADDR_VAR 0 2
47577: PUSH
47578: LD_VAR 0 1
47582: PUSH
47583: LD_INT 0
47585: PLUS
47586: ST_TO_ADDR
// end ;
47587: LD_VAR 0 2
47591: RET
// export function PrepareArray ( array ) ; begin
47592: LD_INT 0
47594: PPUSH
// result := array diff 0 ;
47595: LD_ADDR_VAR 0 2
47599: PUSH
47600: LD_VAR 0 1
47604: PUSH
47605: LD_INT 0
47607: DIFF
47608: ST_TO_ADDR
// if not result [ 1 ] then
47609: LD_VAR 0 2
47613: PUSH
47614: LD_INT 1
47616: ARRAY
47617: NOT
47618: IFFALSE 47638
// result := Delete ( result , 1 ) ;
47620: LD_ADDR_VAR 0 2
47624: PUSH
47625: LD_VAR 0 2
47629: PPUSH
47630: LD_INT 1
47632: PPUSH
47633: CALL_OW 3
47637: ST_TO_ADDR
// end ; end_of_file
47638: LD_VAR 0 2
47642: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
47643: LD_INT 0
47645: PPUSH
// ar_miner := 81 ;
47646: LD_ADDR_EXP 45
47650: PUSH
47651: LD_INT 81
47653: ST_TO_ADDR
// ar_crane := 88 ;
47654: LD_ADDR_EXP 44
47658: PUSH
47659: LD_INT 88
47661: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
47662: LD_ADDR_EXP 39
47666: PUSH
47667: LD_INT 89
47669: ST_TO_ADDR
// us_hack := 99 ;
47670: LD_ADDR_EXP 40
47674: PUSH
47675: LD_INT 99
47677: ST_TO_ADDR
// us_artillery := 97 ;
47678: LD_ADDR_EXP 41
47682: PUSH
47683: LD_INT 97
47685: ST_TO_ADDR
// ar_bio_bomb := 91 ;
47686: LD_ADDR_EXP 42
47690: PUSH
47691: LD_INT 91
47693: ST_TO_ADDR
// ar_mortar := 92 ;
47694: LD_ADDR_EXP 43
47698: PUSH
47699: LD_INT 92
47701: ST_TO_ADDR
// ru_flamethrower := 93 ;
47702: LD_ADDR_EXP 46
47706: PUSH
47707: LD_INT 93
47709: ST_TO_ADDR
// ru_radar := 98 ;
47710: LD_ADDR_EXP 38
47714: PUSH
47715: LD_INT 98
47717: ST_TO_ADDR
// tech_Artillery := 80 ;
47718: LD_ADDR_EXP 47
47722: PUSH
47723: LD_INT 80
47725: ST_TO_ADDR
// tech_RadMat := 81 ;
47726: LD_ADDR_EXP 48
47730: PUSH
47731: LD_INT 81
47733: ST_TO_ADDR
// tech_BasicTools := 82 ;
47734: LD_ADDR_EXP 49
47738: PUSH
47739: LD_INT 82
47741: ST_TO_ADDR
// tech_Cargo := 83 ;
47742: LD_ADDR_EXP 50
47746: PUSH
47747: LD_INT 83
47749: ST_TO_ADDR
// tech_Track := 84 ;
47750: LD_ADDR_EXP 51
47754: PUSH
47755: LD_INT 84
47757: ST_TO_ADDR
// tech_Crane := 85 ;
47758: LD_ADDR_EXP 52
47762: PUSH
47763: LD_INT 85
47765: ST_TO_ADDR
// tech_Bulldozer := 86 ;
47766: LD_ADDR_EXP 53
47770: PUSH
47771: LD_INT 86
47773: ST_TO_ADDR
// tech_Hovercraft := 87 ;
47774: LD_ADDR_EXP 54
47778: PUSH
47779: LD_INT 87
47781: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
47782: LD_ADDR_EXP 55
47786: PUSH
47787: LD_INT 88
47789: ST_TO_ADDR
// end ;
47790: LD_VAR 0 1
47794: RET
// every 1 do
47795: GO 47797
47797: DISABLE
// InitGlobalVariables ; end_of_file
47798: CALL 47643 0 0
47802: END
// every 0 0$1 do
47803: GO 47805
47805: DISABLE
// begin enable ;
47806: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47807: LD_STRING updateTimer(
47809: PUSH
47810: LD_OWVAR 1
47814: STR
47815: PUSH
47816: LD_STRING );
47818: STR
47819: PPUSH
47820: CALL_OW 559
// end ;
47824: END
// export function SOS_MapStart ( ) ; begin
47825: LD_INT 0
47827: PPUSH
// if streamModeActive then
47828: LD_EXP 56
47832: IFFALSE 47841
// DefineStreamItems ( true ) ;
47834: LD_INT 1
47836: PPUSH
47837: CALL 49495 0 1
// UpdateFactoryWaypoints ( ) ;
47841: CALL 62356 0 0
// UpdateWarehouseGatheringPoints ( ) ;
47845: CALL 62613 0 0
// end ;
47849: LD_VAR 0 1
47853: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
47854: LD_INT 0
47856: PPUSH
// if p2 = 100 then
47857: LD_VAR 0 2
47861: PUSH
47862: LD_INT 100
47864: EQUAL
47865: IFFALSE 48868
// begin if not StreamModeActive then
47867: LD_EXP 56
47871: NOT
47872: IFFALSE 47882
// StreamModeActive := true ;
47874: LD_ADDR_EXP 56
47878: PUSH
47879: LD_INT 1
47881: ST_TO_ADDR
// if p3 = 0 then
47882: LD_VAR 0 3
47886: PUSH
47887: LD_INT 0
47889: EQUAL
47890: IFFALSE 47896
// InitStreamMode ;
47892: CALL 49031 0 0
// if p3 = 1 then
47896: LD_VAR 0 3
47900: PUSH
47901: LD_INT 1
47903: EQUAL
47904: IFFALSE 47914
// sRocket := true ;
47906: LD_ADDR_EXP 61
47910: PUSH
47911: LD_INT 1
47913: ST_TO_ADDR
// if p3 = 2 then
47914: LD_VAR 0 3
47918: PUSH
47919: LD_INT 2
47921: EQUAL
47922: IFFALSE 47932
// sSpeed := true ;
47924: LD_ADDR_EXP 60
47928: PUSH
47929: LD_INT 1
47931: ST_TO_ADDR
// if p3 = 3 then
47932: LD_VAR 0 3
47936: PUSH
47937: LD_INT 3
47939: EQUAL
47940: IFFALSE 47950
// sEngine := true ;
47942: LD_ADDR_EXP 62
47946: PUSH
47947: LD_INT 1
47949: ST_TO_ADDR
// if p3 = 4 then
47950: LD_VAR 0 3
47954: PUSH
47955: LD_INT 4
47957: EQUAL
47958: IFFALSE 47968
// sSpec := true ;
47960: LD_ADDR_EXP 59
47964: PUSH
47965: LD_INT 1
47967: ST_TO_ADDR
// if p3 = 5 then
47968: LD_VAR 0 3
47972: PUSH
47973: LD_INT 5
47975: EQUAL
47976: IFFALSE 47986
// sLevel := true ;
47978: LD_ADDR_EXP 63
47982: PUSH
47983: LD_INT 1
47985: ST_TO_ADDR
// if p3 = 6 then
47986: LD_VAR 0 3
47990: PUSH
47991: LD_INT 6
47993: EQUAL
47994: IFFALSE 48004
// sArmoury := true ;
47996: LD_ADDR_EXP 64
48000: PUSH
48001: LD_INT 1
48003: ST_TO_ADDR
// if p3 = 7 then
48004: LD_VAR 0 3
48008: PUSH
48009: LD_INT 7
48011: EQUAL
48012: IFFALSE 48022
// sRadar := true ;
48014: LD_ADDR_EXP 65
48018: PUSH
48019: LD_INT 1
48021: ST_TO_ADDR
// if p3 = 8 then
48022: LD_VAR 0 3
48026: PUSH
48027: LD_INT 8
48029: EQUAL
48030: IFFALSE 48040
// sBunker := true ;
48032: LD_ADDR_EXP 66
48036: PUSH
48037: LD_INT 1
48039: ST_TO_ADDR
// if p3 = 9 then
48040: LD_VAR 0 3
48044: PUSH
48045: LD_INT 9
48047: EQUAL
48048: IFFALSE 48058
// sHack := true ;
48050: LD_ADDR_EXP 67
48054: PUSH
48055: LD_INT 1
48057: ST_TO_ADDR
// if p3 = 10 then
48058: LD_VAR 0 3
48062: PUSH
48063: LD_INT 10
48065: EQUAL
48066: IFFALSE 48076
// sFire := true ;
48068: LD_ADDR_EXP 68
48072: PUSH
48073: LD_INT 1
48075: ST_TO_ADDR
// if p3 = 11 then
48076: LD_VAR 0 3
48080: PUSH
48081: LD_INT 11
48083: EQUAL
48084: IFFALSE 48094
// sRefresh := true ;
48086: LD_ADDR_EXP 69
48090: PUSH
48091: LD_INT 1
48093: ST_TO_ADDR
// if p3 = 12 then
48094: LD_VAR 0 3
48098: PUSH
48099: LD_INT 12
48101: EQUAL
48102: IFFALSE 48112
// sExp := true ;
48104: LD_ADDR_EXP 70
48108: PUSH
48109: LD_INT 1
48111: ST_TO_ADDR
// if p3 = 13 then
48112: LD_VAR 0 3
48116: PUSH
48117: LD_INT 13
48119: EQUAL
48120: IFFALSE 48130
// sDepot := true ;
48122: LD_ADDR_EXP 71
48126: PUSH
48127: LD_INT 1
48129: ST_TO_ADDR
// if p3 = 14 then
48130: LD_VAR 0 3
48134: PUSH
48135: LD_INT 14
48137: EQUAL
48138: IFFALSE 48148
// sFlag := true ;
48140: LD_ADDR_EXP 72
48144: PUSH
48145: LD_INT 1
48147: ST_TO_ADDR
// if p3 = 15 then
48148: LD_VAR 0 3
48152: PUSH
48153: LD_INT 15
48155: EQUAL
48156: IFFALSE 48166
// sKamikadze := true ;
48158: LD_ADDR_EXP 80
48162: PUSH
48163: LD_INT 1
48165: ST_TO_ADDR
// if p3 = 16 then
48166: LD_VAR 0 3
48170: PUSH
48171: LD_INT 16
48173: EQUAL
48174: IFFALSE 48184
// sTroll := true ;
48176: LD_ADDR_EXP 81
48180: PUSH
48181: LD_INT 1
48183: ST_TO_ADDR
// if p3 = 17 then
48184: LD_VAR 0 3
48188: PUSH
48189: LD_INT 17
48191: EQUAL
48192: IFFALSE 48202
// sSlow := true ;
48194: LD_ADDR_EXP 82
48198: PUSH
48199: LD_INT 1
48201: ST_TO_ADDR
// if p3 = 18 then
48202: LD_VAR 0 3
48206: PUSH
48207: LD_INT 18
48209: EQUAL
48210: IFFALSE 48220
// sLack := true ;
48212: LD_ADDR_EXP 83
48216: PUSH
48217: LD_INT 1
48219: ST_TO_ADDR
// if p3 = 19 then
48220: LD_VAR 0 3
48224: PUSH
48225: LD_INT 19
48227: EQUAL
48228: IFFALSE 48238
// sTank := true ;
48230: LD_ADDR_EXP 85
48234: PUSH
48235: LD_INT 1
48237: ST_TO_ADDR
// if p3 = 20 then
48238: LD_VAR 0 3
48242: PUSH
48243: LD_INT 20
48245: EQUAL
48246: IFFALSE 48256
// sRemote := true ;
48248: LD_ADDR_EXP 86
48252: PUSH
48253: LD_INT 1
48255: ST_TO_ADDR
// if p3 = 21 then
48256: LD_VAR 0 3
48260: PUSH
48261: LD_INT 21
48263: EQUAL
48264: IFFALSE 48274
// sPowell := true ;
48266: LD_ADDR_EXP 87
48270: PUSH
48271: LD_INT 1
48273: ST_TO_ADDR
// if p3 = 22 then
48274: LD_VAR 0 3
48278: PUSH
48279: LD_INT 22
48281: EQUAL
48282: IFFALSE 48292
// sTeleport := true ;
48284: LD_ADDR_EXP 90
48288: PUSH
48289: LD_INT 1
48291: ST_TO_ADDR
// if p3 = 23 then
48292: LD_VAR 0 3
48296: PUSH
48297: LD_INT 23
48299: EQUAL
48300: IFFALSE 48310
// sOilTower := true ;
48302: LD_ADDR_EXP 92
48306: PUSH
48307: LD_INT 1
48309: ST_TO_ADDR
// if p3 = 24 then
48310: LD_VAR 0 3
48314: PUSH
48315: LD_INT 24
48317: EQUAL
48318: IFFALSE 48328
// sShovel := true ;
48320: LD_ADDR_EXP 93
48324: PUSH
48325: LD_INT 1
48327: ST_TO_ADDR
// if p3 = 25 then
48328: LD_VAR 0 3
48332: PUSH
48333: LD_INT 25
48335: EQUAL
48336: IFFALSE 48346
// sSheik := true ;
48338: LD_ADDR_EXP 94
48342: PUSH
48343: LD_INT 1
48345: ST_TO_ADDR
// if p3 = 26 then
48346: LD_VAR 0 3
48350: PUSH
48351: LD_INT 26
48353: EQUAL
48354: IFFALSE 48364
// sEarthquake := true ;
48356: LD_ADDR_EXP 96
48360: PUSH
48361: LD_INT 1
48363: ST_TO_ADDR
// if p3 = 27 then
48364: LD_VAR 0 3
48368: PUSH
48369: LD_INT 27
48371: EQUAL
48372: IFFALSE 48382
// sAI := true ;
48374: LD_ADDR_EXP 97
48378: PUSH
48379: LD_INT 1
48381: ST_TO_ADDR
// if p3 = 28 then
48382: LD_VAR 0 3
48386: PUSH
48387: LD_INT 28
48389: EQUAL
48390: IFFALSE 48400
// sCargo := true ;
48392: LD_ADDR_EXP 100
48396: PUSH
48397: LD_INT 1
48399: ST_TO_ADDR
// if p3 = 29 then
48400: LD_VAR 0 3
48404: PUSH
48405: LD_INT 29
48407: EQUAL
48408: IFFALSE 48418
// sDLaser := true ;
48410: LD_ADDR_EXP 101
48414: PUSH
48415: LD_INT 1
48417: ST_TO_ADDR
// if p3 = 30 then
48418: LD_VAR 0 3
48422: PUSH
48423: LD_INT 30
48425: EQUAL
48426: IFFALSE 48436
// sExchange := true ;
48428: LD_ADDR_EXP 102
48432: PUSH
48433: LD_INT 1
48435: ST_TO_ADDR
// if p3 = 31 then
48436: LD_VAR 0 3
48440: PUSH
48441: LD_INT 31
48443: EQUAL
48444: IFFALSE 48454
// sFac := true ;
48446: LD_ADDR_EXP 103
48450: PUSH
48451: LD_INT 1
48453: ST_TO_ADDR
// if p3 = 32 then
48454: LD_VAR 0 3
48458: PUSH
48459: LD_INT 32
48461: EQUAL
48462: IFFALSE 48472
// sPower := true ;
48464: LD_ADDR_EXP 104
48468: PUSH
48469: LD_INT 1
48471: ST_TO_ADDR
// if p3 = 33 then
48472: LD_VAR 0 3
48476: PUSH
48477: LD_INT 33
48479: EQUAL
48480: IFFALSE 48490
// sRandom := true ;
48482: LD_ADDR_EXP 105
48486: PUSH
48487: LD_INT 1
48489: ST_TO_ADDR
// if p3 = 34 then
48490: LD_VAR 0 3
48494: PUSH
48495: LD_INT 34
48497: EQUAL
48498: IFFALSE 48508
// sShield := true ;
48500: LD_ADDR_EXP 106
48504: PUSH
48505: LD_INT 1
48507: ST_TO_ADDR
// if p3 = 35 then
48508: LD_VAR 0 3
48512: PUSH
48513: LD_INT 35
48515: EQUAL
48516: IFFALSE 48526
// sTime := true ;
48518: LD_ADDR_EXP 107
48522: PUSH
48523: LD_INT 1
48525: ST_TO_ADDR
// if p3 = 36 then
48526: LD_VAR 0 3
48530: PUSH
48531: LD_INT 36
48533: EQUAL
48534: IFFALSE 48544
// sTools := true ;
48536: LD_ADDR_EXP 108
48540: PUSH
48541: LD_INT 1
48543: ST_TO_ADDR
// if p3 = 101 then
48544: LD_VAR 0 3
48548: PUSH
48549: LD_INT 101
48551: EQUAL
48552: IFFALSE 48562
// sSold := true ;
48554: LD_ADDR_EXP 73
48558: PUSH
48559: LD_INT 1
48561: ST_TO_ADDR
// if p3 = 102 then
48562: LD_VAR 0 3
48566: PUSH
48567: LD_INT 102
48569: EQUAL
48570: IFFALSE 48580
// sDiff := true ;
48572: LD_ADDR_EXP 74
48576: PUSH
48577: LD_INT 1
48579: ST_TO_ADDR
// if p3 = 103 then
48580: LD_VAR 0 3
48584: PUSH
48585: LD_INT 103
48587: EQUAL
48588: IFFALSE 48598
// sFog := true ;
48590: LD_ADDR_EXP 77
48594: PUSH
48595: LD_INT 1
48597: ST_TO_ADDR
// if p3 = 104 then
48598: LD_VAR 0 3
48602: PUSH
48603: LD_INT 104
48605: EQUAL
48606: IFFALSE 48616
// sReset := true ;
48608: LD_ADDR_EXP 78
48612: PUSH
48613: LD_INT 1
48615: ST_TO_ADDR
// if p3 = 105 then
48616: LD_VAR 0 3
48620: PUSH
48621: LD_INT 105
48623: EQUAL
48624: IFFALSE 48634
// sSun := true ;
48626: LD_ADDR_EXP 79
48630: PUSH
48631: LD_INT 1
48633: ST_TO_ADDR
// if p3 = 106 then
48634: LD_VAR 0 3
48638: PUSH
48639: LD_INT 106
48641: EQUAL
48642: IFFALSE 48652
// sTiger := true ;
48644: LD_ADDR_EXP 75
48648: PUSH
48649: LD_INT 1
48651: ST_TO_ADDR
// if p3 = 107 then
48652: LD_VAR 0 3
48656: PUSH
48657: LD_INT 107
48659: EQUAL
48660: IFFALSE 48670
// sBomb := true ;
48662: LD_ADDR_EXP 76
48666: PUSH
48667: LD_INT 1
48669: ST_TO_ADDR
// if p3 = 108 then
48670: LD_VAR 0 3
48674: PUSH
48675: LD_INT 108
48677: EQUAL
48678: IFFALSE 48688
// sWound := true ;
48680: LD_ADDR_EXP 84
48684: PUSH
48685: LD_INT 1
48687: ST_TO_ADDR
// if p3 = 109 then
48688: LD_VAR 0 3
48692: PUSH
48693: LD_INT 109
48695: EQUAL
48696: IFFALSE 48706
// sBetray := true ;
48698: LD_ADDR_EXP 88
48702: PUSH
48703: LD_INT 1
48705: ST_TO_ADDR
// if p3 = 110 then
48706: LD_VAR 0 3
48710: PUSH
48711: LD_INT 110
48713: EQUAL
48714: IFFALSE 48724
// sContamin := true ;
48716: LD_ADDR_EXP 89
48720: PUSH
48721: LD_INT 1
48723: ST_TO_ADDR
// if p3 = 111 then
48724: LD_VAR 0 3
48728: PUSH
48729: LD_INT 111
48731: EQUAL
48732: IFFALSE 48742
// sOil := true ;
48734: LD_ADDR_EXP 91
48738: PUSH
48739: LD_INT 1
48741: ST_TO_ADDR
// if p3 = 112 then
48742: LD_VAR 0 3
48746: PUSH
48747: LD_INT 112
48749: EQUAL
48750: IFFALSE 48760
// sStu := true ;
48752: LD_ADDR_EXP 95
48756: PUSH
48757: LD_INT 1
48759: ST_TO_ADDR
// if p3 = 113 then
48760: LD_VAR 0 3
48764: PUSH
48765: LD_INT 113
48767: EQUAL
48768: IFFALSE 48778
// sBazooka := true ;
48770: LD_ADDR_EXP 98
48774: PUSH
48775: LD_INT 1
48777: ST_TO_ADDR
// if p3 = 114 then
48778: LD_VAR 0 3
48782: PUSH
48783: LD_INT 114
48785: EQUAL
48786: IFFALSE 48796
// sMortar := true ;
48788: LD_ADDR_EXP 99
48792: PUSH
48793: LD_INT 1
48795: ST_TO_ADDR
// if p3 = 115 then
48796: LD_VAR 0 3
48800: PUSH
48801: LD_INT 115
48803: EQUAL
48804: IFFALSE 48814
// sRanger := true ;
48806: LD_ADDR_EXP 109
48810: PUSH
48811: LD_INT 1
48813: ST_TO_ADDR
// if p3 = 116 then
48814: LD_VAR 0 3
48818: PUSH
48819: LD_INT 116
48821: EQUAL
48822: IFFALSE 48832
// sComputer := true ;
48824: LD_ADDR_EXP 110
48828: PUSH
48829: LD_INT 1
48831: ST_TO_ADDR
// if p3 = 117 then
48832: LD_VAR 0 3
48836: PUSH
48837: LD_INT 117
48839: EQUAL
48840: IFFALSE 48850
// s30 := true ;
48842: LD_ADDR_EXP 111
48846: PUSH
48847: LD_INT 1
48849: ST_TO_ADDR
// if p3 = 118 then
48850: LD_VAR 0 3
48854: PUSH
48855: LD_INT 118
48857: EQUAL
48858: IFFALSE 48868
// s60 := true ;
48860: LD_ADDR_EXP 112
48864: PUSH
48865: LD_INT 1
48867: ST_TO_ADDR
// end ; if p2 = 101 then
48868: LD_VAR 0 2
48872: PUSH
48873: LD_INT 101
48875: EQUAL
48876: IFFALSE 49004
// begin case p3 of 1 :
48878: LD_VAR 0 3
48882: PUSH
48883: LD_INT 1
48885: DOUBLE
48886: EQUAL
48887: IFTRUE 48891
48889: GO 48898
48891: POP
// hHackUnlimitedResources ; 2 :
48892: CALL 61102 0 0
48896: GO 49004
48898: LD_INT 2
48900: DOUBLE
48901: EQUAL
48902: IFTRUE 48906
48904: GO 48913
48906: POP
// hHackSetLevel10 ; 3 :
48907: CALL 61235 0 0
48911: GO 49004
48913: LD_INT 3
48915: DOUBLE
48916: EQUAL
48917: IFTRUE 48921
48919: GO 48928
48921: POP
// hHackSetLevel10YourUnits ; 4 :
48922: CALL 61320 0 0
48926: GO 49004
48928: LD_INT 4
48930: DOUBLE
48931: EQUAL
48932: IFTRUE 48936
48934: GO 48943
48936: POP
// hHackInvincible ; 5 :
48937: CALL 61768 0 0
48941: GO 49004
48943: LD_INT 5
48945: DOUBLE
48946: EQUAL
48947: IFTRUE 48951
48949: GO 48958
48951: POP
// hHackInvisible ; 6 :
48952: CALL 61879 0 0
48956: GO 49004
48958: LD_INT 6
48960: DOUBLE
48961: EQUAL
48962: IFTRUE 48966
48964: GO 48973
48966: POP
// hHackChangeYourSide ; 7 :
48967: CALL 61936 0 0
48971: GO 49004
48973: LD_INT 7
48975: DOUBLE
48976: EQUAL
48977: IFTRUE 48981
48979: GO 48988
48981: POP
// hHackChangeUnitSide ; 8 :
48982: CALL 61978 0 0
48986: GO 49004
48988: LD_INT 8
48990: DOUBLE
48991: EQUAL
48992: IFTRUE 48996
48994: GO 49003
48996: POP
// hHackFog ; end ;
48997: CALL 62079 0 0
49001: GO 49004
49003: POP
// end ; end ;
49004: LD_VAR 0 7
49008: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
49009: GO 49011
49011: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
49012: LD_STRING initStreamRollete();
49014: PPUSH
49015: CALL_OW 559
// InitStreamMode ;
49019: CALL 49031 0 0
// DefineStreamItems ( false ) ;
49023: LD_INT 0
49025: PPUSH
49026: CALL 49495 0 1
// end ;
49030: END
// function InitStreamMode ; begin
49031: LD_INT 0
49033: PPUSH
// streamModeActive := false ;
49034: LD_ADDR_EXP 56
49038: PUSH
49039: LD_INT 0
49041: ST_TO_ADDR
// normalCounter := 36 ;
49042: LD_ADDR_EXP 57
49046: PUSH
49047: LD_INT 36
49049: ST_TO_ADDR
// hardcoreCounter := 18 ;
49050: LD_ADDR_EXP 58
49054: PUSH
49055: LD_INT 18
49057: ST_TO_ADDR
// sRocket := false ;
49058: LD_ADDR_EXP 61
49062: PUSH
49063: LD_INT 0
49065: ST_TO_ADDR
// sSpeed := false ;
49066: LD_ADDR_EXP 60
49070: PUSH
49071: LD_INT 0
49073: ST_TO_ADDR
// sEngine := false ;
49074: LD_ADDR_EXP 62
49078: PUSH
49079: LD_INT 0
49081: ST_TO_ADDR
// sSpec := false ;
49082: LD_ADDR_EXP 59
49086: PUSH
49087: LD_INT 0
49089: ST_TO_ADDR
// sLevel := false ;
49090: LD_ADDR_EXP 63
49094: PUSH
49095: LD_INT 0
49097: ST_TO_ADDR
// sArmoury := false ;
49098: LD_ADDR_EXP 64
49102: PUSH
49103: LD_INT 0
49105: ST_TO_ADDR
// sRadar := false ;
49106: LD_ADDR_EXP 65
49110: PUSH
49111: LD_INT 0
49113: ST_TO_ADDR
// sBunker := false ;
49114: LD_ADDR_EXP 66
49118: PUSH
49119: LD_INT 0
49121: ST_TO_ADDR
// sHack := false ;
49122: LD_ADDR_EXP 67
49126: PUSH
49127: LD_INT 0
49129: ST_TO_ADDR
// sFire := false ;
49130: LD_ADDR_EXP 68
49134: PUSH
49135: LD_INT 0
49137: ST_TO_ADDR
// sRefresh := false ;
49138: LD_ADDR_EXP 69
49142: PUSH
49143: LD_INT 0
49145: ST_TO_ADDR
// sExp := false ;
49146: LD_ADDR_EXP 70
49150: PUSH
49151: LD_INT 0
49153: ST_TO_ADDR
// sDepot := false ;
49154: LD_ADDR_EXP 71
49158: PUSH
49159: LD_INT 0
49161: ST_TO_ADDR
// sFlag := false ;
49162: LD_ADDR_EXP 72
49166: PUSH
49167: LD_INT 0
49169: ST_TO_ADDR
// sKamikadze := false ;
49170: LD_ADDR_EXP 80
49174: PUSH
49175: LD_INT 0
49177: ST_TO_ADDR
// sTroll := false ;
49178: LD_ADDR_EXP 81
49182: PUSH
49183: LD_INT 0
49185: ST_TO_ADDR
// sSlow := false ;
49186: LD_ADDR_EXP 82
49190: PUSH
49191: LD_INT 0
49193: ST_TO_ADDR
// sLack := false ;
49194: LD_ADDR_EXP 83
49198: PUSH
49199: LD_INT 0
49201: ST_TO_ADDR
// sTank := false ;
49202: LD_ADDR_EXP 85
49206: PUSH
49207: LD_INT 0
49209: ST_TO_ADDR
// sRemote := false ;
49210: LD_ADDR_EXP 86
49214: PUSH
49215: LD_INT 0
49217: ST_TO_ADDR
// sPowell := false ;
49218: LD_ADDR_EXP 87
49222: PUSH
49223: LD_INT 0
49225: ST_TO_ADDR
// sTeleport := false ;
49226: LD_ADDR_EXP 90
49230: PUSH
49231: LD_INT 0
49233: ST_TO_ADDR
// sOilTower := false ;
49234: LD_ADDR_EXP 92
49238: PUSH
49239: LD_INT 0
49241: ST_TO_ADDR
// sShovel := false ;
49242: LD_ADDR_EXP 93
49246: PUSH
49247: LD_INT 0
49249: ST_TO_ADDR
// sSheik := false ;
49250: LD_ADDR_EXP 94
49254: PUSH
49255: LD_INT 0
49257: ST_TO_ADDR
// sEarthquake := false ;
49258: LD_ADDR_EXP 96
49262: PUSH
49263: LD_INT 0
49265: ST_TO_ADDR
// sAI := false ;
49266: LD_ADDR_EXP 97
49270: PUSH
49271: LD_INT 0
49273: ST_TO_ADDR
// sCargo := false ;
49274: LD_ADDR_EXP 100
49278: PUSH
49279: LD_INT 0
49281: ST_TO_ADDR
// sDLaser := false ;
49282: LD_ADDR_EXP 101
49286: PUSH
49287: LD_INT 0
49289: ST_TO_ADDR
// sExchange := false ;
49290: LD_ADDR_EXP 102
49294: PUSH
49295: LD_INT 0
49297: ST_TO_ADDR
// sFac := false ;
49298: LD_ADDR_EXP 103
49302: PUSH
49303: LD_INT 0
49305: ST_TO_ADDR
// sPower := false ;
49306: LD_ADDR_EXP 104
49310: PUSH
49311: LD_INT 0
49313: ST_TO_ADDR
// sRandom := false ;
49314: LD_ADDR_EXP 105
49318: PUSH
49319: LD_INT 0
49321: ST_TO_ADDR
// sShield := false ;
49322: LD_ADDR_EXP 106
49326: PUSH
49327: LD_INT 0
49329: ST_TO_ADDR
// sTime := false ;
49330: LD_ADDR_EXP 107
49334: PUSH
49335: LD_INT 0
49337: ST_TO_ADDR
// sTools := false ;
49338: LD_ADDR_EXP 108
49342: PUSH
49343: LD_INT 0
49345: ST_TO_ADDR
// sSold := false ;
49346: LD_ADDR_EXP 73
49350: PUSH
49351: LD_INT 0
49353: ST_TO_ADDR
// sDiff := false ;
49354: LD_ADDR_EXP 74
49358: PUSH
49359: LD_INT 0
49361: ST_TO_ADDR
// sFog := false ;
49362: LD_ADDR_EXP 77
49366: PUSH
49367: LD_INT 0
49369: ST_TO_ADDR
// sReset := false ;
49370: LD_ADDR_EXP 78
49374: PUSH
49375: LD_INT 0
49377: ST_TO_ADDR
// sSun := false ;
49378: LD_ADDR_EXP 79
49382: PUSH
49383: LD_INT 0
49385: ST_TO_ADDR
// sTiger := false ;
49386: LD_ADDR_EXP 75
49390: PUSH
49391: LD_INT 0
49393: ST_TO_ADDR
// sBomb := false ;
49394: LD_ADDR_EXP 76
49398: PUSH
49399: LD_INT 0
49401: ST_TO_ADDR
// sWound := false ;
49402: LD_ADDR_EXP 84
49406: PUSH
49407: LD_INT 0
49409: ST_TO_ADDR
// sBetray := false ;
49410: LD_ADDR_EXP 88
49414: PUSH
49415: LD_INT 0
49417: ST_TO_ADDR
// sContamin := false ;
49418: LD_ADDR_EXP 89
49422: PUSH
49423: LD_INT 0
49425: ST_TO_ADDR
// sOil := false ;
49426: LD_ADDR_EXP 91
49430: PUSH
49431: LD_INT 0
49433: ST_TO_ADDR
// sStu := false ;
49434: LD_ADDR_EXP 95
49438: PUSH
49439: LD_INT 0
49441: ST_TO_ADDR
// sBazooka := false ;
49442: LD_ADDR_EXP 98
49446: PUSH
49447: LD_INT 0
49449: ST_TO_ADDR
// sMortar := false ;
49450: LD_ADDR_EXP 99
49454: PUSH
49455: LD_INT 0
49457: ST_TO_ADDR
// sRanger := false ;
49458: LD_ADDR_EXP 109
49462: PUSH
49463: LD_INT 0
49465: ST_TO_ADDR
// sComputer := false ;
49466: LD_ADDR_EXP 110
49470: PUSH
49471: LD_INT 0
49473: ST_TO_ADDR
// s30 := false ;
49474: LD_ADDR_EXP 111
49478: PUSH
49479: LD_INT 0
49481: ST_TO_ADDR
// s60 := false ;
49482: LD_ADDR_EXP 112
49486: PUSH
49487: LD_INT 0
49489: ST_TO_ADDR
// end ;
49490: LD_VAR 0 1
49494: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49495: LD_INT 0
49497: PPUSH
49498: PPUSH
49499: PPUSH
49500: PPUSH
49501: PPUSH
49502: PPUSH
49503: PPUSH
// result := [ ] ;
49504: LD_ADDR_VAR 0 2
49508: PUSH
49509: EMPTY
49510: ST_TO_ADDR
// if campaign_id = 1 then
49511: LD_OWVAR 69
49515: PUSH
49516: LD_INT 1
49518: EQUAL
49519: IFFALSE 52685
// begin case mission_number of 1 :
49521: LD_OWVAR 70
49525: PUSH
49526: LD_INT 1
49528: DOUBLE
49529: EQUAL
49530: IFTRUE 49534
49532: GO 49610
49534: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49535: LD_ADDR_VAR 0 2
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: LD_INT 4
49545: PUSH
49546: LD_INT 11
49548: PUSH
49549: LD_INT 12
49551: PUSH
49552: LD_INT 15
49554: PUSH
49555: LD_INT 16
49557: PUSH
49558: LD_INT 22
49560: PUSH
49561: LD_INT 23
49563: PUSH
49564: LD_INT 26
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 101
49580: PUSH
49581: LD_INT 102
49583: PUSH
49584: LD_INT 106
49586: PUSH
49587: LD_INT 116
49589: PUSH
49590: LD_INT 117
49592: PUSH
49593: LD_INT 118
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: ST_TO_ADDR
49608: GO 52683
49610: LD_INT 2
49612: DOUBLE
49613: EQUAL
49614: IFTRUE 49618
49616: GO 49702
49618: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49619: LD_ADDR_VAR 0 2
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 4
49629: PUSH
49630: LD_INT 11
49632: PUSH
49633: LD_INT 12
49635: PUSH
49636: LD_INT 15
49638: PUSH
49639: LD_INT 16
49641: PUSH
49642: LD_INT 22
49644: PUSH
49645: LD_INT 23
49647: PUSH
49648: LD_INT 26
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 101
49664: PUSH
49665: LD_INT 102
49667: PUSH
49668: LD_INT 105
49670: PUSH
49671: LD_INT 106
49673: PUSH
49674: LD_INT 108
49676: PUSH
49677: LD_INT 116
49679: PUSH
49680: LD_INT 117
49682: PUSH
49683: LD_INT 118
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: ST_TO_ADDR
49700: GO 52683
49702: LD_INT 3
49704: DOUBLE
49705: EQUAL
49706: IFTRUE 49710
49708: GO 49798
49710: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49711: LD_ADDR_VAR 0 2
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: LD_INT 4
49721: PUSH
49722: LD_INT 5
49724: PUSH
49725: LD_INT 11
49727: PUSH
49728: LD_INT 12
49730: PUSH
49731: LD_INT 15
49733: PUSH
49734: LD_INT 16
49736: PUSH
49737: LD_INT 22
49739: PUSH
49740: LD_INT 26
49742: PUSH
49743: LD_INT 36
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 101
49760: PUSH
49761: LD_INT 102
49763: PUSH
49764: LD_INT 105
49766: PUSH
49767: LD_INT 106
49769: PUSH
49770: LD_INT 108
49772: PUSH
49773: LD_INT 116
49775: PUSH
49776: LD_INT 117
49778: PUSH
49779: LD_INT 118
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: ST_TO_ADDR
49796: GO 52683
49798: LD_INT 4
49800: DOUBLE
49801: EQUAL
49802: IFTRUE 49806
49804: GO 49902
49806: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
49807: LD_ADDR_VAR 0 2
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 4
49817: PUSH
49818: LD_INT 5
49820: PUSH
49821: LD_INT 8
49823: PUSH
49824: LD_INT 11
49826: PUSH
49827: LD_INT 12
49829: PUSH
49830: LD_INT 15
49832: PUSH
49833: LD_INT 16
49835: PUSH
49836: LD_INT 22
49838: PUSH
49839: LD_INT 23
49841: PUSH
49842: LD_INT 26
49844: PUSH
49845: LD_INT 36
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 101
49864: PUSH
49865: LD_INT 102
49867: PUSH
49868: LD_INT 105
49870: PUSH
49871: LD_INT 106
49873: PUSH
49874: LD_INT 108
49876: PUSH
49877: LD_INT 116
49879: PUSH
49880: LD_INT 117
49882: PUSH
49883: LD_INT 118
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: ST_TO_ADDR
49900: GO 52683
49902: LD_INT 5
49904: DOUBLE
49905: EQUAL
49906: IFTRUE 49910
49908: GO 50022
49910: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
49911: LD_ADDR_VAR 0 2
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: LD_INT 4
49921: PUSH
49922: LD_INT 5
49924: PUSH
49925: LD_INT 6
49927: PUSH
49928: LD_INT 8
49930: PUSH
49931: LD_INT 11
49933: PUSH
49934: LD_INT 12
49936: PUSH
49937: LD_INT 15
49939: PUSH
49940: LD_INT 16
49942: PUSH
49943: LD_INT 22
49945: PUSH
49946: LD_INT 23
49948: PUSH
49949: LD_INT 25
49951: PUSH
49952: LD_INT 26
49954: PUSH
49955: LD_INT 36
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 101
49976: PUSH
49977: LD_INT 102
49979: PUSH
49980: LD_INT 105
49982: PUSH
49983: LD_INT 106
49985: PUSH
49986: LD_INT 108
49988: PUSH
49989: LD_INT 109
49991: PUSH
49992: LD_INT 112
49994: PUSH
49995: LD_INT 116
49997: PUSH
49998: LD_INT 117
50000: PUSH
50001: LD_INT 118
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: ST_TO_ADDR
50020: GO 52683
50022: LD_INT 6
50024: DOUBLE
50025: EQUAL
50026: IFTRUE 50030
50028: GO 50162
50030: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50031: LD_ADDR_VAR 0 2
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: LD_INT 4
50041: PUSH
50042: LD_INT 5
50044: PUSH
50045: LD_INT 6
50047: PUSH
50048: LD_INT 8
50050: PUSH
50051: LD_INT 11
50053: PUSH
50054: LD_INT 12
50056: PUSH
50057: LD_INT 15
50059: PUSH
50060: LD_INT 16
50062: PUSH
50063: LD_INT 20
50065: PUSH
50066: LD_INT 21
50068: PUSH
50069: LD_INT 22
50071: PUSH
50072: LD_INT 23
50074: PUSH
50075: LD_INT 25
50077: PUSH
50078: LD_INT 26
50080: PUSH
50081: LD_INT 30
50083: PUSH
50084: LD_INT 31
50086: PUSH
50087: LD_INT 32
50089: PUSH
50090: LD_INT 36
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 101
50116: PUSH
50117: LD_INT 102
50119: PUSH
50120: LD_INT 105
50122: PUSH
50123: LD_INT 106
50125: PUSH
50126: LD_INT 108
50128: PUSH
50129: LD_INT 109
50131: PUSH
50132: LD_INT 112
50134: PUSH
50135: LD_INT 116
50137: PUSH
50138: LD_INT 117
50140: PUSH
50141: LD_INT 118
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: ST_TO_ADDR
50160: GO 52683
50162: LD_INT 7
50164: DOUBLE
50165: EQUAL
50166: IFTRUE 50170
50168: GO 50282
50170: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50171: LD_ADDR_VAR 0 2
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: LD_INT 4
50181: PUSH
50182: LD_INT 5
50184: PUSH
50185: LD_INT 7
50187: PUSH
50188: LD_INT 11
50190: PUSH
50191: LD_INT 12
50193: PUSH
50194: LD_INT 15
50196: PUSH
50197: LD_INT 16
50199: PUSH
50200: LD_INT 20
50202: PUSH
50203: LD_INT 21
50205: PUSH
50206: LD_INT 22
50208: PUSH
50209: LD_INT 23
50211: PUSH
50212: LD_INT 25
50214: PUSH
50215: LD_INT 26
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 101
50236: PUSH
50237: LD_INT 102
50239: PUSH
50240: LD_INT 103
50242: PUSH
50243: LD_INT 105
50245: PUSH
50246: LD_INT 106
50248: PUSH
50249: LD_INT 108
50251: PUSH
50252: LD_INT 112
50254: PUSH
50255: LD_INT 116
50257: PUSH
50258: LD_INT 117
50260: PUSH
50261: LD_INT 118
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: ST_TO_ADDR
50280: GO 52683
50282: LD_INT 8
50284: DOUBLE
50285: EQUAL
50286: IFTRUE 50290
50288: GO 50430
50290: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50291: LD_ADDR_VAR 0 2
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: LD_INT 4
50301: PUSH
50302: LD_INT 5
50304: PUSH
50305: LD_INT 6
50307: PUSH
50308: LD_INT 7
50310: PUSH
50311: LD_INT 8
50313: PUSH
50314: LD_INT 11
50316: PUSH
50317: LD_INT 12
50319: PUSH
50320: LD_INT 15
50322: PUSH
50323: LD_INT 16
50325: PUSH
50326: LD_INT 20
50328: PUSH
50329: LD_INT 21
50331: PUSH
50332: LD_INT 22
50334: PUSH
50335: LD_INT 23
50337: PUSH
50338: LD_INT 25
50340: PUSH
50341: LD_INT 26
50343: PUSH
50344: LD_INT 30
50346: PUSH
50347: LD_INT 31
50349: PUSH
50350: LD_INT 32
50352: PUSH
50353: LD_INT 36
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 101
50380: PUSH
50381: LD_INT 102
50383: PUSH
50384: LD_INT 103
50386: PUSH
50387: LD_INT 105
50389: PUSH
50390: LD_INT 106
50392: PUSH
50393: LD_INT 108
50395: PUSH
50396: LD_INT 109
50398: PUSH
50399: LD_INT 112
50401: PUSH
50402: LD_INT 116
50404: PUSH
50405: LD_INT 117
50407: PUSH
50408: LD_INT 118
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: ST_TO_ADDR
50428: GO 52683
50430: LD_INT 9
50432: DOUBLE
50433: EQUAL
50434: IFTRUE 50438
50436: GO 50586
50438: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50439: LD_ADDR_VAR 0 2
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: LD_INT 4
50449: PUSH
50450: LD_INT 5
50452: PUSH
50453: LD_INT 6
50455: PUSH
50456: LD_INT 7
50458: PUSH
50459: LD_INT 8
50461: PUSH
50462: LD_INT 11
50464: PUSH
50465: LD_INT 12
50467: PUSH
50468: LD_INT 15
50470: PUSH
50471: LD_INT 16
50473: PUSH
50474: LD_INT 20
50476: PUSH
50477: LD_INT 21
50479: PUSH
50480: LD_INT 22
50482: PUSH
50483: LD_INT 23
50485: PUSH
50486: LD_INT 25
50488: PUSH
50489: LD_INT 26
50491: PUSH
50492: LD_INT 28
50494: PUSH
50495: LD_INT 30
50497: PUSH
50498: LD_INT 31
50500: PUSH
50501: LD_INT 32
50503: PUSH
50504: LD_INT 36
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 101
50532: PUSH
50533: LD_INT 102
50535: PUSH
50536: LD_INT 103
50538: PUSH
50539: LD_INT 105
50541: PUSH
50542: LD_INT 106
50544: PUSH
50545: LD_INT 108
50547: PUSH
50548: LD_INT 109
50550: PUSH
50551: LD_INT 112
50553: PUSH
50554: LD_INT 114
50556: PUSH
50557: LD_INT 116
50559: PUSH
50560: LD_INT 117
50562: PUSH
50563: LD_INT 118
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: ST_TO_ADDR
50584: GO 52683
50586: LD_INT 10
50588: DOUBLE
50589: EQUAL
50590: IFTRUE 50594
50592: GO 50790
50594: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50595: LD_ADDR_VAR 0 2
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 4
50605: PUSH
50606: LD_INT 5
50608: PUSH
50609: LD_INT 6
50611: PUSH
50612: LD_INT 7
50614: PUSH
50615: LD_INT 8
50617: PUSH
50618: LD_INT 9
50620: PUSH
50621: LD_INT 10
50623: PUSH
50624: LD_INT 11
50626: PUSH
50627: LD_INT 12
50629: PUSH
50630: LD_INT 13
50632: PUSH
50633: LD_INT 14
50635: PUSH
50636: LD_INT 15
50638: PUSH
50639: LD_INT 16
50641: PUSH
50642: LD_INT 17
50644: PUSH
50645: LD_INT 18
50647: PUSH
50648: LD_INT 19
50650: PUSH
50651: LD_INT 20
50653: PUSH
50654: LD_INT 21
50656: PUSH
50657: LD_INT 22
50659: PUSH
50660: LD_INT 23
50662: PUSH
50663: LD_INT 24
50665: PUSH
50666: LD_INT 25
50668: PUSH
50669: LD_INT 26
50671: PUSH
50672: LD_INT 28
50674: PUSH
50675: LD_INT 30
50677: PUSH
50678: LD_INT 31
50680: PUSH
50681: LD_INT 32
50683: PUSH
50684: LD_INT 36
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 101
50720: PUSH
50721: LD_INT 102
50723: PUSH
50724: LD_INT 103
50726: PUSH
50727: LD_INT 104
50729: PUSH
50730: LD_INT 105
50732: PUSH
50733: LD_INT 106
50735: PUSH
50736: LD_INT 107
50738: PUSH
50739: LD_INT 108
50741: PUSH
50742: LD_INT 109
50744: PUSH
50745: LD_INT 110
50747: PUSH
50748: LD_INT 111
50750: PUSH
50751: LD_INT 112
50753: PUSH
50754: LD_INT 114
50756: PUSH
50757: LD_INT 116
50759: PUSH
50760: LD_INT 117
50762: PUSH
50763: LD_INT 118
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: ST_TO_ADDR
50788: GO 52683
50790: LD_INT 11
50792: DOUBLE
50793: EQUAL
50794: IFTRUE 50798
50796: GO 51002
50798: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
50799: LD_ADDR_VAR 0 2
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 3
50809: PUSH
50810: LD_INT 4
50812: PUSH
50813: LD_INT 5
50815: PUSH
50816: LD_INT 6
50818: PUSH
50819: LD_INT 7
50821: PUSH
50822: LD_INT 8
50824: PUSH
50825: LD_INT 9
50827: PUSH
50828: LD_INT 10
50830: PUSH
50831: LD_INT 11
50833: PUSH
50834: LD_INT 12
50836: PUSH
50837: LD_INT 13
50839: PUSH
50840: LD_INT 14
50842: PUSH
50843: LD_INT 15
50845: PUSH
50846: LD_INT 16
50848: PUSH
50849: LD_INT 17
50851: PUSH
50852: LD_INT 18
50854: PUSH
50855: LD_INT 19
50857: PUSH
50858: LD_INT 20
50860: PUSH
50861: LD_INT 21
50863: PUSH
50864: LD_INT 22
50866: PUSH
50867: LD_INT 23
50869: PUSH
50870: LD_INT 24
50872: PUSH
50873: LD_INT 25
50875: PUSH
50876: LD_INT 26
50878: PUSH
50879: LD_INT 28
50881: PUSH
50882: LD_INT 30
50884: PUSH
50885: LD_INT 31
50887: PUSH
50888: LD_INT 32
50890: PUSH
50891: LD_INT 34
50893: PUSH
50894: LD_INT 36
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 101
50932: PUSH
50933: LD_INT 102
50935: PUSH
50936: LD_INT 103
50938: PUSH
50939: LD_INT 104
50941: PUSH
50942: LD_INT 105
50944: PUSH
50945: LD_INT 106
50947: PUSH
50948: LD_INT 107
50950: PUSH
50951: LD_INT 108
50953: PUSH
50954: LD_INT 109
50956: PUSH
50957: LD_INT 110
50959: PUSH
50960: LD_INT 111
50962: PUSH
50963: LD_INT 112
50965: PUSH
50966: LD_INT 114
50968: PUSH
50969: LD_INT 116
50971: PUSH
50972: LD_INT 117
50974: PUSH
50975: LD_INT 118
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: ST_TO_ADDR
51000: GO 52683
51002: LD_INT 12
51004: DOUBLE
51005: EQUAL
51006: IFTRUE 51010
51008: GO 51230
51010: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51011: LD_ADDR_VAR 0 2
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: LD_INT 4
51027: PUSH
51028: LD_INT 5
51030: PUSH
51031: LD_INT 6
51033: PUSH
51034: LD_INT 7
51036: PUSH
51037: LD_INT 8
51039: PUSH
51040: LD_INT 9
51042: PUSH
51043: LD_INT 10
51045: PUSH
51046: LD_INT 11
51048: PUSH
51049: LD_INT 12
51051: PUSH
51052: LD_INT 13
51054: PUSH
51055: LD_INT 14
51057: PUSH
51058: LD_INT 15
51060: PUSH
51061: LD_INT 16
51063: PUSH
51064: LD_INT 17
51066: PUSH
51067: LD_INT 18
51069: PUSH
51070: LD_INT 19
51072: PUSH
51073: LD_INT 20
51075: PUSH
51076: LD_INT 21
51078: PUSH
51079: LD_INT 22
51081: PUSH
51082: LD_INT 23
51084: PUSH
51085: LD_INT 24
51087: PUSH
51088: LD_INT 25
51090: PUSH
51091: LD_INT 26
51093: PUSH
51094: LD_INT 27
51096: PUSH
51097: LD_INT 28
51099: PUSH
51100: LD_INT 30
51102: PUSH
51103: LD_INT 31
51105: PUSH
51106: LD_INT 32
51108: PUSH
51109: LD_INT 33
51111: PUSH
51112: LD_INT 34
51114: PUSH
51115: LD_INT 36
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 101
51156: PUSH
51157: LD_INT 102
51159: PUSH
51160: LD_INT 103
51162: PUSH
51163: LD_INT 104
51165: PUSH
51166: LD_INT 105
51168: PUSH
51169: LD_INT 106
51171: PUSH
51172: LD_INT 107
51174: PUSH
51175: LD_INT 108
51177: PUSH
51178: LD_INT 109
51180: PUSH
51181: LD_INT 110
51183: PUSH
51184: LD_INT 111
51186: PUSH
51187: LD_INT 112
51189: PUSH
51190: LD_INT 113
51192: PUSH
51193: LD_INT 114
51195: PUSH
51196: LD_INT 116
51198: PUSH
51199: LD_INT 117
51201: PUSH
51202: LD_INT 118
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: ST_TO_ADDR
51228: GO 52683
51230: LD_INT 13
51232: DOUBLE
51233: EQUAL
51234: IFTRUE 51238
51236: GO 51446
51238: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51239: LD_ADDR_VAR 0 2
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: LD_INT 2
51249: PUSH
51250: LD_INT 3
51252: PUSH
51253: LD_INT 4
51255: PUSH
51256: LD_INT 5
51258: PUSH
51259: LD_INT 8
51261: PUSH
51262: LD_INT 9
51264: PUSH
51265: LD_INT 10
51267: PUSH
51268: LD_INT 11
51270: PUSH
51271: LD_INT 12
51273: PUSH
51274: LD_INT 14
51276: PUSH
51277: LD_INT 15
51279: PUSH
51280: LD_INT 16
51282: PUSH
51283: LD_INT 17
51285: PUSH
51286: LD_INT 18
51288: PUSH
51289: LD_INT 19
51291: PUSH
51292: LD_INT 20
51294: PUSH
51295: LD_INT 21
51297: PUSH
51298: LD_INT 22
51300: PUSH
51301: LD_INT 23
51303: PUSH
51304: LD_INT 24
51306: PUSH
51307: LD_INT 25
51309: PUSH
51310: LD_INT 26
51312: PUSH
51313: LD_INT 27
51315: PUSH
51316: LD_INT 28
51318: PUSH
51319: LD_INT 30
51321: PUSH
51322: LD_INT 31
51324: PUSH
51325: LD_INT 32
51327: PUSH
51328: LD_INT 33
51330: PUSH
51331: LD_INT 34
51333: PUSH
51334: LD_INT 36
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 101
51372: PUSH
51373: LD_INT 102
51375: PUSH
51376: LD_INT 103
51378: PUSH
51379: LD_INT 104
51381: PUSH
51382: LD_INT 105
51384: PUSH
51385: LD_INT 106
51387: PUSH
51388: LD_INT 107
51390: PUSH
51391: LD_INT 108
51393: PUSH
51394: LD_INT 109
51396: PUSH
51397: LD_INT 110
51399: PUSH
51400: LD_INT 111
51402: PUSH
51403: LD_INT 112
51405: PUSH
51406: LD_INT 113
51408: PUSH
51409: LD_INT 114
51411: PUSH
51412: LD_INT 116
51414: PUSH
51415: LD_INT 117
51417: PUSH
51418: LD_INT 118
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: ST_TO_ADDR
51444: GO 52683
51446: LD_INT 14
51448: DOUBLE
51449: EQUAL
51450: IFTRUE 51454
51452: GO 51678
51454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51455: LD_ADDR_VAR 0 2
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 3
51468: PUSH
51469: LD_INT 4
51471: PUSH
51472: LD_INT 5
51474: PUSH
51475: LD_INT 6
51477: PUSH
51478: LD_INT 7
51480: PUSH
51481: LD_INT 8
51483: PUSH
51484: LD_INT 9
51486: PUSH
51487: LD_INT 10
51489: PUSH
51490: LD_INT 11
51492: PUSH
51493: LD_INT 12
51495: PUSH
51496: LD_INT 13
51498: PUSH
51499: LD_INT 14
51501: PUSH
51502: LD_INT 15
51504: PUSH
51505: LD_INT 16
51507: PUSH
51508: LD_INT 17
51510: PUSH
51511: LD_INT 18
51513: PUSH
51514: LD_INT 19
51516: PUSH
51517: LD_INT 20
51519: PUSH
51520: LD_INT 21
51522: PUSH
51523: LD_INT 22
51525: PUSH
51526: LD_INT 23
51528: PUSH
51529: LD_INT 24
51531: PUSH
51532: LD_INT 25
51534: PUSH
51535: LD_INT 26
51537: PUSH
51538: LD_INT 27
51540: PUSH
51541: LD_INT 28
51543: PUSH
51544: LD_INT 29
51546: PUSH
51547: LD_INT 30
51549: PUSH
51550: LD_INT 31
51552: PUSH
51553: LD_INT 32
51555: PUSH
51556: LD_INT 33
51558: PUSH
51559: LD_INT 34
51561: PUSH
51562: LD_INT 36
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 101
51604: PUSH
51605: LD_INT 102
51607: PUSH
51608: LD_INT 103
51610: PUSH
51611: LD_INT 104
51613: PUSH
51614: LD_INT 105
51616: PUSH
51617: LD_INT 106
51619: PUSH
51620: LD_INT 107
51622: PUSH
51623: LD_INT 108
51625: PUSH
51626: LD_INT 109
51628: PUSH
51629: LD_INT 110
51631: PUSH
51632: LD_INT 111
51634: PUSH
51635: LD_INT 112
51637: PUSH
51638: LD_INT 113
51640: PUSH
51641: LD_INT 114
51643: PUSH
51644: LD_INT 116
51646: PUSH
51647: LD_INT 117
51649: PUSH
51650: LD_INT 118
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: ST_TO_ADDR
51676: GO 52683
51678: LD_INT 15
51680: DOUBLE
51681: EQUAL
51682: IFTRUE 51686
51684: GO 51910
51686: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51687: LD_ADDR_VAR 0 2
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: LD_INT 3
51700: PUSH
51701: LD_INT 4
51703: PUSH
51704: LD_INT 5
51706: PUSH
51707: LD_INT 6
51709: PUSH
51710: LD_INT 7
51712: PUSH
51713: LD_INT 8
51715: PUSH
51716: LD_INT 9
51718: PUSH
51719: LD_INT 10
51721: PUSH
51722: LD_INT 11
51724: PUSH
51725: LD_INT 12
51727: PUSH
51728: LD_INT 13
51730: PUSH
51731: LD_INT 14
51733: PUSH
51734: LD_INT 15
51736: PUSH
51737: LD_INT 16
51739: PUSH
51740: LD_INT 17
51742: PUSH
51743: LD_INT 18
51745: PUSH
51746: LD_INT 19
51748: PUSH
51749: LD_INT 20
51751: PUSH
51752: LD_INT 21
51754: PUSH
51755: LD_INT 22
51757: PUSH
51758: LD_INT 23
51760: PUSH
51761: LD_INT 24
51763: PUSH
51764: LD_INT 25
51766: PUSH
51767: LD_INT 26
51769: PUSH
51770: LD_INT 27
51772: PUSH
51773: LD_INT 28
51775: PUSH
51776: LD_INT 29
51778: PUSH
51779: LD_INT 30
51781: PUSH
51782: LD_INT 31
51784: PUSH
51785: LD_INT 32
51787: PUSH
51788: LD_INT 33
51790: PUSH
51791: LD_INT 34
51793: PUSH
51794: LD_INT 36
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 101
51836: PUSH
51837: LD_INT 102
51839: PUSH
51840: LD_INT 103
51842: PUSH
51843: LD_INT 104
51845: PUSH
51846: LD_INT 105
51848: PUSH
51849: LD_INT 106
51851: PUSH
51852: LD_INT 107
51854: PUSH
51855: LD_INT 108
51857: PUSH
51858: LD_INT 109
51860: PUSH
51861: LD_INT 110
51863: PUSH
51864: LD_INT 111
51866: PUSH
51867: LD_INT 112
51869: PUSH
51870: LD_INT 113
51872: PUSH
51873: LD_INT 114
51875: PUSH
51876: LD_INT 116
51878: PUSH
51879: LD_INT 117
51881: PUSH
51882: LD_INT 118
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: ST_TO_ADDR
51908: GO 52683
51910: LD_INT 16
51912: DOUBLE
51913: EQUAL
51914: IFTRUE 51918
51916: GO 52054
51918: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
51919: LD_ADDR_VAR 0 2
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: LD_INT 4
51929: PUSH
51930: LD_INT 5
51932: PUSH
51933: LD_INT 7
51935: PUSH
51936: LD_INT 11
51938: PUSH
51939: LD_INT 12
51941: PUSH
51942: LD_INT 15
51944: PUSH
51945: LD_INT 16
51947: PUSH
51948: LD_INT 20
51950: PUSH
51951: LD_INT 21
51953: PUSH
51954: LD_INT 22
51956: PUSH
51957: LD_INT 23
51959: PUSH
51960: LD_INT 25
51962: PUSH
51963: LD_INT 26
51965: PUSH
51966: LD_INT 30
51968: PUSH
51969: LD_INT 31
51971: PUSH
51972: LD_INT 32
51974: PUSH
51975: LD_INT 33
51977: PUSH
51978: LD_INT 34
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 101
52004: PUSH
52005: LD_INT 102
52007: PUSH
52008: LD_INT 103
52010: PUSH
52011: LD_INT 106
52013: PUSH
52014: LD_INT 108
52016: PUSH
52017: LD_INT 112
52019: PUSH
52020: LD_INT 113
52022: PUSH
52023: LD_INT 114
52025: PUSH
52026: LD_INT 116
52028: PUSH
52029: LD_INT 117
52031: PUSH
52032: LD_INT 118
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: ST_TO_ADDR
52052: GO 52683
52054: LD_INT 17
52056: DOUBLE
52057: EQUAL
52058: IFTRUE 52062
52060: GO 52286
52062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52063: LD_ADDR_VAR 0 2
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: LD_INT 4
52079: PUSH
52080: LD_INT 5
52082: PUSH
52083: LD_INT 6
52085: PUSH
52086: LD_INT 7
52088: PUSH
52089: LD_INT 8
52091: PUSH
52092: LD_INT 9
52094: PUSH
52095: LD_INT 10
52097: PUSH
52098: LD_INT 11
52100: PUSH
52101: LD_INT 12
52103: PUSH
52104: LD_INT 13
52106: PUSH
52107: LD_INT 14
52109: PUSH
52110: LD_INT 15
52112: PUSH
52113: LD_INT 16
52115: PUSH
52116: LD_INT 17
52118: PUSH
52119: LD_INT 18
52121: PUSH
52122: LD_INT 19
52124: PUSH
52125: LD_INT 20
52127: PUSH
52128: LD_INT 21
52130: PUSH
52131: LD_INT 22
52133: PUSH
52134: LD_INT 23
52136: PUSH
52137: LD_INT 24
52139: PUSH
52140: LD_INT 25
52142: PUSH
52143: LD_INT 26
52145: PUSH
52146: LD_INT 27
52148: PUSH
52149: LD_INT 28
52151: PUSH
52152: LD_INT 29
52154: PUSH
52155: LD_INT 30
52157: PUSH
52158: LD_INT 31
52160: PUSH
52161: LD_INT 32
52163: PUSH
52164: LD_INT 33
52166: PUSH
52167: LD_INT 34
52169: PUSH
52170: LD_INT 36
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 101
52212: PUSH
52213: LD_INT 102
52215: PUSH
52216: LD_INT 103
52218: PUSH
52219: LD_INT 104
52221: PUSH
52222: LD_INT 105
52224: PUSH
52225: LD_INT 106
52227: PUSH
52228: LD_INT 107
52230: PUSH
52231: LD_INT 108
52233: PUSH
52234: LD_INT 109
52236: PUSH
52237: LD_INT 110
52239: PUSH
52240: LD_INT 111
52242: PUSH
52243: LD_INT 112
52245: PUSH
52246: LD_INT 113
52248: PUSH
52249: LD_INT 114
52251: PUSH
52252: LD_INT 116
52254: PUSH
52255: LD_INT 117
52257: PUSH
52258: LD_INT 118
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: ST_TO_ADDR
52284: GO 52683
52286: LD_INT 18
52288: DOUBLE
52289: EQUAL
52290: IFTRUE 52294
52292: GO 52442
52294: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52295: LD_ADDR_VAR 0 2
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 4
52305: PUSH
52306: LD_INT 5
52308: PUSH
52309: LD_INT 7
52311: PUSH
52312: LD_INT 11
52314: PUSH
52315: LD_INT 12
52317: PUSH
52318: LD_INT 15
52320: PUSH
52321: LD_INT 16
52323: PUSH
52324: LD_INT 20
52326: PUSH
52327: LD_INT 21
52329: PUSH
52330: LD_INT 22
52332: PUSH
52333: LD_INT 23
52335: PUSH
52336: LD_INT 25
52338: PUSH
52339: LD_INT 26
52341: PUSH
52342: LD_INT 30
52344: PUSH
52345: LD_INT 31
52347: PUSH
52348: LD_INT 32
52350: PUSH
52351: LD_INT 33
52353: PUSH
52354: LD_INT 34
52356: PUSH
52357: LD_INT 35
52359: PUSH
52360: LD_INT 36
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 101
52388: PUSH
52389: LD_INT 102
52391: PUSH
52392: LD_INT 103
52394: PUSH
52395: LD_INT 106
52397: PUSH
52398: LD_INT 108
52400: PUSH
52401: LD_INT 112
52403: PUSH
52404: LD_INT 113
52406: PUSH
52407: LD_INT 114
52409: PUSH
52410: LD_INT 115
52412: PUSH
52413: LD_INT 116
52415: PUSH
52416: LD_INT 117
52418: PUSH
52419: LD_INT 118
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: ST_TO_ADDR
52440: GO 52683
52442: LD_INT 19
52444: DOUBLE
52445: EQUAL
52446: IFTRUE 52450
52448: GO 52682
52450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52451: LD_ADDR_VAR 0 2
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: LD_INT 3
52464: PUSH
52465: LD_INT 4
52467: PUSH
52468: LD_INT 5
52470: PUSH
52471: LD_INT 6
52473: PUSH
52474: LD_INT 7
52476: PUSH
52477: LD_INT 8
52479: PUSH
52480: LD_INT 9
52482: PUSH
52483: LD_INT 10
52485: PUSH
52486: LD_INT 11
52488: PUSH
52489: LD_INT 12
52491: PUSH
52492: LD_INT 13
52494: PUSH
52495: LD_INT 14
52497: PUSH
52498: LD_INT 15
52500: PUSH
52501: LD_INT 16
52503: PUSH
52504: LD_INT 17
52506: PUSH
52507: LD_INT 18
52509: PUSH
52510: LD_INT 19
52512: PUSH
52513: LD_INT 20
52515: PUSH
52516: LD_INT 21
52518: PUSH
52519: LD_INT 22
52521: PUSH
52522: LD_INT 23
52524: PUSH
52525: LD_INT 24
52527: PUSH
52528: LD_INT 25
52530: PUSH
52531: LD_INT 26
52533: PUSH
52534: LD_INT 27
52536: PUSH
52537: LD_INT 28
52539: PUSH
52540: LD_INT 29
52542: PUSH
52543: LD_INT 30
52545: PUSH
52546: LD_INT 31
52548: PUSH
52549: LD_INT 32
52551: PUSH
52552: LD_INT 33
52554: PUSH
52555: LD_INT 34
52557: PUSH
52558: LD_INT 35
52560: PUSH
52561: LD_INT 36
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 101
52604: PUSH
52605: LD_INT 102
52607: PUSH
52608: LD_INT 103
52610: PUSH
52611: LD_INT 104
52613: PUSH
52614: LD_INT 105
52616: PUSH
52617: LD_INT 106
52619: PUSH
52620: LD_INT 107
52622: PUSH
52623: LD_INT 108
52625: PUSH
52626: LD_INT 109
52628: PUSH
52629: LD_INT 110
52631: PUSH
52632: LD_INT 111
52634: PUSH
52635: LD_INT 112
52637: PUSH
52638: LD_INT 113
52640: PUSH
52641: LD_INT 114
52643: PUSH
52644: LD_INT 115
52646: PUSH
52647: LD_INT 116
52649: PUSH
52650: LD_INT 117
52652: PUSH
52653: LD_INT 118
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: ST_TO_ADDR
52680: GO 52683
52682: POP
// end else
52683: GO 52914
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52685: LD_ADDR_VAR 0 2
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: LD_INT 3
52698: PUSH
52699: LD_INT 4
52701: PUSH
52702: LD_INT 5
52704: PUSH
52705: LD_INT 6
52707: PUSH
52708: LD_INT 7
52710: PUSH
52711: LD_INT 8
52713: PUSH
52714: LD_INT 9
52716: PUSH
52717: LD_INT 10
52719: PUSH
52720: LD_INT 11
52722: PUSH
52723: LD_INT 12
52725: PUSH
52726: LD_INT 13
52728: PUSH
52729: LD_INT 14
52731: PUSH
52732: LD_INT 15
52734: PUSH
52735: LD_INT 16
52737: PUSH
52738: LD_INT 17
52740: PUSH
52741: LD_INT 18
52743: PUSH
52744: LD_INT 19
52746: PUSH
52747: LD_INT 20
52749: PUSH
52750: LD_INT 21
52752: PUSH
52753: LD_INT 22
52755: PUSH
52756: LD_INT 23
52758: PUSH
52759: LD_INT 24
52761: PUSH
52762: LD_INT 25
52764: PUSH
52765: LD_INT 26
52767: PUSH
52768: LD_INT 27
52770: PUSH
52771: LD_INT 28
52773: PUSH
52774: LD_INT 29
52776: PUSH
52777: LD_INT 30
52779: PUSH
52780: LD_INT 31
52782: PUSH
52783: LD_INT 32
52785: PUSH
52786: LD_INT 33
52788: PUSH
52789: LD_INT 34
52791: PUSH
52792: LD_INT 35
52794: PUSH
52795: LD_INT 36
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 101
52838: PUSH
52839: LD_INT 102
52841: PUSH
52842: LD_INT 103
52844: PUSH
52845: LD_INT 104
52847: PUSH
52848: LD_INT 105
52850: PUSH
52851: LD_INT 106
52853: PUSH
52854: LD_INT 107
52856: PUSH
52857: LD_INT 108
52859: PUSH
52860: LD_INT 109
52862: PUSH
52863: LD_INT 110
52865: PUSH
52866: LD_INT 111
52868: PUSH
52869: LD_INT 112
52871: PUSH
52872: LD_INT 113
52874: PUSH
52875: LD_INT 114
52877: PUSH
52878: LD_INT 115
52880: PUSH
52881: LD_INT 116
52883: PUSH
52884: LD_INT 117
52886: PUSH
52887: LD_INT 118
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: ST_TO_ADDR
// if result then
52914: LD_VAR 0 2
52918: IFFALSE 53704
// begin normal :=  ;
52920: LD_ADDR_VAR 0 5
52924: PUSH
52925: LD_STRING 
52927: ST_TO_ADDR
// hardcore :=  ;
52928: LD_ADDR_VAR 0 6
52932: PUSH
52933: LD_STRING 
52935: ST_TO_ADDR
// active :=  ;
52936: LD_ADDR_VAR 0 7
52940: PUSH
52941: LD_STRING 
52943: ST_TO_ADDR
// for i = 1 to normalCounter do
52944: LD_ADDR_VAR 0 8
52948: PUSH
52949: DOUBLE
52950: LD_INT 1
52952: DEC
52953: ST_TO_ADDR
52954: LD_EXP 57
52958: PUSH
52959: FOR_TO
52960: IFFALSE 53061
// begin tmp := 0 ;
52962: LD_ADDR_VAR 0 3
52966: PUSH
52967: LD_STRING 0
52969: ST_TO_ADDR
// if result [ 1 ] then
52970: LD_VAR 0 2
52974: PUSH
52975: LD_INT 1
52977: ARRAY
52978: IFFALSE 53043
// if result [ 1 ] [ 1 ] = i then
52980: LD_VAR 0 2
52984: PUSH
52985: LD_INT 1
52987: ARRAY
52988: PUSH
52989: LD_INT 1
52991: ARRAY
52992: PUSH
52993: LD_VAR 0 8
52997: EQUAL
52998: IFFALSE 53043
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53000: LD_ADDR_VAR 0 2
53004: PUSH
53005: LD_VAR 0 2
53009: PPUSH
53010: LD_INT 1
53012: PPUSH
53013: LD_VAR 0 2
53017: PUSH
53018: LD_INT 1
53020: ARRAY
53021: PPUSH
53022: LD_INT 1
53024: PPUSH
53025: CALL_OW 3
53029: PPUSH
53030: CALL_OW 1
53034: ST_TO_ADDR
// tmp := 1 ;
53035: LD_ADDR_VAR 0 3
53039: PUSH
53040: LD_STRING 1
53042: ST_TO_ADDR
// end ; normal := normal & tmp ;
53043: LD_ADDR_VAR 0 5
53047: PUSH
53048: LD_VAR 0 5
53052: PUSH
53053: LD_VAR 0 3
53057: STR
53058: ST_TO_ADDR
// end ;
53059: GO 52959
53061: POP
53062: POP
// for i = 1 to hardcoreCounter do
53063: LD_ADDR_VAR 0 8
53067: PUSH
53068: DOUBLE
53069: LD_INT 1
53071: DEC
53072: ST_TO_ADDR
53073: LD_EXP 58
53077: PUSH
53078: FOR_TO
53079: IFFALSE 53184
// begin tmp := 0 ;
53081: LD_ADDR_VAR 0 3
53085: PUSH
53086: LD_STRING 0
53088: ST_TO_ADDR
// if result [ 2 ] then
53089: LD_VAR 0 2
53093: PUSH
53094: LD_INT 2
53096: ARRAY
53097: IFFALSE 53166
// if result [ 2 ] [ 1 ] = 100 + i then
53099: LD_VAR 0 2
53103: PUSH
53104: LD_INT 2
53106: ARRAY
53107: PUSH
53108: LD_INT 1
53110: ARRAY
53111: PUSH
53112: LD_INT 100
53114: PUSH
53115: LD_VAR 0 8
53119: PLUS
53120: EQUAL
53121: IFFALSE 53166
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53123: LD_ADDR_VAR 0 2
53127: PUSH
53128: LD_VAR 0 2
53132: PPUSH
53133: LD_INT 2
53135: PPUSH
53136: LD_VAR 0 2
53140: PUSH
53141: LD_INT 2
53143: ARRAY
53144: PPUSH
53145: LD_INT 1
53147: PPUSH
53148: CALL_OW 3
53152: PPUSH
53153: CALL_OW 1
53157: ST_TO_ADDR
// tmp := 1 ;
53158: LD_ADDR_VAR 0 3
53162: PUSH
53163: LD_STRING 1
53165: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53166: LD_ADDR_VAR 0 6
53170: PUSH
53171: LD_VAR 0 6
53175: PUSH
53176: LD_VAR 0 3
53180: STR
53181: ST_TO_ADDR
// end ;
53182: GO 53078
53184: POP
53185: POP
// if isGameLoad then
53186: LD_VAR 0 1
53190: IFFALSE 53665
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53192: LD_ADDR_VAR 0 4
53196: PUSH
53197: LD_EXP 61
53201: PUSH
53202: LD_EXP 60
53206: PUSH
53207: LD_EXP 62
53211: PUSH
53212: LD_EXP 59
53216: PUSH
53217: LD_EXP 63
53221: PUSH
53222: LD_EXP 64
53226: PUSH
53227: LD_EXP 65
53231: PUSH
53232: LD_EXP 66
53236: PUSH
53237: LD_EXP 67
53241: PUSH
53242: LD_EXP 68
53246: PUSH
53247: LD_EXP 69
53251: PUSH
53252: LD_EXP 70
53256: PUSH
53257: LD_EXP 71
53261: PUSH
53262: LD_EXP 72
53266: PUSH
53267: LD_EXP 80
53271: PUSH
53272: LD_EXP 81
53276: PUSH
53277: LD_EXP 82
53281: PUSH
53282: LD_EXP 83
53286: PUSH
53287: LD_EXP 85
53291: PUSH
53292: LD_EXP 86
53296: PUSH
53297: LD_EXP 87
53301: PUSH
53302: LD_EXP 90
53306: PUSH
53307: LD_EXP 92
53311: PUSH
53312: LD_EXP 93
53316: PUSH
53317: LD_EXP 94
53321: PUSH
53322: LD_EXP 96
53326: PUSH
53327: LD_EXP 97
53331: PUSH
53332: LD_EXP 100
53336: PUSH
53337: LD_EXP 101
53341: PUSH
53342: LD_EXP 102
53346: PUSH
53347: LD_EXP 103
53351: PUSH
53352: LD_EXP 104
53356: PUSH
53357: LD_EXP 105
53361: PUSH
53362: LD_EXP 106
53366: PUSH
53367: LD_EXP 107
53371: PUSH
53372: LD_EXP 108
53376: PUSH
53377: LD_EXP 73
53381: PUSH
53382: LD_EXP 74
53386: PUSH
53387: LD_EXP 77
53391: PUSH
53392: LD_EXP 78
53396: PUSH
53397: LD_EXP 79
53401: PUSH
53402: LD_EXP 75
53406: PUSH
53407: LD_EXP 76
53411: PUSH
53412: LD_EXP 84
53416: PUSH
53417: LD_EXP 88
53421: PUSH
53422: LD_EXP 89
53426: PUSH
53427: LD_EXP 91
53431: PUSH
53432: LD_EXP 95
53436: PUSH
53437: LD_EXP 98
53441: PUSH
53442: LD_EXP 99
53446: PUSH
53447: LD_EXP 109
53451: PUSH
53452: LD_EXP 110
53456: PUSH
53457: LD_EXP 111
53461: PUSH
53462: LD_EXP 112
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: ST_TO_ADDR
// tmp :=  ;
53523: LD_ADDR_VAR 0 3
53527: PUSH
53528: LD_STRING 
53530: ST_TO_ADDR
// for i = 1 to normalCounter do
53531: LD_ADDR_VAR 0 8
53535: PUSH
53536: DOUBLE
53537: LD_INT 1
53539: DEC
53540: ST_TO_ADDR
53541: LD_EXP 57
53545: PUSH
53546: FOR_TO
53547: IFFALSE 53583
// begin if flags [ i ] then
53549: LD_VAR 0 4
53553: PUSH
53554: LD_VAR 0 8
53558: ARRAY
53559: IFFALSE 53581
// tmp := tmp & i & ; ;
53561: LD_ADDR_VAR 0 3
53565: PUSH
53566: LD_VAR 0 3
53570: PUSH
53571: LD_VAR 0 8
53575: STR
53576: PUSH
53577: LD_STRING ;
53579: STR
53580: ST_TO_ADDR
// end ;
53581: GO 53546
53583: POP
53584: POP
// for i = 1 to hardcoreCounter do
53585: LD_ADDR_VAR 0 8
53589: PUSH
53590: DOUBLE
53591: LD_INT 1
53593: DEC
53594: ST_TO_ADDR
53595: LD_EXP 58
53599: PUSH
53600: FOR_TO
53601: IFFALSE 53647
// begin if flags [ normalCounter + i ] then
53603: LD_VAR 0 4
53607: PUSH
53608: LD_EXP 57
53612: PUSH
53613: LD_VAR 0 8
53617: PLUS
53618: ARRAY
53619: IFFALSE 53645
// tmp := tmp & ( 100 + i ) & ; ;
53621: LD_ADDR_VAR 0 3
53625: PUSH
53626: LD_VAR 0 3
53630: PUSH
53631: LD_INT 100
53633: PUSH
53634: LD_VAR 0 8
53638: PLUS
53639: STR
53640: PUSH
53641: LD_STRING ;
53643: STR
53644: ST_TO_ADDR
// end ;
53645: GO 53600
53647: POP
53648: POP
// if tmp then
53649: LD_VAR 0 3
53653: IFFALSE 53665
// active := tmp ;
53655: LD_ADDR_VAR 0 7
53659: PUSH
53660: LD_VAR 0 3
53664: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53665: LD_STRING getStreamItemsFromMission("
53667: PUSH
53668: LD_VAR 0 5
53672: STR
53673: PUSH
53674: LD_STRING ","
53676: STR
53677: PUSH
53678: LD_VAR 0 6
53682: STR
53683: PUSH
53684: LD_STRING ","
53686: STR
53687: PUSH
53688: LD_VAR 0 7
53692: STR
53693: PUSH
53694: LD_STRING ")
53696: STR
53697: PPUSH
53698: CALL_OW 559
// end else
53702: GO 53711
// ToLua ( getStreamItemsFromMission("","","") ) ;
53704: LD_STRING getStreamItemsFromMission("","","")
53706: PPUSH
53707: CALL_OW 559
// end ;
53711: LD_VAR 0 2
53715: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53716: LD_EXP 56
53720: PUSH
53721: LD_EXP 61
53725: AND
53726: IFFALSE 53850
53728: GO 53730
53730: DISABLE
53731: LD_INT 0
53733: PPUSH
53734: PPUSH
// begin enable ;
53735: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53736: LD_ADDR_VAR 0 2
53740: PUSH
53741: LD_INT 22
53743: PUSH
53744: LD_OWVAR 2
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: LD_INT 34
53758: PUSH
53759: LD_INT 7
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 34
53768: PUSH
53769: LD_INT 45
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 34
53778: PUSH
53779: LD_INT 28
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 34
53788: PUSH
53789: LD_INT 47
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PPUSH
53807: CALL_OW 69
53811: ST_TO_ADDR
// if not tmp then
53812: LD_VAR 0 2
53816: NOT
53817: IFFALSE 53821
// exit ;
53819: GO 53850
// for i in tmp do
53821: LD_ADDR_VAR 0 1
53825: PUSH
53826: LD_VAR 0 2
53830: PUSH
53831: FOR_IN
53832: IFFALSE 53848
// begin SetLives ( i , 0 ) ;
53834: LD_VAR 0 1
53838: PPUSH
53839: LD_INT 0
53841: PPUSH
53842: CALL_OW 234
// end ;
53846: GO 53831
53848: POP
53849: POP
// end ;
53850: PPOPN 2
53852: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
53853: LD_EXP 56
53857: PUSH
53858: LD_EXP 62
53862: AND
53863: IFFALSE 53947
53865: GO 53867
53867: DISABLE
53868: LD_INT 0
53870: PPUSH
53871: PPUSH
// begin enable ;
53872: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
53873: LD_ADDR_VAR 0 2
53877: PUSH
53878: LD_INT 22
53880: PUSH
53881: LD_OWVAR 2
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 32
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PPUSH
53904: CALL_OW 69
53908: ST_TO_ADDR
// if not tmp then
53909: LD_VAR 0 2
53913: NOT
53914: IFFALSE 53918
// exit ;
53916: GO 53947
// for i in tmp do
53918: LD_ADDR_VAR 0 1
53922: PUSH
53923: LD_VAR 0 2
53927: PUSH
53928: FOR_IN
53929: IFFALSE 53945
// begin SetLives ( i , 0 ) ;
53931: LD_VAR 0 1
53935: PPUSH
53936: LD_INT 0
53938: PPUSH
53939: CALL_OW 234
// end ;
53943: GO 53928
53945: POP
53946: POP
// end ;
53947: PPOPN 2
53949: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
53950: LD_EXP 56
53954: PUSH
53955: LD_EXP 59
53959: AND
53960: IFFALSE 54053
53962: GO 53964
53964: DISABLE
53965: LD_INT 0
53967: PPUSH
// begin enable ;
53968: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
53969: LD_ADDR_VAR 0 1
53973: PUSH
53974: LD_INT 22
53976: PUSH
53977: LD_OWVAR 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: LD_INT 25
53991: PUSH
53992: LD_INT 5
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 25
54001: PUSH
54002: LD_INT 9
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 25
54011: PUSH
54012: LD_INT 8
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PPUSH
54029: CALL_OW 69
54033: PUSH
54034: FOR_IN
54035: IFFALSE 54051
// begin SetClass ( i , 1 ) ;
54037: LD_VAR 0 1
54041: PPUSH
54042: LD_INT 1
54044: PPUSH
54045: CALL_OW 336
// end ;
54049: GO 54034
54051: POP
54052: POP
// end ;
54053: PPOPN 1
54055: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54056: LD_EXP 56
54060: PUSH
54061: LD_EXP 60
54065: AND
54066: PUSH
54067: LD_OWVAR 65
54071: PUSH
54072: LD_INT 7
54074: LESS
54075: AND
54076: IFFALSE 54090
54078: GO 54080
54080: DISABLE
// begin enable ;
54081: ENABLE
// game_speed := 7 ;
54082: LD_ADDR_OWVAR 65
54086: PUSH
54087: LD_INT 7
54089: ST_TO_ADDR
// end ;
54090: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54091: LD_EXP 56
54095: PUSH
54096: LD_EXP 63
54100: AND
54101: IFFALSE 54303
54103: GO 54105
54105: DISABLE
54106: LD_INT 0
54108: PPUSH
54109: PPUSH
54110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54111: LD_ADDR_VAR 0 3
54115: PUSH
54116: LD_INT 81
54118: PUSH
54119: LD_OWVAR 2
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 21
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PPUSH
54142: CALL_OW 69
54146: ST_TO_ADDR
// if not tmp then
54147: LD_VAR 0 3
54151: NOT
54152: IFFALSE 54156
// exit ;
54154: GO 54303
// if tmp > 5 then
54156: LD_VAR 0 3
54160: PUSH
54161: LD_INT 5
54163: GREATER
54164: IFFALSE 54176
// k := 5 else
54166: LD_ADDR_VAR 0 2
54170: PUSH
54171: LD_INT 5
54173: ST_TO_ADDR
54174: GO 54186
// k := tmp ;
54176: LD_ADDR_VAR 0 2
54180: PUSH
54181: LD_VAR 0 3
54185: ST_TO_ADDR
// for i := 1 to k do
54186: LD_ADDR_VAR 0 1
54190: PUSH
54191: DOUBLE
54192: LD_INT 1
54194: DEC
54195: ST_TO_ADDR
54196: LD_VAR 0 2
54200: PUSH
54201: FOR_TO
54202: IFFALSE 54301
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54204: LD_VAR 0 3
54208: PUSH
54209: LD_VAR 0 1
54213: ARRAY
54214: PPUSH
54215: LD_VAR 0 1
54219: PUSH
54220: LD_INT 4
54222: MOD
54223: PUSH
54224: LD_INT 1
54226: PLUS
54227: PPUSH
54228: CALL_OW 259
54232: PUSH
54233: LD_INT 10
54235: LESS
54236: IFFALSE 54299
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54238: LD_VAR 0 3
54242: PUSH
54243: LD_VAR 0 1
54247: ARRAY
54248: PPUSH
54249: LD_VAR 0 1
54253: PUSH
54254: LD_INT 4
54256: MOD
54257: PUSH
54258: LD_INT 1
54260: PLUS
54261: PPUSH
54262: LD_VAR 0 3
54266: PUSH
54267: LD_VAR 0 1
54271: ARRAY
54272: PPUSH
54273: LD_VAR 0 1
54277: PUSH
54278: LD_INT 4
54280: MOD
54281: PUSH
54282: LD_INT 1
54284: PLUS
54285: PPUSH
54286: CALL_OW 259
54290: PUSH
54291: LD_INT 1
54293: PLUS
54294: PPUSH
54295: CALL_OW 237
54299: GO 54201
54301: POP
54302: POP
// end ;
54303: PPOPN 3
54305: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54306: LD_EXP 56
54310: PUSH
54311: LD_EXP 64
54315: AND
54316: IFFALSE 54336
54318: GO 54320
54320: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54321: LD_INT 4
54323: PPUSH
54324: LD_OWVAR 2
54328: PPUSH
54329: LD_INT 0
54331: PPUSH
54332: CALL_OW 324
54336: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54337: LD_EXP 56
54341: PUSH
54342: LD_EXP 93
54346: AND
54347: IFFALSE 54367
54349: GO 54351
54351: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54352: LD_INT 19
54354: PPUSH
54355: LD_OWVAR 2
54359: PPUSH
54360: LD_INT 0
54362: PPUSH
54363: CALL_OW 324
54367: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54368: LD_EXP 56
54372: PUSH
54373: LD_EXP 65
54377: AND
54378: IFFALSE 54480
54380: GO 54382
54382: DISABLE
54383: LD_INT 0
54385: PPUSH
54386: PPUSH
// begin enable ;
54387: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54388: LD_ADDR_VAR 0 2
54392: PUSH
54393: LD_INT 22
54395: PUSH
54396: LD_OWVAR 2
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: LD_INT 34
54410: PUSH
54411: LD_INT 11
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 34
54420: PUSH
54421: LD_INT 30
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: LIST
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PPUSH
54437: CALL_OW 69
54441: ST_TO_ADDR
// if not tmp then
54442: LD_VAR 0 2
54446: NOT
54447: IFFALSE 54451
// exit ;
54449: GO 54480
// for i in tmp do
54451: LD_ADDR_VAR 0 1
54455: PUSH
54456: LD_VAR 0 2
54460: PUSH
54461: FOR_IN
54462: IFFALSE 54478
// begin SetLives ( i , 0 ) ;
54464: LD_VAR 0 1
54468: PPUSH
54469: LD_INT 0
54471: PPUSH
54472: CALL_OW 234
// end ;
54476: GO 54461
54478: POP
54479: POP
// end ;
54480: PPOPN 2
54482: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54483: LD_EXP 56
54487: PUSH
54488: LD_EXP 66
54492: AND
54493: IFFALSE 54513
54495: GO 54497
54497: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54498: LD_INT 32
54500: PPUSH
54501: LD_OWVAR 2
54505: PPUSH
54506: LD_INT 0
54508: PPUSH
54509: CALL_OW 324
54513: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54514: LD_EXP 56
54518: PUSH
54519: LD_EXP 67
54523: AND
54524: IFFALSE 54705
54526: GO 54528
54528: DISABLE
54529: LD_INT 0
54531: PPUSH
54532: PPUSH
54533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54534: LD_ADDR_VAR 0 2
54538: PUSH
54539: LD_INT 22
54541: PUSH
54542: LD_OWVAR 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 33
54553: PUSH
54554: LD_INT 3
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PPUSH
54565: CALL_OW 69
54569: ST_TO_ADDR
// if not tmp then
54570: LD_VAR 0 2
54574: NOT
54575: IFFALSE 54579
// exit ;
54577: GO 54705
// side := 0 ;
54579: LD_ADDR_VAR 0 3
54583: PUSH
54584: LD_INT 0
54586: ST_TO_ADDR
// for i := 1 to 8 do
54587: LD_ADDR_VAR 0 1
54591: PUSH
54592: DOUBLE
54593: LD_INT 1
54595: DEC
54596: ST_TO_ADDR
54597: LD_INT 8
54599: PUSH
54600: FOR_TO
54601: IFFALSE 54649
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54603: LD_OWVAR 2
54607: PUSH
54608: LD_VAR 0 1
54612: NONEQUAL
54613: PUSH
54614: LD_OWVAR 2
54618: PPUSH
54619: LD_VAR 0 1
54623: PPUSH
54624: CALL_OW 81
54628: PUSH
54629: LD_INT 2
54631: EQUAL
54632: AND
54633: IFFALSE 54647
// begin side := i ;
54635: LD_ADDR_VAR 0 3
54639: PUSH
54640: LD_VAR 0 1
54644: ST_TO_ADDR
// break ;
54645: GO 54649
// end ;
54647: GO 54600
54649: POP
54650: POP
// if not side then
54651: LD_VAR 0 3
54655: NOT
54656: IFFALSE 54660
// exit ;
54658: GO 54705
// for i := 1 to tmp do
54660: LD_ADDR_VAR 0 1
54664: PUSH
54665: DOUBLE
54666: LD_INT 1
54668: DEC
54669: ST_TO_ADDR
54670: LD_VAR 0 2
54674: PUSH
54675: FOR_TO
54676: IFFALSE 54703
// if Prob ( 60 ) then
54678: LD_INT 60
54680: PPUSH
54681: CALL_OW 13
54685: IFFALSE 54701
// SetSide ( i , side ) ;
54687: LD_VAR 0 1
54691: PPUSH
54692: LD_VAR 0 3
54696: PPUSH
54697: CALL_OW 235
54701: GO 54675
54703: POP
54704: POP
// end ;
54705: PPOPN 3
54707: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54708: LD_EXP 56
54712: PUSH
54713: LD_EXP 69
54717: AND
54718: IFFALSE 54837
54720: GO 54722
54722: DISABLE
54723: LD_INT 0
54725: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54726: LD_ADDR_VAR 0 1
54730: PUSH
54731: LD_INT 22
54733: PUSH
54734: LD_OWVAR 2
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 21
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: LD_INT 23
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: LIST
54774: PPUSH
54775: CALL_OW 69
54779: PUSH
54780: FOR_IN
54781: IFFALSE 54835
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54783: LD_VAR 0 1
54787: PPUSH
54788: CALL_OW 257
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: LD_INT 4
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: IN
54811: IFFALSE 54833
// SetClass ( un , rand ( 1 , 4 ) ) ;
54813: LD_VAR 0 1
54817: PPUSH
54818: LD_INT 1
54820: PPUSH
54821: LD_INT 4
54823: PPUSH
54824: CALL_OW 12
54828: PPUSH
54829: CALL_OW 336
54833: GO 54780
54835: POP
54836: POP
// end ;
54837: PPOPN 1
54839: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
54840: LD_EXP 56
54844: PUSH
54845: LD_EXP 68
54849: AND
54850: IFFALSE 54929
54852: GO 54854
54854: DISABLE
54855: LD_INT 0
54857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54858: LD_ADDR_VAR 0 1
54862: PUSH
54863: LD_INT 22
54865: PUSH
54866: LD_OWVAR 2
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 21
54877: PUSH
54878: LD_INT 3
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PPUSH
54889: CALL_OW 69
54893: ST_TO_ADDR
// if not tmp then
54894: LD_VAR 0 1
54898: NOT
54899: IFFALSE 54903
// exit ;
54901: GO 54929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
54903: LD_VAR 0 1
54907: PUSH
54908: LD_INT 1
54910: PPUSH
54911: LD_VAR 0 1
54915: PPUSH
54916: CALL_OW 12
54920: ARRAY
54921: PPUSH
54922: LD_INT 100
54924: PPUSH
54925: CALL_OW 234
// end ;
54929: PPOPN 1
54931: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
54932: LD_EXP 56
54936: PUSH
54937: LD_EXP 70
54941: AND
54942: IFFALSE 55040
54944: GO 54946
54946: DISABLE
54947: LD_INT 0
54949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54950: LD_ADDR_VAR 0 1
54954: PUSH
54955: LD_INT 22
54957: PUSH
54958: LD_OWVAR 2
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 21
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PPUSH
54981: CALL_OW 69
54985: ST_TO_ADDR
// if not tmp then
54986: LD_VAR 0 1
54990: NOT
54991: IFFALSE 54995
// exit ;
54993: GO 55040
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54995: LD_VAR 0 1
54999: PUSH
55000: LD_INT 1
55002: PPUSH
55003: LD_VAR 0 1
55007: PPUSH
55008: CALL_OW 12
55012: ARRAY
55013: PPUSH
55014: LD_INT 1
55016: PPUSH
55017: LD_INT 4
55019: PPUSH
55020: CALL_OW 12
55024: PPUSH
55025: LD_INT 3000
55027: PPUSH
55028: LD_INT 9000
55030: PPUSH
55031: CALL_OW 12
55035: PPUSH
55036: CALL_OW 492
// end ;
55040: PPOPN 1
55042: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55043: LD_EXP 56
55047: PUSH
55048: LD_EXP 71
55052: AND
55053: IFFALSE 55073
55055: GO 55057
55057: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55058: LD_INT 1
55060: PPUSH
55061: LD_OWVAR 2
55065: PPUSH
55066: LD_INT 0
55068: PPUSH
55069: CALL_OW 324
55073: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55074: LD_EXP 56
55078: PUSH
55079: LD_EXP 72
55083: AND
55084: IFFALSE 55167
55086: GO 55088
55088: DISABLE
55089: LD_INT 0
55091: PPUSH
55092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55093: LD_ADDR_VAR 0 2
55097: PUSH
55098: LD_INT 22
55100: PUSH
55101: LD_OWVAR 2
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 21
55112: PUSH
55113: LD_INT 3
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PPUSH
55124: CALL_OW 69
55128: ST_TO_ADDR
// if not tmp then
55129: LD_VAR 0 2
55133: NOT
55134: IFFALSE 55138
// exit ;
55136: GO 55167
// for i in tmp do
55138: LD_ADDR_VAR 0 1
55142: PUSH
55143: LD_VAR 0 2
55147: PUSH
55148: FOR_IN
55149: IFFALSE 55165
// SetBLevel ( i , 10 ) ;
55151: LD_VAR 0 1
55155: PPUSH
55156: LD_INT 10
55158: PPUSH
55159: CALL_OW 241
55163: GO 55148
55165: POP
55166: POP
// end ;
55167: PPOPN 2
55169: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55170: LD_EXP 56
55174: PUSH
55175: LD_EXP 73
55179: AND
55180: IFFALSE 55291
55182: GO 55184
55184: DISABLE
55185: LD_INT 0
55187: PPUSH
55188: PPUSH
55189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55190: LD_ADDR_VAR 0 3
55194: PUSH
55195: LD_INT 22
55197: PUSH
55198: LD_OWVAR 2
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 25
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PPUSH
55221: CALL_OW 69
55225: ST_TO_ADDR
// if not tmp then
55226: LD_VAR 0 3
55230: NOT
55231: IFFALSE 55235
// exit ;
55233: GO 55291
// un := tmp [ rand ( 1 , tmp ) ] ;
55235: LD_ADDR_VAR 0 2
55239: PUSH
55240: LD_VAR 0 3
55244: PUSH
55245: LD_INT 1
55247: PPUSH
55248: LD_VAR 0 3
55252: PPUSH
55253: CALL_OW 12
55257: ARRAY
55258: ST_TO_ADDR
// if Crawls ( un ) then
55259: LD_VAR 0 2
55263: PPUSH
55264: CALL_OW 318
55268: IFFALSE 55279
// ComWalk ( un ) ;
55270: LD_VAR 0 2
55274: PPUSH
55275: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55279: LD_VAR 0 2
55283: PPUSH
55284: LD_INT 5
55286: PPUSH
55287: CALL_OW 336
// end ;
55291: PPOPN 3
55293: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55294: LD_EXP 56
55298: PUSH
55299: LD_EXP 74
55303: AND
55304: PUSH
55305: LD_OWVAR 67
55309: PUSH
55310: LD_INT 4
55312: LESS
55313: AND
55314: IFFALSE 55333
55316: GO 55318
55318: DISABLE
// begin Difficulty := Difficulty + 1 ;
55319: LD_ADDR_OWVAR 67
55323: PUSH
55324: LD_OWVAR 67
55328: PUSH
55329: LD_INT 1
55331: PLUS
55332: ST_TO_ADDR
// end ;
55333: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55334: LD_EXP 56
55338: PUSH
55339: LD_EXP 75
55343: AND
55344: IFFALSE 55447
55346: GO 55348
55348: DISABLE
55349: LD_INT 0
55351: PPUSH
// begin for i := 1 to 5 do
55352: LD_ADDR_VAR 0 1
55356: PUSH
55357: DOUBLE
55358: LD_INT 1
55360: DEC
55361: ST_TO_ADDR
55362: LD_INT 5
55364: PUSH
55365: FOR_TO
55366: IFFALSE 55445
// begin uc_nation := nation_nature ;
55368: LD_ADDR_OWVAR 21
55372: PUSH
55373: LD_INT 0
55375: ST_TO_ADDR
// uc_side := 0 ;
55376: LD_ADDR_OWVAR 20
55380: PUSH
55381: LD_INT 0
55383: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55384: LD_ADDR_OWVAR 29
55388: PUSH
55389: LD_INT 12
55391: PUSH
55392: LD_INT 12
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: ST_TO_ADDR
// hc_agressivity := 20 ;
55399: LD_ADDR_OWVAR 35
55403: PUSH
55404: LD_INT 20
55406: ST_TO_ADDR
// hc_class := class_tiger ;
55407: LD_ADDR_OWVAR 28
55411: PUSH
55412: LD_INT 14
55414: ST_TO_ADDR
// hc_gallery :=  ;
55415: LD_ADDR_OWVAR 33
55419: PUSH
55420: LD_STRING 
55422: ST_TO_ADDR
// hc_name :=  ;
55423: LD_ADDR_OWVAR 26
55427: PUSH
55428: LD_STRING 
55430: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55431: CALL_OW 44
55435: PPUSH
55436: LD_INT 0
55438: PPUSH
55439: CALL_OW 51
// end ;
55443: GO 55365
55445: POP
55446: POP
// end ;
55447: PPOPN 1
55449: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55450: LD_EXP 56
55454: PUSH
55455: LD_EXP 76
55459: AND
55460: IFFALSE 55469
55462: GO 55464
55464: DISABLE
// StreamSibBomb ;
55465: CALL 55470 0 0
55469: END
// export function StreamSibBomb ; var i , x , y ; begin
55470: LD_INT 0
55472: PPUSH
55473: PPUSH
55474: PPUSH
55475: PPUSH
// result := false ;
55476: LD_ADDR_VAR 0 1
55480: PUSH
55481: LD_INT 0
55483: ST_TO_ADDR
// for i := 1 to 16 do
55484: LD_ADDR_VAR 0 2
55488: PUSH
55489: DOUBLE
55490: LD_INT 1
55492: DEC
55493: ST_TO_ADDR
55494: LD_INT 16
55496: PUSH
55497: FOR_TO
55498: IFFALSE 55697
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55500: LD_ADDR_VAR 0 3
55504: PUSH
55505: LD_INT 10
55507: PUSH
55508: LD_INT 20
55510: PUSH
55511: LD_INT 30
55513: PUSH
55514: LD_INT 40
55516: PUSH
55517: LD_INT 50
55519: PUSH
55520: LD_INT 60
55522: PUSH
55523: LD_INT 70
55525: PUSH
55526: LD_INT 80
55528: PUSH
55529: LD_INT 90
55531: PUSH
55532: LD_INT 100
55534: PUSH
55535: LD_INT 110
55537: PUSH
55538: LD_INT 120
55540: PUSH
55541: LD_INT 130
55543: PUSH
55544: LD_INT 140
55546: PUSH
55547: LD_INT 150
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: PPUSH
55570: LD_INT 15
55572: PPUSH
55573: CALL_OW 12
55577: ARRAY
55578: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55579: LD_ADDR_VAR 0 4
55583: PUSH
55584: LD_INT 10
55586: PUSH
55587: LD_INT 20
55589: PUSH
55590: LD_INT 30
55592: PUSH
55593: LD_INT 40
55595: PUSH
55596: LD_INT 50
55598: PUSH
55599: LD_INT 60
55601: PUSH
55602: LD_INT 70
55604: PUSH
55605: LD_INT 80
55607: PUSH
55608: LD_INT 90
55610: PUSH
55611: LD_INT 100
55613: PUSH
55614: LD_INT 110
55616: PUSH
55617: LD_INT 120
55619: PUSH
55620: LD_INT 130
55622: PUSH
55623: LD_INT 140
55625: PUSH
55626: LD_INT 150
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PPUSH
55649: LD_INT 15
55651: PPUSH
55652: CALL_OW 12
55656: ARRAY
55657: ST_TO_ADDR
// if ValidHex ( x , y ) then
55658: LD_VAR 0 3
55662: PPUSH
55663: LD_VAR 0 4
55667: PPUSH
55668: CALL_OW 488
55672: IFFALSE 55695
// begin result := [ x , y ] ;
55674: LD_ADDR_VAR 0 1
55678: PUSH
55679: LD_VAR 0 3
55683: PUSH
55684: LD_VAR 0 4
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: ST_TO_ADDR
// break ;
55693: GO 55697
// end ; end ;
55695: GO 55497
55697: POP
55698: POP
// if result then
55699: LD_VAR 0 1
55703: IFFALSE 55763
// begin ToLua ( playSibBomb() ) ;
55705: LD_STRING playSibBomb()
55707: PPUSH
55708: CALL_OW 559
// wait ( 0 0$14 ) ;
55712: LD_INT 490
55714: PPUSH
55715: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55719: LD_VAR 0 1
55723: PUSH
55724: LD_INT 1
55726: ARRAY
55727: PPUSH
55728: LD_VAR 0 1
55732: PUSH
55733: LD_INT 2
55735: ARRAY
55736: PPUSH
55737: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55741: LD_VAR 0 1
55745: PUSH
55746: LD_INT 1
55748: ARRAY
55749: PPUSH
55750: LD_VAR 0 1
55754: PUSH
55755: LD_INT 2
55757: ARRAY
55758: PPUSH
55759: CALL_OW 429
// end ; end ;
55763: LD_VAR 0 1
55767: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55768: LD_EXP 56
55772: PUSH
55773: LD_EXP 78
55777: AND
55778: IFFALSE 55790
55780: GO 55782
55782: DISABLE
// YouLost (  ) ;
55783: LD_STRING 
55785: PPUSH
55786: CALL_OW 104
55790: END
// every 0 0$1 trigger StreamModeActive and sFog do
55791: LD_EXP 56
55795: PUSH
55796: LD_EXP 77
55800: AND
55801: IFFALSE 55815
55803: GO 55805
55805: DISABLE
// FogOff ( your_side ) ;
55806: LD_OWVAR 2
55810: PPUSH
55811: CALL_OW 344
55815: END
// every 0 0$1 trigger StreamModeActive and sSun do
55816: LD_EXP 56
55820: PUSH
55821: LD_EXP 79
55825: AND
55826: IFFALSE 55854
55828: GO 55830
55830: DISABLE
// begin solar_recharge_percent := 0 ;
55831: LD_ADDR_OWVAR 79
55835: PUSH
55836: LD_INT 0
55838: ST_TO_ADDR
// wait ( 5 5$00 ) ;
55839: LD_INT 10500
55841: PPUSH
55842: CALL_OW 67
// solar_recharge_percent := 100 ;
55846: LD_ADDR_OWVAR 79
55850: PUSH
55851: LD_INT 100
55853: ST_TO_ADDR
// end ;
55854: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
55855: LD_EXP 56
55859: PUSH
55860: LD_EXP 80
55864: AND
55865: IFFALSE 56104
55867: GO 55869
55869: DISABLE
55870: LD_INT 0
55872: PPUSH
55873: PPUSH
55874: PPUSH
// begin tmp := [ ] ;
55875: LD_ADDR_VAR 0 3
55879: PUSH
55880: EMPTY
55881: ST_TO_ADDR
// for i := 1 to 6 do
55882: LD_ADDR_VAR 0 1
55886: PUSH
55887: DOUBLE
55888: LD_INT 1
55890: DEC
55891: ST_TO_ADDR
55892: LD_INT 6
55894: PUSH
55895: FOR_TO
55896: IFFALSE 56001
// begin uc_nation := nation_nature ;
55898: LD_ADDR_OWVAR 21
55902: PUSH
55903: LD_INT 0
55905: ST_TO_ADDR
// uc_side := 0 ;
55906: LD_ADDR_OWVAR 20
55910: PUSH
55911: LD_INT 0
55913: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55914: LD_ADDR_OWVAR 29
55918: PUSH
55919: LD_INT 12
55921: PUSH
55922: LD_INT 12
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: ST_TO_ADDR
// hc_agressivity := 20 ;
55929: LD_ADDR_OWVAR 35
55933: PUSH
55934: LD_INT 20
55936: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
55937: LD_ADDR_OWVAR 28
55941: PUSH
55942: LD_INT 17
55944: ST_TO_ADDR
// hc_gallery :=  ;
55945: LD_ADDR_OWVAR 33
55949: PUSH
55950: LD_STRING 
55952: ST_TO_ADDR
// hc_name :=  ;
55953: LD_ADDR_OWVAR 26
55957: PUSH
55958: LD_STRING 
55960: ST_TO_ADDR
// un := CreateHuman ;
55961: LD_ADDR_VAR 0 2
55965: PUSH
55966: CALL_OW 44
55970: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
55971: LD_VAR 0 2
55975: PPUSH
55976: LD_INT 1
55978: PPUSH
55979: CALL_OW 51
// tmp := tmp ^ un ;
55983: LD_ADDR_VAR 0 3
55987: PUSH
55988: LD_VAR 0 3
55992: PUSH
55993: LD_VAR 0 2
55997: ADD
55998: ST_TO_ADDR
// end ;
55999: GO 55895
56001: POP
56002: POP
// repeat wait ( 0 0$1 ) ;
56003: LD_INT 35
56005: PPUSH
56006: CALL_OW 67
// for un in tmp do
56010: LD_ADDR_VAR 0 2
56014: PUSH
56015: LD_VAR 0 3
56019: PUSH
56020: FOR_IN
56021: IFFALSE 56095
// begin if IsDead ( un ) then
56023: LD_VAR 0 2
56027: PPUSH
56028: CALL_OW 301
56032: IFFALSE 56052
// begin tmp := tmp diff un ;
56034: LD_ADDR_VAR 0 3
56038: PUSH
56039: LD_VAR 0 3
56043: PUSH
56044: LD_VAR 0 2
56048: DIFF
56049: ST_TO_ADDR
// continue ;
56050: GO 56020
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56052: LD_VAR 0 2
56056: PPUSH
56057: LD_INT 3
56059: PUSH
56060: LD_INT 22
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PPUSH
56074: CALL_OW 69
56078: PPUSH
56079: LD_VAR 0 2
56083: PPUSH
56084: CALL_OW 74
56088: PPUSH
56089: CALL_OW 115
// end ;
56093: GO 56020
56095: POP
56096: POP
// until not tmp ;
56097: LD_VAR 0 3
56101: NOT
56102: IFFALSE 56003
// end ;
56104: PPOPN 3
56106: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56107: LD_EXP 56
56111: PUSH
56112: LD_EXP 81
56116: AND
56117: IFFALSE 56171
56119: GO 56121
56121: DISABLE
// begin ToLua ( displayTroll(); ) ;
56122: LD_STRING displayTroll();
56124: PPUSH
56125: CALL_OW 559
// wait ( 3 3$00 ) ;
56129: LD_INT 6300
56131: PPUSH
56132: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56136: LD_STRING hideTroll();
56138: PPUSH
56139: CALL_OW 559
// wait ( 1 1$00 ) ;
56143: LD_INT 2100
56145: PPUSH
56146: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56150: LD_STRING displayTroll();
56152: PPUSH
56153: CALL_OW 559
// wait ( 1 1$00 ) ;
56157: LD_INT 2100
56159: PPUSH
56160: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56164: LD_STRING hideTroll();
56166: PPUSH
56167: CALL_OW 559
// end ;
56171: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56172: LD_EXP 56
56176: PUSH
56177: LD_EXP 82
56181: AND
56182: IFFALSE 56245
56184: GO 56186
56186: DISABLE
56187: LD_INT 0
56189: PPUSH
// begin p := 0 ;
56190: LD_ADDR_VAR 0 1
56194: PUSH
56195: LD_INT 0
56197: ST_TO_ADDR
// repeat game_speed := 1 ;
56198: LD_ADDR_OWVAR 65
56202: PUSH
56203: LD_INT 1
56205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56206: LD_INT 35
56208: PPUSH
56209: CALL_OW 67
// p := p + 1 ;
56213: LD_ADDR_VAR 0 1
56217: PUSH
56218: LD_VAR 0 1
56222: PUSH
56223: LD_INT 1
56225: PLUS
56226: ST_TO_ADDR
// until p >= 60 ;
56227: LD_VAR 0 1
56231: PUSH
56232: LD_INT 60
56234: GREATEREQUAL
56235: IFFALSE 56198
// game_speed := 4 ;
56237: LD_ADDR_OWVAR 65
56241: PUSH
56242: LD_INT 4
56244: ST_TO_ADDR
// end ;
56245: PPOPN 1
56247: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56248: LD_EXP 56
56252: PUSH
56253: LD_EXP 83
56257: AND
56258: IFFALSE 56404
56260: GO 56262
56262: DISABLE
56263: LD_INT 0
56265: PPUSH
56266: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56267: LD_ADDR_VAR 0 1
56271: PUSH
56272: LD_INT 22
56274: PUSH
56275: LD_OWVAR 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: LD_INT 30
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 30
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PPUSH
56316: CALL_OW 69
56320: ST_TO_ADDR
// if not depot then
56321: LD_VAR 0 1
56325: NOT
56326: IFFALSE 56330
// exit ;
56328: GO 56404
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56330: LD_ADDR_VAR 0 2
56334: PUSH
56335: LD_VAR 0 1
56339: PUSH
56340: LD_INT 1
56342: PPUSH
56343: LD_VAR 0 1
56347: PPUSH
56348: CALL_OW 12
56352: ARRAY
56353: PPUSH
56354: CALL_OW 274
56358: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56359: LD_VAR 0 2
56363: PPUSH
56364: LD_INT 1
56366: PPUSH
56367: LD_INT 0
56369: PPUSH
56370: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56374: LD_VAR 0 2
56378: PPUSH
56379: LD_INT 2
56381: PPUSH
56382: LD_INT 0
56384: PPUSH
56385: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56389: LD_VAR 0 2
56393: PPUSH
56394: LD_INT 3
56396: PPUSH
56397: LD_INT 0
56399: PPUSH
56400: CALL_OW 277
// end ;
56404: PPOPN 2
56406: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56407: LD_EXP 56
56411: PUSH
56412: LD_EXP 84
56416: AND
56417: IFFALSE 56514
56419: GO 56421
56421: DISABLE
56422: LD_INT 0
56424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56425: LD_ADDR_VAR 0 1
56429: PUSH
56430: LD_INT 22
56432: PUSH
56433: LD_OWVAR 2
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 21
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: LD_INT 23
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: LIST
56473: PPUSH
56474: CALL_OW 69
56478: ST_TO_ADDR
// if not tmp then
56479: LD_VAR 0 1
56483: NOT
56484: IFFALSE 56488
// exit ;
56486: GO 56514
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56488: LD_VAR 0 1
56492: PUSH
56493: LD_INT 1
56495: PPUSH
56496: LD_VAR 0 1
56500: PPUSH
56501: CALL_OW 12
56505: ARRAY
56506: PPUSH
56507: LD_INT 200
56509: PPUSH
56510: CALL_OW 234
// end ;
56514: PPOPN 1
56516: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56517: LD_EXP 56
56521: PUSH
56522: LD_EXP 85
56526: AND
56527: IFFALSE 56606
56529: GO 56531
56531: DISABLE
56532: LD_INT 0
56534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56535: LD_ADDR_VAR 0 1
56539: PUSH
56540: LD_INT 22
56542: PUSH
56543: LD_OWVAR 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 21
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PPUSH
56566: CALL_OW 69
56570: ST_TO_ADDR
// if not tmp then
56571: LD_VAR 0 1
56575: NOT
56576: IFFALSE 56580
// exit ;
56578: GO 56606
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56580: LD_VAR 0 1
56584: PUSH
56585: LD_INT 1
56587: PPUSH
56588: LD_VAR 0 1
56592: PPUSH
56593: CALL_OW 12
56597: ARRAY
56598: PPUSH
56599: LD_INT 60
56601: PPUSH
56602: CALL_OW 234
// end ;
56606: PPOPN 1
56608: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56609: LD_EXP 56
56613: PUSH
56614: LD_EXP 86
56618: AND
56619: IFFALSE 56718
56621: GO 56623
56623: DISABLE
56624: LD_INT 0
56626: PPUSH
56627: PPUSH
// begin enable ;
56628: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56629: LD_ADDR_VAR 0 1
56633: PUSH
56634: LD_INT 22
56636: PUSH
56637: LD_OWVAR 2
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 61
56648: PUSH
56649: EMPTY
56650: LIST
56651: PUSH
56652: LD_INT 33
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: LIST
56666: PPUSH
56667: CALL_OW 69
56671: ST_TO_ADDR
// if not tmp then
56672: LD_VAR 0 1
56676: NOT
56677: IFFALSE 56681
// exit ;
56679: GO 56718
// for i in tmp do
56681: LD_ADDR_VAR 0 2
56685: PUSH
56686: LD_VAR 0 1
56690: PUSH
56691: FOR_IN
56692: IFFALSE 56716
// if IsControledBy ( i ) then
56694: LD_VAR 0 2
56698: PPUSH
56699: CALL_OW 312
56703: IFFALSE 56714
// ComUnlink ( i ) ;
56705: LD_VAR 0 2
56709: PPUSH
56710: CALL_OW 136
56714: GO 56691
56716: POP
56717: POP
// end ;
56718: PPOPN 2
56720: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56721: LD_EXP 56
56725: PUSH
56726: LD_EXP 87
56730: AND
56731: IFFALSE 56871
56733: GO 56735
56735: DISABLE
56736: LD_INT 0
56738: PPUSH
56739: PPUSH
// begin ToLua ( displayPowell(); ) ;
56740: LD_STRING displayPowell();
56742: PPUSH
56743: CALL_OW 559
// uc_side := 0 ;
56747: LD_ADDR_OWVAR 20
56751: PUSH
56752: LD_INT 0
56754: ST_TO_ADDR
// uc_nation := 2 ;
56755: LD_ADDR_OWVAR 21
56759: PUSH
56760: LD_INT 2
56762: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56763: LD_ADDR_OWVAR 37
56767: PUSH
56768: LD_INT 14
56770: ST_TO_ADDR
// vc_engine := engine_siberite ;
56771: LD_ADDR_OWVAR 39
56775: PUSH
56776: LD_INT 3
56778: ST_TO_ADDR
// vc_control := control_apeman ;
56779: LD_ADDR_OWVAR 38
56783: PUSH
56784: LD_INT 5
56786: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56787: LD_ADDR_OWVAR 40
56791: PUSH
56792: LD_INT 29
56794: ST_TO_ADDR
// un := CreateVehicle ;
56795: LD_ADDR_VAR 0 2
56799: PUSH
56800: CALL_OW 45
56804: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56805: LD_VAR 0 2
56809: PPUSH
56810: LD_INT 1
56812: PPUSH
56813: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56817: LD_INT 35
56819: PPUSH
56820: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56824: LD_VAR 0 2
56828: PPUSH
56829: LD_INT 22
56831: PUSH
56832: LD_OWVAR 2
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PPUSH
56841: CALL_OW 69
56845: PPUSH
56846: LD_VAR 0 2
56850: PPUSH
56851: CALL_OW 74
56855: PPUSH
56856: CALL_OW 115
// until IsDead ( un ) ;
56860: LD_VAR 0 2
56864: PPUSH
56865: CALL_OW 301
56869: IFFALSE 56817
// end ;
56871: PPOPN 2
56873: END
// every 0 0$1 trigger StreamModeActive and sStu do
56874: LD_EXP 56
56878: PUSH
56879: LD_EXP 95
56883: AND
56884: IFFALSE 56900
56886: GO 56888
56888: DISABLE
// begin ToLua ( displayStucuk(); ) ;
56889: LD_STRING displayStucuk();
56891: PPUSH
56892: CALL_OW 559
// ResetFog ;
56896: CALL_OW 335
// end ;
56900: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
56901: LD_EXP 56
56905: PUSH
56906: LD_EXP 88
56910: AND
56911: IFFALSE 57052
56913: GO 56915
56915: DISABLE
56916: LD_INT 0
56918: PPUSH
56919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56920: LD_ADDR_VAR 0 2
56924: PUSH
56925: LD_INT 22
56927: PUSH
56928: LD_OWVAR 2
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 21
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PPUSH
56951: CALL_OW 69
56955: ST_TO_ADDR
// if not tmp then
56956: LD_VAR 0 2
56960: NOT
56961: IFFALSE 56965
// exit ;
56963: GO 57052
// un := tmp [ rand ( 1 , tmp ) ] ;
56965: LD_ADDR_VAR 0 1
56969: PUSH
56970: LD_VAR 0 2
56974: PUSH
56975: LD_INT 1
56977: PPUSH
56978: LD_VAR 0 2
56982: PPUSH
56983: CALL_OW 12
56987: ARRAY
56988: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56989: LD_VAR 0 1
56993: PPUSH
56994: LD_INT 0
56996: PPUSH
56997: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57001: LD_VAR 0 1
57005: PPUSH
57006: LD_OWVAR 3
57010: PUSH
57011: LD_VAR 0 1
57015: DIFF
57016: PPUSH
57017: LD_VAR 0 1
57021: PPUSH
57022: CALL_OW 74
57026: PPUSH
57027: CALL_OW 115
// wait ( 0 0$20 ) ;
57031: LD_INT 700
57033: PPUSH
57034: CALL_OW 67
// SetSide ( un , your_side ) ;
57038: LD_VAR 0 1
57042: PPUSH
57043: LD_OWVAR 2
57047: PPUSH
57048: CALL_OW 235
// end ;
57052: PPOPN 2
57054: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57055: LD_EXP 56
57059: PUSH
57060: LD_EXP 89
57064: AND
57065: IFFALSE 57171
57067: GO 57069
57069: DISABLE
57070: LD_INT 0
57072: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57073: LD_ADDR_VAR 0 1
57077: PUSH
57078: LD_INT 22
57080: PUSH
57081: LD_OWVAR 2
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: LD_INT 30
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 30
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: LIST
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PPUSH
57122: CALL_OW 69
57126: ST_TO_ADDR
// if not depot then
57127: LD_VAR 0 1
57131: NOT
57132: IFFALSE 57136
// exit ;
57134: GO 57171
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57136: LD_VAR 0 1
57140: PUSH
57141: LD_INT 1
57143: ARRAY
57144: PPUSH
57145: CALL_OW 250
57149: PPUSH
57150: LD_VAR 0 1
57154: PUSH
57155: LD_INT 1
57157: ARRAY
57158: PPUSH
57159: CALL_OW 251
57163: PPUSH
57164: LD_INT 70
57166: PPUSH
57167: CALL_OW 495
// end ;
57171: PPOPN 1
57173: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57174: LD_EXP 56
57178: PUSH
57179: LD_EXP 90
57183: AND
57184: IFFALSE 57395
57186: GO 57188
57188: DISABLE
57189: LD_INT 0
57191: PPUSH
57192: PPUSH
57193: PPUSH
57194: PPUSH
57195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57196: LD_ADDR_VAR 0 5
57200: PUSH
57201: LD_INT 22
57203: PUSH
57204: LD_OWVAR 2
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 21
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PPUSH
57227: CALL_OW 69
57231: ST_TO_ADDR
// if not tmp then
57232: LD_VAR 0 5
57236: NOT
57237: IFFALSE 57241
// exit ;
57239: GO 57395
// for i in tmp do
57241: LD_ADDR_VAR 0 1
57245: PUSH
57246: LD_VAR 0 5
57250: PUSH
57251: FOR_IN
57252: IFFALSE 57393
// begin d := rand ( 0 , 5 ) ;
57254: LD_ADDR_VAR 0 4
57258: PUSH
57259: LD_INT 0
57261: PPUSH
57262: LD_INT 5
57264: PPUSH
57265: CALL_OW 12
57269: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57270: LD_ADDR_VAR 0 2
57274: PUSH
57275: LD_VAR 0 1
57279: PPUSH
57280: CALL_OW 250
57284: PPUSH
57285: LD_VAR 0 4
57289: PPUSH
57290: LD_INT 3
57292: PPUSH
57293: LD_INT 12
57295: PPUSH
57296: CALL_OW 12
57300: PPUSH
57301: CALL_OW 272
57305: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57306: LD_ADDR_VAR 0 3
57310: PUSH
57311: LD_VAR 0 1
57315: PPUSH
57316: CALL_OW 251
57320: PPUSH
57321: LD_VAR 0 4
57325: PPUSH
57326: LD_INT 3
57328: PPUSH
57329: LD_INT 12
57331: PPUSH
57332: CALL_OW 12
57336: PPUSH
57337: CALL_OW 273
57341: ST_TO_ADDR
// if ValidHex ( x , y ) then
57342: LD_VAR 0 2
57346: PPUSH
57347: LD_VAR 0 3
57351: PPUSH
57352: CALL_OW 488
57356: IFFALSE 57391
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57358: LD_VAR 0 1
57362: PPUSH
57363: LD_VAR 0 2
57367: PPUSH
57368: LD_VAR 0 3
57372: PPUSH
57373: LD_INT 3
57375: PPUSH
57376: LD_INT 6
57378: PPUSH
57379: CALL_OW 12
57383: PPUSH
57384: LD_INT 1
57386: PPUSH
57387: CALL_OW 483
// end ;
57391: GO 57251
57393: POP
57394: POP
// end ;
57395: PPOPN 5
57397: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57398: LD_EXP 56
57402: PUSH
57403: LD_EXP 91
57407: AND
57408: IFFALSE 57502
57410: GO 57412
57412: DISABLE
57413: LD_INT 0
57415: PPUSH
57416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57417: LD_ADDR_VAR 0 2
57421: PUSH
57422: LD_INT 22
57424: PUSH
57425: LD_OWVAR 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 32
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 21
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: LIST
57458: PPUSH
57459: CALL_OW 69
57463: ST_TO_ADDR
// if not tmp then
57464: LD_VAR 0 2
57468: NOT
57469: IFFALSE 57473
// exit ;
57471: GO 57502
// for i in tmp do
57473: LD_ADDR_VAR 0 1
57477: PUSH
57478: LD_VAR 0 2
57482: PUSH
57483: FOR_IN
57484: IFFALSE 57500
// SetFuel ( i , 0 ) ;
57486: LD_VAR 0 1
57490: PPUSH
57491: LD_INT 0
57493: PPUSH
57494: CALL_OW 240
57498: GO 57483
57500: POP
57501: POP
// end ;
57502: PPOPN 2
57504: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57505: LD_EXP 56
57509: PUSH
57510: LD_EXP 92
57514: AND
57515: IFFALSE 57581
57517: GO 57519
57519: DISABLE
57520: LD_INT 0
57522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57523: LD_ADDR_VAR 0 1
57527: PUSH
57528: LD_INT 22
57530: PUSH
57531: LD_OWVAR 2
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 30
57542: PUSH
57543: LD_INT 29
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PPUSH
57554: CALL_OW 69
57558: ST_TO_ADDR
// if not tmp then
57559: LD_VAR 0 1
57563: NOT
57564: IFFALSE 57568
// exit ;
57566: GO 57581
// DestroyUnit ( tmp [ 1 ] ) ;
57568: LD_VAR 0 1
57572: PUSH
57573: LD_INT 1
57575: ARRAY
57576: PPUSH
57577: CALL_OW 65
// end ;
57581: PPOPN 1
57583: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57584: LD_EXP 56
57588: PUSH
57589: LD_EXP 94
57593: AND
57594: IFFALSE 57723
57596: GO 57598
57598: DISABLE
57599: LD_INT 0
57601: PPUSH
// begin uc_side := 0 ;
57602: LD_ADDR_OWVAR 20
57606: PUSH
57607: LD_INT 0
57609: ST_TO_ADDR
// uc_nation := nation_arabian ;
57610: LD_ADDR_OWVAR 21
57614: PUSH
57615: LD_INT 2
57617: ST_TO_ADDR
// hc_gallery :=  ;
57618: LD_ADDR_OWVAR 33
57622: PUSH
57623: LD_STRING 
57625: ST_TO_ADDR
// hc_name :=  ;
57626: LD_ADDR_OWVAR 26
57630: PUSH
57631: LD_STRING 
57633: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57634: LD_INT 1
57636: PPUSH
57637: LD_INT 11
57639: PPUSH
57640: LD_INT 10
57642: PPUSH
57643: CALL_OW 380
// un := CreateHuman ;
57647: LD_ADDR_VAR 0 1
57651: PUSH
57652: CALL_OW 44
57656: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57657: LD_VAR 0 1
57661: PPUSH
57662: LD_INT 1
57664: PPUSH
57665: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57669: LD_INT 35
57671: PPUSH
57672: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57676: LD_VAR 0 1
57680: PPUSH
57681: LD_INT 22
57683: PUSH
57684: LD_OWVAR 2
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PPUSH
57693: CALL_OW 69
57697: PPUSH
57698: LD_VAR 0 1
57702: PPUSH
57703: CALL_OW 74
57707: PPUSH
57708: CALL_OW 115
// until IsDead ( un ) ;
57712: LD_VAR 0 1
57716: PPUSH
57717: CALL_OW 301
57721: IFFALSE 57669
// end ;
57723: PPOPN 1
57725: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57726: LD_EXP 56
57730: PUSH
57731: LD_EXP 96
57735: AND
57736: IFFALSE 57748
57738: GO 57740
57740: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57741: LD_STRING earthquake(getX(game), 0, 32)
57743: PPUSH
57744: CALL_OW 559
57748: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57749: LD_EXP 56
57753: PUSH
57754: LD_EXP 97
57758: AND
57759: IFFALSE 57850
57761: GO 57763
57763: DISABLE
57764: LD_INT 0
57766: PPUSH
// begin enable ;
57767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57768: LD_ADDR_VAR 0 1
57772: PUSH
57773: LD_INT 22
57775: PUSH
57776: LD_OWVAR 2
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 21
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 33
57797: PUSH
57798: LD_INT 3
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: LIST
57809: PPUSH
57810: CALL_OW 69
57814: ST_TO_ADDR
// if not tmp then
57815: LD_VAR 0 1
57819: NOT
57820: IFFALSE 57824
// exit ;
57822: GO 57850
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57824: LD_VAR 0 1
57828: PUSH
57829: LD_INT 1
57831: PPUSH
57832: LD_VAR 0 1
57836: PPUSH
57837: CALL_OW 12
57841: ARRAY
57842: PPUSH
57843: LD_INT 1
57845: PPUSH
57846: CALL_OW 234
// end ;
57850: PPOPN 1
57852: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
57853: LD_EXP 56
57857: PUSH
57858: LD_EXP 98
57862: AND
57863: IFFALSE 58004
57865: GO 57867
57867: DISABLE
57868: LD_INT 0
57870: PPUSH
57871: PPUSH
57872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57873: LD_ADDR_VAR 0 3
57877: PUSH
57878: LD_INT 22
57880: PUSH
57881: LD_OWVAR 2
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 25
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PPUSH
57904: CALL_OW 69
57908: ST_TO_ADDR
// if not tmp then
57909: LD_VAR 0 3
57913: NOT
57914: IFFALSE 57918
// exit ;
57916: GO 58004
// un := tmp [ rand ( 1 , tmp ) ] ;
57918: LD_ADDR_VAR 0 2
57922: PUSH
57923: LD_VAR 0 3
57927: PUSH
57928: LD_INT 1
57930: PPUSH
57931: LD_VAR 0 3
57935: PPUSH
57936: CALL_OW 12
57940: ARRAY
57941: ST_TO_ADDR
// if Crawls ( un ) then
57942: LD_VAR 0 2
57946: PPUSH
57947: CALL_OW 318
57951: IFFALSE 57962
// ComWalk ( un ) ;
57953: LD_VAR 0 2
57957: PPUSH
57958: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
57962: LD_VAR 0 2
57966: PPUSH
57967: LD_INT 9
57969: PPUSH
57970: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
57974: LD_INT 28
57976: PPUSH
57977: LD_OWVAR 2
57981: PPUSH
57982: LD_INT 2
57984: PPUSH
57985: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57989: LD_INT 29
57991: PPUSH
57992: LD_OWVAR 2
57996: PPUSH
57997: LD_INT 2
57999: PPUSH
58000: CALL_OW 322
// end ;
58004: PPOPN 3
58006: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58007: LD_EXP 56
58011: PUSH
58012: LD_EXP 99
58016: AND
58017: IFFALSE 58128
58019: GO 58021
58021: DISABLE
58022: LD_INT 0
58024: PPUSH
58025: PPUSH
58026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58027: LD_ADDR_VAR 0 3
58031: PUSH
58032: LD_INT 22
58034: PUSH
58035: LD_OWVAR 2
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 25
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PPUSH
58058: CALL_OW 69
58062: ST_TO_ADDR
// if not tmp then
58063: LD_VAR 0 3
58067: NOT
58068: IFFALSE 58072
// exit ;
58070: GO 58128
// un := tmp [ rand ( 1 , tmp ) ] ;
58072: LD_ADDR_VAR 0 2
58076: PUSH
58077: LD_VAR 0 3
58081: PUSH
58082: LD_INT 1
58084: PPUSH
58085: LD_VAR 0 3
58089: PPUSH
58090: CALL_OW 12
58094: ARRAY
58095: ST_TO_ADDR
// if Crawls ( un ) then
58096: LD_VAR 0 2
58100: PPUSH
58101: CALL_OW 318
58105: IFFALSE 58116
// ComWalk ( un ) ;
58107: LD_VAR 0 2
58111: PPUSH
58112: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58116: LD_VAR 0 2
58120: PPUSH
58121: LD_INT 8
58123: PPUSH
58124: CALL_OW 336
// end ;
58128: PPOPN 3
58130: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58131: LD_EXP 56
58135: PUSH
58136: LD_EXP 100
58140: AND
58141: IFFALSE 58285
58143: GO 58145
58145: DISABLE
58146: LD_INT 0
58148: PPUSH
58149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58150: LD_ADDR_VAR 0 2
58154: PUSH
58155: LD_INT 22
58157: PUSH
58158: LD_OWVAR 2
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 21
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: LD_INT 34
58182: PUSH
58183: LD_INT 12
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 34
58192: PUSH
58193: LD_INT 51
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 34
58202: PUSH
58203: LD_INT 32
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: LIST
58220: PPUSH
58221: CALL_OW 69
58225: ST_TO_ADDR
// if not tmp then
58226: LD_VAR 0 2
58230: NOT
58231: IFFALSE 58235
// exit ;
58233: GO 58285
// for i in tmp do
58235: LD_ADDR_VAR 0 1
58239: PUSH
58240: LD_VAR 0 2
58244: PUSH
58245: FOR_IN
58246: IFFALSE 58283
// if GetCargo ( i , mat_artifact ) = 0 then
58248: LD_VAR 0 1
58252: PPUSH
58253: LD_INT 4
58255: PPUSH
58256: CALL_OW 289
58260: PUSH
58261: LD_INT 0
58263: EQUAL
58264: IFFALSE 58281
// SetCargo ( i , mat_siberit , 100 ) ;
58266: LD_VAR 0 1
58270: PPUSH
58271: LD_INT 3
58273: PPUSH
58274: LD_INT 100
58276: PPUSH
58277: CALL_OW 290
58281: GO 58245
58283: POP
58284: POP
// end ;
58285: PPOPN 2
58287: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58288: LD_EXP 56
58292: PUSH
58293: LD_EXP 101
58297: AND
58298: IFFALSE 58481
58300: GO 58302
58302: DISABLE
58303: LD_INT 0
58305: PPUSH
58306: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58307: LD_ADDR_VAR 0 2
58311: PUSH
58312: LD_INT 22
58314: PUSH
58315: LD_OWVAR 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PPUSH
58324: CALL_OW 69
58328: ST_TO_ADDR
// if not tmp then
58329: LD_VAR 0 2
58333: NOT
58334: IFFALSE 58338
// exit ;
58336: GO 58481
// for i := 1 to 2 do
58338: LD_ADDR_VAR 0 1
58342: PUSH
58343: DOUBLE
58344: LD_INT 1
58346: DEC
58347: ST_TO_ADDR
58348: LD_INT 2
58350: PUSH
58351: FOR_TO
58352: IFFALSE 58479
// begin uc_side := your_side ;
58354: LD_ADDR_OWVAR 20
58358: PUSH
58359: LD_OWVAR 2
58363: ST_TO_ADDR
// uc_nation := nation_american ;
58364: LD_ADDR_OWVAR 21
58368: PUSH
58369: LD_INT 1
58371: ST_TO_ADDR
// vc_chassis := us_morphling ;
58372: LD_ADDR_OWVAR 37
58376: PUSH
58377: LD_INT 5
58379: ST_TO_ADDR
// vc_engine := engine_siberite ;
58380: LD_ADDR_OWVAR 39
58384: PUSH
58385: LD_INT 3
58387: ST_TO_ADDR
// vc_control := control_computer ;
58388: LD_ADDR_OWVAR 38
58392: PUSH
58393: LD_INT 3
58395: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58396: LD_ADDR_OWVAR 40
58400: PUSH
58401: LD_INT 10
58403: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58404: LD_VAR 0 2
58408: PUSH
58409: LD_INT 1
58411: ARRAY
58412: PPUSH
58413: CALL_OW 310
58417: NOT
58418: IFFALSE 58465
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58420: CALL_OW 45
58424: PPUSH
58425: LD_VAR 0 2
58429: PUSH
58430: LD_INT 1
58432: ARRAY
58433: PPUSH
58434: CALL_OW 250
58438: PPUSH
58439: LD_VAR 0 2
58443: PUSH
58444: LD_INT 1
58446: ARRAY
58447: PPUSH
58448: CALL_OW 251
58452: PPUSH
58453: LD_INT 12
58455: PPUSH
58456: LD_INT 1
58458: PPUSH
58459: CALL_OW 50
58463: GO 58477
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58465: CALL_OW 45
58469: PPUSH
58470: LD_INT 1
58472: PPUSH
58473: CALL_OW 51
// end ;
58477: GO 58351
58479: POP
58480: POP
// end ;
58481: PPOPN 2
58483: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58484: LD_EXP 56
58488: PUSH
58489: LD_EXP 102
58493: AND
58494: IFFALSE 58716
58496: GO 58498
58498: DISABLE
58499: LD_INT 0
58501: PPUSH
58502: PPUSH
58503: PPUSH
58504: PPUSH
58505: PPUSH
58506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58507: LD_ADDR_VAR 0 6
58511: PUSH
58512: LD_INT 22
58514: PUSH
58515: LD_OWVAR 2
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 21
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: LD_INT 23
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: LIST
58555: PPUSH
58556: CALL_OW 69
58560: ST_TO_ADDR
// if not tmp then
58561: LD_VAR 0 6
58565: NOT
58566: IFFALSE 58570
// exit ;
58568: GO 58716
// s1 := rand ( 1 , 4 ) ;
58570: LD_ADDR_VAR 0 2
58574: PUSH
58575: LD_INT 1
58577: PPUSH
58578: LD_INT 4
58580: PPUSH
58581: CALL_OW 12
58585: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58586: LD_ADDR_VAR 0 4
58590: PUSH
58591: LD_VAR 0 6
58595: PUSH
58596: LD_INT 1
58598: ARRAY
58599: PPUSH
58600: LD_VAR 0 2
58604: PPUSH
58605: CALL_OW 259
58609: ST_TO_ADDR
// if s1 = 1 then
58610: LD_VAR 0 2
58614: PUSH
58615: LD_INT 1
58617: EQUAL
58618: IFFALSE 58638
// s2 := rand ( 2 , 4 ) else
58620: LD_ADDR_VAR 0 3
58624: PUSH
58625: LD_INT 2
58627: PPUSH
58628: LD_INT 4
58630: PPUSH
58631: CALL_OW 12
58635: ST_TO_ADDR
58636: GO 58646
// s2 := 1 ;
58638: LD_ADDR_VAR 0 3
58642: PUSH
58643: LD_INT 1
58645: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58646: LD_ADDR_VAR 0 5
58650: PUSH
58651: LD_VAR 0 6
58655: PUSH
58656: LD_INT 1
58658: ARRAY
58659: PPUSH
58660: LD_VAR 0 3
58664: PPUSH
58665: CALL_OW 259
58669: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58670: LD_VAR 0 6
58674: PUSH
58675: LD_INT 1
58677: ARRAY
58678: PPUSH
58679: LD_VAR 0 2
58683: PPUSH
58684: LD_VAR 0 5
58688: PPUSH
58689: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58693: LD_VAR 0 6
58697: PUSH
58698: LD_INT 1
58700: ARRAY
58701: PPUSH
58702: LD_VAR 0 3
58706: PPUSH
58707: LD_VAR 0 4
58711: PPUSH
58712: CALL_OW 237
// end ;
58716: PPOPN 6
58718: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58719: LD_EXP 56
58723: PUSH
58724: LD_EXP 103
58728: AND
58729: IFFALSE 58808
58731: GO 58733
58733: DISABLE
58734: LD_INT 0
58736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58737: LD_ADDR_VAR 0 1
58741: PUSH
58742: LD_INT 22
58744: PUSH
58745: LD_OWVAR 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 30
58756: PUSH
58757: LD_INT 3
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PPUSH
58768: CALL_OW 69
58772: ST_TO_ADDR
// if not tmp then
58773: LD_VAR 0 1
58777: NOT
58778: IFFALSE 58782
// exit ;
58780: GO 58808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58782: LD_VAR 0 1
58786: PUSH
58787: LD_INT 1
58789: PPUSH
58790: LD_VAR 0 1
58794: PPUSH
58795: CALL_OW 12
58799: ARRAY
58800: PPUSH
58801: LD_INT 1
58803: PPUSH
58804: CALL_OW 234
// end ;
58808: PPOPN 1
58810: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
58811: LD_EXP 56
58815: PUSH
58816: LD_EXP 104
58820: AND
58821: IFFALSE 58933
58823: GO 58825
58825: DISABLE
58826: LD_INT 0
58828: PPUSH
58829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
58830: LD_ADDR_VAR 0 2
58834: PUSH
58835: LD_INT 22
58837: PUSH
58838: LD_OWVAR 2
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 30
58852: PUSH
58853: LD_INT 27
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 30
58862: PUSH
58863: LD_INT 26
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 30
58872: PUSH
58873: LD_INT 28
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PPUSH
58890: CALL_OW 69
58894: ST_TO_ADDR
// if not tmp then
58895: LD_VAR 0 2
58899: NOT
58900: IFFALSE 58904
// exit ;
58902: GO 58933
// for i in tmp do
58904: LD_ADDR_VAR 0 1
58908: PUSH
58909: LD_VAR 0 2
58913: PUSH
58914: FOR_IN
58915: IFFALSE 58931
// SetLives ( i , 1 ) ;
58917: LD_VAR 0 1
58921: PPUSH
58922: LD_INT 1
58924: PPUSH
58925: CALL_OW 234
58929: GO 58914
58931: POP
58932: POP
// end ;
58933: PPOPN 2
58935: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
58936: LD_EXP 56
58940: PUSH
58941: LD_EXP 105
58945: AND
58946: IFFALSE 59233
58948: GO 58950
58950: DISABLE
58951: LD_INT 0
58953: PPUSH
58954: PPUSH
58955: PPUSH
// begin i := rand ( 1 , 7 ) ;
58956: LD_ADDR_VAR 0 1
58960: PUSH
58961: LD_INT 1
58963: PPUSH
58964: LD_INT 7
58966: PPUSH
58967: CALL_OW 12
58971: ST_TO_ADDR
// case i of 1 :
58972: LD_VAR 0 1
58976: PUSH
58977: LD_INT 1
58979: DOUBLE
58980: EQUAL
58981: IFTRUE 58985
58983: GO 58995
58985: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
58986: LD_STRING earthquake(getX(game), 0, 32)
58988: PPUSH
58989: CALL_OW 559
58993: GO 59233
58995: LD_INT 2
58997: DOUBLE
58998: EQUAL
58999: IFTRUE 59003
59001: GO 59017
59003: POP
// begin ToLua ( displayStucuk(); ) ;
59004: LD_STRING displayStucuk();
59006: PPUSH
59007: CALL_OW 559
// ResetFog ;
59011: CALL_OW 335
// end ; 3 :
59015: GO 59233
59017: LD_INT 3
59019: DOUBLE
59020: EQUAL
59021: IFTRUE 59025
59023: GO 59129
59025: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59026: LD_ADDR_VAR 0 2
59030: PUSH
59031: LD_INT 22
59033: PUSH
59034: LD_OWVAR 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 25
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PPUSH
59057: CALL_OW 69
59061: ST_TO_ADDR
// if not tmp then
59062: LD_VAR 0 2
59066: NOT
59067: IFFALSE 59071
// exit ;
59069: GO 59233
// un := tmp [ rand ( 1 , tmp ) ] ;
59071: LD_ADDR_VAR 0 3
59075: PUSH
59076: LD_VAR 0 2
59080: PUSH
59081: LD_INT 1
59083: PPUSH
59084: LD_VAR 0 2
59088: PPUSH
59089: CALL_OW 12
59093: ARRAY
59094: ST_TO_ADDR
// if Crawls ( un ) then
59095: LD_VAR 0 3
59099: PPUSH
59100: CALL_OW 318
59104: IFFALSE 59115
// ComWalk ( un ) ;
59106: LD_VAR 0 3
59110: PPUSH
59111: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59115: LD_VAR 0 3
59119: PPUSH
59120: LD_INT 8
59122: PPUSH
59123: CALL_OW 336
// end ; 4 :
59127: GO 59233
59129: LD_INT 4
59131: DOUBLE
59132: EQUAL
59133: IFTRUE 59137
59135: GO 59211
59137: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59138: LD_ADDR_VAR 0 2
59142: PUSH
59143: LD_INT 22
59145: PUSH
59146: LD_OWVAR 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 30
59157: PUSH
59158: LD_INT 29
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PPUSH
59169: CALL_OW 69
59173: ST_TO_ADDR
// if not tmp then
59174: LD_VAR 0 2
59178: NOT
59179: IFFALSE 59183
// exit ;
59181: GO 59233
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59183: LD_VAR 0 2
59187: PUSH
59188: LD_INT 1
59190: ARRAY
59191: PPUSH
59192: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59196: LD_VAR 0 2
59200: PUSH
59201: LD_INT 1
59203: ARRAY
59204: PPUSH
59205: CALL_OW 65
// end ; 5 .. 7 :
59209: GO 59233
59211: LD_INT 5
59213: DOUBLE
59214: GREATEREQUAL
59215: IFFALSE 59223
59217: LD_INT 7
59219: DOUBLE
59220: LESSEQUAL
59221: IFTRUE 59225
59223: GO 59232
59225: POP
// StreamSibBomb ; end ;
59226: CALL 55470 0 0
59230: GO 59233
59232: POP
// end ;
59233: PPOPN 3
59235: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59236: LD_EXP 56
59240: PUSH
59241: LD_EXP 106
59245: AND
59246: IFFALSE 59402
59248: GO 59250
59250: DISABLE
59251: LD_INT 0
59253: PPUSH
59254: PPUSH
59255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59256: LD_ADDR_VAR 0 2
59260: PUSH
59261: LD_INT 81
59263: PUSH
59264: LD_OWVAR 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: LD_INT 21
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 21
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: LIST
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PPUSH
59305: CALL_OW 69
59309: ST_TO_ADDR
// if not tmp then
59310: LD_VAR 0 2
59314: NOT
59315: IFFALSE 59319
// exit ;
59317: GO 59402
// p := 0 ;
59319: LD_ADDR_VAR 0 3
59323: PUSH
59324: LD_INT 0
59326: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59327: LD_INT 35
59329: PPUSH
59330: CALL_OW 67
// p := p + 1 ;
59334: LD_ADDR_VAR 0 3
59338: PUSH
59339: LD_VAR 0 3
59343: PUSH
59344: LD_INT 1
59346: PLUS
59347: ST_TO_ADDR
// for i in tmp do
59348: LD_ADDR_VAR 0 1
59352: PUSH
59353: LD_VAR 0 2
59357: PUSH
59358: FOR_IN
59359: IFFALSE 59390
// if GetLives ( i ) < 1000 then
59361: LD_VAR 0 1
59365: PPUSH
59366: CALL_OW 256
59370: PUSH
59371: LD_INT 1000
59373: LESS
59374: IFFALSE 59388
// SetLives ( i , 1000 ) ;
59376: LD_VAR 0 1
59380: PPUSH
59381: LD_INT 1000
59383: PPUSH
59384: CALL_OW 234
59388: GO 59358
59390: POP
59391: POP
// until p > 20 ;
59392: LD_VAR 0 3
59396: PUSH
59397: LD_INT 20
59399: GREATER
59400: IFFALSE 59327
// end ;
59402: PPOPN 3
59404: END
// every 0 0$1 trigger StreamModeActive and sTime do
59405: LD_EXP 56
59409: PUSH
59410: LD_EXP 107
59414: AND
59415: IFFALSE 59450
59417: GO 59419
59419: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59420: LD_INT 28
59422: PPUSH
59423: LD_OWVAR 2
59427: PPUSH
59428: LD_INT 2
59430: PPUSH
59431: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59435: LD_INT 30
59437: PPUSH
59438: LD_OWVAR 2
59442: PPUSH
59443: LD_INT 2
59445: PPUSH
59446: CALL_OW 322
// end ;
59450: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59451: LD_EXP 56
59455: PUSH
59456: LD_EXP 108
59460: AND
59461: IFFALSE 59582
59463: GO 59465
59465: DISABLE
59466: LD_INT 0
59468: PPUSH
59469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59470: LD_ADDR_VAR 0 2
59474: PUSH
59475: LD_INT 22
59477: PUSH
59478: LD_OWVAR 2
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 21
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 3
59499: PUSH
59500: LD_INT 23
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: LIST
59518: PPUSH
59519: CALL_OW 69
59523: ST_TO_ADDR
// if not tmp then
59524: LD_VAR 0 2
59528: NOT
59529: IFFALSE 59533
// exit ;
59531: GO 59582
// for i in tmp do
59533: LD_ADDR_VAR 0 1
59537: PUSH
59538: LD_VAR 0 2
59542: PUSH
59543: FOR_IN
59544: IFFALSE 59580
// begin if Crawls ( i ) then
59546: LD_VAR 0 1
59550: PPUSH
59551: CALL_OW 318
59555: IFFALSE 59566
// ComWalk ( i ) ;
59557: LD_VAR 0 1
59561: PPUSH
59562: CALL_OW 138
// SetClass ( i , 2 ) ;
59566: LD_VAR 0 1
59570: PPUSH
59571: LD_INT 2
59573: PPUSH
59574: CALL_OW 336
// end ;
59578: GO 59543
59580: POP
59581: POP
// end ;
59582: PPOPN 2
59584: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59585: LD_EXP 56
59589: PUSH
59590: LD_EXP 109
59594: AND
59595: IFFALSE 59883
59597: GO 59599
59599: DISABLE
59600: LD_INT 0
59602: PPUSH
59603: PPUSH
59604: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59605: LD_OWVAR 2
59609: PPUSH
59610: LD_INT 9
59612: PPUSH
59613: LD_INT 1
59615: PPUSH
59616: LD_INT 1
59618: PPUSH
59619: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59623: LD_INT 9
59625: PPUSH
59626: LD_OWVAR 2
59630: PPUSH
59631: CALL_OW 343
// uc_side := 9 ;
59635: LD_ADDR_OWVAR 20
59639: PUSH
59640: LD_INT 9
59642: ST_TO_ADDR
// uc_nation := 2 ;
59643: LD_ADDR_OWVAR 21
59647: PUSH
59648: LD_INT 2
59650: ST_TO_ADDR
// hc_name := Dark Warrior ;
59651: LD_ADDR_OWVAR 26
59655: PUSH
59656: LD_STRING Dark Warrior
59658: ST_TO_ADDR
// hc_gallery :=  ;
59659: LD_ADDR_OWVAR 33
59663: PUSH
59664: LD_STRING 
59666: ST_TO_ADDR
// hc_noskilllimit := true ;
59667: LD_ADDR_OWVAR 76
59671: PUSH
59672: LD_INT 1
59674: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59675: LD_ADDR_OWVAR 31
59679: PUSH
59680: LD_INT 30
59682: PUSH
59683: LD_INT 30
59685: PUSH
59686: LD_INT 30
59688: PUSH
59689: LD_INT 30
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: ST_TO_ADDR
// un := CreateHuman ;
59698: LD_ADDR_VAR 0 3
59702: PUSH
59703: CALL_OW 44
59707: ST_TO_ADDR
// hc_noskilllimit := false ;
59708: LD_ADDR_OWVAR 76
59712: PUSH
59713: LD_INT 0
59715: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59716: LD_VAR 0 3
59720: PPUSH
59721: LD_INT 1
59723: PPUSH
59724: CALL_OW 51
// ToLua ( playRanger() ) ;
59728: LD_STRING playRanger()
59730: PPUSH
59731: CALL_OW 559
// p := 0 ;
59735: LD_ADDR_VAR 0 2
59739: PUSH
59740: LD_INT 0
59742: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59743: LD_INT 35
59745: PPUSH
59746: CALL_OW 67
// p := p + 1 ;
59750: LD_ADDR_VAR 0 2
59754: PUSH
59755: LD_VAR 0 2
59759: PUSH
59760: LD_INT 1
59762: PLUS
59763: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59764: LD_VAR 0 3
59768: PPUSH
59769: CALL_OW 256
59773: PUSH
59774: LD_INT 1000
59776: LESS
59777: IFFALSE 59791
// SetLives ( un , 1000 ) ;
59779: LD_VAR 0 3
59783: PPUSH
59784: LD_INT 1000
59786: PPUSH
59787: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
59791: LD_VAR 0 3
59795: PPUSH
59796: LD_INT 81
59798: PUSH
59799: LD_OWVAR 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 91
59810: PUSH
59811: LD_VAR 0 3
59815: PUSH
59816: LD_INT 30
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: LIST
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PPUSH
59828: CALL_OW 69
59832: PPUSH
59833: LD_VAR 0 3
59837: PPUSH
59838: CALL_OW 74
59842: PPUSH
59843: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
59847: LD_VAR 0 2
59851: PUSH
59852: LD_INT 80
59854: GREATER
59855: PUSH
59856: LD_VAR 0 3
59860: PPUSH
59861: CALL_OW 301
59865: OR
59866: IFFALSE 59743
// if un then
59868: LD_VAR 0 3
59872: IFFALSE 59883
// RemoveUnit ( un ) ;
59874: LD_VAR 0 3
59878: PPUSH
59879: CALL_OW 64
// end ;
59883: PPOPN 3
59885: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
59886: LD_EXP 110
59890: IFFALSE 60006
59892: GO 59894
59894: DISABLE
59895: LD_INT 0
59897: PPUSH
59898: PPUSH
59899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59900: LD_ADDR_VAR 0 2
59904: PUSH
59905: LD_INT 81
59907: PUSH
59908: LD_OWVAR 2
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 21
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PPUSH
59931: CALL_OW 69
59935: ST_TO_ADDR
// ToLua ( playComputer() ) ;
59936: LD_STRING playComputer()
59938: PPUSH
59939: CALL_OW 559
// if not tmp then
59943: LD_VAR 0 2
59947: NOT
59948: IFFALSE 59952
// exit ;
59950: GO 60006
// for i in tmp do
59952: LD_ADDR_VAR 0 1
59956: PUSH
59957: LD_VAR 0 2
59961: PUSH
59962: FOR_IN
59963: IFFALSE 60004
// for j := 1 to 4 do
59965: LD_ADDR_VAR 0 3
59969: PUSH
59970: DOUBLE
59971: LD_INT 1
59973: DEC
59974: ST_TO_ADDR
59975: LD_INT 4
59977: PUSH
59978: FOR_TO
59979: IFFALSE 60000
// SetSkill ( i , j , 10 ) ;
59981: LD_VAR 0 1
59985: PPUSH
59986: LD_VAR 0 3
59990: PPUSH
59991: LD_INT 10
59993: PPUSH
59994: CALL_OW 237
59998: GO 59978
60000: POP
60001: POP
60002: GO 59962
60004: POP
60005: POP
// end ;
60006: PPOPN 3
60008: END
// every 0 0$1 trigger s30 do var i , tmp ;
60009: LD_EXP 111
60013: IFFALSE 60082
60015: GO 60017
60017: DISABLE
60018: LD_INT 0
60020: PPUSH
60021: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60022: LD_ADDR_VAR 0 2
60026: PUSH
60027: LD_INT 22
60029: PUSH
60030: LD_OWVAR 2
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PPUSH
60039: CALL_OW 69
60043: ST_TO_ADDR
// if not tmp then
60044: LD_VAR 0 2
60048: NOT
60049: IFFALSE 60053
// exit ;
60051: GO 60082
// for i in tmp do
60053: LD_ADDR_VAR 0 1
60057: PUSH
60058: LD_VAR 0 2
60062: PUSH
60063: FOR_IN
60064: IFFALSE 60080
// SetLives ( i , 300 ) ;
60066: LD_VAR 0 1
60070: PPUSH
60071: LD_INT 300
60073: PPUSH
60074: CALL_OW 234
60078: GO 60063
60080: POP
60081: POP
// end ;
60082: PPOPN 2
60084: END
// every 0 0$1 trigger s60 do var i , tmp ;
60085: LD_EXP 112
60089: IFFALSE 60158
60091: GO 60093
60093: DISABLE
60094: LD_INT 0
60096: PPUSH
60097: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60098: LD_ADDR_VAR 0 2
60102: PUSH
60103: LD_INT 22
60105: PUSH
60106: LD_OWVAR 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PPUSH
60115: CALL_OW 69
60119: ST_TO_ADDR
// if not tmp then
60120: LD_VAR 0 2
60124: NOT
60125: IFFALSE 60129
// exit ;
60127: GO 60158
// for i in tmp do
60129: LD_ADDR_VAR 0 1
60133: PUSH
60134: LD_VAR 0 2
60138: PUSH
60139: FOR_IN
60140: IFFALSE 60156
// SetLives ( i , 600 ) ;
60142: LD_VAR 0 1
60146: PPUSH
60147: LD_INT 600
60149: PPUSH
60150: CALL_OW 234
60154: GO 60139
60156: POP
60157: POP
// end ;
60158: PPOPN 2
60160: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60161: LD_INT 0
60163: PPUSH
// case cmd of 301 :
60164: LD_VAR 0 1
60168: PUSH
60169: LD_INT 301
60171: DOUBLE
60172: EQUAL
60173: IFTRUE 60177
60175: GO 60209
60177: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60178: LD_VAR 0 6
60182: PPUSH
60183: LD_VAR 0 7
60187: PPUSH
60188: LD_VAR 0 8
60192: PPUSH
60193: LD_VAR 0 4
60197: PPUSH
60198: LD_VAR 0 5
60202: PPUSH
60203: CALL 61410 0 5
60207: GO 60330
60209: LD_INT 302
60211: DOUBLE
60212: EQUAL
60213: IFTRUE 60217
60215: GO 60254
60217: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60218: LD_VAR 0 6
60222: PPUSH
60223: LD_VAR 0 7
60227: PPUSH
60228: LD_VAR 0 8
60232: PPUSH
60233: LD_VAR 0 9
60237: PPUSH
60238: LD_VAR 0 4
60242: PPUSH
60243: LD_VAR 0 5
60247: PPUSH
60248: CALL 61501 0 6
60252: GO 60330
60254: LD_INT 303
60256: DOUBLE
60257: EQUAL
60258: IFTRUE 60262
60260: GO 60299
60262: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60263: LD_VAR 0 6
60267: PPUSH
60268: LD_VAR 0 7
60272: PPUSH
60273: LD_VAR 0 8
60277: PPUSH
60278: LD_VAR 0 9
60282: PPUSH
60283: LD_VAR 0 4
60287: PPUSH
60288: LD_VAR 0 5
60292: PPUSH
60293: CALL 60335 0 6
60297: GO 60330
60299: LD_INT 304
60301: DOUBLE
60302: EQUAL
60303: IFTRUE 60307
60305: GO 60329
60307: POP
// hHackTeleport ( unit , x , y ) ; end ;
60308: LD_VAR 0 2
60312: PPUSH
60313: LD_VAR 0 4
60317: PPUSH
60318: LD_VAR 0 5
60322: PPUSH
60323: CALL 62094 0 3
60327: GO 60330
60329: POP
// end ;
60330: LD_VAR 0 12
60334: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60335: LD_INT 0
60337: PPUSH
60338: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60339: LD_VAR 0 1
60343: PUSH
60344: LD_INT 1
60346: LESS
60347: PUSH
60348: LD_VAR 0 1
60352: PUSH
60353: LD_INT 3
60355: GREATER
60356: OR
60357: PUSH
60358: LD_VAR 0 5
60362: PPUSH
60363: LD_VAR 0 6
60367: PPUSH
60368: CALL_OW 428
60372: OR
60373: IFFALSE 60377
// exit ;
60375: GO 61097
// uc_side := your_side ;
60377: LD_ADDR_OWVAR 20
60381: PUSH
60382: LD_OWVAR 2
60386: ST_TO_ADDR
// uc_nation := nation ;
60387: LD_ADDR_OWVAR 21
60391: PUSH
60392: LD_VAR 0 1
60396: ST_TO_ADDR
// bc_level = 1 ;
60397: LD_ADDR_OWVAR 43
60401: PUSH
60402: LD_INT 1
60404: ST_TO_ADDR
// case btype of 1 :
60405: LD_VAR 0 2
60409: PUSH
60410: LD_INT 1
60412: DOUBLE
60413: EQUAL
60414: IFTRUE 60418
60416: GO 60429
60418: POP
// bc_type := b_depot ; 2 :
60419: LD_ADDR_OWVAR 42
60423: PUSH
60424: LD_INT 0
60426: ST_TO_ADDR
60427: GO 61041
60429: LD_INT 2
60431: DOUBLE
60432: EQUAL
60433: IFTRUE 60437
60435: GO 60448
60437: POP
// bc_type := b_warehouse ; 3 :
60438: LD_ADDR_OWVAR 42
60442: PUSH
60443: LD_INT 1
60445: ST_TO_ADDR
60446: GO 61041
60448: LD_INT 3
60450: DOUBLE
60451: EQUAL
60452: IFTRUE 60456
60454: GO 60467
60456: POP
// bc_type := b_lab ; 4 .. 9 :
60457: LD_ADDR_OWVAR 42
60461: PUSH
60462: LD_INT 6
60464: ST_TO_ADDR
60465: GO 61041
60467: LD_INT 4
60469: DOUBLE
60470: GREATEREQUAL
60471: IFFALSE 60479
60473: LD_INT 9
60475: DOUBLE
60476: LESSEQUAL
60477: IFTRUE 60481
60479: GO 60533
60481: POP
// begin bc_type := b_lab_half ;
60482: LD_ADDR_OWVAR 42
60486: PUSH
60487: LD_INT 7
60489: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60490: LD_ADDR_OWVAR 44
60494: PUSH
60495: LD_INT 10
60497: PUSH
60498: LD_INT 11
60500: PUSH
60501: LD_INT 12
60503: PUSH
60504: LD_INT 15
60506: PUSH
60507: LD_INT 14
60509: PUSH
60510: LD_INT 13
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: PUSH
60521: LD_VAR 0 2
60525: PUSH
60526: LD_INT 3
60528: MINUS
60529: ARRAY
60530: ST_TO_ADDR
// end ; 10 .. 13 :
60531: GO 61041
60533: LD_INT 10
60535: DOUBLE
60536: GREATEREQUAL
60537: IFFALSE 60545
60539: LD_INT 13
60541: DOUBLE
60542: LESSEQUAL
60543: IFTRUE 60547
60545: GO 60624
60547: POP
// begin bc_type := b_lab_full ;
60548: LD_ADDR_OWVAR 42
60552: PUSH
60553: LD_INT 8
60555: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60556: LD_ADDR_OWVAR 44
60560: PUSH
60561: LD_INT 10
60563: PUSH
60564: LD_INT 12
60566: PUSH
60567: LD_INT 14
60569: PUSH
60570: LD_INT 13
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: PUSH
60579: LD_VAR 0 2
60583: PUSH
60584: LD_INT 9
60586: MINUS
60587: ARRAY
60588: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60589: LD_ADDR_OWVAR 45
60593: PUSH
60594: LD_INT 11
60596: PUSH
60597: LD_INT 15
60599: PUSH
60600: LD_INT 12
60602: PUSH
60603: LD_INT 15
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: PUSH
60612: LD_VAR 0 2
60616: PUSH
60617: LD_INT 9
60619: MINUS
60620: ARRAY
60621: ST_TO_ADDR
// end ; 14 :
60622: GO 61041
60624: LD_INT 14
60626: DOUBLE
60627: EQUAL
60628: IFTRUE 60632
60630: GO 60643
60632: POP
// bc_type := b_workshop ; 15 :
60633: LD_ADDR_OWVAR 42
60637: PUSH
60638: LD_INT 2
60640: ST_TO_ADDR
60641: GO 61041
60643: LD_INT 15
60645: DOUBLE
60646: EQUAL
60647: IFTRUE 60651
60649: GO 60662
60651: POP
// bc_type := b_factory ; 16 :
60652: LD_ADDR_OWVAR 42
60656: PUSH
60657: LD_INT 3
60659: ST_TO_ADDR
60660: GO 61041
60662: LD_INT 16
60664: DOUBLE
60665: EQUAL
60666: IFTRUE 60670
60668: GO 60681
60670: POP
// bc_type := b_ext_gun ; 17 :
60671: LD_ADDR_OWVAR 42
60675: PUSH
60676: LD_INT 17
60678: ST_TO_ADDR
60679: GO 61041
60681: LD_INT 17
60683: DOUBLE
60684: EQUAL
60685: IFTRUE 60689
60687: GO 60717
60689: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60690: LD_ADDR_OWVAR 42
60694: PUSH
60695: LD_INT 19
60697: PUSH
60698: LD_INT 23
60700: PUSH
60701: LD_INT 19
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: PUSH
60709: LD_VAR 0 1
60713: ARRAY
60714: ST_TO_ADDR
60715: GO 61041
60717: LD_INT 18
60719: DOUBLE
60720: EQUAL
60721: IFTRUE 60725
60723: GO 60736
60725: POP
// bc_type := b_ext_radar ; 19 :
60726: LD_ADDR_OWVAR 42
60730: PUSH
60731: LD_INT 20
60733: ST_TO_ADDR
60734: GO 61041
60736: LD_INT 19
60738: DOUBLE
60739: EQUAL
60740: IFTRUE 60744
60742: GO 60755
60744: POP
// bc_type := b_ext_radio ; 20 :
60745: LD_ADDR_OWVAR 42
60749: PUSH
60750: LD_INT 22
60752: ST_TO_ADDR
60753: GO 61041
60755: LD_INT 20
60757: DOUBLE
60758: EQUAL
60759: IFTRUE 60763
60761: GO 60774
60763: POP
// bc_type := b_ext_siberium ; 21 :
60764: LD_ADDR_OWVAR 42
60768: PUSH
60769: LD_INT 21
60771: ST_TO_ADDR
60772: GO 61041
60774: LD_INT 21
60776: DOUBLE
60777: EQUAL
60778: IFTRUE 60782
60780: GO 60793
60782: POP
// bc_type := b_ext_computer ; 22 :
60783: LD_ADDR_OWVAR 42
60787: PUSH
60788: LD_INT 24
60790: ST_TO_ADDR
60791: GO 61041
60793: LD_INT 22
60795: DOUBLE
60796: EQUAL
60797: IFTRUE 60801
60799: GO 60812
60801: POP
// bc_type := b_ext_track ; 23 :
60802: LD_ADDR_OWVAR 42
60806: PUSH
60807: LD_INT 16
60809: ST_TO_ADDR
60810: GO 61041
60812: LD_INT 23
60814: DOUBLE
60815: EQUAL
60816: IFTRUE 60820
60818: GO 60831
60820: POP
// bc_type := b_ext_laser ; 24 :
60821: LD_ADDR_OWVAR 42
60825: PUSH
60826: LD_INT 25
60828: ST_TO_ADDR
60829: GO 61041
60831: LD_INT 24
60833: DOUBLE
60834: EQUAL
60835: IFTRUE 60839
60837: GO 60850
60839: POP
// bc_type := b_control_tower ; 25 :
60840: LD_ADDR_OWVAR 42
60844: PUSH
60845: LD_INT 36
60847: ST_TO_ADDR
60848: GO 61041
60850: LD_INT 25
60852: DOUBLE
60853: EQUAL
60854: IFTRUE 60858
60856: GO 60869
60858: POP
// bc_type := b_breastwork ; 26 :
60859: LD_ADDR_OWVAR 42
60863: PUSH
60864: LD_INT 31
60866: ST_TO_ADDR
60867: GO 61041
60869: LD_INT 26
60871: DOUBLE
60872: EQUAL
60873: IFTRUE 60877
60875: GO 60888
60877: POP
// bc_type := b_bunker ; 27 :
60878: LD_ADDR_OWVAR 42
60882: PUSH
60883: LD_INT 32
60885: ST_TO_ADDR
60886: GO 61041
60888: LD_INT 27
60890: DOUBLE
60891: EQUAL
60892: IFTRUE 60896
60894: GO 60907
60896: POP
// bc_type := b_turret ; 28 :
60897: LD_ADDR_OWVAR 42
60901: PUSH
60902: LD_INT 33
60904: ST_TO_ADDR
60905: GO 61041
60907: LD_INT 28
60909: DOUBLE
60910: EQUAL
60911: IFTRUE 60915
60913: GO 60926
60915: POP
// bc_type := b_armoury ; 29 :
60916: LD_ADDR_OWVAR 42
60920: PUSH
60921: LD_INT 4
60923: ST_TO_ADDR
60924: GO 61041
60926: LD_INT 29
60928: DOUBLE
60929: EQUAL
60930: IFTRUE 60934
60932: GO 60945
60934: POP
// bc_type := b_barracks ; 30 :
60935: LD_ADDR_OWVAR 42
60939: PUSH
60940: LD_INT 5
60942: ST_TO_ADDR
60943: GO 61041
60945: LD_INT 30
60947: DOUBLE
60948: EQUAL
60949: IFTRUE 60953
60951: GO 60964
60953: POP
// bc_type := b_solar_power ; 31 :
60954: LD_ADDR_OWVAR 42
60958: PUSH
60959: LD_INT 27
60961: ST_TO_ADDR
60962: GO 61041
60964: LD_INT 31
60966: DOUBLE
60967: EQUAL
60968: IFTRUE 60972
60970: GO 60983
60972: POP
// bc_type := b_oil_power ; 32 :
60973: LD_ADDR_OWVAR 42
60977: PUSH
60978: LD_INT 26
60980: ST_TO_ADDR
60981: GO 61041
60983: LD_INT 32
60985: DOUBLE
60986: EQUAL
60987: IFTRUE 60991
60989: GO 61002
60991: POP
// bc_type := b_siberite_power ; 33 :
60992: LD_ADDR_OWVAR 42
60996: PUSH
60997: LD_INT 28
60999: ST_TO_ADDR
61000: GO 61041
61002: LD_INT 33
61004: DOUBLE
61005: EQUAL
61006: IFTRUE 61010
61008: GO 61021
61010: POP
// bc_type := b_oil_mine ; 34 :
61011: LD_ADDR_OWVAR 42
61015: PUSH
61016: LD_INT 29
61018: ST_TO_ADDR
61019: GO 61041
61021: LD_INT 34
61023: DOUBLE
61024: EQUAL
61025: IFTRUE 61029
61027: GO 61040
61029: POP
// bc_type := b_siberite_mine ; end ;
61030: LD_ADDR_OWVAR 42
61034: PUSH
61035: LD_INT 30
61037: ST_TO_ADDR
61038: GO 61041
61040: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61041: LD_ADDR_VAR 0 8
61045: PUSH
61046: LD_VAR 0 5
61050: PPUSH
61051: LD_VAR 0 6
61055: PPUSH
61056: LD_VAR 0 3
61060: PPUSH
61061: CALL_OW 47
61065: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61066: LD_OWVAR 42
61070: PUSH
61071: LD_INT 32
61073: PUSH
61074: LD_INT 33
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: IN
61081: IFFALSE 61097
// PlaceWeaponTurret ( b , weapon ) ;
61083: LD_VAR 0 8
61087: PPUSH
61088: LD_VAR 0 4
61092: PPUSH
61093: CALL_OW 431
// end ;
61097: LD_VAR 0 7
61101: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61102: LD_INT 0
61104: PPUSH
61105: PPUSH
61106: PPUSH
61107: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61108: LD_ADDR_VAR 0 4
61112: PUSH
61113: LD_INT 22
61115: PUSH
61116: LD_OWVAR 2
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: LD_INT 30
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 30
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PPUSH
61157: CALL_OW 69
61161: ST_TO_ADDR
// if not tmp then
61162: LD_VAR 0 4
61166: NOT
61167: IFFALSE 61171
// exit ;
61169: GO 61230
// for i in tmp do
61171: LD_ADDR_VAR 0 2
61175: PUSH
61176: LD_VAR 0 4
61180: PUSH
61181: FOR_IN
61182: IFFALSE 61228
// for j = 1 to 3 do
61184: LD_ADDR_VAR 0 3
61188: PUSH
61189: DOUBLE
61190: LD_INT 1
61192: DEC
61193: ST_TO_ADDR
61194: LD_INT 3
61196: PUSH
61197: FOR_TO
61198: IFFALSE 61224
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61200: LD_VAR 0 2
61204: PPUSH
61205: CALL_OW 274
61209: PPUSH
61210: LD_VAR 0 3
61214: PPUSH
61215: LD_INT 99999
61217: PPUSH
61218: CALL_OW 277
61222: GO 61197
61224: POP
61225: POP
61226: GO 61181
61228: POP
61229: POP
// end ;
61230: LD_VAR 0 1
61234: RET
// export function hHackSetLevel10 ; var i , j ; begin
61235: LD_INT 0
61237: PPUSH
61238: PPUSH
61239: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61240: LD_ADDR_VAR 0 2
61244: PUSH
61245: LD_INT 21
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PPUSH
61255: CALL_OW 69
61259: PUSH
61260: FOR_IN
61261: IFFALSE 61313
// if IsSelected ( i ) then
61263: LD_VAR 0 2
61267: PPUSH
61268: CALL_OW 306
61272: IFFALSE 61311
// begin for j := 1 to 4 do
61274: LD_ADDR_VAR 0 3
61278: PUSH
61279: DOUBLE
61280: LD_INT 1
61282: DEC
61283: ST_TO_ADDR
61284: LD_INT 4
61286: PUSH
61287: FOR_TO
61288: IFFALSE 61309
// SetSkill ( i , j , 10 ) ;
61290: LD_VAR 0 2
61294: PPUSH
61295: LD_VAR 0 3
61299: PPUSH
61300: LD_INT 10
61302: PPUSH
61303: CALL_OW 237
61307: GO 61287
61309: POP
61310: POP
// end ;
61311: GO 61260
61313: POP
61314: POP
// end ;
61315: LD_VAR 0 1
61319: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61320: LD_INT 0
61322: PPUSH
61323: PPUSH
61324: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61325: LD_ADDR_VAR 0 2
61329: PUSH
61330: LD_INT 22
61332: PUSH
61333: LD_OWVAR 2
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 21
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PPUSH
61356: CALL_OW 69
61360: PUSH
61361: FOR_IN
61362: IFFALSE 61403
// begin for j := 1 to 4 do
61364: LD_ADDR_VAR 0 3
61368: PUSH
61369: DOUBLE
61370: LD_INT 1
61372: DEC
61373: ST_TO_ADDR
61374: LD_INT 4
61376: PUSH
61377: FOR_TO
61378: IFFALSE 61399
// SetSkill ( i , j , 10 ) ;
61380: LD_VAR 0 2
61384: PPUSH
61385: LD_VAR 0 3
61389: PPUSH
61390: LD_INT 10
61392: PPUSH
61393: CALL_OW 237
61397: GO 61377
61399: POP
61400: POP
// end ;
61401: GO 61361
61403: POP
61404: POP
// end ;
61405: LD_VAR 0 1
61409: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61410: LD_INT 0
61412: PPUSH
// uc_side := your_side ;
61413: LD_ADDR_OWVAR 20
61417: PUSH
61418: LD_OWVAR 2
61422: ST_TO_ADDR
// uc_nation := nation ;
61423: LD_ADDR_OWVAR 21
61427: PUSH
61428: LD_VAR 0 1
61432: ST_TO_ADDR
// InitHc ;
61433: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61437: LD_INT 0
61439: PPUSH
61440: LD_VAR 0 2
61444: PPUSH
61445: LD_VAR 0 3
61449: PPUSH
61450: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61454: LD_VAR 0 4
61458: PPUSH
61459: LD_VAR 0 5
61463: PPUSH
61464: CALL_OW 428
61468: PUSH
61469: LD_INT 0
61471: EQUAL
61472: IFFALSE 61496
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61474: CALL_OW 44
61478: PPUSH
61479: LD_VAR 0 4
61483: PPUSH
61484: LD_VAR 0 5
61488: PPUSH
61489: LD_INT 1
61491: PPUSH
61492: CALL_OW 48
// end ;
61496: LD_VAR 0 6
61500: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61501: LD_INT 0
61503: PPUSH
61504: PPUSH
// uc_side := your_side ;
61505: LD_ADDR_OWVAR 20
61509: PUSH
61510: LD_OWVAR 2
61514: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61515: LD_VAR 0 1
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: LD_INT 4
61531: PUSH
61532: LD_INT 5
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: IN
61542: IFFALSE 61554
// uc_nation := nation_american else
61544: LD_ADDR_OWVAR 21
61548: PUSH
61549: LD_INT 1
61551: ST_TO_ADDR
61552: GO 61597
// if chassis in [ 11 , 12 , 13 , 14 ] then
61554: LD_VAR 0 1
61558: PUSH
61559: LD_INT 11
61561: PUSH
61562: LD_INT 12
61564: PUSH
61565: LD_INT 13
61567: PUSH
61568: LD_INT 14
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: IN
61577: IFFALSE 61589
// uc_nation := nation_arabian else
61579: LD_ADDR_OWVAR 21
61583: PUSH
61584: LD_INT 2
61586: ST_TO_ADDR
61587: GO 61597
// uc_nation := nation_russian ;
61589: LD_ADDR_OWVAR 21
61593: PUSH
61594: LD_INT 3
61596: ST_TO_ADDR
// vc_chassis := chassis ;
61597: LD_ADDR_OWVAR 37
61601: PUSH
61602: LD_VAR 0 1
61606: ST_TO_ADDR
// vc_engine := engine ;
61607: LD_ADDR_OWVAR 39
61611: PUSH
61612: LD_VAR 0 2
61616: ST_TO_ADDR
// vc_control := control ;
61617: LD_ADDR_OWVAR 38
61621: PUSH
61622: LD_VAR 0 3
61626: ST_TO_ADDR
// vc_weapon := weapon ;
61627: LD_ADDR_OWVAR 40
61631: PUSH
61632: LD_VAR 0 4
61636: ST_TO_ADDR
// un := CreateVehicle ;
61637: LD_ADDR_VAR 0 8
61641: PUSH
61642: CALL_OW 45
61646: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61647: LD_VAR 0 8
61651: PPUSH
61652: LD_INT 0
61654: PPUSH
61655: LD_INT 5
61657: PPUSH
61658: CALL_OW 12
61662: PPUSH
61663: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61667: LD_VAR 0 8
61671: PPUSH
61672: LD_VAR 0 5
61676: PPUSH
61677: LD_VAR 0 6
61681: PPUSH
61682: LD_INT 1
61684: PPUSH
61685: CALL_OW 48
// end ;
61689: LD_VAR 0 7
61693: RET
// export hInvincible ; every 1 do
61694: GO 61696
61696: DISABLE
// hInvincible := [ ] ;
61697: LD_ADDR_EXP 113
61701: PUSH
61702: EMPTY
61703: ST_TO_ADDR
61704: END
// every 10 do var i ;
61705: GO 61707
61707: DISABLE
61708: LD_INT 0
61710: PPUSH
// begin enable ;
61711: ENABLE
// if not hInvincible then
61712: LD_EXP 113
61716: NOT
61717: IFFALSE 61721
// exit ;
61719: GO 61765
// for i in hInvincible do
61721: LD_ADDR_VAR 0 1
61725: PUSH
61726: LD_EXP 113
61730: PUSH
61731: FOR_IN
61732: IFFALSE 61763
// if GetLives ( i ) < 1000 then
61734: LD_VAR 0 1
61738: PPUSH
61739: CALL_OW 256
61743: PUSH
61744: LD_INT 1000
61746: LESS
61747: IFFALSE 61761
// SetLives ( i , 1000 ) ;
61749: LD_VAR 0 1
61753: PPUSH
61754: LD_INT 1000
61756: PPUSH
61757: CALL_OW 234
61761: GO 61731
61763: POP
61764: POP
// end ;
61765: PPOPN 1
61767: END
// export function hHackInvincible ; var i ; begin
61768: LD_INT 0
61770: PPUSH
61771: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61772: LD_ADDR_VAR 0 2
61776: PUSH
61777: LD_INT 2
61779: PUSH
61780: LD_INT 21
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 21
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: LIST
61804: PPUSH
61805: CALL_OW 69
61809: PUSH
61810: FOR_IN
61811: IFFALSE 61872
// if IsSelected ( i ) then
61813: LD_VAR 0 2
61817: PPUSH
61818: CALL_OW 306
61822: IFFALSE 61870
// begin if i in hInvincible then
61824: LD_VAR 0 2
61828: PUSH
61829: LD_EXP 113
61833: IN
61834: IFFALSE 61854
// hInvincible := hInvincible diff i else
61836: LD_ADDR_EXP 113
61840: PUSH
61841: LD_EXP 113
61845: PUSH
61846: LD_VAR 0 2
61850: DIFF
61851: ST_TO_ADDR
61852: GO 61870
// hInvincible := hInvincible union i ;
61854: LD_ADDR_EXP 113
61858: PUSH
61859: LD_EXP 113
61863: PUSH
61864: LD_VAR 0 2
61868: UNION
61869: ST_TO_ADDR
// end ;
61870: GO 61810
61872: POP
61873: POP
// end ;
61874: LD_VAR 0 1
61878: RET
// export function hHackInvisible ; var i , j ; begin
61879: LD_INT 0
61881: PPUSH
61882: PPUSH
61883: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61884: LD_ADDR_VAR 0 2
61888: PUSH
61889: LD_INT 21
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PPUSH
61899: CALL_OW 69
61903: PUSH
61904: FOR_IN
61905: IFFALSE 61929
// if IsSelected ( i ) then
61907: LD_VAR 0 2
61911: PPUSH
61912: CALL_OW 306
61916: IFFALSE 61927
// ComForceInvisible ( i ) ;
61918: LD_VAR 0 2
61922: PPUSH
61923: CALL_OW 496
61927: GO 61904
61929: POP
61930: POP
// end ;
61931: LD_VAR 0 1
61935: RET
// export function hHackChangeYourSide ; begin
61936: LD_INT 0
61938: PPUSH
// if your_side = 8 then
61939: LD_OWVAR 2
61943: PUSH
61944: LD_INT 8
61946: EQUAL
61947: IFFALSE 61959
// your_side := 0 else
61949: LD_ADDR_OWVAR 2
61953: PUSH
61954: LD_INT 0
61956: ST_TO_ADDR
61957: GO 61973
// your_side := your_side + 1 ;
61959: LD_ADDR_OWVAR 2
61963: PUSH
61964: LD_OWVAR 2
61968: PUSH
61969: LD_INT 1
61971: PLUS
61972: ST_TO_ADDR
// end ;
61973: LD_VAR 0 1
61977: RET
// export function hHackChangeUnitSide ; var i , j ; begin
61978: LD_INT 0
61980: PPUSH
61981: PPUSH
61982: PPUSH
// for i in all_units do
61983: LD_ADDR_VAR 0 2
61987: PUSH
61988: LD_OWVAR 3
61992: PUSH
61993: FOR_IN
61994: IFFALSE 62072
// if IsSelected ( i ) then
61996: LD_VAR 0 2
62000: PPUSH
62001: CALL_OW 306
62005: IFFALSE 62070
// begin j := GetSide ( i ) ;
62007: LD_ADDR_VAR 0 3
62011: PUSH
62012: LD_VAR 0 2
62016: PPUSH
62017: CALL_OW 255
62021: ST_TO_ADDR
// if j = 8 then
62022: LD_VAR 0 3
62026: PUSH
62027: LD_INT 8
62029: EQUAL
62030: IFFALSE 62042
// j := 0 else
62032: LD_ADDR_VAR 0 3
62036: PUSH
62037: LD_INT 0
62039: ST_TO_ADDR
62040: GO 62056
// j := j + 1 ;
62042: LD_ADDR_VAR 0 3
62046: PUSH
62047: LD_VAR 0 3
62051: PUSH
62052: LD_INT 1
62054: PLUS
62055: ST_TO_ADDR
// SetSide ( i , j ) ;
62056: LD_VAR 0 2
62060: PPUSH
62061: LD_VAR 0 3
62065: PPUSH
62066: CALL_OW 235
// end ;
62070: GO 61993
62072: POP
62073: POP
// end ;
62074: LD_VAR 0 1
62078: RET
// export function hHackFog ; begin
62079: LD_INT 0
62081: PPUSH
// FogOff ( true ) ;
62082: LD_INT 1
62084: PPUSH
62085: CALL_OW 344
// end ;
62089: LD_VAR 0 1
62093: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62094: LD_INT 0
62096: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62097: LD_VAR 0 1
62101: PPUSH
62102: LD_VAR 0 2
62106: PPUSH
62107: LD_VAR 0 3
62111: PPUSH
62112: LD_INT 1
62114: PPUSH
62115: LD_INT 1
62117: PPUSH
62118: CALL_OW 483
// CenterOnXY ( x , y ) ;
62122: LD_VAR 0 2
62126: PPUSH
62127: LD_VAR 0 3
62131: PPUSH
62132: CALL_OW 84
// end ;
62136: LD_VAR 0 4
62140: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62141: LD_INT 0
62143: PPUSH
62144: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62145: LD_VAR 0 1
62149: NOT
62150: PUSH
62151: LD_VAR 0 2
62155: PPUSH
62156: LD_VAR 0 3
62160: PPUSH
62161: CALL_OW 488
62165: NOT
62166: OR
62167: PUSH
62168: LD_VAR 0 1
62172: PPUSH
62173: CALL_OW 266
62177: PUSH
62178: LD_INT 3
62180: NONEQUAL
62181: PUSH
62182: LD_VAR 0 1
62186: PPUSH
62187: CALL_OW 247
62191: PUSH
62192: LD_INT 1
62194: EQUAL
62195: NOT
62196: AND
62197: OR
62198: IFFALSE 62202
// exit ;
62200: GO 62351
// if GetType ( factory ) = unit_human then
62202: LD_VAR 0 1
62206: PPUSH
62207: CALL_OW 247
62211: PUSH
62212: LD_INT 1
62214: EQUAL
62215: IFFALSE 62232
// factory := IsInUnit ( factory ) ;
62217: LD_ADDR_VAR 0 1
62221: PUSH
62222: LD_VAR 0 1
62226: PPUSH
62227: CALL_OW 310
62231: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62232: LD_VAR 0 1
62236: PPUSH
62237: CALL_OW 266
62241: PUSH
62242: LD_INT 3
62244: NONEQUAL
62245: IFFALSE 62249
// exit ;
62247: GO 62351
// if HexInfo ( x , y ) = factory then
62249: LD_VAR 0 2
62253: PPUSH
62254: LD_VAR 0 3
62258: PPUSH
62259: CALL_OW 428
62263: PUSH
62264: LD_VAR 0 1
62268: EQUAL
62269: IFFALSE 62296
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
62271: LD_ADDR_EXP 114
62275: PUSH
62276: LD_EXP 114
62280: PPUSH
62281: LD_VAR 0 1
62285: PPUSH
62286: LD_INT 0
62288: PPUSH
62289: CALL_OW 1
62293: ST_TO_ADDR
62294: GO 62347
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
62296: LD_ADDR_EXP 114
62300: PUSH
62301: LD_EXP 114
62305: PPUSH
62306: LD_VAR 0 1
62310: PPUSH
62311: LD_VAR 0 1
62315: PPUSH
62316: CALL_OW 255
62320: PUSH
62321: LD_VAR 0 1
62325: PUSH
62326: LD_VAR 0 2
62330: PUSH
62331: LD_VAR 0 3
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: PPUSH
62342: CALL_OW 1
62346: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62347: CALL 62356 0 0
// end ;
62351: LD_VAR 0 4
62355: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62356: LD_INT 0
62358: PPUSH
62359: PPUSH
62360: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62361: LD_STRING resetFactoryWaypoint();
62363: PPUSH
62364: CALL_OW 559
// if factoryWaypoints then
62368: LD_EXP 114
62372: IFFALSE 62498
// begin list := PrepareArray ( factoryWaypoints ) ;
62374: LD_ADDR_VAR 0 3
62378: PUSH
62379: LD_EXP 114
62383: PPUSH
62384: CALL 47592 0 1
62388: ST_TO_ADDR
// for i := 1 to list do
62389: LD_ADDR_VAR 0 2
62393: PUSH
62394: DOUBLE
62395: LD_INT 1
62397: DEC
62398: ST_TO_ADDR
62399: LD_VAR 0 3
62403: PUSH
62404: FOR_TO
62405: IFFALSE 62496
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62407: LD_STRING setFactoryWaypointXY(
62409: PUSH
62410: LD_VAR 0 3
62414: PUSH
62415: LD_VAR 0 2
62419: ARRAY
62420: PUSH
62421: LD_INT 1
62423: ARRAY
62424: STR
62425: PUSH
62426: LD_STRING ,
62428: STR
62429: PUSH
62430: LD_VAR 0 3
62434: PUSH
62435: LD_VAR 0 2
62439: ARRAY
62440: PUSH
62441: LD_INT 2
62443: ARRAY
62444: STR
62445: PUSH
62446: LD_STRING ,
62448: STR
62449: PUSH
62450: LD_VAR 0 3
62454: PUSH
62455: LD_VAR 0 2
62459: ARRAY
62460: PUSH
62461: LD_INT 3
62463: ARRAY
62464: STR
62465: PUSH
62466: LD_STRING ,
62468: STR
62469: PUSH
62470: LD_VAR 0 3
62474: PUSH
62475: LD_VAR 0 2
62479: ARRAY
62480: PUSH
62481: LD_INT 4
62483: ARRAY
62484: STR
62485: PUSH
62486: LD_STRING )
62488: STR
62489: PPUSH
62490: CALL_OW 559
62494: GO 62404
62496: POP
62497: POP
// end ; end ;
62498: LD_VAR 0 1
62502: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62503: LD_INT 0
62505: PPUSH
// if HexInfo ( x , y ) = warehouse then
62506: LD_VAR 0 2
62510: PPUSH
62511: LD_VAR 0 3
62515: PPUSH
62516: CALL_OW 428
62520: PUSH
62521: LD_VAR 0 1
62525: EQUAL
62526: IFFALSE 62553
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62528: LD_ADDR_EXP 115
62532: PUSH
62533: LD_EXP 115
62537: PPUSH
62538: LD_VAR 0 1
62542: PPUSH
62543: LD_INT 0
62545: PPUSH
62546: CALL_OW 1
62550: ST_TO_ADDR
62551: GO 62604
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62553: LD_ADDR_EXP 115
62557: PUSH
62558: LD_EXP 115
62562: PPUSH
62563: LD_VAR 0 1
62567: PPUSH
62568: LD_VAR 0 1
62572: PPUSH
62573: CALL_OW 255
62577: PUSH
62578: LD_VAR 0 1
62582: PUSH
62583: LD_VAR 0 2
62587: PUSH
62588: LD_VAR 0 3
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: PPUSH
62599: CALL_OW 1
62603: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62604: CALL 62613 0 0
// end ;
62608: LD_VAR 0 4
62612: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62613: LD_INT 0
62615: PPUSH
62616: PPUSH
62617: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62618: LD_STRING resetWarehouseGatheringPoints();
62620: PPUSH
62621: CALL_OW 559
// if warehouseGatheringPoints then
62625: LD_EXP 115
62629: IFFALSE 62755
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62631: LD_ADDR_VAR 0 3
62635: PUSH
62636: LD_EXP 115
62640: PPUSH
62641: CALL 47592 0 1
62645: ST_TO_ADDR
// for i := 1 to list do
62646: LD_ADDR_VAR 0 2
62650: PUSH
62651: DOUBLE
62652: LD_INT 1
62654: DEC
62655: ST_TO_ADDR
62656: LD_VAR 0 3
62660: PUSH
62661: FOR_TO
62662: IFFALSE 62753
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62664: LD_STRING setWarehouseGatheringPointXY(
62666: PUSH
62667: LD_VAR 0 3
62671: PUSH
62672: LD_VAR 0 2
62676: ARRAY
62677: PUSH
62678: LD_INT 1
62680: ARRAY
62681: STR
62682: PUSH
62683: LD_STRING ,
62685: STR
62686: PUSH
62687: LD_VAR 0 3
62691: PUSH
62692: LD_VAR 0 2
62696: ARRAY
62697: PUSH
62698: LD_INT 2
62700: ARRAY
62701: STR
62702: PUSH
62703: LD_STRING ,
62705: STR
62706: PUSH
62707: LD_VAR 0 3
62711: PUSH
62712: LD_VAR 0 2
62716: ARRAY
62717: PUSH
62718: LD_INT 3
62720: ARRAY
62721: STR
62722: PUSH
62723: LD_STRING ,
62725: STR
62726: PUSH
62727: LD_VAR 0 3
62731: PUSH
62732: LD_VAR 0 2
62736: ARRAY
62737: PUSH
62738: LD_INT 4
62740: ARRAY
62741: STR
62742: PUSH
62743: LD_STRING )
62745: STR
62746: PPUSH
62747: CALL_OW 559
62751: GO 62661
62753: POP
62754: POP
// end ; end ;
62755: LD_VAR 0 1
62759: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
62760: LD_EXP 115
62764: IFFALSE 63451
62766: GO 62768
62768: DISABLE
62769: LD_INT 0
62771: PPUSH
62772: PPUSH
62773: PPUSH
62774: PPUSH
62775: PPUSH
62776: PPUSH
62777: PPUSH
62778: PPUSH
62779: PPUSH
// begin enable ;
62780: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
62781: LD_ADDR_VAR 0 3
62785: PUSH
62786: LD_EXP 115
62790: PPUSH
62791: CALL 47592 0 1
62795: ST_TO_ADDR
// if not list then
62796: LD_VAR 0 3
62800: NOT
62801: IFFALSE 62805
// exit ;
62803: GO 63451
// for i := 1 to list do
62805: LD_ADDR_VAR 0 1
62809: PUSH
62810: DOUBLE
62811: LD_INT 1
62813: DEC
62814: ST_TO_ADDR
62815: LD_VAR 0 3
62819: PUSH
62820: FOR_TO
62821: IFFALSE 63449
// begin depot := list [ i ] [ 2 ] ;
62823: LD_ADDR_VAR 0 8
62827: PUSH
62828: LD_VAR 0 3
62832: PUSH
62833: LD_VAR 0 1
62837: ARRAY
62838: PUSH
62839: LD_INT 2
62841: ARRAY
62842: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
62843: LD_ADDR_VAR 0 5
62847: PUSH
62848: LD_VAR 0 3
62852: PUSH
62853: LD_VAR 0 1
62857: ARRAY
62858: PUSH
62859: LD_INT 1
62861: ARRAY
62862: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
62863: LD_VAR 0 8
62867: PPUSH
62868: CALL_OW 301
62872: PUSH
62873: LD_VAR 0 5
62877: PUSH
62878: LD_VAR 0 8
62882: PPUSH
62883: CALL_OW 255
62887: NONEQUAL
62888: OR
62889: IFFALSE 62918
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
62891: LD_ADDR_EXP 115
62895: PUSH
62896: LD_EXP 115
62900: PPUSH
62901: LD_VAR 0 8
62905: PPUSH
62906: LD_INT 0
62908: PPUSH
62909: CALL_OW 1
62913: ST_TO_ADDR
// exit ;
62914: POP
62915: POP
62916: GO 63451
// end ; x := list [ i ] [ 3 ] ;
62918: LD_ADDR_VAR 0 6
62922: PUSH
62923: LD_VAR 0 3
62927: PUSH
62928: LD_VAR 0 1
62932: ARRAY
62933: PUSH
62934: LD_INT 3
62936: ARRAY
62937: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
62938: LD_ADDR_VAR 0 7
62942: PUSH
62943: LD_VAR 0 3
62947: PUSH
62948: LD_VAR 0 1
62952: ARRAY
62953: PUSH
62954: LD_INT 4
62956: ARRAY
62957: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
62958: LD_ADDR_VAR 0 9
62962: PUSH
62963: LD_VAR 0 6
62967: PPUSH
62968: LD_VAR 0 7
62972: PPUSH
62973: LD_INT 16
62975: PPUSH
62976: CALL 46176 0 3
62980: ST_TO_ADDR
// if not cratesNearbyPoint then
62981: LD_VAR 0 9
62985: NOT
62986: IFFALSE 62992
// exit ;
62988: POP
62989: POP
62990: GO 63451
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
62992: LD_ADDR_VAR 0 4
62996: PUSH
62997: LD_INT 22
62999: PUSH
63000: LD_VAR 0 5
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 3
63011: PUSH
63012: LD_INT 60
63014: PUSH
63015: EMPTY
63016: LIST
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 91
63024: PUSH
63025: LD_VAR 0 8
63029: PUSH
63030: LD_INT 6
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 2
63040: PUSH
63041: LD_INT 25
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 25
63053: PUSH
63054: LD_INT 16
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: LIST
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: PPUSH
63072: CALL_OW 69
63076: PUSH
63077: LD_VAR 0 8
63081: PPUSH
63082: CALL_OW 313
63086: PPUSH
63087: LD_INT 3
63089: PUSH
63090: LD_INT 60
63092: PUSH
63093: EMPTY
63094: LIST
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 2
63102: PUSH
63103: LD_INT 25
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 25
63115: PUSH
63116: LD_INT 16
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: LIST
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PPUSH
63132: CALL_OW 72
63136: UNION
63137: ST_TO_ADDR
// if tmp then
63138: LD_VAR 0 4
63142: IFFALSE 63222
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63144: LD_ADDR_VAR 0 4
63148: PUSH
63149: LD_VAR 0 4
63153: PPUSH
63154: LD_INT 3
63156: PPUSH
63157: CALL 44143 0 2
63161: ST_TO_ADDR
// for j in tmp do
63162: LD_ADDR_VAR 0 2
63166: PUSH
63167: LD_VAR 0 4
63171: PUSH
63172: FOR_IN
63173: IFFALSE 63216
// begin if IsInUnit ( j ) then
63175: LD_VAR 0 2
63179: PPUSH
63180: CALL_OW 310
63184: IFFALSE 63195
// ComExit ( j ) ;
63186: LD_VAR 0 2
63190: PPUSH
63191: CALL 44226 0 1
// AddComCollect ( j , x , y ) ;
63195: LD_VAR 0 2
63199: PPUSH
63200: LD_VAR 0 6
63204: PPUSH
63205: LD_VAR 0 7
63209: PPUSH
63210: CALL_OW 177
// end ;
63214: GO 63172
63216: POP
63217: POP
// exit ;
63218: POP
63219: POP
63220: GO 63451
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63222: LD_ADDR_VAR 0 4
63226: PUSH
63227: LD_INT 22
63229: PUSH
63230: LD_VAR 0 5
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 91
63241: PUSH
63242: LD_VAR 0 8
63246: PUSH
63247: LD_INT 8
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: PUSH
63258: LD_INT 34
63260: PUSH
63261: LD_INT 12
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 34
63270: PUSH
63271: LD_INT 51
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 34
63280: PUSH
63281: LD_INT 32
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 34
63290: PUSH
63291: LD_EXP 39
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: LIST
63311: PPUSH
63312: CALL_OW 69
63316: ST_TO_ADDR
// if tmp then
63317: LD_VAR 0 4
63321: IFFALSE 63447
// begin for j in tmp do
63323: LD_ADDR_VAR 0 2
63327: PUSH
63328: LD_VAR 0 4
63332: PUSH
63333: FOR_IN
63334: IFFALSE 63445
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63336: LD_VAR 0 2
63340: PPUSH
63341: CALL_OW 262
63345: PUSH
63346: LD_INT 3
63348: EQUAL
63349: PUSH
63350: LD_VAR 0 2
63354: PPUSH
63355: CALL_OW 261
63359: PUSH
63360: LD_INT 20
63362: GREATER
63363: OR
63364: PUSH
63365: LD_VAR 0 2
63369: PPUSH
63370: CALL_OW 314
63374: NOT
63375: AND
63376: PUSH
63377: LD_VAR 0 2
63381: PPUSH
63382: CALL_OW 263
63386: PUSH
63387: LD_INT 1
63389: NONEQUAL
63390: PUSH
63391: LD_VAR 0 2
63395: PPUSH
63396: CALL_OW 311
63400: OR
63401: AND
63402: IFFALSE 63443
// begin ComCollect ( j , x , y ) ;
63404: LD_VAR 0 2
63408: PPUSH
63409: LD_VAR 0 6
63413: PPUSH
63414: LD_VAR 0 7
63418: PPUSH
63419: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63423: LD_VAR 0 2
63427: PPUSH
63428: LD_VAR 0 8
63432: PPUSH
63433: CALL_OW 172
// exit ;
63437: POP
63438: POP
63439: POP
63440: POP
63441: GO 63451
// end ;
63443: GO 63333
63445: POP
63446: POP
// end ; end ;
63447: GO 62820
63449: POP
63450: POP
// end ; end_of_file
63451: PPOPN 9
63453: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63454: LD_VAR 0 1
63458: PUSH
63459: LD_INT 200
63461: DOUBLE
63462: GREATEREQUAL
63463: IFFALSE 63471
63465: LD_INT 299
63467: DOUBLE
63468: LESSEQUAL
63469: IFTRUE 63473
63471: GO 63505
63473: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63474: LD_VAR 0 1
63478: PPUSH
63479: LD_VAR 0 2
63483: PPUSH
63484: LD_VAR 0 3
63488: PPUSH
63489: LD_VAR 0 4
63493: PPUSH
63494: LD_VAR 0 5
63498: PPUSH
63499: CALL 63995 0 5
63503: GO 63582
63505: LD_INT 300
63507: DOUBLE
63508: GREATEREQUAL
63509: IFFALSE 63517
63511: LD_INT 399
63513: DOUBLE
63514: LESSEQUAL
63515: IFTRUE 63519
63517: GO 63581
63519: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63520: LD_VAR 0 1
63524: PPUSH
63525: LD_VAR 0 2
63529: PPUSH
63530: LD_VAR 0 3
63534: PPUSH
63535: LD_VAR 0 4
63539: PPUSH
63540: LD_VAR 0 5
63544: PPUSH
63545: LD_VAR 0 6
63549: PPUSH
63550: LD_VAR 0 7
63554: PPUSH
63555: LD_VAR 0 8
63559: PPUSH
63560: LD_VAR 0 9
63564: PPUSH
63565: LD_VAR 0 10
63569: PPUSH
63570: LD_VAR 0 11
63574: PPUSH
63575: CALL 60161 0 11
63579: GO 63582
63581: POP
// end ;
63582: PPOPN 11
63584: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63585: LD_VAR 0 1
63589: PPUSH
63590: LD_VAR 0 2
63594: PPUSH
63595: LD_VAR 0 3
63599: PPUSH
63600: LD_VAR 0 4
63604: PPUSH
63605: LD_VAR 0 5
63609: PPUSH
63610: CALL 63731 0 5
// end ; end_of_file
63614: PPOPN 5
63616: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
63617: LD_INT 0
63619: PPUSH
63620: PPUSH
63621: PPUSH
63622: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
63623: LD_VAR 0 1
63627: PPUSH
63628: CALL_OW 264
63632: PUSH
63633: LD_EXP 42
63637: EQUAL
63638: IFFALSE 63710
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
63640: LD_INT 68
63642: PPUSH
63643: LD_VAR 0 1
63647: PPUSH
63648: CALL_OW 255
63652: PPUSH
63653: CALL_OW 321
63657: PUSH
63658: LD_INT 2
63660: EQUAL
63661: IFFALSE 63673
// eff := 70 else
63663: LD_ADDR_VAR 0 4
63667: PUSH
63668: LD_INT 70
63670: ST_TO_ADDR
63671: GO 63681
// eff := 30 ;
63673: LD_ADDR_VAR 0 4
63677: PUSH
63678: LD_INT 30
63680: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
63681: LD_VAR 0 1
63685: PPUSH
63686: CALL_OW 250
63690: PPUSH
63691: LD_VAR 0 1
63695: PPUSH
63696: CALL_OW 251
63700: PPUSH
63701: LD_VAR 0 4
63705: PPUSH
63706: CALL_OW 495
// end ; end ;
63710: LD_VAR 0 2
63714: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63715: LD_INT 0
63717: PPUSH
// end ;
63718: LD_VAR 0 4
63722: RET
// export function SOS_Command ( cmd ) ; begin
63723: LD_INT 0
63725: PPUSH
// end ;
63726: LD_VAR 0 2
63730: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63731: LD_INT 0
63733: PPUSH
// end ;
63734: LD_VAR 0 6
63738: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
63739: LD_INT 0
63741: PPUSH
63742: PPUSH
// if not vehicle or not factory then
63743: LD_VAR 0 1
63747: NOT
63748: PUSH
63749: LD_VAR 0 2
63753: NOT
63754: OR
63755: IFFALSE 63759
// exit ;
63757: GO 63990
// if factoryWaypoints >= factory then
63759: LD_EXP 114
63763: PUSH
63764: LD_VAR 0 2
63768: GREATEREQUAL
63769: IFFALSE 63990
// if factoryWaypoints [ factory ] then
63771: LD_EXP 114
63775: PUSH
63776: LD_VAR 0 2
63780: ARRAY
63781: IFFALSE 63990
// begin if GetControl ( vehicle ) = control_manual then
63783: LD_VAR 0 1
63787: PPUSH
63788: CALL_OW 263
63792: PUSH
63793: LD_INT 1
63795: EQUAL
63796: IFFALSE 63877
// begin driver := IsDrivenBy ( vehicle ) ;
63798: LD_ADDR_VAR 0 4
63802: PUSH
63803: LD_VAR 0 1
63807: PPUSH
63808: CALL_OW 311
63812: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63813: LD_VAR 0 4
63817: PPUSH
63818: LD_EXP 114
63822: PUSH
63823: LD_VAR 0 2
63827: ARRAY
63828: PUSH
63829: LD_INT 3
63831: ARRAY
63832: PPUSH
63833: LD_EXP 114
63837: PUSH
63838: LD_VAR 0 2
63842: ARRAY
63843: PUSH
63844: LD_INT 4
63846: ARRAY
63847: PPUSH
63848: CALL_OW 171
// AddComExitVehicle ( driver ) ;
63852: LD_VAR 0 4
63856: PPUSH
63857: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
63861: LD_VAR 0 4
63865: PPUSH
63866: LD_VAR 0 2
63870: PPUSH
63871: CALL_OW 180
// end else
63875: GO 63990
// if GetControl ( vehicle ) = control_remote then
63877: LD_VAR 0 1
63881: PPUSH
63882: CALL_OW 263
63886: PUSH
63887: LD_INT 2
63889: EQUAL
63890: IFFALSE 63951
// begin wait ( 0 0$2 ) ;
63892: LD_INT 70
63894: PPUSH
63895: CALL_OW 67
// if Connect ( vehicle ) then
63899: LD_VAR 0 1
63903: PPUSH
63904: CALL 14554 0 1
63908: IFFALSE 63949
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63910: LD_VAR 0 1
63914: PPUSH
63915: LD_EXP 114
63919: PUSH
63920: LD_VAR 0 2
63924: ARRAY
63925: PUSH
63926: LD_INT 3
63928: ARRAY
63929: PPUSH
63930: LD_EXP 114
63934: PUSH
63935: LD_VAR 0 2
63939: ARRAY
63940: PUSH
63941: LD_INT 4
63943: ARRAY
63944: PPUSH
63945: CALL_OW 171
// end else
63949: GO 63990
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63951: LD_VAR 0 1
63955: PPUSH
63956: LD_EXP 114
63960: PUSH
63961: LD_VAR 0 2
63965: ARRAY
63966: PUSH
63967: LD_INT 3
63969: ARRAY
63970: PPUSH
63971: LD_EXP 114
63975: PUSH
63976: LD_VAR 0 2
63980: ARRAY
63981: PUSH
63982: LD_INT 4
63984: ARRAY
63985: PPUSH
63986: CALL_OW 171
// end ; end ;
63990: LD_VAR 0 3
63994: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
63995: LD_INT 0
63997: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
63998: LD_VAR 0 1
64002: PUSH
64003: LD_INT 250
64005: EQUAL
64006: PUSH
64007: LD_VAR 0 2
64011: PPUSH
64012: CALL_OW 264
64016: PUSH
64017: LD_EXP 45
64021: EQUAL
64022: AND
64023: IFFALSE 64044
// MinerPlaceMine ( unit , x , y ) ;
64025: LD_VAR 0 2
64029: PPUSH
64030: LD_VAR 0 4
64034: PPUSH
64035: LD_VAR 0 5
64039: PPUSH
64040: CALL 66443 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
64044: LD_VAR 0 1
64048: PUSH
64049: LD_INT 251
64051: EQUAL
64052: PUSH
64053: LD_VAR 0 2
64057: PPUSH
64058: CALL_OW 264
64062: PUSH
64063: LD_EXP 45
64067: EQUAL
64068: AND
64069: IFFALSE 64090
// MinerDetonateMine ( unit , x , y ) ;
64071: LD_VAR 0 2
64075: PPUSH
64076: LD_VAR 0 4
64080: PPUSH
64081: LD_VAR 0 5
64085: PPUSH
64086: CALL 66720 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64090: LD_VAR 0 1
64094: PUSH
64095: LD_INT 252
64097: EQUAL
64098: PUSH
64099: LD_VAR 0 2
64103: PPUSH
64104: CALL_OW 264
64108: PUSH
64109: LD_EXP 45
64113: EQUAL
64114: AND
64115: IFFALSE 64136
// MinerCreateMinefield ( unit , x , y ) ;
64117: LD_VAR 0 2
64121: PPUSH
64122: LD_VAR 0 4
64126: PPUSH
64127: LD_VAR 0 5
64131: PPUSH
64132: CALL 67137 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64136: LD_VAR 0 1
64140: PUSH
64141: LD_INT 253
64143: EQUAL
64144: PUSH
64145: LD_VAR 0 2
64149: PPUSH
64150: CALL_OW 257
64154: PUSH
64155: LD_INT 5
64157: EQUAL
64158: AND
64159: IFFALSE 64180
// ComBinocular ( unit , x , y ) ;
64161: LD_VAR 0 2
64165: PPUSH
64166: LD_VAR 0 4
64170: PPUSH
64171: LD_VAR 0 5
64175: PPUSH
64176: CALL 67508 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64180: LD_VAR 0 1
64184: PUSH
64185: LD_INT 254
64187: EQUAL
64188: PUSH
64189: LD_VAR 0 2
64193: PPUSH
64194: CALL_OW 264
64198: PUSH
64199: LD_EXP 40
64203: EQUAL
64204: AND
64205: PUSH
64206: LD_VAR 0 3
64210: PPUSH
64211: CALL_OW 263
64215: PUSH
64216: LD_INT 3
64218: EQUAL
64219: AND
64220: IFFALSE 64236
// HackDestroyVehicle ( unit , selectedUnit ) ;
64222: LD_VAR 0 2
64226: PPUSH
64227: LD_VAR 0 3
64231: PPUSH
64232: CALL 65803 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64236: LD_VAR 0 1
64240: PUSH
64241: LD_INT 255
64243: EQUAL
64244: PUSH
64245: LD_VAR 0 2
64249: PPUSH
64250: CALL_OW 264
64254: PUSH
64255: LD_INT 14
64257: PUSH
64258: LD_INT 53
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: IN
64265: AND
64266: PUSH
64267: LD_VAR 0 4
64271: PPUSH
64272: LD_VAR 0 5
64276: PPUSH
64277: CALL_OW 488
64281: AND
64282: IFFALSE 64306
// CutTreeXYR ( unit , x , y , 12 ) ;
64284: LD_VAR 0 2
64288: PPUSH
64289: LD_VAR 0 4
64293: PPUSH
64294: LD_VAR 0 5
64298: PPUSH
64299: LD_INT 12
64301: PPUSH
64302: CALL 64369 0 4
// if cmd = 256 then
64306: LD_VAR 0 1
64310: PUSH
64311: LD_INT 256
64313: EQUAL
64314: IFFALSE 64335
// SetFactoryWaypoint ( unit , x , y ) ;
64316: LD_VAR 0 2
64320: PPUSH
64321: LD_VAR 0 4
64325: PPUSH
64326: LD_VAR 0 5
64330: PPUSH
64331: CALL 62141 0 3
// if cmd = 257 then
64335: LD_VAR 0 1
64339: PUSH
64340: LD_INT 257
64342: EQUAL
64343: IFFALSE 64364
// SetWarehouseGatheringPoint ( unit , x , y ) ;
64345: LD_VAR 0 2
64349: PPUSH
64350: LD_VAR 0 4
64354: PPUSH
64355: LD_VAR 0 5
64359: PPUSH
64360: CALL 62503 0 3
// end ;
64364: LD_VAR 0 6
64368: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64369: LD_INT 0
64371: PPUSH
64372: PPUSH
64373: PPUSH
64374: PPUSH
64375: PPUSH
64376: PPUSH
64377: PPUSH
64378: PPUSH
64379: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
64380: LD_VAR 0 1
64384: NOT
64385: PUSH
64386: LD_VAR 0 2
64390: PPUSH
64391: LD_VAR 0 3
64395: PPUSH
64396: CALL_OW 488
64400: NOT
64401: OR
64402: PUSH
64403: LD_VAR 0 4
64407: NOT
64408: OR
64409: IFFALSE 64413
// exit ;
64411: GO 64753
// list := [ ] ;
64413: LD_ADDR_VAR 0 13
64417: PUSH
64418: EMPTY
64419: ST_TO_ADDR
// if x - r < 0 then
64420: LD_VAR 0 2
64424: PUSH
64425: LD_VAR 0 4
64429: MINUS
64430: PUSH
64431: LD_INT 0
64433: LESS
64434: IFFALSE 64446
// min_x := 0 else
64436: LD_ADDR_VAR 0 7
64440: PUSH
64441: LD_INT 0
64443: ST_TO_ADDR
64444: GO 64462
// min_x := x - r ;
64446: LD_ADDR_VAR 0 7
64450: PUSH
64451: LD_VAR 0 2
64455: PUSH
64456: LD_VAR 0 4
64460: MINUS
64461: ST_TO_ADDR
// if y - r < 0 then
64462: LD_VAR 0 3
64466: PUSH
64467: LD_VAR 0 4
64471: MINUS
64472: PUSH
64473: LD_INT 0
64475: LESS
64476: IFFALSE 64488
// min_y := 0 else
64478: LD_ADDR_VAR 0 8
64482: PUSH
64483: LD_INT 0
64485: ST_TO_ADDR
64486: GO 64504
// min_y := y - r ;
64488: LD_ADDR_VAR 0 8
64492: PUSH
64493: LD_VAR 0 3
64497: PUSH
64498: LD_VAR 0 4
64502: MINUS
64503: ST_TO_ADDR
// max_x := x + r ;
64504: LD_ADDR_VAR 0 9
64508: PUSH
64509: LD_VAR 0 2
64513: PUSH
64514: LD_VAR 0 4
64518: PLUS
64519: ST_TO_ADDR
// max_y := y + r ;
64520: LD_ADDR_VAR 0 10
64524: PUSH
64525: LD_VAR 0 3
64529: PUSH
64530: LD_VAR 0 4
64534: PLUS
64535: ST_TO_ADDR
// for _x = min_x to max_x do
64536: LD_ADDR_VAR 0 11
64540: PUSH
64541: DOUBLE
64542: LD_VAR 0 7
64546: DEC
64547: ST_TO_ADDR
64548: LD_VAR 0 9
64552: PUSH
64553: FOR_TO
64554: IFFALSE 64671
// for _y = min_y to max_y do
64556: LD_ADDR_VAR 0 12
64560: PUSH
64561: DOUBLE
64562: LD_VAR 0 8
64566: DEC
64567: ST_TO_ADDR
64568: LD_VAR 0 10
64572: PUSH
64573: FOR_TO
64574: IFFALSE 64667
// begin if not ValidHex ( _x , _y ) then
64576: LD_VAR 0 11
64580: PPUSH
64581: LD_VAR 0 12
64585: PPUSH
64586: CALL_OW 488
64590: NOT
64591: IFFALSE 64595
// continue ;
64593: GO 64573
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64595: LD_VAR 0 11
64599: PPUSH
64600: LD_VAR 0 12
64604: PPUSH
64605: CALL_OW 351
64609: PUSH
64610: LD_VAR 0 11
64614: PPUSH
64615: LD_VAR 0 12
64619: PPUSH
64620: CALL_OW 554
64624: AND
64625: IFFALSE 64665
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64627: LD_ADDR_VAR 0 13
64631: PUSH
64632: LD_VAR 0 13
64636: PPUSH
64637: LD_VAR 0 13
64641: PUSH
64642: LD_INT 1
64644: PLUS
64645: PPUSH
64646: LD_VAR 0 11
64650: PUSH
64651: LD_VAR 0 12
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PPUSH
64660: CALL_OW 2
64664: ST_TO_ADDR
// end ;
64665: GO 64573
64667: POP
64668: POP
64669: GO 64553
64671: POP
64672: POP
// if not list then
64673: LD_VAR 0 13
64677: NOT
64678: IFFALSE 64682
// exit ;
64680: GO 64753
// for i in list do
64682: LD_ADDR_VAR 0 6
64686: PUSH
64687: LD_VAR 0 13
64691: PUSH
64692: FOR_IN
64693: IFFALSE 64751
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
64695: LD_VAR 0 1
64699: PPUSH
64700: LD_STRING M
64702: PUSH
64703: LD_VAR 0 6
64707: PUSH
64708: LD_INT 1
64710: ARRAY
64711: PUSH
64712: LD_VAR 0 6
64716: PUSH
64717: LD_INT 2
64719: ARRAY
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: PUSH
64742: EMPTY
64743: LIST
64744: PPUSH
64745: CALL_OW 447
64749: GO 64692
64751: POP
64752: POP
// end ;
64753: LD_VAR 0 5
64757: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
64758: LD_EXP 117
64762: NOT
64763: IFFALSE 64813
64765: GO 64767
64767: DISABLE
// begin initHack := true ;
64768: LD_ADDR_EXP 117
64772: PUSH
64773: LD_INT 1
64775: ST_TO_ADDR
// hackTanks := [ ] ;
64776: LD_ADDR_EXP 118
64780: PUSH
64781: EMPTY
64782: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
64783: LD_ADDR_EXP 119
64787: PUSH
64788: EMPTY
64789: ST_TO_ADDR
// hackLimit := 3 ;
64790: LD_ADDR_EXP 120
64794: PUSH
64795: LD_INT 3
64797: ST_TO_ADDR
// hackDist := 12 ;
64798: LD_ADDR_EXP 121
64802: PUSH
64803: LD_INT 12
64805: ST_TO_ADDR
// hackCounter := [ ] ;
64806: LD_ADDR_EXP 122
64810: PUSH
64811: EMPTY
64812: ST_TO_ADDR
// end ;
64813: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
64814: LD_EXP 117
64818: PUSH
64819: LD_INT 34
64821: PUSH
64822: LD_EXP 40
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PPUSH
64831: CALL_OW 69
64835: AND
64836: IFFALSE 65091
64838: GO 64840
64840: DISABLE
64841: LD_INT 0
64843: PPUSH
64844: PPUSH
// begin enable ;
64845: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
64846: LD_ADDR_VAR 0 1
64850: PUSH
64851: LD_INT 34
64853: PUSH
64854: LD_EXP 40
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PPUSH
64863: CALL_OW 69
64867: PUSH
64868: FOR_IN
64869: IFFALSE 65089
// begin if not i in hackTanks then
64871: LD_VAR 0 1
64875: PUSH
64876: LD_EXP 118
64880: IN
64881: NOT
64882: IFFALSE 64965
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
64884: LD_ADDR_EXP 118
64888: PUSH
64889: LD_EXP 118
64893: PPUSH
64894: LD_EXP 118
64898: PUSH
64899: LD_INT 1
64901: PLUS
64902: PPUSH
64903: LD_VAR 0 1
64907: PPUSH
64908: CALL_OW 1
64912: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
64913: LD_ADDR_EXP 119
64917: PUSH
64918: LD_EXP 119
64922: PPUSH
64923: LD_EXP 119
64927: PUSH
64928: LD_INT 1
64930: PLUS
64931: PPUSH
64932: EMPTY
64933: PPUSH
64934: CALL_OW 1
64938: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
64939: LD_ADDR_EXP 122
64943: PUSH
64944: LD_EXP 122
64948: PPUSH
64949: LD_EXP 122
64953: PUSH
64954: LD_INT 1
64956: PLUS
64957: PPUSH
64958: EMPTY
64959: PPUSH
64960: CALL_OW 1
64964: ST_TO_ADDR
// end ; if not IsOk ( i ) then
64965: LD_VAR 0 1
64969: PPUSH
64970: CALL_OW 302
64974: NOT
64975: IFFALSE 64988
// begin HackUnlinkAll ( i ) ;
64977: LD_VAR 0 1
64981: PPUSH
64982: CALL 65094 0 1
// continue ;
64986: GO 64868
// end ; HackCheckCapturedStatus ( i ) ;
64988: LD_VAR 0 1
64992: PPUSH
64993: CALL 65537 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
64997: LD_ADDR_VAR 0 2
65001: PUSH
65002: LD_INT 81
65004: PUSH
65005: LD_VAR 0 1
65009: PPUSH
65010: CALL_OW 255
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 33
65021: PUSH
65022: LD_INT 3
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 91
65031: PUSH
65032: LD_VAR 0 1
65036: PUSH
65037: LD_EXP 121
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 50
65049: PUSH
65050: EMPTY
65051: LIST
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: PPUSH
65059: CALL_OW 69
65063: ST_TO_ADDR
// if not tmp then
65064: LD_VAR 0 2
65068: NOT
65069: IFFALSE 65073
// continue ;
65071: GO 64868
// HackLink ( i , tmp ) ;
65073: LD_VAR 0 1
65077: PPUSH
65078: LD_VAR 0 2
65082: PPUSH
65083: CALL 65230 0 2
// end ;
65087: GO 64868
65089: POP
65090: POP
// end ;
65091: PPOPN 2
65093: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
65094: LD_INT 0
65096: PPUSH
65097: PPUSH
65098: PPUSH
// if not hack in hackTanks then
65099: LD_VAR 0 1
65103: PUSH
65104: LD_EXP 118
65108: IN
65109: NOT
65110: IFFALSE 65114
// exit ;
65112: GO 65225
// index := GetElementIndex ( hackTanks , hack ) ;
65114: LD_ADDR_VAR 0 4
65118: PUSH
65119: LD_EXP 118
65123: PPUSH
65124: LD_VAR 0 1
65128: PPUSH
65129: CALL 11368 0 2
65133: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
65134: LD_EXP 119
65138: PUSH
65139: LD_VAR 0 4
65143: ARRAY
65144: IFFALSE 65225
// begin for i in hackTanksCaptured [ index ] do
65146: LD_ADDR_VAR 0 3
65150: PUSH
65151: LD_EXP 119
65155: PUSH
65156: LD_VAR 0 4
65160: ARRAY
65161: PUSH
65162: FOR_IN
65163: IFFALSE 65189
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
65165: LD_VAR 0 3
65169: PUSH
65170: LD_INT 1
65172: ARRAY
65173: PPUSH
65174: LD_VAR 0 3
65178: PUSH
65179: LD_INT 2
65181: ARRAY
65182: PPUSH
65183: CALL_OW 235
65187: GO 65162
65189: POP
65190: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
65191: LD_ADDR_EXP 119
65195: PUSH
65196: LD_EXP 119
65200: PPUSH
65201: LD_VAR 0 4
65205: PPUSH
65206: EMPTY
65207: PPUSH
65208: CALL_OW 1
65212: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
65213: LD_VAR 0 1
65217: PPUSH
65218: LD_INT 0
65220: PPUSH
65221: CALL_OW 505
// end ; end ;
65225: LD_VAR 0 2
65229: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
65230: LD_INT 0
65232: PPUSH
65233: PPUSH
65234: PPUSH
// if not hack in hackTanks or not vehicles then
65235: LD_VAR 0 1
65239: PUSH
65240: LD_EXP 118
65244: IN
65245: NOT
65246: PUSH
65247: LD_VAR 0 2
65251: NOT
65252: OR
65253: IFFALSE 65257
// exit ;
65255: GO 65532
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
65257: LD_ADDR_VAR 0 2
65261: PUSH
65262: LD_VAR 0 1
65266: PPUSH
65267: LD_VAR 0 2
65271: PPUSH
65272: LD_INT 1
65274: PPUSH
65275: LD_INT 1
65277: PPUSH
65278: CALL 12018 0 4
65282: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
65283: LD_ADDR_VAR 0 5
65287: PUSH
65288: LD_EXP 118
65292: PPUSH
65293: LD_VAR 0 1
65297: PPUSH
65298: CALL 11368 0 2
65302: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
65303: LD_EXP 119
65307: PUSH
65308: LD_VAR 0 5
65312: ARRAY
65313: PUSH
65314: LD_EXP 120
65318: LESS
65319: IFFALSE 65508
// begin for i := 1 to vehicles do
65321: LD_ADDR_VAR 0 4
65325: PUSH
65326: DOUBLE
65327: LD_INT 1
65329: DEC
65330: ST_TO_ADDR
65331: LD_VAR 0 2
65335: PUSH
65336: FOR_TO
65337: IFFALSE 65506
// begin if hackTanksCaptured [ index ] = hackLimit then
65339: LD_EXP 119
65343: PUSH
65344: LD_VAR 0 5
65348: ARRAY
65349: PUSH
65350: LD_EXP 120
65354: EQUAL
65355: IFFALSE 65359
// break ;
65357: GO 65506
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
65359: LD_ADDR_EXP 122
65363: PUSH
65364: LD_EXP 122
65368: PPUSH
65369: LD_VAR 0 5
65373: PPUSH
65374: LD_EXP 122
65378: PUSH
65379: LD_VAR 0 5
65383: ARRAY
65384: PUSH
65385: LD_INT 1
65387: PLUS
65388: PPUSH
65389: CALL_OW 1
65393: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
65394: LD_ADDR_EXP 119
65398: PUSH
65399: LD_EXP 119
65403: PPUSH
65404: LD_VAR 0 5
65408: PUSH
65409: LD_EXP 119
65413: PUSH
65414: LD_VAR 0 5
65418: ARRAY
65419: PUSH
65420: LD_INT 1
65422: PLUS
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PPUSH
65428: LD_VAR 0 2
65432: PUSH
65433: LD_VAR 0 4
65437: ARRAY
65438: PUSH
65439: LD_VAR 0 2
65443: PUSH
65444: LD_VAR 0 4
65448: ARRAY
65449: PPUSH
65450: CALL_OW 255
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PPUSH
65459: CALL 11583 0 3
65463: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
65464: LD_VAR 0 2
65468: PUSH
65469: LD_VAR 0 4
65473: ARRAY
65474: PPUSH
65475: LD_VAR 0 1
65479: PPUSH
65480: CALL_OW 255
65484: PPUSH
65485: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
65489: LD_VAR 0 2
65493: PUSH
65494: LD_VAR 0 4
65498: ARRAY
65499: PPUSH
65500: CALL_OW 141
// end ;
65504: GO 65336
65506: POP
65507: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65508: LD_VAR 0 1
65512: PPUSH
65513: LD_EXP 119
65517: PUSH
65518: LD_VAR 0 5
65522: ARRAY
65523: PUSH
65524: LD_INT 0
65526: PLUS
65527: PPUSH
65528: CALL_OW 505
// end ;
65532: LD_VAR 0 3
65536: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
65537: LD_INT 0
65539: PPUSH
65540: PPUSH
65541: PPUSH
65542: PPUSH
// if not hack in hackTanks then
65543: LD_VAR 0 1
65547: PUSH
65548: LD_EXP 118
65552: IN
65553: NOT
65554: IFFALSE 65558
// exit ;
65556: GO 65798
// index := GetElementIndex ( hackTanks , hack ) ;
65558: LD_ADDR_VAR 0 4
65562: PUSH
65563: LD_EXP 118
65567: PPUSH
65568: LD_VAR 0 1
65572: PPUSH
65573: CALL 11368 0 2
65577: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65578: LD_ADDR_VAR 0 3
65582: PUSH
65583: DOUBLE
65584: LD_EXP 119
65588: PUSH
65589: LD_VAR 0 4
65593: ARRAY
65594: INC
65595: ST_TO_ADDR
65596: LD_INT 1
65598: PUSH
65599: FOR_DOWNTO
65600: IFFALSE 65772
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65602: LD_ADDR_VAR 0 5
65606: PUSH
65607: LD_EXP 119
65611: PUSH
65612: LD_VAR 0 4
65616: ARRAY
65617: PUSH
65618: LD_VAR 0 3
65622: ARRAY
65623: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65624: LD_VAR 0 5
65628: PUSH
65629: LD_INT 1
65631: ARRAY
65632: PPUSH
65633: CALL_OW 302
65637: NOT
65638: PUSH
65639: LD_VAR 0 5
65643: PUSH
65644: LD_INT 1
65646: ARRAY
65647: PPUSH
65648: CALL_OW 255
65652: PUSH
65653: LD_VAR 0 1
65657: PPUSH
65658: CALL_OW 255
65662: NONEQUAL
65663: OR
65664: IFFALSE 65770
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
65666: LD_VAR 0 5
65670: PUSH
65671: LD_INT 1
65673: ARRAY
65674: PPUSH
65675: CALL_OW 305
65679: PUSH
65680: LD_VAR 0 5
65684: PUSH
65685: LD_INT 1
65687: ARRAY
65688: PPUSH
65689: CALL_OW 255
65693: PUSH
65694: LD_VAR 0 1
65698: PPUSH
65699: CALL_OW 255
65703: EQUAL
65704: AND
65705: IFFALSE 65729
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
65707: LD_VAR 0 5
65711: PUSH
65712: LD_INT 1
65714: ARRAY
65715: PPUSH
65716: LD_VAR 0 5
65720: PUSH
65721: LD_INT 2
65723: ARRAY
65724: PPUSH
65725: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
65729: LD_ADDR_EXP 119
65733: PUSH
65734: LD_EXP 119
65738: PPUSH
65739: LD_VAR 0 4
65743: PPUSH
65744: LD_EXP 119
65748: PUSH
65749: LD_VAR 0 4
65753: ARRAY
65754: PPUSH
65755: LD_VAR 0 3
65759: PPUSH
65760: CALL_OW 3
65764: PPUSH
65765: CALL_OW 1
65769: ST_TO_ADDR
// end ; end ;
65770: GO 65599
65772: POP
65773: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65774: LD_VAR 0 1
65778: PPUSH
65779: LD_EXP 119
65783: PUSH
65784: LD_VAR 0 4
65788: ARRAY
65789: PUSH
65790: LD_INT 0
65792: PLUS
65793: PPUSH
65794: CALL_OW 505
// end ;
65798: LD_VAR 0 2
65802: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
65803: LD_INT 0
65805: PPUSH
65806: PPUSH
65807: PPUSH
65808: PPUSH
// if not hack in hackTanks then
65809: LD_VAR 0 1
65813: PUSH
65814: LD_EXP 118
65818: IN
65819: NOT
65820: IFFALSE 65824
// exit ;
65822: GO 65909
// index := GetElementIndex ( hackTanks , hack ) ;
65824: LD_ADDR_VAR 0 5
65828: PUSH
65829: LD_EXP 118
65833: PPUSH
65834: LD_VAR 0 1
65838: PPUSH
65839: CALL 11368 0 2
65843: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
65844: LD_ADDR_VAR 0 4
65848: PUSH
65849: DOUBLE
65850: LD_INT 1
65852: DEC
65853: ST_TO_ADDR
65854: LD_EXP 119
65858: PUSH
65859: LD_VAR 0 5
65863: ARRAY
65864: PUSH
65865: FOR_TO
65866: IFFALSE 65907
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
65868: LD_EXP 119
65872: PUSH
65873: LD_VAR 0 5
65877: ARRAY
65878: PUSH
65879: LD_VAR 0 4
65883: ARRAY
65884: PUSH
65885: LD_INT 1
65887: ARRAY
65888: PUSH
65889: LD_VAR 0 2
65893: EQUAL
65894: IFFALSE 65905
// KillUnit ( vehicle ) ;
65896: LD_VAR 0 2
65900: PPUSH
65901: CALL_OW 66
65905: GO 65865
65907: POP
65908: POP
// end ;
65909: LD_VAR 0 3
65913: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
65914: LD_EXP 123
65918: NOT
65919: IFFALSE 65954
65921: GO 65923
65923: DISABLE
// begin initMiner := true ;
65924: LD_ADDR_EXP 123
65928: PUSH
65929: LD_INT 1
65931: ST_TO_ADDR
// minersList := [ ] ;
65932: LD_ADDR_EXP 124
65936: PUSH
65937: EMPTY
65938: ST_TO_ADDR
// minerMinesList := [ ] ;
65939: LD_ADDR_EXP 125
65943: PUSH
65944: EMPTY
65945: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
65946: LD_ADDR_EXP 126
65950: PUSH
65951: LD_INT 5
65953: ST_TO_ADDR
// end ;
65954: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
65955: LD_EXP 123
65959: PUSH
65960: LD_INT 34
65962: PUSH
65963: LD_EXP 45
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PPUSH
65972: CALL_OW 69
65976: AND
65977: IFFALSE 66440
65979: GO 65981
65981: DISABLE
65982: LD_INT 0
65984: PPUSH
65985: PPUSH
65986: PPUSH
65987: PPUSH
// begin enable ;
65988: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
65989: LD_ADDR_VAR 0 1
65993: PUSH
65994: LD_INT 34
65996: PUSH
65997: LD_EXP 45
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PPUSH
66006: CALL_OW 69
66010: PUSH
66011: FOR_IN
66012: IFFALSE 66084
// begin if not i in minersList then
66014: LD_VAR 0 1
66018: PUSH
66019: LD_EXP 124
66023: IN
66024: NOT
66025: IFFALSE 66082
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
66027: LD_ADDR_EXP 124
66031: PUSH
66032: LD_EXP 124
66036: PPUSH
66037: LD_EXP 124
66041: PUSH
66042: LD_INT 1
66044: PLUS
66045: PPUSH
66046: LD_VAR 0 1
66050: PPUSH
66051: CALL_OW 1
66055: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
66056: LD_ADDR_EXP 125
66060: PUSH
66061: LD_EXP 125
66065: PPUSH
66066: LD_EXP 125
66070: PUSH
66071: LD_INT 1
66073: PLUS
66074: PPUSH
66075: EMPTY
66076: PPUSH
66077: CALL_OW 1
66081: ST_TO_ADDR
// end end ;
66082: GO 66011
66084: POP
66085: POP
// for i := minerMinesList downto 1 do
66086: LD_ADDR_VAR 0 1
66090: PUSH
66091: DOUBLE
66092: LD_EXP 125
66096: INC
66097: ST_TO_ADDR
66098: LD_INT 1
66100: PUSH
66101: FOR_DOWNTO
66102: IFFALSE 66438
// begin if IsLive ( minersList [ i ] ) then
66104: LD_EXP 124
66108: PUSH
66109: LD_VAR 0 1
66113: ARRAY
66114: PPUSH
66115: CALL_OW 300
66119: IFFALSE 66147
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
66121: LD_EXP 124
66125: PUSH
66126: LD_VAR 0 1
66130: ARRAY
66131: PPUSH
66132: LD_EXP 125
66136: PUSH
66137: LD_VAR 0 1
66141: ARRAY
66142: PPUSH
66143: CALL_OW 505
// if not minerMinesList [ i ] then
66147: LD_EXP 125
66151: PUSH
66152: LD_VAR 0 1
66156: ARRAY
66157: NOT
66158: IFFALSE 66162
// continue ;
66160: GO 66101
// for j := minerMinesList [ i ] downto 1 do
66162: LD_ADDR_VAR 0 2
66166: PUSH
66167: DOUBLE
66168: LD_EXP 125
66172: PUSH
66173: LD_VAR 0 1
66177: ARRAY
66178: INC
66179: ST_TO_ADDR
66180: LD_INT 1
66182: PUSH
66183: FOR_DOWNTO
66184: IFFALSE 66434
// begin side := GetSide ( minersList [ i ] ) ;
66186: LD_ADDR_VAR 0 3
66190: PUSH
66191: LD_EXP 124
66195: PUSH
66196: LD_VAR 0 1
66200: ARRAY
66201: PPUSH
66202: CALL_OW 255
66206: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
66207: LD_ADDR_VAR 0 4
66211: PUSH
66212: LD_EXP 125
66216: PUSH
66217: LD_VAR 0 1
66221: ARRAY
66222: PUSH
66223: LD_VAR 0 2
66227: ARRAY
66228: PUSH
66229: LD_INT 1
66231: ARRAY
66232: PPUSH
66233: LD_EXP 125
66237: PUSH
66238: LD_VAR 0 1
66242: ARRAY
66243: PUSH
66244: LD_VAR 0 2
66248: ARRAY
66249: PUSH
66250: LD_INT 2
66252: ARRAY
66253: PPUSH
66254: CALL_OW 428
66258: ST_TO_ADDR
// if not tmp then
66259: LD_VAR 0 4
66263: NOT
66264: IFFALSE 66268
// continue ;
66266: GO 66183
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
66268: LD_VAR 0 4
66272: PUSH
66273: LD_INT 81
66275: PUSH
66276: LD_VAR 0 3
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PPUSH
66285: CALL_OW 69
66289: IN
66290: PUSH
66291: LD_EXP 125
66295: PUSH
66296: LD_VAR 0 1
66300: ARRAY
66301: PUSH
66302: LD_VAR 0 2
66306: ARRAY
66307: PUSH
66308: LD_INT 1
66310: ARRAY
66311: PPUSH
66312: LD_EXP 125
66316: PUSH
66317: LD_VAR 0 1
66321: ARRAY
66322: PUSH
66323: LD_VAR 0 2
66327: ARRAY
66328: PUSH
66329: LD_INT 2
66331: ARRAY
66332: PPUSH
66333: CALL_OW 458
66337: AND
66338: IFFALSE 66432
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
66340: LD_EXP 125
66344: PUSH
66345: LD_VAR 0 1
66349: ARRAY
66350: PUSH
66351: LD_VAR 0 2
66355: ARRAY
66356: PUSH
66357: LD_INT 1
66359: ARRAY
66360: PPUSH
66361: LD_EXP 125
66365: PUSH
66366: LD_VAR 0 1
66370: ARRAY
66371: PUSH
66372: LD_VAR 0 2
66376: ARRAY
66377: PUSH
66378: LD_INT 2
66380: ARRAY
66381: PPUSH
66382: LD_VAR 0 3
66386: PPUSH
66387: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
66391: LD_ADDR_EXP 125
66395: PUSH
66396: LD_EXP 125
66400: PPUSH
66401: LD_VAR 0 1
66405: PPUSH
66406: LD_EXP 125
66410: PUSH
66411: LD_VAR 0 1
66415: ARRAY
66416: PPUSH
66417: LD_VAR 0 2
66421: PPUSH
66422: CALL_OW 3
66426: PPUSH
66427: CALL_OW 1
66431: ST_TO_ADDR
// end ; end ;
66432: GO 66183
66434: POP
66435: POP
// end ;
66436: GO 66101
66438: POP
66439: POP
// end ;
66440: PPOPN 4
66442: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
66443: LD_INT 0
66445: PPUSH
66446: PPUSH
// result := false ;
66447: LD_ADDR_VAR 0 4
66451: PUSH
66452: LD_INT 0
66454: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
66455: LD_VAR 0 1
66459: PPUSH
66460: CALL_OW 264
66464: PUSH
66465: LD_EXP 45
66469: EQUAL
66470: NOT
66471: IFFALSE 66475
// exit ;
66473: GO 66715
// index := GetElementIndex ( minersList , unit ) ;
66475: LD_ADDR_VAR 0 5
66479: PUSH
66480: LD_EXP 124
66484: PPUSH
66485: LD_VAR 0 1
66489: PPUSH
66490: CALL 11368 0 2
66494: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
66495: LD_EXP 125
66499: PUSH
66500: LD_VAR 0 5
66504: ARRAY
66505: PUSH
66506: LD_EXP 126
66510: GREATEREQUAL
66511: IFFALSE 66515
// exit ;
66513: GO 66715
// ComMoveXY ( unit , x , y ) ;
66515: LD_VAR 0 1
66519: PPUSH
66520: LD_VAR 0 2
66524: PPUSH
66525: LD_VAR 0 3
66529: PPUSH
66530: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66534: LD_INT 35
66536: PPUSH
66537: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
66541: LD_VAR 0 1
66545: PPUSH
66546: LD_VAR 0 2
66550: PPUSH
66551: LD_VAR 0 3
66555: PPUSH
66556: CALL 42637 0 3
66560: NOT
66561: PUSH
66562: LD_VAR 0 1
66566: PPUSH
66567: CALL_OW 314
66571: AND
66572: IFFALSE 66576
// exit ;
66574: GO 66715
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66576: LD_VAR 0 2
66580: PPUSH
66581: LD_VAR 0 3
66585: PPUSH
66586: CALL_OW 428
66590: PUSH
66591: LD_VAR 0 1
66595: EQUAL
66596: PUSH
66597: LD_VAR 0 1
66601: PPUSH
66602: CALL_OW 314
66606: NOT
66607: AND
66608: IFFALSE 66534
// PlaySoundXY ( x , y , PlantMine ) ;
66610: LD_VAR 0 2
66614: PPUSH
66615: LD_VAR 0 3
66619: PPUSH
66620: LD_STRING PlantMine
66622: PPUSH
66623: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66627: LD_VAR 0 2
66631: PPUSH
66632: LD_VAR 0 3
66636: PPUSH
66637: LD_VAR 0 1
66641: PPUSH
66642: CALL_OW 255
66646: PPUSH
66647: LD_INT 0
66649: PPUSH
66650: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
66654: LD_ADDR_EXP 125
66658: PUSH
66659: LD_EXP 125
66663: PPUSH
66664: LD_VAR 0 5
66668: PUSH
66669: LD_EXP 125
66673: PUSH
66674: LD_VAR 0 5
66678: ARRAY
66679: PUSH
66680: LD_INT 1
66682: PLUS
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PPUSH
66688: LD_VAR 0 2
66692: PUSH
66693: LD_VAR 0 3
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PPUSH
66702: CALL 11583 0 3
66706: ST_TO_ADDR
// result := true ;
66707: LD_ADDR_VAR 0 4
66711: PUSH
66712: LD_INT 1
66714: ST_TO_ADDR
// end ;
66715: LD_VAR 0 4
66719: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
66720: LD_INT 0
66722: PPUSH
66723: PPUSH
66724: PPUSH
// if not unit in minersList then
66725: LD_VAR 0 1
66729: PUSH
66730: LD_EXP 124
66734: IN
66735: NOT
66736: IFFALSE 66740
// exit ;
66738: GO 67132
// index := GetElementIndex ( minersList , unit ) ;
66740: LD_ADDR_VAR 0 6
66744: PUSH
66745: LD_EXP 124
66749: PPUSH
66750: LD_VAR 0 1
66754: PPUSH
66755: CALL 11368 0 2
66759: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
66760: LD_ADDR_VAR 0 5
66764: PUSH
66765: DOUBLE
66766: LD_EXP 125
66770: PUSH
66771: LD_VAR 0 6
66775: ARRAY
66776: INC
66777: ST_TO_ADDR
66778: LD_INT 1
66780: PUSH
66781: FOR_DOWNTO
66782: IFFALSE 66943
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
66784: LD_EXP 125
66788: PUSH
66789: LD_VAR 0 6
66793: ARRAY
66794: PUSH
66795: LD_VAR 0 5
66799: ARRAY
66800: PUSH
66801: LD_INT 1
66803: ARRAY
66804: PUSH
66805: LD_VAR 0 2
66809: EQUAL
66810: PUSH
66811: LD_EXP 125
66815: PUSH
66816: LD_VAR 0 6
66820: ARRAY
66821: PUSH
66822: LD_VAR 0 5
66826: ARRAY
66827: PUSH
66828: LD_INT 2
66830: ARRAY
66831: PUSH
66832: LD_VAR 0 3
66836: EQUAL
66837: AND
66838: IFFALSE 66941
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66840: LD_EXP 125
66844: PUSH
66845: LD_VAR 0 6
66849: ARRAY
66850: PUSH
66851: LD_VAR 0 5
66855: ARRAY
66856: PUSH
66857: LD_INT 1
66859: ARRAY
66860: PPUSH
66861: LD_EXP 125
66865: PUSH
66866: LD_VAR 0 6
66870: ARRAY
66871: PUSH
66872: LD_VAR 0 5
66876: ARRAY
66877: PUSH
66878: LD_INT 2
66880: ARRAY
66881: PPUSH
66882: LD_VAR 0 1
66886: PPUSH
66887: CALL_OW 255
66891: PPUSH
66892: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66896: LD_ADDR_EXP 125
66900: PUSH
66901: LD_EXP 125
66905: PPUSH
66906: LD_VAR 0 6
66910: PPUSH
66911: LD_EXP 125
66915: PUSH
66916: LD_VAR 0 6
66920: ARRAY
66921: PPUSH
66922: LD_VAR 0 5
66926: PPUSH
66927: CALL_OW 3
66931: PPUSH
66932: CALL_OW 1
66936: ST_TO_ADDR
// exit ;
66937: POP
66938: POP
66939: GO 67132
// end ; end ;
66941: GO 66781
66943: POP
66944: POP
// for i := minerMinesList [ index ] downto 1 do
66945: LD_ADDR_VAR 0 5
66949: PUSH
66950: DOUBLE
66951: LD_EXP 125
66955: PUSH
66956: LD_VAR 0 6
66960: ARRAY
66961: INC
66962: ST_TO_ADDR
66963: LD_INT 1
66965: PUSH
66966: FOR_DOWNTO
66967: IFFALSE 67130
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
66969: LD_EXP 125
66973: PUSH
66974: LD_VAR 0 6
66978: ARRAY
66979: PUSH
66980: LD_VAR 0 5
66984: ARRAY
66985: PUSH
66986: LD_INT 1
66988: ARRAY
66989: PPUSH
66990: LD_EXP 125
66994: PUSH
66995: LD_VAR 0 6
66999: ARRAY
67000: PUSH
67001: LD_VAR 0 5
67005: ARRAY
67006: PUSH
67007: LD_INT 2
67009: ARRAY
67010: PPUSH
67011: LD_VAR 0 2
67015: PPUSH
67016: LD_VAR 0 3
67020: PPUSH
67021: CALL_OW 298
67025: PUSH
67026: LD_INT 6
67028: LESS
67029: IFFALSE 67128
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67031: LD_EXP 125
67035: PUSH
67036: LD_VAR 0 6
67040: ARRAY
67041: PUSH
67042: LD_VAR 0 5
67046: ARRAY
67047: PUSH
67048: LD_INT 1
67050: ARRAY
67051: PPUSH
67052: LD_EXP 125
67056: PUSH
67057: LD_VAR 0 6
67061: ARRAY
67062: PUSH
67063: LD_VAR 0 5
67067: ARRAY
67068: PUSH
67069: LD_INT 2
67071: ARRAY
67072: PPUSH
67073: LD_VAR 0 1
67077: PPUSH
67078: CALL_OW 255
67082: PPUSH
67083: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67087: LD_ADDR_EXP 125
67091: PUSH
67092: LD_EXP 125
67096: PPUSH
67097: LD_VAR 0 6
67101: PPUSH
67102: LD_EXP 125
67106: PUSH
67107: LD_VAR 0 6
67111: ARRAY
67112: PPUSH
67113: LD_VAR 0 5
67117: PPUSH
67118: CALL_OW 3
67122: PPUSH
67123: CALL_OW 1
67127: ST_TO_ADDR
// end ; end ;
67128: GO 66966
67130: POP
67131: POP
// end ;
67132: LD_VAR 0 4
67136: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
67137: LD_INT 0
67139: PPUSH
67140: PPUSH
67141: PPUSH
67142: PPUSH
67143: PPUSH
67144: PPUSH
67145: PPUSH
67146: PPUSH
67147: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
67148: LD_VAR 0 1
67152: PPUSH
67153: CALL_OW 264
67157: PUSH
67158: LD_EXP 45
67162: EQUAL
67163: NOT
67164: PUSH
67165: LD_VAR 0 1
67169: PUSH
67170: LD_EXP 124
67174: IN
67175: NOT
67176: OR
67177: IFFALSE 67181
// exit ;
67179: GO 67503
// index := GetElementIndex ( minersList , unit ) ;
67181: LD_ADDR_VAR 0 6
67185: PUSH
67186: LD_EXP 124
67190: PPUSH
67191: LD_VAR 0 1
67195: PPUSH
67196: CALL 11368 0 2
67200: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
67201: LD_ADDR_VAR 0 8
67205: PUSH
67206: LD_EXP 126
67210: PUSH
67211: LD_EXP 125
67215: PUSH
67216: LD_VAR 0 6
67220: ARRAY
67221: MINUS
67222: ST_TO_ADDR
// if not minesFreeAmount then
67223: LD_VAR 0 8
67227: NOT
67228: IFFALSE 67232
// exit ;
67230: GO 67503
// tmp := [ ] ;
67232: LD_ADDR_VAR 0 7
67236: PUSH
67237: EMPTY
67238: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
67239: LD_ADDR_VAR 0 5
67243: PUSH
67244: DOUBLE
67245: LD_INT 1
67247: DEC
67248: ST_TO_ADDR
67249: LD_VAR 0 8
67253: PUSH
67254: FOR_TO
67255: IFFALSE 67450
// begin _d := rand ( 0 , 5 ) ;
67257: LD_ADDR_VAR 0 11
67261: PUSH
67262: LD_INT 0
67264: PPUSH
67265: LD_INT 5
67267: PPUSH
67268: CALL_OW 12
67272: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
67273: LD_ADDR_VAR 0 12
67277: PUSH
67278: LD_INT 2
67280: PPUSH
67281: LD_INT 6
67283: PPUSH
67284: CALL_OW 12
67288: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
67289: LD_ADDR_VAR 0 9
67293: PUSH
67294: LD_VAR 0 2
67298: PPUSH
67299: LD_VAR 0 11
67303: PPUSH
67304: LD_VAR 0 12
67308: PPUSH
67309: CALL_OW 272
67313: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
67314: LD_ADDR_VAR 0 10
67318: PUSH
67319: LD_VAR 0 3
67323: PPUSH
67324: LD_VAR 0 11
67328: PPUSH
67329: LD_VAR 0 12
67333: PPUSH
67334: CALL_OW 273
67338: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
67339: LD_VAR 0 9
67343: PPUSH
67344: LD_VAR 0 10
67348: PPUSH
67349: CALL_OW 488
67353: PUSH
67354: LD_VAR 0 9
67358: PUSH
67359: LD_VAR 0 10
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_VAR 0 7
67372: IN
67373: NOT
67374: AND
67375: PUSH
67376: LD_VAR 0 9
67380: PPUSH
67381: LD_VAR 0 10
67385: PPUSH
67386: CALL_OW 458
67390: NOT
67391: AND
67392: IFFALSE 67434
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
67394: LD_ADDR_VAR 0 7
67398: PUSH
67399: LD_VAR 0 7
67403: PPUSH
67404: LD_VAR 0 7
67408: PUSH
67409: LD_INT 1
67411: PLUS
67412: PPUSH
67413: LD_VAR 0 9
67417: PUSH
67418: LD_VAR 0 10
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PPUSH
67427: CALL_OW 1
67431: ST_TO_ADDR
67432: GO 67448
// i := i - 1 ;
67434: LD_ADDR_VAR 0 5
67438: PUSH
67439: LD_VAR 0 5
67443: PUSH
67444: LD_INT 1
67446: MINUS
67447: ST_TO_ADDR
// end ;
67448: GO 67254
67450: POP
67451: POP
// for i in tmp do
67452: LD_ADDR_VAR 0 5
67456: PUSH
67457: LD_VAR 0 7
67461: PUSH
67462: FOR_IN
67463: IFFALSE 67501
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
67465: LD_VAR 0 1
67469: PPUSH
67470: LD_VAR 0 5
67474: PUSH
67475: LD_INT 1
67477: ARRAY
67478: PPUSH
67479: LD_VAR 0 5
67483: PUSH
67484: LD_INT 2
67486: ARRAY
67487: PPUSH
67488: CALL 66443 0 3
67492: NOT
67493: IFFALSE 67499
// exit ;
67495: POP
67496: POP
67497: GO 67503
67499: GO 67462
67501: POP
67502: POP
// end ;
67503: LD_VAR 0 4
67507: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
67508: LD_INT 0
67510: PPUSH
67511: PPUSH
67512: PPUSH
67513: PPUSH
67514: PPUSH
67515: PPUSH
67516: PPUSH
// if not GetClass ( unit ) = class_sniper then
67517: LD_VAR 0 1
67521: PPUSH
67522: CALL_OW 257
67526: PUSH
67527: LD_INT 5
67529: EQUAL
67530: NOT
67531: IFFALSE 67535
// exit ;
67533: GO 67923
// dist := 8 ;
67535: LD_ADDR_VAR 0 5
67539: PUSH
67540: LD_INT 8
67542: ST_TO_ADDR
// viewRange := 12 ;
67543: LD_ADDR_VAR 0 7
67547: PUSH
67548: LD_INT 12
67550: ST_TO_ADDR
// side := GetSide ( unit ) ;
67551: LD_ADDR_VAR 0 6
67555: PUSH
67556: LD_VAR 0 1
67560: PPUSH
67561: CALL_OW 255
67565: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67566: LD_INT 61
67568: PPUSH
67569: LD_VAR 0 6
67573: PPUSH
67574: CALL_OW 321
67578: PUSH
67579: LD_INT 2
67581: EQUAL
67582: IFFALSE 67592
// viewRange := 16 ;
67584: LD_ADDR_VAR 0 7
67588: PUSH
67589: LD_INT 16
67591: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67592: LD_VAR 0 1
67596: PPUSH
67597: LD_VAR 0 2
67601: PPUSH
67602: LD_VAR 0 3
67606: PPUSH
67607: CALL_OW 297
67611: PUSH
67612: LD_VAR 0 5
67616: GREATER
67617: IFFALSE 67696
// begin ComMoveXY ( unit , x , y ) ;
67619: LD_VAR 0 1
67623: PPUSH
67624: LD_VAR 0 2
67628: PPUSH
67629: LD_VAR 0 3
67633: PPUSH
67634: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67638: LD_INT 35
67640: PPUSH
67641: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
67645: LD_VAR 0 1
67649: PPUSH
67650: LD_VAR 0 2
67654: PPUSH
67655: LD_VAR 0 3
67659: PPUSH
67660: CALL 42637 0 3
67664: NOT
67665: IFFALSE 67669
// exit ;
67667: GO 67923
// until GetDistUnitXY ( unit , x , y ) < dist ;
67669: LD_VAR 0 1
67673: PPUSH
67674: LD_VAR 0 2
67678: PPUSH
67679: LD_VAR 0 3
67683: PPUSH
67684: CALL_OW 297
67688: PUSH
67689: LD_VAR 0 5
67693: LESS
67694: IFFALSE 67638
// end ; ComTurnXY ( unit , x , y ) ;
67696: LD_VAR 0 1
67700: PPUSH
67701: LD_VAR 0 2
67705: PPUSH
67706: LD_VAR 0 3
67710: PPUSH
67711: CALL_OW 118
// wait ( 5 ) ;
67715: LD_INT 5
67717: PPUSH
67718: CALL_OW 67
// _d := GetDir ( unit ) ;
67722: LD_ADDR_VAR 0 10
67726: PUSH
67727: LD_VAR 0 1
67731: PPUSH
67732: CALL_OW 254
67736: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
67737: LD_ADDR_VAR 0 8
67741: PUSH
67742: LD_VAR 0 1
67746: PPUSH
67747: CALL_OW 250
67751: PPUSH
67752: LD_VAR 0 10
67756: PPUSH
67757: LD_VAR 0 5
67761: PPUSH
67762: CALL_OW 272
67766: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
67767: LD_ADDR_VAR 0 9
67771: PUSH
67772: LD_VAR 0 1
67776: PPUSH
67777: CALL_OW 251
67781: PPUSH
67782: LD_VAR 0 10
67786: PPUSH
67787: LD_VAR 0 5
67791: PPUSH
67792: CALL_OW 273
67796: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67797: LD_VAR 0 8
67801: PPUSH
67802: LD_VAR 0 9
67806: PPUSH
67807: CALL_OW 488
67811: NOT
67812: IFFALSE 67816
// exit ;
67814: GO 67923
// ComAnimCustom ( unit , 1 ) ;
67816: LD_VAR 0 1
67820: PPUSH
67821: LD_INT 1
67823: PPUSH
67824: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
67828: LD_VAR 0 8
67832: PPUSH
67833: LD_VAR 0 9
67837: PPUSH
67838: LD_VAR 0 6
67842: PPUSH
67843: LD_VAR 0 7
67847: PPUSH
67848: CALL_OW 330
// repeat wait ( 1 ) ;
67852: LD_INT 1
67854: PPUSH
67855: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
67859: LD_VAR 0 1
67863: PPUSH
67864: CALL_OW 316
67868: PUSH
67869: LD_VAR 0 1
67873: PPUSH
67874: CALL_OW 314
67878: OR
67879: PUSH
67880: LD_VAR 0 1
67884: PPUSH
67885: CALL_OW 302
67889: NOT
67890: OR
67891: PUSH
67892: LD_VAR 0 1
67896: PPUSH
67897: CALL_OW 301
67901: OR
67902: IFFALSE 67852
// RemoveSeeing ( _x , _y , side ) ;
67904: LD_VAR 0 8
67908: PPUSH
67909: LD_VAR 0 9
67913: PPUSH
67914: LD_VAR 0 6
67918: PPUSH
67919: CALL_OW 331
// end ;
67923: LD_VAR 0 4
67927: RET
